uint64_t CVAViewpointCorrectionCreate(uint64_t a1, const __CFDictionary *a2, _DWORD *a3)
{
  unsigned __int8 v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  int v24;
  int v25;
  int v26;
  unsigned __int8 v27;
  NSObject *v28;
  uint64_t v29;
  unsigned __int8 v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  unsigned __int8 v37;
  NSObject *v38;
  unsigned int v39;
  uint64_t *v40;
  unsigned __int8 v41;
  NSObject *v42;
  char *v43;
  const char *v44;
  NSObject *v45;
  uint32_t v46;
  uint64_t Instance;
  uint64_t v48;
  uint64_t *v49;
  unsigned __int8 v50;
  unsigned __int8 v51;
  uint64_t *v52;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t *v58;
  _BYTE buf[24];
  int v60;
  char v61;
  int v62;
  char v63;
  __int16 v64;
  char v65;
  std::__shared_weak_count *v66;
  char v67;
  uint8_t v68[4];
  char *v69;
  __int16 v70;
  char *v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v5 = atomic_load((unsigned __int8 *)&qword_1EF921288);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
  {
    qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
    __cxa_guard_release(&qword_1EF921288);
  }
  v6 = (id)qword_1EF921280;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C9870000, v6, OS_LOG_TYPE_INFO, "CVAViewpointCorrectionCreate", buf, 2u);
  }

  v58 = 0;
  v7 = operator new();
  *(_QWORD *)v7 = 0;
  *(_QWORD *)(v7 + 8) = &off_1E82951B8;
  *(_DWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 24) = 850045863;
  *(_QWORD *)(v7 + 88) = 1018212795;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_QWORD *)(v7 + 80) = 0;
  *(_OWORD *)(v7 + 96) = 0u;
  *(_OWORD *)(v7 + 112) = 0u;
  *(_OWORD *)(v7 + 121) = 0u;
  *(_QWORD *)(v7 + 144) = v7 + 144;
  *(_QWORD *)(v7 + 152) = v7 + 144;
  *(_QWORD *)(v7 + 160) = 0;
  std::mutex::lock((std::mutex *)(v7 + 24));
  *(_DWORD *)(v7 + 16) = 0x7FFFFFFF;
  std::mutex::unlock((std::mutex *)(v7 + 24));
  *(_QWORD *)(v7 + 168) = 0;
  v8 = MEMORY[0x1E0CA2E18];
  v9 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)(v7 + 176) = *MEMORY[0x1E0CA2E18];
  v10 = *(_QWORD *)(v8 + 16);
  *(_QWORD *)(v7 + 192) = v10;
  *(_OWORD *)(v7 + 200) = v9;
  *(_QWORD *)(v7 + 216) = v10;
  *(_WORD *)(v7 + 224) = 0;
  *(_QWORD *)buf = operator new(0x28uLL);
  *(_OWORD *)&buf[8] = xmmword_1C9927440;
  strcpy(*(char **)buf, "com.apple.applecva.taskthreadpool");
  LOBYTE(v60) = 0;
  v61 = 0;
  LOBYTE(v62) = 0;
  v63 = 0;
  v64 = 0;
  v65 = 0;
  v67 = 0;
  sub_1C98809C8((void **)buf, "com.apple.applecva.viewpointcorrection.1", 0x28uLL);
  v60 = 4;
  v61 = 1;
  v62 = 47;
  v63 = 1;
  v64 = 257;
  v11 = (_QWORD *)operator new();
  v12 = sub_1C9920390(v11, 1, (uint64_t)buf);
  v13 = *(_QWORD *)v7;
  *(_QWORD *)v7 = v12;
  if (v13)
    v12 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = (void *)MEMORY[0x1CAA45030](v12);
  v15 = operator new();
  *(_DWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_DWORD *)(v15 + 16) = 0;
  *(_QWORD *)(v15 + 24) = 0;
  *(_DWORD *)(v15 + 32) = 0;
  *(_QWORD *)(v15 + 40) = 0;
  *(_DWORD *)(v15 + 48) = 0;
  *(_QWORD *)(v15 + 56) = 0;
  *(_DWORD *)(v15 + 64) = 0;
  *(_QWORD *)(v15 + 72) = 0;
  *(_DWORD *)(v15 + 80) = 0;
  *(_QWORD *)(v15 + 88) = 0;
  *(_DWORD *)(v15 + 96) = 0;
  *(_QWORD *)(v15 + 104) = 0;
  *(_DWORD *)(v15 + 112) = 0;
  *(_QWORD *)(v15 + 120) = 0;
  *(_DWORD *)(v15 + 128) = 0;
  *(_QWORD *)(v15 + 136) = 0;
  *(_DWORD *)(v15 + 144) = 0;
  *(_QWORD *)(v15 + 152) = 0;
  *(_OWORD *)(v15 + 160) = *(_OWORD *)v8;
  *(_QWORD *)(v15 + 176) = *(_QWORD *)(v8 + 16);
  *(_BYTE *)(v15 + 264) = 0;
  *(_BYTE *)(v15 + 272) = 0;
  *(_BYTE *)(v15 + 288) = 0;
  *(_OWORD *)(v15 + 184) = 0u;
  *(_OWORD *)(v15 + 200) = 0u;
  *(_OWORD *)(v15 + 216) = 0u;
  *(_OWORD *)(v15 + 232) = 0u;
  *(_BYTE *)(v15 + 248) = 0;
  *(_QWORD *)(v15 + 312) = 0;
  *(_OWORD *)(v15 + 296) = 0u;
  v16 = *MEMORY[0x1E0C83FE8];
  v17 = *(_OWORD *)(MEMORY[0x1E0C83FE8] + 16);
  v18 = *(_OWORD *)(MEMORY[0x1E0C83FE8] + 32);
  *(_OWORD *)(v15 + 320) = *MEMORY[0x1E0C83FE8];
  *(_OWORD *)(v15 + 336) = v17;
  *(_OWORD *)(v15 + 352) = v18;
  *(_QWORD *)(v15 + 368) = &off_1E8295050;
  *(_QWORD *)(v15 + 376) = 0x100000001;
  *(_DWORD *)(v15 + 384) = 1065353216;
  *(_QWORD *)(v15 + 388) = 0;
  *(_QWORD *)(v15 + 396) = 0x3F80000000000000;
  *(_QWORD *)(v15 + 404) = 0;
  *(_DWORD *)(v15 + 412) = 0;
  *(_OWORD *)(v15 + 424) = 0u;
  *(_QWORD *)(v15 + 440) = 0;
  *(_QWORD *)(v15 + 448) = 0x3F80000000000000;
  __asm { FMOV            V5.2S, #1.0 }
  *(_QWORD *)(v15 + 416) = _D5;
  *(_DWORD *)(v15 + 436) = 1065353216;
  *(_QWORD *)(v15 + 456) = 0;
  *(_DWORD *)(v15 + 464) = 0;
  *(_OWORD *)(v15 + 472) = 0u;
  *(_QWORD *)(v15 + 488) = 0;
  *(_OWORD *)(v15 + 496) = v16;
  *(_OWORD *)(v15 + 512) = v17;
  *(_OWORD *)(v15 + 528) = v18;
  *(_QWORD *)(v15 + 544) = &off_1E8295050;
  *(_QWORD *)(v15 + 552) = 0x100000001;
  *(_DWORD *)(v15 + 560) = 1065353216;
  *(_DWORD *)(v15 + 572) = 0;
  *(_QWORD *)(v15 + 564) = 0;
  *(_DWORD *)(v15 + 576) = 1065353216;
  *(_DWORD *)(v15 + 588) = 0;
  *(_QWORD *)(v15 + 580) = 0;
  *(_DWORD *)(v15 + 624) = 0;
  *(_QWORD *)(v15 + 616) = 0;
  *(_OWORD *)(v15 + 600) = 0u;
  *(_QWORD *)(v15 + 592) = _D5;
  *(_DWORD *)(v15 + 612) = 1065353216;
  *(_DWORD *)(v15 + 628) = 1065353216;
  *(_DWORD *)(v15 + 640) = 0;
  *(_QWORD *)(v15 + 632) = 0;
  *(_BYTE *)(v15 + 1280) = 0;
  *(_BYTE *)(v15 + 1288) = 0;
  *(_BYTE *)(v15 + 1336) = 0;
  *(_WORD *)(v15 + 1340) = 0;
  *(_DWORD *)(v15 + 696) = 0;
  *(_OWORD *)(v15 + 680) = 0u;
  *(_OWORD *)(v15 + 664) = 0u;
  *(_OWORD *)(v15 + 648) = 0u;
  *(_BYTE *)(v15 + 728) = 0;
  *(_QWORD *)(v15 + 720) = 0;
  *(_OWORD *)(v15 + 704) = 0u;
  v24 = sub_1C9893E18(v15, a2);
  v25 = v24 - 1;
  if (v24 == 1)
    v26 = 2;
  else
    v26 = v24;
  if (v24)
  {
    v27 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v27 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v28 = (id)qword_1EF921280;
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      v54 = off_1E8296478[v25];
      v55 = off_1E8296478[v26 - 1];
      *(_DWORD *)v68 = 136315394;
      v69 = v54;
      v70 = 2080;
      v71 = v55;
      _os_log_error_impl(&dword_1C9870000, v28, OS_LOG_TYPE_ERROR, "Running result->setup(std::forward<Params>(params)...) failed with %s, returning %s", v68, 0x16u);
    }

    v29 = sub_1C9889D60(v15);
    MEMORY[0x1CAA44AFC](v29, 0x10A0C409CFA2790);
    v30 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v30 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v31 = (id)qword_1EF921280;
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      v56 = off_1E8296478[v26 - 1];
      *(_DWORD *)v68 = 136315394;
      v69 = v56;
      v70 = 2080;
      v71 = v56;
      _os_log_error_impl(&dword_1C9870000, v31, OS_LOG_TYPE_ERROR, "Running construct(m_processor, options) failed with %s, returning %s", v68, 0x16u);
    }

  }
  else
  {
    v32 = *(_QWORD *)(v7 + 168);
    *(_QWORD *)(v7 + 168) = v15;
    if (v32)
    {
      v33 = sub_1C9889D60(v32);
      MEMORY[0x1CAA44AFC](v33, 0x10A0C409CFA2790);
    }
    v26 = 0;
  }
  objc_autoreleasePoolPop(v14);
  if (!v67)
    goto LABEL_25;
  v34 = v66;
  if (!v66)
    goto LABEL_25;
  p_shared_owners = (unint64_t *)&v66->__shared_owners_;
  do
    v36 = __ldaxr(p_shared_owners);
  while (__stlxr(v36 - 1, p_shared_owners));
  if (!v36)
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
    if ((buf[23] & 0x80000000) == 0)
    {
LABEL_26:
      if (v26)
        goto LABEL_27;
      goto LABEL_37;
    }
  }
  else
  {
LABEL_25:
    if ((buf[23] & 0x80000000) == 0)
      goto LABEL_26;
  }
  operator delete(*(void **)buf);
  if (v26)
  {
LABEL_27:
    v37 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v37 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v38 = (id)qword_1EF921280;
    v39 = v26 - 1;
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      v57 = off_1E8296478[v39];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v57;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v57;
      _os_log_error_impl(&dword_1C9870000, v38, OS_LOG_TYPE_ERROR, "Running result->setup(std::forward<Params>(params)...) failed with %s, returning %s", buf, 0x16u);
    }

    v40 = sub_1C989ABC8((uint64_t *)v7);
    MEMORY[0x1CAA44AFC](v40, 0x10A0C40D750F2E3);
    if (a3)
      *a3 = dword_1C99279C8[v39];
    v41 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v41 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v42 = (id)qword_1EF921280;
    if (!os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
      goto LABEL_50;
    v43 = off_1E8296478[v39];
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v43;
    v44 = "error when creating pipeline: %s";
    v45 = v42;
    v46 = 12;
LABEL_55:
    _os_log_error_impl(&dword_1C9870000, v45, OS_LOG_TYPE_ERROR, v44, buf, v46);
LABEL_50:
    v48 = 0;
    goto LABEL_51;
  }
LABEL_37:
  v58 = (uint64_t *)v7;
  if (qword_1EF921088 != -1)
    dispatch_once(&qword_1EF921088, &unk_1E82961D0);
  Instance = _CFRuntimeCreateInstance();
  v48 = Instance;
  if (a3 && !Instance)
  {
    *a3 = -22954;
    goto LABEL_48;
  }
  if (!Instance)
  {
LABEL_48:
    v51 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v51 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v42 = (id)qword_1EF921280;
    if (!os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
      goto LABEL_50;
    *(_WORD *)buf = 0;
    v44 = "out of memory when creating instance.";
    v45 = v42;
    v46 = 2;
    goto LABEL_55;
  }
  v49 = v58;
  v58 = 0;
  *(_QWORD *)(Instance + 16) = v49;
  if (a3)
    *a3 = 0;
  v50 = atomic_load((unsigned __int8 *)&qword_1EF921288);
  if ((v50 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
  {
    qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
    __cxa_guard_release(&qword_1EF921288);
  }
  v42 = (id)qword_1EF921280;
  if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C9870000, v42, OS_LOG_TYPE_INFO, "CVAViewpointCorrectionCreate done", buf, 2u);
  }
LABEL_51:

  if (v58)
  {
    v52 = sub_1C989ABC8(v58);
    MEMORY[0x1CAA44AFC](v52, 0x10A0C40D750F2E3);
  }
  return v48;
}

void sub_1C9872418(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1C987C0FC((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t CVAFaceTrackingCreate(uint64_t a1, const __CFDictionary *a2, uint64_t *a3)
{
  uint64_t Instance;
  _QWORD *v6;
  unint64_t v7;
  const __CFString *v8;
  const char *CStringPtr;
  size_t v10;
  size_t v11;
  _BYTE *v12;
  _QWORD *v13;
  unsigned __int8 v14;
  NSObject *v15;
  uint64_t result;
  unsigned __int8 v17;
  NSObject *v18;
  unsigned __int8 v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  _BYTE *v26;
  _BYTE *v27;
  size_t v28;
  _BYTE *v29;
  unint64_t v30;
  unsigned __int8 *v31;
  _BYTE *v32;
  int v33;
  _BYTE *v34;
  _BYTE *v35;
  unint64_t v36;
  uint64_t v37;
  const __CFString *v38;
  unsigned __int8 v39;
  NSObject *v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  int v45;
  char v46;
  unsigned __int8 v47;
  NSObject *v48;
  unsigned __int8 v49;
  NSObject *v50;
  _QWORD *v51;
  std::__shared_weak_count_vtbl *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count **v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *p_shared_owners;
  unint64_t v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  int v80;
  unsigned __int8 v81;
  unsigned int v82;
  char v83;
  unint64_t v84;
  int v85;
  unsigned __int8 v86;
  unsigned int v87;
  char v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  _QWORD *v100;
  _QWORD *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  unsigned __int8 v108;
  NSObject *v109;
  _BOOL4 v110;
  uint64_t v111;
  unsigned __int8 v112;
  NSObject *v113;
  char v114;
  uint64_t *v115;
  void *context;
  _QWORD *v117;
  _BYTE v118[16];
  uint64_t v119;
  std::__shared_weak_count *v120;
  uint8_t v121[288];
  _BYTE buf[24];
  int v123;
  char v124;
  int v125;
  char v126;
  __int16 v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  char v130;
  _BYTE v131[20];
  __int128 v132;
  _BYTE v133[28];
  uint64_t v134;

  v134 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    if (qword_1ED52ACE8 != -1)
      dispatch_once(&qword_1ED52ACE8, &unk_1E82961A0);
    Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      v6 = (_QWORD *)Instance;
      v7 = 0x1ED52A000uLL;
      v115 = a3;
      if (!a2)
      {
        v19 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
        if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
        {
          qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
          __cxa_guard_release(&qword_1ED52ACD0);
        }
        v20 = qword_1ED52ACE0;
        if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1C9870000, v20, OS_LOG_TYPE_DEFAULT, "Creating FaceKit with *default* options (user has given no options).", buf, 2u);
        }
LABEL_65:
        v42 = operator new();
        v43 = operator new();
        v44 = (uint64_t *)operator new();
        v117 = (_QWORD *)v42;
        sub_1C98B87A0(v44);
        *(_OWORD *)(v43 + 8) = 0u;
        *(_OWORD *)(v43 + 24) = 0u;
        *(_QWORD *)v43 = v44;
        *(_QWORD *)(v43 + 40) = &off_1E82943F8;
        *(_QWORD *)(v43 + 56) = 850045863;
        *(_QWORD *)(v43 + 120) = 1018212795;
        *(_DWORD *)(v43 + 48) = 0;
        *(_OWORD *)(v43 + 64) = 0u;
        *(_OWORD *)(v43 + 80) = 0u;
        *(_OWORD *)(v43 + 96) = 0u;
        *(_QWORD *)(v43 + 112) = 0;
        *(_OWORD *)(v43 + 128) = 0u;
        *(_OWORD *)(v43 + 144) = 0u;
        *(_OWORD *)(v43 + 153) = 0u;
        *(_QWORD *)(v43 + 176) = v43 + 176;
        *(_QWORD *)(v43 + 184) = v43 + 176;
        *(_QWORD *)(v43 + 192) = 0;
        std::mutex::lock((std::mutex *)(v43 + 56));
        *(_DWORD *)(v43 + 48) = 0x7FFFFFFF;
        std::mutex::unlock((std::mutex *)(v43 + 56));
        *(_DWORD *)(v43 + 224) = 0;
        *(_QWORD *)(v43 + 200) = 0x7FF8000000000000;
        context = (void *)MEMORY[0x1CAA45030]();
        cva::DictionaryHandler::DictionaryHandler((cva::DictionaryHandler *)v118, a2);
        v45 = MGGetBoolAnswer();
        if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)v118, CFSTR("thread_separate_group")))
        {
          cva::DictionaryHandler::item((cva::DictionaryHandler *)v118, CFSTR("thread_separate_group"));
          v46 = cva::ItemHandler::getValue<BOOL>();
          cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
          if ((v46 & 1) == 0)
            goto LABEL_67;
        }
        else if (!v45)
        {
LABEL_67:
          v47 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
          if ((v47 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
          {
            *(_QWORD *)(v7 + 3296) = os_log_create("com.apple.AppleCVA", "FaceKit");
            __cxa_guard_release(&qword_1ED52ACD0);
          }
          v48 = *(id *)(v7 + 3296);
          if (os_log_type_enabled(v48, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_1C9870000, v48, OS_LOG_TYPE_INFO, "Not using the separate work thread group for FaceKit.", buf, 2u);
          }

LABEL_98:
          v67 = *(std::__shared_weak_count ***)v43;
          v68 = *(_QWORD *)(v43 + 24);
          v69 = *(std::__shared_weak_count **)(v43 + 32);
          *(_QWORD *)v131 = v68;
          *(_QWORD *)&v131[8] = v69;
          if (v69)
          {
            p_shared_owners = (unint64_t *)&v69->__shared_owners_;
            do
              v71 = __ldxr(p_shared_owners);
            while (__stxr(v71 + 1, p_shared_owners));
            *(_QWORD *)buf = v68;
            *(_QWORD *)&buf[8] = v69;
            do
              v72 = __ldxr(p_shared_owners);
            while (__stxr(v72 + 1, p_shared_owners));
          }
          else
          {
            *(_QWORD *)buf = v68;
            *(_QWORD *)&buf[8] = 0;
          }
          v73 = *v67;
          v121[0] = 0;
          v121[8] = 0;
          sub_1C98B8C08(v73, (uint64_t)v118, (uint64_t *)buf, (uint64_t)v121);
          if (v121[8])
          {
            v74 = *(_QWORD *)v121;
            *(_QWORD *)v121 = 0;
            if (v74)
              MEMORY[0x1CAA44AFC](v74, 0xC400A2AC0F1);
          }
          if (v69)
          {
            v75 = (unint64_t *)&v69->__shared_owners_;
            do
              v76 = __ldaxr(v75);
            while (__stlxr(v76 - 1, v75));
            if (!v76)
            {
              ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
              std::__shared_weak_count::__release_weak(v69);
            }
          }
          v77 = *(std::__shared_weak_count **)&v131[8];
          if (*(_QWORD *)&v131[8])
          {
            v78 = (unint64_t *)(*(_QWORD *)&v131[8] + 8);
            do
              v79 = __ldaxr(v78);
            while (__stlxr(v79 - 1, v78));
            if (!v79)
            {
              ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
              std::__shared_weak_count::__release_weak(v77);
            }
          }
          if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)v118, CFSTR("thread_priority")))
          {
            cva::DictionaryHandler::item((cva::DictionaryHandler *)v118, CFSTR("thread_priority"));
            v80 = cva::ItemHandler::getValue<int>();
            v81 = v80;
            v82 = v80 & 0xFFFFFF00;
            cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
            v83 = 1;
          }
          else
          {
            v83 = 0;
            v81 = 0;
            v82 = 0;
          }
          if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)v118, CFSTR("thread_policy")))
          {
            cva::DictionaryHandler::item((cva::DictionaryHandler *)v118, CFSTR("thread_policy"));
            v84 = v7;
            v85 = cva::ItemHandler::getValue<int>();
            v86 = v85;
            v87 = v85 & 0xFFFFFF00;
            cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
            v88 = 1;
          }
          else
          {
            v84 = v7;
            v88 = 0;
            v86 = 0;
            v87 = 0;
          }
          *(_QWORD *)buf = operator new(0x28uLL);
          *(_OWORD *)&buf[8] = xmmword_1C9927440;
          strcpy(*(char **)buf, "com.apple.applecva.taskthreadpool");
          LOBYTE(v123) = 0;
          v124 = 0;
          LOBYTE(v125) = 0;
          v126 = 0;
          v127 = 0;
          LOBYTE(v128) = 0;
          v130 = 0;
          sub_1C98809C8((void **)buf, "com.apple.applecva.facekit.1", 0x1CuLL);
          v123 = v87 | v86;
          v124 = v88;
          v125 = v82 | v81;
          v126 = v83;
          v89 = *(_QWORD *)(v43 + 24);
          if (v130)
          {
            v90 = *(std::__shared_weak_count **)(v43 + 32);
            v91 = v84;
            if (v90)
            {
              v92 = (unint64_t *)&v90->__shared_owners_;
              do
                v93 = __ldxr(v92);
              while (__stxr(v93 + 1, v92));
            }
            v94 = v129;
            v128 = v89;
            v129 = v90;
            if (v94)
            {
              v95 = (unint64_t *)&v94->__shared_owners_;
              do
                v96 = __ldaxr(v95);
              while (__stlxr(v96 - 1, v95));
              if (!v96)
              {
                ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                std::__shared_weak_count::__release_weak(v94);
              }
            }
          }
          else
          {
            v97 = *(std::__shared_weak_count **)(v43 + 32);
            v128 = *(_QWORD *)(v43 + 24);
            v129 = v97;
            v91 = v84;
            if (v97)
            {
              v98 = (unint64_t *)&v97->__shared_owners_;
              do
                v99 = __ldxr(v98);
              while (__stxr(v99 + 1, v98));
            }
            v130 = 1;
          }
          v100 = operator new(0x28uLL);
          v100[1] = 0;
          v100[2] = 0;
          *v100 = &off_1E8295C28;
          v101 = sub_1C9920390(v100 + 3, 1, (uint64_t)buf);
          v102 = *(std::__shared_weak_count **)(v43 + 16);
          *(_QWORD *)(v43 + 8) = v101;
          *(_QWORD *)(v43 + 16) = v100;
          if (v102)
          {
            v103 = (unint64_t *)&v102->__shared_owners_;
            do
              v104 = __ldaxr(v103);
            while (__stlxr(v104 - 1, v103));
            if (!v104)
            {
              ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
              std::__shared_weak_count::__release_weak(v102);
            }
          }
          if (v130)
          {
            v105 = v129;
            if (v129)
            {
              v106 = (unint64_t *)&v129->__shared_owners_;
              do
                v107 = __ldaxr(v106);
              while (__stlxr(v107 - 1, v106));
              if (!v107)
              {
                ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                std::__shared_weak_count::__release_weak(v105);
              }
            }
          }
          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);
          cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)v118);
          objc_autoreleasePoolPop(context);
          *v117 = v43;
          v6[2] = v117;
          if (***(_BYTE ***)v43)
          {
            *v115 = (uint64_t)v6;
            v108 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
            if ((v108 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
            {
              *(_QWORD *)(v91 + 3296) = os_log_create("com.apple.AppleCVA", "FaceKit");
              __cxa_guard_release(&qword_1ED52ACD0);
            }
            v109 = *(NSObject **)(v91 + 3296);
            v110 = os_log_type_enabled(v109, OS_LOG_TYPE_DEFAULT);
            result = 0;
            if (v110)
            {
              v111 = *v115;
              *(_DWORD *)buf = 134217984;
              *(_QWORD *)&buf[4] = v111;
              _os_log_impl(&dword_1C9870000, v109, OS_LOG_TYPE_DEFAULT, "CVAFaceTracking created (%p).", buf, 0xCu);
              return 0;
            }
          }
          else
          {
            v112 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
            if ((v112 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
            {
              *(_QWORD *)(v91 + 3296) = os_log_create("com.apple.AppleCVA", "FaceKit");
              __cxa_guard_release(&qword_1ED52ACD0);
            }
            v113 = *(NSObject **)(v91 + 3296);
            if (os_log_type_enabled(v113, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_error_impl(&dword_1C9870000, v113, OS_LOG_TYPE_ERROR, "could not initialize.", buf, 2u);
            }
            CFRelease(v6);
            return 4294944346;
          }
          return result;
        }
        v49 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
        if ((v49 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
        {
          *(_QWORD *)(v7 + 3296) = os_log_create("com.apple.AppleCVA", "FaceKit");
          __cxa_guard_release(&qword_1ED52ACD0);
        }
        v50 = *(id *)(v7 + 3296);
        if (os_log_type_enabled(v50, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1C9870000, v50, OS_LOG_TYPE_INFO, "Using separate work thread group for FaceKit.", buf, 2u);
        }

        v51 = operator new(0x28uLL);
        v51[1] = 0;
        v51[2] = 0;
        *v51 = &off_1E8295C98;
        v51[3] = 0;
        v51[4] = 0;
        v52 = (std::__shared_weak_count_vtbl *)operator new();
        v52->~__shared_weak_count = 0;
        v53 = (std::__shared_weak_count *)operator new();
        v53->__shared_owners_ = 0;
        v54 = (unint64_t *)&v53->__shared_owners_;
        v53->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8296088;
        v53->__shared_weak_owners_ = 0;
        v53[1].__vftable = v52;
        memset(v133, 0, sizeof(v133));
        v132 = 0u;
        *(_OWORD *)&v131[4] = 0u;
        *(_DWORD *)v131 = 799564724;
        if (os_workgroup_attr_set_flags())
        {
          sub_1C99072C4(&v119);
          sub_1C9907EC4(buf, &v119, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/utils/src/ThreadWorkGroup.cpp", 50, "os_workgroup_attr_set_flags failed!", v114);
          sub_1C9909318((uint64_t)buf);
          v55 = v120;
          if (!v120)
            goto LABEL_90;
          v56 = (unint64_t *)&v120->__shared_owners_;
          do
            v57 = __ldaxr(v56);
          while (__stlxr(v57 - 1, v56));
          if (v57)
            goto LABEL_90;
        }
        else
        {
          v58 = os_workgroup_create();
          v52->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v58;
          if (v58)
          {
            v59 = (std::__shared_weak_count *)v51[4];
            v51[3] = v52;
            v51[4] = v53;
            if (!v59)
            {
LABEL_93:
              v64 = *(std::__shared_weak_count **)(v43 + 32);
              *(_QWORD *)(v43 + 24) = v51 + 3;
              *(_QWORD *)(v43 + 32) = v51;
              if (v64)
              {
                v65 = (unint64_t *)&v64->__shared_owners_;
                do
                  v66 = __ldaxr(v65);
                while (__stlxr(v66 - 1, v65));
                if (!v66)
                {
                  ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                  std::__shared_weak_count::__release_weak(v64);
                }
              }
              goto LABEL_98;
            }
            v53 = v59;
            v60 = (unint64_t *)&v59->__shared_owners_;
            do
              v61 = __ldaxr(v60);
            while (__stlxr(v61 - 1, v60));
LABEL_91:
            if (!v61)
            {
              ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
              std::__shared_weak_count::__release_weak(v53);
            }
            goto LABEL_93;
          }
          sub_1C99072C4(&v119);
          sub_1C9907EC4(v121, &v119, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/utils/src/ThreadWorkGroup.cpp", 56, "os_workgroup_create group '%s' failed!", (char)"facekit_worker_group");
          sub_1C9909318((uint64_t)v121);
          v55 = v120;
          if (!v120)
            goto LABEL_178;
          v62 = (unint64_t *)&v120->__shared_owners_;
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 - 1, v62));
          if (v63)
          {
LABEL_178:
            do
LABEL_90:
              v61 = __ldaxr(v54);
            while (__stlxr(v61 - 1, v54));
            goto LABEL_91;
          }
        }
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
        goto LABEL_90;
      }
      v8 = CFCopyDescription(a2);
      CStringPtr = CFStringGetCStringPtr(v8, 0x8000100u);
      v10 = strlen(CStringPtr);
      if (v10 >= 0x7FFFFFFFFFFFFFF8)
LABEL_159:
        abort();
      v11 = v10;
      if (v10 >= 0x17)
      {
        v21 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v10 | 7) != 0x17)
          v21 = v10 | 7;
        v22 = v21 + 1;
        v12 = operator new(v21 + 1);
        *(_QWORD *)&buf[8] = v11;
        *(_QWORD *)&buf[16] = v22 | 0x8000000000000000;
        *(_QWORD *)buf = v12;
      }
      else
      {
        buf[23] = v10;
        v12 = buf;
        if (!v10)
        {
          v13 = v6;
          goto LABEL_25;
        }
      }
      v13 = v6;
      memmove(v12, CStringPtr, v11);
LABEL_25:
      v12[v11] = 0;
      v23 = buf[23];
      v24 = buf[23];
      v26 = *(_BYTE **)buf;
      v25 = *(_QWORD *)&buf[8];
      if (buf[23] >= 0)
        v27 = buf;
      else
        v27 = *(_BYTE **)buf;
      if (buf[23] >= 0)
        v28 = buf[23];
      else
        v28 = *(_QWORD *)&buf[8];
      v29 = memchr(v27, 10, v28);
      if (v29)
        v30 = (unint64_t)v29;
      else
        v30 = (unint64_t)&v27[v28];
      if (v30 - (_QWORD)v27 == v28 || (v31 = (unsigned __int8 *)(v30 + 1), (_BYTE *)(v30 + 1) == &v27[v28]))
      {
        v7 = 0x1ED52A000;
      }
      else
      {
        v32 = &v27[v28 + ~v30];
        v7 = 0x1ED52A000uLL;
        do
        {
          v33 = *v31;
          if (v33 != 10)
            *(_BYTE *)v30++ = v33;
          ++v31;
          --v32;
        }
        while (v32);
        v23 = buf[23];
        v26 = *(_BYTE **)buf;
        v25 = *(_QWORD *)&buf[8];
        v24 = buf[23];
      }
      if (v24 >= 0)
        v34 = &buf[v23];
      else
        v34 = &v26[v25];
      if (v24 >= 0)
        v35 = buf;
      else
        v35 = v26;
      if (v24 >= 0)
        v36 = v23;
      else
        v36 = v25;
      v37 = v30 - (_QWORD)v35;
      if (v36 >= v30 - (unint64_t)v35)
      {
        v6 = v13;
        if (&v34[-v30] == (_BYTE *)-1)
        {
          v38 = v8;
          if (v24 < 0)
          {
            *(_QWORD *)&buf[8] = v30 - (_QWORD)v35;
          }
          else
          {
            buf[23] = v37 & 0x7F;
            v26 = buf;
          }
          v26[v37] = 0;
        }
        else
        {
          sub_1C987A234(buf, v37, (unint64_t)&v34[-v30]);
          v38 = v8;
        }
        CFRelease(v38);
        v39 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
        if ((v39 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
        {
          *(_QWORD *)(v7 + 3296) = os_log_create("com.apple.AppleCVA", "FaceKit");
          __cxa_guard_release(&qword_1ED52ACD0);
        }
        v40 = *(NSObject **)(v7 + 3296);
        if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
        {
          v41 = buf;
          if (buf[23] < 0)
            v41 = *(_BYTE **)buf;
          *(_DWORD *)v121 = 136315138;
          *(_QWORD *)&v121[4] = v41;
          _os_log_impl(&dword_1C9870000, v40, OS_LOG_TYPE_DEFAULT, "Creating FaceKit with options: %s", v121, 0xCu);
        }
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        goto LABEL_65;
      }
      goto LABEL_159;
    }
    v17 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
    if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
    {
      qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
      __cxa_guard_release(&qword_1ED52ACD0);
    }
    v18 = qword_1ED52ACE0;
    if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1C9870000, v18, OS_LOG_TYPE_ERROR, "out of memory when creating instance.", buf, 2u);
    }
    return 4294944342;
  }
  else
  {
    v14 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
    if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
    {
      qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
      __cxa_guard_release(&qword_1ED52ACD0);
    }
    v15 = qword_1ED52ACE0;
    if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1C9870000, v15, OS_LOG_TYPE_ERROR, "invalid argument for handle.", buf, 2u);
    }
    return 4294944343;
  }
}

void sub_1C98733B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  uint64_t **v57;

  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&a57);
  cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)&a17);
  sub_1C98E3018(a11);
  sub_1C987C140(a16);
  sub_1C987C140(a12);
  sub_1C98E30E8(v57);
  MEMORY[0x1CAA44AFC](v57, 0x10A0C401DB96910);
  _Unwind_Resume(a1);
}

uint64_t CVAViewpointCorrectionProcess(uint64_t a1, const __CFDictionary *a2)
{
  CMTimeValue v4;
  cva::DictionaryHandler *v5;
  _DWORD *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  __CFDictionary *MutableCopy;
  const void *Dictionary;
  const __CFDictionary *v13;
  __CVBuffer *Value;
  signed int PixelFormatType;
  signed int v16;
  int v17;
  unsigned __int8 v18;
  NSObject *v19;
  unsigned __int8 v20;
  uint64_t v21;
  unsigned __int8 v22;
  NSObject *v23;
  unsigned __int8 v24;
  int Height;
  void *v26;
  float32x4_t v27;
  unsigned __int8 v28;
  NSObject *v29;
  unsigned __int8 v30;
  NSObject *v31;
  int v32;
  int v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  NSObject *v36;
  unsigned __int8 v37;
  NSObject *v38;
  unint64_t *v39;
  unint64_t v40;
  unsigned __int8 v41;
  NSObject *v42;
  char *v43;
  const char *v44;
  uint64_t *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  unsigned __int8 v52;
  NSObject *v53;
  const char *v54;
  unsigned __int8 v55;
  NSObject *v56;
  _BOOL4 v57;
  const char *v58;
  unint64_t *v59;
  unint64_t v60;
  unsigned __int8 v61;
  NSObject *v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  __int128 *v66;
  _OWORD *v67;
  unsigned __int8 v68;
  NSObject *v69;
  Float64 v70;
  Float64 v71;
  uint64_t v72;
  char *v73;
  char *v74;
  _OWORD *v75;
  double Seconds;
  double v77;
  unsigned __int8 v78;
  NSObject *v79;
  Float64 v80;
  Float64 v81;
  __int128 v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  char v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  char v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unsigned __int8 v100;
  const char *v101;
  NSObject *v102;
  uint64_t v103;
  __int128 v104;
  float32x2_t v105;
  float v106;
  float v107;
  char v108;
  float v109;
  NSObject *v110;
  NSObject *v111;
  const char *v112;
  unint64_t *v113;
  unint64_t v114;
  NSObject *v116;
  NSObject *v117;
  const __CFDictionary *v118;
  uint64_t v119;
  void *v120;
  int v121;
  NSObject *v122;
  const char *v123;
  const char *v124;
  std::__shared_weak_count *v125;
  unint64_t *p_shared_owners;
  unint64_t v127;
  double v128;
  double v129;
  float32x4_t v130;
  float32x4_t v131;
  CMTimeValue v132;
  std::__shared_weak_count *v133;
  CMTimeValue v134;
  std::__shared_weak_count *v135;
  CMTime v136;
  CMTime v137;
  CMTime v138;
  CMTime v139;
  CMTime rhs;
  CMTime time;
  CMTime time2;
  CMTime time1;
  _BYTE buf[32];
  __int128 v145;
  CMTime v146;
  uint64_t v147;

  v147 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v18 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v19 = (id)qword_1EF921280;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1C9870000, v19, OS_LOG_TYPE_ERROR, "invalid argument for handle.", buf, 2u);
    }
    goto LABEL_17;
  }
  if (!a2)
  {
    v20 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v20 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v19 = (id)qword_1EF921280;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1C9870000, v19, OS_LOG_TYPE_ERROR, "invalid argument for params.", buf, 2u);
    }
LABEL_17:

    return 4294944343;
  }
  v134 = 0;
  v135 = 0;
  v4 = operator new();
  v5 = (cva::DictionaryHandler *)(v4 + 16);
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  cva::DictionaryHandler::DictionaryHandler((cva::DictionaryHandler *)(v4 + 16));
  *(_QWORD *)(v4 + 32) = 0;
  v6 = (_DWORD *)(v4 + 32);
  *(_QWORD *)(v4 + 64) = 0;
  v7 = MEMORY[0x1E0C83FE8];
  v8 = *(_OWORD *)(MEMORY[0x1E0C83FE8] + 16);
  *(_OWORD *)(v4 + 80) = *MEMORY[0x1E0C83FE8];
  *(_QWORD *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_DWORD *)(v4 + 56) = 0;
  v9 = *(_OWORD *)(v7 + 32);
  *(_OWORD *)(v4 + 96) = v8;
  *(_OWORD *)(v4 + 112) = v9;
  *(_BYTE *)(v4 + 128) = 0;
  *(_BYTE *)(v4 + 132) = 0;
  *(_OWORD *)(v4 + 136) = 0u;
  *(_OWORD *)(v4 + 152) = 0u;
  *(_OWORD *)(v4 + 168) = 0u;
  *(_QWORD *)(v4 + 184) = 0;
  time.value = v4;
  v10 = (std::__shared_weak_count *)operator new();
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295F70;
  v10->__shared_owners_ = 0;
  v10->__shared_weak_owners_ = 0;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  *(_QWORD *)&time.timescale = v10;
  MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, a2);
  cva::DictionaryHandler::DictionaryHandler((cva::DictionaryHandler *)buf, MutableCopy);
  cva::DictionaryHandler::operator=();
  cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)buf);
  Dictionary = (const void *)cva::DictionaryHandler::getDictionary((cva::DictionaryHandler *)(v4 + 16));
  CFRelease(Dictionary);
  if ((cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)(v4 + 16), CFSTR("Image")) & 1) == 0)
  {
    v22 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v22 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v23 = (id)qword_1EF921280;
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1C9870000, v23, OS_LOG_TYPE_ERROR, "Precondition violated: m_params.hasKey(kCVAViewpointCorrection_Image)", buf, 2u);
    }
    goto LABEL_57;
  }
  v13 = (const __CFDictionary *)cva::DictionaryHandler::getDictionary(v5);
  Value = (__CVBuffer *)CFDictionaryGetValue(v13, CFSTR("Image"));
  *(_QWORD *)v4 = Value;
  if (!Value)
  {
    v24 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v24 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v23 = (id)qword_1EF921280;
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1C9870000, v23, OS_LOG_TYPE_ERROR, "Precondition violated: m_image = reinterpret_cast<CVPixelBufferRef>(const_cast<void*>( CFDictionaryGetValue(m_params.getDictionary(), kCVAViewpointCorrection_Image)))", buf, 2u);
    }
    goto LABEL_57;
  }
  PixelFormatType = CVPixelBufferGetPixelFormatType(Value);
  v16 = PixelFormatType;
  if (PixelFormatType > 792229423)
  {
    if (PixelFormatType <= 875704437)
    {
      if (PixelFormatType == 792229424)
        goto LABEL_35;
      v17 = 875704422;
    }
    else
    {
      if (PixelFormatType == 875704438 || PixelFormatType == 2084070960)
        goto LABEL_35;
      v17 = 2084075056;
    }
  }
  else if (PixelFormatType <= 758670895)
  {
    if (PixelFormatType == 641230384)
      goto LABEL_35;
    v17 = 641234480;
  }
  else
  {
    if (PixelFormatType == 758670896 || PixelFormatType == 758674992)
      goto LABEL_35;
    v17 = 792225328;
  }
  if (PixelFormatType != v17)
  {
    sub_1C98A5610();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v16;
      _os_log_error_impl(&dword_1C9870000, v23, OS_LOG_TYPE_ERROR, "Unsupported pixel format %d", buf, 8u);
    }
    goto LABEL_57;
  }
LABEL_35:
  *(_DWORD *)(v4 + 184) = CVPixelBufferGetWidth(*(CVPixelBufferRef *)v4);
  Height = CVPixelBufferGetHeight(*(CVPixelBufferRef *)v4);
  *(_DWORD *)(v4 + 188) = Height;
  if (*(int *)(v4 + 184) < 1 || Height <= 0)
  {
    v34 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v34 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v23 = (id)qword_1EF921280;
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1C9870000, v23, OS_LOG_TYPE_ERROR, "Image cannot be empty", buf, 2u);
    }
LABEL_57:

    goto LABEL_58;
  }
  cva::DictionaryHandler::item(v5, CFSTR("Intrinsics"));
  if ((cva::ItemHandler::isMatrixTypeOfSize((cva::ItemHandler *)&time2) & 1) == 0)
  {
    v35 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v35 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v36 = (id)qword_1EF921280;
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1C9870000, v36, OS_LOG_TYPE_ERROR, "Precondition violated: matrixItemIntrinsics.isMatrixTypeOfSize(3, 3)", buf, 2u);
    }
LABEL_53:

LABEL_54:
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&time2);
LABEL_58:
    v33 = 1;
    v32 = 2;
    goto LABEL_59;
  }
  cva::ItemHandler::getMatrix<float>();
  v26 = (void *)time1.value;
  v27 = *(float32x4_t *)time1.value;
  v131 = *(float32x4_t *)(time1.value + 16);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgeq_f32((float32x4_t)vdupq_n_s32(0x358637BDu), vabsq_f32((float32x4_t)vuzp2q_s32(*(int32x4_t *)time1.value, vuzp1q_s32(*(int32x4_t *)time1.value, (int32x4_t)vextq_s8(*(int8x16_t *)time1.value, (int8x16_t)v131, 0xCuLL)))))))) & 1) != 0|| fabsf(*(float *)(time1.value + 32) + -1.0) > 0.000001)
  {
    v28 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v28 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v29 = (id)qword_1EF921280;
    if (!os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      goto LABEL_42;
    *(_WORD *)buf = 0;
    v112 = "Precondition violated: fp_equal(matrix(0, 1), 0.f) && fp_equal(matrix(1, 0), 0.f) && fp_equal(matrix(2, 0), 0"
           ".f) && fp_equal(matrix(2, 1), 0.f) && fp_equal(matrix(2, 2), 1.f)";
    goto LABEL_184;
  }
  if (v27.f32[0] <= 0.0 || v131.f32[0] <= 0.0)
  {
    sub_1C98A5610();
    v29 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      goto LABEL_42;
    *(_WORD *)buf = 0;
    v112 = "Precondition violated: fx > 0 && fy > 0";
LABEL_184:
    _os_log_error_impl(&dword_1C9870000, v29, OS_LOG_TYPE_ERROR, v112, buf, 2u);
LABEL_42:

    free((void *)time1.value);
    v30 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v30 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v31 = (id)qword_1EF921280;
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "Precondition was violated";
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "Assertion failed";
      _os_log_error_impl(&dword_1C9870000, v31, OS_LOG_TYPE_ERROR, "Running extractIntrinsics(matrixItemIntrinsics.getMatrix<float>(), m_input_camera_intrinsics) failed with %s, returning %s", buf, 0x16u);
    }

    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&time2);
    v32 = 2;
    v33 = 2;
    goto LABEL_59;
  }
  v130 = *(float32x4_t *)time1.value;
  if (fabsf(vsubq_f32(v27, v131).f32[0]) > 0.001)
  {
    sub_1C98A5610();
    v102 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v102, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218496;
      *(double *)&buf[4] = v130.f32[0];
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v131.f32[0];
      *(_WORD *)&buf[22] = 2048;
      *(_QWORD *)&buf[24] = 0x3F50624DE0000000;
      _os_log_impl(&dword_1C9870000, v102, OS_LOG_TYPE_DEFAULT, "Focal length values %f, %f differ more than %f.", buf, 0x20u);
    }

    v26 = (void *)time1.value;
  }
  LODWORD(v103) = 0;
  *((float *)&v103 + 1) = 0.5 * vaddq_f32(v130, v131).f32[0];
  *(_DWORD *)&buf[8] = 0;
  *(_QWORD *)buf = HIDWORD(v103);
  *(_DWORD *)&buf[24] = 0;
  *(_QWORD *)&buf[16] = v103;
  DWORD2(v145) = 1065353216;
  *(_QWORD *)&v145 = 0;
  sub_1C98A2454((float32x2_t *)buf, v131.f32[2], v131.f32[3]);
  v104 = *(_OWORD *)&buf[16];
  *(_OWORD *)(v4 + 80) = *(_OWORD *)buf;
  *(_OWORD *)(v4 + 96) = v104;
  *(_OWORD *)(v4 + 112) = v145;
  free(v26);
  if (cva::DictionaryHandler::hasKey(v5, CFSTR("VirtualCameraExtrinsics")))
  {
    cva::DictionaryHandler::item(v5, CFSTR("VirtualCameraExtrinsics"));
    if ((cva::ItemHandler::isMatrixTypeOfSize((cva::ItemHandler *)&time1) & 1) != 0)
    {
      cva::ItemHandler::getMatrix<float>();
      v105 = *(float32x2_t *)(*(_QWORD *)buf + 36);
      free(*(void **)buf);
      *(float32x2_t *)(v4 + 64) = v105;
      if (sqrtf(vaddv_f32(vmul_f32(v105, v105))) > 0.000001)
      {
        cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&time1);
        goto LABEL_161;
      }
      sub_1C98A5610();
      v117 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v117, OS_LOG_TYPE_ERROR))
      {
        v128 = COERCE_FLOAT(*(_QWORD *)(v4 + 64));
        v129 = COERCE_FLOAT(HIDWORD(*(_QWORD *)(v4 + 64)));
        *(_DWORD *)buf = 134218240;
        *(double *)&buf[4] = v128;
        *(_WORD *)&buf[12] = 2048;
        *(double *)&buf[14] = v129;
        _os_log_error_impl(&dword_1C9870000, v117, OS_LOG_TYPE_ERROR, "Invalid virtual camera offset %g %g", buf, 0x16u);
      }

    }
    else
    {
      sub_1C98A5610();
      v116 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v116, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_1C9870000, v116, OS_LOG_TYPE_ERROR, "Precondition violated: matrixItemExtrinsics.isMatrixTypeOfSize(3, 4)", buf, 2u);
      }

    }
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&time1);
    goto LABEL_54;
  }
LABEL_161:
  if (cva::DictionaryHandler::hasKey(v5, CFSTR("StereographicFisheyeStrength")))
  {
    cva::DictionaryHandler::item(v5, CFSTR("StereographicFisheyeStrength"));
    cva::ItemHandler::getValue<float>();
    v107 = v106;
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
    if (v107 >= 0.0 && v107 <= 1.0)
    {
      *(float *)(v4 + 128) = v107;
      *(_BYTE *)(v4 + 132) = 1;
      goto LABEL_165;
    }
    sub_1C98A5610();
    v36 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      *(double *)&buf[4] = v107;
      _os_log_error_impl(&dword_1C9870000, v36, OS_LOG_TYPE_ERROR, "Invalid fisheye strength: %f", buf, 0xCu);
    }
    goto LABEL_53;
  }
LABEL_165:
  *v6 = 0;
  if (cva::DictionaryHandler::hasKey(v5, CFSTR("EnableCorrection"))
    && (cva::DictionaryHandler::item(v5, CFSTR("EnableCorrection")),
        v108 = cva::ItemHandler::getValue<BOOL>(),
        cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf),
        (v108 & 1) == 0))
  {
    *v6 = 1;
  }
  else if (*(_BYTE *)(v4 + 132))
  {
    v109 = *(float *)(v4 + 128);
    sub_1C98A5610();
    v110 = objc_claimAutoreleasedReturnValue();
    v111 = v110;
    if (v109 <= 0.35)
    {
      if (os_log_type_enabled(v110, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134217984;
        *(double *)&buf[4] = v109;
        _os_log_debug_impl(&dword_1C9870000, v111, OS_LOG_TYPE_DEBUG, "fisheye strength value is %f", buf, 0xCu);
      }

    }
    else
    {
      if (os_log_type_enabled(v110, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        *(double *)&buf[4] = v109;
        _os_log_impl(&dword_1C9870000, v111, OS_LOG_TYPE_INFO, "Disabling correction since fisheye strength is %f", buf, 0xCu);
      }

      *v6 = 2;
    }
  }
  cva::DictionaryHandler::item(v5, CFSTR("Timestamp"));
  cva::ItemHandler::getDictionary((cva::ItemHandler *)buf);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
  if (!time1.value)
  {
    sub_1C98A5610();
    v122 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v122, OS_LOG_TYPE_ERROR))
      goto LABEL_216;
    *(_WORD *)buf = 0;
    v124 = "Timestamp is missing";
LABEL_215:
    _os_log_error_impl(&dword_1C9870000, v122, OS_LOG_TYPE_ERROR, v124, buf, 2u);
    goto LABEL_216;
  }
  v118 = (const __CFDictionary *)cva::DictionaryHandler::getDictionary((cva::DictionaryHandler *)time1.value);
  CMTimeMakeFromDictionary((CMTime *)buf, v118);
  *(_OWORD *)(v4 + 36) = *(_OWORD *)buf;
  *(_QWORD *)(v4 + 52) = *(_QWORD *)&buf[16];
  if ((*(_DWORD *)(v4 + 48) & 0x1D) != 1)
  {
    sub_1C98A5610();
    v122 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v122, OS_LOG_TYPE_ERROR))
      goto LABEL_216;
    *(_WORD *)buf = 0;
    v124 = "Precondition violated: CMTIME_IS_NUMERIC(m_timestamp)";
    goto LABEL_215;
  }
  if ((cva::DictionaryHandler::hasKey(v5, CFSTR("Callback")) & 1) == 0)
  {
    sub_1C98A5610();
    v122 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v122, OS_LOG_TYPE_ERROR))
      goto LABEL_216;
    *(_WORD *)buf = 0;
    v124 = "Precondition violated: m_params.hasKey(kCVAViewpointCorrection_Callback)";
    goto LABEL_215;
  }
  objc_msgSend((id)cva::DictionaryHandler::getDictionary(v5), "objectForKey:", CFSTR("Callback"));
  v119 = objc_claimAutoreleasedReturnValue();
  v120 = *(void **)(v4 + 8);
  *(_QWORD *)(v4 + 8) = v119;

  if (!*(_QWORD *)(v4 + 8))
  {
    sub_1C98A5610();
    v122 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v122, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v124 = "Precondition violated: m_callback";
      goto LABEL_215;
    }
LABEL_216:
    v32 = 1;
LABEL_217:

    goto LABEL_218;
  }
  v121 = sub_1C989FE68(v4);
  if (v121)
  {
    v32 = 2 * (v121 != 0);
    sub_1C98A5610();
    v122 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v122, OS_LOG_TYPE_ERROR))
    {
      if ((v32 - 1) > 6)
        v123 = "Success, no error";
      else
        v123 = off_1E8296478[v32 - 1];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "Precondition was violated";
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v123;
      _os_log_error_impl(&dword_1C9870000, v122, OS_LOG_TYPE_ERROR, "Running extractFaceFeatures() failed with %s, returning %s", buf, 0x16u);
    }
    goto LABEL_217;
  }
  v32 = 0;
LABEL_218:
  sub_1C987C140((uint64_t)&time1);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&time2);
  if (v32 == 1)
    goto LABEL_58;
  v33 = v32;
  if (v32)
  {
LABEL_59:
    v37 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v37 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v38 = (id)qword_1EF921280;
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      v73 = off_1E8296478[v33 - 1];
      v74 = off_1E8296478[v32 - 1];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v73;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v74;
      _os_log_error_impl(&dword_1C9870000, v38, OS_LOG_TYPE_ERROR, "Running result->setup(std::forward<Params>(params)...) failed with %s, returning %s", buf, 0x16u);
    }

    if (*(_QWORD *)&time.timescale)
    {
      v39 = (unint64_t *)(*(_QWORD *)&time.timescale + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        (*(void (**)(_QWORD))(**(_QWORD **)&time.timescale + 16))(*(_QWORD *)&time.timescale);
        std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&time.timescale);
      }
    }
    goto LABEL_67;
  }
  time.value = 0;
  *(_QWORD *)&time.timescale = 0;
  v125 = v135;
  v134 = v4;
  v135 = v10;
  if (v125)
  {
    p_shared_owners = (unint64_t *)&v125->__shared_owners_;
    do
      v127 = __ldaxr(p_shared_owners);
    while (__stlxr(v127 - 1, p_shared_owners));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
  v32 = 0;
LABEL_67:
  if (v32)
  {
    v41 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v41 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v42 = (id)qword_1EF921280;
    if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
    {
      v43 = off_1E8296478[v32 - 1];
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v43;
      v44 = "error with input data: %s";
LABEL_176:
      _os_log_error_impl(&dword_1C9870000, v42, OS_LOG_TYPE_ERROR, v44, buf, 0xCu);
      goto LABEL_177;
    }
    goto LABEL_177;
  }
  v45 = *(uint64_t **)(a1 + 16);
  v46 = v135;
  v132 = v134;
  v133 = v135;
  if (!v135)
  {
    if (v134)
      goto LABEL_79;
LABEL_82:
    v52 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v52 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v53 = (id)qword_1EF921280;
    if (!os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
      goto LABEL_138;
    *(_WORD *)buf = 0;
    v54 = "Assertion failed: data";
    goto LABEL_137;
  }
  v47 = (unint64_t *)&v135->__shared_owners_;
  do
    v48 = __ldxr(v47);
  while (__stxr(v48 + 1, v47));
  if (!v134)
    goto LABEL_82;
  v49 = (unint64_t *)&v135->__shared_owners_;
  do
    v50 = __ldxr(v49);
  while (__stxr(v50 + 1, v49));
LABEL_79:
  if (*((_BYTE *)v45 + 225))
  {
    v51 = *(_DWORD *)(v134 + 32);
    if (*((_BYTE *)v45 + 224) == (v51 == 0))
      goto LABEL_94;
  }
  else
  {
    v51 = *(_DWORD *)(v134 + 32);
  }
  v55 = atomic_load((unsigned __int8 *)&qword_1EF921288);
  if ((v55 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
  {
    qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
    __cxa_guard_release(&qword_1EF921288);
  }
  v56 = (id)qword_1EF921280;
  v57 = os_log_type_enabled(v56, OS_LOG_TYPE_INFO);
  if (v51)
  {
    if (v57)
    {
      *(_WORD *)buf = 0;
      v58 = "Correction has been disabled.";
LABEL_92:
      _os_log_impl(&dword_1C9870000, v56, OS_LOG_TYPE_INFO, v58, buf, 2u);
    }
  }
  else if (v57)
  {
    *(_WORD *)buf = 0;
    v58 = "Correction has been enabled.";
    goto LABEL_92;
  }

  v51 = *(_DWORD *)(v134 + 32);
LABEL_94:
  *((_WORD *)v45 + 112) = (v51 == 0) | 0x100;
  if (v46)
  {
    v59 = (unint64_t *)&v46->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  if ((*(_BYTE *)(v132 + 48) & 1) != 0)
  {
    v66 = (__int128 *)(v132 + 36);
    v67 = v45 + 22;
    if ((*((_BYTE *)v45 + 188) & 1) != 0)
    {
      *(_OWORD *)&time1.value = *v67;
      time1.epoch = v45[24];
      *(_OWORD *)&time2.value = *v66;
      time2.epoch = *(_QWORD *)(v132 + 52);
      if (CMTimeCompare(&time1, &time2) < 0)
      {
        memset(&time, 0, sizeof(time));
        *(_OWORD *)&v146.value = *v66;
        v146.epoch = *(_QWORD *)(v132 + 52);
        *(_OWORD *)&rhs.value = *v67;
        rhs.epoch = v45[24];
        CMTimeSubtract(&time, &v146, &rhs);
        v75 = v45 + 25;
        if ((*((_BYTE *)v45 + 212) & 1) != 0)
        {
          v139 = time;
          Seconds = CMTimeGetSeconds(&v139);
          *(_OWORD *)&v138.value = *v75;
          v138.epoch = v45[27];
          v77 = CMTimeGetSeconds(&v138);
          if (vabdd_f64(Seconds, v77) > v77 / 10.0)
          {
            v78 = atomic_load((unsigned __int8 *)&qword_1EF921288);
            if ((v78 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
            {
              qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
              __cxa_guard_release(&qword_1EF921288);
            }
            v79 = (id)qword_1EF921280;
            if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
            {
              *(_OWORD *)&v137.value = *v67;
              v137.epoch = v45[24];
              v80 = CMTimeGetSeconds(&v137);
              *(_OWORD *)&v136.value = *v66;
              v136.epoch = *(_QWORD *)(v132 + 52);
              v81 = CMTimeGetSeconds(&v136);
              *(_DWORD *)buf = 134218752;
              *(double *)&buf[4] = v77;
              *(_WORD *)&buf[12] = 2048;
              *(double *)&buf[14] = Seconds;
              *(_WORD *)&buf[22] = 2048;
              *(Float64 *)&buf[24] = v80;
              LOWORD(v145) = 2048;
              *(Float64 *)((char *)&v145 + 2) = v81;
              _os_log_impl(&dword_1C9870000, v79, OS_LOG_TYPE_DEFAULT, "Interval changed, last: %.4f current: %.4f. TS last: %.4f current: %.4f", buf, 0x2Au);
            }

          }
        }
        *v75 = *(_OWORD *)&time.value;
        v45[27] = time.epoch;
      }
      else
      {
        v68 = atomic_load((unsigned __int8 *)&qword_1EF921288);
        if ((v68 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
        {
          qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
          __cxa_guard_release(&qword_1EF921288);
        }
        v69 = (id)qword_1EF921280;
        if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
        {
          *(_OWORD *)buf = *v67;
          *(_QWORD *)&buf[16] = v45[24];
          v70 = CMTimeGetSeconds((CMTime *)buf);
          *(_OWORD *)&time.value = *v66;
          time.epoch = *(_QWORD *)(v132 + 52);
          v71 = CMTimeGetSeconds(&time);
          LODWORD(v146.value) = 134218240;
          *(Float64 *)((char *)&v146.value + 4) = v70;
          LOWORD(v146.flags) = 2048;
          *(Float64 *)((char *)&v146.flags + 2) = v71;
          _os_log_impl(&dword_1C9870000, v69, OS_LOG_TYPE_DEFAULT, "Timestamps out of order, last %.4f current %.4f.", (uint8_t *)&v146, 0x16u);
        }

        v72 = MEMORY[0x1E0CA2E18];
        *(_OWORD *)(v45 + 25) = *MEMORY[0x1E0CA2E18];
        v45[27] = *(_QWORD *)(v72 + 16);
      }
    }
    v82 = *v66;
    v45[24] = *((_QWORD *)v66 + 2);
    *v67 = v82;
  }
  else
  {
    v61 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v61 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v62 = (id)qword_1EF921280;
    if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1C9870000, v62, OS_LOG_TYPE_DEFAULT, "Invalid timestamp.", buf, 2u);
    }

    v63 = MEMORY[0x1E0CA2E18];
    v64 = *MEMORY[0x1E0CA2E18];
    *((_OWORD *)v45 + 11) = *MEMORY[0x1E0CA2E18];
    v65 = *(_QWORD *)(v63 + 16);
    v45[24] = v65;
    *(_OWORD *)(v45 + 25) = v64;
    v45[27] = v65;
  }
  std::mutex::lock((std::mutex *)(v45 + 3));
  std::mutex::unlock((std::mutex *)(v45 + 3));
  kdebug_trace();
  if (!sub_1C989A98C((uint64_t)(v45 + 1), &v132))
  {
    v94 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v94 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v53 = (id)qword_1EF921280;
    if (!os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
      goto LABEL_138;
    *(_WORD *)buf = 0;
    v54 = "Assertion failed: m_dataQueue.push(data)";
    goto LABEL_137;
  }
  v83 = *v45;
  v84 = operator new(0x40uLL);
  v84[1] = 0;
  v84[2] = 0;
  *v84 = &off_1E8295AD8;
  v84[3] = &off_1E8294D38;
  v84[7] = 0;
  v85 = operator new(0x20uLL);
  *v85 = &off_1E82953B0;
  v85[1] = sub_1C989AE44;
  v85[2] = 0;
  v85[3] = v45;
  v84[7] = v85;
  *(_QWORD *)buf = v84 + 3;
  *(_QWORD *)&buf[8] = v84;
  time1.value = 0;
  *(_QWORD *)&time1.timescale = 0;
  v86 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v83 + 16))(v83, buf);
  v87 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v88 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  v90 = *(std::__shared_weak_count **)&time1.timescale;
  if (*(_QWORD *)&time1.timescale)
  {
    v91 = (unint64_t *)(*(_QWORD *)&time1.timescale + 8);
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  if ((v86 & 1) == 0)
  {
    v95 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v95 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v53 = (id)qword_1EF921280;
    if (!os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
      goto LABEL_138;
    *(_WORD *)buf = 0;
    v54 = "Assertion failed: m_taskThread->push_function(std::bind(&ViewpointCorrectionPipeline::processNext, this))";
LABEL_137:
    _os_log_error_impl(&dword_1C9870000, v53, OS_LOG_TYPE_ERROR, v54, buf, 2u);
LABEL_138:

    v93 = 0;
    v32 = 2;
    goto LABEL_139;
  }
  v32 = 0;
  v93 = 1;
LABEL_139:
  v96 = v133;
  if (!v133)
    goto LABEL_143;
  v97 = (unint64_t *)&v133->__shared_owners_;
  do
    v98 = __ldaxr(v97);
  while (__stlxr(v98 - 1, v97));
  if (v98)
  {
LABEL_143:
    if ((v93 & 1) != 0)
      goto LABEL_144;
LABEL_147:
    v100 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v100 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v42 = (id)qword_1EF921280;
    if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
    {
      if ((v32 - 1) > 6)
        v101 = "Success, no error";
      else
        v101 = off_1E8296478[v32 - 1];
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v101;
      v44 = "error with frame processing: %s";
      goto LABEL_176;
    }
LABEL_177:

    v21 = dword_1C99279C8[v32 - 1];
    v99 = v135;
    if (!v135)
      return v21;
    goto LABEL_178;
  }
  ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
  std::__shared_weak_count::__release_weak(v96);
  if ((v93 & 1) == 0)
    goto LABEL_147;
LABEL_144:
  v21 = 0;
  v99 = v135;
  if (!v135)
    return v21;
LABEL_178:
  v113 = (unint64_t *)&v99->__shared_owners_;
  do
    v114 = __ldaxr(v113);
  while (__stlxr(v114 - 1, v113));
  if (!v114)
  {
    ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
    std::__shared_weak_count::__release_weak(v99);
  }
  return v21;
}

void sub_1C9874F08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  uint64_t v41;

  sub_1C987C140(v41 - 240);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&a41);
  sub_1C987C140((uint64_t)&a37);
  sub_1C987C140((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t CVANetPipeGetTypeID()
{
  if (qword_1EF920FA0 != -1)
    dispatch_once(&qword_1EF920FA0, &unk_1E8296120);
  return qword_1EF920FA8;
}

uint64_t sub_1C9875078()
{
  uint64_t result;

  qword_1EF920FB0 = 0;
  *(_QWORD *)algn_1EF920FB8 = "CVANetPipe";
  qword_1EF920FC0 = (uint64_t)nullsub_1;
  unk_1EF920FC8 = 0;
  qword_1EF920FD0 = (uint64_t)nullsub_2;
  unk_1EF920FD8 = 0;
  qword_1EF920FE0 = 0;
  unk_1EF920FE8 = sub_1C98750E0;
  qword_1EF920FF0 = (uint64_t)sub_1C987512C;
  result = _CFRuntimeRegisterClass();
  qword_1EF920FA8 = result;
  return result;
}

CFStringRef sub_1C98750E0(const void *a1)
{
  const __CFAllocator *v2;
  CFAllocatorRef v3;

  v2 = CFGetAllocator(a1);
  v3 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CVANetPipe %p [%p]>"), a1, v3);
}

CFStringRef sub_1C987512C(const void *a1)
{
  const __CFAllocator *v2;
  CFAllocatorRef v3;

  v2 = CFGetAllocator(a1);
  v3 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CVANetPipe %p [%p]>"), a1, v3);
}

uint64_t CVANetPipeCopyProperty()
{
  return 4294944344;
}

uint64_t CVANetPipeSetProperty()
{
  return 4294944344;
}

uint64_t CVANetPipeCreate()
{
  return 4294944344;
}

uint64_t CVANetPipeAddNetwork()
{
  return 4294944344;
}

uint64_t CVANetPipeRemoveNetwork()
{
  return 4294944344;
}

uint64_t CVANetPipeAllocateResources()
{
  return 4294944344;
}

uint64_t CVANetPipeFreeResources()
{
  return 4294944344;
}

uint64_t CVANetPipeProcessNetwork()
{
  return 4294944344;
}

uint64_t CVANetPipeShutdown()
{
  return 4294944343;
}

uint64_t CVAFaceTrackingLiteGetTypeID()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF921018);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921018))
  {
    qword_1EF921010 = sub_1C9875230();
    __cxa_guard_release(&qword_1EF921018);
  }
  return qword_1EF921010;
}

void sub_1C9875218(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1EF921018);
  _Unwind_Resume(a1);
}

uint64_t sub_1C9875230()
{
  qword_1EF921028 = 0;
  unk_1EF921030 = "CVAFaceTrackingLite";
  qword_1EF921038 = (uint64_t)sub_1C9875278;
  unk_1EF921040 = 0;
  qword_1EF921048 = (uint64_t)sub_1C9875280;
  unk_1EF921050 = 0;
  qword_1EF921058 = 0;
  unk_1EF921060 = sub_1C98752E8;
  qword_1EF921068 = (uint64_t)sub_1C9875334;
  return _CFRuntimeRegisterClass();
}

uint64_t sub_1C9875278(uint64_t result)
{
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_1C9875280(uint64_t result)
{
  uint64_t v1;
  uint64_t **v2;
  uint64_t *v3;
  uint64_t *v4;

  if (result)
  {
    v1 = result;
    v2 = *(uint64_t ***)(result + 16);
    if (v2)
    {
      v3 = *v2;
      *v2 = 0;
      if (v3)
      {
        v4 = sub_1C98E8570(v3);
        MEMORY[0x1CAA44AFC](v4, 0x20C4093837F09);
      }
      result = MEMORY[0x1CAA44AFC](v2, 0x20C4093837F09);
    }
    *(_QWORD *)(v1 + 16) = 0;
  }
  return result;
}

CFStringRef sub_1C98752E8(const void *a1)
{
  const __CFAllocator *v2;
  CFAllocatorRef v3;

  v2 = CFGetAllocator(a1);
  v3 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CVAFaceTrackingLite %p [%p]>"), a1, v3);
}

CFStringRef sub_1C9875334(const void *a1)
{
  const __CFAllocator *v2;
  CFAllocatorRef v3;

  v2 = CFGetAllocator(a1);
  v3 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CVAFaceTrackingLite %p [%p]>"), a1, v3);
}

uint64_t CVAFaceTrackingLiteGetAPIVersion()
{
  return 7;
}

double CVAFaceTrackingLiteGetDefaultCreateOptions@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_WORD *)a1 = 257;
  *(_BYTE *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 4) = 3;
  *(_BYTE *)(a1 + 2) = 0;
  *(_DWORD *)(a1 + 20) = 1117782016;
  *(_QWORD *)&result = 1065353216;
  *(_QWORD *)(a1 + 12) = 1065353216;
  return result;
}

uint64_t CVAFaceTrackingLiteCreate(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  unsigned __int8 v6;
  _QWORD *Instance;
  _QWORD *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  __int128 v13;
  std::string::size_type size;
  std::string *p_dst;
  std::string *v16;
  uint64_t *v17;
  uint64_t v18;
  char *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unsigned __int8 v35;
  unint64_t v36;
  NSObject *v37;
  unsigned __int8 v38;
  unsigned __int8 v39;
  NSObject *v40;
  const char *v41;
  unsigned __int8 v42;
  uint64_t v43;
  _BYTE *v44;
  float v45;
  unsigned __int8 v46;
  NSObject *v47;
  float v48;
  float v49;
  float v50;
  unsigned __int8 v51;
  NSObject *v52;
  float v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 v56;
  NSObject *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int8 v61;
  NSObject *v62;
  NSObject *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  unsigned __int8 v67;
  NSObject *v68;
  uint64_t v69;
  uint64_t **v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t v73;
  unsigned __int8 v75;
  NSObject *v76;
  __int128 v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  unsigned __int8 v82;
  NSObject *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  _QWORD *v88;
  unint64_t *v89;
  unint64_t v90;
  _QWORD *v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  NSObject *v97;
  std::__shared_weak_count *v98;
  uint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  __int128 *v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  unsigned __int8 v115;
  NSObject *v116;
  _QWORD *v117;
  uint64_t v118;
  unsigned __int8 v119;
  NSObject *v120;
  int v121;
  unint64_t *v122;
  unint64_t v123;
  __int128 v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  uint64_t (***v134)(_QWORD);
  unsigned __int8 v135;
  NSObject *v136;
  unsigned __int8 v137;
  NSObject *v138;
  unsigned __int8 v139;
  unint64_t *v140;
  unint64_t v141;
  unint64_t *v142;
  unint64_t v143;
  unsigned __int8 v144;
  NSObject *v145;
  unint64_t *v146;
  unint64_t v147;
  __int128 v148;
  uint64_t v149;
  uint64_t v150;
  char v151;
  std::string __dst;
  __int128 v153;
  uint64_t v154;
  void *__p[2];
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  std::__shared_weak_count *v159;
  __int128 v160;
  __int128 *v161;
  _BYTE buf[24];
  _BYTE *v163;
  uint64_t v164;

  v164 = *MEMORY[0x1E0C80C00];
  LOBYTE(v150) = 0;
  v151 = 0;
  if (!a3)
    return 4294944343;
  v4 = 4294944343;
  if (!a2 || *a3)
    goto LABEL_112;
  v6 = atomic_load((unsigned __int8 *)&qword_1EF921018);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921018))
  {
    qword_1EF921010 = sub_1C9875230();
    __cxa_guard_release(&qword_1EF921018);
  }
  Instance = (_QWORD *)_CFRuntimeCreateInstance();
  if (!Instance)
  {
LABEL_12:
    v4 = 4294944342;
    goto LABEL_112;
  }
  v8 = operator new(8uLL, MEMORY[0x1E0DE4E10]);
  if (!v8)
  {
    Instance[2] = 0;
    CFRelease(Instance);
    goto LABEL_12;
  }
  *v8 = 0;
  Instance[2] = v8;
  v9 = (void *)MEMORY[0x1CAA45030]();
  objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", objc_opt_class());
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "resourcePath");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v11)
  {
    memset(&__dst, 0, sizeof(__dst));
    goto LABEL_23;
  }
  cva::Path::Path((cva::Path *)buf, (const char *)objc_msgSend(objc_retainAutorelease(v11), "cStringUsingEncoding:", 4));
  cva::Path::Path((cva::Path *)&v160, "resources_facekit/");
  cva::Path::append();
  cva::Path::~Path((cva::Path *)&v160);
  v12 = cva::Path::string((cva::Path *)buf);
  if (*(char *)(v12 + 23) < 0)
  {
    sub_1C987D148(&__dst, *(void **)v12, *(_QWORD *)(v12 + 8));
  }
  else
  {
    v13 = *(_OWORD *)v12;
    __dst.__r_.__value_.__r.__words[2] = *(_QWORD *)(v12 + 16);
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v13;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __dst.__r_.__value_.__l.__size_;
    if (__dst.__r_.__value_.__l.__size_)
    {
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
LABEL_20:
      if (p_dst->__r_.__value_.__s.__data_[size - 1] != 47)
        std::string::push_back(&__dst, 47);
    }
  }
  else
  {
    size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if (*((_BYTE *)&__dst.__r_.__value_.__s + 23))
    {
      p_dst = &__dst;
      goto LABEL_20;
    }
  }
  cva::Path::~Path((cva::Path *)buf);
LABEL_23:

  objc_autoreleasePoolPop(v9);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = &__dst;
  else
    v16 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  v17 = (uint64_t *)operator new();
  v18 = operator new();
  bzero((void *)v18, 0x290uLL);
  cva::DictionaryHandler::DictionaryHandler((cva::DictionaryHandler *)(v18 + 8));
  *(_DWORD *)(v18 + 48) = 0;
  *(_QWORD *)(v18 + 24) = 0x7FF8000000000000;
  *(_OWORD *)(v18 + 56) = 0u;
  *(_OWORD *)(v18 + 72) = 0u;
  *(_QWORD *)(v18 + 88) = 0;
  *(_QWORD *)(v18 + 96) = &off_1E8295050;
  *(_QWORD *)(v18 + 104) = 0x100000001;
  *(_DWORD *)(v18 + 112) = 1065353216;
  *(_QWORD *)(v18 + 116) = 0;
  *(_QWORD *)(v18 + 124) = 0x3F80000000000000;
  *(_QWORD *)(v18 + 132) = 0;
  *(_DWORD *)(v18 + 140) = 0;
  *(_QWORD *)(v18 + 152) = 0;
  *(_QWORD *)(v18 + 160) = 0;
  *(_QWORD *)(v18 + 168) = 0;
  *(_QWORD *)(v18 + 176) = 0x3F80000000000000;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(v18 + 144) = _D1;
  *(_DWORD *)(v18 + 164) = 1065353216;
  *(_QWORD *)(v18 + 184) = 0;
  *(_DWORD *)(v18 + 192) = 0;
  *(_QWORD *)(v18 + 200) = 0;
  *(_QWORD *)(v18 + 208) = &off_1E8295050;
  *(_QWORD *)(v18 + 216) = 0x100000001;
  *(_DWORD *)(v18 + 224) = 1065353216;
  *(_QWORD *)(v18 + 228) = 0;
  *(_QWORD *)(v18 + 236) = 0x3F80000000000000;
  *(_QWORD *)(v18 + 244) = 0;
  *(_DWORD *)(v18 + 252) = 0;
  *(_QWORD *)(v18 + 264) = 0;
  *(_QWORD *)(v18 + 272) = 0;
  *(_QWORD *)(v18 + 280) = 0;
  *(_QWORD *)(v18 + 288) = 0x3F80000000000000;
  *(_QWORD *)(v18 + 256) = _D1;
  *(_DWORD *)(v18 + 276) = 1065353216;
  *(_DWORD *)(v18 + 304) = 0;
  *(_QWORD *)(v18 + 296) = 0;
  *(_BYTE *)(v18 + 376) = 0;
  *(_BYTE *)(v18 + 380) = 0;
  *(_BYTE *)(v18 + 382) = 0;
  *(_OWORD *)(v18 + 353) = 0u;
  *(_OWORD *)(v18 + 340) = 0u;
  *(_OWORD *)(v18 + 324) = 0u;
  *(_WORD *)(v18 + 384) = 1;
  *(_BYTE *)(v18 + 386) = 0;
  *(_QWORD *)(v18 + 392) = 0;
  *(_QWORD *)(v18 + 400) = 0;
  sub_1C98B87A0((uint64_t *)(v18 + 408));
  *(_BYTE *)(v18 + 416) = 0;
  *(_BYTE *)(v18 + 440) = 0;
  *(_BYTE *)(v18 + 448) = 0;
  *(_BYTE *)(v18 + 592) = 0;
  *(_OWORD *)(v18 + 600) = 0u;
  *(_OWORD *)(v18 + 616) = 0u;
  *(_OWORD *)(v18 + 632) = 0u;
  *(_DWORD *)(v18 + 648) = 0;
  *v17 = v18;
  v24 = (char *)operator new(0xC0uLL);
  *((_QWORD *)v24 + 1) = 0;
  *((_QWORD *)v24 + 2) = 0;
  *(_QWORD *)v24 = &off_1E8294730;
  *((_QWORD *)v24 + 3) = &off_1E8294440;
  *((_QWORD *)v24 + 4) = &off_1E8295200;
  *((_DWORD *)v24 + 10) = 0;
  *((_QWORD *)v24 + 6) = 850045863;
  *(_OWORD *)(v24 + 56) = 0u;
  *(_OWORD *)(v24 + 72) = 0u;
  *(_OWORD *)(v24 + 88) = 0u;
  *((_QWORD *)v24 + 13) = 0;
  *((_QWORD *)v24 + 14) = 1018212795;
  *(_OWORD *)(v24 + 120) = 0u;
  *(_OWORD *)(v24 + 136) = 0u;
  *(_OWORD *)(v24 + 145) = 0u;
  *((_QWORD *)v24 + 21) = v24 + 168;
  *((_QWORD *)v24 + 22) = v24 + 168;
  *((_QWORD *)v24 + 23) = 0;
  std::mutex::lock((std::mutex *)(v24 + 48));
  *((_DWORD *)v24 + 10) = 0x7FFFFFFF;
  std::mutex::unlock((std::mutex *)(v24 + 48));
  v25 = *v17;
  v26 = *(std::__shared_weak_count **)(*v17 + 400);
  *(_QWORD *)(v25 + 392) = v24 + 24;
  *(_QWORD *)(v25 + 400) = v24;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = *v17;
  v30 = *(std::__shared_weak_count **)(*v17 + 400);
  v149 = *(_QWORD *)(*v17 + 392);
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
    do
      v33 = __ldxr(v31);
    while (__stxr(v33 + 1, v31));
  }
  v34 = *(_QWORD *)(v29 + 408);
  v157 = 0;
  v35 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
  v36 = 0x1ED52A000uLL;
  if ((v35 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
  {
    qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
    __cxa_guard_release(&qword_1ED52ACD0);
  }
  v37 = (id)qword_1ED52ACE0;
  if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C9870000, v37, OS_LOG_TYPE_INFO, "Initializing FaceKitProcessor.", buf, 2u);
  }

  kdebug_trace();
  std::mutex::lock(&stru_1ED52AC78);
  v38 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
  if ((v38 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
  {
    sub_1C98CFF14();
    __cxa_guard_release(&qword_1ED52ACD8);
  }
  sub_1C98D00C8();
  sub_1C98EF554();
  if (!*(_BYTE *)a2)
  {
    v42 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
    if ((v42 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
    {
      qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
      __cxa_guard_release(&qword_1ED52ACD0);
    }
    v40 = qword_1ED52ACE0;
    if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v41 = "CVAFaceTrackingLite supports color input only.";
      goto LABEL_227;
    }
LABEL_46:
    v43 = 0;
    goto LABEL_70;
  }
  if (*(_BYTE *)(a2 + 8))
  {
    v39 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
    if ((v39 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
    {
      qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
      __cxa_guard_release(&qword_1ED52ACD0);
    }
    v40 = qword_1ED52ACE0;
    if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v41 = "CVAFaceTrackingLite does not support recognition.";
LABEL_227:
      _os_log_error_impl(&dword_1C9870000, v40, OS_LOG_TYPE_ERROR, v41, buf, 2u);
      v43 = 0;
      goto LABEL_70;
    }
    goto LABEL_46;
  }
  v43 = operator new();
  v44 = (_BYTE *)sub_1C98A878C(v43);
  *v44 = *(_BYTE *)a2 != 0;
  v44[1] = *(_BYTE *)(a2 + 8) != 0;
  v44[3] = *(_BYTE *)(a2 + 1) != 0;
  v44[4] = *(_BYTE *)(a2 + 2) != 0;
  *(_DWORD *)buf = *(_DWORD *)(a2 + 4);
  buf[4] = 1;
  *(_DWORD *)(v43 + 12) = sub_1C98A9520((unsigned int *)buf);
  v45 = *(float *)(v43 + 56) * *(float *)(a2 + 12);
  if (v45 > 1.0 || v45 < 0.0)
  {
    v46 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
    if ((v46 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
    {
      qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
      __cxa_guard_release(&qword_1ED52ACD0);
    }
    v47 = qword_1ED52ACE0;
    if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(double *)&buf[4] = v45;
      _os_log_impl(&dword_1C9870000, v47, OS_LOG_TYPE_DEFAULT, "Clamping failure threshold %f to [0,1]", buf, 0xCu);
    }
    v48 = 1.0;
    if (v45 <= 1.0)
      v48 = v45;
    if (v45 >= 0.0)
      v45 = v48;
    else
      v45 = 0.0;
    v36 = 0x1ED52A000uLL;
  }
  *(float *)(v43 + 60) = v45;
  v49 = *(float *)(a2 + 16);
  v50 = (float)(v49 * 0.5) + (float)(*(float *)(v43 + 64) * (float)(1.0 - v49));
  if (v50 > 0.5 || v50 < 0.0)
  {
    v51 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
    if ((v51 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
    {
      qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
      __cxa_guard_release(&qword_1ED52ACD0);
    }
    v52 = qword_1ED52ACE0;
    if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218240;
      *(double *)&buf[4] = v50;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v49;
      _os_log_impl(&dword_1C9870000, v52, OS_LOG_TYPE_DEFAULT, "Clamping bounding box tolerance %f to [0, 0.5] (modifier %f)", buf, 0x16u);
    }
    v53 = 0.5;
    if (v50 <= 0.5)
      v53 = v50;
    if (v50 >= 0.0)
      v50 = v53;
    else
      v50 = 0.0;
    v36 = 0x1ED52A000uLL;
  }
  *(float *)(v43 + 68) = v50;
  *(_DWORD *)(v43 + 140) = *(_DWORD *)(a2 + 20);
  sub_1C98807F4((void **)(v43 + 24), (char *)v16);
LABEL_70:
  v54 = *(_QWORD *)(v34 + 8);
  *(_QWORD *)(v34 + 8) = v43;
  if (v54)
  {
    if (*(char *)(v54 + 47) < 0)
      operator delete(*(void **)(v54 + 24));
    MEMORY[0x1CAA44AFC](v54, 0x1012C409C40065ELL);
    v43 = *(_QWORD *)(v34 + 8);
  }
  if (!v43)
    goto LABEL_91;
  sub_1C98A895C((unsigned __int8 *)v43);
  v55 = *(_QWORD *)(v34 + 8);
  if (*(char *)(v55 + 47) < 0)
  {
    sub_1C987D148(buf, *(void **)(v55 + 24), *(_QWORD *)(v55 + 32));
  }
  else
  {
    *(_OWORD *)buf = *(_OWORD *)(v55 + 24);
    *(_QWORD *)&buf[16] = *(_QWORD *)(v55 + 40);
  }
  if ((buf[23] & 0x80000000) != 0)
  {
    v60 = *(_QWORD *)&buf[8];
    operator delete(*(void **)buf);
    if (v60)
      goto LABEL_80;
LABEL_87:
    v61 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
    if ((v61 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
    {
      qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
      __cxa_guard_release(&qword_1ED52ACD0);
    }
    v62 = (id)qword_1ED52ACE0;
    if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1C9870000, v62, OS_LOG_TYPE_ERROR, "cannot find resources.", buf, 2u);
    }

    goto LABEL_91;
  }
  if (!buf[23])
    goto LABEL_87;
LABEL_80:
  v56 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
  if ((v56 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
  {
    qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
    __cxa_guard_release(&qword_1ED52ACD0);
  }
  v57 = (id)qword_1ED52ACE0;
  if (os_log_type_enabled(v57, OS_LOG_TYPE_INFO))
  {
    v58 = *(_DWORD *)(*(_QWORD *)(v34 + 8) + 48);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v58;
    _os_log_impl(&dword_1C9870000, v57, OS_LOG_TYPE_INFO, "Running without an image pyramid (pyramid behavior %d ignored).", buf, 8u);
  }

  v59 = *(_QWORD *)(v34 + 8);
  if (!*(_BYTE *)(v59 + 6))
  {
    if (*(char *)(v59 + 47) < 0)
    {
      sub_1C987D148(&v153, *(void **)(v59 + 24), *(_QWORD *)(v59 + 32));
    }
    else
    {
      v153 = *(_OWORD *)(v59 + 24);
      v154 = *(_QWORD *)(v59 + 40);
    }
    *(_OWORD *)__p = v153;
    v156 = v154;
    v154 = 0;
    v153 = 0uLL;
    v75 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
    if ((v75 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
    {
      qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
      __cxa_guard_release(&qword_1ED52ACD0);
    }
    v76 = (id)qword_1ED52ACE0;
    if (os_log_type_enabled(v76, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1C9870000, v76, OS_LOG_TYPE_INFO, "Loading tensor.", buf, 2u);
    }

    buf[23] = 10;
    strcpy(buf, "tensor.bin");
    sub_1C98B4EB0(&v160);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    if ((_QWORD)v160)
    {
      sub_1C990C5A4((uint64_t *)buf, v160, (char)"I/O device", *(unsigned __int8 *)(*(_QWORD *)(v34 + 8) + 7), 0);
      v77 = *(_OWORD *)buf;
    }
    else
    {
      v77 = 0uLL;
    }
    v148 = v77;
    v78 = (std::__shared_weak_count *)*((_QWORD *)&v160 + 1);
    if (*((_QWORD *)&v160 + 1))
    {
      v79 = (unint64_t *)(*((_QWORD *)&v160 + 1) + 8);
      do
        v80 = __ldaxr(v79);
      while (__stlxr(v80 - 1, v79));
      if (!v80)
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
    }
    v81 = v148;
    v82 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
    if (!v81)
    {
      if ((v82 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
      {
        qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
        __cxa_guard_release(&qword_1ED52ACD0);
      }
      v97 = (id)qword_1ED52ACE0;
      if (os_log_type_enabled(v97, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_1C9870000, v97, OS_LOG_TYPE_ERROR, "couldn't load tensor for fitting.", buf, 2u);
      }

      LOBYTE(v63) = 0;
      v85 = (std::__shared_weak_count *)*((_QWORD *)&v148 + 1);
      if (!*((_QWORD *)&v148 + 1))
        goto LABEL_242;
      goto LABEL_238;
    }
    if ((v82 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
    {
      qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
      __cxa_guard_release(&qword_1ED52ACD0);
    }
    v83 = (id)qword_1ED52ACE0;
    if (os_log_type_enabled(v83, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1C9870000, v83, OS_LOG_TYPE_INFO, "Start initializing identity fitting.", buf, 2u);
    }

    v84 = *(_QWORD *)(v34 + 8);
    v85 = (std::__shared_weak_count *)*((_QWORD *)&v148 + 1);
    if (*((_QWORD *)&v148 + 1))
    {
      v86 = (unint64_t *)(*((_QWORD *)&v148 + 1) + 8);
      do
        v87 = __ldxr(v86);
      while (__stxr(v87 + 1, v86));
    }
    v88 = operator new(0x20uLL);
    v88[1] = 0;
    v88[2] = 0;
    *v88 = &off_1E82946F8;
    if (*((_QWORD *)&v148 + 1))
    {
      v89 = (unint64_t *)(*((_QWORD *)&v148 + 1) + 8);
      do
        v90 = __ldxr(v89);
      while (__stxr(v90 + 1, v89));
    }
    v161 = 0;
    v91 = operator new(0x38uLL);
    v36 = (unint64_t)(v88 + 3);
    *v91 = &off_1E8294258;
    v91[1] = v84;
    *((_OWORD *)v91 + 1) = v148;
    v91[4] = __p;
    v91[5] = &v150;
    v91[6] = &v157;
    v161 = (__int128 *)v91;
    if (v30)
    {
      v92 = (unint64_t *)&v30->__shared_owners_;
      do
        v93 = __ldxr(v92);
      while (__stxr(v93 + 1, v92));
      v94 = operator new();
      v95 = (unint64_t *)&v30->__shared_owners_;
      do
        v96 = __ldxr(v95);
      while (__stxr(v96 + 1, v95));
    }
    else
    {
      v94 = operator new();
    }
    *(_DWORD *)v94 = 0;
    *(_QWORD *)(v94 + 16) = 0;
    *(_QWORD *)(v94 + 24) = 0;
    *(_QWORD *)(v94 + 8) = 0xFFEFFFFFFFFFFFFFLL;
    *(_QWORD *)(v94 + 56) = 0;
    *(_QWORD *)(v94 + 64) = v149;
    *(_QWORD *)(v94 + 72) = v30;
    *(_BYTE *)(v94 + 80) = 0;
    *(_QWORD *)v36 = v94;
    if (!v161)
    {
      sub_1C9889C1C();
      goto LABEL_277;
    }
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v161 + 48))(&v158);
    v99 = v158;
    v98 = v159;
    if (v159)
    {
      v100 = (unint64_t *)&v159->__shared_owners_;
      do
        v101 = __ldxr(v100);
      while (__stxr(v101 + 1, v100));
    }
    v102 = (_QWORD *)(*(_QWORD *)v36 + 32);
    *(_QWORD *)buf = &off_1E8294500;
    *(_QWORD *)&buf[8] = v99;
    *(_QWORD *)&buf[16] = v98;
    v163 = buf;
    sub_1C98B3444(buf, v102);
    v103 = v163;
    if (v163 == buf)
    {
      v104 = 4;
      v103 = buf;
    }
    else
    {
      if (!v163)
      {
LABEL_163:
        v105 = v159;
        if (v159)
        {
          v106 = (unint64_t *)&v159->__shared_owners_;
          do
            v107 = __ldaxr(v106);
          while (__stlxr(v107 - 1, v106));
          if (!v107)
          {
            ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
            std::__shared_weak_count::__release_weak(v105);
          }
        }
        if (v30)
        {
          v108 = (unint64_t *)&v30->__shared_owners_;
          do
            v109 = __ldaxr(v108);
          while (__stlxr(v109 - 1, v108));
          if (!v109)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
        v110 = v161;
        if (v161 == &v160)
        {
          v111 = 4;
          v110 = &v160;
        }
        else
        {
          if (!v161)
          {
LABEL_178:
            v112 = *(std::__shared_weak_count **)(v34 + 40);
            *(_QWORD *)(v34 + 32) = v36;
            *(_QWORD *)(v34 + 40) = v88;
            v36 = 0x1ED52A000uLL;
            if (v112)
            {
              v113 = (unint64_t *)&v112->__shared_owners_;
              do
                v114 = __ldaxr(v113);
              while (__stlxr(v114 - 1, v113));
              if (!v114)
              {
                ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
                std::__shared_weak_count::__release_weak(v112);
              }
            }
            v115 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
            if ((v115 & 1) != 0)
            {
LABEL_184:
              v116 = *(id *)(v36 + 3296);
              if (os_log_type_enabled(v116, OS_LOG_TYPE_INFO))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_1C9870000, v116, OS_LOG_TYPE_INFO, "Initializing recognition.", buf, 2u);
              }

              if (*(_BYTE *)(*(_QWORD *)(v34 + 8) + 1))
              {
                v117 = 0;
              }
              else
              {
                v117 = (_QWORD *)operator new();
                *v117 = &off_1E8294C38;
              }
              v118 = *(_QWORD *)(v34 + 160);
              *(_QWORD *)(v34 + 160) = v117;
              if (v118)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v118 + 8))(v118);
                v117 = *(_QWORD **)(v34 + 160);
              }
              v119 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
              if (v117)
              {
                if ((v119 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
                {
                  *(_QWORD *)(v36 + 3296) = os_log_create("com.apple.AppleCVA", "FaceKit");
                  __cxa_guard_release(&qword_1ED52ACD0);
                }
                v120 = *(id *)(v36 + 3296);
                if (os_log_type_enabled(v120, OS_LOG_TYPE_INFO))
                {
                  v121 = *(_DWORD *)(*(_QWORD *)(v34 + 8) + 12);
                  *(_DWORD *)buf = 67109120;
                  *(_DWORD *)&buf[4] = v121;
                  _os_log_impl(&dword_1C9870000, v120, OS_LOG_TYPE_INFO, "Creating CaraNet model %d.", buf, 8u);
                }

                v160 = v148;
                if (*((_QWORD *)&v148 + 1))
                {
                  v122 = (unint64_t *)(*((_QWORD *)&v148 + 1) + 8);
                  do
                    v123 = __ldxr(v122);
                  while (__stxr(v123 + 1, v122));
                }
                sub_1C98AF3E8(buf, (int)__p, (uint64_t)&v150, (uint64_t *)&v160, *(unsigned __int8 *)(*(_QWORD *)(v34 + 8) + 2), *(_DWORD *)(*(_QWORD *)(v34 + 8) + 12), *(unsigned __int8 *)(*(_QWORD *)(v34 + 8) + 9));
                v124 = *(_OWORD *)buf;
                *(_QWORD *)buf = 0;
                *(_QWORD *)&buf[8] = 0;
                v125 = *(std::__shared_weak_count **)(v34 + 24);
                *(_OWORD *)(v34 + 16) = v124;
                if (v125)
                {
                  v126 = (unint64_t *)&v125->__shared_owners_;
                  do
                    v127 = __ldaxr(v126);
                  while (__stlxr(v127 - 1, v126));
                  if (!v127)
                  {
                    ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
                    std::__shared_weak_count::__release_weak(v125);
                  }
                }
                v128 = *(std::__shared_weak_count **)&buf[8];
                if (*(_QWORD *)&buf[8])
                {
                  v129 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
                  do
                    v130 = __ldaxr(v129);
                  while (__stlxr(v130 - 1, v129));
                  if (!v130)
                  {
                    ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
                    std::__shared_weak_count::__release_weak(v128);
                  }
                }
                v131 = (std::__shared_weak_count *)*((_QWORD *)&v160 + 1);
                if (*((_QWORD *)&v160 + 1))
                {
                  v132 = (unint64_t *)(*((_QWORD *)&v160 + 1) + 8);
                  do
                    v133 = __ldaxr(v132);
                  while (__stlxr(v133 - 1, v132));
                  if (!v133)
                  {
                    ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
                    std::__shared_weak_count::__release_weak(v131);
                  }
                }
                v134 = *(uint64_t (****)(_QWORD))(v34 + 16);
                if (v134)
                {
                  *(_DWORD *)(v34 + 48) = (**v134)(v134);
                  v135 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
                  if ((v135 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
                  {
                    *(_QWORD *)(v36 + 3296) = os_log_create("com.apple.AppleCVA", "FaceKit");
                    __cxa_guard_release(&qword_1ED52ACD0);
                  }
                  v136 = *(id *)(v36 + 3296);
                  if (os_log_type_enabled(v136, OS_LOG_TYPE_INFO))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl(&dword_1C9870000, v136, OS_LOG_TYPE_INFO, "Wait for identity fitting to finish initialization.", buf, 2u);
                  }

                  sub_1C98B4654(*(uint64_t **)(v34 + 32));
                  if (*(_QWORD *)(**(_QWORD **)(v34 + 32) + 16))
                  {
                    *(_BYTE *)v34 = 1;
                    v137 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
                    if ((v137 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
                    {
                      *(_QWORD *)(v36 + 3296) = os_log_create("com.apple.AppleCVA", "FaceKit");
                      __cxa_guard_release(&qword_1ED52ACD0);
                    }
                    v63 = *(id *)(v36 + 3296);
                    if (os_log_type_enabled(v63, OS_LOG_TYPE_INFO))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_impl(&dword_1C9870000, v63, OS_LOG_TYPE_INFO, "FaceKitProcessor initialized.", buf, 2u);
                    }

                    LOBYTE(v63) = 1;
                    goto LABEL_233;
                  }
                  v144 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
                  if ((v144 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
                  {
                    *(_QWORD *)(v36 + 3296) = os_log_create("com.apple.AppleCVA", "FaceKit");
                    __cxa_guard_release(&qword_1ED52ACD0);
                  }
                  v145 = *(id *)(v36 + 3296);
                  if (os_log_type_enabled(v145, OS_LOG_TYPE_ERROR))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_error_impl(&dword_1C9870000, v145, OS_LOG_TYPE_ERROR, "failed to initialize the identity fitting.", buf, 2u);
                  }

                  v63 = *(NSObject **)(v34 + 40);
                  *(_QWORD *)(v34 + 32) = 0;
                  *(_QWORD *)(v34 + 40) = 0;
                  if (!v63)
                    goto LABEL_233;
                  v146 = (unint64_t *)&v63[1];
                  do
                    v147 = __ldaxr(v146);
                  while (__stlxr(v147 - 1, v146));
                  if (!v147)
                  {
                    (*((void (**))v63->isa + 2))(v63);
                    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v63);
                  }
LABEL_232:
                  LOBYTE(v63) = 0;
LABEL_233:
                  if (!*((_QWORD *)&v148 + 1))
                  {
LABEL_242:
                    if (SHIBYTE(v156) < 0)
                      operator delete(__p[0]);
                    goto LABEL_92;
                  }
                  v140 = (unint64_t *)(*((_QWORD *)&v148 + 1) + 8);
                  do
                    v141 = __ldaxr(v140);
                  while (__stlxr(v141 - 1, v140));
                  if (!v141)
                  {
                    (*(void (**)(_QWORD))(**((_QWORD **)&v148 + 1) + 16))(*((_QWORD *)&v148 + 1));
                    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v148 + 1));
                  }
LABEL_238:
                  v142 = (unint64_t *)&v85->__shared_owners_;
                  do
                    v143 = __ldaxr(v142);
                  while (__stlxr(v143 - 1, v142));
                  if (!v143)
                  {
                    ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                    std::__shared_weak_count::__release_weak(v85);
                  }
                  goto LABEL_242;
                }
                v139 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
                if ((v139 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
                {
                  *(_QWORD *)(v36 + 3296) = os_log_create("com.apple.AppleCVA", "FaceKit");
                  __cxa_guard_release(&qword_1ED52ACD0);
                }
                v138 = *(id *)(v36 + 3296);
                if (os_log_type_enabled(v138, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)buf = 0;
                  _os_log_error_impl(&dword_1C9870000, v138, OS_LOG_TYPE_ERROR, "failed to initialize network resources.", buf, 2u);
                }
              }
              else
              {
                if ((v119 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
                {
                  *(_QWORD *)(v36 + 3296) = os_log_create("com.apple.AppleCVA", "FaceKit");
                  __cxa_guard_release(&qword_1ED52ACD0);
                }
                v138 = *(id *)(v36 + 3296);
                if (os_log_type_enabled(v138, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)buf = 0;
                  _os_log_error_impl(&dword_1C9870000, v138, OS_LOG_TYPE_ERROR, "failed to create a recognition processor.", buf, 2u);
                }
              }

              goto LABEL_232;
            }
LABEL_277:
            if (__cxa_guard_acquire(&qword_1ED52ACD0))
            {
              *(_QWORD *)(v36 + 3296) = os_log_create("com.apple.AppleCVA", "FaceKit");
              __cxa_guard_release(&qword_1ED52ACD0);
            }
            goto LABEL_184;
          }
          v111 = 5;
        }
        (*(void (**)(void))(*(_QWORD *)v110 + 8 * v111))();
        goto LABEL_178;
      }
      v104 = 5;
    }
    (*(void (**)(void))(*v103 + 8 * v104))();
    goto LABEL_163;
  }
LABEL_91:
  LOBYTE(v63) = 0;
LABEL_92:
  std::mutex::unlock(&stru_1ED52AC78);
  kdebug_trace();
  if (v30)
  {
    v64 = (unint64_t *)&v30->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
    do
      v66 = __ldaxr(v64);
    while (__stlxr(v66 - 1, v64));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if ((v63 & 1) == 0)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(*v17 + 392) + 24))(*(_QWORD *)(*v17 + 392));
    v67 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
    if ((v67 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
    {
      *(_QWORD *)(v36 + 3296) = os_log_create("com.apple.AppleCVA", "FaceKit");
      __cxa_guard_release(&qword_1ED52ACD0);
    }
    v68 = *(NSObject **)(v36 + 3296);
    if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1C9870000, v68, OS_LOG_TYPE_DEFAULT, "~FaceKitLiteScheduler", buf, 2u);
    }
    if (*v17)
    {
      v69 = sub_1C98E84B0(*v17);
      MEMORY[0x1CAA44AFC](v69, 0x10E2C4060765A9DLL);
    }
    MEMORY[0x1CAA44AFC](v17, 0x20C4093837F09);
    v17 = 0;
  }
  v70 = (uint64_t **)Instance[2];
  v71 = *v70;
  *v70 = v17;
  if (v71)
  {
    v72 = sub_1C98E8570(v71);
    MEMORY[0x1CAA44AFC](v72, 0x20C4093837F09);
  }
  if (!*(_QWORD *)Instance[2])
  {
    CFRelease(Instance);
    v4 = 4294944346;
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_112;
    goto LABEL_111;
  }
  v4 = 0;
  *a3 = Instance;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
LABEL_111:
    operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_112:
  if (v151)
  {
    v73 = v150;
    v150 = 0;
    if (v73)
      MEMORY[0x1CAA44AFC](v73, 0xC400A2AC0F1);
  }
  return v4;
}

void sub_1C9876BAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v37;

  __cxa_guard_abort(&qword_1ED52ACD8);
  std::mutex::unlock(&stru_1ED52AC78);
  kdebug_trace();
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v37 = __ldaxr(p_shared_owners);
    while (__stlxr(v37 - 1, p_shared_owners));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  if (a13)
  {
    if (a12)
    {
      MEMORY[0x1CAA44AFC](a12, 0xC400A2AC0F1);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t CVAFaceTrackingLiteSetColorImage(uint64_t a1, CVPixelBufferRef pixelBuffer, int8x16_t *a3)
{
  uint64_t result;
  unsigned int Width;
  unsigned int Height;
  __int32 v9;
  __int32 v10;
  __int32 v11;
  __int32 v12;
  __int32 v13;
  __int32 v14;
  __int32 v15;
  __int32 v16;
  int8x16_t v17;
  uint64_t *v18;
  uint64_t v19;
  __CVBuffer *v20;
  int8x16_t v21;
  int8x16_t v22;
  __int32 v23;
  __int32 v24;
  __int32 v25;
  __int32 v26;
  __int32 v27;
  __int32 v28;
  __int32 v29;
  __int32 v30;
  __int32 v31;

  result = 4294944343;
  if (a1 && pixelBuffer && a3)
  {
    Width = CVPixelBufferGetWidth(pixelBuffer);
    Height = CVPixelBufferGetHeight(pixelBuffer);
    v30 = a3[3].i32[1];
    v31 = a3[3].i32[0];
    v9 = a3[4].i32[2];
    v10 = a3[3].i32[3];
    v28 = a3[3].i32[2];
    v29 = a3[4].i32[3];
    v11 = a3[4].i32[0];
    v26 = a3[5].i32[0];
    v27 = a3[4].i32[1];
    v12 = a3->i32[0];
    v13 = a3->i32[1];
    v14 = a3[1].i32[2];
    v15 = a3->i32[3];
    v24 = a3->i32[2];
    v25 = a3[1].i32[3];
    v16 = a3[1].i32[0];
    v23 = a3[1].i32[1];
    v22 = a3[2];
    CVPixelBufferRetain(pixelBuffer);
    v18 = **(uint64_t ***)(a1 + 16);
    v19 = *v18;
    v20 = *(__CVBuffer **)(*v18 + 88);
    if (v20)
    {
      CVPixelBufferRelease(v20);
      *(_QWORD *)(v19 + 88) = 0;
    }
    result = 0;
    v17.i64[0] = __PAIR64__(Height, Width);
    *(_QWORD *)(v19 + 88) = pixelBuffer;
    v21 = vextq_s8(v22, v17, 4uLL);
    *(_QWORD *)(v19 + 104) = __PAIR64__(Height, Width);
    *(_DWORD *)(v19 + 112) = v31;
    *(_DWORD *)(v19 + 116) = v10;
    *(_DWORD *)(v19 + 120) = v9;
    *(_DWORD *)(v19 + 124) = v30;
    *(_DWORD *)(v19 + 128) = v11;
    *(_DWORD *)(v19 + 132) = v29;
    *(_DWORD *)(v19 + 136) = v28;
    *(_DWORD *)(v19 + 140) = v27;
    *(_DWORD *)(v19 + 144) = v26;
    *(_DWORD *)(v19 + 148) = v12;
    *(_DWORD *)(v19 + 152) = v15;
    *(_DWORD *)(v19 + 156) = v14;
    *(_DWORD *)(v19 + 160) = v13;
    *(_DWORD *)(v19 + 164) = v16;
    *(_DWORD *)(v19 + 168) = v25;
    *(_DWORD *)(v19 + 172) = v24;
    *(_DWORD *)(v19 + 176) = v23;
    *(_DWORD *)(v19 + 180) = v22.i32[0];
    *(_DWORD *)(v19 + 192) = v21.i32[2];
    *(_QWORD *)(v19 + 184) = v21.i64[0];
  }
  return result;
}

void sub_1C9876F30(_Unwind_Exception *a1)
{
  __CVBuffer *v1;

  CVPixelBufferRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t CVAFaceTrackingLiteSetTimestamp(uint64_t a1, double a2)
{
  uint64_t result;
  uint64_t v4;

  result = 4294944343;
  if (a1)
  {
    result = 0;
    v4 = ***(_QWORD ***)(a1 + 16);
    *(double *)(v4 + 24) = a2;
    *(_DWORD *)(v4 + 48) = 0;
  }
  return result;
}

uint64_t CVAFaceTrackingLiteSetDetectedFaces(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t result;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  _BYTE *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  _OWORD *v23;
  uint64_t v24;
  int v25;

  result = 4294944343;
  if (a1 && (a2 & 0x80000000) == 0 && (!a2 || a3))
  {
    v7 = ***(_QWORD ****)(a1 + 16);
    v8 = (void *)v7[41];
    v7[42] = v8;
    v9 = a2;
    if (a2 > (unint64_t)((uint64_t)(v7[43] - (_QWORD)v8) >> 5))
    {
      v10 = (char *)operator new(32 * a2);
      v7[41] = v10;
      v7[42] = v10;
      v7[43] = &v10[32 * a2];
      if (v8)
        operator delete(v8);
    }
    if ((int)a2 >= 1)
    {
      v11 = 0;
      do
      {
        v15 = (char *)v7[42];
        v14 = v7[43];
        if ((unint64_t)v15 < v14)
        {
          *(_OWORD *)v15 = 0u;
          *((_OWORD *)v15 + 1) = 0u;
          v12 = v15 + 32;
        }
        else
        {
          v16 = (_BYTE *)v7[41];
          v17 = (v15 - v16) >> 5;
          v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 59)
            abort();
          v19 = v14 - (_QWORD)v16;
          if (v19 >> 4 > v18)
            v18 = v19 >> 4;
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFE0)
            v20 = 0x7FFFFFFFFFFFFFFLL;
          else
            v20 = v18;
          if (v20)
          {
            if (v20 >> 59)
              sub_1C9899D30();
            v21 = (char *)operator new(32 * v20);
          }
          else
          {
            v21 = 0;
          }
          v22 = &v21[32 * v17];
          *(_OWORD *)v22 = 0u;
          *((_OWORD *)v22 + 1) = 0u;
          v23 = v22;
          if (v15 != v16)
          {
            do
            {
              v24 = *((_QWORD *)v15 - 4);
              v15 -= 32;
              v25 = *((_DWORD *)v15 + 2);
              *((_QWORD *)v23 - 4) = v24;
              v23 -= 2;
              *((_DWORD *)v23 + 2) = v25;
              *(_QWORD *)((char *)v23 + 12) = *(_QWORD *)(v15 + 12);
              *(_QWORD *)((char *)v23 + 20) = *(_QWORD *)(v15 + 20);
            }
            while (v15 != v16);
            v15 = (char *)v7[41];
          }
          v12 = v22 + 32;
          v7[41] = v23;
          v7[42] = v22 + 32;
          v7[43] = &v21[32 * v20];
          if (v15)
            operator delete(v15);
        }
        v7[42] = v12;
        v13 = a3 + 20 * v11;
        *(_OWORD *)((char *)v12 - 20) = *(_OWORD *)v13;
        *((_DWORD *)v12 - 6) = *(_DWORD *)(v13 + 16);
        *((_QWORD *)v12 - 4) = 0;
        ++v11;
      }
      while (v11 != v9);
    }
    return 0;
  }
  return result;
}

uint64_t CVAFaceTrackingLiteSetLuxLevel(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t result;

  if (!a1)
    return 4294944343;
  v2 = ***(_QWORD ***)(a1 + 16);
  v3 = *(_QWORD *)(v2 + 368) & 0xFFFFFF0000000000 | 0x100000000;
  if (!*(_BYTE *)(v2 + 376))
    v3 = 0x100000000;
  v4 = v3 | a2;
  if (!*(_BYTE *)(v2 + 376))
    *(_BYTE *)(v2 + 376) = 1;
  result = 0;
  *(_QWORD *)(v2 + 368) = v4;
  return result;
}

uint64_t CVAFaceTrackingLiteProcess(uint64_t a1)
{
  uint64_t **v1;
  uint64_t *v2;
  uint64_t v3;
  int v4;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  _OWORD *v25;
  int v26;
  unsigned __int8 v28;
  NSObject *v29;
  _BOOL4 v30;
  uint64_t v31;
  cva::DictionaryHandler **v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  __int128 v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  cva::DictionaryHandler *v45;
  const __CFDictionary *Dictionary;
  int v47;
  double Seconds;
  unsigned __int8 v49;
  NSObject *v50;
  std::__shared_weak_count *v51;
  CMTimeScale v52;
  __int128 v53;
  __int128 v54;
  int v55;
  int v56;
  __int128 v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  int v66;
  double v67;
  double v68;
  double v69;
  double v70;
  unint64_t v71;
  char *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  int hasKey;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  __CVBuffer *v94;
  unsigned int Width;
  CMTimeValue value;
  CMTimeEpoch epoch;
  unint64_t v98;
  _BYTE *v99;
  _BYTE *v100;
  size_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  unint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  char *v131;
  uint64_t v132;
  int32x2_t v133;
  unint64_t v134;
  float32x2_t v135;
  int v136;
  uint64_t v137;
  _OWORD *v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  _OWORD *v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  uint64_t v154;
  int v155;
  int v156;
  int v157;
  int v158;
  int v159;
  int v160;
  int v161;
  int v162;
  __int128 v163;
  __int128 v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  unint64_t v169;
  _BYTE *v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  int v181;
  int v182;
  int v183;
  int v184;
  int v185;
  float64x2_t v186;
  float64x2_t v187;
  char *v188;
  int v189;
  int v190;
  int v191;
  int v192;
  int v193;
  int v194;
  int v195;
  int v196;
  char *v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  char *v221;
  _QWORD *v222;
  uint64_t v223;
  uint64_t v224;
  std::mutex *v225;
  unsigned int *v226;
  unsigned int v227;
  unsigned int v228;
  unsigned __int8 v229;
  NSObject *v230;
  unint64_t *v231;
  unint64_t v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  __int128 v236;
  __int128 v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  __int128 v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  __CVBuffer *v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  CMTimeEpoch v250;
  __CVBuffer *v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  uint64_t v256;
  void *v257;
  std::__shared_weak_count *v258;
  unint64_t *v259;
  unint64_t v260;
  __int128 v261;
  cva::DictionaryHandler *v262;
  _BOOL4 v263;
  uint64_t *v264;
  std::__shared_weak_count *v265;
  CMTimeEpoch v266;
  int v267;
  int v268;
  float64x2_t v269;
  float64x2_t v270;
  int v271;
  int v272;
  int v273;
  int v274;
  int v275;
  int v276;
  int v277;
  int v278;
  __CFDictionary *v279;
  int v280;
  _QWORD *v281;
  int v282;
  char *v283;
  uint64_t v284;
  std::__shared_weak_count *v285;
  _BYTE __src[552];
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  uint64_t v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  uint64_t v320;
  cva::DictionaryHandler *v321;
  std::__shared_weak_count *v322;
  uint64_t v323;
  char v324;
  char v325;
  int v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t (**v330)();
  uint64_t v331;
  int v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  int v336;
  CMTimeEpoch v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  int v341;
  int v342;
  uint64_t v343;
  int v344;
  __int128 v345;
  __int128 v346;
  uint64_t (**v347)();
  uint64_t v348;
  int v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  int v353;
  CMTimeEpoch v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  int v358;
  int v359;
  uint64_t v360;
  int v361;
  __int128 v362;
  __int128 v363;
  uint64_t (**v364)();
  uint64_t v365;
  int v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  int v370;
  CMTimeEpoch v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  int v375;
  int v376;
  uint64_t v377;
  int v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  __int128 v384;
  __int128 v385;
  __int128 v386;
  __int128 v387;
  __int128 v388;
  __int128 v389;
  __int128 v390;
  __int128 v391;
  __int128 v392;
  __int128 v393;
  __int128 v394;
  __int128 v395;
  __int128 v396;
  __int128 v397;
  __int128 v398;
  char v399;
  char v400;
  char v401;
  char v402;
  __int128 v403;
  __int128 v404;
  __int128 v405;
  __int128 v406;
  unint64_t v407;
  _BYTE v408[16];
  _OWORD __dst[35];
  __int128 v410;
  CMTime time[8];
  __int128 v412;
  __int128 v413;
  _BYTE v414[172];
  uint64_t v415;
  int v416;
  CMTimeEpoch v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  int v421;
  int v422;
  uint64_t v423;
  int v424;
  __int128 v425;
  __int128 v426;
  __int128 v427;
  __int128 v428;
  __int128 v429;
  __int128 v430;
  __int128 v431;
  __int128 v432;
  __int128 v433;
  __int128 v434;
  __int128 v435;
  __int128 v436;
  __int128 v437;
  __int128 v438;
  __int128 v439;
  __int128 v440;
  __int128 v441;
  __int128 v442;
  __int128 v443;
  __int128 v444;
  char v445;
  char v446;
  char v447;
  char v448;
  __int128 v449;
  __int128 v450;
  __int128 v451;
  __int128 v452;
  uint64_t v453;

  v453 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 4294944343;
  v1 = *(uint64_t ***)(a1 + 16);
  v2 = *v1;
  v3 = **v1;
  v4 = sub_1C98E6040(v3);
  __asm { FMOV            V0.2S, #1.0 }
  v266 = _D0;
  if (v4)
  {
    v10 = operator new();
    v11 = *(_QWORD *)v3;
    *(_QWORD *)v3 = 0;
    *(_QWORD *)v10 = v11;
    v281 = (_QWORD *)v10;
    cva::DictionaryHandler::DictionaryHandler();
    v12 = *(_OWORD *)(v3 + 24);
    *(_OWORD *)(v10 + 40) = *(_OWORD *)(v3 + 40);
    *(_OWORD *)(v10 + 24) = v12;
    *(_OWORD *)(v10 + 56) = *(_OWORD *)(v3 + 56);
    *(_QWORD *)(v3 + 56) = 0;
    *(_QWORD *)(v3 + 64) = 0;
    *(_OWORD *)(v10 + 72) = *(_OWORD *)(v3 + 72);
    *(_QWORD *)(v3 + 72) = 0;
    *(_QWORD *)(v3 + 80) = 0;
    *(_QWORD *)(v10 + 88) = *(_QWORD *)(v3 + 88);
    *(_QWORD *)(v3 + 88) = 0;
    *(_QWORD *)(v10 + 96) = &off_1E8295050;
    *(_QWORD *)(v10 + 104) = *(_QWORD *)(v3 + 104);
    v13 = *(_OWORD *)(v3 + 112);
    v14 = *(_OWORD *)(v3 + 128);
    *(_DWORD *)(v10 + 144) = *(_DWORD *)(v3 + 144);
    *(_OWORD *)(v10 + 112) = v13;
    *(_OWORD *)(v10 + 128) = v14;
    v15 = *(_OWORD *)(v3 + 148);
    v16 = *(_OWORD *)(v3 + 164);
    *(_DWORD *)(v10 + 180) = *(_DWORD *)(v3 + 180);
    *(_OWORD *)(v10 + 164) = v16;
    *(_OWORD *)(v10 + 148) = v15;
    v17 = *(_QWORD *)(v3 + 184);
    *(_DWORD *)(v10 + 192) = *(_DWORD *)(v3 + 192);
    *(_QWORD *)(v10 + 184) = v17;
    *(_QWORD *)(v10 + 200) = *(_QWORD *)(v3 + 200);
    *(_QWORD *)(v3 + 200) = 0;
    *(_QWORD *)(v10 + 208) = &off_1E8295050;
    *(_QWORD *)(v10 + 216) = *(_QWORD *)(v3 + 216);
    v18 = *(_OWORD *)(v3 + 224);
    v19 = *(_OWORD *)(v3 + 240);
    *(_DWORD *)(v10 + 256) = *(_DWORD *)(v3 + 256);
    *(_OWORD *)(v10 + 240) = v19;
    *(_OWORD *)(v10 + 224) = v18;
    v20 = *(_OWORD *)(v3 + 260);
    v21 = *(_OWORD *)(v3 + 276);
    *(_DWORD *)(v10 + 292) = *(_DWORD *)(v3 + 292);
    *(_OWORD *)(v10 + 276) = v21;
    *(_OWORD *)(v10 + 260) = v20;
    v22 = *(_QWORD *)(v3 + 296);
    *(_DWORD *)(v10 + 304) = *(_DWORD *)(v3 + 304);
    *(_QWORD *)(v10 + 296) = v22;
    *(_OWORD *)(v10 + 312) = *(_OWORD *)(v3 + 312);
    *(_QWORD *)(v10 + 336) = 0;
    *(_QWORD *)(v10 + 344) = 0;
    *(_QWORD *)(v10 + 328) = 0;
    *(_QWORD *)(v10 + 328) = *(_QWORD *)(v3 + 328);
    *(_QWORD *)(v10 + 336) = *(_QWORD *)(v3 + 336);
    *(_QWORD *)(v10 + 344) = *(_QWORD *)(v3 + 344);
    *(_QWORD *)(v3 + 328) = 0;
    *(_QWORD *)(v3 + 336) = 0;
    *(_QWORD *)(v3 + 344) = 0;
    *(_OWORD *)(v10 + 352) = *(_OWORD *)(v3 + 352);
    *(_QWORD *)(v3 + 352) = 0;
    *(_QWORD *)(v3 + 360) = 0;
    v23 = *(_OWORD *)(v3 + 368);
    *(_DWORD *)(v10 + 383) = *(_DWORD *)(v3 + 383);
    *(_OWORD *)(v10 + 368) = v23;
    *(_BYTE *)(v10 + 385) = 1;
    v24 = (std::__shared_weak_count *)operator new();
    v24->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8294768;
    v24->__shared_owners_ = 0;
    v24->__shared_weak_owners_ = 0;
    v24[1].__vftable = (std::__shared_weak_count_vtbl *)v10;
    v25 = (_OWORD *)(v10 + 24);
    v26 = *(_DWORD *)(v10 + 48);
    if (v26)
    {
      if (v26 != 1)
        goto LABEL_175;
      *(_OWORD *)&time[0].value = *v25;
      time[0].epoch = *(_QWORD *)(v10 + 40);
      CMTimeGetSeconds(time);
    }
    v264 = v2;
    v265 = v24;
    kdebug_trace();
    v32 = (cva::DictionaryHandler **)(v3 + 416);
    if (!*(_BYTE *)(v3 + 440))
    {
      *v32 = 0;
      *(_QWORD *)(v3 + 424) = 0;
      *(_QWORD *)(v3 + 432) = 0;
      *(_BYTE *)(v3 + 440) = 1;
    }
    v284 = v10;
    v285 = v265;
    p_shared_owners = (unint64_t *)&v265->__shared_owners_;
    do
      v34 = __ldxr(p_shared_owners);
    while (__stxr(v34 + 1, p_shared_owners));
    sub_1C98BE1F0((cva::DictionaryHandler **)time, (uint64_t *)(v3 + 408), &v284);
    v35 = *(_OWORD *)&time[0].value;
    *(_OWORD *)&time[0].value = 0uLL;
    v36 = *(std::__shared_weak_count **)(v3 + 424);
    *(_OWORD *)(v3 + 416) = v35;
    if (v36)
    {
      v37 = (unint64_t *)&v36->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    v39 = *(std::__shared_weak_count **)&time[0].timescale;
    if (*(_QWORD *)&time[0].timescale)
    {
      v40 = (unint64_t *)(*(_QWORD *)&time[0].timescale + 8);
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    v42 = v285;
    if (v285)
    {
      v43 = (unint64_t *)&v285->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    v45 = *v32;
    v263 = *v32 != 0;
    v262 = *v32;
    if (!*v32)
    {
      v49 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
      if ((v49 & 1) != 0)
      {
LABEL_37:
        v50 = qword_1ED52ACE0;
        v2 = v264;
        v51 = v265;
        v30 = v263;
        if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_ERROR))
        {
          LOWORD(time[0].value) = 0;
          _os_log_error_impl(&dword_1C9870000, v50, OS_LOG_TYPE_ERROR, "FaceKit processing failed", (uint8_t *)time, 2u);
        }
        goto LABEL_129;
      }
LABEL_176:
      if (__cxa_guard_acquire(&qword_1ED52ACD0))
      {
        qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
        __cxa_guard_release(&qword_1ED52ACD0);
      }
      goto LABEL_37;
    }
    if (!*(_BYTE *)(v3 + 592))
    {
      *(_OWORD *)(v3 + 560) = 0u;
      *(_OWORD *)(v3 + 576) = 0u;
      *(_OWORD *)(v3 + 528) = 0u;
      *(_OWORD *)(v3 + 544) = 0u;
      *(_OWORD *)(v3 + 496) = 0u;
      *(_OWORD *)(v3 + 512) = 0u;
      *(_OWORD *)(v3 + 464) = 0u;
      *(_OWORD *)(v3 + 480) = 0u;
      *(_OWORD *)(v3 + 448) = 0u;
      *(_BYTE *)(v3 + 592) = 1;
    }
    Dictionary = (const __CFDictionary *)cva::DictionaryHandler::getDictionary(v45);
    cva::DictionaryHandler::DictionaryHandler((cva::DictionaryHandler *)v408, Dictionary);
    *(_QWORD *)(v3 + 452) = 7;
    *(_DWORD *)(v3 + 460) = 0;
    v47 = *(_DWORD *)(v10 + 48);
    v279 = Dictionary;
    if (!v47)
    {
      Seconds = *(double *)v25;
LABEL_40:
      *(double *)(v3 + 464) = Seconds;
      v52 = *(_DWORD *)(v10 + 180);
      v53 = *(_OWORD *)(v10 + 148);
      v54 = *(_OWORD *)(v10 + 164);
      *(_QWORD *)&time[1].flags = *(_QWORD *)(v10 + 184);
      v55 = *(_DWORD *)(v10 + 192);
      time[1].timescale = v52;
      HIDWORD(time[1].epoch) = v55;
      v56 = *(_DWORD *)(v10 + 144);
      v57 = *(_OWORD *)(v10 + 128);
      *(_OWORD *)(v3 + 520) = *(_OWORD *)(v10 + 112);
      *(_OWORD *)(v3 + 488) = v54;
      *(_OWORD *)(v3 + 472) = v53;
      *(_DWORD *)(v3 + 552) = v56;
      *(_OWORD *)(v3 + 536) = v57;
      *(_OWORD *)(v3 + 504) = *(_OWORD *)&time[1].timescale;
      v58 = *(char **)(v3 + 600);
      *(_QWORD *)(v3 + 608) = v58;
      v59 = *(_QWORD *)(v10 + 336) - *(_QWORD *)(v10 + 328);
      v60 = v59 >> 5;
      if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v3 + 616) - (_QWORD)v58) >> 3) < v59 >> 5)
      {
        if (v59 < 0)
          goto LABEL_171;
        v61 = 40 * v60;
        v62 = (char *)operator new(40 * v60);
        *(_QWORD *)(v3 + 600) = v62;
        *(_QWORD *)(v3 + 608) = v62;
        *(_QWORD *)(v3 + 616) = &v62[v61];
        if (v58)
        {
          operator delete(v58);
          v58 = *(char **)(v3 + 608);
        }
        else
        {
          v58 = v62;
        }
      }
      v63 = v281[41];
      v64 = v281[42];
      if (v63 != v64)
      {
        while (1)
        {
          v66 = *(_DWORD *)(v63 + 8);
          v67 = *(float *)(v63 + 12);
          v68 = *(float *)(v63 + 16);
          v69 = *(float *)(v63 + 20);
          v70 = *(float *)(v63 + 24);
          v71 = *(_QWORD *)(v3 + 616);
          if ((unint64_t)v58 < v71)
          {
            *(_DWORD *)v58 = v66;
            *((_DWORD *)v58 + 1) = 0;
            *((double *)v58 + 1) = v67;
            *((double *)v58 + 2) = v68;
            v65 = v58 + 40;
            *((double *)v58 + 3) = v69;
            *((double *)v58 + 4) = v70;
          }
          else
          {
            v72 = *(char **)(v3 + 600);
            v73 = 0xCCCCCCCCCCCCCCCDLL * ((v58 - v72) >> 3) + 1;
            if (v73 > 0x666666666666666)
              goto LABEL_171;
            v74 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v71 - (_QWORD)v72) >> 3);
            if (2 * v74 > v73)
              v73 = 2 * v74;
            if (v74 >= 0x333333333333333)
              v75 = 0x666666666666666;
            else
              v75 = v73;
            if (v75)
            {
              if (v75 > 0x666666666666666)
LABEL_172:
                sub_1C9899D30();
              v76 = (char *)operator new(40 * v75);
            }
            else
            {
              v76 = 0;
            }
            v77 = &v76[8 * ((v58 - v72) >> 3)];
            *(_DWORD *)v77 = v66;
            *((_DWORD *)v77 + 1) = 0;
            *((double *)v77 + 1) = v67;
            *((double *)v77 + 2) = v68;
            *((double *)v77 + 3) = v69;
            *((double *)v77 + 4) = v70;
            v78 = v77;
            if (v58 != v72)
            {
              do
              {
                v79 = *(_OWORD *)(v58 - 40);
                v80 = *(_OWORD *)(v58 - 24);
                *((_QWORD *)v78 - 1) = *((_QWORD *)v58 - 1);
                *(_OWORD *)(v78 - 24) = v80;
                *(_OWORD *)(v78 - 40) = v79;
                v78 -= 40;
                v58 -= 40;
              }
              while (v58 != v72);
              v58 = *(char **)(v3 + 600);
            }
            *(_QWORD *)(v3 + 600) = v78;
            v65 = v77 + 40;
            *(_QWORD *)(v3 + 608) = v77 + 40;
            *(_QWORD *)(v3 + 616) = &v76[40 * v75];
            if (v58)
              operator delete(v58);
          }
          *(_QWORD *)(v3 + 608) = v65;
          v63 += 32;
          v58 = v65;
          if (v63 == v64)
            goto LABEL_67;
        }
      }
      v65 = v58;
LABEL_67:
      v81 = *(_QWORD *)(v3 + 600);
      *(_DWORD *)(v3 + 556) = -858993459 * ((unint64_t)&v65[-v81] >> 3);
      *(_QWORD *)(v3 + 560) = v81;
      if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)v408, CFSTR("data_failure")))
      {
        cva::DictionaryHandler::item((cva::DictionaryHandler *)v408, CFSTR("data_failure"));
        cva::ItemHandler::getDictionary((cva::ItemHandler *)time);
        cva::ItemHandler::~ItemHandler((cva::ItemHandler *)time);
        hasKey = cva::DictionaryHandler::hasKey(v321, CFSTR("image_too_dark"));
        if (hasKey)
        {
          cva::DictionaryHandler::item(v321, CFSTR("image_too_dark"));
          v83 = cva::ItemHandler::getValue<BOOL>();
          cva::ItemHandler::~ItemHandler((cva::ItemHandler *)time);
          if (v83)
            v84 = 256;
          else
            v84 = 0;
        }
        else
        {
          v84 = 0;
        }
        v86 = cva::DictionaryHandler::hasKey(v321, CFSTR("sensor_covered"));
        if (v86)
        {
          cva::DictionaryHandler::item(v321, CFSTR("sensor_covered"));
          v87 = cva::ItemHandler::getValue<BOOL>();
          cva::ItemHandler::~ItemHandler((cva::ItemHandler *)time);
          if (v87)
            v88 = 256;
          else
            v88 = 0;
        }
        else
        {
          v88 = 0;
        }
        v89 = v84 | hasKey;
        v90 = v88 | v86;
        v91 = v322;
        if (v322)
        {
          v92 = (unint64_t *)&v322->__shared_owners_;
          do
            v93 = __ldaxr(v92);
          while (__stlxr(v93 - 1, v92));
          if (!v93)
          {
            ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
            std::__shared_weak_count::__release_weak(v91);
          }
        }
        v85 = v89 | (v90 << 16);
      }
      else
      {
        v85 = 0;
      }
      *(_DWORD *)(v3 + 448) = v85;
      *(_QWORD *)(v3 + 632) = *(_QWORD *)(v3 + 624);
      v94 = (__CVBuffer *)v281[11];
      if (v94)
      {
        Width = CVPixelBufferGetWidth(v94);
        v94 = (__CVBuffer *)v281[11];
        if (v94)
          LODWORD(v94) = CVPixelBufferGetHeight(v94);
      }
      else
      {
        Width = 0;
      }
      v407 = __PAIR64__(v94, Width);
      memset(time, 0, 24);
      LOBYTE(time[1].epoch) = 0;
      LOBYTE(time[2].value) = 0;
      time[2].timescale = 0;
      memset(&time[2].epoch, 0, sizeof(CMTime));
      time[3].epoch = (CMTimeEpoch)&off_1E8295050;
      time[4].value = 0x100000001;
      *(_QWORD *)&time[4].flags = 0;
      *(CMTimeEpoch *)((char *)&time[4].epoch + 4) = 0x3F80000000000000;
      *(CMTimeValue *)((char *)&time[5].value + 4) = 0;
      time[4].timescale = 1065353216;
      time[5].flags = 0;
      time[6].epoch = 0;
      time[6].value = 0;
      *(_QWORD *)&time[6].timescale = 0x3F80000000000000;
      time[5].epoch = v266;
      time[7].value = 0x3F80000000000000;
      *(_QWORD *)&time[7].timescale = 0;
      LODWORD(time[7].epoch) = 0;
      v412 = 0u;
      v413 = 0u;
      *(_QWORD *)v414 = &off_1E8295050;
      *(_QWORD *)&v414[8] = 0x100000001;
      *(_QWORD *)&v414[20] = 0;
      *(_OWORD *)&v414[28] = 0x3F80000000000000uLL;
      *(_DWORD *)&v414[16] = 1065353216;
      *(_DWORD *)&v414[44] = 0;
      *(_QWORD *)&v414[72] = 0;
      *(_DWORD *)&v414[80] = 0;
      *(_QWORD *)&v414[56] = 0;
      *(_QWORD *)&v414[64] = 0x3F80000000000000;
      *(_QWORD *)&v414[48] = v266;
      *(_DWORD *)&v414[84] = 1065353216;
      *(_DWORD *)&v414[96] = 0;
      *(_QWORD *)&v414[88] = 0;
      memset(&v414[104], 0, 32);
      *(_QWORD *)&v414[136] = &off_1E8295050;
      *(_QWORD *)&v414[144] = 0x100000001;
      *(_DWORD *)&v414[152] = 1065353216;
      *(_QWORD *)&v414[156] = 0;
      *(_QWORD *)&v414[164] = 0x3F80000000000000;
      v415 = 0;
      v416 = 0;
      v419 = 0x3F80000000000000;
      v418 = 0;
      v421 = 0;
      v420 = 0;
      v417 = v266;
      v422 = 1065353216;
      v424 = 0;
      v423 = 0;
      v445 = 0;
      v443 = 0u;
      v444 = 0u;
      v441 = 0u;
      v442 = 0u;
      v439 = 0u;
      v440 = 0u;
      v437 = 0u;
      v438 = 0u;
      v435 = 0u;
      v436 = 0u;
      v433 = 0u;
      v434 = 0u;
      v431 = 0u;
      v432 = 0u;
      v429 = 0u;
      v430 = 0u;
      v427 = 0u;
      v428 = 0u;
      v425 = 0u;
      v426 = 0u;
      v446 = 1;
      v447 = 0;
      v448 = 0;
      v449 = 0u;
      v450 = 0u;
      v451 = 0u;
      v452 = 0u;
      v322 = 0;
      v321 = 0;
      v323 = 0;
      v324 = 0;
      v325 = 0;
      v326 = 0;
      v327 = 0;
      v328 = 0;
      v329 = 0;
      v330 = &off_1E8295050;
      v331 = 0x100000001;
      v333 = 0;
      v334 = 0x3F80000000000000;
      v335 = 0;
      v332 = 1065353216;
      v336 = 0;
      v340 = 0;
      v338 = 0;
      v339 = 0x3F80000000000000;
      v337 = v266;
      v341 = 0;
      v342 = 1065353216;
      v344 = 0;
      v343 = 0;
      v345 = 0u;
      v346 = 0u;
      v347 = &off_1E8295050;
      v348 = 0x100000001;
      v350 = 0;
      v351 = 0x3F80000000000000;
      v352 = 0;
      v349 = 1065353216;
      v353 = 0;
      v357 = 0;
      v358 = 0;
      v355 = 0;
      v356 = 0x3F80000000000000;
      v354 = v266;
      v359 = 1065353216;
      v360 = 0;
      v361 = 0;
      v362 = 0u;
      v363 = 0u;
      v364 = &off_1E8295050;
      v365 = 0x100000001;
      v366 = 1065353216;
      v367 = 0;
      v368 = 0x3F80000000000000;
      v369 = 0;
      v370 = 0;
      v374 = 0;
      v375 = 0;
      v372 = 0;
      v373 = 0x3F80000000000000;
      v371 = v266;
      v376 = 1065353216;
      v378 = 0;
      v377 = 0;
      v399 = 0;
      v397 = 0u;
      v398 = 0u;
      v395 = 0u;
      v396 = 0u;
      v393 = 0u;
      v394 = 0u;
      v391 = 0u;
      v392 = 0u;
      v389 = 0u;
      v390 = 0u;
      v387 = 0u;
      v388 = 0u;
      v385 = 0u;
      v386 = 0u;
      v383 = 0u;
      v384 = 0u;
      v381 = 0u;
      v382 = 0u;
      v379 = 0u;
      v380 = 0u;
      v400 = 1;
      v401 = 0;
      v402 = 0;
      v403 = 0u;
      v404 = 0u;
      v405 = 0u;
      v406 = 0u;
      if ((sub_1C98FB210(v279, 0, (int32x2_t *)&v407, (uint64_t)time) & 1) != 0)
        sub_1C98FB210(v279, 1, (int32x2_t *)&v407, (uint64_t)&v321);
      value = time[3].value;
      epoch = time[2].epoch;
      v98 = 0x7E3F1F8FC7E3F1F9 * ((time[3].value - time[2].epoch) >> 4);
      v99 = *(_BYTE **)(v3 + 624);
      if (0x86BCA1AF286BCA1BLL * ((uint64_t)(*(_QWORD *)(v3 + 640) - (_QWORD)v99) >> 6) >= v98)
        goto LABEL_98;
      if (v98 <= 0x35E50D79435E50)
      {
        v100 = *(_BYTE **)(v3 + 632);
        v101 = 0xABD5EAF57ABD5EC0 * ((time[3].value - time[2].epoch) >> 4);
        v102 = (char *)operator new(v101);
        v103 = &v102[v101];
        v104 = (v100 - v99) / 1216;
        v105 = &v102[1216 * v104];
        v106 = v105;
        if (v100 != v99)
        {
          v106 = &v102[1216 * v104];
          do
          {
            v100 -= 1216;
            v106 -= 1216;
            memcpy(v106, v100, 0x4C0uLL);
          }
          while (v100 != v99);
        }
        *(_QWORD *)(v3 + 624) = v106;
        *(_QWORD *)(v3 + 632) = v105;
        *(_QWORD *)(v3 + 640) = v103;
        if (v99)
        {
          operator delete(v99);
          value = time[3].value;
          epoch = time[2].epoch;
        }
LABEL_98:
        if (value != epoch)
        {
          v107 = 0;
          while (1)
          {
            v132 = v327;
            v133 = (int32x2_t)v407;
            v410 = 0uLL;
            v308 = 0u;
            v309 = 0u;
            v310 = 0u;
            v311 = 0u;
            v312 = 0u;
            v313 = 0u;
            v314 = 0u;
            v315 = 0u;
            v316 = 0u;
            v317 = 0u;
            v318 = 0u;
            v319 = 0u;
            v320 = 0;
            v306 = 0u;
            v307 = 0u;
            v304 = 0u;
            v305 = 0u;
            v303 = 0;
            v301 = 0u;
            v302 = 0u;
            v299 = 0u;
            v300 = 0u;
            v297 = 0u;
            v298 = 0u;
            v295 = 0u;
            v296 = 0u;
            v293 = 0u;
            v294 = 0u;
            v291 = 0u;
            v292 = 0u;
            v289 = 0u;
            v290 = 0u;
            v287 = 0u;
            v288 = 0u;
            bzero(__src, 0x228uLL);
            v134 = epoch + 1168 * v107;
            v135 = vdiv_f32((float32x2_t)v266, vcvt_f32_s32(vmax_s32(v133, (int32x2_t)0x100000001)));
            v271 = *(_DWORD *)(v134 + 156);
            v272 = *(_DWORD *)(v134 + 892);
            v136 = *(_DWORD *)(v134 + 164);
            v269 = vcvtq_f64_f32(vmul_f32(vadd_f32(*(float32x2_t *)(v134 + 876), (float32x2_t)0x3F0000003F000000), v135));
            v270 = vcvtq_f64_f32(vmul_f32(*(float32x2_t *)(v134 + 884), v135));
            v410 = *(_OWORD *)(v134 + 128);
            v137 = v132 + 1168 * v107;
            v268 = *(_DWORD *)(v137 + 392);
            v138 = *(_OWORD **)(v137 + 264);
            v139 = v138[8];
            __dst[9] = v138[9];
            v140 = v138[11];
            __dst[10] = v138[10];
            __dst[11] = v140;
            *(_OWORD *)((char *)&__dst[11] + 12) = *(_OWORD *)((char *)v138 + 188);
            v141 = v138[7];
            __dst[6] = v138[6];
            __dst[7] = v141;
            __dst[8] = v139;
            v142 = v138[3];
            __dst[2] = v138[2];
            __dst[3] = v142;
            v143 = v138[5];
            __dst[4] = v138[4];
            __dst[5] = v143;
            v144 = v138[1];
            __dst[0] = *v138;
            __dst[1] = v144;
            DWORD1(__dst[13]) = *(_DWORD *)(v137 + 304);
            *(_QWORD *)((char *)&__dst[12] + 12) = *(_QWORD *)(v137 + 296);
            v274 = *(_DWORD *)(v137 + 360);
            v275 = *(_DWORD *)(v137 + 352);
            v278 = *(_DWORD *)(v137 + 368);
            v280 = *(_DWORD *)(v137 + 344);
            v276 = *(_DWORD *)(v137 + 336);
            v277 = *(_DWORD *)(v137 + 328);
            v273 = *(_DWORD *)(v137 + 312);
            v282 = *(_DWORD *)(v137 + 320);
            v310 = v142;
            v311 = __dst[4];
            v314 = v141;
            v315 = __dst[8];
            v312 = __dst[5];
            v313 = __dst[6];
            v316 = __dst[9];
            v317 = __dst[10];
            v308 = v144;
            v309 = __dst[2];
            v320 = *(_QWORD *)&__dst[13];
            v318 = __dst[11];
            v319 = __dst[12];
            LODWORD(__dst[2]) = *(_DWORD *)(v137 + 240);
            v146 = *(_OWORD *)(v137 + 208);
            v145 = *(_OWORD *)(v137 + 224);
            *(_QWORD *)((char *)&__dst[2] + 4) = *(_QWORD *)(v137 + 244);
            HIDWORD(__dst[2]) = *(_DWORD *)(v137 + 252);
            v304 = v146;
            v305 = v145;
            v306 = __dst[2];
            v307 = __dst[0];
            v267 = *(_DWORD *)(v134 + 392);
            v147 = *(_OWORD **)(v134 + 264);
            v148 = v147[3];
            __dst[2] = v147[2];
            __dst[3] = v148;
            v149 = v147[7];
            __dst[6] = v147[6];
            __dst[7] = v149;
            v150 = v147[5];
            __dst[4] = v147[4];
            __dst[5] = v150;
            *(_OWORD *)((char *)&__dst[11] + 12) = *(_OWORD *)((char *)v147 + 188);
            v151 = v147[11];
            __dst[10] = v147[10];
            __dst[11] = v151;
            v152 = v147[9];
            __dst[8] = v147[8];
            __dst[9] = v152;
            v153 = v147[1];
            __dst[0] = *v147;
            __dst[1] = v153;
            v154 = *(_QWORD *)(v134 + 296);
            DWORD1(__dst[13]) = *(_DWORD *)(v134 + 304);
            *(_QWORD *)((char *)&__dst[12] + 12) = v154;
            v155 = *(_DWORD *)(v134 + 344);
            v156 = *(_DWORD *)(v134 + 352);
            v157 = *(_DWORD *)(v134 + 360);
            v158 = *(_DWORD *)(v134 + 368);
            v159 = *(_DWORD *)(v134 + 328);
            v160 = *(_DWORD *)(v134 + 336);
            v161 = *(_DWORD *)(v134 + 312);
            v162 = *(_DWORD *)(v134 + 320);
            v300 = __dst[10];
            v301 = __dst[11];
            v302 = __dst[12];
            v303 = *(_QWORD *)&__dst[13];
            v296 = __dst[6];
            v297 = __dst[7];
            v298 = __dst[8];
            v299 = v152;
            v292 = __dst[2];
            v293 = __dst[3];
            v294 = __dst[4];
            v295 = __dst[5];
            v290 = __dst[0];
            v291 = v153;
            v163 = *(_OWORD *)(v134 + 208);
            v164 = *(_OWORD *)(v134 + 224);
            LODWORD(__dst[2]) = *(_DWORD *)(v134 + 240);
            __dst[0] = v163;
            __dst[1] = v164;
            v165 = *(_QWORD *)(v134 + 244);
            HIDWORD(__dst[2]) = *(_DWORD *)(v134 + 252);
            *(_QWORD *)((char *)&__dst[2] + 4) = v165;
            v287 = v163;
            v288 = v164;
            v289 = __dst[2];
            v166 = *(_QWORD *)(v134 + 400);
            DWORD2(__dst[33]) = *(_DWORD *)(v134 + 408);
            *(_QWORD *)&__dst[33] = v166;
            v167 = *(_QWORD *)(v134 + 416);
            DWORD1(__dst[34]) = *(_DWORD *)(v134 + 424);
            *(_QWORD *)((char *)&__dst[33] + 12) = v167;
            memcpy(__dst, *(const void **)(v134 + 944), 0x210uLL);
            memcpy(__src, __dst, sizeof(__src));
            v168 = *(char **)(v3 + 632);
            v169 = *(_QWORD *)(v3 + 640);
            if ((unint64_t)v168 < v169)
            {
              *(_DWORD *)v168 = v272;
              *((_DWORD *)v168 + 1) = 0;
              *(float64x2_t *)(v168 + 8) = v269;
              *(float64x2_t *)(v168 + 24) = v270;
              *((_DWORD *)v168 + 10) = v271;
              *(_OWORD *)(v168 + 44) = v410;
              *((_DWORD *)v168 + 15) = v136;
              v108 = v318;
              v109 = v319;
              v110 = v316;
              *((_OWORD *)v168 + 14) = v317;
              *((_OWORD *)v168 + 15) = v108;
              *((_OWORD *)v168 + 16) = v109;
              *((_QWORD *)v168 + 34) = v320;
              v111 = v314;
              v112 = v315;
              v113 = v312;
              *((_OWORD *)v168 + 10) = v313;
              *((_OWORD *)v168 + 11) = v111;
              *((_OWORD *)v168 + 12) = v112;
              *((_OWORD *)v168 + 13) = v110;
              v114 = v310;
              v115 = v311;
              v116 = v308;
              *((_OWORD *)v168 + 6) = v309;
              *((_OWORD *)v168 + 7) = v114;
              *((_OWORD *)v168 + 8) = v115;
              *((_OWORD *)v168 + 9) = v113;
              v117 = v306;
              *((_OWORD *)v168 + 4) = v307;
              *((_OWORD *)v168 + 5) = v116;
              *((_DWORD *)v168 + 70) = v280;
              *((_DWORD *)v168 + 71) = v274;
              *((_DWORD *)v168 + 72) = v275;
              *((_DWORD *)v168 + 73) = v278;
              *((_DWORD *)v168 + 74) = v277;
              *((_DWORD *)v168 + 75) = v276;
              *((_DWORD *)v168 + 76) = v268;
              *((_DWORD *)v168 + 77) = v273;
              *((_DWORD *)v168 + 78) = v282;
              v118 = v305;
              *(_OWORD *)(v168 + 316) = v304;
              *(_OWORD *)(v168 + 332) = v118;
              *(_OWORD *)(v168 + 348) = v117;
              v119 = v291;
              v120 = v292;
              v121 = v289;
              *(_OWORD *)(v168 + 364) = v290;
              *(_OWORD *)(v168 + 380) = v119;
              v122 = v293;
              v123 = v295;
              v124 = v296;
              *(_OWORD *)(v168 + 428) = v294;
              *(_OWORD *)(v168 + 444) = v123;
              *(_OWORD *)(v168 + 396) = v120;
              *(_OWORD *)(v168 + 412) = v122;
              v125 = v297;
              v126 = v299;
              v127 = v300;
              *(_OWORD *)(v168 + 492) = v298;
              *(_OWORD *)(v168 + 508) = v126;
              *(_OWORD *)(v168 + 460) = v124;
              *(_OWORD *)(v168 + 476) = v125;
              v128 = v301;
              v129 = v302;
              *(_QWORD *)(v168 + 572) = v303;
              *(_OWORD *)(v168 + 540) = v128;
              *(_OWORD *)(v168 + 556) = v129;
              *(_OWORD *)(v168 + 524) = v127;
              *((_DWORD *)v168 + 145) = v155;
              *((_DWORD *)v168 + 146) = v157;
              *((_DWORD *)v168 + 147) = v156;
              *((_DWORD *)v168 + 148) = v158;
              *((_DWORD *)v168 + 149) = v159;
              *((_DWORD *)v168 + 150) = v160;
              *((_DWORD *)v168 + 151) = v267;
              *((_DWORD *)v168 + 152) = v161;
              *((_DWORD *)v168 + 153) = v162;
              v130 = v288;
              *(_OWORD *)(v168 + 616) = v287;
              *(_OWORD *)(v168 + 632) = v130;
              *(_OWORD *)(v168 + 648) = v121;
              memcpy(v168 + 664, __src, 0x228uLL);
              v131 = v168 + 1216;
            }
            else
            {
              v170 = *(_BYTE **)(v3 + 624);
              v171 = 0x86BCA1AF286BCA1BLL * ((v168 - v170) >> 6) + 1;
              if (v171 > 0x35E50D79435E50)
                goto LABEL_171;
              v172 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v169 - (_QWORD)v170) >> 6);
              if (2 * v172 > v171)
                v171 = 2 * v172;
              if (v172 >= 0x1AF286BCA1AF28)
                v173 = 0x35E50D79435E50;
              else
                v173 = v171;
              v175 = v157;
              v174 = v160;
              v176 = v282;
              v178 = v278;
              v177 = v280;
              v180 = v276;
              v179 = v277;
              v182 = v274;
              v181 = v275;
              v183 = v272;
              v184 = v273;
              v185 = v271;
              v187 = v269;
              v186 = v270;
              if (v173)
              {
                if (v173 > 0x35E50D79435E50)
                  goto LABEL_172;
                v188 = (char *)operator new(1216 * v173);
                v189 = v267;
                v190 = v268;
                v191 = v156;
                v192 = v161;
                v193 = v162;
                v194 = v155;
                v195 = v158;
                v196 = v159;
                v175 = v157;
                v174 = v160;
                v176 = v282;
                v178 = v278;
                v177 = v280;
                v180 = v276;
                v179 = v277;
                v182 = v274;
                v181 = v275;
                v183 = v272;
                v184 = v273;
                v185 = v271;
                v187 = v269;
                v186 = v270;
              }
              else
              {
                v189 = v267;
                v190 = v268;
                v191 = v156;
                v192 = v161;
                v193 = v162;
                v194 = v155;
                v195 = v158;
                v196 = v159;
                v188 = 0;
              }
              v283 = v188;
              v197 = &v188[64 * ((v168 - v170) >> 6)];
              *(_DWORD *)v197 = v183;
              *((_DWORD *)v197 + 1) = 0;
              *(float64x2_t *)(v197 + 8) = v187;
              *(float64x2_t *)(v197 + 24) = v186;
              *((_DWORD *)v197 + 10) = v185;
              *(_OWORD *)(v197 + 44) = v410;
              *((_DWORD *)v197 + 15) = v136;
              v198 = v318;
              v199 = v319;
              v200 = v316;
              *((_OWORD *)v197 + 14) = v317;
              *((_OWORD *)v197 + 15) = v198;
              *((_OWORD *)v197 + 16) = v199;
              *((_QWORD *)v197 + 34) = v320;
              v201 = v314;
              v202 = v315;
              v203 = v312;
              *((_OWORD *)v197 + 10) = v313;
              *((_OWORD *)v197 + 11) = v201;
              *((_OWORD *)v197 + 12) = v202;
              *((_OWORD *)v197 + 13) = v200;
              v204 = v310;
              v205 = v311;
              v206 = v308;
              *((_OWORD *)v197 + 6) = v309;
              *((_OWORD *)v197 + 7) = v204;
              *((_OWORD *)v197 + 8) = v205;
              *((_OWORD *)v197 + 9) = v203;
              v207 = v306;
              *((_OWORD *)v197 + 4) = v307;
              *((_OWORD *)v197 + 5) = v206;
              *((_DWORD *)v197 + 70) = v177;
              *((_DWORD *)v197 + 71) = v182;
              *((_DWORD *)v197 + 72) = v181;
              *((_DWORD *)v197 + 73) = v178;
              *((_DWORD *)v197 + 74) = v179;
              *((_DWORD *)v197 + 75) = v180;
              *((_DWORD *)v197 + 76) = v190;
              *((_DWORD *)v197 + 77) = v184;
              *((_DWORD *)v197 + 78) = v176;
              v208 = v305;
              *(_OWORD *)(v197 + 316) = v304;
              *(_OWORD *)(v197 + 332) = v208;
              *(_OWORD *)(v197 + 348) = v207;
              v209 = v291;
              v210 = v292;
              v211 = v289;
              *(_OWORD *)(v197 + 364) = v290;
              *(_OWORD *)(v197 + 380) = v209;
              v212 = v293;
              v213 = v295;
              v214 = v296;
              *(_OWORD *)(v197 + 428) = v294;
              *(_OWORD *)(v197 + 444) = v213;
              *(_OWORD *)(v197 + 396) = v210;
              *(_OWORD *)(v197 + 412) = v212;
              v215 = v297;
              v216 = v299;
              v217 = v300;
              *(_OWORD *)(v197 + 492) = v298;
              *(_OWORD *)(v197 + 508) = v216;
              *(_OWORD *)(v197 + 460) = v214;
              *(_OWORD *)(v197 + 476) = v215;
              v218 = v301;
              v219 = v302;
              *(_QWORD *)(v197 + 572) = v303;
              *(_OWORD *)(v197 + 540) = v218;
              *(_OWORD *)(v197 + 556) = v219;
              *(_OWORD *)(v197 + 524) = v217;
              *((_DWORD *)v197 + 145) = v194;
              *((_DWORD *)v197 + 146) = v175;
              *((_DWORD *)v197 + 147) = v191;
              *((_DWORD *)v197 + 148) = v195;
              *((_DWORD *)v197 + 149) = v196;
              *((_DWORD *)v197 + 150) = v174;
              *((_DWORD *)v197 + 151) = v189;
              *((_DWORD *)v197 + 152) = v192;
              *((_DWORD *)v197 + 153) = v193;
              v220 = v288;
              *(_OWORD *)(v197 + 616) = v287;
              *(_OWORD *)(v197 + 632) = v220;
              *(_OWORD *)(v197 + 648) = v211;
              memcpy(v197 + 664, __src, 0x228uLL);
              v221 = v197;
              if (v168 == v170)
              {
                v222 = (_QWORD *)v3;
              }
              else
              {
                do
                {
                  v168 -= 1216;
                  v221 -= 1216;
                  memcpy(v221, v168, 0x4C0uLL);
                }
                while (v168 != v170);
                v222 = (_QWORD *)v3;
                v168 = *(char **)(v3 + 624);
              }
              v222[78] = v221;
              v131 = v197 + 1216;
              v222[79] = v131;
              v222[80] = &v283[1216 * v173];
              if (v168)
                operator delete(v168);
            }
            *(_QWORD *)(v3 + 632) = v131;
            ++v107;
            epoch = time[2].epoch;
            if (v107 >= 0x7E3F1F8FC7E3F1F9 * ((time[3].value - time[2].epoch) >> 4))
              goto LABEL_121;
          }
        }
        v131 = *(char **)(v3 + 632);
LABEL_121:
        v223 = *(_QWORD *)(v3 + 624);
        *(_DWORD *)(v3 + 568) = 678152731 * ((unint64_t)&v131[-v223] >> 6);
        *(_QWORD *)(v3 + 576) = v223;
        sub_1C98BBFA4((uint64_t)&v321);
        sub_1C98BBFA4((uint64_t)time);
        cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)v408);
        v224 = *(_QWORD *)(v3 + 392);
        v225 = (std::mutex *)(v224 + 24);
        std::mutex::lock((std::mutex *)(v224 + 24));
        LODWORD(v224) = *(_DWORD *)(v224 + 160);
        std::mutex::unlock(v225);
        *(_BYTE *)(v3 + 432) = (int)v224 > 0;
        *(_BYTE *)(v3 + 584) = (int)v224 > 0;
        v226 = (unsigned int *)(v3 + 648);
        if ((int)v224 < 1)
        {
          atomic_store(0, v226);
          v2 = v264;
          v51 = v265;
          v30 = v263;
        }
        else
        {
          v2 = v264;
          v51 = v265;
          v30 = v263;
          do
          {
            v227 = __ldaxr(v226);
            v228 = v227 + 1;
          }
          while (__stlxr(v227 + 1, v226));
          if (-858993459 * v228 <= 0x33333333)
          {
            v229 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
            if ((v229 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
            {
              qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
              __cxa_guard_release(&qword_1ED52ACD0);
            }
            v230 = qword_1ED52ACE0;
            if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(time[0].value) = 67109120;
              HIDWORD(time[0].value) = v228;
              _os_log_impl(&dword_1C9870000, v230, OS_LOG_TYPE_DEFAULT, "Secondary processing trigger has been true for %u consecutive frames without CVAFaceTrackingLiteProcessSecondary() being called", (uint8_t *)time, 8u);
            }
          }
        }
LABEL_129:
        kdebug_trace();
        v231 = (unint64_t *)&v51->__shared_owners_;
        do
          v232 = __ldaxr(v231);
        while (__stlxr(v232 - 1, v231));
        if (!v232)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
        v31 = *v2;
        if (v262)
          goto LABEL_143;
        goto LABEL_134;
      }
LABEL_171:
      abort();
    }
    if (v47 == 1)
    {
      *(_OWORD *)&time[0].value = *v25;
      time[0].epoch = *(_QWORD *)(v10 + 40);
      Seconds = CMTimeGetSeconds(time);
      goto LABEL_40;
    }
LABEL_175:
    sub_1C98CFB60();
    goto LABEL_176;
  }
  v28 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
  if ((v28 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
  {
    qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
    __cxa_guard_release(&qword_1ED52ACD0);
  }
  v29 = qword_1ED52ACE0;
  if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_ERROR))
  {
    LOWORD(time[0].value) = 0;
    _os_log_error_impl(&dword_1C9870000, v29, OS_LOG_TYPE_ERROR, "invalid FaceKit input parameters", (uint8_t *)time, 2u);
  }
  v30 = 0;
  v31 = *v2;
LABEL_134:
  if (*(_BYTE *)(v31 + 440))
  {
    v233 = *(std::__shared_weak_count **)(v31 + 424);
    if (v233)
    {
      v234 = (unint64_t *)&v233->__shared_owners_;
      do
        v235 = __ldaxr(v234);
      while (__stlxr(v235 - 1, v234));
      if (!v235)
      {
        ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
        std::__shared_weak_count::__release_weak(v233);
      }
    }
    *(_BYTE *)(v31 + 440) = 0;
    v31 = *v2;
  }
  if (*(_BYTE *)(v31 + 592))
    *(_BYTE *)(v31 + 592) = 0;
LABEL_143:
  memset(v414, 0, 168);
  v412 = 0u;
  v413 = 0u;
  memset(time, 0, sizeof(time));
  cva::DictionaryHandler::DictionaryHandler((cva::DictionaryHandler *)&time[0].timescale);
  LODWORD(time[2].value) = 0;
  time[1].value = 0x7FF8000000000000;
  memset(&time[2].timescale, 0, 40);
  time[4].value = (CMTimeValue)&off_1E8295050;
  *(_QWORD *)&time[4].timescale = 0x100000001;
  *(CMTimeEpoch *)((char *)&time[4].epoch + 4) = 0;
  *(CMTimeValue *)((char *)&time[5].value + 4) = 0x3F80000000000000;
  *(_QWORD *)&time[5].flags = 0;
  LODWORD(time[4].epoch) = 1065353216;
  HIDWORD(time[5].epoch) = 0;
  *(_OWORD *)&time[6].epoch = 0x3F80000000000000uLL;
  *(_OWORD *)&time[7].timescale = 0x3F80000000000000uLL;
  *(_OWORD *)&time[6].value = (unint64_t)v266;
  LODWORD(v412) = 0;
  *((_QWORD *)&v412 + 1) = 0;
  *(_QWORD *)&v413 = &off_1E8295050;
  *((_QWORD *)&v413 + 1) = 0x100000001;
  *(_QWORD *)&v414[4] = 0;
  *(_QWORD *)&v414[12] = 0x3F80000000000000;
  *(_QWORD *)&v414[20] = 0;
  *(_DWORD *)v414 = 1065353216;
  *(_DWORD *)&v414[28] = 0;
  *(_QWORD *)&v414[48] = 0x3F80000000000000;
  *(_QWORD *)&v414[56] = 0;
  *(_QWORD *)&v414[64] = 0x3F80000000000000;
  *(_OWORD *)&v414[32] = (unint64_t)v266;
  *(_DWORD *)&v414[80] = 0;
  *(_QWORD *)&v414[72] = 0;
  v414[152] = 0;
  v414[156] = 0;
  v414[158] = 0;
  memset(&v414[100], 0, 45);
  *(_WORD *)&v414[160] = 1;
  v414[162] = 0;
  *(_QWORD *)v31 = time[0].value;
  cva::DictionaryHandler::operator=();
  v236 = *(_OWORD *)&time[1].epoch;
  *(_OWORD *)(v31 + 24) = *(_OWORD *)&time[1].value;
  *(_OWORD *)(v31 + 40) = v236;
  v237 = *(_OWORD *)&time[2].timescale;
  time[2].epoch = 0;
  *(_QWORD *)&time[2].timescale = 0;
  v238 = *(std::__shared_weak_count **)(v31 + 64);
  *(_OWORD *)(v31 + 56) = v237;
  if (v238)
  {
    v239 = (unint64_t *)&v238->__shared_owners_;
    do
      v240 = __ldaxr(v239);
    while (__stlxr(v240 - 1, v239));
    if (!v240)
    {
      ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
      std::__shared_weak_count::__release_weak(v238);
    }
  }
  v241 = *(_OWORD *)&time[3].value;
  *(_QWORD *)&time[3].timescale = 0;
  time[3].value = 0;
  v242 = *(std::__shared_weak_count **)(v31 + 80);
  *(_OWORD *)(v31 + 72) = v241;
  if (v242)
  {
    v243 = (unint64_t *)&v242->__shared_owners_;
    do
      v244 = __ldaxr(v243);
    while (__stlxr(v244 - 1, v243));
    if (!v244)
    {
      ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
      std::__shared_weak_count::__release_weak(v242);
    }
  }
  v245 = *(__CVBuffer **)(v31 + 88);
  if (v245)
  {
    CVPixelBufferRelease(v245);
    *(_QWORD *)(v31 + 88) = 0;
  }
  *(_QWORD *)(v31 + 88) = time[3].epoch;
  time[3].epoch = 0;
  *(_QWORD *)(v31 + 104) = *(_QWORD *)&time[4].timescale;
  if ((CMTime *)v31 != time)
  {
    v246 = *(_OWORD *)&time[4].epoch;
    v247 = *(_OWORD *)&time[5].timescale;
    *(_DWORD *)(v31 + 144) = time[6].value;
    *(_OWORD *)(v31 + 112) = v246;
    *(_OWORD *)(v31 + 128) = v247;
    v248 = *(_OWORD *)((char *)&time[6].value + 4);
    v249 = *(_OWORD *)((char *)&time[6].epoch + 4);
    *(_DWORD *)(v31 + 180) = time[7].flags;
    *(_OWORD *)(v31 + 164) = v249;
    *(_OWORD *)(v31 + 148) = v248;
    v250 = time[7].epoch;
    *(_DWORD *)(v31 + 192) = v412;
    *(_QWORD *)(v31 + 184) = v250;
  }
  v251 = *(__CVBuffer **)(v31 + 200);
  if (v251)
  {
    CVPixelBufferRelease(v251);
    *(_QWORD *)(v31 + 200) = 0;
  }
  *(_QWORD *)(v31 + 200) = *((_QWORD *)&v412 + 1);
  *((_QWORD *)&v412 + 1) = 0;
  *(_QWORD *)(v31 + 216) = *((_QWORD *)&v413 + 1);
  if ((CMTime *)v31 != time)
  {
    v252 = *(_OWORD *)v414;
    v253 = *(_OWORD *)&v414[16];
    *(_DWORD *)(v31 + 256) = *(_DWORD *)&v414[32];
    *(_OWORD *)(v31 + 224) = v252;
    *(_OWORD *)(v31 + 240) = v253;
    v254 = *(_OWORD *)&v414[36];
    v255 = *(_OWORD *)&v414[52];
    *(_DWORD *)(v31 + 292) = *(_DWORD *)&v414[68];
    *(_OWORD *)(v31 + 276) = v255;
    *(_OWORD *)(v31 + 260) = v254;
    v256 = *(_QWORD *)&v414[72];
    *(_DWORD *)(v31 + 304) = *(_DWORD *)&v414[80];
    *(_QWORD *)(v31 + 296) = v256;
  }
  *(_OWORD *)(v31 + 312) = *(_OWORD *)&v414[88];
  v257 = *(void **)(v31 + 328);
  if (v257)
  {
    *(_QWORD *)(v31 + 336) = v257;
    operator delete(v257);
    *(_QWORD *)(v31 + 328) = 0;
    *(_QWORD *)(v31 + 336) = 0;
    *(_QWORD *)(v31 + 344) = 0;
  }
  *(_QWORD *)(v31 + 328) = *(_QWORD *)&v414[104];
  *(_QWORD *)(v31 + 336) = *(_QWORD *)&v414[112];
  *(_QWORD *)(v31 + 344) = *(_QWORD *)&v414[120];
  memset(&v414[104], 0, 40);
  v258 = *(std::__shared_weak_count **)(v31 + 360);
  *(_OWORD *)(v31 + 352) = *(_OWORD *)&v414[128];
  if (v258)
  {
    v259 = (unint64_t *)&v258->__shared_owners_;
    do
      v260 = __ldaxr(v259);
    while (__stlxr(v260 - 1, v259));
    if (!v260)
    {
      ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
      std::__shared_weak_count::__release_weak(v258);
    }
  }
  v261 = *(_OWORD *)&v414[144];
  *(_DWORD *)(v31 + 383) = *(_DWORD *)&v414[159];
  *(_OWORD *)(v31 + 368) = v261;
  sub_1C98E5C3C((uint64_t)time);
  if (v30)
    return 0;
  else
    return 4294944346;
}

void sub_1C9878BAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;

  sub_1C98E5C3C(v31);
  MEMORY[0x1CAA44AFC](a31, 0x10E0C40B4202082);
  _Unwind_Resume(a1);
}

uint64_t CVAFaceTrackingLiteProcessSecondary(uint64_t a1)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned __int8 v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint8_t buf[8];
  std::__shared_weak_count *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 4294944343;
  v1 = **(_QWORD **)(a1 + 16);
  v2 = (unsigned int *)(*(_QWORD *)v1 + 648);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(0, v2));
  v4 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
  {
    qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
    __cxa_guard_release(&qword_1ED52ACD0);
  }
  v5 = qword_1ED52ACE0;
  if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v3;
    _os_log_impl(&dword_1C9870000, v5, OS_LOG_TYPE_INFO, "processSecondary called after %u frame(s)", buf, 8u);
  }
  v6 = *(_QWORD *)(*(_QWORD *)v1 + 392);
  *(_QWORD *)buf = 0;
  v18 = 0;
  v7 = v6 + 8;
  while ((sub_1C991BAEC(v7, buf, 0, 0) & 1) != 0)
  {
    v15 = 0;
    v16 = 0;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)buf + 16))(*(_QWORD *)buf, &v15);
    v8 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  v11 = v18;
  if (v18)
  {
    v12 = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return 0;
}

uint64_t CVAFaceTrackingLiteGetOutput(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = ***(_QWORD ***)(result + 16);
    if (*(_BYTE *)(v1 + 592))
      return v1 + 448;
    else
      return 0;
  }
  return result;
}

uint64_t CVAFaceTrackingLiteGetOpaqueOutput(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = ***(_QWORD ***)(result + 16);
    if (*(_BYTE *)(v1 + 440))
      return v1 + 416;
    else
      return 0;
  }
  return result;
}

uint64_t CVAFaceTrackingLiteCopyDecodedOutput(unsigned __int8 *a1, __CFDictionary **a2, _BYTE *a3)
{
  uint64_t result;
  const __CFAllocator *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  const __CFDictionary *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  double *v15;
  float v16;
  float v17;
  float v18;
  float v19;
  const __CFDictionary *DictionaryRepresentation;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  cva::ItemHandler *v24;
  const __CFData *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  float v33;
  float v34;
  float v35;
  float v36;
  const __CFDictionary *v37;
  __int128 v38;
  _OWORD *v39;
  __int128 v40;
  UInt8 *MutableBytePtr;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  float32x2x2_t v52;
  unint64_t v53;
  __int128 v54;
  uint64_t v55;
  UInt8 *v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  float32x2x2_t v67;
  unint64_t v68;
  __int128 v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  unsigned __int8 v73;
  NSObject *v74;
  __CFDictionary *Mutable;
  unsigned __int8 *v77;
  _BYTE v79[16];
  _BYTE v80[16];
  _BYTE v81[16];
  _BYTE v82[16];
  _BYTE memptr[32];
  int v84;
  _BYTE v85[16];
  uint64_t v86;
  int v87;
  _QWORD v88[2];
  uint64_t v89;
  int v90;
  unsigned __int8 uu[16];
  __int128 v92;
  _OWORD v93[2];
  __CFData *v94;
  uint64_t v95;
  CGRect v96;
  CGRect v97;

  v95 = *MEMORY[0x1E0C80C00];
  result = 4294944343;
  if (a1 && a2 && a3 && !*a2)
  {
    v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    cva::DictionaryHandler::DictionaryHandler((cva::DictionaryHandler *)v82, Mutable);
    cva::DictionaryHandler::DictionaryHandler((cva::DictionaryHandler *)&v89);
    v6 = *((_DWORD *)a1 + 3);
    *((_QWORD *)&v92 + 1) = 8;
    *(_QWORD *)memptr = 0;
    v7 = *(_QWORD *)(a1 + 4);
    malloc_type_posix_memalign((void **)memptr, 0x20uLL, 0x20uLL, 0x49090899uLL);
    v8 = *(_QWORD *)memptr;
    *(_QWORD *)&v92 = *(_QWORD *)memptr;
    LODWORD(v93[0]) = 3;
    **(_QWORD **)memptr = v7;
    *(_DWORD *)(v8 + 8) = v6;
    cva::ItemHandler::createVector<unsigned int>();
    free((void *)v92);
    cva::DictionaryHandler::setItem((cva::DictionaryHandler *)&v89, CFSTR("version"), (const cva::ItemHandler *)memptr);
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)memptr);
    cva::ItemHandler::ItemHandler();
    cva::DictionaryHandler::setItem((cva::DictionaryHandler *)v82, CFSTR("meta"), (const cva::ItemHandler *)&v92);
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v92);
    cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)&v89);
    v9 = (uint64_t)(*((double *)a1 + 2) * 1000.0 * 1000.0);
    v92 = 0uLL;
    *(_QWORD *)&v93[0] = 0;
    CMTimeMake((CMTime *)&v92, v9, 1000000);
    *(_OWORD *)memptr = v92;
    *(_QWORD *)&memptr[16] = *(_QWORD *)&v93[0];
    v10 = CMTimeCopyAsDictionary((CMTime *)memptr, 0);
    cva::DictionaryHandler::DictionaryHandler((cva::DictionaryHandler *)v81, v10);
    CFRelease(v10);
    cva::ItemHandler::ItemHandler();
    cva::DictionaryHandler::setItem((cva::DictionaryHandler *)v82, CFSTR("timestamp"), (const cva::ItemHandler *)&v92);
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v92);
    v11 = *(_OWORD *)(a1 + 88);
    v92 = *(_OWORD *)(a1 + 72);
    v93[0] = v11;
    LODWORD(v93[1]) = *((_DWORD *)a1 + 26);
    v12 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)memptr = *(_OWORD *)(a1 + 24);
    *(_OWORD *)&memptr[16] = v12;
    v84 = *((_DWORD *)a1 + 14);
    v89 = *(_QWORD *)(a1 + 60);
    v90 = *((_DWORD *)a1 + 17);
    sub_1C98E63A8((cva::DictionaryHandler *)v80, &v92, memptr, &v89);
    cva::ItemHandler::ItemHandler();
    cva::DictionaryHandler::setItem((cva::DictionaryHandler *)v82, CFSTR("rgb_camera"), (const cva::ItemHandler *)&v92);
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v92);
    if (*a1 | a1[2])
    {
      cva::DictionaryHandler::DictionaryHandler((cva::DictionaryHandler *)memptr);
      if (*a1)
      {
        LOBYTE(v89) = a1[1] != 0;
        cva::ItemHandler::createValue<BOOL>();
        cva::DictionaryHandler::setItem((cva::DictionaryHandler *)memptr, CFSTR("image_too_dark"), (const cva::ItemHandler *)&v92);
        cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v92);
      }
      if (a1[2])
      {
        LOBYTE(v89) = a1[3] != 0;
        cva::ItemHandler::createValue<BOOL>();
        cva::DictionaryHandler::setItem((cva::DictionaryHandler *)memptr, CFSTR("sensor_covered"), (const cva::ItemHandler *)&v92);
        cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v92);
      }
      cva::ItemHandler::ItemHandler();
      cva::DictionaryHandler::setItem((cva::DictionaryHandler *)v82, CFSTR("data_failure"), (const cva::ItemHandler *)&v92);
      cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v92);
      cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)memptr);
    }
    v13 = *((unsigned int *)a1 + 27);
    v14 = *((_QWORD *)a1 + 14);
    cva::ArrayHandler::ArrayHandler((cva::ArrayHandler *)uu);
    if ((_DWORD)v13)
    {
      v15 = (double *)(v14 + 16);
      do
      {
        v16 = *(v15 - 1);
        v17 = *v15;
        v18 = v15[1];
        v19 = v15[2];
        LODWORD(v86) = *((_DWORD *)v15 - 4);
        v88[0] = 0;
        cva::DictionaryHandler::DictionaryHandler((cva::DictionaryHandler *)&v89);
        cva::ItemHandler::createValue<float>();
        cva::DictionaryHandler::setItem((cva::DictionaryHandler *)&v89, CFSTR("AngleInfoRoll"), (const cva::ItemHandler *)&v92);
        cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v92);
        cva::ItemHandler::createValue<unsigned long long>();
        cva::DictionaryHandler::setItem((cva::DictionaryHandler *)&v89, CFSTR("FaceID"), (const cva::ItemHandler *)&v92);
        cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v92);
        v96.origin.x = v16;
        v96.origin.y = v17;
        v96.size.width = v18;
        v96.size.height = v19;
        DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v96);
        cva::DictionaryHandler::DictionaryHandler((cva::DictionaryHandler *)&v92, DictionaryRepresentation);
        CFRelease(DictionaryRepresentation);
        cva::ItemHandler::ItemHandler();
        cva::DictionaryHandler::setItem((cva::DictionaryHandler *)&v89, CFSTR("Rect"), (const cva::ItemHandler *)memptr);
        cva::ItemHandler::~ItemHandler((cva::ItemHandler *)memptr);
        cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)&v92);
        cva::ItemHandler::ItemHandler();
        cva::ArrayHandler::addItem((cva::ArrayHandler *)uu, (const cva::ItemHandler *)&v92);
        cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v92);
        cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)&v89);
        v15 += 5;
        --v13;
      }
      while (v13);
    }
    cva::ItemHandler::ItemHandler();
    cva::DictionaryHandler::setItem((cva::DictionaryHandler *)v82, CFSTR("DetectedFacesArray"), (const cva::ItemHandler *)&v92);
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v92);
    cva::ArrayHandler::~ArrayHandler((cva::ArrayHandler *)uu);
    v21 = *((_DWORD *)a1 + 30);
    v77 = a1;
    v22 = *((_QWORD *)a1 + 16);
    cva::ArrayHandler::ArrayHandler((cva::ArrayHandler *)v79);
    if (v21)
    {
      v23 = 0;
      do
      {
        v32 = (_OWORD *)(v22 + v23);
        cva::DictionaryHandler::DictionaryHandler((cva::DictionaryHandler *)v85);
        cva::ItemHandler::ItemHandler();
        cva::DictionaryHandler::setItem((cva::DictionaryHandler *)v85, CFSTR("timestamp"), (const cva::ItemHandler *)&v92);
        cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v92);
        cva::ItemHandler::ItemHandler();
        cva::DictionaryHandler::setItem((cva::DictionaryHandler *)v85, CFSTR("rgb_camera"), (const cva::ItemHandler *)&v92);
        cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v92);
        v33 = *(double *)(v22 + v23 + 8);
        v34 = *(double *)(v22 + v23 + 16);
        v35 = *(double *)(v22 + v23 + 24);
        v36 = *(double *)(v22 + v23 + 32);
        v97.origin.x = v33;
        v97.origin.y = v34;
        v97.size.width = v35;
        v97.size.height = v36;
        v37 = CGRectCreateDictionaryRepresentation(v97);
        cva::DictionaryHandler::DictionaryHandler((cva::DictionaryHandler *)&v89, v37);
        CFRelease(v37);
        cva::ItemHandler::ItemHandler();
        cva::DictionaryHandler::setItem((cva::DictionaryHandler *)v85, CFSTR("Rect"), (const cva::ItemHandler *)&v92);
        cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v92);
        cva::ItemHandler::createValue<float>();
        cva::DictionaryHandler::setItem((cva::DictionaryHandler *)v85, CFSTR("AngleInfoRoll"), (const cva::ItemHandler *)&v92);
        cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v92);
        cva::ItemHandler::createValue<float>();
        cva::DictionaryHandler::setItem((cva::DictionaryHandler *)v85, CFSTR("confidence"), (const cva::ItemHandler *)&v92);
        cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v92);
        cva::ItemHandler::createValue<int>();
        cva::DictionaryHandler::setItem((cva::DictionaryHandler *)v85, CFSTR("failure_type"), (const cva::ItemHandler *)&v92);
        cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v92);
        v38 = *(_OWORD *)(v22 + v23 + 44);
        memset(v93, 0, 21);
        *(_OWORD *)uu = v38;
        v92 = 0u;
        uuid_unparse_upper(uu, (char *)&v92);
        v39 = operator new(0x28uLL);
        *(_QWORD *)memptr = v39;
        *(_OWORD *)&memptr[8] = xmmword_1C9927430;
        v40 = v93[0];
        *v39 = v92;
        v39[1] = v40;
        *((_DWORD *)v39 + 8) = v93[1];
        *((_BYTE *)v39 + 36) = 0;
        cva::ItemHandler::createValue<std::string>();
        cva::DictionaryHandler::setItem((cva::DictionaryHandler *)v85, CFSTR("face_id"), (const cva::ItemHandler *)&v92);
        cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v92);
        if ((memptr[23] & 0x80000000) != 0)
          operator delete(*(void **)memptr);
        cva::DictionaryHandler::DictionaryHandler((cva::DictionaryHandler *)memptr);
        v94 = 0;
        memset(v93, 0, sizeof(v93));
        v92 = 0u;
        v94 = CFDataCreateMutable(v5, 204);
        CFDataSetLength(v94, 204);
        MutableBytePtr = CFDataGetMutableBytePtr(v94);
        *(_OWORD *)MutableBytePtr = v32[4];
        v42 = v32[8];
        v44 = v32[5];
        v43 = v32[6];
        *((_OWORD *)MutableBytePtr + 3) = v32[7];
        *((_OWORD *)MutableBytePtr + 4) = v42;
        *((_OWORD *)MutableBytePtr + 1) = v44;
        *((_OWORD *)MutableBytePtr + 2) = v43;
        v45 = v32[12];
        v47 = v32[9];
        v46 = v32[10];
        *((_OWORD *)MutableBytePtr + 7) = v32[11];
        *((_OWORD *)MutableBytePtr + 8) = v45;
        *((_OWORD *)MutableBytePtr + 5) = v47;
        *((_OWORD *)MutableBytePtr + 6) = v46;
        v49 = v32[14];
        v48 = v32[15];
        v50 = v32[13];
        *(_OWORD *)(MutableBytePtr + 188) = *(_OWORD *)((char *)v32 + 252);
        *((_OWORD *)MutableBytePtr + 10) = v49;
        *((_OWORD *)MutableBytePtr + 11) = v48;
        *((_OWORD *)MutableBytePtr + 9) = v50;
        if ((_OWORD *)((char *)v32 + 268) == &v92)
        {
          *(_QWORD *)((char *)&v92 + 4) = *(_QWORD *)(v22 + v23 + 272);
        }
        else
        {
          *(_QWORD *)&v92 = *(_QWORD *)((char *)v32 + 268);
          DWORD2(v92) = *(_DWORD *)(v22 + v23 + 276);
        }
        v51 = v22 + v23;
        v52 = *(float32x2x2_t *)(v22 + v23 + 280);
        v53 = vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL).u64[0];
        vst2_f32((float *)&v92 + 3, v52);
        v54 = *(_OWORD *)(v22 + v23 + 296);
        v55 = *(_QWORD *)(v22 + v23 + 308);
        HIDWORD(v93[1]) = *(_QWORD *)(v22 + v23 + 304);
        *((_QWORD *)&v54 + 1) = v55;
        *(_OWORD *)((char *)v93 + 12) = v54;
        sub_1C98FDFB0((cva::DictionaryHandler *)v88, (uint64_t)&v92);
        if (v94)
          CFRelease(v94);
        cva::ItemHandler::ItemHandler();
        cva::DictionaryHandler::setItem((cva::DictionaryHandler *)memptr, CFSTR("animation"), (const cva::ItemHandler *)&v92);
        cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v92);
        cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)v88);
        v92 = *(_OWORD *)(v51 + 316);
        v93[0] = *(_OWORD *)(v51 + 332);
        LODWORD(v93[1]) = *(_DWORD *)(v51 + 348);
        v86 = *(_QWORD *)(v51 + 352);
        v87 = *(_DWORD *)(v51 + 360);
        sub_1C98E64D0((cva::DictionaryHandler *)v88, &v92, &v86);
        cva::ItemHandler::ItemHandler();
        cva::DictionaryHandler::setItem((cva::DictionaryHandler *)memptr, CFSTR("pose"), (const cva::ItemHandler *)&v92);
        cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v92);
        cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)v88);
        cva::ItemHandler::ItemHandler();
        cva::DictionaryHandler::setItem((cva::DictionaryHandler *)v85, CFSTR("raw_data"), (const cva::ItemHandler *)&v92);
        cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v92);
        cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)memptr);
        cva::DictionaryHandler::DictionaryHandler((cva::DictionaryHandler *)v88);
        v94 = 0;
        memset(v93, 0, sizeof(v93));
        v92 = 0u;
        v94 = CFDataCreateMutable(v5, 204);
        CFDataSetLength(v94, 204);
        v56 = CFDataGetMutableBytePtr(v94);
        *(_OWORD *)v56 = *(_OWORD *)(v51 + 364);
        v57 = *(_OWORD *)(v51 + 428);
        v59 = *(_OWORD *)(v51 + 380);
        v58 = *(_OWORD *)(v51 + 396);
        *((_OWORD *)v56 + 3) = *(_OWORD *)(v51 + 412);
        *((_OWORD *)v56 + 4) = v57;
        *((_OWORD *)v56 + 1) = v59;
        *((_OWORD *)v56 + 2) = v58;
        v60 = *(_OWORD *)(v51 + 492);
        v62 = *(_OWORD *)(v51 + 444);
        v61 = *(_OWORD *)(v51 + 460);
        *((_OWORD *)v56 + 7) = *(_OWORD *)(v51 + 476);
        *((_OWORD *)v56 + 8) = v60;
        *((_OWORD *)v56 + 5) = v62;
        *((_OWORD *)v56 + 6) = v61;
        v64 = *(_OWORD *)(v51 + 524);
        v63 = *(_OWORD *)(v51 + 540);
        v65 = *(_OWORD *)(v51 + 508);
        *(_OWORD *)(v56 + 188) = *(_OWORD *)(v51 + 552);
        *((_OWORD *)v56 + 10) = v64;
        *((_OWORD *)v56 + 11) = v63;
        *((_OWORD *)v56 + 9) = v65;
        if ((__int128 *)(v51 + 568) == &v92)
        {
          *(_QWORD *)((char *)&v92 + 4) = *(_QWORD *)(v22 + v23 + 572);
        }
        else
        {
          *(_QWORD *)&v92 = *(_QWORD *)(v51 + 568);
          DWORD2(v92) = *(_DWORD *)(v22 + v23 + 576);
        }
        v66 = v22 + v23;
        v67 = *(float32x2x2_t *)(v22 + v23 + 580);
        v68 = vextq_s8((int8x16_t)v67, (int8x16_t)v67, 8uLL).u64[0];
        vst2_f32((float *)&v92 + 3, v67);
        v69 = *(_OWORD *)(v22 + v23 + 596);
        v70 = *(_QWORD *)(v22 + v23 + 608);
        HIDWORD(v93[1]) = *(_QWORD *)(v22 + v23 + 604);
        *((_QWORD *)&v69 + 1) = v70;
        *(_OWORD *)((char *)v93 + 12) = v69;
        sub_1C98FDFB0((cva::DictionaryHandler *)memptr, (uint64_t)&v92);
        if (v94)
          CFRelease(v94);
        cva::ItemHandler::ItemHandler();
        cva::DictionaryHandler::setItem((cva::DictionaryHandler *)v88, CFSTR("animation"), (const cva::ItemHandler *)&v92);
        cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v92);
        cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)memptr);
        v92 = *(_OWORD *)(v66 + 616);
        v93[0] = *(_OWORD *)(v66 + 632);
        LODWORD(v93[1]) = *(_DWORD *)(v66 + 648);
        v86 = *(_QWORD *)(v66 + 652);
        v87 = *(_DWORD *)(v66 + 660);
        sub_1C98E64D0((cva::DictionaryHandler *)memptr, &v92, &v86);
        cva::ItemHandler::ItemHandler();
        cva::DictionaryHandler::setItem((cva::DictionaryHandler *)v88, CFSTR("pose"), (const cva::ItemHandler *)&v92);
        cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v92);
        cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)memptr);
        cva::DictionaryHandler::DictionaryHandler((cva::DictionaryHandler *)&v86);
        v24 = CFDataCreate(0, (const UInt8 *)(v66 + 664), 528);
        cva::ItemHandler::createData(v24, v25);
        cva::DictionaryHandler::setItem((cva::DictionaryHandler *)&v86, CFSTR("landmarks"), (const cva::ItemHandler *)&v92);
        cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v92);
        v26 = *(_DWORD *)(v66 + 1200);
        v27 = *(_DWORD *)(v66 + 1212);
        v28 = *(_QWORD *)(v66 + 1192);
        v29 = *(_QWORD *)(v66 + 1204);
        *((_QWORD *)&v92 + 1) = 8;
        *(_QWORD *)memptr = 0;
        malloc_type_posix_memalign((void **)memptr, 0x20uLL, 0x20uLL, 0x49090899uLL);
        v30 = *(_QWORD *)memptr;
        *(_QWORD *)&v92 = *(_QWORD *)memptr;
        LODWORD(v93[0]) = 3;
        **(_QWORD **)memptr = v28;
        *(_DWORD *)(v30 + 8) = v26;
        cva::ItemHandler::createVector<float>();
        free((void *)v92);
        cva::DictionaryHandler::setItem((cva::DictionaryHandler *)&v86, CFSTR("left_eye"), (const cva::ItemHandler *)memptr);
        cva::ItemHandler::~ItemHandler((cva::ItemHandler *)memptr);
        *((_QWORD *)&v92 + 1) = 8;
        *(_QWORD *)memptr = 0;
        malloc_type_posix_memalign((void **)memptr, 0x20uLL, 0x20uLL, 0x49090899uLL);
        v31 = *(_QWORD *)memptr;
        *(_QWORD *)&v92 = *(_QWORD *)memptr;
        LODWORD(v93[0]) = 3;
        **(_QWORD **)memptr = v29;
        *(_DWORD *)(v31 + 8) = v27;
        cva::ItemHandler::createVector<float>();
        free((void *)v92);
        cva::DictionaryHandler::setItem((cva::DictionaryHandler *)&v86, CFSTR("right_eye"), (const cva::ItemHandler *)memptr);
        cva::ItemHandler::~ItemHandler((cva::ItemHandler *)memptr);
        CFRelease(v24);
        cva::ItemHandler::ItemHandler();
        cva::DictionaryHandler::setItem((cva::DictionaryHandler *)v88, CFSTR("geometry"), (const cva::ItemHandler *)&v92);
        cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v92);
        cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)&v86);
        cva::ItemHandler::ItemHandler();
        cva::DictionaryHandler::setItem((cva::DictionaryHandler *)v85, CFSTR("smooth_data"), (const cva::ItemHandler *)&v92);
        cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v92);
        cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)v88);
        cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)&v89);
        cva::ItemHandler::ItemHandler();
        cva::ArrayHandler::addItem((cva::ArrayHandler *)v79, (const cva::ItemHandler *)&v92);
        cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v92);
        cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)v85);
        v23 += 1216;
      }
      while (1216 * v21 != v23);
    }
    cva::ItemHandler::ItemHandler();
    cva::DictionaryHandler::setItem((cva::DictionaryHandler *)v82, CFSTR("tracked_faces"), (const cva::ItemHandler *)&v92);
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v92);
    cva::ArrayHandler::~ArrayHandler((cva::ArrayHandler *)v79);
    cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)v80);
    cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)v81);
    cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)v82);
    *a2 = Mutable;
    *a3 = v77[136];
    if (v77[136])
    {
      do
      {
        v71 = __ldaxr((unsigned int *)&unk_1EF921020);
        v72 = v71 + 1;
      }
      while (__stlxr(v71 + 1, (unsigned int *)&unk_1EF921020));
      if (-858993459 * v72 <= 0x33333333)
      {
        v73 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
        if ((v73 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
        {
          qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
          __cxa_guard_release(&qword_1ED52ACD0);
        }
        v74 = (id)qword_1ED52ACE0;
        if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(v92) = 67109120;
          DWORD1(v92) = v72;
          _os_log_impl(&dword_1C9870000, v74, OS_LOG_TYPE_DEFAULT, "Secondary processing trigger has been true for %u consecutive frames. CVAFaceTrackingLiteProcessSecondary() not called?", (uint8_t *)&v92, 8u);
        }

      }
      return 0;
    }
    else
    {
      result = 0;
      atomic_store(0, (unsigned int *)&unk_1EF921020);
    }
  }
  return result;
}

uint64_t CVAFaceTrackingGetTypeID()
{
  if (qword_1ED52ACE8 != -1)
    dispatch_once(&qword_1ED52ACE8, &unk_1E82961A0);
  return qword_1ED52ACF8;
}

uint64_t sub_1C9879B64()
{
  uint64_t result;

  qword_1ED52AD00 = 0;
  *(_QWORD *)algn_1ED52AD08 = "CVAFaceTracking";
  qword_1ED52AD10 = (uint64_t)sub_1C9879BC4;
  unk_1ED52AD18 = 0;
  qword_1ED52AD20 = (uint64_t)sub_1C9879BCC;
  unk_1ED52AD28 = 0;
  qword_1ED52AD30 = 0;
  unk_1ED52AD38 = sub_1C9879D3C;
  qword_1ED52AD40 = (uint64_t)sub_1C9879D88;
  result = _CFRuntimeRegisterClass();
  qword_1ED52ACF8 = result;
  return result;
}

uint64_t sub_1C9879BC4(uint64_t result)
{
  *(_QWORD *)(result + 16) = 0;
  return result;
}

void sub_1C9879BCC(uint64_t a1)
{
  unsigned __int8 v2;
  NSObject *v3;
  uint64_t v4;
  std::__thread_struct *v5;
  _QWORD *v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
  {
    qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
    __cxa_guard_release(&qword_1ED52ACD0);
  }
  v3 = qword_1ED52ACE0;
  if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_DEFAULT))
  {
    v8 = 134217984;
    v9 = a1;
    _os_log_impl(&dword_1C9870000, v3, OS_LOG_TYPE_DEFAULT, "Finalizing FaceTracking (%p).", (uint8_t *)&v8, 0xCu);
  }
  if (a1)
  {
    v4 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    v5 = (std::__thread_struct *)operator new();
    std::__thread_struct::__thread_struct(v5);
    v6 = (_QWORD *)operator new();
    *v6 = v5;
    v6[1] = v4;
    v7 = pthread_create((pthread_t *)&v8, 0, (void *(__cdecl *)(void *))sub_1C9879DD4, v6);
    if (v7)
    {
      std::__throw_system_error(v7, "thread constructor failed");
      sub_1C9879D3C();
    }
    else
    {
      std::thread::detach((std::thread *)&v8);
      std::thread::~thread((std::thread *)&v8);
      *(_QWORD *)(a1 + 16) = 0;
    }
  }
}

CFStringRef sub_1C9879D3C(const void *a1)
{
  const __CFAllocator *v2;
  CFAllocatorRef v3;

  v2 = CFGetAllocator(a1);
  v3 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CVAFaceTracking %p [%p]>"), a1, v3);
}

CFStringRef sub_1C9879D88(const void *a1)
{
  const __CFAllocator *v2;
  CFAllocatorRef v3;

  v2 = CFGetAllocator(a1);
  v3 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CVAFaceTracking %p [%p]>"), a1, v3);
}

uint64_t sub_1C9879DD4(uint64_t a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v2;
  const void *v3;
  uint64_t *v4;
  unsigned __int8 v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  const void *v24;
  uint64_t v25;
  uint64_t *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  uint8_t v31[16];

  v2 = std::__thread_local_data();
  v3 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    v5 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
    if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
    {
      qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
      __cxa_guard_release(&qword_1ED52ACD0);
    }
    v6 = (id)qword_1ED52ACE0;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v31 = 0;
      _os_log_impl(&dword_1C9870000, v6, OS_LOG_TYPE_DEFAULT, "~FaceKit", v31, 2u);
    }

    v7 = *v4;
    *v4 = 0;
    if (v7)
    {
      std::mutex::lock((std::mutex *)(v7 + 56));
      *(_BYTE *)(v7 + 168) = 1;
      std::mutex::unlock((std::mutex *)(v7 + 56));
      v8 = *(_QWORD *)(v7 + 8);
      v9 = **(_QWORD **)(v8 + 8);
      std::mutex::lock((std::mutex *)(v9 + 16));
      *(_BYTE *)(v9 + 128) = 1;
      std::mutex::unlock((std::mutex *)(v9 + 16));
      v10 = *(_QWORD *)(*(_QWORD *)(v8 + 8) + 24) - *(_QWORD *)(*(_QWORD *)(v8 + 8) + 16);
      if ((int)(v10 >> 4) >= 1)
      {
        v11 = 0;
        v12 = v10 & 0xFFFFFFFF0;
        do
        {
          sub_1C991F874(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 8) + 16) + v11), 1);
          v11 += 16;
        }
        while (v12 != v11);
      }
      *(_QWORD *)(v7 + 40) = &off_1E82943F8;
      if (*(_QWORD *)(v7 + 192))
      {
        v13 = *(_QWORD *)(v7 + 176);
        v14 = *(uint64_t **)(v7 + 184);
        v15 = *v14;
        *(_QWORD *)(v15 + 8) = *(_QWORD *)(v13 + 8);
        **(_QWORD **)(v13 + 8) = v15;
        *(_QWORD *)(v7 + 192) = 0;
        if (v14 != (uint64_t *)(v7 + 176))
        {
          do
          {
            v27 = (uint64_t *)v14[1];
            v28 = (std::__shared_weak_count *)v14[3];
            if (v28)
            {
              p_shared_owners = (unint64_t *)&v28->__shared_owners_;
              do
                v30 = __ldaxr(p_shared_owners);
              while (__stlxr(v30 - 1, p_shared_owners));
              if (!v30)
              {
                ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
                std::__shared_weak_count::__release_weak(v28);
              }
            }
            operator delete(v14);
            v14 = v27;
          }
          while (v27 != (uint64_t *)(v7 + 176));
        }
      }
      std::condition_variable::~condition_variable((std::condition_variable *)(v7 + 120));
      std::mutex::~mutex((std::mutex *)(v7 + 56));
      v16 = *(std::__shared_weak_count **)(v7 + 32);
      if (v16)
      {
        v17 = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v19 = *(std::__shared_weak_count **)(v7 + 16);
      if (v19)
      {
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v22 = *(uint64_t **)v7;
      *(_QWORD *)v7 = 0;
      if (v22)
      {
        v23 = sub_1C98B896C(v22);
        MEMORY[0x1CAA44AFC](v23, 0x20C4093837F09);
      }
      MEMORY[0x1CAA44AFC](v7, 0x10A0C401DB96910);
    }
    MEMORY[0x1CAA44AFC](v4, 0x20C4093837F09);
  }
  v24 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  if (v24)
  {
    v25 = MEMORY[0x1CAA44958]();
    MEMORY[0x1CAA44AFC](v25, 0x20C4093837F09);
  }
  MEMORY[0x1CAA44AFC](a1, 0x20C40A4A59CD2);
  return 0;
}

void sub_1C987A0EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::mutex *v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;

  *(_QWORD *)(v1 + 40) = &off_1E82943F8;
  if (*(_QWORD *)(v1 + 192))
  {
    v4 = *(_QWORD *)(v1 + 176);
    v5 = *(uint64_t **)(v1 + 184);
    v6 = *v5;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v6;
    *(_QWORD *)(v1 + 192) = 0;
    if (v5 != (uint64_t *)(v1 + 176))
    {
      do
      {
        v15 = (uint64_t *)v5[1];
        v16 = (std::__shared_weak_count *)v5[3];
        if (v16)
        {
          p_shared_owners = (unint64_t *)&v16->__shared_owners_;
          do
            v18 = __ldaxr(p_shared_owners);
          while (__stlxr(v18 - 1, p_shared_owners));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        operator delete(v5);
        v5 = v15;
      }
      while (v15 != (uint64_t *)(v1 + 176));
    }
  }
  std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 120));
  std::mutex::~mutex(v2);
  v7 = *(std::__shared_weak_count **)(v1 + 32);
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = *(std::__shared_weak_count **)(v1 + 16);
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = *(uint64_t **)v1;
  *(_QWORD *)v1 = 0;
  if (v13)
  {
    v14 = sub_1C98B896C(v13);
    MEMORY[0x1CAA44AFC](v14, 0x20C4093837F09);
  }
  _Unwind_Resume(a1);
}

uint64_t CVAFaceTrackingGetAPIVersion()
{
  return 38;
}

_QWORD *sub_1C987A234(_QWORD *result, uint64_t a2, unint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;

  if (a3)
  {
    v3 = result;
    v4 = *((char *)result + 23);
    if (v4 < 0)
    {
      v6 = (_QWORD *)*result;
      v5 = result[1];
    }
    else
    {
      v5 = *((unsigned __int8 *)result + 23);
      v6 = result;
    }
    if (v5 - a2 >= a3)
      v7 = a3;
    else
      v7 = v5 - a2;
    if (v5 - a2 > a3)
    {
      result = memmove((char *)v6 + a2, (char *)v6 + a2 + v7, v5 - a2 - v7);
      LOBYTE(v4) = *((_BYTE *)v3 + 23);
    }
    v8 = v5 - v7;
    if ((v4 & 0x80) != 0)
      v3[1] = v8;
    else
      *((_BYTE *)v3 + 23) = v8 & 0x7F;
    *((_BYTE *)v6 + v8) = 0;
  }
  return result;
}

uint64_t CVAFaceTrackingProcess(uint64_t a1, const __CFDictionary *a2)
{
  unsigned __int8 v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  NSObject *v9;
  uint8_t v10[16];
  uint8_t buf[2];
  __int16 v12;

  if (!a1)
  {
    v3 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
    if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
    {
      qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
      __cxa_guard_release(&qword_1ED52ACD0);
    }
    v4 = qword_1ED52ACE0;
    if (!os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_ERROR))
      return 4294944343;
    v12 = 0;
    v5 = "invalid argument for handle.";
    v6 = (uint8_t *)&v12;
    goto LABEL_16;
  }
  if (!a2)
  {
    v7 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
    {
      qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
      __cxa_guard_release(&qword_1ED52ACD0);
    }
    v4 = qword_1ED52ACE0;
    if (!os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_ERROR))
      return 4294944343;
    *(_WORD *)buf = 0;
    v5 = "invalid argument for params.";
    v6 = buf;
LABEL_16:
    _os_log_error_impl(&dword_1C9870000, v4, OS_LOG_TYPE_ERROR, v5, v6, 2u);
    return 4294944343;
  }
  if ((sub_1C98E3DA4(*(CGPoint **)(a1 + 16), a2) & 1) != 0)
    return 0;
  v8 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
  {
    qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
    __cxa_guard_release(&qword_1ED52ACD0);
  }
  v9 = qword_1ED52ACE0;
  if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v10 = 0;
    _os_log_error_impl(&dword_1C9870000, v9, OS_LOG_TYPE_ERROR, "frame was not processed.", v10, 2u);
  }
  return 4294944346;
}

uint64_t CVAFaceTrackingCopySemantics(__CFDictionary *a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  const void *Dictionary;
  uint64_t v5;
  unsigned __int8 v6;
  NSObject *v7;
  unsigned __int8 v8;
  NSObject *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  cva::DictionaryHandler *v13[2];
  uint8_t buf[16];

  if (a2)
  {
    cva::DictionaryHandler::DictionaryHandler((cva::DictionaryHandler *)buf, a1);
    sub_1C98D2878(v13, (cva::DictionaryHandler *)buf);
    v3 = (std::__shared_weak_count *)v13[1];
    if (v13[0])
    {
      Dictionary = (const void *)cva::DictionaryHandler::getDictionary(v13[0]);
      *a2 = Dictionary;
      CFRetain(Dictionary);
      v5 = 0;
      if (!v3)
      {
LABEL_17:
        cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)buf);
        return v5;
      }
    }
    else
    {
      v8 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
      if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
      {
        qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
        __cxa_guard_release(&qword_1ED52ACD0);
      }
      v9 = qword_1ED52ACE0;
      if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v13[0]) = 0;
        _os_log_error_impl(&dword_1C9870000, v9, OS_LOG_TYPE_ERROR, "error while creating semantics.", (uint8_t *)v13, 2u);
      }
      v5 = 4294944346;
      if (!v3)
        goto LABEL_17;
    }
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    goto LABEL_17;
  }
  v6 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
  {
    qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
    __cxa_guard_release(&qword_1ED52ACD0);
  }
  v7 = qword_1ED52ACE0;
  if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1C9870000, v7, OS_LOG_TYPE_ERROR, "invalid argument for output.", buf, 2u);
  }
  return 4294944343;
}

uint64_t CVAFaceTrackingPostProcessRecordingExt(const __CFDictionary *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9)
{
  int v9;
  void *v15;
  id v18;
  id v19;
  id v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  double v32;
  double v33;
  NSObject *v34;
  unsigned __int8 v35;
  NSObject *v36;
  unsigned __int8 v37;
  unsigned __int8 v38;
  unsigned __int8 v39;
  int v40;
  unsigned __int8 v41;
  NSObject *v42;
  uint64_t result;
  uint64_t v44;
  int v45;
  uint64_t v46;
  double v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  double v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  double v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *context;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  cva::ArrayHandler *v86[2];
  uint8_t v87[16];
  uint8_t buf[8];
  uint64_t v89;
  int v90;
  uint64_t v91;

  v9 = 0;
  v91 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if (a3)
    {
      if (a4)
      {
        if (a6)
        {
          if (a7)
          {
            if (a8)
            {
              v15 = a5;
              v9 = (int)a9;
              if (!a5 || a9)
              {
                context = (void *)MEMORY[0x1CAA45030]();
                cva::DictionaryHandler::DictionaryHandler((cva::DictionaryHandler *)v87, a1);
                v18 = a2;
                v19 = a3;
                v85 = a4;
                v84 = v15;
                v20 = a6;
                v82 = a7;
                v83 = a8;
                v81 = a9;
                v21 = (int)objc_msgSend(v18, "length");
                v22 = v21 >> 3;
                if ((int)(v21 >> 3) <= 0)
                {
                  v35 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
                  if ((v35 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
                  {
                    qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
                    __cxa_guard_release(&qword_1ED52ACD0);
                  }
                  v36 = (id)qword_1ED52ACE0;
                  if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
                  {
                    v40 = objc_msgSend(v18, "length");
                    *(_DWORD *)buf = 67109120;
                    *(_DWORD *)&buf[4] = v40;
                    _os_log_error_impl(&dword_1C9870000, v36, OS_LOG_TYPE_ERROR, "invalid recording (timestamp array incorrect: %d)", buf, 8u);
                  }

                }
                else
                {
                  v23 = (int)objc_msgSend(v20, "length");
                  v24 = v23 >> 3;
                  if ((int)(v23 >> 3) <= 0)
                  {
                    v37 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
                    if ((v37 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
                    {
                      qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
                      __cxa_guard_release(&qword_1ED52ACD0);
                    }
                    v34 = (id)qword_1ED52ACE0;
                    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_error_impl(&dword_1C9870000, v34, OS_LOG_TYPE_ERROR, "invalid recording (filtered timestamp array incorrect)", buf, 2u);
                    }
                  }
                  else if ((int)objc_msgSend(v18, "length") == 8 * v22)
                  {
                    v25 = (v21 >> 3);
                    if ((int)objc_msgSend(v19, "length") == v25 << 6)
                    {
                      if (204 * v25 == (int)objc_msgSend(v85, "length"))
                      {
                        if (v15 && 4 * v25 != (int)objc_msgSend(v84, "length"))
                        {
                          sub_1C98FE490();
                          v34 = objc_claimAutoreleasedReturnValue();
                          if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
                          {
                            *(_WORD *)buf = 0;
                            _os_log_error_impl(&dword_1C9870000, v34, OS_LOG_TYPE_ERROR, "incorrect size of tongue", buf, 2u);
                          }
                        }
                        else
                        {
                          if ((int)objc_msgSend(v20, "length") == 8 * v24)
                          {
                            v26 = objc_msgSend(objc_retainAutorelease(v18), "bytes");
                            v27 = v26;
                            v28 = 0;
                            v29 = (v23 >> 3);
                            if ((int)v22 <= 2)
                              v30 = 2;
                            else
                              v30 = v22;
                            v31 = 8 * (v30 - 1) - 8;
                            while (v31 != v28)
                            {
                              v32 = *(double *)(v26 + v28 + 8);
                              if (v32 > *(double *)(v26 + v28))
                              {
                                v33 = *(double *)(v26 + v28 + 16);
                                v28 += 8;
                                if (v32 < v33)
                                  continue;
                              }
                              sub_1C98FE490();
                              v34 = objc_claimAutoreleasedReturnValue();
                              if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
                              {
                                *(_WORD *)buf = 0;
                                _os_log_error_impl(&dword_1C9870000, v34, OS_LOG_TYPE_ERROR, "invalid timestamps", buf, 2u);
                              }
                              goto LABEL_51;
                            }
                            v79 = objc_msgSend(objc_retainAutorelease(v20), "bytes");
                            v44 = 0;
                            if ((int)v24 <= 2)
                              v45 = 2;
                            else
                              v45 = v24;
                            v46 = 8 * (v45 - 1) - 8;
                            while (v46 != v44)
                            {
                              v47 = *(double *)(v79 + v44 + 8);
                              if (v47 > *(double *)(v79 + v44))
                              {
                                v48 = *(double *)(v79 + v44 + 16);
                                v44 += 8;
                                if (v47 < v48)
                                  continue;
                              }
                              sub_1C98FE490();
                              v34 = objc_claimAutoreleasedReturnValue();
                              if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
                              {
                                *(_WORD *)buf = 0;
                                _os_log_error_impl(&dword_1C9870000, v34, OS_LOG_TYPE_ERROR, "invalid timestamps", buf, 2u);
                              }
                              goto LABEL_51;
                            }
                            objc_msgSend(v82, "setLength:", v29 << 6);
                            objc_msgSend(v83, "setLength:", (uint64_t)(0x3300000000 * v24) >> 30);
                            objc_msgSend(v81, "setLength:", 4 * v29);
                            v49 = objc_msgSend(objc_retainAutorelease(v19), "bytes");
                            v77 = objc_msgSend(objc_retainAutorelease(v85), "bytes");
                            if (v15)
                              v15 = (void *)objc_msgSend(objc_retainAutorelease(v84), "bytes");
                            v76 = objc_msgSend(objc_retainAutorelease(v82), "mutableBytes");
                            v75 = objc_msgSend(objc_retainAutorelease(v83), "mutableBytes");
                            if (a9)
                              v74 = objc_msgSend(objc_retainAutorelease(v81), "mutableBytes");
                            else
                              v74 = 0;
                            sub_1C98CFEAC();
                            sub_1C98D00C8();
                            v50 = (uint64_t)v15;
                            v73 = v49;
                            sub_1C98CFEAC();
                            v51 = *(_DWORD *)(qword_1ED52ACB8 + 236);
                            sub_1C98CFEAC();
                            v52 = *(double *)(qword_1ED52ACB8 + 240);
                            sub_1C98CFEAC();
                            v53 = *(float *)(qword_1ED52ACB8 + 248);
                            sub_1C98CFEAC();
                            v54 = *(float *)(qword_1ED52ACB8 + 252);
                            sub_1C98CFEAC();
                            v55 = *(float *)(qword_1ED52ACB8 + 256);
                            sub_1C98CFEAC();
                            v56 = *(float *)(qword_1ED52ACB8 + 260);
                            sub_1C98CFEAC();
                            v57 = *(float *)(qword_1ED52ACB8 + 264);
                            sub_1C98CFEAC();
                            v58 = *(float *)(qword_1ED52ACB8 + 268);
                            if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)v87, CFSTR("postprocessing_rotation_std")))
                            {
                              cva::DictionaryHandler::item((cva::DictionaryHandler *)v87, CFSTR("postprocessing_rotation_std"));
                              cva::ItemHandler::getValue<float>();
                              v60 = v59;
                              cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
                            }
                            else
                            {
                              v60 = (float)(v57 / 180.0) * 3.1416;
                            }
                            if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)v87, CFSTR("postprocessing_translation_std")))
                            {
                              cva::DictionaryHandler::item((cva::DictionaryHandler *)v87, CFSTR("postprocessing_translation_std"));
                              cva::ItemHandler::getValue<float>();
                              v58 = v61;
                              cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
                            }
                            if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)v87, CFSTR("postprocessing_blendshape_std")))
                            {
                              cva::DictionaryHandler::item((cva::DictionaryHandler *)v87, CFSTR("postprocessing_blendshape_std"));
                              cva::ItemHandler::getValue<float>();
                              v53 = v62;
                              cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
                            }
                            if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)v87, CFSTR("postprocessing_blendshape_brow_multiplier")))
                            {
                              cva::DictionaryHandler::item((cva::DictionaryHandler *)v87, CFSTR("postprocessing_blendshape_brow_multiplier"));
                              cva::ItemHandler::getValue<float>();
                              v54 = v63;
                              cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
                            }
                            if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)v87, CFSTR("postprocessing_blendshape_eye_multiplier")))
                            {
                              cva::DictionaryHandler::item((cva::DictionaryHandler *)v87, CFSTR("postprocessing_blendshape_eye_multiplier"));
                              cva::ItemHandler::getValue<float>();
                              v55 = v64;
                              cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
                            }
                            if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)v87, CFSTR("postprocessing_blendshape_mouth_multiplier")))
                            {
                              cva::DictionaryHandler::item((cva::DictionaryHandler *)v87, CFSTR("postprocessing_blendshape_mouth_multiplier"));
                              cva::ItemHandler::getValue<float>();
                              v56 = v65;
                              cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
                            }
                            if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)v87, CFSTR("postprocessing_time_std")))
                            {
                              cva::DictionaryHandler::item((cva::DictionaryHandler *)v87, CFSTR("postprocessing_time_std"));
                              cva::ItemHandler::getValue<double>();
                              v52 = v66;
                              cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
                            }
                            if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)v87, CFSTR("postprocessing_kernel_size")))
                            {
                              cva::DictionaryHandler::item((cva::DictionaryHandler *)v87, CFSTR("postprocessing_kernel_size"));
                              v51 = cva::ItemHandler::getValue<int>();
                              cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
                            }
                            *(_QWORD *)buf = 0;
                            v89 = 0;
                            v90 = 0;
                            sub_1C98D9928(v86);
                            sub_1C98D8BC0(v86, (uint64_t)buf, v54, v55, v56);
                            sub_1C987C140((uint64_t)v86);
                            v67 = 0;
                            if (v51 >= 0)
                              v68 = v51;
                            else
                              v68 = v51 + 1;
                            v69 = (v68 >> 1);
                            v70 = *(char **)buf;
                            v78 = v27;
                            do
                            {
                              v71 = v69;
                              v72 = v70;
                              sub_1C98CEA84(v78, v77 + v67, v22, 0x33u, v69 * vcvtps_s32_f32(*(float *)&v70[v67]), v24, v79, 0x33u, v52 * *(float *)&v70[v67], v53, v75 + v67);
                              v69 = v71;
                              v70 = v72;
                              v67 += 4;
                            }
                            while (v67 != 204);
                            if (v50 && v74)
                            {
                              sub_1C98CEA84(v78, v50, v22, 1u, v71, v24, v79, 1u, v52, v53, v74);
                              LODWORD(v69) = v71;
                            }
                            sub_1C98CECDC(v78, v73, v22, v69, v24, v79, v76, v52, v60, v58);
                            free(v72);
                            v9 = 1;
                            goto LABEL_53;
                          }
                          sub_1C98FE490();
                          v34 = objc_claimAutoreleasedReturnValue();
                          if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
                          {
                            *(_WORD *)buf = 0;
                            _os_log_error_impl(&dword_1C9870000, v34, OS_LOG_TYPE_ERROR, "incorrect size of filtered timestamps", buf, 2u);
                          }
                        }
                      }
                      else
                      {
                        sub_1C98FE490();
                        v34 = objc_claimAutoreleasedReturnValue();
                        if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
                        {
                          *(_WORD *)buf = 0;
                          _os_log_error_impl(&dword_1C9870000, v34, OS_LOG_TYPE_ERROR, "incorrect size of blendshapes", buf, 2u);
                        }
                      }
                    }
                    else
                    {
                      v39 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
                      if ((v39 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
                      {
                        qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
                        __cxa_guard_release(&qword_1ED52ACD0);
                      }
                      v34 = (id)qword_1ED52ACE0;
                      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
                      {
                        *(_WORD *)buf = 0;
                        _os_log_error_impl(&dword_1C9870000, v34, OS_LOG_TYPE_ERROR, "incorrect size of pose", buf, 2u);
                      }
                    }
                  }
                  else
                  {
                    v38 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
                    if ((v38 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
                    {
                      qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
                      __cxa_guard_release(&qword_1ED52ACD0);
                    }
                    v34 = (id)qword_1ED52ACE0;
                    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_error_impl(&dword_1C9870000, v34, OS_LOG_TYPE_ERROR, "incorrect size of timestamps", buf, 2u);
                    }
                  }
LABEL_51:

                }
                v9 = 0;
LABEL_53:

                cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)v87);
                objc_autoreleasePoolPop(context);
              }
            }
          }
        }
      }
    }
  }
  v41 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
  if ((v41 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
  {
    qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
    __cxa_guard_release(&qword_1ED52ACD0);
  }
  v42 = qword_1ED52ACE0;
  if (v9)
  {
    result = os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_INFO);
    if ((_DWORD)result)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1C9870000, v42, OS_LOG_TYPE_INFO, "Postprocessing was successful.", buf, 2u);
      return 0;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1C9870000, v42, OS_LOG_TYPE_ERROR, "Postprocessing was not successful.", buf, 2u);
    }
    return 4294944346;
  }
  return result;
}

void sub_1C987B21C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22,void *a23,void *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29)
{
  void *v29;
  void *v30;

  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&a29);

  cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)&a27);
  _Unwind_Resume(a1);
}

id CVAFaceTrackingTransformData(void *a1, void *a2)
{
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t k;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  id v21;
  uint64_t v22;
  void *context;
  id v25;
  uint64_t v26;
  id obj;
  uint64_t v28;
  id v29;
  id v30;
  uint64_t i;
  void *v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t j;
  uint64_t m;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _BYTE v55[128];
  _BYTE v56[128];
  _BYTE v57[128];
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  context = (void *)MEMORY[0x1CAA45030]();
  v25 = a2;
  v30 = a1;
  v29 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  objc_msgSend(v30, "allKeys");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v26 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v43, v55, 16);
  if (v26)
  {
    v28 = *(_QWORD *)v44;
    do
    {
      for (i = 0; i != v26; ++i)
      {
        if (*(_QWORD *)v44 != v28)
          objc_enumerationMutation(obj);
        v32 = *(void **)(*((_QWORD *)&v43 + 1) + 8 * i);
        if (objc_msgSend(v32, "isEqualToString:", CFSTR("DetectedFacesArray"), context, v25))
        {
          objc_msgSend(v30, "objectForKeyedSubscript:", v32);
          v33 = (id)objc_claimAutoreleasedReturnValue();
          v40 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v33, "count"));
          v53 = 0u;
          v54 = 0u;
          v51 = 0u;
          v52 = 0u;
          v34 = v33;
          v38 = objc_msgSend(v34, "countByEnumeratingWithState:objects:count:", &v51, v57, 16);
          if (!v38)
            goto LABEL_61;
          v36 = *(_QWORD *)v52;
          while (1)
          {
            for (j = 0; j != v38; ++j)
            {
              if (*(_QWORD *)v52 != v36)
                objc_enumerationMutation(v34);
              v4 = *(void **)(*((_QWORD *)&v51 + 1) + 8 * j);
              v5 = objc_alloc_init(MEMORY[0x1E0C99E08]);
              v49 = 0u;
              v50 = 0u;
              v47 = 0u;
              v48 = 0u;
              objc_msgSend(v4, "allKeys");
              v6 = (void *)objc_claimAutoreleasedReturnValue();
              v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v47, v56, 16);
              if (v7)
              {
                v8 = *(_QWORD *)v48;
                do
                {
                  for (k = 0; k != v7; ++k)
                  {
                    if (*(_QWORD *)v48 != v8)
                      objc_enumerationMutation(v6);
                    v10 = *(void **)(*((_QWORD *)&v47 + 1) + 8 * k);
                    if (objc_msgSend(v10, "isEqualToString:", CFSTR("AngleInfoRoll")))
                    {
                      objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("AngleInfoRoll"));
                      v11 = (id)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v11, "floatValue");
                      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:");
                      v12 = (void *)objc_claimAutoreleasedReturnValue();

                      objc_msgSend(v5, "setObject:forKeyedSubscript:", v12, CFSTR("AngleInfoRoll"));
LABEL_21:

                      goto LABEL_23;
                    }
                    if (objc_msgSend(v10, "isEqualToString:", CFSTR("Rect")))
                    {
                      objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("Rect"));
                      v11 = (id)objc_claimAutoreleasedReturnValue();
                      v12 = (void *)objc_msgSend(v11, "copy");
                      objc_msgSend(v5, "setObject:forKeyedSubscript:", v12, CFSTR("Rect"));
                      goto LABEL_21;
                    }
                    objc_msgSend(v4, "objectForKeyedSubscript:", v10);
                    v11 = (id)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v5, "setObject:forKeyedSubscript:", v11, v10);
LABEL_23:

                  }
                  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v47, v56, 16);
                }
                while (v7);
              }

              objc_msgSend(v40, "addObject:", v5);
            }
            v38 = objc_msgSend(v34, "countByEnumeratingWithState:objects:count:", &v51, v57, 16);
            if (!v38)
            {
LABEL_61:

              objc_msgSend(v29, "setObject:forKeyedSubscript:", v40, v32);
              goto LABEL_63;
            }
          }
        }
        if (objc_msgSend(v32, "isEqualToString:", CFSTR("tracked_faces")))
        {
          objc_msgSend(v30, "objectForKeyedSubscript:", v32);
          v35 = (id)objc_claimAutoreleasedReturnValue();
          v40 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v35, "count"));
          v53 = 0u;
          v54 = 0u;
          v51 = 0u;
          v52 = 0u;
          v34 = v35;
          v39 = objc_msgSend(v34, "countByEnumeratingWithState:objects:count:", &v51, v57, 16);
          if (!v39)
            goto LABEL_61;
          v37 = *(_QWORD *)v52;
          while (1)
          {
            for (m = 0; m != v39; ++m)
            {
              if (*(_QWORD *)v52 != v37)
                objc_enumerationMutation(v34);
              v13 = *(void **)(*((_QWORD *)&v51 + 1) + 8 * m);
              v14 = objc_alloc_init(MEMORY[0x1E0C99E08]);
              v49 = 0u;
              v50 = 0u;
              v47 = 0u;
              v48 = 0u;
              objc_msgSend(v13, "allKeys");
              v15 = (void *)objc_claimAutoreleasedReturnValue();
              v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v47, v56, 16);
              if (v16)
              {
                v17 = *(_QWORD *)v48;
                do
                {
                  v18 = 0;
                  do
                  {
                    if (*(_QWORD *)v48 != v17)
                      objc_enumerationMutation(v15);
                    v19 = *(void **)(*((_QWORD *)&v47 + 1) + 8 * v18);
                    if (objc_msgSend(v19, "isEqualToString:", CFSTR("AngleInfoRoll")))
                    {
                      objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("AngleInfoRoll"));
                      v20 = (id)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v20, "floatValue");
                      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:");
                      v21 = (id)objc_claimAutoreleasedReturnValue();

                      objc_msgSend(v14, "setObject:forKeyedSubscript:", v21, CFSTR("AngleInfoRoll"));
LABEL_50:

                      goto LABEL_51;
                    }
                    if (objc_msgSend(v19, "isEqualToString:", CFSTR("Rect")))
                    {
                      objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("Rect"));
                      v20 = (id)objc_claimAutoreleasedReturnValue();
                      v21 = (id)objc_msgSend(v20, "copy");
                      objc_msgSend(v14, "setObject:forKeyedSubscript:", v21, CFSTR("Rect"));
                      goto LABEL_50;
                    }
                    if (objc_msgSend(v19, "isEqualToString:", CFSTR("raw_data")))
                    {
                      objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("raw_data"));
                      v20 = (id)objc_claimAutoreleasedReturnValue();
                      sub_1C98FA5AC(v20);
                      v21 = (id)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v14, "setObject:forKeyedSubscript:", v21, CFSTR("raw_data"));
                      goto LABEL_50;
                    }
                    if (objc_msgSend(v19, "isEqualToString:", CFSTR("smooth_data")))
                    {
                      objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("smooth_data"));
                      v20 = (id)objc_claimAutoreleasedReturnValue();
                      sub_1C98FA5AC(v20);
                      v21 = (id)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v14, "setObject:forKeyedSubscript:", v21, CFSTR("smooth_data"));
                      goto LABEL_50;
                    }
                    if (objc_msgSend(v19, "isEqualToString:", CFSTR("rgb_camera")))
                    {
                      objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("rgb_camera"));
                      v21 = (id)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v14, "setObject:forKeyedSubscript:", v21, CFSTR("rgb_camera"));
LABEL_49:
                      v20 = v21;
                      goto LABEL_50;
                    }
                    if (!objc_msgSend(v19, "isEqualToString:", CFSTR("identity_coefficients"))
                      && objc_msgSend(v19, "isEqualToString:", CFSTR("debug")))
                    {
                      objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("debug"));
                      v21 = (id)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v14, "setObject:forKeyedSubscript:", v21, CFSTR("debug"));
                      goto LABEL_49;
                    }
                    objc_msgSend(v13, "objectForKeyedSubscript:", v19);
                    v20 = (id)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v14, "setObject:forKeyedSubscript:", v20, v19);
LABEL_51:

                    ++v18;
                  }
                  while (v16 != v18);
                  v22 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v47, v56, 16);
                  v16 = v22;
                }
                while (v22);
              }

              objc_msgSend(v40, "addObject:", v14);
            }
            v39 = objc_msgSend(v34, "countByEnumeratingWithState:objects:count:", &v51, v57, 16);
            if (!v39)
              goto LABEL_61;
          }
        }
        objc_msgSend(v30, "objectForKeyedSubscript:", v32);
        v34 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v29, "setObject:forKeyedSubscript:");
LABEL_63:

      }
      v26 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v43, v55, 16);
    }
    while (v26);
  }

  objc_autoreleasePoolPop(context);
  return v29;
}

void sub_1C987BB3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, void *a14, void *a15)
{

  _Unwind_Resume(a1);
}

uint64_t CVAFaceTrackingMaximumNumberOfTrackedFaces()
{
  return 3;
}

uint64_t CVAViewpointCorrectionGetTypeID()
{
  if (qword_1EF921088 != -1)
    dispatch_once(&qword_1EF921088, &unk_1E82961D0);
  return qword_1EF921090;
}

uint64_t sub_1C987BDAC()
{
  uint64_t result;

  qword_1EF921098 = 0;
  unk_1EF9210A0 = "CVAViewpointCorrection";
  qword_1EF9210A8 = (uint64_t)sub_1C987BE0C;
  unk_1EF9210B0 = 0;
  qword_1EF9210B8 = (uint64_t)sub_1C987BE14;
  unk_1EF9210C0 = 0;
  qword_1EF9210C8 = 0;
  unk_1EF9210D0 = sub_1C987BF4C;
  qword_1EF9210D8 = (uint64_t)sub_1C987BF98;
  result = _CFRuntimeRegisterClass();
  qword_1EF921090 = result;
  return result;
}

uint64_t sub_1C987BE0C(uint64_t result)
{
  *(_QWORD *)(result + 16) = 0;
  return result;
}

void sub_1C987BE14(uint64_t a1)
{
  uint64_t v2;
  std::__thread_struct *v3;
  _QWORD *v4;
  int v5;
  pthread_t v6;

  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    v3 = (std::__thread_struct *)operator new();
    std::__thread_struct::__thread_struct(v3);
    v4 = (_QWORD *)operator new();
    *v4 = v3;
    v4[1] = v2;
    v5 = pthread_create(&v6, 0, (void *(__cdecl *)(void *))sub_1C987BFE4, v4);
    if (v5)
    {
      std::__throw_system_error(v5, "thread constructor failed");
      __break(1u);
    }
    else
    {
      std::thread::detach((std::thread *)&v6);
      std::thread::~thread((std::thread *)&v6);
      *(_QWORD *)(a1 + 16) = 0;
    }
  }
}

void sub_1C987BECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::thread a10)
{
  std::thread::~thread(&a10);
  _Unwind_Resume(a1);
}

CFStringRef sub_1C987BF4C(const void *a1)
{
  const __CFAllocator *v2;
  CFAllocatorRef v3;

  v2 = CFGetAllocator(a1);
  v3 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CVAViewpointCorrection %p [%p]>"), a1, v3);
}

CFStringRef sub_1C987BF98(const void *a1)
{
  const __CFAllocator *v2;
  CFAllocatorRef v3;

  v2 = CFGetAllocator(a1);
  v3 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CVAViewpointCorrection %p [%p]>"), a1, v3);
}

uint64_t sub_1C987BFE4(uint64_t a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v2;
  const void *v3;
  uint64_t *v4;
  uint64_t *v5;
  const void *v6;
  uint64_t v7;

  v2 = std::__thread_local_data();
  v3 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    v5 = sub_1C989ABC8(v4);
    MEMORY[0x1CAA44AFC](v5, 0x10A0C40D750F2E3);
  }
  v6 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  if (v6)
  {
    v7 = MEMORY[0x1CAA44958]();
    MEMORY[0x1CAA44AFC](v7, 0x20C4093837F09);
  }
  MEMORY[0x1CAA44AFC](a1, 0x20C40A4A59CD2);
  return 0;
}

void sub_1C987C080(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1C987C094((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_1C987C094(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
    {
      v4 = MEMORY[0x1CAA44958]();
      MEMORY[0x1CAA44AFC](v4, 0x20C4093837F09);
    }
    MEMORY[0x1CAA44AFC](v2, 0x20C40A4A59CD2);
  }
  return a1;
}

uint64_t **sub_1C987C0FC(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_1C989ABC8(v2);
    MEMORY[0x1CAA44AFC](v3, 0x10A0C40D750F2E3);
  }
  return a1;
}

uint64_t sub_1C987C140(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void sub_1C987C19C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA44AFCLL);
}

uint64_t sub_1C987C1C0(uint64_t result)
{
  uint64_t v1;
  void *v2;
  void *v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(void **)(v1 + 160);
    if (v2)
    {
      *(_QWORD *)(v1 + 168) = v2;
      operator delete(v2);
    }
    v3 = *(void **)(v1 + 136);
    if (v3)
    {
      *(_QWORD *)(v1 + 144) = v3;
      operator delete(v3);
    }
    cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)(v1 + 16));

    JUMPOUT(0x1CAA44AFCLL);
  }
  return result;
}

uint64_t CVAViewpointCorrectionGetAPIVersion()
{
  return 13;
}

uint64_t CVAFaceTrackingLiteFilterGetTypeID()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF921100);
  v1 = &unk_1EF921000;
  if ((v0 & 1) == 0)
  {
    v3 = __cxa_guard_acquire(&qword_1EF921100);
    v1 = (_QWORD *)&unk_1EF921000;
    if (v3)
    {
      qword_1EF9210F8 = sub_1C987C298();
      __cxa_guard_release(&qword_1EF921100);
      v1 = (_QWORD *)&unk_1EF921000;
    }
  }
  return v1[31];
}

uint64_t sub_1C987C298()
{
  qword_1EF921110 = 0;
  *(_QWORD *)algn_1EF921118 = "CVAFaceTrackingLiteFilter";
  qword_1EF921120 = (uint64_t)sub_1C987C2E0;
  unk_1EF921128 = 0;
  qword_1EF921130 = (uint64_t)sub_1C987C2E8;
  unk_1EF921138 = 0;
  qword_1EF921140 = 0;
  unk_1EF921148 = sub_1C987C37C;
  qword_1EF921150 = (uint64_t)sub_1C987C3C8;
  return _CFRuntimeRegisterClass();
}

uint64_t sub_1C987C2E0(uint64_t result)
{
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_1C987C2E8(uint64_t result)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  id *v4;

  if (result)
  {
    v1 = result;
    v2 = *(uint64_t **)(result + 16);
    if (v2)
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = *(id **)(v3 + 272);
        if (v4)
        {

          MEMORY[0x1CAA44AFC](v4, 0x80C40B8603338);
        }
        MEMORY[0x1CAA44AFC](v3, 0x1020C40C68083FBLL);
      }
      result = MEMORY[0x1CAA44AFC](v2, 0x20C4093837F09);
    }
    *(_QWORD *)(v1 + 16) = 0;
  }
  return result;
}

CFStringRef sub_1C987C37C(const void *a1)
{
  const __CFAllocator *v2;
  CFAllocatorRef v3;

  v2 = CFGetAllocator(a1);
  v3 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CVAFaceTrackingLiteFilter %p [%p]>"), a1, v3);
}

CFStringRef sub_1C987C3C8(const void *a1)
{
  const __CFAllocator *v2;
  CFAllocatorRef v3;

  v2 = CFGetAllocator(a1);
  v3 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CVAFaceTrackingLiteFilter %p [%p]>"), a1, v3);
}

uint64_t CVAFaceTrackingLiteFilterGetAPIVersion()
{
  return 2;
}

uint64_t CVAFaceTrackingLiteFilterCreate(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  unsigned __int8 v4;
  uint64_t Instance;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  if (!a2 || *a2)
    return 4294944343;
  v4 = atomic_load((unsigned __int8 *)&qword_1EF921100);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921100))
  {
    qword_1EF9210F8 = sub_1C987C298();
    __cxa_guard_release(&qword_1EF921100);
  }
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return 4294944342;
  v6 = (_QWORD *)Instance;
  v7 = (uint64_t *)operator new(8uLL, MEMORY[0x1E0DE4E10]);
  if (v7)
  {
    v8 = v7;
    *v7 = 0;
    v9 = operator new();
    *(_OWORD *)v9 = 0u;
    *(_OWORD *)(v9 + 16) = 0u;
    *(_OWORD *)(v9 + 32) = 0u;
    *(_OWORD *)(v9 + 48) = 0u;
    *(_OWORD *)(v9 + 64) = 0u;
    *(_OWORD *)(v9 + 80) = 0u;
    *(_OWORD *)(v9 + 96) = 0u;
    *(_OWORD *)(v9 + 112) = 0u;
    *(_OWORD *)(v9 + 128) = 0u;
    *(_OWORD *)(v9 + 144) = 0u;
    *(_OWORD *)(v9 + 160) = 0u;
    *(_OWORD *)(v9 + 176) = 0u;
    *(_OWORD *)(v9 + 192) = 0u;
    *(_OWORD *)(v9 + 208) = 0u;
    *(_OWORD *)(v9 + 224) = 0u;
    *(_OWORD *)(v9 + 240) = 0u;
    *(_OWORD *)(v9 + 256) = 0u;
    *(_QWORD *)(v9 + 272) = 0;
    v10 = (_QWORD *)operator new();
    v11 = objc_opt_new();
    result = 0;
    *v10 = v11;
    *(_QWORD *)(v9 + 272) = v10;
    *v8 = v9;
    v6[2] = v8;
    *a2 = v6;
  }
  else
  {
    v6[2] = 0;
    CFRelease(v6);
    return 4294944342;
  }
  return result;
}

void sub_1C987C57C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1CAA44AFC](v1, 0x80C40B8603338);
  _Unwind_Resume(a1);
}

uint64_t CVAFaceTrackingLiteFilterProcess(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = 4294944343;
  if (a1 && a2)
  {
    if (sub_1C98F9718(*(uint64_t **)(a1 + 16), *(cva::DictionaryHandler **)a2, *(_BYTE *)(a2 + 16)))
      return 0;
    else
      return 4294944346;
  }
  return result;
}

uint64_t CVAFaceTrackingLiteFilterProcessVanilla(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t v2;
  _BYTE v5[16];

  v2 = 4294944343;
  if (a1 && a2)
  {
    cva::DictionaryHandler::DictionaryHandler((cva::DictionaryHandler *)v5, a2);
    if (sub_1C98F9718(*(uint64_t **)(a1 + 16), (cva::DictionaryHandler *)v5, 0))
      v2 = 0;
    else
      v2 = 4294944346;
    cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)v5);
  }
  return v2;
}

uint64_t CVAFaceTrackingLiteFilterGetOutput(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(**(_QWORD **)(result + 16) + 264))
      return **(_QWORD **)(result + 16);
    else
      return 0;
  }
  return result;
}

uint64_t CVAFaceTrackingLiteFilterCopyDecodedOutput(uint64_t *a1, _QWORD *a2, _BYTE *a3)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  _DWORD *v7;
  int64_t v8;
  const __CFDictionary *v9;
  __int128 v10;
  __int128 v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  const __CFDictionary *v17;
  const void *Dictionary;
  unsigned int v19;
  unsigned int v20;
  unsigned __int8 v21;
  NSObject *v22;
  _BOOL4 v23;
  _BYTE v26[16];
  _BYTE v27[16];
  _BYTE v28[16];
  void *memptr[2];
  __int128 v30;
  int v31;
  uint64_t v32;
  int v33;
  _BYTE v34[16];
  int v35;
  uint64_t v36;
  _BYTE v37[32];
  int v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  result = 4294944343;
  if (a1 && a2 && a3 && !*a2)
  {
    cva::DictionaryHandler::DictionaryHandler((cva::DictionaryHandler *)v27);
    cva::DictionaryHandler::DictionaryHandler((cva::DictionaryHandler *)v26);
    cva::DictionaryHandler::DictionaryHandler((cva::DictionaryHandler *)v34);
    v5 = *((_DWORD *)a1 + 2);
    *(_QWORD *)&v37[8] = 8;
    memptr[0] = 0;
    v6 = *a1;
    malloc_type_posix_memalign(memptr, 0x20uLL, 0x20uLL, 0x49090899uLL);
    v7 = memptr[0];
    *(void **)v37 = memptr[0];
    *(_DWORD *)&v37[16] = 3;
    *(_QWORD *)memptr[0] = v6;
    v7[2] = v5;
    cva::ItemHandler::createVector<unsigned int>();
    free(*(void **)v37);
    cva::DictionaryHandler::setItem((cva::DictionaryHandler *)v34, CFSTR("version"), (const cva::ItemHandler *)memptr);
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)memptr);
    cva::ItemHandler::ItemHandler();
    cva::DictionaryHandler::setItem((cva::DictionaryHandler *)v26, CFSTR("meta"), (const cva::ItemHandler *)v37);
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v37);
    cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)v34);
    v8 = (uint64_t)(*((double *)a1 + 2) * 1000.0 * 1000.0);
    memset(v37, 0, 24);
    CMTimeMake((CMTime *)v37, v8, 1000000);
    *(_OWORD *)memptr = *(_OWORD *)v37;
    *(_QWORD *)&v30 = *(_QWORD *)&v37[16];
    v9 = CMTimeCopyAsDictionary((CMTime *)memptr, 0);
    cva::DictionaryHandler::DictionaryHandler((cva::DictionaryHandler *)v34, v9);
    CFRelease(v9);
    cva::ItemHandler::ItemHandler();
    cva::DictionaryHandler::setItem((cva::DictionaryHandler *)v26, CFSTR("timestamp"), (const cva::ItemHandler *)v37);
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v37);
    cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)v34);
    v10 = *(_OWORD *)(a1 + 11);
    *(_OWORD *)v37 = *(_OWORD *)(a1 + 9);
    *(_OWORD *)&v37[16] = v10;
    v38 = *((_DWORD *)a1 + 26);
    v11 = *(_OWORD *)(a1 + 5);
    *(_OWORD *)memptr = *(_OWORD *)(a1 + 3);
    v30 = v11;
    v31 = *((_DWORD *)a1 + 14);
    v32 = *(uint64_t *)((char *)a1 + 60);
    v33 = *((_DWORD *)a1 + 17);
    sub_1C98E63A8((cva::DictionaryHandler *)v34, v37, memptr, &v32);
    cva::ItemHandler::ItemHandler();
    cva::DictionaryHandler::setItem((cva::DictionaryHandler *)v26, CFSTR("rgb_camera"), (const cva::ItemHandler *)v37);
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v37);
    cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)v34);
    if (*((_BYTE *)a1 + 108) || *((_BYTE *)a1 + 110) || *((_BYTE *)a1 + 112))
    {
      cva::DictionaryHandler::DictionaryHandler((cva::DictionaryHandler *)memptr);
      if (*((_BYTE *)a1 + 108))
      {
        v34[0] = *((_BYTE *)a1 + 109) != 0;
        cva::ItemHandler::createValue<BOOL>();
        cva::DictionaryHandler::setItem((cva::DictionaryHandler *)memptr, CFSTR("image_too_dark"), (const cva::ItemHandler *)v37);
        cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v37);
      }
      if (*((_BYTE *)a1 + 110))
      {
        v34[0] = *((_BYTE *)a1 + 111) != 0;
        cva::ItemHandler::createValue<BOOL>();
        cva::DictionaryHandler::setItem((cva::DictionaryHandler *)memptr, CFSTR("sensor_covered"), (const cva::ItemHandler *)v37);
        cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v37);
      }
      if (*((_BYTE *)a1 + 112))
      {
        v34[0] = 1;
        cva::ItemHandler::createValue<BOOL>();
        cva::DictionaryHandler::setItem((cva::DictionaryHandler *)memptr, CFSTR("timestamp_gap"), (const cva::ItemHandler *)v37);
        cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v37);
      }
      cva::ItemHandler::ItemHandler();
      cva::DictionaryHandler::setItem((cva::DictionaryHandler *)v26, CFSTR("data_failure"), (const cva::ItemHandler *)v37);
      cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v37);
      cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)memptr);
    }
    v12 = *((_DWORD *)a1 + 29);
    cva::ArrayHandler::ArrayHandler((cva::ArrayHandler *)v28);
    if (v12)
    {
      v13 = 0;
      do
      {
        v14 = (uint64_t)a1 + v13;
        cva::DictionaryHandler::DictionaryHandler((cva::DictionaryHandler *)&v32);
        cva::ItemHandler::createValue<float>();
        cva::DictionaryHandler::setItem((cva::DictionaryHandler *)&v32, CFSTR("confidence"), (const cva::ItemHandler *)v37);
        cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v37);
        LODWORD(memptr[0]) = *(_DWORD *)((char *)a1 + v13 + 124);
        cva::ItemHandler::createValue<int>();
        cva::DictionaryHandler::setItem((cva::DictionaryHandler *)&v32, CFSTR("failure_type"), (const cva::ItemHandler *)v37);
        cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v37);
        LODWORD(memptr[0]) = (*((_BYTE *)a1 + v13 + 224) != 0) | (2 * (*((_BYTE *)a1 + v13 + 225) != 0));
        cva::ItemHandler::createValue<unsigned int>();
        cva::DictionaryHandler::setItem((cva::DictionaryHandler *)&v32, CFSTR("exceeded_default_thresholds_mask"), (const cva::ItemHandler *)v37);
        cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v37);
        if (!*(_DWORD *)((char *)a1 + v13 + 124))
        {
          cva::DictionaryHandler::DictionaryHandler((cva::DictionaryHandler *)memptr);
          v15 = *(_OWORD *)(v14 + 144);
          *(_OWORD *)v37 = *(_OWORD *)(v14 + 128);
          *(_OWORD *)&v37[16] = v15;
          LODWORD(v15) = *(_DWORD *)(v14 + 164);
          v38 = *(_DWORD *)(v14 + 160);
          v35 = v15;
          v36 = *(_QWORD *)(v14 + 168);
          sub_1C98E64D0((cva::DictionaryHandler *)v34, v37, &v35);
          cva::ItemHandler::ItemHandler();
          cva::DictionaryHandler::setItem((cva::DictionaryHandler *)memptr, CFSTR("pose"), (const cva::ItemHandler *)v37);
          cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v37);
          cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)v34);
          cva::ItemHandler::ItemHandler();
          cva::DictionaryHandler::setItem((cva::DictionaryHandler *)&v32, CFSTR("raw_data"), (const cva::ItemHandler *)v37);
          cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v37);
          cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)memptr);
          cva::DictionaryHandler::DictionaryHandler((cva::DictionaryHandler *)memptr);
          v16 = *(_OWORD *)(v14 + 192);
          *(_OWORD *)v37 = *(_OWORD *)(v14 + 176);
          *(_OWORD *)&v37[16] = v16;
          LODWORD(v16) = *(_DWORD *)(v14 + 212);
          v38 = *(_DWORD *)(v14 + 208);
          v35 = v16;
          v36 = *(_QWORD *)(v14 + 216);
          sub_1C98E64D0((cva::DictionaryHandler *)v34, v37, &v35);
          cva::ItemHandler::ItemHandler();
          cva::DictionaryHandler::setItem((cva::DictionaryHandler *)memptr, CFSTR("pose"), (const cva::ItemHandler *)v37);
          cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v37);
          cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)v34);
          cva::ItemHandler::ItemHandler();
          cva::DictionaryHandler::setItem((cva::DictionaryHandler *)&v32, CFSTR("smooth_data"), (const cva::ItemHandler *)v37);
          cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v37);
          cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)memptr);
        }
        cva::ItemHandler::ItemHandler();
        cva::ArrayHandler::addItem((cva::ArrayHandler *)v28, (const cva::ItemHandler *)v37);
        cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v37);
        cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)&v32);
        v13 += 108;
      }
      while (108 * v12 != v13);
    }
    cva::ItemHandler::ItemHandler();
    cva::DictionaryHandler::setItem((cva::DictionaryHandler *)v26, CFSTR("tracked_faces"), (const cva::ItemHandler *)v37);
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v37);
    cva::ArrayHandler::~ArrayHandler((cva::ArrayHandler *)v28);
    cva::ItemHandler::ItemHandler();
    cva::DictionaryHandler::setItem((cva::DictionaryHandler *)v27, CFSTR("lite_shareddata"), (const cva::ItemHandler *)v37);
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v37);
    cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)v26);
    cva::DictionaryHandler::DictionaryHandler((cva::DictionaryHandler *)v34);
    v17 = (const __CFDictionary *)sub_1C98E2C90((unsigned __int8 *)a1 + 232);
    cva::DictionaryHandler::DictionaryHandler((cva::DictionaryHandler *)memptr, v17);
    cva::ItemHandler::ItemHandler();
    cva::DictionaryHandler::setItem((cva::DictionaryHandler *)v34, CFSTR("lite_clientdata_accessibility"), (const cva::ItemHandler *)v37);
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v37);
    cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)memptr);
    CFRelease(v17);
    cva::ItemHandler::ItemHandler();
    cva::DictionaryHandler::setItem((cva::DictionaryHandler *)v27, CFSTR("lite_clientdata"), (const cva::ItemHandler *)v37);
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v37);
    cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)v34);
    Dictionary = (const void *)cva::DictionaryHandler::getDictionary((cva::DictionaryHandler *)v27);
    CFRetain(Dictionary);
    cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)v27);
    if (Dictionary)
    {
      *a2 = Dictionary;
      *a3 = *((_BYTE *)a1 + 256);
      if (*((_BYTE *)a1 + 256))
      {
        do
        {
          v19 = __ldaxr((unsigned int *)&unk_1EF921108);
          v20 = v19 + 1;
        }
        while (__stlxr(v19 + 1, (unsigned int *)&unk_1EF921108));
        if (-858993459 * v20 > 0x33333333)
          return 0;
        v21 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
        if ((v21 & 1) == 0)
        {
          if (__cxa_guard_acquire(&qword_1ED52ACD0))
          {
            qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
            __cxa_guard_release(&qword_1ED52ACD0);
          }
        }
        v22 = qword_1ED52ACE0;
        v23 = os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_DEFAULT);
        result = 0;
        if (v23)
        {
          *(_DWORD *)v37 = 67109120;
          *(_DWORD *)&v37[4] = v20;
          _os_log_impl(&dword_1C9870000, v22, OS_LOG_TYPE_DEFAULT, "Secondary processing trigger has been true for %u consecutive frames. CVAFaceTrackingLiteProcessSecondary() not called?", v37, 8u);
          return 0;
        }
      }
      else
      {
        result = 0;
        atomic_store(0, (unsigned int *)&unk_1EF921108);
      }
    }
    else
    {
      return 4294944346;
    }
  }
  return result;
}

uint64_t CVAFaceTrackingLiteFilterClientAccessibilityGetTypeID()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF921178);
  v1 = &unk_1EF921000;
  if ((v0 & 1) == 0)
  {
    v3 = __cxa_guard_acquire(&qword_1EF921178);
    v1 = (_QWORD *)&unk_1EF921000;
    if (v3)
    {
      qword_1EF921170 = sub_1C987CE78();
      __cxa_guard_release(&qword_1EF921178);
      v1 = (_QWORD *)&unk_1EF921000;
    }
  }
  return v1[46];
}

uint64_t sub_1C987CE78()
{
  qword_1EF921180 = 0;
  *(_QWORD *)algn_1EF921188 = "CVAFaceTrackingLiteFilterClientAccessibility";
  qword_1EF921190 = (uint64_t)sub_1C987CEC0;
  unk_1EF921198 = 0;
  qword_1EF9211A0 = (uint64_t)sub_1C987CEC8;
  unk_1EF9211A8 = 0;
  qword_1EF9211B0 = 0;
  unk_1EF9211B8 = sub_1C987CF3C;
  qword_1EF9211C0 = (uint64_t)sub_1C987CF88;
  return _CFRuntimeRegisterClass();
}

uint64_t sub_1C987CEC0(uint64_t result)
{
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_1C987CEC8(uint64_t result)
{
  uint64_t v1;
  id **v2;
  id *v3;

  if (result)
  {
    v1 = result;
    v2 = *(id ***)(result + 16);
    if (v2)
    {
      v3 = *v2;
      if (*v2)
      {

        MEMORY[0x1CAA44AFC](v3, 0x80C40B8603338);
      }
      result = MEMORY[0x1CAA44AFC](v2, 0x20C4093837F09);
    }
    *(_QWORD *)(v1 + 16) = 0;
  }
  return result;
}

CFStringRef sub_1C987CF3C(const void *a1)
{
  const __CFAllocator *v2;
  CFAllocatorRef v3;

  v2 = CFGetAllocator(a1);
  v3 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CVAFaceTrackingLiteFilterClientAccessibility %p [%p]>"), a1, v3);
}

CFStringRef sub_1C987CF88(const void *a1)
{
  const __CFAllocator *v2;
  CFAllocatorRef v3;

  v2 = CFGetAllocator(a1);
  v3 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CVAFaceTrackingLiteFilterClientAccessibility %p [%p]>"), a1, v3);
}

uint64_t CVAFaceTrackingLiteFilterClientAccessibilityGetAPIVersion()
{
  return 1;
}

uint64_t CVAFaceTrackingLiteFilterClientAccessibilityCreate(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  unsigned __int8 v4;
  uint64_t Instance;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  if (!a2 || *a2)
    return 4294944343;
  v4 = atomic_load((unsigned __int8 *)&qword_1EF921178);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921178))
  {
    qword_1EF921170 = sub_1C987CE78();
    __cxa_guard_release(&qword_1EF921178);
  }
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return 4294944342;
  v6 = (_QWORD *)Instance;
  v7 = operator new(8uLL, MEMORY[0x1E0DE4E10]);
  if (v7)
  {
    v8 = v7;
    *v7 = 0;
    v9 = (_QWORD *)operator new();
    v10 = objc_opt_new();
    result = 0;
    *v9 = v10;
    *v8 = v9;
    v6[2] = v8;
    *a2 = v6;
  }
  else
  {
    v6[2] = 0;
    CFRelease(v6);
    return 4294944342;
  }
  return result;
}

void sub_1C987D0E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1CAA44AFC](v1, 0x80C40B8603338);
  _Unwind_Resume(a1);
}

uint64_t CVAFaceTrackingLiteFilterClientAccessibilityProcess(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = 4294944343;
  if (a1 && a2)
  {
    if (a3)
    {
      sub_1C98E264C(*(void ****)(a1 + 16), a2, a3);
      return 0;
    }
  }
  return result;
}

unsigned __int8 *CVAFaceTrackingLiteFilterClientAccessibilityCopyDecodedOutput(unsigned __int8 *a1)
{
  if (a1)
    return (unsigned __int8 *)sub_1C98E2C90(a1);
  return a1;
}

void *sub_1C987D148(_BYTE *__dst, void *__src, unint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v6 = a3 | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *v5 = v8;
    v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }
  return memmove(v5, __src, a3 + 1);
}

uint64_t CVASegmentationGetTypeID()
{
  if (qword_1EF9211E0 != -1)
    dispatch_once(&qword_1EF9211E0, &unk_1E8296230);
  return qword_1EF9211E8;
}

uint64_t sub_1C987D210()
{
  uint64_t result;

  qword_1EF9211F0 = 0;
  *(_QWORD *)algn_1EF9211F8 = "CVASegmentation";
  qword_1EF921200 = (uint64_t)sub_1C987D270;
  unk_1EF921208 = 0;
  qword_1EF921210 = (uint64_t)sub_1C987D278;
  unk_1EF921218 = 0;
  qword_1EF921220 = 0;
  unk_1EF921228 = sub_1C987D328;
  qword_1EF921230 = (uint64_t)sub_1C987D374;
  result = _CFRuntimeRegisterClass();
  qword_1EF9211E8 = result;
  return result;
}

uint64_t sub_1C987D270(uint64_t result)
{
  *(_QWORD *)(result + 16) = 0;
  return result;
}

void sub_1C987D278(uint64_t a1)
{
  uint64_t v2;
  std::__thread_struct *v3;
  _QWORD *v4;
  int v5;
  pthread_t v6;

  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    v3 = (std::__thread_struct *)operator new();
    std::__thread_struct::__thread_struct(v3);
    v4 = (_QWORD *)operator new();
    *v4 = v3;
    v4[1] = v2;
    v5 = pthread_create(&v6, 0, (void *(__cdecl *)(void *))sub_1C987D3C0, v4);
    if (v5)
    {
      std::__throw_system_error(v5, "thread constructor failed");
      sub_1C987D328();
    }
    else
    {
      std::thread::detach((std::thread *)&v6);
      std::thread::~thread((std::thread *)&v6);
      *(_QWORD *)(a1 + 16) = 0;
    }
  }
}

CFStringRef sub_1C987D328(const void *a1)
{
  const __CFAllocator *v2;
  CFAllocatorRef v3;

  v2 = CFGetAllocator(a1);
  v3 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CVASegmentation %p [%p]>"), a1, v3);
}

CFStringRef sub_1C987D374(const void *a1)
{
  const __CFAllocator *v2;
  CFAllocatorRef v3;

  v2 = CFGetAllocator(a1);
  v3 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CVASegmentation %p [%p]>"), a1, v3);
}

uint64_t sub_1C987D3C0(uint64_t a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v2;
  const void *v3;
  uint64_t *v4;
  unsigned __int8 v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  const void *v21;
  uint64_t v22;
  uint64_t *v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  uint8_t v28[16];

  v2 = std::__thread_local_data();
  v3 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    v5 = atomic_load((unsigned __int8 *)&qword_1EF921268);
    if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921268))
    {
      qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
      __cxa_guard_release(&qword_1EF921268);
    }
    v6 = (id)qword_1EF921260;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v28 = 0;
      _os_log_debug_impl(&dword_1C9870000, v6, OS_LOG_TYPE_DEBUG, "~Segmentation", v28, 2u);
    }

    v7 = *v4;
    *v4 = 0;
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      v9 = **(_QWORD **)(v8 + 8);
      std::mutex::lock((std::mutex *)(v9 + 16));
      *(_BYTE *)(v9 + 128) = 1;
      std::mutex::unlock((std::mutex *)(v9 + 16));
      v10 = *(_QWORD *)(*(_QWORD *)(v8 + 8) + 24) - *(_QWORD *)(*(_QWORD *)(v8 + 8) + 16);
      if ((int)(v10 >> 4) >= 1)
      {
        v11 = 0;
        v12 = v10 & 0xFFFFFFFF0;
        do
        {
          sub_1C991F874(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 8) + 16) + v11), 1);
          v11 += 16;
        }
        while (v12 != v11);
      }
      *(_QWORD *)(v7 + 24) = &off_1E8295170;
      if (*(_QWORD *)(v7 + 176))
      {
        v13 = *(_QWORD *)(v7 + 160);
        v14 = *(uint64_t **)(v7 + 168);
        v15 = *v14;
        *(_QWORD *)(v15 + 8) = *(_QWORD *)(v13 + 8);
        **(_QWORD **)(v13 + 8) = v15;
        *(_QWORD *)(v7 + 176) = 0;
        if (v14 != (uint64_t *)(v7 + 160))
        {
          do
          {
            v24 = (uint64_t *)v14[1];
            v25 = (std::__shared_weak_count *)v14[3];
            if (v25)
            {
              p_shared_owners = (unint64_t *)&v25->__shared_owners_;
              do
                v27 = __ldaxr(p_shared_owners);
              while (__stlxr(v27 - 1, p_shared_owners));
              if (!v27)
              {
                ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
                std::__shared_weak_count::__release_weak(v25);
              }
            }
            operator delete(v14);
            v14 = v24;
          }
          while (v24 != (uint64_t *)(v7 + 160));
        }
      }
      std::condition_variable::~condition_variable((std::condition_variable *)(v7 + 104));
      std::mutex::~mutex((std::mutex *)(v7 + 40));
      v16 = *(std::__shared_weak_count **)(v7 + 16);
      if (v16)
      {
        v17 = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v19 = *(uint64_t **)v7;
      *(_QWORD *)v7 = 0;
      if (v19)
      {
        v20 = *v19;
        *v19 = 0;
        if (v20)
        {
          sub_1C9880450(*(_QWORD **)(v20 + 8));
          MEMORY[0x1CAA44AFC](v20, 0x1020C4062D53EE8);
        }
        MEMORY[0x1CAA44AFC](v19, 0x20C4093837F09);
      }
      MEMORY[0x1CAA44AFC](v7, 0x10A0C40F9FBC3BELL);
    }
    MEMORY[0x1CAA44AFC](v4, 0x20C4093837F09);
  }
  v21 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  if (v21)
  {
    v22 = MEMORY[0x1CAA44958]();
    MEMORY[0x1CAA44AFC](v22, 0x20C4093837F09);
  }
  MEMORY[0x1CAA44AFC](a1, 0x20C40A4A59CD2);
  return 0;
}

uint64_t CVASegmentationGetAPIVersion()
{
  return 7;
}

_QWORD *CVASegmentationCreate(uint64_t a1, const __CFDictionary *a2, _DWORD *a3)
{
  uint64_t Instance;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t ****v11;
  std::string::size_type size;
  int v13;
  unsigned __int8 v14;
  NSObject *v15;
  unsigned __int8 v16;
  NSObject *v17;
  char hasKey;
  char v19;
  _QWORD *v20;
  int32x2_t **v21;
  void *v22;
  int v23;
  size_t v24;
  unint64_t v25;
  __int128 *p_dst;
  uint64_t v27;
  uint64_t v28;
  std::string *p_buf;
  unsigned __int8 v30;
  void *v31;
  void *v32;
  id v33;
  char *v34;
  unsigned __int8 v35;
  NSObject *v36;
  char v37;
  uint64_t ***v38;
  uint64_t *v39;
  uint64_t **v40;
  uint64_t **v41;
  int v42;
  void *v43;
  uint64_t *v44;
  uint64_t *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  char v51;
  char v52;
  _QWORD *v53;
  uint64_t *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  int v58;
  size_t v59;
  unint64_t v60;
  __int128 *v61;
  uint64_t v62;
  uint64_t v63;
  __int128 *v64;
  std::string *v65;
  unsigned __int8 v66;
  void *v67;
  void *v68;
  id v69;
  char *v70;
  unsigned __int8 v71;
  NSObject *v72;
  int32x2_t **v73;
  char v74;
  uint64_t ***v75;
  uint64_t *v76;
  uint64_t **v77;
  uint64_t **v78;
  int v79;
  void *v80;
  uint64_t *v81;
  uint64_t *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  _QWORD *v92;
  char *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  unsigned __int8 v97;
  NSObject *v98;
  void **v100;
  void **v101;
  uint64_t ****v102;
  int v103;
  _DWORD *v104;
  _QWORD *v105;
  _BYTE v106[16];
  _BYTE v107[16];
  void *__p[2];
  int64_t v109;
  int32x2_t **v110;
  std::__shared_weak_count *v111;
  std::string buf;
  __int128 __dst;
  unint64_t v114;
  uint64_t v115;

  v115 = *MEMORY[0x1E0C80C00];
  if (qword_1EF9211E0 != -1)
    dispatch_once(&qword_1EF9211E0, &unk_1E8296230);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
  {
    v14 = atomic_load((unsigned __int8 *)&qword_1EF921268);
    if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921268))
    {
      qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
      __cxa_guard_release(&qword_1EF921268);
    }
    v15 = qword_1EF921260;
    if (os_log_type_enabled((os_log_t)qword_1EF921260, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl(&dword_1C9870000, v15, OS_LOG_TYPE_ERROR, "out of memory when creating instance.", (uint8_t *)&buf, 2u);
      v6 = 0;
      if (!a3)
        return v6;
    }
    else
    {
      v6 = 0;
      if (!a3)
        return v6;
    }
    *a3 = -22954;
    return v6;
  }
  v6 = (_QWORD *)Instance;
  v7 = operator new();
  v8 = operator new();
  v9 = (_QWORD *)operator new();
  v105 = (_QWORD *)v7;
  v10 = (_QWORD *)operator new();
  v10[2] = 0;
  v10[1] = 0;
  *v10 = v10 + 1;
  *v9 = v10;
  *(_QWORD *)v8 = v9;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = &off_1E8295170;
  *(_DWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 40) = 850045863;
  *(_QWORD *)(v8 + 104) = 1018212795;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_QWORD *)(v8 + 96) = 0;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_OWORD *)(v8 + 128) = 0u;
  *(_OWORD *)(v8 + 137) = 0u;
  *(_QWORD *)(v8 + 160) = v8 + 160;
  *(_QWORD *)(v8 + 168) = v8 + 160;
  *(_QWORD *)(v8 + 176) = 0;
  std::mutex::lock((std::mutex *)(v8 + 40));
  *(_DWORD *)(v8 + 32) = 0x7FFFFFFF;
  std::mutex::unlock((std::mutex *)(v8 + 40));
  cva::DictionaryHandler::DictionaryHandler((cva::DictionaryHandler *)v106, a2);
  v11 = *(uint64_t *****)v8;
  kdebug_trace();
  std::mutex::lock(&stru_1EF920F60);
  sub_1C98FE4FC(&buf, "resources_segmentation/");
  size = HIBYTE(buf.__r_.__value_.__r.__words[2]);
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = buf.__r_.__value_.__l.__size_;
  if (!size)
  {
    v16 = atomic_load((unsigned __int8 *)&qword_1EF921268);
    if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921268))
    {
      qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
      __cxa_guard_release(&qword_1EF921268);
    }
    v17 = (id)qword_1EF921260;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p[0]) = 0;
      _os_log_error_impl(&dword_1C9870000, v17, OS_LOG_TYPE_ERROR, "cannot find resources", (uint8_t *)__p, 2u);
    }

    goto LABEL_137;
  }
  cva::DictionaryHandler::item((cva::DictionaryHandler *)v106, CFSTR("camera_type"));
  v13 = cva::ItemHandler::getValue<int>();
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)__p);
  v102 = v11;
  if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)v106, CFSTR("realtime_priority")))
  {
    cva::DictionaryHandler::item((cva::DictionaryHandler *)v106, CFSTR("realtime_priority"));
    v103 = cva::ItemHandler::getValue<BOOL>();
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)__p);
  }
  else
  {
    v103 = 1;
  }
  v110 = 0;
  v111 = 0;
  hasKey = cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)v106, CFSTR("camera_type"));
  if (v13)
    v19 = hasKey;
  else
    v19 = 0;
  v104 = a3;
  if ((v19 & 1) != 0)
    goto LABEL_74;
  v20 = operator new(0x20uLL);
  v20[1] = 0;
  v20[2] = 0;
  *v20 = &off_1E82956E8;
  v21 = (int32x2_t **)(v20 + 3);
  v22 = sub_1C98855EC(v20 + 3);
  v110 = (int32x2_t **)(v20 + 3);
  v111 = (std::__shared_weak_count *)v20;
  v23 = SHIBYTE(buf.__r_.__value_.__r.__words[2]);
  __p[0] = 0;
  __p[1] = 0;
  v109 = 0;
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v24 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
  else
    v24 = buf.__r_.__value_.__l.__size_;
  v25 = v24 + 21;
  if (v24 + 21 > 0x7FFFFFFFFFFFFFF7)
    abort();
  if (v25 >= 0x17)
  {
    v27 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v25 | 7) != 0x17)
      v27 = v25 | 7;
    v28 = v27 + 1;
    p_dst = (__int128 *)operator new(v27 + 1);
    *((_QWORD *)&__dst + 1) = v24 + 21;
    v114 = v28 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    v114 = 0;
    __dst = 0uLL;
    p_dst = &__dst;
    HIBYTE(v114) = v24 + 21;
    if (!v24)
      goto LABEL_36;
  }
  if (v23 >= 0)
    p_buf = &buf;
  else
    p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
  v22 = memmove(p_dst, p_buf, v24);
LABEL_36:
  strcpy((char *)p_dst + v24, "/matting.espresso.net");
  *(_OWORD *)__p = __dst;
  v109 = v114;
  v30 = atomic_load((unsigned __int8 *)&qword_1EF921258);
  if ((v30 & 1) == 0)
  {
    v22 = (void *)__cxa_guard_acquire(&qword_1EF921258);
    if ((_DWORD)v22)
    {
      sub_1C9884350();
      __cxa_guard_release(&qword_1EF921258);
    }
  }
  if (*(_BYTE *)qword_1EF921250)
  {
    v31 = (void *)MEMORY[0x1CAA45030](v22);
    v32 = (void *)CFPreferencesCopyAppValue(CFSTR("com.apple.applecva.segmentation.frontfacingnetworkpath"), (CFStringRef)*MEMORY[0x1E0C9B228]);
    if (v32)
    {
      v33 = objc_retainAutorelease(v32);
      v34 = (char *)objc_msgSend(v33, "UTF8String", v8 + 24, v8 + 8);

      objc_autoreleasePoolPop(v31);
      if (v34)
        sub_1C98807F4(__p, v34);
    }
    else
    {
      objc_autoreleasePoolPop(v31);
    }
  }
  if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)v106, CFSTR("front_facing_network_path")))
  {
    cva::DictionaryHandler::item((cva::DictionaryHandler *)v106, CFSTR("front_facing_network_path"));
    cva::ItemHandler::getValue<std::string>();
    if (SHIBYTE(v109) < 0)
      operator delete(__p[0]);
    *(_OWORD *)__p = __dst;
    v109 = v114;
    HIBYTE(v114) = 0;
    LOBYTE(__dst) = 0;
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v107);
  }
  v35 = atomic_load((unsigned __int8 *)&qword_1EF921268);
  if ((v35 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921268))
  {
    qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
    __cxa_guard_release(&qword_1EF921268);
  }
  v36 = (id)qword_1EF921260;
  if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
  {
    v100 = __p;
    if (v109 < 0)
      v100 = (void **)__p[0];
    LODWORD(__dst) = 136315138;
    *(_QWORD *)((char *)&__dst + 4) = v100;
    _os_log_debug_impl(&dword_1C9870000, v36, OS_LOG_TYPE_DEBUG, "Loading front facing network %s", (uint8_t *)&__dst, 0xCu);
  }

  v37 = sub_1C9885758(v21, (uint64_t *)__p, v103);
  v38 = *v102;
  v40 = (uint64_t **)(*v102 + 1);
  v39 = *v40;
  if ((v37 & 1) == 0)
  {
    sub_1C9880450(v39);
    v38[1] = 0;
    v38[2] = 0;
    *v38 = v40;
    a3 = v104;
    goto LABEL_70;
  }
  v41 = (uint64_t **)(*v102 + 1);
  if (v39)
  {
    while (1)
    {
      while (1)
      {
        v41 = (uint64_t **)v39;
        v42 = *((_DWORD *)v39 + 8);
        if (v42 < 1)
          break;
        v39 = (uint64_t *)*v39;
        v40 = v41;
        if (!*v41)
          goto LABEL_56;
      }
      if ((v42 & 0x80000000) == 0)
        break;
      v39 = (uint64_t *)v39[1];
      if (!v39)
      {
        v40 = v41 + 1;
        goto LABEL_56;
      }
    }
  }
  else
  {
LABEL_56:
    v43 = operator new(0x38uLL);
    *((_DWORD *)v43 + 8) = 0;
    *((_QWORD *)v43 + 5) = 0;
    *((_QWORD *)v43 + 6) = 0;
    *(_QWORD *)v43 = 0;
    *((_QWORD *)v43 + 1) = 0;
    *((_QWORD *)v43 + 2) = v41;
    *v40 = (uint64_t *)v43;
    v44 = **v38;
    v45 = (uint64_t *)v43;
    if (v44)
    {
      *v38 = (uint64_t **)v44;
      v45 = *v40;
    }
    sub_1C9880828((uint64_t *)v38[1], v45);
    v38[2] = (uint64_t **)((char *)v38[2] + 1);
    v21 = v110;
    v20 = &v111->__vftable;
    if (!v111)
    {
      a3 = v104;
      goto LABEL_65;
    }
    v41 = (uint64_t **)v43;
  }
  a3 = v104;
  v46 = v20 + 1;
  do
    v47 = __ldxr(v46);
  while (__stxr(v47 + 1, v46));
  v43 = v41;
LABEL_65:
  v48 = (std::__shared_weak_count *)*((_QWORD *)v43 + 6);
  *((_QWORD *)v43 + 5) = v21;
  *((_QWORD *)v43 + 6) = v20;
  if (v48)
  {
    p_shared_owners = (unint64_t *)&v48->__shared_owners_;
    do
      v50 = __ldaxr(p_shared_owners);
    while (__stlxr(v50 - 1, p_shared_owners));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
LABEL_70:
  if (SHIBYTE(v109) < 0)
  {
    operator delete(__p[0]);
    if ((v37 & 1) == 0)
      goto LABEL_133;
  }
  else if ((v37 & 1) == 0)
  {
    goto LABEL_133;
  }
LABEL_74:
  v51 = cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)v106, CFSTR("camera_type"));
  if (v13 == 1)
    v52 = 0;
  else
    v52 = v51;
  if ((v52 & 1) != 0)
    goto LABEL_133;
  v53 = operator new(0x20uLL);
  v53[1] = 0;
  v53[2] = 0;
  *v53 = &off_1E82956E8;
  v54 = sub_1C98855EC(v53 + 3);
  v55 = v111;
  v110 = (int32x2_t **)v54;
  v111 = (std::__shared_weak_count *)v53;
  if (v55)
  {
    v56 = (unint64_t *)&v55->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  __p[0] = 0;
  __p[1] = 0;
  v109 = 0;
  v58 = SHIBYTE(buf.__r_.__value_.__r.__words[2]);
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v59 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
  else
    v59 = buf.__r_.__value_.__l.__size_;
  v60 = v59 + 25;
  if (v59 + 25 > 0x7FFFFFFFFFFFFFF7)
    abort();
  if (v60 > 0x16)
  {
    v62 = (v60 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v60 | 7) != 0x17)
      v62 = v60 | 7;
    v63 = v62 + 1;
    v64 = (__int128 *)operator new(v62 + 1);
    v61 = v64;
    *((_QWORD *)&__dst + 1) = v59 + 25;
    v114 = v63 | 0x8000000000000000;
    *(_QWORD *)&__dst = v64;
    if (!v59)
      goto LABEL_96;
  }
  else
  {
    v114 = 0;
    __dst = 0uLL;
    v61 = &__dst;
    HIBYTE(v114) = v59 + 25;
  }
  if (v58 >= 0)
    v65 = &buf;
  else
    v65 = (std::string *)buf.__r_.__value_.__r.__words[0];
  v64 = (__int128 *)memmove(v61, v65, v59);
LABEL_96:
  strcpy((char *)v61 + v59, "/rfc_matting.espresso.net");
  v109 = v114;
  *(_OWORD *)__p = __dst;
  v66 = atomic_load((unsigned __int8 *)&qword_1EF921258);
  if ((v66 & 1) == 0)
  {
    v64 = (__int128 *)__cxa_guard_acquire(&qword_1EF921258);
    if ((_DWORD)v64)
    {
      sub_1C9884350();
      __cxa_guard_release(&qword_1EF921258);
    }
  }
  a3 = v104;
  if (*(_BYTE *)qword_1EF921250)
  {
    v67 = (void *)MEMORY[0x1CAA45030](v64);
    v68 = (void *)CFPreferencesCopyAppValue(CFSTR("com.apple.applecva.segmentation.backfacingnetworkpath"), (CFStringRef)*MEMORY[0x1E0C9B228]);
    if (v68)
    {
      v69 = objc_retainAutorelease(v68);
      v70 = (char *)objc_msgSend(v69, "UTF8String");

      objc_autoreleasePoolPop(v67);
      if (v70)
        sub_1C98807F4(__p, v70);
    }
    else
    {
      objc_autoreleasePoolPop(v67);
    }
  }
  if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)v106, CFSTR("back_facing_network_path")))
  {
    cva::DictionaryHandler::item((cva::DictionaryHandler *)v106, CFSTR("back_facing_network_path"));
    cva::ItemHandler::getValue<std::string>();
    if (SHIBYTE(v109) < 0)
      operator delete(__p[0]);
    *(_OWORD *)__p = __dst;
    v109 = v114;
    HIBYTE(v114) = 0;
    LOBYTE(__dst) = 0;
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v107);
  }
  v71 = atomic_load((unsigned __int8 *)&qword_1EF921268);
  if ((v71 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921268))
  {
    qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
    __cxa_guard_release(&qword_1EF921268);
  }
  v72 = (id)qword_1EF921260;
  if (os_log_type_enabled(v72, OS_LOG_TYPE_DEBUG))
  {
    v101 = __p;
    if (v109 < 0)
      v101 = (void **)__p[0];
    LODWORD(__dst) = 136315138;
    *(_QWORD *)((char *)&__dst + 4) = v101;
    _os_log_debug_impl(&dword_1C9870000, v72, OS_LOG_TYPE_DEBUG, "Loading back facing network %s", (uint8_t *)&__dst, 0xCu);
  }

  v73 = v110;
  v74 = sub_1C9885758(v110, (uint64_t *)__p, v103);
  v75 = *v102;
  v77 = (uint64_t **)(*v102 + 1);
  v76 = *v77;
  if ((v74 & 1) != 0)
  {
    v78 = (uint64_t **)(*v102 + 1);
    if (v76)
    {
      while (1)
      {
        while (1)
        {
          v78 = (uint64_t **)v76;
          v79 = *((_DWORD *)v76 + 8);
          if (v79 < 2)
            break;
          v76 = (uint64_t *)*v76;
          v77 = v78;
          if (!*v78)
            goto LABEL_116;
        }
        if (v79 == 1)
          break;
        v76 = (uint64_t *)v76[1];
        if (!v76)
        {
          v77 = v78 + 1;
          goto LABEL_116;
        }
      }
      v80 = v76;
    }
    else
    {
LABEL_116:
      v80 = operator new(0x38uLL);
      *((_DWORD *)v80 + 8) = 1;
      *((_QWORD *)v80 + 5) = 0;
      *((_QWORD *)v80 + 6) = 0;
      *(_QWORD *)v80 = 0;
      *((_QWORD *)v80 + 1) = 0;
      *((_QWORD *)v80 + 2) = v78;
      *v77 = (uint64_t *)v80;
      v81 = **v75;
      v82 = (uint64_t *)v80;
      if (v81)
      {
        *v75 = (uint64_t **)v81;
        v82 = *v77;
      }
      sub_1C9880828((uint64_t *)v75[1], v82);
      v75[2] = (uint64_t **)((char *)v75[2] + 1);
      v73 = v110;
    }
    a3 = v104;
    v83 = v111;
    if (v111)
    {
      v84 = (unint64_t *)&v111->__shared_owners_;
      do
        v85 = __ldxr(v84);
      while (__stxr(v85 + 1, v84));
    }
    v86 = (std::__shared_weak_count *)*((_QWORD *)v80 + 6);
    *((_QWORD *)v80 + 5) = v73;
    *((_QWORD *)v80 + 6) = v83;
    if (v86)
    {
      v87 = (unint64_t *)&v86->__shared_owners_;
      do
        v88 = __ldaxr(v87);
      while (__stlxr(v88 - 1, v87));
      if (!v88)
      {
        ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
        std::__shared_weak_count::__release_weak(v86);
      }
    }
  }
  else
  {
    sub_1C9880450(v76);
    v75[1] = 0;
    v75[2] = 0;
    *v75 = v77;
  }
  if (SHIBYTE(v109) < 0)
    operator delete(__p[0]);
LABEL_133:
  v89 = v111;
  if (v111)
  {
    v90 = (unint64_t *)&v111->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
      if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_139;
      goto LABEL_138;
    }
  }
LABEL_137:
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
LABEL_138:
    operator delete(buf.__r_.__value_.__l.__data_);
LABEL_139:
  std::mutex::unlock(&stru_1EF920F60);
  kdebug_trace();
  v92 = operator new(0x28uLL);
  v92[1] = 0;
  v92[2] = 0;
  *v92 = &off_1E8295C28;
  v93 = (char *)operator new(0x28uLL);
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v93;
  *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = xmmword_1C9927440;
  strcpy(v93, "com.apple.applecva.segmentation.1");
  sub_1C9884BE4(v92 + 3, 1, (uint64_t)&buf);
  operator delete(v93);
  v94 = *(std::__shared_weak_count **)(v8 + 16);
  *(_QWORD *)(v8 + 8) = v92 + 3;
  *(_QWORD *)(v8 + 16) = v92;
  if (v94)
  {
    v95 = (unint64_t *)&v94->__shared_owners_;
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)v106);
  *v105 = v8;
  v6[2] = v105;
  if (!*(_QWORD *)(**(_QWORD **)v8 + 16))
  {
    v97 = atomic_load((unsigned __int8 *)&qword_1EF921268);
    if ((v97 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921268))
    {
      qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
      __cxa_guard_release(&qword_1EF921268);
    }
    v98 = qword_1EF921260;
    if (os_log_type_enabled((os_log_t)qword_1EF921260, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl(&dword_1C9870000, v98, OS_LOG_TYPE_ERROR, "initialization was not successful.", (uint8_t *)&buf, 2u);
      if (!a3)
        goto LABEL_151;
    }
    else if (!a3)
    {
LABEL_151:
      CFRelease(v6);
      return 0;
    }
    *a3 = -22950;
    goto LABEL_151;
  }
  if (a3)
    *a3 = 0;
  return v6;
}

void sub_1C987E51C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t **v33;

  __cxa_guard_abort(&qword_1EF921258);
  if (a24 < 0)
    operator delete(__p);
  sub_1C987C140((uint64_t)&a26);
  if (a33 < 0)
    operator delete(a28);
  std::mutex::unlock(&stru_1EF920F60);
  kdebug_trace();
  cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)&a15);
  sub_1C9884410(a9);
  sub_1C987C140(a10);
  sub_1C98844E0(v33);
  MEMORY[0x1CAA44AFC](v33, 0x10A0C40F9FBC3BELL);
  _Unwind_Resume(a1);
}

uint64_t CVASegmentationCreateOutputInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t ***v6;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned __int8 v19;
  NSObject *v20;
  unsigned __int8 v21;
  NSObject *v22;
  unsigned __int8 v23;
  NSObject *v24;
  unsigned __int8 v25;
  uint64_t *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD v41[7];
  uint8_t buf[8];
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v19 = atomic_load((unsigned __int8 *)&qword_1EF921268);
    if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921268))
    {
      qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
      __cxa_guard_release(&qword_1EF921268);
    }
    v20 = qword_1EF921260;
    if (os_log_type_enabled((os_log_t)qword_1EF921260, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1C9870000, v20, OS_LOG_TYPE_ERROR, "invalid argument for handle.", buf, 2u);
      if (!a5)
        return 0;
    }
    else if (!a5)
    {
      return 0;
    }
    v18 = 0;
    *a5 = -22953;
    return v18;
  }
  v6 = *(uint64_t ****)(a1 + 16);
  if (!v6)
  {
    v21 = atomic_load((unsigned __int8 *)&qword_1EF921268);
    if ((v21 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921268))
    {
      qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
      __cxa_guard_release(&qword_1EF921268);
    }
    v22 = qword_1EF921260;
    if (os_log_type_enabled((os_log_t)qword_1EF921260, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1C9870000, v22, OS_LOG_TYPE_ERROR, "invalid state for handle.", buf, 2u);
      if (!a5)
        return 0;
LABEL_27:
      v18 = 0;
      *a5 = -22961;
      return v18;
    }
    if (a5)
      goto LABEL_27;
    return 0;
  }
  if (a5)
    *a5 = 0;
  v8 = *v6;
  if (!v8)
  {
    v23 = atomic_load((unsigned __int8 *)&qword_1EF921268);
    if ((v23 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921268))
    {
      qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
      __cxa_guard_release(&qword_1EF921268);
    }
    v24 = (id)qword_1EF921260;
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1C9870000, v24, OS_LOG_TYPE_ERROR, "Segmentation is not properly initialized", buf, 2u);
    }
    goto LABEL_35;
  }
  v9 = *v8;
  if (!*v8)
  {
    v25 = atomic_load((unsigned __int8 *)&qword_1EF921268);
    if ((v25 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921268))
    {
      qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
      __cxa_guard_release(&qword_1EF921268);
    }
    v24 = (id)qword_1EF921260;
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1C9870000, v24, OS_LOG_TYPE_ERROR, "Segmentation does nto support the camera type", buf, 2u);
    }
LABEL_35:

    return 0;
  }
  std::mutex::lock(&stru_1EF920F60);
  v10 = *v9;
  if (!*(_QWORD *)(*v9 + 16))
    goto LABEL_18;
  v13 = *(_QWORD *)(v10 + 8);
  v11 = v10 + 8;
  v12 = v13;
  if (!v13)
    goto LABEL_18;
  v14 = v11;
  do
  {
    v15 = *(_DWORD *)(v12 + 32);
    v16 = v15 < (int)a2;
    if (v15 >= (int)a2)
      v17 = (uint64_t *)v12;
    else
      v17 = (uint64_t *)(v12 + 8);
    if (!v16)
      v14 = v12;
    v12 = *v17;
  }
  while (*v17);
  if (v14 != v11 && *(_DWORD *)(v14 + 32) <= (int)a2)
  {
    v27 = *(uint64_t **)(v14 + 40);
    v28 = *(std::__shared_weak_count **)(v14 + 48);
    if (v28)
    {
      p_shared_owners = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(p_shared_owners);
      while (__stxr(v30 + 1, p_shared_owners));
    }
    v31 = *v27;
    v41[0] = CFSTR("camera_type");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a2);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)buf = v32;
    v41[1] = CFSTR("width");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(v31 + 16));
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    v43 = v33;
    v41[2] = CFSTR("height");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(v31 + 20));
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    v44 = v34;
    v41[3] = CFSTR("foreground_pixelformat");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", *(unsigned int *)(v31 + 24));
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    v45 = v35;
    v41[4] = CFSTR("segmentation_pixelformat");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", *(unsigned int *)(v31 + 28));
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    v46 = v36;
    v41[5] = CFSTR("requires_depth");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", *(unsigned __int8 *)(v31 + 32));
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    v47 = v37;
    v41[6] = CFSTR("supports_foreground");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", *(unsigned __int8 *)(v31 + 33));
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    v48 = v38;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", buf, v41, 7);
    v18 = objc_claimAutoreleasedReturnValue();

    if (v28)
    {
      v39 = (unint64_t *)&v28->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
  }
  else
  {
LABEL_18:
    v18 = 0;
  }
  std::mutex::unlock(&stru_1EF920F60);
  return v18;
}

void sub_1C987EC98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  va_list va;

  va_start(va, a2);

  sub_1C987C140((uint64_t)va);
  std::mutex::unlock(&stru_1EF920F60);
  _Unwind_Resume(a1);
}

uint64_t CVASegmentationProcess(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t ***v3;
  _QWORD *v4;
  unint64_t *v5;
  uint64_t v6;
  cva::DictionaryHandler *v7;
  uint64_t *v8;
  int hasKey;
  uint64_t v10;
  int v11;
  unsigned __int8 v12;
  NSObject *v13;
  const char *v14;
  unsigned __int8 v15;
  unsigned __int8 v17;
  NSObject *v18;
  unsigned __int8 v19;
  NSObject *v20;
  const char *v21;
  const __CFDictionary *Dictionary;
  int v23;
  cva::DictionaryHandler *v24;
  const __CFDictionary *v25;
  const __CFString *v26;
  const __CFDictionary *v27;
  const __CFDictionary *v28;
  uint64_t v29;
  void *v30;
  uint64_t **v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  BOOL v39;
  uint64_t *v40;
  unsigned __int8 v41;
  NSObject *v42;
  char v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unsigned __int8 v47;
  uint64_t **v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  BOOL v56;
  uint64_t *v57;
  uint64_t **v58;
  std::__shared_weak_count *v59;
  unint64_t *p_shared_owners;
  unint64_t v61;
  uint64_t v62;
  _BOOL4 v63;
  const char *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  unsigned __int8 v72;
  NSObject *v73;
  const char *v74;
  unsigned __int8 v75;
  unsigned __int8 v76;
  unsigned __int8 v77;
  int v78;
  __n128 v79;
  int32x4_t v80;
  float32x2_t v81;
  float32x2_t v82;
  int32x4_t v83;
  float32x2_t v84;
  float32x2_t v85;
  float32x4_t v86;
  char v87;
  unsigned __int8 v88;
  unsigned __int8 v89;
  unsigned __int8 v90;
  NSObject *v91;
  __n128 v92;
  int32x4_t v93;
  float32x2_t v94;
  float32x2_t v95;
  int32x4_t v96;
  float32x2_t v97;
  float32x2_t v98;
  float32x4_t v99;
  unsigned __int8 v100;
  NSObject *v101;
  __n128 v102;
  int32x4_t v103;
  float32x2_t v104;
  float32x2_t v105;
  float32x4_t v106;
  int32x4_t v107;
  float32x2_t v108;
  float32x2_t v109;
  float32x4_t v110;
  int32x4_t v111;
  float32x2_t v112;
  float32x2_t v113;
  int32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  int32x4_t v121;
  float32x2_t v122;
  float32x2_t v123;
  float32x4_t v124;
  int32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  unsigned __int8 v128;
  NSObject *v129;
  float32x4_t v130;
  float v131;
  float32x4_t v132;
  float v133;
  float v134;
  float v135;
  unsigned __int8 v137;
  NSObject *v138;
  uint64_t v139;
  int v140;
  unsigned __int8 v141;
  unsigned __int8 v142;
  NSObject *v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  BOOL v150;
  uint64_t *v151;
  uint64_t v152;
  std::__shared_weak_count *v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  __n128 v160;
  float32x4_t v161;
  __n128 v162;
  float32x4_t v163;
  __n128 v164;
  __n128 v165;
  __n128 v166;
  float32x4_t v167;
  _QWORD *v168;
  std::__shared_weak_count *v169;
  _QWORD *v170;
  std::__shared_weak_count *v171;
  uint64_t v172;
  std::__shared_weak_count *v173;
  uint8_t buf[8];
  std::__shared_weak_count *v175;

  if (!a1)
  {
    v12 = atomic_load((unsigned __int8 *)&qword_1EF921268);
    if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921268))
    {
      qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
      __cxa_guard_release(&qword_1EF921268);
    }
    v13 = qword_1EF921260;
    if (!os_log_type_enabled((os_log_t)qword_1EF921260, OS_LOG_TYPE_ERROR))
      return 4294944343;
    *(_WORD *)buf = 0;
    v14 = "invalid argument for handle.";
    goto LABEL_66;
  }
  if (!a2)
  {
    v15 = atomic_load((unsigned __int8 *)&qword_1EF921268);
    if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921268))
    {
      qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
      __cxa_guard_release(&qword_1EF921268);
    }
    v13 = qword_1EF921260;
    if (!os_log_type_enabled((os_log_t)qword_1EF921260, OS_LOG_TYPE_ERROR))
      return 4294944343;
    *(_WORD *)buf = 0;
    v14 = "invalid argument for params.";
LABEL_66:
    _os_log_error_impl(&dword_1C9870000, v13, OS_LOG_TYPE_ERROR, v14, buf, 2u);
    return 4294944343;
  }
  v3 = *(uint64_t ****)(a1 + 16);
  if (!v3)
  {
    v19 = atomic_load((unsigned __int8 *)&qword_1EF921268);
    if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921268))
    {
      qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
      __cxa_guard_release(&qword_1EF921268);
    }
    v20 = qword_1EF921260;
    if (!os_log_type_enabled((os_log_t)qword_1EF921260, OS_LOG_TYPE_ERROR))
      return 4294944346;
    *(_WORD *)buf = 0;
    v21 = "invalid segmentation module.";
    goto LABEL_68;
  }
  if (*v3 && *(_QWORD *)(***v3 + 16))
  {
    v4 = operator new(0x20uLL);
    v4[1] = 0;
    v5 = v4 + 1;
    v4[2] = 0;
    *v4 = &off_1E8295720;
    v6 = operator new();
    *(_QWORD *)(v6 + 32) = 0;
    *(_OWORD *)v6 = 0u;
    *(_OWORD *)(v6 + 16) = 0u;
    v7 = (cva::DictionaryHandler *)cva::DictionaryHandler::DictionaryHandler((cva::DictionaryHandler *)(v6 + 40), a2);
    v8 = v4 + 3;
    *(_DWORD *)(v6 + 56) = 0;
    v4[3] = v6;
    hasKey = cva::DictionaryHandler::hasKey(v7, CFSTR("camera_type"));
    v10 = v4[3];
    if (hasKey)
    {
      if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)(v10 + 40), CFSTR("camera_type")))
      {
        cva::DictionaryHandler::item((cva::DictionaryHandler *)(*v8 + 40), CFSTR("camera_type"));
        v11 = cva::ItemHandler::getValue<int>();
        cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
      }
      else
      {
        v11 = -1;
      }
      v10 = *v8;
      *(_DWORD *)(*v8 + 56) = v11;
    }
    if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)(v10 + 40), CFSTR("rgb")))
    {
      Dictionary = (const __CFDictionary *)cva::DictionaryHandler::getDictionary((cva::DictionaryHandler *)(*v8 + 40));
      *(_QWORD *)*v8 = CFDictionaryGetValue(Dictionary, CFSTR("rgb"));
    }
    v23 = cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)(*v8 + 40), CFSTR("depth"));
    v24 = (cva::DictionaryHandler *)(*v8 + 40);
    if (v23)
    {
      v25 = (const __CFDictionary *)cva::DictionaryHandler::getDictionary(v24);
      v26 = CFSTR("depth");
    }
    else
    {
      if (!cva::DictionaryHandler::hasKey(v24, CFSTR("normalized_disparity")))
        goto LABEL_31;
      v25 = (const __CFDictionary *)cva::DictionaryHandler::getDictionary((cva::DictionaryHandler *)(*v8 + 40));
      v26 = CFSTR("normalized_disparity");
    }
    *(_QWORD *)(*v8 + 8) = CFDictionaryGetValue(v25, v26);
LABEL_31:
    if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)(*v8 + 40), CFSTR("output_segmentation")))
    {
      v27 = (const __CFDictionary *)cva::DictionaryHandler::getDictionary((cva::DictionaryHandler *)(*v8 + 40));
      *(_QWORD *)(*v8 + 16) = CFDictionaryGetValue(v27, CFSTR("output_segmentation"));
    }
    if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)(*v8 + 40), CFSTR("output_foreground_color")))
    {
      v28 = (const __CFDictionary *)cva::DictionaryHandler::getDictionary((cva::DictionaryHandler *)(*v8 + 40));
      *(_QWORD *)(*v8 + 24) = CFDictionaryGetValue(v28, CFSTR("output_foreground_color"));
    }
    if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)(*v8 + 40), CFSTR("callback")))
    {
      objc_msgSend((id)cva::DictionaryHandler::getDictionary((cva::DictionaryHandler *)(*v8 + 40)), "objectForKey:", CFSTR("callback"));
      v29 = objc_claimAutoreleasedReturnValue();
      v30 = *(void **)(*v8 + 32);
      *(_QWORD *)(*v8 + 32) = v29;

    }
    v170 = v4 + 3;
    v171 = (std::__shared_weak_count *)v4;
    v31 = *v3;
    if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)(v4[3] + 40), CFSTR("camera_type")))
    {
      cva::DictionaryHandler::item((cva::DictionaryHandler *)(*v8 + 40), CFSTR("camera_type"));
      v32 = cva::ItemHandler::getValue<int>();
      cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
    }
    else
    {
      v32 = -1;
    }
    v33 = **v31;
    v36 = *(_QWORD *)(v33 + 8);
    v34 = v33 + 8;
    v35 = v36;
    if (!v36)
      goto LABEL_50;
    v37 = v34;
    do
    {
      v38 = *(_DWORD *)(v35 + 32);
      v39 = v38 < v32;
      if (v38 >= v32)
        v40 = (uint64_t *)v35;
      else
        v40 = (uint64_t *)(v35 + 8);
      if (!v39)
        v37 = v35;
      v35 = *v40;
    }
    while (*v40);
    if (v37 == v34 || *(_DWORD *)(v37 + 32) > v32)
    {
LABEL_50:
      v41 = atomic_load((unsigned __int8 *)&qword_1EF921268);
      if ((v41 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921268))
      {
        qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
        __cxa_guard_release(&qword_1EF921268);
      }
      v42 = (id)qword_1EF921260;
      if (!os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
        goto LABEL_52;
      *(_WORD *)buf = 0;
      v64 = "Camera type is not supported";
LABEL_86:
      _os_log_error_impl(&dword_1C9870000, v42, OS_LOG_TYPE_ERROR, v64, buf, 2u);
LABEL_52:

      v43 = 0;
      goto LABEL_53;
    }
    v48 = *v3;
    if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)(*v8 + 40), CFSTR("camera_type")))
    {
      cva::DictionaryHandler::item((cva::DictionaryHandler *)(*v8 + 40), CFSTR("camera_type"));
      v49 = cva::ItemHandler::getValue<int>();
      cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
    }
    else
    {
      v49 = -1;
    }
    v50 = **v48;
    v53 = *(_QWORD *)(v50 + 8);
    v51 = v50 + 8;
    v52 = v53;
    if (v53)
    {
      v54 = v51;
      do
      {
        v55 = *(_DWORD *)(v52 + 32);
        v56 = v55 < v49;
        if (v55 >= v49)
          v57 = (uint64_t *)v52;
        else
          v57 = (uint64_t *)(v52 + 8);
        if (!v56)
          v54 = v52;
        v52 = *v57;
      }
      while (*v57);
      if (v54 != v51 && *(_DWORD *)(v54 + 32) <= v49)
      {
        v58 = *(uint64_t ***)(v54 + 40);
        v59 = *(std::__shared_weak_count **)(v54 + 48);
        if (v59)
        {
          p_shared_owners = (unint64_t *)&v59->__shared_owners_;
          do
            v61 = __ldxr(p_shared_owners);
          while (__stxr(v61 + 1, p_shared_owners));
        }
        v62 = **v58;
        if (v62)
          v63 = *(unsigned __int8 *)(v62 + 64) != 0;
        else
          v63 = 0;
        if (!v59)
          goto LABEL_92;
        v65 = (unint64_t *)&v59->__shared_owners_;
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
          if (!v63)
            goto LABEL_96;
        }
        else
        {
LABEL_92:
          if (!v63)
            goto LABEL_96;
        }
        if (!*(_QWORD *)(*v8 + 8))
        {
          v89 = atomic_load((unsigned __int8 *)&qword_1EF921268);
          if ((v89 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921268))
          {
            qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
            __cxa_guard_release(&qword_1EF921268);
          }
          v42 = (id)qword_1EF921260;
          if (!os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
            goto LABEL_52;
          *(_WORD *)buf = 0;
          v64 = "Segmentation requires depth input";
          goto LABEL_86;
        }
      }
    }
LABEL_96:
    v67 = (uint64_t *)*v3;
    v168 = v4 + 3;
    v169 = (std::__shared_weak_count *)v4;
    do
      v68 = __ldxr(v5);
    while (__stxr(v68 + 1, v5));
    if (!*(_QWORD *)(*v8 + 32))
    {
      v72 = atomic_load((unsigned __int8 *)&qword_1EF921268);
      if ((v72 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921268))
      {
        qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
        __cxa_guard_release(&qword_1EF921268);
      }
      v73 = (id)qword_1EF921260;
      if (!os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
        goto LABEL_170;
      *(_WORD *)buf = 0;
      v74 = "callback parameter missing";
      goto LABEL_169;
    }
    if ((cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)(*v8 + 40), CFSTR("camera_type")) & 1) == 0)
    {
      v75 = atomic_load((unsigned __int8 *)&qword_1EF921268);
      if ((v75 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921268))
      {
        qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
        __cxa_guard_release(&qword_1EF921268);
      }
      v73 = (id)qword_1EF921260;
      if (!os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
        goto LABEL_170;
      *(_WORD *)buf = 0;
      v74 = "camera type missing";
      goto LABEL_169;
    }
    v69 = *v8;
    if (!*(_QWORD *)*v8 && !*(_QWORD *)(v69 + 8))
    {
      v88 = atomic_load((unsigned __int8 *)&qword_1EF921268);
      if ((v88 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921268))
      {
        qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
        __cxa_guard_release(&qword_1EF921268);
      }
      v73 = (id)qword_1EF921260;
      if (!os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
        goto LABEL_170;
      *(_WORD *)buf = 0;
      v74 = "rgb or depth parameter missing";
      goto LABEL_169;
    }
    if ((cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)(v69 + 40), CFSTR("depth")) & 1) == 0
      && cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)(*v8 + 40), CFSTR("normalized_disparity"))&& (!cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)(*v8 + 40), CFSTR("disparity_normalization_offset"))|| !cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)(*v8 + 40), CFSTR("disparity_normalization_multiplier"))|| (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)(*v8 + 40), CFSTR("disparity_invalid_value")) & 1) == 0))
    {
      v77 = atomic_load((unsigned __int8 *)&qword_1EF921268);
      if ((v77 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921268))
      {
        qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
        __cxa_guard_release(&qword_1EF921268);
      }
      v73 = (id)qword_1EF921260;
      if (!os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
        goto LABEL_170;
      *(_WORD *)buf = 0;
      v74 = "disparity normalization offset, multiplier, and/or invalid value missing";
      goto LABEL_169;
    }
    if ((cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)(*v8 + 40), CFSTR("timestamp")) & 1) == 0)
    {
      v76 = atomic_load((unsigned __int8 *)&qword_1EF921268);
      if ((v76 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921268))
      {
        qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
        __cxa_guard_release(&qword_1EF921268);
      }
      v73 = (id)qword_1EF921260;
      if (!os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
        goto LABEL_170;
      *(_WORD *)buf = 0;
      v74 = "timestamp parameter missing";
      goto LABEL_169;
    }
    v70 = cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)(*v8 + 40), CFSTR("gravity_direction"));
    if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)(*v8 + 40), CFSTR("color_camera_x_direction")))v71 = cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)(*v8 + 40), CFSTR("color_camera_y_direction"));
    else
      v71 = 0;
    if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)(*v8 + 40), CFSTR("depth_camera_x_direction")))v78 = cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)(*v8 + 40), CFSTR("depth_camera_y_direction"));
    else
      v78 = 0;
    if (!v71)
      goto LABEL_128;
    v164 = sub_1C988335C(*v8);
    v79 = sub_1C9883494(*v8);
    v80 = (int32x4_t)vmulq_f32((float32x4_t)v164, (float32x4_t)v164);
    v80.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v80, 2), vadd_f32(*(float32x2_t *)v80.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v80.i8, 1))).u32[0];
    v81 = vrsqrte_f32((float32x2_t)v80.u32[0]);
    v82 = vmul_f32(v81, vrsqrts_f32((float32x2_t)v80.u32[0], vmul_f32(v81, v81)));
    v80.i32[0] = vmul_f32(v82, vrsqrts_f32((float32x2_t)v80.u32[0], vmul_f32(v82, v82))).u32[0];
    v83 = (int32x4_t)vmulq_f32((float32x4_t)v79, (float32x4_t)v79);
    v83.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v83, 2), vadd_f32(*(float32x2_t *)v83.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v83.i8, 1))).u32[0];
    v84 = vrsqrte_f32((float32x2_t)v83.u32[0]);
    v85 = vmul_f32(v84, vrsqrts_f32((float32x2_t)v83.u32[0], vmul_f32(v84, v84)));
    v86 = vmulq_f32(vmulq_n_f32((float32x4_t)v164, *(float *)v80.i32), vmulq_n_f32((float32x4_t)v79, vmul_f32(v85, vrsqrts_f32((float32x2_t)v83.u32[0], vmul_f32(v85, v85))).f32[0]));
    if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v86, 2), vaddq_f32(v86, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v86.f32, 1))).f32[0]) >= 0.001)
    {
      v90 = atomic_load((unsigned __int8 *)&qword_1EF921268);
      if ((v90 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921268))
      {
        qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
        __cxa_guard_release(&qword_1EF921268);
      }
      v91 = (id)qword_1EF921260;
      if (os_log_type_enabled(v91, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_1C9870000, v91, OS_LOG_TYPE_ERROR, "color camera directions need to be orthogonal", buf, 2u);
      }

      v87 = 0;
    }
    else
    {
LABEL_128:
      v87 = 1;
    }
    if (v78)
    {
      v165 = sub_1C98835CC(*v8);
      v92 = sub_1C9883704(*v8);
      v93 = (int32x4_t)vmulq_f32((float32x4_t)v165, (float32x4_t)v165);
      v93.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v93, 2), vadd_f32(*(float32x2_t *)v93.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v93.i8, 1))).u32[0];
      v94 = vrsqrte_f32((float32x2_t)v93.u32[0]);
      v95 = vmul_f32(v94, vrsqrts_f32((float32x2_t)v93.u32[0], vmul_f32(v94, v94)));
      v93.i32[0] = vmul_f32(v95, vrsqrts_f32((float32x2_t)v93.u32[0], vmul_f32(v95, v95))).u32[0];
      v96 = (int32x4_t)vmulq_f32((float32x4_t)v92, (float32x4_t)v92);
      v96.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v96, 2), vadd_f32(*(float32x2_t *)v96.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v96.i8, 1))).u32[0];
      v97 = vrsqrte_f32((float32x2_t)v96.u32[0]);
      v98 = vmul_f32(v97, vrsqrts_f32((float32x2_t)v96.u32[0], vmul_f32(v97, v97)));
      v99 = vmulq_f32(vmulq_n_f32((float32x4_t)v165, *(float *)v93.i32), vmulq_n_f32((float32x4_t)v92, vmul_f32(v98, vrsqrts_f32((float32x2_t)v96.u32[0], vmul_f32(v98, v98))).f32[0]));
      if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v99, 2), vaddq_f32(v99, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v99.f32, 1))).f32[0]) >= 0.001)
      {
        v100 = atomic_load((unsigned __int8 *)&qword_1EF921268);
        if ((v100 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921268))
        {
          qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
          __cxa_guard_release(&qword_1EF921268);
        }
        v101 = (id)qword_1EF921260;
        if (os_log_type_enabled(v101, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_1C9870000, v101, OS_LOG_TYPE_ERROR, "depth camera directions need to be orthogonal", buf, 2u);
        }

        v87 = 0;
      }
      if (!v71)
        goto LABEL_166;
      v166 = sub_1C988335C(*v8);
      v162 = sub_1C9883494(*v8);
      v160 = sub_1C98835CC(*v8);
      v102 = sub_1C9883704(*v8);
      v103 = (int32x4_t)vmulq_f32((float32x4_t)v166, (float32x4_t)v166);
      v103.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v103, 2), vadd_f32(*(float32x2_t *)v103.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v103.i8, 1))).u32[0];
      v104 = vrsqrte_f32((float32x2_t)v103.u32[0]);
      v105 = vmul_f32(v104, vrsqrts_f32((float32x2_t)v103.u32[0], vmul_f32(v104, v104)));
      v106 = vmulq_n_f32((float32x4_t)v166, vmul_f32(v105, vrsqrts_f32((float32x2_t)v103.u32[0], vmul_f32(v105, v105))).f32[0]);
      v107 = (int32x4_t)vmulq_f32((float32x4_t)v162, (float32x4_t)v162);
      v107.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v107, 2), vadd_f32(*(float32x2_t *)v107.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v107.i8, 1))).u32[0];
      v108 = vrsqrte_f32((float32x2_t)v107.u32[0]);
      v109 = vmul_f32(v108, vrsqrts_f32((float32x2_t)v107.u32[0], vmul_f32(v108, v108)));
      v110 = vmulq_n_f32((float32x4_t)v162, vmul_f32(v109, vrsqrts_f32((float32x2_t)v107.u32[0], vmul_f32(v109, v109))).f32[0]);
      v111 = (int32x4_t)vmulq_f32((float32x4_t)v160, (float32x4_t)v160);
      v111.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v111, 2), vadd_f32(*(float32x2_t *)v111.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v111.i8, 1))).u32[0];
      v112 = vrsqrte_f32((float32x2_t)v111.u32[0]);
      v113 = vmul_f32(v112, vrsqrts_f32((float32x2_t)v111.u32[0], vmul_f32(v112, v112)));
      v111.i32[0] = vmul_f32(v113, vrsqrts_f32((float32x2_t)v111.u32[0], vmul_f32(v113, v113))).u32[0];
      v114 = (int32x4_t)vmulq_f32((float32x4_t)v102, (float32x4_t)v102);
      v114.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v114, 2), vadd_f32(*(float32x2_t *)v114.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v114.i8, 1))).u32[0];
      v115 = vmulq_n_f32((float32x4_t)v160, *(float *)v111.i32);
      *(float32x2_t *)v111.i8 = vrsqrte_f32((float32x2_t)v114.u32[0]);
      *(float32x2_t *)v111.i8 = vmul_f32(*(float32x2_t *)v111.i8, vrsqrts_f32((float32x2_t)v114.u32[0], vmul_f32(*(float32x2_t *)v111.i8, *(float32x2_t *)v111.i8)));
      v116 = vmulq_n_f32((float32x4_t)v102, vmul_f32(*(float32x2_t *)v111.i8, vrsqrts_f32((float32x2_t)v114.u32[0], vmul_f32(*(float32x2_t *)v111.i8, *(float32x2_t *)v111.i8))).f32[0]);
      v117 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v110, (int32x4_t)v110), (int8x16_t)v110, 0xCuLL), vnegq_f32(v106)), v110, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v106, (int32x4_t)v106), (int8x16_t)v106, 0xCuLL));
      v118 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v117, (int32x4_t)v117), (int8x16_t)v117, 0xCuLL);
      v119 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v116, (int32x4_t)v116), (int8x16_t)v116, 0xCuLL), vnegq_f32(v115)), v116, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v115, (int32x4_t)v115), (int8x16_t)v115, 0xCuLL));
      v120 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v119, (int32x4_t)v119), (int8x16_t)v119, 0xCuLL);
      v121 = (int32x4_t)vmulq_f32(v117, v117);
      v121.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v121.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v121, 2), *(float32x2_t *)v121.i8)).u32[0];
      v122 = vrsqrte_f32((float32x2_t)v121.u32[0]);
      v123 = vmul_f32(v122, vrsqrts_f32((float32x2_t)v121.u32[0], vmul_f32(v122, v122)));
      v124 = vmulq_n_f32(v118, vmul_f32(v123, vrsqrts_f32((float32x2_t)v121.u32[0], vmul_f32(v123, v123))).f32[0]);
      v125 = (int32x4_t)vmulq_f32(v119, v119);
      v125.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v125.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v125, 2), *(float32x2_t *)v125.i8)).u32[0];
      *(float32x2_t *)v119.f32 = vrsqrte_f32((float32x2_t)v125.u32[0]);
      *(float32x2_t *)v119.f32 = vmul_f32(*(float32x2_t *)v119.f32, vrsqrts_f32((float32x2_t)v125.u32[0], vmul_f32(*(float32x2_t *)v119.f32, *(float32x2_t *)v119.f32)));
      v126 = vsubq_f32(v124, vmulq_n_f32(v120, vmul_f32(*(float32x2_t *)v119.f32, vrsqrts_f32((float32x2_t)v125.u32[0], vmul_f32(*(float32x2_t *)v119.f32, *(float32x2_t *)v119.f32))).f32[0]));
      v127 = vmulq_f32(v126, v126);
      if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v127, 2), vaddq_f32(v127, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v127.f32, 1))).f32[0] >= 0.001)
      {
        v161 = v116;
        v163 = v115;
        v167 = v106;
        v128 = atomic_load((unsigned __int8 *)&qword_1EF921268);
        if ((v128 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921268))
        {
          qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
          __cxa_guard_release(&qword_1EF921268);
        }
        v129 = (id)qword_1EF921260;
        if (os_log_type_enabled(v129, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_1C9870000, v129, OS_LOG_TYPE_ERROR, "color and depth camera directions need to be in the same plane", buf, 2u);
        }

        v87 = 0;
        v115 = v163;
        v106 = v167;
        v116 = v161;
      }
      v130 = vmulq_f32(v106, v115);
      LODWORD(v131) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v130, 2), vaddq_f32(v130, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v130.f32, 1))).u32[0];
      v132 = vmulq_f32(v106, v116);
      v133 = atan2f(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v132, 2), vaddq_f32(v132, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v132.f32, 1))).f32[0], v131)/ 3.14159265* 180.0;
      v134 = fabsf(fmodf(v133, 90.0));
      v135 = vabds_f32(90.0, v134);
      if (v134 >= 0.001 && v135 >= 0.001)
      {
        v137 = atomic_load((unsigned __int8 *)&qword_1EF921268);
        if ((v137 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921268))
        {
          qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
          __cxa_guard_release(&qword_1EF921268);
        }
        v138 = (id)qword_1EF921260;
        if (os_log_type_enabled(v138, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_1C9870000, v138, OS_LOG_TYPE_ERROR, "color and depth cameras need to be rotated in a multiple of 90 degrees", buf, 2u);
        }

        v87 = 0;
      }
      if ((v70 & 1) == 0)
        goto LABEL_166;
    }
    else if ((v70 & v71) != 1 || *(_QWORD *)(*v8 + 8))
    {
LABEL_166:
      v141 = atomic_load((unsigned __int8 *)&qword_1EF921268);
      if ((v141 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921268))
      {
        qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
        __cxa_guard_release(&qword_1EF921268);
      }
      v73 = (id)qword_1EF921260;
      if (!os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
        goto LABEL_170;
      *(_WORD *)buf = 0;
      v74 = "orientation parameters missing";
LABEL_169:
      _os_log_error_impl(&dword_1C9870000, v73, OS_LOG_TYPE_ERROR, v74, buf, 2u);
LABEL_170:

      goto LABEL_171;
    }
    if ((v87 & 1) != 0)
    {
      v139 = *v67;
      if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)(*v168 + 40), CFSTR("camera_type")))
      {
        cva::DictionaryHandler::item((cva::DictionaryHandler *)(*v168 + 40), CFSTR("camera_type"));
        v140 = cva::ItemHandler::getValue<int>();
        cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
      }
      else
      {
        v140 = -1;
      }
      v147 = *(_QWORD *)(*(_QWORD *)v139 + 8);
      if (v147)
      {
        v148 = *(_QWORD *)v139 + 8;
        do
        {
          v149 = *(_DWORD *)(v147 + 32);
          v150 = v149 < v140;
          if (v149 >= v140)
            v151 = (uint64_t *)v147;
          else
            v151 = (uint64_t *)(v147 + 8);
          if (!v150)
            v148 = v147;
          v147 = *v151;
        }
        while (*v151);
        if (v148 != *(_QWORD *)v139 + 8 && *(_DWORD *)(v148 + 32) <= v140)
        {
          if (sub_1C98849A8((uint64_t)(v67 + 3), &v168))
          {
            v152 = v67[1];
            v153 = (std::__shared_weak_count *)operator new(0x40uLL);
            v153->__shared_owners_ = 0;
            v153->__shared_weak_owners_ = 0;
            v153[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E8294D38;
            v153->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295AD8;
            v153[1].__shared_owners_ = (uint64_t)&off_1E8295518;
            v153[1].__shared_weak_owners_ = (uint64_t)v67;
            v153[2].__shared_owners_ = (uint64_t)&v153[1].__shared_owners_;
            *(_QWORD *)buf = v153 + 1;
            v175 = v153;
            v172 = 0;
            v173 = 0;
            v43 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(_QWORD *)v152 + 16))(v152, buf);
            v154 = v175;
            if (v175)
            {
              v155 = (unint64_t *)&v175->__shared_owners_;
              do
                v156 = __ldaxr(v155);
              while (__stlxr(v156 - 1, v155));
              if (!v156)
              {
                ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
                std::__shared_weak_count::__release_weak(v154);
              }
            }
            v157 = v173;
            if (v173)
            {
              v158 = (unint64_t *)&v173->__shared_owners_;
              do
                v159 = __ldaxr(v158);
              while (__stlxr(v159 - 1, v158));
              if (!v159)
              {
                ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
                std::__shared_weak_count::__release_weak(v157);
              }
            }
            goto LABEL_176;
          }
LABEL_175:
          v43 = 0;
LABEL_176:
          v144 = v169;
          if (v169)
          {
            v145 = (unint64_t *)&v169->__shared_owners_;
            do
              v146 = __ldaxr(v145);
            while (__stlxr(v146 - 1, v145));
            if (!v146)
            {
              ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
              std::__shared_weak_count::__release_weak(v144);
            }
          }
LABEL_53:
          v44 = v171;
          if (v171)
          {
            v45 = (unint64_t *)&v171->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          if ((v43 & 1) != 0)
            return 0;
          goto LABEL_60;
        }
      }
LABEL_171:
      v142 = atomic_load((unsigned __int8 *)&qword_1EF921268);
      if ((v142 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921268))
      {
        qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
        __cxa_guard_release(&qword_1EF921268);
      }
      v143 = (id)qword_1EF921260;
      if (os_log_type_enabled(v143, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_1C9870000, v143, OS_LOG_TYPE_ERROR, "invalid data", buf, 2u);
      }

      goto LABEL_175;
    }
    goto LABEL_166;
  }
  v17 = atomic_load((unsigned __int8 *)&qword_1EF921268);
  if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921268))
  {
    qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
    __cxa_guard_release(&qword_1EF921268);
  }
  v18 = (id)qword_1EF921260;
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1C9870000, v18, OS_LOG_TYPE_ERROR, "Segmentation is not properly initialized", buf, 2u);
  }

LABEL_60:
  v47 = atomic_load((unsigned __int8 *)&qword_1EF921268);
  if ((v47 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF921268))
    {
      qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
      __cxa_guard_release(&qword_1EF921268);
    }
  }
  v20 = qword_1EF921260;
  if (!os_log_type_enabled((os_log_t)qword_1EF921260, OS_LOG_TYPE_ERROR))
    return 4294944346;
  *(_WORD *)buf = 0;
  v21 = "frame was not processed.";
LABEL_68:
  _os_log_error_impl(&dword_1C9870000, v20, OS_LOG_TYPE_ERROR, v21, buf, 2u);
  return 4294944346;
}

void sub_1C98802C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  uint64_t v14;
  va_list va2;
  uint64_t v16;
  va_list va3;

  va_start(va3, a7);
  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v14 = va_arg(va3, _QWORD);
  v16 = va_arg(va3, _QWORD);
  sub_1C987C140((uint64_t)va3);
  sub_1C987C140((uint64_t)va2);
  sub_1C987C140((uint64_t)va);
  sub_1C987C140((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t CVASegmentationDestroy(const void *a1)
{
  unsigned __int8 v2;
  NSObject *v3;
  uint8_t v4[16];

  if (a1)
  {
    CFRelease(a1);
    return 0;
  }
  else
  {
    v2 = atomic_load((unsigned __int8 *)&qword_1EF921268);
    if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921268))
    {
      qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
      __cxa_guard_release(&qword_1EF921268);
    }
    v3 = qword_1EF921260;
    if (os_log_type_enabled((os_log_t)qword_1EF921260, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v4 = 0;
      _os_log_error_impl(&dword_1C9870000, v3, OS_LOG_TYPE_ERROR, "invalid argument for handle.", v4, 2u);
    }
    return 4294944343;
  }
}

void sub_1C9880450(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (a1)
  {
    sub_1C9880450(*a1);
    sub_1C9880450(a1[1]);
    v2 = (std::__shared_weak_count *)a1[6];
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    operator delete(a1);
  }
}

void sub_1C98804C0(_QWORD *a1, uint64_t *a2, const void *a3, const void *a4)
{
  _QWORD *v8;
  cva::DictionaryHandler *v9;
  _DWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  _BYTE v17[16];
  void *v18[2];
  int v19;
  void *memptr;

  v8 = operator new(0x28uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E8295758;
  v9 = (cva::DictionaryHandler *)(v8 + 3);
  cva::DictionaryHandler::DictionaryHandler((cva::DictionaryHandler *)(v8 + 3));
  *a1 = v8 + 3;
  a1[1] = v8;
  cva::DictionaryHandler::DictionaryHandler((cva::DictionaryHandler *)v17);
  v18[1] = (void *)8;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, 0x20uLL, 0x49090899uLL);
  v10 = memptr;
  v18[0] = memptr;
  v19 = 3;
  *(_QWORD *)memptr = 7;
  v10[2] = 0;
  cva::ItemHandler::createVector<int>();
  free(v18[0]);
  cva::DictionaryHandler::setItem((cva::DictionaryHandler *)v17, CFSTR("version"), (const cva::ItemHandler *)&v15);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v15);
  cva::ItemHandler::ItemHandler();
  cva::DictionaryHandler::setItem((cva::DictionaryHandler *)(v8 + 3), CFSTR("meta"), (const cva::ItemHandler *)v18);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v18);
  v11 = *a2;
  if (!v11)
    goto LABEL_16;
  if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)(*(_QWORD *)v11 + 40), CFSTR("timestamp")))
  {
    cva::DictionaryHandler::item((cva::DictionaryHandler *)(*(_QWORD *)v11 + 40), CFSTR("timestamp"));
    cva::ItemHandler::getDictionary((cva::ItemHandler *)v18);
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v18);
    if (v15)
    {
      cva::ItemHandler::ItemHandler();
      cva::DictionaryHandler::setItem(v9, CFSTR("timestamp"), (const cva::ItemHandler *)v18);
      cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v18);
    }
    if (a3)
    {
LABEL_6:
      cva::ItemHandler::ItemHandler((cva::ItemHandler *)v18, a3);
      cva::DictionaryHandler::setItem(v9, CFSTR("output_segmentation"), (const cva::ItemHandler *)v18);
      cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v18);
      if (!a4)
        goto LABEL_7;
LABEL_11:
      cva::ItemHandler::ItemHandler((cva::ItemHandler *)v18, a4);
      cva::DictionaryHandler::setItem(v9, CFSTR("output_foreground_color"), (const cva::ItemHandler *)v18);
      cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v18);
      v12 = v16;
      if (!v16)
        goto LABEL_16;
      goto LABEL_12;
    }
  }
  else
  {
    v15 = 0;
    v16 = 0;
    if (a3)
      goto LABEL_6;
  }
  if (a4)
    goto LABEL_11;
LABEL_7:
  v12 = v16;
  if (!v16)
    goto LABEL_16;
LABEL_12:
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
LABEL_16:
  cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)v17);
}

void sub_1C9880700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13)
{
  uint64_t v13;

  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&a13);
  sub_1C987C140((uint64_t)&a9);
  cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)&a11);
  sub_1C987C140(v13);
  _Unwind_Resume(a1);
}

void sub_1C9880788()
{
  JUMPOUT(0x1C9880778);
}

void sub_1C9880790(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_1C98807A8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295758;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1C98807B8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295758;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA44AFCLL);
}

void sub_1C98807E8(uint64_t a1)
{
  cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)(a1 + 24));
}

void **sub_1C98807F4(void **a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  return sub_1C98809C8(a1, __s, v4);
}

uint64_t *sub_1C9880828(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = a2[2];
      if (*(_BYTE *)(v2 + 24))
        break;
      v3 = *(uint64_t **)(v2 + 16);
      v4 = *v3;
      if (*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if (*(uint64_t **)v2 == a2)
          {
            v9 = (uint64_t *)a2[2];
          }
          else
          {
            v9 = *(uint64_t **)(v2 + 8);
            v10 = *v9;
            *(_QWORD *)(v2 + 8) = *v9;
            if (v10)
            {
              *(_QWORD *)(v10 + 16) = v2;
              v3 = *(uint64_t **)(v2 + 16);
            }
            v9[2] = (uint64_t)v3;
            *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = v9;
            *v9 = v2;
            *(_QWORD *)(v2 + 16) = v9;
            v3 = (uint64_t *)v9[2];
            v2 = *v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v14 = *(_QWORD *)(v2 + 8);
          *v3 = v14;
          if (v14)
            *(_QWORD *)(v14 + 16) = v3;
          *(_QWORD *)(v2 + 16) = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          *(_QWORD *)(v2 + 8) = v3;
          v3[2] = v2;
          return result;
        }
      }
      else if (!v4 || (v6 = *(unsigned __int8 *)(v4 + 24), v5 = (_BYTE *)(v4 + 24), v6))
      {
        if (*(uint64_t **)v2 == a2)
        {
          v11 = a2[1];
          *(_QWORD *)v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = *(uint64_t **)(v2 + 16);
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = a2;
          a2[1] = v2;
          *(_QWORD *)(v2 + 16) = a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v12 = (uint64_t *)v3[1];
        v13 = *v12;
        v3[1] = *v12;
        if (v13)
          *(_QWORD *)(v13 + 16) = v3;
        v12[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v12;
        *v12 = (uint64_t)v3;
        v3[2] = (uint64_t)v12;
        return result;
      }
      *(_BYTE *)(v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void **sub_1C98809C8(void **__dst, void *__src, size_t __len)
{
  unint64_t v6;
  void *v7;
  unint64_t v8;
  void *v9;
  unint64_t v10;
  size_t v11;
  unint64_t v12;
  uint64_t v13;

  LODWORD(v6) = *((char *)__dst + 23);
  if ((v6 & 0x80000000) != 0)
  {
    v10 = (unint64_t)__dst[2];
    v8 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (__len > v8)
    {
      v11 = 0x7FFFFFFFFFFFFFF7;
      if (0x7FFFFFFFFFFFFFF7 - (v10 & 0x7FFFFFFFFFFFFFFFLL) >= __len - v8)
      {
        v9 = *__dst;
        if (v8 > 0x3FFFFFFFFFFFFFF2)
        {
LABEL_15:
          v7 = operator new(v11);
          memcpy(v7, __src, __len);
          if (v8 != 22)
            operator delete(v9);
          __dst[2] = (void *)(v11 | 0x8000000000000000);
          *__dst = v7;
LABEL_23:
          __dst[1] = (void *)__len;
          goto LABEL_24;
        }
LABEL_8:
        v12 = 2 * v8;
        if (__len > 2 * v8)
          v12 = __len;
        v13 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17)
          v13 = v12 | 7;
        if (v12 >= 0x17)
          v11 = v13 + 1;
        else
          v11 = 23;
        goto LABEL_15;
      }
LABEL_25:
      abort();
    }
    v6 = HIBYTE(v10);
    v7 = *__dst;
  }
  else
  {
    v7 = __dst;
    if (__len > 0x16)
    {
      if (__len - 0x7FFFFFFFFFFFFFF7 >= 0x800000000000001FLL)
      {
        v8 = 22;
        v9 = __dst;
        goto LABEL_8;
      }
      goto LABEL_25;
    }
  }
  if (__len)
  {
    memmove(v7, __src, __len);
    LOBYTE(v6) = *((_BYTE *)__dst + 23);
  }
  if ((v6 & 0x80) != 0)
    goto LABEL_23;
  *((_BYTE *)__dst + 23) = __len & 0x7F;
LABEL_24:
  *((_BYTE *)v7 + __len) = 0;
  return __dst;
}

void sub_1C9880B20(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E82956E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1C9880B30(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E82956E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA44AFCLL);
}

uint64_t sub_1C9880B60(uint64_t result)
{
  uint64_t v1;
  void *v2;
  __CVBuffer *v3;
  __CVBuffer *v4;
  __CVBuffer *v5;
  __CVBuffer *v6;
  __CVBuffer *v7;
  OpaqueVTPixelTransferSession *v8;
  uint64_t v9;
  uint64_t v10;
  __CVBuffer *v11;
  uint64_t v12;
  uint64_t v13;
  __CVBuffer *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;

  v1 = *(_QWORD *)(result + 24);
  *(_QWORD *)(result + 24) = 0;
  if (v1)
  {
    v2 = *(void **)(v1 + 216);
    if (v2)
    {
      free(v2);
      *(_QWORD *)(v1 + 216) = 0;
    }
    v3 = *(__CVBuffer **)(v1 + 184);
    if (v3)
      CVPixelBufferRelease(v3);
    v4 = *(__CVBuffer **)(v1 + 176);
    if (v4)
      CVPixelBufferRelease(v4);
    v5 = *(__CVBuffer **)(v1 + 168);
    if (v5)
      CVPixelBufferRelease(v5);
    v6 = *(__CVBuffer **)(v1 + 160);
    if (v6)
      CVPixelBufferRelease(v6);
    v7 = *(__CVBuffer **)(v1 + 152);
    if (v7)
      CVPixelBufferRelease(v7);
    free(*(void **)(v1 + 128));
    free(*(void **)(v1 + 104));
    *(_QWORD *)(v1 + 88) = &off_1E8294A28;
    v8 = *(OpaqueVTPixelTransferSession **)(v1 + 96);
    if (v8)
    {
      VTPixelTransferSessionInvalidate(v8);
      CFRelease(*(CFTypeRef *)(v1 + 96));
    }
    v9 = *(_QWORD *)(v1 + 72);
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v10 = *(_QWORD *)(v1 + 80);
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v11 = *(__CVBuffer **)(v1 + 64);
    if (v11)
      CVPixelBufferRelease(v11);
    v12 = *(_QWORD *)(v1 + 48);
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    v13 = *(_QWORD *)(v1 + 56);
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(__CVBuffer **)(v1 + 40);
    if (v14)
      CVPixelBufferRelease(v14);
    v15 = *(std::__shared_weak_count **)(v1 + 8);
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    JUMPOUT(0x1CAA44AFCLL);
  }
  return result;
}

void sub_1C9880CC4(uint64_t a1, uint64_t *a2, __CVBuffer ****a3)
{
  __CVBuffer ***v6;
  __CVBuffer **v7;
  __CVBuffer *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  NSObject *v15;
  unsigned __int8 v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  std::__shared_weak_count *v23;
  uint64_t **v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  __CVBuffer ***v28;
  __CVBuffer *v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  NSObject *v32;
  __IOSurface *IOSurface;
  std::__shared_weak_count *v34;
  uint64_t *v35;
  unint64_t *v36;
  unint64_t v37;
  __CVBuffer *v38;
  __CVBuffer *v39;
  uint64_t *v40;
  uint64_t v41;
  _BOOL4 v42;
  BOOL v43;
  unsigned __int8 v44;
  NSObject *v45;
  uint64_t v46;
  unsigned __int8 v47;
  NSObject *v48;
  __IOSurface *v49;
  unsigned __int8 v50;
  unsigned __int8 v51;
  int v52;
  int v53;
  int v54;
  int v55;
  unint64_t v56;
  int v57;
  unsigned __int8 v58;
  unsigned __int8 v59;
  int v60;
  uint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  __int128 v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  __CVBuffer ***v76;
  int v77;
  __CFDictionary *Dictionary;
  uint64_t **v79;
  const void *v80;
  __CFDictionary *v81;
  const void *v82;
  __CFDictionary *v83;
  const void *v84;
  __CFDictionary *v85;
  const void *v86;
  unsigned __int8 v87;
  NSObject *v88;
  __int128 v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  unint64_t v104;
  CVPixelBufferRef *v105;
  _DWORD *v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  int v114;
  int v115;
  uint64_t *v116;
  unsigned int v117;
  int v118;
  int v119;
  unsigned int v121;
  CVPixelBufferRef v122;
  uint64_t *v123;
  __CVBuffer *v124;
  NSObject *v125;
  const char *BaseAddress;
  size_t BytesPerRow;
  uint32x4_t v128;
  float32x4_t v129;
  uint64_t *v130;
  unint64_t v131;
  _BOOL4 v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  const char *v140;
  BOOL v141;
  const char *v142;
  const char *v143;
  float *v144;
  uint64_t v145;
  float *v146;
  float *v147;
  float *v148;
  int v149;
  int v150;
  __int8 *v151;
  float v152;
  float v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  float32x4_t v160;
  const char *v161;
  BOOL v162;
  const char *v163;
  const char *v164;
  float *v165;
  uint64_t v166;
  float *v167;
  float *v168;
  float *v169;
  int v170;
  int v171;
  __int8 *v172;
  unsigned int v173;
  unsigned int v174;
  uint64_t v175;
  float v176;
  float v177;
  __int16 v178;
  NSObject *v179;
  float v180;
  float v181;
  uint64_t *v182;
  _QWORD *v183;
  int v184;
  size_t v185;
  __CVBuffer *v186;
  int v187;
  size_t v188;
  _QWORD *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unsigned int v193;
  uint64_t v194;
  CVPixelBufferRef *v195;
  __CVBuffer *v196;
  int Width;
  int Height;
  unsigned int v199;
  _BYTE *v200;
  float *v201;
  __CVBuffer *v202;
  int i;
  _BYTE *v204;
  float v205;
  float v206;
  int j;
  _BYTE *v208;
  float v209;
  float v210;
  float v211;
  NSObject *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  int v216;
  float *v217;
  _BOOL4 v219;
  int v220;
  float32x4_t v221;
  __int128 v222;
  uint64_t v223;
  uint64_t v224;
  float *v225;
  char *v227;
  float *v228;
  uint64_t v229;
  const float *v230;
  const float *v231;
  const float *v232;
  int8x16_t v233;
  int8x16_t v234;
  int8x16_t v235;
  int8x16_t v236;
  int v237;
  int v238;
  float v239;
  float v240;
  float v241;
  float v242;
  float v243;
  float v244;
  float v245;
  float v246;
  NSObject *v247;
  int v248;
  __int128 v249;
  float32x4_t v250;
  __int128 v251;
  uint64_t v252;
  uint64_t v253;
  float *v254;
  char *v256;
  float *v257;
  uint64_t v258;
  const float *v259;
  const float *v260;
  const float *v261;
  int8x16_t v262;
  float32x4_t v263;
  float32x4_t v264;
  float32x4_t v265;
  float32x4_t v266;
  int8x16_t v267;
  float32x4_t v268;
  float32x4_t v269;
  float32x4_t v270;
  float32x4_t v271;
  int8x16_t v272;
  int8x16_t v273;
  int8x16_t v274;
  int8x16_t v275;
  int v276;
  int v277;
  float v278;
  float v279;
  float v280;
  float v281;
  float v282;
  float v283;
  float v284;
  float v285;
  float v286;
  CVPixelBufferRef *v287;
  __CVBuffer *v288;
  double v289;
  double v290;
  NSObject *v291;
  OpaqueVTPixelTransferSession *v292;
  uint64_t v293;
  int v294;
  unsigned int v295;
  uint64_t v296;
  char v297;
  int v298;
  uint64_t v299;
  char v300;
  unsigned int v301;
  int v302[2];
  __CVBuffer *pixelBuffer;
  __CVBuffer *destinationBuffer;
  __CVBuffer ***v305;
  std::__shared_weak_count *v306;
  __CVBuffer ***v307;
  std::__shared_weak_count *v308;
  CVPixelBufferRef texture;
  CVPixelBufferRef pixelBufferOut;
  uint64_t **v311;
  std::__shared_weak_count *v312;
  CVPixelBufferRef __dst[2];
  uint64_t v314;
  __int128 v315;
  void *__p;
  _QWORD *v317;
  _QWORD *v318;
  uint8_t buf[16];
  _BYTE v320[24];
  uint64_t v321;
  float32x4x3_t v322;
  float32x4x3_t v323;
  float32x4x3_t v324;
  float32x4x3_t v325;
  float32x4x3_t v326;
  float32x4x3_t v327;
  float32x4x3_t v328;
  float32x4x3_t v329;
  float32x4x3_t v330;
  float32x4x3_t v331;
  float32x4x3_t v332;
  float32x4x3_t v333;
  float32x4x3_t v334;
  float32x4x3_t v335;
  int8x16x4_t v336;
  int8x16x4_t v337;
  int8x16x4_t v338;
  int8x16x4_t v339;
  int8x16x4_t v340;
  int8x16x4_t v341;

  v321 = *MEMORY[0x1E0C80C00];
  if (*a3)
  {
    std::mutex::lock(&stru_1EF920F60);
    v6 = *a3;
    v7 = **a3;
    v8 = *v7;
    if (!*v7)
    {
      v16 = atomic_load((unsigned __int8 *)&qword_1EF921268);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921268))
      {
        qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
        __cxa_guard_release(&qword_1EF921268);
      }
      v17 = (id)qword_1EF921260;
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_1C9870000, v17, OS_LOG_TYPE_ERROR, "color should never be nullptr", buf, 2u);
      }
      goto LABEL_13;
    }
    v9 = *a2;
    if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)(v7 + 5), CFSTR("camera_type")))
    {
      cva::DictionaryHandler::item((cva::DictionaryHandler *)(*v6 + 5), CFSTR("camera_type"));
      v10 = cva::ItemHandler::getValue<int>();
      cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
      v13 = *(_QWORD *)(v9 + 8);
      v12 = v9 + 8;
      v11 = v13;
      if (!v13)
        goto LABEL_24;
    }
    else
    {
      v10 = -1;
      v18 = *(_QWORD *)(v9 + 8);
      v12 = v9 + 8;
      v11 = v18;
      if (!v18)
      {
LABEL_24:
        v19 = v12;
LABEL_25:
        if (v19 != *a2 + 8)
        {
          kdebug_trace();
          CVPixelBufferGetWidth(v8);
          CVPixelBufferGetHeight(v8);
          v24 = *(uint64_t ***)(v19 + 40);
          v23 = *(std::__shared_weak_count **)(v19 + 48);
          v311 = v24;
          v312 = v23;
          if (v23)
          {
            p_shared_owners = (unint64_t *)&v23->__shared_owners_;
            do
              v26 = __ldxr(p_shared_owners);
            while (__stxr(v26 + 1, p_shared_owners));
          }
          v27 = *v24;
          pixelBufferOut = 0;
          v28 = *a3;
          v29 = (**a3)[2];
          texture = 0;
          pixelBufferOut = v29;
          texture = (*v28)[3];
          if (v29)
          {
            CVPixelBufferRetain(v29);
          }
          else
          {
            v31 = atomic_load((unsigned __int8 *)&qword_1EF921268);
            if ((v31 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921268))
            {
              qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
              __cxa_guard_release(&qword_1EF921268);
            }
            v32 = (id)qword_1EF921260;
            if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)buf = 0;
              _os_log_debug_impl(&dword_1C9870000, v32, OS_LOG_TYPE_DEBUG, "segmentation algorithm supports segmentation output, but no segmentation buffer available - creating buffer locally", buf, 2u);
            }

            CVPixelBufferCreate(0, *((int *)v27 + 4), *((int *)v27 + 5), *((_DWORD *)v27 + 7), 0, &pixelBufferOut);
            IOSurface = CVPixelBufferGetIOSurface(pixelBufferOut);
            if (IOSurface)
              IOSurfaceSetValue(IOSurface, (CFStringRef)*MEMORY[0x1E0CBC048], CFSTR("AppleCVA:Seg:OutputSeg"));
          }
          if (texture)
          {
            CVPixelBufferRetain(texture);
          }
          else
          {
            v46 = **v24;
            if (v46 && *(_BYTE *)(v46 + 65))
            {
              v47 = atomic_load((unsigned __int8 *)&qword_1EF921268);
              if ((v47 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921268))
              {
                qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
                __cxa_guard_release(&qword_1EF921268);
              }
              v48 = (id)qword_1EF921260;
              if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)buf = 0;
                _os_log_debug_impl(&dword_1C9870000, v48, OS_LOG_TYPE_DEBUG, "segmentation algorithm supports foreground color, but no foreground buffer available - creating buffer locally", buf, 2u);
              }

              CVPixelBufferCreate(0, *((int *)v27 + 4), *((int *)v27 + 5), *((_DWORD *)v27 + 6), 0, &texture);
              v49 = CVPixelBufferGetIOSurface(texture);
              if (v49)
                IOSurfaceSetValue(v49, (CFStringRef)*MEMORY[0x1E0CBC048], CFSTR("AppleCVA:Seg:OutputFG"));
            }
          }
          *(_QWORD *)a1 = 0;
          *(_QWORD *)(a1 + 8) = 0;
          v35 = (uint64_t *)*a3;
          v34 = (std::__shared_weak_count *)a3[1];
          v307 = *a3;
          v308 = v34;
          if (v34)
          {
            v36 = (unint64_t *)&v34->__shared_owners_;
            do
              v37 = __ldxr(v36);
            while (__stxr(v37 + 1, v36));
          }
          if (!v35)
          {
            v50 = atomic_load((unsigned __int8 *)&qword_1EF921268);
            if ((v50 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921268))
            {
              qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
              __cxa_guard_release(&qword_1EF921268);
            }
            v45 = (id)qword_1EF921260;
            if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_error_impl(&dword_1C9870000, v45, OS_LOG_TYPE_ERROR, "no valid input data", buf, 2u);
            }
            goto LABEL_89;
          }
          v38 = *(__CVBuffer **)*v35;
          if (!v38)
          {
            v51 = atomic_load((unsigned __int8 *)&qword_1EF921268);
            if ((v51 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921268))
            {
              qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
              __cxa_guard_release(&qword_1EF921268);
            }
            v45 = (id)qword_1EF921260;
            if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_error_impl(&dword_1C9870000, v45, OS_LOG_TYPE_ERROR, "no valid buffer for color input", buf, 2u);
            }
            goto LABEL_89;
          }
          destinationBuffer = texture;
          v39 = *(__CVBuffer **)(*v35 + 8);
          v40 = *v24;
          v41 = **v24;
          if (v41)
          {
            v42 = v39 != 0;
            if (*(_BYTE *)(v41 + 64))
              v43 = v39 == 0;
            else
              v43 = 0;
            if (v43)
            {
              v44 = atomic_load((unsigned __int8 *)&qword_1EF921268);
              if ((v44 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921268))
              {
                qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
                __cxa_guard_release(&qword_1EF921268);
              }
              v45 = (id)qword_1EF921260;
              if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)buf = 0;
                _os_log_error_impl(&dword_1C9870000, v45, OS_LOG_TYPE_ERROR, "no valid buffer for depth input", buf, 2u);
              }
              goto LABEL_89;
            }
          }
          else
          {
            v42 = v39 != 0;
          }
          if (pixelBufferOut)
          {
            v53 = *((_DWORD *)v40 + 4);
            v52 = *((_DWORD *)v40 + 5);
            pixelBuffer = pixelBufferOut;
            if (v53 == CVPixelBufferGetWidth(pixelBufferOut)
              && v52 == CVPixelBufferGetHeight(pixelBuffer))
            {
              if (!destinationBuffer
                || (v55 = *((_DWORD *)*v24 + 4),
                    v54 = *((_DWORD *)*v24 + 5),
                    v55 == CVPixelBufferGetWidth(destinationBuffer))
                && v54 == CVPixelBufferGetHeight(destinationBuffer))
              {
                v56 = 0x3F80000000000000;
                switch(*((_DWORD *)*v24 + 9))
                {
                  case 0:
                    if (v42)
                    {
                      v57 = sub_1C9883E80(v35);
                      v301 = 0;
                    }
                    else
                    {
                      v301 = 0;
                      v57 = 0;
                    }
                    goto LABEL_166;
                  case 1:
                    v56 = 1065353216;
                    goto LABEL_155;
                  case 3:
                    v56 = 3212836864;
                    goto LABEL_155;
                  case 4:
                    v56 = 0xBF80000000000000;
                    goto LABEL_155;
                  default:
LABEL_155:
                    v301 = sub_1C9883ABC(v35, *(double *)&v56);
                    if (v42)
                    {
                      v103 = *((_DWORD *)*v24 + 9);
                      switch(v103)
                      {
                        case 4:
                          v104 = 0xBF80000000000000;
                          break;
                        case 3:
                          v104 = 3212836864;
                          break;
                        case 1:
                          v104 = 1065353216;
                          break;
                        default:
                          v104 = 0x3F80000000000000;
                          break;
                      }
                      v57 = sub_1C98840E0(v35, *(double *)&v104);
                    }
                    else
                    {
                      v57 = 0;
                    }
LABEL_166:
                    v294 = v57;
                    v105 = (CVPixelBufferRef *)*v24;
                    v106 = (_DWORD *)**v24;
                    v107 = v106[14];
                    v108 = *(_QWORD *)(*(_QWORD *)v106 + 8);
                    v109 = v108 + 40 * v107;
                    if (*(char *)(v109 + 23) < 0)
                    {
                      sub_1C987D148(buf, *(void **)v109, *(_QWORD *)(v109 + 8));
                      v105 = (CVPixelBufferRef *)*v24;
                    }
                    else
                    {
                      *(_OWORD *)buf = *(_OWORD *)v109;
                      *(_QWORD *)v320 = *(_QWORD *)(v109 + 16);
                    }
                    *(_OWORD *)&v320[8] = *(_OWORD *)(v108 + 40 * v107 + 24);
                    v110 = *(unsigned int *)&v320[16];
                    v111 = *(unsigned int *)&v320[20];
                    if (sub_1C98877C4(v105 + 20, (cva *)*(unsigned int *)&v320[20], *(unsigned int *)&v320[16], 1111970369) == 2)sub_1C98878FC((__CVBuffer *)(*v24)[20], CFSTR("AppleCVA:Seg:InputTransform"));
                    v112 = **v24;
                    if (*(_BYTE *)(v112 + 64))
                    {
                      sub_1C98884F8((char *)__dst, v112);
                      v293 = (uint64_t)__dst[0];
                      v297 = HIBYTE(v314);
                      v113 = v315;
                      v114 = DWORD1(v315);
                      v298 = DWORD2(v315);
                      v299 = HIDWORD(v315);
                    }
                    else
                    {
                      v293 = 0x796D6D7564;
                      v297 = 5;
                      v298 = -1;
                      v299 = 0xFFFFFFFFLL;
                      v114 = -1;
                      v113 = -1;
                    }
                    switch(v301)
                    {
                      case 3u:
                        v300 = 0;
                        v115 = 1;
                        goto LABEL_180;
                      case 2u:
                        v300 = 0;
                        v115 = 2;
                        goto LABEL_180;
                      case 1u:
                        v300 = 0;
                        v115 = 3;
LABEL_180:
                        v295 = v115;
                        goto LABEL_182;
                    }
                    v295 = 0;
                    v300 = 1;
LABEL_182:
                    v296 = v110;
                    v116 = *v24;
                    v117 = *(_DWORD *)&v320[16] * *(_DWORD *)&v320[8] * *(_DWORD *)&v320[20] * *(_DWORD *)&v320[12];
                    if (*((_DWORD *)*v24 + 30) != v117)
                    {
                      v118 = v114;
                      v119 = v113;
                      sub_1C988793C((uint64_t)(v116 + 13), v117);
                      v116 = *v24;
                      v113 = v119;
                      v114 = v118;
                    }
                    if (*v116)
                    {
                      if (*(_BYTE *)(*v116 + 64) && v42)
                      {
                        v121 = v298 * v299 * v114 * v113;
                        if (*((_DWORD *)v116 + 36) != v121)
                        {
                          sub_1C988793C((uint64_t)(v116 + 16), v121);
                          __dst[0] = 0;
                          CVPixelBufferCreateWithBytes(0, (int)v299, v298, 0x66646570u, (void *)(*v24)[16], 4 * (int)v299, 0, 0, 0, __dst);
                          sub_1C98878FC(__dst[0], CFSTR("AppleCVA:Seg:NetworkInputDepth"));
                          v122 = __dst[0];
                          if (__dst[0])
                            CVPixelBufferRetain(__dst[0]);
                          v123 = *v24;
                          v124 = (__CVBuffer *)(*v24)[19];
                          if (v124)
                          {
                            CVPixelBufferRelease(v124);
                            v123[19] = 0;
                          }
                          v123[19] = (uint64_t)v122;
                          CVPixelBufferRelease(__dst[0]);
                        }
                      }
                    }
                    kdebug_trace();
                    v60 = sub_1C9888FB0((CVPixelBufferRef *)*v24 + 5, v301, v38, (__CVBuffer *)(*v24)[20]);
                    if ((v60 & 1) == 0)
                    {
                      sub_1C98852A4();
                      v125 = objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v125, OS_LOG_TYPE_ERROR))
                      {
                        LOWORD(__dst[0]) = 0;
                        _os_log_error_impl(&dword_1C9870000, v125, OS_LOG_TYPE_ERROR, "invalid image rotation", (uint8_t *)__dst, 2u);
                      }

                    }
                    kdebug_trace();
                    kdebug_trace();
                    CVPixelBufferLockBaseAddress((CVPixelBufferRef)(*v24)[20], 1uLL);
                    BaseAddress = (const char *)CVPixelBufferGetBaseAddress((CVPixelBufferRef)(*v24)[20]);
                    BytesPerRow = CVPixelBufferGetBytesPerRow((CVPixelBufferRef)(*v24)[20]);
                    v130 = *v24;
                    v131 = (*v24)[13];
                    v133 = (int)v296 > 0 && (int)v111 > 0;
                    if (*((_BYTE *)*v24 + 224))
                    {
                      if (v133)
                      {
                        v134 = 0;
                        v135 = (v111 - 1);
                        v136 = 12 * v135 + 12;
                        v137 = (4 * v135) | 3;
                        v138 = v111 & 0xF;
                        if ((v111 & 0xF) == 0)
                          v138 = 16;
                        v139 = v111 - v138;
                        v140 = BaseAddress;
                        do
                        {
                          if (v111 >= 0x11
                            && (v131 < (unint64_t)&BaseAddress[v137 + BytesPerRow * v134]
                              ? (v141 = (unint64_t)v140 >= v131 + v136)
                              : (v141 = 1),
                                v141))
                          {
                            v142 = &v140[4 * v139];
                            v143 = v140;
                            v144 = (float *)v131;
                            v145 = v139;
                            do
                            {
                              v336 = vld4q_s8(v143);
                              v143 += 64;
                              v327.val[0] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v336.val[2], (int8x16_t)xmmword_1C9927460));
                              v327.val[1] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v336.val[1], (int8x16_t)xmmword_1C9927460));
                              v327.val[2] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v336.val[0], (int8x16_t)xmmword_1C9927460));
                              v331.val[0] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v336.val[2], (int8x16_t)xmmword_1C9927450));
                              v331.val[1] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v336.val[1], (int8x16_t)xmmword_1C9927450));
                              v331.val[2] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v336.val[0], (int8x16_t)xmmword_1C9927450));
                              v146 = v144;
                              vst3q_f32(v146, v331);
                              v146 += 12;
                              vst3q_f32(v146, v327);
                              v322.val[0] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v336.val[2], (int8x16_t)xmmword_1C9927470));
                              v322.val[1] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v336.val[1], (int8x16_t)xmmword_1C9927470));
                              v322.val[2] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v336.val[0], (int8x16_t)xmmword_1C9927470));
                              v147 = v144 + 24;
                              vst3q_f32(v147, v322);
                              v322.val[0] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v336.val[2], (int8x16_t)xmmword_1C9927480));
                              v322.val[1] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v336.val[1], (int8x16_t)xmmword_1C9927480));
                              v148 = v144 + 36;
                              v128 = (uint32x4_t)vqtbl1q_s8(v336.val[0], (int8x16_t)xmmword_1C9927480);
                              v322.val[2] = vcvtq_f32_u32(v128);
                              vst3q_f32(v148, v322);
                              v144 += 48;
                              v145 -= 16;
                            }
                            while (v145);
                            v131 += 12 * v139;
                            v149 = v139;
                          }
                          else
                          {
                            v149 = 0;
                            v142 = v140;
                          }
                          v150 = v111 - v149;
                          v151 = (__int8 *)(v142 + 2);
                          do
                          {
                            v128.i8[0] = *v151;
                            v152 = (float)v128.u32[0];
                            *(float *)v131 = v152;
                            LOBYTE(v152) = *(v151 - 1);
                            v153 = (float)LODWORD(v152);
                            *(float *)(v131 + 4) = v153;
                            LOBYTE(v153) = *(v151 - 2);
                            *(float *)v128.i32 = (float)LODWORD(v153);
                            *(_DWORD *)(v131 + 8) = v128.i32[0];
                            v131 += 12;
                            v151 += 4;
                            --v150;
                          }
                          while (v150);
                          ++v134;
                          v140 += BytesPerRow;
                        }
                        while (v134 != v296);
                      }
                    }
                    else if (v133)
                    {
                      v154 = 0;
                      v155 = (v111 - 1);
                      v156 = 12 * v155 + 12;
                      v157 = (4 * v155) | 3;
                      v158 = v111 & 0xF;
                      if ((v111 & 0xF) == 0)
                        v158 = 16;
                      v159 = v111 - v158;
                      v160 = (float32x4_t)vdupq_n_s32(0x3B808081u);
                      v161 = BaseAddress;
                      do
                      {
                        if (v111 >= 0x11
                          && (v131 < (unint64_t)&BaseAddress[v157 + BytesPerRow * v154]
                            ? (v162 = (unint64_t)v161 >= v131 + v156)
                            : (v162 = 1),
                              v162))
                        {
                          v163 = &v161[4 * v159];
                          v164 = v161;
                          v165 = (float *)v131;
                          v166 = v159;
                          do
                          {
                            v340 = vld4q_s8(v164);
                            v164 += 64;
                            v328.val[0] = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v340.val[2], (int8x16_t)xmmword_1C9927450)), v160);
                            v328.val[1] = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v340.val[1], (int8x16_t)xmmword_1C9927450)), v160);
                            v328.val[2] = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v340.val[0], (int8x16_t)xmmword_1C9927450)), v160);
                            v167 = v165;
                            vst3q_f32(v167, v328);
                            v167 += 12;
                            v328.val[0] = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v340.val[2], (int8x16_t)xmmword_1C9927480)), v160);
                            v332.val[0] = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v340.val[2], (int8x16_t)xmmword_1C9927470)), v160);
                            v335.val[0] = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v340.val[2], (int8x16_t)xmmword_1C9927460)), v160);
                            v335.val[1] = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v340.val[1], (int8x16_t)xmmword_1C9927460)), v160);
                            v335.val[2] = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v340.val[0], (int8x16_t)xmmword_1C9927460)), v160);
                            vst3q_f32(v167, v335);
                            v332.val[1] = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v340.val[1], (int8x16_t)xmmword_1C9927470)), v160);
                            v332.val[2] = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v340.val[0], (int8x16_t)xmmword_1C9927470)), v160);
                            v168 = v165 + 24;
                            vst3q_f32(v168, v332);
                            v328.val[1] = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v340.val[1], (int8x16_t)xmmword_1C9927480)), v160);
                            v169 = v165 + 36;
                            v129 = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v340.val[0], (int8x16_t)xmmword_1C9927480));
                            v328.val[2] = vmulq_f32(v129, v160);
                            vst3q_f32(v169, v328);
                            v165 += 48;
                            v166 -= 16;
                          }
                          while (v166);
                          v131 += 12 * v159;
                          v170 = v159;
                        }
                        else
                        {
                          v170 = 0;
                          v163 = v161;
                        }
                        v171 = v111 - v170;
                        v172 = (__int8 *)(v163 + 2);
                        do
                        {
                          v129.i8[0] = *v172;
                          *(float *)&v173 = (float)v129.u32[0] * 0.0039216;
                          *(float *)v131 = *(float *)&v173;
                          LOBYTE(v173) = *(v172 - 1);
                          *(float *)&v174 = (float)v173 * 0.0039216;
                          *(float *)(v131 + 4) = *(float *)&v174;
                          LOBYTE(v174) = *(v172 - 2);
                          v129.f32[0] = (float)v174 * 0.0039216;
                          *(_DWORD *)(v131 + 8) = v129.i32[0];
                          v131 += 12;
                          v172 += 4;
                          --v171;
                        }
                        while (v171);
                        ++v154;
                        v161 += BytesPerRow;
                      }
                      while (v154 != v296);
                    }
                    CVPixelBufferUnlockBaseAddress((CVPixelBufferRef)v130[20], 1uLL);
                    kdebug_trace();
                    if (!*(_BYTE *)(**v24 + 64))
                      goto LABEL_252;
                    kdebug_trace();
                    v175 = (*v24)[16];
                    __dst[0] = 0;
                    LODWORD(__dst[1]) = v299;
                    HIDWORD(__dst[1]) = v298;
                    v314 = (v299 << 34) | 4;
                    *(_QWORD *)&v315 = v175;
                    if (sub_1C988383C((uint64_t)v307))
                    {
                      v176 = sub_1C988391C((uint64_t)v307);
                      v177 = sub_1C98839A8((uint64_t)v307);
                      v178 = sub_1C9883A34((uint64_t)v307);
                      __p = (void *)__PAIR64__(LODWORD(v177), LODWORD(v176));
                      LOWORD(v317) = v178;
                      if ((sub_1C98879C4(v39, (int32x2_t *)__dst, (uint64_t)&__p, v294) & 1) != 0)
                        goto LABEL_251;
                      sub_1C98852A4();
                      v179 = objc_claimAutoreleasedReturnValue();
                      if (!os_log_type_enabled(v179, OS_LOG_TYPE_ERROR))
                        goto LABEL_250;
                      LOWORD(__p) = 0;
                      goto LABEL_426;
                    }
                    v180 = sub_1C9883890((uint64_t)v307);
                    v181 = 1.0 / *((float *)*v24 + 58);
                    if (*((_BYTE *)*v24 + 224))
                      v181 = v181 * 255.0;
                    __p = (void *)__PAIR64__(*((_DWORD *)*v24 + 57), LODWORD(v180));
                    *(float *)&v317 = v181;
                    if ((sub_1C9887EE0(v39, (int32x2_t *)__dst, (float *)&__p, v294) & 1) == 0)
                    {
                      sub_1C98852A4();
                      v179 = objc_claimAutoreleasedReturnValue();
                      if (!os_log_type_enabled(v179, OS_LOG_TYPE_ERROR))
                      {
LABEL_250:

                        v60 = 0;
                        goto LABEL_251;
                      }
                      LOWORD(__p) = 0;
LABEL_426:
                      _os_log_error_impl(&dword_1C9870000, v179, OS_LOG_TYPE_ERROR, "invalid depth resampling", (uint8_t *)&__p, 2u);
                      goto LABEL_250;
                    }
LABEL_251:
                    kdebug_trace();
LABEL_252:
                    kdebug_trace();
                    v182 = *v24;
                    v183 = (_QWORD *)**v24;
                    v184 = *((unsigned __int8 *)v183 + 64);
                    if (*((_BYTE *)v183 + 64))
                      v185 = 16;
                    else
                      v185 = 8;
                    v186 = (__CVBuffer *)operator new(v185);
                    __dst[0] = v186;
                    v314 = (uint64_t)v186 + v185;
                    bzero(v186, v185);
                    __dst[1] = (__CVBuffer *)((char *)v186 + v185);
                    *((_QWORD *)v186 + *((int *)v183 + 14)) = v182[13];
                    if (v184)
                      *((_QWORD *)v186 + *((int *)v183 + 15)) = v182[16];
                    v187 = *((unsigned __int8 *)v183 + 65);
                    if (*((_BYTE *)v183 + 65))
                      v188 = 2;
                    else
                      v188 = 1;
                    v189 = operator new(v188 * 8);
                    __p = v189;
                    v318 = &v189[v188];
                    bzero(v189, v188 * 8);
                    v317 = &v189[v188];
                    if (v187)
                    {
                      v190 = v183[4];
                      v189[1] = v183[1];
                    }
                    else
                    {
                      v190 = v183[1];
                    }
                    *v189 = v190;
                    (*(void (**)(_QWORD, CVPixelBufferRef *, void **, uint64_t))(*(_QWORD *)*v183 + 16))(*v183, __dst, &__p, 1);
                    if (__p)
                    {
                      v317 = __p;
                      operator delete(__p);
                    }
                    if (__dst[0])
                    {
                      __dst[1] = __dst[0];
                      operator delete(__dst[0]);
                    }
                    kdebug_trace();
                    v191 = **v24;
                    v192 = *(_QWORD *)(*(_QWORD *)v191 + 32);
                    if (*(_BYTE *)(v191 + 65))
                    {
                      if (*(char *)(v192 + 63) < 0)
                      {
                        sub_1C987D148(__dst, *(void **)(v192 + 40), *(_QWORD *)(v192 + 48));
                      }
                      else
                      {
                        *(_OWORD *)__dst = *(_OWORD *)(v192 + 40);
                        v314 = *(_QWORD *)(v192 + 56);
                      }
                      v193 = 1;
                    }
                    else if (*(char *)(v192 + 23) < 0)
                    {
                      sub_1C987D148(__dst, *(void **)v192, *(_QWORD *)(v192 + 8));
                      v193 = 0;
                    }
                    else
                    {
                      v193 = 0;
                      *(_OWORD *)__dst = *(_OWORD *)v192;
                      v314 = *(_QWORD *)(v192 + 16);
                    }
                    v315 = *(_OWORD *)(v192 + 40 * v193 + 24);
                    v194 = SDWORD1(v315);
                    if (SHIBYTE(v314) < 0)
                      operator delete(__dst[0]);
                    v195 = (CVPixelBufferRef *)(*v24 + 21);
                    *(_QWORD *)v302 = v194;
                    if ((v300 & 1) != 0)
                    {
                      v196 = pixelBuffer;
                      if (*v195)
                      {
                        CVPixelBufferRelease(*v195);
                        *v195 = 0;
                        v196 = pixelBuffer;
                      }
                    }
                    else
                    {
                      if (sub_1C98877C4(v195, (cva *)*((unsigned int *)*v24 + 4), *((unsigned int *)*v24 + 5), *((unsigned int *)*v24 + 7)) == 2)sub_1C98878FC((__CVBuffer *)(*v24)[21], CFSTR("AppleCVA:Seg:NetworkOutputSeg"));
                      v196 = (__CVBuffer *)(*v24)[21];
                    }
                    kdebug_trace();
                    CVPixelBufferLockBaseAddress(v196, 0);
                    Width = CVPixelBufferGetWidth(v196);
                    Height = CVPixelBufferGetHeight(v196);
                    v199 = CVPixelBufferGetBytesPerRow(v196);
                    v200 = CVPixelBufferGetBaseAddress(v196);
                    v201 = *(float **)(v191 + 8);
                    if (*((_BYTE *)*v24 + 224))
                    {
                      v202 = pixelBuffer;
                      if (Height && Width)
                      {
                        for (i = 0; i != Height; ++i)
                        {
                          v204 = v200;
                          do
                          {
                            v205 = 255.0;
                            if (*v201 <= 255.0)
                              v205 = *v201;
                            if (*v201 >= 0.0)
                              v206 = v205;
                            else
                              v206 = 0.0;
                            *v204++ = (int)v206;
                            v201 += *(_QWORD *)v302;
                          }
                          while (v204 < &v200[Width]);
                          v200 += v199;
                        }
                      }
                    }
                    else
                    {
                      v202 = pixelBuffer;
                      if (Height && Width)
                      {
                        for (j = 0; j != Height; ++j)
                        {
                          v208 = v200;
                          do
                          {
                            v209 = 255.0;
                            v210 = *v201 * 255.0;
                            if (v210 <= 255.0)
                              v209 = *v201 * 255.0;
                            if (v210 >= 0.0)
                              v211 = v209;
                            else
                              v211 = 0.0;
                            *v208++ = (int)v211;
                            v201 += *(_QWORD *)v302;
                          }
                          while (v208 < &v200[Width]);
                          v200 += v199;
                        }
                      }
                    }
                    CVPixelBufferUnlockBaseAddress(v196, 0);
                    if ((v300 & 1) == 0 && (sub_1C9888FB0((CVPixelBufferRef *)*v24 + 8, v295, v196, v202) & 1) == 0)
                    {
                      sub_1C98852A4();
                      v212 = objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v212, OS_LOG_TYPE_ERROR))
                      {
                        LOWORD(__dst[0]) = 0;
                        _os_log_error_impl(&dword_1C9870000, v212, OS_LOG_TYPE_ERROR, "invalid image rotation", (uint8_t *)__dst, 2u);
                      }

                      v60 = 0;
                    }
                    kdebug_trace();
                    if (!destinationBuffer || !*(_BYTE *)(**v24 + 65))
                      goto LABEL_420;
                    kdebug_trace();
                    v213 = **v24;
                    sub_1C9888634((char *)__dst, (_BYTE *)v213);
                    v214 = HIDWORD(v315);
                    if (SHIBYTE(v314) < 0)
                      operator delete(__dst[0]);
                    sub_1C9888634((char *)__dst, (_BYTE *)**v24);
                    v215 = DWORD2(v315);
                    if (SHIBYTE(v314) < 0)
                      operator delete(__dst[0]);
                    sub_1C9888634((char *)__dst, (_BYTE *)**v24);
                    v216 = DWORD1(v315);
                    if (SHIBYTE(v314) < 0)
                      operator delete(__dst[0]);
                    if (v216 != 3)
                    {
                      sub_1C98852A4();
                      v247 = objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v247, OS_LOG_TYPE_ERROR))
                      {
                        LOWORD(__dst[0]) = 0;
                        _os_log_error_impl(&dword_1C9870000, v247, OS_LOG_TYPE_ERROR, "unsupported number of output color channels", (uint8_t *)__dst, 2u);
                      }
                      goto LABEL_418;
                    }
                    sub_1C98883B0(*v24 + 24, v214, v215);
                    v217 = *(float **)(v213 + 32);
                    v219 = (int)v215 > 0 && (int)v214 > 0;
                    if (*((_BYTE *)*v24 + 224))
                    {
                      if (v219)
                      {
                        v220 = 0;
                        v221 = (float32x4_t)vdupq_n_s32(0x437F0000u);
                        *(_QWORD *)&v222 = -1;
                        *((_QWORD *)&v222 + 1) = -1;
                        while (1)
                        {
                          v223 = (*v24)[27];
                          v224 = (*((_DWORD *)*v24 + 53) * v220);
                          v225 = (float *)(v223 + v224);
                          if (v214 < 0x10)
                            break;
                          if (v225 < &v217[3 * (v214 - 1) + 3]
                            && (unint64_t)v217 < v223 + 4 * (unint64_t)(v214 - 1) + 4 + v224)
                          {
                            break;
                          }
                          v225 += v214 & 0xFFFFFFF0;
                          v227 = (char *)(v223 + v224);
                          v228 = v217;
                          v229 = v214 & 0xFFFFFFF0;
                          do
                          {
                            v230 = v228;
                            v323 = vld3q_f32(v230);
                            v230 += 12;
                            v231 = v228 + 24;
                            v232 = v228 + 36;
                            v329 = vld3q_f32(v231);
                            v333 = vld3q_f32(v232);
                            v325 = vld3q_f32(v230);
                            v338.val[0] = (int8x16_t)vcvtq_u32_f32((float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v323.val[0], v221), (int8x16_t)v221, (int8x16_t)v323.val[0]), (int8x16_t)vcltzq_f32(v323.val[0])));
                            v338.val[3] = (int8x16_t)vcvtq_u32_f32((float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v333.val[0], v221), (int8x16_t)v221, (int8x16_t)v333.val[0]), (int8x16_t)vcltzq_f32(v333.val[0])));
                            v338.val[2] = (int8x16_t)vcvtq_u32_f32((float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v329.val[0], v221), (int8x16_t)v221, (int8x16_t)v329.val[0]), (int8x16_t)vcltzq_f32(v329.val[0])));
                            v233 = vbslq_s8((int8x16_t)vcgtq_f32(v323.val[2], v221), (int8x16_t)v221, (int8x16_t)v323.val[2]);
                            v323.val[0] = (float32x4_t)vcltzq_f32(v323.val[2]);
                            v338.val[1] = (int8x16_t)vcvtq_u32_f32((float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v325.val[0], v221), (int8x16_t)v221, (int8x16_t)v325.val[0]), (int8x16_t)vcltzq_f32(v325.val[0])));
                            v341.val[0] = (int8x16_t)vcvtq_u32_f32((float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v323.val[1], v221), (int8x16_t)v221, (int8x16_t)v323.val[1]), (int8x16_t)vcltzq_f32(v323.val[1])));
                            v341.val[3] = (int8x16_t)vcvtq_u32_f32((float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v333.val[1], v221), (int8x16_t)v221, (int8x16_t)v333.val[1]), (int8x16_t)vcltzq_f32(v333.val[1])));
                            v341.val[2] = (int8x16_t)vcvtq_u32_f32((float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v329.val[1], v221), (int8x16_t)v221, (int8x16_t)v329.val[1]), (int8x16_t)vcltzq_f32(v329.val[1])));
                            v341.val[1] = (int8x16_t)vcvtq_u32_f32((float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v325.val[1], v221), (int8x16_t)v221, (int8x16_t)v325.val[1]), (int8x16_t)vcltzq_f32(v325.val[1])));
                            v234 = vqtbl4q_s8(v338, (int8x16_t)xmmword_1C9927490);
                            v323.val[2] = (float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v325.val[2], v221), (int8x16_t)v221, (int8x16_t)v325.val[2]), (int8x16_t)vcltzq_f32(v325.val[2]));
                            v235 = vqtbl4q_s8(v341, (int8x16_t)xmmword_1C9927490);
                            v325.val[0] = (float32x4_t)vcvtq_u32_f32((float32x4_t)vbicq_s8(v233, (int8x16_t)v323.val[0]));
                            v329.val[0] = (float32x4_t)vcvtq_u32_f32((float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v333.val[2], v221), (int8x16_t)v221, (int8x16_t)v333.val[2]), (int8x16_t)vcltzq_f32(v333.val[2])));
                            v325.val[2] = (float32x4_t)vcvtq_u32_f32((float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v329.val[2], v221), (int8x16_t)v221, (int8x16_t)v329.val[2]), (int8x16_t)vcltzq_f32(v329.val[2])));
                            v325.val[1] = (float32x4_t)vcvtq_u32_f32(v323.val[2]);
                            v236 = vqtbl4q_s8(*(int8x16x4_t *)v329.val[0].f32, (int8x16_t)xmmword_1C9927490);
                            vst4q_s8(v227, *(int8x16x4_t *)&v222);
                            v227 += 64;
                            v228 += 48;
                            v229 -= 16;
                          }
                          while (v229);
                          v217 += 3 * (v214 & 0xFFFFFFF0);
                          v237 = v214 & 0xFFFFFFF0;
                          if ((v214 & 0xFFFFFFF0) != v214)
                            goto LABEL_342;
LABEL_330:
                          if (++v220 == (_DWORD)v215)
                            goto LABEL_399;
                        }
                        v237 = 0;
LABEL_342:
                        v238 = v214 - v237;
                        do
                        {
                          *(_BYTE *)v225 = -1;
                          v239 = 255.0;
                          if (*v217 <= 255.0)
                            v240 = *v217;
                          else
                            v240 = 255.0;
                          if (*v217 >= 0.0)
                            v241 = v240;
                          else
                            v241 = 0.0;
                          *((_BYTE *)v225 + 1) = (int)v241;
                          v242 = v217[1];
                          if (v242 <= 255.0)
                            v243 = v217[1];
                          else
                            v243 = 255.0;
                          if (v242 >= 0.0)
                            v244 = v243;
                          else
                            v244 = 0.0;
                          *((_BYTE *)v225 + 2) = (int)v244;
                          v245 = v217[2];
                          if (v245 <= 255.0)
                            v239 = v217[2];
                          if (v245 >= 0.0)
                            v246 = v239;
                          else
                            v246 = 0.0;
                          *((_BYTE *)v225 + 3) = (int)v246;
                          v217 += 3;
                          ++v225;
                          --v238;
                        }
                        while (v238);
                        goto LABEL_330;
                      }
                      goto LABEL_399;
                    }
                    if (!v219)
                    {
LABEL_399:
                      v287 = (CVPixelBufferRef *)(*v24 + 22);
                      if ((v300 & 1) != 0)
                      {
                        v288 = destinationBuffer;
                        if (*v287)
                        {
                          CVPixelBufferRelease(*v287);
                          *v287 = 0;
                          v288 = destinationBuffer;
                        }
                      }
                      else
                      {
                        if (sub_1C98877C4((CVPixelBufferRef *)*v24 + 22, (cva *)*((unsigned int *)*v24 + 4), *((unsigned int *)*v24 + 5), *((unsigned int *)*v24 + 6)) == 2)sub_1C98878FC((__CVBuffer *)(*v24)[22], CFSTR("AppleCVA:Seg:NetworkOutputFG"));
                        v288 = (__CVBuffer *)(*v24)[22];
                      }
                      CVPixelBufferLockBaseAddress(v288, 0);
                      cva::pixelBufferConvertARGBToYpCbCr();
                      CVPixelBufferUnlockBaseAddress(v288, 0);
                      if ((v300 & 1) != 0)
                        goto LABEL_419;
                      v289 = *((double *)*v24 + 2);
                      v290 = COERCE_DOUBLE(vrev64_s32(*(int32x2_t *)&v289));
                      if ((v295 | 2) == 3)
                        v289 = v290;
                      if (sub_1C98877C4((CVPixelBufferRef *)*v24 + 23, (cva *)LODWORD(v289), HIDWORD(v289), *((unsigned int *)*v24 + 6)) == 2)sub_1C98878FC((__CVBuffer *)(*v24)[23], CFSTR("AppleCVA:Seg:FGInverseTransform"));
                      if ((sub_1C9888FB0((CVPixelBufferRef *)*v24 + 8, v295, v288, (__CVBuffer *)(*v24)[23]) & 1) == 0)
                      {
                        sub_1C98852A4();
                        v291 = objc_claimAutoreleasedReturnValue();
                        if (os_log_type_enabled(v291, OS_LOG_TYPE_ERROR))
                        {
                          LOWORD(__dst[0]) = 0;
                          _os_log_error_impl(&dword_1C9870000, v291, OS_LOG_TYPE_ERROR, "invalid image rotation for foreground", (uint8_t *)__dst, 2u);
                        }

                        v60 = 0;
                      }
                      v292 = (OpaqueVTPixelTransferSession *)(*v24)[12];
                      if (v292)
                      {
                        if (!VTPixelTransferSessionTransferImage(v292, (CVPixelBufferRef)(*v24)[23], destinationBuffer))
                          goto LABEL_419;
                      }
                      sub_1C98852A4();
                      v247 = objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v247, OS_LOG_TYPE_ERROR))
                      {
                        LOWORD(__dst[0]) = 0;
                        _os_log_error_impl(&dword_1C9870000, v247, OS_LOG_TYPE_ERROR, "invalid image scaling for foreground", (uint8_t *)__dst, 2u);
                      }
LABEL_418:

                      v60 = 0;
LABEL_419:
                      kdebug_trace();
LABEL_420:
                      if (v297 < 0)
                      {
                        operator delete((void *)v293);
                        if ((v320[7] & 0x80000000) != 0)
LABEL_424:
                          operator delete(*(void **)buf);
                      }
                      else if ((v320[7] & 0x80000000) != 0)
                      {
                        goto LABEL_424;
                      }
                      if (!v308)
                        goto LABEL_94;
LABEL_90:
                      v61 = &v308->__shared_owners_;
                      do
                        v62 = __ldaxr((unint64_t *)v61);
                      while (__stlxr(v62 - 1, (unint64_t *)v61));
                      if (!v62)
                      {
                        ((void (*)(std::__shared_weak_count *))v308->__on_zero_shared)(v308);
                        std::__shared_weak_count::__release_weak(v308);
                        if (v60)
                          goto LABEL_95;
                      }
                      else
                      {
LABEL_94:
                        if (v60)
                        {
LABEL_95:
                          kdebug_trace();
                          v63 = (std::__shared_weak_count *)a3[1];
                          v305 = *a3;
                          v306 = v63;
                          if (v63)
                          {
                            v64 = (unint64_t *)&v63->__shared_owners_;
                            do
                              v65 = __ldxr(v64);
                            while (__stxr(v65 + 1, v64));
                          }
                          sub_1C98804C0(buf, (uint64_t *)&v305, pixelBufferOut, texture);
                          v66 = *(_OWORD *)buf;
                          memset(buf, 0, sizeof(buf));
                          v67 = *(std::__shared_weak_count **)(a1 + 8);
                          *(_OWORD *)a1 = v66;
                          if (v67)
                          {
                            v68 = (unint64_t *)&v67->__shared_owners_;
                            do
                              v69 = __ldaxr(v68);
                            while (__stlxr(v69 - 1, v68));
                            if (!v69)
                            {
                              ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                              std::__shared_weak_count::__release_weak(v67);
                            }
                          }
                          v70 = *(std::__shared_weak_count **)&buf[8];
                          if (*(_QWORD *)&buf[8])
                          {
                            v71 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
                            do
                              v72 = __ldaxr(v71);
                            while (__stlxr(v72 - 1, v71));
                            if (!v72)
                            {
                              ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                              std::__shared_weak_count::__release_weak(v70);
                            }
                          }
                          v73 = v306;
                          if (v306)
                          {
                            v74 = (unint64_t *)&v306->__shared_owners_;
                            do
                              v75 = __ldaxr(v74);
                            while (__stlxr(v75 - 1, v74));
                            if (!v75)
                            {
                              ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                              std::__shared_weak_count::__release_weak(v73);
                            }
                          }
                          v76 = *a3;
                          if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)(*v76 + 5), CFSTR("add_debug")))
                          {
                            cva::DictionaryHandler::item((cva::DictionaryHandler *)(*v76 + 5), CFSTR("add_debug"));
                            v77 = cva::ItemHandler::getValue<BOOL>();
                            cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
                            if (v77)
                            {
                              Dictionary = (__CFDictionary *)cva::DictionaryHandler::getDictionary(*(cva::DictionaryHandler **)a1);
                              v79 = v311;
                              if (Dictionary)
                              {
                                v80 = (const void *)(*v311)[20];
                                if (v80)
                                  CFDictionaryAddValue(Dictionary, CFSTR("network_color_input_buffer"), v80);
                              }
                              v81 = (__CFDictionary *)cva::DictionaryHandler::getDictionary(*(cva::DictionaryHandler **)a1);
                              if (v81)
                              {
                                v82 = (const void *)(*v79)[19];
                                if (v82)
                                  CFDictionaryAddValue(v81, CFSTR("network_depth_input_buffer"), v82);
                              }
                              v83 = (__CFDictionary *)cva::DictionaryHandler::getDictionary(*(cva::DictionaryHandler **)a1);
                              if (v83)
                              {
                                v84 = (const void *)(*v79)[21];
                                if (v84)
                                  CFDictionaryAddValue(v83, CFSTR("network_segmentation_output_buffer"), v84);
                              }
                              v85 = (__CFDictionary *)cva::DictionaryHandler::getDictionary(*(cva::DictionaryHandler **)a1);
                              if (v85)
                              {
                                v86 = (const void *)(*v79)[22];
                                if (v86)
                                  CFDictionaryAddValue(v85, CFSTR("network_foreground_input_buffer"), v86);
                              }
                            }
                          }
                          kdebug_trace();
LABEL_142:
                          CVPixelBufferRelease(pixelBufferOut);
                          CVPixelBufferRelease(texture);
                          v96 = v312;
                          if (v312)
                          {
                            v97 = (unint64_t *)&v312->__shared_owners_;
                            do
                              v98 = __ldaxr(v97);
                            while (__stlxr(v98 - 1, v97));
                            if (!v98)
                            {
                              ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
                              std::__shared_weak_count::__release_weak(v96);
                            }
                          }
                          kdebug_trace();
                          goto LABEL_148;
                        }
                      }
                      v87 = atomic_load((unsigned __int8 *)&qword_1EF921268);
                      if ((v87 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921268))
                      {
                        qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
                        __cxa_guard_release(&qword_1EF921268);
                      }
                      v88 = (id)qword_1EF921260;
                      if (os_log_type_enabled(v88, OS_LOG_TYPE_ERROR))
                      {
                        *(_WORD *)buf = 0;
                        _os_log_error_impl(&dword_1C9870000, v88, OS_LOG_TYPE_ERROR, "segmentation failed", buf, 2u);
                      }

                      sub_1C9883258(buf);
                      v89 = *(_OWORD *)buf;
                      memset(buf, 0, sizeof(buf));
                      v90 = *(std::__shared_weak_count **)(a1 + 8);
                      *(_OWORD *)a1 = v89;
                      if (v90)
                      {
                        v91 = (unint64_t *)&v90->__shared_owners_;
                        do
                          v92 = __ldaxr(v91);
                        while (__stlxr(v92 - 1, v91));
                        if (!v92)
                        {
                          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
                          std::__shared_weak_count::__release_weak(v90);
                        }
                      }
                      v93 = *(std::__shared_weak_count **)&buf[8];
                      if (*(_QWORD *)&buf[8])
                      {
                        v94 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
                        do
                          v95 = __ldaxr(v94);
                        while (__stlxr(v95 - 1, v94));
                        if (!v95)
                        {
                          ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                          std::__shared_weak_count::__release_weak(v93);
                        }
                      }
                      goto LABEL_142;
                    }
                    v248 = 0;
                    v249 = xmmword_1C9927490;
                    v250 = (float32x4_t)vdupq_n_s32(0x437F0000u);
                    *(_QWORD *)&v251 = -1;
                    *((_QWORD *)&v251 + 1) = -1;
                    break;
                }
                while (1)
                {
                  v252 = (*v24)[27];
                  v253 = (*((_DWORD *)*v24 + 53) * v248);
                  v254 = (float *)(v252 + v253);
                  if (v214 < 0x10)
                    break;
                  if (v254 < &v217[3 * (v214 - 1) + 3]
                    && (unint64_t)v217 < v252 + 4 * (unint64_t)(v214 - 1) + 4 + v253)
                  {
                    break;
                  }
                  v254 += v214 & 0xFFFFFFF0;
                  v256 = (char *)(v252 + v253);
                  v257 = v217;
                  v258 = v214 & 0xFFFFFFF0;
                  do
                  {
                    v259 = v257;
                    v324 = vld3q_f32(v259);
                    v259 += 12;
                    v260 = v257 + 24;
                    v261 = v257 + 36;
                    v326 = vld3q_f32(v260);
                    v330 = vld3q_f32(v261);
                    v262 = (int8x16_t)v249;
                    v334 = vld3q_f32(v259);
                    v263 = vmulq_f32(v326.val[0], v250);
                    v264 = vmulq_f32(v324.val[0], v250);
                    v265 = vmulq_f32(v330.val[0], v250);
                    v266 = vmulq_f32(v334.val[0], v250);
                    v267 = (int8x16_t)vcltzq_f32(v266);
                    v337.val[0] = (int8x16_t)vcvtq_u32_f32((float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v264, v250), (int8x16_t)v250, (int8x16_t)v264), (int8x16_t)vcltzq_f32(v264)));
                    v337.val[3] = (int8x16_t)vcvtq_u32_f32((float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v265, v250), (int8x16_t)v250, (int8x16_t)v265), (int8x16_t)vcltzq_f32(v265)));
                    v268 = vmulq_f32(v334.val[1], v250);
                    v269 = vmulq_f32(v326.val[1], v250);
                    v337.val[2] = (int8x16_t)vcvtq_u32_f32((float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v263, v250), (int8x16_t)v250, (int8x16_t)v263), (int8x16_t)vcltzq_f32(v263)));
                    v270 = vmulq_f32(v330.val[1], v250);
                    v271 = vmulq_f32(v324.val[1], v250);
                    v272 = vbslq_s8((int8x16_t)vcgtq_f32(v266, v250), (int8x16_t)v250, (int8x16_t)v266);
                    v339.val[0] = (int8x16_t)vcvtq_u32_f32((float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v271, v250), (int8x16_t)v250, (int8x16_t)v271), (int8x16_t)vcltzq_f32(v271)));
                    v339.val[3] = (int8x16_t)vcvtq_u32_f32((float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v270, v250), (int8x16_t)v250, (int8x16_t)v270), (int8x16_t)vcltzq_f32(v270)));
                    v339.val[2] = (int8x16_t)vcvtq_u32_f32((float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v269, v250), (int8x16_t)v250, (int8x16_t)v269), (int8x16_t)vcltzq_f32(v269)));
                    v334.val[0] = vmulq_f32(v334.val[2], v250);
                    v249 = (__int128)v262;
                    v326.val[0] = vmulq_f32(v326.val[2], v250);
                    v326.val[1] = vmulq_f32(v330.val[2], v250);
                    v324.val[0] = vmulq_f32(v324.val[2], v250);
                    v337.val[1] = (int8x16_t)vcvtq_u32_f32((float32x4_t)vbicq_s8(v272, v267));
                    v339.val[1] = (int8x16_t)vcvtq_u32_f32((float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v268, v250), (int8x16_t)v250, (int8x16_t)v268), (int8x16_t)vcltzq_f32(v268)));
                    v273 = vqtbl4q_s8(v337, v262);
                    v274 = vqtbl4q_s8(v339, v262);
                    v326.val[2] = (float32x4_t)vcvtq_u32_f32((float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v324.val[0], v250), (int8x16_t)v250, (int8x16_t)v324.val[0]), (int8x16_t)vcltzq_f32(v324.val[0])));
                    v330.val[2] = (float32x4_t)vcvtq_u32_f32((float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v326.val[1], v250), (int8x16_t)v250, (int8x16_t)v326.val[1]), (int8x16_t)vcltzq_f32(v326.val[1])));
                    v330.val[1] = (float32x4_t)vcvtq_u32_f32((float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v326.val[0], v250), (int8x16_t)v250, (int8x16_t)v326.val[0]), (int8x16_t)vcltzq_f32(v326.val[0])));
                    v330.val[0] = (float32x4_t)vcvtq_u32_f32((float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v334.val[0], v250), (int8x16_t)v250, (int8x16_t)v334.val[0]), (int8x16_t)vcltzq_f32(v334.val[0])));
                    v275 = vqtbl4q_s8(*(int8x16x4_t *)v326.val[2].f32, v262);
                    vst4q_s8(v256, *(int8x16x4_t *)&v251);
                    v256 += 64;
                    v257 += 48;
                    v258 -= 16;
                  }
                  while (v258);
                  v217 += 3 * (v214 & 0xFFFFFFF0);
                  v276 = v214 & 0xFFFFFFF0;
                  if ((v214 & 0xFFFFFFF0) != v214)
                    goto LABEL_379;
LABEL_367:
                  if (++v248 == (_DWORD)v215)
                    goto LABEL_399;
                }
                v276 = 0;
LABEL_379:
                v277 = v214 - v276;
                do
                {
                  *(_BYTE *)v254 = -1;
                  v278 = 255.0;
                  v279 = *v217 * 255.0;
                  if (v279 <= 255.0)
                    v280 = *v217 * 255.0;
                  else
                    v280 = 255.0;
                  if (v279 >= 0.0)
                    v281 = v280;
                  else
                    v281 = 0.0;
                  *((_BYTE *)v254 + 1) = (int)v281;
                  v282 = v217[1] * 255.0;
                  if (v282 <= 255.0)
                    v283 = v217[1] * 255.0;
                  else
                    v283 = 255.0;
                  if (v282 >= 0.0)
                    v284 = v283;
                  else
                    v284 = 0.0;
                  *((_BYTE *)v254 + 2) = (int)v284;
                  v285 = v217[2] * 255.0;
                  if (v285 <= 255.0)
                    v278 = v217[2] * 255.0;
                  if (v285 >= 0.0)
                    v286 = v278;
                  else
                    v286 = 0.0;
                  *((_BYTE *)v254 + 3) = (int)v286;
                  v217 += 3;
                  ++v254;
                  --v277;
                }
                while (v277);
                goto LABEL_367;
              }
              sub_1C98852A4();
              v45 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)buf = 0;
                _os_log_error_impl(&dword_1C9870000, v45, OS_LOG_TYPE_ERROR, "invalid foreground buffer size", buf, 2u);
              }
            }
            else
            {
              v58 = atomic_load((unsigned __int8 *)&qword_1EF921268);
              if ((v58 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921268))
              {
                qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
                __cxa_guard_release(&qword_1EF921268);
              }
              v45 = (id)qword_1EF921260;
              if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
              {
                v99 = CVPixelBufferGetWidth(pixelBuffer);
                v100 = CVPixelBufferGetHeight(pixelBuffer);
                v102 = *((_DWORD *)*v24 + 4);
                v101 = *((_DWORD *)*v24 + 5);
                *(_DWORD *)buf = 67109888;
                *(_DWORD *)&buf[4] = v99;
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = v100;
                *(_WORD *)&buf[14] = 1024;
                *(_DWORD *)v320 = v102;
                *(_WORD *)&v320[4] = 1024;
                *(_DWORD *)&v320[6] = v101;
                _os_log_error_impl(&dword_1C9870000, v45, OS_LOG_TYPE_ERROR, "invalid segmentation buffer size (%d %d vs %d %d)", buf, 0x1Au);
              }
            }
          }
          else
          {
            v59 = atomic_load((unsigned __int8 *)&qword_1EF921268);
            if ((v59 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921268))
            {
              qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
              __cxa_guard_release(&qword_1EF921268);
            }
            v45 = (id)qword_1EF921260;
            if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_error_impl(&dword_1C9870000, v45, OS_LOG_TYPE_ERROR, "no valid buffer for segmentation output", buf, 2u);
            }
          }
LABEL_89:

          v60 = 0;
          goto LABEL_90;
        }
        v30 = atomic_load((unsigned __int8 *)&qword_1EF921268);
        if ((v30 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921268))
        {
          qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
          __cxa_guard_release(&qword_1EF921268);
        }
        v17 = (id)qword_1EF921260;
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_1C9870000, v17, OS_LOG_TYPE_ERROR, "segmentation processor should not be called for unsupported camera type", buf, 2u);
        }
LABEL_13:

        sub_1C9883258((_QWORD *)a1);
LABEL_148:
        std::mutex::unlock(&stru_1EF920F60);
        return;
      }
    }
    v19 = v12;
    do
    {
      v20 = *(_DWORD *)(v11 + 32);
      v21 = v20 < v10;
      if (v20 >= v10)
        v22 = (uint64_t *)v11;
      else
        v22 = (uint64_t *)(v11 + 8);
      if (!v21)
        v19 = v11;
      v11 = *v22;
    }
    while (*v22);
    if (v19 != v12 && v10 >= *(_DWORD *)(v19 + 32))
      goto LABEL_25;
    goto LABEL_24;
  }
  v14 = atomic_load((unsigned __int8 *)&qword_1EF921268);
  if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921268))
  {
    qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
    __cxa_guard_release(&qword_1EF921268);
  }
  v15 = (id)qword_1EF921260;
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1C9870000, v15, OS_LOG_TYPE_ERROR, "nextData should never be nullptr", buf, 2u);
  }

  sub_1C9883258((_QWORD *)a1);
}

void sub_1C988300C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, int a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;
  __CVBuffer *v29;
  uint64_t v30;

  if (v29)
  {
    CVPixelBufferRelease(v29);
    if (a15 < 0)
    {
LABEL_3:
      operator delete(__p);
      if ((*(char *)(v30 - 185) & 0x80000000) == 0)
        goto LABEL_8;
LABEL_7:
      operator delete(*(void **)(v30 - 208));
LABEL_8:
      sub_1C987C140((uint64_t)&a24);
      sub_1C987C140(v28);
      sub_1C987C140((uint64_t)&a28);
      kdebug_trace();
      std::mutex::unlock(&stru_1EF920F60);
      _Unwind_Resume(a1);
    }
  }
  else if (a15 < 0)
  {
    goto LABEL_3;
  }
  if ((*(char *)(v30 - 185) & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

void sub_1C9883258(_QWORD *a1)
{
  _QWORD *v2;
  char __p[21];
  _BYTE v4[16];

  v2 = operator new(0x28uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_1E8295758;
  cva::DictionaryHandler::DictionaryHandler((cva::DictionaryHandler *)(v2 + 3));
  *a1 = v2 + 3;
  a1[1] = v2;
  strcpy(__p, "internal logic error");
  cva::ItemHandler::createValue<std::string>();
  cva::DictionaryHandler::setItem((cva::DictionaryHandler *)(v2 + 3), "segmentation error", (const cva::ItemHandler *)v4);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v4);
}

void sub_1C9883310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  uint64_t v16;

  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&a16);
  if (a14 < 0)
    operator delete(__p);
  sub_1C987C140(v16);
  _Unwind_Resume(a1);
}

void sub_1C9883344(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 sub_1C988335C(uint64_t a1)
{
  const __CFData *Data;
  const __CFData *v2;
  unsigned __int8 v3;
  NSObject *v4;
  __int128 v6;
  UInt8 v7[16];
  UInt8 buffer[16];
  CFRange v9;

  cva::DictionaryHandler::item((cva::DictionaryHandler *)(a1 + 40), CFSTR("color_camera_x_direction"));
  Data = (const __CFData *)cva::ItemHandler::getData((cva::ItemHandler *)v7);
  v2 = Data;
  v6 = 0u;
  if (Data)
  {
    if (CFDataGetLength(Data) == 16)
    {
      *(_DWORD *)&buffer[8] = 0;
      *(_QWORD *)buffer = 0;
      v9.location = 0;
      v9.length = 16;
      CFDataGetBytes(v2, v9, buffer);
      v6 = *(_OWORD *)buffer;
    }
    else
    {
      v3 = atomic_load((unsigned __int8 *)&qword_1EF921268);
      if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921268))
      {
        qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
        __cxa_guard_release(&qword_1EF921268);
      }
      v4 = (id)qword_1EF921260;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buffer = 0;
        _os_log_error_impl(&dword_1C9870000, v4, OS_LOG_TYPE_ERROR, "direction size should be of size = sizeof(vector_float3)", buffer, 2u);
      }

    }
  }
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v7);
  return (__n128)v6;
}

void sub_1C9883480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)va);
  _Unwind_Resume(a1);
}

__n128 sub_1C9883494(uint64_t a1)
{
  const __CFData *Data;
  const __CFData *v2;
  unsigned __int8 v3;
  NSObject *v4;
  __int128 v6;
  UInt8 v7[16];
  UInt8 buffer[16];
  CFRange v9;

  cva::DictionaryHandler::item((cva::DictionaryHandler *)(a1 + 40), CFSTR("color_camera_y_direction"));
  Data = (const __CFData *)cva::ItemHandler::getData((cva::ItemHandler *)v7);
  v2 = Data;
  v6 = 0u;
  if (Data)
  {
    if (CFDataGetLength(Data) == 16)
    {
      *(_DWORD *)&buffer[8] = 0;
      *(_QWORD *)buffer = 0;
      v9.location = 0;
      v9.length = 16;
      CFDataGetBytes(v2, v9, buffer);
      v6 = *(_OWORD *)buffer;
    }
    else
    {
      v3 = atomic_load((unsigned __int8 *)&qword_1EF921268);
      if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921268))
      {
        qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
        __cxa_guard_release(&qword_1EF921268);
      }
      v4 = (id)qword_1EF921260;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buffer = 0;
        _os_log_error_impl(&dword_1C9870000, v4, OS_LOG_TYPE_ERROR, "direction size should be of size = sizeof(vector_float3)", buffer, 2u);
      }

    }
  }
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v7);
  return (__n128)v6;
}

void sub_1C98835B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)va);
  _Unwind_Resume(a1);
}

__n128 sub_1C98835CC(uint64_t a1)
{
  const __CFData *Data;
  const __CFData *v2;
  unsigned __int8 v3;
  NSObject *v4;
  __int128 v6;
  UInt8 v7[16];
  UInt8 buffer[16];
  CFRange v9;

  cva::DictionaryHandler::item((cva::DictionaryHandler *)(a1 + 40), CFSTR("depth_camera_x_direction"));
  Data = (const __CFData *)cva::ItemHandler::getData((cva::ItemHandler *)v7);
  v2 = Data;
  v6 = 0u;
  if (Data)
  {
    if (CFDataGetLength(Data) == 16)
    {
      *(_DWORD *)&buffer[8] = 0;
      *(_QWORD *)buffer = 0;
      v9.location = 0;
      v9.length = 16;
      CFDataGetBytes(v2, v9, buffer);
      v6 = *(_OWORD *)buffer;
    }
    else
    {
      v3 = atomic_load((unsigned __int8 *)&qword_1EF921268);
      if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921268))
      {
        qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
        __cxa_guard_release(&qword_1EF921268);
      }
      v4 = (id)qword_1EF921260;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buffer = 0;
        _os_log_error_impl(&dword_1C9870000, v4, OS_LOG_TYPE_ERROR, "direction size should be of size = sizeof(vector_float3)", buffer, 2u);
      }

    }
  }
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v7);
  return (__n128)v6;
}

void sub_1C98836F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)va);
  _Unwind_Resume(a1);
}

__n128 sub_1C9883704(uint64_t a1)
{
  const __CFData *Data;
  const __CFData *v2;
  unsigned __int8 v3;
  NSObject *v4;
  __int128 v6;
  UInt8 v7[16];
  UInt8 buffer[16];
  CFRange v9;

  cva::DictionaryHandler::item((cva::DictionaryHandler *)(a1 + 40), CFSTR("depth_camera_y_direction"));
  Data = (const __CFData *)cva::ItemHandler::getData((cva::ItemHandler *)v7);
  v2 = Data;
  v6 = 0u;
  if (Data)
  {
    if (CFDataGetLength(Data) == 16)
    {
      *(_DWORD *)&buffer[8] = 0;
      *(_QWORD *)buffer = 0;
      v9.location = 0;
      v9.length = 16;
      CFDataGetBytes(v2, v9, buffer);
      v6 = *(_OWORD *)buffer;
    }
    else
    {
      v3 = atomic_load((unsigned __int8 *)&qword_1EF921268);
      if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921268))
      {
        qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
        __cxa_guard_release(&qword_1EF921268);
      }
      v4 = (id)qword_1EF921260;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buffer = 0;
        _os_log_error_impl(&dword_1C9870000, v4, OS_LOG_TYPE_ERROR, "direction size should be of size = sizeof(vector_float3)", buffer, 2u);
      }

    }
  }
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v7);
  return (__n128)v6;
}

void sub_1C9883828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1C988383C(uint64_t a1)
{
  if ((cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)(*(_QWORD *)a1 + 40), CFSTR("depth")) & 1) != 0)
    return 0;
  else
    return cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)(*(_QWORD *)a1 + 40), CFSTR("normalized_disparity"));
}

float sub_1C9883890(uint64_t a1)
{
  float v2;
  float v3;
  uint64_t v5;

  v2 = 1.0;
  if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)(*(_QWORD *)a1 + 40), CFSTR("depth_unit")))
  {
    cva::DictionaryHandler::item((cva::DictionaryHandler *)(*(_QWORD *)a1 + 40), CFSTR("depth_unit"));
    cva::ItemHandler::getValue<float>();
    v2 = v3;
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v5);
  }
  return v2;
}

void sub_1C9883908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&a9);
  _Unwind_Resume(a1);
}

float sub_1C988391C(uint64_t a1)
{
  float v2;
  float v3;
  uint64_t v5;

  v2 = 1.0;
  if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)(*(_QWORD *)a1 + 40), CFSTR("disparity_normalization_offset")))
  {
    cva::DictionaryHandler::item((cva::DictionaryHandler *)(*(_QWORD *)a1 + 40), CFSTR("disparity_normalization_offset"));
    cva::ItemHandler::getValue<float>();
    v2 = v3;
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v5);
  }
  return v2;
}

void sub_1C9883994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&a9);
  _Unwind_Resume(a1);
}

float sub_1C98839A8(uint64_t a1)
{
  float v2;
  float v3;
  uint64_t v5;

  v2 = 1.0;
  if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)(*(_QWORD *)a1 + 40), CFSTR("disparity_normalization_multiplier")))
  {
    cva::DictionaryHandler::item((cva::DictionaryHandler *)(*(_QWORD *)a1 + 40), CFSTR("disparity_normalization_multiplier"));
    cva::ItemHandler::getValue<float>();
    v2 = v3;
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v5);
  }
  return v2;
}

void sub_1C9883A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1C9883A34(uint64_t a1)
{
  unsigned __int16 v2;
  uint64_t v4;

  if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)(*(_QWORD *)a1 + 40), CFSTR("disparity_invalid_value")))
  {
    cva::DictionaryHandler::item((cva::DictionaryHandler *)(*(_QWORD *)a1 + 40), CFSTR("disparity_invalid_value"));
    v2 = cva::ItemHandler::getValue<int>();
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v4);
  }
  else
  {
    return 0x1FFF;
  }
  return v2;
}

void sub_1C9883AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1C9883ABC(uint64_t *a1, double a2)
{
  const __CFData *Data;
  const __CFData *v4;
  unsigned __int8 v5;
  NSObject *v6;
  int32x4_t v7;
  float32x2_t v8;
  float32x2_t v9;
  int32x4_t v10;
  float32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float32x4_t v33;
  __n128 v35;
  float32x4_t v36;
  __n128 v37;
  float32x4_t v38;
  float v39;
  float32x4_t v40;
  float v41;
  UInt8 v42[16];
  UInt8 buffer[16];
  CFRange v44;

  v35 = sub_1C988335C(*a1);
  v37 = sub_1C9883494(*a1);
  cva::DictionaryHandler::item((cva::DictionaryHandler *)(*a1 + 40), CFSTR("gravity_direction"));
  Data = (const __CFData *)cva::ItemHandler::getData((cva::ItemHandler *)v42);
  v4 = Data;
  v40 = 0u;
  if (Data)
  {
    if (CFDataGetLength(Data) == 16)
    {
      *(_QWORD *)&buffer[4] = 0;
      *(_DWORD *)buffer = 0;
      v44.location = 0;
      v44.length = 16;
      CFDataGetBytes(v4, v44, buffer);
      v40 = *(float32x4_t *)buffer;
    }
    else
    {
      v5 = atomic_load((unsigned __int8 *)&qword_1EF921268);
      if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921268))
      {
        qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
        __cxa_guard_release(&qword_1EF921268);
      }
      v6 = (id)qword_1EF921260;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buffer = 0;
        _os_log_error_impl(&dword_1C9870000, v6, OS_LOG_TYPE_ERROR, "direction size should be of size = sizeof(vector_float3)", buffer, 2u);
      }

    }
  }
  v7 = (int32x4_t)vmulq_f32((float32x4_t)v35, (float32x4_t)v35);
  v7.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v7, 2), vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v7.i8, 1))).u32[0];
  v8 = vrsqrte_f32((float32x2_t)v7.u32[0]);
  v9 = vmul_f32(v8, vrsqrts_f32((float32x2_t)v7.u32[0], vmul_f32(v8, v8)));
  v7.i32[0] = vmul_f32(v9, vrsqrts_f32((float32x2_t)v7.u32[0], vmul_f32(v9, v9))).u32[0];
  v10 = (int32x4_t)vmulq_f32((float32x4_t)v37, (float32x4_t)v37);
  v10.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v10, 2), vadd_f32(*(float32x2_t *)v10.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v10.i8, 1))).u32[0];
  v11 = vmulq_n_f32((float32x4_t)v35, *(float *)v7.i32);
  *(float32x2_t *)v7.i8 = vrsqrte_f32((float32x2_t)v10.u32[0]);
  *(float32x2_t *)v7.i8 = vmul_f32(*(float32x2_t *)v7.i8, vrsqrts_f32((float32x2_t)v10.u32[0], vmul_f32(*(float32x2_t *)v7.i8, *(float32x2_t *)v7.i8)));
  v33 = vmulq_n_f32((float32x4_t)v37, vmul_f32(*(float32x2_t *)v7.i8, vrsqrts_f32((float32x2_t)v10.u32[0], vmul_f32(*(float32x2_t *)v7.i8, *(float32x2_t *)v7.i8))).f32[0]);
  v12 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v33, (int32x4_t)v33), (int8x16_t)v33, 0xCuLL), vnegq_f32(v11)), v33, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v11, (int32x4_t)v11), (int8x16_t)v11, 0xCuLL));
  v36 = v11;
  v38 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v12, v12), (int8x16_t)v12, 0xCuLL);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v42);
  v13 = (int32x4_t)vmulq_f32(v40, v40);
  v13.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v13, 2), vadd_f32(*(float32x2_t *)v13.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v13.i8, 1))).u32[0];
  v14 = vrsqrte_f32((float32x2_t)v13.u32[0]);
  v15 = vmul_f32(v14, vrsqrts_f32((float32x2_t)v13.u32[0], vmul_f32(v14, v14)));
  v16 = vmulq_n_f32(v40, vmul_f32(v15, vrsqrts_f32((float32x2_t)v13.u32[0], vmul_f32(v15, v15))).f32[0]);
  v17 = vmulq_f32(v16, v38);
  if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v17, 2), vaddq_f32(v17, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 1))).f32[0]) > 0.75)return 0;
  v18 = vmulq_f32(v33, v16);
  v19 = vmulq_f32(v36, v16);
  LODWORD(v39) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2), vaddq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 1))).u32[0];
  LODWORD(v41) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 2), vaddq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1))).u32[0];
  v20 = atan2f(*((float *)&a2 + 1), *(float *)&a2) / 3.14159265 * 180.0;
  v21 = fmodf(v20, 360.0);
  v22 = fmodf(v21 + 360.0, 360.0);
  v23 = atan2f(v41, v39) / 3.14159265 * 180.0;
  v24 = fmodf(v23, 360.0);
  v25 = fmodf(v24 + 360.0, 360.0);
  v26 = fmodf(v22 - v25, 360.0);
  v27 = fmodf(v26 + 360.0, 360.0);
  if (v27 < 45.0 || v27 >= 315.0)
    return 0;
  if (v27 >= 45.0 && v27 < 135.0)
    return 1;
  if (v27 >= 135.0 && v27 < 225.0)
    return 2;
  if (v27 >= 315.0 || v27 < 225.0)
    return 0;
  else
    return 3;
}

void sub_1C9883E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1C9883E80(uint64_t *a1)
{
  __n128 v2;
  int32x4_t v3;
  float32x2_t v4;
  float32x2_t v5;
  __n128 v6;
  int32x4_t v7;
  float32x2_t v8;
  float32x2_t v9;
  __n128 v10;
  int32x4_t v11;
  float32x2_t v12;
  float32x2_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  BOOL v22;
  float32x4_t v24;
  float32x4_t v25;

  v2 = sub_1C988335C(*a1);
  v3 = (int32x4_t)vmulq_f32((float32x4_t)v2, (float32x4_t)v2);
  v3.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v3, 2), vadd_f32(*(float32x2_t *)v3.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v3.i8, 1))).u32[0];
  v4 = vrsqrte_f32((float32x2_t)v3.u32[0]);
  v5 = vmul_f32(v4, vrsqrts_f32((float32x2_t)v3.u32[0], vmul_f32(v4, v4)));
  v25 = vmulq_n_f32((float32x4_t)v2, vmul_f32(v5, vrsqrts_f32((float32x2_t)v3.u32[0], vmul_f32(v5, v5))).f32[0]);
  v6 = sub_1C9883494(*a1);
  v7 = (int32x4_t)vmulq_f32((float32x4_t)v6, (float32x4_t)v6);
  v7.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v7, 2), vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v7.i8, 1))).u32[0];
  v8 = vrsqrte_f32((float32x2_t)v7.u32[0]);
  v9 = vmul_f32(v8, vrsqrts_f32((float32x2_t)v7.u32[0], vmul_f32(v8, v8)));
  v24 = vmulq_n_f32((float32x4_t)v6, vmul_f32(v9, vrsqrts_f32((float32x2_t)v7.u32[0], vmul_f32(v9, v9))).f32[0]);
  v10 = sub_1C98835CC(*a1);
  v11 = (int32x4_t)vmulq_f32((float32x4_t)v10, (float32x4_t)v10);
  v11.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v11, 2), vadd_f32(*(float32x2_t *)v11.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v11.i8, 1))).u32[0];
  v12 = vrsqrte_f32((float32x2_t)v11.u32[0]);
  v13 = vmul_f32(v12, vrsqrts_f32((float32x2_t)v11.u32[0], vmul_f32(v12, v12)));
  v14 = vmulq_n_f32((float32x4_t)v10, vmul_f32(v13, vrsqrts_f32((float32x2_t)v11.u32[0], vmul_f32(v13, v13))).f32[0]);
  v15 = vmulq_f32(v25, v14);
  v16 = vmulq_f32(v24, v14);
  v17 = atan2f(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1))).f32[0], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 2), vaddq_f32(v15, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 1))).f32[0])/ 3.14159265* 180.0;
  v18 = fmodf(v17, 360.0);
  v19 = fmodf(v18 + 360.0, 360.0);
  v20 = fabsf(fmodf(v19, 90.0));
  v21 = vabds_f32(90.0, v20);
  v22 = v20 < 0.001 || v21 < 0.001;
  if (!v22 || fabsf(v19) < 0.001)
    return 0;
  if (fabsf(v19 + -90.0) < 0.001)
    return 1;
  if (fabsf(v19 + -180.0) < 0.001)
    return 2;
  if (fabsf(v19 + -270.0) >= 0.001 && fabsf(v19 + 180.0) >= 0.001)
    return 0;
  return 3;
}

uint64_t sub_1C98840E0(uint64_t *a1, double a2)
{
  int v3;
  __n128 v4;
  int32x4_t v5;
  float32x2_t v6;
  float32x2_t v7;
  __n128 v8;
  int32x4_t v9;
  float32x2_t v10;
  float32x2_t v11;
  __n128 v12;
  int32x4_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  BOOL v24;
  int v25;
  float32x4_t v27;
  float32x4_t v28;

  v3 = sub_1C9883ABC(a1, a2);
  v4 = sub_1C988335C(*a1);
  v5 = (int32x4_t)vmulq_f32((float32x4_t)v4, (float32x4_t)v4);
  v5.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v5, 2), vadd_f32(*(float32x2_t *)v5.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v5.i8, 1))).u32[0];
  v6 = vrsqrte_f32((float32x2_t)v5.u32[0]);
  v7 = vmul_f32(v6, vrsqrts_f32((float32x2_t)v5.u32[0], vmul_f32(v6, v6)));
  v28 = vmulq_n_f32((float32x4_t)v4, vmul_f32(v7, vrsqrts_f32((float32x2_t)v5.u32[0], vmul_f32(v7, v7))).f32[0]);
  v8 = sub_1C9883494(*a1);
  v9 = (int32x4_t)vmulq_f32((float32x4_t)v8, (float32x4_t)v8);
  v9.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v9, 2), vadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v9.i8, 1))).u32[0];
  v10 = vrsqrte_f32((float32x2_t)v9.u32[0]);
  v11 = vmul_f32(v10, vrsqrts_f32((float32x2_t)v9.u32[0], vmul_f32(v10, v10)));
  v27 = vmulq_n_f32((float32x4_t)v8, vmul_f32(v11, vrsqrts_f32((float32x2_t)v9.u32[0], vmul_f32(v11, v11))).f32[0]);
  v12 = sub_1C98835CC(*a1);
  v13 = (int32x4_t)vmulq_f32((float32x4_t)v12, (float32x4_t)v12);
  v13.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v13, 2), vadd_f32(*(float32x2_t *)v13.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v13.i8, 1))).u32[0];
  v14 = vrsqrte_f32((float32x2_t)v13.u32[0]);
  v15 = vmul_f32(v14, vrsqrts_f32((float32x2_t)v13.u32[0], vmul_f32(v14, v14)));
  v16 = vmulq_n_f32((float32x4_t)v12, vmul_f32(v15, vrsqrts_f32((float32x2_t)v13.u32[0], vmul_f32(v15, v15))).f32[0]);
  v17 = vmulq_f32(v28, v16);
  v18 = vmulq_f32(v27, v16);
  v19 = atan2f(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 2), vaddq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1))).f32[0], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v17, 2), vaddq_f32(v17, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 1))).f32[0])/ 3.14159265* 180.0;
  v20 = fmodf(v19, 360.0);
  v21 = fmodf(v20 + 360.0, 360.0);
  v22 = fabsf(fmodf(v21, 90.0));
  v23 = vabds_f32(90.0, v22);
  v24 = v22 < 0.001 || v23 < 0.001;
  if (v24 && fabsf(v21) >= 0.001)
  {
    if (fabsf(v21 + -90.0) < 0.001)
    {
      v25 = 1;
      return (v3 + v25) & 3;
    }
    if (fabsf(v21 + -180.0) < 0.001)
    {
      v25 = 2;
      return (v3 + v25) & 3;
    }
    if (fabsf(v21 + -270.0) < 0.001 || fabsf(v21 + 180.0) < 0.001)
    {
      v25 = 3;
      return (v3 + v25) & 3;
    }
  }
  v25 = 0;
  return (v3 + v25) & 3;
}

void sub_1C9884350()
{
  uint64_t v0;
  void *v1;

  v0 = operator new();
  *(_BYTE *)v0 = 0;
  *(_OWORD *)(v0 + 8) = 0u;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 40) = 0u;
  qword_1EF921250 = v0;
  v1 = (void *)MEMORY[0x1CAA45030]();
  *(_BYTE *)qword_1EF921250 = os_variant_allows_internal_security_policies();
  objc_autoreleasePoolPop(v1);
}

void sub_1C98843BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1;
  v4 = *(_QWORD *)(v1 + 592);
  *(_QWORD *)(v3 + 592) = 0;
  if (v4)
  {
    if (*(char *)(v4 + 55) < 0)
      operator delete(*(void **)(v4 + 32));
    if (*(char *)(v4 + 31) < 0)
      operator delete(*(void **)(v4 + 8));
    MEMORY[0x1CAA44AFC](v4, 0x1012C400F58515BLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1C9884410(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  *(_QWORD *)a1 = &off_1E8295170;
  if (*(_QWORD *)(a1 + 152))
  {
    v2 = (uint64_t *)(a1 + 136);
    v3 = *(_QWORD *)(a1 + 136);
    v4 = *(uint64_t **)(a1 + 144);
    v5 = *v4;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v5;
    *(_QWORD *)(a1 + 152) = 0;
    if (v4 != (uint64_t *)(a1 + 136))
    {
      do
      {
        v7 = (uint64_t *)v4[1];
        v8 = (std::__shared_weak_count *)v4[3];
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(p_shared_owners);
          while (__stlxr(v10 - 1, p_shared_owners));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != v2);
    }
  }
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 80));
  std::mutex::~mutex((std::mutex *)(a1 + 16));
  return a1;
}

uint64_t **sub_1C98844E0(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
    {
      sub_1C9880450(*(_QWORD **)(v3 + 8));
      MEMORY[0x1CAA44AFC](v3, 0x1020C4062D53EE8);
    }
    MEMORY[0x1CAA44AFC](v2, 0x20C4093837F09);
  }
  return a1;
}

void sub_1C9884558(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  *(_QWORD *)a1 = &off_1E8295170;
  if (*(_QWORD *)(a1 + 152))
  {
    v2 = (uint64_t *)(a1 + 136);
    v3 = *(_QWORD *)(a1 + 136);
    v4 = *(uint64_t **)(a1 + 144);
    v5 = *v4;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v5;
    *(_QWORD *)(a1 + 152) = 0;
    if (v4 != (uint64_t *)(a1 + 136))
    {
      do
      {
        v6 = (uint64_t *)v4[1];
        v7 = (std::__shared_weak_count *)v4[3];
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v9 = __ldaxr(p_shared_owners);
          while (__stlxr(v9 - 1, p_shared_owners));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        operator delete(v4);
        v4 = v6;
      }
      while (v6 != v2);
    }
  }
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 80));
  std::mutex::~mutex((std::mutex *)(a1 + 16));
  JUMPOUT(0x1CAA44AFCLL);
}

void sub_1C9884638(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t i;
  uint64_t *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::unique_lock<std::mutex> v13;

  v13.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 16);
  v13.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 16));
  for (i = *(_QWORD *)(a1 + 152); !i; i = *(_QWORD *)(a1 + 152))
    std::condition_variable::wait((std::condition_variable *)(a1 + 80), &v13);
  v5 = *(uint64_t **)(a1 + 144);
  v6 = v5[3];
  *a2 = v5[2];
  a2[1] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    v5 = *(uint64_t **)(a1 + 144);
    i = *(_QWORD *)(a1 + 152);
    v9 = (std::__shared_weak_count *)v5[3];
  }
  else
  {
    v9 = 0;
  }
  v10 = *v5;
  *(_QWORD *)(v10 + 8) = v5[1];
  *(_QWORD *)v5[1] = v10;
  *(_QWORD *)(a1 + 152) = i - 1;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  operator delete(v5);
  if (v13.__owns_)
    std::mutex::unlock(v13.__m_);
}

void sub_1C9884734(uint64_t a1, _QWORD *a2, int a3, uint64_t a4)
{
  _BOOL4 v8;
  uint64_t v9;
  std::chrono::system_clock::time_point v10;
  uint64_t v11;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::unique_lock<std::mutex> v26;

  v26.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 16);
  v26.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 16));
  v8 = 0;
  v9 = *(_QWORD *)(a1 + 152);
  if (a3 < 1 || v9)
    goto LABEL_18;
  v8 = a4 != 0;
  if (a4)
  {
    if (!*(_BYTE *)(a4 + 8))
      goto LABEL_42;
    std::mutex::unlock(*(std::mutex **)a4);
    *(_BYTE *)(a4 + 8) = 0;
  }
  std::chrono::steady_clock::now();
  v10.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  if (!v10.__d_.__rep_)
  {
    v11 = 0;
    goto LABEL_14;
  }
  if (v10.__d_.__rep_ < 1)
  {
    if ((unint64_t)v10.__d_.__rep_ < 0xFFDF3B645A1CAC09)
    {
      v11 = 0x8000000000000000;
      goto LABEL_14;
    }
LABEL_13:
    v11 = 1000 * v10.__d_.__rep_;
    goto LABEL_14;
  }
  if ((unint64_t)v10.__d_.__rep_ <= 0x20C49BA5E353F7)
    goto LABEL_13;
  v11 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_14:
  if (v11 <= ((1000000 * a3) ^ 0x7FFFFFFFFFFFFFFFLL))
    v12.__d_.__rep_ = v11 + 1000000 * a3;
  else
    v12.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
  std::condition_variable::__do_timed_wait((std::condition_variable *)(a1 + 80), &v26, v12);
  std::chrono::steady_clock::now();
  v9 = *(_QWORD *)(a1 + 152);
LABEL_18:
  if (v9)
  {
    v13 = *(_QWORD *)(a1 + 144);
    v15 = *(_QWORD *)(v13 + 16);
    v14 = *(_QWORD *)(v13 + 24);
    if (v14)
    {
      v16 = (unint64_t *)(v14 + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v18 = (std::__shared_weak_count *)a2[1];
    *a2 = v15;
    a2[1] = v14;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v21 = *(uint64_t **)(a1 + 144);
    v22 = *v21;
    *(_QWORD *)(v22 + 8) = v21[1];
    *(_QWORD *)v21[1] = v22;
    --*(_QWORD *)(a1 + 152);
    v23 = (std::__shared_weak_count *)v21[3];
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    operator delete(v21);
  }
  if (v26.__owns_)
    std::mutex::unlock(v26.__m_);
  if (v8)
  {
    if (*(_QWORD *)a4)
    {
      if (!*(_BYTE *)(a4 + 8))
      {
        std::mutex::lock(*(std::mutex **)a4);
        *(_BYTE *)(a4 + 8) = 1;
        return;
      }
    }
    else
    {
      std::__throw_system_error(1, "unique_lock::lock: references null mutex");
    }
    std::__throw_system_error(11, "unique_lock::lock: already locked");
LABEL_42:
    std::__throw_system_error(1, "unique_lock::unlock: not locked");
    __break(1u);
  }
}

void sub_1C9884994(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

BOOL sub_1C98849A8(uint64_t a1, _QWORD *a2)
{
  std::mutex *v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  int v18;

  v4 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  v5 = *(unsigned __int8 *)(a1 + 128);
  if (*(_BYTE *)(a1 + 128))
  {
    std::mutex::unlock(v4);
  }
  else
  {
    v6 = operator new(0x20uLL);
    v7 = a2[1];
    v6[2] = *a2;
    v6[3] = v7;
    if (v7)
    {
      v8 = (unint64_t *)(v7 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    v10 = *(_QWORD *)(a1 + 136);
    *v6 = v10;
    v6[1] = a1 + 136;
    *(_QWORD *)(v10 + 8) = v6;
    *(_QWORD *)(a1 + 136) = v6;
    v11 = *(_QWORD *)(a1 + 152) + 1;
    *(_QWORD *)(a1 + 152) = v11;
    v12 = *(_DWORD *)(a1 + 8);
    if (v12 < (int)v11 && (v12 & 0x80000000) == 0)
    {
      do
      {
        v13 = *(uint64_t **)(a1 + 144);
        v14 = *v13;
        *(_QWORD *)(v14 + 8) = v13[1];
        *(_QWORD *)v13[1] = v14;
        *(_QWORD *)(a1 + 152) = v11 - 1;
        v15 = (std::__shared_weak_count *)v13[3];
        if (v15)
        {
          p_shared_owners = (unint64_t *)&v15->__shared_owners_;
          do
            v17 = __ldaxr(p_shared_owners);
          while (__stlxr(v17 - 1, p_shared_owners));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        operator delete(v13);
        v11 = *(_QWORD *)(a1 + 152);
        v18 = *(_DWORD *)(a1 + 8);
      }
      while (v18 < (int)v11 && (v18 & 0x80000000) == 0);
    }
    std::mutex::unlock(v4);
    std::condition_variable::notify_one((std::condition_variable *)(a1 + 80));
  }
  return v5 == 0;
}

void sub_1C9884AD8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1C9884AEC(uint64_t a1)
{
  std::mutex *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  if (*(_QWORD *)(a1 + 152))
  {
    v3 = (uint64_t *)(a1 + 136);
    v4 = *(_QWORD *)(a1 + 136);
    v5 = *(uint64_t **)(a1 + 144);
    v6 = *v5;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v6;
    *(_QWORD *)(a1 + 152) = 0;
    if (v5 != (uint64_t *)(a1 + 136))
    {
      do
      {
        v7 = (uint64_t *)v5[1];
        v8 = (std::__shared_weak_count *)v5[3];
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(p_shared_owners);
          while (__stlxr(v10 - 1, p_shared_owners));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        operator delete(v5);
        v5 = v7;
      }
      while (v7 != v3);
    }
  }
  std::mutex::unlock(v2);
}

uint64_t sub_1C9884BAC(uint64_t a1)
{
  std::mutex *v2;
  uint64_t v3;

  v2 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  v3 = *(unsigned int *)(a1 + 152);
  std::mutex::unlock(v2);
  return v3;
}

_QWORD *sub_1C9884BE4(_QWORD *a1, int a2, uint64_t a3)
{
  void *__p[2];
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  char v11;
  __int16 v12;
  char v13;
  char v14;

  if (*(char *)(a3 + 23) < 0)
  {
    sub_1C987D148(__p, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a3;
    v7 = *(_QWORD *)(a3 + 16);
  }
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  sub_1C9920390(a1, a2, (uint64_t)__p);
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
  return a1;
}

uint64_t sub_1C9884C74(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 56);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
        if ((*(char *)(a1 + 23) & 0x80000000) == 0)
          return a1;
        goto LABEL_7;
      }
    }
  }
  if (*(char *)(a1 + 23) < 0)
LABEL_7:
    operator delete(*(void **)a1);
  return a1;
}

void sub_1C9884CF0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295C28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1C9884D00(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295C28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA44AFCLL);
}

uint64_t sub_1C9884D30(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1C9884D44()
{
  JUMPOUT(0x1CAA44AFCLL);
}

_QWORD *sub_1C9884D58(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E8295518;
  result[1] = v3;
  return result;
}

uint64_t sub_1C9884D8C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E8295518;
  a2[1] = v2;
  return result;
}

void sub_1C9884DA8(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  int v3;
  int v4;
  uint64_t v5;
  BOOL v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *p_shared_owners;
  uint64_t v20;
  void (**v21)(_QWORD, _QWORD);
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t Dictionary;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (void *)MEMORY[0x1CAA45030]();
  std::mutex::lock((std::mutex *)(v1 + 40));
  v3 = *(_DWORD *)(v1 + 176);
  std::mutex::unlock((std::mutex *)(v1 + 40));
  v33 = 0uLL;
  sub_1C9884734(v1 + 24, &v33, 0, 0);
  if (!v4)
    goto LABEL_46;
  v5 = v33;
  if (!(_QWORD)v33)
    goto LABEL_46;
  if (v3 == 1 || (*(_QWORD *)(*(_QWORD *)v33 + 8) ? (v6 = v3 <= 10) : (v6 = 0), v6))
  {
    v16 = *(uint64_t **)v1;
    v7 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
    v32 = v33;
    if (*((_QWORD *)&v33 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    sub_1C9880CC4((uint64_t)&v34, v16, (__CVBuffer ****)&v32);
    v31 = v34;
    v34 = 0uLL;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
LABEL_29:
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  else
  {
    v7 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
    if (*((_QWORD *)&v33 + 1))
    {
      v8 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    std::mutex::lock(&stru_1EF920F60);
    *(_QWORD *)&v34 = v5;
    *((_QWORD *)&v34 + 1) = v7;
    if (v7)
    {
      v10 = (unint64_t *)&v7->__shared_owners_;
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    sub_1C98804C0(&v32, (uint64_t *)&v34, 0, 0);
    if (v7)
    {
      v12 = (unint64_t *)&v7->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    std::mutex::unlock(&stru_1EF920F60);
    v31 = v32;
    v32 = 0uLL;
    if (v7)
    {
      v14 = (unint64_t *)&v7->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      goto LABEL_29;
    }
  }
  v20 = MEMORY[0x1CAA45144](*(_QWORD *)(*(_QWORD *)v33 + 32));
  v21 = (void (**)(_QWORD, _QWORD))v20;
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
  v33 = 0uLL;
  if (!v22)
    goto LABEL_35;
  v23 = (unint64_t *)&v22->__shared_owners_;
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    if (!v21)
      goto LABEL_41;
  }
  else
  {
LABEL_35:
    if (!v20)
      goto LABEL_41;
  }
  if ((_QWORD)v31)
  {
    Dictionary = cva::DictionaryHandler::getDictionary((cva::DictionaryHandler *)v31);
    v21[2](v21, Dictionary);
  }
  else
  {
    ((void (**)(_QWORD, void *))v21)[2](v21, &unk_1E829B960);
  }
LABEL_41:

  if (*((_QWORD *)&v31 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v31 + 1) + 16))(*((_QWORD *)&v31 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v31 + 1));
    }
  }
LABEL_46:
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
  if (*((_QWORD *)&v33 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  objc_autoreleasePoolPop(v2);
}

void sub_1C9885084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;

  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  std::mutex::unlock(&stru_1EF920F60);
  if (v14)
  {
    v18 = (unint64_t *)&v14->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (a14)
  {
    v20 = (unint64_t *)&a14->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }
  _Unwind_Resume(a1);
}

void sub_1C98851BC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295AD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1C98851CC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295AD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA44AFCLL);
}

uint64_t sub_1C98851FC(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1C988520C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295720;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1C988521C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295720;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA44AFCLL);
}

uint64_t sub_1C988524C(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 24);
  *(_QWORD *)(result + 24) = 0;
  if (v1)
  {
    cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)(v1 + 40));

    JUMPOUT(0x1CAA44AFCLL);
  }
  return result;
}

uint64_t sub_1C98852A4()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF921268);
  v1 = &unk_1EF921000;
  if ((v0 & 1) == 0)
  {
    v3 = __cxa_guard_acquire(&qword_1EF921268);
    v1 = (_QWORD *)&unk_1EF921000;
    if (v3)
    {
      qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
      __cxa_guard_release(&qword_1EF921268);
      v1 = (_QWORD *)&unk_1EF921000;
    }
  }
  return v1[76];
}

uint64_t sub_1C9885310(char *a1, int *a2)
{
  uint64_t result;
  int v5;
  unsigned __int8 v6;
  NSObject *v7;
  char *v8;
  void *__p[2];
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  strcpy((char *)__p, "Undefined");
  if (cva::utils::string::iequals())
  {
    *a2 = 0;
    return 1;
  }
  strcpy((char *)__p, "PositiveX");
  if (cva::utils::string::iequals())
  {
    result = 1;
    *a2 = 1;
    return result;
  }
  strcpy((char *)__p, "PositiveY");
  if (cva::utils::string::iequals())
  {
    v5 = 2;
LABEL_11:
    *a2 = v5;
    return 1;
  }
  strcpy((char *)__p, "NegativeX");
  if (cva::utils::string::iequals())
  {
    v5 = 3;
    goto LABEL_11;
  }
  v10 = 9;
  strcpy((char *)__p, "NegativeY");
  if (cva::utils::string::iequals())
  {
    v5 = 4;
    goto LABEL_11;
  }
  v6 = atomic_load((unsigned __int8 *)&qword_1EF921268);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921268))
  {
    qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
    __cxa_guard_release(&qword_1EF921268);
  }
  v7 = (id)qword_1EF921260;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    if (a1[23] >= 0)
      v8 = a1;
    else
      v8 = *(char **)a1;
    LODWORD(__p[0]) = 136315138;
    *(void **)((char *)__p + 4) = v8;
    _os_log_error_impl(&dword_1C9870000, v7, OS_LOG_TYPE_ERROR, "invalid string for gravity direction: %s", (uint8_t *)__p, 0xCu);
  }

  return 0;
}

void sub_1C98855B4(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1C98855C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1C98855EC(uint64_t *a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)(v2 + 32) = 0x200000000;
  sub_1C9888CF8((_QWORD *)(v2 + 40));
  sub_1C9888CF8((_QWORD *)(v2 + 64));
  *(_QWORD *)(v2 + 88) = &off_1E8294A28;
  *(_QWORD *)(v2 + 96) = 0;
  *(_QWORD *)(v2 + 104) = 0;
  *(_QWORD *)(v2 + 112) = 0;
  *(_DWORD *)(v2 + 120) = 0;
  *(_QWORD *)(v2 + 128) = 0;
  *(_QWORD *)(v2 + 136) = 0;
  *(_DWORD *)(v2 + 144) = 0;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_QWORD *)(v2 + 184) = 0;
  *(_QWORD *)(v2 + 208) = 0;
  *(_QWORD *)(v2 + 216) = 0;
  *(_QWORD *)(v2 + 200) = 0;
  *(_BYTE *)(v2 + 224) = 0;
  *(_QWORD *)(v2 + 228) = 0x3F8000007F7FFFFFLL;
  *a1 = v2;
  return a1;
}

void sub_1C988569C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  __CVBuffer **v2;
  uint64_t v4;
  uint64_t v5;
  __CVBuffer *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = v1[6];
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = v1[7];
    if (!v5)
    {
LABEL_3:
      v6 = *v2;
      if (!*v2)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else
  {
    v5 = v1[7];
    if (!v5)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *v2;
  if (!*v2)
  {
LABEL_4:
    v7 = (std::__shared_weak_count *)v1[1];
    if (!v7)
      goto LABEL_13;
    goto LABEL_9;
  }
LABEL_8:
  CVPixelBufferRelease(v6);
  v7 = (std::__shared_weak_count *)v1[1];
  if (!v7)
    goto LABEL_13;
LABEL_9:
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_13:
  MEMORY[0x1CAA44AFC](v1, 0x10A0C407A79CA5DLL);
  _Unwind_Resume(a1);
}

uint64_t sub_1C9885758(int32x2_t **a1, uint64_t *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  void **v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  NSObject *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t *v26;
  int v27;
  int v28;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  BOOL v41;
  _BOOL4 v42;
  uint64_t *v43;
  int v44;
  unsigned __int8 v46;
  NSObject *v47;
  uint64_t *v48;
  const char *v49;
  unsigned __int8 v50;
  unint64_t v51;
  __int128 v52;
  uint64_t *v53;
  unint64_t v54;
  size_t v55;
  uint64_t v56;
  size_t v57;
  unsigned __int8 v58;
  NSObject *v59;
  unsigned __int8 v60;
  NSObject *v61;
  unsigned __int8 v62;
  NSObject *v63;
  unsigned __int8 v64;
  NSObject *v65;
  unsigned __int8 v66;
  NSObject *v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  _BYTE *v71;
  uint64_t v72;
  unsigned int v73;
  unsigned __int8 v74;
  NSObject *v75;
  uint64_t v76;
  int32x2_t *v77;
  __int16 v78;
  unsigned __int8 v79;
  NSObject *v80;
  size_t *v82;
  size_t *v83;
  char *v84;
  signed __int8 v85;
  const void *v86;
  size_t v87;
  char **v88;
  char *v89;
  int v90;
  char *v91;
  size_t v92;
  size_t v93;
  int v94;
  char *v95;
  char **v96;
  char *v97;
  int v98;
  char **v99;
  size_t v100;
  size_t v101;
  int v102;
  NSObject *v103;
  __int32 v104;
  NSObject *v105;
  __int32 v106;
  NSObject *v107;
  NSObject *v108;
  void **v109;
  void **v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t *v115;
  const char *v116;
  const char *v117;
  unsigned __int8 v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  int v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int v131;
  std::__shared_weak_count *v132;
  unsigned __int8 v133;
  NSObject *v134;
  void **v135;
  void **v136;
  void *v137;
  unint64_t *v138;
  unint64_t v139;
  int v140;
  int v141;
  int v142;
  int v143;
  NSObject *v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  unsigned int v150;
  int v151;
  uint64_t v152;
  unsigned int v153;
  _BYTE *v154;
  double v155;
  double v156;
  int v157;
  _BYTE *v158;
  int v159;
  cva::DictionaryHandler *v160;
  std::__shared_weak_count *v161;
  char v162[8];
  char v163[8];
  void *v164[2];
  uint64_t v165;
  __int128 v166;
  void *__dst[2];
  uint64_t v168;
  __int128 v169;
  uint8_t v170[4];
  _BYTE *v171;
  _BYTE __p[24];
  __int128 v173;
  char v174;
  const void *v175[2];
  char v176;
  const void *v177[2];
  char v178;
  const void *v179[2];
  char v180;
  uint8_t buf[8];
  char *v182;
  uint64_t v183;
  uint64_t v184;

  v184 = *MEMORY[0x1E0C80C00];
  kdebug_trace();
  v6 = *((unsigned __int8 *)a2 + 23);
  if ((v6 & 0x80u) != 0)
    v6 = a2[1];
  if (!v6)
  {
    v14 = atomic_load((unsigned __int8 *)&qword_1EF921268);
    if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921268))
    {
      qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
      __cxa_guard_release(&qword_1EF921268);
    }
    v15 = (id)qword_1EF921260;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__p = 0;
      _os_log_error_impl(&dword_1C9870000, v15, OS_LOG_TYPE_ERROR, "cannot find resources", __p, 2u);
    }

    goto LABEL_125;
  }
  v7 = operator new();
  *(_QWORD *)(v7 + 32) = 0;
  v8 = (void **)(v7 + 32);
  *(_QWORD *)v7 = 0;
  *(_QWORD *)(v7 + 8) = 0;
  *(_DWORD *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 40) = 0;
  *(_DWORD *)(v7 + 48) = 0;
  *(_QWORD *)(v7 + 56) = 0xFFFFFFFF00000000;
  *(_WORD *)(v7 + 64) = 0;
  v9 = (std::__shared_weak_count *)operator new();
  v9->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  v9->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295DE8;
  v9->__shared_weak_owners_ = 0;
  v9[1].__vftable = (std::__shared_weak_count_vtbl *)v7;
  if (!MGGetBoolAnswer())
  {
    __p[23] = 0;
    __p[0] = 0;
    v12 = operator new();
    *(_OWORD *)(v12 + 8) = 0u;
    *(_OWORD *)(v12 + 24) = 0u;
    *(_OWORD *)(v12 + 40) = 0u;
    *(_QWORD *)v12 = &off_1E8294CE8;
    v16 = operator new();
    *(_QWORD *)v16 = 0;
    *(_OWORD *)(v16 + 24) = 0u;
    *(_OWORD *)(v16 + 40) = 0u;
    *(_OWORD *)(v16 + 56) = 0u;
    *(_OWORD *)(v16 + 72) = 0u;
    *(_QWORD *)(v16 + 88) = 0;
    *(_DWORD *)(v16 + 96) = 1065353216;
    *(_QWORD *)(v12 + 56) = v16;
    if (sub_1C98FF14C(v12, a2, 1, (uint64_t)__p))
      goto LABEL_16;
    goto LABEL_15;
  }
  if (a3)
    v11 = 3;
  else
    v11 = 2;
  __p[23] = 0;
  __p[0] = 0;
  v12 = operator new();
  *(_OWORD *)(v12 + 8) = 0u;
  *(_OWORD *)(v12 + 24) = 0u;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_QWORD *)v12 = &off_1E8294CE8;
  v13 = operator new();
  *(_QWORD *)v13 = 0;
  *(_OWORD *)(v13 + 24) = 0u;
  *(_OWORD *)(v13 + 40) = 0u;
  *(_OWORD *)(v13 + 56) = 0u;
  *(_OWORD *)(v13 + 72) = 0u;
  *(_QWORD *)(v13 + 88) = 0;
  *(_DWORD *)(v13 + 96) = 1065353216;
  *(_QWORD *)(v12 + 56) = v13;
  if (!sub_1C98FF14C(v12, a2, v11, (uint64_t)__p))
  {
LABEL_15:
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    v12 = 0;
  }
LABEL_16:
  v17 = *(_QWORD **)v7;
  *(_QWORD *)v7 = v12;
  if (v17)
    (*(void (**)(_QWORD *))(*v17 + 8))(v17);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  v18 = *(_QWORD **)v7;
  if (!*(_QWORD *)v7)
  {
    v50 = atomic_load((unsigned __int8 *)&qword_1EF921268);
    if ((v50 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921268))
    {
      qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
      __cxa_guard_release(&qword_1EF921268);
    }
    v47 = qword_1EF921260;
    if (!os_log_type_enabled((os_log_t)qword_1EF921260, OS_LOG_TYPE_ERROR))
      goto LABEL_70;
    if (*((char *)a2 + 23) >= 0)
      v53 = a2;
    else
      v53 = (uint64_t *)*a2;
    *(_DWORD *)__p = 136315138;
    *(_QWORD *)&__p[4] = v53;
    v49 = "failed to load matting regressor %s";
    goto LABEL_78;
  }
  v19 = (uint64_t *)v18[1];
  v20 = v18[2] - (_QWORD)v19;
  v21 = (_DWORD *)v18[4];
  v22 = v18[5] - (_QWORD)v21;
  *(_BYTE *)(v7 + 65) = v22 == 80;
  v23 = 0xFFFFFFFF00000000;
  *(_BYTE *)(v7 + 64) = v20 == 80;
  if (v20 != 80)
  {
LABEL_80:
    *(_QWORD *)(v7 + 56) = v23;
    v54 = (v21[8] * v21[6] * v21[9] * v21[7]);
    if (v22 == 80)
    {
      if ((_DWORD)v54 != *(_DWORD *)(v7 + 48))
      {
        *(_DWORD *)(v7 + 48) = v54;
        if ((_DWORD)v54)
        {
          if (*(_QWORD *)(v7 + 40) < v54)
          {
            free(*(void **)(v7 + 32));
            v55 = (4 * v54 + 31) & 0x7FFFFFFE0;
            *(_QWORD *)(v7 + 32) = 0;
            *(_QWORD *)(v7 + 40) = v55 >> 2;
            *(_QWORD *)__p = 0;
            malloc_type_posix_memalign((void **)__p, 0x20uLL, v55, 0x49090899uLL);
            *(_QWORD *)(v7 + 32) = *(_QWORD *)__p;
          }
        }
        else
        {
          free(*v8);
          *v8 = 0;
          *(_QWORD *)(v7 + 40) = 0;
        }
        v54 = *(unsigned int *)(v7 + 48);
      }
      if ((_DWORD)v54)
        bzero(*v8, 4 * v54);
      v54 = (*(_DWORD *)(v18[4] + 72)
                         * *(_DWORD *)(v18[4] + 64)
                         * *(_DWORD *)(v18[4] + 76)
                         * *(_DWORD *)(v18[4] + 68));
      v56 = v7 + 8;
      if ((_DWORD)v54 == *(_DWORD *)(v7 + 24))
      {
LABEL_97:
        if ((_DWORD)v54)
          bzero(*(void **)v56, 4 * v54);
        v58 = atomic_load((unsigned __int8 *)&qword_1EF921268);
        if ((v58 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921268))
        {
          qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
          __cxa_guard_release(&qword_1EF921268);
        }
        v59 = qword_1EF921260;
        if (os_log_type_enabled((os_log_t)qword_1EF921260, OS_LOG_TYPE_DEBUG))
        {
          if (*((char *)a2 + 23) >= 0)
            v115 = a2;
          else
            v115 = (uint64_t *)*a2;
          v116 = "yes";
          if (*(_BYTE *)(v7 + 64))
            v117 = "yes";
          else
            v117 = "no";
          if (!*(_BYTE *)(v7 + 65))
            v116 = "no";
          *(_DWORD *)__p = 136315650;
          *(_QWORD *)&__p[4] = v115;
          *(_WORD *)&__p[12] = 2080;
          *(_QWORD *)&__p[14] = v117;
          *(_WORD *)&__p[22] = 2080;
          *(_QWORD *)&v173 = v116;
          _os_log_debug_impl(&dword_1C9870000, v59, OS_LOG_TYPE_DEBUG, "loaded matting regressor %s (depth: %s, foreground color: %s", __p, 0x20u);
          v118 = atomic_load((unsigned __int8 *)&qword_1EF921268);
          if ((v118 & 1) != 0)
          {
LABEL_102:
            v61 = qword_1EF921260;
            if (!os_log_type_enabled((os_log_t)qword_1EF921260, OS_LOG_TYPE_DEBUG))
            {
LABEL_103:
              if (!*(_BYTE *)(v7 + 64))
                goto LABEL_106;
              v62 = atomic_load((unsigned __int8 *)&qword_1EF921268);
              if ((v62 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921268))
              {
                qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
                __cxa_guard_release(&qword_1EF921268);
              }
              v63 = qword_1EF921260;
              if (!os_log_type_enabled((os_log_t)qword_1EF921260, OS_LOG_TYPE_DEBUG))
              {
LABEL_106:
                v64 = atomic_load((unsigned __int8 *)&qword_1EF921268);
                if ((v64 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921268))
                {
                  qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
                  __cxa_guard_release(&qword_1EF921268);
                }
                v65 = qword_1EF921260;
                if (!os_log_type_enabled((os_log_t)qword_1EF921260, OS_LOG_TYPE_DEBUG))
                {
LABEL_108:
                  if (!*(_BYTE *)(v7 + 65))
                    goto LABEL_111;
                  v66 = atomic_load((unsigned __int8 *)&qword_1EF921268);
                  if ((v66 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921268))
                  {
                    qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
                    __cxa_guard_release(&qword_1EF921268);
                  }
                  v67 = qword_1EF921260;
                  if (!os_log_type_enabled((os_log_t)qword_1EF921260, OS_LOG_TYPE_DEBUG))
                    goto LABEL_111;
                  sub_1C9888634(__p, (_BYTE *)v7);
                  v142 = DWORD2(v173);
                  sub_1C9888634((char *)__dst, (_BYTE *)v7);
                  v143 = HIDWORD(v169);
                  sub_1C9888634((char *)v164, (_BYTE *)v7);
                  *(_DWORD *)buf = 67109632;
                  *(_DWORD *)&buf[4] = v142;
                  LOWORD(v182) = 1024;
                  *(_DWORD *)((char *)&v182 + 2) = v143;
                  HIWORD(v182) = 1024;
                  LODWORD(v183) = DWORD1(v166);
                  _os_log_debug_impl(&dword_1C9870000, v67, OS_LOG_TYPE_DEBUG, "output foreground color: height:%d width:%d channels:%d", buf, 0x14u);
                  if (SHIBYTE(v165) < 0)
                  {
                    operator delete(v164[0]);
                    if ((SHIBYTE(v168) & 0x80000000) == 0)
                    {
LABEL_255:
                      if ((__p[23] & 0x80000000) != 0)
                        goto LABEL_306;
                      goto LABEL_111;
                    }
                  }
                  else if ((SHIBYTE(v168) & 0x80000000) == 0)
                  {
                    goto LABEL_255;
                  }
                  operator delete(__dst[0]);
                  if ((__p[23] & 0x80000000) != 0)
LABEL_306:
                    operator delete(*(void **)__p);
LABEL_111:
                  *(_QWORD *)&v52 = v7;
                  *((_QWORD *)&v52 + 1) = v9;
                  goto LABEL_112;
                }
                v130 = *(_QWORD *)(*(_QWORD *)v7 + 32);
                if (*(_BYTE *)(v7 + 65))
                {
                  if (*(char *)(v130 + 63) < 0)
                  {
                    sub_1C987D148(__p, *(void **)(v130 + 40), *(_QWORD *)(v130 + 48));
                  }
                  else
                  {
                    *(_OWORD *)__p = *(_OWORD *)(v130 + 40);
                    *(_QWORD *)&__p[16] = *(_QWORD *)(v130 + 56);
                  }
                  v131 = 1;
                }
                else if (*(char *)(v130 + 23) < 0)
                {
                  sub_1C987D148(__p, *(void **)v130, *(_QWORD *)(v130 + 8));
                  v131 = 0;
                }
                else
                {
                  v131 = 0;
                  *(_OWORD *)__p = *(_OWORD *)v130;
                  *(_QWORD *)&__p[16] = *(_QWORD *)(v130 + 16);
                }
                v173 = *(_OWORD *)(v130 + 40 * v131 + 24);
                v148 = DWORD2(v173);
                v149 = *(_QWORD *)(*(_QWORD *)v7 + 32);
                if (*(_BYTE *)(v7 + 65))
                {
                  if (*(char *)(v149 + 63) < 0)
                  {
                    sub_1C987D148(__dst, *(void **)(v149 + 40), *(_QWORD *)(v149 + 48));
                  }
                  else
                  {
                    *(_OWORD *)__dst = *(_OWORD *)(v149 + 40);
                    v168 = *(_QWORD *)(v149 + 56);
                  }
                  v150 = 1;
                }
                else if (*(char *)(v149 + 23) < 0)
                {
                  sub_1C987D148(__dst, *(void **)v149, *(_QWORD *)(v149 + 8));
                  v150 = 0;
                }
                else
                {
                  v150 = 0;
                  *(_OWORD *)__dst = *(_OWORD *)v149;
                  v168 = *(_QWORD *)(v149 + 16);
                }
                v169 = *(_OWORD *)(v149 + 40 * v150 + 24);
                v151 = HIDWORD(v169);
                v152 = *(_QWORD *)(*(_QWORD *)v7 + 32);
                if (*(_BYTE *)(v7 + 65))
                {
                  if (*(char *)(v152 + 63) < 0)
                  {
                    sub_1C987D148(v164, *(void **)(v152 + 40), *(_QWORD *)(v152 + 48));
                  }
                  else
                  {
                    *(_OWORD *)v164 = *(_OWORD *)(v152 + 40);
                    v165 = *(_QWORD *)(v152 + 56);
                  }
                  v153 = 1;
                }
                else if (*(char *)(v152 + 23) < 0)
                {
                  sub_1C987D148(v164, *(void **)v152, *(_QWORD *)(v152 + 8));
                  v153 = 0;
                }
                else
                {
                  v153 = 0;
                  *(_OWORD *)v164 = *(_OWORD *)v152;
                  v165 = *(_QWORD *)(v152 + 16);
                }
                v166 = *(_OWORD *)(v152 + 40 * v153 + 24);
                *(_DWORD *)buf = 67109632;
                *(_DWORD *)&buf[4] = v148;
                LOWORD(v182) = 1024;
                *(_DWORD *)((char *)&v182 + 2) = v151;
                HIWORD(v182) = 1024;
                LODWORD(v183) = DWORD1(v166);
                _os_log_debug_impl(&dword_1C9870000, v65, OS_LOG_TYPE_DEBUG, "output matte: height:%d width:%d channels:%d", buf, 0x14u);
                if (SHIBYTE(v165) < 0)
                {
                  operator delete(v164[0]);
                  if ((SHIBYTE(v168) & 0x80000000) == 0)
                  {
LABEL_296:
                    if ((__p[23] & 0x80000000) == 0)
                      goto LABEL_108;
LABEL_300:
                    operator delete(*(void **)__p);
                    goto LABEL_108;
                  }
                }
                else if ((SHIBYTE(v168) & 0x80000000) == 0)
                {
                  goto LABEL_296;
                }
                operator delete(__dst[0]);
                if ((__p[23] & 0x80000000) == 0)
                  goto LABEL_108;
                goto LABEL_300;
              }
              sub_1C98884F8(__p, v7);
              v140 = DWORD2(v173);
              sub_1C98884F8((char *)__dst, v7);
              v141 = HIDWORD(v169);
              sub_1C98884F8((char *)v164, v7);
              *(_DWORD *)buf = 67109632;
              *(_DWORD *)&buf[4] = v140;
              LOWORD(v182) = 1024;
              *(_DWORD *)((char *)&v182 + 2) = v141;
              HIWORD(v182) = 1024;
              LODWORD(v183) = DWORD1(v166);
              _os_log_debug_impl(&dword_1C9870000, v63, OS_LOG_TYPE_DEBUG, "input depth: height:%d width:%d channels:%d", buf, 0x14u);
              if (SHIBYTE(v165) < 0)
              {
                operator delete(v164[0]);
                if ((SHIBYTE(v168) & 0x80000000) == 0)
                {
LABEL_251:
                  if ((__p[23] & 0x80000000) == 0)
                    goto LABEL_106;
LABEL_303:
                  operator delete(*(void **)__p);
                  goto LABEL_106;
                }
              }
              else if ((SHIBYTE(v168) & 0x80000000) == 0)
              {
                goto LABEL_251;
              }
              operator delete(__dst[0]);
              if ((__p[23] & 0x80000000) == 0)
                goto LABEL_106;
              goto LABEL_303;
            }
            v119 = *(_QWORD *)v7;
            v120 = *(_DWORD *)(v7 + 56);
            v121 = *(_QWORD *)(*(_QWORD *)v7 + 8);
            v122 = v121 + 40 * v120;
            if (*(char *)(v122 + 23) < 0)
            {
              sub_1C987D148(__p, *(void **)v122, *(_QWORD *)(v122 + 8));
              v119 = *(_QWORD *)v7;
              v123 = *(_DWORD *)(v7 + 56);
              v124 = *(_QWORD *)(*(_QWORD *)v7 + 8);
              v125 = v124 + 40 * v123;
              v126 = *(char *)(v125 + 23);
              v173 = *(_OWORD *)(v121 + 40 * v120 + 24);
              v127 = DWORD2(v173);
              if (v126 < 0)
              {
                v128 = DWORD2(v173);
                v129 = v124;
                sub_1C987D148(__dst, *(void **)v125, *(_QWORD *)(v125 + 8));
                v124 = v129;
                v127 = v128;
                v119 = *(_QWORD *)v7;
                v120 = *(_DWORD *)(v7 + 56);
                goto LABEL_265;
              }
              v120 = v123;
            }
            else
            {
              *(_OWORD *)__p = *(_OWORD *)v122;
              *(_QWORD *)&__p[16] = *(_QWORD *)(v122 + 16);
              v125 = v121 + 40 * v120;
              v173 = *(_OWORD *)(v125 + 24);
              v127 = DWORD2(v173);
              v124 = v121;
              v123 = v120;
            }
            *(_OWORD *)__dst = *(_OWORD *)v125;
            v168 = *(_QWORD *)(v125 + 16);
LABEL_265:
            v169 = *(_OWORD *)(v124 + 40 * v123 + 24);
            v145 = HIDWORD(v169);
            v146 = *(_QWORD *)(v119 + 8);
            v147 = v146 + 40 * v120;
            if (*(char *)(v147 + 23) < 0)
            {
              v159 = v127;
              sub_1C987D148(v164, *(void **)v147, *(_QWORD *)(v147 + 8));
              v127 = v159;
            }
            else
            {
              *(_OWORD *)v164 = *(_OWORD *)v147;
              v165 = *(_QWORD *)(v147 + 16);
            }
            v166 = *(_OWORD *)(v146 + 40 * v120 + 24);
            *(_DWORD *)buf = 67109632;
            *(_DWORD *)&buf[4] = v127;
            LOWORD(v182) = 1024;
            *(_DWORD *)((char *)&v182 + 2) = v145;
            HIWORD(v182) = 1024;
            LODWORD(v183) = DWORD1(v166);
            _os_log_debug_impl(&dword_1C9870000, v61, OS_LOG_TYPE_DEBUG, "input color: height:%d width:%d channels:%d", buf, 0x14u);
            if (SHIBYTE(v165) < 0)
            {
              operator delete(v164[0]);
              if ((SHIBYTE(v168) & 0x80000000) == 0)
              {
LABEL_270:
                if ((__p[23] & 0x80000000) == 0)
                  goto LABEL_103;
LABEL_274:
                operator delete(*(void **)__p);
                goto LABEL_103;
              }
            }
            else if ((SHIBYTE(v168) & 0x80000000) == 0)
            {
              goto LABEL_270;
            }
            operator delete(__dst[0]);
            if ((__p[23] & 0x80000000) == 0)
              goto LABEL_103;
            goto LABEL_274;
          }
        }
        else
        {
          v60 = atomic_load((unsigned __int8 *)&qword_1EF921268);
          if ((v60 & 1) != 0)
            goto LABEL_102;
        }
        if (__cxa_guard_acquire(&qword_1EF921268))
        {
          qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
          __cxa_guard_release(&qword_1EF921268);
        }
        goto LABEL_102;
      }
      *(_DWORD *)(v7 + 24) = v54;
      if ((_DWORD)v54)
        goto LABEL_94;
    }
    else
    {
      v56 = v7 + 8;
      if ((_DWORD)v54 == *(_DWORD *)(v7 + 24))
        goto LABEL_97;
      *(_DWORD *)(v7 + 24) = v54;
      if ((_DWORD)v54)
      {
LABEL_94:
        if (*(_QWORD *)(v7 + 16) < v54)
        {
          free(*(void **)(v7 + 8));
          v57 = (4 * v54 + 31) & 0x7FFFFFFE0;
          *(_QWORD *)(v7 + 8) = 0;
          *(_QWORD *)(v7 + 16) = v57 >> 2;
          *(_QWORD *)__p = 0;
          malloc_type_posix_memalign((void **)__p, 0x20uLL, v57, 0x49090899uLL);
          *(_QWORD *)(v7 + 8) = *(_QWORD *)__p;
        }
        goto LABEL_96;
      }
    }
    free(*(void **)v56);
    *(_QWORD *)v56 = 0;
    *(_QWORD *)(v56 + 8) = 0;
LABEL_96:
    v54 = *(unsigned int *)(v7 + 24);
    goto LABEL_97;
  }
  v24 = *((unsigned __int8 *)v19 + 23);
  v25 = (char)v24;
  if ((v24 & 0x80u) != 0)
    v24 = v19[1];
  if (v24 == 6)
  {
    v26 = (uint64_t *)*v19;
    if (v25 >= 0)
      v26 = v19;
    v27 = *(_DWORD *)v26;
    v28 = *((unsigned __int16 *)v26 + 2);
    if (v27 == 1734438249 && v28 == 29541)
    {
      v30 = *((unsigned __int8 *)v19 + 63);
      v31 = (char)v30;
      if ((v30 & 0x80u) != 0)
        v30 = v19[6];
      if (v30 == 12)
      {
        v32 = v31 >= 0 ? (uint64_t)(v19 + 5) : v19[5];
        v33 = *(_QWORD *)v32;
        v34 = *(_DWORD *)(v32 + 8);
        if (v33 == 0x6D695F6874706564 && v34 == 1936025441)
        {
          v23 = 0x100000000;
          goto LABEL_80;
        }
      }
    }
  }
  v36 = *((unsigned __int8 *)v19 + 63);
  v37 = (char)v36;
  if ((v36 & 0x80u) != 0)
    v36 = v19[6];
  if (v36 == 6)
  {
    v38 = v37 >= 0 ? (uint64_t)(v19 + 5) : v19[5];
    v39 = *(_DWORD *)v38;
    v40 = *(unsigned __int16 *)(v38 + 4);
    v41 = v39 == 1734438249 && v40 == 29541;
    v42 = !v41;
    if (v24 == 12 && !v42)
    {
      if (v25 < 0)
        v19 = (uint64_t *)*v19;
      v43 = (uint64_t *)*v19;
      v44 = *((_DWORD *)v19 + 2);
      if (v43 == (uint64_t *)0x6D695F6874706564 && v44 == 1936025441)
      {
        v23 = 1;
        goto LABEL_80;
      }
    }
  }
  v46 = atomic_load((unsigned __int8 *)&qword_1EF921268);
  if ((v46 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921268))
  {
    qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
    __cxa_guard_release(&qword_1EF921268);
  }
  v47 = qword_1EF921260;
  if (!os_log_type_enabled((os_log_t)qword_1EF921260, OS_LOG_TYPE_ERROR))
    goto LABEL_70;
  if (*((char *)a2 + 23) >= 0)
    v48 = a2;
  else
    v48 = (uint64_t *)*a2;
  *(_DWORD *)__p = 136315138;
  *(_QWORD *)&__p[4] = v48;
  v49 = "failed to load matting regressor %s: inputs are not 'images' and 'depth_images'";
LABEL_78:
  _os_log_error_impl(&dword_1C9870000, v47, OS_LOG_TYPE_ERROR, v49, __p, 0xCu);
  do
LABEL_70:
    v51 = __ldaxr(p_shared_owners);
  while (__stlxr(v51 - 1, p_shared_owners));
  v52 = 0uLL;
  if (!v51)
  {
    ((void (*)(std::__shared_weak_count *, __n128))v9->__on_zero_shared)(v9, (__n128)0);
    std::__shared_weak_count::__release_weak(v9);
    v52 = 0uLL;
  }
LABEL_112:
  v68 = (std::__shared_weak_count *)(*a1)[1];
  *(_OWORD *)(*a1)->i8 = v52;
  if (v68)
  {
    v69 = (unint64_t *)&v68->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  v71 = (_BYTE *)**a1;
  if (!v71)
  {
    v74 = atomic_load((unsigned __int8 *)&qword_1EF921268);
    if ((v74 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921268))
    {
      qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
      __cxa_guard_release(&qword_1EF921268);
    }
    v75 = (id)qword_1EF921260;
    if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
    {
      if (*((char *)a2 + 23) >= 0)
        v114 = a2;
      else
        v114 = (uint64_t *)*a2;
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = v114;
      _os_log_error_impl(&dword_1C9870000, v75, OS_LOG_TYPE_ERROR, "failed to allocate matting net resources for %s", __p, 0xCu);
    }

LABEL_125:
    v76 = 0;
    goto LABEL_139;
  }
  v72 = *(_QWORD *)(*(_QWORD *)v71 + 32);
  if (v71[65])
  {
    if (*(char *)(v72 + 63) < 0)
    {
      sub_1C987D148(__dst, *(void **)(v72 + 40), *(_QWORD *)(v72 + 48));
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)(v72 + 40);
      v168 = *(_QWORD *)(v72 + 56);
    }
    v73 = 1;
  }
  else if (*(char *)(v72 + 23) < 0)
  {
    sub_1C987D148(__dst, *(void **)v72, *(_QWORD *)(v72 + 8));
    v73 = 0;
  }
  else
  {
    v73 = 0;
    *(_OWORD *)__dst = *(_OWORD *)v72;
    v168 = *(_QWORD *)(v72 + 16);
  }
  v169 = *(_OWORD *)(v72 + 40 * v73 + 24);
  v77 = *a1;
  v78 = *(_WORD *)(*(_QWORD *)*a1 + 64);
  v77[2] = vrev64_s32(*(int32x2_t *)((char *)&v169 + 8));
  v77[3] = (int32x2_t)0x4C30303834323066;
  v77[4].i16[0] = v78;
  cva::Path::Path();
  cva::Path::directory((cva::Path *)v163);
  cva::Path::stem((cva::Path *)v163);
  cva::Path::Path((cva::Path *)__p, (const cva::Path *)v164);
  cva::Path::append();
  cva::Path::Path((cva::Path *)v162, (const cva::Path *)__p);
  cva::Path::~Path((cva::Path *)__p);
  cva::Path::~Path((cva::Path *)buf);
  cva::Path::~Path((cva::Path *)v164);
  __p[23] = 5;
  strcpy(__p, ".json");
  cva::Path::concatenate();
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if (!cva::Path::exists((cva::Path *)v162) || (cva::Path::isDirectory((cva::Path *)v162) & 1) != 0)
  {
    v79 = atomic_load((unsigned __int8 *)&qword_1EF921268);
    if ((v79 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921268))
    {
      qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
      __cxa_guard_release(&qword_1EF921268);
    }
    v80 = (id)qword_1EF921260;
    if (os_log_type_enabled(v80, OS_LOG_TYPE_ERROR))
    {
      v112 = cva::Path::string((cva::Path *)v162);
      if (*(char *)(v112 + 23) >= 0)
        v113 = v112;
      else
        v113 = *(_QWORD *)v112;
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = v113;
      _os_log_error_impl(&dword_1C9870000, v80, OS_LOG_TYPE_ERROR, "could not find json file at location: %s", __p, 0xCu);
    }

    v76 = 0;
    goto LABEL_137;
  }
  cva::Path::string((cva::Path *)v162);
  cva::DictionaryHandler::readJsonFile();
  if (!v160)
    goto LABEL_231;
  cva::DictionaryHandler::getKeys(v160);
  __p[23] = 16;
  strcpy(__p, "GravityDirection");
  v174 = 12;
  strcpy((char *)&v173, "CheckpointID");
  v176 = 12;
  strcpy((char *)v175, "DepthScaling");
  v178 = 11;
  strcpy((char *)v177, "DepthCutOff");
  v180 = 11;
  strcpy((char *)v179, "IsQuantized");
  v182 = 0;
  v183 = 0;
  *(_QWORD *)buf = &v182;
  sub_1C9887298((uint64_t *)buf, (uint64_t)&v182, (const void **)__p, (uint64_t)__p);
  sub_1C9887298((uint64_t *)buf, (uint64_t)&v182, (const void **)&v173, (uint64_t)&v173);
  sub_1C9887298((uint64_t *)buf, (uint64_t)&v182, v175, (uint64_t)v175);
  sub_1C9887298((uint64_t *)buf, (uint64_t)&v182, v177, (uint64_t)v177);
  sub_1C9887298((uint64_t *)buf, (uint64_t)&v182, v179, (uint64_t)v179);
  v82 = (size_t *)v164[0];
  v83 = (size_t *)v164[1];
  if (v164[0] == v164[1])
  {
LABEL_181:
    if (cva::DictionaryHandler::hasKey(v160, "GravityDirection"))
    {
      cva::DictionaryHandler::item(v160, "GravityDirection");
      cva::ItemHandler::getValue<std::string>();
      cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v170);
      sub_1C98852A4();
      v103 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v103, OS_LOG_TYPE_DEBUG))
      {
        v154 = __p;
        if (__p[23] < 0)
          v154 = *(_BYTE **)__p;
        *(_DWORD *)v170 = 136315138;
        v171 = v154;
        _os_log_debug_impl(&dword_1C9870000, v103, OS_LOG_TYPE_DEBUG, "Setting GravityDirection: %s", v170, 0xCu);
      }

      if ((sub_1C9885310(__p, (int *)&(*a1)[4] + 1) & 1) == 0)
      {
        sub_1C98852A4();
        v144 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v144, OS_LOG_TYPE_ERROR))
        {
          v158 = __p;
          if (__p[23] < 0)
            v158 = *(_BYTE **)__p;
          *(_DWORD *)v170 = 136315138;
          v171 = v158;
          _os_log_error_impl(&dword_1C9870000, v144, OS_LOG_TYPE_ERROR, "could not set gravity direction %s", v170, 0xCu);
        }

        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        goto LABEL_236;
      }
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
    }
    if (cva::DictionaryHandler::hasKey(v160, "DepthScaling"))
    {
      cva::DictionaryHandler::item(v160, "DepthScaling");
      cva::ItemHandler::getValue<float>();
      (*a1)[29].i32[0] = v104;
      cva::ItemHandler::~ItemHandler((cva::ItemHandler *)__p);
      sub_1C98852A4();
      v105 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v105, OS_LOG_TYPE_DEBUG))
      {
        v155 = *(float *)(*a1)[29].i32;
        *(_DWORD *)__p = 134217984;
        *(double *)&__p[4] = v155;
        _os_log_debug_impl(&dword_1C9870000, v105, OS_LOG_TYPE_DEBUG, "Setting DepthScaling: %f", __p, 0xCu);
      }

    }
    if (cva::DictionaryHandler::hasKey(v160, "DepthCutOff"))
    {
      cva::DictionaryHandler::item(v160, "DepthCutOff");
      cva::ItemHandler::getValue<float>();
      (*a1)[28].i32[1] = v106;
      cva::ItemHandler::~ItemHandler((cva::ItemHandler *)__p);
      sub_1C98852A4();
      v107 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v107, OS_LOG_TYPE_DEBUG))
      {
        v156 = *(float *)&(*a1)[28].i32[1];
        *(_DWORD *)__p = 134217984;
        *(double *)&__p[4] = v156;
        _os_log_debug_impl(&dword_1C9870000, v107, OS_LOG_TYPE_DEBUG, "Setting DepthCutOff: %f", __p, 0xCu);
      }

    }
    if (cva::DictionaryHandler::hasKey(v160, "IsQuantized"))
    {
      cva::DictionaryHandler::item(v160, "IsQuantized");
      (*a1)[28].i8[0] = cva::ItemHandler::getValue<BOOL>();
      cva::ItemHandler::~ItemHandler((cva::ItemHandler *)__p);
      sub_1C98852A4();
      v108 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v108, OS_LOG_TYPE_DEBUG))
      {
        v157 = (*a1)[28].u8[0];
        *(_DWORD *)__p = 67109120;
        *(_DWORD *)&__p[4] = v157;
        _os_log_debug_impl(&dword_1C9870000, v108, OS_LOG_TYPE_DEBUG, "Setting IsQuantized: %d", __p, 8u);
      }

    }
    sub_1C9887678(v182);
    v109 = (void **)v164[0];
    if (v164[0])
    {
      v110 = (void **)v164[1];
      v111 = v164[0];
      if (v164[1] != v164[0])
      {
        do
        {
          if (*((char *)v110 - 1) < 0)
            operator delete(*(v110 - 3));
          v110 -= 3;
        }
        while (v110 != v109);
        v111 = v164[0];
      }
      v164[1] = v109;
      operator delete(v111);
    }
LABEL_231:
    v76 = 1;
    v132 = v161;
    if (v161)
      goto LABEL_245;
    goto LABEL_137;
  }
  v84 = v182;
  if (!v182)
    goto LABEL_233;
  while (2)
  {
    v85 = *((_BYTE *)v82 + 23);
    if (v85 >= 0)
      v86 = v82;
    else
      v86 = (const void *)*v82;
    if (v85 >= 0)
      v87 = *((unsigned __int8 *)v82 + 23);
    else
      v87 = v82[1];
    v88 = &v182;
    v89 = v84;
    do
    {
      while (1)
      {
        v90 = v89[55];
        v91 = v90 >= 0 ? v89 + 32 : (char *)*((_QWORD *)v89 + 4);
        v92 = v90 >= 0 ? v89[55] : *((_QWORD *)v89 + 5);
        v93 = v87 >= v92 ? v92 : v87;
        v94 = memcmp(v91, v86, v93);
        if (v94)
          break;
        if (v92 >= v87)
          goto LABEL_167;
LABEL_153:
        v89 = (char *)*((_QWORD *)v89 + 1);
        if (!v89)
          goto LABEL_168;
      }
      if (v94 < 0)
        goto LABEL_153;
LABEL_167:
      v88 = (char **)v89;
      v89 = *(char **)v89;
    }
    while (v89);
LABEL_168:
    if (v88 == &v182)
      goto LABEL_233;
    v97 = v88[4];
    v96 = v88 + 4;
    v95 = v97;
    v98 = *((char *)v96 + 23);
    if (v98 >= 0)
      v99 = v96;
    else
      v99 = (char **)v95;
    if (v98 >= 0)
      v100 = *((unsigned __int8 *)v96 + 23);
    else
      v100 = (size_t)v96[1];
    if (v100 >= v87)
      v101 = v87;
    else
      v101 = v100;
    v102 = memcmp(v86, v99, v101);
    if (v102)
    {
      if (v102 < 0)
        goto LABEL_233;
LABEL_145:
      v82 += 3;
      if (v82 == v83)
        goto LABEL_181;
      continue;
    }
    break;
  }
  if (v87 >= v100)
    goto LABEL_145;
LABEL_233:
  v133 = atomic_load((unsigned __int8 *)&qword_1EF921268);
  if ((v133 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921268))
  {
    qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
    __cxa_guard_release(&qword_1EF921268);
  }
  v134 = (id)qword_1EF921260;
  if (os_log_type_enabled(v134, OS_LOG_TYPE_ERROR))
  {
    if (*((char *)v82 + 23) < 0)
      v82 = (size_t *)*v82;
    *(_DWORD *)__p = 136315138;
    *(_QWORD *)&__p[4] = v82;
    _os_log_error_impl(&dword_1C9870000, v134, OS_LOG_TYPE_ERROR, "unsupported key %s", __p, 0xCu);
  }

LABEL_236:
  sub_1C9887678(v182);
  v135 = (void **)v164[0];
  if (v164[0])
  {
    v136 = (void **)v164[1];
    v137 = v164[0];
    if (v164[1] != v164[0])
    {
      do
      {
        if (*((char *)v136 - 1) < 0)
          operator delete(*(v136 - 3));
        v136 -= 3;
      }
      while (v136 != v135);
      v137 = v164[0];
    }
    v164[1] = v135;
    operator delete(v137);
  }
  v76 = 0;
  v132 = v161;
  if (v161)
  {
LABEL_245:
    v138 = (unint64_t *)&v132->__shared_owners_;
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
LABEL_137:
  cva::Path::~Path((cva::Path *)v162);
  cva::Path::~Path((cva::Path *)v163);
  if (SHIBYTE(v168) < 0)
    operator delete(__dst[0]);
LABEL_139:
  kdebug_trace();
  return v76;
}

void sub_1C988711C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, int a14, __int16 a15, char a16, char a17, int a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  uint64_t v41;

  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&a36);
  sub_1C9887678(*(char **)(v41 - 120));
  sub_1C98876C0(&a19);
  sub_1C987C140((uint64_t)&a11);
  cva::Path::~Path((cva::Path *)&a13);
  cva::Path::~Path((cva::Path *)&a15);
  if (a30 < 0)
    operator delete(__p);
  kdebug_trace();
  _Unwind_Resume(a1);
}

uint64_t *sub_1C9887298(uint64_t *result, uint64_t a2, const void **a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t **v8;
  int v9;
  const void *v10;
  size_t v11;
  int v12;
  const void *v13;
  size_t v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  const void *v21;
  size_t v22;
  int v23;
  const void *v24;
  size_t v25;
  size_t v26;
  uint64_t *v27;
  uint64_t **v28;
  _QWORD *v29;
  const void *v30;
  const void *v31;
  int v32;
  const void *v33;
  size_t v34;
  size_t v35;
  int v36;
  BOOL v37;
  uint64_t **v38;
  uint64_t *v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t **v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t *v47;
  int v48;
  uint64_t *v49;
  size_t v50;
  size_t v51;
  uint64_t *v52;
  _QWORD *v53;
  const void *v54;
  const void *v55;
  int v56;
  const void *v57;
  size_t v58;
  size_t v59;
  int v60;

  v7 = result;
  v8 = (uint64_t **)(result + 1);
  if (result + 1 == (uint64_t *)a2)
    goto LABEL_23;
  v9 = *((char *)a3 + 23);
  if (v9 >= 0)
    v10 = a3;
  else
    v10 = *a3;
  if (v9 >= 0)
    v11 = *((unsigned __int8 *)a3 + 23);
  else
    v11 = (size_t)a3[1];
  v12 = *(char *)(a2 + 55);
  if (v12 >= 0)
    v13 = (const void *)(a2 + 32);
  else
    v13 = *(const void **)(a2 + 32);
  if (v12 >= 0)
    v14 = *(unsigned __int8 *)(a2 + 55);
  else
    v14 = *(_QWORD *)(a2 + 40);
  if (v14 >= v11)
    v15 = v11;
  else
    v15 = v14;
  result = (uint64_t *)memcmp(v10, v13, v15);
  if ((_DWORD)result)
  {
    if ((result & 0x80000000) == 0)
      goto LABEL_19;
LABEL_23:
    v16 = *(_QWORD *)a2;
    if (*v7 == a2)
    {
      v18 = a2;
    }
    else
    {
      if (v16)
      {
        v17 = *(_QWORD *)a2;
        do
        {
          v18 = v17;
          v17 = *(_QWORD *)(v17 + 8);
        }
        while (v17);
      }
      else
      {
        v19 = a2;
        do
        {
          v18 = *(_QWORD *)(v19 + 16);
          v37 = *(_QWORD *)v18 == v19;
          v19 = v18;
        }
        while (v37);
      }
      v20 = *(char *)(v18 + 55);
      if (v20 >= 0)
        v21 = (const void *)(v18 + 32);
      else
        v21 = *(const void **)(v18 + 32);
      if (v20 >= 0)
        v22 = *(unsigned __int8 *)(v18 + 55);
      else
        v22 = *(_QWORD *)(v18 + 40);
      v23 = *((char *)a3 + 23);
      if (v23 >= 0)
        v24 = a3;
      else
        v24 = *a3;
      if (v23 >= 0)
        v25 = *((unsigned __int8 *)a3 + 23);
      else
        v25 = (size_t)a3[1];
      if (v25 >= v22)
        v26 = v22;
      else
        v26 = v25;
      result = (uint64_t *)memcmp(v21, v24, v26);
      if ((_DWORD)result)
      {
        if ((result & 0x80000000) == 0)
          goto LABEL_48;
      }
      else if (v22 >= v25)
      {
LABEL_48:
        v27 = *v8;
        if (!*v8)
          goto LABEL_49;
        while (1)
        {
          v28 = (uint64_t **)v27;
          v31 = (const void *)v27[4];
          v29 = v27 + 4;
          v30 = v31;
          v32 = *((char *)v29 + 23);
          if (v32 >= 0)
            v33 = v29;
          else
            v33 = v30;
          if (v32 >= 0)
            v34 = *((unsigned __int8 *)v29 + 23);
          else
            v34 = v29[1];
          if (v34 >= v25)
            v35 = v25;
          else
            v35 = v34;
          v36 = memcmp(v24, v33, v35);
          if (v36)
          {
            if (v36 < 0)
              goto LABEL_50;
LABEL_64:
            result = (uint64_t *)memcmp(v33, v24, v35);
            if ((_DWORD)result)
            {
              if ((result & 0x80000000) == 0)
                goto LABEL_128;
            }
            else if (v34 >= v25)
            {
LABEL_128:
              v38 = v8;
              goto LABEL_77;
            }
            v8 = v28 + 1;
            v27 = v28[1];
            if (!v27)
              goto LABEL_78;
          }
          else
          {
            if (v25 >= v34)
              goto LABEL_64;
LABEL_50:
            v27 = *v28;
            v8 = v28;
            if (!*v28)
              goto LABEL_78;
          }
        }
      }
    }
    v37 = v16 == 0;
    if (v16)
      v28 = (uint64_t **)v18;
    else
      v28 = (uint64_t **)a2;
    if (v37)
      v38 = (uint64_t **)a2;
    else
      v38 = (uint64_t **)(v18 + 8);
LABEL_77:
    v8 = v38;
    if (*v38)
      return result;
    goto LABEL_78;
  }
  if (v11 < v14)
    goto LABEL_23;
LABEL_19:
  result = (uint64_t *)memcmp(v13, v10, v15);
  if ((_DWORD)result)
  {
    if ((result & 0x80000000) == 0)
      return result;
  }
  else if (v14 >= v11)
  {
    return result;
  }
  v38 = (uint64_t **)(a2 + 8);
  v42 = *(uint64_t **)(a2 + 8);
  if (v42)
  {
    do
    {
      v38 = (uint64_t **)v42;
      v42 = (uint64_t *)*v42;
      v28 = v38;
      v43 = v38;
    }
    while (v42);
    if (v38 == v8)
      goto LABEL_77;
  }
  else
  {
    v43 = (uint64_t **)a2;
    do
    {
      v44 = (uint64_t *)v43;
      v43 = (uint64_t **)v43[2];
    }
    while (*v43 != v44);
    v28 = (uint64_t **)a2;
    if (v43 == v8)
      goto LABEL_77;
  }
  v47 = v43[4];
  v45 = (uint64_t *)(v43 + 4);
  v46 = v47;
  v48 = *((char *)v45 + 23);
  if (v48 >= 0)
    v49 = v45;
  else
    v49 = v46;
  if (v48 >= 0)
    v50 = *((unsigned __int8 *)v45 + 23);
  else
    v50 = v45[1];
  if (v50 >= v11)
    v51 = v11;
  else
    v51 = v50;
  result = (uint64_t *)memcmp(v10, v49, v51);
  if ((_DWORD)result)
  {
    if ((result & 0x80000000) != 0)
      goto LABEL_77;
  }
  else if (v11 < v50)
  {
    goto LABEL_77;
  }
  v52 = *v8;
  if (*v8)
  {
    while (1)
    {
      v28 = (uint64_t **)v52;
      v55 = (const void *)v52[4];
      v53 = v52 + 4;
      v54 = v55;
      v56 = *((char *)v53 + 23);
      if (v56 >= 0)
        v57 = v53;
      else
        v57 = v54;
      if (v56 >= 0)
        v58 = *((unsigned __int8 *)v53 + 23);
      else
        v58 = v53[1];
      if (v58 >= v11)
        v59 = v11;
      else
        v59 = v58;
      v60 = memcmp(v10, v57, v59);
      if (v60)
      {
        if (v60 < 0)
          goto LABEL_108;
LABEL_122:
        result = (uint64_t *)memcmp(v57, v10, v59);
        if ((_DWORD)result)
        {
          if ((result & 0x80000000) == 0)
            goto LABEL_128;
        }
        else if (v58 >= v11)
        {
          goto LABEL_128;
        }
        v8 = v28 + 1;
        v52 = v28[1];
        if (!v52)
          goto LABEL_78;
      }
      else
      {
        if (v11 >= v58)
          goto LABEL_122;
LABEL_108:
        v52 = *v28;
        v8 = v28;
        if (!*v28)
          goto LABEL_78;
      }
    }
  }
LABEL_49:
  v28 = v8;
LABEL_78:
  v39 = (uint64_t *)operator new(0x38uLL);
  v40 = v39 + 4;
  if (*(char *)(a4 + 23) < 0)
  {
    sub_1C987D148(v40, *(void **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)v40 = *(_OWORD *)a4;
    v39[6] = *(_QWORD *)(a4 + 16);
  }
  *v39 = 0;
  v39[1] = 0;
  v39[2] = (uint64_t)v28;
  *v8 = v39;
  v41 = *(_QWORD *)*v7;
  if (v41)
  {
    *v7 = v41;
    v39 = *v8;
  }
  result = sub_1C9880828((uint64_t *)v7[1], v39);
  ++v7[2];
  return result;
}

void sub_1C9887664(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C9887678(char *a1)
{
  if (a1)
  {
    sub_1C9887678(*(_QWORD *)a1);
    sub_1C9887678(*((_QWORD *)a1 + 1));
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

void **sub_1C98876C0(void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*(v3 - 3));
        v3 -= 3;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_1C9887734(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA44AFCLL);
}

uint64_t sub_1C9887758(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = *(uint64_t **)(result + 24);
  if (v1)
  {
    free((void *)v1[4]);
    free((void *)v1[1]);
    v2 = *v1;
    *v1 = 0;
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    JUMPOUT(0x1CAA44AFCLL);
  }
  return result;
}

uint64_t sub_1C98877C4(CVPixelBufferRef *a1, cva *this, uint64_t a3, uint64_t a4)
{
  __CVBuffer *v8;
  int IsPlanar;
  size_t v10;
  BOOL v11;
  BOOL v13;

  v8 = *a1;
  if (*a1)
  {
    IsPlanar = CVPixelBufferIsPlanar(*a1);
    if (CVPixelBufferGetWidth(v8) == (_DWORD)this
      && CVPixelBufferGetHeight(v8) == (_DWORD)a3
      && CVPixelBufferGetPixelFormatType(v8) == (_DWORD)a4)
    {
      if (IsPlanar)
      {
        v10 = 0;
        v11 = 1;
        while (v10 < CVPixelBufferGetPlaneCount(v8))
          v11 = v11 && (CVPixelBufferGetBytesPerRowOfPlane(v8, v10++) & 0xF) == 0;
        if (v11)
          return 1;
      }
      else if ((CVPixelBufferGetBytesPerRow(v8) & 0xF) == 0)
      {
        return 1;
      }
    }
    if (*a1)
    {
      CVPixelBufferRelease(*a1);
      *a1 = 0;
    }
  }
  cva::pixelBufferCreate(this, a3, a4, (uint64_t)a1, (__CVBuffer **)0x10, 0x10u, 0, 1u, 0, v13);
  return 2 * (*a1 != 0);
}

void sub_1C98878FC(__CVBuffer *a1, const void *a2)
{
  __IOSurface *IOSurface;

  IOSurface = CVPixelBufferGetIOSurface(a1);
  if (IOSurface)
    IOSurfaceSetValue(IOSurface, (CFStringRef)*MEMORY[0x1E0CBC048], a2);
}

void sub_1C988793C(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  size_t v4;
  void *memptr;

  *(_DWORD *)(a1 + 16) = a2;
  if (a2)
  {
    v3 = a2;
    if (*(_QWORD *)(a1 + 8) < (unint64_t)a2)
    {
      free(*(void **)a1);
      v4 = (4 * v3 + 31) & 0x7FFFFFFE0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = v4 >> 2;
      memptr = 0;
      malloc_type_posix_memalign(&memptr, 0x20uLL, v4, 0x49090899uLL);
      *(_QWORD *)a1 = memptr;
    }
  }
  else
  {
    free(*(void **)a1);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
}

uint64_t sub_1C98879C4(__CVBuffer *a1, int32x2_t *a2, uint64_t a3, int a4)
{
  signed int PixelFormatType;
  uint64_t v9;
  int32x2_t v10;
  float v11;
  int v12;
  float v13;
  int32x2_t v14;
  float v15;
  int v16;
  float v17;
  float v18;
  float32x2_t v19;
  unsigned int v20;
  uint64_t v21;
  float32x2_t v22;
  __int128 v23;
  int32x2_t v24;
  __int32 v25;
  float v26;
  float *v27;
  float32x2_t v28;
  int v29;
  unsigned int v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float32x2_t v35;
  unsigned int v36;
  uint64_t v37;
  float32x2_t v38;
  __int128 v39;
  int32x2_t v40;
  __int32 v41;
  float v42;
  float *v43;
  float32x2_t v44;
  int v45;
  float v46;
  float v47;
  float v48;
  int v50;
  int v51;
  int32x2_t v52;
  int v53;
  uint64_t v54;
  float *v55;
  float32x2_t *v56;
  float32x2_t *v57;
  float32x2_t v58[2];
  __int128 v59;
  float32x2_t v60;
  float32x2_t v61;

  if (a1)
  {
    CVPixelBufferLockBaseAddress(a1, 1uLL);
    PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
    v9 = 0;
    if (PixelFormatType <= 1278226533)
    {
      if (PixelFormatType != 825306677 && PixelFormatType != 825437747)
        goto LABEL_47;
    }
    else
    {
      if (PixelFormatType == 1278226534 || PixelFormatType == 1717855600)
      {
        cva::imageViewFromPixelBuffer<float>();
        v14 = a2[1];
        v60 = vmul_f32(vcvt_f32_u32((uint32x2_t)vadd_s32(v52, (int32x2_t)-1)), (float32x2_t)0x3F0000003F000000);
        v61 = vmul_f32(vcvt_f32_u32((uint32x2_t)vadd_s32(v14, (int32x2_t)-1)), (float32x2_t)0x3F0000003F000000);
        *(_QWORD *)((char *)&v59 + 4) = 0;
        LODWORD(v59) = 1065353216;
        HIDWORD(v59) = 1065353216;
        v51 = v14.i32[0];
        switch(a4)
        {
          case 0:
            v15 = (float)v52.u32[1];
            v16 = v14.i32[1];
            v17 = (float)v52.u32[0] / (float)v14.u32[0];
            goto LABEL_32;
          case 1:
            LODWORD(v59) = 0;
            HIDWORD(v59) = 0;
            v34 = (float)v52.u32[0];
            v35.f32[0] = -(float)v52.u32[1];
            goto LABEL_34;
          case 2:
            v17 = (float)-(float)v52.u32[0] / (float)v14.u32[0];
            v16 = v14.i32[1];
            v15 = -(float)v52.u32[1];
LABEL_32:
            *(float *)&v59 = v17;
            *((float *)&v59 + 3) = v15 / (float)v16;
            goto LABEL_36;
          case 3:
            LODWORD(v59) = 0;
            HIDWORD(v59) = 0;
            v34 = -(float)v52.u32[0];
            v35.f32[0] = (float)v52.u32[1];
LABEL_34:
            v35.f32[1] = v34;
            *(float32x2_t *)((char *)&v59 + 4) = vdiv_f32(v35, vcvt_f32_u32((uint32x2_t)v14));
            break;
          default:
            break;
        }
        v16 = v14.i32[1];
LABEL_36:
        v55 = (float *)&v59;
        v56 = &v61;
        v57 = &v60;
        v58[0] = 0;
        sub_1C9888470((float *)v58, &v55);
        if (v16 >= 1 && v51 >= 1)
        {
          v37 = 0;
          v38 = vsub_f32(*v57, v58[0]);
          v39 = v59;
          v40 = a2[3];
          v41 = a2[2].i32[1];
          LOWORD(v36) = *(_WORD *)(a3 + 8);
          v42 = (float)v36;
          do
          {
            v43 = (float *)(*(_QWORD *)&v40 + (v41 * v37));
            v44 = vmla_n_f32(v38, *(float32x2_t *)((char *)&v39 + 8), (float)(int)v37);
            v45 = v51;
            do
            {
              v46 = *(float *)(v54 + ((int)v44.f32[1] * v53) + 4 * (int)v44.f32[0]);
              v47 = 0.0;
              if (v46 < v42)
              {
                v48 = *(float *)a3 + (float)(v46 * *(float *)(a3 + 4));
                if (v48 <= 0.000000001)
                  v47 = 0.0;
                else
                  v47 = 1000.0 / v48;
              }
              *v43++ = v47;
              v44 = vadd_f32(*(float32x2_t *)&v39, v44);
              --v45;
            }
            while (v45);
            ++v37;
          }
          while (v37 != v16);
        }
        goto LABEL_46;
      }
      if (PixelFormatType != 1647392359)
        goto LABEL_47;
    }
    cva::imageViewFromPixelBuffer<unsigned short>();
    v10 = a2[1];
    v60 = vmul_f32(vcvt_f32_u32((uint32x2_t)vadd_s32(v52, (int32x2_t)-1)), (float32x2_t)0x3F0000003F000000);
    v61 = vmul_f32(vcvt_f32_u32((uint32x2_t)vadd_s32(v10, (int32x2_t)-1)), (float32x2_t)0x3F0000003F000000);
    *(_QWORD *)((char *)&v59 + 4) = 0;
    LODWORD(v59) = 1065353216;
    HIDWORD(v59) = 1065353216;
    v50 = v10.i32[0];
    switch(a4)
    {
      case 0:
        v11 = (float)v52.u32[1];
        v12 = v10.i32[1];
        v13 = (float)v52.u32[0] / (float)v10.u32[0];
        goto LABEL_16;
      case 1:
        LODWORD(v59) = 0;
        HIDWORD(v59) = 0;
        v18 = (float)v52.u32[0];
        v19.f32[0] = -(float)v52.u32[1];
        goto LABEL_18;
      case 2:
        v13 = (float)-(float)v52.u32[0] / (float)v10.u32[0];
        v12 = v10.i32[1];
        v11 = -(float)v52.u32[1];
LABEL_16:
        *(float *)&v59 = v13;
        *((float *)&v59 + 3) = v11 / (float)v12;
        goto LABEL_20;
      case 3:
        LODWORD(v59) = 0;
        HIDWORD(v59) = 0;
        v18 = -(float)v52.u32[0];
        v19.f32[0] = (float)v52.u32[1];
LABEL_18:
        v19.f32[1] = v18;
        *(float32x2_t *)((char *)&v59 + 4) = vdiv_f32(v19, vcvt_f32_u32((uint32x2_t)v10));
        break;
      default:
        break;
    }
    v12 = v10.i32[1];
LABEL_20:
    v55 = (float *)&v59;
    v56 = &v61;
    v57 = &v60;
    v58[0] = 0;
    sub_1C9888470((float *)v58, &v55);
    if (v12 >= 1 && v50 >= 1)
    {
      v21 = 0;
      v22 = vsub_f32(*v57, v58[0]);
      v23 = v59;
      v24 = a2[3];
      v25 = a2[2].i32[1];
      LOWORD(v20) = *(_WORD *)(a3 + 8);
      v26 = (float)v20;
      do
      {
        v27 = (float *)(*(_QWORD *)&v24 + (v25 * v21));
        v28 = vmla_n_f32(v22, *(float32x2_t *)((char *)&v23 + 8), (float)(int)v21);
        v29 = v50;
        do
        {
          HIWORD(v30) = v28.i16[3];
          LOWORD(v30) = *(_WORD *)(v54 + ((int)v28.f32[1] * v53) + 2 * (int)v28.f32[0]);
          v31 = (float)v30;
          v32 = 0.0;
          if (v26 > v31)
          {
            v33 = *(float *)a3 + (float)(v31 * *(float *)(a3 + 4));
            if (v33 <= 0.000000001)
              v32 = 0.0;
            else
              v32 = 1000.0 / v33;
          }
          *v27++ = v32;
          v28 = vadd_f32(*(float32x2_t *)&v23, v28);
          --v29;
        }
        while (v29);
        ++v21;
      }
      while (v21 != v12);
    }
LABEL_46:
    v9 = 1;
LABEL_47:
    CVPixelBufferUnlockBaseAddress(a1, 1uLL);
    return v9;
  }
  return 0;
}

uint64_t sub_1C9887EE0(__CVBuffer *a1, int32x2_t *a2, float *a3, int a4)
{
  signed int PixelFormatType;
  uint64_t v9;
  int32x2_t v10;
  float v11;
  int v12;
  float v13;
  int32x2_t v14;
  float v15;
  int v16;
  float v17;
  float v18;
  float32x2_t v19;
  uint64_t v20;
  float32x2_t v21;
  __int128 v22;
  int32x2_t v23;
  __int32 v24;
  float *v25;
  float32x2_t v26;
  int v27;
  unsigned int v28;
  float v29;
  float v30;
  float v31;
  float32x2_t v32;
  uint64_t v33;
  float32x2_t v34;
  __int128 v35;
  int32x2_t v36;
  __int32 v37;
  float *v38;
  float32x2_t v39;
  int v40;
  float v41;
  float v42;
  BOOL v43;
  float v44;
  int v46;
  int v47;
  int32x2_t v48;
  int v49;
  uint64_t v50;
  float *v51;
  float32x2_t *v52;
  float32x2_t *v53;
  float32x2_t v54[2];
  __int128 v55;
  float32x2_t v56;
  float32x2_t v57;

  if (a1)
  {
    CVPixelBufferLockBaseAddress(a1, 1uLL);
    PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
    v9 = 0;
    if (PixelFormatType <= 1278226533)
    {
      if (PixelFormatType != 825306677 && PixelFormatType != 825437747)
        goto LABEL_48;
    }
    else
    {
      if (PixelFormatType == 1278226534 || PixelFormatType == 1717855600)
      {
        cva::imageViewFromPixelBuffer<float>();
        v14 = a2[1];
        v56 = vmul_f32(vcvt_f32_u32((uint32x2_t)vadd_s32(v48, (int32x2_t)-1)), (float32x2_t)0x3F0000003F000000);
        v57 = vmul_f32(vcvt_f32_u32((uint32x2_t)vadd_s32(v14, (int32x2_t)-1)), (float32x2_t)0x3F0000003F000000);
        *(_QWORD *)((char *)&v55 + 4) = 0;
        LODWORD(v55) = 1065353216;
        HIDWORD(v55) = 1065353216;
        v47 = v14.i32[0];
        switch(a4)
        {
          case 0:
            v15 = (float)v48.u32[1];
            v16 = v14.i32[1];
            v17 = (float)v48.u32[0] / (float)v14.u32[0];
            goto LABEL_32;
          case 1:
            LODWORD(v55) = 0;
            HIDWORD(v55) = 0;
            v31 = (float)v48.u32[0];
            v32.f32[0] = -(float)v48.u32[1];
            goto LABEL_34;
          case 2:
            v17 = (float)-(float)v48.u32[0] / (float)v14.u32[0];
            v16 = v14.i32[1];
            v15 = -(float)v48.u32[1];
LABEL_32:
            *(float *)&v55 = v17;
            *((float *)&v55 + 3) = v15 / (float)v16;
            goto LABEL_36;
          case 3:
            LODWORD(v55) = 0;
            HIDWORD(v55) = 0;
            v31 = -(float)v48.u32[0];
            v32.f32[0] = (float)v48.u32[1];
LABEL_34:
            v32.f32[1] = v31;
            *(float32x2_t *)((char *)&v55 + 4) = vdiv_f32(v32, vcvt_f32_u32((uint32x2_t)v14));
            break;
          default:
            break;
        }
        v16 = v14.i32[1];
LABEL_36:
        v51 = (float *)&v55;
        v52 = &v57;
        v53 = &v56;
        v54[0] = 0;
        sub_1C9888470((float *)v54, &v51);
        if (v16 >= 1 && v47 >= 1)
        {
          v33 = 0;
          v34 = vsub_f32(*v53, v54[0]);
          v35 = v55;
          v36 = a2[3];
          v37 = a2[2].i32[1];
          do
          {
            v38 = (float *)(*(_QWORD *)&v36 + (v37 * v33));
            v39 = vmla_n_f32(v34, *(float32x2_t *)((char *)&v35 + 8), (float)(int)v33);
            v40 = v47;
            do
            {
              v41 = *(float *)(v50 + ((int)v39.f32[1] * v49) + 4 * (int)v39.f32[0]);
              v42 = v41 * *a3;
              v43 = v42 <= a3[1] && (LODWORD(v41) & 0x7FFFFFFFu) <= 0x7F7FFFFF;
              v44 = v42 * a3[2];
              if (!v43)
                v44 = 0.0;
              *v38++ = v44;
              v39 = vadd_f32(*(float32x2_t *)&v35, v39);
              --v40;
            }
            while (v40);
            ++v33;
          }
          while (v33 != v16);
        }
        goto LABEL_47;
      }
      if (PixelFormatType != 1647392359)
        goto LABEL_48;
    }
    cva::imageViewFromPixelBuffer<unsigned short>();
    v10 = a2[1];
    v56 = vmul_f32(vcvt_f32_u32((uint32x2_t)vadd_s32(v48, (int32x2_t)-1)), (float32x2_t)0x3F0000003F000000);
    v57 = vmul_f32(vcvt_f32_u32((uint32x2_t)vadd_s32(v10, (int32x2_t)-1)), (float32x2_t)0x3F0000003F000000);
    *(_QWORD *)((char *)&v55 + 4) = 0;
    LODWORD(v55) = 1065353216;
    HIDWORD(v55) = 1065353216;
    v46 = v10.i32[0];
    switch(a4)
    {
      case 0:
        v11 = (float)v48.u32[1];
        v12 = v10.i32[1];
        v13 = (float)v48.u32[0] / (float)v10.u32[0];
        goto LABEL_16;
      case 1:
        LODWORD(v55) = 0;
        HIDWORD(v55) = 0;
        v18 = (float)v48.u32[0];
        v19.f32[0] = -(float)v48.u32[1];
        goto LABEL_18;
      case 2:
        v13 = (float)-(float)v48.u32[0] / (float)v10.u32[0];
        v12 = v10.i32[1];
        v11 = -(float)v48.u32[1];
LABEL_16:
        *(float *)&v55 = v13;
        *((float *)&v55 + 3) = v11 / (float)v12;
        goto LABEL_20;
      case 3:
        LODWORD(v55) = 0;
        HIDWORD(v55) = 0;
        v18 = -(float)v48.u32[0];
        v19.f32[0] = (float)v48.u32[1];
LABEL_18:
        v19.f32[1] = v18;
        *(float32x2_t *)((char *)&v55 + 4) = vdiv_f32(v19, vcvt_f32_u32((uint32x2_t)v10));
        break;
      default:
        break;
    }
    v12 = v10.i32[1];
LABEL_20:
    v51 = (float *)&v55;
    v52 = &v57;
    v53 = &v56;
    v54[0] = 0;
    sub_1C9888470((float *)v54, &v51);
    if (v12 >= 1 && v46 >= 1)
    {
      v20 = 0;
      v21 = vsub_f32(*v53, v54[0]);
      v22 = v55;
      v23 = a2[3];
      v24 = a2[2].i32[1];
      do
      {
        v25 = (float *)(*(_QWORD *)&v23 + (v24 * v20));
        v26 = vmla_n_f32(v21, *(float32x2_t *)((char *)&v22 + 8), (float)(int)v20);
        v27 = v46;
        do
        {
          HIWORD(v28) = v26.i16[3];
          LOWORD(v28) = *(_WORD *)(v50 + ((int)v26.f32[1] * v49) + 2 * (int)v26.f32[0]);
          v29 = *a3 * (float)v28;
          if (v29 <= a3[1])
            v30 = v29 * a3[2];
          else
            v30 = 0.0;
          *v25++ = v30;
          v26 = vadd_f32(*(float32x2_t *)&v22, v26);
          --v27;
        }
        while (v27);
        ++v20;
      }
      while (v20 != v12);
    }
LABEL_47:
    v9 = 1;
LABEL_48:
    CVPixelBufferUnlockBaseAddress(a1, 1uLL);
    return v9;
  }
  return 0;
}

_QWORD *sub_1C98883B0(_QWORD *result, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  _QWORD *v5;
  void *v7;
  unint64_t size;

  v3 = a3;
  v5 = result;
  if (*((_DWORD *)result + 2) >= a2 && *((_DWORD *)result + 3) >= a3)
  {
    *result = 0;
    result[1] = a2 | (unint64_t)(a3 << 32);
  }
  else
  {
    v7 = (void *)result[3];
    if (v7)
    {
      free(v7);
      v5[3] = 0;
    }
    *v5 = 0;
    v5[1] = a2 | ((unint64_t)v3 << 32);
    v5[2] = ((unint64_t)(((4 * a2 + 15) & 0xFFFFFFF0) >> 4) << 36) | 4;
    size = ((4 * a2 + 15) & 0xFFFFFFF0) * (unint64_t)v3;
    if (size)
      result = malloc_type_malloc(size, 0xA153FF5uLL);
    else
      result = 0;
    v5[3] = result;
  }
  return result;
}

float *sub_1C9888470(float *result, float **a2)
{
  float *v2;
  float *v3;
  float *v4;
  uint64_t v5;

  v2 = result;
  v3 = *a2;
  if (*a2 == result || (v4 = a2[1], v4 == result))
  {
    v5 = 0;
    result = (float *)sub_1C9888470(&v5);
    *(_QWORD *)v2 = v5;
  }
  else
  {
    *result = (float)((float)(*v3 * *v4) + 0.0) + (float)(v3[2] * v4[1]);
    result[1] = (float)((float)(v3[1] * *v4) + 0.0) + (float)(v3[3] * v4[1]);
  }
  return result;
}

__n128 sub_1C98884F8(char *__dst, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  NSObject *v7;
  __n128 result;
  uint8_t v9[16];

  if (*(_BYTE *)(a2 + 64))
  {
    v3 = *(_DWORD *)(a2 + 60);
    v4 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    v5 = v4 + 40 * v3;
    if (*(char *)(v5 + 23) < 0)
    {
      sub_1C987D148(__dst, *(void **)v5, *(_QWORD *)(v5 + 8));
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)v5;
      *((_QWORD *)__dst + 2) = *(_QWORD *)(v5 + 16);
    }
    result = *(__n128 *)(v4 + 40 * v3 + 24);
    *(__n128 *)(__dst + 24) = result;
  }
  else
  {
    v6 = atomic_load((unsigned __int8 *)&qword_1EF921268);
    if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921268))
    {
      qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
      __cxa_guard_release(&qword_1EF921268);
    }
    v7 = qword_1EF921260;
    if (os_log_type_enabled((os_log_t)qword_1EF921260, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v9 = 0;
      _os_log_error_impl(&dword_1C9870000, v7, OS_LOG_TYPE_ERROR, "no depth support in regressor", v9, 2u);
    }
    *(_QWORD *)__dst = 0;
    *((_QWORD *)__dst + 1) = 0;
    *((_QWORD *)__dst + 2) = 0;
    *((_QWORD *)__dst + 3) = -1;
    __dst[23] = 5;
    *(_DWORD *)__dst = 1835890020;
    __dst[4] = 121;
    *((_QWORD *)__dst + 4) = -1;
  }
  return result;
}

__n128 sub_1C9888634(char *__dst, _BYTE *a2)
{
  uint64_t v3;
  unsigned __int8 v4;
  NSObject *v5;
  __n128 result;
  uint8_t v7[16];

  if (a2[65])
  {
    v3 = *(_QWORD *)(*(_QWORD *)a2 + 32);
    if (*(char *)(v3 + 23) < 0)
    {
      sub_1C987D148(__dst, *(void **)v3, *(_QWORD *)(v3 + 8));
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)v3;
      *((_QWORD *)__dst + 2) = *(_QWORD *)(v3 + 16);
    }
    result = *(__n128 *)(v3 + 24);
    *(__n128 *)(__dst + 24) = result;
  }
  else
  {
    v4 = atomic_load((unsigned __int8 *)&qword_1EF921268);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921268))
    {
      qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
      __cxa_guard_release(&qword_1EF921268);
    }
    v5 = qword_1EF921260;
    if (os_log_type_enabled((os_log_t)qword_1EF921260, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v7 = 0;
      _os_log_error_impl(&dword_1C9870000, v5, OS_LOG_TYPE_ERROR, "no foreground color support in regressor", v7, 2u);
    }
    *(_QWORD *)__dst = 0;
    *((_QWORD *)__dst + 1) = 0;
    *((_QWORD *)__dst + 2) = 0;
    *((_QWORD *)__dst + 3) = -1;
    __dst[23] = 5;
    *(_DWORD *)__dst = 1835890020;
    __dst[4] = 121;
    *((_QWORD *)__dst + 4) = -1;
  }
  return result;
}

uint64_t sub_1C9888754(uint64_t a1)
{
  OpaqueVTPixelTransferSession *v2;

  *(_QWORD *)a1 = &off_1E8294A28;
  v2 = *(OpaqueVTPixelTransferSession **)(a1 + 8);
  if (v2)
  {
    VTPixelTransferSessionInvalidate(v2);
    CFRelease(*(CFTypeRef *)(a1 + 8));
  }
  return a1;
}

void sub_1C9888794(uint64_t a1)
{
  OpaqueVTPixelTransferSession *v2;

  *(_QWORD *)a1 = &off_1E8294A28;
  v2 = *(OpaqueVTPixelTransferSession **)(a1 + 8);
  if (v2)
  {
    VTPixelTransferSessionInvalidate(v2);
    CFRelease(*(CFTypeRef *)(a1 + 8));
  }
  JUMPOUT(0x1CAA44AFCLL);
}

BOOL sub_1C98887E4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) || VTPixelTransferSessionCreate(0, (VTPixelTransferSessionRef *)(a1 + 8)) == 0;
}

OpaqueVTPixelTransferSession *sub_1C988881C(uint64_t a1, __CVBuffer *a2, __CVBuffer *a3)
{
  OpaqueVTPixelTransferSession *result;

  result = *(OpaqueVTPixelTransferSession **)(a1 + 8);
  if (result)
    return (OpaqueVTPixelTransferSession *)(VTPixelTransferSessionTransferImage(result, a2, a3) == 0);
  return result;
}

uint64_t sub_1C9888840(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E8294A58;
  if (*(_QWORD *)(a1 + 8))
  {
    MEMORY[0x1CAA44388]();
    CFRelease(*(CFTypeRef *)(a1 + 8));
  }
  return a1;
}

void sub_1C9888880(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E8294A58;
  if (*(_QWORD *)(a1 + 8))
  {
    MEMORY[0x1CAA44388]();
    CFRelease(*(CFTypeRef *)(a1 + 8));
  }
  JUMPOUT(0x1CAA44AFCLL);
}

uint64_t sub_1C98888D0()
{
  return 1;
}

uint64_t sub_1C98888D8(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  CFTypeRef *v6;
  int v7;
  int v8;
  unsigned __int8 v9;
  NSObject *v10;
  int v11;
  int v12;
  unsigned __int8 v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  NSObject *v17;
  uint32_t v18;
  unsigned __int8 v19;
  int Value;
  unsigned __int8 v22;
  unsigned __int8 v23;
  __int16 v24;
  CFBooleanRef propertyValueOut[2];

  propertyValueOut[1] = *(CFBooleanRef *)MEMORY[0x1E0C80C00];
  v6 = (CFTypeRef *)(a1 + 8);
  if (!*(_QWORD *)(a1 + 8))
  {
LABEL_9:
    v11 = VTImageRotationSessionCreate();
    if (v11)
    {
      v12 = v11;
      v13 = atomic_load((unsigned __int8 *)&qword_1EF921268);
      if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921268))
      {
        qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
        __cxa_guard_release(&qword_1EF921268);
      }
      v14 = (id)qword_1EF921260;
      if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        goto LABEL_28;
      LODWORD(propertyValueOut[0]) = 67109120;
      HIDWORD(propertyValueOut[0]) = v12;
      v15 = "failed creating rotation session (%d)";
      v16 = (uint8_t *)propertyValueOut;
      v17 = v14;
      v18 = 8;
    }
    else
    {
      VTSessionSetProperty(*(VTSessionRef *)(a1 + 8), (CFStringRef)*MEMORY[0x1E0CED6D0], (CFTypeRef)*MEMORY[0x1E0C9AE50]);
      *(_DWORD *)(a1 + 16) = a4;
      propertyValueOut[0] = 0;
      if (VTSessionCopyProperty(*(VTSessionRef *)(a1 + 8), (CFStringRef)*MEMORY[0x1E0CED6E8], (CFAllocatorRef)*MEMORY[0x1E0C9AE00], propertyValueOut))
      {
        v19 = atomic_load((unsigned __int8 *)&qword_1EF921268);
        if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921268))
        {
          qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
          __cxa_guard_release(&qword_1EF921268);
        }
        v14 = (id)qword_1EF921260;
        if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          goto LABEL_28;
        v24 = 0;
        v15 = "could not get scaling property";
      }
      else if (propertyValueOut[0])
      {
        Value = CFBooleanGetValue(propertyValueOut[0]);
        CFRelease(propertyValueOut[0]);
        propertyValueOut[0] = 0;
        if (Value)
          goto LABEL_3;
        v23 = atomic_load((unsigned __int8 *)&qword_1EF921268);
        if ((v23 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921268))
        {
          qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
          __cxa_guard_release(&qword_1EF921268);
        }
        v14 = (id)qword_1EF921260;
        if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
LABEL_28:

          return 0;
        }
        v24 = 0;
        v15 = "scaling is not supported in for VTImageRotationSessionTransferImage";
      }
      else
      {
        v22 = atomic_load((unsigned __int8 *)&qword_1EF921268);
        if ((v22 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921268))
        {
          qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
          __cxa_guard_release(&qword_1EF921268);
        }
        v14 = (id)qword_1EF921260;
        if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          goto LABEL_28;
        v24 = 0;
        v15 = "could not get scaling property";
      }
      v16 = (uint8_t *)&v24;
      v17 = v14;
      v18 = 2;
    }
    _os_log_error_impl(&dword_1C9870000, v17, OS_LOG_TYPE_ERROR, v15, v16, v18);
    goto LABEL_28;
  }
  if (*(_DWORD *)(a1 + 16) != a4)
  {
    MEMORY[0x1CAA44388]();
    CFRelease(*v6);
    *v6 = 0;
    goto LABEL_9;
  }
LABEL_3:
  v7 = MEMORY[0x1CAA44394]();
  if (!v7)
    return 1;
  v8 = v7;
  v9 = atomic_load((unsigned __int8 *)&qword_1EF921268);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921268))
  {
    qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
    __cxa_guard_release(&qword_1EF921268);
  }
  v10 = (id)qword_1EF921260;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    LODWORD(propertyValueOut[0]) = 67109120;
    HIDWORD(propertyValueOut[0]) = v8;
    _os_log_error_impl(&dword_1C9870000, v10, OS_LOG_TYPE_ERROR, "failed rotating the image(%d)", (uint8_t *)propertyValueOut, 8u);
  }

  return 0;
}

_QWORD *sub_1C9888CF8(_QWORD *a1)
{
  unsigned __int8 v2;
  NSObject *v3;
  _QWORD *v4;
  _QWORD *v5;
  unsigned __int8 v6;
  NSObject *v7;
  unsigned __int8 v8;
  NSObject *v9;
  _DWORD v11[2];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = atomic_load((unsigned __int8 *)&qword_1EF921268);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921268))
  {
    qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
    __cxa_guard_release(&qword_1EF921268);
  }
  v3 = (id)qword_1EF921260;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v11[0] = 67109120;
    v11[1] = 0;
    _os_log_impl(&dword_1C9870000, v3, OS_LOG_TYPE_INFO, "Rotation helper type %i", (uint8_t *)v11, 8u);
  }

  v4 = (_QWORD *)operator new();
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E8294A58;
  a1[1] = v4;
  v5 = (_QWORD *)operator new();
  *v5 = &off_1E8294A28;
  v5[1] = 0;
  a1[2] = v5;
  if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[1] + 16))(a1[1]) & 1) == 0)
  {
    v6 = atomic_load((unsigned __int8 *)&qword_1EF921268);
    if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921268))
    {
      qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
      __cxa_guard_release(&qword_1EF921268);
    }
    v7 = (id)qword_1EF921260;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v11[0]) = 0;
      _os_log_error_impl(&dword_1C9870000, v7, OS_LOG_TYPE_ERROR, "Could not initialize rotator", (uint8_t *)v11, 2u);
    }

  }
  if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[2] + 16))(a1[2]) & 1) == 0)
  {
    v8 = atomic_load((unsigned __int8 *)&qword_1EF921268);
    if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921268))
    {
      qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
      __cxa_guard_release(&qword_1EF921268);
    }
    v9 = (id)qword_1EF921260;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v11[0]) = 0;
      _os_log_error_impl(&dword_1C9870000, v9, OS_LOG_TYPE_ERROR, "Could not initialize scaler", (uint8_t *)v11, 2u);
    }

  }
  return a1;
}

void sub_1C9888F84(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1C9888F90(_Unwind_Exception *exception_object)
{
  CVPixelBufferRef *v1;

  if (!*v1)
    _Unwind_Resume(exception_object);
  CVPixelBufferRelease(*v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1C9888FB0(CVPixelBufferRef *a1, uint64_t a2, CVPixelBufferRef pixelBuffer, __CVBuffer *a4)
{
  __CVBuffer *v5;
  OSType PixelFormatType;
  OSType v9;
  _BOOL4 v11;
  size_t Width;
  size_t Height;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  size_t v17;
  size_t v18;
  size_t v19;
  size_t v20;
  float v21;
  float v22;
  float v23;
  double v24;
  cva *v25;
  float v26;
  float v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  float v37;
  float v38;
  unsigned __int8 v39;
  NSObject *v40;
  const char *v41;
  unsigned __int8 v42;
  float v43;
  int v44;
  __IOSurface *IOSurface;
  uint64_t v46;
  int8x16_t v47;
  unsigned __int8 v48;
  NSObject *v49;
  uint32_t v50;
  unsigned __int8 v51;
  size_t v53;
  size_t v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  void *v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  void *v63;
  vImage_Buffer dest;
  vImage_Buffer src;
  __int16 v66;
  int v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  if (!pixelBuffer || !a4)
  {
    v39 = atomic_load((unsigned __int8 *)&qword_1EF921268);
    if ((v39 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921268))
    {
      qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
      __cxa_guard_release(&qword_1EF921268);
    }
    v40 = (id)qword_1EF921260;
    if (!os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
      goto LABEL_89;
    LOWORD(src.data) = 0;
    v41 = "invalid call";
LABEL_85:
    v49 = v40;
    v50 = 2;
LABEL_86:
    _os_log_error_impl(&dword_1C9870000, v49, OS_LOG_TYPE_ERROR, v41, (uint8_t *)&src, v50);
    goto LABEL_89;
  }
  v5 = pixelBuffer;
  PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  v9 = CVPixelBufferGetPixelFormatType(a4);
  v11 = PixelFormatType != 1278226488 && v9 != 1278226488;
  Width = CVPixelBufferGetWidth(v5);
  Height = CVPixelBufferGetHeight(v5);
  v14 = CVPixelBufferGetWidth(a4);
  v15 = CVPixelBufferGetHeight(a4);
  if (!(_DWORD)Width || !(_DWORD)Height || !v14 || (v16 = v15) == 0)
  {
    v42 = atomic_load((unsigned __int8 *)&qword_1EF921268);
    if ((v42 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921268))
    {
      qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
      __cxa_guard_release(&qword_1EF921268);
    }
    v40 = (id)qword_1EF921260;
    if (!os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
      goto LABEL_89;
    LOWORD(src.data) = 0;
    v41 = "zero width or height";
    goto LABEL_85;
  }
  v53 = Height;
  v54 = Width;
  v55 = PixelFormatType;
  v17 = CVPixelBufferGetWidth(v5);
  v18 = CVPixelBufferGetHeight(v5);
  v19 = CVPixelBufferGetWidth(a4);
  v20 = CVPixelBufferGetHeight(a4);
  v21 = 1.0;
  if (!v17 || !v18)
  {
LABEL_23:
    if (v11)
      goto LABEL_77;
    goto LABEL_24;
  }
  if (a2 <= 4)
  {
    v22 = (float)v19;
    v23 = (float)v19 / (float)v17;
    if ((float)((float)v20 / (float)v18) < v23)
      v23 = (float)v20 / (float)v18;
    v21 = (float)v20 / (float)v17;
    if ((float)(v22 / (float)v18) < v21)
      v21 = v22 / (float)v18;
    if (((1 << a2) & 0x15) != 0)
      v21 = v23;
    if (v21 < 0.25)
      goto LABEL_25;
    goto LABEL_23;
  }
  if (v11)
    goto LABEL_77;
LABEL_24:
  if (fabsf(v21 + -1.0) <= 0.000001)
    goto LABEL_77;
LABEL_25:
  v24 = COERCE_DOUBLE(vrev64_s32((int32x2_t)__PAIR64__(v16, v14)));
  if ((a2 | 2) != 3)
    v24 = COERCE_DOUBLE(__PAIR64__(v16, v14));
  v25 = (cva *)LODWORD(v24);
  if (!v11)
  {
    v36 = HIDWORD(v24);
    v32 = v55;
    v29 = v53;
    v28 = v54;
    goto LABEL_72;
  }
  v26 = (float)SLODWORD(v24);
  v27 = (float)SHIDWORD(v24);
  v29 = v53;
  v28 = v54;
  v30 = v54 + 3;
  if ((v54 & 0x80000000) == 0)
    v30 = v54;
  v31 = v53 + 3;
  if ((v53 & 0x80000000) == 0)
    v31 = v53;
  v32 = v55;
  if ((v54 & 3) == 0 && (v53 & 3) == 0)
  {
    v35 = (v30 >> 2);
    if ((int)v35 >= (int)v25)
    {
      v36 = (v31 >> 2);
      if ((int)v36 >= SHIDWORD(v24))
      {
        v43 = v26 / (float)(int)v35;
        if ((float)(v27 / (float)(int)v36) < v43)
          v43 = v27 / (float)(int)v36;
        if (v43 >= 0.25)
          goto LABEL_62;
      }
    }
  }
  v33 = (v54 & 0x80000000) == 0 ? v54 : (int)v54 + 1;
  v34 = (v53 & 0x80000000) == 0 ? v53 : (int)v53 + 1;
  if ((v54 & 1) != 0)
    goto LABEL_46;
  if ((v53 & 1) != 0)
    goto LABEL_46;
  v35 = (v33 >> 1);
  if ((int)v35 < (int)v25)
    goto LABEL_46;
  v36 = (v34 >> 1);
  if ((int)v36 < SHIDWORD(v24))
    goto LABEL_46;
  v37 = v26 / (float)(int)v35;
  v38 = v27 / (float)(int)v36;
  if (v38 < v37)
    v37 = v38;
  if (v37 < 0.25)
  {
LABEL_46:
    v25 = (cva *)v54;
    v36 = v53;
  }
  else
  {
LABEL_62:
    v25 = (cva *)v35;
  }
  if ((int)v55 > 875704949)
  {
    if (v55 != 875704950 && v55 != 2037741171)
    {
      v44 = 2037741158;
LABEL_70:
      if (v55 != v44)
        goto LABEL_72;
    }
  }
  else if (v55 != 875704422 && v55 != 875704438)
  {
    v44 = 875704934;
    goto LABEL_70;
  }
  v25 = (cva *)((v25 & 1) + v25);
  v36 = (v36 & 1) + v36;
LABEL_72:
  if (sub_1C98877C4(a1, v25, v36, v32) == 2)
  {
    IOSurface = CVPixelBufferGetIOSurface(*a1);
    if (IOSurface)
      IOSurfaceSetValue(IOSurface, (CFStringRef)*MEMORY[0x1E0CBC048], CFSTR("AppleCVA:Seg:RotationHelper"));
  }
  if (((*(uint64_t (**)(CVPixelBufferRef, __CVBuffer *, CVPixelBufferRef))(*(_QWORD *)a1[2] + 24))(a1[2], v5, *a1) & 1) == 0)
  {
    v51 = atomic_load((unsigned __int8 *)&qword_1EF921268);
    if ((v51 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921268))
    {
      qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
      __cxa_guard_release(&qword_1EF921268);
    }
    v40 = (id)qword_1EF921260;
    if (!os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
      goto LABEL_89;
    LODWORD(src.data) = 67110400;
    HIDWORD(src.data) = v28;
    LOWORD(src.height) = 1024;
    *(_DWORD *)((char *)&src.height + 2) = v29;
    HIWORD(src.height) = 1024;
    LODWORD(src.width) = v32;
    WORD2(src.width) = 1024;
    *(_DWORD *)((char *)&src.width + 6) = (_DWORD)v25;
    WORD1(src.rowBytes) = 1024;
    HIDWORD(src.rowBytes) = v36;
    v66 = 1024;
    v67 = v32;
    v41 = "failed to scale image (%ux%u 0x%x -> %ux%u 0x%x)";
    v49 = v40;
    v50 = 38;
    goto LABEL_86;
  }
  v5 = *a1;
LABEL_77:
  if (CVPixelBufferGetPixelFormatType(v5) != 1278226488 || CVPixelBufferGetPixelFormatType(a4) != 1278226488)
  {
    if (((*(uint64_t (**)(CVPixelBufferRef, __CVBuffer *, __CVBuffer *, uint64_t))(*(_QWORD *)a1[1] + 24))(a1[1], v5, a4, a2) & 1) != 0)return 1;
    v48 = atomic_load((unsigned __int8 *)&qword_1EF921268);
    if ((v48 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921268))
    {
      qword_1EF921260 = (uint64_t)os_log_create("com.apple.AppleCVA", "Segmentation");
      __cxa_guard_release(&qword_1EF921268);
    }
    v40 = (id)qword_1EF921260;
    if (!os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
LABEL_89:

      return 0;
    }
    LOWORD(src.data) = 0;
    v41 = "Error rotating/scaling buffer";
    goto LABEL_85;
  }
  v46 = 1;
  CVPixelBufferLockBaseAddress(v5, 1uLL);
  CVPixelBufferLockBaseAddress(a4, 0);
  cva::imageViewFromPixelBuffer<unsigned char>();
  cva::imageViewFromPixelBuffer<unsigned char>();
  v47.i64[0] = v60;
  v47.i64[1] = v61;
  *(int8x16_t *)&src.height = vextq_s8(v47, v47, 8uLL);
  src.rowBytes = v62;
  dest.data = v59;
  v47.i64[0] = v56;
  v47.i64[1] = v57;
  *(int8x16_t *)&dest.height = vextq_s8(v47, v47, 8uLL);
  dest.rowBytes = v58;
  src.data = v63;
  vImageRotate90_Planar8(&src, &dest, (0x1020300u >> (8 * a2)) & 3, 0, 0);
  CVPixelBufferUnlockBaseAddress(v5, 1uLL);
  CVPixelBufferUnlockBaseAddress(a4, 0);
  return v46;
}

uint64_t sub_1C98896B0(uint64_t a1, __int128 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t result;
  double Seconds;
  double v8;
  unsigned __int8 v9;
  uint64_t v10;
  const char *v11;
  CMTime *v12;
  NSObject *v13;
  uint32_t v14;
  __int128 v15;
  CMTime v16;
  CMTime rhs;
  CMTime lhs;
  CMTime v19;
  int v20;
  double v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)a2 + 12) & 1) == 0)
  {
    v2 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v2 & 1) == 0)
    {
      if (__cxa_guard_acquire(&qword_1EF921288))
      {
        qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
        __cxa_guard_release(&qword_1EF921288);
      }
    }
    v3 = qword_1EF921280;
    if (!os_log_type_enabled((os_log_t)qword_1EF921280, OS_LOG_TYPE_ERROR))
      return 1;
    LOWORD(v19.value) = 0;
    v11 = "Precondition violated: CMTIME_IS_VALID(timestamp)";
    v12 = &v19;
    v13 = v3;
    v14 = 2;
    goto LABEL_15;
  }
  memset(&v19, 0, sizeof(v19));
  lhs = *(CMTime *)a2;
  rhs = *(CMTime *)a1;
  CMTimeSubtract(&v19, &lhs, &rhs);
  if ((v19.flags & 1) == 0)
  {
    if (*(_BYTE *)(a1 + 32))
      *(_BYTE *)(a1 + 32) = 0;
    goto LABEL_13;
  }
  v16 = v19;
  Seconds = CMTimeGetSeconds(&v16);
  v8 = Seconds;
  if (Seconds >= 0.0)
  {
    *(double *)(a1 + 24) = Seconds;
    *(_BYTE *)(a1 + 32) = 1;
LABEL_13:
    result = 0;
    v15 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v15;
    return result;
  }
  v9 = atomic_load((unsigned __int8 *)&qword_1EF921288);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
  {
    qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
    __cxa_guard_release(&qword_1EF921288);
  }
  v10 = qword_1EF921280;
  if (!os_log_type_enabled((os_log_t)qword_1EF921280, OS_LOG_TYPE_ERROR))
    return 1;
  v20 = 134217984;
  v21 = v8;
  v11 = "Timestamps must be increasing, got a diff of %f";
  v12 = (CMTime *)&v20;
  v13 = v10;
  v14 = 12;
LABEL_15:
  _os_log_error_impl(&dword_1C9870000, v13, OS_LOG_TYPE_ERROR, v11, (uint8_t *)v12, v14);
  return 1;
}

_QWORD *sub_1C98898D8(_QWORD *a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  void **v6;
  void *v7;
  void **v8;
  void *v9;
  id *v10;
  void *v11;
  id *v12;
  void *v13;
  void **v15;
  void **v16;
  id *v17;
  id *v18;
  int v19;
  int v20;
  uint8_t buf[4];
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v2 = a1[31];
  a1[31] = 0;
  if (v2)
  {
    v3 = e5rt_execution_stream_operation_release();
    if (v3)
    {
      v19 = v3;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        v22 = v19;
        _os_log_error_impl(&dword_1C9870000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "e5rt::AssertSuccess failed with error code %d.", buf, 8u);
      }
    }
  }
  v4 = a1[30];
  a1[30] = 0;
  if (v4)
  {
    v5 = e5rt_execution_stream_release();
    if (v5)
    {
      v20 = v5;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        v22 = v20;
        _os_log_error_impl(&dword_1C9870000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "e5rt::AssertSuccess failed with error code %d.", buf, 8u);
      }
    }
  }
  v6 = (void **)a1[27];
  if (v6)
  {
    do
    {
      v15 = (void **)*v6;
      if (*((char *)v6 + 39) < 0)
        operator delete(v6[2]);
      operator delete(v6);
      v6 = v15;
    }
    while (v15);
  }
  v7 = (void *)a1[25];
  a1[25] = 0;
  if (v7)
    operator delete(v7);
  v8 = (void **)a1[22];
  if (v8)
  {
    do
    {
      v16 = (void **)*v8;
      if (*((char *)v8 + 39) < 0)
        operator delete(v8[2]);
      operator delete(v8);
      v8 = v16;
    }
    while (v16);
  }
  v9 = (void *)a1[20];
  a1[20] = 0;
  if (v9)
    operator delete(v9);
  v10 = (id *)a1[17];
  if (v10)
  {
    do
    {
      v17 = (id *)*v10;

      if (*((char *)v10 + 39) < 0)
        operator delete(v10[2]);
      operator delete(v10);
      v10 = v17;
    }
    while (v17);
  }
  v11 = (void *)a1[15];
  a1[15] = 0;
  if (v11)
    operator delete(v11);
  v12 = (id *)a1[12];
  if (v12)
  {
    do
    {
      v18 = (id *)*v12;

      if (*((char *)v12 + 39) < 0)
        operator delete(v12[2]);
      operator delete(v12);
      v12 = v18;
    }
    while (v18);
  }
  v13 = (void *)a1[10];
  a1[10] = 0;
  if (v13)
    operator delete(v13);
  sub_1C9889C30((uint64_t)(a1 + 5));
  sub_1C9889C30((uint64_t)a1);
  return a1;
}

uint64_t *sub_1C9889B34(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    if (*(_QWORD *)(v2 + 8))
    {
      v6 = *(_QWORD *)(v2 + 8);
      v3 = *(_QWORD *)(v2 + 40);
      if (!v3)
      {
        result = (uint64_t *)sub_1C9889C1C();
        __break(1u);
        return result;
      }
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v6);
      *(_QWORD *)(v2 + 8) = 0;
    }
    v4 = *(_QWORD **)(v2 + 40);
    if (v4 == (_QWORD *)(v2 + 16))
    {
      v5 = 4;
      v4 = (_QWORD *)(v2 + 16);
    }
    else
    {
      if (!v4)
      {
LABEL_10:

        return (uint64_t *)MEMORY[0x1CAA44AFC](v2, 0x10A0C40079592F6);
      }
      v5 = 5;
    }
    (*(void (**)(void))(*v4 + 8 * v5))();
    goto LABEL_10;
  }
  return result;
}

void sub_1C9889BE0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)(v1 + 40);
  if (v3 == (_QWORD *)(v1 + 16))
  {
    v4 = 4;
    v3 = (_QWORD *)(v1 + 16);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1C9889C1C()
{
  uint64_t v0;

  std::__libcpp_verbose_abort("bad_function_call was thrown in -fno-exceptions mode");
  return sub_1C9889C30(v0);
}

uint64_t sub_1C9889C30(uint64_t a1)
{
  char *v2;
  NSObject *v3;
  char *v4;
  uint64_t v5;
  int v6;
  int v7;
  void *v8;
  uint8_t buf[4];
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = *(char **)(a1 + 16);
  if (v2)
  {
    v3 = MEMORY[0x1E0C81028];
    do
    {
      v4 = *(char **)v2;
      v5 = *((_QWORD *)v2 + 5);
      *((_QWORD *)v2 + 5) = 0;
      if (v5)
      {
        v6 = e5rt_io_port_release();
        if (v6)
        {
          v7 = v6;
          if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67109120;
            v11 = v7;
            _os_log_error_impl(&dword_1C9870000, v3, OS_LOG_TYPE_ERROR, "e5rt::AssertSuccess failed with error code %d.", buf, 8u);
          }
        }
      }
      if (v2[39] < 0)
        operator delete(*((void **)v2 + 2));
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v8 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v8)
    operator delete(v8);
  return a1;
}

uint64_t sub_1C9889D60(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  id *v7;

  if (*(_BYTE *)(a1 + 1280))
  {
    v2 = *(void **)(a1 + 984);
    if (v2)
    {
      *(_QWORD *)(a1 + 992) = v2;
      operator delete(v2);
    }
  }

  v3 = *(_QWORD *)(a1 + 304);
  *(_QWORD *)(a1 + 304) = 0;
  if (v3)
  {
    v4 = sub_1C98A0CE4(v3);
    MEMORY[0x1CAA44AFC](v4, 0x10A2C40AC51AD7DLL);
  }
  v5 = *(_QWORD **)(a1 + 296);
  *(_QWORD *)(a1 + 296) = 0;
  if (v5)
  {
    v6 = sub_1C98898D8(v5);
    MEMORY[0x1CAA44AFC](v6, 0x10A0C4041783943);
  }
  if (*(_BYTE *)(a1 + 288))

  if (*(_BYTE *)(a1 + 264))
  sub_1C9889B34((uint64_t *)(a1 + 240), 0);
  v7 = *(id **)(a1 + 232);
  *(_QWORD *)(a1 + 232) = 0;
  if (v7)
  {

    MEMORY[0x1CAA44AFC](v7, 0x80C4018A671A6);
  }

  return a1;
}

uint64_t sub_1C9889EE8(uint64_t a1, uint64_t a2, _BYTE *a3, cva::DictionaryHandler **a4)
{
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  _QWORD *v13;
  uint64_t v14;
  float32x4_t *v15;
  float *v16;
  float *v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float *v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  unsigned __int8 v53;
  NSObject *v54;
  int v55;
  float *i;
  float v57;
  float v58;
  float v59;
  float v60;
  float v62;
  BOOL v63;
  float v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  float32x4_t v68;
  int v69;
  char v70;
  float32x4_t *v71;
  unsigned __int8 v72;
  NSObject *v73;
  NSObject *v74;
  float32x4_t v75;
  float32x4_t v76;
  __int128 v77;
  float32x2_t v78;
  float32x2_t v79;
  float32x2_t v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  unsigned __int8 v85;
  NSObject *v86;
  void *v87;
  __int128 *v88;
  __int128 v89;
  uint64_t v90;
  unint64_t v91;
  int64x2_t v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  __int128 v102;
  uint64_t v103;
  float32x2_t v104;
  float32x2_t v105;
  float v106;
  float v107;
  int v108;
  int v109;
  NSObject *v110;
  char v111;
  _BOOL4 v112;
  unsigned __int8 v113;
  NSObject *v114;
  const char *v115;
  unsigned __int8 v116;
  unsigned int v117;
  unsigned __int8 v118;
  NSObject *v119;
  unsigned __int8 v120;
  NSObject *v121;
  int v122;
  float32x4_t v123;
  _BOOL4 v124;
  int v125;
  unsigned __int8 v126;
  NSObject *v127;
  unsigned __int8 v128;
  NSObject *v129;
  unsigned __int8 v130;
  NSObject *v131;
  unsigned __int8 v132;
  NSObject *v133;
  unsigned __int8 v134;
  NSObject *v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float32x4_t v143;
  int v144;
  int v145;
  uint64_t v146;
  float32x4_t v147;
  int v148;
  std::__shared_weak_count *v149;
  unint64_t *p_shared_owners;
  unint64_t v151;
  unsigned int v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  unsigned __int8 v156;
  NSObject *v157;
  double v158;
  float v159;
  float32x4_t v160;
  float32x4_t v161;
  const char *v162;
  const char *v163;
  const char *v164;
  int v165;
  unsigned int v166;
  unsigned int v167;
  unsigned int v168;
  int v169;
  int v170;
  uint64_t v171;
  float v172;
  __int128 v177;
  int8x16_t v178;
  int8x16_t v179;
  float32x4_t v180;
  float32x4_t v182;
  unsigned int v183;
  int32x4_t v184;
  float32x2_t v185;
  float32x2_t v186;
  int32x4_t v187;
  float32x2_t v188;
  float32x2_t v189;
  float32x4_t v190;
  float v191;
  float32x4_t v192;
  int32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  float32x4_t v196;
  int32x4_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float v200;
  unsigned int v201;
  unsigned int v202;
  unsigned int v203;
  unsigned __int8 v204;
  int v205;
  float32x4_t v206;
  float v207;
  float v208;
  float v209;
  float v210;
  float v211;
  float32x2_t v212;
  float32x2_t v214;
  float v215;
  float v216;
  float v217;
  float v218;
  float v219;
  float v220;
  unsigned __int8 v221;
  NSObject *v222;
  void *v223;
  int v224;
  unsigned int v225;
  unsigned int v226;
  unsigned int v227;
  unsigned __int8 v228;
  unsigned int v229;
  unsigned int v230;
  unsigned int v231;
  int v232;
  int32x2_t v233;
  float v234;
  simd_float3 v235;
  NSObject *v236;
  NSObject *v237;
  uint64_t v238;
  id *v239;
  void *v240;
  id v241;
  void *v242;
  uint64_t v243;
  uint64_t v244;
  id *v245;
  void *v246;
  id v247;
  id v248;
  id v249;
  void *v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  id v257;
  uint64_t v258;
  unsigned __int8 v259;
  const char *v260;
  float j;
  float v262;
  NSObject *v263;
  unsigned __int8 v264;
  char *v265;
  const char *v266;
  char *v267;
  unsigned __int8 v268;
  int v269;
  const char *v270;
  unsigned __int8 v271;
  NSObject *v272;
  const char *v273;
  char *v274;
  char *v275;
  const char *v276;
  const char *v277;
  unsigned int v278;
  unsigned int v279;
  unsigned int v280;
  unsigned __int8 v282;
  NSObject *v283;
  unsigned __int8 v284;
  const char *v285;
  unsigned __int8 v286;
  NSObject *v287;
  const char *v288;
  const char *v289;
  const char *v290;
  const char *v291;
  const char *v292;
  const char *v293;
  unsigned __int8 v294;
  unsigned __int8 v295;
  unsigned __int8 v296;
  const char *v297;
  unsigned __int8 v298;
  const char *v299;
  unsigned __int8 v300;
  unsigned __int8 v301;
  NSObject *v302;
  unsigned __int8 v303;
  NSObject *v304;
  char *v305;
  char *v306;
  char *v307;
  char *v308;
  char *v309;
  const char *v310;
  const char *v311;
  float32x2_t v312;
  float32x2_t v313;
  float32x2_t v314;
  float32x2_t v315;
  float32x2_t v316;
  float32x2_t v317;
  float32x2_t v318;
  float32x2_t v319;
  float32x2_t v320;
  float32x2_t v321;
  float32x2_t v322;
  float32x2_t v323;
  char *v324;
  uint64_t v325;
  int32x4_t v326;
  int32x2_t v327;
  float32x2_t v328;
  int32x4_t v329;
  float32x2_t v330;
  float32x2_t v331;
  float32x2_t v332;
  int32x4_t v333;
  float32x2_t v334;
  float v335;
  char v336;
  uint64_t v337;
  float v338;
  float v339;
  int v340;
  uint64_t v341;
  uint64_t v342;
  id v343;
  id v344;
  uint64_t v345;
  id v346;
  uint64_t v347;
  float v348;
  unint64_t v349;
  float32x2_t *v350;
  float32x2_t *v351;
  uint64_t v352;
  float32x4_t v353;
  float32x4_t v354;
  float32x4_t v355;
  int8x16_t v356;
  int8x16_t v357;
  float32x2_t v358;
  float32x2_t v359;
  float32x2_t v360;
  __int128 v361;
  float32x2_t v362;
  float32x2_t v363;
  __int128 v364;
  float32x2_t v365;
  float32x2_t v366;
  float32x2_t v367;
  float32x2_t v368;
  float32x2_t v369;
  float32x2_t v370;
  float v371;
  float32x2_t v372;
  float32x2_t v373;
  float v374;
  float32x2_t v375;
  float v376;
  float32x2_t v377;
  float v378;
  float32x2_t v379;
  float v380;
  float32x2_t v381;
  float v382;
  float32x2_t v383;
  float v384;
  float32x2_t v385;
  float32x2_t v386;
  float32x2_t v387;
  float32x2_t v388;
  float32x2_t v389;
  float32x2_t v390;
  float32x2_t v391;
  float32x2_t v392;
  float32x2_t v393;
  float32x2_t v394;
  float32x2_t v395;
  float32x2_t v396;
  float32x2_t v397;
  float v398;
  float32x2_t v399;
  float32x4_t v400;
  float v401;
  float32x2_t v402;
  float32x2_t v403;
  float32x4_t v404;
  float v405;
  float v406;
  unint64_t v407;
  float32x2_t v408;
  float32x4_t v409;
  float32x4_t v410;
  float32x4_t v411;
  float32x4_t v412;
  float32x4_t v413;
  float32x4_t v414;
  float32x4_t v415;
  float32x2_t v416;
  float32x4_t v417;
  float32x4_t v418;
  int32x2_t v419;
  float32x4_t v420;
  float v421;
  float32x2_t v422;
  int v423;
  int v424;
  int v425;
  float32x4_t v426;
  float32x4_t v427;
  float32x4_t v428;
  simd_float3 v429;
  uint64_t v430;
  id v431;
  __int32 v432;
  unsigned __int8 v433;
  NSObject *v434;
  int v435;
  unsigned __int8 v436;
  NSObject *v437;
  NSObject *v438;
  int32x2_t v439;
  NSObject *v440;
  void *v441;
  void *v442;
  uint64_t v443;
  void *v444;
  void *v445;
  char v446;
  unsigned int v447;
  unsigned int v448;
  NSObject *v449;
  void *v450;
  NSObject *v451;
  unsigned int v452;
  unsigned int v453;
  NSObject *v454;
  float v455;
  unsigned int v456;
  unsigned int v457;
  unsigned int v458;
  NSObject *v459;
  char *v460;
  char *v461;
  cva::DictionaryHandler *v462;
  unint64_t *v463;
  unint64_t v464;
  unsigned int v465;
  NSObject *v466;
  unsigned int v467;
  unsigned int v468;
  unsigned int v469;
  char *v470;
  char *v471;
  char *v472;
  char *v473;
  unsigned int v474;
  unsigned int v475;
  const char *v476;
  char *v477;
  char *v478;
  const char *v479;
  const char *v480;
  const char *v481;
  char *v482;
  char *v483;
  float v484;
  uint64_t v485;
  uint64_t v486;
  char *__p;
  id v488;
  NSObject *v489;
  __int32 v490;
  __int32 v491;
  __int32 v492;
  __int32 v493;
  __int32 v494;
  __int32 v495;
  __int32 v496;
  __int32 v497;
  __int32 v498;
  __int32 v499;
  __int32 v500;
  simd_float3 v501;
  __int32 v502;
  char v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  float32x4_t v508;
  simd_float3 v509;
  float32x4_t v510;
  os_log_t logb[2];
  unint64_t logc;
  NSObject *log;
  float32x4_t loga;
  os_log_t logd[2];
  os_log_t loge[2];
  uint64_t v517;
  uint64_t v518;
  void *v519;
  float32x4_t v520;
  signed int v521;
  float32x4_t v522;
  float32x4_t v523;
  float32x4_t v524;
  NSObject *v525;
  cva::DictionaryHandler *v527[2];
  cva::DictionaryHandler *v528;
  std::__shared_weak_count *v529;
  float32x2_t v530;
  float32x2_t v531;
  _BYTE rhs[32];
  int8x16_t v533;
  int32x2_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  int v540;
  _OWORD v541[2];
  __int32 v542;
  _OWORD v543[2];
  int v544;
  CMTime v545;
  char v546;
  char v547;
  char v548;
  uint64_t v549;
  _BYTE v550[36];
  float32x2_t v551;
  float v552;
  float *v553[2];
  _OWORD v554[2];
  _BYTE time[32];
  int v556;
  float32x2_t v557;
  float v558;
  simd_float3x3 buf;
  uint64_t (**v560)();
  int32x2_t v561;
  __int128 v562;
  __int128 v563;
  int v564;
  _OWORD v565[2];
  int v566;
  float32x2_t v567;
  float v568;
  _QWORD v569[3];
  _QWORD *v570;
  id v571;
  _QWORD v572[4];
  _BYTE v573[32];
  int v574;
  simd_float3 v575;
  uint64_t v576;
  float v577;
  uint64_t v578;
  _BYTE time2[28];
  uint64_t v580;
  _BYTE time1[28];
  uint64_t v582;
  _BYTE lhs[48];
  _BYTE v584[40];
  float32x2_t v585;
  float v586;
  uint64_t v587;
  simd_float3x3 v588;
  simd_float3x3 v589;
  simd_float3x3 v590;
  simd_float3x3 v591;

  v587 = *MEMORY[0x1E0C80C00];
  *a3 = 0;
  v7 = *(void **)(a1 + 208);
  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0CC6A48], "sharedCaptureManager");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "newCaptureScopeWithCommandQueue:", *(_QWORD *)(a1 + 184));
    v10 = *(void **)(a1 + 208);
    *(_QWORD *)(a1 + 208) = v9;

    objc_msgSend(*(id *)(a1 + 208), "setLabel:", CFSTR("ViewpointCorrectionProcessor"));
    v7 = *(void **)(a1 + 208);
  }
  objc_msgSend(v7, "beginScope");
  v11 = *(void **)(a1 + 208);
  v569[0] = &off_1E82946B0;
  v570 = v569;
  v12 = v11;
  v571 = v12;
  v572[3] = v572;
  sub_1C9893D0C((uint64_t)v569, v572);

  v13 = v570;
  if (v570 == v569)
  {
    v14 = 4;
    v13 = v569;
    goto LABEL_7;
  }
  if (v570)
  {
    v14 = 5;
LABEL_7:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  if (*(_DWORD *)(a2 + 32) && !*(_BYTE *)(a1 + 1280))
    goto LABEL_275;
  if (*(_BYTE *)(a1 + 1336))
  {
    *(_OWORD *)time1 = *(_OWORD *)(a1 + 1312);
    *(_QWORD *)&time1[16] = *(_QWORD *)(a1 + 1328);
    *(_OWORD *)time2 = *(_OWORD *)(a2 + 36);
    *(_QWORD *)&time2[16] = *(_QWORD *)(a2 + 52);
    if (CMTimeCompare((CMTime *)time1, (CMTime *)time2) < 0)
    {
      if (*(_BYTE *)(a1 + 1336))
        *(_BYTE *)(a1 + 1336) = 0;
    }
  }
  v15 = (float32x4_t *)(a1 + 1288);
  v16 = *(float **)(a2 + 160);
  v17 = *(float **)(a2 + 168);
  if (v16 == v17)
  {
    if (*(_BYTE *)(a1 + 1336))
    {
      v53 = atomic_load((unsigned __int8 *)&qword_1EF921288);
      if ((v53 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
      {
        qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
        __cxa_guard_release(&qword_1EF921288);
      }
      v54 = (id)qword_1EF921280;
      if (os_log_type_enabled(v54, OS_LOG_TYPE_DEBUG))
      {
        buf.columns[0].i16[0] = 0;
        _os_log_debug_impl(&dword_1C9870000, v54, OS_LOG_TYPE_DEBUG, "Input data has no face detection, use cached data.", (uint8_t *)&buf, 2u);
      }

      v55 = 0;
      v517 = *(_QWORD *)(a1 + 1304);
      v523 = *v15;
      goto LABEL_83;
    }
    v70 = 0;
    v523 = 0u;
  }
  else
  {
    if (*(_BYTE *)(a1 + 1280))
    {
      v18 = *(float *)(a1 + 728);
      v19 = *(float *)(a1 + 732);
      v20 = *(float *)(a1 + 736);
      v21 = *(float *)(a1 + 740);
      v22 = v16 + 6;
      if (v16 + 6 != v17)
      {
        v23 = v20 * v21;
        v24 = v20 + v18;
        v25 = v21 + v19;
        do
        {
          v26 = v16[2];
          v27 = 0.0;
          if (v26 >= 0.0)
          {
            v28 = v16[3];
            if (v28 >= 0.0)
            {
              v29 = v26 * v28;
              if ((float)(v26 * v28) > 0.0 && v20 >= 0.0 && v21 >= 0.0 && v23 > 0.0)
              {
                v30 = *v16;
                v31 = v16[1];
                v32 = v26 + *v16;
                v33 = v28 + v31;
                if (v24 < v32)
                  v32 = v20 + v18;
                if (v30 < v18)
                  v30 = *(float *)(a1 + 728);
                v34 = fmaxf(v32 - v30, 0.0);
                if (v25 >= v33)
                  v35 = v33;
                else
                  v35 = v21 + v19;
                if (v31 >= v19)
                  v36 = v16[1];
                else
                  v36 = *(float *)(a1 + 732);
                v37 = v34 * fmaxf(v35 - v36, 0.0);
                v27 = v37 / (float)((float)(v29 + v23) - v37);
              }
            }
          }
          v38 = v22[2];
          v39 = 0.0;
          if (v38 >= 0.0)
          {
            v40 = v22[3];
            if (v40 >= 0.0)
            {
              v41 = v38 * v40;
              if ((float)(v38 * v40) > 0.0 && v20 >= 0.0 && v21 >= 0.0 && v23 > 0.0)
              {
                v42 = *v22;
                v43 = v22[1];
                v44 = v38 + *v22;
                v45 = v40 + v43;
                if (v24 < v44)
                  v44 = v20 + v18;
                if (v42 < v18)
                  v42 = *(float *)(a1 + 728);
                v46 = fmaxf(v44 - v42, 0.0);
                if (v25 >= v45)
                  v47 = v45;
                else
                  v47 = v21 + v19;
                if (v43 >= v19)
                  v48 = v22[1];
                else
                  v48 = *(float *)(a1 + 732);
                v49 = v46 * fmaxf(v47 - v48, 0.0);
                v39 = v49 / (float)((float)(v41 + v23) - v49);
              }
            }
          }
          if (v27 < v39)
            v16 = v22;
          v22 += 6;
        }
        while (v22 != v17);
      }
      v50 = v16[2];
      v51 = 0.0;
      if (v50 >= 0.0)
      {
        v52 = v16[3];
        if (v52 >= 0.0)
        {
          v93 = v50 * v52;
          if ((float)(v50 * v52) > 0.0 && v20 >= 0.0 && v21 >= 0.0)
          {
            v94 = v20 * v21;
            if ((float)(v20 * v21) > 0.0)
            {
              v95 = v16[1];
              v96 = v50 + *v16;
              v97 = v52 + v95;
              v98 = v20 + v18;
              v99 = v21 + v19;
              if (v98 >= v96)
                v98 = v96;
              if (*v16 >= v18)
                v18 = *v16;
              v100 = fmaxf(v98 - v18, 0.0);
              if (v99 >= v97)
                v99 = v97;
              if (v95 >= v19)
                v19 = v16[1];
              v101 = v100 * fmaxf(v99 - v19, 0.0);
              v51 = v101 / (float)((float)(v93 + v94) - v101);
            }
          }
        }
      }
      if (v51 <= 0.3)
        v16 = *(float **)(a2 + 168);
    }
    else
    {
      for (i = v16 + 6; i != v17; i += 6)
      {
        v57 = v16[2];
        v58 = v16[3];
        v59 = i[2];
        v60 = i[3];
        _NF = v58 < 0.0 || v57 < 0.0;
        v62 = v57 * v58;
        if (_NF)
          v62 = 0.0;
        v63 = v60 < 0.0 || v59 < 0.0;
        v64 = v59 * v60;
        if (v63)
          v64 = 0.0;
        if (v62 < v64)
          v16 = i;
      }
    }
    if (v16 != v17)
    {
      v65 = *(_QWORD *)v16;
      v66 = *((_QWORD *)v16 + 1);
      v67 = *((_QWORD *)v16 + 2);
      *(_OWORD *)lhs = *(_OWORD *)(a2 + 36);
      *(_QWORD *)&lhs[16] = *(_QWORD *)(a2 + 52);
      buf.columns[0].i64[0] = v65;
      buf.columns[0].i64[1] = v66;
      buf.columns[1].i64[0] = v67;
      CMTimeMakeWithSeconds((CMTime *)rhs, 0.0500000007, 1000);
      CMTimeAdd((CMTime *)&buf.columns[1].u32[2], (CMTime *)lhs, (CMTime *)rhs);
      v68.i64[0] = v65;
      v517 = v67;
      v69 = *(unsigned __int8 *)(a1 + 1336);
      *v15 = (float32x4_t)buf.columns[0];
      *(_QWORD *)(a1 + 1304) = buf.columns[1].i64[0];
      *(simd_float3 *)(a1 + 1312) = *(simd_float3 *)((char *)&buf.columns[1] + 8);
      *(_QWORD *)(a1 + 1328) = buf.columns[2].i64[1];
      if (!v69)
        *(_BYTE *)(a1 + 1336) = 1;
      v55 = 0;
      v68.i64[1] = v66;
      v523 = v68;
LABEL_83:
      v70 = 1;
      goto LABEL_88;
    }
    v523 = 0u;
    v70 = 0;
    if (*(_BYTE *)(a1 + 1336))
      *(_BYTE *)(a1 + 1336) = 0;
  }
  v55 = 1;
  v517 = 0;
LABEL_88:
  v71 = (float32x4_t *)(a1 + 728);
  if (!*(_BYTE *)(a1 + 1280))
  {
    v72 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v72 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v73 = (id)qword_1EF921280;
    v74 = v73;
    if ((v55 & 1) != 0)
    {
      if (os_log_type_enabled(v73, OS_LOG_TYPE_DEBUG))
      {
        buf.columns[0].i16[0] = 0;
        _os_log_debug_impl(&dword_1C9870000, v74, OS_LOG_TYPE_DEBUG, "No face to track.", (uint8_t *)&buf, 2u);
      }

      goto LABEL_94;
    }
    if (os_log_type_enabled(v73, OS_LOG_TYPE_INFO))
    {
      buf.columns[0].i16[0] = 0;
      _os_log_impl(&dword_1C9870000, v74, OS_LOG_TYPE_INFO, "Tracking a new face.", (uint8_t *)&buf, 2u);
    }

    if (*(_BYTE *)(a1 + 1280))
    {
      v87 = *(void **)(a1 + 984);
      if (v87)
      {
        *(_QWORD *)(a1 + 992) = v87;
        operator delete(v87);
      }
      *(_BYTE *)(a1 + 1280) = 0;
    }
    *(_QWORD *)(a1 + 744) = 0x3FD3333333333333;
    *(_BYTE *)(a1 + 776) = 0;
    *(_BYTE *)(a1 + 784) = 0;
    v71->i64[0] = 0;
    *(_QWORD *)(a1 + 736) = 0;
    v88 = (__int128 *)MEMORY[0x1E0CA2E18];
    v89 = *MEMORY[0x1E0CA2E18];
    *(_OWORD *)(a1 + 752) = *MEMORY[0x1E0CA2E18];
    v90 = *((_QWORD *)v88 + 2);
    *(_QWORD *)(a1 + 768) = v90;
    *(_QWORD *)(a1 + 792) = 0;
    *(_QWORD *)(a1 + 896) = 0x3FA999999999999ALL;
    *(_BYTE *)(a1 + 928) = 0;
    *(_BYTE *)(a1 + 936) = 0;
    *(_OWORD *)(a1 + 800) = 0u;
    *(_OWORD *)(a1 + 816) = 0u;
    *(_OWORD *)(a1 + 832) = 0u;
    *(_OWORD *)(a1 + 848) = 0u;
    *(_OWORD *)(a1 + 864) = 0u;
    *(_OWORD *)(a1 + 880) = 0u;
    *(_QWORD *)(a1 + 920) = v90;
    *(_OWORD *)(a1 + 904) = v89;
    *(_BYTE *)(a1 + 944) = 1;
    *(_DWORD *)(a1 + 976) = 0;
    *(_QWORD *)(a1 + 952) = 0x3FF0000000000000;
    *(_OWORD *)(a1 + 984) = 0u;
    *(_OWORD *)(a1 + 1000) = 0u;
    sub_1C98A477C((void **)(a1 + 984), 0x25uLL);
    v91 = *(_QWORD *)(a1 + 984);
    v92 = vshrq_n_s64(vsubq_s64(*(int64x2_t *)(a1 + 992), vdupq_n_s64(v91)), 4uLL);
    v92.i64[0] *= 0xAAAAAAAAAAAAAAABLL;
    if (0xAAAAAAAAAAAAAAABLL * v92.i64[1] <= v92.i64[0])
    {
      if (0xAAAAAAAAAAAAAAABLL * v92.i64[1] < v92.i64[0])
        *(_QWORD *)(a1 + 992) = v91 + 16 * v92.i64[1];
    }
    else
    {
      sub_1C98A477C((void **)(a1 + 984), 0xAAAAAAAAAAAAAAABLL * v92.i64[1] - v92.i64[0]);
    }
    *(_QWORD *)(a1 + 1016) = 0x400000003EAAAAABLL;
    *(_QWORD *)(a1 + 1024) = 0;
    v102 = *v88;
    *(_OWORD *)(a1 + 1032) = *v88;
    v103 = *((_QWORD *)v88 + 2);
    *(_QWORD *)(a1 + 1048) = v103;
    *(_BYTE *)(a1 + 1056) = 0;
    *(_BYTE *)(a1 + 1064) = 0;
    *(_DWORD *)(a1 + 1072) = 0;
    *(_QWORD *)(a1 + 1088) = 0x3FF0000000000000;
    *(_BYTE *)(a1 + 1120) = 0;
    *(_BYTE *)(a1 + 1128) = 0;
    *(_DWORD *)(a1 + 1080) = 0;
    *(_OWORD *)(a1 + 1096) = v102;
    *(_QWORD *)(a1 + 1112) = v103;
    *(_OWORD *)(a1 + 1136) = v102;
    *(_QWORD *)(a1 + 1152) = v103;
    *(_BYTE *)(a1 + 1160) = 0;
    *(_BYTE *)(a1 + 1168) = 0;
    *(_WORD *)(a1 + 1176) = 256;
    *(_BYTE *)(a1 + 1180) = 0;
    *(_BYTE *)(a1 + 1204) = 0;
    *(_DWORD *)(a1 + 1208) = 0;
    *(_QWORD *)(a1 + 1224) = 0x3FE0000000000000;
    *(_BYTE *)(a1 + 1256) = 0;
    *(_BYTE *)(a1 + 1264) = 0;
    *(_DWORD *)(a1 + 1216) = 0;
    *(_OWORD *)(a1 + 1232) = *v88;
    *(_QWORD *)(a1 + 1248) = *((_QWORD *)v88 + 2);
    *(_DWORD *)(a1 + 1272) = 1065353216;
    *(_BYTE *)(a1 + 1280) = 1;
  }
  v104 = *(float32x2_t *)(a2 + 64);
  v105 = vneg_f32(v104);
  v106 = atan2f(v105.f32[0], v105.f32[1]);
  if (*(_BYTE *)(a1 + 1341))
    v107 = sqrtf(vaddv_f32(vmul_f32(v104, v104))) / 0.069;
  else
    v107 = 1.0;
  v108 = *(_DWORD *)(a2 + 32);
  v575 = *(simd_float3 *)(a2 + 36);
  v576 = *(_QWORD *)(a2 + 52);
  if (!*(_BYTE *)(a1 + 1177))
  {
    v113 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v113 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v114 = (id)qword_1EF921280;
    if (!os_log_type_enabled(v114, OS_LOG_TYPE_ERROR))
      goto LABEL_150;
    buf.columns[0].i16[0] = 0;
    v115 = "Precondition violated: isValid()";
    goto LABEL_249;
  }
  if (v107 <= 0.0)
  {
    v116 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v116 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v114 = (id)qword_1EF921280;
    if (!os_log_type_enabled(v114, OS_LOG_TYPE_ERROR))
      goto LABEL_150;
    buf.columns[0].i16[0] = 0;
    v115 = "Precondition violated: faceDistanceFadeoutThresholdsMultiplier > 0.f";
LABEL_249:
    _os_log_error_impl(&dword_1C9870000, v114, OS_LOG_TYPE_ERROR, v115, (uint8_t *)&buf, 2u);
LABEL_150:

    v117 = 1;
    v84 = 2;
    goto LABEL_151;
  }
  if (v55)
  {
    v109 = *(unsigned __int8 *)(a1 + 1204);
    goto LABEL_135;
  }
  *(_QWORD *)(a1 + 744) = 0x3FD3333333333333;
  buf.columns[0] = v575;
  buf.columns[1].i64[0] = v576;
  v122 = sub_1C98896B0(a1 + 752, (__int128 *)&buf);
  v124 = v122 != 0;
  if (v122)
  {
    v125 = v122;
    v126 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v126 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v84 = (2 * v124);
    v127 = (id)qword_1EF921280;
    if (os_log_type_enabled(v127, OS_LOG_TYPE_ERROR))
    {
      v265 = off_1E8296478[v125 - 1];
      if ((v84 - 1) > 6)
        v266 = "Success, no error";
      else
        v266 = off_1E8296478[(v84 - 1)];
      *(_DWORD *)v573 = 136315394;
      *(_QWORD *)&v573[4] = v265;
      *(_WORD *)&v573[12] = 2080;
      *(_QWORD *)&v573[14] = v266;
      _os_log_error_impl(&dword_1C9870000, v127, OS_LOG_TYPE_ERROR, "Running m_timeDiff.update(timestamp) failed with %s, returning %s", v573, 0x16u);
    }

    v128 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v128 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v129 = (id)qword_1EF921280;
    if (os_log_type_enabled(v129, OS_LOG_TYPE_ERROR))
    {
      v267 = off_1E8296478[(v84 - 1)];
      buf.columns[0].i32[0] = 136315394;
      *(uint64_t *)((char *)buf.columns[0].i64 + 4) = (uint64_t)v267;
      buf.columns[0].i16[6] = 2080;
      *(uint64_t *)((char *)&buf.columns[0].i64[1] + 6) = (uint64_t)v267;
      _os_log_error_impl(&dword_1C9870000, v129, OS_LOG_TYPE_ERROR, "Running m_normalizedPosition.update(face->normalizedPosition, timestamp) failed with %s, returning %s", (uint8_t *)&buf, 0x16u);
    }
    goto LABEL_245;
  }
  if (*(_BYTE *)(a1 + 784))
  {
    v158 = *(double *)(a1 + 744);
    v159 = 1.0;
    if (v158 > 0.0)
      v159 = 1.0 - exp(-*(double *)(a1 + 776) / v158);
    v160 = v523;
    v161 = vaddq_f32(vmulq_n_f32(*v71, 1.0 - v159), vmulq_n_f32(v523, v159));
  }
  else
  {
    v160 = v523;
    v161 = v523;
  }
  *v71 = v161;
  *(_QWORD *)(a1 + 1224) = 0x3FE0000000000000;
  v123.f32[0] = v160.f32[0] + vmuls_lane_f32(0.5, v160, 2);
  v180 = v123;
  v180.i32[1] = v160.i32[1];
  *(float32x4_t *)logb = v180;
  v123.f32[1] = v160.f32[1] + v160.f32[3];
  v524 = v123;
  __asm { FMOV            V0.4S, #1.0 }
  v182.i64[1] = _Q0.i64[1];
  v182.i32[0] = v160.i32[0];
  *(float *)&v183 = v160.f32[0] + v160.f32[2];
  v182.f32[1] = v160.f32[1] + vmuls_lane_f32(0.5, v160, 3);
  v184 = (int32x4_t)vmulq_f32(v182, v182);
  v184.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v184, 2), vadd_f32(*(float32x2_t *)v184.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v184.i8, 1))).u32[0];
  v185 = vrsqrte_f32((float32x2_t)v184.u32[0]);
  v186 = vmul_f32(v185, vrsqrts_f32((float32x2_t)v184.u32[0], vmul_f32(v185, v185)));
  _Q0.i64[0] = __PAIR64__(v182.u32[1], v183);
  v187 = (int32x4_t)vmulq_f32(_Q0, _Q0);
  v187.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v187, 2), vadd_f32(*(float32x2_t *)v187.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v187.i8, 1))).u32[0];
  v188 = vrsqrte_f32((float32x2_t)v187.u32[0]);
  v189 = vmul_f32(v188, vrsqrts_f32((float32x2_t)v187.u32[0], vmul_f32(v188, v188)));
  v190 = vmulq_f32(vmulq_n_f32(v182, vmul_f32(v186, vrsqrts_f32((float32x2_t)v184.u32[0], vmul_f32(v186, v186))).f32[0]), vmulq_n_f32(_Q0, vmul_f32(v189, vrsqrts_f32((float32x2_t)v187.u32[0], vmul_f32(v189, v189))).f32[0]));
  v191 = acosf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v190, 2), vaddq_f32(v190, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v190.f32, 1))).f32[0]);
  v192 = *(float32x4_t *)logb;
  v192.i32[2] = 1.0;
  v193 = (int32x4_t)vmulq_f32(v192, v192);
  v194 = v192;
  v193.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v193, 2), vadd_f32(*(float32x2_t *)v193.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v193.i8, 1))).u32[0];
  *(float32x2_t *)v192.f32 = vrsqrte_f32((float32x2_t)v193.u32[0]);
  *(float32x2_t *)v192.f32 = vmul_f32(*(float32x2_t *)v192.f32, vrsqrts_f32((float32x2_t)v193.u32[0], vmul_f32(*(float32x2_t *)v192.f32, *(float32x2_t *)v192.f32)));
  v195 = vmulq_n_f32(v194, vmul_f32(*(float32x2_t *)v192.f32, vrsqrts_f32((float32x2_t)v193.u32[0], vmul_f32(*(float32x2_t *)v192.f32, *(float32x2_t *)v192.f32))).f32[0]);
  v196 = v524;
  v196.i32[2] = 1.0;
  v197 = (int32x4_t)vmulq_f32(v196, v196);
  v198 = v196;
  v197.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v197, 2), vadd_f32(*(float32x2_t *)v197.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v197.i8, 1))).u32[0];
  *(float32x2_t *)v196.f32 = vrsqrte_f32((float32x2_t)v197.u32[0]);
  *(float32x2_t *)v196.f32 = vmul_f32(*(float32x2_t *)v196.f32, vrsqrts_f32((float32x2_t)v197.u32[0], vmul_f32(*(float32x2_t *)v196.f32, *(float32x2_t *)v196.f32)));
  v199 = vmulq_f32(v195, vmulq_n_f32(v198, vmul_f32(*(float32x2_t *)v196.f32, vrsqrts_f32((float32x2_t)v197.u32[0], vmul_f32(*(float32x2_t *)v196.f32, *(float32x2_t *)v196.f32))).f32[0]));
  v200 = acosf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v199, 2), vaddq_f32(v199, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v199.f32, 1))).f32[0]);
  if (v191 >= v200)
    v200 = v191;
  *(_DWORD *)v573 = fminf(10.0 / tanf(v200 * 0.5), 1000.0);
  *(simd_float3 *)lhs = v575;
  *(_QWORD *)&lhs[16] = v576;
  v201 = sub_1C98A5008(a1 + 1216, (float *)v573, (uint64_t)lhs);
  v202 = v201 - 1;
  if (v201 == 1)
    v84 = 2;
  else
    v84 = v201;
  if (v201)
  {
    v203 = v201;
    v204 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v204 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v129 = (id)qword_1EF921280;
    if (!os_log_type_enabled(v129, OS_LOG_TYPE_ERROR))
    {
LABEL_245:

      v117 = v84;
      if (!(_DWORD)v84)
      {
        if (*(_BYTE *)(a1 + 1177))
          goto LABEL_94;
        goto LABEL_268;
      }
LABEL_151:
      v118 = atomic_load((unsigned __int8 *)&qword_1EF921288);
      if ((v118 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
      {
        qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
        __cxa_guard_release(&qword_1EF921288);
      }
      v119 = (id)qword_1EF921280;
      if (os_log_type_enabled(v119, OS_LOG_TYPE_ERROR))
      {
        if (v117 > 7)
          v162 = "Success, no error";
        else
          v162 = off_1E8296478[v117 - 1];
        if (v84 > 7)
          v164 = "Success, no error";
        else
          v164 = off_1E8296478[(v84 - 1)];
        buf.columns[0].i32[0] = 136315394;
        *(uint64_t *)((char *)buf.columns[0].i64 + 4) = (uint64_t)v162;
        buf.columns[0].i16[6] = 2080;
        *(uint64_t *)((char *)&buf.columns[0].i64[1] + 6) = (uint64_t)v164;
        _os_log_error_impl(&dword_1C9870000, v119, OS_LOG_TYPE_ERROR, "Running m_trackedFace->update(facePosition, data.correctionEnabled(), uprightFaceRollAngle, distanceThresholdsMultiplier, data.timestamp()) failed with %s, returning %s", (uint8_t *)&buf, 0x16u);
      }

      v120 = atomic_load((unsigned __int8 *)&qword_1EF921288);
      if ((v120 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
      {
        qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
        __cxa_guard_release(&qword_1EF921288);
      }
      v121 = (id)qword_1EF921280;
      if (os_log_type_enabled(v121, OS_LOG_TYPE_ERROR))
      {
        if (v84 > 7)
          v163 = "Success, no error";
        else
          v163 = off_1E8296478[(v84 - 1)];
        buf.columns[0].i32[0] = 136315394;
        *(uint64_t *)((char *)buf.columns[0].i64 + 4) = (uint64_t)v163;
        buf.columns[0].i16[6] = 2080;
        *(uint64_t *)((char *)&buf.columns[0].i64[1] + 6) = (uint64_t)v163;
        _os_log_error_impl(&dword_1C9870000, v121, OS_LOG_TYPE_ERROR, "Running updateFacePositionAndFadeout(data) failed with %s, returning %s", (uint8_t *)&buf, 0x16u);
      }
      goto LABEL_289;
    }
    if (v203 > 7)
      v277 = "Success, no error";
    else
      v277 = off_1E8296478[v202];
    if (v84 > 7)
      v290 = "Success, no error";
    else
      v290 = off_1E8296478[(v84 - 1)];
    buf.columns[0].i32[0] = 136315394;
    *(uint64_t *)((char *)buf.columns[0].i64 + 4) = (uint64_t)v277;
    buf.columns[0].i16[6] = 2080;
    *(uint64_t *)((char *)&buf.columns[0].i64[1] + 6) = (uint64_t)v290;
    v291 = "Running m_distanceCm.update(distance_cm, timestamp) failed with %s, returning %s";
LABEL_392:
    _os_log_error_impl(&dword_1C9870000, v129, OS_LOG_TYPE_ERROR, v291, (uint8_t *)&buf, 0x16u);
    goto LABEL_245;
  }
  *(simd_float3 *)rhs = v575;
  *(_QWORD *)&rhs[16] = v576;
  v205 = sub_1C98896B0(a1 + 1136, (__int128 *)rhs);
  if (v205)
  {
    v84 = 2 * (v205 != 0);
    sub_1C98A5610();
    v129 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v129, OS_LOG_TYPE_ERROR))
      goto LABEL_245;
    if ((v84 - 1) > 6)
      v293 = "Success, no error";
    else
      v293 = off_1E8296478[(v84 - 1)];
    buf.columns[0].i32[0] = 136315394;
    *(uint64_t *)((char *)buf.columns[0].i64 + 4) = (uint64_t)"Precondition was violated";
    buf.columns[0].i16[6] = 2080;
    *(uint64_t *)((char *)&buf.columns[0].i64[1] + 6) = (uint64_t)v293;
    v291 = "Running m_timeDiff.update(timestamp) failed with %s, returning %s";
    goto LABEL_392;
  }
  if (!*(_BYTE *)(a1 + 1168))
  {
    if (*(_BYTE *)(a1 + 1204))
    {
      v109 = 1;
      goto LABEL_135;
    }
LABEL_336:
    v109 = 0;
    *(_QWORD *)(a1 + 792) = v517;
    goto LABEL_135;
  }
  for (j = *(float *)(a1 + 792) - *(float *)&v517; j > 180.0; j = j + -360.0)
    ;
  for (; j < -180.0; j = j + 360.0)
    ;
  v262 = fabsf(j);
  if (v262 <= 75.0)
  {
    if (*(_BYTE *)(a1 + 1204))
      *(_BYTE *)(a1 + 1204) = 0;
    goto LABEL_336;
  }
  sub_1C98A5610();
  v263 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v263, OS_LOG_TYPE_DEFAULT))
  {
    buf.columns[0].i32[0] = 134218240;
    *(double *)((char *)buf.columns[0].i64 + 4) = v262;
    buf.columns[0].i16[6] = 2048;
    *(uint64_t *)((char *)&buf.columns[0].i64[1] + 6) = 0x4052C00000000000;
    _os_log_impl(&dword_1C9870000, v263, OS_LOG_TYPE_DEFAULT, "Roll angle diff (%f) was larger than expected (%f)", (uint8_t *)&buf, 0x16u);
  }

  v109 = 1;
  if (!*(_BYTE *)(a1 + 1204))
  {
    *(simd_float3 *)(a1 + 1180) = v575;
    *(_QWORD *)(a1 + 1196) = v576;
    *(_BYTE *)(a1 + 1204) = 1;
  }
LABEL_135:
  if (v109)
  {
    if (!*(_BYTE *)(a1 + 1176))
    {
      *(simd_float3 *)v550 = v575;
      *(_QWORD *)&v550[16] = v576;
      v545 = *(CMTime *)(a1 + 1180);
      CMTimeSubtract((CMTime *)time, (CMTime *)v550, &v545);
      if (CMTimeGetSeconds((CMTime *)time) >= 0.25)
      {
        sub_1C98A5610();
        v110 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v110, OS_LOG_TYPE_DEFAULT))
        {
          buf.columns[0].i16[0] = 0;
          _os_log_impl(&dword_1C9870000, v110, OS_LOG_TYPE_DEFAULT, "Roll angle did not recover. Disabling correction.", (uint8_t *)&buf, 2u);
        }

        *(_BYTE *)(a1 + 1176) = 1;
      }
    }
  }
  *(float *)(a1 + 1208) = roundf((float)(v106 / 0.017453) / 90.0) * 90.0;
  *(float *)(a1 + 1272) = v107;
  v111 = v70 ^ 1;
  if (v108)
    v111 = 1;
  v112 = (v111 & 1) == 0 && *(_BYTE *)(a1 + 1176) == 0;
  buf.columns[0] = v575;
  buf.columns[1].i64[0] = v576;
  if (sub_1C98896B0(a1 + 1032, (__int128 *)&buf))
  {
    v130 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v130 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v131 = qword_1EF921280;
    if (os_log_type_enabled((os_log_t)qword_1EF921280, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v573 = 136315394;
      *(_QWORD *)&v573[4] = "Precondition was violated";
      *(_WORD *)&v573[12] = 2080;
      *(_QWORD *)&v573[14] = "Assertion failed";
      _os_log_error_impl(&dword_1C9870000, v131, OS_LOG_TYPE_ERROR, "Running m_timeDiff.update(timestamp) failed with %s, returning %s", v573, 0x16u);
      v264 = atomic_load((unsigned __int8 *)&qword_1EF921288);
      if ((v264 & 1) != 0)
        goto LABEL_168;
    }
    else
    {
      v132 = atomic_load((unsigned __int8 *)&qword_1EF921288);
      if ((v132 & 1) != 0)
      {
LABEL_168:
        v133 = (id)qword_1EF921280;
        if (os_log_type_enabled(v133, OS_LOG_TYPE_ERROR))
        {
          buf.columns[0].i32[0] = 136315394;
          *(uint64_t *)((char *)buf.columns[0].i64 + 4) = (uint64_t)"Assertion failed";
          buf.columns[0].i16[6] = 2080;
          *(uint64_t *)((char *)&buf.columns[0].i64[1] + 6) = (uint64_t)"Assertion failed";
          _os_log_error_impl(&dword_1C9870000, v133, OS_LOG_TYPE_ERROR, "Running m_trackingTimedSmoothStep.update(successfulTracking, timestamp) failed with %s, returning %s", (uint8_t *)&buf, 0x16u);
        }

        v84 = 2;
        v117 = 2;
        goto LABEL_151;
      }
    }
    if (__cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    goto LABEL_168;
  }
  if (*(_BYTE *)(a1 + 1064))
  {
    v136 = *(double *)(a1 + 1056);
    v137 = 0.0;
    if (v112)
      v137 = *(float *)(a1 + 1024) + v136;
    *(float *)(a1 + 1024) = v137;
    v138 = v136 / *(float *)(a1 + 1020);
    v139 = *(float *)(a1 + 1028);
    v140 = fmaxf(v139 - v138, 0.0);
    v141 = fminf(v138 + v139, 1.0);
    if (v137 >= *(float *)(a1 + 1016))
      v140 = v141;
    *(float *)(a1 + 1028) = v140;
  }
  if (*(_BYTE *)(a1 + 1176))
  {
    v142 = sub_1C98A48FC((float *)(a1 + 728));
    v144 = *(_DWORD *)(a1 + 1012);
    if (v144)
    {
      if (v144 < 1)
      {
        v147 = 0uLL;
      }
      else
      {
        v145 = *(_DWORD *)(a1 + 1008);
        v146 = *(_QWORD *)(a1 + 984);
        v147 = 0uLL;
        v148 = *(_DWORD *)(a1 + 1012);
        do
        {
          v143 = *(float32x4_t *)(v146 + 48 * v145);
          v147 = vaddq_f32(v147, v143);
          v145 = (v145 + 1) % (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 992) - v146) >> 4));
          --v148;
        }
        while (v148);
      }
      v143.f32[0] = (float)v144;
      v206 = vdivq_f32(v147, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v143.f32, 0));
    }
    else
    {
      v206.i64[0] = 0;
      v206.i32[2] = 0;
    }
    v210 = (float)(fabsf(v206.f32[2]) + -30.0) / 15.0;
    v211 = 1.0 - v210;
    if (v210 > 1.0)
      v211 = 0.0;
    v212 = vdiv_f32(vadd_f32(vabs_f32(*(float32x2_t *)v206.f32), (float32x2_t)0xC1600000C1F00000), (float32x2_t)0x4160000041700000);
    __asm { FMOV            V7.2S, #1.0 }
    v214 = (float32x2_t)vbsl_s8((int8x8_t)vcltz_f32(v212), (int8x8_t)_D7, vbic_s8((int8x8_t)vsub_f32(_D7, v212), (int8x8_t)vcgt_f32(v212, _D7)));
    LODWORD(v215) = vmul_lane_f32(v214, v214, 1).u32[0];
    if (v210 >= 0.0)
      v216 = v211;
    else
      v216 = 1.0;
    v217 = v142 * (float)(v216 * v215);
    v218 = (float)(*(float *)(a1 + 1080) + -0.1875) * 8.0;
    v219 = 1.0 - v218;
    if (v218 > 1.0)
      v219 = 0.0;
    if (v218 >= 0.0)
      v220 = v219;
    else
      v220 = 1.0;
    v209 = v217 * v220;
  }
  else
  {
    if (v112)
    {
      *(_BYTE *)(a1 + 1177) = 1;
      goto LABEL_94;
    }
    v207 = *(float *)(a1 + 1028) + *(float *)(a1 + 1028);
    _NF = v207 < 1.0;
    v208 = (float)((float)((float)(v207 + -1.0) * (float)((float)(v207 + -1.0) + -2.0)) + -1.0) * -0.5;
    v209 = v207 * (float)(v207 * 0.5);
    if (!_NF)
      v209 = v208;
  }
  *(_BYTE *)(a1 + 1177) = v209 > 0.0;
  if (v209 <= 0.0)
  {
LABEL_268:
    v221 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v221 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v222 = (id)qword_1EF921280;
    if (os_log_type_enabled(v222, OS_LOG_TYPE_INFO))
    {
      buf.columns[0].i16[0] = 0;
      _os_log_impl(&dword_1C9870000, v222, OS_LOG_TYPE_INFO, "Deleting tracked face.", (uint8_t *)&buf, 2u);
    }

    if (*(_BYTE *)(a1 + 1280))
    {
      v223 = *(void **)(a1 + 984);
      if (v223)
      {
        *(_QWORD *)(a1 + 992) = v223;
        operator delete(v223);
      }
      *(_BYTE *)(a1 + 1280) = 0;
    }
    goto LABEL_275;
  }
LABEL_94:
  if (!*(_BYTE *)(a1 + 1280))
  {
LABEL_275:
    if (!cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)(a2 + 16), CFSTR("DrawDebugLandmarksAndBBoxes")))goto LABEL_352;
    cva::DictionaryHandler::item((cva::DictionaryHandler *)(a2 + 16), CFSTR("DrawDebugLandmarksAndBBoxes"));
    v224 = cva::ItemHandler::getValue<BOOL>();
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&buf);
    if (!v224)
      goto LABEL_352;
    v225 = sub_1C988EC10((_QWORD *)a1, (CVPixelBufferRef *)a2);
    v226 = v225;
    v227 = v225 - 1;
    if (v225 == 1)
      v84 = 2;
    else
      v84 = v225;
    if (v225)
    {
      v228 = atomic_load((unsigned __int8 *)&qword_1EF921288);
      if ((v228 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
      {
        qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
        __cxa_guard_release(&qword_1EF921288);
      }
      v121 = (id)qword_1EF921280;
      if (os_log_type_enabled(v121, OS_LOG_TYPE_ERROR))
      {
        if (v226 > 7)
          v270 = "Success, no error";
        else
          v270 = off_1E8296478[v227];
        if (v84 > 7)
          v273 = "Success, no error";
        else
          v273 = off_1E8296478[(v84 - 1)];
        buf.columns[0].i32[0] = 136315394;
        *(uint64_t *)((char *)buf.columns[0].i64 + 4) = (uint64_t)v270;
        buf.columns[0].i16[6] = 2080;
        *(uint64_t *)((char *)&buf.columns[0].i64[1] + 6) = (uint64_t)v273;
        _os_log_error_impl(&dword_1C9870000, v121, OS_LOG_TYPE_ERROR, "Running setupYCrCbTextures(data) failed with %s, returning %s", (uint8_t *)&buf, 0x16u);
      }
    }
    else
    {
      v229 = sub_1C988F2C0(a1, a2);
      v230 = v229;
      v231 = v229 - 1;
      if (v229 == 1)
        v84 = 2;
      else
        v84 = v229;
      if (!v229)
        goto LABEL_352;
      sub_1C98A5610();
      v121 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v121, OS_LOG_TYPE_ERROR))
      {
        if (v230 > 7)
          v285 = "Success, no error";
        else
          v285 = off_1E8296478[v231];
        if (v84 > 7)
          v292 = "Success, no error";
        else
          v292 = off_1E8296478[(v84 - 1)];
        buf.columns[0].i32[0] = 136315394;
        *(uint64_t *)((char *)buf.columns[0].i64 + 4) = (uint64_t)v285;
        buf.columns[0].i16[6] = 2080;
        *(uint64_t *)((char *)&buf.columns[0].i64[1] + 6) = (uint64_t)v292;
        _os_log_error_impl(&dword_1C9870000, v121, OS_LOG_TYPE_ERROR, "Running drawInputData(data) failed with %s, returning %s", (uint8_t *)&buf, 0x16u);
      }
    }
LABEL_289:

    goto LABEL_353;
  }
  if (!*(_BYTE *)(a1 + 1177))
  {
    v134 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v134 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v135 = (id)qword_1EF921280;
    if (os_log_type_enabled(v135, OS_LOG_TYPE_ERROR))
    {
      buf.columns[0].i16[0] = 0;
      _os_log_error_impl(&dword_1C9870000, v135, OS_LOG_TYPE_ERROR, "Assertion failed: m_trackedFace->isValid()", (uint8_t *)&buf, 2u);
    }

    goto LABEL_175;
  }
  v75 = *(float32x4_t *)(a2 + 80);
  v76 = *(float32x4_t *)(a2 + 96);
  v77 = *(_OWORD *)(a2 + 112);
  v78 = vadd_f32(*(float32x2_t *)&v77, (float32x2_t)*(_OWORD *)&vmlaq_lane_f32(vmulq_n_f32(v75, COERCE_FLOAT(*v71)), v76, *(float32x2_t *)v71->f32, 1));
  v79 = vsub_f32(vadd_f32(*(float32x2_t *)&v77, (float32x2_t)*(_OWORD *)&vmlaq_lane_f32(vmulq_n_f32(v75, vaddq_f32(*v71, (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)v71, 2)).f32[0]), v76, (float32x2_t)*(_OWORD *)&vaddq_f32(*v71, (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)v71, 3)), 1)), v78);
  v80 = vadd_f32(v78, (float32x2_t)0x3F0000003F000000);
  v530 = v80;
  v531 = v79;
  if (sub_1C98A48FC((float *)(a1 + 728)) <= 0.0)
  {
    if (*(_BYTE *)(a1 + 944))
      *(_BYTE *)(a1 + 944) = 0;
    v149 = (std::__shared_weak_count *)a4[1];
    v528 = *a4;
    v529 = v149;
    if (v149)
    {
      p_shared_owners = (unint64_t *)&v149->__shared_owners_;
      do
        v151 = __ldxr(p_shared_owners);
      while (__stxr(v151 + 1, p_shared_owners));
    }
    v152 = sub_1C988F9F4((float32x2_t *)a1, &v528, &v530, 0);
    v153 = v529;
    if (v529)
    {
      v154 = (unint64_t *)&v529->__shared_owners_;
      do
        v155 = __ldaxr(v154);
      while (__stlxr(v155 - 1, v154));
      if (!v155)
      {
        ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
        std::__shared_weak_count::__release_weak(v153);
      }
    }
    if (v152 == 1)
      v84 = 2;
    else
      v84 = v152;
    if (v152)
    {
      v156 = atomic_load((unsigned __int8 *)&qword_1EF921288);
      if ((v156 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
      {
        qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
        __cxa_guard_release(&qword_1EF921288);
      }
      v157 = (id)qword_1EF921280;
      if (os_log_type_enabled(v157, OS_LOG_TYPE_ERROR))
      {
        v274 = off_1E8296478[v152 - 1];
        v275 = off_1E8296478[(v84 - 1)];
        buf.columns[0].i32[0] = 136315394;
        *(uint64_t *)((char *)buf.columns[0].i64 + 4) = (uint64_t)v274;
        buf.columns[0].i16[6] = 2080;
        *(uint64_t *)((char *)&buf.columns[0].i64[1] + 6) = (uint64_t)v275;
        _os_log_error_impl(&dword_1C9870000, v157, OS_LOG_TYPE_ERROR, "Running writeDebugData(debugDictionary, bbox, false) failed with %s, returning %s", (uint8_t *)&buf, 0x16u);
      }
LABEL_351:

      goto LABEL_353;
    }
    if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)(a2 + 16), CFSTR("DrawDebugLandmarksAndBBoxes")))
    {
      cva::DictionaryHandler::item((cva::DictionaryHandler *)(a2 + 16), CFSTR("DrawDebugLandmarksAndBBoxes"));
      v165 = cva::ItemHandler::getValue<BOOL>();
      cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&buf);
      if (v165)
      {
        v166 = sub_1C988EC10((_QWORD *)a1, (CVPixelBufferRef *)a2);
        v167 = v166;
        v168 = v166 - 1;
        if (v166 == 1)
          v84 = 2;
        else
          v84 = v166;
        if (v166)
        {
          sub_1C98A5610();
          v157 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v157, OS_LOG_TYPE_ERROR))
          {
            if (v167 > 7)
              v297 = "Success, no error";
            else
              v297 = off_1E8296478[v168];
            if (v84 > 7)
              v299 = "Success, no error";
            else
              v299 = off_1E8296478[(v84 - 1)];
            buf.columns[0].i32[0] = 136315394;
            *(uint64_t *)((char *)buf.columns[0].i64 + 4) = (uint64_t)v297;
            buf.columns[0].i16[6] = 2080;
            *(uint64_t *)((char *)&buf.columns[0].i64[1] + 6) = (uint64_t)v299;
            _os_log_error_impl(&dword_1C9870000, v157, OS_LOG_TYPE_ERROR, "Running setupYCrCbTextures(data) failed with %s, returning %s", (uint8_t *)&buf, 0x16u);
          }
          goto LABEL_351;
        }
        v278 = sub_1C988F2C0(a1, a2);
        v279 = v278;
        v280 = v278 - 1;
        if (v278 == 1)
          v84 = 2;
        else
          v84 = v278;
        if (v278)
        {
          sub_1C98A5610();
          v157 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v157, OS_LOG_TYPE_ERROR))
          {
            if (v279 > 7)
              v310 = "Success, no error";
            else
              v310 = off_1E8296478[v280];
            if (v84 > 7)
              v311 = "Success, no error";
            else
              v311 = off_1E8296478[(v84 - 1)];
            buf.columns[0].i32[0] = 136315394;
            *(uint64_t *)((char *)buf.columns[0].i64 + 4) = (uint64_t)v310;
            buf.columns[0].i16[6] = 2080;
            *(uint64_t *)((char *)&buf.columns[0].i64[1] + 6) = (uint64_t)v311;
            _os_log_error_impl(&dword_1C9870000, v157, OS_LOG_TYPE_ERROR, "Running drawInputData(data) failed with %s, returning %s", (uint8_t *)&buf, 0x16u);
          }
          goto LABEL_351;
        }
      }
    }
LABEL_352:
    v84 = 0;
    goto LABEL_353;
  }
  kdebug_trace();
  v81 = sub_1C988EC10((_QWORD *)a1, (CVPixelBufferRef *)a2);
  v82 = v81;
  v83 = v81 - 1;
  if (v81 == 1)
    v84 = 2;
  else
    v84 = v81;
  if (v81)
  {
    v85 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v85 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v86 = (id)qword_1EF921280;
    if (os_log_type_enabled(v86, OS_LOG_TYPE_ERROR))
    {
      if (v82 > 7)
        v276 = "Success, no error";
      else
        v276 = off_1E8296478[v83];
      if (v84 > 7)
        v289 = "Success, no error";
      else
        v289 = off_1E8296478[(v84 - 1)];
      buf.columns[0].i32[0] = 136315394;
      *(uint64_t *)((char *)buf.columns[0].i64 + 4) = (uint64_t)v276;
      buf.columns[0].i16[6] = 2080;
      *(uint64_t *)((char *)&buf.columns[0].i64[1] + 6) = (uint64_t)v289;
      _os_log_error_impl(&dword_1C9870000, v86, OS_LOG_TYPE_ERROR, "Running setupYCrCbTextures(data) failed with %s, returning %s", (uint8_t *)&buf, 0x16u);
    }
LABEL_424:

    kdebug_trace();
    goto LABEL_353;
  }
  kdebug_trace();
  v169 = objc_msgSend(*(id *)(a1 + 712), "width");
  v170 = v169;
  v171 = *(unsigned __int8 *)(a1 + 1340);
  v172 = *(float *)(a1 + 792);
  *(_QWORD *)rhs = &off_1E8295050;
  v536 = 0x3F80000000000000;
  v535 = 0;
  v537 = 0;
  v538 = 0x3F80000000000000;
  __asm { FMOV            V1.2S, #1.0 }
  v534 = _D1;
  v539 = 0;
  v540 = 0;
  *(_QWORD *)&rhs[8] = *(_QWORD *)(a2 + 184);
  v177 = *(_OWORD *)(a2 + 80);
  HIDWORD(v177) = *(_OWORD *)(a2 + 96);
  v178 = *(int8x16_t *)(a2 + 112);
  v179 = vextq_s8(vextq_s8(*(int8x16_t *)(a2 + 96), *(int8x16_t *)(a2 + 96), 0xCuLL), v178, 8uLL);
  *(_OWORD *)&rhs[16] = v177;
  v533 = v179;
  v534.i32[0] = v178.i32[2];
  v547 = 0;
  v548 = 0;
  v549 = 0;
  LODWORD(v545.value) = 0;
  *(float32x2_t *)&v177 = vadd_f32(v80, (float32x2_t)0xBF000000BF000000);
  *((float32x2_t *)&v177 + 1) = v79;
  *(_OWORD *)((char *)&v545.value + 4) = v177;
  *((float *)&v545.epoch + 1) = -v172;
  v546 = 1;
  *(_QWORD *)lhs = &off_1E8295050;
  *(_QWORD *)&lhs[8] = 0x100000001;
  *(_QWORD *)&lhs[20] = 0;
  *(_OWORD *)&lhs[28] = 0x3F80000000000000uLL;
  *(_DWORD *)&lhs[16] = 1065353216;
  *(_DWORD *)&lhs[44] = 0;
  *(_QWORD *)&v584[16] = 0x3F80000000000000;
  *(_QWORD *)&v584[8] = 0;
  *(_QWORD *)&v584[24] = 0;
  *(_QWORD *)&v584[32] = 0x3F80000000000000;
  *(int32x2_t *)v584 = _D1;
  v585 = 0;
  v586 = 0.0;
  *(_DWORD *)&time1[12] = 0;
  *(_QWORD *)&time1[4] = 0;
  *(_QWORD *)&time1[20] = 0;
  v582 = 0x3F80000000000000;
  *(_DWORD *)time1 = 1065353216;
  *(_DWORD *)&time1[16] = 1065353216;
  *(_DWORD *)&time2[12] = 0;
  *(_QWORD *)&time2[4] = 0;
  *(_QWORD *)&time2[20] = 0;
  v580 = 0x3F80000000000000;
  *(_DWORD *)time2 = 1065353216;
  *(_DWORD *)&time2[16] = 1065353216;
  v518 = v171;
  *(_QWORD *)&time[4] = 0;
  *(_DWORD *)time = 1065353216;
  *(_OWORD *)&time[12] = xmmword_1C99274A0;
  if (v171)
    sub_1C990D7F0(v169, (uint64_t)&v545, (uint64_t)time, rhs, (uint64_t)lhs, (uint64_t)time1, (uint64_t)time2);
  else
    sub_1C990D1FC(v169, (uint64_t)&v545, (uint64_t)time, (uint64_t)rhs, (uint64_t)lhs, (uint64_t)time1, (uint64_t)time2, COERCE_DOUBLE(1065353216), _D1);
  v575 = (simd_float3)xmmword_1C99274B0;
  v576 = 0;
  v577 = (float)(v170 - 1);
  v578 = 0x3F80000000000000;
  *(_OWORD *)v573 = xmmword_1C99274C0;
  *(_OWORD *)&v573[16] = xmmword_1C99274D0;
  v574 = 1065353216;
  v543[0] = xmmword_1C99274C0;
  v543[1] = xmmword_1C99274E0;
  v544 = 1065353216;
  *(_QWORD *)&v554[0] = v543;
  *((_QWORD *)&v554[0] + 1) = time1;
  *(_QWORD *)v550 = v554;
  *(_QWORD *)&v550[8] = &v575;
  *(_QWORD *)time = v550;
  *(_QWORD *)&time[8] = v573;
  memset(v541, 0, sizeof(v541));
  v542 = 0;
  sub_1C98A69F0((uint64_t)v541, (uint64_t *)time);
  v232 = *(_DWORD *)&lhs[16];
  *(_DWORD *)&lhs[16] = *(_DWORD *)&lhs[32];
  *(_DWORD *)&lhs[32] = v232;
  v233 = vrev64_s32(*(int32x2_t *)&lhs[8]);
  v234 = (float)(*(_DWORD *)&lhs[8] - 1) - *(float *)&lhs[40];
  *(_DWORD *)&lhs[40] = *(_DWORD *)&lhs[44];
  *(float *)&lhs[44] = v234;
  *(int32x2_t *)&lhs[8] = v233;
  *(_DWORD *)&time[20] = 0;
  *(_DWORD *)&time[8] = 0;
  *(_QWORD *)&time[24] = 0;
  v557 = 0;
  v556 = 1065353216;
  v558 = 0.0;
  *(_QWORD *)time = 0xBF80000000000000;
  *(_QWORD *)&time[12] = 1065353216;
  *(_OWORD *)&v550[12] = 0x3F80000000000000uLL;
  *(_QWORD *)&v550[4] = 0;
  *(_QWORD *)&v550[28] = 0x3F80000000000000;
  *(_DWORD *)v550 = 1065353216;
  v551 = 0;
  v552 = 0.0;
  *(_QWORD *)&v554[0] = time;
  *((_QWORD *)&v554[0] + 1) = &v584[4];
  sub_1C98A24C0((uint64_t)v550, (float **)v554);
  v553[0] = (float *)time;
  v553[1] = (float *)&v585;
  *(_QWORD *)((char *)v554 + 4) = 0;
  HIDWORD(v554[0]) = 0;
  sub_1C98A266C((float *)v554 + 1, v553);
  v551 = vadd_f32(*(float32x2_t *)((char *)v554 + 4), 0);
  v552 = *((float *)v554 + 3) + 0.0;
  *(_OWORD *)&v584[4] = *(_OWORD *)v550;
  *(_DWORD *)&v584[36] = *(_DWORD *)&v550[32];
  v585 = v551;
  *(_OWORD *)&v584[20] = *(_OWORD *)&v550[16];
  v586 = *((float *)v554 + 3) + 0.0;
  v235.i64[0] = *((_QWORD *)&v541[1] + 1);
  v235.i32[2] = v542;
  v562 = *(_OWORD *)&lhs[16];
  v563 = *(_OWORD *)&lhs[32];
  v564 = *(_DWORD *)v584;
  v566 = *(_DWORD *)&v550[32];
  v565[1] = *(_OWORD *)&v550[16];
  v565[0] = *(_OWORD *)v550;
  v568 = *((float *)v554 + 3) + 0.0;
  v567 = v551;
  buf.columns[0] = (simd_float3)v541[0];
  buf.columns[1] = *(simd_float3 *)((char *)v541 + 12);
  buf.columns[2] = v235;
  v560 = &off_1E8295050;
  v561 = v233;
  kdebug_trace();
  if (!*(_BYTE *)(a1 + 1280))
  {
    v259 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v259 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v236 = (id)qword_1EF921280;
    if (!os_log_type_enabled(v236, OS_LOG_TYPE_ERROR))
      goto LABEL_323;
    *(_WORD *)lhs = 0;
    v260 = "Precondition violated: m_trackedFace";
    goto LABEL_397;
  }
  if (!*(_QWORD *)(a1 + 192))
  {
    v268 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v268 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v236 = (id)qword_1EF921280;
    if (!os_log_type_enabled(v236, OS_LOG_TYPE_ERROR))
    {
LABEL_323:
      v269 = 1;
      v84 = 2;
LABEL_421:

      goto LABEL_422;
    }
    *(_WORD *)lhs = 0;
    v260 = "Precondition violated: m_textureY";
LABEL_397:
    v84 = 2;
    _os_log_error_impl(&dword_1C9870000, v236, OS_LOG_TYPE_ERROR, v260, lhs, 2u);
    v269 = 1;
    goto LABEL_421;
  }
  objc_msgSend(*(id *)(a1 + 184), "commandBuffer");
  v236 = objc_claimAutoreleasedReturnValue();
  -[NSObject setLabel:](v236, "setLabel:", CFSTR("ViewpointCorrectionProcessor::performCrops"));
  if (!v236)
  {
    v271 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v271 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v272 = (id)qword_1EF921280;
    if (os_log_type_enabled(v272, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)lhs = 0;
      _os_log_error_impl(&dword_1C9870000, v272, OS_LOG_TYPE_ERROR, "Could not create command buffer", lhs, 2u);
    }
    v84 = 6;
    goto LABEL_361;
  }
  -[NSObject enqueue](v236, "enqueue");
  v237 = v236;
  v238 = a1 + 8 * v518;
  v240 = *(void **)(v238 + 216);
  v239 = (id *)(v238 + 216);
  v241 = v240;
  if (!v241)
  {
    v282 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v282 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v283 = (id)qword_1EF921280;
    if (os_log_type_enabled(v283, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)lhs = 0;
      _os_log_error_impl(&dword_1C9870000, v283, OS_LOG_TYPE_ERROR, "Assertion failed: sampler", lhs, 2u);
    }

    v284 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v284 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v272 = (id)qword_1EF921280;
    if (os_log_type_enabled(v272, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)lhs = 136315394;
      *(_QWORD *)&lhs[4] = "Assertion failed";
      *(_WORD *)&lhs[12] = 2080;
      *(_QWORD *)&lhs[14] = "Assertion failed";
      _os_log_error_impl(&dword_1C9870000, v272, OS_LOG_TYPE_ERROR, "Running cropFace(commandBuffer, faceCropToImage, samplerMode) failed with %s, returning %s", lhs, 0x16u);
    }
    v84 = 2;
LABEL_361:

LABEL_420:
    v269 = v84;
    goto LABEL_421;
  }
  v242 = v241;
  v243 = *(_QWORD *)(a1 + 192);
  v244 = *(_QWORD *)(a1 + 712);
  *(_OWORD *)lhs = xmmword_1C99274F0;
  objc_msgSend(v241, "encodeToCommandBuffer:sourceTexture:transform:destinationTexture:destinationBoundingBox:", v237, v243, v244, lhs, *(double *)buf.columns[0].i64, *(double *)buf.columns[1].i64, *(double *)buf.columns[2].i64);

  v245 = *(id **)(a1 + 232);
  v246 = *(void **)(a1 + 712);
  v247 = *(id *)(a1 + 720);
  v525 = v237;
  v248 = v247;
  v249 = v246;
  v250 = v249;
  if (!v248)
  {
    v286 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v286 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v287 = (id)qword_1EF921280;
    if (!os_log_type_enabled(v287, OS_LOG_TYPE_ERROR))
      goto LABEL_412;
    *(_WORD *)time1 = 0;
    v288 = "Precondition violated: noiseTexture";
    goto LABEL_411;
  }
  if (!v249)
  {
    v294 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v294 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v287 = (id)qword_1EF921280;
    if (!os_log_type_enabled(v287, OS_LOG_TYPE_ERROR))
      goto LABEL_412;
    *(_WORD *)time1 = 0;
    v288 = "Precondition violated: ioTexture";
    goto LABEL_411;
  }
  if (objc_msgSend(v248, "pixelFormat") != 25)
  {
    v295 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v295 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v287 = (id)qword_1EF921280;
    if (!os_log_type_enabled(v287, OS_LOG_TYPE_ERROR))
      goto LABEL_412;
    *(_WORD *)time1 = 0;
    v288 = "Precondition violated: noiseTexture.pixelFormat == MTLPixelFormatR16Float";
    goto LABEL_411;
  }
  if (objc_msgSend(v250, "pixelFormat") != 25)
  {
    v296 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v296 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v287 = (id)qword_1EF921280;
    if (!os_log_type_enabled(v287, OS_LOG_TYPE_ERROR))
      goto LABEL_412;
    *(_WORD *)time1 = 0;
    v288 = "Precondition violated: ioTexture.pixelFormat == MTLPixelFormatR16Float";
    goto LABEL_411;
  }
  v251 = objc_msgSend(v250, "height");
  if (v251 != 2 * objc_msgSend(v245[3], "height"))
  {
    v298 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v298 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v287 = (id)qword_1EF921280;
    if (!os_log_type_enabled(v287, OS_LOG_TYPE_ERROR))
      goto LABEL_412;
    *(_WORD *)time1 = 0;
    v288 = "Precondition violated: ioTexture.height == 2 * m_intermediateTexture.height";
    goto LABEL_411;
  }
  v252 = objc_msgSend(v250, "width");
  if (v252 != objc_msgSend(v245[3], "width"))
  {
    v300 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v300 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v287 = (id)qword_1EF921280;
    if (!os_log_type_enabled(v287, OS_LOG_TYPE_ERROR))
      goto LABEL_412;
    *(_WORD *)time1 = 0;
    v288 = "Precondition violated: ioTexture.width == m_intermediateTexture.width";
LABEL_411:
    _os_log_error_impl(&dword_1C9870000, v287, OS_LOG_TYPE_ERROR, v288, time1, 2u);
LABEL_412:

    v84 = 2;
    LODWORD(v258) = 1;
LABEL_413:
    v301 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v301 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v302 = (id)qword_1EF921280;
    if (os_log_type_enabled(v302, OS_LOG_TYPE_ERROR))
    {
      v307 = off_1E8296478[(v258 - 1)];
      v308 = off_1E8296478[(v84 - 1)];
      *(_DWORD *)lhs = 136315394;
      *(_QWORD *)&lhs[4] = v307;
      *(_WORD *)&lhs[12] = 2080;
      *(_QWORD *)&lhs[14] = v308;
      _os_log_error_impl(&dword_1C9870000, v302, OS_LOG_TYPE_ERROR, "Running m_imageAugmenter->encodeToCommandBuffer(commandBuffer, m_faceCropNoise.texture(), jitterOffset, maxLumaChange, m_faceCrop.texture()) failed with %s, returning %s", lhs, 0x16u);
    }

    v303 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v303 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v304 = (id)qword_1EF921280;
    if (os_log_type_enabled(v304, OS_LOG_TYPE_ERROR))
    {
      v309 = off_1E8296478[(v84 - 1)];
      *(_DWORD *)lhs = 136315394;
      *(_QWORD *)&lhs[4] = v309;
      *(_WORD *)&lhs[12] = 2080;
      *(_QWORD *)&lhs[14] = v309;
      _os_log_error_impl(&dword_1C9870000, v304, OS_LOG_TYPE_ERROR, "Running augmentFace(commandBuffer) failed with %s, returning %s", lhs, 0x16u);
    }

    v236 = v525;
    goto LABEL_420;
  }
  -[NSObject computeCommandEncoder](v525, "computeCommandEncoder");
  v519 = (void *)objc_claimAutoreleasedReturnValue();
  if (v519)
  {
    *(_QWORD *)objc_msgSend(v245[1], "contents") = 0x3DCCCCCD00000005;
    objc_msgSend(v519, "setComputePipelineState:", v245[2]);
    objc_msgSend(v519, "setBuffer:offset:atIndex:", v245[1], 0, 0);
    objc_msgSend(v519, "setTexture:atIndex:", v250, 0);
    objc_msgSend(v519, "setTexture:atIndex:", v248, 1);
    objc_msgSend(v519, "setTexture:atIndex:", v245[3], 2);
    v253 = objc_msgSend(v245[2], "threadExecutionWidth");
    logc = objc_msgSend(v245[2], "maxTotalThreadsPerThreadgroup");
    v506 = objc_msgSend(v248, "width");
    v254 = objc_msgSend(v248, "height");
    *(_QWORD *)lhs = v506;
    *(_QWORD *)&lhs[8] = v254;
    *(_QWORD *)&lhs[16] = 1;
    *(_QWORD *)rhs = v253;
    *(_QWORD *)&rhs[8] = logc / v253;
    *(_QWORD *)&rhs[16] = 1;
    objc_msgSend(v519, "dispatchThreads:threadsPerThreadgroup:", lhs, rhs);
    objc_msgSend(v519, "endEncoding");
    -[NSObject blitCommandEncoder](v525, "blitCommandEncoder");
    log = objc_claimAutoreleasedReturnValue();
    v507 = objc_msgSend(v245[3], "height");
    v255 = objc_msgSend(v245[3], "width");
    v505 = objc_msgSend(v245[3], "height");
    v256 = objc_msgSend(v245[3], "depth");
    v257 = v245[3];
    memset(time, 0, 24);
    *(_QWORD *)v550 = v255;
    *(_QWORD *)&v550[8] = v505;
    *(_QWORD *)&v550[16] = v256;
    v545.value = 0;
    *(_QWORD *)&v545.timescale = v507;
    v545.epoch = 0;
    -[NSObject copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:](log, "copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:", v257, 0, 0, time, v550, v250, 0, 0, &v545);
    -[NSObject endEncoding](log, "endEncoding");
    v258 = 0;
  }
  else
  {
    sub_1C98A5610();
    log = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)time1 = 0;
      v258 = 2;
      _os_log_error_impl(&dword_1C9870000, log, OS_LOG_TYPE_ERROR, "Assertion failed: encoder", time1, 2u);
    }
    else
    {
      v258 = 2;
    }
  }

  v84 = v258;
  if ((_DWORD)v258)
    goto LABEL_413;
  if (*(_BYTE *)(a1 + 944))
  {
    v312 = vmla_f32(v530, v531, *(float32x2_t *)(a1 + 808));
    v313 = vmla_f32(v530, v531, *(float32x2_t *)(a1 + 816));
    v314 = vmla_f32(v530, v531, *(float32x2_t *)(a1 + 824));
    v315 = vmla_f32(v530, v531, *(float32x2_t *)(a1 + 832));
    v316 = vmla_f32(v530, v531, *(float32x2_t *)(a1 + 840));
    v317 = vmla_f32(v530, v531, *(float32x2_t *)(a1 + 848));
    v318 = vmla_f32(v530, v531, *(float32x2_t *)(a1 + 856));
    v319 = vmla_f32(v530, v531, *(float32x2_t *)(a1 + 864));
    v320 = vmla_f32(v530, v531, *(float32x2_t *)(a1 + 872));
    v321 = vmla_f32(v530, v531, *(float32x2_t *)(a1 + 880));
    v322 = vmla_f32(v530, v531, *(float32x2_t *)(a1 + 888));
    *(float32x2_t *)lhs = vmla_f32(v530, v531, *(float32x2_t *)(a1 + 800));
    *(float32x2_t *)&lhs[8] = v312;
    *(float32x2_t *)&lhs[16] = v313;
    *(float32x2_t *)&lhs[24] = v314;
    *(float32x2_t *)&lhs[32] = v315;
    *(float32x2_t *)&lhs[40] = v316;
    *(float32x2_t *)v584 = v317;
    *(float32x2_t *)&v584[8] = v318;
    *(float32x2_t *)&v584[16] = v319;
    *(float32x2_t *)&v584[24] = v320;
    *(float32x2_t *)&v584[32] = v321;
    v585 = v322;
    v323 = *(float32x2_t *)(a2 + 64);
    v489 = v525;
    v488 = *v239;
    if (!v488)
    {
      v433 = atomic_load((unsigned __int8 *)&qword_1EF921288);
      if ((v433 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
      {
        qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
        __cxa_guard_release(&qword_1EF921288);
      }
      v434 = (id)qword_1EF921280;
      if (os_log_type_enabled(v434, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)rhs = 0;
        _os_log_error_impl(&dword_1C9870000, v434, OS_LOG_TYPE_ERROR, "Assertion failed: sampler", rhs, 2u);
      }

      v84 = 2;
      v435 = 2;
      goto LABEL_485;
    }
    v588 = __invert_f3(buf);
    v508 = (float32x4_t)v588.columns[0];
    loga = (float32x4_t)v588.columns[2];
    v520 = (float32x4_t)v588.columns[1];
    v324 = (char *)operator new(0x60uLL);
    v325 = 0;
    *(_OWORD *)v324 = 0u;
    *((_OWORD *)v324 + 1) = 0u;
    *((_OWORD *)v324 + 2) = 0u;
    *((_OWORD *)v324 + 3) = 0u;
    *((_OWORD *)v324 + 4) = 0u;
    *((_OWORD *)v324 + 5) = 0u;
    do
    {
      v326 = (int32x4_t)vaddq_f32(loga, vmlaq_lane_f32(vmulq_n_f32(v508, COERCE_FLOAT(*(_QWORD *)&lhs[v325])), v520, *(float32x2_t *)&lhs[v325], 1));
      *(float32x2_t *)&v324[v325] = vdiv_f32(*(float32x2_t *)v326.i8, (float32x2_t)vdup_laneq_s32(v326, 2));
      v325 += 8;
    }
    while (v325 != 96);
    __p = v324;
    *(float *)v327.i32 = (float)(int)objc_msgSend(*(id *)(a1 + 712), "width") * 0.5;
    v328 = (float32x2_t)vdupq_lane_s32(v327, 0).u64[0];
    v329 = (int32x4_t)vaddq_f32((float32x4_t)buf.columns[2], vmlaq_n_f32(vmulq_n_f32((float32x4_t)buf.columns[0], *(float *)v327.i32), (float32x4_t)buf.columns[1], *(float *)v327.i32));
    v330 = vmul_f32(v323, v323);
    v330.i32[0] = vadd_f32(v330, (float32x2_t)vdup_lane_s32((int32x2_t)v330, 1)).u32[0];
    v331 = vrsqrte_f32((float32x2_t)v330.u32[0]);
    v332 = vmul_f32(v331, vrsqrts_f32((float32x2_t)v330.u32[0], vmul_f32(v331, v331)));
    *(float32x2_t *)v329.i8 = vadd_f32(vdiv_f32(*(float32x2_t *)v329.i8, (float32x2_t)vdup_laneq_s32(v329, 2)), vmul_n_f32(v323, vmul_f32(v332, vrsqrts_f32((float32x2_t)v330.u32[0], vmul_f32(v332, v332))).f32[0]));
    v333 = (int32x4_t)vaddq_f32(loga, vmlaq_lane_f32(vmulq_n_f32(v508, *(float *)v329.i32), v520, *(float32x2_t *)v329.i8, 1));
    v334 = vsub_f32(vdiv_f32(*(float32x2_t *)v333.i8, (float32x2_t)vdup_laneq_s32(v333, 2)), v328);
    v335 = atan2f(v334.f32[1], v334.f32[0]);
    v336 = 0;
    v337 = 0;
    v338 = *(float *)(a1 + 696);
    v339 = v338 - v335;
    v484 = (float)(v338 - v335) + (float)(v338 * -2.0);
    *(_WORD *)v573 = 1;
    while (1)
    {
      v503 = v336;
      v340 = v573[v337];
      v341 = 320;
      if (!v573[v337])
        v341 = 496;
      v504 = v341;
      v342 = v573[v337] ? a1 + 320 : a1 + 496;
      v343 = *(id *)(v342 + 160);
      v521 = objc_msgSend(v343, "width");

      v344 = *(id *)(v342 + 160);
      v345 = objc_msgSend(v344, "width");
      v346 = *(id *)(v342 + 160);
      v485 = objc_msgSend(v346, "height");
      v486 = v345;

      if (v345 != v485)
        break;
      if (v340)
        v347 = 0;
      else
        v347 = 48;
      v348 = v484;
      if (!v340)
        v348 = v339;
      v349 = (unint64_t)__sincosf_stret(v348);
      v350 = (float32x2_t *)operator new(0x30uLL);
      v351 = v350;
      v352 = 0;
      v353 = (float32x4_t)HIDWORD(v349);
      v353.i32[1] = v349;
      v354 = (float32x4_t)COERCE_UNSIGNED_INT(-*(float *)&v349);
      v354.i32[1] = HIDWORD(v349);
      v355 = v353;
      v355.i32[3] = v502;
      v356 = (int8x16_t)v354;
      v356.i32[3] = v493;
      v357 = (int8x16_t)xmmword_1C9927500;
      v357.i32[3] = v491;
      v358 = *(float32x2_t *)&__p[v347];
      v359 = *(float32x2_t *)&__p[v347 + 8];
      v360 = vadd_f32((float32x2_t)*(_OWORD *)&vmlaq_lane_f32(vmulq_n_f32(v353, v358.f32[0]), v354, v358, 1), 0);
      *(float32x2_t *)&v361 = v360;
      *((float32x2_t *)&v361 + 1) = vadd_f32((float32x2_t)*(_OWORD *)&vmlaq_lane_f32(vmulq_n_f32(v353, v359.f32[0]), v354, v359, 1), 0);
      v362 = *(float32x2_t *)&__p[v347 + 16];
      v363 = *(float32x2_t *)&__p[v347 + 24];
      *(float32x2_t *)&v364 = vadd_f32((float32x2_t)*(_OWORD *)&vmlaq_lane_f32(vmulq_n_f32(v353, v362.f32[0]), v354, v362, 1), 0);
      v365 = vadd_f32((float32x2_t)*(_OWORD *)&vmlaq_lane_f32(vmulq_n_f32(v353, v363.f32[0]), v354, v363, 1), 0);
      v366 = vminnm_f32(vminnm_f32(v360, *(float32x2_t *)((char *)&v361 + 8)), *(float32x2_t *)&v364);
      v367 = vmaxnm_f32(vmaxnm_f32(v360, *(float32x2_t *)((char *)&v361 + 8)), *(float32x2_t *)&v364);
      *((float32x2_t *)&v364 + 1) = v365;
      *(_OWORD *)v350->f32 = v361;
      *(_OWORD *)v350[2].f32 = v364;
      v368 = *(float32x2_t *)&__p[v347 + 32];
      v369 = *(float32x2_t *)&__p[v347 + 40];
      *(float32x2_t *)&v364 = vadd_f32((float32x2_t)*(_OWORD *)&vmlaq_lane_f32(vmulq_n_f32(v353, v368.f32[0]), v354, v368, 1), 0);
      *((float32x2_t *)&v364 + 1) = vadd_f32((float32x2_t)*(_OWORD *)&vmlaq_lane_f32(vmulq_n_f32(v353, v369.f32[0]), v354, v369, 1), 0);
      *(_OWORD *)v350[4].f32 = v364;
      v370 = vsub_f32(vmaxnm_f32(vmaxnm_f32(vmaxnm_f32(v367, v365), *(float32x2_t *)&v364), *(float32x2_t *)((char *)&v364 + 8)), vminnm_f32(vminnm_f32(vminnm_f32(v366, v365), *(float32x2_t *)&v364), *(float32x2_t *)((char *)&v364 + 8)));
      if (v370.f32[0] < v370.f32[1])
        v370.f32[0] = v370.f32[1];
      v371 = 0.0;
      do
      {
        v372 = *(float32x2_t *)&__p[v347 + v352];
        v373 = vsub_f32(v372, v358);
        v374 = sqrtf(vaddv_f32(vmul_f32(v373, v373)));
        if (v371 < v374)
          v371 = v374;
        v375 = vsub_f32(v372, v359);
        v376 = sqrtf(vaddv_f32(vmul_f32(v375, v375)));
        if (v371 < v376)
          v371 = v376;
        v377 = vsub_f32(v372, v362);
        v378 = sqrtf(vaddv_f32(vmul_f32(v377, v377)));
        if (v371 < v378)
          v371 = v378;
        v379 = vsub_f32(v372, v363);
        v380 = sqrtf(vaddv_f32(vmul_f32(v379, v379)));
        if (v371 < v380)
          v371 = v380;
        v381 = vsub_f32(v372, v368);
        v382 = sqrtf(vaddv_f32(vmul_f32(v381, v381)));
        if (v371 < v382)
          v371 = v382;
        v383 = vsub_f32(v372, v369);
        v384 = sqrtf(vaddv_f32(vmul_f32(v383, v383)));
        if (v371 < v384)
          v371 = v384;
        v352 += 8;
      }
      while (v352 != 48);
      v385 = v350[1];
      v386 = v350[2];
      v387 = vminnm_f32(v360, v385);
      v388 = vmaxnm_f32(v360, v385);
      v389 = vminnm_f32(v387, v386);
      v390 = vmaxnm_f32(v388, v386);
      v391 = v350[3];
      v392 = v350[4];
      v393 = vminnm_f32(vminnm_f32(v389, v391), v392);
      v394 = vmaxnm_f32(vmaxnm_f32(v390, v391), v392);
      v395 = v350[5];
      v396 = vminnm_f32(v393, v395);
      v397 = vsub_f32(vmaxnm_f32(v394, v395), v396);
      v398 = v397.f32[1];
      if (v397.f32[0] >= v397.f32[1])
        v398 = v397.f32[0];
      v358.f32[0] = (float)((float)(v371 / v370.f32[0]) + (float)(v371 / v370.f32[0])) * v398;
      v399 = vadd_f32(v396, vmul_f32(vsub_f32((float32x2_t)vdup_lane_s32((int32x2_t)v358, 0), v397), (float32x2_t)0xBF000000BF000000));
      v400 = (float32x4_t)HIDWORD(v349);
      if (v340)
        v401 = (float)((float)(v371 / v370.f32[0]) + (float)(v371 / v370.f32[0])) * v398;
      else
        v401 = 0.0;
      v402.i32[0] = 0;
      v402.f32[1] = v401;
      v403 = vadd_f32(v399, v402);
      v400.f32[1] = -*(float *)&v349;
      v404 = vmlaq_lane_f32(vmulq_n_f32(v400, v403.f32[0]), (float32x4_t)v349, v403, 1);
      v405 = (float)v521 / v358.f32[0];
      v406 = -v405;
      if (!v340)
        v406 = v405;
      LODWORD(v407) = 0;
      *((float *)&v407 + 1) = v406;
      v408 = (float32x2_t)vaddq_f32(v404, (float32x4_t)0).u64[0];
      v409 = vaddq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)LODWORD(v405), *((float *)&v349 + 1)), (float32x4_t)v407, *(float32x2_t *)v353.f32, 1), (float32x4_t)0);
      v410 = vaddq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)LODWORD(v405), -*(float *)&v349), (float32x4_t)v407, *(float32x2_t *)v354.f32, 1), (float32x4_t)0);
      v411 = vaddq_f32(vmlaq_f32((float32x4_t)COERCE_UNSIGNED_INT(v405 * 0.0), (float32x4_t)0, (float32x4_t)v407), (float32x4_t)xmmword_1C9927500);
      v412 = vnegq_f32(vaddq_f32(v411, vmlaq_lane_f32(vmulq_n_f32(v409, v408.f32[0]), v410, v408, 1)));
      v413 = *(float32x4_t *)(MEMORY[0x1E0C83FE8] + 16);
      v412.i32[2] = *(_DWORD *)(MEMORY[0x1E0C83FE8] + 40);
      v414 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*MEMORY[0x1E0C83FE8], v409.f32[0]), v413, *(float32x2_t *)v409.f32, 1), v412, v409, 2);
      v415 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*MEMORY[0x1E0C83FE8], v410.f32[0]), v413, *(float32x2_t *)v410.f32, 1), v412, v410, 2);
      v416 = (float32x2_t)vmlaq_n_f32(vmulq_n_f32(v414, *((float *)&v563 + 2) + 0.5), v415, *((float *)&v563 + 3) + 0.5).u64[0];
      v415.i32[3] = v493;
      *(float32x4_t *)logd = v415;
      v417 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*MEMORY[0x1E0C83FE8], v411.f32[0]), v413, *(float32x2_t *)v411.f32, 1), v412, v411, 2);
      v418 = v417;
      v418.i32[3] = v491;
      v509 = (simd_float3)v418;
      v414.i32[3] = v502;
      v501 = (simd_float3)v414;
      v419 = vdup_n_s32(v521);
      *(float32x2_t *)v418.f32 = vadd_f32(*(float32x2_t *)v417.f32, v416);
      v492 = v493;
      v494 = v355.i32[3];
      v420 = v355;
      v420.i32[3] = v356.i32[0];
      v490 = v357.i32[3];
      *(float32x4_t *)rhs = v420;
      *(int8x16_t *)&rhs[16] = vextq_s8(vextq_s8(v356, v356, 0xCuLL), v357, 8uLL);
      v533 = (int8x16_t)0x3F800000uLL;
      *(_DWORD *)&time[28] = 0;
      *(_DWORD *)&time[12] = 0;
      *(_QWORD *)&time[20] = 0;
      v421 = v405 * *(float *)&v562;
      *(_QWORD *)&time[4] = 0;
      *(_DWORD *)time = 1065353216;
      *(_DWORD *)&time[16] = 1065353216;
      v556 = 1065353216;
      v557 = 0;
      v558 = 0.0;
      v422 = vadd_f32(*(float32x2_t *)v418.f32, (float32x2_t)0xBF000000BF000000);
      *(_QWORD *)v550 = rhs;
      *(_QWORD *)&v550[8] = v565;
      sub_1C98A24C0((uint64_t)time, (float **)v550);
      v545.value = (CMTimeValue)rhs;
      *(_QWORD *)&v545.timescale = &v567;
      *(_QWORD *)&v550[4] = 0;
      *(_DWORD *)&v550[12] = 0;
      sub_1C98A266C((float *)&v550[4], (float **)&v545);
      v557 = vadd_f32(*(float32x2_t *)&v550[4], 0);
      v558 = *(float *)&v550[12] + 0.0;
      *(_QWORD *)time1 = *(_QWORD *)&time[4];
      *(_DWORD *)&time1[8] = *(_DWORD *)&time[12];
      v423 = *(_DWORD *)time;
      v424 = *(_DWORD *)&time[16];
      *(_QWORD *)time2 = *(_QWORD *)&time[20];
      *(_DWORD *)&time2[8] = *(_DWORD *)&time[28];
      v425 = v556;
      v575.f32[2] = *(float *)&v550[12] + 0.0;
      *(float32x2_t *)v575.f32 = v557;
      operator delete(v351);
      v589.columns[0] = v501;
      v589.columns[2] = v509;
      v589.columns[1] = *(simd_float3 *)logd;
      v590 = __invert_f3(v589);
      v426 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)buf.columns[0], v590.columns[0].f32[0]), (float32x4_t)buf.columns[1], *(float32x2_t *)v590.columns[0].f32, 1), (float32x4_t)buf.columns[2], (float32x4_t)v590.columns[0], 2);
      v427 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)buf.columns[0], v590.columns[1].f32[0]), (float32x4_t)buf.columns[1], *(float32x2_t *)v590.columns[1].f32, 1), (float32x4_t)buf.columns[2], (float32x4_t)v590.columns[1], 2);
      v428 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)buf.columns[0], v590.columns[2].f32[0]), (float32x4_t)buf.columns[1], *(float32x2_t *)v590.columns[2].f32, 1), (float32x4_t)buf.columns[2], (float32x4_t)v590.columns[2], 2);
      v426.i32[3] = v497;
      v427.i32[3] = v496;
      *(float32x4_t *)loge = v427;
      v522 = v426;
      v428.i32[3] = v495;
      v510 = v428;
      v590.columns[0] = (simd_float3)v426;
      v590.columns[1] = (simd_float3)v427;
      v590.columns[2] = (simd_float3)v428;
      v591 = __invert_f3(v590);
      v429 = v591.columns[0];
      v429.i32[3] = v500;
      v591.columns[1].i32[3] = v499;
      v591.columns[2].i32[3] = v498;
      *(simd_float3 *)(a1 + v504) = v429;
      *(simd_float3 *)(v342 + 16) = v591.columns[1];
      *(simd_float3 *)(v342 + 32) = v591.columns[2];
      *(int32x2_t *)(v342 + 56) = v419;
      *(float *)(v342 + 64) = v421;
      *(_QWORD *)(v342 + 68) = 0;
      *(_DWORD *)(v342 + 76) = 0;
      *(float *)(v342 + 80) = v421;
      *(_DWORD *)(v342 + 84) = 0;
      *(float32x2_t *)(v342 + 88) = v422;
      *(_DWORD *)(v342 + 96) = 1065353216;
      *(_DWORD *)(v342 + 100) = v423;
      *(_QWORD *)(v342 + 104) = *(_QWORD *)time1;
      *(_DWORD *)(v342 + 112) = *(_DWORD *)&time1[8];
      *(_DWORD *)(v342 + 116) = v424;
      *(_QWORD *)(v342 + 120) = *(_QWORD *)time2;
      *(_DWORD *)(v342 + 128) = *(_DWORD *)&time2[8];
      *(_DWORD *)(v342 + 132) = v425;
      *(_QWORD *)(v342 + 136) = v575.i64[0];
      *(_DWORD *)(v342 + 144) = v575.i32[2];
      v430 = *(_QWORD *)(a1 + 192);
      v431 = *(id *)(v342 + 160);
      *(_OWORD *)rhs = xmmword_1C9927510;
      objc_msgSend(v488, "encodeToCommandBuffer:sourceTexture:transform:destinationTexture:destinationBoundingBox:", v489, v430, v431, rhs, *(double *)v522.i64, *(double *)loge, *(double *)v510.i64);

      v336 = 1;
      v502 = v494;
      v432 = v492;
      v491 = v490;
      v493 = v432;
      v337 = 1;
      v496 = HIDWORD(loge[1]);
      v497 = v522.i32[3];
      v495 = v510.i32[3];
      if ((v503 & 1) != 0)
      {
        v84 = 0;
        goto LABEL_484;
      }
    }
    v436 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v436 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v437 = (id)qword_1EF921280;
    if (os_log_type_enabled(v437, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)rhs = 0;
      _os_log_error_impl(&dword_1C9870000, v437, OS_LOG_TYPE_ERROR, "Precondition violated: eyeCropData.crop.texture().width == eyeCropData.crop.texture().height", rhs, 2u);
    }

    v84 = 2;
LABEL_484:
    v435 = v486 != v485;
    operator delete(__p);

    if (v486 != v485)
    {
LABEL_485:
      sub_1C98A5610();
      v438 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v438, OS_LOG_TYPE_ERROR))
      {
        v460 = off_1E8296478[v435 - 1];
        v461 = off_1E8296478[(v84 - 1)];
        *(_DWORD *)lhs = 136315394;
        *(_QWORD *)&lhs[4] = v460;
        *(_WORD *)&lhs[12] = 2080;
        *(_QWORD *)&lhs[14] = v461;
        _os_log_error_impl(&dword_1C9870000, v438, OS_LOG_TYPE_ERROR, "Running cropEyes(commandBuffer, normalizedLandmarksToImage(**m_trackedFace->normalizedLandmarks(), bbox), data.virtualCameraOffset(), faceCropToImage, faceCropCamera, samplerMode) failed with %s, returning %s", lhs, 0x16u);
      }

      v269 = v84;
      if (!(_DWORD)v84)
        goto LABEL_492;
LABEL_422:
      sub_1C98A5610();
      v86 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v86, OS_LOG_TYPE_ERROR))
      {
        v305 = off_1E8296478[v269 - 1];
        v306 = off_1E8296478[(v84 - 1)];
        *(_DWORD *)lhs = 136315394;
        *(_QWORD *)&lhs[4] = v305;
        *(_WORD *)&lhs[12] = 2080;
        *(_QWORD *)&lhs[14] = v306;
        _os_log_error_impl(&dword_1C9870000, v86, OS_LOG_TYPE_ERROR, "Running scheduleCrops(data, bbox, faceCropToImage, faceCropCamera, mode) failed with %s, returning %s", lhs, 0x16u);
      }
      goto LABEL_424;
    }
  }
  if ((-[NSObject commitAndWaitUntilSubmitted](v525, "commitAndWaitUntilSubmitted") & 1) == 0)
    -[NSObject waitUntilScheduled](v525, "waitUntilScheduled");

LABEL_492:
  kdebug_trace();
  if (*(_BYTE *)(a1 + 944))
  {
    kdebug_trace();
    sub_1C989059C(a1, v439);
    kdebug_trace();
  }
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 296) + 257))
  {
LABEL_500:
    if (*(_BYTE *)(a1 + 944))
    {
      objc_msgSend(*(id *)(a1 + 184), "commandBuffer");
      v441 = (void *)objc_claimAutoreleasedReturnValue();
      v442 = v441;
      if (!v441)
      {
        sub_1C98A5610();
        v451 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v451, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)lhs = 0;
          _os_log_error_impl(&dword_1C9870000, v451, OS_LOG_TYPE_ERROR, "Assertion failed: commandBuffer = [m_queue commandBuffer]", lhs, 2u);
        }

        v442 = 0;
        v84 = 2;
        goto LABEL_522;
      }
      objc_msgSend(v441, "setLabel:", CFSTR("ViewpointCorrectionProcessor::executeMetalOperationsEyes"));
      v443 = *(_QWORD *)(a1 + 304);
      v444 = *(void **)(a1 + 192);
      v445 = *(void **)(a1 + 200);
      v446 = sub_1C98A0B7C(a2);
      v447 = sub_1C98A0E70(v443, v442, v444, v445, (__int128 *)(a1 + 496), (__int128 *)(a1 + 320), v446);
      v448 = v447 - 1;
      if (v447 == 1)
        v84 = 2;
      else
        v84 = v447;
      if (v447)
      {
        sub_1C98A5610();
        v449 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v449, OS_LOG_TYPE_ERROR))
        {
          v472 = off_1E8296478[v448];
          v473 = off_1E8296478[(v84 - 1)];
          *(_DWORD *)lhs = 136315394;
          *(_QWORD *)&lhs[4] = v472;
          *(_WORD *)&lhs[12] = 2080;
          *(_QWORD *)&lhs[14] = v473;
          _os_log_error_impl(&dword_1C9870000, v449, OS_LOG_TYPE_ERROR, "Running m_flowWarper->startEncoding(commandBuffer, m_textureY, m_textureCbCr, m_leftEye.imageToCropTransform, m_rightEye.imageToCropTransform, data.debugFlowEnabled()) failed with %s, returning %s", lhs, 0x16u);
        }

        goto LABEL_522;
      }
      v450 = v442;
    }
    else
    {
      v450 = 0;
    }
    kdebug_trace();
    v452 = sub_1C9890D54(a1, a2, &v530, (float32x4_t *)&buf);
    v453 = v452 - 1;
    if (v452 == 1)
      v84 = 2;
    else
      v84 = v452;
    if (v452)
    {
      sub_1C98A5610();
      v454 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v454, OS_LOG_TYPE_ERROR))
      {
        v470 = off_1E8296478[v453];
        v471 = off_1E8296478[(v84 - 1)];
        *(_DWORD *)lhs = 136315394;
        *(_QWORD *)&lhs[4] = v470;
        *(_WORD *)&lhs[12] = 2080;
        *(_QWORD *)&lhs[14] = v471;
        _os_log_error_impl(&dword_1C9870000, v454, OS_LOG_TYPE_ERROR, "Running runEyeNetwork(data, bbox, faceCropToImage) failed with %s, returning %s", lhs, 0x16u);
      }

      kdebug_trace();
      goto LABEL_521;
    }
    kdebug_trace();
    if (v450)
    {
      v455 = sub_1C98A4B58(a1 + 728);
      v456 = sub_1C98A1DC4(*(_QWORD *)(a1 + 304), v455);
      v457 = v456;
      v458 = v456 - 1;
      if (v456 == 1)
        v84 = 2;
      else
        v84 = v456;
      if (v456)
      {
        sub_1C98A5610();
        v459 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v459, OS_LOG_TYPE_ERROR))
        {
          if (v457 > 7)
            v476 = "Success, no error";
          else
            v476 = off_1E8296478[v458];
          if (v84 > 7)
            v479 = "Success, no error";
          else
            v479 = off_1E8296478[(v84 - 1)];
          *(_DWORD *)lhs = 136315394;
          *(_QWORD *)&lhs[4] = v476;
          *(_WORD *)&lhs[12] = 2080;
          *(_QWORD *)&lhs[14] = v479;
          _os_log_error_impl(&dword_1C9870000, v459, OS_LOG_TYPE_ERROR, "Running m_flowWarper->endEncoding(fadeout) failed with %s, returning %s", lhs, 0x16u);
        }

        goto LABEL_521;
      }
      if (v455 > 0.0)
      {
        kdebug_trace();
        *a3 = 1;
        objc_msgSend(v450, "commit");
        objc_msgSend(v450, "waitUntilCompleted");
        kdebug_trace();
      }
    }
    v462 = a4[1];
    v527[0] = *a4;
    v527[1] = v462;
    if (v462)
    {
      v463 = (unint64_t *)((char *)v462 + 8);
      do
        v464 = __ldxr(v463);
      while (__stxr(v464 + 1, v463));
    }
    v465 = sub_1C988F9F4((float32x2_t *)a1, v527, &v530, 1);
    sub_1C987C140((uint64_t)v527);
    if (v465 == 1)
      v84 = 2;
    else
      v84 = v465;
    if (v465)
    {
      sub_1C98A5610();
      v466 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v466, OS_LOG_TYPE_ERROR))
      {
        v477 = off_1E8296478[v465 - 1];
        v478 = off_1E8296478[(v84 - 1)];
        *(_DWORD *)lhs = 136315394;
        *(_QWORD *)&lhs[4] = v477;
        *(_WORD *)&lhs[12] = 2080;
        *(_QWORD *)&lhs[14] = v478;
        _os_log_error_impl(&dword_1C9870000, v466, OS_LOG_TYPE_ERROR, "Running writeDebugData(debugDictionary, bbox, true) failed with %s, returning %s", lhs, 0x16u);
      }
LABEL_568:

LABEL_521:
      v442 = v450;
LABEL_522:

      goto LABEL_353;
    }
    if (sub_1C98A0BFC(a2))
    {
      v467 = sub_1C988F2C0(a1, a2);
      v468 = v467;
      v469 = v467 - 1;
      if (v467 == 1)
        v84 = 2;
      else
        v84 = v467;
      if (v467)
      {
        sub_1C98A5610();
        v466 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v466, OS_LOG_TYPE_ERROR))
        {
          if (v468 > 7)
            v480 = "Success, no error";
          else
            v480 = off_1E8296478[v469];
          if (v84 > 7)
            v481 = "Success, no error";
          else
            v481 = off_1E8296478[(v84 - 1)];
          *(_DWORD *)lhs = 136315394;
          *(_QWORD *)&lhs[4] = v480;
          *(_WORD *)&lhs[12] = 2080;
          *(_QWORD *)&lhs[14] = v481;
          _os_log_error_impl(&dword_1C9870000, v466, OS_LOG_TYPE_ERROR, "Running drawInputData(data) failed with %s, returning %s", lhs, 0x16u);
        }
        goto LABEL_568;
      }
      v474 = sub_1C9891B70(a1, &v530);
      v475 = v474 - 1;
      if (v474 == 1)
        v84 = 2;
      else
        v84 = v474;
      if (v474)
      {
        sub_1C98A5610();
        v466 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v466, OS_LOG_TYPE_ERROR))
        {
          v482 = off_1E8296478[v475];
          v483 = off_1E8296478[(v84 - 1)];
          *(_DWORD *)lhs = 136315394;
          *(_QWORD *)&lhs[4] = v482;
          *(_WORD *)&lhs[12] = 2080;
          *(_QWORD *)&lhs[14] = v483;
          _os_log_error_impl(&dword_1C9870000, v466, OS_LOG_TYPE_ERROR, "Running drawDebugData(bbox) failed with %s, returning %s", lhs, 0x16u);
        }
        goto LABEL_568;
      }
    }
    v84 = 0;
    goto LABEL_521;
  }
  kdebug_trace();
  *(_QWORD *)lhs = *(_QWORD *)(a2 + 64);
  if (!sub_1C9890B0C(a1, (float32x2_t *)lhs))
  {
    kdebug_trace();
    goto LABEL_500;
  }
  sub_1C98A5610();
  v440 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v440, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)lhs = 136315394;
    *(_QWORD *)&lhs[4] = "Precondition was violated";
    *(_WORD *)&lhs[12] = 2080;
    *(_QWORD *)&lhs[14] = "Assertion failed";
    _os_log_error_impl(&dword_1C9870000, v440, OS_LOG_TYPE_ERROR, "Running writeCorrectionIntensitySurface(data.virtualCameraOffset()) failed with %s, returning %s", lhs, 0x16u);
  }

  kdebug_trace();
LABEL_175:
  v84 = 2;
LABEL_353:
  sub_1C989247C((uint64_t)&v571);
  return v84;
}

void sub_1C988E044(_Unwind_Exception *a1)
{
  void *v1;

  sub_1C989247C((uint64_t)&STACK[0x438]);
  _Unwind_Resume(a1);
}

void sub_1C988E2A8(uint64_t *a1, uint64_t *a2, int a3, uint64_t a4, cva::DictionaryHandler **a5)
{
  uint64_t Dictionary;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  cva::DictionaryHandler *v19;
  _QWORD *v20;
  cva::DictionaryHandler *v21;
  std::__shared_weak_count *v22;
  _BYTE v23[16];
  _QWORD v24[4];
  _QWORD v25[5];

  v25[4] = *MEMORY[0x1E0C80C00];
  v24[0] = CFSTR("Timestamp");
  cva::DictionaryHandler::item((cva::DictionaryHandler *)(a2 + 2), CFSTR("Timestamp"));
  cva::ItemHandler::getDictionary((cva::ItemHandler *)v23);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v23);
  Dictionary = cva::DictionaryHandler::getDictionary(v21);
  v11 = *a2;
  v25[0] = Dictionary;
  v25[1] = v11;
  v24[1] = CFSTR("CorrectedImage");
  v24[2] = CFSTR("Status");
  if ((a3 - 1) > 6)
    v12 = 0;
  else
    v12 = dword_1C99279C8[a3 - 1];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v25[2] = v13;
  v24[3] = CFSTR("ModificationStatus");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a4);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v25[3] = v14;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v25, v24, 4);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = (void *)objc_msgSend(v15, "mutableCopy");

  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)())v22->__on_zero_shared)();
      std::__shared_weak_count::__release_weak(v22);
      v19 = *a5;
      if (!*a5)
        goto LABEL_10;
      goto LABEL_9;
    }
  }
  v19 = *a5;
  if (*a5)
LABEL_9:
    objc_msgSend(v16, "setObject:forKeyedSubscript:", cva::DictionaryHandler::getDictionary(v19), CFSTR("DebugMetadata"));
LABEL_10:
  v20 = operator new(0x28uLL);
  v20[1] = 0;
  v20[2] = 0;
  *v20 = &off_1E8295758;
  *a1 = cva::DictionaryHandler::DictionaryHandler((cva::DictionaryHandler *)(v20 + 3), (const __CFDictionary *)v16);
  a1[1] = (uint64_t)v20;

}

void sub_1C988E488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  std::__shared_weak_count *v12;
  void *v13;
  void *v15;

  std::__shared_weak_count::~__shared_weak_count(v12);
  operator delete(v15);

  _Unwind_Resume(a1);
}

void sub_1C988E504(uint64_t a1, uint64_t a2, int a3, int a4, CMTime *a5)
{
  OpaqueCMClock *HostTimeClock;
  double Seconds;
  unsigned __int8 v12;
  NSObject *v13;
  Float64 v14;
  Float64 v15;
  double *v16;
  _OWORD *v17;
  OSType PixelFormatType;
  unsigned __int8 v19;
  NSObject *v20;
  int v21;
  int v22;
  unsigned __int8 v23;
  NSObject *v24;
  unsigned int v25;
  unsigned int v26;
  double v27;
  double v28;
  unsigned int v29;
  unsigned int v30;
  double v31;
  double v32;
  unsigned int v33;
  unsigned int v34;
  double v35;
  double v36;
  unsigned int v37;
  unsigned int v38;
  double v39;
  double v40;
  unsigned int v41;
  unsigned int v42;
  double v43;
  double v44;
  _BYTE v45[5];
  CMTime v46;
  CMTime v47;
  CMTime v48;
  CMTime v49;
  CMTime v50;
  CMTime rhs;
  CMTime lhs;
  CMTime time;
  CMTime v54;
  int buf;
  _BYTE v56[10];
  _BYTE v57[10];
  _BYTE v58[10];
  __int16 v59;
  unsigned int v60;
  __int16 v61;
  unsigned int v62;
  __int16 v63;
  double v64;
  __int16 v65;
  double v66;
  __int16 v67;
  unsigned int v68;
  __int16 v69;
  unsigned int v70;
  __int16 v71;
  double v72;
  __int16 v73;
  double v74;
  __int16 v75;
  unsigned int v76;
  __int16 v77;
  unsigned int v78;
  __int16 v79;
  double v80;
  __int16 v81;
  double v82;
  __int16 v83;
  unsigned int v84;
  __int16 v85;
  unsigned int v86;
  __int16 v87;
  double v88;
  __int16 v89;
  double v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  memset(&v54, 0, sizeof(v54));
  HostTimeClock = CMClockGetHostTimeClock();
  CMClockGetTime(&v54, HostTimeClock);
  lhs = v54;
  rhs = *a5;
  CMTimeSubtract(&time, &lhs, &rhs);
  Seconds = CMTimeGetSeconds(&time);
  if (Seconds < 0.0)
  {
    v12 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v13 = (id)qword_1EF921280;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      v50 = *a5;
      v14 = CMTimeGetSeconds(&v50);
      v49 = v54;
      v15 = CMTimeGetSeconds(&v49);
      buf = 134218496;
      *(double *)v56 = Seconds;
      *(_WORD *)&v56[8] = 2048;
      *(Float64 *)v57 = v14;
      *(_WORD *)&v57[8] = 2048;
      *(Float64 *)v58 = v15;
      _os_log_impl(&dword_1C9870000, v13, OS_LOG_TYPE_DEFAULT, "Negative latency %f. Start time %f, end time %f.", (uint8_t *)&buf, 0x20u);
    }

  }
  if (a3 == 7)
  {
    ++*(_DWORD *)(a1 + 32);
    ++*(_DWORD *)(a1 + 48);
    *(double *)(a1 + 40) = Seconds + *(double *)(a1 + 40);
    v16 = (double *)(a1 + 56);
  }
  else if (a3)
  {
    ++*(_DWORD *)(a1 + 64);
    ++*(_DWORD *)(a1 + 80);
    *(double *)(a1 + 72) = Seconds + *(double *)(a1 + 72);
    v16 = (double *)(a1 + 88);
  }
  else
  {
    ++*(_DWORD *)a1;
    ++*(_DWORD *)(a1 + 16);
    *(double *)(a1 + 8) = Seconds + *(double *)(a1 + 8);
    v16 = (double *)(a1 + 24);
  }
  *v16 = Seconds + *v16;
  if (a4)
  {
    ++*(_DWORD *)(a1 + 96);
    ++*(_DWORD *)(a1 + 112);
    *(double *)(a1 + 104) = Seconds + *(double *)(a1 + 104);
    *(double *)(a1 + 120) = Seconds + *(double *)(a1 + 120);
  }
  if (*(_DWORD *)(a2 + 32) == 2)
  {
    ++*(_DWORD *)(a1 + 128);
    ++*(_DWORD *)(a1 + 144);
    *(double *)(a1 + 136) = Seconds + *(double *)(a1 + 136);
    *(double *)(a1 + 152) = Seconds + *(double *)(a1 + 152);
  }
  v17 = (_OWORD *)(a1 + 160);
  if ((*(_BYTE *)(a1 + 172) & 1) == 0
    || (v47 = v54,
        *(_OWORD *)&v46.value = *v17,
        v46.epoch = *(_QWORD *)(a1 + 176),
        CMTimeSubtract(&v48, &v47, &v46),
        CMTimeGetSeconds(&v48) >= 5.0))
  {
    PixelFormatType = CVPixelBufferGetPixelFormatType(*(CVPixelBufferRef *)a2);
    v45[0] = HIBYTE(PixelFormatType);
    v45[1] = BYTE2(PixelFormatType);
    v45[2] = BYTE1(PixelFormatType);
    v45[3] = PixelFormatType;
    v45[4] = 0;
    v19 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v20 = (id)qword_1EF921280;
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      v21 = *(_DWORD *)(a2 + 184);
      v22 = *(_DWORD *)(a2 + 188);
      buf = 67109634;
      *(_DWORD *)v56 = v21;
      *(_WORD *)&v56[4] = 1024;
      *(_DWORD *)&v56[6] = v22;
      *(_WORD *)v57 = 2080;
      *(_QWORD *)&v57[2] = v45;
      _os_log_impl(&dword_1C9870000, v20, OS_LOG_TYPE_DEFAULT, "ViewpointCorrection last frame: %dx%d %s", (uint8_t *)&buf, 0x18u);
    }

    v23 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v23 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v24 = (id)qword_1EF921280;
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      v25 = *(_DWORD *)a1;
      v26 = *(_DWORD *)(a1 + 16);
      v27 = 0.0;
      v28 = 0.0;
      if (*(_DWORD *)a1)
        v28 = *(double *)(a1 + 8) / (double)v25 * 1000.0;
      if (v26)
        v27 = *(double *)(a1 + 24) / (double)v26 * 1000.0;
      v29 = *(_DWORD *)(a1 + 32);
      v30 = *(_DWORD *)(a1 + 48);
      v31 = 0.0;
      v32 = 0.0;
      if (v29)
        v32 = *(double *)(a1 + 40) / (double)v29 * 1000.0;
      if (v30)
        v31 = *(double *)(a1 + 56) / (double)v30 * 1000.0;
      v33 = *(_DWORD *)(a1 + 64);
      v34 = *(_DWORD *)(a1 + 80);
      v35 = 0.0;
      v36 = 0.0;
      if (v33)
        v36 = *(double *)(a1 + 72) / (double)v33 * 1000.0;
      if (v34)
        v35 = *(double *)(a1 + 88) / (double)v34 * 1000.0;
      v37 = *(_DWORD *)(a1 + 96);
      v38 = *(_DWORD *)(a1 + 112);
      v39 = 0.0;
      v40 = 0.0;
      if (v37)
        v40 = *(double *)(a1 + 104) / (double)v37 * 1000.0;
      if (v38)
        v39 = *(double *)(a1 + 120) / (double)v38 * 1000.0;
      v41 = *(_DWORD *)(a1 + 128);
      v42 = *(_DWORD *)(a1 + 144);
      v43 = 0.0;
      v44 = 0.0;
      if (v41)
        v44 = *(double *)(a1 + 136) / (double)v41 * 1000.0;
      if (v42)
        v43 = *(double *)(a1 + 152) / (double)v42 * 1000.0;
      buf = 67113984;
      *(_DWORD *)v56 = v25;
      *(_WORD *)&v56[4] = 1024;
      *(_DWORD *)&v56[6] = v26;
      *(_WORD *)v57 = 2048;
      *(double *)&v57[2] = v28;
      *(_WORD *)v58 = 2048;
      *(double *)&v58[2] = v27;
      v59 = 1024;
      v60 = v29;
      v61 = 1024;
      v62 = v30;
      v63 = 2048;
      v64 = v32;
      v65 = 2048;
      v66 = v31;
      v67 = 1024;
      v68 = v33;
      v69 = 1024;
      v70 = v34;
      v71 = 2048;
      v72 = v36;
      v73 = 2048;
      v74 = v35;
      v75 = 1024;
      v76 = v37;
      v77 = 1024;
      v78 = v38;
      v79 = 2048;
      v80 = v40;
      v81 = 2048;
      v82 = v39;
      v83 = 1024;
      v84 = v41;
      v85 = 1024;
      v86 = v42;
      v87 = 2048;
      v88 = v44;
      v89 = 2048;
      v90 = v43;
      _os_log_impl(&dword_1C9870000, v24, OS_LOG_TYPE_DEFAULT, "ViewpointCorrection # frames: success (%i (+%i), %.1f ms (%.1f ms)), dropped (%i (+%i), %.1f ms (%.1f ms)), error (%i (+%i), %.1f ms (%.1f ms)), modified (%i (+%i), %.1f ms (%.1f ms)), skipped due to fisheye strength (%i (+%i), %.1f ms (%.1f ms))", (uint8_t *)&buf, 0xA2u);
    }

    *(_DWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_DWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 120) = 0;
    *(_DWORD *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 152) = 0;
    *v17 = *(_OWORD *)&v54.value;
    *(_QWORD *)(a1 + 176) = v54.epoch;
  }
}

void sub_1C988EBF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1C988EC10(_QWORD *a1, CVPixelBufferRef *a2)
{
  unsigned int v2;
  _QWORD *v5;
  _QWORD *v6;
  signed int PixelFormatType;
  signed int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned __int8 v13;
  NSObject *v14;
  char *v15;
  char *v16;
  const char *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned __int8 v20;
  char *v21;
  char *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v32[12];
  __int16 v33;
  char *v34;
  _QWORD v35[4];
  CVMetalTextureRef image;
  _QWORD v37[3];
  _QWORD *v38;
  _QWORD v39[4];
  CVMetalTextureRef v40;
  _QWORD v41[3];
  _QWORD *v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v39[3] = v39;
  v5 = v41;
  v42 = v41;
  v40 = 0;
  v41[0] = &off_1E8295248;
  v35[0] = &off_1E8295248;
  v35[3] = v35;
  image = 0;
  v6 = v37;
  v38 = v37;
  v39[0] = &off_1E8295248;
  v37[0] = &off_1E8295248;
  PixelFormatType = CVPixelBufferGetPixelFormatType(*a2);
  v8 = PixelFormatType;
  if (PixelFormatType > 792229423)
  {
    if (PixelFormatType <= 875704437)
    {
      if (PixelFormatType != 792229424 && PixelFormatType != 875704422)
        goto LABEL_40;
    }
    else if (PixelFormatType != 875704438 && PixelFormatType != 2084070960 && PixelFormatType != 2084075056)
    {
      goto LABEL_40;
    }
  }
  else if (PixelFormatType <= 758670895)
  {
    if (PixelFormatType != 641230384 && PixelFormatType != 641234480)
      goto LABEL_40;
  }
  else if (PixelFormatType != 758670896 && PixelFormatType != 758674992 && PixelFormatType != 792225328)
  {
LABEL_40:
    v27 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v27 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v14 = (id)qword_1EF921280;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v32 = 67109120;
      *(_DWORD *)&v32[4] = v8;
      _os_log_error_impl(&dword_1C9870000, v14, OS_LOG_TYPE_ERROR, "Unsupported pixel format %d", v32, 8u);
    }
    v12 = 1;
    goto LABEL_48;
  }
  if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)(a2 + 2), CFSTR("DrawDebugLandmarksAndBBoxes")))
  {
    cva::DictionaryHandler::item((cva::DictionaryHandler *)(a2 + 2), CFSTR("DrawDebugLandmarksAndBBoxes"));
    v9 = cva::ItemHandler::getValue<BOOL>();
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v32);
    if (v9)
      v10 = 7;
    else
      v10 = 3;
  }
  else
  {
    v10 = 3;
  }
  v11 = sub_1C98A3A60(a1[30], *a2, MTLPixelFormatR8Unorm, 0, v10, (uint64_t)&v40);
  v2 = v11 - 1;
  if (v11 == 1)
    v12 = 2;
  else
    v12 = v11;
  if (v11)
  {
    v13 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v13 & 1) == 0)
      goto LABEL_67;
    goto LABEL_27;
  }
  v18 = sub_1C98A3A60(a1[30], *a2, MTLPixelFormatRG8Unorm, 1uLL, v10, (uint64_t)&image);
  v19 = v18 - 1;
  if (v18 == 1)
    v12 = 2;
  else
    v12 = v18;
  if (v18)
  {
    v20 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v20 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v14 = (id)qword_1EF921280;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      v21 = off_1E8296478[v19];
      v22 = off_1E8296478[(v12 - 1)];
      *(_DWORD *)v32 = 136315394;
      *(_QWORD *)&v32[4] = v21;
      v33 = 2080;
      v34 = v22;
      v17 = "Running m_metalHelpers->createTextureFrom(data.image(), MTLPixelFormatRG8Unorm, 1, textureUsage, CbCr) faile"
            "d with %s, returning %s";
      goto LABEL_36;
    }
  }
  else
  {
    CVMetalTextureGetTexture(v40);
    v23 = objc_claimAutoreleasedReturnValue();
    v24 = (void *)a1[24];
    a1[24] = v23;

    CVMetalTextureGetTexture(image);
    v25 = objc_claimAutoreleasedReturnValue();
    v26 = (void *)a1[25];
    a1[25] = v25;

    if (a1[24] && a1[25])
    {
      v12 = 0;
      goto LABEL_49;
    }
    v28 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v28 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v14 = (id)qword_1EF921280;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v32 = 0;
      _os_log_error_impl(&dword_1C9870000, v14, OS_LOG_TYPE_ERROR, "Could not convert pixel buffer to metal textures in get", v32, 2u);
    }
    v12 = 6;
  }
  while (1)
  {
LABEL_48:

LABEL_49:
    if (image)
    {
      *(_QWORD *)v32 = image;
      if (!v38)
        goto LABEL_66;
      (*(void (**)(_QWORD *, _BYTE *))(*v38 + 48))(v38, v32);
      image = 0;
    }
    if (v38 == v6)
    {
      v29 = 4;
    }
    else
    {
      if (!v38)
        goto LABEL_57;
      v29 = 5;
      v6 = v38;
    }
    (*(void (**)(_QWORD *))(*v6 + 8 * v29))(v6);
LABEL_57:
    if (!v40)
      goto LABEL_60;
    image = v40;
    if (v42)
      break;
LABEL_66:
    sub_1C9889C1C();
    __break(1u);
LABEL_67:
    if (__cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
LABEL_27:
    v14 = (id)qword_1EF921280;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      v15 = off_1E8296478[v2];
      v16 = off_1E8296478[(v12 - 1)];
      *(_DWORD *)v32 = 136315394;
      *(_QWORD *)&v32[4] = v15;
      v33 = 2080;
      v34 = v16;
      v17 = "Running m_metalHelpers->createTextureFrom(data.image(), MTLPixelFormatR8Unorm, 0, textureUsage, Y) failed wi"
            "th %s, returning %s";
LABEL_36:
      _os_log_error_impl(&dword_1C9870000, v14, OS_LOG_TYPE_ERROR, v17, v32, 0x16u);
    }
  }
  (*(void (**)(_QWORD *, CVMetalTextureRef *))(*v42 + 48))(v42, &image);
  v40 = 0;
LABEL_60:
  if (v42 == v41)
  {
    v30 = 4;
LABEL_64:
    (*(void (**)(_QWORD *))(*v5 + 8 * v30))(v5);
  }
  else if (v42)
  {
    v30 = 5;
    v5 = v42;
    goto LABEL_64;
  }
  return v12;
}

void sub_1C988F20C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  sub_1C9893BA8((uint64_t *)va);
  sub_1C9893BA8((uint64_t *)(v8 - 112));
  _Unwind_Resume(a1);
}

uint64_t sub_1C988F2C0(uint64_t a1, uint64_t a2)
{
  id v4;
  int v5;
  unsigned __int8 v6;
  NSObject *v7;
  uint64_t v8;
  unsigned __int8 v9;
  NSObject *v10;
  void *v11;
  void *v12;
  id v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  float v24;
  float32x2_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  float v30;
  float32x2_t v31;
  __float2 v32;
  float32x2_t v33;
  float32x2_t v34;
  unsigned __int8 v35;
  NSObject *v36;
  uint64_t v37;
  unsigned __int8 v38;
  NSObject *v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  NSObject *v42;
  char *v44;
  char *v45;
  float32x2_t v46;
  float v47;
  float32x2_t v48;
  float v49;
  _QWORD v50[2];
  uint8_t v51[4];
  const char *v52;
  __int16 v53;
  const char *v54;
  _BYTE buf[24];
  uint64_t v56;
  float32x2_t v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 200))
  {
    v6 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v7 = (id)qword_1EF921280;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1C9870000, v7, OS_LOG_TYPE_ERROR, "Precondition violated: m_textureCbCr", buf, 2u);
    }
    v8 = 1;
    goto LABEL_41;
  }
  if (*(_BYTE *)(a1 + 288))
  {
LABEL_18:
    objc_msgSend(*(id *)(a1 + 184), "commandBuffer");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "setLabel:", CFSTR("ViewpointCorrectionProcessor::drawInputData"));
    v12 = *(void **)(a1 + 200);
    v7 = v11;
    v13 = v12;
    if (objc_msgSend(v13, "pixelFormat") == 30)
    {
      v14 = objc_msgSend(v13, "width");
      v15 = objc_msgSend(v13, "height");
      v16 = *(_QWORD *)(a2 + 136);
      v17 = *(_QWORD *)(a2 + 144);
      if (v16 == v17)
      {
LABEL_24:

        -[NSObject commit](v7, "commit");
        -[NSObject waitUntilCompleted](v7, "waitUntilCompleted");
        v8 = 0;
LABEL_41:

        return v8;
      }
      v18 = (_QWORD *)(a1 + 272);
      v46 = vcvt_f32_s32((int32x2_t)__PAIR64__(v15, v14));
      __asm { FMOV            V12.2S, #1.5 }
      while (1)
      {
        v24 = *(float *)(v16 + 12) * v46.f32[1];
        v25 = vadd_f32(vmul_f32(*(float32x2_t *)v16, v46), (float32x2_t)0xBF000000BF000000);
        v49 = *(float *)(v16 + 8) * v46.f32[0];
        *(float *)&v26 = v25.f32[0] + v49;
        HIDWORD(v27) = v25.i32[1];
        *(float *)&v27 = v25.f32[0] + v49;
        *(float32x2_t *)buf = v25;
        *(_QWORD *)&buf[8] = v27;
        v47 = v24;
        v48 = v25;
        *((float *)&v26 + 1) = v25.f32[1] + v24;
        LODWORD(v28) = v25.i32[0];
        *((float *)&v28 + 1) = v25.f32[1] + v24;
        *(_QWORD *)&buf[16] = v26;
        v56 = v28;
        v57 = v25;
        v29 = sub_1C98A34A8(v18, (uint64_t)buf, 5u, 2, v13, v7, (__n128)xmmword_1C9927520);
        if (v29)
          break;
        v30 = *(double *)(v16 + 16) / 57.2957795;
        v32 = __sincosf_stret(v30);
        v31.f32[0] = v32.__sinval;
        v31.f32[1] = -v32.__cosval;
        v33 = vmul_f32((float32x2_t)__PAIR64__(LODWORD(v47), LODWORD(v49)), (float32x2_t)0x3F0000003F000000);
        v34 = vadd_f32(v33, v48);
        v50[0] = vmla_f32(v34, v31, v33);
        v50[1] = vmla_f32(v34, _D12, vmul_f32(v33, v31));
        if (sub_1C98A34A8(v18, (uint64_t)v50, 2u, 2, v13, v7, (__n128)xmmword_1C9927520))
        {
          v40 = atomic_load((unsigned __int8 *)&qword_1EF921288);
          if ((v40 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
          {
            qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
            __cxa_guard_release(&qword_1EF921288);
          }
          v39 = (id)qword_1EF921280;
          if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v51 = 136315394;
            v52 = "Precondition was violated";
            v53 = 2080;
            v54 = "Assertion failed";
            _os_log_error_impl(&dword_1C9870000, v39, OS_LOG_TYPE_ERROR, "Running renderer.encode(segment, PrimitiveTypeLineStrip, destination, commandBuffer, kRedColor) failed with %s, returning %s", v51, 0x16u);
          }
          goto LABEL_36;
        }
        v16 += 32;
        if (v16 == v17)
          goto LABEL_24;
      }
      v38 = atomic_load((unsigned __int8 *)&qword_1EF921288);
      if ((v38 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
      {
        qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
        __cxa_guard_release(&qword_1EF921288);
      }
      v39 = (id)qword_1EF921280;
      if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
      {
        v45 = off_1E8296478[v29 - 1];
        *(_DWORD *)v51 = 136315394;
        v52 = v45;
        v53 = 2080;
        v54 = "Assertion failed";
        _os_log_error_impl(&dword_1C9870000, v39, OS_LOG_TYPE_ERROR, "Running renderer.encode(bboxVertices, PrimitiveTypeLineStrip, destination, commandBuffer, kRedColor) failed with %s, returning %s", v51, 0x16u);
      }
LABEL_36:

      v37 = 1;
    }
    else
    {
      v35 = atomic_load((unsigned __int8 *)&qword_1EF921288);
      if ((v35 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
      {
        qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
        __cxa_guard_release(&qword_1EF921288);
      }
      v36 = (id)qword_1EF921280;
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_1C9870000, v36, OS_LOG_TYPE_ERROR, "Precondition violated: destination.pixelFormat == MTLPixelFormatRG8Unorm", buf, 2u);
      }

      v37 = 0;
    }

    v41 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v41 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v42 = (id)qword_1EF921280;
    if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
    {
      v44 = off_1E8296478[v37];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v44;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "Assertion failed";
      _os_log_error_impl(&dword_1C9870000, v42, OS_LOG_TYPE_ERROR, "Running drawInputFaceDetections(*m_debugRendererCbCr, commandBuffer, m_textureCbCr, data.inputFaceDetections()) failed with %s, returning %s", buf, 0x16u);
    }

    v8 = 2;
    goto LABEL_41;
  }
  v4 = **(id **)(a1 + 240);
  sub_1C989256C((uint64_t)buf, v4, objc_msgSend(*(id *)(a1 + 200), "pixelFormat"));

  if (*(_DWORD *)&buf[16] == 1)
  {
    v5 = *(unsigned __int8 *)(a1 + 288);
    *(_QWORD *)(a1 + 272) = *(_QWORD *)buf;
    if (v5)
    {
      objc_storeStrong((id *)(a1 + 280), *(id *)&buf[8]);
    }
    else
    {
      *(_QWORD *)(a1 + 280) = *(id *)&buf[8];
      *(_BYTE *)(a1 + 288) = 1;
    }
    sub_1C9892A60((uint64_t)v51, (uint64_t)buf);
    goto LABEL_18;
  }
  v9 = atomic_load((unsigned __int8 *)&qword_1EF921288);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
  {
    qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
    __cxa_guard_release(&qword_1EF921288);
  }
  v10 = (id)qword_1EF921280;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v51 = 0;
    _os_log_error_impl(&dword_1C9870000, v10, OS_LOG_TYPE_ERROR, "Assertion failed: std::holds_alternative<DebugRenderer>(rendererOrError)", v51, 2u);
  }

  if (*(_DWORD *)&buf[16] != -1)
    ((void (*)(uint8_t *, _BYTE *))*(&off_1E82963C8 + *(unsigned int *)&buf[16]))(v51, buf);
  return 2;
}

void sub_1C988F9B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C988F9C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t sub_1C988F9F4(float32x2_t *a1, cva::DictionaryHandler **a2, float32x2_t *a3, int a4)
{
  __int32 v8;
  float32x2_t v9;
  float32x4_t v10;
  __int32 v11;
  cva::DictionaryHandler *v17;
  void *v18;
  unsigned __int8 v19;
  NSObject *v20;
  uint64_t v21;
  cva::DictionaryHandler *v22;
  id v23;
  char v24;
  unsigned int v25;
  unsigned int v26;
  unsigned __int8 v27;
  NSObject *v28;
  char *v29;
  char *v30;
  const char *v31;
  NSObject *v32;
  uint32_t v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  NSObject *v36;
  cva::DictionaryHandler *v37;
  float32x2_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x2_t v47;
  float32x2_t v48;
  float32x2_t v49;
  unsigned int v50;
  unsigned int v51;
  unsigned __int8 v52;
  NSObject *v53;
  char *v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  cva::DictionaryHandler *v59;
  void *v60;
  void *v61;
  unsigned int v62;
  char *v63;
  char *v64;
  const char *v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  void *v70;
  void *v71;
  unsigned int v72;
  unsigned int v73;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  __int128 v79;
  cva::DictionaryHandler **v80[2];
  void *memptr;
  _BYTE buf[24];
  float32x2_t v83;
  float32x2_t v84;
  float32x2_t v85;
  float32x2_t v86;
  float32x2_t v87;
  float32x2_t v88;
  float32x2_t v89;
  float32x2_t v90;
  float32x2_t v91;
  uint64_t v92;

  v92 = *MEMORY[0x1E0C80C00];
  if (!*a2)
    return 0;
  sub_1C98A48FC((float *)&a1[91]);
  if (a4)
  {
    if (a1[126].i32[1] > 0)
    {
      v8 = a1[126].i32[0];
      v9 = a1[123];
      v10 = 0uLL;
      v11 = a1[126].i32[1];
      do
      {
        v10 = vaddq_f32(v10, *(float32x4_t *)(*(_QWORD *)&v9 + 48 * v8));
        v8 = (v8 + 1) % (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&a1[124] - *(_QWORD *)&v9) >> 4));
        --v11;
      }
      while (v11);
    }
    __asm { FMOV            V7.2S, #1.0 }
  }
  v17 = *a2;
  cva::ItemHandler::createValue<float>();
  LOBYTE(v17) = cva::DictionaryHandler::setItem(v17, CFSTR("DebugFadeoutFactor"), (const cva::ItemHandler *)buf);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
  if ((v17 & 1) != 0)
  {
    if (a4)
      v18 = (void *)a1[39];
    else
      v18 = 0;
    v22 = *a2;
    v23 = v18;
    v79 = *(_OWORD *)a3->f32;
    *(_QWORD *)&buf[8] = 8;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, 0x20uLL, 0x49090899uLL);
    *(_QWORD *)buf = memptr;
    *(_DWORD *)&buf[16] = 4;
    *(_OWORD *)memptr = v79;
    cva::ItemHandler::createVector<float>();
    free(*(void **)buf);
    v24 = cva::DictionaryHandler::setItem(v22, "faceCrop", (const cva::ItemHandler *)v80);
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v80);
    if ((v24 & 1) == 0)
    {
      v34 = atomic_load((unsigned __int8 *)&qword_1EF921288);
      if ((v34 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
      {
        qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
        __cxa_guard_release(&qword_1EF921288);
      }
      v28 = (id)qword_1EF921280;
      if (!os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        v21 = 2;
        goto LABEL_28;
      }
      *(_WORD *)buf = 0;
      v31 = "Assertion failed: dictionary.setItem(\"faceCrop\", cva::ItemHandler::createVector(bbox.toVector4f()))";
      v21 = 2;
      v32 = v28;
      v33 = 2;
LABEL_47:
      _os_log_error_impl(&dword_1C9870000, v32, OS_LOG_TYPE_ERROR, v31, buf, v33);
LABEL_28:

      v35 = atomic_load((unsigned __int8 *)&qword_1EF921288);
      if ((v35 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
      {
        qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
        __cxa_guard_release(&qword_1EF921288);
      }
      v36 = (id)qword_1EF921280;
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      {
        v54 = off_1E8296478[(v21 - 1)];
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v54;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v54;
        _os_log_error_impl(&dword_1C9870000, v36, OS_LOG_TYPE_ERROR, "Running addFaceCropDataToDictionary(bbox, didRunNetwork ? m_faceCropSurface : nil, *debugDictionary) failed with %s, returning %s", buf, 0x16u);
      }
      goto LABEL_80;
    }
    if (v23)
    {
      v25 = sub_1C98A27D0(CFSTR("DebugFaceCrop"), v23, v22);
      v26 = v25 - 1;
      v21 = v25 == 1 ? 2 : v25;
      if (v25)
      {
        v27 = atomic_load((unsigned __int8 *)&qword_1EF921288);
        if ((v27 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
        {
          qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
          __cxa_guard_release(&qword_1EF921288);
        }
        v28 = (id)qword_1EF921280;
        if (!os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
          goto LABEL_28;
        v29 = off_1E8296478[v26];
        v30 = off_1E8296478[(v21 - 1)];
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v29;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v30;
        v31 = "Running addSurface(kCVAViewpointCorrection_DebugFaceCrop, surface, dictionary) failed with %s, returning %s";
        v32 = v28;
        v33 = 22;
        goto LABEL_47;
      }
    }

    v37 = *a2;
    LODWORD(v80[0]) = a1[152].i32[0];
    cva::ItemHandler::createValue<float>();
    LOBYTE(v37) = cva::DictionaryHandler::setItem(v37, CFSTR("DebugEstimatedFaceDistance"), (const cva::ItemHandler *)buf);
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
    if ((v37 & 1) != 0)
    {
      if (!a4)
        return 0;
      if (a1[118].i8[0])
      {
        v38 = a3[1];
        v39 = vmla_f32(*a3, v38, a1[101]);
        v40 = vmla_f32(*a3, v38, a1[102]);
        v41 = vmla_f32(*a3, v38, a1[103]);
        v42 = vmla_f32(*a3, v38, a1[104]);
        v43 = vmla_f32(*a3, v38, a1[105]);
        v44 = vmla_f32(*a3, v38, a1[106]);
        v45 = vmla_f32(*a3, v38, a1[107]);
        v46 = vmla_f32(*a3, v38, a1[108]);
        v47 = vmla_f32(*a3, v38, a1[109]);
        v48 = vmla_f32(*a3, v38, a1[110]);
        v49 = vmla_f32(*a3, v38, a1[111]);
        *(float32x2_t *)buf = vmla_f32(*a3, v38, a1[100]);
        *(float32x2_t *)&buf[8] = v39;
        *(float32x2_t *)&buf[16] = v40;
        v83 = v41;
        v84 = v42;
        v85 = v43;
        v86 = v44;
        v87 = v45;
        v88 = v46;
        v89 = v47;
        v90 = v48;
        v91 = v49;
        v50 = sub_1C98A3310(12, (uint64_t *)buf, *a2);
        v51 = v50 - 1;
        if (v50 == 1)
          v21 = 2;
        else
          v21 = v50;
        if (v50)
        {
          sub_1C98A5610();
          v36 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
          {
            v66 = off_1E8296478[v51];
            v67 = off_1E8296478[(v21 - 1)];
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = v66;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = v67;
            _os_log_error_impl(&dword_1C9870000, v36, OS_LOG_TYPE_ERROR, "Running addLandmarksToDictionary(normalizedLandmarksToImage(**m_trackedFace->normalizedLandmarks(), bbox), *debugDictionary) failed with %s, returning %s", buf, 0x16u);
          }
          goto LABEL_80;
        }
        v55 = sub_1C98A2AD8((uint64_t)&a1[62], 1, *a2);
        v56 = v55 - 1;
        if (v55 == 1)
          v21 = 2;
        else
          v21 = v55;
        if (v55)
        {
          sub_1C98A5610();
          v36 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
          {
            v68 = off_1E8296478[v56];
            v69 = off_1E8296478[(v21 - 1)];
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = v68;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = v69;
            _os_log_error_impl(&dword_1C9870000, v36, OS_LOG_TYPE_ERROR, "Running addEyeCropDataToDictionary(m_leftEye, true, *debugDictionary) failed with %s, returning %s", buf, 0x16u);
          }
          goto LABEL_80;
        }
        v57 = sub_1C98A2AD8((uint64_t)&a1[40], 0, *a2);
        v58 = v57 - 1;
        if (v57 == 1)
          v21 = 2;
        else
          v21 = v57;
        if (v57)
        {
          sub_1C98A5610();
          v36 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
          {
            v75 = off_1E8296478[v58];
            v76 = off_1E8296478[(v21 - 1)];
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = v75;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = v76;
            _os_log_error_impl(&dword_1C9870000, v36, OS_LOG_TYPE_ERROR, "Running addEyeCropDataToDictionary(m_rightEye, false, *debugDictionary) failed with %s, returning %s", buf, 0x16u);
          }
          goto LABEL_80;
        }
        v59 = *a2;
        LODWORD(v80[0]) = a1[134].i32[0];
        cva::ItemHandler::createValue<float>();
        LOBYTE(v59) = cva::DictionaryHandler::setItem(v59, CFSTR("DebugRawLandmarksJitterValue"), (const cva::ItemHandler *)buf);
        cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
        if ((v59 & 1) != 0)
        {
          v80[0] = a2;
          sub_1C9893470(*(void **)(*(_QWORD *)&a1[38] + 56));
          v60 = (void *)objc_claimAutoreleasedReturnValue();
          sub_1C9893470(*(void **)(*(_QWORD *)&a1[38] + 64));
          v61 = (void *)objc_claimAutoreleasedReturnValue();
          v62 = sub_1C9893488(v80, v60, v61, CFSTR("DebugLeftWarpFieldAverageIntensity"));

          if (v62 == 1)
            v21 = 2;
          else
            v21 = v62;
          if (v62)
          {
            sub_1C98A5610();
            v36 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
            {
              v63 = off_1E8296478[v62 - 1];
              v64 = off_1E8296478[(v21 - 1)];
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = v63;
              *(_WORD *)&buf[12] = 2080;
              *(_QWORD *)&buf[14] = v64;
              v65 = "Running addWarpFieldIntensity(m_flowWarper->leftWarpfieldSurfaceX(), m_flowWarper->leftWarpfieldSurf"
                    "aceY(), kCVAViewpointCorrection_DebugLeftWarpFieldAverageIntensity) failed with %s, returning %s";
LABEL_84:
              _os_log_error_impl(&dword_1C9870000, v36, OS_LOG_TYPE_ERROR, v65, buf, 0x16u);
              goto LABEL_80;
            }
            goto LABEL_80;
          }
          sub_1C9893470(*(void **)(*(_QWORD *)&a1[38] + 88));
          v70 = (void *)objc_claimAutoreleasedReturnValue();
          sub_1C9893470(*(void **)(*(_QWORD *)&a1[38] + 96));
          v71 = (void *)objc_claimAutoreleasedReturnValue();
          v72 = sub_1C9893488(v80, v70, v71, CFSTR("DebugRightWarpFieldAverageIntensity"));

          v73 = v72 - 1;
          if (v72 == 1)
            v21 = 2;
          else
            v21 = v72;
          if (v72)
          {
            sub_1C98A5610();
            v36 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
            {
              v77 = off_1E8296478[v73];
              v78 = off_1E8296478[(v21 - 1)];
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = v77;
              *(_WORD *)&buf[12] = 2080;
              *(_QWORD *)&buf[14] = v78;
              v65 = "Running addWarpFieldIntensity(m_flowWarper->rightWarpfieldSurfaceX(), m_flowWarper->rightWarpfieldSu"
                    "rfaceY(), kCVAViewpointCorrection_DebugRightWarpFieldAverageIntensity) failed with %s, returning %s";
              goto LABEL_84;
            }
LABEL_80:

            return v21;
          }
          return 0;
        }
        sub_1C98A5610();
        v53 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_1C9870000, v53, OS_LOG_TYPE_ERROR, "Assertion failed: debugDictionary->setItem(kCVAViewpointCorrection_DebugRawLandmarksJitterValue, cva::ItemHandler::createValue(m_trackedFace->rawLandmarksJitter()))", buf, 2u);
        }
      }
      else
      {
        sub_1C98A5610();
        v53 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_1C9870000, v53, OS_LOG_TYPE_ERROR, "Assertion failed: m_trackedFace->normalizedLandmarks()", buf, 2u);
        }
      }
    }
    else
    {
      v52 = atomic_load((unsigned __int8 *)&qword_1EF921288);
      if ((v52 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
      {
        qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
        __cxa_guard_release(&qword_1EF921288);
      }
      v53 = (id)qword_1EF921280;
      if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_1C9870000, v53, OS_LOG_TYPE_ERROR, "Assertion failed: debugDictionary->setItem(kCVAViewpointCorrection_DebugEstimatedFaceDistance, cva::ItemHandler::createValue(m_trackedFace->faceDistance()))", buf, 2u);
      }
    }

  }
  else
  {
    v19 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v20 = (id)qword_1EF921280;
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1C9870000, v20, OS_LOG_TYPE_ERROR, "Assertion failed: debugDictionary->setItem(kCVAViewpointCorrection_DebugFadeoutFactor, cva::ItemHandler::createValue(fadeoutFactor))", buf, 2u);
    }

  }
  return 2;
}

void sub_1C989051C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t sub_1C989059C(uint64_t a1, int32x2_t a2)
{
  float v3;
  float v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  float16x8_t *v9;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  float v15;
  int v16;
  int i;
  int v23;
  int32x4_t v24;
  int32x4_t v25;
  float16x8_t *v26;
  unint64_t v27;
  int32x4_t v28;
  int32x4_t v29;
  __int16 *v30;
  int v31;
  float16x8_t *v33;
  uint64_t v34;
  int32x4_t v35;
  int32x4_t v36;
  float16x8_t *v37;
  unint64_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int v41;
  unsigned int v44;
  float v45;
  int32x2_t v46;
  float v47;
  unsigned int v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  float16x8_t *v52;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  float v57;
  int v58;
  int j;
  int k;
  unsigned int v62;
  int16x8_t v63;
  int16x8_t *v64;
  unint64_t v65;
  unsigned int v66;
  int v68;
  int16x8_t v69;
  int16x8_t *v70;
  unint64_t v71;
  __int16 *v72;
  int v73;
  int v74;
  int32x4_t v75;
  int32x4_t v76;
  float16x8_t *v77;
  unint64_t v78;
  int32x4_t v79;
  int32x4_t v80;
  __int16 *v81;
  int v82;
  int32x2_t v84;
  int32x2_t v85;

  v3 = *(float *)(a1 + 384);
  a2.i32[0] = *(_DWORD *)(a1 + 408);
  v84 = a2;
  v4 = *(float *)(a1 + 412);
  v5 = objc_msgSend(*(id *)(a1 + 488), "width");
  v6 = objc_msgSend(*(id *)(a1 + 488), "height");
  if (v6 >= 0)
    v7 = v6;
  else
    v7 = v6 + 1;
  v8 = objc_msgSend(*(id *)(a1 + 488), "bytesPerRow");
  objc_msgSend(*(id *)(a1 + 488), "lockWithOptions:seed:", 0, 0);
  v9 = (float16x8_t *)objc_msgSend(*(id *)(a1 + 488), "baseAddress");
  if ((int)v5 >= 1)
  {
    v11 = v7 >> 1;
    if ((int)(v7 >> 1) >= 1)
    {
      v12 = 2 * (int)v5;
      v13 = v8 - v12;
      v14 = v5 - (unint64_t)(v5 & 0xF);
      v15 = 1.0 / v3;
      if (v5 > 0xFuLL)
      {
        _Q1 = (float32x4_t)vdupq_lane_s32(v84, 0);
        v23 = 0;
        if ((v5 & 0xF) != 0)
        {
          v24.i64[0] = 0x800000008;
          v24.i64[1] = 0x800000008;
          v25.i64[0] = 0x1000000010;
          v25.i64[1] = 0x1000000010;
          do
          {
            v26 = v9 + 1;
            v27 = v5 - (unint64_t)(v5 & 0xF);
            v28 = (int32x4_t)xmmword_1C9927540;
            v29 = (int32x4_t)xmmword_1C9927530;
            do
            {
              v26[-1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmulq_n_f32(vsubq_f32(vcvtq_f32_s32(v28), _Q1), v15)), vmulq_n_f32(vsubq_f32(vcvtq_f32_s32(v29), _Q1), v15));
              *v26 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmulq_n_f32(vsubq_f32(vcvtq_f32_s32(vaddq_s32(v28, v24)), _Q1), v15)), vmulq_n_f32(vsubq_f32(vcvtq_f32_s32(vaddq_s32(v29, v24)), _Q1), v15));
              v28 = vaddq_s32(v28, v25);
              v29 = vaddq_s32(v29, v25);
              v26 += 2;
              v27 -= 16;
            }
            while (v27);
            v30 = &v9->i16[v14];
            v31 = -(v5 & 0xF);
            do
            {
              _S6 = v15 * (float)((float)(int)(v5 + v31) - *(float *)v84.i32);
              __asm { FCVT            H6, S6 }
              *v30++ = LOWORD(_S6);
              _CF = __CFADD__(v31++, 1);
            }
            while (!_CF);
            v9 = (float16x8_t *)((char *)v30 + v13);
            ++v23;
          }
          while (v23 != (_DWORD)v11);
        }
        else
        {
          v33 = v9 + 1;
          v34 = v8 + 2 * v5 - v12;
          v35.i64[0] = 0x800000008;
          v35.i64[1] = 0x800000008;
          v36.i64[0] = 0x1000000010;
          v36.i64[1] = 0x1000000010;
          do
          {
            v37 = v33;
            v38 = v5 - (unint64_t)(v5 & 0xF);
            v39 = (int32x4_t)xmmword_1C9927540;
            v40 = (int32x4_t)xmmword_1C9927530;
            do
            {
              v37[-1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmulq_n_f32(vsubq_f32(vcvtq_f32_s32(v39), _Q1), v15)), vmulq_n_f32(vsubq_f32(vcvtq_f32_s32(v40), _Q1), v15));
              *v37 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmulq_n_f32(vsubq_f32(vcvtq_f32_s32(vaddq_s32(v39, v35)), _Q1), v15)), vmulq_n_f32(vsubq_f32(vcvtq_f32_s32(vaddq_s32(v40, v35)), _Q1), v15));
              v39 = vaddq_s32(v39, v36);
              v40 = vaddq_s32(v40, v36);
              v37 += 2;
              v38 -= 16;
            }
            while (v38);
            v9 = (float16x8_t *)((char *)v9 + v14 * 2 + v13);
            ++v23;
            v33 = (float16x8_t *)((char *)v33 + v34);
          }
          while (v23 != (_DWORD)v11);
        }
      }
      else
      {
        v16 = 0;
        do
        {
          for (i = 0; i != v5; ++i)
          {
            _S1 = v15 * (float)((float)i - *(float *)v84.i32);
            __asm { FCVT            H1, S1 }
            v9->i16[0] = LOWORD(_S1);
            v9 = (float16x8_t *)((char *)v9 + 2);
          }
          v9 = (float16x8_t *)((char *)v9 + v13);
          ++v16;
        }
        while (v16 != (_DWORD)v11);
      }
      if (v5 >= 0x10uLL)
      {
        v68 = 0;
        do
        {
          _Q1.f32[0] = v15 * (float)((float)v68 - v4);
          __asm { FCVT            H1, S1 }
          v69 = vdupq_lane_s16(*(int16x4_t *)_Q1.f32, 0);
          v70 = (int16x8_t *)&v9[1];
          v71 = v5 - (unint64_t)(v5 & 0xF);
          do
          {
            v70[-1] = v69;
            *v70 = v69;
            v70 += 2;
            v71 -= 16;
          }
          while (v71);
          v72 = &v9->i16[v14];
          if ((v5 & 0xF) != 0)
          {
            v73 = v5 & 0xF;
            do
            {
              *v72++ = _Q1.i16[0];
              --v73;
            }
            while (v73);
          }
          v9 = (float16x8_t *)((char *)v72 + v13);
          ++v68;
        }
        while (v68 != (_DWORD)v11);
      }
      else
      {
        v41 = 0;
        do
        {
          _S1 = v15 * (float)((float)v41 - v4);
          __asm { FCVT            H1, S1 }
          v44 = v5;
          do
          {
            v9->i16[0] = _H1;
            v9 = (float16x8_t *)((char *)v9 + 2);
            --v44;
          }
          while (v44);
          v9 = (float16x8_t *)((char *)v9 + v13);
          ++v41;
        }
        while (v41 != (_DWORD)v11);
      }
    }
  }
  objc_msgSend(*(id *)(a1 + 488), "unlockWithOptions:seed:", 0, 0);
  v45 = *(float *)(a1 + 560);
  v46.i32[0] = *(_DWORD *)(a1 + 584);
  v85 = v46;
  v47 = *(float *)(a1 + 588);
  v48 = objc_msgSend(*(id *)(a1 + 664), "width");
  v49 = objc_msgSend(*(id *)(a1 + 664), "height");
  if (v49 >= 0)
    v50 = v49;
  else
    v50 = v49 + 1;
  v51 = objc_msgSend(*(id *)(a1 + 664), "bytesPerRow");
  objc_msgSend(*(id *)(a1 + 664), "lockWithOptions:seed:", 0, 0);
  v52 = (float16x8_t *)objc_msgSend(*(id *)(a1 + 664), "baseAddress");
  if ((int)v48 >= 1)
  {
    v54 = v50 >> 1;
    if ((int)(v50 >> 1) >= 1)
    {
      v55 = v51 - 2 * (int)v48;
      v56 = v48 - (unint64_t)(v48 & 0xF);
      v57 = 1.0 / v45;
      if (v48 >= 0x10uLL)
      {
        v74 = 0;
        _Q1 = (float32x4_t)vdupq_lane_s32(v85, 0);
        v75.i64[0] = 0x800000008;
        v75.i64[1] = 0x800000008;
        v76.i64[0] = 0x1000000010;
        v76.i64[1] = 0x1000000010;
        do
        {
          v77 = v52 + 1;
          v78 = v48 - (unint64_t)(v48 & 0xF);
          v79 = (int32x4_t)xmmword_1C9927540;
          v80 = (int32x4_t)xmmword_1C9927530;
          do
          {
            v77[-1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmulq_n_f32(vsubq_f32(vcvtq_f32_s32(v79), _Q1), v57)), vmulq_n_f32(vsubq_f32(vcvtq_f32_s32(v80), _Q1), v57));
            *v77 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmulq_n_f32(vsubq_f32(vcvtq_f32_s32(vaddq_s32(v79, v75)), _Q1), v57)), vmulq_n_f32(vsubq_f32(vcvtq_f32_s32(vaddq_s32(v80, v75)), _Q1), v57));
            v79 = vaddq_s32(v79, v76);
            v80 = vaddq_s32(v80, v76);
            v77 += 2;
            v78 -= 16;
          }
          while (v78);
          v81 = &v52->i16[v56];
          if ((v48 & 0xF) != 0)
          {
            v82 = -(v48 & 0xF);
            do
            {
              _S6 = v57 * (float)((float)(int)(v48 + v82) - *(float *)v85.i32);
              __asm { FCVT            H6, S6 }
              *v81++ = LOWORD(_S6);
              _CF = __CFADD__(v82++, 1);
            }
            while (!_CF);
          }
          v52 = (float16x8_t *)((char *)v81 + v55);
          ++v74;
        }
        while (v74 != (_DWORD)v54);
      }
      else
      {
        v58 = 0;
        do
        {
          for (j = 0; j != v48; ++j)
          {
            _S1 = v57 * (float)((float)j - *(float *)v85.i32);
            __asm { FCVT            H1, S1 }
            v52->i16[0] = LOWORD(_S1);
            v52 = (float16x8_t *)((char *)v52 + 2);
          }
          v52 = (float16x8_t *)((char *)v52 + v55);
          ++v58;
        }
        while (v58 != (_DWORD)v54);
      }
      for (k = 0; k != (_DWORD)v54; ++k)
      {
        _Q1.f32[0] = v57 * (float)((float)k - v47);
        __asm { FCVT            H1, S1 }
        if (v48 >= 0x10uLL)
        {
          v63 = vdupq_lane_s16(*(int16x4_t *)_Q1.f32, 0);
          v64 = (int16x8_t *)&v52[1];
          v65 = v48 - (unint64_t)(v48 & 0xF);
          do
          {
            v64[-1] = v63;
            *v64 = v63;
            v64 += 2;
            v65 -= 16;
          }
          while (v65);
          v52 = (float16x8_t *)((char *)v52 + v56 * 2);
          v62 = v48 - (v48 & 0xF);
          if ((v48 & 0xF) == 0)
            goto LABEL_41;
        }
        else
        {
          v62 = 0;
        }
        v66 = v48 - v62;
        do
        {
          v52->i16[0] = _Q1.i16[0];
          v52 = (float16x8_t *)((char *)v52 + 2);
          --v66;
        }
        while (v66);
LABEL_41:
        v52 = (float16x8_t *)((char *)v52 + v55);
      }
    }
  }
  return objc_msgSend(*(id *)(a1 + 664), "unlockWithOptions:seed:", 0, 0);
}

uint64_t sub_1C9890B0C(uint64_t a1, float32x2_t *a2)
{
  void *v3;
  unsigned __int8 v12;
  NSObject *v13;
  const char *v14;
  uint8_t *v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  __int16 v18;
  uint8_t buf[2];
  __int16 v20;

  if (!*(_BYTE *)(*(_QWORD *)(a1 + 296) + 257))
  {
    v12 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v13 = (id)qword_1EF921280;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      goto LABEL_14;
    v20 = 0;
    v14 = "Precondition violated: m_regressor->supportsConfigurableCorrectionIntensity()";
    v15 = (uint8_t *)&v20;
    goto LABEL_16;
  }
  v3 = *(void **)(a1 + 672);
  if (!v3)
  {
    v17 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v13 = (id)qword_1EF921280;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      goto LABEL_14;
    *(_WORD *)buf = 0;
    v14 = "Precondition violated: m_correctionIntensitySurface";
    v15 = buf;
    goto LABEL_16;
  }
  if (objc_msgSend(v3, "width") == 1 && objc_msgSend(*(id *)(a1 + 672), "height") == 1)
  {
    _S0 = sqrtf(vaddv_f32(vmul_f32(*a2, *a2)));
    __asm { FCVT            H8, S0 }
    objc_msgSend(*(id *)(a1 + 672), "lockWithOptions:seed:", 0, 0);
    *(_WORD *)objc_msgSend(*(id *)(a1 + 672), "baseAddress") = _H8;
    objc_msgSend(*(id *)(a1 + 672), "unlockWithOptions:seed:", 0, 0);
    return 0;
  }
  v16 = atomic_load((unsigned __int8 *)&qword_1EF921288);
  if ((v16 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
  }
  v13 = (id)qword_1EF921280;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    v18 = 0;
    v14 = "Precondition violated: m_correctionIntensitySurface.width == 1 && m_correctionIntensitySurface.height == 1";
    v15 = (uint8_t *)&v18;
LABEL_16:
    _os_log_error_impl(&dword_1C9870000, v13, OS_LOG_TYPE_ERROR, v14, v15, 2u);
  }
LABEL_14:

  return 1;
}

uint64_t sub_1C9890D54(uint64_t a1, uint64_t a2, float32x2_t *a3, float32x4_t *a4)
{
  uint64_t v4;
  unsigned __int8 v9;
  NSObject *v10;
  const char *v11;
  unsigned __int8 v12;
  const char *v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  NSObject *v20;
  uint64_t v21;
  char *v23;
  id v24;
  void *v25;
  id v26;
  __int16 *v27;
  float16x4_t v28;
  __int128 v29;
  float16x4_t v30;
  float16x4_t v31;
  float16x4_t v32;
  __int128 v33;
  float16x4_t v34;
  float16x4_t v35;
  float16x4_t v36;
  float16x4_t v37;
  float16x4_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  id v44;
  void *v45;
  id v46;
  __int16 *v47;
  float16x4_t v48;
  unint64_t v50;
  uint64_t v51;
  float32x2_t v57;
  float32x2_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v62;
  float32x2_t v63;
  int32x4_t v64;
  unsigned int v65;
  double v66;
  double v67;
  float32x4_t v68;
  unsigned int v69;
  NSObject *v70;
  char *v71;
  char *v72;
  const char *v73;
  unsigned __int8 v74;
  NSObject *v75;
  const char *v76;
  unsigned __int8 v77;
  unsigned __int8 v78;
  unsigned __int8 v79;
  unsigned __int8 v80;
  NSObject *v81;
  const char *v82;
  NSObject *v83;
  float32x4_t v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  const char *v88;
  const char *v89;
  float16x4_t v90;
  float32x4_t v91;
  __int128 v92;
  uint64_t v93;
  float32x4_t v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  uint8_t v98[4];
  void *v99;
  __int16 v100;
  void *v101;
  uint8_t v102[4];
  const char *v103;
  __int16 v104;
  const char *v105;
  _BYTE buf[24];
  __int128 v107;
  __int128 v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  __int128 v114;
  float16x4_t v115;
  __int128 v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;

  v124 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 296);
  if (*(_BYTE *)(v4 + 256))
  {
    if (*(_QWORD *)(v4 + 240))
    {
      if (*(_QWORD *)(v4 + 248))
      {
        if (e5rt_execution_stream_encode_operation())
        {
          v9 = atomic_load((unsigned __int8 *)&qword_1EF921288);
          if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
          {
            qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
            __cxa_guard_release(&qword_1EF921288);
          }
          v10 = (id)qword_1EF921280;
          if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            goto LABEL_26;
          *(_WORD *)buf = 0;
          v11 = "Assertion failed: isSuccess(e5rt_execution_stream_encode_operation(m_stream.get(), m_operation.get()))";
LABEL_25:
          _os_log_error_impl(&dword_1C9870000, v10, OS_LOG_TYPE_ERROR, v11, buf, 2u);
LABEL_26:
          v16 = 1;
          goto LABEL_27;
        }
        if (e5rt_execution_stream_execute_sync())
        {
          v17 = atomic_load((unsigned __int8 *)&qword_1EF921288);
          if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
          {
            qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
            __cxa_guard_release(&qword_1EF921288);
          }
          v10 = (id)qword_1EF921280;
          if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            goto LABEL_26;
          *(_WORD *)buf = 0;
          v11 = "Assertion failed: isSuccess(e5rt_execution_stream_execute_sync(m_stream.get()))";
          goto LABEL_25;
        }
        if (e5rt_execution_stream_reset())
        {
          v18 = atomic_load((unsigned __int8 *)&qword_1EF921288);
          if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
          {
            qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
            __cxa_guard_release(&qword_1EF921288);
          }
          v10 = (id)qword_1EF921280;
          if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            goto LABEL_26;
          *(_WORD *)buf = 0;
          v11 = "Assertion failed: isSuccess(e5rt_execution_stream_reset(m_stream.get()))";
          goto LABEL_25;
        }
        v24 = *(id *)(a1 + 680);
        v25 = v24;
        if (v24)
        {
          if (objc_msgSend(v24, "width") == 1)
          {
            if (objc_msgSend(v25, "height") == 48)
            {
              if (objc_msgSend(v25, "bytesPerElement") == 2)
              {
                if (objc_msgSend(v25, "bytesPerRow") == 64)
                {
                  objc_msgSend(v25, "lockWithOptions:seed:", 1, 0);
                  v26 = objc_retainAutorelease(v25);
                  v27 = (__int16 *)objc_msgSend(v26, "baseAddress");
                  v28.i16[0] = *v27;
                  v28.i16[1] = v27[32];
                  *(_QWORD *)&v29 = vcvtq_f32_f16(v28).u64[0];
                  v30.i16[0] = v27[64];
                  v30.i16[1] = v27[96];
                  v31 = (float16x4_t)vcvtq_f32_f16(v30).u64[0];
                  *((float16x4_t *)&v29 + 1) = v31;
                  *(_OWORD *)buf = v29;
                  LOWORD(v29) = v27[768];
                  WORD1(v29) = v27[800];
                  *(_QWORD *)&v29 = vcvtq_f32_f16(*(float16x4_t *)&v29).u64[0];
                  v31.i16[0] = v27[832];
                  v31.i16[1] = v27[864];
                  v32 = (float16x4_t)vcvtq_f32_f16(v31).u64[0];
                  *((float16x4_t *)&v29 + 1) = v32;
                  v32.i16[0] = v27[128];
                  v32.i16[1] = v27[160];
                  v114 = v29;
                  *(_QWORD *)&v29 = vcvtq_f32_f16(v32).u64[0];
                  v32.i16[0] = v27[192];
                  v32.i16[1] = v27[224];
                  *(_QWORD *)&v33 = vcvtq_f32_f16(v32).u64[0];
                  v34.i16[0] = v27[256];
                  v34.i16[1] = v27[288];
                  v35 = (float16x4_t)vcvtq_f32_f16(v34).u64[0];
                  *((float16x4_t *)&v33 + 1) = v35;
                  v35.i16[0] = v27[960];
                  v35.i16[1] = v27[992];
                  v107 = v33;
                  *(_QWORD *)&v33 = vcvtq_f32_f16(v35).u64[0];
                  v35.i16[0] = v27[1024];
                  v35.i16[1] = v27[1056];
                  v36 = (float16x4_t)vcvtq_f32_f16(v35).u64[0];
                  *((float16x4_t *)&v33 + 1) = v36;
                  v116 = v33;
                  LOWORD(v33) = v27[320];
                  WORD1(v33) = v27[352];
                  v36.i16[0] = v27[384];
                  v36.i16[1] = v27[416];
                  *(_QWORD *)&v33 = vcvtq_f32_f16(*(float16x4_t *)&v33).u64[0];
                  v37 = (float16x4_t)vcvtq_f32_f16(v36).u64[0];
                  *((float16x4_t *)&v33 + 1) = v37;
                  v37.i16[0] = v27[896];
                  v37.i16[1] = v27[928];
                  v38 = (float16x4_t)vcvtq_f32_f16(v37).u64[0];
                  v108 = v33;
                  LOWORD(v33) = v27[1088];
                  WORD1(v33) = v27[1120];
                  v39 = vcvtq_f32_f16(*(float16x4_t *)&v33).u64[0];
                  v115 = v38;
                  LOWORD(v33) = v27[1152];
                  WORD1(v33) = v27[1184];
                  *(_QWORD *)&v33 = vcvtq_f32_f16(*(float16x4_t *)&v33).u64[0];
                  v38.i16[0] = v27[448];
                  v38.i16[1] = v27[480];
                  v40 = vcvtq_f32_f16(v38).u64[0];
                  *(_QWORD *)&buf[16] = v29;
                  LOWORD(v29) = v27[1216];
                  WORD1(v29) = v27[1248];
                  v41 = vcvtq_f32_f16(*(float16x4_t *)&v29).u64[0];
                  v117 = v39;
                  v118 = v33;
                  LOWORD(v29) = v27[512];
                  WORD1(v29) = v27[544];
                  *(_QWORD *)&v29 = vcvtq_f32_f16(*(float16x4_t *)&v29).u64[0];
                  LOWORD(v33) = v27[1280];
                  WORD1(v33) = v27[1312];
                  *(_QWORD *)&v33 = vcvtq_f32_f16(*(float16x4_t *)&v33).u64[0];
                  v38.i16[0] = v27[576];
                  v38.i16[1] = v27[608];
                  v42 = vcvtq_f32_f16(v38).u64[0];
                  v109 = v40;
                  v110 = v29;
                  LOWORD(v29) = v27[1344];
                  WORD1(v29) = v27[1376];
                  v43 = vcvtq_f32_f16(*(float16x4_t *)&v29).u64[0];
                  v119 = v41;
                  v120 = v33;
                  LOWORD(v29) = v27[640];
                  WORD1(v29) = v27[672];
                  *(_QWORD *)&v29 = vcvtq_f32_f16(*(float16x4_t *)&v29).u64[0];
                  LOWORD(v33) = v27[1408];
                  WORD1(v33) = v27[1440];
                  v38.i16[0] = v27[704];
                  v38.i16[1] = v27[736];
                  v111 = v42;
                  v112 = v29;
                  v113 = vcvtq_f32_f16(v38).u64[0];
                  LOWORD(v29) = v27[1472];
                  WORD1(v29) = v27[1504];
                  v121 = v43;
                  v122 = vcvtq_f32_f16(*(float16x4_t *)&v33).u64[0];
                  v123 = vcvtq_f32_f16(*(float16x4_t *)&v29).u64[0];
                  objc_msgSend(v26, "unlockWithOptions:seed:", 1, 0);

                  v44 = *(id *)(a1 + 688);
                  v45 = v44;
                  if (v44)
                  {
                    if (objc_msgSend(v44, "width") == 1)
                    {
                      if (objc_msgSend(v45, "height") == 6)
                      {
                        if (objc_msgSend(v45, "bytesPerElement") == 2)
                        {
                          if (objc_msgSend(v45, "bytesPerRow") == 64)
                          {
                            objc_msgSend(v45, "lockWithOptions:seed:", 1, 0);
                            v46 = objc_retainAutorelease(v45);
                            v47 = (__int16 *)objc_msgSend(v46, "baseAddress");
                            v48.i16[0] = *v47;
                            v48.i16[1] = v47[32];
                            v90 = v48;
                            _H8 = v47[64];
                            objc_msgSend(v46, "unlockWithOptions:seed:", 1, 0);

                            v50 = objc_msgSend(*(id *)(a1 + 712), "width");
                            v51 = 0;
                            v91 = vcvtq_f32_f16(v90);
                            __asm { FCVT            S8, H8 }
                            v57 = *a3;
                            v58 = a3[1];
                            v59 = *a4;
                            v60 = a4[1];
                            __asm { FMOV            V5.2S, #1.0 }
                            v62 = a4[2];
                            do
                            {
                              v63 = vmul_n_f32(vmul_f32(vadd_f32(*(float32x2_t *)&buf[v51], _D5), (float32x2_t)0x3F0000003F000000), (float)v50);
                              v64 = (int32x4_t)vaddq_f32(v62, vmlaq_lane_f32(vmulq_n_f32(v59, v63.f32[0]), v60, v63, 1));
                              *(float32x2_t *)&v102[v51] = vdiv_f32(vsub_f32(vdiv_f32(*(float32x2_t *)v64.i8, (float32x2_t)vdup_laneq_s32(v64, 2)), v57), v58);
                              v51 += 8;
                            }
                            while (v51 != 96);
                            v96 = *(_OWORD *)(a2 + 36);
                            v97 = *(_QWORD *)(a2 + 52);
                            v65 = sub_1C98A4C90(a1 + 728, (float32x2_t *)v102, (uint64_t)&v96);
                            v69 = v65 - 1;
                            if (v65 == 1)
                              v21 = 2;
                            else
                              v21 = v65;
                            if (v65)
                            {
                              sub_1C98A5610();
                              v70 = objc_claimAutoreleasedReturnValue();
                              if (!os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
                              {
LABEL_91:

                                return v21;
                              }
                              v71 = off_1E8296478[v69];
                              v72 = off_1E8296478[(v21 - 1)];
                              *(_DWORD *)v98 = 136315394;
                              v99 = v71;
                              v100 = 2080;
                              v101 = v72;
                              v73 = "Running m_trackedFace->updateLandmarks(transformedLandmarks, data.timestamp()) faile"
                                    "d with %s, returning %s";
                            }
                            else
                            {
                              LODWORD(v66) = -1011613696;
                              v84 = v91;
                              v84.f32[2] = (float)((float)((float)(*(float *)(a1 + 792) + -90.0)
                                                         + (float)(floorf((float)((float)(*(float *)(a1 + 792) + -90.0)+ 180.0)/ 360.0)* -360.0))/ 57.296)+ _S8;
                              v94 = *(float32x4_t *)(a2 + 36);
                              v95 = *(_QWORD *)(a2 + 52);
                              sub_1C98A51CC(a1 + 728, &v94, vdivq_f32(v84, (float32x4_t)vdupq_n_s32(0x3C8EFA35u)), *(double *)v94.i64, v66, v67, v68);
                              v92 = *(_OWORD *)(a2 + 36);
                              v93 = *(_QWORD *)(a2 + 52);
                              v85 = sub_1C9892A74(a1, (float32x2_t *)buf, (uint64_t)&v92);
                              v86 = v85;
                              v87 = v85 - 1;
                              if (v85 == 1)
                                v21 = 2;
                              else
                                v21 = v85;
                              if (!v85)
                                return 0;
                              sub_1C98A5610();
                              v70 = objc_claimAutoreleasedReturnValue();
                              if (!os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
                                goto LABEL_91;
                              if (v86 > 7)
                                v88 = "Success, no error";
                              else
                                v88 = off_1E8296478[v87];
                              if (v21 > 7)
                                v89 = "Success, no error";
                              else
                                v89 = off_1E8296478[(v21 - 1)];
                              *(_DWORD *)v98 = 136315394;
                              v99 = (void *)v88;
                              v100 = 2080;
                              v101 = (void *)v89;
                              v73 = "Running updateJitterValue(landmarks, jitterOffset, data.timestamp()) failed with %s, returning %s";
                            }
                            _os_log_error_impl(&dword_1C9870000, v70, OS_LOG_TYPE_ERROR, v73, v98, 0x16u);
                            goto LABEL_91;
                          }
                          sub_1C98A5610();
                          v81 = objc_claimAutoreleasedReturnValue();
                          if (os_log_type_enabled(v81, OS_LOG_TYPE_ERROR))
                          {
                            *(_WORD *)v102 = 0;
                            v82 = "Precondition violated: surface.bytesPerRow == 64";
                            goto LABEL_82;
                          }
LABEL_83:

                          sub_1C98A5610();
                          v83 = objc_claimAutoreleasedReturnValue();
                          if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR))
                          {
                            *(_DWORD *)v102 = 136315394;
                            v103 = "Precondition was violated";
                            v104 = 2080;
                            v105 = "Assertion failed";
                            _os_log_error_impl(&dword_1C9870000, v83, OS_LOG_TYPE_ERROR, "Running readAnglesFromIOSurface(m_anglesSurface, rigidPoseAngles) failed with %s, returning %s", v102, 0x16u);
                          }

                          return 2;
                        }
                        sub_1C98A5610();
                        v81 = objc_claimAutoreleasedReturnValue();
                        if (!os_log_type_enabled(v81, OS_LOG_TYPE_ERROR))
                          goto LABEL_83;
                        *(_WORD *)v102 = 0;
                        v82 = "Precondition violated: surface.bytesPerElement == 2";
                      }
                      else
                      {
                        sub_1C98A5610();
                        v81 = objc_claimAutoreleasedReturnValue();
                        if (!os_log_type_enabled(v81, OS_LOG_TYPE_ERROR))
                          goto LABEL_83;
                        *(_WORD *)v102 = 0;
                        v82 = "Precondition violated: surface.height == 2 * 3";
                      }
                    }
                    else
                    {
                      sub_1C98A5610();
                      v81 = objc_claimAutoreleasedReturnValue();
                      if (!os_log_type_enabled(v81, OS_LOG_TYPE_ERROR))
                        goto LABEL_83;
                      *(_WORD *)v102 = 0;
                      v82 = "Precondition violated: surface.width == 1";
                    }
                  }
                  else
                  {
                    sub_1C98A5610();
                    v81 = objc_claimAutoreleasedReturnValue();
                    if (!os_log_type_enabled(v81, OS_LOG_TYPE_ERROR))
                      goto LABEL_83;
                    *(_WORD *)v102 = 0;
                    v82 = "Precondition violated: surface";
                  }
LABEL_82:
                  _os_log_error_impl(&dword_1C9870000, v81, OS_LOG_TYPE_ERROR, v82, v102, 2u);
                  goto LABEL_83;
                }
                sub_1C98A5610();
                v75 = objc_claimAutoreleasedReturnValue();
                if (!os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
                {
LABEL_68:

                  v80 = atomic_load((unsigned __int8 *)&qword_1EF921288);
                  if ((v80 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
                  {
                    qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
                    __cxa_guard_release(&qword_1EF921288);
                  }
                  v20 = (id)qword_1EF921280;
                  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 136315394;
                    *(_QWORD *)&buf[4] = "Precondition was violated";
                    *(_WORD *)&buf[12] = 2080;
                    *(_QWORD *)&buf[14] = "Assertion failed";
                    _os_log_error_impl(&dword_1C9870000, v20, OS_LOG_TYPE_ERROR, "Running readLandmarksFromIOSurface(m_landmarksSurface, landmarks) failed with %s, returning %s", buf, 0x16u);
                  }
                  goto LABEL_30;
                }
                *(_WORD *)buf = 0;
                v76 = "Precondition violated: surface.bytesPerRow == 64";
              }
              else
              {
                v79 = atomic_load((unsigned __int8 *)&qword_1EF921288);
                if ((v79 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
                {
                  qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
                  __cxa_guard_release(&qword_1EF921288);
                }
                v75 = (id)qword_1EF921280;
                if (!os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
                  goto LABEL_68;
                *(_WORD *)buf = 0;
                v76 = "Precondition violated: surface.bytesPerElement == 2";
              }
            }
            else
            {
              v78 = atomic_load((unsigned __int8 *)&qword_1EF921288);
              if ((v78 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
              {
                qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
                __cxa_guard_release(&qword_1EF921288);
              }
              v75 = (id)qword_1EF921280;
              if (!os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
                goto LABEL_68;
              *(_WORD *)buf = 0;
              v76 = "Precondition violated: surface.height == 2 * 2 * TrackedFace::kLandmarkCount";
            }
          }
          else
          {
            v77 = atomic_load((unsigned __int8 *)&qword_1EF921288);
            if ((v77 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
            {
              qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
              __cxa_guard_release(&qword_1EF921288);
            }
            v75 = (id)qword_1EF921280;
            if (!os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
              goto LABEL_68;
            *(_WORD *)buf = 0;
            v76 = "Precondition violated: surface.width == 1";
          }
        }
        else
        {
          v74 = atomic_load((unsigned __int8 *)&qword_1EF921288);
          if ((v74 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
          {
            qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
            __cxa_guard_release(&qword_1EF921288);
          }
          v75 = (id)qword_1EF921280;
          if (!os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
            goto LABEL_68;
          *(_WORD *)buf = 0;
          v76 = "Precondition violated: surface";
        }
        _os_log_error_impl(&dword_1C9870000, v75, OS_LOG_TYPE_ERROR, v76, buf, 2u);
        goto LABEL_68;
      }
      v15 = atomic_load((unsigned __int8 *)&qword_1EF921288);
      if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
      {
        qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
        __cxa_guard_release(&qword_1EF921288);
      }
      v10 = (id)qword_1EF921280;
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
LABEL_16:
        v16 = 0;
        goto LABEL_27;
      }
      *(_WORD *)buf = 0;
      v13 = "Precondition violated: m_operation";
    }
    else
    {
      v14 = atomic_load((unsigned __int8 *)&qword_1EF921288);
      if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
      {
        qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
        __cxa_guard_release(&qword_1EF921288);
      }
      v10 = (id)qword_1EF921280;
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        goto LABEL_16;
      *(_WORD *)buf = 0;
      v13 = "Precondition violated: m_stream";
    }
  }
  else
  {
    v12 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v10 = (id)qword_1EF921280;
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      goto LABEL_16;
    *(_WORD *)buf = 0;
    v13 = "Precondition violated: m_surfacesSet";
  }
  _os_log_error_impl(&dword_1C9870000, v10, OS_LOG_TYPE_ERROR, v13, buf, 2u);
  v16 = 0;
LABEL_27:

  v19 = atomic_load((unsigned __int8 *)&qword_1EF921288);
  if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
  {
    qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
    __cxa_guard_release(&qword_1EF921288);
  }
  v20 = (id)qword_1EF921280;
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    v23 = off_1E8296478[v16];
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v23;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "Assertion failed";
    _os_log_error_impl(&dword_1C9870000, v20, OS_LOG_TYPE_ERROR, "Running m_regressor->runNetwork() failed with %s, returning %s", buf, 0x16u);
  }
LABEL_30:

  return 2;
}

void sub_1C9891B48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1C9891B70(uint64_t a1, float32x2_t *a2)
{
  id v4;
  int v5;
  unsigned __int8 v6;
  NSObject *v7;
  uint64_t v8;
  unsigned __int8 v9;
  NSObject *v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  int v28;
  unsigned __int8 v29;
  NSObject *v30;
  const char *v31;
  id v32;
  unint64_t v33;
  unint64_t v34;
  float32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int v39;
  unsigned __int8 v40;
  const char *v41;
  id v42;
  unint64_t v43;
  unint64_t v44;
  float32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int v49;
  unsigned __int8 v50;
  const char *v51;
  uint64_t v52;
  float32x2_t v53;
  uint64_t v54;
  int v56;
  unsigned __int8 v57;
  const char *v59;
  const char *v60;
  uint8_t v61[16];
  _BYTE buf[24];
  float32x2_t v63;
  float32x2_t v64;
  float32x2_t v65;
  float32x2_t v66;
  float32x2_t v67;
  float32x2_t v68;
  float32x2_t v69;
  float32x2_t v70;
  float32x2_t v71;
  uint64_t v72;
  simd_float3x3 v73;
  simd_float3x3 v74;

  v72 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 192))
  {
    v6 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v7 = (id)qword_1EF921280;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1C9870000, v7, OS_LOG_TYPE_ERROR, "Precondition violated: m_textureY", buf, 2u);
    }
    v8 = 1;
    goto LABEL_38;
  }
  if (*(_BYTE *)(a1 + 264))
    goto LABEL_18;
  v4 = **(id **)(a1 + 240);
  sub_1C989256C((uint64_t)buf, v4, objc_msgSend(*(id *)(a1 + 192), "pixelFormat"));

  if (*(_DWORD *)&buf[16] == 1)
  {
    v5 = *(unsigned __int8 *)(a1 + 264);
    *(_QWORD *)(a1 + 248) = *(_QWORD *)buf;
    if (v5)
    {
      objc_storeStrong((id *)(a1 + 256), *(id *)&buf[8]);
    }
    else
    {
      *(_QWORD *)(a1 + 256) = *(id *)&buf[8];
      *(_BYTE *)(a1 + 264) = 1;
    }
    sub_1C9892A60((uint64_t)v61, (uint64_t)buf);
LABEL_18:
    objc_msgSend(*(id *)(a1 + 184), "commandBuffer");
    v7 = objc_claimAutoreleasedReturnValue();
    -[NSObject setLabel:](v7, "setLabel:", CFSTR("ViewpointCorrectionProcessor::drawDebugData"));
    if (!*(_BYTE *)(a1 + 944))
      goto LABEL_34;
    v11 = a2[1];
    v12 = vmla_f32(*a2, v11, *(float32x2_t *)(a1 + 808));
    v13 = vmla_f32(*a2, v11, *(float32x2_t *)(a1 + 816));
    v14 = vmla_f32(*a2, v11, *(float32x2_t *)(a1 + 824));
    v15 = vmla_f32(*a2, v11, *(float32x2_t *)(a1 + 832));
    v16 = vmla_f32(*a2, v11, *(float32x2_t *)(a1 + 840));
    v17 = vmla_f32(*a2, v11, *(float32x2_t *)(a1 + 848));
    v18 = vmla_f32(*a2, v11, *(float32x2_t *)(a1 + 856));
    v19 = vmla_f32(*a2, v11, *(float32x2_t *)(a1 + 864));
    v20 = vmla_f32(*a2, v11, *(float32x2_t *)(a1 + 872));
    v21 = vmla_f32(*a2, v11, *(float32x2_t *)(a1 + 880));
    v22 = vmla_f32(*a2, v11, *(float32x2_t *)(a1 + 888));
    *(float32x2_t *)buf = vmla_f32(*a2, v11, *(float32x2_t *)(a1 + 800));
    *(float32x2_t *)&buf[8] = v12;
    *(float32x2_t *)&buf[16] = v13;
    v63 = v14;
    v64 = v15;
    v65 = v16;
    v66 = v17;
    v67 = v18;
    v68 = v19;
    v69 = v20;
    v70 = v21;
    v71 = v22;
    __asm { FMOV            V0.4S, #1.0 }
    v28 = sub_1C98A34A8((_QWORD *)(a1 + 248), (uint64_t)buf, 0xCu, 0, *(void **)(a1 + 192), v7, _Q0);
    if (v28)
    {
      v8 = 2 * (v28 != 0);
      v29 = atomic_load((unsigned __int8 *)&qword_1EF921288);
      if ((v29 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
      {
        qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
        __cxa_guard_release(&qword_1EF921288);
      }
      v30 = (id)qword_1EF921280;
      if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
        goto LABEL_37;
      if ((v8 - 1) > 6)
        v31 = "Success, no error";
      else
        v31 = off_1E8296478[(v8 - 1)];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "Precondition was violated";
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v31;
      v60 = "Running draw(normalizedLandmarksToImage(**m_trackedFace->normalizedLandmarks(), bbox), PrimitiveTypePoints) "
            "failed with %s, returning %s";
      goto LABEL_51;
    }
    v32 = *(id *)(a1 + 656);
    v33 = objc_msgSend(v32, "width");
    v34 = objc_msgSend(*(id *)(a1 + 656), "height");

    v73 = __invert_f3(*(simd_float3x3 *)(a1 + 496));
    v35 = vmulq_f32((float32x4_t)v73.columns[0], (float32x4_t)0);
    v36 = (int32x4_t)vaddq_f32((float32x4_t)v73.columns[2], vmlaq_f32(v35, (float32x4_t)0, (float32x4_t)v73.columns[1]));
    v37 = (int32x4_t)vaddq_f32((float32x4_t)v73.columns[2], vmlaq_n_f32(v35, (float32x4_t)v73.columns[1], (float)v34));
    v73.columns[0] = (simd_float3)vmulq_n_f32((float32x4_t)v73.columns[0], (float)v33);
    v38 = (int32x4_t)vaddq_f32((float32x4_t)v73.columns[2], vmlaq_n_f32((float32x4_t)v73.columns[0], (float32x4_t)v73.columns[1], (float)v34));
    v73.columns[0] = (simd_float3)vaddq_f32((float32x4_t)v73.columns[2], vmlaq_f32((float32x4_t)v73.columns[0], (float32x4_t)0, (float32x4_t)v73.columns[1]));
    *(float32x2_t *)buf = vdiv_f32(*(float32x2_t *)v36.i8, (float32x2_t)vdup_laneq_s32(v36, 2));
    *(float32x2_t *)&buf[8] = vdiv_f32(*(float32x2_t *)v37.i8, (float32x2_t)vdup_laneq_s32(v37, 2));
    *(float32x2_t *)&buf[16] = vdiv_f32(*(float32x2_t *)v38.i8, (float32x2_t)vdup_laneq_s32(v38, 2));
    v63 = vdiv_f32(*(float32x2_t *)v73.columns[0].f32, (float32x2_t)vdup_laneq_s32((int32x4_t)v73.columns[0], 2));
    v64 = *(float32x2_t *)buf;
    __asm { FMOV            V0.4S, #1.0 }
    v39 = sub_1C98A34A8((_QWORD *)(a1 + 248), (uint64_t)buf, 5u, 2, *(void **)(a1 + 192), v7, (__n128)v73.columns[0]);
    if (v39)
    {
      v8 = 2 * (v39 != 0);
      v40 = atomic_load((unsigned __int8 *)&qword_1EF921288);
      if ((v40 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
      {
        qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
        __cxa_guard_release(&qword_1EF921288);
      }
      v30 = (id)qword_1EF921280;
      if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
        goto LABEL_37;
      if ((v8 - 1) > 6)
        v41 = "Success, no error";
      else
        v41 = off_1E8296478[(v8 - 1)];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "Precondition was violated";
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v41;
      v60 = "Running draw(linePoints(m_leftEye.cropCorners()), PrimitiveTypeLineStrip) failed with %s, returning %s";
      goto LABEL_51;
    }
    v42 = *(id *)(a1 + 480);
    v43 = objc_msgSend(v42, "width");
    v44 = objc_msgSend(*(id *)(a1 + 480), "height");

    v74 = __invert_f3(*(simd_float3x3 *)(a1 + 320));
    v45 = vmulq_f32((float32x4_t)v74.columns[0], (float32x4_t)0);
    v46 = (int32x4_t)vaddq_f32((float32x4_t)v74.columns[2], vmlaq_f32(v45, (float32x4_t)0, (float32x4_t)v74.columns[1]));
    v47 = (int32x4_t)vaddq_f32((float32x4_t)v74.columns[2], vmlaq_n_f32(v45, (float32x4_t)v74.columns[1], (float)v44));
    v74.columns[0] = (simd_float3)vmulq_n_f32((float32x4_t)v74.columns[0], (float)v43);
    v48 = (int32x4_t)vaddq_f32((float32x4_t)v74.columns[2], vmlaq_n_f32((float32x4_t)v74.columns[0], (float32x4_t)v74.columns[1], (float)v44));
    v74.columns[0] = (simd_float3)vaddq_f32((float32x4_t)v74.columns[2], vmlaq_f32((float32x4_t)v74.columns[0], (float32x4_t)0, (float32x4_t)v74.columns[1]));
    *(float32x2_t *)buf = vdiv_f32(*(float32x2_t *)v46.i8, (float32x2_t)vdup_laneq_s32(v46, 2));
    *(float32x2_t *)&buf[8] = vdiv_f32(*(float32x2_t *)v47.i8, (float32x2_t)vdup_laneq_s32(v47, 2));
    *(float32x2_t *)&buf[16] = vdiv_f32(*(float32x2_t *)v48.i8, (float32x2_t)vdup_laneq_s32(v48, 2));
    v63 = vdiv_f32(*(float32x2_t *)v74.columns[0].f32, (float32x2_t)vdup_laneq_s32((int32x4_t)v74.columns[0], 2));
    v64 = *(float32x2_t *)buf;
    __asm { FMOV            V0.4S, #1.0 }
    v49 = sub_1C98A34A8((_QWORD *)(a1 + 248), (uint64_t)buf, 5u, 2, *(void **)(a1 + 192), v7, (__n128)v74.columns[0]);
    if (v49)
    {
      v8 = 2 * (v49 != 0);
      v50 = atomic_load((unsigned __int8 *)&qword_1EF921288);
      if ((v50 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
      {
        qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
        __cxa_guard_release(&qword_1EF921288);
      }
      v30 = (id)qword_1EF921280;
      if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
        goto LABEL_37;
      if ((v8 - 1) > 6)
        v51 = "Success, no error";
      else
        v51 = off_1E8296478[(v8 - 1)];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "Precondition was violated";
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v51;
      v60 = "Running draw(linePoints(m_rightEye.cropCorners()), PrimitiveTypeLineStrip) failed with %s, returning %s";
    }
    else
    {
LABEL_34:
      *((float *)&v52 + 1) = COERCE_FLOAT(HIDWORD(*(unint64_t *)a2)) + a2[1].f32[1];
      v53.f32[0] = a2->f32[0] + a2[1].f32[0];
      *(float *)&v54 = v53.f32[0];
      *((float *)&v54 + 1) = *((float *)&v52 + 1);
      v53.i32[1] = a2->i32[1];
      *(float32x2_t *)buf = *a2;
      LODWORD(v52) = *(_DWORD *)buf;
      *(_QWORD *)&buf[8] = v52;
      *(_QWORD *)&buf[16] = v54;
      v63 = v53;
      v64 = *(float32x2_t *)buf;
      __asm { FMOV            V0.4S, #1.0 }
      v56 = sub_1C98A34A8((_QWORD *)(a1 + 248), (uint64_t)buf, 5u, 2, *(void **)(a1 + 192), v7, _Q0);
      if (!v56)
      {
        -[NSObject commit](v7, "commit");
        -[NSObject waitUntilCompleted](v7, "waitUntilCompleted");
        v8 = 0;
        goto LABEL_38;
      }
      v8 = 2 * (v56 != 0);
      v57 = atomic_load((unsigned __int8 *)&qword_1EF921288);
      if ((v57 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
      {
        qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
        __cxa_guard_release(&qword_1EF921288);
      }
      v30 = (id)qword_1EF921280;
      if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
LABEL_37:

LABEL_38:
        return v8;
      }
      if ((v8 - 1) > 6)
        v59 = "Success, no error";
      else
        v59 = off_1E8296478[(v8 - 1)];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "Precondition was violated";
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v59;
      v60 = "Running draw(linePoints(boundingBoxCorners(bbox)), PrimitiveTypeLineStrip) failed with %s, returning %s";
    }
LABEL_51:
    _os_log_error_impl(&dword_1C9870000, v30, OS_LOG_TYPE_ERROR, v60, buf, 0x16u);
    goto LABEL_37;
  }
  v9 = atomic_load((unsigned __int8 *)&qword_1EF921288);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
  {
    qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
    __cxa_guard_release(&qword_1EF921288);
  }
  v10 = (id)qword_1EF921280;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v61 = 0;
    _os_log_error_impl(&dword_1C9870000, v10, OS_LOG_TYPE_ERROR, "Assertion failed: std::holds_alternative<DebugRenderer>(rendererOrError)", v61, 2u);
  }

  if (*(_DWORD *)&buf[16] != -1)
    ((void (*)(uint8_t *, _BYTE *))*(&off_1E82963C8 + *(unsigned int *)&buf[16]))(v61, buf);
  return 2;
}

void sub_1C9892420(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1C989247C(uint64_t a1)
{
  uint64_t v2;
  id v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t result;
  id v7;

  if (!*(_QWORD *)a1)
  {
LABEL_4:
    v4 = *(_QWORD **)(a1 + 32);
    if (v4 == (_QWORD *)(a1 + 8))
    {
      v5 = 4;
      v4 = (_QWORD *)(a1 + 8);
    }
    else
    {
      if (!v4)
      {
LABEL_9:

        return a1;
      }
      v5 = 5;
    }
    (*(void (**)(void))(*v4 + 8 * v5))();
    goto LABEL_9;
  }
  v7 = *(id *)a1;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    (*(void (**)(uint64_t, id *))(*(_QWORD *)v2 + 48))(v2, &v7);

    v3 = *(id *)a1;
    *(_QWORD *)a1 = 0;

    goto LABEL_4;
  }
  result = sub_1C9889C1C();
  __break(1u);
  return result;
}

void sub_1C9892520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;

  v12 = *(_QWORD **)(v10 + 32);
  if (v12 == (_QWORD *)(v10 + 8))
  {
    v13 = 4;
    v12 = (_QWORD *)(v10 + 8);
  }
  else
  {
    if (!v12)
      goto LABEL_6;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_6:

  _Unwind_Resume(a1);
}

void sub_1C989256C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  BOOL v11;
  unsigned __int8 v12;
  NSObject *v13;
  unsigned __int8 v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  int v22;
  unsigned __int8 v23;
  NSObject *v24;
  uint64_t v25;
  id v26;
  unsigned int v27;
  unsigned __int8 v28;
  NSObject *v29;
  id v30;
  uint8_t buf[8];
  __int128 v32;
  unsigned int v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  *(_QWORD *)buf = 0;
  +[VPCMetalLib metalLibraryWithDevice:error:](VPCMetalLib, "metalLibraryWithDevice:error:", v5, buf);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = *(id *)buf;
  if (v6)
  {
    v8 = (void *)objc_msgSend(v6, "newFunctionWithName:", CFSTR("debugRendererVertex"));
    v9 = objc_msgSend(v6, "newFunctionWithName:", CFSTR("debugRendererFragment"));
    v10 = (void *)v9;
    if (v8)
      v11 = v9 == 0;
    else
      v11 = 1;
    if (v11)
    {
      v12 = atomic_load((unsigned __int8 *)&qword_1EF921288);
      if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
      {
        qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
        __cxa_guard_release(&qword_1EF921288);
      }
      v13 = (id)qword_1EF921280;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v32) = 0;
        _os_log_error_impl(&dword_1C9870000, v13, OS_LOG_TYPE_ERROR, "Could not find required metal functions.", (uint8_t *)&v32, 2u);
      }

      LODWORD(v32) = 2;
      v33 = 0;
    }
    else
    {
      v16 = (void *)objc_opt_new();
      objc_msgSend(v16, "setVertexFunction:", v8);
      objc_msgSend(v16, "setFragmentFunction:", v10);
      objc_msgSend(v16, "colorAttachments");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "objectAtIndexedSubscript:", 0);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "setPixelFormat:", a3);

      v30 = v7;
      v19 = (void *)objc_msgSend(v5, "newRenderPipelineStateWithDescriptor:error:", v16, &v30);
      v20 = v30;

      if (v19)
      {
        v21 = v19;
        *(_QWORD *)&v32 = a3;
        *((_QWORD *)&v32 + 1) = v21;
        v22 = 1;
      }
      else
      {
        v23 = atomic_load((unsigned __int8 *)&qword_1EF921288);
        if ((v23 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
        {
          qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
          __cxa_guard_release(&qword_1EF921288);
        }
        v24 = (id)qword_1EF921280;
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v32) = 138412290;
          *(_QWORD *)((char *)&v32 + 4) = v20;
          _os_log_error_impl(&dword_1C9870000, v24, OS_LOG_TYPE_ERROR, "Could not create render pipeline state: %@", (uint8_t *)&v32, 0xCu);
        }

        v22 = 0;
        LODWORD(v32) = 2;
      }
      v33 = v22;

      v7 = v20;
    }

  }
  else
  {
    v14 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v15 = (id)qword_1EF921280;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v32) = 138412290;
      *(_QWORD *)((char *)&v32 + 4) = v7;
      _os_log_error_impl(&dword_1C9870000, v15, OS_LOG_TYPE_ERROR, "Could not get metal library: %@", (uint8_t *)&v32, 0xCu);
    }

    LODWORD(v32) = 2;
    v33 = 0;
  }

  if (v33 == 1)
  {
    v25 = v32;
    v26 = *((id *)&v32 + 1);
    *(_QWORD *)a1 = v25;
    *(_QWORD *)(a1 + 8) = v26;
    v27 = 1;
    *(_DWORD *)(a1 + 16) = 1;
LABEL_29:
    ((void (*)(uint8_t *, __int128 *))*(&off_1E82963B8 + v27))(buf, &v32);
    return;
  }
  v28 = atomic_load((unsigned __int8 *)&qword_1EF921288);
  if ((v28 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
  {
    qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
    __cxa_guard_release(&qword_1EF921288);
  }
  v29 = (id)qword_1EF921280;
  if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1C9870000, v29, OS_LOG_TYPE_ERROR, "Assertion failed: std::holds_alternative<Config>(configOrError)", buf, 2u);
  }

  *(_DWORD *)a1 = 2;
  v27 = v33;
  *(_DWORD *)(a1 + 16) = 0;
  if (v27 != -1)
    goto LABEL_29;
}

void sub_1C98929F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1C9892A60(uint64_t a1, uint64_t a2)
{

}

void sub_1C9892A6C(uint64_t a1, uint64_t a2)
{

}

uint64_t sub_1C9892A74(uint64_t a1, float32x2_t *a2, uint64_t a3)
{
  _QWORD *v6;
  char *v7;
  uint64_t *v8;
  int32x2_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float v12;
  float32x2_t v13;
  float v14;
  float32x2_t v15;
  float v16;
  float32x2_t v17;
  float v18;
  float32x2_t v19;
  float v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  unsigned __int8 v29;
  NSObject *v30;
  char *v31;
  char *v32;
  unsigned __int8 v33;
  __int128 v35;
  _BYTE buf[24];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v6 = (_QWORD *)(*(_QWORD *)(a1 + 296) + 160);
  v7 = (char *)operator new(0x20uLL);
  *(_QWORD *)buf = v7;
  *(_OWORD *)&buf[8] = xmmword_1C9927550;
  strcpy(v7, "input_face_crop_image_low_res");
  v8 = sub_1C9892E58(v6, (uint64_t)buf);
  if (!v8)
    abort();
  v35 = *((_OWORD *)v8 + 3);
  operator delete(v7);
  v9.i32[1] = DWORD1(v35);
  if ((_DWORD)v35 != DWORD2(v35))
  {
    v33 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v33 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v30 = (id)qword_1EF921280;
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1C9870000, v30, OS_LOG_TYPE_ERROR, "Precondition violated: w == h", buf, 2u);
    }
    v28 = 1;
    goto LABEL_16;
  }
  *(float *)v9.i32 = 10.0 / (float)(int)v35;
  v10 = (float32x2_t)vdup_lane_s32(v9, 0);
  v11 = vsub_f32(a2[1], a2[13]);
  v12 = (float)(vaddv_f32(vabd_f32(vsub_f32(*a2, a2[12]), v10)) + vabds_f32(v11.f32[0], *(float *)v9.i32))
      + vabds_f32(v11.f32[1], *(float *)v9.i32);
  v13 = vsub_f32(a2[2], a2[14]);
  v14 = (float)(v12 + vabds_f32(v13.f32[0], *(float *)v9.i32)) + vabds_f32(v13.f32[1], *(float *)v9.i32);
  v15 = vsub_f32(a2[3], a2[15]);
  v16 = (float)(v14 + vabds_f32(v15.f32[0], *(float *)v9.i32)) + vabds_f32(v15.f32[1], *(float *)v9.i32);
  v17 = vsub_f32(a2[4], a2[16]);
  v18 = (float)(v16 + vabds_f32(v17.f32[0], *(float *)v9.i32)) + vabds_f32(v17.f32[1], *(float *)v9.i32);
  v19 = vsub_f32(a2[5], a2[17]);
  v20 = fmaxf((float)(v18 + vabds_f32(v19.f32[0], *(float *)v9.i32)) + vabds_f32(v19.f32[1], *(float *)v9.i32), 0.0);
  v19.f32[0] = vaddv_f32(vabd_f32(vsub_f32(a2[6], a2[18]), v10));
  v21 = vsub_f32(a2[7], a2[19]);
  v19.f32[0] = (float)(v19.f32[0] + vabds_f32(v21.f32[0], *(float *)v9.i32)) + vabds_f32(v21.f32[1], *(float *)v9.i32);
  v22 = vsub_f32(a2[8], a2[20]);
  v19.f32[0] = (float)(v19.f32[0] + vabds_f32(v22.f32[0], *(float *)v9.i32)) + vabds_f32(v22.f32[1], *(float *)v9.i32);
  v23 = vsub_f32(a2[9], a2[21]);
  v19.f32[0] = (float)(v19.f32[0] + vabds_f32(v23.f32[0], *(float *)v9.i32)) + vabds_f32(v23.f32[1], *(float *)v9.i32);
  v24 = vsub_f32(a2[10], a2[22]);
  v19.f32[0] = (float)(v19.f32[0] + vabds_f32(v24.f32[0], *(float *)v9.i32)) + vabds_f32(v24.f32[1], *(float *)v9.i32);
  v25 = vsub_f32(a2[11], a2[23]);
  *(float *)v9.i32 = (float)(v19.f32[0] + vabds_f32(v25.f32[0], *(float *)v9.i32))
                   + vabds_f32(v25.f32[1], *(float *)v9.i32);
  *(_OWORD *)buf = *(_OWORD *)a3;
  if (v20 >= *(float *)v9.i32)
    *(float *)v9.i32 = v20;
  *(_QWORD *)&buf[16] = *(_QWORD *)(a3 + 16);
  *(_DWORD *)(a1 + 1072) = v9.i32[0];
  v26 = sub_1C98A5008(a1 + 1080, (float *)(a1 + 1072), (uint64_t)buf);
  v27 = v26 - 1;
  if (v26 == 1)
    v28 = 2;
  else
    v28 = v26;
  if (v26)
  {
    v29 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v29 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v30 = (id)qword_1EF921280;
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      v31 = off_1E8296478[v27];
      v32 = off_1E8296478[(v28 - 1)];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v31;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v32;
      _os_log_error_impl(&dword_1C9870000, v30, OS_LOG_TYPE_ERROR, "Running m_trackedFace->updateLandmarksJitter(sum, timestamp) failed with %s, returning %s", buf, 0x16u);
    }
LABEL_16:

  }
  return v28;
}

void sub_1C9892E44(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_1C9892E58(_QWORD *a1, uint64_t a2)
{
  int v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = *(char *)(a2 + 23);
  if (v3 >= 0)
    v4 = (uint64_t *)a2;
  else
    v4 = *(uint64_t **)a2;
  if (v3 >= 0)
    v5 = *(unsigned __int8 *)(a2 + 23);
  else
    v5 = *(_QWORD *)(a2 + 8);
  v6 = sub_1C9893030(v4, v5);
  v7 = (int8x8_t)a1[1];
  if (v7)
  {
    v8 = v6;
    v9 = (uint8x8_t)vcnt_s8(v7);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v10 = v6;
      if (v6 >= *(_QWORD *)&v7)
        v10 = v6 % *(_QWORD *)&v7;
    }
    else
    {
      v10 = (*(_QWORD *)&v7 - 1) & v6;
    }
    v11 = *(uint64_t ***)(*a1 + 8 * v10);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        if (v9.u32[0] < 2uLL)
        {
          v13 = *(_QWORD *)&v7 - 1;
          while (1)
          {
            v19 = v12[1];
            if (v8 == v19)
            {
              v20 = *((unsigned __int8 *)v12 + 39);
              if ((v20 & 0x80u) == 0)
                v21 = *((unsigned __int8 *)v12 + 39);
              else
                v21 = v12[3];
              if (v21 == v5)
              {
                if ((v20 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v12[2], v4, v12[3]))
                    return v12;
                }
                else
                {
                  if (!*((_BYTE *)v12 + 39))
                    return v12;
                  v22 = 0;
                  while (*((unsigned __int8 *)v12 + v22 + 16) == *((unsigned __int8 *)v4 + v22))
                  {
                    if (v20 == ++v22)
                      return v12;
                  }
                }
              }
            }
            else if ((v19 & v13) != v10)
            {
              return 0;
            }
            result = 0;
            v12 = (uint64_t *)*v12;
            if (!v12)
              return result;
          }
        }
        while (1)
        {
          v15 = v12[1];
          if (v8 == v15)
          {
            v16 = *((unsigned __int8 *)v12 + 39);
            if ((v16 & 0x80u) == 0)
              v17 = *((unsigned __int8 *)v12 + 39);
            else
              v17 = v12[3];
            if (v17 == v5)
            {
              if ((v16 & 0x80) != 0)
              {
                if (!memcmp((const void *)v12[2], v4, v12[3]))
                  return v12;
              }
              else
              {
                if (!*((_BYTE *)v12 + 39))
                  return v12;
                v18 = 0;
                while (*((unsigned __int8 *)v12 + v18 + 16) == *((unsigned __int8 *)v4 + v18))
                {
                  if (v16 == ++v18)
                    return v12;
                }
              }
            }
          }
          else
          {
            if (v15 >= *(_QWORD *)&v7)
              v15 %= *(_QWORD *)&v7;
            if (v15 != v10)
              return 0;
          }
          result = 0;
          v12 = (uint64_t *)*v12;
          if (!v12)
            return result;
        }
      }
    }
  }
  return 0;
}

unint64_t sub_1C9893030(uint64_t *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;

  if (a2 > 0x20)
  {
    if (a2 <= 0x40)
    {
      v5 = *(uint64_t *)((char *)a1 + a2 - 16);
      v6 = *a1 - 0x3C5A37A36834CED9 * (v5 + a2);
      v8 = a1[2];
      v7 = a1[3];
      v9 = __ROR8__(v6 + v7, 52);
      v10 = v6 + a1[1];
      v11 = __ROR8__(v10, 7);
      v12 = v10 + v8;
      v13 = *(uint64_t *)((char *)a1 + a2 - 32) + v8;
      v14 = *(uint64_t *)((char *)a1 + a2 - 8) + v7;
      v15 = __ROR8__(v14 + v13, 52);
      v16 = v11 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v5 + a2), 37) + v9;
      v17 = __ROR8__(v13, 37);
      v18 = *(uint64_t *)((char *)a1 + a2 - 24) + v13;
      v19 = __ROR8__(v18, 7);
      v20 = v16 + __ROR8__(v12, 31);
      v21 = v18 + v5;
      v22 = v21 + v14;
      v23 = 0x9AE16A3B2F90404FLL;
      v24 = 0xC3A5C85C97CB3127 * (v22 + v20) - 0x651E95C4D06FBFB1 * (v12 + v7 + v17 + v19 + v15 + __ROR8__(v21, 31));
      v25 = v20 - 0x3C5A37A36834CED9 * (v24 ^ (v24 >> 47));
      return (v25 ^ (v25 >> 47)) * v23;
    }
    v32 = 0x9DDFEA08EB382D69;
    v33 = *(uint64_t *)((char *)a1 + a2 - 48);
    v34 = *(uint64_t *)((char *)a1 + a2 - 40);
    v35 = *(uint64_t *)((char *)a1 + a2 - 24);
    v37 = *(uint64_t *)((char *)a1 + a2 - 64);
    v36 = *(uint64_t *)((char *)a1 + a2 - 56);
    v38 = *(uint64_t *)((char *)a1 + a2 - 16);
    v39 = *(uint64_t *)((char *)a1 + a2 - 8);
    v40 = v36 + v38;
    v41 = 0x9DDFEA08EB382D69
        * (v35 ^ ((0x9DDFEA08EB382D69 * (v35 ^ (v33 + a2))) >> 47) ^ (0x9DDFEA08EB382D69 * (v35 ^ (v33 + a2))));
    v42 = 0x9DDFEA08EB382D69 * (v41 ^ (v41 >> 47));
    v43 = v37 + a2 + v36 + v33;
    v44 = v43 + v34;
    v45 = __ROR8__(v43, 44) + v37 + a2 + __ROR8__(v34 + v37 + a2 - 0x622015F714C7D297 * (v41 ^ (v41 >> 47)), 21);
    v46 = v36 + v38 + *(uint64_t *)((char *)a1 + a2 - 32) - 0x4B6D499041670D8DLL;
    v47 = v46 + v35 + v38;
    v48 = __ROR8__(v47, 44);
    v49 = v47 + v39;
    v50 = v48 + v46 + __ROR8__(v46 + v34 + v39, 21);
    v52 = *a1;
    v51 = a1 + 4;
    v53 = v52 - 0x4B6D499041670D8DLL * v34;
    v54 = -(uint64_t)((a2 - 1) & 0xFFFFFFFFFFFFFFC0);
    do
    {
      v55 = *(v51 - 3);
      v56 = v53 + v44 + v40 + v55;
      v57 = v51[2];
      v58 = v51[3];
      v59 = v51[1];
      v40 = v59 + v44 - 0x4B6D499041670D8DLL * __ROR8__(v40 + v45 + v57, 42);
      v60 = v42 + v49;
      v61 = *(v51 - 2);
      v62 = *(v51 - 1);
      v63 = *(v51 - 4) - 0x4B6D499041670D8DLL * v45;
      v64 = v63 + v49 + v62;
      v65 = v63 + v55 + v61;
      v44 = v65 + v62;
      v66 = __ROR8__(v65, 44) + v63;
      v67 = (0xB492B66FBE98F273 * __ROR8__(v56, 37)) ^ v50;
      v53 = 0xB492B66FBE98F273 * __ROR8__(v60, 33);
      v45 = v66 + __ROR8__(v64 + v67, 21);
      v68 = v53 + v50 + *v51;
      v49 = v68 + v59 + v57 + v58;
      v50 = __ROR8__(v68 + v59 + v57, 44) + v68 + __ROR8__(v40 + v61 + v68 + v58, 21);
      v51 += 8;
      v42 = v67;
      v54 += 64;
    }
    while (v54);
    v69 = v53
        - 0x622015F714C7D297
        * ((0x9DDFEA08EB382D69
          * (v50 ^ ((0x9DDFEA08EB382D69 * (v50 ^ v45)) >> 47) ^ (0x9DDFEA08EB382D69 * (v50 ^ v45)))) ^ ((0x9DDFEA08EB382D69 * (v50 ^ ((0x9DDFEA08EB382D69 * (v50 ^ v45)) >> 47) ^ (0x9DDFEA08EB382D69 * (v50 ^ v45)))) >> 47));
    v70 = 0x9DDFEA08EB382D69
        * (v69 ^ (v67
                - 0x4B6D499041670D8DLL * (v40 ^ (v40 >> 47))
                - 0x622015F714C7D297
                * ((0x9DDFEA08EB382D69
                  * (v49 ^ ((0x9DDFEA08EB382D69 * (v49 ^ v44)) >> 47) ^ (0x9DDFEA08EB382D69 * (v49 ^ v44)))) ^ ((0x9DDFEA08EB382D69 * (v49 ^ ((0x9DDFEA08EB382D69 * (v49 ^ v44)) >> 47) ^ (0x9DDFEA08EB382D69 * (v49 ^ v44)))) >> 47))));
    v71 = 0x9DDFEA08EB382D69 * (v69 ^ (v70 >> 47) ^ v70);
    goto LABEL_13;
  }
  if (a2 > 0x10)
  {
    v26 = a1[1];
    v27 = 0xB492B66FBE98F273 * *a1;
    v28 = __ROR8__(0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a1 + a2 - 8), 30) + __ROR8__(v27 - v26, 43);
    v29 = v27 + a2 + __ROR8__(v26 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a1 + a2 - 8);
    v23 = 0x9DDFEA08EB382D69;
    v30 = 0x9DDFEA08EB382D69 * ((v28 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)a1 + a2 - 16)) ^ v29);
    v31 = v29 ^ (v30 >> 47) ^ v30;
LABEL_8:
    v25 = 0x9DDFEA08EB382D69 * v31;
    return (v25 ^ (v25 >> 47)) * v23;
  }
  if (a2 >= 9)
  {
    v2 = *(uint64_t *)((char *)a1 + a2 - 8);
    v3 = __ROR8__(v2 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v3 ^ ((0x9DDFEA08EB382D69 * (v3 ^ *a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v3 ^ *a1)))) ^ ((0x9DDFEA08EB382D69 * (v3 ^ ((0x9DDFEA08EB382D69 * (v3 ^ *a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v3 ^ *a1)))) >> 47))) ^ v2;
  }
  if (a2 >= 4)
  {
    v72 = *(unsigned int *)((char *)a1 + a2 - 4);
    v23 = 0x9DDFEA08EB382D69;
    v73 = 0x9DDFEA08EB382D69 * (((8 * *(_DWORD *)a1) + a2) ^ v72);
    v31 = v72 ^ (v73 >> 47) ^ v73;
    goto LABEL_8;
  }
  v32 = 0x9AE16A3B2F90404FLL;
  if (a2)
  {
    v71 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                   * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
LABEL_13:
    v32 *= v71 ^ (v71 >> 47);
  }
  return v32;
}

void sub_1C9893464()
{
  std::terminate();
}

id sub_1C9893470(void *a1)
{
  objc_msgSend(a1, "iosurface");
  return (id)objc_claimAutoreleasedReturnValue();
}

uint64_t sub_1C9893488(cva::DictionaryHandler ***a1, void *a2, void *a3, const __CFString *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  uint64_t i;
  unsigned __int8 v28;
  NSObject *v29;
  const char *v30;
  unsigned __int8 v31;
  uint64_t j;
  float16x4_t v33;
  float32x2_t v34;
  unsigned __int8 v35;
  unsigned __int8 v36;
  unsigned __int8 v37;
  unsigned __int8 v38;
  NSObject *v39;
  uint64_t v40;
  const char *v42;
  NSObject *v43;
  uint32_t v44;
  cva::DictionaryHandler *v45;
  char v46;
  unsigned __int8 v47;
  id v48;
  void *v49;
  uint8_t buf[4];
  const char *v51;
  __int16 v52;
  const char *v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = v7;
  v10 = v8;
  v11 = objc_msgSend(v9, "width");
  if (v11 != objc_msgSend(v10, "width"))
  {
    v28 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v28 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v29 = (id)qword_1EF921280;
    if (!os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      goto LABEL_34;
    *(_WORD *)buf = 0;
    v30 = "Precondition violated: xSurface.width == ySurface.width";
    goto LABEL_33;
  }
  v12 = objc_msgSend(v9, "height");
  if (v12 != objc_msgSend(v10, "height"))
  {
    v31 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v31 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v29 = (id)qword_1EF921280;
    if (!os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      goto LABEL_34;
    *(_WORD *)buf = 0;
    v30 = "Precondition violated: xSurface.height == ySurface.height";
    goto LABEL_33;
  }
  v13 = objc_msgSend(v9, "bytesPerRow");
  if (v13 != objc_msgSend(v10, "bytesPerRow"))
  {
    v35 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v35 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v29 = (id)qword_1EF921280;
    if (!os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      goto LABEL_34;
    *(_WORD *)buf = 0;
    v30 = "Precondition violated: xSurface.bytesPerRow == ySurface.bytesPerRow";
    goto LABEL_33;
  }
  v14 = objc_msgSend(v9, "bytesPerElement");
  if (v14 != objc_msgSend(v10, "bytesPerElement"))
  {
    v36 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v36 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v29 = (id)qword_1EF921280;
    if (!os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      goto LABEL_34;
    *(_WORD *)buf = 0;
    v30 = "Precondition violated: xSurface.bytesPerElement == ySurface.bytesPerElement";
    goto LABEL_33;
  }
  if (objc_msgSend(v9, "bytesPerElement") != 2)
  {
    v37 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v37 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v29 = (id)qword_1EF921280;
    if (!os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      goto LABEL_34;
    *(_WORD *)buf = 0;
    v30 = "Precondition violated: xSurface.bytesPerElement == sizeof(_Float16)";
    goto LABEL_33;
  }
  v15 = objc_msgSend(v9, "bytesPerRow");
  v16 = objc_msgSend(v9, "bytesPerElement");
  v17 = objc_msgSend(v9, "bytesPerElement");
  v18 = v15 / v16;
  if (v17 * (v15 / v16) != objc_msgSend(v9, "bytesPerRow"))
  {
    sub_1C98A5610();
    v29 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      goto LABEL_34;
    *(_WORD *)buf = 0;
    v30 = "Precondition violated: elementsPerRow * xSurface.bytesPerElement == xSurface.bytesPerRow";
    goto LABEL_33;
  }
  v19 = objc_msgSend(v10, "bytesPerElement");
  if (v19 * v18 != objc_msgSend(v10, "bytesPerRow"))
  {
    sub_1C98A5610();
    v29 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      goto LABEL_34;
    *(_WORD *)buf = 0;
    v30 = "Precondition violated: elementsPerRow * ySurface.bytesPerElement == ySurface.bytesPerRow";
LABEL_33:
    _os_log_error_impl(&dword_1C9870000, v29, OS_LOG_TYPE_ERROR, v30, buf, 2u);
LABEL_34:

    v38 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v38 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v39 = (id)qword_1EF921280;
    if (!os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
      goto LABEL_36;
    *(_DWORD *)buf = 136315394;
    v51 = "Precondition was violated";
    v52 = 2080;
    v53 = "Assertion failed";
    v42 = "Running computeWarpFieldAverageIntensity(xSurface, ySurface, averageWarpFieldIntensity) failed with %s, returning %s";
    v43 = v39;
    v44 = 22;
    goto LABEL_39;
  }
  objc_msgSend(v9, "lockWithOptions:seed:", 1, 0);
  objc_msgSend(v10, "lockWithOptions:seed:", 1, 0);
  v20 = objc_retainAutorelease(v9);
  v21 = objc_msgSend(v20, "baseAddress");
  v22 = objc_retainAutorelease(v10);
  v23 = objc_msgSend(v22, "baseAddress");
  v48 = v22;
  v24 = 0;
  v25 = 2 * v18;
  v26 = 0.0;
  for (i = objc_msgSend(v20, "height", v48); i > v24; i = objc_msgSend(v20, "height", v49))
  {
    for (j = 0; objc_msgSend(v20, "width") > j; ++j)
    {
      v33.i16[0] = *(_WORD *)(v21 + 2 * j);
      v33.i16[1] = *(_WORD *)(v23 + 2 * j);
      v34 = (float32x2_t)vcvtq_f32_f16(v33).u64[0];
      v26 = v26 + sqrtf(vaddv_f32(vmul_f32(v34, v34)));
    }
    ++v24;
    v23 += v25;
    v21 += v25;
  }
  objc_msgSend(v49, "unlockWithOptions:seed:", 1, 0);
  objc_msgSend(v20, "unlockWithOptions:seed:", 1, 0);
  objc_msgSend(v20, "width");
  objc_msgSend(v20, "height");

  v45 = **a1;
  cva::ItemHandler::createValue<float>();
  v46 = cva::DictionaryHandler::setItem(v45, a4, (const cva::ItemHandler *)buf);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
  if ((v46 & 1) != 0)
  {
    v40 = 0;
    goto LABEL_37;
  }
  v47 = atomic_load((unsigned __int8 *)&qword_1EF921288);
  if ((v47 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
  {
    qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
    __cxa_guard_release(&qword_1EF921288);
  }
  v39 = (id)qword_1EF921280;
  if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    v42 = "Assertion failed: debugDictionary->setItem(key, cva::ItemHandler::createValue(averageWarpFieldIntensity))";
    v43 = v39;
    v44 = 2;
LABEL_39:
    _os_log_error_impl(&dword_1C9870000, v43, OS_LOG_TYPE_ERROR, v42, buf, v44);
  }
LABEL_36:

  v40 = 2;
LABEL_37:

  return v40;
}

void sub_1C9893B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  va_list va;

  va_start(va, a3);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)va);

  _Unwind_Resume(a1);
}

uint64_t sub_1C9893BA8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  if (!*a1)
  {
LABEL_4:
    v3 = (uint64_t *)a1[4];
    if (v3 == a1 + 1)
    {
      v4 = 4;
      v3 = a1 + 1;
    }
    else
    {
      if (!v3)
        return (uint64_t)a1;
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
    return (uint64_t)a1;
  }
  v6 = *a1;
  v2 = a1[4];
  if (v2)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v6);
    *a1 = 0;
    goto LABEL_4;
  }
  result = sub_1C9889C1C();
  __break(1u);
  return result;
}

void sub_1C9893C30(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)(v1 + 32);
  if (v3 == (_QWORD *)(v1 + 8))
  {
    v4 = 4;
    v3 = (_QWORD *)(v1 + 8);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1C9893C70()
{
  JUMPOUT(0x1CAA44AFCLL);
}

_QWORD *sub_1C9893C84()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E8295248;
  return result;
}

void sub_1C9893CA8(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E8295248;
}

void sub_1C9893CC0(uint64_t a1, CFTypeRef *a2)
{
  if (*a2)
    CFRelease(*a2);
}

void sub_1C9893CD4()
{
  JUMPOUT(0x1CAA44AFCLL);
}

_QWORD *sub_1C9893CE8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E82946B0;
  return result;
}

void sub_1C9893D0C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E82946B0;
}

uint64_t sub_1C9893D24(uint64_t a1, _QWORD *a2)
{
  return MEMORY[0x1E0DE7D20](*a2, sel_endScope);
}

uint64_t *sub_1C9893D2C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_1C98A0CE4(v2);
    MEMORY[0x1CAA44AFC](v3, 0x10A2C40AC51AD7DLL);
  }
  return a1;
}

_QWORD **sub_1C9893D70(_QWORD **a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_1C98898D8(v2);
    MEMORY[0x1CAA44AFC](v3, 0x10A0C4041783943);
  }
  return a1;
}

id **sub_1C9893DB4(id **a1)
{
  id *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {

    MEMORY[0x1CAA44AFC](v2, 0x80C4018A671A6);
  }
  return a1;
}

uint64_t sub_1C9893E18(uint64_t a1, const __CFDictionary *a2)
{
  id v4;
  NSObject *v5;
  NSObject *inactive;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  int v11;
  _BOOL4 v12;
  int v13;
  unsigned __int8 v14;
  uint64_t v15;
  NSObject *v16;
  unsigned __int8 v17;
  NSObject *v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  NSObject *v22;
  unsigned __int8 v23;
  NSObject *v24;
  void *v25;
  CVABilinearSampler *v26;
  void *v27;
  CVABilinearSampler *v28;
  void *v29;
  unsigned __int8 v30;
  NSObject *v31;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  unint64_t v38;
  unsigned __int8 *v39;
  unsigned __int8 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unsigned __int8 v44;
  NSObject *v45;
  int v46;
  unsigned __int8 v47;
  NSObject *v48;
  int v49;
  uint64_t v50;
  int v51;
  unsigned __int8 v52;
  NSObject *v53;
  char *v54;
  const char *v55;
  char *v56;
  unsigned __int8 v57;
  NSObject *v58;
  unsigned int v59;
  int num_inputs;
  const char **v61;
  int input_names;
  unint64_t v63;
  uint64_t v64;
  int num_outputs;
  int output_names;
  unint64_t v67;
  uint64_t v68;
  const char **v69;
  const char **v70;
  _OWORD *v71;
  const char **v72;
  const char **v73;
  const char *v74;
  const char **v75;
  const char **v76;
  unsigned __int8 v77;
  NSObject *v78;
  char *v79;
  unsigned __int8 v80;
  const char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  const char **v85;
  uint64_t v86;
  uint64_t v87;
  uint8_t *v88;
  const char **v89;
  const char **v90;
  const char **v91;
  const char **v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  NSObject *v95;
  _QWORD *v96;
  NSObject *v97;
  char *v98;
  const char *v99;
  _QWORD *v100;
  _QWORD *v101;
  float v102;
  unsigned int v103;
  unsigned int v104;
  char *v105;
  char *v106;
  unsigned int v107;
  unsigned int v108;
  char *v109;
  char *v110;
  unsigned int v111;
  unsigned int v112;
  char *v113;
  char *v114;
  char *v115;
  char *v116;
  unsigned int v117;
  unsigned int v118;
  char *v119;
  char *v120;
  void *v121;
  void *v122;
  id v123;
  __int128 *v124;
  id v125;
  id v126;
  id v127;
  void *v128;
  unsigned __int8 *v129;
  void *v130;
  unsigned __int8 *v131;
  void *v132;
  unsigned __int8 *v133;
  void *v134;
  unsigned __int8 *v135;
  void *v136;
  unsigned __int8 *v137;
  void *v138;
  unsigned __int8 *v139;
  void *v140;
  unsigned __int8 *v141;
  void *v142;
  unsigned __int8 *v143;
  uint64_t v144;
  unsigned __int8 *v145;
  void *v146;
  uint64_t v147;
  unsigned __int8 *v148;
  void *v149;
  uint64_t v150;
  unsigned __int8 *v151;
  void *v152;
  uint64_t v153;
  unsigned __int8 *v154;
  void *v155;
  unsigned int v156;
  unsigned int v157;
  NSObject *v158;
  const char **v159;
  uint64_t v160;
  int v161;
  NSObject *v162;
  const char *v163;
  size_t v164;
  size_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  uint64_t v172;
  int v173;
  int v174;
  int v175;
  int v176;
  char *v177;
  char *v178;
  const char **v179;
  int v180;
  uint64_t v181;
  int v182;
  NSObject *v183;
  const char *v184;
  size_t v185;
  size_t v186;
  uint8_t *v187;
  uint8_t *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t *v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  uint64_t v195;
  int v196;
  int v197;
  int v198;
  int v199;
  _QWORD *i;
  char *v201;
  uint64_t v202;
  _QWORD *v203;
  void *v204;
  _QWORD *j;
  char *v206;
  uint64_t v207;
  _QWORD *v208;
  void *v209;
  int v210;
  const char *v211;
  int v212;
  int v213;
  _BYTE *__dst;
  const char **v215;
  const char **v216;
  char *v217;
  int v218;
  int v219;
  __int128 v220;
  const char **__p;
  char *v222;
  __int128 v223;
  int64x2_t v224;
  __int128 v225;
  __int128 v226;
  int64x2_t v227;
  const char **v228;
  void *v229[2];
  void *v230[2];
  int v231;
  __int128 v232;
  __int128 v233;
  std::string v234;
  _BYTE v235[16];
  void *v236[2];
  int64x2_t v237[2];
  char v238[8];
  char v239[8];
  char v240[8];
  uint64_t v241;
  _BYTE v242[32];
  uint8_t v243[23];
  char v244;
  uint8_t v245[8];
  uint8_t buf[32];
  int v247;
  uint64_t v248;

  v248 = *MEMORY[0x1E0C80C00];
  v4 = MTLCreateSystemDefaultDevice();
  v236[0] = v4;
  if (!v4)
  {
    v19 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v5 = (id)qword_1EF921280;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1C9870000, v5, OS_LOG_TYPE_ERROR, "Assertion failed: device = (id<MTLDeviceSPI>)MTLCreateSystemDefaultDevice()", buf, 2u);
    }
    v15 = 6;
    goto LABEL_37;
  }
  v5 = objc_opt_new();
  -[NSObject setCommitSynchronously:](v5, "setCommitSynchronously:", 1);
  inactive = dispatch_workloop_create_inactive("com.apple.applecva.viewpointcorrection.metal.workloop");
  if (!inactive)
  {
    v20 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v20 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v7 = (id)qword_1EF921280;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v15 = 2;
      _os_log_error_impl(&dword_1C9870000, v7, OS_LOG_TYPE_ERROR, "Assertion failed: completionWorkloop", buf, 2u);
    }
    else
    {
      v15 = 2;
    }
    goto LABEL_36;
  }
  dispatch_workloop_set_scheduler_priority();
  dispatch_activate(inactive);
  v7 = dispatch_queue_create_with_target_V2("com.apple.applecva.viewpointcorrection.metal.queue", 0, inactive);
  -[NSObject setCompletionQueue:](v5, "setCompletionQueue:", v7);
  if (!v7)
  {
    v21 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v21 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v22 = (id)qword_1EF921280;
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1C9870000, v22, OS_LOG_TYPE_ERROR, "Assertion failed: queueDescriptor.completionQueue = completionQueue", buf, 2u);
    }

    v7 = 0;
    v15 = 2;
    goto LABEL_36;
  }
  v8 = objc_msgSend(v4, "newCommandQueueWithDescriptor:", v5);
  v9 = *(void **)(a1 + 184);
  *(_QWORD *)(a1 + 184) = v8;

  if (!v8)
  {
    v23 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v23 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v24 = (id)qword_1EF921280;
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1C9870000, v24, OS_LOG_TYPE_ERROR, "Assertion failed: m_queue = [device newCommandQueueWithDescriptor:queueDescriptor]", buf, 2u);
    }

    goto LABEL_35;
  }
  v10 = operator new();
  *(_QWORD *)v10 = 0;
  *(_QWORD *)(v10 + 8) = 0;
  *(_QWORD *)(v10 + 16) = &off_1E8295290;
  *(_QWORD *)(v10 + 40) = v10 + 16;
  *(_QWORD *)v242 = v10;
  v11 = sub_1C98A468C((id *)v10, v4);
  v12 = v11 != 0;
  if (v11)
  {
    v13 = v11;
    v14 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v15 = (2 * v12);
    v16 = (id)qword_1EF921280;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      v54 = off_1E8296478[v13 - 1];
      if ((v15 - 1) > 6)
        v55 = "Success, no error";
      else
        v55 = off_1E8296478[(v15 - 1)];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v54;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v55;
      _os_log_error_impl(&dword_1C9870000, v16, OS_LOG_TYPE_ERROR, "Running result->setup(std::forward<Params>(params)...) failed with %s, returning %s", buf, 0x16u);
    }

    sub_1C9889B34((uint64_t *)v242, 0);
    v17 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v18 = (id)qword_1EF921280;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      v56 = off_1E8296478[(v15 - 1)];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v56;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v56;
      _os_log_error_impl(&dword_1C9870000, v18, OS_LOG_TYPE_ERROR, "Running construct(m_metalHelpers, device) failed with %s, returning %s", buf, 0x16u);
    }

    goto LABEL_36;
  }
  *(_QWORD *)v242 = 0;
  sub_1C9889B34((uint64_t *)(a1 + 240), v10);
  sub_1C9889B34((uint64_t *)v242, 0);
  v25 = v236[0];
  v26 = -[CVABilinearSampler initWithDevice:mode:]([CVABilinearSampler alloc], "initWithDevice:mode:", v236[0], 0);
  v27 = *(void **)(a1 + 216);
  *(_QWORD *)(a1 + 216) = v26;

  if (!v26
    || (v28 = -[CVABilinearSampler initWithDevice:mode:]([CVABilinearSampler alloc], "initWithDevice:mode:", v25, 1), v29 = *(void **)(a1 + 224), *(_QWORD *)(a1 + 224) = v28, v29, !v28))
  {
    v30 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v30 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v31 = (id)qword_1EF921280;
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1C9870000, v31, OS_LOG_TYPE_ERROR, "Assertion failed: m_imageSamplers[mode] = [[CVABilinearSampler alloc] initWithDevice:device mode:mode]", buf, 2u);
    }

LABEL_35:
    v15 = 6;
    goto LABEL_36;
  }
  cva::DictionaryHandler::DictionaryHandler((cva::DictionaryHandler *)v235, a2);
  sub_1C98FE4FC(&v234, "resources_viewpointcorrection/");
  if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)v235, CFSTR("UseFixedCorrection")))
  {
    cva::DictionaryHandler::item((cva::DictionaryHandler *)v235, CFSTR("UseFixedCorrection"));
    v231 = cva::ItemHandler::getValue<BOOL>();
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
  }
  else
  {
    v231 = sub_1C98967C4();
  }
  v33 = operator new();
  *(_OWORD *)(v33 + 208) = 0u;
  *(_OWORD *)(v33 + 224) = 0u;
  *(_OWORD *)(v33 + 176) = 0u;
  *(_OWORD *)(v33 + 192) = 0u;
  *(_OWORD *)(v33 + 128) = 0u;
  *(_OWORD *)(v33 + 144) = 0u;
  *(_OWORD *)(v33 + 96) = 0u;
  *(_OWORD *)(v33 + 112) = 0u;
  *(_OWORD *)(v33 + 48) = 0u;
  *(_OWORD *)(v33 + 64) = 0u;
  *(_OWORD *)(v33 + 16) = 0u;
  *(_OWORD *)(v33 + 32) = 0u;
  *(_OWORD *)v33 = 0u;
  *(_OWORD *)(v33 + 240) = 0u;
  *(_OWORD *)(v33 + 160) = 0u;
  *(_OWORD *)(v33 + 80) = 0u;
  *(_DWORD *)(v33 + 32) = 1065353216;
  *(_QWORD *)(v33 + 256) = 0;
  *(_OWORD *)(v33 + 40) = 0u;
  *(_OWORD *)(v33 + 56) = 0u;
  *(_DWORD *)(v33 + 72) = 1065353216;
  *(_OWORD *)(v33 + 80) = 0u;
  *(_OWORD *)(v33 + 96) = 0u;
  *(_DWORD *)(v33 + 112) = 1065353216;
  *(_OWORD *)(v33 + 120) = 0u;
  *(_OWORD *)(v33 + 136) = 0u;
  *(_DWORD *)(v33 + 152) = 1065353216;
  *(_OWORD *)(v33 + 160) = 0u;
  *(_OWORD *)(v33 + 176) = 0u;
  *(_DWORD *)(v33 + 192) = 1065353216;
  *(_OWORD *)(v33 + 200) = 0u;
  *(_OWORD *)(v33 + 216) = 0u;
  *(_DWORD *)(v33 + 232) = 1065353216;
  *(_QWORD *)(v33 + 248) = 0;
  *(_QWORD *)(v33 + 240) = 0;
  v236[1] = (void *)v33;
  *(_BYTE *)(v33 + 256) = 0;
  v34 = (char *)operator new(0x20uLL);
  strcpy(v34, "viewpoint_correction_eyecrop");
  v35 = (char *)operator new(0x28uLL);
  v36 = v35;
  strcpy(v35, "viewpoint_correction_eyecrop_offset");
  if (v231)
    v37 = v34;
  else
    v37 = v35;
  if (v231)
    v38 = 28;
  else
    v38 = 35;
  sub_1C987D148(buf, v37, v38);
  cva::Path::Path();
  cva::Path::Path();
  cva::Path::Path((cva::Path *)v243, (const cva::Path *)&v241);
  cva::Path::append();
  cva::Path::Path((cva::Path *)v245, (const cva::Path *)v243);
  cva::Path::~Path((cva::Path *)v243);
  cva::Path::Path();
  cva::Path::Path((cva::Path *)v243, (const cva::Path *)v245);
  cva::Path::append();
  cva::Path::Path((cva::Path *)v240, (const cva::Path *)v243);
  cva::Path::~Path((cva::Path *)v243);
  cva::Path::~Path((cva::Path *)v238);
  cva::Path::~Path((cva::Path *)v245);
  cva::Path::~Path((cva::Path *)v239);
  cva::Path::~Path((cva::Path *)&v241);
  *(_BYTE *)(v33 + 257) = v231 ^ 1;
  v244 = 7;
  strcpy((char *)v243, ".bundle");
  cva::Path::Path((cva::Path *)v245, (const cva::Path *)v240);
  cva::Path::concatenate();
  cva::Path::Path((cva::Path *)v239, (const cva::Path *)v245);
  cva::Path::~Path((cva::Path *)v245);
  if (v244 < 0)
    operator delete(*(void **)v243);
  if (!cva::Path::exists((cva::Path *)v239))
  {
    v244 = 4;
    strcpy((char *)v243, ".mil");
    cva::Path::Path((cva::Path *)v245, (const cva::Path *)v240);
    cva::Path::concatenate();
    cva::Path::Path((cva::Path *)v238, (const cva::Path *)v245);
    cva::Path::~Path((cva::Path *)v245);
    if (v244 < 0)
      operator delete(*(void **)v243);
    v46 = cva::Path::exists((cva::Path *)v238);
    v41 = (uint64_t)&qword_1EF921288;
    v47 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if (v46)
    {
      if ((v47 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
      {
        qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
        __cxa_guard_release(&qword_1EF921288);
      }
      v48 = (id)qword_1EF921280;
      if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
      {
        v86 = cva::Path::string((cva::Path *)v238);
        if (*(char *)(v86 + 23) >= 0)
          v87 = v86;
        else
          v87 = *(_QWORD *)v86;
        *(_DWORD *)v243 = 136315138;
        *(_QWORD *)&v243[4] = v87;
        _os_log_debug_impl(&dword_1C9870000, v48, OS_LOG_TYPE_DEBUG, "Initializing ViewpointCorrectionRegressor with %s", v243, 0xCu);
      }

      cva::Path::string((cva::Path *)v238);
      *(_OWORD *)v243 = (unint64_t)(v33 + 248);
      v49 = sub_1C9905B54();
      v50 = **(_QWORD **)v243;
      **(_QWORD **)v243 = *(_QWORD *)&v243[8];
      if (v50)
      {
        v241 = v50;
        v51 = e5rt_execution_stream_operation_release();
        if (v51)
        {
          v213 = v51;
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v245 = 67109120;
            *(_DWORD *)&v245[4] = v213;
            _os_log_error_impl(&dword_1C9870000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "e5rt::AssertSuccess failed with error code %d.", v245, 8u);
          }
        }
      }
      if (!v49)
      {
        cva::Path::~Path((cva::Path *)v238);
        goto LABEL_80;
      }
      v52 = atomic_load((unsigned __int8 *)&qword_1EF921288);
      if ((v52 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
      {
        qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
        __cxa_guard_release(&qword_1EF921288);
      }
      v53 = (id)qword_1EF921280;
      if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v243 = 0;
        v15 = 2;
        _os_log_error_impl(&dword_1C9870000, v53, OS_LOG_TYPE_ERROR, "Assertion failed: isSuccess(e5rt::init_execution_stream_operation_from_file(modelPath.string().c_str(), \"main\", E5RT_COMPUTE_DEVICE_TYPE_ANE, e5rt::out(&m_operation)))", v243, 2u);
      }
      else
      {
        v15 = 2;
      }
    }
    else
    {
      if ((v47 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
      {
        qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
        __cxa_guard_release(&qword_1EF921288);
      }
      v53 = (id)qword_1EF921280;
      if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
      {
        v88 = buf;
        if ((buf[23] & 0x80u) != 0)
          v88 = *(uint8_t **)buf;
        *(_DWORD *)v243 = 136315138;
        *(_QWORD *)&v243[4] = v88;
        _os_log_error_impl(&dword_1C9870000, v53, OS_LOG_TYPE_ERROR, "Cannot initialize ViewpointCorrectionRegressor for %s. Missing network resources.", v243, 0xCu);
      }
      v15 = 5;
    }

    cva::Path::~Path((cva::Path *)v238);
    goto LABEL_76;
  }
  v39 = (unsigned __int8 *)&qword_1EF921288;
  v40 = atomic_load((unsigned __int8 *)&qword_1EF921288);
  if ((v40 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
  {
    qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
    __cxa_guard_release(&qword_1EF921288);
  }
  v41 = (uint64_t)&unk_1EF921000;
  v15 = (uint64_t)(id)qword_1EF921280;
  if (os_log_type_enabled((os_log_t)v15, OS_LOG_TYPE_DEBUG))
  {
    v83 = cva::Path::string((cva::Path *)v239);
    if (*(char *)(v83 + 23) >= 0)
      v84 = v83;
    else
      v84 = *(_QWORD *)v83;
    *(_DWORD *)v243 = 136315138;
    *(_QWORD *)&v243[4] = v84;
    _os_log_debug_impl(&dword_1C9870000, (os_log_t)v15, OS_LOG_TYPE_DEBUG, "Initializing ViewpointCorrectionRegressor with %s", v243, 0xCu);
  }

  cva::Path::string((cva::Path *)v239);
  *(_OWORD *)v243 = (unint64_t)(v33 + 248);
  LODWORD(v15) = e5rt_execution_stream_operation_create_precompiled_compute_operation();
  v42 = **(_QWORD **)v243;
  **(_QWORD **)v243 = *(_QWORD *)&v243[8];
  if (!v42)
    goto LABEL_54;
  v41 = (uint64_t)&qword_1EF921288;
  v241 = v42;
  v43 = e5rt_execution_stream_operation_release();
  if (v43)
    goto LABEL_327;
  while (1)
  {
    v39 = (unsigned __int8 *)v41;
    v41 = (uint64_t)&unk_1EF921000;
LABEL_54:
    if ((_DWORD)v15)
    {
      v44 = atomic_load(v39);
      if ((v44 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
      {
        qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
        __cxa_guard_release(&qword_1EF921288);
      }
      v45 = (id)qword_1EF921280;
      if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v243 = 0;
        _os_log_error_impl(&dword_1C9870000, v45, OS_LOG_TYPE_ERROR, "Assertion failed: isSuccess(e5rt::init_execution_stream_operation_from_bundle(bundlePath.string().c_str(), e5rt::out(&m_operation)))", v243, 2u);
      }

      v15 = 2;
LABEL_76:
      cva::Path::~Path((cva::Path *)v239);
    }
    else
    {
LABEL_80:
      cva::Path::~Path((cva::Path *)v239);
      v15 = 0;
    }
    cva::Path::~Path((cva::Path *)v240);
    if ((char)buf[23] < 0)
      operator delete(*(void **)buf);
    operator delete(v36);
    operator delete(v34);
    if ((_DWORD)v15)
    {
      v57 = atomic_load((unsigned __int8 *)&qword_1EF921288);
      if ((v57 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
      {
        qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
        __cxa_guard_release(&qword_1EF921288);
      }
      v58 = (id)qword_1EF921280;
      if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
      {
        v82 = off_1E8296478[(v15 - 1)];
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v82;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v82;
        _os_log_error_impl(&dword_1C9870000, v58, OS_LOG_TYPE_ERROR, "Running initRegressor(resourceDir, loadLegacyModel) failed with %s, returning %s", buf, 0x16u);
      }

      v59 = v15;
      goto LABEL_174;
    }
    v34 = *(char **)(v33 + 248);
    *(_QWORD *)v243 = 0;
    num_inputs = e5rt_execution_stream_operation_get_num_inputs();
    if (!num_inputs)
      break;
    snprintf((char *)buf, 0x40uLL, "e5rt::EnsureSuccess failed with error code %d.", num_inputs);
    input_names = _os_crash();
    __break(1u);
LABEL_324:
    snprintf((char *)buf, 0x40uLL, "e5rt::EnsureSuccess failed with error code %d.", input_names);
    num_outputs = _os_crash();
    __break(1u);
LABEL_325:
    snprintf((char *)buf, 0x40uLL, "e5rt::EnsureSuccess failed with error code %d.", num_outputs);
    output_names = _os_crash();
    __break(1u);
LABEL_326:
    snprintf((char *)buf, 0x40uLL, "e5rt::EnsureSuccess failed with error code %d.", output_names);
    v43 = _os_crash();
    __break(1u);
LABEL_327:
    v212 = v43;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v245 = 67109120;
      *(_DWORD *)&v245[4] = v212;
      _os_log_error_impl(&dword_1C9870000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "e5rt::AssertSuccess failed with error code %d.", v245, 8u);
    }
  }
  v36 = *(char **)v243;
  if (*(_QWORD *)v243)
  {
    if (*(_QWORD *)v243 >> 61)
      abort();
    v15 = 8 * *(_QWORD *)v243;
    v41 = (uint64_t)operator new(8 * *(_QWORD *)v243);
    bzero((void *)v41, 8 * (_QWORD)v36);
    v61 = (const char **)(v41 + v15);
  }
  else
  {
    v41 = 0;
    v61 = 0;
  }
  input_names = e5rt_execution_stream_operation_get_input_names();
  if (input_names)
    goto LABEL_324;
  v63 = 126 - 2 * __clz(((uint64_t)v61 - v41) >> 3);
  v217 = (char *)v61 - v41;
  if (v61 == (const char **)v41)
    v64 = 0;
  else
    v64 = v63;
  v228 = (const char **)v41;
  sub_1C989F1A8(v41, v61, v64, 1);
  v15 = *(_QWORD *)(v33 + 248);
  *(_QWORD *)v243 = 0;
  num_outputs = e5rt_execution_stream_operation_get_num_outputs();
  if (num_outputs)
    goto LABEL_325;
  v41 = *(_QWORD *)v243;
  if (*(_QWORD *)v243)
  {
    if (*(_QWORD *)v243 >> 61)
      abort();
    v34 = (char *)operator new(8 * *(_QWORD *)v243);
    bzero(v34, 8 * v41);
    v36 = &v34[8 * v41];
  }
  else
  {
    v34 = 0;
    v36 = 0;
  }
  v222 = v34;
  output_names = e5rt_execution_stream_operation_get_output_names();
  if (output_names)
    goto LABEL_326;
  v67 = 126 - 2 * __clz((v36 - v34) >> 3);
  if (v36 == v34)
    v68 = 0;
  else
    v68 = v67;
  v215 = (const char **)v36;
  sub_1C989E2E8((uint64_t)v34, (const char **)v36, v68, 1);
  v69 = (const char **)operator new(0x28uLL);
  v70 = v69;
  *(_OWORD *)v69 = xmmword_1E82963D8;
  *((_OWORD *)v69 + 1) = *(_OWORD *)off_1E82963E8;
  v69[4] = "right_eye_input_images_low_res";
  if (*(_BYTE *)(v33 + 257))
  {
    v71 = operator new(0x50uLL);
    *v71 = xmmword_1E82963D8;
    v71[1] = *(_OWORD *)off_1E82963E8;
    *((_QWORD *)v71 + 4) = "right_eye_input_images_low_res";
    *((_QWORD *)v71 + 5) = "camera_offset";
    v72 = (const char **)(v71 + 3);
    operator delete(v70);
    v70 = (const char **)v71;
  }
  else
  {
    v72 = v69 + 5;
  }
  __p = v70;
  if (v217 != (char *)((char *)v72 - (char *)v70))
  {
    v77 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v77 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v78 = (id)qword_1EF921280;
    v79 = v222;
    if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1C9870000, v78, OS_LOG_TYPE_ERROR, "Precondition violated: inputNames.size() == expectedInputNames.size()", buf, 2u);
    }
    v59 = 1;
    goto LABEL_165;
  }
  if (v70 != v72)
  {
    if (v61 != v228)
    {
      v73 = v70;
      while (1)
      {
        v74 = *v73;
        v75 = v228;
        while (strcmp(v74, *v75))
        {
          if (++v75 == v61)
            goto LABEL_128;
        }
        if (v75 == v61)
          break;
        if (++v73 == v72)
          goto LABEL_119;
      }
    }
LABEL_128:
    v80 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v80 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v78 = (id)qword_1EF921280;
    v79 = v222;
    if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v81 = "Assertion failed: checkTensorName(expectedInputName, inputNames)";
LABEL_251:
      v59 = 2;
      _os_log_error_impl(&dword_1C9870000, v78, OS_LOG_TYPE_ERROR, v81, buf, 2u);
      goto LABEL_165;
    }
    goto LABEL_164;
  }
LABEL_119:
  if (v215 == (const char **)v222)
  {
LABEL_162:
    v93 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v93 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v78 = (id)qword_1EF921280;
    v79 = v222;
    if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v81 = "Assertion failed: checkTensorName(expectedOutputName, outputNames)";
      goto LABEL_251;
    }
LABEL_164:
    v59 = 2;
    goto LABEL_165;
  }
  v76 = (const char **)v222;
  while (strcmp("landmarks", *v76))
  {
    if (++v76 == v215)
      goto LABEL_162;
  }
  v85 = (const char **)v222;
  while (strcmp("left_eye_warp_field_X", *v85))
  {
    if (++v85 == v215)
      goto LABEL_162;
  }
  v89 = (const char **)v222;
  while (strcmp("left_eye_warp_field_Y", *v89))
  {
    if (++v89 == v215)
      goto LABEL_162;
  }
  v90 = (const char **)v222;
  while (strcmp("right_eye_warp_field_X", *v90))
  {
    if (++v90 == v215)
      goto LABEL_162;
  }
  v91 = (const char **)v222;
  while (strcmp("right_eye_warp_field_Y", *v91))
  {
    if (++v91 == v215)
      goto LABEL_162;
  }
  v92 = (const char **)v222;
  while (strcmp("rigid_pose_angles", *v92))
  {
    if (++v92 == v215)
      goto LABEL_162;
  }
  if (v61 != v228)
  {
    v59 = 0;
    v159 = v228;
    while (1)
    {
      v241 = 0;
      v216 = v159;
      *(_QWORD *)buf = &v241;
      *(_QWORD *)&buf[8] = 0;
      v218 = e5rt_execution_stream_operation_retain_input_port();
      v160 = **(_QWORD **)buf;
      **(_QWORD **)buf = *(_QWORD *)&buf[8];
      if (v160)
      {
        *(_QWORD *)v245 = v160;
        v161 = e5rt_io_port_release();
        if (v161)
        {
          v174 = v161;
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v243 = 67109120;
            *(_DWORD *)&v243[4] = v174;
            _os_log_error_impl(&dword_1C9870000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "e5rt::AssertSuccess failed with error code %d.", v243, 8u);
          }
        }
      }
      if (v218)
      {
        sub_1C98A5610();
        v162 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v162, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_1C9870000, v162, OS_LOG_TYPE_ERROR, "Assertion failed: isSuccess(e5rt_execution_stream_operation_retain_input_port(m_operation.get(), inputName, e5rt::out(&inputPort)))", buf, 2u);
        }

        v59 = 2;
        goto LABEL_274;
      }
      v163 = *v216;
      v164 = strlen(*v216);
      if (v164 > 0x7FFFFFFFFFFFFFF7)
        abort();
      if (v164 >= 0x17)
        break;
      buf[23] = v164;
      __dst = buf;
      v165 = v164;
      if (v164)
        goto LABEL_269;
LABEL_270:
      __dst[v165] = 0;
      v168 = (uint64_t *)sub_1C989C6D8(v33, (uint64_t)buf);
      v169 = v241;
      v241 = 0;
      v170 = *v168;
      *v168 = v169;
      if (v170)
      {
        *(_QWORD *)v245 = v170;
        v171 = e5rt_io_port_release();
        if (v171)
        {
          v176 = v171;
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v243 = 67109120;
            *(_DWORD *)&v243[4] = v176;
            _os_log_error_impl(&dword_1C9870000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "e5rt::AssertSuccess failed with error code %d.", v243, 8u);
          }
        }
      }
      if ((char)buf[23] < 0)
        operator delete(*(void **)buf);
LABEL_274:
      v172 = v241;
      v241 = 0;
      if (v172)
      {
        *(_QWORD *)v243 = v172;
        v173 = e5rt_io_port_release();
        if (v173)
        {
          v175 = v173;
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = v175;
            _os_log_error_impl(&dword_1C9870000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "e5rt::AssertSuccess failed with error code %d.", buf, 8u);
          }
        }
      }
      if (v218)
        goto LABEL_335;
      v159 = v216 + 1;
      if (v216 + 1 == v61)
        goto LABEL_286;
    }
    v166 = (v164 & 0xFFFFFFFFFFFFFFF8) + 8;
    v165 = v164;
    if ((v164 | 7) != 0x17)
      v166 = v164 | 7;
    v167 = v166 + 1;
    __dst = operator new(v166 + 1);
    *(_QWORD *)&buf[8] = v165;
    *(_QWORD *)&buf[16] = v167 | 0x8000000000000000;
    *(_QWORD *)buf = __dst;
LABEL_269:
    memmove(__dst, v163, v165);
    goto LABEL_270;
  }
  v59 = 0;
LABEL_286:
  v179 = (const char **)v222;
  while (2)
  {
    v241 = 0;
    *(_QWORD *)buf = &v241;
    *(_QWORD *)&buf[8] = 0;
    v180 = e5rt_execution_stream_operation_retain_output_port();
    v181 = **(_QWORD **)buf;
    **(_QWORD **)buf = *(_QWORD *)&buf[8];
    if (v181)
    {
      *(_QWORD *)v245 = v181;
      v182 = e5rt_io_port_release();
      if (v182)
      {
        v197 = v182;
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v243 = 67109120;
          *(_DWORD *)&v243[4] = v197;
          _os_log_error_impl(&dword_1C9870000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "e5rt::AssertSuccess failed with error code %d.", v243, 8u);
        }
      }
    }
    v219 = v180;
    if (v180)
    {
      sub_1C98A5610();
      v183 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v183, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_1C9870000, v183, OS_LOG_TYPE_ERROR, "Assertion failed: isSuccess(e5rt_execution_stream_operation_retain_output_port(m_operation.get(), outputName, e5rt::out(&outputPort)))", buf, 2u);
      }

      v59 = 2;
      goto LABEL_305;
    }
    v184 = *v179;
    v185 = strlen(*v179);
    if (v185 > 0x7FFFFFFFFFFFFFF7)
      abort();
    v186 = v185;
    if (v185 >= 0x17)
    {
      v189 = (v185 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v185 | 7) != 0x17)
        v189 = v185 | 7;
      v190 = v189 + 1;
      v187 = (uint8_t *)operator new(v189 + 1);
      *(_QWORD *)&buf[8] = v186;
      *(_QWORD *)&buf[16] = v190 | 0x8000000000000000;
      *(_QWORD *)buf = v187;
    }
    else
    {
      buf[23] = v185;
      v187 = buf;
      if (!v186)
      {
        v188 = buf;
        goto LABEL_301;
      }
    }
    v188 = v187;
    memmove(v187, v184, v186);
LABEL_301:
    v188[v186] = 0;
    v191 = (uint64_t *)sub_1C989C6D8(v33 + 40, (uint64_t)buf);
    v192 = v241;
    v241 = 0;
    v193 = *v191;
    *v191 = v192;
    if (v193)
    {
      *(_QWORD *)v245 = v193;
      v194 = e5rt_io_port_release();
      if (v194)
      {
        v199 = v194;
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v243 = 67109120;
          *(_DWORD *)&v243[4] = v199;
          _os_log_error_impl(&dword_1C9870000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "e5rt::AssertSuccess failed with error code %d.", v243, 8u);
        }
      }
    }
    if ((char)buf[23] < 0)
      operator delete(*(void **)buf);
LABEL_305:
    v195 = v241;
    v241 = 0;
    if (v195)
    {
      *(_QWORD *)v243 = v195;
      v196 = e5rt_io_port_release();
      if (v196)
      {
        v198 = v196;
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v198;
          _os_log_error_impl(&dword_1C9870000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "e5rt::AssertSuccess failed with error code %d.", buf, 8u);
        }
      }
    }
    if (v219)
      goto LABEL_335;
    if (++v179 != v215)
      continue;
    break;
  }
  for (i = *(_QWORD **)(v33 + 16); i; i = (_QWORD *)*i)
  {
    sub_1C989CAF0((int64x2_t *)v242);
    v223 = *(_OWORD *)&v242[16];
    v220 = *(_OWORD *)v242;
    v201 = sub_1C989CD2C(v33 + 160, (uint64_t)(i + 2), (uint64_t)(i + 2));
    *((_OWORD *)v201 + 3) = v220;
    *((_OWORD *)v201 + 4) = v223;
    sub_1C989D2BC();
    v202 = objc_claimAutoreleasedReturnValue();
    v203 = sub_1C989D930(v33 + 80, (uint64_t)(i + 2), (uint64_t)(i + 2));
    v204 = (void *)v203[5];
    v203[5] = v202;

  }
  for (j = *(_QWORD **)(v33 + 56); j; j = (_QWORD *)*j)
  {
    sub_1C989CAF0(v237);
    v224 = v237[0];
    v227 = v237[1];
    v206 = sub_1C989CD2C(v33 + 200, (uint64_t)(j + 2), (uint64_t)(j + 2));
    *((int64x2_t *)v206 + 3) = v224;
    *((int64x2_t *)v206 + 4) = v227;
    sub_1C989D2BC();
    v207 = objc_claimAutoreleasedReturnValue();
    v208 = sub_1C989D930(v33 + 120, (uint64_t)(j + 2), (uint64_t)(j + 2));
    v209 = (void *)v208[5];
    v208[5] = v207;

  }
  *(_QWORD *)buf = v33 + 240;
  *(_QWORD *)&buf[8] = 0;
  v210 = e5rt_execution_stream_create();
  sub_1C989DEBC((uint64_t **)buf);
  if (v210)
  {
    sub_1C98A5610();
    v78 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v211 = "Assertion failed: isSuccess(e5rt_execution_stream_create(e5rt::out(&m_stream)))";
      goto LABEL_349;
    }
LABEL_331:
    v59 = 2;
    v79 = v222;
    goto LABEL_165;
  }
  if (!e5rt_execution_stream_operation_prepare_op_for_encode())
  {
    v59 = 0;
LABEL_335:
    v79 = v222;
    goto LABEL_166;
  }
  sub_1C98A5610();
  v78 = objc_claimAutoreleasedReturnValue();
  if (!os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
    goto LABEL_331;
  *(_WORD *)buf = 0;
  v211 = "Assertion failed: isSuccess(e5rt_execution_stream_operation_prepare_op_for_encode(m_operation.get()))";
LABEL_349:
  v59 = 2;
  _os_log_error_impl(&dword_1C9870000, v78, OS_LOG_TYPE_ERROR, v211, buf, 2u);
  v79 = v222;
LABEL_165:

LABEL_166:
  operator delete(__p);
  if (v79)
    operator delete(v79);
  if (v228)
    operator delete(v228);
  if (v59 == 1)
    v15 = 2;
  else
    v15 = v59;
  if (!v59)
  {
    v100 = *(_QWORD **)(a1 + 296);
    *(_QWORD *)(a1 + 296) = v33;
    if (v100)
    {
      v101 = sub_1C98898D8(v100);
      MEMORY[0x1CAA44AFC](v101, 0x10A0C4041783943);
    }
LABEL_182:
    v102 = 3.1416;
    if (v231)
      v102 = 3.0354;
    *(float *)(a1 + 696) = v102;
    if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)v235, CFSTR("EnablePerspectiveWarp")))
    {
      cva::DictionaryHandler::item((cva::DictionaryHandler *)v235, CFSTR("EnablePerspectiveWarp"));
      *(_BYTE *)(a1 + 1340) = cva::ItemHandler::getValue<BOOL>();
      cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
    }
    else
    {
      *(_BYTE *)(a1 + 1340) = sub_1C98967C4() ^ 1;
    }
    if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)v235, CFSTR("EnableDistanceThresholdsMultiplier")))
    {
      cva::DictionaryHandler::item((cva::DictionaryHandler *)v235, CFSTR("EnableDistanceThresholdsMultiplier"));
      *(_BYTE *)(a1 + 1341) = cva::ItemHandler::getValue<BOOL>();
      cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
    }
    else
    {
      *(_BYTE *)(a1 + 1341) = sub_1C98967C4() ^ 1;
    }
    v103 = sub_1C9896834(a1);
    v104 = v103 - 1;
    if (v103 == 1)
      v15 = 2;
    else
      v15 = v103;
    if (v103)
    {
      sub_1C98A5610();
      v97 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v97, OS_LOG_TYPE_ERROR))
        goto LABEL_215;
      v105 = off_1E8296478[v104];
      v106 = off_1E8296478[(v15 - 1)];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v105;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v106;
      v99 = "Running setupRegressorInputs() failed with %s, returning %s";
    }
    else
    {
      v107 = sub_1C9896FE0(a1);
      v108 = v107 - 1;
      if (v107 == 1)
        v15 = 2;
      else
        v15 = v107;
      if (v107)
      {
        sub_1C98A5610();
        v97 = objc_claimAutoreleasedReturnValue();
        if (!os_log_type_enabled(v97, OS_LOG_TYPE_ERROR))
          goto LABEL_215;
        v109 = off_1E8296478[v108];
        v110 = off_1E8296478[(v15 - 1)];
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v109;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v110;
        v99 = "Running setupRegressorOutputs() failed with %s, returning %s";
      }
      else
      {
        v111 = sub_1C9898854(a1);
        v112 = v111 - 1;
        if (v111 == 1)
          v15 = 2;
        else
          v15 = v111;
        if (v111)
        {
          sub_1C98A5610();
          v97 = objc_claimAutoreleasedReturnValue();
          if (!os_log_type_enabled(v97, OS_LOG_TYPE_ERROR))
            goto LABEL_215;
          v113 = off_1E8296478[v112];
          v114 = off_1E8296478[(v15 - 1)];
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v113;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v114;
          v99 = "Running setupNoiseSurface() failed with %s, returning %s";
        }
        else
        {
          *(_DWORD *)buf = objc_msgSend(*(id *)(a1 + 704), "width");
          *(_DWORD *)v242 = objc_msgSend(*(id *)(a1 + 704), "height");
          v117 = sub_1C9898F2C((id **)(a1 + 232), v236, (unsigned int *)buf, (unsigned int *)v242);
          v118 = v117 - 1;
          if (v117 == 1)
            v15 = 2;
          else
            v15 = v117;
          if (!v117)
          {
            objc_msgSend(*(id *)(a1 + 184), "commandBuffer");
            v97 = objc_claimAutoreleasedReturnValue();
            objc_msgSend(MEMORY[0x1E0CC6BB0], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", 10, 1, 1, 0);
            v121 = (void *)objc_claimAutoreleasedReturnValue();
            v122 = (void *)objc_msgSend(v236[0], "newTextureWithDescriptor:", v121);
            v123 = *(id *)(a1 + 216);
            v124 = (__int128 *)MEMORY[0x1E0C83FE8];
            *(_OWORD *)v229 = *(_OWORD *)(MEMORY[0x1E0C83FE8] + 16);
            v232 = *(_OWORD *)(MEMORY[0x1E0C83FE8] + 32);
            v225 = *MEMORY[0x1E0C83FE8];
            v125 = *(id *)(a1 + 656);
            *(_OWORD *)buf = xmmword_1C9927510;
            objc_msgSend(v123, "encodeToCommandBuffer:sourceTexture:transform:destinationTexture:destinationBoundingBox:", v97, v122, v125, buf, *(double *)&v225, *(double *)v229, *(double *)&v232);

            v126 = *(id *)(a1 + 224);
            *(_OWORD *)v230 = v124[1];
            v233 = v124[2];
            v226 = *v124;
            v127 = *(id *)(a1 + 656);
            *(_OWORD *)buf = xmmword_1C9927510;
            objc_msgSend(v126, "encodeToCommandBuffer:sourceTexture:transform:destinationTexture:destinationBoundingBox:", v97, v122, v127, buf, *(double *)&v226, *(double *)v230, *(double *)&v233);

            memset(buf, 0, sizeof(buf));
            v247 = 1065353216;
            v128 = *(void **)(a1 + 312);
            sub_1C9899664(v242, "input_face_crop_image_low_res");
            v129 = sub_1C9899710((uint64_t *)buf, (uint64_t)v242, (uint64_t)v242);
            objc_storeStrong((id *)v129 + 5, v128);
            if ((v242[23] & 0x80000000) != 0)
              operator delete(*(void **)v242);
            v130 = *(void **)(a1 + 648);
            sub_1C9899664(v242, "left_eye_input_images_low_res");
            v131 = sub_1C9899710((uint64_t *)buf, (uint64_t)v242, (uint64_t)v242);
            objc_storeStrong((id *)v131 + 5, v130);
            if ((v242[23] & 0x80000000) != 0)
              operator delete(*(void **)v242);
            v132 = *(void **)(a1 + 664);
            sub_1C9899664(v242, "left_eye_face_location");
            v133 = sub_1C9899710((uint64_t *)buf, (uint64_t)v242, (uint64_t)v242);
            objc_storeStrong((id *)v133 + 5, v132);
            if ((v242[23] & 0x80000000) != 0)
              operator delete(*(void **)v242);
            v134 = *(void **)(a1 + 472);
            sub_1C9899664(v242, "right_eye_input_images_low_res");
            v135 = sub_1C9899710((uint64_t *)buf, (uint64_t)v242, (uint64_t)v242);
            objc_storeStrong((id *)v135 + 5, v134);
            if ((v242[23] & 0x80000000) != 0)
              operator delete(*(void **)v242);
            v136 = *(void **)(a1 + 488);
            sub_1C9899664(v242, "right_eye_face_location");
            v137 = sub_1C9899710((uint64_t *)buf, (uint64_t)v242, (uint64_t)v242);
            objc_storeStrong((id *)v137 + 5, v136);
            if ((v242[23] & 0x80000000) != 0)
              operator delete(*(void **)v242);
            if (*(_BYTE *)(*(_QWORD *)(a1 + 296) + 257))
            {
              v138 = *(void **)(a1 + 672);
              sub_1C9899664(v242, "camera_offset");
              v139 = sub_1C9899710((uint64_t *)buf, (uint64_t)v242, (uint64_t)v242);
              objc_storeStrong((id *)v139 + 5, v138);
              if ((v242[23] & 0x80000000) != 0)
                operator delete(*(void **)v242);
            }
            v140 = *(void **)(a1 + 688);
            sub_1C9899664(v242, "rigid_pose_angles");
            v141 = sub_1C9899710((uint64_t *)buf, (uint64_t)v242, (uint64_t)v242);
            objc_storeStrong((id *)v141 + 5, v140);
            if ((v242[23] & 0x80000000) != 0)
              operator delete(*(void **)v242);
            v142 = *(void **)(a1 + 680);
            sub_1C9899664(v242, "landmarks");
            v143 = sub_1C9899710((uint64_t *)buf, (uint64_t)v242, (uint64_t)v242);
            objc_storeStrong((id *)v143 + 5, v142);
            if ((v242[23] & 0x80000000) != 0)
              operator delete(*(void **)v242);
            sub_1C9893470(*(void **)(*(_QWORD *)(a1 + 304) + 56));
            v144 = objc_claimAutoreleasedReturnValue();
            sub_1C9899664(v242, "left_eye_warp_field_X");
            v145 = sub_1C9899710((uint64_t *)buf, (uint64_t)v242, (uint64_t)v242);
            v146 = (void *)*((_QWORD *)v145 + 5);
            *((_QWORD *)v145 + 5) = v144;

            if ((v242[23] & 0x80000000) != 0)
              operator delete(*(void **)v242);
            sub_1C9893470(*(void **)(*(_QWORD *)(a1 + 304) + 64));
            v147 = objc_claimAutoreleasedReturnValue();
            sub_1C9899664(v242, "left_eye_warp_field_Y");
            v148 = sub_1C9899710((uint64_t *)buf, (uint64_t)v242, (uint64_t)v242);
            v149 = (void *)*((_QWORD *)v148 + 5);
            *((_QWORD *)v148 + 5) = v147;

            if ((v242[23] & 0x80000000) != 0)
              operator delete(*(void **)v242);
            sub_1C9893470(*(void **)(*(_QWORD *)(a1 + 304) + 88));
            v150 = objc_claimAutoreleasedReturnValue();
            sub_1C9899664(v242, "right_eye_warp_field_X");
            v151 = sub_1C9899710((uint64_t *)buf, (uint64_t)v242, (uint64_t)v242);
            v152 = (void *)*((_QWORD *)v151 + 5);
            *((_QWORD *)v151 + 5) = v150;

            if ((v242[23] & 0x80000000) != 0)
              operator delete(*(void **)v242);
            sub_1C9893470(*(void **)(*(_QWORD *)(a1 + 304) + 96));
            v153 = objc_claimAutoreleasedReturnValue();
            sub_1C9899664(v242, "right_eye_warp_field_Y");
            v154 = sub_1C9899710((uint64_t *)buf, (uint64_t)v242, (uint64_t)v242);
            v155 = (void *)*((_QWORD *)v154 + 5);
            *((_QWORD *)v154 + 5) = v153;

            if ((v242[23] & 0x80000000) != 0)
              operator delete(*(void **)v242);
            v156 = sub_1C989B6C4(*(_QWORD *)(a1 + 296), (uint64_t *)buf);
            v157 = v156 - 1;
            if (v156 == 1)
              v15 = 2;
            else
              v15 = v156;
            if (v156)
            {
              sub_1C98A5610();
              v158 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v158, OS_LOG_TYPE_ERROR))
              {
                v177 = off_1E8296478[v157];
                v178 = off_1E8296478[(v15 - 1)];
                *(_DWORD *)v242 = 136315394;
                *(_QWORD *)&v242[4] = v177;
                *(_WORD *)&v242[12] = 2080;
                *(_QWORD *)&v242[14] = v178;
                _os_log_error_impl(&dword_1C9870000, v158, OS_LOG_TYPE_ERROR, "Running m_regressor->bindSurfaces(allSurfaces) failed with %s, returning %s", v242, 0x16u);
              }

            }
            else
            {
              v15 = 0;
            }
            sub_1C9899C6C((uint64_t)buf);

            goto LABEL_215;
          }
          sub_1C98A5610();
          v97 = objc_claimAutoreleasedReturnValue();
          if (!os_log_type_enabled(v97, OS_LOG_TYPE_ERROR))
            goto LABEL_215;
          v119 = off_1E8296478[v118];
          v120 = off_1E8296478[(v15 - 1)];
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v119;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v120;
          v99 = "Running construct(m_imageAugmenter, device, uint32_t(m_faceCropNoiseSurface.width), uint32_t(m_faceCropN"
                "oiseSurface.height)) failed with %s, returning %s";
        }
      }
    }
LABEL_214:
    _os_log_error_impl(&dword_1C9870000, v97, OS_LOG_TYPE_ERROR, v99, buf, 0x16u);
    goto LABEL_215;
  }
LABEL_174:
  v94 = atomic_load((unsigned __int8 *)&qword_1EF921288);
  if ((v94 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
  {
    qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
    __cxa_guard_release(&qword_1EF921288);
  }
  v95 = (id)qword_1EF921280;
  if (os_log_type_enabled(v95, OS_LOG_TYPE_ERROR))
  {
    v115 = off_1E8296478[v59 - 1];
    v116 = off_1E8296478[(v15 - 1)];
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v115;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v116;
    _os_log_error_impl(&dword_1C9870000, v95, OS_LOG_TYPE_ERROR, "Running result->setup(std::forward<Params>(params)...) failed with %s, returning %s", buf, 0x16u);
  }

  v96 = sub_1C98898D8((_QWORD *)v33);
  MEMORY[0x1CAA44AFC](v96, 0x10A0C4041783943);
  if (!(_DWORD)v15)
    goto LABEL_182;
  sub_1C98A5610();
  v97 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v97, OS_LOG_TYPE_ERROR))
  {
    v98 = off_1E8296478[(v15 - 1)];
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v98;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v98;
    v99 = "Running construct(m_regressor, resourceDir, loadLegacyModel) failed with %s, returning %s";
    goto LABEL_214;
  }
LABEL_215:

  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v234.__r_.__value_.__l.__data_);
  cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)v235);
LABEL_36:

LABEL_37:
  return v15;
}

void sub_1C9896424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,char a46,uint64_t a47,uint64_t a48,_QWORD *a49)
{
  void *v49;
  void *v50;
  void *v51;
  void *v53;

  operator delete(__p);
  if (a25)
    operator delete(a25);
  if (a35)
    operator delete(a35);
  sub_1C9893D70(&a49);
  if (a45 < 0)
    operator delete(a40);
  cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)&a46);

  v53 = (void *)a48;
  _Unwind_Resume(a1);
}

uint64_t sub_1C98967C4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF921278);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921278))
  {
    byte_1EF921270 = sub_1C989A3D8();
    __cxa_guard_release(&qword_1EF921278);
  }
  return byte_1EF921270;
}

void sub_1C989681C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1EF921278);
  _Unwind_Resume(a1);
}

uint64_t sub_1C9896834(uint64_t a1)
{
  _QWORD *v2;
  char *v3;
  uint64_t *v4;
  id v5;
  uint64_t *v6;
  id v7;
  char *v8;
  uint64_t *v9;
  id v10;
  char *v11;
  uint64_t *v12;
  id v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned __int8 v17;
  NSObject *v18;
  char *v19;
  char *v20;
  const char *v21;
  unsigned __int8 v22;
  NSObject *v23;
  unsigned __int8 v24;
  unsigned int v25;
  unsigned int v26;
  unsigned __int8 v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  void *v34;
  void *v35;
  unsigned int v36;
  unsigned int v37;
  char *v38;
  char *v39;
  uint64_t *v41;
  uint64_t v42;
  const char *v43;
  _QWORD v44[2];
  _BYTE buf[24];
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)(*(_QWORD *)(a1 + 296) + 80);
  v3 = (char *)operator new(0x20uLL);
  *(_QWORD *)buf = v3;
  *(_OWORD *)&buf[8] = xmmword_1C9927550;
  strcpy(v3, "left_eye_input_images_low_res");
  v4 = sub_1C9892E58(v2, (uint64_t)buf);
  if (!v4)
    abort();
  v5 = (id)v4[5];
  operator delete(v3);
  strcpy(buf, "left_eye_face_location");
  buf[23] = 22;
  v6 = sub_1C9892E58(v2, (uint64_t)buf);
  if (!v6)
    abort();
  v7 = (id)v6[5];
  v8 = (char *)operator new(0x20uLL);
  *(_QWORD *)buf = v8;
  *(_OWORD *)&buf[8] = xmmword_1C9927560;
  strcpy(v8, "right_eye_input_images_low_res");
  v9 = sub_1C9892E58(v2, (uint64_t)buf);
  if (!v9)
    abort();
  v10 = (id)v9[5];
  operator delete(v8);
  v11 = (char *)operator new(0x19uLL);
  *(_QWORD *)buf = v11;
  *(_OWORD *)&buf[8] = xmmword_1C9927570;
  strcpy(v11, "right_eye_face_location");
  v12 = sub_1C9892E58(v2, (uint64_t)buf);
  if (!v12)
    abort();
  v13 = (id)v12[5];
  operator delete(v11);
  if ((objc_msgSend(v5, "isEqualToDictionary:", v10) & 1) != 0)
  {
    if ((objc_msgSend(v7, "isEqualToDictionary:", v13) & 1) != 0)
    {
      v44[0] = v2;
      v44[1] = a1;
      v14 = sub_1C9899F70((uint64_t)v44, CFSTR("leftEye"), a1 + 496);
      v15 = v14 - 1;
      if (v14 == 1)
        v16 = 2;
      else
        v16 = v14;
      if (v14)
      {
        v17 = atomic_load((unsigned __int8 *)&qword_1EF921288);
        if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
        {
          qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
          __cxa_guard_release(&qword_1EF921288);
        }
        v18 = (id)qword_1EF921280;
        if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          goto LABEL_40;
        v19 = off_1E8296478[v15];
        v20 = off_1E8296478[(v16 - 1)];
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v19;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v20;
        v21 = "Running setupCropData(@\"leftEye\", m_leftEye) failed with %s, returning %s";
        goto LABEL_29;
      }
      v25 = sub_1C9899F70((uint64_t)v44, CFSTR("rightEye"), a1 + 320);
      v26 = v25 - 1;
      if (v25 == 1)
        v16 = 2;
      else
        v16 = v25;
      if (v25)
      {
        v27 = atomic_load((unsigned __int8 *)&qword_1EF921288);
        if ((v27 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
        {
          qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
          __cxa_guard_release(&qword_1EF921288);
        }
        v18 = (id)qword_1EF921280;
        if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          goto LABEL_40;
        v28 = off_1E8296478[v26];
        v29 = off_1E8296478[(v16 - 1)];
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v28;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v29;
        v21 = "Running setupCropData(@\"rightEye\", m_rightEye) failed with %s, returning %s";
        goto LABEL_29;
      }
      v30 = (char *)operator new(0x20uLL);
      *(_QWORD *)buf = v30;
      *(_OWORD *)&buf[8] = xmmword_1C9927550;
      strcpy(v30, "input_face_crop_image_low_res");
      v31 = sub_1C9892E58(v2, (uint64_t)buf);
      if (!v31)
        abort();
      v32 = v31;
      operator delete(v30);
      v33 = objc_msgSend(objc_alloc(MEMORY[0x1E0CBBEA0]), "initWithProperties:", v32[5]);
      v34 = *(void **)(a1 + 312);
      *(_QWORD *)(a1 + 312) = v33;

      v35 = *(void **)(a1 + 312);
      if (v35)
      {
        v36 = sub_1C98A4068(*(id **)(a1 + 240), v35, 7, 0, (id *)(a1 + 712));
        v37 = v36 - 1;
        if (v36 == 1)
          v16 = 2;
        else
          v16 = v36;
        if (v36)
        {
          sub_1C98A5610();
          v18 = objc_claimAutoreleasedReturnValue();
          if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
            goto LABEL_40;
          v38 = off_1E8296478[v37];
          v39 = off_1E8296478[(v16 - 1)];
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v38;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v39;
          v21 = "Running m_metalHelpers->setupTextureBuffer(m_faceCropSurface, MTLTextureUsageShaderRead | MTLTextureUsag"
                "eShaderWrite | MTLTextureUsageRenderTarget, false, m_faceCrop) failed with %s, returning %s";
LABEL_29:
          _os_log_error_impl(&dword_1C9870000, v18, OS_LOG_TYPE_ERROR, v21, buf, 0x16u);
LABEL_40:

          goto LABEL_41;
        }
        objc_msgSend(*(id *)(a1 + 712), "setLabel:", CFSTR("faceCrop.texture"));
        if (!*(_BYTE *)(*(_QWORD *)(a1 + 296) + 257))
        {
          v16 = 0;
          goto LABEL_41;
        }
        sub_1C9899664(buf, "camera_offset");
        v41 = sub_1C9892E58(v2, (uint64_t)buf);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        if (v41)
        {
          v42 = objc_msgSend(objc_alloc(MEMORY[0x1E0CBBEA0]), "initWithProperties:", v41[5]);
          v16 = 0;
          v18 = *(NSObject **)(a1 + 672);
          *(_QWORD *)(a1 + 672) = v42;
          goto LABEL_40;
        }
        sub_1C98A5610();
        v18 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          v43 = "Assertion failed: it != inputSurfaceProps.end()";
LABEL_51:
          v16 = 2;
          _os_log_error_impl(&dword_1C9870000, v18, OS_LOG_TYPE_ERROR, v43, buf, 2u);
          goto LABEL_40;
        }
      }
      else
      {
        sub_1C98A5610();
        v18 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          v43 = "Assertion failed: m_faceCropSurface";
          goto LABEL_51;
        }
      }
      v16 = 2;
      goto LABEL_40;
    }
    v24 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v24 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v23 = (id)qword_1EF921280;
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1C9870000, v23, OS_LOG_TYPE_ERROR, "Assertion failed: [leftRayfieldProps isEqualToDictionary:rightRayfieldProps]", buf, 2u);
    }
  }
  else
  {
    v22 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v22 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v23 = (id)qword_1EF921280;
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1C9870000, v23, OS_LOG_TYPE_ERROR, "Assertion failed: [leftCropProps isEqualToDictionary:rightCropProps]", buf, 2u);
    }
  }

  v16 = 2;
LABEL_41:

  return v16;
}

void sub_1C9896F40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t sub_1C9896FE0(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  id *v13;
  uint64_t v14;
  void *v15;
  NSObject *v16;
  id v17;
  id v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  _BOOL4 v22;
  unsigned __int8 v23;
  uint64_t v24;
  NSObject *v25;
  unsigned __int8 v26;
  NSObject *v27;
  unsigned __int8 v28;
  NSObject *v29;
  unsigned __int8 v30;
  __CFString *v31;
  char *v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  const char *v35;
  unsigned __int8 v36;
  unsigned __int8 v37;
  unsigned __int8 v39;
  int v40;
  void **v41;
  __CFString *v42;
  uint64_t v43;
  __CFString *v44;
  id v45;
  void *v46;
  void *v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  void *v51;
  void *v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  id v56;
  id v57;
  void *v58;
  int v59;
  NSObject *v60;
  unsigned int v61;
  unsigned int v62;
  unsigned __int8 v63;
  NSObject *v64;
  char *v65;
  char *v66;
  unsigned __int8 v67;
  unsigned __int8 v68;
  unsigned __int8 v69;
  NSObject *v70;
  uint64_t v71;
  unsigned __int8 v72;
  NSObject *v73;
  char *v74;
  char *v75;
  char *v76;
  const char *v77;
  NSObject *v78;
  uint32_t v79;
  unsigned __int8 v80;
  void *v81;
  unsigned int v82;
  unsigned int v83;
  NSObject *v84;
  char *v85;
  char *v86;
  char *v87;
  const char *v88;
  char *v89;
  const char *v90;
  unsigned __int8 v91;
  NSObject *v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  char *v95;
  void *v96;
  id v97;
  void *v98;
  id v99;
  __CFString *v100;
  id v101;
  void *v102;
  void *v103;
  id v104;
  uint64_t v105;
  int v106;
  void *v107;
  int v108;
  void *v109;
  id v110;
  void *v111;
  id v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t *v116;
  uint64_t *v117;
  uint64_t *v118;
  uint64_t v119;
  void *v120;
  uint64_t v121;
  void *v122;
  void *v123;
  NSObject *v124;
  id v125;
  id *v126;
  uint64_t *v127;
  id v128;
  void *v129;
  void *v130;
  void *v131;
  id v132;
  id v133;
  uint8_t buf[23];
  char v135;
  uint64_t v136;

  v136 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 296);
  v135 = 9;
  strcpy((char *)buf, "landmarks");
  v3 = sub_1C9892E58((_QWORD *)(v2 + 200), (uint64_t)buf);
  if (!v3)
    abort();
  if (v3[8] == 24)
  {
    v4 = (_QWORD *)(v2 + 120);
    v135 = 21;
    strcpy((char *)buf, "left_eye_warp_field_X");
    v5 = sub_1C9892E58((_QWORD *)(v2 + 120), (uint64_t)buf);
    if (!v5)
      abort();
    v6 = v5;
    v135 = 21;
    strcpy((char *)buf, "left_eye_warp_field_Y");
    v7 = sub_1C9892E58(v4, (uint64_t)buf);
    if (!v7)
      abort();
    v8 = v7;
    strcpy((char *)buf, "right_eye_warp_field_X");
    v135 = 22;
    v9 = sub_1C9892E58(v4, (uint64_t)buf);
    if (!v9)
      abort();
    v10 = v9;
    strcpy((char *)buf, "right_eye_warp_field_Y");
    v135 = 22;
    v11 = sub_1C9892E58(v4, (uint64_t)buf);
    if (!v11)
      abort();
    v12 = v11;
    if ((objc_msgSend((id)v6[5], "isEqualToDictionary:", v8[5]) & 1) != 0)
    {
      if ((objc_msgSend((id)v6[5], "isEqualToDictionary:", v10[5]) & 1) != 0)
      {
        if ((objc_msgSend((id)v6[5], "isEqualToDictionary:", v12[5]) & 1) != 0)
        {
          objc_msgSend(*(id *)(a1 + 184), "commandBuffer");
          v130 = (void *)objc_claimAutoreleasedReturnValue();
          v13 = *(id **)(a1 + 240);
          v14 = operator new();
          *(_QWORD *)(v14 + 96) = 0;
          *(_OWORD *)(v14 + 64) = 0u;
          *(_OWORD *)(v14 + 80) = 0u;
          *(_OWORD *)(v14 + 32) = 0u;
          *(_OWORD *)(v14 + 48) = 0u;
          *(_OWORD *)v14 = 0u;
          *(_OWORD *)(v14 + 16) = 0u;
          v15 = (void *)v6[5];
          v16 = v130;
          v17 = v15;
          if (!v17)
          {
            v39 = atomic_load((unsigned __int8 *)&qword_1EF921288);
            if ((v39 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
            {
              qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
              __cxa_guard_release(&qword_1EF921288);
            }
            v31 = (__CFString *)(id)qword_1EF921280;
            if (os_log_type_enabled((os_log_t)v31, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              v24 = 2;
              _os_log_error_impl(&dword_1C9870000, (os_log_t)v31, OS_LOG_TYPE_ERROR, "Precondition violated: warpfieldSurfaceProperties", buf, 2u);
              v131 = 0;
              v40 = 1;
            }
            else
            {
              v131 = 0;
              v40 = 1;
              v24 = 2;
            }
            goto LABEL_82;
          }
          v131 = v17;
          v18 = *v13;
          v19 = operator new();
          v126 = v13;
          *(_OWORD *)v19 = 0u;
          *(_OWORD *)(v19 + 16) = 0u;
          v128 = v18;
          v20 = (_QWORD *)operator new();
          *v20 = 0;
          v20[1] = 0;
          v20[2] = &off_1E8295290;
          v20[5] = v20 + 2;
          v133 = v20;
          v21 = sub_1C98A468C((id *)v20, v128);
          v22 = v21 != 0;
          if (v21)
          {
            v127 = (uint64_t *)(v19 + 8);
            v23 = atomic_load((unsigned __int8 *)&qword_1EF921288);
            if ((v23 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
            {
              qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
              __cxa_guard_release(&qword_1EF921288);
            }
            v24 = (2 * v22);
            v25 = (id)qword_1EF921280;
            if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
            {
              if ((v24 - 1) > 6)
                v88 = "Success, no error";
              else
                v88 = off_1E8296478[(v24 - 1)];
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "Precondition was violated";
              *(_WORD *)&buf[12] = 2080;
              *(_QWORD *)&buf[14] = v88;
              _os_log_error_impl(&dword_1C9870000, v25, OS_LOG_TYPE_ERROR, "Running result->setup(std::forward<Params>(params)...) failed with %s, returning %s", buf, 0x16u);
            }

            sub_1C9889B34((uint64_t *)&v133, 0);
            v26 = atomic_load((unsigned __int8 *)&qword_1EF921288);
            if ((v26 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
            {
              qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
              __cxa_guard_release(&qword_1EF921288);
            }
            v27 = (id)qword_1EF921280;
            if (!os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
              goto LABEL_16;
            v89 = off_1E8296478[(v24 - 1)];
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = v89;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = v89;
            v90 = "Running construct(m_metalHelpers, device) failed with %s, returning %s";
LABEL_105:
            _os_log_error_impl(&dword_1C9870000, v27, OS_LOG_TYPE_ERROR, v90, buf, 0x16u);
LABEL_16:

            v28 = atomic_load((unsigned __int8 *)&qword_1EF921288);
            if ((v28 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
            {
              qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
              __cxa_guard_release(&qword_1EF921288);
            }
            v29 = (id)qword_1EF921280;
            if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
            {
              v87 = off_1E8296478[(v24 - 1)];
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = v87;
              *(_WORD *)&buf[12] = 2080;
              *(_QWORD *)&buf[14] = v87;
              _os_log_error_impl(&dword_1C9870000, v29, OS_LOG_TYPE_ERROR, "Running result->setup(std::forward<Params>(params)...) failed with %s, returning %s", buf, 0x16u);
            }

            sub_1C9889B34(v127, 0);
            MEMORY[0x1CAA44AFC](v19, 0xA0C40069AE433);

            v30 = atomic_load((unsigned __int8 *)&qword_1EF921288);
            if ((v30 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
            {
              qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
              __cxa_guard_release(&qword_1EF921288);
            }
            v31 = (__CFString *)(id)qword_1EF921280;
            if (os_log_type_enabled((os_log_t)v31, OS_LOG_TYPE_ERROR))
            {
              v32 = off_1E8296478[(v24 - 1)];
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = v32;
              *(_WORD *)&buf[12] = 2080;
              *(_QWORD *)&buf[14] = v32;
              _os_log_error_impl(&dword_1C9870000, (os_log_t)v31, OS_LOG_TYPE_ERROR, "Running construct(m_flowWarper, metalHelpers.device()) failed with %s, returning %s", buf, 0x16u);
            }
            goto LABEL_81;
          }
          v133 = 0;
          sub_1C9889B34((uint64_t *)(v19 + 8), (uint64_t)v20);
          sub_1C9889B34((uint64_t *)&v133, 0);
          v41 = *(void ***)(v19 + 8);
          v42 = CFSTR("FlowWarp");
          if (*(_QWORD *)v19)
          {

            goto LABEL_41;
          }
          v51 = *v41;
          v133 = 0;
          +[VPCMetalLib metalLibraryWithDevice:error:](VPCMetalLib, "metalLibraryWithDevice:error:", v51, &v133);
          v52 = (void *)objc_claimAutoreleasedReturnValue();
          v125 = v133;
          v127 = (uint64_t *)(v19 + 8);
          v123 = v52;
          if (v52)
          {
            v53 = objc_msgSend(v52, "newFunctionWithName:", CFSTR("FlowWarp"), v52);
            v124 = v53;
            if (v53)
            {
              v54 = *v41;
              v132 = v125;
              v55 = objc_msgSend(v54, "newComputePipelineStateWithFunction:error:", v53, &v132);
              v56 = v132;

              v57 = *(id *)v19;
              *(_QWORD *)v19 = v55;

              if (*(_QWORD *)v19)
              {
                v24 = 0;
                v125 = v56;
                goto LABEL_116;
              }
              v93 = atomic_load((unsigned __int8 *)&qword_1EF921288);
              if ((v93 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
              {
                qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
                __cxa_guard_release(&qword_1EF921288);
              }
              v92 = (id)qword_1EF921280;
              if (os_log_type_enabled(v92, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138412290;
                *(_QWORD *)&buf[4] = v56;
                _os_log_error_impl(&dword_1C9870000, v92, OS_LOG_TYPE_ERROR, "Could not create pipeline state: %@", buf, 0xCu);
              }
              v24 = 6;
              v125 = v56;
            }
            else
            {
              v91 = atomic_load((unsigned __int8 *)&qword_1EF921288);
              if ((v91 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
              {
                qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
                __cxa_guard_release(&qword_1EF921288);
              }
              v92 = (id)qword_1EF921280;
              if (os_log_type_enabled(v92, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)buf = 0;
                _os_log_error_impl(&dword_1C9870000, v92, OS_LOG_TYPE_ERROR, "Could not get function", buf, 2u);
              }
              v24 = 5;
            }

          }
          else
          {
            v80 = atomic_load((unsigned __int8 *)&qword_1EF921288);
            if ((v80 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
            {
              qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
              __cxa_guard_release(&qword_1EF921288);
            }
            v124 = (id)qword_1EF921280;
            if (os_log_type_enabled(v124, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412290;
              *(_QWORD *)&buf[4] = v125;
              _os_log_error_impl(&dword_1C9870000, v124, OS_LOG_TYPE_ERROR, "Could not get metal library: %@", buf, 0xCu);
            }
            v24 = 5;
          }
LABEL_116:

          if ((_DWORD)v24)
          {
            v94 = atomic_load((unsigned __int8 *)&qword_1EF921288);
            if ((v94 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
            {
              qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
              __cxa_guard_release(&qword_1EF921288);
            }
            v27 = (id)qword_1EF921280;
            if (!os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
              goto LABEL_16;
            v95 = off_1E8296478[(v24 - 1)];
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = v95;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = v95;
            v90 = "Running m_metalHelpers->getComputePipelineState(@\"FlowWarp\", m_pipeline) failed with %s, returning %s";
            goto LABEL_105;
          }
LABEL_41:

          v43 = *(_QWORD *)(v14 + 32);
          *(_QWORD *)(v14 + 32) = v19;
          if (v43)
          {

            sub_1C9889B34((uint64_t *)(v43 + 8), 0);
            MEMORY[0x1CAA44AFC](v43, 0xA0C40069AE433);
          }

          v44 = CFSTR("leftEye");
          v45 = *v126;
          v46 = (void *)objc_msgSend(v45, "newBufferWithLength:options:", 128, 0);
          v47 = v46;
          if (v46)
          {
            v48 = v46;
            v49 = objc_msgSend((id)v48, "contents");
            *(_OWORD *)(v49 + 80) = 0u;
            *(_OWORD *)(v49 + 96) = 0u;
            *(_OWORD *)(v49 + 48) = 0u;
            *(_OWORD *)(v49 + 64) = 0u;
            *(_OWORD *)(v49 + 16) = 0u;
            *(_OWORD *)(v49 + 32) = 0u;
            *(_OWORD *)v49 = 0u;
            *(_QWORD *)(v49 + 112) = 1065353216;
            *(_BYTE *)(v49 + 120) = 0;
            v50 = 1;
          }
          else
          {
            v48 = 0;
            v50 = 0;
          }

          if (*(unsigned __int8 *)(v14 + 48) == v50)
          {
            if (*(_BYTE *)(v14 + 48))
            {
              v58 = *(void **)(v14 + 40);
              *(_QWORD *)(v14 + 40) = v48;

              v48 = 0;
              v59 = *(unsigned __int8 *)(v14 + 48);
            }
            else
            {
              v59 = 0;
            }
          }
          else if (*(_BYTE *)(v14 + 48))
          {

            v59 = 0;
            *(_BYTE *)(v14 + 48) = 0;
          }
          else
          {
            *(_QWORD *)(v14 + 40) = v48;
            v59 = 1;
            *(_BYTE *)(v14 + 48) = 1;
            v48 = 0;
          }
          if (v47)

          if (v59)
          {
            *(_DWORD *)(objc_msgSend(*(id *)(v14 + 40), "contents") + 116) = 1036831949;
            v60 = objc_msgSend(objc_alloc(MEMORY[0x1E0CBBEA0]), "initWithProperties:", v131);
            if (!v60)
            {
              v31 = CFSTR("leftEye");
              goto LABEL_76;
            }
            v61 = sub_1C98A4068(v126, v60, 1, 0, (id *)(v14 + 56));
            if (v61)
            {
              v31 = CFSTR("leftEye");
LABEL_65:
              v62 = v61 - 1;
              if (v61 == 1)
                v24 = 2;
              else
                v24 = v61;
              v63 = atomic_load((unsigned __int8 *)&qword_1EF921288);
              if ((v63 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
              {
                qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
                __cxa_guard_release(&qword_1EF921288);
              }
              v64 = (id)qword_1EF921280;
              if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
              {
                v65 = off_1E8296478[v62];
                v66 = off_1E8296478[(v24 - 1)];
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = v65;
                *(_WORD *)&buf[12] = 2080;
                *(_QWORD *)&buf[14] = v66;
                _os_log_error_impl(&dword_1C9870000, v64, OS_LOG_TYPE_ERROR, "Running metalHelpers.setupTextureBuffer(warpfieldSurfaceX, MTLTextureUsageShaderRead, false, eye.warpfieldX) failed with %s, returning %s", buf, 0x16u);
              }
LABEL_79:

LABEL_80:
LABEL_81:
              v40 = v24;
LABEL_82:

              v69 = atomic_load((unsigned __int8 *)&qword_1EF921288);
              if ((v69 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
              {
                qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
                __cxa_guard_release(&qword_1EF921288);
              }
              v70 = (id)qword_1EF921280;
              if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
              {
                v74 = off_1E8296478[v40 - 1];
                v75 = off_1E8296478[(v24 - 1)];
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = v74;
                *(_WORD *)&buf[12] = 2080;
                *(_QWORD *)&buf[14] = v75;
                _os_log_error_impl(&dword_1C9870000, v70, OS_LOG_TYPE_ERROR, "Running result->setup(std::forward<Params>(params)...) failed with %s, returning %s", buf, 0x16u);
              }

              v71 = sub_1C98A0CE4(v14);
              MEMORY[0x1CAA44AFC](v71, 0x10A2C40AC51AD7DLL);
              v72 = atomic_load((unsigned __int8 *)&qword_1EF921288);
              if ((v72 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
              {
                qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
                __cxa_guard_release(&qword_1EF921288);
              }
              v73 = (id)qword_1EF921280;
              if (!os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
                goto LABEL_87;
              v76 = off_1E8296478[(v24 - 1)];
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = v76;
              *(_WORD *)&buf[12] = 2080;
              *(_QWORD *)&buf[14] = v76;
              v77 = "Running construct(m_flowWarper, *m_metalHelpers, warmupBuffer, leftWarpSurfacePropsX) failed with %s, returning %s";
              v78 = v73;
              v79 = 22;
              goto LABEL_89;
            }
            v81 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CBBEA0]), "initWithProperties:", v131);
            if (!v81)
            {
              v31 = CFSTR("leftEye");
              goto LABEL_123;
            }
            v129 = v81;
            v82 = sub_1C98A4068(v126, v81, 1, 0, (id *)(v14 + 64));
            if (v82)
            {
              v31 = CFSTR("leftEye");
              goto LABEL_97;
            }
            objc_msgSend(CFSTR("leftEye"), "stringByAppendingPathExtension:", CFSTR("warpfieldX"));
            v96 = (void *)objc_claimAutoreleasedReturnValue();
            v97 = *(id *)(v14 + 56);
            objc_msgSend(v97, "setLabel:", v96);

            objc_msgSend(CFSTR("leftEye"), "stringByAppendingPathExtension:", CFSTR("warpfieldY"));
            v98 = (void *)objc_claimAutoreleasedReturnValue();
            v99 = *(id *)(v14 + 64);
            objc_msgSend(v99, "setLabel:", v98);

            v100 = CFSTR("rightEye");
            v101 = *v126;
            v102 = (void *)objc_msgSend(v101, "newBufferWithLength:options:", 128, 0);
            v103 = v102;
            if (v102)
            {
              v104 = v102;
              v105 = objc_msgSend(v104, "contents");
              *(_OWORD *)(v105 + 80) = 0u;
              *(_OWORD *)(v105 + 96) = 0u;
              *(_OWORD *)(v105 + 48) = 0u;
              *(_OWORD *)(v105 + 64) = 0u;
              *(_OWORD *)(v105 + 16) = 0u;
              *(_OWORD *)(v105 + 32) = 0u;
              *(_OWORD *)v105 = 0u;
              *(_QWORD *)(v105 + 112) = 1065353216;
              *(_BYTE *)(v105 + 120) = 0;
              v106 = 1;
            }
            else
            {
              v106 = 0;
              v104 = (id)(v48 & 0xFFFFFFFFFFFFFF00);
            }

            if (*(unsigned __int8 *)(v14 + 80) == v106)
            {
              if (*(_BYTE *)(v14 + 80))
              {
                v107 = *(void **)(v14 + 72);
                *(_QWORD *)(v14 + 72) = v104;

                v104 = 0;
                v108 = *(unsigned __int8 *)(v14 + 80);
              }
              else
              {
                v108 = 0;
              }
            }
            else if (*(_BYTE *)(v14 + 80))
            {

              v108 = 0;
              *(_BYTE *)(v14 + 80) = 0;
            }
            else
            {
              *(_QWORD *)(v14 + 72) = v104;
              v108 = 1;
              *(_BYTE *)(v14 + 80) = 1;
              v104 = 0;
            }
            if (v103)

            if (v108)
            {
              *(_DWORD *)(objc_msgSend(*(id *)(v14 + 72), "contents") + 116) = 1036831949;
              v60 = objc_msgSend(objc_alloc(MEMORY[0x1E0CBBEA0]), "initWithProperties:", v131);
              if (v60)
              {
                v61 = sub_1C98A4068(v126, v60, 1, 0, (id *)(v14 + 88));
                if (v61)
                {
                  v31 = CFSTR("rightEye");
                  goto LABEL_65;
                }
                v129 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CBBEA0]), "initWithProperties:", v131);
                if (v129)
                {
                  v82 = sub_1C98A4068(v126, v129, 1, 0, (id *)(v14 + 96));
                  if (v82)
                  {
                    v31 = CFSTR("rightEye");
LABEL_97:
                    v83 = v82 - 1;
                    if (v82 == 1)
                      v24 = 2;
                    else
                      v24 = v82;
                    sub_1C98A5610();
                    v84 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR))
                    {
                      v85 = off_1E8296478[v83];
                      v86 = off_1E8296478[(v24 - 1)];
                      *(_DWORD *)buf = 136315394;
                      *(_QWORD *)&buf[4] = v85;
                      *(_WORD *)&buf[12] = 2080;
                      *(_QWORD *)&buf[14] = v86;
                      _os_log_error_impl(&dword_1C9870000, v84, OS_LOG_TYPE_ERROR, "Running metalHelpers.setupTextureBuffer(warpfieldSurfaceY, MTLTextureUsageShaderRead, false, eye.warpfieldY) failed with %s, returning %s", buf, 0x16u);
                    }
                    goto LABEL_125;
                  }
                  objc_msgSend(CFSTR("rightEye"), "stringByAppendingPathExtension:", CFSTR("warpfieldX"));
                  v109 = (void *)objc_claimAutoreleasedReturnValue();
                  v110 = *(id *)(v14 + 88);
                  objc_msgSend(v110, "setLabel:", v109);

                  objc_msgSend(CFSTR("rightEye"), "stringByAppendingPathExtension:", CFSTR("warpfieldY"));
                  v111 = (void *)objc_claimAutoreleasedReturnValue();
                  v112 = *(id *)(v14 + 96);
                  objc_msgSend(v112, "setLabel:", v111);

                  v113 = *(_QWORD *)(a1 + 304);
                  *(_QWORD *)(a1 + 304) = v14;
                  if (v113)
                  {
                    v114 = sub_1C98A0CE4(v113);
                    MEMORY[0x1CAA44AFC](v114, 0x10A2C40AC51AD7DLL);
                  }
                  v135 = 9;
                  strcpy((char *)buf, "landmarks");
                  v115 = sub_1C9892E58(v4, (uint64_t)buf);
                  if (!v115)
                    abort();
                  v116 = v115;
                  v135 = 17;
                  strcpy((char *)buf, "rigid_pose_angles");
                  v117 = sub_1C9892E58(v4, (uint64_t)buf);
                  if (!v117)
                    abort();
                  v118 = v117;
                  v119 = objc_msgSend(objc_alloc(MEMORY[0x1E0CBBEA0]), "initWithProperties:", v116[5]);
                  v120 = *(void **)(a1 + 680);
                  *(_QWORD *)(a1 + 680) = v119;

                  v121 = objc_msgSend(objc_alloc(MEMORY[0x1E0CBBEA0]), "initWithProperties:", v118[5]);
                  v122 = *(void **)(a1 + 688);
                  *(_QWORD *)(a1 + 688) = v121;

                  if (*(_QWORD *)(a1 + 680))
                  {
                    if (*(_QWORD *)(a1 + 688))
                    {
                      v24 = 0;
                      goto LABEL_35;
                    }
                    sub_1C98A5610();
                    v73 = objc_claimAutoreleasedReturnValue();
                    if (!os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
                      goto LABEL_161;
                    *(_WORD *)buf = 0;
                    v77 = "Assertion failed: m_anglesSurface";
                  }
                  else
                  {
                    sub_1C98A5610();
                    v73 = objc_claimAutoreleasedReturnValue();
                    if (!os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
                    {
LABEL_161:
                      v24 = 2;
                      goto LABEL_87;
                    }
                    *(_WORD *)buf = 0;
                    v77 = "Assertion failed: m_landmarksSurface";
                  }
                  v24 = 2;
                  v78 = v73;
                  v79 = 2;
LABEL_89:
                  _os_log_error_impl(&dword_1C9870000, v78, OS_LOG_TYPE_ERROR, v77, buf, v79);
LABEL_87:

                  goto LABEL_35;
                }
                v31 = CFSTR("rightEye");
LABEL_123:
                sub_1C98A5610();
                v84 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)buf = 0;
                  v24 = 2;
                  _os_log_error_impl(&dword_1C9870000, v84, OS_LOG_TYPE_ERROR, "Assertion failed: warpfieldSurfaceY", buf, 2u);
                  v129 = 0;
                }
                else
                {
                  v129 = 0;
                  v24 = 2;
                }
LABEL_125:

                goto LABEL_80;
              }
              v31 = CFSTR("rightEye");
LABEL_76:
              v68 = atomic_load((unsigned __int8 *)&qword_1EF921288);
              if ((v68 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
              {
                qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
                __cxa_guard_release(&qword_1EF921288);
              }
              v64 = (id)qword_1EF921280;
              if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)buf = 0;
                v24 = 2;
                _os_log_error_impl(&dword_1C9870000, v64, OS_LOG_TYPE_ERROR, "Assertion failed: warpfieldSurfaceX", buf, 2u);
                v60 = 0;
              }
              else
              {
                v60 = 0;
                v24 = 2;
              }
              goto LABEL_79;
            }
            v31 = CFSTR("rightEye");
          }
          else
          {
            v31 = CFSTR("leftEye");
          }
          v67 = atomic_load((unsigned __int8 *)&qword_1EF921288);
          if ((v67 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
          {
            qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
            __cxa_guard_release(&qword_1EF921288);
          }
          v60 = (id)qword_1EF921280;
          if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            v24 = 2;
            _os_log_error_impl(&dword_1C9870000, v60, OS_LOG_TYPE_ERROR, "Assertion failed: eye.warpParams = FlowWarper::ParameterBufferHandle::create(metalHelpers.device())", buf, 2u);
          }
          else
          {
            v24 = 2;
          }
          goto LABEL_80;
        }
        v37 = atomic_load((unsigned __int8 *)&qword_1EF921288);
        if ((v37 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
        {
          qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
          __cxa_guard_release(&qword_1EF921288);
        }
        v16 = (id)qword_1EF921280;
        if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          goto LABEL_34;
        *(_WORD *)buf = 0;
        v35 = "Assertion failed: [leftWarpSurfacePropsX isEqualToDictionary:rightWarpSurfacePropsY]";
LABEL_56:
        v24 = 2;
        _os_log_error_impl(&dword_1C9870000, v16, OS_LOG_TYPE_ERROR, v35, buf, 2u);
        goto LABEL_35;
      }
      v36 = atomic_load((unsigned __int8 *)&qword_1EF921288);
      if ((v36 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
      {
        qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
        __cxa_guard_release(&qword_1EF921288);
      }
      v16 = (id)qword_1EF921280;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        v35 = "Assertion failed: [leftWarpSurfacePropsX isEqualToDictionary:rightWarpSurfacePropsX]";
        goto LABEL_56;
      }
    }
    else
    {
      v34 = atomic_load((unsigned __int8 *)&qword_1EF921288);
      if ((v34 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
      {
        qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
        __cxa_guard_release(&qword_1EF921288);
      }
      v16 = (id)qword_1EF921280;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        v35 = "Assertion failed: [leftWarpSurfacePropsX isEqualToDictionary:leftWarpSurfacePropsY]";
        goto LABEL_56;
      }
    }
LABEL_34:
    v24 = 2;
    goto LABEL_35;
  }
  v33 = atomic_load((unsigned __int8 *)&qword_1EF921288);
  if ((v33 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
  {
    qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
    __cxa_guard_release(&qword_1EF921288);
  }
  v16 = (id)qword_1EF921280;
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1C9870000, v16, OS_LOG_TYPE_ERROR, "Precondition violated: outputDims.at(ViewpointCorrectionRegressor::kOutputNameLandmarks)[2] == 2 * TrackedFace::kLandmarkCount", buf, 2u);
  }
  v24 = 1;
LABEL_35:

  return v24;
}

void sub_1C989874C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1C9898854(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned __int8 v19;
  NSObject *v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  NSObject *v23;
  unsigned int v24;
  uint64_t i;
  void *v26;
  id v27;
  _WORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int v35;
  unsigned int v36;
  _QWORD *v42;
  uint64_t v43;
  uint64_t result;
  char *v45;
  char *v46;
  _WORD *v47;
  _WORD *v48;
  _QWORD v49[3];
  _QWORD *v50;
  uint8_t buf[4];
  char *v52;
  __int16 v53;
  char *v54;
  _QWORD v55[5];
  _QWORD v56[6];

  v56[5] = *MEMORY[0x1E0C80C00];
  v2 = *(void **)(a1 + 312);
  if (!v2)
  {
    v21 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v21 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v11 = (id)qword_1EF921280;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1C9870000, v11, OS_LOG_TYPE_ERROR, "Precondition violated: m_faceCropSurface", buf, 2u);
    }
    v18 = 1;
    goto LABEL_42;
  }
  v55[0] = *MEMORY[0x1E0CBBDD0];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(v2, "width"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v56[0] = v3;
  v55[1] = *MEMORY[0x1E0CBBD88];
  v4 = (void *)MEMORY[0x1E0CB37E8];
  v5 = objc_msgSend(*(id *)(a1 + 312), "height");
  if (v5 >= 0)
    v6 = v5;
  else
    v6 = v5 + 1;
  objc_msgSend(v4, "numberWithInteger:", v6 >> 1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v56[1] = v7;
  v55[2] = *MEMORY[0x1E0CBBD70];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(*(id *)(a1 + 312), "bytesPerElement"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v56[2] = v8;
  v55[3] = *MEMORY[0x1E0CBBD78];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(*(id *)(a1 + 312), "bytesPerRow"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v56[3] = v9;
  v55[4] = *MEMORY[0x1E0CBBD90];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", objc_msgSend(*(id *)(a1 + 312), "pixelFormat"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v56[4] = v10;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v56, v55, 5);
  v11 = objc_claimAutoreleasedReturnValue();

  v12 = objc_msgSend(objc_alloc(MEMORY[0x1E0CBBEA0]), "initWithProperties:", v11);
  v13 = *(void **)(a1 + 704);
  *(_QWORD *)(a1 + 704) = v12;

  v14 = *(void **)(a1 + 704);
  if (!v14)
  {
    v22 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v22 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v23 = (id)qword_1EF921280;
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1C9870000, v23, OS_LOG_TYPE_ERROR, "Assertion failed: m_faceCropNoiseSurface", buf, 2u);
    }

    v18 = 2;
    goto LABEL_42;
  }
  v15 = (id *)(a1 + 720);
  v16 = sub_1C98A4068(*(id **)(a1 + 240), v14, 1, 0, (id *)(a1 + 720));
  v17 = v16 - 1;
  if (v16 == 1)
    v18 = 2;
  else
    v18 = v16;
  if (v16)
  {
    v19 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v20 = (id)qword_1EF921280;
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      v45 = off_1E8296478[v17];
      v46 = off_1E8296478[(v18 - 1)];
      *(_DWORD *)buf = 136315394;
      v52 = v45;
      v53 = 2080;
      v54 = v46;
      _os_log_error_impl(&dword_1C9870000, v20, OS_LOG_TYPE_ERROR, "Running m_metalHelpers->setupTextureBuffer(m_faceCropNoiseSurface, MTLTextureUsageShaderRead, false, m_faceCropNoise) failed with %s, returning %s", buf, 0x16u);
    }

    goto LABEL_42;
  }
  objc_msgSend(*v15, "setLabel:", CFSTR("faceCropNoise.texture"));
  v24 = 42;
  *(_DWORD *)buf = 42;
  for (i = 1; i != 624; ++i)
  {
    v24 = i + 1812433253 * (v24 ^ (v24 >> 30));
    *(_DWORD *)&buf[4 * i] = v24;
  }
  if (objc_msgSend(*v15, "iosurface"))
  {
    objc_msgSend(*v15, "iosurface");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "lockWithOptions:seed:", 0, 0);
    v27 = objc_retainAutorelease(v26);
    v28 = (_WORD *)objc_msgSend(v27, "baseAddress");
    v48 = v28;
    v49[0] = &off_1E8295560;
    v50 = v49;
    v49[1] = v27;
  }
  else
  {
    v28 = 0;
    v50 = v49;
    v48 = 0;
    v49[0] = &off_1E82955A8;
  }
  v29 = objc_msgSend(*(id *)(a1 + 704), "height");
  v30 = objc_msgSend(*(id *)(a1 + 704), "bytesPerRow");
  if ((unint64_t)(v30 * v29) >= 2)
  {
    v31 = 0;
    v32 = 2 * ((unint64_t)(v30 * v29) >> 1);
    do
    {
      v33 = 4 * v31;
      v34 = v31 + 397;
      if (v31 == 623)
        v31 = 0;
      else
        ++v31;
      v35 = *(_DWORD *)&buf[4 * (v34 % 0x270)] ^ ((*(_DWORD *)&buf[4 * v31] & 0x7FFFFFFE | *(_DWORD *)&buf[v33] & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)&buf[4 * v31] << 31) >> 31) & 0x9908B0DF;
      v36 = ((v35 ^ (v35 >> 11)) << 7) & 0x9D2C5680 ^ v35 ^ (v35 >> 11);
      *(_DWORD *)&buf[v33] = v35;
      _S2 = (float)((float)((float)((v36 << 15) & 0xEFC60000 ^ v36 ^ (((v36 << 15) & 0xEFC60000 ^ v36) >> 18))
                          * 2.3283e-10)
                  * 2.0)
          + -1.0;
      __asm { FCVT            H2, S2 }
      *v28++ = LOWORD(_S2);
      v32 -= 2;
    }
    while (v32);
  }
  if (!v48)
  {
LABEL_36:
    v42 = v50;
    if (v50 == v49)
    {
      v43 = 4;
      v42 = v49;
    }
    else
    {
      if (!v50)
      {
LABEL_41:
        v18 = 0;
LABEL_42:

        return v18;
      }
      v43 = 5;
    }
    (*(void (**)(_QWORD *))(*v42 + 8 * v43))(v42);
    goto LABEL_41;
  }
  v47 = v48;
  if (v50)
  {
    (*(void (**)(_QWORD *, _WORD **))(*v50 + 48))(v50, &v47);
    v48 = 0;
    goto LABEL_36;
  }
  result = sub_1C9889C1C();
  __break(1u);
  return result;
}

void sub_1C9898E6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1C9898F2C(id **a1, void **a2, unsigned int *a3, unsigned int *a4)
{
  id *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  void *v14;
  NSObject *v15;
  void *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  id v20;
  id v21;
  NSObject *v22;
  uint64_t v23;
  id v24;
  id v25;
  uint64_t v26;
  unsigned __int8 v27;
  NSObject *v28;
  int v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  const char *v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  NSObject *v36;
  unsigned __int8 v37;
  NSObject *v38;
  id *v39;
  char *v41;
  char *v42;
  uint8_t buf[16];
  _BYTE v44[12];
  __int16 v45;
  char *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v8 = (id *)operator new();
  *(_OWORD *)v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  v9 = *a2;
  v10 = *a3;
  v11 = *a4;
  v12 = v9;
  if (!v12)
  {
    v27 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v27 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v28 = (id)qword_1EF921280;
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v44 = 0;
      _os_log_error_impl(&dword_1C9870000, v28, OS_LOG_TYPE_ERROR, "Precondition violated: device", v44, 2u);
    }

    v29 = 1;
    v26 = 2;
    goto LABEL_32;
  }
  v13 = v12;
  objc_storeStrong(v8, v9);
  +[VPCMetalLib metalLibraryWithDevice:error:](VPCMetalLib, "metalLibraryWithDevice:error:", *v8, 0);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  if (v14)
  {
    v15 = objc_opt_new();
    *(_QWORD *)v44 = __PAIR64__(v11, v10);
    -[NSObject setConstantValue:type:atIndex:](v15, "setConstantValue:type:atIndex:", v44, 34, 0);
    v16 = (void *)objc_msgSend(v14, "newFunctionWithName:constantValues:error:", CFSTR("augmentImage"), v15, 0);
    if (v16)
    {
      v17 = objc_msgSend(*v8, "newComputePipelineStateWithFunction:error:", v16, 0);
      v18 = v8[2];
      v8[2] = (id)v17;

      if (v8[2])
      {
        v19 = objc_msgSend(*v8, "newBufferWithLength:options:", 8, 0);
        v20 = v8[1];
        v8[1] = (id)v19;

        v21 = v8[1];
        if (v21)
        {
          objc_msgSend(v21, "setLabel:", CFSTR("[ImageAugmenter] Uniforms"));
          objc_msgSend(MEMORY[0x1E0CC6BB0], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", 25, v10, v11, 0);
          v22 = objc_claimAutoreleasedReturnValue();
          -[NSObject setUsage:](v22, "setUsage:", 3);
          -[NSObject setStorageMode:](v22, "setStorageMode:", 2);
          v23 = objc_msgSend(v13, "newTextureWithDescriptor:", v22);
          v24 = v8[3];
          v8[3] = (id)v23;

          v25 = v8[3];
          if (v25)
          {
            objc_msgSend(v25, "setLabel:", CFSTR("[ImageAugmenter] Intermediate"));
            v26 = 0;
LABEL_30:

            goto LABEL_31;
          }
          v35 = atomic_load((unsigned __int8 *)&qword_1EF921288);
          if ((v35 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
          {
            qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
            __cxa_guard_release(&qword_1EF921288);
          }
          v36 = (id)qword_1EF921280;
          if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl(&dword_1C9870000, v36, OS_LOG_TYPE_ERROR, "Assertion failed: m_intermediateTexture", buf, 2u);
          }

LABEL_29:
          v26 = 2;
          goto LABEL_30;
        }
        v34 = atomic_load((unsigned __int8 *)&qword_1EF921288);
        if ((v34 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
        {
          qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
          __cxa_guard_release(&qword_1EF921288);
        }
        v22 = (id)qword_1EF921280;
        if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          goto LABEL_29;
        *(_WORD *)buf = 0;
        v32 = "Assertion failed: m_uniformsBuffer";
      }
      else
      {
        v33 = atomic_load((unsigned __int8 *)&qword_1EF921288);
        if ((v33 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
        {
          qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
          __cxa_guard_release(&qword_1EF921288);
        }
        v22 = (id)qword_1EF921280;
        if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          goto LABEL_29;
        *(_WORD *)buf = 0;
        v32 = "Assertion failed: m_computePipelineState";
      }
    }
    else
    {
      v31 = atomic_load((unsigned __int8 *)&qword_1EF921288);
      if ((v31 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
      {
        qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
        __cxa_guard_release(&qword_1EF921288);
      }
      v22 = (id)qword_1EF921280;
      if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        goto LABEL_29;
      *(_WORD *)buf = 0;
      v32 = "Assertion failed: kernelFunction";
    }
    v26 = 2;
    _os_log_error_impl(&dword_1C9870000, v22, OS_LOG_TYPE_ERROR, v32, buf, 2u);
    goto LABEL_30;
  }
  v30 = atomic_load((unsigned __int8 *)&qword_1EF921288);
  if ((v30 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
  {
    qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
    __cxa_guard_release(&qword_1EF921288);
  }
  v15 = (id)qword_1EF921280;
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v44 = 0;
    v26 = 2;
    _os_log_error_impl(&dword_1C9870000, v15, OS_LOG_TYPE_ERROR, "Assertion failed: library", v44, 2u);
  }
  else
  {
    v26 = 2;
  }
LABEL_31:

  v29 = v26;
  if ((_DWORD)v26)
  {
LABEL_32:
    v37 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v37 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v38 = (id)qword_1EF921280;
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      v41 = off_1E8296478[v29 - 1];
      v42 = off_1E8296478[(v26 - 1)];
      *(_DWORD *)v44 = 136315394;
      *(_QWORD *)&v44[4] = v41;
      v45 = 2080;
      v46 = v42;
      _os_log_error_impl(&dword_1C9870000, v38, OS_LOG_TYPE_ERROR, "Running result->setup(std::forward<Params>(params)...) failed with %s, returning %s", v44, 0x16u);
    }

    MEMORY[0x1CAA44AFC](v8, 0x80C4018A671A6);
    return v26;
  }
  v39 = *a1;
  *a1 = v8;
  if (v39)
  {

    MEMORY[0x1CAA44AFC](v39, 0x80C4018A671A6);
  }
  return 0;
}

void sub_1C989960C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  va_list va;

  va_start(va, a2);

  sub_1C9893DB4((id **)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1C9899664(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

unsigned __int8 *sub_1C9899710(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  int v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  void **v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  float v25;
  float v26;
  _BOOL8 v27;
  unint64_t v28;
  unint64_t v29;
  size_t prime;
  void *v31;
  void *v32;
  uint64_t v33;
  _QWORD *v34;
  size_t v35;
  size_t v36;
  size_t v37;
  _QWORD *i;
  size_t v39;
  uint64_t v40;
  unint64_t v41;
  uint8x8_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  size_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  void *v51;

  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (uint64_t *)a2;
  else
    v7 = *(uint64_t **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = sub_1C9893030(v7, v8);
  v10 = v9;
  v11 = a1[1];
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(void ***)(*a1 + 8 * v3);
    if (v13)
    {
      v14 = (unsigned __int8 *)*v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v19 = *((_QWORD *)v14 + 1);
            if (v19 == v10)
            {
              v20 = v14[39];
              if ((v20 & 0x80u) == 0)
                v21 = v14[39];
              else
                v21 = *((_QWORD *)v14 + 3);
              if (v21 == v8)
              {
                if ((v20 & 0x80) != 0)
                {
                  if (!memcmp(*((const void **)v14 + 2), v7, *((_QWORD *)v14 + 3)))
                    return v14;
                }
                else
                {
                  if (!v14[39])
                    return v14;
                  v22 = 0;
                  while (v14[v22 + 16] == *((unsigned __int8 *)v7 + v22))
                  {
                    if (v20 == ++v22)
                      return v14;
                  }
                }
              }
            }
            else if ((v19 & (v11 - 1)) != v3)
            {
              goto LABEL_49;
            }
            v14 = *(unsigned __int8 **)v14;
            if (!v14)
              goto LABEL_49;
          }
        }
        do
        {
          v15 = *((_QWORD *)v14 + 1);
          if (v15 == v10)
          {
            v16 = v14[39];
            if ((v16 & 0x80u) == 0)
              v17 = v14[39];
            else
              v17 = *((_QWORD *)v14 + 3);
            if (v17 == v8)
            {
              if ((v16 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v14 + 2), v7, *((_QWORD *)v14 + 3)))
                  return v14;
              }
              else
              {
                if (!v14[39])
                  return v14;
                v18 = 0;
                while (v14[v18 + 16] == *((unsigned __int8 *)v7 + v18))
                {
                  if (v16 == ++v18)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v15 >= v11)
              v15 %= v11;
            if (v15 != v3)
              break;
          }
          v14 = *(unsigned __int8 **)v14;
        }
        while (v14);
      }
    }
  }
LABEL_49:
  v23 = a1 + 2;
  v14 = (unsigned __int8 *)operator new(0x30uLL);
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v10;
  *((_OWORD *)v14 + 1) = *(_OWORD *)a3;
  v24 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *((_QWORD *)v14 + 4) = v24;
  *((_QWORD *)v14 + 5) = 0;
  v25 = (float)(unint64_t)(a1[3] + 1);
  v26 = *((float *)a1 + 8);
  if (!v11 || (float)(v26 * (float)v11) < v25)
  {
    v27 = 1;
    if (v11 >= 3)
      v27 = (v11 & (v11 - 1)) != 0;
    v28 = v27 | (2 * v11);
    v29 = vcvtps_u32_f32(v25 / v26);
    if (v28 <= v29)
      prime = v29;
    else
      prime = v28;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v11 = a1[1];
    if (prime <= v11)
    {
      if (prime >= v11)
        goto LABEL_86;
      v41 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v11 < 3 || (v42 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v42.i16[0] = vaddlv_u8(v42), v42.u32[0] > 1uLL))
      {
        v41 = std::__next_prime(v41);
      }
      else
      {
        v43 = 1 << -(char)__clz(v41 - 1);
        if (v41 >= 2)
          v41 = v43;
      }
      if (prime <= v41)
        prime = v41;
      if (prime >= v11)
      {
        v11 = a1[1];
LABEL_86:
        if ((v11 & (v11 - 1)) != 0)
        {
          if (v10 >= v11)
            v3 = v10 % v11;
          else
            v3 = v10;
        }
        else
        {
          v3 = (v11 - 1) & v10;
        }
        goto LABEL_99;
      }
      if (!prime)
      {
        v51 = (void *)*a1;
        *a1 = 0;
        if (v51)
          operator delete(v51);
        v11 = 0;
        a1[1] = 0;
        goto LABEL_86;
      }
    }
    if (prime >> 61)
      sub_1C9899D30();
    v31 = operator new(8 * prime);
    v32 = (void *)*a1;
    *a1 = (uint64_t)v31;
    if (v32)
      operator delete(v32);
    v33 = 0;
    a1[1] = prime;
    do
      *(_QWORD *)(*a1 + 8 * v33++) = 0;
    while (prime != v33);
    v34 = (_QWORD *)*v23;
    if (!*v23)
    {
LABEL_85:
      v11 = prime;
      goto LABEL_86;
    }
    v35 = v34[1];
    v36 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v37 = v35 & v36;
      *(_QWORD *)(*a1 + 8 * v37) = v23;
      for (i = (_QWORD *)*v34; *v34; i = (_QWORD *)*v34)
      {
        v39 = i[1] & v36;
        if (v39 == v37)
        {
          v34 = i;
        }
        else if (*(_QWORD *)(*a1 + 8 * v39))
        {
          *v34 = *i;
          v40 = 8 * v39;
          *i = **(_QWORD **)(*a1 + v40);
          **(_QWORD **)(*a1 + v40) = i;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v39) = v34;
          v34 = i;
          v37 = v39;
        }
      }
      goto LABEL_85;
    }
    if (v35 >= prime)
      v35 %= prime;
    *(_QWORD *)(*a1 + 8 * v35) = v23;
    v44 = (_QWORD *)*v34;
    if (!*v34)
      goto LABEL_85;
    while (1)
    {
      v46 = v44[1];
      if (v46 >= prime)
        v46 %= prime;
      if (v46 != v35)
      {
        if (!*(_QWORD *)(*a1 + 8 * v46))
        {
          *(_QWORD *)(*a1 + 8 * v46) = v34;
          goto LABEL_90;
        }
        *v34 = *v44;
        v45 = 8 * v46;
        *v44 = **(_QWORD **)(*a1 + v45);
        **(_QWORD **)(*a1 + v45) = v44;
        v44 = v34;
      }
      v46 = v35;
LABEL_90:
      v34 = v44;
      v44 = (_QWORD *)*v44;
      v35 = v46;
      if (!v44)
        goto LABEL_85;
    }
  }
LABEL_99:
  v47 = *a1;
  v48 = *(_QWORD **)(*a1 + 8 * v3);
  if (v48)
  {
    *(_QWORD *)v14 = *v48;
LABEL_107:
    *v48 = v14;
    goto LABEL_108;
  }
  *(_QWORD *)v14 = *v23;
  *v23 = v14;
  *(_QWORD *)(v47 + 8 * v3) = v23;
  if (*(_QWORD *)v14)
  {
    v49 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v49 >= v11)
        v49 %= v11;
    }
    else
    {
      v49 &= v11 - 1;
    }
    v48 = (_QWORD *)(*a1 + 8 * v49);
    goto LABEL_107;
  }
LABEL_108:
  ++a1[3];
  return v14;
}

void sub_1C9899C58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1C9899CDC((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1C9899C6C(uint64_t a1)
{
  id *v2;
  void *v3;
  id *v5;

  v2 = *(id **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (id *)*v2;

      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t *sub_1C9899CDC(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {

      if (*(char *)(v2 + 39) < 0)
        operator delete(*(void **)(v2 + 16));
    }
    operator delete((void *)v2);
  }
  return a1;
}

void sub_1C9899D30()
{
  abort();
}

uint64_t sub_1C9899D3C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  if (!*a1)
  {
LABEL_4:
    v3 = (uint64_t *)a1[4];
    if (v3 == a1 + 1)
    {
      v4 = 4;
      v3 = a1 + 1;
    }
    else
    {
      if (!v3)
        return (uint64_t)a1;
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
    return (uint64_t)a1;
  }
  v6 = *a1;
  v2 = a1[4];
  if (v2)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v6);
    *a1 = 0;
    goto LABEL_4;
  }
  result = sub_1C9889C1C();
  __break(1u);
  return result;
}

void sub_1C9899DC4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)(v1 + 32);
  if (v3 == (_QWORD *)(v1 + 8))
  {
    v4 = 4;
    v3 = (_QWORD *)(v1 + 8);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1C9899E04()
{
  JUMPOUT(0x1CAA44AFCLL);
}

_QWORD *sub_1C9899E18()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E82955A8;
  return result;
}

void sub_1C9899E3C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E82955A8;
}

uint64_t sub_1C9899E58(uint64_t a1)
{

  return a1;
}

void sub_1C9899E80(uint64_t a1)
{

  JUMPOUT(0x1CAA44AFCLL);
}

_QWORD *sub_1C9899EB8(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = &off_1E8295560;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_1C9899EFC(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = &off_1E8295560;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_1C9899F30(uint64_t a1)
{

}

void sub_1C9899F38(id *a1)
{

  operator delete(a1);
}

uint64_t sub_1C9899F60(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 8), "unlockWithOptions:seed:", 0, 0);
}

uint64_t sub_1C9899F70(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  char *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  id *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned __int8 v23;
  NSObject *v24;
  char *v25;
  char *v26;
  const char *v27;
  NSObject *v28;
  uint32_t v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  _QWORD v34[4];

  v34[3] = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = *(_QWORD **)a1;
  v7 = *(_QWORD *)(a1 + 8);
  strcpy((char *)v34, "left_eye_face_location");
  HIBYTE(v34[2]) = 22;
  v8 = sub_1C9892E58(v6, (uint64_t)v34);
  if (!v8)
    abort();
  v9 = objc_msgSend(objc_alloc(MEMORY[0x1E0CBBEA0]), "initWithProperties:", v8[5]);
  v10 = *(void **)(a3 + 168);
  *(_QWORD *)(a3 + 168) = v9;

  if (!*(_QWORD *)(a3 + 168))
  {
    v30 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v30 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v24 = (id)qword_1EF921280;
    if (!os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      goto LABEL_21;
    LOWORD(v34[0]) = 0;
    v27 = "Assertion failed: data.rayfieldSurface";
    goto LABEL_25;
  }
  v11 = *(_QWORD **)a1;
  v12 = (char *)operator new(0x20uLL);
  v34[0] = v12;
  *(_OWORD *)&v34[1] = xmmword_1C9927550;
  strcpy(v12, "left_eye_input_images_low_res");
  v13 = sub_1C9892E58(v11, (uint64_t)v34);
  if (!v13)
    abort();
  v14 = v13;
  operator delete(v12);
  v15 = objc_msgSend(objc_alloc(MEMORY[0x1E0CBBEA0]), "initWithProperties:", v14[5]);
  v16 = *(void **)(a3 + 152);
  *(_QWORD *)(a3 + 152) = v15;

  v17 = *(void **)(a3 + 152);
  if (!v17)
  {
    v31 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v31 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v24 = (id)qword_1EF921280;
    if (!os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      goto LABEL_21;
    LOWORD(v34[0]) = 0;
    v27 = "Assertion failed: data.cropSurface";
    goto LABEL_25;
  }
  v18 = objc_msgSend(v17, "width");
  if (v18 != objc_msgSend(*(id *)(a3 + 152), "height"))
  {
    v32 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v32 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v24 = (id)qword_1EF921280;
    if (!os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
LABEL_21:
      v22 = 2;
      goto LABEL_22;
    }
    LOWORD(v34[0]) = 0;
    v27 = "Currently we only support square crops.";
LABEL_25:
    v22 = 2;
    v28 = v24;
    v29 = 2;
    goto LABEL_26;
  }
  v19 = (id *)(a3 + 160);
  v20 = sub_1C98A4068(*(id **)(v7 + 240), *(void **)(a3 + 152), 4, 1, (id *)(a3 + 160));
  v21 = v20 - 1;
  if (v20 == 1)
    v22 = 2;
  else
    v22 = v20;
  if (v20)
  {
    v23 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v23 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v24 = (id)qword_1EF921280;
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      v25 = off_1E8296478[v21];
      v26 = off_1E8296478[(v22 - 1)];
      LODWORD(v34[0]) = 136315394;
      *(_QWORD *)((char *)v34 + 4) = v25;
      WORD2(v34[1]) = 2080;
      *(_QWORD *)((char *)&v34[1] + 6) = v26;
      v27 = "Running m_metalHelpers->setupTextureBuffer(data.cropSurface, MTLTextureUsageRenderTarget, true, data.crop) f"
            "ailed with %s, returning %s";
      v28 = v24;
      v29 = 22;
LABEL_26:
      _os_log_error_impl(&dword_1C9870000, v28, OS_LOG_TYPE_ERROR, v27, (uint8_t *)v34, v29);
    }
  }
  else
  {
    objc_msgSend(v5, "stringByAppendingPathExtension:", CFSTR("luma"));
    v24 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(*v19, "setLabel:", v24);
    v22 = 0;
  }
LABEL_22:

  return v22;
}

void sub_1C989A398(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1C989A3D8()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)MGGetStringAnswer();
  v1 = objc_msgSend(v0, "isEqualToString:", CFSTR("iPhone"));

  return v1;
}

void sub_1C989A418(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t *sub_1C989A428(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_1C9889D60(v2);
    MEMORY[0x1CAA44AFC](v3, 0x10A0C409CFA2790);
  }
  return a1;
}

uint64_t sub_1C989A46C(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  *(_QWORD *)a1 = &off_1E82951B8;
  if (*(_QWORD *)(a1 + 152))
  {
    v2 = (uint64_t *)(a1 + 136);
    v3 = *(_QWORD *)(a1 + 136);
    v4 = *(uint64_t **)(a1 + 144);
    v5 = *v4;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v5;
    *(_QWORD *)(a1 + 152) = 0;
    if (v4 != (uint64_t *)(a1 + 136))
    {
      do
      {
        v7 = (uint64_t *)v4[1];
        v8 = (std::__shared_weak_count *)v4[3];
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(p_shared_owners);
          while (__stlxr(v10 - 1, p_shared_owners));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != v2);
    }
  }
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 80));
  std::mutex::~mutex((std::mutex *)(a1 + 16));
  return a1;
}

void sub_1C989A53C(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  *(_QWORD *)a1 = &off_1E82951B8;
  if (*(_QWORD *)(a1 + 152))
  {
    v2 = (uint64_t *)(a1 + 136);
    v3 = *(_QWORD *)(a1 + 136);
    v4 = *(uint64_t **)(a1 + 144);
    v5 = *v4;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v5;
    *(_QWORD *)(a1 + 152) = 0;
    if (v4 != (uint64_t *)(a1 + 136))
    {
      do
      {
        v6 = (uint64_t *)v4[1];
        v7 = (std::__shared_weak_count *)v4[3];
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v9 = __ldaxr(p_shared_owners);
          while (__stlxr(v9 - 1, p_shared_owners));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        operator delete(v4);
        v4 = v6;
      }
      while (v6 != v2);
    }
  }
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 80));
  std::mutex::~mutex((std::mutex *)(a1 + 16));
  JUMPOUT(0x1CAA44AFCLL);
}

void sub_1C989A61C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t i;
  uint64_t *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::unique_lock<std::mutex> v13;

  v13.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 16);
  v13.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 16));
  for (i = *(_QWORD *)(a1 + 152); !i; i = *(_QWORD *)(a1 + 152))
    std::condition_variable::wait((std::condition_variable *)(a1 + 80), &v13);
  v5 = *(uint64_t **)(a1 + 144);
  v6 = v5[3];
  *a2 = v5[2];
  a2[1] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    v5 = *(uint64_t **)(a1 + 144);
    i = *(_QWORD *)(a1 + 152);
    v9 = (std::__shared_weak_count *)v5[3];
  }
  else
  {
    v9 = 0;
  }
  v10 = *v5;
  *(_QWORD *)(v10 + 8) = v5[1];
  *(_QWORD *)v5[1] = v10;
  *(_QWORD *)(a1 + 152) = i - 1;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  operator delete(v5);
  if (v13.__owns_)
    std::mutex::unlock(v13.__m_);
}

void sub_1C989A718(uint64_t a1, _QWORD *a2, int a3, uint64_t a4)
{
  _BOOL4 v8;
  uint64_t v9;
  std::chrono::system_clock::time_point v10;
  uint64_t v11;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::unique_lock<std::mutex> v26;

  v26.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 16);
  v26.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 16));
  v8 = 0;
  v9 = *(_QWORD *)(a1 + 152);
  if (a3 < 1 || v9)
    goto LABEL_18;
  v8 = a4 != 0;
  if (a4)
  {
    if (!*(_BYTE *)(a4 + 8))
      goto LABEL_42;
    std::mutex::unlock(*(std::mutex **)a4);
    *(_BYTE *)(a4 + 8) = 0;
  }
  std::chrono::steady_clock::now();
  v10.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  if (!v10.__d_.__rep_)
  {
    v11 = 0;
    goto LABEL_14;
  }
  if (v10.__d_.__rep_ < 1)
  {
    if ((unint64_t)v10.__d_.__rep_ < 0xFFDF3B645A1CAC09)
    {
      v11 = 0x8000000000000000;
      goto LABEL_14;
    }
LABEL_13:
    v11 = 1000 * v10.__d_.__rep_;
    goto LABEL_14;
  }
  if ((unint64_t)v10.__d_.__rep_ <= 0x20C49BA5E353F7)
    goto LABEL_13;
  v11 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_14:
  if (v11 <= ((1000000 * a3) ^ 0x7FFFFFFFFFFFFFFFLL))
    v12.__d_.__rep_ = v11 + 1000000 * a3;
  else
    v12.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
  std::condition_variable::__do_timed_wait((std::condition_variable *)(a1 + 80), &v26, v12);
  std::chrono::steady_clock::now();
  v9 = *(_QWORD *)(a1 + 152);
LABEL_18:
  if (v9)
  {
    v13 = *(_QWORD *)(a1 + 144);
    v15 = *(_QWORD *)(v13 + 16);
    v14 = *(_QWORD *)(v13 + 24);
    if (v14)
    {
      v16 = (unint64_t *)(v14 + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v18 = (std::__shared_weak_count *)a2[1];
    *a2 = v15;
    a2[1] = v14;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v21 = *(uint64_t **)(a1 + 144);
    v22 = *v21;
    *(_QWORD *)(v22 + 8) = v21[1];
    *(_QWORD *)v21[1] = v22;
    --*(_QWORD *)(a1 + 152);
    v23 = (std::__shared_weak_count *)v21[3];
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    operator delete(v21);
  }
  if (v26.__owns_)
    std::mutex::unlock(v26.__m_);
  if (v8)
  {
    if (*(_QWORD *)a4)
    {
      if (!*(_BYTE *)(a4 + 8))
      {
        std::mutex::lock(*(std::mutex **)a4);
        *(_BYTE *)(a4 + 8) = 1;
        return;
      }
    }
    else
    {
      std::__throw_system_error(1, "unique_lock::lock: references null mutex");
    }
    std::__throw_system_error(11, "unique_lock::lock: already locked");
LABEL_42:
    std::__throw_system_error(1, "unique_lock::unlock: not locked");
    __break(1u);
  }
}

void sub_1C989A978(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

BOOL sub_1C989A98C(uint64_t a1, _QWORD *a2)
{
  std::mutex *v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  int v18;

  v4 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  v5 = *(unsigned __int8 *)(a1 + 128);
  if (*(_BYTE *)(a1 + 128))
  {
    std::mutex::unlock(v4);
  }
  else
  {
    v6 = operator new(0x20uLL);
    v7 = a2[1];
    v6[2] = *a2;
    v6[3] = v7;
    if (v7)
    {
      v8 = (unint64_t *)(v7 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    v10 = *(_QWORD *)(a1 + 136);
    *v6 = v10;
    v6[1] = a1 + 136;
    *(_QWORD *)(v10 + 8) = v6;
    *(_QWORD *)(a1 + 136) = v6;
    v11 = *(_QWORD *)(a1 + 152) + 1;
    *(_QWORD *)(a1 + 152) = v11;
    v12 = *(_DWORD *)(a1 + 8);
    if (v12 < (int)v11 && (v12 & 0x80000000) == 0)
    {
      do
      {
        v13 = *(uint64_t **)(a1 + 144);
        v14 = *v13;
        *(_QWORD *)(v14 + 8) = v13[1];
        *(_QWORD *)v13[1] = v14;
        *(_QWORD *)(a1 + 152) = v11 - 1;
        v15 = (std::__shared_weak_count *)v13[3];
        if (v15)
        {
          p_shared_owners = (unint64_t *)&v15->__shared_owners_;
          do
            v17 = __ldaxr(p_shared_owners);
          while (__stlxr(v17 - 1, p_shared_owners));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        operator delete(v13);
        v11 = *(_QWORD *)(a1 + 152);
        v18 = *(_DWORD *)(a1 + 8);
      }
      while (v18 < (int)v11 && (v18 & 0x80000000) == 0);
    }
    std::mutex::unlock(v4);
    std::condition_variable::notify_one((std::condition_variable *)(a1 + 80));
  }
  return v5 == 0;
}

void sub_1C989AABC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1C989AAD0(uint64_t a1)
{
  std::mutex *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  if (*(_QWORD *)(a1 + 152))
  {
    v3 = (uint64_t *)(a1 + 136);
    v4 = *(_QWORD *)(a1 + 136);
    v5 = *(uint64_t **)(a1 + 144);
    v6 = *v5;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v6;
    *(_QWORD *)(a1 + 152) = 0;
    if (v5 != (uint64_t *)(a1 + 136))
    {
      do
      {
        v7 = (uint64_t *)v5[1];
        v8 = (std::__shared_weak_count *)v5[3];
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(p_shared_owners);
          while (__stlxr(v10 - 1, p_shared_owners));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        operator delete(v5);
        v5 = v7;
      }
      while (v7 != v3);
    }
  }
  std::mutex::unlock(v2);
}

uint64_t sub_1C989AB90(uint64_t a1)
{
  std::mutex *v2;
  uint64_t v3;

  v2 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  v3 = *(unsigned int *)(a1 + 152);
  std::mutex::unlock(v2);
  return v3;
}

uint64_t *sub_1C989ABC8(uint64_t *a1)
{
  std::mutex *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;

  v2 = (std::mutex *)(a1 + 3);
  std::mutex::lock((std::mutex *)(a1 + 3));
  *((_BYTE *)a1 + 136) = 1;
  std::mutex::unlock(v2);
  v3 = *a1;
  v4 = **(_QWORD **)(*a1 + 8);
  std::mutex::lock((std::mutex *)(v4 + 16));
  *(_BYTE *)(v4 + 128) = 1;
  std::mutex::unlock((std::mutex *)(v4 + 16));
  v5 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 24) - *(_QWORD *)(*(_QWORD *)(v3 + 8) + 16);
  if ((int)(v5 >> 4) >= 1)
  {
    v6 = 0;
    v7 = v5 & 0xFFFFFFFF0;
    do
    {
      sub_1C991F874(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 16) + v6), 1);
      v6 += 16;
    }
    while (v7 != v6);
  }
  v8 = a1[21];
  a1[21] = 0;
  if (v8)
  {
    v9 = sub_1C9889D60(v8);
    MEMORY[0x1CAA44AFC](v9, 0x10A0C409CFA2790);
  }
  a1[1] = (uint64_t)&off_1E82951B8;
  if (a1[20])
  {
    v10 = a1[18];
    v11 = (uint64_t *)a1[19];
    v12 = *v11;
    *(_QWORD *)(v12 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v12;
    a1[20] = 0;
    if (v11 != a1 + 18)
    {
      do
      {
        v15 = (uint64_t *)v11[1];
        v16 = (std::__shared_weak_count *)v11[3];
        if (v16)
        {
          p_shared_owners = (unint64_t *)&v16->__shared_owners_;
          do
            v18 = __ldaxr(p_shared_owners);
          while (__stlxr(v18 - 1, p_shared_owners));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        operator delete(v11);
        v11 = v15;
      }
      while (v15 != a1 + 18);
    }
  }
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 11));
  std::mutex::~mutex(v2);
  v13 = *a1;
  *a1 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return a1;
}

void sub_1C989AD5C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  std::mutex *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;

  v4 = v1[21];
  v1[21] = 0;
  if (v4)
  {
    v5 = sub_1C9889D60(v4);
    MEMORY[0x1CAA44AFC](v5, 0x10A0C409CFA2790);
  }
  v1[1] = (uint64_t)&off_1E82951B8;
  if (v1[20])
  {
    v6 = v1[18];
    v7 = (uint64_t *)v1[19];
    v8 = *v7;
    *(_QWORD *)(v8 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v8;
    v1[20] = 0;
    if (v7 != v1 + 18)
    {
      do
      {
        v10 = (uint64_t *)v7[1];
        v11 = (std::__shared_weak_count *)v7[3];
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldaxr(p_shared_owners);
          while (__stlxr(v13 - 1, p_shared_owners));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        operator delete(v7);
        v7 = v10;
      }
      while (v10 != v1 + 18);
    }
  }
  std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 11));
  std::mutex::~mutex(v2);
  v9 = *v1;
  *v1 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  _Unwind_Resume(a1);
}

void sub_1C989AE44(uint64_t a1)
{
  void *v2;
  char v3;
  uint64_t *v4;
  uint64_t v5;
  Float64 Seconds;
  unsigned __int8 v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t *v10;
  OpaqueCMClock *HostTimeClock;
  unsigned __int8 v12;
  NSObject *v13;
  unsigned __int8 v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t *v17;
  OpaqueCMClock *v18;
  int v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  int v23;
  int v24;
  unint64_t *v25;
  unint64_t v26;
  int v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  void (**v36)(_QWORD, _QWORD);
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t Dictionary;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  __int128 v47;
  cva::DictionaryHandler *v48[2];
  CMTime time;
  uint64_t *v50;
  std::__shared_weak_count *v51;
  cva::DictionaryHandler *v52[2];
  __int128 v53;
  unsigned __int8 v54;
  CMTime v55;
  cva::DictionaryHandler *v56;
  cva::DictionaryHandler *v57;
  CMTime v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1CAA45030]();
  v50 = 0;
  v51 = 0;
  sub_1C989A718(a1 + 8, &v50, 0, 0);
  if ((v3 & 1) == 0)
  {
    v12 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v13 = (id)qword_1EF921280;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v58.value) = 0;
      _os_log_error_impl(&dword_1C9870000, v13, OS_LOG_TYPE_ERROR, "We call process once for each input item - so there should always be at least one item in the queue", (uint8_t *)&v58, 2u);
    }
    goto LABEL_11;
  }
  v4 = v50;
  if (!v50)
  {
    v14 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v13 = (id)qword_1EF921280;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v58.value) = 0;
      _os_log_error_impl(&dword_1C9870000, v13, OS_LOG_TYPE_ERROR, "The queue should not contain nullptr", (uint8_t *)&v58, 2u);
    }
LABEL_11:

    goto LABEL_54;
  }
  std::mutex::lock((std::mutex *)(a1 + 24));
  v5 = *(unsigned int *)(a1 + 160);
  std::mutex::unlock((std::mutex *)(a1 + 24));
  kdebug_trace();
  time = *(CMTime *)((char *)v4 + 36);
  Seconds = CMTimeGetSeconds(&time);
  v48[0] = 0;
  v48[1] = 0;
  v7 = atomic_load((unsigned __int8 *)&qword_1EF921288);
  if (v5)
  {
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v8 = (id)qword_1EF921280;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(v58.value) = 134217984;
      *(Float64 *)((char *)&v58.value + 4) = Seconds;
      _os_log_debug_impl(&dword_1C9870000, v8, OS_LOG_TYPE_DEBUG, "Dropping frame with timestamp %.4f", (uint8_t *)&v58, 0xCu);
    }

    kdebug_trace();
    v9 = *(_QWORD *)(a1 + 168);
    v10 = v50;
    memset(&v58, 0, sizeof(v58));
    HostTimeClock = CMClockGetHostTimeClock();
    CMClockGetTime(&v58, HostTimeClock);
    v56 = 0;
    v57 = 0;
    sub_1C988E2A8((uint64_t *)&v53, v10, 7, 0, &v56);
    v55 = v58;
    sub_1C988E504(v9, (uint64_t)v10, 7, 0, &v55);
    *(_OWORD *)v48 = v53;
  }
  else
  {
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v15 = (id)qword_1EF921280;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(v58.value) = 134217984;
      *(Float64 *)((char *)&v58.value + 4) = Seconds;
      _os_log_debug_impl(&dword_1C9870000, v15, OS_LOG_TYPE_DEBUG, "Processing frame with timestamp %.4f", (uint8_t *)&v58, 0xCu);
    }

    kdebug_trace();
    v16 = *(_QWORD *)(a1 + 168);
    v17 = v50;
    memset(&v58, 0, sizeof(v58));
    v18 = CMClockGetHostTimeClock();
    CMClockGetTime(&v58, v18);
    v54 = 0;
    if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)(v17 + 2), CFSTR("ReturnDebugMetadata"))
      && (cva::DictionaryHandler::item((cva::DictionaryHandler *)(v17 + 2), CFSTR("ReturnDebugMetadata")),
          v19 = cva::ItemHandler::getValue<BOOL>(),
          cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v55),
          v19))
    {
      v20 = (std::__shared_weak_count *)operator new(0x28uLL);
      v20->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      v20->__shared_weak_owners_ = 0;
      v20->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295758;
      v56 = (cva::DictionaryHandler *)cva::DictionaryHandler::DictionaryHandler((cva::DictionaryHandler *)&v20[1]);
      v57 = (cva::DictionaryHandler *)v20;
      *(_QWORD *)&v53 = v56;
      *((_QWORD *)&v53 + 1) = v20;
      do
        v22 = __ldxr(p_shared_owners);
      while (__stxr(v22 + 1, p_shared_owners));
      v23 = 1;
    }
    else
    {
      v23 = 0;
      v20 = 0;
      v56 = 0;
      v57 = 0;
      v53 = 0uLL;
    }
    v24 = sub_1C9889EE8(v16, (uint64_t)v17, &v54, (cva::DictionaryHandler **)&v53);
    if (v23)
    {
      v25 = (unint64_t *)&v20->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v27 = v54;
    v28 = (std::__shared_weak_count *)v57;
    v52[0] = v56;
    v52[1] = v57;
    if (v57)
    {
      v29 = (unint64_t *)((char *)v57 + 8);
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    sub_1C988E2A8((uint64_t *)&v47, v17, v24, v27 != 0, v52);
    if (v28)
    {
      v31 = (unint64_t *)&v28->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    v55 = v58;
    sub_1C988E504(v16, (uint64_t)v17, v24, v54, &v55);
    v33 = (std::__shared_weak_count *)v57;
    if (v57)
    {
      v34 = (unint64_t *)((char *)v57 + 8);
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    *(_OWORD *)v48 = v47;
    v10 = v50;
  }
  kdebug_trace();
  v36 = (void (**)(_QWORD, _QWORD))MEMORY[0x1CAA45144](v10[1]);
  v37 = v51;
  v50 = 0;
  v51 = 0;
  if (v37)
  {
    v38 = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  Dictionary = cva::DictionaryHandler::getDictionary(v48[0]);
  v36[2](v36, Dictionary);

  v41 = (std::__shared_weak_count *)v48[1];
  if (v48[1])
  {
    v42 = (unint64_t *)((char *)v48[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
LABEL_54:
  v44 = v51;
  if (v51)
  {
    v45 = (unint64_t *)&v51->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  objc_autoreleasePoolPop(v2);
}

void sub_1C989B548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  std::__shared_weak_count *v25;
  void *v27;

  std::__shared_weak_count::~__shared_weak_count(v25);
  operator delete(v27);
  kdebug_trace();
  sub_1C987C140((uint64_t)&a11);
  sub_1C987C140((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_1C989B62C()
{
  JUMPOUT(0x1CAA44AFCLL);
}

__n128 sub_1C989B640(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E82953B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_1C989B680(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E82953B0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C989B6A8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t sub_1C989B6C4(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;
  unsigned __int8 v7;
  NSObject *v8;
  unsigned __int8 v9;
  NSObject *v10;
  uint8_t *v11;
  unsigned __int8 v12;
  __int16 v13;
  __int16 v14;
  uint8_t buf[16];

  if (a2[3] == *(unsigned __int8 *)(a1 + 257) + 11)
  {
    v4 = *(_QWORD **)(a1 + 16);
    if (v4)
    {
      while (sub_1C989B960(*a2, a2[1], (uint64_t)(v4 + 2)))
      {
        sub_1C989BB34(a1, (uint64_t)(v4 + 2));
        sub_1C989BEB4();
        v4 = (_QWORD *)*v4;
        if (!v4)
          goto LABEL_5;
      }
      v9 = atomic_load((unsigned __int8 *)&qword_1EF921288);
      if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
      {
        qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
        __cxa_guard_release(&qword_1EF921288);
      }
      v10 = (id)qword_1EF921280;
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        goto LABEL_18;
      v14 = 0;
      v11 = (uint8_t *)&v14;
    }
    else
    {
LABEL_5:
      v5 = *(_QWORD **)(a1 + 56);
      if (!v5)
      {
LABEL_8:
        result = 0;
        *(_BYTE *)(a1 + 256) = 1;
        return result;
      }
      while (sub_1C989B960(*a2, a2[1], (uint64_t)(v5 + 2)))
      {
        sub_1C989BB34(a1 + 40, (uint64_t)(v5 + 2));
        sub_1C989BEB4();
        v5 = (_QWORD *)*v5;
        if (!v5)
          goto LABEL_8;
      }
      v12 = atomic_load((unsigned __int8 *)&qword_1EF921288);
      if ((v12 & 1) == 0)
      {
        if (__cxa_guard_acquire(&qword_1EF921288))
        {
          qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
          __cxa_guard_release(&qword_1EF921288);
        }
      }
      v10 = (id)qword_1EF921280;
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        goto LABEL_18;
      v13 = 0;
      v11 = (uint8_t *)&v13;
    }
    _os_log_error_impl(&dword_1C9870000, v10, OS_LOG_TYPE_ERROR, "Assertion failed: surfaceIt != surfaces.end()", v11, 2u);
LABEL_18:

    return 2;
  }
  v7 = atomic_load((unsigned __int8 *)&qword_1EF921288);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
  {
    qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
    __cxa_guard_release(&qword_1EF921288);
  }
  v8 = (id)qword_1EF921280;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1C9870000, v8, OS_LOG_TYPE_ERROR, "Precondition violated: surfaces.size() == expectedSurfacesSize", buf, 2u);
  }

  return 1;
}

uint64_t *sub_1C989B960(uint64_t a1, unint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint64_t **v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t *result;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v5 = *(char *)(a3 + 23);
  if (v5 >= 0)
    v6 = (uint64_t *)a3;
  else
    v6 = *(uint64_t **)a3;
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(a3 + 23);
  else
    v7 = *(_QWORD *)(a3 + 8);
  v8 = sub_1C9893030(v6, v7);
  if (a2)
  {
    v9 = v8;
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v11 = v8;
      if (v8 >= a2)
        v11 = v8 % a2;
    }
    else
    {
      v11 = (a2 - 1) & v8;
    }
    v12 = *(uint64_t ***)(a1 + 8 * v11);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        if (v10.u32[0] < 2uLL)
        {
          v14 = a2 - 1;
          while (1)
          {
            v20 = v13[1];
            if (v20 == v9)
            {
              v21 = *((unsigned __int8 *)v13 + 39);
              if ((v21 & 0x80u) == 0)
                v22 = *((unsigned __int8 *)v13 + 39);
              else
                v22 = v13[3];
              if (v22 == v7)
              {
                if ((v21 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v13[2], v6, v13[3]))
                    return v13;
                }
                else
                {
                  if (!*((_BYTE *)v13 + 39))
                    return v13;
                  v23 = 0;
                  while (*((unsigned __int8 *)v13 + v23 + 16) == *((unsigned __int8 *)v6 + v23))
                  {
                    if (v21 == ++v23)
                      return v13;
                  }
                }
              }
            }
            else if ((v20 & v14) != v11)
            {
              return 0;
            }
            result = 0;
            v13 = (uint64_t *)*v13;
            if (!v13)
              return result;
          }
        }
        while (1)
        {
          v16 = v13[1];
          if (v16 == v9)
          {
            v17 = *((unsigned __int8 *)v13 + 39);
            if ((v17 & 0x80u) == 0)
              v18 = *((unsigned __int8 *)v13 + 39);
            else
              v18 = v13[3];
            if (v18 == v7)
            {
              if ((v17 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v6, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v19 = 0;
                while (*((unsigned __int8 *)v13 + v19 + 16) == *((unsigned __int8 *)v6 + v19))
                {
                  if (v17 == ++v19)
                    return v13;
                }
              }
            }
          }
          else
          {
            if (v16 >= a2)
              v16 %= a2;
            if (v16 != v11)
              return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
    }
  }
  return 0;
}

uint64_t sub_1C989BB34(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  int v5;
  void *v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  _BYTE *v27;
  float v28;
  float v29;
  _BOOL8 v30;
  unint64_t v31;
  unint64_t v32;
  size_t v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v37;
  void *__src;
  uint64_t v39[2];
  char v40;

  v5 = *(char *)(a2 + 23);
  v6 = *(void **)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (v5 >= 0)
    v8 = (uint64_t *)a2;
  else
    v8 = *(uint64_t **)a2;
  if (v5 >= 0)
    v9 = *(unsigned __int8 *)(a2 + 23);
  else
    v9 = *(_QWORD *)(a2 + 8);
  v10 = sub_1C9893030(v8, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  __src = v6;
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v2 = v10;
      if (v10 >= v12)
        v2 = v10 % v12;
    }
    else
    {
      v2 = (v12 - 1) & v10;
    }
    v14 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v2);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        if (v13.u32[0] < 2uLL)
        {
          v16 = v12 - 1;
          while (1)
          {
            v21 = *(_QWORD *)(v15 + 8);
            if (v21 == v11)
            {
              v22 = *(unsigned __int8 *)(v15 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *(unsigned __int8 *)(v15 + 39);
              else
                v23 = *(_QWORD *)(v15 + 24);
              if (v23 == v9)
              {
                if ((v22 & 0x80) != 0)
                {
                  v37 = v16;
                  v25 = memcmp(*(const void **)(v15 + 16), v8, *(_QWORD *)(v15 + 24));
                  v16 = v37;
                  if (!v25)
                    return v15 + 40;
                }
                else
                {
                  if (!*(_BYTE *)(v15 + 39))
                    return v15 + 40;
                  v24 = 0;
                  while (*(unsigned __int8 *)(v15 + v24 + 16) == *((unsigned __int8 *)v8 + v24))
                  {
                    if (v22 == ++v24)
                      return v15 + 40;
                  }
                }
              }
            }
            else if ((v21 & v16) != v2)
            {
              goto LABEL_49;
            }
            v15 = *(_QWORD *)v15;
            if (!v15)
              goto LABEL_49;
          }
        }
        do
        {
          v17 = *(_QWORD *)(v15 + 8);
          if (v17 == v11)
          {
            v18 = *(unsigned __int8 *)(v15 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *(unsigned __int8 *)(v15 + 39);
            else
              v19 = *(_QWORD *)(v15 + 24);
            if (v19 == v9)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp(*(const void **)(v15 + 16), v8, *(_QWORD *)(v15 + 24)))
                  return v15 + 40;
              }
              else
              {
                if (!*(_BYTE *)(v15 + 39))
                  return v15 + 40;
                v20 = 0;
                while (*(unsigned __int8 *)(v15 + v20 + 16) == *((unsigned __int8 *)v8 + v20))
                {
                  if (v18 == ++v20)
                    return v15 + 40;
                }
              }
            }
          }
          else
          {
            if (v17 >= v12)
              v17 %= v12;
            if (v17 != v2)
              break;
          }
          v15 = *(_QWORD *)v15;
        }
        while (v15);
      }
    }
  }
LABEL_49:
  v26 = operator new(0x30uLL);
  v39[0] = (uint64_t)v26;
  v39[1] = a1 + 16;
  v40 = 0;
  v27 = v26 + 2;
  *v26 = 0;
  v26[1] = v11;
  if (v5 < 0)
  {
    sub_1C987D148(v27, __src, v7);
  }
  else
  {
    *(_OWORD *)v27 = *(_OWORD *)a2;
    v26[4] = *(_QWORD *)(a2 + 16);
  }
  v26[5] = 0;
  v40 = 1;
  v28 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v29 = *(float *)(a1 + 32);
  if (!v12 || (float)(v29 * (float)v12) < v28)
  {
    v30 = 1;
    if (v12 >= 3)
      v30 = (v12 & (v12 - 1)) != 0;
    v31 = v30 | (2 * v12);
    v32 = vcvtps_u32_f32(v28 / v29);
    if (v31 <= v32)
      v33 = v32;
    else
      v33 = v31;
    sub_1C989C304(a1, v33);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v2 = v11 % v12;
      else
        v2 = v11;
    }
    else
    {
      v2 = (v12 - 1) & v11;
    }
  }
  v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
  if (v34)
  {
    *(_QWORD *)v39[0] = *v34;
    *v34 = v39[0];
  }
  else
  {
    *(_QWORD *)v39[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v39[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v2) = a1 + 16;
    if (*(_QWORD *)v39[0])
    {
      v35 = *(_QWORD *)(*(_QWORD *)v39[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v35 >= v12)
          v35 %= v12;
      }
      else
      {
        v35 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v35) = v39[0];
    }
  }
  v15 = v39[0];
  v39[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_1C989C20C(v39);
  return v15 + 40;
}

void sub_1C989BE9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1C989C20C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1C989BEB4()
{
  int v0;
  int v1;
  int v2;
  int v3;
  char __str[4];
  int v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v0 = e5rt_buffer_object_create_from_iosurface();
  if (v0)
  {
    snprintf(__str, 0x40uLL, "e5rt::EnsureSuccess failed with error code %d.", v0);
    v1 = _os_crash();
    __break(1u);
    goto LABEL_5;
  }
  while (1)
  {
    v1 = e5rt_io_port_bind_buffer_object();
    if (!v1)
      break;
LABEL_5:
    snprintf(__str, 0x40uLL, "e5rt::EnsureSuccess failed with error code %d.", v1);
    v2 = _os_crash();
    __break(1u);
    v3 = v2;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__str = 67109120;
      v5 = v3;
      _os_log_error_impl(&dword_1C9870000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "e5rt::AssertSuccess failed with error code %d.", (uint8_t *)__str, 8u);
    }
  }
}

void sub_1C989C05C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1C989C148((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_1C989C080(uint64_t **a1)
{
  uint64_t v2;
  int v3;
  int v5;
  uint8_t buf[4];
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = **a1;
  **a1 = (uint64_t)a1[1];
  if (v2)
  {
    v3 = e5rt_buffer_object_release();
    if (v3)
    {
      v5 = v3;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        v7 = v5;
        _os_log_error_impl(&dword_1C9870000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "e5rt::AssertSuccess failed with error code %d.", buf, 8u);
      }
    }
  }
  return a1;
}

uint64_t *sub_1C989C148(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  int v5;
  uint8_t buf[4];
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = e5rt_buffer_object_release();
    if (v3)
    {
      v5 = v3;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        v7 = v5;
        _os_log_error_impl(&dword_1C9870000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "e5rt::AssertSuccess failed with error code %d.", buf, 8u);
      }
    }
  }
  return a1;
}

uint64_t *sub_1C989C20C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v6;
  uint8_t buf[4];
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(_QWORD *)(v2 + 40);
      *(_QWORD *)(v2 + 40) = 0;
      if (v3)
      {
        v4 = e5rt_io_port_release();
        if (v4)
        {
          v6 = v4;
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67109120;
            v8 = v6;
            _os_log_error_impl(&dword_1C9870000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "e5rt::AssertSuccess failed with error code %d.", buf, 8u);
          }
        }
      }
      if (*(char *)(v2 + 39) < 0)
        operator delete(*(void **)(v2 + 16));
    }
    operator delete((void *)v2);
  }
  return a1;
}

void sub_1C989C304(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  size_t v10;
  size_t v11;
  size_t v12;
  _QWORD *v13;
  size_t v14;
  uint64_t v15;
  unint64_t v16;
  uint8x8_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  size_t v21;
  void *v22;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(_QWORD *)&v4)
  {
    if (prime >= *(_QWORD *)&v4)
      return;
    v16 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v17 = (uint8x8_t)vcnt_s8(v4), v17.i16[0] = vaddlv_u8(v17), v17.u32[0] > 1uLL))
    {
      v16 = std::__next_prime(v16);
    }
    else
    {
      v18 = 1 << -(char)__clz(v16 - 1);
      if (v16 >= 2)
        v16 = v18;
    }
    if (prime <= v16)
      prime = v16;
    if (prime >= *(_QWORD *)&v4)
      return;
    if (!prime)
    {
      v22 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v22)
        operator delete(v22);
      *(_QWORD *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61)
    sub_1C9899D30();
  v5 = operator new(8 * prime);
  v6 = *(void **)a1;
  *(_QWORD *)a1 = v5;
  if (v6)
    operator delete(v6);
  v7 = 0;
  *(_QWORD *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  v9 = a1 + 16;
  v8 = *(_QWORD **)(a1 + 16);
  if (v8)
  {
    v10 = v8[1];
    v11 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v12 = v10 & v11;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v9;
      while (1)
      {
        v13 = (_QWORD *)*v8;
        if (!*v8)
          break;
        v14 = v13[1] & v11;
        if (v14 == v12)
        {
          v8 = (_QWORD *)*v8;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v14))
        {
          *v8 = *v13;
          v15 = 8 * v14;
          *v13 = **(_QWORD **)(*(_QWORD *)a1 + v15);
          **(_QWORD **)(*(_QWORD *)a1 + v15) = v13;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v14) = v8;
          v8 = v13;
          v12 = v14;
        }
      }
      return;
    }
    if (v10 >= prime)
      v10 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v10) = v9;
    v19 = (_QWORD *)*v8;
    if (*v8)
    {
      do
      {
        v21 = v19[1];
        if (v21 >= prime)
          v21 %= prime;
        if (v21 != v10)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v21))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v21) = v8;
            goto LABEL_32;
          }
          *v8 = *v19;
          v20 = 8 * v21;
          *v19 = **(_QWORD **)(*(_QWORD *)a1 + v20);
          **(_QWORD **)(*(_QWORD *)a1 + v20) = v19;
          v19 = v8;
        }
        v21 = v10;
LABEL_32:
        v8 = v19;
        v19 = (_QWORD *)*v19;
        v10 = v21;
      }
      while (v19);
    }
  }
}

uint64_t **sub_1C989C548(uint64_t **a1)
{
  uint64_t v2;
  int v3;
  int v5;
  uint8_t buf[4];
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = **a1;
  **a1 = (uint64_t)a1[1];
  if (v2)
  {
    v3 = e5rt_execution_stream_operation_release();
    if (v3)
    {
      v5 = v3;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        v7 = v5;
        _os_log_error_impl(&dword_1C9870000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "e5rt::AssertSuccess failed with error code %d.", buf, 8u);
      }
    }
  }
  return a1;
}

uint64_t **sub_1C989C610(uint64_t **a1)
{
  uint64_t v2;
  int v3;
  int v5;
  uint8_t buf[4];
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = **a1;
  **a1 = (uint64_t)a1[1];
  if (v2)
  {
    v3 = e5rt_io_port_release();
    if (v3)
    {
      v5 = v3;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        v7 = v5;
        _os_log_error_impl(&dword_1C9870000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "e5rt::AssertSuccess failed with error code %d.", buf, 8u);
      }
    }
  }
  return a1;
}

uint64_t sub_1C989C6D8(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  int v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  float v24;
  float v25;
  _BOOL8 v26;
  unint64_t v27;
  unint64_t v28;
  size_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v33[2];
  char v34;

  v5 = *(char *)(a2 + 23);
  if (v5 >= 0)
    v6 = (uint64_t *)a2;
  else
    v6 = *(uint64_t **)a2;
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(a2 + 23);
  else
    v7 = *(_QWORD *)(a2 + 8);
  v8 = sub_1C9893030(v6, v7);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v2 = v8;
      if (v8 >= v10)
        v2 = v8 % v10;
    }
    else
    {
      v2 = (v10 - 1) & v8;
    }
    v12 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v2);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v18 = *(_QWORD *)(v13 + 8);
            if (v18 == v9)
            {
              v19 = *(unsigned __int8 *)(v13 + 39);
              if ((v19 & 0x80u) == 0)
                v20 = *(unsigned __int8 *)(v13 + 39);
              else
                v20 = *(_QWORD *)(v13 + 24);
              if (v20 == v7)
              {
                if ((v19 & 0x80) != 0)
                {
                  if (!memcmp(*(const void **)(v13 + 16), v6, *(_QWORD *)(v13 + 24)))
                    return v13 + 40;
                }
                else
                {
                  if (!*(_BYTE *)(v13 + 39))
                    return v13 + 40;
                  v21 = 0;
                  while (*(unsigned __int8 *)(v13 + v21 + 16) == *((unsigned __int8 *)v6 + v21))
                  {
                    if (v19 == ++v21)
                      return v13 + 40;
                  }
                }
              }
            }
            else if ((v18 & (v10 - 1)) != v2)
            {
              goto LABEL_49;
            }
            v13 = *(_QWORD *)v13;
            if (!v13)
              goto LABEL_49;
          }
        }
        do
        {
          v14 = *(_QWORD *)(v13 + 8);
          if (v14 == v9)
          {
            v15 = *(unsigned __int8 *)(v13 + 39);
            if ((v15 & 0x80u) == 0)
              v16 = *(unsigned __int8 *)(v13 + 39);
            else
              v16 = *(_QWORD *)(v13 + 24);
            if (v16 == v7)
            {
              if ((v15 & 0x80) != 0)
              {
                if (!memcmp(*(const void **)(v13 + 16), v6, *(_QWORD *)(v13 + 24)))
                  return v13 + 40;
              }
              else
              {
                if (!*(_BYTE *)(v13 + 39))
                  return v13 + 40;
                v17 = 0;
                while (*(unsigned __int8 *)(v13 + v17 + 16) == *((unsigned __int8 *)v6 + v17))
                {
                  if (v15 == ++v17)
                    return v13 + 40;
                }
              }
            }
          }
          else
          {
            if (v14 >= v10)
              v14 %= v10;
            if (v14 != v2)
              break;
          }
          v13 = *(_QWORD *)v13;
        }
        while (v13);
      }
    }
  }
LABEL_49:
  v22 = operator new(0x30uLL);
  v33[0] = (uint64_t)v22;
  v33[1] = a1 + 16;
  *v22 = 0;
  v22[1] = v9;
  *((_OWORD *)v22 + 1) = *(_OWORD *)a2;
  v23 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v22[4] = v23;
  v22[5] = 0;
  v34 = 1;
  v24 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v25 = *(float *)(a1 + 32);
  if (!v10 || (float)(v25 * (float)v10) < v24)
  {
    v26 = 1;
    if (v10 >= 3)
      v26 = (v10 & (v10 - 1)) != 0;
    v27 = v26 | (2 * v10);
    v28 = vcvtps_u32_f32(v24 / v25);
    if (v27 <= v28)
      v29 = v28;
    else
      v29 = v27;
    sub_1C989C304(a1, v29);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v2 = v9 % v10;
      else
        v2 = v9;
    }
    else
    {
      v2 = (v10 - 1) & v9;
    }
  }
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
  if (v30)
  {
    *(_QWORD *)v33[0] = *v30;
    *v30 = v33[0];
  }
  else
  {
    *(_QWORD *)v33[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v33[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v2) = a1 + 16;
    if (*(_QWORD *)v33[0])
    {
      v31 = *(_QWORD *)(*(_QWORD *)v33[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v31 >= v10)
          v31 %= v10;
      }
      else
      {
        v31 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v31) = v33[0];
    }
  }
  v13 = v33[0];
  v33[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_1C989C20C(v33);
  return v13 + 40;
}

void sub_1C989CA18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1C989C20C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1C989CA2C(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  int v5;
  uint8_t buf[4];
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = e5rt_io_port_release();
    if (v3)
    {
      v5 = v3;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        v7 = v5;
        _os_log_error_impl(&dword_1C9870000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "e5rt::AssertSuccess failed with error code %d.", buf, 8u);
      }
    }
  }
  return a1;
}

void sub_1C989CAF0(int64x2_t *a1)
{
  int v2;
  uint64_t v3;
  int v4;
  int shape;
  int64x2_t v6;
  uint64_t *v7;
  int v8;
  int v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char __str[4];
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v12 = 0;
  v13 = 0;
  v11 = (uint64_t *)&v13;
  v2 = e5rt_io_port_retain_tensor_desc();
  if (v2)
  {
    snprintf(__str, 0x40uLL, "e5rt::EnsureSuccess failed with error code %d.", v2);
    shape = _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v3 = *v11;
  *v11 = v12;
  if (v3)
  {
    v14 = v3;
    v4 = e5rt_tensor_desc_release();
    if (v4)
      goto LABEL_10;
  }
  while (1)
  {
    v11 = 0;
    v14 = 0;
    shape = e5rt_tensor_desc_get_shape();
    if (!shape)
      break;
LABEL_9:
    snprintf(__str, 0x40uLL, "e5rt::EnsureSuccess failed with error code %d.", shape);
    v4 = _os_crash();
    __break(1u);
LABEL_10:
    v9 = v4;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__str = 67109120;
      v16 = v9;
      _os_log_error_impl(&dword_1C9870000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "e5rt::AssertSuccess failed with error code %d.", (uint8_t *)__str, 8u);
    }
  }
  v6 = vdupq_n_s64(1uLL);
  *a1 = v6;
  a1[1] = v6;
  v7 = v13;
  v13 = 0;
  if (v7)
  {
    v11 = v7;
    v8 = e5rt_tensor_desc_release();
    if (v8)
    {
      v10 = v8;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__str = 67109120;
        v16 = v10;
        _os_log_error_impl(&dword_1C9870000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "e5rt::AssertSuccess failed with error code %d.", (uint8_t *)__str, 8u);
      }
    }
  }
}

void sub_1C989CD08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_1C989E1D8((uint64_t *)va);
  _Unwind_Resume(a1);
}

char *sub_1C989CD2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  int v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  char **v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  char *v24;
  _BYTE *v25;
  float v26;
  float v27;
  _BOOL8 v28;
  unint64_t v29;
  unint64_t v30;
  size_t prime;
  void *v32;
  void *v33;
  uint64_t v34;
  _QWORD *v35;
  size_t v36;
  size_t v37;
  size_t v38;
  _QWORD *i;
  size_t v40;
  uint64_t v41;
  unint64_t v42;
  uint8x8_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  size_t v47;
  _QWORD *v48;
  unint64_t v49;
  void *v51;

  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (uint64_t *)a2;
  else
    v7 = *(uint64_t **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = sub_1C9893030(v7, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(char ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v19 = *((_QWORD *)v14 + 1);
            if (v19 == v10)
            {
              v20 = v14[39];
              if ((v20 & 0x80u) == 0)
                v21 = v14[39];
              else
                v21 = *((_QWORD *)v14 + 3);
              if (v21 == v8)
              {
                if ((v20 & 0x80) != 0)
                {
                  if (!memcmp(*((const void **)v14 + 2), v7, *((_QWORD *)v14 + 3)))
                    return v14;
                }
                else
                {
                  if (!v14[39])
                    return v14;
                  v22 = 0;
                  while (v14[v22 + 16] == *((_BYTE *)v7 + v22))
                  {
                    if (v20 == ++v22)
                      return v14;
                  }
                }
              }
            }
            else if ((v19 & (v11 - 1)) != v3)
            {
              goto LABEL_49;
            }
            v14 = *(char **)v14;
            if (!v14)
              goto LABEL_49;
          }
        }
        do
        {
          v15 = *((_QWORD *)v14 + 1);
          if (v15 == v10)
          {
            v16 = v14[39];
            if ((v16 & 0x80u) == 0)
              v17 = v14[39];
            else
              v17 = *((_QWORD *)v14 + 3);
            if (v17 == v8)
            {
              if ((v16 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v14 + 2), v7, *((_QWORD *)v14 + 3)))
                  return v14;
              }
              else
              {
                if (!v14[39])
                  return v14;
                v18 = 0;
                while (v14[v18 + 16] == *((_BYTE *)v7 + v18))
                {
                  if (v16 == ++v18)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v15 >= v11)
              v15 %= v11;
            if (v15 != v3)
              break;
          }
          v14 = *(char **)v14;
        }
        while (v14);
      }
    }
  }
LABEL_49:
  v23 = (_QWORD *)(a1 + 16);
  v24 = (char *)operator new(0x50uLL);
  *(_QWORD *)v24 = 0;
  *((_QWORD *)v24 + 1) = v10;
  v25 = v24 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_1C987D148(v25, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v25 = *(_OWORD *)a3;
    *((_QWORD *)v24 + 4) = *(_QWORD *)(a3 + 16);
  }
  *((_OWORD *)v24 + 3) = 0u;
  *((_OWORD *)v24 + 4) = 0u;
  v26 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v27 = *(float *)(a1 + 32);
  if (!v11 || (float)(v27 * (float)v11) < v26)
  {
    v28 = 1;
    if (v11 >= 3)
      v28 = (v11 & (v11 - 1)) != 0;
    v29 = v28 | (2 * v11);
    v30 = vcvtps_u32_f32(v26 / v27);
    if (v29 <= v30)
      prime = v30;
    else
      prime = v29;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    if (prime <= v11)
    {
      if (prime >= v11)
        goto LABEL_89;
      v42 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (v43 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v43.i16[0] = vaddlv_u8(v43), v43.u32[0] > 1uLL))
      {
        v42 = std::__next_prime(v42);
      }
      else
      {
        v44 = 1 << -(char)__clz(v42 - 1);
        if (v42 >= 2)
          v42 = v44;
      }
      if (prime <= v42)
        prime = v42;
      if (prime >= v11)
      {
        v11 = *(_QWORD *)(a1 + 8);
LABEL_89:
        if ((v11 & (v11 - 1)) != 0)
        {
          if (v10 >= v11)
            v3 = v10 % v11;
          else
            v3 = v10;
        }
        else
        {
          v3 = (v11 - 1) & v10;
        }
        goto LABEL_102;
      }
      if (!prime)
      {
        v51 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v51)
          operator delete(v51);
        v11 = 0;
        *(_QWORD *)(a1 + 8) = 0;
        goto LABEL_89;
      }
    }
    if (prime >> 61)
      sub_1C9899D30();
    v32 = operator new(8 * prime);
    v33 = *(void **)a1;
    *(_QWORD *)a1 = v32;
    if (v33)
      operator delete(v33);
    v34 = 0;
    *(_QWORD *)(a1 + 8) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v34++) = 0;
    while (prime != v34);
    v35 = (_QWORD *)*v23;
    if (!*v23)
    {
LABEL_88:
      v11 = prime;
      goto LABEL_89;
    }
    v36 = v35[1];
    v37 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v38 = v36 & v37;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v38) = v23;
      for (i = (_QWORD *)*v35; *v35; i = (_QWORD *)*v35)
      {
        v40 = i[1] & v37;
        if (v40 == v38)
        {
          v35 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v40))
        {
          *v35 = *i;
          v41 = 8 * v40;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v41);
          **(_QWORD **)(*(_QWORD *)a1 + v41) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v40) = v35;
          v35 = i;
          v38 = v40;
        }
      }
      goto LABEL_88;
    }
    if (v36 >= prime)
      v36 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v36) = v23;
    v45 = (_QWORD *)*v35;
    if (!*v35)
      goto LABEL_88;
    while (1)
    {
      v47 = v45[1];
      if (v47 >= prime)
        v47 %= prime;
      if (v47 != v36)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v47))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v47) = v35;
          goto LABEL_93;
        }
        *v35 = *v45;
        v46 = 8 * v47;
        *v45 = **(_QWORD **)(*(_QWORD *)a1 + v46);
        **(_QWORD **)(*(_QWORD *)a1 + v46) = v45;
        v45 = v35;
      }
      v47 = v36;
LABEL_93:
      v35 = v45;
      v45 = (_QWORD *)*v45;
      v36 = v47;
      if (!v45)
        goto LABEL_88;
    }
  }
LABEL_102:
  v48 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v48)
  {
    *(_QWORD *)v24 = *v48;
    *v48 = v24;
  }
  else
  {
    *(_QWORD *)v24 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v23;
    if (*(_QWORD *)v24)
    {
      v49 = *(_QWORD *)(*(_QWORD *)v24 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v49 >= v11)
          v49 %= v11;
      }
      else
      {
        v49 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v49) = v24;
    }
  }
  v14 = v24;
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_1C989D2A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1C989E29C((uint64_t *)va);
  _Unwind_Resume(a1);
}

id sub_1C989D2BC()
{
  int v0;
  uint64_t v1;
  int v2;
  int shape;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  int64x2_t v7;
  int64x2_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int component_size;
  int element_size;
  int num_components;
  int component_dtype;
  int strides;
  uint64_t v18;
  const double *v19;
  float64x2_t v20;
  uint64_t v21;
  const double *v22;
  float64x2_t v23;
  float64_t v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t *v32;
  int v33;
  uint64_t *v34;
  int v35;
  int v37;
  int v38;
  int v39;
  int v40;
  float64_t v41;
  int64x2_t v42;
  int64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  int64x2_t v46;
  int64x2_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  const double *v53;
  uint64_t v54;
  _QWORD v55[5];
  _QWORD v56[5];
  char __str[4];
  int v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v52 = 0;
  v48 = (uint64_t *)&v52;
  v49 = 0;
  v0 = e5rt_io_port_retain_tensor_desc();
  if (v0)
  {
    snprintf(__str, 0x40uLL, "e5rt::EnsureSuccess failed with error code %d.", v0);
    shape = _os_crash();
    __break(1u);
    goto LABEL_30;
  }
  v1 = *v48;
  *v48 = v49;
  if (v1)
  {
    v54 = v1;
    v2 = e5rt_tensor_desc_release();
    if (v2)
      goto LABEL_37;
  }
  while (1)
  {
    v48 = 0;
    v54 = 0;
    shape = e5rt_tensor_desc_get_shape();
    if (shape)
    {
LABEL_30:
      snprintf(__str, 0x40uLL, "e5rt::EnsureSuccess failed with error code %d.", shape);
      v10 = _os_crash();
      __break(1u);
LABEL_31:
      snprintf(__str, 0x40uLL, "e5rt::EnsureSuccess failed with error code %d.", v10);
      component_size = _os_crash();
      __break(1u);
LABEL_32:
      snprintf(__str, 0x40uLL, "e5rt::EnsureSuccess failed with error code %d.", component_size);
      element_size = _os_crash();
      __break(1u);
LABEL_33:
      snprintf(__str, 0x40uLL, "e5rt::EnsureSuccess failed with error code %d.", element_size);
      num_components = _os_crash();
      __break(1u);
LABEL_34:
      snprintf(__str, 0x40uLL, "e5rt::EnsureSuccess failed with error code %d.", num_components);
      component_dtype = _os_crash();
      __break(1u);
LABEL_35:
      snprintf(__str, 0x40uLL, "e5rt::EnsureSuccess failed with error code %d.", component_dtype);
      strides = _os_crash();
      __break(1u);
      goto LABEL_36;
    }
    v4 = v48;
    if (v48)
    {
      v5 = 0;
      v6 = (uint64_t *)(v54 + 8 * (_QWORD)v48 - 8);
      v7 = vdupq_n_s64(1uLL);
      v8 = v7;
      do
      {
        v9 = *v6--;
        v46 = v7;
        v47 = v8;
        v46.i64[v5 & 3] = v9;
        v7 = v46;
        v8 = v47;
        v5 = (uint64_t *)((char *)v5 + 1);
      }
      while (v4 != v5);
    }
    else
    {
      v7 = vdupq_n_s64(1uLL);
      v8 = v7;
    }
    v42 = v8;
    v43 = v7;
    v51 = 0;
    v48 = (uint64_t *)&v51;
    v49 = 0;
    v10 = e5rt_tensor_desc_retain_dtype();
    if (v10)
      goto LABEL_31;
    v11 = *v48;
    *v48 = v49;
    if (v11)
    {
      v54 = v11;
      v12 = e5rt_tensor_desc_dtype_release();
      if (v12)
      {
        v38 = v12;
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__str = 67109120;
          v58 = v38;
          _os_log_error_impl(&dword_1C9870000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "e5rt::AssertSuccess failed with error code %d.", (uint8_t *)__str, 8u);
        }
      }
    }
    v49 = 0;
    v50 = 0;
    v48 = 0;
    component_size = e5rt_tensor_desc_dtype_get_component_size();
    if (component_size)
      goto LABEL_32;
    element_size = e5rt_tensor_desc_dtype_get_element_size();
    if (element_size)
      goto LABEL_33;
    num_components = e5rt_tensor_desc_dtype_get_num_components();
    if (num_components)
      goto LABEL_34;
    component_dtype = e5rt_tensor_desc_dtype_get_component_dtype();
    if (component_dtype)
      goto LABEL_35;
    v53 = 0;
    v54 = 0;
    strides = e5rt_tensor_desc_get_strides();
    if (!strides)
      break;
LABEL_36:
    snprintf(__str, 0x40uLL, "e5rt::EnsureSuccess failed with error code %d.", strides);
    v2 = _os_crash();
    __break(1u);
LABEL_37:
    v37 = v2;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__str = 67109120;
      v58 = v37;
      _os_log_error_impl(&dword_1C9870000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "e5rt::AssertSuccess failed with error code %d.", (uint8_t *)__str, 8u);
    }
  }
  v19 = v53;
  v18 = v54;
  v20 = vld1q_dup_f64(v19);
  if (v54)
  {
    v21 = 0;
    v22 = &v53[v54 - 1];
    v23 = v20;
    do
    {
      v24 = *v22--;
      v44 = v20;
      v45 = v23;
      v44.f64[v21 & 3] = v24;
      v20 = v44;
      v23 = v45;
      ++v21;
    }
    while (v18 != v21);
  }
  v41 = v20.f64[1];
  v55[0] = *MEMORY[0x1E0CBBDD0];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v43.i64[0]);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v56[0] = v25;
  v55[1] = *MEMORY[0x1E0CBBD88];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v43.i64[1] * v42.i64[0] * v42.i64[1]);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v56[1] = v26;
  v55[2] = *MEMORY[0x1E0CBBD70];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v49);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v56[2] = v27;
  v55[3] = *MEMORY[0x1E0CBBD78];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLong:", *(_QWORD *)&v41);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  v56[3] = v28;
  v55[4] = *MEMORY[0x1E0CBBD90];
  if (v49 == 2)
    v29 = 1278226536;
  else
    v29 = 1278226534;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v29);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  v56[4] = v30;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v56, v55, 5);
  v31 = (void *)objc_claimAutoreleasedReturnValue();

  v32 = v51;
  v51 = 0;
  if (v32)
  {
    v48 = v32;
    v33 = e5rt_tensor_desc_dtype_release();
    if (v33)
    {
      v39 = v33;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__str = 67109120;
        v58 = v39;
        _os_log_error_impl(&dword_1C9870000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "e5rt::AssertSuccess failed with error code %d.", (uint8_t *)__str, 8u);
      }
    }
  }
  v34 = v52;
  v52 = 0;
  if (v34)
  {
    v48 = v34;
    v35 = e5rt_tensor_desc_release();
    if (v35)
    {
      v40 = v35;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__str = 67109120;
        v58 = v40;
        _os_log_error_impl(&dword_1C9870000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "e5rt::AssertSuccess failed with error code %d.", (uint8_t *)__str, 8u);
      }
    }
  }
  return v31;
}

void sub_1C989D8A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;

  sub_1C989E114(&a29);
  sub_1C989E1D8(&a30);
  _Unwind_Resume(a1);
}

_QWORD *sub_1C989D930(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  int v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _BYTE *v25;
  float v26;
  float v27;
  _BOOL8 v28;
  unint64_t v29;
  unint64_t v30;
  size_t prime;
  void *v32;
  void *v33;
  uint64_t v34;
  _QWORD *v35;
  size_t v36;
  size_t v37;
  size_t v38;
  _QWORD *i;
  size_t v40;
  uint64_t v41;
  unint64_t v42;
  uint8x8_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  size_t v47;
  _QWORD *v48;
  unint64_t v49;
  void *v51;

  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (uint64_t *)a2;
  else
    v7 = *(uint64_t **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = sub_1C9893030(v7, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = (_QWORD *)*v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v19 = v14[1];
            if (v19 == v10)
            {
              v20 = *((unsigned __int8 *)v14 + 39);
              if ((v20 & 0x80u) == 0)
                v21 = *((unsigned __int8 *)v14 + 39);
              else
                v21 = v14[3];
              if (v21 == v8)
              {
                if ((v20 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v7, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  v22 = 0;
                  while (*((unsigned __int8 *)v14 + v22 + 16) == *((unsigned __int8 *)v7 + v22))
                  {
                    if (v20 == ++v22)
                      return v14;
                  }
                }
              }
            }
            else if ((v19 & (v11 - 1)) != v3)
            {
              goto LABEL_49;
            }
            v14 = (_QWORD *)*v14;
            if (!v14)
              goto LABEL_49;
          }
        }
        do
        {
          v15 = v14[1];
          if (v15 == v10)
          {
            v16 = *((unsigned __int8 *)v14 + 39);
            if ((v16 & 0x80u) == 0)
              v17 = *((unsigned __int8 *)v14 + 39);
            else
              v17 = v14[3];
            if (v17 == v8)
            {
              if ((v16 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v7, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                v18 = 0;
                while (*((unsigned __int8 *)v14 + v18 + 16) == *((unsigned __int8 *)v7 + v18))
                {
                  if (v16 == ++v18)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v15 >= v11)
              v15 %= v11;
            if (v15 != v3)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_49:
  v23 = (_QWORD *)(a1 + 16);
  v24 = operator new(0x30uLL);
  *v24 = 0;
  v24[1] = v10;
  v25 = v24 + 2;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_1C987D148(v25, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v25 = *(_OWORD *)a3;
    v24[4] = *(_QWORD *)(a3 + 16);
  }
  v24[5] = 0;
  v26 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v27 = *(float *)(a1 + 32);
  if (!v11 || (float)(v27 * (float)v11) < v26)
  {
    v28 = 1;
    if (v11 >= 3)
      v28 = (v11 & (v11 - 1)) != 0;
    v29 = v28 | (2 * v11);
    v30 = vcvtps_u32_f32(v26 / v27);
    if (v29 <= v30)
      prime = v30;
    else
      prime = v29;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    if (prime <= v11)
    {
      if (prime >= v11)
        goto LABEL_89;
      v42 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (v43 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v43.i16[0] = vaddlv_u8(v43), v43.u32[0] > 1uLL))
      {
        v42 = std::__next_prime(v42);
      }
      else
      {
        v44 = 1 << -(char)__clz(v42 - 1);
        if (v42 >= 2)
          v42 = v44;
      }
      if (prime <= v42)
        prime = v42;
      if (prime >= v11)
      {
        v11 = *(_QWORD *)(a1 + 8);
LABEL_89:
        if ((v11 & (v11 - 1)) != 0)
        {
          if (v10 >= v11)
            v3 = v10 % v11;
          else
            v3 = v10;
        }
        else
        {
          v3 = (v11 - 1) & v10;
        }
        goto LABEL_102;
      }
      if (!prime)
      {
        v51 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v51)
          operator delete(v51);
        v11 = 0;
        *(_QWORD *)(a1 + 8) = 0;
        goto LABEL_89;
      }
    }
    if (prime >> 61)
      sub_1C9899D30();
    v32 = operator new(8 * prime);
    v33 = *(void **)a1;
    *(_QWORD *)a1 = v32;
    if (v33)
      operator delete(v33);
    v34 = 0;
    *(_QWORD *)(a1 + 8) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v34++) = 0;
    while (prime != v34);
    v35 = (_QWORD *)*v23;
    if (!*v23)
    {
LABEL_88:
      v11 = prime;
      goto LABEL_89;
    }
    v36 = v35[1];
    v37 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v38 = v36 & v37;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v38) = v23;
      for (i = (_QWORD *)*v35; *v35; i = (_QWORD *)*v35)
      {
        v40 = i[1] & v37;
        if (v40 == v38)
        {
          v35 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v40))
        {
          *v35 = *i;
          v41 = 8 * v40;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v41);
          **(_QWORD **)(*(_QWORD *)a1 + v41) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v40) = v35;
          v35 = i;
          v38 = v40;
        }
      }
      goto LABEL_88;
    }
    if (v36 >= prime)
      v36 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v36) = v23;
    v45 = (_QWORD *)*v35;
    if (!*v35)
      goto LABEL_88;
    while (1)
    {
      v47 = v45[1];
      if (v47 >= prime)
        v47 %= prime;
      if (v47 != v36)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v47))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v47) = v35;
          goto LABEL_93;
        }
        *v35 = *v45;
        v46 = 8 * v47;
        *v45 = **(_QWORD **)(*(_QWORD *)a1 + v46);
        **(_QWORD **)(*(_QWORD *)a1 + v46) = v45;
        v45 = v35;
      }
      v47 = v36;
LABEL_93:
      v35 = v45;
      v45 = (_QWORD *)*v45;
      v36 = v47;
      if (!v45)
        goto LABEL_88;
    }
  }
LABEL_102:
  v48 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v48)
  {
    *v24 = *v48;
    *v48 = v24;
  }
  else
  {
    *v24 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v23;
    if (*v24)
    {
      v49 = *(_QWORD *)(*v24 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v49 >= v11)
          v49 %= v11;
      }
      else
      {
        v49 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v49) = v24;
    }
  }
  v14 = v24;
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_1C989DEA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1C9899CDC((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_1C989DEBC(uint64_t **a1)
{
  uint64_t v2;
  int v3;
  int v5;
  uint8_t buf[4];
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = **a1;
  **a1 = (uint64_t)a1[1];
  if (v2)
  {
    v3 = e5rt_execution_stream_release();
    if (v3)
    {
      v5 = v3;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        v7 = v5;
        _os_log_error_impl(&dword_1C9870000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "e5rt::AssertSuccess failed with error code %d.", buf, 8u);
      }
    }
  }
  return a1;
}

uint64_t **sub_1C989DF84(uint64_t **a1)
{
  uint64_t v2;
  int v3;
  int v5;
  uint8_t buf[4];
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = **a1;
  **a1 = (uint64_t)a1[1];
  if (v2)
  {
    v3 = e5rt_tensor_desc_release();
    if (v3)
    {
      v5 = v3;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        v7 = v5;
        _os_log_error_impl(&dword_1C9870000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "e5rt::AssertSuccess failed with error code %d.", buf, 8u);
      }
    }
  }
  return a1;
}

uint64_t **sub_1C989E04C(uint64_t **a1)
{
  uint64_t v2;
  int v3;
  int v5;
  uint8_t buf[4];
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = **a1;
  **a1 = (uint64_t)a1[1];
  if (v2)
  {
    v3 = e5rt_tensor_desc_dtype_release();
    if (v3)
    {
      v5 = v3;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        v7 = v5;
        _os_log_error_impl(&dword_1C9870000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "e5rt::AssertSuccess failed with error code %d.", buf, 8u);
      }
    }
  }
  return a1;
}

uint64_t *sub_1C989E114(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  int v5;
  uint8_t buf[4];
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = e5rt_tensor_desc_dtype_release();
    if (v3)
    {
      v5 = v3;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        v7 = v5;
        _os_log_error_impl(&dword_1C9870000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "e5rt::AssertSuccess failed with error code %d.", buf, 8u);
      }
    }
  }
  return a1;
}

uint64_t *sub_1C989E1D8(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  int v5;
  uint8_t buf[4];
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = e5rt_tensor_desc_release();
    if (v3)
    {
      v5 = v3;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        v7 = v5;
        _os_log_error_impl(&dword_1C9870000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "e5rt::AssertSuccess failed with error code %d.", buf, 8u);
      }
    }
  }
  return a1;
}

uint64_t *sub_1C989E29C(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16) && *(char *)(v2 + 39) < 0)
      operator delete(*(void **)(v2 + 16));
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t sub_1C989E2E8(uint64_t result, const char **a2, uint64_t a3, char a4)
{
  const char **v5;
  const char **v6;
  const char **v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  const char **v11;
  const char *v12;
  const char *v13;
  const char *v14;
  int v15;
  int v16;
  const char **v17;
  const char *v18;
  const char *v19;
  int v20;
  int v21;
  const char **v22;
  const char *v23;
  const char *v24;
  const char *v25;
  const char *v26;
  const char *v27;
  const char **v28;
  const char *v29;
  const char **v30;
  const char *v31;
  const char *v32;
  int v33;
  const char *v34;
  int v35;
  const char **v36;
  const char *v37;
  const char *v38;
  const char *v39;
  const char *v40;
  const char **v41;
  const char **v42;
  const char *v43;
  const char *v44;
  const char *v45;
  int v46;
  const char *v47;
  int v48;
  const char *v49;
  const char *v50;
  const char *v51;
  const char *v52;
  const char *v53;
  int v54;
  const char *v55;
  int v56;
  const char *v57;
  const char *v58;
  const char **v59;
  const char **v60;
  const char *v61;
  const char *v62;
  const char **v63;
  const char *v64;
  const char *v65;
  const char *v66;
  const char **v67;
  const char **v68;
  const char *v69;
  const char *v70;
  BOOL v71;
  const char *v72;
  const char **v73;
  const char **v74;
  const char *v75;
  const char *v76;
  const char *v77;
  const char *v78;
  const char *v79;
  const char **v80;
  const char *v81;
  const char *v82;
  int v83;
  const char *v84;
  const char *v85;
  const char *v86;
  const char **v87;
  BOOL v88;
  char v89;
  uint64_t v90;
  const char **v91;
  const char **v92;
  const char *v93;
  const char *v94;
  uint64_t v95;
  uint64_t v96;
  int64_t v97;
  int64_t v98;
  uint64_t v99;
  const char **v100;
  const char *v101;
  const char *v102;
  const char **v103;
  const char *v104;
  const char **v105;
  uint64_t v106;
  uint64_t v107;
  const char *v108;
  int v109;
  uint64_t v110;
  uint64_t v112;
  const char *v113;
  const char **v114;
  const char **v115;
  const char *v116;
  const char **v117;
  const char *v118;
  uint64_t v119;
  uint64_t v120;
  const char *v121;
  const char **v122;
  uint64_t v123;
  unint64_t v124;
  const char **v125;
  const char *v126;
  const char *v127;
  const char **v128;
  const char *v129;
  const char *v130;
  const char *v131;
  const char *v132;
  const char **v133;
  const char *v134;
  int64_t v136;
  const char **v138;
  int64_t v139;
  const char **v140;

  v5 = (const char **)result;
LABEL_2:
  v6 = a2;
  v138 = a2 - 1;
  v7 = v5;
  while (2)
  {
    v8 = (char *)v6 - (char *)v7;
    v9 = v6 - v7;
    switch(v9)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v85 = *v138;
        v86 = *v7;
        result = strcmp(*v138, *v7);
        if ((result & 0x80000000) != 0)
        {
          *v7 = v85;
          *v138 = v86;
        }
        return result;
      case 3:
        v81 = *v7;
        v82 = v7[1];
        v83 = strcmp(v82, *v7);
        v84 = *v138;
        result = strcmp(*v138, v82);
        if (v83 < 0)
        {
          if ((result & 0x80000000) != 0)
          {
            *v7 = v84;
          }
          else
          {
            *v7 = v82;
            v7[1] = v81;
            v134 = *v138;
            result = strcmp(*v138, v81);
            if ((result & 0x80000000) == 0)
              return result;
            v7[1] = v134;
          }
          *v138 = v81;
        }
        else if ((result & 0x80000000) != 0)
        {
          v7[1] = v84;
          *v138 = v82;
          v130 = *v7;
          v129 = v7[1];
          result = strcmp(v129, *v7);
          if ((result & 0x80000000) != 0)
          {
            *v7 = v129;
            v7[1] = v130;
          }
        }
        return result;
      case 4:
        return sub_1C989ED40(v7, v7 + 1, v7 + 2, v138);
      case 5:
        return sub_1C989EE78(v7, v7 + 1, v7 + 2, v7 + 3, v138);
      default:
        if (v8 <= 191)
        {
          v87 = v7 + 1;
          v88 = v7 == v6 || v87 == v6;
          v89 = v88;
          if ((a4 & 1) != 0)
          {
            if ((v89 & 1) == 0)
            {
              v90 = 8;
              v91 = v7;
              do
              {
                v94 = *v91;
                v93 = v91[1];
                v91 = v87;
                result = strcmp(v93, v94);
                if ((result & 0x80000000) != 0)
                {
                  v95 = v90;
                  do
                  {
                    *(const char **)((char *)v7 + v95) = v94;
                    v96 = v95 - 8;
                    if (v95 == 8)
                    {
                      v92 = v7;
                      goto LABEL_114;
                    }
                    v94 = *(const char **)((char *)v7 + v95 - 16);
                    result = strcmp(v93, v94);
                    v95 = v96;
                  }
                  while ((result & 0x80000000) != 0);
                  v92 = (const char **)((char *)v7 + v96);
LABEL_114:
                  *v92 = v93;
                }
                v87 = v91 + 1;
                v90 += 8;
              }
              while (v91 + 1 != a2);
            }
          }
          else if ((v89 & 1) == 0)
          {
            do
            {
              v132 = *v7;
              v131 = v7[1];
              v7 = v87;
              result = strcmp(v131, v132);
              if ((result & 0x80000000) != 0)
              {
                v133 = v7;
                do
                {
                  *v133 = v132;
                  v132 = *(v133 - 2);
                  result = strcmp(v131, v132);
                  --v133;
                }
                while ((result & 0x80000000) != 0);
                *v133 = v131;
              }
              v87 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        v140 = v7;
        if (!a3)
        {
          if (v7 != v6)
          {
            v97 = (unint64_t)(v9 - 2) >> 1;
            v139 = v97;
            do
            {
              v98 = v97;
              if (v139 >= v97)
              {
                v99 = (2 * v97) | 1;
                v100 = &v7[v99];
                v101 = *v100;
                if (2 * v97 + 2 < v9)
                {
                  v102 = v100[1];
                  if (strcmp(*v100, v102) < 0)
                  {
                    v101 = v102;
                    ++v100;
                    v99 = 2 * v98 + 2;
                  }
                }
                v103 = &v7[v98];
                v104 = *v103;
                result = strcmp(v101, *v103);
                if ((result & 0x80000000) == 0)
                {
                  v136 = v98;
                  do
                  {
                    v105 = v100;
                    *v103 = v101;
                    if (v139 < v99)
                      break;
                    v106 = (2 * v99) | 1;
                    v100 = &v7[v106];
                    v107 = 2 * v99 + 2;
                    v101 = *v100;
                    if (v107 < v9)
                    {
                      v108 = v100[1];
                      v109 = strcmp(*v100, v108);
                      if (v109 < 0)
                      {
                        v101 = v108;
                        ++v100;
                      }
                      v7 = v140;
                      if (v109 < 0)
                        v106 = v107;
                    }
                    result = strcmp(v101, v104);
                    v103 = v105;
                    v99 = v106;
                  }
                  while ((result & 0x80000000) == 0);
                  *v105 = v104;
                  v98 = v136;
                }
              }
              v97 = v98 - 1;
            }
            while (v98);
            v110 = (unint64_t)v8 >> 3;
            do
            {
              v112 = 0;
              v113 = *v7;
              v114 = v7;
              do
              {
                v115 = &v114[v112];
                v118 = v115[1];
                v117 = v115 + 1;
                v116 = v118;
                v119 = (2 * v112) | 1;
                v120 = 2 * v112 + 2;
                if (v120 < v110)
                {
                  v121 = v117[1];
                  result = strcmp(v116, v121);
                  if ((int)result < 0)
                  {
                    v116 = v121;
                    ++v117;
                    v119 = v120;
                  }
                }
                *v114 = v116;
                v114 = v117;
                v112 = v119;
              }
              while (v119 <= (uint64_t)((unint64_t)(v110 - 2) >> 1));
              v122 = a2 - 1;
              v88 = v117 == --a2;
              if (v88)
              {
                *v117 = v113;
                v7 = v140;
              }
              else
              {
                *v117 = *v122;
                *v122 = v113;
                v7 = v140;
                v123 = (char *)v117 - (char *)v140 + 8;
                if (v123 >= 9)
                {
                  v124 = (((unint64_t)v123 >> 3) - 2) >> 1;
                  v125 = &v140[v124];
                  v126 = *v125;
                  v127 = *v117;
                  result = strcmp(*v125, *v117);
                  if ((result & 0x80000000) != 0)
                  {
                    do
                    {
                      v128 = v125;
                      *v117 = v126;
                      if (!v124)
                        break;
                      v124 = (v124 - 1) >> 1;
                      v125 = &v140[v124];
                      v126 = *v125;
                      result = strcmp(*v125, v127);
                      v117 = v128;
                    }
                    while ((result & 0x80000000) != 0);
                    *v128 = v127;
                  }
                }
              }
            }
            while (v110-- > 2);
          }
          return result;
        }
        v10 = (unint64_t)v9 >> 1;
        v11 = &v7[(unint64_t)v9 >> 1];
        v12 = *v138;
        if ((unint64_t)v8 >= 0x401)
        {
          v13 = *v11;
          v14 = *v7;
          v15 = strcmp(*v11, *v7);
          v16 = strcmp(v12, v13);
          if (v15 < 0)
          {
            if (v16 < 0)
            {
              v17 = v140;
              *v140 = v12;
              goto LABEL_21;
            }
            v17 = v140;
            *v140 = v13;
            *v11 = v14;
            v27 = *v138;
            if (strcmp(*v138, v14) < 0)
            {
              *v11 = v27;
LABEL_21:
              *v138 = v14;
            }
          }
          else
          {
            v17 = v140;
            if (v16 < 0)
            {
              *v11 = v12;
              *v138 = v13;
              v23 = *v11;
              v24 = *v140;
              if (strcmp(*v11, *v140) < 0)
              {
                *v140 = v23;
                *v11 = v24;
              }
            }
          }
          v28 = &v17[v10];
          v31 = *(v28 - 1);
          v30 = v28 - 1;
          v29 = v31;
          v32 = v17[1];
          v33 = strcmp(v31, v32);
          v34 = *(v6 - 2);
          v35 = strcmp(v34, v31);
          if (v33 < 0)
          {
            if (v35 < 0)
            {
              v36 = v140;
              v140[1] = v34;
              goto LABEL_32;
            }
            v36 = v140;
            v140[1] = v29;
            *v30 = v32;
            v40 = *(v6 - 2);
            if (strcmp(v40, v32) < 0)
            {
              *v30 = v40;
LABEL_32:
              *(v6 - 2) = v32;
            }
          }
          else
          {
            v36 = v140;
            if (v35 < 0)
            {
              *v30 = v34;
              *(v6 - 2) = v29;
              v37 = *v30;
              v38 = v140[1];
              if (strcmp(*v30, v38) < 0)
              {
                v140[1] = v37;
                *v30 = v38;
              }
            }
          }
          v41 = &v36[v10];
          v44 = v41[1];
          v42 = v41 + 1;
          v43 = v44;
          v45 = v36[2];
          v46 = strcmp(v44, v45);
          v47 = *(v6 - 3);
          v48 = strcmp(v47, v44);
          if (v46 < 0)
          {
            if (v48 < 0)
            {
              v140[2] = v47;
              goto LABEL_41;
            }
            v140[2] = v43;
            *v42 = v45;
            v51 = *(v6 - 3);
            if (strcmp(v51, v45) < 0)
            {
              *v42 = v51;
LABEL_41:
              *(v6 - 3) = v45;
            }
          }
          else if (v48 < 0)
          {
            *v42 = v47;
            *(v6 - 3) = v43;
            v49 = *v42;
            v50 = v140[2];
            if (strcmp(*v42, v50) < 0)
            {
              v140[2] = v49;
              *v42 = v50;
            }
          }
          v52 = *v11;
          v53 = *v30;
          v54 = strcmp(*v11, *v30);
          v55 = *v42;
          v56 = strcmp(*v42, v52);
          if (v54 < 0)
          {
            if (v56 < 0)
            {
              v22 = v140;
              goto LABEL_49;
            }
            *v30 = v52;
            *v11 = v53;
            v30 = v11;
            v52 = v55;
            v22 = v140;
            if (strcmp(v55, v53) < 0)
            {
LABEL_49:
              *v30 = v55;
              *v42 = v53;
            }
            else
            {
              v52 = v53;
            }
          }
          else if (v56 < 0)
          {
            *v11 = v55;
            *v42 = v52;
            v42 = v11;
            v52 = v53;
            v22 = v140;
            if (strcmp(v55, v53) < 0)
              goto LABEL_49;
            v52 = v55;
          }
          else
          {
            v22 = v140;
          }
          v57 = *v22;
          *v22 = v52;
          *v11 = v57;
          goto LABEL_53;
        }
        v18 = *v7;
        v19 = *v11;
        v20 = strcmp(*v7, *v11);
        v21 = strcmp(v12, v18);
        if (v20 < 0)
        {
          if (v21 < 0)
          {
            *v11 = v12;
            v22 = v140;
            *v138 = v19;
          }
          else
          {
            *v11 = v18;
            v22 = v140;
            *v140 = v19;
            v39 = *v138;
            if (strcmp(*v138, v19) < 0)
            {
              *v140 = v39;
              *v138 = v19;
            }
          }
        }
        else
        {
          v22 = v140;
          if (v21 < 0)
          {
            *v140 = v12;
            *v138 = v18;
            v25 = *v140;
            v26 = *v11;
            if (strcmp(*v140, *v11) < 0)
            {
              *v11 = v25;
              *v140 = v26;
            }
          }
        }
LABEL_53:
        --a3;
        v58 = *v22;
        v59 = v22;
        if ((a4 & 1) == 0)
        {
          v59 = v22;
          if ((strcmp(*(v22 - 1), *v22) & 0x80000000) == 0)
          {
            result = strcmp(v58, *v138);
            if ((result & 0x80000000) != 0)
            {
              v7 = v22;
              do
              {
                v72 = v7[1];
                ++v7;
                result = strcmp(v58, v72);
              }
              while ((result & 0x80000000) == 0);
            }
            else
            {
              v73 = v22 + 1;
              do
              {
                v7 = v73;
                if (v73 >= a2)
                  break;
                ++v73;
                result = strcmp(v58, *v7);
              }
              while ((result & 0x80000000) == 0);
            }
            v6 = a2;
            v74 = a2;
            if (v7 < a2)
            {
              v74 = a2;
              do
              {
                v75 = *--v74;
                result = strcmp(v58, v75);
              }
              while ((result & 0x80000000) != 0);
            }
            if (v7 < v74)
            {
              v76 = *v7;
              v77 = *v74;
              do
              {
                *v7 = v77;
                *v74 = v76;
                do
                {
                  v78 = v7[1];
                  ++v7;
                  v76 = v78;
                }
                while ((strcmp(v58, v78) & 0x80000000) == 0);
                do
                {
                  v79 = *--v74;
                  v77 = v79;
                  result = strcmp(v58, v79);
                }
                while ((result & 0x80000000) != 0);
              }
              while (v7 < v74);
            }
            v80 = v7 - 1;
            if (v7 - 1 != v22)
              *v22 = *v80;
            a4 = 0;
            *v80 = v58;
            continue;
          }
        }
        do
        {
          v60 = v59;
          v62 = v59[1];
          ++v59;
          v61 = v62;
        }
        while (strcmp(v62, v58) < 0);
        v63 = v6;
        if (v60 == v22)
        {
          v63 = v6;
          do
          {
            if (v59 >= v63)
              break;
            v65 = *--v63;
          }
          while ((strcmp(v65, v58) & 0x80000000) == 0);
        }
        else
        {
          do
            v64 = *--v63;
          while ((strcmp(v64, v58) & 0x80000000) == 0);
        }
        if (v59 < v63)
        {
          v66 = *v63;
          v67 = v59;
          v68 = v63;
          do
          {
            *v67 = v66;
            *v68 = v61;
            do
            {
              v60 = v67;
              v69 = v67[1];
              ++v67;
              v61 = v69;
            }
            while (strcmp(v69, v58) < 0);
            do
            {
              v70 = *--v68;
              v66 = v70;
            }
            while ((strcmp(v70, v58) & 0x80000000) == 0);
          }
          while (v67 < v68);
        }
        v5 = v140;
        if (v60 != v140)
          *v140 = *v60;
        *v60 = v58;
        v6 = a2;
        if (v59 < v63)
        {
LABEL_73:
          result = sub_1C989E2E8(v140, v60, a3, a4 & 1);
          a4 = 0;
          v7 = v60 + 1;
          continue;
        }
        v71 = sub_1C989EF40(v140, v60);
        v7 = v60 + 1;
        result = sub_1C989EF40(v60 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v71)
            continue;
          goto LABEL_73;
        }
        a2 = v60;
        if (!v71)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t sub_1C989ED40(const char **a1, const char **a2, const char **a3, const char **a4)
{
  const char *v8;
  const char *v9;
  int v10;
  const char *v11;
  int v12;
  const char *v13;
  const char *v14;
  const char *v15;
  uint64_t result;
  const char *v17;
  const char *v18;
  const char *v19;
  const char *v20;

  v8 = *a2;
  v9 = *a1;
  v10 = strcmp(*a2, *a1);
  v11 = *a3;
  v12 = strcmp(*a3, v8);
  if (v10 < 0)
  {
    if (v12 < 0)
    {
      *a1 = v11;
LABEL_9:
      *a3 = v9;
      v8 = v9;
      goto LABEL_11;
    }
    *a1 = v8;
    *a2 = v9;
    v8 = *a3;
    if (strcmp(*a3, v9) < 0)
    {
      *a2 = v8;
      goto LABEL_9;
    }
  }
  else if (v12 < 0)
  {
    *a2 = v11;
    *a3 = v8;
    v13 = *a2;
    v14 = *a1;
    if (strcmp(*a2, *a1) < 0)
    {
      *a1 = v13;
      *a2 = v14;
      v8 = *a3;
    }
  }
  else
  {
    v8 = v11;
  }
LABEL_11:
  v15 = *a4;
  result = strcmp(*a4, v8);
  if ((result & 0x80000000) != 0)
  {
    *a3 = v15;
    *a4 = v8;
    v17 = *a3;
    v18 = *a2;
    result = strcmp(*a3, *a2);
    if ((result & 0x80000000) != 0)
    {
      *a2 = v17;
      *a3 = v18;
      v19 = *a2;
      v20 = *a1;
      result = strcmp(*a2, *a1);
      if ((result & 0x80000000) != 0)
      {
        *a1 = v19;
        *a2 = v20;
      }
    }
  }
  return result;
}

uint64_t sub_1C989EE78(const char **a1, const char **a2, const char **a3, const char **a4, const char **a5)
{
  const char *v10;
  const char *v11;
  uint64_t result;
  const char *v13;
  const char *v14;
  const char *v15;
  const char *v16;
  const char *v17;
  const char *v18;

  sub_1C989ED40(a1, a2, a3, a4);
  v10 = *a5;
  v11 = *a4;
  result = strcmp(*a5, *a4);
  if ((result & 0x80000000) != 0)
  {
    *a4 = v10;
    *a5 = v11;
    v13 = *a4;
    v14 = *a3;
    result = strcmp(*a4, *a3);
    if ((result & 0x80000000) != 0)
    {
      *a3 = v13;
      *a4 = v14;
      v15 = *a3;
      v16 = *a2;
      result = strcmp(*a3, *a2);
      if ((result & 0x80000000) != 0)
      {
        *a2 = v15;
        *a3 = v16;
        v17 = *a2;
        v18 = *a1;
        result = strcmp(*a2, *a1);
        if ((result & 0x80000000) != 0)
        {
          *a1 = v17;
          *a2 = v18;
        }
      }
    }
  }
  return result;
}

BOOL sub_1C989EF40(const char **a1, const char **a2)
{
  uint64_t v4;
  _BOOL8 result;
  const char *v6;
  const char *v7;
  const char *v8;
  const char *v9;
  int v10;
  const char *v11;
  int v12;
  const char *v13;
  const char *v14;
  int v15;
  const char *v16;
  const char **v17;
  int v18;
  const char **v19;
  const char **v20;
  int v21;
  const char *v22;
  const char *v23;
  int v24;
  const char **v25;
  int v26;
  uint64_t i;
  const char **v28;
  const char *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  const char *v34;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (strcmp(v6, *a1) < 0)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return 1;
    case 3:
      v8 = *a1;
      v9 = a1[1];
      v10 = strcmp(v9, *a1);
      v11 = *(a2 - 1);
      v12 = strcmp(v11, v9);
      if (v10 < 0)
      {
        if (v12 < 0)
        {
          *a1 = v11;
        }
        else
        {
          *a1 = v9;
          a1[1] = v8;
          v34 = *(a2 - 1);
          if ((strcmp(v34, v8) & 0x80000000) == 0)
            return 1;
          a1[1] = v34;
        }
        *(a2 - 1) = v8;
      }
      else if (v12 < 0)
      {
        a1[1] = v11;
        *(a2 - 1) = v9;
        v23 = *a1;
        v22 = a1[1];
        if (strcmp(v22, *a1) < 0)
        {
          *a1 = v22;
          a1[1] = v23;
        }
      }
      return 1;
    case 4:
      sub_1C989ED40(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      sub_1C989EE78(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v13 = a1[1];
      v14 = *a1;
      v15 = strcmp(v13, *a1);
      v17 = a1 + 2;
      v16 = a1[2];
      v18 = strcmp(v16, v13);
      if (v15 < 0)
      {
        v19 = a1;
        v20 = a1 + 2;
        if ((v18 & 0x80000000) == 0)
        {
          *a1 = v13;
          a1[1] = v14;
          v21 = strcmp(v16, v14);
          v19 = a1 + 1;
          v20 = a1 + 2;
          if ((v21 & 0x80000000) == 0)
            goto LABEL_19;
        }
LABEL_18:
        *v19 = v16;
        *v20 = v14;
        goto LABEL_19;
      }
      if (v18 < 0)
      {
        a1[1] = v16;
        *v17 = v13;
        v24 = strcmp(v16, v14);
        v19 = a1;
        v20 = a1 + 1;
        if (v24 < 0)
          goto LABEL_18;
      }
LABEL_19:
      v25 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v26 = 0;
      for (i = 24; ; i += 8)
      {
        v29 = *v25;
        v30 = *v17;
        if (strcmp(*v25, *v17) < 0)
        {
          v31 = i;
          do
          {
            *(const char **)((char *)a1 + v31) = v30;
            v32 = v31 - 8;
            if (v31 == 8)
            {
              v28 = a1;
              goto LABEL_22;
            }
            v30 = *(const char **)((char *)a1 + v31 - 16);
            v33 = strcmp(v29, v30);
            v31 = v32;
          }
          while (v33 < 0);
          v28 = (const char **)((char *)a1 + v32);
LABEL_22:
          *v28 = v29;
          if (++v26 == 8)
            break;
        }
        v17 = v25++;
        if (v25 == a2)
          return 1;
      }
      return v25 + 1 == a2;
  }
}

uint64_t sub_1C989F1A8(uint64_t result, const char **a2, uint64_t a3, char a4)
{
  const char **v5;
  const char **v6;
  const char **v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  const char **v11;
  const char *v12;
  const char *v13;
  const char *v14;
  int v15;
  int v16;
  const char **v17;
  const char *v18;
  const char *v19;
  int v20;
  int v21;
  const char **v22;
  const char *v23;
  const char *v24;
  const char *v25;
  const char *v26;
  const char *v27;
  const char **v28;
  const char *v29;
  const char **v30;
  const char *v31;
  const char *v32;
  int v33;
  const char *v34;
  int v35;
  const char **v36;
  const char *v37;
  const char *v38;
  const char *v39;
  const char *v40;
  const char **v41;
  const char **v42;
  const char *v43;
  const char *v44;
  const char *v45;
  int v46;
  const char *v47;
  int v48;
  const char *v49;
  const char *v50;
  const char *v51;
  const char *v52;
  const char *v53;
  int v54;
  const char *v55;
  int v56;
  const char *v57;
  const char *v58;
  const char **v59;
  const char **v60;
  const char *v61;
  const char *v62;
  const char **v63;
  const char *v64;
  const char *v65;
  const char *v66;
  const char **v67;
  const char **v68;
  const char *v69;
  const char *v70;
  BOOL v71;
  const char *v72;
  const char **v73;
  const char **v74;
  const char *v75;
  const char *v76;
  const char *v77;
  const char *v78;
  const char *v79;
  const char **v80;
  const char *v81;
  const char *v82;
  int v83;
  const char *v84;
  const char *v85;
  const char *v86;
  const char **v87;
  BOOL v88;
  char v89;
  uint64_t v90;
  const char **v91;
  const char **v92;
  const char *v93;
  const char *v94;
  uint64_t v95;
  uint64_t v96;
  int64_t v97;
  int64_t v98;
  uint64_t v99;
  const char **v100;
  const char *v101;
  const char *v102;
  const char **v103;
  const char *v104;
  const char **v105;
  uint64_t v106;
  uint64_t v107;
  const char *v108;
  int v109;
  uint64_t v110;
  uint64_t v112;
  const char *v113;
  const char **v114;
  const char **v115;
  const char *v116;
  const char **v117;
  const char *v118;
  uint64_t v119;
  uint64_t v120;
  const char *v121;
  const char **v122;
  uint64_t v123;
  unint64_t v124;
  const char **v125;
  const char *v126;
  const char *v127;
  const char **v128;
  const char *v129;
  const char *v130;
  const char *v131;
  const char *v132;
  const char **v133;
  const char *v134;
  int64_t v136;
  const char **v138;
  int64_t v139;
  const char **v140;

  v5 = (const char **)result;
LABEL_2:
  v6 = a2;
  v138 = a2 - 1;
  v7 = v5;
  while (2)
  {
    v8 = (char *)v6 - (char *)v7;
    v9 = v6 - v7;
    switch(v9)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v85 = *v138;
        v86 = *v7;
        result = strcmp(*v138, *v7);
        if ((result & 0x80000000) != 0)
        {
          *v7 = v85;
          *v138 = v86;
        }
        return result;
      case 3:
        v81 = *v7;
        v82 = v7[1];
        v83 = strcmp(v82, *v7);
        v84 = *v138;
        result = strcmp(*v138, v82);
        if (v83 < 0)
        {
          if ((result & 0x80000000) != 0)
          {
            *v7 = v84;
          }
          else
          {
            *v7 = v82;
            v7[1] = v81;
            v134 = *v138;
            result = strcmp(*v138, v81);
            if ((result & 0x80000000) == 0)
              return result;
            v7[1] = v134;
          }
          *v138 = v81;
        }
        else if ((result & 0x80000000) != 0)
        {
          v7[1] = v84;
          *v138 = v82;
          v130 = *v7;
          v129 = v7[1];
          result = strcmp(v129, *v7);
          if ((result & 0x80000000) != 0)
          {
            *v7 = v129;
            v7[1] = v130;
          }
        }
        return result;
      case 4:
        return sub_1C989ED40(v7, v7 + 1, v7 + 2, v138);
      case 5:
        return sub_1C989EE78(v7, v7 + 1, v7 + 2, v7 + 3, v138);
      default:
        if (v8 <= 191)
        {
          v87 = v7 + 1;
          v88 = v7 == v6 || v87 == v6;
          v89 = v88;
          if ((a4 & 1) != 0)
          {
            if ((v89 & 1) == 0)
            {
              v90 = 8;
              v91 = v7;
              do
              {
                v94 = *v91;
                v93 = v91[1];
                v91 = v87;
                result = strcmp(v93, v94);
                if ((result & 0x80000000) != 0)
                {
                  v95 = v90;
                  do
                  {
                    *(const char **)((char *)v7 + v95) = v94;
                    v96 = v95 - 8;
                    if (v95 == 8)
                    {
                      v92 = v7;
                      goto LABEL_114;
                    }
                    v94 = *(const char **)((char *)v7 + v95 - 16);
                    result = strcmp(v93, v94);
                    v95 = v96;
                  }
                  while ((result & 0x80000000) != 0);
                  v92 = (const char **)((char *)v7 + v96);
LABEL_114:
                  *v92 = v93;
                }
                v87 = v91 + 1;
                v90 += 8;
              }
              while (v91 + 1 != a2);
            }
          }
          else if ((v89 & 1) == 0)
          {
            do
            {
              v132 = *v7;
              v131 = v7[1];
              v7 = v87;
              result = strcmp(v131, v132);
              if ((result & 0x80000000) != 0)
              {
                v133 = v7;
                do
                {
                  *v133 = v132;
                  v132 = *(v133 - 2);
                  result = strcmp(v131, v132);
                  --v133;
                }
                while ((result & 0x80000000) != 0);
                *v133 = v131;
              }
              v87 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        v140 = v7;
        if (!a3)
        {
          if (v7 != v6)
          {
            v97 = (unint64_t)(v9 - 2) >> 1;
            v139 = v97;
            do
            {
              v98 = v97;
              if (v139 >= v97)
              {
                v99 = (2 * v97) | 1;
                v100 = &v7[v99];
                v101 = *v100;
                if (2 * v97 + 2 < v9)
                {
                  v102 = v100[1];
                  if (strcmp(*v100, v102) < 0)
                  {
                    v101 = v102;
                    ++v100;
                    v99 = 2 * v98 + 2;
                  }
                }
                v103 = &v7[v98];
                v104 = *v103;
                result = strcmp(v101, *v103);
                if ((result & 0x80000000) == 0)
                {
                  v136 = v98;
                  do
                  {
                    v105 = v100;
                    *v103 = v101;
                    if (v139 < v99)
                      break;
                    v106 = (2 * v99) | 1;
                    v100 = &v7[v106];
                    v107 = 2 * v99 + 2;
                    v101 = *v100;
                    if (v107 < v9)
                    {
                      v108 = v100[1];
                      v109 = strcmp(*v100, v108);
                      if (v109 < 0)
                      {
                        v101 = v108;
                        ++v100;
                      }
                      v7 = v140;
                      if (v109 < 0)
                        v106 = v107;
                    }
                    result = strcmp(v101, v104);
                    v103 = v105;
                    v99 = v106;
                  }
                  while ((result & 0x80000000) == 0);
                  *v105 = v104;
                  v98 = v136;
                }
              }
              v97 = v98 - 1;
            }
            while (v98);
            v110 = (unint64_t)v8 >> 3;
            do
            {
              v112 = 0;
              v113 = *v7;
              v114 = v7;
              do
              {
                v115 = &v114[v112];
                v118 = v115[1];
                v117 = v115 + 1;
                v116 = v118;
                v119 = (2 * v112) | 1;
                v120 = 2 * v112 + 2;
                if (v120 < v110)
                {
                  v121 = v117[1];
                  result = strcmp(v116, v121);
                  if ((int)result < 0)
                  {
                    v116 = v121;
                    ++v117;
                    v119 = v120;
                  }
                }
                *v114 = v116;
                v114 = v117;
                v112 = v119;
              }
              while (v119 <= (uint64_t)((unint64_t)(v110 - 2) >> 1));
              v122 = a2 - 1;
              v88 = v117 == --a2;
              if (v88)
              {
                *v117 = v113;
                v7 = v140;
              }
              else
              {
                *v117 = *v122;
                *v122 = v113;
                v7 = v140;
                v123 = (char *)v117 - (char *)v140 + 8;
                if (v123 >= 9)
                {
                  v124 = (((unint64_t)v123 >> 3) - 2) >> 1;
                  v125 = &v140[v124];
                  v126 = *v125;
                  v127 = *v117;
                  result = strcmp(*v125, *v117);
                  if ((result & 0x80000000) != 0)
                  {
                    do
                    {
                      v128 = v125;
                      *v117 = v126;
                      if (!v124)
                        break;
                      v124 = (v124 - 1) >> 1;
                      v125 = &v140[v124];
                      v126 = *v125;
                      result = strcmp(*v125, v127);
                      v117 = v128;
                    }
                    while ((result & 0x80000000) != 0);
                    *v128 = v127;
                  }
                }
              }
            }
            while (v110-- > 2);
          }
          return result;
        }
        v10 = (unint64_t)v9 >> 1;
        v11 = &v7[(unint64_t)v9 >> 1];
        v12 = *v138;
        if ((unint64_t)v8 >= 0x401)
        {
          v13 = *v11;
          v14 = *v7;
          v15 = strcmp(*v11, *v7);
          v16 = strcmp(v12, v13);
          if (v15 < 0)
          {
            if (v16 < 0)
            {
              v17 = v140;
              *v140 = v12;
              goto LABEL_21;
            }
            v17 = v140;
            *v140 = v13;
            *v11 = v14;
            v27 = *v138;
            if (strcmp(*v138, v14) < 0)
            {
              *v11 = v27;
LABEL_21:
              *v138 = v14;
            }
          }
          else
          {
            v17 = v140;
            if (v16 < 0)
            {
              *v11 = v12;
              *v138 = v13;
              v23 = *v11;
              v24 = *v140;
              if (strcmp(*v11, *v140) < 0)
              {
                *v140 = v23;
                *v11 = v24;
              }
            }
          }
          v28 = &v17[v10];
          v31 = *(v28 - 1);
          v30 = v28 - 1;
          v29 = v31;
          v32 = v17[1];
          v33 = strcmp(v31, v32);
          v34 = *(v6 - 2);
          v35 = strcmp(v34, v31);
          if (v33 < 0)
          {
            if (v35 < 0)
            {
              v36 = v140;
              v140[1] = v34;
              goto LABEL_32;
            }
            v36 = v140;
            v140[1] = v29;
            *v30 = v32;
            v40 = *(v6 - 2);
            if (strcmp(v40, v32) < 0)
            {
              *v30 = v40;
LABEL_32:
              *(v6 - 2) = v32;
            }
          }
          else
          {
            v36 = v140;
            if (v35 < 0)
            {
              *v30 = v34;
              *(v6 - 2) = v29;
              v37 = *v30;
              v38 = v140[1];
              if (strcmp(*v30, v38) < 0)
              {
                v140[1] = v37;
                *v30 = v38;
              }
            }
          }
          v41 = &v36[v10];
          v44 = v41[1];
          v42 = v41 + 1;
          v43 = v44;
          v45 = v36[2];
          v46 = strcmp(v44, v45);
          v47 = *(v6 - 3);
          v48 = strcmp(v47, v44);
          if (v46 < 0)
          {
            if (v48 < 0)
            {
              v140[2] = v47;
              goto LABEL_41;
            }
            v140[2] = v43;
            *v42 = v45;
            v51 = *(v6 - 3);
            if (strcmp(v51, v45) < 0)
            {
              *v42 = v51;
LABEL_41:
              *(v6 - 3) = v45;
            }
          }
          else if (v48 < 0)
          {
            *v42 = v47;
            *(v6 - 3) = v43;
            v49 = *v42;
            v50 = v140[2];
            if (strcmp(*v42, v50) < 0)
            {
              v140[2] = v49;
              *v42 = v50;
            }
          }
          v52 = *v11;
          v53 = *v30;
          v54 = strcmp(*v11, *v30);
          v55 = *v42;
          v56 = strcmp(*v42, v52);
          if (v54 < 0)
          {
            if (v56 < 0)
            {
              v22 = v140;
              goto LABEL_49;
            }
            *v30 = v52;
            *v11 = v53;
            v30 = v11;
            v52 = v55;
            v22 = v140;
            if (strcmp(v55, v53) < 0)
            {
LABEL_49:
              *v30 = v55;
              *v42 = v53;
            }
            else
            {
              v52 = v53;
            }
          }
          else if (v56 < 0)
          {
            *v11 = v55;
            *v42 = v52;
            v42 = v11;
            v52 = v53;
            v22 = v140;
            if (strcmp(v55, v53) < 0)
              goto LABEL_49;
            v52 = v55;
          }
          else
          {
            v22 = v140;
          }
          v57 = *v22;
          *v22 = v52;
          *v11 = v57;
          goto LABEL_53;
        }
        v18 = *v7;
        v19 = *v11;
        v20 = strcmp(*v7, *v11);
        v21 = strcmp(v12, v18);
        if (v20 < 0)
        {
          if (v21 < 0)
          {
            *v11 = v12;
            v22 = v140;
            *v138 = v19;
          }
          else
          {
            *v11 = v18;
            v22 = v140;
            *v140 = v19;
            v39 = *v138;
            if (strcmp(*v138, v19) < 0)
            {
              *v140 = v39;
              *v138 = v19;
            }
          }
        }
        else
        {
          v22 = v140;
          if (v21 < 0)
          {
            *v140 = v12;
            *v138 = v18;
            v25 = *v140;
            v26 = *v11;
            if (strcmp(*v140, *v11) < 0)
            {
              *v11 = v25;
              *v140 = v26;
            }
          }
        }
LABEL_53:
        --a3;
        v58 = *v22;
        v59 = v22;
        if ((a4 & 1) == 0)
        {
          v59 = v22;
          if ((strcmp(*(v22 - 1), *v22) & 0x80000000) == 0)
          {
            result = strcmp(v58, *v138);
            if ((result & 0x80000000) != 0)
            {
              v7 = v22;
              do
              {
                v72 = v7[1];
                ++v7;
                result = strcmp(v58, v72);
              }
              while ((result & 0x80000000) == 0);
            }
            else
            {
              v73 = v22 + 1;
              do
              {
                v7 = v73;
                if (v73 >= a2)
                  break;
                ++v73;
                result = strcmp(v58, *v7);
              }
              while ((result & 0x80000000) == 0);
            }
            v6 = a2;
            v74 = a2;
            if (v7 < a2)
            {
              v74 = a2;
              do
              {
                v75 = *--v74;
                result = strcmp(v58, v75);
              }
              while ((result & 0x80000000) != 0);
            }
            if (v7 < v74)
            {
              v76 = *v7;
              v77 = *v74;
              do
              {
                *v7 = v77;
                *v74 = v76;
                do
                {
                  v78 = v7[1];
                  ++v7;
                  v76 = v78;
                }
                while ((strcmp(v58, v78) & 0x80000000) == 0);
                do
                {
                  v79 = *--v74;
                  v77 = v79;
                  result = strcmp(v58, v79);
                }
                while ((result & 0x80000000) != 0);
              }
              while (v7 < v74);
            }
            v80 = v7 - 1;
            if (v7 - 1 != v22)
              *v22 = *v80;
            a4 = 0;
            *v80 = v58;
            continue;
          }
        }
        do
        {
          v60 = v59;
          v62 = v59[1];
          ++v59;
          v61 = v62;
        }
        while (strcmp(v62, v58) < 0);
        v63 = v6;
        if (v60 == v22)
        {
          v63 = v6;
          do
          {
            if (v59 >= v63)
              break;
            v65 = *--v63;
          }
          while ((strcmp(v65, v58) & 0x80000000) == 0);
        }
        else
        {
          do
            v64 = *--v63;
          while ((strcmp(v64, v58) & 0x80000000) == 0);
        }
        if (v59 < v63)
        {
          v66 = *v63;
          v67 = v59;
          v68 = v63;
          do
          {
            *v67 = v66;
            *v68 = v61;
            do
            {
              v60 = v67;
              v69 = v67[1];
              ++v67;
              v61 = v69;
            }
            while (strcmp(v69, v58) < 0);
            do
            {
              v70 = *--v68;
              v66 = v70;
            }
            while ((strcmp(v70, v58) & 0x80000000) == 0);
          }
          while (v67 < v68);
        }
        v5 = v140;
        if (v60 != v140)
          *v140 = *v60;
        *v60 = v58;
        v6 = a2;
        if (v59 < v63)
        {
LABEL_73:
          result = sub_1C989F1A8(v140, v60, a3, a4 & 1);
          a4 = 0;
          v7 = v60 + 1;
          continue;
        }
        v71 = sub_1C989FC00(v140, v60);
        v7 = v60 + 1;
        result = sub_1C989FC00(v60 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v71)
            continue;
          goto LABEL_73;
        }
        a2 = v60;
        if (!v71)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL sub_1C989FC00(const char **a1, const char **a2)
{
  uint64_t v4;
  _BOOL8 result;
  const char *v6;
  const char *v7;
  const char *v8;
  const char *v9;
  int v10;
  const char *v11;
  int v12;
  const char *v13;
  const char *v14;
  int v15;
  const char *v16;
  const char **v17;
  int v18;
  const char **v19;
  const char **v20;
  int v21;
  const char *v22;
  const char *v23;
  int v24;
  const char **v25;
  int v26;
  uint64_t i;
  const char **v28;
  const char *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  const char *v34;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (strcmp(v6, *a1) < 0)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return 1;
    case 3:
      v8 = *a1;
      v9 = a1[1];
      v10 = strcmp(v9, *a1);
      v11 = *(a2 - 1);
      v12 = strcmp(v11, v9);
      if (v10 < 0)
      {
        if (v12 < 0)
        {
          *a1 = v11;
        }
        else
        {
          *a1 = v9;
          a1[1] = v8;
          v34 = *(a2 - 1);
          if ((strcmp(v34, v8) & 0x80000000) == 0)
            return 1;
          a1[1] = v34;
        }
        *(a2 - 1) = v8;
      }
      else if (v12 < 0)
      {
        a1[1] = v11;
        *(a2 - 1) = v9;
        v23 = *a1;
        v22 = a1[1];
        if (strcmp(v22, *a1) < 0)
        {
          *a1 = v22;
          a1[1] = v23;
        }
      }
      return 1;
    case 4:
      sub_1C989ED40(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      sub_1C989EE78(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v13 = a1[1];
      v14 = *a1;
      v15 = strcmp(v13, *a1);
      v17 = a1 + 2;
      v16 = a1[2];
      v18 = strcmp(v16, v13);
      if (v15 < 0)
      {
        v19 = a1;
        v20 = a1 + 2;
        if ((v18 & 0x80000000) == 0)
        {
          *a1 = v13;
          a1[1] = v14;
          v21 = strcmp(v16, v14);
          v19 = a1 + 1;
          v20 = a1 + 2;
          if ((v21 & 0x80000000) == 0)
            goto LABEL_19;
        }
LABEL_18:
        *v19 = v16;
        *v20 = v14;
        goto LABEL_19;
      }
      if (v18 < 0)
      {
        a1[1] = v16;
        *v17 = v13;
        v24 = strcmp(v16, v14);
        v19 = a1;
        v20 = a1 + 1;
        if (v24 < 0)
          goto LABEL_18;
      }
LABEL_19:
      v25 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v26 = 0;
      for (i = 24; ; i += 8)
      {
        v29 = *v25;
        v30 = *v17;
        if (strcmp(*v25, *v17) < 0)
        {
          v31 = i;
          do
          {
            *(const char **)((char *)a1 + v31) = v30;
            v32 = v31 - 8;
            if (v31 == 8)
            {
              v28 = a1;
              goto LABEL_22;
            }
            v30 = *(const char **)((char *)a1 + v31 - 16);
            v33 = strcmp(v29, v30);
            v31 = v32;
          }
          while (v33 < 0);
          v28 = (const char **)((char *)a1 + v32);
LABEL_22:
          *v28 = v29;
          if (++v26 == 8)
            break;
        }
        v17 = v25++;
        if (v25 == a2)
          return 1;
      }
      return v25 + 1 == a2;
  }
}

uint64_t sub_1C989FE68(uint64_t a1)
{
  const __CFDictionary *v2;
  _QWORD *v3;
  CFTypeID v4;
  const __CFArray *Value;
  const __CFArray *v6;
  CFTypeID v7;
  unint64_t Count;
  unint64_t v9;
  uint64_t v10;
  float32x4_t *v11;
  char *v12;
  CFIndex v13;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  char *v22;
  uint64_t v23;
  unsigned __int8 v24;
  NSObject *v25;
  CFDictionaryRef v26;
  unsigned __int8 v27;
  char *v28;
  float32x2_t v29;
  float32x2_t v30;
  float32x2_t v31;
  float32x2_t v32;
  float32x2_t v33;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v35;
  CFTypeID v36;
  const __CFNumber *v37;
  const __CFNumber *v38;
  CFTypeID v39;
  const __CFNumber *v40;
  const __CFNumber *v41;
  CFTypeID v42;
  const __CFDictionary *v43;
  const __CFDictionary *v44;
  CFTypeID v45;
  float32x2_t v46;
  float32x2_t v47;
  int32x2_t v48;
  float32x2_t v49;
  float32x2_t v50;
  float32x2_t v51;
  int64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  unint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  unint64_t v67;
  char *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  BOOL v75;
  BOOL v76;
  BOOL v77;
  BOOL v78;
  BOOL v79;
  BOOL v80;
  BOOL v81;
  BOOL v82;
  BOOL v83;
  BOOL v84;
  BOOL v85;
  BOOL v86;
  BOOL v87;
  BOOL v88;
  BOOL v89;
  BOOL v90;
  BOOL v91;
  BOOL v92;
  BOOL v93;
  BOOL v94;
  BOOL v95;
  BOOL v96;
  unint64_t v97;
  uint64_t v98;
  const double *v99;
  double *v100;
  uint64_t v101;
  NSObject *v102;
  NSObject *v103;
  uint64_t v104;
  uint64_t result;
  void *v106;
  void *v107;
  char *v108;
  char *v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float32x2_t v113;
  float v114;
  unint64_t v115;
  char *v116;
  float32x4_t *__p;
  uint8_t buf[16];
  CGRect rect;
  _QWORD v120[4];
  CFDictionaryRef v121;
  _QWORD v122[3];
  _QWORD *v123;
  uint64_t v124;
  simd_float3x3 v125;
  float64x2x3_t v126;

  v124 = *MEMORY[0x1E0C80C00];
  v2 = (const __CFDictionary *)CVBufferCopyAttachment(*(CVBufferRef *)a1, CFSTR("MetadataDictionary"), 0);
  v120[0] = &off_1E82941C8;
  v120[3] = v120;
  v3 = v122;
  v123 = v122;
  v121 = v2;
  v122[0] = &off_1E82941C8;
  if (!v2)
  {
    v23 = 0;
    goto LABEL_177;
  }
  v4 = CFGetTypeID(v2);
  if (v4 == CFDictionaryGetTypeID())
  {
    Value = (const __CFArray *)CFDictionaryGetValue(v121, CFSTR("DetectedFacesArray"));
    v6 = Value;
    if (!Value)
    {
LABEL_13:
      v23 = 0;
      v26 = v121;
      if (!v121)
        goto LABEL_174;
      goto LABEL_172;
    }
    v7 = CFGetTypeID(Value);
    if (v7 == CFArrayGetTypeID())
    {
      Count = CFArrayGetCount(v6);
      v9 = Count;
      if (Count)
      {
        if (Count >> 59)
          abort();
        v10 = 2 * Count;
        v11 = (float32x4_t *)operator new(32 * Count);
        bzero(v11, 32 * v9);
        __p = v11;
        v12 = (char *)operator new(24 * v9);
        v13 = 0;
        v108 = (char *)&v11[v10];
        v109 = (char *)&v11[2 * v9];
        v115 = v9;
        v116 = &v12[24 * v9];
        __asm { FMOV            V9.2S, #1.0 }
        v18 = (float32x2_t)vdup_n_s32(0x43340000u);
        v19 = (float32x2_t)vdup_n_s32(0x43B40000u);
        v20 = (float32x2_t)vdup_n_s32(0xC3B40000);
        v111 = (float64x2_t)vdupq_n_s64(0x3FF6666666666666uLL);
        v112 = (float64x2_t)vdupq_n_s64(0xBFD9999999999998);
        __asm { FMOV            V0.2D, #0.5 }
        v110 = _Q0;
        v22 = v12;
        while (1)
        {
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v6, v13);
          v35 = ValueAtIndex;
          if (!ValueAtIndex || (v36 = CFGetTypeID(ValueAtIndex), v36 != CFDictionaryGetTypeID()))
          {
            sub_1C98A5610();
            v102 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v102, OS_LOG_TYPE_ERROR))
            {
              LOWORD(rect.origin.x) = 0;
              _os_log_error_impl(&dword_1C9870000, v102, OS_LOG_TYPE_ERROR, "Precondition violated: faceDictionary && CFGetTypeID(faceDictionary) == CFDictionaryGetTypeID()", (uint8_t *)&rect, 2u);
            }
            goto LABEL_164;
          }
          v37 = (const __CFNumber *)CFDictionaryGetValue(v35, CFSTR("AngleInfoRoll"));
          v38 = v37;
          if (!v37 || (v39 = CFGetTypeID(v37), v39 != CFNumberGetTypeID()))
          {
            sub_1C98A5610();
            v102 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v102, OS_LOG_TYPE_ERROR))
            {
              LOWORD(rect.origin.x) = 0;
              _os_log_error_impl(&dword_1C9870000, v102, OS_LOG_TYPE_ERROR, "Precondition violated: rollAngle && CFGetTypeID(rollAngle) == CFNumberGetTypeID()", (uint8_t *)&rect, 2u);
            }
            goto LABEL_164;
          }
          if (!CFNumberGetValue(v38, kCFNumberDoubleType, &__p[2 * v13 + 1]))
          {
            sub_1C98A5610();
            v102 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v102, OS_LOG_TYPE_ERROR))
            {
              LOWORD(rect.origin.x) = 0;
              _os_log_error_impl(&dword_1C9870000, v102, OS_LOG_TYPE_ERROR, "Precondition violated: CFNumberGetValue(rollAngle, kCFNumberDoubleType, &inputFace.rollAngle)", (uint8_t *)&rect, 2u);
            }
            goto LABEL_164;
          }
          v40 = (const __CFNumber *)CFDictionaryGetValue(v35, CFSTR("AngleInfoYaw"));
          v41 = v40;
          if (!v40 || (v42 = CFGetTypeID(v40), v42 != CFNumberGetTypeID()))
          {
            sub_1C98A5610();
            v102 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v102, OS_LOG_TYPE_ERROR))
            {
              LOWORD(rect.origin.x) = 0;
              _os_log_error_impl(&dword_1C9870000, v102, OS_LOG_TYPE_ERROR, "Precondition violated: yawAngle && CFGetTypeID(yawAngle) == CFNumberGetTypeID()", (uint8_t *)&rect, 2u);
            }
            goto LABEL_164;
          }
          if (!CFNumberGetValue(v41, kCFNumberDoubleType, &__p[2 * v13 + 1].u32[2]))
          {
            sub_1C98A5610();
            v102 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v102, OS_LOG_TYPE_ERROR))
            {
              LOWORD(rect.origin.x) = 0;
              _os_log_error_impl(&dword_1C9870000, v102, OS_LOG_TYPE_ERROR, "Precondition violated: CFNumberGetValue(yawAngle, kCFNumberDoubleType, &inputFace.yawAngle)", (uint8_t *)&rect, 2u);
            }
LABEL_164:

LABEL_168:
            if (v22)
              operator delete(v22);
            operator delete(__p);
            goto LABEL_171;
          }
          v43 = (const __CFDictionary *)CFDictionaryGetValue(v35, CFSTR("Rect"));
          v44 = v43;
          if (!v43 || (v45 = CFGetTypeID(v43), v45 != CFDictionaryGetTypeID()))
          {
            sub_1C98A5610();
            v102 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v102, OS_LOG_TYPE_ERROR))
            {
              LOWORD(rect.origin.x) = 0;
              _os_log_error_impl(&dword_1C9870000, v102, OS_LOG_TYPE_ERROR, "Precondition violated: rectDict && CFGetTypeID(rectDict) == CFDictionaryGetTypeID()", (uint8_t *)&rect, 2u);
            }
            goto LABEL_164;
          }
          if (!CGRectMakeWithDictionaryRepresentation(v44, &rect))
          {
            sub_1C98A5610();
            v103 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v103, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_error_impl(&dword_1C9870000, v103, OS_LOG_TYPE_ERROR, "Precondition violated: CGRectMakeWithDictionaryRepresentation(rectDict, &bbox)", buf, 2u);
            }

            goto LABEL_168;
          }
          v46 = vcvt_f32_f64((float64x2_t)rect.origin);
          v47 = vcvt_f32_f64((float64x2_t)rect.size);
          __p[2 * v13] = vcvt_hight_f32_f64((int32x2_t)v46, (float64x2_t)rect.size);
          v48 = (int32x2_t)vsub_f32(vminnm_f32(vadd_f32(v46, v47), _D9), vmaxnm_f32(v46, 0));
          v49 = (float32x2_t)vzip1_s32(v48, (int32x2_t)v47);
          v50 = (float32x2_t)vzip2_s32(v48, (int32x2_t)v47);
          v51 = (float32x2_t)vbic_s8((int8x8_t)vmul_f32(v49, v50), vorr_s8((int8x8_t)vcltz_f32(v49), (int8x8_t)vcltz_f32(v50)));
          if (vdiv_f32(v51, (float32x2_t)vdup_lane_s32((int32x2_t)v51, 1)).f32[0] < 0.5)
            goto LABEL_23;
          if (v12 >= v116)
            break;
          *(_QWORD *)v12 = 0;
          *((_QWORD *)v12 + 1) = 0;
          v28 = v12 + 24;
          *((_QWORD *)v12 + 2) = 0;
LABEL_20:
          v29 = vcvt_f32_f64((float64x2_t)__p[2 * v13 + 1]);
          *((float32x2_t *)v28 - 1) = vneg_f32(vmla_f32(v29, v20, vrndm_f32(vdiv_f32(vadd_f32(v29, v18), v19))));
          rect.origin = (CGPoint)vaddq_f64((float64x2_t)rect.origin, vmulq_f64(vmulq_f64((float64x2_t)rect.size, v112), v110));
          rect.size = (CGSize)vmulq_f64((float64x2_t)rect.size, v111);
          v32 = vcvt_f32_s32(*(int32x2_t *)(a1 + 184));
          v30 = vmul_f32(vcvt_f32_f64((float64x2_t)rect.size), v32);
          v31 = vadd_f32(vmul_f32(vcvt_f32_f64((float64x2_t)rect.origin), v32), (float32x2_t)0xBF000000BF000000);
          v32.i32[0] = v30.i32[1];
          if (v30.f32[0] >= v30.f32[1])
            v32.f32[0] = v30.f32[0];
          v114 = v32.f32[0];
          v113 = vadd_f32(v31, vmul_f32(vsub_f32((float32x2_t)vdup_lane_s32((int32x2_t)v32, 0), v30), (float32x2_t)0xBF000000BF000000));
          v125 = __invert_f3(*(simd_float3x3 *)(a1 + 80));
          v33 = (float32x2_t)vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v125.columns[0], v113.f32[0]), (float32x4_t)v125.columns[1], v113, 1).u64[0];
          v125.columns[0].i64[0] = vmlaq_n_f32(vmulq_n_f32((float32x4_t)v125.columns[0], v113.f32[0] + v114), (float32x4_t)v125.columns[1], v113.f32[1] + v114).u64[0];
          *(float32x2_t *)v125.columns[1].f32 = vadd_f32(*(float32x2_t *)v125.columns[2].f32, v33);
          *(float32x2_t *)&v125.columns[1].u32[2] = vsub_f32(vadd_f32(*(float32x2_t *)v125.columns[2].f32, *(float32x2_t *)v125.columns[0].f32), *(float32x2_t *)v125.columns[1].f32);
          *(simd_float3 *)(v28 - 24) = v125.columns[1];
          v12 = v28;
LABEL_23:
          if (++v13 == v115)
          {
            v106 = *(void **)(a1 + 136);
            if (v106)
            {
              *(_QWORD *)(a1 + 144) = v106;
              operator delete(v106);
              *(_QWORD *)(a1 + 136) = 0;
              *(_QWORD *)(a1 + 144) = 0;
              *(_QWORD *)(a1 + 152) = 0;
            }
            v107 = *(void **)(a1 + 160);
            *(_QWORD *)(a1 + 136) = __p;
            *(_QWORD *)(a1 + 144) = v108;
            *(_QWORD *)(a1 + 152) = v109;
            if (v107)
            {
              *(_QWORD *)(a1 + 168) = v107;
              operator delete(v107);
              *(_QWORD *)(a1 + 160) = 0;
              *(_QWORD *)(a1 + 168) = 0;
              *(_QWORD *)(a1 + 176) = 0;
            }
            v23 = 0;
            *(_QWORD *)(a1 + 160) = v22;
            *(_QWORD *)(a1 + 168) = v12;
            *(_QWORD *)(a1 + 176) = v116;
            v26 = v121;
            if (v121)
              goto LABEL_172;
            goto LABEL_174;
          }
        }
        v52 = v12 - v22;
        v53 = 0xAAAAAAAAAAAAAAABLL * ((v12 - v22) >> 3) + 1;
        if (v53 > 0xAAAAAAAAAAAAAAALL)
          abort();
        if (0x5555555555555556 * ((v116 - v22) >> 3) > v53)
          v53 = 0x5555555555555556 * ((v116 - v22) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((v116 - v22) >> 3) >= 0x555555555555555)
          v54 = 0xAAAAAAAAAAAAAAALL;
        else
          v54 = v53;
        if (v54)
        {
          if (v54 > 0xAAAAAAAAAAAAAAALL)
            sub_1C9899D30();
          v55 = (char *)operator new(24 * v54);
        }
        else
        {
          v55 = 0;
        }
        v56 = &v55[8 * ((v12 - v22) >> 3)];
        *(_QWORD *)v56 = 0;
        *((_QWORD *)v56 + 1) = 0;
        *((_QWORD *)v56 + 2) = 0;
        if (v12 == v22)
        {
          v22 = &v55[8 * ((v12 - v22) >> 3)];
LABEL_53:
          v116 = &v55[24 * v54];
          v28 = v56 + 24;
          if (v12)
            operator delete(v12);
          goto LABEL_20;
        }
        v57 = v12 - v22 - 24;
        if (v57 < 0x7F8)
          goto LABEL_49;
        v61 = v57 / 0x18;
        v62 = v55 - 24;
        if (&v55[v52 - 24 + -24 * v61] > &v55[v52 - 24])
          goto LABEL_49;
        v63 = (unint64_t)&v55[v52 - 16];
        if (v63 - 24 * v61 > v63)
          goto LABEL_49;
        v64 = (unint64_t)&v55[v52 - 8];
        if (v64 - 24 * v61 > v64)
          goto LABEL_49;
        v65 = (unint64_t)&v12[-24 * v61 - 24];
        if (v65 > (unint64_t)(v12 - 24))
          goto LABEL_49;
        v66 = v12 - 16;
        v67 = (unint64_t)&v12[-24 * v61 - 16];
        if (v67 > (unint64_t)(v12 - 16))
          goto LABEL_49;
        v68 = v12 - 8;
        v69 = (unint64_t)&v12[-24 * v61 - 8];
        if (v69 > (unint64_t)(v12 - 8))
          goto LABEL_49;
        v70 = -24 * v61 + v52;
        v71 = (unint64_t)&v62[v70];
        v72 = &v55[v70 - 16];
        v73 = &v55[v70 - 8];
        _CF = &v62[v70] >= v56 || (unint64_t)v73 >= v63;
        v75 = !_CF;
        v76 = v71 >= (unint64_t)v66 || v65 >= v63;
        v77 = !v76;
        v78 = v71 >= (unint64_t)v68 || v67 >= v63;
        v79 = !v78;
        v80 = v71 >= (unint64_t)v12 || v69 >= v63;
        v81 = !v80;
        v82 = v72 >= v56 || (unint64_t)v73 >= v64;
        v83 = !v82;
        v84 = v72 >= v66 || v65 >= v64;
        v85 = !v84;
        v86 = v72 >= v68 || v67 >= v64;
        v87 = !v86;
        v88 = v72 >= v12 || v69 >= v64;
        v89 = !v88;
        v90 = v73 >= v66 || v65 >= (unint64_t)v56;
        v91 = !v90;
        v92 = v73 >= v68 || v67 >= (unint64_t)v56;
        v93 = !v92;
        v94 = v73 >= v12 || v69 >= (unint64_t)v56;
        v95 = !v94;
        v96 = (unint64_t)v72 >= v63 || v71 >= v64;
        if (!v96 || v75 || v77 || v79 || v81 || v83 || v85 || v87 || v89 || v91 || v93 || v95)
        {
LABEL_49:
          v58 = v12;
          v59 = &v55[8 * ((v12 - v22) >> 3)];
        }
        else
        {
          v97 = v61 + 1;
          v98 = (v61 + 1) & 0x1FFFFFFFFFFFFFFELL;
          v58 = &v12[-24 * v98];
          v99 = (const double *)(v12 - 48);
          v100 = (double *)(v56 - 48);
          v101 = v98;
          do
          {
            v126 = vld3q_f64(v99);
            vst3q_f64(v100, v126);
            v100 -= 6;
            v99 -= 6;
            v101 -= 2;
          }
          while (v101);
          v59 = &v56[-24 * v98];
          if (v97 == v98)
            goto LABEL_51;
        }
        do
        {
          v60 = *((_QWORD *)v58 - 3);
          v58 -= 24;
          *((_QWORD *)v59 - 3) = v60;
          v59 -= 24;
          *((_QWORD *)v59 + 1) = *((_QWORD *)v58 + 1);
          *((_QWORD *)v59 + 2) = *((_QWORD *)v58 + 2);
        }
        while (v58 != v22);
LABEL_51:
        v12 = v22;
        v22 = v59;
        goto LABEL_53;
      }
      goto LABEL_13;
    }
    v27 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v27 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v25 = (id)qword_1EF921280;
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      LOWORD(rect.origin.x) = 0;
      _os_log_error_impl(&dword_1C9870000, v25, OS_LOG_TYPE_ERROR, "Precondition violated: CFGetTypeID(faceArray) == CFArrayGetTypeID()", (uint8_t *)&rect, 2u);
    }
  }
  else
  {
    v24 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v24 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v25 = (id)qword_1EF921280;
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      LOWORD(rect.origin.x) = 0;
      _os_log_error_impl(&dword_1C9870000, v25, OS_LOG_TYPE_ERROR, "Precondition violated: CFGetTypeID(*pixelBufferMetadata) == CFDictionaryGetTypeID()", (uint8_t *)&rect, 2u);
    }
  }

LABEL_171:
  v23 = 1;
  v26 = v121;
  if (!v121)
  {
LABEL_174:
    if (v123 != v122)
    {
      if (!v123)
        return v23;
      v104 = 5;
      v3 = v123;
LABEL_178:
      (*(void (**)(_QWORD *))(*v3 + 8 * v104))(v3);
      return v23;
    }
LABEL_177:
    v104 = 4;
    goto LABEL_178;
  }
LABEL_172:
  *(_QWORD *)&rect.origin.x = v26;
  if (v123)
  {
    (*(void (**)(_QWORD *, CGRect *))(*v123 + 48))(v123, &rect);
    v121 = 0;
    goto LABEL_174;
  }
  result = sub_1C9889C1C();
  __break(1u);
  return result;
}

void sub_1C98A0960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p)
{
  void *v24;
  uint64_t v25;

  if (v24)
    operator delete(v24);
  operator delete(__p);
  sub_1C98A0A04((uint64_t *)(v25 - 200));
  _Unwind_Resume(a1);
}

uint64_t sub_1C98A0A04(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  if (!*a1)
  {
LABEL_4:
    v3 = (uint64_t *)a1[4];
    if (v3 == a1 + 1)
    {
      v4 = 4;
      v3 = a1 + 1;
    }
    else
    {
      if (!v3)
        return (uint64_t)a1;
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
    return (uint64_t)a1;
  }
  v6 = *a1;
  v2 = a1[4];
  if (v2)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v6);
    *a1 = 0;
    goto LABEL_4;
  }
  result = sub_1C9889C1C();
  __break(1u);
  return result;
}

void sub_1C98A0A8C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)(v1 + 32);
  if (v3 == (_QWORD *)(v1 + 8))
  {
    v4 = 4;
    v3 = (_QWORD *)(v1 + 8);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1C98A0ACC()
{
  JUMPOUT(0x1CAA44AFCLL);
}

_QWORD *sub_1C98A0AE0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E82941C8;
  return result;
}

void sub_1C98A0B04(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E82941C8;
}

void sub_1C98A0B1C(uint64_t a1, CFTypeRef *a2)
{
  if (*a2)
    CFRelease(*a2);
}

uint64_t sub_1C98A0B2C(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 160);
  if (v2)
  {
    *(_QWORD *)(a1 + 168) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 136);
  if (v3)
  {
    *(_QWORD *)(a1 + 144) = v3;
    operator delete(v3);
  }
  cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)(a1 + 16));

  return a1;
}

uint64_t sub_1C98A0B7C(uint64_t a1)
{
  cva::DictionaryHandler *v1;
  uint64_t v2;
  uint64_t v4;

  v1 = (cva::DictionaryHandler *)(a1 + 16);
  if (!cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)(a1 + 16), CFSTR("DrawDebugFlow")))
    return 0;
  cva::DictionaryHandler::item(v1, CFSTR("DrawDebugFlow"));
  v2 = cva::ItemHandler::getValue<BOOL>();
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v4);
  return v2;
}

void sub_1C98A0BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1C98A0BFC(uint64_t a1)
{
  cva::DictionaryHandler *v1;
  uint64_t v2;
  uint64_t v4;

  v1 = (cva::DictionaryHandler *)(a1 + 16);
  if (!cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)(a1 + 16), CFSTR("DrawDebugLandmarksAndBBoxes")))return 0;
  cva::DictionaryHandler::item(v1, CFSTR("DrawDebugLandmarksAndBBoxes"));
  v2 = cva::ItemHandler::getValue<BOOL>();
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v4);
  return v2;
}

void sub_1C98A0C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_1C98A0C7C(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {

    sub_1C9889B34((uint64_t *)(v2 + 8), 0);
    MEMORY[0x1CAA44AFC](v2, 0xA0C40069AE433);
  }
  return a1;
}

uint64_t sub_1C98A0CE4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;

  if (*(_BYTE *)(a1 + 16))
  {
    v2 = **(_QWORD **)(a1 + 8);
    std::mutex::lock((std::mutex *)(v2 + 16));
    *(_BYTE *)(v2 + 128) = 1;
    std::mutex::unlock((std::mutex *)(v2 + 16));
    (*(void (**)(_QWORD))(***(_QWORD ***)(a1 + 8) + 48))(**(_QWORD **)(a1 + 8));
    (*(void (**)(_QWORD))(***(_QWORD ***)(a1 + 8) + 40))(**(_QWORD **)(a1 + 8));
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
    if ((int)(v3 >> 4) >= 1)
    {
      v4 = 0;
      v5 = v3 & 0xFFFFFFFF0;
      do
      {
        sub_1C991F874(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16) + v4), 0);
        v4 += 16;
      }
      while (v5 != v4);
    }
  }

  if (*(_BYTE *)(a1 + 80))
  if (*(_BYTE *)(a1 + 48))

  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v6)
  {

    sub_1C9889B34((uint64_t *)(v6 + 8), 0);
    MEMORY[0x1CAA44AFC](v6, 0xA0C40069AE433);
  }
  v7 = *(unint64_t **)(a1 + 24);
  if (v7)
  {
    v8 = v7 + 1;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      (*(void (**)(unint64_t *))(*v7 + 16))(v7);
      if (!*(_BYTE *)(a1 + 16))
        return a1;
      goto LABEL_16;
    }
  }
  if (*(_BYTE *)(a1 + 16))
LABEL_16:
    sub_1C992012C(a1);
  return a1;
}

uint64_t sub_1C98A0E70(uint64_t a1, void *a2, void *a3, void *a4, __int128 *a5, __int128 *a6, char a7)
{
  id v13;
  std::__shared_weak_count *v14;
  id v15;
  unsigned __int8 v16;
  NSObject *v17;
  uint64_t v18;
  char *v19;
  std::__shared_weak_count *v20;
  id v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  id v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v29;
  id v30;
  id v31;
  _QWORD *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  unint64_t *v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  char v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t *v50;
  unint64_t v51;
  unsigned __int8 v52;
  NSObject *v53;
  std::__shared_weak_count *v55;
  id v56;
  _QWORD *v57;
  std::__shared_weak_count *v58;
  uint8_t v59[8];
  std::__shared_weak_count *v60;
  uint8_t buf[8];
  __int128 v62;
  id v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  id v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v13 = a2;
  v14 = a3;
  v15 = a4;
  if (!*(_QWORD *)(a1 + 24))
  {
    v55 = v14;
    v56 = v13;
    if (!*(_BYTE *)(a1 + 16))
    {
      v19 = (char *)operator new(0x30uLL);
      *(_QWORD *)buf = v19;
      v62 = xmmword_1C9927580;
      strcpy(v19, "com.apple.applecva.viewpointcorrection.2");
      sub_1C9884BE4((_QWORD *)a1, 1, (uint64_t)buf);
      operator delete(v19);
      *(_BYTE *)(a1 + 16) = 1;
    }
    *(_QWORD *)buf = a1;
    LOBYTE(v62) = a7;
    v20 = v14;
    *((_QWORD *)&v62 + 1) = v20;
    v21 = v15;
    v63 = v21;
    v22 = a5[1];
    v64 = *a5;
    v65 = v22;
    v23 = *a6;
    v24 = a6[1];
    v66 = a5[2];
    v67 = v23;
    v25 = a6[2];
    v68 = v24;
    v69 = v25;
    v26 = v13;
    v70 = v26;
    v27 = (std::__shared_weak_count *)operator new(0x48uLL);
    v27->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    v27->__shared_weak_owners_ = 0;
    v27->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295B10;
    v27[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E8294D60;
    v14 = v27 + 1;
    v29 = v20;
    v30 = v21;
    v31 = v26;
    v27[2].__shared_owners_ = 0;
    v32 = operator new(0xA0uLL);
    *v32 = &off_1E82942E8;
    v32[2] = *(_QWORD *)buf;
    *((_BYTE *)v32 + 24) = v62;
    v32[4] = v29;
    v32[5] = v30;
    v33 = v67;
    *((_OWORD *)v32 + 5) = v66;
    *((_OWORD *)v32 + 6) = v33;
    v34 = v69;
    *((_OWORD *)v32 + 7) = v68;
    *((_OWORD *)v32 + 8) = v34;
    v35 = v65;
    *((_OWORD *)v32 + 3) = v64;
    *((_OWORD *)v32 + 4) = v35;
    v32[18] = v31;
    v27[2].__shared_owners_ = (uint64_t)v32;
    v36 = operator new();
    *(_QWORD *)(v36 + 8) = 0;
    v37 = (unint64_t *)(v36 + 8);
    *(_QWORD *)(v36 + 24) = 850045863;
    *(_QWORD *)(v36 + 16) = 0;
    *(_OWORD *)(v36 + 32) = 0u;
    *(_OWORD *)(v36 + 48) = 0u;
    *(_OWORD *)(v36 + 64) = 0u;
    *(_QWORD *)(v36 + 80) = 0;
    *(_QWORD *)(v36 + 88) = 1018212795;
    *(_OWORD *)(v36 + 96) = 0u;
    *(_OWORD *)(v36 + 112) = 0u;
    *(_OWORD *)(v36 + 124) = 0u;
    *(_QWORD *)v36 = &off_1E8294330;
    v27[2].__shared_weak_owners_ = v36;
    *(_QWORD *)v59 = v27 + 1;
    v60 = v27;
    v13 = v56;
    std::mutex::lock((std::mutex *)(v36 + 24));
    v38 = *(_DWORD *)(v36 + 136);
    if ((v38 & 2) != 0)
    {
      sub_1C98A1468();
      __break(1u);
    }
    else
    {
      do
        v39 = __ldxr(v37);
      while (__stxr(v39 + 1, v37));
      *(_DWORD *)(v36 + 136) = v38 | 2;
      std::mutex::unlock((std::mutex *)(v36 + 24));
      v57 = &v27[1].__vftable;
      v58 = v27;
      do
        v40 = __ldxr(p_shared_owners);
      while (__stxr(v40 + 1, p_shared_owners));
      v14 = v55;
      v41 = (*(uint64_t (**)(uint64_t, _QWORD **))(*(_QWORD *)a1 + 16))(a1, &v57);
      v42 = v58;
      if (v58)
      {
        v43 = (unint64_t *)&v58->__shared_owners_;
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      if ((v41 & 1) == 0)
      {
        do
          v45 = __ldaxr(v37);
        while (__stlxr(v45 - 1, v37));
        if (!v45)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 16))(v36);
        v36 = 0;
      }
      v46 = v60;
      if (v60)
      {
        v47 = (unint64_t *)&v60->__shared_owners_;
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
      v49 = *(unint64_t **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = v36;
      if (v49)
      {
        v50 = v49 + 1;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
          (*(void (**)(unint64_t *))(*v49 + 16))(v49);
        v36 = *(_QWORD *)(a1 + 24);
      }
      if (v36)
      {
        v18 = 0;
LABEL_39:

        goto LABEL_40;
      }
      v52 = atomic_load((unsigned __int8 *)&qword_1EF921288);
      if ((v52 & 1) != 0)
      {
LABEL_36:
        v53 = (id)qword_1EF921280;
        if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v59 = 0;
          _os_log_error_impl(&dword_1C9870000, v53, OS_LOG_TYPE_ERROR, "Assertion failed: m_encodingResult.valid()", v59, 2u);
        }

        v18 = 2;
        goto LABEL_39;
      }
    }
    if (__cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    goto LABEL_36;
  }
  v16 = atomic_load((unsigned __int8 *)&qword_1EF921288);
  if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
  {
    qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
    __cxa_guard_release(&qword_1EF921288);
  }
  v17 = (id)qword_1EF921280;
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1C9870000, v17, OS_LOG_TYPE_ERROR, "Precondition violated: !m_encodingResult.valid()", buf, 2u);
  }

  v18 = 1;
LABEL_40:

  return v18;
}

void sub_1C98A1378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  void *v15;
  void *v16;

  operator delete(v16);

  _Unwind_Resume(a1);
}

uint64_t sub_1C98A1468()
{
  std::__libcpp_verbose_abort("future_error was thrown in -fno-exceptions mode");
  return sub_1C98A147C();
}

id *sub_1C98A147C(id *a1)
{

  return a1;
}

void sub_1C98A14B4(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x1E0DE4FC8] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_1C98A1500(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x1E0DE4FC8] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  JUMPOUT(0x1CAA44AFCLL);
}

uint64_t sub_1C98A1560(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

id *sub_1C98A156C(id *a1)
{

  return a1;
}

void sub_1C98A15A4(id *a1)
{

  JUMPOUT(0x1CAA44AFCLL);
}

_QWORD *sub_1C98A15EC(uint64_t a1)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  v2 = operator new(0xA0uLL);
  *v2 = &off_1E82942E8;
  v2[2] = *(_QWORD *)(a1 + 16);
  *((_BYTE *)v2 + 24) = *(_BYTE *)(a1 + 24);
  v2[4] = *(id *)(a1 + 32);
  v2[5] = *(id *)(a1 + 40);
  v3 = *(_OWORD *)(a1 + 96);
  *((_OWORD *)v2 + 5) = *(_OWORD *)(a1 + 80);
  *((_OWORD *)v2 + 6) = v3;
  v4 = *(_OWORD *)(a1 + 128);
  *((_OWORD *)v2 + 7) = *(_OWORD *)(a1 + 112);
  *((_OWORD *)v2 + 8) = v4;
  v5 = *(_OWORD *)(a1 + 64);
  *((_OWORD *)v2 + 3) = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v2 + 4) = v5;
  v2[18] = *(id *)(a1 + 144);
  return v2;
}

id sub_1C98A1670(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  id result;

  *(_QWORD *)a2 = &off_1E82942E8;
  v4 = *(_QWORD *)(a1 + 16);
  *(_BYTE *)(a2 + 24) = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 32) = *(id *)(a1 + 32);
  *(_QWORD *)(a2 + 40) = *(id *)(a1 + 40);
  v5 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 64) = v5;
  v6 = *(_OWORD *)(a1 + 128);
  v8 = *(_OWORD *)(a1 + 80);
  v7 = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 112) = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 128) = v6;
  *(_OWORD *)(a2 + 80) = v8;
  *(_OWORD *)(a2 + 96) = v7;
  result = *(id *)(a1 + 144);
  *(_QWORD *)(a2 + 144) = result;
  return result;
}

void sub_1C98A16E8(id *a1)
{

}

void sub_1C98A1718(id *a1)
{

  operator delete(a1);
}

uint64_t sub_1C98A1750(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  char v4;
  void **v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  unsigned int v10;
  char v11;
  void **v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  unsigned __int8 v18;
  NSObject *v19;
  char *v21;
  char *v22;
  int v23;
  char *v24;
  __int16 v25;
  char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 16);
  v3 = (void *)MEMORY[0x1CAA45030]();
  kdebug_trace();
  v4 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(objc_msgSend(*(id *)(v2 + 40), "contents") + 120) = v4;
  v5 = *(void ***)(v2 + 32);
  v6 = *(void **)(a1 + 32);
  v7 = *(void **)(a1 + 40);
  v8 = *(id *)(v2 + 56);
  v9 = *(id *)(v2 + 64);
  v10 = sub_1C98A6094(v5, v6, v7, v8, v9, (simd_float3x3 *)(a1 + 48), *(id *)(v2 + 40), *(void **)(a1 + 144));

  if (v10)
    goto LABEL_3;
  v11 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(objc_msgSend(*(id *)(v2 + 72), "contents") + 120) = v11;
  v12 = *(void ***)(v2 + 32);
  v13 = *(void **)(a1 + 32);
  v14 = *(void **)(a1 + 40);
  v15 = *(id *)(v2 + 88);
  v16 = *(id *)(v2 + 96);
  v10 = sub_1C98A6094(v12, v13, v14, v15, v16, (simd_float3x3 *)(a1 + 96), *(id *)(v2 + 72), *(void **)(a1 + 144));

  if (v10)
  {
LABEL_3:
    if (v10 == 1)
      v17 = 2;
    else
      v17 = v10;
    v18 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v19 = (id)qword_1EF921280;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      v21 = off_1E8296478[v10 - 1];
      v22 = off_1E8296478[(v17 - 1)];
      v23 = 136315394;
      v24 = v21;
      v25 = 2080;
      v26 = v22;
      _os_log_error_impl(&dword_1C9870000, v19, OS_LOG_TYPE_ERROR, "Running m_flowWarper->apply(textureY, textureCbCr, eye.warpfieldX.texture(), eye.warpfieldY.texture(), leftEye(eye) ? transformLeft : transformRight, *eye.warpParams, commandBuffer) failed with %s, returning %s", (uint8_t *)&v23, 0x16u);
    }

  }
  else
  {
    v17 = 0;
  }
  kdebug_trace();
  objc_autoreleasePoolPop(v3);
  return v17;
}

void sub_1C98A19C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  kdebug_trace();
  _Unwind_Resume(a1);
}

void sub_1C98A1A08(_QWORD *a1)
{
  sub_1C98A1B30(a1);
  JUMPOUT(0x1CAA44AFCLL);
}

uint64_t sub_1C98A1A2C(uint64_t a1)
{
  std::mutex *v1;
  uint64_t result;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _Unwind_Exception *v9;
  std::exception_ptr v10;

  result = *(_QWORD *)(a1 + 32);
  if (!result)
  {
    *(_QWORD *)(a1 + 32) = 0;
    return result;
  }
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  v5 = *(_QWORD *)(a1 + 40);
  if (!v5)
  {
LABEL_13:
    v9 = (_Unwind_Exception *)sub_1C98A1468();
    std::mutex::unlock(v1);
    _Unwind_Resume(v9);
  }
  v6 = v4;
  v1 = (std::mutex *)(v5 + 24);
  std::mutex::lock((std::mutex *)(v5 + 24));
  if ((*(_BYTE *)(v5 + 136) & 1) != 0
    || (v10.__ptr_ = 0, v7 = *(_QWORD *)(v5 + 16), std::exception_ptr::~exception_ptr(&v10), v7))
  {
    sub_1C98A1468();
    __break(1u);
    goto LABEL_13;
  }
  *(_QWORD *)(v5 + 140) = v6 | 0x100000000;
  *(_DWORD *)(v5 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(v5 + 88));
  std::mutex::unlock((std::mutex *)(v5 + 24));
  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result == a1 + 8)
  {
    v8 = 4;
    result = a1 + 8;
  }
  else
  {
    if (!result)
      return result;
    v8 = 5;
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v8))();
}

_QWORD *sub_1C98A1B30(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  const std::error_category *v12;
  std::exception_ptr v13[4];

  *a1 = &off_1E8294D60;
  v2 = a1 + 1;
  if (a1[4])
  {
    v3 = a1[5];
    if (v3)
    {
      std::mutex::lock((std::mutex *)(v3 + 24));
      if ((*(_BYTE *)(v3 + 136) & 1) == 0)
      {
        v13[0].__ptr_ = 0;
        v4 = *(_QWORD *)(v3 + 16);
        std::exception_ptr::~exception_ptr(v13);
        if (!v4)
        {
          *(_QWORD *)(v3 + 140) = 0;
          *(_DWORD *)(v3 + 136) |= 5u;
          std::condition_variable::notify_all((std::condition_variable *)(v3 + 88));
          std::mutex::unlock((std::mutex *)(v3 + 24));
          goto LABEL_6;
        }
      }
      sub_1C98A1468();
    }
    else
    {
      sub_1C98A1468();
    }
    __break(1u);
    goto LABEL_23;
  }
LABEL_6:
  v5 = a1[5];
  if (!v5)
    goto LABEL_14;
  if ((*(_BYTE *)(v5 + 136) & 1) == 0)
  {
    v13[0].__ptr_ = 0;
    v6 = *(_QWORD *)(v5 + 16);
    std::exception_ptr::~exception_ptr(v13);
    v5 = a1[5];
    if (!v6 && *(uint64_t *)(v5 + 8) >= 1)
    {
LABEL_23:
      v12 = std::future_category();
      MEMORY[0x1CAA44850](v13, 4, v12);
      abort();
    }
  }
  v7 = (unint64_t *)(v5 + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
LABEL_14:
  v9 = (_QWORD *)a1[4];
  if (v9 == v2)
  {
    v10 = 4;
    goto LABEL_18;
  }
  if (v9)
  {
    v10 = 5;
    v2 = (_QWORD *)a1[4];
LABEL_18:
    (*(void (**)(_QWORD *))(*v2 + 8 * v10))(v2);
  }
  return a1;
}

void sub_1C98A1C88(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t *v3;
  std::mutex *v4;
  _QWORD *v6;
  uint64_t v7;

  std::mutex::unlock(v4);
  sub_1C98A1CDC(v3);
  v6 = *(_QWORD **)(v2 + 32);
  if (v6 == v1)
  {
    v7 = 4;
  }
  else
  {
    if (!v6)
      goto LABEL_6;
    v7 = 5;
    v1 = *(_QWORD **)(v2 + 32);
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v7))(v1);
LABEL_6:
  _Unwind_Resume(a1);
}

uint64_t *sub_1C98A1CDC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::exception_ptr v8[4];

  v2 = *a1;
  if (v2)
  {
    if ((*(_BYTE *)(v2 + 136) & 1) == 0)
    {
      v8[0].__ptr_ = 0;
      v3 = *(_QWORD *)(v2 + 16);
      std::exception_ptr::~exception_ptr(v8);
      v2 = *a1;
      if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
      {
        v7 = std::future_category();
        MEMORY[0x1CAA44850](v8, 4, v7);
        abort();
      }
    }
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  }
  return a1;
}

void sub_1C98A1D74(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295B10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1C98A1D84(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295B10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA44AFCLL);
}

uint64_t sub_1C98A1DB4(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1C98A1DC4(uint64_t a1, float a2)
{
  uint64_t v2;
  id *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned __int8 v10;
  NSObject *v11;
  unsigned __int8 v12;
  NSObject *v13;
  const char *v15;
  const char *v16;
  std::exception_ptr v17;
  std::exception_ptr v18;
  _BYTE __lk[22];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    v4 = (id *)a1;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)__lk = v2 + 24;
    __lk[8] = 1;
    std::mutex::lock((std::mutex *)(v2 + 24));
    std::__assoc_sub_state::__sub_wait((std::__assoc_sub_state *)v2, (std::unique_lock<std::mutex> *)__lk);
    v5 = v2 + 16;
    v6 = *(_QWORD *)(v2 + 16);
    v18.__ptr_ = 0;
    std::exception_ptr::~exception_ptr(&v18);
    if (v6)
    {
      std::exception_ptr::exception_ptr(&v18, (const std::exception_ptr *)(v2 + 16));
      v17.__ptr_ = &v18;
      std::rethrow_exception(v17);
      __break(1u);
    }
    else
    {
      v7 = *(_QWORD *)(v2 + 140);
      if (__lk[8])
        std::mutex::unlock(*(std::mutex **)__lk);
      v8 = (unint64_t *)(v2 + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
      if ((v7 & 0xFF00000000) != 0)
        LODWORD(v6) = v7;
      else
        LODWORD(v6) = 2;
      v5 = v6 - 1;
      if ((_DWORD)v6 == 1)
        v2 = 2;
      else
        v2 = v6;
      if (!(_DWORD)v6)
      {
        *(float *)(objc_msgSend(v4[5], "contents") + 112) = a2;
        v2 = 0;
        *(float *)(objc_msgSend(v4[9], "contents") + 112) = a2;
        return v2;
      }
      v10 = atomic_load((unsigned __int8 *)&qword_1EF921288);
      v4 = (id *)&unk_1EF921000;
      if ((v10 & 1) != 0)
        goto LABEL_17;
    }
    if (__cxa_guard_acquire(&qword_1EF921288))
    {
      v4[80] = os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
LABEL_17:
    v11 = v4[80];
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      if (v6 > 7)
        v15 = "Success, no error";
      else
        v15 = off_1E8296478[v5];
      if (v2 > 7)
        v16 = "Success, no error";
      else
        v16 = off_1E8296478[(v2 - 1)];
      *(_DWORD *)__lk = 136315394;
      *(_QWORD *)&__lk[4] = v15;
      *(_WORD *)&__lk[12] = 2080;
      *(_QWORD *)&__lk[14] = v16;
      _os_log_error_impl(&dword_1C9870000, v11, OS_LOG_TYPE_ERROR, "Running m_encodingResult.get().value_or(ViewpointStatus::AssertionFailed) failed with %s, returning %s", __lk, 0x16u);
    }

    return v2;
  }
  v12 = atomic_load((unsigned __int8 *)&qword_1EF921288);
  if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
  {
    qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
    __cxa_guard_release(&qword_1EF921288);
  }
  v13 = (id)qword_1EF921280;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)__lk = 0;
    _os_log_error_impl(&dword_1C9870000, v13, OS_LOG_TYPE_ERROR, "Precondition violated: m_encodingResult.valid()", __lk, 2u);
  }

  return 1;
}

void sub_1C98A2084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, std::mutex *a11, char a12)
{
  unint64_t *v12;
  unint64_t *v14;
  unint64_t v15;

  std::exception_ptr::~exception_ptr(&a10);
  if (a12)
    std::mutex::unlock(a11);
  v14 = v12 + 1;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    (*(void (**)(unint64_t *))(*v12 + 16))(v12);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1C98A23FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

float32x4_t sub_1C98A2454(float32x2_t *a1, float a2, float a3)
{
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t result;
  float32x4_t v7;

  v3 = *(float32x4_t *)(MEMORY[0x1E0C83FE8] + 16);
  v4 = *(float32x4_t *)(MEMORY[0x1E0C83FE8] + 32);
  v4.i64[0] = __PAIR64__(LODWORD(a3), LODWORD(a2));
  v5 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*MEMORY[0x1E0C83FE8], COERCE_FLOAT(*(_OWORD *)a1->f32)), v3, *a1, 1), v4, *(float32x4_t *)a1->f32, 2);
  result = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*MEMORY[0x1E0C83FE8], COERCE_FLOAT(*(_OWORD *)a1[2].f32)), v3, a1[2], 1), v4, *(float32x4_t *)a1[2].f32, 2);
  v7 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*MEMORY[0x1E0C83FE8], COERCE_FLOAT(*(_OWORD *)a1[4].f32)), v3, a1[4], 1), v4, *(float32x4_t *)a1[4].f32, 2);
  a1[1].i32[0] = v5.i32[2];
  *a1 = *(float32x2_t *)v5.f32;
  a1[3].i32[0] = result.i32[2];
  a1[2] = *(float32x2_t *)result.f32;
  a1[5].i32[0] = v7.i32[2];
  a1[4] = *(float32x2_t *)v7.f32;
  return result;
}

double sub_1C98A24C0(uint64_t a1, float **a2)
{
  float *v3;
  float *v4;
  double result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  int v9;

  v3 = *a2;
  if (*a2 == (float *)a1 || (v4 = a2[1], v4 == (float *)a1))
  {
    v9 = 0;
    v7 = 0u;
    v8 = 0u;
    sub_1C98A24C0(&v7);
    result = *(double *)&v7;
    v6 = v8;
    *(_OWORD *)a1 = v7;
    *(_OWORD *)(a1 + 16) = v6;
    *(_DWORD *)(a1 + 32) = v9;
  }
  else
  {
    *(float *)a1 = (float)((float)((float)(*v3 * *v4) + 0.0) + (float)(v3[3] * v4[1])) + (float)(v3[6] * v4[2]);
    *(float *)(a1 + 4) = (float)((float)((float)(v3[1] * *v4) + 0.0) + (float)(v3[4] * v4[1])) + (float)(v3[7] * v4[2]);
    *(float *)(a1 + 8) = (float)((float)((float)(v3[2] * *v4) + 0.0) + (float)(v3[5] * v4[1])) + (float)(v3[8] * v4[2]);
    *(float *)(a1 + 12) = (float)((float)((float)(*v3 * v4[3]) + 0.0) + (float)(v3[3] * v4[4])) + (float)(v3[6] * v4[5]);
    *(float *)(a1 + 16) = (float)((float)((float)(v3[1] * v4[3]) + 0.0) + (float)(v3[4] * v4[4]))
                        + (float)(v3[7] * v4[5]);
    *(float *)(a1 + 20) = (float)((float)((float)(v3[2] * v4[3]) + 0.0) + (float)(v3[5] * v4[4]))
                        + (float)(v3[8] * v4[5]);
    *(float *)(a1 + 24) = (float)((float)((float)(*v3 * v4[6]) + 0.0) + (float)(v3[3] * v4[7])) + (float)(v3[6] * v4[8]);
    *(float *)(a1 + 28) = (float)((float)((float)(v3[1] * v4[6]) + 0.0) + (float)(v3[4] * v4[7]))
                        + (float)(v3[7] * v4[8]);
    *(float *)&result = (float)((float)((float)(v3[2] * v4[6]) + 0.0) + (float)(v3[5] * v4[7])) + (float)(v3[8] * v4[8]);
    *(_DWORD *)(a1 + 32) = LODWORD(result);
  }
  return result;
}

float *sub_1C98A266C(float *result, float **a2)
{
  float *v2;
  float *v3;
  float *v4;
  uint64_t v5;
  int v6;

  v2 = result;
  v3 = *a2;
  if (*a2 == result || (v4 = a2[1], v4 == result))
  {
    v6 = 0;
    v5 = 0;
    result = (float *)sub_1C98A266C(&v5);
    *(_QWORD *)v2 = v5;
    *((_DWORD *)v2 + 2) = v6;
  }
  else
  {
    *result = (float)((float)((float)(*v3 * *v4) + 0.0) + (float)(v3[3] * v4[1])) + (float)(v3[6] * v4[2]);
    result[1] = (float)((float)((float)(v3[1] * *v4) + 0.0) + (float)(v3[4] * v4[1])) + (float)(v3[7] * v4[2]);
    result[2] = (float)((float)((float)(v3[2] * *v4) + 0.0) + (float)(v3[5] * v4[1])) + (float)(v3[8] * v4[2]);
  }
  return result;
}

void sub_1C98A2740()
{
  JUMPOUT(0x1CAA44AFCLL);
}

float32x2_t sub_1C98A2754(uint64_t a1, float32x2_t *a2, float32x2_t result, double a4, double a5)
{
  float32x2_t *v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  uint64_t v9;
  float32x2_t v10;
  float32x2_t v11;

  if (a1)
  {
    if (a1 <= 0)
      sub_1C9893464();
    v6 = *a2;
    v5 = a2 + 1;
    v7 = v6;
    v8 = v6;
    v9 = a1 - 1;
    if (a1 != 1)
    {
      do
      {
        v10 = *v5++;
        HIDWORD(a5) = v10.i32[1];
        v7 = vminnm_f32(v7, v10);
        v8 = vmaxnm_f32(v8, v10);
        --v9;
      }
      while (v9);
    }
    v11 = vsub_f32(v8, v7);
    LODWORD(a5) = v11.i32[1];
    if (v11.f32[0] >= v11.f32[1])
      *(float *)&a5 = v11.f32[0];
    return vadd_f32(v7, vmul_f32(vsub_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)&a5, 0), v11), (float32x2_t)0xBF000000BF000000));
  }
  return result;
}

uint64_t sub_1C98A27D0(const __CFString *a1, void *a2, cva::DictionaryHandler *a3)
{
  __IOSurface *v5;
  size_t Width;
  size_t Height;
  OSType PixelFormat;
  const __CFAllocator *v9;
  __CFDictionary *Mutable;
  CFNumberRef v11;
  unsigned __int8 v12;
  NSObject *v13;
  uint64_t v14;
  void *BaseAddress;
  void *v17;
  __CVBuffer *v18;
  char v19;
  unsigned __int8 v20;
  const char *v21;
  CVPixelBufferRef pixelBuffer[3];
  int valuePtr;

  v5 = a2;
  Width = IOSurfaceGetWidth(v5);
  Height = IOSurfaceGetHeight(v5);
  PixelFormat = IOSurfaceGetPixelFormat(v5);
  v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  valuePtr = IOSurfaceGetBytesPerRow(v5);
  v11 = CFNumberCreate(v9, kCFNumberIntType, &valuePtr);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA8F68], v11);
  CFRelease(v11);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA9010], (const void *)*MEMORY[0x1E0C9AE50]);
  pixelBuffer[0] = 0;
  if (CVPixelBufferCreate(v9, Width, Height, PixelFormat, Mutable, pixelBuffer))
    goto LABEL_2;
  CVPixelBufferLockBaseAddress(pixelBuffer[0], 0);
  IOSurfaceLock(v5, 1u, 0);
  BaseAddress = IOSurfaceGetBaseAddress(v5);
  v17 = CVPixelBufferGetBaseAddress(pixelBuffer[0]);
  memcpy(v17, BaseAddress, Height * valuePtr);
  IOSurfaceUnlock(v5, 1u, 0);
  CVPixelBufferUnlockBaseAddress(pixelBuffer[0], 0);
  v18 = pixelBuffer[0];
  if (!pixelBuffer[0])
  {
LABEL_2:
    v12 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v13 = (id)qword_1EF921280;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      goto LABEL_4;
    LOWORD(pixelBuffer[0]) = 0;
    v21 = "Assertion failed: pixelBuffer";
    goto LABEL_13;
  }
  cva::ItemHandler::ItemHandler((cva::ItemHandler *)pixelBuffer, pixelBuffer[0]);
  v19 = cva::DictionaryHandler::setItem(a3, a1, (const cva::ItemHandler *)pixelBuffer);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)pixelBuffer);
  if ((v19 & 1) != 0)
  {
    CVPixelBufferRelease(v18);
    v14 = 0;
    goto LABEL_5;
  }
  v20 = atomic_load((unsigned __int8 *)&qword_1EF921288);
  if ((v20 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
  {
    qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
    __cxa_guard_release(&qword_1EF921288);
  }
  v13 = (id)qword_1EF921280;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    LOWORD(pixelBuffer[0]) = 0;
    v21 = "Assertion failed: dictionary.setItem(key, cva::ItemHandler(pixelBuffer, false))";
LABEL_13:
    _os_log_error_impl(&dword_1C9870000, v13, OS_LOG_TYPE_ERROR, v21, (uint8_t *)pixelBuffer, 2u);
  }
LABEL_4:

  v14 = 2;
LABEL_5:

  return v14;
}

void sub_1C98A2AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&a9);

  _Unwind_Resume(a1);
}

uint64_t sub_1C98A2AD8(uint64_t a1, int a2, cva::DictionaryHandler *a3)
{
  BOOL v6;
  const char *v7;
  size_t v8;
  id v9;
  unint64_t v10;
  float32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned __int8 v17;
  NSObject *v18;
  char *v19;
  char *v20;
  const char *v21;
  NSObject *v22;
  uint32_t v23;
  int32x2_t *v24;
  const char *v25;
  char v26;
  const __CFString *v27;
  char v28;
  void *v29;
  const __CFString *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned __int8 v33;
  char *v34;
  char *v35;
  unsigned __int8 v36;
  unsigned __int8 v37;
  __int128 v39;
  float v40;
  int8x16_t v41;
  int8x16_t v42;
  void *__dst[2];
  char v44;
  void *memptr;
  _BYTE buf[24];
  float32x2_t v47;
  uint64_t v48;
  simd_float3x3 v49;

  v48 = *MEMORY[0x1E0C80C00];
  v6 = a2 == 0;
  if (a2)
    v7 = "cropLeft";
  else
    v7 = "cropRight";
  if (v6)
    v8 = 9;
  else
    v8 = 8;
  v44 = v8;
  memcpy(__dst, v7, v8);
  *((_BYTE *)__dst + v8) = 0;
  v9 = *(id *)(a1 + 160);
  v10 = objc_msgSend(v9, "width");
  v40 = (float)(unint64_t)objc_msgSend(*(id *)(a1 + 160), "height");

  v49 = __invert_f3(*(simd_float3x3 *)a1);
  v11 = vmulq_f32((float32x4_t)v49.columns[0], (float32x4_t)0);
  v12 = (int32x4_t)vaddq_f32((float32x4_t)v49.columns[2], vmlaq_f32(v11, (float32x4_t)0, (float32x4_t)v49.columns[1]));
  v13 = (int32x4_t)vaddq_f32((float32x4_t)v49.columns[2], vmlaq_n_f32(v11, (float32x4_t)v49.columns[1], v40));
  v49.columns[0] = (simd_float3)vmulq_n_f32((float32x4_t)v49.columns[0], (float)v10);
  v14 = (int32x4_t)vaddq_f32((float32x4_t)v49.columns[2], vmlaq_n_f32((float32x4_t)v49.columns[0], (float32x4_t)v49.columns[1], v40));
  v49.columns[0] = (simd_float3)vaddq_f32((float32x4_t)v49.columns[2], vmlaq_f32((float32x4_t)v49.columns[0], (float32x4_t)0, (float32x4_t)v49.columns[1]));
  *(float32x2_t *)buf = vdiv_f32(*(float32x2_t *)v12.i8, (float32x2_t)vdup_laneq_s32(v12, 2));
  *(float32x2_t *)&buf[8] = vdiv_f32(*(float32x2_t *)v13.i8, (float32x2_t)vdup_laneq_s32(v13, 2));
  *(float32x2_t *)&buf[16] = vdiv_f32(*(float32x2_t *)v14.i8, (float32x2_t)vdup_laneq_s32(v14, 2));
  v47 = vdiv_f32(*(float32x2_t *)v49.columns[0].f32, (float32x2_t)vdup_laneq_s32((int32x4_t)v49.columns[0], 2));
  v15 = sub_1C98A3090((uint64_t)__dst, 4, (uint64_t *)buf, a3);
  if (v44 < 0)
    operator delete(__dst[0]);
  if (v15 == 1)
    v16 = 2;
  else
    v16 = v15;
  if (v15)
  {
    v17 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v18 = (id)qword_1EF921280;
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      goto LABEL_42;
    v19 = off_1E8296478[v15 - 1];
    v20 = off_1E8296478[(v16 - 1)];
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v19;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v20;
    v21 = "Running addPoints(isLeftEye ? \"cropLeft\" : \"cropRight\", eyeCrop.cropCorners(), dictionary) failed with %s, returning %s";
    goto LABEL_16;
  }
  v41 = *(int8x16_t *)(a1 + 16);
  v42 = *(int8x16_t *)a1;
  v39 = *(_OWORD *)(a1 + 32);
  *(_QWORD *)&buf[8] = 16;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, 0x40uLL, 0x49090899uLL);
  v24 = (int32x2_t *)memptr;
  *(_QWORD *)buf = memptr;
  *(_QWORD *)&buf[16] = 0x300000003;
  *(int32x2_t *)memptr = vzip1_s32(*(int32x2_t *)v42.i8, *(int32x2_t *)v41.i8);
  v24[1] = (int32x2_t)__PAIR64__(v42.u32[1], v39);
  v24[2] = vzip2_s32(*(int32x2_t *)v41.i8, *(int32x2_t *)&v39);
  v24[3] = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v42, v42, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL));
  v24[4].i32[0] = DWORD2(v39);
  cva::ItemHandler::createMatrix<float>();
  if (a2)
    v25 = "transformLeft";
  else
    v25 = "transformRight";
  free(*(void **)buf);
  v26 = cva::DictionaryHandler::setItem(a3, v25, (const cva::ItemHandler *)__dst);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)__dst);
  if ((v26 & 1) == 0)
  {
    v36 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v36 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v18 = (id)qword_1EF921280;
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      goto LABEL_41;
    *(_WORD *)buf = 0;
    v21 = "Assertion failed: dictionary.setItem(isLeftEye ? \"transformLeft\" : \"transformRight\", cva::ItemHandler::cre"
          "ateMatrix(matrix))";
    goto LABEL_46;
  }
  if (a2)
    v27 = CFSTR("DebugLeftEyeCropFocalLength");
  else
    v27 = CFSTR("DebugRightEyeCropFocalLength");
  cva::ItemHandler::createValue<float>();
  v28 = cva::DictionaryHandler::setItem(a3, v27, (const cva::ItemHandler *)buf);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
  if ((v28 & 1) == 0)
  {
    v37 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v37 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v18 = (id)qword_1EF921280;
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
LABEL_41:
      v16 = 2;
      goto LABEL_42;
    }
    *(_WORD *)buf = 0;
    v21 = "Assertion failed: dictionary.setItem(focalLengthKey, cva::ItemHandler::createValue(eyeCrop.cropCamera.m_intrinsic(0, 0)))";
LABEL_46:
    v16 = 2;
    v22 = v18;
    v23 = 2;
    goto LABEL_47;
  }
  v29 = *(void **)(a1 + 152);
  if (!v29)
    return 0;
  v30 = a2 ? CFSTR("DebugLeftEyeCrop") : CFSTR("DebugRightEyeCrop");
  v31 = sub_1C98A27D0(v30, v29, a3);
  v32 = v31 - 1;
  v16 = v31 == 1 ? 2 : v31;
  if (!v31)
    return 0;
  v33 = atomic_load((unsigned __int8 *)&qword_1EF921288);
  if ((v33 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
  {
    qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
    __cxa_guard_release(&qword_1EF921288);
  }
  v18 = (id)qword_1EF921280;
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    v34 = off_1E8296478[v32];
    v35 = off_1E8296478[(v16 - 1)];
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v34;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v35;
    v21 = "Running addSurface(surfaceKey, eyeCrop.cropSurface, dictionary) failed with %s, returning %s";
LABEL_16:
    v22 = v18;
    v23 = 22;
LABEL_47:
    _os_log_error_impl(&dword_1C9870000, v22, OS_LOG_TYPE_ERROR, v21, buf, v23);
  }
LABEL_42:

  return v16;
}

void sub_1C98A3024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)va);
  _Unwind_Resume(a1);
}

void sub_1C98A3044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  free(a19);
  _Unwind_Resume(a1);
}

void sub_1C98A3058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1C98A3090(uint64_t a1, uint64_t a2, uint64_t *a3, cva::DictionaryHandler *a4)
{
  uint64_t v8;
  char v9;
  const char *v10;
  char v11;
  uint64_t v12;
  unsigned __int8 v13;
  NSObject *v14;
  const char *v15;
  unsigned __int8 v16;
  _BYTE v18[16];
  uint8_t v19[16];
  uint8_t buf[8];
  uint64_t v21;
  int v22;
  void *memptr;

  cva::ArrayHandler::ArrayHandler((cva::ArrayHandler *)v19);
  if (a2)
  {
    while (1)
    {
      v8 = *a3;
      v21 = 8;
      memptr = 0;
      malloc_type_posix_memalign(&memptr, 0x20uLL, 0x20uLL, 0x49090899uLL);
      *(_QWORD *)buf = memptr;
      v22 = 2;
      *(_QWORD *)memptr = v8;
      cva::ItemHandler::createVector<float>();
      free(*(void **)buf);
      v9 = cva::ArrayHandler::addItem((cva::ArrayHandler *)v19, (const cva::ItemHandler *)v18);
      cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v18);
      if ((v9 & 1) == 0)
        break;
      ++a3;
      if (!--a2)
        goto LABEL_4;
    }
    v16 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v14 = (id)qword_1EF921280;
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      goto LABEL_14;
    *(_WORD *)buf = 0;
    v15 = "Assertion failed: pointsHandler.addItem(cva::ItemHandler::createVector(cva::Vector2f(point[0], point[1])))";
    goto LABEL_17;
  }
LABEL_4:
  cva::ItemHandler::ItemHandler();
  if (*(char *)(a1 + 23) >= 0)
    v10 = (const char *)a1;
  else
    v10 = *(const char **)a1;
  v11 = cva::DictionaryHandler::setItem(a4, v10, (const cva::ItemHandler *)buf);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
  if ((v11 & 1) == 0)
  {
    v13 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v14 = (id)qword_1EF921280;
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      goto LABEL_14;
    *(_WORD *)buf = 0;
    v15 = "Assertion failed: dictionary.setItem(name, cva::ItemHandler(pointsHandler))";
LABEL_17:
    _os_log_error_impl(&dword_1C9870000, v14, OS_LOG_TYPE_ERROR, v15, buf, 2u);
LABEL_14:

    v12 = 2;
    goto LABEL_15;
  }
  v12 = 0;
LABEL_15:
  cva::ArrayHandler::~ArrayHandler((cva::ArrayHandler *)v19);
  return v12;
}

void sub_1C98A32C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13)
{
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&a13);
  cva::ArrayHandler::~ArrayHandler((cva::ArrayHandler *)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_1C98A3310(uint64_t a1, uint64_t *a2, cva::DictionaryHandler *a3)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  unsigned __int8 v6;
  NSObject *v7;
  char *v9;
  char *v10;
  _BYTE __p[12];
  __int16 v12;
  char *v13;
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v14 = 9;
  strcpy(__p, "landmarks");
  v3 = sub_1C98A3090((uint64_t)__p, a1, a2, a3);
  if (v14 < 0)
    operator delete(*(void **)__p);
  v4 = v3 - 1;
  if (v3 == 1)
    v5 = 2;
  else
    v5 = v3;
  if (v3)
  {
    v6 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v7 = (id)qword_1EF921280;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v9 = off_1E8296478[v4];
      v10 = off_1E8296478[(v5 - 1)];
      *(_DWORD *)__p = 136315394;
      *(_QWORD *)&__p[4] = v9;
      v12 = 2080;
      v13 = v10;
      _os_log_error_impl(&dword_1C9870000, v7, OS_LOG_TYPE_ERROR, "Running addPoints(\"landmarks\", landmarks, dictionary) failed with %s, returning %s", __p, 0x16u);
    }

  }
  return v5;
}

void sub_1C98A3480(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1C98A348C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1C98A34A8(_QWORD *a1, uint64_t a2, unsigned int a3, uint64_t a4, void *a5, void *a6, __n128 a7)
{
  id v11;
  id v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  unsigned __int8 v23;
  NSObject *v24;
  const char *v25;
  unsigned __int8 v26;
  unsigned __int8 v28;
  unsigned __int8 v29;
  uint8_t buf[16];
  __n128 v32;
  uint64_t v33;

  v33 = a4;
  v11 = a5;
  v12 = a6;
  v32 = a7;
  if (!v12)
  {
    v26 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v26 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v24 = (id)qword_1EF921280;
    if (!os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      goto LABEL_13;
    *(_WORD *)buf = 0;
    v25 = "No command buffer provided.";
    goto LABEL_22;
  }
  if (!v11 || !objc_msgSend(v11, "width") || !objc_msgSend(v11, "height"))
  {
    v23 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v23 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v24 = (id)qword_1EF921280;
    if (!os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      goto LABEL_13;
    *(_WORD *)buf = 0;
    v25 = "No or empty texture provided.";
    goto LABEL_22;
  }
  if (objc_msgSend(v11, "pixelFormat") != *a1)
  {
    v28 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v28 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v24 = (id)qword_1EF921280;
    if (!os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      goto LABEL_13;
    *(_WORD *)buf = 0;
    v25 = "Mismatching texture pixel format.";
    goto LABEL_22;
  }
  if (!a2)
  {
    v29 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v29 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v24 = (id)qword_1EF921280;
    if (!os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      goto LABEL_13;
    *(_WORD *)buf = 0;
    v25 = "Null or 0 vertices provided.";
LABEL_22:
    _os_log_error_impl(&dword_1C9870000, v24, OS_LOG_TYPE_ERROR, v25, buf, 2u);
LABEL_13:

    v22 = 1;
    goto LABEL_14;
  }
  v13 = objc_msgSend(v11, "width");
  v14 = objc_msgSend(v11, "height");
  *(float *)&v15 = (float)v13;
  *((float *)&v15 + 1) = (float)v14;
  *(_QWORD *)buf = v15;
  v16 = (void *)objc_opt_new();
  objc_msgSend(v16, "colorAttachments");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "objectAtIndexedSubscript:", 0);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "setLoadAction:", 1);

  objc_msgSend(v16, "colorAttachments");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "objectAtIndexedSubscript:", 0);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "setTexture:", v11);

  objc_msgSend(v12, "renderCommandEncoderWithDescriptor:", v16);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "setLabel:", CFSTR("DebugRenderer"));
  objc_msgSend(v21, "setRenderPipelineState:", a1[1]);
  objc_msgSend(v21, "setVertexBytes:length:atIndex:", a2, 8 * a3, 0);
  objc_msgSend(v21, "setVertexBytes:length:atIndex:", buf, 8, 1);
  objc_msgSend(v21, "setVertexBytes:length:atIndex:", &v33, 8, 2);
  objc_msgSend(v21, "setFragmentBytes:length:atIndex:", &v33, 8, 2);
  objc_msgSend(v21, "setFragmentBytes:length:atIndex:", &v32, 16, 3);
  objc_msgSend(v21, "drawPrimitives:vertexStart:vertexCount:", v33, 0, a3);
  objc_msgSend(v21, "endEncoding");

  v22 = 0;
LABEL_14:

  return v22;
}

void sub_1C98A38B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C98A390C(id *a1, void *a2, id *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;

  v5 = a2;
  v6 = objc_msgSend(v5, "pixelFormat");
  v12 = v5;
  if (!*a3
    || (v7 = objc_msgSend(*a3, "width"), v7 != objc_msgSend(v12, "width"))
    || (v8 = objc_msgSend(*a3, "height"), v8 != objc_msgSend(v12, "height"))
    || objc_msgSend(*a3, "pixelFormat") != v6
    || objc_msgSend(*a3, "usage") != 3)
  {
    objc_msgSend(MEMORY[0x1E0CC6BB0], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", v6, objc_msgSend(v12, "width"), objc_msgSend(v12, "height"), 0);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "setUsage:", 3);
    objc_msgSend(v9, "setStorageMode:", 2);
    v10 = objc_msgSend(*a1, "newTextureWithDescriptor:", v9);
    v11 = *a3;
    *a3 = (id)v10;

  }
}

void sub_1C98A3A30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t sub_1C98A3A60(uint64_t a1, CVPixelBufferRef pixelBuffer, MTLPixelFormat a3, size_t planeIndex, uint64_t a5, uint64_t a6)
{
  size_t WidthOfPlane;
  size_t HeightOfPlane;
  size_t v14;
  void *v15;
  __CVMetalTextureCache *v16;
  NSObject *v17;
  _QWORD *v18;
  unsigned __int8 v19;
  NSObject *v20;
  unsigned __int8 v21;
  uint64_t v22;
  unsigned __int8 v23;
  NSObject *v24;
  unsigned __int8 v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  const __CFDictionary *textureAttributes;
  _BYTE buf[12];
  __int16 v36;
  const char *v37;
  _QWORD v38[4];
  CVMetalTextureRef textureOut;
  _QWORD v40[3];
  _QWORD *v41;
  uint64_t v42;
  _QWORD v43[3];

  v43[1] = *MEMORY[0x1E0C80C00];
  WidthOfPlane = CVPixelBufferGetWidthOfPlane(pixelBuffer, planeIndex);
  HeightOfPlane = CVPixelBufferGetHeightOfPlane(pixelBuffer, planeIndex);
  if (!WidthOfPlane || (v14 = HeightOfPlane) == 0)
  {
    v21 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v21 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v17 = (id)qword_1EF921280;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      LOWORD(textureOut) = 0;
      _os_log_error_impl(&dword_1C9870000, v17, OS_LOG_TYPE_ERROR, "Precondition violated: width && height", (uint8_t *)&textureOut, 2u);
    }
    v22 = 1;
    goto LABEL_29;
  }
  v42 = *MEMORY[0x1E0CA8F58];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a5);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v43[0] = v15;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v43, &v42, 1);
  textureAttributes = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();

  v38[0] = &off_1E8295248;
  v38[3] = v38;
  textureOut = 0;
  v41 = v40;
  v40[0] = &off_1E8295248;
  v16 = *(__CVMetalTextureCache **)(a1 + 8);
  if (!v16)
  {
    if (CVMetalTextureCacheCreate(0, 0, *(id *)a1, 0, (CVMetalTextureCacheRef *)(a1 + 8)))
    {
      v23 = atomic_load((unsigned __int8 *)&qword_1EF921288);
      if ((v23 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
      {
        qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
        __cxa_guard_release(&qword_1EF921288);
      }
      v24 = (id)qword_1EF921280;
      v18 = v40;
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_1C9870000, v24, OS_LOG_TYPE_ERROR, "Assertion failed: CVMetalTextureCacheCreate(NULL, NULL, m_device, NULL, m_metalTextureCache.fill()) == kCVReturnSuccess", buf, 2u);
      }

      v25 = atomic_load((unsigned __int8 *)&qword_1EF921288);
      if ((v25 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
      {
        qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
        __cxa_guard_release(&qword_1EF921288);
      }
      v20 = (id)qword_1EF921280;
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "Error running operation on the GPU";
        v36 = 2080;
        v37 = "Error running operation on the GPU";
        _os_log_error_impl(&dword_1C9870000, v20, OS_LOG_TYPE_ERROR, "Running createMetalTextureCache() failed with %s, returning %s", buf, 0x16u);
      }
      goto LABEL_20;
    }
    v16 = *(__CVMetalTextureCache **)(a1 + 8);
    if (textureOut)
    {
      *(_QWORD *)buf = textureOut;
      if (!v41)
        goto LABEL_62;
      (*(void (**)(_QWORD *, _BYTE *))(*v41 + 48))(v41, buf);
      textureOut = 0;
    }
  }
  v17 = textureAttributes;
  v18 = v40;
  if (!CVMetalTextureCacheCreateTextureFromImage(0, v16, pixelBuffer, textureAttributes, a3, WidthOfPlane, v14, planeIndex, &textureOut))
  {
    if (&textureOut == (CVMetalTextureRef *)a6)
    {
LABEL_51:
      v22 = 0;
      goto LABEL_21;
    }
    if (*(_QWORD *)a6)
    {
      *(_QWORD *)buf = *(_QWORD *)a6;
      v29 = *(_QWORD *)(a6 + 32);
      if (!v29)
        goto LABEL_62;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v29 + 48))(v29, buf);
      *(_QWORD *)a6 = 0;
    }
    *(_QWORD *)a6 = textureOut;
    v30 = *(_QWORD **)(a6 + 32);
    *(_QWORD *)(a6 + 32) = 0;
    if (v30 == (_QWORD *)(a6 + 8))
    {
      v31 = 4;
      v30 = (_QWORD *)(a6 + 8);
    }
    else
    {
      if (!v30)
      {
LABEL_42:
        if (!v41)
        {
          v22 = 0;
          *(_QWORD *)(a6 + 32) = 0;
          goto LABEL_29;
        }
        if (v41 != v40)
        {
          v22 = 0;
          *(_QWORD *)(a6 + 32) = v41;
          goto LABEL_29;
        }
        *(_QWORD *)(a6 + 32) = a6 + 8;
        (*(void (**)(uint64_t, _QWORD *))(v40[0] + 24))((uint64_t)v40, (_QWORD *)(a6 + 8));
        v32 = v41;
        textureOut = 0;
        v41 = 0;
        if (v32 == v40)
        {
          v33 = 4;
          v32 = v40;
        }
        else
        {
          if (!v32)
          {
            v22 = 0;
            goto LABEL_29;
          }
          v33 = 5;
        }
        (*(void (**)(void))(*v32 + 8 * v33))();
        goto LABEL_51;
      }
      v31 = 5;
    }
    (*(void (**)(void))(*v30 + 8 * v31))();
    goto LABEL_42;
  }
  v19 = atomic_load((unsigned __int8 *)&qword_1EF921288);
  if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
  {
    qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
    __cxa_guard_release(&qword_1EF921288);
  }
  v20 = (id)qword_1EF921280;
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1C9870000, v20, OS_LOG_TYPE_ERROR, "Could not create texture from image", buf, 2u);
  }
LABEL_20:

  v22 = 6;
  v17 = textureAttributes;
LABEL_21:
  v26 = v41;
  if (!textureOut)
    goto LABEL_24;
  *(_QWORD *)buf = textureOut;
  if (v41)
  {
    (*(void (**)(void))(*v41 + 48))();
    textureOut = 0;
    v26 = v41;
LABEL_24:
    if (v26 == v40)
    {
      v27 = 4;
    }
    else
    {
      if (!v26)
      {
LABEL_29:

        return v22;
      }
      v27 = 5;
      v18 = v26;
    }
    (*(void (**)(_QWORD *))(*v18 + 8 * v27))(v18);
    goto LABEL_29;
  }
LABEL_62:
  result = sub_1C9889C1C();
  __break(1u);
  return result;
}

void sub_1C98A3FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_1C9893BA8((uint64_t *)va);

  _Unwind_Resume(a1);
}

uint64_t sub_1C98A4068(id *a1, void *a2, uint64_t a3, int a4, id *a5)
{
  id v9;
  void *v10;
  id v11;
  int v12;
  uint64_t v13;
  unsigned __int8 v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  NSObject *v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  NSObject *v25;
  int v27;
  const char *v28;
  __int16 v29;
  const char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v9 = a2;
  v10 = v9;
  if (v9)
  {
    if (a4)
    {
      objc_msgSend(v9, "lockWithOptions:seed:", 0, 0);
      v11 = objc_retainAutorelease(v10);
      bzero((void *)objc_msgSend(v11, "baseAddress"), objc_msgSend(v11, "allocationSize"));
      objc_msgSend(v11, "unlockWithOptions:seed:", 0, 0);
    }
    v12 = objc_msgSend(v10, "pixelFormat");
    if (v12 == 1278226536)
    {
      v13 = 25;
      goto LABEL_12;
    }
    if (v12 == 1278226534)
    {
      v13 = 55;
LABEL_12:
      v17 = objc_msgSend(v10, "width");
      v18 = objc_msgSend(v10, "height");
      objc_msgSend(MEMORY[0x1E0CC6BB0], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", v13, v17, v18, 0);
      v15 = objc_claimAutoreleasedReturnValue();
      -[NSObject setUsage:](v15, "setUsage:", a3);
      v19 = (void *)objc_msgSend(*a1, "newTextureWithDescriptor:iosurface:plane:", v15, v10, 0);
      v20 = v19;
      if (v19)
      {
        v21 = v19;
        if (-[NSObject iosurface](v21, "iosurface"))
        {
          objc_storeStrong(a5, v20);
          v16 = 0;
        }
        else
        {
          v24 = atomic_load((unsigned __int8 *)&qword_1EF921288);
          if ((v24 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
          {
            qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
            __cxa_guard_release(&qword_1EF921288);
          }
          v25 = (id)qword_1EF921280;
          if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
          {
            LOWORD(v27) = 0;
            _os_log_error_impl(&dword_1C9870000, v25, OS_LOG_TYPE_ERROR, "Precondition violated: texture.iosurface", (uint8_t *)&v27, 2u);
          }

          v16 = 1;
        }
      }
      else
      {
        v23 = atomic_load((unsigned __int8 *)&qword_1EF921288);
        if ((v23 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
        {
          qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
          __cxa_guard_release(&qword_1EF921288);
        }
        v21 = (id)qword_1EF921280;
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          LOWORD(v27) = 0;
          v16 = 2;
          _os_log_error_impl(&dword_1C9870000, v21, OS_LOG_TYPE_ERROR, "Assertion failed: texture", (uint8_t *)&v27, 2u);
        }
        else
        {
          v16 = 2;
        }
      }

      goto LABEL_27;
    }
    v22 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v22 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v15 = (id)qword_1EF921280;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v27 = 136315394;
      v28 = "Operation is not implemented yet";
      v29 = 2080;
      v30 = "Operation is not implemented yet";
      _os_log_error_impl(&dword_1C9870000, v15, OS_LOG_TYPE_ERROR, "Running MTLPixelFormatFromCVPixelFormat(surface.pixelFormat, format) failed with %s, returning %s", (uint8_t *)&v27, 0x16u);
    }
    v16 = 4;
  }
  else
  {
    v14 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v15 = (id)qword_1EF921280;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v27) = 0;
      _os_log_error_impl(&dword_1C9870000, v15, OS_LOG_TYPE_ERROR, "Precondition violated: surface", (uint8_t *)&v27, 2u);
    }
    v16 = 1;
  }
LABEL_27:

  return v16;
}

void sub_1C98A4484(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t sub_1C98A44C8(void *a1, void *a2, int a3, int a4)
{
  id v7;
  id v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  NSObject *v13;
  _QWORD v15[3];
  _QWORD v16[3];
  uint8_t buf[16];

  v7 = a1;
  v8 = a2;
  v9 = objc_msgSend(v8, "threadExecutionWidth");
  v10 = objc_msgSend(v8, "maxTotalThreadsPerThreadgroup");
  if (v9 - 1 >= v10)
  {
    v12 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v13 = (id)qword_1EF921280;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1C9870000, v13, OS_LOG_TYPE_ERROR, "threadsPerGroup looks strange", buf, 2u);
    }

    v11 = 2;
  }
  else
  {
    v16[0] = a3;
    v16[1] = a4;
    v16[2] = 1;
    v15[0] = v9;
    v15[1] = v10 / v9;
    v15[2] = 1;
    objc_msgSend(v7, "dispatchThreads:threadsPerThreadgroup:", v16, v15);
    v11 = 0;
  }

  return v11;
}

void sub_1C98A460C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C98A462C()
{
  JUMPOUT(0x1CAA44AFCLL);
}

_QWORD *sub_1C98A4640()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E8295290;
  return result;
}

void sub_1C98A4664(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E8295290;
}

void sub_1C98A467C(uint64_t a1, CFTypeRef *a2)
{
  if (*a2)
    CFRelease(*a2);
}

uint64_t sub_1C98A468C(id *a1, void *a2)
{
  id v4;
  uint64_t v5;
  unsigned __int8 v6;
  NSObject *v7;
  uint8_t v9[16];

  v4 = a2;
  if (v4)
  {
    objc_storeStrong(a1, a2);
    v5 = 0;
  }
  else
  {
    v6 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v7 = (id)qword_1EF921280;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v9 = 0;
      _os_log_error_impl(&dword_1C9870000, v7, OS_LOG_TYPE_ERROR, "Precondition violated: device", v9, 2u);
    }

    v5 = 1;
  }

  return v5;
}

void sub_1C98A477C(void **a1, unint64_t a2)
{
  _OWORD *v4;
  _BYTE *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  _OWORD *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;

  v4 = a1[1];
  v5 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)v4) >> 4) >= a2)
  {
    if (a2)
    {
      v11 = &v4[3 * a2];
      do
      {
        v4[1] = 0uLL;
        v4[2] = 0uLL;
        *v4 = 0uLL;
        *((_QWORD *)v4 + 2) = 0x7FF8000000000000;
        v4 += 3;
      }
      while (v4 != v11);
      v4 = v11;
    }
    a1[1] = v4;
  }
  else
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * (((char *)v4 - (_BYTE *)*a1) >> 4);
    v7 = v6 + a2;
    if (v6 + a2 > 0x555555555555555)
      abort();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 4);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x2AAAAAAAAAAAAAALL)
      v9 = 0x555555555555555;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 > 0x555555555555555)
        sub_1C9899D30();
      v10 = (char *)operator new(48 * v9);
    }
    else
    {
      v10 = 0;
    }
    v12 = &v10[48 * v6];
    v13 = &v12[48 * a2];
    v14 = v12;
    do
    {
      *((_OWORD *)v14 + 1) = 0uLL;
      *((_OWORD *)v14 + 2) = 0uLL;
      *(_OWORD *)v14 = 0uLL;
      *((_QWORD *)v14 + 2) = 0x7FF8000000000000;
      v14 += 48;
    }
    while (v14 != v13);
    v15 = &v10[48 * v9];
    v17 = (char *)*a1;
    v16 = (char *)a1[1];
    if (v16 != *a1)
    {
      do
      {
        v18 = *((_OWORD *)v16 - 3);
        v19 = *((_OWORD *)v16 - 1);
        *((_OWORD *)v12 - 2) = *((_OWORD *)v16 - 2);
        *((_OWORD *)v12 - 1) = v19;
        *((_OWORD *)v12 - 3) = v18;
        v12 -= 48;
        v16 -= 48;
      }
      while (v16 != v17);
      v16 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v13;
    a1[2] = v15;
    if (v16)
      operator delete(v16);
  }
}

float sub_1C98A48FC(float *a1)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  BOOL v10;
  unsigned __int8 v11;
  NSObject *v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  int v20;
  double v21;
  __int16 v22;
  double v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v1 = a1[75] + a1[75];
  v2 = 1.0;
  v10 = v1 < 1.0;
  v3 = (float)((float)((float)(v1 + -1.0) * (float)((float)(v1 + -1.0) + -2.0)) + -1.0) * -0.5;
  v4 = v1 * (float)(v1 * 0.5);
  if (v10)
    v5 = v4;
  else
    v5 = v3;
  v6 = a1[16] - a1[120];
  if (fabsf(v6 + (float)(floorf((float)(v6 + 180.0) / 360.0) * -360.0)) >= 60.0 || fabsf(a1[17]) >= 90.0)
    v2 = 0.0;
  v7 = a1[136];
  v8 = v7 * 22.0;
  v9 = v7 * 17.0;
  v10 = (float)(v7 * 17.0) < (float)(v7 * 22.0) && v8 < 180.0;
  if (v10)
  {
    v14 = a1[122];
    v15 = (float)(v14 - v9) / (float)(v8 - v9);
    if (v15 <= 1.0)
      v16 = (float)(v14 - v9) / (float)(v8 - v9);
    else
      v16 = 1.0;
    v10 = v15 < 0.0;
    v17 = 0.0;
    if (v10)
      v16 = 0.0;
    v18 = (float)(v14 + -180.0) / 20.0;
    if (v18 <= 1.0)
      v17 = 1.0 - v18;
    if (v18 >= 0.0)
      v13 = v17;
    else
      v13 = 1.0;
    if (v13 >= v16)
      v13 = v16;
  }
  else
  {
    v11 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v12 = (id)qword_1EF921280;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      v20 = 134218752;
      v21 = v9;
      v22 = 2048;
      v23 = v8;
      v24 = 2048;
      v25 = 0x4066800000000000;
      v26 = 2048;
      v27 = 0x4069000000000000;
      _os_log_impl(&dword_1C9870000, v12, OS_LOG_TYPE_DEFAULT, "Face distance fadeout thresholds (%f, %f), (%f %f) should be in increasing order.", (uint8_t *)&v20, 0x2Au);
    }

    v13 = 0.0;
  }
  return v5 * (float)(v2 * v13);
}

float sub_1C98A4B58(uint64_t a1)
{
  float v2;
  float32x4_t v3;
  int v4;
  int v5;
  uint64_t v6;
  float32x4_t v7;
  int v8;
  float32x4_t v9;
  float v10;
  float v11;
  float32x2_t v12;
  float32x2_t v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;

  v2 = sub_1C98A48FC((float *)a1);
  v4 = *(_DWORD *)(a1 + 284);
  if (v4)
  {
    if (v4 < 1)
    {
      v7 = 0uLL;
    }
    else
    {
      v5 = *(_DWORD *)(a1 + 280);
      v6 = *(_QWORD *)(a1 + 256);
      v7 = 0uLL;
      v8 = *(_DWORD *)(a1 + 284);
      do
      {
        v3 = *(float32x4_t *)(v6 + 48 * v5);
        v7 = vaddq_f32(v7, v3);
        v5 = (v5 + 1) % (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 264) - v6) >> 4));
        --v8;
      }
      while (v8);
    }
    v3.f32[0] = (float)v4;
    v9 = vdivq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v3.f32, 0));
  }
  else
  {
    v9.i64[0] = 0;
    v9.i32[2] = 0;
  }
  v10 = (float)(fabsf(v9.f32[2]) + -30.0) / 15.0;
  v11 = 1.0 - v10;
  if (v10 > 1.0)
    v11 = 0.0;
  v12 = vdiv_f32(vadd_f32(vabs_f32(*(float32x2_t *)v9.f32), (float32x2_t)0xC1600000C1F00000), (float32x2_t)0x4160000041700000);
  __asm { FMOV            V7.2S, #1.0 }
  v18 = (float32x2_t)vbsl_s8((int8x8_t)vcltz_f32(v12), (int8x8_t)_D7, vbic_s8((int8x8_t)vsub_f32(_D7, v12), (int8x8_t)vcgt_f32(v12, _D7)));
  LODWORD(v19) = vmul_lane_f32(v18, v18, 1).u32[0];
  if (v10 >= 0.0)
    v20 = v11;
  else
    v20 = 1.0;
  v21 = v2 * (float)(v20 * v19);
  v22 = (float)(*(float *)(a1 + 352) + -0.1875) * 8.0;
  v23 = 1.0 - v22;
  if (v22 > 1.0)
    v23 = 0.0;
  if (v22 >= 0.0)
    v24 = v23;
  else
    v24 = 1.0;
  return v21 * v24;
}

uint64_t sub_1C98A4C90(uint64_t a1, float32x2_t *a2, uint64_t a3)
{
  _OWORD *v5;
  uint64_t v6;
  int v7;
  _BOOL4 v8;
  unsigned __int8 v9;
  uint64_t v10;
  NSObject *v11;
  unsigned __int8 v12;
  NSObject *v13;
  double v14;
  float v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  float32x2_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  const char *v32;
  char *v33;
  _BOOL4 v34;
  int v35;
  int v36;
  const char *v37;
  __int16 v38;
  const char *v39;
  _BYTE buf[24];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v5 = (_OWORD *)(a1 + 72);
  if (!*(_BYTE *)(a1 + 216))
  {
    *(_BYTE *)(a1 + 200) = 0;
    *(_BYTE *)(a1 + 208) = 0;
    *v5 = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    v6 = MEMORY[0x1E0CA2E18];
    *(_OWORD *)(a1 + 176) = *MEMORY[0x1E0CA2E18];
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(v6 + 16);
    *(_BYTE *)(a1 + 216) = 1;
  }
  *(_QWORD *)(a1 + 168) = 0x3FA999999999999ALL;
  *(_OWORD *)buf = *(_OWORD *)a3;
  *(_QWORD *)&buf[16] = *(_QWORD *)(a3 + 16);
  v7 = sub_1C98896B0(a1 + 176, (__int128 *)buf);
  v8 = v7 != 0;
  if (v7)
  {
    v9 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v9 & 1) == 0)
    {
      v34 = v7 != 0;
      v35 = __cxa_guard_acquire(&qword_1EF921288);
      v8 = v34;
      if (v35)
      {
        qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
        __cxa_guard_release(&qword_1EF921288);
        v8 = v34;
      }
    }
    v10 = (2 * v8);
    v11 = (id)qword_1EF921280;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      if ((v10 - 1) > 6)
        v32 = "Success, no error";
      else
        v32 = off_1E8296478[(v10 - 1)];
      v36 = 136315394;
      v37 = "Precondition was violated";
      v38 = 2080;
      v39 = v32;
      _os_log_error_impl(&dword_1C9870000, v11, OS_LOG_TYPE_ERROR, "Running m_timeDiff.update(timestamp) failed with %s, returning %s", (uint8_t *)&v36, 0x16u);
    }

    v12 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v13 = (id)qword_1EF921280;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v33 = off_1E8296478[(v10 - 1)];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v33;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v33;
      _os_log_error_impl(&dword_1C9870000, v13, OS_LOG_TYPE_ERROR, "Running m_normalizedLandmarks->update(landmarks, timestamp) failed with %s, returning %s", buf, 0x16u);
    }

  }
  else
  {
    if (*(_BYTE *)(a1 + 208))
    {
      v14 = *(double *)(a1 + 168);
      v15 = 1.0;
      if (v14 > 0.0)
        v15 = 1.0 - exp(-*(double *)(a1 + 200) / v14);
      v16 = vmla_n_f32(*(float32x2_t *)(a1 + 80), vsub_f32(a2[1], *(float32x2_t *)(a1 + 80)), v15);
      v17 = vmla_n_f32(*(float32x2_t *)(a1 + 88), vsub_f32(a2[2], *(float32x2_t *)(a1 + 88)), v15);
      v18 = vmla_n_f32(*(float32x2_t *)(a1 + 96), vsub_f32(a2[3], *(float32x2_t *)(a1 + 96)), v15);
      v19 = vmla_n_f32(*(float32x2_t *)(a1 + 104), vsub_f32(a2[4], *(float32x2_t *)(a1 + 104)), v15);
      v20 = vmla_n_f32(*(float32x2_t *)(a1 + 112), vsub_f32(a2[5], *(float32x2_t *)(a1 + 112)), v15);
      v21 = vmla_n_f32(*(float32x2_t *)(a1 + 120), vsub_f32(a2[6], *(float32x2_t *)(a1 + 120)), v15);
      v22 = vmla_n_f32(*(float32x2_t *)(a1 + 128), vsub_f32(a2[7], *(float32x2_t *)(a1 + 128)), v15);
      v23 = vmla_n_f32(*(float32x2_t *)(a1 + 136), vsub_f32(a2[8], *(float32x2_t *)(a1 + 136)), v15);
      v24 = vmla_n_f32(*(float32x2_t *)(a1 + 144), vsub_f32(a2[9], *(float32x2_t *)(a1 + 144)), v15);
      v25 = vmla_n_f32(*(float32x2_t *)(a1 + 152), vsub_f32(a2[10], *(float32x2_t *)(a1 + 152)), v15);
      v26 = vmla_n_f32(*(float32x2_t *)(a1 + 160), vsub_f32(a2[11], *(float32x2_t *)(a1 + 160)), v15);
      *(float32x2_t *)(a1 + 72) = vmla_n_f32(*(float32x2_t *)(a1 + 72), vsub_f32(*a2, *(float32x2_t *)(a1 + 72)), v15);
      *(float32x2_t *)(a1 + 80) = v16;
      *(float32x2_t *)(a1 + 88) = v17;
      *(float32x2_t *)(a1 + 96) = v18;
      *(float32x2_t *)(a1 + 104) = v19;
      *(float32x2_t *)(a1 + 112) = v20;
      *(float32x2_t *)(a1 + 120) = v21;
      *(float32x2_t *)(a1 + 128) = v22;
      *(float32x2_t *)(a1 + 136) = v23;
      *(float32x2_t *)(a1 + 144) = v24;
      *(float32x2_t *)(a1 + 152) = v25;
      *(float32x2_t *)(a1 + 160) = v26;
    }
    else
    {
      v27 = *(_OWORD *)a2[2].f32;
      *v5 = *(_OWORD *)a2->f32;
      v5[1] = v27;
      v28 = *(_OWORD *)a2[4].f32;
      v29 = *(_OWORD *)a2[6].f32;
      v30 = *(_OWORD *)a2[10].f32;
      v5[4] = *(_OWORD *)a2[8].f32;
      v5[5] = v30;
      v5[2] = v28;
      v5[3] = v29;
    }
    return 0;
  }
  return v10;
}

uint64_t sub_1C98A5008(uint64_t a1, float *a2, uint64_t a3)
{
  int v5;
  _BOOL4 v6;
  unsigned __int8 v7;
  uint64_t v8;
  NSObject *v9;
  double v10;
  float v11;
  float v12;
  const char *v14;
  __int128 v15;
  uint64_t v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  const char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v15 = *(_OWORD *)a3;
  v16 = *(_QWORD *)(a3 + 16);
  v5 = sub_1C98896B0(a1 + 16, &v15);
  v6 = v5 != 0;
  if (v5)
  {
    v7 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v8 = (2 * v6);
    v9 = (id)qword_1EF921280;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      if ((v8 - 1) > 6)
        v14 = "Success, no error";
      else
        v14 = off_1E8296478[(v8 - 1)];
      *(_DWORD *)buf = 136315394;
      v18 = "Precondition was violated";
      v19 = 2080;
      v20 = v14;
      _os_log_error_impl(&dword_1C9870000, v9, OS_LOG_TYPE_ERROR, "Running m_timeDiff.update(timestamp) failed with %s, returning %s", buf, 0x16u);
    }

  }
  else
  {
    if (*(_BYTE *)(a1 + 48))
    {
      v10 = *(double *)(a1 + 8);
      v11 = 1.0;
      if (v10 > 0.0)
        v11 = 1.0 - exp(-*(double *)(a1 + 40) / v10);
      v8 = 0;
      v12 = *(float *)a1 + (float)(v11 * (float)(*a2 - *(float *)a1));
    }
    else
    {
      v8 = 0;
      v12 = *a2;
    }
    *(float *)a1 = v12;
  }
  return v8;
}

void sub_1C98A51CC(uint64_t a1, float32x4_t *a2, float32x4_t a3, double a4, double a5, double a6, float32x4_t a7)
{
  float32x4_t v7;
  Float64 *v9;
  int v10;
  float32x4_t v11;
  int v12;
  int v13;
  uint64_t v14;
  unsigned __int8 v15;
  int v16;
  BOOL v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned __int8 v22;
  unint64_t v23;
  float32x4_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  BOOL v28;
  int v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  size_t v34;
  float32x4_t *v35;
  float32x4_t v36;
  float32x4_t v37;
  float v38;
  float32x4_t v39;
  float32x4_t v40;
  CMTime v41;
  float32x4_t v42;
  float32x4_t v43;
  CMTime v44;
  int v45;
  float32x4_t v46;
  float32x4_t v47;
  CMTime rhs;
  CMTime lhs;
  CMTime v50;
  CMTime v51;

  a7.i32[0] = 1127481344;
  v7 = a7;
  v7.i32[1] = 0;
  v7.i32[2] = *(_DWORD *)(a1 + 480);
  v46 = *a2;
  v47.i64[0] = a2[1].i64[0];
  v47.i32[2] = 1;
  if ((v46.i8[12] & 1) == 0)
    return;
  v9 = (Float64 *)(a1 + 224);
  v10 = *(_DWORD *)(a1 + 248);
  if (v10)
  {
    if (v10 != 1)
    {
      sub_1C98CFB60();
      sub_1C98A5610();
      return;
    }
    if ((*(_BYTE *)(a1 + 236) & 1) == 0)
    {
      v45 = 0;
      v44.value = 0x7FF8000000000000;
      goto LABEL_9;
    }
    v36 = v7;
    v37 = a3;
    *(float32x4_t *)&v41.value = *a2;
    v41.epoch = a2[1].i64[0];
    v51.value = 0;
    *(_QWORD *)&v51.timescale = 0;
    *(_OWORD *)&v51.value = *(_OWORD *)v9;
    v51.epoch = *(_QWORD *)(a1 + 240);
  }
  else
  {
    v36 = v7;
    v37 = a3;
    *(float32x4_t *)&v41.value = *a2;
    v41.epoch = a2[1].i64[0];
    memset(&v51, 0, sizeof(v51));
    CMTimeMakeWithSeconds(&v51, *v9, 1000000);
  }
  memset(&v50, 0, sizeof(v50));
  lhs = v41;
  rhs = v51;
  CMTimeSubtract(&v50, &lhs, &rhs);
  v44 = v50;
  v45 = 1;
  a3 = v37;
  v7 = v36;
LABEL_9:
  v11 = vsubq_f32(a3, v7);
  *(float32x2_t *)v11.f32 = vmla_f32(*(float32x2_t *)v11.f32, (float32x2_t)vdup_n_s32(0xC3B40000), vrndm_f32(vdiv_f32(vadd_f32(*(float32x2_t *)v11.f32, (float32x2_t)vdup_n_s32(0x43340000u)), (float32x2_t)vdup_n_s32(0x43B40000u))));
  v39 = v11;
  v38 = v11.f32[2] + (float)(floorf((float)(v11.f32[2] + 180.0) / 360.0) * -360.0);
  v12 = *(_DWORD *)(a1 + 284);
  if (v12 >= 1)
  {
    v13 = *(_DWORD *)(a1 + 280);
    v14 = *(_QWORD *)(a1 + 256);
    while (1)
    {
      v15 = sub_1C991D1D8(v14 + 48 * v13 + 16, (uint64_t)&v44);
      if (v15 == 129 || ((char)v15 & 0x80000000) == 0)
        break;
      v14 = *(_QWORD *)(a1 + 256);
      v13 = (*(int *)(a1 + 280) + 1) % (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 264) - v14) >> 4));
      *(_DWORD *)(a1 + 280) = v13;
      v16 = *(_DWORD *)(a1 + 284);
      v17 = __OFSUB__(v16, 1);
      v12 = v16 - 1;
      *(_DWORD *)(a1 + 284) = v12;
      if ((v12 < 0) ^ v17 | (v12 == 0))
        goto LABEL_15;
    }
    v12 = *(_DWORD *)(a1 + 284);
    if (!v12)
      goto LABEL_24;
    goto LABEL_18;
  }
LABEL_15:
  if (v12)
  {
LABEL_18:
    if (v12 >= 1)
    {
      v18 = *(int *)(a1 + 280) + (uint64_t)v12;
      v19 = *(_QWORD *)(a1 + 256);
      v20 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 264) - v19) >> 4);
      v21 = (v20 + (int)(~(v18 / v20 * v20) + v18)) % v20;
      do
      {
        v22 = sub_1C991D1D8((uint64_t)&v46, v19 + 48 * (int)v21 + 16);
        v12 = *(_DWORD *)(a1 + 284);
        if (v22 == 129)
          break;
        if (((char)v22 & 0x80000000) == 0)
          break;
        v19 = *(_QWORD *)(a1 + 256);
        v23 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 264) - v19) >> 4);
        v21 = (v23 + ((uint64_t)((v21 << 32) - 0x100000000) >> 32)) % v23;
        v17 = __OFSUB__(v12--, 1);
        *(_DWORD *)(a1 + 284) = v12;
      }
      while (!((v12 < 0) ^ v17 | (v12 == 0)));
    }
  }
LABEL_24:
  v24 = v39;
  v24.f32[2] = v38;
  v40 = v24;
  v25 = v12;
  v26 = *(_QWORD *)(a1 + 256);
  v27 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 264) - v26) >> 4);
  if (v27 == v12)
  {
    v28 = __CFADD__(v12, 1);
    v29 = v12 + 1;
    if (v28)
    {
      v31 = v26 + 48 * v29;
      *(_QWORD *)(a1 + 264) = v31;
    }
    else
    {
      sub_1C98A477C((void **)(a1 + 256), v29 - v25);
      v26 = *(_QWORD *)(a1 + 256);
      v31 = *(_QWORD *)(a1 + 264);
    }
    v32 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 272) - v26) >> 4);
    v33 = 0xAAAAAAAAAAAAAAABLL * ((v31 - v26) >> 4);
    if (v32 <= v33)
    {
      if (v32 < v33)
      {
        v31 = v26 + 16 * ((*(_QWORD *)(a1 + 272) - v26) >> 4);
        *(_QWORD *)(a1 + 264) = v31;
      }
    }
    else
    {
      sub_1C98A477C((void **)(a1 + 256), v32 - v33);
      v26 = *(_QWORD *)(a1 + 256);
      v31 = *(_QWORD *)(a1 + 264);
    }
    v30 = *(_DWORD *)(a1 + 280);
    v12 = *(_DWORD *)(a1 + 284);
    if (v30)
    {
      if (v12 == v30)
      {
        v12 = *(_DWORD *)(a1 + 280);
      }
      else
      {
        v34 = 48 * v12 - 48 * v30;
        memmove((void *)(v31 - v34), (const void *)(v26 + 48 * v30), v34);
        v26 = *(_QWORD *)(a1 + 256);
        v31 = *(_QWORD *)(a1 + 264);
        v12 = *(_DWORD *)(a1 + 284);
        v30 = *(_DWORD *)(a1 + 280);
      }
      v27 = 0xAAAAAAAAAAAAAAABLL * ((v31 - v26) >> 4);
      v30 = v30 - v12 + v27;
      *(_DWORD *)(a1 + 280) = v30;
    }
    else
    {
      v27 = 0xAAAAAAAAAAAAAAABLL * ((v31 - v26) >> 4);
    }
  }
  else
  {
    v30 = *(_DWORD *)(a1 + 280);
  }
  v42 = v46;
  v43 = v47;
  v35 = (float32x4_t *)(v26 + 48 * (int)((v12 + v30) % v27));
  *v35 = v40;
  v35[1] = v42;
  v35[2] = v43;
  ++*(_DWORD *)(a1 + 284);
}

uint64_t sub_1C98A5610()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF921288);
  v1 = &unk_1EF921000;
  if ((v0 & 1) == 0)
  {
    v3 = __cxa_guard_acquire(&qword_1EF921288);
    v1 = (_QWORD *)&unk_1EF921000;
    if (v3)
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
      v1 = (_QWORD *)&unk_1EF921000;
    }
  }
  return v1[80];
}

void sub_1C98A5774(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C98A5B20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  _Unwind_Resume(a1);
}

void sub_1C98A5FAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

uint64_t sub_1C98A6094(void **a1, void *a2, void *a3, void *a4, void *a5, simd_float3x3 *a6, void *a7, void *a8)
{
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  simd_float3 v27;
  simd_float3 v28;
  uint64_t v29;
  simd_float3 v30;
  unint64_t v31;
  float32x2_t v32;
  unint64_t v33;
  unint64_t v34;
  float32x2_t v35;
  void *v36;
  float32x2_t v37;
  double v38;
  double v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  float v43;
  float v44;
  unsigned int v45;
  float v46;
  uint64_t v47;
  unsigned int v48;
  float v49;
  float v50;
  unsigned int v51;
  uint64_t v52;
  int v53;
  float v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  float v58;
  uint64_t v59;
  void *v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int v63;
  NSObject *v64;
  char *v65;
  char *v66;
  unsigned __int8 v67;
  NSObject *v68;
  unsigned __int8 v69;
  unsigned __int8 v71;
  uint64_t v72;
  NSObject *v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD v80[3];
  _QWORD v81[3];
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD v85[3];
  _QWORD v86[3];
  _QWORD v87[3];
  unint64_t v88[2];
  simd_float3x3 v89;
  _BYTE buf[22];
  float32x2_t v91[7];

  v91[4] = *(float32x2_t *)MEMORY[0x1E0C80C00];
  v15 = a2;
  v16 = a3;
  v17 = a4;
  v18 = a5;
  v19 = a8;
  v20 = v19;
  if (!v15 || !v16 || !v17 || !v18 || !v19)
  {
    v67 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v67 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v68 = (id)qword_1EF921280;
    if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
    {
      v89.columns[0].i16[0] = 0;
      _os_log_error_impl(&dword_1C9870000, v68, OS_LOG_TYPE_ERROR, "Inputs must not be nil", (uint8_t *)&v89, 2u);
    }
    goto LABEL_44;
  }
  if (!objc_msgSend(v15, "width")
    || !objc_msgSend(v15, "height")
    || (v21 = objc_msgSend(v15, "width"), v21 != 2 * objc_msgSend(v16, "width"))
    || (v22 = objc_msgSend(v15, "height"), v22 != 2 * objc_msgSend(v16, "height")))
  {
    v69 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v69 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v68 = (id)qword_1EF921280;
    if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
    {
      v89.columns[0].i16[0] = 0;
      _os_log_error_impl(&dword_1C9870000, v68, OS_LOG_TYPE_ERROR, "YCBCr texture sizes invalid / not matching", (uint8_t *)&v89, 2u);
    }
    goto LABEL_44;
  }
  if (!objc_msgSend(v17, "width")
    || !objc_msgSend(v17, "height")
    || (v23 = objc_msgSend(v17, "width"), v23 != objc_msgSend(v18, "width"))
    || (v24 = objc_msgSend(v17, "height"), v24 != objc_msgSend(v18, "height")))
  {
    v71 = atomic_load((unsigned __int8 *)&qword_1EF921288);
    if ((v71 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921288))
    {
      qword_1EF921280 = (uint64_t)os_log_create("com.apple.AppleCVA", "ViewpointCorrection");
      __cxa_guard_release(&qword_1EF921288);
    }
    v68 = (id)qword_1EF921280;
    if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
    {
      v89.columns[0].i16[0] = 0;
      _os_log_error_impl(&dword_1C9870000, v68, OS_LOG_TYPE_ERROR, "Flow texture sizes invalid / not matching", (uint8_t *)&v89, 2u);
    }
    goto LABEL_44;
  }
  v25 = objc_msgSend(v17, "width");
  if (v25 != objc_msgSend(v17, "height"))
  {
    sub_1C98A5610();
    v68 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
    {
      v89.columns[0].i16[0] = 0;
      _os_log_error_impl(&dword_1C9870000, v68, OS_LOG_TYPE_ERROR, "Currently we only support square flows", (uint8_t *)&v89, 2u);
    }
LABEL_44:

    v62 = 1;
    goto LABEL_45;
  }
  v89 = __invert_f3(*a6);
  v26 = (_OWORD *)objc_msgSend(a7, "contents");
  v27 = a6->columns[0];
  v28 = a6->columns[2];
  v26[2] = a6->columns[1];
  v26[3] = v28;
  v26[1] = v27;
  v29 = objc_msgSend(a7, "contents");
  v30 = v89.columns[1];
  *(simd_float3 *)(v29 + 64) = v89.columns[0];
  *(simd_float3 *)(v29 + 80) = v30;
  *(simd_float3 *)(v29 + 96) = v89.columns[2];
  v91[0] = 0;
  v31 = objc_msgSend(v17, "height");
  v32.i32[0] = 0;
  v32.f32[1] = (float)v31;
  v91[1] = v32;
  v33 = objc_msgSend(v17, "width");
  v34 = objc_msgSend(v17, "height");
  v35.f32[0] = (float)v33;
  v35.f32[1] = (float)v34;
  v91[2] = v35;
  v91[3] = (float32x2_t)COERCE_UNSIGNED_INT((float)(unint64_t)objc_msgSend(v17, "width"));
  sub_1C98A6CBC((float32x2_t **)buf, 4uLL, v91, (float32x4_t *)&v89);
  v36 = *(void **)buf;
  sub_1C98A69C4(v88, *(unint64_t *)buf, *(uint64_t *)&buf[8]);
  *(float32x2_t *)&v40 = sub_1C98A2754(v88[0], (float32x2_t *)v88[1], v37, v38, v39);
  v42 = v41;
  v44 = v43;
  if (v36)
    operator delete(v36);
  v45 = objc_msgSend(v15, "width", v40);
  v46 = floorf(fmaxf(*(float *)&v42, 0.0) * 0.5);
  LODWORD(v47) = (float)(v46 + v46);
  if (v45 >= v47)
    v47 = v47;
  else
    v47 = v45;
  v79 = v47;
  v48 = objc_msgSend(v15, "height");
  v49 = *((float *)&v42 + 1);
  v50 = floorf(fmaxf(*((float *)&v42 + 1), 0.0) * 0.5);
  v51 = (float)(v50 + v50);
  if (v48 >= v51)
    v52 = v51;
  else
    v52 = v48;
  *(_QWORD *)objc_msgSend(a7, "contents") = __PAIR64__(v52, v79);
  v53 = objc_msgSend(v15, "width");
  v54 = ceilf(fmaxf((float)(*(float *)&v42 + v44) - (float)v79, 0.0) * 0.5);
  v55 = (float)(v54 + v54);
  if (v53 - (int)v79 >= v55)
    v56 = v55;
  else
    v56 = (v53 - v79);
  v57 = objc_msgSend(v15, "height");
  v58 = ceilf(fmaxf((float)(v44 + v49) - (float)v52, 0.0) * 0.5);
  LODWORD(v59) = (float)(v58 + v58);
  if (v57 - (int)v52 >= v59)
    v59 = v59;
  else
    v59 = (v57 - v52);
  v78 = v59;
  if ((_DWORD)v59 * (_DWORD)v56)
  {
    v76 = (uint64_t *)(a1 + 2);
    sub_1C98A390C((id *)a1[1], v15, a1 + 2);
    v75 = (uint64_t *)(a1 + 3);
    sub_1C98A390C((id *)a1[1], v16, a1 + 3);
    objc_msgSend(v20, "computeCommandEncoder");
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v60, "setLabel:", CFSTR("FlowWarper"));
    if (v60)
    {
      objc_msgSend(v60, "setComputePipelineState:", *a1);
      objc_msgSend(v60, "setTexture:atIndex:", v15, 0);
      objc_msgSend(v60, "setTexture:atIndex:", v16, 1);
      objc_msgSend(v60, "setTexture:atIndex:", *v76, 2);
      objc_msgSend(v60, "setTexture:atIndex:", *v75, 3);
      objc_msgSend(v60, "setTexture:atIndex:", v17, 4);
      objc_msgSend(v60, "setTexture:atIndex:", v18, 5);
      objc_msgSend(v60, "setBuffer:offset:atIndex:", a7, 0, 0);
      v74 = v56;
      v61 = sub_1C98A44C8(v60, *a1, v56, v78);
      if (v61 == 1)
        v62 = 2;
      else
        v62 = v61;
      if (v61)
      {
        v63 = v61 - 1;
        sub_1C98A5610();
        v64 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
        {
          v65 = off_1E8296478[v63];
          v66 = off_1E8296478[(v62 - 1)];
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v65;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v66;
          _os_log_error_impl(&dword_1C9870000, v64, OS_LOG_TYPE_ERROR, "Running m_metalHelpers->runComputeEncoder(computeEncoder, m_pipeline, cropWidth, cropHeight) failed with %s, returning %s", buf, 0x16u);
        }
        goto LABEL_59;
      }
      objc_msgSend(v60, "endEncoding");
      objc_msgSend(v20, "blitCommandEncoder");
      v64 = objc_claimAutoreleasedReturnValue();
      -[NSObject setLabel:](v64, "setLabel:", CFSTR("TextureCopy"));
      if (v64)
      {
        v72 = *v76;
        v87[0] = v79;
        v87[1] = v52;
        v87[2] = 0;
        v86[0] = v74;
        v86[1] = v78;
        v86[2] = objc_msgSend(v15, "depth");
        v85[0] = v79;
        v85[1] = v52;
        v85[2] = 0;
        -[NSObject copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:](v64, "copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:", v72, 0, 0, v87, v86, v15, 0, 0, v85);
        v77 = *v75;
        v82 = v79 >> 1;
        v83 = v52 >> 1;
        v84 = 0;
        v81[0] = v74 >> 1;
        v81[1] = v78 >> 1;
        v81[2] = objc_msgSend(v16, "depth");
        v80[0] = v82;
        v80[1] = v83;
        v80[2] = 0;
        -[NSObject copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:](v64, "copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:", v77, 0, 0, &v82, v81, v16, 0, 0, v80);
        -[NSObject endEncoding](v64, "endEncoding");
        v62 = 0;
        goto LABEL_59;
      }
      sub_1C98A5610();
      v73 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_1C9870000, v73, OS_LOG_TYPE_ERROR, "Could not create blitCommandEncoder", buf, 2u);
      }

      v64 = 0;
    }
    else
    {
      sub_1C98A5610();
      v64 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_1C9870000, v64, OS_LOG_TYPE_ERROR, "Could not create computeCommandEncoder", buf, 2u);
      }
    }
    v62 = 6;
LABEL_59:

    goto LABEL_45;
  }
  v62 = 0;
LABEL_45:

  return v62;
}

void sub_1C98A6954(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

unint64_t *sub_1C98A69C4(unint64_t *result, unint64_t a2, uint64_t a3)
{
  if ((uint64_t)(a3 - a2) < 0 || (*result = (a3 - a2) >> 3, (result[1] = a2) == 0) && a3)
    sub_1C9893464();
  return result;
}

double sub_1C98A69F0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  float *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  double result;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  float v14;

  if (a2[1] == a1)
  {
    v14 = 0.0;
    v12 = 0u;
    v13 = 0u;
    sub_1C98A69F0(&v12, a2);
    result = *(double *)&v12;
    v11 = v13;
    *(_OWORD *)a1 = v12;
    *(_OWORD *)(a1 + 16) = v11;
    *(float *)(a1 + 32) = v14;
  }
  else
  {
    v4 = *a2;
    v12 = 0u;
    v13 = 0u;
    v14 = 0.0;
    result = sub_1C98A6B5C((uint64_t)&v12, v4);
    v5 = (float *)a2[1];
    v6 = v12;
    v7 = *((_QWORD *)&v13 + 1);
    *(float *)a1 = (float)((float)((float)(*(float *)&v12 * *v5) + 0.0) + (float)(*((float *)&v12 + 3) * v5[1]))
                 + (float)(*((float *)&v13 + 2) * v5[2]);
    v8 = v13;
    *(float *)(a1 + 4) = (float)((float)((float)(*((float *)&v6 + 1) * *v5) + 0.0) + (float)(*(float *)&v13 * v5[1]))
                       + (float)(*((float *)&v7 + 1) * v5[2]);
    v9 = v14;
    *(float *)(a1 + 8) = (float)((float)((float)(*((float *)&v6 + 2) * *v5) + 0.0) + (float)(*((float *)&v8 + 1) * v5[1]))
                       + (float)(v14 * v5[2]);
    *(float *)(a1 + 12) = (float)((float)((float)(*(float *)&v6 * v5[3]) + 0.0) + (float)(*((float *)&v6 + 3) * v5[4]))
                        + (float)(*(float *)&v7 * v5[5]);
    *(float *)(a1 + 16) = (float)((float)((float)(*((float *)&v6 + 1) * v5[3]) + 0.0) + (float)(*(float *)&v8 * v5[4]))
                        + (float)(*((float *)&v7 + 1) * v5[5]);
    *(float *)(a1 + 20) = (float)((float)((float)(*((float *)&v6 + 2) * v5[3]) + 0.0)
                                + (float)(*((float *)&v8 + 1) * v5[4]))
                        + (float)(v9 * v5[5]);
    *(float *)(a1 + 24) = (float)((float)((float)(*(float *)&v6 * v5[6]) + 0.0) + (float)(*((float *)&v6 + 3) * v5[7]))
                        + (float)(*(float *)&v7 * v5[8]);
    *(float *)(a1 + 28) = (float)((float)((float)(*((float *)&v6 + 1) * v5[6]) + 0.0) + (float)(*(float *)&v8 * v5[7]))
                        + (float)(*((float *)&v7 + 1) * v5[8]);
    *(float *)&result = (float)((float)((float)(*((float *)&v6 + 2) * v5[6]) + 0.0)
                              + (float)(*((float *)&v8 + 1) * v5[7]))
                      + (float)(v9 * v5[8]);
    *(_DWORD *)(a1 + 32) = LODWORD(result);
  }
  return result;
}

double sub_1C98A6B5C(uint64_t a1, uint64_t a2)
{
  float *v3;
  float **v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  double result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  float v13;

  v3 = *(float **)(a2 + 8);
  if (v3 == (float *)a1)
  {
    v13 = 0.0;
    v11 = 0u;
    v12 = 0u;
    sub_1C98A6B5C(&v11);
    result = *(double *)&v11;
    v10 = v12;
    *(_OWORD *)a1 = v11;
    *(_OWORD *)(a1 + 16) = v10;
    *(float *)(a1 + 32) = v13;
  }
  else
  {
    v4 = *(float ***)a2;
    v11 = 0u;
    v12 = 0u;
    v13 = 0.0;
    result = sub_1C98A24C0((uint64_t)&v11, v4);
    v5 = v11;
    v6 = *((_QWORD *)&v12 + 1);
    *(float *)a1 = (float)((float)((float)(*(float *)&v11 * *v3) + 0.0) + (float)(*((float *)&v11 + 3) * v3[1]))
                 + (float)(*((float *)&v12 + 2) * v3[2]);
    v7 = v12;
    *(float *)(a1 + 4) = (float)((float)((float)(*((float *)&v5 + 1) * *v3) + 0.0) + (float)(*(float *)&v12 * v3[1]))
                       + (float)(*((float *)&v6 + 1) * v3[2]);
    v8 = v13;
    *(float *)(a1 + 8) = (float)((float)((float)(*((float *)&v5 + 2) * *v3) + 0.0) + (float)(*((float *)&v7 + 1) * v3[1]))
                       + (float)(v13 * v3[2]);
    *(float *)(a1 + 12) = (float)((float)((float)(*(float *)&v5 * v3[3]) + 0.0) + (float)(*((float *)&v5 + 3) * v3[4]))
                        + (float)(*(float *)&v6 * v3[5]);
    *(float *)(a1 + 16) = (float)((float)((float)(*((float *)&v5 + 1) * v3[3]) + 0.0) + (float)(*(float *)&v7 * v3[4]))
                        + (float)(*((float *)&v6 + 1) * v3[5]);
    *(float *)(a1 + 20) = (float)((float)((float)(*((float *)&v5 + 2) * v3[3]) + 0.0)
                                + (float)(*((float *)&v7 + 1) * v3[4]))
                        + (float)(v8 * v3[5]);
    *(float *)(a1 + 24) = (float)((float)((float)(*(float *)&v5 * v3[6]) + 0.0) + (float)(*((float *)&v5 + 3) * v3[7]))
                        + (float)(*(float *)&v6 * v3[8]);
    *(float *)(a1 + 28) = (float)((float)((float)(*((float *)&v5 + 1) * v3[6]) + 0.0) + (float)(*(float *)&v7 * v3[7]))
                        + (float)(*((float *)&v6 + 1) * v3[8]);
    *(float *)&result = (float)((float)((float)(*((float *)&v5 + 2) * v3[6]) + 0.0)
                              + (float)(*((float *)&v7 + 1) * v3[7]))
                      + (float)(v8 * v3[8]);
    *(_DWORD *)(a1 + 32) = LODWORD(result);
  }
  return result;
}

void sub_1C98A6CBC(float32x2_t **a1, unint64_t a2, float32x2_t *a3, float32x4_t *a4)
{
  unint64_t v4;
  uint64_t v8;
  float32x2_t *v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x2_t v13;
  int32x4_t v14;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    v4 = a2;
    if (a2 >> 61)
      abort();
    v8 = a2;
    v9 = (float32x2_t *)operator new(8 * a2);
    *a1 = v9;
    a1[2] = &v9[v8];
    bzero(v9, 8 * v4);
    a1[1] = &v9[v8];
    v10 = *a4;
    v11 = a4[1];
    v12 = a4[2];
    do
    {
      v13 = *a3++;
      v14 = (int32x4_t)vaddq_f32(v12, vmlaq_lane_f32(vmulq_n_f32(v10, v13.f32[0]), v11, v13, 1));
      *v9++ = vdiv_f32(*(float32x2_t *)v14.i8, (float32x2_t)vdup_laneq_s32(v14, 2));
      --v4;
    }
    while (v4);
  }
}

void sub_1C98A6D68(void ***a1, uint64_t *a2)
{
  void **v3;
  char *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 *v18;
  unsigned __int8 v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  char *v30;
  __int128 v31;
  char *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  __int128 v44;
  __int128 v45;

  v3 = *a1;
  v4 = (char *)**a1;
  v5 = (char *)(*a1)[1];
  v6 = (v5 - v4) >> 4;
  if (v6 >= *((unsigned int *)*a1 + 6))
  {
    DWORD2(v45) = 0;
    *(_QWORD *)&v44 = 0x7FF8000000000000;
    if (v5 != v4)
    {
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v5 = v4;
      while (1)
      {
        v17 = **(_QWORD **)&v5[v13];
        if (*(_QWORD *)(v17 + 24) != *(_QWORD *)(v17 + 32))
        {
          v18 = (__int128 *)(v17 + 88);
          if (DWORD2(v45))
          {
            if (DWORD2(v45) != 1)
            {
              sub_1C98CFB60();
LABEL_53:
              abort();
            }
            if ((BYTE12(v44) & 1) == 0)
              goto LABEL_9;
          }
          v19 = sub_1C991D1D8((uint64_t)v18, (uint64_t)&v44);
          if (v19 != 129 && (char)v19 < 0)
          {
LABEL_9:
            v16 = v18[1];
            v44 = *v18;
            v45 = v16;
            v14 = v15;
          }
        }
        ++v15;
        v5 = (char *)**a1;
        v13 += 16;
        if (v15 >= ((_BYTE *)(*a1)[1] - v5) >> 4)
          goto LABEL_39;
      }
    }
    v14 = 0;
LABEL_39:
    v36 = &v5[16 * v14];
    v38 = *a2;
    v37 = a2[1];
    if (v37)
    {
      v39 = (unint64_t *)(v37 + 8);
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    v41 = (std::__shared_weak_count *)*((_QWORD *)v36 + 1);
    *(_QWORD *)v36 = v38;
    *((_QWORD *)v36 + 1) = v37;
    if (v41)
    {
      p_shared_owners = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldaxr(p_shared_owners);
      while (__stlxr(v43 - 1, p_shared_owners));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
  }
  else
  {
    v7 = (char *)v3[2];
    if (v5 >= v7)
    {
      v20 = v6 + 1;
      if ((v6 + 1) >> 60)
        goto LABEL_53;
      v21 = v7 - v4;
      if (v21 >> 3 > v20)
        v20 = v21 >> 3;
      v22 = (unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0;
      v23 = 0xFFFFFFFFFFFFFFFLL;
      if (!v22)
        v23 = v20;
      if (v23 >> 60)
        sub_1C9899D30();
      v24 = 16 * v23;
      v25 = (char *)operator new(16 * v23);
      v26 = &v25[16 * v6];
      v27 = *(_OWORD *)a2;
      *(_OWORD *)v26 = *(_OWORD *)a2;
      if (*((_QWORD *)&v27 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
        v4 = (char *)*v3;
        v5 = (char *)v3[1];
      }
      v30 = &v25[v24];
      v11 = v26 + 16;
      if (v5 == v4)
      {
        *v3 = v26;
        v3[1] = v11;
        v3[2] = v30;
      }
      else
      {
        do
        {
          v31 = *((_OWORD *)v5 - 1);
          v5 -= 16;
          *((_OWORD *)v26 - 1) = v31;
          v26 -= 16;
          *(_QWORD *)v5 = 0;
          *((_QWORD *)v5 + 1) = 0;
        }
        while (v5 != v4);
        v4 = (char *)*v3;
        v32 = (char *)v3[1];
        *v3 = v26;
        v3[1] = v11;
        v3[2] = v30;
        while (v32 != v4)
        {
          v33 = (std::__shared_weak_count *)*((_QWORD *)v32 - 1);
          if (v33)
          {
            v34 = (unint64_t *)&v33->__shared_owners_;
            do
              v35 = __ldaxr(v34);
            while (__stlxr(v35 - 1, v34));
            if (!v35)
            {
              ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
              std::__shared_weak_count::__release_weak(v33);
            }
          }
          v32 -= 16;
        }
      }
      if (v4)
        operator delete(v4);
    }
    else
    {
      *(_QWORD *)v5 = *a2;
      v8 = a2[1];
      *((_QWORD *)v5 + 1) = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      v11 = v5 + 16;
    }
    v3[1] = v11;
  }
}

void sub_1C98A7024(_QWORD *a1, unint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  __int128 *v27;
  __int128 v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  BOOL v35;
  __int128 v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  __int128 *v46;
  __int128 v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  BOOL v57;
  _QWORD *v58;
  _QWORD *v59;
  __int128 v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  __int128 v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  int64_t v71;
  int64_t v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  __int128 v76;
  _QWORD *v77;
  _QWORD *v78;
  __int128 v79;
  std::__shared_weak_count *v80;
  unint64_t *p_shared_owners;
  unint64_t v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  __int128 v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  _QWORD *v110;
  __int128 v111;
  _QWORD *v112;
  _QWORD *v113;
  __int128 v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  unint64_t *v121;
  _QWORD *v122;
  __int128 v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  int64_t v140;
  uint64_t v141;
  __int128 v142;
  __int128 v143;

LABEL_1:
  v8 = a1;
  v9 = (uint64_t)(a1 + 2);
  v135 = (uint64_t)(a1 + 4);
  while (2)
  {
    v10 = a2 - (_QWORD)v8;
    v11 = (uint64_t)(a2 - (_QWORD)v8) >> 4;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if ((char)sub_1C991D1D8(**(_QWORD **)(a2 - 16) + 88, *(_QWORD *)*v8 + 88) >= 1)
        {
          v54 = (_QWORD *)*v8;
          *v8 = *(_QWORD *)(a2 - 16);
          *(_QWORD *)(a2 - 16) = v54;
          v55 = v8[1];
          v8[1] = *(_QWORD *)(a2 - 8);
          *(_QWORD *)(a2 - 8) = v55;
        }
        return;
      case 3uLL:
        sub_1C98A7DA0((uint64_t)v8, v9, a2 - 16);
        return;
      case 4uLL:
        sub_1C98A7F10((uint64_t)v8, v9, v135, a2 - 16);
        return;
      case 5uLL:
        sub_1C98A801C((uint64_t)v8, v9, v135, (uint64_t)(v8 + 6), a2 - 16);
        return;
      default:
        if (v10 > 383)
        {
          if (!a3)
          {
            if (v8 == (_QWORD *)a2)
              return;
            v134 = (_QWORD *)a2;
            v71 = (v11 - 2) >> 1;
            v140 = v71;
            do
            {
              v72 = v71;
              if (v140 >= v71)
              {
                v73 = (2 * v71) | 1;
                v74 = &v8[2 * v73];
                if (2 * v71 + 2 < (uint64_t)v11
                  && (char)sub_1C991D1D8(*(_QWORD *)*v74 + 88, *(_QWORD *)v74[2] + 88) > 0)
                {
                  v74 += 2;
                  v73 = 2 * v72 + 2;
                }
                v75 = &v8[2 * v72];
                if ((char)sub_1C991D1D8(*(_QWORD *)*v74 + 88, *(_QWORD *)*v75 + 88) <= 0)
                {
                  v76 = *(_OWORD *)v75;
                  *v75 = 0;
                  v75[1] = 0;
                  v136 = v76;
                  v77 = (_QWORD *)v76;
                  do
                  {
                    v78 = v74;
                    v79 = *(_OWORD *)v74;
                    *v74 = 0;
                    v74[1] = 0;
                    v80 = (std::__shared_weak_count *)v75[1];
                    *(_OWORD *)v75 = v79;
                    if (v80)
                    {
                      p_shared_owners = (unint64_t *)&v80->__shared_owners_;
                      do
                        v82 = __ldaxr(p_shared_owners);
                      while (__stlxr(v82 - 1, p_shared_owners));
                      if (!v82)
                      {
                        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                        std::__shared_weak_count::__release_weak(v80);
                      }
                    }
                    if (v140 < v73)
                      break;
                    v83 = (2 * v73) | 1;
                    v74 = &v8[2 * v83];
                    if (2 * v73 + 2 < (uint64_t)v11
                      && (char)sub_1C991D1D8(*(_QWORD *)*v74 + 88, *(_QWORD *)v74[2] + 88) > 0)
                    {
                      v74 += 2;
                      v83 = 2 * v73 + 2;
                    }
                    v75 = v78;
                    v73 = v83;
                  }
                  while ((char)sub_1C991D1D8(*(_QWORD *)*v74 + 88, *v77 + 88) < 1);
                  v84 = (std::__shared_weak_count *)v78[1];
                  *(_OWORD *)v78 = v136;
                  if (v84)
                  {
                    v85 = (unint64_t *)&v84->__shared_owners_;
                    do
                      v86 = __ldaxr(v85);
                    while (__stlxr(v86 - 1, v85));
                    if (!v86)
                    {
                      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                      std::__shared_weak_count::__release_weak(v84);
                    }
                  }
                }
              }
              v71 = v72 - 1;
            }
            while (v72);
            v87 = (unint64_t)v10 >> 4;
            v88 = v134;
            while (1)
            {
              v90 = 0;
              v91 = v88;
              v92 = (_QWORD *)*v8;
              v141 = v8[1];
              *v8 = 0;
              v8[1] = 0;
              v93 = v8;
              do
              {
                v94 = v93;
                v93 += 2 * v90 + 2;
                v95 = 2 * v90;
                v90 = (2 * v90) | 1;
                v96 = v95 + 2;
                if (v95 + 2 < v87 && (char)sub_1C991D1D8(*(_QWORD *)*v93 + 88, *(_QWORD *)v93[2] + 88) > 0)
                {
                  v93 += 2;
                  v90 = v96;
                }
                v97 = *(_OWORD *)v93;
                *v93 = 0;
                v93[1] = 0;
                v98 = (std::__shared_weak_count *)v94[1];
                *(_OWORD *)v94 = v97;
                if (v98)
                {
                  v99 = (unint64_t *)&v98->__shared_owners_;
                  do
                    v100 = __ldaxr(v99);
                  while (__stlxr(v100 - 1, v99));
                  if (!v100)
                  {
                    ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                    std::__shared_weak_count::__release_weak(v98);
                  }
                }
              }
              while (v90 <= (uint64_t)((unint64_t)(v87 - 2) >> 1));
              v88 -= 2;
              if (v93 != v91 - 2)
                break;
              v118 = (std::__shared_weak_count *)v93[1];
              *v93 = v92;
              v93[1] = v141;
              if (v118)
              {
                v121 = (unint64_t *)&v118->__shared_owners_;
                do
                  v120 = __ldaxr(v121);
                while (__stlxr(v120 - 1, v121));
LABEL_164:
                if (!v120)
                {
                  ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
                  std::__shared_weak_count::__release_weak(v118);
                }
              }
LABEL_125:
              if (v87-- <= 2)
                return;
            }
            v101 = *((_OWORD *)v91 - 1);
            *v88 = 0;
            *(v91 - 1) = 0;
            v102 = (std::__shared_weak_count *)v93[1];
            *(_OWORD *)v93 = v101;
            if (v102)
            {
              v103 = (unint64_t *)&v102->__shared_owners_;
              do
                v104 = __ldaxr(v103);
              while (__stlxr(v104 - 1, v103));
              if (!v104)
              {
                ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                std::__shared_weak_count::__release_weak(v102);
              }
            }
            v105 = (std::__shared_weak_count *)*(v91 - 1);
            *(v91 - 2) = v92;
            *(v91 - 1) = v141;
            if (v105)
            {
              v106 = (unint64_t *)&v105->__shared_owners_;
              do
                v107 = __ldaxr(v106);
              while (__stlxr(v107 - 1, v106));
              if (!v107)
              {
                ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                std::__shared_weak_count::__release_weak(v105);
              }
            }
            v108 = (char *)(v93 + 2) - (char *)v8;
            if (v108 < 17)
              goto LABEL_125;
            v109 = (((unint64_t)v108 >> 4) - 2) >> 1;
            v110 = &v8[2 * v109];
            if ((char)sub_1C991D1D8(*(_QWORD *)*v110 + 88, *(_QWORD *)*v93 + 88) < 1)
              goto LABEL_125;
            v111 = *(_OWORD *)v93;
            *v93 = 0;
            v93[1] = 0;
            v142 = v111;
            v112 = (_QWORD *)v111;
            do
            {
              v113 = v110;
              v114 = *(_OWORD *)v110;
              *v110 = 0;
              v110[1] = 0;
              v115 = (std::__shared_weak_count *)v93[1];
              *(_OWORD *)v93 = v114;
              if (v115)
              {
                v116 = (unint64_t *)&v115->__shared_owners_;
                do
                  v117 = __ldaxr(v116);
                while (__stlxr(v117 - 1, v116));
                if (!v117)
                {
                  ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
                  std::__shared_weak_count::__release_weak(v115);
                }
              }
              if (!v109)
                break;
              v109 = (v109 - 1) >> 1;
              v110 = &v8[2 * v109];
              v93 = v113;
            }
            while ((char)sub_1C991D1D8(*(_QWORD *)*v110 + 88, *v112 + 88) > 0);
            v118 = (std::__shared_weak_count *)v113[1];
            *(_OWORD *)v113 = v142;
            if (!v118)
              goto LABEL_125;
            v119 = (unint64_t *)&v118->__shared_owners_;
            do
              v120 = __ldaxr(v119);
            while (__stlxr(v120 - 1, v119));
            goto LABEL_164;
          }
          v12 = &v8[2 * (v11 >> 1)];
          if ((unint64_t)v10 < 0x801)
          {
            sub_1C98A7DA0((uint64_t)&v8[2 * (v11 >> 1)], (uint64_t)v8, a2 - 16);
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_10;
          }
          else
          {
            sub_1C98A7DA0((uint64_t)v8, (uint64_t)&v8[2 * (v11 >> 1)], a2 - 16);
            sub_1C98A7DA0(v9, (uint64_t)(v12 - 1), a2 - 32);
            sub_1C98A7DA0(v135, (uint64_t)(v12 + 1), a2 - 48);
            sub_1C98A7DA0((uint64_t)(v12 - 1), (uint64_t)&v8[2 * (v11 >> 1)], (uint64_t)(v12 + 1));
            v13 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v12;
            *v12 = v13;
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_10;
          }
          if ((char)sub_1C991D1D8(*(_QWORD *)*(v8 - 2) + 88, *(_QWORD *)*v8 + 88) > 0)
          {
LABEL_10:
            v14 = *(_OWORD *)v8;
            *v8 = 0;
            v8[1] = 0;
            v137 = v14;
            v15 = (_QWORD *)v14;
            v16 = v8;
            do
            {
              v17 = v16;
              v18 = (_QWORD *)v16[2];
              v16 += 2;
            }
            while ((char)sub_1C991D1D8(*v18 + 88, *v15 + 88) > 0);
            v19 = (_QWORD *)a2;
            if (v17 == v8)
            {
              v19 = (_QWORD *)a2;
              do
              {
                if (v16 >= v19)
                  break;
                v21 = (_QWORD *)*(v19 - 2);
                v19 -= 2;
              }
              while ((char)sub_1C991D1D8(*v21 + 88, *v15 + 88) <= 0);
            }
            else
            {
              do
              {
                v20 = (_QWORD *)*(v19 - 2);
                v19 -= 2;
              }
              while ((char)sub_1C991D1D8(*v20 + 88, *v15 + 88) < 1);
            }
            a1 = v16;
            if (v16 < v19)
            {
              v22 = v19;
              do
              {
                v23 = (_QWORD *)*a1;
                *a1 = *v22;
                *v22 = v23;
                v24 = a1[1];
                a1[1] = v22[1];
                v22[1] = v24;
                do
                {
                  v25 = (_QWORD *)a1[2];
                  a1 += 2;
                }
                while ((char)sub_1C991D1D8(*v25 + 88, *v15 + 88) > 0);
                do
                {
                  v26 = (_QWORD *)*(v22 - 2);
                  v22 -= 2;
                }
                while ((char)sub_1C991D1D8(*v26 + 88, *v15 + 88) < 1);
              }
              while (a1 < v22);
            }
            v27 = (__int128 *)(a1 - 2);
            if (a1 - 2 != v8)
            {
              v28 = *v27;
              *(_QWORD *)v27 = 0;
              *(a1 - 1) = 0;
              v29 = (std::__shared_weak_count *)v8[1];
              *(_OWORD *)v8 = v28;
              if (v29)
              {
                v30 = (unint64_t *)&v29->__shared_owners_;
                do
                  v31 = __ldaxr(v30);
                while (__stlxr(v31 - 1, v30));
                if (!v31)
                {
                  ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
                  std::__shared_weak_count::__release_weak(v29);
                }
              }
            }
            v32 = (std::__shared_weak_count *)*(a1 - 1);
            *((_OWORD *)a1 - 1) = v137;
            if (v32)
            {
              v33 = (unint64_t *)&v32->__shared_owners_;
              do
                v34 = __ldaxr(v33);
              while (__stlxr(v34 - 1, v33));
              if (!v34)
              {
                ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
                std::__shared_weak_count::__release_weak(v32);
              }
            }
            if (v16 >= v19)
            {
              v35 = sub_1C98A817C((uint64_t)v8, (uint64_t)(a1 - 2));
              if (sub_1C98A817C((uint64_t)a1, a2))
              {
                a2 = (unint64_t)(a1 - 2);
                if (!v35)
                  continue;
                return;
              }
              if (v35)
                goto LABEL_1;
            }
            sub_1C98A7024(v8, a1 - 2, a3, a4 & 1);
            a4 = 0;
            goto LABEL_1;
          }
          v36 = *(_OWORD *)v8;
          *v8 = 0;
          v8[1] = 0;
          v138 = v36;
          v37 = (_QWORD *)v36;
          if ((char)sub_1C991D1D8(*(_QWORD *)v36 + 88, **(_QWORD **)(a2 - 16) + 88) <= 0)
          {
            v39 = v8 + 2;
            do
            {
              a1 = v39;
              if ((unint64_t)v39 >= a2)
                break;
              v39 += 2;
            }
            while ((char)sub_1C991D1D8(*v37 + 88, *(_QWORD *)*a1 + 88) < 1);
          }
          else
          {
            a1 = v8;
            do
            {
              v38 = (_QWORD *)a1[2];
              a1 += 2;
            }
            while ((char)sub_1C991D1D8(*v37 + 88, *v38 + 88) <= 0);
          }
          v40 = (_QWORD *)a2;
          if ((unint64_t)a1 < a2)
          {
            v40 = (_QWORD *)a2;
            do
            {
              v41 = (_QWORD *)*(v40 - 2);
              v40 -= 2;
            }
            while ((char)sub_1C991D1D8(*v37 + 88, *v41 + 88) > 0);
          }
          while (a1 < v40)
          {
            v42 = *a1;
            *a1 = *v40;
            *v40 = v42;
            v43 = a1[1];
            a1[1] = v40[1];
            v40[1] = v43;
            do
            {
              v44 = (_QWORD *)a1[2];
              a1 += 2;
            }
            while ((char)sub_1C991D1D8(*v37 + 88, *v44 + 88) < 1);
            do
            {
              v45 = (_QWORD *)*(v40 - 2);
              v40 -= 2;
            }
            while ((char)sub_1C991D1D8(*v37 + 88, *v45 + 88) > 0);
          }
          v46 = (__int128 *)(a1 - 2);
          if (a1 - 2 != v8)
          {
            v47 = *v46;
            *(_QWORD *)v46 = 0;
            *(a1 - 1) = 0;
            v48 = (std::__shared_weak_count *)v8[1];
            *(_OWORD *)v8 = v47;
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
          }
          a4 = 0;
          v51 = (std::__shared_weak_count *)*(a1 - 1);
          *((_OWORD *)a1 - 1) = v138;
          if (v51)
          {
            v52 = (unint64_t *)&v51->__shared_owners_;
            do
              v53 = __ldaxr(v52);
            while (__stlxr(v53 - 1, v52));
            a4 = 0;
            if (!v53)
            {
              ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
              std::__shared_weak_count::__release_weak(v51);
              a4 = 0;
            }
          }
          goto LABEL_1;
        }
        v57 = v8 == (_QWORD *)a2 || v9 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v57)
          {
            v58 = v8;
            do
            {
              v59 = v58;
              v58 = (_QWORD *)v9;
              if ((char)sub_1C991D1D8(*(_QWORD *)v59[2] + 88, *(_QWORD *)*v59 + 88) >= 1)
              {
                v60 = *(_OWORD *)v9;
                *(_QWORD *)v9 = 0;
                *(_QWORD *)(v9 + 8) = 0;
                v139 = v60;
                v61 = (_QWORD *)v60;
                v62 = (_QWORD *)v9;
                while (1)
                {
                  v63 = v62;
                  v62 = v59;
                  v64 = *(_OWORD *)v59;
                  *v59 = 0;
                  v59[1] = 0;
                  v65 = (std::__shared_weak_count *)v63[1];
                  *(_OWORD *)v63 = v64;
                  if (v65)
                  {
                    v66 = (unint64_t *)&v65->__shared_owners_;
                    do
                      v67 = __ldaxr(v66);
                    while (__stlxr(v67 - 1, v66));
                    if (!v67)
                    {
                      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
                      std::__shared_weak_count::__release_weak(v65);
                    }
                  }
                  if (v62 == v8)
                    break;
                  v59 = v62 - 2;
                  if ((char)sub_1C991D1D8(*v61 + 88, *(_QWORD *)*(v62 - 2) + 88) <= 0)
                    goto LABEL_94;
                }
                v62 = v8;
LABEL_94:
                v68 = (std::__shared_weak_count *)v62[1];
                *(_OWORD *)v62 = v139;
                if (v68)
                {
                  v69 = (unint64_t *)&v68->__shared_owners_;
                  do
                    v70 = __ldaxr(v69);
                  while (__stlxr(v70 - 1, v69));
                  if (!v70)
                  {
                    ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                    std::__shared_weak_count::__release_weak(v68);
                  }
                }
              }
              v9 += 16;
            }
            while (v58 + 2 != (_QWORD *)a2);
          }
        }
        else if (!v57)
        {
          do
          {
            v122 = v8;
            v8 = (_QWORD *)v9;
            if ((char)sub_1C991D1D8(*(_QWORD *)v122[2] + 88, *(_QWORD *)*v122 + 88) >= 1)
            {
              v123 = *(_OWORD *)v9;
              *(_QWORD *)v9 = 0;
              *(_QWORD *)(v9 + 8) = 0;
              v143 = v123;
              v124 = (_QWORD *)v123;
              v125 = v9;
              do
              {
                v126 = v125;
                v125 = (uint64_t)v122;
                v127 = *(_OWORD *)v122;
                *v122 = 0;
                v122[1] = 0;
                v128 = *(std::__shared_weak_count **)(v126 + 8);
                *(_OWORD *)v126 = v127;
                if (v128)
                {
                  v129 = (unint64_t *)&v128->__shared_owners_;
                  do
                    v130 = __ldaxr(v129);
                  while (__stlxr(v130 - 1, v129));
                  if (!v130)
                  {
                    ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
                    std::__shared_weak_count::__release_weak(v128);
                  }
                }
                v122 = (_QWORD *)(v125 - 16);
              }
              while ((char)sub_1C991D1D8(*v124 + 88, **(_QWORD **)(v125 - 16) + 88) > 0);
              v131 = *(std::__shared_weak_count **)(v125 + 8);
              *(_OWORD *)v125 = v143;
              if (v131)
              {
                v132 = (unint64_t *)&v131->__shared_owners_;
                do
                  v133 = __ldaxr(v132);
                while (__stlxr(v133 - 1, v132));
                if (!v133)
                {
                  ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
                  std::__shared_weak_count::__release_weak(v131);
                }
              }
            }
            v9 += 16;
          }
          while (v8 + 2 != (_QWORD *)a2);
        }
        return;
    }
  }
}

void **sub_1C98A7D08(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_1C98A7DA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t result;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  v6 = (char)sub_1C991D1D8(**(_QWORD **)a2 + 88, **(_QWORD **)a1 + 88);
  result = sub_1C991D1D8(**(_QWORD **)a3 + 88, **(_QWORD **)a2 + 88);
  if (v6 > 0)
  {
    v8 = *(_QWORD **)a1;
    if ((char)result < 1)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)a2 = v8;
      v15 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = v15;
      result = sub_1C991D1D8(**(_QWORD **)a3 + 88, **(_QWORD **)a2 + 88);
      if ((char)result < 1)
        return result;
      v16 = *(_QWORD **)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v16;
      v9 = (uint64_t *)(a3 + 8);
      v10 = (uint64_t *)(a2 + 8);
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v8;
      v9 = (uint64_t *)(a3 + 8);
      v10 = (uint64_t *)(a1 + 8);
    }
    v13 = v9;
    goto LABEL_10;
  }
  if ((char)result >= 1)
  {
    v11 = *(_QWORD **)a2;
    *(_QWORD *)a2 = *(_QWORD *)a3;
    *(_QWORD *)a3 = v11;
    v13 = (uint64_t *)(a2 + 8);
    v12 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = v12;
    result = sub_1C991D1D8(**(_QWORD **)a2 + 88, **(_QWORD **)a1 + 88);
    if ((char)result >= 1)
    {
      v14 = *(_QWORD **)a1;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v10 = (uint64_t *)(a1 + 8);
      *(_QWORD *)a2 = v14;
LABEL_10:
      v17 = *v10;
      *v10 = *v13;
      *v13 = v17;
    }
  }
  return result;
}

uint64_t sub_1C98A7F10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  sub_1C98A7DA0(a1, a2, a3);
  result = sub_1C991D1D8(**(_QWORD **)a4 + 88, **(_QWORD **)a3 + 88);
  if ((char)result >= 1)
  {
    v9 = *(_QWORD **)a3;
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *(_QWORD *)a4 = v9;
    v10 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = *(_QWORD *)(a4 + 8);
    *(_QWORD *)(a4 + 8) = v10;
    result = sub_1C991D1D8(**(_QWORD **)a3 + 88, **(_QWORD **)a2 + 88);
    if ((char)result >= 1)
    {
      v11 = *(_QWORD **)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v11;
      v12 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = v12;
      result = sub_1C991D1D8(**(_QWORD **)a2 + 88, **(_QWORD **)a1 + 88);
      if ((char)result >= 1)
      {
        v13 = *(_QWORD **)a1;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)a2 = v13;
        v14 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = v14;
      }
    }
  }
  return result;
}

uint64_t sub_1C98A801C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;

  sub_1C98A7F10(a1, a2, a3, a4);
  result = sub_1C991D1D8(**(_QWORD **)a5 + 88, **(_QWORD **)a4 + 88);
  if ((char)result >= 1)
  {
    v11 = *(_QWORD **)a4;
    *(_QWORD *)a4 = *(_QWORD *)a5;
    *(_QWORD *)a5 = v11;
    v12 = *(_QWORD *)(a4 + 8);
    *(_QWORD *)(a4 + 8) = *(_QWORD *)(a5 + 8);
    *(_QWORD *)(a5 + 8) = v12;
    result = sub_1C991D1D8(**(_QWORD **)a4 + 88, **(_QWORD **)a3 + 88);
    if ((char)result >= 1)
    {
      v13 = *(_QWORD **)a3;
      *(_QWORD *)a3 = *(_QWORD *)a4;
      *(_QWORD *)a4 = v13;
      v14 = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = *(_QWORD *)(a4 + 8);
      *(_QWORD *)(a4 + 8) = v14;
      result = sub_1C991D1D8(**(_QWORD **)a3 + 88, **(_QWORD **)a2 + 88);
      if ((char)result >= 1)
      {
        v15 = *(_QWORD **)a2;
        *(_QWORD *)a2 = *(_QWORD *)a3;
        *(_QWORD *)a3 = v15;
        v16 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
        *(_QWORD *)(a3 + 8) = v16;
        result = sub_1C991D1D8(**(_QWORD **)a2 + 88, **(_QWORD **)a1 + 88);
        if ((char)result >= 1)
        {
          v17 = *(_QWORD **)a1;
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)a2 = v17;
          v18 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
          *(_QWORD *)(a2 + 8) = v18;
        }
      }
    }
  }
  return result;
}

BOOL sub_1C98A817C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if ((char)sub_1C991D1D8(**(_QWORD **)(a2 - 16) + 88, **(_QWORD **)a1 + 88) < 1)
        return 1;
      v6 = *(_QWORD **)a1;
      *(_QWORD *)a1 = *(_QWORD *)(a2 - 16);
      *(_QWORD *)(a2 - 16) = v6;
      v7 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 - 8);
      *(_QWORD *)(a2 - 8) = v7;
      return 1;
    case 3:
      sub_1C98A7DA0(a1, a1 + 16, a2 - 16);
      return 1;
    case 4:
      sub_1C98A7F10(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      sub_1C98A801C(a1, a1 + 16, a1 + 32, a1 + 48, a2 - 16);
      return 1;
    default:
      v8 = a1 + 32;
      sub_1C98A7DA0(a1, a1 + 16, a1 + 32);
      v9 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v10 = 0;
      break;
  }
  while (1)
  {
    if ((char)sub_1C991D1D8(**(_QWORD **)v9 + 88, **(_QWORD **)v8 + 88) >= 1)
    {
      v11 = *(_OWORD *)v9;
      *(_QWORD *)v9 = 0;
      *(_QWORD *)(v9 + 8) = 0;
      v22 = v11;
      v12 = (_QWORD *)v11;
      v13 = v9;
      while (1)
      {
        v14 = v13;
        v13 = v8;
        v15 = *(_OWORD *)v8;
        *(_QWORD *)v8 = 0;
        *(_QWORD *)(v8 + 8) = 0;
        v16 = *(std::__shared_weak_count **)(v14 + 8);
        *(_OWORD *)v14 = v15;
        if (v16)
        {
          p_shared_owners = (unint64_t *)&v16->__shared_owners_;
          do
            v18 = __ldaxr(p_shared_owners);
          while (__stlxr(v18 - 1, p_shared_owners));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        if (v13 == a1)
          break;
        v8 = v13 - 16;
        if ((char)sub_1C991D1D8(*v12 + 88, **(_QWORD **)(v13 - 16) + 88) <= 0)
          goto LABEL_19;
      }
      v13 = a1;
LABEL_19:
      v19 = *(std::__shared_weak_count **)(v13 + 8);
      *(_OWORD *)v13 = v22;
      if (v19)
      {
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      if (++v10 == 8)
        return v9 + 16 == a2;
    }
    v8 = v9;
    v9 += 16;
    if (v9 == a2)
      return 1;
  }
}

_QWORD *sub_1C98A83E4(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  unint64_t v9;
  uint64_t v11;

  if (!a2)
    return 0;
  v3 = a3[1] ^ *a3;
  v4 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = a3[1] ^ *a3;
    if (v3 >= a2)
      v5 = v3 % a2;
  }
  else
  {
    v5 = (a2 - 1) & v3;
  }
  v6 = *(_QWORD **)(a1 + 8 * v5);
  if (!v6)
    return 0;
  result = (_QWORD *)*v6;
  if (*v6)
  {
    if (v4.u32[0] < 2uLL)
    {
      while (1)
      {
        v11 = result[1];
        if (v3 == v11)
        {
          if (result[2] == *a3 && result[3] == a3[1])
            return result;
        }
        else if ((v11 & (a2 - 1)) != v5)
        {
          return 0;
        }
        result = (_QWORD *)*result;
        if (!result)
          return result;
      }
    }
    do
    {
      v9 = result[1];
      if (v3 == v9)
      {
        if (result[2] == *a3 && result[3] == a3[1])
          return result;
      }
      else
      {
        if (v9 >= a2)
          v9 %= a2;
        if (v9 != v5)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

void sub_1C98A84C8(const unsigned __int8 **a1)
{
  const unsigned __int8 *v2;
  int v3;
  const unsigned __int8 *v4;
  char *v5;
  _OWORD *v6;
  __int128 v7;
  uuid_string_t out;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (!(*a1)[16])
  {
    MEMORY[0x1CAA4533C](out);
    v2 = *a1;
    v3 = (*a1)[16];
    *(_OWORD *)*a1 = *(_OWORD *)out;
    if (!v3)
      *((_BYTE *)v2 + 16) = 1;
    v4 = *a1;
    v5 = (char *)(*a1 + 160);
    if ((*a1)[16])
    {
      memset(out, 0, sizeof(out));
      uuid_unparse_upper(v4, out);
      v6 = operator new(0x28uLL);
      v7 = *(_OWORD *)&out[16];
      *v6 = *(_OWORD *)out;
      v6[1] = v7;
      *((_DWORD *)v6 + 8) = *(_DWORD *)&out[32];
      *((_BYTE *)v6 + 36) = 0;
      snprintf(v5, 0x40uLL, "(%p uuid=%s)", a1, (const char *)v6);
      operator delete(v6);
    }
    else
    {
      snprintf(v5, 0x40uLL, "(%p uuid=%s)", a1, "unset");
    }
  }
}

_QWORD *sub_1C98A85D8(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  void **v27;
  void **v28;

  v2 = a1[1] - *a1;
  v3 = v2 >> 3;
  v4 = (v2 >> 3) + 1;
  if (v4 >> 61)
    abort();
  v7 = a1[2] - *a1;
  if (v7 >> 2 > v4)
    v4 = v7 >> 2;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
    v8 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v8 = v4;
  if (v8)
  {
    if (v8 >> 61)
      sub_1C9899D30();
    v9 = (char *)operator new(8 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[8 * v3];
  v11 = &v9[8 * v8];
  v12 = *a2;
  *a2 = 0;
  *(_QWORD *)v10 = v12;
  v13 = v10 + 8;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
  }
  else
  {
    v16 = (unint64_t)&v15[-*a1 - 8];
    if (v16 < 0x78 || &v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v10 && &v9[v2 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v15)
      goto LABEL_31;
    v17 = (v16 >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v15[-v18];
    v10 -= v18;
    v20 = &v9[8 * v3 - 16];
    v21 = v15 - 16;
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24 = *((_OWORD *)v21 - 1);
      v23 = *(_OWORD *)v21;
      *((_OWORD *)v21 - 1) = 0uLL;
      *(_OWORD *)v21 = 0uLL;
      *((_OWORD *)v20 - 1) = v24;
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    v15 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_31:
      do
      {
        v25 = *((_QWORD *)v15 - 1);
        v15 -= 8;
        *(_QWORD *)v15 = 0;
        *((_QWORD *)v10 - 1) = v25;
        v10 -= 8;
      }
      while (v15 != v14);
    }
    v15 = (char *)*a1;
    v26 = (char *)a1[1];
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    while (v26 != v15)
    {
      v28 = (void **)*((_QWORD *)v26 - 1);
      v26 -= 8;
      v27 = v28;
      *(_QWORD *)v26 = 0;
      if (v28)
      {
        free(v27[3]);
        free(*v27);
        MEMORY[0x1CAA44AFC](v27, 0x1080C407C7A2332);
      }
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

uint64_t sub_1C98A878C(uint64_t a1)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  *(_BYTE *)a1 = 0;
  v2 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
  {
    sub_1C98CFF14();
    __cxa_guard_release(&qword_1ED52ACD8);
  }
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(qword_1ED52ACB8 + 106);
  *(_BYTE *)(a1 + 2) = 0;
  v3 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
  {
    sub_1C98CFF14();
    __cxa_guard_release(&qword_1ED52ACD8);
  }
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(qword_1ED52ACB8 + 108);
  v4 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
  {
    sub_1C98CFF14();
    __cxa_guard_release(&qword_1ED52ACD8);
  }
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(qword_1ED52ACB8 + 216);
  *(_DWORD *)(a1 + 5) = 0;
  *(_BYTE *)(a1 + 9) = 0;
  *(_DWORD *)(a1 + 12) = 1;
  v5 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
  {
    sub_1C98CFF14();
    __cxa_guard_release(&qword_1ED52ACD8);
  }
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(qword_1ED52ACB8 + 312);
  sub_1C98FE4FC((std::string *)(a1 + 24), "resources_facekit/");
  *(_QWORD *)(a1 + 48) = 0x100000000;
  v6 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
  {
    sub_1C98CFF14();
    __cxa_guard_release(&qword_1ED52ACD8);
  }
  v7 = qword_1ED52ACB8;
  v9 = *(_OWORD *)(qword_1ED52ACB8 + 16);
  v8 = *(_OWORD *)(qword_1ED52ACB8 + 32);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)qword_1ED52ACB8;
  *(_OWORD *)(a1 + 72) = v9;
  *(_OWORD *)(a1 + 88) = v8;
  v11 = *(_OWORD *)(v7 + 64);
  v10 = *(_OWORD *)(v7 + 80);
  v12 = *(_QWORD *)(v7 + 96);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(v7 + 48);
  *(_QWORD *)(a1 + 152) = v12;
  *(_OWORD *)(a1 + 136) = v10;
  *(_OWORD *)(a1 + 120) = v11;
  return a1;
}

void sub_1C98A8934(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1ED52ACD8);
  _Unwind_Resume(a1);
}

double sub_1C98A895C(unsigned __int8 *a1)
{
  unsigned __int8 v2;
  NSObject *v3;
  int v4;
  unsigned __int8 v5;
  NSObject *v6;
  int v7;
  unsigned __int8 v8;
  NSObject *v9;
  int v10;
  unsigned __int8 v11;
  NSObject *v12;
  int v13;
  unsigned __int8 v14;
  NSObject *v15;
  int v16;
  unsigned __int8 v17;
  NSObject *v18;
  int v19;
  unsigned __int8 v20;
  NSObject *v21;
  int v22;
  unsigned __int8 v23;
  NSObject *v24;
  int v25;
  unsigned __int8 v26;
  NSObject *v27;
  int v28;
  unsigned __int8 v29;
  NSObject *v30;
  _QWORD *v31;
  unsigned __int8 v32;
  NSObject *v33;
  int v34;
  unsigned __int8 v35;
  NSObject *v36;
  int v37;
  unsigned __int8 v38;
  NSObject *v39;
  int v40;
  unsigned __int8 v41;
  NSObject *v42;
  int v43;
  unsigned __int8 v44;
  NSObject *v45;
  int v46;
  unsigned __int8 v47;
  NSObject *v48;
  double v49;
  unsigned __int8 v50;
  NSObject *v51;
  double v52;
  unsigned __int8 v53;
  NSObject *v54;
  double v55;
  unsigned __int8 v56;
  NSObject *v57;
  double v58;
  unsigned __int8 v59;
  NSObject *v60;
  double v61;
  unsigned __int8 v62;
  NSObject *v63;
  double result;
  double v65;
  int v66;
  double v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v2 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
  {
    qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
    __cxa_guard_release(&qword_1ED52ACD0);
  }
  v3 = qword_1ED52ACE0;
  if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_INFO))
  {
    v4 = *a1;
    v66 = 67109120;
    LODWORD(v67) = v4;
    _os_log_impl(&dword_1C9870000, v3, OS_LOG_TYPE_INFO, "using rgb only: %d", (uint8_t *)&v66, 8u);
  }
  v5 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
  {
    qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
    __cxa_guard_release(&qword_1ED52ACD0);
  }
  v6 = qword_1ED52ACE0;
  if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_INFO))
  {
    v7 = a1[1];
    v66 = 67109120;
    LODWORD(v67) = v7;
    _os_log_impl(&dword_1C9870000, v6, OS_LOG_TYPE_INFO, "using recognition: %d", (uint8_t *)&v66, 8u);
  }
  v8 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
  {
    qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
    __cxa_guard_release(&qword_1ED52ACD0);
  }
  v9 = qword_1ED52ACE0;
  if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_INFO))
  {
    v10 = a1[2];
    v66 = 67109120;
    LODWORD(v67) = v10;
    _os_log_impl(&dword_1C9870000, v9, OS_LOG_TYPE_INFO, "using force CPU: %d", (uint8_t *)&v66, 8u);
  }
  v11 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
  if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
  {
    qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
    __cxa_guard_release(&qword_1ED52ACD0);
  }
  v12 = qword_1ED52ACE0;
  if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_INFO))
  {
    v13 = a1[3];
    v66 = 67109120;
    LODWORD(v67) = v13;
    _os_log_impl(&dword_1C9870000, v12, OS_LOG_TYPE_INFO, "using tongue: %d", (uint8_t *)&v66, 8u);
  }
  v14 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
  if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
  {
    qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
    __cxa_guard_release(&qword_1ED52ACD0);
  }
  v15 = qword_1ED52ACE0;
  if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_INFO))
  {
    v16 = a1[4];
    v66 = 67109120;
    LODWORD(v67) = v16;
    _os_log_impl(&dword_1C9870000, v15, OS_LOG_TYPE_INFO, "using robust tongue: %d", (uint8_t *)&v66, 8u);
  }
  v17 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
  if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
  {
    qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
    __cxa_guard_release(&qword_1ED52ACD0);
  }
  v18 = qword_1ED52ACE0;
  if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_INFO))
  {
    v19 = *((_DWORD *)a1 + 12);
    v66 = 67109120;
    LODWORD(v67) = v19;
    _os_log_impl(&dword_1C9870000, v18, OS_LOG_TYPE_INFO, "using pyramid behavior: %d", (uint8_t *)&v66, 8u);
  }
  v20 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
  if ((v20 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
  {
    qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
    __cxa_guard_release(&qword_1ED52ACD0);
  }
  v21 = qword_1ED52ACE0;
  if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_INFO))
  {
    v22 = a1[5];
    v66 = 67109120;
    LODWORD(v67) = v22;
    _os_log_impl(&dword_1C9870000, v21, OS_LOG_TYPE_INFO, "running deterministically: %d", (uint8_t *)&v66, 8u);
  }
  v23 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
  if ((v23 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
  {
    qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
    __cxa_guard_release(&qword_1ED52ACD0);
  }
  v24 = qword_1ED52ACE0;
  if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_INFO))
  {
    v25 = *((_DWORD *)a1 + 3);
    v66 = 67109120;
    LODWORD(v67) = v25;
    _os_log_impl(&dword_1C9870000, v24, OS_LOG_TYPE_INFO, "running with #faces: %d", (uint8_t *)&v66, 8u);
  }
  v26 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
  if ((v26 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
  {
    qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
    __cxa_guard_release(&qword_1ED52ACD0);
  }
  v27 = qword_1ED52ACE0;
  if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_INFO))
  {
    v28 = *((_DWORD *)a1 + 4);
    v66 = 67109120;
    LODWORD(v67) = v28;
    _os_log_impl(&dword_1C9870000, v27, OS_LOG_TYPE_INFO, "using recognition update period: %d", (uint8_t *)&v66, 8u);
  }
  v29 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
  if ((v29 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
  {
    qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
    __cxa_guard_release(&qword_1ED52ACD0);
  }
  v30 = qword_1ED52ACE0;
  if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_INFO))
  {
    v31 = a1 + 24;
    if ((char)a1[47] < 0)
      v31 = (_QWORD *)*v31;
    v66 = 136315138;
    v67 = *(double *)&v31;
    _os_log_impl(&dword_1C9870000, v30, OS_LOG_TYPE_INFO, "using resource path: %s", (uint8_t *)&v66, 0xCu);
  }
  v32 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
  if ((v32 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
  {
    qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
    __cxa_guard_release(&qword_1ED52ACD0);
  }
  v33 = qword_1ED52ACE0;
  if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_INFO))
  {
    v34 = a1[6];
    v66 = 67109120;
    LODWORD(v67) = v34;
    _os_log_impl(&dword_1C9870000, v33, OS_LOG_TYPE_INFO, "using face detector: %d", (uint8_t *)&v66, 8u);
  }
  v35 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
  if ((v35 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
  {
    qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
    __cxa_guard_release(&qword_1ED52ACD0);
  }
  v36 = qword_1ED52ACE0;
  if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_INFO))
  {
    v37 = a1[7];
    v66 = 67109120;
    LODWORD(v67) = v37;
    _os_log_impl(&dword_1C9870000, v36, OS_LOG_TYPE_INFO, "using key points: %d", (uint8_t *)&v66, 8u);
  }
  v38 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
  if ((v38 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
  {
    qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
    __cxa_guard_release(&qword_1ED52ACD0);
  }
  v39 = qword_1ED52ACE0;
  if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_INFO))
  {
    v40 = a1[8];
    v66 = 67109120;
    LODWORD(v67) = v40;
    _os_log_impl(&dword_1C9870000, v39, OS_LOG_TYPE_INFO, "using pose refinement: %d", (uint8_t *)&v66, 8u);
  }
  v41 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
  if ((v41 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
  {
    qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
    __cxa_guard_release(&qword_1ED52ACD0);
  }
  v42 = qword_1ED52ACE0;
  if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_INFO))
  {
    v43 = a1[9];
    v66 = 67109120;
    LODWORD(v67) = v43;
    _os_log_impl(&dword_1C9870000, v42, OS_LOG_TYPE_INFO, "using caranet_plus: %d", (uint8_t *)&v66, 8u);
  }
  v44 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
  if ((v44 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
  {
    qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
    __cxa_guard_release(&qword_1ED52ACD0);
  }
  v45 = qword_1ED52ACE0;
  if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_INFO))
  {
    v46 = *((_DWORD *)a1 + 13);
    v66 = 67109120;
    LODWORD(v67) = v46;
    _os_log_impl(&dword_1C9870000, v45, OS_LOG_TYPE_INFO, "using depth source: %d", (uint8_t *)&v66, 8u);
  }
  v47 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
  if ((v47 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
  {
    qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
    __cxa_guard_release(&qword_1ED52ACD0);
  }
  v48 = qword_1ED52ACE0;
  if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_INFO))
  {
    v49 = *((float *)a1 + 15);
    v66 = 134217984;
    v67 = v49;
    _os_log_impl(&dword_1C9870000, v48, OS_LOG_TYPE_INFO, "using failure threshold: %f", (uint8_t *)&v66, 0xCu);
  }
  v50 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
  if ((v50 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
  {
    qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
    __cxa_guard_release(&qword_1ED52ACD0);
  }
  v51 = qword_1ED52ACE0;
  if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_INFO))
  {
    v52 = *((float *)a1 + 17);
    v66 = 134217984;
    v67 = v52;
    _os_log_impl(&dword_1C9870000, v51, OS_LOG_TYPE_INFO, "using bounding box tolerance: %f", (uint8_t *)&v66, 0xCu);
  }
  v53 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
  if ((v53 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
  {
    qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
    __cxa_guard_release(&qword_1ED52ACD0);
  }
  v54 = qword_1ED52ACE0;
  if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_INFO))
  {
    v55 = *((float *)a1 + 35);
    v66 = 134217984;
    v67 = v55;
    _os_log_impl(&dword_1C9870000, v54, OS_LOG_TYPE_INFO, "using max angle: %f", (uint8_t *)&v66, 0xCu);
  }
  v56 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
  if ((v56 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
  {
    qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
    __cxa_guard_release(&qword_1ED52ACD0);
  }
  v57 = qword_1ED52ACE0;
  if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_INFO))
  {
    v58 = *((float *)a1 + 39);
    v66 = 134217984;
    v67 = v58;
    _os_log_impl(&dword_1C9870000, v57, OS_LOG_TYPE_INFO, "using max distance for tracking: %f mm", (uint8_t *)&v66, 0xCu);
  }
  v59 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
  if ((v59 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
  {
    qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
    __cxa_guard_release(&qword_1ED52ACD0);
  }
  v60 = qword_1ED52ACE0;
  if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_INFO))
  {
    v61 = *((float *)a1 + 37);
    v66 = 134217984;
    v67 = v61;
    _os_log_impl(&dword_1C9870000, v60, OS_LOG_TYPE_INFO, "using max distance for fitting: %f mm", (uint8_t *)&v66, 0xCu);
  }
  v62 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
  if ((v62 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
  {
    qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
    __cxa_guard_release(&qword_1ED52ACD0);
  }
  v63 = qword_1ED52ACE0;
  if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_INFO))
  {
    v65 = *((float *)a1 + 29);
    v66 = 134217984;
    v67 = v65;
    _os_log_impl(&dword_1C9870000, v63, OS_LOG_TYPE_INFO, "using max angle for recognition: %f", (uint8_t *)&v66, 0xCu);
  }
  return result;
}

uint64_t sub_1C98A9520(unsigned int *a1)
{
  unsigned __int8 v2;
  unsigned int v3;
  uint64_t v4;
  unsigned __int8 v5;
  NSObject *v6;
  int v7;
  _DWORD v9[2];
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
  {
    sub_1C98CFF14();
    __cxa_guard_release(&qword_1ED52ACD8);
  }
  if (*(_BYTE *)(qword_1ED52ACB8 + 105))
    v3 = 3;
  else
    v3 = 1;
  if (*((_BYTE *)a1 + 4))
    v4 = *a1;
  else
    v4 = v3;
  if ((v4 - 4) <= 0xFFFFFFFC)
  {
    v5 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
    if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
    {
      qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
      __cxa_guard_release(&qword_1ED52ACD0);
    }
    v6 = qword_1ED52ACE0;
    if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_DEFAULT))
    {
      v9[0] = 67109376;
      v9[1] = v4;
      v10 = 1024;
      v11 = 3;
      _os_log_impl(&dword_1C9870000, v6, OS_LOG_TYPE_DEFAULT, "Unsupported number of faces: %i, limiting to range [1, %i]", (uint8_t *)v9, 0xEu);
    }
    if ((int)v4 >= 3)
      v7 = 3;
    else
      v7 = v4;
    if (v7 <= 1)
      return 1;
    else
      return v7;
  }
  return v4;
}

void sub_1C98A9694(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1ED52ACD8);
  _Unwind_Resume(a1);
}

_QWORD *sub_1C98A96AC(_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len > 0x16)
  {
    if (__len - 0x7FFFFFFFFFFFFFF7 <= 0x800000000000001ELL)
      abort();
    v7 = 44;
    if (__len > 0x2C)
      v7 = __len;
    v8 = (v7 | 7) + 1;
    v6 = operator new(v8);
    memcpy(v6, __src, __len);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (__len)
    {
      memmove(__dst, __src, __len);
      v6 = __dst;
    }
  }
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

void **sub_1C98A976C(void **a1, void *__src, size_t __len)
{
  unint64_t v6;
  uint64_t v7;
  void *v8;
  size_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;

  v6 = (unint64_t)a1[2];
  v7 = v6 & 0x7FFFFFFFFFFFFFFFLL;
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) <= __len)
  {
    v9 = 0x7FFFFFFFFFFFFFF7;
    if (0x7FFFFFFFFFFFFFF7 - v7 < __len - v7 + 1)
      abort();
    v10 = v7 - 1;
    v11 = a1;
    if ((v6 & 0x8000000000000000) != 0)
      v11 = *a1;
    if (v10 <= 0x3FFFFFFFFFFFFFF2)
    {
      v12 = 2 * v10;
      if (__len > 2 * v10)
        v12 = __len;
      v13 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v12 | 7) != 0x17)
        v13 = v12 | 7;
      if (v12 >= 0x17)
        v9 = v13 + 1;
      else
        v9 = 23;
    }
    v14 = operator new(v9);
    v8 = v14;
    if (__len)
      memcpy(v14, __src, __len);
    if (v10 != 22)
      operator delete(v11);
    a1[1] = (void *)__len;
    a1[2] = (void *)(v9 | 0x8000000000000000);
    *a1 = v8;
  }
  else
  {
    v8 = *a1;
    a1[1] = (void *)__len;
    if (__len)
      memmove(v8, __src, __len);
  }
  *((_BYTE *)v8 + __len) = 0;
  return a1;
}

void sub_1C98A9888(uint64_t **a1, uint64_t **a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t **v6;
  uint64_t *v7;
  float v8;
  float v9;
  float v10;
  float v11;
  uint64_t *v12;
  uint64_t v13;
  float v14;
  float v15;
  uint64_t *v16;
  uint64_t **v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t **v23;
  uint64_t **v24;
  uint64_t **v25;
  uint64_t v26;
  float v27;
  float v28;
  float v29;
  uint64_t v30;
  float v31;
  float v32;
  float v33;
  __int128 v34;
  uint64_t v35;
  uint64_t **v36;
  uint64_t **v37;
  __int128 v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  float v42;
  float v43;
  float v44;
  float v45;
  BOOL v46;
  uint64_t v47;
  float v48;
  float v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t **v55;
  uint64_t v56;
  uint64_t v57;
  float v58;
  float v59;
  float v60;
  float v61;
  uint64_t v62;
  float v63;
  float v64;
  __int128 v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  __int128 v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  __int128 v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  __int128 v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t i;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  __int128 v86;
  unint64_t v88;

  if (a3 >= 2)
  {
    v6 = a1;
    if (a3 == 2)
    {
      v7 = *(a2 - 2);
      v8 = *(float *)(*v7 + 52);
      v9 = 0.0;
      v10 = 0.0;
      if (v8 >= 0.0)
      {
        v11 = *(float *)(*v7 + 56);
        if (v11 >= 0.0)
          v10 = v8 * v11;
      }
      v12 = *a1;
      v13 = **a1;
      v14 = *(float *)(v13 + 52);
      if (v14 >= 0.0)
      {
        v15 = *(float *)(v13 + 56);
        if (v15 >= 0.0)
          v9 = v14 * v15;
      }
      if (v10 > v9)
      {
        *a1 = v7;
        *(a2 - 2) = v12;
        v16 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v16;
      }
    }
    else if ((uint64_t)a3 <= 0)
    {
      if (a1 != a2)
      {
        v23 = a1 + 2;
        if (a1 + 2 != a2)
        {
          v24 = a1;
          do
          {
            v25 = v24;
            v24 = v23;
            v26 = **v23;
            v27 = *(float *)(v26 + 52);
            v28 = 0.0;
            if (v27 >= 0.0)
            {
              v29 = *(float *)(v26 + 56);
              if (v29 >= 0.0)
                v28 = v27 * v29;
            }
            v30 = **v25;
            v31 = *(float *)(v30 + 52);
            v32 = 0.0;
            if (v31 >= 0.0)
            {
              v33 = *(float *)(v30 + 56);
              if (v33 >= 0.0)
                v32 = v31 * v33;
            }
            if (v28 > v32)
            {
              v34 = *(_OWORD *)v24;
              *v24 = 0;
              v24[1] = 0;
              v86 = v34;
              v35 = v34;
              v36 = v24;
              while (1)
              {
                v37 = v25;
                v38 = *(_OWORD *)v25;
                *v25 = 0;
                v25[1] = 0;
                v39 = (std::__shared_weak_count *)v36[1];
                *(_OWORD *)v36 = v38;
                if (v39)
                {
                  p_shared_owners = (unint64_t *)&v39->__shared_owners_;
                  do
                    v41 = __ldaxr(p_shared_owners);
                  while (__stlxr(v41 - 1, p_shared_owners));
                  if (!v41)
                  {
                    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                    std::__shared_weak_count::__release_weak(v39);
                  }
                }
                if (v37 == v6)
                  break;
                v42 = *(float *)(*(_QWORD *)v35 + 52);
                v43 = 0.0;
                v44 = 0.0;
                if (v42 >= 0.0)
                {
                  v45 = *(float *)(*(_QWORD *)v35 + 56);
                  v46 = v45 < 0.0;
                  v44 = v42 * v45;
                  if (v46)
                    v44 = 0.0;
                }
                v25 = v37 - 2;
                v47 = **(v37 - 2);
                v48 = *(float *)(v47 + 52);
                if (v48 >= 0.0)
                {
                  v49 = *(float *)(v47 + 56);
                  if (v49 >= 0.0)
                    v43 = v48 * v49;
                }
                v36 = v37;
                if (v44 <= v43)
                  goto LABEL_41;
              }
              v37 = v6;
LABEL_41:
              v50 = (std::__shared_weak_count *)v37[1];
              *(_OWORD *)v37 = v86;
              if (v50)
              {
                v51 = (unint64_t *)&v50->__shared_owners_;
                do
                  v52 = __ldaxr(v51);
                while (__stlxr(v52 - 1, v51));
                if (!v52)
                {
                  ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
                  std::__shared_weak_count::__release_weak(v50);
                }
              }
            }
            v23 = v24 + 2;
          }
          while (v24 + 2 != a2);
        }
      }
    }
    else
    {
      v19 = (uint64_t **)a4;
      v20 = a3 >> 1;
      v21 = (char *)&a1[2 * (a3 >> 1)];
      if ((uint64_t)a3 <= a5)
      {
        sub_1C98AA240(a1, &a1[2 * (a3 >> 1)], a3 >> 1, a4);
        v53 = a3 - v20;
        v54 = (uint64_t)&v19[2 * v20];
        sub_1C98AA240(&v6[2 * (a3 >> 1)], a2, v53, v54);
        v88 = a3;
        v55 = &v19[2 * a3];
        v56 = v54;
        while ((uint64_t **)v56 != v55)
        {
          v57 = **(_QWORD **)v56;
          v58 = *(float *)(v57 + 52);
          v59 = 0.0;
          v60 = 0.0;
          if (v58 >= 0.0)
          {
            v61 = *(float *)(v57 + 56);
            if (v61 >= 0.0)
              v60 = v58 * v61;
          }
          v62 = **v19;
          v63 = *(float *)(v62 + 52);
          if (v63 >= 0.0)
          {
            v64 = *(float *)(v62 + 56);
            if (v64 >= 0.0)
              v59 = v63 * v64;
          }
          if (v60 <= v59)
          {
            v69 = *(_OWORD *)v19;
            *v19 = 0;
            v19[1] = 0;
            v70 = (std::__shared_weak_count *)v6[1];
            *(_OWORD *)v6 = v69;
            if (v70)
            {
              v71 = (unint64_t *)&v70->__shared_owners_;
              do
                v72 = __ldaxr(v71);
              while (__stlxr(v72 - 1, v71));
              if (!v72)
              {
                ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                std::__shared_weak_count::__release_weak(v70);
              }
            }
            v19 += 2;
          }
          else
          {
            v65 = *(_OWORD *)v56;
            *(_QWORD *)v56 = 0;
            *(_QWORD *)(v56 + 8) = 0;
            v66 = (std::__shared_weak_count *)v6[1];
            *(_OWORD *)v6 = v65;
            if (v66)
            {
              v67 = (unint64_t *)&v66->__shared_owners_;
              do
                v68 = __ldaxr(v67);
              while (__stlxr(v68 - 1, v67));
              if (!v68)
              {
                ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                std::__shared_weak_count::__release_weak(v66);
              }
            }
            v56 += 16;
          }
          v6 += 2;
          if (v19 == (uint64_t **)v54)
          {
            while ((uint64_t **)v56 != v55)
            {
              v77 = *(_OWORD *)v56;
              *(_QWORD *)v56 = 0;
              *(_QWORD *)(v56 + 8) = 0;
              v78 = (std::__shared_weak_count *)v6[1];
              *(_OWORD *)v6 = v77;
              if (v78)
              {
                v79 = (unint64_t *)&v78->__shared_owners_;
                do
                  v80 = __ldaxr(v79);
                while (__stlxr(v80 - 1, v79));
                if (!v80)
                {
                  ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                  std::__shared_weak_count::__release_weak(v78);
                }
              }
              v56 += 16;
              v6 += 2;
            }
            goto LABEL_82;
          }
        }
        while (v19 != (uint64_t **)v54)
        {
          v73 = *(_OWORD *)v19;
          *v19 = 0;
          v19[1] = 0;
          v74 = (std::__shared_weak_count *)v6[1];
          *(_OWORD *)v6 = v73;
          if (v74)
          {
            v75 = (unint64_t *)&v74->__shared_owners_;
            do
              v76 = __ldaxr(v75);
            while (__stlxr(v76 - 1, v75));
            if (!v76)
            {
              ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
              std::__shared_weak_count::__release_weak(v74);
            }
          }
          v19 += 2;
          v6 += 2;
        }
LABEL_82:
        v81 = a4;
        if (a4)
        {
          for (i = 0; i < v88; ++i)
          {
            v83 = *(std::__shared_weak_count **)(v81 + 8);
            if (v83)
            {
              v84 = (unint64_t *)&v83->__shared_owners_;
              do
                v85 = __ldaxr(v84);
              while (__stlxr(v85 - 1, v84));
              if (!v85)
              {
                ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
                std::__shared_weak_count::__release_weak(v83);
              }
            }
            v81 += 16;
          }
        }
      }
      else
      {
        sub_1C98A9888(a1, &a1[2 * (a3 >> 1)], a3 >> 1, a4, a5);
        v22 = a3 - v20;
        sub_1C98A9888(v21, a2, v22, v19, a5);
        sub_1C98AA6D4((char *)v6, v21, (char *)a2, v20, v22, v19, a5);
      }
    }
  }
}

void sub_1C98A9DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1C98AA634((uint64_t *)va);
  _Unwind_Resume(a1);
}

__n128 *sub_1C98A9E00(uint64_t a1, __n128 a2)
{
  __n128 *v2;
  __n128 *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __n128 *v10;
  unint64_t *v11;
  unint64_t v12;
  char *v13;
  __n128 *v14;
  __n128 v15;
  __n128 *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;

  v2 = *(__n128 **)a1;
  v3 = *(__n128 **)(a1 + 8);
  v4 = ((uint64_t)v3 - *(_QWORD *)a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    abort();
  v7 = *(_QWORD *)(a1 + 16) - (_QWORD)v2;
  if (v7 >> 3 > v5)
    v5 = v7 >> 3;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0)
    v5 = 0xFFFFFFFFFFFFFFFLL;
  if (v5 >> 60)
    sub_1C9899D30();
  v8 = 16 * v5;
  v9 = (char *)operator new(16 * v5);
  v10 = (__n128 *)&v9[16 * v4];
  *v10 = a2;
  if (a2.n128_u64[1])
  {
    v11 = (unint64_t *)(a2.n128_u64[1] + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    v2 = *(__n128 **)a1;
    v3 = *(__n128 **)(a1 + 8);
  }
  v13 = &v9[v8];
  v14 = v10 + 1;
  if (v3 == v2)
  {
    *(_QWORD *)a1 = v10;
    *(_QWORD *)(a1 + 8) = v14;
    *(_QWORD *)(a1 + 16) = v13;
  }
  else
  {
    do
    {
      v15 = v3[-1];
      --v3;
      v10[-1] = v15;
      --v10;
      v3->n128_u64[0] = 0;
      v3->n128_u64[1] = 0;
    }
    while (v3 != v2);
    v2 = *(__n128 **)a1;
    v16 = *(__n128 **)(a1 + 8);
    *(_QWORD *)a1 = v10;
    *(_QWORD *)(a1 + 8) = v14;
    *(_QWORD *)(a1 + 16) = v13;
    while (v16 != v2)
    {
      v17 = (std::__shared_weak_count *)v16[-1].n128_u64[1];
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      --v16;
    }
  }
  if (v2)
    operator delete(v2);
  return v14;
}

void sub_1C98A9F50(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E82957C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1C98A9F60(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E82957C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA44AFCLL);
}

uint64_t sub_1C98A9F90(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  void **v8;
  void **v9;

  v1 = *(_QWORD *)(result + 24);
  *(_QWORD *)(result + 24) = 0;
  if (v1)
  {
    v2 = *(std::__shared_weak_count **)(v1 + 152);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    free(*(void **)(v1 + 120));
    v5 = *(_QWORD **)(v1 + 24);
    if (v5)
    {
      v6 = *(_QWORD **)(v1 + 32);
      v7 = *(void **)(v1 + 24);
      if (v6 != v5)
      {
        do
        {
          v9 = (void **)*--v6;
          v8 = v9;
          *v6 = 0;
          if (v9)
          {
            free(v8[3]);
            free(*v8);
            MEMORY[0x1CAA44AFC](v8, 0x1080C407C7A2332);
          }
        }
        while (v6 != v5);
        v7 = *(void **)(v1 + 24);
      }
      *(_QWORD *)(v1 + 32) = v5;
      operator delete(v7);
    }
    JUMPOUT(0x1CAA44AFCLL);
  }
  return result;
}

void sub_1C98AA08C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295838;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1C98AA09C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295838;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA44AFCLL);
}

uint64_t sub_1C98AA0CC(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void **v7;
  void **v8;
  void **v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;

  v1 = *(_QWORD **)(result + 24);
  *(_QWORD *)(result + 24) = 0;
  if (v1)
  {
    v2 = v1[19];
    v1[19] = 0;
    if (v2)
    {
      v3 = sub_1C98EAD50(v2);
      MEMORY[0x1CAA44AFC](v3, 0x10E0C4016A603E8);
    }
    v4 = (std::__shared_weak_count *)v1[18];
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    v7 = (void **)(v1 + 11);
    sub_1C98EB010(v1 + 11);
    v8 = (void **)v1[12];
    v9 = (void **)v1[13];
    if (v8 != v9)
    {
      do
      {
        v10 = *v8++;
        operator delete(v10);
      }
      while (v8 != v9);
      v12 = v1[12];
      v11 = v1[13];
      if (v11 != v12)
        v1[13] = v11 + ((v12 - v11 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
    if (*v7)
      operator delete(*v7);
    v13 = (std::__shared_weak_count *)v1[4];
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = (std::__shared_weak_count *)v1[2];
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    JUMPOUT(0x1CAA44AFCLL);
  }
  return result;
}

void sub_1C98AA240(uint64_t **a1, uint64_t **a2, unint64_t a3, uint64_t a4)
{
  uint64_t **v4;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  float v13;
  uint64_t v14;
  float v15;
  float v16;
  uint64_t **v17;
  uint64_t **v18;
  uint64_t **v19;
  uint64_t **v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  uint64_t v25;
  float v26;
  float v27;
  float v28;
  uint64_t **v29;
  uint64_t v30;
  float v31;
  float v32;
  float v33;
  float v34;
  BOOL v35;
  uint64_t v36;
  float v37;
  float v38;
  __int128 v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  __int128 v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t **v49;
  uint64_t **v50;
  uint64_t v51;
  float v52;
  float v53;
  float v54;
  float v55;
  uint64_t v56;
  float v57;
  float v58;
  unint64_t v59;
  uint64_t **v60;
  unint64_t v61;
  uint64_t **v62;

  if (a3)
  {
    v4 = (uint64_t **)a4;
    v7 = a1;
    if (a3 == 2)
    {
      v8 = a2 - 2;
      v9 = **(a2 - 2);
      v10 = *(float *)(v9 + 52);
      v11 = 0.0;
      v12 = 0.0;
      if (v10 >= 0.0)
      {
        v13 = *(float *)(v9 + 56);
        if (v13 >= 0.0)
          v12 = v10 * v13;
      }
      v14 = **a1;
      v15 = *(float *)(v14 + 52);
      if (v15 >= 0.0)
      {
        v16 = *(float *)(v14 + 56);
        if (v16 >= 0.0)
          v11 = v15 * v16;
      }
      if (v12 <= v11)
      {
        *(_OWORD *)a4 = *(_OWORD *)a1;
        *a1 = 0;
        a1[1] = 0;
        v17 = a2 - 1;
      }
      else
      {
        *(_OWORD *)a4 = *(_OWORD *)v8;
        *v8 = 0;
        *(a2 - 1) = 0;
        v17 = a1 + 1;
        v8 = a1;
      }
      *(_QWORD *)(a4 + 16) = *v8;
      *(_QWORD *)(a4 + 24) = *v17;
      goto LABEL_49;
    }
    if (a3 == 1)
    {
      *(_OWORD *)a4 = *(_OWORD *)a1;
      v8 = a1;
LABEL_49:
      *v8 = 0;
      v8[1] = 0;
      return;
    }
    if ((uint64_t)a3 > 8)
    {
      v47 = a3 >> 1;
      v48 = 2 * (a3 >> 1);
      v49 = &a1[v48];
      sub_1C98A9888(a1, &a1[v48], a3 >> 1, a4, a3 >> 1);
      sub_1C98A9888(&v7[v48], a2, a3 - v47, &v4[v48], a3 - v47);
      v50 = &v7[v48];
      while (v50 != a2)
      {
        v51 = **v50;
        v52 = *(float *)(v51 + 52);
        v53 = 0.0;
        v54 = 0.0;
        if (v52 >= 0.0)
        {
          v55 = *(float *)(v51 + 56);
          if (v55 >= 0.0)
            v54 = v52 * v55;
        }
        v56 = **v7;
        v57 = *(float *)(v56 + 52);
        if (v57 >= 0.0)
        {
          v58 = *(float *)(v56 + 56);
          if (v58 >= 0.0)
            v53 = v57 * v58;
        }
        if (v54 <= v53)
        {
          *(_OWORD *)v4 = *(_OWORD *)v7;
          *v7 = 0;
          v7[1] = 0;
          v7 += 2;
        }
        else
        {
          *(_OWORD *)v4 = *(_OWORD *)v50;
          *v50 = 0;
          v50[1] = 0;
          v50 += 2;
        }
        v4 += 2;
        if (v7 == v49)
        {
          if (v50 != a2)
          {
            v61 = 0;
            do
            {
              v62 = &v50[v61];
              *(_OWORD *)&v4[v61] = *(_OWORD *)&v50[v61];
              *v62 = 0;
              v62[1] = 0;
              v61 += 2;
            }
            while (&v50[v61] != a2);
          }
          return;
        }
      }
      if (v7 != v49)
      {
        v59 = 0;
        do
        {
          v60 = &v7[v59];
          *(_OWORD *)&v4[v59] = *(_OWORD *)&v7[v59];
          *v60 = 0;
          v60[1] = 0;
          v59 += 2;
        }
        while (&v7[v59] != v49);
      }
    }
    else if (a1 != a2)
    {
      *(_OWORD *)a4 = *(_OWORD *)a1;
      *a1 = 0;
      a1[1] = 0;
      v18 = a1 + 2;
      if (a1 + 2 != a2)
      {
        v19 = (uint64_t **)a4;
        do
        {
          v20 = v19;
          v21 = **v18;
          v22 = *(float *)(v21 + 52);
          v23 = 0.0;
          if (v22 >= 0.0)
          {
            v24 = *(float *)(v21 + 56);
            if (v24 >= 0.0)
              v23 = v22 * v24;
          }
          v25 = **v19;
          v26 = *(float *)(v25 + 52);
          v27 = 0.0;
          if (v26 >= 0.0)
          {
            v28 = *(float *)(v25 + 56);
            if (v28 >= 0.0)
              v27 = v26 * v28;
          }
          v19 += 2;
          if (v23 <= v27)
          {
            *(_OWORD *)v19 = *(_OWORD *)v18;
            *v18 = 0;
            v18[1] = 0;
          }
          else
          {
            *((_OWORD *)v20 + 1) = *(_OWORD *)v20;
            *v20 = 0;
            v20[1] = 0;
            v29 = v4;
            if (v20 != v4)
            {
              while (1)
              {
                v29 = v20;
                v30 = **v18;
                v31 = *(float *)(v30 + 52);
                v32 = 0.0;
                v33 = 0.0;
                if (v31 >= 0.0)
                {
                  v34 = *(float *)(v30 + 56);
                  v35 = v34 < 0.0;
                  v33 = v31 * v34;
                  if (v35)
                    v33 = 0.0;
                }
                v20 -= 2;
                v36 = **(v29 - 2);
                v37 = *(float *)(v36 + 52);
                if (v37 >= 0.0)
                {
                  v38 = *(float *)(v36 + 56);
                  if (v38 >= 0.0)
                    v32 = v37 * v38;
                }
                if (v33 <= v32)
                  break;
                v39 = *((_OWORD *)v29 - 1);
                *v20 = 0;
                *(v29 - 1) = 0;
                v40 = (std::__shared_weak_count *)v29[1];
                *(_OWORD *)v29 = v39;
                if (v40)
                {
                  p_shared_owners = (unint64_t *)&v40->__shared_owners_;
                  do
                    v42 = __ldaxr(p_shared_owners);
                  while (__stlxr(v42 - 1, p_shared_owners));
                  if (!v42)
                  {
                    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
                    std::__shared_weak_count::__release_weak(v40);
                  }
                }
                if (v20 == v4)
                {
                  v29 = v4;
                  break;
                }
              }
            }
            v43 = *(_OWORD *)v18;
            *v18 = 0;
            v18[1] = 0;
            v44 = (std::__shared_weak_count *)v29[1];
            *(_OWORD *)v29 = v43;
            if (v44)
            {
              v45 = (unint64_t *)&v44->__shared_owners_;
              do
                v46 = __ldaxr(v45);
              while (__stlxr(v46 - 1, v45));
              if (!v46)
              {
                ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
                std::__shared_weak_count::__release_weak(v44);
              }
            }
          }
          v18 += 2;
        }
        while (v18 != a2);
      }
    }
  }
}

uint64_t *sub_1C98AA634(uint64_t *a1)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = (unint64_t *)a1[1];
    if (*v3)
    {
      v4 = 0;
      do
      {
        v5 = *(std::__shared_weak_count **)(v2 + 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        ++v4;
        v2 += 16;
      }
      while (v4 < *v3);
    }
  }
  return a1;
}

void sub_1C98AA6D4(char *a1, char *a2, char *a3, uint64_t a4, uint64_t a5, uint64_t **a6, uint64_t a7)
{
  uint64_t v8;
  char *v10;
  uint64_t *v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t v20;
  float v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t *v28;
  _QWORD *v29;
  char *v30;
  char *i;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  _QWORD *v36;
  uint64_t v37;
  _BOOL4 v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  float v44;
  char *v45;
  float v46;
  float v47;
  float v48;
  unint64_t v49;
  uint64_t **v50;
  uint64_t v51;
  float v52;
  float v53;
  unint64_t v54;
  uint64_t v55;
  float v56;
  char *v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  char *v66;
  char *v67;
  uint64_t **v68;
  uint64_t **v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t **v73;
  char *v74;
  __int128 *v75;
  uint64_t v76;
  float v77;
  float v78;
  float v79;
  float v80;
  uint64_t v81;
  float v82;
  float v83;
  __int128 v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  __int128 v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t **v91;
  char *v92;
  __int128 v93;
  std::__shared_weak_count *v94;
  unint64_t *p_shared_owners;
  unint64_t v96;
  uint64_t **v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t **v101;
  uint64_t **v102;
  uint64_t v103;
  float v104;
  float v105;
  float v106;
  float v107;
  uint64_t v108;
  float v109;
  float v110;
  __int128 v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t **v115;
  char *v116;
  __int128 v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  uint64_t **v121;
  char *v122;
  BOOL v123;
  __int128 v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  uint64_t **v128;
  uint64_t j;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  uint64_t **v133;
  _QWORD *v134;

  if (!a5)
    return;
  v8 = a5;
  v10 = a2;
  while (v8 > a7 && a4 > a7)
  {
    if (!a4)
      return;
    v12 = *(uint64_t **)v10;
    v13 = **(_QWORD **)v10;
    v14 = *(float *)(v13 + 52);
    while (1)
    {
      v15 = 0.0;
      v16 = 0.0;
      if (v14 >= 0.0)
      {
        v17 = *(float *)(v13 + 56);
        v18 = v17 < 0.0;
        v16 = v14 * v17;
        if (v18)
          v16 = 0.0;
      }
      v19 = *(uint64_t **)a1;
      v20 = **(_QWORD **)a1;
      v21 = *(float *)(v20 + 52);
      if (v21 >= 0.0)
      {
        v22 = *(float *)(v20 + 56);
        if (v22 >= 0.0)
          v15 = v21 * v22;
      }
      if (v16 > v15)
        break;
      a1 += 16;
      if (!--a4)
        return;
    }
    if (a4 >= v8)
    {
      if (a4 == 1)
      {
        *(_QWORD *)a1 = v12;
        *(_QWORD *)v10 = v19;
        v134 = (_QWORD *)*((_QWORD *)a1 + 1);
        *((_QWORD *)a1 + 1) = *((_QWORD *)v10 + 1);
        *((_QWORD *)v10 + 1) = v134;
        return;
      }
      if (a4 >= 0)
        v41 = a4;
      else
        v41 = a4 + 1;
      v27 = v41 >> 1;
      v26 = &a1[16 * (v41 >> 1)];
      v25 = v10;
      if (v10 != a3)
      {
        v54 = (a3 - v10) >> 4;
        v55 = **(_QWORD **)v26;
        v56 = *(float *)(v55 + 52);
        v25 = v10;
        do
        {
          v58 = v54 >> 1;
          v59 = &v25[16 * (v54 >> 1)];
          v60 = **(_QWORD **)v59;
          v61 = *(float *)(v60 + 52);
          v62 = 0.0;
          v63 = 0.0;
          if (v61 >= 0.0)
          {
            v64 = *(float *)(v60 + 56);
            if (v64 >= 0.0)
              v63 = v61 * v64;
          }
          if (v56 >= 0.0)
          {
            v65 = *(float *)(v55 + 56);
            if (v65 >= 0.0)
              v62 = v56 * v65;
          }
          v57 = v59 + 16;
          v54 += ~v58;
          if (v63 > v62)
            v25 = v57;
          else
            v54 = v58;
        }
        while (v54);
      }
      v24 = (v25 - v10) >> 4;
      if (v26 != v10)
      {
LABEL_22:
        if (v25 == v10)
        {
          v30 = v26;
        }
        else
        {
          v28 = *(uint64_t **)v26;
          *(_QWORD *)v26 = v12;
          *(_QWORD *)v10 = v28;
          v29 = (_QWORD *)*((_QWORD *)v26 + 1);
          *((_QWORD *)v26 + 1) = *((_QWORD *)v10 + 1);
          *((_QWORD *)v10 + 1) = v29;
          v30 = v26 + 16;
          for (i = v10 + 16; i != v25; i += 16)
          {
            if (v30 == v10)
              v10 = i;
            v32 = *(_QWORD *)v30;
            *(_QWORD *)v30 = *(_QWORD *)i;
            *(_QWORD *)i = v32;
            v33 = *((_QWORD *)v30 + 1);
            *((_QWORD *)v30 + 1) = *((_QWORD *)i + 1);
            *((_QWORD *)i + 1) = v33;
            v30 += 16;
          }
          if (v30 != v10)
          {
            v34 = v30;
            v35 = v10;
            while (1)
            {
              v36 = *(_QWORD **)v34;
              *(_QWORD *)v34 = *(_QWORD *)v35;
              *(_QWORD *)v35 = v36;
              v37 = *((_QWORD *)v34 + 1);
              *((_QWORD *)v34 + 1) = *((_QWORD *)v35 + 1);
              *((_QWORD *)v35 + 1) = v37;
              v34 += 16;
              v35 += 16;
              v38 = v34 == v10;
              if (v35 == v25)
              {
                if (v34 == v10)
                  goto LABEL_67;
                v35 = v10 + 16;
                while (1)
                {
                  v39 = *(_QWORD **)v34;
                  *(_QWORD *)v34 = *(_QWORD *)v10;
                  *(_QWORD *)v10 = v39;
                  v40 = (_QWORD *)*((_QWORD *)v34 + 1);
                  *((_QWORD *)v34 + 1) = *((_QWORD *)v10 + 1);
                  *((_QWORD *)v10 + 1) = v40;
                  v34 += 16;
                  v38 = v34 == v10;
                  if (v35 != v25)
                    break;
                  if (v34 == v10)
                    goto LABEL_67;
                }
              }
              if (v38)
                v10 = v35;
            }
          }
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v8 >= 0)
        v23 = v8;
      else
        v23 = v8 + 1;
      v24 = v23 >> 1;
      v25 = &v10[16 * (v23 >> 1)];
      v26 = v10;
      if (v10 != a1)
      {
        v42 = (v10 - a1) >> 4;
        v43 = **(_QWORD **)v25;
        v44 = *(float *)(v43 + 52);
        v26 = a1;
        do
        {
          v46 = 0.0;
          v47 = 0.0;
          if (v44 >= 0.0)
          {
            v48 = *(float *)(v43 + 56);
            v18 = v48 < 0.0;
            v47 = v44 * v48;
            if (v18)
              v47 = 0.0;
          }
          v49 = v42 >> 1;
          v50 = (uint64_t **)&v26[16 * (v42 >> 1)];
          v51 = **v50;
          v52 = *(float *)(v51 + 52);
          if (v52 >= 0.0)
          {
            v53 = *(float *)(v51 + 56);
            if (v53 >= 0.0)
              v46 = v52 * v53;
          }
          v45 = (char *)(v50 + 2);
          v42 += ~v49;
          if (v47 > v46)
            v42 = v49;
          else
            v26 = v45;
        }
        while (v42);
      }
      v27 = (v26 - a1) >> 4;
      if (v26 != v10)
        goto LABEL_22;
    }
    v30 = v25;
LABEL_67:
    a4 -= v27;
    v8 -= v24;
    if (v27 + v24 >= a4 + v8)
    {
      v69 = a6;
      sub_1C98AA6D4(v30, v25, a3, a4, v8, a6, a7);
      a6 = v69;
      v10 = v26;
      v8 = v24;
      a4 = v27;
      a3 = v30;
      if (!v24)
        return;
    }
    else
    {
      v66 = v26;
      v67 = a3;
      v68 = a6;
      sub_1C98AA6D4(a1, v66, v30, v27, v24, a6, a7);
      a3 = v67;
      a6 = v68;
      a1 = v30;
      v10 = v25;
      if (!v8)
        return;
    }
  }
  if (a4 > v8)
  {
    if (a3 == v10)
      return;
    v70 = 0;
    v71 = 0;
    do
    {
      v72 = &v10[v70 * 8];
      *(_OWORD *)&a6[v70] = *(_OWORD *)&v10[v70 * 8];
      *(_QWORD *)v72 = 0;
      *((_QWORD *)v72 + 1) = 0;
      ++v71;
      v70 += 2;
    }
    while (&v10[v70 * 8] != a3);
    v73 = &a6[v70];
    if (&a6[v70] == a6)
      goto LABEL_136;
    while (2)
    {
      if (v10 == a1)
      {
        do
        {
          v93 = *((_OWORD *)v73 - 1);
          v73 -= 2;
          *v73 = 0;
          v73[1] = 0;
          v94 = (std::__shared_weak_count *)*((_QWORD *)a3 - 1);
          *((_OWORD *)a3 - 1) = v93;
          a3 -= 16;
          if (v94)
          {
            p_shared_owners = (unint64_t *)&v94->__shared_owners_;
            do
              v96 = __ldaxr(p_shared_owners);
            while (__stlxr(v96 - 1, p_shared_owners));
            if (!v96)
            {
              v97 = a6;
              v98 = a3;
              ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
              std::__shared_weak_count::__release_weak(v94);
              a3 = v98;
              a6 = v97;
            }
          }
        }
        while (v73 != a6);
        goto LABEL_136;
      }
      v75 = (__int128 *)(v73 - 2);
      v76 = **(v73 - 2);
      v77 = *(float *)(v76 + 52);
      v78 = 0.0;
      v79 = 0.0;
      if (v77 >= 0.0)
      {
        v80 = *(float *)(v76 + 56);
        v18 = v80 < 0.0;
        v79 = v77 * v80;
        if (v18)
          v79 = 0.0;
      }
      v74 = v10 - 16;
      v81 = **((_QWORD **)v10 - 2);
      v82 = *(float *)(v81 + 52);
      if (v82 >= 0.0)
      {
        v83 = *(float *)(v81 + 56);
        if (v83 >= 0.0)
          v78 = v82 * v83;
      }
      if (v79 <= v78)
      {
        v88 = *v75;
        *(_QWORD *)v75 = 0;
        *(v73 - 1) = 0;
        v85 = (std::__shared_weak_count *)*((_QWORD *)a3 - 1);
        *((_OWORD *)a3 - 1) = v88;
        if (v85)
        {
          v89 = (unint64_t *)&v85->__shared_owners_;
          do
            v90 = __ldaxr(v89);
          while (__stlxr(v90 - 1, v89));
          v74 = v10;
          v73 -= 2;
          if (!v90)
          {
LABEL_97:
            v91 = a6;
            v92 = a3;
            ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
            std::__shared_weak_count::__release_weak(v85);
            a3 = v92;
            a6 = v91;
          }
        }
        else
        {
          v74 = v10;
          v73 -= 2;
        }
      }
      else
      {
        v84 = *(_OWORD *)v74;
        *(_QWORD *)v74 = 0;
        *((_QWORD *)v10 - 1) = 0;
        v85 = (std::__shared_weak_count *)*((_QWORD *)a3 - 1);
        *((_OWORD *)a3 - 1) = v84;
        if (v85)
        {
          v86 = (unint64_t *)&v85->__shared_owners_;
          do
            v87 = __ldaxr(v86);
          while (__stlxr(v87 - 1, v86));
          if (!v87)
            goto LABEL_97;
        }
      }
      a3 -= 16;
      v10 = v74;
      if (v73 == a6)
        goto LABEL_136;
      continue;
    }
  }
  if (a1 != v10)
  {
    v99 = 0;
    v71 = 0;
    do
    {
      v100 = &a1[v99 * 8];
      *(_OWORD *)&a6[v99] = *(_OWORD *)&a1[v99 * 8];
      *(_QWORD *)v100 = 0;
      *((_QWORD *)v100 + 1) = 0;
      ++v71;
      v99 += 2;
    }
    while (&a1[v99 * 8] != v10);
    v101 = &a6[v99];
    if (&a6[v99] == a6)
      goto LABEL_136;
    v102 = a6;
    while (v10 != a3)
    {
      v103 = **(_QWORD **)v10;
      v104 = *(float *)(v103 + 52);
      v105 = 0.0;
      v106 = 0.0;
      if (v104 >= 0.0)
      {
        v107 = *(float *)(v103 + 56);
        if (v107 >= 0.0)
          v106 = v104 * v107;
      }
      v108 = **v102;
      v109 = *(float *)(v108 + 52);
      if (v109 >= 0.0)
      {
        v110 = *(float *)(v108 + 56);
        if (v110 >= 0.0)
          v105 = v109 * v110;
      }
      if (v106 <= v105)
      {
        v117 = *(_OWORD *)v102;
        *v102 = 0;
        v102[1] = 0;
        v118 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
        *(_OWORD *)a1 = v117;
        if (v118)
        {
          v119 = (unint64_t *)&v118->__shared_owners_;
          do
            v120 = __ldaxr(v119);
          while (__stlxr(v120 - 1, v119));
          if (!v120)
          {
            v121 = a6;
            v122 = a3;
            ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
            std::__shared_weak_count::__release_weak(v118);
            a3 = v122;
            a6 = v121;
          }
        }
        v102 += 2;
      }
      else
      {
        v111 = *(_OWORD *)v10;
        *(_QWORD *)v10 = 0;
        *((_QWORD *)v10 + 1) = 0;
        v112 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
        *(_OWORD *)a1 = v111;
        if (v112)
        {
          v113 = (unint64_t *)&v112->__shared_owners_;
          do
            v114 = __ldaxr(v113);
          while (__stlxr(v114 - 1, v113));
          if (!v114)
          {
            v115 = a6;
            v116 = a3;
            ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
            std::__shared_weak_count::__release_weak(v112);
            a3 = v116;
            a6 = v115;
          }
        }
        v10 += 16;
      }
      a1 += 16;
      if (v102 == v101)
        goto LABEL_136;
    }
    do
    {
      v124 = *(_OWORD *)v102;
      *v102 = 0;
      v102[1] = 0;
      v125 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
      *(_OWORD *)a1 = v124;
      if (v125)
      {
        v126 = (unint64_t *)&v125->__shared_owners_;
        do
          v127 = __ldaxr(v126);
        while (__stlxr(v127 - 1, v126));
        if (!v127)
        {
          v128 = a6;
          ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
          std::__shared_weak_count::__release_weak(v125);
          a6 = v128;
        }
      }
      a1 += 16;
      v123 = v102 == v101 - 2;
      v102 += 2;
    }
    while (!v123);
LABEL_136:
    if (a6 && v71)
    {
      for (j = 0; j != v71; ++j)
      {
        v130 = (std::__shared_weak_count *)a6[1];
        if (v130)
        {
          v131 = (unint64_t *)&v130->__shared_owners_;
          do
            v132 = __ldaxr(v131);
          while (__stlxr(v132 - 1, v131));
          if (!v132)
          {
            v133 = a6;
            ((void (*)(std::__shared_weak_count *, char *, char *))v130->__on_zero_shared)(v130, a2, a3);
            std::__shared_weak_count::__release_weak(v130);
            a6 = v133;
          }
        }
        a6 += 2;
      }
    }
  }
}

uint64_t sub_1C98AAED4(uint64_t a1)
{
  _QWORD *v1;

  v1 = *(_QWORD **)(a1 + 56);
  if (*(_QWORD **)(a1 + 64) == v1)
    return 0;
  else
    return (*v1 != 0) << 7;
}

void sub_1C98AAEFC(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  void *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  size_t v23;
  void *v24;
  size_t v25;
  void *v26;
  size_t v27;
  void *v28;
  int v29;
  size_t v30;
  void *v31;
  unsigned int v32;
  size_t v33;
  size_t v34;
  void *v35;
  size_t v36;
  void *v37;
  int shared_weak_owners_high;
  size_t v39;
  void *v40;
  int v41;
  size_t v42;
  void *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  int v53;
  unint64_t v54;
  size_t v55;
  int v56;
  unint64_t v57;
  size_t v58;
  uint64_t v59;
  unint64_t v60;
  size_t v61;
  int v62;
  unint64_t v63;
  size_t v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  unsigned int v75;
  size_t size;

  if (*(_QWORD *)(a2 + 24) >> 39)
    v4 = (*(_QWORD *)(a2 + 24) & 0xFFFFFF80) == 0;
  else
    v4 = 1;
  if (v4)
  {
    v5 = *(void **)(a2 + 40);
    if (v5)
    {
      free(v5);
      *(_QWORD *)(a2 + 40) = 0;
    }
    *(_OWORD *)(a2 + 16) = xmmword_1C9927590;
    *(_QWORD *)(a2 + 32) = 0x8000000001;
    *(_QWORD *)(a2 + 40) = malloc_type_malloc(0x4000uLL, 0xA153FF5uLL);
  }
  else
  {
    *(_OWORD *)(a2 + 16) = xmmword_1C9927590;
  }
  v6 = (std::__shared_weak_count *)operator new(0x38uLL);
  v6->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295870;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)0x8000000080;
  v6[1].__shared_weak_owners_ = 0x4000;
  size = 0;
  malloc_type_posix_memalign((void **)&size, 0x20uLL, 0x10000uLL, 0x49090899uLL);
  v8 = (void *)size;
  v6[1].__shared_owners_ = size;
  LODWORD(v6[2].__vftable) = 0x4000;
  bzero(v8, 0x10000uLL);
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v10 = *(std::__shared_weak_count **)(a2 + 56);
  *(_QWORD *)(a2 + 48) = v6 + 1;
  *(_QWORD *)(a2 + 56) = v6;
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  v14 = *(_DWORD **)(a1 + 24);
  v15 = *(_QWORD *)(a1 + 8);
  v16 = 1717986919 * *(int *)(*(_QWORD *)(v15 + 144) + 16);
  v17 = (v16 >> 63) + (SHIDWORD(v16) >> 2) + *(_DWORD *)(*(_QWORD *)(v15 + 112) + 16);
  v18 = v14[23];
  v19 = v14[11];
  v75 = v14[10];
  v20 = *(_DWORD *)(v15 + 4);
  v21 = (std::__shared_weak_count *)operator new(0x228uLL);
  v21->__shared_owners_ = 0;
  v22 = (unint64_t *)&v21->__shared_owners_;
  v21->__shared_weak_owners_ = 0;
  v21->__vftable = (std::__shared_weak_count_vtbl *)&off_1E82958A8;
  v21[1].std::__shared_count = 0u;
  v23 = (4 * (v19 + 1) + 31) & 0x7FFFFFFE0;
  *(_OWORD *)&v21[1].__shared_weak_owners_ = 0u;
  v21[2].__shared_owners_ = v23 >> 2;
  size = 0;
  malloc_type_posix_memalign((void **)&size, 0x20uLL, v23, 0x49090899uLL);
  v24 = (void *)size;
  v21[2].__vftable = (std::__shared_weak_count_vtbl *)size;
  LODWORD(v21[2].__shared_weak_owners_) = v19 + 1;
  if (v19 != -1)
    bzero(v24, 4 * (v19 + 1));
  LODWORD(v21[4].__shared_owners_) = 0;
  *(_OWORD *)&v21[3].__shared_weak_owners_ = 0u;
  v21[3].std::__shared_count = 0u;
  v25 = (4 * v18 + 31) & 0x7FFFFFFE0;
  v21[4].__shared_weak_owners_ = 0;
  v21[5].__vftable = 0;
  LODWORD(v21[5].__shared_owners_) = 0;
  v21[5].__shared_weak_owners_ = 0;
  v21[6].__vftable = 0;
  LODWORD(v21[6].__shared_owners_) = 0;
  v21[6].__shared_weak_owners_ = 0;
  v21[7].__vftable = (std::__shared_weak_count_vtbl *)(v25 >> 2);
  size = 0;
  malloc_type_posix_memalign((void **)&size, 0x20uLL, v25, 0x49090899uLL);
  v26 = (void *)size;
  v21[6].__shared_weak_owners_ = size;
  LODWORD(v21[7].__shared_owners_) = v18;
  if ((_DWORD)v18)
    bzero(v26, 4 * v18);
  v21[7].__shared_weak_owners_ = 0;
  v21[8].__vftable = 0;
  LODWORD(v21[8].__shared_owners_) = 0;
  LODWORD(v21[8].__shared_weak_owners_) = v20;
  HIDWORD(v21[8].__shared_weak_owners_) = 4;
  v27 = (4 * (2 * v17) + 31) & 0x7FFFFFFE0;
  v21[9].__vftable = 0;
  v21[9].__shared_owners_ = v27 >> 2;
  size = 0;
  malloc_type_posix_memalign((void **)&size, 0x20uLL, v27, 0x49090899uLL);
  v28 = (void *)size;
  v21[9].__vftable = (std::__shared_weak_count_vtbl *)size;
  LODWORD(v21[9].__shared_weak_owners_) = v17;
  if (2 * v17)
    bzero(v28, 4 * (2 * v17));
  v29 = v19 - 1;
  v30 = (4 * (3 * v17) + 31) & 0x7FFFFFFE0;
  v21[10].__vftable = 0;
  v21[10].__shared_owners_ = v30 >> 2;
  size = 0;
  malloc_type_posix_memalign((void **)&size, 0x20uLL, v30, 0x49090899uLL);
  v31 = (void *)size;
  v21[10].__vftable = (std::__shared_weak_count_vtbl *)size;
  LODWORD(v21[10].__shared_weak_owners_) = v17;
  if (v17)
    bzero(v31, 4 * (3 * v17));
  LOBYTE(v21[14].__vftable) = 0;
  v32 = 3 * (v75 / 3);
  v33 = 4 * v32;
  v21[11].__shared_owners_ = 0;
  v21[11].__shared_weak_owners_ = 0;
  v21[11].__vftable = 0;
  v34 = (v33 + 31) & 0x3FFFFFFE0;
  LOBYTE(v21[12].__vftable) = 0;
  v21[14].__shared_owners_ = 0;
  v21[14].__shared_weak_owners_ = v34 >> 2;
  size = 0;
  malloc_type_posix_memalign((void **)&size, 0x20uLL, v34, 0x49090899uLL);
  v35 = (void *)size;
  v21[14].__shared_owners_ = size;
  LODWORD(v21[15].__vftable) = v32;
  if (v75 >= 3)
    bzero(v35, v33);
  v36 = (4 * v32 * v29 + 31) & 0x7FFFFFFE0;
  v21[15].__shared_owners_ = 0;
  v21[15].__shared_weak_owners_ = v36 >> 2;
  size = 0;
  malloc_type_posix_memalign((void **)&size, 0x20uLL, v36, 0x49090899uLL);
  v37 = (void *)size;
  v21[15].__shared_owners_ = size;
  LODWORD(v21[16].__vftable) = v32;
  HIDWORD(v21[16].__vftable) = v29;
  if (v32 * v29)
    bzero(v37, 4 * v32 * v29);
  shared_weak_owners_high = HIDWORD(v21[8].__shared_weak_owners_);
  v39 = (4 * (3 * shared_weak_owners_high) + 31) & 0x7FFFFFFE0;
  v21[16].__shared_owners_ = 0;
  v21[16].__shared_weak_owners_ = v39 >> 2;
  size = 0;
  malloc_type_posix_memalign((void **)&size, 0x20uLL, v39, 0x49090899uLL);
  v40 = (void *)size;
  v21[16].__shared_owners_ = size;
  LODWORD(v21[17].__vftable) = 3 * shared_weak_owners_high;
  if (shared_weak_owners_high)
    bzero(v40, 4 * (3 * shared_weak_owners_high));
  v41 = 3 * HIDWORD(v21[8].__shared_weak_owners_);
  v42 = (4 * (v41 * v20) + 31) & 0x7FFFFFFE0;
  v21[17].__shared_owners_ = 0;
  v21[17].__shared_weak_owners_ = v42 >> 2;
  size = 0;
  malloc_type_posix_memalign((void **)&size, 0x20uLL, v42, 0x49090899uLL);
  v43 = (void *)size;
  v21[17].__shared_owners_ = size;
  LODWORD(v21[18].__vftable) = v41;
  HIDWORD(v21[18].__vftable) = v20;
  if (v41 * v20)
    bzero(v43, 4 * (v41 * v20));
  v21[18].__shared_owners_ = 0;
  v21[18].__shared_weak_owners_ = 0;
  LODWORD(v21[19].__shared_owners_) = 0;
  v21[19].__vftable = 0;
  *(_OWORD *)&v21[19].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v21[20].__shared_owners_ = 0u;
  *(_OWORD *)((char *)&v21[20].__shared_weak_owners_ + 4) = 0u;
  v21[21].__shared_weak_owners_ = 0;
  v21[22].__shared_owners_ = 0;
  v21[22].__vftable = 0;
  LOBYTE(v21[22].__shared_weak_owners_) = 0;
  do
    v44 = __ldxr(v22);
  while (__stxr(v44 + 1, v22));
  v45 = *(std::__shared_weak_count **)(a2 + 72);
  *(_QWORD *)(a2 + 64) = v21 + 1;
  *(_QWORD *)(a2 + 72) = v21;
  if (v45)
  {
    v46 = (unint64_t *)&v45->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  do
    v48 = __ldaxr(v22);
  while (__stlxr(v48 - 1, v22));
  if (v48)
  {
    v50 = *(_QWORD *)(a2 + 64);
    v49 = *(std::__shared_weak_count **)(a2 + 72);
    if (!v49)
      goto LABEL_49;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
    v50 = *(_QWORD *)(a2 + 64);
    v49 = *(std::__shared_weak_count **)(a2 + 72);
    if (!v49)
      goto LABEL_49;
  }
  v51 = (unint64_t *)&v49->__shared_owners_;
  do
    v52 = __ldxr(v51);
  while (__stxr(v52 + 1, v51));
LABEL_49:
  v53 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 112) + 16);
  v54 = (3 * v53);
  *(_DWORD *)(v50 + 440) = v54;
  if (v53)
  {
    if (*(_QWORD *)(v50 + 432) < v54)
    {
      free(*(void **)(v50 + 424));
      v55 = (4 * v54 + 31) & 0x7FFFFFFE0;
      *(_QWORD *)(v50 + 424) = 0;
      *(_QWORD *)(v50 + 432) = v55 >> 2;
      size = 0;
      malloc_type_posix_memalign((void **)&size, 0x20uLL, v55, 0x49090899uLL);
      *(_QWORD *)(v50 + 424) = size;
    }
  }
  else
  {
    free(*(void **)(v50 + 424));
    *(_QWORD *)(v50 + 424) = 0;
    *(_QWORD *)(v50 + 432) = 0;
  }
  v56 = *(_DWORD *)(v50 + 364);
  *(_DWORD *)(v50 + 464) = v54;
  *(_DWORD *)(v50 + 468) = v56;
  v57 = (v56 * v54);
  if ((_DWORD)v57)
  {
    if (*(_QWORD *)(v50 + 456) < v57)
    {
      free(*(void **)(v50 + 448));
      v58 = (4 * v57 + 31) & 0x7FFFFFFE0;
      *(_QWORD *)(v50 + 448) = 0;
      *(_QWORD *)(v50 + 456) = v58 >> 2;
      size = 0;
      malloc_type_posix_memalign((void **)&size, 0x20uLL, v58, 0x49090899uLL);
      *(_QWORD *)(v50 + 448) = size;
    }
  }
  else
  {
    free(*(void **)(v50 + 448));
    *(_QWORD *)(v50 + 448) = 0;
    *(_QWORD *)(v50 + 456) = 0;
  }
  v59 = (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16)) >> 2;
  v60 = (3 * v59);
  *(_DWORD *)(v50 + 488) = v60;
  if ((_DWORD)v59)
  {
    if (*(_QWORD *)(v50 + 480) < v60)
    {
      free(*(void **)(v50 + 472));
      v61 = (4 * v60 + 31) & 0x7FFFFFFE0;
      *(_QWORD *)(v50 + 472) = 0;
      *(_QWORD *)(v50 + 480) = v61 >> 2;
      size = 0;
      malloc_type_posix_memalign((void **)&size, 0x20uLL, v61, 0x49090899uLL);
      *(_QWORD *)(v50 + 472) = size;
    }
  }
  else
  {
    free(*(void **)(v50 + 472));
    *(_QWORD *)(v50 + 472) = 0;
    *(_QWORD *)(v50 + 480) = 0;
  }
  v62 = *(_DWORD *)(v50 + 364);
  *(_DWORD *)(v50 + 512) = v60;
  *(_DWORD *)(v50 + 516) = v62;
  v63 = (v62 * v60);
  if (!(_DWORD)v63)
  {
    free(*(void **)(v50 + 496));
    *(_QWORD *)(v50 + 496) = 0;
    *(_QWORD *)(v50 + 504) = 0;
    if (!v49)
      goto LABEL_71;
    goto LABEL_67;
  }
  if (*(_QWORD *)(v50 + 504) < v63)
  {
    free(*(void **)(v50 + 496));
    v64 = (4 * v63 + 31) & 0x7FFFFFFE0;
    *(_QWORD *)(v50 + 496) = 0;
    *(_QWORD *)(v50 + 504) = v64 >> 2;
    size = 0;
    malloc_type_posix_memalign((void **)&size, 0x20uLL, v64, 0x49090899uLL);
    *(_QWORD *)(v50 + 496) = size;
  }
  if (v49)
  {
LABEL_67:
    v65 = (unint64_t *)&v49->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
LABEL_71:
  v67 = (std::__shared_weak_count *)operator new(0x20uLL);
  v68 = v67;
  v67->__shared_owners_ = 0;
  v69 = (unint64_t *)&v67->__shared_owners_;
  v67->__shared_weak_owners_ = 0;
  v67->__vftable = (std::__shared_weak_count_vtbl *)&off_1E82959F8;
  v67[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E8294B50;
  do
    v70 = __ldxr(v69);
  while (__stxr(v70 + 1, v69));
  v71 = *(std::__shared_weak_count **)(a2 + 88);
  *(_QWORD *)(a2 + 80) = v67 + 1;
  *(_QWORD *)(a2 + 88) = v67;
  if (v71)
  {
    v72 = (unint64_t *)&v71->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  do
    v74 = __ldaxr(v69);
  while (__stlxr(v74 - 1, v69));
  if (!v74)
  {
    ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
    std::__shared_weak_count::__release_weak(v68);
  }
}

void sub_1C98AB754(_QWORD *a1, uint64_t **a2, char a3)
{
  int8x16_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  uint64_t *v8;
  int8x16_t *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  float *v21;
  uint64_t v23;
  int8x16_t *v24;
  uint64_t v25;
  uint64_t i;
  uint64_t v28;
  int8x16_t v29;
  int8x16_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint32x4_t v41;
  int8x16_t *v42;
  uint64_t v43;
  unsigned __int8 v44;
  uint64_t v45;
  float32x4_t *v46;
  float32x4_t *v47;
  float32x4_t *v48;
  BOOL v49;
  float v51;
  float *v52;
  uint64_t v53;
  float *v54;
  uint64_t v55;
  float v56;
  float32x4_t v57;
  float32x4_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  float32x4_t *v62;
  float32x4_t v63;
  float32x2_t v64;
  float32x2_t v65;
  float v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float v70;
  float *v71;
  unint64_t v72;
  unint64_t v73;
  float *v74;
  uint64_t v75;
  float32x4_t *v76;
  float32x4_t *v77;
  uint64_t v78;
  float32x4_t v79;
  float v80;
  float v81;
  float *v82;
  unint64_t v83;
  unint64_t v84;
  float32x4_t *v85;
  uint64_t v86;
  float32x4_t v87;
  float v88;
  float *v89;
  float32x4_t v90;
  float32x4_t *v91;
  uint64_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t *v95;
  uint64_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float v99;
  uint64_t v100;
  int v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t *v112;
  unint64_t v113;
  int8x16_t *v114;
  int8x16_t *v115;
  uint64_t v116;
  int8x16_t v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  uint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  uint64_t v129;
  unint64_t *v130;
  unint64_t v131;
  unint64_t v132;
  _DWORD *v133;
  int v134;
  int *v135;
  float v136;
  unsigned __int8 v137;
  uint64_t v138;
  float v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  uint64_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t *v175;
  int v176;
  float32x4_t *v177;
  int *v178;
  int *v179;
  unsigned __int8 v180;
  uint64_t v181;
  int v182;
  uint64_t *v183;
  uint64_t **v184;
  uint64_t **v185;
  unint64_t v186;
  uint64_t *v187;
  uint64_t *v188;
  uint64_t v189;
  unint64_t *v190;
  unint64_t v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  unsigned __int8 v195;
  uint64_t v196;
  NSObject *v197;
  const char *v198;
  _DWORD *v199;
  int v200;
  uint64_t *v201;
  int v202;
  _QWORD *v203;
  _QWORD *v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  uint64_t v208;
  _QWORD *v209;
  uint64_t v210;
  _QWORD *v211;
  int v212;
  uint64_t v213;
  size_t v214;
  char *v215;
  uint64_t v216;
  _QWORD *v217;
  uint64_t v218;
  uint64_t v219;
  _QWORD *v220;
  uint64_t v221;
  uint64_t v222;
  _QWORD *v223;
  uint64_t v224;
  uint64_t v225;
  _QWORD *v226;
  uint64_t v227;
  uint64_t v228;
  _QWORD *v229;
  uint64_t v230;
  _QWORD *v231;
  uint64_t v232;
  _QWORD *v233;
  uint64_t v234;
  uint64_t *v235;
  uint64_t **v236;
  unint64_t v237;
  uint64_t j;
  uint64_t v239;
  uint64_t v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  unint64_t v244;
  std::__shared_weak_count *v245;
  std::__shared_weak_count *v246;
  unint64_t *v247;
  unint64_t v248;
  unint64_t v249;
  std::__shared_weak_count *v250;
  unint64_t *v251;
  unint64_t v252;
  std::__shared_weak_count *v253;
  unint64_t *v254;
  unint64_t v255;
  unint64_t *v256;
  unint64_t v257;
  uint64_t *v258;
  uint64_t v261;
  std::__shared_weak_count *v262;
  uint64_t v263;
  unint64_t *v264;
  unint64_t v265;
  unint64_t v266;
  std::__shared_weak_count *v267;
  uint64_t v268;
  unint64_t *v269;
  unint64_t v270;
  int v271;
  uint64_t v272;
  int v273;
  uint64_t v274;
  int *v275;
  int v276;
  int *v277;
  float v278;
  uint64_t v279;
  char *v280;
  unsigned int v281;
  unint64_t v282;
  char *v283;
  uint64_t v284;
  _OWORD *v285;
  __int128 *v286;
  uint64_t v287;
  __int128 v288;
  char *v289;
  unint64_t v290;
  unint64_t v291;
  int *v292;
  char *v293;
  uint64_t v294;
  _OWORD *v295;
  __int128 *v296;
  uint64_t v297;
  __int128 v298;
  int v299;
  char *v300;
  int *v301;
  uint64_t v302;
  _OWORD *v303;
  __int128 *v304;
  uint64_t v305;
  __int128 v306;
  int v307;
  int v308;
  float32x2_t *v309;
  float v310;
  float v311;
  float32x2_t v312;
  float v313;
  float32x2_t *v314;
  float v315;
  float v316;
  float32x2_t v317;
  float v318;
  __float2 v319;
  __float2 v320;
  float32x4_t v321;
  __float2 v322;
  unsigned int v323;
  float32x4_t v324;
  float32x4_t v325;
  float32x4_t v326;
  uint64_t v327;
  float *v328;
  float32x4_t v329;
  int *v330;
  int v331;
  uint64_t v332;
  unint64_t v333;
  int *v334;
  uint64_t v335;
  _OWORD *v336;
  __int128 *v337;
  uint64_t v338;
  __int128 v339;
  char *v340;
  unint64_t v341;
  unint64_t v342;
  int *v343;
  char *v344;
  uint64_t v345;
  _OWORD *v346;
  __int128 *v347;
  uint64_t v348;
  __int128 v349;
  int v350;
  char *v351;
  int *v352;
  uint64_t v353;
  _OWORD *v354;
  __int128 *v355;
  uint64_t v356;
  __int128 v357;
  int v358;
  int v359;
  __float2 v360;
  __float2 v361;
  __n128 v362;
  __n128 v363;
  float32x4_t v364;
  __float2 v365;
  unsigned int v366;
  float32x4_t v367;
  uint64_t v368;
  float *v369;
  float32x4_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  int *v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  float *v378;
  float v379;
  float v380;
  float v381;
  float *v382;
  float *v383;
  float v384;
  float v385;
  float v386;
  float v387;
  float v388;
  float v389;
  float v390;
  float v391;
  float v392;
  uint64_t v393;
  int v394;
  int v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  int *v400;
  uint64_t v401;
  uint64_t v402;
  int v403;
  uint64_t v404;
  uint64_t v405;
  float32x2_t *v406;
  float32x2_t *v407;
  float32x2_t *v408;
  float v409;
  float v410;
  float v411;
  float v412;
  float v413;
  float v414;
  float *v415;
  float v416;
  float v417;
  float v418;
  float v419;
  float v420;
  float v421;
  unsigned int v423;
  uint64_t v424;
  unint64_t v425;
  float *v426;
  float v427;
  float v428;
  float v429;
  uint64_t v430;
  unint64_t *v431;
  unint64_t v432;
  unint64_t *v433;
  unint64_t v434;
  unint64_t *v435;
  unint64_t v436;
  uint64_t v437;
  uint64_t v438;
  std::__shared_weak_count *v439;
  unint64_t *v440;
  unint64_t v441;
  unint64_t v442;
  uint64_t *v443;
  uint64_t v444;
  std::__shared_weak_count *v445;
  unint64_t *v446;
  unint64_t v447;
  uint64_t *v448;
  __n128 v449;
  unint64_t v450;
  uint64_t *v452;
  uint64_t *v453;
  uint64_t *v454;
  uint64_t v455;
  uint64_t *v456;
  uint64_t v457;
  std::__shared_weak_count *v458;
  float v459;
  uint64_t v460;
  std::__shared_weak_count *v461;
  uint64_t *v462;
  uint64_t *v463;
  float32x4_t v464;
  std::__shared_weak_count *v465;
  float32x4_t v466;
  float32x4_t v467;
  uint64_t *v468;
  uint64_t v470[2];
  uint64_t v471;
  std::__shared_weak_count *v472;
  int v473;
  uint64_t v474;
  int v475;
  int v476;
  _QWORD v477[2];
  int v478;
  int v479;
  uint64_t **v480;
  uint64_t *v481;
  uint64_t v482;
  void *memptr;
  char *v484;
  unint64_t v485;
  void *v486;
  __int128 v487;
  int v488;
  uint64_t v489;

  v489 = *MEMORY[0x1E0C80C00];
  v452 = *a2;
  v453 = a2[1];
  kdebug_trace();
  v8 = *a2;
  v462 = (uint64_t *)a2;
  v463 = a2[1];
  if (*a2 != v463)
  {
    v9 = (int8x16_t *)&unk_1C9927000;
    do
    {
      v10 = *v8;
      v11 = *(_QWORD *)(*v8 + 48);
      v12 = *(std::__shared_weak_count **)(*v8 + 56);
      v13 = *v8;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
        v13 = *v8;
      }
      v16 = *(_QWORD *)(v13 + 64);
      v17 = *(std::__shared_weak_count **)(v13 + 72);
      if (v17)
      {
        v18 = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      v20 = *(_QWORD *)(v10 + 40);
      v21 = *(float **)(v11 + 8);
      if (v20)
        _ZF = v21 == 0;
      else
        _ZF = 1;
      if (!_ZF)
      {
        v23 = (*(_DWORD *)(v11 + 4) * *(_DWORD *)v11);
        if ((v20 & 0xF) != 0)
          v24 = 0;
        else
          v24 = *(int8x16_t **)(v10 + 40);
        if ((v21 & 0xF) != 0)
          v25 = 0;
        else
          v25 = *(_QWORD *)(v11 + 8);
        if (((*(_BYTE *)(v11 + 4) * *(_BYTE *)v11) & 0xF) == 0
          && ((v21 | v20) & 0xF) == 0)
        {
          if ((int)v23 >= 16)
          {
            v28 = v23 >> 4;
            do
            {
              v29 = *v24++;
              v30 = (int8x16_t)vdupq_n_s32(0x4B400000u);
              v31 = (float32x4_t)vorrq_s8(vqtbl1q_s8(v29, (int8x16_t)xmmword_1C9927480), v30);
              v32 = (float32x4_t)vorrq_s8(vqtbl1q_s8(v29, (int8x16_t)xmmword_1C9927470), v30);
              v6 = (float32x4_t)vorrq_s8(vqtbl1q_s8(v29, (int8x16_t)xmmword_1C9927460), v30);
              v33 = (float32x4_t)vorrq_s8(vqtbl1q_s8(v29, v9[69]), v30);
              v34 = (float32x4_t)vdupq_n_s32(0xCB400000);
              v5 = vaddq_f32(v33, v34);
              v7 = vaddq_f32(v32, v34);
              *(float32x4_t *)(v25 + 32) = v7;
              *(float32x4_t *)(v25 + 48) = vaddq_f32(v31, v34);
              v4 = (int8x16_t)vaddq_f32(v6, v34);
              *(float32x4_t *)v25 = v5;
              *(int8x16_t *)(v25 + 16) = v4;
              v25 += 64;
              --v28;
            }
            while (v28);
            v21 = *(float **)(v11 + 8);
          }
        }
        else
        {
          if ((int)v23 < 1)
            goto LABEL_43;
          if (v23 < 8)
          {
            i = 0;
            goto LABEL_42;
          }
          if ((unint64_t)v21 < v20 + v23 && v20 < (unint64_t)&v21[v23])
          {
            for (i = 0; i != v23; ++i)
            {
LABEL_42:
              v4.i8[0] = *(_BYTE *)(v20 + i);
              *(float *)v4.i32 = (float)v4.u32[0];
              v21[i] = *(float *)v4.i32;
            }
            goto LABEL_43;
          }
          if (v23 >= 0x10)
          {
            i = v23 & 0x7FFFFFF0;
            v114 = *(int8x16_t **)(v10 + 40);
            v115 = *(int8x16_t **)(v11 + 8);
            v116 = v23 & 0xFFFFFFF0;
            do
            {
              v117 = *v114++;
              v4 = (int8x16_t)vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v117, v9[69]));
              v7 = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v117, (int8x16_t)xmmword_1C9927460));
              v6 = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v117, (int8x16_t)xmmword_1C9927470));
              v5 = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v117, (int8x16_t)xmmword_1C9927480));
              v115[2] = (int8x16_t)v6;
              v115[3] = (int8x16_t)v5;
              *v115 = v4;
              v115[1] = (int8x16_t)v7;
              v115 += 4;
              v116 -= 16;
            }
            while (v116);
            if (i == v23)
              goto LABEL_43;
            if ((v23 & 8) == 0)
              goto LABEL_42;
          }
          else
          {
            i = 0;
          }
          v36 = i;
          i = v23 & 0xFFFFFFF8;
          v37 = v36 - i;
          v38 = v36;
          v39 = (uint64_t *)(v20 + v36);
          do
          {
            v40 = *v39++;
            v4.i64[0] = v40;
            v41 = (uint32x4_t)vqtbl1q_s8(v4, (int8x16_t)xmmword_1C9927460);
            v6 = (float32x4_t)v9[69];
            v4 = (int8x16_t)vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v4, (int8x16_t)v6));
            v5 = vcvtq_f32_u32(v41);
            v42 = (int8x16_t *)&v21[v38];
            *v42 = v4;
            v42[1] = (int8x16_t)v5;
            v38 += 8;
            v37 += 8;
          }
          while (v37);
          if (i != v23)
            goto LABEL_42;
        }
      }
LABEL_43:
      v43 = *(unsigned int *)(v11 + 24);
      v44 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
      if ((v44 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
      {
        sub_1C98CFF14();
        __cxa_guard_release(&qword_1ED52ACD8);
      }
      v4.i32[0] = *(_DWORD *)(qword_1ED52ACB8 + 112);
      v45 = *(unsigned int *)(v11 + 24);
      v46 = *(float32x4_t **)(v11 + 8);
      if ((v46 & 0xF) != 0)
        v47 = 0;
      else
        v47 = *(float32x4_t **)(v11 + 8);
      if ((v21 & 0xF) != 0)
        v48 = 0;
      else
        v48 = (float32x4_t *)v21;
      if (v47)
        v49 = v48 == 0;
      else
        v49 = 1;
      if (!v49 && (*(_DWORD *)(v11 + 24) & 3) == 0)
      {
        v57 = *v47;
        v58 = vmulq_f32(v57, v57);
        v59 = ((int)v45 / 4);
        if ((int)v45 >= 8)
        {
          if ((int)v59 <= 2)
            v60 = 2;
          else
            v60 = v59;
          v61 = v60 - 1;
          v62 = v47 + 1;
          do
          {
            v63 = *v62++;
            v57 = vaddq_f32(v57, v63);
            v58 = vmlaq_f32(v58, v63, v63);
            --v61;
          }
          while (v61);
        }
        v7 = (float32x4_t)vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL);
        v64 = vadd_f32(*(float32x2_t *)v57.f32, *(float32x2_t *)v7.f32);
        *(float32x2_t *)v7.f32 = vadd_f32(v64, (float32x2_t)vdup_lane_s32((int32x2_t)v64, 1));
        v65 = vadd_f32(*(float32x2_t *)v58.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v58, (int8x16_t)v58, 8uLL));
        *(float32x2_t *)v7.f32 = vmul_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v7.f32);
        v7.f32[0] = (float)(vaddv_f32(v65) - (float)(v7.f32[0] / (float)(int)v45)) / (float)(v45 - 1);
        v65.f32[0] = vaddv_f32(v64) / (float)(int)v45;
        v5 = (float32x4_t)vdupq_lane_s32((int32x2_t)v65, 0);
        v64.f32[0] = sqrtf(v7.f32[0]);
        v7.f32[0] = 1.0 / v64.f32[0];
        _NF = v64.f32[0] < 0.001;
        v66 = 1000.0;
        if (!_NF)
          v66 = v7.f32[0];
        if (*(float *)v4.i32 <= 0.0)
        {
          if ((int)v45 >= 4)
          {
            do
            {
              v69 = *v47++;
              *v48++ = vmulq_n_f32(vsubq_f32(v69, v5), v66);
              --v59;
            }
            while (v59);
          }
        }
        else if ((int)v45 >= 4)
        {
          v7.f32[0] = -*(float *)v4.i32;
          v7 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 0);
          v67 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v4.i8, 0);
          do
          {
            v68 = *v47++;
            *v48++ = vminnmq_f32(vmaxnmq_f32(vmulq_n_f32(vsubq_f32(v68, v5), v66), v7), v67);
            --v59;
          }
          while (v59);
        }
        goto LABEL_118;
      }
      if (!(_DWORD)v45)
      {
        v51 = 0.0;
        goto LABEL_83;
      }
      v51 = v46->f32[0];
      if ((_DWORD)v45 == 1)
        goto LABEL_83;
      v52 = &v46->f32[1];
      if (((v45 + 0x3FFFFFFFFFFFFFFELL) & 0x3FFFFFFFFFFFFFFFLL) == 0)
        goto LABEL_64;
      v53 = ((v45 + 0x3FFFFFFFFFFFFFFELL) & 0x3FFFFFFFFFFFFFFFLL) + 1;
      v54 = &v46->f32[2];
      v55 = v53 & 0x7FFFFFFFFFFFFFFELL;
      do
      {
        v51 = (float)(v51 + *(v54 - 1)) + *v54;
        v54 += 2;
        v55 -= 2;
      }
      while (v55);
      if (v53 != (v53 & 0x7FFFFFFFFFFFFFFELL))
      {
        v52 += v53 & 0x7FFFFFFFFFFFFFFELL;
        do
        {
LABEL_64:
          v56 = *v52++;
          v51 = v51 + v56;
        }
        while (v52 != &v46->f32[v45]);
      }
LABEL_83:
      if (!(_DWORD)v43)
        goto LABEL_118;
      v70 = (float)v45;
      v6.f32[0] = v51 / (float)v45;
      v71 = &v21[v43];
      v72 = (v43 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      v73 = v72 + 1;
      if (v72 < 7)
      {
        v74 = v21;
        do
        {
LABEL_91:
          v80 = v46->f32[0];
          v46 = (float32x4_t *)((char *)v46 + 4);
          *v74++ = v80 - v6.f32[0];
        }
        while (v74 != v71);
        goto LABEL_92;
      }
      v74 = v21;
      if ((unint64_t)((char *)v21 - (char *)v46) < 0x20)
        goto LABEL_91;
      v75 = v73 & 0x7FFFFFFFFFFFFFF8;
      v74 = &v21[v75];
      v7 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v6.f32, 0);
      v76 = v46 + 1;
      v77 = (float32x4_t *)(v21 + 4);
      v78 = v73 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v79 = vsubq_f32(*v76, v7);
        v77[-1] = vsubq_f32(v76[-1], v7);
        *v77 = v79;
        v76 += 2;
        v77 += 2;
        v78 -= 8;
      }
      while (v78);
      if (v73 != (v73 & 0x7FFFFFFFFFFFFFF8))
      {
        v46 = (float32x4_t *)((char *)v46 + v75 * 4);
        goto LABEL_91;
      }
LABEL_92:
      v81 = *v21 * *v21;
      if ((_DWORD)v43 == 1)
        goto LABEL_99;
      v82 = v21 + 1;
      v83 = (v43 + 0x3FFFFFFFFFFFFFFELL) & 0x3FFFFFFFFFFFFFFFLL;
      if (v83 < 7)
        goto LABEL_98;
      v84 = v83 + 1;
      v85 = (float32x4_t *)(v21 + 5);
      v86 = v84 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v7 = vmulq_f32(v85[-1], v85[-1]);
        v87 = vmulq_f32(*v85, *v85);
        v81 = (float)((float)((float)((float)((float)((float)((float)(v81 + v7.f32[0]) + v7.f32[1]) + v7.f32[2])
                                            + v7.f32[3])
                                    + v87.f32[0])
                            + v87.f32[1])
                    + v87.f32[2])
            + v87.f32[3];
        v85 += 2;
        v86 -= 8;
      }
      while (v86);
      if (v84 != (v84 & 0x7FFFFFFFFFFFFFF8))
      {
        v82 += v84 & 0x7FFFFFFFFFFFFFF8;
        do
        {
LABEL_98:
          v88 = *v82++;
          v81 = v81 + (float)(v88 * v88);
        }
        while (v82 != v71);
      }
LABEL_99:
      v5.f32[0] = sqrtf(v81 / v70);
      if (v5.f32[0] < 0.001)
        v5.f32[0] = 0.001;
      v89 = v21;
      if (v72 >= 7)
      {
        v90 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 0);
        v91 = (float32x4_t *)(v21 + 4);
        v92 = v73 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v7 = vdivq_f32(v91[-1], v90);
          v93 = vdivq_f32(*v91, v90);
          v91[-1] = v7;
          *v91 = v93;
          v91 += 2;
          v92 -= 8;
        }
        while (v92);
        if (v73 == (v73 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_107;
        v89 = &v21[v73 & 0x7FFFFFFFFFFFFFF8];
      }
      do
      {
        *v89 = *v89 / v5.f32[0];
        ++v89;
      }
      while (v89 != v71);
LABEL_107:
      if (*(float *)v4.i32 <= 0.0)
        goto LABEL_118;
      v5.f32[0] = -*(float *)v4.i32;
      if (v72 >= 7)
      {
        v94 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v4.i8, 0);
        v7 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 0);
        v95 = (float32x4_t *)(v21 + 4);
        v96 = v73 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v97 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v94, v95[-1]), (int8x16_t)v95[-1], (int8x16_t)v94);
          v98 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v94, *v95), *(int8x16_t *)v95, (int8x16_t)v94);
          v95[-1] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v97, v7), (int8x16_t)v97, (int8x16_t)v7);
          *(int8x16_t *)v95 = vbslq_s8((int8x16_t)vcgtq_f32(v98, v7), (int8x16_t)v98, (int8x16_t)v7);
          v95 += 2;
          v96 -= 8;
        }
        while (v96);
        if (v73 == (v73 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_118;
        v21 += v73 & 0x7FFFFFFFFFFFFFF8;
      }
      do
      {
        v99 = *v21;
        if (*v21 >= *(float *)v4.i32)
          v99 = *(float *)v4.i32;
        if (v99 <= v5.f32[0])
          v99 = -*(float *)v4.i32;
        *v21++ = v99;
      }
      while (v21 != v71);
LABEL_118:
      v487 = 0uLL;
      *(_QWORD *)v16 = 0;
      *(_DWORD *)(v16 + 8) = 0;
      *(_QWORD *)(v16 + 12) = *(_QWORD *)((char *)&v487 + 4);
      *(_DWORD *)(v16 + 20) = HIDWORD(v487);
      v100 = *(unsigned int *)(v16 + 40);
      if ((_DWORD)v100)
        bzero(*(void **)(v16 + 24), 4 * v100);
      *(_DWORD *)(v16 + 80) = 0;
      *(_OWORD *)(v16 + 48) = 0u;
      *(_OWORD *)(v16 + 64) = 0u;
      v9 = (int8x16_t *)&unk_1C9927000;
      if (2 * *(_DWORD *)(v16 + 208))
        bzero(*(void **)(v16 + 192), 4 * (2 * *(_DWORD *)(v16 + 208)));
      v101 = *(_DWORD *)(v16 + 232);
      if (v101)
        bzero(*(void **)(v16 + 216), 4 * (3 * v101));
      *(_QWORD *)(v16 + 240) = 0;
      *(_QWORD *)(v16 + 248) = 0;
      *(_QWORD *)(v16 + 256) = 0;
      v5.f32[0] = (float)(*(_DWORD *)v11 - 1);
      v102 = (float)(*(float *)v10 * 200.0) / v5.f32[0];
      *(float32x2_t *)v7.f32 = vmul_f32(vsub_f32((float32x2_t)0x3F0000003F000000, vdiv_f32(*(float32x2_t *)(v10 + 4), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v5.f32, 0))), (float32x2_t)vdup_n_s32(0x43480000u));
      v103 = 1.0
           / sqrtf((float)(vmul_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v7.f32).f32[0]+ vmuls_lane_f32(v7.f32[1], *(float32x2_t *)v7.f32, 1))+ (float)(v102 * v102));
      v466 = v7;
      v104 = -(float)(v7.f32[0] * v103);
      v105 = -(float)(v102 * v103);
      v106 = sqrtf((float)(v104 * v104) + (float)(v105 * v105));
      v107 = (float)-(float)(v103 * (float)-v102) / v106;
      v108 = v104 / v106;
      v109 = atan2f(-(float)((float)(v104 * -0.0) + (float)(v107 * (float)-(float)(v7.f32[1] * v103))), v105);
      *(float *)v16 = v109;
      *(float *)(v16 + 4) = asinf(v108);
      *(float *)(v16 + 8) = atan2f(-0.0, v107);
      if (v109 < 0.0)
        *(float *)v16 = v109 + 6.2832;
      v4 = (int8x16_t)v466;
      *(_QWORD *)(v16 + 12) = v466.i64[0];
      *(float *)(v16 + 20) = v102;
      if (!v17)
        goto LABEL_130;
      v110 = (unint64_t *)&v17->__shared_owners_;
      do
        v111 = __ldaxr(v110);
      while (__stlxr(v111 - 1, v110));
      if (!v111)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
        if (v12)
        {
LABEL_131:
          v112 = (unint64_t *)&v12->__shared_owners_;
          do
            v113 = __ldaxr(v112);
          while (__stlxr(v113 - 1, v112));
          if (!v113)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
      }
      else
      {
LABEL_130:
        if (v12)
          goto LABEL_131;
      }
      v8 += 2;
    }
    while (v8 != v463);
  }
  kdebug_trace();
  kdebug_trace();
  v118 = v462[1] - *v462;
  v119 = v118 >> 4;
  v481 = 0;
  v482 = 0;
  v480 = &v481;
  if ((int)(v118 >> 4) < 1)
    goto LABEL_258;
  v120 = 0;
  v460 = (v118 >> 4);
  v121 = 1;
  do
  {
    v122 = *(_QWORD *)(*v462 + 16 * v120);
    v124 = *(_QWORD *)(v122 + 64);
    v123 = *(std::__shared_weak_count **)(v122 + 72);
    if (!v123)
      goto LABEL_152;
    v125 = (unint64_t *)&v123->__shared_owners_;
    do
      v126 = __ldxr(v125);
    while (__stxr(v126 + 1, v125));
    do
      v127 = __ldaxr(v125);
    while (__stlxr(v127 - 1, v125));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
      v129 = *(_QWORD *)(v122 + 48);
      v128 = *(std::__shared_weak_count **)(v122 + 56);
      if (!v128)
        goto LABEL_159;
    }
    else
    {
LABEL_152:
      v129 = *(_QWORD *)(v122 + 48);
      v128 = *(std::__shared_weak_count **)(v122 + 56);
      if (!v128)
        goto LABEL_159;
    }
    v130 = (unint64_t *)&v128->__shared_owners_;
    do
      v131 = __ldxr(v130);
    while (__stxr(v131 + 1, v130));
    do
      v132 = __ldaxr(v130);
    while (__stlxr(v132 - 1, v130));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
LABEL_159:
    sub_1C98ADE3C((uint64_t)&v486, (uint64_t)a1, v120, v119);
    v133 = v486;
    if (!v486)
    {
      v121 = 0;
      v192 = (std::__shared_weak_count *)v487;
      if (!(_QWORD)v487)
        goto LABEL_146;
LABEL_189:
      v193 = (unint64_t *)&v192->__shared_owners_;
      do
        v194 = __ldaxr(v193);
      while (__stlxr(v194 - 1, v193));
      if (!v194)
      {
        ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
        std::__shared_weak_count::__release_weak(v192);
      }
      goto LABEL_146;
    }
    v134 = DWORD2(v487);
    v135 = *(int **)(v124 + 160);
    v136 = *(float *)v122;
    v137 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
    if ((v137 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
    {
      sub_1C98CFF14();
      __cxa_guard_release(&qword_1ED52ACD8);
    }
    if (v134 < 0 || v133[8] <= v134)
    {
      v180 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
      if ((v180 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
      {
        qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
        __cxa_guard_release(&qword_1ED52ACD0);
      }
      v181 = qword_1ED52ACE0;
      if (!os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_ERROR))
        goto LABEL_172;
      LOWORD(memptr) = 0;
      v197 = v181;
      v198 = "invalid batch index";
      goto LABEL_199;
    }
    if (*(_DWORD *)(v129 + 24) != 0x4000)
    {
      v195 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
      if ((v195 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
      {
        qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
        __cxa_guard_release(&qword_1ED52ACD0);
      }
      v196 = qword_1ED52ACE0;
      if (!os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_ERROR))
        goto LABEL_172;
      LOWORD(memptr) = 0;
      v197 = v196;
      v198 = "image input size is not correct";
LABEL_199:
      _os_log_error_impl(&dword_1C9870000, v197, OS_LOG_TYPE_ERROR, v198, (uint8_t *)&memptr, 2u);
LABEL_172:
      v182 = 0;
      goto LABEL_173;
    }
    memcpy((void *)(*((_QWORD *)v133 + 5) + 4 * (49152 * v134)), *(const void **)(v129 + 8), 0x10000uLL);
    v138 = 0;
    v139 = 1.0 / v136;
    LODWORD(v459) = HIDWORD(*(_QWORD *)(v122 + 4));
    v140 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)(v122 + 4), 0);
    v464 = vmulq_n_f32(vsubq_f32((float32x4_t)xmmword_1C99275B0, v140), v139);
    v467 = vmulq_n_f32(vsubq_f32((float32x4_t)xmmword_1C99275A0, v140), v139);
    v141 = vmulq_n_f32(vsubq_f32((float32x4_t)xmmword_1C99275C0, v140), v139);
    v142 = vmulq_n_f32(vsubq_f32((float32x4_t)xmmword_1C99275D0, v140), v139);
    v143 = vmulq_n_f32(vsubq_f32((float32x4_t)xmmword_1C99275E0, v140), v139);
    v144 = vmulq_n_f32(vsubq_f32((float32x4_t)xmmword_1C99275F0, v140), v139);
    v145 = vmulq_n_f32(vsubq_f32((float32x4_t)xmmword_1C9927600, v140), v139);
    v146 = vmulq_n_f32(vsubq_f32((float32x4_t)xmmword_1C9927610, v140), v139);
    v147 = vmulq_n_f32(vsubq_f32((float32x4_t)xmmword_1C9927620, v140), v139);
    v148 = vmulq_n_f32(vsubq_f32((float32x4_t)xmmword_1C9927630, v140), v139);
    v149 = *((_QWORD *)v133 + 5) + 4 * (49152 * v134 + 0x4000);
    v150 = vmulq_n_f32(vsubq_f32((float32x4_t)xmmword_1C9927640, v140), v139);
    v151 = vmulq_n_f32(vsubq_f32((float32x4_t)xmmword_1C9927650, v140), v139);
    v152 = vmulq_n_f32(vsubq_f32((float32x4_t)xmmword_1C9927660, v140), v139);
    v153 = vmulq_n_f32(vsubq_f32((float32x4_t)xmmword_1C9927670, v140), v139);
    v154 = vmulq_n_f32(vsubq_f32((float32x4_t)xmmword_1C9927680, v140), v139);
    v155 = vmulq_n_f32(vsubq_f32((float32x4_t)xmmword_1C9927690, v140), v139);
    v156 = vmulq_n_f32(vsubq_f32((float32x4_t)xmmword_1C99276A0, v140), v139);
    v157 = vmulq_n_f32(vsubq_f32((float32x4_t)xmmword_1C99276B0, v140), v139);
    v158 = vmulq_n_f32(vsubq_f32((float32x4_t)xmmword_1C99276C0, v140), v139);
    v159 = vmulq_n_f32(vsubq_f32((float32x4_t)xmmword_1C99276D0, v140), v139);
    v160 = vmulq_n_f32(vsubq_f32((float32x4_t)xmmword_1C99276E0, v140), v139);
    v161 = vmulq_n_f32(vsubq_f32((float32x4_t)xmmword_1C99276F0, v140), v139);
    v162 = vmulq_n_f32(vsubq_f32((float32x4_t)xmmword_1C9927700, v140), v139);
    v163 = vmulq_n_f32(vsubq_f32((float32x4_t)xmmword_1C9927710, v140), v139);
    v164 = vmulq_n_f32(vsubq_f32((float32x4_t)xmmword_1C9927720, v140), v139);
    v165 = vmulq_n_f32(vsubq_f32((float32x4_t)xmmword_1C9927730, v140), v139);
    v166 = vmulq_n_f32(vsubq_f32((float32x4_t)xmmword_1C9927740, v140), v139);
    v167 = vmulq_n_f32(vsubq_f32((float32x4_t)xmmword_1C9927750, v140), v139);
    v168 = vsubq_f32((float32x4_t)xmmword_1C9927770, v140);
    v169 = vsubq_f32((float32x4_t)xmmword_1C9927780, v140);
    v170 = vsubq_f32((float32x4_t)xmmword_1C9927790, v140);
    v171 = vmulq_n_f32(vsubq_f32((float32x4_t)xmmword_1C9927760, v140), v139);
    v172 = vmulq_n_f32(v168, v139);
    v173 = vmulq_n_f32(v169, v139);
    v174 = vmulq_n_f32(v170, v139);
    do
    {
      v175 = (float32x4_t *)(v149 + v138);
      *v175 = v467;
      v175[1] = v464;
      v175[2] = v141;
      v175[3] = v142;
      v175[4] = v143;
      v175[5] = v144;
      v175[6] = v145;
      v175[7] = v146;
      v175[8] = v147;
      v175[9] = v148;
      v175[10] = v150;
      v175[11] = v151;
      v175[12] = v152;
      v175[13] = v153;
      v175[14] = v154;
      v175[15] = v155;
      v175[16] = v156;
      v175[17] = v157;
      v175[18] = v158;
      v175[19] = v159;
      v175[20] = v160;
      v175[21] = v161;
      v175[22] = v162;
      v175[23] = v163;
      v175[24] = v164;
      v175[25] = v165;
      v175[26] = v166;
      v175[27] = v167;
      v175[28] = v171;
      v175[29] = v172;
      v175[30] = v173;
      v138 += 512;
      v175[31] = v174;
    }
    while ((_DWORD)v138 != 0x10000);
    v176 = 0;
    v177 = (float32x4_t *)(v149 + v138);
    do
    {
      v174.f32[0] = v139 * (float)((float)v176 - v459);
      v174 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v174.f32, 0);
      *v177 = v174;
      v177[1] = v174;
      v177[2] = v174;
      v177[3] = v174;
      v177[4] = v174;
      v177[5] = v174;
      v177[6] = v174;
      v177[7] = v174;
      v177[8] = v174;
      v177[9] = v174;
      v177[10] = v174;
      v177[11] = v174;
      v177[12] = v174;
      v177[13] = v174;
      v177[14] = v174;
      v177[15] = v174;
      v177[16] = v174;
      v177[17] = v174;
      v177[18] = v174;
      v177[19] = v174;
      v177[20] = v174;
      v177[21] = v174;
      v177[22] = v174;
      v177[23] = v174;
      v177[24] = v174;
      v177[25] = v174;
      v177[26] = v174;
      v177[27] = v174;
      v177[28] = v174;
      v177[29] = v174;
      v177[30] = v174;
      v177[31] = v174;
      ++v176;
      v177 += 32;
    }
    while (v176 != 128);
    v178 = (int *)*((_QWORD *)v133 + 8);
    v179 = &v178[10 * v134];
    if (v135 == v178)
    {
      memptr = 0;
      malloc_type_posix_memalign(&memptr, 0x20uLL, 0x40uLL, 0x49090899uLL);
      v199 = memptr;
      v200 = *v135;
      *(_DWORD *)memptr = *v135;
      v199[1] = v135[1];
      v199[2] = v135[2];
      v199[3] = v135[3];
      v199[4] = v135[4];
      v199[5] = v135[5];
      v199[6] = v135[6];
      v199[7] = v135[7];
      v199[8] = v135[8];
      v199[9] = v135[9];
      *v179 = v200;
      v179[1] = v199[1];
      v179[2] = v199[2];
      v179[3] = v199[3];
      v179[4] = v199[4];
      v179[5] = v199[5];
      v179[6] = v199[6];
      v179[7] = v199[7];
      v179[8] = v199[8];
      v179[9] = v199[9];
      free(v199);
    }
    else
    {
      *v179 = *v135;
      v179[1] = v135[1];
      v179[2] = v135[2];
      v179[3] = v135[3];
      v179[4] = v135[4];
      v179[5] = v135[5];
      v179[6] = v135[6];
      v179[7] = v135[7];
      v179[8] = v135[8];
      v179[9] = v135[9];
    }
    v182 = 1;
LABEL_173:
    v121 &= v182;
    v183 = v481;
    v184 = &v481;
    v185 = &v481;
    if (v481)
    {
      while (1)
      {
        while (1)
        {
          v185 = (uint64_t **)v183;
          v186 = v183[4];
          if ((unint64_t)v133 >= v186)
            break;
          v183 = *v185;
          v184 = v185;
          if (!*v185)
            goto LABEL_180;
        }
        if (v186 >= (unint64_t)v133)
          break;
        v183 = v185[1];
        if (!v183)
        {
          v184 = v185 + 1;
          goto LABEL_180;
        }
      }
    }
    else
    {
LABEL_180:
      v187 = (uint64_t *)operator new(0x30uLL);
      v188 = v187;
      v189 = v487;
      v187[4] = (uint64_t)v133;
      v187[5] = v189;
      if (v189)
      {
        v190 = (unint64_t *)(v189 + 8);
        do
          v191 = __ldxr(v190);
        while (__stxr(v191 + 1, v190));
      }
      *v187 = 0;
      v187[1] = 0;
      v187[2] = (uint64_t)v185;
      *v184 = v187;
      if (*v480)
      {
        v480 = (uint64_t **)*v480;
        v188 = *v184;
      }
      sub_1C9880828(v481, v188);
      ++v482;
    }
    v192 = (std::__shared_weak_count *)v487;
    if ((_QWORD)v487)
      goto LABEL_189;
LABEL_146:
    ++v120;
  }
  while (v120 != v460);
  v201 = (uint64_t *)v480;
  if (v480 == &v481)
    v202 = 0;
  else
    v202 = v121;
  if (v202 == 1)
  {
    do
    {
      v203 = (_QWORD *)v201[4];
      v204 = operator new(0x10uLL);
      *(_QWORD *)&v487 = v204 + 2;
      *((_QWORD *)&v487 + 1) = v204 + 2;
      *v204 = 0;
      v204[1] = 0;
      v486 = v204;
      v205 = v203[5];
      v206 = sub_1C98AF10C((_QWORD *)v203[2], (unint64_t)"network_inputs_image_2_0_bridge");
      if (v206)
        v207 = *((int *)v206 + 6);
      else
        v207 = -1;
      v204[v207] = v205;
      v208 = v203[8];
      v209 = sub_1C98AF10C((_QWORD *)v203[2], (unint64_t)"network_inputs_var_0_bridge");
      if (v209)
        v210 = *((int *)v209 + 6);
      else
        v210 = -1;
      v204[v210] = v208;
      v211 = sub_1C98AF10C((_QWORD *)v203[3], (unint64_t)"tongue_logits_output");
      if (v211)
        v212 = *((_DWORD *)v211 + 6);
      else
        v212 = -1;
      v213 = 5;
      if (v212 != -1)
        v213 = 6;
      v214 = 8 * (v213 + 2 * *((unsigned __int8 *)v203 + 292));
      v215 = (char *)operator new(v214);
      memptr = v215;
      v485 = (unint64_t)&v215[v214];
      bzero(v215, v214);
      v484 = &v215[v214];
      v216 = v203[23];
      v217 = sub_1C98AF10C((_QWORD *)v203[3], (unint64_t)"angles_output");
      if (v217)
        v218 = *((int *)v217 + 6);
      else
        v218 = -1;
      *(_QWORD *)&v215[8 * v218] = v216;
      v219 = v203[26];
      v220 = sub_1C98AF10C((_QWORD *)v203[3], (unint64_t)"translation_output");
      if (v220)
        v221 = *((int *)v220 + 6);
      else
        v221 = -1;
      *(_QWORD *)&v215[8 * v221] = v219;
      v222 = v203[11];
      v223 = sub_1C98AF10C((_QWORD *)v203[3], (unint64_t)"bs_latent_output");
      if (v223)
        v224 = *((int *)v223 + 6);
      else
        v224 = -1;
      *(_QWORD *)&v215[8 * v224] = v222;
      v225 = v203[29];
      v226 = sub_1C98AF10C((_QWORD *)v203[3], (unint64_t)"gaze_output");
      if (v226)
        v227 = *((int *)v226 + 6);
      else
        v227 = -1;
      *(_QWORD *)&v215[8 * v227] = v225;
      v228 = v203[20];
      v229 = sub_1C98AF10C((_QWORD *)v203[3], (unint64_t)"failure_logit_output");
      if (v229)
        v230 = *((int *)v229 + 6);
      else
        v230 = -1;
      *(_QWORD *)&v215[8 * v230] = v228;
      if (*((_BYTE *)v203 + 292))
      {
        v231 = sub_1C98AF10C((_QWORD *)v203[3], (unint64_t)"basic_ens_output");
        if (v231)
          v232 = *((int *)v231 + 6);
        else
          v232 = -1;
        *(_QWORD *)&v215[8 * v232] = v203[17];
        v233 = sub_1C98AF10C((_QWORD *)v203[3], (unint64_t)"kas_output");
        if (v233)
          v234 = *((int *)v233 + 6);
        else
          v234 = -1;
        *(_QWORD *)&v215[8 * v234] = v203[14];
      }
      if (v212 != -1)
        *(_QWORD *)&v215[8 * v212] = v203[32];
      (*(void (**)(_QWORD, void **, void **, _QWORD))(*(_QWORD *)*v203 + 16))(*v203, &v486, &memptr, 0);
      if (memptr)
      {
        v484 = (char *)memptr;
        operator delete(memptr);
      }
      if (v486)
      {
        *(_QWORD *)&v487 = v486;
        operator delete(v486);
      }
      v235 = (uint64_t *)v201[1];
      if (v235)
      {
        do
        {
          v236 = (uint64_t **)v235;
          v235 = (uint64_t *)*v235;
        }
        while (v235);
      }
      else
      {
        do
        {
          v236 = (uint64_t **)v201[2];
          _ZF = *v236 == v201;
          v201 = (uint64_t *)v236;
        }
        while (!_ZF);
      }
      v201 = (uint64_t *)v236;
    }
    while (v236 != &v481);
  }
LABEL_258:
  v237 = (unint64_t)((char *)v453 - (char *)v452) >> 4;
  sub_1C98AF09C(v481);
  kdebug_trace();
  kdebug_trace();
  if ((int)v237 >= 1)
  {
    for (j = 0; j != ((unint64_t)((char *)v453 - (char *)v452) >> 4); ++j)
    {
      v239 = *(_QWORD *)(*v462 + 16 * j);
      v240 = *(_QWORD *)(v239 + 64);
      v241 = *(std::__shared_weak_count **)(v239 + 72);
      if (v241)
      {
        v242 = (unint64_t *)&v241->__shared_owners_;
        do
          v243 = __ldxr(v242);
        while (__stxr(v243 + 1, v242));
        sub_1C98ADE3C((uint64_t)&v486, (uint64_t)a1, j, v237);
        do
          v244 = __ldxr(v242);
        while (__stxr(v244 + 1, v242));
        v245 = v241;
      }
      else
      {
        sub_1C98ADE3C((uint64_t)&v486, (uint64_t)a1, j, v237);
        v245 = 0;
      }
      v471 = v240;
      v472 = v245;
      v246 = (std::__shared_weak_count *)v487;
      v470[0] = (uint64_t)v486;
      v470[1] = v487;
      if ((_QWORD)v487)
      {
        v247 = (unint64_t *)(v487 + 8);
        do
          v248 = __ldxr(v247);
        while (__stxr(v248 + 1, v247));
        sub_1C98ADFC8((uint64_t)a1, (uint64_t)&v471, v470, DWORD2(v487));
        do
          v249 = __ldaxr(v247);
        while (__stlxr(v249 - 1, v247));
        if (!v249)
        {
          ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
          std::__shared_weak_count::__release_weak(v246);
        }
        v250 = v472;
        if (!v472)
        {
LABEL_281:
          v253 = (std::__shared_weak_count *)v487;
          if ((_QWORD)v487)
            goto LABEL_282;
          goto LABEL_287;
        }
      }
      else
      {
        sub_1C98ADFC8((uint64_t)a1, (uint64_t)&v471, v470, DWORD2(v487));
        v250 = v472;
        if (!v472)
          goto LABEL_281;
      }
      v251 = (unint64_t *)&v250->__shared_owners_;
      do
        v252 = __ldaxr(v251);
      while (__stlxr(v252 - 1, v251));
      if (v252)
        goto LABEL_281;
      ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
      std::__shared_weak_count::__release_weak(v250);
      v253 = (std::__shared_weak_count *)v487;
      if ((_QWORD)v487)
      {
LABEL_282:
        v254 = (unint64_t *)&v253->__shared_owners_;
        do
          v255 = __ldaxr(v254);
        while (__stlxr(v255 - 1, v254));
        if (!v255)
        {
          ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
          std::__shared_weak_count::__release_weak(v253);
        }
      }
LABEL_287:
      if (v241)
      {
        v256 = (unint64_t *)&v241->__shared_owners_;
        do
          v257 = __ldaxr(v256);
        while (__stlxr(v257 - 1, v256));
        if (!v257)
        {
          ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
          std::__shared_weak_count::__release_weak(v241);
        }
      }
    }
  }
  kdebug_trace();
  kdebug_trace();
  v258 = (uint64_t *)*v462;
  v454 = (uint64_t *)v462[1];
  if ((uint64_t *)*v462 != v454)
  {
    __asm { FMOV            V12.2S, #12.5 }
    while (1)
    {
      v261 = *v258;
      v263 = *(_QWORD *)(*v258 + 64);
      v262 = *(std::__shared_weak_count **)(*v258 + 72);
      if (v262)
      {
        v264 = (unint64_t *)&v262->__shared_owners_;
        do
          v265 = __ldxr(v264);
        while (__stxr(v265 + 1, v264));
        v261 = *v258;
        do
          v266 = __ldxr(v264);
        while (__stxr(v266 + 1, v264));
        v461 = v262;
      }
      else
      {
        v461 = 0;
      }
      v465 = v262;
      v468 = v258;
      v268 = a1[1];
      v267 = (std::__shared_weak_count *)a1[2];
      if (v267)
      {
        v269 = (unint64_t *)&v267->__shared_owners_;
        do
          v270 = __ldxr(v269);
        while (__stxr(v270 + 1, v269));
      }
      v458 = v267;
      v457 = a1[5];
      v271 = *(_DWORD *)(v263 + 40);
      v272 = *(_QWORD *)(v263 + 24);
      v273 = *(_DWORD *)(v263 + 336);
      v274 = *(_QWORD *)(v263 + 320);
      v275 = *(int **)(v263 + 424);
      v480 = *(uint64_t ***)(v263 + 464);
      v481 = *(uint64_t **)(v263 + 448);
      v482 = v480;
      v276 = (int)v480;
      v277 = *(int **)(v263 + 472);
      v477[0] = *(_QWORD *)(v263 + 512);
      v477[1] = *(_QWORD *)(v263 + 496);
      v478 = v477[0];
      v479 = 0;
      v473 = v271 - 2;
      v474 = v272;
      v475 = v271;
      v476 = 0;
      v278 = *(float *)v261;
      v279 = (3 * ((int)v480 / 3));
      v280 = *(char **)(v263 + 216);
      v456 = *(uint64_t **)(v268 + 144);
      v455 = v268;
      if (v275 == (int *)v280)
      {
        v486 = 0;
        malloc_type_posix_memalign(&v486, 0x20uLL, (4 * v279 + 31) & 0x7FFFFFFE0, 0x49090899uLL);
        v289 = (char *)v486;
        v281 = v276 + 2;
        if (v281 >= 5)
        {
          v290 = (v279 - 1) & 0x3FFFFFFFFFFFFFFFLL;
          v291 = v290 + 1;
          v292 = v275;
          v293 = (char *)v486;
          if (v290 < 7 || (v292 = v275, v293 = (char *)v486, (unint64_t)((_BYTE *)v486 - (_BYTE *)v275) < 0x20))
          {
            do
            {
LABEL_320:
              v299 = *v292++;
              *(_DWORD *)v293 = v299;
              v293 += 4;
            }
            while (v293 != &v289[4 * v279]);
          }
          else
          {
            v294 = v291 & 0x7FFFFFFFFFFFFFF8;
            v292 = &v275[v294];
            v295 = (char *)v486 + 16;
            v296 = (__int128 *)(v275 + 4);
            v297 = v291 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v298 = *v296;
              *(v295 - 1) = *(v296 - 1);
              *v295 = v298;
              v295 += 2;
              v296 += 2;
              v297 -= 8;
            }
            while (v297);
            if (v291 != (v291 & 0x7FFFFFFFFFFFFFF8))
            {
              v293 = &v289[v294 * 4];
              goto LABEL_320;
            }
          }
          if (v290 < 7)
          {
            v300 = v289;
            v301 = v275;
            goto LABEL_331;
          }
          v300 = v289;
          v301 = v275;
          if ((unint64_t)(v280 - v289) < 0x20)
          {
            do
            {
LABEL_331:
              v308 = *(_DWORD *)v300;
              v300 += 4;
              *v301++ = v308;
            }
            while (v301 != &v275[v279]);
          }
          else
          {
            v302 = v291 & 0x7FFFFFFFFFFFFFF8;
            v300 = &v289[v302 * 4];
            v303 = v275 + 4;
            v304 = (__int128 *)(v289 + 16);
            v305 = v291 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v306 = *v304;
              *(v303 - 1) = *(v304 - 1);
              *v303 = v306;
              v303 += 2;
              v304 += 2;
              v305 -= 8;
            }
            while (v305);
            if (v291 != (v291 & 0x7FFFFFFFFFFFFFF8))
            {
              v301 = &v275[v302];
              goto LABEL_331;
            }
          }
        }
        free(v289);
        goto LABEL_333;
      }
      v281 = (_DWORD)v480 + 2;
      if (((_DWORD)v480 + 2) < 5)
        goto LABEL_333;
      v282 = (v279 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      if (v282 < 7)
        break;
      v283 = *(char **)(v263 + 216);
      if ((unint64_t)(v280 - (char *)v275) < 0x20)
        goto LABEL_328;
      v284 = (v282 + 1) & 0x7FFFFFFFFFFFFFF8;
      v285 = v280 + 16;
      v286 = (__int128 *)(v275 + 4);
      v287 = v284;
      do
      {
        v288 = *v286;
        *(v285 - 1) = *(v286 - 1);
        *v285 = v288;
        v285 += 2;
        v286 += 2;
        v287 -= 8;
      }
      while (v287);
      if (v282 + 1 != v284)
      {
        v283 = &v280[4 * v284];
        v275 += v284;
        goto LABEL_328;
      }
LABEL_333:
      LODWORD(memptr) = v279;
      v484 = v280;
      v485 = v279;
      *(_QWORD *)&v487 = &v480;
      *((_QWORD *)&v487 + 1) = &v473;
      v488 = 1065353216;
      sub_1C98E81D0((unsigned int *)&memptr, (uint64_t)&v486);
      v309 = (float32x2_t *)(v274 + 4 * (v273 - 6));
      v310 = v309[1].f32[0];
      v311 = *(float *)(v263 + 56) - v310;
      v312 = vsub_f32(*(float32x2_t *)(v263 + 48), *v309);
      v313 = 1.0 / sqrtf(vaddv_f32(vmul_f32(v312, v312)) + (float)(v311 * v311));
      *((float32x2_t *)v280 + 9) = vadd_f32(*v309, vmul_f32(vmul_n_f32(v312, v313), _D12));
      *((float *)v280 + 20) = v310 + (float)((float)(v311 * v313) * 12.5);
      v314 = (float32x2_t *)(v274 + 4 * (v273 - 3));
      v315 = v314[1].f32[0];
      v316 = *(float *)(v263 + 56) - v315;
      v317 = vsub_f32(*(float32x2_t *)(v263 + 48), *v314);
      v318 = 1.0 / sqrtf(vaddv_f32(vmul_f32(v317, v317)) + (float)(v316 * v316));
      *(float32x2_t *)(v280 + 156) = vadd_f32(*v314, vmul_f32(vmul_n_f32(v317, v318), _D12));
      *((float *)v280 + 41) = v315 + (float)((float)(v316 * v318) * 12.5);
      v319 = __sincosf_stret(*(float *)v263);
      v320 = __sincosf_stret(*(float *)(v263 + 4));
      v322 = __sincosf_stret(*(float *)(v263 + 8));
      if (v281 >= 5)
      {
        v323 = 0;
        v321.i64[0] = *(_QWORD *)(v263 + 12);
        v321.i32[2] = *(_DWORD *)(v263 + 20);
        v325.i64[0] = __PAIR64__((float)((float)-(float)(v319.__sinval * v320.__sinval) * v322.__sinval)+ (float)(v319.__cosval * v322.__cosval), -(float)(v320.__cosval * v322.__sinval));
        v326.i32[3] = 0;
        v326.i32[0] = LODWORD(v320.__sinval);
        do
        {
          v327 = 4 * v323;
          v328 = (float *)&v280[4 * v323 + 8];
          v326.f32[2] = v319.__cosval * v320.__cosval;
          v326.f32[1] = -(float)(v320.__cosval * v319.__sinval);
          v324.i64[1] = COERCE_UNSIGNED_INT((float)(v320.__sinval * (float)-(float)(v319.__cosval * v322.__cosval))+ (float)(v319.__sinval * v322.__sinval));
          v325.i64[1] = COERCE_UNSIGNED_INT((float)((float)(v319.__cosval * v320.__sinval) * v322.__sinval)+ (float)(v322.__cosval * v319.__sinval));
          v324.f32[1] = (float)(v320.__sinval * (float)(v319.__sinval * v322.__cosval))
                      + (float)(v319.__cosval * v322.__sinval);
          v324.f32[0] = v320.__cosval * v322.__cosval;
          v329 = vaddq_f32(v321, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v325, *(float *)&v280[4 * v323 + 4]), v324, *(float *)&v280[v327]), v326, *v328));
          *(_QWORD *)&v280[v327] = v329.i64[0];
          *v328 = v329.f32[2];
          v323 += 3;
        }
        while (v323 < v279);
      }
      v330 = *(int **)v457;
      v331 = *(_DWORD *)(v457 + 16);
      v332 = (3 * v331);
      if (v277 == *(int **)v457)
      {
        v486 = 0;
        malloc_type_posix_memalign(&v486, 0x20uLL, (4 * v332 + 31) & 0x7FFFFFFE0, 0x49090899uLL);
        v340 = (char *)v486;
        if (v331)
        {
          v341 = (v332 - 1) & 0x3FFFFFFFFFFFFFFFLL;
          v342 = v341 + 1;
          v343 = v277;
          v344 = (char *)v486;
          if (v341 < 7 || (v343 = v277, v344 = (char *)v486, (unint64_t)((_BYTE *)v486 - (_BYTE *)v277) < 0x20))
          {
            do
            {
LABEL_351:
              v350 = *v343++;
              *(_DWORD *)v344 = v350;
              v344 += 4;
            }
            while (v344 != &v340[4 * v332]);
          }
          else
          {
            v345 = v342 & 0x7FFFFFFFFFFFFFF8;
            v343 = &v277[v345];
            v346 = (char *)v486 + 16;
            v347 = (__int128 *)(v277 + 4);
            v348 = v342 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v349 = *v347;
              *(v346 - 1) = *(v347 - 1);
              *v346 = v349;
              v346 += 2;
              v347 += 2;
              v348 -= 8;
            }
            while (v348);
            if (v342 != (v342 & 0x7FFFFFFFFFFFFFF8))
            {
              v344 = &v340[v345 * 4];
              goto LABEL_351;
            }
          }
          if (v341 < 7)
          {
            v351 = v340;
            v352 = v277;
            goto LABEL_362;
          }
          v351 = v340;
          v352 = v277;
          if ((unint64_t)((char *)v330 - v340) < 0x20)
          {
            do
            {
LABEL_362:
              v359 = *(_DWORD *)v351;
              v351 += 4;
              *v352++ = v359;
            }
            while (v352 != &v277[v332]);
          }
          else
          {
            v353 = v342 & 0x7FFFFFFFFFFFFFF8;
            v351 = &v340[v353 * 4];
            v354 = v277 + 4;
            v355 = (__int128 *)(v340 + 16);
            v356 = v342 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v357 = *v355;
              *(v354 - 1) = *(v355 - 1);
              *v354 = v357;
              v354 += 2;
              v355 += 2;
              v356 -= 8;
            }
            while (v356);
            if (v342 != (v342 & 0x7FFFFFFFFFFFFFF8))
            {
              v352 = &v277[v353];
              goto LABEL_362;
            }
          }
        }
        free(v340);
        goto LABEL_364;
      }
      if (!v331)
        goto LABEL_364;
      v333 = (v332 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      if (v333 < 7)
      {
        v334 = *(int **)v457;
        do
        {
LABEL_359:
          v358 = *v277++;
          *v334++ = v358;
        }
        while (v334 != &v330[v332]);
        goto LABEL_364;
      }
      v334 = *(int **)v457;
      if ((unint64_t)((char *)v330 - (char *)v277) < 0x20)
        goto LABEL_359;
      v335 = (v333 + 1) & 0x7FFFFFFFFFFFFFF8;
      v336 = v330 + 4;
      v337 = (__int128 *)(v277 + 4);
      v338 = v335;
      do
      {
        v339 = *v337;
        *(v336 - 1) = *(v337 - 1);
        *v336 = v339;
        v336 += 2;
        v337 += 2;
        v338 -= 8;
      }
      while (v338);
      if (v333 + 1 != v335)
      {
        v334 = &v330[v335];
        v277 += v335;
        goto LABEL_359;
      }
LABEL_364:
      LODWORD(memptr) = 3 * v331;
      v484 = (char *)v330;
      v485 = v332;
      *(_QWORD *)&v487 = v477;
      *((_QWORD *)&v487 + 1) = &v473;
      v488 = 1065353216;
      sub_1C98E81D0((unsigned int *)&memptr, (uint64_t)&v486);
      v360 = __sincosf_stret(*(float *)v263);
      v361 = __sincosf_stret(*(float *)(v263 + 4));
      v365 = __sincosf_stret(*(float *)(v263 + 8));
      v363.n128_f32[0] = v365.__cosval;
      v362.n128_f32[0] = v365.__sinval;
      if (v331)
      {
        v366 = 0;
        v364.i64[0] = *(_QWORD *)(v263 + 12);
        v364.i32[2] = *(_DWORD *)(v263 + 20);
        v362.n128_f32[0] = v361.__cosval * v365.__cosval;
        v362.n128_f32[1] = (float)(v361.__sinval * (float)(v360.__sinval * v365.__cosval))
                         + (float)(v360.__cosval * v365.__sinval);
        v362.n128_u64[1] = COERCE_UNSIGNED_INT((float)(v361.__sinval * (float)-(float)(v360.__cosval * v365.__cosval))+ (float)(v360.__sinval * v365.__sinval));
        v363.n128_u64[0] = __PAIR64__((float)((float)-(float)(v360.__sinval * v361.__sinval) * v365.__sinval)+ (float)(v360.__cosval * v365.__cosval), -(float)(v361.__cosval * v365.__sinval));
        v363.n128_u64[1] = COERCE_UNSIGNED_INT((float)((float)(v360.__cosval * v361.__sinval) * v365.__sinval)+ (float)(v365.__cosval * v360.__sinval));
        v367.i32[3] = 0;
        v367.i32[0] = LODWORD(v361.__sinval);
        do
        {
          v368 = v366;
          v369 = (float *)&v330[v366 + 2];
          v367.f32[2] = v360.__cosval * v361.__cosval;
          v367.f32[1] = -(float)(v361.__cosval * v360.__sinval);
          v370 = vaddq_f32(v364, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32((float32x4_t)v363, *(float *)&v330[v366 + 1]), (float32x4_t)v362, *(float *)&v330[v368]), v367, *v369));
          *(_QWORD *)&v330[v368] = v370.i64[0];
          *v369 = v370.f32[2];
          v366 += 3;
        }
        while (v366 < v332);
      }
      v371 = *(unsigned int *)(v455 + 104);
      if ((_DWORD)v371)
      {
        v372 = 0;
        v373 = *(_QWORD *)(v455 + 88);
        v374 = *(int **)v457;
        v375 = 3 * v371;
        v376 = *(_QWORD *)(v457 + 24);
        do
        {
          v377 = 4 * v372;
          v378 = (float *)&v374[3 * *(_DWORD *)(v373 + v377)];
          v379 = *v378;
          v380 = v378[1];
          v381 = v378[2];
          v382 = (float *)&v374[3 * *(_DWORD *)(v373 + 4 * (v372 + 1))];
          v383 = (float *)&v374[3 * *(_DWORD *)(v373 + 4 * (v372 + 2))];
          v384 = *v382 - v379;
          v385 = v382[1] - v380;
          v386 = v382[2] - v381;
          v387 = *v383 - v379;
          v388 = v383[1] - v380;
          v389 = v383[2] - v381;
          v390 = (float)(v385 * v389) - (float)(v386 * v388);
          v391 = (float)(v386 * v387) - (float)(v384 * v389);
          v392 = (float)(v384 * v388) - (float)(v385 * v387);
          v393 = v376 + v377;
          v363.n128_f32[0] = sqrtf((float)(v392 * v392) + (float)((float)(v390 * v390) + (float)(v391 * v391)));
          if (v363.n128_f32[0] < 1.0e-12)
            v363.n128_f32[0] = 1.0e-12;
          *(float *)v393 = v390 / v363.n128_f32[0];
          *(float *)(v393 + 4) = v391 / v363.n128_f32[0];
          v362.n128_f32[0] = v392 / v363.n128_f32[0];
          *(_DWORD *)(v393 + 8) = v362.n128_u32[0];
          v372 += 3;
        }
        while (v375 != v372);
      }
      v394 = *((_DWORD *)v456 + 4);
      if (v394 >= 10)
      {
        v395 = 0;
        v396 = 0;
        v397 = (v394 / 10);
        v398 = *(_QWORD *)(v263 + 216);
        v399 = *v456;
        v400 = *(int **)v457;
        v401 = v456[3];
        v402 = *(_QWORD *)(v457 + 24);
        do
        {
          v403 = 0;
          v404 = v398 + 4 * (3 * v396 + v279);
          v362.n128_u32[0] = 1.0;
          do
          {
            v405 = 4 * (v395 + v403);
            v406 = (float32x2_t *)&v400[3 * *(_DWORD *)(v399 + v405)];
            v407 = (float32x2_t *)&v400[3 * *(_DWORD *)(v399 + v405 + 4)];
            v408 = (float32x2_t *)&v400[3 * *(_DWORD *)(v399 + v405 + 8)];
            v409 = *(float *)(v401 + v405);
            v410 = *(float *)(v401 + v405 + 4);
            v411 = *(float *)(v401 + v405 + 8);
            v363.n128_u64[0] = (unint64_t)vadd_f32(vadd_f32(vmul_n_f32(*v406, v409), vmul_n_f32(*v407, v410)), vmul_n_f32(*v408, v411));
            v412 = (float)((float)(v409 * v406[1].f32[0]) + (float)(v410 * v407[1].f32[0]))
                 + (float)(v411 * v408[1].f32[0]);
            v413 = sqrtf((float)(vmul_f32((float32x2_t)v363.n128_u64[0], (float32x2_t)v363.n128_u64[0]).f32[0]+ vmuls_lane_f32(v363.n128_f32[1], (float32x2_t)v363.n128_u64[0], 1))+ (float)(v412 * v412));
            v414 = 1.0e-12;
            if (v413 < 1.0e-12)
              v413 = 1.0e-12;
            v415 = (float *)(v402 + v405);
            v416 = *v415;
            v417 = v415[1];
            v418 = v415[2];
            v419 = sqrtf((float)((float)(v416 * v416) + (float)(v417 * v417)) + (float)(v418 * v418));
            if (v419 >= 1.0e-12)
              v414 = v419;
            v420 = (float)((float)((float)(v416 * v363.n128_f32[0])
                                 + vmuls_lane_f32(v417, (float32x2_t)v363.n128_u64[0], 1))
                         + (float)(v412 * v418))
                 / (float)(v413 * v414);
            v421 = fabsf(v420);
            _NF = v420 < 0.0 || v421 < v362.n128_f32[0];
            if (_NF)
            {
              if (v421 < v362.n128_f32[0])
                v362.n128_f32[0] = v421;
              *(_QWORD *)v404 = v363.n128_u64[0];
              *(float *)(v404 + 8) = v412;
            }
            v403 += 3;
          }
          while (v403 != 30);
          ++v396;
          v395 += 30;
        }
        while (v396 != v397);
      }
      if (*(_DWORD *)(v263 + 208))
      {
        v423 = 0;
        v424 = 0;
        v425 = 0;
        do
        {
          v426 = (float *)(*(_QWORD *)(v263 + 216) + 4 * v423);
          v428 = v426[1];
          v427 = v426[2];
          v429 = *v426;
          if (v427 < 1.0)
            v427 = 1.0;
          v430 = *(_QWORD *)(v263 + 192) + 4 * (v424 & 0xFFFFFFFE);
          *(float *)v430 = *(float *)(v261 + 4) + (float)((float)(v429 * v278) / v427);
          v363.n128_u32[0] = *(_DWORD *)(v261 + 8);
          v362.n128_f32[0] = (float)((float)(v428 * v278) / v427) + v363.n128_f32[0];
          *(_DWORD *)(v430 + 4) = v362.n128_u32[0];
          ++v425;
          v424 += 2;
          v423 += 3;
        }
        while (v425 < *(unsigned int *)(v263 + 208));
      }
      if (!v458)
        goto LABEL_398;
      v431 = (unint64_t *)&v458->__shared_owners_;
      do
        v432 = __ldaxr(v431);
      while (__stlxr(v432 - 1, v431));
      if (!v432)
      {
        ((void (*)(std::__shared_weak_count *, __n128, __n128))v458->__on_zero_shared)(v458, v362, v363);
        std::__shared_weak_count::__release_weak(v458);
        if (v461)
        {
LABEL_399:
          v433 = (unint64_t *)&v461->__shared_owners_;
          do
            v434 = __ldaxr(v433);
          while (__stlxr(v434 - 1, v433));
          if (!v434)
          {
            ((void (*)(std::__shared_weak_count *, __n128, __n128))v461->__on_zero_shared)(v461, v362, v363);
            std::__shared_weak_count::__release_weak(v461);
          }
        }
      }
      else
      {
LABEL_398:
        if (v461)
          goto LABEL_399;
      }
      if (v465)
      {
        v435 = (unint64_t *)&v465->__shared_owners_;
        do
          v436 = __ldaxr(v435);
        while (__stlxr(v436 - 1, v435));
        if (!v436)
        {
          ((void (*)(std::__shared_weak_count *, __n128, __n128))v465->__on_zero_shared)(v465, v362, v363);
          std::__shared_weak_count::__release_weak(v465);
        }
      }
      v258 = v468 + 2;
      if (v468 + 2 == v454)
        goto LABEL_409;
    }
    v283 = *(char **)(v263 + 216);
    do
    {
LABEL_328:
      v307 = *v275++;
      *(_DWORD *)v283 = v307;
      v283 += 4;
    }
    while (v283 != &v280[4 * v279]);
    goto LABEL_333;
  }
LABEL_409:
  kdebug_trace();
  v437 = *v462;
  v438 = v462[1];
  if (*v462 != v438)
  {
    if ((a3 & 1) != 0)
    {
      do
      {
        v444 = *(_QWORD *)(*(_QWORD *)v437 + 64);
        v445 = *(std::__shared_weak_count **)(*(_QWORD *)v437 + 72);
        if (v445)
        {
          v446 = (unint64_t *)&v445->__shared_owners_;
          do
            v447 = __ldxr(v446);
          while (__stxr(v447 + 1, v446));
          v448 = (uint64_t *)(v444 + 24);
          sub_1C98E7DCC(0x33u, 0x34u, (uint64_t *)(v444 + 24));
          sub_1C98E7DCC(0, 1u, v448);
          sub_1C98E7DCC(2u, 3u, v448);
          sub_1C98E7DCC(8u, 9u, v448);
          sub_1C98E7DCC(0xEu, 0xFu, v448);
          v449.n128_f32[0] = sub_1C98E7DCC(0x11u, 0x12u, v448);
          do
            v450 = __ldaxr(v446);
          while (__stlxr(v450 - 1, v446));
          if (!v450)
          {
            ((void (*)(std::__shared_weak_count *, __n128))v445->__on_zero_shared)(v445, v449);
            std::__shared_weak_count::__release_weak(v445);
          }
        }
        else
        {
          v443 = (uint64_t *)(v444 + 24);
          sub_1C98E7DCC(0x33u, 0x34u, (uint64_t *)(v444 + 24));
          sub_1C98E7DCC(0, 1u, v443);
          sub_1C98E7DCC(2u, 3u, v443);
          sub_1C98E7DCC(8u, 9u, v443);
          sub_1C98E7DCC(0xEu, 0xFu, v443);
          sub_1C98E7DCC(0x11u, 0x12u, v443);
        }
        v437 += 16;
      }
      while (v437 != v438);
    }
    else
    {
      do
      {
        v439 = *(std::__shared_weak_count **)(*(_QWORD *)v437 + 72);
        if (v439)
        {
          v440 = (unint64_t *)&v439->__shared_owners_;
          do
            v441 = __ldxr(v440);
          while (__stxr(v441 + 1, v440));
          do
            v442 = __ldaxr(v440);
          while (__stlxr(v442 - 1, v440));
          if (!v442)
          {
            ((void (*)(std::__shared_weak_count *))v439->__on_zero_shared)(v439);
            std::__shared_weak_count::__release_weak(v439);
          }
        }
        v437 += 16;
      }
      while (v437 != v438);
    }
  }
}

void sub_1C98ADB48(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1ED52ACD8);
  _Unwind_Resume(a1);
}

_QWORD *sub_1C98ADB64(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;

  *a1 = off_1E8294AB0;
  v2 = a1[7];
  if (v2)
  {
    v3 = a1[8];
    v4 = (void *)a1[7];
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)a1[7];
    }
    a1[8] = v2;
    operator delete(v4);
  }
  v8 = (std::__shared_weak_count *)a1[6];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *a1 = &unk_1E8294C78;
  v11 = (std::__shared_weak_count *)a1[4];
  if (!v11)
    goto LABEL_21;
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    v14 = (std::__shared_weak_count *)a1[2];
    if (!v14)
      return a1;
  }
  else
  {
LABEL_21:
    v14 = (std::__shared_weak_count *)a1[2];
    if (!v14)
      return a1;
  }
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  return a1;
}

void sub_1C98ADCC8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;

  *a1 = off_1E8294AB0;
  v2 = a1[7];
  if (v2)
  {
    v3 = a1[8];
    v4 = (void *)a1[7];
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)a1[7];
    }
    a1[8] = v2;
    operator delete(v4);
  }
  v8 = (std::__shared_weak_count *)a1[6];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *a1 = &unk_1E8294C78;
  v11 = (std::__shared_weak_count *)a1[4];
  if (!v11)
    goto LABEL_21;
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    v14 = (std::__shared_weak_count *)a1[2];
    if (!v14)
      goto LABEL_27;
  }
  else
  {
LABEL_21:
    v14 = (std::__shared_weak_count *)a1[2];
    if (!v14)
      goto LABEL_27;
  }
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_27:
  JUMPOUT(0x1CAA44AFCLL);
}

void sub_1C98ADE3C(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v5;
  unsigned __int8 v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  unsigned __int8 v10;
  __int128 v11;
  unint64_t *v12;
  unint64_t v13;
  __int16 v14;
  uint8_t buf[2];

  if (a3 < 0 || a3 >= a4)
  {
    v10 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
    if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
    {
      qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
      __cxa_guard_release(&qword_1ED52ACD0);
    }
    v7 = qword_1ED52ACE0;
    if (!os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_ERROR))
      goto LABEL_9;
    *(_WORD *)buf = 0;
    v8 = "invalid face index";
    v9 = buf;
    goto LABEL_16;
  }
  v5 = *(_QWORD *)(a2 + 56);
  if ((int)((unint64_t)(*(_QWORD *)(a2 + 64) - v5) >> 4) < a4)
  {
    v6 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
    if ((v6 & 1) == 0)
    {
      if (__cxa_guard_acquire(&qword_1ED52ACD0))
      {
        qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
        __cxa_guard_release(&qword_1ED52ACD0);
      }
    }
    v7 = qword_1ED52ACE0;
    if (!os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_ERROR))
      goto LABEL_9;
    v14 = 0;
    v8 = "too many faces";
    v9 = (uint8_t *)&v14;
LABEL_16:
    _os_log_error_impl(&dword_1C9870000, v7, OS_LOG_TYPE_ERROR, v8, v9, 2u);
LABEL_9:
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = -1;
    return;
  }
  v11 = *(_OWORD *)(v5 + 16 * (a4 - 1));
  *(_OWORD *)a1 = v11;
  if (*((_QWORD *)&v11 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_DWORD *)(a1 + 16) = a3;
}

void sub_1C98ADFC8(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int a4)
{
  uint64_t v5;
  float32x2_t *v6;
  float v7;
  float32x2_t *v8;
  float32x2_t *v9;
  float v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  size_t v16;
  size_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  size_t v23;
  size_t v24;
  char *v25;
  unint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  _OWORD *v30;
  __int128 *v31;
  uint64_t v32;
  __int128 v33;
  int v34;
  uint64_t v35;
  _OWORD *v36;
  char *v37;
  uint64_t v38;
  __int128 v39;
  int v40;
  void *v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  __int128 v48;
  int v49;
  uint64_t v50;
  _OWORD *v51;
  char *v52;
  uint64_t v53;
  __int128 v54;
  int v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  float32x2_t *v60;
  char *v61;
  uint64_t v62;
  size_t v63;
  size_t v64;
  char *v65;
  unint64_t v66;
  char *v67;
  unint64_t v68;
  char *v69;
  size_t v70;
  size_t v71;
  char *v72;
  unint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  _OWORD *v77;
  __int128 *v78;
  uint64_t v79;
  __int128 v80;
  int v81;
  uint64_t v82;
  _OWORD *v83;
  char *v84;
  uint64_t v85;
  __int128 v86;
  int v87;
  void *v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  __int128 v95;
  int v96;
  uint64_t v97;
  _OWORD *v98;
  char *v99;
  uint64_t v100;
  __int128 v101;
  int v102;
  float32x2_t **v103;
  float32x2_t *v104;
  uint64_t v105;
  float32x2_t v106;
  unint64_t v107;
  float *v108;
  unint64_t v109;
  uint64_t v110;
  float32x4_t *v116;
  uint64_t v117;
  float32x4_t v118;
  float v119;
  float32x4_t v120;
  float v121;
  float32x4_t v122;
  float32x4_t v123;
  float v124;
  float v125;
  float v126;
  uint64_t v127;
  float32x4_t *v128;
  unint64_t v129;
  float *v130;
  unint64_t v131;
  uint64_t v132;
  float32x4_t *v134;
  uint64_t v135;
  float32x4_t v136;
  float v137;
  float32x4_t v138;
  float v139;
  float32x4_t v140;
  float32x4_t v141;
  float v142;
  float v143;
  float v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  float *v149;
  unint64_t v150;
  float *v151;
  unint64_t v152;
  float *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  float *v157;
  __int128 v158;
  int v159;
  uint64_t v160;
  _OWORD *v161;
  char *v162;
  uint64_t v163;
  __int128 v164;
  int v165;
  float32x2_t *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  float32x2_t v171;
  uint64_t v172;
  unsigned int *v173;
  uint64_t v174;
  float v175;
  float v176;
  float v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  unsigned int *v183;
  uint64_t v184;
  uint64_t v185;
  float v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float32x2_t *v192;
  float v193;
  __int32 *v194;
  unsigned int v195;
  __int32 *v196;
  __int32 v197;
  __int32 v198;
  __int32 v199;
  __int32 *v200;
  float32x2_t *v201;
  __int32 v202;
  __int32 v203;
  __int32 v204;
  float32x2_t *v205;
  std::__shared_weak_count *v206;
  unint64_t *p_shared_owners;
  unint64_t v208;
  __n128 v209;
  unint64_t v210;
  std::__shared_weak_count *v211;
  float32x2_t *v212;
  unint64_t *v213;
  unint64_t v214;
  float32x2_t v215;
  float v216;
  float v217;
  int v218;
  uint64_t v219;
  float *v220;
  __int32 v221;
  float32x2_t v222;
  int *v223;
  unint64_t v224;
  float *v225;
  unint64_t v226;
  uint64_t v227;
  int *v228;
  _OWORD *v229;
  __int128 *v230;
  uint64_t v231;
  __int128 v232;
  int v233;
  float v234;
  float v235;
  float v236;
  float v237;
  float *v238;
  float v239;
  float v240;
  unint64_t *v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t v244;
  float v245;
  float v246;
  float v247;
  float v248;
  float32x2_t *v249;
  float v250;
  float v251;
  float v252;
  uint64_t v253;
  unsigned int v254;
  int8x16_t v258;
  int8x16_t v259;
  float32x4_t v260;
  float32x4_t v261;
  float32x4_t v262;
  float32x4_t v263;
  float v264;
  float32x4_t v265;
  float32x4_t v266;
  float v267;
  float32x4_t v268;
  float32x4_t v269;
  float32x4_t v270;
  float32x4_t v271;
  int v272;
  float32x2_t v273;
  __int32 v274;
  int v275;
  unsigned int v276;
  float *v277;
  int v278;
  int v279;
  void *memptr[3];
  int v281;
  uint64_t v282;

  v282 = *MEMORY[0x1E0C80C00];
  v5 = *a3;
  v253 = 3 * a4;
  v6 = (float32x2_t *)(*(_QWORD *)(*a3 + 184) + 4 * v253);
  v7 = v6[1].f32[0];
  v8 = *(float32x2_t **)a2;
  *v8 = vadd_f32(*v6, **(float32x2_t **)a2);
  v8[1].f32[0] = v7 + v8[1].f32[0];
  v9 = (float32x2_t *)(*(_QWORD *)(v5 + 208) + 4 * v253);
  v10 = v9[1].f32[0];
  *(float32x2_t *)((char *)v8 + 12) = vadd_f32(vmul_f32(*v9, (float32x2_t)vdup_n_s32(0x42C80000u)), *(float32x2_t *)((char *)v8 + 12));
  v8[2].f32[1] = (float)(v10 * 100.0) + v8[2].f32[1];
  v11 = *(unsigned int *)(v5 + 284);
  v12 = v11 * a4;
  v13 = *(char **)(v5 + 136);
  v14 = &v13[4 * v12];
  v15 = (char *)v8[14];
  if ((_DWORD)v11 == v8[16].i32[0])
    goto LABEL_12;
  if (v13 == v15)
  {
    v17 = (4 * v11 + 31) & 0x7FFFFFFE0;
    memptr[0] = 0;
    malloc_type_posix_memalign(memptr, 0x20uLL, v17, 0x49090899uLL);
    v18 = (char *)memptr[0];
    if (v13 != memptr[0])
    {
      if ((_DWORD)v11)
      {
        v19 = (v11 - 1) & 0x3FFFFFFFFFFFFFFFLL;
        if (v19 >= 7)
        {
          v20 = (char *)memptr[0];
          if ((void *)((char *)memptr[0] - (char *)&v13[4 * v12]) >= (void *)0x20)
          {
            v44 = 0;
            v45 = (v19 + 1) & 0x7FFFFFFFFFFFFFF8;
            v46 = v45;
            do
            {
              v47 = &v18[v44];
              v48 = *(_OWORD *)&v14[v44 + 16];
              *(_OWORD *)v47 = *(_OWORD *)&v14[v44];
              *((_OWORD *)v47 + 1) = v48;
              v44 += 32;
              v46 -= 8;
            }
            while (v46);
            if (v19 + 1 == v45)
              goto LABEL_50;
            v20 = &v18[4 * v45];
            v14 += 4 * v45;
          }
        }
        else
        {
          v20 = (char *)memptr[0];
        }
        do
        {
          v49 = *(_DWORD *)v14;
          v14 += 4;
          *(_DWORD *)v20 = v49;
          v20 += 4;
        }
        while (v20 != &v18[4 * v11]);
      }
LABEL_50:
      v41 = (void *)v8[14];
      v8[14] = (float32x2_t)v18;
      v8[15] = (float32x2_t)(v17 >> 2);
      goto LABEL_51;
    }
    memptr[0] = 0;
    malloc_type_posix_memalign(memptr, 0x20uLL, v17, 0x49090899uLL);
    v18 = (char *)memptr[0];
    if ((_DWORD)v11)
    {
      v42 = (v11 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      if (v42 >= 7)
      {
        v43 = (char *)memptr[0];
        if ((unint64_t)((char *)memptr[0] - (char *)v13 - 4 * v12) >= 0x20)
        {
          v50 = (v42 + 1) & 0x7FFFFFFFFFFFFFF8;
          v14 += 4 * v50;
          v51 = (char *)memptr[0] + 16;
          v52 = &v13[4 * v12 + 16];
          v53 = v50;
          do
          {
            v54 = *(_OWORD *)v52;
            *(v51 - 1) = *((_OWORD *)v52 - 1);
            *v51 = v54;
            v51 += 2;
            v52 += 32;
            v53 -= 8;
          }
          while (v53);
          if (v42 + 1 == v50)
            goto LABEL_49;
          v43 = &v18[4 * v50];
        }
      }
      else
      {
        v43 = (char *)memptr[0];
      }
      do
      {
        v55 = *(_DWORD *)v14;
        v14 += 4;
        *(_DWORD *)v43 = v55;
        v43 += 4;
      }
      while (v43 != &v18[4 * v11]);
    }
LABEL_49:
    free(v13);
    goto LABEL_50;
  }
  v8[16].i32[0] = v11;
  if ((_DWORD)v11)
  {
    if (*(_QWORD *)&v8[15] < v11)
    {
      free(v15);
      v16 = (4 * v11 + 31) & 0x7FFFFFFE0;
      v8[14] = 0;
      v8[15] = (float32x2_t)(v16 >> 2);
      memptr[0] = 0;
      malloc_type_posix_memalign(memptr, 0x20uLL, v16, 0x49090899uLL);
      v15 = (char *)memptr[0];
      v8[14] = (float32x2_t)memptr[0];
    }
  }
  else
  {
    free(v15);
    v15 = 0;
    v8[14] = 0;
    v8[15] = 0;
  }
  LODWORD(v11) = v8[16].i32[0];
LABEL_12:
  if (v13 == v15)
  {
    v23 = (4 * v11 + 31) & 0x7FFFFFFE0;
    v24 = v23 >> 2;
    memptr[0] = 0;
    malloc_type_posix_memalign(memptr, 0x20uLL, v23, 0x49090899uLL);
    v25 = (char *)memptr[0];
    if ((_DWORD)v11)
    {
      v26 = (v11 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      if (v26 >= 7)
      {
        v27 = (char *)memptr[0];
        if ((unint64_t)((char *)memptr[0] - (char *)v13 - 4 * v12) >= 0x20)
        {
          v35 = (v26 + 1) & 0x7FFFFFFFFFFFFFF8;
          v14 += 4 * v35;
          v36 = (char *)memptr[0] + 16;
          v37 = &v13[4 * v12 + 16];
          v38 = v35;
          do
          {
            v39 = *(_OWORD *)v37;
            *(v36 - 1) = *((_OWORD *)v37 - 1);
            *v36 = v39;
            v36 += 2;
            v37 += 32;
            v38 -= 8;
          }
          while (v38);
          if (v26 + 1 == v35)
            goto LABEL_32;
          v27 = &v25[4 * v35];
        }
      }
      else
      {
        v27 = (char *)memptr[0];
      }
      do
      {
        v40 = *(_DWORD *)v14;
        v14 += 4;
        *(_DWORD *)v27 = v40;
        v27 += 4;
      }
      while (v27 != &v25[4 * v11]);
    }
LABEL_32:
    v41 = (void *)v8[14];
    v8[14] = (float32x2_t)v25;
    v8[15] = (float32x2_t)v24;
LABEL_51:
    v8[16].i32[0] = v11;
    free(v41);
    goto LABEL_52;
  }
  if (!(_DWORD)v11)
    goto LABEL_52;
  v21 = (v11 - 1) & 0x3FFFFFFFFFFFFFFFLL;
  if (v21 < 7)
  {
    v22 = v15;
    goto LABEL_24;
  }
  v28 = &v13[4 * v12];
  v22 = v15;
  if ((unint64_t)(v15 - v28) < 0x20)
  {
    do
    {
LABEL_24:
      v34 = *(_DWORD *)v14;
      v14 += 4;
      *(_DWORD *)v22 = v34;
      v22 += 4;
    }
    while (v22 != &v15[4 * v11]);
    goto LABEL_52;
  }
  v29 = (v21 + 1) & 0x7FFFFFFFFFFFFFF8;
  v14 += 4 * v29;
  v30 = v15 + 16;
  v31 = (__int128 *)(v28 + 16);
  v32 = v29;
  do
  {
    v33 = *v31;
    *(v30 - 1) = *(v31 - 1);
    *v30 = v33;
    v30 += 2;
    v31 += 2;
    v32 -= 8;
  }
  while (v32);
  if (v21 + 1 != v29)
  {
    v22 = &v15[4 * v29];
    goto LABEL_24;
  }
LABEL_52:
  v56 = *(unsigned int *)(*a3 + 288);
  v57 = v56 * a4;
  v58 = *(char **)(*a3 + 112);
  v59 = &v58[4 * v57];
  v60 = *(float32x2_t **)a2;
  v62 = *(_QWORD *)a2 + 88;
  v61 = *(char **)v62;
  if ((_DWORD)v56 == *(_DWORD *)(*(_QWORD *)a2 + 104))
    goto LABEL_63;
  if (v58 == v61)
  {
    v64 = (4 * v56 + 31) & 0x7FFFFFFE0;
    memptr[0] = 0;
    malloc_type_posix_memalign(memptr, 0x20uLL, v64, 0x49090899uLL);
    v65 = (char *)memptr[0];
    if (v58 != memptr[0])
    {
      if ((_DWORD)v56)
      {
        v66 = (v56 - 1) & 0x3FFFFFFFFFFFFFFFLL;
        if (v66 >= 7)
        {
          v67 = (char *)memptr[0];
          if ((void *)((char *)memptr[0] - (char *)&v58[4 * v57]) >= (void *)0x20)
          {
            v91 = 0;
            v92 = (v66 + 1) & 0x7FFFFFFFFFFFFFF8;
            v93 = v92;
            do
            {
              v94 = &v65[v91];
              v95 = *(_OWORD *)&v59[v91 + 16];
              *(_OWORD *)v94 = *(_OWORD *)&v59[v91];
              *((_OWORD *)v94 + 1) = v95;
              v91 += 32;
              v93 -= 8;
            }
            while (v93);
            if (v66 + 1 == v92)
              goto LABEL_101;
            v67 = &v65[4 * v92];
            v59 += 4 * v92;
          }
        }
        else
        {
          v67 = (char *)memptr[0];
        }
        do
        {
          v96 = *(_DWORD *)v59;
          v59 += 4;
          *(_DWORD *)v67 = v96;
          v67 += 4;
        }
        while (v67 != &v65[4 * v56]);
      }
LABEL_101:
      v88 = (void *)v60[11];
      v60[11] = (float32x2_t)v65;
      v60[12] = (float32x2_t)(v64 >> 2);
      goto LABEL_102;
    }
    memptr[0] = 0;
    malloc_type_posix_memalign(memptr, 0x20uLL, v64, 0x49090899uLL);
    v65 = (char *)memptr[0];
    if ((_DWORD)v56)
    {
      v89 = (v56 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      if (v89 >= 7)
      {
        v90 = (char *)memptr[0];
        if ((unint64_t)((char *)memptr[0] - (char *)v58 - 4 * v57) >= 0x20)
        {
          v97 = (v89 + 1) & 0x7FFFFFFFFFFFFFF8;
          v59 += 4 * v97;
          v98 = (char *)memptr[0] + 16;
          v99 = &v58[4 * v57 + 16];
          v100 = v97;
          do
          {
            v101 = *(_OWORD *)v99;
            *(v98 - 1) = *((_OWORD *)v99 - 1);
            *v98 = v101;
            v98 += 2;
            v99 += 32;
            v100 -= 8;
          }
          while (v100);
          if (v89 + 1 == v97)
            goto LABEL_100;
          v90 = &v65[4 * v97];
        }
      }
      else
      {
        v90 = (char *)memptr[0];
      }
      do
      {
        v102 = *(_DWORD *)v59;
        v59 += 4;
        *(_DWORD *)v90 = v102;
        v90 += 4;
      }
      while (v90 != &v65[4 * v56]);
    }
LABEL_100:
    free(v58);
    goto LABEL_101;
  }
  v60[13].i32[0] = v56;
  if ((_DWORD)v56)
  {
    if (*(_QWORD *)&v60[12] < v56)
    {
      free(v61);
      v63 = (4 * v56 + 31) & 0x7FFFFFFE0;
      v60[11] = 0;
      v60[12] = (float32x2_t)(v63 >> 2);
      memptr[0] = 0;
      malloc_type_posix_memalign(memptr, 0x20uLL, v63, 0x49090899uLL);
      v61 = (char *)memptr[0];
      v60[11] = (float32x2_t)memptr[0];
    }
  }
  else
  {
    free(v61);
    v61 = 0;
    *(_QWORD *)v62 = 0;
    *(_QWORD *)(v62 + 8) = 0;
  }
  LODWORD(v56) = v60[13].i32[0];
LABEL_63:
  if (v58 == v61)
  {
    v70 = (4 * v56 + 31) & 0x7FFFFFFE0;
    v71 = v70 >> 2;
    memptr[0] = 0;
    malloc_type_posix_memalign(memptr, 0x20uLL, v70, 0x49090899uLL);
    v72 = (char *)memptr[0];
    if ((_DWORD)v56)
    {
      v73 = (v56 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      if (v73 >= 7)
      {
        v74 = (char *)memptr[0];
        if ((unint64_t)((char *)memptr[0] - (char *)v58 - 4 * v57) >= 0x20)
        {
          v82 = (v73 + 1) & 0x7FFFFFFFFFFFFFF8;
          v59 += 4 * v82;
          v83 = (char *)memptr[0] + 16;
          v84 = &v58[4 * v57 + 16];
          v85 = v82;
          do
          {
            v86 = *(_OWORD *)v84;
            *(v83 - 1) = *((_OWORD *)v84 - 1);
            *v83 = v86;
            v83 += 2;
            v84 += 32;
            v85 -= 8;
          }
          while (v85);
          if (v73 + 1 == v82)
            goto LABEL_83;
          v74 = &v72[4 * v82];
        }
      }
      else
      {
        v74 = (char *)memptr[0];
      }
      do
      {
        v87 = *(_DWORD *)v59;
        v59 += 4;
        *(_DWORD *)v74 = v87;
        v74 += 4;
      }
      while (v74 != &v72[4 * v56]);
    }
LABEL_83:
    v88 = (void *)v60[11];
    v60[11] = (float32x2_t)v72;
    v60[12] = (float32x2_t)v71;
LABEL_102:
    v60[13].i32[0] = v56;
    free(v88);
    goto LABEL_103;
  }
  if (!(_DWORD)v56)
    goto LABEL_103;
  v68 = (v56 - 1) & 0x3FFFFFFFFFFFFFFFLL;
  if (v68 < 7)
  {
    v69 = v61;
    goto LABEL_75;
  }
  v75 = &v58[4 * v57];
  v69 = v61;
  if ((unint64_t)(v61 - v75) < 0x20)
  {
    do
    {
LABEL_75:
      v81 = *(_DWORD *)v59;
      v59 += 4;
      *(_DWORD *)v69 = v81;
      v69 += 4;
    }
    while (v69 != &v61[4 * v56]);
    goto LABEL_103;
  }
  v76 = (v68 + 1) & 0x7FFFFFFFFFFFFFF8;
  v59 += 4 * v76;
  v77 = v61 + 16;
  v78 = (__int128 *)(v75 + 16);
  v79 = v76;
  do
  {
    v80 = *v78;
    *(v77 - 1) = *(v78 - 1);
    *v77 = v80;
    v77 += 2;
    v78 += 2;
    v79 -= 8;
  }
  while (v79);
  if (v68 + 1 != v76)
  {
    v69 = &v61[4 * v76];
    goto LABEL_75;
  }
LABEL_103:
  v103 = (float32x2_t **)a2;
  v104 = *(float32x2_t **)a2;
  v105 = *(unsigned int *)(*(_QWORD *)a2 + 104);
  if (!(_DWORD)v105)
    goto LABEL_113;
  v106 = v104[11];
  v107 = (v105 - 1) & 0x3FFFFFFFFFFFFFFFLL;
  if (v107 > 2)
  {
    v109 = v107 + 1;
    v110 = (v107 + 1) & 0x7FFFFFFFFFFFFFFCLL;
    __asm { FMOV            V0.4S, #1.0 }
    v260 = _Q0;
    v262 = (float32x4_t)vdupq_n_s32(0x2B8CBCCCu);
    v258 = (int8x16_t)vdupq_n_s32(0x5368D4A5u);
    v116 = (float32x4_t *)v104[11];
    v117 = v110;
    do
    {
      v270 = vnegq_f32(*v116);
      v264 = expf(v270.f32[1]);
      v118.f32[0] = expf(v270.f32[0]);
      v118.f32[1] = v264;
      v265 = v118;
      v119 = expf(v270.f32[2]);
      v120 = v265;
      v120.f32[2] = v119;
      v266 = v120;
      v121 = expf(v270.f32[3]);
      v122 = v266;
      v122.f32[3] = v121;
      v123 = vaddq_f32(v122, v260);
      *(int8x16_t *)v116++ = vbslq_s8((int8x16_t)vcgtq_f32(v262, v123), v258, (int8x16_t)vdivq_f32(v260, v123));
      v117 -= 4;
    }
    while (v117);
    v103 = (float32x2_t **)a2;
    if (v109 == v110)
      goto LABEL_113;
    v108 = (float *)(*(_QWORD *)&v106 + 4 * v110);
  }
  else
  {
    v108 = (float *)v104[11];
  }
  do
  {
    v124 = expf(-*v108) + 1.0;
    v125 = 1.0 / v124;
    _NF = v124 < 1.0e-12;
    v126 = 1.0e12;
    if (!_NF)
      v126 = v125;
    *v108++ = v126;
  }
  while (v108 != (float *)(*(_QWORD *)&v106 + 4 * v105));
LABEL_113:
  v127 = v104[16].u32[0];
  if (!(_DWORD)v127)
    goto LABEL_123;
  v128 = (float32x4_t *)v104[14];
  v129 = (v127 - 1) & 0x3FFFFFFFFFFFFFFFLL;
  if (v129 > 2)
  {
    v131 = v129 + 1;
    v132 = (v129 + 1) & 0x7FFFFFFFFFFFFFFCLL;
    __asm { FMOV            V0.4S, #1.0 }
    v261 = _Q0;
    v263 = (float32x4_t)vdupq_n_s32(0x2B8CBCCCu);
    v259 = (int8x16_t)vdupq_n_s32(0x5368D4A5u);
    v134 = v128;
    v135 = v132;
    do
    {
      v271 = vnegq_f32(*v134);
      v267 = expf(v271.f32[1]);
      v136.f32[0] = expf(v271.f32[0]);
      v136.f32[1] = v267;
      v268 = v136;
      v137 = expf(v271.f32[2]);
      v138 = v268;
      v138.f32[2] = v137;
      v269 = v138;
      v139 = expf(v271.f32[3]);
      v140 = v269;
      v140.f32[3] = v139;
      v141 = vaddq_f32(v140, v261);
      *(int8x16_t *)v134++ = vbslq_s8((int8x16_t)vcgtq_f32(v263, v141), v259, (int8x16_t)vdivq_f32(v261, v141));
      v135 -= 4;
    }
    while (v135);
    if (v131 == v132)
      goto LABEL_123;
    v130 = &v128->f32[v132];
  }
  else
  {
    v130 = (float *)v104[14];
  }
  do
  {
    v142 = expf(-*v130) + 1.0;
    v143 = 1.0 / v142;
    _NF = v142 < 1.0e-12;
    v144 = 1.0e12;
    if (!_NF)
      v144 = v143;
    *v130++ = v144;
  }
  while (v130 != &v128->f32[v127]);
LABEL_123:
  v145 = *(unsigned int *)(*a3 + 280);
  v146 = v145 * a4;
  v147 = *(char **)(*a3 + 88);
  v148 = &v147[4 * v146];
  memptr[0] = 0;
  malloc_type_posix_memalign(memptr, 0x20uLL, (4 * v145 + 31) & 0x7FFFFFFE0, 0x49090899uLL);
  v149 = (float *)memptr[0];
  v254 = a4;
  if (v147 == memptr[0])
  {
    memptr[0] = 0;
    malloc_type_posix_memalign(memptr, 0x20uLL, (4 * v145 + 31) & 0x7FFFFFFE0, 0x49090899uLL);
    v149 = (float *)memptr[0];
    if ((_DWORD)v145)
    {
      v152 = (v145 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      if (v152 >= 7)
      {
        v153 = (float *)memptr[0];
        if ((unint64_t)((char *)memptr[0] - (char *)v147 - 4 * v146) >= 0x20)
        {
          v160 = (v152 + 1) & 0x7FFFFFFFFFFFFFF8;
          v148 += 4 * v160;
          v161 = (char *)memptr[0] + 16;
          v162 = &v147[4 * v146 + 16];
          v163 = v160;
          do
          {
            v164 = *(_OWORD *)v162;
            *(v161 - 1) = *((_OWORD *)v162 - 1);
            *v161 = v164;
            v161 += 2;
            v162 += 32;
            v163 -= 8;
          }
          while (v163);
          if (v152 + 1 == v160)
            goto LABEL_143;
          v153 = &v149[v160];
        }
      }
      else
      {
        v153 = (float *)memptr[0];
      }
      do
      {
        v165 = *(_DWORD *)v148;
        v148 += 4;
        *(_DWORD *)v153++ = v165;
      }
      while (v153 != &v149[v145]);
    }
LABEL_143:
    free(v147);
    goto LABEL_144;
  }
  if (!(_DWORD)v145)
    goto LABEL_144;
  v150 = (v145 - 1) & 0x3FFFFFFFFFFFFFFFLL;
  if (v150 < 7)
  {
    v151 = (float *)memptr[0];
    goto LABEL_135;
  }
  v151 = (float *)memptr[0];
  if ((void *)((char *)memptr[0] - (char *)&v147[4 * v146]) < (void *)0x20)
  {
    do
    {
LABEL_135:
      v159 = *(_DWORD *)v148;
      v148 += 4;
      *(_DWORD *)v151++ = v159;
    }
    while (v151 != &v149[v145]);
    goto LABEL_144;
  }
  v154 = 0;
  v155 = (v150 + 1) & 0x7FFFFFFFFFFFFFF8;
  v156 = v155;
  do
  {
    v157 = &v149[v154];
    v158 = *(_OWORD *)&v148[v154 * 4 + 16];
    *(_OWORD *)v157 = *(_OWORD *)&v148[v154 * 4];
    *((_OWORD *)v157 + 1) = v158;
    v154 += 8;
    v156 -= 8;
  }
  while (v156);
  if (v150 + 1 != v155)
  {
    v151 = &v149[v155];
    v148 += 4 * v155;
    goto LABEL_135;
  }
LABEL_144:
  v166 = *v103;
  v167 = *(_QWORD *)(a1 + 8);
  v168 = *(unsigned int *)(v167 + 56);
  if ((_DWORD)v168)
  {
    v169 = 0;
    v170 = *(_QWORD *)(v167 + 40);
    v171 = v166[3];
    v172 = 2 * v168;
    do
    {
      v173 = (unsigned int *)(v170 + 4 * (v169 & 0xFFFFFFFE));
      v174 = v173[1];
      v175 = expf(-v149[*v173]) + 1.0;
      v176 = 1.0 / v175;
      _NF = v175 < 1.0e-12;
      v177 = 1.0e12;
      if (!_NF)
        v177 = v176;
      *(float *)(*(_QWORD *)&v171 + 4 * v174) = v177;
      v169 += 2;
    }
    while (v172 != v169);
  }
  v178 = *(unsigned int *)(v167 + 80);
  if ((_DWORD)v178)
  {
    v179 = 0;
    v180 = *(_QWORD *)(v167 + 64);
    v181 = (_QWORD *)v166[3];
    v182 = 3 * v178;
    do
    {
      v183 = (unsigned int *)(v180 + 4 * v179);
      v184 = v183[1];
      v185 = v183[2];
      v186 = expf(-v149[*v183]) + 1.0;
      v187 = 1.0 / v186;
      _NF = v186 < 1.0e-12;
      v188 = 1.0e12;
      if (!_NF)
        v188 = v187;
      v189 = (float)(v188 * 2.0) + -1.0;
      v190 = -v189;
      v191 = fmaxf(v189, 0.0);
      if (v189 > 0.0)
        v190 = 0.0;
      *((float *)v181 + v184) = v191;
      *((float *)v181 + v185) = v190;
      v179 += 3;
    }
    while (v182 != v179);
  }
  else
  {
    v181 = (_QWORD *)v166[3];
  }
  *(_QWORD *)((char *)v181 + 204) = *v181;
  *v181 = vdup_n_s32(0x7FC00000u);
  v192 = (float32x2_t *)(*(_QWORD *)(*a3 + 232) + 4 * v253);
  v193 = v192[1].f32[0];
  v166[6] = vadd_f32(vmul_f32(*v192, (float32x2_t)vdup_n_s32(0x42C80000u)), v166[6]);
  v166[7].f32[0] = (float)(v193 * 100.0) + v166[7].f32[0];
  v194 = (__int32 *)v166[40];
  v195 = 3 * (v166[42].i32[0] / 3u);
  v196 = &v194[v195 - 3];
  v197 = *v196;
  if (v194 == &v166[31].i32[1])
  {
    v199 = v196[1];
    v198 = v196[2];
    *v194 = v197;
    v166[32].i32[0] = v199;
  }
  else
  {
    v166[31].i32[1] = v197;
    v166[32].i32[0] = v196[1];
    v198 = v196[2];
  }
  v166[32].i32[1] = v198;
  v200 = &v194[v195 - 6];
  v201 = *(float32x2_t **)a2;
  v202 = *v200;
  if (v194 == (__int32 *)(*(_QWORD *)a2 + 240))
  {
    v204 = v200[1];
    v203 = v200[2];
    *v194 = v202;
    v201[30].i32[1] = v204;
  }
  else
  {
    v201[30].i32[0] = v202;
    v201[30].i32[1] = v200[1];
    v203 = v200[2];
  }
  v201[31].i32[0] = v203;
  v205 = *(float32x2_t **)a2;
  v206 = *(std::__shared_weak_count **)(a2 + 8);
  if (v206)
  {
    p_shared_owners = (unint64_t *)&v206->__shared_owners_;
    do
      v208 = __ldxr(p_shared_owners);
    while (__stxr(v208 + 1, p_shared_owners));
    v209.n128_f32[0] = sub_1C98E7F48((float *)v205, (float *)(*(_QWORD *)a2 + 48), (float *)v166[3], (float *)(*(_QWORD *)a2 + 60), (float *)(*(_QWORD *)a2 + 68));
    do
      v210 = __ldaxr(p_shared_owners);
    while (__stlxr(v210 - 1, p_shared_owners));
    if (!v210)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v206->__on_zero_shared)(v206, v209);
      std::__shared_weak_count::__release_weak(v206);
    }
  }
  else
  {
    sub_1C98E7F48((float *)v205, (float *)&v205[6], (float *)v166[3], (float *)&v205[7] + 1, (float *)&v205[8] + 1);
  }
  v212 = *(float32x2_t **)a2;
  v211 = *(std::__shared_weak_count **)(a2 + 8);
  if (v211)
  {
    v213 = (unint64_t *)&v211->__shared_owners_;
    do
      v214 = __ldxr(v213);
    while (__stxr(v214 + 1, v213));
  }
  v215 = v212[3];
  v217 = *(float *)(*(_QWORD *)&v215 + 204);
  v216 = *(float *)(*(_QWORD *)&v215 + 208);
  **(_QWORD **)&v215 = 0;
  v218 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v219 = (3 * v218);
  memptr[0] = 0;
  malloc_type_posix_memalign(memptr, 0x20uLL, (4 * v219 + 31) & 0x7FFFFFFE0, 0x49090899uLL);
  v220 = (float *)memptr[0];
  if (v218)
    bzero(memptr[0], 4 * (3 * v218));
  v221 = v212[5].i32[0];
  v222 = v212[3];
  v272 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4);
  v273 = v222;
  v274 = v221;
  v275 = 0;
  v276 = v219;
  v277 = v220;
  v278 = v219;
  v279 = 0;
  if (v218)
  {
    v223 = (int *)v212[46];
    v224 = (v219 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    if (v224 < 7)
    {
      v225 = v220;
      do
      {
LABEL_185:
        v233 = *v223++;
        *(_DWORD *)v225++ = v233;
      }
      while (v225 != &v220[v219]);
      goto LABEL_186;
    }
    v225 = v220;
    if ((unint64_t)((char *)v220 - (char *)v223) < 0x20)
      goto LABEL_185;
    v226 = v224 + 1;
    v227 = (v224 + 1) & 0x7FFFFFFFFFFFFFF8;
    v228 = &v223[v227];
    v229 = v220 + 4;
    v230 = (__int128 *)(v223 + 4);
    v231 = v227;
    do
    {
      v232 = *v230;
      *(v229 - 1) = *(v230 - 1);
      *v229 = v232;
      v229 += 2;
      v230 += 2;
      v231 -= 8;
    }
    while (v231);
    if (v226 != v227)
    {
      v225 = &v220[v227];
      v223 = v228;
      goto LABEL_185;
    }
  }
LABEL_186:
  memptr[1] = &v212[49];
  memptr[2] = &v272;
  v281 = 1065353216;
  sub_1C98B6E54(&v276, (uint64_t)memptr);
  v234 = v220[10] - v220[7];
  v235 = v217 * (float)((float)(v220[4] - v220[1]) / v212[52].f32[0]);
  v236 = fminf(v235, 1.0);
  _NF = v235 < 0.0;
  v237 = 0.0;
  if (_NF)
    v236 = 0.0;
  v238 = (float *)v212[3];
  *v238 = v236;
  v239 = v216 * (float)(v234 / v212[52].f32[1]);
  v240 = fminf(v239, 1.0);
  if (v239 >= 0.0)
    v237 = v240;
  v238[1] = v237;
  free(v220);
  if (v211)
  {
    v241 = (unint64_t *)&v211->__shared_owners_;
    do
      v242 = __ldaxr(v241);
    while (__stlxr(v242 - 1, v241));
    if (!v242)
    {
      ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
      std::__shared_weak_count::__release_weak(v211);
    }
  }
  v243 = *a3;
  v244 = *(_QWORD *)(*a3 + 256) + 8 * v254;
  v245 = *(float *)(v244 + 4);
  v246 = expf(*(float *)v244);
  v247 = expf(v245);
  v248 = v246 + v247;
  if ((float)(v246 + v247) < 1.0e-12)
    v248 = 1.0e-12;
  v249 = *(float32x2_t **)a2;
  *(float *)(*(_QWORD *)a2 + 80) = v247 / v248;
  v250 = expf(-*(float *)(*(_QWORD *)(v243 + 160) + 4 * v254)) + 1.0;
  v251 = 1.0 / v250;
  _NF = v250 < 1.0e-12;
  v252 = 1.0e12;
  if (!_NF)
    v252 = v251;
  v249[9].f32[1] = v252;
  free(v149);
}

void sub_1C98AF09C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (a1)
  {
    sub_1C98AF09C(*a1);
    sub_1C98AF09C(a1[1]);
    v2 = (std::__shared_weak_count *)a1[5];
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    operator delete(a1);
  }
}

_QWORD *sub_1C98AF10C(_QWORD *a1, unint64_t a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    if (v6.u32[0] < 2uLL)
    {
      v10 = *(_QWORD *)&v2 - 1;
      while (1)
      {
        v12 = result[1];
        if (v5 == v12)
        {
          if (result[2] == a2)
            return result;
        }
        else if ((v12 & v10) != v7)
        {
          return 0;
        }
        result = (_QWORD *)*result;
        if (!result)
          return result;
      }
    }
    do
    {
      v11 = result[1];
      if (v5 == v11)
      {
        if (result[2] == a2)
          return result;
      }
      else
      {
        if (v11 >= *(_QWORD *)&v2)
          v11 %= *(_QWORD *)&v2;
        if (v11 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

void sub_1C98AF220()
{
  JUMPOUT(0x1CAA44AFCLL);
}

void sub_1C98AF234(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E82959F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1C98AF244(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E82959F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA44AFCLL);
}

uint64_t sub_1C98AF274(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1C98AF284(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E82958A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1C98AF294(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E82958A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA44AFCLL);
}

void sub_1C98AF2C4(void **a1)
{
  free(a1[65]);
  free(a1[62]);
  free(a1[59]);
  free(a1[56]);
  free(a1[52]);
  free(a1[49]);
  free(a1[46]);
  free(a1[43]);
  free(a1[30]);
  free(a1[27]);
  free(a1[23]);
  free(a1[20]);
  free(a1[17]);
  free(a1[14]);
  free(a1[6]);
}

void sub_1C98AF358(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295870;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1C98AF368(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295870;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA44AFCLL);
}

void sub_1C98AF398(uint64_t a1)
{
  free(*(void **)(a1 + 32));
}

void sub_1C98AF3A8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA44AFCLL);
}

uint64_t sub_1C98AF3CC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1C98AF3E8(_QWORD *a1, int a2, uint64_t a3, uint64_t *a4, int a5, int a6, int a7)
{
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unsigned __int8 v21;
  NSObject *v22;
  const char *v23;
  unsigned __int8 v24;
  unint64_t v25;
  char *v26;
  char *v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  _QWORD *v38;
  __int128 v39;
  char *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  char *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  char ****v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void **v55;
  void **v56;
  void **v57;
  void **v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unsigned __int8 v61;
  NSObject *v62;
  const char *v63;
  unsigned int v64;
  unsigned __int8 v65;
  uint64_t v66;
  NSObject *v67;
  const char *v68;
  uint32_t v69;
  int v70;
  unsigned __int8 v71;
  uint64_t v72;
  _BOOL4 v73;
  NSObject *v74;
  const char *v75;
  const char *v76;
  void *v77;
  _QWORD *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  void *v93;
  _QWORD *v94;
  int v95;
  unsigned __int8 v96;
  uint64_t v97;
  unsigned __int8 v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  int8x16_t v105;
  unint64_t v106;
  size_t v107;
  _QWORD *v108;
  int v109;
  int8x16_t v110;
  unint64_t v111;
  size_t v112;
  _QWORD *v113;
  int v114;
  int8x16_t v115;
  unint64_t v116;
  size_t v117;
  _QWORD *v118;
  int v119;
  int8x16_t v120;
  unint64_t v121;
  size_t v122;
  _QWORD *v123;
  int v124;
  int8x16_t v125;
  unint64_t v126;
  size_t v127;
  _QWORD *v128;
  int v129;
  int8x16_t v130;
  unint64_t v131;
  size_t v132;
  _QWORD *v133;
  int v134;
  int8x16_t v135;
  unint64_t v136;
  size_t v137;
  _QWORD *v138;
  int v139;
  int8x16_t v140;
  unint64_t v141;
  size_t v142;
  _QWORD *v143;
  int v144;
  int8x16_t v145;
  unint64_t v146;
  size_t v147;
  void **v148;
  _QWORD *v149;
  int v150;
  int8x16_t v151;
  unint64_t v152;
  size_t v153;
  unint64_t v154;
  size_t v155;
  char *v156;
  _DWORD *v157;
  int8x8_t *v158;
  uint64_t v159;
  std::__shared_weak_count_vtbl ***v160;
  __int128 v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  _QWORD *v168;
  uint64_t v169;
  uint64_t v170;
  unsigned __int8 v171;
  NSObject *v172;
  const char *v173;
  unsigned __int8 v174;
  NSObject *v175;
  uint64_t v176;
  uint64_t i;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  unint64_t *p_shared_owners;
  unint64_t v182;
  unsigned __int8 v183;
  std::__shared_weak_count *v184;
  std::__shared_weak_count *v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  unint64_t *v189;
  unint64_t v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  int v196;
  int v197;
  unsigned __int8 v198;
  NSObject *v199;
  const char *v200;
  unsigned __int8 v201;
  size_t v202;
  void *v203;
  void *v204;
  int8x8_t *v205;
  _DWORD *v206;
  std::__shared_weak_count *v207;
  void **v208;
  unint64_t v209;
  size_t v210;
  void *v211;
  uint64_t v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  _QWORD *v216;
  std::__shared_weak_count *v217;
  int8x8_t *v218;
  _DWORD *v219;
  unsigned __int8 v220;
  NSObject *v221;
  const char *v222;
  uint64_t v223;
  uint64_t v224;
  unsigned __int8 v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  unint64_t *v229;
  unint64_t v230;
  unint64_t v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  int v234;
  uint64_t v235;
  size_t v236;
  void *v237;
  std::__shared_weak_count *v238;
  void *v239;
  unint64_t v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  std::__shared_weak_count_vtbl *v244;
  std::__shared_weak_count_vtbl *v245;
  int get_deleter_high;
  int on_zero_shared_weak_high;
  int on_zero_shared_weak;
  std::__shared_weak_count_vtbl *v249;
  std::__shared_weak_count_vtbl *v250;
  int v251;
  int on_zero_shared_high;
  int on_zero_shared;
  std::__shared_weak_count_vtbl *v254;
  std::__shared_weak_count_vtbl *v255;
  int get_deleter;
  int v257;
  int v258;
  std::__shared_weak_count_vtbl *v259;
  std::__shared_weak_count_vtbl *v260;
  int v261;
  int v262;
  int v263;
  std::__shared_weak_count_vtbl *v264;
  std::__shared_weak_count_vtbl *v265;
  int v266;
  int v267;
  int v268;
  std::__shared_weak_count_vtbl *v269;
  std::__shared_weak_count_vtbl *v270;
  int v271;
  int v272;
  int v273;
  std::__shared_weak_count_vtbl *v274;
  std::__shared_weak_count_vtbl *v275;
  int v276;
  int v277;
  int v278;
  std::__shared_weak_count_vtbl *v279;
  std::__shared_weak_count_vtbl *v280;
  int v281;
  int v282;
  int v283;
  unint64_t v284;
  unint64_t *v285;
  unint64_t v286;
  std::__shared_weak_count *v287;
  unint64_t *v288;
  unint64_t v289;
  _QWORD *v290;
  std::__shared_weak_count *v291;
  unint64_t *v292;
  unint64_t v293;
  uint64_t v294;
  uint64_t v295;
  unint64_t v296;
  size_t v297;
  int v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t v301;
  size_t v302;
  uint64_t v303;
  _DWORD *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  size_t v309;
  uint64_t v310;
  unsigned int v311;
  uint64_t v312;
  int v313;
  void **v314;
  uint64_t v315;
  unsigned __int8 v316;
  NSObject *v317;
  const char *v318;
  unsigned __int8 v319;
  unint64_t v320;
  size_t v321;
  void *v322;
  uint64_t v323;
  std::__shared_weak_count *v324;
  unint64_t *v325;
  unint64_t v326;
  uint64_t v327;
  uint64_t v328;
  std::__shared_weak_count *v329;
  _QWORD *v330;
  uint64_t v331;
  char *__s;
  void **v334;
  _QWORD *v337;
  void **v338;
  void **v339;
  void **v340;
  void **v341;
  void **v342;
  int v343;
  int v344;
  _DWORD *v345;
  std::__shared_weak_count *v346;
  void *memptr;
  std::__shared_weak_count *v348;
  _BYTE buf[24];
  uint64_t v350;

  v350 = *MEMORY[0x1E0C80C00];
  v11 = operator new();
  *(_OWORD *)(v11 + 8) = 0u;
  v12 = v11 + 8;
  *(_OWORD *)(v11 + 24) = 0u;
  *(_QWORD *)v11 = off_1E8294AB0;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 56) = 0u;
  *(_QWORD *)(v11 + 72) = 0;
  v13 = (std::__shared_weak_count *)operator new();
  v13->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295E20;
  v13->__shared_owners_ = 0;
  v13->__shared_weak_owners_ = 0;
  v13[1].__vftable = (std::__shared_weak_count_vtbl *)v11;
  v14 = *a4;
  if (!*a4)
  {
    v24 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
    if ((v24 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
    {
      qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
      __cxa_guard_release(&qword_1ED52ACD0);
    }
    v22 = qword_1ED52ACE0;
    if (!os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_ERROR))
      goto LABEL_282;
    *(_WORD *)buf = 0;
    v23 = "The tensor model is not valid!";
    goto LABEL_16;
  }
  v15 = a4[1];
  if (!v15)
  {
    *(_QWORD *)(v11 + 24) = v14;
    *(_QWORD *)(v11 + 32) = 0;
    if (!*(_BYTE *)(a3 + 8))
      goto LABEL_18;
LABEL_10:
    v21 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
    if ((v21 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
    {
      qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
      __cxa_guard_release(&qword_1ED52ACD0);
    }
    v22 = qword_1ED52ACE0;
    if (!os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_ERROR))
      goto LABEL_282;
    *(_WORD *)buf = 0;
    v23 = "Failed to initialize the surfaces for caranet.";
LABEL_16:
    _os_log_error_impl(&dword_1C9870000, v22, OS_LOG_TYPE_ERROR, v23, buf, 2u);
LABEL_282:
    *a1 = 0;
    a1[1] = 0;
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v182 = __ldaxr(p_shared_owners);
    while (__stlxr(v182 - 1, p_shared_owners));
    if (!v182)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    return;
  }
  v16 = (unint64_t *)(v15 + 8);
  do
    v17 = __ldxr(v16);
  while (__stxr(v17 + 1, v16));
  v18 = *(std::__shared_weak_count **)(v11 + 32);
  *(_QWORD *)(v11 + 24) = v14;
  *(_QWORD *)(v11 + 32) = v15;
  if (!v18)
    goto LABEL_513;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_513:
    if (*(_BYTE *)(a3 + 8))
      goto LABEL_10;
    goto LABEL_18;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(_BYTE *)(a3 + 8))
    goto LABEL_10;
LABEL_18:
  v328 = v11 + 40;
  v25 = a6;
  v27 = *(char **)(v11 + 56);
  v26 = *(char **)(v11 + 64);
  v28 = (v26 - v27) >> 4;
  v29 = (_QWORD *)v11;
  v30 = a6 - v28;
  if (a6 <= v28)
  {
    v38 = v29;
    if (a6 < v28)
    {
      v44 = &v27[16 * a6];
      while (v26 != v44)
      {
        v45 = (std::__shared_weak_count *)*((_QWORD *)v26 - 1);
        if (v45)
        {
          v46 = (unint64_t *)&v45->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
        v26 -= 16;
      }
      v29[8] = v44;
    }
  }
  else
  {
    v31 = v29[9];
    if (v30 <= (v31 - (uint64_t)v26) >> 4)
    {
      bzero(v26, 16 * v30);
      v29[8] = &v26[16 * v30];
      v38 = v29;
    }
    else
    {
      if (a6 < 0)
        abort();
      v32 = v31 - (_QWORD)v27;
      if (v32 >> 3 > (unint64_t)a6)
        v25 = v32 >> 3;
      if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0)
        v25 = 0xFFFFFFFFFFFFFFFLL;
      if (v25 >> 60)
        sub_1C9899D30();
      v33 = 16 * v25;
      v34 = (char *)operator new(16 * v25);
      v35 = &v34[16 * v28];
      v36 = &v34[v33];
      bzero(v35, 16 * v30);
      v37 = &v35[16 * v30];
      if (v26 == v27)
      {
        v38 = v29;
        v29[7] = v35;
        v29[8] = v37;
        v29[9] = v36;
      }
      else
      {
        v38 = v29;
        do
        {
          v39 = *((_OWORD *)v26 - 1);
          v26 -= 16;
          *((_OWORD *)v35 - 1) = v39;
          v35 -= 16;
          *(_QWORD *)v26 = 0;
          *((_QWORD *)v26 + 1) = 0;
        }
        while (v26 != v27);
        v26 = (char *)v29[7];
        v40 = (char *)v29[8];
        v29[7] = v35;
        v29[8] = v37;
        v29[9] = v36;
        while (v40 != v26)
        {
          v41 = (std::__shared_weak_count *)*((_QWORD *)v40 - 1);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v40 -= 16;
        }
      }
      if (v26)
        operator delete(v26);
    }
  }
  v327 = v12;
  v329 = v13;
  v330 = a1;
  v48 = 0;
  v49 = "caranet";
  v50 = v38[7];
  if (a7)
    v49 = "caranet_plus";
  __s = (char *)v49;
  v51 = &off_1E8296588;
  if (!a7)
    v51 = &off_1E8296598;
  v331 = (uint64_t)v51;
  v337 = v38;
  while (v48 < (int)((unint64_t)(v38[8] - v50) >> 4))
  {
    v53 = v48 + 1;
    v54 = operator new();
    *(_QWORD *)(v54 + 40) = 0;
    v55 = (void **)(v54 + 40);
    *(_QWORD *)(v54 + 64) = 0;
    v56 = (void **)(v54 + 64);
    *(_QWORD *)(v54 + 88) = 0;
    v339 = (void **)(v54 + 88);
    *(_QWORD *)(v54 + 112) = 0;
    *(_QWORD *)(v54 + 136) = 0;
    *(_DWORD *)(v54 + 280) = 0;
    *(_OWORD *)v54 = 0u;
    *(_OWORD *)(v54 + 16) = 0u;
    *(_DWORD *)(v54 + 32) = 0;
    *(_QWORD *)(v54 + 48) = 0;
    *(_DWORD *)(v54 + 56) = 0;
    *(_QWORD *)(v54 + 72) = 0;
    *(_DWORD *)(v54 + 80) = 0;
    *(_QWORD *)(v54 + 96) = 0;
    *(_DWORD *)(v54 + 104) = 0;
    *(_QWORD *)(v54 + 120) = 0;
    *(_DWORD *)(v54 + 128) = 0;
    *(_DWORD *)(v54 + 152) = 0;
    *(_QWORD *)(v54 + 160) = 0;
    v342 = (void **)(v54 + 160);
    *(_QWORD *)(v54 + 184) = 0;
    v58 = (void **)(v54 + 184);
    *(_QWORD *)(v54 + 208) = 0;
    v338 = (void **)(v54 + 208);
    *(_QWORD *)(v54 + 232) = 0;
    v340 = (void **)(v54 + 232);
    *(_QWORD *)(v54 + 144) = 0;
    *(_QWORD *)(v54 + 168) = 0;
    *(_DWORD *)(v54 + 176) = 0;
    *(_QWORD *)(v54 + 192) = 0;
    *(_DWORD *)(v54 + 200) = 0;
    *(_QWORD *)(v54 + 216) = 0;
    *(_DWORD *)(v54 + 224) = 0;
    *(_QWORD *)(v54 + 240) = 0;
    *(_DWORD *)(v54 + 248) = 0;
    *(_QWORD *)(v54 + 256) = 0;
    *(_QWORD *)(v54 + 264) = 0;
    *(_DWORD *)(v54 + 272) = 0;
    v59 = (std::__shared_weak_count *)operator new();
    v59->__shared_owners_ = 0;
    v60 = (unint64_t *)&v59->__shared_owners_;
    v59->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295E58;
    v59->__shared_weak_owners_ = 0;
    v59[1].__vftable = (std::__shared_weak_count_vtbl *)v54;
    if ((int)v48 + 1 <= 0)
    {
      v65 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
      if ((v65 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
      {
        qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
        __cxa_guard_release(&qword_1ED52ACD0);
      }
      v66 = qword_1ED52ACE0;
      if (!os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_ERROR))
        goto LABEL_120;
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v48 + 1;
      v67 = v66;
      v68 = "invalid number of faces: %d";
      v69 = 8;
LABEL_119:
      _os_log_error_impl(&dword_1C9870000, v67, OS_LOG_TYPE_ERROR, v68, buf, v69);
      goto LABEL_120;
    }
    v57 = (void **)(v54 + 136);
    v334 = (void **)(v54 + 112);
    if (a5)
    {
      v61 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
      if ((v61 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
      {
        qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
        __cxa_guard_release(&qword_1ED52ACD0);
      }
      v62 = qword_1ED52ACE0;
      if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1C9870000, v62, OS_LOG_TYPE_INFO, "use caranet on CPU.", buf, 2u);
      }
      v64 = 0;
    }
    else
    {
      v70 = MGGetBoolAnswer();
      v71 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
      if ((v71 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
      {
        qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
        __cxa_guard_release(&qword_1ED52ACD0);
      }
      v72 = qword_1ED52ACE0;
      v73 = os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_INFO);
      if (v70)
      {
        if (v73)
        {
          *(_WORD *)buf = 0;
          v64 = 2;
          v74 = v72;
          v75 = "use caranet on ANE.";
LABEL_76:
          _os_log_impl(&dword_1C9870000, v74, OS_LOG_TYPE_INFO, v75, buf, 2u);
          goto LABEL_79;
        }
        v64 = 2;
      }
      else
      {
        if (v73)
        {
          *(_WORD *)buf = 0;
          v64 = 1;
          v74 = v72;
          v75 = "use caranet on GPU.";
          goto LABEL_76;
        }
        v64 = 1;
      }
    }
LABEL_79:
    cva::Sprintf::sprintf((cva::Sprintf *)"b%d", v63, v48 + 1);
    if (buf[23] >= 0)
      v76 = buf;
    else
      v76 = *(const char **)buf;
    sub_1C98CD884((uint64_t *)&memptr, a2, v64, __s, v76);
    if ((buf[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)buf);
      v77 = memptr;
      if (!memptr)
      {
LABEL_86:
        v78 = 0;
        goto LABEL_87;
      }
    }
    else
    {
      v77 = memptr;
      if (!memptr)
        goto LABEL_86;
    }
    v78 = (_QWORD *)operator new();
    *v78 = &off_1E8295F38;
    v78[1] = 0;
    v78[2] = 0;
    v78[3] = v77;
LABEL_87:
    memptr = 0;
    v79 = *(std::__shared_weak_count **)(v54 + 8);
    *(_QWORD *)v54 = v77;
    *(_QWORD *)(v54 + 8) = v78;
    v53 = v48 + 1;
    if (!v79)
      goto LABEL_91;
    v80 = (unint64_t *)&v79->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (v81)
    {
LABEL_91:
      v82 = memptr;
      if (!memptr)
        goto LABEL_93;
LABEL_92:
      (*(void (**)(void *))(*(_QWORD *)v82 + 8))(v82);
      goto LABEL_93;
    }
    ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
    std::__shared_weak_count::__release_weak(v79);
    v82 = memptr;
    if (memptr)
      goto LABEL_92;
LABEL_93:
    v83 = *(_QWORD *)v54;
    if (!*(_QWORD *)v54)
      goto LABEL_120;
    *(_DWORD *)(v54 + 32) = v48 + 1;
    sub_1C9906638((uint64_t *)buf, (uint64_t *)(v83 + 8), (uint64_t)&off_1E8296578, v48 + 1);
    v84 = *(_QWORD *)buf;
    v85 = *(_QWORD *)(v54 + 16);
    *(_QWORD *)(v54 + 16) = *(_QWORD *)buf;
    if (v85)
    {
      v86 = *(_QWORD **)(v85 + 16);
      if (v86)
      {
        do
        {
          v87 = (_QWORD *)*v86;
          operator delete(v86);
          v86 = v87;
        }
        while (v87);
      }
      v88 = *(void **)v85;
      *(_QWORD *)v85 = 0;
      if (v88)
        operator delete(v88);
      MEMORY[0x1CAA44AFC](v85, 0x10A0C408EF24B1CLL);
      v84 = *(_QWORD *)(v54 + 16);
    }
    if (!v84)
    {
      v96 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
      if ((v96 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
      {
        qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
        __cxa_guard_release(&qword_1ED52ACD0);
      }
      v97 = qword_1ED52ACE0;
      v53 = v48 + 1;
      if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        v67 = v97;
        v68 = "Failed to create input nodes map in caranet regressor";
        goto LABEL_118;
      }
      do
LABEL_120:
        v100 = __ldaxr(v60);
      while (__stlxr(v100 - 1, v60));
      if (!v100)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
      v54 = 0;
      v59 = 0;
      v38 = v337;
      goto LABEL_124;
    }
    sub_1C9906638((uint64_t *)buf, (uint64_t *)(*(_QWORD *)v54 + 32), v331, *(_DWORD *)(v54 + 32));
    v89 = *(_QWORD *)buf;
    v90 = *(_QWORD *)(v54 + 24);
    *(_QWORD *)(v54 + 24) = *(_QWORD *)buf;
    if (v90)
    {
      v91 = *(_QWORD **)(v90 + 16);
      if (v91)
      {
        do
        {
          v92 = (_QWORD *)*v91;
          operator delete(v91);
          v91 = v92;
        }
        while (v92);
      }
      v93 = *(void **)v90;
      *(_QWORD *)v90 = 0;
      if (v93)
        operator delete(v93);
      MEMORY[0x1CAA44AFC](v90, 0x10A0C408EF24B1CLL);
      v89 = *(_QWORD *)(v54 + 24);
    }
    v53 = v48 + 1;
    if (!v89)
    {
      v98 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
      if ((v98 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
      {
        qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
        __cxa_guard_release(&qword_1ED52ACD0);
      }
      v99 = qword_1ED52ACE0;
      if (!os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_ERROR))
        goto LABEL_120;
      *(_WORD *)buf = 0;
      v67 = v99;
      v68 = "Failed to create output nodes map in caranet regressor";
LABEL_118:
      v69 = 2;
      goto LABEL_119;
    }
    v94 = sub_1C98AF10C(*(_QWORD **)(v54 + 16), (unint64_t)"network_inputs_image_2_0_bridge");
    if (v94)
      v95 = *((_DWORD *)v94 + 6);
    else
      v95 = -1;
    v105 = *(int8x16_t *)(*(_QWORD *)(*(_QWORD *)v54 + 8) + 40 * v95 + 24);
    *(int32x2_t *)v105.i8 = vmul_s32(*(int32x2_t *)v105.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v105, v105, 8uLL));
    v106 = (v105.i32[0] * v105.i32[1]);
    if ((_DWORD)v106 != *(_DWORD *)(v54 + 56))
    {
      *(_DWORD *)(v54 + 56) = v106;
      if ((_DWORD)v106)
      {
        if (*(_QWORD *)(v54 + 48) < v106)
        {
          free(*(void **)(v54 + 40));
          v107 = (4 * v106 + 31) & 0x7FFFFFFE0;
          *(_QWORD *)(v54 + 40) = 0;
          *(_QWORD *)(v54 + 48) = v107 >> 2;
          *(_QWORD *)buf = 0;
          malloc_type_posix_memalign((void **)buf, 0x20uLL, v107, 0x49090899uLL);
          *(_QWORD *)(v54 + 40) = *(_QWORD *)buf;
        }
      }
      else
      {
        free(*v55);
        *v55 = 0;
        *(_QWORD *)(v54 + 48) = 0;
      }
      v106 = *(unsigned int *)(v54 + 56);
    }
    if ((_DWORD)v106)
      bzero(*v55, 4 * v106);
    v108 = sub_1C98AF10C(*(_QWORD **)(v54 + 16), (unint64_t)"network_inputs_var_0_bridge");
    if (v108)
      v109 = *((_DWORD *)v108 + 6);
    else
      v109 = -1;
    v110 = *(int8x16_t *)(*(_QWORD *)(*(_QWORD *)v54 + 8) + 40 * v109 + 24);
    *(int32x2_t *)v110.i8 = vmul_s32(*(int32x2_t *)v110.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v110, v110, 8uLL));
    v111 = (v110.i32[0] * v110.i32[1]);
    if ((_DWORD)v111 != *(_DWORD *)(v54 + 80))
    {
      *(_DWORD *)(v54 + 80) = v111;
      if ((_DWORD)v111)
      {
        if (*(_QWORD *)(v54 + 72) < v111)
        {
          free(*(void **)(v54 + 64));
          v112 = (4 * v111 + 31) & 0x7FFFFFFE0;
          *(_QWORD *)(v54 + 64) = 0;
          *(_QWORD *)(v54 + 72) = v112 >> 2;
          *(_QWORD *)buf = 0;
          malloc_type_posix_memalign((void **)buf, 0x20uLL, v112, 0x49090899uLL);
          *(_QWORD *)(v54 + 64) = *(_QWORD *)buf;
        }
      }
      else
      {
        free(*v56);
        *v56 = 0;
        *(_QWORD *)(v54 + 72) = 0;
      }
      v111 = *(unsigned int *)(v54 + 80);
    }
    if ((_DWORD)v111)
      bzero(*v56, 4 * v111);
    v113 = sub_1C98AF10C(*(_QWORD **)(v54 + 24), (unint64_t)"angles_output");
    if (v113)
      v114 = *((_DWORD *)v113 + 6);
    else
      v114 = -1;
    v115 = *(int8x16_t *)(*(_QWORD *)(*(_QWORD *)v54 + 32) + 40 * v114 + 24);
    *(int32x2_t *)v115.i8 = vmul_s32(*(int32x2_t *)v115.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v115, v115, 8uLL));
    v116 = (v115.i32[0] * v115.i32[1]);
    if ((_DWORD)v116 != *(_DWORD *)(v54 + 200))
    {
      *(_DWORD *)(v54 + 200) = v116;
      if ((_DWORD)v116)
      {
        if (*(_QWORD *)(v54 + 192) < v116)
        {
          free(*(void **)(v54 + 184));
          v117 = (4 * v116 + 31) & 0x7FFFFFFE0;
          *(_QWORD *)(v54 + 184) = 0;
          *(_QWORD *)(v54 + 192) = v117 >> 2;
          *(_QWORD *)buf = 0;
          malloc_type_posix_memalign((void **)buf, 0x20uLL, v117, 0x49090899uLL);
          *(_QWORD *)(v54 + 184) = *(_QWORD *)buf;
        }
      }
      else
      {
        free(*v58);
        *v58 = 0;
        *(_QWORD *)(v54 + 192) = 0;
      }
      v116 = *(unsigned int *)(v54 + 200);
    }
    if ((_DWORD)v116)
      bzero(*v58, 4 * v116);
    v118 = sub_1C98AF10C(*(_QWORD **)(v54 + 24), (unint64_t)"translation_output");
    if (v118)
      v119 = *((_DWORD *)v118 + 6);
    else
      v119 = -1;
    v38 = v337;
    v120 = *(int8x16_t *)(*(_QWORD *)(*(_QWORD *)v54 + 32) + 40 * v119 + 24);
    *(int32x2_t *)v120.i8 = vmul_s32(*(int32x2_t *)v120.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v120, v120, 8uLL));
    v121 = (v120.i32[0] * v120.i32[1]);
    if ((_DWORD)v121 != *(_DWORD *)(v54 + 224))
    {
      *(_DWORD *)(v54 + 224) = v121;
      if ((_DWORD)v121)
      {
        if (*(_QWORD *)(v54 + 216) < v121)
        {
          free(*(void **)(v54 + 208));
          v122 = (4 * v121 + 31) & 0x7FFFFFFE0;
          *(_QWORD *)(v54 + 208) = 0;
          *(_QWORD *)(v54 + 216) = v122 >> 2;
          *(_QWORD *)buf = 0;
          malloc_type_posix_memalign((void **)buf, 0x20uLL, v122, 0x49090899uLL);
          *(_QWORD *)(v54 + 208) = *(_QWORD *)buf;
        }
      }
      else
      {
        free(*v338);
        *v338 = 0;
        *(_QWORD *)(v54 + 216) = 0;
      }
      v121 = *(unsigned int *)(v54 + 224);
    }
    if ((_DWORD)v121)
      bzero(*v338, 4 * v121);
    v123 = sub_1C98AF10C(*(_QWORD **)(v54 + 24), (unint64_t)"bs_latent_output");
    if (v123)
      v124 = *((_DWORD *)v123 + 6);
    else
      v124 = -1;
    v125 = *(int8x16_t *)(*(_QWORD *)(*(_QWORD *)v54 + 32) + 40 * v124 + 24);
    *(int32x2_t *)v125.i8 = vmul_s32(*(int32x2_t *)v125.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v125, v125, 8uLL));
    v126 = (v125.i32[0] * v125.i32[1]);
    if ((_DWORD)v126 != *(_DWORD *)(v54 + 104))
    {
      *(_DWORD *)(v54 + 104) = v126;
      if ((_DWORD)v126)
      {
        if (*(_QWORD *)(v54 + 96) < v126)
        {
          free(*(void **)(v54 + 88));
          v127 = (4 * v126 + 31) & 0x7FFFFFFE0;
          *(_QWORD *)(v54 + 88) = 0;
          *(_QWORD *)(v54 + 96) = v127 >> 2;
          *(_QWORD *)buf = 0;
          malloc_type_posix_memalign((void **)buf, 0x20uLL, v127, 0x49090899uLL);
          *(_QWORD *)(v54 + 88) = *(_QWORD *)buf;
        }
      }
      else
      {
        free(*v339);
        *v339 = 0;
        *(_QWORD *)(v54 + 96) = 0;
      }
      v126 = *(unsigned int *)(v54 + 104);
    }
    if ((_DWORD)v126)
      bzero(*v339, 4 * v126);
    *(_DWORD *)(v54 + 280) = v126 / v53;
    v128 = sub_1C98AF10C(*(_QWORD **)(v54 + 24), (unint64_t)"gaze_output");
    if (v128)
      v129 = *((_DWORD *)v128 + 6);
    else
      v129 = -1;
    v130 = *(int8x16_t *)(*(_QWORD *)(*(_QWORD *)v54 + 32) + 40 * v129 + 24);
    *(int32x2_t *)v130.i8 = vmul_s32(*(int32x2_t *)v130.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v130, v130, 8uLL));
    v131 = (v130.i32[0] * v130.i32[1]);
    if ((_DWORD)v131 != *(_DWORD *)(v54 + 248))
    {
      *(_DWORD *)(v54 + 248) = v131;
      if ((_DWORD)v131)
      {
        if (*(_QWORD *)(v54 + 240) < v131)
        {
          free(*(void **)(v54 + 232));
          v132 = (4 * v131 + 31) & 0x7FFFFFFE0;
          *(_QWORD *)(v54 + 232) = 0;
          *(_QWORD *)(v54 + 240) = v132 >> 2;
          *(_QWORD *)buf = 0;
          malloc_type_posix_memalign((void **)buf, 0x20uLL, v132, 0x49090899uLL);
          *(_QWORD *)(v54 + 232) = *(_QWORD *)buf;
        }
      }
      else
      {
        free(*v340);
        *v340 = 0;
        *(_QWORD *)(v54 + 240) = 0;
      }
      v131 = *(unsigned int *)(v54 + 248);
    }
    if ((_DWORD)v131)
      bzero(*v340, 4 * v131);
    v133 = sub_1C98AF10C(*(_QWORD **)(v54 + 24), (unint64_t)"failure_logit_output");
    if (v133)
      v134 = *((_DWORD *)v133 + 6);
    else
      v134 = -1;
    v135 = *(int8x16_t *)(*(_QWORD *)(*(_QWORD *)v54 + 32) + 40 * v134 + 24);
    *(int32x2_t *)v135.i8 = vmul_s32(*(int32x2_t *)v135.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v135, v135, 8uLL));
    v136 = (v135.i32[0] * v135.i32[1]);
    if ((_DWORD)v136 != *(_DWORD *)(v54 + 176))
    {
      *(_DWORD *)(v54 + 176) = v136;
      if ((_DWORD)v136)
      {
        if (*(_QWORD *)(v54 + 168) < v136)
        {
          free(*(void **)(v54 + 160));
          v137 = (4 * v136 + 31) & 0x7FFFFFFE0;
          *(_QWORD *)(v54 + 160) = 0;
          *(_QWORD *)(v54 + 168) = v137 >> 2;
          *(_QWORD *)buf = 0;
          malloc_type_posix_memalign((void **)buf, 0x20uLL, v137, 0x49090899uLL);
          *(_QWORD *)(v54 + 160) = *(_QWORD *)buf;
        }
      }
      else
      {
        free(*v342);
        *v342 = 0;
        *(_QWORD *)(v54 + 168) = 0;
      }
      v136 = *(unsigned int *)(v54 + 176);
    }
    if ((_DWORD)v136)
      bzero(*v342, 4 * v136);
    v138 = sub_1C98AF10C(*(_QWORD **)(v54 + 24), (unint64_t)"basic_ens_output");
    if (v138)
    {
      v139 = *((_DWORD *)v138 + 6);
      if (v139 != -1)
      {
        v140 = *(int8x16_t *)(*(_QWORD *)(*(_QWORD *)v54 + 32) + 40 * v139 + 24);
        *(int32x2_t *)v140.i8 = vmul_s32(*(int32x2_t *)v140.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v140, v140, 8uLL));
        v141 = (v140.i32[0] * v140.i32[1]);
        if ((_DWORD)v141 != *(_DWORD *)(v54 + 152))
        {
          *(_DWORD *)(v54 + 152) = v141;
          if ((_DWORD)v141)
          {
            if (*(_QWORD *)(v54 + 144) < v141)
            {
              free(*(void **)(v54 + 136));
              v142 = (4 * v141 + 31) & 0x7FFFFFFE0;
              *(_QWORD *)(v54 + 136) = 0;
              *(_QWORD *)(v54 + 144) = v142 >> 2;
              *(_QWORD *)buf = 0;
              malloc_type_posix_memalign((void **)buf, 0x20uLL, v142, 0x49090899uLL);
              *(_QWORD *)(v54 + 136) = *(_QWORD *)buf;
            }
          }
          else
          {
            free(*v57);
            *v57 = 0;
            *(_QWORD *)(v54 + 144) = 0;
          }
          LODWORD(v141) = *(_DWORD *)(v54 + 152);
        }
        if ((_DWORD)v141)
          bzero(*v57, 4 * v141);
      }
    }
    v143 = sub_1C98AF10C(*(_QWORD **)(v54 + 24), (unint64_t)"kas_output");
    if (v143)
    {
      v144 = *((_DWORD *)v143 + 6);
      if (v144 != -1)
      {
        v145 = *(int8x16_t *)(*(_QWORD *)(*(_QWORD *)v54 + 32) + 40 * v144 + 24);
        *(int32x2_t *)v145.i8 = vmul_s32(*(int32x2_t *)v145.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v145, v145, 8uLL));
        v146 = (v145.i32[0] * v145.i32[1]);
        if ((_DWORD)v146 != *(_DWORD *)(v54 + 128))
        {
          *(_DWORD *)(v54 + 128) = v146;
          if ((_DWORD)v146)
          {
            if (*(_QWORD *)(v54 + 120) < v146)
            {
              free(*(void **)(v54 + 112));
              v147 = (4 * v146 + 31) & 0x7FFFFFFE0;
              *(_QWORD *)(v54 + 112) = 0;
              *(_QWORD *)(v54 + 120) = v147 >> 2;
              *(_QWORD *)buf = 0;
              malloc_type_posix_memalign((void **)buf, 0x20uLL, v147, 0x49090899uLL);
              *(_QWORD *)(v54 + 112) = *(_QWORD *)buf;
            }
          }
          else
          {
            free(*v334);
            *v334 = 0;
            *(_QWORD *)(v54 + 120) = 0;
          }
          LODWORD(v146) = *(_DWORD *)(v54 + 128);
        }
        if ((_DWORD)v146)
          bzero(*v334, 4 * v146);
      }
    }
    v148 = (void **)(v54 + 256);
    v149 = sub_1C98AF10C(*(_QWORD **)(v54 + 24), (unint64_t)"tongue_logits_output");
    if (!v149 || (v150 = *((_DWORD *)v149 + 6), v150 == -1))
    {
      v154 = (2 * v53);
      if ((_DWORD)v154 != *(_DWORD *)(v54 + 272))
      {
        *(_DWORD *)(v54 + 272) = v154;
        if (*(_QWORD *)(v54 + 264) < v154)
        {
          free(*(void **)(v54 + 256));
          v155 = (4 * v154 + 31) & 0x3FFFFFFE0;
          *(_QWORD *)(v54 + 256) = 0;
          *(_QWORD *)(v54 + 264) = v155 >> 2;
          *(_QWORD *)buf = 0;
          malloc_type_posix_memalign((void **)buf, 0x20uLL, v155, 0x49090899uLL);
          *(_QWORD *)(v54 + 256) = *(_QWORD *)buf;
          LODWORD(v154) = *(_DWORD *)(v54 + 272);
        }
      }
      if (!(_DWORD)v154)
        goto LABEL_235;
    }
    else
    {
      v151 = *(int8x16_t *)(*(_QWORD *)(*(_QWORD *)v54 + 32) + 40 * v150 + 24);
      *(int32x2_t *)v151.i8 = vmul_s32(*(int32x2_t *)v151.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v151, v151, 8uLL));
      v152 = (v151.i32[0] * v151.i32[1]);
      if ((_DWORD)v152 != *(_DWORD *)(v54 + 272))
      {
        *(_DWORD *)(v54 + 272) = v152;
        if ((_DWORD)v152)
        {
          if (*(_QWORD *)(v54 + 264) < v152)
          {
            free(*(void **)(v54 + 256));
            v153 = (4 * v152 + 31) & 0x7FFFFFFE0;
            *(_QWORD *)(v54 + 256) = 0;
            *(_QWORD *)(v54 + 264) = v153 >> 2;
            *(_QWORD *)buf = 0;
            malloc_type_posix_memalign((void **)buf, 0x20uLL, v153, 0x49090899uLL);
            *(_QWORD *)(v54 + 256) = *(_QWORD *)buf;
          }
        }
        else
        {
          free(*v148);
          *v148 = 0;
          *(_QWORD *)(v54 + 264) = 0;
        }
        LODWORD(v152) = *(_DWORD *)(v54 + 272);
      }
      LODWORD(v154) = v152;
      if (!(_DWORD)v152)
        goto LABEL_235;
    }
    bzero(*v148, 4 * v154);
LABEL_235:
    *(_DWORD *)(v54 + 288) = *(_DWORD *)(v54 + 128) / v53;
    *(_DWORD *)(v54 + 284) = *(_DWORD *)(v54 + 152) / v53;
    *(_BYTE *)(v54 + 292) = a7;
LABEL_124:
    v101 = (uint64_t *)(v38[7] + 16 * v48);
    v102 = (std::__shared_weak_count *)v101[1];
    *v101 = v54;
    v101[1] = (uint64_t)v59;
    if (v102)
    {
      v103 = (unint64_t *)&v102->__shared_owners_;
      do
        v104 = __ldaxr(v103);
      while (__stlxr(v104 - 1, v103));
      if (!v104)
      {
        ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
        std::__shared_weak_count::__release_weak(v102);
      }
    }
    v50 = v38[7];
    v52 = *(_QWORD *)(v50 + 16 * v48);
    v48 = v53;
    if (!v52)
    {
      v174 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
      if ((v174 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
      {
        qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
        __cxa_guard_release(&qword_1ED52ACD0);
      }
      v175 = qword_1ED52ACE0;
      v13 = v329;
      a1 = v330;
      if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v53;
        _os_log_error_impl(&dword_1C9870000, v175, OS_LOG_TYPE_ERROR, "failed creating regressor for batch size %d", buf, 8u);
      }
      v176 = v38[7];
      for (i = v38[8]; i != v176; i -= 16)
      {
        v178 = *(std::__shared_weak_count **)(i - 8);
        if (v178)
        {
          v179 = (unint64_t *)&v178->__shared_owners_;
          do
            v180 = __ldaxr(v179);
          while (__stlxr(v180 - 1, v179));
          if (!v180)
          {
            ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
            std::__shared_weak_count::__release_weak(v178);
          }
        }
      }
      v38[8] = v176;
      goto LABEL_282;
    }
  }
  v156 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v156 + 1) = 0;
  *((_QWORD *)v156 + 2) = 0;
  *(_QWORD *)v156 = &off_1E82959C0;
  *((_DWORD *)v156 + 6) = 0;
  v157 = v156 + 24;
  *(_OWORD *)(v156 + 40) = 0u;
  v158 = (int8x8_t *)(v156 + 40);
  *((_QWORD *)v156 + 11) = 0;
  *((_QWORD *)v156 + 14) = 0;
  v159 = (uint64_t)(v156 + 112);
  *((_DWORD *)v156 + 7) = 0;
  *((_DWORD *)v156 + 8) = 4;
  *(_OWORD *)(v156 + 136) = 0u;
  v160 = (std::__shared_weak_count_vtbl ***)(v156 + 136);
  *(_OWORD *)(v156 + 56) = 0u;
  *(_OWORD *)(v156 + 68) = 0u;
  *((_QWORD *)v156 + 12) = 0;
  *((_DWORD *)v156 + 26) = 0;
  *((_QWORD *)v156 + 15) = 0;
  *((_DWORD *)v156 + 32) = 0;
  *(_OWORD *)(v156 + 152) = 0u;
  *(_OWORD *)(v156 + 168) = 0u;
  sub_1C98CD4C8(buf);
  v161 = *(_OWORD *)buf;
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  v162 = (std::__shared_weak_count *)*((_QWORD *)v156 + 18);
  *(_OWORD *)(v156 + 136) = v161;
  if (v162)
  {
    v163 = (unint64_t *)&v162->__shared_owners_;
    do
      v164 = __ldaxr(v163);
    while (__stlxr(v164 - 1, v163));
    if (!v164)
    {
      ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
      std::__shared_weak_count::__release_weak(v162);
    }
  }
  v165 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v166 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v167 = __ldaxr(v166);
    while (__stlxr(v167 - 1, v166));
    if (!v167)
    {
      ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
      std::__shared_weak_count::__release_weak(v165);
    }
  }
  v341 = (void **)(v156 + 88);
  buf[23] = 14;
  strcpy(buf, "contour.binary");
  sub_1C98B4EB0(&memptr);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  v168 = memptr;
  if (memptr)
  {
    LODWORD(v345) = 0;
    if (*((_DWORD *)memptr + 2) != 2)
    {
      v169 = (*(uint64_t (**)(void *, _DWORD **, uint64_t))(*(_QWORD *)memptr + 144))(memptr, &v345, 4);
      if (v169 >= 1)
        v168[2] += v169;
    }
    v170 = v345;
    if (((_DWORD)v345 - 1000001) < 0xFFF0BDC0)
    {
      v171 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
      if ((v171 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
      {
        qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
        __cxa_guard_release(&qword_1ED52ACD0);
      }
      v172 = qword_1ED52ACE0;
      v159 = (uint64_t)(v156 + 112);
      if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        v173 = "contour binary resource seems corrupted";
        goto LABEL_471;
      }
      goto LABEL_288;
    }
    v185 = (std::__shared_weak_count *)operator new(0x48uLL);
    v185->__shared_owners_ = 0;
    v185->__shared_weak_owners_ = 0;
    v185->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295A68;
    v202 = (12 * v170 + 31) & 0x7FFFFFFE0;
    v185[1].__shared_owners_ = v202 >> 2;
    *(_QWORD *)buf = 0;
    malloc_type_posix_memalign((void **)buf, 0x20uLL, v202, 0x49090899uLL);
    v203 = *(void **)buf;
    v185[1].__vftable = *(std::__shared_weak_count_vtbl **)buf;
    LODWORD(v185[1].__shared_weak_owners_) = v170;
    bzero(v203, 12 * v170);
    v185[2].__shared_owners_ = v202 >> 2;
    *(_QWORD *)buf = 0;
    malloc_type_posix_memalign((void **)buf, 0x20uLL, v202, 0x49090899uLL);
    v204 = *(void **)buf;
    v185[2].__vftable = *(std::__shared_weak_count_vtbl **)buf;
    LODWORD(v185[2].__shared_weak_owners_) = v170;
    bzero(v204, 12 * v170);
    if (*((_DWORD *)v168 + 2) == 2)
    {
      v157 = v156 + 24;
      v159 = (uint64_t)(v156 + 112);
      v184 = v185 + 1;
      v158 = (int8x8_t *)(v156 + 40);
    }
    else
    {
      v303 = (*(uint64_t (**)(_QWORD *, void *, uint64_t))(*v168 + 144))(v168, v203, 12 * (int)v345);
      if (v303 >= 1)
        v168[2] += v303;
      v157 = v156 + 24;
      v158 = (int8x8_t *)(v156 + 40);
      v159 = (uint64_t)(v156 + 112);
      if (*((_DWORD *)v168 + 2) == 2)
      {
        v184 = v185 + 1;
      }
      else
      {
        v315 = (*(uint64_t (**)(_QWORD *, std::__shared_weak_count_vtbl *, uint64_t))(*v168 + 144))(v168, v185[2].__vftable, 12 * (int)v345);
        v184 = v185 + 1;
        if (v315 >= 1)
          v168[2] += v315;
      }
    }
  }
  else
  {
    v183 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
    if ((v183 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
    {
      qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
      __cxa_guard_release(&qword_1ED52ACD0);
    }
    v172 = qword_1ED52ACE0;
    if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v173 = "failure reading contour binary resource";
LABEL_471:
      _os_log_error_impl(&dword_1C9870000, v172, OS_LOG_TYPE_ERROR, v173, buf, 2u);
    }
LABEL_288:
    v184 = 0;
    v185 = 0;
  }
  v186 = v348;
  if (v348)
  {
    v187 = (unint64_t *)&v348->__shared_owners_;
    do
      v188 = __ldaxr(v187);
    while (__stlxr(v188 - 1, v187));
    if (!v188)
    {
      ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
      std::__shared_weak_count::__release_weak(v186);
    }
  }
  if (v185)
  {
    v189 = (unint64_t *)&v185->__shared_owners_;
    do
      v190 = __ldxr(v189);
    while (__stxr(v190 + 1, v189));
  }
  v191 = (std::__shared_weak_count *)*((_QWORD *)v156 + 22);
  *((_QWORD *)v156 + 21) = v184;
  *((_QWORD *)v156 + 22) = v185;
  if (v191)
  {
    v192 = (unint64_t *)&v191->__shared_owners_;
    do
      v193 = __ldaxr(v192);
    while (__stlxr(v193 - 1, v192));
    if (!v193)
    {
      ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
      std::__shared_weak_count::__release_weak(v191);
    }
  }
  buf[23] = 12;
  strcpy(buf, "faces.binary");
  sub_1C98B4EB0(&memptr);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  v194 = memptr;
  if (memptr)
  {
    LODWORD(v345) = 0;
    if (*((_DWORD *)memptr + 2) != 2)
    {
      v195 = (*(uint64_t (**)(void *, _DWORD **, uint64_t))(*(_QWORD *)memptr + 144))(memptr, &v345, 4);
      if (v195 >= 1)
        v194[2] += v195;
    }
    v196 = (int)v345;
    v197 = (int)v345 / 3;
    LODWORD(v345) = (int)v345 / 3;
    if ((v196 - 3000003) >= 0xFFD23940)
    {
      v205 = v158;
      v206 = v157;
      v207 = v184;
      v208 = (void **)v159;
      if (v197 != *((_DWORD *)v156 + 32))
      {
        *((_DWORD *)v156 + 32) = v197;
        v209 = (3 * v197);
        if (*((_QWORD *)v156 + 15) < v209)
        {
          free(*((void **)v156 + 14));
          v210 = (4 * v209 + 31) & 0x7FFFFFFE0;
          *((_QWORD *)v156 + 14) = 0;
          *((_QWORD *)v156 + 15) = v210 >> 2;
          *(_QWORD *)buf = 0;
          malloc_type_posix_memalign((void **)buf, 0x20uLL, v210, 0x49090899uLL);
          *((_QWORD *)v156 + 14) = *(_QWORD *)buf;
          v197 = *((_DWORD *)v156 + 32);
        }
      }
      v159 = (uint64_t)v208;
      v211 = *v208;
      if (v197)
        bzero(*v208, 4 * (3 * v197));
      v184 = v207;
      v157 = v206;
      v158 = v205;
      v160 = (std::__shared_weak_count_vtbl ***)(v156 + 136);
      if (*((_DWORD *)v194 + 2) != 2)
      {
        v212 = (*(uint64_t (**)(_QWORD *, void *, uint64_t))(*v194 + 144))(v194, v211, 12 * (int)v345);
        if (v212 >= 1)
          v194[2] += v212;
      }
    }
    else
    {
      v198 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
      if ((v198 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
      {
        qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
        __cxa_guard_release(&qword_1ED52ACD0);
      }
      v199 = qword_1ED52ACE0;
      if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        v200 = "triangles binary resource seems corrupted";
        goto LABEL_315;
      }
    }
  }
  else
  {
    v201 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
    if ((v201 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
    {
      qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
      __cxa_guard_release(&qword_1ED52ACD0);
    }
    v199 = qword_1ED52ACE0;
    if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v200 = "failure reading faces binary resource";
LABEL_315:
      _os_log_error_impl(&dword_1C9870000, v199, OS_LOG_TYPE_ERROR, v200, buf, 2u);
    }
  }
  v213 = v348;
  if (v348)
  {
    v214 = (unint64_t *)&v348->__shared_owners_;
    do
      v215 = __ldaxr(v214);
    while (__stlxr(v215 - 1, v214));
    if (!v215)
    {
      ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
      std::__shared_weak_count::__release_weak(v213);
    }
  }
  *(_QWORD *)buf = operator new(0x19uLL);
  *(_OWORD *)&buf[8] = xmmword_1C9927570;
  strcpy(*(char **)buf, "blendshape_sizes.binary");
  sub_1C98B4EB0(&memptr);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  v216 = memptr;
  if (memptr)
  {
    v217 = v184;
    v218 = v158;
    if (*((_DWORD *)memptr + 2) == 2)
    {
      v219 = v156 + 28;
    }
    else
    {
      v223 = (*(uint64_t (**)(void *, _DWORD *, uint64_t))(*(_QWORD *)memptr + 144))(memptr, v157, 4);
      if (v223 >= 1)
        v216[2] += v223;
      v219 = v156 + 28;
      if (*((_DWORD *)v216 + 2) != 2)
      {
        v224 = (*(uint64_t (**)(_QWORD *, char *, uint64_t))(*v216 + 144))(v216, v156 + 28, 4);
        if (v224 >= 1)
          v216[2] += v224;
      }
    }
    if ((*v157 - 1000001) < 0xFFF0BDC0 || (*v219 - 1000001) < 0xFFF0BDC0)
    {
      v225 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
      if ((v225 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
      {
        qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
        __cxa_guard_release(&qword_1ED52ACD0);
      }
      v221 = qword_1ED52ACE0;
      v158 = v218;
      v184 = v217;
      if (!os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_ERROR))
        goto LABEL_348;
      *(_WORD *)buf = 0;
      v222 = "blendshape_sizes binary resource seems corrupted";
LABEL_469:
      _os_log_error_impl(&dword_1C9870000, v221, OS_LOG_TYPE_ERROR, v222, buf, 2u);
      goto LABEL_348;
    }
    *(_QWORD *)buf = operator new(0x20uLL);
    *(_OWORD *)&buf[8] = xmmword_1C99277A0;
    strcpy(*(char **)buf, "blendshape_indices.binary");
    sub_1C98B4EB0(&v345);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    v304 = v345;
    if (v345)
    {
      v344 = 0;
      v343 = 0;
      v158 = v218;
      v184 = v217;
      if (v345[2] != 2)
      {
        v305 = (*(uint64_t (**)(_DWORD *, int *, uint64_t))(*(_QWORD *)v345 + 144))(v345, &v344, 4);
        if (v305 >= 1)
          *((_QWORD *)v304 + 2) += v305;
        if (v304[2] != 2)
        {
          v306 = (*(uint64_t (**)(_DWORD *, int *, uint64_t))(*(_QWORD *)v304 + 144))(v304, &v343, 4);
          if (v306 >= 1)
            *((_QWORD *)v304 + 2) += v306;
        }
      }
      v307 = v344;
      if (v344 >= 1 && v344 <= 0xF4240 && v343 >= 1 && v343 <= 1000000)
      {
        if (v344 != *((_DWORD *)v156 + 20))
        {
          *((_DWORD *)v156 + 20) = v344;
          v308 = 2 * v307;
          if (*((_QWORD *)v156 + 9) < (unint64_t)(2 * v307))
          {
            free(*((void **)v156 + 8));
            v309 = (4 * v308 + 31) & 0x3FFFFFFE0;
            *((_QWORD *)v156 + 8) = 0;
            *((_QWORD *)v156 + 9) = v309 >> 2;
            *(_QWORD *)buf = 0;
            malloc_type_posix_memalign((void **)buf, 0x20uLL, v309, 0x49090899uLL);
            *((_QWORD *)v156 + 8) = *(_QWORD *)buf;
            LODWORD(v307) = *((_DWORD *)v156 + 20);
          }
        }
        v310 = *((_QWORD *)v156 + 8);
        v311 = 2 * v307;
        if (v311)
          bzero(*((void **)v156 + 8), 4 * v311);
        v184 = v217;
        if (v304[2] != 2)
        {
          v312 = (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(*(_QWORD *)v304 + 144))(v304, v310, 8 * v344);
          if (v312 >= 1)
            *((_QWORD *)v304 + 2) += v312;
        }
        v313 = v343;
        if (v343 == *((_DWORD *)v156 + 26))
        {
          v314 = (void **)(v156 + 88);
        }
        else
        {
          *((_DWORD *)v156 + 26) = v343;
          v314 = (void **)(v156 + 88);
          if (v313)
          {
            v320 = (3 * v313);
            if (*((_QWORD *)v156 + 12) < v320)
            {
              free(*((void **)v156 + 11));
              v321 = (4 * v320 + 31) & 0x7FFFFFFE0;
              *((_QWORD *)v156 + 11) = 0;
              *((_QWORD *)v156 + 12) = v321 >> 2;
              *(_QWORD *)buf = 0;
              malloc_type_posix_memalign((void **)buf, 0x20uLL, v321, 0x49090899uLL);
              *((_QWORD *)v156 + 11) = *(_QWORD *)buf;
            }
          }
          else
          {
            free(*v341);
            *v341 = 0;
            *((_QWORD *)v156 + 12) = 0;
          }
          v313 = *((_DWORD *)v156 + 26);
          v184 = v217;
        }
        v322 = *v314;
        if (v313)
          bzero(*v314, 4 * (3 * v313));
        if (v304[2] != 2)
        {
          v323 = (*(uint64_t (**)(_DWORD *, void *, uint64_t))(*(_QWORD *)v304 + 144))(v304, v322, 12 * v343);
          if (v323 >= 1)
            *((_QWORD *)v304 + 2) += v323;
        }
        goto LABEL_482;
      }
      v316 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
      if ((v316 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
      {
        qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
        __cxa_guard_release(&qword_1ED52ACD0);
      }
      v317 = qword_1ED52ACE0;
      if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        v318 = "blendshape_indices binary resource seems corrupted";
LABEL_467:
        _os_log_error_impl(&dword_1C9870000, v317, OS_LOG_TYPE_ERROR, v318, buf, 2u);
      }
    }
    else
    {
      v319 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
      v158 = v218;
      if ((v319 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
      {
        qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
        __cxa_guard_release(&qword_1ED52ACD0);
      }
      v317 = qword_1ED52ACE0;
      v184 = v217;
      if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        v318 = "failure reading blendshape indices binary resource";
        goto LABEL_467;
      }
    }
LABEL_482:
    v324 = v346;
    if (v346)
    {
      v325 = (unint64_t *)&v346->__shared_owners_;
      do
        v326 = __ldaxr(v325);
      while (__stlxr(v326 - 1, v325));
      if (!v326)
      {
        ((void (*)(std::__shared_weak_count *))v324->__on_zero_shared)(v324);
        std::__shared_weak_count::__release_weak(v324);
      }
    }
  }
  else
  {
    v220 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
    if ((v220 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
    {
      qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
      __cxa_guard_release(&qword_1ED52ACD0);
    }
    v221 = qword_1ED52ACE0;
    if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v222 = "failure reading blendshape sizes binary resource";
      goto LABEL_469;
    }
  }
LABEL_348:
  v226 = v348;
  if (v348)
  {
    v227 = (unint64_t *)&v348->__shared_owners_;
    do
      v228 = __ldaxr(v227);
    while (__stlxr(v228 - 1, v227));
    if (!v228)
    {
      ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
      std::__shared_weak_count::__release_weak(v226);
    }
  }
  *(_QWORD *)buf = v184;
  *(_QWORD *)&buf[8] = v185;
  if (v185)
  {
    v229 = (unint64_t *)&v185->__shared_owners_;
    do
      v230 = __ldxr(v229);
    while (__stxr(v230 + 1, v229));
    sub_1C98CCA60((unsigned int ***)buf, v158, v159);
    do
      v231 = __ldaxr(v229);
    while (__stlxr(v231 - 1, v229));
    if (!v231)
    {
      ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
      std::__shared_weak_count::__release_weak(v185);
    }
  }
  else
  {
    sub_1C98CCA60((unsigned int ***)buf, v158, v159);
  }
  v232 = (std::__shared_weak_count *)operator new(0x48uLL);
  v232->__shared_owners_ = 0;
  v233 = (unint64_t *)&v232->__shared_owners_;
  v232->__shared_weak_owners_ = 0;
  v232->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295A68;
  v234 = *((_DWORD *)v156 + 8);
  v235 = 4 * (3 * v234);
  v236 = (v235 + 31) & 0x7FFFFFFE0;
  v232[1].__shared_owners_ = v236 >> 2;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v236, 0x49090899uLL);
  v237 = memptr;
  v232[1].__vftable = (std::__shared_weak_count_vtbl *)memptr;
  v238 = v232 + 1;
  LODWORD(v232[1].__shared_weak_owners_) = v234;
  if (v234)
    bzero(v237, 4 * (3 * v234));
  v232[2].__shared_owners_ = v236 >> 2;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, (v235 + 31) & 0x7FFFFFFE0, 0x49090899uLL);
  v239 = memptr;
  v232[2].__vftable = (std::__shared_weak_count_vtbl *)memptr;
  LODWORD(v232[2].__shared_weak_owners_) = v234;
  if (v234)
    bzero(v239, 4 * (3 * v234));
  do
    v240 = __ldxr(v233);
  while (__stxr(v240 + 1, v233));
  v241 = (std::__shared_weak_count *)*((_QWORD *)v156 + 20);
  *((_QWORD *)v156 + 19) = v238;
  *((_QWORD *)v156 + 20) = v232;
  if (v241)
  {
    v242 = (unint64_t *)&v241->__shared_owners_;
    do
      v243 = __ldaxr(v242);
    while (__stlxr(v243 - 1, v242));
    if (!v243)
    {
      ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
      std::__shared_weak_count::__release_weak(v241);
    }
  }
  v244 = **v160;
  v245 = v238->__vftable;
  get_deleter_high = HIDWORD(v244[2].__get_deleter);
  if (v244 == v238->__vftable)
  {
    on_zero_shared_weak = (int)v244[2].__on_zero_shared_weak;
    on_zero_shared_weak_high = HIDWORD(v244[2].__on_zero_shared_weak);
    LODWORD(v244->~__shared_weak_count) = get_deleter_high;
    HIDWORD(v244->~__shared_weak_count) = on_zero_shared_weak;
  }
  else
  {
    LODWORD(v245->~__shared_weak_count) = get_deleter_high;
    HIDWORD(v245->~__shared_weak_count) = v244[2].__on_zero_shared_weak;
    on_zero_shared_weak_high = HIDWORD(v244[2].__on_zero_shared_weak);
  }
  LODWORD(v245->~__shared_weak_count_0) = on_zero_shared_weak_high;
  v249 = **v160;
  v250 = v238->__vftable;
  v251 = HIDWORD(v249[3].~__shared_weak_count_0);
  if (v249 == v238->__vftable)
  {
    on_zero_shared = (int)v249[3].__on_zero_shared;
    on_zero_shared_high = HIDWORD(v249[3].__on_zero_shared);
    HIDWORD(v250->~__shared_weak_count_0) = v251;
    LODWORD(v249->__on_zero_shared) = on_zero_shared;
  }
  else
  {
    HIDWORD(v250->~__shared_weak_count_0) = v251;
    LODWORD(v250->__on_zero_shared) = v249[3].__on_zero_shared;
    on_zero_shared_high = HIDWORD(v249[3].__on_zero_shared);
  }
  HIDWORD(v250->__on_zero_shared) = on_zero_shared_high;
  v254 = **v160;
  v255 = v238->__vftable;
  get_deleter = (int)v254->__get_deleter;
  if (v254 == v238->__vftable)
  {
    v258 = HIDWORD(v254->__get_deleter);
    v257 = (int)v254->__on_zero_shared_weak;
    LODWORD(v255->__get_deleter) = get_deleter;
    HIDWORD(v254->__get_deleter) = v258;
  }
  else
  {
    LODWORD(v255->__get_deleter) = get_deleter;
    HIDWORD(v255->__get_deleter) = HIDWORD(v254->__get_deleter);
    v257 = (int)v254->__on_zero_shared_weak;
  }
  LODWORD(v255->__on_zero_shared_weak) = v257;
  v259 = **v160;
  v260 = v238->__vftable;
  v261 = (int)v259[1].~__shared_weak_count_0;
  if (v259 == v238->__vftable)
  {
    v263 = HIDWORD(v259[1].~__shared_weak_count_0);
    v262 = (int)v259[1].__on_zero_shared;
    HIDWORD(v260->__on_zero_shared_weak) = v261;
    LODWORD(v259[1].~__shared_weak_count) = v263;
  }
  else
  {
    HIDWORD(v260->__on_zero_shared_weak) = v261;
    LODWORD(v260[1].~__shared_weak_count) = HIDWORD(v259[1].~__shared_weak_count_0);
    v262 = (int)v259[1].__on_zero_shared;
  }
  HIDWORD(v260[1].~__shared_weak_count) = v262;
  v264 = (*v160)[3];
  v265 = v232[2].__vftable;
  v266 = HIDWORD(v264[2].__get_deleter);
  if (v264 == v265)
  {
    v268 = (int)v264[2].__on_zero_shared_weak;
    v267 = HIDWORD(v264[2].__on_zero_shared_weak);
    LODWORD(v264->~__shared_weak_count) = v266;
    HIDWORD(v264->~__shared_weak_count) = v268;
  }
  else
  {
    LODWORD(v265->~__shared_weak_count) = v266;
    HIDWORD(v265->~__shared_weak_count) = v264[2].__on_zero_shared_weak;
    v267 = HIDWORD(v264[2].__on_zero_shared_weak);
  }
  LODWORD(v265->~__shared_weak_count_0) = v267;
  v269 = (*v160)[3];
  v270 = v232[2].__vftable;
  v271 = HIDWORD(v269[3].~__shared_weak_count_0);
  if (v269 == v270)
  {
    v273 = (int)v269[3].__on_zero_shared;
    v272 = HIDWORD(v269[3].__on_zero_shared);
    HIDWORD(v270->~__shared_weak_count_0) = v271;
    LODWORD(v269->__on_zero_shared) = v273;
  }
  else
  {
    HIDWORD(v270->~__shared_weak_count_0) = v271;
    LODWORD(v270->__on_zero_shared) = v269[3].__on_zero_shared;
    v272 = HIDWORD(v269[3].__on_zero_shared);
  }
  HIDWORD(v270->__on_zero_shared) = v272;
  v274 = (*v160)[3];
  v275 = v232[2].__vftable;
  v276 = (int)v274->__get_deleter;
  if (v274 == v275)
  {
    v278 = HIDWORD(v274->__get_deleter);
    v277 = (int)v274->__on_zero_shared_weak;
    LODWORD(v275->__get_deleter) = v276;
    HIDWORD(v274->__get_deleter) = v278;
  }
  else
  {
    LODWORD(v275->__get_deleter) = v276;
    HIDWORD(v275->__get_deleter) = HIDWORD(v274->__get_deleter);
    v277 = (int)v274->__on_zero_shared_weak;
  }
  LODWORD(v275->__on_zero_shared_weak) = v277;
  v279 = (*v160)[3];
  v280 = v232[2].__vftable;
  v281 = (int)v279[1].~__shared_weak_count_0;
  if (v279 == v280)
  {
    v283 = HIDWORD(v279[1].~__shared_weak_count_0);
    v282 = (int)v279[1].__on_zero_shared;
    HIDWORD(v280->__on_zero_shared_weak) = v281;
    LODWORD(v279[1].~__shared_weak_count) = v283;
  }
  else
  {
    HIDWORD(v280->__on_zero_shared_weak) = v281;
    LODWORD(v280[1].~__shared_weak_count) = HIDWORD(v279[1].~__shared_weak_count_0);
    v282 = (int)v279[1].__on_zero_shared;
  }
  HIDWORD(v280[1].~__shared_weak_count) = v282;
  do
    v284 = __ldaxr(v233);
  while (__stlxr(v284 - 1, v233));
  if (!v284)
  {
    ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
    std::__shared_weak_count::__release_weak(v232);
  }
  if (v185)
  {
    v285 = (unint64_t *)&v185->__shared_owners_;
    do
      v286 = __ldaxr(v285);
    while (__stlxr(v286 - 1, v285));
    if (!v286)
    {
      ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
      std::__shared_weak_count::__release_weak(v185);
    }
  }
  v287 = (std::__shared_weak_count *)v337[2];
  v337[1] = v156 + 24;
  v337[2] = v156;
  if (v287)
  {
    v288 = (unint64_t *)&v287->__shared_owners_;
    do
      v289 = __ldaxr(v288);
    while (__stlxr(v289 - 1, v288));
    if (!v289)
    {
      ((void (*)(std::__shared_weak_count *))v287->__on_zero_shared)(v287);
      std::__shared_weak_count::__release_weak(v287);
    }
  }
  v290 = operator new(0x48uLL);
  v290[1] = 0;
  v290[2] = 0;
  *v290 = &off_1E8295988;
  v290[4] = 0;
  *((_DWORD *)v290 + 10) = 0;
  v290[6] = 0;
  v290[7] = 0;
  *((_DWORD *)v290 + 16) = 0;
  v291 = (std::__shared_weak_count *)v337[6];
  v337[6] = v290;
  v290[3] = 0;
  v337[5] = v290 + 3;
  if (v291)
  {
    v292 = (unint64_t *)&v291->__shared_owners_;
    do
      v293 = __ldaxr(v292);
    while (__stlxr(v293 - 1, v292));
    if (!v293)
    {
      ((void (*)(std::__shared_weak_count *))v291->__on_zero_shared)(v291);
      std::__shared_weak_count::__release_weak(v291);
    }
  }
  v294 = (*(_QWORD *)(*(_QWORD *)v327 + 24) - *(_QWORD *)(*(_QWORD *)v327 + 16)) >> 2;
  v295 = *(_QWORD *)v328;
  if (*(_DWORD *)(*(_QWORD *)v328 + 16) != (_DWORD)v294)
  {
    *(_DWORD *)(v295 + 16) = v294;
    if ((_DWORD)v294)
    {
      v296 = (3 * v294);
      if (*(_QWORD *)(v295 + 8) < v296)
      {
        free(*(void **)v295);
        v297 = (4 * v296 + 31) & 0x7FFFFFFE0;
        *(_QWORD *)v295 = 0;
        *(_QWORD *)(v295 + 8) = v297 >> 2;
        *(_QWORD *)buf = 0;
        malloc_type_posix_memalign((void **)buf, 0x20uLL, v297, 0x49090899uLL);
        *(_QWORD *)v295 = *(_QWORD *)buf;
      }
    }
    else
    {
      free(*(void **)v295);
      *(_QWORD *)v295 = 0;
      *(_QWORD *)(v295 + 8) = 0;
    }
    LODWORD(v294) = *(_DWORD *)(v295 + 16);
  }
  if ((_DWORD)v294)
    bzero(*(void **)v295, 4 * (3 * v294));
  v298 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v327 + 144) + 16);
  v299 = *(_QWORD *)v328;
  v300 = *(_QWORD *)v328 + 24;
  if (v298 != *(_DWORD *)(*(_QWORD *)v328 + 40))
  {
    *(_DWORD *)(v299 + 40) = v298;
    if (v298)
    {
      v301 = (3 * v298);
      if (*(_QWORD *)(v299 + 32) < v301)
      {
        free(*(void **)(v299 + 24));
        v302 = (4 * v301 + 31) & 0x7FFFFFFE0;
        *(_QWORD *)(v299 + 24) = 0;
        *(_QWORD *)(v299 + 32) = v302 >> 2;
        *(_QWORD *)buf = 0;
        malloc_type_posix_memalign((void **)buf, 0x20uLL, v302, 0x49090899uLL);
        *(_QWORD *)(v299 + 24) = *(_QWORD *)buf;
      }
    }
    else
    {
      free(*(void **)v300);
      *(_QWORD *)v300 = 0;
      *(_QWORD *)(v300 + 8) = 0;
    }
    v298 = *(_DWORD *)(v299 + 40);
  }
  if (v298)
    bzero(*(void **)v300, 4 * (3 * v298));
  *v330 = v337;
  v330[1] = v329;
}

void sub_1C98B1C6C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295988;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1C98B1C7C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295988;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA44AFCLL);
}

void sub_1C98B1CAC(uint64_t a1)
{
  free(*(void **)(a1 + 48));
  free(*(void **)(a1 + 24));
}

void sub_1C98B1CD8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E82959C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1C98B1CE8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E82959C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA44AFCLL);
}

void sub_1C98B1D18(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  void *v11;

  v2 = *(std::__shared_weak_count **)(a1 + 176);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 160);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 160);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = *(std::__shared_weak_count **)(a1 + 144);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  free(*(void **)(a1 + 112));
  free(*(void **)(a1 + 88));
  free(*(void **)(a1 + 64));
  v11 = *(void **)(a1 + 40);
  if (v11)
  {
    *(_QWORD *)(a1 + 48) = v11;
    operator delete(v11);
  }
}

void sub_1C98B1E20(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA44AFCLL);
}

uint64_t sub_1C98B1E44(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    free(*(void **)(v1 + 256));
    free(*(void **)(v1 + 232));
    free(*(void **)(v1 + 208));
    free(*(void **)(v1 + 184));
    free(*(void **)(v1 + 160));
    free(*(void **)(v1 + 136));
    free(*(void **)(v1 + 112));
    free(*(void **)(v1 + 88));
    free(*(void **)(v1 + 64));
    free(*(void **)(v1 + 40));
    v2 = *(_QWORD *)(v1 + 24);
    *(_QWORD *)(v1 + 24) = 0;
    if (v2)
    {
      v3 = *(_QWORD **)(v2 + 16);
      if (v3)
      {
        do
        {
          v4 = (_QWORD *)*v3;
          operator delete(v3);
          v3 = v4;
        }
        while (v4);
      }
      v5 = *(void **)v2;
      *(_QWORD *)v2 = 0;
      if (v5)
        operator delete(v5);
      MEMORY[0x1CAA44AFC](v2, 0x10A0C408EF24B1CLL);
    }
    v6 = *(_QWORD *)(v1 + 16);
    *(_QWORD *)(v1 + 16) = 0;
    if (v6)
    {
      v7 = *(_QWORD **)(v6 + 16);
      if (v7)
      {
        do
        {
          v8 = (_QWORD *)*v7;
          operator delete(v7);
          v7 = v8;
        }
        while (v8);
      }
      v9 = *(void **)v6;
      *(_QWORD *)v6 = 0;
      if (v9)
        operator delete(v9);
      MEMORY[0x1CAA44AFC](v6, 0x10A0C408EF24B1CLL);
    }
    v10 = *(std::__shared_weak_count **)(v1 + 8);
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    JUMPOUT(0x1CAA44AFCLL);
  }
  return result;
}

void sub_1C98B1FB8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA44AFCLL);
}

uint64_t sub_1C98B1FDC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  return result;
}

uint64_t sub_1C98B1FF8(uint64_t a1, uint64_t *a2, char a3, _QWORD *a4)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  void *__p;
  __int128 v27;
  int v28;
  char v29;
  int v30;
  char v31;
  __int16 v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  char v35;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 850045863;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  __p = operator new(0x28uLL);
  v27 = xmmword_1C9927440;
  strcpy((char *)__p, "com.apple.applecva.taskthreadpool");
  LOBYTE(v28) = 0;
  v29 = 0;
  LOBYTE(v30) = 0;
  v31 = 0;
  v32 = 0;
  LOBYTE(v33) = 0;
  v35 = 0;
  sub_1C98809C8(&__p, "com.apple.applecva.facekit.3", 0x1CuLL);
  v28 = 1;
  v29 = 1;
  v30 = 31;
  v31 = 1;
  v8 = *a2;
  if (v35)
  {
    v9 = (std::__shared_weak_count *)a2[1];
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    v12 = v34;
    v33 = v8;
    v34 = v9;
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  else
  {
    v15 = (std::__shared_weak_count *)a2[1];
    v33 = *a2;
    v34 = v15;
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v35 = 1;
  }
  v18 = operator new(0x28uLL);
  v18[1] = 0;
  v18[2] = 0;
  *v18 = &off_1E8295C28;
  *(_QWORD *)(a1 + 88) = sub_1C9920390(v18 + 3, 1, (uint64_t)&__p);
  *(_QWORD *)(a1 + 96) = v18;
  if (!v35)
    goto LABEL_19;
  v19 = v34;
  if (!v34)
    goto LABEL_19;
  v20 = (unint64_t *)&v34->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (v21)
  {
LABEL_19:
    if ((SHIBYTE(v27) & 0x80000000) == 0)
      goto LABEL_21;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
  std::__shared_weak_count::__release_weak(v19);
  if (SHIBYTE(v27) < 0)
LABEL_20:
    operator delete(__p);
LABEL_21:
  *(_DWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 850045863;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 176) = a3;
  *(_QWORD *)(a1 + 184) = 1018212795;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = *a4;
  v22 = a4[1];
  *(_QWORD *)(a1 + 240) = v22;
  if (v22)
  {
    v23 = (unint64_t *)(v22 + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  *(_BYTE *)(a1 + 248) = 0;
  return a1;
}

void sub_1C98B224C(uint64_t a1, _QWORD *a2, __int128 **a3)
{
  unsigned __int8 v6;
  NSObject *v7;
  __int128 *v8;
  __int128 *v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  unint64_t *v25;
  unint64_t v26;
  char *v27;
  __int128 v28;
  _QWORD *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  __int16 v33[8];

  kdebug_trace();
  if (((*(uint64_t (**)(_QWORD, _QWORD, __int128 **))(**(_QWORD **)(a1 + 232) + 32))(*(_QWORD *)(a1 + 232), *a2, a3) & 1) == 0)
  {
    v6 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
    if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
    {
      qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
      __cxa_guard_release(&qword_1ED52ACD0);
    }
    v7 = qword_1ED52ACE0;
    if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_ERROR))
    {
      v33[0] = 0;
      _os_log_error_impl(&dword_1C9870000, v7, OS_LOG_TYPE_ERROR, "Error getting faceprints.", (uint8_t *)v33, 2u);
    }
  }
  kdebug_trace();
  std::mutex::lock((std::mutex *)(a1 + 24));
  sub_1C98B2550(a1, a3[1] - *a3 + ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4));
  v8 = *a3;
  v9 = a3[1];
  if (*a3 != v9)
  {
    v10 = *(_QWORD **)(a1 + 8);
    do
    {
      v12 = *(_QWORD *)(a1 + 16);
      if ((unint64_t)v10 >= v12)
      {
        v16 = *(_QWORD **)a1;
        v17 = ((uint64_t)v10 - *(_QWORD *)a1) >> 4;
        v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 60)
          abort();
        v19 = v12 - (_QWORD)v16;
        if (v19 >> 3 > v18)
          v18 = v19 >> 3;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0)
          v20 = 0xFFFFFFFFFFFFFFFLL;
        else
          v20 = v18;
        if (v20 >> 60)
          sub_1C9899D30();
        v21 = 16 * v20;
        v22 = (char *)operator new(16 * v20);
        v23 = &v22[16 * v17];
        v24 = *v8;
        *(_OWORD *)v23 = *v8;
        if (*((_QWORD *)&v24 + 1))
        {
          v25 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v26 = __ldxr(v25);
          while (__stxr(v26 + 1, v25));
          v16 = *(_QWORD **)a1;
          v10 = *(_QWORD **)(a1 + 8);
        }
        v27 = &v22[v21];
        v11 = v23 + 16;
        if (v10 == v16)
        {
          *(_QWORD *)a1 = v23;
          *(_QWORD *)(a1 + 8) = v11;
          *(_QWORD *)(a1 + 16) = v27;
        }
        else
        {
          do
          {
            v28 = *((_OWORD *)v10 - 1);
            v10 -= 2;
            *((_OWORD *)v23 - 1) = v28;
            v23 -= 16;
            *v10 = 0;
            v10[1] = 0;
          }
          while (v10 != v16);
          v16 = *(_QWORD **)a1;
          v29 = *(_QWORD **)(a1 + 8);
          *(_QWORD *)a1 = v23;
          *(_QWORD *)(a1 + 8) = v11;
          *(_QWORD *)(a1 + 16) = v27;
          while (v29 != v16)
          {
            v30 = (std::__shared_weak_count *)*(v29 - 1);
            if (v30)
            {
              p_shared_owners = (unint64_t *)&v30->__shared_owners_;
              do
                v32 = __ldaxr(p_shared_owners);
              while (__stlxr(v32 - 1, p_shared_owners));
              if (!v32)
              {
                ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
                std::__shared_weak_count::__release_weak(v30);
              }
            }
            v29 -= 2;
          }
        }
        if (v16)
          operator delete(v16);
      }
      else
      {
        v13 = *((_QWORD *)v8 + 1);
        *v10 = *(_QWORD *)v8;
        v10[1] = v13;
        if (v13)
        {
          v14 = (unint64_t *)(v13 + 8);
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
        }
        v11 = v10 + 2;
      }
      *(_QWORD *)(a1 + 8) = v11;
      ++v8;
      v10 = v11;
    }
    while (v8 != v9);
  }
  std::mutex::unlock((std::mutex *)(a1 + 24));
  std::mutex::lock((std::mutex *)(a1 + 112));
  --*(_DWORD *)(a1 + 104);
  std::mutex::unlock((std::mutex *)(a1 + 112));
  if (*(_BYTE *)(a1 + 176))
    std::condition_variable::notify_all((std::condition_variable *)(a1 + 184));
}

void sub_1C98B2550(uint64_t a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;

  v2 = *(char **)a1;
  if (a2 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4)
  {
    if (a2 >> 60)
      abort();
    v4 = *(char **)(a1 + 8);
    v5 = 16 * a2;
    v6 = (char *)operator new(16 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
    }
    else
    {
      v9 = &v6[v4 - v2];
      do
      {
        v10 = *((_OWORD *)v4 - 1);
        v4 -= 16;
        *((_OWORD *)v9 - 1) = v10;
        v9 -= 16;
        *(_QWORD *)v4 = 0;
        *((_QWORD *)v4 + 1) = 0;
      }
      while (v4 != v2);
      v2 = *(char **)a1;
      v11 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      while (v11 != v2)
      {
        v12 = (std::__shared_weak_count *)*((_QWORD *)v11 - 1);
        if (v12)
        {
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldaxr(p_shared_owners);
          while (__stlxr(v14 - 1, p_shared_owners));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v11 -= 16;
      }
    }
    if (v2)
      operator delete(v2);
  }
}

uint64_t sub_1C98B2644(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 v3;
  NSObject *v4;
  uint8_t v6[16];

  kdebug_trace();
  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 232) + 24))(*(_QWORD *)(a1 + 232));
  if ((v2 & 1) != 0)
  {
    atomic_store(1u, (unsigned __int8 *)(a1 + 248));
  }
  else
  {
    v3 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
    if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
    {
      qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
      __cxa_guard_release(&qword_1ED52ACD0);
    }
    v4 = qword_1ED52ACE0;
    if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v6 = 0;
      _os_log_error_impl(&dword_1C9870000, v4, OS_LOG_TYPE_ERROR, "Error during the Initialization of the recognition framework.", v6, 2u);
    }
  }
  kdebug_trace();
  return v2;
}

void sub_1C98B2768()
{
  JUMPOUT(0x1CAA44AFCLL);
}

__n128 sub_1C98B277C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E8295320;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_1C98B27BC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E8295320;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C98B27E4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

void sub_1C98B2800(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295D40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1C98B2810(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295D40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA44AFCLL);
}

uint64_t sub_1C98B2840(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_1C98B2850(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __CVBuffer *v8;

  *a1 = &off_1E8295368;
  v2 = a1[5];
  if (v2)
  {
    v3 = a1[6];
    v4 = (void *)a1[5];
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)a1[5];
    }
    a1[6] = v2;
    operator delete(v4);
  }
  v8 = (__CVBuffer *)a1[4];
  if (v8)
    CVPixelBufferRelease(v8);
  return a1;
}

void sub_1C98B2900(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __CVBuffer *v8;

  *a1 = &off_1E8295368;
  v2 = a1[5];
  if (v2)
  {
    v3 = a1[6];
    v4 = (void *)a1[5];
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)a1[5];
    }
    a1[6] = v2;
    operator delete(v4);
  }
  v8 = (__CVBuffer *)a1[4];
  if (v8)
    CVPixelBufferRelease(v8);
  JUMPOUT(0x1CAA44AFCLL);
}

char *sub_1C98B29C0(uint64_t a1)
{
  char *v2;
  __CVBuffer *v3;
  char *v4;
  char *v5;
  int64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_1E8295368;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(__CVBuffer **)(a1 + 32);
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  *((_QWORD *)v2 + 4) = v3;
  if (v3)
    CVPixelBufferRetain(v3);
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 6) = 0;
  *((_QWORD *)v2 + 7) = 0;
  v5 = *(char **)(a1 + 40);
  v4 = *(char **)(a1 + 48);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      abort();
    v7 = v6 >> 4;
    v8 = operator new(v6);
    *((_QWORD *)v2 + 5) = v8;
    *((_QWORD *)v2 + 7) = &v8[2 * v7];
    do
    {
      v9 = *((_QWORD *)v5 + 1);
      *v8 = *(_QWORD *)v5;
      v8[1] = v9;
      if (v9)
      {
        v10 = (unint64_t *)(v9 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      v5 += 16;
      v8 += 2;
    }
    while (v5 != v4);
    *((_QWORD *)v2 + 6) = v8;
  }
  return v2;
}

int64_t sub_1C98B2A84(uint64_t a1, uint64_t a2)
{
  __CVBuffer *v4;
  char *v5;
  char *v6;
  int64_t result;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)a2 = &off_1E8295368;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  v4 = *(__CVBuffer **)(a1 + 32);
  *(_QWORD *)(a2 + 32) = v4;
  if (v4)
    CVPixelBufferRetain(v4);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v6 = *(char **)(a1 + 40);
  v5 = *(char **)(a1 + 48);
  result = v5 - v6;
  if (v5 != v6)
  {
    if (result < 0)
      abort();
    v8 = result >> 4;
    result = (int64_t)operator new(result);
    *(_QWORD *)(a2 + 40) = result;
    *(_QWORD *)(a2 + 48) = result;
    *(_QWORD *)(a2 + 56) = result + 16 * v8;
    do
    {
      v9 = *((_QWORD *)v6 + 1);
      *(_QWORD *)result = *(_QWORD *)v6;
      *(_QWORD *)(result + 8) = v9;
      if (v9)
      {
        v10 = (unint64_t *)(v9 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      v6 += 16;
      result += 16;
    }
    while (v6 != v5);
    *(_QWORD *)(a2 + 48) = result;
  }
  return result;
}

void sub_1C98B2B44(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __CVBuffer *v8;

  v2 = a1[5];
  if (v2)
  {
    v3 = a1[6];
    v4 = (void *)a1[5];
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)a1[5];
    }
    a1[6] = v2;
    operator delete(v4);
  }
  v8 = (__CVBuffer *)a1[4];
  if (v8)
    CVPixelBufferRelease(v8);
}

void sub_1C98B2BF0(_QWORD *__p)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __CVBuffer *v8;

  v2 = __p[5];
  if (v2)
  {
    v3 = __p[6];
    v4 = (void *)__p[5];
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)__p[5];
    }
    __p[6] = v2;
    operator delete(v4);
  }
  v8 = (__CVBuffer *)__p[4];
  if (v8)
    CVPixelBufferRelease(v8);
  operator delete(__p);
}

void sub_1C98B2C94(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  void (*v3)(_QWORD *, CVPixelBufferRef *, _QWORD *);
  _QWORD *v4;
  __CVBuffer *v5;
  CVPixelBufferRef texture;

  v1 = a1 + 5;
  v2 = a1[2];
  v3 = (void (*)(_QWORD *, CVPixelBufferRef *, _QWORD *))a1[1];
  v4 = (_QWORD *)(a1[3] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v3 = *(void (**)(_QWORD *, CVPixelBufferRef *, _QWORD *))(*v4 + v3);
  v5 = (__CVBuffer *)a1[4];
  texture = v5;
  if (v5)
    CVPixelBufferRetain(v5);
  v3(v4, &texture, v1);
  if (texture)
    CVPixelBufferRelease(texture);
}

uint64_t sub_1C98B2D04(uint64_t a1, uint64_t *a2)
{
  std::mutex *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::mutex *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  kdebug_trace();
  v4 = (std::mutex *)(*a2 + 8);
  std::mutex::lock(v4);
  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD **)(*a2 + 1024);
  v8 = *(std::__shared_weak_count **)(*a2 + 1032);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v12 = *v7;
  v11 = (std::mutex *)(v7 + 1);
  std::mutex::lock(v11);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 32))(&v22, v6, v12);
  v13 = v22;
  v22 = 0;
  v14 = *(_QWORD *)(v5 + 72);
  *(_QWORD *)(v5 + 72) = v13;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v15 = v22;
    v22 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  std::mutex::unlock(v11);
  if (v8)
  {
    v16 = (unint64_t *)&v8->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v18 = *a2;
  v19 = *a2 + 304;
  v20 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v18 + 72) + 16))(*(_QWORD *)(v18 + 72));
  sub_1C98ED970(v19, v20);
  std::mutex::unlock(v4);
  return kdebug_trace();
}

uint64_t sub_1C98B2E7C(uint64_t a1, uint64_t **a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  std::mutex *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::mutex *v11;
  uint64_t v12;
  int v13;
  unsigned __int8 v14;
  NSObject *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::mutex *v24;
  uint64_t v25;
  unint64_t v26;
  std::mutex *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  std::mutex *v32;
  unint64_t v33;
  void *v34;
  size_t v35;
  size_t v36;
  const char *v37;
  unsigned int v38;
  _BYTE memptr[24];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  kdebug_trace();
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    while (1)
    {
      v7 = (std::mutex *)(*v4 + 8);
      std::mutex::lock(v7);
      v8 = *(_QWORD *)(*v4 + 72);
      kdebug_trace();
      v9 = *v4;
      v10 = *v4 + 88;
      v11 = (std::mutex *)(*v4 + 240);
      std::mutex::lock(v11);
      if (*(_BYTE *)(v9 + 120))
        v12 = v10;
      else
        v12 = 0;
      v13 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))(**(_QWORD **)(a1 + 16) + 48))(*(_QWORD *)(a1 + 16), v9 + 216, v12, v9 + 128, v9 + 156, v9 + 164, v8, *(float *)(v9 + 152));
      std::mutex::unlock(v11);
      kdebug_trace();
      v14 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
      if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
      {
        qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
        __cxa_guard_release(&qword_1ED52ACD0);
      }
      v15 = qword_1ED52ACE0;
      if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_DEBUG))
        break;
      if (v13)
        goto LABEL_14;
LABEL_7:
      v6 = *v4;
      v4 += 2;
      atomic_store(0, (unsigned __int8 *)(v6 + 80));
      std::mutex::unlock(v7);
      if (v4 == v5)
        goto LABEL_35;
    }
    v37 = "unsuccessful";
    if (v13)
      v37 = "successful";
    *(_DWORD *)memptr = 136315138;
    *(_QWORD *)&memptr[4] = v37;
    _os_log_debug_impl(&dword_1C9870000, v15, OS_LOG_TYPE_DEBUG, "fit was %s", memptr, 0xCu);
    if (!v13)
      goto LABEL_7;
LABEL_14:
    v16 = v5;
    kdebug_trace();
    v17 = *v4 + 304;
    v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
    sub_1C98ED970(v17, v18);
    v19 = *(_QWORD *)(a1 + 16);
    v20 = *(_QWORD **)(*v4 + 1024);
    v21 = *(std::__shared_weak_count **)(*v4 + 1032);
    if (v21)
    {
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldxr(p_shared_owners);
      while (__stxr(v23 + 1, p_shared_owners));
      v25 = *v20;
      v24 = (std::mutex *)(v20 + 1);
      std::mutex::lock(v24);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v19 + 40))(v19, v8, v25);
      std::mutex::unlock(v24);
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      v5 = v16;
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    else
    {
      v28 = *v20;
      v27 = (std::mutex *)(v20 + 1);
      std::mutex::lock(v27);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v19 + 40))(v19, v8, v28);
      std::mutex::unlock(v27);
      v5 = v16;
    }
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8))
    {
      v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
      v30 = *v4;
      v31 = *v4 + 1040;
      v32 = (std::mutex *)(*v4 + 1064);
      std::mutex::lock(v32);
      if (v31 != v29)
      {
        v33 = *(unsigned int *)(v29 + 16);
        if ((_DWORD)v33)
        {
          v34 = *(void **)(v30 + 1040);
          if (*(_QWORD *)(v30 + 1048) >= v33)
          {
            v35 = 4 * v33;
          }
          else
          {
            free(v34);
            *(_QWORD *)(v30 + 1040) = 0;
            v35 = 4 * v33;
            v36 = (v35 + 31) & 0x7FFFFFFE0;
            *(_QWORD *)(v30 + 1048) = v36 >> 2;
            *(_QWORD *)memptr = 0;
            malloc_type_posix_memalign((void **)memptr, 0x20uLL, v36, 0x49090899uLL);
            v34 = *(void **)memptr;
            *(_QWORD *)(v30 + 1040) = *(_QWORD *)memptr;
          }
          memcpy(v34, *(const void **)v29, v35);
        }
        else
        {
          free(*(void **)v31);
          *(_QWORD *)v31 = 0;
          *(_QWORD *)(v31 + 8) = 0;
        }
        *(_DWORD *)(v30 + 1056) = *(_DWORD *)(v29 + 16);
      }
      std::mutex::unlock(v32);
    }
    kdebug_trace();
    goto LABEL_7;
  }
  do
LABEL_35:
    v38 = __ldaxr((unsigned int *)a1);
  while (__stlxr(v38 - 1, (unsigned int *)a1));
  return kdebug_trace();
}

void sub_1C98B32BC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  v6 = (char *)operator new(0x28uLL);
  *(_QWORD *)a1 = v6;
  *(_OWORD *)(a1 + 8) = xmmword_1C9927440;
  strcpy(v6, "com.apple.applecva.taskthreadpool");
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 28) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 36) = 0;
  *(_WORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  sub_1C98809C8((void **)a1, "com.apple.applecva.facekit.2", 0x1CuLL);
  *(_DWORD *)(a1 + 24) = 1;
  *(_BYTE *)(a1 + 28) = 1;
  *(_BYTE *)(a1 + 36) = BYTE4(a3);
  *(_DWORD *)(a1 + 32) = a3;
  if (*(unsigned __int8 *)(a1 + 64) == *((unsigned __int8 *)a2 + 16))
  {
    if (*(_BYTE *)(a1 + 64))
    {
      v8 = *a2;
      v7 = a2[1];
      if (v7)
      {
        v9 = (unint64_t *)(v7 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      v11 = *(std::__shared_weak_count **)(a1 + 56);
      *(_QWORD *)(a1 + 48) = v8;
      *(_QWORD *)(a1 + 56) = v7;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
  }
  else if (*(_BYTE *)(a1 + 64))
  {
    v14 = *(std::__shared_weak_count **)(a1 + 56);
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    *(_BYTE *)(a1 + 64) = 0;
  }
  else
  {
    v17 = a2[1];
    *(_QWORD *)(a1 + 48) = *a2;
    *(_QWORD *)(a1 + 56) = v17;
    if (v17)
    {
      v18 = (unint64_t *)(v17 + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    *(_BYTE *)(a1 + 64) = 1;
  }
}

_QWORD *sub_1C98B3444(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

_QWORD *sub_1C98B35AC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  *a1 = &off_1E8294548;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return a1;
}

void sub_1C98B368C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  *a1 = &off_1E8294548;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  JUMPOUT(0x1CAA44AFCLL);
}

_QWORD *sub_1C98B377C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_1E8294548;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_1C98B380C(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_1E8294548;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_1C98B387C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1C98B3954(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)__p[2];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  operator delete(__p);
}

void sub_1C98B3A28(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  std::exception_ptr *v14;
  unint64_t *ptr;
  unint64_t *v16;
  unint64_t v17;
  int v18;
  unint64_t *v19;
  unint64_t v20;
  char *v21;
  unint64_t *v22;
  unint64_t v23;
  char *v24;
  _BYTE *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::exception_ptr v48;
  std::exception_ptr *v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  char v53;
  void *v54[2];
  uint64_t v55;
  __int128 v56;
  __int16 v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unsigned __int8 v60;
  std::exception_ptr v61[2];
  __int128 __p;
  uint64_t v63;
  __int128 v64;
  __int16 v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  char v68;
  std::unique_lock<std::mutex> __lk;
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  __int16 v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  char v76;

  v4 = (uint64_t *)a1[5];
  v5 = *v4;
  *v4 = 0;
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v5 + 24);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(v5 + 24));
  std::__assoc_sub_state::__sub_wait((std::__assoc_sub_state *)v5, &__lk);
  v6 = *(_QWORD *)(v5 + 16);
  v61[0].__ptr_ = 0;
  std::exception_ptr::~exception_ptr(v61);
  if (v6)
  {
    std::exception_ptr::exception_ptr(v61, (const std::exception_ptr *)(v5 + 16));
    v48.__ptr_ = v61;
    std::rethrow_exception(v48);
    sub_1C98B3FB8();
    return;
  }
  LOBYTE(v61[0].__ptr_) = 0;
  v7 = *(unsigned __int8 *)(v5 + 160);
  if (*(_BYTE *)(v5 + 160))
  {
    *(_OWORD *)&v61[0].__ptr_ = *(_OWORD *)(v5 + 144);
    *(_QWORD *)(v5 + 144) = 0;
    *(_QWORD *)(v5 + 152) = 0;
  }
  if (__lk.__owns_)
    std::mutex::unlock(__lk.__m_);
  v8 = (unint64_t *)(v5 + 8);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
  {
    if (v7)
    {
LABEL_10:
      *(_OWORD *)a2 = *(_OWORD *)&v61[0].__ptr_;
      goto LABEL_13;
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    if (v7)
      goto LABEL_10;
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
LABEL_13:
  v10 = (std::__shared_weak_count *)a1[4];
  v50 = (_QWORD *)a1[1];
  v51 = a1[3];
  v52 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v53 = 1;
  sub_1C98B32BC((uint64_t)v54, &v51, 0x10000001FLL);
  v13 = v50[1];
  v14 = *(std::exception_ptr **)(v13 + 16);
  v49 = *(std::exception_ptr **)(v13 + 24);
  if (v14 != v49)
  {
    while (1)
    {
      ptr = (unint64_t *)v14[1].__ptr_;
      v61[0] = (std::exception_ptr)v14->__ptr_;
      v61[1].__ptr_ = ptr;
      if (ptr)
      {
        v16 = ptr + 1;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      if (SHIBYTE(v55) < 0)
      {
        sub_1C987D148(&__p, v54[0], (unint64_t)v54[1]);
      }
      else
      {
        __p = *(_OWORD *)v54;
        v63 = v55;
      }
      v64 = v56;
      v65 = v57;
      LOBYTE(v66) = 0;
      v68 = 0;
      v18 = v60;
      if (v60)
      {
        v66 = v58;
        v67 = v59;
        if (v59)
        {
          v19 = (unint64_t *)&v59->__shared_owners_;
          do
            v20 = __ldxr(v19);
          while (__stxr(v20 + 1, v19));
        }
        v68 = 1;
      }
      v21 = (char *)operator new(0x40uLL);
      *((_QWORD *)v21 + 1) = 0;
      *((_QWORD *)v21 + 2) = 0;
      *((_QWORD *)v21 + 3) = &off_1E8294D38;
      *(_QWORD *)v21 = &off_1E8295AD8;
      __lk = *(std::unique_lock<std::mutex> *)&v61[0].__ptr_;
      v61[0].__ptr_ = 0;
      v61[1].__ptr_ = 0;
      if (SHIBYTE(v63) < 0)
      {
        sub_1C987D148(&v70, (void *)__p, *((unint64_t *)&__p + 1));
      }
      else
      {
        v70 = __p;
        v71 = v63;
      }
      v72 = v64;
      v73 = v65;
      LOBYTE(v74) = 0;
      v76 = 0;
      if (v18)
      {
        v74 = v66;
        v75 = v67;
        if (v67)
        {
          v22 = (unint64_t *)&v67->__shared_owners_;
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
        }
        v76 = 1;
      }
      v24 = (char *)operator new(0x60uLL);
      *(_QWORD *)v24 = off_1E82955F0;
      *(std::unique_lock<std::mutex> *)(v24 + 8) = __lk;
      __lk.__m_ = 0;
      *(_QWORD *)&__lk.__owns_ = 0;
      v25 = v24 + 24;
      if (SHIBYTE(v71) < 0)
      {
        sub_1C987D148(v25, (void *)v70, *((unint64_t *)&v70 + 1));
      }
      else
      {
        *(_OWORD *)v25 = v70;
        *((_QWORD *)v24 + 5) = v71;
      }
      *((_OWORD *)v24 + 3) = v64;
      *((_WORD *)v24 + 32) = v65;
      v24[72] = 0;
      v24[88] = 0;
      if (!v18)
        goto LABEL_52;
      v26 = v75;
      *((_QWORD *)v24 + 9) = v74;
      *((_QWORD *)v24 + 10) = v26;
      if (!v26)
        break;
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
      v24[88] = 1;
      *((_QWORD *)v21 + 7) = v24;
      do
        v29 = __ldaxr(v27);
      while (__stlxr(v29 - 1, v27));
      if (v29)
      {
        if (SHIBYTE(v71) < 0)
          goto LABEL_53;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
        if (SHIBYTE(v71) < 0)
        {
LABEL_53:
          operator delete((void *)v70);
          v30 = *(std::__shared_weak_count **)&__lk.__owns_;
          if (!*(_QWORD *)&__lk.__owns_)
            goto LABEL_58;
          goto LABEL_54;
        }
      }
LABEL_49:
      v30 = *(std::__shared_weak_count **)&__lk.__owns_;
      if (!*(_QWORD *)&__lk.__owns_)
        goto LABEL_58;
LABEL_54:
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
LABEL_58:
      __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v21 + 24);
      *(_QWORD *)&__lk.__owns_ = v21;
      (*(void (**)(_QWORD *, std::unique_lock<std::mutex> *))(*v50 + 16))(v50, &__lk);
      v33 = *(std::__shared_weak_count **)&__lk.__owns_;
      if (!*(_QWORD *)&__lk.__owns_)
        goto LABEL_62;
      v34 = (unint64_t *)(*(_QWORD *)&__lk.__owns_ + 8);
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
        if (!v68)
          goto LABEL_69;
      }
      else
      {
LABEL_62:
        if (!v68)
          goto LABEL_69;
      }
      v36 = v67;
      if (v67)
      {
        v37 = (unint64_t *)&v67->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
LABEL_69:
      if (SHIBYTE(v63) < 0)
      {
        operator delete((void *)__p);
        v39 = (std::__shared_weak_count *)v61[1].__ptr_;
        if (v61[1].__ptr_)
        {
LABEL_73:
          v40 = (unint64_t *)&v39->__shared_owners_;
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
      }
      else
      {
        v39 = (std::__shared_weak_count *)v61[1].__ptr_;
        if (v61[1].__ptr_)
          goto LABEL_73;
      }
      v14 += 2;
      if (v14 == v49)
        goto LABEL_79;
    }
    v24[88] = 1;
LABEL_52:
    *((_QWORD *)v21 + 7) = v24;
    if (SHIBYTE(v71) < 0)
      goto LABEL_53;
    goto LABEL_49;
  }
LABEL_79:
  if (v60)
  {
    v42 = v59;
    if (v59)
    {
      v43 = (unint64_t *)&v59->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
        if ((SHIBYTE(v55) & 0x80000000) == 0)
          goto LABEL_86;
        goto LABEL_85;
      }
    }
  }
  if (SHIBYTE(v55) < 0)
LABEL_85:
    operator delete(v54[0]);
LABEL_86:
  if (v53)
  {
    v45 = v52;
    if (v52)
    {
      v46 = (unint64_t *)&v52->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
  }
}

void sub_1C98B3FB8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8294390;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1C98B3FC8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8294390;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA44AFCLL);
}

uint64_t sub_1C98B3FF8(uint64_t a1)
{
  uint64_t result;
  unint64_t *v2;
  unint64_t v3;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    v2 = (unint64_t *)(result + 8);
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 - 1, v2));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  }
  return result;
}

void sub_1C98B402C(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x1E0DE4FC8] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_1C98B4078(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x1E0DE4FC8] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  JUMPOUT(0x1CAA44AFCLL);
}

uint64_t sub_1C98B40D8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if ((*(_BYTE *)(a1 + 136) & 1) != 0)
  {
    if (*(_BYTE *)(a1 + 160))
    {
      v2 = *(std::__shared_weak_count **)(a1 + 152);
      if (v2)
      {
        p_shared_owners = (unint64_t *)&v2->__shared_owners_;
        do
          v4 = __ldaxr(p_shared_owners);
        while (__stlxr(v4 - 1, p_shared_owners));
        if (!v4)
        {
          ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
          std::__shared_weak_count::__release_weak(v2);
        }
      }
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

void sub_1C98B414C(_QWORD *a1)
{
  sub_1C98B4298(a1);
  JUMPOUT(0x1CAA44AFCLL);
}

_QWORD *sub_1C98B4170(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  __int128 v10;
  __int128 v11;
  std::exception_ptr v12;

  result = (_QWORD *)a1[4];
  if (!result)
  {
    a1[4] = 0;
    return result;
  }
  (*(void (**)(__int128 *__return_ptr))(*result + 48))(&v11);
  v10 = v11;
  v11 = 0uLL;
  v3 = a1[5];
  if (!v3
    || (std::mutex::lock((std::mutex *)(v3 + 24)), (*(_BYTE *)(v3 + 136) & 1) != 0)
    || (v12.__ptr_ = 0, v4 = *(_QWORD *)(v3 + 16), std::exception_ptr::~exception_ptr(&v12), v4))
  {
    v9 = (_QWORD *)sub_1C98A1468();
    return sub_1C98B4298(v9);
  }
  *(_OWORD *)(v3 + 144) = v10;
  *(_BYTE *)(v3 + 160) = 1;
  *(_DWORD *)(v3 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(v3 + 88));
  std::mutex::unlock((std::mutex *)(v3 + 24));
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  result = (_QWORD *)a1[4];
  a1[4] = 0;
  if (result == a1 + 1)
  {
    v8 = 4;
    result = a1 + 1;
  }
  else
  {
    if (!result)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

_QWORD *sub_1C98B4298(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  const std::error_category *v11;
  std::exception_ptr v12[4];

  *a1 = &off_1E8294D88;
  if (a1[4])
  {
    v2 = a1[5];
    if (!v2
      || (std::mutex::lock((std::mutex *)(v2 + 24)), (*(_BYTE *)(v2 + 136) & 1) != 0)
      || (v12[0].__ptr_ = 0, v3 = *(_QWORD *)(v2 + 16), std::exception_ptr::~exception_ptr(v12), v3))
    {
      sub_1C98A1468();
      goto LABEL_21;
    }
    *(_BYTE *)(v2 + 144) = 0;
    *(_BYTE *)(v2 + 160) = 0;
    *(_DWORD *)(v2 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v2 + 88));
    std::mutex::unlock((std::mutex *)(v2 + 24));
  }
  v4 = a1[5];
  if (!v4)
    goto LABEL_14;
  if ((*(_BYTE *)(v4 + 136) & 1) == 0)
  {
    v12[0].__ptr_ = 0;
    v5 = *(_QWORD *)(v4 + 16);
    std::exception_ptr::~exception_ptr(v12);
    v4 = a1[5];
    if (!v5 && *(uint64_t *)(v4 + 8) >= 1)
    {
LABEL_21:
      v11 = std::future_category();
      MEMORY[0x1CAA44850](v12, 4, v11);
      abort();
    }
  }
  v6 = (unint64_t *)(v4 + 8);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
LABEL_14:
  v8 = (_QWORD *)a1[4];
  if (v8 == a1 + 1)
  {
    v9 = 4;
    v8 = a1 + 1;
    goto LABEL_18;
  }
  if (v8)
  {
    v9 = 5;
LABEL_18:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return a1;
}

void sub_1C98B43D8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295B48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1C98B43E8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295B48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA44AFCLL);
}

uint64_t sub_1C98B4418(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_1C98B4428(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E8294500;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void sub_1C98B448C(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_1E8294500;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x1CAA44AFCLL);
}

_QWORD *sub_1C98B4500(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E8294500;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_1C98B4550(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E8294500;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_1C98B4580(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_1C98B45D8(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(__p);
}

uint64_t sub_1C98B4630@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 16);
  *a2 = *(_QWORD *)(result + 8);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

_QWORD *sub_1C98B4654(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 56);
  if (!v2)
  {
    v14 = sub_1C9889C1C();
    return (_QWORD *)sub_1C98B4750(v14);
  }
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v2 + 48))(&v15);
  v3 = *a1;
  v4 = v15;
  v15 = 0uLL;
  v5 = *(std::__shared_weak_count **)(v3 + 24);
  *(_OWORD *)(v3 + 16) = v4;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = *a1 + 32;
  result = *(_QWORD **)(*a1 + 56);
  *(_QWORD *)(*a1 + 56) = 0;
  if (result == (_QWORD *)v11)
  {
    v13 = 4;
    result = (_QWORD *)v11;
  }
  else
  {
    if (!result)
      return result;
    v13 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8 * v13))(result);
}

void sub_1C98B4750(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295B80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1C98B4760(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295B80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA44AFCLL);
}

uint64_t sub_1C98B4790(uint64_t a1)
{
  uint64_t result;

  std::mutex::~mutex((std::mutex *)(a1 + 32));
  result = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *sub_1C98B47D8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E82944B8;
  v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void sub_1C98B483C(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_1E82944B8;
  v1 = (std::__shared_weak_count *)a1[5];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x1CAA44AFCLL);
}

char *sub_1C98B48B0(uint64_t a1)
{
  char *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = (char *)operator new(0x30uLL);
  *(_QWORD *)result = &off_1E82944B8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 32);
  *((_QWORD *)result + 3) = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 4) = v3;
  v4 = *(_QWORD *)(a1 + 40);
  *((_QWORD *)result + 5) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_1C98B4910(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E82944B8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(result + 24);
  v2 = *(_QWORD *)(result + 40);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(result + 32);
  *(_QWORD *)(a2 + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void sub_1C98B4950(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_1C98B49A8(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(__p);
}

void sub_1C98B4A00(_QWORD *a1)
{
  uint64_t v2;
  void (*v3)(_QWORD *, uint64_t *);
  _QWORD *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v2 = a1[2];
  v3 = (void (*)(_QWORD *, uint64_t *))a1[1];
  v4 = (_QWORD *)(a1[3] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v3 = *(void (**)(_QWORD *, uint64_t *))(*v4 + v3);
  v6 = a1[4];
  v5 = (std::__shared_weak_count *)a1[5];
  v12 = v6;
  v13 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v3(v4, &v12);
  v9 = v13;
  if (v13)
  {
    v10 = (unint64_t *)&v13->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

_QWORD *sub_1C98B4A9C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  *a1 = &off_1E8294470;
  v2 = a1[4];
  if (v2)
  {
    v3 = a1[5];
    v4 = (void *)a1[4];
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)a1[4];
    }
    a1[5] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_1C98B4B40(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  *a1 = &off_1E8294470;
  v2 = a1[4];
  if (v2)
  {
    v3 = a1[5];
    v4 = (void *)a1[4];
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)a1[4];
    }
    a1[5] = v2;
    operator delete(v4);
  }
  JUMPOUT(0x1CAA44AFCLL);
}

char *sub_1C98B4BF4(uint64_t a1)
{
  char *v2;
  char *v3;
  char *v4;
  int64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_1E8294470;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(char **)(a1 + 32);
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  *((_QWORD *)v2 + 4) = 0;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 6) = 0;
  v4 = *(char **)(a1 + 40);
  v5 = v4 - v3;
  if (v4 != v3)
  {
    if (v5 < 0)
      abort();
    v6 = v5 >> 4;
    v7 = operator new(v5);
    *((_QWORD *)v2 + 4) = v7;
    *((_QWORD *)v2 + 6) = &v7[2 * v6];
    do
    {
      v8 = *((_QWORD *)v3 + 1);
      *v7 = *(_QWORD *)v3;
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      v3 += 16;
      v7 += 2;
    }
    while (v3 != v4);
    *((_QWORD *)v2 + 5) = v7;
  }
  return v2;
}

int64_t sub_1C98B4CAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char *v3;
  char *v4;
  int64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  *(_QWORD *)a2 = &off_1E8294470;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = 0;
  v3 = *(char **)(a1 + 32);
  v4 = *(char **)(a1 + 40);
  result = v4 - v3;
  if (v4 != v3)
  {
    if (result < 0)
      abort();
    v7 = result >> 4;
    result = (int64_t)operator new(result);
    *(_QWORD *)(a2 + 32) = result;
    *(_QWORD *)(a2 + 40) = result;
    *(_QWORD *)(a2 + 48) = result + 16 * v7;
    do
    {
      v8 = *((_QWORD *)v3 + 1);
      *(_QWORD *)result = *(_QWORD *)v3;
      *(_QWORD *)(result + 8) = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      v3 += 16;
      result += 16;
    }
    while (v3 != v4);
    *(_QWORD *)(a2 + 40) = result;
  }
  return result;
}

void sub_1C98B4D54(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    v3 = *(_QWORD *)(a1 + 40);
    v4 = *(void **)(a1 + 32);
    if (v3 != v1)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v1);
      v4 = *(void **)(a1 + 32);
    }
    *(_QWORD *)(a1 + 40) = v1;
    operator delete(v4);
  }
}

void sub_1C98B4DF4(_QWORD *__p)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = __p[4];
  if (v2)
  {
    v3 = __p[5];
    v4 = (void *)__p[4];
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)__p[4];
    }
    __p[5] = v2;
    operator delete(v4);
  }
  operator delete(__p);
}

uint64_t sub_1C98B4E8C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *, _QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *, _QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD *))(*v3 + v2);
  return v2(v3, a1 + 4);
}

void sub_1C98B4EB0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  uint64_t v4;
  unsigned __int8 v5;
  NSObject *v6;
  unint64_t v7;
  void **v8;
  void *__p[2];
  char v10;
  uint8_t buf[4];
  void **v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  sub_1C98B50AC((uint64_t)__p);
  *(_DWORD *)buf = 1;
  v2 = (std::__shared_weak_count *)operator new(0x2A0uLL);
  v2->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295BB8;
  v4 = sub_1C991E700((uint64_t)&v2[1], (__int128 *)__p, buf);
  if ((((uint64_t (*)(uint64_t))v2[1].__on_zero_shared)(v4) & 1) != 0)
  {
    *a1 = v2 + 1;
    a1[1] = v2;
    if ((v10 & 0x80000000) == 0)
      return;
    goto LABEL_10;
  }
  v5 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
  {
    qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
    __cxa_guard_release(&qword_1ED52ACD0);
  }
  v6 = (id)qword_1ED52ACE0;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    v8 = __p;
    if (v10 < 0)
      v8 = (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v12 = v8;
    _os_log_error_impl(&dword_1C9870000, v6, OS_LOG_TYPE_ERROR, "couldn't open %s", buf, 0xCu);
  }

  *a1 = 0;
  a1[1] = 0;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (v7)
  {
    if ((v10 & 0x80000000) == 0)
      return;
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  if (v10 < 0)
LABEL_10:
    operator delete(__p[0]);
}

void sub_1C98B5074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_1C987C140((uint64_t)&a10);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1C98B50AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE v4[8];
  _BYTE v5[8];
  _BYTE v6[8];

  cva::Path::Path();
  cva::Path::Path();
  cva::Path::Path((cva::Path *)v6, (const cva::Path *)v4);
  cva::Path::append();
  cva::Path::Path((cva::Path *)v5, (const cva::Path *)v6);
  cva::Path::~Path((cva::Path *)v6);
  v2 = cva::Path::string((cva::Path *)v5);
  if (*(char *)(v2 + 23) < 0)
  {
    sub_1C987D148((_BYTE *)a1, *(void **)v2, *(_QWORD *)(v2 + 8));
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)v2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(v2 + 16);
  }
  cva::Path::~Path((cva::Path *)v5);
  cva::Path::~Path((cva::Path *)&v3);
  cva::Path::~Path((cva::Path *)v4);
}

void sub_1C98B515C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  cva::Path::~Path((cva::Path *)&a9);
  cva::Path::~Path((cva::Path *)&a10);
  _Unwind_Resume(a1);
}

void sub_1C98B519C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295BB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1C98B51AC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295BB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA44AFCLL);
}

uint64_t sub_1C98B51DC(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1C98B5340()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  _QWORD v11[3];
  _QWORD v12[3];
  _QWORD v13[3];
  _QWORD v14[3];
  _QWORD v15[3];
  _QWORD v16[3];
  _QWORD v17[3];
  _QWORD v18[3];
  _QWORD v19[3];
  _QWORD v20[3];
  _QWORD v21[3];
  _QWORD v22[3];
  _QWORD v23[3];
  _QWORD v24[3];
  _QWORD v25[3];
  _QWORD v26[3];
  _QWORD v27[3];
  _QWORD v28[3];
  _QWORD v29[9];
  _QWORD v30[11];

  v30[9] = *MEMORY[0x1E0C80C00];
  v29[0] = &unk_1E829B9D0;
  v27[0] = &unk_1E829B988;
  v27[1] = &unk_1E829B9A0;
  v28[0] = &unk_1E829BA78;
  v28[1] = &unk_1E829BA88;
  v27[2] = &unk_1E829B9B8;
  v28[2] = &unk_1E829BA98;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v28, v27, 3);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v30[0] = v10;
  v29[1] = &unk_1E829B988;
  v25[0] = &unk_1E829B988;
  v25[1] = &unk_1E829B9A0;
  v26[0] = &unk_1E829BAA8;
  v26[1] = &unk_1E829BA88;
  v25[2] = &unk_1E829B9B8;
  v26[2] = &unk_1E829BAB8;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v26, v25, 3);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v30[1] = v9;
  v29[2] = &unk_1E829B9A0;
  v23[0] = &unk_1E829B988;
  v23[1] = &unk_1E829B9A0;
  v24[0] = &unk_1E829BAC8;
  v24[1] = &unk_1E829BAD8;
  v23[2] = &unk_1E829B9B8;
  v24[2] = &unk_1E829BAE8;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v24, v23, 3);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v30[2] = v8;
  v29[3] = &unk_1E829B9B8;
  v21[0] = &unk_1E829B988;
  v21[1] = &unk_1E829B9A0;
  v22[0] = &unk_1E829BA78;
  v22[1] = &unk_1E829BAE8;
  v21[2] = &unk_1E829B9B8;
  v22[2] = &unk_1E829BAF8;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v22, v21, 3);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v30[3] = v7;
  v29[4] = &unk_1E829B9E8;
  v19[0] = &unk_1E829B988;
  v19[1] = &unk_1E829B9A0;
  v20[0] = &unk_1E829BA88;
  v20[1] = &unk_1E829BAE8;
  v19[2] = &unk_1E829B9B8;
  v20[2] = &unk_1E829BB08;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v20, v19, 3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v30[4] = v6;
  v29[5] = &unk_1E829BA00;
  v17[0] = &unk_1E829B988;
  v17[1] = &unk_1E829B9A0;
  v18[0] = &unk_1E829BB18;
  v18[1] = &unk_1E829BAD8;
  v17[2] = &unk_1E829B9B8;
  v18[2] = &unk_1E829BAB8;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v18, v17, 3);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v30[5] = v0;
  v29[6] = &unk_1E829BA18;
  v15[0] = &unk_1E829B988;
  v15[1] = &unk_1E829B9A0;
  v16[0] = &unk_1E829BB28;
  v16[1] = &unk_1E829BA88;
  v15[2] = &unk_1E829B9B8;
  v16[2] = &unk_1E829BB38;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v16, v15, 3);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v30[6] = v1;
  v29[7] = &unk_1E829BA30;
  v13[0] = &unk_1E829B988;
  v13[1] = &unk_1E829B9A0;
  v14[0] = &unk_1E829BB48;
  v14[1] = &unk_1E829BA88;
  v13[2] = &unk_1E829B9B8;
  v14[2] = &unk_1E829BAB8;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v14, v13, 3);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v30[7] = v2;
  v29[8] = &unk_1E829BA48;
  v11[0] = &unk_1E829B988;
  v11[1] = &unk_1E829B9A0;
  v12[0] = &unk_1E829BB48;
  v12[1] = &unk_1E829BA88;
  v11[2] = &unk_1E829B9B8;
  v12[2] = &unk_1E829BAB8;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v12, v11, 3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v30[8] = v3;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v30, v29, 9);
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = (void *)qword_1EF921290;
  qword_1EF921290 = v4;

}

void sub_1C98B5CD8(uint64_t a1, uint64_t *a2, cva::DictionaryHandler *a3)
{
  uint64_t v5;
  unsigned int v6;
  const void *v7;
  uint64_t v8;
  __CFData *Mutable;
  UInt8 *MutableBytePtr;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  void *v29;
  double v30;
  void *v31;
  double v32;
  void *v33;
  double v34;
  void *v35;
  double v36;
  void *v37;
  double v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  _BYTE v56[16];
  _BYTE v57[16];
  _BYTE v58[16];
  _QWORD v59[8];
  _QWORD v60[8];
  _QWORD v61[10];
  _QWORD v62[10];
  _QWORD v63[20];
  _OWORD v64[2];
  __int128 v65;
  CFMutableDataRef theData;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  _QWORD v80[3];
  _QWORD v81[6];

  v81[3] = *MEMORY[0x1E0C80C00];
  v65 = 0u;
  memset(v64, 0, sizeof(v64));
  v5 = *a2;
  v6 = *(_DWORD *)(*a2 + 152) - 2;
  v7 = *(const void **)(*a2 + 136);
  v8 = 4 * v6;
  Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v8);
  theData = Mutable;
  CFDataSetLength(Mutable, v8);
  MutableBytePtr = CFDataGetMutableBytePtr(Mutable);
  if (v6)
    memcpy(MutableBytePtr, v7, v8);
  v11 = *(_QWORD *)(v5 + 136);
  HIDWORD(v64[1]) = *(_DWORD *)v11;
  LODWORD(v65) = *(_DWORD *)(v11 + 4);
  *(_QWORD *)((char *)&v65 + 4) = *(_QWORD *)(v11 + 204);
  *(_DWORD *)CFDataGetMutableBytePtr(Mutable) = DWORD1(v65);
  *((_DWORD *)CFDataGetMutableBytePtr(theData) + 1) = DWORD2(v65);
  v12 = *a2;
  v13 = *a2 + 208;
  if (v64 != (_OWORD *)v13)
  {
    *(_QWORD *)&v64[0] = *(_QWORD *)v13;
    DWORD2(v64[0]) = *(_DWORD *)(v13 + 8);
  }
  *(int32x4_t *)((char *)v64 + 12) = vuzp2q_s32(*(int32x4_t *)(v12 + 220), vrev64q_s32(*(int32x4_t *)(v12 + 220)));
  HIDWORD(v65) = *(_DWORD *)(v12 + 236);
  sub_1C98FDFB0((cva::DictionaryHandler *)v62, (uint64_t)v64);
  if (theData)
    CFRelease(theData);
  cva::ItemHandler::ItemHandler();
  cva::DictionaryHandler::setItem(a3, CFSTR("animation"), (const cva::ItemHandler *)v63);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v63);
  cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)v62);
  sub_1C98E64D0((cva::DictionaryHandler *)v58, (_DWORD *)(*a2 + 80), (_DWORD *)(*a2 + 116));
  cva::ItemHandler::ItemHandler();
  cva::DictionaryHandler::setItem(a3, CFSTR("pose"), (const cva::ItemHandler *)v64);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v64);
  v14 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v14 + 9))
  {
    v15 = *a2;
    v80[0] = CFSTR("e_u");
    v63[0] = CFSTR("e_u0");
    v63[1] = CFSTR("e_u1");
    *(_QWORD *)&v64[0] = &unk_1E829BB58;
    *((_QWORD *)&v64[0] + 1) = &unk_1E829BB58;
    v63[2] = CFSTR("e_u2");
    v63[3] = CFSTR("e_u3");
    *(_QWORD *)&v64[1] = &unk_1E829BB58;
    *((_QWORD *)&v64[1] + 1) = &unk_1E829BB58;
    v63[4] = CFSTR("e_u4");
    v63[5] = CFSTR("e_u5");
    *(_QWORD *)&v65 = &unk_1E829BB58;
    *((_QWORD *)&v65 + 1) = &unk_1E829BB58;
    v63[6] = CFSTR("e_u6");
    v63[7] = CFSTR("e_u7");
    theData = (CFMutableDataRef)&unk_1E829BB58;
    v67 = &unk_1E829BB58;
    v63[8] = CFSTR("e_u8");
    v63[9] = CFSTR("e_u9");
    v68 = &unk_1E829BB58;
    v69 = &unk_1E829BB58;
    v63[10] = CFSTR("e_u10");
    v63[11] = CFSTR("e_u11");
    v70 = &unk_1E829BB58;
    v71 = &unk_1E829BB58;
    v63[12] = CFSTR("e_u12");
    v63[13] = CFSTR("e_u13");
    v72 = &unk_1E829BB58;
    v73 = &unk_1E829BB58;
    v63[14] = CFSTR("e_u14");
    v63[15] = CFSTR("e_u15");
    v74 = &unk_1E829BB58;
    v75 = &unk_1E829BB58;
    v63[16] = CFSTR("e_u16");
    v63[17] = CFSTR("e_u17");
    v76 = &unk_1E829BB58;
    v77 = &unk_1E829BB58;
    v63[18] = CFSTR("e_u18");
    v63[19] = CFSTR("e_u19");
    v78 = &unk_1E829BB58;
    v79 = &unk_1E829BB58;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v64, v63, 20);
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    v81[0] = v54;
    v80[1] = CFSTR("e_e");
    v61[0] = CFSTR("e_e0");
    LODWORD(v16) = **(_DWORD **)(v15 + 160);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v16);
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    v62[0] = v53;
    v61[1] = CFSTR("e_e1");
    LODWORD(v17) = *(_DWORD *)(*(_QWORD *)(v15 + 160) + 4);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v17);
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    v62[1] = v52;
    v61[2] = CFSTR("e_e2");
    LODWORD(v18) = *(_DWORD *)(*(_QWORD *)(v15 + 160) + 8);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v18);
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    v62[2] = v51;
    v61[3] = CFSTR("e_e3");
    LODWORD(v19) = *(_DWORD *)(*(_QWORD *)(v15 + 160) + 12);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v19);
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    v62[3] = v50;
    v61[4] = CFSTR("e_e4");
    LODWORD(v20) = *(_DWORD *)(*(_QWORD *)(v15 + 160) + 16);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v20);
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    v62[4] = v49;
    v61[5] = CFSTR("e_e5");
    LODWORD(v21) = *(_DWORD *)(*(_QWORD *)(v15 + 160) + 20);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v21);
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    v62[5] = v48;
    v61[6] = CFSTR("e_e6");
    LODWORD(v22) = *(_DWORD *)(*(_QWORD *)(v15 + 160) + 24);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v22);
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    v62[6] = v47;
    v61[7] = CFSTR("e_e7");
    LODWORD(v23) = *(_DWORD *)(*(_QWORD *)(v15 + 160) + 28);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v23);
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    v62[7] = v46;
    v61[8] = CFSTR("e_e8");
    LODWORD(v24) = *(_DWORD *)(*(_QWORD *)(v15 + 160) + 32);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v24);
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    v62[8] = v45;
    v61[9] = CFSTR("e_e9");
    LODWORD(v25) = *(_DWORD *)(*(_QWORD *)(v15 + 160) + 36);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v25);
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    v62[9] = v44;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v62, v61, 10);
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    v81[1] = v43;
    v80[2] = CFSTR("e_k");
    v59[0] = CFSTR("e_k0");
    LODWORD(v26) = **(_DWORD **)(v15 + 184);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v26);
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    v60[0] = v42;
    v59[1] = CFSTR("e_k1");
    LODWORD(v27) = *(_DWORD *)(*(_QWORD *)(v15 + 184) + 4);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v27);
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    v60[1] = v41;
    v59[2] = CFSTR("e_k2");
    LODWORD(v28) = *(_DWORD *)(*(_QWORD *)(v15 + 184) + 8);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v28);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v60[2] = v29;
    v59[3] = CFSTR("e_k3");
    LODWORD(v30) = *(_DWORD *)(*(_QWORD *)(v15 + 184) + 12);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v30);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v60[3] = v31;
    v59[4] = CFSTR("e_k4");
    LODWORD(v32) = *(_DWORD *)(*(_QWORD *)(v15 + 184) + 16);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v32);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    v60[4] = v33;
    v59[5] = CFSTR("e_k5");
    LODWORD(v34) = *(_DWORD *)(*(_QWORD *)(v15 + 184) + 20);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v34);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    v60[5] = v35;
    v59[6] = CFSTR("e_k6");
    LODWORD(v36) = *(_DWORD *)(*(_QWORD *)(v15 + 184) + 24);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v36);
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    v60[6] = v37;
    v59[7] = CFSTR("e_k7");
    LODWORD(v38) = *(_DWORD *)(*(_QWORD *)(v15 + 184) + 28);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v38);
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    v60[7] = v39;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v60, v59, 8);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    v81[2] = v40;
    cva::DictionaryHandler::DictionaryHandler((cva::DictionaryHandler *)v56, (const __CFDictionary *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v81, v80, 3));

    cva::ItemHandler::ItemHandler();
    cva::DictionaryHandler::setItem(a3, CFSTR("e_d"), (const cva::ItemHandler *)v57);
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v57);
    cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)v56);
    v14 = *(_QWORD *)(a1 + 8);
  }
  if (*(_BYTE *)(v14 + 8))
  {
    LODWORD(v63[0]) = *(_DWORD *)(*a2 + 128);
    cva::ItemHandler::createValue<float>();
    cva::DictionaryHandler::setItem(a3, CFSTR("head_scale"), (const cva::ItemHandler *)v64);
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v64);
  }
  cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)v58);
}

void sub_1C98B6490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&STACK[0x280]);
  cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)&a31);
  _Unwind_Resume(a1);
}

void sub_1C98B6634(uint64_t *a1, uint64_t a2, int a3, uint64_t a4, cva::DictionaryHandler *a5)
{
  uint64_t v10;
  const UInt8 *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  float *v15;
  uint64_t v16;
  float32x4_t *v17;
  uint64_t v18;
  float32x4_t v19;
  float *v20;
  cva::ItemHandler *v21;
  const __CFData *v22;
  uint64_t v23;
  float32x2_t v24;
  float v25;
  float32x2_t v26;
  float v27;
  float *v28;
  float *v29;
  uint64_t v30;
  float32x2_t v31;
  float v32;
  float32x2_t v33;
  float v34;
  float32x2_t v35;
  float v36;
  float32x2_t v37;
  float v38;
  float *v39;
  float *v40;
  float *v41;
  float *v42;
  cva::ItemHandler *v43;
  const __CFData *v44;
  float v45;
  void *memptr[2];
  _BYTE v47[16];
  _BYTE v48[16];
  void *v49;
  uint64_t v50;
  int v51;
  void *v52;

  v10 = *a1;
  cva::DictionaryHandler::DictionaryHandler((cva::DictionaryHandler *)v47);
  v45 = *(float *)(*(_QWORD *)a2 + 128);
  if (a3)
  {
    sub_1C98B6CAC(*(_QWORD *)a1[1] + 184, *(_QWORD *)(*(_QWORD *)a2 + 136), *(_DWORD *)(*(_QWORD *)a2 + 152), v10 + 168);
    v11 = *(const UInt8 **)(v10 + 168);
    v12 = *(_DWORD *)(v10 + 184);
    if (v45 == 1.0 || !v12)
      goto LABEL_11;
    v13 = (3 * v12);
    v14 = (v13 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    v15 = *(float **)(v10 + 168);
    if (v14 >= 7)
    {
      v16 = (v14 + 1) & 0x7FFFFFFFFFFFFFF8;
      v17 = (float32x4_t *)(v11 + 16);
      v18 = v16;
      do
      {
        v19 = vmulq_n_f32(*v17, v45);
        v17[-1] = vmulq_n_f32(v17[-1], v45);
        *v17 = v19;
        v17 += 2;
        v18 -= 8;
      }
      while (v18);
      if (v14 + 1 == v16)
        goto LABEL_11;
      v15 = (float *)&v11[4 * v16];
    }
    v20 = (float *)&v11[4 * v13];
    do
    {
      *v15 = v45 * *v15;
      ++v15;
    }
    while (v15 != v20);
LABEL_11:
    v21 = CFDataCreate(0, v11, 4 * (3 * v12 - 6));
    cva::ItemHandler::createData(v21, v22);
    cva::DictionaryHandler::setItem((cva::DictionaryHandler *)v47, CFSTR("vertices"), (const cva::ItemHandler *)&v49);
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v49);
    CFRelease(v21);
  }
  v23 = *(_QWORD *)a1[1];
  v24 = *(float32x2_t *)(v23 + 252);
  v25 = *(float *)(v23 + 260);
  v26 = *(float32x2_t *)(v23 + 240);
  v27 = *(float *)(v23 + 248);
  v50 = 8;
  memptr[0] = 0;
  malloc_type_posix_memalign(memptr, 0x20uLL, 0x20uLL, 0x49090899uLL);
  v28 = (float *)memptr[0];
  v49 = memptr[0];
  v51 = 3;
  *(float32x2_t *)memptr[0] = vmul_n_f32(v24, v45);
  v28[2] = v45 * v25;
  cva::ItemHandler::createVector<float>();
  free(v49);
  cva::DictionaryHandler::setItem((cva::DictionaryHandler *)v47, CFSTR("left_eye"), (const cva::ItemHandler *)v48);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v48);
  v50 = 8;
  memptr[0] = 0;
  malloc_type_posix_memalign(memptr, 0x20uLL, 0x20uLL, 0x49090899uLL);
  v29 = (float *)memptr[0];
  v49 = memptr[0];
  v51 = 3;
  *(float32x2_t *)memptr[0] = vmul_n_f32(v26, v45);
  v29[2] = v45 * v27;
  cva::ItemHandler::createVector<float>();
  free(v49);
  cva::DictionaryHandler::setItem((cva::DictionaryHandler *)v47, CFSTR("right_eye"), (const cva::ItemHandler *)v48);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v48);
  if (*(_BYTE *)(*(_QWORD *)(v10 + 8) + 7))
  {
    cva::DictionaryHandler::DictionaryHandler((cva::DictionaryHandler *)memptr);
    v30 = *(_QWORD *)a1[1];
    v31 = *(float32x2_t *)(v30 + 264);
    v32 = *(float *)(v30 + 272);
    v33 = *(float32x2_t *)(v30 + 276);
    v34 = *(float *)(v30 + 284);
    v35 = *(float32x2_t *)(v30 + 288);
    v36 = *(float *)(v30 + 296);
    v37 = *(float32x2_t *)(v30 + 300);
    v38 = *(float *)(v30 + 308);
    v50 = 8;
    v52 = 0;
    malloc_type_posix_memalign(&v52, 0x20uLL, 0x20uLL, 0x49090899uLL);
    v39 = (float *)v52;
    v49 = v52;
    v51 = 3;
    *(float32x2_t *)v52 = vmul_n_f32(v31, v45);
    v39[2] = v45 * v32;
    cva::ItemHandler::createVector<float>();
    free(v49);
    cva::DictionaryHandler::setItem((cva::DictionaryHandler *)memptr, CFSTR("infraorbital_left"), (const cva::ItemHandler *)v48);
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v48);
    v50 = 8;
    v52 = 0;
    malloc_type_posix_memalign(&v52, 0x20uLL, 0x20uLL, 0x49090899uLL);
    v40 = (float *)v52;
    v49 = v52;
    v51 = 3;
    *(float32x2_t *)v52 = vmul_n_f32(v33, v45);
    v40[2] = v45 * v34;
    cva::ItemHandler::createVector<float>();
    free(v49);
    cva::DictionaryHandler::setItem((cva::DictionaryHandler *)memptr, CFSTR("infraorbital_right"), (const cva::ItemHandler *)v48);
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v48);
    v50 = 8;
    v52 = 0;
    malloc_type_posix_memalign(&v52, 0x20uLL, 0x20uLL, 0x49090899uLL);
    v41 = (float *)v52;
    v49 = v52;
    v51 = 3;
    *(float32x2_t *)v52 = vmul_n_f32(v35, v45);
    v41[2] = v45 * v36;
    cva::ItemHandler::createVector<float>();
    free(v49);
    cva::DictionaryHandler::setItem((cva::DictionaryHandler *)memptr, CFSTR("tragion_left"), (const cva::ItemHandler *)v48);
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v48);
    v50 = 8;
    v52 = 0;
    malloc_type_posix_memalign(&v52, 0x20uLL, 0x20uLL, 0x49090899uLL);
    v42 = (float *)v52;
    v49 = v52;
    v51 = 3;
    *(float32x2_t *)v52 = vmul_n_f32(v37, v45);
    v42[2] = v45 * v38;
    cva::ItemHandler::createVector<float>();
    free(v49);
    cva::DictionaryHandler::setItem((cva::DictionaryHandler *)memptr, CFSTR("tragion_right"), (const cva::ItemHandler *)v48);
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v48);
    cva::ItemHandler::createValue<std::string>();
    cva::DictionaryHandler::setItem((cva::DictionaryHandler *)memptr, CFSTR("keypoints_model_version"), (const cva::ItemHandler *)&v49);
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v49);
    cva::ItemHandler::ItemHandler();
    cva::DictionaryHandler::setItem((cva::DictionaryHandler *)v47, CFSTR("keypoints"), (const cva::ItemHandler *)&v49);
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v49);
    cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)memptr);
  }
  if (a4)
  {
    v43 = CFDataCreate(0, *(const UInt8 **)a4, 8 * *(_DWORD *)(a4 + 16));
    cva::ItemHandler::createData(v43, v44);
    cva::DictionaryHandler::setItem((cva::DictionaryHandler *)v47, CFSTR("landmarks"), (const cva::ItemHandler *)&v49);
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v49);
    CFRelease(v43);
  }
  cva::ItemHandler::ItemHandler();
  cva::DictionaryHandler::setItem(a5, CFSTR("geometry"), (const cva::ItemHandler *)&v49);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v49);
  cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)v47);
}

void sub_1C98B6BA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *a17)
{
  const void *v17;

  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&a17);
  CFRelease(v17);
  cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)&a13);
  _Unwind_Resume(a1);
}

void sub_1C98B6CAC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  unsigned int v6;
  _OWORD *v7;
  unint64_t v8;
  size_t v9;
  int v10;
  uint64_t v11;
  int *v12;
  unint64_t v13;
  _DWORD *v14;
  unint64_t v15;
  uint64_t v16;
  int *v17;
  _OWORD *v18;
  __int128 *v19;
  uint64_t v20;
  __int128 v21;
  _DWORD *v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  _OWORD *v29;
  int v30;
  int v31;
  void *memptr[3];
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v24 = a3 - 2;
  v25 = a2;
  v26 = a3;
  v27 = 0;
  v6 = *(_DWORD *)(a1 + 152);
  *(_DWORD *)(a4 + 16) = v6 / 3;
  if (v6 > 2)
  {
    v8 = 3 * (v6 / 3);
    v7 = *(_OWORD **)a4;
    if (*(_QWORD *)(a4 + 8) < v8)
    {
      free(v7);
      v9 = (4 * v8 + 31) & 0x7FFFFFFE0;
      *(_QWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = v9 >> 2;
      memptr[0] = 0;
      malloc_type_posix_memalign(memptr, 0x20uLL, v9, 0x49090899uLL);
      v7 = memptr[0];
      *(void **)a4 = memptr[0];
    }
  }
  else
  {
    free(*(void **)a4);
    v7 = 0;
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
  }
  v10 = *(_DWORD *)(a4 + 16);
  v11 = (3 * v10);
  v28 = 3 * v10;
  v29 = v7;
  v30 = 3 * v10;
  v31 = 0;
  if (v10)
  {
    v12 = *(int **)(a1 + 136);
    v13 = (v11 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    if (v13 < 7)
    {
      v14 = v7;
LABEL_13:
      v22 = (_DWORD *)v7 + v11;
      do
      {
        v23 = *v12++;
        *v14++ = v23;
      }
      while (v14 != v22);
      goto LABEL_15;
    }
    v14 = v7;
    if ((unint64_t)((char *)v7 - (char *)v12) < 0x20)
      goto LABEL_13;
    v15 = v13 + 1;
    v16 = (v13 + 1) & 0x7FFFFFFFFFFFFFF8;
    v17 = &v12[v16];
    v18 = v7 + 1;
    v19 = (__int128 *)(v12 + 4);
    v20 = v16;
    do
    {
      v21 = *v19;
      *(v18 - 1) = *(v19 - 1);
      *v18 = v21;
      v18 += 2;
      v19 += 2;
      v20 -= 8;
    }
    while (v20);
    if (v15 != v16)
    {
      v14 = (_DWORD *)v7 + v16;
      v12 = v17;
      goto LABEL_13;
    }
  }
LABEL_15:
  memptr[1] = (void *)(a1 + 160);
  memptr[2] = &v24;
  v33 = 1065353216;
  sub_1C98B6E54((unsigned int *)&v28, (uint64_t)memptr);
}

void sub_1C98B6E54(unsigned int *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  void *v9;
  float32x4_t *v10;
  unint64_t v11;
  float *v12;
  float *v13;
  uint64_t v14;
  float32x4_t *v15;
  float32x4_t *v16;
  uint64_t v17;
  float32x4_t v18;
  float *v19;
  float v20;
  void *v21[2];
  int v22;
  void *memptr;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *((_QWORD *)a1 + 1) - 4 * a1[5];
  if (*(_QWORD *)v4 == v5 || (v6 = *(_QWORD *)(a2 + 16), *(_QWORD *)(v6 + 8) - 4 * *(unsigned int *)(v6 + 20) == v5))
  {
    v7 = (4 * *(unsigned int *)(v4 + 16) + 31) & 0x7FFFFFFE0;
    v21[1] = (void *)(v7 >> 2);
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v7, 0x49090899uLL);
    v21[0] = memptr;
    v22 = *(_DWORD *)(*(_QWORD *)(a2 + 8) + 16);
    sub_1C98B7018((uint64_t)v21, a2);
    v8 = *a1;
    v9 = v21[0];
    if ((_DWORD)v8)
    {
      v10 = (float32x4_t *)*((_QWORD *)a1 + 1);
      v11 = (v8 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      if (v11 >= 0xB)
      {
        if (v10 >= (float32x4_t *)((char *)v21[0] + 4 * v8)
          || (v12 = (float *)v21[0], v13 = (float *)*((_QWORD *)a1 + 1), v21[0] >= &v10->f32[v8]))
        {
          v14 = (v11 + 1) & 0x7FFFFFFFFFFFFFF8;
          v12 = (float *)((char *)v21[0] + 4 * v14);
          v15 = v10 + 1;
          v16 = (float32x4_t *)((char *)v21[0] + 16);
          v17 = v14;
          do
          {
            v18 = vaddq_f32(*v16, *v15);
            v15[-1] = vaddq_f32(v16[-1], v15[-1]);
            *v15 = v18;
            v15 += 2;
            v16 += 2;
            v17 -= 8;
          }
          while (v17);
          if (v11 + 1 == v14)
            goto LABEL_17;
          v13 = &v10->f32[v14];
        }
      }
      else
      {
        v12 = (float *)v21[0];
        v13 = (float *)*((_QWORD *)a1 + 1);
      }
      v19 = &v10->f32[v8];
      do
      {
        v20 = *v12++;
        *v13 = v20 + *v13;
        ++v13;
      }
      while (v13 != v19);
    }
LABEL_17:
    free(v9);
    return;
  }
  if (*(_DWORD *)(v4 + 20) * *(_DWORD *)(v4 + 16))
  {
    if (*(_DWORD *)v6)
      cva::VecLib<float>::gemm();
  }
}

void sub_1C98B7004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  free(a13);
  _Unwind_Resume(a1);
}

void sub_1C98B7018(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  size_t v7;
  void *v8;
  size_t v9;
  uint64_t v10;
  void *v11;
  size_t v12;
  int v13;
  void *memptr;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(void **)a1;
  if (*(void **)v4 == v5
    || (v6 = *(_QWORD *)(a2 + 16), (void *)(*(_QWORD *)(v6 + 8) - 4 * *(unsigned int *)(v6 + 20)) == v5))
  {
    v7 = (4 * *(unsigned int *)(v4 + 16) + 31) & 0x7FFFFFFE0;
    v12 = v7 >> 2;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v7, 0x49090899uLL);
    v11 = memptr;
    v13 = *(_DWORD *)(*(_QWORD *)(a2 + 8) + 16);
    sub_1C98B7018(&v11, a2);
    v8 = *(void **)a1;
    v9 = v12;
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = v13;
    free(v8);
  }
  else if (*(_DWORD *)(v4 + 20) * *(_DWORD *)(v4 + 16) && *(_DWORD *)v6)
  {
    cva::VecLib<float>::gemm();
  }
  else
  {
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
      bzero(v5, 4 * v10);
  }
}

void sub_1C98B7138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  free(a13);
  _Unwind_Resume(a1);
}

void sub_1C98B714C(cva::DictionaryHandler **a1, uint64_t a2, _QWORD *a3, int a4, uint64_t a5)
{
  int v5;
  std::__shared_weak_count *v11;
  _DWORD *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  cva::DictionaryHandler *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  cva::DictionaryHandler *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  cva::DictionaryHandler *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  cva::DictionaryHandler *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  cva::DictionaryHandler *v41;
  _OWORD *v42;
  int v43;
  double Seconds;
  unsigned __int8 v45;
  int v46;
  unsigned __int8 v47;
  NSObject *v48;
  unsigned __int8 v49;
  NSObject *v50;
  const unsigned __int8 *v51;
  const __CFAllocator *v52;
  const unsigned __int8 *v53;
  CFStringRef v54;
  const __CFString *v55;
  cva::DictionaryHandler *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  int v62;
  _BYTE v63[16];
  _QWORD v64[2];
  void *memptr[2];
  uint64_t v66;
  std::__shared_weak_count *v67;
  _BYTE v68[16];
  cva::DictionaryHandler *v69;
  std::__shared_weak_count *v70;
  _BYTE time[37];
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v11 = (std::__shared_weak_count *)operator new(0x28uLL);
  v11->__shared_owners_ = 0;
  v11->__shared_weak_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295758;
  cva::DictionaryHandler::DictionaryHandler((cva::DictionaryHandler *)&v11[1]);
  v69 = (cva::DictionaryHandler *)&v11[1];
  v70 = v11;
  cva::DictionaryHandler::DictionaryHandler((cva::DictionaryHandler *)v68);
  *(_QWORD *)&time[8] = 8;
  memptr[0] = 0;
  malloc_type_posix_memalign(memptr, 0x20uLL, 0x20uLL, 0x49090899uLL);
  v12 = memptr[0];
  *(void **)time = memptr[0];
  *(_DWORD *)&time[16] = 3;
  *(_QWORD *)memptr[0] = 38;
  v12[2] = 0;
  cva::ItemHandler::createVector<int>();
  free(*(void **)time);
  cva::DictionaryHandler::setItem((cva::DictionaryHandler *)v68, CFSTR("version"), (const cva::ItemHandler *)&v66);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v66);
  cva::ItemHandler::ItemHandler();
  cva::DictionaryHandler::setItem((cva::DictionaryHandler *)&v11[1], CFSTR("meta"), (const cva::ItemHandler *)time);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)time);
  v14 = *(_QWORD *)(a2 + 352);
  v13 = *(std::__shared_weak_count **)(a2 + 360);
  if (!v13)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  do
    v16 = __ldxr(p_shared_owners);
  while (__stxr(v16 + 1, p_shared_owners));
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (!v14)
      goto LABEL_17;
  }
  else
  {
LABEL_6:
    if (!v14)
      goto LABEL_17;
  }
  v18 = v69;
  v19 = *(std::__shared_weak_count **)(a2 + 360);
  v66 = *(_QWORD *)(a2 + 352);
  v67 = v19;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  cva::ItemHandler::ItemHandler();
  cva::DictionaryHandler::setItem(v18, CFSTR("DetectedFacesArray"), (const cva::ItemHandler *)time);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)time);
  if (v19)
  {
    v22 = (unint64_t *)&v19->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
      if (!*a3)
        goto LABEL_19;
      goto LABEL_18;
    }
  }
LABEL_17:
  if (*a3)
  {
LABEL_18:
    v24 = v69;
    cva::ItemHandler::ItemHandler();
    cva::DictionaryHandler::setItem(v24, CFSTR("tracked_faces"), (const cva::ItemHandler *)time);
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)time);
  }
LABEL_19:
  v26 = *(_QWORD *)(a2 + 72);
  v25 = *(std::__shared_weak_count **)(a2 + 80);
  if (!v25)
    goto LABEL_24;
  v27 = (unint64_t *)&v25->__shared_owners_;
  do
    v28 = __ldxr(v27);
  while (__stxr(v28 + 1, v27));
  do
    v29 = __ldaxr(v27);
  while (__stlxr(v29 - 1, v27));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
    if (v26)
      goto LABEL_25;
  }
  else
  {
LABEL_24:
    if (v26)
    {
LABEL_25:
      v30 = v69;
      v31 = *(std::__shared_weak_count **)(a2 + 80);
      v66 = *(_QWORD *)(a2 + 72);
      v67 = v31;
      if (v31)
      {
        v32 = (unint64_t *)&v31->__shared_owners_;
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
      }
      cva::ItemHandler::ItemHandler();
      cva::DictionaryHandler::setItem(v30, CFSTR("rgb_camera"), (const cva::ItemHandler *)time);
      cva::ItemHandler::~ItemHandler((cva::ItemHandler *)time);
      if (v31)
      {
        v34 = (unint64_t *)&v31->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      goto LABEL_36;
    }
  }
  if (*(_QWORD *)(a2 + 88))
  {
    sub_1C98E63A8((cva::DictionaryHandler *)time, (_DWORD *)(a2 + 112), (_DWORD *)(a2 + 148), (_DWORD *)(a2 + 184));
    v36 = v69;
    cva::ItemHandler::ItemHandler();
    cva::DictionaryHandler::setItem(v36, CFSTR("rgb_camera"), (const cva::ItemHandler *)&v66);
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v66);
    cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)time);
  }
LABEL_36:
  v37 = *(_QWORD *)(a2 + 56);
  v38 = *(std::__shared_weak_count **)(a2 + 64);
  v66 = v37;
  v67 = v38;
  if (v38)
  {
    v39 = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
  }
  v41 = v69;
  if (v37)
  {
    cva::ItemHandler::ItemHandler();
    cva::DictionaryHandler::setItem(v41, CFSTR("timestamp"), (const cva::ItemHandler *)time);
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)time);
  }
  v42 = (_OWORD *)(a2 + 24);
  v43 = *(_DWORD *)(a2 + 48);
  if (v43)
  {
    if (v43 != 1)
    {
      sub_1C98CFB60();
      goto LABEL_86;
    }
    *(_OWORD *)time = *v42;
    *(_QWORD *)&time[16] = *(_QWORD *)(a2 + 40);
    Seconds = CMTimeGetSeconds((CMTime *)time);
  }
  else
  {
    Seconds = *(double *)v42;
  }
  *(double *)v64 = Seconds;
  cva::ItemHandler::createValue<double>();
  cva::DictionaryHandler::setItem(v41, "timestamp_seconds", (const cva::ItemHandler *)memptr);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)memptr);
  cva::DictionaryHandler::DictionaryHandler((cva::DictionaryHandler *)memptr);
  if (!*(_BYTE *)(a2 + 376))
    goto LABEL_54;
  LOBYTE(v64[0]) = 0;
  if (*(_BYTE *)(a2 + 372))
  {
    v5 = *(_DWORD *)(a2 + 368);
    v45 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
    if ((v45 & 1) != 0)
    {
LABEL_48:
      v46 = *(_DWORD *)(qword_1ED52ACB8 + 232);
      LOBYTE(v64[0]) = v5 < v46;
      if (v5 < v46)
      {
        v47 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
        if ((v47 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
        {
          qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
          __cxa_guard_release(&qword_1ED52ACD0);
        }
        v48 = (id)qword_1ED52ACE0;
        if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
        {
          sub_1C98CFEAC();
          v62 = *(_DWORD *)(qword_1ED52ACB8 + 232);
          *(_DWORD *)time = 67109376;
          *(_DWORD *)&time[4] = v5;
          *(_WORD *)&time[8] = 1024;
          *(_DWORD *)&time[10] = v62;
          _os_log_debug_impl(&dword_1C9870000, v48, OS_LOG_TYPE_DEBUG, "The image is too dark! Lux level %d < Threshold %d", time, 0xEu);
        }

      }
      goto LABEL_53;
    }
LABEL_86:
    if (__cxa_guard_acquire(&qword_1ED52ACD8))
    {
      sub_1C98CFF14();
      __cxa_guard_release(&qword_1ED52ACD8);
    }
    goto LABEL_48;
  }
LABEL_53:
  cva::ItemHandler::createValue<BOOL>();
  cva::DictionaryHandler::setItem((cva::DictionaryHandler *)memptr, CFSTR("image_too_dark"), (const cva::ItemHandler *)time);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)time);
LABEL_54:
  if (*(_BYTE *)(a2 + 382))
  {
    LOBYTE(v64[0]) = 0;
    if (*(_BYTE *)(a2 + 381))
    {
      LOBYTE(v64[0]) = *(_BYTE *)(a2 + 380);
      if (LOBYTE(v64[0]))
      {
        v49 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
        if ((v49 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
        {
          qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
          __cxa_guard_release(&qword_1ED52ACD0);
        }
        v50 = (id)qword_1ED52ACE0;
        if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)time = 0;
          _os_log_debug_impl(&dword_1C9870000, v50, OS_LOG_TYPE_DEBUG, "Sensor is covered", time, 2u);
        }

      }
    }
    cva::ItemHandler::createValue<BOOL>();
    cva::DictionaryHandler::setItem((cva::DictionaryHandler *)memptr, CFSTR("sensor_covered"), (const cva::ItemHandler *)time);
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)time);
  }
  if (a4)
  {
    LOBYTE(v64[0]) = 1;
    cva::ItemHandler::createValue<BOOL>();
    cva::DictionaryHandler::setItem((cva::DictionaryHandler *)memptr, CFSTR("timestamp_gap"), (const cva::ItemHandler *)time);
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)time);
  }
  cva::ItemHandler::ItemHandler();
  cva::DictionaryHandler::setItem(v41, CFSTR("data_failure"), (const cva::ItemHandler *)time);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)time);
  if (a5 && *(_QWORD *)(a5 + 24))
  {
    cva::DictionaryHandler::DictionaryHandler((cva::DictionaryHandler *)v64);
    v51 = *(const unsigned __int8 **)(a5 + 16);
    if (v51)
    {
      v52 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      do
      {
        cva::ArrayHandler::ArrayHandler((cva::ArrayHandler *)v63);
        v53 = v51 + 48;
        while (1)
        {
          v53 = *(const unsigned __int8 **)v53;
          if (!v53)
            break;
          memset(time, 0, sizeof(time));
          uuid_unparse_upper(v53 + 16, time);
          v54 = CFStringCreateWithCString(v52, time, 0x8000100u);
          cva::ItemHandler::ItemHandler((cva::ItemHandler *)time, v54);
          cva::ArrayHandler::addItem((cva::ArrayHandler *)v63, (const cva::ItemHandler *)time);
          cva::ItemHandler::~ItemHandler((cva::ItemHandler *)time);
          CFRelease(v54);
        }
        memset(time, 0, sizeof(time));
        uuid_unparse_upper(v51 + 16, time);
        v55 = CFStringCreateWithCString(v52, time, 0x8000100u);
        cva::ItemHandler::ItemHandler();
        cva::DictionaryHandler::setItem((cva::DictionaryHandler *)v64, v55, (const cva::ItemHandler *)time);
        cva::ItemHandler::~ItemHandler((cva::ItemHandler *)time);
        CFRelease(v55);
        cva::ArrayHandler::~ArrayHandler((cva::ArrayHandler *)v63);
        v51 = *(const unsigned __int8 **)v51;
      }
      while (v51);
      v41 = v69;
    }
    cva::ItemHandler::ItemHandler();
    cva::DictionaryHandler::setItem(v41, CFSTR("recognition_previous_ids"), (const cva::ItemHandler *)time);
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)time);
    cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)v64);
    v38 = v67;
  }
  v56 = (cva::DictionaryHandler *)v70;
  *a1 = v41;
  a1[1] = v56;
  v69 = 0;
  v70 = 0;
  cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)memptr);
  if (v38)
  {
    v57 = (unint64_t *)&v38->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)v68);
  v59 = v70;
  if (v70)
  {
    v60 = (unint64_t *)&v70->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
}

void sub_1C98B79CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,void *a21)
{
  __cxa_guard_abort(&qword_1ED52ACD8);
  cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)&a13);
  sub_1C987C140((uint64_t)&a15);
  cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)&a17);
  sub_1C987C140((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_1C98B7BA0(uint64_t a1, uint64_t ***a2, double a3)
{
  uint64_t **v3;
  uint64_t **v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unsigned __int8 v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  unint64_t *v18;
  void *v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  _OWORD *v30;
  _QWORD *v31;
  __int128 v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  char *v38;
  unsigned int **v39;
  unsigned int *v40;
  double v41;
  unsigned __int8 v42;
  NSObject *v43;
  int v45;
  unsigned __int8 v46;
  NSObject *v47;
  unint64_t **i;
  unint64_t *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  char *v55;
  void *v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  int64_t v60;
  unsigned int *v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::mutex *m;
  unint64_t v77;
  char *v78;
  char *v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  char *v83;
  char *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  void *v88;
  int64x2_t v89;
  int64x2_t v90;
  void *v91[2];
  char *v92;
  std::unique_lock<std::mutex> __lk;
  void *__p[4];

  __p[3] = *(void **)MEMORY[0x1E0C80C00];
  v4 = *a2;
  v3 = a2[1];
  v5 = (char *)v3 - (char *)*a2;
  if (v3 == *a2)
    return;
  if (v5 < 0)
    abort();
  v91[0] = operator new((char *)v3 - (char *)*a2);
  v91[1] = v91[0];
  v92 = (char *)v91[0] + 16 * (v5 >> 4);
  do
  {
    v8 = **v4;
    v9 = *(_QWORD *)(v8 + 136);
    v10 = *(std::__shared_weak_count **)(v8 + 144);
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
      v13 = atomic_load((unsigned __int8 *)(v9 + 80));
      v14 = (unint64_t *)&v10->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (v15)
      {
        if ((v13 & 1) == 0)
          goto LABEL_5;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
        if ((v13 & 1) == 0)
          goto LABEL_5;
      }
    }
    else
    {
      v16 = atomic_load((unsigned __int8 *)(v9 + 80));
      if ((v16 & 1) == 0)
        goto LABEL_5;
    }
    v17 = **v4;
    v19 = *(void **)(v17 + 136);
    v18 = *(unint64_t **)(v17 + 144);
    __p[0] = v19;
    __p[1] = v18;
    if (v18)
    {
      v20 = v18 + 1;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v22 = (char *)v91[1];
    if (v91[1] < v92)
    {
      *(_OWORD *)v91[1] = *(_OWORD *)__p;
      v91[1] = (char *)v91[1] + 16;
      goto LABEL_5;
    }
    v23 = (char *)v91[0];
    v24 = ((char *)v91[1] - (char *)v91[0]) >> 4;
    v25 = v24 + 1;
    if ((unint64_t)(v24 + 1) >> 60)
      abort();
    v26 = v92 - (char *)v91[0];
    if ((v92 - (char *)v91[0]) >> 3 > v25)
      v25 = v26 >> 3;
    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0)
      v27 = 0xFFFFFFFFFFFFFFFLL;
    else
      v27 = v25;
    if (v27 >> 60)
      sub_1C9899D30();
    v28 = (char *)operator new(16 * v27);
    v29 = &v28[16 * v24];
    *(_OWORD *)v29 = *(_OWORD *)__p;
    v30 = v29 + 16;
    __p[0] = 0;
    __p[1] = 0;
    if (v91[1] == v91[0])
    {
      v91[0] = &v28[16 * v24];
      v92 = &v28[16 * v27];
      if (!v91[1])
        goto LABEL_40;
    }
    else
    {
      v31 = v91[1];
      do
      {
        v32 = *((_OWORD *)v31 - 1);
        v31 -= 2;
        *((_OWORD *)v29 - 1) = v32;
        v29 -= 16;
        *v31 = 0;
        v31[1] = 0;
      }
      while (v31 != v91[0]);
      v91[0] = v29;
      v92 = &v28[16 * v27];
      do
      {
        v33 = (std::__shared_weak_count *)*((_QWORD *)v22 - 1);
        if (v33)
        {
          v34 = (unint64_t *)&v33->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
        v22 -= 16;
      }
      while (v22 != v23);
      v22 = v23;
      if (!v23)
        goto LABEL_40;
    }
    operator delete(v22);
LABEL_40:
    v91[1] = v30;
    if (__p[1])
    {
      v36 = (unint64_t *)((char *)__p[1] + 8);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        (*(void (**)(void *))(*(_QWORD *)__p[1] + 16))(__p[1]);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__p[1]);
      }
    }
LABEL_5:
    v4 += 2;
  }
  while (v4 != v3);
  v38 = (char *)v91[1];
  if (v91[0] != v91[1])
  {
    v39 = *(unsigned int ***)(a1 + 32);
    v40 = *v39;
    v41 = *((double *)*v39 + 1);
    if (v41 >= a3)
    {
      v42 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
      if ((v42 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
      {
        qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
        __cxa_guard_release(&qword_1ED52ACD0);
      }
      v43 = qword_1ED52ACE0;
      if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_ERROR))
      {
        v88 = (void *)*((_QWORD *)*v39 + 1);
        LODWORD(__p[0]) = 134218240;
        *(void **)((char *)__p + 4) = *(void **)&a3;
        WORD2(__p[1]) = 2048;
        *(void **)((char *)&__p[1] + 6) = v88;
        _os_log_error_impl(&dword_1C9870000, v43, OS_LOG_TYPE_ERROR, "non-increasing timestamp %15g <= %15g", (uint8_t *)__p, 0x16u);
      }
      v40 = *v39;
      *((_QWORD *)*v39 + 1) = 0xFFEFFFFFFFFFFFFFLL;
      v41 = -1.79769313e308;
    }
    if (v41 >= a3 || v41 + 1000.0 <= a3)
    {
      v45 = atomic_load(v40);
      if (v45 <= 0)
      {
        *((double *)*v39 + 1) = a3;
        if (a3 + 1000.0 <= a3)
        {
          v46 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
          if ((v46 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
          {
            qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
            __cxa_guard_release(&qword_1ED52ACD0);
          }
          v47 = qword_1ED52ACE0;
          if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_DEBUG))
          {
            LODWORD(__p[0]) = 134217984;
            *(void **)((char *)__p + 4) = *(void **)&a3;
            _os_log_debug_impl(&dword_1C9870000, v47, OS_LOG_TYPE_DEBUG, "insufficient timestamp precision or invalid timestamp %15g", (uint8_t *)__p, 0xCu);
          }
        }
        for (i = (unint64_t **)v91[0]; i != v91[1]; i += 2)
        {
          v49 = *i;
          atomic_store(*(unint64_t *)&a3, v49);
        }
        v50 = *v39;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 + 1, v50));
        v52 = *v39;
        v89 = *(int64x2_t *)v91;
        *(_OWORD *)__p = *(_OWORD *)v91;
        __p[2] = v92;
        *(_OWORD *)v91 = 0uLL;
        v53 = (std::__shared_weak_count *)operator new(0xB8uLL);
        v53->__shared_owners_ = 0;
        v54 = (unint64_t *)&v53->__shared_owners_;
        v53->__shared_weak_owners_ = 0;
        v53->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295D40;
        v90 = *(int64x2_t *)&__p[1];
        memset(__p, 0, 24);
        v55 = (char *)operator new(0x38uLL);
        v53[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295140;
        *(_QWORD *)v55 = &off_1E8294470;
        *((_QWORD *)v55 + 1) = sub_1C98B2E7C;
        *((_QWORD *)v55 + 2) = 0;
        *((_QWORD *)v55 + 3) = v52;
        v56 = (void *)v89.i64[0];
        *((_QWORD *)v55 + 4) = v89.i64[0];
        *(int64x2_t *)(v55 + 40) = v90;
        v53[1].__shared_owners_ = 850045863;
        v53[4].__vftable = (std::__shared_weak_count_vtbl *)1018212795;
        *(_OWORD *)&v53[1].__shared_weak_owners_ = 0u;
        *(_OWORD *)&v53[2].__shared_owners_ = 0u;
        v53[3].std::__shared_count = 0u;
        v53[3].__shared_weak_owners_ = 0;
        *(_OWORD *)&v53[4].__shared_owners_ = 0u;
        v53[5].std::__shared_count = 0u;
        *(_OWORD *)((char *)&v53[5].__shared_owners_ + 1) = 0u;
        v57 = operator new(0x38uLL);
        v58 = v57;
        *v57 = &off_1E8294470;
        v57[1] = sub_1C98B2E7C;
        v57[2] = 0;
        v57[3] = v52;
        v57[5] = 0;
        v57[6] = 0;
        v57[4] = 0;
        if ((vmovn_s64(vceqq_s64(v90, v89)).u8[0] & 1) != 0)
        {
          v53[7].__shared_owners_ = (uint64_t)v57;
          if (!v89.i64[0])
            goto LABEL_87;
LABEL_86:
          operator delete(v56);
        }
        else
        {
          v59 = v90.i64[0];
          v60 = v90.i64[0] - v89.i64[0];
          if (v90.i64[0] - v89.i64[0] < 0)
            abort();
          v61 = v52;
          v62 = v60 >> 4;
          v63 = operator new(v60);
          v58[4] = v63;
          v58[6] = &v63[2 * v62];
          v64 = (_QWORD *)v89.i64[0];
          v52 = v61;
          do
          {
            *v63 = *v64;
            v65 = v64[1];
            v63[1] = v65;
            if (v65)
            {
              v66 = (unint64_t *)(v65 + 8);
              do
                v67 = __ldxr(v66);
              while (__stxr(v67 + 1, v66));
            }
            v64 += 2;
            v63 += 2;
          }
          while (v64 != (_QWORD *)v90.i64[0]);
          v58[5] = v63;
          v53[7].__shared_owners_ = (uint64_t)v58;
          if (v89.i64[0])
          {
            do
            {
              v68 = *(std::__shared_weak_count **)(v59 - 8);
              if (v68)
              {
                v69 = (unint64_t *)&v68->__shared_owners_;
                do
                  v70 = __ldaxr(v69);
                while (__stlxr(v70 - 1, v69));
                if (!v70)
                {
                  ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                  std::__shared_weak_count::__release_weak(v68);
                }
              }
              v59 -= 16;
            }
            while (v59 != v89.i64[0]);
            v56 = (void *)*((_QWORD *)v55 + 4);
            goto LABEL_86;
          }
        }
LABEL_87:
        operator delete(v55);
        v71 = *((_QWORD *)v52 + 8);
        __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)&v53[1];
        *(_QWORD *)&__lk.__owns_ = v53;
        do
          v72 = __ldxr(v54);
        while (__stxr(v72 + 1, v54));
        (*(void (**)(uint64_t, std::unique_lock<std::mutex> *))(*(_QWORD *)v71 + 16))(v71, &__lk);
        v73 = *(std::__shared_weak_count **)&__lk.__owns_;
        if (*(_QWORD *)&__lk.__owns_)
        {
          v74 = (unint64_t *)(*(_QWORD *)&__lk.__owns_ + 8);
          do
            v75 = __ldaxr(v74);
          while (__stlxr(v75 - 1, v74));
          if (!v75)
          {
            ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
            std::__shared_weak_count::__release_weak(v73);
          }
        }
        if (*((_BYTE *)v52 + 80))
        {
          m = (std::mutex *)&v53[1].__shared_owners_;
          __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)&v53[1].__shared_owners_;
          __lk.__owns_ = 1;
          std::mutex::lock((std::mutex *)&v53[1].__shared_owners_);
          if (LOBYTE(v53[6].__vftable))
            goto LABEL_99;
          do
            std::condition_variable::wait((std::condition_variable *)&v53[4], &__lk);
          while (!LOBYTE(v53[6].__vftable));
          if (__lk.__owns_)
          {
            m = __lk.__m_;
LABEL_99:
            std::mutex::unlock(m);
          }
        }
        do
          v77 = __ldaxr(v54);
        while (__stlxr(v77 - 1, v54));
        if (!v77)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
        v78 = (char *)__p[0];
        if (__p[0])
        {
          v79 = (char *)__p[1];
          if (__p[1] != __p[0])
          {
            do
            {
              v80 = (std::__shared_weak_count *)*((_QWORD *)v79 - 1);
              if (v80)
              {
                v81 = (unint64_t *)&v80->__shared_owners_;
                do
                  v82 = __ldaxr(v81);
                while (__stlxr(v82 - 1, v81));
                if (!v82)
                {
                  ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                  std::__shared_weak_count::__release_weak(v80);
                }
              }
              v79 -= 16;
            }
            while (v79 != v78);
            v78 = (char *)__p[0];
          }
          operator delete(v78);
        }
      }
    }
    v38 = (char *)v91[0];
  }
  if (v38)
  {
    v83 = (char *)v91[1];
    v84 = v38;
    if (v91[1] != v38)
    {
      do
      {
        v85 = (std::__shared_weak_count *)*((_QWORD *)v83 - 1);
        if (v85)
        {
          v86 = (unint64_t *)&v85->__shared_owners_;
          do
            v87 = __ldaxr(v86);
          while (__stlxr(v87 - 1, v86));
          if (!v87)
          {
            ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
            std::__shared_weak_count::__release_weak(v85);
          }
        }
        v83 -= 16;
      }
      while (v83 != v38);
      v84 = (char *)v91[0];
    }
    operator delete(v84);
  }
}

void sub_1C98B8404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1C98A7D08((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1C98B842C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), a2, *a3);
}

uint64_t sub_1C98B8440(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

_QWORD *sub_1C98B8498(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E82952D8;
  v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void sub_1C98B84FC(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_1E82952D8;
  v1 = (std::__shared_weak_count *)a1[5];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x1CAA44AFCLL);
}

char *sub_1C98B8570(uint64_t a1)
{
  char *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = (char *)operator new(0x30uLL);
  *(_QWORD *)result = &off_1E82952D8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 32);
  *((_QWORD *)result + 3) = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 4) = v3;
  v4 = *(_QWORD *)(a1 + 40);
  *((_QWORD *)result + 5) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_1C98B85D0(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E82952D8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(result + 24);
  v2 = *(_QWORD *)(result + 40);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(result + 32);
  *(_QWORD *)(a2 + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void sub_1C98B8610(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_1C98B8668(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(__p);
}

void sub_1C98B86C0(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(_QWORD *, uint64_t, uint64_t *);
  _QWORD *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v3 = a1[2];
  v4 = (void (*)(_QWORD *, uint64_t, uint64_t *))a1[1];
  v5 = (_QWORD *)(a1[3] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v4 = *(void (**)(_QWORD *, uint64_t, uint64_t *))(*v5 + v4);
  v7 = a1[4];
  v6 = (std::__shared_weak_count *)a1[5];
  v13 = v7;
  v14 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v4(v5, a2, &v13);
  v10 = v14;
  if (v14)
  {
    v11 = (unint64_t *)&v14->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_1C98B875C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1C98B87A0(uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = operator new();
  *(_BYTE *)v2 = 0;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_BYTE *)(v2 + 56) = 0;
  *(_BYTE *)(v2 + 88) = 0;
  *(_QWORD *)(v2 + 96) = 0;
  *(_QWORD *)(v2 + 104) = 0;
  *(_QWORD *)(v2 + 112) = 0;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 36) = 0u;
  v3 = (_QWORD *)operator new();
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  *(_QWORD *)(v2 + 120) = v3;
  *(_BYTE *)(v2 + 128) = 0;
  *(_BYTE *)(v2 + 136) = 0;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 172) = 0u;
  *a1 = v2;
  return a1;
}

void sub_1C98B8854(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t *v2;
  void **v3;
  uint64_t *v4;
  char *v6;
  char *v7;
  void *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;

  v4 = v2;
  v6 = (char *)*v3;
  if (*v3)
  {
    v7 = (char *)v1[13];
    v8 = *v3;
    if (v7 != v6)
    {
      do
      {
        v9 = (void *)*((_QWORD *)v7 - 1);
        if (v9)
        {
          free(v9);
          *((_QWORD *)v7 - 1) = 0;
        }
        v7 -= 32;
      }
      while (v7 != v6);
      v8 = *v3;
    }
    v1[13] = v6;
    operator delete(v8);
  }
  v10 = (std::__shared_weak_count *)v1[5];
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)v1[3];
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = *v4;
  *v4 = 0;
  if (v16)
  {
    if (*(char *)(v16 + 47) < 0)
      operator delete(*(void **)(v16 + 24));
    MEMORY[0x1CAA44AFC](v16, 0x1012C409C40065ELL);
  }
  MEMORY[0x1CAA44AFC](v1, 0x10E2C40ACF00C74);
  _Unwind_Resume(a1);
}

uint64_t *sub_1C98B896C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  void **v9;
  char *v10;
  char *v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;

  v2 = *a1;
  *a1 = 0;
  if (!v2)
    return a1;
  free(*(void **)(v2 + 168));
  v3 = *(_QWORD *)(v2 + 160);
  *(_QWORD *)(v2 + 160) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(v2 + 152);
  *(_QWORD *)(v2 + 152) = 0;
  if (v4)
  {
    free(*(void **)(v4 + 64));
    free(*(void **)(v4 + 40));
    free(*(void **)(v4 + 16));
    v5 = *(std::__shared_weak_count **)(v4 + 8);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    MEMORY[0x1CAA44AFC](v4, 0x10E0C40FDDF1BE6);
  }
  v8 = *(_QWORD *)(v2 + 144);
  *(_QWORD *)(v2 + 144) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (*(_BYTE *)(v2 + 136))
    sub_1C98EDDC4((_QWORD *)(v2 + 128));
  v9 = *(void ***)(v2 + 120);
  *(_QWORD *)(v2 + 120) = 0;
  if (v9)
  {
    v10 = (char *)*v9;
    if (*v9)
    {
      v11 = (char *)v9[1];
      v12 = *v9;
      if (v11 != v10)
      {
        do
        {
          v13 = (std::__shared_weak_count *)*((_QWORD *)v11 - 1);
          if (v13)
          {
            v14 = (unint64_t *)&v13->__shared_owners_;
            do
              v15 = __ldaxr(v14);
            while (__stlxr(v15 - 1, v14));
            if (!v15)
            {
              ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
              std::__shared_weak_count::__release_weak(v13);
            }
          }
          v11 -= 16;
        }
        while (v11 != v10);
        v12 = *v9;
      }
      v9[1] = v10;
      operator delete(v12);
    }
    MEMORY[0x1CAA44AFC](v9, 0x20C40960023A9);
  }
  v16 = *(_QWORD *)(v2 + 96);
  if (v16)
  {
    v17 = *(_QWORD *)(v2 + 104);
    v18 = *(void **)(v2 + 96);
    if (v17 != v16)
    {
      do
      {
        v19 = *(void **)(v17 - 8);
        if (v19)
        {
          free(v19);
          *(_QWORD *)(v17 - 8) = 0;
        }
        v17 -= 32;
      }
      while (v17 != v16);
      v18 = *(void **)(v2 + 96);
    }
    *(_QWORD *)(v2 + 104) = v16;
    operator delete(v18);
  }
  v20 = *(std::__shared_weak_count **)(v2 + 40);
  if (!v20)
    goto LABEL_40;
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    v23 = *(std::__shared_weak_count **)(v2 + 24);
    if (v23)
      goto LABEL_41;
  }
  else
  {
LABEL_40:
    v23 = *(std::__shared_weak_count **)(v2 + 24);
    if (v23)
    {
LABEL_41:
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
  }
  v26 = *(_QWORD *)(v2 + 8);
  *(_QWORD *)(v2 + 8) = 0;
  if (v26)
  {
    if (*(char *)(v26 + 47) < 0)
      operator delete(*(void **)(v26 + 24));
    MEMORY[0x1CAA44AFC](v26, 0x1012C409C40065ELL);
  }
  MEMORY[0x1CAA44AFC](v2, 0x10E2C40ACF00C74);
  return a1;
}

uint64_t sub_1C98B8C08(std::__shared_weak_count *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unsigned __int8 v6;
  unint64_t v7;
  NSObject *v8;
  unsigned __int8 *p_mut;
  unsigned __int8 v10;
  std::__shared_weak_count *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned __int8 v14;
  std::__shared_weak_count *v15;
  unsigned __int8 v16;
  NSObject *v17;
  int v18;
  unsigned __int8 v19;
  NSObject *v20;
  const char *v21;
  unsigned __int8 v22;
  unsigned int v23;
  uint64_t v24;
  const __CFString *Object;
  CFTypeID v26;
  unsigned __int8 v27;
  uint64_t v28;
  const char *CStringPtr;
  const char *v30;
  NSObject *v31;
  int v32;
  unsigned __int8 v33;
  uint64_t v34;
  uint32_t v35;
  unsigned __int8 v36;
  uint64_t v37;
  unsigned int v38;
  unsigned __int8 v39;
  NSObject *v40;
  float v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  float v45;
  float v46;
  unsigned __int8 v47;
  NSObject *v48;
  float v49;
  float v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  float v54;
  unsigned __int8 v55;
  NSObject *v56;
  float v57;
  char v58;
  char v59;
  char v60;
  char v61;
  char v62;
  char v63;
  char v64;
  char v65;
  int v66;
  float v67;
  float v68;
  char v69;
  unsigned __int8 v70;
  char v71;
  void *v72;
  uint8_t *v73;
  size_t v74;
  uint64_t shared_owners;
  uint64_t v76;
  uint64_t v77;
  unsigned __int8 v78;
  NSObject *v79;
  std::__shared_weak_count_vtbl *v80;
  std::__shared_weak_count_vtbl *v81;
  uint64_t v82;
  uint64_t v83;
  unsigned __int8 v84;
  NSObject *v85;
  unsigned __int8 v86;
  NSObject *v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  unsigned __int8 v92;
  NSObject *v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  int v99;
  _QWORD *v100;
  unint64_t *v101;
  unint64_t v102;
  _QWORD *v103;
  uint64_t *v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  NSObject *v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  std::__assoc_sub_state *shared_weak_owners;
  unsigned int state;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  unint64_t *v133;
  unint64_t v134;
  unint64_t v135;
  _QWORD *v136;
  uint8_t *v137;
  uint8_t *v138;
  unint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t *v145;
  unint64_t v146;
  __int128 *p_dst;
  uint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  unsigned __int8 v155;
  NSObject *v156;
  std::__shared_weak_count *v157;
  uint64_t v158;
  std::__shared_weak_count *v159;
  uint64_t v160;
  unint64_t *v161;
  unint64_t v162;
  __n128 v163;
  _QWORD *v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  unint64_t *v171;
  unint64_t v172;
  int v173;
  int v174;
  unsigned __int8 v175;
  NSObject *v176;
  uint64_t v177;
  unint64_t *v178;
  unint64_t v179;
  unint64_t *v180;
  unint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  _QWORD *v185;
  uint64_t *v186;
  std::__shared_weak_count *v187;
  uint64_t v188;
  unint64_t *v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t *v193;
  unint64_t v194;
  unint64_t v195;
  unint64_t v196;
  std::__shared_weak_count *v197;
  uint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  uint64_t v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  _QWORD *v205;
  char *v206;
  uint64_t v207;
  unint64_t v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  unint64_t v212;
  char v213;
  unsigned __int8 v214;
  NSObject *v215;
  unint64_t *v216;
  unint64_t v217;
  std::__shared_weak_count *v218;
  unint64_t *v219;
  unint64_t v220;
  unint64_t *v221;
  unint64_t v222;
  unint64_t *v223;
  unint64_t v224;
  uint64_t v225;
  _QWORD *v226;
  uint64_t v227;
  unint64_t *v228;
  unint64_t v229;
  uint64_t v230;
  unsigned __int8 v231;
  NSObject *v232;
  int v233;
  unint64_t *v234;
  unint64_t v235;
  __int128 v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  uint64_t (***v246)(_QWORD);
  unsigned __int8 v247;
  NSObject *v248;
  std::__shared_weak_count *v249;
  unsigned __int8 v250;
  unsigned __int8 v251;
  const char *v252;
  size_t v253;
  size_t v254;
  __int128 *v255;
  NSObject *v256;
  unsigned __int8 v257;
  NSObject *v258;
  unsigned __int8 v259;
  NSObject *v260;
  std::__shared_weak_count *v261;
  unint64_t *v262;
  unint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  char v267;
  unsigned __int8 v268;
  NSObject *v269;
  __int128 *v270;
  uint64_t v276;
  const void **v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  int v282;
  unsigned __int8 *v283;
  unsigned __int8 *v284;
  unsigned __int8 v285;
  NSObject *v286;
  int v287;
  unsigned __int8 v288;
  NSObject *v289;
  unsigned __int8 v290;
  unsigned __int8 v291;
  __int128 *v292;
  unsigned __int8 v293;
  NSObject *v294;
  unsigned __int8 v295;
  std::__shared_weak_count *v296;
  unint64_t *v297;
  unint64_t v298;
  std::__shared_weak_count *v299;
  unint64_t *v300;
  unint64_t v301;
  uint64_t *v303;
  __int128 *v304;
  __int128 *v305;
  __int128 *v306;
  uint64_t v307;
  __int128 *v308;
  __int128 *v309;
  __int128 *v310;
  uint64_t v311;
  int v312;
  _QWORD *v313;
  uint64_t *v314;
  _QWORD *v317;
  std::__shared_weak_count *v318;
  __int128 v319;
  uint64_t v320;
  __int128 v321;
  __int128 v322;
  uint64_t *v323;
  __int128 v324;
  __int128 v325;
  uint64_t v326;
  void *__p[2];
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  std::__shared_weak_count *v331;
  char v332;
  _QWORD v333[3];
  _QWORD *v334;
  _BYTE v335[40];
  uint64_t *v336;
  __int128 __dst;
  int64_t v338;
  __int128 *v339;
  uint8_t buf[16];
  uint64_t v341;
  uint8_t *v342;
  char v343;
  char v344;
  std::__shared_weak_count *v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t (**v349)();
  uint64_t v350;
  int v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  int v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  int v360;
  int v361;
  uint64_t v362;
  int v363;
  __int128 v364;
  __int128 v365;
  uint64_t (**v366)();
  uint64_t v367;
  int v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  int v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  int v377;
  int v378;
  uint64_t v379;
  int v380;
  __int128 v381;
  __int128 v382;
  uint64_t (**v383)();
  uint64_t v384;
  int v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  int v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  int v394;
  int v395;
  uint64_t v396;
  int v397;
  __int128 v398;
  __int128 v399;
  __int128 v400;
  __int128 v401;
  __int128 v402;
  __int128 v403;
  __int128 v404;
  __int128 v405;
  __int128 v406;
  __int128 v407;
  __int128 v408;
  __int128 v409;
  __int128 v410;
  __int128 v411;
  __int128 v412;
  __int128 v413;
  __int128 v414;
  __int128 v415;
  __int128 v416;
  __int128 v417;
  char v418;
  char v419;
  char v420;
  char v421;
  __int128 v422;
  __int128 v423;
  __int128 v424;
  __int128 v425;
  uint64_t v426;

  v426 = *MEMORY[0x1E0C80C00];
  v329 = 0;
  v6 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
  v7 = 0x1ED52A000uLL;
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
  {
    qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
    __cxa_guard_release(&qword_1ED52ACD0);
  }
  v318 = a1;
  v8 = (id)qword_1ED52ACE0;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C9870000, v8, OS_LOG_TYPE_INFO, "Initializing FaceKitProcessor.", buf, 2u);
  }

  kdebug_trace();
  std::mutex::lock(&stru_1ED52AC78);
  p_mut = (unsigned __int8 *)&qword_1ED52ACD8;
  v10 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
  if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
  {
    sub_1C98CFF14();
    __cxa_guard_release(&qword_1ED52ACD8);
  }
  sub_1C98D00C8();
  v11 = a1;
  v12 = (unsigned __int8 *)&qword_1ED52ACD0;
  sub_1C98EF554();
  v13 = operator new();
  sub_1C98A878C(v13);
  v14 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
  if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
  {
    sub_1C98CFF14();
    __cxa_guard_release(&qword_1ED52ACD8);
    v11 = a1;
  }
  v15 = (std::__shared_weak_count *)v335;
  if (*(_BYTE *)(qword_1ED52ACB8 + 107))
  {
    v16 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
    if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
    {
      qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
      __cxa_guard_release(&qword_1ED52ACD0);
    }
    v17 = qword_1ED52ACE0;
    if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1C9870000, v17, OS_LOG_TYPE_DEFAULT, "Force-enabling recognition!", buf, 2u);
    }
    LOBYTE(v18) = 1;
  }
  else if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)a2, CFSTR("use_recognition")))
  {
    cva::DictionaryHandler::item((cva::DictionaryHandler *)a2, CFSTR("use_recognition"));
    v18 = cva::ItemHandler::getValue<BOOL>();
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
    v19 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
    if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
    {
      qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
      __cxa_guard_release(&qword_1ED52ACD0);
    }
    v20 = qword_1ED52ACE0;
    if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_INFO))
    {
      v21 = "disabled";
      if (v18)
        v21 = "enabled";
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v21;
      _os_log_impl(&dword_1C9870000, v20, OS_LOG_TYPE_INFO, "Recognition %s by client.", buf, 0xCu);
    }
  }
  else
  {
    v22 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
    if ((v22 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
    {
      sub_1C98CFF14();
      __cxa_guard_release(&qword_1ED52ACD8);
      v11 = v318;
      v15 = (std::__shared_weak_count *)v335;
    }
    LOBYTE(v18) = *(_BYTE *)(qword_1ED52ACB8 + 106) != 0;
  }
  *(_BYTE *)(v13 + 1) = v18;
  if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)a2, CFSTR("num_tracked_faces")))
  {
    cva::DictionaryHandler::item((cva::DictionaryHandler *)a2, CFSTR("num_tracked_faces"));
    v23 = cva::ItemHandler::getValue<int>();
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
    v24 = v23 | 0x100000000;
  }
  else
  {
    v24 = 0;
  }
  *(_QWORD *)buf = v24;
  *(_DWORD *)(v13 + 12) = sub_1C98A9520((unsigned int *)buf);
  if (!cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)a2, CFSTR("depth_source")))
  {
    v32 = 1;
    goto LABEL_38;
  }
  cva::DictionaryHandler::item((cva::DictionaryHandler *)a2, CFSTR("depth_source"));
  Object = (const __CFString *)cva::ItemHandler::getObject((cva::ItemHandler *)buf);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
  if (!Object)
  {
    v33 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
    if ((v33 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
    {
      qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
      __cxa_guard_release(&qword_1ED52ACD0);
    }
    v34 = qword_1ED52ACE0;
    if (!os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_ERROR))
      goto LABEL_37;
    *(_WORD *)buf = 0;
    v30 = "Invalid value for kCVAFaceTracking_DepthSource:null";
    v31 = v34;
    v35 = 2;
    goto LABEL_449;
  }
  v26 = CFGetTypeID(Object);
  if (v26 != CFStringGetTypeID())
  {
    v36 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
    if ((v36 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
    {
      qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
      __cxa_guard_release(&qword_1ED52ACD0);
    }
    v37 = qword_1ED52ACE0;
    if (!os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_ERROR))
      goto LABEL_37;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = v26;
    v30 = "Invalid type for kCVAFaceTracking_DepthSource:%lu";
    v31 = v37;
LABEL_448:
    v35 = 12;
LABEL_449:
    _os_log_error_impl(&dword_1C9870000, v31, OS_LOG_TYPE_ERROR, v30, buf, v35);
LABEL_37:
    v32 = 0;
    goto LABEL_38;
  }
  if (CFStringCompare(Object, CFSTR("depth_source_pearl"), 0))
  {
    if (CFStringCompare(Object, CFSTR("depth_source_smpraw"), 0))
    {
      v27 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
      if ((v27 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
      {
        qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
        __cxa_guard_release(&qword_1ED52ACD0);
      }
      v28 = qword_1ED52ACE0;
      if (!os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_ERROR))
        goto LABEL_37;
      CStringPtr = CFStringGetCStringPtr(Object, 0x8000100u);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = CStringPtr;
      v30 = "Unsupported depth source: %s";
      v31 = v28;
      goto LABEL_448;
    }
    v32 = 3;
  }
  else
  {
    v32 = 2;
  }
LABEL_38:
  *(_DWORD *)(v13 + 52) = v32;
  if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)a2, CFSTR("force_max_pyramid_levels")))
  {
    cva::DictionaryHandler::item((cva::DictionaryHandler *)a2, CFSTR("force_max_pyramid_levels"));
    v38 = cva::ItemHandler::getValue<int>();
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
    if (v38 < 3)
      goto LABEL_44;
    v39 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
    if ((v39 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
    {
      qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
      __cxa_guard_release(&qword_1ED52ACD0);
    }
    v40 = qword_1ED52ACE0;
    if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v38;
      _os_log_error_impl(&dword_1C9870000, v40, OS_LOG_TYPE_ERROR, "Invalid pyramid behavior %d", buf, 8u);
    }
  }
  v38 = 0;
LABEL_44:
  *(_DWORD *)(v13 + 48) = v38;
  v41 = *(float *)(v13 + 56);
  if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)a2, CFSTR("network_failure_threshold_multiplier")))
  {
    cva::DictionaryHandler::item((cva::DictionaryHandler *)a2, CFSTR("network_failure_threshold_multiplier"));
    cva::ItemHandler::getValue<float>();
    v43 = v42;
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
    v44 = v43 | 0x100000000;
  }
  else
  {
    v44 = 0;
  }
  v45 = *(float *)&v44;
  if ((v44 & 0x100000000) == 0)
    v45 = 1.0;
  v46 = v41 * v45;
  if ((float)(v41 * v45) <= 1.0 && v46 >= 0.0)
    goto LABEL_59;
  v47 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
  if ((v47 & 1) == 0)
    goto LABEL_530;
  while (1)
  {
    v48 = *(NSObject **)(v7 + 3296);
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(double *)((char *)&v15[3].__shared_owners_ + 4) = v46;
      _os_log_impl(&dword_1C9870000, v48, OS_LOG_TYPE_DEFAULT, "Clamping failure threshold %f to [0,1]", buf, 0xCu);
    }
    v49 = 1.0;
    if (v46 <= 1.0)
      v49 = v46;
    if (v46 >= 0.0)
      v46 = v49;
    else
      v46 = 0.0;
LABEL_59:
    *(float *)(v13 + 60) = v46;
    v50 = *(float *)(v13 + 64);
    if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)a2, CFSTR("failure_fov_modifier")))
    {
      cva::DictionaryHandler::item((cva::DictionaryHandler *)a2, CFSTR("failure_fov_modifier"));
      cva::ItemHandler::getValue<float>();
      v52 = v51;
      cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
      v53 = v52 | 0x100000000;
    }
    else
    {
      v53 = 0;
    }
    if ((v53 & 0x100000000) != 0)
      v54 = *(float *)&v53;
    else
      v54 = 0.0;
    v46 = (float)(v54 * 0.5) + (float)(v50 * (float)(1.0 - v54));
    if (v46 > 0.5 || v46 < 0.0)
    {
      v55 = atomic_load(v12);
      if ((v55 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
      {
        *(_QWORD *)(v7 + 3296) = os_log_create("com.apple.AppleCVA", "FaceKit");
        __cxa_guard_release(&qword_1ED52ACD0);
      }
      v56 = *(NSObject **)(v7 + 3296);
      if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134218240;
        *(double *)((char *)&v15[3].__shared_owners_ + 4) = v46;
        *(_WORD *)&buf[12] = 2048;
        *(double *)((char *)&v15[3].__shared_weak_owners_ + 6) = v54;
        _os_log_impl(&dword_1C9870000, v56, OS_LOG_TYPE_DEFAULT, "Clamping bounding box tolerance %f to [0, 0.5] (modifier %f)", buf, 0x16u);
      }
      v57 = 0.5;
      if (v46 <= 0.5)
        v57 = (float)(v54 * 0.5) + (float)(v50 * (float)(1.0 - v54));
      if (v46 >= 0.0)
        v46 = v57;
      else
        v46 = 0.0;
    }
    *(float *)(v13 + 68) = v46;
    if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)a2, CFSTR("rgb_only")))
    {
      cva::DictionaryHandler::item((cva::DictionaryHandler *)a2, CFSTR("rgb_only"));
      v58 = cva::ItemHandler::getValue<BOOL>();
      cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
      *(_BYTE *)v13 = v58;
    }
    if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)a2, CFSTR("force_cpu")))
    {
      cva::DictionaryHandler::item((cva::DictionaryHandler *)a2, CFSTR("force_cpu"));
      v59 = cva::ItemHandler::getValue<BOOL>();
      cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
      *(_BYTE *)(v13 + 2) = v59;
    }
    if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)a2, CFSTR("use_tongue")))
    {
      cva::DictionaryHandler::item((cva::DictionaryHandler *)a2, CFSTR("use_tongue"));
      v60 = cva::ItemHandler::getValue<BOOL>();
      cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
      *(_BYTE *)(v13 + 3) = v60;
    }
    if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)a2, CFSTR("robust_tongue")))
    {
      cva::DictionaryHandler::item((cva::DictionaryHandler *)a2, CFSTR("robust_tongue"));
      v61 = cva::ItemHandler::getValue<BOOL>();
      cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
      *(_BYTE *)(v13 + 4) = v61;
    }
    if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)a2, CFSTR("deterministic")))
    {
      cva::DictionaryHandler::item((cva::DictionaryHandler *)a2, CFSTR("deterministic"));
      v62 = cva::ItemHandler::getValue<BOOL>();
      cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
      *(_BYTE *)(v13 + 5) = v62;
    }
    if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)a2, CFSTR("add_keypoints")))
    {
      cva::DictionaryHandler::item((cva::DictionaryHandler *)a2, CFSTR("add_keypoints"));
      v63 = cva::ItemHandler::getValue<BOOL>();
      cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
      *(_BYTE *)(v13 + 7) = v63;
    }
    if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)a2, CFSTR("refine_pose")))
    {
      cva::DictionaryHandler::item((cva::DictionaryHandler *)a2, CFSTR("refine_pose"));
      v64 = cva::ItemHandler::getValue<BOOL>();
      cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
      *(_BYTE *)(v13 + 8) = v64;
    }
    if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)a2, CFSTR("e_u")))
    {
      cva::DictionaryHandler::item((cva::DictionaryHandler *)a2, CFSTR("e_u"));
      v65 = cva::ItemHandler::getValue<BOOL>();
      cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
      *(_BYTE *)(v13 + 9) = v65;
    }
    if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)a2, CFSTR("recognition_update_period")))
    {
      cva::DictionaryHandler::item((cva::DictionaryHandler *)a2, CFSTR("recognition_update_period"));
      v66 = cva::ItemHandler::getValue<int>();
      cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
      *(_DWORD *)(v13 + 16) = v66;
    }
    if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)a2, CFSTR("max_angle_degrees")))
    {
      cva::DictionaryHandler::item((cva::DictionaryHandler *)a2, CFSTR("max_angle_degrees"));
      cva::ItemHandler::getValue<float>();
      v46 = v67;
      cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
      *(float *)(v13 + 140) = v46;
    }
    if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)a2, CFSTR("recognition_max_angle_degrees")))
    {
      cva::DictionaryHandler::item((cva::DictionaryHandler *)a2, CFSTR("recognition_max_angle_degrees"));
      cva::ItemHandler::getValue<float>();
      v46 = v68;
      cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
      *(float *)(v13 + 116) = v46;
    }
    if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)a2, CFSTR("use_face_detector")))
    {
      cva::DictionaryHandler::item((cva::DictionaryHandler *)a2, CFSTR("use_face_detector"));
      v69 = cva::ItemHandler::getValue<BOOL>();
      cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
      *(_BYTE *)(v13 + 6) = v69;
    }
    v70 = atomic_load(p_mut);
    if ((v70 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
    {
      sub_1C98CFF14();
      __cxa_guard_release(&qword_1ED52ACD8);
      v11 = v318;
    }
    if (*(_BYTE *)(qword_1ED52ACB8 + 104)
      && cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)a2, CFSTR("custom_resource_dir")))
    {
      cva::DictionaryHandler::item((cva::DictionaryHandler *)a2, CFSTR("custom_resource_dir"));
      cva::ItemHandler::getValue<std::string>();
      *(_OWORD *)buf = *(_OWORD *)v335;
      v341 = *(_QWORD *)&v335[16];
      memset(v335, 0, 24);
      cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v320);
      LOBYTE(v342) = 1;
      v71 = HIBYTE(v341);
      if (*(char *)(v13 + 47) < 0)
      {
        v72 = *(void **)buf;
        if (v341 >= 0)
          v73 = buf;
        else
          v73 = *(uint8_t **)buf;
        if (v341 >= 0)
          v74 = HIBYTE(v341);
        else
          v74 = *(_QWORD *)&buf[8];
        sub_1C98A976C((void **)(v13 + 24), v73, v74);
        if ((v71 & 0x80) == 0)
          goto LABEL_115;
      }
      else
      {
        if ((v341 & 0x8000000000000000) == 0)
        {
          *(_OWORD *)(v13 + 24) = *(_OWORD *)buf;
          *(_QWORD *)(v13 + 40) = v341;
          goto LABEL_115;
        }
        v72 = *(void **)buf;
        sub_1C98A96AC((_QWORD *)(v13 + 24), *(void **)buf, *(size_t *)&buf[8]);
      }
      operator delete(v72);
    }
LABEL_115:
    shared_owners = v11->__shared_owners_;
    v11->__shared_owners_ = v13;
    if (shared_owners)
    {
      if (*(char *)(shared_owners + 47) < 0)
        operator delete(*(void **)(shared_owners + 24));
      MEMORY[0x1CAA44AFC](shared_owners, 0x1012C409C40065ELL);
      v13 = v11->__shared_owners_;
      if (!v13)
        goto LABEL_485;
    }
    sub_1C98A895C((unsigned __int8 *)v13);
    v76 = v11->__shared_owners_;
    if (*(char *)(v76 + 47) < 0)
    {
      sub_1C987D148(buf, *(void **)(v76 + 24), *(_QWORD *)(v76 + 32));
    }
    else
    {
      *(_OWORD *)buf = *(_OWORD *)(v76 + 24);
      v341 = *(_QWORD *)(v76 + 40);
    }
    if (SHIBYTE(v341) < 0)
    {
      v83 = *(_QWORD *)&buf[8];
      operator delete(*(void **)buf);
      if (!v83)
      {
LABEL_135:
        v84 = atomic_load(v12);
        if ((v84 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
        {
          *(_QWORD *)(v7 + 3296) = os_log_create("com.apple.AppleCVA", "FaceKit");
          __cxa_guard_release(&qword_1ED52ACD0);
        }
        v85 = *(id *)(v7 + 3296);
        if (os_log_type_enabled(v85, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_1C9870000, v85, OS_LOG_TYPE_ERROR, "cannot find resources.", buf, 2u);
        }

        goto LABEL_485;
      }
    }
    else if (!HIBYTE(v341))
    {
      goto LABEL_135;
    }
    if (LOBYTE(v11[5].__shared_weak_owners_))
    {
      sub_1C98EDDC4(&v11[5].__shared_owners_);
      LOBYTE(v11[5].__shared_weak_owners_) = 0;
    }
    v77 = operator new();
    *(_QWORD *)(v77 + 80) = 0;
    *(_OWORD *)(v77 + 48) = 0u;
    *(_OWORD *)(v77 + 64) = 0u;
    *(_OWORD *)(v77 + 16) = 0u;
    *(_OWORD *)(v77 + 32) = 0u;
    *(_OWORD *)v77 = 0u;
    v11[5].__shared_owners_ = v77;
    LOBYTE(v11[5].__shared_weak_owners_) = 1;
    if (*(_BYTE *)(v11->__shared_owners_ + 6))
    {
      v78 = atomic_load(v12);
      if ((v78 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
      {
        *(_QWORD *)(v7 + 3296) = os_log_create("com.apple.AppleCVA", "FaceKit");
        __cxa_guard_release(&qword_1ED52ACD0);
      }
      v79 = *(id *)(v7 + 3296);
      if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1C9870000, v79, OS_LOG_TYPE_DEFAULT, "Running with FaceKit face detection. All passed face detections are ignored.", buf, 2u);
      }

      v80 = (std::__shared_weak_count_vtbl *)operator new();
      v80->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&off_1E8294A88;
      v11 = v318;
      v81 = v318[6].__vftable;
      v318[6].__vftable = v80;
      if (v81)
        (*((void (**)(std::__shared_weak_count_vtbl *))v81->~__shared_weak_count + 1))(v81);
    }
    v82 = v11->__shared_owners_;
    if (*(char *)(v82 + 47) < 0)
    {
      sub_1C987D148(&v325, *(void **)(v82 + 24), *(_QWORD *)(v82 + 32));
    }
    else
    {
      v325 = *(_OWORD *)(v82 + 24);
      v326 = *(_QWORD *)(v82 + 40);
    }
    *(_OWORD *)__p = v325;
    v328 = v326;
    v326 = 0;
    v325 = 0uLL;
    v86 = atomic_load(v12);
    if ((v86 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
    {
      *(_QWORD *)(v7 + 3296) = os_log_create("com.apple.AppleCVA", "FaceKit");
      __cxa_guard_release(&qword_1ED52ACD0);
    }
    v87 = *(id *)(v7 + 3296);
    if (os_log_type_enabled(v87, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1C9870000, v87, OS_LOG_TYPE_INFO, "Loading tensor.", buf, 2u);
    }

    v324 = 0uLL;
    HIBYTE(v341) = 10;
    strcpy((char *)buf, "tensor.bin");
    sub_1C98B4EB0(v335);
    if (SHIBYTE(v341) < 0)
      operator delete(*(void **)buf);
    if (*(_QWORD *)v335)
    {
      sub_1C990C5A4((uint64_t *)buf, *(uint64_t *)v335, (char)"I/O device", *(unsigned __int8 *)(v318->__shared_owners_ + 7), 0);
      v324 = *(_OWORD *)buf;
    }
    v88 = *(std::__shared_weak_count **)&v335[8];
    if (*(_QWORD *)&v335[8])
    {
      v89 = (unint64_t *)(*(_QWORD *)&v335[8] + 8);
      do
        v90 = __ldaxr(v89);
      while (__stlxr(v90 - 1, v89));
      if (!v90)
      {
        ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
        std::__shared_weak_count::__release_weak(v88);
      }
    }
    v91 = v324;
    v92 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
    if (!v91)
      break;
    if ((v92 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
    {
      *(_QWORD *)(v7 + 3296) = os_log_create("com.apple.AppleCVA", "FaceKit");
      __cxa_guard_release(&qword_1ED52ACD0);
    }
    v93 = *(id *)(v7 + 3296);
    if (os_log_type_enabled(v93, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1C9870000, v93, OS_LOG_TYPE_INFO, "Start initializing identity fitting.", buf, 2u);
    }

    v94 = v318->__shared_owners_;
    v95 = v324;
    v320 = v94;
    v321 = v324;
    v96 = v94;
    if (*((_QWORD *)&v324 + 1))
    {
      v97 = (unint64_t *)(*((_QWORD *)&v324 + 1) + 8);
      do
        v98 = __ldxr(v97);
      while (__stxr(v98 + 1, v97));
      v96 = v318->__shared_owners_;
    }
    *(_QWORD *)&v322 = __p;
    *((_QWORD *)&v322 + 1) = a4;
    v323 = &v329;
    v99 = *(unsigned __int8 *)(v96 + 5);
    v100 = operator new(0x20uLL);
    v100[1] = 0;
    v100[2] = 0;
    *v100 = &off_1E82946F8;
    *(_QWORD *)v335 = v94;
    *(_OWORD *)&v335[8] = v95;
    if (*((_QWORD *)&v95 + 1))
    {
      v101 = (unint64_t *)(*((_QWORD *)&v95 + 1) + 8);
      do
        v102 = __ldxr(v101);
      while (__stxr(v102 + 1, v101));
    }
    *(_OWORD *)&v335[24] = v322;
    v336 = v323;
    v339 = 0;
    v103 = operator new(0x38uLL);
    v313 = v100;
    v104 = v100 + 3;
    *v103 = &off_1E8294210;
    v103[1] = v94;
    *((_OWORD *)v103 + 1) = v95;
    *(_QWORD *)&v335[8] = 0;
    *(_QWORD *)&v335[16] = 0;
    *((_OWORD *)v103 + 2) = v322;
    v103[6] = v323;
    v339 = (__int128 *)v103;
    v13 = a3[1];
    v311 = *a3;
    if (v13)
    {
      v105 = (unint64_t *)(v13 + 8);
      do
        v106 = __ldxr(v105);
      while (__stxr(v106 + 1, v105));
    }
    v107 = operator new();
    *(_DWORD *)v107 = 0;
    *(_QWORD *)(v107 + 16) = 0;
    *(_QWORD *)(v107 + 24) = 0;
    *(_QWORD *)(v107 + 8) = 0xFFEFFFFFFFFFFFFFLL;
    *(_QWORD *)(v107 + 64) = 0;
    *(_QWORD *)(v107 + 72) = 0;
    *(_QWORD *)(v107 + 56) = 0;
    v312 = v99;
    *(_BYTE *)(v107 + 80) = v99;
    *v104 = v107;
    LOBYTE(v330) = 0;
    v332 = 0;
    sub_1C98B32BC((uint64_t)buf, &v330, 0);
    v11 = (std::__shared_weak_count *)operator new(0x28uLL);
    v11->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    v11->__shared_weak_owners_ = 0;
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295C28;
    v109 = v11 + 1;
    sub_1C9920390(&v11[1].__vftable, 1, (uint64_t)buf);
    if ((_BYTE)v346)
    {
      v110 = v345;
      if (v345)
      {
        v111 = (unint64_t *)&v345->__shared_owners_;
        do
          v112 = __ldaxr(v111);
        while (__stlxr(v112 - 1, v111));
        if (!v112)
        {
          ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
          std::__shared_weak_count::__release_weak(v110);
        }
      }
    }
    if (SHIBYTE(v341) < 0)
      operator delete(*(void **)buf);
    if (v332)
    {
      v113 = v331;
      if (v331)
      {
        v114 = (unint64_t *)&v331->__shared_owners_;
        do
          v115 = __ldaxr(v114);
        while (__stlxr(v115 - 1, v114));
        if (!v115)
        {
          ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
          std::__shared_weak_count::__release_weak(v113);
        }
      }
    }
    v116 = *v104;
    do
      v117 = __ldxr(p_shared_owners);
    while (__stxr(v117 + 1, p_shared_owners));
    v118 = *(std::__shared_weak_count **)(v116 + 72);
    *(_QWORD *)(v116 + 64) = v109;
    *(_QWORD *)(v116 + 72) = v11;
    if (v118)
    {
      v119 = (unint64_t *)&v118->__shared_owners_;
      do
        v120 = __ldaxr(v119);
      while (__stlxr(v120 - 1, v119));
      if (!v120)
      {
        ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
        std::__shared_weak_count::__release_weak(v118);
      }
    }
    v15 = (std::__shared_weak_count *)operator new(0x48uLL);
    v15->__shared_owners_ = 0;
    v12 = (unsigned __int8 *)&v15->__shared_owners_;
    v15->__shared_weak_owners_ = 0;
    v15->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295B48;
    v15[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E8294D88;
    v7 = (unint64_t)&v15[1];
    v314 = v104;
    if (v339)
    {
      if (v339 == &__dst)
      {
        v15[2].__shared_owners_ = (uint64_t)&v15[1].__shared_owners_;
        (*(void (**)(__int128 *))(__dst + 24))(&__dst);
      }
      else
      {
        v15[2].__shared_owners_ = (*(uint64_t (**)(void))(*(_QWORD *)v339 + 16))();
      }
    }
    else
    {
      v15[2].__shared_owners_ = 0;
    }
    a2 = 1018212795;
    v122 = operator new();
    *(_QWORD *)(v122 + 16) = 0;
    *(_QWORD *)(v122 + 24) = 850045863;
    *(_OWORD *)(v122 + 32) = 0u;
    *(_OWORD *)(v122 + 48) = 0u;
    *(_OWORD *)(v122 + 64) = 0u;
    *(_QWORD *)(v122 + 80) = 0;
    *(_QWORD *)(v122 + 88) = 1018212795;
    *(_OWORD *)(v122 + 96) = 0u;
    *(_OWORD *)(v122 + 112) = 0u;
    *(_OWORD *)(v122 + 124) = 0u;
    *(_QWORD *)v122 = &off_1E8294360;
    *(_QWORD *)(v122 + 8) = 0;
    v15[2].__shared_weak_owners_ = v122;
    *(_QWORD *)buf = v15 + 1;
    *(_QWORD *)&buf[8] = v15;
    do
      v123 = __ldxr((unint64_t *)v12);
    while (__stxr(v123 + 1, (unint64_t *)v12));
    ((void (*)(std::__shared_weak_count *, uint8_t *))v109->__on_zero_shared)(v109, buf);
    p_mut = *(unsigned __int8 **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v124 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v125 = __ldaxr(v124);
      while (__stlxr(v125 - 1, v124));
      if (!v125)
      {
        (*(void (**)(unsigned __int8 *))(*(_QWORD *)p_mut + 16))(p_mut);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)p_mut);
      }
    }
    shared_weak_owners = (std::__assoc_sub_state *)v15[2].__shared_weak_owners_;
    if (shared_weak_owners)
    {
      p_mut = (unsigned __int8 *)&shared_weak_owners->__mut_;
      std::mutex::lock(&shared_weak_owners->__mut_);
      state = shared_weak_owners->__state_;
      if ((state & 2) == 0)
      {
        v128 = (unint64_t *)&shared_weak_owners->__shared_owners_;
        do
          v129 = __ldxr(v128);
        while (__stxr(v129 + 1, v128));
        shared_weak_owners->__state_ = state | 2;
        std::mutex::unlock(&shared_weak_owners->__mut_);
        v130 = (std::__shared_weak_count *)operator new(0x20uLL);
        v130->__shared_owners_ = 0;
        v131 = (unint64_t *)&v130->__shared_owners_;
        v130->__shared_weak_owners_ = 0;
        v130->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8294390;
        v130[1].__vftable = (std::__shared_weak_count_vtbl *)shared_weak_owners;
        if (v312)
          std::__assoc_sub_state::wait(shared_weak_owners);
        do
          v132 = __ldxr(p_shared_owners);
        while (__stxr(v132 + 1, p_shared_owners));
        if (v13)
        {
          v133 = (unint64_t *)(v13 + 8);
          do
            v134 = __ldxr(v133);
          while (__stxr(v134 + 1, v133));
        }
        do
          v135 = __ldxr(v131);
        while (__stxr(v135 + 1, v131));
        v136 = (_QWORD *)(*v314 + 32);
        v137 = (uint8_t *)operator new(0x38uLL);
        *(_QWORD *)v137 = &off_1E8294548;
        *((_QWORD *)v137 + 1) = v109;
        *((_QWORD *)v137 + 2) = v11;
        *((_QWORD *)v137 + 3) = v311;
        *((_QWORD *)v137 + 4) = v13;
        *((_QWORD *)v137 + 5) = v130 + 1;
        *((_QWORD *)v137 + 6) = v130;
        v342 = v137;
        sub_1C98B3444(buf, v136);
        v138 = v342;
        if (v342 == buf)
        {
          v141 = 4;
          v138 = buf;
          v139 = 0x1ED52A000uLL;
          v140 = v313;
        }
        else
        {
          v139 = 0x1ED52A000;
          v140 = v313;
          if (!v342)
            goto LABEL_219;
          v141 = 5;
        }
        (*(void (**)(void))(*(_QWORD *)v138 + 8 * v141))();
        do
LABEL_219:
          v142 = __ldaxr(v131);
        while (__stlxr(v142 - 1, v131));
        if (!v142)
        {
          ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
          std::__shared_weak_count::__release_weak(v130);
        }
        do
          v143 = __ldaxr((unint64_t *)v12);
        while (__stlxr(v143 - 1, (unint64_t *)v12));
        if (!v143)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        do
          v144 = __ldaxr(p_shared_owners);
        while (__stlxr(v144 - 1, p_shared_owners));
        if (!v144)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
        if (v13)
        {
          v145 = (unint64_t *)(v13 + 8);
          do
            v146 = __ldaxr(v145);
          while (__stlxr(v146 - 1, v145));
          if (!v146)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v13);
          }
        }
        p_dst = v339;
        if (v339 == &__dst)
        {
          v148 = 4;
          p_dst = &__dst;
        }
        else
        {
          if (!v339)
          {
LABEL_238:
            v149 = *(std::__shared_weak_count **)&v335[16];
            if (*(_QWORD *)&v335[16])
            {
              v150 = (unint64_t *)(*(_QWORD *)&v335[16] + 8);
              do
                v151 = __ldaxr(v150);
              while (__stlxr(v151 - 1, v150));
              if (!v151)
              {
                ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
                std::__shared_weak_count::__release_weak(v149);
              }
            }
            v152 = (std::__shared_weak_count *)v318[1].__shared_weak_owners_;
            v318[1].__shared_owners_ = (uint64_t)v314;
            v318[1].__shared_weak_owners_ = (uint64_t)v140;
            if (v152)
            {
              v153 = (unint64_t *)&v152->__shared_owners_;
              do
                v154 = __ldaxr(v153);
              while (__stlxr(v154 - 1, v153));
              if (!v154)
              {
                ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
                std::__shared_weak_count::__release_weak(v152);
              }
            }
            v155 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
            if ((v155 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
            {
              *(_QWORD *)(v139 + 3296) = os_log_create("com.apple.AppleCVA", "FaceKit");
              __cxa_guard_release(&qword_1ED52ACD0);
            }
            v156 = *(id *)(v139 + 3296);
            if (os_log_type_enabled(v156, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_1C9870000, v156, OS_LOG_TYPE_INFO, "Initializing recognition.", buf, 2u);
            }

            v157 = v318;
            v158 = v318->__shared_owners_;
            v160 = *a3;
            v159 = (std::__shared_weak_count *)a3[1];
            if (v159)
            {
              v161 = (unint64_t *)&v159->__shared_owners_;
              do
                v162 = __ldxr(v161);
              while (__stxr(v162 + 1, v161));
            }
            v333[0] = &off_1E82954D0;
            v333[1] = sub_1C98ED804;
            v334 = v333;
            if (!*(_BYTE *)(v158 + 1))
            {
              v164 = (_QWORD *)operator new();
              *v164 = &off_1E8294C38;
              goto LABEL_343;
            }
            v163.n128_f64[0] = sub_1C98BC58C((uint64_t)v333, &__dst);
            v164 = (_QWORD *)__dst;
            if (!(_QWORD)__dst)
            {
              v197 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
              if (!*((_QWORD *)&__dst + 1))
                goto LABEL_343;
              goto LABEL_339;
            }
            v317 = (_QWORD *)operator new();
            *v317 = &off_1E8294BF8;
            v165 = operator new();
            v166 = operator new();
            *(_OWORD *)v166 = 0u;
            *(_OWORD *)(v166 + 16) = 0u;
            *(_QWORD *)v165 = v166;
            *(_DWORD *)(v166 + 24) = 250;
            v167 = (char *)operator new(0xFA0uLL);
            *(_QWORD *)v166 = v167;
            *(_QWORD *)(v166 + 8) = v167;
            *(_QWORD *)(v166 + 16) = v167 + 4000;
            *(_QWORD *)(v165 + 8) = 0;
            *(_QWORD *)(v165 + 16) = 0;
            *(_DWORD *)(v165 + 24) = 0;
            *(_QWORD *)(v165 + 40) = 0;
            *(_QWORD *)(v165 + 32) = v165 + 40;
            *(_QWORD *)(v165 + 56) = 0;
            *(_QWORD *)(v165 + 64) = 0;
            *(_QWORD *)(v165 + 48) = 0;
            v317[1] = v165;
            v168 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
            if (*((_QWORD *)&__dst + 1))
            {
              v169 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
              do
                v170 = __ldxr(v169);
              while (__stxr(v170 + 1, v169));
            }
            v330 = v160;
            v331 = v159;
            if (v159)
            {
              v171 = (unint64_t *)&v159->__shared_owners_;
              do
                v172 = __ldxr(v171);
              while (__stxr(v172 + 1, v171));
            }
            v173 = *(unsigned __int8 *)(v158 + 5);
            v174 = *(_DWORD *)(v158 + 16);
            v175 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
            if ((v175 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
            {
              *(_QWORD *)(v139 + 3296) = os_log_create("com.apple.AppleCVA", "FaceKit");
              __cxa_guard_release(&qword_1ED52ACD0);
            }
            v176 = *(id *)(v139 + 3296);
            if (os_log_type_enabled(v176, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 67109376;
              *(_DWORD *)&buf[4] = v174;
              *(_WORD *)&buf[8] = 1024;
              *(_DWORD *)&buf[10] = v173;
              _os_log_impl(&dword_1C9870000, v176, OS_LOG_TYPE_INFO, "Initializing RecognitionProcessor with recognitionUpdatePeriod:%d ms and synchronization:%d.", buf, 0xEu);
            }

            v177 = v317[1];
            *(_QWORD *)v335 = v164;
            *(_QWORD *)&v335[8] = v168;
            if (v168)
            {
              v178 = (unint64_t *)&v168->__shared_owners_;
              do
                v179 = __ldxr(v178);
              while (__stxr(v179 + 1, v178));
              v180 = (unint64_t *)&v168->__shared_owners_;
              do
                v181 = __ldxr(v180);
              while (__stxr(v181 + 1, v180));
            }
            v182 = *(std::__shared_weak_count **)(v177 + 64);
            *(_QWORD *)(v177 + 56) = v164;
            *(_QWORD *)(v177 + 64) = v168;
            if (v182)
            {
              v183 = (unint64_t *)&v182->__shared_owners_;
              do
                v184 = __ldaxr(v183);
              while (__stlxr(v184 - 1, v183));
              if (!v184)
              {
                ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
                std::__shared_weak_count::__release_weak(v182);
              }
            }
            *(_DWORD *)(v177 + 24) = v174;
            v185 = operator new(0x20uLL);
            v185[1] = 0;
            v185[2] = 0;
            *v185 = &off_1E8295A30;
            v186 = v185 + 3;
            v188 = *(_QWORD *)(v177 + 56);
            v187 = *(std::__shared_weak_count **)(v177 + 64);
            if (v187)
            {
              v189 = (unint64_t *)&v187->__shared_owners_;
              do
                v190 = __ldxr(v189);
              while (__stxr(v190 + 1, v189));
              v191 = operator new();
              v192 = v191;
              *(_QWORD *)buf = v188;
              *(_QWORD *)&buf[8] = v187;
              v193 = (unint64_t *)&v187->__shared_owners_;
              do
                v194 = __ldxr(v193);
              while (__stxr(v194 + 1, v193));
              sub_1C98B1FF8(v191, &v330, v173 != 0, buf);
              do
                v195 = __ldaxr(v193);
              while (__stlxr(v195 - 1, v193));
              if (!v195)
              {
                ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
                std::__shared_weak_count::__release_weak(v187);
              }
              *v186 = v192;
              do
                v196 = __ldaxr(v193);
              while (__stlxr(v196 - 1, v193));
              if (!v196)
              {
                ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
                std::__shared_weak_count::__release_weak(v187);
              }
            }
            else
            {
              v198 = operator new();
              *(_QWORD *)buf = v188;
              *(_QWORD *)&buf[8] = 0;
              *v186 = sub_1C98B1FF8(v198, &v330, v173 != 0, buf);
            }
            v199 = *(std::__shared_weak_count **)(v177 + 16);
            *(_QWORD *)(v177 + 8) = v186;
            *(_QWORD *)(v177 + 16) = v185;
            v139 = 0x1ED52A000uLL;
            if (!v199)
              goto LABEL_299;
            v200 = (unint64_t *)&v199->__shared_owners_;
            do
              v201 = __ldaxr(v200);
            while (__stlxr(v201 - 1, v200));
            if (!v201)
            {
              ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
              std::__shared_weak_count::__release_weak(v199);
            }
            v186 = *(uint64_t **)(v177 + 8);
            if (!v186)
            {
              v214 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
              if ((v214 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
              {
                qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
                __cxa_guard_release(&qword_1ED52ACD0);
              }
              v215 = (id)qword_1ED52ACE0;
              if (os_log_type_enabled(v215, OS_LOG_TYPE_INFO))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_1C9870000, v215, OS_LOG_TYPE_INFO, "FaceKitRecognitionProcessor initialization error due to failure to create a recognition thread.", buf, 2u);
              }

              v213 = 0;
              if (!v168)
              {
LABEL_325:
                v218 = v331;
                v157 = v318;
                if (v331)
                {
                  v219 = (unint64_t *)&v331->__shared_owners_;
                  do
                    v220 = __ldaxr(v219);
                  while (__stlxr(v220 - 1, v219));
                  if (!v220)
                  {
                    ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
                    std::__shared_weak_count::__release_weak(v218);
                  }
                }
                if (v168)
                {
                  v221 = (unint64_t *)&v168->__shared_owners_;
                  do
                    v222 = __ldaxr(v221);
                  while (__stlxr(v222 - 1, v221));
                  if (!v222)
                  {
                    ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
                    std::__shared_weak_count::__release_weak(v168);
                  }
                }
                if ((v213 & 1) != 0)
                {
                  v164 = v317;
                  v197 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
                  if (!*((_QWORD *)&__dst + 1))
                    goto LABEL_343;
                }
                else
                {
                  (*(void (**)(_QWORD *))(*v317 + 8))(v317);
                  v164 = 0;
                  v197 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
                  if (!*((_QWORD *)&__dst + 1))
                    goto LABEL_343;
                }
LABEL_339:
                v223 = (unint64_t *)&v197->__shared_owners_;
                do
                  v224 = __ldaxr(v223);
                while (__stlxr(v224 - 1, v223));
                if (!v224)
                {
                  ((void (*)(std::__shared_weak_count *, __n128))v197->__on_zero_shared)(v197, v163);
                  std::__shared_weak_count::__release_weak(v197);
                }
LABEL_343:
                v225 = v157[6].__shared_weak_owners_;
                v157[6].__shared_weak_owners_ = (uint64_t)v164;
                if (v225)
                  (*(void (**)(uint64_t))(*(_QWORD *)v225 + 8))(v225);
                v226 = v334;
                if (v334 == v333)
                {
                  v227 = 4;
                  v226 = v333;
                }
                else
                {
                  if (!v334)
                  {
LABEL_350:
                    if (v159)
                    {
                      v228 = (unint64_t *)&v159->__shared_owners_;
                      do
                        v229 = __ldaxr(v228);
                      while (__stlxr(v229 - 1, v228));
                      if (!v229)
                      {
                        ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
                        std::__shared_weak_count::__release_weak(v159);
                      }
                    }
                    v230 = v157[6].__shared_weak_owners_;
                    v231 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
                    if (!v230)
                    {
                      if ((v231 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
                      {
                        *(_QWORD *)(v139 + 3296) = os_log_create("com.apple.AppleCVA", "FaceKit");
                        __cxa_guard_release(&qword_1ED52ACD0);
                      }
                      v256 = *(id *)(v139 + 3296);
                      if (os_log_type_enabled(v256, OS_LOG_TYPE_ERROR))
                      {
                        *(_WORD *)buf = 0;
                        _os_log_error_impl(&dword_1C9870000, v256, OS_LOG_TYPE_ERROR, "failed to create a recognition processor.", buf, 2u);
                      }

                      goto LABEL_475;
                    }
                    if ((v231 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
                    {
                      *(_QWORD *)(v139 + 3296) = os_log_create("com.apple.AppleCVA", "FaceKit");
                      __cxa_guard_release(&qword_1ED52ACD0);
                    }
                    v232 = *(id *)(v139 + 3296);
                    if (os_log_type_enabled(v232, OS_LOG_TYPE_INFO))
                    {
                      v233 = *(_DWORD *)(v157->__shared_owners_ + 12);
                      *(_DWORD *)buf = 67109120;
                      *(_DWORD *)&buf[4] = v233;
                      _os_log_impl(&dword_1C9870000, v232, OS_LOG_TYPE_INFO, "Creating CaraNet model %d.", buf, 8u);
                    }

                    v319 = v324;
                    if (*((_QWORD *)&v324 + 1))
                    {
                      v234 = (unint64_t *)(*((_QWORD *)&v324 + 1) + 8);
                      do
                        v235 = __ldxr(v234);
                      while (__stxr(v235 + 1, v234));
                    }
                    sub_1C98AF3E8(buf, (int)__p, a4, (uint64_t *)&v319, *(unsigned __int8 *)(v318->__shared_owners_ + 2), *(_DWORD *)(v318->__shared_owners_ + 12), *(unsigned __int8 *)(v318->__shared_owners_ + 9));
                    v236 = *(_OWORD *)buf;
                    memset(buf, 0, sizeof(buf));
                    v237 = (std::__shared_weak_count *)v318[1].__vftable;
                    *(_OWORD *)&v318->__shared_weak_owners_ = v236;
                    if (v237)
                    {
                      v238 = (unint64_t *)&v237->__shared_owners_;
                      do
                        v239 = __ldaxr(v238);
                      while (__stlxr(v239 - 1, v238));
                      if (!v239)
                      {
                        ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
                        std::__shared_weak_count::__release_weak(v237);
                      }
                    }
                    v240 = *(std::__shared_weak_count **)&buf[8];
                    if (*(_QWORD *)&buf[8])
                    {
                      v241 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
                      do
                        v242 = __ldaxr(v241);
                      while (__stlxr(v242 - 1, v241));
                      if (!v242)
                      {
                        ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
                        std::__shared_weak_count::__release_weak(v240);
                      }
                    }
                    v243 = (std::__shared_weak_count *)*((_QWORD *)&v319 + 1);
                    if (*((_QWORD *)&v319 + 1))
                    {
                      v244 = (unint64_t *)(*((_QWORD *)&v319 + 1) + 8);
                      do
                        v245 = __ldaxr(v244);
                      while (__stlxr(v245 - 1, v244));
                      if (!v245)
                      {
                        ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
                        std::__shared_weak_count::__release_weak(v243);
                      }
                    }
                    v246 = (uint64_t (***)(_QWORD))v318->__shared_weak_owners_;
                    if (!v246)
                    {
                      v257 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
                      if ((v257 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
                      {
                        *(_QWORD *)(v139 + 3296) = os_log_create("com.apple.AppleCVA", "FaceKit");
                        __cxa_guard_release(&qword_1ED52ACD0);
                      }
                      v258 = *(id *)(v139 + 3296);
                      if (os_log_type_enabled(v258, OS_LOG_TYPE_ERROR))
                      {
                        *(_WORD *)buf = 0;
                        _os_log_error_impl(&dword_1C9870000, v258, OS_LOG_TYPE_ERROR, "failed to initialize network resources.", buf, 2u);
                      }
                      goto LABEL_474;
                    }
                    LODWORD(v318[2].__vftable) = (**v246)(v246);
                    v247 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
                    if ((v247 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
                    {
                      *(_QWORD *)(v139 + 3296) = os_log_create("com.apple.AppleCVA", "FaceKit");
                      __cxa_guard_release(&qword_1ED52ACD0);
                    }
                    v248 = *(id *)(v139 + 3296);
                    if (os_log_type_enabled(v248, OS_LOG_TYPE_INFO))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_impl(&dword_1C9870000, v248, OS_LOG_TYPE_INFO, "Wait for identity fitting to finish initialization.", buf, 2u);
                    }

                    v249 = v318;
                    sub_1C98B4654((uint64_t *)v318[1].__shared_owners_);
                    if (!*(_QWORD *)(*(_QWORD *)v318[1].__shared_owners_ + 16))
                    {
                      v259 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
                      if ((v259 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
                      {
                        *(_QWORD *)(v139 + 3296) = os_log_create("com.apple.AppleCVA", "FaceKit");
                        __cxa_guard_release(&qword_1ED52ACD0);
                      }
                      v260 = *(id *)(v139 + 3296);
                      if (os_log_type_enabled(v260, OS_LOG_TYPE_ERROR))
                      {
                        *(_WORD *)buf = 0;
                        _os_log_error_impl(&dword_1C9870000, v260, OS_LOG_TYPE_ERROR, "failed to initialize the identity fitting.", buf, 2u);
                      }

                      v261 = (std::__shared_weak_count *)v318[1].__shared_weak_owners_;
                      v318[1].__shared_owners_ = 0;
                      v318[1].__shared_weak_owners_ = 0;
                      if (v261)
                      {
                        v262 = (unint64_t *)&v261->__shared_owners_;
                        do
                          v263 = __ldaxr(v262);
                        while (__stlxr(v263 - 1, v262));
                        if (!v263)
                        {
                          ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
                          std::__shared_weak_count::__release_weak(v261);
                        }
                      }
                      goto LABEL_475;
                    }
                    v250 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
                    if ((v250 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
                    {
                      sub_1C98CFF14();
                      __cxa_guard_release(&qword_1ED52ACD8);
                      v139 = 0x1ED52A000;
                      v249 = v318;
                    }
                    if (!*(_BYTE *)(qword_1ED52ACB8 + 272))
                      goto LABEL_471;
                    v251 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
                    if ((v251 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
                    {
                      sub_1C98CFF14();
                      __cxa_guard_release(&qword_1ED52ACD8);
                      v139 = 0x1ED52A000;
                    }
                    v252 = (const char *)(qword_1ED52ACB8 + 280);
                    if (*(char *)(qword_1ED52ACB8 + 303) < 0)
                      v252 = *(const char **)v252;
                    v253 = strlen(v252);
                    if (v253 >= 0x7FFFFFFFFFFFFFF8)
                      abort();
                    v254 = v253;
                    if (v253 >= 0x17)
                    {
                      v264 = (v253 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v253 | 7) != 0x17)
                        v264 = v253 | 7;
                      v265 = v264 + 1;
                      v255 = (__int128 *)operator new(v264 + 1);
                      *((_QWORD *)&__dst + 1) = v254;
                      v338 = v265 | 0x8000000000000000;
                      *(_QWORD *)&__dst = v255;
                    }
                    else
                    {
                      HIBYTE(v338) = v253;
                      v255 = &__dst;
                      if (!v253)
                      {
LABEL_411:
                        *((_BYTE *)v255 + v254) = 0;
                        v266 = HIBYTE(v338);
                        if (v338 < 0)
                          v266 = *((_QWORD *)&__dst + 1);
                        if (v266)
                        {
                          HIBYTE(v341) = 5;
                          strcpy((char *)buf, ".json");
                          v267 = cva::utils::string::iends_with();
                          if (SHIBYTE(v341) < 0)
                            operator delete(*(void **)buf);
                          v268 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
                          if ((v267 & 1) != 0)
                          {
                            if ((v268 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
                            {
                              *(_QWORD *)(v139 + 3296) = os_log_create("com.apple.AppleCVA", "FaceKit");
                              __cxa_guard_release(&qword_1ED52ACD0);
                            }
                            v269 = *(id *)(v139 + 3296);
                            if (os_log_type_enabled(v269, OS_LOG_TYPE_INFO))
                            {
                              v270 = &__dst;
                              if (v338 < 0)
                                v270 = (__int128 *)__dst;
                              *(_DWORD *)buf = 136315138;
                              *(_QWORD *)&buf[4] = v270;
                              _os_log_impl(&dword_1C9870000, v269, OS_LOG_TYPE_INFO, "Loading debug profile from tracking output file %s", buf, 0xCu);
                            }

                            memset(buf, 0, sizeof(buf));
                            v341 = 0;
                            v343 = 0;
                            v344 = 0;
                            LODWORD(v345) = 0;
                            v346 = 0;
                            v347 = 0;
                            v348 = 0;
                            v349 = &off_1E8295050;
                            v350 = 0x100000001;
                            v352 = 0;
                            v353 = 0x3F80000000000000;
                            v354 = 0;
                            v351 = 1065353216;
                            v355 = 0;
                            v358 = 0x3F80000000000000;
                            v359 = 0;
                            v357 = 0;
                            __asm { FMOV            V2.2S, #1.0 }
                            v356 = _D2;
                            v360 = 0;
                            v361 = 1065353216;
                            v362 = 0;
                            v363 = 0;
                            v364 = 0u;
                            v365 = 0u;
                            v366 = &off_1E8295050;
                            v367 = 0x100000001;
                            v369 = 0;
                            v370 = 0x3F80000000000000;
                            v371 = 0;
                            v368 = 1065353216;
                            v372 = 0;
                            v376 = 0;
                            v377 = 0;
                            v374 = 0;
                            v375 = 0x3F80000000000000;
                            v373 = _D2;
                            v378 = 1065353216;
                            v380 = 0;
                            v379 = 0;
                            v381 = 0u;
                            v382 = 0u;
                            v383 = &off_1E8295050;
                            v384 = 0x100000001;
                            v385 = 1065353216;
                            v386 = 0;
                            v387 = 0x3F80000000000000;
                            v388 = 0;
                            v389 = 0;
                            v392 = 0x3F80000000000000;
                            v391 = 0;
                            v394 = 0;
                            v393 = 0;
                            v390 = _D2;
                            v395 = 1065353216;
                            v397 = 0;
                            v396 = 0;
                            v418 = 0;
                            v417 = 0u;
                            v416 = 0u;
                            v415 = 0u;
                            v414 = 0u;
                            v413 = 0u;
                            v412 = 0u;
                            v410 = 0u;
                            v411 = 0u;
                            v408 = 0u;
                            v409 = 0u;
                            v406 = 0u;
                            v407 = 0u;
                            v404 = 0u;
                            v405 = 0u;
                            v402 = 0u;
                            v403 = 0u;
                            v400 = 0u;
                            v401 = 0u;
                            v398 = 0u;
                            v399 = 0u;
                            v420 = 0;
                            v421 = 0;
                            v422 = 0u;
                            v423 = 0u;
                            v424 = 0u;
                            v425 = 0u;
                            v419 = 0;
                            if ((sub_1C9916A44((uint64_t)buf) & 1) != 0)
                            {
                              v276 = v346;
                              if (v346 == v347)
                              {
                                v290 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
                                if ((v290 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
                                {
                                  *(_QWORD *)(v139 + 3296) = os_log_create("com.apple.AppleCVA", "FaceKit");
                                  __cxa_guard_release(&qword_1ED52ACD0);
                                }
                                v289 = *(id *)(v139 + 3296);
                                if (os_log_type_enabled(v289, OS_LOG_TYPE_ERROR))
                                {
                                  v305 = &__dst;
                                  if (v338 < 0)
                                    v305 = (__int128 *)__dst;
                                  *(_DWORD *)v335 = 136315138;
                                  *(_QWORD *)&v335[4] = v305;
                                  _os_log_error_impl(&dword_1C9870000, v289, OS_LOG_TYPE_ERROR, "No tracked face data in %s", v335, 0xCu);
                                }
                              }
                              else
                              {
                                if (*(_BYTE *)(v346 + 600))
                                {
                                  v277 = (const void **)(v346 + 576);
                                  v278 = v324;
                                  v279 = *(unsigned __int8 *)(v346 + 599);
                                  if ((v279 & 0x80u) == 0)
                                    v280 = *(unsigned __int8 *)(v346 + 599);
                                  else
                                    v280 = *(_QWORD *)(v346 + 584);
                                  v281 = *(unsigned __int8 *)(v324 + 23);
                                  v282 = (char)v281;
                                  if ((v281 & 0x80u) != 0)
                                    v281 = *(_QWORD *)(v324 + 8);
                                  if (v280 == v281)
                                  {
                                    if (v282 >= 0)
                                      v283 = (unsigned __int8 *)v324;
                                    else
                                      v283 = *(unsigned __int8 **)v324;
                                    if ((v279 & 0x80) == 0)
                                    {
                                      if (*(_BYTE *)(v346 + 599))
                                      {
                                        v284 = (unsigned __int8 *)(v346 + 576);
                                        while (*v284 == *v283)
                                        {
                                          ++v284;
                                          ++v283;
                                          if (!--v279)
                                            goto LABEL_490;
                                        }
                                        goto LABEL_463;
                                      }
                                      goto LABEL_490;
                                    }
                                    if (!memcmp(*v277, v283, *(_QWORD *)(v346 + 584)))
                                    {
LABEL_490:
                                      if (*(_BYTE *)(v276 + 24))
                                      {
                                        if (*(_DWORD *)(v276 + 16) == *(_DWORD *)(v278 + 92))
                                        {
                                          v303 = (uint64_t *)operator new();
                                          *(_QWORD *)v335 = sub_1C9915540(v303, &v324);
                                          sub_1C991596C(*(uint64_t **)v335, v276);
                                          sub_1C98BBE64(&v318[6].__shared_owners_, (uint64_t *)v335);
                                          sub_1C98BBF08((uint64_t *)v335);
                                          v287 = 1;
                                          goto LABEL_467;
                                        }
                                        sub_1C98FE490();
                                        v289 = objc_claimAutoreleasedReturnValue();
                                        if (os_log_type_enabled(v289, OS_LOG_TYPE_ERROR))
                                        {
                                          v310 = &__dst;
                                          if (v338 < 0)
                                            v310 = (__int128 *)__dst;
                                          *(_DWORD *)v335 = 67109378;
                                          *(_DWORD *)&v335[4] = 0;
                                          *(_WORD *)&v335[8] = 2080;
                                          *(_QWORD *)&v335[10] = v310;
                                          _os_log_error_impl(&dword_1C9870000, v289, OS_LOG_TYPE_ERROR, "Mismatch in identity coefficients size for face %d in %s", v335, 0x12u);
                                        }
                                      }
                                      else
                                      {
                                        sub_1C98FE490();
                                        v289 = objc_claimAutoreleasedReturnValue();
                                        if (os_log_type_enabled(v289, OS_LOG_TYPE_ERROR))
                                        {
                                          v309 = &__dst;
                                          if (v338 < 0)
                                            v309 = (__int128 *)__dst;
                                          *(_DWORD *)v335 = 67109378;
                                          *(_DWORD *)&v335[4] = 0;
                                          *(_WORD *)&v335[8] = 2080;
                                          *(_QWORD *)&v335[10] = v309;
                                          _os_log_error_impl(&dword_1C9870000, v289, OS_LOG_TYPE_ERROR, "Missing identity coefficients for face %d in %s", v335, 0x12u);
                                        }
                                      }
                                      goto LABEL_499;
                                    }
                                  }
LABEL_463:
                                  v293 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
                                  if ((v293 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
                                  {
                                    *(_QWORD *)(v139 + 3296) = os_log_create("com.apple.AppleCVA", "FaceKit");
                                    __cxa_guard_release(&qword_1ED52ACD0);
                                  }
                                  v294 = *(id *)(v139 + 3296);
                                  if (os_log_type_enabled(v294, OS_LOG_TYPE_ERROR))
                                  {
                                    v306 = &__dst;
                                    if (v338 < 0)
                                      v306 = (__int128 *)__dst;
                                    if (*(char *)(v276 + 599) < 0)
                                      v277 = (const void **)*v277;
                                    v307 = v324;
                                    if (*(char *)(v324 + 23) < 0)
                                      v307 = *(_QWORD *)v324;
                                    *(_DWORD *)v335 = 67109890;
                                    *(_DWORD *)&v335[4] = 0;
                                    *(_WORD *)&v335[8] = 2080;
                                    *(_QWORD *)&v335[10] = v306;
                                    *(_WORD *)&v335[18] = 2080;
                                    *(_QWORD *)&v335[20] = v277;
                                    *(_WORD *)&v335[28] = 2080;
                                    *(_QWORD *)&v335[30] = v307;
                                    _os_log_error_impl(&dword_1C9870000, v294, OS_LOG_TYPE_ERROR, "Incompatible tensor UUID for face %d in %s (found %s, expected %s)", v335, 0x26u);
                                    v139 = 0x1ED52A000;
                                  }

                                  goto LABEL_466;
                                }
                                v291 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
                                if ((v291 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
                                {
                                  *(_QWORD *)(v139 + 3296) = os_log_create("com.apple.AppleCVA", "FaceKit");
                                  __cxa_guard_release(&qword_1ED52ACD0);
                                }
                                v289 = *(id *)(v139 + 3296);
                                if (os_log_type_enabled(v289, OS_LOG_TYPE_ERROR))
                                {
                                  v308 = &__dst;
                                  if (v338 < 0)
                                    v308 = (__int128 *)__dst;
                                  *(_DWORD *)v335 = 67109378;
                                  *(_DWORD *)&v335[4] = 0;
                                  *(_WORD *)&v335[8] = 2080;
                                  *(_QWORD *)&v335[10] = v308;
                                  _os_log_error_impl(&dword_1C9870000, v289, OS_LOG_TYPE_ERROR, "Missing tensor UUID for face %d in %s", v335, 0x12u);
                                }
                              }
                            }
                            else
                            {
                              v288 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
                              if ((v288 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
                              {
                                *(_QWORD *)(v139 + 3296) = os_log_create("com.apple.AppleCVA", "FaceKit");
                                __cxa_guard_release(&qword_1ED52ACD0);
                              }
                              v289 = *(id *)(v139 + 3296);
                              if (os_log_type_enabled(v289, OS_LOG_TYPE_ERROR))
                              {
                                v304 = &__dst;
                                if (v338 < 0)
                                  v304 = (__int128 *)__dst;
                                *(_DWORD *)v335 = 136315138;
                                *(_QWORD *)&v335[4] = v304;
                                _os_log_error_impl(&dword_1C9870000, v289, OS_LOG_TYPE_ERROR, "Cannot parse file %s", v335, 0xCu);
                              }
                            }
LABEL_499:

LABEL_466:
                            v287 = 0;
LABEL_467:
                            sub_1C98BBFA4((uint64_t)buf);
LABEL_468:
                            if (SHIBYTE(v338) < 0)
                              operator delete((void *)__dst);
                            v249 = v318;
                            if (v287)
                            {
LABEL_471:
                              LOBYTE(v249->__vftable) = 1;
                              v295 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
                              if ((v295 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
                              {
                                *(_QWORD *)(v139 + 3296) = os_log_create("com.apple.AppleCVA", "FaceKit");
                                __cxa_guard_release(&qword_1ED52ACD0);
                              }
                              v258 = *(id *)(v139 + 3296);
                              if (os_log_type_enabled(v258, OS_LOG_TYPE_INFO))
                              {
                                *(_WORD *)buf = 0;
                                _os_log_impl(&dword_1C9870000, v258, OS_LOG_TYPE_INFO, "FaceKitProcessor initialized.", buf, 2u);
                              }
LABEL_474:

                            }
LABEL_475:
                            v296 = (std::__shared_weak_count *)*((_QWORD *)&v321 + 1);
                            if (!*((_QWORD *)&v321 + 1))
                              goto LABEL_479;
                            v297 = (unint64_t *)(*((_QWORD *)&v321 + 1) + 8);
                            do
                              v298 = __ldaxr(v297);
                            while (__stlxr(v298 - 1, v297));
                            if (v298)
                              goto LABEL_479;
                            ((void (*)(std::__shared_weak_count *))v296->__on_zero_shared)(v296);
                            std::__shared_weak_count::__release_weak(v296);
                            v299 = (std::__shared_weak_count *)*((_QWORD *)&v324 + 1);
                            if (*((_QWORD *)&v324 + 1))
                              goto LABEL_480;
                            goto LABEL_483;
                          }
                          if ((v268 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
                          {
                            *(_QWORD *)(v139 + 3296) = os_log_create("com.apple.AppleCVA", "FaceKit");
                            __cxa_guard_release(&qword_1ED52ACD0);
                          }
                          v286 = *(id *)(v139 + 3296);
                          if (os_log_type_enabled(v286, OS_LOG_TYPE_ERROR))
                          {
                            v292 = &__dst;
                            if (v338 < 0)
                              v292 = (__int128 *)__dst;
                            *(_DWORD *)buf = 136315138;
                            *(_QWORD *)&buf[4] = v292;
                            _os_log_error_impl(&dword_1C9870000, v286, OS_LOG_TYPE_ERROR, "unsupported debug profile %s, only .json format is supported", buf, 0xCu);
                          }
                        }
                        else
                        {
                          v285 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
                          if ((v285 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
                          {
                            *(_QWORD *)(v139 + 3296) = os_log_create("com.apple.AppleCVA", "FaceKit");
                            __cxa_guard_release(&qword_1ED52ACD0);
                          }
                          v286 = *(id *)(v139 + 3296);
                          if (os_log_type_enabled(v286, OS_LOG_TYPE_ERROR))
                          {
                            *(_WORD *)buf = 0;
                            _os_log_error_impl(&dword_1C9870000, v286, OS_LOG_TYPE_ERROR, "no debug profile path", buf, 2u);
                          }
                        }

                        v287 = 0;
                        goto LABEL_468;
                      }
                    }
                    memmove(v255, v252, v254);
                    goto LABEL_411;
                  }
                  v227 = 5;
                }
                (*(void (**)(void))(*v226 + 8 * v227))();
                goto LABEL_350;
              }
            }
            else
            {
LABEL_299:
              v202 = *v186;
              v203 = (std::__shared_weak_count *)operator new(0xB8uLL);
              v203->__shared_owners_ = 0;
              v204 = (unint64_t *)&v203->__shared_owners_;
              v203->__shared_weak_owners_ = 0;
              v203->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295D40;
              v205 = operator new(0x20uLL);
              *v205 = &off_1E8295320;
              v205[1] = sub_1C98B2644;
              v205[2] = 0;
              v205[3] = v202;
              v203[1].__shared_owners_ = 850045863;
              v203[4].__vftable = (std::__shared_weak_count_vtbl *)1018212795;
              *(_OWORD *)&v203[1].__shared_weak_owners_ = 0u;
              *(_OWORD *)&v203[2].__shared_owners_ = 0u;
              v203[3].std::__shared_count = 0u;
              v203[3].__shared_weak_owners_ = 0;
              *(_OWORD *)&v203[4].__shared_owners_ = 0u;
              v203[5].std::__shared_count = 0u;
              *(_OWORD *)((char *)&v203[5].__shared_owners_ + 1) = 0u;
              v203[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295140;
              v206 = (char *)operator new(0x20uLL);
              *(_QWORD *)v206 = &off_1E8295320;
              *(_OWORD *)(v206 + 8) = *(_OWORD *)(v205 + 1);
              *((_QWORD *)v206 + 3) = v205[3];
              v203[7].__shared_owners_ = (uint64_t)v206;
              operator delete(v205);
              v207 = *(_QWORD *)(*v186 + 88);
              *(_QWORD *)buf = v203 + 1;
              *(_QWORD *)&buf[8] = v203;
              do
                v208 = __ldxr(v204);
              while (__stxr(v208 + 1, v204));
              (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v207 + 16))(v207, buf);
              v209 = *(std::__shared_weak_count **)&buf[8];
              v139 = 0x1ED52A000;
              if (*(_QWORD *)&buf[8])
              {
                v210 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
                do
                  v211 = __ldaxr(v210);
                while (__stlxr(v211 - 1, v210));
                if (!v211)
                {
                  ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
                  std::__shared_weak_count::__release_weak(v209);
                }
              }
              if (*(_BYTE *)(*v186 + 176))
              {
                *(_QWORD *)buf = (char *)v203 + 32;
                buf[8] = 1;
                std::mutex::lock((std::mutex *)&v203[1].__shared_owners_);
                if (LOBYTE(v203[6].__vftable))
                  goto LABEL_310;
                do
                  std::condition_variable::wait((std::condition_variable *)&v203[4], (std::unique_lock<std::mutex> *)buf);
                while (!LOBYTE(v203[6].__vftable));
                if (buf[8])
LABEL_310:
                  std::mutex::unlock(*(std::mutex **)buf);
              }
              do
                v212 = __ldaxr(v204);
              while (__stlxr(v212 - 1, v204));
              if (!v212)
              {
                ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
                std::__shared_weak_count::__release_weak(v203);
              }
              v213 = 1;
              if (!v168)
                goto LABEL_325;
            }
            v216 = (unint64_t *)&v168->__shared_owners_;
            do
              v217 = __ldaxr(v216);
            while (__stlxr(v217 - 1, v216));
            if (!v217)
            {
              ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
              std::__shared_weak_count::__release_weak(v168);
            }
            goto LABEL_325;
          }
          v148 = 5;
        }
        (*(void (**)(void))(*(_QWORD *)p_dst + 8 * v148))();
        goto LABEL_238;
      }
    }
    sub_1C98A1468();
LABEL_530:
    if (__cxa_guard_acquire(&qword_1ED52ACD0))
    {
      *(_QWORD *)(v7 + 3296) = os_log_create("com.apple.AppleCVA", "FaceKit");
      __cxa_guard_release(&qword_1ED52ACD0);
    }
  }
  if ((v92 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
  {
    *(_QWORD *)(v7 + 3296) = os_log_create("com.apple.AppleCVA", "FaceKit");
    __cxa_guard_release(&qword_1ED52ACD0);
  }
  v121 = *(id *)(v7 + 3296);
  if (os_log_type_enabled(v121, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1C9870000, v121, OS_LOG_TYPE_ERROR, "couldn't load tensor for fitting.", buf, 2u);
  }

LABEL_479:
  v299 = (std::__shared_weak_count *)*((_QWORD *)&v324 + 1);
  if (!*((_QWORD *)&v324 + 1))
  {
LABEL_483:
    if ((SHIBYTE(v328) & 0x80000000) == 0)
      goto LABEL_485;
    goto LABEL_484;
  }
LABEL_480:
  v300 = (unint64_t *)&v299->__shared_owners_;
  do
    v301 = __ldaxr(v300);
  while (__stlxr(v301 - 1, v300));
  if (v301)
    goto LABEL_483;
  ((void (*)(std::__shared_weak_count *))v299->__on_zero_shared)(v299);
  std::__shared_weak_count::__release_weak(v299);
  if (SHIBYTE(v328) < 0)
LABEL_484:
    operator delete(__p[0]);
LABEL_485:
  std::mutex::unlock(&stru_1ED52AC78);
  return kdebug_trace();
}

void sub_1C98BBC84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  __cxa_guard_abort(&qword_1ED52ACD8);
  sub_1C98BBE0C((uint64_t)&a19);
  sub_1C987C140((uint64_t)&a25);
  if (a36 < 0)
    operator delete(__p);
  std::mutex::unlock(&stru_1ED52AC78);
  kdebug_trace();
  _Unwind_Resume(a1);
}

uint64_t sub_1C98BBE0C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

uint64_t *sub_1C98BBE64(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    free(*(void **)(v4 + 64));
    free(*(void **)(v4 + 40));
    free(*(void **)(v4 + 16));
    v5 = *(std::__shared_weak_count **)(v4 + 8);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    MEMORY[0x1CAA44AFC](v4, 0x10E0C40FDDF1BE6);
  }
  return a1;
}

uint64_t *sub_1C98BBF08(uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    free(*(void **)(v2 + 64));
    free(*(void **)(v2 + 40));
    free(*(void **)(v2 + 16));
    v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    MEMORY[0x1CAA44AFC](v2, 0x10E0C40FDDF1BE6);
  }
  return a1;
}

uint64_t sub_1C98BBFA4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  void *v14;
  uint64_t v16;
  void *v17;

  v2 = *(std::__shared_weak_count **)(a1 + 880);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 864);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 864);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = *(std::__shared_weak_count **)(a1 + 848);
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = *(std::__shared_weak_count **)(a1 + 832);
    if (!v11)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    v11 = *(std::__shared_weak_count **)(a1 + 832);
    if (!v11)
      goto LABEL_21;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  if (*(_BYTE *)(a1 + 816) && *(char *)(a1 + 815) < 0)
  {
    operator delete(*(void **)(a1 + 792));
    if ((*(char *)(a1 + 783) & 0x80000000) == 0)
    {
LABEL_24:
      if ((*(char *)(a1 + 759) & 0x80000000) == 0)
        goto LABEL_25;
      goto LABEL_40;
    }
  }
  else if ((*(char *)(a1 + 783) & 0x80000000) == 0)
  {
    goto LABEL_24;
  }
  operator delete(*(void **)(a1 + 760));
  if ((*(char *)(a1 + 759) & 0x80000000) == 0)
  {
LABEL_25:
    if ((*(char *)(a1 + 735) & 0x80000000) == 0)
      goto LABEL_26;
    goto LABEL_41;
  }
LABEL_40:
  operator delete(*(void **)(a1 + 736));
  if ((*(char *)(a1 + 735) & 0x80000000) == 0)
  {
LABEL_26:
    if ((*(char *)(a1 + 711) & 0x80000000) == 0)
      goto LABEL_27;
    goto LABEL_42;
  }
LABEL_41:
  operator delete(*(void **)(a1 + 712));
  if ((*(char *)(a1 + 711) & 0x80000000) == 0)
  {
LABEL_27:
    if ((*(char *)(a1 + 687) & 0x80000000) == 0)
      goto LABEL_28;
    goto LABEL_43;
  }
LABEL_42:
  operator delete(*(void **)(a1 + 688));
  if ((*(char *)(a1 + 687) & 0x80000000) == 0)
  {
LABEL_28:
    if ((*(char *)(a1 + 663) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_44;
  }
LABEL_43:
  operator delete(*(void **)(a1 + 664));
  if ((*(char *)(a1 + 663) & 0x80000000) == 0)
  {
LABEL_29:
    if ((*(char *)(a1 + 639) & 0x80000000) == 0)
      goto LABEL_30;
    goto LABEL_45;
  }
LABEL_44:
  operator delete(*(void **)(a1 + 640));
  if ((*(char *)(a1 + 639) & 0x80000000) == 0)
  {
LABEL_30:
    if ((*(char *)(a1 + 615) & 0x80000000) == 0)
      goto LABEL_31;
    goto LABEL_46;
  }
LABEL_45:
  operator delete(*(void **)(a1 + 616));
  if ((*(char *)(a1 + 615) & 0x80000000) == 0)
  {
LABEL_31:
    if ((*(char *)(a1 + 591) & 0x80000000) == 0)
      goto LABEL_32;
    goto LABEL_47;
  }
LABEL_46:
  operator delete(*(void **)(a1 + 592));
  if ((*(char *)(a1 + 591) & 0x80000000) == 0)
  {
LABEL_32:
    if ((*(char *)(a1 + 567) & 0x80000000) == 0)
      goto LABEL_33;
    goto LABEL_48;
  }
LABEL_47:
  operator delete(*(void **)(a1 + 568));
  if ((*(char *)(a1 + 567) & 0x80000000) == 0)
  {
LABEL_33:
    if ((*(char *)(a1 + 543) & 0x80000000) == 0)
      goto LABEL_34;
    goto LABEL_49;
  }
LABEL_48:
  operator delete(*(void **)(a1 + 544));
  if ((*(char *)(a1 + 543) & 0x80000000) == 0)
  {
LABEL_34:
    if ((*(char *)(a1 + 519) & 0x80000000) == 0)
      goto LABEL_35;
    goto LABEL_50;
  }
LABEL_49:
  operator delete(*(void **)(a1 + 520));
  if ((*(char *)(a1 + 519) & 0x80000000) == 0)
  {
LABEL_35:
    v14 = *(void **)(a1 + 64);
    if (!v14)
      goto LABEL_36;
    goto LABEL_51;
  }
LABEL_50:
  operator delete(*(void **)(a1 + 496));
  v14 = *(void **)(a1 + 64);
  if (!v14)
  {
LABEL_36:
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
LABEL_55:
    operator delete(*(void **)a1);
    return a1;
  }
LABEL_51:
  v16 = *(_QWORD *)(a1 + 72);
  v17 = v14;
  if ((void *)v16 != v14)
  {
    do
      v16 = sub_1C98BC250(v16 - 1168);
    while ((void *)v16 != v14);
    v17 = *(void **)(a1 + 64);
  }
  *(_QWORD *)(a1 + 72) = v14;
  operator delete(v17);
  if (*(char *)(a1 + 23) < 0)
    goto LABEL_55;
  return a1;
}

uint64_t sub_1C98BC250(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  v2 = *(std::__shared_weak_count **)(a1 + 1160);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    if (!*(_BYTE *)(a1 + 1144))
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  if (*(_BYTE *)(a1 + 1144))
LABEL_6:
    free(*(void **)(a1 + 1120));
LABEL_7:
  if (*(_BYTE *)(a1 + 1112))
    sub_1C990C17C((uint64_t *)(a1 + 1104));
  v5 = *(std::__shared_weak_count **)(a1 + 984);
  if (!v5)
    goto LABEL_13;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
  {
LABEL_13:
    if (!*(_BYTE *)(a1 + 968))
      goto LABEL_15;
    goto LABEL_14;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  if (*(_BYTE *)(a1 + 968))
LABEL_14:
    free(*(void **)(a1 + 944));
LABEL_15:
  if (*(_BYTE *)(a1 + 936))
    sub_1C990C17C((uint64_t *)(a1 + 928));
  v8 = *(std::__shared_weak_count **)(a1 + 808);
  if (!v8)
    goto LABEL_21;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
  {
LABEL_21:
    if (!*(_BYTE *)(a1 + 792))
      goto LABEL_23;
    goto LABEL_22;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  if (*(_BYTE *)(a1 + 792))
LABEL_22:
    free(*(void **)(a1 + 768));
LABEL_23:
  if (*(_BYTE *)(a1 + 760))
    sub_1C990C17C((uint64_t *)(a1 + 752));
  v11 = *(std::__shared_weak_count **)(a1 + 632);
  if (!v11)
    goto LABEL_29;
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    v14 = *(std::__shared_weak_count **)(a1 + 616);
    if (!v14)
      goto LABEL_41;
  }
  else
  {
LABEL_29:
    v14 = *(std::__shared_weak_count **)(a1 + 616);
    if (!v14)
      goto LABEL_41;
  }
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_41:
  if (*(_BYTE *)(a1 + 600) && *(char *)(a1 + 599) < 0)
  {
    operator delete(*(void **)(a1 + 576));
    v17 = *(std::__shared_weak_count **)(a1 + 568);
    if (!v17)
      goto LABEL_49;
  }
  else
  {
    v17 = *(std::__shared_weak_count **)(a1 + 568);
    if (!v17)
      goto LABEL_49;
  }
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
LABEL_49:
  if (!*(_BYTE *)(a1 + 552) || (*(char *)(a1 + 551) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a1 + 512))
      goto LABEL_53;
    goto LABEL_52;
  }
  operator delete(*(void **)(a1 + 528));
  if (*(_BYTE *)(a1 + 512))
LABEL_52:
    free(*(void **)(a1 + 488));
LABEL_53:
  if (*(_BYTE *)(a1 + 288))
    free(*(void **)(a1 + 264));
  if (*(_BYTE *)(a1 + 200) && *(char *)(a1 + 199) < 0)
  {
    operator delete(*(void **)(a1 + 176));
    if (!*(_BYTE *)(a1 + 120))
      goto LABEL_63;
  }
  else if (!*(_BYTE *)(a1 + 120))
  {
    goto LABEL_63;
  }
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
LABEL_63:
  if (*(_BYTE *)(a1 + 88))
    free(*(void **)(a1 + 64));
  if (*(_BYTE *)(a1 + 56))
    free(*(void **)(a1 + 32));
  if (*(_BYTE *)(a1 + 24))
    free(*(void **)a1);
  return a1;
}

void sub_1C98BC528()
{
  JUMPOUT(0x1CAA44AFCLL);
}

_QWORD *sub_1C98BC53C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E82954D0;
  result[1] = v3;
  return result;
}

uint64_t sub_1C98BC570(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E82954D0;
  a2[1] = v2;
  return result;
}

double sub_1C98BC58C@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v4;

  (*(void (**)(__int128 *__return_ptr))(a1 + 8))(&v4);
  result = *(double *)&v4;
  *a2 = v4;
  return result;
}

_QWORD *sub_1C98BC5C4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E8294210;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void sub_1C98BC628(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_1E8294210;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x1CAA44AFCLL);
}

__n128 sub_1C98BC69C(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_1E8294210;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)v2 + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 32);
  *((__n128 *)v2 + 2) = result;
  *((_QWORD *)v2 + 6) = *(_QWORD *)(a1 + 48);
  return result;
}

__n128 sub_1C98BC704(__n128 *a1, __n128 *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v2 = a1->n128_u64[1];
  a2->n128_u64[0] = (unint64_t)&off_1E8294210;
  a2->n128_u64[1] = v2;
  v3 = a1[1].n128_u64[1];
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  a2[1].n128_u64[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = a1[2];
  a2[3].n128_u64[0] = a1[3].n128_u64[0];
  a2[2] = result;
  return result;
}

void sub_1C98BC748(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_1C98BC7A0(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(__p);
}

void sub_1C98BC7F8(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v8[2];
  __int128 v9;

  v3 = *(std::__shared_weak_count **)(a1 + 24);
  v8[0] = *(_QWORD *)(a1 + 16);
  v8[1] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  sub_1C98E9F84((uint64_t *)&v9, v8, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), **(_QWORD **)(a1 + 48));
  *a2 = v9;
  v9 = 0uLL;
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1C98BC8A4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E82946F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1C98BC8B4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E82946F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA44AFCLL);
}

uint64_t sub_1C98BC8E4(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD **)(result + 24);
  if (v1)
  {
    v2 = v1[8];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
    v3 = (std::__shared_weak_count *)v1[9];
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v6 = (_QWORD *)v1[7];
    if (v6 == v1 + 4)
    {
      v7 = 4;
      v6 = v1 + 4;
    }
    else
    {
      if (!v6)
        goto LABEL_15;
      v7 = 5;
    }
    (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_15:
    v8 = (std::__shared_weak_count *)v1[3];
    if (v8)
    {
      v9 = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    JUMPOUT(0x1CAA44AFCLL);
  }
  return result;
}

_QWORD *sub_1C98BC9DC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E8294258;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void sub_1C98BCA40(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_1E8294258;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x1CAA44AFCLL);
}

__n128 sub_1C98BCAB4(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_1E8294258;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)v2 + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 32);
  *((__n128 *)v2 + 2) = result;
  *((_QWORD *)v2 + 6) = *(_QWORD *)(a1 + 48);
  return result;
}

__n128 sub_1C98BCB1C(__n128 *a1, __n128 *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v2 = a1->n128_u64[1];
  a2->n128_u64[0] = (unint64_t)&off_1E8294258;
  a2->n128_u64[1] = v2;
  v3 = a1[1].n128_u64[1];
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  a2[1].n128_u64[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = a1[2];
  a2[3].n128_u64[0] = a1[3].n128_u64[0];
  a2[2] = result;
  return result;
}

void sub_1C98BCB60(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_1C98BCBB8(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(__p);
}

void sub_1C98BCC10(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v8[2];
  __int128 v9;

  v3 = *(std::__shared_weak_count **)(a1 + 24);
  v8[0] = *(_QWORD *)(a1 + 16);
  v8[1] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  sub_1C98E9F84((uint64_t *)&v9, v8, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), **(_QWORD **)(a1 + 48));
  *a2 = v9;
  v9 = 0uLL;
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void *sub_1C98BCCBC(_QWORD *a1, CVPixelBufferRef pixelBuffer)
{
  size_t BytesPerRowOfPlane;
  unsigned int WidthOfPlane;
  unsigned int HeightOfPlane;
  void *result;

  if (CVPixelBufferIsPlanar(pixelBuffer))
  {
    BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 0);
    WidthOfPlane = CVPixelBufferGetWidthOfPlane(pixelBuffer, 0);
    HeightOfPlane = CVPixelBufferGetHeightOfPlane(pixelBuffer, 0);
    result = CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0);
  }
  else
  {
    BytesPerRowOfPlane = CVPixelBufferGetBytesPerRow(pixelBuffer);
    WidthOfPlane = CVPixelBufferGetWidth(pixelBuffer);
    HeightOfPlane = CVPixelBufferGetHeight(pixelBuffer);
    result = CVPixelBufferGetBaseAddress(pixelBuffer);
  }
  *a1 = 0;
  a1[1] = WidthOfPlane | ((unint64_t)HeightOfPlane << 32);
  a1[2] = (BytesPerRowOfPlane << 32) | 1;
  a1[3] = result;
  return result;
}

uint64_t sub_1C98BCD78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float a6)
{
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  float32x2_t v15;
  float v16;
  float v17;
  float32x2_t v18;
  int32x2_t v19;
  __int128 v20;
  float v21;
  int32x2_t v22;
  float v23;
  float32x4_t v24;
  __int128 *v25;
  __int128 v26;
  float v27;
  float32x2_t v28;
  char *v29;
  float32x2_t v30;
  uint64_t v31;
  float32x2_t v32;
  unint64_t v33;
  int *v34;
  int v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  __CVBuffer *v44;
  _WORD *PixelFormatType;
  _WORD *v46;
  int v47;
  int32x2_t v48;
  int32x2_t v49;
  float v50;
  int32x2_t v51;
  int32x2_t v52;
  int32x2_t v53;
  float v54;
  int32x2_t v55;
  unsigned __int8 v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  int v61;
  int v62;
  int v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v74;
  float32x4_t v75;
  int32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t *v79;
  float32x4_t v80;
  float32x4_t v81;
  int v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  int32x4_t v86;
  float32x4_t v87;
  int8x16_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  int Width;
  int Height;
  unsigned int BytesPerRow;
  _WORD *BaseAddress;
  int32x2_t v96;
  int32x2_t v97;
  int32x2_t v98;
  unsigned __int8 v99;
  float32x4_t v100;
  unsigned int v101;
  int v102;
  int v103;
  int v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v111;
  float32x4_t v112;
  int32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t *v116;
  float32x4_t v117;
  float32x4_t v118;
  int v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  int32x4_t v123;
  float32x4_t v124;
  int v125;
  unsigned __int8 v126;
  NSObject *v127;
  const char *v128;
  int v129;
  uint64_t v130;
  int v131;
  int32x4_t v132;
  int32x4_t v133;
  unsigned int v134;
  unsigned int v135;
  int32x4_t v136;
  int32x4_t v137;
  int32x4_t v138;
  int32x4_t v139;
  int32x4_t v140;
  int32x4_t v141;
  uint64_t v142;
  int32x4_t v143;
  float32x4_t *v144;
  int32x4_t v145;
  float32x4_t *v146;
  int32x4_t v147;
  float32x4_t v148;
  int v149;
  uint64_t v150;
  int v151;
  int32x4_t v152;
  int32x4_t v153;
  unsigned int v154;
  unsigned int v155;
  int32x4_t v156;
  int32x4_t v157;
  int32x4_t v158;
  int32x4_t v159;
  int32x4_t v160;
  int32x4_t v161;
  uint64_t v162;
  int32x4_t v163;
  int8x16_t *v164;
  int32x4_t v165;
  int8x16_t *v166;
  int32x4_t v167;
  float32x4_t v168;
  int8x16_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  int v173;
  int v174;
  unsigned int v175;
  _DWORD *v176;
  int32x2_t v177;
  int32x2_t v178;
  int32x2_t v179;
  unsigned __int8 v180;
  float32x4_t v181;
  unsigned int v182;
  int v183;
  int v184;
  int v185;
  float32x4_t v186;
  float32x4_t v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v192;
  float32x4_t v193;
  int32x4_t v194;
  float32x4_t v195;
  float32x4_t v196;
  float32x4_t *v197;
  float32x4_t v198;
  float32x4_t v199;
  int v200;
  float32x4_t v201;
  float32x4_t v202;
  float32x4_t v203;
  float32x4_t v204;
  int v205;
  uint64_t v206;
  int v207;
  int32x4_t v208;
  int32x4_t v209;
  unsigned int v210;
  unsigned int v211;
  int32x4_t v212;
  int32x4_t v213;
  int32x4_t v214;
  int32x4_t v215;
  int32x4_t v216;
  int32x4_t v217;
  uint64_t v218;
  int32x4_t v219;
  float32x4_t *v220;
  int32x4_t v221;
  float32x4_t *v222;
  float32x4_t v223;
  int32x2_t v225;
  int32x2_t v226;
  int32x2_t v227;
  int32x2_t v228;
  float v229;
  float v230;
  _OWORD v231[3];
  __int128 v232;
  float32x2_t v233;
  float v234;
  __int128 v235;
  float32x2_t v236;
  float v237;
  __int128 v238;
  float32x2_t v239;
  float v240;
  float32x4_t v241;
  uint64_t v242;
  float v243;
  float *v244;
  uint64_t *v245;
  float *v246;
  float32x4_t *v247;
  __int128 v248;
  _DWORD buf[6];
  float32x2_t v250;
  int v251;
  uint64_t v252;

  v252 = *MEMORY[0x1E0C80C00];
  v12 = a3 + 52;
  *(_QWORD *)&v238 = a3 + 52;
  *(_QWORD *)buf = &v238;
  v13 = buf;
  *(_QWORD *)&v231[0] = buf;
  *((_QWORD *)&v231[0] + 1) = a3 + 88;
  v241.i64[0] = 0;
  v241.i32[2] = 0;
  sub_1C98BDEBC(v241.f32, (uint64_t)v231);
  *(_QWORD *)&v235 = a2 + 60;
  *(_QWORD *)buf = &v235;
  *(_QWORD *)&v231[0] = buf;
  *((_QWORD *)&v231[0] + 1) = a2 + 96;
  *(_QWORD *)&v238 = 0;
  DWORD2(v238) = 0;
  sub_1C98BDEBC((float *)&v238, (uint64_t)v231);
  v14 = 0;
  v15 = vsub_f32(*(float32x2_t *)v241.f32, *(float32x2_t *)&v238);
  if ((float)(vaddv_f32(vmul_f32(v15, v15))
             + (float)((float)(v241.f32[2] - *((float *)&v238 + 2)) * (float)(v241.f32[2] - *((float *)&v238 + 2)))) <= 0.00001)
  {
    v16 = *(float *)(a3 + 60) - *(float *)(a2 + 68);
    v17 = *(float *)(a3 + 72) - *(float *)(a2 + 80);
    if ((float)((float)((float)(v16 * v16) + (float)(v17 * v17))
               + (float)((float)(*(float *)(a3 + 84) - *(float *)(a2 + 92))
                       * (float)(*(float *)(a3 + 84) - *(float *)(a2 + 92)))) <= 0.00001)
    {
      v18 = *(float32x2_t *)(a3 + 16);
      v19 = *(int32x2_t *)(a3 + 28);
      *(float32x2_t *)&v20 = v18;
      *((int32x2_t *)&v20 + 1) = v19;
      v231[0] = v20;
      v22 = *(int32x2_t *)(a3 + 40);
      *(int32x2_t *)&v231[1] = v22;
      v21 = -*(float *)v19.i32;
      *(float *)v22.i32 = vmlas_n_f32(vmuls_lane_f32(-*(float *)v19.i32, v18, 1), *(float *)&v19.i32[1], v18.f32[0]);
      DWORD2(v231[1]) = v22.i32[0];
      if (fabsf(*(float *)v22.i32) >= 1.0e-15)
      {
        v24.i32[0] = vdup_lane_s32(v19, 1).u32[0];
        v24.f32[1] = -v18.f32[1];
        v24.i64[1] = __PAIR64__(vdup_lane_s32(*(int32x2_t *)&v18, 0).u32[1], LODWORD(v21));
        v241 = vdivq_f32(v24, (float32x4_t)vdupq_lane_s32(v22, 0));
        *(_QWORD *)&v235 = &v241;
        *(_QWORD *)&v238 = &v235;
        *((_QWORD *)&v238 + 1) = &v231[1];
        *(_QWORD *)&v248 = 0;
        sub_1C98BDF7C((float *)&v248, (uint64_t)&v238);
        *(float32x4_t *)buf = v241;
        *(_QWORD *)&buf[4] = v248;
        v23 = (float)(v241.f32[0] * v241.f32[3]) - (float)(v241.f32[2] * v241.f32[1]);
      }
      else
      {
        memset(buf, 0, sizeof(buf));
        v23 = 1.0;
      }
      v250.f32[0] = v23;
      *(_QWORD *)&v235 = a2 + 60;
      *((_QWORD *)&v235 + 1) = 3;
      *(_QWORD *)&v248 = v12;
      *((_QWORD *)&v248 + 1) = 3;
      v246 = (float *)&v248;
      v25 = &v235;
      *(_QWORD *)&v238 = &v235;
      *((_QWORD *)&v238 + 1) = &v246;
      v231[0] = 0uLL;
      sub_1C98BDFF8((float *)v231, (uint64_t **)&v238);
      v241 = (float32x4_t)v231[0];
      v242 = 0;
      v243 = (float)(*(float *)v231 * *((float *)v231 + 3)) - (float)(*((float *)v231 + 2) * *((float *)v231 + 1));
      *(_QWORD *)&v26 = *(_QWORD *)(a2 + 24);
      v27 = vmlas_n_f32(vmuls_lane_f32(-COERCE_FLOAT(*(_QWORD *)(a2 + 36)), *(float32x2_t *)&v26, 1), COERCE_FLOAT(HIDWORD(*(_QWORD *)(a2 + 36))), *(float *)&v26);
      *((_QWORD *)&v26 + 1) = *(_QWORD *)(a2 + 36);
      v238 = v26;
      v239 = *(float32x2_t *)(a2 + 48);
      v28 = v239;
      v240 = v27;
      v246 = (float *)&v238;
      v247 = &v241;
      v248 = 0uLL;
      sub_1C98BE138((uint64_t)&v248, &v246);
      v244 = (float *)&v238;
      v245 = &v242;
      v29 = (char *)v231 + 4;
      *(_QWORD *)((char *)v231 + 4) = 0;
      sub_1C9888470((float *)v231 + 1, &v244);
      v235 = v248;
      v30 = vadd_f32(*(float32x2_t *)((char *)v231 + 4), v28);
      v236 = v30;
      v237 = (float)(*(float *)&v248 * *((float *)&v248 + 3)) - (float)(*((float *)&v248 + 2) * *((float *)&v248 + 1));
      v246 = (float *)&v235;
      v247 = (float32x4_t *)buf;
      v248 = 0uLL;
      sub_1C98BE138((uint64_t)&v248, &v246);
      v244 = (float *)&v235;
      v245 = (uint64_t *)&buf[4];
      *(_QWORD *)((char *)v231 + 4) = 0;
      sub_1C9888470((float *)v231 + 1, &v244);
      v31 = 0;
      v232 = v248;
      v32 = vadd_f32(*(float32x2_t *)((char *)v231 + 4), v30);
      v233 = v32;
      v234 = (float)(*(float *)&v248 * *((float *)&v248 + 3)) - (float)(*((float *)&v248 + 2) * *((float *)&v248 + 1));
      *(_QWORD *)&buf[3] = 0x3F80000000000000;
      *(_QWORD *)&buf[1] = 0;
      buf[0] = 1065353216;
      buf[5] = 0;
      v251 = 1065353216;
      v33 = 0x100000000;
      v34 = (int *)&v232;
      do
      {
        v35 = *v34++;
        buf[v31] = v35;
        v36 = HIDWORD(v33);
        v37 = (int)v33 < 1;
        if ((int)v33 < 1)
          v36 = 0;
        v38 = v31 + v36;
        v39 = (v33 + 1);
        v40 = v33 & 0xFFFFFFFF00000000;
        if (!v37)
          v39 = 0;
        v33 = v39 | v40;
        v31 = v38 + 1;
      }
      while (v31 != 6);
      v250 = v32;
      v241.i64[0] = (uint64_t)buf;
      v241.i64[1] = a4;
      memset(v231, 0, 36);
      sub_1C98A24C0((uint64_t)v231, (float **)&v241);
      v41 = *(unsigned int *)(a1 + 48);
      if (v41 > *(_DWORD *)(a5 + 8) || v41 > *(_DWORD *)(a5 + 12))
      {
        v42 = *(void **)(a5 + 24);
        if (v42)
        {
          free(v42);
          *(_QWORD *)(a5 + 24) = 0;
        }
        *(_QWORD *)a5 = 0;
        *(_QWORD *)(a5 + 8) = v41 | (v41 << 32);
        *(_QWORD *)(a5 + 16) = ((unint64_t)(((4 * (_DWORD)v41 + 15) & 0xFFFFFFF0) >> 4) << 36) | 4;
        *(_QWORD *)buf = v41 * (unint64_t)((4 * (_DWORD)v41 + 15) & 0xFFFFFFF0);
        if (*(_QWORD *)buf)
          v43 = malloc_type_malloc(*(size_t *)buf, 0xA153FF5uLL);
        else
          v43 = 0;
        *(_QWORD *)(a5 + 24) = v43;
      }
      else
      {
        *(_QWORD *)a5 = 0;
        *(_QWORD *)(a5 + 8) = v41 | (v41 << 32);
      }
      kdebug_trace();
      v44 = *(__CVBuffer **)a2;
      PixelFormatType = (_WORD *)CVPixelBufferGetPixelFormatType(*(CVPixelBufferRef *)a2);
      v46 = PixelFormatType;
      if ((_DWORD)PixelFormatType == 825306677
        || (_DWORD)PixelFormatType == 1647392359
        || (_DWORD)PixelFormatType == 825437747)
      {
        v47 = *(_DWORD *)(a2 + 124);
        if (v47 == 1)
        {
          v229 = *(float *)(a2 + 112);
          CVPixelBufferLockBaseAddress(v44, 1uLL);
          Width = CVPixelBufferGetWidth(v44);
          Height = CVPixelBufferGetHeight(v44);
          BytesPerRow = CVPixelBufferGetBytesPerRow(v44);
          BaseAddress = CVPixelBufferGetBaseAddress(v44);
          v99 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
          if ((v99 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
          {
            sub_1C98CFF14();
            __cxa_guard_release(&qword_1ED52ACD8);
          }
          *(float *)v96.i32 = a6 / v229;
          v100 = (float32x4_t)vdupq_lane_s32(v96, 0);
          v101 = Width - 1;
          if (*(_BYTE *)(qword_1ED52ACB8 + 109))
          {
            v102 = *(_DWORD *)(a5 + 12);
            if (v102 >= 1)
            {
              v103 = *(_DWORD *)(a5 + 8);
              if (v103 >= 1)
              {
                v104 = 0;
                *(float *)v97.i32 = (float)v101;
                v105 = (float32x4_t)vdupq_lane_s32(v97, 0);
                *(float *)v98.i32 = (float)(Height - 1);
                v106 = (float32x4_t)vdupq_lane_s32(v98, 0);
                v107 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)v231 + 12), 0);
                v108 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v231[1], 0);
                v109 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)&v231[1] + 4), 0);
                __asm { FMOV            V23.4S, #4.0 }
                v111 = vmulq_n_f32(_Q23, *(float *)v231);
                v112 = vmulq_n_f32(_Q23, *((float *)v231 + 1));
                v113 = vdupq_n_s32(BytesPerRow >> 1);
                v114 = vmulq_n_f32(_Q23, *((float *)v231 + 2));
                v115 = vmlaq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vshrq_n_u64(*(uint64x2_t *)((char *)&v231[1] + 4), 0x20uLL), 0), (float32x4_t)xmmword_1C99275A0, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v231[0], 0));
                v116 = *(float32x4_t **)(a5 + 24);
                v117 = vmlaq_f32((float32x4_t)vdupq_laneq_s32(*(int32x4_t *)((char *)&v231[1] + 4), 2), (float32x4_t)xmmword_1C99275A0, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)v231 + 4), 0));
                v118 = vmlaq_f32((float32x4_t)vdupq_laneq_s32(*(int32x4_t *)((char *)&v231[1] + 4), 3), (float32x4_t)xmmword_1C99275A0, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)v231 + 8), 0));
                do
                {
                  v119 = 0;
                  v120 = v118;
                  v121 = v117;
                  v122 = v115;
                  do
                  {
                    v123 = vmlaq_s32(vcvtaq_s32_f32(vmaxnmq_f32(vminnmq_f32(vdivq_f32(v122, v120), v105), (float32x4_t)0)), vcvtaq_s32_f32(vmaxnmq_f32(vminnmq_f32(vdivq_f32(v121, v120), v106), (float32x4_t)0)), v113);
                    v123.i16[0] = BaseAddress[v123.i32[0]];
                    v123.i16[1] = BaseAddress[v123.i32[1]];
                    v123.i16[2] = BaseAddress[v123.i32[2]];
                    v123.i16[3] = BaseAddress[v123.i32[3]];
                    v124 = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v123.i8));
                    *v116++ = vdivq_f32(vmulq_n_f32((float32x4_t)vandq_s8((int8x16_t)v124, (int8x16_t)vcgeq_f32(v100, v124)), v229), v120);
                    v122 = vaddq_f32(v111, v122);
                    v121 = vaddq_f32(v112, v121);
                    v120 = vaddq_f32(v114, v120);
                    v119 += 4;
                  }
                  while (v119 < v103);
                  v115 = vaddq_f32(v107, v115);
                  v117 = vaddq_f32(v108, v117);
                  v118 = vaddq_f32(v109, v118);
                  ++v104;
                }
                while (v104 != v102);
              }
            }
          }
          else
          {
            v129 = *(_DWORD *)(a5 + 12);
            if (v129 >= 1)
            {
              v130 = *(unsigned int *)(a5 + 8);
              if ((_DWORD)v130)
              {
                v131 = 0;
                v132 = vdupq_n_s32(v101);
                v133 = vdupq_n_s32(Height - 1);
                v134 = (int)(float)((float)(*((float *)v231 + 1) * 262140.0) + 0.5);
                v135 = (int)(float)((float)(*(float *)v231 * 262140.0) + 0.5);
                v136 = vdupq_n_s32(BytesPerRow >> 1);
                v137 = vdupq_n_s32(4 * v135);
                v138 = vdupq_n_s32(4 * v134);
                v139 = vdupq_n_s32((int)(float)((float)(*((float *)v231 + 3) * 262140.0) + 0.5) - v130
                                                                                                * v135);
                v140 = vmlaq_s32(vdupq_n_s32((int)(float)((float)(*((float *)&v231[1] + 2) * 262140.0) + 0.5)), vdupq_n_s32(v135), (int32x4_t)xmmword_1C9927540);
                v141 = vdupq_n_s32((int)(float)((float)(*(float *)&v231[1] * 262140.0) + 0.5) - v130
                                                                                              * v134);
                v142 = ((unint64_t)*(unsigned int *)(a5 + 20) >> 2) - v130;
                v143 = vmlaq_s32(vdupq_n_s32((int)(float)((float)(*((float *)&v231[1] + 3) * 262140.0) + 0.5)), vdupq_n_s32(v134), (int32x4_t)xmmword_1C9927540);
                v144 = *(float32x4_t **)(a5 + 24);
                v145.i64[0] = 0x2000000020000;
                v145.i64[1] = 0x2000000020000;
                do
                {
                  v146 = (float32x4_t *)((char *)v144 + 4 * v130);
                  do
                  {
                    v147 = vmlaq_s32(vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(v140, v145), 0x12uLL), v132), (int32x4_t)0), vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(v143, v145), 0x12uLL), v133), (int32x4_t)0), v136);
                    v147.i16[0] = BaseAddress[v147.i32[0]];
                    v147.i16[1] = BaseAddress[v147.i32[1]];
                    v147.i16[2] = BaseAddress[v147.i32[2]];
                    v147.i16[3] = BaseAddress[v147.i32[3]];
                    v148 = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v147.i8));
                    *v144++ = vmulq_n_f32((float32x4_t)vandq_s8((int8x16_t)v148, (int8x16_t)vcgeq_f32(v100, v148)), v229);
                    v140 = vaddq_s32(v140, v137);
                    v143 = vaddq_s32(v143, v138);
                  }
                  while (v144 < v146);
                  v144 = (float32x4_t *)((char *)v144 + 4 * v142);
                  v140 = vaddq_s32(v140, v139);
                  v143 = vaddq_s32(v143, v141);
                  ++v131;
                }
                while (v131 != v129);
              }
            }
          }
          goto LABEL_91;
        }
        if (v47 == 2)
        {
          CVPixelBufferLockBaseAddress(v44, 1uLL);
          LODWORD(v25) = CVPixelBufferGetWidth(v44);
          LODWORD(v13) = CVPixelBufferGetHeight(v44);
          LODWORD(v29) = CVPixelBufferGetBytesPerRow(v44);
          v46 = CVPixelBufferGetBaseAddress(v44);
          *(float *)v48.i32 = *(float *)(a2 + 112) * 0.001;
          *(float *)v49.i32 = *(float *)(a2 + 116) * 0.001;
          v227 = v49;
          v228 = v48;
          v50 = (float)((float)(1.0 / a6) - *(float *)v49.i32) / *(float *)v48.i32;
          *(float *)v51.i32 = nextafterf((float)*(int *)(a2 + 120), 0.0);
          if (v50 >= *(float *)v51.i32)
            v54 = *(float *)v51.i32;
          else
            v54 = v50;
          v55.i32[1] = v228.i32[1];
          if (*(float *)v228.i32 <= 0.0)
            *(float *)v55.i32 = 0.0;
          else
            *(float *)v55.i32 = v50;
          if (*(float *)v228.i32 <= 0.0)
            *(float *)v51.i32 = v54;
          v225 = v51;
          v226 = v55;
          v56 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
          if ((v56 & 1) != 0)
            goto LABEL_36;
          goto LABEL_97;
        }
LABEL_96:
        sub_1C98CFB60();
LABEL_97:
        if (__cxa_guard_acquire(&qword_1ED52ACD8))
        {
          sub_1C98CFF14();
          __cxa_guard_release(&qword_1ED52ACD8);
        }
LABEL_36:
        v57 = (float32x4_t)vdupq_lane_s32(v228, 0);
        v58 = (float32x4_t)vdupq_lane_s32(v227, 0);
        v59 = (float32x4_t)vdupq_lane_s32(v225, 0);
        v60 = (float32x4_t)vdupq_lane_s32(v226, 0);
        if (*(_BYTE *)(qword_1ED52ACB8 + 109))
        {
          v61 = *(_DWORD *)(a5 + 12);
          if (v61 >= 1)
          {
            v62 = *(_DWORD *)(a5 + 8);
            if (v62 >= 1)
            {
              v63 = 0;
              *(float *)v52.i32 = (float)((_DWORD)v25 - 1);
              v64 = (float32x4_t)vdupq_lane_s32(v52, 0);
              *(float *)v53.i32 = (float)((_DWORD)v13 - 1);
              v65 = (float32x4_t)vdupq_lane_s32(v53, 0);
              v66 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)v231 + 12), 0);
              v67 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v231[1], 0);
              v68 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)&v231[1] + 4), 0);
              __asm { FMOV            V26.4S, #4.0 }
              v74 = vmulq_n_f32(_Q26, *(float *)v231);
              v75 = vmulq_n_f32(_Q26, *((float *)v231 + 1));
              v76 = vdupq_n_s32(v29 >> 1);
              v77 = vmulq_n_f32(_Q26, *((float *)v231 + 2));
              v78 = vmlaq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vshrq_n_u64(*(uint64x2_t *)((char *)&v231[1] + 4), 0x20uLL), 0), (float32x4_t)xmmword_1C99275A0, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v231[0], 0));
              v79 = *(float32x4_t **)(a5 + 24);
              v80 = vmlaq_f32((float32x4_t)vdupq_laneq_s32(*(int32x4_t *)((char *)&v231[1] + 4), 2), (float32x4_t)xmmword_1C99275A0, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)v231 + 4), 0));
              v81 = vmlaq_f32((float32x4_t)vdupq_laneq_s32(*(int32x4_t *)((char *)&v231[1] + 4), 3), (float32x4_t)xmmword_1C99275A0, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)v231 + 8), 0));
              do
              {
                v82 = 0;
                v83 = v81;
                v84 = v80;
                v85 = v78;
                do
                {
                  v86 = vmlaq_s32(vcvtaq_s32_f32(vmaxnmq_f32(vminnmq_f32(vdivq_f32(v85, v83), v64), (float32x4_t)0)), vcvtaq_s32_f32(vmaxnmq_f32(vminnmq_f32(vdivq_f32(v84, v83), v65), (float32x4_t)0)), v76);
                  v86.i16[0] = v46[v86.i32[0]];
                  v86.i16[1] = v46[v86.i32[1]];
                  v86.i16[2] = v46[v86.i32[2]];
                  v86.i16[3] = v46[v86.i32[3]];
                  v87 = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v86.i8));
                  v88 = vandq_s8((int8x16_t)vcgeq_f32(v59, v87), (int8x16_t)vcgeq_f32(v87, v60));
                  v89 = vmlaq_f32(v58, v57, v87);
                  v90 = vrecpeq_f32(v89);
                  v91 = vmulq_f32(v90, vrecpsq_f32(v89, v90));
                  *v79++ = vdivq_f32((float32x4_t)vandq_s8((int8x16_t)vmulq_f32(v91, vrecpsq_f32(v89, v91)), v88), v83);
                  v85 = vaddq_f32(v74, v85);
                  v84 = vaddq_f32(v75, v84);
                  v83 = vaddq_f32(v77, v83);
                  v82 += 4;
                }
                while (v82 < v62);
                v78 = vaddq_f32(v66, v78);
                v80 = vaddq_f32(v67, v80);
                v81 = vaddq_f32(v68, v81);
                ++v63;
              }
              while (v63 != v61);
            }
          }
        }
        else
        {
          v149 = *(_DWORD *)(a5 + 12);
          if (v149 >= 1)
          {
            v150 = *(unsigned int *)(a5 + 8);
            if ((_DWORD)v150)
            {
              v151 = 0;
              v152 = vdupq_n_s32((int)v25 - 1);
              v153 = vdupq_n_s32((int)v13 - 1);
              v154 = (int)(float)((float)(*((float *)v231 + 1) * 262140.0) + 0.5);
              v155 = (int)(float)((float)(*(float *)v231 * 262140.0) + 0.5);
              v156 = vdupq_n_s32(v29 >> 1);
              v157 = vdupq_n_s32(4 * v155);
              v158 = vdupq_n_s32(4 * v154);
              v159 = vdupq_n_s32((int)(float)((float)(*((float *)v231 + 3) * 262140.0) + 0.5) - v150
                                                                                              * v155);
              v160 = vmlaq_s32(vdupq_n_s32((int)(float)((float)(*((float *)&v231[1] + 2) * 262140.0) + 0.5)), vdupq_n_s32(v155), (int32x4_t)xmmword_1C9927540);
              v161 = vdupq_n_s32((int)(float)((float)(*(float *)&v231[1] * 262140.0) + 0.5) - v150 * v154);
              v162 = ((unint64_t)*(unsigned int *)(a5 + 20) >> 2) - v150;
              v163 = vmlaq_s32(vdupq_n_s32((int)(float)((float)(*((float *)&v231[1] + 3) * 262140.0) + 0.5)), vdupq_n_s32(v154), (int32x4_t)xmmword_1C9927540);
              v164 = *(int8x16_t **)(a5 + 24);
              v165.i64[0] = 0x2000000020000;
              v165.i64[1] = 0x2000000020000;
              do
              {
                v166 = (int8x16_t *)((char *)v164 + 4 * v150);
                do
                {
                  v167 = vmlaq_s32(vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(v160, v165), 0x12uLL), v152), (int32x4_t)0), vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(v163, v165), 0x12uLL), v153), (int32x4_t)0), v156);
                  v167.i16[0] = v46[v167.i32[0]];
                  v167.i16[1] = v46[v167.i32[1]];
                  v167.i16[2] = v46[v167.i32[2]];
                  v167.i16[3] = v46[v167.i32[3]];
                  v168 = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v167.i8));
                  v169 = vandq_s8((int8x16_t)vcgeq_f32(v59, v168), (int8x16_t)vcgeq_f32(v168, v60));
                  v170 = vmlaq_f32(v58, v57, v168);
                  v171 = vrecpeq_f32(v170);
                  v172 = vmulq_f32(v171, vrecpsq_f32(v170, v171));
                  *v164++ = vandq_s8((int8x16_t)vmulq_f32(v172, vrecpsq_f32(v170, v172)), v169);
                  v160 = vaddq_s32(v160, v157);
                  v163 = vaddq_s32(v163, v158);
                }
                while (v164 < v166);
                v164 = (int8x16_t *)((char *)v164 + 4 * v162);
                v160 = vaddq_s32(v160, v159);
                v163 = vaddq_s32(v163, v161);
                ++v151;
              }
              while (v151 != v149);
            }
          }
        }
LABEL_91:
        v14 = 1;
        CVPixelBufferUnlockBaseAddress(v44, 1uLL);
        goto LABEL_92;
      }
      v125 = *(_DWORD *)(a2 + 124);
      if (v125 == 1)
      {
        v230 = *(float *)(a2 + 112);
        if ((_DWORD)PixelFormatType == 1717855600 || (_DWORD)PixelFormatType == 1278226534)
        {
          CVPixelBufferLockBaseAddress(v44, 1uLL);
          v173 = CVPixelBufferGetWidth(v44);
          v174 = CVPixelBufferGetHeight(v44);
          v175 = CVPixelBufferGetBytesPerRow(v44);
          v176 = CVPixelBufferGetBaseAddress(v44);
          v180 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
          if ((v180 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
          {
            sub_1C98CFF14();
            __cxa_guard_release(&qword_1ED52ACD8);
          }
          *(float *)v177.i32 = a6 / v230;
          v181 = (float32x4_t)vdupq_lane_s32(v177, 0);
          v182 = v173 - 1;
          if (*(_BYTE *)(qword_1ED52ACB8 + 109))
          {
            v183 = *(_DWORD *)(a5 + 12);
            if (v183 >= 1)
            {
              v184 = *(_DWORD *)(a5 + 8);
              if (v184 >= 1)
              {
                v185 = 0;
                *(float *)v178.i32 = (float)v182;
                v186 = (float32x4_t)vdupq_lane_s32(v178, 0);
                *(float *)v179.i32 = (float)(v174 - 1);
                v187 = (float32x4_t)vdupq_lane_s32(v179, 0);
                v188 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)v231 + 12), 0);
                v189 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v231[1], 0);
                v190 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)&v231[1] + 4), 0);
                __asm { FMOV            V23.4S, #4.0 }
                v192 = vmulq_n_f32(_Q23, *(float *)v231);
                v193 = vmulq_n_f32(_Q23, *((float *)v231 + 1));
                v194 = vdupq_n_s32(v175 >> 2);
                v195 = vmulq_n_f32(_Q23, *((float *)v231 + 2));
                v196 = vmlaq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vshrq_n_u64(*(uint64x2_t *)((char *)&v231[1] + 4), 0x20uLL), 0), (float32x4_t)xmmword_1C99275A0, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v231[0], 0));
                v197 = *(float32x4_t **)(a5 + 24);
                v198 = vmlaq_f32((float32x4_t)vdupq_laneq_s32(*(int32x4_t *)((char *)&v231[1] + 4), 2), (float32x4_t)xmmword_1C99275A0, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)v231 + 4), 0));
                v199 = vmlaq_f32((float32x4_t)vdupq_laneq_s32(*(int32x4_t *)((char *)&v231[1] + 4), 3), (float32x4_t)xmmword_1C99275A0, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)v231 + 8), 0));
                do
                {
                  v200 = 0;
                  v201 = v199;
                  v202 = v198;
                  v203 = v196;
                  do
                  {
                    v204 = (float32x4_t)vmlaq_s32(vcvtaq_s32_f32(vmaxnmq_f32(vminnmq_f32(vdivq_f32(v203, v201), v186), (float32x4_t)0)), vcvtaq_s32_f32(vmaxnmq_f32(vminnmq_f32(vdivq_f32(v202, v201), v187), (float32x4_t)0)), v194);
                    v204.i32[0] = v176[v204.i32[0]];
                    v204.i32[1] = v176[v204.i32[1]];
                    v204.i32[2] = v176[v204.i32[2]];
                    v204.i32[3] = v176[v204.i32[3]];
                    *v197++ = vdivq_f32(vmulq_n_f32((float32x4_t)vandq_s8((int8x16_t)v204, (int8x16_t)vcgeq_f32(v181, v204)), v230), v201);
                    v203 = vaddq_f32(v192, v203);
                    v202 = vaddq_f32(v193, v202);
                    v201 = vaddq_f32(v195, v201);
                    v200 += 4;
                  }
                  while (v200 < v184);
                  v196 = vaddq_f32(v188, v196);
                  v198 = vaddq_f32(v189, v198);
                  v199 = vaddq_f32(v190, v199);
                  ++v185;
                }
                while (v185 != v183);
              }
            }
          }
          else
          {
            v205 = *(_DWORD *)(a5 + 12);
            if (v205 >= 1)
            {
              v206 = *(unsigned int *)(a5 + 8);
              if ((_DWORD)v206)
              {
                v207 = 0;
                v208 = vdupq_n_s32(v182);
                v209 = vdupq_n_s32(v174 - 1);
                v210 = (int)(float)((float)(*((float *)v231 + 1) * 262140.0) + 0.5);
                v211 = (int)(float)((float)(*(float *)v231 * 262140.0) + 0.5);
                v212 = vdupq_n_s32(v175 >> 2);
                v213 = vdupq_n_s32(4 * v211);
                v214 = vdupq_n_s32(4 * v210);
                v215 = vdupq_n_s32((int)(float)((float)(*((float *)v231 + 3) * 262140.0) + 0.5) - v206
                                                                                                * v211);
                v216 = vmlaq_s32(vdupq_n_s32((int)(float)((float)(*((float *)&v231[1] + 2) * 262140.0) + 0.5)), vdupq_n_s32(v211), (int32x4_t)xmmword_1C9927540);
                v217 = vdupq_n_s32((int)(float)((float)(*(float *)&v231[1] * 262140.0) + 0.5) - v206
                                                                                              * v210);
                v218 = ((unint64_t)*(unsigned int *)(a5 + 20) >> 2) - v206;
                v219 = vmlaq_s32(vdupq_n_s32((int)(float)((float)(*((float *)&v231[1] + 3) * 262140.0) + 0.5)), vdupq_n_s32(v210), (int32x4_t)xmmword_1C9927540);
                v220 = *(float32x4_t **)(a5 + 24);
                v221.i64[0] = 0x2000000020000;
                v221.i64[1] = 0x2000000020000;
                do
                {
                  v222 = (float32x4_t *)((char *)v220 + 4 * v206);
                  do
                  {
                    v223 = (float32x4_t)vmlaq_s32(vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(v216, v221), 0x12uLL), v208), (int32x4_t)0), vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(v219, v221), 0x12uLL), v209), (int32x4_t)0), v212);
                    v223.i32[0] = v176[v223.i32[0]];
                    v223.i32[1] = v176[v223.i32[1]];
                    v223.i32[2] = v176[v223.i32[2]];
                    v223.i32[3] = v176[v223.i32[3]];
                    *v220++ = vmulq_n_f32((float32x4_t)vandq_s8((int8x16_t)v223, (int8x16_t)vcgeq_f32(v181, v223)), v230);
                    v216 = vaddq_s32(v216, v213);
                    v219 = vaddq_s32(v219, v214);
                  }
                  while (v220 < v222);
                  v220 = (float32x4_t *)((char *)v220 + 4 * v218);
                  v216 = vaddq_s32(v216, v215);
                  v219 = vaddq_s32(v219, v217);
                  ++v207;
                }
                while (v207 != v205);
              }
            }
          }
          goto LABEL_91;
        }
        sub_1C98FE490();
        v127 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v127, OS_LOG_TYPE_ERROR))
        {
          buf[0] = 67109120;
          buf[1] = (_DWORD)v46;
          v128 = "unknown depth buffer format (%u)";
          goto LABEL_95;
        }
      }
      else
      {
        if (v125 != 2)
          goto LABEL_96;
        v126 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
        if ((v126 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
        {
          qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
          __cxa_guard_release(&qword_1ED52ACD0);
        }
        v127 = (id)qword_1ED52ACE0;
        if (os_log_type_enabled(v127, OS_LOG_TYPE_ERROR))
        {
          buf[0] = 67109120;
          buf[1] = (_DWORD)v46;
          v128 = "unknown depth buffer format (%u) for normalized disparity";
LABEL_95:
          _os_log_error_impl(&dword_1C9870000, v127, OS_LOG_TYPE_ERROR, v128, (uint8_t *)buf, 8u);
        }
      }

      v14 = 0;
LABEL_92:
      kdebug_trace();
      return v14;
    }
    return 0;
  }
  return v14;
}

void sub_1C98BDE74(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1ED52ACD8);
  kdebug_trace();
  _Unwind_Resume(a1);
}

float *sub_1C98BDEBC(float *result, uint64_t a2)
{
  float *v2;
  float *v3;
  float *v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  uint64_t v11;
  int v12;

  v2 = result;
  v3 = *(float **)(a2 + 8);
  if (v3 == result)
  {
    v12 = 0;
    v11 = 0;
    result = (float *)sub_1C98BDEBC(&v11);
    *(_QWORD *)v2 = v11;
    *((_DWORD *)v2 + 2) = v12;
  }
  else
  {
    v4 = ***(float ****)a2;
    v5 = v4[6];
    v6 = v4[7];
    v7 = v4[3];
    v8 = v4[4];
    v9 = v4[5];
    v10 = v4[8];
    *result = (float)((float)(0.0 - (float)(*v4 * *v3)) - (float)(v4[1] * v3[1])) - (float)(v4[2] * v3[2]);
    result[1] = (float)((float)(0.0 - (float)(v7 * *v3)) - (float)(v8 * v3[1])) - (float)(v9 * v3[2]);
    result[2] = (float)((float)(0.0 - (float)(v5 * *v3)) - (float)(v6 * v3[1])) - (float)(v10 * v3[2]);
  }
  return result;
}

float *sub_1C98BDF7C(float *result, uint64_t a2)
{
  float *v2;
  float *v3;
  float *v4;
  float v5;
  float v6;
  uint64_t v7;

  v2 = result;
  v3 = *(float **)(a2 + 8);
  if (v3 == result)
  {
    v7 = 0;
    result = (float *)sub_1C98BDF7C(&v7);
    *(_QWORD *)v2 = v7;
  }
  else
  {
    v4 = **(float ***)a2;
    v5 = v4[1];
    v6 = v4[3];
    *result = (float)(0.0 - (float)(*v4 * *v3)) - (float)(v4[2] * v3[1]);
    result[1] = (float)(0.0 - (float)(v5 * *v3)) - (float)(v6 * v3[1]);
  }
  return result;
}

float *sub_1C98BDFF8(float *result, uint64_t **a2)
{
  float *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  float *v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  float *v17;
  uint64_t v18;
  float *v19;
  float v20;
  float *v21;
  uint64_t v22;
  float v23;
  __int128 v24;

  v2 = result;
  v3 = **a2;
  if ((float *)(v3 - 4 * *((unsigned int *)*a2 + 3)) == result)
  {
    v24 = 0uLL;
    result = (float *)sub_1C98BDFF8(&v24);
    *(_OWORD *)v2 = v24;
  }
  else
  {
    v4 = *((unsigned int *)*a2 + 2);
    if ((_DWORD)v4)
    {
      v5 = 0;
      v6 = *a2[1];
      v7 = *(unsigned int *)(v6 + 8);
      v8 = *(float **)v6;
      v9 = 4 * (3 * v4);
      v10 = 4 * v4;
      v11 = 4 * v7;
      v12 = 0.0;
      v13 = v8;
      do
      {
        v12 = v12 + (float)(*(float *)(v3 + v5) * *v13);
        v5 += v10;
        v13 = (float *)((char *)v13 + v11);
      }
      while (v9 != v5);
      v14 = 0;
      *result = v12;
      v15 = v3 + 4;
      v16 = 0.0;
      v17 = v8;
      do
      {
        v16 = v16 + (float)(*(float *)(v15 + v14) * *v17);
        v14 += v10;
        v17 = (float *)((char *)v17 + v11);
      }
      while (v9 != v14);
      v18 = 0;
      result[1] = v16;
      v19 = v8 + 1;
      v20 = 0.0;
      v21 = v19;
      do
      {
        v20 = v20 + (float)(*(float *)(v3 + v18) * *v21);
        v18 += v10;
        v21 = (float *)((char *)v21 + v11);
      }
      while (v9 != v18);
      v22 = 0;
      result[2] = v20;
      v23 = 0.0;
      do
      {
        v23 = v23 + (float)(*(float *)(v15 + v22) * *v19);
        v22 += v10;
        v19 = (float *)((char *)v19 + v11);
      }
      while (v9 != v22);
    }
    else
    {
      *(_QWORD *)result = 0;
      v23 = 0.0;
      result[2] = 0.0;
    }
    result[3] = v23;
  }
  return result;
}

double sub_1C98BE138(uint64_t a1, float **a2)
{
  float *v3;
  float *v4;
  double result;
  __int128 v6;

  v3 = *a2;
  if (*a2 == (float *)a1 || (v4 = a2[1], v4 == (float *)a1))
  {
    v6 = 0uLL;
    sub_1C98BE138(&v6);
    result = *(double *)&v6;
    *(_OWORD *)a1 = v6;
  }
  else
  {
    *(float *)a1 = (float)((float)(*v3 * *v4) + 0.0) + (float)(v3[2] * v4[1]);
    *(float *)(a1 + 4) = (float)((float)(v3[1] * *v4) + 0.0) + (float)(v3[3] * v4[1]);
    *(float *)(a1 + 8) = (float)((float)(*v3 * v4[2]) + 0.0) + (float)(v3[2] * v4[3]);
    *(float *)&result = (float)((float)(v3[1] * v4[2]) + 0.0) + (float)(v3[3] * v4[3]);
    *(_DWORD *)(a1 + 12) = LODWORD(result);
  }
  return result;
}

void sub_1C98BE1F0(cva::DictionaryHandler **a1, uint64_t *a2, uint64_t *a3)
{
  unsigned __int8 v4;
  _BOOL4 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  NSObject *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  int v20;
  int v21;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  int v29;
  float32x2_t v30;
  float32x2_t v31;
  unsigned __int8 v32;
  NSObject *v33;
  uint64_t v35;
  int v36;
  double Seconds;
  unsigned __int8 v38;
  unsigned __int8 v39;
  NSObject *v40;
  uint64_t v41;
  int v42;
  double v43;
  int Width;
  __CVBuffer *v45;
  int Height;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  size_t v50;
  _DWORD *v51;
  char *v52;
  _QWORD *v53;
  uint64_t *v54;
  uint64_t *v55;
  float v56;
  float v57;
  int v58;
  float v59;
  float v60;
  float v61;
  float v62;
  uint64_t v63;
  uint64_t v64;
  unsigned __int8 v65;
  NSObject *v66;
  uint64_t v67;
  int v68;
  double v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t i;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  int v77;
  __int128 v78;
  uint64_t v79;
  __int128 **v80;
  __int128 *v81;
  __int128 *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  float *v89;
  uint64_t v90;
  uint64_t *v91;
  float *v92;
  unint64_t v93;
  float v94;
  float v95;
  double v96;
  float v97;
  float v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  float v109;
  float v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  float v116;
  float v117;
  float v119;
  BOOL v120;
  float v121;
  float v122;
  unint64_t v123;
  unsigned __int8 v124;
  NSObject *v125;
  _BOOL4 v126;
  _QWORD *v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  const char *v131;
  unint64_t *v132;
  unint64_t v133;
  _QWORD *v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  const char *v138;
  unint64_t *v139;
  unint64_t v140;
  _QWORD *v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  const char *v145;
  unint64_t *v146;
  unint64_t v147;
  _QWORD *v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  const char *v152;
  unint64_t *v153;
  unint64_t v154;
  __int128 *v155;
  __int128 *v156;
  __int128 v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  char *v164;
  char *v165;
  uint64_t v166;
  float32x4_t v168;
  uint64_t (**v171)();
  uint64_t (**v172)();
  char *v174;
  int v175;
  float32x2_t v176;
  float32x2_t v177;
  __int128 v178;
  uint64_t v180;
  float32x2_t v181;
  uint64_t v182;
  _QWORD **v183;
  _QWORD **v184;
  float64x2_t v185;
  float64x2_t v186;
  BOOL v187;
  float v188;
  _QWORD *v189;
  float32x2_t v190;
  float64x2_t v191;
  float32x2_t v192;
  int32x2_t v193;
  int8x16_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float32x2_t v197;
  BOOL v198;
  float v199;
  BOOL v200;
  float v201;
  float v202;
  float32x4_t v203;
  int8x16_t v204;
  float32x2_t v205;
  float32x2_t v206;
  int8x8_t v207;
  _QWORD *v208;
  uint64_t v209;
  uint64_t *v210;
  uint64_t v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  unint64_t v220;
  char *v221;
  char *v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t (**v225)();
  uint64_t (**v226)();
  uint64_t v227;
  unint64_t v228;
  char *v229;
  char *v230;
  _OWORD *v231;
  char *v232;
  char *v233;
  __int128 v234;
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  uint64_t **v241;
  uint64_t **v242;
  const std::nothrow_t *v243;
  unint64_t v244;
  void *v245;
  void *v246;
  uint64_t v247;
  __int128 *v248;
  void **v249;
  uint64_t v250;
  unint64_t v251;
  _QWORD *v252;
  uint64_t v253;
  unint64_t v254;
  _BYTE *v255;
  uint64_t v256;
  unint64_t v257;
  unint64_t v258;
  unint64_t v259;
  unint64_t v260;
  char *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  _OWORD *v265;
  char *v266;
  uint64_t v267;
  char *v268;
  char *v269;
  _QWORD *v270;
  _QWORD *v271;
  __int128 v272;
  void *v273;
  void *v274;
  std::__shared_weak_count *v275;
  unint64_t *v276;
  unint64_t v277;
  _QWORD *v278;
  _OWORD *v279;
  _OWORD *v280;
  __n128 **v281;
  __n128 *v282;
  uint64_t v283;
  unint64_t v284;
  int v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  float v291;
  float v292;
  float v293;
  float v294;
  uint64_t v295;
  uint64_t v296;
  float v297;
  float v298;
  __int128 v299;
  __int128 v300;
  std::__shared_weak_count *v301;
  unint64_t *v302;
  unint64_t v303;
  __int128 v304;
  std::__shared_weak_count *v305;
  unint64_t *v306;
  unint64_t v307;
  unint64_t v308;
  int v309;
  __n128 *v310;
  uint64_t *v311;
  __n128 *v312;
  unint64_t v313;
  unint64_t *v314;
  unint64_t v315;
  __n128 *v316;
  unsigned __int8 v317;
  NSObject *v318;
  uint64_t v319;
  _QWORD *v320;
  std::__shared_weak_count *v321;
  unint64_t *v322;
  unint64_t v323;
  const char *v324;
  uint64_t v325;
  float v326;
  float v327;
  float v328;
  float v329;
  unsigned __int8 v330;
  NSObject *v331;
  uint64_t v332;
  _QWORD *v333;
  std::__shared_weak_count *v334;
  unint64_t *v335;
  unint64_t v336;
  const char *v337;
  unint64_t *v338;
  unint64_t v339;
  unint64_t *v340;
  unint64_t v341;
  char *v342;
  char *v343;
  std::__shared_weak_count *v344;
  unint64_t *v345;
  unint64_t v346;
  unint64_t v347;
  uint64_t v348;
  int v349;
  int v350;
  char *v351;
  char *v352;
  int v353;
  float v354;
  uint64_t v355;
  int v356;
  int v357;
  int v358;
  uint64_t PixelFormatType;
  uint64_t v360;
  uint64_t v361;
  char *v362;
  char *v363;
  char *v364;
  uint64_t v365;
  unint64_t v366;
  char *v367;
  unint64_t v368;
  char *v369;
  uint64_t v370;
  int v371;
  uint64_t v372;
  int v373;
  unint64_t v374;
  _QWORD *v375;
  char *v376;
  char *v377;
  uint64_t v378;
  unint64_t v379;
  _QWORD *v380;
  uint64_t v381;
  unint64_t v382;
  uint64_t v383;
  unint64_t v384;
  char *v385;
  char *v386;
  char *v387;
  unint64_t v388;
  uint64_t v390;
  char *v391;
  char *v392;
  uint64_t v393;
  __int128 v394;
  uint64_t v395;
  char *v396;
  __CVBuffer *v397;
  __CVBuffer *v398;
  int v399;
  __IOSurface *IOSurface;
  unsigned __int8 v401;
  NSObject *v402;
  int v403;
  void *v404;
  int v405;
  char *v406;
  int v407;
  char *v408;
  float v409;
  float v410;
  float v411;
  float v412;
  float v413;
  void *v414;
  float v415;
  unint64_t v416;
  float *v417;
  float *v418;
  unint64_t v419;
  unint64_t v420;
  unint64_t v421;
  char *v422;
  float *v423;
  uint64_t v424;
  char *v425;
  char *v426;
  char *v427;
  _QWORD *v428;
  _QWORD *v429;
  uint64_t v430;
  std::__shared_weak_count *v431;
  unint64_t *v432;
  unint64_t v433;
  uint64_t v434;
  unsigned __int8 v435;
  NSObject *v436;
  const char *v437;
  uint64_t v438;
  uint64_t v439;
  BOOL v440;
  __CVBuffer *v441;
  __CVBuffer *v442;
  unsigned int v443;
  unsigned int v444;
  unsigned int v445;
  unsigned int v446;
  uint64_t v447;
  int32x2_t v448;
  int v449;
  CFStringRef v450;
  CFStringRef v451;
  unsigned __int8 v452;
  NSObject *v453;
  unsigned __int8 v454;
  NSObject *v455;
  unsigned __int8 v456;
  unsigned __int8 v457;
  unsigned __int8 v458;
  unsigned __int8 v459;
  _BYTE *v460;
  void **v461;
  char *v462;
  char *v463;
  uint64_t v464;
  _QWORD *v465;
  uint64_t v466;
  _QWORD *v467;
  _QWORD *v468;
  uint64_t v469;
  unint64_t v470;
  uint64_t v471;
  uint64_t v472;
  unint64_t v473;
  unint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  unint64_t v478;
  char *v479;
  char *v480;
  char *v481;
  uint64_t v482;
  _QWORD *v483;
  char *v484;
  char *v485;
  char *v486;
  uint64_t v487;
  char *v488;
  char *v489;
  char *v490;
  void *v491;
  uint64_t v492;
  void *v493;
  uint64_t v494;
  _QWORD *v495;
  uint64_t v496;
  unsigned __int8 v497;
  NSObject *v498;
  _QWORD *v499;
  _QWORD *v500;
  void *v502;
  uint64_t v503;
  uint64_t *v505;
  uint64_t v506;
  std::__shared_weak_count *v507;
  unint64_t *v508;
  unint64_t v509;
  unint64_t v510;
  char *v511;
  uint64_t v512;
  std::__shared_weak_count *v513;
  unint64_t *v514;
  unint64_t v515;
  uint64_t v516;
  std::__shared_weak_count *v517;
  unint64_t *v518;
  unint64_t v519;
  unint64_t *v520;
  unint64_t v521;
  uint64_t v522;
  std::__shared_weak_count *v523;
  unint64_t *v524;
  unint64_t v525;
  unint64_t *v526;
  unint64_t v527;
  unint64_t *v528;
  unint64_t v529;
  unint64_t *v530;
  uint64_t v531;
  uint64_t v532;
  std::__shared_weak_count *v533;
  unint64_t *v534;
  unint64_t v535;
  unint64_t *v536;
  unint64_t v537;
  std::__shared_weak_count *v538;
  uint64_t *v539;
  unint64_t *v540;
  unint64_t v541;
  unint64_t v542;
  uint64_t v543;
  std::__shared_weak_count *v544;
  unint64_t *v545;
  unint64_t v546;
  unint64_t *v547;
  unint64_t v548;
  int8x16_t v549;
  uint64_t v550;
  void *v551;
  unint64_t *v552;
  uint64_t v553;
  unint64_t *v554;
  unint64_t v555;
  uint64_t v556;
  BOOL v557;
  uint64_t v558;
  void *v559;
  void *v560;
  uint64_t v561;
  uint64_t *v562;
  __int128 v563;
  std::__shared_weak_count *v564;
  unint64_t *v565;
  unint64_t v566;
  unint64_t *v567;
  unint64_t v568;
  unint64_t *v569;
  unint64_t v570;
  std::__shared_weak_count *v571;
  unint64_t *v572;
  unint64_t v573;
  uint64_t v574;
  unint64_t *v575;
  unint64_t v576;
  std::__shared_weak_count *v577;
  unint64_t *v578;
  _QWORD *v579;
  unint64_t *v580;
  unint64_t v581;
  unint64_t v582;
  _QWORD *v583;
  char *v584;
  uint64_t v585;
  std::__shared_weak_count *v586;
  unint64_t *v587;
  unint64_t v588;
  int v589;
  int8x16_t v590;
  int v591;
  uint64_t v592;
  signed int v593;
  unsigned int v594;
  __CVBuffer *v595;
  uint64_t v596;
  uint64_t v597;
  double v598;
  unsigned __int8 v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  signed int v603;
  unsigned __int8 v604;
  int32x4_t v606;
  int v607;
  int v608;
  uint64_t v609;
  int32x4_t v610;
  int32x4_t v611;
  char *v615;
  int v618;
  unsigned int v620;
  unsigned int v621;
  unsigned int v622;
  int32x4_t v624;
  int32x4_t v625;
  int32x4_t v626;
  uint64_t v627;
  int32x4_t v628;
  int32x4_t v629;
  int32x4_t v630;
  int32x4_t v631;
  char *v632;
  int32x4_t v633;
  int8x16_t v634;
  int32x4_t v635;
  int32x4_t v636;
  int32x4_t v637;
  int32x4_t v638;
  int32x4_t v639;
  int32x4_t v640;
  int32x4_t v641;
  int32x4_t v642;
  uint64_t v643;
  unsigned int v644;
  uint64_t v645;
  unsigned int v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  int32x4_t v651;
  int32x4_t v652;
  int32x4_t v653;
  int16x8_t v654;
  int v655;
  int v656;
  int32x2_t v657;
  int32x2_t v658;
  uint32x4_t v659;
  int v660;
  float32x4_t v661;
  float32x4_t v662;
  float32x4_t v663;
  float32x4_t v664;
  float32x4_t v665;
  float32x4_t v666;
  float32x4_t v667;
  float32x4_t v668;
  int32x4_t v669;
  uint64_t v670;
  uint64_t v671;
  float32x4_t v672;
  float32x4_t v673;
  float32x4_t v674;
  uint64_t v675;
  float32x4_t v676;
  float32x4_t v677;
  float32x4_t v678;
  int8x16_t v679;
  float32x4_t v680;
  float32x4_t v681;
  int32x4_t v682;
  int32x4_t v683;
  float32x4_t v684;
  int32x4_t v685;
  float32x4_t v686;
  float32x4_t v687;
  int32x4_t v688;
  __int8 *v689;
  __int8 *v690;
  __int8 *v691;
  __int8 *v692;
  int8x16_t v693;
  float32x4_t v694;
  __int8 *v695;
  __int8 *v696;
  __int8 *v697;
  uint32x4_t v698;
  __int8 *v699;
  int16x8_t v700;
  unsigned int BytesPerRowOfPlane;
  int WidthOfPlane;
  int HeightOfPlane;
  char *BaseAddressOfPlane;
  unsigned __int8 v705;
  NSObject *v706;
  unsigned __int8 v707;
  char v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  char *v712;
  __int128 v713;
  unint64_t *v714;
  unint64_t v715;
  char *v716;
  int v717;
  int v718;
  int32x2_t v719;
  int32x2_t v720;
  int v721;
  int32x4_t v722;
  float32x4_t v723;
  float32x4_t v724;
  float32x4_t v725;
  float32x4_t v726;
  float32x4_t v727;
  float32x4_t v728;
  float32x4_t v729;
  float32x4_t v730;
  uint64_t v731;
  float32x4_t v732;
  float32x4_t v733;
  float32x4_t v734;
  uint64_t v735;
  float32x4_t v736;
  float32x4_t v737;
  float32x4_t v738;
  float32x4_t v739;
  float32x4_t v740;
  int32x4_t v741;
  int32x4_t v742;
  float32x4_t v743;
  int32x4_t v744;
  float32x4_t v745;
  int32x4_t v746;
  __int16 *v747;
  __int16 *v748;
  float32x4_t v749;
  __int16 *v750;
  __int16 *v751;
  float32x4_t v752;
  __int16 *v753;
  __int16 *v754;
  __int16 *v755;
  __int16 *v756;
  uint16x4_t v757;
  int16x8_t v758;
  std::__shared_weak_count *v759;
  unint64_t *v760;
  unint64_t v761;
  _DWORD *v762;
  std::__shared_weak_count *v763;
  unint64_t *v764;
  unint64_t v765;
  _DWORD *v766;
  unint64_t *v767;
  unint64_t v768;
  uint64_t v769;
  unint64_t v770;
  std::__shared_weak_count *v771;
  unint64_t *v772;
  unint64_t v773;
  unint64_t v774;
  unint64_t *v775;
  unint64_t v776;
  unint64_t *v777;
  unint64_t v778;
  std::__shared_weak_count *v779;
  uint64_t v780;
  unint64_t *v781;
  unint64_t v782;
  unint64_t *v783;
  unint64_t v784;
  __int128 v785;
  uint64_t v786;
  unint64_t *v787;
  unint64_t v788;
  std::__shared_weak_count *v789;
  unint64_t *v790;
  unint64_t v791;
  unsigned __int8 v792;
  NSObject *v793;
  char *v794;
  char *v795;
  void (***v796)(char *);
  void (**v797)(char *);
  unint64_t v798;
  _QWORD *v799;
  uint64_t *v800;
  std::__shared_weak_count *v801;
  uint64_t v802;
  unint64_t *v803;
  unint64_t v804;
  unint64_t v805;
  cva::DictionaryHandler *v806;
  int v807;
  std::__shared_weak_count *v808;
  unint64_t *v809;
  _QWORD *v810;
  _QWORD *v811;
  uint64_t v812;
  unint64_t v813;
  unint64_t v814;
  std::__shared_weak_count *v815;
  unint64_t *v816;
  unint64_t v817;
  char *v818;
  char *v819;
  std::__shared_weak_count *v820;
  unint64_t *v821;
  unint64_t v822;
  _QWORD *v823;
  void *v824;
  char *v825;
  char *v826;
  void *v827;
  _QWORD *v828;
  _QWORD *v829;
  _QWORD *v830;
  void *v831;
  std::__shared_weak_count *v832;
  unint64_t *v833;
  unint64_t v834;
  std::__shared_weak_count *v835;
  unint64_t *v836;
  unint64_t v837;
  _BOOL4 v838;
  char *v839;
  char *v840;
  uint64_t v841;
  std::__shared_weak_count *v842;
  void *v843;
  unint64_t *v844;
  unint64_t v845;
  uint64_t v846;
  BOOL v847;
  uint64_t v848;
  uint64_t v849;
  unint64_t *v850;
  unint64_t v851;
  unint64_t *v852;
  unint64_t v853;
  unint64_t v854;
  std::__shared_weak_count *v855;
  unint64_t *v856;
  unint64_t v857;
  _QWORD *v858;
  int v859;
  int v860;
  int32x2_t v861;
  float v862;
  int32x2_t v863;
  uint64_t v864;
  float32x4_t *v865;
  float32x4_t *v866;
  float32x4_t *v867;
  uint64_t v868;
  float32x4_t v869;
  float32x4_t v870;
  float32x4_t *v871;
  float32x4_t *v872;
  float32x4_t *v873;
  uint64_t v874;
  float32x4_t v875;
  uint64_t v876;
  uint64_t v877;
  float *v878;
  float *v879;
  float *v880;
  float v881;
  float v882;
  float v883;
  uint64_t v884;
  float32x4_t *v885;
  float32x4_t *v886;
  float32x4_t *v887;
  uint64_t v888;
  float32x4_t v889;
  float32x4_t v890;
  float32x4_t *v891;
  float32x4_t *v892;
  float32x4_t *v893;
  uint64_t v894;
  float32x4_t v895;
  uint64_t v896;
  uint64_t v897;
  float *v898;
  float *v899;
  float *v900;
  float v901;
  float v902;
  float v903;
  uint64_t v904;
  float32x4_t *v905;
  float32x4_t *v906;
  float32x4_t *v907;
  uint64_t v908;
  float32x4_t v909;
  float32x4_t v910;
  float32x4_t *v911;
  float32x4_t *v912;
  float32x4_t *v913;
  uint64_t v914;
  float32x4_t v915;
  uint64_t v916;
  uint64_t v917;
  float *v918;
  float *v919;
  float *v920;
  float v921;
  float v922;
  float v923;
  float32x4_t v924;
  _BYTE *v925;
  uint64_t v926;
  unint64_t *v927;
  unint64_t v928;
  std::__shared_weak_count *v929;
  unint64_t *v930;
  unint64_t v931;
  char *v932;
  uint64_t v933;
  __int128 v934;
  uint64_t v935;
  unint64_t *v936;
  unint64_t v937;
  uint64_t v938;
  std::__shared_weak_count *v939;
  unint64_t *v940;
  unint64_t v941;
  uint64_t *v942;
  uint64_t v943;
  unsigned __int8 v944;
  uint64_t v945;
  uint64_t v946;
  void *v947;
  std::__shared_weak_count *v948;
  unint64_t *v949;
  unint64_t v950;
  int v951;
  uint64_t v952;
  __int128 v953;
  unint64_t *v954;
  unint64_t v955;
  uint64_t v956;
  std::__shared_weak_count *v957;
  unint64_t *v958;
  unint64_t v959;
  std::__shared_weak_count *v960;
  float *v961;
  unint64_t *v962;
  unint64_t v963;
  unint64_t *v964;
  unint64_t v965;
  float *v966;
  float v967;
  float v968;
  __float2 v969;
  __float2 v970;
  __float2 v971;
  uint64_t v972;
  float *v973;
  float v974;
  float v975;
  float v976;
  unsigned __int8 v977;
  NSObject *v978;
  std::__shared_weak_count *v979;
  unint64_t v980;
  uint64_t v981;
  uint64_t v982;
  float v983;
  uint64_t v984;
  __int128 v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  float *v989;
  float v990;
  __CVBuffer *v991;
  OSType v992;
  OSType v993;
  int v994;
  int v995;
  int v996;
  int v997;
  char *v998;
  int32x2_t v999;
  int32x2_t v1000;
  float v1001;
  int32x2_t v1002;
  int32x2_t v1003;
  float v1004;
  uint64_t v1005;
  uint64_t v1006;
  float v1007;
  float *v1008;
  float v1009;
  uint64_t v1010;
  float v1011;
  int32x2_t v1012;
  int32x2_t v1013;
  BOOL v1014;
  int v1016;
  int v1017;
  unsigned int v1018;
  __int16 *v1019;
  int v1020;
  uint16x4_t v1021;
  float32x4_t v1022;
  int8x16_t v1023;
  float32x4_t v1024;
  float32x4_t v1025;
  float32x4_t v1026;
  float32x4_t v1027;
  float32x4_t v1028;
  float32x4_t v1029;
  float32x2_t v1030;
  int8x16_t v1031;
  float v1032;
  float *v1033;
  uint64_t v1034;
  uint64_t v1035;
  unint64_t v1036;
  unint64_t v1037;
  _BYTE *v1038;
  float *v1039;
  unint64_t v1040;
  float *v1041;
  int v1042;
  uint64_t v1043;
  _OWORD *v1044;
  float *v1045;
  uint64_t v1046;
  __int128 v1047;
  int v1048;
  int v1049;
  int v1050;
  char *v1051;
  int32x2_t v1052;
  uint64_t v1053;
  char *v1054;
  uint64_t v1055;
  float v1056;
  float v1057;
  float *v1058;
  uint64_t v1059;
  float v1060;
  int32x2_t v1061;
  int32x2_t v1062;
  BOOL v1063;
  int v1065;
  int v1066;
  unsigned int v1067;
  __int16 *v1068;
  int v1069;
  uint16x4_t v1070;
  float32x4_t v1071;
  float32x4_t v1072;
  float32x4_t v1073;
  float32x4_t v1074;
  float32x4_t v1075;
  float32x2_t v1076;
  int8x16_t v1077;
  float v1078;
  uint64_t v1079;
  uint64_t v1080;
  unint64_t v1081;
  unint64_t v1082;
  _BYTE *v1083;
  float *v1084;
  unint64_t v1085;
  float *v1086;
  unint64_t v1087;
  int v1088;
  uint64_t v1089;
  _OWORD *v1090;
  float *v1091;
  uint64_t v1092;
  __int128 v1093;
  int v1094;
  unsigned __int8 v1095;
  uint64_t v1096;
  NSObject *v1097;
  const char *v1098;
  int v1099;
  int v1100;
  int BytesPerRow;
  char *BaseAddress;
  int32x2_t v1103;
  uint64_t v1104;
  char *v1105;
  uint64_t v1106;
  float v1107;
  float v1108;
  float *v1109;
  uint64_t v1110;
  float v1111;
  int32x2_t v1112;
  int32x2_t v1113;
  BOOL v1114;
  int v1116;
  int v1117;
  unsigned int v1118;
  __int32 *v1119;
  int v1120;
  int8x16_t v1121;
  float32x4_t v1122;
  float32x4_t v1123;
  float32x4_t v1124;
  float32x4_t v1125;
  float32x2_t v1126;
  int8x16_t v1127;
  float v1128;
  uint64_t v1129;
  uint64_t v1130;
  unint64_t v1131;
  unint64_t v1132;
  _BYTE *v1133;
  float *v1134;
  unint64_t v1135;
  float *v1136;
  unint64_t v1137;
  int v1138;
  uint64_t v1139;
  _OWORD *v1140;
  float *v1141;
  uint64_t v1142;
  __int128 v1143;
  int v1144;
  unint64_t v1145;
  float v1146;
  int v1147;
  float *v1148;
  int v1149;
  float *v1150;
  int v1151;
  uint64_t v1152;
  uint64_t v1153;
  double v1154;
  unsigned __int8 v1155;
  uint64_t v1156;
  NSObject *v1157;
  const char *v1158;
  uint32_t v1159;
  double v1160;
  double v1161;
  float32x4_t *v1162;
  uint64_t v1163;
  float32x4_t v1164;
  float64x2_t v1165;
  float64x2_t v1166;
  float64x2_t v1167;
  float64x2_t v1168;
  uint64_t v1169;
  float *v1170;
  float v1171;
  uint64_t v1172;
  float64x2_t v1173;
  float32x2_t *v1174;
  uint64_t v1175;
  float32x4_t v1176;
  float64x2_t v1177;
  float64x2_t v1178;
  float64x2_t v1179;
  float64x2_t v1180;
  float64x2_t v1181;
  float64x2_t v1182;
  float64x2_t v1183;
  float64x2_t v1184;
  float64x2_t v1185;
  uint64_t v1186;
  float *v1187;
  float v1188;
  double v1189;
  unsigned __int8 v1190;
  uint64_t v1191;
  uint64_t v1192;
  uint64_t v1193;
  _BYTE *v1194;
  float v1195;
  float *v1196;
  float v1197;
  float v1198;
  float v1199;
  float v1200;
  float v1201;
  float v1202;
  unsigned __int8 v1203;
  float v1204;
  unsigned __int8 v1205;
  float v1206;
  float *v1207;
  float v1208;
  int v1209;
  uint64_t v1210;
  uint64_t v1211;
  uint64_t v1212;
  uint64_t v1213;
  uint64_t *v1214;
  unint64_t v1215;
  uint64_t *v1216;
  uint64_t *v1217;
  unint64_t v1218;
  uint64_t v1219;
  char *v1220;
  char *v1221;
  unsigned int v1222;
  unint64_t v1223;
  char *v1224;
  void *v1225;
  char *v1226;
  uint64_t v1227;
  char *v1228;
  char *v1229;
  char *v1230;
  void *v1231;
  uint64_t v1232;
  char *v1233;
  char *v1234;
  uint64_t v1235;
  uint64_t v1236;
  uint64_t v1237;
  uint64_t v1238;
  char *v1239;
  char *v1240;
  uint64_t v1241;
  unint64_t v1242;
  unint64_t v1243;
  char *v1244;
  char *v1245;
  int64_t v1246;
  unint64_t v1247;
  char *v1248;
  uint64_t v1249;
  uint64_t v1250;
  __int128 *v1251;
  char *v1252;
  uint64_t v1253;
  __int128 v1254;
  uint64_t v1255;
  uint64_t v1256;
  _QWORD *v1257;
  uint64_t v1258;
  __int128 v1259;
  __int128 v1260;
  uint64_t v1261;
  unint64_t v1262;
  char *v1263;
  uint64_t v1264;
  unint64_t v1265;
  unint64_t v1266;
  uint64_t v1267;
  unint64_t v1268;
  uint64_t v1269;
  char *v1270;
  char *v1271;
  size_t v1272;
  char *v1273;
  uint64_t v1274;
  int v1275;
  char *v1276;
  uint64_t v1277;
  uint64_t v1278;
  unint64_t v1279;
  uint64_t v1280;
  uint64_t v1281;
  float v1282;
  float v1283;
  uint64_t v1284;
  float *v1285;
  float v1286;
  float v1287;
  float v1288;
  float v1289;
  float v1290;
  int v1291;
  float v1292;
  float v1293;
  uint64_t v1295;
  _QWORD *v1296;
  float32x2_t v1297;
  uint64_t v1298;
  int v1299;
  float32x2_t v1300;
  float v1301;
  float v1302;
  float v1303;
  float cosval;
  uint64_t v1305;
  uint64_t v1306;
  uint64_t v1307;
  uint64_t v1308;
  float v1309;
  __float2 v1310;
  float v1311;
  float v1313;
  float v1314;
  float v1316;
  float v1317;
  float v1318;
  float v1319;
  float v1320;
  float v1321;
  float v1322;
  float v1323;
  uint64_t v1324;
  unint64_t v1325;
  uint64_t v1326;
  float32x2_t v1327;
  float v1328;
  float32x2_t v1329;
  float v1330;
  uint64_t v1331;
  uint64_t v1332;
  uint64_t v1333;
  void **v1334;
  std::__shared_weak_count *v1335;
  unint64_t *v1336;
  unint64_t v1337;
  void **v1338;
  float *v1339;
  const void **v1340;
  unint64_t v1341;
  unint64_t v1342;
  void *v1343;
  size_t v1344;
  void *v1345;
  size_t v1346;
  size_t v1347;
  uint64_t v1348;
  void **v1349;
  size_t v1350;
  uint64_t v1351;
  size_t v1352;
  float *v1353;
  uint64_t v1354;
  uint64_t v1355;
  uint64_t v1356;
  uint64_t v1357;
  uint64_t v1358;
  uint64_t v1359;
  uint64_t v1360;
  uint64_t v1361;
  uint64_t v1362;
  float v1363;
  float v1364;
  BOOL v1365;
  float v1366;
  uint64_t *v1367;
  unint64_t v1368;
  float *v1369;
  uint64_t v1370;
  float32x4_t *v1371;
  uint64_t v1372;
  int8x16_t v1373;
  float v1374;
  float v1375;
  float *v1376;
  std::__shared_weak_count *v1377;
  unint64_t *v1378;
  unint64_t v1379;
  __n128 v1380;
  unint64_t *v1381;
  unint64_t v1382;
  uint64_t v1383;
  float v1384;
  float v1385;
  float *v1386;
  std::__shared_weak_count *v1387;
  unint64_t *v1388;
  uint64_t v1389;
  size_t v1390;
  float *v1391;
  float *v1392;
  std::__shared_weak_count *v1393;
  unint64_t *v1394;
  _QWORD *v1395;
  uint64_t v1396;
  unint64_t v1397;
  char *v1398;
  char *v1399;
  uint64_t v1400;
  char *v1401;
  char *v1402;
  void *v1403;
  void *v1404;
  char *v1405;
  char *v1406;
  unint64_t v1407;
  char *v1408;
  void *v1409;
  char *v1410;
  char *v1411;
  uint64_t v1412;
  float *v1413;
  float *v1414;
  float *v1415;
  float *v1416;
  float v1417;
  float v1418;
  float v1419;
  float v1420;
  float v1421;
  float v1422;
  float v1423;
  float v1424;
  float v1425;
  char *v1426;
  char *v1427;
  char *v1428;
  uint64_t v1429;
  uint64_t v1430;
  uint64_t v1431;
  char *v1432;
  int64_t v1433;
  char *v1434;
  char *v1435;
  char *v1436;
  char *v1437;
  void *v1438;
  uint64_t v1439;
  char *v1440;
  char *v1441;
  uint64_t v1442;
  uint64_t v1443;
  uint64_t v1444;
  uint64_t v1445;
  char *v1446;
  char *v1447;
  char *v1448;
  unint64_t v1449;
  char *v1450;
  unint64_t v1451;
  char *v1452;
  int64_t v1453;
  unint64_t v1454;
  char *v1455;
  uint64_t v1456;
  uint64_t v1457;
  __int128 *v1458;
  char *v1459;
  uint64_t v1460;
  __int128 v1461;
  uint64_t v1462;
  char *v1463;
  unint64_t v1464;
  _BYTE *v1465;
  uint64_t v1466;
  uint64_t v1467;
  uint64_t v1468;
  char *v1469;
  uint64_t v1470;
  unint64_t v1471;
  unint64_t v1472;
  uint64_t v1473;
  char *v1474;
  char *v1475;
  char *v1476;
  uint64_t v1477;
  unint64_t v1478;
  char *v1479;
  char *v1480;
  uint64_t v1481;
  uint64_t v1482;
  __int128 *v1483;
  char *v1484;
  uint64_t v1485;
  __int128 v1486;
  unsigned __int8 v1487;
  uint64_t v1488;
  unint64_t v1489;
  void *v1490;
  unint64_t v1491;
  char *v1492;
  char *v1493;
  int64_t v1494;
  unint64_t v1495;
  char *v1496;
  uint64_t v1497;
  uint64_t v1498;
  __int128 *v1499;
  char *v1500;
  uint64_t v1501;
  __int128 v1502;
  uint64_t v1503;
  _QWORD *v1504;
  uint64_t v1505;
  uint64_t v1506;
  uint64_t v1507;
  uint64_t v1508;
  _QWORD *v1509;
  uint64_t v1510;
  unint64_t v1511;
  unint64_t v1512;
  _QWORD *v1513;
  unint64_t v1514;
  unint64_t v1515;
  void *v1516;
  unint64_t v1517;
  unint64_t *v1518;
  unint64_t v1519;
  float *v1520;
  _QWORD *v1521;
  uint64_t v1522;
  std::__shared_weak_count *v1523;
  unint64_t *v1524;
  unint64_t v1525;
  std::__shared_weak_count *v1526;
  unint64_t *v1527;
  unint64_t v1528;
  uint64_t v1529;
  uint64_t v1530;
  uint64_t v1531;
  uint64_t v1532;
  uint64_t v1533;
  uint64_t v1534;
  uint64_t v1535;
  uint64_t v1536;
  uint64_t v1537;
  std::__shared_weak_count *v1538;
  uint64_t v1539;
  unint64_t *v1540;
  unint64_t v1541;
  unint64_t v1542;
  void *v1543;
  uint64_t v1544;
  unsigned int v1545;
  unsigned __int8 v1546;
  float v1547;
  __int128 v1548;
  __int128 v1549;
  __int128 v1550;
  float v1551;
  float v1552;
  uint64_t *v1553;
  unint64_t v1554;
  float32x2_t v1555;
  float32x2_t v1556;
  float32x2_t v1557;
  _QWORD *v1558;
  float v1559;
  float32x2_t v1560;
  float32x2_t v1561;
  int32x2_t v1562;
  int8x8_t v1563;
  int32x2_t v1564;
  float v1565;
  uint64_t v1566;
  float32x2_t v1567;
  float v1568;
  uint64_t v1569;
  uint64_t v1570;
  int v1571;
  float v1572;
  float v1573;
  float v1574;
  float v1575;
  float v1576;
  float32x4_t v1577;
  unint64_t v1578;
  char *v1579;
  char *v1580;
  uint64_t v1581;
  char *v1582;
  char *v1583;
  unint64_t v1584;
  char *v1585;
  void *v1586;
  char *v1587;
  uint64_t v1588;
  char *v1589;
  char *v1590;
  char *v1591;
  void *v1592;
  uint64_t v1593;
  char *v1594;
  char *v1595;
  uint64_t v1596;
  uint64_t v1597;
  uint64_t v1598;
  uint64_t v1599;
  char *v1600;
  char *v1601;
  unint64_t v1602;
  unint64_t v1603;
  uint64_t v1604;
  char *v1605;
  char *v1606;
  int64_t v1607;
  unint64_t v1608;
  char *v1609;
  uint64_t v1610;
  uint64_t v1611;
  __int128 *v1612;
  char *v1613;
  uint64_t v1614;
  __int128 v1615;
  uint64_t v1616;
  uint64_t v1617;
  _QWORD *v1618;
  uint64_t v1619;
  uint64_t v1620;
  unint64_t v1621;
  uint64_t v1622;
  float v1623;
  float v1624;
  float32x2_t v1625;
  uint64_t v1626;
  unint64_t v1627;
  float32x2_t *v1628;
  float32x2_t v1629;
  float32x2_t v1630;
  float32x2_t v1631;
  float32x2_t v1632;
  float v1633;
  float v1634;
  float v1635;
  int v1636;
  uint64_t v1637;
  float v1638;
  uint64_t v1639;
  int v1640;
  unint64_t v1641;
  char *v1642;
  char *v1643;
  uint64_t v1644;
  uint64_t v1645;
  uint64_t v1646;
  uint64_t v1647;
  uint64_t v1648;
  uint64_t v1649;
  char *v1650;
  char *v1651;
  unint64_t v1652;
  char *v1653;
  void *v1654;
  char *v1655;
  uint64_t v1656;
  char *v1657;
  char *v1658;
  char *v1659;
  void *v1660;
  uint64_t v1661;
  char *v1662;
  char *v1663;
  uint64_t v1664;
  uint64_t v1665;
  uint64_t v1666;
  uint64_t v1667;
  char *v1668;
  char *v1669;
  unint64_t v1670;
  unint64_t v1671;
  uint64_t v1672;
  char *v1673;
  char *v1674;
  int64_t v1675;
  unint64_t v1676;
  char *v1677;
  uint64_t v1678;
  uint64_t v1679;
  __int128 *v1680;
  char *v1681;
  uint64_t v1682;
  __int128 v1683;
  uint64_t v1684;
  uint64_t v1685;
  uint64_t v1686;
  _QWORD *v1687;
  uint64_t v1688;
  unint64_t v1689;
  uint64_t v1690;
  uint64_t v1691;
  float v1692;
  uint64_t v1693;
  float v1694;
  unint64_t v1695;
  float v1696;
  float v1697;
  float v1698;
  unint64_t v1699;
  float v1700;
  float v1701;
  float v1702;
  int v1703;
  float v1704;
  float v1705;
  float v1706;
  uint64_t v1707;
  float v1708;
  float v1709;
  int v1710;
  uint64_t v1711;
  uint64_t v1712;
  uint64_t v1713;
  uint64_t v1714;
  unint64_t *v1715;
  unint64_t v1716;
  std::__shared_weak_count *v1717;
  uint64_t v1718;
  unint64_t *v1719;
  unint64_t v1720;
  std::__shared_weak_count *v1721;
  unint64_t *v1722;
  unint64_t v1723;
  std::__shared_weak_count *v1724;
  unint64_t *v1725;
  unint64_t v1726;
  std::__shared_weak_count *v1727;
  unint64_t *v1728;
  unint64_t v1729;
  float *v1730;
  unsigned int v1731;
  size_t v1732;
  size_t v1733;
  uint64_t v1734;
  uint64_t v1735;
  __int128 v1736;
  uint64_t v1737;
  uint64_t v1738;
  uint64_t v1739;
  void **v1740;
  const float *v1741;
  float32x2_t v1742;
  uint64_t v1743;
  uint64_t v1744;
  float v1745;
  float *v1746;
  int v1747;
  uint64_t v1748;
  uint64_t v1749;
  float v1750;
  float v1751;
  uint64_t v1752;
  uint64_t v1753;
  uint64_t v1754;
  uint64_t v1755;
  uint64_t v1756;
  uint64_t *v1757;
  uint64_t v1758;
  std::__shared_weak_count *v1759;
  unint64_t *v1760;
  unint64_t v1761;
  int v1762;
  unint64_t *v1763;
  unint64_t v1764;
  unsigned __int8 v1765;
  NSObject *v1766;
  char v1767;
  unsigned __int8 v1768;
  NSObject *v1769;
  uint64_t v1770;
  uint64_t v1771;
  uint64_t v1772;
  uint64_t v1773;
  unsigned __int8 v1774;
  NSObject *v1775;
  char v1776;
  int v1777;
  uint64_t v1778;
  float v1779;
  float v1780;
  float v1781;
  float v1782;
  float *v1783;
  uint64_t v1784;
  uint64_t v1785;
  float *v1786;
  float v1787;
  float v1788;
  float v1789;
  float *v1790;
  uint64_t v1791;
  float *v1792;
  float v1793;
  float v1794;
  uint64_t v1795;
  float v1796;
  float v1797;
  float v1798;
  float v1799;
  float v1800;
  float v1801;
  float v1802;
  float32x2_t v1803;
  float32x2_t v1804;
  float32x2_t v1806;
  float v1807;
  float v1808;
  float32x2_t v1809;
  float32x2_t v1810;
  float32x2_t v1811;
  float32x2_t v1812;
  BOOL v1814;
  float v1815;
  float v1816;
  float v1817;
  float32x2_t v1818;
  float32x2_t v1819;
  BOOL v1820;
  int8x8_t v1821;
  char v1822;
  BOOL v1823;
  unsigned __int8 v1824;
  NSObject *v1825;
  uint64_t v1826;
  uint64_t v1827;
  unsigned __int8 v1828;
  _QWORD *v1829;
  float32x2_t v1830;
  float32x2_t v1831;
  float32x2_t v1832;
  float64x2_t v1834;
  float64x2_t v1835;
  int32x2_t v1836;
  float v1837;
  BOOL v1838;
  float v1839;
  unint64_t v1840;
  BOOL v1841;
  unsigned __int8 v1842;
  NSObject *v1843;
  uint64_t v1844;
  uint64_t v1845;
  uint64_t v1846;
  uint64_t *v1847;
  uint64_t v1848;
  std::__shared_weak_count *v1849;
  unint64_t *v1850;
  unint64_t v1851;
  uint64_t v1852;
  unint64_t v1853;
  unint64_t *v1854;
  unint64_t v1855;
  uint64_t v1856;
  uint64_t v1857;
  std::__shared_weak_count *v1858;
  unint64_t *v1859;
  unint64_t v1860;
  unint64_t v1861;
  unsigned __int8 **v1862;
  unsigned __int8 *v1863;
  std::__shared_weak_count *v1864;
  unint64_t *v1865;
  unint64_t v1866;
  int v1867;
  int v1868;
  unsigned __int8 v1869;
  unint64_t *v1870;
  unint64_t v1871;
  uint64_t v1872;
  uint64_t v1873;
  std::__shared_weak_count *v1874;
  unint64_t *v1875;
  unint64_t v1876;
  int v1877;
  unint64_t *v1878;
  unint64_t v1879;
  uint64_t v1880;
  _BOOL4 v1881;
  std::__shared_weak_count *v1882;
  uint64_t v1883;
  unint64_t *v1884;
  unint64_t v1885;
  unint64_t v1886;
  uint64_t v1887;
  uint64_t v1888;
  unint64_t *v1889;
  unint64_t *v1890;
  unint64_t v1891;
  _QWORD *v1892;
  float v1893;
  float v1894;
  float *v1895;
  float v1896;
  float v1897;
  __float2 v1898;
  __float2 v1899;
  __float2 v1900;
  uint64_t v1901;
  unsigned int v1902;
  uint64_t v1903;
  uint64_t v1904;
  unint64_t *v1905;
  unint64_t v1906;
  __int128 **v1907;
  unint64_t *v1908;
  __int128 *v1909;
  unint64_t *v1910;
  unint64_t v1911;
  __int128 *v1912;
  _QWORD *v1913;
  std::__shared_weak_count *v1914;
  unint64_t *v1915;
  unint64_t v1916;
  const char *v1917;
  unint64_t *v1918;
  unint64_t v1919;
  __int128 **v1920;
  std::__shared_weak_count *v1921;
  unint64_t *v1922;
  unint64_t v1923;
  __int128 **v1924;
  std::__shared_weak_count *v1925;
  __int128 *v1926;
  unint64_t *v1927;
  unint64_t v1928;
  int v1929;
  __int128 v1930;
  double v1931;
  _QWORD *v1932;
  std::__shared_weak_count *v1933;
  unint64_t *v1934;
  unint64_t v1935;
  const char *v1936;
  unint64_t *v1937;
  unint64_t v1938;
  uint64_t v1939;
  uint64_t v1940;
  unint64_t *v1941;
  unint64_t v1942;
  double v1943;
  uint64_t v1945;
  unsigned __int8 v1946;
  uint64_t v1947;
  uint64_t v1948;
  std::__shared_weak_count *v1949;
  unint64_t *v1950;
  unint64_t v1951;
  char v1952;
  unint64_t *v1953;
  unint64_t v1954;
  double v1955;
  int v1956;
  __int128 v1957;
  Float64 v1958;
  int v1959;
  double v1960;
  __int128 v1961;
  double v1962;
  double v1963;
  int v1964;
  __int128 v1965;
  double v1966;
  float v1967;
  unsigned __int8 v1968;
  NSObject *v1969;
  unsigned __int8 v1970;
  NSObject *v1971;
  float v1972;
  float v1973;
  float v1974;
  unsigned __int8 v1975;
  NSObject *v1976;
  float v1977;
  unsigned __int8 v1978;
  NSObject *v1979;
  float v1980;
  float v1981;
  unsigned __int8 v1982;
  NSObject *v1983;
  _BOOL4 v1984;
  float v1985;
  BOOL v1986;
  int v1987;
  float v1988;
  float32x2_t v1989;
  float32x2_t v1990;
  int32x2_t v1991;
  float32x2_t v1992;
  float v1993;
  float v1994;
  float v1995;
  float v1996;
  float v1997;
  float v1998;
  float v1999;
  float v2000;
  float32x2_t v2001;
  float v2002;
  float v2003;
  float v2004;
  float32x2_t v2005;
  float32x2_t v2006;
  float v2007;
  float v2008;
  unsigned __int8 v2009;
  NSObject *v2010;
  __int128 *v2011;
  double v2012;
  int v2013;
  BOOL v2014;
  int v2015;
  float v2016;
  float32x2_t v2017;
  float v2018;
  float32x2_t v2019;
  float v2020;
  float32x2_t v2021;
  float32x2_t v2022;
  float32x2_t v2023;
  float v2024;
  unsigned __int8 v2025;
  NSObject *v2026;
  __int128 v2027;
  void *v2028;
  int v2029;
  float v2030;
  BOOL v2031;
  float32x2_t v2032;
  float v2033;
  float v2034;
  unsigned __int8 v2035;
  NSObject *v2036;
  int v2037;
  float v2038;
  BOOL v2039;
  unsigned int v2040;
  float32x2_t v2041;
  float v2042;
  unsigned __int8 v2043;
  std::__shared_weak_count *v2044;
  NSObject *v2045;
  int v2046;
  BOOL v2047;
  unint64_t *v2048;
  unint64_t v2049;
  unint64_t *v2050;
  unint64_t v2051;
  unint64_t *v2052;
  unint64_t v2053;
  _QWORD *v2054;
  std::__shared_weak_count *v2055;
  unint64_t *v2056;
  unint64_t v2057;
  const char *v2058;
  unint64_t *v2059;
  unint64_t v2060;
  float v2061;
  _QWORD *v2062;
  std::__shared_weak_count *v2063;
  unint64_t *v2064;
  unint64_t v2065;
  const char *v2066;
  unint64_t *v2067;
  unint64_t v2068;
  std::__shared_weak_count *v2069;
  unint64_t *v2070;
  unint64_t v2071;
  std::__shared_weak_count *v2072;
  unint64_t *v2073;
  unint64_t v2074;
  uint64_t v2075;
  int v2076;
  uint64_t v2077;
  _QWORD *v2078;
  cva::DictionaryHandler *v2079;
  uint64_t v2080;
  void *v2081;
  unint64_t *v2082;
  unint64_t *v2083;
  unint64_t v2084;
  const unsigned __int8 *v2085;
  CFStringRef v2086;
  __CFDictionary *Dictionary;
  uint64_t *v2088;
  std::__shared_weak_count *v2089;
  uint64_t v2090;
  unint64_t *v2091;
  unint64_t v2092;
  unint64_t v2093;
  cva::DictionaryHandler *v2094;
  int v2095;
  uint64_t v2096;
  std::__shared_weak_count *v2097;
  unint64_t *v2098;
  unint64_t v2099;
  unint64_t v2100;
  cva::DictionaryHandler *v2101;
  BOOL v2102;
  unint64_t *v2103;
  unint64_t v2104;
  unint64_t *v2105;
  unint64_t v2106;
  uint64_t *v2107;
  uint64_t v2108;
  uint64_t v2109;
  uint64_t v2110;
  __int128 v2111;
  uint64_t v2112;
  unint64_t *v2113;
  unint64_t v2114;
  uint64_t v2115;
  std::__shared_weak_count *v2116;
  unint64_t *v2117;
  unint64_t v2118;
  uint64_t v2119;
  void *v2120;
  std::__shared_weak_count *v2121;
  unint64_t *v2122;
  unint64_t v2123;
  cva::DictionaryHandler *v2124;
  unsigned __int8 v2125;
  cva::ItemHandler *v2126;
  const __CFData *v2127;
  float32x4_t v2128;
  float32x4_t v2130;
  float32x4_t v2131;
  double v2132;
  double v2133;
  const __CFDictionary *DictionaryRepresentation;
  unint64_t *v2135;
  unint64_t v2136;
  std::__shared_weak_count *v2137;
  unint64_t *v2138;
  unint64_t v2139;
  std::__shared_weak_count *v2140;
  unint64_t *v2141;
  unint64_t v2142;
  std::__shared_weak_count *v2143;
  unint64_t *v2144;
  unint64_t v2145;
  cva::DictionaryHandler *v2146;
  _BOOL4 v2147;
  uint64_t v2148;
  _QWORD *v2149;
  cva::DictionaryHandler *v2150;
  float32x4_t v2151;
  float32x4_t v2153;
  float32x4_t v2154;
  double v2155;
  double v2156;
  const __CFDictionary *v2157;
  __CFDictionary *v2158;
  cva::ItemHandler *v2159;
  const __CFData *v2160;
  uint64_t v2161;
  unint64_t *v2162;
  unint64_t v2163;
  unsigned __int8 v2164;
  std::__shared_weak_count *v2165;
  uint64_t v2166;
  unint64_t *v2167;
  unint64_t v2168;
  unint64_t *v2169;
  unint64_t v2170;
  std::__shared_weak_count *v2171;
  uint64_t v2172;
  unint64_t *v2173;
  unint64_t v2174;
  std::mutex *v2175;
  unint64_t *v2176;
  unint64_t v2177;
  cva::ItemHandler *v2178;
  cva::DictionaryHandler *v2179;
  const __CFData *v2180;
  cva::ItemHandler *v2181;
  cva::DictionaryHandler *v2182;
  const __CFData *v2183;
  const char *v2184;
  CFStringRef v2185;
  __CFDictionary *v2186;
  std::__shared_weak_count *v2187;
  unint64_t *v2188;
  unint64_t v2189;
  std::__shared_weak_count *v2190;
  unint64_t *v2191;
  unint64_t v2192;
  char *v2193;
  __int128 v2194;
  unint64_t *v2195;
  unint64_t v2196;
  char *v2197;
  std::__shared_weak_count *v2198;
  unint64_t *v2199;
  unint64_t v2200;
  unint64_t *v2201;
  uint64_t *v2202;
  unint64_t *v2203;
  unint64_t v2204;
  std::__shared_weak_count *v2205;
  unint64_t *v2206;
  unint64_t v2207;
  unint64_t *v2208;
  unint64_t v2209;
  _QWORD *v2210;
  std::__shared_weak_count *v2211;
  unint64_t *v2212;
  unint64_t v2213;
  const char *v2214;
  unint64_t *v2215;
  unint64_t v2216;
  _QWORD *v2217;
  std::__shared_weak_count *v2218;
  unint64_t *v2219;
  unint64_t v2220;
  const char *v2221;
  unint64_t *v2222;
  unint64_t v2223;
  _QWORD *v2224;
  std::__shared_weak_count *v2225;
  unint64_t *v2226;
  unint64_t v2227;
  const char *v2228;
  unint64_t *v2229;
  unint64_t v2230;
  _QWORD *v2231;
  std::__shared_weak_count *v2232;
  unint64_t *v2233;
  unint64_t v2234;
  const char *v2235;
  unint64_t *v2236;
  unint64_t v2237;
  _QWORD *v2238;
  std::__shared_weak_count *v2239;
  unint64_t *v2240;
  unint64_t v2241;
  const char *v2242;
  unint64_t *v2243;
  unint64_t v2244;
  _QWORD *v2245;
  std::__shared_weak_count *v2246;
  unint64_t *v2247;
  unint64_t v2248;
  const char *v2249;
  unint64_t *v2250;
  unint64_t v2251;
  _QWORD *v2252;
  std::__shared_weak_count *v2253;
  unint64_t *v2254;
  unint64_t v2255;
  const char *v2256;
  unint64_t *v2257;
  unint64_t v2258;
  _QWORD *v2259;
  std::__shared_weak_count *v2260;
  unint64_t *v2261;
  unint64_t v2262;
  const char *v2263;
  unint64_t *v2264;
  unint64_t v2265;
  _QWORD *v2266;
  std::__shared_weak_count *v2267;
  unint64_t *v2268;
  unint64_t v2269;
  const char *v2270;
  unint64_t *v2271;
  unint64_t v2272;
  int v2273;
  __int128 v2274;
  __int128 v2275;
  _OWORD *v2276;
  int64_t v2277;
  uint64_t v2278;
  char *v2279;
  char *v2280;
  BOOL v2281;
  uint64_t v2282;
  uint64_t v2283;
  char *v2284;
  char *v2285;
  uint64_t v2286;
  __int128 v2287;
  uint64_t v2288;
  char *v2289;
  __CVBuffer *v2290;
  __CVBuffer *v2291;
  unsigned __int8 v2292;
  unsigned __int8 v2293;
  NSObject *v2294;
  uint64_t v2295;
  std::__shared_weak_count *v2296;
  unint64_t *v2297;
  unint64_t v2298;
  unsigned __int8 v2299;
  unsigned __int8 v2300;
  char *v2301;
  char *v2302;
  char *v2303;
  char *v2304;
  float32x2_t v2305;
  __int128 v2306;
  int64_t v2307;
  uint64_t v2308;
  unint64_t v2309;
  unint64_t v2310;
  char *v2311;
  char *v2312;
  int64_t v2313;
  unint64_t v2314;
  char *v2315;
  uint64_t v2316;
  unint64_t v2317;
  char *v2318;
  char *v2319;
  unint64_t v2320;
  unint64_t v2321;
  char *v2322;
  char *v2323;
  unint64_t v2324;
  char *v2325;
  BOOL v2327;
  BOOL v2329;
  BOOL v2331;
  BOOL v2333;
  unint64_t v2335;
  const double *v2336;
  double *v2337;
  uint64_t v2338;
  const double *v2339;
  double *v2340;
  char *v2341;
  char *v2342;
  unint64_t v2343;
  uint64_t v2344;
  unint64_t v2345;
  unint64_t v2346;
  BOOL v2347;
  float32x2_t *v2348;
  unint64_t v2349;
  float32x2_t *v2350;
  float32x2_t v2351;
  float64x2_t v2352;
  float64x2_t v2353;
  int32x2_t v2354;
  int8x16_t v2355;
  float64x2_t v2356;
  float64x2_t v2357;
  float64x2_t v2358;
  float v2359;
  BOOL v2360;
  float v2361;
  _QWORD *v2362;
  uint64_t *v2363;
  uint64_t v2364;
  std::__shared_weak_count *v2365;
  unint64_t *v2366;
  unint64_t v2367;
  float v2368;
  unint64_t *v2369;
  unint64_t v2370;
  _QWORD *v2371;
  uint64_t *v2372;
  uint64_t v2373;
  std::__shared_weak_count *v2374;
  unint64_t *v2375;
  unint64_t v2376;
  unint64_t *v2377;
  unint64_t v2378;
  uint64_t v2379;
  uint64_t v2380;
  double v2381;
  int v2383;
  const __CFDictionary *v2384;
  io_service_t MatchingService;
  void *v2386;
  void *v2387;
  void *v2388;
  void *v2389;
  void *v2390;
  void *v2391;
  void *v2392;
  void *v2393;
  unsigned __int8 v2394;
  unsigned __int8 v2395;
  NSObject *v2396;
  uint64_t v2397;
  unint64_t *v2398;
  unsigned __int8 v2399;
  NSObject *v2400;
  unsigned __int8 v2401;
  NSObject *v2402;
  int v2403;
  float v2404;
  float32x2_t v2405;
  double v2406;
  void *v2407;
  float v2408;
  double v2409;
  float v2410;
  BOOL v2411;
  uint64_t v2412;
  std::__shared_weak_count *v2413;
  const __CFAllocator *alloc;
  int v2415;
  void *v2416;
  char *v2417;
  void *v2418;
  void *v2419;
  std::__shared_weak_count *v2420;
  double v2421;
  _BOOL4 v2422;
  int v2423;
  float *v2424;
  __CVBuffer *pixelBuffer;
  CVPixelBufferRef pixelBuffera;
  CVPixelBufferRef pixelBufferb;
  uint64_t v2428;
  std::__shared_weak_count *v2429;
  __int128 *v2430;
  __int128 *v2431;
  uint64_t v2432;
  float32x4_t v2433;
  uint64_t v2434;
  std::__shared_weak_count *v2435;
  double v2436;
  int v2437;
  float32x4_t v2438;
  unint64_t v2439;
  _BOOL4 v2440;
  float32x4_t v2441;
  uint64_t v2443;
  uint64_t v2444;
  _OWORD *v2445;
  unsigned int v2446;
  int32x2_t v2447;
  int32x2_t v2448;
  uint64_t v2449;
  unsigned int v2450;
  uint64_t *v2451;
  __CVBuffer *texture;
  int v2453;
  void *v2454;
  uint64_t v2455;
  int v2456;
  uint64_t v2457;
  uint64_t key;
  const __CFString *keya;
  uint64_t keyb;
  int32x2_t keyc;
  float32x4_t keyd;
  float32x4_t keye;
  float32x4_t keyf;
  uint64_t *keyg;
  char keyh;
  float keyi;
  float keyj;
  std::__shared_weak_count *keyk;
  uint64_t v2470;
  int v2471;
  uint64_t *v2472;
  int32x2_t v2473;
  float32x4_t v2474;
  float v2475;
  float v2476;
  int v2477;
  float v2478;
  std::__shared_weak_count *v2479;
  __int128 v2480;
  int v2481;
  int v2482;
  uint64_t v2483;
  __int128 v2484;
  float32x4_t v2486;
  unsigned int v2487;
  std::__shared_weak_count *v2488;
  float32x4_t v2489;
  float *v2490;
  unint64_t v2491;
  unint64_t v2492;
  uint64_t v2493;
  float32x2_t v2494;
  float v2495;
  _QWORD *v2496;
  __int128 v2497;
  float32x4_t v2498;
  float32x4_t v2499;
  float32x4_t v2500;
  uint64_t v2501;
  uint64_t v2502;
  uint64_t *v2503;
  float32x2_t v2504;
  uint64_t v2505;
  __int128 v2506;
  float32x4_t v2507;
  __int128 v2508;
  _QWORD v2509[2];
  _OWORD v2510[2];
  int v2511;
  uint64_t v2512;
  std::__shared_weak_count *v2513;
  __int128 v2514;
  __int128 v2515;
  int v2516;
  float32x2_t v2517;
  float v2518;
  float v2519;
  uint64_t v2520;
  uint64_t v2521;
  uint64_t v2522;
  int v2523;
  float v2524;
  float32x2_t v2525;
  float v2526;
  uint64_t v2527;
  float **v2528;
  float v2529;
  float v2530;
  float sinval;
  float v2532;
  float v2533;
  uint64_t v2534;
  float v2535;
  float *v2536;
  std::__shared_weak_count *v2537;
  __int128 v2538;
  void *v2539;
  std::__shared_weak_count *v2540;
  void *v2541;
  char *v2542;
  _QWORD *v2543;
  void *v2544;
  _QWORD *v2545;
  _QWORD *v2546;
  void *v2547[2];
  void *v2548[2];
  int v2549;
  void *v2550;
  char *v2551;
  char *v2552;
  uint64_t (**v2553)();
  uint64_t v2554;
  _BYTE v2555[32];
  _BYTE v2556[40];
  float32x2_t v2557;
  float v2558;
  __int128 v2559;
  _BYTE v2560[32];
  _BYTE v2561[40];
  float32x2_t v2562;
  float v2563;
  uint64_t v2564;
  std::__shared_weak_count *v2565;
  void *v2566;
  char *v2567;
  _DWORD *v2568;
  __int128 v2569;
  __int128 v2570;
  int v2571;
  float32x2_t v2572;
  float v2573;
  __int128 v2574;
  __int128 v2575;
  int v2576;
  float32x2_t v2577;
  float v2578;
  void *memptr[2];
  __int128 v2580;
  int v2581;
  float32x2_t v2582;
  float v2583;
  void *__p[2];
  __int128 v2585;
  int v2586;
  float32x2_t v2587;
  float v2588;
  float *v2589;
  float32x2_t *v2590;
  _OWORD v2591[2];
  _BYTE v2592[20];
  int v2593;
  int v2594;
  int v2595;
  int v2596;
  float32x2_t v2597;
  float v2598;
  _BYTE v2599[32];
  int v2600;
  float32x2_t v2601;
  float v2602;
  _BYTE buf[64];
  float32x2_t v2604;
  __int128 v2605;
  __int128 v2606;
  __int128 v2607;
  _BYTE v2608[36];
  float32x2_t v2609;
  float v2610;
  uint64_t v2611;
  simd_float2x2 v2612;
  float64x2x2_t v2613;

  v2611 = *MEMORY[0x1E0C80C00];
  if (!*a3)
  {
    sub_1C98CC760(a1);
    return;
  }
  kdebug_trace();
  std::mutex::lock(&stru_1ED52AC78);
  v2451 = a3;
  texture = *(__CVBuffer **)(*a3 + 88);
  v2443 = *(_QWORD *)(*a3 + 200);
  v4 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
  if ((v4 & 1) == 0)
    goto LABEL_2807;
  while (1)
  {
    if (*(_BYTE *)(qword_1ED52ACB8 + 316))
      v5 = 1;
    else
      v5 = *(_BYTE *)(*v2451 + 385) != 0;
    v2440 = v5;
    v6 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
    if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
    {
      sub_1C98CFF14();
      __cxa_guard_release(&qword_1ED52ACD8);
    }
    if (*(_BYTE *)(qword_1ED52ACB8 + 316))
    {
      v7 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
      if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
      {
        qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
        __cxa_guard_release(&qword_1ED52ACD0);
      }
      v8 = (id)qword_1ED52ACE0;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1C9870000, v8, OS_LOG_TYPE_DEFAULT, "Force enabling return of debug information.", buf, 2u);
      }

    }
    v9 = (_QWORD *)*v2451;
    v10 = *(_QWORD *)(*v2451 + 88);
    if (v10)
    {
      v11 = *a2;
      if (*(_QWORD *)(*a2 + 144))
      {
        kdebug_trace();
        v2567 = 0;
        v2566 = 0;
        v2568 = 0;
        (*(void (**)(_QWORD, uint64_t, void **))(**(_QWORD **)(v11 + 144) + 16))(*(_QWORD *)(v11 + 144), v10, &v2566);
        v12 = (char *)v2566;
        v13 = v2567;
        while (v12 != v13)
        {
          if (v12[32])
            v12[32] = 0;
          v12 += 48;
        }
        kdebug_trace();
      }
      else
      {
        Width = CVPixelBufferGetWidth(*(CVPixelBufferRef *)(*v2451 + 88));
        v45 = (__CVBuffer *)v9[11];
        if (v45)
          Height = CVPixelBufferGetHeight(v45);
        else
          Height = 0;
        v48 = v9[41];
        v47 = v9[42];
        v2568 = 0;
        v2566 = 0;
        v2567 = 0;
        v49 = v47 - v48;
        if (v49)
        {
          if (v49 < 0)
            abort();
          v50 = 12 * (v49 >> 5);
          v51 = operator new(v50 * 4);
          v52 = (char *)&v51[v50];
          v2566 = v51;
          v2568 = &v51[v50];
          v53 = v51 + 10;
          do
          {
            *((_BYTE *)v53 - 16) = 0;
            *((_BYTE *)v53 - 12) = 0;
            *((_BYTE *)v53 - 8) = 0;
            *v53 = 0;
            *(v53 - 5) = 0;
            *(v53 - 4) = 0;
            *(_QWORD *)((char *)v53 - 27) = 0;
            v53 += 6;
            v50 -= 12;
          }
          while (v50 * 4);
          v2567 = v52;
          v54 = (uint64_t *)v9[41];
          v55 = (uint64_t *)v9[42];
          if (v54 != v55)
          {
            v56 = (float)Width;
            v57 = (float)Height;
            do
            {
              v58 = *((_DWORD *)v54 + 2);
              v59 = *((float *)v54 + 5) * v56;
              v60 = *((float *)v54 + 6) * v57;
              v61 = (float)(*((float *)v54 + 3) * v56) + -0.5;
              v62 = (float)(*((float *)v54 + 4) * v57) + -0.5;
              v63 = *v54;
              v54 += 4;
              *v51 = 1;
              *((float *)v51 + 1) = v61;
              *((float *)v51 + 2) = v62;
              *((float *)v51 + 3) = v59;
              *((float *)v51 + 4) = v60;
              v51[5] = v58;
              *((_BYTE *)v51 + 24) = 1;
              *((_BYTE *)v51 + 28) = 0;
              *((_BYTE *)v51 + 32) = 0;
              *((_QWORD *)v51 + 5) = v63;
              v51 += 12;
            }
            while (v54 != v55);
          }
        }
      }
    }
    else
    {
      v2567 = 0;
      v2566 = 0;
      v2568 = 0;
    }
    v14 = *(std::__shared_weak_count **)(*v2451 + 80);
    v2564 = *(_QWORD *)(*v2451 + 72);
    v2565 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }
    if (texture)
    {
      v17 = *v2451;
      v18 = *(_QWORD *)(*v2451 + 104);
      v19 = *(_OWORD *)(*v2451 + 128);
      *(_OWORD *)v2560 = *(_OWORD *)(*v2451 + 112);
      *(_OWORD *)&v2560[16] = v19;
      v20 = *(_DWORD *)(v17 + 144);
      *(_OWORD *)&v2561[4] = *(_OWORD *)(v17 + 148);
      *(_OWORD *)&v2561[20] = *(_OWORD *)(v17 + 164);
      v21 = *(_DWORD *)(v17 + 180);
      *(_DWORD *)v2561 = v20;
      *(_DWORD *)&v2561[36] = v21;
      v2563 = *(float *)(v17 + 192);
      v2562 = *(float32x2_t *)(v17 + 184);
    }
    else
    {
      *(_QWORD *)&v2560[4] = 0;
      *(_OWORD *)&v2560[12] = 0x3F80000000000000uLL;
      *(_DWORD *)v2560 = 1065353216;
      *(_DWORD *)&v2560[28] = 0;
      *(_QWORD *)&v2561[16] = 0x3F80000000000000;
      *(_QWORD *)&v2561[8] = 0;
      *(_QWORD *)&v2561[24] = 0;
      *(_QWORD *)&v2561[32] = 0x3F80000000000000;
      __asm { FMOV            V0.2S, #1.0 }
      *(_QWORD *)v2561 = _D0;
      v2562 = 0;
      v18 = 0x100000001;
      v2563 = 0.0;
    }
    *(_QWORD *)&v2559 = &off_1E8295050;
    *((_QWORD *)&v2559 + 1) = v18;
    if (v2443)
    {
      v25 = *v2451;
      v26 = *v2451 + 200;
      v27 = *(_QWORD *)(*v2451 + 216);
      v2553 = &off_1E8295050;
      v2554 = v27;
      v28 = *(_OWORD *)(v25 + 240);
      *(_OWORD *)v2555 = *(_OWORD *)(v25 + 224);
      *(_OWORD *)&v2555[16] = v28;
      v29 = *(_DWORD *)(v25 + 292);
      *(_DWORD *)v2556 = *(_DWORD *)(v25 + 256);
      *(_DWORD *)&v2556[36] = v29;
      *(_OWORD *)&v2556[4] = *(_OWORD *)(v26 + 60);
      *(_OWORD *)&v2556[20] = *(_OWORD *)(v26 + 76);
      v30 = *(float32x2_t *)(v25 + 296);
      v2558 = *(float *)(v25 + 304);
      v2557 = v30;
      if (!**(_BYTE **)(*a2 + 8))
      {
        *(_QWORD *)v2592 = &v2561[4];
        *(_QWORD *)v2608 = v2592;
        *(_QWORD *)buf = v2608;
        *(_QWORD *)&buf[8] = &v2562;
        *(_QWORD *)v2599 = 0;
        *(_DWORD *)&v2599[8] = 0;
        sub_1C98BDEBC((float *)v2599, (uint64_t)buf);
        __p[0] = &v2556[4];
        *(_QWORD *)v2608 = __p;
        *(_QWORD *)buf = v2608;
        *(_QWORD *)&buf[8] = &v2557;
        *(_QWORD *)v2592 = 0;
        *(_DWORD *)&v2592[8] = 0;
        sub_1C98BDEBC((float *)v2592, (uint64_t)buf);
        v31 = vsub_f32(*(float32x2_t *)v2599, *(float32x2_t *)v2592);
        if ((float)(vaddv_f32(vmul_f32(v31, v31))
                   + (float)((float)(*(float *)&v2599[8] - *(float *)&v2592[8])
                           * (float)(*(float *)&v2599[8] - *(float *)&v2592[8]))) > 0.00001
          || (float)((float)((float)((float)(*(float *)&v2561[12] - *(float *)&v2556[12])
                                   * (float)(*(float *)&v2561[12] - *(float *)&v2556[12]))
                           + (float)((float)(*(float *)&v2561[24] - *(float *)&v2556[24])
                                   * (float)(*(float *)&v2561[24] - *(float *)&v2556[24])))
                   + (float)((float)(*(float *)&v2561[36] - *(float *)&v2556[36])
                           * (float)(*(float *)&v2561[36] - *(float *)&v2556[36]))) > 0.00001)
        {
          v32 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
          if ((v32 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
          {
            qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
            __cxa_guard_release(&qword_1ED52ACD0);
          }
          v33 = (id)qword_1ED52ACE0;
          if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl(&dword_1C9870000, v33, OS_LOG_TYPE_ERROR, "RGB and depth must be registered", buf, 2u);
          }

          v2443 = 0;
        }
      }
    }
    else
    {
      v2443 = 0;
      v2553 = &off_1E8295050;
      v2554 = 0x100000001;
      *(_QWORD *)&v2555[12] = 0x3F80000000000000;
      *(_QWORD *)&v2556[24] = 0;
      *(_QWORD *)&v2556[32] = 0x3F80000000000000;
      *(_QWORD *)&v2555[4] = 0;
      *(_QWORD *)&v2555[20] = 0;
      *(_DWORD *)v2555 = 1065353216;
      *(_DWORD *)&v2555[28] = 0;
      *(_QWORD *)&v2556[16] = 0x3F80000000000000;
      *(_QWORD *)&v2556[8] = 0;
      __asm { FMOV            V0.2S, #1.0 }
      *(_QWORD *)v2556 = _D0;
      v2557 = 0;
      v2558 = 0.0;
    }
    v35 = *v2451 + 24;
    v36 = *(_DWORD *)(*v2451 + 48);
    v2445 = (_OWORD *)v35;
    if (v36)
    {
      if (v36 != 1)
        goto LABEL_2806;
      *(_OWORD *)buf = *(_OWORD *)v35;
      *(_QWORD *)&buf[16] = *(_QWORD *)(v35 + 16);
      Seconds = CMTimeGetSeconds((CMTime *)buf);
    }
    else
    {
      Seconds = *(double *)v35;
    }
    v2421 = Seconds * 1000.0;
    if (*(_BYTE *)(*a2 + 88))
    {
      v38 = sub_1C991D1D8((uint64_t)v2445, *a2 + 56);
      if (v38 != 129 && (char)v38 <= 0)
      {
        v39 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
        if ((v39 & 1) == 0)
        {
LABEL_2824:
          if (__cxa_guard_acquire(&qword_1ED52ACD0))
          {
            qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
            __cxa_guard_release(&qword_1ED52ACD0);
          }
        }
        v40 = (id)qword_1ED52ACE0;
        if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
        {
          v41 = *a2 + 56;
          v42 = *(_DWORD *)(*a2 + 80);
          if (v42)
          {
            if (v42 != 1)
              goto LABEL_2806;
            *(_OWORD *)buf = *(_OWORD *)v41;
            *(_QWORD *)&buf[16] = *(_QWORD *)(v41 + 16);
            v43 = CMTimeGetSeconds((CMTime *)buf);
          }
          else
          {
            v43 = *(double *)v41;
          }
          *(_DWORD *)buf = 134218240;
          *(double *)&buf[4] = v43 * 1000.0;
          *(_WORD *)&buf[12] = 2048;
          *(double *)&buf[14] = v2421;
          _os_log_impl(&dword_1C9870000, v40, OS_LOG_TYPE_DEFAULT, "Non-increasing timestamp: last %.12g ms, current %.12g ms", buf, 0x16u);
        }

      }
    }
    kdebug_trace();
    kdebug_trace();
    if (!*(_BYTE *)(*a2 + 88)
      || (v64 = *a2 + 56,
          *(_DWORD *)&v2608[24] = 0,
          *(_QWORD *)v2608 = 0x3FF0000000000000,
          sub_1C991D06C((CMTime *)buf, v64, (uint64_t)v2608),
          (char)sub_1C991D1D8((uint64_t)v2445, (uint64_t)buf) < 1))
    {
      v2423 = 0;
      goto LABEL_82;
    }
    v65 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
    if ((v65 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
    {
      qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
      __cxa_guard_release(&qword_1ED52ACD0);
    }
    v66 = (id)qword_1ED52ACE0;
    if (!os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
      goto LABEL_73;
    v67 = *a2 + 56;
    v68 = *(_DWORD *)(*a2 + 80);
    if (!v68)
      break;
    if (v68 == 1)
    {
      *(_OWORD *)buf = *(_OWORD *)v67;
      *(_QWORD *)&buf[16] = *(_QWORD *)(v67 + 16);
      v69 = CMTimeGetSeconds((CMTime *)buf);
      goto LABEL_72;
    }
LABEL_2806:
    sub_1C98CFB60();
LABEL_2807:
    if (__cxa_guard_acquire(&qword_1ED52ACD8))
    {
      sub_1C98CFF14();
      __cxa_guard_release(&qword_1ED52ACD8);
    }
  }
  v69 = *(double *)v67;
LABEL_72:
  *(_DWORD *)buf = 134218240;
  *(double *)&buf[4] = v69 * 1000.0;
  *(_WORD *)&buf[12] = 2048;
  *(double *)&buf[14] = v2421;
  _os_log_impl(&dword_1C9870000, v66, OS_LOG_TYPE_DEFAULT, "Timestamp gap detected, discarding all current face tracks: last %.12g ms, current %.12g ms", buf, 0x16u);
LABEL_73:

  v70 = *(uint64_t **)(*a2 + 120);
  v71 = *v70;
  for (i = v70[1]; i != v71; i -= 16)
  {
    v73 = *(std::__shared_weak_count **)(i - 8);
    if (v73)
    {
      v74 = (unint64_t *)&v73->__shared_owners_;
      do
        v75 = __ldaxr(v74);
      while (__stlxr(v75 - 1, v74));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
      }
    }
  }
  v70[1] = v71;
  v2423 = 1;
LABEL_82:
  v76 = *a2;
  v77 = *(unsigned __int8 *)(*a2 + 88);
  v78 = v2445[1];
  *(_OWORD *)(v76 + 56) = *v2445;
  *(_OWORD *)(v76 + 72) = v78;
  if (!v77)
    *(_BYTE *)(v76 + 88) = 1;
  v79 = *a2;
  v2453 = *(_DWORD *)(*(_QWORD *)(*a2 + 8) + 12);
  v2446 = DWORD2(v2559);
  v2450 = HIDWORD(v2559);
  v80 = *(__int128 ***)(*a2 + 120);
  v81 = *v80;
  v82 = v80[1];
  v83 = (char *)v82 - (char *)*v80;
  if ((int)(v83 >> 4) < 2)
    goto LABEL_189;
  v84 = 0;
  v85 = (v83 >> 4) - 1;
  v86 = (int)((uint64_t)v83 >> 4);
  v87 = (v83 >> 4);
  v88 = 1;
  key = v85;
  v2455 = v86;
  while (2)
  {
    v2503 = *(uint64_t **)(**(_QWORD **)(v79 + 120) + 16 * v84);
    v89 = (float *)*v2503;
    if (!*(_QWORD *)(*v2503 + 128))
    {
      ++v84;
      goto LABEL_87;
    }
    if (++v84 < v86)
    {
      v2470 = v84;
      v90 = v88;
      while (1)
      {
        v91 = *(uint64_t **)(**(_QWORD **)(v79 + 120) + 16 * v90);
        v92 = (float *)*v91;
        v93 = *(_QWORD *)(*v91 + 128);
        if (!v93)
          goto LABEL_93;
        v94 = v89[11];
        v95 = v89[12];
        v96 = v95;
        v97 = v92[11];
        v98 = v92[12];
        v99 = v98;
        v100 = v94 + v89[13];
        v101 = v97 + v92[13];
        if (v94 >= v97)
          v102 = v94;
        else
          v102 = v97;
        if (v101 >= v100)
          v103 = v94 + v89[13];
        else
          v103 = v97 + v92[13];
        v104 = v103 - v102;
        if (v95 >= v98)
          v105 = v95;
        else
          v105 = v98;
        v106 = v99 + v92[14];
        v107 = v96 + v89[14];
        if (v106 >= v107)
          v108 = v96 + v89[14];
        else
          v108 = v99 + v92[14];
        v109 = v104;
        v110 = v108 - v105;
        if (v97 >= v94)
          v111 = v94;
        else
          v111 = v97;
        if (v100 >= v101)
          v112 = v100;
        else
          v112 = v97 + v92[13];
        v113 = v112 - v111;
        if (v98 >= v95)
          v114 = v95;
        else
          v114 = v98;
        if (v107 >= v106)
          v115 = v96 + v89[14];
        else
          v115 = v99 + v92[14];
        v116 = v113;
        v117 = v115 - v114;
        _NF = v110 < 0.0 || v109 < 0.0;
        v119 = v110 * v109;
        if (_NF)
          v119 = 0.0;
        v120 = v117 < 0.0 || v116 < 0.0;
        v121 = v117 * v116;
        if (v120)
          v121 = 0.0;
        v122 = v121 <= 0.0 ? 0.0 : v119 / v121;
        if (v122 <= 0.7)
          goto LABEL_93;
        v123 = *(_QWORD *)(*v2503 + 128);
        v124 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
        if ((v124 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
        {
          qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
          __cxa_guard_release(&qword_1ED52ACD0);
        }
        v125 = (id)qword_1ED52ACE0;
        v126 = os_log_type_enabled(v125, OS_LOG_TYPE_DEFAULT);
        if (v93 > v123)
        {
          if (v126)
          {
            v141 = *(_QWORD **)(*v2503 + 24);
            v142 = *(std::__shared_weak_count **)(*v2503 + 32);
            if (v142)
            {
              v143 = (unint64_t *)&v142->__shared_owners_;
              do
                v144 = __ldxr(v143);
              while (__stxr(v144 + 1, v143));
            }
            if (v141)
            {
              v145 = (const char *)(*v141 + 160);
              if (!v142)
                goto LABEL_172;
            }
            else
            {
              v145 = "(null)";
              if (!v142)
                goto LABEL_172;
            }
            v146 = (unint64_t *)&v142->__shared_owners_;
            do
              v147 = __ldaxr(v146);
            while (__stlxr(v147 - 1, v146));
            if (!v147)
            {
              ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
              std::__shared_weak_count::__release_weak(v142);
            }
LABEL_172:
            v148 = *(_QWORD **)(*v91 + 24);
            v149 = *(std::__shared_weak_count **)(*v91 + 32);
            if (v149)
            {
              v150 = (unint64_t *)&v149->__shared_owners_;
              do
                v151 = __ldxr(v150);
              while (__stxr(v151 + 1, v150));
            }
            if (v148)
            {
              v152 = (const char *)(*v148 + 160);
              if (!v149)
                goto LABEL_183;
            }
            else
            {
              v152 = "(null)";
              if (!v149)
                goto LABEL_183;
            }
            v153 = (unint64_t *)&v149->__shared_owners_;
            do
              v154 = __ldaxr(v153);
            while (__stlxr(v154 - 1, v153));
            if (!v154)
            {
              ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
              std::__shared_weak_count::__release_weak(v149);
            }
LABEL_183:
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = v145;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = v152;
            _os_log_impl(&dword_1C9870000, v125, OS_LOG_TYPE_DEFAULT, "duplicate tracks for same face, discarding %s in favor of %s", buf, 0x16u);
          }

          sub_1C98EB318(v2503);
LABEL_185:
          v84 = v2470;
          v85 = key;
          v86 = v2455;
          goto LABEL_87;
        }
        if (v126)
          break;
LABEL_92:

        sub_1C98EB318(v91);
LABEL_93:
        if (++v90 == v87)
          goto LABEL_185;
      }
      v127 = *(_QWORD **)(*v91 + 24);
      v128 = *(std::__shared_weak_count **)(*v91 + 32);
      if (v128)
      {
        v129 = (unint64_t *)&v128->__shared_owners_;
        do
          v130 = __ldxr(v129);
        while (__stxr(v130 + 1, v129));
      }
      if (v127)
      {
        v131 = (const char *)(*v127 + 160);
        if (!v128)
          goto LABEL_147;
      }
      else
      {
        v131 = "(null)";
        if (!v128)
          goto LABEL_147;
      }
      v132 = (unint64_t *)&v128->__shared_owners_;
      do
        v133 = __ldaxr(v132);
      while (__stlxr(v133 - 1, v132));
      if (!v133)
      {
        ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
        std::__shared_weak_count::__release_weak(v128);
      }
LABEL_147:
      v134 = *(_QWORD **)(*v2503 + 24);
      v135 = *(std::__shared_weak_count **)(*v2503 + 32);
      if (v135)
      {
        v136 = (unint64_t *)&v135->__shared_owners_;
        do
          v137 = __ldxr(v136);
        while (__stxr(v137 + 1, v136));
      }
      if (v134)
      {
        v138 = (const char *)(*v134 + 160);
        if (!v135)
          goto LABEL_91;
      }
      else
      {
        v138 = "(null)";
        if (!v135)
        {
LABEL_91:
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v131;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v138;
          _os_log_impl(&dword_1C9870000, v125, OS_LOG_TYPE_DEFAULT, "duplicate tracks for same face, discarding %s in favor of %s", buf, 0x16u);
          goto LABEL_92;
        }
      }
      v139 = (unint64_t *)&v135->__shared_owners_;
      do
        v140 = __ldaxr(v139);
      while (__stlxr(v140 - 1, v139));
      if (!v140)
      {
        ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
        std::__shared_weak_count::__release_weak(v135);
      }
      goto LABEL_91;
    }
LABEL_87:
    ++v88;
    if (v84 != v85)
      continue;
    break;
  }
  v80 = *(__int128 ***)(v79 + 120);
  v81 = *v80;
  v82 = v80[1];
  if (*v80 != v82)
  {
    do
    {
      while (!*(_QWORD *)(**(_QWORD **)v81 + 128))
      {
        v155 = v81 + 1;
        v156 = v81;
        if (v81 + 1 != v82)
        {
          do
          {
            v157 = *v155;
            *(_QWORD *)v155 = 0;
            *((_QWORD *)v155 + 1) = 0;
            v158 = (std::__shared_weak_count *)*((_QWORD *)v156 + 1);
            *v156 = v157;
            if (v158)
            {
              v159 = (unint64_t *)&v158->__shared_owners_;
              do
                v160 = __ldaxr(v159);
              while (__stlxr(v160 - 1, v159));
              if (!v160)
              {
                ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
                std::__shared_weak_count::__release_weak(v158);
              }
            }
            ++v155;
            ++v156;
          }
          while (v155 != v82);
          v82 = v80[1];
        }
        while (v82 != v156)
        {
          v161 = (std::__shared_weak_count *)*((_QWORD *)v82 - 1);
          if (v161)
          {
            v162 = (unint64_t *)&v161->__shared_owners_;
            do
              v163 = __ldaxr(v162);
            while (__stlxr(v163 - 1, v162));
            if (!v163)
            {
              ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
              std::__shared_weak_count::__release_weak(v161);
            }
          }
          --v82;
        }
        v80[1] = v156;
        v82 = v156;
        if (v81 == v156)
          goto LABEL_208;
      }
      ++v81;
LABEL_189:
      ;
    }
    while (v81 != v82);
  }
LABEL_208:
  memset(v2608, 0, 24);
  v164 = v2567;
  v165 = (char *)v2566;
  if (v2567 != v2566)
  {
    v166 = 0;
    __asm { FMOV            V8.2S, #1.0 }
    *(float32x2_t *)v168.f32 = vdiv_f32(_D8, vcvt_f32_s32(vmax_s32((int32x2_t)__PAIR64__(v2450, v2446), (int32x2_t)0x100000001)));
    v168.i64[1] = v168.i64[0];
    v2486 = v168;
    __asm
    {
      FMOV            V10.2S, #-0.25
      FMOV            V11.2S, #1.5
    }
    v171 = &off_1E8295838;
    v172 = &off_1E82957C8;
    __asm { FMOV            V13.2S, #0.25 }
    while (1)
    {
      v174 = &v165[48 * v166];
      v175 = *(_DWORD *)v174;
      v176 = *(float32x2_t *)(v174 + 4);
      v177 = *(float32x2_t *)(v174 + 12);
      v178 = *(_OWORD *)(v174 + 20);
      *(_DWORD *)&buf[16] = *((_DWORD *)v174 + 9);
      *(_OWORD *)buf = v178;
      if (v177.f32[0] >= 0.0 && v177.f32[1] >= 0.0 && (float)(v177.f32[0] * v177.f32[1]) >= 0.00000011921)
      {
        v180 = *((_QWORD *)v174 + 5);
        v181 = vadd_f32(v176, vmul_f32(v177, _D10));
        v2504 = vmul_f32(v177, _D11);
        v182 = *(_QWORD *)(v79 + 120);
        v183 = *(_QWORD ***)v182;
        v184 = *(_QWORD ***)(v182 + 8);
        if (v183 != v184)
        {
          v185 = vcvtq_f64_f32(v181);
          v186 = vaddq_f64(v185, vcvtq_f64_f32(v2504));
          v187 = v2504.f32[1] < 0.0 || v2504.f32[0] < 0.0;
          v188 = vmuls_lane_f32(v2504.f32[0], v2504, 1);
          if (v187)
            v188 = 0.0;
          while (1)
          {
            v189 = (_QWORD *)**v183;
            if (v189[16])
            {
              v190 = *(float32x2_t *)((char *)v189 + 44);
              v191 = vcvtq_f64_f32(v190);
              v192 = *(float32x2_t *)((char *)v189 + 52);
              v193 = vcgt_f32(v190, v181);
              v194.i64[0] = v193.i32[0];
              v194.i64[1] = v193.i32[1];
              v195 = (float64x2_t)vbslq_s8(v194, (int8x16_t)v191, (int8x16_t)v185);
              v196 = vaddq_f64(v191, vcvtq_f64_f32(v192));
              v197 = vcvt_f32_f64(vsubq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v186, v196), (int8x16_t)v196, (int8x16_t)v186), v195));
              v198 = v197.f32[1] < 0.0 || v197.f32[0] < 0.0;
              v199 = vmuls_lane_f32(v197.f32[0], v197, 1);
              if (v198)
                v199 = 0.0;
              v200 = v192.f32[1] < 0.0 || v192.f32[0] < 0.0;
              v201 = vmuls_lane_f32(v192.f32[0], v192, 1);
              if (v200)
                v201 = 0.0;
              if (v201 >= v188)
                v201 = v188;
              v202 = v199 / v201;
              if (v201 <= 0.0)
                v202 = 0.0;
              if (v202 >= 0.5)
                break;
            }
            v183 += 2;
            if (v183 == v184)
              goto LABEL_244;
          }
          if (v202 >= 0.8)
            v189[10] = v180;
          goto LABEL_212;
        }
LABEL_244:
        *(float32x2_t *)v203.f32 = vadd_f32(v181, (float32x2_t)0x3F0000003F000000);
        *(float32x2_t *)&v203.u32[2] = v2504;
        v204 = (int8x16_t)vmulq_f32(v203, v2486);
        v205 = (float32x2_t)vextq_s8(v204, v204, 8uLL).u64[0];
        v206 = vadd_f32(*(float32x2_t *)v204.i8, vmul_f32(v205, _D13));
        if (v206.f32[0] >= 0.0 && v206.f32[1] >= 0.0)
        {
          v207 = vmvn_s8((int8x8_t)vcge_f32(_D8, vadd_f32(v206, vmul_f32(v205, (float32x2_t)0x3F0000003F000000))));
          if ((v207.i8[0] & 1) == 0 && (v207.i8[4] & 1) == 0)
            break;
        }
      }
LABEL_212:
      if (++v166 >= 0xAAAAAAAAAAAAAAABLL * ((v164 - v165) >> 4))
      {
        v242 = *(uint64_t ***)v2608;
        v241 = *(uint64_t ***)&v2608[8];
        goto LABEL_287;
      }
    }
    v208 = operator new(0x20uLL);
    v208[1] = 0;
    v208[2] = 0;
    *v208 = v171;
    v209 = operator new();
    v208[3] = v209;
    v210 = v208 + 3;
    *(_BYTE *)(v209 + 64) = 0;
    *(_BYTE *)(v209 + 68) = 0;
    *(_BYTE *)(v209 + 72) = 0;
    *(_BYTE *)(v209 + 164) = 0;
    *(_BYTE *)(v209 + 168) = 0;
    *(_OWORD *)v209 = 0u;
    *(_OWORD *)(v209 + 16) = 0u;
    *(_OWORD *)(v209 + 32) = 0u;
    *(_OWORD *)(v209 + 45) = 0u;
    *(_OWORD *)(v209 + 80) = 0u;
    *(_OWORD *)(v209 + 96) = 0u;
    *(_OWORD *)(v209 + 112) = 0u;
    *(_OWORD *)(v209 + 128) = 0u;
    *(_OWORD *)(v209 + 144) = 0u;
    *(_BYTE *)(v209 + 160) = 0;
    sub_1C98EB318(v208 + 3);
    *(_QWORD *)v2599 = v208 + 3;
    *(_QWORD *)&v2599[8] = v208;
    v211 = v208[3];
    *(_DWORD *)(v211 + 40) = v175;
    *(float32x2_t *)(v211 + 44) = v181;
    *(float32x2_t *)(v211 + 52) = v2504;
    *(_DWORD *)(v211 + 76) = *(_DWORD *)&buf[16];
    *(_OWORD *)(v211 + 60) = *(_OWORD *)buf;
    *(_QWORD *)(v211 + 80) = v180;
    v212 = (std::__shared_weak_count *)operator new(0x20uLL);
    v212->__shared_owners_ = 0;
    v213 = (unint64_t *)&v212->__shared_owners_;
    v212->__shared_weak_owners_ = 0;
    v212->__vftable = (std::__shared_weak_count_vtbl *)v172;
    v214 = operator new();
    v212[1].__vftable = (std::__shared_weak_count_vtbl *)v214;
    *(_BYTE *)v214 = 0;
    *(_BYTE *)(v214 + 16) = 0;
    *(_BYTE *)(v214 + 80) = 0;
    *(_QWORD *)(v214 + 32) = 0;
    *(_QWORD *)(v214 + 40) = 0;
    *(_QWORD *)(v214 + 24) = 0;
    *(_BYTE *)(v214 + 48) = 0;
    *(_DWORD *)(v214 + 112) = 0;
    *(_QWORD *)(v214 + 88) = 0x7FF8000000000000;
    *(_QWORD *)(v214 + 120) = 0;
    *(_QWORD *)(v214 + 128) = 0;
    *(_DWORD *)(v214 + 136) = 0;
    *(_OWORD *)(v214 + 144) = 0u;
    *(_OWORD *)(v214 + 176) = 0u;
    *(_OWORD *)(v214 + 192) = 0u;
    *(_OWORD *)(v214 + 208) = 0u;
    *(_OWORD *)(v214 + 160) = 0u;
    snprintf((char *)(v214 + 160), 0x40uLL, "(%p uuid=%s)", &v212[1], "unset");
    v215 = *v210;
    do
      v216 = __ldxr(v213);
    while (__stxr(v216 + 1, v213));
    v217 = *(std::__shared_weak_count **)(v215 + 32);
    *(_QWORD *)(v215 + 24) = v212 + 1;
    *(_QWORD *)(v215 + 32) = v212;
    if (v217)
    {
      v218 = (unint64_t *)&v217->__shared_owners_;
      do
        v219 = __ldaxr(v218);
      while (__stlxr(v219 - 1, v218));
      if (!v219)
      {
        ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
        std::__shared_weak_count::__release_weak(v217);
      }
    }
    do
      v220 = __ldaxr(v213);
    while (__stlxr(v220 - 1, v213));
    if (!v220)
    {
      ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
      std::__shared_weak_count::__release_weak(v212);
    }
    v221 = *(char **)&v2608[8];
    if (*(_QWORD *)&v2608[8] < *(_QWORD *)&v2608[16])
    {
      **(_OWORD **)&v2608[8] = *(_OWORD *)v2599;
      *(_QWORD *)&v2608[8] = v221 + 16;
LABEL_211:
      v164 = v2567;
      v165 = (char *)v2566;
      goto LABEL_212;
    }
    v222 = *(char **)v2608;
    v223 = (uint64_t)(*(_QWORD *)&v2608[8] - *(_QWORD *)v2608) >> 4;
    v224 = v223 + 1;
    if ((unint64_t)(v223 + 1) >> 60)
      abort();
    v225 = v172;
    v226 = v171;
    v227 = *(_QWORD *)&v2608[16] - *(_QWORD *)v2608;
    if ((uint64_t)(*(_QWORD *)&v2608[16] - *(_QWORD *)v2608) >> 3 > v224)
      v224 = v227 >> 3;
    if ((unint64_t)v227 >= 0x7FFFFFFFFFFFFFF0)
      v228 = 0xFFFFFFFFFFFFFFFLL;
    else
      v228 = v224;
    if (v228 >> 60)
      sub_1C9899D30();
    v229 = (char *)operator new(16 * v228);
    v230 = &v229[16 * v223];
    *(_OWORD *)v230 = *(_OWORD *)v2599;
    v231 = v230 + 16;
    v232 = &v229[16 * v228];
    *(_QWORD *)&v2599[8] = 0;
    *(_QWORD *)v2599 = 0;
    if (v221 == v222)
    {
      *(_QWORD *)v2608 = &v229[16 * v223];
      *(_QWORD *)&v2608[16] = &v229[16 * v228];
      v171 = v226;
      v172 = v225;
      if (!v221)
        goto LABEL_278;
    }
    else
    {
      v233 = v221;
      v171 = v226;
      do
      {
        v234 = *((_OWORD *)v233 - 1);
        v233 -= 16;
        *((_OWORD *)v230 - 1) = v234;
        v230 -= 16;
        *(_QWORD *)v233 = 0;
        *((_QWORD *)v233 + 1) = 0;
      }
      while (v233 != v222);
      *(_QWORD *)v2608 = v230;
      *(_QWORD *)&v2608[8] = v231;
      *(_QWORD *)&v2608[16] = v232;
      v172 = v225;
      do
      {
        v235 = (std::__shared_weak_count *)*((_QWORD *)v221 - 1);
        if (v235)
        {
          v236 = (unint64_t *)&v235->__shared_owners_;
          do
            v237 = __ldaxr(v236);
          while (__stlxr(v237 - 1, v236));
          if (!v237)
          {
            ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
            std::__shared_weak_count::__release_weak(v235);
          }
        }
        v221 -= 16;
      }
      while (v221 != v222);
      v221 = v222;
      if (!v222)
        goto LABEL_278;
    }
    operator delete(v221);
LABEL_278:
    v238 = *(std::__shared_weak_count **)&v2599[8];
    *(_QWORD *)&v2608[8] = v231;
    if (*(_QWORD *)&v2599[8])
    {
      v239 = (unint64_t *)(*(_QWORD *)&v2599[8] + 8);
      do
        v240 = __ldaxr(v239);
      while (__stlxr(v240 - 1, v239));
      if (!v240)
      {
        ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
        std::__shared_weak_count::__release_weak(v238);
      }
    }
    goto LABEL_211;
  }
  v241 = 0;
  v242 = 0;
LABEL_287:
  if ((char *)v241 - (char *)v242 < 1)
  {
LABEL_291:
    v246 = 0;
    v244 = 0;
  }
  else
  {
    v243 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    v244 = ((char *)v241 - (char *)v242) >> 4;
    while (1)
    {
      v245 = operator new(16 * v244, v243);
      if (v245)
        break;
      v557 = v244 > 1;
      v244 >>= 1;
      if (!v557)
        goto LABEL_291;
    }
    v246 = v245;
  }
  sub_1C98A9888(v242, v241, ((char *)v241 - (char *)v242) >> 4, (uint64_t)v246, v244);
  if (v246)
    operator delete(v246);
  v248 = *(__int128 **)v2608;
  v247 = *(_QWORD *)&v2608[8];
  if ((uint64_t)(*(_QWORD *)&v2608[8] - *(_QWORD *)v2608) < 1)
    goto LABEL_338;
  v249 = *(void ***)(v79 + 120);
  v250 = (uint64_t)(*(_QWORD *)&v2608[8] - *(_QWORD *)v2608) >> 4;
  v252 = *v249;
  v251 = (unint64_t)v249[1];
  v253 = v251 - (_QWORD)*v249;
  v254 = (unint64_t)*v249 + (v253 & 0xFFFFFFFFFFFFFFF0);
  v255 = v249[2];
  if (v250 > (uint64_t)&v255[-v251] >> 4)
  {
    v256 = v253 >> 4;
    v257 = (v253 >> 4) + v250;
    if (v257 >> 60)
      abort();
    v258 = v255 - (_BYTE *)v252;
    v259 = (v255 - (_BYTE *)v252) >> 3;
    if (v259 > v257)
      v257 = v259;
    if (v258 >= 0x7FFFFFFFFFFFFFF0)
      v260 = 0xFFFFFFFFFFFFFFFLL;
    else
      v260 = v257;
    if (v260)
    {
      if (v260 >> 60)
        sub_1C9899D30();
      v261 = (char *)operator new(16 * v260);
    }
    else
    {
      v261 = 0;
    }
    v266 = &v261[16 * v256];
    v267 = 16 * v250;
    v268 = &v266[16 * v250];
    v269 = v266;
    do
    {
      *(_OWORD *)v269 = *v248;
      v269 += 16;
      *(_QWORD *)v248 = 0;
      *((_QWORD *)v248++ + 1) = 0;
      v267 -= 16;
    }
    while (v267);
    v270 = *v249;
    if (*v249 != (void *)v254)
    {
      v271 = (_QWORD *)v254;
      do
      {
        v272 = *((_OWORD *)v271 - 1);
        v271 -= 2;
        *((_OWORD *)v266 - 1) = v272;
        v266 -= 16;
        *v271 = 0;
        v271[1] = 0;
      }
      while (v271 != v270);
    }
    v273 = v249[1];
    if (v273 != (void *)v254)
    {
      do
      {
        *(_OWORD *)v268 = *(_OWORD *)v254;
        v268 += 16;
        *(_QWORD *)v254 = 0;
        *(_QWORD *)(v254 + 8) = 0;
        v254 += 16;
      }
      while ((void *)v254 != v273);
      v254 = (unint64_t)v249[1];
    }
    v274 = *v249;
    *v249 = v266;
    v249[1] = v268;
    v249[2] = &v261[16 * v260];
    while ((void *)v254 != v274)
    {
      v275 = *(std::__shared_weak_count **)(v254 - 8);
      if (v275)
      {
        v276 = (unint64_t *)&v275->__shared_owners_;
        do
          v277 = __ldaxr(v276);
        while (__stlxr(v277 - 1, v276));
        if (!v277)
        {
          ((void (*)(std::__shared_weak_count *))v275->__on_zero_shared)(v275);
          std::__shared_weak_count::__release_weak(v275);
        }
      }
      v254 -= 16;
    }
    if (v274)
      operator delete(v274);
    goto LABEL_338;
  }
  v262 = (uint64_t)(v251 - v254) >> 4;
  if (v262 >= v250)
  {
    v263 = *(_QWORD *)v2608 + 16 * v250;
    v265 = v249[1];
LABEL_333:
    v278 = &v265[-v250];
    v279 = v265;
    if ((unint64_t)v278 < v251)
    {
      v280 = &v265[-v250];
      v279 = v265;
      do
      {
        *v279++ = *v280;
        *(_QWORD *)v280 = 0;
        *((_QWORD *)v280++ + 1) = 0;
      }
      while ((unint64_t)v280 < v251);
    }
    v249[1] = v279;
    if (v265 != (_OWORD *)(v254 + 16 * v250))
    {
      do
      {
        v300 = *((_OWORD *)v278 - 1);
        v278 -= 2;
        *v278 = 0;
        v278[1] = 0;
        v301 = (std::__shared_weak_count *)*((_QWORD *)v265 - 1);
        *--v265 = v300;
        if (v301)
        {
          v302 = (unint64_t *)&v301->__shared_owners_;
          do
            v303 = __ldaxr(v302);
          while (__stlxr(v303 - 1, v302));
          if (!v303)
          {
            ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
            std::__shared_weak_count::__release_weak(v301);
          }
        }
      }
      while (v278 != (_QWORD *)v254);
    }
    if ((__int128 *)v263 != v248)
    {
      do
      {
        v304 = *v248;
        *(_QWORD *)v248 = 0;
        *((_QWORD *)v248 + 1) = 0;
        v305 = *(std::__shared_weak_count **)(v254 + 8);
        *(_OWORD *)v254 = v304;
        if (v305)
        {
          v306 = (unint64_t *)&v305->__shared_owners_;
          do
            v307 = __ldaxr(v306);
          while (__stlxr(v307 - 1, v306));
          if (!v307)
          {
            ((void (*)(std::__shared_weak_count *))v305->__on_zero_shared)(v305);
            std::__shared_weak_count::__release_weak(v305);
          }
        }
        ++v248;
        v254 += 16;
      }
      while (v248 != (__int128 *)v263);
    }
    goto LABEL_338;
  }
  v263 = *(_QWORD *)v2608 + 16 * v262;
  if (v263 == *(_QWORD *)&v2608[8])
  {
    v265 = v249[1];
  }
  else
  {
    v264 = *(_QWORD *)v2608 + 16 * v262;
    v265 = v249[1];
    do
    {
      *v265++ = *(_OWORD *)v264;
      *(_QWORD *)v264 = 0;
      *(_QWORD *)(v264 + 8) = 0;
      v264 += 16;
    }
    while (v264 != v247);
  }
  v249[1] = v265;
  if ((uint64_t)(v251 - v254) >= 1)
    goto LABEL_333;
LABEL_338:
  v281 = *(__n128 ***)(v79 + 120);
  v282 = *v281;
  v283 = (char *)v281[1] - (char *)*v281;
  if ((unint64_t)v283 < 0x11)
  {
    v285 = v2453;
  }
  else
  {
    v284 = v283 >> 4;
    v285 = v2453;
    do
    {
      v286 = 0;
      if (v284 <= 2)
        v287 = 2;
      else
        v287 = v284;
      v288 = v287 - 1;
      do
      {
        v289 = **(_QWORD **)(v79 + 120);
        v290 = **(_QWORD **)(v289 + v286);
        v291 = *(float *)(v290 + 52);
        v292 = 0.0;
        v293 = 0.0;
        if (v291 >= 0.0)
        {
          v294 = *(float *)(v290 + 56);
          if (v294 >= 0.0)
            v293 = v291 * v294;
        }
        v295 = v289 + v286;
        v296 = **(_QWORD **)(v289 + v286 + 16);
        v297 = *(float *)(v296 + 52);
        if (v297 >= 0.0)
        {
          v298 = *(float *)(v296 + 56);
          if (v298 >= 0.0)
            v292 = v297 * v298;
        }
        if (v292 > (float)(v293 + v293))
        {
          v299 = *(_OWORD *)(v289 + v286);
          *(_OWORD *)(v289 + v286) = *(_OWORD *)(v295 + 16);
          *(_OWORD *)(v295 + 16) = v299;
        }
        v286 += 16;
        --v288;
      }
      while (v288);
      --v284;
    }
    while (v284 > 1);
    v281 = *(__n128 ***)(v79 + 120);
    v282 = *v281;
    v283 = (char *)v281[1] - (char *)*v281;
  }
  v308 = (unint64_t)v283 >> 4;
  if ((int)v308 >= v285)
    v309 = v285;
  else
    v309 = v308;
  v2551 = 0;
  v2550 = 0;
  v2552 = 0;
  if (v309)
  {
    if (v309 < 0)
      abort();
    v2550 = operator new(16 * v309);
    v2551 = (char *)v2550;
    v2552 = (char *)v2550 + 16 * v309;
    v281 = *(__n128 ***)(v79 + 120);
    v282 = *v281;
  }
  v310 = v281[1];
  if (v282 != v310)
  {
    while (1)
    {
      v312 = (__n128 *)v2551;
      if (v309 > (int)((unint64_t)(v2551 - (_BYTE *)v2550) >> 4))
      {
        if (v2551 >= v2552)
        {
          v316 = sub_1C98A9E00((uint64_t)&v2550, *v282);
        }
        else
        {
          *(_QWORD *)v2551 = v282->n128_u64[0];
          v313 = v282->n128_u64[1];
          v312->n128_u64[1] = v313;
          if (v313)
          {
            v314 = (unint64_t *)(v313 + 8);
            do
              v315 = __ldxr(v314);
            while (__stxr(v315 + 1, v314));
          }
          v316 = v312 + 1;
        }
        v2551 = (char *)v316;
        v325 = *(_QWORD *)v282->n128_u64[0];
        if (*(_QWORD *)(v325 + 128))
          goto LABEL_379;
        v327 = *(float *)(v325 + 44);
        v326 = *(float *)(v325 + 48);
        v328 = *(float *)(v325 + 52);
        v329 = *(float *)(v325 + 56);
        v330 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
        if ((v330 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
        {
          qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
          __cxa_guard_release(&qword_1ED52ACD0);
        }
        v331 = (id)qword_1ED52ACE0;
        if (os_log_type_enabled(v331, OS_LOG_TYPE_DEFAULT))
        {
          v332 = *(_QWORD *)v282->n128_u64[0];
          v333 = *(_QWORD **)(v332 + 24);
          v334 = *(std::__shared_weak_count **)(v332 + 32);
          if (v334)
          {
            v335 = (unint64_t *)&v334->__shared_owners_;
            do
              v336 = __ldxr(v335);
            while (__stxr(v336 + 1, v335));
          }
          if (v333)
          {
            v337 = (const char *)(*v333 + 160);
            if (!v334)
              goto LABEL_415;
          }
          else
          {
            v337 = "(null)";
            if (!v334)
              goto LABEL_415;
          }
          v340 = (unint64_t *)&v334->__shared_owners_;
          do
            v341 = __ldaxr(v340);
          while (__stlxr(v341 - 1, v340));
          if (!v341)
          {
            ((void (*)(std::__shared_weak_count *))v334->__on_zero_shared)(v334);
            std::__shared_weak_count::__release_weak(v334);
          }
LABEL_415:
          *(_DWORD *)buf = 136316162;
          *(_QWORD *)&buf[4] = v337;
          *(_WORD *)&buf[12] = 2048;
          *(double *)&buf[14] = (float)(v327 + (float)(v328 * 0.5));
          *(_WORD *)&buf[22] = 2048;
          *(double *)&buf[24] = (float)(v326 + (float)(v329 * 0.5));
          *(_WORD *)&buf[32] = 2048;
          *(double *)&buf[34] = v328;
          *(_WORD *)&buf[42] = 2048;
          *(double *)&buf[44] = v329;
          _os_log_impl(&dword_1C9870000, v331, OS_LOG_TYPE_DEFAULT, "new track for user %s at (%.0f,%.0f), bbox size (%.0f,%.0f)", buf, 0x34u);
        }

        goto LABEL_379;
      }
      v311 = (uint64_t *)v282->n128_u64[0];
      if (*(_QWORD *)(*(_QWORD *)v282->n128_u64[0] + 128))
        break;
LABEL_378:
      sub_1C98EB318(v311);
LABEL_379:
      if (++v282 == v310)
        goto LABEL_421;
    }
    v317 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
    if ((v317 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
    {
      qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
      __cxa_guard_release(&qword_1ED52ACD0);
    }
    v318 = (id)qword_1ED52ACE0;
    if (!os_log_type_enabled(v318, OS_LOG_TYPE_DEFAULT))
    {
LABEL_377:

      v311 = (uint64_t *)v282->n128_u64[0];
      goto LABEL_378;
    }
    v319 = *(_QWORD *)v282->n128_u64[0];
    v320 = *(_QWORD **)(v319 + 24);
    v321 = *(std::__shared_weak_count **)(v319 + 32);
    if (v321)
    {
      v322 = (unint64_t *)&v321->__shared_owners_;
      do
        v323 = __ldxr(v322);
      while (__stxr(v323 + 1, v322));
    }
    if (v320)
    {
      v324 = (const char *)(*v320 + 160);
      if (!v321)
        goto LABEL_376;
    }
    else
    {
      v324 = "(null)";
      if (!v321)
      {
LABEL_376:
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v324;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v309;
        _os_log_impl(&dword_1C9870000, v318, OS_LOG_TYPE_DEFAULT, "resetting track for user %s: exceeded number of faces to track (%d)", buf, 0x12u);
        goto LABEL_377;
      }
    }
    v338 = (unint64_t *)&v321->__shared_owners_;
    do
      v339 = __ldaxr(v338);
    while (__stlxr(v339 - 1, v338));
    if (!v339)
    {
      ((void (*)(std::__shared_weak_count *))v321->__on_zero_shared)(v321);
      std::__shared_weak_count::__release_weak(v321);
    }
    goto LABEL_376;
  }
LABEL_421:
  v342 = *(char **)v2608;
  if (*(_QWORD *)v2608)
  {
    v343 = *(char **)&v2608[8];
    if (*(_QWORD *)&v2608[8] != *(_QWORD *)v2608)
    {
      do
      {
        v344 = (std::__shared_weak_count *)*((_QWORD *)v343 - 1);
        if (v344)
        {
          v345 = (unint64_t *)&v344->__shared_owners_;
          do
            v346 = __ldaxr(v345);
          while (__stlxr(v346 - 1, v345));
          if (!v346)
          {
            ((void (*)(std::__shared_weak_count *))v344->__on_zero_shared)(v344);
            std::__shared_weak_count::__release_weak(v344);
          }
        }
        v343 -= 16;
      }
      while (v343 != v342);
      v342 = *(char **)v2608;
    }
    operator delete(v342);
  }
  kdebug_trace();
  v2444 = v2551 - (_BYTE *)v2550;
  v347 = (unint64_t)(v2551 - (_BYTE *)v2550) >> 4;
  if (texture && (int)v347 >= 1 && *(_BYTE *)(*a2 + 136))
  {
    kdebug_trace();
    v348 = *a2;
    v349 = *(_DWORD *)(*(_QWORD *)(*a2 + 8) + 48);
    if (v349 == 1)
    {
      v350 = 3;
    }
    else
    {
      if (v349 == 2)
      {
        v2471 = 0;
LABEL_452:
        CVPixelBufferRetain(texture);
        v357 = CVPixelBufferGetWidth(texture);
        v2456 = v347;
        v358 = CVPixelBufferGetHeight(texture);
        PixelFormatType = CVPixelBufferGetPixelFormatType(texture);
        v360 = PixelFormatType;
        v361 = *(_QWORD *)(v348 + 128);
        v2505 = v348;
        if (*(_DWORD *)v361 == v357
          && *(_DWORD *)(v361 + 4) == v358
          && (_DWORD)PixelFormatType == *(_DWORD *)(v361 + 20)
          && *(_DWORD *)(v361 + 12) >= v2471)
        {
          goto LABEL_518;
        }
        v362 = *(char **)(v361 + 24);
        if (v2471 <= (unint64_t)((uint64_t)(*(_QWORD *)(v361 + 40) - (_QWORD)v362) >> 3))
          goto LABEL_463;
        v363 = *(char **)(v361 + 32);
        v364 = (char *)operator new(8 * v2471);
        v365 = v363 - v362;
        v366 = (unint64_t)&v364[(v363 - v362) & 0xFFFFFFFFFFFFFFF8];
        v367 = &v364[8 * v2471];
        if (v363 == v362)
        {
          *(_QWORD *)(v361 + 24) = v366;
          *(_QWORD *)(v361 + 32) = v366;
          *(_QWORD *)(v361 + 40) = v367;
          goto LABEL_461;
        }
        v368 = v363 - v362 - 8;
        if (v368 > 0x77)
        {
          v2281 = &v364[(v365 & 0xFFFFFFFFFFFFFFF8) - (v368 & 0xFFFFFFFFFFFFFFF8) - 8] >= v363
               || (unint64_t)&v363[-(v368 & 0xFFFFFFFFFFFFFFF8) - 8] >= v366;
          v369 = &v364[(v363 - v362) & 0xFFFFFFFFFFFFFFF8];
          if (v2281)
          {
            v2282 = v365 >> 3;
            v2283 = (v368 >> 3) + 1;
            v2284 = &v364[8 * v2282 - 16];
            v2285 = v363 - 32;
            v2286 = v2283 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v2287 = *((_OWORD *)v2285 + 1);
              *((_OWORD *)v2284 - 1) = *(_OWORD *)v2285;
              *(_OWORD *)v2284 = v2287;
              *(_OWORD *)v2285 = 0uLL;
              *((_OWORD *)v2285 + 1) = 0uLL;
              v2285 -= 32;
              v2284 -= 32;
              v2286 -= 4;
            }
            while (v2286);
            v369 = (char *)(v366 - 8 * (v2283 & 0x3FFFFFFFFFFFFFFCLL));
            v363 -= 8 * (v2283 & 0x3FFFFFFFFFFFFFFCLL);
            if (v2283 == (v2283 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_2621:
              v362 = *(char **)(v361 + 24);
              v2289 = *(char **)(v361 + 32);
              *(_QWORD *)(v361 + 24) = v369;
              *(_QWORD *)(v361 + 32) = v366;
              *(_QWORD *)(v361 + 40) = v367;
              while (v2289 != v362)
              {
                v2291 = (__CVBuffer *)*((_QWORD *)v2289 - 1);
                v2289 -= 8;
                v2290 = v2291;
                if (v2291)
                  CVPixelBufferRelease(v2290);
              }
LABEL_461:
              if (v362)
                operator delete(v362);
LABEL_463:
              *(_QWORD *)(*(_QWORD *)(v348 + 128) + 56) = *(_QWORD *)(*(_QWORD *)(v348 + 128) + 48);
              v361 = *(_QWORD *)(v348 + 128);
              *(_DWORD *)v361 = v357;
              *(_DWORD *)(v361 + 4) = v358;
              *(_DWORD *)(v361 + 12) = v2471;
              *(_DWORD *)(v361 + 16) = v2471;
              *(_DWORD *)(v361 + 20) = v360;
              if (v2471 >= 1)
              {
                v370 = 0;
                if (v358 >= 0)
                  v371 = v358;
                else
                  v371 = v358 + 1;
                v372 = (v371 >> 1);
                if (v357 >= 0)
                  v373 = v357;
                else
                  v373 = v357 + 1;
                v374 = (v373 >> 1);
                keya = (const __CFString *)*MEMORY[0x1E0CBC048];
                v2487 = v360;
                while (1)
                {
                  if ((int)v374 < 17 || (int)v372 <= 16)
                  {
                    v401 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
                    if ((v401 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
                    {
                      qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
                      __cxa_guard_release(&qword_1ED52ACD0);
                    }
                    v402 = (id)qword_1ED52ACE0;
                    if (os_log_type_enabled(v402, OS_LOG_TYPE_INFO))
                    {
                      *(_DWORD *)buf = 67109632;
                      *(_DWORD *)&buf[4] = v370;
                      *(_WORD *)&buf[8] = 1024;
                      *(_DWORD *)&buf[10] = v374;
                      *(_WORD *)&buf[14] = 1024;
                      *(_DWORD *)&buf[16] = v372;
                      _os_log_impl(&dword_1C9870000, v402, OS_LOG_TYPE_INFO, "image size in pyramid is becoming too small, size for level %d is %d/%d, stopping!", buf, 0x14u);
                    }

                    v361 = *(_QWORD *)(v348 + 128);
                    *(_DWORD *)(v361 + 16) = v370;
                    break;
                  }
                  v375 = *(_QWORD **)(v348 + 128);
                  v376 = (char *)v375[3];
                  v377 = (char *)v375[4];
                  v378 = v377 - v376;
                  if (v370 < (int)((unint64_t)(v377 - v376) >> 3))
                    goto LABEL_508;
                  v379 = v375[5];
                  if ((unint64_t)v377 >= v379)
                  {
                    v381 = v378 >> 3;
                    v382 = (v378 >> 3) + 1;
                    if (v382 >> 61)
                      abort();
                    v383 = v379 - (_QWORD)v376;
                    if (v383 >> 2 > v382)
                      v382 = v383 >> 2;
                    if ((unint64_t)v383 >= 0x7FFFFFFFFFFFFFF8)
                      v384 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v384 = v382;
                    if (v384)
                    {
                      if (v384 >> 61)
                        sub_1C9899D30();
                      v385 = (char *)operator new(8 * v384);
                    }
                    else
                    {
                      v385 = 0;
                    }
                    v386 = &v385[8 * v381];
                    v387 = &v385[8 * v384];
                    *(_QWORD *)v386 = 0;
                    v380 = v386 + 8;
                    if (v377 == v376)
                    {
                      v375[3] = v386;
                      v375[4] = v380;
                      v375[5] = v387;
                      v348 = v2505;
                    }
                    else
                    {
                      v388 = v377 - v376 - 8;
                      if (v388 <= 0x77)
                        goto LABEL_2864;
                      if (&v385[v378 - (v388 & 0xFFFFFFFFFFFFFFF8) - 8] < v377
                        && &v377[-(v388 & 0xFFFFFFFFFFFFFFF8) - 8] < v386)
                      {
                        goto LABEL_2864;
                      }
                      v390 = (v388 >> 3) + 1;
                      v391 = &v385[8 * v381 - 16];
                      v392 = v377 - 32;
                      v393 = v390 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v394 = *((_OWORD *)v392 + 1);
                        *((_OWORD *)v391 - 1) = *(_OWORD *)v392;
                        *(_OWORD *)v391 = v394;
                        *(_OWORD *)v392 = 0uLL;
                        *((_OWORD *)v392 + 1) = 0uLL;
                        v392 -= 32;
                        v391 -= 32;
                        v393 -= 4;
                      }
                      while (v393);
                      v386 -= 8 * (v390 & 0x3FFFFFFFFFFFFFFCLL);
                      v377 -= 8 * (v390 & 0x3FFFFFFFFFFFFFFCLL);
                      if (v390 != (v390 & 0x3FFFFFFFFFFFFFFCLL))
                      {
LABEL_2864:
                        do
                        {
                          v395 = *((_QWORD *)v377 - 1);
                          v377 -= 8;
                          *((_QWORD *)v386 - 1) = v395;
                          v386 -= 8;
                          *(_QWORD *)v377 = 0;
                        }
                        while (v377 != v376);
                      }
                      v377 = (char *)v375[3];
                      v396 = (char *)v375[4];
                      v375[3] = v386;
                      v375[4] = v380;
                      v375[5] = v387;
                      if (v396 == v377)
                      {
                        v348 = v2505;
                        if (!v377)
                          goto LABEL_507;
LABEL_506:
                        operator delete(v377);
                        goto LABEL_507;
                      }
                      v348 = v2505;
                      do
                      {
                        v398 = (__CVBuffer *)*((_QWORD *)v396 - 1);
                        v396 -= 8;
                        v397 = v398;
                        if (v398)
                          CVPixelBufferRelease(v397);
                      }
                      while (v396 != v377);
                    }
                    if (v377)
                      goto LABEL_506;
                  }
                  else
                  {
                    *(_QWORD *)v377 = 0;
                    v380 = v377 + 8;
                  }
LABEL_507:
                  v375[4] = v380;
                  v376 = *(char **)(*(_QWORD *)(v348 + 128) + 24);
                  v360 = v2487;
LABEL_508:
                  v399 = sub_1C98877C4((CVPixelBufferRef *)&v376[8 * v370], (cva *)v374, v372, v360);
                  if (v399 == 2)
                  {
                    IOSurface = CVPixelBufferGetIOSurface(*(CVPixelBufferRef *)(*(_QWORD *)(*(_QWORD *)(v348 + 128)
                                                                                          + 24)
                                                                              + 8 * v370));
                    if (IOSurface)
                      IOSurfaceSetValue(IOSurface, keya, CFSTR("AppleCVA:ImagePyramid"));
                  }
                  else if (!v399)
                  {
                    v2292 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
                    if ((v2292 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
                    {
                      qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
                      __cxa_guard_release(&qword_1ED52ACD0);
                    }
                    v498 = (id)qword_1ED52ACE0;
                    if (os_log_type_enabled(v498, OS_LOG_TYPE_ERROR))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_error_impl(&dword_1C9870000, v498, OS_LOG_TYPE_ERROR, "failed to create/update buffer", buf, 2u);
                    }
                    goto LABEL_2639;
                  }
                  v374 = v374 >> 1;
                  v372 = v372 >> 1;
                  if (++v370 == v2471)
                  {
                    v361 = *(_QWORD *)(v348 + 128);
                    break;
                  }
                }
              }
LABEL_518:
              v403 = *(_DWORD *)(v361 + 16);
              if (v403 >= v2471)
                v403 = v2471;
              *(_DWORD *)(v361 + 8) = v403;
              if (*(_QWORD *)(v361 + 24) != *(_QWORD *)(v361 + 32) && !*(_QWORD *)(v361 + 72))
              {
                v428 = operator new(0x20uLL);
                v428[1] = 0;
                v428[2] = 0;
                *v428 = &off_1E82958E0;
                v429 = (_QWORD *)operator new();
                *v429 = 0;
                v429[1] = sub_1C98CFC4C(1);
                v429[2] = sub_1C98CFC4C(0);
                v429[3] = 0;
                v429[4] = 0;
                v429[5] = 0;
                v428[3] = v429;
                v430 = *(_QWORD *)(v348 + 128);
                v431 = *(std::__shared_weak_count **)(v430 + 80);
                *(_QWORD *)(v430 + 72) = v428 + 3;
                *(_QWORD *)(v430 + 80) = v428;
                if (v431)
                {
                  v432 = (unint64_t *)&v431->__shared_owners_;
                  do
                    v433 = __ldaxr(v432);
                  while (__stlxr(v433 - 1, v432));
                  if (!v433)
                  {
                    ((void (*)(std::__shared_weak_count *))v431->__on_zero_shared)(v431);
                    std::__shared_weak_count::__release_weak(v431);
                  }
                }
                v361 = *(_QWORD *)(v348 + 128);
                v434 = *(_QWORD *)(v361 + 72);
                if (!v434)
                {
                  v2299 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
                  if ((v2299 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
                  {
                    qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
                    __cxa_guard_release(&qword_1ED52ACD0);
                  }
                  v498 = (id)qword_1ED52ACE0;
                  if (os_log_type_enabled(v498, OS_LOG_TYPE_ERROR))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_error_impl(&dword_1C9870000, v498, OS_LOG_TYPE_ERROR, "failed to create hardware scaler", buf, 2u);
                  }
                  goto LABEL_2639;
                }
                if (!**(_QWORD **)v434)
                {
                  if (IOSurfaceAcceleratorCreate())
                  {
                    v435 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
                    if ((v435 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
                    {
                      qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
                      __cxa_guard_release(&qword_1ED52ACD0);
                    }
                    v436 = (id)qword_1ED52ACE0;
                    if (!os_log_type_enabled(v436, OS_LOG_TYPE_ERROR))
                      goto LABEL_2783;
                    *(_WORD *)buf = 0;
                    v437 = "failed to create IOAccelerator";
LABEL_2803:
                    _os_log_error_impl(&dword_1C9870000, v436, OS_LOG_TYPE_ERROR, v437, buf, 2u);
LABEL_2783:

                    v2395 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
                    if ((v2395 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
                    {
                      qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
                      __cxa_guard_release(&qword_1ED52ACD0);
                    }
                    v2396 = (id)qword_1ED52ACE0;
                    if (os_log_type_enabled(v2396, OS_LOG_TYPE_ERROR))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_error_impl(&dword_1C9870000, v2396, OS_LOG_TYPE_ERROR, "failed to init hardware scaler", buf, 2u);
                    }

                    v2397 = *(_QWORD *)(v348 + 128);
                    v2296 = *(std::__shared_weak_count **)(v2397 + 80);
                    *(_QWORD *)(v2397 + 72) = 0;
                    *(_QWORD *)(v2397 + 80) = 0;
                    if (!v2296)
                      goto LABEL_2791;
                    v2398 = (unint64_t *)&v2296->__shared_owners_;
                    do
                      v2298 = __ldaxr(v2398);
                    while (__stlxr(v2298 - 1, v2398));
                    goto LABEL_2789;
                  }
                  if (!*(_QWORD *)(*(_QWORD *)v434 + 8) || !*(_QWORD *)(*(_QWORD *)v434 + 16))
                  {
                    v2394 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
                    if ((v2394 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
                    {
                      qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
                      __cxa_guard_release(&qword_1ED52ACD0);
                    }
                    v436 = (id)qword_1ED52ACE0;
                    if (!os_log_type_enabled(v436, OS_LOG_TYPE_ERROR))
                      goto LABEL_2783;
                    *(_WORD *)buf = 0;
                    v437 = "options have not been setup properly";
                    goto LABEL_2803;
                  }
                  v2384 = IOServiceMatching("AppleM2ScalerCSCDriver");
                  MatchingService = IOServiceGetMatchingService(0, v2384);
                  if (!MatchingService)
                  {
                    v2401 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
                    if ((v2401 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
                    {
                      qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
                      __cxa_guard_release(&qword_1ED52ACD0);
                    }
                    v436 = (id)qword_1ED52ACE0;
                    if (!os_log_type_enabled(v436, OS_LOG_TYPE_ERROR))
                      goto LABEL_2783;
                    *(_WORD *)buf = 0;
                    v437 = "unable to retrieve hardware scaler";
                    goto LABEL_2803;
                  }
                  v2386 = (void *)IORegistryEntrySearchCFProperty(MatchingService, "IOService", CFSTR("IOSurfaceAcceleratorCapabilitiesDict"), 0, 0);
                  v2387 = v2386;
                  if (!v2386)
                  {
                    sub_1C98FE490();
                    v2402 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v2402, OS_LOG_TYPE_ERROR))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_error_impl(&dword_1C9870000, v2402, OS_LOG_TYPE_ERROR, "unable to retrieve hardware scaler options", buf, 2u);
                    }

                    v436 = 0;
                    goto LABEL_2783;
                  }
                  objc_msgSend(v2386, "objectForKey:", CFSTR("IOSurfaceAcceleratorFilterHorizontalTapsCount"));
                  v2388 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)(*(_QWORD *)v434 + 24) = objc_msgSend(v2388, "intValue");

                  objc_msgSend(v2387, "objectForKey:", CFSTR("IOSurfaceAcceleratorFilterVerticalTapsCount"));
                  v2389 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)(*(_QWORD *)v434 + 28) = objc_msgSend(v2389, "intValue");

                  objc_msgSend(v2387, "objectForKey:", CFSTR("IOSurfaceAcceleratorFilterHorizontalPhasesCount"));
                  v2390 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)(*(_QWORD *)v434 + 32) = objc_msgSend(v2390, "intValue");

                  objc_msgSend(v2387, "objectForKey:", CFSTR("IOSurfaceAcceleratorFilterVerticalPhasesCount"));
                  v2391 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)(*(_QWORD *)v434 + 36) = objc_msgSend(v2391, "intValue");

                  objc_msgSend(v2387, "objectForKey:", CFSTR("IOSurfaceAcceleratorFilterCoefficientsPrePointBits"));
                  v2392 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)(*(_QWORD *)v434 + 40) = objc_msgSend(v2392, "intValue");

                  objc_msgSend(v2387, "objectForKey:", CFSTR("IOSurfaceAcceleratorFilterCoefficientsPostPointBits"));
                  v2393 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)(*(_QWORD *)v434 + 44) = objc_msgSend(v2393, "intValue");

                  printf("horizontal taps count: %d\n", *(_DWORD *)(*(_QWORD *)v434 + 24));
                  printf("vertical taps count: %d\n", *(_DWORD *)(*(_QWORD *)v434 + 28));
                  printf("horizontal phase count: %d\n", *(_DWORD *)(*(_QWORD *)v434 + 32));
                  printf("vertical phase count: %d\n", *(_DWORD *)(*(_QWORD *)v434 + 36));
                  printf("pre point bits: %d\n", *(_DWORD *)(*(_QWORD *)v434 + 40));
                  printf("post point bits: %d\n", *(_DWORD *)(*(_QWORD *)v434 + 44));

                  v361 = *(_QWORD *)(v348 + 128);
                }
              }
              v404 = *(void **)(v361 + 48);
              if (v404 == *(void **)(v361 + 56))
              {
                v405 = *(_DWORD *)(v361 + 8);
                if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v361 + 64) - (_QWORD)v404) >> 2) < (unint64_t)v405)
                {
                  if (v405 < 0)
LABEL_2818:
                    abort();
                  v406 = (char *)operator new(28 * v405);
                  *(_QWORD *)(v361 + 48) = v406;
                  *(_QWORD *)(v361 + 56) = v406;
                  *(_QWORD *)(v361 + 64) = &v406[28 * v405];
                  if (v404)
                  {
                    operator delete(v404);
                    v405 = *(_DWORD *)(v361 + 8);
                  }
                }
                *(_QWORD *)&v2608[4] = 0;
                *(_DWORD *)v2608 = 1065353216;
                *(_OWORD *)&v2608[12] = xmmword_1C99274A0;
                if (v405 >= 1)
                {
                  v407 = 0;
                  while (1)
                  {
                    *(_QWORD *)&v2599[4] = 0;
                    *(_DWORD *)v2599 = 1056964608;
                    *(_DWORD *)&v2599[12] = 1056964608;
                    *(_QWORD *)&v2599[16] = 0;
                    *(_DWORD *)&v2599[24] = 1048576000;
                    __p[0] = v2599;
                    __p[1] = v2608;
                    *(_QWORD *)&v2592[8] = 0;
                    *(_QWORD *)v2592 = 0;
                    sub_1C98BE138((uint64_t)v2592, (float **)__p);
                    memptr[0] = v2599;
                    memptr[1] = &v2608[16];
                    *(_QWORD *)&buf[4] = 0;
                    sub_1C9888470((float *)&buf[4], (float **)memptr);
                    v409 = (float)(*(float *)v2592 * *(float *)&v2592[12])
                         - (float)(*(float *)&v2592[8] * *(float *)&v2592[4]);
                    *(_QWORD *)v2608 = *(_QWORD *)v2592;
                    *(_QWORD *)&v2608[8] = *(_QWORD *)&v2592[8];
                    *(float32x2_t *)&v2608[16] = vadd_f32(*(float32x2_t *)&buf[4], 0);
                    *(float *)&v2608[24] = v409;
                    if (fabsf(v409) < 1.0e-15)
                      break;
                    v410 = *(float *)&v2592[12] / v409;
                    v411 = (float)-*(float *)&v2592[4] / v409;
                    *(float *)buf = *(float *)&v2592[12] / v409;
                    *(float *)&buf[4] = v411;
                    v412 = (float)-*(float *)&v2592[8] / v409;
                    v413 = *(float *)v2592 / v409;
                    *(float *)&buf[8] = v412;
                    *(float *)&buf[12] = *(float *)v2592 / v409;
                    *(_QWORD *)v2592 = buf;
                    *(_QWORD *)v2599 = v2592;
                    *(_QWORD *)&v2599[8] = &v2608[16];
                    __p[0] = 0;
                    sub_1C98BDF7C((float *)__p, (uint64_t)v2599);
                    v414 = __p[0];
                    v415 = (float)(v410 * v413) - (float)(v412 * v411);
                    v417 = *(float **)(v361 + 56);
                    v416 = *(_QWORD *)(v361 + 64);
                    if ((unint64_t)v417 < v416)
                    {
                      *v417 = v410;
                      v417[1] = v411;
                      v417[2] = v412;
                      v417[3] = v413;
                      *((_QWORD *)v417 + 2) = v414;
                      v408 = (char *)(v417 + 7);
                      v417[6] = v415;
                    }
                    else
                    {
                      v418 = *(float **)(v361 + 48);
                      v419 = 0x6DB6DB6DB6DB6DB7 * (v417 - v418) + 1;
                      if (v419 > 0x924924924924924)
                        goto LABEL_2818;
                      v420 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v416 - (_QWORD)v418) >> 2);
                      if (2 * v420 > v419)
                        v419 = 2 * v420;
                      if (v420 >= 0x492492492492492)
                        v421 = 0x924924924924924;
                      else
                        v421 = v419;
                      if (v421 > 0x924924924924924)
                        sub_1C9899D30();
                      v422 = (char *)operator new(28 * v421);
                      v423 = (float *)&v422[4 * (v417 - v418)];
                      *v423 = v410;
                      v423[1] = v411;
                      v423[2] = v412;
                      v423[3] = v413;
                      *((_QWORD *)v423 + 2) = v414;
                      v423[6] = v415;
                      if (v417 == v418)
                      {
                        v426 = &v422[4 * (v417 - v418)];
                      }
                      else
                      {
                        v424 = 0;
                        do
                        {
                          v425 = (char *)&v423[v424];
                          *(_OWORD *)(v425 - 28) = *(_OWORD *)&v417[v424 - 7];
                          *(_QWORD *)(v425 - 12) = *(_QWORD *)&v417[v424 - 3];
                          *((float *)v425 - 1) = v417[v424 - 1];
                          v424 -= 7;
                        }
                        while (&v417[v424] != v418);
                        v426 = (char *)&v423[v424];
                      }
                      v427 = &v422[28 * v421];
                      v408 = (char *)(v423 + 7);
                      *(_QWORD *)(v361 + 48) = v426;
                      *(_QWORD *)(v361 + 56) = v423 + 7;
                      *(_QWORD *)(v361 + 64) = v427;
                      if (v418)
                        operator delete(v418);
                    }
                    *(_QWORD *)(v361 + 56) = v408;
                    ++v407;
                    v348 = v2505;
                    if (v407 >= *(_DWORD *)(v361 + 8))
                      goto LABEL_558;
                  }
                  v2293 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
                  if ((v2293 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
                  {
                    qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
                    __cxa_guard_release(&qword_1ED52ACD0);
                  }
                  v2294 = (id)qword_1ED52ACE0;
                  if (os_log_type_enabled(v2294, OS_LOG_TYPE_ERROR))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_error_impl(&dword_1C9870000, v2294, OS_LOG_TYPE_ERROR, "failed to set transformation in image pyramid", buf, 2u);
                  }

                  v2295 = *(_QWORD *)(v348 + 128);
                  v2296 = *(std::__shared_weak_count **)(v2295 + 80);
                  *(_QWORD *)(v2295 + 72) = 0;
                  *(_QWORD *)(v2295 + 80) = 0;
                  if (!v2296)
                    goto LABEL_2791;
                  v2297 = (unint64_t *)&v2296->__shared_owners_;
                  do
                    v2298 = __ldaxr(v2297);
                  while (__stlxr(v2298 - 1, v2297));
LABEL_2789:
                  if (!v2298)
                  {
                    ((void (*)(std::__shared_weak_count *))v2296->__on_zero_shared)(v2296);
                    std::__shared_weak_count::__release_weak(v2296);
                  }
                  goto LABEL_2791;
                }
LABEL_558:
                v361 = *(_QWORD *)(v348 + 128);
              }
              LODWORD(v438) = *(_DWORD *)(v361 + 8);
              if ((int)v438 < 1)
                goto LABEL_616;
              v439 = 0;
              v440 = 1;
              v441 = texture;
              while (1)
              {
                if (!v440)
                  goto LABEL_652;
                v442 = v441;
                v441 = *(__CVBuffer **)(*(_QWORD *)(v361 + 24) + 8 * v439);
                if (***(_QWORD ***)(v361 + 72))
                {
                  if (v442)
                  {
                    if (v441)
                    {
                      if (CVPixelBufferGetIOSurface(v442))
                      {
                        if (CVPixelBufferGetIOSurface(v441))
                        {
                          *(_OWORD *)v2599 = xmmword_1E82968C8;
                          *(_QWORD *)&v2599[16] = 0;
                          v443 = CVPixelBufferGetWidth(v442);
                          v444 = CVPixelBufferGetHeight(v442);
                          v445 = CVPixelBufferGetWidth(v441);
                          v446 = CVPixelBufferGetHeight(v441);
                          v447 = (v438 - 1);
                          *(_QWORD *)&buf[32] = 0;
                          *(_OWORD *)buf = 0u;
                          v448 = (int32x2_t)vmin_u32((uint32x2_t)(*(_QWORD *)&vmax_s32((int32x2_t)__PAIR64__(v446, v445), 0) & 0xFFFFFFFEFFFFFFFELL), (uint32x2_t)(*(_QWORD *)&vshr_n_u32((uint32x2_t)vmax_s32((int32x2_t)__PAIR64__(v444, v443), 0), 1uLL) & 0xFFFFFFFEFFFFFFFELL));
                          *(uint64x2_t *)&buf[16] = vshll_n_u32((uint32x2_t)vadd_s32(v448, v448), 0x10uLL);
                          *(int32x2_t *)&buf[40] = v448;
                          CVPixelBufferGetIOSurface(v442);
                          CVPixelBufferGetIOSurface(v441);
                          v449 = IOSurfaceAcceleratorTransformSurface();
                          v440 = v449 == 0;
                          if (v449)
                          {
                            v450 = CFCopyDescription(v442);
                            v451 = CFCopyDescription(v441);
                            v452 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
                            if ((v452 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
                            {
                              qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
                              __cxa_guard_release(&qword_1ED52ACD0);
                            }
                            v453 = (id)qword_1ED52ACE0;
                            if (os_log_type_enabled(v453, OS_LOG_TYPE_ERROR))
                            {
                              cva::ItemHandler::ItemHandler((cva::ItemHandler *)memptr, v450);
                              cva::ItemHandler::getValue<std::string>();
                              if (v2593 >= 0)
                                v460 = v2592;
                              else
                                v460 = *(_BYTE **)v2592;
                              cva::ItemHandler::ItemHandler((cva::ItemHandler *)&v2574, v451);
                              cva::ItemHandler::getValue<std::string>();
                              v461 = __p;
                              if (SBYTE7(v2585) < 0)
                                v461 = (void **)__p[0];
                              *(_DWORD *)v2608 = 67109890;
                              *(_DWORD *)&v2608[4] = v449;
                              *(_WORD *)&v2608[8] = 1024;
                              *(_DWORD *)&v2608[10] = v439 == v447;
                              *(_WORD *)&v2608[14] = 2080;
                              *(_QWORD *)&v2608[16] = v460;
                              *(_WORD *)&v2608[24] = 2080;
                              *(_QWORD *)&v2608[26] = v461;
                              _os_log_error_impl(&dword_1C9870000, v453, OS_LOG_TYPE_ERROR, "failure during hardware scaling, error=0x%x, last=%d\ninput:\n%s\noutput:\n%s\n", v2608, 0x22u);
                              if (SBYTE7(v2585) < 0)
                                operator delete(__p[0]);
                              cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v2574);
                              v348 = v2505;
                              if (SHIBYTE(v2593) < 0)
                                operator delete(*(void **)v2592);
                              cva::ItemHandler::~ItemHandler((cva::ItemHandler *)memptr);
                            }

                            CFRelease(v450);
                            CFRelease(v451);
                          }
                          goto LABEL_591;
                        }
                        v459 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
                        if ((v459 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
                        {
                          qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
                          __cxa_guard_release(&qword_1ED52ACD0);
                        }
                        v455 = (id)qword_1ED52ACE0;
                        if (os_log_type_enabled(v455, OS_LOG_TYPE_ERROR))
                        {
                          *(_WORD *)buf = 0;
                          _os_log_error_impl(&dword_1C9870000, v455, OS_LOG_TYPE_ERROR, "output pixel buffer must be backed by an IOSurface", buf, 2u);
                        }
                      }
                      else
                      {
                        v458 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
                        if ((v458 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
                        {
                          qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
                          __cxa_guard_release(&qword_1ED52ACD0);
                        }
                        v455 = (id)qword_1ED52ACE0;
                        if (os_log_type_enabled(v455, OS_LOG_TYPE_ERROR))
                        {
                          *(_WORD *)buf = 0;
                          _os_log_error_impl(&dword_1C9870000, v455, OS_LOG_TYPE_ERROR, "input pixel buffer must be backed by an IOSurface", buf, 2u);
                        }
                      }
                    }
                    else
                    {
                      v457 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
                      if ((v457 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
                      {
                        qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
                        __cxa_guard_release(&qword_1ED52ACD0);
                      }
                      v455 = (id)qword_1ED52ACE0;
                      if (os_log_type_enabled(v455, OS_LOG_TYPE_ERROR))
                      {
                        *(_WORD *)buf = 0;
                        _os_log_error_impl(&dword_1C9870000, v455, OS_LOG_TYPE_ERROR, "no output defined", buf, 2u);
                      }
                    }
                  }
                  else
                  {
                    v456 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
                    if ((v456 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
                    {
                      qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
                      __cxa_guard_release(&qword_1ED52ACD0);
                    }
                    v455 = (id)qword_1ED52ACE0;
                    if (os_log_type_enabled(v455, OS_LOG_TYPE_ERROR))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_error_impl(&dword_1C9870000, v455, OS_LOG_TYPE_ERROR, "no input defined", buf, 2u);
                    }
                  }
                }
                else
                {
                  v454 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
                  if ((v454 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
                  {
                    qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
                    __cxa_guard_release(&qword_1ED52ACD0);
                  }
                  v455 = (id)qword_1ED52ACE0;
                  if (os_log_type_enabled(v455, OS_LOG_TYPE_ERROR))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_error_impl(&dword_1C9870000, v455, OS_LOG_TYPE_ERROR, "hardware scaler not initialized", buf, 2u);
                  }
                }

                v440 = 0;
LABEL_591:
                v361 = *(_QWORD *)(v348 + 128);
                ++v439;
                v438 = *(int *)(v361 + 8);
                if (v439 >= v438)
                {
                  if (v440)
                  {
LABEL_616:
                    CVPixelBufferRelease(texture);
                    kdebug_trace();
                    LODWORD(v347) = v2456;
                    goto LABEL_617;
                  }
LABEL_652:
                  v497 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
                  if ((v497 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
                  {
                    qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
                    __cxa_guard_release(&qword_1ED52ACD0);
                  }
                  v498 = (id)qword_1ED52ACE0;
                  if (os_log_type_enabled(v498, OS_LOG_TYPE_ERROR))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_error_impl(&dword_1C9870000, v498, OS_LOG_TYPE_ERROR, "failure during hardware scaling", buf, 2u);
                  }
LABEL_2639:

LABEL_2791:
                  CVPixelBufferRelease(texture);
                  v2399 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
                  if ((v2399 & 1) != 0)
                  {
LABEL_2792:
                    v2400 = (id)qword_1ED52ACE0;
                    if (os_log_type_enabled(v2400, OS_LOG_TYPE_ERROR))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_error_impl(&dword_1C9870000, v2400, OS_LOG_TYPE_ERROR, "could not generate image pyramid", buf, 2u);
                    }

                    sub_1C98CC760(a1);
                    kdebug_trace();
                    v825 = (char *)v2550;
                    if (v2550)
                      goto LABEL_972;
                    goto LABEL_987;
                  }
LABEL_2829:
                  if (__cxa_guard_acquire(&qword_1ED52ACD0))
                  {
                    qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
                    __cxa_guard_release(&qword_1ED52ACD0);
                  }
                  goto LABEL_2792;
                }
              }
            }
          }
        }
        else
        {
          v369 = &v364[(v363 - v362) & 0xFFFFFFFFFFFFFFF8];
        }
        do
        {
          v2288 = *((_QWORD *)v363 - 1);
          v363 -= 8;
          *((_QWORD *)v369 - 1) = v2288;
          v369 -= 8;
          *(_QWORD *)v363 = 0;
        }
        while (v363 != v362);
        goto LABEL_2621;
      }
      v351 = (char *)v2550;
      v352 = v2551;
      if (v2550 == v2551)
      {
        v353 = 0;
      }
      else
      {
        v353 = 0;
        v354 = (float)*(unsigned int *)(v348 + 48);
        do
        {
          v355 = *(_QWORD *)v351;
          v351 += 16;
          v356 = llroundf(-1.0 - log2f(v354 / *(float *)(*(_QWORD *)v355 + 52)));
          if (v356 < 0)
            v356 = -1;
          if (v353 <= v356 + 1)
            v353 = v356 + 1;
        }
        while (v351 != v352);
      }
      if (v353 >= 3)
        v350 = 3;
      else
        v350 = v353;
    }
    v2471 = v350;
    goto LABEL_452;
  }
LABEL_617:
  *(_OWORD *)v2547 = 0u;
  *(_OWORD *)v2548 = 0u;
  v2549 = 1065353216;
  kdebug_trace();
  (*(void (**)(_QWORD, void **, void **))(**(_QWORD **)(*a2 + 160) + 24))(*(_QWORD *)(*a2 + 160), &v2550, v2547);
  kdebug_trace();
  v462 = v2551;
  v463 = (char *)v2550;
  *(_QWORD *)&buf[8] = 0;
  *(_QWORD *)buf = 0;
  v2546 = 0;
  v2544 = 0;
  v2545 = 0;
  v464 = v2551 - (_BYTE *)v2550;
  if (v2551 != v2550)
  {
    if (v464 < 0)
      abort();
    v465 = operator new(v2551 - (_BYTE *)v2550);
    v466 = 2 * (v464 >> 4);
    v467 = &v465[v466];
    v2544 = v465;
    v2546 = &v465[v466];
    do
    {
      *v465 = 0;
      v465[1] = 0;
      v465 += 2;
      v466 -= 2;
    }
    while (v466 * 8);
    v2545 = v467;
  }
  if (!texture)
  {
LABEL_926:
    if (v462 != v463)
    {
      v798 = 0;
      do
      {
        v799 = **(_QWORD ***)&v463[16 * v798];
        if (v799[16])
        {
          v800 = (uint64_t *)(*(_QWORD *)(v799[12] + ((v799[15] >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v799[15] & 0x7FLL));
          v802 = *v800;
          v801 = (std::__shared_weak_count *)v800[1];
          if (v801)
          {
            v803 = (unint64_t *)&v801->__shared_owners_;
            do
              v804 = __ldxr(v803);
            while (__stxr(v804 + 1, v803));
            do
              v805 = __ldaxr(v803);
            while (__stlxr(v805 - 1, v803));
            if (!v805)
            {
              ((void (*)(std::__shared_weak_count *))v801->__on_zero_shared)(v801);
              std::__shared_weak_count::__release_weak(v801);
            }
          }
          v806 = (cva::DictionaryHandler *)*((_QWORD *)v2544 + 2 * v798);
          if (v806)
          {
            v807 = *(_DWORD *)(v802 + 252);
            if (v807)
            {
              if ((v807 & 0xFFFFFFFC) == 0xC8)
                v807 = 6;
              *(_DWORD *)v2608 = v807;
              cva::ItemHandler::createValue<int>();
              cva::DictionaryHandler::setItem(v806, CFSTR("recognition_prereq_failure_type"), (const cva::ItemHandler *)buf);
              cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
            }
          }
        }
        ++v798;
        v463 = (char *)v2550;
      }
      while (v798 < (v2551 - (_BYTE *)v2550) >> 4);
    }
    v808 = (std::__shared_weak_count *)operator new(0x28uLL);
    v808->__shared_owners_ = 0;
    v809 = (unint64_t *)&v808->__shared_owners_;
    v808->__shared_weak_owners_ = 0;
    v808->__vftable = (std::__shared_weak_count_vtbl *)&off_1E82956B0;
    cva::ArrayHandler::ArrayHandler((cva::ArrayHandler *)&v808[1]);
    *(_QWORD *)buf = v808 + 1;
    *(_QWORD *)&buf[8] = v808;
    v810 = v2544;
    v811 = v2545;
    while (v810 != v811)
    {
      if (*v810)
      {
        cva::ItemHandler::ItemHandler();
        cva::ArrayHandler::addItem((cva::ArrayHandler *)&v808[1], (const cva::ItemHandler *)v2608);
        cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v2608);
      }
      v810 += 2;
    }
    kdebug_trace();
    v812 = *v2451;
    v2509[0] = v808 + 1;
    v2509[1] = v808;
    do
      v813 = __ldxr(v809);
    while (__stxr(v813 + 1, v809));
    sub_1C98B714C(a1, v812, v2509, v2423, (uint64_t)v2547);
    do
      v814 = __ldaxr(v809);
    while (__stlxr(v814 - 1, v809));
    if (!v814)
    {
      ((void (*)(std::__shared_weak_count *))v808->__on_zero_shared)(v808);
      std::__shared_weak_count::__release_weak(v808);
    }
    kdebug_trace();
    v815 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v816 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v817 = __ldaxr(v816);
      while (__stlxr(v817 - 1, v816));
      if (!v817)
      {
        ((void (*)(std::__shared_weak_count *))v815->__on_zero_shared)(v815);
        std::__shared_weak_count::__release_weak(v815);
      }
    }
    goto LABEL_957;
  }
  v468 = (_QWORD *)*a2;
  v469 = v2444 << 28;
  v470 = (int)(v2444 >> 4);
  v471 = *(_QWORD *)(*a2 + 96);
  v472 = *(_QWORD *)(*a2 + 104);
  v473 = (v472 - v471) >> 5;
  v474 = v470 - v473;
  if (v470 <= v473)
  {
    if (v470 < v473)
    {
      v492 = v471 + 32 * v470;
      while (v472 != v492)
      {
        v493 = *(void **)(v472 - 8);
        if (v493)
        {
          free(v493);
          *(_QWORD *)(v472 - 8) = 0;
        }
        v472 -= 32;
      }
      v468[13] = v492;
    }
  }
  else
  {
    v475 = v468[14];
    if (v474 <= (v475 - v472) >> 5)
    {
      v494 = v472 + 32 * v474;
      v495 = (_QWORD *)(v472 + 8);
      v496 = 32 * v470 - 32 * v473;
      do
      {
        *v495 = 0;
        v495[1] = 0;
        v495[2] = 0;
        v495 += 4;
        v496 -= 32;
      }
      while (v496);
      v468[13] = v494;
    }
    else
    {
      if (v469 < 0)
        abort();
      v476 = v475 - v471;
      v477 = v476 >> 4;
      if (v476 >> 4 <= v470)
        v477 = (int)(v2444 >> 4);
      if ((unint64_t)v476 >= 0x7FFFFFFFFFFFFFE0)
        v478 = 0x7FFFFFFFFFFFFFFLL;
      else
        v478 = v477;
      if (v478 >> 59)
        sub_1C9899D30();
      v479 = (char *)operator new(32 * v478);
      v480 = &v479[32 * v473];
      v481 = &v479[32 * v470];
      v482 = 32 * v470 - 32 * v473;
      v483 = v480 + 8;
      do
      {
        *v483 = 0;
        v483[1] = 0;
        v483[2] = 0;
        v483 += 4;
        v482 -= 32;
      }
      while (v482);
      v484 = &v479[32 * v478];
      v485 = (char *)v468[12];
      v486 = (char *)v468[13];
      if (v486 == v485)
      {
        v468[12] = v480;
        v468[13] = v481;
        v468[14] = v484;
      }
      else
      {
        v487 = 0;
        do
        {
          v488 = &v480[v487];
          v489 = &v486[v487];
          *((_QWORD *)v488 - 4) = *(_QWORD *)&v486[v487 - 32];
          *((_QWORD *)v488 - 3) = *(_QWORD *)&v486[v487 - 24];
          *((_QWORD *)v488 - 2) = *(_QWORD *)&v486[v487 - 16];
          *((_QWORD *)v488 - 1) = *(_QWORD *)&v486[v487 - 8];
          *((_OWORD *)v489 - 2) = 0uLL;
          *((_OWORD *)v489 - 1) = 0uLL;
          v487 -= 32;
        }
        while (&v486[v487] != v485);
        v486 = (char *)v468[12];
        v490 = (char *)v468[13];
        v468[12] = &v480[v487];
        v468[13] = v481;
        v468[14] = v484;
        while (v490 != v486)
        {
          v491 = (void *)*((_QWORD *)v490 - 1);
          if (v491)
          {
            free(v491);
            *((_QWORD *)v490 - 1) = 0;
          }
          v490 -= 32;
        }
      }
      if (v486)
        operator delete(v486);
    }
  }
  v2542 = 0;
  v2541 = 0;
  v2543 = 0;
  if (v469)
  {
    if (v469 < 0)
      abort();
    v499 = operator new(104 * (int)v470);
    v500 = &v499[13 * (int)v470];
    v2541 = v499;
    v2543 = v500;
    __asm { FMOV            V1.2S, #1.0 }
    do
    {
      *v499 = &off_1E8295050;
      v499[1] = 0x100000001;
      *((_DWORD *)v499 + 4) = 1065353216;
      *(_QWORD *)((char *)v499 + 20) = 0;
      *(_QWORD *)((char *)v499 + 28) = 0x3F80000000000000;
      *(_QWORD *)((char *)v499 + 36) = 0;
      *((_DWORD *)v499 + 11) = 0;
      v499[7] = 0;
      v499[8] = 0;
      v499[9] = 0;
      v499[10] = 0x3F80000000000000;
      v499[6] = _D1;
      *((_DWORD *)v499 + 17) = 1065353216;
      v499[11] = 0;
      *((_DWORD *)v499 + 24) = 0;
      v499 += 13;
    }
    while (v499 != v500);
    v2542 = (char *)v500;
    v502 = operator new(36 * v470);
    bzero(v502, 36 * ((36 * v470 - 36) / 0x24) + 36);
  }
  else
  {
    v502 = 0;
  }
  v2437 = 1;
  if ((int)v347 < 1)
    goto LABEL_915;
  v2432 = v2444 << 28;
  v503 = 0;
  v2457 = ((unint64_t)v2444 >> 4);
  __asm { FMOV            V0.4S, #4.0 }
  v2441 = _Q0;
  v2454 = v502;
  do
  {
    v505 = (uint64_t *)*((_QWORD *)v2550 + 2 * v503);
    v506 = *(_QWORD *)(*v505 + 8);
    v507 = *(std::__shared_weak_count **)(*v505 + 16);
    if (v507)
    {
      v508 = (unint64_t *)&v507->__shared_owners_;
      do
        v509 = __ldxr(v508);
      while (__stxr(v509 + 1, v508));
      do
        v510 = __ldaxr(v508);
      while (__stlxr(v510 - 1, v508));
      if (!v510)
      {
        ((void (*)(std::__shared_weak_count *))v507->__on_zero_shared)(v507);
        std::__shared_weak_count::__release_weak(v507);
        if (v506)
          goto LABEL_706;
LABEL_674:
        kdebug_trace();
        v511 = (char *)operator new(0x78uLL);
        *((_QWORD *)v511 + 1) = 0;
        *((_QWORD *)v511 + 2) = 0;
        *(_QWORD *)v511 = &off_1E8295800;
        *(_OWORD *)(v511 + 40) = 0u;
        *(_OWORD *)(v511 + 56) = 0u;
        *(_OWORD *)(v511 + 72) = 0u;
        *(_OWORD *)(v511 + 88) = 0u;
        *(_OWORD *)(v511 + 104) = 0u;
        *(_OWORD *)(v511 + 24) = 0u;
        v512 = *v505;
        v513 = *(std::__shared_weak_count **)(*v505 + 16);
        *(_QWORD *)(v512 + 8) = v511 + 24;
        *(_QWORD *)(v512 + 16) = v511;
        if (v513)
        {
          v514 = (unint64_t *)&v513->__shared_owners_;
          do
            v515 = __ldaxr(v514);
          while (__stlxr(v515 - 1, v514));
          if (!v515)
          {
            ((void (*)(std::__shared_weak_count *))v513->__on_zero_shared)(v513);
            std::__shared_weak_count::__release_weak(v513);
          }
        }
        v516 = *(_QWORD *)(*a2 + 16);
        v517 = *(std::__shared_weak_count **)(*v505 + 16);
        *(_QWORD *)buf = *(_QWORD *)(*v505 + 8);
        *(_QWORD *)&buf[8] = v517;
        if (v517)
        {
          v518 = (unint64_t *)&v517->__shared_owners_;
          do
            v519 = __ldxr(v518);
          while (__stxr(v519 + 1, v518));
        }
        (*(void (**)(uint64_t))(*(_QWORD *)v516 + 8))(v516);
        if (v517)
        {
          v520 = (unint64_t *)&v517->__shared_owners_;
          do
            v521 = __ldaxr(v520);
          while (__stlxr(v521 - 1, v520));
          if (!v521)
          {
            ((void (*)(std::__shared_weak_count *))v517->__on_zero_shared)(v517);
            std::__shared_weak_count::__release_weak(v517);
          }
        }
        v522 = *(_QWORD *)(*a2 + 16);
        if (*(_QWORD *)(*a2 + 152))
        {
          v523 = *(std::__shared_weak_count **)(*v505 + 16);
          *(_QWORD *)buf = *(_QWORD *)(*v505 + 8);
          *(_QWORD *)&buf[8] = v523;
          if (v523)
          {
            v524 = (unint64_t *)&v523->__shared_owners_;
            do
              v525 = __ldxr(v524);
            while (__stxr(v525 + 1, v524));
          }
          (*(void (**)(uint64_t))(*(_QWORD *)v522 + 16))(v522);
          if (!v523)
            goto LABEL_705;
          v526 = (unint64_t *)&v523->__shared_owners_;
          do
            v527 = __ldaxr(v526);
          while (__stlxr(v527 - 1, v526));
        }
        else
        {
          v523 = *(std::__shared_weak_count **)(*v505 + 16);
          *(_QWORD *)buf = *(_QWORD *)(*v505 + 8);
          *(_QWORD *)&buf[8] = v523;
          if (v523)
          {
            v528 = (unint64_t *)&v523->__shared_owners_;
            do
              v529 = __ldxr(v528);
            while (__stxr(v529 + 1, v528));
          }
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v522 + 16))(v522, 0);
          if (!v523)
            goto LABEL_705;
          v530 = (unint64_t *)&v523->__shared_owners_;
          do
            v527 = __ldaxr(v530);
          while (__stlxr(v527 - 1, v530));
        }
        if (!v527)
        {
          ((void (*)(std::__shared_weak_count *))v523->__on_zero_shared)(v523);
          std::__shared_weak_count::__release_weak(v523);
        }
LABEL_705:
        kdebug_trace();
        goto LABEL_706;
      }
    }
    if (!v506)
      goto LABEL_674;
LABEL_706:
    kdebug_trace();
    v531 = *a2;
    v532 = *(_QWORD *)(*v505 + 136);
    v533 = *(std::__shared_weak_count **)(*v505 + 144);
    v2472 = v505;
    if (!v533)
      goto LABEL_712;
    v534 = (unint64_t *)&v533->__shared_owners_;
    do
      v535 = __ldxr(v534);
    while (__stxr(v535 + 1, v534));
    v536 = (unint64_t *)&v533->__shared_owners_;
    do
      v537 = __ldaxr(v536);
    while (__stlxr(v537 - 1, v536));
    if (!v537)
    {
      ((void (*)(std::__shared_weak_count *))v533->__on_zero_shared)(v533);
      std::__shared_weak_count::__release_weak(v533);
      if (v532)
        goto LABEL_713;
    }
    else
    {
LABEL_712:
      if (v532)
        goto LABEL_713;
    }
    v583 = (_QWORD *)(*(_QWORD *)(v531 + 16) + 24);
    v584 = (char *)operator new(0x480uLL);
    *((_QWORD *)v584 + 1) = 0;
    *((_QWORD *)v584 + 2) = 0;
    *(_QWORD *)v584 = &off_1E8295918;
    *((_QWORD *)v584 + 3) = 0xFFEFFFFFFFFFFFFFLL;
    *((_QWORD *)v584 + 4) = 850045863;
    *((_OWORD *)v584 + 7) = 0u;
    *((_OWORD *)v584 + 8) = 0u;
    *((_OWORD *)v584 + 9) = 0u;
    *((_OWORD *)v584 + 10) = 0u;
    *((_OWORD *)v584 + 11) = 0u;
    *((_OWORD *)v584 + 12) = 0u;
    *((_OWORD *)v584 + 13) = 0u;
    *((_OWORD *)v584 + 14) = 0u;
    *((_OWORD *)v584 + 15) = 0u;
    *((_QWORD *)v584 + 31) = 0;
    *((_QWORD *)v584 + 32) = 0;
    *(_OWORD *)(v584 + 40) = 0u;
    *(_OWORD *)(v584 + 56) = 0u;
    *(_OWORD *)(v584 + 72) = 0u;
    *(_OWORD *)(v584 + 88) = 0u;
    v584[104] = 0;
    *((_DWORD *)v584 + 47) = 1065353216;
    *((_DWORD *)v584 + 51) = 1065353216;
    *((_DWORD *)v584 + 55) = 1065353216;
    *((_QWORD *)v584 + 28) = 0;
    *((_DWORD *)v584 + 58) = 0;
    *((_DWORD *)v584 + 64) = 0;
    *((_QWORD *)v584 + 30) = 0;
    *((_QWORD *)v584 + 33) = 850045863;
    *((_OWORD *)v584 + 17) = 0u;
    *((_OWORD *)v584 + 18) = 0u;
    *((_OWORD *)v584 + 19) = 0u;
    *((_QWORD *)v584 + 40) = 0;
    sub_1C9915540((uint64_t *)v584 + 41, v583);
    sub_1C9915540((uint64_t *)v584 + 59, v583);
    sub_1C9915540((uint64_t *)v584 + 77, v583);
    sub_1C9915540((uint64_t *)v584 + 95, v583);
    *((_DWORD *)v584 + 226) = 1;
    *((_QWORD *)v584 + 114) = 850045863;
    *(_OWORD *)(v584 + 920) = 0u;
    *(_OWORD *)(v584 + 936) = 0u;
    *(_OWORD *)(v584 + 952) = 0u;
    *((_QWORD *)v584 + 121) = 0;
    *((_QWORD *)v584 + 122) = 850045863;
    *(_OWORD *)(v584 + 1048) = 0u;
    *(_OWORD *)(v584 + 1064) = 0u;
    *((_DWORD *)v584 + 270) = 0;
    *(_OWORD *)(v584 + 984) = 0u;
    *(_OWORD *)(v584 + 1000) = 0u;
    *(_OWORD *)(v584 + 1016) = 0u;
    *(_OWORD *)(v584 + 1025) = 0u;
    *((_QWORD *)v584 + 136) = 850045863;
    *(_OWORD *)(v584 + 1096) = 0u;
    *(_OWORD *)(v584 + 1112) = 0u;
    *(_OWORD *)(v584 + 1128) = 0u;
    *((_QWORD *)v584 + 143) = 0;
    v585 = *v2472;
    v586 = *(std::__shared_weak_count **)(*v2472 + 144);
    *(_QWORD *)(v585 + 136) = v584 + 24;
    *(_QWORD *)(v585 + 144) = v584;
    if (v586)
    {
      v587 = (unint64_t *)&v586->__shared_owners_;
      do
        v588 = __ldaxr(v587);
      while (__stlxr(v588 - 1, v587));
      if (!v588)
      {
        ((void (*)(std::__shared_weak_count *))v586->__on_zero_shared)(v586);
        std::__shared_weak_count::__release_weak(v586);
      }
    }
LABEL_713:
    v539 = *(uint64_t **)(*v2472 + 24);
    v538 = *(std::__shared_weak_count **)(*v2472 + 32);
    if (v538)
    {
      v540 = (unint64_t *)&v538->__shared_owners_;
      do
        v541 = __ldxr(v540);
      while (__stxr(v541 + 1, v540));
      do
        v542 = __ldaxr(v540);
      while (__stlxr(v542 - 1, v540));
      if (!v542)
      {
        ((void (*)(std::__shared_weak_count *))v538->__on_zero_shared)(v538);
        std::__shared_weak_count::__release_weak(v538);
      }
    }
    v543 = *(_QWORD *)(*v2472 + 136);
    v544 = *(std::__shared_weak_count **)(*v2472 + 144);
    if (v544)
    {
      v545 = (unint64_t *)&v544->__shared_owners_;
      do
        v546 = __ldxr(v545);
      while (__stxr(v546 + 1, v545));
    }
    if (*(_BYTE *)(v543 + 1016))
      goto LABEL_723;
    v561 = *v539;
    if (!*(_BYTE *)(*v539 + 16))
      goto LABEL_723;
    v562 = *(uint64_t **)(v531 + 32);
    v563 = *(_OWORD *)(v561 + 144);
    v564 = *(std::__shared_weak_count **)(v561 + 152);
    if (v564)
    {
      v565 = (unint64_t *)&v564->__shared_owners_;
      do
        v566 = __ldxr(v565);
      while (__stxr(v566 + 1, v565));
    }
    if (v544)
    {
      v567 = (unint64_t *)&v544->__shared_owners_;
      do
        v568 = __ldxr(v567);
      while (__stxr(v568 + 1, v567));
    }
    *(_BYTE *)(v543 + 1016) = 1;
    if ((_QWORD)v563)
    {
      v2506 = v563;
      kdebug_trace();
      if (v564)
      {
        v569 = (unint64_t *)&v564->__shared_owners_;
        do
          v570 = __ldxr(v569);
        while (__stxr(v570 + 1, v569));
      }
      v571 = *(std::__shared_weak_count **)(v543 + 1032);
      *(_OWORD *)(v543 + 1024) = v2506;
      if (v571)
      {
        v572 = (unint64_t *)&v571->__shared_owners_;
        do
          v573 = __ldaxr(v572);
        while (__stlxr(v573 - 1, v572));
        if (!v573)
        {
          ((void (*)(std::__shared_weak_count *))v571->__on_zero_shared)(v571);
          std::__shared_weak_count::__release_weak(v571);
        }
      }
      v2488 = v564;
      v574 = *v562;
      if (v544)
      {
        v575 = (unint64_t *)&v544->__shared_owners_;
        do
          v576 = __ldxr(v575);
        while (__stxr(v576 + 1, v575));
      }
      v577 = (std::__shared_weak_count *)operator new(0xB8uLL);
      v577->__shared_owners_ = 0;
      v578 = (unint64_t *)&v577->__shared_owners_;
      v577->__shared_weak_owners_ = 0;
      v577->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295D40;
      v577[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295140;
      v577[1].__shared_owners_ = 850045863;
      v577[4].__vftable = (std::__shared_weak_count_vtbl *)1018212795;
      *(_OWORD *)&v577[1].__shared_weak_owners_ = 0u;
      *(_OWORD *)&v577[2].__shared_owners_ = 0u;
      v577[3].std::__shared_count = 0u;
      v577[3].__shared_weak_owners_ = 0;
      *(_OWORD *)&v577[4].__shared_owners_ = 0u;
      v577[5].std::__shared_count = 0u;
      *(_OWORD *)((char *)&v577[5].__shared_owners_ + 1) = 0u;
      v579 = operator new(0x30uLL);
      *v579 = &off_1E82944B8;
      v579[1] = sub_1C98B2D04;
      v579[2] = 0;
      v579[3] = v574;
      v579[4] = v543;
      v579[5] = v544;
      if (v544)
      {
        v580 = (unint64_t *)&v544->__shared_owners_;
        do
          v581 = __ldxr(v580);
        while (__stxr(v581 + 1, v580));
        v577[7].__shared_owners_ = (uint64_t)v579;
        do
          v582 = __ldaxr(v580);
        while (__stlxr(v582 - 1, v580));
        if (!v582)
        {
          ((void (*)(std::__shared_weak_count *))v544->__on_zero_shared)(v544);
          std::__shared_weak_count::__release_weak(v544);
        }
      }
      else
      {
        v577[7].__shared_owners_ = (uint64_t)v579;
      }
      v769 = *(_QWORD *)(v574 + 64);
      *(_QWORD *)buf = v577 + 1;
      *(_QWORD *)&buf[8] = v577;
      do
        v770 = __ldxr(v578);
      while (__stxr(v770 + 1, v578));
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v769 + 16))(v769, buf);
      v771 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v772 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v773 = __ldaxr(v772);
        while (__stlxr(v773 - 1, v772));
        if (!v773)
        {
          ((void (*)(std::__shared_weak_count *))v771->__on_zero_shared)(v771);
          std::__shared_weak_count::__release_weak(v771);
        }
      }
      v502 = v2454;
      if (*(_BYTE *)(v574 + 80))
      {
        *(_QWORD *)buf = (char *)v577 + 32;
        buf[8] = 1;
        std::mutex::lock((std::mutex *)&v577[1].__shared_owners_);
        if (LOBYTE(v577[6].__vftable))
          goto LABEL_867;
        do
          std::condition_variable::wait((std::condition_variable *)&v577[4], (std::unique_lock<std::mutex> *)buf);
        while (!LOBYTE(v577[6].__vftable));
        if (buf[8])
LABEL_867:
          std::mutex::unlock(*(std::mutex **)buf);
      }
      do
        v774 = __ldaxr(v578);
      while (__stlxr(v774 - 1, v578));
      v564 = v2488;
      if (v774)
        goto LABEL_871;
    }
    else
    {
      kdebug_trace();
      (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(*v562 + 16) + 16))(buf);
      v709 = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      v710 = *(_QWORD *)(v543 + 72);
      *(_QWORD *)(v543 + 72) = v709;
      if (v710)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v710 + 8))(v710);
        v711 = *(_QWORD *)buf;
        *(_QWORD *)buf = 0;
        if (v711)
          (*(void (**)(uint64_t))(*(_QWORD *)v711 + 8))(v711);
      }
      (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(*v562 + 16) + 24))(buf);
      v712 = (char *)operator new(0x60uLL);
      *((_QWORD *)v712 + 1) = 0;
      *((_QWORD *)v712 + 2) = 0;
      *(_QWORD *)v712 = &off_1E8295B80;
      *((_QWORD *)v712 + 3) = *(_QWORD *)buf;
      *((_QWORD *)v712 + 4) = 850045863;
      *(_OWORD *)(v712 + 40) = 0u;
      *(_OWORD *)(v712 + 56) = 0u;
      *(_OWORD *)(v712 + 72) = 0u;
      *((_QWORD *)v712 + 11) = 0;
      *(_QWORD *)&v713 = v712 + 24;
      *((_QWORD *)&v713 + 1) = v712;
      v577 = *(std::__shared_weak_count **)(v543 + 1032);
      *(_OWORD *)(v543 + 1024) = v713;
      if (!v577)
        goto LABEL_871;
      v714 = (unint64_t *)&v577->__shared_owners_;
      do
        v715 = __ldaxr(v714);
      while (__stlxr(v715 - 1, v714));
      if (v715)
        goto LABEL_871;
    }
    ((void (*)(std::__shared_weak_count *))v577->__on_zero_shared)(v577);
    std::__shared_weak_count::__release_weak(v577);
LABEL_871:
    kdebug_trace();
    if (v544)
    {
      v775 = (unint64_t *)&v544->__shared_owners_;
      do
        v776 = __ldaxr(v775);
      while (__stlxr(v776 - 1, v775));
      if (!v776)
      {
        ((void (*)(std::__shared_weak_count *))v544->__on_zero_shared)(v544);
        std::__shared_weak_count::__release_weak(v544);
      }
    }
    if (v564)
    {
      v777 = (unint64_t *)&v564->__shared_owners_;
      do
        v778 = __ldaxr(v777);
      while (__stlxr(v778 - 1, v777));
      if (!v778)
      {
        ((void (*)(std::__shared_weak_count *))v564->__on_zero_shared)(v564);
        std::__shared_weak_count::__release_weak(v564);
      }
    }
    v780 = *(_QWORD *)(*v539 + 144);
    v779 = *(std::__shared_weak_count **)(*v539 + 152);
    if (!v779)
      goto LABEL_887;
    v781 = (unint64_t *)&v779->__shared_owners_;
    do
      v782 = __ldxr(v781);
    while (__stxr(v782 + 1, v781));
    v783 = (unint64_t *)&v779->__shared_owners_;
    do
      v784 = __ldaxr(v783);
    while (__stlxr(v784 - 1, v783));
    if (!v784)
    {
      ((void (*)(std::__shared_weak_count *))v779->__on_zero_shared)(v779);
      std::__shared_weak_count::__release_weak(v779);
      if (v780)
        goto LABEL_723;
    }
    else
    {
LABEL_887:
      if (v780)
        goto LABEL_723;
    }
    v785 = *(_OWORD *)(v543 + 1024);
    v786 = *(_QWORD *)(v543 + 1032);
    if (v786)
    {
      v787 = (unint64_t *)(v786 + 8);
      do
        v788 = __ldxr(v787);
      while (__stxr(v788 + 1, v787));
    }
    v789 = *(std::__shared_weak_count **)(*v539 + 152);
    *(_OWORD *)(*v539 + 144) = v785;
    if (v789)
    {
      v790 = (unint64_t *)&v789->__shared_owners_;
      do
        v791 = __ldaxr(v790);
      while (__stlxr(v791 - 1, v790));
      if (!v791)
      {
        ((void (*)(std::__shared_weak_count *))v789->__on_zero_shared)(v789);
        std::__shared_weak_count::__release_weak(v789);
      }
    }
LABEL_723:
    if (v544)
    {
      v547 = (unint64_t *)&v544->__shared_owners_;
      do
        v548 = __ldaxr(v547);
      while (__stlxr(v548 - 1, v547));
      if (!v548)
      {
        ((void (*)(std::__shared_weak_count *))v544->__on_zero_shared)(v544);
        std::__shared_weak_count::__release_weak(v544);
      }
    }
    kdebug_trace();
    v550 = *a2;
    v551 = v2541;
    v553 = *(_QWORD *)(*v2472 + 8);
    v552 = *(unint64_t **)(*v2472 + 16);
    keyb = *v2472;
    __p[0] = (void *)v553;
    __p[1] = v552;
    if (v552)
    {
      v554 = v552 + 1;
      do
        v555 = __ldxr(v554);
      while (__stxr(v555 + 1, v554));
    }
    v556 = *(unsigned int *)(v550 + 48);
    v557 = v556 > *(_DWORD *)(v553 + 24) || v556 > *(_DWORD *)(v553 + 28);
    v558 = v556 | (v556 << 32);
    if (v557)
    {
      v559 = *(void **)(v553 + 40);
      if (v559)
      {
        free(v559);
        *(_QWORD *)(v553 + 40) = 0;
      }
      *(_QWORD *)(v553 + 16) = 0;
      *(_QWORD *)(v553 + 24) = v558;
      *(_QWORD *)(v553 + 32) = ((unint64_t)((((_DWORD)v556 + 15) & 0xFFFFFFF0) >> 4) << 36) | 1;
      *(_QWORD *)buf = v556 * (unint64_t)(((_DWORD)v556 + 15) & 0xFFFFFFF0);
      if (*(_QWORD *)buf)
        v560 = malloc_type_malloc(*(size_t *)buf, 0xA153FF5uLL);
      else
        v560 = 0;
      *(_QWORD *)(v553 + 40) = v560;
    }
    else
    {
      *(_QWORD *)(v553 + 16) = 0;
      *(_QWORD *)(v553 + 24) = v558;
    }
    *(_QWORD *)&v2599[4] = 0;
    *(_DWORD *)v2599 = 1065353216;
    *(_OWORD *)&v2599[12] = xmmword_1C99274A0;
    if (!*(_BYTE *)(v550 + 136)
      || ((v589 = llroundf(-1.0 - log2f((float)(int)v556 / *(float *)(keyb + 52))), v589 < 0)
        ? (v591 = -1)
        : (v591 = v589),
          (v592 = *(_QWORD *)(v550 + 128), v593 = *(_DWORD *)(v592 + 8), v593 - 1 >= v591)
        ? (v594 = v591)
        : (v594 = v593 - 1),
          (v594 & 0x80000000) != 0))
    {
      v595 = texture;
    }
    else
    {
      if (v593 <= (int)v594)
      {
        v595 = 0;
        v597 = 0;
        v590.i32[0] = 1.0;
        v549 = (int8x16_t)xmmword_1C99274A0;
      }
      else
      {
        v595 = *(__CVBuffer **)(*(_QWORD *)(v592 + 24) + 8 * v594);
        v596 = *(_QWORD *)(v592 + 48) + 28 * v594;
        v590.i32[0] = *(_DWORD *)v596;
        v597 = *(_QWORD *)(v596 + 4);
        v549.i64[0] = *(_QWORD *)(v596 + 16);
        v549 = vextq_s8(v590, v549, 0xCuLL);
        v549.i32[0] = *(_DWORD *)(v596 + 12);
        v549.i32[3] = *(_DWORD *)(v596 + 24);
      }
      *(_QWORD *)&v2599[4] = v597;
      *(_DWORD *)v2599 = v590.i32[0];
      *(_DWORD *)&v2599[12] = v549.i32[0];
      *(_QWORD *)&v2599[16] = vextq_s8(v549, v590, 4uLL).u64[0];
      *(_DWORD *)&v2599[24] = v549.i32[3];
    }
    v598 = 0.0;
    memset(buf, 0, 36);
    v599 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
    if ((v599 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
    {
      sub_1C98CFF14();
      __cxa_guard_release(&qword_1ED52ACD8);
      v502 = v2454;
    }
    v600 = keyb + 40;
    v601 = (uint64_t)v502 + 36 * v503;
    v602 = (uint64_t)v551 + 104 * v503;
    if (*(_BYTE *)(qword_1ED52ACB8 + 109))
      sub_1C990D7F0(v556, v600, (uint64_t)v2599, &v2559, v602, v601, (uint64_t)buf);
    else
      sub_1C990D1FC(v556, v600, (uint64_t)v2599, (uint64_t)&v2559, v602, v601, (uint64_t)buf, v598, *(int32x2_t *)v549.i8);
    v603 = CVPixelBufferGetPixelFormatType(v595);
    kdebug_trace();
    CVPixelBufferLockBaseAddress(v595, 1uLL);
    v604 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
    if ((v604 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
    {
      sub_1C98CFF14();
      __cxa_guard_release(&qword_1ED52ACD8);
    }
    __asm { FMOV            V0.4S, #1.0 }
    v2507 = _Q0;
    if (!*(_BYTE *)(qword_1ED52ACB8 + 109))
    {
      if (v603 != 875704422 && v603 != 1278226488 && v603 != 875704438)
      {
        v707 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
        if ((v707 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
        {
          qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
          __cxa_guard_release(&qword_1ED52ACD0);
        }
        v706 = (id)qword_1ED52ACE0;
        if (!os_log_type_enabled(v706, OS_LOG_TYPE_ERROR))
          goto LABEL_824;
        v2608[23] = 4;
        v2608[0] = HIBYTE(v603);
        v2608[1] = BYTE2(v603);
        v2608[2] = BYTE1(v603);
        v2608[3] = v603;
        v2608[4] = 0;
        *(_DWORD *)v2592 = 67109378;
        *(_DWORD *)&v2592[4] = v603;
        *(_WORD *)&v2592[8] = 2080;
        *(_QWORD *)&v2592[10] = v2608;
        _os_log_error_impl(&dword_1C9870000, v706, OS_LOG_TYPE_ERROR, "not a valid format for processing, format 0x%x ('%s')", v2592, 0x12u);
        if ((v2608[23] & 0x80000000) == 0)
          goto LABEL_824;
LABEL_901:
        operator delete(*(void **)v2608);
LABEL_824:

        v708 = 0;
        goto LABEL_841;
      }
      sub_1C98BCCBC(v2608, v595);
      v607 = *(_DWORD *)(v553 + 28);
      if (v607 >= 1)
      {
        v608 = 0;
        v609 = *(_QWORD *)&v2608[24];
        v610 = vdupq_n_s32((*(_DWORD *)&v2608[8] << 10) - 1025);
        v611 = vdupq_n_s32((*(_DWORD *)&v2608[12] << 10) - 1025);
        _V3.S[1] = *(_DWORD *)&buf[28];
        _V2.S[1] = *(_DWORD *)&buf[4];
        _V4.S[1] = *(_DWORD *)&buf[16];
        v615 = *(char **)(v553 + 40);
        _S5 = 1216348160;
        __asm { FMLA            S6, S5, V4.S[1] }
        v618 = (int)_S6;
        __asm { FMLA            S6, S5, V2.S[1] }
        v620 = *(_DWORD *)(v553 + 24);
        v621 = v618 - v620 * (int)_S6;
        v622 = (int)vmlas_n_f32(0.5, 262140.0, *(float *)buf);
        __asm { FMLA            S2, S5, V3.S[1] }
        v624 = vmlaq_s32(vdupq_n_s32((int)_S2), vdupq_n_s32((int)_S6), (int32x4_t)xmmword_1C9927540);
        v625 = vmlaq_s32(vdupq_n_s32((int)vmlas_n_f32(0.5, 262140.0, *(float *)&buf[24])), vdupq_n_s32(v622), (int32x4_t)xmmword_1C9927540);
        v626 = vdupq_n_s32(*(unsigned int *)&v2608[20]);
        v627 = *(_QWORD *)&v2608[24] + *(int *)&v2608[20];
        v628 = vdupq_n_s32(4 * v622);
        v629 = vdupq_n_s32(4 * (int)_S6);
        v630 = vdupq_n_s32((int)vmlas_n_f32(0.5, 262140.0, *(float *)&buf[12]) - v620 * v622);
        v631 = vdupq_n_s32(v621);
        do
        {
          if (v620)
          {
            v632 = &v615[v620];
            v633.i64[0] = 0x8000000080;
            v633.i64[1] = 0x8000000080;
            v634.i64[0] = 0x300000003;
            v634.i64[1] = 0x300000003;
            v635.i64[0] = 0x40000000400;
            v635.i64[1] = 0x40000000400;
            v636.i64[0] = 0x8000000080000;
            v636.i64[1] = 0x8000000080000;
            do
            {
              v637 = vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(v625, v633), 8uLL), v610), (int32x4_t)0);
              v638 = vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(v624, v633), 8uLL), v611), (int32x4_t)0);
              v639 = (int32x4_t)vandq_s8((int8x16_t)v637, v634);
              v640 = vshrq_n_s32(v638, 0xAuLL);
              v641 = (int32x4_t)vandq_s8((int8x16_t)v638, v634);
              v642 = vsraq_n_s32(vmulq_s32(v640, v626), v637, 0xAuLL);
              v643 = v642.i32[0];
              v644 = *(unsigned __int8 *)(v609 + v642.i32[0]);
              v645 = v642.i32[1];
              v646 = *(unsigned __int8 *)(v609 + v642.i32[1]);
              v637.i8[0] = *(_BYTE *)(v609 + v642.i32[2]);
              v647 = v642.i32[0] + 1;
              v648 = v642.i32[1] + 1;
              v649 = v642.i32[2] + 1;
              v642.i8[0] = *(_BYTE *)(v609 + v649);
              v637.i8[4] = *(_BYTE *)(v609 + v642.i32[3]);
              v650 = v642.i32[3] + 1;
              v642.i8[4] = *(_BYTE *)(v609 + v650);
              v651.i64[0] = __PAIR64__(v646, v644);
              v606.i8[0] = *(_BYTE *)(v627 + v642.i32[2]);
              v606.i8[4] = *(_BYTE *)(v627 + v642.i32[3]);
              *(int8x8_t *)v637.i8 = vand_s8(*(int8x8_t *)v637.i8, (int8x8_t)0xFF000000FFLL);
              v652.i32[0] = *(unsigned __int8 *)(v627 + v643);
              v652.i32[1] = *(unsigned __int8 *)(v627 + v645);
              v651.i64[1] = v637.i64[0];
              v637.i8[0] = *(_BYTE *)(v627 + v649);
              v637.i8[4] = *(_BYTE *)(v627 + v650);
              v652.u64[1] = (unint64_t)vand_s8(*(int8x8_t *)v606.i8, (int8x8_t)0xFF000000FFLL);
              v606.i32[0] = *(unsigned __int8 *)(v627 + v647);
              v606.i32[1] = *(unsigned __int8 *)(v627 + v648);
              v606.u64[1] = (unint64_t)vand_s8(*(int8x8_t *)v637.i8, (int8x8_t)0xFF000000FFLL);
              *(int8x8_t *)v637.i8 = vand_s8(*(int8x8_t *)v642.i8, (int8x8_t)0xFF000000FFLL);
              v642.i32[0] = *(unsigned __int8 *)(v609 + v647);
              v642.i32[1] = *(unsigned __int8 *)(v609 + v648);
              v642.i64[1] = v637.i64[0];
              v653 = vsubq_s32(v635, v639);
              v654 = (int16x8_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vmlaq_s32(vmulq_s32(vmlaq_s32(vmulq_s32(v652, v653), v606, v639), v641), vmlaq_s32(vmulq_s32(v651, v653), v642, v639), vsubq_s32(v635, v641)), v636), 0x14uLL);
              *(int16x4_t *)v654.i8 = vmovn_s32((int32x4_t)v654);
              *(_DWORD *)v615 = vmovn_s16(v654).u32[0];
              v615 += 4;
              v625 = vaddq_s32(v625, v628);
              v624 = vaddq_s32(v624, v629);
            }
            while (v615 < v632);
            v620 = *(_DWORD *)(v553 + 24);
            v607 = *(_DWORD *)(v553 + 28);
          }
          v615 += *(_DWORD *)(v553 + 36) - v620;
          v625 = vaddq_s32(v625, v630);
          v624 = vaddq_s32(v624, v631);
          ++v608;
        }
        while (v608 < v607);
      }
      goto LABEL_840;
    }
    v2489 = (float32x4_t)vdupq_n_s32(0x437F0000u);
    if (v603 <= 1278226487)
    {
      if (v603 != 875704422 && v603 != 875704438)
        goto LABEL_819;
LABEL_810:
      sub_1C98BCCBC(v2608, v595);
      v655 = *(_DWORD *)(v553 + 24);
      v656 = *(_DWORD *)(v553 + 28);
      *(float *)v657.i32 = nextafterf((float)(*(_DWORD *)&v2608[8] - 1), 0.0);
      v2447 = v657;
      *(float *)v658.i32 = nextafterf((float)(*(_DWORD *)&v2608[12] - 1), 0.0);
      if (v656 >= 1 && v655 >= 1)
      {
        v660 = 0;
        v661 = (float32x4_t)vdupq_lane_s32(v2447, 0);
        v662 = (float32x4_t)vdupq_lane_s32(v658, 0);
        v663 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&buf[12], 0);
        v664 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&buf[16], 0);
        v665 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&buf[20], 0);
        v666 = vmulq_n_f32(v2441, *(float *)buf);
        v667 = vmulq_n_f32(v2441, *(float *)&buf[4]);
        v668 = vmulq_n_f32(v2441, *(float *)&buf[8]);
        v669 = vdupq_lane_s32(*(int32x2_t *)&v2608[20], 0);
        v670 = *(_QWORD *)&v2608[24];
        v671 = *(_QWORD *)(v553 + 40);
        v672 = vmlaq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vshrq_n_u64(*(uint64x2_t *)&buf[20], 0x20uLL), 0), (float32x4_t)xmmword_1C99275A0, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)buf, 0));
        v673 = vmlaq_f32((float32x4_t)vdupq_laneq_s32(*(int32x4_t *)&buf[20], 2), (float32x4_t)xmmword_1C99275A0, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&buf[4], 0));
        v674 = vmlaq_f32((float32x4_t)vdupq_laneq_s32(*(int32x4_t *)&buf[20], 3), (float32x4_t)xmmword_1C99275A0, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&buf[8], 0));
        do
        {
          v675 = 0;
          v676 = v674;
          v677 = v673;
          v678 = v672;
          v679.i64[0] = 0xFF000000FFLL;
          v679.i64[1] = 0xFF000000FFLL;
          do
          {
            v680 = vmaxnmq_f32(vminnmq_f32(vdivq_f32(v678, v676), v661), (float32x4_t)0);
            v681 = vmaxnmq_f32(vminnmq_f32(vdivq_f32(v677, v676), v662), (float32x4_t)0);
            v682 = vcvtq_s32_f32(v680);
            v683 = vcvtq_s32_f32(v681);
            v684 = vcvtq_f32_s32(v682);
            v685 = vmlaq_s32(v682, v669, v683);
            v686 = vsubq_f32(v680, v684);
            v687 = vsubq_f32(v681, vcvtq_f32_s32(v683));
            v688 = vaddq_s32(v685, v669);
            v689 = (__int8 *)(v670 + v685.i32[0]);
            v690 = (__int8 *)(v670 + v685.i32[1]);
            v691 = (__int8 *)(v670 + v685.i32[2]);
            v692 = (__int8 *)(v670 + v685.i32[3]);
            v685.i8[0] = *v689;
            v685.i8[2] = *v690;
            v684.i8[0] = v689[1];
            v685.i8[4] = *v691;
            v684.i8[2] = v690[1];
            v684.i8[4] = v691[1];
            v685.i8[6] = *v692;
            v684.i8[6] = v692[1];
            v693 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v684.f32);
            LODWORD(v692) = v688.i32[3];
            v694 = vsubq_f32(v2507, v686);
            v695 = (__int8 *)(v670 + v688.i32[0]);
            v696 = (__int8 *)(v670 + v688.i32[1]);
            v697 = (__int8 *)(v670 + v688.i32[2]);
            v698 = (uint32x4_t)vandq_s8(v693, v679);
            v699 = (__int8 *)(v670 + (int)v692);
            v693.i8[0] = *v695;
            v693.i8[2] = *v696;
            v693.i8[4] = *v697;
            v693.i8[6] = *v699;
            v659.i8[0] = v695[1];
            v659.i8[2] = v696[1];
            v659.i8[4] = v697[1];
            v659.i8[6] = v699[1];
            v659 = (uint32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v659.i8), v679);
            v700 = (int16x8_t)vcvtq_s32_f32(vminnmq_f32(vmlaq_f32(vmulq_f32(vsubq_f32(v2507, v687), vmlaq_f32(vmulq_f32(v694, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v685.i8), v679))), vcvtq_f32_u32(v698), v686)), vmlaq_f32(vmulq_f32(v694, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v693.i8), v679))), vcvtq_f32_u32(v659),
                                      v686),
                                    v687),
                                  v2489));
            *(int16x4_t *)v700.i8 = vmovn_s32((int32x4_t)v700);
            *(_DWORD *)(v671 + v675) = vmovn_s16(v700).u32[0];
            v678 = vaddq_f32(v666, v678);
            v677 = vaddq_f32(v667, v677);
            v676 = vaddq_f32(v668, v676);
            v675 += 4;
          }
          while ((int)v675 < v655);
          v671 += v675;
          v672 = vaddq_f32(v663, v672);
          v673 = vaddq_f32(v664, v673);
          v674 = vaddq_f32(v665, v674);
          ++v660;
        }
        while (v660 != v656);
      }
LABEL_840:
      v708 = 1;
      goto LABEL_841;
    }
    if (v603 != 2019963440 && v603 != 2016686640)
    {
      if (v603 == 1278226488)
        goto LABEL_810;
LABEL_819:
      v705 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
      if ((v705 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
      {
        qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
        __cxa_guard_release(&qword_1ED52ACD0);
      }
      v706 = (id)qword_1ED52ACE0;
      if (!os_log_type_enabled(v706, OS_LOG_TYPE_ERROR))
        goto LABEL_824;
      v2608[23] = 4;
      v2608[0] = HIBYTE(v603);
      v2608[1] = BYTE2(v603);
      v2608[2] = BYTE1(v603);
      v2608[3] = v603;
      v2608[4] = 0;
      *(_DWORD *)v2592 = 67109378;
      *(_DWORD *)&v2592[4] = v603;
      *(_WORD *)&v2592[8] = 2080;
      *(_QWORD *)&v2592[10] = v2608;
      _os_log_error_impl(&dword_1C9870000, v706, OS_LOG_TYPE_ERROR, "not a valid format for processing, format 0x%x ('%s')", v2592, 0x12u);
      if ((v2608[23] & 0x80000000) == 0)
        goto LABEL_824;
      goto LABEL_901;
    }
    if (CVPixelBufferIsPlanar(v595))
    {
      BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(v595, 0);
      WidthOfPlane = CVPixelBufferGetWidthOfPlane(v595, 0);
      HeightOfPlane = CVPixelBufferGetHeightOfPlane(v595, 0);
      BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(v595, 0);
    }
    else
    {
      BytesPerRowOfPlane = CVPixelBufferGetBytesPerRow(v595);
      WidthOfPlane = CVPixelBufferGetWidth(v595);
      HeightOfPlane = CVPixelBufferGetHeight(v595);
      BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddress(v595);
    }
    v716 = BaseAddressOfPlane;
    v718 = *(_DWORD *)(v553 + 24);
    v717 = *(_DWORD *)(v553 + 28);
    *(float *)v719.i32 = nextafterf((float)(WidthOfPlane - 1), 0.0);
    v2448 = v719;
    *(float *)v720.i32 = nextafterf((float)(HeightOfPlane - 1), 0.0);
    v708 = 1;
    if (v717 >= 1 && v718 >= 1)
    {
      v721 = 0;
      v722 = vdupq_n_s32(BytesPerRowOfPlane >> 1);
      v723 = (float32x4_t)vdupq_lane_s32(v2448, 0);
      v724 = (float32x4_t)vdupq_lane_s32(v720, 0);
      v725 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&buf[12], 0);
      v726 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&buf[16], 0);
      v727 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&buf[20], 0);
      v728 = vmulq_n_f32(v2441, *(float *)buf);
      v729 = vmulq_n_f32(v2441, *(float *)&buf[4]);
      v730 = vmulq_n_f32(v2441, *(float *)&buf[8]);
      v731 = *(_QWORD *)(v553 + 40);
      v732 = vmlaq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vshrq_n_u64(*(uint64x2_t *)&buf[20], 0x20uLL), 0), (float32x4_t)xmmword_1C99275A0, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)buf, 0));
      v733 = vmlaq_f32((float32x4_t)vdupq_laneq_s32(*(int32x4_t *)&buf[20], 2), (float32x4_t)xmmword_1C99275A0, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&buf[4], 0));
      v734 = vmlaq_f32((float32x4_t)vdupq_laneq_s32(*(int32x4_t *)&buf[20], 3), (float32x4_t)xmmword_1C99275A0, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&buf[8], 0));
      do
      {
        v735 = 0;
        v736 = v734;
        v737 = v733;
        v738 = v732;
        do
        {
          v739 = vmaxnmq_f32(vminnmq_f32(vdivq_f32(v738, v736), v723), (float32x4_t)0);
          v740 = vmaxnmq_f32(vminnmq_f32(vdivq_f32(v737, v736), v724), (float32x4_t)0);
          v741 = vcvtq_s32_f32(v739);
          v742 = vcvtq_s32_f32(v740);
          v743 = vcvtq_f32_s32(v741);
          v744 = vmlaq_s32(v741, v722, v742);
          v745 = vsubq_f32(v739, v743);
          v746 = vaddq_s32(v744, v722);
          v747 = (__int16 *)&v716[2 * v744.i32[0]];
          v748 = (__int16 *)&v716[2 * v744.i32[1]];
          v749 = vsubq_f32(v740, vcvtq_f32_s32(v742));
          v750 = (__int16 *)&v716[2 * v744.i32[2]];
          v744.i16[0] = *v747;
          v744.i16[1] = *v748;
          v751 = (__int16 *)&v716[2 * v744.i32[3]];
          v744.i16[2] = *v750;
          v744.i16[3] = *v751;
          v742.i16[0] = v747[1];
          v752 = vsubq_f32(v2507, v745);
          v742.i16[1] = v748[1];
          v742.i16[2] = v750[1];
          v742.i16[3] = v751[1];
          v753 = (__int16 *)&v716[2 * v746.i32[0]];
          v754 = (__int16 *)&v716[2 * v746.i32[1]];
          v746.i16[0] = *v753;
          v746.i16[1] = *v754;
          v755 = (__int16 *)&v716[2 * v746.i32[2]];
          v756 = (__int16 *)&v716[2 * v746.i32[3]];
          v746.i16[2] = *v755;
          v746.i16[3] = *v756;
          v757.i16[0] = v753[1];
          v757.i16[1] = v754[1];
          v757.i16[2] = v755[1];
          v757.i16[3] = v756[1];
          v758 = (int16x8_t)vcvtq_s32_f32(vminnmq_f32(vmulq_f32(vmlaq_f32(vmulq_f32(vsubq_f32(v2507, v749), vmlaq_f32(vmulq_f32(v752, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v744.i8))), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v742.i8)), v745)), vmlaq_f32(vmulq_f32(v752, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v746.i8))), vcvtq_f32_u32(vmovl_u16(v757)), v745), v749), (float32x4_t)vdupq_n_s32(0x3B800000u)), v2489));
          *(int16x4_t *)v758.i8 = vmovn_s32((int32x4_t)v758);
          *(_DWORD *)(v731 + v735) = vmovn_s16(v758).u32[0];
          v738 = vaddq_f32(v728, v738);
          v737 = vaddq_f32(v729, v737);
          v736 = vaddq_f32(v730, v736);
          v735 += 4;
        }
        while ((int)v735 < v718);
        v731 += v735;
        v732 = vaddq_f32(v725, v732);
        v733 = vaddq_f32(v726, v733);
        v734 = vaddq_f32(v727, v734);
        ++v721;
      }
      while (v721 != v717);
      goto LABEL_840;
    }
LABEL_841:
    CVPixelBufferUnlockBaseAddress(v595, 1uLL);
    kdebug_trace();
    v759 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v760 = (unint64_t *)((char *)__p[1] + 8);
      do
        v761 = __ldaxr(v760);
      while (__stlxr(v761 - 1, v760));
      if (!v761)
      {
        ((void (*)(std::__shared_weak_count *))v759->__on_zero_shared)(v759);
        std::__shared_weak_count::__release_weak(v759);
      }
    }
    if ((v708 & 1) == 0)
    {
      v792 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
      v502 = v2454;
      if ((v792 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
      {
        qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
        __cxa_guard_release(&qword_1ED52ACD0);
      }
      v793 = (id)qword_1ED52ACE0;
      if (os_log_type_enabled(v793, OS_LOG_TYPE_DEBUG))
      {
        v2379 = *(_QWORD *)(keyb + 80);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v2379;
        _os_log_debug_impl(&dword_1C9870000, v793, OS_LOG_TYPE_DEBUG, "Computing the crop for face %d failed.", buf, 8u);
      }

      sub_1C98CC760(a1);
LABEL_914:
      v2437 = 0;
LABEL_915:
      if (!v502)
        goto LABEL_917;
LABEL_916:
      operator delete(v502);
      goto LABEL_917;
    }
    v762 = *(_DWORD **)(*v2472 + 8);
    v763 = *(std::__shared_weak_count **)(*v2472 + 16);
    v502 = v2454;
    if (v763)
    {
      v764 = (unint64_t *)&v763->__shared_owners_;
      do
        v765 = __ldxr(v764);
      while (__stxr(v765 + 1, v764));
    }
    v766 = (char *)v2541 + 104 * v503;
    *v762 = v766[4];
    v762[1] = v766[10];
    v762[2] = v766[11];
    if (v763)
    {
      v767 = (unint64_t *)&v763->__shared_owners_;
      do
        v768 = __ldaxr(v767);
      while (__stlxr(v768 - 1, v767));
      if (!v768)
      {
        ((void (*)(std::__shared_weak_count *))v763->__on_zero_shared)(v763);
        std::__shared_weak_count::__release_weak(v763);
      }
    }
    ++v503;
  }
  while (v503 != v2457);
  if (*(_QWORD *)(*a2 + 152))
    v838 = 0;
  else
    v838 = *(_BYTE *)(*v2451 + 384) != 0;
  v2422 = v838;
  kdebug_trace();
  v839 = (char *)v2550;
  v840 = v2551;
  if (v2550 != v2551)
  {
    do
    {
      v841 = **(_QWORD **)v839;
      v843 = *(void **)(v841 + 8);
      v842 = *(std::__shared_weak_count **)(v841 + 16);
      memptr[0] = v843;
      memptr[1] = v842;
      if (v842)
      {
        v844 = (unint64_t *)&v842->__shared_owners_;
        do
          v845 = __ldxr(v844);
        while (__stxr(v845 + 1, v844));
        v841 = **(_QWORD **)v839;
      }
      v846 = *a2;
      if (!*(_QWORD *)(*a2 + 152))
      {
        v847 = v2422;
        if (*(int *)(v841 + 4) >= 50)
          v847 = 0;
        if (v847)
        {
          v849 = *(_QWORD *)(v841 + 136);
          v848 = *(_QWORD *)(v841 + 144);
          *(_QWORD *)&v2574 = v849;
          *((_QWORD *)&v2574 + 1) = v848;
          if (v848)
          {
            v850 = (unint64_t *)(v848 + 8);
            do
              v851 = __ldxr(v850);
            while (__stxr(v851 + 1, v850));
            v846 = *a2;
          }
          v2539 = v843;
          v2540 = v842;
          if (v842)
          {
            v852 = (unint64_t *)&v842->__shared_owners_;
            do
              v853 = __ldxr(v852);
            while (__stxr(v853 + 1, v852));
            do
              v854 = __ldxr(v852);
            while (__stxr(v854 + 1, v852));
            v855 = v842;
          }
          else
          {
            v855 = 0;
          }
          *(_QWORD *)buf = sub_1C98B842C;
          *(_QWORD *)&buf[8] = 0;
          *(_QWORD *)&buf[16] = v846;
          *(_QWORD *)&buf[24] = v843;
          *(_QWORD *)&buf[32] = v855;
          *(_QWORD *)&v2608[24] = 0;
          v858 = operator new(0x30uLL);
          *v858 = &off_1E82952D8;
          v858[1] = sub_1C98B842C;
          v858[2] = 0;
          v858[3] = v846;
          v858[4] = v843;
          v858[5] = v842;
          *(_QWORD *)&v2608[24] = v858;
          std::mutex::lock((std::mutex *)(v849 + 888));
          if (*(_DWORD *)(v849 + 880))
          {
            kdebug_trace();
            v859 = *(_DWORD *)(v849 + 880);
            if (v859)
            {
              v860 = v859 - 1;
              *(_DWORD *)(v849 + 880) = v859 - 1;
              if (v859 == 1)
              {
                sub_1C98EDA50(v849 + 304, (uint64_t *)(v849 + 592));
                sub_1C98EDA50(v849 + 448, (uint64_t *)(v849 + 592));
              }
              else
              {
                v2612.columns[0].f32[0] = (float)(v859 * v859);
                *(float *)&v2527 = (float)(v860 * v860);
                *((float *)&v2527 + 1) = (float)(v860 * v860 * v860);
                v2612.columns[1].f32[0] = (float)(v859 * v859 * v859);
                v2612.columns[0].f32[1] = (float)v859 + (float)v859;
                v2612.columns[1].f32[1] = v2612.columns[0].f32[0] * 3.0;
                *(simd_float2x2 *)v2592 = __invert_f2(v2612);
                *(_QWORD *)v2599 = &v2527;
                *(_QWORD *)&v2599[8] = v2592;
                *(_OWORD *)__p = xmmword_1C99277B0;
                *(_QWORD *)buf = v2599;
                *(_QWORD *)&buf[8] = __p;
                *(_QWORD *)&v2569 = 0;
                sub_1C98EDCC4((float *)&v2569, (uint64_t)buf);
                v861.i32[0] = DWORD1(v2569);
                v862 = *(float *)&v2569;
                *(float *)v863.i32 = 1.0 - (float)(*(float *)&v2569 + *((float *)&v2569 + 1));
                v864 = *(unsigned int *)(v849 + 480);
                if ((int)v864 >= 1)
                {
                  v865 = *(float32x4_t **)(v849 + 464);
                  v866 = *(float32x4_t **)(v849 + 320);
                  v867 = *(float32x4_t **)(v849 + 608);
                  if (v864 < 8)
                  {
                    v868 = 0;
                    goto LABEL_1035;
                  }
                  v868 = v864 & 0x7FFFFFF8;
                  v869 = (float32x4_t)vdupq_lane_s32(v861, 0);
                  v870 = (float32x4_t)vdupq_lane_s32(v863, 0);
                  v871 = v867 + 1;
                  v872 = v866 + 1;
                  v873 = v865 + 1;
                  v874 = v864 & 0xFFFFFFF8;
                  do
                  {
                    v875 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(*v872, v862), *v873, v869), *v871, v870);
                    v873[-1] = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v872[-1], v862), v873[-1], v869), v871[-1], v870);
                    *v873 = v875;
                    v871 += 2;
                    v872 += 2;
                    v873 += 2;
                    v874 -= 8;
                  }
                  while (v874);
                  if (v868 != v864)
                  {
LABEL_1035:
                    v876 = v864 - v868;
                    v877 = v868;
                    v878 = &v867->f32[v877];
                    v879 = &v866->f32[v877];
                    v880 = &v865->f32[v877];
                    do
                    {
                      v881 = *v879++;
                      v882 = (float)(v881 * v862) + (float)(*(float *)v861.i32 * *v880);
                      v883 = *v878++;
                      *v880++ = v882 + (float)(*(float *)v863.i32 * v883);
                      --v876;
                    }
                    while (v876);
                  }
                }
                v884 = *(unsigned int *)(v849 + 504);
                if ((int)v884 >= 1)
                {
                  v885 = *(float32x4_t **)(v849 + 488);
                  v886 = *(float32x4_t **)(v849 + 344);
                  v887 = *(float32x4_t **)(v849 + 632);
                  if (v884 < 8)
                  {
                    v888 = 0;
                    goto LABEL_1043;
                  }
                  v888 = v884 & 0x7FFFFFF8;
                  v889 = (float32x4_t)vdupq_lane_s32(v861, 0);
                  v890 = (float32x4_t)vdupq_lane_s32(v863, 0);
                  v891 = v887 + 1;
                  v892 = v886 + 1;
                  v893 = v885 + 1;
                  v894 = v884 & 0xFFFFFFF8;
                  do
                  {
                    v895 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(*v892, v862), *v893, v889), *v891, v890);
                    v893[-1] = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v892[-1], v862), v893[-1], v889), v891[-1], v890);
                    *v893 = v895;
                    v891 += 2;
                    v892 += 2;
                    v893 += 2;
                    v894 -= 8;
                  }
                  while (v894);
                  if (v888 != v884)
                  {
LABEL_1043:
                    v896 = v884 - v888;
                    v897 = v888;
                    v898 = &v887->f32[v897];
                    v899 = &v886->f32[v897];
                    v900 = &v885->f32[v897];
                    do
                    {
                      v901 = *v899++;
                      v902 = (float)(v901 * v862) + (float)(*(float *)v861.i32 * *v900);
                      v903 = *v898++;
                      *v900++ = v902 + (float)(*(float *)v863.i32 * v903);
                      --v896;
                    }
                    while (v896);
                  }
                }
                v904 = (*(_DWORD *)(v849 + 532) * *(_DWORD *)(v849 + 528));
                if ((int)v904 >= 1)
                {
                  v905 = *(float32x4_t **)(v849 + 368);
                  v906 = *(float32x4_t **)(v849 + 656);
                  v907 = *(float32x4_t **)(v849 + 512);
                  if (v904 < 8)
                  {
                    v908 = 0;
                    goto LABEL_1051;
                  }
                  v908 = v904 & 0x7FFFFFF8;
                  v909 = (float32x4_t)vdupq_lane_s32(v861, 0);
                  v910 = (float32x4_t)vdupq_lane_s32(v863, 0);
                  v911 = v906 + 1;
                  v912 = v905 + 1;
                  v913 = v907 + 1;
                  v914 = v904 & 0xFFFFFFF8;
                  do
                  {
                    v915 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(*v912, v862), *v913, v909), *v911, v910);
                    v913[-1] = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v912[-1], v862), v913[-1], v909), v911[-1], v910);
                    *v913 = v915;
                    v911 += 2;
                    v912 += 2;
                    v913 += 2;
                    v914 -= 8;
                  }
                  while (v914);
                  if (v908 != v904)
                  {
LABEL_1051:
                    v916 = v904 - v908;
                    v917 = v908;
                    v918 = &v906->f32[v917];
                    v919 = &v905->f32[v917];
                    v920 = &v907->f32[v917];
                    do
                    {
                      v921 = *v919++;
                      v922 = (float)(v921 * v862) + (float)(*(float *)v861.i32 * *v920);
                      v923 = *v918++;
                      *v920++ = v922 + (float)(*(float *)v863.i32 * v923);
                      --v916;
                    }
                    while (v916);
                  }
                }
                if (*(_BYTE *)(v849 + 584))
                {
                  v924 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(*(float32x4_t *)(v849 + 408), v862), *(float32x4_t *)(v849 + 552), *(float *)v861.i32), *(float32x4_t *)(v849 + 696), *(float *)v863.i32);
                  *(float32x4_t *)(v849 + 536) = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(*(float32x4_t *)(v849 + 392), v862), *(float32x4_t *)(v849 + 536), *(float *)v861.i32), *(float32x4_t *)(v849 + 680), *(float *)v863.i32);
                  *(float32x4_t *)(v849 + 552) = v924;
                  *(float32x4_t *)(v849 + 568) = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(*(float32x4_t *)(v849 + 424), v862), *(float32x4_t *)(v849 + 568), *(float *)v861.i32), *(float32x4_t *)(v849 + 712), *(float *)v863.i32);
                }
                sub_1C99164CC((uint64_t *)(v849 + 304), (uint64_t *)(v849 + 448));
              }
            }
            if (!*(_QWORD *)&v2608[24])
            {
              sub_1C9889C1C();
              goto LABEL_2824;
            }
            (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)&v2608[24] + 48))(*(_QWORD *)&v2608[24], v849 + 304);
            kdebug_trace();
          }
          std::mutex::unlock((std::mutex *)(v849 + 888));
          v925 = *(_BYTE **)&v2608[24];
          if (*(_BYTE **)&v2608[24] == v2608)
          {
            v925 = v2608;
            v926 = 4;
LABEL_1062:
            (*(void (**)(void))(*(_QWORD *)v925 + 8 * v926))();
          }
          else if (*(_QWORD *)&v2608[24])
          {
            v926 = 5;
            goto LABEL_1062;
          }
          if (v842)
          {
            v927 = (unint64_t *)&v842->__shared_owners_;
            do
              v928 = __ldaxr(v927);
            while (__stlxr(v928 - 1, v927));
            if (!v928)
            {
              ((void (*)(std::__shared_weak_count *))v842->__on_zero_shared)(v842);
              std::__shared_weak_count::__release_weak(v842);
            }
          }
          v929 = (std::__shared_weak_count *)*((_QWORD *)&v2574 + 1);
          if (*((_QWORD *)&v2574 + 1))
          {
            v930 = (unint64_t *)(*((_QWORD *)&v2574 + 1) + 8);
            do
              v931 = __ldaxr(v930);
            while (__stlxr(v931 - 1, v930));
            if (!v931)
            {
              ((void (*)(std::__shared_weak_count *))v929->__on_zero_shared)(v929);
              std::__shared_weak_count::__release_weak(v929);
            }
          }
          v842 = (std::__shared_weak_count *)memptr[1];
          if (!memptr[1])
            goto LABEL_1000;
LABEL_1020:
          v856 = (unint64_t *)&v842->__shared_owners_;
          do
            v857 = __ldaxr(v856);
          while (__stlxr(v857 - 1, v856));
          if (!v857)
          {
            ((void (*)(std::__shared_weak_count *))v842->__on_zero_shared)(v842);
            std::__shared_weak_count::__release_weak(v842);
          }
          goto LABEL_1000;
        }
        (*(void (**)(_QWORD, _QWORD, void *))(**(_QWORD **)(v846 + 16) + 16))(*(_QWORD *)(v846 + 16), 0, v843);
      }
      if (v842)
        goto LABEL_1020;
LABEL_1000:
      v839 += 16;
    }
    while (v839 != v840);
  }
  v502 = v2454;
  kdebug_trace();
  kdebug_trace();
  memset(buf, 0, 24);
  if (v2432)
  {
    if (v2432 < 0)
      abort();
    v932 = (char *)operator new(v2444 & 0xFFFFFFFFFLL);
    *(_QWORD *)buf = v932;
    *(_QWORD *)&buf[16] = &v932[16 * (int)(v2444 >> 4)];
    bzero(v932, v2444 & 0xFFFFFFFFFLL);
    *(_QWORD *)&buf[8] = &v932[v2444 & 0xFFFFFFFFFLL];
  }
  v933 = 0;
  do
  {
    v934 = *(_OWORD *)(**((_QWORD **)v2550 + 2 * v933) + 8);
    v935 = *(_QWORD *)(**((_QWORD **)v2550 + 2 * v933) + 16);
    if (v935)
    {
      v936 = (unint64_t *)(v935 + 8);
      do
        v937 = __ldxr(v936);
      while (__stxr(v937 + 1, v936));
    }
    v938 = *(_QWORD *)buf + 16 * v933;
    v939 = *(std::__shared_weak_count **)(v938 + 8);
    *(_OWORD *)v938 = v934;
    if (v939)
    {
      v940 = (unint64_t *)&v939->__shared_owners_;
      do
        v941 = __ldaxr(v940);
      while (__stlxr(v941 - 1, v940));
      if (!v941)
      {
        ((void (*)(std::__shared_weak_count *))v939->__on_zero_shared)(v939);
        std::__shared_weak_count::__release_weak(v939);
      }
    }
    ++v933;
  }
  while (v933 != v2457);
  v942 = a2;
  v943 = *(_QWORD *)(*a2 + 16);
  v944 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
  if ((v944 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
  {
    sub_1C98CFF14();
    __cxa_guard_release(&qword_1ED52ACD8);
    v942 = a2;
    v502 = v2454;
  }
  (*(void (**)(uint64_t, _BYTE *, _QWORD, _QWORD))(*(_QWORD *)v943 + 24))(v943, buf, *(unsigned __int8 *)(qword_1ED52ACB8 + 192), *(unsigned __int8 *)(*(_QWORD *)(*v942 + 8) + 3));
  v945 = *(_QWORD *)buf;
  if (*(_QWORD *)buf)
  {
    v946 = *(_QWORD *)&buf[8];
    v947 = *(void **)buf;
    if (*(_QWORD *)&buf[8] != *(_QWORD *)buf)
    {
      do
      {
        v948 = *(std::__shared_weak_count **)(v946 - 8);
        if (v948)
        {
          v949 = (unint64_t *)&v948->__shared_owners_;
          do
            v950 = __ldaxr(v949);
          while (__stlxr(v950 - 1, v949));
          if (!v950)
          {
            ((void (*)(std::__shared_weak_count *))v948->__on_zero_shared)(v948);
            std::__shared_weak_count::__release_weak(v948);
          }
        }
        v946 -= 16;
      }
      while (v946 != v945);
      v947 = *(void **)buf;
    }
    *(_QWORD *)&buf[8] = v945;
    operator delete(v947);
  }
  kdebug_trace();
  v951 = 0;
  v952 = 0;
  alloc = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  while (2)
  {
    v953 = *((_OWORD *)v2550 + v952);
    v2538 = v953;
    if (*((_QWORD *)&v953 + 1))
    {
      v954 = (unint64_t *)(*((_QWORD *)&v953 + 1) + 8);
      do
        v955 = __ldxr(v954);
      while (__stxr(v955 + 1, v954));
    }
    v956 = *(_QWORD *)(*(_QWORD *)v953 + 8);
    v957 = *(std::__shared_weak_count **)(*(_QWORD *)v953 + 16);
    if (v957)
    {
      v958 = (unint64_t *)&v957->__shared_owners_;
      do
        v959 = __ldxr(v958);
      while (__stxr(v959 + 1, v958));
    }
    v961 = *(float **)(v956 + 64);
    v960 = *(std::__shared_weak_count **)(v956 + 72);
    if (v960)
    {
      v962 = (unint64_t *)&v960->__shared_owners_;
      do
        v963 = __ldxr(v962);
      while (__stxr(v963 + 1, v962));
    }
    v2536 = v961;
    v2537 = v960;
    if (v957)
    {
      v964 = (unint64_t *)&v957->__shared_owners_;
      do
        v965 = __ldaxr(v964);
      while (__stlxr(v965 - 1, v964));
      if (!v965)
      {
        ((void (*)(std::__shared_weak_count *))v957->__on_zero_shared)(v957);
        std::__shared_weak_count::__release_weak(v957);
      }
      v961 = v2536;
    }
    if (!v961)
    {
      v977 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
      if ((v977 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
      {
        qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
        __cxa_guard_release(&qword_1ED52ACD0);
      }
      v978 = (id)qword_1ED52ACE0;
      if (os_log_type_enabled(v978, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_1C9870000, v978, OS_LOG_TYPE_ERROR, "net output invalid", buf, 2u);
      }

      sub_1C98CC760(a1);
      v979 = v2537;
      if (v2537)
        goto LABEL_2436;
      goto LABEL_2440;
    }
    kdebug_trace();
    v966 = v2536;
    v2534 = 0;
    v2535 = 0.0;
    v967 = v2536[1];
    v968 = v2536[2];
    v969 = __sincosf_stret(*v2536);
    v970 = __sincosf_stret(v967);
    v971 = __sincosf_stret(v968);
    *(float *)&v2527 = v970.__cosval * v971.__cosval;
    *((float *)&v2527 + 1) = (float)(v970.__sinval * (float)(v969.__sinval * v971.__cosval))
                           + (float)(v969.__cosval * v971.__sinval);
    *(float *)&v2528 = (float)(v970.__sinval * (float)-(float)(v969.__cosval * v971.__cosval))
                     + (float)(v969.__sinval * v971.__sinval);
    *((float *)&v2528 + 1) = -(float)(v970.__cosval * v971.__sinval);
    v2529 = (float)((float)-(float)(v969.__sinval * v970.__sinval) * v971.__sinval)
          + (float)(v969.__cosval * v971.__cosval);
    v2530 = (float)((float)(v969.__cosval * v970.__sinval) * v971.__sinval) + (float)(v971.__cosval * v969.__sinval);
    sinval = v970.__sinval;
    v2532 = -(float)(v970.__cosval * v969.__sinval);
    v2533 = v969.__cosval * v970.__cosval;
    if (&v2534 != (uint64_t *)(v966 + 3))
    {
      v972 = *(_QWORD *)(v966 + 3);
      v2535 = v966[5];
      v2534 = v972;
    }
    v2521 = 0;
    v2522 = 0;
    v973 = (float *)((char *)v2541 + 104 * v952 + 52);
    v2520 = 0;
    v2523 = 0;
    v2525 = 0;
    v2526 = 0.0;
    if (v973 == &v2519)
    {
      v974 = 1.0;
      v975 = 1.0;
      v976 = 1.0;
    }
    else
    {
      v974 = *v973;
      LODWORD(v2520) = *((_DWORD *)v2541 + 26 * v952 + 16);
      HIDWORD(v2520) = *((_DWORD *)v2541 + 26 * v952 + 19);
      LODWORD(v2521) = *((_DWORD *)v2541 + 26 * v952 + 14);
      v975 = *((float *)v2541 + 26 * v952 + 17);
      LODWORD(v2522) = *((_DWORD *)v2541 + 26 * v952 + 20);
      HIDWORD(v2522) = *((_DWORD *)v2541 + 26 * v952 + 15);
      v2523 = *((_DWORD *)v2541 + 26 * v952 + 18);
      v976 = *((float *)v2541 + 26 * v952 + 21);
    }
    v2519 = v974;
    *((float *)&v2521 + 1) = v975;
    v2524 = v976;
    *(_QWORD *)v2608 = &v2519;
    *(_QWORD *)buf = v2608;
    *(_QWORD *)&buf[8] = (char *)v2541 + 104 * v952 + 88;
    sub_1C98CC868((float *)&v2525, (uint64_t)buf);
    v2515 = 0x3F800000uLL;
    v2514 = 0x3F800000uLL;
    v2516 = 1065353216;
    v2517 = 0;
    v2518 = 0.0;
    *(_QWORD *)buf = &v2519;
    *(_QWORD *)&buf[8] = &v2527;
    sub_1C98A24C0((uint64_t)&v2514, (float **)buf);
    *(_QWORD *)v2608 = &v2519;
    *(_QWORD *)&v2608[8] = &v2534;
    *(_QWORD *)&buf[4] = 0;
    *(_DWORD *)&buf[12] = 0;
    sub_1C98A266C((float *)&buf[4], (float **)v2608);
    v2517 = vadd_f32(*(float32x2_t *)&buf[4], v2525);
    v2518 = *(float *)&buf[12] + v2526;
    v980 = v951 & 0xFFFFFF00;
    v981 = *a2;
    v2449 = v952;
    v2424 = v961;
    if (!v2443 || !*(_BYTE *)(*(_QWORD *)(v981 + 8) + 8))
      goto LABEL_1320;
    kdebug_trace();
    sub_1C98B6CAC((uint64_t)(v2536 + 46), *((_QWORD *)v2536 + 3), *((_DWORD *)v2536 + 10), *a2 + 168);
    *(_DWORD *)&buf[28] = 0;
    *(_DWORD *)&buf[12] = 0;
    *(_QWORD *)&buf[20] = 0;
    *(_QWORD *)&buf[4] = 0;
    *(_DWORD *)buf = 1065353216;
    *(_DWORD *)&buf[16] = 1065353216;
    *(_DWORD *)&buf[32] = 1065353216;
    *(_QWORD *)&buf[36] = 0;
    *(_DWORD *)&buf[44] = 0;
    *(_QWORD *)v2608 = &v2556[4];
    *(_QWORD *)&v2608[8] = &v2514;
    sub_1C98A24C0((uint64_t)buf, (float **)v2608);
    *(_QWORD *)v2599 = &v2556[4];
    *(_QWORD *)&v2599[8] = &v2517;
    *(_QWORD *)&v2608[4] = 0;
    *(_DWORD *)&v2608[12] = 0;
    sub_1C98A266C((float *)&v2608[4], (float **)v2599);
    *(float32x2_t *)&buf[36] = vadd_f32(*(float32x2_t *)&v2608[4], v2557);
    *(float *)&buf[44] = *(float *)&v2608[12] + v2558;
    v982 = *a2;
    v983 = *(float *)(*(_QWORD *)(*a2 + 8) + 92);
    if ((float)(*(float *)&v2608[12] + v2558) > v983)
      goto LABEL_1319;
    v984 = *v2451;
    v985 = *(_OWORD *)(*v2451 + 240);
    *(_OWORD *)v2608 = *(_OWORD *)(*v2451 + 224);
    *(_OWORD *)&v2608[16] = v985;
    *(_DWORD *)&v2608[32] = *(_DWORD *)(v984 + 256);
    v986 = *(int *)(v982 + 184);
    v987 = v982;
    v2428 = v986;
    if ((_DWORD)v986)
    {
      if ((v986 & 0x80000000) != 0)
        goto LABEL_2805;
      v988 = v986;
      v989 = (float *)operator new(4 * v986);
      v2490 = &v989[v988];
    }
    else
    {
      v989 = 0;
      v2490 = 0;
    }
    v990 = v983 + 100.0;
    v991 = *(__CVBuffer **)(v984 + 200);
    v992 = CVPixelBufferGetPixelFormatType(v991);
    if (v992 != 825306677)
    {
      v993 = v992;
      if (v992 != 1647392359 && v992 != 825437747)
      {
        v1094 = *(_DWORD *)(v984 + 324);
        if (v1094 != 1)
        {
          if (v1094 != 2)
            goto LABEL_2806;
          v1095 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
          if ((v1095 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
          {
            qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
            __cxa_guard_release(&qword_1ED52ACD0);
          }
          v1096 = qword_1ED52ACE0;
          if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v2599 = 67109120;
            *(_DWORD *)&v2599[4] = v993;
            v1097 = v1096;
            v1098 = "unknown depth buffer format (%u) for normalized disparity";
            goto LABEL_2555;
          }
          goto LABEL_1607;
        }
        if (v992 != 1717855600 && v992 != 1278226534)
        {
          v1487 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
          if ((v1487 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
          {
            qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
            __cxa_guard_release(&qword_1ED52ACD0);
          }
          v1488 = qword_1ED52ACE0;
          if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v2599 = 67109120;
            *(_DWORD *)&v2599[4] = v993;
            v1097 = v1488;
            v1098 = "unknown depth buffer format (%u)";
LABEL_2555:
            _os_log_error_impl(&dword_1C9870000, v1097, OS_LOG_TYPE_ERROR, v1098, v2599, 8u);
            if (!v989)
              goto LABEL_2556;
            goto LABEL_1608;
          }
LABEL_1607:
          if (!v989)
          {
LABEL_2556:
            v1033 = 0;
            goto LABEL_1286;
          }
LABEL_1608:
          operator delete(v989);
          v1033 = 0;
          v989 = 0;
          goto LABEL_1286;
        }
        v2476 = *(float *)(v984 + 312);
        CVPixelBufferLockBaseAddress(v991, 1uLL);
        v1099 = CVPixelBufferGetWidth(v991);
        v1100 = CVPixelBufferGetHeight(v991);
        BytesPerRow = CVPixelBufferGetBytesPerRow(v991);
        pixelBuffer = v991;
        BaseAddress = (char *)CVPixelBufferGetBaseAddress(v991);
        v1104 = v2428;
        if (!(_DWORD)v2428)
          goto LABEL_1284;
        v1105 = BaseAddress;
        v1106 = 0;
        *(float *)v1103.i32 = v990 / v2476;
        keyf = (float32x4_t)vdupq_lane_s32(v1103, 0);
        v1107 = (float)(v1099 - 1);
        v1108 = (float)(v1100 - 1);
        v1109 = v989;
        while (1)
        {
          v1110 = (3 * v1106);
          __p[0] = (void *)(*(_QWORD *)(v987 + 168) + 4 * v1110);
          __p[1] = (void *)((v1110 << 32) | 3);
          *(_QWORD *)v2592 = buf;
          *(_QWORD *)&v2592[8] = __p;
          *(_QWORD *)&v2599[4] = 0;
          *(_DWORD *)&v2599[12] = 0;
          sub_1C98F2EA4((float *)&v2599[4], (uint64_t)v2592);
          memptr[0] = (void *)vadd_f32(*(float32x2_t *)&v2599[4], *(float32x2_t *)&buf[36]);
          v1111 = *(float *)&v2599[12] + *(float *)&buf[44];
          *(float *)&memptr[1] = *(float *)&v2599[12] + *(float *)&buf[44];
          *(_QWORD *)v2599 = v2608;
          *(_QWORD *)&v2599[8] = memptr;
          *(_QWORD *)v2592 = 0;
          *(_DWORD *)&v2592[8] = 0;
          sub_1C98A266C((float *)v2592, (float **)v2599);
          *(float *)v1113.i32 = *(float *)v2592 / *(float *)&v2592[8];
          if ((float)(*(float *)v2592 / *(float *)&v2592[8]) >= 0.0)
          {
            *(float *)v1112.i32 = *(float *)&v2592[4] / *(float *)&v2592[8];
            v1114 = (float)(*(float *)&v2592[4] / *(float *)&v2592[8]) >= 0.0 && *(float *)v1113.i32 < v1107;
            if (v1114 && *(float *)v1112.i32 < v1108)
            {
              v1116 = 4 * (int)*(float *)v1113.i32;
              v1117 = (int)*(float *)v1112.i32 * BytesPerRow;
              v1118 = v1117 + v1116;
              v1119 = (__int32 *)&v1105[v1117 + v1116 + 4];
              v1120 = BytesPerRow + v1117;
              v1121.i32[0] = *(_DWORD *)&v1105[v1118];
              v1121.i32[1] = *v1119;
              v1121.i32[2] = *(_DWORD *)&v1105[v1120 + v1116];
              v1121.i32[3] = *(_DWORD *)&v1105[v1120 + v1116 + 4];
              v1122 = vmulq_n_f32((float32x4_t)vandq_s8(v1121, (int8x16_t)vcgeq_f32(keyf, (float32x4_t)v1121)), v2476);
              *(float *)v1113.i32 = *(float *)v1113.i32 - (float)(int)*(float *)v1113.i32;
              *(float *)v1112.i32 = *(float *)v1112.i32 - (float)(int)*(float *)v1112.i32;
              v1123.f32[0] = 1.0 - *(float *)v1113.i32;
              v1123.i32[1] = v1113.i32[0];
              v1123.f32[2] = 1.0 - *(float *)v1113.i32;
              v1123.i32[3] = v1113.i32[0];
              *(float *)v1113.i32 = 1.0 - *(float *)v1112.i32;
              *(int32x2_t *)v1124.f32 = vdup_lane_s32(v1113, 0);
              *(int32x2_t *)&v1124.u32[2] = vdup_lane_s32(v1112, 0);
              v1125 = (float32x4_t)vandq_s8((int8x16_t)vmulq_f32(v1123, v1124), (int8x16_t)vcgtzq_f32(v1122));
              v1126 = vadd_f32(*(float32x2_t *)v1125.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v1125, (int8x16_t)v1125, 8uLL));
              if (vaddv_f32(v1126) != 0.0)
              {
                v1127 = (int8x16_t)vmulq_f32(v1122, v1125);
                *(float32x2_t *)v1127.i8 = vadd_f32(*(float32x2_t *)v1127.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v1127, v1127, 8uLL));
                v1128 = vdiv_f32(vadd_f32(*(float32x2_t *)v1127.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v1127.i8, 1)), vadd_f32(v1126, (float32x2_t)vdup_lane_s32((int32x2_t)v1126, 1))).f32[0]/ v1111;
                if (v1109 >= v2490)
                {
                  v1129 = v987;
                  v1130 = v1109 - v989;
                  v1131 = v1130 + 1;
                  if ((unint64_t)(v1130 + 1) >> 62)
                    goto LABEL_2805;
                  if (((char *)v2490 - (char *)v989) >> 1 > v1131)
                    v1131 = ((char *)v2490 - (char *)v989) >> 1;
                  v1132 = 0x3FFFFFFFFFFFFFFFLL;
                  if ((unint64_t)((char *)v2490 - (char *)v989) < 0x7FFFFFFFFFFFFFFCLL)
                    v1132 = v1131;
                  v2492 = v1132;
                  if (v1132)
                  {
                    if (v1132 >> 62)
                      goto LABEL_2804;
                    v1133 = operator new(4 * v1132);
                  }
                  else
                  {
                    v1133 = 0;
                  }
                  v1134 = (float *)&v1133[4 * v1130];
                  *v1134 = v1128;
                  v1033 = v1134 + 1;
                  if (v1109 == v989)
                  {
                    v987 = v1129;
                    v1137 = v2492;
                  }
                  else
                  {
                    v1135 = (char *)(v1109 - 1) - (char *)v989;
                    if (v1135 < 0xBC
                      || &v1133[(char *)v1109 - (char *)v989 - 4 - (v1135 & 0xFFFFFFFFFFFFFFFCLL)] > &v1133[(char *)v1109 - (char *)v989 - 4]
                      || (float *)((char *)v1109 - (v1135 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v1109 - 1
                      || (unint64_t)((char *)v989 - v1133) < 0x20)
                    {
                      v1136 = v1109;
                      v987 = v1129;
                      v1137 = v2492;
                      goto LABEL_1270;
                    }
                    v1139 = (v1135 >> 2) + 1;
                    v1136 = &v1109[-(v1139 & 0x7FFFFFFFFFFFFFF8)];
                    v1140 = &v1133[4 * v1130 - 16];
                    v1141 = v1109 - 4;
                    v1142 = v1139 & 0x7FFFFFFFFFFFFFF8;
                    do
                    {
                      v1143 = *(_OWORD *)v1141;
                      *(v1140 - 1) = *((_OWORD *)v1141 - 1);
                      *v1140 = v1143;
                      v1140 -= 2;
                      v1141 -= 8;
                      v1142 -= 8;
                    }
                    while (v1142);
                    v1134 -= v1139 & 0x7FFFFFFFFFFFFFF8;
                    _ZF = v1139 == (v1139 & 0x7FFFFFFFFFFFFFF8);
                    v987 = v1129;
                    v1137 = v2492;
                    if (!_ZF)
                    {
                      do
                      {
LABEL_1270:
                        v1138 = *((_DWORD *)v1136-- - 1);
                        *((_DWORD *)v1134-- - 1) = v1138;
                      }
                      while (v1136 != v989);
                    }
                  }
                  v2490 = (float *)&v1133[4 * v1137];
                  if (v989)
                    operator delete(v989);
                  v989 = v1134;
                  v1104 = v2428;
                  goto LABEL_1256;
                }
                *v1109++ = v1128;
              }
            }
          }
          v1033 = v1109;
LABEL_1256:
          ++v1106;
          v1109 = v1033;
          if (v1106 == v1104)
            goto LABEL_1285;
        }
      }
    }
    v994 = *(_DWORD *)(v984 + 324);
    pixelBuffer = v991;
    if (v994 == 1)
    {
      v2475 = *(float *)(v984 + 312);
      CVPixelBufferLockBaseAddress(v991, 1uLL);
      v1048 = CVPixelBufferGetWidth(v991);
      v1049 = CVPixelBufferGetHeight(v991);
      v1050 = CVPixelBufferGetBytesPerRow(v991);
      v1051 = (char *)CVPixelBufferGetBaseAddress(v991);
      v1053 = v2428;
      if (!(_DWORD)v2428)
        goto LABEL_1284;
      v1054 = v1051;
      v1055 = 0;
      *(float *)v1052.i32 = v990 / v2475;
      keye = (float32x4_t)vdupq_lane_s32(v1052, 0);
      v1056 = (float)(v1048 - 1);
      v1057 = (float)(v1049 - 1);
      v1058 = v989;
      while (1)
      {
        v1059 = (3 * v1055);
        __p[0] = (void *)(*(_QWORD *)(v987 + 168) + 4 * v1059);
        __p[1] = (void *)((v1059 << 32) | 3);
        *(_QWORD *)v2592 = buf;
        *(_QWORD *)&v2592[8] = __p;
        *(_QWORD *)&v2599[4] = 0;
        *(_DWORD *)&v2599[12] = 0;
        sub_1C98F2EA4((float *)&v2599[4], (uint64_t)v2592);
        memptr[0] = (void *)vadd_f32(*(float32x2_t *)&v2599[4], *(float32x2_t *)&buf[36]);
        v1060 = *(float *)&v2599[12] + *(float *)&buf[44];
        *(float *)&memptr[1] = *(float *)&v2599[12] + *(float *)&buf[44];
        *(_QWORD *)v2599 = v2608;
        *(_QWORD *)&v2599[8] = memptr;
        *(_QWORD *)v2592 = 0;
        *(_DWORD *)&v2592[8] = 0;
        sub_1C98A266C((float *)v2592, (float **)v2599);
        *(float *)v1062.i32 = *(float *)v2592 / *(float *)&v2592[8];
        if ((float)(*(float *)v2592 / *(float *)&v2592[8]) >= 0.0)
        {
          *(float *)v1061.i32 = *(float *)&v2592[4] / *(float *)&v2592[8];
          v1063 = (float)(*(float *)&v2592[4] / *(float *)&v2592[8]) >= 0.0 && *(float *)v1062.i32 < v1056;
          if (v1063 && *(float *)v1061.i32 < v1057)
          {
            v1065 = 2 * (int)*(float *)v1062.i32;
            v1066 = (int)*(float *)v1061.i32 * v1050;
            v1067 = v1066 + v1065;
            v1068 = (__int16 *)&v1054[v1066 + v1065 + 2];
            v1069 = v1050 + v1066;
            v1070.i16[0] = *(_WORD *)&v1054[v1067];
            v1070.i16[1] = *v1068;
            v1070.i16[2] = *(_WORD *)&v1054[v1069 + v1065];
            v1070.i16[3] = *(_WORD *)&v1054[v1069 + v1065 + 2];
            v1071 = vcvtq_f32_u32(vmovl_u16(v1070));
            v1072 = vmulq_n_f32((float32x4_t)vandq_s8((int8x16_t)v1071, (int8x16_t)vcgeq_f32(keye, v1071)), v2475);
            *(float *)v1062.i32 = *(float *)v1062.i32 - (float)(int)*(float *)v1062.i32;
            *(float *)v1061.i32 = *(float *)v1061.i32 - (float)(int)*(float *)v1061.i32;
            v1073.f32[0] = 1.0 - *(float *)v1062.i32;
            v1073.i32[1] = v1062.i32[0];
            v1073.f32[2] = 1.0 - *(float *)v1062.i32;
            v1073.i32[3] = v1062.i32[0];
            *(float *)v1062.i32 = 1.0 - *(float *)v1061.i32;
            *(int32x2_t *)v1074.f32 = vdup_lane_s32(v1062, 0);
            *(int32x2_t *)&v1074.u32[2] = vdup_lane_s32(v1061, 0);
            v1075 = (float32x4_t)vandq_s8((int8x16_t)vmulq_f32(v1073, v1074), (int8x16_t)vcgtzq_f32(v1072));
            v1076 = vadd_f32(*(float32x2_t *)v1075.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v1075, (int8x16_t)v1075, 8uLL));
            if (vaddv_f32(v1076) != 0.0)
            {
              v1077 = (int8x16_t)vmulq_f32(v1072, v1075);
              *(float32x2_t *)v1077.i8 = vadd_f32(*(float32x2_t *)v1077.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v1077, v1077, 8uLL));
              v1078 = vdiv_f32(vadd_f32(*(float32x2_t *)v1077.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v1077.i8, 1)), vadd_f32(v1076, (float32x2_t)vdup_lane_s32((int32x2_t)v1076, 1))).f32[0]/ v1060;
              if (v1058 >= v2490)
              {
                v1079 = v987;
                v1080 = v1058 - v989;
                v1081 = v1080 + 1;
                if ((unint64_t)(v1080 + 1) >> 62)
                  goto LABEL_2805;
                if (((char *)v2490 - (char *)v989) >> 1 > v1081)
                  v1081 = ((char *)v2490 - (char *)v989) >> 1;
                v1082 = 0x3FFFFFFFFFFFFFFFLL;
                if ((unint64_t)((char *)v2490 - (char *)v989) < 0x7FFFFFFFFFFFFFFCLL)
                  v1082 = v1081;
                v2491 = v1082;
                if (v1082)
                {
                  if (v1082 >> 62)
                    goto LABEL_2804;
                  v1083 = operator new(4 * v1082);
                }
                else
                {
                  v1083 = 0;
                }
                v1084 = (float *)&v1083[4 * v1080];
                *v1084 = v1078;
                v1033 = v1084 + 1;
                if (v1058 == v989)
                {
                  v987 = v1079;
                  v1087 = v2491;
                }
                else
                {
                  v1085 = (char *)(v1058 - 1) - (char *)v989;
                  if (v1085 < 0xBC
                    || &v1083[(char *)v1058 - (char *)v989 - 4 - (v1085 & 0xFFFFFFFFFFFFFFFCLL)] > &v1083[(char *)v1058 - (char *)v989 - 4]
                    || (float *)((char *)v1058 - (v1085 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v1058 - 1
                    || (unint64_t)((char *)v989 - v1083) < 0x20)
                  {
                    v1086 = v1058;
                    v987 = v1079;
                    v1087 = v2491;
                    goto LABEL_1220;
                  }
                  v1089 = (v1085 >> 2) + 1;
                  v1086 = &v1058[-(v1089 & 0x7FFFFFFFFFFFFFF8)];
                  v1090 = &v1083[4 * v1080 - 16];
                  v1091 = v1058 - 4;
                  v1092 = v1089 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v1093 = *(_OWORD *)v1091;
                    *(v1090 - 1) = *((_OWORD *)v1091 - 1);
                    *v1090 = v1093;
                    v1090 -= 2;
                    v1091 -= 8;
                    v1092 -= 8;
                  }
                  while (v1092);
                  v1084 -= v1089 & 0x7FFFFFFFFFFFFFF8;
                  _ZF = v1089 == (v1089 & 0x7FFFFFFFFFFFFFF8);
                  v987 = v1079;
                  v1087 = v2491;
                  if (!_ZF)
                  {
                    do
                    {
LABEL_1220:
                      v1088 = *((_DWORD *)v1086-- - 1);
                      *((_DWORD *)v1084-- - 1) = v1088;
                    }
                    while (v1086 != v989);
                  }
                }
                v2490 = (float *)&v1083[4 * v1087];
                if (v989)
                  operator delete(v989);
                v989 = v1084;
                v1053 = v2428;
                goto LABEL_1206;
              }
              *v1058++ = v1078;
            }
          }
        }
        v1033 = v1058;
LABEL_1206:
        ++v1055;
        v1058 = v1033;
        if (v1055 == v1053)
          goto LABEL_1285;
      }
    }
    if (v994 != 2)
      goto LABEL_2806;
    CVPixelBufferLockBaseAddress(v991, 1uLL);
    v995 = CVPixelBufferGetWidth(v991);
    v996 = CVPixelBufferGetHeight(v991);
    v997 = CVPixelBufferGetBytesPerRow(v991);
    v998 = (char *)CVPixelBufferGetBaseAddress(v991);
    *(float *)v999.i32 = *(float *)(v984 + 312) * 0.001;
    *(float *)v1000.i32 = *(float *)(v984 + 316) * 0.001;
    keyc = v1000;
    v2473 = v999;
    v1001 = (float)((float)(1.0 / v990) - *(float *)v1000.i32) / *(float *)v999.i32;
    *(float *)v1002.i32 = nextafterf((float)*(int *)(v984 + 320), 0.0);
    if (v1001 >= *(float *)v1002.i32)
      v1004 = *(float *)v1002.i32;
    else
      v1004 = v1001;
    if (*(float *)v2473.i32 <= 0.0)
      *(float *)v1003.i32 = 0.0;
    else
      *(float *)v1003.i32 = v1001;
    if (*(float *)v2473.i32 <= 0.0)
      *(float *)v1002.i32 = v1004;
    v1005 = v2428;
    if ((_DWORD)v2428)
    {
      v1006 = 0;
      keyd = (float32x4_t)vdupq_lane_s32(keyc, 0);
      v2474 = (float32x4_t)vdupq_lane_s32(v2473, 0);
      v2433 = (float32x4_t)vdupq_lane_s32(v1003, 0);
      v2438 = (float32x4_t)vdupq_lane_s32(v1002, 0);
      v1007 = (float)(v995 - 1);
      v1008 = v989;
      v1009 = (float)(v996 - 1);
      v2415 = v997;
      while (1)
      {
        v1010 = (3 * v1006);
        __p[0] = (void *)(*(_QWORD *)(v987 + 168) + 4 * v1010);
        __p[1] = (void *)((v1010 << 32) | 3);
        *(_QWORD *)v2592 = buf;
        *(_QWORD *)&v2592[8] = __p;
        *(_QWORD *)&v2599[4] = 0;
        *(_DWORD *)&v2599[12] = 0;
        sub_1C98F2EA4((float *)&v2599[4], (uint64_t)v2592);
        memptr[0] = (void *)vadd_f32(*(float32x2_t *)&v2599[4], *(float32x2_t *)&buf[36]);
        v1011 = *(float *)&v2599[12] + *(float *)&buf[44];
        *(float *)&memptr[1] = *(float *)&v2599[12] + *(float *)&buf[44];
        *(_QWORD *)v2599 = v2608;
        *(_QWORD *)&v2599[8] = memptr;
        *(_QWORD *)v2592 = 0;
        *(_DWORD *)&v2592[8] = 0;
        sub_1C98A266C((float *)v2592, (float **)v2599);
        *(float *)v1013.i32 = *(float *)v2592 / *(float *)&v2592[8];
        if ((float)(*(float *)v2592 / *(float *)&v2592[8]) >= 0.0)
        {
          *(float *)v1012.i32 = *(float *)&v2592[4] / *(float *)&v2592[8];
          v1014 = (float)(*(float *)&v2592[4] / *(float *)&v2592[8]) >= 0.0 && *(float *)v1013.i32 < v1007;
          if (v1014 && *(float *)v1012.i32 < v1009)
          {
            v1016 = 2 * (int)*(float *)v1013.i32;
            v1017 = (int)*(float *)v1012.i32 * v997;
            v1018 = v1017 + v1016;
            v1019 = (__int16 *)&v998[v1017 + v1016 + 2];
            v1020 = v997 + v1017;
            v1021.i16[0] = *(_WORD *)&v998[v1018];
            v1021.i16[1] = *v1019;
            v1021.i16[2] = *(_WORD *)&v998[v1020 + v1016];
            v1021.i16[3] = *(_WORD *)&v998[v1020 + v1016 + 2];
            v1022 = vcvtq_f32_u32(vmovl_u16(v1021));
            v1023 = vandq_s8((int8x16_t)vcgeq_f32(v2438, v1022), (int8x16_t)vcgeq_f32(v1022, v2433));
            v1024 = vmlaq_f32(keyd, v2474, v1022);
            v1025 = vrecpeq_f32(v1024);
            v1026 = vmulq_f32(v1025, vrecpsq_f32(v1024, v1025));
            v1027 = (float32x4_t)vandq_s8((int8x16_t)vmulq_f32(v1026, vrecpsq_f32(v1024, v1026)), v1023);
            *(float *)v1013.i32 = *(float *)v1013.i32 - (float)(int)*(float *)v1013.i32;
            *(float *)v1012.i32 = *(float *)v1012.i32 - (float)(int)*(float *)v1012.i32;
            v1024.f32[0] = 1.0 - *(float *)v1013.i32;
            v1024.i32[1] = v1013.i32[0];
            v1024.f32[2] = 1.0 - *(float *)v1013.i32;
            v1024.i32[3] = v1013.i32[0];
            *(float *)v1013.i32 = 1.0 - *(float *)v1012.i32;
            *(int32x2_t *)v1028.f32 = vdup_lane_s32(v1013, 0);
            *(int32x2_t *)&v1028.u32[2] = vdup_lane_s32(v1012, 0);
            v1029 = (float32x4_t)vandq_s8((int8x16_t)vmulq_f32(v1024, v1028), (int8x16_t)vcgtzq_f32(v1027));
            v1030 = vadd_f32(*(float32x2_t *)v1029.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v1029, (int8x16_t)v1029, 8uLL));
            if (vaddv_f32(v1030) != 0.0)
            {
              v1031 = (int8x16_t)vmulq_f32(v1027, v1029);
              *(float32x2_t *)v1031.i8 = vadd_f32(*(float32x2_t *)v1031.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v1031, v1031, 8uLL));
              v1032 = vdiv_f32(vadd_f32(*(float32x2_t *)v1031.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v1031.i8, 1)), vadd_f32(v1030, (float32x2_t)vdup_lane_s32((int32x2_t)v1030, 1))).f32[0]/ v1011;
              if (v1008 >= v2490)
              {
                v1034 = v987;
                v1035 = v1008 - v989;
                v1036 = v1035 + 1;
                if ((unint64_t)(v1035 + 1) >> 62)
                  goto LABEL_2805;
                if (((char *)v2490 - (char *)v989) >> 1 > v1036)
                  v1036 = ((char *)v2490 - (char *)v989) >> 1;
                if ((unint64_t)((char *)v2490 - (char *)v989) >= 0x7FFFFFFFFFFFFFFCLL)
                  v1037 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v1037 = v1036;
                if (v1037)
                {
                  if (v1037 >> 62)
                    goto LABEL_2804;
                  v1038 = operator new(4 * v1037);
                }
                else
                {
                  v1038 = 0;
                }
                v1039 = (float *)&v1038[4 * v1035];
                *v1039 = v1032;
                v1033 = v1039 + 1;
                if (v1008 == v989)
                {
                  v987 = v1034;
                }
                else
                {
                  v1040 = (char *)(v1008 - 1) - (char *)v989;
                  if (v1040 < 0xBC
                    || &v1038[(char *)v1008 - (char *)v989 - 4 - (v1040 & 0xFFFFFFFFFFFFFFFCLL)] > &v1038[(char *)v1008 - (char *)v989 - 4]
                    || (float *)((char *)v1008 - (v1040 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v1008 - 1
                    || (unint64_t)((char *)v989 - v1038) < 0x20)
                  {
                    v1041 = v1008;
                    v987 = v1034;
                  }
                  else
                  {
                    v1043 = (v1040 >> 2) + 1;
                    v1041 = &v1008[-(v1043 & 0x7FFFFFFFFFFFFFF8)];
                    v1044 = &v1038[4 * v1035 - 16];
                    v1045 = v1008 - 4;
                    v1046 = v1043 & 0x7FFFFFFFFFFFFFF8;
                    do
                    {
                      v1047 = *(_OWORD *)v1045;
                      *(v1044 - 1) = *((_OWORD *)v1045 - 1);
                      *v1044 = v1047;
                      v1044 -= 2;
                      v1045 -= 8;
                      v1046 -= 8;
                    }
                    while (v1046);
                    v1039 -= v1043 & 0x7FFFFFFFFFFFFFF8;
                    v987 = v1034;
                    if (v1043 == (v1043 & 0x7FFFFFFFFFFFFFF8))
                      goto LABEL_1181;
                  }
                  do
                  {
                    v1042 = *((_DWORD *)v1041-- - 1);
                    *((_DWORD *)v1039-- - 1) = v1042;
                  }
                  while (v1041 != v989);
                }
LABEL_1181:
                v2490 = (float *)&v1038[4 * v1037];
                v997 = v2415;
                if (v989)
                  operator delete(v989);
                v989 = v1039;
                v1005 = v2428;
                goto LABEL_1163;
              }
              *v1008++ = v1032;
            }
          }
        }
        v1033 = v1008;
LABEL_1163:
        ++v1006;
        v1008 = v1033;
        if (v1006 == v1005)
          goto LABEL_1285;
      }
    }
LABEL_1284:
    v1033 = v989;
LABEL_1285:
    CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
LABEL_1286:
    v1144 = *(_DWORD *)(v987 + 184);
    v1145 = (unint64_t)((char *)v1033 - (char *)v989) >> 2;
    if ((int)v1145 < 10 || (v1146 = (float)(int)v1145, (float)((float)v1144 * 0.75) > (float)(int)v1145))
    {
      v1155 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
      if ((v1155 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
      {
        qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
        __cxa_guard_release(&qword_1ED52ACD0);
      }
      v1156 = qword_1ED52ACE0;
      if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)v2608 = 67109376;
        *(_DWORD *)&v2608[4] = (unint64_t)((char *)v1033 - (char *)v989) >> 2;
        *(_WORD *)&v2608[8] = 1024;
        *(_DWORD *)&v2608[10] = v1144;
        v1157 = v1156;
        v1158 = "skipping pose refinement: low number of valid depth pixels (%d/%d)";
        v1159 = 14;
        goto LABEL_1315;
      }
LABEL_1316:
      v1192 = 0;
      v1193 = 0;
      if (!v989)
        goto LABEL_1318;
LABEL_1317:
      operator delete(v989);
      goto LABEL_1318;
    }
    v1147 = (int)(float)(v1146 * 0.25);
    v1148 = &v989[v1147];
    if (v1148 != v1033)
      sub_1C98F2F80(v989, &v989[v1147], v1033);
    v1149 = (int)(float)(v1146 * 0.75);
    v1150 = &v989[v1149];
    if (v1150 != v1033)
      sub_1C98F2F80(v1148 + 1, v1150, v1033);
    v1151 = v1149 - v1147 + 1;
    if (v1149 - v1147 < 0)
    {
      v1160 = 0.0;
      v1161 = 0.0 / (double)v1151;
    }
    else
    {
      v1152 = (v1149 - v1147 + 1);
      if (v1152 <= 7)
      {
        v1153 = 0;
        v1154 = 0.0;
        goto LABEL_1302;
      }
      v1153 = v1152 & 0xFFFFFFF8;
      v1162 = (float32x4_t *)&v989[v1147 + 4];
      v1154 = 0.0;
      v1163 = v1153;
      do
      {
        v1164 = v1162[-1];
        v1165 = vcvt_hight_f64_f32(v1164);
        v1166 = vcvtq_f64_f32(*(float32x2_t *)v1164.f32);
        v1167 = vcvt_hight_f64_f32(*v1162);
        v1168 = vcvtq_f64_f32(*(float32x2_t *)v1162->f32);
        v1154 = v1154
              + v1166.f64[0]
              + v1166.f64[1]
              + v1165.f64[0]
              + v1165.f64[1]
              + v1168.f64[0]
              + v1168.f64[1]
              + v1167.f64[0]
              + v1167.f64[1];
        v1162 += 2;
        v1163 -= 8;
      }
      while (v1163);
      if (v1153 != v1152)
      {
LABEL_1302:
        v1169 = v1152 - v1153;
        v1170 = &v989[v1153 + v1147];
        do
        {
          v1171 = *v1170++;
          v1154 = v1154 + v1171;
          --v1169;
        }
        while (v1169);
      }
      v1161 = v1154 / (double)v1151;
      if (v1152 <= 7)
      {
        v1172 = 0;
        v1160 = 0.0;
        goto LABEL_1309;
      }
      v1172 = v1152 & 0xFFFFFFF8;
      v1173 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v1161, 0);
      v1174 = (float32x2_t *)&v989[v1147 + 4];
      v1160 = 0.0;
      v1175 = v1172;
      do
      {
        v1176 = *(float32x4_t *)v1174[-2].f32;
        v1177 = vcvt_hight_f64_f32(v1176);
        v1178 = vsubq_f64(vcvtq_f64_f32(*(float32x2_t *)v1176.f32), v1173);
        v1179 = vsubq_f64(v1177, v1173);
        v1180 = vsubq_f64(vcvtq_f64_f32(*v1174), v1173);
        v1181 = vsubq_f64(vcvt_hight_f64_f32(*(float32x4_t *)v1174->f32), v1173);
        v1182 = vmulq_f64(v1179, v1179);
        v1183 = vmulq_f64(v1178, v1178);
        v1184 = vmulq_f64(v1181, v1181);
        v1185 = vmulq_f64(v1180, v1180);
        v1160 = v1160
              + v1183.f64[0]
              + v1183.f64[1]
              + v1182.f64[0]
              + v1182.f64[1]
              + v1185.f64[0]
              + v1185.f64[1]
              + v1184.f64[0]
              + v1184.f64[1];
        v1174 += 4;
        v1175 -= 8;
      }
      while (v1175);
      if (v1172 != v1152)
      {
LABEL_1309:
        v1186 = v1152 - v1172;
        v1187 = &v989[v1172 + v1147];
        do
        {
          v1188 = *v1187++;
          v1160 = v1160 + (v1188 - v1161) * (v1188 - v1161);
          --v1186;
        }
        while (v1186);
      }
    }
    v1189 = sqrt(v1160 / (double)(v1149 - v1147));
    if (v1189 > 0.05)
    {
      v1190 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
      if ((v1190 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
      {
        qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
        __cxa_guard_release(&qword_1ED52ACD0);
      }
      v1191 = qword_1ED52ACE0;
      if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)v2608 = 134217984;
        *(double *)&v2608[4] = v1189;
        v1157 = v1191;
        v1158 = "skipping pose refinement: the scaling ratios have a high variance (stddev=%g)";
        v1159 = 12;
LABEL_1315:
        _os_log_impl(&dword_1C9870000, v1157, OS_LOG_TYPE_INFO, v1158, v2608, v1159);
      }
      goto LABEL_1316;
    }
    *(float *)&v1222 = v1161;
    v1193 = v1222;
    v1192 = 0x100000000;
    if (v989)
      goto LABEL_1317;
LABEL_1318:
    v980 = v1193 | v1192;
LABEL_1319:
    kdebug_trace();
    v981 = *a2;
LABEL_1320:
    v1194 = *(_BYTE **)(v981 + 8);
    if (v1194[3])
      v1195 = v2536[20];
    else
      v1195 = 0.0;
    v2439 = v980;
    if (v1194[4])
    {
      v1196 = v2536;
      v1197 = *((float *)&v2534 + 1);
      v1198 = v2535;
      v1199 = sinval;
      v1200 = v2532;
      v1201 = *(float *)&v2534;
      v1202 = v2533;
      v1203 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
      if ((v1203 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
      {
        sub_1C98CFF14();
        __cxa_guard_release(&qword_1ED52ACD8);
      }
      v1204 = 1.0 / sqrtf((float)((float)(v1201 * v1201) + (float)(v1197 * v1197)) + (float)(v1198 * v1198));
      if (cosf((float)(*(float *)(qword_1ED52ACB8 + 220) * 3.1416) / 180.0) >= (float)-(float)((float)(v1202 * (float)(v1198 * v1204))
                                                                                              + (float)((float)(v1199 * (float)(v1201 * v1204)) + (float)(v1200 * (float)(v1197 * v1204)))))
        v1195 = 0.0;
      v1205 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
      if ((v1205 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
      {
        sub_1C98CFF14();
        __cxa_guard_release(&qword_1ED52ACD8);
      }
      v1206 = *(float *)(qword_1ED52ACB8 + 224);
      v1207 = (float *)*((_QWORD *)v1196 + 3);
      v1208 = 0.5;
      if (v1207[40] > v1206 || v1207[41] > v1206 || v1207[42] > v1206 || v1207[43] > v1206)
        v1195 = 0.0;
      v981 = *a2;
      v1194 = *(_BYTE **)(*a2 + 8);
    }
    else
    {
      v1208 = 0.5;
    }
    v1209 = v1194[8];
    v2434 = *(_QWORD *)(v981 + 16);
    keyg = (uint64_t *)v2538;
    v1210 = *(_QWORD *)v2538;
    v1211 = *(_QWORD *)(*(_QWORD *)v2538 + 152);
    if (!v1211)
    {
      sub_1C98EDF94(buf);
      v1212 = *(_QWORD *)(v1210 + 152);
      *(_QWORD *)(v1210 + 152) = *(_QWORD *)buf;
      if (v1212)
      {
        v1213 = sub_1C98EAD50(v1212);
        MEMORY[0x1CAA44AFC](v1213, 0x10E0C4016A603E8);
      }
      v1211 = *(_QWORD *)(*keyg + 152);
    }
    *(_DWORD *)&buf[28] = 0;
    *(_DWORD *)&buf[12] = 0;
    *(_QWORD *)&buf[20] = 0;
    *(_QWORD *)&buf[4] = 0;
    *(_DWORD *)buf = 1065353216;
    *(_DWORD *)&buf[16] = 1065353216;
    *(_DWORD *)&buf[32] = 1065353216;
    *(_QWORD *)&buf[36] = 0;
    *(_DWORD *)&buf[44] = 0;
    if (*(int *)(v1211 + 128) <= 1)
    {
      *(_OWORD *)buf = v2514;
      *(_OWORD *)&buf[16] = v2515;
      *(_DWORD *)&buf[32] = v2516;
      v1214 = keyg;
      goto LABEL_1445;
    }
    v2477 = v1209;
    v1215 = *(_QWORD *)(v1211 + 168);
    if (v1215)
      goto LABEL_1395;
    v1216 = *(uint64_t **)(v1211 + 144);
    v1217 = *(uint64_t **)(v1211 + 152);
    v1218 = v1217 - v1216;
    v1219 = 113 * v1218 - 1;
    if (v1217 == v1216)
      v1219 = 0;
    if ((unint64_t)(v1219 - *(_QWORD *)(v1211 + 176)) >= 0x71)
    {
      *(_QWORD *)(v1211 + 168) = 113;
      *(_QWORD *)v2608 = *(v1217 - 1);
      *(_QWORD *)(v1211 + 152) = v1217 - 1;
      sub_1C98EA8C8((void **)(v1211 + 136), v2608);
      goto LABEL_1394;
    }
    v1220 = *(char **)(v1211 + 160);
    v1221 = *(char **)(v1211 + 136);
    if (v1218 < (v1220 - v1221) >> 3)
    {
      if (v1216 == (uint64_t *)v1221)
      {
        *(_QWORD *)v2608 = operator new(0xFE4uLL);
        sub_1C98EAA6C((char **)(v1211 + 136), v2608);
        v1227 = *(_QWORD *)(v1211 + 152);
        *(_QWORD *)v2608 = *(_QWORD *)(v1227 - 8);
        *(_QWORD *)(v1211 + 152) = v1227 - 8;
      }
      else
      {
        *(_QWORD *)v2608 = operator new(0xFE4uLL);
      }
      sub_1C98EA8C8((void **)(v1211 + 136), v2608);
      if (*(_QWORD *)(v1211 + 152) - *(_QWORD *)(v1211 + 144) == 8)
        *(_QWORD *)(v1211 + 168) = 56;
      else
        *(_QWORD *)(v1211 + 168) += 113;
      goto LABEL_1394;
    }
    if (v1220 == v1221)
      v1223 = 1;
    else
      v1223 = (v1220 - v1221) >> 2;
    if (v1223 >> 61)
      goto LABEL_2804;
    v1224 = (char *)operator new(8 * v1223);
    v1225 = operator new(0xFE4uLL);
    if (v1223)
    {
      v1226 = &v1224[8 * v1223];
    }
    else
    {
      v1228 = (char *)operator new(8uLL);
      v1226 = v1228 + 8;
      operator delete(v1224);
      v1216 = *(uint64_t **)(v1211 + 144);
      v1217 = *(uint64_t **)(v1211 + 152);
      v1224 = v1228;
    }
    *(_QWORD *)v1224 = v1225;
    v1229 = v1224 + 8;
    v1230 = v1224;
    if (v1216 != v1217)
    {
      do
      {
        if (v1229 == v1226)
        {
          if (v1230 <= v1224)
          {
            v1242 = (v1229 - v1224) >> 2;
            if (v1229 == v1224)
              v1242 = 1;
            if (v1242 >> 61)
              goto LABEL_2804;
            v1243 = v1242 >> 2;
            v2493 = 8 * v1242;
            v1244 = (char *)operator new(8 * v1242);
            v1245 = v1244;
            v1233 = &v1244[8 * v1243];
            v1234 = v1233;
            v1246 = v1229 - v1230;
            if (v1229 != v1230)
            {
              v1234 = &v1233[v1246 & 0xFFFFFFFFFFFFFFF8];
              v1247 = v1246 - 8;
              if (v1247 >= 0x38)
              {
                if ((unint64_t)(&v1244[8 * v1243] - v1230) < 0x20)
                {
                  v1248 = &v1244[8 * v1243];
                  goto LABEL_1387;
                }
                v1249 = (v1247 >> 3) + 1;
                v1250 = 8 * (v1249 & 0x3FFFFFFFFFFFFFFCLL);
                v1248 = &v1233[v1250];
                v1251 = (__int128 *)(v1230 + 16);
                v1252 = &v1244[8 * v1243 + 16];
                v1253 = v1249 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v1254 = *v1251;
                  *((_OWORD *)v1252 - 1) = *(v1251 - 1);
                  *(_OWORD *)v1252 = v1254;
                  v1251 += 2;
                  v1252 += 32;
                  v1253 -= 4;
                }
                while (v1253);
                if (v1249 != (v1249 & 0x3FFFFFFFFFFFFFFCLL))
                {
                  v1230 += v1250;
                  goto LABEL_1387;
                }
              }
              else
              {
                v1248 = &v1244[8 * v1243];
                do
                {
LABEL_1387:
                  v1255 = *(_QWORD *)v1230;
                  v1230 += 8;
                  *(_QWORD *)v1248 = v1255;
                  v1248 += 8;
                }
                while (v1248 != v1234);
              }
            }
            v1229 = &v1244[v2493];
            if (v1224)
              operator delete(v1224);
            v1224 = v1245;
            goto LABEL_1366;
          }
          v1236 = (v1230 - v1224) >> 3;
          if (v1236 >= -1)
            v1237 = v1236 + 1;
          else
            v1237 = v1236 + 2;
          v1238 = v1237 >> 1;
          v1239 = &v1230[-8 * (v1237 >> 1)];
          v1240 = v1229;
          if (v1229 != v1230)
          {
            memmove(v1239, v1230, v1229 - v1230);
            v1240 = v1230;
          }
          v1241 = -v1238;
          v1234 = &v1239[v1229 - v1230];
          v1233 = &v1240[8 * v1241];
        }
        else
        {
          v1233 = v1230;
          v1234 = v1229;
          v1229 = v1226;
        }
LABEL_1366:
        v1235 = *v1216++;
        *(_QWORD *)v1234 = v1235;
        v1230 = v1233;
        v1226 = v1229;
        v1229 = v1234 + 8;
      }
      while (v1216 != *(uint64_t **)(v1211 + 152));
    }
    v1231 = *(void **)(v1211 + 136);
    *(_QWORD *)(v1211 + 136) = v1224;
    *(_QWORD *)(v1211 + 144) = v1230;
    *(_QWORD *)(v1211 + 152) = v1229;
    *(_QWORD *)(v1211 + 160) = v1226;
    if (v1229 - v1230 == 8)
      v1232 = 56;
    else
      v1232 = *(_QWORD *)(v1211 + 168) + 113;
    *(_QWORD *)(v1211 + 168) = v1232;
    if (v1231)
      operator delete(v1231);
LABEL_1394:
    v1215 = *(_QWORD *)(v1211 + 168);
LABEL_1395:
    v1256 = *(_QWORD *)(v1211 + 144);
    v1257 = (_QWORD *)(v1256 + 8 * (v1215 / 0x71));
    v1258 = *v1257 + 36 * (v1215 % 0x71);
    if (*(_QWORD *)(v1211 + 152) == v1256)
      v1258 = 0;
    if (v1258 == *v1257)
      v1258 = *(v1257 - 1) + 4068;
    v1259 = v2514;
    v1260 = v2515;
    *(_DWORD *)(v1258 - 4) = v2516;
    *(_OWORD *)(v1258 - 20) = v1260;
    *(_OWORD *)(v1258 - 36) = v1259;
    v1261 = *(_QWORD *)(v1211 + 176) + 1;
    --*(_QWORD *)(v1211 + 168);
    *(_QWORD *)(v1211 + 176) = v1261;
    v1262 = (int)v1261;
    v1264 = *(_QWORD *)(v1211 + 184);
    v1263 = *(char **)(v1211 + 192);
    v1265 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v1263[-v1264] >> 2);
    v1266 = (int)v1261 - v1265;
    if ((int)v1261 <= v1265)
    {
      if ((int)v1261 < v1265)
      {
        v1263 = (char *)(v1264 + 12 * (int)v1261);
        *(_QWORD *)(v1211 + 192) = v1263;
      }
      goto LABEL_1417;
    }
    v1267 = *(_QWORD *)(v1211 + 200);
    if (0xAAAAAAAAAAAAAAABLL * ((v1267 - (uint64_t)v1263) >> 2) >= v1266)
    {
      bzero(*(void **)(v1211 + 192), 12 * ((12 * v1266 - 12) / 0xC) + 12);
      v1276 = &v1263[12 * ((12 * v1266 - 12) / 0xC) + 12];
      *(_QWORD *)(v1211 + 192) = v1276;
      goto LABEL_1416;
    }
    if (v1261 << 32 < 0)
      goto LABEL_2805;
    v1268 = 0xAAAAAAAAAAAAAAABLL * ((v1267 - v1264) >> 2);
    if (2 * v1268 > (int)v1261)
      v1262 = 2 * v1268;
    if (v1268 >= 0xAAAAAAAAAAAAAAALL)
      v1262 = 0x1555555555555555;
    if (v1262 > 0x1555555555555555)
      goto LABEL_2804;
    v1269 = 12 * v1262;
    v1270 = (char *)operator new(12 * v1262);
    v1271 = &v1270[4 * ((uint64_t)&v1263[-v1264] >> 2)];
    v1272 = 12 * ((12 * v1266 - 12) / 0xC) + 12;
    bzero(v1271, v1272);
    v1273 = v1271;
    if (v1263 != (char *)v1264)
    {
      do
      {
        v1274 = *(_QWORD *)(v1263 - 12);
        v1263 -= 12;
        v1275 = *((_DWORD *)v1263 + 2);
        *(_QWORD *)(v1273 - 12) = v1274;
        v1273 -= 12;
        *((_DWORD *)v1273 + 2) = v1275;
      }
      while (v1263 != (char *)v1264);
      v1263 = *(char **)(v1211 + 184);
    }
    v1276 = &v1271[v1272];
    *(_QWORD *)(v1211 + 184) = v1273;
    *(_QWORD *)(v1211 + 192) = &v1271[v1272];
    *(_QWORD *)(v1211 + 200) = &v1270[v1269];
    if (v1263)
    {
      operator delete(v1263);
      v1276 = *(char **)(v1211 + 192);
    }
LABEL_1416:
    v1264 = *(_QWORD *)(v1211 + 184);
    v1263 = v1276;
LABEL_1417:
    if ((int)(-1431655765 * ((unint64_t)&v1263[-v1264] >> 2)) >= 1)
    {
      v1277 = 0;
      v1278 = 0;
      do
      {
        v1279 = v1278 + *(_QWORD *)(v1211 + 168);
        v1280 = *(_QWORD *)(*(_QWORD *)(v1211 + 144) + 8 * (v1279 / 0x71));
        __p[0] = &v2514;
        *(_QWORD *)v2599 = v1280 + 36 * (v1279 % 0x71);
        *(_QWORD *)&v2599[8] = __p;
        memset(v2608, 0, sizeof(v2608));
        sub_1C98CF684((uint64_t)v2608, (uint64_t)v2599);
        *(_DWORD *)&v2592[8] = 0;
        *(_QWORD *)v2592 = 0;
        sub_1C98CF850((float32x2_t *)v2608, (float *)v2592);
        v1281 = *(_QWORD *)(v1211 + 184) + v1277;
        *(_QWORD *)v1281 = *(_QWORD *)v2592;
        *(_DWORD *)(v1281 + 8) = *(_DWORD *)&v2592[8];
        ++v1278;
        v1264 = *(_QWORD *)(v1211 + 184);
        v1277 += 12;
      }
      while (v1278 < (int)(-1431655765 * ((unint64_t)(*(_QWORD *)(v1211 + 192) - v1264) >> 2)));
    }
    v1282 = 0.0;
    v1283 = 0.0;
    if ((int)v1261 >= 1)
    {
      v1284 = v1261;
      v1285 = (float *)(v1264 + 8);
      do
      {
        v1286 = (float)(*(v1285 - 2) * *(v1285 - 2)) + (float)(*(v1285 - 1) * *(v1285 - 1));
        v1287 = *v1285;
        v1285 += 3;
        v1288 = sqrtf(v1286 + (float)(v1287 * v1287));
        if (v1283 < v1288)
          v1283 = v1288;
        --v1284;
      }
      while (v1284);
    }
    v1289 = expf(-fminf(v1283 * *(float *)(v1211 + 132), 10.0));
    v1214 = keyg;
    v1209 = v2477;
    if ((int)v1261 >= 1)
    {
      v1290 = 1.0;
      v1282 = 0.0;
      v1291 = v1261;
      do
      {
        v1282 = v1290 + v1282;
        v1290 = v1289 * v1290;
        --v1291;
      }
      while (v1291);
    }
    v1292 = 1.0 / v1282;
    v1293 = (float)(1.0 / v1282) * *(float *)v1264;
    _D16 = vmul_n_f32(*(float32x2_t *)(v1264 + 4), 1.0 / v1282);
    if ((int)v1261 <= 1)
    {
      v980 = v2439;
    }
    else
    {
      v1295 = v1261 - 1;
      v1296 = (_QWORD *)(v1264 + 16);
      v980 = v2439;
      do
      {
        v1292 = v1289 * v1292;
        v1293 = v1293 + (float)(v1292 * *((float *)v1296 - 1));
        v1297 = *(float32x2_t *)v1296;
        v1296 = (_QWORD *)((char *)v1296 + 12);
        _D16 = vadd_f32(_D16, vmul_n_f32(v1297, v1292));
        --v1295;
      }
      while (v1295);
    }
    v1298 = *(_QWORD *)(v1211 + 176);
    v1299 = *(_DWORD *)(v1211 + 128);
    v2494 = _D16;
    if (v1299 <= (int)v1298)
    {
      v1305 = *(_QWORD *)(v1211 + 152);
      do
      {
        v1306 = *(_QWORD *)(v1211 + 168);
        if (v1305 == *(_QWORD *)(v1211 + 144))
          v1307 = 0;
        else
          v1307 = 113 * ((v1305 - *(_QWORD *)(v1211 + 144)) >> 3) - 1;
        v1308 = v1298 - 1;
        *(_QWORD *)(v1211 + 176) = v1298 - 1;
        if ((unint64_t)(v1307 - (v1298 + v1306) + 1) >= 0xE2)
        {
          operator delete(*(void **)(v1305 - 8));
          _D16 = v2494;
          v1305 = *(_QWORD *)(v1211 + 152) - 8;
          *(_QWORD *)(v1211 + 152) = v1305;
          v1308 = *(_QWORD *)(v1211 + 176);
          v1299 = *(_DWORD *)(v1211 + 128);
        }
        v1298 = v1308;
      }
      while (v1299 <= (int)v1308);
    }
    v1300 = vmul_f32(_D16, _D16);
    v1301 = v1300.f32[1] + (float)(v1300.f32[0] + (float)(v1293 * v1293));
    if (v1301 >= 0.0061)
    {
      v1309 = sqrtf(v1301);
      v1310 = __sincosf_stret(v1309);
      cosval = v1310.__cosval;
      _D16 = v2494;
      v1303 = v1310.__sinval / v1309;
      v1302 = (float)(1.0 / v1301) * (float)(1.0 - v1310.__cosval);
    }
    else
    {
      v1302 = v1208 - (float)(v1301 * (float)((float)(v1301 / -720.0) + 0.041667));
      v1303 = 1.0 - (float)(v1301 * (float)(0.16667 - (float)(v1301 * (float)((float)(v1301 / -5040.0) + 0.0083333))));
      cosval = 1.0 - (float)(v1301 * v1302);
    }
    v1311 = v1293 * v1302;
    _S4 = vmuls_lane_f32(v1302, _D16, 1);
    v1313 = cosval + (float)((float)(v1293 * v1302) * v1293);
    v1314 = cosval;
    __asm { FMLA            S1, S4, V16.S[1] }
    *(_DWORD *)&v2608[32] = _S1;
    v1316 = (float)(v1293 * v1302) * _D16.f32[0];
    v1317 = vmuls_lane_f32(v1303, _D16, 1);
    *(float *)v2608 = v1313;
    *(float *)&v2608[4] = v1316 + v1317;
    v1318 = v1302 * _D16.f32[0];
    v1319 = vmlas_n_f32(v1314, v1318, _D16.f32[0]);
    v1320 = vmuls_lane_f32(v1311, _D16, 1);
    v1321 = vmuls_lane_f32(v1318, _D16, 1);
    v1322 = v1293 * v1303;
    v1323 = v1303 * _D16.f32[0];
    *(float *)&v2608[24] = v1323 + v1320;
    *(float *)&v2608[28] = v1321 - v1322;
    *(float *)&v2608[8] = v1320 - v1323;
    *(float *)&v2608[12] = v1316 - v1317;
    *(float *)&v2608[16] = v1319;
    *(float *)&v2608[20] = v1322 + v1321;
    *(_QWORD *)v2599 = v2608;
    *(_QWORD *)&v2599[8] = &v2514;
    memset(buf, 0, 36);
    sub_1C98A24C0((uint64_t)buf, (float **)v2599);
LABEL_1445:
    sub_1C98EB794((float32x2_t *)v2608, v1211 + 208, &v2517);
    *(_QWORD *)&buf[36] = *(_QWORD *)v2608;
    *(_DWORD *)&buf[44] = *(_DWORD *)&v2608[8];
    *(_OWORD *)v2608 = v2514;
    *(_OWORD *)&v2608[16] = v2515;
    *(_DWORD *)&v2608[32] = v2516;
    v2609 = v2517;
    v2610 = v2518;
    *(_OWORD *)v2599 = *(_OWORD *)buf;
    *(_OWORD *)&v2599[16] = *(_OWORD *)&buf[16];
    v2600 = *(_DWORD *)&buf[32];
    v2601 = *(float32x2_t *)&buf[36];
    v2602 = *(float *)&buf[44];
    if (v1209)
    {
      v1324 = *v1214;
      v1325 = HIDWORD(v980);
      if (HIDWORD(v980))
      {
        *(_DWORD *)(v1324 + 160) = v980;
LABEL_1451:
        *(_BYTE *)(v1324 + 164) = v1325;
      }
      else if (!*(_QWORD *)(v1324 + 128))
      {
        *(_DWORD *)(v1324 + 160) = 1065353216;
        LOBYTE(v1325) = 1;
        goto LABEL_1451;
      }
      v1326 = *(_QWORD *)(*v1214 + 152) + 528;
      LODWORD(__p[0]) = *(_DWORD *)(*v1214 + 160);
      v2478 = *(float *)__p;
      sub_1C98EBDB4((float *)v2592, v1326, (float *)__p);
      v2495 = *(float *)v2592;
      *(_DWORD *)v2592 = *(_DWORD *)&v2561[4];
      *(_DWORD *)&v2592[4] = *(_DWORD *)&v2561[16];
      *(_DWORD *)&v2592[8] = *(_DWORD *)&v2561[28];
      *(_DWORD *)&v2592[12] = *(_DWORD *)&v2561[8];
      *(_DWORD *)&v2592[16] = *(_DWORD *)&v2561[20];
      v2593 = *(_DWORD *)&v2561[32];
      v2598 = 0.0;
      v2597 = 0;
      v2594 = *(_DWORD *)&v2561[12];
      v2595 = *(_DWORD *)&v2561[24];
      v2596 = *(_DWORD *)&v2561[36];
      memptr[0] = v2592;
      __p[0] = memptr;
      __p[1] = &v2562;
      sub_1C98CC868((float *)&v2597, (uint64_t)__p);
      v2585 = 0x3F800000uLL;
      HIDWORD(__p[1]) = 0;
      *(void **)((char *)__p + 4) = 0;
      LODWORD(__p[0]) = 1065353216;
      v2586 = 1065353216;
      v2587 = 0;
      v2588 = 0.0;
      memptr[0] = &v2561[4];
      memptr[1] = &v2514;
      sub_1C98A24C0((uint64_t)__p, (float **)memptr);
      *(_QWORD *)&v2574 = &v2561[4];
      *((_QWORD *)&v2574 + 1) = &v2517;
      *(void **)((char *)memptr + 4) = 0;
      HIDWORD(memptr[1]) = 0;
      sub_1C98A266C((float *)memptr + 1, (float **)&v2574);
      v1327 = v2562;
      v2587 = vadd_f32(*(float32x2_t *)((char *)memptr + 4), v2562);
      v1328 = v2563;
      v2588 = *((float *)&memptr[1] + 1) + v2563;
      v2580 = 0x3F800000uLL;
      HIDWORD(memptr[1]) = 0;
      *(void **)((char *)memptr + 4) = 0;
      LODWORD(memptr[0]) = 1065353216;
      v2581 = 1065353216;
      v2582 = 0;
      v2583 = 0.0;
      *(_QWORD *)&v2574 = &v2561[4];
      *((_QWORD *)&v2574 + 1) = buf;
      sub_1C98A24C0((uint64_t)memptr, (float **)&v2574);
      *(_QWORD *)&v2569 = &v2561[4];
      *((_QWORD *)&v2569 + 1) = &buf[36];
      *(_QWORD *)((char *)&v2574 + 4) = 0;
      HIDWORD(v2574) = 0;
      sub_1C98A266C((float *)&v2574 + 1, (float **)&v2569);
      v2582 = vadd_f32(*(float32x2_t *)((char *)&v2574 + 4), v1327);
      v2583 = *((float *)&v2574 + 3) + v1328;
      v2569 = *(_OWORD *)__p;
      v2570 = v2585;
      v2571 = v2586;
      v2572 = vmul_n_f32(v2587, v2478);
      v2573 = v2588 * v2478;
      v2574 = 0x3F800000uLL;
      v2575 = 0x3F800000uLL;
      v2576 = 1065353216;
      v2578 = 0.0;
      v2577 = 0;
      *(_QWORD *)&v2591[0] = v2592;
      *((_QWORD *)&v2591[0] + 1) = &v2569;
      sub_1C98A24C0((uint64_t)&v2574, (float **)v2591);
      v2589 = (float *)v2592;
      v2590 = &v2572;
      *(_QWORD *)((char *)v2591 + 4) = 0;
      HIDWORD(v2591[0]) = 0;
      sub_1C98A266C((float *)v2591 + 1, &v2589);
      v1329 = v2597;
      v2577 = vadd_f32(*(float32x2_t *)((char *)v2591 + 4), v2597);
      v1330 = v2598;
      *(_OWORD *)v2608 = v2574;
      *(_OWORD *)&v2608[16] = v2575;
      *(_DWORD *)&v2608[32] = v2576;
      v2609 = v2577;
      v2610 = *((float *)v2591 + 3) + v2598;
      v2569 = *(_OWORD *)memptr;
      v2570 = v2580;
      v2571 = v2581;
      v2572 = vmul_n_f32(v2582, v2495);
      v2573 = v2583 * v2495;
      v2574 = 0x3F800000uLL;
      v2575 = 0x3F800000uLL;
      v1214 = keyg;
      v2576 = 1065353216;
      v2578 = 0.0;
      v2577 = 0;
      *(_QWORD *)&v2591[0] = v2592;
      *((_QWORD *)&v2591[0] + 1) = &v2569;
      sub_1C98A24C0((uint64_t)&v2574, (float **)v2591);
      v2589 = (float *)v2592;
      v2590 = &v2572;
      *(_QWORD *)((char *)v2591 + 4) = 0;
      HIDWORD(v2591[0]) = 0;
      sub_1C98A266C((float *)v2591 + 1, &v2589);
      v2577 = vadd_f32(*(float32x2_t *)((char *)v2591 + 4), v1329);
      v2578 = *((float *)v2591 + 3) + v1330;
      *(_OWORD *)v2599 = v2574;
      *(_OWORD *)&v2599[16] = v2575;
      v2600 = v2576;
      v2601 = v2577;
      v2602 = *((float *)v2591 + 3) + v1330;
    }
    else
    {
      v2495 = 1.0;
      v2478 = 1.0;
    }
    v1331 = *(_QWORD *)(*v1214 + 152);
    v1332 = v1331 + 400;
    v1333 = 384;
    if (v1195 <= v1208)
      v1332 = v1331 + 384;
    else
      v1333 = 400;
    v1334 = *(void ***)(v1331 + v1333);
    v1335 = *(std::__shared_weak_count **)(v1332 + 8);
    v2429 = v1335;
    if (v1335)
    {
      v1336 = (unint64_t *)&v1335->__shared_owners_;
      do
        v1337 = __ldxr(v1336);
      while (__stxr(v1337 + 1, v1336));
      v1331 = *(_QWORD *)(*v1214 + 152);
    }
    v1338 = (void **)(v1331 + 264);
    v1339 = v2536;
    v1340 = (const void **)(v2536 + 6);
    v1341 = *(unsigned int *)(v1331 + 280);
    v1342 = *((unsigned int *)v2536 + 10);
    if (v1341 == v1342)
    {
      if (!v1334)
      {
        v1334 = (void **)(v1331 + 360);
        if (*(_DWORD *)(v1331 + 376) != v1341)
        {
          *(_DWORD *)(v1331 + 376) = v1341;
          if (v1341)
          {
            v1343 = *(void **)(v1331 + 360);
            if (*(_QWORD *)(v1331 + 368) < v1341)
            {
              free(v1343);
              v1344 = (4 * v1341 + 31) & 0x7FFFFFFE0;
              *(_QWORD *)(v1331 + 360) = 0;
              *(_QWORD *)(v1331 + 368) = v1344 >> 2;
              *(_QWORD *)v2592 = 0;
              malloc_type_posix_memalign((void **)v2592, 0x20uLL, v1344, 0x49090899uLL);
              v1343 = *(void **)v2592;
              *(_QWORD *)(v1331 + 360) = *(_QWORD *)v2592;
            }
          }
          else
          {
            free(*v1334);
            v1343 = 0;
            *v1334 = 0;
            *(_QWORD *)(v1331 + 368) = 0;
          }
          v1412 = *(unsigned int *)(v1331 + 376);
          if ((_DWORD)v1412)
            memset_pattern16(v1343, &unk_1C9927930, 4 * v1412);
        }
      }
      v1351 = *(unsigned int *)(v1331 + 280);
      if ((_DWORD)v1351)
      {
        v1413 = *(float **)(v1331 + 264);
        v1414 = *(float **)(v1331 + 288);
        v1415 = (float *)*v1340;
        v1416 = (float *)*v1334;
        v1348 = v2434;
        do
        {
          v1421 = *v1413;
          v1422 = *v1413 + (float)(*(float *)(v1331 + 336) * *v1414);
          v1423 = vabds_f32(*v1415, v1422);
          v1424 = *(float *)(v1331 + 316);
          v1417 = 0.0;
          if (v1423 >= v1424)
          {
            if (v1423 < *(float *)(v1331 + 320))
            {
              v1417 = (float)(v1423 - v1424) * *(float *)(v1331 + 344);
            }
            else
            {
              v1425 = *(float *)(v1331 + 324);
              v1417 = 1.0;
              if (v1423 >= v1425)
              {
                v1417 = 0.0;
                if (v1423 < *(float *)(v1331 + 328))
                  v1417 = 1.0 - (float)((float)(v1423 - v1425) * *(float *)(v1331 + 348));
              }
            }
          }
          v1418 = *v1416++;
          v1419 = fminf(*(float *)(v1331 + 340) + (float)(v1417 / (float)((float)(*(float *)(v1331 + 312) * v1418) + 1.0)), 1.0);
          v1420 = (float)(v1422 * (float)(1.0 - v1419)) + (float)(v1419 * *v1415);
          *v1413++ = v1420;
          *v1414 = (float)((float)(1.0 - *(float *)(v1331 + 352)) * *v1414)
                 + (float)(*(float *)(v1331 + 352) * (float)(v1420 - v1421));
          ++v1414;
          ++v1415;
          --v1351;
        }
        while (v1351);
        goto LABEL_1483;
      }
      v1348 = v2434;
    }
    else
    {
      if (v1338 == (void **)v1340)
      {
        v1348 = v2434;
      }
      else
      {
        if (*((_DWORD *)v2536 + 10))
        {
          v1345 = *(void **)(v1331 + 264);
          if (*(_QWORD *)(v1331 + 272) >= v1342)
          {
            v1346 = 4 * v1342;
          }
          else
          {
            free(v1345);
            v1346 = 4 * v1342;
            v1347 = (4 * v1342 + 31) & 0x7FFFFFFE0;
            *(_QWORD *)(v1331 + 264) = 0;
            *(_QWORD *)(v1331 + 272) = v1347 >> 2;
            *(_QWORD *)v2592 = 0;
            malloc_type_posix_memalign((void **)v2592, 0x20uLL, v1347, 0x49090899uLL);
            v1345 = *(void **)v2592;
            *(_QWORD *)(v1331 + 264) = *(_QWORD *)v2592;
          }
          memcpy(v1345, *v1340, v1346);
        }
        else
        {
          free(*v1338);
          *v1338 = 0;
          *(_QWORD *)(v1331 + 272) = 0;
        }
        v1348 = v2434;
        *(float *)(v1331 + 280) = v1339[10];
        v1342 = *((unsigned int *)v1339 + 10);
      }
      v1349 = (void **)(v1331 + 288);
      if (v1342 != *(_DWORD *)(v1331 + 304))
      {
        *(_DWORD *)(v1331 + 304) = v1342;
        if (v1342)
        {
          if (*(_QWORD *)(v1331 + 296) < v1342)
          {
            free(*(void **)(v1331 + 288));
            v1350 = (4 * v1342 + 31) & 0x7FFFFFFE0;
            *(_QWORD *)(v1331 + 288) = 0;
            *(_QWORD *)(v1331 + 296) = v1350 >> 2;
            *(_QWORD *)v2592 = 0;
            malloc_type_posix_memalign((void **)v2592, 0x20uLL, v1350, 0x49090899uLL);
            *(_QWORD *)(v1331 + 288) = *(_QWORD *)v2592;
          }
        }
        else
        {
          free(*v1349);
          *v1349 = 0;
          *(_QWORD *)(v1331 + 296) = 0;
        }
        v1342 = *(unsigned int *)(v1331 + 304);
      }
      if (v1342)
        bzero(*v1349, 4 * v1342);
LABEL_1483:
      v1351 = *(unsigned int *)(v1331 + 280);
    }
    v1352 = (4 * v1351 + 31) & 0x7FFFFFFE0;
    *(_QWORD *)v2592 = 0;
    malloc_type_posix_memalign((void **)v2592, 0x20uLL, v1352, 0x49090899uLL);
    v1353 = *(float **)v2592;
    if (v1351)
      memcpy(*(void **)v2592, *v1338, 4 * v1351);
    v1354 = *(unsigned int *)(v1331 + 280);
    v1355 = *(_QWORD *)(v1348 + 8);
    v1356 = *(unsigned int *)(v1355 + 80);
    if ((int)v1356 >= 1)
    {
      v1357 = 0;
      v1358 = *(_QWORD *)(v1355 + 64);
      v1359 = 3 * v1356;
      do
      {
        v1360 = v1358 + 4 * v1357;
        v1361 = *(unsigned int *)(v1360 + 4);
        v1362 = *(unsigned int *)(v1360 + 8);
        v1363 = v1353[v1361] - v1353[v1362];
        v1364 = fminf(v1363, 1.0);
        v1365 = v1363 > 0.0;
        if (v1363 < 0.0)
          v1364 = 0.0;
        v1353[v1361] = v1364;
        v1366 = fminf(-v1363, 1.0);
        if (v1365)
          v1366 = 0.0;
        v1353[v1362] = v1366;
        v1357 += 3;
      }
      while (v1359 != v1357);
    }
    v1367 = keyg;
    if ((_DWORD)v1354)
    {
      v1368 = (v1354 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      v1369 = v1353;
      if (v1368 <= 6)
      {
        do
        {
LABEL_1499:
          v1374 = fminf(*v1369, 1.0);
          if (*v1369 >= 0.0)
            v1375 = v1374;
          else
            v1375 = 0.0;
          *v1369++ = v1375;
        }
        while (v1369 != &v1353[v1354]);
      }
      else
      {
        v1370 = (v1368 + 1) & 0x7FFFFFFFFFFFFFF8;
        v1371 = (float32x4_t *)(v1353 + 4);
        v1372 = v1370;
        do
        {
          v1373 = vandq_s8((int8x16_t)vminnmq_f32(*v1371, v2507), (int8x16_t)vcgezq_f32(*v1371));
          v1371[-1] = (float32x4_t)vandq_s8((int8x16_t)vminnmq_f32(v1371[-1], v2507), (int8x16_t)vcgezq_f32(v1371[-1]));
          *v1371 = (float32x4_t)v1373;
          v1371 += 2;
          v1372 -= 8;
        }
        while (v1372);
        if (v1368 + 1 != v1370)
        {
          v1369 = &v1353[v1370];
          goto LABEL_1499;
        }
      }
    }
    sub_1C98EB794((float32x2_t *)__p, *(_QWORD *)(*keyg + 152) + 416, (float32x2_t *)v2536 + 6);
    *(_QWORD *)&v2574 = 0;
    *(_QWORD *)&v2569 = 0;
    v1376 = v2536;
    v1377 = v2537;
    if (v2537)
    {
      v1378 = (unint64_t *)&v2537->__shared_owners_;
      do
        v1379 = __ldxr(v1378);
      while (__stxr(v1379 + 1, v1378));
      v1380.n128_f32[0] = sub_1C98E7F48(v1376, (float *)__p, v1353, (float *)&v2574, (float *)&v2569);
      v1381 = (unint64_t *)&v1377->__shared_owners_;
      do
        v1382 = __ldaxr(v1381);
      while (__stlxr(v1382 - 1, v1381));
      if (!v1382)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v1377->__on_zero_shared)(v1377, v1380);
        std::__shared_weak_count::__release_weak(v1377);
      }
    }
    else
    {
      sub_1C98E7F48(v2536, (float *)__p, v1353, (float *)&v2574, (float *)&v2569);
    }
    v1383 = *(_QWORD *)(*keyg + 152) + 472;
    *(float *)memptr = v1195;
    sub_1C98EBDB4((float *)v2592, v1383, (float *)memptr);
    if (*(float *)v2592 <= 1.0)
      v1384 = *(float *)v2592;
    else
      v1384 = 1.0;
    if (*(float *)v2592 >= 0.0)
      v1385 = v1384;
    else
      v1385 = 0.0;
    v1386 = v2536;
    v1387 = (std::__shared_weak_count *)operator new(0x118uLL);
    v1387->__shared_owners_ = 0;
    v1388 = (unint64_t *)&v1387->__shared_owners_;
    v1387->__shared_weak_owners_ = 0;
    v1387->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295950;
    v1389 = *((unsigned int *)v1386 + 10);
    v1390 = (4 * v1389 + 31) & 0x7FFFFFFE0;
    *(_QWORD *)&v2592[8] = v1390 >> 2;
    memptr[0] = 0;
    malloc_type_posix_memalign(memptr, 0x20uLL, v1390, 0x49090899uLL);
    *(void **)v2592 = memptr[0];
    if ((_DWORD)v1389)
      memcpy(memptr[0], *((const void **)v1386 + 3), 4 * v1389);
    v2435 = v1387;
    *(float *)&v2592[16] = v1386[10];
    pixelBuffera = (CVPixelBufferRef)&v1387[1];
    sub_1C98E86A4((uint64_t)&v1387[1], v2445, &v2514, (__int128 *)v2608, (uint64_t)v2592, (uint64_t)(v1386 + 28), (uint64_t)(v1386 + 22), (uint64_t *)v1386 + 6, v2478, v1195, v1386 + 15, v1386 + 17);
    free(*(void **)v2592);
    v1391 = v2536 + 28;
    v1392 = v2536 + 22;
    v1393 = (std::__shared_weak_count *)operator new(0x118uLL);
    v1393->__shared_owners_ = 0;
    v1394 = (unint64_t *)&v1393->__shared_owners_;
    v1393->__shared_weak_owners_ = 0;
    v1393->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295950;
    v2479 = v1393;
    *(_QWORD *)v2592 = v1353;
    *(_QWORD *)&v2592[8] = v1352 >> 2;
    v1395 = &v1393[1].__vftable;
    *(_DWORD *)&v2592[16] = v1354;
    sub_1C98E86A4((uint64_t)&v1393[1], v2445, (__int128 *)buf, (__int128 *)v2599, (uint64_t)v2592, (uint64_t)v1391, (uint64_t)v1392, (uint64_t *)__p, v2495, v1385, &v2574, &v2569);
    free(*(void **)v2592);
    v1396 = *keyg;
    v1397 = *(_QWORD *)(*keyg + 120);
    v952 = v2449;
    if (v1397)
      goto LABEL_1634;
    v2496 = v1395;
    v1398 = *(char **)(v1396 + 96);
    v1399 = *(char **)(v1396 + 104);
    v1400 = 16 * (v1399 - v1398) - 1;
    if (v1399 == v1398)
      v1400 = 0;
    if ((unint64_t)(v1400 - *(_QWORD *)(v1396 + 128)) >= 0x80)
    {
      *(_QWORD *)(v1396 + 120) = 128;
      *(_QWORD *)v2592 = *((_QWORD *)v1399 - 1);
      *(_QWORD *)(v1396 + 104) = v1399 - 8;
      sub_1C98EA8C8((void **)(v1396 + 88), v2592);
      v1395 = v2496;
      goto LABEL_1633;
    }
    v1401 = *(char **)(v1396 + 112);
    v1402 = *(char **)(v1396 + 88);
    if (v1399 - v1398 >= (unint64_t)(v1401 - v1402))
    {
      if (v1401 == v1402)
        v1407 = 1;
      else
        v1407 = (v1401 - v1402) >> 2;
      if (v1407 >> 61)
        goto LABEL_2804;
      v1408 = (char *)operator new(8 * v1407);
      v1409 = operator new(0x1000uLL);
      if (v1407)
      {
        v1410 = &v1408[8 * v1407];
        v1411 = v1408;
      }
      else
      {
        v1435 = (char *)operator new(8uLL);
        v1410 = v1435 + 8;
        operator delete(v1408);
        v1398 = *(char **)(v1396 + 96);
        v1399 = *(char **)(v1396 + 104);
        v1411 = v1435;
      }
      *(_QWORD *)v1411 = v1409;
      v1436 = v1411 + 8;
      v1437 = v1411;
      if (v1398 == v1399)
      {
LABEL_1557:
        v1438 = *(void **)(v1396 + 88);
        *(_QWORD *)(v1396 + 88) = v1411;
        *(_QWORD *)(v1396 + 96) = v1437;
        *(_QWORD *)(v1396 + 104) = v1436;
        *(_QWORD *)(v1396 + 112) = v1410;
        if (v1436 - v1437 == 8)
          v1439 = 64;
        else
          v1439 = *(_QWORD *)(v1396 + 120) + 128;
        v952 = v2449;
        v1367 = keyg;
        v1395 = v2496;
        *(_QWORD *)(v1396 + 120) = v1439;
        if (v1438)
          operator delete(v1438);
        goto LABEL_1633;
      }
      while (1)
      {
        if (v1436 == v1410)
        {
          if (v1437 <= v1411)
          {
            v1449 = (v1436 - v1411) >> 2;
            if (v1436 == v1411)
              v1449 = 1;
            if (v1449 >> 61)
              goto LABEL_2804;
            v1450 = v1411;
            v1451 = v1449 >> 2;
            v2417 = (char *)(8 * v1449);
            v1452 = (char *)operator new(8 * v1449);
            v1411 = v1452;
            v1440 = &v1452[8 * v1451];
            v1441 = v1440;
            v1453 = v1436 - v1437;
            if (v1436 != v1437)
            {
              v1441 = &v1440[v1453 & 0xFFFFFFFFFFFFFFF8];
              v1454 = v1453 - 8;
              if (v1454 >= 0x38)
              {
                if ((unint64_t)(&v1452[8 * v1451] - v1437) < 0x20)
                {
                  v1455 = &v1452[8 * v1451];
                  goto LABEL_1581;
                }
                v1456 = (v1454 >> 3) + 1;
                v1457 = 8 * (v1456 & 0x3FFFFFFFFFFFFFFCLL);
                v1455 = &v1440[v1457];
                v1458 = (__int128 *)(v1437 + 16);
                v1459 = &v1452[8 * v1451 + 16];
                v1460 = v1456 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v1461 = *v1458;
                  *((_OWORD *)v1459 - 1) = *(v1458 - 1);
                  *(_OWORD *)v1459 = v1461;
                  v1458 += 2;
                  v1459 += 32;
                  v1460 -= 4;
                }
                while (v1460);
                if (v1456 != (v1456 & 0x3FFFFFFFFFFFFFFCLL))
                {
                  v1437 += v1457;
                  goto LABEL_1581;
                }
              }
              else
              {
                v1455 = &v1452[8 * v1451];
                do
                {
LABEL_1581:
                  v1462 = *(_QWORD *)v1437;
                  v1437 += 8;
                  *(_QWORD *)v1455 = v1462;
                  v1455 += 8;
                }
                while (v1455 != v1441);
              }
            }
            v1436 = &v2417[(_QWORD)v1452];
            if (v1450)
            {
              v1463 = v1452;
              operator delete(v1450);
              v1411 = v1463;
            }
            goto LABEL_1560;
          }
          v1443 = (v1437 - v1411) >> 3;
          if (v1443 >= -1)
            v1444 = v1443 + 1;
          else
            v1444 = v1443 + 2;
          v1445 = v1444 >> 1;
          v1446 = &v1437[-8 * (v1444 >> 1)];
          v1447 = v1436;
          if (v1436 != v1437)
          {
            v1448 = v1411;
            memmove(v1446, v1437, v1436 - v1437);
            v1411 = v1448;
            v1447 = v1437;
          }
          v1441 = &v1446[v1436 - v1437];
          v1440 = &v1447[-8 * v1445];
        }
        else
        {
          v1440 = v1437;
          v1441 = v1436;
          v1436 = v1410;
        }
LABEL_1560:
        v1442 = *(_QWORD *)v1398;
        v1398 += 8;
        *(_QWORD *)v1441 = v1442;
        v1437 = v1440;
        v1410 = v1436;
        v1436 = v1441 + 8;
        if (v1398 == *(char **)(v1396 + 104))
          goto LABEL_1557;
      }
    }
    v1403 = operator new(0x1000uLL);
    v1404 = v1403;
    if (v1398 == v1402)
    {
      v1426 = *(char **)(v1396 + 104);
      if (v1426 != *(char **)(v1396 + 112))
      {
LABEL_1623:
        *(_QWORD *)v1426 = v1404;
        v1504 = *(_QWORD **)(v1396 + 104);
        *(_QWORD *)(v1396 + 104) = v1504 + 1;
        *(_QWORD *)v2592 = *v1504;
        *(_QWORD *)(v1396 + 104) = v1504;
        sub_1C98EA8C8((void **)(v1396 + 88), v2592);
        v1505 = *(_QWORD *)(v1396 + 96);
        v1395 = v2496;
        goto LABEL_1629;
      }
      v1427 = *(char **)(v1396 + 88);
      v1428 = *(char **)(v1396 + 96);
      if (v1428 > v1427)
      {
        v2416 = v1403;
        v1429 = (v1428 - v1427) >> 3;
        if (v1429 >= -1)
          v1430 = v1429 + 1;
        else
          v1430 = v1429 + 2;
        v1431 = v1430 >> 1;
        v1432 = &v1428[-8 * (v1430 >> 1)];
        v1433 = v1426 - v1428;
        if (v1426 != v1428)
        {
          memmove(&v1428[-8 * (v1430 >> 1)], v1428, v1426 - v1428);
          v1426 = *(char **)(v1396 + 96);
        }
        v1434 = &v1426[-8 * v1431];
        v1426 = &v1432[v1433];
        *(_QWORD *)(v1396 + 96) = v1434;
        *(_QWORD *)(v1396 + 104) = &v1432[v1433];
        v952 = v2449;
        v1367 = keyg;
        v1404 = v2416;
        goto LABEL_1623;
      }
      v2419 = *(void **)(v1396 + 88);
      v1489 = (v1426 - v1427) >> 2;
      if (v1426 == v1427)
        v1489 = 1;
      if (v1489 >> 61)
        goto LABEL_2804;
      v1490 = v1403;
      v1491 = v1489 >> 2;
      v2412 = 8 * v1489;
      v1492 = (char *)operator new(8 * v1489);
      v1493 = &v1492[8 * v1491];
      v1494 = v1426 - v1428;
      _ZF = v1426 == v1428;
      v1426 = v1493;
      if (!_ZF)
      {
        v1426 = &v1493[v1494 & 0xFFFFFFFFFFFFFFF8];
        v1495 = v1494 - 8;
        if ((unint64_t)(v1494 - 8) < 0x38)
        {
          v1496 = &v1492[8 * v1491];
          goto LABEL_1620;
        }
        v1496 = &v1492[8 * v1491];
        if ((unint64_t)(v1496 - v1428) < 0x20)
        {
          do
          {
LABEL_1620:
            v1503 = *(_QWORD *)v1428;
            v1428 += 8;
            *(_QWORD *)v1496 = v1503;
            v1496 += 8;
          }
          while (v1496 != v1426);
          goto LABEL_1621;
        }
        v1497 = (v1495 >> 3) + 1;
        v1498 = 8 * (v1497 & 0x3FFFFFFFFFFFFFFCLL);
        v1496 = &v1493[v1498];
        v1499 = (__int128 *)(v1428 + 16);
        v1500 = &v1492[8 * v1491 + 16];
        v1501 = v1497 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1502 = *v1499;
          *((_OWORD *)v1500 - 1) = *(v1499 - 1);
          *(_OWORD *)v1500 = v1502;
          v1499 += 2;
          v1500 += 32;
          v1501 -= 4;
        }
        while (v1501);
        if (v1497 != (v1497 & 0x3FFFFFFFFFFFFFFCLL))
        {
          v1428 += v1498;
          goto LABEL_1620;
        }
      }
LABEL_1621:
      *(_QWORD *)(v1396 + 88) = v1492;
      *(_QWORD *)(v1396 + 96) = v1493;
      *(_QWORD *)(v1396 + 104) = v1426;
      *(_QWORD *)(v1396 + 112) = &v1492[v2412];
      v952 = v2449;
      v1404 = v1490;
      if (v2419)
      {
        operator delete(v2419);
        v1426 = *(char **)(v1396 + 104);
      }
      goto LABEL_1623;
    }
    v1405 = *(char **)(v1396 + 96);
    if (v1405 != *(char **)(v1396 + 88))
    {
      v1406 = *(char **)(v1396 + 96);
      v1395 = v2496;
      goto LABEL_1628;
    }
    v2418 = v1403;
    v1465 = *(_BYTE **)(v1396 + 104);
    v1464 = *(_QWORD *)(v1396 + 112);
    v1395 = v2496;
    if ((unint64_t)v1465 >= v1464)
    {
      v1470 = v1464 - (_QWORD)v1405;
      _ZF = v1470 == 0;
      v1471 = v1470 >> 2;
      if (_ZF)
        v1471 = 1;
      if (v1471 >> 61)
        goto LABEL_2804;
      v1472 = (v1471 + 3) >> 2;
      v1473 = 8 * v1471;
      v1474 = (char *)operator new(8 * v1471);
      v1406 = &v1474[8 * v1472];
      v1475 = &v1474[v1473];
      v1476 = v1406;
      v1477 = v1465 - v1405;
      _ZF = v1465 == v1405;
      v1404 = v2418;
      if (!_ZF)
      {
        v1476 = &v1406[v1477 & 0xFFFFFFFFFFFFFFF8];
        v1478 = v1477 - 8;
        v1479 = &v1474[8 * v1472];
        v1480 = v1405;
        if (v1478 > 0x37)
        {
          v1479 = &v1474[8 * v1472];
          v1480 = v1405;
          if ((unint64_t)(v1479 - v1405) >= 0x20)
          {
            v1481 = (v1478 >> 3) + 1;
            v1482 = 8 * (v1481 & 0x3FFFFFFFFFFFFFFCLL);
            v1479 = &v1406[v1482];
            v1483 = (__int128 *)(v1405 + 16);
            v1484 = &v1474[8 * v1472 + 16];
            v1485 = v1481 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v1486 = *v1483;
              *((_OWORD *)v1484 - 1) = *(v1483 - 1);
              *(_OWORD *)v1484 = v1486;
              v1483 += 2;
              v1484 += 32;
              v1485 -= 4;
            }
            while (v1485);
            if (v1481 == (v1481 & 0x3FFFFFFFFFFFFFFCLL))
            {
              *(_QWORD *)(v1396 + 88) = v1474;
              *(_QWORD *)(v1396 + 96) = v1406;
              *(_QWORD *)(v1396 + 104) = v1476;
              *(_QWORD *)(v1396 + 112) = v1475;
              v1395 = v2496;
LABEL_1627:
              operator delete(v1405);
              v1406 = *(char **)(v1396 + 96);
              goto LABEL_1628;
            }
            v1480 = &v1405[v1482];
          }
        }
        do
        {
          v1506 = *(_QWORD *)v1480;
          v1480 += 8;
          *(_QWORD *)v1479 = v1506;
          v1479 += 8;
        }
        while (v1479 != v1476);
      }
      *(_QWORD *)(v1396 + 88) = v1474;
      *(_QWORD *)(v1396 + 96) = v1406;
      *(_QWORD *)(v1396 + 104) = v1476;
      *(_QWORD *)(v1396 + 112) = v1475;
      v1395 = v2496;
      if (!v1405)
        goto LABEL_1628;
      goto LABEL_1627;
    }
    v1466 = (uint64_t)(v1464 - (_QWORD)v1465) >> 3;
    if (v1466 >= -1)
      v1467 = v1466 + 1;
    else
      v1467 = v1466 + 2;
    v1468 = v1467 >> 1;
    v1469 = &v1465[8 * (v1467 >> 1)];
    v1406 = &v1469[-(v1465 - v1405)];
    if (v1465 != v1405)
    {
      memmove(&v1469[-(v1465 - v1405)], v1405, v1465 - v1405);
      v1405 = *(char **)(v1396 + 104);
    }
    v1404 = v2418;
    *(_QWORD *)(v1396 + 96) = v1406;
    *(_QWORD *)(v1396 + 104) = &v1405[8 * v1468];
LABEL_1628:
    *((_QWORD *)v1406 - 1) = v1404;
    v1505 = *(_QWORD *)(v1396 + 96) - 8;
    *(_QWORD *)(v1396 + 96) = v1505;
    v952 = v2449;
LABEL_1629:
    if (*(_QWORD *)(v1396 + 104) - v1505 == 8)
      v1507 = 64;
    else
      v1507 = *(_QWORD *)(v1396 + 120) + 128;
    *(_QWORD *)(v1396 + 120) = v1507;
LABEL_1633:
    v1397 = *(_QWORD *)(v1396 + 120);
LABEL_1634:
    v1508 = *(_QWORD *)(v1396 + 96);
    v1509 = (_QWORD *)(v1508 + 8 * (v1397 >> 7));
    v1510 = *v1509 + 32 * (v1397 & 0x7F);
    if (*(_QWORD *)(v1396 + 104) == v1508)
      v1510 = 0;
    if (v1510 == *v1509)
      v1510 = *(v1509 - 1) + 4096;
    *(_QWORD *)(v1510 - 32) = pixelBuffera;
    *(_QWORD *)(v1510 - 24) = v2435;
    do
      v1511 = __ldxr(v1388);
    while (__stxr(v1511 + 1, v1388));
    *(_QWORD *)(v1510 - 16) = v1395;
    *(_QWORD *)(v1510 - 8) = v2479;
    do
      v1512 = __ldxr(v1394);
    while (__stxr(v1512 + 1, v1394));
    *(int64x2_t *)(v1396 + 120) = vaddq_s64(*(int64x2_t *)(v1396 + 120), (int64x2_t)xmmword_1C99277C0);
    v1513 = (_QWORD *)*v1367;
    v1514 = *(_QWORD *)(*v1367 + 128);
    if (v1514 >= 6)
    {
      while (1)
      {
        v1522 = *(_QWORD *)(v1513[12] + (((v1514 + v1513[15] - 1) >> 4) & 0xFFFFFFFFFFFFFF8))
              + 32 * ((v1514 + v1513[15] - 1) & 0x7F);
        v1523 = *(std::__shared_weak_count **)(v1522 + 24);
        if (!v1523)
          goto LABEL_1663;
        v1524 = (unint64_t *)&v1523->__shared_owners_;
        do
          v1525 = __ldaxr(v1524);
        while (__stlxr(v1525 - 1, v1524));
        if (!v1525)
        {
          ((void (*)(std::__shared_weak_count *))v1523->__on_zero_shared)(v1523);
          std::__shared_weak_count::__release_weak(v1523);
          v1526 = *(std::__shared_weak_count **)(v1522 + 8);
          if (v1526)
          {
LABEL_1664:
            v1527 = (unint64_t *)&v1526->__shared_owners_;
            do
              v1528 = __ldaxr(v1527);
            while (__stlxr(v1528 - 1, v1527));
            if (!v1528)
            {
              ((void (*)(std::__shared_weak_count *))v1526->__on_zero_shared)(v1526);
              std::__shared_weak_count::__release_weak(v1526);
            }
          }
        }
        else
        {
LABEL_1663:
          v1526 = *(std::__shared_weak_count **)(v1522 + 8);
          if (v1526)
            goto LABEL_1664;
        }
        v1530 = v1513[12];
        v1529 = v1513[13];
        v1531 = v1529 - v1530;
        _ZF = v1529 == v1530;
        v1533 = v1513[15];
        v1532 = v1513[16];
        v1513[16] = v1532 - 1;
        v1534 = 16 * v1531 - 1;
        if (_ZF)
          v1534 = 0;
        if ((unint64_t)(v1534 - (v1532 + v1533) + 1) >= 0x100)
        {
          operator delete(*(void **)(v1529 - 8));
          v1513[13] -= 8;
        }
        v1513 = (_QWORD *)*v1367;
        v1514 = *(_QWORD *)(*v1367 + 128);
        if (v1514 <= 5)
          goto LABEL_1643;
      }
    }
    do
LABEL_1643:
      v1515 = __ldaxr(v1394);
    while (__stlxr(v1515 - 1, v1394));
    if (!v1515)
    {
      ((void (*)(std::__shared_weak_count *))v2479->__on_zero_shared)(v2479);
      std::__shared_weak_count::__release_weak(v2479);
    }
    v1516 = v2454;
    do
      v1517 = __ldaxr(v1388);
    while (__stlxr(v1517 - 1, v1388));
    if (!v1517)
    {
      ((void (*)(std::__shared_weak_count *))v2435->__on_zero_shared)(v2435);
      std::__shared_weak_count::__release_weak(v2435);
    }
    if (v2429)
    {
      v1518 = (unint64_t *)&v2429->__shared_owners_;
      do
        v1519 = __ldaxr(v1518);
      while (__stlxr(v1519 - 1, v1518));
      if (!v1519)
      {
        ((void (*)(std::__shared_weak_count *))v2429->__on_zero_shared)(v2429);
        std::__shared_weak_count::__release_weak(v2429);
      }
    }
    v1520 = v2536;
    v1521 = (_QWORD *)*v1367;
    if (*(_QWORD *)(*v1367 + 152))
    {
      if (!v1521[16])
        goto LABEL_1851;
LABEL_1676:
      v1537 = *(_QWORD *)(v1521[12] + ((v1521[15] >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v1521[15] & 0x7FLL);
      v1539 = *(_QWORD *)(v1537 + 16);
      v1538 = *(std::__shared_weak_count **)(v1537 + 24);
      if (v1538)
      {
        v1540 = (unint64_t *)&v1538->__shared_owners_;
        do
          v1541 = __ldxr(v1540);
        while (__stxr(v1541 + 1, v1540));
        do
          v1542 = __ldaxr(v1540);
        while (__stlxr(v1542 - 1, v1540));
        if (!v1542)
        {
          ((void (*)(std::__shared_weak_count *))v1538->__on_zero_shared)(v1538);
          std::__shared_weak_count::__release_weak(v1538);
        }
      }
      v1543 = v2454;
      v1544 = *((_QWORD *)v1520 + 40);
      v1545 = *((_DWORD *)v1520 + 84);
      v1546 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
      if ((v1546 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
      {
        sub_1C98CFF14();
        __cxa_guard_release(&qword_1ED52ACD8);
        v1543 = v2454;
        v1208 = 0.5;
      }
      v1547 = *(float *)(qword_1ED52ACB8 + 204);
      *(_DWORD *)&v2608[28] = 0;
      *(_DWORD *)&v2608[12] = 0;
      *(_QWORD *)&v2608[20] = 0;
      *(_QWORD *)&v2608[4] = 0;
      *(_DWORD *)v2608 = 1065353216;
      *(_DWORD *)&v2608[16] = 1065353216;
      *(_DWORD *)&v2608[32] = 1065353216;
      v2609 = 0;
      v2610 = 0.0;
      *(_QWORD *)v2599 = &v2561[4];
      *(_QWORD *)&v2599[8] = v1539 + 32;
      sub_1C98A24C0((uint64_t)v2608, (float **)v2599);
      *(_QWORD *)v2592 = &v2561[4];
      *(_QWORD *)&v2592[8] = v1539 + 68;
      *(_QWORD *)&v2599[4] = 0;
      *(_DWORD *)&v2599[12] = 0;
      sub_1C98A266C((float *)&v2599[4], (float **)v2592);
      v2609 = vadd_f32(*(float32x2_t *)&v2599[4], v2562);
      v2610 = *(float *)&v2599[12] + v2563;
      *(_QWORD *)&v1548 = *(_QWORD *)v2560;
      *((_QWORD *)&v1548 + 1) = *(_QWORD *)&v2560[12];
      *(_OWORD *)buf = *(_OWORD *)v2608;
      *(_OWORD *)&buf[16] = *(_OWORD *)&v2608[16];
      *(_DWORD *)&buf[32] = *(_DWORD *)&v2608[32];
      *(float32x2_t *)&buf[36] = v2609;
      *(float *)&buf[44] = *(float *)&v2599[12] + v2563;
      *(_OWORD *)&buf[48] = v1548;
      v2604 = *(float32x2_t *)&v2560[24];
      v2606 = 0u;
      v2607 = 0u;
      v2605 = 0u;
      *(_DWORD *)v2599 = 2;
      *(_QWORD *)&v2599[8] = buf;
      *(_QWORD *)&v2599[16] = 3;
      *(_QWORD *)v2592 = &buf[48];
      *(_QWORD *)&v2592[8] = v2599;
      sub_1C98EC3FC((uint64_t)&v2605, (uint64_t)v2592);
      *(_DWORD *)v2599 = 2;
      *(_QWORD *)&v2599[8] = &buf[36];
      *(_QWORD *)&v2599[16] = 3;
      *(_QWORD *)v2592 = &buf[48];
      *(_QWORD *)&v2592[8] = v2599;
      sub_1C98EC50C((float *)&v2606 + 2, (uint64_t)v2592);
      v1551 = *(float *)&buf[8];
      *(_QWORD *)&v2607 = __PAIR64__(*(unsigned int *)&buf[20], *(unsigned int *)&buf[8]);
      v1552 = *(float *)&buf[44];
      *((_QWORD *)&v2607 + 1) = __PAIR64__(*(unsigned int *)&buf[44], *(unsigned int *)&buf[32]);
      if (v1545 >= 3)
      {
        v1554 = v1545 / 3uLL;
        v1555 = *(float32x2_t *)((char *)&v2607 + 4);
        v1556 = *(float32x2_t *)((char *)&v2606 + 8);
        v1557 = v2604;
        *(_QWORD *)&v1549 = 0x7F7FFFFFFF7FFFFFLL;
        *(_QWORD *)&v1550 = 0xFF7FFFFF7F7FFFFFLL;
        v1558 = (_QWORD *)(v1544 + 4);
        v1553 = keyg;
        do
        {
          v2480 = v1550;
          v2497 = v1549;
          *(_QWORD *)v2599 = &v2605;
          *(_QWORD *)&v2599[8] = v1544;
          *(_QWORD *)&v2608[4] = 0;
          sub_1C98EC35C((float *)&v2608[4], (float **)v2599);
          *((_QWORD *)&v1550 + 1) = *((_QWORD *)&v2480 + 1);
          *((_QWORD *)&v1549 + 1) = *((_QWORD *)&v2497 + 1);
          v1559 = v1551 * *((float *)v1558 - 1);
          v1560 = *(float32x2_t *)v1558;
          v1558 = (_QWORD *)((char *)v1558 + 12);
          v1561 = vmul_f32(v1555, v1560);
          *(float *)v1562.i32 = v1552 + (float)((float)(v1559 + v1561.f32[0]) + v1561.f32[1]);
          v1563 = (int8x8_t)vadd_f32(v1557, vdiv_f32(vadd_f32(*(float32x2_t *)&v2608[4], v1556), (float32x2_t)vdup_lane_s32(v1562, 0)));
          *(int8x8_t *)&v1549 = vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)__PAIR64__(DWORD1(v2497), v1563.u32[0]), (float32x2_t)__PAIR64__(v1563.u32[1], v2497)), v1563, *(int8x8_t *)&v2497);
          *(int8x8_t *)&v1550 = vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)__PAIR64__(v1563.u32[1], v2480), (float32x2_t)__PAIR64__(DWORD1(v2480), v1563.u32[0])), v1563, *(int8x8_t *)&v2480);
          v1544 += 12;
          --v1554;
        }
        while (v1554);
      }
      else
      {
        *(_QWORD *)&v1549 = 0x7F7FFFFFFF7FFFFFLL;
        *(_QWORD *)&v1550 = 0xFF7FFFFF7F7FFFFFLL;
        v1553 = keyg;
      }
      v1564 = (int32x2_t)vsub_f32((float32x2_t)__PAIR64__(DWORD1(v1550), v1549), (float32x2_t)__PAIR64__(DWORD1(v1549), v1550));
      if (*(float *)v1564.i32 < *(float *)&v1564.i32[1])
        v1564.i32[0] = v1564.i32[1];
      v1565 = (float)(v1547 * 0.85) * *(float *)v1564.i32;
      *(float *)v1564.i32 = v1565 * v1208;
      v1566 = *v1553;
      *(float32x2_t *)(v1566 + 44) = vsub_f32(vmul_f32(vadd_f32(*(float32x2_t *)&v1550, *(float32x2_t *)&v1549), (float32x2_t)0x3F0000003F000000), (float32x2_t)vdup_lane_s32(v1564, 0));
      *(float *)(v1566 + 52) = v1565;
      *(float *)(v1566 + 56) = v1565;
      v1567 = vsub_f32(vmul_n_f32(*(float32x2_t *)&buf[12], *(float *)&buf[44]), vmul_n_f32(*(float32x2_t *)&buf[36], *(float *)&buf[20]));
      v1568 = 0.0;
      if (vaddv_f32(vmul_f32(v1567, v1567)) >= 0.000000001)
        v1568 = (float)(atan2f(v1567.f32[0], -v1567.f32[1]) / 3.1416) * 180.0;
      *(float *)(v1566 + 60) = v1568;
      *(_BYTE *)(v1566 + 64) = 1;
      v1569 = *v1553;
      v1570 = *(_QWORD *)(*v1553 + 152);
      v1571 = *(_DWORD *)(*v1553 + 40);
      v1572 = *(float *)(*v1553 + 56);
      v1573 = *(float *)(*v1553 + 60);
      *(_OWORD *)v2608 = *(_OWORD *)(*v1553 + 65);
      *(_QWORD *)&v2608[15] = *(_QWORD *)(v1569 + 80);
      v1574 = (float)(*(float *)(v1570 + 120) * v1208) * (float)(*(float *)(v1569 + 52) + v1572);
      v1575 = 1.5 / v1574;
      v557 = v1574 <= 0.000001;
      v1576 = 1500000.0;
      if (!v557)
        v1576 = v1575;
      *(float *)(v1570 + 4) = v1576;
      v1577 = *(float32x4_t *)(v1569 + 44);
      if (*(int *)v1570 < 2)
      {
        v1516 = v1543;
        v952 = v2449;
        goto LABEL_1763;
      }
      v1578 = *(_QWORD *)(v1570 + 40);
      v1516 = v1543;
      v952 = v2449;
      if (v1578)
        goto LABEL_1747;
      v1579 = *(char **)(v1570 + 16);
      v1580 = *(char **)(v1570 + 24);
      v1581 = 32 * (v1580 - v1579) - 1;
      if (v1580 == v1579)
        v1581 = 0;
      v2498 = v1577;
      if ((unint64_t)(v1581 - *(_QWORD *)(v1570 + 48)) >= 0x100)
      {
        *(_QWORD *)(v1570 + 40) = 256;
        *(_QWORD *)v2599 = *((_QWORD *)v1580 - 1);
        *(_QWORD *)(v1570 + 24) = v1580 - 8;
        sub_1C98EA8C8((void **)(v1570 + 8), v2599);
        v1577 = v2498;
        v1516 = v2454;
        goto LABEL_1746;
      }
      v1582 = *(char **)(v1570 + 32);
      v1583 = *(char **)(v1570 + 8);
      if (v1580 - v1579 < (unint64_t)(v1582 - v1583))
      {
        if (v1579 == v1583)
        {
          *(_QWORD *)v2599 = operator new(0x1000uLL);
          sub_1C98EAA6C((char **)(v1570 + 8), v2599);
          v1588 = *(_QWORD *)(v1570 + 24);
          *(_QWORD *)v2599 = *(_QWORD *)(v1588 - 8);
          *(_QWORD *)(v1570 + 24) = v1588 - 8;
        }
        else
        {
          *(_QWORD *)v2599 = operator new(0x1000uLL);
        }
        sub_1C98EA8C8((void **)(v1570 + 8), v2599);
        v1516 = v2454;
        v1577 = v2498;
        if (*(_QWORD *)(v1570 + 24) - *(_QWORD *)(v1570 + 16) == 8)
          *(_QWORD *)(v1570 + 40) = 128;
        else
          *(_QWORD *)(v1570 + 40) += 256;
        goto LABEL_1746;
      }
      v2481 = v1571;
      if (v1582 == v1583)
        v1584 = 1;
      else
        v1584 = (v1582 - v1583) >> 2;
      if (v1584 >> 61)
        goto LABEL_2804;
      v1585 = (char *)operator new(8 * v1584);
      v1586 = operator new(0x1000uLL);
      if (v1584)
      {
        v1587 = &v1585[8 * v1584];
      }
      else
      {
        v1589 = (char *)operator new(8uLL);
        v1587 = v1589 + 8;
        operator delete(v1585);
        v1579 = *(char **)(v1570 + 16);
        v1580 = *(char **)(v1570 + 24);
        v1585 = v1589;
      }
      *(_QWORD *)v1585 = v1586;
      v1590 = v1585 + 8;
      v1591 = v1585;
      v1577 = v2498;
      if (v1579 == v1580)
      {
LABEL_1715:
        v1592 = *(void **)(v1570 + 8);
        *(_QWORD *)(v1570 + 8) = v1585;
        *(_QWORD *)(v1570 + 16) = v1591;
        *(_QWORD *)(v1570 + 24) = v1590;
        *(_QWORD *)(v1570 + 32) = v1587;
        v1516 = v2454;
        if (v1590 - v1591 == 8)
          v1593 = 128;
        else
          v1593 = *(_QWORD *)(v1570 + 40) + 256;
        v952 = v2449;
        v1571 = v2481;
        *(_QWORD *)(v1570 + 40) = v1593;
        if (v1592)
        {
          operator delete(v1592);
          v1577 = v2498;
        }
LABEL_1746:
        v1578 = *(_QWORD *)(v1570 + 40);
LABEL_1747:
        v1617 = *(_QWORD *)(v1570 + 16);
        v1618 = (_QWORD *)(v1617 + 8 * (v1578 >> 8));
        v1619 = *v1618 + 16 * v1578;
        if (*(_QWORD *)(v1570 + 24) == v1617)
          v1619 = 0;
        if (v1619 == *v1618)
          v1619 = *(v1618 - 1) + 4096;
        *(float32x4_t *)(v1619 - 16) = v1577;
        v1621 = *(_QWORD *)(v1570 + 40);
        v1620 = *(_QWORD *)(v1570 + 48);
        v1622 = v1620 + 1;
        *(_QWORD *)(v1570 + 40) = v1621 - 1;
        *(_QWORD *)(v1570 + 48) = v1620 + 1;
        v1623 = 0.0;
        v1624 = 0.0;
        if ((int)v1620 + 1 >= 1)
        {
          v1625 = (float32x2_t)vextq_s8((int8x16_t)v1577, (int8x16_t)v1577, 8uLL).u64[0];
          v1626 = (v1620 + 1);
          v1627 = v1621 - 1;
          do
          {
            v1628 = (float32x2_t *)(*(_QWORD *)(*(_QWORD *)(v1570 + 16) + ((v1627 >> 5) & 0x7FFFFFFFFFFFFF8))
                                  + 16 * v1627);
            v1629 = vsub_f32(*v1628, *(float32x2_t *)v1577.f32);
            v1630 = vmul_f32(v1629, v1629);
            v1631 = vsub_f32(v1628[1], v1625);
            v1632 = vmul_f32(v1631, v1631);
            v1633 = sqrtf(vadd_f32(vadd_f32(vadd_f32(v1630, (float32x2_t)vdup_lane_s32((int32x2_t)v1630, 1)), v1632), (float32x2_t)vdup_lane_s32((int32x2_t)v1632, 1)).f32[0]);
            if (v1624 < v1633)
              v1624 = v1633;
            ++v1627;
            --v1626;
          }
          while (v1626);
        }
        v1634 = expf(-fminf(v1624 * *(float *)(v1570 + 4), 10.0));
        if ((int)v1622 >= 1)
        {
          v1635 = 1.0;
          v1623 = 0.0;
          v1636 = v1622;
          do
          {
            v1623 = v1635 + v1623;
            v1635 = v1634 * v1635;
            --v1636;
          }
          while (v1636);
        }
        v1637 = *(_QWORD *)(v1570 + 16);
        v1638 = 1.0 / v1623;
        v1577 = vmulq_n_f32(*(float32x4_t *)(*(_QWORD *)(v1637 + (((v1621 - 1) >> 5) & 0x7FFFFFFFFFFFFF8))+ 16 * (v1621 - 1)), 1.0 / v1623);
        if ((int)v1622 > 1)
        {
          v1639 = v1622 - 1;
          do
          {
            v1638 = v1634 * v1638;
            v1577 = vaddq_f32(vmulq_n_f32(*(float32x4_t *)(*(_QWORD *)(v1637 + ((v1621 >> 5) & 0x7FFFFFFFFFFFFF8))+ 16 * v1621), v1638), v1577);
            ++v1621;
            --v1639;
          }
          while (v1639);
        }
        v1640 = *(_DWORD *)v1570;
        if (*(_DWORD *)v1570 <= (int)v1622)
        {
          v1645 = *(_QWORD *)(v1570 + 24);
          v2500 = v1577;
          do
          {
            v1646 = *(_QWORD *)(v1570 + 16);
            v1647 = 32 * (v1645 - v1646) - 1;
            v1648 = *(_QWORD *)(v1570 + 40);
            if (v1645 == v1646)
              v1647 = 0;
            v1649 = v1622 - 1;
            *(_QWORD *)(v1570 + 48) = v1622 - 1;
            if ((unint64_t)(v1647 - (v1622 + v1648) + 1) >= 0x200)
            {
              operator delete(*(void **)(v1645 - 8));
              v1577 = v2500;
              v1645 = *(_QWORD *)(v1570 + 24) - 8;
              *(_QWORD *)(v1570 + 24) = v1645;
              v1649 = *(_QWORD *)(v1570 + 48);
              v1640 = *(_DWORD *)v1570;
            }
            v1622 = v1649;
          }
          while (v1640 <= (int)v1649);
        }
LABEL_1763:
        if (*(int *)(v1570 + 56) < 2)
          goto LABEL_1850;
        v1641 = *(_QWORD *)(v1570 + 96);
        v2499 = v1577;
        v2482 = v1571;
        if (v1641)
          goto LABEL_1822;
        v1642 = *(char **)(v1570 + 72);
        v1643 = *(char **)(v1570 + 80);
        v1644 = ((v1643 - v1642) << 7) - 1;
        if (v1643 == v1642)
          v1644 = 0;
        if ((unint64_t)(v1644 - *(_QWORD *)(v1570 + 104)) >= 0x400)
        {
          *(_QWORD *)(v1570 + 96) = 1024;
          *(_QWORD *)v2599 = *((_QWORD *)v1643 - 1);
          *(_QWORD *)(v1570 + 80) = v1643 - 8;
          sub_1C98EA8C8((void **)(v1570 + 64), v2599);
          goto LABEL_1821;
        }
        v1650 = *(char **)(v1570 + 88);
        v1651 = *(char **)(v1570 + 64);
        if (v1643 - v1642 < (unint64_t)(v1650 - v1651))
        {
          if (v1642 == v1651)
          {
            *(_QWORD *)v2599 = operator new(0x1000uLL);
            sub_1C98EAA6C((char **)(v1570 + 64), v2599);
            v1656 = *(_QWORD *)(v1570 + 80);
            *(_QWORD *)v2599 = *(_QWORD *)(v1656 - 8);
            *(_QWORD *)(v1570 + 80) = v1656 - 8;
          }
          else
          {
            *(_QWORD *)v2599 = operator new(0x1000uLL);
          }
          sub_1C98EA8C8((void **)(v1570 + 64), v2599);
          if (*(_QWORD *)(v1570 + 80) - *(_QWORD *)(v1570 + 72) == 8)
            *(_QWORD *)(v1570 + 96) = 512;
          else
            *(_QWORD *)(v1570 + 96) += 1024;
          goto LABEL_1821;
        }
        if (v1650 == v1651)
          v1652 = 1;
        else
          v1652 = (v1650 - v1651) >> 2;
        if (!(v1652 >> 61))
        {
          v1653 = (char *)operator new(8 * v1652);
          v1654 = operator new(0x1000uLL);
          if (v1652)
          {
            v1655 = &v1653[8 * v1652];
          }
          else
          {
            v1657 = (char *)operator new(8uLL);
            v1655 = v1657 + 8;
            operator delete(v1653);
            v1642 = *(char **)(v1570 + 72);
            v1643 = *(char **)(v1570 + 80);
            v1653 = v1657;
          }
          *(_QWORD *)v1653 = v1654;
          v1658 = v1653 + 8;
          v1659 = v1653;
          if (v1642 == v1643)
          {
LABEL_1790:
            v1660 = *(void **)(v1570 + 64);
            *(_QWORD *)(v1570 + 64) = v1653;
            *(_QWORD *)(v1570 + 72) = v1659;
            *(_QWORD *)(v1570 + 80) = v1658;
            *(_QWORD *)(v1570 + 88) = v1655;
            if (v1658 - v1659 == 8)
              v1661 = 512;
            else
              v1661 = *(_QWORD *)(v1570 + 96) + 1024;
            v952 = v2449;
            *(_QWORD *)(v1570 + 96) = v1661;
            if (v1660)
              operator delete(v1660);
LABEL_1821:
            v1641 = *(_QWORD *)(v1570 + 96);
LABEL_1822:
            v1686 = *(_QWORD *)(v1570 + 72);
            v1685 = *(_QWORD *)(v1570 + 80);
            v1687 = (_QWORD *)(v1686 + 8 * (v1641 >> 10));
            v1688 = *v1687 + 4 * (v1641 & 0x3FF);
            if (v1685 == v1686)
              v1688 = 0;
            if (v1688 == *v1687)
              v1688 = *(v1687 - 1) + 4096;
            *(float *)(v1688 - 4) = v1573;
            v1689 = v1641 - 1;
            v1690 = *(_QWORD *)(v1570 + 104);
            v1691 = v1690 + 1;
            *(_QWORD *)(v1570 + 96) = v1641 - 1;
            *(_QWORD *)(v1570 + 104) = v1690 + 1;
            if ((int)v1690 + 1 < 1)
            {
              v1694 = 0.0;
            }
            else
            {
              v1692 = *(float *)(v1570 + 112);
              v1693 = (v1690 + 1);
              v1694 = 0.0;
              v1695 = v1641 - 1;
              do
              {
                v1696 = fmodf(*(float *)(*(_QWORD *)(v1686 + ((v1695 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v1695 & 0x3FF))- v1573, v1692);
                if (v1696 > (float)(v1692 * v1208))
                {
                  v1696 = v1696 - v1692;
                }
                else if (v1696 <= (float)(v1692 * -0.5))
                {
                  v1696 = v1692 + v1696;
                }
                v1697 = fabsf(v1696);
                if (v1694 < v1697)
                  v1694 = v1697;
                ++v1695;
                --v1693;
              }
              while (v1693);
            }
            v1698 = expf(-fminf(v1694 * *(float *)(v1570 + 60), 10.0));
            v1699 = v1689 >> 7;
            if ((int)v1691 < 1)
            {
              v1573 = *(float *)(*(_QWORD *)(v1686 + (v1699 & 0x1FFFFFFFFFFFFF8)) + 4 * (v1689 & 0x3FF));
              v1516 = v2454;
            }
            else
            {
              v1700 = v1698;
              v1701 = 0.0;
              v1702 = 1.0;
              v1703 = v1691;
              v1516 = v2454;
              do
              {
                v1701 = v1701 + v1702;
                v1702 = v1700 * v1702;
                --v1703;
              }
              while (v1703);
              v1704 = *(float *)(*(_QWORD *)(v1686 + (v1699 & 0x1FFFFFFFFFFFFF8)) + 4 * (v1689 & 0x3FF));
              if ((int)v1691 < 2)
              {
                v1573 = *(float *)(*(_QWORD *)(v1686 + (v1699 & 0x1FFFFFFFFFFFFF8)) + 4 * (v1689 & 0x3FF));
              }
              else
              {
                v1705 = *(float *)(v1570 + 112);
                v1706 = v1705 * v1208;
                v1707 = v1691 - 1;
                v1573 = v1704;
                v1708 = 1.0 / v1701;
                do
                {
                  v1709 = fmodf(*(float *)(*(_QWORD *)(v1686 + ((v1641 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v1641 & 0x3FF))- v1704, v1705);
                  if (v1709 > v1706)
                  {
                    v1709 = v1709 - v1705;
                  }
                  else if (v1709 <= (float)(v1705 * -0.5))
                  {
                    v1709 = v1705 + v1709;
                  }
                  v1708 = v1700 * v1708;
                  v1573 = v1573 + (float)(v1708 * v1709);
                  ++v1641;
                  --v1707;
                }
                while (v1707);
              }
            }
            v1710 = *(_DWORD *)(v1570 + 56);
            v1208 = 0.5;
            if (v1710 <= (int)v1691)
            {
              v1571 = v2482;
              v1577 = v2499;
              do
              {
                v1770 = *(_QWORD *)(v1570 + 72);
                v1771 = ((v1685 - v1770) << 7) - 1;
                v1772 = *(_QWORD *)(v1570 + 96);
                if (v1685 == v1770)
                  v1771 = 0;
                v1773 = v1691 - 1;
                *(_QWORD *)(v1570 + 104) = v1691 - 1;
                if ((unint64_t)(v1771 - (v1691 + v1772) + 1) >= 0x800)
                {
                  operator delete(*(void **)(v1685 - 8));
                  v1577 = v2499;
                  v1685 = *(_QWORD *)(v1570 + 80) - 8;
                  *(_QWORD *)(v1570 + 80) = v1685;
                  v1773 = *(_QWORD *)(v1570 + 104);
                  v1710 = *(_DWORD *)(v1570 + 56);
                }
                v1691 = v1773;
              }
              while (v1710 <= (int)v1773);
            }
            else
            {
              v1571 = v2482;
              v1577 = v2499;
            }
LABEL_1850:
            v1367 = keyg;
            v1711 = *keyg;
            *(_DWORD *)(v1711 + 40) = v1571;
            *(float32x4_t *)(v1711 + 44) = v1577;
            *(float *)(v1711 + 60) = v1573;
            *(_BYTE *)(v1711 + 64) = 1;
            *(_OWORD *)(v1711 + 65) = *(_OWORD *)v2608;
            *(_QWORD *)(v1711 + 80) = *(_QWORD *)&v2608[15];
            goto LABEL_1851;
          }
          while (2)
          {
            if (v1658 != v1655)
            {
              v1662 = v1659;
              v1663 = v1658;
              v1658 = v1655;
              goto LABEL_1793;
            }
            if (v1659 > v1653)
            {
              v1665 = (v1659 - v1653) >> 3;
              if (v1665 >= -1)
                v1666 = v1665 + 1;
              else
                v1666 = v1665 + 2;
              v1667 = v1666 >> 1;
              v1668 = &v1659[-8 * (v1666 >> 1)];
              v1669 = v1658;
              if (v1658 != v1659)
              {
                memmove(v1668, v1659, v1658 - v1659);
                v1669 = v1659;
              }
              v1663 = &v1668[v1658 - v1659];
              v1662 = &v1669[-8 * v1667];
              goto LABEL_1793;
            }
            v1670 = (v1658 - v1653) >> 2;
            if (v1658 == v1653)
              v1670 = 1;
            if (v1670 >> 61)
              break;
            v1671 = v1670 >> 2;
            v1672 = 8 * v1670;
            v1673 = (char *)operator new(8 * v1670);
            v1674 = v1673;
            v1662 = &v1673[8 * v1671];
            v1663 = v1662;
            v1675 = v1658 - v1659;
            if (v1658 != v1659)
            {
              v1663 = &v1662[v1675 & 0xFFFFFFFFFFFFFFF8];
              v1676 = v1675 - 8;
              if (v1676 >= 0x38)
              {
                if ((unint64_t)(&v1673[8 * v1671] - v1659) < 0x20)
                {
                  v1677 = &v1673[8 * v1671];
                  goto LABEL_1814;
                }
                v1678 = (v1676 >> 3) + 1;
                v1679 = 8 * (v1678 & 0x3FFFFFFFFFFFFFFCLL);
                v1677 = &v1662[v1679];
                v1680 = (__int128 *)(v1659 + 16);
                v1681 = &v1673[8 * v1671 + 16];
                v1682 = v1678 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v1683 = *v1680;
                  *((_OWORD *)v1681 - 1) = *(v1680 - 1);
                  *(_OWORD *)v1681 = v1683;
                  v1680 += 2;
                  v1681 += 32;
                  v1682 -= 4;
                }
                while (v1682);
                if (v1678 != (v1678 & 0x3FFFFFFFFFFFFFFCLL))
                {
                  v1659 += v1679;
                  goto LABEL_1814;
                }
              }
              else
              {
                v1677 = &v1673[8 * v1671];
                do
                {
LABEL_1814:
                  v1684 = *(_QWORD *)v1659;
                  v1659 += 8;
                  *(_QWORD *)v1677 = v1684;
                  v1677 += 8;
                }
                while (v1677 != v1663);
              }
            }
            v1658 = &v1673[v1672];
            if (v1653)
              operator delete(v1653);
            v1653 = v1674;
LABEL_1793:
            v1664 = *(_QWORD *)v1642;
            v1642 += 8;
            *(_QWORD *)v1663 = v1664;
            v1659 = v1662;
            v1655 = v1658;
            v1658 = v1663 + 8;
            if (v1642 == *(char **)(v1570 + 80))
              goto LABEL_1790;
            continue;
          }
        }
LABEL_2804:
        sub_1C9899D30();
      }
      while (2)
      {
        if (v1590 != v1587)
        {
          v1594 = v1591;
          v1595 = v1590;
          v1590 = v1587;
          goto LABEL_1718;
        }
        if (v1591 > v1585)
        {
          v1597 = (v1591 - v1585) >> 3;
          if (v1597 >= -1)
            v1598 = v1597 + 1;
          else
            v1598 = v1597 + 2;
          v1599 = v1598 >> 1;
          v1600 = &v1591[-8 * (v1598 >> 1)];
          v1601 = v1590;
          if (v1590 != v1591)
          {
            memmove(v1600, v1591, v1590 - v1591);
            v1577 = v2498;
            v1601 = v1591;
          }
          v1595 = &v1600[v1590 - v1591];
          v1594 = &v1601[-8 * v1599];
          goto LABEL_1718;
        }
        v1602 = (v1590 - v1585) >> 2;
        if (v1590 == v1585)
          v1602 = 1;
        if (v1602 >> 61)
          goto LABEL_2804;
        v1603 = v1602 >> 2;
        v1604 = 8 * v1602;
        v1605 = (char *)operator new(8 * v1602);
        v1606 = v1605;
        v1594 = &v1605[8 * v1603];
        v1595 = v1594;
        v1607 = v1590 - v1591;
        if (v1590 != v1591)
        {
          v1595 = &v1594[v1607 & 0xFFFFFFFFFFFFFFF8];
          v1608 = v1607 - 8;
          if (v1608 >= 0x38)
          {
            if ((unint64_t)(&v1605[8 * v1603] - v1591) < 0x20)
            {
              v1609 = &v1605[8 * v1603];
              goto LABEL_1739;
            }
            v1610 = (v1608 >> 3) + 1;
            v1611 = 8 * (v1610 & 0x3FFFFFFFFFFFFFFCLL);
            v1609 = &v1594[v1611];
            v1612 = (__int128 *)(v1591 + 16);
            v1613 = &v1605[8 * v1603 + 16];
            v1614 = v1610 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v1615 = *v1612;
              *((_OWORD *)v1613 - 1) = *(v1612 - 1);
              *(_OWORD *)v1613 = v1615;
              v1612 += 2;
              v1613 += 32;
              v1614 -= 4;
            }
            while (v1614);
            if (v1610 != (v1610 & 0x3FFFFFFFFFFFFFFCLL))
            {
              v1591 += v1611;
              goto LABEL_1739;
            }
          }
          else
          {
            v1609 = &v1605[8 * v1603];
            do
            {
LABEL_1739:
              v1616 = *(_QWORD *)v1591;
              v1591 += 8;
              *(_QWORD *)v1609 = v1616;
              v1609 += 8;
            }
            while (v1609 != v1595);
          }
        }
        v1590 = &v1605[v1604];
        if (v1585)
          operator delete(v1585);
        v1585 = v1606;
        v1577 = v2498;
LABEL_1718:
        v1596 = *(_QWORD *)v1579;
        v1579 += 8;
        *(_QWORD *)v1595 = v1596;
        v1591 = v1594;
        v1587 = v1590;
        v1590 = v1595 + 8;
        if (v1579 == *(char **)(v1570 + 24))
          goto LABEL_1715;
        continue;
      }
    }
    sub_1C98EDF94(buf);
    v1535 = v1521[19];
    v1521[19] = *(_QWORD *)buf;
    if (v1535)
    {
      v1536 = sub_1C98EAD50(v1535);
      MEMORY[0x1CAA44AFC](v1536, 0x10E0C4016A603E8);
    }
    v1521 = (_QWORD *)*v1367;
    if (*(_QWORD *)(*v1367 + 128))
      goto LABEL_1676;
LABEL_1851:
    memset(&v2599[8], 0, 24);
    if (v2440)
    {
      v1712 = *(_QWORD *)(*a2 + 16);
      v1713 = *(_QWORD *)(*v1367 + 8);
      v1714 = *(_QWORD *)(*v1367 + 16);
      *(_QWORD *)v2608 = v1713;
      *(_QWORD *)&v2608[8] = v1714;
      if (v1714)
      {
        v1715 = (unint64_t *)(v1714 + 8);
        do
          v1716 = __ldxr(v1715);
        while (__stxr(v1716 + 1, v1715));
      }
      v1718 = *(_QWORD *)(v1713 + 48);
      v1717 = *(std::__shared_weak_count **)(v1713 + 56);
      if (v1717)
      {
        v1719 = (unint64_t *)&v1717->__shared_owners_;
        do
          v1720 = __ldxr(v1719);
        while (__stxr(v1720 + 1, v1719));
      }
      v2512 = v1718;
      v2513 = v1717;
      *(_QWORD *)&buf[8] = 0;
      *(_QWORD *)buf = 0;
      (*(void (**)(uint64_t, uint64_t *, _BYTE *, _QWORD))(*(_QWORD *)v1712 + 32))(v1712, &v2512, v2599, 0);
      v1721 = v2513;
      if (v2513)
      {
        v1722 = (unint64_t *)&v2513->__shared_owners_;
        do
          v1723 = __ldaxr(v1722);
        while (__stlxr(v1723 - 1, v1722));
        if (!v1723)
        {
          ((void (*)(std::__shared_weak_count *))v1721->__on_zero_shared)(v1721);
          std::__shared_weak_count::__release_weak(v1721);
        }
      }
      v1724 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v1725 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v1726 = __ldaxr(v1725);
        while (__stlxr(v1726 - 1, v1725));
        if (!v1726)
        {
          ((void (*)(std::__shared_weak_count *))v1724->__on_zero_shared)(v1724);
          std::__shared_weak_count::__release_weak(v1724);
        }
      }
      v1727 = *(std::__shared_weak_count **)&v2608[8];
      if (*(_QWORD *)&v2608[8])
      {
        v1728 = (unint64_t *)(*(_QWORD *)&v2608[8] + 8);
        do
          v1729 = __ldaxr(v1728);
        while (__stlxr(v1729 - 1, v1728));
        if (!v1729)
        {
          ((void (*)(std::__shared_weak_count *))v1727->__on_zero_shared)(v1727);
          std::__shared_weak_count::__release_weak(v1727);
        }
      }
    }
    v1730 = v2536;
    v1731 = 2 * *((_DWORD *)v2536 + 52);
    v1732 = 4 * v1731;
    v1733 = (v1732 + 31) & 0x7FFFFFFE0;
    *(_QWORD *)v2592 = 0;
    *(_QWORD *)&v2592[8] = v1733 >> 2;
    *(_QWORD *)buf = 0;
    malloc_type_posix_memalign((void **)buf, 0x20uLL, v1733, 0x49090899uLL);
    *(_QWORD *)v2592 = *(_QWORD *)buf;
    if (v1731)
      memcpy(*(void **)buf, *((const void **)v1730 + 24), v1732);
    v1734 = *((unsigned int *)v1730 + 52);
    *(_DWORD *)&v2592[16] = v1734;
    v1735 = (uint64_t)v1516 + 36 * v952;
    v1736 = *(_OWORD *)(v1735 + 16);
    v2510[0] = *(_OWORD *)v1735;
    v2510[1] = v1736;
    v2483 = v1735;
    v2511 = *(_DWORD *)(v1735 + 32);
    if ((_DWORD)v1734)
    {
      v1737 = 0;
      v1738 = *(_QWORD *)v2592;
      v1739 = 2 * v1734;
      do
      {
        v1740 = (void **)(v1738 + 4 * (v1737 & 0xFFFFFFFE));
        __p[0] = *v1740;
        LODWORD(__p[1]) = 1065353216;
        *(_QWORD *)buf = v2510;
        *(_QWORD *)&buf[8] = __p;
        *(_QWORD *)v2608 = 0;
        *(_DWORD *)&v2608[8] = 0;
        sub_1C98A266C((float *)v2608, (float **)buf);
        v1741 = (const float *)&v2608[8];
        v1742 = vld1_dup_f32(v1741);
        *v1740 = (void *)vdiv_f32(*(float32x2_t *)v2608, v1742);
        v1737 += 2;
      }
      while (v1739 != v1737);
    }
    kdebug_trace();
    v1743 = v2538;
    v1744 = *(_QWORD *)v2538;
    v1745 = v2536[19];
    v1746 = *(float **)(*a2 + 8);
    v1747 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a2 + 160) + 32))(*(_QWORD *)(*a2 + 160));
    kdebug_trace();
    if (v1747)
      v1748 = 0;
    else
      v1748 = 100;
    v1749 = *(_QWORD *)(*(_QWORD *)v1743 + 128);
    v2501 = v1744;
    if (!v1749)
    {
      v1752 = 7;
      v1753 = 0;
      v1754 = 0;
      v1755 = 1;
      v1756 = 0;
      goto LABEL_1986;
    }
    if (v1749 != 1)
    {
      v1757 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1743 + 96)
                                    + (((unint64_t)(*(_QWORD *)(*(_QWORD *)v1743 + 120) + 1) >> 4) & 0xFFFFFFFFFFFFFF8))
                        + 32 * ((*(_QWORD *)(*(_QWORD *)v1743 + 120) + 1) & 0x7F));
      v1758 = *v1757;
      v1759 = (std::__shared_weak_count *)v1757[1];
      if (v1759)
      {
        v1760 = (unint64_t *)&v1759->__shared_owners_;
        do
          v1761 = __ldxr(v1760);
        while (__stxr(v1761 + 1, v1760));
        v1762 = *(_DWORD *)(v1758 + 248);
        v1763 = (unint64_t *)&v1759->__shared_owners_;
        do
          v1764 = __ldaxr(v1763);
        while (__stlxr(v1764 - 1, v1763));
        if (v1764)
        {
          v1751 = v1746[14];
          v1750 = v1746[15];
          if (v1762)
            goto LABEL_1892;
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v1759->__on_zero_shared)(v1759);
          std::__shared_weak_count::__release_weak(v1759);
          v1751 = v1746[14];
          v1750 = v1746[15];
          if (v1762)
            goto LABEL_1892;
        }
      }
      else
      {
        v1751 = v1746[14];
        v1750 = v1746[15];
        if (*(_DWORD *)(v1758 + 248))
          goto LABEL_1892;
      }
      v1767 = 1;
      if (v1750 >= v1745)
        goto LABEL_1906;
LABEL_1895:
      v1768 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
      if ((v1768 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
      {
        qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
        __cxa_guard_release(&qword_1ED52ACD0);
      }
      v1769 = qword_1ED52ACE0;
      v952 = v2449;
      if (!os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_DEBUG))
      {
        v1754 = 0;
        v1753 = 0;
        v1755 = 1;
        v1752 = 1;
        goto LABEL_1974;
      }
      v1932 = *(_QWORD **)(*(_QWORD *)v1743 + 24);
      v1933 = *(std::__shared_weak_count **)(*(_QWORD *)v1743 + 32);
      if (v1933)
      {
        v1934 = (unint64_t *)&v1933->__shared_owners_;
        do
          v1935 = __ldxr(v1934);
        while (__stxr(v1935 + 1, v1934));
      }
      v1936 = "(null)";
      if (v1932)
        v1936 = (const char *)(*v1932 + 160);
      if (v1933)
      {
        v1937 = (unint64_t *)&v1933->__shared_owners_;
        do
          v1938 = __ldaxr(v1937);
        while (__stlxr(v1938 - 1, v1937));
        if (!v1938)
        {
          ((void (*)(std::__shared_weak_count *))v1933->__on_zero_shared)(v1933);
          std::__shared_weak_count::__release_weak(v1933);
        }
      }
      *(_DWORD *)buf = 134218498;
      *(double *)&buf[4] = v1745;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v1750;
      *(_WORD *)&buf[22] = 2080;
      *(_QWORD *)&buf[24] = v1936;
      _os_log_debug_impl(&dword_1C9870000, v1769, OS_LOG_TYPE_DEBUG, "Resetting face due to ML failure coefficient (%g > %g, user %s)", buf, 0x20u);
      v1749 = 0;
      v1753 = 0;
      v1754 = 0;
      v1756 = 0;
      v1752 = 1;
      v1755 = 1;
      if (v1751 < v1745)
        goto LABEL_1985;
      goto LABEL_1986;
    }
    v1751 = v1746[14];
    v1750 = v1746[15];
LABEL_1892:
    v1765 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
    if ((v1765 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
    {
      qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
      __cxa_guard_release(&qword_1ED52ACD0);
    }
    v1751 = v1751 + -0.1;
    v1750 = v1750 + -0.1;
    v1766 = qword_1ED52ACE0;
    if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_DEBUG))
    {
      v1913 = *(_QWORD **)(*(_QWORD *)v1743 + 24);
      v1914 = *(std::__shared_weak_count **)(*(_QWORD *)v1743 + 32);
      if (v1914)
      {
        v1915 = (unint64_t *)&v1914->__shared_owners_;
        do
          v1916 = __ldxr(v1915);
        while (__stxr(v1916 + 1, v1915));
      }
      v1917 = "(null)";
      if (v1913)
        v1917 = (const char *)(*v1913 + 160);
      if (v1914)
      {
        v1918 = (unint64_t *)&v1914->__shared_owners_;
        do
          v1919 = __ldaxr(v1918);
        while (__stlxr(v1919 - 1, v1918));
        if (!v1919)
        {
          ((void (*)(std::__shared_weak_count *))v1914->__on_zero_shared)(v1914);
          std::__shared_weak_count::__release_weak(v1914);
        }
      }
      *(_DWORD *)buf = 134218242;
      *(double *)&buf[4] = v1750;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v1917;
      _os_log_debug_impl(&dword_1C9870000, v1766, OS_LOG_TYPE_DEBUG, "Set network failure threshold to %f; due to previous error detected (user %s).",
        buf,
        0x16u);
    }
    v1767 = 0;
    if (v1750 < v1745)
      goto LABEL_1895;
LABEL_1906:
    if (v1747)
    {
      if (v1746[34] >= v1745)
      {
        LODWORD(v1748) = 0;
        v1776 = 1;
        v1777 = *(_DWORD *)&v2592[16];
        if (!*(_DWORD *)&v2592[16])
          goto LABEL_2607;
      }
      else
      {
        v1774 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
        if ((v1774 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
        {
          qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
          __cxa_guard_release(&qword_1ED52ACD0);
        }
        v1775 = qword_1ED52ACE0;
        if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_DEBUG))
        {
          v2061 = v1746[34];
          v2062 = *(_QWORD **)(*(_QWORD *)v1743 + 24);
          v2063 = *(std::__shared_weak_count **)(*(_QWORD *)v1743 + 32);
          if (v2063)
          {
            v2064 = (unint64_t *)&v2063->__shared_owners_;
            do
              v2065 = __ldxr(v2064);
            while (__stxr(v2065 + 1, v2064));
          }
          v2066 = "(null)";
          if (v2062)
            v2066 = (const char *)(*v2062 + 160);
          if (v2063)
          {
            v2067 = (unint64_t *)&v2063->__shared_owners_;
            do
              v2068 = __ldaxr(v2067);
            while (__stlxr(v2068 - 1, v2067));
            if (!v2068)
            {
              ((void (*)(std::__shared_weak_count *))v2063->__on_zero_shared)(v2063);
              std::__shared_weak_count::__release_weak(v2063);
            }
          }
          *(_DWORD *)buf = 134218498;
          *(double *)&buf[4] = v1745;
          *(_WORD *)&buf[12] = 2048;
          *(double *)&buf[14] = v2061;
          *(_WORD *)&buf[22] = 2080;
          *(_QWORD *)&buf[24] = v2066;
          _os_log_debug_impl(&dword_1C9870000, v1775, OS_LOG_TYPE_DEBUG, "Skipping recognition due to ML failure coefficient (%g > %g, user %s).", buf, 0x20u);
        }
        v1776 = 0;
        LODWORD(v1748) = 1;
        v1777 = *(_DWORD *)&v2592[16];
        if (!*(_DWORD *)&v2592[16])
        {
          while (1)
LABEL_2607:
            ;
        }
      }
    }
    else
    {
      v1776 = 0;
      LODWORD(v1748) = 100;
      v1777 = *(_DWORD *)&v2592[16];
      if (!*(_DWORD *)&v2592[16])
        goto LABEL_2607;
    }
    v1778 = (2 * v1777);
    v1779 = **(float **)v2592;
    if ((_DWORD)v1778 == 2)
    {
      v1780 = *(float *)(*(_QWORD *)v2592 + 4);
      v1781 = **(float **)v2592;
      v1782 = v1780;
    }
    else
    {
      v1783 = (float *)(*(_QWORD *)v2592 + 8);
      v1784 = 4 * v1778 - 8;
      v1785 = v1784;
      v1786 = (float *)(*(_QWORD *)v2592 + 8);
      v1787 = **(float **)v2592;
      do
      {
        v1788 = *v1786;
        v1786 += 2;
        v1789 = v1788;
        if (v1788 < v1787)
          v1787 = v1789;
        v1785 -= 8;
      }
      while (v1785);
      v1782 = *(float *)(*(_QWORD *)v2592 + 4);
      v1790 = (float *)(*(_QWORD *)v2592 + 12);
      v1791 = v1784;
      v1792 = (float *)(*(_QWORD *)v2592 + 12);
      v1780 = v1782;
      do
      {
        v1793 = *v1792;
        v1792 += 2;
        v1794 = v1793;
        if (v1793 < v1780)
          v1780 = v1794;
        v1791 -= 8;
      }
      while (v1791);
      v1795 = v1784;
      v1781 = **(float **)v2592;
      do
      {
        v1796 = *v1783;
        v1783 += 2;
        v1797 = v1796;
        if (v1781 < v1796)
          v1781 = v1797;
        v1795 -= 8;
      }
      while (v1795);
      do
      {
        v1798 = *v1790;
        v1790 += 2;
        v1799 = v1798;
        if (v1782 < v1798)
          v1782 = v1799;
        v1784 -= 8;
      }
      while (v1784);
      v1779 = v1787;
    }
    v1800 = v1781 - v1779;
    v1801 = v1782 - v1780;
    if ((float)(v1781 - v1779) >= v1801)
      v1802 = v1781 - v1779;
    else
      v1802 = v1801;
    v1803.f32[0] = v1779 - (float)((float)(v1802 - v1800) * v1208);
    v1803.f32[1] = v1780 - (float)((float)(v1802 - v1801) * v1208);
    v1804 = vadd_f32(v1803, (float32x2_t)0x3F0000003F000000);
    __asm { FMOV            V0.2S, #1.0 }
    v1806 = vdiv_f32(_D0, vcvt_f32_s32(vmax_s32(*(int32x2_t *)((char *)&v2559 + 8), (int32x2_t)0x100000001)));
    v1807 = (float)(v1746[16] * -2.0) + 1.0;
    if (v1807 <= 1.0)
      v1808 = (float)(v1746[16] * -2.0) + 1.0;
    else
      v1808 = 1.0;
    if (v1807 < 0.0)
      v1808 = 0.0;
    v1809 = vmul_n_f32(v1806, v1802);
    v1810 = vmul_f32(v1804, v1806);
    v1811 = vsub_f32(v1810, vmul_n_f32(v1809, (float)(v1808 + -1.0) * v1208));
    keyh = v1767;
    if (v1811.f32[0] < 0.0)
    {
      v1814 = 0;
    }
    else
    {
      v1812 = vadd_f32(v1811, vmul_n_f32(v1809, v1808));
      v1814 = v1811.f32[1] >= 0.0 && v1812.f32[0] <= 1.0 && v1812.f32[1] <= 1.0;
    }
    v1815 = (float)(v1746[17] * -2.0) + 1.0;
    if (v1815 <= 1.0)
      v1816 = (float)(v1746[17] * -2.0) + 1.0;
    else
      v1816 = 1.0;
    if (v1815 >= 0.0)
      v1817 = v1816;
    else
      v1817 = 0.0;
    v1818 = vsub_f32(v1810, vmul_n_f32(v1809, (float)(v1817 + -1.0) * v1208));
    v1819 = vmul_n_f32(v1809, v1817);
    v1820 = v1818.f32[0] < 0.0;
    if (v1818.f32[1] < 0.0)
      v1820 = 1;
    v1821 = vmvn_s8((int8x8_t)vcge_f32(_D0, vadd_f32(v1818, v1819)));
    v1822 = v1820 | v1821.i8[0] | v1821.i8[4];
    if ((v1822 & 1) != 0)
    {
      v1823 = v1814;
      v1824 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
      if ((v1824 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
      {
        qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
        __cxa_guard_release(&qword_1ED52ACD0);
      }
      v1825 = qword_1ED52ACE0;
      if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_DEBUG))
      {
        v2054 = *(_QWORD **)(*(_QWORD *)v1743 + 24);
        v2055 = *(std::__shared_weak_count **)(*(_QWORD *)v1743 + 32);
        if (v2055)
        {
          v2056 = (unint64_t *)&v2055->__shared_owners_;
          do
            v2057 = __ldxr(v2056);
          while (__stxr(v2057 + 1, v2056));
        }
        v2058 = "(null)";
        if (v2054)
          v2058 = (const char *)(*v2054 + 160);
        if (v2055)
        {
          v2059 = (unint64_t *)&v2055->__shared_owners_;
          do
            v2060 = __ldaxr(v2059);
          while (__stlxr(v2060 - 1, v2059));
          if (!v2060)
          {
            ((void (*)(std::__shared_weak_count *))v2055->__on_zero_shared)(v2055);
            std::__shared_weak_count::__release_weak(v2055);
          }
        }
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v2058;
        _os_log_debug_impl(&dword_1C9870000, v1825, OS_LOG_TYPE_DEBUG, "Resetting face due to bounding box outside of the image (user %s)", buf, 0xCu);
      }
      v1752 = 2;
      v1826 = 2;
      v1827 = 2;
      v1814 = v1823;
    }
    else
    {
      v1827 = 0;
      v1752 = 7;
      v1826 = 4;
    }
    v1828 = atomic_load((unsigned __int8 *)&qword_1EF9212F8);
    if ((v1828 & 1) == 0 && __cxa_guard_acquire(&qword_1EF9212F8))
    {
      dword_1EF9212F0 = 1059760811;
      __cxa_guard_release(&qword_1EF9212F8);
    }
    v1829 = *(_QWORD **)v1743;
    v1830 = *(float32x2_t *)(*(_QWORD *)v1743 + 52);
    v1831 = vsub_f32(*(float32x2_t *)(*(_QWORD *)v1743 + 44), vmul_n_f32(v1830, (float)(*(float *)&dword_1EF9212F0 + -1.0) * v1208));
    v1832 = vmul_n_f32(v1830, *(float *)&dword_1EF9212F0);
    __asm { FMOV            V5.2D, #-0.5 }
    v1834 = vaddq_f64(vcvtq_f64_f32(vcvt_f32_s32(*(int32x2_t *)((char *)&v2559 + 8))), _Q5);
    v1835 = vaddq_f64(vcvtq_f64_f32(v1831), vcvtq_f64_f32(v1832));
    *(float32x2_t *)&v1834.f64[0] = vcvt_f32_f64(vsubq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v1835, v1834), (int8x16_t)v1834, (int8x16_t)v1835), vcvtq_f64_f32((float32x2_t)vbsl_s8((int8x8_t)vcge_f32((float32x2_t)0xBF000000BF000000, v1831), (int8x8_t)0xBF000000BF000000, (int8x8_t)v1831))));
    v1836 = vcltz_f32(*(float32x2_t *)&v1834.f64[0]);
    LODWORD(v1837) = vmul_lane_f32(*(float32x2_t *)&v1834.f64[0], *(float32x2_t *)&v1834.f64[0], 1).u32[0];
    if (((v1836.i8[0] | v1836.i8[4]) & 1) != 0)
      v1837 = 0.0;
    v1838 = v1832.f32[1] < 0.0 || v1832.f32[0] < 0.0;
    v1839 = vmuls_lane_f32(v1832.f32[0], v1832, 1);
    if (v1838)
      v1839 = 0.0;
    if ((v1776 & ((float)(v1837 / v1839) < 1.0)) != 0)
      v1748 = 2;
    else
      v1748 = v1748;
    if ((v1822 & 1) == 0)
    {
      v1840 = v1829[16];
      if (v1840 <= 2)
      {
        v1841 = v1814;
        v1842 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
        if ((v1842 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
        {
          qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
          __cxa_guard_release(&qword_1ED52ACD0);
        }
        v1843 = qword_1ED52ACE0;
        v952 = v2449;
        if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_debug_impl(&dword_1C9870000, v1843, OS_LOG_TYPE_DEBUG, "Filling up buffer with 3 frames", buf, 2u);
        }
        v1755 = 0;
        v1753 = 0;
        if ((_DWORD)v1748)
          v1748 = v1748;
        else
          v1748 = 7;
        v1754 = 256;
        if (!v1841)
          goto LABEL_1984;
        goto LABEL_1974;
      }
      v1907 = (__int128 **)(*(_QWORD *)(v1829[12] + ((v1829[15] >> 4) & 0xFFFFFFFFFFFFFF8)) + 32
                                                                                              * (v1829[15] & 0x7FLL));
      v1909 = *v1907;
      v1908 = (unint64_t *)v1907[1];
      if (v1908)
      {
        pixelBufferb = (CVPixelBufferRef)v1908;
        v1910 = v1908 + 1;
        do
          v1911 = __ldxr(v1910);
        while (__stxr(v1911 + 1, v1910));
        v1829 = *(_QWORD **)v1743;
        v1840 = *(_QWORD *)(*(_QWORD *)v1743 + 128);
        if (v1840 < 2)
        {
          v1912 = 0;
          v2420 = 0;
LABEL_2079:
          v2413 = 0;
          v1926 = 0;
          goto LABEL_2080;
        }
      }
      else
      {
        pixelBufferb = 0;
      }
      v1920 = (__int128 **)(*(_QWORD *)(v1829[12] + (((unint64_t)(v1829[15] + 1) >> 4) & 0xFFFFFFFFFFFFFF8))
                          + 32 * ((v1829[15] + 1) & 0x7F));
      v1912 = *v1920;
      v1921 = (std::__shared_weak_count *)v1920[1];
      if (v1921)
      {
        v2420 = v1921;
        v1922 = (unint64_t *)&v1921->__shared_owners_;
        do
          v1923 = __ldxr(v1922);
        while (__stxr(v1923 + 1, v1922));
        v1829 = *(_QWORD **)v1743;
        if (*(_QWORD *)(*(_QWORD *)v1743 + 128) < 3uLL)
          goto LABEL_2079;
      }
      else
      {
        v2420 = 0;
        if (v1840 < 3)
          goto LABEL_2079;
      }
      v1924 = (__int128 **)(*(_QWORD *)(v1829[12] + (((unint64_t)(v1829[15] + 2) >> 4) & 0xFFFFFFFFFFFFFF8))
                          + 32 * ((v1829[15] + 2) & 0x7F));
      v1926 = *v1924;
      v1925 = (std::__shared_weak_count *)v1924[1];
      if (!v1925)
      {
        v2413 = 0;
        v1929 = *((_DWORD *)v1909 + 6);
        if (v1929)
          goto LABEL_2081;
        goto LABEL_2117;
      }
      v2413 = v1925;
      v1927 = (unint64_t *)&v1925->__shared_owners_;
      do
        v1928 = __ldxr(v1927);
      while (__stxr(v1928 + 1, v1927));
LABEL_2080:
      v1929 = *((_DWORD *)v1909 + 6);
      if (v1929)
      {
LABEL_2081:
        if (v1929 != 1)
          goto LABEL_2806;
        v1930 = *v1909;
        *(_QWORD *)&buf[16] = *((_QWORD *)v1909 + 2);
        *(_OWORD *)buf = v1930;
        v1931 = CMTimeGetSeconds((CMTime *)buf);
LABEL_2118:
        v1955 = v1931 * 1000.0;
        v1956 = *((_DWORD *)v1912 + 6);
        if (v1956)
        {
          if (v1956 != 1)
            goto LABEL_2806;
          v1957 = *v1912;
          *(_QWORD *)&buf[16] = *((_QWORD *)v1912 + 2);
          *(_OWORD *)buf = v1957;
          v1958 = CMTimeGetSeconds((CMTime *)buf);
          v1959 = *((_DWORD *)v1912 + 6);
          v1960 = v1955 + v1958 * -1000.0;
          *(float *)&v1960 = v1960;
          v2436 = v1960;
          if (v1959)
          {
            if (v1959 != 1)
              goto LABEL_2806;
            v1961 = *v1912;
            *(_QWORD *)&buf[16] = *((_QWORD *)v1912 + 2);
            *(_OWORD *)buf = v1961;
            v1962 = CMTimeGetSeconds((CMTime *)buf);
LABEL_2125:
            v1964 = *((_DWORD *)v1926 + 6);
            v2411 = v1814;
            v2409 = v1962;
            if (v1964)
            {
              if (v1964 != 1)
                goto LABEL_2806;
              v1965 = *v1926;
              *(_QWORD *)&buf[16] = *((_QWORD *)v1926 + 2);
              *(_OWORD *)buf = v1965;
              v1966 = CMTimeGetSeconds((CMTime *)buf);
            }
            else
            {
              v1966 = *(double *)v1926;
            }
            v2406 = v1966;
            *(_DWORD *)&buf[28] = 0;
            *(_DWORD *)&buf[12] = 0;
            *(_QWORD *)&buf[20] = 0;
            *(_QWORD *)&buf[4] = 0;
            *(_DWORD *)buf = 1065353216;
            *(_DWORD *)&buf[16] = 1065353216;
            *(_DWORD *)&buf[32] = 1065353216;
            *(_QWORD *)&buf[36] = 0;
            *(_DWORD *)&buf[44] = 0;
            *(_QWORD *)v2608 = &v2561[4];
            *(_QWORD *)&v2608[8] = v1909 + 2;
            v2407 = v1909 + 2;
            sub_1C98A24C0((uint64_t)buf, (float **)v2608);
            __p[0] = &v2561[4];
            __p[1] = (char *)v1909 + 68;
            *(_QWORD *)&v2608[4] = 0;
            *(_DWORD *)&v2608[12] = 0;
            sub_1C98A266C((float *)&v2608[4], (float **)__p);
            *(float32x2_t *)&buf[36] = vadd_f32(*(float32x2_t *)&v2608[4], v2562);
            *(float *)&buf[44] = *(float *)&v2608[12] + v2563;
            v1967 = v1746[39];
            if ((keyh & 1) == 0)
            {
              v1968 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
              if ((v1968 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
              {
                qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
                __cxa_guard_release(&qword_1ED52ACD0);
              }
              v1967 = v1967 + -30.0;
              v1969 = qword_1ED52ACE0;
              if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_DEBUG))
              {
                v2431 = v1909;
                v2210 = *(_QWORD **)(*(_QWORD *)v1743 + 24);
                v2211 = *(std::__shared_weak_count **)(*(_QWORD *)v1743 + 32);
                if (v2211)
                {
                  v2212 = (unint64_t *)&v2211->__shared_owners_;
                  do
                    v2213 = __ldxr(v2212);
                  while (__stxr(v2213 + 1, v2212));
                }
                v2214 = "(null)";
                if (v2210)
                  v2214 = (const char *)(*v2210 + 160);
                if (v2211)
                {
                  v2215 = (unint64_t *)&v2211->__shared_owners_;
                  do
                    v2216 = __ldaxr(v2215);
                  while (__stlxr(v2216 - 1, v2215));
                  if (!v2216)
                  {
                    ((void (*)(std::__shared_weak_count *))v2211->__on_zero_shared)(v2211);
                    std::__shared_weak_count::__release_weak(v2211);
                  }
                }
                *(_DWORD *)v2608 = 134218242;
                *(double *)&v2608[4] = v1967;
                *(_WORD *)&v2608[12] = 2080;
                *(_QWORD *)&v2608[14] = v2214;
                _os_log_debug_impl(&dword_1C9870000, v1969, OS_LOG_TYPE_DEBUG, "Decreasing max distance for tracking to %f mm; due to previous error detected (user %s).",
                  v2608,
                  0x16u);
                v1909 = v2431;
              }
            }
            if (*(float *)&buf[44] <= v1967)
            {
              v1755 = 0;
              v1826 = v1827;
            }
            else
            {
              v1970 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
              if ((v1970 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
              {
                qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
                __cxa_guard_release(&qword_1ED52ACD0);
              }
              v1971 = qword_1ED52ACE0;
              if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_DEBUG))
              {
                v2217 = *(_QWORD **)(*(_QWORD *)v1743 + 24);
                v2218 = *(std::__shared_weak_count **)(*(_QWORD *)v1743 + 32);
                if (v2218)
                {
                  v2219 = (unint64_t *)&v2218->__shared_owners_;
                  do
                    v2220 = __ldxr(v2219);
                  while (__stxr(v2220 + 1, v2219));
                }
                v2221 = "(null)";
                if (v2217)
                  v2221 = (const char *)(*v2217 + 160);
                if (v2218)
                {
                  v2222 = (unint64_t *)&v2218->__shared_owners_;
                  do
                    v2223 = __ldaxr(v2222);
                  while (__stlxr(v2223 - 1, v2222));
                  if (!v2223)
                  {
                    ((void (*)(std::__shared_weak_count *))v2218->__on_zero_shared)(v2218);
                    std::__shared_weak_count::__release_weak(v2218);
                  }
                }
                *(_DWORD *)v2608 = 136315138;
                *(_QWORD *)&v2608[4] = v2221;
                _os_log_debug_impl(&dword_1C9870000, v1971, OS_LOG_TYPE_DEBUG, "Resetting due to face too far from camera (user %s)", v2608, 0xCu);
              }
              v1755 = 1;
            }
            v1972 = *(float *)&buf[44];
            v1974 = v1746[37];
            v1973 = v1746[38];
            v2430 = v1926;
            if ((keyh & 1) == 0)
            {
              v1975 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
              if ((v1975 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
              {
                qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
                __cxa_guard_release(&qword_1ED52ACD0);
              }
              v1973 = v1973 + 30.0;
              v1976 = qword_1ED52ACE0;
              if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_DEBUG))
              {
                v2224 = *(_QWORD **)(*(_QWORD *)v1743 + 24);
                v2225 = *(std::__shared_weak_count **)(*(_QWORD *)v1743 + 32);
                if (v2225)
                {
                  v2226 = (unint64_t *)&v2225->__shared_owners_;
                  do
                    v2227 = __ldxr(v2226);
                  while (__stxr(v2227 + 1, v2226));
                }
                v2228 = "(null)";
                if (v2224)
                  v2228 = (const char *)(*v2224 + 160);
                if (v2225)
                {
                  v2229 = (unint64_t *)&v2225->__shared_owners_;
                  do
                    v2230 = __ldaxr(v2229);
                  while (__stlxr(v2230 - 1, v2229));
                  if (!v2230)
                  {
                    keyk = v2225;
                    ((void (*)(std::__shared_weak_count *))v2225->__on_zero_shared)(v2225);
                    std::__shared_weak_count::__release_weak(keyk);
                  }
                }
                *(_DWORD *)v2608 = 134218242;
                *(double *)&v2608[4] = v1973;
                *(_WORD *)&v2608[12] = 2080;
                *(_QWORD *)&v2608[14] = v2228;
                _os_log_debug_impl(&dword_1C9870000, v1976, OS_LOG_TYPE_DEBUG, "Increasing min distance for tracking to %f mm; due to previous error detected (user %s).",
                  v2608,
                  0x16u);
              }
            }
            v1977 = *(float *)&buf[44];
            if (*(float *)&buf[44] < v1973)
            {
              v1978 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
              if ((v1978 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
              {
                qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
                __cxa_guard_release(&qword_1ED52ACD0);
              }
              v1979 = qword_1ED52ACE0;
              if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_DEBUG))
              {
                v2231 = *(_QWORD **)(*(_QWORD *)v1743 + 24);
                v2232 = *(std::__shared_weak_count **)(*(_QWORD *)v1743 + 32);
                if (v2232)
                {
                  v2233 = (unint64_t *)&v2232->__shared_owners_;
                  do
                    v2234 = __ldxr(v2233);
                  while (__stxr(v2234 + 1, v2233));
                }
                v2235 = "(null)";
                if (v2231)
                  v2235 = (const char *)(*v2231 + 160);
                if (v2232)
                {
                  v2236 = (unint64_t *)&v2232->__shared_owners_;
                  do
                    v2237 = __ldaxr(v2236);
                  while (__stlxr(v2237 - 1, v2236));
                  if (!v2237)
                  {
                    ((void (*)(std::__shared_weak_count *))v2232->__on_zero_shared)(v2232);
                    std::__shared_weak_count::__release_weak(v2232);
                  }
                }
                *(_DWORD *)v2608 = 136315138;
                *(_QWORD *)&v2608[4] = v2235;
                _os_log_debug_impl(&dword_1C9870000, v1979, OS_LOG_TYPE_DEBUG, "Resetting due to face too close to camera (user %s)", v2608, 0xCu);
              }
              if (!v1826)
                v1826 = 3;
              v1977 = *(float *)&buf[44];
              v1755 = 1;
            }
            v1980 = 1.0
                  / sqrtf((float)((float)(*(float *)&buf[36] * *(float *)&buf[36])+ (float)(*(float *)&buf[40] * *(float *)&buf[40]))+ (float)(v1977 * v1977));
            v1981 = -(float)((float)(*(float *)&buf[32] * (float)(v1977 * v1980))
                           + (float)((float)(*(float *)&buf[24] * (float)(*(float *)&buf[36] * v1980))
                                   + (float)(*(float *)&buf[28] * (float)(*(float *)&buf[40] * v1980))));
            v2408 = v1751;
            if (cosf(v1746[35] / 57.296) >= v1981)
            {
              v1982 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
              if ((v1982 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
              {
                qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
                __cxa_guard_release(&qword_1ED52ACD0);
              }
              v1983 = qword_1ED52ACE0;
              if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_DEBUG))
              {
                v2238 = *(_QWORD **)(*(_QWORD *)v1743 + 24);
                v2239 = *(std::__shared_weak_count **)(*(_QWORD *)v1743 + 32);
                if (v2239)
                {
                  v2240 = (unint64_t *)&v2239->__shared_owners_;
                  do
                    v2241 = __ldxr(v2240);
                  while (__stxr(v2241 + 1, v2240));
                }
                v2242 = "(null)";
                if (v2238)
                  v2242 = (const char *)(*v2238 + 160);
                if (v2239)
                {
                  v2243 = (unint64_t *)&v2239->__shared_owners_;
                  do
                    v2244 = __ldaxr(v2243);
                  while (__stlxr(v2244 - 1, v2243));
                  if (!v2244)
                  {
                    ((void (*)(std::__shared_weak_count *))v2239->__on_zero_shared)(v2239);
                    std::__shared_weak_count::__release_weak(v2239);
                  }
                }
                *(_DWORD *)v2608 = 136315138;
                *(_QWORD *)&v2608[4] = v2242;
                _os_log_debug_impl(&dword_1C9870000, v1983, OS_LOG_TYPE_DEBUG, "Resetting due to too much rotation (user %s)", v2608, 0xCu);
              }
              if (!v1826)
                v1826 = 5;
              v1755 = 1;
            }
            v1984 = cosf(v1746[24] / 57.296) >= v1981 || v1972 > v1974;
            v1985 = cosf(v1746[29] / 57.296);
            *(_QWORD *)&v2574 = &v2561[4];
            if ((_DWORD)v1748)
              v1986 = 1;
            else
              v1986 = v1985 < v1981;
            __p[0] = &v2574;
            if (v1986)
              v1987 = v1748;
            else
              v1987 = 5;
            *(_QWORD *)v2608 = __p;
            *(_QWORD *)&v2608[8] = &v2562;
            memptr[0] = 0;
            LODWORD(memptr[1]) = 0;
            sub_1C98BDEBC((float *)memptr, (uint64_t)v2608);
            v1988 = *((float *)v1912 + 19);
            v1989 = *(float32x2_t *)((char *)v1912 + 68);
            v1990 = vsub_f32(v1989, (float32x2_t)memptr[0]);
            *(float *)v1991.i32 = sqrtf(vaddv_f32(vmul_f32(v1990, v1990))+ (float)((float)(v1988 - *(float *)&memptr[1]) * (float)(v1988 - *(float *)&memptr[1])));
            v1992 = vdiv_f32(v1990, (float32x2_t)vdup_lane_s32(v1991, 0));
            v1993 = (float)(v1988 - *(float *)&memptr[1]) / *(float *)v1991.i32;
            v1994 = 1000.0;
            if ((float)(*(float *)v1991.i32 + -1000.0) <= 1000.0)
              v1994 = *(float *)v1991.i32 + -1000.0;
            if ((float)(*(float *)v1991.i32 + -1000.0) >= 0.0)
              v1995 = v1994;
            else
              v1995 = 0.0;
            v1996 = (float)(v1995 * -0.0001) + 0.2;
            v1997 = (float)(*(float *)v1991.i32 + -700.0) / 800.0;
            if (v1997 <= 1.0)
              v1998 = v1997;
            else
              v1998 = 1.0;
            if (v1997 >= 0.0)
              v1999 = v1998;
            else
              v1999 = 0.0;
            v2000 = (float)(v1999 * 3.0) + 1.0;
            v2001 = vsub_f32(*(float32x2_t *)((char *)v1909 + 68), v1989);
            v2002 = *((float *)v1909 + 19) - v1988;
            v2003 = v1996 + -1.0;
            v2004 = (float)(v1996 + -1.0) * (float)(vaddv_f32(vmul_f32(v1992, v2001)) + (float)(v1993 * v2002));
            v2005 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v2436, 0);
            v2006 = vdiv_f32(vadd_f32(v2001, vmul_n_f32(v1992, v2004)), v2005);
            v2007 = (float)(v2002 + (float)(v1993 * v2004)) / *(float *)&v2436;
            v2008 = sqrtf(vaddv_f32(vmul_f32(v2006, v2006)) + (float)(v2007 * v2007));
            v2405 = v2005;
            if (v2008 <= (float)(v2000 * v1746[18]))
            {
              v2011 = v1912;
              v2012 = v2406;
            }
            else
            {
              v2404 = (float)(v2002 + (float)(v1993 * v2004)) / *(float *)&v2436;
              keyi = v2000;
              v2009 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
              if ((v2009 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
              {
                qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
                __cxa_guard_release(&qword_1ED52ACD0);
              }
              v2010 = qword_1ED52ACE0;
              if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_DEBUG))
              {
                v2245 = *(_QWORD **)(*(_QWORD *)v1743 + 24);
                v2246 = *(std::__shared_weak_count **)(*(_QWORD *)v1743 + 32);
                if (v2246)
                {
                  v2247 = (unint64_t *)&v2246->__shared_owners_;
                  do
                    v2248 = __ldxr(v2247);
                  while (__stxr(v2248 + 1, v2247));
                }
                v2249 = "(null)";
                if (v2245)
                  v2249 = (const char *)(*v2245 + 160);
                if (v2246)
                {
                  v2250 = (unint64_t *)&v2246->__shared_owners_;
                  do
                    v2251 = __ldaxr(v2250);
                  while (__stlxr(v2251 - 1, v2250));
                  if (!v2251)
                  {
                    ((void (*)(std::__shared_weak_count *))v2246->__on_zero_shared)(v2246);
                    std::__shared_weak_count::__release_weak(v2246);
                  }
                }
                *(_DWORD *)v2608 = 136315138;
                *(_QWORD *)&v2608[4] = v2249;
                _os_log_debug_impl(&dword_1C9870000, v2010, OS_LOG_TYPE_DEBUG, "Resetting due to too high translational velocity (user %s)", v2608, 0xCu);
              }
              if (!v1826)
                v1826 = 200;
              v1989 = *(float32x2_t *)((char *)v1912 + 68);
              v2011 = v1912;
              v1988 = *((float *)v1912 + 19);
              v1755 = 1;
              v2012 = v2406;
              v2000 = keyi;
              v2007 = v2404;
            }
            *(float *)&v2012 = v2409 * 1000.0 + v2012 * -1000.0;
            v2013 = v2008 > v1746[25] || v1984;
            if (v1987)
              v2014 = 1;
            else
              v2014 = v2008 <= v1746[30];
            if (v2014)
              v2015 = v1987;
            else
              v2015 = 200;
            v2016 = v1988 - *((float *)v2430 + 19);
            v2005.f32[0] = (float)(*(float *)&v2436 + *(float *)&v2012) * v1208;
            v2017 = vsub_f32(v1989, *(float32x2_t *)((char *)v2430 + 68));
            v2018 = v2003 * (float)(vaddv_f32(vmul_f32(v1992, v2017)) + (float)(v1993 * v2016));
            v2019 = vadd_f32(v2017, vmul_n_f32(v1992, v2018));
            v2020 = v1993 * v2018;
            v2021 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v2012, 0);
            v2022 = (float32x2_t)vdup_lane_s32((int32x2_t)v2005, 0);
            v2023 = vdiv_f32(vsub_f32(v2006, vdiv_f32(v2019, v2021)), v2022);
            v2024 = sqrtf(vaddv_f32(vmul_f32(v2023, v2023))+ (float)((float)((float)(v2007 - (float)((float)(v2016 + v2020) / *(float *)&v2012)) / v2005.f32[0])* (float)((float)(v2007 - (float)((float)(v2016 + v2020) / *(float *)&v2012)) / v2005.f32[0])));
            keyj = *(float *)&v2012;
            v2410 = v2005.f32[0];
            if (v2024 <= (float)(v2000 * v1746[20]))
            {
              v2027 = 0uLL;
            }
            else
            {
              v2025 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
              if ((v2025 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
              {
                qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
                __cxa_guard_release(&qword_1ED52ACD0);
              }
              v2026 = qword_1ED52ACE0;
              if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_DEBUG))
              {
                v2252 = *(_QWORD **)(*(_QWORD *)v1743 + 24);
                v2253 = *(std::__shared_weak_count **)(*(_QWORD *)v1743 + 32);
                if (v2253)
                {
                  v2254 = (unint64_t *)&v2253->__shared_owners_;
                  do
                    v2255 = __ldxr(v2254);
                  while (__stxr(v2255 + 1, v2254));
                }
                v2256 = "(null)";
                if (v2252)
                  v2256 = (const char *)(*v2252 + 160);
                if (v2253)
                {
                  v2257 = (unint64_t *)&v2253->__shared_owners_;
                  do
                    v2258 = __ldaxr(v2257);
                  while (__stlxr(v2258 - 1, v2257));
                  if (!v2258)
                  {
                    ((void (*)(std::__shared_weak_count *))v2253->__on_zero_shared)(v2253);
                    std::__shared_weak_count::__release_weak(v2253);
                  }
                }
                *(_DWORD *)v2608 = 136315138;
                *(_QWORD *)&v2608[4] = v2256;
                _os_log_debug_impl(&dword_1C9870000, v2026, OS_LOG_TYPE_DEBUG, "Resetting due to too high translational acceleration (user %s)", v2608, 0xCu);
              }
              if (!v1826)
                v1826 = 201;
              v1755 = 1;
              v2027 = 0uLL;
            }
            v2028 = v2011 + 2;
            if (v2024 > v1746[27])
              v2029 = 1;
            else
              v2029 = v2013;
            v2030 = v1746[32];
            *(_QWORD *)&v2574 = v2011 + 2;
            if (v2015)
              v2031 = 1;
            else
              v2031 = v2024 <= v2030;
            if (!v2031)
              v2015 = 201;
            __p[0] = v2407;
            __p[1] = &v2574;
            *(_OWORD *)v2608 = v2027;
            *(_OWORD *)&v2608[16] = v2027;
            *(_DWORD *)&v2608[32] = 0;
            sub_1C98CF684((uint64_t)v2608, (uint64_t)__p);
            LODWORD(memptr[1]) = 0;
            memptr[0] = 0;
            sub_1C98CF850((float32x2_t *)v2608, (float *)memptr);
            v2032 = vdiv_f32((float32x2_t)memptr[0], v2405);
            v2033 = *(float *)&memptr[1] / *(float *)&v2436;
            v2034 = sqrtf(vaddv_f32(vmul_f32(v2032, v2032)) + (float)(v2033 * v2033));
            if (v2034 <= (float)(v1746[19] / 57.296))
            {
              v952 = v2449;
            }
            else
            {
              v2035 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
              v952 = v2449;
              if ((v2035 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
              {
                qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
                __cxa_guard_release(&qword_1ED52ACD0);
              }
              v2036 = qword_1ED52ACE0;
              if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_DEBUG))
              {
                v2259 = *(_QWORD **)(*(_QWORD *)v1743 + 24);
                v2260 = *(std::__shared_weak_count **)(*(_QWORD *)v1743 + 32);
                if (v2260)
                {
                  v2261 = (unint64_t *)&v2260->__shared_owners_;
                  do
                    v2262 = __ldxr(v2261);
                  while (__stxr(v2262 + 1, v2261));
                }
                v2263 = "(null)";
                if (v2259)
                  v2263 = (const char *)(*v2259 + 160);
                if (v2260)
                {
                  v2264 = (unint64_t *)&v2260->__shared_owners_;
                  do
                    v2265 = __ldaxr(v2264);
                  while (__stlxr(v2265 - 1, v2264));
                  if (!v2265)
                  {
                    ((void (*)(std::__shared_weak_count *))v2260->__on_zero_shared)(v2260);
                    std::__shared_weak_count::__release_weak(v2260);
                  }
                }
                *(_DWORD *)v2608 = 136315138;
                *(_QWORD *)&v2608[4] = v2263;
                _os_log_debug_impl(&dword_1C9870000, v2036, OS_LOG_TYPE_DEBUG, "Resetting due to too high angular velocity (user %s)", v2608, 0xCu);
              }
              if (!v1826)
                v1826 = 202;
              v1755 = 1;
            }
            if (v2034 > (float)(v1746[26] / 57.296))
              v2037 = 1;
            else
              v2037 = v2029;
            v2038 = v1746[31] / 57.296;
            *(_QWORD *)&v2574 = v2430 + 2;
            __p[0] = v2028;
            __p[1] = &v2574;
            if (v2015)
              v2039 = 1;
            else
              v2039 = v2034 <= v2038;
            if (v2039)
              v2040 = v2015;
            else
              v2040 = 202;
            memset(v2608, 0, sizeof(v2608));
            sub_1C98CF684((uint64_t)v2608, (uint64_t)__p);
            LODWORD(memptr[1]) = 0;
            memptr[0] = 0;
            sub_1C98CF850((float32x2_t *)v2608, (float *)memptr);
            v2041 = vdiv_f32(vsub_f32(v2032, vdiv_f32((float32x2_t)memptr[0], v2021)), v2022);
            v2042 = sqrtf(vaddv_f32(vmul_f32(v2041, v2041))+ (float)((float)((float)(v2033 - (float)(*(float *)&memptr[1] / keyj)) / v2410)* (float)((float)(v2033 - (float)(*(float *)&memptr[1] / keyj)) / v2410)));
            if (v2042 <= (float)(v1746[21] / 57.296))
            {
              v1752 = v1826;
              v1751 = v2408;
              v2044 = (std::__shared_weak_count *)pixelBufferb;
            }
            else
            {
              v2043 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
              v1751 = v2408;
              v2044 = (std::__shared_weak_count *)pixelBufferb;
              if ((v2043 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
              {
                qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
                __cxa_guard_release(&qword_1ED52ACD0);
              }
              v2045 = qword_1ED52ACE0;
              if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_DEBUG))
              {
                v2266 = *(_QWORD **)(*(_QWORD *)v1743 + 24);
                v2267 = *(std::__shared_weak_count **)(*(_QWORD *)v1743 + 32);
                if (v2267)
                {
                  v2268 = (unint64_t *)&v2267->__shared_owners_;
                  do
                    v2269 = __ldxr(v2268);
                  while (__stxr(v2269 + 1, v2268));
                }
                v2270 = "(null)";
                if (v2266)
                  v2270 = (const char *)(*v2266 + 160);
                if (v2267)
                {
                  v2271 = (unint64_t *)&v2267->__shared_owners_;
                  do
                    v2272 = __ldaxr(v2271);
                  while (__stlxr(v2272 - 1, v2271));
                  if (!v2272)
                  {
                    ((void (*)(std::__shared_weak_count *))v2267->__on_zero_shared)(v2267);
                    std::__shared_weak_count::__release_weak(v2267);
                  }
                }
                *(_DWORD *)v2608 = 136315138;
                *(_QWORD *)&v2608[4] = v2270;
                _os_log_debug_impl(&dword_1C9870000, v2045, OS_LOG_TYPE_DEBUG, "Resetting due to too high angular acceleration (user %s)", v2608, 0xCu);
                v2044 = (std::__shared_weak_count *)pixelBufferb;
              }
              if (v1826)
                v1752 = v1826;
              else
                v1752 = 203;
              v1755 = 1;
            }
            if (v2042 > (float)(v1746[28] / 57.296))
              v2046 = 1;
            else
              v2046 = v2037;
            if (v2040)
              v2047 = 1;
            else
              v2047 = v2042 <= (float)(v1746[33] / 57.296);
            if (v2047)
              v1748 = v2040;
            else
              v1748 = 203;
            if (v2413)
            {
              v2048 = (unint64_t *)&v2413->__shared_owners_;
              do
                v2049 = __ldaxr(v2048);
              while (__stlxr(v2049 - 1, v2048));
              if (!v2049)
              {
                ((void (*)(std::__shared_weak_count *))v2413->__on_zero_shared)(v2413);
                std::__shared_weak_count::__release_weak(v2413);
              }
            }
            if (v2420)
            {
              v2050 = (unint64_t *)&v2420->__shared_owners_;
              do
                v2051 = __ldaxr(v2050);
              while (__stlxr(v2051 - 1, v2050));
              if (!v2051)
              {
                ((void (*)(std::__shared_weak_count *))v2420->__on_zero_shared)(v2420);
                std::__shared_weak_count::__release_weak(v2420);
              }
            }
            if (v2044)
            {
              v2052 = (unint64_t *)&v2044->__shared_owners_;
              do
                v2053 = __ldaxr(v2052);
              while (__stlxr(v2053 - 1, v2052));
              if (!v2053)
              {
                ((void (*)(std::__shared_weak_count *))v2044->__on_zero_shared)(v2044);
                std::__shared_weak_count::__release_weak(v2044);
              }
            }
            v1754 = 0;
            v1753 = 0x10000;
            if (!v2046)
              v1753 = 0;
            if (!v2411)
              goto LABEL_1984;
LABEL_1974:
            v1749 = 0;
            v1756 = 0;
            if (v1751 < v1745)
              goto LABEL_1985;
            goto LABEL_1986;
          }
        }
        else
        {
          v1963 = v1955 + *(double *)v1912 * -1000.0;
          *(float *)&v1963 = v1963;
          v2436 = v1963;
        }
        v1962 = *(double *)v1912;
        goto LABEL_2125;
      }
LABEL_2117:
      v1931 = *(double *)v1909;
      goto LABEL_2118;
    }
    v1754 = 0;
    v1753 = 0;
    v1755 = 1;
    v1752 = v1827;
    v952 = v2449;
    if (v1814)
      goto LABEL_1974;
LABEL_1984:
    v1749 = 0x100000000;
    if (v1751 >= v1745)
      v1756 = 0;
    else
LABEL_1985:
      v1756 = 0x1000000;
LABEL_1986:
    v1844 = v1756 | v1749 | v1753 | v1754;
    v1845 = v1844 | v1755;
    if ((unsigned __int16)v1845 != 0 && v1748 == 0)
      v1846 = v1752 << 32;
    else
      v1846 = v1748 << 32;
    v1847 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1743 + 96)
                                  + ((*(_QWORD *)(*(_QWORD *)v1743 + 120) >> 4) & 0xFFFFFFFFFFFFFF8))
                      + 32 * (*(_QWORD *)(*(_QWORD *)v1743 + 120) & 0x7FLL));
    v1848 = *v1847;
    v1849 = (std::__shared_weak_count *)v1847[1];
    if (v1849)
    {
      v1850 = (unint64_t *)&v1849->__shared_owners_;
      do
        v1851 = __ldxr(v1850);
      while (__stxr(v1851 + 1, v1850));
    }
    v1852 = v1846 | v1752;
    v1853 = v1845 & 0xFFFFFFFFFF00FF00 | ((unint64_t)(((unsigned __int16)v1845 != 0) | BYTE2(v1844)) << 16) | v1845;
    *(_QWORD *)(v1848 + 240) = v1853;
    *(_QWORD *)(v1848 + 248) = v1846 | v1752;
    if (v1849)
    {
      v1854 = (unint64_t *)&v1849->__shared_owners_;
      do
        v1855 = __ldaxr(v1854);
      while (__stlxr(v1855 - 1, v1854));
      if (!v1855)
      {
        ((void (*)(std::__shared_weak_count *))v1849->__on_zero_shared)(v1849);
        std::__shared_weak_count::__release_weak(v1849);
      }
    }
    v1856 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1743 + 96)
                      + ((*(_QWORD *)(*(_QWORD *)v1743 + 120) >> 4) & 0xFFFFFFFFFFFFFF8))
          + 32 * (*(_QWORD *)(*(_QWORD *)v1743 + 120) & 0x7FLL);
    v1857 = *(_QWORD *)(v1856 + 16);
    v1858 = *(std::__shared_weak_count **)(v1856 + 24);
    if (v1858)
    {
      v1859 = (unint64_t *)&v1858->__shared_owners_;
      do
        v1860 = __ldxr(v1859);
      while (__stxr(v1860 + 1, v1859));
      *(_QWORD *)(v1857 + 240) = v1853;
      *(_QWORD *)(v1857 + 248) = v1852;
      do
        v1861 = __ldaxr(v1859);
      while (__stlxr(v1861 - 1, v1859));
      if (!v1861)
      {
        ((void (*)(std::__shared_weak_count *))v1858->__on_zero_shared)(v1858);
        std::__shared_weak_count::__release_weak(v1858);
      }
    }
    else
    {
      *(_QWORD *)(v1857 + 240) = v1853;
      *(_QWORD *)(v1857 + 248) = v1852;
    }
    kdebug_trace();
    v1862 = (unsigned __int8 **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1743 + 96)
                                           + ((*(_QWORD *)(*(_QWORD *)v1743 + 120) >> 4) & 0xFFFFFFFFFFFFFF8))
                               + 32 * (*(_QWORD *)(*(_QWORD *)v1743 + 120) & 0x7FLL));
    v1863 = *v1862;
    v1864 = (std::__shared_weak_count *)v1862[1];
    if (v1864)
    {
      v1865 = (unint64_t *)&v1864->__shared_owners_;
      do
        v1866 = __ldxr(v1865);
      while (__stxr(v1866 + 1, v1865));
      v1867 = v1863[240];
      v1868 = v1863[241];
      v1869 = v1863[242];
      v1870 = (unint64_t *)&v1864->__shared_owners_;
      do
        v1871 = __ldaxr(v1870);
      while (__stlxr(v1871 - 1, v1870));
      if (!v1871)
      {
        ((void (*)(std::__shared_weak_count *))v1864->__on_zero_shared)(v1864);
        std::__shared_weak_count::__release_weak(v1864);
      }
    }
    else
    {
      v1867 = v1863[240];
      v1868 = v1863[241];
      v1869 = v1863[242];
    }
    v1872 = v2538;
    v1873 = *(_QWORD *)(*(_QWORD *)v2538 + 24);
    v1874 = *(std::__shared_weak_count **)(*(_QWORD *)v2538 + 32);
    if (v1874)
    {
      v1875 = (unint64_t *)&v1874->__shared_owners_;
      do
        v1876 = __ldxr(v1875);
      while (__stxr(v1876 + 1, v1875));
    }
    if (*(_BYTE *)(*(_QWORD *)v1873 + 16) && *(_QWORD *)(*(_QWORD *)v1872 + 128))
    {
      v1877 = (v1868 & 1) == 0 || v2440;
      if (!v1874)
        goto LABEL_2025;
      v1878 = (unint64_t *)&v1874->__shared_owners_;
      do
        v1879 = __ldaxr(v1878);
      while (__stlxr(v1879 - 1, v1878));
      if (!v1879)
      {
        ((void (*)(std::__shared_weak_count *))v1874->__on_zero_shared)(v1874);
        std::__shared_weak_count::__release_weak(v1874);
        if (v1877)
          goto LABEL_2026;
      }
      else
      {
LABEL_2025:
        if (v1877)
        {
LABEL_2026:
          if (((v1867 | v1868) & 1) == 0)
          {
            v1880 = v2538;
            *(_DWORD *)(*(_QWORD *)v2538 + 4) = 0;
            v1881 = v2422;
            if ((v1869 & 1) != 0)
              v1881 = 0;
            if (v1881)
            {
              kdebug_trace();
              v1883 = *(_QWORD *)(*(_QWORD *)v1880 + 8);
              v1882 = *(std::__shared_weak_count **)(*(_QWORD *)v1880 + 16);
              if (v1882)
              {
                v1884 = (unint64_t *)&v1882->__shared_owners_;
                do
                  v1885 = __ldxr(v1884);
                while (__stxr(v1885 + 1, v1884));
                do
                  v1886 = __ldaxr(v1884);
                while (__stlxr(v1886 - 1, v1884));
                if (!v1886)
                {
                  ((void (*)(std::__shared_weak_count *))v1882->__on_zero_shared)(v1882);
                  std::__shared_weak_count::__release_weak(v1882);
                }
              }
              v1887 = *a2;
              v1888 = *(_QWORD *)(v1883 + 48);
              v1889 = *(unint64_t **)(v1883 + 56);
              memptr[0] = (void *)v1888;
              memptr[1] = v1889;
              if (v1889)
              {
                v1890 = v1889 + 1;
                do
                  v1891 = __ldxr(v1890);
                while (__stxr(v1891 + 1, v1890));
              }
              LODWORD(__p[0]) = *(_DWORD *)(v1888 + 24);
              __p[1] = *(void **)(v1888 + 8);
              *(_QWORD *)&v2585 = LODWORD(__p[0]);
              v1893 = *(float *)v1883;
              v1892 = (_QWORD *)(v1883 + 4);
              v1894 = v1893;
              v1895 = v2536;
              *(_QWORD *)&buf[36] = 0;
              *(_DWORD *)&buf[44] = 0;
              v1896 = v2536[1];
              v1897 = v2536[2];
              v1898 = __sincosf_stret(*v2536);
              v1899 = __sincosf_stret(v1896);
              v1900 = __sincosf_stret(v1897);
              *(float *)buf = v1899.__cosval * v1900.__cosval;
              *(float *)&buf[4] = (float)(v1899.__sinval * (float)(v1898.__sinval * v1900.__cosval))
                                + (float)(v1898.__cosval * v1900.__sinval);
              *(float *)&buf[8] = (float)(v1899.__sinval * (float)-(float)(v1898.__cosval * v1900.__cosval))
                                + (float)(v1898.__sinval * v1900.__sinval);
              *(float *)&buf[12] = -(float)(v1899.__cosval * v1900.__sinval);
              *(float *)&buf[16] = (float)((float)-(float)(v1898.__sinval * v1899.__sinval) * v1900.__sinval)
                                 + (float)(v1898.__cosval * v1900.__cosval);
              *(float *)&buf[20] = (float)((float)(v1898.__cosval * v1899.__sinval) * v1900.__sinval)
                                 + (float)(v1900.__cosval * v1898.__sinval);
              *(float *)&buf[24] = v1899.__sinval;
              *(float *)&buf[28] = -(float)(v1899.__cosval * v1898.__sinval);
              *(float *)&buf[32] = v1898.__cosval * v1899.__cosval;
              if (&buf[36] != (_BYTE *)(v1895 + 3))
              {
                v1901 = *(_QWORD *)(v1895 + 3);
                *(float *)&buf[44] = v1895[5];
                *(_QWORD *)&buf[36] = v1901;
              }
              v1902 = *((_DWORD *)v1895 + 10);
              v1903 = *((_QWORD *)v1895 + 3);
              if (v2443)
                v1904 = *(_QWORD *)(*a2 + 96) + 32 * v2449;
              else
                v1904 = 0;
              v1939 = *(_QWORD *)(*(_QWORD *)v2538 + 136);
              v1940 = *(_QWORD *)(*(_QWORD *)v2538 + 144);
              *(_QWORD *)&v2574 = v1939;
              *((_QWORD *)&v2574 + 1) = v1940;
              if (v1940)
              {
                v1941 = (unint64_t *)(v1940 + 8);
                do
                  v1942 = __ldxr(v1941);
                while (__stxr(v1942 + 1, v1941));
              }
              if (*(_BYTE *)(v1939 + 1016))
              {
                v1943 = COERCE_DOUBLE(atomic_load((unint64_t *)v1939));
                if (v2421 <= v1943 || v1943 + 500.0 <= v2421)
                {
                  v1945 = v1939 + 80;
                  v1946 = atomic_load((unsigned __int8 *)(v1939 + 80));
                  if ((v1946 & 1) == 0)
                  {
                    v1947 = **(_QWORD **)(v1887 + 32);
                    v1948 = *(_QWORD *)(v1947 + 16);
                    v1949 = *(std::__shared_weak_count **)(v1947 + 24);
                    *(_QWORD *)v2608 = v1948;
                    *(_QWORD *)&v2608[8] = v1949;
                    if (v1949)
                    {
                      v1950 = (unint64_t *)&v1949->__shared_owners_;
                      do
                        v1951 = __ldxr(v1950);
                      while (__stxr(v1951 + 1, v1950));
                    }
                    v1952 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v1948 + 56))(v1948, buf);
                    if (v1949)
                    {
                      v1953 = (unint64_t *)&v1949->__shared_owners_;
                      do
                        v1954 = __ldaxr(v1953);
                      while (__stlxr(v1954 - 1, v1953));
                      if (!v1954)
                      {
                        ((void (*)(std::__shared_weak_count *))v1949->__on_zero_shared)(v1949);
                        std::__shared_weak_count::__release_weak(v1949);
                      }
                    }
                    if ((v1952 & 1) != 0)
                    {
                      v1904 = 0;
                      goto LABEL_2279;
                    }
                    if (v1904
                      && sub_1C98BCD78(*a2, *v2451 + 200, (uint64_t)&v2559, v2483, v1904, *(float *)(*(_QWORD *)(*a2 + 8) + 92) + 100.0))
                    {
LABEL_2279:
                      *(_DWORD *)v2608 = v1902 - 2;
                      *(_QWORD *)&v2608[8] = v1903;
                      *(_QWORD *)&v2608[16] = v1902;
                      sub_1C98F8CEC(v1945, v1904, (unsigned int *)__p, v1892, (__int128 *)buf, (unsigned int *)v2608, v1894);
                    }
                  }
                }
              }
              v2069 = (std::__shared_weak_count *)*((_QWORD *)&v2574 + 1);
              v952 = v2449;
              if (*((_QWORD *)&v2574 + 1))
              {
                v2070 = (unint64_t *)(*((_QWORD *)&v2574 + 1) + 8);
                do
                  v2071 = __ldaxr(v2070);
                while (__stlxr(v2071 - 1, v2070));
                if (!v2071)
                {
                  ((void (*)(std::__shared_weak_count *))v2069->__on_zero_shared)(v2069);
                  std::__shared_weak_count::__release_weak(v2069);
                }
              }
              v2072 = (std::__shared_weak_count *)memptr[1];
              if (memptr[1])
              {
                v2073 = (unint64_t *)((char *)memptr[1] + 8);
                do
                  v2074 = __ldaxr(v2073);
                while (__stlxr(v2074 - 1, v2073));
                if (!v2074)
                {
                  ((void (*)(std::__shared_weak_count *))v2072->__on_zero_shared)(v2072);
                  std::__shared_weak_count::__release_weak(v2072);
                }
              }
              kdebug_trace();
            }
          }
          kdebug_trace();
          v2075 = *a2;
          v2076 = (v1867 & 1) == 0 || v2440;
          v2077 = *v2451;
          v2078 = operator new(0x28uLL);
          v2078[1] = 0;
          v2078[2] = 0;
          v2079 = (cva::DictionaryHandler *)(v2078 + 3);
          *v2078 = &off_1E8295758;
          cva::DictionaryHandler::DictionaryHandler((cva::DictionaryHandler *)(v2078 + 3));
          *(_QWORD *)v2608 = v2078 + 3;
          *(_QWORD *)&v2608[8] = v2078;
          v2080 = v2538;
          v2081 = *(void **)(*(_QWORD *)v2538 + 24);
          v2082 = *(unint64_t **)(*(_QWORD *)v2538 + 32);
          __p[0] = v2081;
          __p[1] = v2082;
          if (v2082)
          {
            v2083 = v2082 + 1;
            do
              v2084 = __ldxr(v2083);
            while (__stxr(v2084 + 1, v2083));
          }
          v2085 = *(const unsigned __int8 **)v2081;
          if (!*(_BYTE *)(*(_QWORD *)v2081 + 16))
          {
            _os_crash();
            __break(1u);
            goto LABEL_2829;
          }
          memset(buf, 0, 37);
          uuid_unparse_upper(v2085, buf);
          v2086 = CFStringCreateWithCString(alloc, buf, 0x8000100u);
          Dictionary = (__CFDictionary *)cva::DictionaryHandler::getDictionary(v2079);
          CFDictionaryAddValue(Dictionary, CFSTR("face_id"), v2086);
          CFRelease(v2086);
          if (*(_QWORD *)(*(_QWORD *)v2080 + 128))
          {
            v2088 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2080 + 96)
                                          + ((*(_QWORD *)(*(_QWORD *)v2080 + 120) >> 4) & 0xFFFFFFFFFFFFFF8))
                              + 32 * (*(_QWORD *)(*(_QWORD *)v2080 + 120) & 0x7FLL));
            v2090 = *v2088;
            v2089 = (std::__shared_weak_count *)v2088[1];
            if (v2089)
            {
              v2091 = (unint64_t *)&v2089->__shared_owners_;
              do
                v2092 = __ldxr(v2091);
              while (__stxr(v2092 + 1, v2091));
              do
                v2093 = __ldaxr(v2091);
              while (__stlxr(v2093 - 1, v2091));
              if (!v2093)
              {
                ((void (*)(std::__shared_weak_count *))v2089->__on_zero_shared)(v2089);
                std::__shared_weak_count::__release_weak(v2089);
              }
            }
          }
          else
          {
            v2090 = 0;
          }
          v2094 = *(cva::DictionaryHandler **)v2608;
          v2095 = *(_DWORD *)(v2090 + 248);
          if ((v2095 & 0xFFFFFFFC) == 0xC8)
            v2095 = 6;
          LODWORD(memptr[0]) = v2095;
          cva::ItemHandler::createValue<int>();
          cva::DictionaryHandler::setItem(v2094, CFSTR("failure_type"), (const cva::ItemHandler *)buf);
          cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
          LODWORD(memptr[0]) = *(unsigned __int8 *)(v2090 + 243) | (2 * *(unsigned __int8 *)(v2090 + 244));
          cva::ItemHandler::createValue<unsigned int>();
          cva::DictionaryHandler::setItem(v2094, CFSTR("exceeded_default_thresholds_mask"), (const cva::ItemHandler *)buf);
          cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
          LODWORD(memptr[0]) = 0;
          cva::ItemHandler::createValue<float>();
          cva::DictionaryHandler::setItem(v2094, CFSTR("confidence"), (const cva::ItemHandler *)buf);
          cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
          v2096 = *(_QWORD *)(v2077 + 56);
          v2097 = *(std::__shared_weak_count **)(v2077 + 64);
          if (v2097)
          {
            v2098 = (unint64_t *)&v2097->__shared_owners_;
            do
              v2099 = __ldxr(v2098);
            while (__stxr(v2099 + 1, v2098));
            do
              v2100 = __ldaxr(v2098);
            while (__stlxr(v2100 - 1, v2098));
            if (!v2100)
            {
              ((void (*)(std::__shared_weak_count *))v2097->__on_zero_shared)(v2097);
              std::__shared_weak_count::__release_weak(v2097);
            }
            if (v2096)
            {
              v2101 = *(cva::DictionaryHandler **)v2608;
              v2097 = *(std::__shared_weak_count **)(v2077 + 64);
              memptr[0] = *(void **)(v2077 + 56);
              memptr[1] = v2097;
              v2102 = v2097 == 0;
              if (v2097)
              {
                v2103 = (unint64_t *)&v2097->__shared_owners_;
                do
                  v2104 = __ldxr(v2103);
                while (__stxr(v2104 + 1, v2103));
              }
LABEL_2321:
              cva::ItemHandler::ItemHandler();
              cva::DictionaryHandler::setItem(v2101, CFSTR("timestamp"), (const cva::ItemHandler *)buf);
              cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
              if (!v2102)
              {
                v2105 = (unint64_t *)&v2097->__shared_owners_;
                do
                  v2106 = __ldaxr(v2105);
                while (__stlxr(v2106 - 1, v2105));
                if (!v2106)
                {
                  ((void (*)(std::__shared_weak_count *))v2097->__on_zero_shared)(v2097);
                  std::__shared_weak_count::__release_weak(v2097);
                }
              }
            }
          }
          else if (v2096)
          {
            v2101 = *(cva::DictionaryHandler **)v2608;
            memptr[0] = *(void **)(v2077 + 56);
            memptr[1] = 0;
            v2102 = 1;
            goto LABEL_2321;
          }
          if (v2076)
          {
            v2107 = (uint64_t *)v2538;
            v2108 = *(_QWORD *)v2538;
            if (!*(_QWORD *)(*(_QWORD *)v2538 + 128))
            {
              *(_QWORD *)&buf[8] = 0;
              *(_QWORD *)buf = 0;
              goto LABEL_2334;
            }
            v2109 = (*(_QWORD *)(v2108 + 120) >> 4) & 0xFFFFFFFFFFFFFF8;
            v2110 = 32 * (*(_QWORD *)(v2108 + 120) & 0x7FLL);
            v2111 = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(v2108 + 96) + v2109) + v2110);
            v2112 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2108 + 96) + v2109) + v2110 + 8);
            if (v2112)
            {
              v2113 = (unint64_t *)(v2112 + 8);
              do
                v2114 = __ldxr(v2113);
              while (__stxr(v2114 + 1, v2113));
              v2108 = *v2107;
              v2115 = *(_QWORD *)(*v2107 + 128);
              *(_OWORD *)buf = v2111;
              if (!v2115)
              {
LABEL_2334:
                v2514 = 0uLL;
                goto LABEL_2335;
              }
            }
            else
            {
              *(_OWORD *)buf = (unint64_t)v2111;
            }
            v2119 = *(_QWORD *)(*(_QWORD *)(v2108 + 96) + ((*(_QWORD *)(v2108 + 120) >> 4) & 0xFFFFFFFFFFFFFF8))
                  + 32 * (*(_QWORD *)(v2108 + 120) & 0x7FLL);
            v2120 = *(void **)(v2119 + 16);
            v2121 = *(std::__shared_weak_count **)(v2119 + 24);
            if (v2121)
            {
              v2122 = (unint64_t *)&v2121->__shared_owners_;
              do
                v2123 = __ldxr(v2122);
              while (__stxr(v2123 + 1, v2122));
            }
            memptr[0] = v2120;
            memptr[1] = v2121;
            if ((_QWORD)v2111 && v2120)
            {
              v2124 = *(cva::DictionaryHandler **)v2608;
              *(float *)&v2569 = 1.0 - v2536[19];
              cva::ItemHandler::createValue<float>();
              cva::DictionaryHandler::setItem(v2124, CFSTR("confidence"), (const cva::ItemHandler *)&v2574);
              cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v2574);
              cva::DictionaryHandler::DictionaryHandler((cva::DictionaryHandler *)&v2574);
              cva::DictionaryHandler::DictionaryHandler((cva::DictionaryHandler *)&v2569);
              sub_1C98B5CD8(v2075, (uint64_t *)buf, (cva::DictionaryHandler *)&v2574);
              sub_1C98B5CD8(v2075, (uint64_t *)memptr, (cva::DictionaryHandler *)&v2569);
              v2527 = v2075;
              v2528 = &v2536;
              if (*(_BYTE *)(*(_QWORD *)(v2075 + 8) + 8))
                sub_1C98B6634(&v2527, (uint64_t)buf, 0, 0, (cva::DictionaryHandler *)&v2574);
              sub_1C98B6634(&v2527, (uint64_t)memptr, *(unsigned __int8 *)(v2077 + 386), (uint64_t)v2592, (cva::DictionaryHandler *)&v2569);
              cva::ItemHandler::ItemHandler();
              cva::DictionaryHandler::setItem(v2124, CFSTR("raw_data"), (const cva::ItemHandler *)&v2519);
              cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v2519);
              cva::ItemHandler::ItemHandler();
              cva::DictionaryHandler::setItem(v2124, CFSTR("smooth_data"), (const cva::ItemHandler *)&v2519);
              cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v2519);
              if (v2564)
              {
                cva::ItemHandler::ItemHandler();
                cva::DictionaryHandler::setItem(v2124, CFSTR("rgb_camera"), (const cva::ItemHandler *)&v2519);
                cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v2519);
              }
              cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)&v2569);
              cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)&v2574);
              v2125 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
              if ((v2125 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
              {
                sub_1C98CFF14();
                __cxa_guard_release(&qword_1ED52ACD8);
                v952 = v2449;
              }
              if (*(_BYTE *)(qword_1ED52ACB8 + 104) || *(_BYTE *)(*(_QWORD *)(v2075 + 8) + 9))
              {
                v2126 = CFDataCreate(0, *((const UInt8 **)v2536 + 17), 4 * *((int *)v2536 + 38));
                cva::ItemHandler::createData(v2126, v2127);
                cva::DictionaryHandler::setItem(v2124, CFSTR("identity_coefficients"), (const cva::ItemHandler *)&v2574);
                cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v2574);
                CFRelease(v2126);
              }
              *(float32x2_t *)v2128.f32 = vadd_f32(*(float32x2_t *)(*(_QWORD *)v2538 + 44), (float32x2_t)0x3F0000003F000000);
              __asm { FMOV            V3.2S, #1.0 }
              *(float32x2_t *)v2130.f32 = vdiv_f32(_D3, vcvt_f32_s32(vmax_s32(*(int32x2_t *)((char *)&v2559 + 8), (int32x2_t)0x100000001)));
              v2130.i64[1] = v2130.i64[0];
              v2128.i64[1] = *(_QWORD *)(*(_QWORD *)v2538 + 52);
              v2131 = vmulq_f32(v2128, v2130);
              v2128.i32[0] = v2131.i32[1];
              *(double *)v2131.i64 = v2131.f32[0];
              *(double *)v2128.i64 = v2128.f32[0];
              v2132 = v2131.f32[2];
              v2133 = v2131.f32[3];
              DictionaryRepresentation = CGRectCreateDictionaryRepresentation(*(CGRect *)((char *)&v2128 - 8));
              cva::DictionaryHandler::DictionaryHandler((cva::DictionaryHandler *)&v2574, DictionaryRepresentation);
              CFRelease(DictionaryRepresentation);
              cva::ItemHandler::ItemHandler();
              cva::DictionaryHandler::setItem(v2124, CFSTR("Rect"), (const cva::ItemHandler *)&v2569);
              cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v2569);
              cva::ItemHandler::createValue<float>();
              cva::DictionaryHandler::setItem(v2124, CFSTR("AngleInfoRoll"), (const cva::ItemHandler *)&v2569);
              cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v2569);
              cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)&v2574);
              if (v2121)
              {
                v2135 = (unint64_t *)&v2121->__shared_owners_;
                do
                  v2136 = __ldaxr(v2135);
                while (__stlxr(v2136 - 1, v2135));
                if (!v2136)
                {
                  ((void (*)(std::__shared_weak_count *))v2121->__on_zero_shared)(v2121);
                  std::__shared_weak_count::__release_weak(v2121);
                }
              }
              v2137 = *(std::__shared_weak_count **)&buf[8];
              if (*(_QWORD *)&buf[8])
              {
                v2138 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
                do
                  v2139 = __ldaxr(v2138);
                while (__stlxr(v2139 - 1, v2138));
                if (!v2139)
                {
                  ((void (*)(std::__shared_weak_count *))v2137->__on_zero_shared)(v2137);
                  std::__shared_weak_count::__release_weak(v2137);
                }
              }
              goto LABEL_2364;
            }
            v2514 = 0uLL;
            if (v2121)
            {
              v2208 = (unint64_t *)&v2121->__shared_owners_;
              do
                v2209 = __ldaxr(v2208);
              while (__stlxr(v2209 - 1, v2208));
              if (!v2209)
              {
                ((void (*)(std::__shared_weak_count *))v2121->__on_zero_shared)(v2121);
                std::__shared_weak_count::__release_weak(v2121);
              }
            }
LABEL_2335:
            v2116 = *(std::__shared_weak_count **)&buf[8];
            if (*(_QWORD *)&buf[8])
            {
              v2117 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
              do
                v2118 = __ldaxr(v2117);
              while (__stlxr(v2118 - 1, v2117));
              if (!v2118)
              {
                ((void (*)(std::__shared_weak_count *))v2116->__on_zero_shared)(v2116);
                std::__shared_weak_count::__release_weak(v2116);
              }
            }
          }
          else
          {
LABEL_2364:
            v2514 = *(_OWORD *)v2608;
            *(_QWORD *)v2608 = 0;
            *(_QWORD *)&v2608[8] = 0;
          }
          v2140 = (std::__shared_weak_count *)__p[1];
          if (__p[1])
          {
            v2141 = (unint64_t *)((char *)__p[1] + 8);
            do
              v2142 = __ldaxr(v2141);
            while (__stlxr(v2142 - 1, v2141));
            if (!v2142)
            {
              ((void (*)(std::__shared_weak_count *))v2140->__on_zero_shared)(v2140);
              std::__shared_weak_count::__release_weak(v2140);
            }
          }
          v2143 = *(std::__shared_weak_count **)&v2608[8];
          if (*(_QWORD *)&v2608[8])
          {
            v2144 = (unint64_t *)(*(_QWORD *)&v2608[8] + 8);
            do
              v2145 = __ldaxr(v2144);
            while (__stlxr(v2145 - 1, v2144));
            if (!v2145)
            {
              ((void (*)(std::__shared_weak_count *))v2143->__on_zero_shared)(v2143);
              std::__shared_weak_count::__release_weak(v2143);
            }
          }
          v2146 = (cva::DictionaryHandler *)v2514;
          v2147 = v2440;
          if (!(_QWORD)v2514)
            v2147 = 0;
          if (v2147)
          {
            v2148 = *a2;
            v2149 = operator new(0x28uLL);
            v2149[1] = 0;
            v2149[2] = 0;
            v2150 = (cva::DictionaryHandler *)(v2149 + 3);
            *v2149 = &off_1E8295758;
            cva::DictionaryHandler::DictionaryHandler((cva::DictionaryHandler *)(v2149 + 3));
            __p[0] = v2149 + 3;
            __p[1] = v2149;
            *(float32x2_t *)v2151.f32 = vadd_f32(*(float32x2_t *)(v2501 + 44), (float32x2_t)0x3F0000003F000000);
            __asm { FMOV            V3.2S, #1.0 }
            *(float32x2_t *)v2153.f32 = vdiv_f32(_D3, vcvt_f32_s32(vmax_s32(*(int32x2_t *)((char *)&v2559 + 8), (int32x2_t)0x100000001)));
            v2153.i64[1] = v2153.i64[0];
            v2151.i64[1] = *(_QWORD *)(v2501 + 52);
            v2154 = vmulq_f32(v2151, v2153);
            v2153.i32[0] = v2154.i32[1];
            *(double *)v2154.i64 = v2154.f32[0];
            *(double *)v2153.i64 = v2153.f32[0];
            v2155 = v2154.f32[2];
            v2156 = v2154.f32[3];
            v2157 = CGRectCreateDictionaryRepresentation(*(CGRect *)((char *)&v2153 - 8));
            cva::DictionaryHandler::DictionaryHandler((cva::DictionaryHandler *)buf, v2157);
            CFRelease(v2157);
            cva::ItemHandler::ItemHandler();
            cva::DictionaryHandler::setItem((cva::DictionaryHandler *)(v2149 + 3), CFSTR("inital_bounding_box"), (const cva::ItemHandler *)v2608);
            cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v2608);
            cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)buf);
            *(_QWORD *)buf = 0;
            if (!cva::createCVPixelBufferFromImageCopy<unsigned char>())
            {
              v2158 = (__CFDictionary *)cva::DictionaryHandler::getDictionary(v2150);
              CFDictionaryAddValue(v2158, CFSTR("rgb_crop"), *(const void **)buf);
              CVPixelBufferRelease(*(CVPixelBufferRef *)buf);
            }
            v2159 = CFDataCreate(0, *(const UInt8 **)v2592, 8 * *(_DWORD *)&v2592[16]);
            cva::ItemHandler::createData(v2159, v2160);
            cva::DictionaryHandler::setItem(v2150, CFSTR("initial_landmarks"), (const cva::ItemHandler *)buf);
            cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
            CFRelease(v2159);
            v2161 = *(_QWORD *)(*(_QWORD *)v2538 + 32);
            *(_QWORD *)v2608 = *(_QWORD *)(*(_QWORD *)v2538 + 24);
            *(_QWORD *)&v2608[8] = v2161;
            if (v2161)
            {
              v2162 = (unint64_t *)(v2161 + 8);
              do
                v2163 = __ldxr(v2162);
              while (__stxr(v2163 + 1, v2162));
            }
            v2164 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
            if ((v2164 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
            {
              sub_1C98CFF14();
              __cxa_guard_release(&qword_1ED52ACD8);
              v952 = v2449;
            }
            if (*(_BYTE *)(qword_1ED52ACB8 + 104))
            {
              v2166 = *(_QWORD *)(*(_QWORD *)v2538 + 136);
              v2165 = *(std::__shared_weak_count **)(*(_QWORD *)v2538 + 144);
              if (v2165)
              {
                v2167 = (unint64_t *)&v2165->__shared_owners_;
                do
                  v2168 = __ldxr(v2167);
                while (__stxr(v2168 + 1, v2167));
                v2169 = (unint64_t *)&v2165->__shared_owners_;
                do
                  v2170 = __ldaxr(v2169);
                while (__stlxr(v2170 - 1, v2169));
                if (!v2170)
                {
                  ((void (*)(std::__shared_weak_count *))v2165->__on_zero_shared)(v2165);
                  std::__shared_weak_count::__release_weak(v2165);
                }
              }
              if (v2166)
              {
                v2172 = *(_QWORD *)(*(_QWORD *)v2538 + 136);
                v2171 = *(std::__shared_weak_count **)(*(_QWORD *)v2538 + 144);
                *(_QWORD *)buf = v2172;
                *(_QWORD *)&buf[8] = v2171;
                if (v2171)
                {
                  v2173 = (unint64_t *)&v2171->__shared_owners_;
                  do
                    v2174 = __ldxr(v2173);
                  while (__stxr(v2174 + 1, v2173));
                }
                v2175 = (std::mutex *)(v2172 + 1064);
                std::mutex::lock((std::mutex *)(v2172 + 1064));
                if (v2171)
                {
                  v2176 = (unint64_t *)&v2171->__shared_owners_;
                  do
                    v2177 = __ldaxr(v2176);
                  while (__stlxr(v2177 - 1, v2176));
                  if (!v2177)
                  {
                    ((void (*)(std::__shared_weak_count *))v2171->__on_zero_shared)(v2171);
                    std::__shared_weak_count::__release_weak(v2171);
                  }
                }
                v2178 = CFDataCreate(0, *(const UInt8 **)(v2172 + 1040), 4 * *(int *)(v2172 + 1056));
                v2179 = (cva::DictionaryHandler *)__p[0];
                cva::ItemHandler::createData(v2178, v2180);
                cva::DictionaryHandler::setItem(v2179, CFSTR("identity_snapshot_coefficients"), (const cva::ItemHandler *)buf);
                cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
                CFRelease(v2178);
                std::mutex::unlock(v2175);
              }
            }
            if (*(_QWORD *)(**(_QWORD **)v2608 + 24) != *(_QWORD *)(**(_QWORD **)v2608 + 32))
            {
              v2181 = CFDataCreate(0, *(const UInt8 **)(**(_QWORD **)v2608 + 120), 4 * *(int *)(**(_QWORD **)v2608 + 136));
              v2182 = (cva::DictionaryHandler *)__p[0];
              cva::ItemHandler::createData(v2181, v2183);
              cva::DictionaryHandler::setItem(v2182, CFSTR("faceprint_snapshot_coefficients"), (const cva::ItemHandler *)buf);
              cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
              (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(v2148 + 160) + 40))(buf);
              if (buf[23] >= 0)
                v2184 = buf;
              else
                v2184 = *(const char **)buf;
              v2185 = CFStringCreateWithCString(0, v2184, 0x8000100u);
              if ((buf[23] & 0x80000000) != 0)
                operator delete(*(void **)buf);
              v2186 = (__CFDictionary *)cva::DictionaryHandler::getDictionary(v2182);
              CFDictionaryAddValue(v2186, CFSTR("recognition_framework_version"), v2185);
              CFRelease(v2185);
              CFRelease(v2181);
            }
            v2187 = *(std::__shared_weak_count **)&v2608[8];
            if (*(_QWORD *)&v2608[8])
            {
              v2188 = (unint64_t *)(*(_QWORD *)&v2608[8] + 8);
              do
                v2189 = __ldaxr(v2188);
              while (__stlxr(v2189 - 1, v2188));
              if (!v2189)
              {
                ((void (*)(std::__shared_weak_count *))v2187->__on_zero_shared)(v2187);
                std::__shared_weak_count::__release_weak(v2187);
              }
            }
            cva::ItemHandler::ItemHandler();
            cva::DictionaryHandler::setItem(v2146, CFSTR("debug"), (const cva::ItemHandler *)buf);
            cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
            v2190 = (std::__shared_weak_count *)__p[1];
            if (__p[1])
            {
              v2191 = (unint64_t *)((char *)__p[1] + 8);
              do
                v2192 = __ldaxr(v2191);
              while (__stlxr(v2192 - 1, v2191));
              if (!v2192)
              {
                ((void (*)(std::__shared_weak_count *))v2190->__on_zero_shared)(v2190);
                std::__shared_weak_count::__release_weak(v2190);
              }
            }
          }
          kdebug_trace();
          v2193 = (char *)v2544;
          v2194 = v2514;
          if (*((_QWORD *)&v2514 + 1))
          {
            v2195 = (unint64_t *)(*((_QWORD *)&v2514 + 1) + 8);
            do
              v2196 = __ldxr(v2195);
            while (__stxr(v2196 + 1, v2195));
          }
          v2197 = &v2193[16 * v952];
          v2198 = (std::__shared_weak_count *)*((_QWORD *)v2197 + 1);
          *(_OWORD *)v2197 = v2194;
          if (v2198)
          {
            v2199 = (unint64_t *)&v2198->__shared_owners_;
            do
              v2200 = __ldaxr(v2199);
            while (__stlxr(v2200 - 1, v2199));
            if (!v2200)
            {
              ((void (*)(std::__shared_weak_count *))v2198->__on_zero_shared)(v2198);
              std::__shared_weak_count::__release_weak(v2198);
            }
          }
          v1874 = (std::__shared_weak_count *)*((_QWORD *)&v2514 + 1);
          if (*((_QWORD *)&v2514 + 1))
          {
            v2201 = (unint64_t *)(*((_QWORD *)&v2514 + 1) + 8);
            do
              v1906 = __ldaxr(v2201);
            while (__stlxr(v1906 - 1, v2201));
            goto LABEL_2430;
          }
        }
      }
LABEL_2431:
      if ((v1867 & 1) != 0)
        goto LABEL_2432;
    }
    else
    {
      if (!v1874)
        goto LABEL_2431;
      v1905 = (unint64_t *)&v1874->__shared_owners_;
      do
        v1906 = __ldaxr(v1905);
      while (__stlxr(v1906 - 1, v1905));
LABEL_2430:
      if (v1906)
        goto LABEL_2431;
      ((void (*)(std::__shared_weak_count *))v1874->__on_zero_shared)(v1874);
      std::__shared_weak_count::__release_weak(v1874);
      if ((v1867 & 1) != 0)
      {
LABEL_2432:
        v2202 = (uint64_t *)v2538;
        ++*(_DWORD *)(*(_QWORD *)v2538 + 4);
        sub_1C98EB318(v2202);
      }
    }
    free(*(void **)v2592);
    v961 = v2424;
    v951 = v2439;
    if (*(_QWORD *)&v2599[24])
      free(*(void **)&v2599[24]);
    v502 = v2454;
    v979 = v2537;
    if (v2537)
    {
LABEL_2436:
      v2203 = (unint64_t *)&v979->__shared_owners_;
      do
        v2204 = __ldaxr(v2203);
      while (__stlxr(v2204 - 1, v2203));
      if (!v2204)
      {
        ((void (*)(std::__shared_weak_count *))v979->__on_zero_shared)(v979);
        std::__shared_weak_count::__release_weak(v979);
      }
    }
LABEL_2440:
    v2205 = (std::__shared_weak_count *)*((_QWORD *)&v2538 + 1);
    if (*((_QWORD *)&v2538 + 1))
    {
      v2206 = (unint64_t *)(*((_QWORD *)&v2538 + 1) + 8);
      do
        v2207 = __ldaxr(v2206);
      while (__stlxr(v2207 - 1, v2206));
      if (!v2207)
      {
        ((void (*)(std::__shared_weak_count *))v2205->__on_zero_shared)(v2205);
        std::__shared_weak_count::__release_weak(v2205);
      }
    }
    if (!v961)
      goto LABEL_914;
    if (++v952 != v2457)
      continue;
    break;
  }
  kdebug_trace();
  v2273 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a2 + 160) + 32))(*(_QWORD *)(*a2 + 160));
  v2276 = v2445;
  if (!v2273)
    goto LABEL_2766;
  v2277 = v2551 - (_BYTE *)v2550;
  if (v2551 == v2550)
  {
    v2279 = 0;
    v2280 = 0;
  }
  else
  {
    if (v2277 < 0)
LABEL_2805:
      abort();
    v2278 = v2277 >> 4;
    v2279 = (char *)operator new(v2277);
    v2280 = &v2279[16 * v2278];
  }
  v2300 = atomic_load((unsigned __int8 *)&qword_1EF921308);
  v2276 = v2445;
  if ((v2300 & 1) == 0)
  {
    v2403 = __cxa_guard_acquire(&qword_1EF921308);
    v2276 = v2445;
    if (v2403)
    {
      dword_1EF921300 = 1059760811;
      __cxa_guard_release(&qword_1EF921308);
      v2276 = v2445;
    }
  }
  v2301 = (char *)v2550;
  v2302 = v2551;
  if (v2550 == v2551)
  {
LABEL_2763:
    v502 = v2454;
    goto LABEL_2764;
  }
  LODWORD(v2275) = dword_1EF921300;
  v2303 = v2279;
  while (2)
  {
    v2305 = *(float32x2_t *)(**(_QWORD **)v2301 + 52);
    *(float32x2_t *)&v2306 = vsub_f32(*(float32x2_t *)(**(_QWORD **)v2301 + 44), vmul_n_f32(v2305, (float)(*(float *)&v2275 + -1.0) * 0.5));
    *(float32x2_t *)&v2274 = vmul_n_f32(v2305, *(float *)&v2275);
    if (v2303 < v2280)
    {
      *(_QWORD *)v2303 = v2306;
      *((_QWORD *)v2303 + 1) = v2274;
      v2304 = v2303 + 16;
    }
    else
    {
      v2307 = v2303 - v2279;
      v2308 = (v2303 - v2279) >> 4;
      v2309 = v2308 + 1;
      if ((unint64_t)(v2308 + 1) >> 60)
        goto LABEL_2805;
      if ((v2280 - v2279) >> 3 > v2309)
        v2309 = (v2280 - v2279) >> 3;
      if ((unint64_t)(v2280 - v2279) >= 0x7FFFFFFFFFFFFFF0)
        v2310 = 0xFFFFFFFFFFFFFFFLL;
      else
        v2310 = v2309;
      if (v2310)
      {
        v2484 = v2274;
        v2502 = v2306;
        v2508 = v2275;
        if (v2310 >> 60)
          goto LABEL_2804;
        v2311 = (char *)operator new(16 * v2310);
        *(_QWORD *)&v2306 = v2502;
        v2275 = v2508;
        v2274 = v2484;
      }
      else
      {
        v2311 = 0;
      }
      *((_QWORD *)&v2306 + 1) = v2274;
      v2312 = &v2311[16 * v2308];
      *(_OWORD *)v2312 = v2306;
      v2304 = v2312 + 16;
      v2313 = v2303 - v2279;
      if (v2303 != v2279)
      {
        v2314 = v2313 - 16;
        if ((unint64_t)(v2313 - 16) < 0x3F0)
        {
          v2315 = v2303;
          goto LABEL_2660;
        }
        v2317 = v2314 & 0xFFFFFFFFFFFFFFF0;
        if (&v2311[v2307 - 16 - (v2314 & 0xFFFFFFFFFFFFFFF0)] > &v2311[v2307 - 16])
        {
          v2315 = v2303;
          goto LABEL_2660;
        }
        v2318 = &v2311[v2307 - 8];
        if (&v2318[-v2317] > v2318)
        {
          v2315 = v2303;
          goto LABEL_2660;
        }
        if (&v2303[-v2317 - 16] > v2303 - 16)
        {
          v2315 = v2303;
          goto LABEL_2660;
        }
        v2319 = v2303 - 8;
        if (&v2303[-v2317 - 8] > v2303 - 8)
        {
          v2315 = v2303;
          goto LABEL_2660;
        }
        v2320 = v2314 >> 4;
        v2321 = v2307 - v2317;
        v2322 = &v2311[v2321 - 16];
        v2323 = &v2311[v2321 - 8];
        v2324 = (unint64_t)&v2303[-16 * v2320 - 16];
        v2325 = &v2319[-16 * v2320];
        v2327 = v2322 < v2319 && v2324 < (unint64_t)v2318;
        v2329 = v2322 < v2303 && v2325 < v2318;
        v2331 = v2323 < v2319 && v2324 < (unint64_t)v2312;
        v2333 = v2323 < v2303 && v2325 < v2312;
        if (v2323 < v2318 && v2322 < v2312)
        {
          v2315 = v2303;
          goto LABEL_2660;
        }
        if (v2327)
        {
          v2315 = v2303;
          goto LABEL_2660;
        }
        if (v2329)
        {
          v2315 = v2303;
          goto LABEL_2660;
        }
        if (v2331)
        {
          v2315 = v2303;
          goto LABEL_2660;
        }
        if (v2333)
        {
          v2315 = v2303;
          goto LABEL_2660;
        }
        v2335 = v2320 + 1;
        v2315 = &v2303[-16 * (v2335 & 0x1FFFFFFFFFFFFFFCLL)];
        v2336 = (const double *)(v2303 - 32);
        v2337 = (double *)(v2312 - 32);
        v2338 = v2335 & 0x1FFFFFFFFFFFFFFCLL;
        do
        {
          *(float64x2x2_t *)(&v2274 - 1) = vld2q_f64(v2336);
          v2339 = v2336 - 4;
          v2613 = vld2q_f64(v2339);
          vst2q_f64(v2337, *(float64x2x2_t *)(&v2274 - 1));
          v2340 = v2337 - 4;
          vst2q_f64(v2340, v2613);
          v2337 -= 8;
          v2336 -= 8;
          v2338 -= 4;
        }
        while (v2338);
        v2312 -= 16 * (v2335 & 0x1FFFFFFFFFFFFFFCLL);
        if (v2335 != (v2335 & 0x1FFFFFFFFFFFFFFCLL))
        {
          do
          {
LABEL_2660:
            v2316 = *((_QWORD *)v2315 - 2);
            v2315 -= 16;
            *((_QWORD *)v2312 - 2) = v2316;
            v2312 -= 16;
            *((_QWORD *)v2312 + 1) = *((_QWORD *)v2315 + 1);
          }
          while (v2315 != v2279);
        }
      }
      v2280 = &v2311[16 * v2310];
      if (v2279)
      {
        operator delete(v2279);
        LODWORD(v2275) = dword_1EF921300;
      }
      v2279 = v2312;
    }
    v2301 += 16;
    v2303 = v2304;
    if (v2301 != v2302)
      continue;
    break;
  }
  v2341 = v2551;
  v2342 = (char *)v2550;
  if (v2551 == v2550)
  {
    v2276 = v2445;
    goto LABEL_2763;
  }
  v2343 = 0;
  v502 = v2454;
  do
  {
    v2344 = 16 * v2343;
    v2345 = v2343 + 1;
    v2346 = (v2341 - v2342) >> 4;
    if (*(_QWORD *)(**(_QWORD **)&v2342[16 * v2343] + 128))
      v2347 = v2345 >= v2346;
    else
      v2347 = 1;
    if (!v2347)
    {
      v2348 = (float32x2_t *)&v2279[16 * v2343];
      v2349 = v2343 + 1;
      while (1)
      {
        if (!*(_QWORD *)(**(_QWORD **)&v2342[16 * v2349] + 128))
          goto LABEL_2723;
        v2350 = (float32x2_t *)&v2279[16 * v2349];
        v2351 = v2348[1];
        v2352 = vcvtq_f64_f32(*v2348);
        v2353 = vcvtq_f64_f32(*v2350);
        v2354 = vcgt_f32(*v2350, *v2348);
        v2355.i64[0] = v2354.i32[0];
        v2355.i64[1] = v2354.i32[1];
        v2356 = (float64x2_t)vbslq_s8(v2355, (int8x16_t)v2353, (int8x16_t)v2352);
        v2357 = vaddq_f64(v2353, vcvtq_f64_f32(v2350[1]));
        v2358 = vaddq_f64(v2352, vcvtq_f64_f32(v2351));
        *(float32x2_t *)&v2356.f64[0] = vcvt_f32_f64(vsubq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v2358, v2357), (int8x16_t)v2357, (int8x16_t)v2358), v2356));
        *(int32x2_t *)&v2358.f64[0] = vcltz_f32(*(float32x2_t *)&v2356.f64[0]);
        LODWORD(v2359) = vmul_lane_f32(*(float32x2_t *)&v2356.f64[0], *(float32x2_t *)&v2356.f64[0], 1).u32[0];
        if (((LOBYTE(v2358.f64[0]) | BYTE4(v2358.f64[0])) & 1) != 0)
          v2359 = 0.0;
        v2360 = v2351.f32[1] < 0.0 || v2351.f32[0] < 0.0;
        v2361 = vmuls_lane_f32(v2351.f32[0], v2351, 1);
        if (v2360)
          v2361 = 0.0;
        v2362 = **(_QWORD ***)&v2342[v2344];
        if (v2362[16])
        {
          v2363 = (uint64_t *)(*(_QWORD *)(v2362[12] + ((v2362[15] >> 4) & 0xFFFFFFFFFFFFFF8))
                            + 32 * (v2362[15] & 0x7FLL));
          v2364 = *v2363;
          v2365 = (std::__shared_weak_count *)v2363[1];
          if (v2365)
          {
            v2366 = (unint64_t *)&v2365->__shared_owners_;
            do
              v2367 = __ldxr(v2366);
            while (__stxr(v2367 + 1, v2366));
          }
        }
        else
        {
          v2364 = 0;
          v2365 = 0;
        }
        v2368 = v2359 / v2361;
        if ((float)(v2359 / v2361) < 0.1 || *(_DWORD *)(v2364 + 252))
        {
          if (!v2365)
            goto LABEL_2746;
        }
        else
        {
          *(_DWORD *)(v2364 + 252) = 101;
          if (!v2365)
            goto LABEL_2746;
        }
        v2369 = (unint64_t *)&v2365->__shared_owners_;
        do
          v2370 = __ldaxr(v2369);
        while (__stlxr(v2370 - 1, v2369));
        if (!v2370)
        {
          ((void (*)(std::__shared_weak_count *))v2365->__on_zero_shared)(v2365);
          std::__shared_weak_count::__release_weak(v2365);
        }
LABEL_2746:
        v2371 = (_QWORD *)**((_QWORD **)v2550 + 2 * v2349);
        if (v2371[16])
        {
          v2372 = (uint64_t *)(*(_QWORD *)(v2371[12] + ((v2371[15] >> 4) & 0xFFFFFFFFFFFFFF8))
                            + 32 * (v2371[15] & 0x7FLL));
          v2373 = *v2372;
          v2374 = (std::__shared_weak_count *)v2372[1];
          if (v2374)
          {
            v2375 = (unint64_t *)&v2374->__shared_owners_;
            do
              v2376 = __ldxr(v2375);
            while (__stxr(v2376 + 1, v2375));
          }
        }
        else
        {
          v2373 = 0;
          v2374 = 0;
        }
        if (v2368 < 0.1 || *(_DWORD *)(v2373 + 252))
        {
          if (v2374)
            goto LABEL_2755;
        }
        else
        {
          *(_DWORD *)(v2373 + 252) = 101;
          if (v2374)
          {
LABEL_2755:
            v2377 = (unint64_t *)&v2374->__shared_owners_;
            do
              v2378 = __ldaxr(v2377);
            while (__stlxr(v2378 - 1, v2377));
            if (!v2378)
            {
              ((void (*)(std::__shared_weak_count *))v2374->__on_zero_shared)(v2374);
              std::__shared_weak_count::__release_weak(v2374);
            }
          }
        }
        v2341 = v2551;
        v2342 = (char *)v2550;
LABEL_2723:
        ++v2349;
        v2346 = (v2341 - v2342) >> 4;
        if (v2349 >= v2346)
        {
          v502 = v2454;
          break;
        }
      }
    }
    v2343 = v2345;
  }
  while (v2345 < v2346);
  v2276 = v2445;
LABEL_2764:
  if (v2279)
  {
    operator delete(v2279);
    v2276 = v2445;
  }
LABEL_2766:
  (*(void (**)(_QWORD, void **, __CVBuffer *, _OWORD *))(**(_QWORD **)(*a2 + 160) + 16))(*(_QWORD *)(*a2 + 160), &v2550, texture, v2276);
  kdebug_trace();
  if (v2422)
  {
    v2380 = **(_QWORD **)(*a2 + 32);
    v2381 = *(double *)(v2380 + 8);
    if (v2381 >= v2421 || v2381 + 1000.0 <= v2421)
    {
      v2383 = atomic_load((unsigned int *)v2380);
      if (v2383 <= 0)
      {
        kdebug_trace();
        sub_1C98B7BA0(*a2, (uint64_t ***)&v2550, v2421);
        kdebug_trace();
      }
    }
  }
  v2437 = 1;
  if (v502)
    goto LABEL_916;
LABEL_917:
  v794 = (char *)v2541;
  if (v2541)
  {
    if (v2542 != v2541)
    {
      v795 = v2542 - 104;
      v796 = (void (***)(char *))(v2542 - 104);
      do
      {
        v797 = *v796;
        v796 -= 13;
        (*v797)(v795);
        _ZF = v795 == v794;
        v795 = (char *)v796;
      }
      while (!_ZF);
      v794 = (char *)v2541;
    }
    operator delete(v794);
  }
  if (v2437)
  {
    v462 = v2551;
    v463 = (char *)v2550;
    goto LABEL_926;
  }
LABEL_957:
  v818 = (char *)v2544;
  if (v2544)
  {
    v819 = (char *)v2545;
    if (v2545 != v2544)
    {
      do
      {
        v820 = (std::__shared_weak_count *)*((_QWORD *)v819 - 1);
        if (v820)
        {
          v821 = (unint64_t *)&v820->__shared_owners_;
          do
            v822 = __ldaxr(v821);
          while (__stlxr(v822 - 1, v821));
          if (!v822)
          {
            ((void (*)(std::__shared_weak_count *))v820->__on_zero_shared)(v820);
            std::__shared_weak_count::__release_weak(v820);
          }
        }
        v819 -= 16;
      }
      while (v819 != v818);
      v818 = (char *)v2544;
    }
    operator delete(v818);
  }
  v823 = v2548[0];
  if (v2548[0])
  {
    do
    {
      v828 = (_QWORD *)*v823;
      v829 = (_QWORD *)v823[6];
      if (v829)
      {
        do
        {
          v830 = (_QWORD *)*v829;
          operator delete(v829);
          v829 = v830;
        }
        while (v830);
      }
      v831 = (void *)v823[4];
      v823[4] = 0;
      if (v831)
        operator delete(v831);
      operator delete(v823);
      v823 = v828;
    }
    while (v828);
  }
  v824 = v2547[0];
  v2547[0] = 0;
  if (v824)
    operator delete(v824);
  v825 = (char *)v2550;
  if (v2550)
  {
LABEL_972:
    v826 = v2551;
    v827 = v825;
    if (v2551 != v825)
    {
      do
      {
        v832 = (std::__shared_weak_count *)*((_QWORD *)v826 - 1);
        if (v832)
        {
          v833 = (unint64_t *)&v832->__shared_owners_;
          do
            v834 = __ldaxr(v833);
          while (__stlxr(v834 - 1, v833));
          if (!v834)
          {
            ((void (*)(std::__shared_weak_count *))v832->__on_zero_shared)(v832);
            std::__shared_weak_count::__release_weak(v832);
          }
        }
        v826 -= 16;
      }
      while (v826 != v825);
      v827 = v2550;
    }
    v2551 = v825;
    operator delete(v827);
  }
LABEL_987:
  v835 = v2565;
  if (v2565)
  {
    v836 = (unint64_t *)&v2565->__shared_owners_;
    do
      v837 = __ldaxr(v836);
    while (__stlxr(v837 - 1, v836));
    if (!v837)
    {
      ((void (*)(std::__shared_weak_count *))v835->__on_zero_shared)(v835);
      std::__shared_weak_count::__release_weak(v835);
    }
  }
  if (v2566)
  {
    v2567 = (char *)v2566;
    operator delete(v2566);
  }
  std::mutex::unlock(&stru_1ED52AC78);
}

void sub_1C98CBF60(_Unwind_Exception *a1)
{
  void *v2;

  __cxa_guard_abort(&qword_1ED52ACD8);
  sub_1C98A7D08((void **)&STACK[0x650]);
  kdebug_trace();
  if (STACK[0x220])
    operator delete((void *)STACK[0x220]);
  sub_1C98CC924((void **)&STACK[0x390]);
  sub_1C98A7D08((void **)&STACK[0x3A8]);
  sub_1C98CC994((uint64_t)&STACK[0x3C0]);
  sub_1C98A7D08((void **)&STACK[0x3F0]);
  sub_1C987C140((uint64_t)&STACK[0x4D8]);
  v2 = (void *)STACK[0x4E8];
  if (STACK[0x4E8])
  {
    STACK[0x4F0] = (unint64_t)v2;
    operator delete(v2);
  }
  std::mutex::unlock(&stru_1ED52AC78);
  _Unwind_Resume(a1);
}

void sub_1C98CC760(_QWORD *a1)
{
  _QWORD *v2;
  char __p[21];
  _BYTE v4[16];
  _QWORD *v5;
  _QWORD *v6;

  v2 = operator new(0x28uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_1E8295758;
  cva::DictionaryHandler::DictionaryHandler((cva::DictionaryHandler *)(v2 + 3));
  v5 = v2 + 3;
  v6 = v2;
  strcpy(__p, "internal logic error");
  cva::ItemHandler::createValue<std::string>();
  cva::DictionaryHandler::setItem((cva::DictionaryHandler *)(v2 + 3), "facekit error", (const cva::ItemHandler *)v4);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v4);
  *a1 = v2 + 3;
  a1[1] = v2;
}

void sub_1C98CC81C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18)
{
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&a16);
  if (a14 < 0)
    operator delete(__p);
  sub_1C987C140((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_1C98CC850(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

float *sub_1C98CC868(float *result, uint64_t a2)
{
  float *v2;
  float *v3;
  float *v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  uint64_t v11;
  int v12;

  v2 = result;
  v3 = *(float **)(a2 + 8);
  if (v3 == result)
  {
    v12 = 0;
    v11 = 0;
    result = (float *)sub_1C98CC868(&v11);
    *(_QWORD *)v2 = v11;
    *((_DWORD *)v2 + 2) = v12;
  }
  else
  {
    v4 = **(float ***)a2;
    v5 = v4[1];
    v6 = v4[2];
    v7 = v4[4];
    v8 = v4[5];
    v9 = v4[7];
    v10 = v4[8];
    *result = (float)((float)(0.0 - (float)(*v4 * *v3)) - (float)(v4[3] * v3[1])) - (float)(v4[6] * v3[2]);
    result[1] = (float)((float)(0.0 - (float)(v5 * *v3)) - (float)(v7 * v3[1])) - (float)(v9 * v3[2]);
    result[2] = (float)((float)(0.0 - (float)(v6 * *v3)) - (float)(v8 * v3[1])) - (float)(v10 * v3[2]);
  }
  return result;
}

void **sub_1C98CC924(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  char *v6;
  void (**v7)(char *);
  BOOL v8;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = v3 - 104;
      v6 = v3 - 104;
      do
      {
        v7 = *(void (***)(char *))v6;
        v6 -= 104;
        (*v7)(v5);
        v8 = v5 == v2;
        v5 = v6;
      }
      while (!v8);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_1C98CC994(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = (_QWORD *)v2[6];
      if (v6)
      {
        do
        {
          v7 = (_QWORD *)*v6;
          operator delete(v6);
          v6 = v7;
        }
        while (v7);
      }
      v8 = (void *)v2[4];
      v2[4] = 0;
      if (v8)
        operator delete(v8);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void sub_1C98CCA14(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E82956B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1C98CCA24(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E82956B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA44AFCLL);
}

void sub_1C98CCA54(uint64_t a1)
{
  cva::ArrayHandler::~ArrayHandler((cva::ArrayHandler *)(a1 + 24));
}

void sub_1C98CCA60(unsigned int ***a1, int8x8_t *a2, uint64_t a3)
{
  int8x8_t v3;
  unsigned int **v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t **v12;
  uint64_t **v13;
  unsigned int v14;
  _DWORD *v15;
  float v16;
  size_t prime;
  BOOL v18;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  void *v22;
  char *v23;
  uint64_t **v24;
  char *v25;
  int8x8_t v26;
  _BYTE *v27;
  unint64_t v28;
  uint8x8_t v29;
  _DWORD **v30;
  _DWORD *v31;
  unint64_t v32;
  unint64_t v33;
  float v34;
  _BOOL8 v35;
  unint64_t v36;
  unint64_t v37;
  size_t v38;
  unint64_t v39;
  uint8x8_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t v44;
  int8x8_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  __int128 *v58;
  uint64_t v59;
  __int128 v60;
  int v61;
  uint64_t *v62;
  uint64_t **v63;
  BOOL v64;
  int v65;
  unint64_t v66;
  unsigned int *v67;
  unsigned int *v68;
  unint64_t v69;
  _QWORD *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  int v75;
  unint64_t v76;
  _DWORD *v77;
  uint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  void *v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t *v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t *v94;
  unint64_t v95;
  void *v98[2];
  void *__p[2];
  float v100;
  uint64_t **v101;
  uint64_t *v102;
  uint64_t v103;

  v102 = 0;
  v103 = 0;
  v101 = &v102;
  v5 = *a1;
  v6 = *((_DWORD *)*a1 + 4);
  if (v6)
  {
    v7 = 0;
    v8 = *v5;
    v9 = (uint64_t)&(*v5)[3 * v6];
    do
    {
      v3 = (int8x8_t)*v8;
      v11 = v102;
      v12 = &v102;
      v13 = &v102;
      if (v102)
      {
        while (1)
        {
          while (1)
          {
            v13 = (uint64_t **)v11;
            v14 = *((_DWORD *)v11 + 7);
            if (v3.i32[0] >= v14)
              break;
            v11 = *v13;
            v12 = v13;
            if (!*v13)
              goto LABEL_13;
          }
          if (v14 >= v3.i32[0])
            break;
          v11 = v13[1];
          if (!v11)
          {
            v12 = v13 + 1;
            goto LABEL_13;
          }
        }
      }
      else
      {
LABEL_13:
        v15 = operator new(0x20uLL);
        v15[7] = v3.i32[0];
        *(_QWORD *)v15 = 0;
        *((_QWORD *)v15 + 1) = 0;
        *((_QWORD *)v15 + 2) = v13;
        *v12 = (uint64_t *)v15;
        if (*v101)
        {
          v101 = (uint64_t **)*v101;
          v10 = *v12;
        }
        else
        {
          v10 = (uint64_t *)v15;
        }
        sub_1C9880828(v102, v10);
        v7 = ++v103;
      }
      ++v8;
    }
    while (v8 != (unsigned int *)v9);
  }
  else
  {
    v7 = 0;
  }
  *(_OWORD *)v98 = 0u;
  *(_OWORD *)__p = 0u;
  v100 = 1.0;
  v16 = (float)(unint64_t)(int)v7;
  prime = (unint64_t)v16;
  if ((unint64_t)v16 == 1)
  {
    prime = 2;
LABEL_32:
    sub_1C98CD2F0((uint64_t)v98, prime);
    goto LABEL_33;
  }
  if ((prime & ((unint64_t)v16 - 1)) != 0)
  {
    prime = std::__next_prime((unint64_t)v16);
    v3 = (int8x8_t)v98[1];
    v18 = (void *)prime >= v98[1];
    if ((void *)prime > v98[1])
      goto LABEL_32;
  }
  else
  {
    v3 = 0;
    v18 = 1;
    if (prime)
      goto LABEL_32;
  }
  if (!v18)
  {
    v19 = vcvtps_u32_f32((float)(unint64_t)__p[1] / v100);
    if (*(_QWORD *)&v3 < 3uLL || (v20 = (uint8x8_t)vcnt_s8(v3), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
    {
      v19 = std::__next_prime(v19);
    }
    else
    {
      v21 = 1 << -(char)__clz(v19 - 1);
      if (v19 >= 2)
        v19 = v21;
    }
    if (prime <= v19)
      prime = v19;
    if (prime < *(_QWORD *)&v3)
      goto LABEL_32;
  }
LABEL_33:
  v22 = (void *)*a2;
  a2[1] = *a2;
  if ((int)v7 > (unint64_t)((uint64_t)(*(_QWORD *)&a2[2] - (_QWORD)v22) >> 2))
  {
    if (v7 << 32 < 0)
      goto LABEL_179;
    v23 = (char *)operator new((4 * v7) & 0x3FFFFFFFFLL);
    *a2 = (int8x8_t)v23;
    a2[1] = (int8x8_t)v23;
    a2[2] = (int8x8_t)&v23[4 * (int)v7];
    if (v22)
      operator delete(v22);
  }
  v24 = v101;
  if (v101 != &v102)
  {
    v25 = (char *)a2[1];
    while (1)
    {
      v26 = (int8x8_t)*((unsigned int *)v24 + 7);
      v27 = (_BYTE *)*a2;
      v28 = (unint64_t)v98[1];
      if (v98[1])
      {
        v29 = (uint8x8_t)vcnt_s8((int8x8_t)v98[1]);
        v29.i16[0] = vaddlv_u8(v29);
        if (v29.u32[0] > 1uLL)
        {
          v3 = (int8x8_t)*((unsigned int *)v24 + 7);
          if (v98[1] <= (void *)*(_QWORD *)&v26)
            v3 = (int8x8_t)(*(_QWORD *)&v26 % (unint64_t)v98[1]);
        }
        else
        {
          v3 = (int8x8_t)((LODWORD(v98[1]) - 1) & v26.i32[0]);
        }
        v30 = (_DWORD **)*((_QWORD *)v98[0] + *(_QWORD *)&v3);
        if (v30)
        {
          v31 = *v30;
          if (*v30)
          {
            if (v29.u32[0] < 2uLL)
            {
              while (1)
              {
                v33 = *((_QWORD *)v31 + 1);
                if (v33 == *(_QWORD *)&v26)
                {
                  if (v31[4] == v26.i32[0])
                    goto LABEL_60;
                }
                else if ((v33 & ((unint64_t)v98[1] - 1)) != *(_QWORD *)&v3)
                {
                  goto LABEL_61;
                }
                v31 = *(_DWORD **)v31;
                if (!v31)
                  goto LABEL_61;
              }
            }
            do
            {
              v32 = *((_QWORD *)v31 + 1);
              if (v32 == *(_QWORD *)&v26)
              {
                if (v31[4] == v26.i32[0])
                {
LABEL_60:
                  v3 = (int8x8_t)v25;
                  goto LABEL_99;
                }
              }
              else
              {
                if ((void *)v32 >= v98[1])
                  v32 %= (unint64_t)v98[1];
                if (v32 != *(_QWORD *)&v3)
                  break;
              }
              v31 = *(_DWORD **)v31;
            }
            while (v31);
          }
        }
      }
LABEL_61:
      v31 = operator new(0x18uLL);
      *(_QWORD *)v31 = 0;
      *((int8x8_t *)v31 + 1) = v26;
      v31[4] = v26.i32[0];
      v31[5] = 0;
      v34 = (float)((unint64_t)__p[1] + 1);
      if (!v28 || (float)(v100 * (float)v28) < v34)
      {
        v35 = (v28 & (v28 - 1)) != 0;
        if (v28 < 3)
          v35 = 1;
        v36 = v35 | (2 * v28);
        v37 = vcvtps_u32_f32(v34 / v100);
        if (v36 <= v37)
          v38 = v37;
        else
          v38 = v36;
        if (v38 == 1)
        {
          v38 = 2;
        }
        else if ((v38 & (v38 - 1)) != 0)
        {
          v38 = std::__next_prime(v38);
          v28 = (unint64_t)v98[1];
        }
        if (v38 > v28)
          goto LABEL_83;
        if (v38 < v28)
        {
          v39 = vcvtps_u32_f32((float)(unint64_t)__p[1] / v100);
          if (v28 < 3 || (v40 = (uint8x8_t)vcnt_s8((int8x8_t)v28), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
          {
            v39 = std::__next_prime(v39);
          }
          else
          {
            v41 = 1 << -(char)__clz(v39 - 1);
            if (v39 >= 2)
              v39 = v41;
          }
          if (v38 <= v39)
            v38 = v39;
          if (v38 < v28)
LABEL_83:
            sub_1C98CD2F0((uint64_t)v98, v38);
        }
        v28 = (unint64_t)v98[1];
        if (((unint64_t)v98[1] & ((unint64_t)v98[1] - 1)) != 0)
        {
          if (v98[1] <= (void *)*(_QWORD *)&v26)
            v3 = (int8x8_t)(*(_QWORD *)&v26 % (unint64_t)v98[1]);
          else
            v3 = v26;
        }
        else
        {
          v3 = (int8x8_t)((LODWORD(v98[1]) - 1) & v26.i32[0]);
        }
      }
      v42 = v98[0];
      v43 = (_QWORD *)*((_QWORD *)v98[0] + *(_QWORD *)&v3);
      if (v43)
        break;
      *(void **)v31 = __p[0];
      __p[0] = v31;
      v42[*(_QWORD *)&v3] = __p;
      if (*(_QWORD *)v31)
      {
        v44 = *(_QWORD *)(*(_QWORD *)v31 + 8);
        if ((v28 & (v28 - 1)) != 0)
        {
          if (v44 >= v28)
            v44 %= v28;
        }
        else
        {
          v44 &= v28 - 1;
        }
        v43 = (char *)v98[0] + 8 * v44;
        goto LABEL_97;
      }
LABEL_98:
      ++__p[1];
      v3 = a2[1];
LABEL_99:
      v31[5] = (unint64_t)(v25 - v27) >> 2;
      v45 = a2[2];
      if (*(_QWORD *)&v3 >= *(_QWORD *)&v45)
      {
        v46 = (char *)*a2;
        v47 = *(_QWORD *)&v3 - *(_QWORD *)a2;
        v48 = v47 >> 2;
        v49 = (v47 >> 2) + 1;
        if (v49 >> 62)
          goto LABEL_179;
        v50 = *(_QWORD *)&v45 - (_QWORD)v46;
        if (v50 >> 1 > v49)
          v49 = v50 >> 1;
        if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL)
          v51 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v51 = v49;
        if (v51)
        {
          if (v51 >> 62)
            sub_1C9899D30();
          v52 = (char *)operator new(4 * v51);
        }
        else
        {
          v52 = 0;
        }
        v53 = &v52[4 * v48];
        *(_DWORD *)v53 = v26.i32[0];
        v25 = v53 + 4;
        if ((char *)v3 != v46)
        {
          v54 = *(_QWORD *)&v3 - 4 - (_QWORD)v46;
          if (v54 < 0x2C)
          {
            v55 = (char *)v3;
            goto LABEL_119;
          }
          if ((unint64_t)(*(_QWORD *)&v3 - (_QWORD)v52 - v47) < 0x20)
          {
            v55 = (char *)v3;
            goto LABEL_119;
          }
          v56 = (v54 >> 2) + 1;
          v55 = (char *)(*(_QWORD *)&v3 - 4 * (v56 & 0x7FFFFFFFFFFFFFF8));
          v57 = &v52[4 * v48 - 16];
          v58 = (__int128 *)(*(_QWORD *)&v3 - 16);
          v59 = v56 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v60 = *v58;
            *((_OWORD *)v57 - 1) = *(v58 - 1);
            *(_OWORD *)v57 = v60;
            v57 -= 32;
            v58 -= 2;
            v59 -= 8;
          }
          while (v59);
          v53 -= 4 * (v56 & 0x7FFFFFFFFFFFFFF8);
          if (v56 != (v56 & 0x7FFFFFFFFFFFFFF8))
          {
            do
            {
LABEL_119:
              v61 = *((_DWORD *)v55 - 1);
              v55 -= 4;
              *((_DWORD *)v53 - 1) = v61;
              v53 -= 4;
            }
            while (v55 != v46);
          }
        }
        *a2 = (int8x8_t)v53;
        a2[1] = (int8x8_t)v25;
        a2[2] = (int8x8_t)&v52[4 * v51];
        if (v46)
          operator delete(v46);
        goto LABEL_122;
      }
      **(_DWORD **)&v3 = v26.i32[0];
      *(_QWORD *)&v3 += 4;
      v25 = (char *)v3;
LABEL_122:
      a2[1] = (int8x8_t)v25;
      v62 = v24[1];
      if (v62)
      {
        do
        {
          v63 = (uint64_t **)v62;
          v62 = (uint64_t *)*v62;
        }
        while (v62);
      }
      else
      {
        do
        {
          v63 = (uint64_t **)v24[2];
          v64 = *v63 == (uint64_t *)v24;
          v24 = v63;
        }
        while (!v64);
      }
      v24 = v63;
      if (v63 == &v102)
        goto LABEL_128;
    }
    *(_QWORD *)v31 = *v43;
LABEL_97:
    *v43 = v31;
    goto LABEL_98;
  }
LABEL_128:
  v65 = *((_DWORD *)*a1 + 4);
  if (v65)
  {
    v66 = (unint64_t)v98[1];
    if (v98[1])
    {
      v67 = **a1;
      v68 = &v67[3 * v65];
      v69 = (unint64_t)v98[1] - 1;
      v70 = v98[0];
      if (((unint64_t)v98[1] & ((unint64_t)v98[1] - 1)) != 0)
      {
        while (1)
        {
          v88 = *v67;
          v89 = v88;
          if (v66 <= v88)
            v89 = v88 % v66;
          v90 = (uint64_t *)v70[v89];
          if (!v90)
            break;
          do
          {
            while (1)
            {
              v90 = (uint64_t *)*v90;
              if (!v90)
                goto LABEL_179;
              v91 = v90[1];
              if (v91 == v88)
                break;
              if (v91 >= v66)
                v91 %= v66;
              if (v91 != v89)
                goto LABEL_179;
            }
          }
          while (*((_DWORD *)v90 + 4) != (_DWORD)v88);
          *v67++ = *((_DWORD *)v90 + 5);
          if (v67 == v68)
            goto LABEL_139;
        }
      }
      else
      {
        v71 = (unint64_t)v98[1] + 0xFFFFFFFF;
        while (1)
        {
          v72 = *v67;
          v73 = (uint64_t *)v70[v71 & v72];
          if (!v73)
            break;
          do
          {
            while (1)
            {
              v73 = (uint64_t *)*v73;
              if (!v73)
                goto LABEL_179;
              v74 = v73[1];
              if (v74 == v72)
                break;
              if ((v74 & v69) != (v71 & v72))
                goto LABEL_179;
            }
          }
          while (*((_DWORD *)v73 + 4) != (_DWORD)v72);
          *v67++ = *((_DWORD *)v73 + 5);
          if (v67 == v68)
            goto LABEL_139;
        }
      }
    }
LABEL_179:
    abort();
  }
LABEL_139:
  v75 = *(_DWORD *)(a3 + 16);
  if (v75)
  {
    v76 = (unint64_t)v98[1];
    if (v98[1])
    {
      v77 = *(_DWORD **)a3;
      v78 = *(_QWORD *)a3 + 4 * (3 * v75);
      v79 = (unint64_t)v98[1] - 1;
      v80 = v98[0];
      if (((unint64_t)v98[1] & ((unint64_t)v98[1] - 1)) != 0)
      {
        while (1)
        {
          v92 = *v77;
          v93 = v92;
          if (v76 <= v92)
            v93 = v92 % v76;
          v94 = (uint64_t *)v80[v93];
          if (!v94)
            break;
          do
          {
            while (1)
            {
              v94 = (uint64_t *)*v94;
              if (!v94)
                goto LABEL_179;
              v95 = v94[1];
              if (v95 == v92)
                break;
              if (v95 >= v76)
                v95 %= v76;
              if (v95 != v93)
                goto LABEL_179;
            }
          }
          while (*((_DWORD *)v94 + 4) != (_DWORD)v92);
          *v77++ = *((_DWORD *)v94 + 5);
          if (v77 == (_DWORD *)v78)
            goto LABEL_150;
        }
      }
      else
      {
        v81 = (unint64_t)v98[1] + 0xFFFFFFFF;
        while (1)
        {
          v82 = *v77;
          v83 = (uint64_t *)v80[v81 & v82];
          if (!v83)
            break;
          do
          {
            while (1)
            {
              v83 = (uint64_t *)*v83;
              if (!v83)
                goto LABEL_179;
              v84 = v83[1];
              if (v84 == v82)
                break;
              if ((v84 & v79) != (v81 & v82))
                goto LABEL_179;
            }
          }
          while (*((_DWORD *)v83 + 4) != (_DWORD)v82);
          *v77++ = *((_DWORD *)v83 + 5);
          if (v77 == (_DWORD *)v78)
            goto LABEL_150;
        }
      }
    }
    goto LABEL_179;
  }
LABEL_150:
  v85 = __p[0];
  if (__p[0])
  {
    do
    {
      v86 = (_QWORD *)*v85;
      operator delete(v85);
      v85 = v86;
    }
    while (v86);
  }
  v87 = v98[0];
  v98[0] = 0;
  if (v87)
    operator delete(v87);
  sub_1C98CD490(v102);
}

void sub_1C98CD2F0(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;

  if (!a2)
  {
    v15 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v15)
      operator delete(v15);
    *(_QWORD *)(a1 + 8) = 0;
    return;
  }
  if (a2 >> 61)
    sub_1C9899D30();
  v4 = operator new(8 * a2);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v6 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
  while (a2 != v6);
  v8 = a1 + 16;
  v7 = *(_QWORD **)(a1 + 16);
  if (v7)
  {
    v9 = v7[1];
    v10 = a2 - 1;
    if ((a2 & (a2 - 1)) == 0)
    {
      v11 = v9 & v10;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = v8;
      while (1)
      {
        v12 = (_QWORD *)*v7;
        if (!*v7)
          break;
        v13 = v12[1] & v10;
        if (v13 == v11)
        {
          v7 = (_QWORD *)*v7;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
        {
          *v7 = *v12;
          v14 = 8 * v13;
          *v12 = **(_QWORD **)(*(_QWORD *)a1 + v14);
          **(_QWORD **)(*(_QWORD *)a1 + v14) = v12;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
          v7 = v12;
          v11 = v13;
        }
      }
      return;
    }
    if (v9 >= a2)
      v9 %= a2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = v8;
    v16 = (_QWORD *)*v7;
    if (*v7)
    {
      do
      {
        v18 = v16[1];
        if (v18 >= a2)
          v18 %= a2;
        if (v18 != v9)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v18))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = v7;
            goto LABEL_26;
          }
          *v7 = *v16;
          v17 = 8 * v18;
          *v16 = **(_QWORD **)(*(_QWORD *)a1 + v17);
          **(_QWORD **)(*(_QWORD *)a1 + v17) = v16;
          v16 = v7;
        }
        v18 = v9;
LABEL_26:
        v7 = v16;
        v16 = (_QWORD *)*v16;
        v9 = v18;
      }
      while (v16);
    }
  }
}

void sub_1C98CD490(_QWORD *a1)
{
  if (a1)
  {
    sub_1C98CD490(*a1);
    sub_1C98CD490(a1[1]);
    operator delete(a1);
  }
}

void sub_1C98CD4C8(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  NSObject *v6;
  const char *v7;
  unsigned __int8 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  size_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  char __p[17];
  char v20;
  _DWORD *v21;
  std::__shared_weak_count *v22;

  v20 = 16;
  strcpy(__p, "landmarks.binary");
  sub_1C98B4EB0(&v21);
  v2 = v21;
  if (!v21)
  {
    v8 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
    if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
    {
      qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
      __cxa_guard_release(&qword_1ED52ACD0);
    }
    v6 = qword_1ED52ACE0;
    if (!os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_ERROR))
      goto LABEL_11;
    *(_WORD *)__p = 0;
    v7 = "failure reading landmarks binary resource";
    goto LABEL_25;
  }
  v18 = 0;
  if (v21[2] != 2)
  {
    v3 = (*(uint64_t (**)(_DWORD *, unsigned int *, uint64_t))(*(_QWORD *)v21 + 144))(v21, &v18, 4);
    if (v3 >= 1)
      v2[2] += v3;
  }
  v4 = v18;
  if (v18 - 1000001 < 0xFFF0BDC0)
  {
    v5 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
    if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
    {
      qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
      __cxa_guard_release(&qword_1ED52ACD0);
    }
    v6 = qword_1ED52ACE0;
    if (!os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_ERROR))
      goto LABEL_11;
    *(_WORD *)__p = 0;
    v7 = "landmarks binary resource seems corrupted";
LABEL_25:
    _os_log_error_impl(&dword_1C9870000, v6, OS_LOG_TYPE_ERROR, v7, (uint8_t *)__p, 2u);
LABEL_11:
    *a1 = 0;
    a1[1] = 0;
    goto LABEL_12;
  }
  v12 = operator new(0x48uLL);
  v12[1] = 0;
  v12[2] = 0;
  *v12 = &off_1E8295A68;
  v13 = (12 * v4 + 31) & 0x7FFFFFFE0;
  v12[4] = v13 >> 2;
  *(_QWORD *)__p = 0;
  malloc_type_posix_memalign((void **)__p, 0x20uLL, v13, 0x49090899uLL);
  v14 = *(void **)__p;
  v12[3] = *(_QWORD *)__p;
  *((_DWORD *)v12 + 10) = v4;
  bzero(v14, 12 * v4);
  v12[7] = v13 >> 2;
  *(_QWORD *)__p = 0;
  malloc_type_posix_memalign((void **)__p, 0x20uLL, v13, 0x49090899uLL);
  v15 = *(void **)__p;
  v12[6] = *(_QWORD *)__p;
  *((_DWORD *)v12 + 16) = v4;
  bzero(v15, 12 * v4);
  *a1 = v12 + 3;
  a1[1] = v12;
  if (*((_DWORD *)v2 + 2) != 2)
  {
    v16 = (*(uint64_t (**)(_QWORD *, void *, uint64_t))(*v2 + 144))(v2, v14, 12 * (int)v18);
    if (v16 >= 1)
      v2[2] += v16;
    if (*((_DWORD *)v2 + 2) != 2)
    {
      v17 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*v2 + 144))(v2, v12[6], 12 * (int)v18);
      if (v17 >= 1)
        v2[2] += v17;
    }
  }
LABEL_12:
  v9 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1C98CD818(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295A68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1C98CD828(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295A68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA44AFCLL);
}

void sub_1C98CD858(uint64_t a1)
{
  free(*(void **)(a1 + 48));
  free(*(void **)(a1 + 24));
}

void sub_1C98CD884(uint64_t *a1, int a2, unsigned int a3, char *__s, const char *a5)
{
  size_t v9;
  std::string::size_type v10;
  std::string *p_dst;
  uint64_t v12;
  uint64_t v13;
  std::string *v14;
  std::string::size_type v15;
  size_t v16;
  std::string *v17;
  std::string::size_type v18;
  size_t v19;
  std::string *v20;
  std::string::size_type v21;
  unsigned __int8 v22;
  NSObject *v23;
  std::string *v24;
  size_t v25;
  std::string::size_type v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  std::string *v30;
  std::string::size_type v31;
  uint64_t v32;
  _OWORD *v33;
  int precompiled_compute_operation;
  void *v35;
  int v36;
  BOOL v37;
  size_t v38;
  std::string::size_type v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  std::string *v43;
  std::string::size_type v44;
  size_t v45;
  std::string::size_type v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  std::string *v50;
  std::string::size_type v51;
  _OWORD *v52;
  int v53;
  void *v54;
  int v55;
  BOOL v56;
  int v57;
  std::string::size_type v58;
  int v59;
  uint64_t v60;
  int v61;
  std::string::size_type v62;
  int v63;
  uint64_t v64;
  unsigned __int8 v65;
  NSObject *v66;
  int v67;
  size_t size;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  std::string *v73;
  char v74;
  unsigned __int8 v75;
  NSObject *v76;
  std::string *v77;
  size_t v78;
  std::string::size_type v79;
  _BYTE *v80;
  std::string *v81;
  const char *v82;
  NSObject *v83;
  uint32_t v84;
  uint64_t v85;
  uint64_t v86;
  size_t v87;
  void *v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned __int8 v94;
  uint64_t v95;
  std::string *v96;
  void **v97;
  std::string *v98;
  void **v99;
  std::string *v100;
  std::string *v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  uint64_t *v108;
  void *__p[2];
  unint64_t v110;
  void *v111[2];
  uint64_t v112;
  std::string __dst;
  std::string v114;
  _BYTE v115[8];
  _BYTE v116[8];
  std::string::size_type v117;
  std::string::size_type v118;
  std::string v119;
  std::string v120;
  uint64_t v121;

  v121 = *MEMORY[0x1E0C80C00];
  v9 = strlen(__s);
  if (v9 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_187;
  v10 = v9;
  if (v9 >= 0x17)
  {
    v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v12 = v9 | 7;
    v13 = v12 + 1;
    p_dst = (std::string *)operator new(v12 + 1);
    __dst.__r_.__value_.__l.__size_ = v10;
    __dst.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v9;
  p_dst = &__dst;
  if (v9)
LABEL_8:
    memcpy(p_dst, __s, v10);
  p_dst->__r_.__value_.__s.__data_[v10] = 0;
  v14 = std::string::append(&__dst, "/", 1uLL);
  v15 = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v119.__r_.__value_.__l.__data_ = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v119.__r_.__value_.__r.__words[2] = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v16 = strlen(__s);
  v17 = std::string::append(&v119, __s, v16);
  v18 = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v120.__r_.__value_.__l.__data_ = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v120.__r_.__value_.__r.__words[2] = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  sub_1C98B50AC((uint64_t)&v114);
  if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v120.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v119.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_11:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_12;
LABEL_16:
      operator delete(__dst.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v114.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_13;
      goto LABEL_17;
    }
  }
  else if ((SHIBYTE(v119.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_11;
  }
  operator delete(v119.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_16;
LABEL_12:
  if ((SHIBYTE(v114.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_13:
    __dst = v114;
    goto LABEL_18;
  }
LABEL_17:
  sub_1C987D148(&__dst, v114.__r_.__value_.__l.__data_, v114.__r_.__value_.__l.__size_);
LABEL_18:
  v108 = a1;
  if (*a5)
  {
    *((_BYTE *)&v120.__r_.__value_.__s + 23) = 5;
    strcpy((char *)&v120, "main_");
    v19 = strlen(a5);
    v20 = std::string::append(&v120, a5, v19);
    v21 = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)v111 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v112 = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v120.__r_.__value_.__l.__data_);
  }
  else
  {
    HIBYTE(v112) = 4;
    strcpy((char *)v111, "main");
  }
  v22 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
  if ((v22 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
  {
    qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
    __cxa_guard_release(&qword_1ED52ACD0);
  }
  v23 = qword_1ED52ACE0;
  if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_DEBUG))
  {
    v96 = &v114;
    if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v96 = (std::string *)v114.__r_.__value_.__r.__words[0];
    v97 = v111;
    if (v112 < 0)
      v97 = (void **)v111[0];
    LODWORD(v120.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)v120.__r_.__value_.__r.__words + 4) = (std::string::size_type)v96;
    WORD2(v120.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v120.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v97;
    _os_log_debug_impl(&dword_1C9870000, v23, OS_LOG_TYPE_DEBUG, "Creating E5RT regressor from %s, configuration %s", (uint8_t *)&v120, 0x16u);
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v24 = &__dst;
  else
    v24 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  v25 = strlen((const char *)v24);
  if (v25 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_187;
  v26 = v25;
  if (v25 >= 0x17)
  {
    v28 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v25 | 7) != 0x17)
      v28 = v25 | 7;
    v29 = v28 + 1;
    v27 = operator new(v28 + 1);
    v119.__r_.__value_.__l.__size_ = v26;
    v119.__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
    v119.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
    goto LABEL_34;
  }
  *((_BYTE *)&v119.__r_.__value_.__s + 23) = v25;
  v27 = &v119;
  if (v25)
LABEL_34:
    memcpy(v27, v24, v26);
  *((_BYTE *)v27 + v26) = 0;
  v30 = std::string::append(&v119, ".bundle", 7uLL);
  v31 = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v120.__r_.__value_.__l.__data_ = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v120.__r_.__value_.__r.__words[2] = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  cva::Path::Path();
  if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v120.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v119.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_37;
  }
  else if ((SHIBYTE(v119.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_37;
  }
  operator delete(v119.__r_.__value_.__l.__data_);
LABEL_37:
  if (cva::Path::exists((cva::Path *)v116))
  {
    cva::Path::string((cva::Path *)v116);
    v32 = operator new();
    *(_OWORD *)(v32 + 8) = 0u;
    *(_OWORD *)(v32 + 40) = 0u;
    *(_OWORD *)(v32 + 24) = 0u;
    *(_QWORD *)v32 = &off_1E8294CC0;
    v33 = (_OWORD *)operator new();
    v33[2] = 0u;
    v33[3] = 0u;
    *v33 = 0u;
    v33[1] = 0u;
    *(_QWORD *)(v32 + 56) = v33;
    if (MEMORY[0x1E0D1FAD8])
    {
      v118 = 0;
      v120.__r_.__value_.__r.__words[0] = (std::string::size_type)&v118;
      v120.__r_.__value_.__l.__size_ = 0;
      precompiled_compute_operation = e5rt_execution_stream_operation_create_precompiled_compute_operation();
      v35 = *(void **)v120.__r_.__value_.__l.__data_;
      *(_QWORD *)v120.__r_.__value_.__l.__data_ = v120.__r_.__value_.__l.__size_;
      if (v35)
      {
        __p[0] = v35;
        v36 = e5rt_execution_stream_operation_release();
        if (v36)
        {
          v102 = v36;
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            LODWORD(v119.__r_.__value_.__l.__data_) = 67109120;
            HIDWORD(v119.__r_.__value_.__r.__words[0]) = v102;
            _os_log_error_impl(&dword_1C9870000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "e5rt::AssertSuccess failed with error code %d.", (uint8_t *)&v119, 8u);
          }
        }
      }
      if (precompiled_compute_operation)
      {
        v37 = 0;
      }
      else
      {
        v117 = v118;
        v118 = 0;
        v37 = sub_1C99041A4((uint64_t)v33, (uint64_t *)&v117);
        if (v117)
        {
          v119.__r_.__value_.__r.__words[0] = v117;
          v57 = e5rt_execution_stream_operation_release();
          if (v57)
          {
            v106 = v57;
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              LODWORD(v120.__r_.__value_.__l.__data_) = 67109120;
              HIDWORD(v120.__r_.__value_.__r.__words[0]) = v106;
              _os_log_error_impl(&dword_1C9870000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "e5rt::AssertSuccess failed with error code %d.", (uint8_t *)&v120, 8u);
            }
          }
        }
      }
      v58 = v118;
      v118 = 0;
      if (v58)
      {
        v119.__r_.__value_.__r.__words[0] = v58;
        v59 = e5rt_execution_stream_operation_release();
        if (v59)
        {
          v103 = v59;
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            LODWORD(v120.__r_.__value_.__l.__data_) = 67109120;
            HIDWORD(v120.__r_.__value_.__r.__words[0]) = v103;
            _os_log_error_impl(&dword_1C9870000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "e5rt::AssertSuccess failed with error code %d.", (uint8_t *)&v120, 8u);
          }
        }
      }
      if (v37)
      {
        v60 = *(_QWORD *)(v32 + 56);
        sub_1C9905490((void ***)(v60 + 16), (void ***)(v32 + 8));
        sub_1C9905490((void ***)(v60 + 40), (void ***)(v32 + 32));
        cva::Path::~Path((cva::Path *)v116);
        goto LABEL_94;
      }
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    goto LABEL_83;
  }
  v38 = strlen((const char *)v24);
  if (v38 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_190;
  v39 = v38;
  if (v38 >= 0x17)
  {
    v41 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v38 | 7) != 0x17)
      v41 = v38 | 7;
    v42 = v41 + 1;
    v40 = operator new(v41 + 1);
    v119.__r_.__value_.__l.__size_ = v39;
    v119.__r_.__value_.__r.__words[2] = v42 | 0x8000000000000000;
    v119.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
    goto LABEL_52;
  }
  *((_BYTE *)&v119.__r_.__value_.__s + 23) = v38;
  v40 = &v119;
  if (v38)
LABEL_52:
    memcpy(v40, v24, v39);
  *((_BYTE *)v40 + v39) = 0;
  v43 = std::string::append(&v119, ".mil", 4uLL);
  v44 = v43->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v120.__r_.__value_.__l.__data_ = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
  v120.__r_.__value_.__r.__words[2] = v44;
  v43->__r_.__value_.__l.__size_ = 0;
  v43->__r_.__value_.__r.__words[2] = 0;
  v43->__r_.__value_.__r.__words[0] = 0;
  cva::Path::Path();
  if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v120.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v119.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_55;
  }
  else if ((SHIBYTE(v119.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_55;
  }
  operator delete(v119.__r_.__value_.__l.__data_);
LABEL_55:
  if (cva::Path::exists((cva::Path *)v115))
    goto LABEL_69;
  cva::Path::~Path((cva::Path *)v115);
  v45 = strlen((const char *)v24);
  if (v45 > 0x7FFFFFFFFFFFFFF7)
LABEL_190:
    abort();
  v46 = v45;
  if (v45 >= 0x17)
  {
    v48 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v45 | 7) != 0x17)
      v48 = v45 | 7;
    v49 = v48 + 1;
    v47 = operator new(v48 + 1);
    v119.__r_.__value_.__l.__size_ = v46;
    v119.__r_.__value_.__r.__words[2] = v49 | 0x8000000000000000;
    v119.__r_.__value_.__r.__words[0] = (std::string::size_type)v47;
    goto LABEL_65;
  }
  *((_BYTE *)&v119.__r_.__value_.__s + 23) = v45;
  v47 = &v119;
  if (v45)
LABEL_65:
    memcpy(v47, v24, v46);
  *((_BYTE *)v47 + v46) = 0;
  v50 = std::string::append(&v119, ".espresso.net", 0xDuLL);
  v51 = v50->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v120.__r_.__value_.__l.__data_ = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
  v120.__r_.__value_.__r.__words[2] = v51;
  v50->__r_.__value_.__l.__size_ = 0;
  v50->__r_.__value_.__r.__words[2] = 0;
  v50->__r_.__value_.__r.__words[0] = 0;
  cva::Path::Path();
  if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v120.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v119.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_68;
  }
  else if ((SHIBYTE(v119.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_68;
  }
  operator delete(v119.__r_.__value_.__l.__data_);
LABEL_68:
  if ((cva::Path::exists((cva::Path *)v115) & 1) == 0)
  {
    cva::Path::~Path((cva::Path *)v115);
LABEL_83:
    cva::Path::~Path((cva::Path *)v116);
    goto LABEL_96;
  }
LABEL_69:
  cva::Path::string((cva::Path *)v115);
  v32 = operator new();
  *(_OWORD *)(v32 + 8) = 0u;
  *(_OWORD *)(v32 + 40) = 0u;
  *(_OWORD *)(v32 + 24) = 0u;
  *(_QWORD *)v32 = &off_1E8294CC0;
  v52 = (_OWORD *)operator new();
  v52[2] = 0u;
  v52[3] = 0u;
  *v52 = 0u;
  v52[1] = 0u;
  *(_QWORD *)(v32 + 56) = v52;
  if (a3 > 4 || !MEMORY[0x1E0D1FAF0])
    goto LABEL_92;
  v118 = 0;
  v120.__r_.__value_.__r.__words[0] = (std::string::size_type)&v118;
  v120.__r_.__value_.__l.__size_ = 0;
  v53 = sub_1C9905B54();
  v54 = *(void **)v120.__r_.__value_.__l.__data_;
  *(_QWORD *)v120.__r_.__value_.__l.__data_ = v120.__r_.__value_.__l.__size_;
  if (v54)
  {
    __p[0] = v54;
    v55 = e5rt_execution_stream_operation_release();
    if (v55)
    {
      v104 = v55;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        LODWORD(v119.__r_.__value_.__l.__data_) = 67109120;
        HIDWORD(v119.__r_.__value_.__r.__words[0]) = v104;
        _os_log_error_impl(&dword_1C9870000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "e5rt::AssertSuccess failed with error code %d.", (uint8_t *)&v119, 8u);
      }
    }
  }
  if (v53)
  {
    v56 = 0;
  }
  else
  {
    v117 = v118;
    v118 = 0;
    v56 = sub_1C99041A4((uint64_t)v52, (uint64_t *)&v117);
    if (v117)
    {
      v119.__r_.__value_.__r.__words[0] = v117;
      v61 = e5rt_execution_stream_operation_release();
      if (v61)
      {
        v107 = v61;
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          LODWORD(v120.__r_.__value_.__l.__data_) = 67109120;
          HIDWORD(v120.__r_.__value_.__r.__words[0]) = v107;
          _os_log_error_impl(&dword_1C9870000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "e5rt::AssertSuccess failed with error code %d.", (uint8_t *)&v120, 8u);
        }
      }
    }
  }
  v62 = v118;
  v118 = 0;
  if (v62)
  {
    v119.__r_.__value_.__r.__words[0] = v62;
    v63 = e5rt_execution_stream_operation_release();
    if (v63)
    {
      v105 = v63;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        LODWORD(v120.__r_.__value_.__l.__data_) = 67109120;
        HIDWORD(v120.__r_.__value_.__r.__words[0]) = v105;
        _os_log_error_impl(&dword_1C9870000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "e5rt::AssertSuccess failed with error code %d.", (uint8_t *)&v120, 8u);
      }
    }
  }
  if (v56)
  {
    v64 = *(_QWORD *)(v32 + 56);
    sub_1C9905490((void ***)(v64 + 16), (void ***)(v32 + 8));
    sub_1C9905490((void ***)(v64 + 40), (void ***)(v32 + 32));
  }
  else
  {
LABEL_92:
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    v32 = 0;
  }
  cva::Path::~Path((cva::Path *)v115);
  cva::Path::~Path((cva::Path *)v116);
  if (!v32)
  {
LABEL_96:
    v65 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
    if ((v65 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
    {
      qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
      __cxa_guard_release(&qword_1ED52ACD0);
    }
    v66 = qword_1ED52ACE0;
    if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_ERROR))
    {
      v98 = &v114;
      if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v98 = (std::string *)v114.__r_.__value_.__r.__words[0];
      v99 = v111;
      if (v112 < 0)
        v99 = (void **)v111[0];
      LODWORD(v120.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)v120.__r_.__value_.__r.__words + 4) = (std::string::size_type)v98;
      WORD2(v120.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v120.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v99;
      _os_log_error_impl(&dword_1C9870000, v66, OS_LOG_TYPE_ERROR, "Failed to create E5RT regressor from %s, configuration %s", (uint8_t *)&v120, 0x16u);
    }
    v67 = SHIBYTE(v114.__r_.__value_.__r.__words[2]);
    if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v114.__r_.__value_.__r.__words[2]);
    else
      size = v114.__r_.__value_.__l.__size_;
    v69 = size + 11;
    if (size + 11 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_187;
    if (v69 >= 0x17)
    {
      v71 = (v69 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v69 | 7) != 0x17)
        v71 = v69 | 7;
      v72 = v71 + 1;
      v70 = operator new(v71 + 1);
      v120.__r_.__value_.__l.__size_ = size + 11;
      v120.__r_.__value_.__r.__words[2] = v72 | 0x8000000000000000;
      v120.__r_.__value_.__r.__words[0] = (std::string::size_type)v70;
    }
    else
    {
      memset(&v120, 0, sizeof(v120));
      v70 = &v120;
      *((_BYTE *)&v120.__r_.__value_.__s + 23) = size + 11;
      if (!size)
        goto LABEL_112;
    }
    if (v67 >= 0)
      v73 = &v114;
    else
      v73 = (std::string *)v114.__r_.__value_.__r.__words[0];
    memmove(v70, v73, size);
LABEL_112:
    strcpy((char *)v70 + size, "_legacy.mil");
    cva::Path::Path();
    v74 = cva::Path::exists((cva::Path *)&v119);
    cva::Path::~Path((cva::Path *)&v119);
    v75 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
    if ((v75 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
    {
      qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
      __cxa_guard_release(&qword_1ED52ACD0);
    }
    v76 = qword_1ED52ACE0;
    if ((v74 & 1) == 0)
    {
      if (!os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_ERROR))
      {
LABEL_148:
        v92 = 0;
LABEL_149:
        *a1 = v92;
        if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v120.__r_.__value_.__l.__data_);
          if (SHIBYTE(v112) < 0)
            goto LABEL_155;
        }
        else if (SHIBYTE(v112) < 0)
        {
          goto LABEL_155;
        }
LABEL_151:
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_156;
        goto LABEL_152;
      }
      v81 = &v120;
      if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v81 = (std::string *)v120.__r_.__value_.__r.__words[0];
      LODWORD(v119.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v119.__r_.__value_.__r.__words + 4) = (std::string::size_type)v81;
      v82 = "Failed to create espresso regressor from %s. Missing resources.";
      v83 = v76;
      v84 = 12;
LABEL_174:
      _os_log_error_impl(&dword_1C9870000, v83, OS_LOG_TYPE_ERROR, v82, (uint8_t *)&v119, v84);
      goto LABEL_148;
    }
    if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_DEBUG))
    {
      v100 = &v120;
      if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v100 = (std::string *)v120.__r_.__value_.__r.__words[0];
      LODWORD(v119.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)v119.__r_.__value_.__r.__words + 4) = (std::string::size_type)v100;
      WORD2(v119.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v119.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)a5;
      _os_log_debug_impl(&dword_1C9870000, v76, OS_LOG_TYPE_DEBUG, "Creating fallback espresso regressor from %s, configuration %s", (uint8_t *)&v119, 0x16u);
    }
    if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v77 = &v120;
    else
      v77 = (std::string *)v120.__r_.__value_.__r.__words[0];
    v78 = strlen((const char *)v77);
    if (v78 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_187;
    v79 = v78;
    if (v78 >= 0x17)
    {
      v85 = (v78 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v78 | 7) != 0x17)
        v85 = v78 | 7;
      v86 = v85 + 1;
      v80 = operator new(v85 + 1);
      v119.__r_.__value_.__l.__size_ = v79;
      v119.__r_.__value_.__r.__words[2] = v86 | 0x8000000000000000;
      v119.__r_.__value_.__r.__words[0] = (std::string::size_type)v80;
    }
    else
    {
      *((_BYTE *)&v119.__r_.__value_.__s + 23) = v78;
      v80 = &v119;
      if (!v78)
      {
LABEL_130:
        v80[v79] = 0;
        v87 = strlen(a5);
        if (v87 <= 0x7FFFFFFFFFFFFFF7)
        {
          v88 = (void *)v87;
          if (v87 >= 0x17)
          {
            v90 = (v87 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v87 | 7) != 0x17)
              v90 = v87 | 7;
            v91 = v90 + 1;
            v89 = operator new(v90 + 1);
            __p[1] = v88;
            v110 = v91 | 0x8000000000000000;
            __p[0] = v89;
          }
          else
          {
            HIBYTE(v110) = v87;
            v89 = __p;
            if (!v87)
            {
LABEL_138:
              *((_BYTE *)v88 + (_QWORD)v89) = 0;
              v92 = operator new();
              *(_OWORD *)(v92 + 8) = 0u;
              *(_OWORD *)(v92 + 24) = 0u;
              *(_OWORD *)(v92 + 40) = 0u;
              *(_QWORD *)v92 = &off_1E8294CE8;
              v93 = operator new();
              *(_QWORD *)v93 = 0;
              *(_OWORD *)(v93 + 24) = 0u;
              *(_OWORD *)(v93 + 40) = 0u;
              *(_OWORD *)(v93 + 56) = 0u;
              *(_OWORD *)(v93 + 72) = 0u;
              *(_QWORD *)(v93 + 88) = 0;
              *(_DWORD *)(v93 + 96) = 1065353216;
              *(_QWORD *)(v92 + 56) = v93;
              if (sub_1C98FF14C(v92, &v119, a3, (uint64_t)__p))
              {
                if ((SHIBYTE(v110) & 0x80000000) == 0)
                  goto LABEL_140;
              }
              else
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v92 + 8))(v92);
                v92 = 0;
                if ((SHIBYTE(v110) & 0x80000000) == 0)
                {
LABEL_140:
                  if ((SHIBYTE(v119.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_141;
                  goto LABEL_145;
                }
              }
              operator delete(__p[0]);
              if ((SHIBYTE(v119.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_141:
                if (v92)
                  goto LABEL_149;
LABEL_146:
                v94 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
                if ((v94 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
                {
                  qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
                  __cxa_guard_release(&qword_1ED52ACD0);
                }
                v95 = qword_1ED52ACE0;
                if (!os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_ERROR))
                  goto LABEL_148;
                v101 = &v120;
                if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v101 = (std::string *)v120.__r_.__value_.__r.__words[0];
                LODWORD(v119.__r_.__value_.__l.__data_) = 136315394;
                *(std::string::size_type *)((char *)v119.__r_.__value_.__r.__words + 4) = (std::string::size_type)v101;
                WORD2(v119.__r_.__value_.__r.__words[1]) = 2080;
                *(std::string::size_type *)((char *)&v119.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)a5;
                v82 = "Failed to create espresso regressor from %s, configuration %s";
                v83 = v95;
                v84 = 22;
                goto LABEL_174;
              }
LABEL_145:
              operator delete(v119.__r_.__value_.__l.__data_);
              if (v92)
                goto LABEL_149;
              goto LABEL_146;
            }
          }
          memcpy(v89, a5, (size_t)v88);
          goto LABEL_138;
        }
LABEL_187:
        abort();
      }
    }
    memmove(v80, v77, v79);
    goto LABEL_130;
  }
LABEL_94:
  *v108 = v32;
  if ((SHIBYTE(v112) & 0x80000000) == 0)
    goto LABEL_151;
LABEL_155:
  operator delete(v111[0]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_156:
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_157;
    return;
  }
LABEL_152:
  if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
LABEL_157:
    operator delete(v114.__r_.__value_.__l.__data_);
}

void sub_1C98CE938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,int a24,__int16 a25,char a26,char a27,int a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;

  sub_1C99046A0(&a29);
  sub_1C99046A0(&a30);
  (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  cva::Path::~Path((cva::Path *)&a23);
  cva::Path::~Path((cva::Path *)&a25);
  _Unwind_Resume(a1);
}

void sub_1C98CEA84(uint64_t a1, uint64_t a2, int a3, unsigned int a4, int a5, unsigned int a6, uint64_t a7, unsigned int a8, double a9, float a10, uint64_t a11)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  float v20;
  double v21;
  double v22;
  int v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  uint64_t v31;
  int v32;
  double v33;
  uint64_t v34;
  float *v35;
  double *v36;
  double v37;
  double v38;
  double v39;
  long double v40;
  uint64_t v41;
  uint64_t v42;

  if (a1 && a2 && a7 && a11)
  {
    v12 = 0;
    LODWORD(v13) = 0;
    v14 = (a3 - 1);
    v15 = (a9 + a9) * a9;
    v16 = (a10 + a10) * a10;
    v41 = a6;
    v42 = a8;
    v17 = a1 + 16;
    v18 = 4 * a4;
    do
    {
      v21 = *(double *)(a7 + 8 * v12);
      if ((int)v13 < (int)v14 && *(double *)(a1 + 8 * (int)v13 + 8) <= v21)
      {
        v13 = (int)v13;
        while (v14 - 1 != v13)
        {
          v22 = *(double *)(v17 + 8 * v13++);
          if (v22 > v21)
            goto LABEL_16;
        }
        LODWORD(v13) = v14;
      }
LABEL_16:
      if ((int)v14 >= (int)v13 + 1)
        v23 = v13 + 1;
      else
        v23 = v14;
      v24 = 0.0;
      v25 = fmax(v21 - *(double *)(a1 + 8 * (int)v13), 0.0);
      v26 = fmax(*(double *)(a1 + 8 * v23) - v21, 0.0);
      v27 = v25 + v26;
      v28 = 1.0;
      v29 = 0.0;
      if (v25 + v26 >= 0.000000001)
      {
        v29 = v25 / v27;
        v28 = v26 / v27;
      }
      v30 = v29 * *(float *)(a2 + 4 * (int)(v23 * a4)) + v28 * *(float *)(a2 + 4 * (int)(v13 * a4));
      v31 = ((_DWORD)v13 - a5) & ~(((int)v13 - a5) >> 31);
      v32 = v13 + a5;
      if ((int)v14 < (int)v13 + a5)
        v32 = v14;
      v33 = 0.0;
      if ((int)v31 <= v32)
      {
        v34 = (v32 + 1) - v31;
        v35 = (float *)(a2 + v18 * v31);
        v36 = (double *)(a1 + 8 * v31);
        do
        {
          v37 = *v36++;
          v38 = *v35 - v30;
          v39 = exp(-((v37 - v21) * (v37 - v21)) / v15);
          v40 = v39 * exp(-(v38 * v38) / v16);
          v24 = v24 + v40 * v38;
          v33 = v33 + v40;
          v35 = (float *)((char *)v35 + v18);
          --v34;
        }
        while (v34);
      }
      v19 = v24 / v33;
      if (v33 <= 1.0e-10)
        v19 = 0.0;
      v20 = v30 + v19;
      *(float *)(a11 + 4 * v12 * v42) = v20;
      ++v12;
    }
    while (v12 != v41);
  }
}

void sub_1C98CECDC(uint64_t a1, uint64_t a2, int a3, int a4, unsigned int a5, uint64_t a6, uint64_t a7, double a8, float a9, float a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  double v16;
  double v17;
  int v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  _OWORD *v26;
  __int128 v27;
  __int128 v28;
  _OWORD *v29;
  __int128 v30;
  __int128 v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float cosval;
  float v39;
  __float2 v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  __int128 v50;
  float32x2_t v51;
  float v52;
  uint64_t v53;
  int v54;
  float32x2_t v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float32x2_t v60;
  uint64_t v61;
  double *v62;
  float32x2_t *v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  double v69;
  float v70;
  __int128 v71;
  float32x2_t v72;
  __int32 v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float32x2_t v83;
  float32x2_t v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float32x2_t v90;
  _OWORD *v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  __float2 v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  int *v112;
  int v113;
  uint64_t i;
  int v115;
  int v116;
  int *v117;
  uint64_t j;
  int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v123;
  float v128;
  float v129;
  float v130;
  double v131;
  float32x2_t v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  __int128 v140;
  float v141;
  float v142;
  float32x2_t v143;
  float32x2_t v144;
  uint64_t v145;
  float v146;
  float *v147;
  float **v148;
  _OWORD v149[2];
  int v150;
  _OWORD v151[3];
  __int128 v152;
  _OWORD v153[3];
  __int128 v154;
  float **v155;
  _QWORD v156[2];
  _OWORD v157[2];
  float v158;
  uint64_t v159;
  float v160;
  __int128 v161;
  __int128 v162;
  float v163;
  float *v164[3];

  if (a1)
  {
    if (a2)
    {
      if (a6)
      {
        v10 = a7;
        if (a7)
        {
          v11 = 0;
          LODWORD(v12) = 0;
          v13 = (a3 - 1);
          v14 = a8;
          v15 = (float)(v14 + v14) * v14;
          v123 = a5;
          v129 = (float)(a10 + a10) * a10;
          v120 = a1 + 16;
          v121 = a2 + 32;
          v130 = v15;
          v128 = (float)(a9 + a9) * a9;
          do
          {
            v16 = *(double *)(a6 + 8 * v11);
            if ((int)v12 < (int)v13 && *(double *)(a1 + 8 * (int)v12 + 8) <= v16)
            {
              v12 = (int)v12;
              while (v13 - 1 != v12)
              {
                v17 = *(double *)(v120 + 8 * v12++);
                if (v17 > v16)
                  goto LABEL_13;
              }
              LODWORD(v12) = v13;
            }
LABEL_13:
            if ((int)v13 >= (int)v12 + 1)
              v18 = v12 + 1;
            else
              v18 = v13;
            v19 = v16 - *(double *)(a1 + 8 * (int)v12);
            v20 = 0.0;
            v21 = fmaxf(v19, 0.0);
            v22 = *(double *)(a1 + 8 * v18) - v16;
            v23 = fmaxf(v22, 0.0);
            v24 = v21 + v23;
            v25 = 1.0;
            if ((float)(v21 + v23) >= 0.000000001)
            {
              v20 = v21 / v24;
              v25 = v23 / v24;
            }
            v139 = v25;
            v142 = v20;
            v26 = (_OWORD *)(a2 + ((uint64_t)(int)v12 << 6));
            v27 = v26[1];
            v153[0] = *v26;
            v153[1] = v27;
            v28 = v26[3];
            v153[2] = v26[2];
            v154 = v28;
            v29 = (_OWORD *)(a2 + ((uint64_t)v18 << 6));
            v30 = v29[1];
            v151[0] = *v29;
            v151[1] = v30;
            v31 = v29[3];
            v151[2] = v29[2];
            v152 = v31;
            *(_QWORD *)&v161 = 0x300000003;
            *((_QWORD *)&v161 + 1) = v153;
            *(_QWORD *)&v162 = 4;
            sub_1C98CF4CC((uint64_t)&v147, (uint64_t)&v161);
            *(_QWORD *)&v161 = 0x300000003;
            *((_QWORD *)&v161 + 1) = v151;
            *(_QWORD *)&v162 = 4;
            sub_1C98CF4CC((uint64_t)&v145, (uint64_t)&v161);
            v155 = &v147;
            v156[0] = &v145;
            v156[1] = &v155;
            memset(v157, 0, sizeof(v157));
            v158 = 0.0;
            sub_1C98CF684((uint64_t)v157, (uint64_t)v156);
            v160 = 0.0;
            v159 = 0;
            sub_1C98CF850((float32x2_t *)v157, (float *)&v159);
            v32 = v142 * *(float *)&v159;
            v33 = v142 * *((float *)&v159 + 1);
            v34 = v142 * v160;
            v35 = (float)((float)(v32 * v32) + (float)(v33 * v33)) + (float)(v34 * v34);
            if (v35 >= 0.0061)
            {
              v39 = sqrtf(v35);
              v40 = __sincosf_stret(v39);
              cosval = v40.__cosval;
              v37 = v40.__sinval / v39;
              v36 = (float)(1.0 / v35) * (float)(1.0 - v40.__cosval);
            }
            else
            {
              v36 = 0.5 - (float)(v35 * (float)((float)(v35 / -720.0) + 0.041667));
              v37 = 1.0 - (float)(v35 * (float)(0.16667 - (float)(v35 * (float)((float)(v35 / -5040.0) + 0.0083333))));
              cosval = 1.0 - (float)(v35 * v36);
            }
            v41 = v33 * v36;
            v42 = cosval + (float)((float)(v32 * v36) * v32);
            v43 = cosval + (float)((float)(v33 * v36) * v33);
            v163 = cosval + (float)((float)(v34 * v36) * v34);
            v44 = v33 * (float)(v32 * v36);
            v45 = v34 * (float)(v32 * v36);
            v46 = v34 * v41;
            v47 = v32 * v37;
            v48 = v34 * v37;
            *(float *)&v161 = v42;
            *((float *)&v161 + 1) = v44 + (float)(v34 * v37);
            v49 = v33 * v37;
            *((float *)&v162 + 2) = v49 + v45;
            *((float *)&v162 + 3) = v46 - v47;
            *((float *)&v161 + 2) = v45 - v49;
            *((float *)&v161 + 3) = v44 - v48;
            *(float *)&v162 = v43;
            *((float *)&v162 + 1) = v47 + v46;
            v164[0] = (float *)&v161;
            v164[1] = (float *)&v147;
            memset(v149, 0, sizeof(v149));
            v150 = 0;
            sub_1C98A24C0((uint64_t)v149, v164);
            *(float32x2_t *)&v50 = vmul_n_f32(*(float32x2_t *)&v152, v142);
            v51 = vadd_f32(vmul_n_f32(*(float32x2_t *)&v154, v139), *(float32x2_t *)&v50);
            v52 = (float)(v139 * *((float *)&v154 + 2)) + (float)(v142 * *((float *)&v152 + 2));
            v53 = ((_DWORD)v12 - a4) & ~(((int)v12 - a4) >> 31);
            v54 = v12 + a4;
            if ((int)v13 < (int)v12 + a4)
              v54 = v13;
            if ((int)v53 <= v54)
            {
              v60 = 0;
              v61 = (v54 + 1) - v53;
              v62 = (double *)(a1 + 8 * v53);
              v63 = (float32x2_t *)(v121 + (v53 << 6));
              LODWORD(v50) = 0;
              v64 = 0.0;
              v65 = 0.0;
              v66 = 0.0;
              v67 = 0.0;
              v68 = 0.0;
              v131 = v16;
              do
              {
                v134 = v67;
                v135 = v66;
                v136 = v65;
                v137 = v64;
                v138 = v68;
                v140 = v50;
                v143 = v60;
                v69 = *v62++;
                v70 = v69 - v16;
                *(float32x2_t *)&v71 = *(float32x2_t *)((char *)v63 - 28);
                v72 = v63[-2];
                v73 = v63[-1].i32[0];
                v74 = v63[1].f32[0];
                v75 = v63[3].f32[0];
                LODWORD(v157[0]) = v63[-4].i32[0];
                *((float32x2_t *)&v71 + 1) = v72;
                DWORD1(v157[1]) = v73;
                *((float32x2_t *)&v157[1] + 1) = *v63;
                v164[0] = (float *)v149;
                v147 = (float *)v157;
                v148 = v164;
                v158 = v74;
                v161 = 0u;
                v162 = 0u;
                v163 = 0.0;
                *(_OWORD *)((char *)v157 + 4) = v71;
                v76 = expf((float)-(float)(v70 * v70) / v15);
                v133 = v75 - v52;
                v132 = v63[2];
                sub_1C98CF684((uint64_t)&v161, (uint64_t)&v147);
                v146 = 0.0;
                v145 = 0;
                sub_1C98CF850((float32x2_t *)&v161, (float *)&v145);
                v78 = *((float *)&v145 + 1);
                v77 = *(float *)&v145;
                v79 = v146;
                v80 = sqrtf((float)((float)(*(float *)&v145 * *(float *)&v145)+ (float)(*((float *)&v145 + 1) * *((float *)&v145 + 1)))+ (float)(v79 * v79));
                v81 = v76 * expf((float)-(float)(v80 * v80) / v128);
                v82 = v52;
                v83 = v51;
                v84 = vsub_f32(v132, v51);
                v85 = sqrtf(vaddv_f32(vmul_f32(v84, v84)) + (float)(v133 * v133));
                v86 = expf((float)-(float)(v85 * v85) / v129);
                v50 = v140;
                v87 = v76 * v86;
                v65 = v136 + (float)(v77 * v81);
                v88 = v78 * v81;
                v15 = v130;
                v66 = v135 + v88;
                v89 = v79 * v81;
                v16 = v131;
                v67 = v134 + v89;
                v64 = v137 + v81;
                v90 = vmul_n_f32(v84, v87);
                v51 = v83;
                v52 = v82;
                v60 = vadd_f32(v143, v90);
                v68 = v138 + (float)(v133 * v87);
                *(float *)&v50 = *(float *)&v140 + v87;
                v63 += 8;
                --v61;
              }
              while (v61);
              v59 = 0.0;
              v58 = 0.0;
              v57 = 0.0;
              v56 = 0.0;
              if (v64 > 1.0e-10)
              {
                v56 = v65 / v64;
                v57 = v66 / v64;
                v58 = v67 / v64;
              }
              v55 = 0;
              v10 = a7;
              if (*(float *)&v50 > 1.0e-10)
              {
                v55 = vdiv_f32(v60, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v50, 0));
                v59 = v68 / *(float *)&v50;
              }
            }
            else
            {
              v55 = 0;
              v56 = 0.0;
              v57 = 0.0;
              v58 = 0.0;
              v59 = 0.0;
            }
            v91 = (_OWORD *)(v10 + (v11 << 6));
            v92 = *MEMORY[0x1E0C83FF0];
            v93 = *(_OWORD *)(MEMORY[0x1E0C83FF0] + 16);
            v94 = *(_OWORD *)(MEMORY[0x1E0C83FF0] + 48);
            v91[2] = *(_OWORD *)(MEMORY[0x1E0C83FF0] + 32);
            v91[3] = v94;
            *v91 = v92;
            v91[1] = v93;
            v95 = (float)(v58 * v58) + (float)((float)(v57 * v57) + (float)(v56 * v56));
            if (v95 >= 0.0061)
            {
              v144 = v55;
              v141 = v59;
              v99 = sqrtf(v95);
              v100 = v57;
              v101 = v56;
              v102 = __sincosf_stret(v99);
              v98 = v102.__cosval;
              v56 = v101;
              v57 = v100;
              v97 = v102.__sinval / v99;
              v59 = v141;
              v55 = v144;
              v96 = (float)(1.0 / v95) * (float)(1.0 - v102.__cosval);
            }
            else
            {
              v96 = 0.5 - (float)(v95 * (float)((float)(v95 / -720.0) + 0.041667));
              v97 = 1.0 - (float)(v95 * (float)(0.16667 - (float)(v95 * (float)((float)(v95 / -5040.0) + 0.0083333))));
              v98 = 1.0 - (float)(v95 * v96);
            }
            v103 = v57 * v96;
            v104 = v98 + (float)((float)(v56 * v96) * v56);
            v105 = v98 + (float)((float)(v57 * v96) * v57);
            v158 = v98 + (float)((float)(v58 * v96) * v58);
            v106 = v57 * (float)(v56 * v96);
            v107 = v58 * (float)(v56 * v96);
            v108 = v58 * v103;
            v109 = v56 * v97;
            v110 = v58 * v97;
            *(float *)v157 = v104;
            *((float *)v157 + 1) = v106 + (float)(v58 * v97);
            v111 = v57 * v97;
            *((float *)&v157[1] + 2) = v111 + v107;
            *((float *)&v157[1] + 3) = v108 - v109;
            *((float *)v157 + 3) = v106 - v110;
            *((float *)v157 + 2) = v107 - v111;
            *(float *)&v157[1] = v105;
            *((float *)&v157[1] + 1) = v109 + v108;
            v147 = (float *)v157;
            v148 = (float **)v149;
            v161 = 0u;
            v162 = 0u;
            v163 = 0.0;
            v112 = (int *)&v161;
            sub_1C98A24C0((uint64_t)&v161, &v147);
            v113 = 0;
            for (i = 0; i != 12; ++i)
            {
              v115 = *v112++;
              *((_DWORD *)v91 + i) = v115;
              if (v113 > 1)
                ++i;
              if (v113 <= 1)
                ++v113;
              else
                v113 = 0;
            }
            v116 = 0;
            *(float32x2_t *)&v161 = vadd_f32(v51, v55);
            *((float *)&v161 + 2) = v52 + v59;
            v117 = (int *)&v161;
            for (j = 12; j != 16; ++j)
            {
              v119 = *v117++;
              *((_DWORD *)v91 + j) = v119;
              if (v116 > 1)
                ++j;
              if (v116 <= 1)
                ++v116;
              else
                v116 = 0;
            }
            ++v11;
          }
          while (v11 != v123);
        }
      }
    }
  }
}

uint64_t sub_1C98CF4CC(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  int *v4;
  unsigned int v5;
  int v6;
  int v7;
  int *v8;
  _DWORD *v9;
  int v10;
  int v11;
  unsigned int v12;
  _DWORD *v13;
  _DWORD *v14;
  int v15;
  int v16;
  unsigned int v17;
  _DWORD *v18;
  _DWORD *v19;
  int v20;
  int v21;
  unsigned int v22;
  _DWORD *v23;
  _DWORD *v24;
  int v25;
  int v26;
  unsigned int v27;
  _DWORD *v28;
  uint64_t v29;
  int v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  unsigned int v42;
  int v43;
  int *v44;
  _DWORD *v45;
  int v46;
  int v47;
  int v48;
  unsigned int v49;
  _DWORD *v50;
  _DWORD *v51;
  int v52;
  int v53;
  int v54;
  unsigned int v55;
  _DWORD *v56;
  _DWORD *v57;
  int v58;
  int v59;
  int v60;
  unsigned int v61;
  _DWORD *v62;
  _DWORD *v63;
  int v64;
  int v65;
  int v66;
  unsigned int v67;
  _DWORD *v68;
  uint64_t v69;
  int v70;
  int v71;
  int v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  int v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  int v84;
  unsigned int v85;
  int v86;

  *(_DWORD *)(result + 32) = 0;
  *(_OWORD *)result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  v3 = *(_DWORD *)a2;
  if (*(_DWORD *)(a2 + 4) * *(_DWORD *)a2)
    v4 = *(int **)(a2 + 8);
  else
    v4 = 0;
  v2 = *(_DWORD *)(a2 + 16);
  v5 = v2 - v3;
  v6 = *v4;
  if (*(_QWORD *)(a2 + 8) - 4 * *(unsigned int *)(a2 + 20) == result)
  {
    if (v3 <= 1)
      v43 = v2 - v3;
    else
      v43 = 0;
    v44 = &v4[v43];
    v46 = v44[1];
    v45 = v44 + 1;
    v47 = v46;
    if (v3 <= 1)
      v48 = 1;
    else
      v48 = 2;
    if (v48 >= v3)
      v49 = v5;
    else
      v49 = 0;
    v50 = &v45[v49];
    v52 = v50[1];
    v51 = v50 + 1;
    v53 = v52;
    if (v48 < v3)
      v54 = v48 + 1;
    else
      v54 = 1;
    if (v54 >= v3)
      v55 = v5;
    else
      v55 = 0;
    v56 = &v51[v55];
    v58 = v56[1];
    v57 = v56 + 1;
    v59 = v58;
    if (v54 < v3)
      v60 = v54 + 1;
    else
      v60 = 1;
    if (v60 >= v3)
      v61 = v5;
    else
      v61 = 0;
    v62 = &v57[v61];
    v64 = v62[1];
    v63 = v62 + 1;
    v65 = v64;
    if (v60 < v3)
      v66 = v60 + 1;
    else
      v66 = 1;
    if (v66 >= v3)
      v67 = v5;
    else
      v67 = 0;
    v68 = (uint64_t)&v63[v67];
    v70 = *(_DWORD *)(v68 + 4);
    v69 = v68 + 4;
    v71 = v70;
    if (v66 < v3)
      v72 = v66 + 1;
    else
      v72 = 1;
    if (v72 >= v3)
      v73 = v5;
    else
      v73 = 0;
    v74 = v69 + 4 * v73;
    v76 = *(_DWORD *)(v74 + 4);
    v75 = v74 + 4;
    v77 = v76;
    if (v72 < v3)
      v78 = v72 + 1;
    else
      v78 = 1;
    if (v78 >= v3)
      v79 = v5;
    else
      v79 = 0;
    v80 = v75 + 4 * v79;
    v82 = *(_DWORD *)(v80 + 4);
    v81 = v80 + 4;
    v83 = v82;
    if (v78 < v3)
      v84 = v78 + 1;
    else
      v84 = 1;
    if (v84 >= v3)
      v85 = v5;
    else
      v85 = 0;
    v86 = *(_DWORD *)(v81 + 4 * v85 + 4);
    *(_DWORD *)result = v6;
    *(_DWORD *)(result + 4) = v47;
    *(_DWORD *)(result + 8) = v53;
    *(_DWORD *)(result + 12) = v59;
    *(_DWORD *)(result + 16) = v65;
    *(_DWORD *)(result + 20) = v71;
    *(_DWORD *)(result + 24) = v77;
    *(_DWORD *)(result + 28) = v83;
    *(_DWORD *)(result + 32) = v86;
  }
  else
  {
    *(_DWORD *)result = v6;
    if (v3 <= 1)
      v7 = v2 - v3;
    else
      v7 = 0;
    v8 = &v4[v7];
    v10 = v8[1];
    v9 = v8 + 1;
    *(_DWORD *)(result + 4) = v10;
    if (v3 <= 1)
      v11 = 1;
    else
      v11 = 2;
    if (v11 >= v3)
      v12 = v5;
    else
      v12 = 0;
    v13 = &v9[v12];
    v15 = v13[1];
    v14 = v13 + 1;
    *(_DWORD *)(result + 8) = v15;
    if (v11 < v3)
      v16 = v11 + 1;
    else
      v16 = 1;
    if (v16 >= v3)
      v17 = v5;
    else
      v17 = 0;
    v18 = &v14[v17];
    v20 = v18[1];
    v19 = v18 + 1;
    *(_DWORD *)(result + 12) = v20;
    if (v16 < v3)
      v21 = v16 + 1;
    else
      v21 = 1;
    if (v21 >= v3)
      v22 = v5;
    else
      v22 = 0;
    v23 = &v19[v22];
    v25 = v23[1];
    v24 = v23 + 1;
    *(_DWORD *)(result + 16) = v25;
    if (v21 < v3)
      v26 = v21 + 1;
    else
      v26 = 1;
    if (v26 >= v3)
      v27 = v5;
    else
      v27 = 0;
    v28 = (uint64_t)&v24[v27];
    v30 = *(_DWORD *)(v28 + 4);
    v29 = v28 + 4;
    *(_DWORD *)(result + 20) = v30;
    if (v26 < v3)
      v31 = v26 + 1;
    else
      v31 = 1;
    if (v31 >= v3)
      v32 = v5;
    else
      v32 = 0;
    v33 = v29 + 4 * v32;
    v35 = *(_DWORD *)(v33 + 4);
    v34 = v33 + 4;
    *(_DWORD *)(result + 24) = v35;
    if (v31 < v3)
      v36 = v31 + 1;
    else
      v36 = 1;
    if (v36 >= v3)
      v37 = v5;
    else
      v37 = 0;
    v38 = v34 + 4 * v37;
    v40 = *(_DWORD *)(v38 + 4);
    v39 = v38 + 4;
    *(_DWORD *)(result + 28) = v40;
    if (v36 < v3)
      v41 = v36 + 1;
    else
      v41 = 1;
    if (v41 >= v3)
      v42 = v5;
    else
      v42 = 0;
    *(_DWORD *)(result + 32) = *(_DWORD *)(v39 + 4 * v42 + 4);
  }
  return result;
}

double sub_1C98CF684(uint64_t a1, uint64_t a2)
{
  float *v3;
  float *v4;
  double result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  int v9;

  v3 = *(float **)a2;
  if (*(_QWORD *)a2 == a1)
  {
    v9 = 0;
    v7 = 0u;
    v8 = 0u;
    sub_1C98CF684(&v7);
    result = *(double *)&v7;
    v6 = v8;
    *(_OWORD *)a1 = v7;
    *(_OWORD *)(a1 + 16) = v6;
    *(_DWORD *)(a1 + 32) = v9;
  }
  else
  {
    v4 = **(float ***)(a2 + 8);
    *(float *)a1 = (float)((float)((float)(*v3 * *v4) + 0.0) + (float)(v3[3] * v4[3])) + (float)(v3[6] * v4[6]);
    *(float *)(a1 + 4) = (float)((float)((float)(v3[1] * *v4) + 0.0) + (float)(v3[4] * v4[3])) + (float)(v3[7] * v4[6]);
    *(float *)(a1 + 8) = (float)((float)((float)(v3[2] * *v4) + 0.0) + (float)(v3[5] * v4[3])) + (float)(v3[8] * v4[6]);
    *(float *)(a1 + 12) = (float)((float)((float)(*v3 * v4[1]) + 0.0) + (float)(v3[3] * v4[4])) + (float)(v3[6] * v4[7]);
    *(float *)(a1 + 16) = (float)((float)((float)(v3[1] * v4[1]) + 0.0) + (float)(v3[4] * v4[4]))
                        + (float)(v3[7] * v4[7]);
    *(float *)(a1 + 20) = (float)((float)((float)(v3[2] * v4[1]) + 0.0) + (float)(v3[5] * v4[4]))
                        + (float)(v3[8] * v4[7]);
    *(float *)(a1 + 24) = (float)((float)((float)(*v3 * v4[2]) + 0.0) + (float)(v3[3] * v4[5])) + (float)(v3[6] * v4[8]);
    *(float *)(a1 + 28) = (float)((float)((float)(v3[1] * v4[2]) + 0.0) + (float)(v3[4] * v4[5]))
                        + (float)(v3[7] * v4[8]);
    *(float *)&result = (float)((float)((float)(v3[2] * v4[2]) + 0.0) + (float)(v3[5] * v4[5])) + (float)(v3[8] * v4[8]);
    *(_DWORD *)(a1 + 32) = LODWORD(result);
  }
  return result;
}

void sub_1C98CF850(float32x2_t *a1, float *a2)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  _BOOL4 v14;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float32x2_t v34;

  v4 = (float)(a1[2].f32[1] - a1[3].f32[1]) * 0.5;
  *a2 = v4;
  v5 = (float)(a1[3].f32[0] - a1[1].f32[0]) * 0.5;
  a2[1] = v5;
  v6 = (float)(a1->f32[1] - a1[1].f32[1]) * 0.5;
  a2[2] = v6;
  v7 = a1->f32[0];
  v8 = a1[2].f32[0];
  v9 = a1[4].f32[0];
  v10 = -1.0;
  v11 = (float)((float)((float)(a1->f32[0] + v8) + v9) + -1.0) * 0.5;
  v12 = (float)((float)(v5 * v5) + (float)(v4 * v4)) + (float)(v6 * v6);
  if (v11 >= -1.0 || (float)(v11 + 1.0) <= -0.00001)
  {
    v14 = v11 > 1.0;
    if ((float)(v11 + -1.0) >= 0.00001)
      v14 = 0;
    if (v11 <= 0.99 && !v14)
    {
      if (v11 <= -0.99)
      {
        v10 = (float)((float)((float)(a1->f32[0] + v8) + v9) + -1.0) * 0.5;
        goto LABEL_17;
      }
      v16 = acosf(v11) / sqrtf(v12);
      *a2 = v4 * v16;
      a2[1] = v5 * v16;
    }
    else
    {
      v16 = (float)(v12 * (float)((float)(v12 * (float)((float)((float)(v12 * 5.0) / 112.0) + 0.075)) + 0.16667)) + 1.0;
      *a2 = v4 * v16;
      a2[1] = v5 * v16;
    }
    a2[2] = v6 * v16;
    return;
  }
LABEL_17:
  v17 = asinf(sqrtf(v12));
  v18 = (float)((float)(3.1416 - v17) * (float)(3.1416 - v17)) / (float)(1.0 - v10);
  v19 = (float)(v7 - v10) * v18;
  v20 = (float)(v8 - v10) * v18;
  v21 = (float)(v9 - v10) * v18;
  if (v19 <= v20)
  {
    v26 = v18 * 0.5;
    if (v20 <= v21)
    {
      v33 = sqrtf(v21);
      if (v6 < 0.0)
        v33 = -v33;
      a2[2] = v33;
      v34.i32[0] = a1[1].i32[0];
      v34.i32[1] = a1[2].i32[1];
      *(float32x2_t *)a2 = vmul_n_f32(vmul_n_f32(vadd_f32(a1[3], v34), v26), 1.0 / v33);
    }
    else
    {
      v27 = sqrtf(v20);
      if (v5 < 0.0)
        v27 = -v27;
      a2[1] = v27;
      v28 = 1.0 / v27;
      v29 = a1[3].f32[1] + a1[2].f32[1];
      *a2 = v28 * (float)(v26 * (float)(a1[1].f32[1] + a1->f32[1]));
      a2[2] = v28 * (float)(v26 * v29);
    }
  }
  else
  {
    v22 = v18 * 0.5;
    v23 = v22 * (float)(a1[3].f32[0] + a1[1].f32[0]);
    if (v19 <= v21)
    {
      v30 = sqrtf(v21);
      if (v6 < 0.0)
        v30 = -v30;
      a2[2] = v30;
      v31 = 1.0 / v30;
      v32 = v31 * (float)(v22 * (float)(a1[3].f32[1] + a1[2].f32[1]));
      *a2 = v31 * v23;
      a2[1] = v32;
    }
    else
    {
      v24 = sqrtf(v19);
      if (v4 < 0.0)
        v24 = -v24;
      *a2 = v24;
      v25 = 1.0 / v24;
      a2[1] = v25 * (float)(v22 * (float)(a1[1].f32[1] + a1->f32[1]));
      a2[2] = v25 * v23;
    }
  }
}

uint64_t sub_1C98CFB60()
{
  int v0;
  CVPixelBufferRef v1;

  std::__libcpp_verbose_abort("bad_variant_access was thrown in -fno-exceptions mode");
  return sub_1C98CFB74(v0, v1);
}

void sub_1C98CFB74(uint64_t a1, CVPixelBufferRef texture, uint64_t a3, uint64_t *a4)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a3 + 8);
  if (a1 + 8 != a3)
  {
    v7 = *(_OWORD *)(a3 + 16);
    v8 = *(_OWORD *)(a3 + 32);
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(a3 + 48);
    *(_OWORD *)(a1 + 40) = v8;
    *(_OWORD *)(a1 + 24) = v7;
    v9 = *(_OWORD *)(a3 + 52);
    v10 = *(_OWORD *)(a3 + 68);
    *(_DWORD *)(a1 + 92) = *(_DWORD *)(a3 + 84);
    *(_OWORD *)(a1 + 76) = v10;
    *(_OWORD *)(a1 + 60) = v9;
    v11 = *(_QWORD *)(a3 + 88);
    *(_DWORD *)(a1 + 104) = *(_DWORD *)(a3 + 96);
    *(_QWORD *)(a1 + 96) = v11;
  }
  CVPixelBufferRetain(texture);
  if (*(_QWORD *)a1)
    CVPixelBufferRelease(*(CVPixelBufferRef *)a1);
  *(_QWORD *)a1 = texture;
  v12 = (_QWORD *)(a1 + 112);
  if (*(_DWORD *)(a1 + 124) == 2)
  {
    v13 = *a4;
    *(_DWORD *)(a1 + 120) = *((_DWORD *)a4 + 2);
    *v12 = v13;
  }
  else
  {
    *(_DWORD *)(a1 + 124) = -1;
    v14 = *a4;
    *(_DWORD *)(a1 + 120) = *((_DWORD *)a4 + 2);
    *v12 = v14;
    *(_DWORD *)(a1 + 124) = 2;
  }
}

__CFDictionary *sub_1C98CFC4C(int a1)
{
  const __CFAllocator *v2;
  __CFDictionary *Mutable;
  __CFDictionary *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  CFNumberRef v8;
  CFNumberRef v9;
  unsigned __int8 v10;
  NSObject *v11;
  unsigned __int8 v12;
  NSObject *v13;
  uint8_t v15[12];
  int valuePtr;
  uint8_t buf[16];

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v4 = Mutable;
    v5 = (const void *)*MEMORY[0x1E0C9AE40];
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0D3A340], (const void *)*MEMORY[0x1E0C9AE40]);
    v6 = (const void *)*MEMORY[0x1E0C9AE50];
    CFDictionarySetValue(v4, (const void *)*MEMORY[0x1E0D3A248], (const void *)*MEMORY[0x1E0C9AE50]);
    if (a1)
      v7 = v6;
    else
      v7 = v5;
    CFDictionarySetValue(v4, (const void *)*MEMORY[0x1E0D3A328], v7);
    CFDictionarySetValue(v4, (const void *)*MEMORY[0x1E0D3A348], v5);
    valuePtr = 0;
    v8 = CFNumberCreate(v2, kCFNumberIntType, &valuePtr);
    if (v8)
    {
      v9 = v8;
      CFDictionarySetValue(v4, (const void *)*MEMORY[0x1E0D3A228], v8);
    }
    else
    {
      v12 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
      if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
      {
        qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
        __cxa_guard_release(&qword_1ED52ACD0);
      }
      v13 = (id)qword_1ED52ACE0;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v15 = 0;
        _os_log_error_impl(&dword_1C9870000, v13, OS_LOG_TYPE_ERROR, "could not set up hardware accelerator (setting number)", v15, 2u);
      }

      v9 = v4;
      v4 = 0;
    }
    CFRelease(v9);
  }
  else
  {
    v10 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
    if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
    {
      qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
      __cxa_guard_release(&qword_1ED52ACD0);
    }
    v11 = (id)qword_1ED52ACE0;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1C9870000, v11, OS_LOG_TYPE_ERROR, "could not set up hardware accelerator (setting options)", buf, 2u);
    }

    return 0;
  }
  return v4;
}

void sub_1C98CFEAC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1ED52ACD8))
    {
      sub_1C98CFF14();
      __cxa_guard_release(&qword_1ED52ACD8);
    }
  }
}

void sub_1C98CFEFC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1ED52ACD8);
  _Unwind_Resume(a1);
}

double sub_1C98CFF14()
{
  uint64_t v0;
  char *v1;
  double result;

  v0 = operator new();
  *(_OWORD *)(v0 + 96) = 0u;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 192) = 0u;
  *(_OWORD *)(v0 + 208) = 0u;
  *(_OWORD *)(v0 + 224) = 0u;
  *(_OWORD *)(v0 + 240) = 0u;
  *(_OWORD *)(v0 + 256) = 0u;
  *(_OWORD *)(v0 + 272) = 0u;
  *(_OWORD *)(v0 + 288) = 0u;
  *(_OWORD *)(v0 + 304) = 0u;
  *(_OWORD *)v0 = xmmword_1C99277D0;
  *(_OWORD *)(v0 + 16) = xmmword_1C99277E0;
  *(_OWORD *)(v0 + 32) = xmmword_1C99277F0;
  *(_OWORD *)(v0 + 48) = xmmword_1C9927800;
  *(_OWORD *)(v0 + 64) = xmmword_1C9927810;
  *(_OWORD *)(v0 + 80) = xmmword_1C9927820;
  *(_QWORD *)(v0 + 96) = 0x453B8000432A0000;
  *(_DWORD *)(v0 + 104) = 65792;
  *(_WORD *)(v0 + 108) = 257;
  *(_DWORD *)(v0 + 112) = 1077936128;
  *(_QWORD *)(v0 + 116) = 0xA00000004;
  *(_DWORD *)(v0 + 124) = 5;
  *(_OWORD *)(v0 + 128) = xmmword_1C9927830;
  *(_OWORD *)(v0 + 144) = xmmword_1C9927840;
  *(_OWORD *)(v0 + 160) = xmmword_1C9927850;
  *(_OWORD *)(v0 + 176) = xmmword_1C9927860;
  *(_BYTE *)(v0 + 192) = 1;
  *(_OWORD *)(v0 + 196) = xmmword_1C9927870;
  *(_DWORD *)(v0 + 212) = 1092616192;
  *(_QWORD *)(v0 + 220) = 0x3E99999A420C0000;
  *(_QWORD *)(v0 + 232) = 0x1E0000001ELL;
  *(_QWORD *)(v0 + 240) = 0x4049000000000000;
  *(_OWORD *)(v0 + 248) = xmmword_1C9927880;
  *(_QWORD *)(v0 + 264) = 0x40A0000040400000;
  v1 = (char *)operator new(0x30uLL);
  *(_QWORD *)(v0 + 280) = v1;
  *(_OWORD *)(v0 + 288) = xmmword_1C9927890;
  strcpy(v1, "/var/mobile/Media/DCIM/debug_profile.json");
  result = 5.23869071e-11;
  *(_QWORD *)(v0 + 304) = 0x3DCCCCCD3E4CCCCDLL;
  *(_DWORD *)(v0 + 312) = 1000;
  *(_BYTE *)(v0 + 316) = 0;
  qword_1ED52ACB8 = v0;
  return result;
}

void sub_1C98D00A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1CAA44AFC](v1, 0x1012C40F8266235);
  _Unwind_Resume(a1);
}

void sub_1C98D00C8()
{
  int v0;
  const __CFDictionary *v1;
  const __CFDictionary *v2;
  __CFDictionary *MutableCopy;
  const void *Dictionary;
  uint64_t v5;
  void **v6;
  cva::DictionaryHandler *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  std::ios_base *v13;
  void **v14;
  uint64_t v15;
  char v16;
  void *v17;
  void *v18;
  int v19;
  __int128 *p_p;
  uint64_t v21;
  void **v22;
  int v23;
  int v24;
  int v25;
  _BOOL4 v26;
  void **v28;
  uint64_t v29;
  unsigned __int8 v30;
  NSObject *v31;
  size_t v32;
  void **v33;
  unint64_t v34;
  _QWORD *v35;
  const void **v36;
  const void *v37;
  uint64_t v38;
  uint64_t v39;
  void **v40;
  void **v41;
  size_t v42;
  uint64_t v43;
  double v44;
  double v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  std::ios_base *v52;
  uint64_t v53;
  _QWORD *v54;
  unsigned __int8 v55;
  NSObject *v56;
  size_t v57;
  void *v58;
  unint64_t v59;
  const void **v60;
  const void *v61;
  uint64_t v62;
  uint64_t v63;
  void **v64;
  const __CFDictionary *v65;
  int Count;
  unsigned __int8 v67;
  NSObject *v68;
  const char *CStringPtr;
  const char *v70;
  const char *v71;
  unsigned __int8 v72;
  NSObject *v73;
  const char *v74;
  void *v75;
  id v76;
  void *v77;
  void **v78;
  char *v79;
  void *context;
  cva::DictionaryHandler *v81;
  _BYTE v82[16];
  void *v83[2];
  void *v84;
  void *v85[2];
  uint64_t v86;
  void *v87[2];
  void *v88;
  void *__dst[2];
  int64_t v90;
  uint8_t buf[4];
  void **v92;
  __int128 __p;
  uint64_t v94;
  void *__s1[4];
  uint8_t v96[8];
  _BYTE v97[10];
  _BYTE v98[16];
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  __int128 v102;
  __int128 v103;
  int v104;
  _QWORD v105[22];

  v105[19] = *MEMORY[0x1E0C80C00];
  context = (void *)MEMORY[0x1CAA45030]();
  v0 = os_variant_allows_internal_security_policies();
  *(_BYTE *)(qword_1ED52ACB8 + 104) = v0;
  if (!v0)
    goto LABEL_151;
  v1 = (const __CFDictionary *)CFPreferencesCopyAppValue(CFSTR("com.apple.applecva.facekit"), (CFStringRef)*MEMORY[0x1E0C9B228]);
  if (!v1)
    goto LABEL_151;
  v2 = v1;
  MutableCopy = CFDictionaryCreateMutableCopy(0, 0, v1);
  cva::DictionaryHandler::DictionaryHandler((cva::DictionaryHandler *)v82, MutableCopy);
  CFRelease(v2);
  Dictionary = (const void *)cva::DictionaryHandler::getDictionary((cva::DictionaryHandler *)v82);
  CFRelease(Dictionary);
  v81 = (cva::DictionaryHandler *)v82;
  sub_1C98D17D8(&v81, "facekit_enable_multiuser", "enable multi-user tracking", (_BYTE *)(qword_1ED52ACB8 + 105));
  sub_1C98D17D8(&v81, "facekit_enable_recognition", "enable user recognition", (_BYTE *)(qword_1ED52ACB8 + 106));
  sub_1C98D17D8(&v81, "facekit_force_enable_recognition", "force enable user recognition", (_BYTE *)(qword_1ED52ACB8 + 107));
  sub_1C98D17D8(&v81, "facekit_enable_tongue", "enable tongue", (_BYTE *)(qword_1ED52ACB8 + 108));
  sub_1C98D17D8(&v81, "facekit_enable_perspective_warp", "enable perspective warp", (_BYTE *)(qword_1ED52ACB8 + 109));
  sub_1C98D1C88(&v81, "facekit_filter_historysize", "filter history size", (int *)(qword_1ED52ACB8 + 116));
  sub_1C98D1C88(&v81, "gaze_facekit_filter_historysize", "gaze filter history size", (int *)(qword_1ED52ACB8 + 120));
  sub_1C98D1C88(&v81, "bbox_facekit_filter_historysize", "bbox filter history size", (int *)(qword_1ED52ACB8 + 124));
  sub_1C98D212C(&v81, "facekit_posefilter_translation_smoothing", "pose filter translation smoothing", (float *)(qword_1ED52ACB8 + 128));
  sub_1C98D212C(&v81, "facekit_posefilter_rotation_smoothing", "pose filter rotation smoothing", (float *)(qword_1ED52ACB8 + 132));
  sub_1C98D212C(&v81, "facekit_robust_blendshape_smoothing", "blendshape smoothing", (float *)(qword_1ED52ACB8 + 136));
  sub_1C98D212C(&v81, "facekit_robust_blendshape_smoothing_lowest_threshold", "blendshape smoothing lowest threshold", (float *)(qword_1ED52ACB8 + 140));
  sub_1C98D212C(&v81, "facekit_robust_blendshape_smoothing_low_threshold", "blendshape smoothing low threshold", (float *)(qword_1ED52ACB8 + 144));
  sub_1C98D212C(&v81, "facekit_robust_blendshape_smoothing_high_threshold", "blendshape smoothing high threshold", (float *)(qword_1ED52ACB8 + 148));
  sub_1C98D212C(&v81, "facekit_robust_blendshape_smoothing_highest_threshold", "blendshape smoothing highest threshold", (float *)(qword_1ED52ACB8 + 152));
  sub_1C98D212C(&v81, "facekit_robust_blendshape_smoothing_temporal_smoothing", "blendshape smoothing temporal smoothing", (float *)(qword_1ED52ACB8 + 156));
  sub_1C98D212C(&v81, "facekit_robust_blendshape_smoothing_prediction_factor", "blendshape smoothing prediction factor", (float *)(qword_1ED52ACB8 + 160));
  sub_1C98D212C(&v81, "facekit_robust_blendshape_smoothing_min_smoothing", "blendshape smoothing min smoothing", (float *)(qword_1ED52ACB8 + 164));
  sub_1C98D212C(&v81, "facekit_robust_blendshape_smoothing_brow_multiplier", "blendshape smoothing brow multiplier", (float *)(qword_1ED52ACB8 + 168));
  sub_1C98D212C(&v81, "facekit_robust_blendshape_smoothing_eye_multiplier", "blendshape smoothing eye multiplier", (float *)(qword_1ED52ACB8 + 172));
  sub_1C98D212C(&v81, "facekit_robust_blendshape_smoothing_mouth_multiplier", "blendshape smoothing mouth multiplier", (float *)(qword_1ED52ACB8 + 176));
  sub_1C98D212C(&v81, "facekit_robust_blendshape_smoothing_mouth_tongue_multiplier", "blendshape smoothing mouth tongue multiplier", (float *)(qword_1ED52ACB8 + 180));
  sub_1C98D212C(&v81, "facekit_gaze_smoothing_threshold", "gaze smoothing scale", (float *)(qword_1ED52ACB8 + 184));
  sub_1C98D212C(&v81, "facekit_tongue_smoothing_threshold", "tongue smoothing scale", (float *)(qword_1ED52ACB8 + 188));
  sub_1C98D17D8(&v81, "facekit_symmetrize_blendshapes", "symmetrize blendshapes (brows/eyes)", (_BYTE *)(qword_1ED52ACB8 + 192));
  sub_1C98D212C(&v81, "facekit_blendshape_asymmetry_scale", "blendshape asymmetry scale", (float *)(qword_1ED52ACB8 + 196));
  sub_1C98D212C(&v81, "facekit_blendshape_asymmetry_shift", "blendshape asymmetry shift", (float *)(qword_1ED52ACB8 + 200));
  sub_1C98D212C(&v81, "face_detection_roll_smoothing_threshold", "face detection roll smoothing", (float *)(qword_1ED52ACB8 + 212));
  sub_1C98D212C(&v81, "face_detection_bbox_smoothing_threshold", "face detection bbox smoothing", (float *)(qword_1ED52ACB8 + 208));
  sub_1C98D212C(&v81, "facekit_enlargement_factor", "enlargement factor", (float *)(qword_1ED52ACB8 + 204));
  sub_1C98D212C(&v81, "facekit_failure_threshold", "failure threshold (base)", (float *)qword_1ED52ACB8);
  sub_1C98D212C(&v81, "facekit_failure_threshold", "failure threshold", (float *)(qword_1ED52ACB8 + 4));
  sub_1C98D212C(&v81, "facekit_maxangle_cara", "max angle for face tracking", (float *)(qword_1ED52ACB8 + 84));
  sub_1C98D212C(&v81, "facekit_mindistance_for_tracking", "min distance for face tracking", (float *)(qword_1ED52ACB8 + 96));
  sub_1C98D212C(&v81, "facekit_maxdistance_for_tracking", "max distance for face tracking", (float *)(qword_1ED52ACB8 + 100));
  sub_1C98D212C(&v81, "facekit_mindistance_for_fitting", "min distance for fitting", (float *)(qword_1ED52ACB8 + 88));
  sub_1C98D212C(&v81, "facekit_mindistance_for_fitting_rgbd", "min distance for rgbd fitting", (float *)(qword_1ED52ACB8 + 32));
  sub_1C98D212C(&v81, "facekit_maxdistance_for_fitting_rgbd", "max distance for rgbd fitting", (float *)(qword_1ED52ACB8 + 36));
  sub_1C98D212C(&v81, "facekit_maxdistance_for_fitting", "max distance for fitting", (float *)(qword_1ED52ACB8 + 92));
  sub_1C98D212C(&v81, "facekit_maxtranslationalvelocity", "max translational velocity for face tracking", (float *)(qword_1ED52ACB8 + 16));
  sub_1C98D212C(&v81, "facekit_maxtranslationalacceleration", "max translational acceleration for face tracking", (float *)(qword_1ED52ACB8 + 24));
  sub_1C98D212C(&v81, "facekit_maxangularvelocity", "max angular velocity for face tracking", (float *)(qword_1ED52ACB8 + 20));
  sub_1C98D212C(&v81, "facekit_maxangularacceleration", "max angular acceleration for face tracking", (float *)(qword_1ED52ACB8 + 28));
  sub_1C98D212C(&v81, "max_angle_recognition", "max angle for recognition", (float *)(qword_1ED52ACB8 + 60));
  sub_1C98D212C(&v81, "max_translational_velocity_recognition", "max translational velocity for recognition", (float *)(qword_1ED52ACB8 + 64));
  sub_1C98D212C(&v81, "max_angular_velocity_recognition", "max angular velocity for recognition", (float *)(qword_1ED52ACB8 + 68));
  sub_1C98D212C(&v81, "max_translational_acceleration_recognition", "max translational acceleration for recognition", (float *)(qword_1ED52ACB8 + 72));
  sub_1C98D212C(&v81, "max_angular_acceleration_recognition", "max angular acceleration for recognition", (float *)(qword_1ED52ACB8 + 76));
  sub_1C98D212C(&v81, "recognition_failure_threshold", "recognition failure threshold", (float *)(qword_1ED52ACB8 + 80));
  sub_1C98D17D8(&v81, "facekit_robusttongueactivation", "robust tongue activation", (_BYTE *)(qword_1ED52ACB8 + 216));
  sub_1C98D212C(&v81, "facekit_maxangle_tongue", "max angle for tongue activation", (float *)(qword_1ED52ACB8 + 220));
  sub_1C98D212C(&v81, "facekit_maxexpression_tongue", "max expression for tongue activation", (float *)(qword_1ED52ACB8 + 224));
  sub_1C98D1C88(&v81, "facekit_luxlevel_threshold", "lux level threshold", (int *)(qword_1ED52ACB8 + 232));
  sub_1C98D17D8(&v81, "facekit_use_debug_profile", "use debug profile", (_BYTE *)(qword_1ED52ACB8 + 272));
  v5 = qword_1ED52ACB8;
  if (!cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)v82, "facekit_debug_profile_path"))
  {
    v7 = (cva::DictionaryHandler *)v82;
    goto LABEL_98;
  }
  cva::DictionaryHandler::item((cva::DictionaryHandler *)v82, "facekit_debug_profile_path");
  cva::ItemHandler::getValue<std::string>();
  v6 = (void **)(v5 + 280);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v96);
  if (*(char *)(v5 + 303) < 0)
  {
    sub_1C987D148(v85, *(void **)(v5 + 280), *(_QWORD *)(v5 + 288));
  }
  else
  {
    *(_OWORD *)v85 = *(_OWORD *)v6;
    v86 = *(_QWORD *)(v5 + 296);
  }
  if (SHIBYTE(v88) < 0)
  {
    sub_1C987D148(v83, v87[0], (unint64_t)v87[1]);
  }
  else
  {
    *(_OWORD *)v83 = *(_OWORD *)v87;
    v84 = v88;
  }
  v8 = MEMORY[0x1E0DE4FE0];
  v9 = MEMORY[0x1E0DE4FE0] + 64;
  v10 = (_QWORD *)MEMORY[0x1E0DE4F60];
  v11 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v12 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v105[0] = MEMORY[0x1E0DE4FE0] + 64;
  *(_QWORD *)v96 = v11;
  *(_QWORD *)&v96[*(_QWORD *)(v11 - 24)] = v12;
  v13 = (std::ios_base *)&v96[*(_QWORD *)(*(_QWORD *)v96 - 24)];
  std::ios_base::init(v13, v97);
  v13[1].__vftable = 0;
  v13[1].__fmtflags_ = -1;
  *(_QWORD *)v96 = v8 + 24;
  v105[0] = v9;
  std::streambuf::basic_streambuf();
  *(_QWORD *)v97 = MEMORY[0x1E0DE4FB8] + 16;
  v102 = 0u;
  v103 = 0u;
  v104 = 16;
  sub_1C98D260C(v96, (uint64_t)"custom facekit setting: ", 24);
  sub_1C98D260C(v96, (uint64_t)"facekit_debug_profile_path", 26);
  sub_1C98D260C(v96, (uint64_t)"=", 1);
  if (SHIBYTE(v84) >= 0)
    v14 = v83;
  else
    v14 = (void **)v83[0];
  if (SHIBYTE(v84) >= 0)
    v15 = HIBYTE(v84);
  else
    v15 = (uint64_t)v83[1];
  sub_1C98D260C(v96, (uint64_t)v14, v15);
  if (SHIBYTE(v84) < 0)
  {
    sub_1C987D148(__s1, v83[0], (unint64_t)v83[1]);
  }
  else
  {
    *(_OWORD *)__s1 = *(_OWORD *)v83;
    __s1[2] = v84;
  }
  if (SHIBYTE(v86) < 0)
  {
    sub_1C987D148(&__p, v85[0], (unint64_t)v85[1]);
  }
  else
  {
    __p = *(_OWORD *)v85;
    v94 = v86;
  }
  v16 = HIBYTE(__s1[2]);
  if (SHIBYTE(__s1[2]) >= 0)
    v17 = (void *)HIBYTE(__s1[2]);
  else
    v17 = __s1[1];
  v18 = (void *)HIBYTE(v94);
  v19 = SHIBYTE(v94);
  if (v94 < 0)
    v18 = (void *)*((_QWORD *)&__p + 1);
  if (v17 == v18)
  {
    if (v94 >= 0)
      p_p = &__p;
    else
      p_p = (__int128 *)__p;
    if ((HIBYTE(__s1[2]) & 0x80) != 0)
    {
      v26 = memcmp(__s1[0], p_p, (size_t)__s1[1]) != 0;
      if ((v19 & 0x80000000) == 0)
        goto LABEL_41;
    }
    else if (HIBYTE(__s1[2]))
    {
      v21 = HIBYTE(__s1[2]) - 1;
      v22 = __s1;
      do
      {
        v24 = *(unsigned __int8 *)v22;
        v22 = (void **)((char *)v22 + 1);
        v23 = v24;
        v25 = *(unsigned __int8 *)p_p;
        p_p = (__int128 *)((char *)p_p + 1);
        v26 = v23 != v25;
      }
      while (v23 == v25 && v21-- != 0);
      if ((SHIBYTE(v94) & 0x80000000) == 0)
      {
LABEL_41:
        if ((v16 & 0x80) == 0)
          goto LABEL_42;
LABEL_46:
        operator delete(__s1[0]);
        if (!v26)
          goto LABEL_54;
        goto LABEL_47;
      }
    }
    else
    {
      v26 = 0;
      if ((SHIBYTE(v94) & 0x80000000) == 0)
        goto LABEL_41;
    }
  }
  else
  {
    v26 = 1;
    if ((SHIBYTE(v94) & 0x80000000) == 0)
      goto LABEL_41;
  }
  operator delete((void *)__p);
  if (v16 < 0)
    goto LABEL_46;
LABEL_42:
  if (!v26)
    goto LABEL_54;
LABEL_47:
  sub_1C98D260C(v96, (uint64_t)" (was =", 7);
  if (v86 >= 0)
    v28 = v85;
  else
    v28 = (void **)v85[0];
  if (v86 >= 0)
    v29 = HIBYTE(v86);
  else
    v29 = (uint64_t)v85[1];
  sub_1C98D260C(v96, (uint64_t)v28, v29);
  sub_1C98D260C(v96, (uint64_t)")", 1);
LABEL_54:
  sub_1C98D260C(v96, (uint64_t)" [", 2);
  sub_1C98D260C(v96, (uint64_t)"debug profile path", 18);
  sub_1C98D260C(v96, (uint64_t)"]", 1);
  v30 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
  if ((v30 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
  {
    qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
    __cxa_guard_release(&qword_1ED52ACD0);
  }
  v31 = (id)qword_1ED52ACE0;
  if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
  {
    if ((v104 & 0x10) != 0)
    {
      v34 = *((_QWORD *)&v103 + 1);
      if (*((_QWORD *)&v103 + 1) < v101)
      {
        *((_QWORD *)&v103 + 1) = v101;
        v34 = v101;
      }
      v35 = v10;
      v36 = (const void **)&v100;
    }
    else
    {
      if ((v104 & 8) == 0)
      {
        v32 = 0;
        HIBYTE(v90) = 0;
        v33 = __dst;
LABEL_74:
        *((_BYTE *)v33 + v32) = 0;
        v40 = __dst;
        if (v90 < 0)
          v40 = (void **)__dst[0];
        *(_DWORD *)buf = 136315138;
        v92 = v40;
        _os_log_impl(&dword_1C9870000, v31, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
        if (SHIBYTE(v90) < 0)
          operator delete(__dst[0]);
        goto LABEL_78;
      }
      v35 = v10;
      v36 = (const void **)v98;
      v34 = v99;
    }
    v37 = *v36;
    v32 = v34 - (_QWORD)*v36;
    if (v32 > 0x7FFFFFFFFFFFFFF7)
      abort();
    if (v32 >= 0x17)
    {
      v38 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v32 | 7) != 0x17)
        v38 = v32 | 7;
      v39 = v38 + 1;
      v33 = (void **)operator new(v38 + 1);
      __dst[1] = (void *)v32;
      v90 = v39 | 0x8000000000000000;
      __dst[0] = v33;
    }
    else
    {
      HIBYTE(v90) = v34 - *(_BYTE *)v36;
      v33 = __dst;
      if (!v32)
        goto LABEL_73;
    }
    memmove(v33, v37, v32);
LABEL_73:
    v10 = v35;
    goto LABEL_74;
  }
LABEL_78:

  *(_QWORD *)v96 = *v10;
  *(_QWORD *)&v96[*(_QWORD *)(*(_QWORD *)v96 - 24)] = v10[3];
  *(_QWORD *)v97 = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v103) < 0)
    operator delete((void *)v102);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1CAA44AB4](v105);
  if (SHIBYTE(v84) < 0)
    operator delete(v83[0]);
  if (SHIBYTE(v86) < 0)
    operator delete(v85[0]);
  if (v87 == v6)
  {
LABEL_95:
    if ((SHIBYTE(v88) & 0x80000000) == 0)
      goto LABEL_97;
LABEL_96:
    operator delete(v87[0]);
    goto LABEL_97;
  }
  if (*(char *)(v5 + 303) < 0)
  {
    if (SHIBYTE(v88) >= 0)
      v41 = v87;
    else
      v41 = (void **)v87[0];
    if (SHIBYTE(v88) >= 0)
      v42 = HIBYTE(v88);
    else
      v42 = (size_t)v87[1];
    sub_1C98A976C((void **)(v5 + 280), v41, v42);
    goto LABEL_95;
  }
  if ((HIBYTE(v88) & 0x80) != 0)
  {
    sub_1C98A96AC((_QWORD *)(v5 + 280), v87[0], (size_t)v87[1]);
    if ((SHIBYTE(v88) & 0x80000000) == 0)
      goto LABEL_97;
    goto LABEL_96;
  }
  *(_OWORD *)v6 = *(_OWORD *)v87;
  *(_QWORD *)(v5 + 296) = v88;
LABEL_97:
  v7 = v81;
LABEL_98:
  cva::DictionaryHandler::removeItem(v7, "facekit_debug_profile_path");
  sub_1C98D212C(&v81, "face_identity_cluster_detection_range", "face identity cluster detection range", (float *)(qword_1ED52ACB8 + 304));
  sub_1C98D212C(&v81, "face_identity_cluster_radius", "face identity cluster radius", (float *)(qword_1ED52ACB8 + 308));
  sub_1C98D1C88(&v81, "recognition_update_period", "recognition update period in ms", (int *)(qword_1ED52ACB8 + 312));
  sub_1C98D17D8(&v81, "facekit_force_debug_info", "force debug info", (_BYTE *)(qword_1ED52ACB8 + 316));
  sub_1C98D1C88(&v81, "facekit_postprocessing_kernel_size", "postprocessing kernel size", (int *)(qword_1ED52ACB8 + 236));
  v43 = qword_1ED52ACB8;
  if (cva::DictionaryHandler::hasKey(v7, "facekit_postprocessing_time_std"))
  {
    cva::DictionaryHandler::item(v7, "facekit_postprocessing_time_std");
    cva::ItemHandler::getValue<double>();
    v45 = v44;
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v96);
    v46 = *(double *)(v43 + 240);
    v47 = MEMORY[0x1E0DE4FE0];
    v48 = MEMORY[0x1E0DE4FE0] + 64;
    v49 = (_QWORD *)MEMORY[0x1E0DE4F60];
    v50 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v51 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v105[0] = MEMORY[0x1E0DE4FE0] + 64;
    *(_QWORD *)v96 = v50;
    *(_QWORD *)&v96[*(_QWORD *)(v50 - 24)] = v51;
    v52 = (std::ios_base *)&v96[*(_QWORD *)(*(_QWORD *)v96 - 24)];
    std::ios_base::init(v52, v97);
    v52[1].__vftable = 0;
    v52[1].__fmtflags_ = -1;
    *(_QWORD *)v96 = v47 + 24;
    v105[0] = v48;
    std::streambuf::basic_streambuf();
    v53 = MEMORY[0x1E0DE4FB8];
    *(_QWORD *)v97 = MEMORY[0x1E0DE4FB8] + 16;
    v102 = 0u;
    v103 = 0u;
    v104 = 16;
    sub_1C98D260C(v96, (uint64_t)"custom facekit setting: ", 24);
    sub_1C98D260C(v96, (uint64_t)"facekit_postprocessing_time_std", 31);
    sub_1C98D260C(v96, (uint64_t)"=", 1);
    std::ostream::operator<<();
    if (v46 * 0.9999995 > v45 || v46 * 1.0000005 < v45)
    {
      sub_1C98D260C(v96, (uint64_t)" (was =", 7);
      v54 = (_QWORD *)std::ostream::operator<<();
      sub_1C98D260C(v54, (uint64_t)")", 1);
    }
    sub_1C98D260C(v96, (uint64_t)" [", 2);
    sub_1C98D260C(v96, (uint64_t)"postprocessing time std", 23);
    sub_1C98D260C(v96, (uint64_t)"]", 1);
    v55 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
    if ((v55 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
    {
      qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
      __cxa_guard_release(&qword_1ED52ACD0);
    }
    v56 = (id)qword_1ED52ACE0;
    if (!os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
      goto LABEL_125;
    if ((v104 & 0x10) != 0)
    {
      v59 = *((_QWORD *)&v103 + 1);
      if (*((_QWORD *)&v103 + 1) < v101)
      {
        *((_QWORD *)&v103 + 1) = v101;
        v59 = v101;
      }
      v60 = (const void **)&v100;
    }
    else
    {
      if ((v104 & 8) == 0)
      {
        v57 = 0;
        HIBYTE(__s1[2]) = 0;
        v58 = __s1;
        goto LABEL_121;
      }
      v60 = (const void **)v98;
      v59 = v99;
    }
    v61 = *v60;
    v57 = v59 - (_QWORD)*v60;
    if (v57 > 0x7FFFFFFFFFFFFFF7)
      abort();
    if (v57 >= 0x17)
    {
      v62 = (v57 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v57 | 7) != 0x17)
        v62 = v57 | 7;
      v63 = v62 + 1;
      v58 = operator new(v62 + 1);
      __s1[1] = (void *)v57;
      __s1[2] = (void *)(v63 | 0x8000000000000000);
      __s1[0] = v58;
    }
    else
    {
      HIBYTE(__s1[2]) = v59 - *(_BYTE *)v60;
      v58 = __s1;
      if (!v57)
        goto LABEL_121;
    }
    memmove(v58, v61, v57);
LABEL_121:
    *((_BYTE *)v58 + v57) = 0;
    v64 = __s1;
    if (SHIBYTE(__s1[2]) < 0)
      v64 = (void **)__s1[0];
    LODWORD(__p) = 136315138;
    *(_QWORD *)((char *)&__p + 4) = v64;
    _os_log_impl(&dword_1C9870000, v56, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)&__p, 0xCu);
    if (SHIBYTE(__s1[2]) < 0)
      operator delete(__s1[0]);
LABEL_125:

    *(_QWORD *)v96 = *v49;
    *(_QWORD *)&v96[*(_QWORD *)(*(_QWORD *)v96 - 24)] = v49[3];
    *(_QWORD *)v97 = v53 + 16;
    if (SBYTE7(v103) < 0)
      operator delete((void *)v102);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1CAA44AB4](v105);
    *(double *)(v43 + 240) = v45;
    v7 = v81;
  }
  cva::DictionaryHandler::removeItem(v7, "facekit_postprocessing_time_std");
  sub_1C98D212C(&v81, "facekit_postprocessing_blendshape_std", "postprocessing blendshapes std", (float *)(qword_1ED52ACB8 + 248));
  sub_1C98D212C(&v81, "facekit_postprocessing_blendshape_brow_multiplier", "postprocessing blendshapes brow multiplier", (float *)(qword_1ED52ACB8 + 252));
  sub_1C98D212C(&v81, "facekit_postprocessing_blendshape_eye_multiplier", "postprocessing blendshapes eye multiplier", (float *)(qword_1ED52ACB8 + 256));
  sub_1C98D212C(&v81, "facekit_postprocessing_blendshape_mouth_multiplier", "postprocessing blendshapes mouth multiplier", (float *)(qword_1ED52ACB8 + 260));
  sub_1C98D212C(&v81, "facekit_postprocessing_rotation_std", "postprocessing rotation std", (float *)(qword_1ED52ACB8 + 264));
  sub_1C98D212C(&v81, "facekit_postprocessing_translation_std", "postprocessing translation std", (float *)(qword_1ED52ACB8 + 268));
  v65 = (const __CFDictionary *)cva::DictionaryHandler::getDictionary((cva::DictionaryHandler *)v82);
  Count = CFDictionaryGetCount(v65);
  if (Count)
  {
    v67 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
    if ((v67 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
    {
      qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
      __cxa_guard_release(&qword_1ED52ACD0);
    }
    v68 = (id)qword_1ED52ACE0;
    if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
    {
      CStringPtr = CFStringGetCStringPtr(CFSTR("com.apple.applecva.facekit"), 0x8000100u);
      *(_DWORD *)v96 = 67109378;
      *(_DWORD *)&v96[4] = Count;
      *(_WORD *)v97 = 2080;
      *(_QWORD *)&v97[2] = CStringPtr;
      _os_log_impl(&dword_1C9870000, v68, OS_LOG_TYPE_DEFAULT, "%d unrecognized setting(s) in %s defaults", v96, 0x12u);
    }

    cva::DictionaryHandler::getKeys((cva::DictionaryHandler *)v82);
    v70 = *(const char **)v96;
    v71 = *(const char **)v97;
    if (*(_QWORD *)v96 != *(_QWORD *)v97)
    {
      do
      {
        v72 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
        if ((v72 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
        {
          qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
          __cxa_guard_release(&qword_1ED52ACD0);
        }
        v73 = (id)qword_1ED52ACE0;
        if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
        {
          v74 = v70;
          if (v70[23] < 0)
            v74 = *(const char **)v70;
          v75 = (void *)MEMORY[0x1E0CB3940];
          cva::DictionaryHandler::item((cva::DictionaryHandler *)v82, v74);
          objc_msgSend(v75, "stringWithFormat:", CFSTR("%@"), cva::ItemHandler::getObject((cva::ItemHandler *)&__p), context);
          v76 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v77 = (void *)objc_msgSend(v76, "UTF8String");
          LODWORD(__s1[0]) = 136315394;
          *(void **)((char *)__s1 + 4) = (void *)v74;
          WORD2(__s1[1]) = 2080;
          *(void **)((char *)&__s1[1] + 6) = v77;
          _os_log_impl(&dword_1C9870000, v73, OS_LOG_TYPE_DEFAULT, "\tunrecognized facekit setting: %s=%s", (uint8_t *)__s1, 0x16u);

          cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&__p);
        }

        v70 += 24;
      }
      while (v70 != v71);
      v70 = *(const char **)v96;
    }
    if (v70)
    {
      v78 = *(void ***)v97;
      v79 = (char *)v70;
      if (*(const char **)v97 != v70)
      {
        do
        {
          if (*((char *)v78 - 1) < 0)
            operator delete(*(v78 - 3));
          v78 -= 3;
        }
        while (v78 != (void **)v70);
        v79 = *(char **)v96;
      }
      *(_QWORD *)v97 = v70;
      operator delete(v79);
    }
  }
  cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)v82);
LABEL_151:
  objc_autoreleasePoolPop(context);
}

void sub_1C98D15DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  char a67;
  uint64_t *v67;
  uint64_t v68;

  if (a51 < 0)
    operator delete(__p);
  a53 = *v67;
  *(uint64_t *)((char *)&a53 + *(_QWORD *)(a53 - 24)) = v67[3];
  a54 = MEMORY[0x1E0DE4FB8] + 16;
  if (a67 < 0)
    operator delete(a62);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1CAA44AB4](v68);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((a29 & 0x80000000) == 0)
      goto LABEL_7;
  }
  else if ((a29 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a36 & 0x80000000) == 0)
    {
LABEL_12:
      cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)&a15);
      _Unwind_Resume(a1);
    }
LABEL_11:
    operator delete(a31);
    goto LABEL_12;
  }
  operator delete(a24);
  if ((a36 & 0x80000000) == 0)
    goto LABEL_12;
  goto LABEL_11;
}

uint64_t sub_1C98D17D8(cva::DictionaryHandler **a1, const char *a2, const char *a3, _BYTE *a4)
{
  cva::DictionaryHandler *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::ios_base *v15;
  uint64_t v16;
  size_t v17;
  _QWORD *v18;
  size_t v19;
  unsigned __int8 v20;
  NSObject *v21;
  _BOOL4 v22;
  uint64_t *v23;
  size_t v24;
  void **v25;
  unint64_t v26;
  const void **v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  void **v31;
  void *__dst[2];
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[3];
  uint64_t v38;
  unint64_t v39;
  void *__p[2];
  __int128 v41;
  int v42;
  uint64_t v43[19];
  uint8_t buf[4];
  void **v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v8 = *a1;
  if (!cva::DictionaryHandler::hasKey(*a1, a2))
    return cva::DictionaryHandler::removeItem(*a1, a2);
  cva::DictionaryHandler::item(v8, a2);
  v9 = cva::ItemHandler::getValue<BOOL>();
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v35);
  v10 = *a4;
  v11 = MEMORY[0x1E0DE4FE0];
  v12 = MEMORY[0x1E0DE4FE0] + 64;
  v13 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v14 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v43[0] = MEMORY[0x1E0DE4FE0] + 64;
  v35 = v13;
  *(uint64_t *)((char *)&v35 + *(_QWORD *)(v13 - 24)) = v14;
  v15 = (std::ios_base *)((char *)&v35 + *(_QWORD *)(v35 - 24));
  std::ios_base::init(v15, &v36);
  v15[1].__vftable = 0;
  v15[1].__fmtflags_ = -1;
  v35 = v11 + 24;
  v43[0] = v12;
  std::streambuf::basic_streambuf();
  v16 = MEMORY[0x1E0DE4FB8];
  v36 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v41 = 0u;
  v42 = 16;
  sub_1C98D260C(&v35, (uint64_t)"custom facekit setting: ", 24);
  v17 = strlen(a2);
  sub_1C98D260C(&v35, (uint64_t)a2, v17);
  sub_1C98D260C(&v35, (uint64_t)"=", 1);
  std::ostream::operator<<();
  if (v9 != (v10 != 0))
  {
    sub_1C98D260C(&v35, (uint64_t)" (was =", 7);
    v18 = (_QWORD *)std::ostream::operator<<();
    sub_1C98D260C(v18, (uint64_t)")", 1);
  }
  sub_1C98D260C(&v35, (uint64_t)" [", 2);
  v19 = strlen(a3);
  sub_1C98D260C(&v35, (uint64_t)a3, v19);
  sub_1C98D260C(&v35, (uint64_t)"]", 1);
  v20 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
  if ((v20 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
  {
    qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
    __cxa_guard_release(&qword_1ED52ACD0);
  }
  v21 = (id)qword_1ED52ACE0;
  v22 = os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
  v23 = (uint64_t *)MEMORY[0x1E0DE4F60];
  if (v22)
  {
    if ((v42 & 0x10) != 0)
    {
      v26 = *((_QWORD *)&v41 + 1);
      if (*((_QWORD *)&v41 + 1) < v39)
      {
        *((_QWORD *)&v41 + 1) = v39;
        v26 = v39;
      }
      v27 = (const void **)&v38;
    }
    else
    {
      if ((v42 & 8) == 0)
      {
        v24 = 0;
        HIBYTE(v34) = 0;
        v25 = __dst;
LABEL_22:
        *((_BYTE *)v25 + v24) = 0;
        v31 = __dst;
        if (v34 < 0)
          v31 = (void **)__dst[0];
        *(_DWORD *)buf = 136315138;
        v45 = v31;
        _os_log_impl(&dword_1C9870000, v21, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
        if (SHIBYTE(v34) < 0)
          operator delete(__dst[0]);
        goto LABEL_26;
      }
      v27 = (const void **)v37;
      v26 = v37[2];
    }
    v28 = *v27;
    v24 = v26 - (_QWORD)*v27;
    if (v24 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v24 >= 0x17)
    {
      v29 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v24 | 7) != 0x17)
        v29 = v24 | 7;
      v30 = v29 + 1;
      v25 = (void **)operator new(v29 + 1);
      __dst[1] = (void *)v24;
      v34 = v30 | 0x8000000000000000;
      __dst[0] = v25;
      v23 = (uint64_t *)MEMORY[0x1E0DE4F60];
    }
    else
    {
      HIBYTE(v34) = v26 - *(_BYTE *)v27;
      v25 = __dst;
      if (!v24)
        goto LABEL_21;
    }
    memmove(v25, v28, v24);
LABEL_21:
    v16 = MEMORY[0x1E0DE4FB8];
    goto LABEL_22;
  }
LABEL_26:

  v35 = *v23;
  *(uint64_t *)((char *)&v35 + *(_QWORD *)(v35 - 24)) = v23[3];
  v36 = v16 + 16;
  if (SBYTE7(v41) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1CAA44AB4](v43);
  *a4 = v9;
  return cva::DictionaryHandler::removeItem(*a1, a2);
}

void sub_1C98D1BE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  uint64_t v30;

  v30 = MEMORY[0x1E0DE4FB8];
  a14 = *MEMORY[0x1E0DE4F60];
  *(uint64_t *)((char *)&a14 + *(_QWORD *)(a14 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  a15 = v30 + 16;
  if (a28 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1CAA44AB4](a10);
  _Unwind_Resume(a1);
}

uint64_t sub_1C98D1C88(cva::DictionaryHandler **a1, const char *a2, const char *a3, int *a4)
{
  cva::DictionaryHandler *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::ios_base *v15;
  uint64_t v16;
  size_t v17;
  _QWORD *v18;
  size_t v19;
  unsigned __int8 v20;
  NSObject *v21;
  _BOOL4 v22;
  uint64_t *v23;
  size_t v24;
  void **v25;
  unint64_t v26;
  const void **v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  void **v31;
  void *__dst[2];
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[3];
  uint64_t v38;
  unint64_t v39;
  void *__p[2];
  __int128 v41;
  int v42;
  uint64_t v43[19];
  uint8_t buf[4];
  void **v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v8 = *a1;
  if (!cva::DictionaryHandler::hasKey(*a1, a2))
    return cva::DictionaryHandler::removeItem(*a1, a2);
  cva::DictionaryHandler::item(v8, a2);
  v9 = cva::ItemHandler::getValue<int>();
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v35);
  v10 = *a4;
  v11 = MEMORY[0x1E0DE4FE0];
  v12 = MEMORY[0x1E0DE4FE0] + 64;
  v13 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v14 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v43[0] = MEMORY[0x1E0DE4FE0] + 64;
  v35 = v13;
  *(uint64_t *)((char *)&v35 + *(_QWORD *)(v13 - 24)) = v14;
  v15 = (std::ios_base *)((char *)&v35 + *(_QWORD *)(v35 - 24));
  std::ios_base::init(v15, &v36);
  v15[1].__vftable = 0;
  v15[1].__fmtflags_ = -1;
  v35 = v11 + 24;
  v43[0] = v12;
  std::streambuf::basic_streambuf();
  v16 = MEMORY[0x1E0DE4FB8];
  v36 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v41 = 0u;
  v42 = 16;
  sub_1C98D260C(&v35, (uint64_t)"custom facekit setting: ", 24);
  v17 = strlen(a2);
  sub_1C98D260C(&v35, (uint64_t)a2, v17);
  sub_1C98D260C(&v35, (uint64_t)"=", 1);
  std::ostream::operator<<();
  if (v9 != v10)
  {
    sub_1C98D260C(&v35, (uint64_t)" (was =", 7);
    v18 = (_QWORD *)std::ostream::operator<<();
    sub_1C98D260C(v18, (uint64_t)")", 1);
  }
  sub_1C98D260C(&v35, (uint64_t)" [", 2);
  v19 = strlen(a3);
  sub_1C98D260C(&v35, (uint64_t)a3, v19);
  sub_1C98D260C(&v35, (uint64_t)"]", 1);
  v20 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
  if ((v20 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
  {
    qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
    __cxa_guard_release(&qword_1ED52ACD0);
  }
  v21 = (id)qword_1ED52ACE0;
  v22 = os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
  v23 = (uint64_t *)MEMORY[0x1E0DE4F60];
  if (v22)
  {
    if ((v42 & 0x10) != 0)
    {
      v26 = *((_QWORD *)&v41 + 1);
      if (*((_QWORD *)&v41 + 1) < v39)
      {
        *((_QWORD *)&v41 + 1) = v39;
        v26 = v39;
      }
      v27 = (const void **)&v38;
    }
    else
    {
      if ((v42 & 8) == 0)
      {
        v24 = 0;
        HIBYTE(v34) = 0;
        v25 = __dst;
LABEL_22:
        *((_BYTE *)v25 + v24) = 0;
        v31 = __dst;
        if (v34 < 0)
          v31 = (void **)__dst[0];
        *(_DWORD *)buf = 136315138;
        v45 = v31;
        _os_log_impl(&dword_1C9870000, v21, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
        if (SHIBYTE(v34) < 0)
          operator delete(__dst[0]);
        goto LABEL_26;
      }
      v27 = (const void **)v37;
      v26 = v37[2];
    }
    v28 = *v27;
    v24 = v26 - (_QWORD)*v27;
    if (v24 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v24 >= 0x17)
    {
      v29 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v24 | 7) != 0x17)
        v29 = v24 | 7;
      v30 = v29 + 1;
      v25 = (void **)operator new(v29 + 1);
      __dst[1] = (void *)v24;
      v34 = v30 | 0x8000000000000000;
      __dst[0] = v25;
      v23 = (uint64_t *)MEMORY[0x1E0DE4F60];
    }
    else
    {
      HIBYTE(v34) = v26 - *(_BYTE *)v27;
      v25 = __dst;
      if (!v24)
        goto LABEL_21;
    }
    memmove(v25, v28, v24);
LABEL_21:
    v16 = MEMORY[0x1E0DE4FB8];
    goto LABEL_22;
  }
LABEL_26:

  v35 = *v23;
  *(uint64_t *)((char *)&v35 + *(_QWORD *)(v35 - 24)) = v23[3];
  v36 = v16 + 16;
  if (SBYTE7(v41) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1CAA44AB4](v43);
  *a4 = v9;
  return cva::DictionaryHandler::removeItem(*a1, a2);
}

void sub_1C98D2088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  uint64_t v30;

  v30 = MEMORY[0x1E0DE4FB8];
  a14 = *MEMORY[0x1E0DE4F60];
  *(uint64_t *)((char *)&a14 + *(_QWORD *)(a14 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  a15 = v30 + 16;
  if (a28 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1CAA44AB4](a10);
  _Unwind_Resume(a1);
}

uint64_t sub_1C98D212C(cva::DictionaryHandler **a1, const char *a2, const char *a3, float *a4)
{
  cva::DictionaryHandler *v8;
  float v9;
  float v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::ios_base *v16;
  uint64_t v17;
  uint64_t *v18;
  size_t v19;
  _QWORD *v20;
  size_t v21;
  unsigned __int8 v22;
  NSObject *v23;
  size_t v24;
  _BYTE *v25;
  unint64_t v26;
  const void **v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  void **v31;
  void *__p[2];
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[3];
  uint64_t v38;
  unint64_t v39;
  void *v40[2];
  __int128 v41;
  int v42;
  uint64_t v43[19];
  uint8_t buf[4];
  void **v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v8 = *a1;
  if (!cva::DictionaryHandler::hasKey(*a1, a2))
    return cva::DictionaryHandler::removeItem(*a1, a2);
  cva::DictionaryHandler::item(v8, a2);
  cva::ItemHandler::getValue<float>();
  v10 = v9;
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v35);
  v11 = *a4;
  v12 = MEMORY[0x1E0DE4FE0];
  v13 = MEMORY[0x1E0DE4FE0] + 64;
  v14 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v15 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v43[0] = MEMORY[0x1E0DE4FE0] + 64;
  v35 = v14;
  *(uint64_t *)((char *)&v35 + *(_QWORD *)(v14 - 24)) = v15;
  v16 = (std::ios_base *)((char *)&v35 + *(_QWORD *)(v35 - 24));
  std::ios_base::init(v16, &v36);
  v16[1].__vftable = 0;
  v16[1].__fmtflags_ = -1;
  v35 = v12 + 24;
  v43[0] = v13;
  std::streambuf::basic_streambuf();
  v17 = MEMORY[0x1E0DE4FB8];
  v36 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v40 = 0u;
  v41 = 0u;
  v42 = 16;
  v18 = (uint64_t *)MEMORY[0x1E0DE4F60];
  sub_1C98D260C(&v35, (uint64_t)"custom facekit setting: ", 24);
  v19 = strlen(a2);
  sub_1C98D260C(&v35, (uint64_t)a2, v19);
  sub_1C98D260C(&v35, (uint64_t)"=", 1);
  std::ostream::operator<<();
  if (v11 * 0.9999995 > v10 || v11 * 1.0000005 < v10)
  {
    sub_1C98D260C(&v35, (uint64_t)" (was =", 7);
    v20 = (_QWORD *)std::ostream::operator<<();
    sub_1C98D260C(v20, (uint64_t)")", 1);
  }
  sub_1C98D260C(&v35, (uint64_t)" [", 2);
  v21 = strlen(a3);
  sub_1C98D260C(&v35, (uint64_t)a3, v21);
  sub_1C98D260C(&v35, (uint64_t)"]", 1);
  v22 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
  if ((v22 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
  {
    qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
    __cxa_guard_release(&qword_1ED52ACD0);
  }
  v23 = (id)qword_1ED52ACE0;
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    if ((v42 & 0x10) != 0)
    {
      v26 = *((_QWORD *)&v41 + 1);
      if (*((_QWORD *)&v41 + 1) < v39)
      {
        *((_QWORD *)&v41 + 1) = v39;
        v26 = v39;
      }
      v27 = (const void **)&v38;
    }
    else
    {
      if ((v42 & 8) == 0)
      {
        v24 = 0;
        HIBYTE(v34) = 0;
        v25 = __p;
LABEL_23:
        v25[v24] = 0;
        v31 = __p;
        if (v34 < 0)
          v31 = (void **)__p[0];
        *(_DWORD *)buf = 136315138;
        v45 = v31;
        _os_log_impl(&dword_1C9870000, v23, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
        if (SHIBYTE(v34) < 0)
          operator delete(__p[0]);
        goto LABEL_27;
      }
      v27 = (const void **)v37;
      v26 = v37[2];
    }
    v28 = *v27;
    v24 = v26 - (_QWORD)*v27;
    if (v24 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v24 >= 0x17)
    {
      v29 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v24 | 7) != 0x17)
        v29 = v24 | 7;
      v30 = v29 + 1;
      v25 = operator new(v29 + 1);
      __p[1] = (void *)v24;
      v34 = v30 | 0x8000000000000000;
      __p[0] = v25;
    }
    else
    {
      HIBYTE(v34) = v26 - *(_BYTE *)v27;
      v25 = __p;
      if (!v24)
        goto LABEL_22;
    }
    memmove(v25, v28, v24);
    v18 = (uint64_t *)MEMORY[0x1E0DE4F60];
LABEL_22:
    v17 = MEMORY[0x1E0DE4FB8];
    goto LABEL_23;
  }
LABEL_27:

  v35 = *v18;
  *(uint64_t *)((char *)&v35 + *(_QWORD *)(v35 - 24)) = v18[3];
  v36 = v17 + 16;
  if (SBYTE7(v41) < 0)
    operator delete(v40[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1CAA44AB4](v43);
  *a4 = v10;
  return cva::DictionaryHandler::removeItem(*a1, a2);
}

void sub_1C98D2564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;
  void *v27;
  uint64_t v29;

  v29 = MEMORY[0x1E0DE4FB8];
  a12 = *MEMORY[0x1E0DE4F60];
  *(uint64_t *)((char *)&a12 + *(_QWORD *)(a12 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  a13 = v29 + 16;
  if (a26 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1CAA44AB4](v26);
  _Unwind_Resume(a1);
}

_QWORD *sub_1C98D260C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  size_t v16;
  std::locale::__imp *p_b;
  uint64_t v18;
  uint64_t v19;
  void *locale;
  uint64_t v21;
  uint64_t v22;
  _BYTE v24[16];
  std::locale __b;
  size_t v26;
  int64_t v27;

  MEMORY[0x1CAA448E0](v24, a1);
  if (v24[0])
  {
    v6 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *((_QWORD *)v6 + 5);
    v8 = *((_DWORD *)v6 + 2);
    v9 = *((_DWORD *)v6 + 36);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&__b, MEMORY[0x1E0DE4A90]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&__b);
      *((_DWORD *)v6 + 36) = v9;
    }
    v11 = a2 + a3;
    if ((v8 & 0xB0) == 0x20)
      v12 = a2 + a3;
    else
      v12 = a2;
    if (!v7)
      goto LABEL_30;
    v13 = *((_QWORD *)v6 + 3);
    v14 = v13 <= a3;
    v15 = v13 - a3;
    v16 = v14 ? 0 : v15;
    if (v12 - a2 >= 1
      && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 96))(v7, a2, v12 - a2) != v12 - a2)
    {
      goto LABEL_30;
    }
    if ((uint64_t)v16 >= 1)
    {
      if (v16 >= 0x7FFFFFFFFFFFFFF8)
        abort();
      if (v16 >= 0x17)
      {
        v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v16 | 7) != 0x17)
          v18 = v16 | 7;
        v19 = v18 + 1;
        p_b = (std::locale::__imp *)operator new(v18 + 1);
        v26 = v16;
        v27 = v19 | 0x8000000000000000;
        __b.__locale_ = p_b;
      }
      else
      {
        HIBYTE(v27) = v16;
        p_b = (std::locale::__imp *)&__b;
      }
      memset(p_b, v9, v16);
      *((_BYTE *)p_b + v16) = 0;
      if (v27 >= 0)
        locale = &__b;
      else
        locale = __b.__locale_;
      v21 = (*(uint64_t (**)(uint64_t, void *, size_t))(*(_QWORD *)v7 + 96))(v7, locale, v16);
      v22 = v21;
      if (SHIBYTE(v27) < 0)
      {
        operator delete(__b.__locale_);
        if (v22 != v16)
        {
LABEL_30:
          std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
          goto LABEL_31;
        }
      }
      else if (v21 != v16)
      {
        goto LABEL_30;
      }
    }
    if (v11 - v12 >= 1
      && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 96))(v7, v12, v11 - v12) != v11 - v12)
    {
      goto LABEL_30;
    }
    *((_QWORD *)v6 + 3) = 0;
  }
LABEL_31:
  MEMORY[0x1CAA448EC](v24);
  return a1;
}

void sub_1C98D2838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  MEMORY[0x1CAA448EC](&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_1C98D2878(cva::DictionaryHandler **a1, cva::DictionaryHandler *a2)
{
  std::string::size_type size;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  cva::DictionaryHandler *v7;
  int v8;
  unsigned __int8 v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unsigned __int8 v14;
  unint64_t *v15;
  unint64_t v16;
  unsigned __int8 v17;
  NSObject *v18;
  unsigned __int8 v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  int v25;
  size_t v26;
  unint64_t v27;
  __int128 *p_dst;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  std::string *p_p;
  __int128 *v33;
  __int128 *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  size_t v41;
  unsigned __int8 v42;
  NSObject *v43;
  int v44;
  int v45;
  size_t v46;
  unint64_t v47;
  __int128 *p_src;
  uint64_t v49;
  uint64_t v50;
  std::string *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  __int128 v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  void *v61;
  size_t v62;
  size_t v63;
  const void *v64;
  __int128 *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  __int128 *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::string::size_type v77;
  uint64_t v78;
  uint64_t v79;
  std::string::size_type v80;
  _QWORD *v81;
  std::string::size_type v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  void *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t *v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  _QWORD *v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  char *v113;
  _DWORD *v114;
  uint64_t v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  cva::DictionaryHandler **v124;
  const __CFDictionary *Dictionary;
  const __CFData *Value;
  const __CFData *v127;
  int Length;
  CFIndex v129;
  uint64_t v130;
  void *v131;
  unint64_t v132;
  unint64_t v133;
  int v134;
  size_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  int v139;
  int v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  _DWORD *v145;
  std::string::size_type *p_n;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  unsigned __int8 v150;
  NSObject *v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  unint64_t *v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  cva::ItemHandler *v160;
  const __CFData *v161;
  int v162;
  cva::ItemHandler *v163;
  const __CFData *v164;
  std::__shared_weak_count *v165;
  unsigned __int8 v166;
  NSObject *v167;
  unint64_t *v168;
  unint64_t v169;
  unint64_t v170;
  unsigned __int16 *v172;
  int v173;
  int v174;
  std::string::size_type *v176;
  unint64_t *v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  unsigned __int8 v181;
  NSObject *v182;
  NSObject *v183;
  const char *v184;
  NSObject *v185;
  uint32_t v186;
  int v187;
  NSObject *v188;
  uint64_t v189;
  BOOL v191;
  unint64_t *v192;
  uint64_t v193;
  uint64_t v194;
  size_t v195;
  _DWORD *v196;
  unint64_t v197;
  unint64_t v198;
  uint64_t v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  uint64_t v203;
  char *v204;
  char *v205;
  char *v206;
  uint64_t v207;
  int v208;
  uint64_t v209;
  uint64_t data_low;
  const double *v211;
  int v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  std::string::size_type v216;
  unint64_t *v217;
  unint64_t v218;
  uint64_t *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  _BYTE *v226;
  uint64_t v227;
  uint64_t *v228;
  uint64_t v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  unint64_t *v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t v248;
  char *v249;
  size_t v250;
  char *v251;
  void *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  BOOL v259;
  unint64_t v260;
  unint64_t v261;
  const double *v262;
  float *v263;
  unint64_t v264;
  const double *v265;
  unint64_t v266;
  float *v267;
  double *v268;
  double v269;
  float v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  unint64_t v278;
  BOOL v279;
  unint64_t v280;
  uint64_t v281;
  uint64_t v282;
  unint64_t v283;
  char *v284;
  char *v285;
  size_t v286;
  char *v287;
  unint64_t v288;
  const double *v289;
  float *v290;
  unint64_t v291;
  const double *v292;
  unint64_t v293;
  float *v294;
  double *v295;
  double v296;
  float v297;
  uint64_t v298;
  uint64_t v299;
  const double *v300;
  unint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  unint64_t v305;
  uint64_t v306;
  int v307;
  int data;
  uint64_t v309;
  uint64_t v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  unint64_t v314;
  uint64_t v315;
  unint64_t v316;
  char *v317;
  char *v318;
  unint64_t v319;
  unint64_t v320;
  uint64_t v321;
  const double *v322;
  float *v323;
  unint64_t v324;
  const double *v325;
  unint64_t v326;
  float32x2_t *v327;
  float64x2_t *v328;
  float64x2_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  unint64_t v333;
  float *v334;
  float *v335;
  size_t v336;
  char *v337;
  unint64_t v338;
  const double *v339;
  float *v340;
  unint64_t v341;
  const double *v342;
  unint64_t v343;
  float *v344;
  double *v345;
  double v346;
  float v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  unint64_t v351;
  BOOL v352;
  unint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  void *v358;
  void *v359;
  uint64_t v360;
  int v361;
  uint64_t v365;
  float v366;
  uint64_t v367;
  float v368;
  uint64_t v369;
  float v370;
  uint64_t v371;
  float v372;
  uint64_t v373;
  float v374;
  uint64_t v375;
  float v376;
  uint64_t v377;
  float v378;
  uint64_t **v379;
  int v380;
  uint64_t v381;
  unsigned int i;
  uint64_t v383;
  int v384;
  int v385;
  std::string *v386;
  int v387;
  uint64_t v388;
  unsigned int j;
  std::string::size_type v390;
  __int128 v391;
  uint64_t v392;
  int v393;
  uint64_t v394;
  uint64_t **v395;
  int v396;
  uint64_t v397;
  int v398;
  char v399;
  char *v400;
  char v401;
  size_t v402;
  std::string::size_type v403;
  uint64_t v404;
  char *v405;
  std::__shared_weak_count *v406;
  std::__shared_weak_count *v407;
  float *v408;
  cva::DictionaryHandler **v409;
  int hasKey;
  char *v411;
  const double *v412;
  int v413;
  const double *v414;
  uint64_t v415;
  std::string __p;
  std::string::size_type __n;
  __int128 v418;
  uint64_t v419;
  uint8_t v420[8];
  size_t v421;
  uint64_t v422;
  std::string *v423;
  std::string v424;
  _BYTE v425[56];
  std::string v426[5];
  _DWORD *v427;
  std::__shared_weak_count *v428;
  void *v429;
  uint64_t v430;
  unsigned __int8 v431;
  __int128 v432;
  std::string v433;
  int v434;
  std::string v435;
  unsigned int v436;
  std::string v437;
  unsigned int v438;
  __int128 __src;
  unint64_t v440;
  __int128 v441;
  uint64_t v442;
  unsigned int v443;
  _BYTE buf[32];
  __int128 v445;
  __int128 v446;
  __int128 v447;
  __int128 v448;
  _QWORD v449[6];
  __int128 v450;
  __int128 v451;
  __int128 v452;
  _OWORD v453[3];
  uint64_t *v454;
  _QWORD v455[2];
  uint64_t *v456;
  _QWORD v457[2];
  uint64_t *v458;
  _QWORD v459[2];
  uint64_t *v460;
  _QWORD v461[2];
  __int128 v462;
  __int128 v463;
  __int128 v464;
  __int128 v465;
  __int128 v466;
  __int128 v467;
  __int128 v468;
  uint64_t v469;
  _QWORD v470[21];
  char v471;
  __int128 __dst;
  int64_t v473;
  uint64_t v474;
  CFRange v475;
  float64x2x2_t v476;
  float64x2x2_t v477;
  float32x4x2_t v478;
  float64x2x3_t v479;
  float64x2x3_t v480;
  float64x2x3_t v481;
  float32x4x3_t v482;
  float32x4x3_t v483;
  float32x4x3_t v484;
  float64x2x3_t v485;
  float64x2x3_t v486;
  float64x2x3_t v487;

  v474 = *MEMORY[0x1E0C80C00];
  kdebug_trace();
  sub_1C98FE4FC(&__p, "resources_facekit/");
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size)
  {
    v5 = (std::__shared_weak_count *)operator new(0x28uLL);
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__shared_weak_owners_ = 0;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295758;
    v7 = (cva::DictionaryHandler *)&v5[1];
    cva::DictionaryHandler::DictionaryHandler((cva::DictionaryHandler *)&v5[1]);
    if (cva::DictionaryHandler::hasKey(a2, CFSTR("legacy_blendshape_names"))
      && (cva::DictionaryHandler::item(a2, CFSTR("legacy_blendshape_names")),
          v8 = cva::ItemHandler::getValue<BOOL>(),
          cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf),
          v8))
    {
      v9 = atomic_load((unsigned __int8 *)&qword_1EF9212B0);
      if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_1EF9212B0))
      {
        sub_1C98D9840();
        __cxa_guard_release(&qword_1EF9212B0);
      }
      v10 = *(std::__shared_weak_count **)algn_1EF9212A8;
      if (*(_QWORD *)algn_1EF9212A8)
      {
        v11 = (unint64_t *)(*(_QWORD *)algn_1EF9212A8 + 8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
        cva::ItemHandler::ItemHandler();
        cva::DictionaryHandler::setItem(v7, CFSTR("blendshape_names"), (const cva::ItemHandler *)buf);
        cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
        do
          v13 = __ldaxr(v11);
        while (__stlxr(v13 - 1, v11));
        goto LABEL_19;
      }
    }
    else
    {
      v14 = atomic_load((unsigned __int8 *)&qword_1ED52AD78);
      if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52AD78))
      {
        sub_1C98D9758();
        __cxa_guard_release(&qword_1ED52AD78);
      }
      v10 = *(std::__shared_weak_count **)algn_1ED52AD88;
      if (*(_QWORD *)algn_1ED52AD88)
      {
        v15 = (unint64_t *)(*(_QWORD *)algn_1ED52AD88 + 8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
        cva::ItemHandler::ItemHandler();
        cva::DictionaryHandler::setItem(v7, CFSTR("blendshape_names"), (const cva::ItemHandler *)buf);
        cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
        do
          v13 = __ldaxr(v15);
        while (__stlxr(v13 - 1, v15));
LABEL_19:
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
LABEL_27:
        v19 = atomic_load((unsigned __int8 *)&qword_1ED52AD70);
        if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52AD70))
        {
          sub_1C98DBEA8((cva::ArrayHandler **)buf);
          qword_1ED52AD90 = *(_QWORD *)buf;
          qword_1ED52AD98 = *(_QWORD *)&buf[8];
          *(_QWORD *)&buf[8] = 0;
          *(_QWORD *)buf = 0;
          sub_1C987C140((uint64_t)buf);
          __cxa_guard_release(&qword_1ED52AD70);
        }
        v20 = (std::__shared_weak_count *)qword_1ED52AD98;
        if (qword_1ED52AD98)
        {
          v21 = (unint64_t *)(qword_1ED52AD98 + 8);
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
          cva::ItemHandler::ItemHandler();
          cva::DictionaryHandler::setItem(v7, CFSTR("landmark_names"), (const cva::ItemHandler *)buf);
          cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
          do
            v23 = __ldaxr(v21);
          while (__stlxr(v23 - 1, v21));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        else
        {
          cva::ItemHandler::ItemHandler();
          cva::DictionaryHandler::setItem(v7, CFSTR("landmark_names"), (const cva::ItemHandler *)buf);
          cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
        }
        if (!cva::DictionaryHandler::hasKey(a2, CFSTR("add_identity_model_uuid")))
          goto LABEL_86;
        cva::DictionaryHandler::item(a2, CFSTR("add_identity_model_uuid"));
        v24 = cva::ItemHandler::getValue<BOOL>();
        cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
        if (!v24)
          goto LABEL_86;
        v25 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v26 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v26 = __p.__r_.__value_.__l.__size_;
        v27 = v26 + 10;
        if (v26 + 10 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_657;
        if (v27 >= 0x17)
        {
          v29 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v27 | 7) != 0x17)
            v29 = v27 | 7;
          v30 = v29 + 1;
          p_dst = (__int128 *)operator new(v29 + 1);
          v31 = v30 | 0x8000000000000000;
          v7 = (cva::DictionaryHandler *)&v5[1];
          *((_QWORD *)&__dst + 1) = v26 + 10;
          v473 = v31;
          *(_QWORD *)&__dst = p_dst;
        }
        else
        {
          v473 = 0;
          __dst = 0uLL;
          p_dst = &__dst;
          HIBYTE(v473) = v26 + 10;
          if (!v26)
            goto LABEL_52;
        }
        if (v25 >= 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        memmove(p_dst, p_p, v26);
LABEL_52:
        strcpy((char *)p_dst + v26, "tensor.bin");
        v421 = 0;
        v422 = 0;
        *(_QWORD *)v420 = 0;
        LODWORD(v424.__r_.__value_.__l.__data_) = 1;
        sub_1C991E700((uint64_t)buf, &__dst, &v424);
        if ((_QWORD)v452)
        {
          if (v473 >= 0)
            v33 = &__dst;
          else
            LOBYTE(v33) = __dst;
          sub_1C990C5A4((uint64_t *)&v441, (uint64_t)buf, (char)v33, 0, (uint64_t)v420);
        }
        else
        {
          sub_1C99072C4(&v441);
          if (v473 >= 0)
            v34 = &__dst;
          else
            LOBYTE(v34) = __dst;
          sub_1C9907EC4(&v424, &v441, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/geometry/src/three_d/identitytensor.cpp", 343, "couldn't open %s", (char)v34);
          sub_1C9909318((uint64_t)&v424);
          v35 = (std::__shared_weak_count *)*((_QWORD *)&v441 + 1);
          if (*((_QWORD *)&v441 + 1))
          {
            v36 = (unint64_t *)(*((_QWORD *)&v441 + 1) + 8);
            do
              v37 = __ldaxr(v36);
            while (__stlxr(v37 - 1, v36));
            if (!v37)
            {
              ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
              std::__shared_weak_count::__release_weak(v35);
            }
          }
          v441 = 0uLL;
        }
        *(_QWORD *)buf = off_1E8294E00;
        if (v471 < 0)
          operator delete((void *)v470[19]);
        v470[0] = off_1E8295690;
        *(_QWORD *)&v445 = &off_1E8295640;
        *(_QWORD *)&v446 = off_1E8295668;
        MEMORY[0x1CAA44880]((char *)&v446 + 8);
        std::iostream::~basic_iostream();
        MEMORY[0x1CAA44AB4](v470);
        v38 = (std::__shared_weak_count *)*((_QWORD *)&v441 + 1);
        if (*((_QWORD *)&v441 + 1))
        {
          v39 = (unint64_t *)(*((_QWORD *)&v441 + 1) + 8);
          do
            v40 = __ldaxr(v39);
          while (__stlxr(v40 - 1, v39));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
        if (SHIBYTE(v473) < 0)
          operator delete((void *)__dst);
        if (v422 >= 0)
          v41 = HIBYTE(v422);
        else
          v41 = v421;
        if (v41)
        {
          cva::ItemHandler::createValue<std::string>();
          cva::DictionaryHandler::setItem(v7, CFSTR("identity_model_uuid"), (const cva::ItemHandler *)buf);
          cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
          if (SHIBYTE(v422) < 0)
            goto LABEL_80;
LABEL_85:
          if (!v41)
            goto LABEL_340;
LABEL_86:
          if (cva::DictionaryHandler::hasKey(a2, CFSTR("add_mesh")))
          {
            cva::DictionaryHandler::item(a2, CFSTR("add_mesh"));
            v44 = cva::ItemHandler::getValue<BOOL>();
            cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
            if (!v44)
              goto LABEL_318;
          }
          v409 = a1;
          if (cva::DictionaryHandler::hasKey(a2, CFSTR("hole_filled_mesh")))
          {
            cva::DictionaryHandler::item(a2, CFSTR("hole_filled_mesh"));
            v413 = cva::ItemHandler::getValue<BOOL>();
            cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
          }
          else
          {
            v413 = 0;
          }
          hasKey = cva::DictionaryHandler::hasKey(a2, CFSTR("blendshape_activations"));
          v45 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v46 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            v46 = __p.__r_.__value_.__l.__size_;
          v47 = v46 + 21;
          if (v46 + 21 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_657;
          if (v47 >= 0x17)
          {
            v49 = (v47 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v47 | 7) != 0x17)
              v49 = v47 | 7;
            v50 = v49 + 1;
            p_src = (__int128 *)operator new(v49 + 1);
            v440 = v50 | 0x8000000000000000;
            *(_QWORD *)&__src = p_src;
            *((_QWORD *)&__src + 1) = v46 + 21;
          }
          else
          {
            v440 = 0;
            __src = 0uLL;
            p_src = &__src;
            HIBYTE(v440) = v46 + 21;
            if (!v46)
              goto LABEL_105;
          }
          if (v45 >= 0)
            v51 = &__p;
          else
            v51 = (std::string *)__p.__r_.__value_.__r.__words[0];
          memmove(p_src, v51, v46);
LABEL_105:
          strcpy((char *)p_src + v46, "facekit_resources.dat");
          v52 = operator new();
          v53 = v52;
          if (SHIBYTE(v440) < 0)
          {
            sub_1C987D148((_BYTE *)v52, (void *)__src, *((unint64_t *)&__src + 1));
          }
          else
          {
            *(_OWORD *)v52 = __src;
            *(_QWORD *)(v52 + 16) = v440;
          }
          *(_QWORD *)(v53 + 24) = 0;
          *(_QWORD *)(v53 + 40) = 0;
          *(_QWORD *)(v53 + 32) = v53 + 40;
          *(_QWORD *)(v53 + 48) = 0;
          sub_1C991C478((uint64_t *)&v437, v53);
          v54 = v437.__r_.__value_.__r.__words[0];
          if (!v437.__r_.__value_.__r.__words[0])
            goto LABEL_222;
          if (!*(_QWORD *)(v53 + 24))
          {
            if (((*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v437.__r_.__value_.__l.__data_ + 56))(v437.__r_.__value_.__r.__words[0]) & 1) == 0)
            {
              sub_1C99072C4(&v424);
              sub_1C9907EC4(buf, &v424, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/utils/src/FilePack.cpp", 125, "assert %s failed. The device should be of type fsFileDevice!%s", (char)"0");
              sub_1C9909318((uint64_t)buf);
              v58 = (std::__shared_weak_count *)v424.__r_.__value_.__l.__size_;
              if (v424.__r_.__value_.__l.__size_)
              {
                v59 = (unint64_t *)(v424.__r_.__value_.__l.__size_ + 8);
                do
                  v60 = __ldaxr(v59);
                while (__stlxr(v60 - 1, v59));
                if (!v60)
                {
                  ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                  std::__shared_weak_count::__release_weak(v58);
                }
              }
LABEL_222:
              v110 = (std::__shared_weak_count *)v437.__r_.__value_.__l.__size_;
              if (v437.__r_.__value_.__l.__size_)
              {
                v111 = (unint64_t *)(v437.__r_.__value_.__l.__size_ + 8);
                do
                  v112 = __ldaxr(v111);
                while (__stlxr(v112 - 1, v111));
                if (!v112)
                {
                  ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
                  std::__shared_weak_count::__release_weak(v110);
                }
              }
              v419 = v53;
              if (SHIBYTE(v440) < 0)
                operator delete((void *)__src);
              v420[0] = 0;
              LOBYTE(v423) = 0;
              v7 = (cva::DictionaryHandler *)&v5[1];
              if ((v413 ^ 1 | hasKey) != 1)
              {
                v121 = 0;
                v122 = 0;
                a1 = v409;
                goto LABEL_268;
              }
              v113 = (char *)operator new(0x19uLL);
              *(_QWORD *)buf = v113;
              *(_OWORD *)&buf[8] = xmmword_1C9927570;
              strcpy(v113, "#/templateV6/jenny.lite");
              sub_1C991C9BC((uint64_t *)&v441, v53, (const void **)buf);
              operator delete(v113);
              v114 = (_DWORD *)v441;
              if (!(_QWORD)v441)
              {
                v122 = 0;
                a1 = v409;
                goto LABEL_298;
              }
              v424.__r_.__value_.__s.__data_[16] = 0;
              v424.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E8295030;
              v424.__r_.__value_.__l.__size_ = v441;
              LODWORD(__src) = 0;
              *(_DWORD *)buf = 0;
              _ZF = (*(uint64_t (**)(_QWORD, _BYTE *, uint64_t))(*(_QWORD *)v441 + 88))(v441, buf, 4) == 4
                 && *(_DWORD *)buf == 472608823;
              if (!_ZF || v114[2] == 2)
                goto LABEL_248;
              v116 = (*(uint64_t (**)(_DWORD *, _BYTE *, uint64_t))(*(_QWORD *)v114 + 144))(v114, buf, 4);
              if (v116 >= 1)
                *((_QWORD *)v114 + 2) += v116;
              if (v114[2] == 2
                || (v117 = (*(uint64_t (**)(_DWORD *, __int128 *, uint64_t))(*(_QWORD *)v114 + 144))(v114, &__src, 4), v117 < 1)|| (*((_QWORD *)v114 + 2) += v117, v117 != 4))
              {
LABEL_248:
                sub_1C99072C4(&__dst);
                sub_1C9907EC4(buf, &__dst, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/geometry/src/three_d/trackingriglite.cpp", 65, "couldn't read rig: bad file header", v399);
                sub_1C9909318((uint64_t)buf);
                v118 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
                a1 = v409;
                if (*((_QWORD *)&__dst + 1))
                {
                  v123 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
                  do
                    v120 = __ldaxr(v123);
                  while (__stlxr(v120 - 1, v123));
                  goto LABEL_251;
                }
LABEL_253:
                v122 = 0;
                v121 = 0;
                goto LABEL_254;
              }
              if ((_DWORD)__src)
              {
                sub_1C99072C4(&__dst);
                sub_1C9907EC4(buf, &__dst, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/geometry/src/three_d/trackingriglite.cpp", 70, "couldn't read rig: unexpected version %d", __src);
                sub_1C9909318((uint64_t)buf);
                v118 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
                a1 = v409;
                if (*((_QWORD *)&__dst + 1))
                {
                  v119 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
                  do
                    v120 = __ldaxr(v119);
                  while (__stlxr(v120 - 1, v119));
LABEL_251:
                  if (!v120)
                  {
                    ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
                    std::__shared_weak_count::__release_weak(v118);
                  }
                  goto LABEL_253;
                }
                goto LABEL_253;
              }
              v121 = operator new();
              *(_OWORD *)v121 = 0u;
              *(_OWORD *)(v121 + 16) = 0u;
              *(_OWORD *)(v121 + 32) = 0u;
              *(_OWORD *)(v121 + 48) = 0u;
              *(_OWORD *)(v121 + 64) = 0u;
              *(_OWORD *)(v121 + 80) = 0u;
              *(_OWORD *)(v121 + 96) = 0u;
              *(_OWORD *)(v121 + 112) = 0u;
              *(_OWORD *)(v121 + 128) = 0u;
              *(_OWORD *)(v121 + 144) = 0u;
              *(_OWORD *)(v121 + 160) = 0u;
              *(_OWORD *)(v121 + 176) = 0u;
              *(_OWORD *)(v121 + 192) = 0u;
              *(_OWORD *)(v121 + 208) = 0u;
              *(_OWORD *)(v121 + 224) = 0u;
              *(_OWORD *)(v121 + 240) = 0u;
              *(_QWORD *)(v121 + 240) = v121 + 248;
              *(_QWORD *)(v121 + 272) = 0;
              *(_QWORD *)(v121 + 280) = 0;
              *(_QWORD *)(v121 + 256) = 0;
              *(_QWORD *)(v121 + 264) = v121 + 272;
              *(_QWORD *)(v121 + 288) = v121 + 296;
              *(_QWORD *)(v121 + 296) = 0;
              *(_QWORD *)(v121 + 320) = 0;
              *(_QWORD *)(v121 + 328) = 0;
              *(_QWORD *)(v121 + 304) = 0;
              *(_QWORD *)(v121 + 312) = v121 + 320;
              *(_OWORD *)(v121 + 336) = 0u;
              *(_OWORD *)(v121 + 352) = 0u;
              *(_OWORD *)(v121 + 368) = 0u;
              *(_OWORD *)(v121 + 384) = 0u;
              *(_OWORD *)(v121 + 400) = 0u;
              *(_OWORD *)(v121 + 416) = 0u;
              *(_OWORD *)(v121 + 432) = 0u;
              *(_OWORD *)(v121 + 448) = 0u;
              *(_OWORD *)(v121 + 464) = 0u;
              v122 = (std::__shared_weak_count *)operator new();
              v122->__shared_owners_ = 0;
              v192 = (unint64_t *)&v122->__shared_owners_;
              v122->__vftable = (std::__shared_weak_count_vtbl *)&off_1E82960C0;
              v122->__shared_weak_owners_ = 0;
              v122[1].__vftable = (std::__shared_weak_count_vtbl *)v121;
              *(_DWORD *)buf = 0;
              if (v114[2] == 2)
                goto LABEL_602;
              v193 = (*(uint64_t (**)(_DWORD *, _BYTE *, uint64_t))(*(_QWORD *)v114 + 144))(v114, buf, 4);
              if (v193 < 1)
                goto LABEL_602;
              *((_QWORD *)v114 + 2) += v193;
              if (v193 != 4)
                goto LABEL_602;
              v194 = *(unsigned int *)buf;
              v195 = *(_QWORD *)v121;
              v196 = *(_DWORD **)(v121 + 8);
              v197 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v196 - *(_QWORD *)v121) >> 2);
              v198 = *(unsigned int *)buf - v197;
              if (*(unsigned int *)buf <= v197)
              {
                if (*(unsigned int *)buf < v197)
                  *(_QWORD *)(v121 + 8) = v195 + 12 * *(unsigned int *)buf;
              }
              else
              {
                v199 = *(_QWORD *)(v121 + 16);
                v404 = *(unsigned int *)buf;
                if (0xAAAAAAAAAAAAAAABLL * ((v199 - (uint64_t)v196) >> 2) >= v198)
                {
                  bzero(v196, 12 * ((12 * v198 - 12) / 0xC) + 12);
                  *(_QWORD *)(v121 + 8) = &v196[3 * ((12 * v198 - 12) / 0xC) + 3];
                }
                else
                {
                  v407 = v122;
                  v200 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v199 - v195) >> 2);
                  v201 = 0x5555555555555556 * ((uint64_t)(v199 - v195) >> 2);
                  if (v201 <= *(unsigned int *)buf)
                    v201 = *(unsigned int *)buf;
                  if (v200 >= 0xAAAAAAAAAAAAAAALL)
                    v202 = 0x1555555555555555;
                  else
                    v202 = v201;
                  v402 = *(_QWORD *)v121;
                  if (v202 > 0x1555555555555555)
                    sub_1C9899D30();
                  v203 = 12 * v202;
                  v204 = (char *)operator new(12 * v202);
                  v205 = &v204[12 * v197];
                  v400 = &v204[v203];
                  bzero(v205, 12 * ((12 * v198 - 12) / 0xC) + 12);
                  v206 = &v205[12 * ((12 * v198 - 12) / 0xC) + 12];
                  if (v196 != (_DWORD *)v402)
                  {
                    do
                    {
                      v207 = *(_QWORD *)(v196 - 3);
                      v196 -= 3;
                      v208 = v196[2];
                      *(_QWORD *)(v205 - 12) = v207;
                      v205 -= 12;
                      *((_DWORD *)v205 + 2) = v208;
                    }
                    while (v196 != (_DWORD *)v402);
                    v196 = *(_DWORD **)v121;
                  }
                  *(_QWORD *)v121 = v205;
                  *(_QWORD *)(v121 + 8) = v206;
                  *(_QWORD *)(v121 + 16) = v400;
                  v122 = v407;
                  if (v196)
                    operator delete(v196);
                }
                v195 = *(_QWORD *)v121;
                v114 = (_DWORD *)v424.__r_.__value_.__l.__size_;
                v194 = v404;
              }
              if (v114[2] == 2)
                goto LABEL_602;
              v253 = 12 * v194;
              v254 = (*(uint64_t (**)(_DWORD *, size_t, uint64_t))(*(_QWORD *)v114 + 144))(v114, v195, 12 * v194);
              if (v254 >= 1)
                *((_QWORD *)v114 + 2) += v254;
              if (v254 != v253)
                goto LABEL_602;
              *(_DWORD *)buf = 0;
              if (v114[2] == 2)
                goto LABEL_602;
              v255 = (*(uint64_t (**)(_DWORD *, _BYTE *, uint64_t))(*(_QWORD *)v114 + 144))(v114, buf, 4);
              if (v255 < 1)
                goto LABEL_602;
              *((_QWORD *)v114 + 2) += v255;
              if (v255 != 4)
                goto LABEL_602;
              v256 = *(unsigned int *)buf;
              v257 = *(_QWORD *)(v121 + 96);
              v258 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v121 + 104) - v257) >> 2);
              v259 = *(unsigned int *)buf >= v258;
              v260 = *(unsigned int *)buf - v258;
              if (v260 != 0 && v259)
              {
                sub_1C98FDE24(v121 + 96, v260);
                v257 = *(_QWORD *)(v121 + 96);
              }
              else if (!v259)
              {
                *(_QWORD *)(v121 + 104) = v257 + 12 * *(unsigned int *)buf;
              }
              if (v114[2] == 2)
                goto LABEL_602;
              v273 = 12 * v256;
              v274 = (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(*(_QWORD *)v114 + 144))(v114, v257, v273);
              if (v274 >= 1)
                *((_QWORD *)v114 + 2) += v274;
              if (v274 != v273)
                goto LABEL_602;
              *(_DWORD *)buf = 0;
              if (v114[2] == 2)
                goto LABEL_602;
              v275 = (*(uint64_t (**)(_DWORD *, _BYTE *, uint64_t))(*(_QWORD *)v114 + 144))(v114, buf, 4);
              if (v275 < 1)
                goto LABEL_602;
              *((_QWORD *)v114 + 2) += v275;
              if (v275 != 4)
                goto LABEL_602;
              v276 = *(unsigned int *)buf;
              v277 = *(_QWORD *)(v121 + 168);
              v278 = (*(_QWORD *)(v121 + 176) - v277) >> 4;
              v279 = *(unsigned int *)buf >= v278;
              v280 = *(unsigned int *)buf - v278;
              if (v280 != 0 && v279)
              {
                sub_1C98FDD00((char **)(v121 + 168), v280);
                v277 = *(_QWORD *)(v121 + 168);
              }
              else if (!v279)
              {
                *(_QWORD *)(v121 + 176) = v277 + 16 * *(unsigned int *)buf;
              }
              if (v114[2] == 2)
                goto LABEL_602;
              v302 = 16 * v276;
              v303 = (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(*(_QWORD *)v114 + 144))(v114, v277, v302);
              if (v303 >= 1)
                *((_QWORD *)v114 + 2) += v303;
              if (v303 == v302 && sub_1C990DDB4((uint64_t)&v424, (char **)(v121 + 48)))
              {
                v304 = *(_QWORD *)(v121 + 56) - *(_QWORD *)(v121 + 48);
                v305 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v121 + 8) - *(_QWORD *)v121) >> 2);
                LODWORD(v437.__r_.__value_.__l.__data_) = 0;
                if (v305 == v304 >> 3 && v114[2] != 2)
                {
                  v306 = (*(uint64_t (**)(_DWORD *, std::string *, uint64_t))(*(_QWORD *)v114 + 144))(v114, &v437, 4);
                  if (v306 >= 1)
                  {
                    *((_QWORD *)v114 + 2) += v306;
                    if (v306 == 4)
                    {
                      data = (int)v437.__r_.__value_.__l.__data_;
                      if (hasKey)
                      {
                        sub_1C990C258(v121 + 456, (int)v437.__r_.__value_.__l.__data_, (*(_QWORD *)(v121 + 8) - *(_QWORD *)v121) >> 2);
                        if (v114[2] == 2)
                          goto LABEL_601;
                        v309 = 4 * (*(_DWORD *)(v121 + 476) * *(_DWORD *)(v121 + 472));
                        v310 = (*(uint64_t (**)(_DWORD *, _QWORD, uint64_t))(*(_QWORD *)v114 + 144))(v114, *(_QWORD *)(v121 + 456), v309);
                        if (v310 >= 1)
                          *((_QWORD *)v114 + 2) += v310;
                        if (v310 != v309
                          || *(_DWORD *)(v121 + 476) != ((*(_QWORD *)(v121 + 8) - *(_QWORD *)v121) >> 2))
                        {
                          goto LABEL_601;
                        }
                      }
                      else if ((*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v114 + 80))(v114, 12* LODWORD(v437.__r_.__value_.__l.__data_)* -1431655765* ((*(_QWORD *)(v121 + 8) - *(_QWORD *)v121) >> 2)) != 4 * (3 * data * v307))
                      {
LABEL_601:
                        sub_1C99072C4(&__dst);
                        sub_1C9907EC4(buf, &__dst, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/geometry/src/three_d/trackingriglite.cpp", 107, "couldn't read rig: corrupt data", v399);
                        sub_1C9909318((uint64_t)buf);
                        sub_1C987C140((uint64_t)&__dst);
                        a1 = v409;
                        do
LABEL_608:
                          v314 = __ldaxr(v192);
                        while (__stlxr(v314 - 1, v192));
                        if (!v314)
                        {
                          ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
                          std::__shared_weak_count::__release_weak(v122);
                        }
                        v122 = 0;
                        v121 = 0;
                        goto LABEL_254;
                      }
                      a1 = v409;
LABEL_254:
                      if (v424.__r_.__value_.__s.__data_[16] && v424.__r_.__value_.__l.__size_)
                        (*(void (**)(std::string::size_type))(*(_QWORD *)v424.__r_.__value_.__l.__size_ + 8))(v424.__r_.__value_.__l.__size_);
                      if (v121)
                      {
                        if (!hasKey)
                          goto LABEL_262;
                        v406 = v122;
                        v124 = a1;
                        Dictionary = (const __CFDictionary *)cva::DictionaryHandler::getDictionary(a2);
                        Value = (const __CFData *)CFDictionaryGetValue(Dictionary, CFSTR("blendshape_activations"));
                        if (Value)
                        {
                          v127 = Value;
                          Length = CFDataGetLength(Value);
                          v129 = Length;
                          v130 = *(int *)(v121 + 472);
                          if (Length == 4 * v130)
                          {
                            *(_QWORD *)&__dst = 0;
                            malloc_type_posix_memalign((void **)&__dst, 0x20uLL, (4 * v130 + 31) & 0x7FFFFFFE0, 0x49090899uLL);
                            v131 = (void *)__dst;
                            v475.location = 0;
                            v475.length = v129;
                            CFDataGetBytes(v127, v475, (UInt8 *)__dst);
                            v132 = *(_QWORD *)(v121 + 8) - *(_QWORD *)v121;
                            v133 = v132 >> 2;
                            v134 = -1431655765 * (v132 >> 2);
                            v135 = ((v132 & 0x3FFFFFFFCLL) + 31) & 0x7FFFFFFE0;
                            v421 = v135 >> 2;
                            *(_QWORD *)&__dst = 0;
                            malloc_type_posix_memalign((void **)&__dst, 0x20uLL, v135, 0x49090899uLL);
                            *(_QWORD *)v420 = __dst;
                            LODWORD(v422) = v134;
                            LOBYTE(v423) = 1;
                            *(_DWORD *)buf = v130;
                            *(_QWORD *)&buf[8] = v131;
                            *(_QWORD *)&buf[16] = v130;
                            LODWORD(v424.__r_.__value_.__l.__data_) = v133;
                            v424.__r_.__value_.__l.__size_ = __dst;
                            v424.__r_.__value_.__r.__words[2] = v133;
                            sub_1C990E07C(v121, buf, (unsigned int *)&v424);
                            free(v131);
                            a1 = v124;
                            v122 = v406;
LABEL_262:
                            v136 = (std::__shared_weak_count *)*((_QWORD *)&v441 + 1);
                            if (*((_QWORD *)&v441 + 1))
                            {
                              v137 = (unint64_t *)(*((_QWORD *)&v441 + 1) + 8);
                              do
                                v138 = __ldaxr(v137);
                              while (__stlxr(v138 - 1, v137));
                              if (!v138)
                              {
                                ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
                                std::__shared_weak_count::__release_weak(v136);
                              }
                            }
                            v7 = (cva::DictionaryHandler *)&v5[1];
LABEL_268:
                            if (cva::DictionaryHandler::hasKey(a2, CFSTR("triangulated_mesh")))
                            {
                              cva::DictionaryHandler::item(a2, CFSTR("triangulated_mesh"));
                              v139 = cva::ItemHandler::getValue<BOOL>();
                              cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
                              if (!v413)
                                goto LABEL_270;
                            }
                            else
                            {
                              v139 = 0;
                              if (!v413)
                              {
LABEL_270:
                                sub_1C98D674C(v121, (uint64_t)v420, v139, v7);
                                v140 = 1;
                                if (!(_BYTE)v423)
                                  goto LABEL_308;
                                goto LABEL_307;
                              }
                            }
                            memset(buf, 0, sizeof(buf));
                            v445 = 0u;
                            v446 = 0u;
                            v447 = 0u;
                            v448 = 0u;
                            memset(v449, 0, sizeof(v449));
                            v450 = 0u;
                            v451 = 0u;
                            v452 = 0u;
                            memset(v453, 0, sizeof(v453));
                            v455[0] = 0;
                            v454 = v455;
                            v457[1] = 0;
                            v457[0] = 0;
                            v455[1] = 0;
                            v456 = v457;
                            v459[0] = 0;
                            v458 = v459;
                            v461[0] = 0;
                            v461[1] = 0;
                            v459[1] = 0;
                            v460 = v461;
                            v462 = 0u;
                            v463 = 0u;
                            v464 = 0u;
                            v465 = 0u;
                            v466 = 0u;
                            v467 = 0u;
                            v468 = 0u;
                            v469 = 0;
                            __n = (std::string::size_type)operator new(0x30uLL);
                            v418 = xmmword_1C99278A0;
                            strcpy((char *)__n, "#/templateV6/jenny/meshes/jenny_hole_filled.qm");
                            cva::Path::Path();
                            v141 = (char *)&v429;
                            cva::Path::extension((cva::Path *)&v424);
                            cva::Path::~Path((cva::Path *)&v424);
                            if ((v431 & 0x80u) == 0)
                              v142 = (char *)&v429 + v431;
                            else
                              v142 = (char *)v429 + v430;
                            if ((v431 & 0x80u) != 0)
                              v141 = (char *)v429;
                            for (; v141 != v142; ++v141)
                              *v141 = __tolower(*v141);
                            sub_1C991C9BC((uint64_t *)&v427, v419, (const void **)&__n);
                            v143 = (uint64_t)v427;
                            if (!v427)
                            {
                              sub_1C99072C4(&__dst);
                              if (v418 >= 0)
                                p_n = &__n;
                              else
                                LOBYTE(p_n) = __n;
                              sub_1C9907EC4(&v424, &__dst, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/geometry/src/three_d/quad_mesh.cpp", 1974, "file does not exist %s", (char)p_n);
                              sub_1C9909318((uint64_t)&v424);
                              v147 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
                              if (!*((_QWORD *)&__dst + 1))
                              {
LABEL_360:
                                v140 = 0;
                                goto LABEL_361;
                              }
                              v148 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
                              do
                                v149 = __ldaxr(v148);
                              while (__stlxr(v149 - 1, v148));
LABEL_358:
                              if (!v149)
                              {
                                ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
                                std::__shared_weak_count::__release_weak(v147);
                              }
                              goto LABEL_360;
                            }
                            v144 = v431;
                            if ((v431 & 0x80u) != 0)
                              v144 = v430;
                            if (v144 != 3)
                            {
                              if (v144 == 4)
                              {
                                v145 = &v429;
                                if ((v431 & 0x80u) != 0)
                                  v145 = v429;
                                if (*v145 == 1784835886)
                                {
                                  v140 = sub_1C991059C((char **)buf, &v419, (uint64_t)&__n);
                                  goto LABEL_361;
                                }
                              }
                              goto LABEL_353;
                            }
                            v172 = (unsigned __int16 *)&v429;
                            if ((v431 & 0x80u) != 0)
                              v172 = (unsigned __int16 *)v429;
                            v173 = *v172;
                            v174 = *((unsigned __int8 *)v172 + 2);
                            if (v173 != 28974 || v174 != 109)
                            {
LABEL_353:
                              sub_1C99072C4(&__dst);
                              v176 = &__n;
                              if (v418 < 0)
                                LOBYTE(v176) = __n;
                              sub_1C9907EC4(&v424, &__dst, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/geometry/src/three_d/quad_mesh.cpp", 1970, "unknown mesh file extension for file %s", (char)v176);
                              sub_1C9909318((uint64_t)&v424);
                              v147 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
                              if (!*((_QWORD *)&__dst + 1))
                                goto LABEL_360;
                              v177 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
                              do
                                v149 = __ldaxr(v177);
                              while (__stlxr(v149 - 1, v177));
                              goto LABEL_358;
                            }
                            LOBYTE(v473) = 0;
                            *(_QWORD *)&__dst = &off_1E8295030;
                            *((_QWORD *)&__dst + 1) = v427;
                            v443 = 0;
                            if (v427[2] == 2
                              || (v189 = (*(uint64_t (**)(_DWORD *, unsigned int *, uint64_t))(*(_QWORD *)v427 + 144))(v427, &v443, 4), v189 < 1)|| ((*(_QWORD *)(v143 + 16) += v189, v189 == 4) ? (_CF = v443 >= 0x23888) : (_CF = 0), _CF ? (v191 = v443 > 0x2388A) : (v191 = 1), v191))
                            {
                              v140 = 0;
                              goto LABEL_361;
                            }
                            v441 = 0uLL;
                            v442 = 0;
                            __src = 0uLL;
                            v440 = 0;
                            LODWORD(v424.__r_.__value_.__l.__data_) = 0;
                            if (*(_DWORD *)(v143 + 8) == 2)
                              goto LABEL_505;
                            v209 = (*(uint64_t (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v143 + 144))(v143, &v424, 4);
                            if (v209 < 1)
                              goto LABEL_505;
                            *(_QWORD *)(v143 + 16) += v209;
                            if (v209 != 4)
                              goto LABEL_505;
                            data_low = LODWORD(v424.__r_.__value_.__l.__data_);
                            if (LODWORD(v424.__r_.__value_.__l.__data_))
                            {
                              sub_1C9914380((char **)&v441, LODWORD(v424.__r_.__value_.__l.__data_));
                              v211 = (const double *)v441;
                            }
                            else
                            {
                              v211 = 0;
                            }
                            if (*(_DWORD *)(v143 + 8) == 2)
                              goto LABEL_505;
                            v246 = 24 * data_low;
                            v414 = v211;
                            v247 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v143 + 144))(v143);
                            if (v247 >= 1)
                              *(_QWORD *)(v143 + 16) += v247;
                            if (v247 != v246)
                            {
LABEL_505:
                              v140 = 0;
                              v252 = (void *)__src;
                              if (!(_QWORD)__src)
                              {
LABEL_507:
                                if ((_QWORD)v441)
                                  operator delete((void *)v441);
                                if ((_BYTE)v473 && *((_QWORD *)&__dst + 1))
                                  (*(void (**)(_QWORD))(**((_QWORD **)&__dst + 1) + 8))(*((_QWORD *)&__dst + 1));
LABEL_361:
                                v178 = v428;
                                if (v428)
                                {
                                  v179 = (unint64_t *)&v428->__shared_owners_;
                                  do
                                    v180 = __ldaxr(v179);
                                  while (__stlxr(v180 - 1, v179));
                                  if (!v180)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
                                    std::__shared_weak_count::__release_weak(v178);
                                  }
                                }
                                if ((char)v431 < 0)
                                  operator delete(v429);
                                v7 = (cva::DictionaryHandler *)&v5[1];
                                if (SHIBYTE(v418) < 0)
                                {
                                  operator delete((void *)__n);
                                  if ((v140 & 1) != 0)
                                    goto LABEL_370;
                                }
                                else if ((v140 & 1) != 0)
                                {
LABEL_370:
                                  sub_1C98D674C((uint64_t)buf, (uint64_t)v420, v139, (cva::DictionaryHandler *)&v5[1]);
                                  goto LABEL_375;
                                }
                                v181 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
                                if ((v181 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
                                {
                                  qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
                                  __cxa_guard_release(&qword_1ED52ACD0);
                                }
                                v182 = qword_1ED52ACE0;
                                if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_ERROR))
                                {
                                  LOWORD(v424.__r_.__value_.__l.__data_) = 0;
                                  _os_log_error_impl(&dword_1C9870000, v182, OS_LOG_TYPE_ERROR, "no valid hole-filled mesh", (uint8_t *)&v424, 2u);
                                }
LABEL_375:
                                sub_1C98D83BC((uint64_t)buf);
                                if (!(_BYTE)v423)
                                  goto LABEL_308;
                                goto LABEL_307;
                              }
LABEL_506:
                              operator delete(v252);
                              goto LABEL_507;
                            }
                            v248 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v441 + 1) - (_QWORD)v414) >> 3);
                            if (*((const double **)&v441 + 1) == v414)
                            {
                              v249 = 0;
                              v251 = 0;
                              v411 = 0;
                            }
                            else
                            {
                              if (v248 > 0x1555555555555555)
                                goto LABEL_657;
                              v249 = (char *)operator new(4 * ((uint64_t)(*((_QWORD *)&v441 + 1) - (_QWORD)v414) >> 3));
                              v411 = &v249[12 * v248];
                              v250 = 12 * ((12 * v248 - 12) / 0xC) + 12;
                              bzero(v249, v250);
                              v251 = &v249[v250];
                            }
                            if ((int)v248 >= 1)
                            {
                              if (v248 < 4uLL)
                              {
                                v261 = 0;
LABEL_531:
                                v266 = v248 - v261;
                                v267 = (float *)&v249[12 * v261 + 8];
                                v268 = (double *)&v414[3 * v261 + 2];
                                do
                                {
                                  *((float32x2_t *)v267 - 1) = vcvt_f32_f64(*(float64x2_t *)(v268 - 2));
                                  v269 = *v268;
                                  v268 += 3;
                                  v270 = v269;
                                  *v267 = v270;
                                  v267 += 3;
                                  --v266;
                                }
                                while (v266);
                                goto LABEL_533;
                              }
                              v261 = v248 - (v248 & 3);
                              v262 = v414;
                              v263 = (float *)v249;
                              v264 = v261;
                              do
                              {
                                v265 = v262;
                                v479 = vld3q_f64(v265);
                                v265 += 6;
                                v485 = vld3q_f64(v265);
                                v482.val[0] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v479.val[0]), v485.val[0]);
                                v482.val[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v479.val[1]), v485.val[1]);
                                v482.val[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v479.val[2]), v485.val[2]);
                                vst3q_f32(v263, v482);
                                v263 += 12;
                                v262 += 12;
                                v264 -= 4;
                              }
                              while (v264);
                              if ((v248 & 3) != 0)
                                goto LABEL_531;
                            }
LABEL_533:
                            if (*(_QWORD *)buf)
                            {
                              *(_QWORD *)&buf[8] = *(_QWORD *)buf;
                              operator delete(*(void **)buf);
                            }
                            *(_QWORD *)buf = v249;
                            *(_QWORD *)&buf[8] = v251;
                            *(_QWORD *)&buf[16] = v411;
                            LODWORD(v424.__r_.__value_.__l.__data_) = 0;
                            if (*(_DWORD *)(v143 + 8) == 2)
                              goto LABEL_815;
                            v271 = (*(uint64_t (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v143 + 144))(v143, &v424, 4);
                            if (v271 < 1)
                              goto LABEL_815;
                            *(_QWORD *)(v143 + 16) += v271;
                            if (v271 != 4)
                              goto LABEL_815;
                            v272 = LODWORD(v424.__r_.__value_.__l.__data_);
                            if (LODWORD(v424.__r_.__value_.__l.__data_) <= v248)
                            {
                              if (LODWORD(v424.__r_.__value_.__l.__data_) < v248)
                                *((_QWORD *)&v441 + 1) = &v414[3 * LODWORD(v424.__r_.__value_.__l.__data_)];
                            }
                            else
                            {
                              sub_1C9914380((char **)&v441, LODWORD(v424.__r_.__value_.__l.__data_) - v248);
                              v414 = (const double *)v441;
                            }
                            if (*(_DWORD *)(v143 + 8) == 2)
                              goto LABEL_815;
                            v281 = 24 * v272;
                            v282 = (*(uint64_t (**)(uint64_t, const double *, uint64_t))(*(_QWORD *)v143 + 144))(v143, v414, v281);
                            if (v282 >= 1)
                              *(_QWORD *)(v143 + 16) += v282;
                            if (v282 != v281)
                              goto LABEL_815;
                            v412 = (const double *)v441;
                            v283 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v441 + 1) - v441) >> 3);
                            if (*((_QWORD *)&v441 + 1) == (_QWORD)v441)
                            {
                              v284 = 0;
                              v287 = 0;
                              v285 = 0;
                            }
                            else
                            {
                              if (v283 > 0x1555555555555555)
                                goto LABEL_657;
                              v284 = (char *)operator new(4 * ((uint64_t)(*((_QWORD *)&v441 + 1) - v441) >> 3));
                              v285 = &v284[12 * v283];
                              v286 = 12 * ((12 * v283 - 12) / 0xC) + 12;
                              bzero(v284, v286);
                              v287 = &v284[v286];
                            }
                            if ((int)v283 >= 1)
                            {
                              if (v283 < 4uLL)
                              {
                                v288 = 0;
LABEL_569:
                                v293 = v283 - v288;
                                v294 = (float *)&v284[12 * v288 + 8];
                                v295 = (double *)&v412[3 * v288 + 2];
                                do
                                {
                                  *((float32x2_t *)v294 - 1) = vcvt_f32_f64(*(float64x2_t *)(v295 - 2));
                                  v296 = *v295;
                                  v295 += 3;
                                  v297 = v296;
                                  *v294 = v297;
                                  v294 += 3;
                                  --v293;
                                }
                                while (v293);
                                goto LABEL_571;
                              }
                              v288 = v283 - (v283 & 3);
                              v289 = v412;
                              v290 = (float *)v284;
                              v291 = v288;
                              do
                              {
                                v292 = v289;
                                v480 = vld3q_f64(v292);
                                v292 += 6;
                                v486 = vld3q_f64(v292);
                                v483.val[0] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v480.val[0]), v486.val[0]);
                                v483.val[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v480.val[1]), v486.val[1]);
                                v483.val[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v480.val[2]), v486.val[2]);
                                vst3q_f32(v290, v483);
                                v290 += 12;
                                v289 += 12;
                                v291 -= 4;
                              }
                              while (v291);
                              if ((v283 & 3) != 0)
                                goto LABEL_569;
                            }
LABEL_571:
                            if (*(_QWORD *)&buf[24])
                            {
                              *(_QWORD *)&v445 = *(_QWORD *)&buf[24];
                              operator delete(*(void **)&buf[24]);
                            }
                            *(_QWORD *)&buf[24] = v284;
                            *(_QWORD *)&v445 = v287;
                            *((_QWORD *)&v445 + 1) = v285;
                            LODWORD(v424.__r_.__value_.__l.__data_) = 0;
                            v415 = *((_QWORD *)&__dst + 1);
                            if (*(_DWORD *)(*((_QWORD *)&__dst + 1) + 8) == 2)
                              goto LABEL_815;
                            v298 = (*(uint64_t (**)(_QWORD, std::string *, uint64_t))(**((_QWORD **)&__dst + 1)
                                                                                             + 144))(*((_QWORD *)&__dst + 1), &v424, 4);
                            if (v298 < 1)
                              goto LABEL_815;
                            *(_QWORD *)(v415 + 16) += v298;
                            if (v298 != 4)
                              goto LABEL_815;
                            v299 = LODWORD(v424.__r_.__value_.__l.__data_);
                            v300 = (const double *)__src;
                            v301 = (uint64_t)(*((_QWORD *)&__src + 1) - __src) >> 4;
                            if (LODWORD(v424.__r_.__value_.__l.__data_) <= v301)
                            {
                              if (LODWORD(v424.__r_.__value_.__l.__data_) < v301)
                                *((_QWORD *)&__src + 1) = __src + 16 * LODWORD(v424.__r_.__value_.__l.__data_);
                            }
                            else
                            {
                              sub_1C98FDD00((char **)&__src, LODWORD(v424.__r_.__value_.__l.__data_) - v301);
                              v300 = (const double *)__src;
                            }
                            if (*(_DWORD *)(v415 + 8) == 2)
                              goto LABEL_815;
                            v315 = (*(uint64_t (**)(uint64_t, const double *, uint64_t))(*(_QWORD *)v415 + 144))(v415, v300, 16 * v299);
                            if (v315 >= 1)
                              *(_QWORD *)(v415 + 16) += v315;
                            if (v315 != 16 * v299)
                              goto LABEL_815;
                            v316 = *((_QWORD *)&__src + 1) - (_QWORD)v300;
                            if (*((const double **)&__src + 1) == v300)
                            {
                              v405 = 0;
                              v408 = 0;
                              v318 = 0;
                            }
                            else
                            {
                              if ((v316 & 0x8000000000000000) != 0)
                                goto LABEL_657;
                              v317 = (char *)operator new(v316 >> 1);
                              v405 = &v317[8 * ((uint64_t)v316 >> 4)];
                              bzero(v317, v316 >> 1);
                              v408 = (float *)v317;
                              v318 = &v317[v316 >> 1];
                            }
                            if ((int)(v316 >> 4) < 1)
                              goto LABEL_641;
                            v319 = (v316 >> 4);
                            if (v319 >= 4)
                            {
                              v321 = (v316 >> 4) & 3;
                              v320 = v319 - v321;
                              v322 = v300;
                              v323 = v408;
                              v324 = v319 - v321;
                              do
                              {
                                v325 = v322;
                                v476 = vld2q_f64(v325);
                                v325 += 4;
                                v477 = vld2q_f64(v325);
                                v478.val[0] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v476.val[0]), v477.val[0]);
                                v478.val[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v476.val[1]), v477.val[1]);
                                vst2q_f32(v323, v478);
                                v323 += 8;
                                v322 += 8;
                                v324 -= 4;
                              }
                              while (v324);
                              if (!v321)
                                goto LABEL_641;
                            }
                            else
                            {
                              v320 = 0;
                            }
                            v326 = v320 - v319;
                            v327 = (float32x2_t *)&v408[2 * v320];
                            v328 = (float64x2_t *)&v300[2 * v320];
                            do
                            {
                              v329 = *v328++;
                              *v327++ = vcvt_f32_f64(v329);
                              _CF = __CFADD__(v326++, 1);
                            }
                            while (!_CF);
LABEL_641:
                            if ((_QWORD)v446)
                            {
                              *((_QWORD *)&v446 + 1) = v446;
                              operator delete((void *)v446);
                            }
                            *(_QWORD *)&v446 = v408;
                            *((_QWORD *)&v446 + 1) = v318;
                            *(_QWORD *)&v447 = v405;
                            LODWORD(v424.__r_.__value_.__l.__data_) = 0;
                            if (*(_DWORD *)(v415 + 8) == 2)
                              goto LABEL_815;
                            v330 = (*(uint64_t (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v415 + 144))(v415, &v424, 4);
                            if (v330 < 1)
                              goto LABEL_815;
                            *(_QWORD *)(v415 + 16) += v330;
                            if (v330 != 4)
                              goto LABEL_815;
                            v331 = LODWORD(v424.__r_.__value_.__l.__data_);
                            if (LODWORD(v424.__r_.__value_.__l.__data_) <= v283)
                            {
                              if (LODWORD(v424.__r_.__value_.__l.__data_) < v283)
                                *((_QWORD *)&v441 + 1) = &v412[3 * LODWORD(v424.__r_.__value_.__l.__data_)];
                            }
                            else
                            {
                              sub_1C9914380((char **)&v441, LODWORD(v424.__r_.__value_.__l.__data_) - v283);
                              v412 = (const double *)v441;
                            }
                            if (*(_DWORD *)(v415 + 8) == 2)
                              goto LABEL_815;
                            v332 = (*(uint64_t (**)(uint64_t, const double *, uint64_t))(*(_QWORD *)v415 + 144))(v415, v412, 24 * v331);
                            if (v332 >= 1)
                              *(_QWORD *)(v415 + 16) += v332;
                            if (v332 != 24 * v331)
                              goto LABEL_815;
                            v333 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v441 + 1) - (_QWORD)v412) >> 3);
                            if (*((const double **)&v441 + 1) == v412)
                            {
                              v334 = 0;
                              v337 = 0;
                              v335 = 0;
LABEL_661:
                              if ((int)v333 < 1)
                                goto LABEL_669;
                              if (v333 >= 4uLL)
                              {
                                v338 = v333 - (v333 & 3);
                                v339 = v412;
                                v340 = v334;
                                v341 = v338;
                                do
                                {
                                  v342 = v339;
                                  v481 = vld3q_f64(v342);
                                  v342 += 6;
                                  v487 = vld3q_f64(v342);
                                  v484.val[0] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v481.val[0]), v487.val[0]);
                                  v484.val[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v481.val[1]), v487.val[1]);
                                  v484.val[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v481.val[2]), v487.val[2]);
                                  vst3q_f32(v340, v484);
                                  v340 += 12;
                                  v339 += 12;
                                  v341 -= 4;
                                }
                                while (v341);
                                if ((v333 & 3) == 0)
                                {
LABEL_669:
                                  if (*((_QWORD *)&v447 + 1))
                                  {
                                    *(_QWORD *)&v448 = *((_QWORD *)&v447 + 1);
                                    operator delete(*((void **)&v447 + 1));
                                  }
                                  *((_QWORD *)&v447 + 1) = v334;
                                  *(_QWORD *)&v448 = v337;
                                  *((_QWORD *)&v448 + 1) = v335;
                                  LODWORD(v424.__r_.__value_.__l.__data_) = 0;
                                  if (*(_DWORD *)(v415 + 8) == 2)
                                    goto LABEL_815;
                                  v348 = (*(uint64_t (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v415 + 144))(v415, &v424, 4);
                                  if (v348 < 1)
                                    goto LABEL_815;
                                  *(_QWORD *)(v415 + 16) += v348;
                                  if (v348 != 4)
                                    goto LABEL_815;
                                  v349 = LODWORD(v424.__r_.__value_.__l.__data_);
                                  v350 = v449[0];
                                  v351 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v449[1] - v449[0]) >> 2);
                                  v352 = LODWORD(v424.__r_.__value_.__l.__data_) >= v351;
                                  v353 = LODWORD(v424.__r_.__value_.__l.__data_) - v351;
                                  if (v353 != 0 && v352)
                                  {
                                    sub_1C98FDE24((uint64_t)v449, v353);
                                    v350 = v449[0];
                                  }
                                  else if (!v352)
                                  {
                                    v449[1] = v449[0] + 12 * LODWORD(v424.__r_.__value_.__l.__data_);
                                  }
                                  if (*(_DWORD *)(v415 + 8) == 2)
                                    goto LABEL_815;
                                  v354 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v415 + 144))(v415, v350, 12 * v349);
                                  if (v354 >= 1)
                                    *(_QWORD *)(v415 + 16) += v354;
                                  if (v354 != 12 * v349
                                    || !sub_1C9914518((uint64_t)&__dst, &v449[3])
                                    || !sub_1C9914518((uint64_t)&__dst, (uint64_t *)&v450)
                                    || !sub_1C9914634((uint64_t)&__dst, (uint64_t)&v451 + 8)
                                    || !sub_1C9914634((uint64_t)&__dst, (uint64_t)v453)
                                    || !sub_1C9914634((uint64_t)&__dst, (uint64_t)&v453[1] + 8))
                                  {
                                    goto LABEL_815;
                                  }
                                  *(_QWORD *)&v467 = *((_QWORD *)&v466 + 1);
                                  v355 = *((_QWORD *)&v462 + 1);
                                  v356 = v462;
                                  if (*((_QWORD *)&v462 + 1) != (_QWORD)v462)
                                  {
                                    v357 = *((_QWORD *)&v462 + 1);
                                    do
                                    {
                                      v359 = *(void **)(v357 - 24);
                                      v357 -= 24;
                                      v358 = v359;
                                      if (v359)
                                      {
                                        *(_QWORD *)(v355 - 16) = v358;
                                        operator delete(v358);
                                      }
                                      v355 = v357;
                                    }
                                    while (v357 != v356);
                                  }
                                  *((_QWORD *)&v462 + 1) = v356;
                                  if (v443 > 0x23888)
                                  {
                                    v438 = 0;
                                    if (*(_DWORD *)(v415 + 8) == 2)
                                      goto LABEL_815;
                                    v360 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t))(*(_QWORD *)v415 + 144))(v415, &v438, 4);
                                    if (v360 < 1)
                                      goto LABEL_815;
                                    *(_QWORD *)(v415 + 16) += v360;
                                    if (v360 != 4)
                                      goto LABEL_815;
                                    if (v438)
                                    {
                                      v361 = 0;
                                      __asm { FMOV            V8.2S, #1.0 }
                                      while (1)
                                      {
                                        memset(&v437, 0, sizeof(v437));
                                        if (sub_1C991DBCC((uint64_t)&__dst, &v437))
                                          break;
                                        v380 = 1;
LABEL_731:
                                        if (SHIBYTE(v437.__r_.__value_.__r.__words[2]) < 0)
                                          operator delete(v437.__r_.__value_.__l.__data_);
                                        if (v380)
                                          goto LABEL_815;
                                        if (++v361 >= v438)
                                        {
                                          v415 = *((_QWORD *)&__dst + 1);
                                          goto LABEL_736;
                                        }
                                      }
                                      v424.__r_.__value_.__r.__words[0] = _D8;
                                      *(std::string::size_type *)((char *)&v424.__r_.__value_.__r.__words[1] + 4) = 0;
                                      HIDWORD(v424.__r_.__value_.__r.__words[2]) = 0;
                                      LODWORD(v424.__r_.__value_.__r.__words[1]) = 1065353216;
                                      *(_DWORD *)v425 = 1114636288;
                                      memset(&v425[8], 0, 48);
                                      memset(v426, 0, 24);
                                      v435.__r_.__value_.__r.__words[0] = 0;
                                      if (*(_DWORD *)(v415 + 8) == 2)
                                        goto LABEL_729;
                                      v365 = (*(uint64_t (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v415 + 144))(v415, &v435, 8);
                                      if (v365 < 1)
                                        goto LABEL_729;
                                      *(_QWORD *)(v415 + 16) += v365;
                                      if (v365 != 8)
                                        goto LABEL_729;
                                      v366 = *(double *)&v435.__r_.__value_.__l.__data_;
                                      *(float *)&v424.__r_.__value_.__l.__data_ = v366;
                                      if (*(_DWORD *)(v415 + 8) == 2)
                                        goto LABEL_729;
                                      v367 = (*(uint64_t (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v415 + 144))(v415, &v435, 8);
                                      if (v367 < 1)
                                        goto LABEL_729;
                                      *(_QWORD *)(v415 + 16) += v367;
                                      if (v367 != 8)
                                        goto LABEL_729;
                                      v368 = *(double *)&v435.__r_.__value_.__l.__data_;
                                      *((float *)v424.__r_.__value_.__r.__words + 1) = v368;
                                      if (*(_DWORD *)(v415 + 8) == 2)
                                        goto LABEL_729;
                                      v369 = (*(uint64_t (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v415 + 144))(v415, &v435, 8);
                                      if (v369 < 1)
                                        goto LABEL_729;
                                      *(_QWORD *)(v415 + 16) += v369;
                                      if (v369 != 8)
                                        goto LABEL_729;
                                      v370 = *(double *)&v435.__r_.__value_.__l.__data_;
                                      *(float *)&v424.__r_.__value_.__r.__words[1] = v370;
                                      if (v443 > 0x23889)
                                      {
                                        if (*(_DWORD *)(v415 + 8) == 2)
                                          goto LABEL_729;
                                        v371 = (*(uint64_t (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v415 + 144))(v415, &v435, 8);
                                        if (v371 < 1)
                                          goto LABEL_729;
                                        *(_QWORD *)(v415 + 16) += v371;
                                        if (v371 != 8)
                                          goto LABEL_729;
                                        v372 = *(double *)&v435.__r_.__value_.__l.__data_;
                                        *((float *)&v424.__r_.__value_.__r.__words[1] + 1) = v372;
                                        if (*(_DWORD *)(v415 + 8) == 2)
                                          goto LABEL_729;
                                        v373 = (*(uint64_t (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v415 + 144))(v415, &v435, 8);
                                        if (v373 < 1)
                                          goto LABEL_729;
                                        *(_QWORD *)(v415 + 16) += v373;
                                        if (v373 != 8)
                                          goto LABEL_729;
                                        v374 = *(double *)&v435.__r_.__value_.__l.__data_;
                                        *(float *)&v424.__r_.__value_.__r.__words[2] = v374;
                                        if (*(_DWORD *)(v415 + 8) == 2)
                                          goto LABEL_729;
                                        v375 = (*(uint64_t (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v415 + 144))(v415, &v435, 8);
                                        if (v375 < 1)
                                          goto LABEL_729;
                                        *(_QWORD *)(v415 + 16) += v375;
                                        if (v375 != 8)
                                          goto LABEL_729;
                                        v376 = *(double *)&v435.__r_.__value_.__l.__data_;
                                        *((float *)&v424.__r_.__value_.__r.__words[2] + 1) = v376;
                                      }
                                      if (*(_DWORD *)(v415 + 8) != 2)
                                      {
                                        v377 = (*(uint64_t (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v415 + 144))(v415, &v435, 8);
                                        if (v377 >= 1)
                                        {
                                          *(_QWORD *)(v415 + 16) += v377;
                                          if (v377 == 8)
                                          {
                                            v378 = *(double *)&v435.__r_.__value_.__l.__data_;
                                            *(float *)v425 = v378;
                                            if (sub_1C991DBCC((uint64_t)&__dst, (std::string *)&v425[8])
                                              && sub_1C991DBCC((uint64_t)&__dst, (std::string *)&v425[32])
                                              && sub_1C991DBCC((uint64_t)&__dst, v426))
                                            {
                                              v379 = sub_1C991473C(&v454, (const void **)&v437.__r_.__value_.__l.__data_, (uint64_t)&v437);
                                              sub_1C990E7CC((uint64_t)(v379 + 7), &v424);
                                              v380 = 0;
LABEL_730:
                                              sub_1C99148D8((uint64_t)&v424);
                                              goto LABEL_731;
                                            }
                                          }
                                        }
                                      }
LABEL_729:
                                      v380 = 1;
                                      goto LABEL_730;
                                    }
LABEL_736:
                                    v436 = 0;
                                    if (*(_DWORD *)(v415 + 8) == 2)
                                      goto LABEL_815;
                                    v381 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t))(*(_QWORD *)v415 + 144))(v415, &v436, 4);
                                    if (v381 < 1)
                                      goto LABEL_815;
                                    *(_QWORD *)(v415 + 16) += v381;
                                    if (v381 != 4)
                                      goto LABEL_815;
                                    memset(&v437, 0, sizeof(v437));
                                    if (v436)
                                    {
                                      for (i = 0; i < v436; ++i)
                                      {
                                        memset(&v424, 0, sizeof(v424));
                                        if (!sub_1C991DBCC((uint64_t)&__dst, &v424))
                                        {
                                          v387 = 1;
                                          goto LABEL_765;
                                        }
                                        memset(&v435, 0, sizeof(v435));
                                        v434 = 0;
                                        if (*(_DWORD *)(v415 + 8) != 2)
                                        {
                                          v383 = (*(uint64_t (**)(uint64_t, int *, uint64_t))(*(_QWORD *)v415 + 144))(v415, &v434, 4);
                                          if (v383 >= 1)
                                          {
                                            *(_QWORD *)(v415 + 16) += v383;
                                            if (v383 == 4)
                                            {
                                              if (v434 < 1)
                                              {
LABEL_759:
                                                v386 = (std::string *)(sub_1C990E59C(&v456, (const void **)&v424.__r_.__value_.__l.__data_, (uint64_t)&v424)+ 7);
                                                if (v386 != &v435)
                                                  sub_1C9910290((uint64_t)v386, (uint64_t *)v435.__r_.__value_.__l.__data_, (uint64_t *)v435.__r_.__value_.__l.__size_, (uint64_t)(v435.__r_.__value_.__l.__size_- v435.__r_.__value_.__r.__words[0]) >> 4);
                                                v387 = 0;
                                                goto LABEL_764;
                                              }
                                              v384 = 0;
                                              while (1)
                                              {
                                                memset(&v433, 0, sizeof(v433));
                                                if (sub_1C991DBCC((uint64_t)&__dst, &v433))
                                                {
                                                  sub_1C991493C(&v432, (uint64_t)&v433);
                                                  if (sub_1C99149C8((uint64_t)&__dst, (uint64_t *)v432)
                                                    && sub_1C99149C8((uint64_t)&__dst, (uint64_t *)(v432 + 24))
                                                    && sub_1C991DBCC((uint64_t)&__dst, (std::string *)(v432 + 72)))
                                                  {
                                                    sub_1C9914AD0((uint64_t)&v435, &v432);
                                                    sub_1C9914AD0((uint64_t)&v437, &v432);
                                                    v385 = 0;
                                                  }
                                                  else
                                                  {
                                                    v385 = 1;
                                                  }
                                                  sub_1C987C140((uint64_t)&v432);
                                                }
                                                else
                                                {
                                                  v385 = 1;
                                                }
                                                if (SHIBYTE(v433.__r_.__value_.__r.__words[2]) < 0)
                                                  operator delete(v433.__r_.__value_.__l.__data_);
                                                if (v385)
                                                  break;
                                                if (++v384 >= v434)
                                                  goto LABEL_759;
                                              }
                                            }
                                          }
                                        }
                                        v387 = 1;
LABEL_764:
                                        sub_1C98A7D08((void **)&v435.__r_.__value_.__l.__data_);
LABEL_765:
                                        if (SHIBYTE(v424.__r_.__value_.__r.__words[2]) < 0)
                                          operator delete(v424.__r_.__value_.__l.__data_);
                                        if (v387)
                                          goto LABEL_814;
                                      }
                                    }
                                    LODWORD(v432) = 0;
                                    if (*(_DWORD *)(v415 + 8) == 2)
                                      goto LABEL_814;
                                    v388 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v415 + 144))(v415, &v432, 4);
                                    if (v388 < 1)
                                      goto LABEL_814;
                                    *(_QWORD *)(v415 + 16) += v388;
                                    if (v388 != 4)
                                      goto LABEL_814;
                                    if ((_DWORD)v432)
                                    {
                                      for (j = 0; j < v432; ++j)
                                      {
                                        memset(&v435, 0, sizeof(v435));
                                        if (sub_1C991DBCC((uint64_t)&__dst, &v435))
                                        {
                                          memset(&v433, 0, sizeof(v433));
                                          if (SHIBYTE(v435.__r_.__value_.__r.__words[2]) < 0)
                                          {
                                            sub_1C987D148(&v424, v435.__r_.__value_.__l.__data_, v435.__r_.__value_.__l.__size_);
                                            v391 = *(_OWORD *)&v433.__r_.__value_.__l.__data_;
                                            v390 = v433.__r_.__value_.__r.__words[2];
                                          }
                                          else
                                          {
                                            v390 = 0;
                                            v424 = v435;
                                            v391 = 0uLL;
                                          }
                                          *(_OWORD *)v425 = v391;
                                          *(_QWORD *)&v425[16] = v390;
                                          memset(&v433, 0, sizeof(v433));
                                          sub_1C9914C48(&v458, (const void **)&v424.__r_.__value_.__l.__data_, (uint64_t)&v424);
                                          sub_1C9914DA8((uint64_t)&v424);
                                          sub_1C98A7D08((void **)&v433.__r_.__value_.__l.__data_);
                                          LODWORD(v424.__r_.__value_.__l.__data_) = 0;
                                          if (*(_DWORD *)(v415 + 8) != 2)
                                          {
                                            v392 = (*(uint64_t (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v415 + 144))(v415, &v424, 4);
                                            if (v392 >= 1)
                                            {
                                              *(_QWORD *)(v415 + 16) += v392;
                                              if (v392 == 4)
                                              {
                                                if (!LODWORD(v424.__r_.__value_.__l.__data_))
                                                {
                                                  v396 = 0;
                                                  if ((SHIBYTE(v435.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                                    goto LABEL_791;
                                                  goto LABEL_790;
                                                }
                                                v393 = 0;
                                                while (1)
                                                {
                                                  LODWORD(v433.__r_.__value_.__l.__data_) = 0;
                                                  if (*(_DWORD *)(v415 + 8) == 2)
                                                    break;
                                                  v394 = (*(uint64_t (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v415 + 144))(v415, &v433, 4);
                                                  if (v394 < 1)
                                                    break;
                                                  *(_QWORD *)(v415 + 16) += v394;
                                                  if (v394 != 4)
                                                    break;
                                                  v395 = sub_1C990E59C(&v458, (const void **)&v435.__r_.__value_.__l.__data_, (uint64_t)&v435);
                                                  sub_1C9914AD0((uint64_t)(v395 + 7), (__int128 *)(v437.__r_.__value_.__r.__words[0]+ 16 * LODWORD(v433.__r_.__value_.__l.__data_)));
                                                  v396 = 0;
                                                  if (++v393 >= LODWORD(v424.__r_.__value_.__l.__data_))
                                                    goto LABEL_789;
                                                }
                                              }
                                            }
                                          }
                                        }
                                        v396 = 1;
LABEL_789:
                                        if ((SHIBYTE(v435.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                          goto LABEL_791;
LABEL_790:
                                        operator delete(v435.__r_.__value_.__l.__data_);
LABEL_791:
                                        if (v396)
                                          goto LABEL_814;
                                      }
                                    }
                                    v434 = 0;
                                    if (*(_DWORD *)(v415 + 8) == 2)
                                      goto LABEL_814;
                                    v397 = (*(uint64_t (**)(uint64_t, int *, uint64_t))(*(_QWORD *)v415 + 144))(v415, &v434, 4);
                                    if (v397 < 1)
                                      goto LABEL_814;
                                    *(_QWORD *)(v415 + 16) += v397;
                                    if (v397 != 4)
                                      goto LABEL_814;
                                    if (v434)
                                    {
                                      v398 = 0;
                                      while (1)
                                      {
                                        memset(&v435, 0, sizeof(v435));
                                        memset(&v433, 0, sizeof(v433));
                                        if (!sub_1C991DBCC((uint64_t)&__dst, &v435)
                                          || !sub_1C991DBCC((uint64_t)&__dst, &v433))
                                        {
                                          break;
                                        }
                                        sub_1C9914E50((char *)&v424, (__int128 *)&v435, (__int128 *)&v433);
                                        sub_1C9914C48(&v460, (const void **)&v424.__r_.__value_.__l.__data_, (uint64_t)&v424);
                                        sub_1C9914EC8((uint64_t)&v424);
                                        if (SHIBYTE(v433.__r_.__value_.__r.__words[2]) < 0)
                                          operator delete(v433.__r_.__value_.__l.__data_);
                                        if (SHIBYTE(v435.__r_.__value_.__r.__words[2]) < 0)
                                          operator delete(v435.__r_.__value_.__l.__data_);
                                        if (++v398 >= v434)
                                          goto LABEL_808;
                                      }
                                      if (SHIBYTE(v433.__r_.__value_.__r.__words[2]) < 0)
                                        operator delete(v433.__r_.__value_.__l.__data_);
                                      if (SHIBYTE(v435.__r_.__value_.__r.__words[2]) < 0)
                                        operator delete(v435.__r_.__value_.__l.__data_);
LABEL_814:
                                      sub_1C98A7D08((void **)&v437.__r_.__value_.__l.__data_);
LABEL_815:
                                      v140 = 0;
LABEL_816:
                                      a1 = v409;
                                      v252 = (void *)__src;
                                      if (!(_QWORD)__src)
                                        goto LABEL_507;
                                      goto LABEL_506;
                                    }
LABEL_808:
                                    sub_1C98A7D08((void **)&v437.__r_.__value_.__l.__data_);
                                  }
                                  v140 = 1;
                                  goto LABEL_816;
                                }
                              }
                              else
                              {
                                v338 = 0;
                              }
                              v343 = v333 - v338;
                              v344 = &v334[3 * v338 + 2];
                              v345 = (double *)&v412[3 * v338 + 2];
                              do
                              {
                                *((float32x2_t *)v344 - 1) = vcvt_f32_f64(*(float64x2_t *)(v345 - 2));
                                v346 = *v345;
                                v345 += 3;
                                v347 = v346;
                                *v344 = v347;
                                v344 += 3;
                                --v343;
                              }
                              while (v343);
                              goto LABEL_669;
                            }
                            if (v333 <= 0x1555555555555555)
                            {
                              v334 = (float *)operator new(4 * ((uint64_t)(*((_QWORD *)&v441 + 1) - (_QWORD)v412) >> 3));
                              v335 = &v334[3 * v333];
                              v336 = 12 * ((12 * v333 - 12) / 0xC) + 12;
                              bzero(v334, v336);
                              v337 = (char *)v334 + v336;
                              goto LABEL_661;
                            }
LABEL_657:
                            abort();
                          }
                          v187 = Length;
                          v188 = sub_1C98FE490();
                          if (!os_log_type_enabled(v188, OS_LOG_TYPE_ERROR))
                            goto LABEL_380;
                          v212 = *(_DWORD *)(v121 + 472);
                          LODWORD(__dst) = 67109632;
                          DWORD1(__dst) = 4 * v212;
                          WORD4(__dst) = 1024;
                          *(_DWORD *)((char *)&__dst + 10) = v212;
                          HIWORD(__dst) = 1024;
                          LODWORD(v473) = v187;
                          v184 = "the blendshape activations data should contain %d bytes (%d blendshapes) but contains %d.";
                          v185 = v188;
                          v186 = 20;
                        }
                        else
                        {
                          v183 = sub_1C98FE490();
                          if (!os_log_type_enabled(v183, OS_LOG_TYPE_ERROR))
                          {
LABEL_380:
                            a1 = v124;
                            v7 = (cva::DictionaryHandler *)&v5[1];
                            v122 = v406;
                            goto LABEL_301;
                          }
                          LOWORD(__dst) = 0;
                          v184 = "could not read the blendshape activations array";
                          v185 = v183;
                          v186 = 2;
                        }
                        _os_log_error_impl(&dword_1C9870000, v185, OS_LOG_TYPE_ERROR, v184, (uint8_t *)&__dst, v186);
                        goto LABEL_380;
                      }
                      v7 = (cva::DictionaryHandler *)&v5[1];
LABEL_298:
                      v150 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
                      if ((v150 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
                      {
                        qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
                        __cxa_guard_release(&qword_1ED52ACD0);
                      }
                      v151 = qword_1ED52ACE0;
                      if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_ERROR))
                      {
                        *(_WORD *)buf = 0;
                        _os_log_error_impl(&dword_1C9870000, v151, OS_LOG_TYPE_ERROR, "no valid rig", buf, 2u);
                      }
LABEL_301:
                      v152 = (std::__shared_weak_count *)*((_QWORD *)&v441 + 1);
                      if (*((_QWORD *)&v441 + 1))
                      {
                        v153 = (unint64_t *)(*((_QWORD *)&v441 + 1) + 8);
                        do
                          v154 = __ldaxr(v153);
                        while (__stlxr(v154 - 1, v153));
                        if (!v154)
                        {
                          ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
                          std::__shared_weak_count::__release_weak(v152);
                        }
                      }
                      v140 = 0;
                      if (!(_BYTE)v423)
                      {
LABEL_308:
                        if (v122)
                        {
                          v155 = (unint64_t *)&v122->__shared_owners_;
                          do
                            v156 = __ldaxr(v155);
                          while (__stlxr(v156 - 1, v155));
                          if (!v156)
                          {
                            ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
                            std::__shared_weak_count::__release_weak(v122);
                          }
                        }
                        v157 = v419;
                        if (v419)
                        {
                          sub_1C9887678(*(char **)(v419 + 40));
                          if (*(char *)(v157 + 23) < 0)
                            operator delete(*(void **)v157);
                          MEMORY[0x1CAA44AFC](v157, 0x1072C40690ED037);
                        }
                        if (!v140)
                          goto LABEL_340;
LABEL_318:
                        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                          sub_1C987D148(&v424, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
                        else
                          v424 = __p;
                        *(std::string *)buf = v424;
                        memset(&v424, 0, sizeof(v424));
                        sub_1C98CD4C8(&__dst);
                        v158 = __dst;
                        if ((_QWORD)__dst)
                        {
                          cva::DictionaryHandler::DictionaryHandler((cva::DictionaryHandler *)&v441);
                          v159 = *(_DWORD *)(v158 + 16);
                          if (v159)
                          {
                            v160 = CFDataCreate(0, *(const UInt8 **)v158, 12 * v159);
                            cva::ItemHandler::createData(v160, v161);
                            cva::DictionaryHandler::setItem((cva::DictionaryHandler *)&v441, CFSTR("landmark_coordinate_ids"), (const cva::ItemHandler *)v420);
                            cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v420);
                            CFRelease(v160);
                          }
                          v162 = *(_DWORD *)(v158 + 40);
                          if (v162)
                          {
                            v163 = CFDataCreate(0, *(const UInt8 **)(v158 + 24), 12 * v162);
                            cva::ItemHandler::createData(v163, v164);
                            cva::DictionaryHandler::setItem((cva::DictionaryHandler *)&v441, CFSTR("landmark_coordinate_weights"), (const cva::ItemHandler *)v420);
                            cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v420);
                            CFRelease(v163);
                          }
                          cva::ItemHandler::ItemHandler();
                          cva::DictionaryHandler::setItem(v7, CFSTR("landmark_coordinates"), (const cva::ItemHandler *)v420);
                          cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v420);
                          cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)&v441);
                          v165 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
                          if (!*((_QWORD *)&__dst + 1))
                          {
LABEL_335:
                            if ((buf[23] & 0x80000000) != 0)
                            {
                              operator delete(*(void **)buf);
                              if (v158)
                              {
LABEL_337:
                                *a1 = v7;
                                a1[1] = (cva::DictionaryHandler *)v5;
                                if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                  return kdebug_trace();
                                goto LABEL_25;
                              }
                            }
                            else if (v158)
                            {
                              goto LABEL_337;
                            }
LABEL_340:
                            *a1 = 0;
                            a1[1] = 0;
                            do
                              v170 = __ldaxr(p_shared_owners);
                            while (__stlxr(v170 - 1, p_shared_owners));
                            if (v170)
                            {
                              if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                return kdebug_trace();
                            }
                            else
                            {
                              ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
                              std::__shared_weak_count::__release_weak(v5);
                              if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                return kdebug_trace();
                            }
                            goto LABEL_25;
                          }
                        }
                        else
                        {
                          v166 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
                          if ((v166 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
                          {
                            qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
                            __cxa_guard_release(&qword_1ED52ACD0);
                          }
                          v167 = qword_1ED52ACE0;
                          if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_ERROR))
                          {
                            *(_WORD *)v420 = 0;
                            _os_log_error_impl(&dword_1C9870000, v167, OS_LOG_TYPE_ERROR, "could not load landmark data", v420, 2u);
                            v165 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
                            if (!*((_QWORD *)&__dst + 1))
                              goto LABEL_335;
                          }
                          else
                          {
                            v165 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
                            if (!*((_QWORD *)&__dst + 1))
                              goto LABEL_335;
                          }
                        }
                        v168 = (unint64_t *)&v165->__shared_owners_;
                        do
                          v169 = __ldaxr(v168);
                        while (__stlxr(v169 - 1, v168));
                        if (!v169)
                        {
                          ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
                          std::__shared_weak_count::__release_weak(v165);
                        }
                        goto LABEL_335;
                      }
LABEL_307:
                      free(*(void **)v420);
                      goto LABEL_308;
                    }
                  }
                }
              }
              else
              {
LABEL_602:
                LODWORD(v437.__r_.__value_.__l.__data_) = 0;
              }
              sub_1C99072C4(&__dst);
              sub_1C9907EC4(buf, &__dst, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/geometry/src/three_d/trackingriglite.cpp", 89, "couldn't read rig: corrupt data", v399);
              sub_1C9909318((uint64_t)buf);
              v311 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
              a1 = v409;
              if (*((_QWORD *)&__dst + 1))
              {
                v312 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
                do
                  v313 = __ldaxr(v312);
                while (__stlxr(v313 - 1, v312));
                if (!v313)
                {
                  ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
                  std::__shared_weak_count::__release_weak(v311);
                }
              }
              goto LABEL_608;
            }
            cva::Path::Path();
            if ((cva::Path::isAbsolute((cva::Path *)buf) & 1) == 0)
            {
              cva::Path::absolute((cva::Path *)buf);
              v55 = cva::Path::string((cva::Path *)&v424);
              if (v55 != v53)
              {
                v56 = *(_BYTE *)(v55 + 23);
                if (*(char *)(v53 + 23) < 0)
                {
                  if (v56 >= 0)
                    v61 = (void *)v55;
                  else
                    v61 = *(void **)v55;
                  if (v56 >= 0)
                    v62 = *(unsigned __int8 *)(v55 + 23);
                  else
                    v62 = *(_QWORD *)(v55 + 8);
                  sub_1C98A976C((void **)v53, v61, v62);
                }
                else if ((*(_BYTE *)(v55 + 23) & 0x80) != 0)
                {
                  sub_1C98A96AC((_QWORD *)v53, *(void **)v55, *(_QWORD *)(v55 + 8));
                }
                else
                {
                  v57 = *(_OWORD *)v55;
                  *(_QWORD *)(v53 + 16) = *(_QWORD *)(v55 + 16);
                  *(_OWORD *)v53 = v57;
                }
              }
              cva::Path::~Path((cva::Path *)&v424);
            }
            cva::Path::~Path((cva::Path *)buf);
          }
          sub_1C991ECF8((uint64_t *)&v435, v54, 4);
          v63 = *(_QWORD *)(v435.__r_.__value_.__r.__words[0] + 8);
          if (v63 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_657;
          v64 = *(const void **)v435.__r_.__value_.__l.__data_;
          if (v63 >= 0x17)
          {
            v66 = (v63 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v63 | 7) != 0x17)
              v66 = v63 | 7;
            v67 = v66 + 1;
            v65 = (__int128 *)operator new(v66 + 1);
            *((_QWORD *)&__dst + 1) = v63;
            v473 = v67 | 0x8000000000000000;
            *(_QWORD *)&__dst = v65;
          }
          else
          {
            HIBYTE(v473) = *(_QWORD *)(v435.__r_.__value_.__r.__words[0] + 8);
            v65 = &__dst;
            if (!v63)
            {
LABEL_139:
              *((_BYTE *)v65 + v63) = 0;
              v68 = HIBYTE(v473);
              if (v473 < 0)
                v68 = *((_QWORD *)&__dst + 1);
              if (v68 != 4)
                goto LABEL_146;
              v69 = &__dst;
              if (v473 < 0)
                v69 = (__int128 *)__dst;
              if (*(_DWORD *)v69 != 1885762406 && *(_DWORD *)v69 != 1885745766)
              {
LABEL_146:
                v70 = (std::__shared_weak_count *)v437.__r_.__value_.__l.__size_;
                *(_OWORD *)&v437.__r_.__value_.__l.__data_ = 0uLL;
                if (v70)
                {
                  v71 = (unint64_t *)&v70->__shared_owners_;
                  do
                    v72 = __ldaxr(v71);
                  while (__stlxr(v72 - 1, v71));
                  if (!v72)
                  {
                    ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                    std::__shared_weak_count::__release_weak(v70);
                  }
                }
                sub_1C99072C4(&v424);
                v73 = &__dst;
                if (v473 < 0)
                  LOBYTE(v73) = __dst;
                sub_1C9907EC4(buf, &v424, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/utils/src/FilePack.cpp", 146, "file not filepack %s", (char)v73);
                sub_1C9909318((uint64_t)buf);
                v74 = (std::__shared_weak_count *)v424.__r_.__value_.__l.__size_;
                if (!v424.__r_.__value_.__l.__size_)
                  goto LABEL_214;
                v75 = (unint64_t *)(v424.__r_.__value_.__l.__size_ + 8);
                do
                  v76 = __ldaxr(v75);
                while (__stlxr(v76 - 1, v75));
LABEL_156:
                if (!v76)
                {
                  ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                  std::__shared_weak_count::__release_weak(v74);
                }
LABEL_214:
                if (SHIBYTE(v473) < 0)
                  operator delete((void *)__dst);
                v109 = (_QWORD *)v435.__r_.__value_.__r.__words[0];
                if (v435.__r_.__value_.__r.__words[0])
                {
                  if (*(_BYTE *)(v435.__r_.__value_.__r.__words[0] + 24))
                  {
                    *(_QWORD *)(v435.__r_.__value_.__r.__words[0] + 8) = 0;
                    if (*v109)
                    {
                      *(_BYTE *)*v109 = 0;
                      if (*v109)
                        MEMORY[0x1CAA44AE4](*v109, 0x1000C8077774924);
                    }
                  }
                  *v109 = 0;
                  v109[2] = 0;
                  MEMORY[0x1CAA44AFC](v109, 0x1010C40A6225C5ALL);
                }
                goto LABEL_222;
              }
              LODWORD(v427) = 0;
              v77 = v437.__r_.__value_.__r.__words[0];
              if (*(_DWORD *)v69 == 1885745766)
              {
                if (*(_DWORD *)(v437.__r_.__value_.__r.__words[0] + 8) == 2
                  || (v93 = (*(uint64_t (**)(std::string::size_type, _DWORD **, uint64_t))(*(_QWORD *)v437.__r_.__value_.__l.__data_
                                                                                                  + 144))(v437.__r_.__value_.__r.__words[0], &v427, 4), v93 < 1)|| (*(_QWORD *)(v77 + 16) += v93, v93 != 4))
                {
                  v98 = (std::__shared_weak_count *)v437.__r_.__value_.__l.__size_;
                  *(_OWORD *)&v437.__r_.__value_.__l.__data_ = 0uLL;
                  if (v98)
                  {
                    v99 = (unint64_t *)&v98->__shared_owners_;
                    do
                      v100 = __ldaxr(v99);
                    while (__stlxr(v100 - 1, v99));
                    if (!v100)
                    {
                      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                      std::__shared_weak_count::__release_weak(v98);
                    }
                  }
                  sub_1C99072C4(&v424);
                  sub_1C9907EC4(buf, &v424, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/utils/src/FilePack.cpp", 156, "Could not read filepack header version", v399);
                  sub_1C9909318((uint64_t)buf);
                  v74 = (std::__shared_weak_count *)v424.__r_.__value_.__l.__size_;
                  if (!v424.__r_.__value_.__l.__size_)
                    goto LABEL_214;
                  v101 = (unint64_t *)(v424.__r_.__value_.__l.__size_ + 8);
                  do
                    v76 = __ldaxr(v101);
                  while (__stlxr(v76 - 1, v101));
                  goto LABEL_156;
                }
                if ((_DWORD)v427 != 1)
                {
                  v94 = (std::__shared_weak_count *)v437.__r_.__value_.__l.__size_;
                  *(_OWORD *)&v437.__r_.__value_.__l.__data_ = 0uLL;
                  if (v94)
                  {
                    v95 = (unint64_t *)&v94->__shared_owners_;
                    do
                      v96 = __ldaxr(v95);
                    while (__stlxr(v96 - 1, v95));
                    if (!v96)
                    {
                      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                      std::__shared_weak_count::__release_weak(v94);
                    }
                  }
                  sub_1C99072C4(&v424);
                  sub_1C9907EC4(buf, &v424, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/utils/src/FilePack.cpp", 162, "Unsupported filepack header version %u", (char)v427);
                  sub_1C9909318((uint64_t)buf);
                  v74 = (std::__shared_weak_count *)v424.__r_.__value_.__l.__size_;
                  if (!v424.__r_.__value_.__l.__size_)
                    goto LABEL_214;
                  v97 = (unint64_t *)(v424.__r_.__value_.__l.__size_ + 8);
                  do
                    v76 = __ldaxr(v97);
                  while (__stlxr(v76 - 1, v97));
                  goto LABEL_156;
                }
              }
              v433.__r_.__value_.__r.__words[0] = 0;
              if (*(_DWORD *)(v77 + 8) == 2
                || (v78 = (*(uint64_t (**)(std::string::size_type, std::string *, uint64_t))(*(_QWORD *)v77 + 144))(v77, &v433, 8), v78 < 1)|| (v79 = *(_QWORD *)(v77 + 16) + v78, *(_QWORD *)(v77 + 16) = v79, v78 != 8))
              {
                v89 = (std::__shared_weak_count *)v437.__r_.__value_.__l.__size_;
                *(_OWORD *)&v437.__r_.__value_.__l.__data_ = 0uLL;
                if (v89)
                {
                  v90 = (unint64_t *)&v89->__shared_owners_;
                  do
                    v91 = __ldaxr(v90);
                  while (__stlxr(v91 - 1, v90));
                  if (!v91)
                  {
                    ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
                    std::__shared_weak_count::__release_weak(v89);
                  }
                }
                sub_1C99072C4(&v424);
                sub_1C9907EC4(buf, &v424, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/utils/src/FilePack.cpp", 170, "Could not load filepack header", v399);
                sub_1C9909318((uint64_t)buf);
                v74 = (std::__shared_weak_count *)v424.__r_.__value_.__l.__size_;
                if (!v424.__r_.__value_.__l.__size_)
                  goto LABEL_214;
                v92 = (unint64_t *)(v424.__r_.__value_.__l.__size_ + 8);
                do
                  v76 = __ldaxr(v92);
                while (__stlxr(v76 - 1, v92));
                goto LABEL_156;
              }
              v80 = v433.__r_.__value_.__r.__words[0];
              LODWORD(v424.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v77 + 8);
              v424.__r_.__value_.__r.__words[2] = 0;
              v424.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E8294ED0;
              v81 = (_QWORD *)operator new();
              *v81 = v77;
              v81[1] = v77;
              v82 = v437.__r_.__value_.__l.__size_;
              v81[2] = v437.__r_.__value_.__l.__size_;
              if (v82)
              {
                v83 = (unint64_t *)(v82 + 8);
                do
                  v84 = __ldxr(v83);
                while (__stxr(v84 + 1, v83));
              }
              v81[3] = v79;
              v81[4] = v80;
              v403 = v80;
              *(_QWORD *)v425 = v81;
              (*(void (**)(uint64_t, uint64_t))(v424.__r_.__value_.__r.__words[0] + 128))((uint64_t)&v424, 0);
              LODWORD(v421) = v424.__r_.__value_.__r.__words[1];
              v422 = 0;
              *(_QWORD *)v420 = &off_1E8295070;
              v85 = operator new();
              *(_QWORD *)v85 = &v424;
              *(_OWORD *)(v85 + 8) = 0u;
              *(_OWORD *)(v85 + 24) = 0u;
              *(_OWORD *)(v85 + 40) = 0u;
              v86 = operator new(0x10uLL);
              *v86 = 0;
              v86[1] = 0;
              *(_QWORD *)(v85 + 56) = v86;
              *(_QWORD *)(v85 + 64) = v86 + 2;
              *(_QWORD *)(v85 + 72) = v86 + 2;
              *(_QWORD *)(v85 + 80) = 0;
              *(_BYTE *)(v85 + 88) = 0;
              *(_DWORD *)(v85 + 92) = -2;
              v423 = (std::string *)v85;
              sub_1C991B348((uint64_t)v420);
              v429 = 0;
              if ((_DWORD)v421 == 2
                || (v87 = (*(unint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v420
                                                                                                 + 144))((uint64_t)v420, (uint64_t)&v429, 8uLL), v87 < 1)|| (v422 += v87, v87 != 8))
              {
                *(_OWORD *)&v437.__r_.__value_.__l.__data_ = 0uLL;
                if (v82)
                {
                  v102 = (unint64_t *)(v82 + 8);
                  do
                    v103 = __ldaxr(v102);
                  while (__stlxr(v103 - 1, v102));
                  if (!v103)
                  {
                    (*(void (**)(std::string::size_type))(*(_QWORD *)v82 + 16))(v82);
                    v104 = (std::__shared_weak_count *)v82;
LABEL_206:
                    std::__shared_weak_count::__release_weak(v104);
                  }
                }
              }
              else
              {
                v88 = v429;
                if ((_DWORD)v427)
                {
                  v401 = 0;
                }
                else if ((uint64_t)v88 <= (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v77 + 104))(v77))
                {
                  v401 = 0;
                  v88 = v429;
                }
                else
                {
                  v88 = (void *)bswap64((unint64_t)v429);
                  v429 = v88;
                  v401 = 1;
                }
                if ((uint64_t)v88 <= (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v77 + 104))(v77))
                {
                  v219 = (uint64_t *)(v403 + v79);
                  (*(void (**)(std::string::size_type))(*(_QWORD *)v77 + 104))(v77);
                  if ((uint64_t)v429 < 1)
                  {
LABEL_462:
                    if (v219 != (uint64_t *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v77 + 104))(v77))
                    {
                      sub_1C99072C4(&v441);
                      (*(void (**)(std::string::size_type))(*(_QWORD *)v77 + 104))(v77);
                      sub_1C9907EC4(buf, &v441, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/utils/src/FilePack.cpp", 244, "file size of filepack incorrect: %lld - %lld ", (char)v219);
                      sub_1C9909318((uint64_t)buf);
                      v230 = (std::__shared_weak_count *)*((_QWORD *)&v441 + 1);
                      if (*((_QWORD *)&v441 + 1))
                      {
                        v231 = (unint64_t *)(*((_QWORD *)&v441 + 1) + 8);
                        do
                          v232 = __ldaxr(v231);
                        while (__stlxr(v232 - 1, v231));
                        if (!v232)
                        {
                          ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
                          std::__shared_weak_count::__release_weak(v230);
                        }
                      }
                      v233 = (std::__shared_weak_count *)v437.__r_.__value_.__l.__size_;
                      *(_OWORD *)&v437.__r_.__value_.__l.__data_ = 0uLL;
                      if (v233)
                      {
                        v234 = (unint64_t *)&v233->__shared_owners_;
                        do
                          v235 = __ldaxr(v234);
                        while (__stlxr(v235 - 1, v234));
                        if (!v235)
                        {
                          ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
                          std::__shared_weak_count::__release_weak(v233);
                        }
                      }
LABEL_473:
                      sub_1C9887678(*(char **)(v53 + 40));
                      *(_QWORD *)(v53 + 40) = 0;
                      *(_QWORD *)(v53 + 48) = 0;
                      *(_QWORD *)(v53 + 32) = v53 + 40;
                    }
                  }
                  else
                  {
                    v220 = 0;
                    while (1)
                    {
                      __n = 0;
                      *(_QWORD *)&v432 = 0;
                      if ((_DWORD)v421 != 2)
                      {
                        v221 = (*(unint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v420 + 144))((uint64_t)v420, (uint64_t)&__n, 8uLL);
                        if (v221 >= 1)
                          v422 += v221;
                        if ((_DWORD)v421 != 2)
                        {
                          v222 = (*(unint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v420 + 144))((uint64_t)v420, (uint64_t)&v432, 8uLL);
                          if (v222 >= 1)
                            v422 += v222;
                        }
                      }
                      if ((v401 & 1) != 0)
                      {
                        v223 = bswap64(__n);
                        __n = v223;
                        *(_QWORD *)&v432 = bswap64(v432);
                      }
                      else
                      {
                        v223 = __n;
                      }
                      if (v223 >= 0x10000)
                        break;
                      v224 = (uint64_t)v219 + v432;
                      if (v224 > (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v77 + 104))(v77))
                      {
                        sub_1C99072C4(&v441);
                        (*(void (**)(std::string::size_type))(*(_QWORD *)v77 + 104))(v77);
                        sub_1C9907EC4(buf, &v441, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/utils/src/FilePack.cpp", 228, "file size of filepack incorrect: %lld+%lld = %lld - %lld ", (char)v219);
                        sub_1C9909318((uint64_t)buf);
                        v240 = (std::__shared_weak_count *)*((_QWORD *)&v441 + 1);
                        if (*((_QWORD *)&v441 + 1))
                        {
                          v241 = (unint64_t *)(*((_QWORD *)&v441 + 1) + 8);
                          do
                            v242 = __ldaxr(v241);
                          while (__stlxr(v242 - 1, v241));
                          if (!v242)
                          {
                            ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
                            std::__shared_weak_count::__release_weak(v240);
                          }
                        }
                        v243 = (std::__shared_weak_count *)v437.__r_.__value_.__l.__size_;
                        *(_OWORD *)&v437.__r_.__value_.__l.__data_ = 0uLL;
                        if (v243)
                        {
                          v244 = (unint64_t *)&v243->__shared_owners_;
                          do
                            v245 = __ldaxr(v244);
                          while (__stlxr(v245 - 1, v244));
                          if (!v245)
                          {
                            ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
                            std::__shared_weak_count::__release_weak(v243);
                          }
                        }
                        goto LABEL_473;
                      }
                      memset(buf, 0, 24);
                      if (__n)
                        std::string::append((std::string *)buf, __n, 0);
                      if ((_DWORD)v421 != 2)
                      {
                        v225 = buf[23] >= 0 ? buf[23] : *(_QWORD *)&buf[8];
                        v226 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
                        v227 = (*(unint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v420 + 144))((uint64_t)v420, (uint64_t)v226, v225);
                        if (v227 >= 1)
                          v422 += v227;
                      }
                      sub_1C991BE3C((uint64_t)&v441, buf);
                      if ((buf[23] & 0x80000000) != 0)
                        operator delete(*(void **)buf);
                      *(_OWORD *)buf = v441;
                      *(_QWORD *)&buf[16] = v442;
                      sub_1C991C624((uint64_t **)(v53 + 32), (const void **)buf, (uint64_t)buf)[7] = v219;
                      v228 = (uint64_t *)v432;
                      sub_1C991C624((uint64_t **)(v53 + 32), (const void **)buf, (uint64_t)buf)[8] = v228;
                      v229 = v432;
                      if ((buf[23] & 0x80000000) != 0)
                        operator delete(*(void **)buf);
                      v219 = (uint64_t *)((char *)v219 + v229);
                      if (++v220 >= (uint64_t)v429)
                        goto LABEL_462;
                    }
                    sub_1C99072C4(&v441);
                    sub_1C9907EC4(buf, &v441, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/utils/src/FilePack.cpp", 221, "File pack seems to be corrupt, an extremely long filename is used", v399);
                    sub_1C9909318((uint64_t)buf);
                    v236 = (std::__shared_weak_count *)*((_QWORD *)&v441 + 1);
                    if (*((_QWORD *)&v441 + 1))
                    {
                      v237 = (unint64_t *)(*((_QWORD *)&v441 + 1) + 8);
                      do
                        v238 = __ldaxr(v237);
                      while (__stlxr(v238 - 1, v237));
                      if (!v238)
                      {
                        ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
                        std::__shared_weak_count::__release_weak(v236);
                      }
                    }
                    v216 = v437.__r_.__value_.__l.__size_;
                    *(_OWORD *)&v437.__r_.__value_.__l.__data_ = 0uLL;
                    if (v216)
                    {
                      v239 = (unint64_t *)(v216 + 8);
                      do
                        v218 = __ldaxr(v239);
                      while (__stlxr(v218 - 1, v239));
                      goto LABEL_431;
                    }
                  }
                  goto LABEL_207;
                }
                sub_1C99072C4(&v441);
                sub_1C9907EC4(buf, &v441, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/utils/src/FilePack.cpp", 201, "File pack seems to be corrupt, the number of files is insanely large", v399);
                sub_1C9909318((uint64_t)buf);
                v213 = (std::__shared_weak_count *)*((_QWORD *)&v441 + 1);
                if (*((_QWORD *)&v441 + 1))
                {
                  v214 = (unint64_t *)(*((_QWORD *)&v441 + 1) + 8);
                  do
                    v215 = __ldaxr(v214);
                  while (__stlxr(v215 - 1, v214));
                  if (!v215)
                  {
                    ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
                    std::__shared_weak_count::__release_weak(v213);
                  }
                }
                v216 = v437.__r_.__value_.__l.__size_;
                *(_OWORD *)&v437.__r_.__value_.__l.__data_ = 0uLL;
                if (v216)
                {
                  v217 = (unint64_t *)(v216 + 8);
                  do
                    v218 = __ldaxr(v217);
                  while (__stlxr(v218 - 1, v217));
LABEL_431:
                  if (!v218)
                  {
                    (*(void (**)(std::string::size_type))(*(_QWORD *)v216 + 16))(v216);
                    v104 = (std::__shared_weak_count *)v216;
                    goto LABEL_206;
                  }
                }
              }
LABEL_207:
              *(_QWORD *)v420 = &off_1E8295070;
              sub_1C991B1D8(v423);
              sub_1C991B2A0(&v423);
              v424.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E8294ED0;
              v105 = *(_QWORD *)v425;
              if (*(_QWORD *)v425)
              {
                v106 = *(std::__shared_weak_count **)(*(_QWORD *)v425 + 16);
                if (v106)
                {
                  v107 = (unint64_t *)&v106->__shared_owners_;
                  do
                    v108 = __ldaxr(v107);
                  while (__stlxr(v108 - 1, v107));
                  if (!v108)
                  {
                    ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
                    std::__shared_weak_count::__release_weak(v106);
                  }
                }
                MEMORY[0x1CAA44AFC](v105, 0x1060C40484961F0);
              }
              goto LABEL_214;
            }
          }
          memmove(v65, v64, v63);
          goto LABEL_139;
        }
        v42 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
        if ((v42 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
        {
          qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
          __cxa_guard_release(&qword_1ED52ACD0);
        }
        v43 = qword_1ED52ACE0;
        if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_1C9870000, v43, OS_LOG_TYPE_ERROR, "no valid tensor model", buf, 2u);
          if ((SHIBYTE(v422) & 0x80000000) == 0)
            goto LABEL_85;
        }
        else if ((SHIBYTE(v422) & 0x80000000) == 0)
        {
          goto LABEL_85;
        }
LABEL_80:
        operator delete(*(void **)v420);
        if (!v41)
          goto LABEL_340;
        goto LABEL_86;
      }
    }
    cva::ItemHandler::ItemHandler();
    cva::DictionaryHandler::setItem(v7, CFSTR("blendshape_names"), (const cva::ItemHandler *)buf);
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
    goto LABEL_27;
  }
  v17 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
  if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
  {
    qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
    __cxa_guard_release(&qword_1ED52ACD0);
  }
  v18 = qword_1ED52ACE0;
  if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1C9870000, v18, OS_LOG_TYPE_ERROR, "cannot find resources", buf, 2u);
  }
  *a1 = 0;
  a1[1] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_25:
    operator delete(__p.__r_.__value_.__l.__data_);
  return kdebug_trace();
}

void sub_1C98D674C(uint64_t a1, uint64_t a2, int a3, cva::DictionaryHandler *a4)
{
  int v8;
  const UInt8 *v9;
  CFIndex v10;
  uint64_t v11;
  cva::ItemHandler *v12;
  const __CFData *v13;
  const UInt8 *v14;
  const UInt8 *v15;
  cva::ItemHandler *v16;
  const __CFData *v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  char *v21;
  _QWORD *v22;
  int ***i;
  int **v24;
  int *v25;
  int **v26;
  uint64_t v27;
  int **v28;
  int **v29;
  unint64_t *v30;
  unint64_t v31;
  char *v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  int *j;
  int v37;
  int **v38;
  unint64_t *v39;
  unint64_t v40;
  char *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  int v45;
  int **v46;
  int **v47;
  unint64_t *v48;
  unint64_t v49;
  char *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  BOOL v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  int v67;
  char *v68;
  char *v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  int v76;
  char *v77;
  char *v78;
  unint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  _DWORD *v87;
  int *v88;
  int v89;
  int v90;
  float *v91;
  float v92;
  float v93;
  int v94;
  int v95;
  float *v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  unint64_t v102;
  _DWORD *v103;
  _DWORD *v104;
  _DWORD *v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  char *v110;
  _DWORD *v111;
  char *v112;
  char *v113;
  uint64_t v114;
  int v115;
  int *v116;
  int v117;
  int v118;
  int v119;
  unint64_t v120;
  _DWORD *v121;
  _DWORD *v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  char *v127;
  char *v128;
  char *v129;
  uint64_t v130;
  int v131;
  int *v132;
  int v133;
  int v134;
  int v135;
  unint64_t v136;
  _DWORD *v137;
  _DWORD *v138;
  _DWORD *v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  char *v143;
  _DWORD *v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  char *v149;
  char *v150;
  char *v151;
  uint64_t v152;
  int v153;
  char *v154;
  int *v155;
  int v156;
  int v157;
  int v158;
  unint64_t v159;
  _DWORD *v160;
  _DWORD *v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  char *v165;
  char *v166;
  char *v167;
  uint64_t v168;
  int v169;
  int *v170;
  int v171;
  int v172;
  int v173;
  unint64_t v174;
  _DWORD *v175;
  _DWORD *v176;
  _DWORD *v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  char *v181;
  char *v182;
  char *v183;
  uint64_t v184;
  int v185;
  char *v186;
  int *v187;
  int v188;
  int v189;
  int v190;
  unint64_t v191;
  _DWORD *v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  char *v196;
  char *v197;
  char *v198;
  uint64_t v199;
  int v200;
  char *v201;
  char *v202;
  uint64_t v203;
  int v204;
  _DWORD *v205;
  int v206;
  int v207;
  int v208;
  unint64_t v209;
  _DWORD *v210;
  _DWORD *v211;
  unint64_t v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t v215;
  char *v216;
  char *v217;
  char *v218;
  uint64_t v219;
  int v220;
  int *v221;
  int v222;
  int v223;
  int v224;
  unint64_t v225;
  _DWORD *v226;
  _DWORD *v227;
  _DWORD *v228;
  unint64_t v229;
  unint64_t v230;
  unint64_t v231;
  char *v232;
  char *v233;
  char *v234;
  uint64_t v235;
  int v236;
  char *v237;
  _DWORD *v238;
  int v239;
  int v240;
  int v241;
  unint64_t v242;
  _DWORD *v243;
  _DWORD *v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  char *v248;
  char *v249;
  char *v250;
  uint64_t v251;
  int v252;
  int *v253;
  int v254;
  int v255;
  int v256;
  unint64_t v257;
  _DWORD *v258;
  _DWORD *v259;
  unint64_t v260;
  unint64_t v261;
  unint64_t v262;
  char *v263;
  char *v264;
  char *v265;
  uint64_t v266;
  int v267;
  char *v268;
  _DWORD *v269;
  unint64_t v270;
  _DWORD *v271;
  unint64_t v272;
  unint64_t v273;
  unint64_t v274;
  char *v275;
  uint64_t v276;
  int v277;
  unint64_t v278;
  int *v279;
  unint64_t v280;
  int32x4_t v281;
  int32x4_t *v282;
  int32x4_t v283;
  int32x4_t v284;
  unint64_t v285;
  int *v286;
  unint64_t v287;
  unint64_t v288;
  uint64_t v289;
  _BYTE *v290;
  _BYTE *v291;
  int64_t v292;
  char *v293;
  uint64_t v294;
  unint64_t v295;
  uint64_t v296;
  char *v297;
  uint64_t v298;
  _BYTE *v299;
  _BYTE *v300;
  int64_t v301;
  char *v302;
  uint64_t v303;
  unint64_t v304;
  uint64_t v305;
  char *v306;
  uint64_t v307;
  _BYTE *v308;
  _BYTE *v309;
  int64_t v310;
  char *v311;
  uint64_t v312;
  unint64_t v313;
  uint64_t v314;
  char *v315;
  uint64_t v316;
  char *v317;
  size_t v318;
  uint64_t v319;
  std::__shared_weak_count *v320;
  unint64_t *v321;
  unint64_t v322;
  std::__shared_weak_count *v323;
  unint64_t *v324;
  unint64_t v325;
  _OWORD *v326;
  char *v327;
  _QWORD *v328;
  uint64_t v329;
  unint64_t *v330;
  unint64_t v331;
  int *v332;
  unint64_t v333;
  __int128 v334;
  uint64_t v335;
  unint64_t *v336;
  unint64_t v337;
  char *v338;
  std::__shared_weak_count *v339;
  unint64_t *v340;
  unint64_t v341;
  std::__shared_weak_count *v342;
  unint64_t *v343;
  unint64_t v344;
  uint64_t k;
  _DWORD *v346;
  _QWORD *v347;
  unint64_t v348;
  char *v349;
  char *v350;
  uint64_t v351;
  unint64_t v352;
  uint64_t v353;
  _BYTE *v354;
  _DWORD *v355;
  unint64_t v356;
  unint64_t v357;
  uint64_t v358;
  _OWORD *v359;
  char *v360;
  uint64_t v361;
  __int128 v362;
  int v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  void *v367;
  void *v368;
  std::__shared_weak_count *v369;
  unint64_t *v370;
  unint64_t v371;
  _QWORD *v372;
  const UInt8 *v373;
  const UInt8 *v374;
  cva::ItemHandler *v375;
  const __CFData *v376;
  const UInt8 *v377;
  const UInt8 *v378;
  cva::ItemHandler *v379;
  const __CFData *v380;
  char *v381;
  char *v382;
  unint64_t v383;
  uint64_t v384;
  uint64_t **v385;
  uint64_t v386;
  _QWORD *v387;
  uint64_t *v388;
  uint64_t v389;
  _QWORD *v390;
  _QWORD *v391;
  _QWORD *v392;
  cva::DictionaryHandler *v393;
  char *v394;
  _QWORD *v395;
  unint64_t v396;
  _BYTE v397[16];
  uint64_t v398;
  std::__shared_weak_count *v399;
  uint64_t v400;
  std::__shared_weak_count *v401;
  uint64_t *v402[36];
  int *v403;
  int *v404;
  uint64_t v405;

  cva::DictionaryHandler::DictionaryHandler((cva::DictionaryHandler *)v397);
  if (*(_BYTE *)(a2 + 24))
  {
    v8 = *(_DWORD *)(a2 + 16);
    if (!v8)
      goto LABEL_7;
    v9 = *(const UInt8 **)a2;
    v10 = 12 * v8;
  }
  else
  {
    v9 = *(const UInt8 **)a1;
    v11 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)a1 == v11)
      goto LABEL_7;
    v10 = (v11 - (uint64_t)v9) << 30 >> 30;
  }
  v12 = CFDataCreate(0, v9, v10);
  cva::ItemHandler::createData(v12, v13);
  cva::DictionaryHandler::setItem((cva::DictionaryHandler *)v397, CFSTR("mesh_vertices"), (const cva::ItemHandler *)v402);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v402);
  CFRelease(v12);
LABEL_7:
  v14 = *(const UInt8 **)(a1 + 48);
  v15 = *(const UInt8 **)(a1 + 56);
  if (v14 != v15)
  {
    v16 = CFDataCreate(0, v14, ((v15 - v14) << 30 >> 30) & 0xFFFFFFFFFFFFFFF8);
    cva::ItemHandler::createData(v16, v17);
    cva::DictionaryHandler::setItem((cva::DictionaryHandler *)v397, CFSTR("mesh_texcoords"), (const cva::ItemHandler *)v402);
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v402);
    CFRelease(v16);
  }
  if (a3)
  {
    v393 = a4;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 48);
    if (*(_QWORD *)(a1 + 280))
    {
      v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 2);
      v19 = ((uint64_t)(*(_QWORD *)(a1 + 176) - *(_QWORD *)(a1 + 168)) >> 3) + (int)v18;
      if (v19)
      {
        if (v19 >> 60)
          goto LABEL_462;
        v20 = 16 * v19;
        v21 = (char *)operator new(16 * v19);
        bzero(v21, v20);
        v19 = (unint64_t)&v21[v20];
      }
      else
      {
        v21 = 0;
      }
      v22 = *(_QWORD **)(a1 + 264);
      v394 = (char *)v19;
      if (v22 != (_QWORD *)(a1 + 272))
      {
        do
        {
          for (i = (int ***)v22[7]; i != (int ***)v22[8]; i += 2)
          {
            v24 = *i;
            v25 = (*i)[3];
            v26 = *i;
            if (v25 != (*i)[4])
            {
              do
              {
                v27 = *v25;
                v29 = *i;
                v28 = i[1];
                if (v28)
                {
                  v30 = (unint64_t *)(v28 + 1);
                  do
                    v31 = __ldxr(v30);
                  while (__stxr(v31 + 1, v30));
                }
                v32 = &v21[16 * v27];
                v33 = (std::__shared_weak_count *)*((_QWORD *)v32 + 1);
                *(_QWORD *)v32 = v29;
                *((_QWORD *)v32 + 1) = v28;
                if (v33)
                {
                  p_shared_owners = (unint64_t *)&v33->__shared_owners_;
                  do
                    v35 = __ldaxr(p_shared_owners);
                  while (__stlxr(v35 - 1, p_shared_owners));
                  if (!v35)
                  {
                    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
                    std::__shared_weak_count::__release_weak(v33);
                  }
                }
                ++v25;
              }
              while (v25 != v24[4]);
              v26 = *i;
            }
            for (j = *v26; j != v26[1]; ++j)
            {
              v37 = *j;
              v38 = i[1];
              if (v38)
              {
                v39 = (unint64_t *)(v38 + 1);
                do
                  v40 = __ldxr(v39);
                while (__stxr(v40 + 1, v39));
              }
              v41 = &v21[32 * v37 + 16 * (int)v18];
              *(_QWORD *)v41 = v26;
              v42 = (std::__shared_weak_count *)*((_QWORD *)v41 + 1);
              *((_QWORD *)v41 + 1) = v38;
              if (v42)
              {
                v43 = (unint64_t *)&v42->__shared_owners_;
                do
                  v44 = __ldaxr(v43);
                while (__stlxr(v44 - 1, v43));
                if (!v44)
                {
                  ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                  std::__shared_weak_count::__release_weak(v42);
                }
              }
              v45 = *j;
              v47 = *i;
              v46 = i[1];
              if (v46)
              {
                v48 = (unint64_t *)(v46 + 1);
                do
                  v49 = __ldxr(v48);
                while (__stxr(v49 + 1, v48));
              }
              v50 = &v21[32 * v45 + 16 + 16 * (int)v18];
              *(_QWORD *)v50 = v47;
              v51 = (std::__shared_weak_count *)*((_QWORD *)v50 + 1);
              *((_QWORD *)v50 + 1) = v46;
              if (v51)
              {
                v52 = (unint64_t *)&v51->__shared_owners_;
                do
                  v53 = __ldaxr(v52);
                while (__stlxr(v53 - 1, v52));
                if (!v53)
                {
                  ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                  std::__shared_weak_count::__release_weak(v51);
                }
              }
              v26 = *i;
            }
            v24[4] = v24[3];
          }
          v54 = (_QWORD *)v22[1];
          if (v54)
          {
            do
            {
              v55 = v54;
              v54 = (_QWORD *)*v54;
            }
            while (v54);
          }
          else
          {
            do
            {
              v55 = (_QWORD *)v22[2];
              v56 = *v55 == (_QWORD)v22;
              v22 = v55;
            }
            while (!v56);
          }
          v22 = v55;
        }
        while (v55 != (_QWORD *)(a1 + 272));
      }
    }
    else
    {
      v21 = 0;
      v394 = 0;
    }
    v57 = *(char **)(a1 + 96);
    v58 = *(char **)(a1 + 104);
    v59 = *(_QWORD *)(a1 + 168);
    v60 = *(_QWORD *)(a1 + 176);
    v395 = (_QWORD *)(a1 + 96);
    v61 = 0xAAAAAAAAAAAAAAABLL * ((v58 - v57) >> 2) + ((v60 - v59) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 112) - (_QWORD)v57) >> 2) < v61)
    {
      if (v61 > 0x1555555555555555)
        goto LABEL_462;
      v62 = 12 * v61;
      v63 = (char *)operator new(12 * v61);
      v64 = &v63[4 * ((v58 - v57) >> 2)];
      v65 = v64;
      if (v58 != v57)
      {
        v65 = &v63[4 * ((v58 - v57) >> 2)];
        do
        {
          v66 = *(_QWORD *)(v58 - 12);
          v58 -= 12;
          v67 = *((_DWORD *)v58 + 2);
          *(_QWORD *)(v65 - 12) = v66;
          v65 -= 12;
          *((_DWORD *)v65 + 2) = v67;
        }
        while (v58 != v57);
      }
      *(_QWORD *)(a1 + 96) = v65;
      *(_QWORD *)(a1 + 104) = v64;
      *(_QWORD *)(a1 + 112) = &v63[v62];
      if (v57)
      {
        operator delete(v57);
        v59 = *(_QWORD *)(a1 + 168);
        v60 = *(_QWORD *)(a1 + 176);
      }
    }
    if (*(_QWORD *)(a1 + 32) != *(_QWORD *)(a1 + 24))
    {
      v68 = *(char **)(a1 + 120);
      v69 = *(char **)(a1 + 128);
      v70 = 0xAAAAAAAAAAAAAAABLL * ((v69 - v68) >> 2) + ((v60 - v59) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 136) - (_QWORD)v68) >> 2) < v70)
      {
        if (v70 > 0x1555555555555555)
          goto LABEL_462;
        v71 = 12 * v70;
        v72 = (char *)operator new(12 * v70);
        v73 = &v72[4 * ((v69 - v68) >> 2)];
        v74 = v73;
        if (v69 != v68)
        {
          v74 = &v72[4 * ((v69 - v68) >> 2)];
          do
          {
            v75 = *(_QWORD *)(v69 - 12);
            v69 -= 12;
            v76 = *((_DWORD *)v69 + 2);
            *(_QWORD *)(v74 - 12) = v75;
            v74 -= 12;
            *((_DWORD *)v74 + 2) = v76;
          }
          while (v69 != v68);
        }
        *(_QWORD *)(a1 + 120) = v74;
        *(_QWORD *)(a1 + 128) = v73;
        *(_QWORD *)(a1 + 136) = &v72[v71];
        if (v68)
        {
          operator delete(v68);
          v59 = *(_QWORD *)(a1 + 168);
          v60 = *(_QWORD *)(a1 + 176);
        }
      }
    }
    if (*(_QWORD *)(a1 + 56) != *(_QWORD *)(a1 + 48))
    {
      v77 = *(char **)(a1 + 144);
      v78 = *(char **)(a1 + 152);
      v79 = 0xAAAAAAAAAAAAAAABLL * ((v78 - v77) >> 2) + ((v60 - v59) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 160) - (_QWORD)v77) >> 2) < v79)
      {
        if (v79 > 0x1555555555555555)
          goto LABEL_462;
        v80 = 12 * v79;
        v81 = (char *)operator new(12 * v79);
        v82 = &v81[4 * ((v78 - v77) >> 2)];
        v83 = v82;
        if (v78 != v77)
        {
          v83 = &v81[4 * ((v78 - v77) >> 2)];
          do
          {
            v84 = *(_QWORD *)(v78 - 12);
            v78 -= 12;
            v85 = *((_DWORD *)v78 + 2);
            *(_QWORD *)(v83 - 12) = v84;
            v83 -= 12;
            *((_DWORD *)v83 + 2) = v85;
          }
          while (v78 != v77);
        }
        *(_QWORD *)(a1 + 144) = v83;
        *(_QWORD *)(a1 + 152) = v82;
        *(_QWORD *)(a1 + 160) = &v81[v80];
        if (v77)
        {
          operator delete(v77);
          v59 = *(_QWORD *)(a1 + 168);
          v60 = *(_QWORD *)(a1 + 176);
        }
      }
    }
    if ((int)((unint64_t)(v60 - v59) >> 4) >= 1)
    {
      v86 = 0;
      while (1)
      {
        v88 = (int *)(v59 + 16 * v86);
        v89 = *v88;
        v90 = v88[1];
        v91 = (float *)(*(_QWORD *)a1 + 12 * *v88);
        v92 = v91[1];
        v93 = v91[2];
        v94 = v88[2];
        v95 = v88[3];
        v96 = (float *)(*(_QWORD *)a1 + 12 * v94);
        v97 = *v96 - *v91;
        v98 = v96[1] - v92;
        v99 = v96[2] - v93;
        v100 = (float)((float)((float)(*(float *)(*(_QWORD *)a1 + 12 * v90) - *v91) * v97)
                     + (float)((float)(*(float *)(*(_QWORD *)a1 + 12 * v90 + 4) - v92) * v98))
             + (float)((float)(*(float *)(*(_QWORD *)a1 + 12 * v90 + 8) - v93) * v99);
        v101 = (float)((float)(v97 * (float)(*(float *)(*(_QWORD *)a1 + 12 * v95) - *v91))
                     + (float)(v98 * (float)(*(float *)(*(_QWORD *)a1 + 12 * v95 + 4) - v92)))
             + (float)(v99 * (float)(*(float *)(*(_QWORD *)a1 + 12 * v95 + 8) - v93));
        if (v100 >= 0.0 && v101 <= 0.0)
        {
          v103 = *(_DWORD **)(a1 + 104);
          v102 = *(_QWORD *)(a1 + 112);
LABEL_92:
          if ((unint64_t)v103 >= v102)
          {
            v105 = (_DWORD *)*v395;
            v106 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v103 - *v395) >> 2);
            v107 = v106 + 1;
            if (v106 + 1 > 0x1555555555555555)
              goto LABEL_462;
            v108 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v102 - (_QWORD)v105) >> 2);
            if (2 * v108 > v107)
              v107 = 2 * v108;
            if (v108 >= 0xAAAAAAAAAAAAAAALL)
              v109 = 0x1555555555555555;
            else
              v109 = v107;
            if (v109)
            {
              if (v109 > 0x1555555555555555)
                goto LABEL_463;
              v110 = (char *)operator new(12 * v109);
            }
            else
            {
              v110 = 0;
            }
            v112 = &v110[12 * v106];
            *(_DWORD *)v112 = v89;
            *((_DWORD *)v112 + 1) = v90;
            *((_DWORD *)v112 + 2) = v94;
            v113 = v112;
            if (v103 != v105)
            {
              do
              {
                v114 = *(_QWORD *)(v103 - 3);
                v103 -= 3;
                v115 = v103[2];
                *(_QWORD *)(v113 - 12) = v114;
                v113 -= 12;
                *((_DWORD *)v113 + 2) = v115;
              }
              while (v103 != v105);
              v103 = (_DWORD *)*v395;
            }
            v104 = v112 + 12;
            *(_QWORD *)(a1 + 96) = v113;
            *(_QWORD *)(a1 + 104) = v112 + 12;
            *(_QWORD *)(a1 + 112) = &v110[12 * v109];
            if (v103)
              operator delete(v103);
          }
          else
          {
            *v103 = v89;
            v103[1] = v90;
            v104 = v103 + 3;
            v103[2] = v94;
          }
          *(_QWORD *)(a1 + 104) = v104;
          v116 = (int *)(*(_QWORD *)(a1 + 168) + 16 * v86);
          v117 = *v116;
          v119 = v116[2];
          v118 = v116[3];
          v120 = *(_QWORD *)(a1 + 112);
          if ((unint64_t)v104 < v120)
          {
            *v104 = v117;
            v104[1] = v119;
            v121 = v104 + 3;
            v104[2] = v118;
            goto LABEL_129;
          }
          v122 = (_DWORD *)*v395;
          v123 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v104 - *v395) >> 2);
          v124 = v123 + 1;
          if (v123 + 1 > 0x1555555555555555)
            goto LABEL_462;
          v125 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v120 - (_QWORD)v122) >> 2);
          if (2 * v125 > v124)
            v124 = 2 * v125;
          if (v125 >= 0xAAAAAAAAAAAAAAALL)
            v126 = 0x1555555555555555;
          else
            v126 = v124;
          if (v126)
          {
            if (v126 > 0x1555555555555555)
              goto LABEL_463;
            v127 = (char *)operator new(12 * v126);
          }
          else
          {
            v127 = 0;
          }
          v128 = &v127[12 * v123];
          v129 = &v127[12 * v126];
          *(_DWORD *)v128 = v117;
          *((_DWORD *)v128 + 1) = v119;
          *((_DWORD *)v128 + 2) = v118;
          v121 = v128 + 12;
          if (v104 == v122)
          {
            *(_QWORD *)(a1 + 96) = v128;
            *(_QWORD *)(a1 + 104) = v121;
            *(_QWORD *)(a1 + 112) = v129;
          }
          else
          {
            do
            {
              v130 = *(_QWORD *)(v104 - 3);
              v104 -= 3;
              v131 = v104[2];
              *(_QWORD *)(v128 - 12) = v130;
              v128 -= 12;
              *((_DWORD *)v128 + 2) = v131;
            }
            while (v104 != v122);
            v104 = *(_DWORD **)(a1 + 96);
            *(_QWORD *)(a1 + 96) = v128;
            *(_QWORD *)(a1 + 104) = v121;
            *(_QWORD *)(a1 + 112) = v129;
            if (!v104)
            {
LABEL_129:
              *(_QWORD *)(a1 + 104) = v121;
              if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a1 + 24))
                goto LABEL_175;
              v132 = (int *)(*(_QWORD *)(a1 + 192) + 16 * v86);
              v134 = *v132;
              v133 = v132[1];
              v135 = v132[2];
              v137 = *(_DWORD **)(a1 + 128);
              v136 = *(_QWORD *)(a1 + 136);
              if ((unint64_t)v137 >= v136)
              {
                v139 = *(_DWORD **)(a1 + 120);
                v140 = 0xAAAAAAAAAAAAAAABLL * (v137 - v139) + 1;
                if (v140 > 0x1555555555555555)
                  goto LABEL_462;
                v141 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v136 - (_QWORD)v139) >> 2);
                if (2 * v141 > v140)
                  v140 = 2 * v141;
                if (v141 >= 0xAAAAAAAAAAAAAAALL)
                  v142 = 0x1555555555555555;
                else
                  v142 = v140;
                if (v142)
                {
                  if (v142 > 0x1555555555555555)
                    goto LABEL_463;
                  v143 = (char *)operator new(12 * v142);
                }
                else
                {
                  v143 = 0;
                }
                v150 = &v143[4 * (v137 - v139)];
                *(_DWORD *)v150 = v134;
                *((_DWORD *)v150 + 1) = v133;
                *((_DWORD *)v150 + 2) = v135;
                v151 = v150;
                if (v137 != v139)
                {
                  do
                  {
                    v152 = *(_QWORD *)(v137 - 3);
                    v137 -= 3;
                    v153 = v137[2];
                    *(_QWORD *)(v151 - 12) = v152;
                    v151 -= 12;
                    *((_DWORD *)v151 + 2) = v153;
                  }
                  while (v137 != v139);
                  v137 = *(_DWORD **)(a1 + 120);
                }
                v154 = &v143[12 * v142];
                v138 = v150 + 12;
                *(_QWORD *)(a1 + 120) = v151;
                *(_QWORD *)(a1 + 128) = v150 + 12;
                *(_QWORD *)(a1 + 136) = v154;
                if (v137)
                  operator delete(v137);
              }
              else
              {
                *v137 = v134;
                v137[1] = v133;
                v138 = v137 + 3;
                v137[2] = v135;
              }
              *(_QWORD *)(a1 + 128) = v138;
              v155 = (int *)(*(_QWORD *)(a1 + 192) + 16 * v86);
              v156 = *v155;
              v158 = v155[2];
              v157 = v155[3];
              v159 = *(_QWORD *)(a1 + 136);
              if ((unint64_t)v138 < v159)
              {
                *v138 = v156;
                v138[1] = v158;
                v160 = v138 + 3;
                v138[2] = v157;
                goto LABEL_174;
              }
              v161 = *(_DWORD **)(a1 + 120);
              v162 = 0xAAAAAAAAAAAAAAABLL * (v138 - v161) + 1;
              if (v162 > 0x1555555555555555)
                goto LABEL_462;
              v163 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v159 - (_QWORD)v161) >> 2);
              if (2 * v163 > v162)
                v162 = 2 * v163;
              if (v163 >= 0xAAAAAAAAAAAAAAALL)
                v164 = 0x1555555555555555;
              else
                v164 = v162;
              if (v164)
              {
                if (v164 > 0x1555555555555555)
                  goto LABEL_463;
                v165 = (char *)operator new(12 * v164);
              }
              else
              {
                v165 = 0;
              }
              v166 = &v165[4 * (v138 - v161)];
              v167 = &v165[12 * v164];
              *(_DWORD *)v166 = v156;
              *((_DWORD *)v166 + 1) = v158;
              *((_DWORD *)v166 + 2) = v157;
              v160 = v166 + 12;
              if (v138 == v161)
              {
                *(_QWORD *)(a1 + 120) = v166;
                *(_QWORD *)(a1 + 128) = v160;
                *(_QWORD *)(a1 + 136) = v167;
              }
              else
              {
                do
                {
                  v168 = *(_QWORD *)(v138 - 3);
                  v138 -= 3;
                  v169 = v138[2];
                  *(_QWORD *)(v166 - 12) = v168;
                  v166 -= 12;
                  *((_DWORD *)v166 + 2) = v169;
                }
                while (v138 != v161);
                v138 = *(_DWORD **)(a1 + 120);
                *(_QWORD *)(a1 + 120) = v166;
                *(_QWORD *)(a1 + 128) = v160;
                *(_QWORD *)(a1 + 136) = v167;
                if (!v138)
                {
LABEL_174:
                  *(_QWORD *)(a1 + 128) = v160;
LABEL_175:
                  if (*(_QWORD *)(a1 + 56) == *(_QWORD *)(a1 + 48))
                    goto LABEL_86;
                  v170 = (int *)(*(_QWORD *)(a1 + 216) + 16 * v86);
                  v172 = *v170;
                  v171 = v170[1];
                  v173 = v170[2];
                  v175 = *(_DWORD **)(a1 + 152);
                  v174 = *(_QWORD *)(a1 + 160);
                  if ((unint64_t)v175 >= v174)
                  {
                    v177 = *(_DWORD **)(a1 + 144);
                    v178 = 0xAAAAAAAAAAAAAAABLL * (v175 - v177) + 1;
                    if (v178 > 0x1555555555555555)
                      goto LABEL_462;
                    v179 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v174 - (_QWORD)v177) >> 2);
                    if (2 * v179 > v178)
                      v178 = 2 * v179;
                    if (v179 >= 0xAAAAAAAAAAAAAAALL)
                      v180 = 0x1555555555555555;
                    else
                      v180 = v178;
                    if (v180)
                    {
                      if (v180 > 0x1555555555555555)
                        goto LABEL_463;
                      v181 = (char *)operator new(12 * v180);
                    }
                    else
                    {
                      v181 = 0;
                    }
                    v182 = &v181[4 * (v175 - v177)];
                    *(_DWORD *)v182 = v172;
                    *((_DWORD *)v182 + 1) = v171;
                    *((_DWORD *)v182 + 2) = v173;
                    v183 = v182;
                    if (v175 != v177)
                    {
                      do
                      {
                        v184 = *(_QWORD *)(v175 - 3);
                        v175 -= 3;
                        v185 = v175[2];
                        *(_QWORD *)(v183 - 12) = v184;
                        v183 -= 12;
                        *((_DWORD *)v183 + 2) = v185;
                      }
                      while (v175 != v177);
                      v175 = *(_DWORD **)(a1 + 144);
                    }
                    v186 = &v181[12 * v180];
                    v176 = v182 + 12;
                    *(_QWORD *)(a1 + 144) = v183;
                    *(_QWORD *)(a1 + 152) = v182 + 12;
                    *(_QWORD *)(a1 + 160) = v186;
                    if (v175)
                      operator delete(v175);
                  }
                  else
                  {
                    *v175 = v172;
                    v175[1] = v171;
                    v176 = v175 + 3;
                    v175[2] = v173;
                  }
                  *(_QWORD *)(a1 + 152) = v176;
                  v187 = (int *)(*(_QWORD *)(a1 + 216) + 16 * v86);
                  v188 = *v187;
                  v189 = v187[2];
                  v190 = v187[3];
                  v191 = *(_QWORD *)(a1 + 160);
                  if ((unint64_t)v176 >= v191)
                  {
                    v192 = *(_DWORD **)(a1 + 144);
                    v193 = 0xAAAAAAAAAAAAAAABLL * (v176 - v192) + 1;
                    if (v193 > 0x1555555555555555)
                      goto LABEL_462;
                    v194 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v191 - (_QWORD)v192) >> 2);
                    if (2 * v194 > v193)
                      v193 = 2 * v194;
                    if (v194 >= 0xAAAAAAAAAAAAAAALL)
                      v195 = 0x1555555555555555;
                    else
                      v195 = v193;
                    if (v195)
                    {
                      if (v195 > 0x1555555555555555)
                        goto LABEL_463;
                      v196 = (char *)operator new(12 * v195);
                    }
                    else
                    {
                      v196 = 0;
                    }
                    v197 = &v196[4 * (v176 - v192)];
                    v198 = &v196[12 * v195];
                    *(_DWORD *)v197 = v188;
                    *((_DWORD *)v197 + 1) = v189;
                    *((_DWORD *)v197 + 2) = v190;
                    v87 = v197 + 12;
                    if (v176 != v192)
                    {
                      do
                      {
                        v199 = *(_QWORD *)(v176 - 3);
                        v176 -= 3;
                        v200 = v176[2];
                        *(_QWORD *)(v197 - 12) = v199;
                        v197 -= 12;
                        *((_DWORD *)v197 + 2) = v200;
                      }
                      while (v176 != v192);
LABEL_299:
                      v176 = *(_DWORD **)(a1 + 144);
                      *(_QWORD *)(a1 + 144) = v197;
                      *(_QWORD *)(a1 + 152) = v87;
                      *(_QWORD *)(a1 + 160) = v198;
                      if (!v176)
                        goto LABEL_85;
LABEL_302:
                      operator delete(v176);
                      goto LABEL_85;
                    }
LABEL_301:
                    *(_QWORD *)(a1 + 144) = v197;
                    *(_QWORD *)(a1 + 152) = v87;
                    *(_QWORD *)(a1 + 160) = v198;
                    goto LABEL_302;
                  }
                  goto LABEL_84;
                }
              }
              operator delete(v138);
              goto LABEL_174;
            }
          }
          operator delete(v104);
          goto LABEL_129;
        }
        v103 = *(_DWORD **)(a1 + 104);
        v102 = *(_QWORD *)(a1 + 112);
        if (v100 <= 0.0 && v101 >= 0.0)
          goto LABEL_92;
        if ((unint64_t)v103 >= v102)
        {
          v144 = (_DWORD *)*v395;
          v145 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v103 - *v395) >> 2);
          v146 = v145 + 1;
          if (v145 + 1 > 0x1555555555555555)
            goto LABEL_462;
          v147 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v102 - (_QWORD)v144) >> 2);
          if (2 * v147 > v146)
            v146 = 2 * v147;
          if (v147 >= 0xAAAAAAAAAAAAAAALL)
            v148 = 0x1555555555555555;
          else
            v148 = v146;
          if (v148)
          {
            if (v148 > 0x1555555555555555)
              goto LABEL_463;
            v149 = (char *)operator new(12 * v148);
          }
          else
          {
            v149 = 0;
          }
          v201 = &v149[12 * v145];
          *(_DWORD *)v201 = v89;
          *((_DWORD *)v201 + 1) = v90;
          *((_DWORD *)v201 + 2) = v95;
          v202 = v201;
          if (v103 != v144)
          {
            do
            {
              v203 = *(_QWORD *)(v103 - 3);
              v103 -= 3;
              v204 = v103[2];
              *(_QWORD *)(v202 - 12) = v203;
              v202 -= 12;
              *((_DWORD *)v202 + 2) = v204;
            }
            while (v103 != v144);
            v103 = (_DWORD *)*v395;
          }
          v111 = v201 + 12;
          *(_QWORD *)(a1 + 96) = v202;
          *(_QWORD *)(a1 + 104) = v201 + 12;
          *(_QWORD *)(a1 + 112) = &v149[12 * v148];
          if (v103)
            operator delete(v103);
        }
        else
        {
          *v103 = v89;
          v103[1] = v90;
          v111 = v103 + 3;
          v103[2] = v95;
        }
        *(_QWORD *)(a1 + 104) = v111;
        v205 = (_DWORD *)(*(_QWORD *)(a1 + 168) + 16 * v86);
        v207 = v205[1];
        v206 = v205[2];
        v208 = v205[3];
        v209 = *(_QWORD *)(a1 + 112);
        if ((unint64_t)v111 < v209)
        {
          *v111 = v207;
          v111[1] = v206;
          v210 = v111 + 3;
          v111[2] = v208;
          goto LABEL_231;
        }
        v211 = (_DWORD *)*v395;
        v212 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v111 - *v395) >> 2);
        v213 = v212 + 1;
        if (v212 + 1 > 0x1555555555555555)
          goto LABEL_462;
        v214 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v209 - (_QWORD)v211) >> 2);
        if (2 * v214 > v213)
          v213 = 2 * v214;
        v215 = v214 >= 0xAAAAAAAAAAAAAAALL ? 0x1555555555555555 : v213;
        if (v215)
        {
          if (v215 > 0x1555555555555555)
            goto LABEL_463;
          v216 = (char *)operator new(12 * v215);
        }
        else
        {
          v216 = 0;
        }
        v217 = &v216[12 * v212];
        v218 = &v216[12 * v215];
        *(_DWORD *)v217 = v207;
        *((_DWORD *)v217 + 1) = v206;
        *((_DWORD *)v217 + 2) = v208;
        v210 = v217 + 12;
        if (v111 == v211)
          break;
        do
        {
          v219 = *(_QWORD *)(v111 - 3);
          v111 -= 3;
          v220 = v111[2];
          *(_QWORD *)(v217 - 12) = v219;
          v217 -= 12;
          *((_DWORD *)v217 + 2) = v220;
        }
        while (v111 != v211);
        v111 = *(_DWORD **)(a1 + 96);
        *(_QWORD *)(a1 + 96) = v217;
        *(_QWORD *)(a1 + 104) = v210;
        *(_QWORD *)(a1 + 112) = v218;
        if (v111)
          goto LABEL_230;
LABEL_231:
        *(_QWORD *)(a1 + 104) = v210;
        if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a1 + 24))
          goto LABEL_268;
        v221 = (int *)(*(_QWORD *)(a1 + 192) + 16 * v86);
        v223 = *v221;
        v222 = v221[1];
        v224 = v221[3];
        v226 = *(_DWORD **)(a1 + 128);
        v225 = *(_QWORD *)(a1 + 136);
        if ((unint64_t)v226 >= v225)
        {
          v228 = *(_DWORD **)(a1 + 120);
          v229 = 0xAAAAAAAAAAAAAAABLL * (v226 - v228) + 1;
          if (v229 > 0x1555555555555555)
            goto LABEL_462;
          v230 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v225 - (_QWORD)v228) >> 2);
          if (2 * v230 > v229)
            v229 = 2 * v230;
          if (v230 >= 0xAAAAAAAAAAAAAAALL)
            v231 = 0x1555555555555555;
          else
            v231 = v229;
          if (v231)
          {
            if (v231 > 0x1555555555555555)
              goto LABEL_463;
            v232 = (char *)operator new(12 * v231);
          }
          else
          {
            v232 = 0;
          }
          v233 = &v232[4 * (v226 - v228)];
          *(_DWORD *)v233 = v223;
          *((_DWORD *)v233 + 1) = v222;
          *((_DWORD *)v233 + 2) = v224;
          v234 = v233;
          if (v226 != v228)
          {
            do
            {
              v235 = *(_QWORD *)(v226 - 3);
              v226 -= 3;
              v236 = v226[2];
              *(_QWORD *)(v234 - 12) = v235;
              v234 -= 12;
              *((_DWORD *)v234 + 2) = v236;
            }
            while (v226 != v228);
            v226 = *(_DWORD **)(a1 + 120);
          }
          v237 = &v232[12 * v231];
          v227 = v233 + 12;
          *(_QWORD *)(a1 + 120) = v234;
          *(_QWORD *)(a1 + 128) = v233 + 12;
          *(_QWORD *)(a1 + 136) = v237;
          if (v226)
            operator delete(v226);
        }
        else
        {
          *v226 = v223;
          v226[1] = v222;
          v227 = v226 + 3;
          v226[2] = v224;
        }
        *(_QWORD *)(a1 + 128) = v227;
        v238 = (_DWORD *)(*(_QWORD *)(a1 + 192) + 16 * v86);
        v240 = v238[1];
        v239 = v238[2];
        v241 = v238[3];
        v242 = *(_QWORD *)(a1 + 136);
        if ((unint64_t)v227 >= v242)
        {
          v244 = *(_DWORD **)(a1 + 120);
          v245 = 0xAAAAAAAAAAAAAAABLL * (v227 - v244) + 1;
          if (v245 > 0x1555555555555555)
            goto LABEL_462;
          v246 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v242 - (_QWORD)v244) >> 2);
          if (2 * v246 > v245)
            v245 = 2 * v246;
          if (v246 >= 0xAAAAAAAAAAAAAAALL)
            v247 = 0x1555555555555555;
          else
            v247 = v245;
          if (v247)
          {
            if (v247 > 0x1555555555555555)
              goto LABEL_463;
            v248 = (char *)operator new(12 * v247);
          }
          else
          {
            v248 = 0;
          }
          v249 = &v248[4 * (v227 - v244)];
          v250 = &v248[12 * v247];
          *(_DWORD *)v249 = v240;
          *((_DWORD *)v249 + 1) = v239;
          *((_DWORD *)v249 + 2) = v241;
          v243 = v249 + 12;
          if (v227 == v244)
          {
            *(_QWORD *)(a1 + 120) = v249;
            *(_QWORD *)(a1 + 128) = v243;
            *(_QWORD *)(a1 + 136) = v250;
          }
          else
          {
            do
            {
              v251 = *(_QWORD *)(v227 - 3);
              v227 -= 3;
              v252 = v227[2];
              *(_QWORD *)(v249 - 12) = v251;
              v249 -= 12;
              *((_DWORD *)v249 + 2) = v252;
            }
            while (v227 != v244);
            v227 = *(_DWORD **)(a1 + 120);
            *(_QWORD *)(a1 + 120) = v249;
            *(_QWORD *)(a1 + 128) = v243;
            *(_QWORD *)(a1 + 136) = v250;
            if (!v227)
              goto LABEL_267;
          }
          operator delete(v227);
        }
        else
        {
          *v227 = v240;
          v227[1] = v239;
          v243 = v227 + 3;
          v227[2] = v241;
        }
LABEL_267:
        *(_QWORD *)(a1 + 128) = v243;
LABEL_268:
        if (*(_QWORD *)(a1 + 56) == *(_QWORD *)(a1 + 48))
          goto LABEL_86;
        v253 = (int *)(*(_QWORD *)(a1 + 216) + 16 * v86);
        v255 = *v253;
        v254 = v253[1];
        v256 = v253[3];
        v258 = *(_DWORD **)(a1 + 152);
        v257 = *(_QWORD *)(a1 + 160);
        if ((unint64_t)v258 >= v257)
        {
          v259 = *(_DWORD **)(a1 + 144);
          v260 = 0xAAAAAAAAAAAAAAABLL * (v258 - v259) + 1;
          if (v260 > 0x1555555555555555)
            goto LABEL_462;
          v261 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v257 - (_QWORD)v259) >> 2);
          if (2 * v261 > v260)
            v260 = 2 * v261;
          if (v261 >= 0xAAAAAAAAAAAAAAALL)
            v262 = 0x1555555555555555;
          else
            v262 = v260;
          if (v262)
          {
            if (v262 > 0x1555555555555555)
              goto LABEL_463;
            v263 = (char *)operator new(12 * v262);
          }
          else
          {
            v263 = 0;
          }
          v264 = &v263[4 * (v258 - v259)];
          *(_DWORD *)v264 = v255;
          *((_DWORD *)v264 + 1) = v254;
          *((_DWORD *)v264 + 2) = v256;
          v265 = v264;
          if (v258 != v259)
          {
            do
            {
              v266 = *(_QWORD *)(v258 - 3);
              v258 -= 3;
              v267 = v258[2];
              *(_QWORD *)(v265 - 12) = v266;
              v265 -= 12;
              *((_DWORD *)v265 + 2) = v267;
            }
            while (v258 != v259);
            v258 = *(_DWORD **)(a1 + 144);
          }
          v268 = &v263[12 * v262];
          v176 = v264 + 12;
          *(_QWORD *)(a1 + 144) = v265;
          *(_QWORD *)(a1 + 152) = v264 + 12;
          *(_QWORD *)(a1 + 160) = v268;
          if (v258)
            operator delete(v258);
        }
        else
        {
          *v258 = v255;
          v258[1] = v254;
          v176 = v258 + 3;
          v258[2] = v256;
        }
        *(_QWORD *)(a1 + 152) = v176;
        v269 = (_DWORD *)(*(_QWORD *)(a1 + 216) + 16 * v86);
        v188 = v269[1];
        v189 = v269[2];
        v190 = v269[3];
        v270 = *(_QWORD *)(a1 + 160);
        if ((unint64_t)v176 >= v270)
        {
          v271 = *(_DWORD **)(a1 + 144);
          v272 = 0xAAAAAAAAAAAAAAABLL * (v176 - v271) + 1;
          if (v272 > 0x1555555555555555)
            goto LABEL_462;
          v273 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v270 - (_QWORD)v271) >> 2);
          if (2 * v273 > v272)
            v272 = 2 * v273;
          if (v273 >= 0xAAAAAAAAAAAAAAALL)
            v274 = 0x1555555555555555;
          else
            v274 = v272;
          if (v274)
          {
            if (v274 > 0x1555555555555555)
LABEL_463:
              sub_1C9899D30();
            v275 = (char *)operator new(12 * v274);
          }
          else
          {
            v275 = 0;
          }
          v197 = &v275[4 * (v176 - v271)];
          v198 = &v275[12 * v274];
          *(_DWORD *)v197 = v188;
          *((_DWORD *)v197 + 1) = v189;
          *((_DWORD *)v197 + 2) = v190;
          v87 = v197 + 12;
          if (v176 != v271)
          {
            do
            {
              v276 = *(_QWORD *)(v176 - 3);
              v176 -= 3;
              v277 = v176[2];
              *(_QWORD *)(v197 - 12) = v276;
              v197 -= 12;
              *((_DWORD *)v197 + 2) = v277;
            }
            while (v176 != v271);
            goto LABEL_299;
          }
          goto LABEL_301;
        }
LABEL_84:
        *v176 = v188;
        v176[1] = v189;
        v87 = v176 + 3;
        v176[2] = v190;
LABEL_85:
        *(_QWORD *)(a1 + 152) = v87;
LABEL_86:
        ++v86;
        v59 = *(_QWORD *)(a1 + 168);
        if (v86 >= (int)((unint64_t)(*(_QWORD *)(a1 + 176) - v59) >> 4))
          goto LABEL_303;
      }
      *(_QWORD *)(a1 + 96) = v217;
      *(_QWORD *)(a1 + 104) = v210;
      *(_QWORD *)(a1 + 112) = v218;
LABEL_230:
      operator delete(v111);
      goto LABEL_231;
    }
LABEL_303:
    v403 = 0;
    v404 = 0;
    v405 = 0;
    v278 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 2);
    if (0xAAAAAAAB00000000 * ((uint64_t)(*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 2))
    {
      sub_1C990E910((uint64_t)&v403, (int)(-1431655765 * ((uint64_t)(*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 2)));
      v279 = v403;
      if ((int)v278 < 1)
        goto LABEL_313;
    }
    else
    {
      v279 = 0;
      if ((int)v278 < 1)
        goto LABEL_313;
    }
    if (v278 >= 8uLL)
    {
      v280 = v278 - (v278 & 7);
      v281 = (int32x4_t)xmmword_1C9927540;
      v282 = (int32x4_t *)(v279 + 4);
      v283.i64[0] = 0x400000004;
      v283.i64[1] = 0x400000004;
      v284.i64[0] = 0x800000008;
      v284.i64[1] = 0x800000008;
      v285 = v280;
      do
      {
        v282[-1] = v281;
        *v282 = vaddq_s32(v281, v283);
        v281 = vaddq_s32(v281, v284);
        v282 += 2;
        v285 -= 8;
      }
      while (v285);
      if ((v278 & 7) == 0)
        goto LABEL_313;
    }
    else
    {
      v280 = 0;
    }
    do
    {
      v279[v280] = v280;
      ++v280;
    }
    while (v278 != v280);
LABEL_313:
    v286 = v404;
    v287 = v404 - v279;
    v288 = 126 - 2 * __clz(v287);
    v402[0] = (uint64_t *)(a1 + 96);
    v402[1] = &v400;
    if (v404 == v279)
      v289 = 0;
    else
      v289 = v288;
    sub_1C990EAAC((uint64_t)v279, v404, v402, v289, 1);
    v291 = *(_BYTE **)(a1 + 96);
    v290 = *(_BYTE **)(a1 + 104);
    v292 = v290 - v291;
    if (v290 == v291)
    {
      v293 = 0;
      if (v286 == v279)
        goto LABEL_326;
    }
    else
    {
      if (0xAAAAAAAAAAAAAAABLL * (v292 >> 2) > 0x1555555555555555)
        goto LABEL_462;
      v293 = (char *)operator new(v292);
      memcpy(v293, v291, 12 * ((v292 - 12) / 0xCuLL) + 12);
      if (v286 == v279)
      {
LABEL_326:
        if (v293)
          operator delete(v293);
        if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a1 + 24))
        {
LABEL_341:
          if (*(_QWORD *)(a1 + 56) == *(_QWORD *)(a1 + 48))
          {
LABEL_354:
            v317 = v394;
            if (!*(_QWORD *)(a1 + 280))
              goto LABEL_425;
            v318 = v394 - v21;
            v319 = (v394 - v21) >> 4;
            if (v319 != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 2))
            {
              sub_1C99072C4(&v400);
              sub_1C9907EC4(v402, &v400, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/geometry/src/three_d/quad_mesh.cpp", 1047, "assert %s failed. triangle_to_part.size() != m_tris_vi.size()%s", (char)"triangle_to_part.size() == m_tris_vi.size()");
              sub_1C9909318((uint64_t)v402);
              v320 = v401;
              if (v401)
              {
                v321 = (unint64_t *)&v401->__shared_owners_;
                do
                  v322 = __ldaxr(v321);
                while (__stlxr(v322 - 1, v321));
                if (!v322)
                {
                  ((void (*)(std::__shared_weak_count *))v320->__on_zero_shared)(v320);
                  std::__shared_weak_count::__release_weak(v320);
                }
              }
              v287 = v404 - v403;
            }
            if (v319 != v287)
            {
              sub_1C99072C4(&v398);
              sub_1C9907EC4(&v400, &v398, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/geometry/src/three_d/quad_mesh.cpp", 1048, "assert %s failed. triangle_to_part .size() != order.size()%s", (char)"triangle_to_part.size() == order.size()");
              sub_1C9909318((uint64_t)&v400);
              v323 = v399;
              if (v399)
              {
                v324 = (unint64_t *)&v399->__shared_owners_;
                do
                  v325 = __ldaxr(v324);
                while (__stlxr(v325 - 1, v324));
                if (!v325)
                {
                  ((void (*)(std::__shared_weak_count *))v323->__on_zero_shared)(v323);
                  std::__shared_weak_count::__release_weak(v323);
                }
              }
            }
            v317 = v394;
            if (v394 == v21)
            {
              v332 = v403;
              if (v404 == v403)
                goto LABEL_398;
              v328 = 0;
              v326 = 0;
LABEL_380:
              v333 = 0;
              do
              {
                v334 = v326[v332[v333]];
                v335 = *((_QWORD *)&v326[v332[v333]] + 1);
                if (v335)
                {
                  v336 = (unint64_t *)(v335 + 8);
                  do
                    v337 = __ldxr(v336);
                  while (__stxr(v337 + 1, v336));
                }
                v338 = &v21[16 * v333];
                v339 = (std::__shared_weak_count *)*((_QWORD *)v338 + 1);
                *(_OWORD *)v338 = v334;
                if (v339)
                {
                  v340 = (unint64_t *)&v339->__shared_owners_;
                  do
                    v341 = __ldaxr(v340);
                  while (__stlxr(v341 - 1, v340));
                  if (!v341)
                  {
                    ((void (*)(std::__shared_weak_count *))v339->__on_zero_shared)(v339);
                    std::__shared_weak_count::__release_weak(v339);
                  }
                }
                ++v333;
                v332 = v403;
              }
              while (v333 < v404 - v403);
LABEL_391:
              while (v328 != (_QWORD *)v326)
              {
                v342 = (std::__shared_weak_count *)*(v328 - 1);
                if (v342)
                {
                  v343 = (unint64_t *)&v342->__shared_owners_;
                  do
                    v344 = __ldaxr(v343);
                  while (__stlxr(v344 - 1, v343));
                  if (!v344)
                  {
                    ((void (*)(std::__shared_weak_count *))v342->__on_zero_shared)(v342);
                    std::__shared_weak_count::__release_weak(v342);
                  }
                }
                v328 -= 2;
              }
              operator delete(v326);
              v317 = v394;
LABEL_398:
              if ((int)(v318 >> 4) >= 1)
              {
                for (k = 0; k < (int)((unint64_t)(v317 - v21) >> 4); ++k)
                {
                  v347 = *(_QWORD **)&v21[16 * k];
                  if (v347)
                  {
                    v349 = (char *)v347[4];
                    v348 = v347[5];
                    if ((unint64_t)v349 < v348)
                    {
                      *(_DWORD *)v349 = k;
                      v346 = v349 + 4;
                    }
                    else
                    {
                      v350 = (char *)v347[3];
                      v351 = (v349 - v350) >> 2;
                      v352 = v351 + 1;
                      if ((unint64_t)(v351 + 1) >> 62)
                        goto LABEL_462;
                      v353 = v348 - (_QWORD)v350;
                      if (v353 >> 1 > v352)
                        v352 = v353 >> 1;
                      if ((unint64_t)v353 >= 0x7FFFFFFFFFFFFFFCLL)
                        v352 = 0x3FFFFFFFFFFFFFFFLL;
                      v396 = v352;
                      if (v352)
                      {
                        if (v352 >> 62)
                          goto LABEL_463;
                        v354 = operator new(4 * v352);
                      }
                      else
                      {
                        v354 = 0;
                      }
                      v355 = &v354[4 * v351];
                      *v355 = k;
                      v346 = v355 + 1;
                      if (v349 == v350)
                      {
                        v357 = v396;
                      }
                      else
                      {
                        v356 = v349 - 4 - v350;
                        v357 = v396;
                        if (v356 < 0x2C)
                          goto LABEL_466;
                        if ((unint64_t)(v350 - v354) < 0x20)
                          goto LABEL_466;
                        v358 = (v356 >> 2) + 1;
                        v359 = &v354[4 * v351 - 16];
                        v360 = v349 - 16;
                        v361 = v358 & 0x7FFFFFFFFFFFFFF8;
                        do
                        {
                          v362 = *(_OWORD *)v360;
                          *(v359 - 1) = *((_OWORD *)v360 - 1);
                          *v359 = v362;
                          v359 -= 2;
                          v360 -= 32;
                          v361 -= 8;
                        }
                        while (v361);
                        v355 -= v358 & 0x7FFFFFFFFFFFFFF8;
                        v349 -= 4 * (v358 & 0x7FFFFFFFFFFFFFF8);
                        if (v358 != (v358 & 0x7FFFFFFFFFFFFFF8))
                        {
LABEL_466:
                          do
                          {
                            v363 = *((_DWORD *)v349 - 1);
                            v349 -= 4;
                            *--v355 = v363;
                          }
                          while (v349 != v350);
                        }
                      }
                      v347[3] = v355;
                      v347[4] = v346;
                      v347[5] = &v354[4 * v357];
                      if (v350)
                        operator delete(v350);
                    }
                    v347[4] = v346;
                  }
                }
              }
LABEL_425:
              *(_QWORD *)(a1 + 416) = *(_QWORD *)(a1 + 408);
              v365 = *(_QWORD *)(a1 + 336);
              v364 = *(_QWORD *)(a1 + 344);
              if (v364 != v365)
              {
                v366 = *(_QWORD *)(a1 + 344);
                do
                {
                  v368 = *(void **)(v366 - 24);
                  v366 -= 24;
                  v367 = v368;
                  if (v368)
                  {
                    *(_QWORD *)(v364 - 16) = v367;
                    operator delete(v367);
                  }
                  v364 = v366;
                }
                while (v366 != v365);
              }
              *(_QWORD *)(a1 + 344) = v365;
              if (v403)
                operator delete(v403);
              a4 = v393;
              if (v21)
              {
                while (v317 != v21)
                {
                  v369 = (std::__shared_weak_count *)*((_QWORD *)v317 - 1);
                  if (v369)
                  {
                    v370 = (unint64_t *)&v369->__shared_owners_;
                    do
                      v371 = __ldaxr(v370);
                    while (__stlxr(v371 - 1, v370));
                    if (!v371)
                    {
                      ((void (*)(std::__shared_weak_count *))v369->__on_zero_shared)(v369);
                      std::__shared_weak_count::__release_weak(v369);
                    }
                  }
                  v317 -= 16;
                }
                operator delete(v21);
              }
              *(_QWORD *)(a1 + 176) = *(_QWORD *)(a1 + 168);
              *(_QWORD *)(a1 + 200) = *(_QWORD *)(a1 + 192);
              *(_QWORD *)(a1 + 224) = *(_QWORD *)(a1 + 216);
              v372 = *(_QWORD **)(a1 + 264);
              if (v372 == (_QWORD *)(a1 + 272))
                goto LABEL_443;
              while (1)
              {
                v381 = (char *)v372[7];
                v382 = (char *)v372[8];
                if (v381 == v382)
                  goto LABEL_456;
                v383 = v382 - v381 - 16;
                if (v383 <= 0xF)
                  goto LABEL_455;
                v384 = (v383 >> 4) + 1;
                v385 = (uint64_t **)(v381 + 16);
                v386 = v384 & 0x1FFFFFFFFFFFFFFELL;
                do
                {
                  v387 = *(v385 - 2);
                  v388 = *v385;
                  v385 += 4;
                  v389 = *v388;
                  v387[1] = *v387;
                  v388[1] = v389;
                  v386 -= 2;
                }
                while (v386);
                if (v384 != (v384 & 0x1FFFFFFFFFFFFFFELL))
                  break;
LABEL_456:
                v391 = (_QWORD *)v372[1];
                if (v391)
                {
                  do
                  {
                    v392 = v391;
                    v391 = (_QWORD *)*v391;
                  }
                  while (v391);
                }
                else
                {
                  do
                  {
                    v392 = (_QWORD *)v372[2];
                    v56 = *v392 == (_QWORD)v372;
                    v372 = v392;
                  }
                  while (!v56);
                }
                v372 = v392;
                if (v392 == (_QWORD *)(a1 + 272))
                  goto LABEL_443;
              }
              v381 += 16 * (v384 & 0x1FFFFFFFFFFFFFFELL);
              do
              {
LABEL_455:
                v390 = *(_QWORD **)v381;
                v381 += 16;
                v390[1] = *v390;
              }
              while (v381 != v382);
              goto LABEL_456;
            }
            if ((v318 & 0x8000000000000000) == 0)
            {
              v326 = operator new(v318);
              v327 = v21;
              v328 = v326;
              do
              {
                *v328 = *(_QWORD *)v327;
                v329 = *((_QWORD *)v327 + 1);
                v328[1] = v329;
                if (v329)
                {
                  v330 = (unint64_t *)(v329 + 8);
                  do
                    v331 = __ldxr(v330);
                  while (__stxr(v331 + 1, v330));
                }
                v327 += 16;
                v328 += 2;
              }
              while (v327 != v394);
              v332 = v403;
              if (v404 == v403)
                goto LABEL_391;
              goto LABEL_380;
            }
LABEL_462:
            abort();
          }
          v309 = *(_BYTE **)(a1 + 144);
          v308 = *(_BYTE **)(a1 + 152);
          v310 = v308 - v309;
          if (v308 == v309)
          {
            v311 = 0;
            if (v286 == v279)
            {
LABEL_352:
              if (v311)
                operator delete(v311);
              goto LABEL_354;
            }
          }
          else
          {
            if (0xAAAAAAAAAAAAAAABLL * (v310 >> 2) > 0x1555555555555555)
              goto LABEL_462;
            v311 = (char *)operator new(v310);
            memcpy(v311, v309, 12 * ((v310 - 12) / 0xCuLL) + 12);
            if (v286 == v279)
              goto LABEL_352;
          }
          v312 = 0;
          v313 = 0;
          do
          {
            v315 = &v311[12 * v279[v313]];
            v316 = *(_QWORD *)(a1 + 144) + v312;
            if ((char *)v316 != v315)
            {
              v314 = *(_QWORD *)v315;
              *(_DWORD *)(v316 + 8) = *((_DWORD *)v315 + 2);
              *(_QWORD *)v316 = v314;
            }
            ++v313;
            v312 += 12;
          }
          while (v313 < v286 - v279);
          goto LABEL_352;
        }
        v300 = *(_BYTE **)(a1 + 120);
        v299 = *(_BYTE **)(a1 + 128);
        v301 = v299 - v300;
        if (v299 == v300)
        {
          v302 = 0;
          if (v286 == v279)
          {
LABEL_339:
            if (v302)
              operator delete(v302);
            goto LABEL_341;
          }
        }
        else
        {
          if (0xAAAAAAAAAAAAAAABLL * (v301 >> 2) > 0x1555555555555555)
            goto LABEL_462;
          v302 = (char *)operator new(v301);
          memcpy(v302, v300, 12 * ((v301 - 12) / 0xCuLL) + 12);
          if (v286 == v279)
            goto LABEL_339;
        }
        v303 = 0;
        v304 = 0;
        do
        {
          v306 = &v302[12 * v279[v304]];
          v307 = *(_QWORD *)(a1 + 120) + v303;
          if ((char *)v307 != v306)
          {
            v305 = *(_QWORD *)v306;
            *(_DWORD *)(v307 + 8) = *((_DWORD *)v306 + 2);
            *(_QWORD *)v307 = v305;
          }
          ++v304;
          v303 += 12;
        }
        while (v304 < v286 - v279);
        goto LABEL_339;
      }
    }
    v294 = 0;
    v295 = 0;
    do
    {
      v297 = &v293[12 * v279[v295]];
      v298 = *v395 + v294;
      if ((char *)v298 != v297)
      {
        v296 = *(_QWORD *)v297;
        *(_DWORD *)(v298 + 8) = *((_DWORD *)v297 + 2);
        *(_QWORD *)v298 = v296;
      }
      ++v295;
      v294 += 12;
    }
    while (v295 < v286 - v279);
    goto LABEL_326;
  }
LABEL_443:
  v373 = *(const UInt8 **)(a1 + 96);
  v374 = *(const UInt8 **)(a1 + 104);
  if (v373 != v374)
  {
    v375 = CFDataCreate(0, v373, (v374 - v373) << 30 >> 30);
    cva::ItemHandler::createData(v375, v376);
    cva::DictionaryHandler::setItem((cva::DictionaryHandler *)v397, CFSTR("mesh_tri_indices"), (const cva::ItemHandler *)v402);
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v402);
    CFRelease(v375);
  }
  v377 = *(const UInt8 **)(a1 + 168);
  v378 = *(const UInt8 **)(a1 + 176);
  if (v377 != v378)
  {
    v379 = CFDataCreate(0, v377, ((v378 - v377) << 30 >> 30) & 0xFFFFFFFFFFFFFFF0);
    cva::ItemHandler::createData(v379, v380);
    cva::DictionaryHandler::setItem((cva::DictionaryHandler *)v397, CFSTR("mesh_quad_indices"), (const cva::ItemHandler *)v402);
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v402);
    CFRelease(v379);
  }
  cva::ItemHandler::ItemHandler();
  cva::DictionaryHandler::setItem(a4, CFSTR("mesh"), (const cva::ItemHandler *)v402);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v402);
  cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)v397);
}

uint64_t sub_1C98D83BC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  if ((*(char *)(a1 + 455) & 0x80000000) == 0)
  {
    v2 = *(void **)(a1 + 408);
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 432));
  v2 = *(void **)(a1 + 408);
  if (v2)
  {
LABEL_3:
    *(_QWORD *)(a1 + 416) = v2;
    operator delete(v2);
  }
LABEL_4:
  v3 = *(void **)(a1 + 384);
  if (v3)
  {
    *(_QWORD *)(a1 + 392) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 360);
  if (v4)
  {
    *(_QWORD *)(a1 + 368) = v4;
    operator delete(v4);
  }
  v5 = *(_QWORD *)(a1 + 336);
  if (v5)
  {
    v6 = *(_QWORD *)(a1 + 344);
    v7 = *(void **)(a1 + 336);
    if (v6 != v5)
    {
      v8 = *(_QWORD *)(a1 + 344);
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v6 - 16) = v9;
          operator delete(v9);
        }
        v6 = v8;
      }
      while (v8 != v5);
      v7 = *(void **)(a1 + 336);
    }
    *(_QWORD *)(a1 + 344) = v5;
    operator delete(v7);
  }
  sub_1C98D853C(*(_QWORD *)(a1 + 320));
  sub_1C98D85A0(*(char **)(a1 + 296));
  sub_1C98D85A0(*(char **)(a1 + 272));
  sub_1C98D8660(*(_QWORD *)(a1 + 248));
  v11 = *(void **)(a1 + 216);
  if (v11)
  {
    *(_QWORD *)(a1 + 224) = v11;
    operator delete(v11);
  }
  v12 = *(void **)(a1 + 192);
  if (v12)
  {
    *(_QWORD *)(a1 + 200) = v12;
    operator delete(v12);
  }
  v13 = *(void **)(a1 + 168);
  if (v13)
  {
    *(_QWORD *)(a1 + 176) = v13;
    operator delete(v13);
  }
  v14 = *(void **)(a1 + 144);
  if (v14)
  {
    *(_QWORD *)(a1 + 152) = v14;
    operator delete(v14);
  }
  v15 = *(void **)(a1 + 120);
  if (v15)
  {
    *(_QWORD *)(a1 + 128) = v15;
    operator delete(v15);
  }
  v16 = *(void **)(a1 + 96);
  if (v16)
  {
    *(_QWORD *)(a1 + 104) = v16;
    operator delete(v16);
  }
  v17 = *(void **)(a1 + 72);
  if (v17)
  {
    *(_QWORD *)(a1 + 80) = v17;
    operator delete(v17);
  }
  v18 = *(void **)(a1 + 48);
  if (v18)
  {
    *(_QWORD *)(a1 + 56) = v18;
    operator delete(v18);
  }
  v19 = *(void **)(a1 + 24);
  if (v19)
  {
    *(_QWORD *)(a1 + 32) = v19;
    operator delete(v19);
  }
  v20 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v20;
    operator delete(v20);
  }
  return a1;
}

void sub_1C98D853C(uint64_t a1)
{
  if (a1)
  {
    sub_1C98D853C(*(_QWORD *)a1);
    sub_1C98D853C(*(_QWORD *)(a1 + 8));
    if (*(char *)(a1 + 79) < 0)
    {
      operator delete(*(void **)(a1 + 56));
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
        goto LABEL_4;
    }
    else if ((*(char *)(a1 + 55) & 0x80000000) == 0)
    {
LABEL_4:
      operator delete((void *)a1);
      return;
    }
    operator delete(*(void **)(a1 + 32));
    goto LABEL_4;
  }
}

void sub_1C98D85A0(char *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  if (a1)
  {
    sub_1C98D85A0(*(_QWORD *)a1);
    sub_1C98D85A0(*((_QWORD *)a1 + 1));
    v2 = *((_QWORD *)a1 + 7);
    if (v2)
    {
      v3 = *((_QWORD *)a1 + 8);
      v4 = (void *)*((_QWORD *)a1 + 7);
      if (v3 != v2)
      {
        do
        {
          v5 = *(std::__shared_weak_count **)(v3 - 8);
          if (v5)
          {
            p_shared_owners = (unint64_t *)&v5->__shared_owners_;
            do
              v7 = __ldaxr(p_shared_owners);
            while (__stlxr(v7 - 1, p_shared_owners));
            if (!v7)
            {
              ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
              std::__shared_weak_count::__release_weak(v5);
            }
          }
          v3 -= 16;
        }
        while (v3 != v2);
        v4 = (void *)*((_QWORD *)a1 + 7);
      }
      *((_QWORD *)a1 + 8) = v2;
      operator delete(v4);
    }
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

void sub_1C98D8660(uint64_t a1)
{
  if (a1)
  {
    sub_1C98D8660(*(_QWORD *)a1);
    sub_1C98D8660(*(_QWORD *)(a1 + 8));
    if (*(char *)(a1 + 159) < 0)
    {
      operator delete(*(void **)(a1 + 136));
      if ((*(char *)(a1 + 135) & 0x80000000) == 0)
      {
LABEL_4:
        if ((*(char *)(a1 + 111) & 0x80000000) == 0)
          goto LABEL_5;
        goto LABEL_10;
      }
    }
    else if ((*(char *)(a1 + 135) & 0x80000000) == 0)
    {
      goto LABEL_4;
    }
    operator delete(*(void **)(a1 + 112));
    if ((*(char *)(a1 + 111) & 0x80000000) == 0)
    {
LABEL_5:
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      {
LABEL_6:
        operator delete((void *)a1);
        return;
      }
LABEL_11:
      operator delete(*(void **)(a1 + 32));
      goto LABEL_6;
    }
LABEL_10:
    operator delete(*(void **)(a1 + 88));
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
}

BOOL sub_1C98D86F4(uint64_t a1, CVPixelBufferRef pixelBuffer)
{
  int Width;
  int Height;
  int v6;
  BOOL v7;
  unsigned __int8 v8;
  uint64_t v9;
  _BOOL8 result;
  int v11;
  int v12;
  const char *v13;
  NSObject *v14;
  uint32_t v15;
  uint64_t v16;
  BOOL v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  BOOL v24;
  float v25;
  unsigned __int8 v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t v32;
  uint64_t v33;
  _BOOL4 v34;
  unsigned __int8 v35;
  int v36;
  _BYTE v37[10];
  double v38;
  _DWORD v39[4];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  Width = CVPixelBufferGetWidth(pixelBuffer);
  Height = CVPixelBufferGetHeight(pixelBuffer);
  v6 = Height;
  v7 = *(_DWORD *)(a1 + 8) == Width && *(_DWORD *)(a1 + 12) == Height;
  if (!v7)
  {
    v8 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
    if ((v8 & 1) == 0)
    {
      if (__cxa_guard_acquire(&qword_1ED52ACD0))
      {
        qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
        __cxa_guard_release(&qword_1ED52ACD0);
      }
    }
    v9 = qword_1ED52ACE0;
    result = os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_ERROR);
    if (result)
    {
      v11 = *(_DWORD *)(a1 + 8);
      v12 = *(_DWORD *)(a1 + 12);
      v36 = 67109888;
      *(_DWORD *)v37 = v11;
      *(_WORD *)&v37[4] = 1024;
      *(_DWORD *)&v37[6] = v12;
      LOWORD(v38) = 1024;
      *(_DWORD *)((char *)&v38 + 2) = Width;
      HIWORD(v38) = 1024;
      v39[0] = v6;
      v13 = "Camera parameters size (%d, %d) does not match buffer size (%d, %d).";
      v14 = v9;
      v15 = 26;
LABEL_32:
      _os_log_error_impl(&dword_1C9870000, v14, OS_LOG_TYPE_ERROR, v13, (uint8_t *)&v36, v15);
      return 0;
    }
    return result;
  }
  v16 = 0;
  do
  {
    v17 = (*(_DWORD *)(a1 + 16 + v16) & 0x7FFFFFFFu) < 0x7F800000;
    if ((*(_DWORD *)(a1 + 16 + v16) & 0x7FFFFFFFu) > 0x7F7FFFFF)
      break;
    v7 = v16 == 32;
    v16 += 4;
  }
  while (!v7);
  if (!v17)
  {
    v29 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
    if ((v29 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
    {
      qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
      __cxa_guard_release(&qword_1ED52ACD0);
    }
    v30 = qword_1ED52ACE0;
    result = os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    LOWORD(v36) = 0;
    v13 = "intrinsic camera parameters contain invalid values";
LABEL_28:
    v14 = v30;
    v15 = 2;
    goto LABEL_32;
  }
  v18 = *(float *)(a1 + 16);
  v19 = *(float *)(a1 + 32);
  if (v18 <= 0.0 || v19 <= 0.0)
  {
    v31 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
    if ((v31 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
    {
      qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
      __cxa_guard_release(&qword_1ED52ACD0);
    }
    v32 = qword_1ED52ACE0;
    result = os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_ERROR);
    if (result)
    {
      v36 = 134218240;
      *(double *)v37 = v18;
      *(_WORD *)&v37[8] = 2048;
      v38 = v19;
      v13 = "intrinsic camera parameters have invalid focal length: %g, %g (should be positive)";
      v14 = v32;
      v15 = 22;
      goto LABEL_32;
    }
    return result;
  }
  v20 = *(float *)(a1 + 24);
  v21 = *(float *)(a1 + 36);
  v22 = *(float *)(a1 + 48);
  v23 = fabsf(v21);
  v24 = fabsf(v20) <= 0.000001 && v23 <= 0.000001;
  v25 = fabsf(v22 + -1.0);
  if (!v24 || v25 > 0.000001)
  {
    v27 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
    if ((v27 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
    {
      qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
      __cxa_guard_release(&qword_1ED52ACD0);
    }
    v28 = qword_1ED52ACE0;
    result = os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_ERROR);
    if (result)
    {
      v36 = 134218496;
      *(double *)v37 = v20;
      *(_WORD *)&v37[8] = 2048;
      v38 = v21;
      LOWORD(v39[0]) = 2048;
      *(double *)((char *)v39 + 2) = v22;
      v13 = "intrinsic camera parameters have invalid 3rd row: %g, %g, %g (should be 0, 0, 1)";
      v14 = v28;
      v15 = 32;
      goto LABEL_32;
    }
    return result;
  }
  v33 = 0;
  do
  {
    v34 = (*(_DWORD *)(a1 + 52 + v33) & 0x7FFFFFFFu) < 0x7F800000;
    if ((*(_DWORD *)(a1 + 52 + v33) & 0x7FFFFFFFu) > 0x7F7FFFFF)
      break;
    v7 = v33 == 32;
    v33 += 4;
  }
  while (!v7);
  if (v34
    && (*(_DWORD *)(a1 + 88) & 0x7FFFFFFFu) <= 0x7F7FFFFF
    && (*(_DWORD *)(a1 + 92) & 0x7FFFFFFFu) <= 0x7F7FFFFF
    && (*(_DWORD *)(a1 + 96) & 0x7FFFFFFFu) < 0x7F800000)
  {
    return 1;
  }
  v35 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
  if ((v35 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
  {
    qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
    __cxa_guard_release(&qword_1ED52ACD0);
  }
  v30 = qword_1ED52ACE0;
  result = os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_ERROR);
  if (result)
  {
    LOWORD(v36) = 0;
    v13 = "extrinsic camera parameters contain invalid values";
    goto LABEL_28;
  }
  return result;
}

void sub_1C98D8BC0(cva::ArrayHandler **a1, uint64_t a2, float a3, float a4, float a5)
{
  unsigned int v10;
  uint64_t v11;
  size_t v12;
  uint64_t i;
  unsigned __int8 v14;
  char *v15;
  const void *p_p;
  size_t v17;
  char **v18;
  char *v19;
  int v20;
  char *v21;
  size_t v22;
  size_t v23;
  int v24;
  char *v25;
  char **v26;
  char *v27;
  int v28;
  char **v29;
  size_t v30;
  size_t v31;
  int v32;
  int v33;
  const void *v34;
  size_t v35;
  size_t v36;
  int v37;
  int v38;
  _QWORD *v39;
  char v40[16];
  void *__p;
  size_t v42;
  unsigned __int8 v43;
  void *memptr;
  char *v45[2];

  v10 = cva::ArrayHandler::size(*a1);
  if (v10 != *(_DWORD *)(a2 + 16))
  {
    *(_DWORD *)(a2 + 16) = v10;
    if (v10)
    {
      v11 = v10;
      if (*(_QWORD *)(a2 + 8) < (unint64_t)v10)
      {
        free(*(void **)a2);
        v12 = (4 * v11 + 31) & 0x7FFFFFFE0;
        *(_QWORD *)a2 = 0;
        *(_QWORD *)(a2 + 8) = v12 >> 2;
        memptr = 0;
        malloc_type_posix_memalign(&memptr, 0x20uLL, v12, 0x49090899uLL);
        *(_QWORD *)a2 = memptr;
      }
    }
    else
    {
      free(*(void **)a2);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    v10 = *(_DWORD *)(a2 + 16);
  }
  if (v10)
    memset_pattern16(*(void **)a2, &unk_1C9927930, 4 * v10);
  v39 = (_QWORD *)a2;
  v45[0] = 0;
  v45[1] = 0;
  memptr = v45;
  __p = "browDown_L";
  v42 = LODWORD(a3);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "browDown_R";
  v42 = LODWORD(a3);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "browInnerUp";
  v42 = LODWORD(a3);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "browOuterUp_L";
  v42 = LODWORD(a3);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "browOuterUp_R";
  v42 = LODWORD(a3);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "eyeSquint_L";
  v42 = LODWORD(a4);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "eyeSquint_R";
  v42 = LODWORD(a4);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "eyeWide_L";
  v42 = LODWORD(a4);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "eyeWide_R";
  v42 = LODWORD(a4);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "mouthClose";
  v42 = LODWORD(a5);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "mouthUpperUp_L";
  v42 = LODWORD(a5);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "mouthUpperUp_R";
  v42 = LODWORD(a5);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "mouthLowerDown_L";
  v42 = LODWORD(a5);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "mouthLowerDown_R";
  v42 = LODWORD(a5);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "mouthRollUpper";
  v42 = LODWORD(a5);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "mouthRollLower";
  v42 = LODWORD(a5);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "mouthSmile_L";
  v42 = LODWORD(a5);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "mouthSmile_R";
  v42 = LODWORD(a5);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "mouthDimple_L";
  v42 = LODWORD(a5);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "mouthDimple_R";
  v42 = LODWORD(a5);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "mouthStretch_L";
  v42 = LODWORD(a5);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "mouthStretch_R";
  v42 = LODWORD(a5);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "mouthFrown_L";
  v42 = LODWORD(a5);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "mouthFrown_R";
  v42 = LODWORD(a5);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "mouthPress_L";
  v42 = LODWORD(a5);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "mouthPress_R";
  v42 = LODWORD(a5);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "mouthPucker";
  v42 = LODWORD(a5);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "mouthFunnel";
  v42 = LODWORD(a5);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "mouthLeft";
  v42 = LODWORD(a5);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "mouthRight";
  v42 = LODWORD(a5);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "mouthShrugLower";
  v42 = LODWORD(a5);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "mouthShrugUpper";
  v42 = LODWORD(a5);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "jawOpen";
  v42 = LODWORD(a5);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "jawLeft";
  v42 = LODWORD(a5);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "jawRight";
  v42 = LODWORD(a5);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "jawForward";
  v42 = LODWORD(a5);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "BrowsD_L";
  v42 = LODWORD(a3);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "BrowsD_R";
  v42 = LODWORD(a3);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "BrowsU_C";
  v42 = LODWORD(a3);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "BrowsU_L";
  v42 = LODWORD(a3);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "BrowsU_R";
  v42 = LODWORD(a3);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "EyeSquint_L";
  v42 = LODWORD(a4);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "EyeSquint_R";
  v42 = LODWORD(a4);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "EyeOpen_L";
  v42 = LODWORD(a4);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "EyeOpen_R";
  v42 = LODWORD(a4);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "LipsTogether";
  v42 = LODWORD(a5);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "LipsUpperUp_L";
  v42 = LODWORD(a5);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "LipsUpperUp_R";
  v42 = LODWORD(a5);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "LipsLowerDown_L";
  v42 = LODWORD(a5);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "LipsLowerDown_R";
  v42 = LODWORD(a5);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "LipsUpperClose";
  v42 = LODWORD(a5);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "LipsLowerClose";
  v42 = LODWORD(a5);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "MouthSmile_L";
  v42 = LODWORD(a5);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "MouthSmile_R";
  v42 = LODWORD(a5);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "MouthDimple_L";
  v42 = LODWORD(a5);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "MouthDimple_R";
  v42 = LODWORD(a5);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "LipsStretch_L";
  v42 = LODWORD(a5);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "LipsStretch_R";
  v42 = LODWORD(a5);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "MouthFrown_L";
  v42 = LODWORD(a5);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "MouthFrown_R";
  v42 = LODWORD(a5);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "MouthPress_L";
  v42 = LODWORD(a5);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "MouthPress_R";
  v42 = LODWORD(a5);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "LipsPucker";
  v42 = LODWORD(a5);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "LipsFunnel";
  v42 = LODWORD(a5);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "MouthLeft";
  v42 = LODWORD(a5);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "MouthRight";
  v42 = LODWORD(a5);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "ChinLowerRaise";
  v42 = LODWORD(a5);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "ChinUpperRaise";
  v42 = LODWORD(a5);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "JawOpen";
  v42 = LODWORD(a5);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "JawLeft";
  v42 = LODWORD(a5);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "JawRight";
  v42 = LODWORD(a5);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  __p = "JawFwd";
  v42 = LODWORD(a5);
  sub_1C98D9564((uint64_t **)&memptr, (uint64_t)&__p);
  for (i = 0; i != cva::ArrayHandler::size(*a1); ++i)
  {
    cva::ArrayHandler::item(*a1);
    cva::ItemHandler::getValue<std::string>();
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v40);
    v15 = v45[0];
    v14 = v43;
    if (!v45[0])
      goto LABEL_11;
    if ((v43 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    if ((v43 & 0x80u) == 0)
      v17 = v43;
    else
      v17 = v42;
    v18 = v45;
    v19 = v45[0];
    do
    {
      while (1)
      {
        v20 = v19[55];
        v21 = v20 >= 0 ? v19 + 32 : (char *)*((_QWORD *)v19 + 4);
        v22 = v20 >= 0 ? v19[55] : *((_QWORD *)v19 + 5);
        v23 = v17 >= v22 ? v22 : v17;
        v24 = memcmp(v21, p_p, v23);
        if (v24)
          break;
        if (v22 >= v17)
          goto LABEL_37;
LABEL_23:
        v19 = (char *)*((_QWORD *)v19 + 1);
        if (!v19)
          goto LABEL_38;
      }
      if (v24 < 0)
        goto LABEL_23;
LABEL_37:
      v18 = (char **)v19;
      v19 = *(char **)v19;
    }
    while (v19);
LABEL_38:
    if (v18 == v45)
      goto LABEL_11;
    v27 = v18[4];
    v26 = v18 + 4;
    v25 = v27;
    v28 = *((char *)v26 + 23);
    if (v28 >= 0)
      v29 = v26;
    else
      v29 = (char **)v25;
    if (v28 >= 0)
      v30 = *((unsigned __int8 *)v26 + 23);
    else
      v30 = (size_t)v26[1];
    if (v30 >= v17)
      v31 = v17;
    else
      v31 = v30;
    v32 = memcmp(p_p, v29, v31);
    if (!v32)
    {
      if (v17 < v30)
        goto LABEL_11;
      while (1)
      {
LABEL_54:
        v33 = v15[55];
        if (v33 >= 0)
          v34 = v15 + 32;
        else
          v34 = (const void *)*((_QWORD *)v15 + 4);
        if (v33 >= 0)
          v35 = v15[55];
        else
          v35 = *((_QWORD *)v15 + 5);
        if (v35 >= v17)
          v36 = v17;
        else
          v36 = v35;
        v37 = memcmp(p_p, v34, v36);
        if (v37)
        {
          if (v37 < 0)
            goto LABEL_53;
        }
        else if (v17 < v35)
        {
LABEL_53:
          v15 = *(char **)v15;
          if (!v15)
            goto LABEL_72;
          continue;
        }
        v38 = memcmp(v34, p_p, v36);
        if (v38)
        {
          if ((v38 & 0x80000000) == 0)
            goto LABEL_10;
        }
        else if (v35 >= v17)
        {
LABEL_10:
          *(_DWORD *)(*v39 + 4 * i) = *((_DWORD *)v15 + 14);
          v14 = v43;
          goto LABEL_11;
        }
        v15 = (char *)*((_QWORD *)v15 + 1);
        if (!v15)
LABEL_72:
          abort();
      }
    }
    if ((v32 & 0x80000000) == 0)
      goto LABEL_54;
LABEL_11:
    if ((v14 & 0x80) != 0)
      operator delete(__p);
  }
  sub_1C9887678(v45[0]);
}

void sub_1C98D9564(uint64_t **a1, uint64_t a2)
{
  _QWORD *v4;
  const char *v5;
  size_t v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  int v13;
  void *v14;
  const void *v15;
  size_t v16;
  uint64_t *v17;
  _QWORD *v18;
  const void *v19;
  int v20;
  const void *v21;
  size_t v22;
  size_t v23;
  int v24;
  int v25;
  uint64_t *v26;

  v4 = operator new(0x40uLL);
  v5 = *(const char **)a2;
  v6 = strlen(*(const char **)a2);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v8 = operator new(v9 + 1);
    v4[5] = v7;
    v4[6] = v10 | 0x8000000000000000;
    v4[4] = v8;
    goto LABEL_8;
  }
  *((_BYTE *)v4 + 55) = v6;
  v8 = v4 + 4;
  if (v6)
LABEL_8:
    memmove(v8, v5, v7);
  *((_BYTE *)v8 + v7) = 0;
  *((_DWORD *)v4 + 14) = *(_DWORD *)(a2 + 8);
  v11 = (uint64_t *)(a1 + 1);
  v12 = a1[1];
  if (v12)
  {
    v13 = *((char *)v4 + 55);
    v14 = (void *)v4[4];
    if (v13 >= 0)
      v15 = v4 + 4;
    else
      v15 = (const void *)v4[4];
    if (v13 >= 0)
      v16 = *((unsigned __int8 *)v4 + 55);
    else
      v16 = v4[5];
    while (1)
    {
      v17 = v12;
      v18 = v12 + 4;
      v19 = (const void *)v12[4];
      v20 = *((char *)v18 + 23);
      if (v20 >= 0)
        v21 = v18;
      else
        v21 = v19;
      if (v20 >= 0)
        v22 = *((unsigned __int8 *)v18 + 23);
      else
        v22 = v18[1];
      if (v22 >= v16)
        v23 = v16;
      else
        v23 = v22;
      v24 = memcmp(v15, v21, v23);
      if (v24)
      {
        if (v24 < 0)
          goto LABEL_16;
LABEL_30:
        v25 = memcmp(v21, v15, v23);
        if (v25)
        {
          if ((v25 & 0x80000000) == 0)
            goto LABEL_40;
        }
        else if (v22 >= v16)
        {
LABEL_40:
          if (v13 < 0)
            operator delete(v14);
          operator delete(v4);
          return;
        }
        v12 = (uint64_t *)v17[1];
        if (!v12)
        {
          v11 = v17 + 1;
          goto LABEL_37;
        }
      }
      else
      {
        if (v16 >= v22)
          goto LABEL_30;
LABEL_16:
        v12 = (uint64_t *)*v17;
        v11 = v17;
        if (!*v17)
          goto LABEL_37;
      }
    }
  }
  v17 = (uint64_t *)(a1 + 1);
LABEL_37:
  *v4 = 0;
  v4[1] = 0;
  v4[2] = v17;
  *v11 = (uint64_t)v4;
  v26 = (uint64_t *)**a1;
  if (v26)
  {
    *a1 = v26;
    v4 = (_QWORD *)*v11;
  }
  sub_1C9880828(a1[1], v4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
}

void sub_1C98D9758()
{
  _QWORD *v0;
  uint64_t v1;
  const __CFAllocator *v2;
  const __CFAllocator *v3;
  CFStringRef v4;
  _BYTE v5[16];

  v0 = operator new(0x28uLL);
  v0[1] = 0;
  v0[2] = 0;
  *v0 = &off_1E82956B0;
  cva::ArrayHandler::ArrayHandler((cva::ArrayHandler *)(v0 + 3));
  v1 = 0;
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE20];
  do
  {
    v4 = CFStringCreateWithCStringNoCopy(v2, *off_1E8297038[v1], 0x8000100u, v3);
    cva::ItemHandler::ItemHandler((cva::ItemHandler *)v5, v4);
    cva::ArrayHandler::addItem((cva::ArrayHandler *)(v0 + 3), (const cva::ItemHandler *)v5);
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v5);
    CFRelease(v4);
    v1 += 2;
  }
  while (v1 != 102);
  qword_1ED52AD80 = (uint64_t)(v0 + 3);
  *(_QWORD *)algn_1ED52AD88 = v0;
}

void sub_1C98D9840()
{
  _QWORD *v0;
  const __CFAllocator *v1;
  const __CFAllocator *v2;
  uint64_t v3;
  CFStringRef v4;
  _BYTE v5[16];

  v0 = operator new(0x28uLL);
  v0[1] = 0;
  v0[2] = 0;
  *v0 = &off_1E82956B0;
  cva::ArrayHandler::ArrayHandler((cva::ArrayHandler *)(v0 + 3));
  v1 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE20];
  v3 = 1u;
  do
  {
    v4 = CFStringCreateWithCStringNoCopy(v1, *off_1E8297038[v3], 0x8000100u, v2);
    cva::ItemHandler::ItemHandler((cva::ItemHandler *)v5, v4);
    cva::ArrayHandler::addItem((cva::ArrayHandler *)(v0 + 3), (const cva::ItemHandler *)v5);
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v5);
    CFRelease(v4);
    v3 += 2;
  }
  while (v3 != 103);
  qword_1EF9212A0 = (uint64_t)(v0 + 3);
  *(_QWORD *)algn_1EF9212A8 = v0;
}

_QWORD *sub_1C98D9928(_QWORD *result)
{
  unsigned __int8 v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  int v7;
  int v8;
  _QWORD *v9;
  cva::ArrayHandler *v10;
  uint64_t v11;

  v1 = atomic_load((unsigned __int8 *)&qword_1EF9212C8);
  v2 = &unk_1EF921000;
  v3 = &unk_1EF921000;
  if ((v1 & 1) == 0)
  {
    v9 = result;
    v7 = __cxa_guard_acquire(&qword_1EF9212C8);
    v2 = (_QWORD *)&unk_1EF921000;
    v3 = (_QWORD *)&unk_1EF921000;
    v8 = v7;
    result = v9;
    if (v8)
    {
      sub_1C98D99E8(&v10);
      qword_1EF9212B8 = (uint64_t)v10;
      qword_1EF9212C0 = v11;
      v10 = 0;
      v11 = 0;
      sub_1C987C140((uint64_t)&v10);
      __cxa_guard_release(&qword_1EF9212C8);
      v2 = (_QWORD *)&unk_1EF921000;
      v3 = (_QWORD *)&unk_1EF921000;
      result = v9;
    }
  }
  v4 = v3[88];
  *result = v2[87];
  result[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

void sub_1C98D99E8(cva::ArrayHandler **a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  cva::ArrayHandler *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  cva::ArrayHandler *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  cva::ArrayHandler *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  cva::ArrayHandler *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  cva::ArrayHandler *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  cva::ArrayHandler *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  cva::ArrayHandler *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  cva::ArrayHandler *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  cva::ArrayHandler *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  cva::ArrayHandler *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  cva::ArrayHandler *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  cva::ArrayHandler *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  cva::ArrayHandler *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  cva::ArrayHandler *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  cva::ArrayHandler *v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  cva::ArrayHandler *v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  cva::ArrayHandler *v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  cva::ArrayHandler *v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  cva::ArrayHandler *v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  cva::ArrayHandler *v121;
  unint64_t *v122;
  unint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  cva::ArrayHandler *v127;
  unint64_t *v128;
  unint64_t v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  cva::ArrayHandler *v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  cva::ArrayHandler *v139;
  unint64_t *v140;
  unint64_t v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  cva::ArrayHandler *v145;
  unint64_t *v146;
  unint64_t v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  cva::ArrayHandler *v151;
  unint64_t *v152;
  unint64_t v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  cva::ArrayHandler *v157;
  unint64_t *v158;
  unint64_t v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  cva::ArrayHandler *v163;
  unint64_t *v164;
  unint64_t v165;
  unint64_t *v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  cva::ArrayHandler *v169;
  unint64_t *v170;
  unint64_t v171;
  unint64_t *v172;
  unint64_t v173;
  std::__shared_weak_count *v174;
  cva::ArrayHandler *v175;
  unint64_t *v176;
  unint64_t v177;
  unint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count *v180;
  cva::ArrayHandler *v181;
  unint64_t *v182;
  unint64_t v183;
  unint64_t *v184;
  unint64_t v185;
  std::__shared_weak_count *v186;
  cva::ArrayHandler *v187;
  unint64_t *v188;
  unint64_t v189;
  unint64_t *v190;
  unint64_t v191;
  std::__shared_weak_count *v192;
  cva::ArrayHandler *v193;
  unint64_t *v194;
  unint64_t v195;
  unint64_t *v196;
  unint64_t v197;
  std::__shared_weak_count *v198;
  cva::ArrayHandler *v199;
  unint64_t *v200;
  unint64_t v201;
  unint64_t *v202;
  unint64_t v203;
  std::__shared_weak_count *v204;
  cva::ArrayHandler *v205;
  unint64_t *v206;
  unint64_t v207;
  unint64_t *v208;
  unint64_t v209;
  std::__shared_weak_count *v210;
  cva::ArrayHandler *v211;
  unint64_t *v212;
  unint64_t v213;
  unint64_t *v214;
  unint64_t v215;
  std::__shared_weak_count *v216;
  cva::ArrayHandler *v217;
  unint64_t *v218;
  unint64_t v219;
  unint64_t *v220;
  unint64_t v221;
  std::__shared_weak_count *v222;
  cva::ArrayHandler *v223;
  unint64_t *v224;
  unint64_t v225;
  unint64_t *v226;
  unint64_t v227;
  std::__shared_weak_count *v228;
  cva::ArrayHandler *v229;
  unint64_t *v230;
  unint64_t v231;
  unint64_t *v232;
  unint64_t v233;
  std::__shared_weak_count *v234;
  cva::ArrayHandler *v235;
  unint64_t *v236;
  unint64_t v237;
  unint64_t *v238;
  unint64_t v239;
  std::__shared_weak_count *v240;
  cva::ArrayHandler *v241;
  unint64_t *v242;
  unint64_t v243;
  unint64_t *v244;
  unint64_t v245;
  std::__shared_weak_count *v246;
  cva::ArrayHandler *v247;
  unint64_t *v248;
  unint64_t v249;
  unint64_t *v250;
  unint64_t v251;
  std::__shared_weak_count *v252;
  cva::ArrayHandler *v253;
  unint64_t *v254;
  unint64_t v255;
  unint64_t *v256;
  unint64_t v257;
  std::__shared_weak_count *v258;
  cva::ArrayHandler *v259;
  unint64_t *v260;
  unint64_t v261;
  unint64_t *v262;
  unint64_t v263;
  std::__shared_weak_count *v264;
  cva::ArrayHandler *v265;
  unint64_t *v266;
  unint64_t v267;
  unint64_t *v268;
  unint64_t v269;
  std::__shared_weak_count *v270;
  cva::ArrayHandler *v271;
  unint64_t *v272;
  unint64_t v273;
  unint64_t *v274;
  unint64_t v275;
  std::__shared_weak_count *v276;
  cva::ArrayHandler *v277;
  unint64_t *v278;
  unint64_t v279;
  unint64_t *v280;
  unint64_t v281;
  std::__shared_weak_count *v282;
  cva::ArrayHandler *v283;
  unint64_t *v284;
  unint64_t v285;
  unint64_t *v286;
  unint64_t v287;
  std::__shared_weak_count *v288;
  cva::ArrayHandler *v289;
  unint64_t *v290;
  unint64_t v291;
  unint64_t *v292;
  unint64_t v293;
  std::__shared_weak_count *v294;
  cva::ArrayHandler *v295;
  unint64_t *v296;
  unint64_t v297;
  unint64_t *v298;
  unint64_t v299;
  std::__shared_weak_count *v300;
  cva::ArrayHandler *v301;
  unint64_t *v302;
  unint64_t v303;
  unint64_t *v304;
  unint64_t v305;
  void *__p[2];
  char v307;
  _BYTE v308[16];

  v2 = (std::__shared_weak_count *)operator new(0x28uLL);
  v2->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&off_1E82956B0;
  cva::ArrayHandler::ArrayHandler((cva::ArrayHandler *)&v2[1]);
  *a1 = (cva::ArrayHandler *)&v2[1];
  a1[1] = (cva::ArrayHandler *)v2;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  v307 = 8;
  strcpy((char *)__p, "BrowsD_L");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem((cva::ArrayHandler *)&v2[1], (const cva::ItemHandler *)v308);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v308);
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
  {
    v7 = *a1;
    v6 = (std::__shared_weak_count *)a1[1];
    if (!v6)
      goto LABEL_11;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v7 = *a1;
    v6 = (std::__shared_weak_count *)a1[1];
    if (!v6)
      goto LABEL_11;
  }
  v8 = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 + 1, v8));
LABEL_11:
  v307 = 8;
  strcpy((char *)__p, "BrowsD_R");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v7, (const cva::ItemHandler *)v308);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v308);
  if (!v6)
    goto LABEL_15;
  v10 = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    v13 = *a1;
    v12 = (std::__shared_weak_count *)a1[1];
    if (!v12)
      goto LABEL_18;
  }
  else
  {
LABEL_15:
    v13 = *a1;
    v12 = (std::__shared_weak_count *)a1[1];
    if (!v12)
      goto LABEL_18;
  }
  v14 = (unint64_t *)&v12->__shared_owners_;
  do
    v15 = __ldxr(v14);
  while (__stxr(v15 + 1, v14));
LABEL_18:
  v307 = 8;
  strcpy((char *)__p, "BrowsU_C");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v13, (const cva::ItemHandler *)v308);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v308);
  if (!v12)
    goto LABEL_22;
  v16 = (unint64_t *)&v12->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    v19 = *a1;
    v18 = (std::__shared_weak_count *)a1[1];
    if (!v18)
      goto LABEL_25;
  }
  else
  {
LABEL_22:
    v19 = *a1;
    v18 = (std::__shared_weak_count *)a1[1];
    if (!v18)
      goto LABEL_25;
  }
  v20 = (unint64_t *)&v18->__shared_owners_;
  do
    v21 = __ldxr(v20);
  while (__stxr(v21 + 1, v20));
LABEL_25:
  v307 = 8;
  strcpy((char *)__p, "BrowsU_L");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v19, (const cva::ItemHandler *)v308);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v308);
  if (!v18)
    goto LABEL_29;
  v22 = (unint64_t *)&v18->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    v25 = *a1;
    v24 = (std::__shared_weak_count *)a1[1];
    if (!v24)
      goto LABEL_32;
  }
  else
  {
LABEL_29:
    v25 = *a1;
    v24 = (std::__shared_weak_count *)a1[1];
    if (!v24)
      goto LABEL_32;
  }
  v26 = (unint64_t *)&v24->__shared_owners_;
  do
    v27 = __ldxr(v26);
  while (__stxr(v27 + 1, v26));
LABEL_32:
  v307 = 8;
  strcpy((char *)__p, "BrowsU_R");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v25, (const cva::ItemHandler *)v308);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v308);
  if (!v24)
    goto LABEL_36;
  v28 = (unint64_t *)&v24->__shared_owners_;
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
    v31 = *a1;
    v30 = (std::__shared_weak_count *)a1[1];
    if (!v30)
      goto LABEL_39;
  }
  else
  {
LABEL_36:
    v31 = *a1;
    v30 = (std::__shared_weak_count *)a1[1];
    if (!v30)
      goto LABEL_39;
  }
  v32 = (unint64_t *)&v30->__shared_owners_;
  do
    v33 = __ldxr(v32);
  while (__stxr(v33 + 1, v32));
LABEL_39:
  v307 = 13;
  strcpy((char *)__p, "CheekSquint_L");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v31, (const cva::ItemHandler *)v308);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v308);
  if (!v30)
    goto LABEL_43;
  v34 = (unint64_t *)&v30->__shared_owners_;
  do
    v35 = __ldaxr(v34);
  while (__stlxr(v35 - 1, v34));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
    v37 = *a1;
    v36 = (std::__shared_weak_count *)a1[1];
    if (!v36)
      goto LABEL_46;
  }
  else
  {
LABEL_43:
    v37 = *a1;
    v36 = (std::__shared_weak_count *)a1[1];
    if (!v36)
      goto LABEL_46;
  }
  v38 = (unint64_t *)&v36->__shared_owners_;
  do
    v39 = __ldxr(v38);
  while (__stxr(v39 + 1, v38));
LABEL_46:
  v307 = 13;
  strcpy((char *)__p, "CheekSquint_R");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v37, (const cva::ItemHandler *)v308);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v308);
  if (!v36)
    goto LABEL_50;
  v40 = (unint64_t *)&v36->__shared_owners_;
  do
    v41 = __ldaxr(v40);
  while (__stlxr(v41 - 1, v40));
  if (!v41)
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
    v43 = *a1;
    v42 = (std::__shared_weak_count *)a1[1];
    if (!v42)
      goto LABEL_53;
  }
  else
  {
LABEL_50:
    v43 = *a1;
    v42 = (std::__shared_weak_count *)a1[1];
    if (!v42)
      goto LABEL_53;
  }
  v44 = (unint64_t *)&v42->__shared_owners_;
  do
    v45 = __ldxr(v44);
  while (__stxr(v45 + 1, v44));
LABEL_53:
  v307 = 14;
  strcpy((char *)__p, "ChinLowerRaise");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v43, (const cva::ItemHandler *)v308);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v308);
  if (!v42)
    goto LABEL_57;
  v46 = (unint64_t *)&v42->__shared_owners_;
  do
    v47 = __ldaxr(v46);
  while (__stlxr(v47 - 1, v46));
  if (!v47)
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
    v49 = *a1;
    v48 = (std::__shared_weak_count *)a1[1];
    if (!v48)
      goto LABEL_60;
  }
  else
  {
LABEL_57:
    v49 = *a1;
    v48 = (std::__shared_weak_count *)a1[1];
    if (!v48)
      goto LABEL_60;
  }
  v50 = (unint64_t *)&v48->__shared_owners_;
  do
    v51 = __ldxr(v50);
  while (__stxr(v51 + 1, v50));
LABEL_60:
  v307 = 14;
  strcpy((char *)__p, "ChinUpperRaise");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v49, (const cva::ItemHandler *)v308);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v308);
  if (!v48)
    goto LABEL_64;
  v52 = (unint64_t *)&v48->__shared_owners_;
  do
    v53 = __ldaxr(v52);
  while (__stlxr(v53 - 1, v52));
  if (!v53)
  {
    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
    std::__shared_weak_count::__release_weak(v48);
    v55 = *a1;
    v54 = (std::__shared_weak_count *)a1[1];
    if (!v54)
      goto LABEL_67;
  }
  else
  {
LABEL_64:
    v55 = *a1;
    v54 = (std::__shared_weak_count *)a1[1];
    if (!v54)
      goto LABEL_67;
  }
  v56 = (unint64_t *)&v54->__shared_owners_;
  do
    v57 = __ldxr(v56);
  while (__stxr(v57 + 1, v56));
LABEL_67:
  v307 = 10;
  strcpy((char *)__p, "EyeBlink_L");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v55, (const cva::ItemHandler *)v308);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v308);
  if (!v54)
    goto LABEL_71;
  v58 = (unint64_t *)&v54->__shared_owners_;
  do
    v59 = __ldaxr(v58);
  while (__stlxr(v59 - 1, v58));
  if (!v59)
  {
    ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
    std::__shared_weak_count::__release_weak(v54);
    v61 = *a1;
    v60 = (std::__shared_weak_count *)a1[1];
    if (!v60)
      goto LABEL_74;
  }
  else
  {
LABEL_71:
    v61 = *a1;
    v60 = (std::__shared_weak_count *)a1[1];
    if (!v60)
      goto LABEL_74;
  }
  v62 = (unint64_t *)&v60->__shared_owners_;
  do
    v63 = __ldxr(v62);
  while (__stxr(v63 + 1, v62));
LABEL_74:
  v307 = 10;
  strcpy((char *)__p, "EyeBlink_R");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v61, (const cva::ItemHandler *)v308);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v308);
  if (!v60)
    goto LABEL_78;
  v64 = (unint64_t *)&v60->__shared_owners_;
  do
    v65 = __ldaxr(v64);
  while (__stlxr(v65 - 1, v64));
  if (!v65)
  {
    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
    std::__shared_weak_count::__release_weak(v60);
    v67 = *a1;
    v66 = (std::__shared_weak_count *)a1[1];
    if (!v66)
      goto LABEL_81;
  }
  else
  {
LABEL_78:
    v67 = *a1;
    v66 = (std::__shared_weak_count *)a1[1];
    if (!v66)
      goto LABEL_81;
  }
  v68 = (unint64_t *)&v66->__shared_owners_;
  do
    v69 = __ldxr(v68);
  while (__stxr(v69 + 1, v68));
LABEL_81:
  v307 = 9;
  strcpy((char *)__p, "EyeDown_L");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v67, (const cva::ItemHandler *)v308);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v308);
  if (!v66)
    goto LABEL_85;
  v70 = (unint64_t *)&v66->__shared_owners_;
  do
    v71 = __ldaxr(v70);
  while (__stlxr(v71 - 1, v70));
  if (!v71)
  {
    ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
    std::__shared_weak_count::__release_weak(v66);
    v73 = *a1;
    v72 = (std::__shared_weak_count *)a1[1];
    if (!v72)
      goto LABEL_88;
  }
  else
  {
LABEL_85:
    v73 = *a1;
    v72 = (std::__shared_weak_count *)a1[1];
    if (!v72)
      goto LABEL_88;
  }
  v74 = (unint64_t *)&v72->__shared_owners_;
  do
    v75 = __ldxr(v74);
  while (__stxr(v75 + 1, v74));
LABEL_88:
  v307 = 9;
  strcpy((char *)__p, "EyeDown_R");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v73, (const cva::ItemHandler *)v308);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v308);
  if (!v72)
    goto LABEL_92;
  v76 = (unint64_t *)&v72->__shared_owners_;
  do
    v77 = __ldaxr(v76);
  while (__stlxr(v77 - 1, v76));
  if (!v77)
  {
    ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
    std::__shared_weak_count::__release_weak(v72);
    v79 = *a1;
    v78 = (std::__shared_weak_count *)a1[1];
    if (!v78)
      goto LABEL_95;
  }
  else
  {
LABEL_92:
    v79 = *a1;
    v78 = (std::__shared_weak_count *)a1[1];
    if (!v78)
      goto LABEL_95;
  }
  v80 = (unint64_t *)&v78->__shared_owners_;
  do
    v81 = __ldxr(v80);
  while (__stxr(v81 + 1, v80));
LABEL_95:
  v307 = 7;
  strcpy((char *)__p, "EyeIn_L");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v79, (const cva::ItemHandler *)v308);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v308);
  if (!v78)
    goto LABEL_99;
  v82 = (unint64_t *)&v78->__shared_owners_;
  do
    v83 = __ldaxr(v82);
  while (__stlxr(v83 - 1, v82));
  if (!v83)
  {
    ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
    std::__shared_weak_count::__release_weak(v78);
    v85 = *a1;
    v84 = (std::__shared_weak_count *)a1[1];
    if (!v84)
      goto LABEL_102;
  }
  else
  {
LABEL_99:
    v85 = *a1;
    v84 = (std::__shared_weak_count *)a1[1];
    if (!v84)
      goto LABEL_102;
  }
  v86 = (unint64_t *)&v84->__shared_owners_;
  do
    v87 = __ldxr(v86);
  while (__stxr(v87 + 1, v86));
LABEL_102:
  v307 = 7;
  strcpy((char *)__p, "EyeIn_R");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v85, (const cva::ItemHandler *)v308);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v308);
  if (!v84)
    goto LABEL_106;
  v88 = (unint64_t *)&v84->__shared_owners_;
  do
    v89 = __ldaxr(v88);
  while (__stlxr(v89 - 1, v88));
  if (!v89)
  {
    ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
    std::__shared_weak_count::__release_weak(v84);
    v91 = *a1;
    v90 = (std::__shared_weak_count *)a1[1];
    if (!v90)
      goto LABEL_109;
  }
  else
  {
LABEL_106:
    v91 = *a1;
    v90 = (std::__shared_weak_count *)a1[1];
    if (!v90)
      goto LABEL_109;
  }
  v92 = (unint64_t *)&v90->__shared_owners_;
  do
    v93 = __ldxr(v92);
  while (__stxr(v93 + 1, v92));
LABEL_109:
  v307 = 9;
  strcpy((char *)__p, "EyeOpen_L");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v91, (const cva::ItemHandler *)v308);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v308);
  if (!v90)
    goto LABEL_113;
  v94 = (unint64_t *)&v90->__shared_owners_;
  do
    v95 = __ldaxr(v94);
  while (__stlxr(v95 - 1, v94));
  if (!v95)
  {
    ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
    std::__shared_weak_count::__release_weak(v90);
    v97 = *a1;
    v96 = (std::__shared_weak_count *)a1[1];
    if (!v96)
      goto LABEL_116;
  }
  else
  {
LABEL_113:
    v97 = *a1;
    v96 = (std::__shared_weak_count *)a1[1];
    if (!v96)
      goto LABEL_116;
  }
  v98 = (unint64_t *)&v96->__shared_owners_;
  do
    v99 = __ldxr(v98);
  while (__stxr(v99 + 1, v98));
LABEL_116:
  v307 = 9;
  strcpy((char *)__p, "EyeOpen_R");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v97, (const cva::ItemHandler *)v308);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v308);
  if (!v96)
    goto LABEL_120;
  v100 = (unint64_t *)&v96->__shared_owners_;
  do
    v101 = __ldaxr(v100);
  while (__stlxr(v101 - 1, v100));
  if (!v101)
  {
    ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
    std::__shared_weak_count::__release_weak(v96);
    v103 = *a1;
    v102 = (std::__shared_weak_count *)a1[1];
    if (!v102)
      goto LABEL_123;
  }
  else
  {
LABEL_120:
    v103 = *a1;
    v102 = (std::__shared_weak_count *)a1[1];
    if (!v102)
      goto LABEL_123;
  }
  v104 = (unint64_t *)&v102->__shared_owners_;
  do
    v105 = __ldxr(v104);
  while (__stxr(v105 + 1, v104));
LABEL_123:
  v307 = 8;
  strcpy((char *)__p, "EyeOut_L");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v103, (const cva::ItemHandler *)v308);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v308);
  if (!v102)
    goto LABEL_127;
  v106 = (unint64_t *)&v102->__shared_owners_;
  do
    v107 = __ldaxr(v106);
  while (__stlxr(v107 - 1, v106));
  if (!v107)
  {
    ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
    std::__shared_weak_count::__release_weak(v102);
    v109 = *a1;
    v108 = (std::__shared_weak_count *)a1[1];
    if (!v108)
      goto LABEL_130;
  }
  else
  {
LABEL_127:
    v109 = *a1;
    v108 = (std::__shared_weak_count *)a1[1];
    if (!v108)
      goto LABEL_130;
  }
  v110 = (unint64_t *)&v108->__shared_owners_;
  do
    v111 = __ldxr(v110);
  while (__stxr(v111 + 1, v110));
LABEL_130:
  v307 = 8;
  strcpy((char *)__p, "EyeOut_R");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v109, (const cva::ItemHandler *)v308);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v308);
  if (!v108)
    goto LABEL_134;
  v112 = (unint64_t *)&v108->__shared_owners_;
  do
    v113 = __ldaxr(v112);
  while (__stlxr(v113 - 1, v112));
  if (!v113)
  {
    ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
    std::__shared_weak_count::__release_weak(v108);
    v115 = *a1;
    v114 = (std::__shared_weak_count *)a1[1];
    if (!v114)
      goto LABEL_137;
  }
  else
  {
LABEL_134:
    v115 = *a1;
    v114 = (std::__shared_weak_count *)a1[1];
    if (!v114)
      goto LABEL_137;
  }
  v116 = (unint64_t *)&v114->__shared_owners_;
  do
    v117 = __ldxr(v116);
  while (__stxr(v117 + 1, v116));
LABEL_137:
  v307 = 11;
  strcpy((char *)__p, "EyeSquint_L");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v115, (const cva::ItemHandler *)v308);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v308);
  if (!v114)
    goto LABEL_141;
  v118 = (unint64_t *)&v114->__shared_owners_;
  do
    v119 = __ldaxr(v118);
  while (__stlxr(v119 - 1, v118));
  if (!v119)
  {
    ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
    std::__shared_weak_count::__release_weak(v114);
    v121 = *a1;
    v120 = (std::__shared_weak_count *)a1[1];
    if (!v120)
      goto LABEL_144;
  }
  else
  {
LABEL_141:
    v121 = *a1;
    v120 = (std::__shared_weak_count *)a1[1];
    if (!v120)
      goto LABEL_144;
  }
  v122 = (unint64_t *)&v120->__shared_owners_;
  do
    v123 = __ldxr(v122);
  while (__stxr(v123 + 1, v122));
LABEL_144:
  v307 = 11;
  strcpy((char *)__p, "EyeSquint_R");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v121, (const cva::ItemHandler *)v308);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v308);
  if (!v120)
    goto LABEL_148;
  v124 = (unint64_t *)&v120->__shared_owners_;
  do
    v125 = __ldaxr(v124);
  while (__stlxr(v125 - 1, v124));
  if (!v125)
  {
    ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
    std::__shared_weak_count::__release_weak(v120);
    v127 = *a1;
    v126 = (std::__shared_weak_count *)a1[1];
    if (!v126)
      goto LABEL_151;
  }
  else
  {
LABEL_148:
    v127 = *a1;
    v126 = (std::__shared_weak_count *)a1[1];
    if (!v126)
      goto LABEL_151;
  }
  v128 = (unint64_t *)&v126->__shared_owners_;
  do
    v129 = __ldxr(v128);
  while (__stxr(v129 + 1, v128));
LABEL_151:
  v307 = 7;
  strcpy((char *)__p, "EyeUp_L");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v127, (const cva::ItemHandler *)v308);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v308);
  if (!v126)
    goto LABEL_155;
  v130 = (unint64_t *)&v126->__shared_owners_;
  do
    v131 = __ldaxr(v130);
  while (__stlxr(v131 - 1, v130));
  if (!v131)
  {
    ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
    std::__shared_weak_count::__release_weak(v126);
    v133 = *a1;
    v132 = (std::__shared_weak_count *)a1[1];
    if (!v132)
      goto LABEL_158;
  }
  else
  {
LABEL_155:
    v133 = *a1;
    v132 = (std::__shared_weak_count *)a1[1];
    if (!v132)
      goto LABEL_158;
  }
  v134 = (unint64_t *)&v132->__shared_owners_;
  do
    v135 = __ldxr(v134);
  while (__stxr(v135 + 1, v134));
LABEL_158:
  v307 = 7;
  strcpy((char *)__p, "EyeUp_R");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v133, (const cva::ItemHandler *)v308);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v308);
  if (!v132)
    goto LABEL_162;
  v136 = (unint64_t *)&v132->__shared_owners_;
  do
    v137 = __ldaxr(v136);
  while (__stlxr(v137 - 1, v136));
  if (!v137)
  {
    ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
    std::__shared_weak_count::__release_weak(v132);
    v139 = *a1;
    v138 = (std::__shared_weak_count *)a1[1];
    if (!v138)
      goto LABEL_165;
  }
  else
  {
LABEL_162:
    v139 = *a1;
    v138 = (std::__shared_weak_count *)a1[1];
    if (!v138)
      goto LABEL_165;
  }
  v140 = (unint64_t *)&v138->__shared_owners_;
  do
    v141 = __ldxr(v140);
  while (__stxr(v141 + 1, v140));
LABEL_165:
  v307 = 6;
  strcpy((char *)__p, "JawFwd");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v139, (const cva::ItemHandler *)v308);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v308);
  if (!v138)
    goto LABEL_169;
  v142 = (unint64_t *)&v138->__shared_owners_;
  do
    v143 = __ldaxr(v142);
  while (__stlxr(v143 - 1, v142));
  if (!v143)
  {
    ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
    std::__shared_weak_count::__release_weak(v138);
    v145 = *a1;
    v144 = (std::__shared_weak_count *)a1[1];
    if (!v144)
      goto LABEL_172;
  }
  else
  {
LABEL_169:
    v145 = *a1;
    v144 = (std::__shared_weak_count *)a1[1];
    if (!v144)
      goto LABEL_172;
  }
  v146 = (unint64_t *)&v144->__shared_owners_;
  do
    v147 = __ldxr(v146);
  while (__stxr(v147 + 1, v146));
LABEL_172:
  v307 = 7;
  strcpy((char *)__p, "JawLeft");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v145, (const cva::ItemHandler *)v308);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v308);
  if (!v144)
    goto LABEL_176;
  v148 = (unint64_t *)&v144->__shared_owners_;
  do
    v149 = __ldaxr(v148);
  while (__stlxr(v149 - 1, v148));
  if (!v149)
  {
    ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
    std::__shared_weak_count::__release_weak(v144);
    v151 = *a1;
    v150 = (std::__shared_weak_count *)a1[1];
    if (!v150)
      goto LABEL_179;
  }
  else
  {
LABEL_176:
    v151 = *a1;
    v150 = (std::__shared_weak_count *)a1[1];
    if (!v150)
      goto LABEL_179;
  }
  v152 = (unint64_t *)&v150->__shared_owners_;
  do
    v153 = __ldxr(v152);
  while (__stxr(v153 + 1, v152));
LABEL_179:
  v307 = 7;
  strcpy((char *)__p, "JawOpen");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v151, (const cva::ItemHandler *)v308);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v308);
  if (!v150)
    goto LABEL_183;
  v154 = (unint64_t *)&v150->__shared_owners_;
  do
    v155 = __ldaxr(v154);
  while (__stlxr(v155 - 1, v154));
  if (!v155)
  {
    ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
    std::__shared_weak_count::__release_weak(v150);
    v157 = *a1;
    v156 = (std::__shared_weak_count *)a1[1];
    if (!v156)
      goto LABEL_186;
  }
  else
  {
LABEL_183:
    v157 = *a1;
    v156 = (std::__shared_weak_count *)a1[1];
    if (!v156)
      goto LABEL_186;
  }
  v158 = (unint64_t *)&v156->__shared_owners_;
  do
    v159 = __ldxr(v158);
  while (__stxr(v159 + 1, v158));
LABEL_186:
  v307 = 8;
  strcpy((char *)__p, "JawRight");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v157, (const cva::ItemHandler *)v308);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v308);
  if (!v156)
    goto LABEL_190;
  v160 = (unint64_t *)&v156->__shared_owners_;
  do
    v161 = __ldaxr(v160);
  while (__stlxr(v161 - 1, v160));
  if (!v161)
  {
    ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
    std::__shared_weak_count::__release_weak(v156);
    v163 = *a1;
    v162 = (std::__shared_weak_count *)a1[1];
    if (!v162)
      goto LABEL_193;
  }
  else
  {
LABEL_190:
    v163 = *a1;
    v162 = (std::__shared_weak_count *)a1[1];
    if (!v162)
      goto LABEL_193;
  }
  v164 = (unint64_t *)&v162->__shared_owners_;
  do
    v165 = __ldxr(v164);
  while (__stxr(v165 + 1, v164));
LABEL_193:
  v307 = 10;
  strcpy((char *)__p, "LipsFunnel");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v163, (const cva::ItemHandler *)v308);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v308);
  if (!v162)
    goto LABEL_197;
  v166 = (unint64_t *)&v162->__shared_owners_;
  do
    v167 = __ldaxr(v166);
  while (__stlxr(v167 - 1, v166));
  if (!v167)
  {
    ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
    std::__shared_weak_count::__release_weak(v162);
    v169 = *a1;
    v168 = (std::__shared_weak_count *)a1[1];
    if (!v168)
      goto LABEL_200;
  }
  else
  {
LABEL_197:
    v169 = *a1;
    v168 = (std::__shared_weak_count *)a1[1];
    if (!v168)
      goto LABEL_200;
  }
  v170 = (unint64_t *)&v168->__shared_owners_;
  do
    v171 = __ldxr(v170);
  while (__stxr(v171 + 1, v170));
LABEL_200:
  v307 = 14;
  strcpy((char *)__p, "LipsLowerClose");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v169, (const cva::ItemHandler *)v308);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v308);
  if (!v168)
    goto LABEL_204;
  v172 = (unint64_t *)&v168->__shared_owners_;
  do
    v173 = __ldaxr(v172);
  while (__stlxr(v173 - 1, v172));
  if (!v173)
  {
    ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
    std::__shared_weak_count::__release_weak(v168);
    v175 = *a1;
    v174 = (std::__shared_weak_count *)a1[1];
    if (!v174)
      goto LABEL_207;
  }
  else
  {
LABEL_204:
    v175 = *a1;
    v174 = (std::__shared_weak_count *)a1[1];
    if (!v174)
      goto LABEL_207;
  }
  v176 = (unint64_t *)&v174->__shared_owners_;
  do
    v177 = __ldxr(v176);
  while (__stxr(v177 + 1, v176));
LABEL_207:
  v307 = 15;
  strcpy((char *)__p, "LipsLowerDown_L");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v175, (const cva::ItemHandler *)v308);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v308);
  if (!v174)
    goto LABEL_211;
  v178 = (unint64_t *)&v174->__shared_owners_;
  do
    v179 = __ldaxr(v178);
  while (__stlxr(v179 - 1, v178));
  if (!v179)
  {
    ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
    std::__shared_weak_count::__release_weak(v174);
    v181 = *a1;
    v180 = (std::__shared_weak_count *)a1[1];
    if (!v180)
      goto LABEL_214;
  }
  else
  {
LABEL_211:
    v181 = *a1;
    v180 = (std::__shared_weak_count *)a1[1];
    if (!v180)
      goto LABEL_214;
  }
  v182 = (unint64_t *)&v180->__shared_owners_;
  do
    v183 = __ldxr(v182);
  while (__stxr(v183 + 1, v182));
LABEL_214:
  v307 = 15;
  strcpy((char *)__p, "LipsLowerDown_R");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v181, (const cva::ItemHandler *)v308);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v308);
  if (!v180)
    goto LABEL_218;
  v184 = (unint64_t *)&v180->__shared_owners_;
  do
    v185 = __ldaxr(v184);
  while (__stlxr(v185 - 1, v184));
  if (!v185)
  {
    ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
    std::__shared_weak_count::__release_weak(v180);
    v187 = *a1;
    v186 = (std::__shared_weak_count *)a1[1];
    if (!v186)
      goto LABEL_221;
  }
  else
  {
LABEL_218:
    v187 = *a1;
    v186 = (std::__shared_weak_count *)a1[1];
    if (!v186)
      goto LABEL_221;
  }
  v188 = (unint64_t *)&v186->__shared_owners_;
  do
    v189 = __ldxr(v188);
  while (__stxr(v189 + 1, v188));
LABEL_221:
  v307 = 10;
  strcpy((char *)__p, "LipsPucker");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v187, (const cva::ItemHandler *)v308);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v308);
  if (!v186)
    goto LABEL_225;
  v190 = (unint64_t *)&v186->__shared_owners_;
  do
    v191 = __ldaxr(v190);
  while (__stlxr(v191 - 1, v190));
  if (!v191)
  {
    ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
    std::__shared_weak_count::__release_weak(v186);
    v193 = *a1;
    v192 = (std::__shared_weak_count *)a1[1];
    if (!v192)
      goto LABEL_228;
  }
  else
  {
LABEL_225:
    v193 = *a1;
    v192 = (std::__shared_weak_count *)a1[1];
    if (!v192)
      goto LABEL_228;
  }
  v194 = (unint64_t *)&v192->__shared_owners_;
  do
    v195 = __ldxr(v194);
  while (__stxr(v195 + 1, v194));
LABEL_228:
  v307 = 13;
  strcpy((char *)__p, "LipsStretch_L");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v193, (const cva::ItemHandler *)v308);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v308);
  if (!v192)
    goto LABEL_232;
  v196 = (unint64_t *)&v192->__shared_owners_;
  do
    v197 = __ldaxr(v196);
  while (__stlxr(v197 - 1, v196));
  if (!v197)
  {
    ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
    std::__shared_weak_count::__release_weak(v192);
    v199 = *a1;
    v198 = (std::__shared_weak_count *)a1[1];
    if (!v198)
      goto LABEL_235;
  }
  else
  {
LABEL_232:
    v199 = *a1;
    v198 = (std::__shared_weak_count *)a1[1];
    if (!v198)
      goto LABEL_235;
  }
  v200 = (unint64_t *)&v198->__shared_owners_;
  do
    v201 = __ldxr(v200);
  while (__stxr(v201 + 1, v200));
LABEL_235:
  v307 = 13;
  strcpy((char *)__p, "LipsStretch_R");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v199, (const cva::ItemHandler *)v308);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v308);
  if (!v198)
    goto LABEL_239;
  v202 = (unint64_t *)&v198->__shared_owners_;
  do
    v203 = __ldaxr(v202);
  while (__stlxr(v203 - 1, v202));
  if (!v203)
  {
    ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
    std::__shared_weak_count::__release_weak(v198);
    v205 = *a1;
    v204 = (std::__shared_weak_count *)a1[1];
    if (!v204)
      goto LABEL_242;
  }
  else
  {
LABEL_239:
    v205 = *a1;
    v204 = (std::__shared_weak_count *)a1[1];
    if (!v204)
      goto LABEL_242;
  }
  v206 = (unint64_t *)&v204->__shared_owners_;
  do
    v207 = __ldxr(v206);
  while (__stxr(v207 + 1, v206));
LABEL_242:
  v307 = 12;
  strcpy((char *)__p, "LipsTogether");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v205, (const cva::ItemHandler *)v308);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v308);
  if (!v204)
    goto LABEL_246;
  v208 = (unint64_t *)&v204->__shared_owners_;
  do
    v209 = __ldaxr(v208);
  while (__stlxr(v209 - 1, v208));
  if (!v209)
  {
    ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
    std::__shared_weak_count::__release_weak(v204);
    v211 = *a1;
    v210 = (std::__shared_weak_count *)a1[1];
    if (!v210)
      goto LABEL_249;
  }
  else
  {
LABEL_246:
    v211 = *a1;
    v210 = (std::__shared_weak_count *)a1[1];
    if (!v210)
      goto LABEL_249;
  }
  v212 = (unint64_t *)&v210->__shared_owners_;
  do
    v213 = __ldxr(v212);
  while (__stxr(v213 + 1, v212));
LABEL_249:
  v307 = 14;
  strcpy((char *)__p, "LipsUpperClose");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v211, (const cva::ItemHandler *)v308);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v308);
  if (!v210)
    goto LABEL_253;
  v214 = (unint64_t *)&v210->__shared_owners_;
  do
    v215 = __ldaxr(v214);
  while (__stlxr(v215 - 1, v214));
  if (!v215)
  {
    ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
    std::__shared_weak_count::__release_weak(v210);
    v217 = *a1;
    v216 = (std::__shared_weak_count *)a1[1];
    if (!v216)
      goto LABEL_256;
  }
  else
  {
LABEL_253:
    v217 = *a1;
    v216 = (std::__shared_weak_count *)a1[1];
    if (!v216)
      goto LABEL_256;
  }
  v218 = (unint64_t *)&v216->__shared_owners_;
  do
    v219 = __ldxr(v218);
  while (__stxr(v219 + 1, v218));
LABEL_256:
  v307 = 13;
  strcpy((char *)__p, "LipsUpperUp_L");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v217, (const cva::ItemHandler *)v308);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v308);
  if (!v216)
    goto LABEL_260;
  v220 = (unint64_t *)&v216->__shared_owners_;
  do
    v221 = __ldaxr(v220);
  while (__stlxr(v221 - 1, v220));
  if (!v221)
  {
    ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
    std::__shared_weak_count::__release_weak(v216);
    v223 = *a1;
    v222 = (std::__shared_weak_count *)a1[1];
    if (!v222)
      goto LABEL_263;
  }
  else
  {
LABEL_260:
    v223 = *a1;
    v222 = (std::__shared_weak_count *)a1[1];
    if (!v222)
      goto LABEL_263;
  }
  v224 = (unint64_t *)&v222->__shared_owners_;
  do
    v225 = __ldxr(v224);
  while (__stxr(v225 + 1, v224));
LABEL_263:
  v307 = 13;
  strcpy((char *)__p, "LipsUpperUp_R");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v223, (const cva::ItemHandler *)v308);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v308);
  if (!v222)
    goto LABEL_267;
  v226 = (unint64_t *)&v222->__shared_owners_;
  do
    v227 = __ldaxr(v226);
  while (__stlxr(v227 - 1, v226));
  if (!v227)
  {
    ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
    std::__shared_weak_count::__release_weak(v222);
    v229 = *a1;
    v228 = (std::__shared_weak_count *)a1[1];
    if (!v228)
      goto LABEL_270;
  }
  else
  {
LABEL_267:
    v229 = *a1;
    v228 = (std::__shared_weak_count *)a1[1];
    if (!v228)
      goto LABEL_270;
  }
  v230 = (unint64_t *)&v228->__shared_owners_;
  do
    v231 = __ldxr(v230);
  while (__stxr(v231 + 1, v230));
LABEL_270:
  v307 = 13;
  strcpy((char *)__p, "MouthDimple_L");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v229, (const cva::ItemHandler *)v308);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v308);
  if (!v228)
    goto LABEL_274;
  v232 = (unint64_t *)&v228->__shared_owners_;
  do
    v233 = __ldaxr(v232);
  while (__stlxr(v233 - 1, v232));
  if (!v233)
  {
    ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
    std::__shared_weak_count::__release_weak(v228);
    v235 = *a1;
    v234 = (std::__shared_weak_count *)a1[1];
    if (!v234)
      goto LABEL_277;
  }
  else
  {
LABEL_274:
    v235 = *a1;
    v234 = (std::__shared_weak_count *)a1[1];
    if (!v234)
      goto LABEL_277;
  }
  v236 = (unint64_t *)&v234->__shared_owners_;
  do
    v237 = __ldxr(v236);
  while (__stxr(v237 + 1, v236));
LABEL_277:
  v307 = 13;
  strcpy((char *)__p, "MouthDimple_R");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v235, (const cva::ItemHandler *)v308);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v308);
  if (!v234)
    goto LABEL_281;
  v238 = (unint64_t *)&v234->__shared_owners_;
  do
    v239 = __ldaxr(v238);
  while (__stlxr(v239 - 1, v238));
  if (!v239)
  {
    ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
    std::__shared_weak_count::__release_weak(v234);
    v241 = *a1;
    v240 = (std::__shared_weak_count *)a1[1];
    if (!v240)
      goto LABEL_284;
  }
  else
  {
LABEL_281:
    v241 = *a1;
    v240 = (std::__shared_weak_count *)a1[1];
    if (!v240)
      goto LABEL_284;
  }
  v242 = (unint64_t *)&v240->__shared_owners_;
  do
    v243 = __ldxr(v242);
  while (__stxr(v243 + 1, v242));
LABEL_284:
  v307 = 12;
  strcpy((char *)__p, "MouthFrown_L");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v241, (const cva::ItemHandler *)v308);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v308);
  if (!v240)
    goto LABEL_288;
  v244 = (unint64_t *)&v240->__shared_owners_;
  do
    v245 = __ldaxr(v244);
  while (__stlxr(v245 - 1, v244));
  if (!v245)
  {
    ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
    std::__shared_weak_count::__release_weak(v240);
    v247 = *a1;
    v246 = (std::__shared_weak_count *)a1[1];
    if (!v246)
      goto LABEL_291;
  }
  else
  {
LABEL_288:
    v247 = *a1;
    v246 = (std::__shared_weak_count *)a1[1];
    if (!v246)
      goto LABEL_291;
  }
  v248 = (unint64_t *)&v246->__shared_owners_;
  do
    v249 = __ldxr(v248);
  while (__stxr(v249 + 1, v248));
LABEL_291:
  v307 = 12;
  strcpy((char *)__p, "MouthFrown_R");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v247, (const cva::ItemHandler *)v308);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v308);
  if (!v246)
    goto LABEL_295;
  v250 = (unint64_t *)&v246->__shared_owners_;
  do
    v251 = __ldaxr(v250);
  while (__stlxr(v251 - 1, v250));
  if (!v251)
  {
    ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
    std::__shared_weak_count::__release_weak(v246);
    v253 = *a1;
    v252 = (std::__shared_weak_count *)a1[1];
    if (!v252)
      goto LABEL_298;
  }
  else
  {
LABEL_295:
    v253 = *a1;
    v252 = (std::__shared_weak_count *)a1[1];
    if (!v252)
      goto LABEL_298;
  }
  v254 = (unint64_t *)&v252->__shared_owners_;
  do
    v255 = __ldxr(v254);
  while (__stxr(v255 + 1, v254));
LABEL_298:
  v307 = 9;
  strcpy((char *)__p, "MouthLeft");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v253, (const cva::ItemHandler *)v308);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v308);
  if (!v252)
    goto LABEL_302;
  v256 = (unint64_t *)&v252->__shared_owners_;
  do
    v257 = __ldaxr(v256);
  while (__stlxr(v257 - 1, v256));
  if (!v257)
  {
    ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
    std::__shared_weak_count::__release_weak(v252);
    v259 = *a1;
    v258 = (std::__shared_weak_count *)a1[1];
    if (!v258)
      goto LABEL_305;
  }
  else
  {
LABEL_302:
    v259 = *a1;
    v258 = (std::__shared_weak_count *)a1[1];
    if (!v258)
      goto LABEL_305;
  }
  v260 = (unint64_t *)&v258->__shared_owners_;
  do
    v261 = __ldxr(v260);
  while (__stxr(v261 + 1, v260));
LABEL_305:
  v307 = 12;
  strcpy((char *)__p, "MouthPress_L");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v259, (const cva::ItemHandler *)v308);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v308);
  if (!v258)
    goto LABEL_309;
  v262 = (unint64_t *)&v258->__shared_owners_;
  do
    v263 = __ldaxr(v262);
  while (__stlxr(v263 - 1, v262));
  if (!v263)
  {
    ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
    std::__shared_weak_count::__release_weak(v258);
    v265 = *a1;
    v264 = (std::__shared_weak_count *)a1[1];
    if (!v264)
      goto LABEL_312;
  }
  else
  {
LABEL_309:
    v265 = *a1;
    v264 = (std::__shared_weak_count *)a1[1];
    if (!v264)
      goto LABEL_312;
  }
  v266 = (unint64_t *)&v264->__shared_owners_;
  do
    v267 = __ldxr(v266);
  while (__stxr(v267 + 1, v266));
LABEL_312:
  v307 = 12;
  strcpy((char *)__p, "MouthPress_R");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v265, (const cva::ItemHandler *)v308);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v308);
  if (!v264)
    goto LABEL_316;
  v268 = (unint64_t *)&v264->__shared_owners_;
  do
    v269 = __ldaxr(v268);
  while (__stlxr(v269 - 1, v268));
  if (!v269)
  {
    ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
    std::__shared_weak_count::__release_weak(v264);
    v271 = *a1;
    v270 = (std::__shared_weak_count *)a1[1];
    if (!v270)
      goto LABEL_319;
  }
  else
  {
LABEL_316:
    v271 = *a1;
    v270 = (std::__shared_weak_count *)a1[1];
    if (!v270)
      goto LABEL_319;
  }
  v272 = (unint64_t *)&v270->__shared_owners_;
  do
    v273 = __ldxr(v272);
  while (__stxr(v273 + 1, v272));
LABEL_319:
  v307 = 10;
  strcpy((char *)__p, "MouthRight");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v271, (const cva::ItemHandler *)v308);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v308);
  if (!v270)
    goto LABEL_323;
  v274 = (unint64_t *)&v270->__shared_owners_;
  do
    v275 = __ldaxr(v274);
  while (__stlxr(v275 - 1, v274));
  if (!v275)
  {
    ((void (*)(std::__shared_weak_count *))v270->__on_zero_shared)(v270);
    std::__shared_weak_count::__release_weak(v270);
    v277 = *a1;
    v276 = (std::__shared_weak_count *)a1[1];
    if (!v276)
      goto LABEL_326;
  }
  else
  {
LABEL_323:
    v277 = *a1;
    v276 = (std::__shared_weak_count *)a1[1];
    if (!v276)
      goto LABEL_326;
  }
  v278 = (unint64_t *)&v276->__shared_owners_;
  do
    v279 = __ldxr(v278);
  while (__stxr(v279 + 1, v278));
LABEL_326:
  v307 = 12;
  strcpy((char *)__p, "MouthSmile_L");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v277, (const cva::ItemHandler *)v308);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v308);
  if (!v276)
    goto LABEL_330;
  v280 = (unint64_t *)&v276->__shared_owners_;
  do
    v281 = __ldaxr(v280);
  while (__stlxr(v281 - 1, v280));
  if (!v281)
  {
    ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
    std::__shared_weak_count::__release_weak(v276);
    v283 = *a1;
    v282 = (std::__shared_weak_count *)a1[1];
    if (!v282)
      goto LABEL_333;
  }
  else
  {
LABEL_330:
    v283 = *a1;
    v282 = (std::__shared_weak_count *)a1[1];
    if (!v282)
      goto LABEL_333;
  }
  v284 = (unint64_t *)&v282->__shared_owners_;
  do
    v285 = __ldxr(v284);
  while (__stxr(v285 + 1, v284));
LABEL_333:
  v307 = 12;
  strcpy((char *)__p, "MouthSmile_R");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v283, (const cva::ItemHandler *)v308);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v308);
  if (!v282)
    goto LABEL_337;
  v286 = (unint64_t *)&v282->__shared_owners_;
  do
    v287 = __ldaxr(v286);
  while (__stlxr(v287 - 1, v286));
  if (!v287)
  {
    ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
    std::__shared_weak_count::__release_weak(v282);
    v289 = *a1;
    v288 = (std::__shared_weak_count *)a1[1];
    if (!v288)
      goto LABEL_340;
  }
  else
  {
LABEL_337:
    v289 = *a1;
    v288 = (std::__shared_weak_count *)a1[1];
    if (!v288)
      goto LABEL_340;
  }
  v290 = (unint64_t *)&v288->__shared_owners_;
  do
    v291 = __ldxr(v290);
  while (__stxr(v291 + 1, v290));
LABEL_340:
  v307 = 4;
  strcpy((char *)__p, "Puff");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v289, (const cva::ItemHandler *)v308);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v308);
  if (!v288)
    goto LABEL_344;
  v292 = (unint64_t *)&v288->__shared_owners_;
  do
    v293 = __ldaxr(v292);
  while (__stlxr(v293 - 1, v292));
  if (!v293)
  {
    ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
    std::__shared_weak_count::__release_weak(v288);
    v295 = *a1;
    v294 = (std::__shared_weak_count *)a1[1];
    if (!v294)
      goto LABEL_347;
  }
  else
  {
LABEL_344:
    v295 = *a1;
    v294 = (std::__shared_weak_count *)a1[1];
    if (!v294)
      goto LABEL_347;
  }
  v296 = (unint64_t *)&v294->__shared_owners_;
  do
    v297 = __ldxr(v296);
  while (__stxr(v297 + 1, v296));
LABEL_347:
  v307 = 7;
  strcpy((char *)__p, "Sneer_L");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v295, (const cva::ItemHandler *)v308);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v308);
  if (!v294)
    goto LABEL_351;
  v298 = (unint64_t *)&v294->__shared_owners_;
  do
    v299 = __ldaxr(v298);
  while (__stlxr(v299 - 1, v298));
  if (!v299)
  {
    ((void (*)(std::__shared_weak_count *))v294->__on_zero_shared)(v294);
    std::__shared_weak_count::__release_weak(v294);
    v301 = *a1;
    v300 = (std::__shared_weak_count *)a1[1];
    if (!v300)
      goto LABEL_354;
  }
  else
  {
LABEL_351:
    v301 = *a1;
    v300 = (std::__shared_weak_count *)a1[1];
    if (!v300)
      goto LABEL_354;
  }
  v302 = (unint64_t *)&v300->__shared_owners_;
  do
    v303 = __ldxr(v302);
  while (__stxr(v303 + 1, v302));
LABEL_354:
  v307 = 7;
  strcpy((char *)__p, "Sneer_R");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v301, (const cva::ItemHandler *)v308);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v308);
  if (v300)
  {
    v304 = (unint64_t *)&v300->__shared_owners_;
    do
      v305 = __ldaxr(v304);
    while (__stlxr(v305 - 1, v304));
    if (!v305)
    {
      ((void (*)(std::__shared_weak_count *))v300->__on_zero_shared)(v300);
      std::__shared_weak_count::__release_weak(v300);
    }
  }
}

void sub_1C98DBEA8(cva::ArrayHandler **a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  cva::ArrayHandler *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  cva::ArrayHandler *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  cva::ArrayHandler *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  cva::ArrayHandler *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  cva::ArrayHandler *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  cva::ArrayHandler *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  cva::ArrayHandler *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  cva::ArrayHandler *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  cva::ArrayHandler *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  cva::ArrayHandler *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  cva::ArrayHandler *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  cva::ArrayHandler *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  cva::ArrayHandler *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  cva::ArrayHandler *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  cva::ArrayHandler *v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  cva::ArrayHandler *v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  cva::ArrayHandler *v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  cva::ArrayHandler *v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  cva::ArrayHandler *v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  cva::ArrayHandler *v121;
  unint64_t *v122;
  unint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  cva::ArrayHandler *v127;
  unint64_t *v128;
  unint64_t v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  cva::ArrayHandler *v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  cva::ArrayHandler *v139;
  unint64_t *v140;
  unint64_t v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  cva::ArrayHandler *v145;
  unint64_t *v146;
  unint64_t v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  cva::ArrayHandler *v151;
  unint64_t *v152;
  unint64_t v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  cva::ArrayHandler *v157;
  unint64_t *v158;
  unint64_t v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  cva::ArrayHandler *v163;
  unint64_t *v164;
  unint64_t v165;
  unint64_t *v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  cva::ArrayHandler *v169;
  unint64_t *v170;
  unint64_t v171;
  unint64_t *v172;
  unint64_t v173;
  std::__shared_weak_count *v174;
  cva::ArrayHandler *v175;
  unint64_t *v176;
  unint64_t v177;
  unint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count *v180;
  cva::ArrayHandler *v181;
  unint64_t *v182;
  unint64_t v183;
  unint64_t *v184;
  unint64_t v185;
  std::__shared_weak_count *v186;
  cva::ArrayHandler *v187;
  unint64_t *v188;
  unint64_t v189;
  unint64_t *v190;
  unint64_t v191;
  std::__shared_weak_count *v192;
  cva::ArrayHandler *v193;
  unint64_t *v194;
  unint64_t v195;
  unint64_t *v196;
  unint64_t v197;
  std::__shared_weak_count *v198;
  cva::ArrayHandler *v199;
  unint64_t *v200;
  unint64_t v201;
  unint64_t *v202;
  unint64_t v203;
  std::__shared_weak_count *v204;
  cva::ArrayHandler *v205;
  unint64_t *v206;
  unint64_t v207;
  unint64_t *v208;
  unint64_t v209;
  std::__shared_weak_count *v210;
  cva::ArrayHandler *v211;
  unint64_t *v212;
  unint64_t v213;
  unint64_t *v214;
  unint64_t v215;
  std::__shared_weak_count *v216;
  cva::ArrayHandler *v217;
  unint64_t *v218;
  unint64_t v219;
  unint64_t *v220;
  unint64_t v221;
  std::__shared_weak_count *v222;
  cva::ArrayHandler *v223;
  unint64_t *v224;
  unint64_t v225;
  unint64_t *v226;
  unint64_t v227;
  std::__shared_weak_count *v228;
  cva::ArrayHandler *v229;
  unint64_t *v230;
  unint64_t v231;
  unint64_t *v232;
  unint64_t v233;
  std::__shared_weak_count *v234;
  cva::ArrayHandler *v235;
  unint64_t *v236;
  unint64_t v237;
  unint64_t *v238;
  unint64_t v239;
  std::__shared_weak_count *v240;
  cva::ArrayHandler *v241;
  unint64_t *v242;
  unint64_t v243;
  unint64_t *v244;
  unint64_t v245;
  std::__shared_weak_count *v246;
  cva::ArrayHandler *v247;
  unint64_t *v248;
  unint64_t v249;
  unint64_t *v250;
  unint64_t v251;
  std::__shared_weak_count *v252;
  cva::ArrayHandler *v253;
  unint64_t *v254;
  unint64_t v255;
  unint64_t *v256;
  unint64_t v257;
  std::__shared_weak_count *v258;
  cva::ArrayHandler *v259;
  unint64_t *v260;
  unint64_t v261;
  unint64_t *v262;
  unint64_t v263;
  std::__shared_weak_count *v264;
  cva::ArrayHandler *v265;
  unint64_t *v266;
  unint64_t v267;
  unint64_t *v268;
  unint64_t v269;
  std::__shared_weak_count *v270;
  cva::ArrayHandler *v271;
  unint64_t *v272;
  unint64_t v273;
  unint64_t *v274;
  unint64_t v275;
  std::__shared_weak_count *v276;
  cva::ArrayHandler *v277;
  unint64_t *v278;
  unint64_t v279;
  unint64_t *v280;
  unint64_t v281;
  std::__shared_weak_count *v282;
  cva::ArrayHandler *v283;
  unint64_t *v284;
  unint64_t v285;
  unint64_t *v286;
  unint64_t v287;
  std::__shared_weak_count *v288;
  cva::ArrayHandler *v289;
  unint64_t *v290;
  unint64_t v291;
  unint64_t *v292;
  unint64_t v293;
  std::__shared_weak_count *v294;
  cva::ArrayHandler *v295;
  unint64_t *v296;
  unint64_t v297;
  unint64_t *v298;
  unint64_t v299;
  std::__shared_weak_count *v300;
  cva::ArrayHandler *v301;
  unint64_t *v302;
  unint64_t v303;
  unint64_t *v304;
  unint64_t v305;
  std::__shared_weak_count *v306;
  cva::ArrayHandler *v307;
  unint64_t *v308;
  unint64_t v309;
  unint64_t *v310;
  unint64_t v311;
  std::__shared_weak_count *v312;
  cva::ArrayHandler *v313;
  unint64_t *v314;
  unint64_t v315;
  unint64_t *v316;
  unint64_t v317;
  std::__shared_weak_count *v318;
  cva::ArrayHandler *v319;
  unint64_t *v320;
  unint64_t v321;
  unint64_t *v322;
  unint64_t v323;
  std::__shared_weak_count *v324;
  cva::ArrayHandler *v325;
  unint64_t *v326;
  unint64_t v327;
  unint64_t *v328;
  unint64_t v329;
  std::__shared_weak_count *v330;
  cva::ArrayHandler *v331;
  unint64_t *v332;
  unint64_t v333;
  unint64_t *v334;
  unint64_t v335;
  std::__shared_weak_count *v336;
  cva::ArrayHandler *v337;
  unint64_t *v338;
  unint64_t v339;
  unint64_t *v340;
  unint64_t v341;
  std::__shared_weak_count *v342;
  cva::ArrayHandler *v343;
  unint64_t *v344;
  unint64_t v345;
  unint64_t *v346;
  unint64_t v347;
  std::__shared_weak_count *v348;
  cva::ArrayHandler *v349;
  unint64_t *v350;
  unint64_t v351;
  unint64_t *v352;
  unint64_t v353;
  std::__shared_weak_count *v354;
  cva::ArrayHandler *v355;
  unint64_t *v356;
  unint64_t v357;
  unint64_t *v358;
  unint64_t v359;
  std::__shared_weak_count *v360;
  cva::ArrayHandler *v361;
  unint64_t *v362;
  unint64_t v363;
  unint64_t *v364;
  unint64_t v365;
  std::__shared_weak_count *v366;
  cva::ArrayHandler *v367;
  unint64_t *v368;
  unint64_t v369;
  unint64_t *v370;
  unint64_t v371;
  std::__shared_weak_count *v372;
  cva::ArrayHandler *v373;
  unint64_t *v374;
  unint64_t v375;
  unint64_t *v376;
  unint64_t v377;
  std::__shared_weak_count *v378;
  cva::ArrayHandler *v379;
  unint64_t *v380;
  unint64_t v381;
  unint64_t *v382;
  unint64_t v383;
  std::__shared_weak_count *v384;
  cva::ArrayHandler *v385;
  unint64_t *v386;
  unint64_t v387;
  unint64_t *v388;
  unint64_t v389;
  std::__shared_weak_count *v390;
  cva::ArrayHandler *v391;
  unint64_t *v392;
  unint64_t v393;
  unint64_t *v394;
  unint64_t v395;
  char __p[20];
  char v397;
  _BYTE v398[16];

  v2 = (std::__shared_weak_count *)operator new(0x28uLL);
  v2->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&off_1E82956B0;
  cva::ArrayHandler::ArrayHandler((cva::ArrayHandler *)&v2[1]);
  *a1 = (cva::ArrayHandler *)&v2[1];
  a1[1] = (cva::ArrayHandler *)v2;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  v397 = 19;
  strcpy(__p, "RightEyeOuterCorner");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem((cva::ArrayHandler *)&v2[1], (const cva::ItemHandler *)v398);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v398);
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
  {
    v7 = *a1;
    v6 = (std::__shared_weak_count *)a1[1];
    if (!v6)
      goto LABEL_11;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v7 = *a1;
    v6 = (std::__shared_weak_count *)a1[1];
    if (!v6)
      goto LABEL_11;
  }
  v8 = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 + 1, v8));
LABEL_11:
  v397 = 19;
  strcpy(__p, "RightEyeInnerCorner");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v7, (const cva::ItemHandler *)v398);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v398);
  if (!v6)
    goto LABEL_15;
  v10 = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    v13 = *a1;
    v12 = (std::__shared_weak_count *)a1[1];
    if (!v12)
      goto LABEL_18;
  }
  else
  {
LABEL_15:
    v13 = *a1;
    v12 = (std::__shared_weak_count *)a1[1];
    if (!v12)
      goto LABEL_18;
  }
  v14 = (unint64_t *)&v12->__shared_owners_;
  do
    v15 = __ldxr(v14);
  while (__stxr(v15 + 1, v14));
LABEL_18:
  v397 = 18;
  strcpy(__p, "RightEyeLowerOuter");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v13, (const cva::ItemHandler *)v398);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v398);
  if (!v12)
    goto LABEL_22;
  v16 = (unint64_t *)&v12->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    v19 = *a1;
    v18 = (std::__shared_weak_count *)a1[1];
    if (!v18)
      goto LABEL_25;
  }
  else
  {
LABEL_22:
    v19 = *a1;
    v18 = (std::__shared_weak_count *)a1[1];
    if (!v18)
      goto LABEL_25;
  }
  v20 = (unint64_t *)&v18->__shared_owners_;
  do
    v21 = __ldxr(v20);
  while (__stxr(v21 + 1, v20));
LABEL_25:
  v397 = 18;
  strcpy(__p, "RightEyeLowerInner");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v19, (const cva::ItemHandler *)v398);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v398);
  if (!v18)
    goto LABEL_29;
  v22 = (unint64_t *)&v18->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    v25 = *a1;
    v24 = (std::__shared_weak_count *)a1[1];
    if (!v24)
      goto LABEL_32;
  }
  else
  {
LABEL_29:
    v25 = *a1;
    v24 = (std::__shared_weak_count *)a1[1];
    if (!v24)
      goto LABEL_32;
  }
  v26 = (unint64_t *)&v24->__shared_owners_;
  do
    v27 = __ldxr(v26);
  while (__stxr(v27 + 1, v26));
LABEL_32:
  v397 = 18;
  strcpy(__p, "RightEyeUpperOuter");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v25, (const cva::ItemHandler *)v398);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v398);
  if (!v24)
    goto LABEL_36;
  v28 = (unint64_t *)&v24->__shared_owners_;
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
    v31 = *a1;
    v30 = (std::__shared_weak_count *)a1[1];
    if (!v30)
      goto LABEL_39;
  }
  else
  {
LABEL_36:
    v31 = *a1;
    v30 = (std::__shared_weak_count *)a1[1];
    if (!v30)
      goto LABEL_39;
  }
  v32 = (unint64_t *)&v30->__shared_owners_;
  do
    v33 = __ldxr(v32);
  while (__stxr(v33 + 1, v32));
LABEL_39:
  v397 = 18;
  strcpy(__p, "RightEyeUpperInner");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v31, (const cva::ItemHandler *)v398);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v398);
  if (!v30)
    goto LABEL_43;
  v34 = (unint64_t *)&v30->__shared_owners_;
  do
    v35 = __ldaxr(v34);
  while (__stlxr(v35 - 1, v34));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
    v37 = *a1;
    v36 = (std::__shared_weak_count *)a1[1];
    if (!v36)
      goto LABEL_46;
  }
  else
  {
LABEL_43:
    v37 = *a1;
    v36 = (std::__shared_weak_count *)a1[1];
    if (!v36)
      goto LABEL_46;
  }
  v38 = (unint64_t *)&v36->__shared_owners_;
  do
    v39 = __ldxr(v38);
  while (__stxr(v39 + 1, v38));
LABEL_46:
  v397 = 13;
  strcpy(__p, "RightEyePupil");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v37, (const cva::ItemHandler *)v398);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v398);
  if (!v36)
    goto LABEL_50;
  v40 = (unint64_t *)&v36->__shared_owners_;
  do
    v41 = __ldaxr(v40);
  while (__stlxr(v41 - 1, v40));
  if (!v41)
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
    v43 = *a1;
    v42 = (std::__shared_weak_count *)a1[1];
    if (!v42)
      goto LABEL_53;
  }
  else
  {
LABEL_50:
    v43 = *a1;
    v42 = (std::__shared_weak_count *)a1[1];
    if (!v42)
      goto LABEL_53;
  }
  v44 = (unint64_t *)&v42->__shared_owners_;
  do
    v45 = __ldxr(v44);
  while (__stxr(v45 + 1, v44));
LABEL_53:
  v397 = 18;
  strcpy(__p, "LeftEyeOuterCorner");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v43, (const cva::ItemHandler *)v398);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v398);
  if (!v42)
    goto LABEL_57;
  v46 = (unint64_t *)&v42->__shared_owners_;
  do
    v47 = __ldaxr(v46);
  while (__stlxr(v47 - 1, v46));
  if (!v47)
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
    v49 = *a1;
    v48 = (std::__shared_weak_count *)a1[1];
    if (!v48)
      goto LABEL_60;
  }
  else
  {
LABEL_57:
    v49 = *a1;
    v48 = (std::__shared_weak_count *)a1[1];
    if (!v48)
      goto LABEL_60;
  }
  v50 = (unint64_t *)&v48->__shared_owners_;
  do
    v51 = __ldxr(v50);
  while (__stxr(v51 + 1, v50));
LABEL_60:
  v397 = 18;
  strcpy(__p, "LeftEyeInnerCorner");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v49, (const cva::ItemHandler *)v398);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v398);
  if (!v48)
    goto LABEL_64;
  v52 = (unint64_t *)&v48->__shared_owners_;
  do
    v53 = __ldaxr(v52);
  while (__stlxr(v53 - 1, v52));
  if (!v53)
  {
    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
    std::__shared_weak_count::__release_weak(v48);
    v55 = *a1;
    v54 = (std::__shared_weak_count *)a1[1];
    if (!v54)
      goto LABEL_67;
  }
  else
  {
LABEL_64:
    v55 = *a1;
    v54 = (std::__shared_weak_count *)a1[1];
    if (!v54)
      goto LABEL_67;
  }
  v56 = (unint64_t *)&v54->__shared_owners_;
  do
    v57 = __ldxr(v56);
  while (__stxr(v57 + 1, v56));
LABEL_67:
  v397 = 17;
  strcpy(__p, "LeftEyeLowerOuter");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v55, (const cva::ItemHandler *)v398);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v398);
  if (!v54)
    goto LABEL_71;
  v58 = (unint64_t *)&v54->__shared_owners_;
  do
    v59 = __ldaxr(v58);
  while (__stlxr(v59 - 1, v58));
  if (!v59)
  {
    ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
    std::__shared_weak_count::__release_weak(v54);
    v61 = *a1;
    v60 = (std::__shared_weak_count *)a1[1];
    if (!v60)
      goto LABEL_74;
  }
  else
  {
LABEL_71:
    v61 = *a1;
    v60 = (std::__shared_weak_count *)a1[1];
    if (!v60)
      goto LABEL_74;
  }
  v62 = (unint64_t *)&v60->__shared_owners_;
  do
    v63 = __ldxr(v62);
  while (__stxr(v63 + 1, v62));
LABEL_74:
  v397 = 17;
  strcpy(__p, "LeftEyeLowerInner");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v61, (const cva::ItemHandler *)v398);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v398);
  if (!v60)
    goto LABEL_78;
  v64 = (unint64_t *)&v60->__shared_owners_;
  do
    v65 = __ldaxr(v64);
  while (__stlxr(v65 - 1, v64));
  if (!v65)
  {
    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
    std::__shared_weak_count::__release_weak(v60);
    v67 = *a1;
    v66 = (std::__shared_weak_count *)a1[1];
    if (!v66)
      goto LABEL_81;
  }
  else
  {
LABEL_78:
    v67 = *a1;
    v66 = (std::__shared_weak_count *)a1[1];
    if (!v66)
      goto LABEL_81;
  }
  v68 = (unint64_t *)&v66->__shared_owners_;
  do
    v69 = __ldxr(v68);
  while (__stxr(v69 + 1, v68));
LABEL_81:
  v397 = 17;
  strcpy(__p, "LeftEyeUpperOuter");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v67, (const cva::ItemHandler *)v398);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v398);
  if (!v66)
    goto LABEL_85;
  v70 = (unint64_t *)&v66->__shared_owners_;
  do
    v71 = __ldaxr(v70);
  while (__stlxr(v71 - 1, v70));
  if (!v71)
  {
    ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
    std::__shared_weak_count::__release_weak(v66);
    v73 = *a1;
    v72 = (std::__shared_weak_count *)a1[1];
    if (!v72)
      goto LABEL_88;
  }
  else
  {
LABEL_85:
    v73 = *a1;
    v72 = (std::__shared_weak_count *)a1[1];
    if (!v72)
      goto LABEL_88;
  }
  v74 = (unint64_t *)&v72->__shared_owners_;
  do
    v75 = __ldxr(v74);
  while (__stxr(v75 + 1, v74));
LABEL_88:
  v397 = 17;
  strcpy(__p, "LeftEyeUpperInner");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v73, (const cva::ItemHandler *)v398);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v398);
  if (!v72)
    goto LABEL_92;
  v76 = (unint64_t *)&v72->__shared_owners_;
  do
    v77 = __ldaxr(v76);
  while (__stlxr(v77 - 1, v76));
  if (!v77)
  {
    ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
    std::__shared_weak_count::__release_weak(v72);
    v79 = *a1;
    v78 = (std::__shared_weak_count *)a1[1];
    if (!v78)
      goto LABEL_95;
  }
  else
  {
LABEL_92:
    v79 = *a1;
    v78 = (std::__shared_weak_count *)a1[1];
    if (!v78)
      goto LABEL_95;
  }
  v80 = (unint64_t *)&v78->__shared_owners_;
  do
    v81 = __ldxr(v80);
  while (__stxr(v81 + 1, v80));
LABEL_95:
  v397 = 12;
  strcpy(__p, "LeftEyePupil");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v79, (const cva::ItemHandler *)v398);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v398);
  if (!v78)
    goto LABEL_99;
  v82 = (unint64_t *)&v78->__shared_owners_;
  do
    v83 = __ldaxr(v82);
  while (__stlxr(v83 - 1, v82));
  if (!v83)
  {
    ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
    std::__shared_weak_count::__release_weak(v78);
    v85 = *a1;
    v84 = (std::__shared_weak_count *)a1[1];
    if (!v84)
      goto LABEL_102;
  }
  else
  {
LABEL_99:
    v85 = *a1;
    v84 = (std::__shared_weak_count *)a1[1];
    if (!v84)
      goto LABEL_102;
  }
  v86 = (unint64_t *)&v84->__shared_owners_;
  do
    v87 = __ldxr(v86);
  while (__stxr(v87 + 1, v86));
LABEL_102:
  v397 = 14;
  strcpy(__p, "RightBrowOuter");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v85, (const cva::ItemHandler *)v398);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v398);
  if (!v84)
    goto LABEL_106;
  v88 = (unint64_t *)&v84->__shared_owners_;
  do
    v89 = __ldaxr(v88);
  while (__stlxr(v89 - 1, v88));
  if (!v89)
  {
    ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
    std::__shared_weak_count::__release_weak(v84);
    v91 = *a1;
    v90 = (std::__shared_weak_count *)a1[1];
    if (!v90)
      goto LABEL_109;
  }
  else
  {
LABEL_106:
    v91 = *a1;
    v90 = (std::__shared_weak_count *)a1[1];
    if (!v90)
      goto LABEL_109;
  }
  v92 = (unint64_t *)&v90->__shared_owners_;
  do
    v93 = __ldxr(v92);
  while (__stxr(v93 + 1, v92));
LABEL_109:
  v397 = 15;
  strcpy(__p, "RightBrowMiddle");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v91, (const cva::ItemHandler *)v398);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v398);
  if (!v90)
    goto LABEL_113;
  v94 = (unint64_t *)&v90->__shared_owners_;
  do
    v95 = __ldaxr(v94);
  while (__stlxr(v95 - 1, v94));
  if (!v95)
  {
    ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
    std::__shared_weak_count::__release_weak(v90);
    v97 = *a1;
    v96 = (std::__shared_weak_count *)a1[1];
    if (!v96)
      goto LABEL_116;
  }
  else
  {
LABEL_113:
    v97 = *a1;
    v96 = (std::__shared_weak_count *)a1[1];
    if (!v96)
      goto LABEL_116;
  }
  v98 = (unint64_t *)&v96->__shared_owners_;
  do
    v99 = __ldxr(v98);
  while (__stxr(v99 + 1, v98));
LABEL_116:
  v397 = 14;
  strcpy(__p, "RightBrowInner");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v97, (const cva::ItemHandler *)v398);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v398);
  if (!v96)
    goto LABEL_120;
  v100 = (unint64_t *)&v96->__shared_owners_;
  do
    v101 = __ldaxr(v100);
  while (__stlxr(v101 - 1, v100));
  if (!v101)
  {
    ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
    std::__shared_weak_count::__release_weak(v96);
    v103 = *a1;
    v102 = (std::__shared_weak_count *)a1[1];
    if (!v102)
      goto LABEL_123;
  }
  else
  {
LABEL_120:
    v103 = *a1;
    v102 = (std::__shared_weak_count *)a1[1];
    if (!v102)
      goto LABEL_123;
  }
  v104 = (unint64_t *)&v102->__shared_owners_;
  do
    v105 = __ldxr(v104);
  while (__stxr(v105 + 1, v104));
LABEL_123:
  v397 = 13;
  strcpy(__p, "LeftBrowOuter");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v103, (const cva::ItemHandler *)v398);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v398);
  if (!v102)
    goto LABEL_127;
  v106 = (unint64_t *)&v102->__shared_owners_;
  do
    v107 = __ldaxr(v106);
  while (__stlxr(v107 - 1, v106));
  if (!v107)
  {
    ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
    std::__shared_weak_count::__release_weak(v102);
    v109 = *a1;
    v108 = (std::__shared_weak_count *)a1[1];
    if (!v108)
      goto LABEL_130;
  }
  else
  {
LABEL_127:
    v109 = *a1;
    v108 = (std::__shared_weak_count *)a1[1];
    if (!v108)
      goto LABEL_130;
  }
  v110 = (unint64_t *)&v108->__shared_owners_;
  do
    v111 = __ldxr(v110);
  while (__stxr(v111 + 1, v110));
LABEL_130:
  v397 = 14;
  strcpy(__p, "LeftBrowMiddle");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v109, (const cva::ItemHandler *)v398);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v398);
  if (!v108)
    goto LABEL_134;
  v112 = (unint64_t *)&v108->__shared_owners_;
  do
    v113 = __ldaxr(v112);
  while (__stlxr(v113 - 1, v112));
  if (!v113)
  {
    ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
    std::__shared_weak_count::__release_weak(v108);
    v115 = *a1;
    v114 = (std::__shared_weak_count *)a1[1];
    if (!v114)
      goto LABEL_137;
  }
  else
  {
LABEL_134:
    v115 = *a1;
    v114 = (std::__shared_weak_count *)a1[1];
    if (!v114)
      goto LABEL_137;
  }
  v116 = (unint64_t *)&v114->__shared_owners_;
  do
    v117 = __ldxr(v116);
  while (__stxr(v117 + 1, v116));
LABEL_137:
  v397 = 13;
  strcpy(__p, "LeftBrowInner");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v115, (const cva::ItemHandler *)v398);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v398);
  if (!v114)
    goto LABEL_141;
  v118 = (unint64_t *)&v114->__shared_owners_;
  do
    v119 = __ldaxr(v118);
  while (__stlxr(v119 - 1, v118));
  if (!v119)
  {
    ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
    std::__shared_weak_count::__release_weak(v114);
    v121 = *a1;
    v120 = (std::__shared_weak_count *)a1[1];
    if (!v120)
      goto LABEL_144;
  }
  else
  {
LABEL_141:
    v121 = *a1;
    v120 = (std::__shared_weak_count *)a1[1];
    if (!v120)
      goto LABEL_144;
  }
  v122 = (unint64_t *)&v120->__shared_owners_;
  do
    v123 = __ldxr(v122);
  while (__stxr(v123 + 1, v122));
LABEL_144:
  v397 = 16;
  strcpy(__p, "MouthRightCorner");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v121, (const cva::ItemHandler *)v398);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v398);
  if (!v120)
    goto LABEL_148;
  v124 = (unint64_t *)&v120->__shared_owners_;
  do
    v125 = __ldaxr(v124);
  while (__stlxr(v125 - 1, v124));
  if (!v125)
  {
    ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
    std::__shared_weak_count::__release_weak(v120);
    v127 = *a1;
    v126 = (std::__shared_weak_count *)a1[1];
    if (!v126)
      goto LABEL_151;
  }
  else
  {
LABEL_148:
    v127 = *a1;
    v126 = (std::__shared_weak_count *)a1[1];
    if (!v126)
      goto LABEL_151;
  }
  v128 = (unint64_t *)&v126->__shared_owners_;
  do
    v129 = __ldxr(v128);
  while (__stxr(v129 + 1, v128));
LABEL_151:
  v397 = 13;
  strcpy(__p, "MouthRightUp1");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v127, (const cva::ItemHandler *)v398);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v398);
  if (!v126)
    goto LABEL_155;
  v130 = (unint64_t *)&v126->__shared_owners_;
  do
    v131 = __ldaxr(v130);
  while (__stlxr(v131 - 1, v130));
  if (!v131)
  {
    ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
    std::__shared_weak_count::__release_weak(v126);
    v133 = *a1;
    v132 = (std::__shared_weak_count *)a1[1];
    if (!v132)
      goto LABEL_158;
  }
  else
  {
LABEL_155:
    v133 = *a1;
    v132 = (std::__shared_weak_count *)a1[1];
    if (!v132)
      goto LABEL_158;
  }
  v134 = (unint64_t *)&v132->__shared_owners_;
  do
    v135 = __ldxr(v134);
  while (__stxr(v135 + 1, v134));
LABEL_158:
  v397 = 13;
  strcpy(__p, "MouthRightUp2");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v133, (const cva::ItemHandler *)v398);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v398);
  if (!v132)
    goto LABEL_162;
  v136 = (unint64_t *)&v132->__shared_owners_;
  do
    v137 = __ldaxr(v136);
  while (__stlxr(v137 - 1, v136));
  if (!v137)
  {
    ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
    std::__shared_weak_count::__release_weak(v132);
    v139 = *a1;
    v138 = (std::__shared_weak_count *)a1[1];
    if (!v138)
      goto LABEL_165;
  }
  else
  {
LABEL_162:
    v139 = *a1;
    v138 = (std::__shared_weak_count *)a1[1];
    if (!v138)
      goto LABEL_165;
  }
  v140 = (unint64_t *)&v138->__shared_owners_;
  do
    v141 = __ldxr(v140);
  while (__stxr(v141 + 1, v140));
LABEL_165:
  v397 = 18;
  strcpy(__p, "MouthRightPhiltrum");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v139, (const cva::ItemHandler *)v398);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v398);
  if (!v138)
    goto LABEL_169;
  v142 = (unint64_t *)&v138->__shared_owners_;
  do
    v143 = __ldaxr(v142);
  while (__stlxr(v143 - 1, v142));
  if (!v143)
  {
    ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
    std::__shared_weak_count::__release_weak(v138);
    v145 = *a1;
    v144 = (std::__shared_weak_count *)a1[1];
    if (!v144)
      goto LABEL_172;
  }
  else
  {
LABEL_169:
    v145 = *a1;
    v144 = (std::__shared_weak_count *)a1[1];
    if (!v144)
      goto LABEL_172;
  }
  v146 = (unint64_t *)&v144->__shared_owners_;
  do
    v147 = __ldxr(v146);
  while (__stxr(v147 + 1, v146));
LABEL_172:
  v397 = 19;
  strcpy(__p, "MouthCenterPhiltrum");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v145, (const cva::ItemHandler *)v398);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v398);
  if (!v144)
    goto LABEL_176;
  v148 = (unint64_t *)&v144->__shared_owners_;
  do
    v149 = __ldaxr(v148);
  while (__stlxr(v149 - 1, v148));
  if (!v149)
  {
    ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
    std::__shared_weak_count::__release_weak(v144);
    v151 = *a1;
    v150 = (std::__shared_weak_count *)a1[1];
    if (!v150)
      goto LABEL_179;
  }
  else
  {
LABEL_176:
    v151 = *a1;
    v150 = (std::__shared_weak_count *)a1[1];
    if (!v150)
      goto LABEL_179;
  }
  v152 = (unint64_t *)&v150->__shared_owners_;
  do
    v153 = __ldxr(v152);
  while (__stxr(v153 + 1, v152));
LABEL_179:
  v397 = 17;
  strcpy(__p, "MouthLeftPhiltrum");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v151, (const cva::ItemHandler *)v398);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v398);
  if (!v150)
    goto LABEL_183;
  v154 = (unint64_t *)&v150->__shared_owners_;
  do
    v155 = __ldaxr(v154);
  while (__stlxr(v155 - 1, v154));
  if (!v155)
  {
    ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
    std::__shared_weak_count::__release_weak(v150);
    v157 = *a1;
    v156 = (std::__shared_weak_count *)a1[1];
    if (!v156)
      goto LABEL_186;
  }
  else
  {
LABEL_183:
    v157 = *a1;
    v156 = (std::__shared_weak_count *)a1[1];
    if (!v156)
      goto LABEL_186;
  }
  v158 = (unint64_t *)&v156->__shared_owners_;
  do
    v159 = __ldxr(v158);
  while (__stxr(v159 + 1, v158));
LABEL_186:
  v397 = 12;
  strcpy(__p, "MouthLeftUp2");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v157, (const cva::ItemHandler *)v398);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v398);
  if (!v156)
    goto LABEL_190;
  v160 = (unint64_t *)&v156->__shared_owners_;
  do
    v161 = __ldaxr(v160);
  while (__stlxr(v161 - 1, v160));
  if (!v161)
  {
    ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
    std::__shared_weak_count::__release_weak(v156);
    v163 = *a1;
    v162 = (std::__shared_weak_count *)a1[1];
    if (!v162)
      goto LABEL_193;
  }
  else
  {
LABEL_190:
    v163 = *a1;
    v162 = (std::__shared_weak_count *)a1[1];
    if (!v162)
      goto LABEL_193;
  }
  v164 = (unint64_t *)&v162->__shared_owners_;
  do
    v165 = __ldxr(v164);
  while (__stxr(v165 + 1, v164));
LABEL_193:
  v397 = 12;
  strcpy(__p, "MouthLeftUp1");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v163, (const cva::ItemHandler *)v398);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v398);
  if (!v162)
    goto LABEL_197;
  v166 = (unint64_t *)&v162->__shared_owners_;
  do
    v167 = __ldaxr(v166);
  while (__stlxr(v167 - 1, v166));
  if (!v167)
  {
    ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
    std::__shared_weak_count::__release_weak(v162);
    v169 = *a1;
    v168 = (std::__shared_weak_count *)a1[1];
    if (!v168)
      goto LABEL_200;
  }
  else
  {
LABEL_197:
    v169 = *a1;
    v168 = (std::__shared_weak_count *)a1[1];
    if (!v168)
      goto LABEL_200;
  }
  v170 = (unint64_t *)&v168->__shared_owners_;
  do
    v171 = __ldxr(v170);
  while (__stxr(v171 + 1, v170));
LABEL_200:
  v397 = 15;
  strcpy(__p, "MouthLeftCorner");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v169, (const cva::ItemHandler *)v398);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v398);
  if (!v168)
    goto LABEL_204;
  v172 = (unint64_t *)&v168->__shared_owners_;
  do
    v173 = __ldaxr(v172);
  while (__stlxr(v173 - 1, v172));
  if (!v173)
  {
    ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
    std::__shared_weak_count::__release_weak(v168);
    v175 = *a1;
    v174 = (std::__shared_weak_count *)a1[1];
    if (!v174)
      goto LABEL_207;
  }
  else
  {
LABEL_204:
    v175 = *a1;
    v174 = (std::__shared_weak_count *)a1[1];
    if (!v174)
      goto LABEL_207;
  }
  v176 = (unint64_t *)&v174->__shared_owners_;
  do
    v177 = __ldxr(v176);
  while (__stxr(v177 + 1, v176));
LABEL_207:
  v397 = 14;
  strcpy(__p, "MouthLeftDown1");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v175, (const cva::ItemHandler *)v398);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v398);
  if (!v174)
    goto LABEL_211;
  v178 = (unint64_t *)&v174->__shared_owners_;
  do
    v179 = __ldaxr(v178);
  while (__stlxr(v179 - 1, v178));
  if (!v179)
  {
    ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
    std::__shared_weak_count::__release_weak(v174);
    v181 = *a1;
    v180 = (std::__shared_weak_count *)a1[1];
    if (!v180)
      goto LABEL_214;
  }
  else
  {
LABEL_211:
    v181 = *a1;
    v180 = (std::__shared_weak_count *)a1[1];
    if (!v180)
      goto LABEL_214;
  }
  v182 = (unint64_t *)&v180->__shared_owners_;
  do
    v183 = __ldxr(v182);
  while (__stxr(v183 + 1, v182));
LABEL_214:
  v397 = 14;
  strcpy(__p, "MouthLeftDown2");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v181, (const cva::ItemHandler *)v398);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v398);
  if (!v180)
    goto LABEL_218;
  v184 = (unint64_t *)&v180->__shared_owners_;
  do
    v185 = __ldaxr(v184);
  while (__stlxr(v185 - 1, v184));
  if (!v185)
  {
    ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
    std::__shared_weak_count::__release_weak(v180);
    v187 = *a1;
    v186 = (std::__shared_weak_count *)a1[1];
    if (!v186)
      goto LABEL_221;
  }
  else
  {
LABEL_218:
    v187 = *a1;
    v186 = (std::__shared_weak_count *)a1[1];
    if (!v186)
      goto LABEL_221;
  }
  v188 = (unint64_t *)&v186->__shared_owners_;
  do
    v189 = __ldxr(v188);
  while (__stxr(v189 + 1, v188));
LABEL_221:
  v397 = 16;
  strcpy(__p, "MouthCenterLower");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v187, (const cva::ItemHandler *)v398);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v398);
  if (!v186)
    goto LABEL_225;
  v190 = (unint64_t *)&v186->__shared_owners_;
  do
    v191 = __ldaxr(v190);
  while (__stlxr(v191 - 1, v190));
  if (!v191)
  {
    ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
    std::__shared_weak_count::__release_weak(v186);
    v193 = *a1;
    v192 = (std::__shared_weak_count *)a1[1];
    if (!v192)
      goto LABEL_228;
  }
  else
  {
LABEL_225:
    v193 = *a1;
    v192 = (std::__shared_weak_count *)a1[1];
    if (!v192)
      goto LABEL_228;
  }
  v194 = (unint64_t *)&v192->__shared_owners_;
  do
    v195 = __ldxr(v194);
  while (__stxr(v195 + 1, v194));
LABEL_228:
  v397 = 15;
  strcpy(__p, "MouthRightDown2");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v193, (const cva::ItemHandler *)v398);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v398);
  if (!v192)
    goto LABEL_232;
  v196 = (unint64_t *)&v192->__shared_owners_;
  do
    v197 = __ldaxr(v196);
  while (__stlxr(v197 - 1, v196));
  if (!v197)
  {
    ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
    std::__shared_weak_count::__release_weak(v192);
    v199 = *a1;
    v198 = (std::__shared_weak_count *)a1[1];
    if (!v198)
      goto LABEL_235;
  }
  else
  {
LABEL_232:
    v199 = *a1;
    v198 = (std::__shared_weak_count *)a1[1];
    if (!v198)
      goto LABEL_235;
  }
  v200 = (unint64_t *)&v198->__shared_owners_;
  do
    v201 = __ldxr(v200);
  while (__stxr(v201 + 1, v200));
LABEL_235:
  v397 = 15;
  strcpy(__p, "MouthRightDown1");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v199, (const cva::ItemHandler *)v398);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v398);
  if (!v198)
    goto LABEL_239;
  v202 = (unint64_t *)&v198->__shared_owners_;
  do
    v203 = __ldaxr(v202);
  while (__stlxr(v203 - 1, v202));
  if (!v203)
  {
    ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
    std::__shared_weak_count::__release_weak(v198);
    v205 = *a1;
    v204 = (std::__shared_weak_count *)a1[1];
    if (!v204)
      goto LABEL_242;
  }
  else
  {
LABEL_239:
    v205 = *a1;
    v204 = (std::__shared_weak_count *)a1[1];
    if (!v204)
      goto LABEL_242;
  }
  v206 = (unint64_t *)&v204->__shared_owners_;
  do
    v207 = __ldxr(v206);
  while (__stxr(v207 + 1, v206));
LABEL_242:
  v397 = 12;
  strcpy(__p, "MouthInnerUp");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v205, (const cva::ItemHandler *)v398);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v398);
  if (!v204)
    goto LABEL_246;
  v208 = (unint64_t *)&v204->__shared_owners_;
  do
    v209 = __ldaxr(v208);
  while (__stlxr(v209 - 1, v208));
  if (!v209)
  {
    ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
    std::__shared_weak_count::__release_weak(v204);
    v211 = *a1;
    v210 = (std::__shared_weak_count *)a1[1];
    if (!v210)
      goto LABEL_249;
  }
  else
  {
LABEL_246:
    v211 = *a1;
    v210 = (std::__shared_weak_count *)a1[1];
    if (!v210)
      goto LABEL_249;
  }
  v212 = (unint64_t *)&v210->__shared_owners_;
  do
    v213 = __ldxr(v212);
  while (__stxr(v213 + 1, v212));
LABEL_249:
  v397 = 14;
  strcpy(__p, "MouthInnerDown");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v211, (const cva::ItemHandler *)v398);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v398);
  if (!v210)
    goto LABEL_253;
  v214 = (unint64_t *)&v210->__shared_owners_;
  do
    v215 = __ldaxr(v214);
  while (__stlxr(v215 - 1, v214));
  if (!v215)
  {
    ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
    std::__shared_weak_count::__release_weak(v210);
    v217 = *a1;
    v216 = (std::__shared_weak_count *)a1[1];
    if (!v216)
      goto LABEL_256;
  }
  else
  {
LABEL_253:
    v217 = *a1;
    v216 = (std::__shared_weak_count *)a1[1];
    if (!v216)
      goto LABEL_256;
  }
  v218 = (unint64_t *)&v216->__shared_owners_;
  do
    v219 = __ldxr(v218);
  while (__stxr(v219 + 1, v218));
LABEL_256:
  v397 = 17;
  strcpy(__p, "MouthInnerUpRight");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v217, (const cva::ItemHandler *)v398);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v398);
  if (!v216)
    goto LABEL_260;
  v220 = (unint64_t *)&v216->__shared_owners_;
  do
    v221 = __ldaxr(v220);
  while (__stlxr(v221 - 1, v220));
  if (!v221)
  {
    ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
    std::__shared_weak_count::__release_weak(v216);
    v223 = *a1;
    v222 = (std::__shared_weak_count *)a1[1];
    if (!v222)
      goto LABEL_263;
  }
  else
  {
LABEL_260:
    v223 = *a1;
    v222 = (std::__shared_weak_count *)a1[1];
    if (!v222)
      goto LABEL_263;
  }
  v224 = (unint64_t *)&v222->__shared_owners_;
  do
    v225 = __ldxr(v224);
  while (__stxr(v225 + 1, v224));
LABEL_263:
  v397 = 16;
  strcpy(__p, "MouthInnerUpLeft");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v223, (const cva::ItemHandler *)v398);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v398);
  if (!v222)
    goto LABEL_267;
  v226 = (unint64_t *)&v222->__shared_owners_;
  do
    v227 = __ldaxr(v226);
  while (__stlxr(v227 - 1, v226));
  if (!v227)
  {
    ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
    std::__shared_weak_count::__release_weak(v222);
    v229 = *a1;
    v228 = (std::__shared_weak_count *)a1[1];
    if (!v228)
      goto LABEL_270;
  }
  else
  {
LABEL_267:
    v229 = *a1;
    v228 = (std::__shared_weak_count *)a1[1];
    if (!v228)
      goto LABEL_270;
  }
  v230 = (unint64_t *)&v228->__shared_owners_;
  do
    v231 = __ldxr(v230);
  while (__stxr(v231 + 1, v230));
LABEL_270:
  v397 = 19;
  strcpy(__p, "MouthInnerDownRight");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v229, (const cva::ItemHandler *)v398);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v398);
  if (!v228)
    goto LABEL_274;
  v232 = (unint64_t *)&v228->__shared_owners_;
  do
    v233 = __ldaxr(v232);
  while (__stlxr(v233 - 1, v232));
  if (!v233)
  {
    ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
    std::__shared_weak_count::__release_weak(v228);
    v235 = *a1;
    v234 = (std::__shared_weak_count *)a1[1];
    if (!v234)
      goto LABEL_277;
  }
  else
  {
LABEL_274:
    v235 = *a1;
    v234 = (std::__shared_weak_count *)a1[1];
    if (!v234)
      goto LABEL_277;
  }
  v236 = (unint64_t *)&v234->__shared_owners_;
  do
    v237 = __ldxr(v236);
  while (__stxr(v237 + 1, v236));
LABEL_277:
  v397 = 18;
  strcpy(__p, "MouthInnerDownLeft");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v235, (const cva::ItemHandler *)v398);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v398);
  if (!v234)
    goto LABEL_281;
  v238 = (unint64_t *)&v234->__shared_owners_;
  do
    v239 = __ldaxr(v238);
  while (__stlxr(v239 - 1, v238));
  if (!v239)
  {
    ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
    std::__shared_weak_count::__release_weak(v234);
    v241 = *a1;
    v240 = (std::__shared_weak_count *)a1[1];
    if (!v240)
      goto LABEL_284;
  }
  else
  {
LABEL_281:
    v241 = *a1;
    v240 = (std::__shared_weak_count *)a1[1];
    if (!v240)
      goto LABEL_284;
  }
  v242 = (unint64_t *)&v240->__shared_owners_;
  do
    v243 = __ldxr(v242);
  while (__stxr(v243 + 1, v242));
LABEL_284:
  v397 = 13;
  strcpy(__p, "NoseRidgeRoot");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v241, (const cva::ItemHandler *)v398);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v398);
  if (!v240)
    goto LABEL_288;
  v244 = (unint64_t *)&v240->__shared_owners_;
  do
    v245 = __ldaxr(v244);
  while (__stlxr(v245 - 1, v244));
  if (!v245)
  {
    ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
    std::__shared_weak_count::__release_weak(v240);
    v247 = *a1;
    v246 = (std::__shared_weak_count *)a1[1];
    if (!v246)
      goto LABEL_291;
  }
  else
  {
LABEL_288:
    v247 = *a1;
    v246 = (std::__shared_weak_count *)a1[1];
    if (!v246)
      goto LABEL_291;
  }
  v248 = (unint64_t *)&v246->__shared_owners_;
  do
    v249 = __ldxr(v248);
  while (__stxr(v249 + 1, v248));
LABEL_291:
  v397 = 10;
  strcpy(__p, "NoseRidge1");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v247, (const cva::ItemHandler *)v398);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v398);
  if (!v246)
    goto LABEL_295;
  v250 = (unint64_t *)&v246->__shared_owners_;
  do
    v251 = __ldaxr(v250);
  while (__stlxr(v251 - 1, v250));
  if (!v251)
  {
    ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
    std::__shared_weak_count::__release_weak(v246);
    v253 = *a1;
    v252 = (std::__shared_weak_count *)a1[1];
    if (!v252)
      goto LABEL_298;
  }
  else
  {
LABEL_295:
    v253 = *a1;
    v252 = (std::__shared_weak_count *)a1[1];
    if (!v252)
      goto LABEL_298;
  }
  v254 = (unint64_t *)&v252->__shared_owners_;
  do
    v255 = __ldxr(v254);
  while (__stxr(v255 + 1, v254));
LABEL_298:
  v397 = 10;
  strcpy(__p, "NoseRidge2");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v253, (const cva::ItemHandler *)v398);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v398);
  if (!v252)
    goto LABEL_302;
  v256 = (unint64_t *)&v252->__shared_owners_;
  do
    v257 = __ldaxr(v256);
  while (__stlxr(v257 - 1, v256));
  if (!v257)
  {
    ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
    std::__shared_weak_count::__release_weak(v252);
    v259 = *a1;
    v258 = (std::__shared_weak_count *)a1[1];
    if (!v258)
      goto LABEL_305;
  }
  else
  {
LABEL_302:
    v259 = *a1;
    v258 = (std::__shared_weak_count *)a1[1];
    if (!v258)
      goto LABEL_305;
  }
  v260 = (unint64_t *)&v258->__shared_owners_;
  do
    v261 = __ldxr(v260);
  while (__stxr(v261 + 1, v260));
LABEL_305:
  v397 = 12;
  strcpy(__p, "NoseRidgeTip");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v259, (const cva::ItemHandler *)v398);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v398);
  if (!v258)
    goto LABEL_309;
  v262 = (unint64_t *)&v258->__shared_owners_;
  do
    v263 = __ldaxr(v262);
  while (__stlxr(v263 - 1, v262));
  if (!v263)
  {
    ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
    std::__shared_weak_count::__release_weak(v258);
    v265 = *a1;
    v264 = (std::__shared_weak_count *)a1[1];
    if (!v264)
      goto LABEL_312;
  }
  else
  {
LABEL_309:
    v265 = *a1;
    v264 = (std::__shared_weak_count *)a1[1];
    if (!v264)
      goto LABEL_312;
  }
  v266 = (unint64_t *)&v264->__shared_owners_;
  do
    v267 = __ldxr(v266);
  while (__stxr(v267 + 1, v266));
LABEL_312:
  v397 = 12;
  strcpy(__p, "NoseBaseLeft");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v265, (const cva::ItemHandler *)v398);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v398);
  if (!v264)
    goto LABEL_316;
  v268 = (unint64_t *)&v264->__shared_owners_;
  do
    v269 = __ldaxr(v268);
  while (__stlxr(v269 - 1, v268));
  if (!v269)
  {
    ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
    std::__shared_weak_count::__release_weak(v264);
    v271 = *a1;
    v270 = (std::__shared_weak_count *)a1[1];
    if (!v270)
      goto LABEL_319;
  }
  else
  {
LABEL_316:
    v271 = *a1;
    v270 = (std::__shared_weak_count *)a1[1];
    if (!v270)
      goto LABEL_319;
  }
  v272 = (unint64_t *)&v270->__shared_owners_;
  do
    v273 = __ldxr(v272);
  while (__stxr(v273 + 1, v272));
LABEL_319:
  v397 = 18;
  strcpy(__p, "NoseBaseCenterLeft");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v271, (const cva::ItemHandler *)v398);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v398);
  if (!v270)
    goto LABEL_323;
  v274 = (unint64_t *)&v270->__shared_owners_;
  do
    v275 = __ldaxr(v274);
  while (__stlxr(v275 - 1, v274));
  if (!v275)
  {
    ((void (*)(std::__shared_weak_count *))v270->__on_zero_shared)(v270);
    std::__shared_weak_count::__release_weak(v270);
    v277 = *a1;
    v276 = (std::__shared_weak_count *)a1[1];
    if (!v276)
      goto LABEL_326;
  }
  else
  {
LABEL_323:
    v277 = *a1;
    v276 = (std::__shared_weak_count *)a1[1];
    if (!v276)
      goto LABEL_326;
  }
  v278 = (unint64_t *)&v276->__shared_owners_;
  do
    v279 = __ldxr(v278);
  while (__stxr(v279 + 1, v278));
LABEL_326:
  v397 = 14;
  strcpy(__p, "NoseBaseCenter");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v277, (const cva::ItemHandler *)v398);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v398);
  if (!v276)
    goto LABEL_330;
  v280 = (unint64_t *)&v276->__shared_owners_;
  do
    v281 = __ldaxr(v280);
  while (__stlxr(v281 - 1, v280));
  if (!v281)
  {
    ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
    std::__shared_weak_count::__release_weak(v276);
    v283 = *a1;
    v282 = (std::__shared_weak_count *)a1[1];
    if (!v282)
      goto LABEL_333;
  }
  else
  {
LABEL_330:
    v283 = *a1;
    v282 = (std::__shared_weak_count *)a1[1];
    if (!v282)
      goto LABEL_333;
  }
  v284 = (unint64_t *)&v282->__shared_owners_;
  do
    v285 = __ldxr(v284);
  while (__stxr(v285 + 1, v284));
LABEL_333:
  v397 = 19;
  strcpy(__p, "NoseBaseCenterRight");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v283, (const cva::ItemHandler *)v398);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v398);
  if (!v282)
    goto LABEL_337;
  v286 = (unint64_t *)&v282->__shared_owners_;
  do
    v287 = __ldaxr(v286);
  while (__stlxr(v287 - 1, v286));
  if (!v287)
  {
    ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
    std::__shared_weak_count::__release_weak(v282);
    v289 = *a1;
    v288 = (std::__shared_weak_count *)a1[1];
    if (!v288)
      goto LABEL_340;
  }
  else
  {
LABEL_337:
    v289 = *a1;
    v288 = (std::__shared_weak_count *)a1[1];
    if (!v288)
      goto LABEL_340;
  }
  v290 = (unint64_t *)&v288->__shared_owners_;
  do
    v291 = __ldxr(v290);
  while (__stxr(v291 + 1, v290));
LABEL_340:
  v397 = 13;
  strcpy(__p, "NoseBaseRight");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v289, (const cva::ItemHandler *)v398);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v398);
  if (!v288)
    goto LABEL_344;
  v292 = (unint64_t *)&v288->__shared_owners_;
  do
    v293 = __ldaxr(v292);
  while (__stlxr(v293 - 1, v292));
  if (!v293)
  {
    ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
    std::__shared_weak_count::__release_weak(v288);
    v295 = *a1;
    v294 = (std::__shared_weak_count *)a1[1];
    if (!v294)
      goto LABEL_347;
  }
  else
  {
LABEL_344:
    v295 = *a1;
    v294 = (std::__shared_weak_count *)a1[1];
    if (!v294)
      goto LABEL_347;
  }
  v296 = (unint64_t *)&v294->__shared_owners_;
  do
    v297 = __ldxr(v296);
  while (__stxr(v297 + 1, v296));
LABEL_347:
  v397 = 12;
  strcpy(__p, "NoseAlaLeft1");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v295, (const cva::ItemHandler *)v398);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v398);
  if (!v294)
    goto LABEL_351;
  v298 = (unint64_t *)&v294->__shared_owners_;
  do
    v299 = __ldaxr(v298);
  while (__stlxr(v299 - 1, v298));
  if (!v299)
  {
    ((void (*)(std::__shared_weak_count *))v294->__on_zero_shared)(v294);
    std::__shared_weak_count::__release_weak(v294);
    v301 = *a1;
    v300 = (std::__shared_weak_count *)a1[1];
    if (!v300)
      goto LABEL_354;
  }
  else
  {
LABEL_351:
    v301 = *a1;
    v300 = (std::__shared_weak_count *)a1[1];
    if (!v300)
      goto LABEL_354;
  }
  v302 = (unint64_t *)&v300->__shared_owners_;
  do
    v303 = __ldxr(v302);
  while (__stxr(v303 + 1, v302));
LABEL_354:
  v397 = 13;
  strcpy(__p, "NoseAlaRight1");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v301, (const cva::ItemHandler *)v398);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v398);
  if (!v300)
    goto LABEL_358;
  v304 = (unint64_t *)&v300->__shared_owners_;
  do
    v305 = __ldaxr(v304);
  while (__stlxr(v305 - 1, v304));
  if (!v305)
  {
    ((void (*)(std::__shared_weak_count *))v300->__on_zero_shared)(v300);
    std::__shared_weak_count::__release_weak(v300);
    v307 = *a1;
    v306 = (std::__shared_weak_count *)a1[1];
    if (!v306)
      goto LABEL_361;
  }
  else
  {
LABEL_358:
    v307 = *a1;
    v306 = (std::__shared_weak_count *)a1[1];
    if (!v306)
      goto LABEL_361;
  }
  v308 = (unint64_t *)&v306->__shared_owners_;
  do
    v309 = __ldxr(v308);
  while (__stxr(v309 + 1, v308));
LABEL_361:
  v397 = 12;
  strcpy(__p, "NoseAlaLeft2");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v307, (const cva::ItemHandler *)v398);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v398);
  if (!v306)
    goto LABEL_365;
  v310 = (unint64_t *)&v306->__shared_owners_;
  do
    v311 = __ldaxr(v310);
  while (__stlxr(v311 - 1, v310));
  if (!v311)
  {
    ((void (*)(std::__shared_weak_count *))v306->__on_zero_shared)(v306);
    std::__shared_weak_count::__release_weak(v306);
    v313 = *a1;
    v312 = (std::__shared_weak_count *)a1[1];
    if (!v312)
      goto LABEL_368;
  }
  else
  {
LABEL_365:
    v313 = *a1;
    v312 = (std::__shared_weak_count *)a1[1];
    if (!v312)
      goto LABEL_368;
  }
  v314 = (unint64_t *)&v312->__shared_owners_;
  do
    v315 = __ldxr(v314);
  while (__stxr(v315 + 1, v314));
LABEL_368:
  v397 = 13;
  strcpy(__p, "NoseAlaRight2");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v313, (const cva::ItemHandler *)v398);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v398);
  if (!v312)
    goto LABEL_372;
  v316 = (unint64_t *)&v312->__shared_owners_;
  do
    v317 = __ldaxr(v316);
  while (__stlxr(v317 - 1, v316));
  if (!v317)
  {
    ((void (*)(std::__shared_weak_count *))v312->__on_zero_shared)(v312);
    std::__shared_weak_count::__release_weak(v312);
    v319 = *a1;
    v318 = (std::__shared_weak_count *)a1[1];
    if (!v318)
      goto LABEL_375;
  }
  else
  {
LABEL_372:
    v319 = *a1;
    v318 = (std::__shared_weak_count *)a1[1];
    if (!v318)
      goto LABEL_375;
  }
  v320 = (unint64_t *)&v318->__shared_owners_;
  do
    v321 = __ldxr(v320);
  while (__stxr(v321 + 1, v320));
LABEL_375:
  v397 = 11;
  strcpy(__p, "CheekRight0");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v319, (const cva::ItemHandler *)v398);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v398);
  if (!v318)
    goto LABEL_379;
  v322 = (unint64_t *)&v318->__shared_owners_;
  do
    v323 = __ldaxr(v322);
  while (__stlxr(v323 - 1, v322));
  if (!v323)
  {
    ((void (*)(std::__shared_weak_count *))v318->__on_zero_shared)(v318);
    std::__shared_weak_count::__release_weak(v318);
    v325 = *a1;
    v324 = (std::__shared_weak_count *)a1[1];
    if (!v324)
      goto LABEL_382;
  }
  else
  {
LABEL_379:
    v325 = *a1;
    v324 = (std::__shared_weak_count *)a1[1];
    if (!v324)
      goto LABEL_382;
  }
  v326 = (unint64_t *)&v324->__shared_owners_;
  do
    v327 = __ldxr(v326);
  while (__stxr(v327 + 1, v326));
LABEL_382:
  v397 = 11;
  strcpy(__p, "CheekRight1");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v325, (const cva::ItemHandler *)v398);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v398);
  if (!v324)
    goto LABEL_386;
  v328 = (unint64_t *)&v324->__shared_owners_;
  do
    v329 = __ldaxr(v328);
  while (__stlxr(v329 - 1, v328));
  if (!v329)
  {
    ((void (*)(std::__shared_weak_count *))v324->__on_zero_shared)(v324);
    std::__shared_weak_count::__release_weak(v324);
    v331 = *a1;
    v330 = (std::__shared_weak_count *)a1[1];
    if (!v330)
      goto LABEL_389;
  }
  else
  {
LABEL_386:
    v331 = *a1;
    v330 = (std::__shared_weak_count *)a1[1];
    if (!v330)
      goto LABEL_389;
  }
  v332 = (unint64_t *)&v330->__shared_owners_;
  do
    v333 = __ldxr(v332);
  while (__stxr(v333 + 1, v332));
LABEL_389:
  v397 = 11;
  strcpy(__p, "CheekRight2");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v331, (const cva::ItemHandler *)v398);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v398);
  if (!v330)
    goto LABEL_393;
  v334 = (unint64_t *)&v330->__shared_owners_;
  do
    v335 = __ldaxr(v334);
  while (__stlxr(v335 - 1, v334));
  if (!v335)
  {
    ((void (*)(std::__shared_weak_count *))v330->__on_zero_shared)(v330);
    std::__shared_weak_count::__release_weak(v330);
    v337 = *a1;
    v336 = (std::__shared_weak_count *)a1[1];
    if (!v336)
      goto LABEL_396;
  }
  else
  {
LABEL_393:
    v337 = *a1;
    v336 = (std::__shared_weak_count *)a1[1];
    if (!v336)
      goto LABEL_396;
  }
  v338 = (unint64_t *)&v336->__shared_owners_;
  do
    v339 = __ldxr(v338);
  while (__stxr(v339 + 1, v338));
LABEL_396:
  v397 = 11;
  strcpy(__p, "CheekRight3");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v337, (const cva::ItemHandler *)v398);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v398);
  if (!v336)
    goto LABEL_400;
  v340 = (unint64_t *)&v336->__shared_owners_;
  do
    v341 = __ldaxr(v340);
  while (__stlxr(v341 - 1, v340));
  if (!v341)
  {
    ((void (*)(std::__shared_weak_count *))v336->__on_zero_shared)(v336);
    std::__shared_weak_count::__release_weak(v336);
    v343 = *a1;
    v342 = (std::__shared_weak_count *)a1[1];
    if (!v342)
      goto LABEL_403;
  }
  else
  {
LABEL_400:
    v343 = *a1;
    v342 = (std::__shared_weak_count *)a1[1];
    if (!v342)
      goto LABEL_403;
  }
  v344 = (unint64_t *)&v342->__shared_owners_;
  do
    v345 = __ldxr(v344);
  while (__stxr(v345 + 1, v344));
LABEL_403:
  v397 = 11;
  strcpy(__p, "CheekRight4");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v343, (const cva::ItemHandler *)v398);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v398);
  if (!v342)
    goto LABEL_407;
  v346 = (unint64_t *)&v342->__shared_owners_;
  do
    v347 = __ldaxr(v346);
  while (__stlxr(v347 - 1, v346));
  if (!v347)
  {
    ((void (*)(std::__shared_weak_count *))v342->__on_zero_shared)(v342);
    std::__shared_weak_count::__release_weak(v342);
    v349 = *a1;
    v348 = (std::__shared_weak_count *)a1[1];
    if (!v348)
      goto LABEL_410;
  }
  else
  {
LABEL_407:
    v349 = *a1;
    v348 = (std::__shared_weak_count *)a1[1];
    if (!v348)
      goto LABEL_410;
  }
  v350 = (unint64_t *)&v348->__shared_owners_;
  do
    v351 = __ldxr(v350);
  while (__stxr(v351 + 1, v350));
LABEL_410:
  v397 = 11;
  strcpy(__p, "CheekRight5");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v349, (const cva::ItemHandler *)v398);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v398);
  if (!v348)
    goto LABEL_414;
  v352 = (unint64_t *)&v348->__shared_owners_;
  do
    v353 = __ldaxr(v352);
  while (__stlxr(v353 - 1, v352));
  if (!v353)
  {
    ((void (*)(std::__shared_weak_count *))v348->__on_zero_shared)(v348);
    std::__shared_weak_count::__release_weak(v348);
    v355 = *a1;
    v354 = (std::__shared_weak_count *)a1[1];
    if (!v354)
      goto LABEL_417;
  }
  else
  {
LABEL_414:
    v355 = *a1;
    v354 = (std::__shared_weak_count *)a1[1];
    if (!v354)
      goto LABEL_417;
  }
  v356 = (unint64_t *)&v354->__shared_owners_;
  do
    v357 = __ldxr(v356);
  while (__stxr(v357 + 1, v356));
LABEL_417:
  v397 = 10;
  strcpy(__p, "ChinCenter");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v355, (const cva::ItemHandler *)v398);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v398);
  if (!v354)
    goto LABEL_421;
  v358 = (unint64_t *)&v354->__shared_owners_;
  do
    v359 = __ldaxr(v358);
  while (__stlxr(v359 - 1, v358));
  if (!v359)
  {
    ((void (*)(std::__shared_weak_count *))v354->__on_zero_shared)(v354);
    std::__shared_weak_count::__release_weak(v354);
    v361 = *a1;
    v360 = (std::__shared_weak_count *)a1[1];
    if (!v360)
      goto LABEL_424;
  }
  else
  {
LABEL_421:
    v361 = *a1;
    v360 = (std::__shared_weak_count *)a1[1];
    if (!v360)
      goto LABEL_424;
  }
  v362 = (unint64_t *)&v360->__shared_owners_;
  do
    v363 = __ldxr(v362);
  while (__stxr(v363 + 1, v362));
LABEL_424:
  v397 = 10;
  strcpy(__p, "CheekLeft0");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v361, (const cva::ItemHandler *)v398);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v398);
  if (!v360)
    goto LABEL_428;
  v364 = (unint64_t *)&v360->__shared_owners_;
  do
    v365 = __ldaxr(v364);
  while (__stlxr(v365 - 1, v364));
  if (!v365)
  {
    ((void (*)(std::__shared_weak_count *))v360->__on_zero_shared)(v360);
    std::__shared_weak_count::__release_weak(v360);
    v367 = *a1;
    v366 = (std::__shared_weak_count *)a1[1];
    if (!v366)
      goto LABEL_431;
  }
  else
  {
LABEL_428:
    v367 = *a1;
    v366 = (std::__shared_weak_count *)a1[1];
    if (!v366)
      goto LABEL_431;
  }
  v368 = (unint64_t *)&v366->__shared_owners_;
  do
    v369 = __ldxr(v368);
  while (__stxr(v369 + 1, v368));
LABEL_431:
  v397 = 10;
  strcpy(__p, "CheekLeft1");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v367, (const cva::ItemHandler *)v398);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v398);
  if (!v366)
    goto LABEL_435;
  v370 = (unint64_t *)&v366->__shared_owners_;
  do
    v371 = __ldaxr(v370);
  while (__stlxr(v371 - 1, v370));
  if (!v371)
  {
    ((void (*)(std::__shared_weak_count *))v366->__on_zero_shared)(v366);
    std::__shared_weak_count::__release_weak(v366);
    v373 = *a1;
    v372 = (std::__shared_weak_count *)a1[1];
    if (!v372)
      goto LABEL_438;
  }
  else
  {
LABEL_435:
    v373 = *a1;
    v372 = (std::__shared_weak_count *)a1[1];
    if (!v372)
      goto LABEL_438;
  }
  v374 = (unint64_t *)&v372->__shared_owners_;
  do
    v375 = __ldxr(v374);
  while (__stxr(v375 + 1, v374));
LABEL_438:
  v397 = 10;
  strcpy(__p, "CheekLeft2");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v373, (const cva::ItemHandler *)v398);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v398);
  if (!v372)
    goto LABEL_442;
  v376 = (unint64_t *)&v372->__shared_owners_;
  do
    v377 = __ldaxr(v376);
  while (__stlxr(v377 - 1, v376));
  if (!v377)
  {
    ((void (*)(std::__shared_weak_count *))v372->__on_zero_shared)(v372);
    std::__shared_weak_count::__release_weak(v372);
    v379 = *a1;
    v378 = (std::__shared_weak_count *)a1[1];
    if (!v378)
      goto LABEL_445;
  }
  else
  {
LABEL_442:
    v379 = *a1;
    v378 = (std::__shared_weak_count *)a1[1];
    if (!v378)
      goto LABEL_445;
  }
  v380 = (unint64_t *)&v378->__shared_owners_;
  do
    v381 = __ldxr(v380);
  while (__stxr(v381 + 1, v380));
LABEL_445:
  v397 = 10;
  strcpy(__p, "CheekLeft3");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v379, (const cva::ItemHandler *)v398);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v398);
  if (!v378)
    goto LABEL_449;
  v382 = (unint64_t *)&v378->__shared_owners_;
  do
    v383 = __ldaxr(v382);
  while (__stlxr(v383 - 1, v382));
  if (!v383)
  {
    ((void (*)(std::__shared_weak_count *))v378->__on_zero_shared)(v378);
    std::__shared_weak_count::__release_weak(v378);
    v385 = *a1;
    v384 = (std::__shared_weak_count *)a1[1];
    if (!v384)
      goto LABEL_452;
  }
  else
  {
LABEL_449:
    v385 = *a1;
    v384 = (std::__shared_weak_count *)a1[1];
    if (!v384)
      goto LABEL_452;
  }
  v386 = (unint64_t *)&v384->__shared_owners_;
  do
    v387 = __ldxr(v386);
  while (__stxr(v387 + 1, v386));
LABEL_452:
  v397 = 10;
  strcpy(__p, "CheekLeft4");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v385, (const cva::ItemHandler *)v398);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v398);
  if (!v384)
    goto LABEL_456;
  v388 = (unint64_t *)&v384->__shared_owners_;
  do
    v389 = __ldaxr(v388);
  while (__stlxr(v389 - 1, v388));
  if (!v389)
  {
    ((void (*)(std::__shared_weak_count *))v384->__on_zero_shared)(v384);
    std::__shared_weak_count::__release_weak(v384);
    v391 = *a1;
    v390 = (std::__shared_weak_count *)a1[1];
    if (!v390)
      goto LABEL_459;
  }
  else
  {
LABEL_456:
    v391 = *a1;
    v390 = (std::__shared_weak_count *)a1[1];
    if (!v390)
      goto LABEL_459;
  }
  v392 = (unint64_t *)&v390->__shared_owners_;
  do
    v393 = __ldxr(v392);
  while (__stxr(v393 + 1, v392));
LABEL_459:
  v397 = 10;
  strcpy(__p, "CheekLeft5");
  cva::ItemHandler::createValue<std::string>();
  cva::ArrayHandler::addItem(v391, (const cva::ItemHandler *)v398);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v398);
  if (v390)
  {
    v394 = (unint64_t *)&v390->__shared_owners_;
    do
      v395 = __ldaxr(v394);
    while (__stlxr(v395 - 1, v394));
    if (!v395)
    {
      ((void (*)(std::__shared_weak_count *))v390->__on_zero_shared)(v390);
      std::__shared_weak_count::__release_weak(v390);
    }
  }
}

