id sub_239389E54(__n128 a1, __n128 a2, __n128 a3, uint64_t a4, const char *a5, uint64_t a6)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  void *v32;
  float v34;
  float v35;
  _QWORD v38[10];

  v35 = a1.n128_f32[2];
  v38[9] = *MEMORY[0x24BDAC8D0];
  objc_msgSend_numberWithDouble_(MEMORY[0x24BDD16E0], a5, a6, a1.n128_f32[0], a1.n128_u64[0]);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v38[0] = v6;
  objc_msgSend_numberWithDouble_(MEMORY[0x24BDD16E0], v7, v8, a2.n128_f32[0]);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v38[1] = v9;
  objc_msgSend_numberWithDouble_(MEMORY[0x24BDD16E0], v10, v11, a3.n128_f32[0]);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v38[2] = v12;
  objc_msgSend_numberWithDouble_(MEMORY[0x24BDD16E0], v13, v14, v34);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v38[3] = v15;
  objc_msgSend_numberWithDouble_(MEMORY[0x24BDD16E0], v16, v17, a2.n128_f32[1]);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v38[4] = v18;
  objc_msgSend_numberWithDouble_(MEMORY[0x24BDD16E0], v19, v20, a3.n128_f32[1]);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v38[5] = v21;
  objc_msgSend_numberWithDouble_(MEMORY[0x24BDD16E0], v22, v23, v35);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v38[6] = v24;
  objc_msgSend_numberWithDouble_(MEMORY[0x24BDD16E0], v25, v26, a2.n128_f32[2]);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v38[7] = v27;
  objc_msgSend_numberWithDouble_(MEMORY[0x24BDD16E0], v28, v29, a3.n128_f32[2]);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  v38[8] = v30;
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x24BDBCE30], v31, (uint64_t)v38, 9);
  v32 = (void *)objc_claimAutoreleasedReturnValue();

  return v32;
}

void sub_23938A020(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;

  v2 = (const void *)a1[6];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[7];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[8];
  if (v4)
    CFRelease(v4);
  v5 = (const void *)a1[9];
  if (v5)
    CFRelease(v5);
}

void sub_23938A074()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.CoreOCModules", "General");
  v1 = (void *)qword_256930000;
  qword_256930000 = (uint64_t)v0;

}

uint64_t sub_23938A0A4(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  NSObject *v8;
  const char *v9;
  uint64_t v11;
  NSObject *v12;
  const char *v13;
  uint64_t v14;
  NSObject *v15;
  const char *v16;
  uint64_t v17;
  NSObject *v18;
  const char *v19;
  void *v20;
  id v21;
  const char *v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  unsigned int v29;
  const char *v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  unsigned int v34;
  const char *v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  unsigned int v39;
  const char *v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  unsigned int v44;
  const char *v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  unsigned int v49;
  const char *v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  unsigned int v54;
  const char *v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  int v59;
  int v60;
  const char *v61;
  void *v62;
  const char *v63;
  uint64_t v64;
  int v65;
  int v66;
  const char *v67;
  void *v68;
  const char *v69;
  uint64_t v70;
  int v71;
  int v72;
  NSObject *v73;
  const char *v74;
  void *v75;
  void *v76;
  id v77;
  id v78;
  const char *v79;
  uint64_t v80;
  const char *v81;
  uint64_t v82;
  const char *v83;
  uint64_t v84;
  void *v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  const char *v89;
  void *v90;
  const char *v91;
  uint64_t v92;
  __int32 v93;
  const char *v94;
  void *v95;
  const char *v96;
  uint64_t v97;
  unsigned int v98;
  const char *v99;
  void *v100;
  const char *v101;
  uint64_t v102;
  unsigned int v103;
  const char *v104;
  void *v105;
  const char *v106;
  uint64_t v107;
  uint64_t v108;
  const char *v109;
  void *v110;
  const char *v111;
  uint64_t v112;
  __int32 v113;
  const char *v114;
  void *v115;
  const char *v116;
  uint64_t v117;
  unsigned int v118;
  const char *v119;
  void *v120;
  const char *v121;
  uint64_t v122;
  unsigned int v123;
  const char *v124;
  void *v125;
  const char *v126;
  uint64_t v127;
  uint64_t v128;
  const char *v129;
  void *v130;
  const char *v131;
  uint64_t v132;
  __int32 v133;
  const char *v134;
  void *v135;
  const char *v136;
  uint64_t v137;
  uint64_t v138;
  const char *v139;
  void *v140;
  const char *v141;
  uint64_t v142;
  int32x4_t v143;
  int32x4_t v144;
  int32x4_t v145;
  int32x4_t v146;
  unsigned int v147;
  int32x4_t v148;
  float *v149;
  float *v150;
  NSObject *v151;
  const char *v152;
  uint64_t v153;
  NSObject *v154;
  const char *v155;
  id v156;
  const char *v157;
  void *v158;
  const char *v159;
  NSObject *v160;
  const char *v161;
  NSObject *v162;
  const char *v163;
  void *v164;
  const char *v165;
  NSObject *v166;
  void *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  const char *v173;
  void *v174;
  const char *v175;
  id v176;
  NSObject *v177;
  const char *v178;
  void *v179;
  const char *v180;
  void *v181;
  NSObject *v182;
  const char *v183;
  const char *v184;
  void *v185;
  const char *v186;
  void *v187;
  NSObject *v188;
  const char *v189;
  const char *v190;
  const char *v191;
  void *v192;
  int8x16_t *v193;
  void *v194;
  const char *v195;
  void *v196;
  id v197;
  const char *v198;
  uint64_t v199;
  uint64_t v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  const char *v205;
  id v206;
  const char *v207;
  uint64_t v208;
  uint64_t v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  NSObject *v214;
  const char *v215;
  const char *v216;
  void *v217;
  const char *v218;
  NSObject *v219;
  id v220;
  const char *v221;
  id v222;
  NSObject *v223;
  const char *v224;
  void *v225;
  const char *v226;
  NSObject *v227;
  const char *v228;
  NSObject *v229;
  const char *v230;
  void *v231;
  const char *v232;
  NSObject *v233;
  id v234;
  const char *v235;
  id v236;
  NSObject *v237;
  const char *v238;
  void *v239;
  const char *v240;
  NSObject *v241;
  const char *v242;
  NSObject *v243;
  const char *v244;
  void *v245;
  const char *v246;
  NSObject *v247;
  const char *v248;
  NSObject *v249;
  const char *v250;
  void *v251;
  const char *v252;
  void *v253;
  id v254;
  const char *v255;
  uint64_t v256;
  uint64_t v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  NSObject *v262;
  const char *v263;
  int8x16_t v264;
  int8x16_t v265;
  const char *v266;
  void *v267;
  void *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  const char *v274;
  NSObject *v275;
  const char *v276;
  void *v277;
  const char *v278;
  id v279;
  NSObject *v280;
  void *v281;
  const char *v282;
  void *v283;
  const char *v284;
  void *v285;
  const char *v286;
  void *v287;
  const char *v288;
  void *v289;
  const char *v290;
  void *v291;
  const char *v292;
  uint64_t v293;
  __int32 v294;
  unsigned int v295;
  unsigned int v296;
  __int32 v297;
  unsigned int v298;
  unsigned int v299;
  int32x4_t v300;
  unsigned int v301;
  unsigned int v302;
  int32x4_t v303;
  unsigned int v304;
  __int32 v305;
  int32x4_t v306;
  int32x4_t v307;
  int8x16_t v308;
  int8x16_t v309;
  int8x16_t v310;
  int32x4_t v311;
  int32x4_t v312;
  unsigned int v313;
  int32x4_t v314;
  int8x16_t v315;
  int8x16_t v316;
  int8x16_t v317;
  int32x4_t v318;
  unsigned int v319;
  int32x4_t v320;
  int8x16_t v321;
  int8x16_t v322;
  int8x16_t v323;
  int32x4_t v324;
  int32x4_t v325;
  unsigned int v326;
  int32x4_t v327;
  int32x4_t v328;
  int8x16_t v329;
  int8x16_t v330;
  int8x16_t v331;
  uint8_t buf[16];
  float32x2x2_t v333;

  if (!a1 || !a2)
  {
    if (qword_256930008 != -1)
      dispatch_once(&qword_256930008, &unk_250AD5950);
    v8 = qword_256930000;
    if (!os_log_type_enabled((os_log_t)qword_256930000, OS_LOG_TYPE_ERROR))
      return 4294967294;
    *(_WORD *)buf = 0;
    v9 = "HEIC Deserialization: Invalid imageData or imageDataInternal.";
    goto LABEL_216;
  }
  if (!*(_QWORD *)a1)
  {
    if (qword_256930008 != -1)
      dispatch_once(&qword_256930008, &unk_250AD5950);
    v8 = qword_256930000;
    if (!os_log_type_enabled((os_log_t)qword_256930000, OS_LOG_TYPE_ERROR))
      return 4294967294;
    *(_WORD *)buf = 0;
    v9 = "HEIC Deserialization: Cannot read image field.";
LABEL_216:
    _os_log_error_impl(&dword_239388000, v8, OS_LOG_TYPE_ERROR, v9, buf, 2u);
    return 4294967294;
  }
  *(_QWORD *)a2 = *(_QWORD *)a1;
  if (qword_256930008 != -1)
    dispatch_once(&qword_256930008, &unk_250AD5950);
  v4 = (id)qword_256930000;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_239388000, v4, OS_LOG_TYPE_INFO, "HEIC Deserialization: Read image field.", buf, 2u);
  }

  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 16) = v5;
  if (v5)
  {
    if (qword_256930008 != -1)
      dispatch_once(&qword_256930008, &unk_250AD5950);
    v6 = (id)qword_256930000;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      v7 = "HEIC Deserialization: Read depth data map.";
LABEL_25:
      _os_log_impl(&dword_239388000, v6, OS_LOG_TYPE_INFO, v7, buf, 2u);
    }
  }
  else
  {
    if (qword_256930008 != -1)
      dispatch_once(&qword_256930008, &unk_250AD5950);
    v6 = (id)qword_256930000;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      v7 = "HEIC Deserialization: Cannot read depth data map.";
      goto LABEL_25;
    }
  }

  v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a2 + 24) = v11;
  if (v11)
  {
    if (qword_256930008 != -1)
      dispatch_once(&qword_256930008, &unk_250AD5950);
    v12 = (id)qword_256930000;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      v13 = "HEIC Deserialization: Read depth confidence map.";
LABEL_35:
      _os_log_impl(&dword_239388000, v12, OS_LOG_TYPE_INFO, v13, buf, 2u);
    }
  }
  else
  {
    if (qword_256930008 != -1)
      dispatch_once(&qword_256930008, &unk_250AD5950);
    v12 = (id)qword_256930000;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      v13 = "HEIC Deserialization: Cannot read depth confidence map.";
      goto LABEL_35;
    }
  }

  v14 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 32) = v14;
  if (v14)
  {
    if (qword_256930008 != -1)
      dispatch_once(&qword_256930008, &unk_250AD5950);
    v15 = (id)qword_256930000;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      v16 = "HEIC Deserialization: Read object mask.";
LABEL_45:
      _os_log_impl(&dword_239388000, v15, OS_LOG_TYPE_INFO, v16, buf, 2u);
    }
  }
  else
  {
    if (qword_256930008 != -1)
      dispatch_once(&qword_256930008, &unk_250AD5950);
    v15 = (id)qword_256930000;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      v16 = "HEIC Deserialization: Cannot read object mask.";
      goto LABEL_45;
    }
  }

  v17 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a2 + 8) = v17;
  if (v17)
  {
    if (qword_256930008 != -1)
      dispatch_once(&qword_256930008, &unk_250AD5950);
    v18 = (id)qword_256930000;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      v19 = "HEIC Deserialization: Read image properties metadata.";
LABEL_55:
      _os_log_impl(&dword_239388000, v18, OS_LOG_TYPE_INFO, v19, buf, 2u);
    }
  }
  else
  {
    if (qword_256930008 != -1)
      dispatch_once(&qword_256930008, &unk_250AD5950);
    v18 = (id)qword_256930000;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      v19 = "Cannot read image properties";
      goto LABEL_55;
    }
  }

  v20 = *(void **)(a1 + 48);
  if (v20)
  {
    v21 = v20;
    if (objc_msgSend_count(v21, v22, v23) != 9)
    {
      objc_msgSend_currentHandler(MEMORY[0x24BDD1448], v24, v25);
      v281 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_stringWithUTF8String_(MEMORY[0x24BDD17C8], v282, (uint64_t)"simd_float3x3 rowMajorUnflattenToSimdFloat3x3(const CFArrayRef)");
      v283 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v281, v284, (uint64_t)v283, CFSTR("SerializationInternal.m"), 30, CFSTR("input data needs to have length 9."));

    }
    objc_msgSend_objectAtIndexedSubscript_(v21, v24, 0);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_floatValue(v26, v27, v28);
    v326 = v29;
    objc_msgSend_objectAtIndexedSubscript_(v21, v30, 1);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_floatValue(v31, v32, v33);
    v319 = v34;
    objc_msgSend_objectAtIndexedSubscript_(v21, v35, 2);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_floatValue(v36, v37, v38);
    v313 = v39;

    objc_msgSend_objectAtIndexedSubscript_(v21, v40, 3);
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_floatValue(v41, v42, v43);
    v304 = v44;
    objc_msgSend_objectAtIndexedSubscript_(v21, v45, 4);
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_floatValue(v46, v47, v48);
    v301 = v49;
    objc_msgSend_objectAtIndexedSubscript_(v21, v50, 5);
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_floatValue(v51, v52, v53);
    v298 = v54;

    objc_msgSend_objectAtIndexedSubscript_(v21, v55, 6);
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_floatValue(v56, v57, v58);
    v60 = v59;
    objc_msgSend_objectAtIndexedSubscript_(v21, v61, 7);
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_floatValue(v62, v63, v64);
    v66 = v65;
    objc_msgSend_objectAtIndexedSubscript_(v21, v67, 8);
    v68 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_floatValue(v68, v69, v70);
    v72 = v71;

    *(_DWORD *)(a2 + 136) = v60;
    *(_QWORD *)(a2 + 128) = __PAIR64__(v304, v326);
    *(_DWORD *)(a2 + 152) = v66;
    *(_QWORD *)(a2 + 144) = __PAIR64__(v301, v319);
    *(_DWORD *)(a2 + 168) = v72;
    *(_QWORD *)(a2 + 160) = __PAIR64__(v298, v313);
    if (qword_256930008 != -1)
      dispatch_once(&qword_256930008, &unk_250AD5950);
    v73 = (id)qword_256930000;
    if (os_log_type_enabled(v73, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      v74 = "HEIC Deserialization: Read intrinsics data.";
LABEL_67:
      _os_log_impl(&dword_239388000, v73, OS_LOG_TYPE_INFO, v74, buf, 2u);
    }
  }
  else
  {
    *(_DWORD *)(a2 + 136) = 0;
    *(_QWORD *)(a2 + 128) = 0;
    *(_DWORD *)(a2 + 152) = 0;
    *(_QWORD *)(a2 + 144) = 0;
    *(_DWORD *)(a2 + 168) = 0;
    *(_QWORD *)(a2 + 160) = 0;
    if (qword_256930008 != -1)
      dispatch_once(&qword_256930008, &unk_250AD5950);
    v73 = (id)qword_256930000;
    if (os_log_type_enabled(v73, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      v74 = "HEIC Deserialization: Cannot read camera intrinsics internal metadata.";
      goto LABEL_67;
    }
  }

  v75 = *(void **)(a1 + 56);
  if (v75 && (v76 = *(void **)(a1 + 64)) != 0)
  {
    v77 = v75;
    v78 = v76;
    if (objc_msgSend_count(v78, v79, v80) != 9)
    {
      objc_msgSend_currentHandler(MEMORY[0x24BDD1448], v81, v82);
      v285 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_stringWithUTF8String_(MEMORY[0x24BDD17C8], v286, (uint64_t)"simd_float4x4 transformRowMajorUnflattenToSimdFloat4x4(const CFArrayRef, const CFArrayRef)");
      v287 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v285, v288, (uint64_t)v287, CFSTR("SerializationInternal.m"), 43, CFSTR("rotation needs to have length 9."));

    }
    if (objc_msgSend_count(v77, v81, v82) != 3)
    {
      objc_msgSend_currentHandler(MEMORY[0x24BDD1448], v83, v84);
      v289 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_stringWithUTF8String_(MEMORY[0x24BDD17C8], v290, (uint64_t)"simd_float4x4 transformRowMajorUnflattenToSimdFloat4x4(const CFArrayRef, const CFArrayRef)");
      v291 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v289, v292, (uint64_t)v291, CFSTR("SerializationInternal.m"), 44, CFSTR("position needs to have length 3."));

    }
    objc_msgSend_objectAtIndexedSubscript_(v78, v83, 0);
    v85 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_floatValue(v85, v86, v87);
    v325.i64[0] = v88;
    objc_msgSend_objectAtIndexedSubscript_(v78, v89, 1);
    v90 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_floatValue(v90, v91, v92);
    v305 = v93;
    objc_msgSend_objectAtIndexedSubscript_(v78, v94, 2);
    v95 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_floatValue(v95, v96, v97);
    v302 = v98;
    objc_msgSend_objectAtIndexedSubscript_(v77, v99, 0);
    v100 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_floatValue(v100, v101, v102);
    v299 = v103;

    objc_msgSend_objectAtIndexedSubscript_(v78, v104, 3);
    v105 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_floatValue(v105, v106, v107);
    v318.i64[0] = v108;
    objc_msgSend_objectAtIndexedSubscript_(v78, v109, 4);
    v110 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_floatValue(v110, v111, v112);
    v297 = v113;
    objc_msgSend_objectAtIndexedSubscript_(v78, v114, 5);
    v115 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_floatValue(v115, v116, v117);
    v296 = v118;
    objc_msgSend_objectAtIndexedSubscript_(v77, v119, 1);
    v120 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_floatValue(v120, v121, v122);
    v295 = v123;

    objc_msgSend_objectAtIndexedSubscript_(v78, v124, 6);
    v125 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_floatValue(v125, v126, v127);
    v312.i64[0] = v128;
    objc_msgSend_objectAtIndexedSubscript_(v78, v129, 7);
    v130 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_floatValue(v130, v131, v132);
    v294 = v133;
    objc_msgSend_objectAtIndexedSubscript_(v78, v134, 8);
    v135 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_floatValue(v135, v136, v137);
    v293 = v138;
    objc_msgSend_objectAtIndexedSubscript_(v77, v139, 2);
    v140 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_floatValue(v140, v141, v142);
    v143 = v325;
    v143.i32[1] = v305;
    v327 = v143;
    v143.i64[1] = __PAIR64__(v299, v302);
    v306 = v143;
    v144 = v318;
    v144.i32[1] = v297;
    v320 = v144;
    v144.i64[1] = __PAIR64__(v295, v296);
    v303 = v144;
    v145 = v312;
    v145.i32[1] = v294;
    v314 = v145;
    v146.i64[0] = v293;
    v146.i64[1] = __PAIR64__(v147, v293);
    v300 = v146;

    v148 = vzip2q_s32(v306, v300);
    v307 = vzip1q_s32(v327, v314);
    v311 = vzip1q_s32(v320, (int32x4_t)0);
    v320.i64[0] = v148.i64[0];
    v324 = vzip2q_s32(v303, (int32x4_t)xmmword_2393F5320);
    v328 = vzip2q_s32(v148, v324);

    v149 = (float *)(a2 + 48);
    v333.val[0] = (float32x2_t)v307.i64[0];
    v333.val[1] = (float32x2_t)v311.i64[0];
    vst2_f32(v149, v333);
    *(int32x4_t *)(a2 + 64) = vzip2q_s32(v307, v311);
    v150 = (float *)(a2 + 80);
    v333.val[0] = (float32x2_t)v320.i64[0];
    v333.val[1] = (float32x2_t)v324.i64[0];
    vst2_f32(v150, v333);
    *(int32x4_t *)(a2 + 96) = v328;
    if (qword_256930008 != -1)
      dispatch_once(&qword_256930008, &unk_250AD5950);
    v151 = (id)qword_256930000;
    if (os_log_type_enabled(v151, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      v152 = "HEIC Deserialization: Read camera transform data.";
LABEL_82:
      _os_log_impl(&dword_239388000, v151, OS_LOG_TYPE_INFO, v152, buf, 2u);
    }
  }
  else
  {
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    if (qword_256930008 != -1)
      dispatch_once(&qword_256930008, &unk_250AD5950);
    v151 = (id)qword_256930000;
    if (os_log_type_enabled(v151, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      v152 = "HEIC Deserialization: Cannot read camera transform internal metadata.";
      goto LABEL_82;
    }
  }

  v153 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 432) = v153;
  if (v153)
  {
    if (qword_256930008 != -1)
      dispatch_once(&qword_256930008, &unk_250AD5950);
    v154 = (id)qword_256930000;
    if (os_log_type_enabled(v154, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      v155 = "HEIC Deserialization: Read XMP custom metadata.";
LABEL_92:
      _os_log_impl(&dword_239388000, v154, OS_LOG_TYPE_INFO, v155, buf, 2u);
    }
  }
  else
  {
    if (qword_256930008 != -1)
      dispatch_once(&qword_256930008, &unk_250AD5950);
    v154 = (id)qword_256930000;
    if (os_log_type_enabled(v154, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      v155 = "HEIC Deserialization: Cannot read XMP custom metadata.";
      goto LABEL_92;
    }
  }

  v156 = *(id *)(a1 + 72);
  objc_msgSend_objectForKeyedSubscript_(v156, v157, (uint64_t)CFSTR("tag:apple.com,2023:ObjectCapture#CameraTrackingState"));
  v158 = (void *)objc_claimAutoreleasedReturnValue();

  if (v158)
  {
    objc_msgSend_objectForKeyedSubscript_(v156, v159, (uint64_t)CFSTR("tag:apple.com,2023:ObjectCapture#CameraTrackingState"));
    v160 = objc_claimAutoreleasedReturnValue();
    objc_msgSend_getBytes_length_(v160, v161, a2 + 112, 4);
    if (qword_256930008 != -1)
      dispatch_once(&qword_256930008, &unk_250AD5950);
    v162 = (id)qword_256930000;
    if (os_log_type_enabled(v162, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_239388000, v162, OS_LOG_TYPE_INFO, "HEIC Deserialization: Read flattened camera tracking state field.", buf, 2u);
    }

  }
  else
  {
    *(_DWORD *)(a2 + 112) = 0;
    if (qword_256930008 != -1)
      dispatch_once(&qword_256930008, &unk_250AD5950);
    v160 = (id)qword_256930000;
    if (os_log_type_enabled(v160, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_239388000, v160, OS_LOG_TYPE_INFO, "HEIC Deserialization: Cannot read camera tracking state internal metadata.", buf, 2u);
    }
  }

  objc_msgSend_objectForKeyedSubscript_(v156, v163, (uint64_t)CFSTR("tag:apple.com,2023:ObjectCapture#CameraCalibrationData"));
  v164 = (void *)objc_claimAutoreleasedReturnValue();

  if (v164)
  {
    objc_msgSend_objectForKeyedSubscript_(v156, v165, (uint64_t)CFSTR("tag:apple.com,2023:ObjectCapture#CameraCalibrationData"));
    v166 = objc_claimAutoreleasedReturnValue();
    v167 = (void *)MEMORY[0x24BDBCF20];
    v168 = objc_opt_class();
    v169 = objc_opt_class();
    v170 = objc_opt_class();
    v171 = objc_opt_class();
    v172 = objc_opt_class();
    objc_msgSend_setWithObjects_(v167, v173, v168, v169, v170, v171, v172, 0);
    v174 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_unarchivedObjectOfClasses_fromData_error_(MEMORY[0x24BDD1620], v175, (uint64_t)v174, v166, 0);
    v176 = (id)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)(a2 + 176) = v176;
    if (qword_256930008 != -1)
      dispatch_once(&qword_256930008, &unk_250AD5950);
    v177 = (id)qword_256930000;
    if (os_log_type_enabled(v177, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_239388000, v177, OS_LOG_TYPE_INFO, "HEIC Deserialization: Read camera.calibrationData field.", buf, 2u);
    }

  }
  else
  {
    *(_QWORD *)(a2 + 176) = 0;
    if (qword_256930008 != -1)
      dispatch_once(&qword_256930008, &unk_250AD5950);
    v166 = (id)qword_256930000;
    if (os_log_type_enabled(v166, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_239388000, v166, OS_LOG_TYPE_INFO, "HEIC Deserialization: Cannot read camera.calibrationData field.", buf, 2u);
    }
  }

  objc_msgSend_objectForKeyedSubscript_(v156, v178, (uint64_t)CFSTR("tag:apple.com,2023:ObjectCapture#RawFeaturePoints"));
  v179 = (void *)objc_claimAutoreleasedReturnValue();

  if (v179)
  {
    objc_msgSend_objectForKeyedSubscript_(v156, v180, (uint64_t)CFSTR("tag:apple.com,2023:ObjectCapture#RawFeaturePoints"));
    v181 = (void *)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)(a2 + 384) = v181;

    if (qword_256930008 != -1)
      dispatch_once(&qword_256930008, &unk_250AD5950);
    v182 = (id)qword_256930000;
    if (os_log_type_enabled(v182, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      v183 = "HEIC Deserialization: Read raw feature points field.";
LABEL_122:
      _os_log_impl(&dword_239388000, v182, OS_LOG_TYPE_INFO, v183, buf, 2u);
    }
  }
  else
  {
    *(_QWORD *)(a2 + 384) = 0;
    if (qword_256930008 != -1)
      dispatch_once(&qword_256930008, &unk_250AD5950);
    v182 = (id)qword_256930000;
    if (os_log_type_enabled(v182, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      v183 = "HEIC Deserialization: Cannot read raw feature points field.";
      goto LABEL_122;
    }
  }

  objc_msgSend_objectForKeyedSubscript_(v156, v184, (uint64_t)CFSTR("tag:apple.com,2023:ObjectCapture#PointCloudData"));
  v185 = (void *)objc_claimAutoreleasedReturnValue();

  if (v185)
  {
    objc_msgSend_objectForKeyedSubscript_(v156, v186, (uint64_t)CFSTR("tag:apple.com,2023:ObjectCapture#PointCloudData"));
    v187 = (void *)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)(a2 + 40) = OCNonModularSPI_NSData_CreateDepthPointCloudDataBuffer(v187);

    if (qword_256930008 != -1)
      dispatch_once(&qword_256930008, &unk_250AD5950);
    v188 = (id)qword_256930000;
    if (os_log_type_enabled(v188, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      v189 = "HEIC Deserialization: Read point cloud data field.";
LABEL_132:
      _os_log_impl(&dword_239388000, v188, OS_LOG_TYPE_INFO, v189, buf, 2u);
    }
  }
  else
  {
    *(_QWORD *)(a2 + 40) = 0;
    if (qword_256930008 != -1)
      dispatch_once(&qword_256930008, &unk_250AD5950);
    v188 = (id)qword_256930000;
    if (os_log_type_enabled(v188, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      v189 = "HEIC Deserialization: Cannot read LiDAR point cloud internal metadata.";
      goto LABEL_132;
    }
  }

  objc_msgSend_objectForKeyedSubscript_(v156, v190, (uint64_t)CFSTR("tag:apple.com,2023:ObjectCapture#ObjectTransform"));
  v192 = (void *)objc_claimAutoreleasedReturnValue();
  v193 = (int8x16_t *)MEMORY[0x24BDAEE00];
  if (v192
    && (objc_msgSend_objectForKeyedSubscript_(v156, v191, (uint64_t)CFSTR("tag:apple.com,2023:ObjectCapture#ObjectBoundingBox")), v194 = (void *)objc_claimAutoreleasedReturnValue(), v194, v192, v194))
  {
    objc_msgSend_objectForKeyedSubscript_(v156, v195, (uint64_t)CFSTR("tag:apple.com,2023:ObjectCapture#ObjectTransform"));
    v196 = (void *)objc_claimAutoreleasedReturnValue();
    v308 = *v193;
    v315 = v193[1];
    v321 = v193[2];
    v329 = v193[3];
    v197 = objc_retainAutorelease(v196);
    v200 = objc_msgSend_bytes(v197, v198, v199);
    *(_QWORD *)&v201 = *(_QWORD *)v200;
    v309 = vextq_s8(v308, v308, 8uLL);
    HIDWORD(v201) = v309.i32[1];
    DWORD2(v201) = *(_DWORD *)(v200 + 8);
    *(_QWORD *)&v202 = *(_QWORD *)(v200 + 12);
    v316 = vextq_s8(v315, v315, 8uLL);
    HIDWORD(v202) = v316.i32[1];
    DWORD2(v202) = *(_DWORD *)(v200 + 20);
    *(_QWORD *)&v203 = *(_QWORD *)(v200 + 24);
    v322 = vextq_s8(v321, v321, 8uLL);
    HIDWORD(v203) = v322.i32[1];
    DWORD2(v203) = *(_DWORD *)(v200 + 32);
    *(_QWORD *)&v204 = *(_QWORD *)(v200 + 36);
    v330 = vextq_s8(v329, v329, 8uLL);
    HIDWORD(v204) = v330.i32[1];
    DWORD2(v204) = *(_DWORD *)(v200 + 44);
    *(_OWORD *)(a2 + 256) = v201;
    *(_OWORD *)(a2 + 272) = v202;
    *(_OWORD *)(a2 + 288) = v203;
    *(_OWORD *)(a2 + 304) = v204;

    objc_msgSend_objectForKeyedSubscript_(v156, v205, (uint64_t)CFSTR("tag:apple.com,2023:ObjectCapture#ObjectBoundingBox"));
    v206 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v209 = objc_msgSend_bytes(v206, v207, v208);
    *(_QWORD *)&v210 = *(_QWORD *)v209;
    HIDWORD(v210) = v309.i32[1];
    DWORD2(v210) = *(_DWORD *)(v209 + 8);
    *(_QWORD *)&v211 = *(_QWORD *)(v209 + 12);
    HIDWORD(v211) = v316.i32[1];
    DWORD2(v211) = *(_DWORD *)(v209 + 20);
    *(_QWORD *)&v212 = *(_QWORD *)(v209 + 24);
    HIDWORD(v212) = v322.i32[1];
    DWORD2(v212) = *(_DWORD *)(v209 + 32);
    *(_QWORD *)&v213 = *(_QWORD *)(v209 + 36);
    HIDWORD(v213) = v330.i32[1];
    DWORD2(v213) = *(_DWORD *)(v209 + 44);
    *(_OWORD *)(a2 + 320) = v210;
    *(_OWORD *)(a2 + 336) = v211;
    *(_OWORD *)(a2 + 352) = v212;
    *(_OWORD *)(a2 + 368) = v213;

    if (qword_256930008 != -1)
      dispatch_once(&qword_256930008, &unk_250AD5950);
    v214 = (id)qword_256930000;
    if (os_log_type_enabled(v214, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      v215 = "HEIC Deserialization: Read object field.";
LABEL_143:
      _os_log_impl(&dword_239388000, v214, OS_LOG_TYPE_INFO, v215, buf, 2u);
    }
  }
  else
  {
    *(_OWORD *)(a2 + 256) = 0u;
    *(_OWORD *)(a2 + 272) = 0u;
    *(_OWORD *)(a2 + 288) = 0u;
    *(_OWORD *)(a2 + 304) = xmmword_2393F5320;
    *(_OWORD *)(a2 + 320) = 0u;
    *(_OWORD *)(a2 + 336) = 0u;
    *(_OWORD *)(a2 + 352) = 0u;
    *(_OWORD *)(a2 + 368) = 0u;
    if (qword_256930008 != -1)
      dispatch_once(&qword_256930008, &unk_250AD5950);
    v214 = (id)qword_256930000;
    if (os_log_type_enabled(v214, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      v215 = "HEIC Deserialization: Cannot read object internal metadata.";
      goto LABEL_143;
    }
  }

  objc_msgSend_objectForKeyedSubscript_(v156, v216, (uint64_t)CFSTR("tag:apple.com,2023:ObjectCapture#BundleVersion"));
  v217 = (void *)objc_claimAutoreleasedReturnValue();

  if (v217)
  {
    objc_msgSend_objectForKeyedSubscript_(v156, v218, (uint64_t)CFSTR("tag:apple.com,2023:ObjectCapture#BundleVersion"));
    v219 = objc_claimAutoreleasedReturnValue();
    v220 = objc_alloc(MEMORY[0x24BDD17C8]);
    v222 = (id)objc_msgSend_initWithData_encoding_(v220, v221, (uint64_t)v219, 4);
    *(_QWORD *)(a2 + 392) = v222;
    if (qword_256930008 != -1)
      dispatch_once(&qword_256930008, &unk_250AD5950);
    v223 = (id)qword_256930000;
    if (os_log_type_enabled(v223, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_239388000, v223, OS_LOG_TYPE_INFO, "HEIC Deserialization: Read HEIC version.", buf, 2u);
    }

  }
  else
  {
    *(_QWORD *)(a2 + 392) = 0;
    if (qword_256930008 != -1)
      dispatch_once(&qword_256930008, &unk_250AD5950);
    v219 = (id)qword_256930000;
    if (os_log_type_enabled(v219, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_239388000, v219, OS_LOG_TYPE_INFO, "HEIC Deserialization: Cannot read bundle version internal metadata.", buf, 2u);
    }
  }

  objc_msgSend_objectForKeyedSubscript_(v156, v224, (uint64_t)CFSTR("tag:apple.com,2023:ObjectCapture#SegmentID"));
  v225 = (void *)objc_claimAutoreleasedReturnValue();

  if (v225)
  {
    objc_msgSend_objectForKeyedSubscript_(v156, v226, (uint64_t)CFSTR("tag:apple.com,2023:ObjectCapture#SegmentID"));
    v227 = objc_claimAutoreleasedReturnValue();
    objc_msgSend_getBytes_length_(v227, v228, a2 + 400, 4);
    if (qword_256930008 != -1)
      dispatch_once(&qword_256930008, &unk_250AD5950);
    v229 = (id)qword_256930000;
    if (os_log_type_enabled(v229, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_239388000, v229, OS_LOG_TYPE_INFO, "HEIC Deserialization: Read segment ID.", buf, 2u);
    }

  }
  else
  {
    *(_DWORD *)(a2 + 400) = -1;
    if (qword_256930008 != -1)
      dispatch_once(&qword_256930008, &unk_250AD5950);
    v227 = (id)qword_256930000;
    if (os_log_type_enabled(v227, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_239388000, v227, OS_LOG_TYPE_INFO, "HEIC Deserialization: Cannot read segment ID internal metadata.", buf, 2u);
    }
  }

  objc_msgSend_objectForKeyedSubscript_(v156, v230, (uint64_t)CFSTR("tag:apple.com,2024:ObjectCapture#SessionUUID"));
  v231 = (void *)objc_claimAutoreleasedReturnValue();

  if (v231)
  {
    objc_msgSend_objectForKeyedSubscript_(v156, v232, (uint64_t)CFSTR("tag:apple.com,2024:ObjectCapture#SessionUUID"));
    v233 = objc_claimAutoreleasedReturnValue();
    v234 = objc_alloc(MEMORY[0x24BDD17C8]);
    v236 = (id)objc_msgSend_initWithData_encoding_(v234, v235, (uint64_t)v233, 4);
    *(_QWORD *)(a2 + 408) = v236;
    if (qword_256930008 != -1)
      dispatch_once(&qword_256930008, &unk_250AD5950);
    v237 = (id)qword_256930000;
    if (os_log_type_enabled(v237, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_239388000, v237, OS_LOG_TYPE_INFO, "HEIC Deserialization: Read session UUID.", buf, 2u);
    }

  }
  else
  {
    *(_QWORD *)(a2 + 408) = 0;
    if (qword_256930008 != -1)
      dispatch_once(&qword_256930008, &unk_250AD5950);
    v233 = (id)qword_256930000;
    if (os_log_type_enabled(v233, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_239388000, v233, OS_LOG_TYPE_INFO, "HEIC Deserialization: Cannot read session UUID internal metadata.", buf, 2u);
    }
  }

  objc_msgSend_objectForKeyedSubscript_(v156, v238, (uint64_t)CFSTR("tag:apple.com,2024:ObjectCapture#CaptureMode"));
  v239 = (void *)objc_claimAutoreleasedReturnValue();

  if (v239)
  {
    objc_msgSend_objectForKeyedSubscript_(v156, v240, (uint64_t)CFSTR("tag:apple.com,2024:ObjectCapture#CaptureMode"));
    v241 = objc_claimAutoreleasedReturnValue();
    objc_msgSend_getBytes_length_(v241, v242, a2 + 416, 4);
    if (qword_256930008 != -1)
      dispatch_once(&qword_256930008, &unk_250AD5950);
    v243 = (id)qword_256930000;
    if (os_log_type_enabled(v243, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_239388000, v243, OS_LOG_TYPE_INFO, "HEIC Deserialization: Read session capture mode.", buf, 2u);
    }

  }
  else
  {
    *(_DWORD *)(a2 + 416) = -1;
    if (qword_256930008 != -1)
      dispatch_once(&qword_256930008, &unk_250AD5950);
    v241 = (id)qword_256930000;
    if (os_log_type_enabled(v241, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_239388000, v241, OS_LOG_TYPE_INFO, "HEIC Deserialization: Cannot read session capture mode internal metadata.", buf, 2u);
    }
  }

  objc_msgSend_objectForKeyedSubscript_(v156, v244, (uint64_t)CFSTR("tag:apple.com,2023:ObjectCapture#Feedback"));
  v245 = (void *)objc_claimAutoreleasedReturnValue();

  if (v245)
  {
    objc_msgSend_objectForKeyedSubscript_(v156, v246, (uint64_t)CFSTR("tag:apple.com,2023:ObjectCapture#Feedback"));
    v247 = objc_claimAutoreleasedReturnValue();
    objc_msgSend_getBytes_length_(v247, v248, a2 + 420, 4);
    if (qword_256930008 != -1)
      dispatch_once(&qword_256930008, &unk_250AD5950);
    v249 = (id)qword_256930000;
    if (os_log_type_enabled(v249, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_239388000, v249, OS_LOG_TYPE_INFO, "HEIC Deserialization: Read feedback.", buf, 2u);
    }

  }
  else
  {
    *(_DWORD *)(a2 + 420) = -1;
    if (qword_256930008 != -1)
      dispatch_once(&qword_256930008, &unk_250AD5950);
    v247 = (id)qword_256930000;
    if (os_log_type_enabled(v247, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_239388000, v247, OS_LOG_TYPE_INFO, "HEIC Deserialization: Cannot read feedback internal metadata.", buf, 2u);
    }
  }

  objc_msgSend_objectForKeyedSubscript_(v156, v250, (uint64_t)CFSTR("tag:apple.com,2023:ObjectCapture#WideToDepthCameraTransform"));
  v251 = (void *)objc_claimAutoreleasedReturnValue();

  if (v251)
  {
    objc_msgSend_objectForKeyedSubscript_(v156, v252, (uint64_t)CFSTR("tag:apple.com,2023:ObjectCapture#WideToDepthCameraTransform"));
    v253 = (void *)objc_claimAutoreleasedReturnValue();
    v310 = *v193;
    v317 = v193[1];
    v323 = v193[2];
    v331 = v193[3];
    v254 = objc_retainAutorelease(v253);
    v257 = objc_msgSend_bytes(v254, v255, v256);
    *(_QWORD *)&v258 = *(_QWORD *)v257;
    HIDWORD(v258) = vextq_s8(v310, v310, 8uLL).i32[1];
    DWORD2(v258) = *(_DWORD *)(v257 + 8);
    *(_QWORD *)&v259 = *(_QWORD *)(v257 + 12);
    HIDWORD(v259) = vextq_s8(v317, v317, 8uLL).i32[1];
    DWORD2(v259) = *(_DWORD *)(v257 + 20);
    *(_QWORD *)&v260 = *(_QWORD *)(v257 + 24);
    HIDWORD(v260) = vextq_s8(v323, v323, 8uLL).i32[1];
    DWORD2(v260) = *(_DWORD *)(v257 + 32);
    *(_QWORD *)&v261 = *(_QWORD *)(v257 + 36);
    HIDWORD(v261) = vextq_s8(v331, v331, 8uLL).i32[1];
    DWORD2(v261) = *(_DWORD *)(v257 + 44);
    *(_OWORD *)(a2 + 192) = v258;
    *(_OWORD *)(a2 + 208) = v259;
    *(_OWORD *)(a2 + 224) = v260;
    *(_OWORD *)(a2 + 240) = v261;

    if (qword_256930008 != -1)
      dispatch_once(&qword_256930008, &unk_250AD5950);
    v262 = (id)qword_256930000;
    if (!os_log_type_enabled(v262, OS_LOG_TYPE_INFO))
      goto LABEL_204;
    *(_WORD *)buf = 0;
    v263 = "HEIC Deserialization: Read camera.wideToDepthTransform field.";
  }
  else
  {
    v264 = v193[1];
    *(int8x16_t *)(a2 + 192) = *v193;
    *(int8x16_t *)(a2 + 208) = v264;
    v265 = v193[3];
    *(int8x16_t *)(a2 + 224) = v193[2];
    *(int8x16_t *)(a2 + 240) = v265;
    if (qword_256930008 != -1)
      dispatch_once(&qword_256930008, &unk_250AD5950);
    v262 = (id)qword_256930000;
    if (!os_log_type_enabled(v262, OS_LOG_TYPE_INFO))
      goto LABEL_204;
    *(_WORD *)buf = 0;
    v263 = "HEIC Deserialization: Cannot read camera wide to LiDAR camera transform internal metadata.";
  }
  _os_log_impl(&dword_239388000, v262, OS_LOG_TYPE_INFO, v263, buf, 2u);
LABEL_204:

  objc_msgSend_objectForKeyedSubscript_(v156, v266, (uint64_t)CFSTR("tag:apple.com,2023:ObjectCapture#TemporalDepthPointClouds"));
  v267 = (void *)objc_claimAutoreleasedReturnValue();

  if (v267)
  {
    v268 = (void *)MEMORY[0x24BDBCF20];
    v269 = objc_opt_class();
    v270 = objc_opt_class();
    v271 = objc_opt_class();
    v272 = objc_opt_class();
    v273 = objc_opt_class();
    objc_msgSend_setWithObjects_(v268, v274, v269, v270, v271, v272, v273, 0);
    v275 = objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(v156, v276, (uint64_t)CFSTR("tag:apple.com,2023:ObjectCapture#TemporalDepthPointClouds"));
    v277 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_unarchivedObjectOfClasses_fromData_error_(MEMORY[0x24BDD1620], v278, (uint64_t)v275, v277, 0);
    v279 = (id)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)(a2 + 424) = v279;
    if (qword_256930008 != -1)
      dispatch_once(&qword_256930008, &unk_250AD5950);
    v280 = (id)qword_256930000;
    if (os_log_type_enabled(v280, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_239388000, v280, OS_LOG_TYPE_INFO, "HEIC Deserialization: Read temporal LiDAR point clouds.", buf, 2u);
    }

  }
  else
  {
    *(_QWORD *)(a2 + 424) = 0;
    if (qword_256930008 != -1)
      dispatch_once(&qword_256930008, &unk_250AD5950);
    v275 = (id)qword_256930000;
    if (os_log_type_enabled(v275, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_239388000, v275, OS_LOG_TYPE_INFO, "HEIC Deserialization: Cannot read temporal LiDAR point clouds internal metadata.", buf, 2u);
    }
  }

  return 0;
}

void sub_23938BD48(_Unwind_Exception *exception_object, int a2)
{
  _QWORD *v2;
  id v3;

  if (a2 == 1)
  {
    v3 = objc_begin_catch(exception_object);
    sub_23938BDDC(v2);

    objc_end_catch();
    JUMPOUT(0x23938B804);
  }
  _Unwind_Resume(exception_object);
}

void sub_23938BDDC(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;

  v2 = (const void *)a1[22];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[49];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[51];
  if (v4)
    CFRelease(v4);
  v5 = (const void *)a1[53];
  if (v5)
    CFRelease(v5);
}

uint64_t OCNonModularSPI_ADJasperPointCloud_CreateDataBuffer(void *a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  __CVBuffer *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  id v13;
  const char *v14;
  void *v15;
  const char *v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  CFTypeRef cf;

  v1 = a1;
  v4 = v1;
  if (!v1)
    goto LABEL_11;
  if (objc_msgSend_dataBuffer(v1, v2, v3))
  {
    v7 = (__CVBuffer *)objc_msgSend_dataBuffer(v4, v5, v6);
    v8 = (uint64_t)CVBufferRetain(v7);
    goto LABEL_12;
  }
  v9 = objc_msgSend_length(v4, v5, v6);
  v11 = objc_msgSend_requiredStorageBytesForLength_(MEMORY[0x24BE05F78], v10, v9);
  cf = 0;
  if (sub_23938BFB0(1785950320, v11, (IOSurfaceRef *)&cf))
  {
LABEL_11:
    v8 = 0;
    goto LABEL_12;
  }
  if (CVDataBufferCreateWithIOSurface())
  {
    CFRelease(cf);
    goto LABEL_11;
  }
  CFRelease(cf);
  if ((objc_msgSend_prepareDataBuffer_forLength_(MEMORY[0x24BE05F78], v12, 0, v9) & 1) == 0)
  {
    CVBufferRelease(0);
    goto LABEL_11;
  }
  v13 = objc_alloc(MEMORY[0x24BE05F80]);
  v15 = (void *)objc_msgSend_initWithDataBuffer_(v13, v14, 0);
  v17 = v15;
  if (v15)
  {
    objc_msgSend_replacePointsInRange_withPointsFrom_range_(v15, v16, 0, (int)v9, v4, 0, (int)v9);
    v8 = objc_msgSend_dataBuffer(v17, v18, v19);

  }
  else
  {
    CVBufferRelease(0);
    v8 = 0;

  }
LABEL_12:

  return v8;
}

void sub_23938BF7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_23938BFB0(int a1, uint64_t a2, IOSurfaceRef *a3)
{
  uint64_t v3;
  int v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  CFTypeRef *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  const void **v18;
  CFNumberRef i;
  CFNumberRef v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  const void **v27;
  char *v28;
  unint64_t v29;
  const void **v30;
  const void *v31;
  uint64_t v32;
  _OWORD *v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  const __CFDictionary *v37;
  const __CFDictionary *v38;
  uint64_t v39;
  CFTypeRef *v40;
  uint64_t v41;
  CFTypeRef *v42;
  char *v45;
  const __CFAllocator *allocator;

  v3 = 4294960635;
  if (!a2 || !a3)
    return v3;
  v4 = a2;
  v5 = (const void *)*MEMORY[0x24BDD8EF8];
  v6 = (const void *)*MEMORY[0x24BDD8E18];
  v7 = (const void *)*MEMORY[0x24BDD8FD0];
  v8 = (const void *)*MEMORY[0x24BDD8EB0];
  v9 = (const void *)*MEMORY[0x24BDD8E38];
  v10 = (const void *)*MEMORY[0x24BDD8E30];
  v11 = (const void *)*MEMORY[0x24BDD8EA8];
  v12 = (const void *)*MEMORY[0x24BDD8EA0];
  v13 = (CFTypeRef *)operator new(0x40uLL);
  *v13 = v5;
  v13[1] = v6;
  v13[2] = v7;
  v13[3] = v8;
  v13[4] = v9;
  v13[5] = v10;
  v13[6] = v11;
  v13[7] = v12;
  v14 = (char *)operator new(0x20uLL);
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  *(_DWORD *)v14 = a1;
  *((_DWORD *)v14 + 1) = v4;
  *(_OWORD *)(v14 + 8) = xmmword_2393F5330;
  *((_QWORD *)v14 + 3) = 0x100000001;
  v45 = v14;
  allocator = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  for (i = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberIntType, v14);
        ;
        i = CFNumberCreate(allocator, kCFNumberIntType, &v14[4 * v15]))
  {
    v20 = i;
    if (!i)
    {
      CFRelease(*v13);
      CFRelease(v13[1]);
      CFRelease(v13[2]);
      CFRelease(v13[3]);
      CFRelease(v13[4]);
      CFRelease(v13[5]);
      CFRelease(v13[6]);
      CFRelease(v13[7]);
      if (v17 == (char *)v18)
        goto LABEL_64;
      v25 = 0;
      if ((unint64_t)((v17 - (char *)v18) >> 3) <= 1)
        v26 = 1;
      else
        v26 = (v17 - (char *)v18) >> 3;
      do
        CFRelease(v18[v25++]);
      while (v26 != v25);
      v27 = v18;
      v28 = v17;
      goto LABEL_32;
    }
    if (v17 < v16)
    {
      *(_QWORD *)v17 = i;
      v17 += 8;
      goto LABEL_5;
    }
    v21 = (v17 - (char *)v18) >> 3;
    v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) >> 61)
      abort();
    if ((v16 - (char *)v18) >> 2 > v22)
      v22 = (v16 - (char *)v18) >> 2;
    if ((unint64_t)(v16 - (char *)v18) >= 0x7FFFFFFFFFFFFFF8)
      v23 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v23 = v22;
    if (v23)
    {
      if (v23 >> 61)
        sub_23938C4B8();
      v24 = operator new(8 * v23);
    }
    else
    {
      v24 = 0;
    }
    v27 = (const void **)&v24[8 * v21];
    *v27 = v20;
    v28 = (char *)(v27 + 1);
    if (v17 != (char *)v18)
    {
      v29 = v17 - 8 - (char *)v18;
      if (v29 >= 0x168)
      {
        if (&v24[v17 - (char *)v18 - 8 - (v29 & 0xFFFFFFFFFFFFFFF8)] > &v24[v17 - (char *)v18 - 8])
        {
          v30 = (const void **)v17;
        }
        else if (&v17[-(v29 & 0xFFFFFFFFFFFFFFF8) - 8] > v17 - 8)
        {
          v30 = (const void **)v17;
        }
        else if ((unint64_t)((char *)v18 - v24) >= 0x20)
        {
          v32 = (v29 >> 3) + 1;
          v30 = (const void **)&v17[-8 * (v32 & 0x3FFFFFFFFFFFFFFCLL)];
          v33 = &v24[8 * v21 - 16];
          v34 = v17 - 16;
          v35 = v32 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v36 = *(_OWORD *)v34;
            *(v33 - 1) = *((_OWORD *)v34 - 1);
            *v33 = v36;
            v33 -= 2;
            v34 -= 32;
            v35 -= 4;
          }
          while (v35);
          v27 -= v32 & 0x3FFFFFFFFFFFFFFCLL;
          if (v32 == (v32 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_29;
        }
        else
        {
          v30 = (const void **)v17;
        }
      }
      else
      {
        v30 = (const void **)v17;
      }
      do
      {
        v31 = *--v30;
        *--v27 = v31;
      }
      while (v30 != v18);
LABEL_29:
      v17 = (char *)v18;
    }
    v16 = &v24[8 * v23];
    if (v17)
      operator delete(v17);
LABEL_32:
    if (!v20)
    {
      v3 = 4294960634;
      v14 = v45;
      goto LABEL_65;
    }
    v17 = v28;
    v18 = v27;
    v14 = v45;
LABEL_5:
    if (++v15 == 8)
      break;
  }
  v37 = CFDictionaryCreate(allocator, v13, v18, 8, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v38 = v37;
  if (!v37)
  {
    CFRelease(*v13);
    CFRelease(v13[1]);
    CFRelease(v13[2]);
    CFRelease(v13[3]);
    CFRelease(v13[4]);
    CFRelease(v13[5]);
    CFRelease(v13[6]);
    CFRelease(v13[7]);
    if (v17 == (char *)v18)
    {
LABEL_64:
      v3 = 4294960634;
      v27 = (const void **)v17;
      if (!v17)
        goto LABEL_66;
    }
    else
    {
      if ((unint64_t)((v17 - (char *)v18) >> 3) <= 1)
        v41 = 1;
      else
        v41 = (v17 - (char *)v18) >> 3;
      v42 = v18;
      do
      {
        CFRelease(*v42++);
        --v41;
      }
      while (v41);
      v3 = 4294960634;
      v27 = v18;
    }
LABEL_65:
    operator delete(v27);
    goto LABEL_66;
  }
  *a3 = IOSurfaceCreate(v37);
  CFRelease(v38);
  CFRelease(*v13);
  CFRelease(v13[1]);
  CFRelease(v13[2]);
  CFRelease(v13[3]);
  CFRelease(v13[4]);
  CFRelease(v13[5]);
  CFRelease(v13[6]);
  CFRelease(v13[7]);
  if (v17 != (char *)v18)
  {
    if ((unint64_t)((v17 - (char *)v18) >> 3) <= 1)
      v39 = 1;
    else
      v39 = (v17 - (char *)v18) >> 3;
    v40 = v18;
    do
    {
      CFRelease(*v40++);
      --v39;
    }
    while (v39);
  }
  if (*a3)
    v3 = 0;
  else
    v3 = 4294960634;
  v27 = v18;
  if (v18)
    goto LABEL_65;
LABEL_66:
  operator delete(v14);
  operator delete(v13);
  return v3;
}

void sub_23938C454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  void *v11;

  operator delete(v11);
  _Unwind_Resume(a1);
}

void sub_23938C4B8()
{
  abort();
}

id OCNonModularSPI_ADJasperPointCloud_CreatePointCloud(void *a1)
{
  uint64_t v1;
  id v2;
  const char *v3;

  if (a1)
  {
    v1 = (uint64_t)a1;
    v2 = objc_alloc(MEMORY[0x24BE05F78]);
    a1 = (void *)objc_msgSend_initWithDataBuffer_(v2, v3, v1);
  }
  return a1;
}

uint64_t *sub_23938C4F8(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v3 = *a1;
    v2 = (uint64_t *)a1[1];
    v4 = *v2;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v3 + 8) = v4;
    a1[2] = 0;
    if (v2 != a1)
    {
      do
      {
        v5 = (uint64_t *)v2[1];
        operator delete(v2);
        v2 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

_QWORD *sub_23938C558(uint64_t a1, int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = (_QWORD *)(a1 + 16);
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v10[4] = 0;
  v10[5] = 0;
  v10[3] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = v18;
    else
      prime = v17;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_34;
    if (prime < v7)
    {
      v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v21 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        v20 = std::__next_prime(v20);
      }
      else
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
      }
      if (prime <= v20)
        prime = v20;
      if (prime < v7)
LABEL_34:
        sub_23938C8F4(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v24)
  {
    *v10 = *v24;
LABEL_58:
    *v24 = v10;
    goto LABEL_59;
  }
  *v10 = *v13;
  *v13 = v10;
  *(_QWORD *)(v23 + 8 * v3) = v13;
  if (*v10)
  {
    v25 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v25 >= v7)
        v25 %= v7;
    }
    else
    {
      v25 &= v7 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_23938C840(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23938CA94((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23938C854(_QWORD *a1)
{
  if (a1)
  {
    sub_23938C854(*a1);
    sub_23938C854(a1[1]);
    operator delete(a1);
  }
}

uint64_t sub_23938C88C(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  void *v6;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = (void *)v2[3];
      if (v6)
      {
        v2[4] = v6;
        operator delete(v6);
      }
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void sub_23938C8F4(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;

  if (!a2)
  {
    v15 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v15)
      operator delete(v15);
    *(_QWORD *)(a1 + 8) = 0;
    return;
  }
  if (a2 >> 61)
    sub_23938C4B8();
  v4 = operator new(8 * a2);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v6 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
  while (a2 != v6);
  v8 = a1 + 16;
  v7 = *(_QWORD **)(a1 + 16);
  if (v7)
  {
    v9 = v7[1];
    v10 = a2 - 1;
    if ((a2 & (a2 - 1)) == 0)
    {
      v11 = v9 & v10;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = v8;
      while (1)
      {
        v12 = (_QWORD *)*v7;
        if (!*v7)
          break;
        v13 = v12[1] & v10;
        if (v13 == v11)
        {
          v7 = (_QWORD *)*v7;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
        {
          *v7 = *v12;
          v14 = 8 * v13;
          *v12 = **(_QWORD **)(*(_QWORD *)a1 + v14);
          **(_QWORD **)(*(_QWORD *)a1 + v14) = v12;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
          v7 = v12;
          v11 = v13;
        }
      }
      return;
    }
    if (v9 >= a2)
      v9 %= a2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = v8;
    v16 = (_QWORD *)*v7;
    if (*v7)
    {
      do
      {
        v18 = v16[1];
        if (v18 >= a2)
          v18 %= a2;
        if (v18 != v9)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v18))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = v7;
            goto LABEL_26;
          }
          *v7 = *v16;
          v17 = 8 * v18;
          *v16 = **(_QWORD **)(*(_QWORD *)a1 + v17);
          **(_QWORD **)(*(_QWORD *)a1 + v17) = v16;
          v16 = v7;
        }
        v18 = v9;
LABEL_26:
        v7 = v16;
        v16 = (_QWORD *)*v16;
        v9 = v18;
      }
      while (v16);
    }
  }
}

uint64_t sub_23938CA94(uint64_t a1)
{
  _QWORD *v2;
  void *v3;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (void *)v2[3];
      if (v3)
      {
        v2[4] = v3;
        operator delete(v3);
      }
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t *sub_23938CAE0(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = a2[2];
      if (*(_BYTE *)(v2 + 24))
        break;
      v3 = *(uint64_t **)(v2 + 16);
      v4 = *v3;
      if (*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if (*(uint64_t **)v2 == a2)
          {
            v9 = (uint64_t *)a2[2];
          }
          else
          {
            v9 = *(uint64_t **)(v2 + 8);
            v10 = *v9;
            *(_QWORD *)(v2 + 8) = *v9;
            if (v10)
            {
              *(_QWORD *)(v10 + 16) = v2;
              v3 = *(uint64_t **)(v2 + 16);
            }
            v9[2] = (uint64_t)v3;
            *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = v9;
            *v9 = v2;
            *(_QWORD *)(v2 + 16) = v9;
            v3 = (uint64_t *)v9[2];
            v2 = *v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v14 = *(_QWORD *)(v2 + 8);
          *v3 = v14;
          if (v14)
            *(_QWORD *)(v14 + 16) = v3;
          *(_QWORD *)(v2 + 16) = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          *(_QWORD *)(v2 + 8) = v3;
          v3[2] = v2;
          return result;
        }
      }
      else if (!v4 || (v6 = *(unsigned __int8 *)(v4 + 24), v5 = (_BYTE *)(v4 + 24), v6))
      {
        if (*(uint64_t **)v2 == a2)
        {
          v11 = a2[1];
          *(_QWORD *)v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = *(uint64_t **)(v2 + 16);
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = a2;
          a2[1] = v2;
          *(_QWORD *)(v2 + 16) = a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v12 = (uint64_t *)v3[1];
        v13 = *v12;
        v3[1] = *v12;
        if (v13)
          *(_QWORD *)(v13 + 16) = v3;
        v12[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v12;
        *v12 = (uint64_t)v3;
        v3[2] = (uint64_t)v12;
        return result;
      }
      *(_BYTE *)(v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t OCObjectContourGetCenterOfMass(char *a1, unint64_t a2, float32x2_t *a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v7;
  float32x2_t *v8;
  unint64_t v9;
  uint64_t v10;
  float32x2_t *v11;
  uint64_t v12;
  float32x2_t v13;
  int32x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x2_t *v19;
  float32x2_t v20;
  float32x2_t v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t v29;

  v3 = 4294967294;
  if (a1)
  {
    v4 = a2;
    if (a2 >= 3)
    {
      if (a3)
      {
        if ((a2 & 0x8000000000000000) != 0)
          abort();
        v7 = 8 * a2;
        v8 = (float32x2_t *)operator new(8 * a2);
        memcpy(v8, a1, 8 * v4);
        v9 = 0x1FFFFFFFFFFFFFFFLL;
        if (v4 >= 0x1FFFFFFFFFFFFFFFLL)
          abort();
        if (2 * v4 <= v4 + 1)
          v10 = v4 + 1;
        else
          v10 = 2 * v4;
        if (v7 < 0x7FFFFFFFFFFFFFF8)
          v9 = v10;
        if (v9 >> 61)
          sub_23938C4B8();
        v11 = (float32x2_t *)operator new(8 * v9);
        v11[v4] = *v8;
        memcpy(v11, a1, 8 * v4);
        operator delete(v8);
        v12 = 0;
        v13 = *v11;
        v14.i32[0] = 0;
        v15 = 0;
        v16 = *v11;
        do
        {
          v17 = vsub_f32(v16, v11[v12 + 1]);
          v17.f32[0] = sqrtf(vaddv_f32(vmul_f32(v17, v17)));
          *(float *)v14.i32 = *(float *)v14.i32 + v17.f32[0];
          v15 = vmla_n_f32(v15, *(float32x2_t *)&a1[8 * v12], v17.f32[0]);
          v16 = v11[++v12];
        }
        while (v4 != v12);
        if (*(float *)v14.i32 >= 1.0e-10)
        {
          v18 = vdiv_f32(v15, (float32x2_t)vdup_lane_s32(v14, 0));
          v19 = v11 + 1;
          v15.i32[0] = 0;
          v20 = 0;
          __asm { FMOV            V4.2S, #3.0 }
          do
          {
            v26 = *v19++;
            v27 = vdiv_f32(vadd_f32(v18, vadd_f32(v13, v26)), _D4);
            v28 = vsub_f32(v13, v18);
            v29 = vsub_f32(v26, v18);
            v28.f32[0] = fabsf(vmlas_n_f32((float)-v28.f32[1] * v29.f32[0], v29.f32[1], v28.f32[0]));
            v20 = vmla_n_f32(v20, v27, v28.f32[0]);
            v15.f32[0] = v15.f32[0] + v28.f32[0];
            v13 = v26;
            --v4;
          }
          while (v4);
          if (v15.f32[0] > 0.0)
            v18 = vdiv_f32(v20, (float32x2_t)vdup_lane_s32((int32x2_t)v15, 0));
          v3 = 0;
          *a3 = v18;
        }
        else
        {
          v3 = 0xFFFFFFFFLL;
        }
        operator delete(v11);
      }
    }
  }
  return v3;
}

void sub_23938CE40(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t OCObjectContourGetNearestPoints(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, float32x2_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  float v8;
  float32x2_t v9;
  float v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v5 = 4294967294;
  if (!a1 || !a2 || !a3 || !a4)
    return v5;
  v6 = 0;
  v7 = 0;
  v8 = 3.4028e38;
  do
  {
    v9 = vsub_f32(*(float32x2_t *)(a1 + 8 * v6), a5);
    v10 = sqrtf(vaddv_f32(vmul_f32(v9, v9)));
    if (vabds_f32(v8, v10) < 1.0e-10)
    {
      v11 = v7 + 1;
      if (v7 + 1 <= 1)
      {
        v12 = &a3[v7];
        goto LABEL_6;
      }
      goto LABEL_7;
    }
    if (v10 < v8)
    {
      v12 = a3;
      v8 = v10;
      v11 = 1;
LABEL_6:
      *v12 = v6;
LABEL_7:
      v7 = v11;
    }
    ++v6;
  }
  while (a2 != v6);
  v5 = 0;
  v13 = 2;
  if (v7 < 2)
    v13 = v7;
  *a4 = v13;
  return v5;
}

BOOL OCObjectContourIsPointInsideObjectContour(uint64_t a1, unint64_t a2, float32x2_t a3)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  float32x2_t v7;
  float32x2_t v8;
  unint64_t v9;

  v3 = 0;
  if (a1 && a2 >= 3)
  {
    for (i = 0; a2 != i; ++i)
    {
      v5 = i + 1;
      if (a2 - 1 == i)
        v6 = 0;
      else
        v6 = i + 1;
      v7 = vsub_f32(*(float32x2_t *)(a1 + 8 * i), a3);
      v8 = vsub_f32(*(float32x2_t *)(a1 + 8 * v6), a3);
      if (vmlas_n_f32((float)-v7.f32[1] * v8.f32[0], v8.f32[1], v7.f32[0]) < 1.0e-10)
      {
        v9 = v5 - 1;
        return v9 >= a2;
      }
    }
    v9 = a2;
    return v9 >= a2;
  }
  return v3;
}

uint64_t OCCreateObjectContour(uint64_t a1, unint64_t a2, _QWORD *a3, unint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  float v16;
  int *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  float32x2_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  uint8x8_t v26;
  unint64_t v27;
  uint64_t **v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  __int128 v34;
  uint8x8_t v35;
  uint64_t **v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  float v41;
  _BOOL8 v42;
  unint64_t v43;
  unint64_t v44;
  size_t prime;
  unint64_t v46;
  uint8x8_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  _BYTE *v59;
  void *v60;
  _QWORD *v61;
  _QWORD *v62;
  unint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  uint64_t v66;
  _OWORD *v67;
  char *v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t **v73;
  _QWORD *v74;
  uint64_t **v75;
  uint64_t *v76;
  uint64_t **v77;
  BOOL v78;
  int v79;
  uint64_t **v80;
  uint64_t **v81;
  _DWORD *v82;
  int v83;
  uint64_t **v84;
  int8x8_t v85;
  unint64_t v86;
  uint8x8_t v87;
  unint64_t v88;
  uint64_t **v89;
  uint64_t *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t *v95;
  uint64_t *v96;
  _QWORD *v97;
  unint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t *v101;
  uint64_t **v102;
  uint64_t *v103;
  uint64_t **v104;
  _QWORD *v105;
  _QWORD *v106;
  unint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  _QWORD *v110;
  void *v111;
  _QWORD *v112;
  char *v113;
  void **v114;
  _QWORD *v115;
  void **v116;
  unint64_t v117;
  void **v118;
  unint64_t v119;
  char *v120;
  void **v121;
  char *v122;
  uint64_t v123;
  _QWORD *v124;
  void *v125;
  _QWORD *v126;
  _QWORD *v127;
  _QWORD *v128;
  float32x2_t v129;
  float32x2_t *v130;
  float32x2_t v131;
  float32x2_t v132;
  uint64_t v133;
  _QWORD **v134;
  _QWORD *v135;
  void **v136;
  _QWORD *v137;
  _QWORD *v138;
  uint64_t v139;
  _QWORD *v140;
  unint64_t v141;
  char *v142;
  uint64_t v143;
  unint64_t *v144;
  int *v145;
  _QWORD *v146;
  int *__p;
  unint64_t v148;
  __int128 v149;
  _QWORD *v150;
  _QWORD *v151;
  unint64_t v152;
  int v153;
  void *v154[2];
  void *v155[2];
  float v156;
  uint64_t **v157;
  uint64_t *v158;
  uint64_t v159;

  result = 4294967294;
  if (!a1 || a2 < 3 || !a3 || !a4)
    return result;
  if (a2 >> 61)
    abort();
  v9 = 8 * a2;
  v10 = (char *)operator new(8 * a2);
  bzero(v10, 8 * a2);
  v11 = 0;
  do
  {
    *(_QWORD *)&v10[8 * v11] = *(_QWORD *)(a1 + 8 * v11);
    ++v11;
  }
  while (a2 != v11);
  if (a2 <= 2)
  {
    *a4 = 0;
    goto LABEL_236;
  }
  v146 = a3;
  v144 = a4;
  v12 = 0;
  v13 = v9 >> 3;
  if ((unint64_t)(v9 >> 3) <= 1)
    v14 = 1;
  else
    v14 = v9 >> 3;
  v15 = -1;
  v16 = 3.4028e38;
  do
  {
    if (v16 > COERCE_FLOAT(*(_QWORD *)&v10[8 * v12]))
    {
      v15 = v12;
      LODWORD(v16) = *(_QWORD *)&v10[8 * v12];
    }
    ++v12;
  }
  while (v14 != v12);
  v150 = &v150;
  v151 = &v150;
  v152 = 0;
  *(_OWORD *)v154 = 0u;
  *(_OWORD *)v155 = 0u;
  v156 = 1.0;
  if (v9 < 0)
    abort();
  v17 = (int *)operator new(4 * a2);
  v18 = v15;
  memset_pattern16(v17, &unk_2393F55C0, v9 >> 1);
  v19 = 0;
  v20 = 0;
  __p = v17;
  v145 = &v17[v13];
  v148 = v18;
  while (2)
  {
    if (v18 == (int)v20)
      goto LABEL_22;
    v22 = vsub_f32(*(float32x2_t *)&v10[8 * v20], *(float32x2_t *)&v10[8 * v18]);
    v23 = (int)(float)((float)((float)(atan2f(v22.f32[1], v22.f32[0]) / 1.5708) * 2147500000.0) * 0.9999);
    v153 = v23;
    v17[v19] = v23;
    v24 = v23;
    v25 = (unint64_t)v154[1];
    if (v154[1])
    {
      v26 = (uint8x8_t)vcnt_s8((int8x8_t)v154[1]);
      v26.i16[0] = vaddlv_u8(v26);
      if (v26.u32[0] > 1uLL)
      {
        v27 = v23;
        if (v154[1] <= (void *)v23)
          v27 = v23 % (unint64_t)v154[1];
      }
      else
      {
        v27 = ((unint64_t)v154[1] - 1) & v23;
      }
      v28 = (uint64_t **)*((_QWORD *)v154[0] + v27);
      if (v28)
      {
        v29 = *v28;
        if (v29)
        {
          if (v26.u32[0] < 2uLL)
          {
            while (1)
            {
              v30 = v29[1];
              if (v30 == v23)
              {
                if (*((_DWORD *)v29 + 4) == v23)
                  goto LABEL_83;
              }
              else if ((v30 & ((uint64_t)v154[1] - 1)) != v27)
              {
                goto LABEL_44;
              }
              v29 = (uint64_t *)*v29;
              if (!v29)
                goto LABEL_44;
            }
          }
          do
          {
            v31 = v29[1];
            if (v31 == v23)
            {
              if (*((_DWORD *)v29 + 4) == v23)
              {
LABEL_83:
                v49 = sub_23938C558((uint64_t)v154, v23, &v153);
                v50 = v49;
                v52 = (char *)v49[4];
                v51 = v49[5];
                if ((unint64_t)v52 < v51)
                {
                  *(_QWORD *)v52 = v20;
                  v21 = v52 + 8;
                  v17 = __p;
                }
                else
                {
                  v53 = (char *)v49[3];
                  v54 = (v52 - v53) >> 3;
                  v55 = v54 + 1;
                  if ((unint64_t)(v54 + 1) >> 61)
                    abort();
                  v56 = v51 - (_QWORD)v53;
                  if (v56 >> 2 > v55)
                    v55 = v56 >> 2;
                  if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8)
                    v57 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v57 = v55;
                  if (v57)
                  {
                    if (v57 >> 61)
                      sub_23938C4B8();
                    v58 = v57;
                    v59 = operator new(8 * v57);
                    v57 = v58;
                  }
                  else
                  {
                    v59 = 0;
                  }
                  v64 = &v59[8 * v54];
                  *v64 = v20;
                  v21 = v64 + 1;
                  if (v52 == v53)
                  {
                    v17 = __p;
                  }
                  else
                  {
                    v65 = v52 - 8 - v53;
                    if (v65 < 0x58)
                    {
                      v17 = __p;
                      goto LABEL_124;
                    }
                    v17 = __p;
                    if ((unint64_t)(v53 - v59) < 0x20)
                      goto LABEL_245;
                    v66 = (v65 >> 3) + 1;
                    v67 = &v59[8 * v54 - 16];
                    v68 = v52 - 16;
                    v69 = v66 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v70 = *(_OWORD *)v68;
                      *(v67 - 1) = *((_OWORD *)v68 - 1);
                      *v67 = v70;
                      v67 -= 2;
                      v68 -= 32;
                      v69 -= 4;
                    }
                    while (v69);
                    v64 -= v66 & 0x3FFFFFFFFFFFFFFCLL;
                    v52 -= 8 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
                    if (v66 != (v66 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_245:
                      do
                      {
LABEL_124:
                        v71 = *((_QWORD *)v52 - 1);
                        v52 -= 8;
                        *--v64 = v71;
                      }
                      while (v52 != v53);
                    }
                  }
                  v50[3] = v64;
                  v50[4] = v21;
                  v50[5] = &v59[8 * v57];
                  if (v53)
                    operator delete(v53);
                }
                v50[4] = v21;
                v18 = v148;
                goto LABEL_21;
              }
            }
            else
            {
              if ((void *)v31 >= v154[1])
                v31 %= (unint64_t)v154[1];
              if (v31 != v27)
                break;
            }
            v29 = (uint64_t *)*v29;
          }
          while (v29);
        }
      }
    }
LABEL_44:
    v32 = operator new(8uLL);
    *v32 = v20;
    v33 = v32 + 1;
    *(_QWORD *)&v34 = v32;
    *((_QWORD *)&v34 + 1) = v32 + 1;
    v149 = v34;
    if (!v25)
      goto LABEL_64;
    v35 = (uint8x8_t)vcnt_s8((int8x8_t)v25);
    v35.i16[0] = vaddlv_u8(v35);
    if (v35.u32[0] > 1uLL)
    {
      v18 = v23;
      if (v25 <= v23)
        v18 = v23 % v25;
    }
    else
    {
      v18 = (v25 - 1) & v23;
    }
    v36 = (uint64_t **)*((_QWORD *)v154[0] + v18);
    if (!v36 || (v37 = *v36) == 0)
    {
LABEL_64:
      v40 = (char *)operator new(0x30uLL);
      v157 = (uint64_t **)v40;
      v158 = (uint64_t *)v155;
      *(_QWORD *)v40 = 0;
      *((_QWORD *)v40 + 1) = v23;
      *((_DWORD *)v40 + 4) = v23;
      *(_OWORD *)(v40 + 24) = v149;
      *((_QWORD *)v40 + 5) = v33;
      LOBYTE(v159) = 1;
      v41 = (float)((unint64_t)v155[1] + 1);
      if (!v25 || (float)(v156 * (float)v25) < v41)
      {
        v42 = (v25 & (v25 - 1)) != 0;
        if (v25 < 3)
          v42 = 1;
        v43 = v42 | (2 * v25);
        v44 = vcvtps_u32_f32(v41 / v156);
        if (v43 <= v44)
          prime = v44;
        else
          prime = v43;
        if (prime == 1)
        {
          prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          prime = std::__next_prime(prime);
          v25 = (unint64_t)v154[1];
        }
        if (prime > v25)
          goto LABEL_76;
        if (prime < v25)
        {
          v46 = vcvtps_u32_f32((float)(unint64_t)v155[1] / v156);
          if (v25 < 3 || (v47 = (uint8x8_t)vcnt_s8((int8x8_t)v25), v47.i16[0] = vaddlv_u8(v47), v47.u32[0] > 1uLL))
          {
            v46 = std::__next_prime(v46);
          }
          else
          {
            v48 = 1 << -(char)__clz(v46 - 1);
            if (v46 >= 2)
              v46 = v48;
          }
          if (prime <= v46)
            prime = v46;
          if (prime < v25)
LABEL_76:
            sub_23938C8F4((uint64_t)v154, prime);
        }
        v25 = (unint64_t)v154[1];
        if (((unint64_t)v154[1] & ((unint64_t)v154[1] - 1)) != 0)
        {
          if (v154[1] <= (void *)v24)
            v18 = v24 % (unint64_t)v154[1];
          else
            v18 = v24;
        }
        else
        {
          v18 = ((unint64_t)v154[1] - 1) & v24;
        }
      }
      v61 = v154[0];
      v62 = (_QWORD *)*((_QWORD *)v154[0] + v18);
      if (v62)
      {
        *(_QWORD *)v40 = *v62;
        v18 = v148;
      }
      else
      {
        *(void **)v40 = v155[0];
        v155[0] = v40;
        v61[v18] = v155;
        v18 = v148;
        if (!*(_QWORD *)v40)
        {
LABEL_112:
          ++v155[1];
          v60 = 0;
          goto LABEL_113;
        }
        v63 = *(_QWORD *)(*(_QWORD *)v40 + 8);
        if ((v25 & (v25 - 1)) != 0)
        {
          if (v63 >= v25)
            v63 %= v25;
        }
        else
        {
          v63 &= v25 - 1;
        }
        v62 = (char *)v154[0] + 8 * v63;
      }
      *v62 = v40;
      goto LABEL_112;
    }
    if (v35.u32[0] < 2uLL)
    {
      while (1)
      {
        v39 = v37[1];
        if (v39 == v23)
        {
          if (*((_DWORD *)v37 + 4) == v23)
            goto LABEL_93;
        }
        else if ((v39 & (v25 - 1)) != v18)
        {
          goto LABEL_64;
        }
        v37 = (uint64_t *)*v37;
        if (!v37)
          goto LABEL_64;
      }
    }
    while (1)
    {
      v38 = v37[1];
      if (v38 == v23)
        break;
      if (v38 >= v25)
        v38 %= v25;
      if (v38 != v18)
        goto LABEL_64;
LABEL_54:
      v37 = (uint64_t *)*v37;
      if (!v37)
        goto LABEL_64;
    }
    if (*((_DWORD *)v37 + 4) != v23)
      goto LABEL_54;
LABEL_93:
    v18 = v148;
    v60 = (void *)v149;
LABEL_113:
    v17 = __p;
    if (v60)
      operator delete(v60);
LABEL_21:
    ++v19;
LABEL_22:
    if (++v20 < v13)
      continue;
    break;
  }
  v72 = 0;
  v158 = 0;
  v159 = 0;
  v157 = &v158;
  v73 = &v158;
  v74 = v146;
  while (1)
  {
    v75 = &v158;
    if (v73 == &v158)
      goto LABEL_134;
    v76 = v72;
    v77 = &v158;
    if (v72)
    {
      do
      {
        v75 = (uint64_t **)v76;
        v76 = (uint64_t *)v76[1];
      }
      while (v76);
    }
    else
    {
      do
      {
        v75 = (uint64_t **)v77[2];
        v78 = *v75 == (uint64_t *)v77;
        v77 = v75;
      }
      while (v78);
    }
    v79 = *v17;
    if (*((_DWORD *)v75 + 7) < *v17)
    {
LABEL_134:
      v80 = v72 ? v75 : &v158;
      v81 = v72 ? v75 + 1 : &v158;
    }
    else
    {
      v80 = &v158;
      v81 = &v158;
      if (v72)
      {
        v81 = &v158;
        while (1)
        {
          while (1)
          {
            v80 = (uint64_t **)v72;
            v83 = *((_DWORD *)v72 + 7);
            if (v79 >= v83)
              break;
            v72 = *v80;
            v81 = v80;
            if (!*v80)
              goto LABEL_141;
          }
          if (v83 >= v79)
            break;
          v81 = v80 + 1;
          v72 = v80[1];
          if (!v72)
            goto LABEL_141;
        }
      }
    }
    if (!*v81)
    {
LABEL_141:
      v82 = operator new(0x20uLL);
      v82[7] = *v17;
      *(_QWORD *)v82 = 0;
      *((_QWORD *)v82 + 1) = 0;
      *((_QWORD *)v82 + 2) = v80;
      *v81 = (uint64_t *)v82;
      if (*v157)
      {
        v157 = (uint64_t **)*v157;
        v82 = *v81;
      }
      sub_23938CAE0(v158, (uint64_t *)v82);
      ++v159;
    }
    if (++v17 == v145)
      break;
    v73 = v157;
    v72 = v158;
  }
  v84 = v157;
  if (v157 != &v158)
  {
    v85 = (int8x8_t)v154[1];
    if (v154[1])
    {
      while (1)
      {
        v86 = *((int *)v84 + 7);
        v153 = *((_DWORD *)v84 + 7);
        if (v85)
        {
          v87 = (uint8x8_t)vcnt_s8(v85);
          v87.i16[0] = vaddlv_u8(v87);
          if (v87.u32[0] > 1uLL)
          {
            v88 = v86;
            if (*(_QWORD *)&v85 <= v86)
              v88 = v86 % *(_QWORD *)&v85;
          }
          else
          {
            v88 = (*(_QWORD *)&v85 - 1) & v86;
          }
          v89 = (uint64_t **)*((_QWORD *)v154[0] + v88);
          if (v89)
          {
            v90 = *v89;
            if (v90)
            {
              if (v87.u32[0] < 2uLL)
              {
                v91 = *(_QWORD *)&v85 - 1;
                while (1)
                {
                  v93 = v90[1];
                  if (v93 == v86)
                  {
                    if (*((_DWORD *)v90 + 4) == (_DWORD)v86)
                      goto LABEL_176;
                  }
                  else if ((v93 & v91) != v88)
                  {
                    goto LABEL_179;
                  }
                  v90 = (uint64_t *)*v90;
                  if (!v90)
                    goto LABEL_179;
                }
              }
              do
              {
                v92 = v90[1];
                if (v92 == v86)
                {
                  if (*((_DWORD *)v90 + 4) == (_DWORD)v86)
                  {
LABEL_176:
                    v94 = sub_23938C558((uint64_t)v154, v86, &v153);
                    v95 = (uint64_t *)v94[3];
                    v96 = (uint64_t *)v94[4];
                    if (v95 != v96)
                    {
                      v97 = v150;
                      v98 = v152 + 1;
                      do
                      {
                        v99 = *v95;
                        v100 = operator new(0x18uLL);
                        v100[2] = *(_QWORD *)&v10[8 * v99];
                        *v100 = v97;
                        v100[1] = &v150;
                        v97[1] = v100;
                        v150 = v100;
                        v152 = v98;
                        ++v95;
                        ++v98;
                        v97 = v100;
                      }
                      while (v95 != v96);
                    }
                    break;
                  }
                }
                else
                {
                  if (v92 >= *(_QWORD *)&v85)
                    v92 %= *(_QWORD *)&v85;
                  if (v92 != v88)
                    break;
                }
                v90 = (uint64_t *)*v90;
              }
              while (v90);
            }
          }
        }
LABEL_179:
        v101 = v84[1];
        if (v101)
        {
          do
          {
            v102 = (uint64_t **)v101;
            v101 = (uint64_t *)*v101;
          }
          while (v101);
        }
        else
        {
          do
          {
            v102 = (uint64_t **)v84[2];
            v78 = *v102 == (uint64_t *)v84;
            v84 = v102;
          }
          while (!v78);
        }
        v18 = v148;
        if (v102 == &v158)
          break;
        v85 = (int8x8_t)v154[1];
        v84 = v102;
      }
    }
    else
    {
      do
      {
        v103 = v84[1];
        if (v103)
        {
          do
          {
            v104 = (uint64_t **)v103;
            v103 = (uint64_t *)*v103;
          }
          while (v103);
        }
        else
        {
          do
          {
            v104 = (uint64_t **)v84[2];
            v78 = *v104 == (uint64_t *)v84;
            v84 = v104;
          }
          while (!v78);
        }
        v84 = v104;
      }
      while (v104 != &v158);
    }
  }
  v105 = operator new(0x18uLL);
  v105[2] = *(_QWORD *)&v10[8 * v18];
  v106 = v151;
  *v105 = &v150;
  v105[1] = v106;
  *v106 = v105;
  v107 = v152;
  v151 = v105;
  ++v152;
  v108 = operator new(0x18uLL);
  v108[2] = *(_QWORD *)&v10[8 * v18];
  v109 = v150;
  *v108 = v150;
  v108[1] = &v150;
  v109[1] = v108;
  v150 = v108;
  v152 = v107 + 2;
  sub_23938C854(v158);
  operator delete(__p);
  v110 = v155[0];
  if (v155[0])
  {
    do
    {
      v124 = (_QWORD *)*v110;
      v125 = (void *)v110[3];
      if (v125)
      {
        v110[4] = v125;
        operator delete(v125);
      }
      operator delete(v110);
      v110 = v124;
    }
    while (v124);
  }
  v111 = v154[0];
  v154[0] = 0;
  if (v111)
    operator delete(v111);
  if (v152)
  {
    v154[0] = v154;
    v154[1] = v154;
    v155[0] = 0;
    v112 = v151;
    if (v152 > 3)
    {
      if (v151 == &v150)
        goto LABEL_220;
      v113 = 0;
      do
      {
        v126 = operator new(0x18uLL);
        v126[2] = v112[2];
        v127 = v154[0];
        *v126 = v154[0];
        v126[1] = v154;
        v127[1] = v126;
        ++v113;
        v154[0] = v126;
        v155[0] = v113;
        if ((unint64_t)v113 >= 3)
        {
          do
          {
            v128 = *(_QWORD **)v154[0];
            v129 = *(float32x2_t *)(*(_QWORD *)v154[0] + 16);
            v130 = **(float32x2_t ***)v154[0];
            v131 = vsub_f32(v129, v130[2]);
            v132 = vsub_f32(*(float32x2_t *)((char *)v154[0] + 16), v129);
            if (vmlas_n_f32((float)-v131.f32[1] * v132.f32[0], v132.f32[1], v131.f32[0]) > 0.0)
              break;
            v130[1] = (float32x2_t)v128[1];
            *(_QWORD *)v128[1] = v130;
            v155[0] = v113 - 1;
            operator delete(v128);
            v113 = (char *)v155[0];
          }
          while (v155[0] >= (void *)3);
        }
        v112 = (_QWORD *)v112[1];
      }
      while (v112 != &v150);
LABEL_201:
      if (v113)
      {
        v116 = (void **)v154[1];
        if (v154[1] == v154)
        {
          v113 = 0;
          v123 = 0;
        }
        else
        {
          v117 = -1;
          v118 = (void **)v154[1];
          do
          {
            v119 = v117;
            v118 = (void **)v118[1];
            ++v117;
          }
          while (v118 != v154);
          if (v117 >= 0x1FFFFFFFFFFFFFFFLL)
            abort();
          v120 = (char *)operator new(8 * (v119 + 2));
          v113 = v120;
          v121 = v116;
          v122 = v120;
          do
          {
            *(_QWORD *)v122 = v121[2];
            v122 += 8;
            v121 = (void **)v121[1];
          }
          while (v121 != v154);
          v123 = (v122 - v120) >> 3;
        }
        v133 = (uint64_t)&v113[8 * v123 - 8];
        v134 = (_QWORD **)v154[0];
        v135 = *v116;
        v135[1] = *((_QWORD *)v154[0] + 1);
        *v134[1] = v135;
        v155[0] = 0;
        if (v116 != v154)
        {
          do
          {
            v136 = (void **)v116[1];
            operator delete(v116);
            v116 = v136;
          }
          while (v136 != v154);
        }
      }
      else
      {
        v133 = 0;
      }
    }
    else
    {
      if (v151 != &v150)
      {
        v113 = 0;
        v114 = v154;
        do
        {
          v115 = operator new(0x18uLL);
          v115[2] = v112[2];
          *v115 = v114;
          v115[1] = v154;
          v114[1] = v115;
          ++v113;
          v154[0] = v115;
          v155[0] = v113;
          v112 = (_QWORD *)v112[1];
          v114 = (void **)v115;
        }
        while (v112 != &v150);
        goto LABEL_201;
      }
LABEL_220:
      v133 = 0;
      v113 = 0;
    }
    if (v152)
    {
      v138 = v150;
      v137 = v151;
      v139 = *v151;
      *(_QWORD *)(v139 + 8) = v150[1];
      *(_QWORD *)v138[1] = v139;
      v152 = 0;
      if (v137 != &v150)
      {
        do
        {
          v140 = (_QWORD *)v137[1];
          operator delete(v137);
          v137 = v140;
        }
        while (v140 != &v150);
      }
    }
    v141 = (v133 - (uint64_t)v113) >> 3;
    *v144 = v141;
    if ((char *)v133 == v113)
    {
      if (v133)
        goto LABEL_235;
    }
    else
    {
      if (v141 <= 1)
        v141 = 1;
      v142 = v113;
      do
      {
        v143 = *(_QWORD *)v142;
        v142 += 8;
        *v74++ = v143;
        --v141;
      }
      while (v141);
LABEL_235:
      operator delete(v113);
    }
  }
  else
  {
    *v144 = 0;
  }
LABEL_236:
  operator delete(v10);
  return 0;
}

void sub_23938DCC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, __int128 a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  void *v22;

  sub_23938C4F8(&a20);
  sub_23938C4F8(&a16);
  operator delete(v22);
  _Unwind_Resume(a1);
}

void sub_23938DDAC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250AD5A28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_23938DDBC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250AD5A28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83C4BCLL);
}

uint64_t sub_23938DDEC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (result)
    JUMPOUT(0x23B83C4BCLL);
  return result;
}

void sub_23938DE18(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250AD59F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_23938DE28(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250AD59F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83C4BCLL);
}

uint64_t sub_23938DE58(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (result)
    JUMPOUT(0x23B83C4BCLL);
  return result;
}

void sub_23938DE84(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250AD59B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_23938DE94(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250AD59B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83C4BCLL);
}

uint64_t sub_23938DEC4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = a1[13];
  a1[13] = 0;
  if (v2)
    MEMORY[0x23B83C4BC](v2, 0x1000C40B166FFE6);
  v3 = a1[12];
  a1[12] = 0;
  if (v3)
    MEMORY[0x23B83C4BC](v3, 0x1000C40FA9F20B1);
  result = a1[11];
  a1[11] = 0;
  if (result)
    JUMPOUT(0x23B83C4BCLL);
  return result;
}

void sub_23938DF4C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250AD5980;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_23938DF5C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250AD5980;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83C4BCLL);
}

void sub_23938DF8C(_QWORD *a1)
{
  uint64_t v2;
  void **v3;
  void **v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  v2 = a1[13];
  a1[13] = 0;
  if (v2)
    MEMORY[0x23B83C4BC](v2, 0x1000C408F47704FLL);
  v3 = (void **)a1[8];
  v4 = (void **)a1[9];
  a1[12] = 0;
  v5 = (char *)v4 - (char *)v3;
  if ((unint64_t)((char *)v4 - (char *)v3) >= 0x11)
  {
    do
    {
      operator delete(*v3);
      v4 = (void **)a1[9];
      v3 = (void **)(a1[8] + 8);
      a1[8] = v3;
      v5 = (char *)v4 - (char *)v3;
    }
    while ((unint64_t)((char *)v4 - (char *)v3) > 0x10);
  }
  v6 = v5 >> 3;
  if (v6 == 1)
  {
    v7 = 25;
    goto LABEL_9;
  }
  if (v6 == 2)
  {
    v7 = 51;
LABEL_9:
    a1[11] = v7;
  }
  if (v3 != v4)
  {
    do
    {
      v8 = *v3++;
      operator delete(v8);
    }
    while (v3 != v4);
    v10 = a1[8];
    v9 = a1[9];
    if (v9 != v10)
      a1[9] = v9 + ((v10 - v9 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  v11 = (void *)a1[7];
  if (v11)
    operator delete(v11);
}

uint64_t sub_23938E07C(_QWORD *a1, uint64_t a2, float32x4_t *a3, float32x2_t *a4, float32x4_t *a5, uint64_t a6, _QWORD *a7, uint64_t a8)
{
  float32x4_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  int64_t v28;
  char *v29;
  float32x2_t *v30;
  _QWORD *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  void *v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  int64_t v44;
  char *v45;
  unint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  void *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  int64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  void *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  char *v75;
  int64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  __int128 *v82;
  char *v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  unint64_t v87;
  _BYTE *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  int64_t v98;
  unint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  __int128 *v104;
  _OWORD *v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  char *v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  __int128 *v123;
  _OWORD *v124;
  uint64_t v125;
  __int128 v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  __int128 *v130;
  _OWORD *v131;
  uint64_t v132;
  __int128 v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  void **v138;
  void **v139;
  double *v140;
  unint64_t v141;
  float64x2_t v142;
  uint64_t v143;
  uint64_t v144;
  void **v145;
  float64x2_t v146;
  float32x4_t *v147;
  unint64_t v148;
  double *v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  void **v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float32x4_t *v157;
  float32x4_t *v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  double v164;
  double v165;
  float32x4_t *v166;
  unint64_t v167;
  double *v168;
  float64x2_t v169;
  float64x2_t v170;
  void **v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float32x4_t *v175;
  float32x4_t *v176;
  float64x2_t v177;
  double v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  double v183;
  float32x4_t *v184;
  unint64_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float32x4_t *v192;
  float32x4_t *v193;
  float64x2_t v194;
  double v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  double v201;
  float64x2_t v202;
  uint64_t v203;
  float64x2_t v204;
  float64x2_t v205;
  double v206;
  double v207;
  double v208;
  double v209;
  double v210;
  double v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;
  _BOOL4 v215;
  uint64_t v216;
  float v217;
  double v218;
  uint64_t v219;
  int v220;
  double v221;
  double v222;
  double v223;
  double v224;
  double v225;
  float v226;
  float v227;
  _BOOL4 v228;
  float v229;
  int v230;
  float v231;
  float v232;
  _BOOL4 v234;
  float v235;
  float v236;
  float v237;
  uint64_t v238;
  unsigned __int32 v239;
  float32x4_t v240;
  float32x4_t v241;
  float32x4_t v242;
  float32x4_t v243;
  float32x4_t v244;
  float32x4_t v245;
  float32x4_t v246;
  float32x4_t v247;
  float32x4_t v248;
  float32x4_t v249;
  int8x16_t v250;
  float32x2_t v251;
  float32x2_t v252;
  int8x16_t v253;
  float32x4_t v254;
  float32x4_t v255;
  int8x16_t v256;
  float32x4_t v257;
  float32x4_t v258;
  float32x4_t v259;
  float32x4_t v260;
  float32x4_t v261;
  float32x4_t v262;
  float32x4_t v263;
  float32x4_t v264;
  float32x4_t v265;
  float32x4_t v266;
  float32x4_t v267;
  float32x4_t v268;
  float32x4_t v269;
  float32x4_t v270;
  unsigned __int8 v271;
  unsigned __int32 v272;
  float32x4_t v273;
  float32x4_t v274;
  float32x4_t v275;
  float32x4_t v276;
  float32x4_t v277;
  float32x4_t v278;
  float32x4_t v279;
  float32x4_t v280;
  unsigned __int8 v281;
  float32x4_t v282;
  float32x4_t v283;
  float v284;
  float v285;
  uint64_t v286;
  uint64_t v287;
  unint64_t v288;
  unint64_t v289;
  uint8x8_t v290;
  unint64_t v291;
  void **v292;
  uint64_t **v293;
  uint64_t *v294;
  unint64_t v295;
  uint64_t v297;
  int8x16_t v299;
  __int128 v300;
  int v301;
  unint64_t v302;
  uint8x8_t v303;
  uint64_t **v304;
  uint64_t *v305;
  unint64_t v307;
  uint64_t v309;
  uint64_t v310;
  _QWORD *v311;
  float v312;
  float v313;
  _BOOL8 v314;
  unint64_t v315;
  unint64_t v316;
  size_t prime;
  void *v318;
  void *v319;
  uint64_t v320;
  _QWORD *v321;
  void **v322;
  size_t v323;
  size_t v324;
  size_t v325;
  _QWORD *v326;
  size_t v327;
  uint64_t v328;
  unint64_t v329;
  uint8x8_t v330;
  uint64_t v331;
  _QWORD *v332;
  uint64_t v333;
  size_t v334;
  void *v335;
  _QWORD *v336;
  _QWORD *v337;
  unint64_t v338;
  int v339;
  uint64_t v340;
  int v341;
  _QWORD *v342;
  uint64_t v343;
  uint64_t v344;
  double v345;
  double v346;
  float64x2_t v347;
  uint64_t v348;
  uint64x2_t v349;
  int v354;
  int v355;
  _QWORD *v356;
  _QWORD *v357;
  void *v358;
  float32x2_t v359;
  float32x2_t v360;
  _QWORD *v361;
  _QWORD *v362;
  float32x2_t v363;
  void *v364;
  float v365;
  float32x4_t v366;
  float32x4_t v367;
  float32x4_t v368;
  float32x4_t v369;
  float32x4_t v370;
  float32x4_t v371;
  _BOOL4 v372;
  _BOOL4 v373;
  float v374;
  double v375;
  uint64_t v376;
  float64x2_t v377;
  uint64_t v378;
  double v379;
  double v380;
  double v381;
  double v382;
  float v383;
  float v384;
  _BOOL4 v385;
  _BOOL4 v386;
  uint64_t v387;
  double v388;
  double v389;
  float32x4_t v390;
  float32x4_t v391;
  float32x4_t v392;
  float32x4_t v393;
  float32x4_t v394;
  float32x4_t v395;
  float32x4_t v396;
  int v397;
  int v398;
  _BOOL4 v399;
  _BOOL4 v400;
  double v404;
  uint64_t v405;
  double v406;
  double v407;
  double v408;
  double v409;
  double v410;
  BOOL v412;
  double v413;
  uint64_t v414;
  double v415;
  double v416;
  double v417;
  double v418;
  double v419;
  char v420;
  BOOL v422;
  uint64_t v424;
  char *v425;
  char *v426;
  uint64_t v427;
  char *v428;
  float32x4_t *v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  char *v434;
  int64_t v435;
  unint64_t v436;
  float32x4_t *v437;
  unint64_t v438;
  uint64_t v439;
  char *v440;
  char *v441;
  int64_t v442;
  unint64_t v443;
  char *v444;
  char *v445;
  uint64_t v446;
  uint64_t v447;
  __int128 *v448;
  _OWORD *v449;
  uint64_t v450;
  __int128 v451;
  uint64_t v452;
  int v453;
  float32x4_t v454;
  float32x4_t v455;
  float32x4_t v456;
  float32x4_t v457;
  float32x4_t v458;
  float32x4_t v459;
  float32x4_t v460;
  float32x4_t v461;
  float32x4_t *v463;
  int8x16_t v464;
  float32x4_t v465;
  float32x4_t v466;
  float32x4_t v467;
  float32x4_t v468;
  float32x4_t v469;
  uint64_t v470;
  uint64_t v471;
  float64x2_t v473;
  float32x4_t v474;
  __int128 v475;
  float32x4_t v476;
  unsigned int v477;
  float32x4_t v478;
  __int128 v483;
  float32x4_t v484;
  float32x4_t v485;
  __int128 v486;
  float32x4_t v487;
  float32x4_t v488;
  __int128 v489;
  float32x4_t v490;
  float32x4_t v491;
  __int128 v492;
  float32x4_t v493;
  float32x4_t v494;
  float64x2_t v496;
  uint32x2_t v498;
  void *v499[2];
  void *__p[2];
  int v501;
  __int128 v502;
  __int128 v503;
  int v504;
  uint64_t v505;
  float32x4_t v506;
  float32x4_t v507;
  float32x4_t v508;
  float32x4_t v509;
  int v510[4];

  v8 = a5;
  v9 = (unint64_t)a3;
  v10 = a2;
  if (a7)
    *a7 = 0;
  v11 = a1[20];
  v12 = *(char **)(v11 + 48);
  v13 = *(char **)(v11 + 40);
  v14 = v12 - v13;
  v489 = *(_OWORD *)(a2 + 144);
  v492 = *(_OWORD *)(a2 + 128);
  v483 = *(_OWORD *)(a2 + 176);
  v486 = *(_OWORD *)(a2 + 160);
  v15 = *(double *)(a2 + 264);
  if (v12 == v13)
    v16 = 0;
  else
    v16 = 51 * ((v12 - v13) >> 3) - 1;
  v17 = *(_QWORD *)(v11 + 64);
  v18 = *(_QWORD *)(v11 + 72) + v17;
  if (v16 != v18)
  {
    v31 = a1;
    v30 = a4;
    goto LABEL_119;
  }
  if (v17 < 0x33)
  {
    v32 = v14 >> 3;
    v33 = *(char **)(v11 + 56);
    v34 = *(char **)(v11 + 32);
    if (v14 >> 3 < (unint64_t)((v33 - v34) >> 3))
    {
      v35 = operator new(0xFF0uLL);
      if (v33 != v12)
      {
        v36 = *(char **)(v11 + 48);
        v9 = (unint64_t)a3;
        if (v36 != *(char **)(v11 + 56))
        {
LABEL_117:
          *(_QWORD *)v36 = v35;
          *(_QWORD *)(v11 + 48) += 8;
          v31 = a1;
          v30 = a4;
          v10 = a2;
          goto LABEL_118;
        }
        v38 = *(char **)(v11 + 32);
        v37 = *(char **)(v11 + 40);
        if (v37 > v38)
        {
          v39 = (v37 - v38) >> 3;
          if (v39 >= -1)
            v40 = v39 + 1;
          else
            v40 = v39 + 2;
          v41 = v40 >> 1;
          v42 = -v41;
          v43 = &v37[-8 * v41];
          v44 = v36 - v37;
          if (v36 != v37)
          {
            memmove(&v37[-8 * v41], *(const void **)(v11 + 40), v36 - v37);
            v36 = *(char **)(v11 + 40);
          }
          v45 = &v36[8 * v42];
          v36 = &v43[v44];
          *(_QWORD *)(v11 + 40) = v45;
          *(_QWORD *)(v11 + 48) = &v43[v44];
          goto LABEL_117;
        }
        v93 = (v36 - v38) >> 2;
        if (v36 == v38)
          v93 = 1;
        if (v93 >> 61)
          goto LABEL_475;
        v94 = v93 >> 2;
        v95 = 8 * v93;
        v96 = (char *)operator new(8 * v93);
        v97 = &v96[8 * v94];
        v98 = v36 - v37;
        _ZF = v36 == v37;
        v36 = v97;
        if (!_ZF)
        {
          v36 = &v97[v98 & 0xFFFFFFFFFFFFFFF8];
          v99 = v98 - 8;
          if ((unint64_t)(v98 - 8) < 0x38)
          {
            v100 = &v96[8 * v94];
            goto LABEL_114;
          }
          v127 = &v96[8 * v94];
          v100 = v127;
          if ((unint64_t)(v127 - v37) < 0x20)
          {
            do
            {
LABEL_114:
              v134 = *(_QWORD *)v37;
              v37 += 8;
              *(_QWORD *)v100 = v134;
              v100 += 8;
            }
            while (v100 != v36);
            goto LABEL_115;
          }
          v128 = (v99 >> 3) + 1;
          v129 = 8 * (v128 & 0x3FFFFFFFFFFFFFFCLL);
          v100 = &v97[v129];
          v130 = (__int128 *)(v37 + 16);
          v131 = v127 + 16;
          v132 = v128 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v133 = *v130;
            *(v131 - 1) = *(v130 - 1);
            *v131 = v133;
            v130 += 2;
            v131 += 2;
            v132 -= 4;
          }
          while (v132);
          if (v128 != (v128 & 0x3FFFFFFFFFFFFFFCLL))
          {
            v37 += v129;
            goto LABEL_114;
          }
        }
LABEL_115:
        *(_QWORD *)(v11 + 32) = v96;
        *(_QWORD *)(v11 + 40) = v97;
        *(_QWORD *)(v11 + 48) = v36;
        *(_QWORD *)(v11 + 56) = &v96[v95];
        if (v38)
        {
          operator delete(v38);
          v36 = *(char **)(v11 + 48);
        }
        goto LABEL_117;
      }
      v60 = *(char **)(v11 + 40);
      v9 = (unint64_t)a3;
      if (v60 != *(char **)(v11 + 32))
      {
        v61 = *(char **)(v11 + 40);
        goto LABEL_452;
      }
      v88 = *(_BYTE **)(v11 + 48);
      v87 = *(_QWORD *)(v11 + 56);
      if ((unint64_t)v88 < v87)
      {
        v89 = (uint64_t)(v87 - (_QWORD)v88) >> 3;
        if (v89 >= -1)
          v90 = v89 + 1;
        else
          v90 = v89 + 2;
        v91 = v90 >> 1;
        v92 = &v88[8 * (v90 >> 1)];
        v61 = &v92[-(v88 - v60)];
        if (v88 != v60)
        {
          memmove(&v92[-(v88 - v60)], *(const void **)(v11 + 40), v88 - v60);
          v60 = *(char **)(v11 + 48);
        }
        *(_QWORD *)(v11 + 40) = v61;
        *(_QWORD *)(v11 + 48) = &v60[8 * v91];
LABEL_452:
        *((_QWORD *)v61 - 1) = v35;
        v426 = *(char **)(v11 + 40);
        v425 = *(char **)(v11 + 48);
        *(_QWORD *)(v11 + 40) = v426 - 8;
        v427 = *((_QWORD *)v426 - 1);
        *(_QWORD *)(v11 + 40) = v426;
        v10 = a2;
        if (v425 != *(char **)(v11 + 56))
        {
LABEL_474:
          *(_QWORD *)v425 = v427;
          *(_QWORD *)(v11 + 48) += 8;
          goto LABEL_97;
        }
        v428 = *(char **)(v11 + 32);
        if (v426 > v428)
        {
          v429 = v8;
          v430 = (v426 - v428) >> 3;
          if (v430 >= -1)
            v431 = v430 + 1;
          else
            v431 = v430 + 2;
          v432 = v431 >> 1;
          v433 = -v432;
          v434 = &v426[-8 * v432];
          v435 = v425 - v426;
          if (v425 != v426)
          {
            memmove(&v426[-8 * v432], v426, v425 - v426);
            v426 = *(char **)(v11 + 40);
          }
          v425 = &v434[v435];
          *(_QWORD *)(v11 + 40) = &v426[8 * v433];
          *(_QWORD *)(v11 + 48) = &v434[v435];
          v8 = v429;
          goto LABEL_474;
        }
        v436 = (v425 - v428) >> 2;
        if (v425 == v428)
          v436 = 1;
        if (v436 >> 61)
          goto LABEL_475;
        v437 = v8;
        v438 = v436 >> 2;
        v439 = 8 * v436;
        v440 = (char *)operator new(8 * v436);
        v441 = &v440[8 * v438];
        v442 = v425 - v426;
        _ZF = v425 == v426;
        v425 = v441;
        if (!_ZF)
        {
          v425 = &v441[v442 & 0xFFFFFFFFFFFFFFF8];
          v443 = v442 - 8;
          if ((unint64_t)(v442 - 8) < 0x38)
          {
            v444 = &v440[8 * v438];
            goto LABEL_471;
          }
          v445 = &v440[8 * v438];
          v444 = v445;
          if ((unint64_t)(v445 - v426) < 0x20)
          {
            do
            {
LABEL_471:
              v452 = *(_QWORD *)v426;
              v426 += 8;
              *(_QWORD *)v444 = v452;
              v444 += 8;
            }
            while (v444 != v425);
            goto LABEL_472;
          }
          v446 = (v443 >> 3) + 1;
          v447 = 8 * (v446 & 0x3FFFFFFFFFFFFFFCLL);
          v444 = &v441[v447];
          v448 = (__int128 *)(v426 + 16);
          v449 = v445 + 16;
          v450 = v446 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v451 = *v448;
            *(v449 - 1) = *(v448 - 1);
            *v449 = v451;
            v448 += 2;
            v449 += 2;
            v450 -= 4;
          }
          while (v450);
          if (v446 != (v446 & 0x3FFFFFFFFFFFFFFCLL))
          {
            v426 += v447;
            goto LABEL_471;
          }
        }
LABEL_472:
        *(_QWORD *)(v11 + 32) = v440;
        *(_QWORD *)(v11 + 40) = v441;
        *(_QWORD *)(v11 + 48) = v425;
        *(_QWORD *)(v11 + 56) = &v440[v439];
        v8 = v437;
        if (v428)
        {
          operator delete(v428);
          v425 = *(char **)(v11 + 48);
        }
        goto LABEL_474;
      }
      v109 = v87 - (_QWORD)v60;
      _ZF = v109 == 0;
      v110 = v109 >> 2;
      if (_ZF)
        v110 = 1;
      if (v110 >> 61)
        goto LABEL_475;
      v111 = (v110 + 3) >> 2;
      v112 = 8 * v110;
      v113 = (char *)operator new(8 * v110);
      v61 = &v113[8 * v111];
      v114 = &v113[v112];
      v115 = v61;
      v116 = v88 - v60;
      if (v88 != v60)
      {
        v115 = &v61[v116 & 0xFFFFFFFFFFFFFFF8];
        v117 = v116 - 8;
        v118 = &v113[8 * v111];
        v119 = v60;
        if (v117 > 0x37)
        {
          v120 = &v113[8 * v111];
          v118 = v120;
          v119 = v60;
          if ((unint64_t)(v120 - v60) >= 0x20)
          {
            v121 = (v117 >> 3) + 1;
            v122 = 8 * (v121 & 0x3FFFFFFFFFFFFFFCLL);
            v118 = &v61[v122];
            v123 = (__int128 *)(v60 + 16);
            v124 = v120 + 16;
            v125 = v121 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v126 = *v123;
              *(v124 - 1) = *(v123 - 1);
              *v124 = v126;
              v123 += 2;
              v124 += 2;
              v125 -= 4;
            }
            while (v125);
            if (v121 == (v121 & 0x3FFFFFFFFFFFFFFCLL))
            {
              *(_QWORD *)(v11 + 32) = v113;
              *(_QWORD *)(v11 + 40) = v61;
              *(_QWORD *)(v11 + 48) = v115;
              *(_QWORD *)(v11 + 56) = v114;
LABEL_451:
              operator delete(v60);
              v61 = *(char **)(v11 + 40);
              goto LABEL_452;
            }
            v119 = &v60[v122];
          }
        }
        do
        {
          v424 = *(_QWORD *)v119;
          v119 += 8;
          *(_QWORD *)v118 = v424;
          v118 += 8;
        }
        while (v118 != v115);
      }
      *(_QWORD *)(v11 + 32) = v113;
      *(_QWORD *)(v11 + 40) = v61;
      *(_QWORD *)(v11 + 48) = v115;
      *(_QWORD *)(v11 + 56) = v114;
      if (!v60)
        goto LABEL_452;
      goto LABEL_451;
    }
    if (v33 == v34)
      v46 = 1;
    else
      v46 = (v33 - v34) >> 2;
    if (v46 >> 61)
      goto LABEL_475;
    v47 = (char *)operator new(8 * v46);
    v48 = &v47[8 * v32];
    v49 = &v47[8 * v46];
    v50 = operator new(0xFF0uLL);
    if (v32 == v46)
    {
      if (v14 < 1)
      {
        v62 = v14 >> 2;
        if (v12 == v13)
          v62 = 1;
        if (v62 >> 61)
          goto LABEL_475;
        v63 = 8 * v62;
        v48 = (char *)operator new(8 * v62);
        v49 = &v48[v63];
        operator delete(v47);
        v13 = *(char **)(v11 + 40);
        v12 = *(char **)(v11 + 48);
        v47 = v48;
      }
      else
      {
        v51 = v32 + 2;
        if (v32 >= -1)
          v51 = v32 + 1;
        v48 -= 8 * (v51 >> 1);
      }
    }
    *(_QWORD *)v48 = v50;
    v64 = v48 + 8;
    if (v12 == v13)
    {
      v65 = v48;
      v66 = v48 + 8;
LABEL_49:
      v67 = *(void **)(v11 + 32);
      *(_QWORD *)(v11 + 32) = v47;
      *(_QWORD *)(v11 + 40) = v65;
      *(_QWORD *)(v11 + 48) = v66;
      *(_QWORD *)(v11 + 56) = v49;
      v8 = a5;
      v31 = a1;
      v30 = a4;
      v10 = a2;
      v9 = (unint64_t)a3;
      if (v67)
        operator delete(v67);
      goto LABEL_118;
    }
    while (v48 != v47)
    {
      v68 = v48;
      v66 = v64;
LABEL_52:
      v69 = *((_QWORD *)v12 - 1);
      v12 -= 8;
      *((_QWORD *)v68 - 1) = v69;
      v65 = v68 - 8;
      v64 = v66;
      v48 = v65;
      if (v12 == *(char **)(v11 + 40))
        goto LABEL_49;
    }
    if (v64 < v49)
    {
      v70 = (v49 - v64) >> 3;
      if (v70 >= -1)
        v71 = v70 + 1;
      else
        v71 = v70 + 2;
      v66 = &v64[8 * (v71 >> 1)];
      v68 = &v48[8 * (v71 >> 1)];
      if (v64 == v48)
      {
        v47 = v64;
      }
      else
      {
        memmove(&v48[8 * (v71 >> 1)], v48, v64 - v48);
        v47 = v48;
      }
      goto LABEL_52;
    }
    v72 = (v49 - v48) >> 2;
    if (v49 == v48)
      v72 = 1;
    if (v72 >> 61)
      goto LABEL_475;
    v73 = (v72 + 3) >> 2;
    v74 = 8 * v72;
    v75 = (char *)operator new(8 * v72);
    v47 = v75;
    v68 = &v75[8 * v73];
    v66 = v68;
    v76 = v64 - v48;
    if (v64 != v48)
    {
      v66 = &v68[v76 & 0xFFFFFFFFFFFFFFF8];
      v77 = v76 - 8;
      v78 = &v75[8 * v73];
      v79 = v48;
      if (v77 >= 0x38)
      {
        v78 = &v75[8 * v73];
        v79 = v48;
        if ((unint64_t)(v78 - v48) >= 0x20)
        {
          v80 = (v77 >> 3) + 1;
          v81 = 8 * (v80 & 0x3FFFFFFFFFFFFFFCLL);
          v78 = &v68[v81];
          v82 = (__int128 *)(v48 + 16);
          v83 = &v75[8 * v73 + 16];
          v84 = v80 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v85 = *v82;
            *((_OWORD *)v83 - 1) = *(v82 - 1);
            *(_OWORD *)v83 = v85;
            v82 += 2;
            v83 += 32;
            v84 -= 4;
          }
          while (v84);
          if (v80 == (v80 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_71;
          v79 = &v48[v81];
        }
      }
      do
      {
        v86 = *(_QWORD *)v79;
        v79 += 8;
        *(_QWORD *)v78 = v86;
        v78 += 8;
      }
      while (v78 != v66);
    }
LABEL_71:
    v49 = &v75[v74];
    operator delete(v48);
    goto LABEL_52;
  }
  *(_QWORD *)(v11 + 64) = v17 - 51;
  v21 = v13 + 8;
  v20 = *(_QWORD *)v13;
  *(_QWORD *)(v11 + 40) = v13 + 8;
  if (*(char **)(v11 + 56) == v12)
  {
    v22 = *(char **)(v11 + 32);
    if (v21 > v22)
    {
      v23 = (v21 - v22) >> 3;
      if (v23 >= -1)
        v24 = v23 + 1;
      else
        v24 = v23 + 2;
      v25 = v24 >> 1;
      v26 = -v25;
      v27 = &v21[-8 * v25];
      v28 = v12 - v21;
      if (v12 == v21)
      {
        v29 = v12;
      }
      else
      {
        memmove(&v21[-8 * v25], v21, v12 - v21);
        v29 = *(char **)(v11 + 40);
      }
      v12 = &v27[v28];
      *(_QWORD *)(v11 + 40) = &v29[8 * v26];
      *(_QWORD *)(v11 + 48) = &v27[v28];
      goto LABEL_96;
    }
    v52 = (v12 - v22) >> 2;
    if (v12 == v22)
      v52 = 1;
    if (!(v52 >> 61))
    {
      v53 = v52 >> 2;
      v54 = 8 * v52;
      v55 = (char *)operator new(8 * v52);
      v56 = &v55[8 * v53];
      v57 = v12 - v21;
      _ZF = v12 == v21;
      v12 = v56;
      if (_ZF)
        goto LABEL_94;
      v12 = &v56[v57 & 0xFFFFFFFFFFFFFFF8];
      v58 = v57 - 8;
      if ((unint64_t)(v57 - 8) >= 0x38)
      {
        v101 = &v55[8 * v53];
        v59 = v101;
        if ((unint64_t)(v101 - v21) >= 0x20)
        {
          v102 = (v58 >> 3) + 1;
          v103 = 8 * (v102 & 0x3FFFFFFFFFFFFFFCLL);
          v59 = &v56[v103];
          v104 = (__int128 *)(v13 + 24);
          v105 = v101 + 16;
          v106 = v102 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v107 = *v104;
            *(v105 - 1) = *(v104 - 1);
            *v105 = v107;
            v104 += 2;
            v105 += 2;
            v106 -= 4;
          }
          while (v106);
          if (v102 == (v102 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_94:
            *(_QWORD *)(v11 + 32) = v55;
            *(_QWORD *)(v11 + 40) = v56;
            *(_QWORD *)(v11 + 48) = v12;
            *(_QWORD *)(v11 + 56) = &v55[v54];
            v9 = (unint64_t)a3;
            if (v22)
            {
              operator delete(v22);
              v12 = *(char **)(v11 + 48);
            }
            goto LABEL_96;
          }
          v21 += v103;
        }
      }
      else
      {
        v59 = &v55[8 * v53];
      }
      do
      {
        v108 = *(_QWORD *)v21;
        v21 += 8;
        *(_QWORD *)v59 = v108;
        v59 += 8;
      }
      while (v59 != v12);
      goto LABEL_94;
    }
LABEL_475:
    sub_23938C4B8();
  }
LABEL_96:
  *(_QWORD *)v12 = v20;
  *(_QWORD *)(v11 + 48) += 8;
  v8 = a5;
LABEL_97:
  v31 = a1;
  v30 = a4;
LABEL_118:
  v13 = *(char **)(v11 + 40);
  v18 = *(_QWORD *)(v11 + 72) + *(_QWORD *)(v11 + 64);
LABEL_119:
  v135 = *(_QWORD *)&v13[8 * (v18 / 0x33)] + 80 * (v18 % 0x33);
  *(_OWORD *)v135 = v492;
  *(_OWORD *)(v135 + 16) = v489;
  v142.f64[1] = *((float64_t *)&v483 + 1);
  *(_OWORD *)(v135 + 32) = v486;
  *(_OWORD *)(v135 + 48) = v483;
  *(double *)(v135 + 64) = v15;
  v136 = *(_QWORD *)(v11 + 64);
  v137 = *(_QWORD *)(v11 + 72) + 1;
  *(_QWORD *)(v11 + 72) = v137;
  v138 = *(void ***)(v11 + 40);
  v139 = &v138[v136 / 0x33];
  v140 = (double *)*v139;
  v141 = v136 % 0x33;
  v142.f64[0] = *(float64_t *)v11;
  if (*((double *)*v139 + 10 * (v136 % 0x33) + 8) < v15 - *(double *)v11)
  {
    do
    {
      v143 = *(_QWORD *)(v11 + 72) - 1;
      *(_QWORD *)(v11 + 64) = ++v136;
      *(_QWORD *)(v11 + 72) = v143;
      if (v136 >= 0x66)
      {
        operator delete(*v138);
        v138 = (void **)(*(_QWORD *)(v11 + 40) + 8);
        *(_QWORD *)(v11 + 40) = v138;
        v136 = *(_QWORD *)(v11 + 64) - 51;
        *(_QWORD *)(v11 + 64) = v136;
        v142.f64[0] = *(float64_t *)v11;
      }
      v140 = (double *)v138[v136 / 0x33];
      v141 = v136 % 0x33;
    }
    while (v140[10 * (v136 % 0x33) + 8] < v15 - v142.f64[0]);
    v139 = &v138[v136 / 0x33];
    v137 = *(_QWORD *)(v11 + 72);
  }
  if (v137 < 0xA)
  {
    v144 = 0;
    goto LABEL_162;
  }
  v145 = *(void ***)(v11 + 48);
  v146 = 0uLL;
  if (v145 == v138
    || (v147 = (float32x4_t *)&v140[10 * v141],
        v148 = (unint64_t)v138[(v137 + v136) / 0x33] + 80 * ((v137 + v136) % 0x33),
        v147 == (float32x4_t *)v148))
  {
    v152 = 0uLL;
    v154 = 0uLL;
    v150 = 0uLL;
    v151 = 0uLL;
  }
  else
  {
    v142 = 0uLL;
    v149 = v140;
    v150 = 0uLL;
    v151 = 0uLL;
    v152 = 0uLL;
    v153 = v139;
    v154 = 0uLL;
    do
    {
      v157 = v147 + 5;
      if ((char *)&v147[5] - (char *)v149 == 4080)
      {
        v158 = (float32x4_t *)v153[1];
        ++v153;
        v149 = (double *)v158;
        v157 = v158;
      }
      v155 = (float64x2_t)vaddq_f32(v147[3], vmlaq_f32(vmlaq_f32(*v147, (float32x4_t)0, v147[1]), (float32x4_t)0, v147[2]));
      v156 = vcvtq_f64_f32(*(float32x2_t *)&v155.f64[0]);
      v155.f64[0] = *(float *)&v155.f64[1];
      v150 = vaddq_f64(v150, v156);
      v151 = vaddq_f64(v151, v155);
      v152 = vaddq_f64(v152, vmulq_f64(v156, v156));
      v154 = vaddq_f64(v154, vmulq_f64(v155, v155));
      v147 = v157;
    }
    while (v157 != (float32x4_t *)v148);
  }
  v142.f64[0] = (double)v137;
  v159 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v137), 0);
  v160 = vdivq_f64(v151, v142);
  v161 = vdivq_f64(v150, v159);
  v162 = vmlsq_f64(vdivq_f64(v152, v159), v161, v161);
  v163 = vmlsq_f64(vdivq_f64(v154, v142), v160, v160);
  *(_QWORD *)&v164 = *(_OWORD *)&vmulq_f64(v163, v163);
  v165 = vaddvq_f64(vmulq_f64(v162, v162));
  if (v145 != v138)
  {
    v166 = (float32x4_t *)&v140[10 * v141];
    v167 = (unint64_t)v138[(v137 + v136) / 0x33] + 80 * ((v137 + v136) % 0x33);
    if (v166 != (float32x4_t *)v167)
    {
      v168 = v140;
      v169 = 0uLL;
      v170 = 0uLL;
      v146 = 0uLL;
      v171 = v139;
      v172 = 0uLL;
      do
      {
        v175 = v166 + 5;
        if ((char *)&v166[5] - (char *)v168 == 4080)
        {
          v176 = (float32x4_t *)v171[1];
          ++v171;
          v168 = (double *)v176;
          v175 = v176;
        }
        v173 = (float64x2_t)vaddq_f32(v166[3], vmlaq_f32(vaddq_f32(v166[1], vmulq_f32(*v166, (float32x4_t)0)), (float32x4_t)0, v166[2]));
        v174 = vcvtq_f64_f32(*(float32x2_t *)&v173.f64[0]);
        v173.f64[0] = *(float *)&v173.f64[1];
        v169 = vaddq_f64(v169, v174);
        v170 = vaddq_f64(v170, v173);
        v146 = vaddq_f64(v146, vmulq_f64(v174, v174));
        v172 = vaddq_f64(v172, vmulq_f64(v173, v173));
        v166 = v175;
      }
      while (v175 != (float32x4_t *)v167);
      goto LABEL_142;
    }
    v146 = 0uLL;
  }
  v172 = 0uLL;
  v169 = 0uLL;
  v170 = 0uLL;
LABEL_142:
  v177.f64[0] = (double)v137;
  v177.f64[1] = (double)v137;
  v178 = v164 + v165;
  v179 = vdivq_f64(v169, v177);
  v180 = vdivq_f64(v170, v142);
  v181 = vmlsq_f64(vdivq_f64(v146, v177), v179, v179);
  v182 = vmlsq_f64(vdivq_f64(v172, v142), v180, v180);
  v183 = vmulq_f64(v182, v182).f64[0] + vaddvq_f64(vmulq_f64(v181, v181));
  if (v145 == v138
    || (v184 = (float32x4_t *)&v140[10 * v141],
        v185 = (unint64_t)v138[(v137 + v136) / 0x33] + 80 * ((v137 + v136) % 0x33),
        v184 == (float32x4_t *)v185))
  {
    v188 = 0uLL;
    v189 = 0uLL;
    v186 = 0uLL;
    v187 = 0uLL;
  }
  else
  {
    v186 = 0uLL;
    v187 = 0uLL;
    v188 = 0uLL;
    v189 = 0uLL;
    do
    {
      v192 = v184 + 5;
      if ((char *)&v184[5] - (char *)v140 == 4080)
      {
        v193 = (float32x4_t *)v139[1];
        ++v139;
        v140 = (double *)v193;
        v192 = v193;
      }
      v190 = (float64x2_t)vaddq_f32(v184[3], vaddq_f32(v184[2], vmlaq_f32(vmulq_f32(*v184, (float32x4_t)0), (float32x4_t)0, v184[1])));
      v191 = vcvtq_f64_f32(*(float32x2_t *)&v190.f64[0]);
      v190.f64[0] = *(float *)&v190.f64[1];
      v186 = vaddq_f64(v186, v191);
      v187 = vaddq_f64(v187, v190);
      v188 = vaddq_f64(v188, vmulq_f64(v191, v191));
      v189 = vaddq_f64(v189, vmulq_f64(v190, v190));
      v184 = v192;
    }
    while (v192 != (float32x4_t *)v185);
  }
  v194.f64[0] = sqrt(v178);
  v195 = sqrt(v183);
  v196.f64[0] = (double)v137;
  v196.f64[1] = (double)v137;
  v197 = vdivq_f64(v186, v196);
  v198 = vdivq_f64(v187, v142);
  v199 = vmlsq_f64(vdivq_f64(v188, v196), v197, v197);
  v200 = vmlsq_f64(vdivq_f64(v189, v142), v198, v198);
  v201 = sqrt(vmulq_f64(v200, v200).f64[0] + vaddvq_f64(vmulq_f64(v199, v199)));
  if (*(_BYTE *)(v11 + 8))
  {
    v202.f64[0] = v194.f64[0];
    v202.f64[1] = v195;
    v203 = *(_QWORD *)(v11 + 80);
    if (*(_BYTE *)(v203 + 16))
    {
      *(float64x2_t *)(v203 + 24) = v202;
      *(double *)(v203 + 40) = v201;
      *(_BYTE *)(v203 + 16) = 0;
    }
    else
    {
      v204 = *(float64x2_t *)(v203 + 24);
      if (*(_BYTE *)(v203 + 17))
      {
        v205 = *(float64x2_t *)(v203 + 48);
        v206 = *(double *)(v203 + 40);
        v207 = *(double *)(v203 + 64);
      }
      else
      {
        v194.f64[1] = v195;
        v205 = vsubq_f64(v194, v204);
        *(float64x2_t *)(v203 + 48) = v205;
        v206 = *(double *)(v203 + 40);
        v207 = v201 - v206;
        *(double *)(v203 + 64) = v201 - v206;
        *(_BYTE *)(v203 + 17) = 1;
      }
      v208 = *(double *)(v203 + 8);
      v209 = 1.0 - *(double *)v203;
      v210 = *(double *)v203 * v201 + v209 * (v206 + v207);
      v211 = v208 * (v210 - v206) + (1.0 - v208) * v207;
      v212 = vaddq_f64(vmulq_n_f64(v202, *(double *)v203), vmulq_n_f64(vaddq_f64(v204, v205), v209));
      v213 = vaddq_f64(vmulq_n_f64(vsubq_f64(v212, v204), v208), vmulq_n_f64(v205, 1.0 - v208));
      *(float64x2_t *)(v203 + 24) = v212;
      *(double *)(v203 + 40) = v210;
      *(float64x2_t *)(v203 + 48) = v213;
      *(double *)(v203 + 64) = v211;
      v214 = vaddq_f64(v212, v213);
      v201 = v210 + v211;
      v194.f64[0] = fmax(v214.f64[0], 0.0);
      v195 = fmax(v214.f64[1], 0.0);
      if (v201 <= 0.0)
        v201 = 0.0;
    }
  }
  v215 = v194.f64[0] >= 0.005;
  if (v195 >= 0.005)
    v215 = 1;
  v144 = v201 >= 0.005 || v215;
LABEL_162:
  v216 = v31[24];
  v217 = *(float *)(v10 + 256);
  if (*(_BYTE *)(v216 + 12))
  {
    v218 = v217;
    v219 = *(_QWORD *)(v216 + 32);
    v220 = *(unsigned __int8 *)(v219 + 16);
    if (*(_BYTE *)(v219 + 16))
    {
      *(double *)(v219 + 24) = v218;
      *(_BYTE *)(v219 + 16) = 0;
      v221 = 0.0;
    }
    else
    {
      if (*(_BYTE *)(v219 + 17))
      {
        v222 = *(double *)(v219 + 24);
        v223 = *(double *)(v219 + 32);
      }
      else
      {
        v222 = *(double *)(v219 + 24);
        v223 = v218 - v222;
        *(double *)(v219 + 32) = v218 - v222;
        *(_BYTE *)(v219 + 17) = 1;
      }
      v224 = *(double *)v219 * v218 + (1.0 - *(double *)v219) * (v222 + v223);
      v225 = *(double *)(v219 + 8) * (v224 - v222) + (1.0 - *(double *)(v219 + 8)) * v223;
      *(double *)(v219 + 24) = v224;
      *(double *)(v219 + 32) = v225;
      v221 = v225 + v224;
    }
    v226 = v221;
    v227 = fmaxf(v226, 0.0);
    if (!v220)
      v217 = v227;
  }
  v228 = 0;
  v229 = *(float *)v216;
  v230 = *(_DWORD *)(v216 + 40);
  if ((v230 - 1) <= 1 && v217 > 0.0)
  {
    v231 = *(float *)(v216 + 8);
    v232 = logf(v217);
    v228 = v232 > (float)(logf(v229) * (float)(1.0 - v231));
  }
  _ZF = v217 < v229 && !v228;
  if (_ZF)
  {
    v238 = 0;
  }
  else
  {
    v234 = 0;
    v235 = *(float *)(v216 + 4);
    if (v230 == 2 && v217 > 0.0)
    {
      v236 = *(float *)(v216 + 8);
      v237 = logf(v217);
      v234 = v237 > (float)(logf(v235) * (float)(1.0 - v236));
    }
    if (v217 >= v235)
      v234 = 1;
    if (v234)
      v238 = 2;
    else
      v238 = 1;
  }
  *(_DWORD *)(v216 + 40) = v238;
  if (v30 && v8)
  {
    v471 = v144;
    if (!v9)
    {
      v344 = v31[22];
      v345 = *(double *)(v344 + 88);
      v346 = *(double *)(v10 + 264);
      if (v345 < 0.0)
      {
        *(double *)(v344 + 88) = v346;
        v345 = v346;
      }
      if (v346 - v345 >= 5.0 && sub_2393F2BF4(v344, (float32x4_t *)v10, v30, v8))
        *(_DWORD *)(v344 + 96) = 2;
      else
        *(_DWORD *)(v344 + 96) = 0;
      goto LABEL_446;
    }
    kdebug_trace();
    v239 = *(_DWORD *)v9;
    v470 = v238;
    if (!*(_DWORD *)v9)
      goto LABEL_332;
    *(_QWORD *)v510 = 0;
    v505 = 0;
    v240 = v8[1];
    v241 = v8[2];
    v242 = v8[3];
    v243 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*v8, COERCE_FLOAT(*(_OWORD *)v30[2].f32)), v240, v30[2], 1), v241, *(float32x4_t *)v30[2].f32, 2), v242, *(float32x4_t *)v30[2].f32, 3);
    v244 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*v8, COERCE_FLOAT(*(_OWORD *)v30[4].f32)), v240, v30[4], 1), v241, *(float32x4_t *)v30[4].f32, 2), v242, *(float32x4_t *)v30[4].f32, 3);
    v245 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*v8, COERCE_FLOAT(*(_OWORD *)v30[6].f32)), v240, v30[6], 1), v241, *(float32x4_t *)v30[6].f32, 2), v242, *(float32x4_t *)v30[6].f32, 3);
    v506 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*v8, COERCE_FLOAT(*(_OWORD *)v30->f32)), v240, *v30, 1), v241, *(float32x4_t *)v30->f32, 2), v242, *(float32x4_t *)v30->f32, 3);
    v507 = v243;
    v508 = v244;
    v509 = v245;
    if (!sub_2393EEAD4((float32x4_t *)v10, &v506, &v510[1], v510, (int *)&v505 + 1, (int *)&v505))
    {
LABEL_332:
      kdebug_trace();
      v498 = 0;
      v340 = v31[26];
      v341 = 1;
      v343 = a6;
      v342 = a7;
      goto LABEL_377;
    }
    v246 = v8[1];
    v248 = v8[2];
    v247 = v8[3];
    v463 = v8;
    v249 = *(float32x4_t *)v30[2].f32;
    v250 = (int8x16_t)vmulq_f32(*(float32x4_t *)v30->f32, *(float32x4_t *)v30->f32);
    *(float32x2_t *)v250.i8 = vadd_f32(*(float32x2_t *)v250.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v250, v250, 8uLL));
    v250.i32[0] = vadd_f32(*(float32x2_t *)v250.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v250.i8, 1)).u32[0];
    v251 = vrsqrte_f32((float32x2_t)v250.u32[0]);
    v252 = vmul_f32(v251, vrsqrts_f32((float32x2_t)v250.u32[0], vmul_f32(v251, v251)));
    v250.i32[0] = vmul_f32(v252, vrsqrts_f32((float32x2_t)v250.u32[0], vmul_f32(v252, v252))).u32[0];
    v253 = (int8x16_t)vmulq_f32(v249, v249);
    *(float32x2_t *)v253.i8 = vadd_f32(*(float32x2_t *)v253.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v253, v253, 8uLL));
    v253.i32[0] = vadd_f32(*(float32x2_t *)v253.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v253.i8, 1)).u32[0];
    v254 = vmulq_n_f32(*(float32x4_t *)v30->f32, *(float *)v250.i32);
    *(float32x2_t *)v250.i8 = vrsqrte_f32((float32x2_t)v253.u32[0]);
    *(float32x2_t *)v250.i8 = vmul_f32(*(float32x2_t *)v250.i8, vrsqrts_f32((float32x2_t)v253.u32[0], vmul_f32(*(float32x2_t *)v250.i8, *(float32x2_t *)v250.i8)));
    v250.i32[0] = vmul_f32(*(float32x2_t *)v250.i8, vrsqrts_f32((float32x2_t)v253.u32[0], vmul_f32(*(float32x2_t *)v250.i8, *(float32x2_t *)v250.i8))).u32[0];
    v255 = *(float32x4_t *)v30[4].f32;
    v256 = (int8x16_t)vmulq_f32(v255, v255);
    *(float32x2_t *)v256.i8 = vadd_f32(*(float32x2_t *)v256.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v256, v256, 8uLL));
    v256.i32[0] = vadd_f32(*(float32x2_t *)v256.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v256.i8, 1)).u32[0];
    v257 = vmulq_n_f32(v249, *(float *)v250.i32);
    *(float32x2_t *)v250.i8 = vrsqrte_f32((float32x2_t)v256.u32[0]);
    *(float32x2_t *)v250.i8 = vmul_f32(*(float32x2_t *)v250.i8, vrsqrts_f32((float32x2_t)v256.u32[0], vmul_f32(*(float32x2_t *)v250.i8, *(float32x2_t *)v250.i8)));
    v258 = vmulq_n_f32(v255, vmul_f32(*(float32x2_t *)v250.i8, vrsqrts_f32((float32x2_t)v256.u32[0], vmul_f32(*(float32x2_t *)v250.i8, *(float32x2_t *)v250.i8))).f32[0]);
    v259 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*v8, v254.f32[0]), v246, *(float32x2_t *)v254.f32, 1), v248, v254, 2), v247, v254, 3);
    v260 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*v8, v257.f32[0]), v246, *(float32x2_t *)v257.f32, 1), v248, v257, 2), v247, v257, 3);
    v261 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*v8, v258.f32[0]), v246, *(float32x2_t *)v258.f32, 1), v248, v258, 2), v247, v258, 3);
    v262 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*v8, COERCE_FLOAT(*(_OWORD *)v30[6].f32)), v246, v30[6], 1), v248, *(float32x4_t *)v30[6].f32, 2), v247, *(float32x4_t *)v30[6].f32, 3);
    v264 = *(float32x4_t *)(v9 + 32);
    v263 = *(float32x4_t *)(v9 + 48);
    v266 = *(float32x4_t *)(v9 + 64);
    v265 = *(float32x4_t *)(v9 + 80);
    v267 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v259, v264.f32[0]), v260, *(float32x2_t *)v264.f32, 1), v261, v264, 2);
    v268 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v259, v263.f32[0]), v260, *(float32x2_t *)v263.f32, 1), v261, v263, 2);
    v269 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v259, v266.f32[0]), v260, *(float32x2_t *)v266.f32, 1), v261, v266, 2);
    v270 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v259, v265.f32[0]), v260, *(float32x2_t *)v265.f32, 1), v261, v265, 2);
    v502 = 0u;
    v503 = 0u;
    v504 = 1065353216;
    *(_OWORD *)v499 = 0u;
    *(_OWORD *)__p = 0u;
    v501 = 1065353216;
    v271 = atomic_load((unsigned __int8 *)&qword_256930510);
    if ((v271 & 1) == 0)
    {
      v491 = v268;
      v494 = v267;
      v485 = v270;
      v488 = v269;
      v476 = v265;
      v478 = v262;
      v474 = v266;
      v467 = v264;
      v469 = v263;
      v453 = __cxa_guard_acquire(&qword_256930510);
      v264 = v467;
      v263 = v469;
      v266 = v474;
      v265 = v476;
      v262 = v478;
      v270 = v485;
      v269 = v488;
      v268 = v491;
      v267 = v494;
      if (v453)
      {
        *(simd_float4x4 *)zmmword_2569304D0 = __invert_f4(*(simd_float4x4 *)zmmword_2393FA190);
        __cxa_guard_release(&qword_256930510);
        v264 = v467;
        v263 = v469;
        v266 = v474;
        v265 = v476;
        v262 = v478;
        v270 = v485;
        v269 = v488;
        v268 = v491;
        v267 = v494;
      }
    }
    v477 = 0;
    v272 = 0;
    v490 = vmlaq_laneq_f32(v268, v262, v263, 3);
    v493 = vmlaq_laneq_f32(v267, v262, v264, 3);
    v484 = vmlaq_laneq_f32(v270, v262, v265, 3);
    v487 = vmlaq_laneq_f32(v269, v262, v266, 3);
    v466 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)zmmword_2569304D0, COERCE_FLOAT(*(_OWORD *)(v10 + 208))), *(float32x4_t *)&zmmword_2569304D0[16], *(float32x2_t *)(v10 + 208), 1), *(float32x4_t *)&zmmword_2569304D0[32], *(float32x4_t *)(v10 + 208), 2), *(float32x4_t *)&zmmword_2569304D0[48], *(float32x4_t *)(v10 + 208), 3);
    v468 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)zmmword_2569304D0, COERCE_FLOAT(*(_OWORD *)(v10 + 192))), *(float32x4_t *)&zmmword_2569304D0[16], *(float32x2_t *)(v10 + 192), 1), *(float32x4_t *)&zmmword_2569304D0[32], *(float32x4_t *)(v10 + 192), 2), *(float32x4_t *)&zmmword_2569304D0[48], *(float32x4_t *)(v10 + 192), 3);
    v464 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)zmmword_2569304D0, COERCE_FLOAT(*(_OWORD *)(v10 + 240))), *(float32x4_t *)&zmmword_2569304D0[16], *(float32x2_t *)(v10 + 240), 1), *(float32x4_t *)&zmmword_2569304D0[32], *(float32x4_t *)(v10 + 240), 2), *(float32x4_t *)&zmmword_2569304D0[48], *(float32x4_t *)(v10 + 240), 3);
    v465 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)zmmword_2569304D0, COERCE_FLOAT(*(_OWORD *)(v10 + 224))), *(float32x4_t *)&zmmword_2569304D0[16], *(float32x2_t *)(v10 + 224), 1), *(float32x4_t *)&zmmword_2569304D0[32], *(float32x4_t *)(v10 + 224), 2), *(float32x4_t *)&zmmword_2569304D0[48], *(float32x4_t *)(v10 + 224), 3);
    v473 = 0u;
    v475 = 0u;
    while (1)
    {
      v273 = *(float32x4_t *)(*(_QWORD *)(v9 + 8) + 48 * v272);
      v274 = *(float32x4_t *)(v10 + 192);
      v275 = *(float32x4_t *)(v10 + 208);
      v277 = *(float32x4_t *)(v10 + 224);
      v276 = *(float32x4_t *)(v10 + 240);
      v279 = *(float32x4_t *)(v10 + 32);
      v278 = *(float32x4_t *)(v10 + 48);
      v280 = *(float32x4_t *)(v10 + 64);
      v281 = atomic_load((unsigned __int8 *)&qword_256930510);
      if ((v281 & 1) == 0)
      {
        v460 = *(float32x4_t *)(v10 + 64);
        v461 = *(float32x4_t *)(v10 + 48);
        v458 = *(float32x4_t *)(v10 + 240);
        v459 = *(float32x4_t *)(v10 + 32);
        v456 = *(float32x4_t *)(v10 + 208);
        v457 = *(float32x4_t *)(v10 + 224);
        v454 = *(float32x4_t *)(*(_QWORD *)(v9 + 8) + 48 * v272);
        v455 = *(float32x4_t *)(v10 + 192);
        v339 = __cxa_guard_acquire(&qword_256930510);
        v273 = v454;
        v274 = v455;
        v275 = v456;
        v277 = v457;
        v276 = v458;
        v279 = v459;
        v280 = v460;
        v278 = v461;
        if (v339)
        {
          *(simd_float4x4 *)zmmword_2569304D0 = __invert_f4(*(simd_float4x4 *)zmmword_2393FA190);
          __cxa_guard_release(&qword_256930510);
          v273 = v454;
          v274 = v455;
          v275 = v456;
          v277 = v457;
          v276 = v458;
          v279 = v459;
          v280 = v460;
          v278 = v461;
        }
      }
      v282 = vaddq_f32(v484, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v493, v273.f32[0]), v490, *(float32x2_t *)v273.f32, 1), v487, v273, 2));
      v283 = vaddq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)zmmword_2569304D0, v276.f32[0]), *(float32x4_t *)&zmmword_2569304D0[16], *(float32x2_t *)v276.f32, 1), *(float32x4_t *)&zmmword_2569304D0[32], v276, 2), *(float32x4_t *)&zmmword_2569304D0[48], v276, 3), vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(
                           vmulq_n_f32(*(float32x4_t *)zmmword_2569304D0, v274.f32[0]),
                           *(float32x4_t *)&zmmword_2569304D0[16],
                           *(float32x2_t *)v274.f32,
                           1),
                         *(float32x4_t *)&zmmword_2569304D0[32],
                         v274,
                         2),
                       *(float32x4_t *)&zmmword_2569304D0[48],
                       v274,
                       3),
                     v282.f32[0]),
                   vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)zmmword_2569304D0, v275.f32[0]), *(float32x4_t *)&zmmword_2569304D0[16], *(float32x2_t *)v275.f32, 1), *(float32x4_t *)&zmmword_2569304D0[32], v275, 2), *(float32x4_t *)&zmmword_2569304D0[48], v275, 3), *(float32x2_t *)v282.f32, 1), vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)zmmword_2569304D0, v277.f32[0]), *(float32x4_t *)&zmmword_2569304D0[16],
                       *(float32x2_t *)v277.f32,
                       1),
                     *(float32x4_t *)&zmmword_2569304D0[32],
                     v277,
                     2),
                   *(float32x4_t *)&zmmword_2569304D0[48],
                   v277,
                   3),
                 v282,
                 2));
      v284 = fmaxf(fabsf(v283.f32[2]), 0.00000011921);
      v285 = v283.f32[2] < 0.0 ? -v284 : v284;
      v283.i64[0] = vaddq_f32(v280, vmlaq_n_f32(vmulq_n_f32(v279, v283.f32[0] / v285), v278, v283.f32[1] / v285)).u64[0];
      v286 = (int)v283.f32[0];
      v287 = (int)v283.f32[1];
      if (v283.f32[2] < 0.0)
      {
        v292 = v499;
        v288 = (unint64_t)v499[1];
      }
      else
      {
        v288 = *((_QWORD *)&v502 + 1);
        if (*((_QWORD *)&v502 + 1))
        {
          v289 = (int)(v287 ^ v286);
          v290 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v502 + 8));
          v290.i16[0] = vaddlv_u8(v290);
          if (v290.u32[0] > 1uLL)
          {
            v291 = (int)(v287 ^ v286);
            if (*((_QWORD *)&v502 + 1) <= v289)
              v291 = v289 % *((_QWORD *)&v502 + 1);
          }
          else
          {
            v291 = (*((_QWORD *)&v502 + 1) - 1) & v289;
          }
          v293 = *(uint64_t ***)(v502 + 8 * v291);
          if (v293)
          {
            v294 = *v293;
            if (v294)
            {
              if (v290.u32[0] < 2uLL)
              {
                while (1)
                {
                  v297 = v294[1];
                  if (v297 == v289)
                  {
                    if (*((_DWORD *)v294 + 4) == (_DWORD)v286 && *((_DWORD *)v294 + 5) == (_DWORD)v287)
                      goto LABEL_234;
                  }
                  else if ((v297 & (*((_QWORD *)&v502 + 1) - 1)) != v291)
                  {
                    goto LABEL_229;
                  }
                  v294 = (uint64_t *)*v294;
                  if (!v294)
                    goto LABEL_229;
                }
              }
              do
              {
                v295 = v294[1];
                if (v295 == v289)
                {
                  if (*((_DWORD *)v294 + 4) == (_DWORD)v286 && *((_DWORD *)v294 + 5) == (_DWORD)v287)
                    goto LABEL_234;
                }
                else
                {
                  if (v295 >= *((_QWORD *)&v502 + 1))
                    v295 %= *((_QWORD *)&v502 + 1);
                  if (v295 != v291)
                    break;
                }
                v294 = (uint64_t *)*v294;
              }
              while (v294);
            }
          }
        }
LABEL_229:
        if ((v286 & 0x80000000) != 0)
        {
LABEL_234:
          v292 = (void **)&v502;
        }
        else
        {
          v292 = (void **)&v502;
          if (*(_DWORD *)(v10 + 276) > (int)v287 && (v287 & 0x80000000) == 0 && *(_DWORD *)(v10 + 272) > (int)v286)
          {
            ++v477;
            v299 = (int8x16_t)vmlaq_laneq_f32(vmlaq_f32(vmulq_n_f32(v468, v282.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v282.f32, 1), v466), v465, v282, 2);
            *((_QWORD *)&v300 + 1) = *((_QWORD *)&v475 + 1);
            *(int32x2_t *)&v300 = vsub_s32(*(int32x2_t *)&v475, vcgt_f32((float32x2_t)0x3ECCCCCD3E4CCCCDLL, (float32x2_t)vdup_lane_s32((int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v464, v464, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(v299, v299, 8uLL)), 0)));
            v473 = vaddq_f64(v473, vcvtq_f64_f32(*(float32x2_t *)v283.f32));
            v475 = v300;
          }
        }
      }
      v301 = v287 ^ v286;
      v302 = (int)(v287 ^ v286);
      if (v288)
      {
        v303 = (uint8x8_t)vcnt_s8((int8x8_t)v288);
        v303.i16[0] = vaddlv_u8(v303);
        if (v303.u32[0] > 1uLL)
        {
          v9 = v301;
          if (v288 <= v301)
            v9 = v302 % v288;
        }
        else
        {
          v9 = (v288 - 1) & v302;
        }
        v304 = (uint64_t **)*((_QWORD *)*v292 + v9);
        if (v304)
        {
          v305 = *v304;
          if (v305)
          {
            if (v303.u32[0] < 2uLL)
            {
              while (1)
              {
                v309 = v305[1];
                if (v309 == v302)
                {
                  if (*((_DWORD *)v305 + 4) == (_DWORD)v286 && *((_DWORD *)v305 + 5) == (_DWORD)v287)
                    goto LABEL_328;
                }
                else if ((v309 & (v288 - 1)) != v9)
                {
                  goto LABEL_261;
                }
                v305 = (uint64_t *)*v305;
                if (!v305)
                  goto LABEL_261;
              }
            }
            do
            {
              v307 = v305[1];
              if (v307 == v302)
              {
                if (*((_DWORD *)v305 + 4) == (_DWORD)v286 && *((_DWORD *)v305 + 5) == (_DWORD)v287)
                  goto LABEL_328;
              }
              else
              {
                if (v307 >= v288)
                  v307 %= v288;
                if (v307 != v9)
                  break;
              }
              v305 = (uint64_t *)*v305;
            }
            while (v305);
          }
        }
      }
LABEL_261:
      v310 = v287 << 32;
      v311 = operator new(0x18uLL);
      *v311 = 0;
      v311[1] = v302;
      v311[2] = v310 | v286;
      v312 = (float)((unint64_t)v292[3] + 1);
      v313 = *((float *)v292 + 8);
      if (!v288 || (float)(v313 * (float)v288) < v312)
        break;
LABEL_318:
      v336 = *v292;
      v337 = (_QWORD *)*((_QWORD *)*v292 + v9);
      if (v337)
      {
        *v311 = *v337;
      }
      else
      {
        *v311 = v292[2];
        v292[2] = v311;
        v336[v9] = v292 + 2;
        if (!*v311)
          goto LABEL_327;
        v338 = *(_QWORD *)(*v311 + 8);
        if ((v288 & (v288 - 1)) != 0)
        {
          if (v338 >= v288)
            v338 %= v288;
        }
        else
        {
          v338 &= v288 - 1;
        }
        v337 = (char *)*v292 + 8 * v338;
      }
      *v337 = v311;
LABEL_327:
      v292[3] = (char *)v292[3] + 1;
      v10 = a2;
LABEL_328:
      v272 += 3;
      v9 = (unint64_t)a3;
      if (v272 >= v239)
      {
        if (v477)
        {
          v347 = vdivq_f64(v473, (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v477), 0));
          v31 = a1;
          v30 = a4;
          if (v347.f64[0] >= 0.0 && v347.f64[1] >= 0.0)
          {
            v348 = *(_QWORD *)(v10 + 272);
            v349.i64[0] = v348;
            v349.i64[1] = HIDWORD(v348);
            v347 = vdivq_f64(v347, vcvtq_f64_u64(v349));
          }
          v496 = v347;
        }
        else
        {
          __asm { FMOV            V0.2D, #-1.0 }
          v496 = _Q0;
          v31 = a1;
          v30 = a4;
        }
        v354 = (int)__p[1];
        v355 = DWORD2(v503);
        kdebug_trace();
        v356 = __p[0];
        if (__p[0])
        {
          do
          {
            v357 = (_QWORD *)*v356;
            operator delete(v356);
            v356 = v357;
          }
          while (v357);
        }
        v358 = v499[0];
        v499[0] = 0;
        if (v358)
          operator delete(v358);
        v359 = vcvt_f32_u32(*(uint32x2_t *)&v475);
        v360 = (float32x2_t)vdup_n_s32(0x3E99999Au);
        v361 = (_QWORD *)v503;
        if ((_QWORD)v503)
        {
          do
          {
            v362 = (_QWORD *)*v361;
            operator delete(v361);
            v361 = v362;
          }
          while (v362);
        }
        v363 = vdiv_f32(v359, v360);
        v364 = (void *)v502;
        *(_QWORD *)&v502 = 0;
        if (v364)
          operator delete(v364);
        v498 = vcvt_u32_f32(v363);
        kdebug_trace();
        v340 = v31[26];
        if (v239)
        {
          v365 = (float)(v355 + v354);
          LODWORD(v502) = 0;
          LODWORD(v499[0]) = 0;
          *(_QWORD *)v510 = 0;
          v8 = v463;
          v366 = v463[1];
          v367 = v463[2];
          v368 = v463[3];
          v369 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*v463, COERCE_FLOAT(*(_OWORD *)v30[2].f32)), v366, v30[2], 1), v367, *(float32x4_t *)v30[2].f32, 2), v368, *(float32x4_t *)v30[2].f32, 3);
          v370 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*v463, COERCE_FLOAT(*(_OWORD *)v30[4].f32)), v366, v30[4], 1), v367, *(float32x4_t *)v30[4].f32, 2), v368, *(float32x4_t *)v30[4].f32, 3);
          v371 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*v463, COERCE_FLOAT(*(_OWORD *)v30[6].f32)), v366, v30[6], 1), v367, *(float32x4_t *)v30[6].f32, 2), v368, *(float32x4_t *)v30[6].f32, 3);
          v506 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*v463, COERCE_FLOAT(*(_OWORD *)v30->f32)), v366, *v30, 1), v367, *(float32x4_t *)v30->f32, 2), v368, *(float32x4_t *)v30->f32, 3);
          v507 = v369;
          v508 = v370;
          v509 = v371;
          v372 = sub_2393EEAD4((float32x4_t *)v10, &v506, (int *)&v502, (int *)v499, &v510[1], v510);
          v373 = 0;
          if (v372)
          {
            v373 = (float)(v510[0] - v510[1]) >= (float)*(unsigned int *)(v10 + 272);
            if ((float)(LODWORD(v499[0]) - v502) >= (float)*(unsigned int *)(v10 + 276))
              v373 = 1;
          }
          v374 = (float)v477 / v365;
          if (*(_BYTE *)(v340 + 8))
          {
            v375 = v374;
            v376 = *(_QWORD *)(v340 + 32);
            v377 = v496;
            if (*(_BYTE *)(v376 + 16))
            {
              *(double *)(v376 + 24) = v375;
              *(_BYTE *)(v376 + 16) = 0;
              v343 = a6;
              v342 = a7;
              v378 = a8;
            }
            else
            {
              if (*(_BYTE *)(v376 + 17))
              {
                v379 = *(double *)(v376 + 24);
                v380 = *(double *)(v376 + 32);
              }
              else
              {
                v379 = *(double *)(v376 + 24);
                v380 = v375 - v379;
                *(double *)(v376 + 32) = v375 - v379;
                *(_BYTE *)(v376 + 17) = 1;
              }
              v343 = a6;
              v342 = a7;
              v378 = a8;
              v381 = *(double *)v376 * v375 + (1.0 - *(double *)v376) * (v379 + v380);
              v382 = *(double *)(v376 + 8) * (v381 - v379) + (1.0 - *(double *)(v376 + 8)) * v380;
              *(double *)(v376 + 24) = v381;
              *(double *)(v376 + 32) = v382;
              v383 = v382 + v381;
              v384 = 1.0;
              if (v383 <= 1.0)
                v384 = v383;
              _NF = v383 < 0.0;
              v374 = 0.0;
              if (!_NF)
                v374 = v384;
            }
          }
          else
          {
            v343 = a6;
            v342 = a7;
            v378 = a8;
            v377 = v496;
          }
          *(_BYTE *)v378 = 1;
          *(float *)(v378 + 4) = v374;
          *(float64x2_t *)(v378 + 8) = v377;
          v385 = *(_DWORD *)(v340 + 44) == 1 && v374 < *(float *)(v340 + 4);
          if (v374 < *(float *)v340)
            v385 = 1;
          v386 = fabsf(v374) <= 0.000001;
          if (v373)
            v341 = v386;
          else
            v341 = v385;
        }
        else
        {
          v341 = 1;
          v8 = v463;
          v343 = a6;
          v342 = a7;
        }
LABEL_377:
        *(_DWORD *)(v340 + 44) = v341;
        kdebug_trace();
        if (v343 && v342)
          *v342 = 0;
        v387 = v31[22];
        v388 = *(double *)(v387 + 88);
        v389 = *(double *)(v10 + 264);
        v238 = v470;
        if (v388 < 0.0)
        {
          *(double *)(v387 + 88) = v389;
          v388 = v389;
        }
        if (v389 - v388 < 5.0)
        {
LABEL_383:
          *(_DWORD *)(v387 + 96) = 0;
LABEL_446:
          v144 = v471;
          return v144 | (v238 << 32);
        }
        v390 = v8[1];
        v391 = v8[2];
        v392 = v8[3];
        v393 = *(float32x4_t *)v30[6].f32;
        v394 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*v8, COERCE_FLOAT(*(_OWORD *)v30[2].f32)), v390, v30[2], 1), v391, *(float32x4_t *)v30[2].f32, 2), v392, *(float32x4_t *)v30[2].f32, 3);
        v395 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*v8, COERCE_FLOAT(*(_OWORD *)v30[4].f32)), v390, v30[4], 1), v391, *(float32x4_t *)v30[4].f32, 2), v392, *(float32x4_t *)v30[4].f32, 3);
        v396 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*v8, v393.f32[0]), v390, *(float32x2_t *)v393.f32, 1), v391, v393, 2);
        v506 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*v8, COERCE_FLOAT(*(_OWORD *)v30->f32)), v390, *v30, 1), v391, *(float32x4_t *)v30->f32, 2), v392, *(float32x4_t *)v30->f32, 3);
        v507 = v394;
        v508 = v395;
        v509 = vmlaq_laneq_f32(v396, v392, v393, 3);
        LODWORD(v502) = 0;
        LODWORD(v499[0]) = 0;
        *(_QWORD *)v510 = 0;
        v397 = *(_DWORD *)(v10 + 276);
        v398 = *(_DWORD *)(v10 + 272);
        v399 = sub_2393EEAD4((float32x4_t *)v10, &v506, (int *)&v502, (int *)v499, &v510[1], v510);
        v400 = 0;
        if (v399)
          v400 = v510[1] < v398 && v510[0] > 0 && (int)v502 < v397 && SLODWORD(v499[0]) > 0;
        if (v498.i32[0] <= 0x14u)
          v400 = 0;
        v404 = (double)v400;
        if (*(_BYTE *)(v387 + 8))
        {
          v405 = *(_QWORD *)(v387 + 64);
          v238 = v470;
          if (*(_BYTE *)(v405 + 16))
          {
            *(double *)(v405 + 24) = v404;
            *(_BYTE *)(v405 + 16) = 0;
          }
          else
          {
            if (*(_BYTE *)(v405 + 17))
            {
              v406 = *(double *)(v405 + 24);
              v407 = *(double *)(v405 + 32);
            }
            else
            {
              v406 = *(double *)(v405 + 24);
              v407 = v404 - v406;
              *(double *)(v405 + 32) = v404 - v406;
              *(_BYTE *)(v405 + 17) = 1;
            }
            v408 = *(double *)v405 * v404 + (1.0 - *(double *)v405) * (v406 + v407);
            v409 = *(double *)(v405 + 8) * (v408 - v406) + (1.0 - *(double *)(v405 + 8)) * v407;
            *(double *)(v405 + 24) = v408;
            *(double *)(v405 + 32) = v409;
            v410 = v409 + v408;
            if (v410 <= 1.0)
              v404 = v410;
            else
              v404 = 1.0;
            if (v410 < 0.0)
              v404 = 0.0;
          }
        }
        else
        {
          v238 = v470;
        }
        v412 = v404 > 0.5 && *(_DWORD *)(v387 + 96) == 1;
        if (v404 > 0.8 || v412)
        {
          *(_DWORD *)(v387 + 96) = 1;
          goto LABEL_446;
        }
        if (v498.i32[1] >= 0x14u)
          v413 = 0.0;
        else
          v413 = 1.0;
        if (*(_BYTE *)(v387 + 9))
        {
          v414 = *(_QWORD *)(v387 + 72);
          if (*(_BYTE *)(v414 + 16))
          {
            *(double *)(v414 + 24) = v413;
            *(_BYTE *)(v414 + 16) = 0;
          }
          else
          {
            if (*(_BYTE *)(v414 + 17))
            {
              v415 = *(double *)(v414 + 24);
              v416 = *(double *)(v414 + 32);
            }
            else
            {
              v415 = *(double *)(v414 + 24);
              v416 = v413 - v415;
              *(double *)(v414 + 32) = v413 - v415;
              *(_BYTE *)(v414 + 17) = 1;
            }
            v417 = *(double *)v414 * v413 + (1.0 - *(double *)v414) * (v415 + v416);
            v418 = *(double *)(v414 + 8) * (v417 - v415) + (1.0 - *(double *)(v414 + 8)) * v416;
            *(double *)(v414 + 24) = v417;
            *(double *)(v414 + 32) = v418;
            v419 = v418 + v417;
            if (v419 <= 1.0)
              v413 = v419;
            else
              v413 = 1.0;
            if (v419 < 0.0)
            {
              v420 = 0;
              v413 = 0.0;
LABEL_437:
              v422 = v413 > 0.5 && *(_DWORD *)(v387 + 96) == 2;
              if ((v420 & 1) != 0 || v422)
              {
                *(_DWORD *)(v387 + 96) = 2;
                goto LABEL_446;
              }
              goto LABEL_383;
            }
          }
        }
        if (v413 <= 0.8)
          v420 = 0;
        else
          v420 = sub_2393F2BF4(v387, (float32x4_t *)v10, v30, v8);
        goto LABEL_437;
      }
    }
    v314 = (v288 & (v288 - 1)) != 0;
    if (v288 < 3)
      v314 = 1;
    v315 = v314 | (2 * v288);
    v316 = vcvtps_u32_f32(v312 / v313);
    if (v315 <= v316)
      prime = v316;
    else
      prime = v315;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v288 = (unint64_t)v292[1];
    }
    if (prime <= v288)
    {
      if (prime >= v288)
        goto LABEL_313;
      v329 = vcvtps_u32_f32((float)(unint64_t)v292[3] / *((float *)v292 + 8));
      if (v288 < 3 || (v330 = (uint8x8_t)vcnt_s8((int8x8_t)v288), v330.i16[0] = vaddlv_u8(v330), v330.u32[0] > 1uLL))
      {
        v329 = std::__next_prime(v329);
      }
      else
      {
        v331 = 1 << -(char)__clz(v329 - 1);
        if (v329 >= 2)
          v329 = v331;
      }
      if (prime <= v329)
        prime = v329;
      if (prime >= v288)
        goto LABEL_313;
      if (!prime)
      {
        v335 = *v292;
        *v292 = 0;
        if (v335)
          operator delete(v335);
        v292[1] = 0;
        goto LABEL_313;
      }
    }
    if (prime >> 61)
      goto LABEL_475;
    v318 = operator new(8 * prime);
    v319 = *v292;
    *v292 = v318;
    if (v319)
      operator delete(v319);
    v320 = 0;
    v292[1] = (void *)prime;
    do
      *((_QWORD *)*v292 + v320++) = 0;
    while (prime != v320);
    v322 = v292 + 2;
    v321 = v292[2];
    if (!v321)
      goto LABEL_313;
    v323 = v321[1];
    v324 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v325 = v323 & v324;
      *((_QWORD *)*v292 + v325) = v322;
      while (1)
      {
        v326 = (_QWORD *)*v321;
        if (!*v321)
          break;
        v327 = v326[1] & v324;
        if (v327 == v325)
        {
          v321 = (_QWORD *)*v321;
        }
        else if (*((_QWORD *)*v292 + v327))
        {
          *v321 = *v326;
          v328 = 8 * v327;
          *v326 = **(_QWORD **)((char *)*v292 + v328);
          **(_QWORD **)((char *)*v292 + v328) = v326;
        }
        else
        {
          *((_QWORD *)*v292 + v327) = v321;
          v321 = v326;
          v325 = v327;
        }
      }
LABEL_313:
      v288 = (unint64_t)v292[1];
      if ((v288 & (v288 - 1)) != 0)
      {
        if (v288 <= v302)
          v9 = v302 % v288;
        else
          v9 = v302;
      }
      else
      {
        v9 = (v288 - 1) & v302;
      }
      goto LABEL_318;
    }
    if (v323 >= prime)
      v323 %= prime;
    *((_QWORD *)*v292 + v323) = v322;
    v332 = (_QWORD *)*v321;
    if (!*v321)
      goto LABEL_313;
    while (1)
    {
      v334 = v332[1];
      if (v334 >= prime)
        v334 %= prime;
      if (v334 != v323)
      {
        if (!*((_QWORD *)*v292 + v334))
        {
          *((_QWORD *)*v292 + v334) = v321;
          goto LABEL_299;
        }
        *v321 = *v332;
        v333 = 8 * v334;
        *v332 = **(_QWORD **)((char *)*v292 + v333);
        **(_QWORD **)((char *)*v292 + v333) = v332;
        v332 = v321;
      }
      v334 = v323;
LABEL_299:
      v321 = v332;
      v332 = (_QWORD *)*v332;
      v323 = v334;
      if (!v332)
        goto LABEL_313;
    }
  }
  return v144 | (v238 << 32);
}

uint64_t OCDataBufferGetIOSurface(uint64_t a1)
{
  int DataFormatType;

  if (a1
    && ((DataFormatType = CVDataBufferGetDataFormatType(), DataFormatType == 2021227107) || DataFormatType == 1278227250))
  {
    return CVDataBufferGetIOSurface();
  }
  else
  {
    return 0;
  }
}

uint64_t OCDataBufferGetBytesPerData(uint64_t result)
{
  int DataFormatType;
  int v3;

  if (result)
  {
    DataFormatType = CVDataBufferGetDataFormatType();
    if (DataFormatType == 1278227250 || DataFormatType == 2021227107)
      v3 = DataFormatType;
    else
      v3 = 0;
    if (v3 == 2021227107)
      return 48;
    else
      return 4 * (v3 == 1278227250);
  }
  return result;
}

uint64_t OCDataBufferGetDataFormatType(uint64_t result)
{
  if (result)
  {
    LODWORD(result) = CVDataBufferGetDataFormatType();
    if ((_DWORD)result == 1278227250 || (_DWORD)result == 2021227107)
      return result;
    else
      return 0;
  }
  return result;
}

unint64_t OCDataBufferGetSize(unint64_t result)
{
  int DataFormatType;
  int v3;
  unint64_t v4;
  int v5;
  unint64_t DataSize;

  if (result)
  {
    DataFormatType = CVDataBufferGetDataFormatType();
    if (DataFormatType == 1278227250 || DataFormatType == 2021227107)
      v3 = DataFormatType;
    else
      v3 = 0;
    if (v3 == 2021227107)
      v4 = 48;
    else
      v4 = 4 * (v3 == 1278227250);
    v5 = CVDataBufferGetDataFormatType();
    if (v5 == 2021227107 || v5 == 1278227250)
    {
      DataSize = CVDataBufferGetDataSize();
      if (v4)
        return DataSize / v4;
    }
    else
    {
      DataSize = 0;
      if (v4)
        return DataSize / v4;
    }
    return 0;
  }
  return result;
}

uint64_t OCDataBufferGetDataSize(uint64_t a1)
{
  int DataFormatType;

  if (a1
    && ((DataFormatType = CVDataBufferGetDataFormatType(), DataFormatType == 2021227107) || DataFormatType == 1278227250))
  {
    return CVDataBufferGetDataSize();
  }
  else
  {
    return 0;
  }
}

char *OCDataBufferGetDataAt(char *result, unint64_t a2)
{
  int DataFormatType;
  int v5;
  unint64_t v6;
  int v7;
  unint64_t DataSize;
  int v9;
  int v11;
  int v12;
  __IOSurface *IOSurface;
  char *BaseAddress;

  if (result)
  {
    DataFormatType = CVDataBufferGetDataFormatType();
    if (DataFormatType == 1278227250 || DataFormatType == 2021227107)
      v5 = DataFormatType;
    else
      v5 = 0;
    if (v5 == 2021227107)
      v6 = 48;
    else
      v6 = 4 * (v5 == 1278227250);
    v7 = CVDataBufferGetDataFormatType();
    if (v7 == 2021227107 || v7 == 1278227250)
    {
      DataSize = CVDataBufferGetDataSize();
      if (!v6)
        return 0;
    }
    else
    {
      DataSize = 0;
      if (!v6)
        return 0;
    }
    if (DataSize / v6 > a2)
    {
      v9 = CVDataBufferGetDataFormatType();
      if (v9 == 1278227250 || v9 == 2021227107)
        v11 = v9;
      else
        v11 = 0;
      v12 = CVDataBufferGetDataFormatType();
      if (v12 == 2021227107 || v12 == 1278227250)
        IOSurface = (__IOSurface *)CVDataBufferGetIOSurface();
      else
        IOSurface = 0;
      BaseAddress = (char *)IOSurfaceGetBaseAddress(IOSurface);
      if (v11 == 1278227250)
        return &BaseAddress[4 * a2];
      if (v11 == 2021227107)
        return &BaseAddress[48 * a2];
    }
    return 0;
  }
  return result;
}

void *OCDataBufferGetBaseAddress(uint64_t a1)
{
  int DataFormatType;
  int v2;
  int v3;
  uint64_t v5;
  unint64_t DataSize;
  unint64_t v7;
  int v8;
  __IOSurface *IOSurface;

  if (!a1)
    return 0;
  DataFormatType = CVDataBufferGetDataFormatType();
  if (DataFormatType != 2021227107 && DataFormatType != 1278227250)
    return 0;
  v2 = CVDataBufferGetDataFormatType();
  v3 = CVDataBufferGetDataFormatType();
  if (v3 != 2021227107 && v3 != 1278227250)
    return 0;
  if (v2 != 1278227250 && v2 != 2021227107)
    v2 = 0;
  if (v2 == 1278227250)
    v5 = 3;
  else
    v5 = -1;
  DataSize = CVDataBufferGetDataSize();
  v7 = 47;
  if (v2 != 2021227107)
    v7 = v5;
  if (v7 >= DataSize)
    return 0;
  v8 = CVDataBufferGetDataFormatType();
  if (v8 == 2021227107 || v8 == 1278227250)
    IOSurface = (__IOSurface *)CVDataBufferGetIOSurface();
  else
    IOSurface = 0;
  return IOSurfaceGetBaseAddress(IOSurface);
}

uint64_t OCDataBufferCreateWithIOSurface(uint64_t a1, const void *a2, uint64_t a3, int a4)
{
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  void *BaseAddress;
  IOSurfaceRef buffer;

  if (!a3)
    return 4294960615;
  if (!a2 || a4 != 2021227107 && a4 != 1278227250)
    return 4294960635;
  buffer = 0;
  v5 = 48;
  if (a4 != 2021227107)
    v5 = 4 * (a4 == 1278227250);
  v6 = v5 * a3;
  v7 = sub_23938BFB0(a4, v5 * a3, &buffer);
  if (!(_DWORD)v7)
  {
    BaseAddress = IOSurfaceGetBaseAddress(buffer);
    memcpy(BaseAddress, a2, v6);
    v7 = CVDataBufferCreateWithIOSurface();
    CFRelease(buffer);
  }
  return v7;
}

const void *OCDataBufferRetain(const void *a1)
{
  const void *v1;
  int DataFormatType;

  v1 = a1;
  if (a1)
  {
    DataFormatType = CVDataBufferGetDataFormatType();
    if (DataFormatType == 2021227107 || DataFormatType == 1278227250)
      CFRetain(v1);
    else
      return 0;
  }
  return v1;
}

void OCDataBufferRelease(const void *a1)
{
  int DataFormatType;

  if (a1)
  {
    DataFormatType = CVDataBufferGetDataFormatType();
    if (DataFormatType == 2021227107 || DataFormatType == 1278227250)
      CFRelease(a1);
  }
}

uint64_t OCImageFilterBilateralCreate(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  BOOL v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint8_t buf[16];

  result = 4294967294;
  if (a1 && a2)
  {
    if (*(_DWORD *)a1 > 1u
      || (*(_QWORD *)(a1 + 8) >= 2uLL ? (v5 = (*(_QWORD *)(a1 + 8) & 1) == 0) : (v5 = 1),
          v5 || *(float *)(a1 + 20) <= 0.0 || *(float *)(a1 + 16) <= 0.0))
    {
      if (qword_256930018 != -1)
        dispatch_once(&qword_256930018, &unk_250AD5A50);
      v9 = qword_256930010;
      if (os_log_type_enabled((os_log_t)qword_256930010, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_239388000, v9, OS_LOG_TYPE_ERROR, "Failed to create Bilateral Filter, invalid filter configuration parameters", buf, 2u);
      }
    }
    else
    {
      v6 = operator new(0x10uLL, MEMORY[0x24BEDB6B8]);
      if (!v6)
        return 4294967293;
      v7 = v6;
      *v6 = 0;
      v6[1] = 0;
      sub_2393907B8(&v10, a1);
      v8 = v10;
      *v7 = v10;
      if (v8)
      {
        result = 0;
        *((_DWORD *)v7 + 2) = *(_DWORD *)a1;
        *a2 = v7;
        return result;
      }
      OCImageFilterDestroy(v7);
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

void sub_2393907B8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  float v7;
  float v8;
  NSObject *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  unint64_t v16;
  float v17;
  float v18;
  NSObject *v22;
  __int16 v23[8];
  uint8_t buf[2];
  __int16 v25;

  if (*(_DWORD *)a2 == 1)
  {
    v15 = operator new();
    v5 = v15;
    *(_OWORD *)v15 = 0u;
    *(_OWORD *)(v15 + 16) = 0u;
    *(_OWORD *)(v15 + 32) = 0u;
    *(_QWORD *)(v15 + 48) = 0;
    *(_QWORD *)v15 = &off_250AD5E10;
    v16 = *(_QWORD *)(a2 + 8);
    v17 = *(float *)(a2 + 16);
    v18 = *(float *)(a2 + 20);
    if (v18 < 0.00000001 || v17 < 0.00000001 || v16 < 2 || (*(_QWORD *)(a2 + 8) & 1) == 0)
    {
      *a1 = 0;
      *(_QWORD *)v15 = &off_250AD6228;
      JUMPOUT(0x23B83C4BCLL);
    }
    *(_QWORD *)(v15 + 8) = v16;
    *(float *)(v15 + 16) = v17;
    *(float *)(v15 + 20) = v18;
    sub_2393C3FFC((_QWORD *)v15);
    *(_BYTE *)(v5 + 24) = 1;
    if (qword_256930018 != -1)
      dispatch_once(&qword_256930018, &unk_250AD5A50);
    v12 = qword_256930010;
    if (!os_log_type_enabled((os_log_t)qword_256930010, OS_LOG_TYPE_DEBUG))
      goto LABEL_30;
    *(_WORD *)buf = 0;
    v13 = "Created cross-bilateral filter";
    v14 = buf;
    goto LABEL_39;
  }
  if (!*(_DWORD *)a2)
  {
    v4 = operator new();
    v5 = v4;
    *(_OWORD *)v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_QWORD *)v4 = &off_250AD6228;
    *(_QWORD *)(v4 + 40) = 0;
    *(_QWORD *)(v4 + 48) = 0;
    *(_QWORD *)(v4 + 32) = 0;
    *(_BYTE *)(v4 + 24) = 0;
    *(_QWORD *)(v4 + 16) = 0;
    v6 = *(_QWORD *)(a2 + 8);
    v7 = *(float *)(a2 + 16);
    v8 = *(float *)(a2 + 20);
    if (v8 < 0.00000001 || v7 < 0.00000001 || v6 < 2 || (*(_QWORD *)(a2 + 8) & 1) == 0)
    {
      *a1 = 0;
      sub_2393C3D28((_QWORD *)v4);
    }
    *(_QWORD *)(v4 + 8) = v6;
    *(float *)(v4 + 16) = v7;
    *(float *)(v4 + 20) = v8;
    sub_2393C3FFC((_QWORD *)v4);
    *(_BYTE *)(v5 + 24) = 1;
    if (qword_256930018 != -1)
      dispatch_once(&qword_256930018, &unk_250AD5A50);
    v12 = qword_256930010;
    if (!os_log_type_enabled((os_log_t)qword_256930010, OS_LOG_TYPE_DEBUG))
      goto LABEL_30;
    v25 = 0;
    v13 = "Created bilateral filter";
    v14 = (uint8_t *)&v25;
LABEL_39:
    _os_log_debug_impl(&dword_239388000, v12, OS_LOG_TYPE_DEBUG, v13, v14, 2u);
LABEL_30:
    *a1 = v5;
    return;
  }
  if (qword_256930018 != -1)
    dispatch_once(&qword_256930018, &unk_250AD5A50);
  v22 = qword_256930010;
  if (os_log_type_enabled((os_log_t)qword_256930010, OS_LOG_TYPE_ERROR))
  {
    v23[0] = 0;
    _os_log_error_impl(&dword_239388000, v22, OS_LOG_TYPE_ERROR, "Invalid filter-type!", (uint8_t *)v23, 2u);
  }
  *a1 = 0;
}

uint64_t OCImageFilterDestroy(uint64_t *a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t result;
  uint8_t v5[16];

  if (!a1)
    return 4294967294;
  v2 = *a1;
  *a1 = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  MEMORY[0x23B83C4BC](a1, 0x1020C403A5D3213);
  if (qword_256930018 != -1)
    dispatch_once(&qword_256930018, &unk_250AD5A50);
  v3 = qword_256930010;
  result = os_log_type_enabled((os_log_t)qword_256930010, OS_LOG_TYPE_DEBUG);
  if ((_DWORD)result)
  {
    *(_WORD *)v5 = 0;
    _os_log_debug_impl(&dword_239388000, v3, OS_LOG_TYPE_DEBUG, "Destroyed OCImageFilter handle", v5, 2u);
    return 0;
  }
  return result;
}

void sub_239390B5C()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.CoreOCModules", "General");
  v1 = (void *)qword_256930010;
  qword_256930010 = (uint64_t)v0;

}

uint64_t OCImageFilterStart(uint64_t a1)
{
  if (a1)
    return 0;
  else
    return 4294967294;
}

uint64_t OCImageFilterStop(uint64_t a1)
{
  if (a1)
    return 0;
  else
    return 4294967294;
}

uint64_t OCImageFilterApplyFilter(uint64_t *a1, CVPixelBufferRef pixelBuffer, __CVBuffer *a3)
{
  uint64_t result;
  uint64_t v7;
  size_t Width;
  size_t Height;
  OSType PixelFormatType;
  OSType v11;
  BOOL v13;
  char v14;
  size_t v15;
  char v16;
  void *BaseAddress;
  float32x2_t v22;
  NSObject *v23;
  _QWORD context[3];
  uint8_t buf[8];
  void *v26;
  void *v27;
  uint64x2_t v28;
  size_t BytesPerRow;

  result = 4294967294;
  if (a1 && pixelBuffer && a3)
  {
    if (*((_DWORD *)a1 + 2) == 1)
    {
      return 4294967294;
    }
    else
    {
      v7 = *a1;
      Width = CVPixelBufferGetWidth(pixelBuffer);
      Height = CVPixelBufferGetHeight(pixelBuffer);
      PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
      v11 = CVPixelBufferGetPixelFormatType(a3);
      v13 = PixelFormatType != 1717855600 && PixelFormatType != 1278226534;
      v14 = PixelFormatType != v11 || v13;
      if (Width
        && Height
        && Width == CVPixelBufferGetWidth(a3)
        && ((v15 = CVPixelBufferGetHeight(a3), !v7) ? (v16 = 1) : (v16 = v14), (v16 & 1) == 0 && Height == v15))
      {
        CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL);
        BaseAddress = CVPixelBufferGetBaseAddress(pixelBuffer);
        CVPixelBufferLockBaseAddress(a3, 0);
        *(_QWORD *)buf = &off_250AD61D8;
        v26 = BaseAddress;
        v27 = CVPixelBufferGetBaseAddress(a3);
        v28.i64[0] = CVPixelBufferGetWidth(pixelBuffer);
        v28.i64[1] = CVPixelBufferGetHeight(pixelBuffer);
        BytesPerRow = CVPixelBufferGetBytesPerRow(pixelBuffer);
        context[1] = v7;
        context[2] = 20;
        context[0] = buf;
        __asm { FMOV            V1.2S, #20.0 }
        v22 = vrndp_f32(vdiv_f32(vcvt_f32_f64(vcvtq_f64_u64(v28)), _D1));
        dispatch_apply_f((unint64_t)vmul_lane_f32(v22, v22, 1).f32[0], 0, context, (void (__cdecl *)(void *, size_t))sub_239390DCC);
        CVPixelBufferUnlockBaseAddress(a3, 0);
        CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
        return 0;
      }
      else
      {
        if (qword_256930018 != -1)
          dispatch_once(&qword_256930018, &unk_250AD5A50);
        v23 = qword_256930010;
        if (os_log_type_enabled((os_log_t)qword_256930010, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_239388000, v23, OS_LOG_TYPE_ERROR, "Failed to apply bilateral filter to input image", buf, 2u);
        }
        return 0xFFFFFFFFLL;
      }
    }
  }
  return result;
}

uint64_t sub_239390DCC(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v13;
  unint64_t v14;

  if (result)
  {
    v2 = result;
    v3 = *(_QWORD *)(result + 16);
    if (v3)
    {
      v4 = *(_QWORD **)result;
      v5 = vcvtps_u32_f32((float)*(unint64_t *)(*(_QWORD *)result + 24) / (float)v3);
      if (v5 * vcvtps_u32_f32((float)*(unint64_t *)(*(_QWORD *)result + 32) / (float)v3) > a2)
      {
        v6 = a2 / v5;
        v7 = a2 % v5;
        v8 = v7 * v3;
        v9 = v7 * v3 + v3;
        v10 = v6 * v3;
        v11 = v6 * v3 + v3;
        if (v6 * v3 < v11 && v8 < v9)
        {
          do
          {
            v13 = v4[2] + v4[5] * v10;
            v14 = v8;
            do
            {
              if (v14 < v4[3] && v10 < v4[4])
              {
                result = (*(uint64_t (**)(_QWORD, _QWORD *, unint64_t, unint64_t))(**(_QWORD **)(v2 + 8) + 24))(*(_QWORD *)(v2 + 8), v4, v14, v10);
                if ((result & 0xFF00000000) != 0)
                  *(_DWORD *)(v13 + 4 * v14) = result;
              }
              ++v14;
            }
            while (v14 != v9);
            ++v10;
          }
          while (v10 != v11);
        }
      }
    }
  }
  return result;
}

uint64_t OCImageFilterApplyCrossBilateralFilter(uint64_t *a1, CVPixelBufferRef pixelBuffer, __CVBuffer *a3, __CVBuffer *a4)
{
  uint64_t result;
  uint64_t v9;
  size_t Width;
  size_t Height;
  OSType PixelFormatType;
  OSType v13;
  _BOOL4 v15;
  int v16;
  OSType v17;
  _BOOL4 v18;
  _BOOL4 v19;
  BOOL v20;
  int v22;
  int v23;
  int v24;
  void *BaseAddress;
  void *BaseAddressOfPlane;
  float32x2_t v31;
  _QWORD context[3];
  _QWORD v33[3];
  uint64x2_t v34;
  size_t BytesPerRow;
  void *v36;
  size_t BytesPerRowOfPlane;

  result = 4294967294;
  if (a1 && pixelBuffer && a3 && a4)
  {
    if (*((_DWORD *)a1 + 2) == 1)
    {
      v9 = *a1;
      Width = CVPixelBufferGetWidth(pixelBuffer);
      Height = CVPixelBufferGetHeight(pixelBuffer);
      PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
      v13 = CVPixelBufferGetPixelFormatType(a4);
      v15 = PixelFormatType != 1717855600 && PixelFormatType != 1278226534;
      v16 = PixelFormatType != v13 || v15;
      v17 = CVPixelBufferGetPixelFormatType(a3);
      v18 = Width != CVPixelBufferGetWidth(a3) || Width != CVPixelBufferGetWidth(a4);
      v19 = Height != CVPixelBufferGetHeight(a3) || Height != CVPixelBufferGetHeight(a4);
      if (v9)
        v20 = Width == 0;
      else
        v20 = 1;
      v22 = v20 || Height == 0 || v18;
      v23 = v22 | v19 | v16;
      if (v17 == 875704422)
        v24 = v23;
      else
        v24 = 1;
      if ((v24 & 1) == 0)
      {
        CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL);
        BaseAddress = CVPixelBufferGetBaseAddress(pixelBuffer);
        CVPixelBufferLockBaseAddress(a3, 1uLL);
        BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(a3, 0);
        CVPixelBufferLockBaseAddress(a4, 0);
        v33[0] = &off_250AD6200;
        v33[1] = BaseAddress;
        v36 = BaseAddressOfPlane;
        v33[2] = CVPixelBufferGetBaseAddress(a4);
        v34.i64[0] = CVPixelBufferGetWidth(pixelBuffer);
        v34.i64[1] = CVPixelBufferGetHeight(pixelBuffer);
        BytesPerRow = CVPixelBufferGetBytesPerRow(pixelBuffer);
        BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a3, 0);
        context[1] = v9;
        context[2] = 20;
        context[0] = v33;
        __asm { FMOV            V1.2S, #20.0 }
        v31 = vrndp_f32(vdiv_f32(vcvt_f32_f64(vcvtq_f64_u64(v34)), _D1));
        dispatch_apply_f((unint64_t)vmul_lane_f32(v31, v31, 1).f32[0], 0, context, (void (__cdecl *)(void *, size_t))sub_239390DCC);
        CVPixelBufferUnlockBaseAddress(a4, 0);
        CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
      }
      return (v24 << 31 >> 31);
    }
    else
    {
      return 4294967294;
    }
  }
  return result;
}

uint64_t OCExplicitFeedbackCreate(uint64_t *a1, uint64_t **a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  int64x2_t v11;
  char *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  char *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  char *v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  int64x2_t v38;
  char *v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  char *v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  char *v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t *v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t result;

  if (!a2)
    return 0xFFFFFFFFLL;
  v4 = (uint64_t *)operator new(8uLL, MEMORY[0x24BEDB6B8]);
  v5 = v4;
  if (v4)
    *v4 = 0;
  if (a1)
  {
    v6 = *a1;
    v7 = a1[1];
    v8 = *((_DWORD *)a1 + 4);
    v9 = *((_DWORD *)a1 + 5);
    v10 = operator new();
    *(_QWORD *)v10 = v6;
    *(_BYTE *)(v10 + 8) = 1;
    v11 = vdupq_n_s64(0x3FB999999999999AuLL);
    *(_QWORD *)(v10 + 32) = v7;
    *(int64x2_t *)(v10 + 16) = v11;
    *(_DWORD *)(v10 + 40) = 1025758986;
    *(_BYTE *)(v10 + 44) = 1;
    *(int64x2_t *)(v10 + 48) = v11;
    *(_DWORD *)(v10 + 64) = v8;
    *(_DWORD *)(v10 + 68) = 1063675494;
    *(_BYTE *)(v10 + 72) = 1;
    *(_OWORD *)(v10 + 80) = xmmword_2393F5340;
    *(_DWORD *)(v10 + 96) = v9;
    *(_DWORD *)(v10 + 100) = 1056964608;
    *(_WORD *)(v10 + 104) = 257;
    *(_BYTE *)(v10 + 106) = 0;
    *(_OWORD *)(v10 + 112) = xmmword_2393F5350;
    *(_OWORD *)(v10 + 128) = xmmword_2393F5350;
    *(_OWORD *)(v10 + 192) = 0u;
    *(_OWORD *)(v10 + 208) = 0u;
    *(_OWORD *)(v10 + 160) = 0u;
    *(_OWORD *)(v10 + 176) = 0u;
    *(_OWORD *)(v10 + 144) = xmmword_2393F5350;
    v12 = (char *)operator new(0x70uLL);
    *((_QWORD *)v12 + 1) = 0;
    *((_QWORD *)v12 + 2) = 0;
    *(_QWORD *)v12 = &off_250AD5980;
    v13 = *(_OWORD *)(v10 + 16);
    *(_OWORD *)(v12 + 24) = *(_OWORD *)v10;
    *(_OWORD *)(v12 + 40) = v13;
    *(_OWORD *)(v12 + 56) = 0u;
    *(_OWORD *)(v12 + 72) = 0u;
    *(_OWORD *)(v12 + 88) = 0u;
    *((_QWORD *)v12 + 13) = 0;
    if (v12[32])
    {
      v14 = operator new();
      *(_OWORD *)v14 = *(_OWORD *)(v12 + 40);
      *(_WORD *)(v14 + 16) = 1;
      *(_OWORD *)(v14 + 24) = 0u;
      *(_OWORD *)(v14 + 40) = 0u;
      *(_OWORD *)(v14 + 56) = 0u;
      v15 = *((_QWORD *)v12 + 13);
      *((_QWORD *)v12 + 13) = v14;
      if (v15)
        MEMORY[0x23B83C4BC](v15, 0x1000C408F47704FLL);
    }
    v16 = *(std::__shared_weak_count **)(v10 + 168);
    *(_QWORD *)(v10 + 160) = v12 + 24;
    *(_QWORD *)(v10 + 168) = v12;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = operator new(0x80uLL);
    v19[1] = 0;
    v19[2] = 0;
    *v19 = &off_250AD59B8;
    v20 = sub_2393F2AA4((uint64_t)(v19 + 3), (__int128 *)(v10 + 96));
    v21 = *(std::__shared_weak_count **)(v10 + 184);
    *(_QWORD *)(v10 + 176) = v20;
    *(_QWORD *)(v10 + 184) = v19;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = (char *)operator new(0x48uLL);
    *((_QWORD *)v24 + 1) = 0;
    *((_QWORD *)v24 + 2) = 0;
    *(_QWORD *)v24 = &off_250AD59F0;
    v25 = *(_OWORD *)(v10 + 48);
    *(_OWORD *)(v24 + 24) = *(_OWORD *)(v10 + 32);
    *(_OWORD *)(v24 + 40) = v25;
    *((_QWORD *)v24 + 7) = 0;
    *((_DWORD *)v24 + 16) = 0;
    if (v24[36])
    {
      v26 = operator new();
      *(_OWORD *)v26 = *(_OWORD *)(v24 + 40);
      *(_WORD *)(v26 + 16) = 1;
      *(_QWORD *)(v26 + 24) = 0;
      *(_QWORD *)(v26 + 32) = 0;
      v27 = *((_QWORD *)v24 + 7);
      *((_QWORD *)v24 + 7) = v26;
      if (v27)
        MEMORY[0x23B83C4BC](v27, 0x1000C40FA9F20B1);
    }
    v28 = *(std::__shared_weak_count **)(v10 + 200);
    *(_QWORD *)(v10 + 192) = v24 + 24;
    *(_QWORD *)(v10 + 200) = v24;
    if (v28)
    {
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    v31 = (char *)operator new(0x48uLL);
    *((_QWORD *)v31 + 1) = 0;
    *((_QWORD *)v31 + 2) = 0;
    *(_QWORD *)v31 = &off_250AD5A28;
    v32 = *(_OWORD *)(v10 + 80);
    *(_OWORD *)(v31 + 24) = *(_OWORD *)(v10 + 64);
    *(_OWORD *)(v31 + 40) = v32;
    *((_QWORD *)v31 + 7) = 0;
    *((_DWORD *)v31 + 17) = 0;
    if (v31[32])
    {
      v33 = operator new();
      *(_OWORD *)v33 = *(_OWORD *)(v31 + 40);
      *(_WORD *)(v33 + 16) = 1;
      *(_QWORD *)(v33 + 24) = 0;
      *(_QWORD *)(v33 + 32) = 0;
      v34 = *((_QWORD *)v31 + 7);
      *((_QWORD *)v31 + 7) = v33;
      if (v34)
        MEMORY[0x23B83C4BC](v34, 0x1000C40FA9F20B1);
    }
    v35 = *(std::__shared_weak_count **)(v10 + 216);
    *(_QWORD *)(v10 + 208) = v31 + 24;
    *(_QWORD *)(v10 + 216) = v31;
    if (!v35)
      goto LABEL_62;
    v36 = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
  }
  else
  {
    v10 = operator new();
    *(_QWORD *)(v10 + 32) = 0x4548000044C80000;
    *(_QWORD *)(v10 + 64) = 0x3F6666663F4CCCCDLL;
    *(_QWORD *)(v10 + 96) = 0x3F0000003ECCCCCDLL;
    *(_OWORD *)(v10 + 176) = 0u;
    *(_OWORD *)(v10 + 192) = 0u;
    *(_OWORD *)(v10 + 208) = 0u;
    *(_QWORD *)v10 = 0x3FE0000000000000;
    *(_BYTE *)(v10 + 8) = 1;
    v38 = vdupq_n_s64(0x3FB999999999999AuLL);
    *(int64x2_t *)(v10 + 16) = v38;
    *(_DWORD *)(v10 + 40) = 1025758986;
    *(_BYTE *)(v10 + 44) = 1;
    *(int64x2_t *)(v10 + 48) = v38;
    *(_BYTE *)(v10 + 72) = 1;
    *(_OWORD *)(v10 + 80) = xmmword_2393F5340;
    *(_WORD *)(v10 + 104) = 257;
    *(_BYTE *)(v10 + 106) = 0;
    *(_OWORD *)(v10 + 112) = xmmword_2393F5350;
    *(_OWORD *)(v10 + 128) = xmmword_2393F5350;
    *(_OWORD *)(v10 + 144) = xmmword_2393F5350;
    *(_OWORD *)(v10 + 160) = 0u;
    v39 = (char *)operator new(0x70uLL);
    *((_QWORD *)v39 + 1) = 0;
    *((_QWORD *)v39 + 2) = 0;
    *(_QWORD *)v39 = &off_250AD5980;
    v40 = *(_OWORD *)(v10 + 16);
    *(_OWORD *)(v39 + 24) = *(_OWORD *)v10;
    *(_OWORD *)(v39 + 40) = v40;
    *(_OWORD *)(v39 + 56) = 0u;
    *(_OWORD *)(v39 + 72) = 0u;
    *(_OWORD *)(v39 + 88) = 0u;
    *((_QWORD *)v39 + 13) = 0;
    if (v39[32])
    {
      v41 = operator new();
      *(_OWORD *)v41 = *(_OWORD *)(v39 + 40);
      *(_WORD *)(v41 + 16) = 1;
      *(_OWORD *)(v41 + 24) = 0u;
      *(_OWORD *)(v41 + 40) = 0u;
      *(_OWORD *)(v41 + 56) = 0u;
      v42 = *((_QWORD *)v39 + 13);
      *((_QWORD *)v39 + 13) = v41;
      if (v42)
        MEMORY[0x23B83C4BC](v42, 0x1000C408F47704FLL);
    }
    v43 = *(std::__shared_weak_count **)(v10 + 168);
    *(_QWORD *)(v10 + 160) = v39 + 24;
    *(_QWORD *)(v10 + 168) = v39;
    if (v43)
    {
      v44 = (unint64_t *)&v43->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    v46 = operator new(0x80uLL);
    v46[1] = 0;
    v46[2] = 0;
    *v46 = &off_250AD59B8;
    v47 = sub_2393F2AA4((uint64_t)(v46 + 3), (__int128 *)(v10 + 96));
    v48 = *(std::__shared_weak_count **)(v10 + 184);
    *(_QWORD *)(v10 + 176) = v47;
    *(_QWORD *)(v10 + 184) = v46;
    if (v48)
    {
      v49 = (unint64_t *)&v48->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    v51 = (char *)operator new(0x48uLL);
    *((_QWORD *)v51 + 1) = 0;
    *((_QWORD *)v51 + 2) = 0;
    *(_QWORD *)v51 = &off_250AD59F0;
    v52 = *(_OWORD *)(v10 + 48);
    *(_OWORD *)(v51 + 24) = *(_OWORD *)(v10 + 32);
    *(_OWORD *)(v51 + 40) = v52;
    *((_QWORD *)v51 + 7) = 0;
    *((_DWORD *)v51 + 16) = 0;
    if (v51[36])
    {
      v53 = operator new();
      *(_OWORD *)v53 = *(_OWORD *)(v51 + 40);
      *(_WORD *)(v53 + 16) = 1;
      *(_QWORD *)(v53 + 24) = 0;
      *(_QWORD *)(v53 + 32) = 0;
      v54 = *((_QWORD *)v51 + 7);
      *((_QWORD *)v51 + 7) = v53;
      if (v54)
        MEMORY[0x23B83C4BC](v54, 0x1000C40FA9F20B1);
    }
    v55 = *(std::__shared_weak_count **)(v10 + 200);
    *(_QWORD *)(v10 + 192) = v51 + 24;
    *(_QWORD *)(v10 + 200) = v51;
    if (v55)
    {
      v56 = (unint64_t *)&v55->__shared_owners_;
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    v58 = (char *)operator new(0x48uLL);
    *((_QWORD *)v58 + 1) = 0;
    *((_QWORD *)v58 + 2) = 0;
    *(_QWORD *)v58 = &off_250AD5A28;
    v59 = *(_OWORD *)(v10 + 80);
    *(_OWORD *)(v58 + 24) = *(_OWORD *)(v10 + 64);
    *(_OWORD *)(v58 + 40) = v59;
    *((_QWORD *)v58 + 7) = 0;
    *((_DWORD *)v58 + 17) = 0;
    if (v58[32])
    {
      v60 = operator new();
      *(_OWORD *)v60 = *(_OWORD *)(v58 + 40);
      *(_WORD *)(v60 + 16) = 1;
      *(_QWORD *)(v60 + 24) = 0;
      *(_QWORD *)(v60 + 32) = 0;
      v61 = *((_QWORD *)v58 + 7);
      *((_QWORD *)v58 + 7) = v60;
      if (v61)
        MEMORY[0x23B83C4BC](v61, 0x1000C40FA9F20B1);
    }
    v35 = *(std::__shared_weak_count **)(v10 + 216);
    *(_QWORD *)(v10 + 208) = v58 + 24;
    *(_QWORD *)(v10 + 216) = v58;
    if (!v35)
      goto LABEL_62;
    v62 = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldaxr(v62);
    while (__stlxr(v37 - 1, v62));
  }
  if (!v37)
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
  }
LABEL_62:
  v63 = (_QWORD *)*v5;
  *v5 = v10;
  if (!v63 || (v64 = sub_239391B2C(v63), MEMORY[0x23B83C4BC](v64, 0x1020C40683E84EFLL), *v5))
  {
    result = 0;
    *a2 = v5;
    return result;
  }
  *v5 = 0;
  MEMORY[0x23B83C4BC](v5, 0x20C4093837F09);
  return 0xFFFFFFFFLL;
}

void sub_2393918DC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  uint64_t shared_owners;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;

  shared_owners = v2[2].__shared_owners_;
  v2[2].__shared_owners_ = 0;
  if (shared_owners)
    MEMORY[0x23B83C4BC](shared_owners, 0x1000C40FA9F20B1);
  std::__shared_weak_count::~__shared_weak_count(v2);
  operator delete(v5);
  v6 = (std::__shared_weak_count *)v1[27];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)v1[25];
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)v1[23];
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = (std::__shared_weak_count *)v1[21];
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  MEMORY[0x23B83C4BC](v1, 0x1020C40683E84EFLL);
  _Unwind_Resume(a1);
}

_QWORD *sub_239391B2C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  v2 = (std::__shared_weak_count *)a1[27];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[25];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[25];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[23];
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (std::__shared_weak_count *)a1[21];
    if (!v11)
      return a1;
  }
  else
  {
LABEL_15:
    v11 = (std::__shared_weak_count *)a1[21];
    if (!v11)
      return a1;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  return a1;
}

uint64_t OCExplicitFeedbackDestroy(_QWORD **a1)
{
  _QWORD *v2;
  _QWORD *v3;

  if (!a1)
    return 4294967294;
  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_239391B2C(v2);
    MEMORY[0x23B83C4BC](v3, 0x1020C40683E84EFLL);
  }
  MEMORY[0x23B83C4BC](a1, 0x20C4093837F09);
  return 0;
}

uint64_t OCExplicitFeedbackStart(uint64_t a1)
{
  if (a1)
    return 0;
  else
    return 0xFFFFFFFFLL;
}

uint64_t OCExplicitFeedbackStop(uint64_t a1)
{
  if (a1)
    return 0;
  else
    return 0xFFFFFFFFLL;
}

uint64_t OCExplicitFeedbackProcess(_QWORD *a1, uint64_t a2, uint64_t a3, float32x2_t *a4, uint64_t a5, int *a6, uint64_t a7, _QWORD *a8, uint64_t a9)
{
  BOOL v12;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  uint32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  uint32x4_t v30;
  float32x4_t v31;
  float32x2_t v32;
  float32x2_t v33;
  uint32x2_t v34;
  int v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  simd_float4 v40;
  __int128 v41;
  simd_float4 v42;
  simd_float4 v43;
  float v44;
  float v45;
  float v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  int DataFormatType;
  int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  unint64_t DataSize;
  _QWORD *v62;
  float32x4_t *v63;
  unint64_t v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  unsigned int Width;
  unint64_t v75;
  _OWORD v76[6];
  char v77[4];
  int v78;
  __int128 v79;
  CVPixelBufferRef v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  simd_float4 v88;
  simd_float4 v89;
  simd_float4 v90;
  simd_float4 v91;
  simd_float4x4 v92;
  int v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t Height;
  int v97;
  simd_float4x4 v98;

  if (!a1)
    return 4294967294;
  if (a9)
    _ZF = a6 == 0;
  else
    _ZF = 1;
  v12 = _ZF || *a1 == 0;
  if (v12 || a4 && !sub_2393BBC44((uint64_t)a4))
    return 4294967294;
  if (a5)
  {
    v19 = *(float32x4_t *)a5;
    v20 = *(float32x4_t *)(a5 + 16);
    v21 = *(float32x4_t *)(a5 + 32);
    v22 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 16);
    v23 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 32);
    v24 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
    v25 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v24, vabdq_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v19, *(float32x2_t *)v19.f32, 1), v20, *(float32x2_t *)v20.f32, 1), v21, *(float32x2_t *)v21.f32, 1), v22)), (int8x16_t)vcgeq_f32(v24, vabdq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v19, v19.f32[0]), v20, v20.f32[0]),
                                           v21,
                                           v21.f32[0]),
                                         *MEMORY[0x24BDAEDF8]))),
                        (int8x16_t)vcgeq_f32(v24, vabdq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v19, v19, 2), v20, v20, 2), v21, v21, 2), v23)));
    v25.i32[3] = v25.i32[2];
    if ((vminvq_u32(v25) & 0x80000000) == 0)
      return 4294967294;
    v26 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 2);
    v27 = (float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)v19, (int32x4_t)v21), (int32x4_t)v26);
    v28 = (float32x4_t)vtrn2q_s32((int32x4_t)v19, (int32x4_t)v20);
    v28.i32[2] = HIDWORD(*(_QWORD *)(a5 + 32));
    v29 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)v19, (int32x4_t)v21), (int32x4_t)v20);
    v30 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v24, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v29, v20.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 1), v28), v26, v27), v22)), (int8x16_t)vcgeq_f32(v24, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v29, v19.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 1),
                                             v28),
                                           (float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2),
                                           v27),
                                         *MEMORY[0x24BDAEDF8]))),
                        (int8x16_t)vcgeq_f32(v24, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v29, v21.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 1), v28), (float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 2), v27), v23)));
    v30.i32[3] = v30.i32[2];
    if ((vminvq_u32(v30) & 0x80000000) == 0)
      return 4294967294;
    v31 = vmulq_f32(v19, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v21, (int8x16_t)v21, 0xCuLL), (int8x16_t)v21, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v20, (int32x4_t)v20), (int8x16_t)v20, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v21, (int32x4_t)v21), (int8x16_t)v21, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v20, (int8x16_t)v20, 0xCuLL), (int8x16_t)v20, 8uLL)));
    if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v31, 2), vaddq_f32(v31, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v31.f32, 1))).f32[0]+ -1.0) > 0.000011)return 4294967294;
    v32 = vabs_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL)));
    v33 = (float32x2_t)vdup_n_s32(0x38D1B717u);
    v34 = (uint32x2_t)vand_s8((int8x8_t)vcge_f32(v33, vabs_f32(vadd_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(a5 + 48), *(int8x16_t *)(a5 + 48), 8uLL)), (float32x2_t)0xBF80000080000000))), (int8x8_t)vcge_f32(v33, v32));
    if ((vpmin_u32(v34, v34).u32[0] & 0x80000000) == 0)
      return 4294967294;
  }
  if (a3
    && (!*(_QWORD *)a3
     || CVDataBufferGetDataFormatType() != 2021227107
     || !sub_2393BBC44(a3 + 16)))
  {
    return 4294967294;
  }
  v35 = *(_DWORD *)(a2 + 152);
  v36 = *(_QWORD *)(a2 + 144);
  v80 = *(CVPixelBufferRef *)a2;
  v37 = *(_OWORD *)(a2 + 48);
  v82 = *(_OWORD *)(a2 + 32);
  v83 = v37;
  v38 = *MEMORY[0x24BDAEDF8];
  v39 = *(_OWORD *)(MEMORY[0x24BDAEDF8] + 16);
  v40 = *(simd_float4 *)(a2 + 80);
  v84 = *(_OWORD *)(a2 + 64);
  v85 = v38;
  v41 = *(_OWORD *)(MEMORY[0x24BDAEDF8] + 32);
  v86 = v39;
  v87 = v41;
  v42 = *(simd_float4 *)(a2 + 128);
  v43 = *(simd_float4 *)(a2 + 96);
  v90 = *(simd_float4 *)(a2 + 112);
  v91 = v42;
  v81 = *(_OWORD *)(a2 + 8);
  v88 = v40;
  v89 = v43;
  v93 = v35;
  v94 = v36;
  v97 = 0;
  v98.columns[2] = v90;
  v98.columns[3] = v91;
  v98.columns[0] = v40;
  v98.columns[1] = v43;
  v92 = __invert_f4(v98);
  Width = CVPixelBufferGetWidth(v80);
  v95 = Width;
  Height = CVPixelBufferGetHeight(v80);
  if ((_QWORD)v81)
  {
    HIDWORD(Height) = CVPixelBufferGetWidth((CVPixelBufferRef)v81);
    v97 = CVPixelBufferGetHeight((CVPixelBufferRef)v81);
    v44 = (float)HIDWORD(Height) / (float)Width;
    v45 = *(float *)(a2 + 32) * v44;
    v46 = *(float *)(a2 + 52) * v44;
    v47 = *MEMORY[0x24BDAEDF8];
    v48 = *(_OWORD *)(MEMORY[0x24BDAEDF8] + 16);
    DWORD2(v85) = *(_QWORD *)(MEMORY[0x24BDAEDF8] + 8);
    *(float *)&v47 = v45;
    v49 = *(_OWORD *)(a2 + 64);
    DWORD2(v86) = DWORD2(v48);
    *((float *)&v48 + 1) = v46;
    *(_QWORD *)&v85 = v47;
    *(_QWORD *)&v86 = v48;
    DWORD2(v87) = *(_DWORD *)(MEMORY[0x24BDAEDF8] + 40);
    *(float32x2_t *)&v87 = vmul_n_f32(*(float32x2_t *)&v49, v44);
  }
  v77[0] = 0;
  v78 = -1082130432;
  __asm { FMOV            V0.2D, #-1.0 }
  v79 = _Q0;
  if (a3)
  {
    memset(v76, 0, 32);
    if (*(_QWORD *)a3)
    {
      DataFormatType = CVDataBufferGetDataFormatType();
      if (DataFormatType == 1278227250 || DataFormatType == 2021227107)
        v56 = DataFormatType;
      else
        v56 = 0;
      v57 = 4 * (v56 == 1278227250);
      _ZF = v56 == 2021227107;
      v58 = 48;
      if (!_ZF)
        v58 = v57;
      v75 = v58;
      v59 = CVDataBufferGetDataFormatType();
      if (v59 == 2021227107 || v59 == 1278227250)
        DataSize = CVDataBufferGetDataSize();
      else
        DataSize = 0;
      LODWORD(v64) = v75;
      if (v75)
        v64 = DataSize / v75;
    }
    else
    {
      LODWORD(v64) = 0;
    }
    LODWORD(v76[0]) = v64;
    *((_QWORD *)&v76[0] + 1) = OCDataBufferGetBaseAddress(*(_QWORD *)a3);
    v65 = *(_OWORD *)(a3 + 32);
    v76[2] = *(_OWORD *)(a3 + 16);
    v76[3] = v65;
    v66 = *(_OWORD *)(a3 + 64);
    v76[4] = *(_OWORD *)(a3 + 48);
    v76[5] = v66;
    v62 = (_QWORD *)*a1;
    v63 = (float32x4_t *)v76;
  }
  else
  {
    v62 = (_QWORD *)*a1;
    v63 = 0;
  }
  v67 = sub_23938E07C(v62, (uint64_t)&v80, v63, a4, (float32x4_t *)a5, a7, a8, (uint64_t)v77);
  v70 = v78;
  *(_BYTE *)a9 = v77[0];
  *(_DWORD *)(a9 + 4) = v70;
  *(_OWORD *)(a9 + 8) = v79;
  v71 = v67 == 1;
  *a6 = v71;
  if (HIDWORD(v67) == 1)
  {
    v72 = 2;
  }
  else
  {
    if (HIDWORD(v67) != 2)
      goto LABEL_48;
    v72 = 32;
  }
  v71 |= v72;
  *a6 = v71;
LABEL_48:
  if (v69 == 2)
  {
    v73 = 4;
    goto LABEL_52;
  }
  if (v69 == 1)
  {
    v73 = 8;
LABEL_52:
    v71 |= v73;
    *a6 = v71;
  }
  if (v68 == 1)
    *a6 = v71 | 0x10;
  return 0;
}

uint64_t OCSignPostsSubclass()
{
  return 181;
}

uint64_t OCSignPostsTrackCodeOffsetForCoreOC()
{
  return 1000;
}

uint64_t OCSignPostsAriadneDbgCode(__int16 a1)
{
  return (4 * a1 + 4000) & 0xFFFC | 0x2BB50000u;
}

uint64_t OCFrameSelectionCreate(unsigned int *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  __int128 v11;
  unsigned __int8 v12;
  uint64_t v13;
  _QWORD *v14;
  id v15;
  id v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  id v21;
  id v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  id v26;
  const char *v27;
  const char *v28;
  const char *v29;
  const char *v30;
  id v31;
  const char *v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  const char *v36;
  const char *v37;
  const char *v38;
  id v39;
  const char *v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  const char *v44;
  const char *v45;
  const char *v46;
  id v47;
  const char *v48;
  uint64_t v49;
  void *v50;
  id v51;
  const char *v52;
  void *v53;
  id v54;
  const char *v55;
  uint64_t v56;
  void *v57;
  id v58;
  const char *v59;
  uint64_t v60;
  void *v61;
  const char *v62;

  result = 4294967294;
  if (a1 && a2)
  {
    v5 = operator new();
    *(_OWORD *)v5 = 0u;
    *(_OWORD *)(v5 + 16) = 0u;
    *(_OWORD *)(v5 + 32) = 0u;
    *(_QWORD *)(v5 + 48) = 0;
    if (*((_BYTE *)a1 + 8))
    {
      v6 = operator new();
      *(_OWORD *)(v6 + 24) = xmmword_2393F5B3C;
      v7 = *a1;
      v8 = a1[1];
      *(_QWORD *)(v6 + 8) = v7;
      *(_QWORD *)(v6 + 16) = v8;
      *(_DWORD *)(v6 + 56) = -1082130432;
      *(_OWORD *)(v6 + 40) = unk_2393F5B4C;
      *(_QWORD *)v6 = &off_250AD5D80;
      v9 = v8 * (unint64_t)v7;
      *(_QWORD *)(v6 + 72) = 0;
      *(_QWORD *)(v6 + 80) = 0;
      *(_QWORD *)(v6 + 64) = 0;
      if (v9)
      {
        if (v9 >> 62)
          abort();
        v10 = (char *)operator new(4 * v9);
        *(_QWORD *)(v6 + 64) = v10;
        *(_QWORD *)(v6 + 80) = &v10[4 * v9];
        bzero(v10, 4 * v9);
        *(_QWORD *)(v6 + 72) = &v10[4 * v9];
      }
    }
    else
    {
      v6 = operator new();
      *(_QWORD *)&v11 = *(_QWORD *)a1;
      *((_QWORD *)&v11 + 1) = HIDWORD(*(_QWORD *)a1);
      *(_OWORD *)(v6 + 8) = v11;
      *(_DWORD *)(v6 + 56) = -1082130432;
      *(_OWORD *)(v6 + 24) = xmmword_2393F5B3C;
      *(_OWORD *)(v6 + 40) = unk_2393F5B4C;
      *(_QWORD *)v6 = &off_250AD5DA8;
      v12 = atomic_load((unsigned __int8 *)&qword_256930538);
      if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_256930538))
      {
        qword_256930530 = sub_2393F2DD8();
        __cxa_atexit((void (*)(void *))sub_2393F2FA4, &qword_256930530, &dword_239388000);
        __cxa_guard_release(&qword_256930538);
      }
      v13 = qword_256930530;
      *(_OWORD *)(v6 + 80) = 0u;
      *(_QWORD *)(v6 + 72) = v13;
      *(_OWORD *)(v6 + 96) = 0u;
      *(_OWORD *)(v6 + 112) = 0u;
      *(_OWORD *)(v6 + 128) = 0u;
      v14 = operator new(8uLL);
      *(_QWORD *)(v6 + 120) = v14;
      *v14++ = 0;
      *(_QWORD *)(v6 + 128) = v14;
      *(_QWORD *)(v6 + 136) = v14;
      *(_QWORD *)(v6 + 144) = 0;
      v15 = objc_alloc(MEMORY[0x24BDDE3A8]);
      v16 = **(id **)(v6 + 72);
      v18 = objc_msgSend_initWithDevice_kernelWidth_kernelHeight_weights_(v15, v17, (uint64_t)v16, 3, 3, v6 + 24);
      v19 = *(void **)(v6 + 80);
      *(_QWORD *)(v6 + 80) = v18;

      objc_msgSend_setEdgeMode_(*(void **)(v6 + 80), v20, 1);
      v21 = objc_alloc(MEMORY[0x24BDDE420]);
      v22 = **(id **)(v6 + 72);
      v24 = objc_msgSend_initWithDevice_(v21, v23, (uint64_t)v22);
      v25 = *(void **)(v6 + 88);
      *(_QWORD *)(v6 + 88) = v24;

      v26 = objc_alloc_init(MEMORY[0x24BDDD740]);
      objc_msgSend_setPixelFormat_(v26, v27, 55);
      objc_msgSend_setWidth_(v26, v28, *(_QWORD *)(v6 + 8));
      objc_msgSend_setHeight_(v26, v29, *(_QWORD *)(v6 + 16));
      objc_msgSend_setUsage_(v26, v30, 7);
      v31 = **(id **)(v6 + 72);
      v33 = objc_msgSend_newTextureWithDescriptor_(v31, v32, (uint64_t)v26);
      v34 = *(void **)(v6 + 96);
      *(_QWORD *)(v6 + 96) = v33;

      objc_msgSend_setPixelFormat_(v26, v35, 55);
      objc_msgSend_setWidth_(v26, v36, *(_QWORD *)(v6 + 8));
      objc_msgSend_setHeight_(v26, v37, *(_QWORD *)(v6 + 16));
      objc_msgSend_setUsage_(v26, v38, 7);
      v39 = **(id **)(v6 + 72);
      v41 = objc_msgSend_newTextureWithDescriptor_(v39, v40, (uint64_t)v26);
      v42 = *(void **)(v6 + 104);
      *(_QWORD *)(v6 + 104) = v41;

      objc_msgSend_setPixelFormat_(v26, v43, 55);
      objc_msgSend_setWidth_(v26, v44, 2);
      objc_msgSend_setHeight_(v26, v45, 1);
      objc_msgSend_setUsage_(v26, v46, 7);
      v47 = **(id **)(v6 + 72);
      v49 = objc_msgSend_newTextureWithDescriptor_(v47, v48, (uint64_t)v26);
      v50 = *(void **)(v6 + 112);
      *(_QWORD *)(v6 + 112) = v49;

      v51 = *(id *)(*(_QWORD *)(v6 + 72) + 16);
      v53 = (void *)objc_msgSend_newFunctionWithName_(v51, v52, (uint64_t)CFSTR("oc::framing_selection::convertToFloatPlanar"));
      v54 = **(id **)(v6 + 72);
      v56 = objc_msgSend_newComputePipelineStateWithFunction_error_(v54, v55, (uint64_t)v53, 0);
      v57 = *(void **)(v6 + 144);
      *(_QWORD *)(v6 + 144) = v56;

      v58 = *(id *)(*(_QWORD *)(v6 + 72) + 8);
      objc_msgSend_commandBuffer(v58, v59, v60);
      v61 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setLabel_(v61, v62, (uint64_t)CFSTR("convert planarInt to planarF command"));
      CVMetalTextureCacheCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, **(id **)(v6 + 72), 0, (CVMetalTextureCacheRef *)(v6 + 64));

    }
    result = 0;
    *(_QWORD *)v5 = v6;
    *a2 = v5;
  }
  return result;
}

void sub_239392678(_Unwind_Exception *a1)
{
  uint64_t v1;

  __cxa_guard_abort(&qword_256930538);
  MEMORY[0x23B83C4BC](v1, 0x10E1C40B06222C9);
  _Unwind_Resume(a1);
}

uint64_t OCFrameSelectionStart(uint64_t a1)
{
  uint64_t result;
  int32x4_t v3;

  if (!a1)
    return 4294967294;
  result = 0;
  v3 = vdupq_n_s32(0x7F7FFFFFu);
  *(int32x4_t *)(a1 + 8) = v3;
  *(int32x4_t *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 40) = v3.i64[0];
  *(_DWORD *)(a1 + 48) = 0;
  return result;
}

BOOL OCFrameSelectionIsSharpFrame(uint64_t a1, CVPixelBufferRef pixelBuffer, float *a3, double a4, double a5, double a6, double a7)
{
  _BOOL8 result;
  size_t Width;
  size_t Height;
  float v17;
  uint64_t v18;
  __int128 v19;
  float *v20;
  char *v21;
  unint64_t v22;
  float *v23;
  float *v24;
  float v25;
  float v26;
  float v27;
  float v28;
  int v29;
  float v30;
  float *v31;
  float *v32;
  float v33;
  float v34;
  float *v35;
  float *v36;
  float v37;
  float *v38;
  float v39;
  float v40;
  float v41;
  float v42;
  int v43;
  float *v44;
  float v45;
  float v46;
  float *v47;
  float v48;
  float *v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float *v62;
  float v63;
  float v64;
  float *v65;
  float *v66;
  float *v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  _OWORD v74[2];
  uint64_t v75;
  uint64_t v76;

  result = 0;
  if (!a1 || !pixelBuffer)
    return result;
  if (*(_QWORD *)a1)
  {
    Width = CVPixelBufferGetWidth(pixelBuffer);
    Height = CVPixelBufferGetHeight(pixelBuffer);
    (***(void (****)(_QWORD, CVPixelBufferRef, unint64_t, unint64_t, unint64_t, unint64_t))a1)(*(_QWORD *)a1, pixelBuffer, (unint64_t)(a4 * ((double)Width + -1.0) + 0.5), (unint64_t)(a5 * ((double)Height + -1.0) + 0.5), (unint64_t)a6, (unint64_t)a7);
  }
  else
  {
    v17 = 0.0;
  }
  v18 = *(unsigned int *)(a1 + 48);
  *(float *)(a1 + 8 + 4 * v18) = v17;
  *(_DWORD *)(a1 + 48) = ((int)v18 + 1) % 0xAu;
  v19 = *(_OWORD *)(a1 + 24);
  v74[0] = *(_OWORD *)(a1 + 8);
  v74[1] = v19;
  v75 = *(_QWORD *)(a1 + 40);
  v20 = (float *)v74;
  v21 = (char *)&v76;
  do
  {
    v22 = (v21 - (char *)v20) >> 2;
    if (v22 < 2)
      break;
    if (v22 == 3)
    {
      v57 = *v20;
      v58 = v20[1];
      v59 = *((float *)v21 - 1);
      if (v58 <= *v20)
      {
        if (v59 > v58)
        {
          v20[1] = v59;
          *((float *)v21 - 1) = v58;
          v71 = *v20;
          v70 = v20[1];
          if (v70 > *v20)
          {
            *v20 = v70;
            v20[1] = v71;
          }
        }
      }
      else
      {
        if (v59 <= v58)
        {
          *v20 = v58;
          v20[1] = v57;
          v72 = *((float *)v21 - 1);
          if (v72 <= v57)
            break;
          v20[1] = v72;
        }
        else
        {
          *v20 = v59;
        }
        *((float *)v21 - 1) = v57;
      }
      break;
    }
    if (v22 == 2)
    {
      v60 = *((float *)v21 - 1);
      v61 = *v20;
      if (v60 > *v20)
      {
        *v20 = v60;
        *((float *)v21 - 1) = v61;
      }
      break;
    }
    if (v21 - (char *)v20 <= 31)
    {
      while (v20 != (float *)(v21 - 4))
      {
        v62 = v20++;
        if (v62 != (float *)v21 && v20 != (float *)v21)
        {
          v63 = *v62;
          v64 = *v62;
          v65 = v20;
          v66 = v62;
          v67 = v20;
          do
          {
            v68 = *v67++;
            v69 = v68;
            if (v68 > v64)
            {
              v64 = v69;
              v66 = v65;
            }
            v65 = v67;
          }
          while (v67 != (float *)v21);
          if (v66 != v62)
          {
            *v62 = *v66;
            *v66 = v63;
          }
        }
      }
      break;
    }
    v23 = &v20[v22 >> 1];
    v24 = (float *)(v21 - 4);
    v25 = *((float *)v21 - 1);
    v26 = *v23;
    v27 = *v20;
    if (*v23 > *v20)
    {
      if (v25 <= v26)
      {
        *v20 = v26;
        *v23 = v27;
        if (*v24 > v27)
        {
          *v23 = *v24;
          *v24 = v27;
          goto LABEL_19;
        }
      }
      else
      {
        *v20 = v25;
        *v24 = v27;
      }
LABEL_20:
      v29 = 1;
      goto LABEL_22;
    }
    if (v25 > v26)
    {
      *v23 = v25;
      *v24 = v26;
      v28 = *v20;
      if (*v23 > *v20)
      {
        *v20 = *v23;
        *v23 = v28;
LABEL_19:
        v29 = 2;
        goto LABEL_22;
      }
      goto LABEL_20;
    }
    v29 = 0;
LABEL_22:
    v30 = *v20;
    if (*v20 > *v23)
    {
LABEL_27:
      v35 = v20 + 1;
      if (v20 + 1 >= v24)
      {
        v38 = v20 + 1;
      }
      else
      {
        v36 = v20 + 1;
        while (1)
        {
          v37 = *v23;
          do
          {
            v38 = v36;
            v39 = *v36++;
            v40 = v39;
          }
          while (v39 > v37);
          do
          {
            v41 = *--v24;
            v42 = v41;
          }
          while (v41 <= v37);
          if (v38 >= v24)
            break;
          *v38 = v42;
          *v24 = v40;
          ++v29;
          if (v23 == v38)
            v23 = v24;
        }
      }
      if (v38 != v23)
      {
        v43 = *(_DWORD *)v38;
        if (*v23 > *v38)
        {
          *v38 = *v23;
          *(_DWORD *)v23 = v43;
          ++v29;
        }
      }
      if (v38 == (float *)((char *)v74 + 4))
        break;
      if (!v29)
      {
        if (v38 <= (float *)v74 + 1)
        {
          v49 = v38 + 1;
          while (v49 != (float *)v21)
          {
            v51 = *(v49 - 1);
            v50 = *v49++;
            if (v50 > v51)
              goto LABEL_42;
          }
        }
        else
        {
          while (v35 != v38)
          {
            v46 = *(v35 - 1);
            v45 = *v35++;
            if (v45 > v46)
              goto LABEL_42;
          }
        }
        break;
      }
LABEL_42:
      if (v38 <= (float *)v74 + 1)
        v44 = v38 + 1;
      else
        v44 = v20;
      if (v38 > (float *)v74 + 1)
        v21 = (char *)v38;
    }
    else
    {
      v31 = (float *)(v21 - 8);
      while (v31 != v20)
      {
        v32 = v31;
        v33 = *v31--;
        v34 = v33;
        if (v33 > *v23)
        {
          *v20 = v34;
          *v32 = v30;
          ++v29;
          v24 = v32;
          goto LABEL_27;
        }
      }
      v47 = v20 + 1;
      if (v30 <= *v24)
      {
        if (v47 == v24)
          break;
        while (1)
        {
          v48 = *v47;
          if (v30 > *v47)
            break;
          if (++v47 == v24)
            goto LABEL_94;
        }
        *v47++ = *v24;
        *v24 = v48;
      }
      if (v47 == v24)
        break;
      while (1)
      {
        v52 = *v20;
        do
        {
          v44 = v47;
          v53 = *v47++;
          v54 = v53;
        }
        while (v52 <= v53);
        do
        {
          v55 = *--v24;
          v56 = v55;
        }
        while (v52 > v55);
        if (v44 >= v24)
          break;
        *v44 = v56;
        *v24 = v54;
      }
      if (v44 > (float *)v74 + 1)
        break;
    }
    v20 = v44;
  }
  while (v21 != (char *)v74 + 4);
LABEL_94:
  v73 = *((float *)v74 + 1);
  if (a3)
  {
    *a3 = v17;
    a3[1] = v73;
  }
  return v17 >= v73;
}

float OCFrameSelectionCalculateImageSharpness(_QWORD *a1, CVPixelBufferRef pixelBuffer, double a3, double a4, double a5, double a6)
{
  size_t Width;
  size_t Height;
  float result;

  if (!a1 || !pixelBuffer || !*a1)
    return 0.0;
  Width = CVPixelBufferGetWidth(pixelBuffer);
  Height = CVPixelBufferGetHeight(pixelBuffer);
  (**(void (***)(_QWORD, CVPixelBufferRef, unint64_t, unint64_t, unint64_t, unint64_t))*a1)(*a1, pixelBuffer, (unint64_t)(a3 * ((double)Width + -1.0) + 0.5), (unint64_t)(a4 * ((double)Height + -1.0) + 0.5), (unint64_t)a5, (unint64_t)a6);
  return result;
}

uint64_t OCFrameSelectionStop(uint64_t a1)
{
  if (a1)
    return 0;
  else
    return 4294967294;
}

uint64_t OCFrameSelectionDestroy(uint64_t *a1)
{
  uint64_t v2;

  if (!a1)
    return 4294967294;
  v2 = *a1;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  MEMORY[0x23B83C4BC](a1, 0x1020C403357C6A3);
  return 0;
}

BOOL OCNonModularSPI_CoreAppleCVA_isSimilarSE3(simd_float4x4 a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, float a6)
{
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float *v25[2];
  _OWORD v26[4];
  simd_float4x4 v27;

  v27 = __invert_f4(a1);
  v26[0] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v27.columns[0], a2.f32[0]), (float32x4_t)v27.columns[1], *(float32x2_t *)a2.f32, 1), (float32x4_t)v27.columns[2], a2, 2), (float32x4_t)v27.columns[3], a2, 3);
  v26[1] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v27.columns[0], a3.f32[0]), (float32x4_t)v27.columns[1], *(float32x2_t *)a3.f32, 1), (float32x4_t)v27.columns[2], a3, 2), (float32x4_t)v27.columns[3], a3, 3);
  v26[2] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v27.columns[0], a4.f32[0]), (float32x4_t)v27.columns[1], *(float32x2_t *)a4.f32, 1), (float32x4_t)v27.columns[2], a4, 2), (float32x4_t)v27.columns[3], a4, 3);
  v26[3] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v27.columns[0], a5.f32[0]), (float32x4_t)v27.columns[1], *(float32x2_t *)a5.f32, 1), (float32x4_t)v27.columns[2], a5, 2), (float32x4_t)v27.columns[3], a5, 3);
  v25[0] = (float *)v26;
  v25[1] = (float *)4;
  sub_239392E2C((uint64_t)&v19, v25);
  return sqrtf((float)((float)((float)(v19 * v19) + (float)(v20 * v20)) + (float)(v21 * v21))+ (float)((float)((float)(v22 * v22) + (float)(v23 * v23)) + (float)(v24 * v24))) < a6;
}

void sub_239392E2C(uint64_t a1, float **a2)
{
  unint64_t v3;
  float *v4;
  float v5;
  float v6;
  float v7;
  float32x2_t *v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  _BOOL4 v22;
  float v24;
  float32x2_t v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float32x2_t v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  __float2 v50;
  float v51;
  float32x2_t *v52;
  float v53;
  float v54;
  float32_t v55;
  float32x2_t v56;
  int32x2_t v57;
  float32x2_t v58;
  float32x2_t v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  __int32 v68;
  float32_t v69;
  int32x2_t v70;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = *a2;
  v3 = (unint64_t)a2[1];
  v5 = (*a2)[(v3 + 2)];
  v6 = (*a2)[(2 * (_DWORD)v3) | 1];
  v7 = (float)(v5 - v6) * 0.5;
  v8 = (float32x2_t *)&(*a2)[(2 * v3)];
  v9 = v8->f32[0];
  v10 = (*a2)[1];
  v11 = (*a2)[2];
  v12 = (float)(v8->f32[0] - v11) * 0.5;
  v13 = (*a2)[v3];
  v14 = **a2;
  v15 = (*a2)[(v3 + 1)];
  v16 = (float)(v10 - v13) * 0.5;
  v17 = (*a2)[(2 * v3 + 2)];
  v18 = -1.0;
  v19 = (float)((float)((float)(v14 + v15) + v17) + -1.0) * 0.5;
  v20 = (float)((float)(v12 * v12) + (float)(v7 * v7)) + (float)(v16 * v16);
  if (v19 >= -1.0 || (float)(v19 + 1.0) <= -0.00001)
  {
    v22 = v19 > 1.0;
    if ((float)(v19 + -1.0) >= 0.00001)
      v22 = 0;
    if (v19 > 0.99 || v22)
    {
      v24 = (float)(v20 * (float)((float)(v20 * (float)((float)((float)(v20 * 5.0) / 112.0) + 0.075)) + 0.16667)) + 1.0;
      v25.f32[0] = v7 * v24;
      v26 = v12 * v24;
      *(_DWORD *)a1 = v25.i32[0];
      *(float *)(a1 + 4) = v12 * v24;
      v27 = v16 * v24;
      *(float *)(a1 + 8) = v16 * v24;
      goto LABEL_35;
    }
    if (v19 > -0.99)
    {
      v28 = (float)(v10 - v13) * 0.5;
      v29 = (float)(v8->f32[0] - v11) * 0.5;
      v30 = acosf(v19) / sqrtf(v20);
      v25.f32[0] = v7 * v30;
      v26 = v29 * v30;
      *(_DWORD *)a1 = v25.i32[0];
      *(float *)(a1 + 4) = v29 * v30;
      v27 = v28 * v30;
      *(float *)(a1 + 8) = v28 * v30;
      goto LABEL_35;
    }
    v18 = (float)((float)((float)(v14 + v15) + v17) + -1.0) * 0.5;
  }
  v65 = (*a2)[(v3 + 2)];
  v66 = (*a2)[2];
  v67 = (*a2)[1];
  v62 = (float)(v5 - v6) * 0.5;
  v63 = (*a2)[v3];
  v61 = (float)(v8->f32[0] - v11) * 0.5;
  v64 = (*a2)[(2 * (_DWORD)v3) | 1];
  v31 = (float)(v10 - v13) * 0.5;
  v32 = asinf(sqrtf(v20));
  v33 = (float)((float)(3.1416 - v32) * (float)(3.1416 - v32)) / (float)(1.0 - v18);
  v34 = (float)(v14 - v18) * v33;
  v35 = (float)(v15 - v18) * v33;
  v36 = (float)(v17 - v18) * v33;
  if (v34 <= v35)
  {
    v40 = v33 * 0.5;
    v41.f32[0] = v66;
    if (v35 <= v36)
    {
      v44 = sqrtf(v36);
      if (v31 >= 0.0)
        v27 = v44;
      else
        v27 = -v44;
      *(float *)(a1 + 8) = v27;
      v41.f32[1] = v65;
      v25 = vmul_n_f32(vmul_n_f32(vadd_f32(*v8, v41), v40), 1.0 / v27);
      *(float32x2_t *)a1 = v25;
      v26 = v25.f32[1];
    }
    else
    {
      v42 = sqrtf(v35);
      if (v61 >= 0.0)
        v26 = v42;
      else
        v26 = -v42;
      v25.f32[0] = (float)(1.0 / v26) * (float)(v40 * (float)(v63 + v67));
      *(_DWORD *)a1 = v25.i32[0];
      *(float *)(a1 + 4) = v26;
      v27 = (float)(1.0 / v26) * (float)(v40 * (float)(v64 + v65));
      *(float *)(a1 + 8) = v27;
    }
  }
  else
  {
    v37 = v33 * 0.5;
    v38 = (float)(v33 * 0.5) * (float)(v9 + v66);
    if (v34 <= v36)
    {
      v43 = sqrtf(v36);
      if (v31 >= 0.0)
        v27 = v43;
      else
        v27 = -v43;
      v25.f32[0] = (float)(1.0 / v27) * v38;
      v26 = (float)(1.0 / v27) * (float)(v37 * (float)(v64 + v65));
      *(_DWORD *)a1 = v25.i32[0];
      *(float *)(a1 + 4) = v26;
      *(float *)(a1 + 8) = v27;
    }
    else
    {
      v39 = sqrtf(v34);
      if (v62 >= 0.0)
        v25.f32[0] = v39;
      else
        v25.f32[0] = -v39;
      v26 = (float)(1.0 / v25.f32[0]) * (float)(v37 * (float)(v63 + v67));
      *(_DWORD *)a1 = v25.i32[0];
      *(float *)(a1 + 4) = v26;
      v27 = (float)(1.0 / v25.f32[0]) * v38;
      *(float *)(a1 + 8) = v27;
    }
  }
LABEL_35:
  v45 = (float)((float)(v25.f32[0] * v25.f32[0]) + (float)(v26 * v26)) + (float)(v27 * v27);
  if (v45 >= 0.0061)
  {
    v49 = sqrtf(v45);
    v68 = v25.i32[0];
    v50 = __sincosf_stret(v49);
    v25.i32[0] = v68;
    v48 = v50.__sinval / v49;
    v46 = (float)(1.0 / v45) * (float)(1.0 - v50.__cosval);
    v47 = (float)(1.0 / v45) * (float)(1.0 - (float)(v50.__sinval / v49));
  }
  else
  {
    v46 = 0.5 - (float)(v45 * (float)((float)(v45 / -720.0) + 0.041667));
    v47 = 0.16667 - (float)(v45 * (float)((float)(v45 / -5040.0) + 0.0083333));
    v48 = 1.0 - (float)(v45 * v47);
  }
  if (v45 >= 0.00000149)
  {
    if (v45 <= 9.0)
      v51 = (float)-(float)(v47 - (float)(v46 * 0.5)) / v48;
    else
      v51 = (float)(v46 + (float)(v48 * -0.5)) / (float)(v45 * v46);
  }
  else
  {
    v51 = (float)((float)(v45 * 0.0013889) + 0.083333) + (float)(v45 * 0.000033069);
  }
  v52 = (float32x2_t *)&v4[(3 * v3 + HIDWORD(v3)) - HIDWORD(v3)];
  v53 = v52->f32[1];
  v54 = v52[1].f32[0];
  v55 = (float)(v26 * v54) - (float)(v27 * v53);
  v69 = v55;
  *(float *)v70.i32 = (float)(v27 * v52->f32[0]) - (float)(v25.f32[0] * v54);
  *(float *)&v70.i32[1] = (float)(v25.f32[0] * v53) - (float)(v26 * v52->f32[0]);
  v56 = *(float32x2_t *)(a1 + 4);
  v57.i32[1] = v56.i32[1];
  v57.i32[0] = *(_DWORD *)a1;
  v58.i32[0] = vdup_lane_s32(v70, 1).u32[0];
  v58.f32[1] = v55;
  v59 = vadd_f32(vadd_f32(*v52, vmul_f32(*(float32x2_t *)&v69, (float32x2_t)0xBF000000BF000000)), vmul_n_f32(vmla_f32(vmul_f32((float32x2_t)v70, vneg_f32((float32x2_t)vrev64_s32(v57))), v58, v56), v51));
  v60 = (float)(v51 * vmlas_n_f32(-(float)(v56.f32[0] * v55), *(float *)a1, *(float *)v70.i32))
      + (float)(v54 + (float)(*(float *)&v70.i32[1] * -0.5));
  *(float32x2_t *)(a1 + 12) = v59;
  *(float *)(a1 + 20) = v60;
}

__n128 OCNonModularSPI_CoreAppleCVA_meanSE3(__n128 a1, __n128 a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7, __n128 a8)
{
  float32x4_t v8;
  float32x4_t v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float cosval;
  float v15;
  __float2 v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  __float2 v23;
  float v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  float32x4_t v35;
  float32x2_t v36;
  float32x4_t v37;
  float32x2_t v38;
  float *v39[2];
  _OWORD v40[4];
  float32x4_t v41;
  float32x2_t v42;
  float *v43[2];
  _OWORD v44[4];
  float v45;
  float v46;
  float v47;
  float v48;

  v44[0] = a1;
  v44[1] = a2;
  v44[2] = a3;
  v44[3] = a4;
  v43[0] = (float *)v44;
  v43[1] = (float *)4;
  sub_239392E2C((uint64_t)&v41, v43);
  v40[0] = a5;
  v40[1] = a6;
  v40[2] = a7;
  v40[3] = a8;
  v39[0] = (float *)v40;
  v39[1] = (float *)4;
  sub_239392E2C((uint64_t)&v37, v39);
  v8.i64[0] = 0x3F0000003F000000;
  v8.i64[1] = 0x3F0000003F000000;
  v36 = vmul_f32(vadd_f32(v42, v38), (float32x2_t)0x3F0000003F000000);
  v31 = xmmword_2393F5A9C;
  v32 = *(_OWORD *)algn_2393F5AAC;
  v33 = xmmword_2393F5ABC;
  v34 = unk_2393F5ACC;
  v35 = vmulq_f32(vaddq_f32(v41, v37), v8);
  v9 = vmulq_f32(v35, v35);
  v10 = vaddq_f32(vaddq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2)).f32[0];
  if (v10 >= 0.0061)
  {
    v15 = sqrtf(v10);
    v29 = v10;
    v16 = __sincosf_stret(v15);
    cosval = v16.__cosval;
    v13 = v16.__sinval / v15;
    v11 = (float)(1.0 / v29) * (float)(1.0 - v16.__cosval);
    v12 = (float)(1.0 / v29) * (float)(1.0 - (float)(v16.__sinval / v15));
  }
  else
  {
    v11 = 0.5 - (float)(v10 * (float)((float)(v10 / -720.0) + 0.041667));
    v12 = 0.16667 - (float)(v10 * (float)((float)(v10 / -5040.0) + 0.0083333));
    v13 = 1.0 - (float)(v10 * v12);
    cosval = 1.0 - (float)(v10 * v11);
  }
  v47 = v11;
  v48 = v12;
  v45 = cosval;
  v46 = v13;
  sub_2393936C8((uint64_t)&v35, &v45, (float32x2_t *)&v31);
  v30 = v31;
  v31 = xmmword_2393F5A9C;
  v32 = *(_OWORD *)algn_2393F5AAC;
  v33 = xmmword_2393F5ABC;
  v34 = unk_2393F5ACC;
  v17 = (float)((float)(v35.f32[0] * v35.f32[0]) + (float)(v35.f32[1] * v35.f32[1])) + (float)(v35.f32[2] * v35.f32[2]);
  if (v17 >= 0.0061)
  {
    v22 = sqrtf(v17);
    v23 = __sincosf_stret(v22);
    v21 = v23.__cosval;
    v20 = v23.__sinval / v22;
    v18 = (float)(1.0 / v17) * (float)(1.0 - v23.__cosval);
    v19 = (float)(1.0 / v17) * (float)(1.0 - (float)(v23.__sinval / v22));
  }
  else
  {
    v18 = 0.5 - (float)(v17 * (float)((float)(v17 / -720.0) + 0.041667));
    v19 = 0.16667 - (float)(v17 * (float)((float)(v17 / -5040.0) + 0.0083333));
    v20 = 1.0 - (float)(v17 * v19);
    v21 = 1.0 - (float)(v17 * v18);
  }
  v47 = v18;
  v48 = v19;
  v45 = v21;
  v46 = v20;
  sub_2393936C8((uint64_t)&v35, &v45, (float32x2_t *)&v31);
  return (__n128)v30;
}

uint64_t sub_2393936C8(uint64_t result, float *a2, float32x2_t *a3)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float32x2_t v29;
  int32x2_t v30;
  float32x2_t v31;
  float32x2_t v32;
  _BYTE v33[12];

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = v5 * *(float *)result;
  v7 = v5 * *(float *)(result + 4);
  v8 = v5 * *(float *)(result + 8);
  a3->f32[0] = *a2 + (float)(v6 * *(float *)result);
  a3[2].f32[1] = v3 + (float)(v7 * *(float *)(result + 4));
  a3[5].f32[0] = v3 + (float)(v8 * *(float *)(result + 8));
  v9 = *(float *)(result + 4);
  v10 = v6 * v9;
  v11 = *(float *)(result + 8);
  v12 = v6 * v11;
  v13 = v7 * v11;
  v14 = v4 * *(float *)result;
  v15 = v4 * v9;
  v16 = v4 * v11;
  a3[2].f32[0] = v10 - v16;
  a3[4].f32[0] = v15 + v12;
  a3[4].f32[1] = v13 - v14;
  a3->f32[1] = v10 + v16;
  a3[1].f32[0] = v12 - v15;
  a3[3].f32[0] = v13 + v14;
  v17 = *(float *)(result + 8);
  v18 = *(float *)(result + 12);
  v19 = *(float *)(result + 16);
  v20 = *(float *)(result + 20);
  v21 = *(float *)(result + 4);
  v22 = (float)(v21 * v20) - (float)(v17 * v19);
  v23 = (float)(v17 * v18) - (float)(*(float *)result * v20);
  *(float *)v33 = v22;
  *(float *)&v33[4] = v23;
  v24 = (float)(*(float *)result * v19) - (float)(v21 * v18);
  *(float *)&v33[8] = v24;
  v26 = a2[2];
  v25 = a2[3];
  if ((float32x2_t *)result == a3)
  {
    v28 = v20 + (float)(v26 * v24);
    v29 = *(float32x2_t *)(result + 4);
    v30.i32[1] = v29.i32[1];
    v30.i32[0] = *(_DWORD *)result;
    v31.i32[0] = vdup_lane_s32(*(int32x2_t *)&v33[4], 1).u32[0];
    v31.f32[1] = v22;
    v32 = vadd_f32(vadd_f32(*(float32x2_t *)(result + 12), vmul_n_f32(*(float32x2_t *)v33, v26)), vmul_n_f32(vmla_f32(vmul_f32(*(float32x2_t *)&v33[4], vneg_f32((float32x2_t)vrev64_s32(v30))), v31, v29), v25));
    v27 = (float)(v25 * vmlas_n_f32(-(float)(v29.f32[0] * v22), *(float *)result, *(float *)&v33[4])) + v28;
    a3[6] = v32;
  }
  else
  {
    a3[6].f32[0] = (float)(v18 + (float)(v22 * v26))
                 + (float)(v25 * (float)((float)(*(float *)(result + 4) * v24) - (float)(*(float *)(result + 8) * v23)));
    a3[6].f32[1] = (float)(*(float *)(result + 16) + (float)(v23 * v26))
                 + (float)(v25 * (float)((float)(*(float *)(result + 8) * v22) - (float)(*(float *)result * v24)));
    v27 = (float)(*(float *)(result + 20) + (float)(v24 * v26))
        + (float)(v25 * (float)((float)(*(float *)result * v23) - (float)(*(float *)(result + 4) * v22)));
  }
  a3[7].f32[0] = v27;
  return result;
}

uint64_t OCMaskingCreate(uint64_t a1, _QWORD *a2)
{
  _OWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _OWORD *v6;

  v3 = (_OWORD *)operator new();
  *v3 = 0u;
  v3[1] = 0u;
  v3[2] = 0u;
  v3[3] = 0u;
  v3[4] = 0u;
  v3[5] = 0u;
  v3[6] = 0u;
  v4 = (_QWORD *)operator new();
  v5 = operator new();
  *(_QWORD *)(v5 + 48) = 0;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)v5 = 0u;
  *v4 = v5;
  v6 = (_OWORD *)operator new();
  v6[9] = 0u;
  v6[10] = 0u;
  v6[7] = 0u;
  v6[8] = 0u;
  v6[5] = 0u;
  v6[6] = 0u;
  v6[3] = 0u;
  v6[4] = 0u;
  v6[1] = 0u;
  v6[2] = 0u;
  *v6 = 0u;
  v4[1] = v6;
  *(_QWORD *)v3 = v4;
  *a2 = v3;
  return 0;
}

void sub_239393970(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
  {
    sub_2393939C8(v3 + 8);
    MEMORY[0x23B83C4BC](v3, 0x1080C40E0B7A938);
  }
  MEMORY[0x23B83C4BC](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

uint64_t sub_2393939C8(uint64_t a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v4 = (_QWORD *)(a1 + 40);
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    v4 = (_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = &v2[v5 / 0xAA];
    v7 = (unint64_t)*v6 + 24 * (v5 % 0xAA);
    v8 = (unint64_t)v2[(*(_QWORD *)(a1 + 40) + v5) / 0xAA] + 24 * ((*(_QWORD *)(a1 + 40) + v5) % 0xAA);
    if (v7 != v8)
    {
      do
      {
        sub_23938C854(*(_QWORD **)(v7 + 8));
        v7 += 24;
        if (v7 - (_QWORD)*v6 == 4080)
        {
          v9 = (unint64_t)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != v8);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
  }
  *v4 = 0;
  v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 85;
    goto LABEL_15;
  }
  if (v11 == 2)
  {
    v12 = 170;
LABEL_15:
    *(_QWORD *)(a1 + 32) = v12;
  }
  if (v2 != v3)
  {
    do
    {
      v13 = *v2++;
      operator delete(v13);
    }
    while (v2 != v3);
    v15 = *(_QWORD *)(a1 + 8);
    v14 = *(_QWORD *)(a1 + 16);
    if (v14 != v15)
      *(_QWORD *)(a1 + 16) = v14 + ((v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t OCMaskingStart(uint64_t a1)
{
  if (a1)
    return 0;
  else
    return 0xFFFFFFFFLL;
}

uint64_t OCMaskingCreateObjectVoxelsAndComputeBBox(uint64_t a1, float32x4_t *a2, __int128 *a3, const void *a4, uint64_t a5, _QWORD *a6, _DWORD *a7, _OWORD *a8)
{
  uint64_t v16;
  _QWORD *v17;
  _DWORD *v18;
  int DataFormatType;
  BOOL v20;
  int v21;
  unint64_t v22;
  int v23;
  unint64_t DataSize;
  _DWORD *v25;
  _QWORD *v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t i;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  __int128 v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  void *BaseAddress;
  int v52;
  int v54;
  unint64_t v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  void *v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  const void *v63;
  int v64;
  int v65;
  float32x4_t v66;
  __int128 v67;
  __int128 v68;
  _DWORD *v70;
  uint64_t v71;
  _OWORD *v72;
  uint64_t v73;
  float32x4_t v74;
  int v75;
  float32x4_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  float32x4_t v87[8];
  void *__p[2];
  __int128 v89;
  uint64_t v90;

  v90 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  v16 = 0xFFFFFFFFLL;
  if (a1 && a2 && a3 && a4)
  {
    v73 = a1;
    v17 = a6;
    v18 = a7;
    DataFormatType = CVDataBufferGetDataFormatType();
    v20 = DataFormatType == 1278227250 || DataFormatType == 2021227107;
    v21 = v20 ? DataFormatType : 0;
    v22 = v21 == 2021227107 ? 48 : 4 * (v21 == 1278227250);
    v23 = CVDataBufferGetDataFormatType();
    if (v23 == 2021227107 || v23 == 1278227250)
    {
      DataSize = CVDataBufferGetDataSize();
      v16 = 0xFFFFFFFFLL;
      if (!v22)
        return v16;
    }
    else
    {
      DataSize = 0;
      v16 = 0xFFFFFFFFLL;
      if (!v22)
        return v16;
    }
    if (a8)
    {
      if (a5)
      {
        v25 = v18;
        v26 = v17;
        if (v22 <= DataSize)
        {
          v72 = a8;
          v27 = *a3;
          HIDWORD(v27) = 0;
          v83 = v27;
          v84 = 0;
          v85 = 0;
          v28 = a2[6].i64[0];
          v29 = a2[6].u32[2];
          *(_OWORD *)__p = 0u;
          v89 = 0u;
          v30 = a2[1];
          v87[3] = *a2;
          v87[4] = v30;
          v31 = a2[3];
          v87[5] = a2[2];
          v87[6] = v31;
          v32 = a2[4];
          v33 = a2[5];
          v86 = xmmword_2393F5320;
          v87[0] = v32;
          v87[1] = v33;
          if ((_DWORD)v29)
          {
            v70 = v25;
            v71 = a5;
            v34 = 0;
            v35 = 0;
            v36 = 0;
            for (i = 0; i != v29; ++i)
            {
              if (v34 < v36)
              {
                *(_OWORD *)v34 = *(_OWORD *)(v28 + 16 * i);
                v34 += 16;
              }
              else
              {
                v38 = (v34 - v35) >> 4;
                v39 = v38 + 1;
                if ((unint64_t)(v38 + 1) >> 60)
                  abort();
                if ((v36 - v35) >> 3 > v39)
                  v39 = (v36 - v35) >> 3;
                if ((unint64_t)(v36 - v35) >= 0x7FFFFFFFFFFFFFF0)
                  v40 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v40 = v39;
                if (v40)
                {
                  if (v40 >> 60)
                    sub_23938C4B8();
                  v41 = (char *)operator new(16 * v40);
                }
                else
                {
                  v41 = 0;
                }
                v42 = &v41[16 * v38];
                *(_OWORD *)v42 = *(_OWORD *)(v28 + 16 * i);
                v43 = v42 + 16;
                if (v34 != v35)
                {
                  do
                  {
                    v44 = *((_OWORD *)v34 - 1);
                    v34 -= 16;
                    *((_OWORD *)v42 - 1) = v44;
                    v42 -= 16;
                  }
                  while (v34 != v35);
                  v34 = v35;
                }
                v35 = v42;
                v36 = &v41[16 * v40];
                if (v34)
                  operator delete(v34);
                v34 = v43;
              }
            }
            __p[1] = v34;
            *(_QWORD *)&v89 = v36;
            __p[0] = v35;
            v32 = a2[4];
            v26 = v17;
            a5 = v71;
            v25 = v70;
          }
          v45 = *a2;
          v46 = a2[1];
          v47 = a2[2];
          v48 = a2[3];
          v49 = vmlaq_f32(vmlaq_f32(vaddq_f32(v46, vmulq_f32(*a2, (float32x4_t)0)), (float32x4_t)0, v47), (float32x4_t)0, v48);
          v87[2] = v49;
          v50 = vmulq_f32(v49, vaddq_f32(v48, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v45, v32.f32[0]), v46, *(float32x2_t *)v32.f32, 1), v47, v32, 2)));
          v49.i32[3] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v50, 2), vaddq_f32(v50, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v50.f32, 1))).u32[0];
          v87[7] = v49;
          v80 = 0;
          v81 = 0;
          v82 = 0;
          BaseAddress = OCDataBufferGetBaseAddress((uint64_t)a4);
          v52 = CVDataBufferGetDataFormatType();
          if (v52 == 1278227250 || v52 == 2021227107)
            v54 = v52;
          else
            v54 = 0;
          if (v54 == 2021227107)
            v55 = 48;
          else
            v55 = 4 * (v54 == 1278227250);
          v56 = CVDataBufferGetDataFormatType();
          if (v56 == 2021227107 || v56 == 1278227250)
          {
            v57 = CVDataBufferGetDataSize();
            if (v55)
            {
LABEL_56:
              v58 = v57 / v55;
LABEL_59:
              sub_2393BA588((uint64_t)BaseAddress, v58, (float32x4_t *)a5, (uint64_t)&v80);
              v75 = 0;
              v59 = (void *)v80;
              v74.i64[1] = v80;
              v74.i32[0] = -1431655765 * ((unint64_t)(v81 - v80) >> 4);
              v60 = *(_OWORD *)(a5 + 16);
              v76 = *(float32x4_t *)a5;
              v77 = v60;
              v61 = *(_OWORD *)(a5 + 48);
              v78 = *(_OWORD *)(a5 + 32);
              v79 = v61;
              if ((sub_2393DA2F0(*(_QWORD **)v73, &v74, v87, (uint64_t)&v83, v72, (unsigned int **)(v73 + 80)) & 1) != 0)
              {
                if (v26 && v25)
                {
                  v62 = *(_QWORD *)(v73 + 80);
                  *v25 = (unint64_t)(*(_QWORD *)(v73 + 88) - v62) >> 2;
                  *v26 = v62;
                }
                v63 = *(const void **)(v73 + 8);
                if (v63)
                {
                  v64 = CVDataBufferGetDataFormatType();
                  if (v64 == 2021227107 || v64 == 1278227250)
                    CFRelease(v63);
                }
                v65 = CVDataBufferGetDataFormatType();
                if (v65 == 2021227107 || v65 == 1278227250)
                  CFRetain(a4);
                else
                  a4 = 0;
                *(_QWORD *)(v73 + 8) = a4;
                v66 = *(float32x4_t *)a5;
                v67 = *(_OWORD *)(a5 + 16);
                v68 = *(_OWORD *)(a5 + 48);
                *(_OWORD *)(v73 + 48) = *(_OWORD *)(a5 + 32);
                *(_OWORD *)(v73 + 64) = v68;
                *(float32x4_t *)(v73 + 16) = v66;
                *(_OWORD *)(v73 + 32) = v67;
                kdebug_trace();
                v16 = 0;
              }
              else
              {
                v16 = 0xFFFFFFFFLL;
              }
              if (v59)
                operator delete(v59);
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
              return v16;
            }
          }
          else
          {
            v57 = 0;
            if (v55)
              goto LABEL_56;
          }
          LODWORD(v58) = 0;
          goto LABEL_59;
        }
      }
    }
  }
  return v16;
}

void sub_239394008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OCMaskingComputeMaskFromObjectVoxels(uint64_t a1, __CVBuffer *a2, simd_float4x4 *a3, uint64_t a4, float32x4_t *a5, const void *a6, unsigned int a7, __CVBuffer *a8)
{
  uint64_t v9;
  __CVBuffer *v11;
  int DataFormatType;
  int v19;
  unint64_t v20;
  int v21;
  unint64_t DataSize;
  unint64_t v23;
  void *BaseAddress;
  int v26;
  int v28;
  unint64_t v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  _OWORD *v33;
  size_t v34;
  char *v35;
  unsigned int *v36;
  float32x2_t *v37;
  unsigned int *v38;
  float32x2_t *v39;
  __int128 v40;
  float32x2_t *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  float32x2_t *v47;
  __int128 v48;
  float32x2_t *v49;
  char v50;
  void *v51;
  __CVBuffer *pixelBuffer;
  __int128 v53;
  uint32x2_t v54[4];
  void *__p[3];
  float32x2_t v56[6];
  float32x4_t v57[4];
  float32x2_t *v58;
  float32x2_t *v59;
  float32x2_t *v60;
  simd_float4x4 v61;

  if (!a1)
    return 0xFFFFFFFFLL;
  v9 = 0xFFFFFFFFLL;
  if (a2 && a3)
  {
    v11 = a8;
    if (a4)
    {
      DataFormatType = CVDataBufferGetDataFormatType();
      if (DataFormatType == 1278227250 || DataFormatType == 2021227107)
        v19 = DataFormatType;
      else
        v19 = 0;
      if (v19 == 2021227107)
        v20 = 48;
      else
        v20 = 4 * (v19 == 1278227250);
      v21 = CVDataBufferGetDataFormatType();
      if (v21 == 2021227107 || v21 == 1278227250)
      {
        DataSize = CVDataBufferGetDataSize();
        v11 = a8;
        if (v20)
          goto LABEL_17;
      }
      else
      {
        DataSize = 0;
        v11 = a8;
        if (v20)
        {
LABEL_17:
          v23 = DataSize / v20;
          v9 = 0xFFFFFFFFLL;
          if (!v11)
            return v9;
          goto LABEL_23;
        }
      }
    }
    v23 = 0;
    v9 = 0xFFFFFFFFLL;
    if (!v11)
      return v9;
LABEL_23:
    if (!a7)
      return v9;
    if (!a6)
      return v9;
    if (!a5)
      return v9;
    if (!v23)
      return v9;
    v61 = __invert_f4(*a3);
    v57[0] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_2393F5360, v61.columns[0].f32[0]), (float32x4_t)xmmword_2393F5370, *(float32x2_t *)v61.columns[0].f32, 1), (float32x4_t)xmmword_2393F5380, (float32x4_t)v61.columns[0], 2), (float32x4_t)xmmword_2393F5320, (float32x4_t)v61.columns[0], 3);
    v57[1] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_2393F5360, v61.columns[1].f32[0]), (float32x4_t)xmmword_2393F5370, *(float32x2_t *)v61.columns[1].f32, 1), (float32x4_t)xmmword_2393F5380, (float32x4_t)v61.columns[1], 2), (float32x4_t)xmmword_2393F5320, (float32x4_t)v61.columns[1], 3);
    v57[2] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_2393F5360, v61.columns[2].f32[0]), (float32x4_t)xmmword_2393F5370, *(float32x2_t *)v61.columns[2].f32, 1), (float32x4_t)xmmword_2393F5380, (float32x4_t)v61.columns[2], 2), (float32x4_t)xmmword_2393F5320, (float32x4_t)v61.columns[2], 3);
    v57[3] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_2393F5360, v61.columns[3].f32[0]), (float32x4_t)xmmword_2393F5370, *(float32x2_t *)v61.columns[3].f32, 1), (float32x4_t)xmmword_2393F5380, (float32x4_t)v61.columns[3], 2), (float32x4_t)xmmword_2393F5320, (float32x4_t)v61.columns[3], 3);
    if (!sub_2393BA780(a2, v11, (uint64_t)v56))
      return v9;
    memset(__p, 0, sizeof(__p));
    BaseAddress = OCDataBufferGetBaseAddress(a4);
    if (a4)
    {
      v26 = CVDataBufferGetDataFormatType();
      if (v26 == 1278227250 || v26 == 2021227107)
        v28 = v26;
      else
        v28 = 0;
      if (v28 == 2021227107)
        v29 = 48;
      else
        v29 = 4 * (v28 == 1278227250);
      v30 = CVDataBufferGetDataFormatType();
      if (v30 == 2021227107 || v30 == 1278227250)
      {
        v31 = CVDataBufferGetDataSize();
        if (v29)
        {
LABEL_41:
          v32 = v31 / v29;
          goto LABEL_44;
        }
      }
      else
      {
        v31 = 0;
        if (v29)
          goto LABEL_41;
      }
    }
    LODWORD(v32) = 0;
LABEL_44:
    sub_2393BA588((uint64_t)BaseAddress, v32, a5, (uint64_t)__p);
    v33 = __p[0];
    CVPixelBufferLockBaseAddress(v11, 0);
    cva::imageViewFromPixelBuffer<unsigned char>();
    pixelBuffer = v11;
    v34 = 4 * a7;
    v35 = (char *)operator new(v34);
    v36 = (unsigned int *)&v35[v34];
    memcpy(v35, a6, v34);
    v37 = 0;
    v58 = 0;
    v59 = 0;
    v51 = v35;
    v38 = (unsigned int *)v35;
    v60 = 0;
    do
    {
      v40 = v33[3 * *v38];
      if (v37 < v60)
      {
        *(_OWORD *)v37->f32 = v40;
        v39 = v37 + 2;
      }
      else
      {
        v41 = v58;
        v42 = ((char *)v37 - (char *)v58) >> 4;
        v43 = v42 + 1;
        if ((unint64_t)(v42 + 1) >> 60)
          abort();
        v44 = (char *)v60 - (char *)v58;
        if (v60 - v58 > v43)
          v43 = v44 >> 3;
        if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0)
          v45 = 0xFFFFFFFFFFFFFFFLL;
        else
          v45 = v43;
        if (v45)
        {
          v53 = v33[3 * *v38];
          if (v45 >> 60)
            sub_23938C4B8();
          v46 = (char *)operator new(16 * v45);
          v40 = v53;
        }
        else
        {
          v46 = 0;
        }
        v47 = (float32x2_t *)&v46[16 * v42];
        *(_OWORD *)v47->f32 = v40;
        v39 = v47 + 2;
        if (v37 != v41)
        {
          do
          {
            v48 = *(_OWORD *)v37[-2].f32;
            v37 -= 2;
            *(_OWORD *)v47[-2].f32 = v48;
            v47 -= 2;
          }
          while (v37 != v41);
          v37 = v58;
        }
        v58 = v47;
        v60 = (float32x2_t *)&v46[16 * v45];
        if (v37)
          operator delete(v37);
      }
      v59 = v39;
      ++v38;
      v37 = v39;
    }
    while (v38 != v36);
    v49 = v58;
    v50 = sub_2393B6C48(&v58, v56, v57, v54);
    if (v49)
      operator delete(v49);
    if ((v50 & 1) != 0)
    {
      CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
      v9 = 0;
    }
    else
    {
      v9 = 0xFFFFFFFFLL;
    }
    operator delete(v51);
    if (__p[0])
      operator delete(__p[0]);
  }
  return v9;
}

void sub_239394438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  void *v19;

  operator delete(v19);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t OCMaskingComputeMaskFromBoundingBox(uint64_t a1, __CVBuffer *a2, simd_float4x4 *a3, float32x4_t *a4, __CVBuffer *a5)
{
  uint64_t result;
  float32x2_t *v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  int v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  uint32x2_t v23[4];
  float32x2_t v24[6];
  float32x4_t v25[4];
  float32x2_t *v26[3];
  simd_float4x4 v27;

  if (!a1)
    return 0xFFFFFFFFLL;
  result = 0xFFFFFFFFLL;
  if (a2 && a3 && a4 && a5)
  {
    v27 = __invert_f4(*a3);
    v25[0] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_2393F5360, v27.columns[0].f32[0]), (float32x4_t)xmmword_2393F5370, *(float32x2_t *)v27.columns[0].f32, 1), (float32x4_t)xmmword_2393F5380, (float32x4_t)v27.columns[0], 2), (float32x4_t)xmmword_2393F5320, (float32x4_t)v27.columns[0], 3);
    v25[1] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_2393F5360, v27.columns[1].f32[0]), (float32x4_t)xmmword_2393F5370, *(float32x2_t *)v27.columns[1].f32, 1), (float32x4_t)xmmword_2393F5380, (float32x4_t)v27.columns[1], 2), (float32x4_t)xmmword_2393F5320, (float32x4_t)v27.columns[1], 3);
    v25[2] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_2393F5360, v27.columns[2].f32[0]), (float32x4_t)xmmword_2393F5370, *(float32x2_t *)v27.columns[2].f32, 1), (float32x4_t)xmmword_2393F5380, (float32x4_t)v27.columns[2], 2), (float32x4_t)xmmword_2393F5320, (float32x4_t)v27.columns[2], 3);
    v25[3] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_2393F5360, v27.columns[3].f32[0]), (float32x4_t)xmmword_2393F5370, *(float32x2_t *)v27.columns[3].f32, 1), (float32x4_t)xmmword_2393F5380, (float32x4_t)v27.columns[3], 2), (float32x4_t)xmmword_2393F5320, (float32x4_t)v27.columns[3], 3);
    if (!sub_2393BA780(a2, a5, (uint64_t)v24))
      return 0xFFFFFFFFLL;
    CVPixelBufferLockBaseAddress(a5, 0);
    cva::imageViewFromPixelBuffer<unsigned char>();
    v19 = *a4;
    v20 = a4[1];
    v21 = a4[3];
    v22 = a4[2];
    v9 = (float32x2_t *)operator new(0x80uLL);
    v26[1] = v9 + 16;
    v26[2] = v9 + 16;
    v26[0] = v9;
    v10.i64[0] = 0xBF000000BF000000;
    v10.i64[1] = 0xBF000000BF000000;
    v11 = vmulq_f32(v19, v10);
    v12 = vmlaq_f32(v11, v10, v20);
    v13.i64[0] = 0x3F0000003F000000;
    v13.i64[1] = 0x3F0000003F000000;
    v14 = vmulq_f32(v19, v13);
    v15 = vmlaq_f32(v14, v10, v20);
    *(float32x4_t *)v9->f32 = vaddq_f32(v21, vmlaq_f32(v12, v10, v22));
    *(float32x4_t *)v9[2].f32 = vaddq_f32(v21, vmlaq_f32(v15, v10, v22));
    *(float32x4_t *)v9[4].f32 = vaddq_f32(v21, vmlaq_f32(v15, v13, v22));
    *(float32x4_t *)v9[6].f32 = vaddq_f32(v21, vmlaq_f32(v12, v13, v22));
    v16 = vmlaq_f32(v11, v13, v20);
    v17 = vmlaq_f32(v14, v13, v20);
    *(float32x4_t *)v9[8].f32 = vaddq_f32(v21, vmlaq_f32(v16, v10, v22));
    *(float32x4_t *)v9[10].f32 = vaddq_f32(v21, vmlaq_f32(v17, v10, v22));
    *(float32x4_t *)v9[12].f32 = vaddq_f32(v21, vmlaq_f32(v17, v13, v22));
    *(float32x4_t *)v9[14].f32 = vaddq_f32(v21, vmlaq_f32(v16, v13, v22));
    v18 = sub_2393B6C48(v26, v24, v25, v23);
    operator delete(v9);
    if (v18)
    {
      CVPixelBufferUnlockBaseAddress(a5, 0);
      return 0;
    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t OCMaskingStop(uint64_t a1)
{
  if (a1)
    return 0;
  else
    return 0xFFFFFFFFLL;
}

uint64_t OCMaskingDestroy(uint64_t a1)
{
  const void *v2;
  int DataFormatType;
  void *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(const void **)(a1 + 8);
  if (v2)
  {
    DataFormatType = CVDataBufferGetDataFormatType();
    if (DataFormatType == 2021227107 || DataFormatType == 1278227250)
      CFRelease(v2);
  }
  v5 = *(void **)(a1 + 80);
  if (v5)
  {
    *(_QWORD *)(a1 + 88) = v5;
    operator delete(v5);
  }
  v6 = *(uint64_t **)a1;
  *(_QWORD *)a1 = 0;
  if (v6)
  {
    v7 = v6[1];
    v6[1] = 0;
    if (v7)
      MEMORY[0x23B83C4BC](v7, 0x1000C40B794406BLL);
    v8 = *v6;
    *v6 = 0;
    if (v8)
    {
      sub_2393939C8(v8 + 8);
      MEMORY[0x23B83C4BC](v8, 0x1080C40E0B7A938);
    }
    MEMORY[0x23B83C4BC](v6, 0x20C40A4A59CD2);
  }
  MEMORY[0x23B83C4BC](a1, 0x1030C407D372109);
  return 0;
}

uint64_t OCMaskingGetDebugInfo(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  if (!a1)
    return 0xFFFFFFFFLL;
  result = 0;
  *(_QWORD *)a2 = *(_QWORD *)(a1 + 8);
  v4 = *(_OWORD *)(a1 + 16);
  v5 = *(_OWORD *)(a1 + 32);
  v6 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 64) = v6;
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v5;
  v8 = *(_QWORD *)(a1 + 80);
  v7 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a2 + 80) = v8;
  *(_DWORD *)(a2 + 88) = (unint64_t)(v7 - v8) >> 2;
  return result;
}

uint64_t OCNonModularSPI_NSData_CreateDepthPointCloudDataBuffer(void *a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *BaseAddress;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  IOSurfaceRef buffer;

  v1 = a1;
  v4 = v1;
  if (v1)
  {
    buffer = 0;
    v5 = objc_msgSend_length(v1, v2, v3);
    if (!sub_23938BFB0(1785950320, v5, &buffer))
    {
      BaseAddress = IOSurfaceGetBaseAddress(buffer);
      v9 = objc_msgSend_length(v4, v7, v8);
      objc_msgSend_getBytes_length_(v4, v10, (uint64_t)BaseAddress, v9);
      CVDataBufferCreateWithIOSurface();
      CFRelease(buffer);
    }
  }

  return 0;
}

void sub_239394868(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t OCNonModularSPI_CMPhoto_HeicWriteCreate(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;

  if (!a1)
    return 4294967294;
  if (CMPhotoCompressionSessionCreate())
    return 0xFFFFFFFFLL;
  v3 = malloc_type_malloc(8uLL, 0x2004093837F09uLL);
  result = 0;
  *v3 = 0;
  *a1 = v3;
  return result;
}

uint64_t OCNonModularSPI_CMPhoto_HeicWriteStart(uint64_t a1)
{
  if (a1)
    return 0;
  else
    return 4294967294;
}

uint64_t OCNonModularSPI_CMPhoto_write(const void **a1, void *a2, uint64_t *a3, uint64_t a4)
{
  id v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  NSObject *v16;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  void *v43;
  const char *v44;
  NSObject *v45;
  const char *v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  void *v54;
  const char *v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  NSObject *v59;
  const __CFDictionary *v60;
  NSObject *v61;
  NSObject *v62;
  id v63;
  const char *v64;
  void *v65;
  const char *v66;
  const char *v67;
  uint64_t v68;
  void *v69;
  const char *v70;
  NSObject *v71;
  id v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  const char *v77;
  NSObject *v78;
  const char *v79;
  id v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  const char *v85;
  NSObject *v86;
  const char *v87;
  uint64_t v88;
  NSObject *v89;
  const char *v90;
  void *DataSize;
  __IOSurface *IOSurface;
  void *BaseAddress;
  const char *v94;
  const char *v95;
  NSObject *v96;
  NSObject *v97;
  void *v98;
  id v99;
  const char *v100;
  void *v101;
  const char *v102;
  NSObject *v103;
  void *v104;
  const char *v105;
  NSObject *v106;
  void *v107;
  id v108;
  const char *v109;
  void *v110;
  const char *v111;
  NSObject *v112;
  void *v113;
  const char *v114;
  NSObject *v115;
  void *v116;
  const char *v117;
  NSObject *v118;
  id v119;
  const char *v120;
  uint64_t v121;
  uint64_t v122;
  __int128 v123;
  const char *v124;
  NSObject *v125;
  void *v126;
  id v127;
  const char *v128;
  void *v129;
  const char *v130;
  NSObject *v131;
  const char *v132;
  uint64_t v133;
  id v134;
  NSObject *v135;
  const void *v136;
  uint64_t v137;
  const char *v138;
  const char *v139;
  uint64_t v140;
  void *v141;
  uint64_t v142;
  const char *v143;
  const char *v144;
  const char *v145;
  const void *Value;
  const char *v147;
  _BOOL4 v148;
  const char *v149;
  void *v151;
  const char *v152;
  _BOOL4 v153;
  uint64_t v154;
  void *v155;
  const char *v156;
  void *v157;
  const char *v158;
  uint64_t v159;
  uint64_t v160;
  __CVBuffer *v161;
  const __CFDictionary *theDict;
  uint64_t v163;
  void *v164;
  int8x16_t v165;
  int8x16_t v166;
  int8x16_t v167;
  void *v168;
  int8x16_t v169;
  int8x16_t v170;
  int8x16_t v171;
  void *v172;
  int32x4_t v173;
  int32x4_t v174;
  int32x4_t v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  __int128 v182;
  __int128 v183;
  uint64_t v184;
  uint64_t v186;
  __CVBuffer *v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  _QWORD v192[3];
  _QWORD v193[3];
  _QWORD v194[2];
  __int128 buf;
  void *v196;
  void *v197;
  void *v198;
  void *v199;
  void *v200;
  void *v201;
  void *v202;
  uint64_t v203;

  v203 = *MEMORY[0x24BDAC8D0];
  v6 = a2;
  v9 = v6;
  v10 = 4294967294;
  if (!a1 || !v6 || !objc_msgSend_isFileURL(v6, v7, v8))
    goto LABEL_135;
  objc_msgSend_pathExtension(v9, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_caseInsensitiveCompare_(v13, v14, (uint64_t)CFSTR("HEIC")))
  {

    goto LABEL_135;
  }
  v15 = *a3;

  if (!v15)
  {
    v10 = 4294967294;
    goto LABEL_135;
  }
  v190 = 0u;
  v191 = 0u;
  v188 = 0u;
  v189 = 0u;
  if (!*a3)
  {
    if (qword_256930008 != -1)
      dispatch_once(&qword_256930008, &unk_250AD5950);
    v96 = qword_256930000;
    if (os_log_type_enabled((os_log_t)qword_256930000, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_error_impl(&dword_239388000, v96, OS_LOG_TYPE_ERROR, "HEIC Serialization: Invalid imageData or imageDataInternal.", (uint8_t *)&buf, 2u);
      v10 = 0xFFFFFFFFLL;
      goto LABEL_135;
    }
LABEL_122:
    v10 = 0xFFFFFFFFLL;
    goto LABEL_135;
  }
  v186 = *a3;
  if (qword_256930008 != -1)
    dispatch_once(&qword_256930008, &unk_250AD5950);
  v16 = (id)qword_256930000;
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf) = 0;
    _os_log_debug_impl(&dword_239388000, v16, OS_LOG_TYPE_DEBUG, "HEIC Serialization: Prepared shot image.", (uint8_t *)&buf, 2u);
  }

  v187 = (__CVBuffer *)a3[2];
  v161 = v187;
  if (qword_256930008 != -1)
    dispatch_once(&qword_256930008, &unk_250AD5950);
  v17 = (id)qword_256930000;
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf) = 0;
    _os_log_debug_impl(&dword_239388000, v17, OS_LOG_TYPE_DEBUG, "HEIC Serialization: Prepared shot depth data.", (uint8_t *)&buf, 2u);
  }

  v160 = a3[3];
  *(_QWORD *)&v188 = v160;
  if (qword_256930008 != -1)
    dispatch_once(&qword_256930008, &unk_250AD5950);
  v18 = (id)qword_256930000;
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf) = 0;
    _os_log_debug_impl(&dword_239388000, v18, OS_LOG_TYPE_DEBUG, "HEIC Serialization: Prepared shot depth confidence data.", (uint8_t *)&buf, 2u);
  }

  *((_QWORD *)&v188 + 1) = a3[4];
  if (qword_256930008 != -1)
    dispatch_once(&qword_256930008, &unk_250AD5950);
  v19 = (id)qword_256930000;
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf) = 0;
    _os_log_debug_impl(&dword_239388000, v19, OS_LOG_TYPE_DEBUG, "HEIC Serialization: Prepared object mask.", (uint8_t *)&buf, 2u);
  }

  v180 = *((_OWORD *)a3 + 10);
  v182 = *((_OWORD *)a3 + 9);
  v176 = *((_OWORD *)a3 + 8);
  objc_msgSend_numberWithDouble_(MEMORY[0x24BDD16E0], v20, v21, *(float *)&v176);
  v172 = (void *)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)&buf = v172;
  objc_msgSend_numberWithDouble_(MEMORY[0x24BDD16E0], v22, v23, *(float *)&v182);
  v168 = (void *)objc_claimAutoreleasedReturnValue();
  *((_QWORD *)&buf + 1) = v168;
  objc_msgSend_numberWithDouble_(MEMORY[0x24BDD16E0], v24, v25, *(float *)&v180);
  v164 = (void *)objc_claimAutoreleasedReturnValue();
  v196 = v164;
  objc_msgSend_numberWithDouble_(MEMORY[0x24BDD16E0], v26, v27, *((float *)&v176 + 1));
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  v197 = v28;
  objc_msgSend_numberWithDouble_(MEMORY[0x24BDD16E0], v29, v30, *((float *)&v182 + 1));
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  v198 = v31;
  objc_msgSend_numberWithDouble_(MEMORY[0x24BDD16E0], v32, v33, *((float *)&v180 + 1));
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  v199 = v34;
  objc_msgSend_numberWithDouble_(MEMORY[0x24BDD16E0], v35, v36, *((float *)&v176 + 2));
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  v200 = v37;
  objc_msgSend_numberWithDouble_(MEMORY[0x24BDD16E0], v38, v39, *((float *)&v182 + 2));
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  v201 = v40;
  objc_msgSend_numberWithDouble_(MEMORY[0x24BDD16E0], v41, v42, *((float *)&v180 + 2));
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  v202 = v43;
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x24BDBCE30], v44, (uint64_t)&buf, 9);
  v181 = objc_claimAutoreleasedReturnValue();

  *(_QWORD *)&v190 = v181;
  if (qword_256930008 != -1)
    dispatch_once(&qword_256930008, &unk_250AD5950);
  v45 = (id)qword_256930000;
  if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf) = 0;
    _os_log_debug_impl(&dword_239388000, v45, OS_LOG_TYPE_DEBUG, "HEIC Serialization: Prepared camera intrinsics.", (uint8_t *)&buf, 2u);
  }

  v183 = *((_OWORD *)a3 + 6);
  objc_msgSend_numberWithDouble_(MEMORY[0x24BDD16E0], v46, v47, *(float *)&v183);
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)&buf = v48;
  objc_msgSend_numberWithDouble_(MEMORY[0x24BDD16E0], v49, v50, *((float *)&v183 + 1));
  v51 = (void *)objc_claimAutoreleasedReturnValue();
  *((_QWORD *)&buf + 1) = v51;
  objc_msgSend_numberWithDouble_(MEMORY[0x24BDD16E0], v52, v53, *((float *)&v183 + 2));
  v54 = (void *)objc_claimAutoreleasedReturnValue();
  v196 = v54;
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x24BDBCE30], v55, (uint64_t)&buf, 3);
  v184 = objc_claimAutoreleasedReturnValue();

  *((_QWORD *)&v190 + 1) = v184;
  sub_239389E54(*((__n128 *)a3 + 3), *((__n128 *)a3 + 4), *((__n128 *)a3 + 5), v56, v57, v58);
  *(_QWORD *)&v191 = objc_claimAutoreleasedReturnValue();
  v163 = v191;
  if (qword_256930008 != -1)
    dispatch_once(&qword_256930008, &unk_250AD5950);
  v59 = (id)qword_256930000;
  if (os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf) = 0;
    _os_log_debug_impl(&dword_239388000, v59, OS_LOG_TYPE_DEBUG, "HEIC Serialization: Prepared camera extrinsics.", (uint8_t *)&buf, 2u);
  }

  v60 = (const __CFDictionary *)a3[1];
  *(_QWORD *)&v189 = v60;
  if (qword_256930008 != -1)
    dispatch_once(&qword_256930008, &unk_250AD5950);
  v61 = (id)qword_256930000;
  if (os_log_type_enabled(v61, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf) = 0;
    _os_log_debug_impl(&dword_239388000, v61, OS_LOG_TYPE_DEBUG, "HEIC Serialization: Prepared image properties.", (uint8_t *)&buf, 2u);
  }

  theDict = (const __CFDictionary *)a3[54];
  *((_QWORD *)&v189 + 1) = theDict;
  if (qword_256930008 != -1)
    dispatch_once(&qword_256930008, &unk_250AD5950);
  v62 = (id)qword_256930000;
  if (os_log_type_enabled(v62, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf) = 0;
    _os_log_debug_impl(&dword_239388000, v62, OS_LOG_TYPE_DEBUG, "HEIC Serialization: Prepared XMP custom metadata.", (uint8_t *)&buf, 2u);
  }

  v63 = objc_alloc_init(MEMORY[0x24BDBCED8]);
  LODWORD(v194[0]) = *((_DWORD *)a3 + 28);
  objc_msgSend_dataWithBytes_length_(MEMORY[0x24BDBCE50], v64, (uint64_t)v194, 4);
  v65 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v63, v66, (uint64_t)v65, CFSTR("tag:apple.com,2023:ObjectCapture#CameraTrackingState"));

  v68 = a3[22];
  if (v68)
  {
    objc_msgSend_archivedDataWithRootObject_requiringSecureCoding_error_(MEMORY[0x24BDD1618], v67, v68, 1, 0);
    v69 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v63, v70, (uint64_t)v69, CFSTR("tag:apple.com,2023:ObjectCapture#CameraCalibrationData"));
    if (qword_256930008 != -1)
      dispatch_once(&qword_256930008, &unk_250AD5950);
    v71 = (id)qword_256930000;
    if (os_log_type_enabled(v71, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf) = 0;
      _os_log_debug_impl(&dword_239388000, v71, OS_LOG_TYPE_DEBUG, "HEIC Serialization: Prepared camera calibration data.", (uint8_t *)&buf, 2u);
    }

  }
  v173 = *((int32x4_t *)a3 + 18);
  v177 = *((_OWORD *)a3 + 16);
  v165 = *((int8x16_t *)a3 + 17);
  v169 = *((int8x16_t *)a3 + 19);
  objc_msgSend_dataWithLength_(MEMORY[0x24BDBCEC8], v67, 48, *((_QWORD *)&v188 + 1));
  v72 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v75 = objc_msgSend_mutableBytes(v72, v73, v74);
  v76 = v177;
  HIDWORD(v76) = v165.i32[0];
  *(_OWORD *)v75 = v76;
  *(int8x16_t *)(v75 + 16) = vextq_s8(vextq_s8(v165, v165, 0xCuLL), (int8x16_t)v173, 8uLL);
  *(int8x16_t *)(v75 + 32) = vextq_s8((int8x16_t)vuzp1q_s32(v173, v173), v169, 0xCuLL);
  objc_msgSend_setObject_forKeyedSubscript_(v63, v77, (uint64_t)v72, CFSTR("tag:apple.com,2023:ObjectCapture#ObjectTransform"));

  if (qword_256930008 != -1)
    dispatch_once(&qword_256930008, &unk_250AD5950);
  v78 = (id)qword_256930000;
  if (os_log_type_enabled(v78, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf) = 0;
    _os_log_debug_impl(&dword_239388000, v78, OS_LOG_TYPE_DEBUG, "HEIC Serialization: Prepared object transform.", (uint8_t *)&buf, 2u);
  }

  v174 = *((int32x4_t *)a3 + 22);
  v178 = *((_OWORD *)a3 + 20);
  v166 = *((int8x16_t *)a3 + 21);
  v170 = *((int8x16_t *)a3 + 23);
  objc_msgSend_dataWithLength_(MEMORY[0x24BDBCEC8], v79, 48);
  v80 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v83 = objc_msgSend_mutableBytes(v80, v81, v82);
  v84 = v178;
  HIDWORD(v84) = v166.i32[0];
  *(_OWORD *)v83 = v84;
  *(int8x16_t *)(v83 + 16) = vextq_s8(vextq_s8(v166, v166, 0xCuLL), (int8x16_t)v174, 8uLL);
  *(int8x16_t *)(v83 + 32) = vextq_s8((int8x16_t)vuzp1q_s32(v174, v174), v170, 0xCuLL);
  objc_msgSend_setObject_forKeyedSubscript_(v63, v85, (uint64_t)v80, CFSTR("tag:apple.com,2023:ObjectCapture#ObjectBoundingBox"));

  if (qword_256930008 != -1)
    dispatch_once(&qword_256930008, &unk_250AD5950);
  v86 = (id)qword_256930000;
  if (os_log_type_enabled(v86, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf) = 0;
    _os_log_debug_impl(&dword_239388000, v86, OS_LOG_TYPE_DEBUG, "HEIC Serialization: Prepared bounding box transform.", (uint8_t *)&buf, 2u);
  }

  v88 = a3[48];
  if (v88)
  {
    objc_msgSend_setObject_forKeyedSubscript_(v63, v87, v88, CFSTR("tag:apple.com,2023:ObjectCapture#RawFeaturePoints"));
    if (qword_256930008 != -1)
      dispatch_once(&qword_256930008, &unk_250AD5950);
    v89 = (id)qword_256930000;
    if (os_log_type_enabled(v89, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf) = 0;
      _os_log_debug_impl(&dword_239388000, v89, OS_LOG_TYPE_DEBUG, "HEIC Serialization: Prepared raw feature points.", (uint8_t *)&buf, 2u);
    }

  }
  if (a3[5])
  {
    DataSize = (void *)CVDataBufferGetDataSize();
    if (DataSize)
    {
      IOSurface = (__IOSurface *)CVDataBufferGetIOSurface();
      if (IOSurface)
      {
        BaseAddress = IOSurfaceGetBaseAddress(IOSurface);
        objc_msgSend_dataWithBytes_length_(MEMORY[0x24BDBCE50], v94, (uint64_t)BaseAddress, DataSize);
        DataSize = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setObject_forKeyedSubscript_(v63, v95, (uint64_t)DataSize, CFSTR("tag:apple.com,2023:ObjectCapture#PointCloudData"));
LABEL_71:

        if (qword_256930008 != -1)
          dispatch_once(&qword_256930008, &unk_250AD5950);
        v97 = (id)qword_256930000;
        if (os_log_type_enabled(v97, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(buf) = 0;
          _os_log_debug_impl(&dword_239388000, v97, OS_LOG_TYPE_DEBUG, "HEIC Serialization: Prepared point cloud data.", (uint8_t *)&buf, 2u);
        }

        goto LABEL_76;
      }
      DataSize = 0;
    }
    objc_msgSend_setObject_forKeyedSubscript_(v63, v90, (uint64_t)DataSize, CFSTR("tag:apple.com,2023:ObjectCapture#PointCloudData"));
    goto LABEL_71;
  }
LABEL_76:
  v98 = (void *)a3[49];
  if (v98)
  {
    v99 = v98;
    objc_msgSend_dataUsingEncoding_(v99, v100, 4);
    v101 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v63, v102, (uint64_t)v101, CFSTR("tag:apple.com,2023:ObjectCapture#BundleVersion"));
    if (qword_256930008 != -1)
      dispatch_once(&qword_256930008, &unk_250AD5950);
    v103 = (id)qword_256930000;
    if (os_log_type_enabled(v103, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf) = 0;
      _os_log_debug_impl(&dword_239388000, v103, OS_LOG_TYPE_DEBUG, "HEIC Serialization: Prepared heic version data.", (uint8_t *)&buf, 2u);
    }

  }
  if ((a3[50] & 0x80000000) == 0)
  {
    objc_msgSend_dataWithBytes_length_(MEMORY[0x24BDBCE50], v87, (uint64_t)(a3 + 50), 4);
    v104 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v63, v105, (uint64_t)v104, CFSTR("tag:apple.com,2023:ObjectCapture#SegmentID"));

    if (qword_256930008 != -1)
      dispatch_once(&qword_256930008, &unk_250AD5950);
    v106 = (id)qword_256930000;
    if (os_log_type_enabled(v106, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf) = 0;
      _os_log_debug_impl(&dword_239388000, v106, OS_LOG_TYPE_DEBUG, "HEIC Serialization: Prepared segment ID data.", (uint8_t *)&buf, 2u);
    }

  }
  v107 = (void *)a3[51];
  if (v107)
  {
    v108 = v107;
    objc_msgSend_dataUsingEncoding_(v108, v109, 4);
    v110 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v63, v111, (uint64_t)v110, CFSTR("tag:apple.com,2024:ObjectCapture#SessionUUID"));
    if (qword_256930008 != -1)
      dispatch_once(&qword_256930008, &unk_250AD5950);
    v112 = (id)qword_256930000;
    if (os_log_type_enabled(v112, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf) = 0;
      _os_log_debug_impl(&dword_239388000, v112, OS_LOG_TYPE_DEBUG, "HEIC Serialization: Prepared session UUID data.", (uint8_t *)&buf, 2u);
    }

  }
  if ((a3[52] & 0x80000000) == 0)
  {
    objc_msgSend_dataWithBytes_length_(MEMORY[0x24BDBCE50], v87, (uint64_t)(a3 + 52), 4);
    v113 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v63, v114, (uint64_t)v113, CFSTR("tag:apple.com,2024:ObjectCapture#CaptureMode"));

    if (qword_256930008 != -1)
      dispatch_once(&qword_256930008, &unk_250AD5950);
    v115 = (id)qword_256930000;
    if (os_log_type_enabled(v115, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf) = 0;
      _os_log_debug_impl(&dword_239388000, v115, OS_LOG_TYPE_DEBUG, "HEIC Serialization: Prepared capture mode data.", (uint8_t *)&buf, 2u);
    }

  }
  if ((*((_DWORD *)a3 + 105) & 0x80000000) == 0)
  {
    objc_msgSend_dataWithBytes_length_(MEMORY[0x24BDBCE50], v87, (uint64_t)a3 + 420, 4);
    v116 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v63, v117, (uint64_t)v116, CFSTR("tag:apple.com,2023:ObjectCapture#Feedback"));

    if (qword_256930008 != -1)
      dispatch_once(&qword_256930008, &unk_250AD5950);
    v118 = (id)qword_256930000;
    if (os_log_type_enabled(v118, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf) = 0;
      _os_log_debug_impl(&dword_239388000, v118, OS_LOG_TYPE_DEBUG, "HEIC Serialization: Prepared feedback data.", (uint8_t *)&buf, 2u);
    }

  }
  v175 = *((int32x4_t *)a3 + 14);
  v179 = *((_OWORD *)a3 + 12);
  v167 = *((int8x16_t *)a3 + 13);
  v171 = *((int8x16_t *)a3 + 15);
  objc_msgSend_dataWithLength_(MEMORY[0x24BDBCEC8], v87, 48);
  v119 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v122 = objc_msgSend_mutableBytes(v119, v120, v121);
  v123 = v179;
  HIDWORD(v123) = v167.i32[0];
  *(_OWORD *)v122 = v123;
  *(int8x16_t *)(v122 + 16) = vextq_s8(vextq_s8(v167, v167, 0xCuLL), (int8x16_t)v175, 8uLL);
  *(int8x16_t *)(v122 + 32) = vextq_s8((int8x16_t)vuzp1q_s32(v175, v175), v171, 0xCuLL);
  objc_msgSend_setObject_forKeyedSubscript_(v63, v124, (uint64_t)v119, CFSTR("tag:apple.com,2023:ObjectCapture#WideToDepthCameraTransform"));

  if (qword_256930008 != -1)
    dispatch_once(&qword_256930008, &unk_250AD5950);
  v125 = (id)qword_256930000;
  if (os_log_type_enabled(v125, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf) = 0;
    _os_log_debug_impl(&dword_239388000, v125, OS_LOG_TYPE_DEBUG, "HEIC Serialization: Prepared wide to depth camera transform.", (uint8_t *)&buf, 2u);
  }

  v126 = (void *)a3[53];
  if (v126)
  {
    v127 = v126;
    objc_msgSend_archivedDataWithRootObject_requiringSecureCoding_error_(MEMORY[0x24BDD1618], v128, (uint64_t)v127, 1, 0);
    v129 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v63, v130, (uint64_t)v129, CFSTR("tag:apple.com,2023:ObjectCapture#TemporalDepthPointClouds"));
    if (qword_256930008 != -1)
      dispatch_once(&qword_256930008, &unk_250AD5950);
    v131 = (id)qword_256930000;
    if (os_log_type_enabled(v131, OS_LOG_TYPE_DEBUG))
    {
      v154 = objc_msgSend_count(v127, v132, v133);
      LODWORD(buf) = 134217984;
      *(_QWORD *)((char *)&buf + 4) = v154;
      _os_log_debug_impl(&dword_239388000, v131, OS_LOG_TYPE_DEBUG, "HEIC Serialization: Prepared %lu frames of temporal LiDAR point cloud data.", (uint8_t *)&buf, 0xCu);
    }

  }
  v134 = v63;
  *((_QWORD *)&v191 + 1) = v134;
  if (qword_256930008 != -1)
    dispatch_once(&qword_256930008, &unk_250AD5950);
  v135 = (id)qword_256930000;
  if (os_log_type_enabled(v135, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf) = 0;
    _os_log_debug_impl(&dword_239388000, v135, OS_LOG_TYPE_DEBUG, "HEIC Serialization: Prepared HEIF custom metadata.", (uint8_t *)&buf, 2u);
  }

  v136 = *a1;
  v137 = *MEMORY[0x24BE12030];
  v192[0] = *MEMORY[0x24BE12038];
  v192[1] = v137;
  v193[0] = &unk_250AD91E0;
  v193[1] = &unk_250AD91F8;
  v192[2] = *MEMORY[0x24BE12028];
  v193[2] = v9;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x24BDBCE70], v138, (uint64_t)v193, v192, 3);
  if (CMPhotoCompressionSessionOpenEmptyContainer())
  {
    CFRelease(v136);
    sub_23938A020(&v186);
    goto LABEL_122;
  }
  if (!CMPhotoCompressionSessionIsContainerOpen())
  {
    objc_msgSend_currentHandler(MEMORY[0x24BDD1448], v139, v140);
    v155 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringWithUTF8String_(MEMORY[0x24BDD17C8], v156, (uint64_t)"OCReturn OCNonModularSPI_CMPhoto_write(const OCHeicWriteHandle, const NSURL *__strong, const OCImageData *, size_t)");
    v157 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v155, v158, (uint64_t)v157, CFSTR("CMPhoto+NonModularSPI.m"), 637, CFSTR("Failed to open the compression session container to write."));

  }
  objc_msgSend_dictionary(MEMORY[0x24BDBCED8], v139, v140);
  v141 = (void *)objc_claimAutoreleasedReturnValue();
  v142 = *MEMORY[0x24BE12050];
  objc_msgSend_setObject_forKeyedSubscript_(v141, v143, (uint64_t)&unk_250AD9210, *MEMORY[0x24BE12050]);
  if (v181)
    objc_msgSend_setObject_forKeyedSubscript_(v141, v144, v181, *MEMORY[0x24BE12078]);
  if (v184 && v163)
  {
    objc_msgSend_setObject_forKeyedSubscript_(v141, v144, v184, *MEMORY[0x24BE12058]);
    objc_msgSend_setObject_forKeyedSubscript_(v141, v145, v163, *MEMORY[0x24BE12060]);
  }
  if (v60)
  {
    Value = CFDictionaryGetValue(v60, (const void *)*MEMORY[0x24BDD9698]);
    objc_msgSend_setObject_forKeyedSubscript_(v141, v147, (uint64_t)Value, *MEMORY[0x24BE12070]);
  }
  objc_msgSend_setObject_forKeyedSubscript_(v141, v144, MEMORY[0x24BDBD1C8], *MEMORY[0x24BE120C0]);
  v148 = CMPhotoCompressionSessionAddImage() == 0;

  if (!v148)
    goto LABEL_133;
  if (a4)
  {
    v194[0] = *MEMORY[0x24BE12080];
    objc_msgSend_numberWithUnsignedLong_(MEMORY[0x24BDD16E0], v149, a4);
    v151 = (void *)objc_claimAutoreleasedReturnValue();
    v194[1] = v142;
    *(_QWORD *)&buf = v151;
    *((_QWORD *)&buf + 1) = &unk_250AD9210;
    objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x24BDBCE70], v152, (uint64_t)&buf, v194, 2);
    v153 = CMPhotoCompressionSessionAddThumbnail() == 0;

    if (!v153)
      goto LABEL_133;
  }
  if ((!v60 || !CMPhotoCompressionSessionAddMetadataFromImageProperties())
    && sub_23939608C((int)v136, 0, theDict)
    && sub_239396194((int)v136, 0, v161, v160, v159)
    && sub_239396364((uint64_t)v136, 0, v134))
  {
    if (CMPhotoCompressionSessionCloseContainer())
      v10 = 0xFFFFFFFFLL;
    else
      v10 = 0;
  }
  else
  {
LABEL_133:
    v10 = 0xFFFFFFFFLL;
  }
  sub_23938A020(&v186);
LABEL_135:

  return v10;
}

void sub_239396014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  id v29;

  if (a2 == 1)
  {
    v29 = objc_begin_catch(exception_object);
    sub_23938A020(&a29);

    objc_end_catch();
    JUMPOUT(0x2393958D0);
  }
  _Unwind_Resume(exception_object);
}

CGImageMetadata *sub_23939608C(int a1, int a2, CFDictionaryRef theDict)
{
  CGImageMetadata *result;
  const CGImageMetadata *v5;
  CFDataRef XMPData;
  int v7;
  _QWORD v8[3];
  uint64_t v9;

  if (!theDict)
    return (CGImageMetadata *)1;
  if (!CFDictionaryGetCount(theDict))
    return (CGImageMetadata *)1;
  result = CGImageMetadataCreateMutable();
  if (result)
  {
    v5 = result;
    result = (CGImageMetadata *)CGImageMetadataRegisterNamespaceForPrefix(result, CFSTR("http://ns.apple.com/oc/1.0/"), CFSTR("oc"), 0);
    if ((_DWORD)result)
    {
      v8[0] = v5;
      v8[1] = CFSTR("http://ns.apple.com/oc/1.0/");
      v8[2] = CFSTR("oc");
      v9 = 1;
      CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)sub_239396D18, v8);
      if ((_BYTE)v9)
      {
        XMPData = CGImageMetadataCreateXMPData(v5, 0);
        CFRelease(v5);
        if (XMPData)
        {
          v7 = CMPhotoCompressionSessionAddXMP();
          CFRelease(XMPData);
          return (CGImageMetadata *)(v7 == 0);
        }
      }
      else
      {
        CFRelease(v5);
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_239396194(int a1, const char *a2, CVPixelBufferRef pixelBuffer, uint64_t a4, uint64_t a5)
{
  uint64_t *v7;
  const char *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[2];
  _QWORD v15[2];
  _QWORD v16[2];
  _QWORD v17[2];
  uint64_t v18;
  _QWORD v19[2];

  v19[1] = *MEMORY[0x24BDAC8D0];
  v7 = (uint64_t *)MEMORY[0x24BE12050];
  if (pixelBuffer)
  {
    if (CVPixelBufferGetPixelFormatType(pixelBuffer) != 1751411059)
      CVPixelBufferGetPixelFormatType(pixelBuffer);
    v18 = *v7;
    v19[0] = &unk_250AD9210;
    objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x24BDBCE70], v9, (uint64_t)v19, &v18, 1);
    if (CMPhotoCompressionSessionAddAuxiliaryImage())
      return 0;
  }
  v10 = (uint64_t *)MEMORY[0x24BE12048];
  if (a4)
  {
    v11 = *MEMORY[0x24BE12048];
    v16[0] = *v7;
    v16[1] = v11;
    v17[0] = &unk_250AD9210;
    v17[1] = CFSTR("tag:apple.com,2023:ObjectCapture#DepthConfidenceMap");
    objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x24BDBCE70], a2, (uint64_t)v17, v16, 2);
    if (CMPhotoCompressionSessionAddAuxiliaryImage())
      return 0;
  }
  if (a5
    && (v12 = *v10,
        v14[0] = *v7,
        v14[1] = v12,
        v15[0] = &unk_250AD9210,
        v15[1] = CFSTR("tag:apple.com,2023:ObjectCapture#ObjectMask"),
        objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x24BDBCE70], a2, (uint64_t)v15, v14, 2),
        CMPhotoCompressionSessionAddAuxiliaryImage()))
  {
    return 0;
  }
  else
  {
    return 1;
  }
}

uint64_t sub_239396364(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  const char *v4;
  void *v5;
  const char *v6;
  void *v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  _BOOL4 v15;
  uint64_t v16;
  const char *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  void *v28;
  _QWORD *v29;
  const char *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  void *v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const char *v59;
  void *v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  const char *v65;
  void *v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  const char *v71;
  void *v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  const char *v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  const char *v82;
  void *v83;
  uint64_t v84;
  const char *v85;
  void *v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  const char *v90;
  void *v92;
  uint64_t v93;
  void *v94;
  void *v95;
  void *v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  uint64_t v112;
  void *v113;
  _QWORD v114[3];
  _QWORD v115[3];
  _QWORD v116[3];
  _QWORD v117[3];
  _QWORD v118[3];
  _QWORD v119[3];
  _QWORD v120[3];
  _QWORD v121[3];
  _QWORD v122[3];
  _QWORD v123[3];
  _QWORD v124[3];
  _QWORD v125[3];
  _QWORD v126[3];
  _QWORD v127[3];
  _QWORD v128[3];
  _QWORD v129[3];
  _QWORD v130[3];
  _QWORD v131[3];
  _QWORD v132[3];
  _QWORD v133[3];
  _QWORD v134[3];
  _QWORD v135[3];
  _QWORD v136[3];
  _QWORD v137[3];
  _QWORD v138[3];
  _QWORD v139[5];

  v139[3] = *MEMORY[0x24BDAC8D0];
  v3 = a3;
  v5 = v3;
  if (v3)
  {
    objc_msgSend_objectForKeyedSubscript_(v3, v4, (uint64_t)CFSTR("tag:apple.com,2023:ObjectCapture#CameraTrackingState"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = (_QWORD *)MEMORY[0x24BE120D8];
    v9 = (uint64_t *)MEMORY[0x24BE120E8];
    v10 = (uint64_t *)MEMORY[0x24BE120E0];
    if (v7)
    {
      v138[0] = *MEMORY[0x24BE120D8];
      objc_msgSend_objectForKeyedSubscript_(v5, v6, (uint64_t)CFSTR("tag:apple.com,2023:ObjectCapture#CameraTrackingState"));
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = *v9;
      v139[0] = v11;
      v139[1] = CFSTR("tag:apple.com,2023:ObjectCapture#CameraTrackingState");
      v13 = *v10;
      v138[1] = v12;
      v138[2] = v13;
      v139[2] = CFSTR("Object Capture camera tracking state");
      objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x24BDBCE70], v14, (uint64_t)v139, v138, 3);
      if (CMPhotoCompressionSessionAddCustomMetadata())
      {
        v15 = 1;
        goto LABEL_71;
      }
      v113 = v11;
    }
    objc_msgSend_objectForKeyedSubscript_(v5, v6, (uint64_t)CFSTR("tag:apple.com,2023:ObjectCapture#CameraCalibrationData"));
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    if (v18)
    {
      v136[0] = *v8;
      objc_msgSend_objectForKeyedSubscript_(v5, v17, (uint64_t)CFSTR("tag:apple.com,2023:ObjectCapture#CameraCalibrationData"));
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = *v9;
      v137[0] = v19;
      v137[1] = CFSTR("tag:apple.com,2023:ObjectCapture#CameraCalibrationData");
      v21 = *v10;
      v136[1] = v20;
      v136[2] = v21;
      v137[2] = CFSTR("Object Capture camera calibration data");
      objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x24BDBCE70], v22, (uint64_t)v137, v136, 3);
      if (CMPhotoCompressionSessionAddCustomMetadata())
      {
        v15 = 1;
LABEL_69:

LABEL_70:
        v11 = v113;
        if (!v7)
        {
LABEL_72:

          v16 = !v15;
          goto LABEL_73;
        }
LABEL_71:

        goto LABEL_72;
      }
      v110 = v19;
      v8 = (_QWORD *)MEMORY[0x24BE120D8];
    }
    objc_msgSend_objectForKeyedSubscript_(v5, v17, (uint64_t)CFSTR("tag:apple.com,2023:ObjectCapture#ObjectTransform"));
    v112 = objc_claimAutoreleasedReturnValue();
    if (v112)
    {
      v134[0] = *v8;
      objc_msgSend_objectForKeyedSubscript_(v5, v23, (uint64_t)CFSTR("tag:apple.com,2023:ObjectCapture#ObjectTransform"));
      v24 = objc_claimAutoreleasedReturnValue();
      v25 = *v9;
      v111 = (void *)v24;
      v135[0] = v24;
      v135[1] = CFSTR("tag:apple.com,2023:ObjectCapture#ObjectTransform");
      v26 = *v10;
      v134[1] = v25;
      v134[2] = v26;
      v135[2] = CFSTR("Object Capture object transform");
      objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x24BDBCE70], v27, (uint64_t)v135, v134, 3);
      if (CMPhotoCompressionSessionAddCustomMetadata())
      {
        v15 = 1;
        v19 = v110;
        v28 = (void *)v112;
LABEL_67:

LABEL_68:
        if (!v18)
          goto LABEL_70;
        goto LABEL_69;
      }
      v29 = v8;
    }
    else
    {
      v29 = v8;
    }
    objc_msgSend_objectForKeyedSubscript_(v5, v23, (uint64_t)CFSTR("tag:apple.com,2023:ObjectCapture#ObjectBoundingBox"));
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    if (v31)
    {
      v132[0] = *v29;
      objc_msgSend_objectForKeyedSubscript_(v5, v30, (uint64_t)CFSTR("tag:apple.com,2023:ObjectCapture#ObjectBoundingBox"));
      v32 = objc_claimAutoreleasedReturnValue();
      v33 = *v9;
      v109 = (void *)v32;
      v133[0] = v32;
      v133[1] = CFSTR("tag:apple.com,2023:ObjectCapture#ObjectBoundingBox");
      v34 = *v10;
      v132[1] = v33;
      v132[2] = v34;
      v133[2] = CFSTR("Object Capture object bounding box");
      objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x24BDBCE70], v35, (uint64_t)v133, v132, 3);
      if (CMPhotoCompressionSessionAddCustomMetadata())
      {
        v15 = 1;
        v36 = v109;
        v28 = (void *)v112;
LABEL_65:

LABEL_66:
        v19 = v110;
        if (!v28)
          goto LABEL_68;
        goto LABEL_67;
      }
    }
    objc_msgSend_objectForKeyedSubscript_(v5, v30, (uint64_t)CFSTR("tag:apple.com,2023:ObjectCapture#RawFeaturePoints"));
    v107 = objc_claimAutoreleasedReturnValue();
    v108 = v31;
    if (v107)
    {
      v130[0] = *v29;
      objc_msgSend_objectForKeyedSubscript_(v5, v37, (uint64_t)CFSTR("tag:apple.com,2023:ObjectCapture#RawFeaturePoints"));
      v38 = objc_claimAutoreleasedReturnValue();
      v39 = *v9;
      v106 = (void *)v38;
      v131[0] = v38;
      v131[1] = CFSTR("tag:apple.com,2023:ObjectCapture#RawFeaturePoints");
      v40 = *v10;
      v130[1] = v39;
      v130[2] = v40;
      v131[2] = CFSTR("Object Capture raw feature points");
      objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x24BDBCE70], v41, (uint64_t)v131, v130, 3);
      if (CMPhotoCompressionSessionAddCustomMetadata())
      {
        v15 = 1;
        v36 = v109;
        v42 = (void *)v107;
        v28 = (void *)v112;
LABEL_63:

LABEL_64:
        v31 = v108;
        if (!v108)
          goto LABEL_66;
        goto LABEL_65;
      }
    }
    objc_msgSend_objectForKeyedSubscript_(v5, v37, (uint64_t)CFSTR("tag:apple.com,2023:ObjectCapture#PointCloudData"));
    v105 = objc_claimAutoreleasedReturnValue();
    if (v105)
    {
      v128[0] = *v29;
      objc_msgSend_objectForKeyedSubscript_(v5, v43, (uint64_t)CFSTR("tag:apple.com,2023:ObjectCapture#PointCloudData"));
      v44 = objc_claimAutoreleasedReturnValue();
      v45 = *v9;
      v104 = (void *)v44;
      v129[0] = v44;
      v129[1] = CFSTR("tag:apple.com,2023:ObjectCapture#PointCloudData");
      v46 = *v10;
      v128[1] = v45;
      v128[2] = v46;
      v129[2] = CFSTR("Object Capture point cloud data");
      objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x24BDBCE70], v47, (uint64_t)v129, v128, 3);
      if (CMPhotoCompressionSessionAddCustomMetadata())
      {
        v15 = 1;
        v36 = v109;
        v42 = (void *)v107;
        v28 = (void *)v112;
        v48 = (void *)v105;
LABEL_61:

LABEL_62:
        if (!v42)
          goto LABEL_64;
        goto LABEL_63;
      }
    }
    objc_msgSend_objectForKeyedSubscript_(v5, v43, (uint64_t)CFSTR("tag:apple.com,2023:ObjectCapture#BundleVersion"));
    v103 = objc_claimAutoreleasedReturnValue();
    if (v103)
    {
      v126[0] = *v29;
      objc_msgSend_objectForKeyedSubscript_(v5, v49, (uint64_t)CFSTR("tag:apple.com,2023:ObjectCapture#BundleVersion"));
      v50 = objc_claimAutoreleasedReturnValue();
      v51 = *v9;
      v102 = (void *)v50;
      v127[0] = v50;
      v127[1] = CFSTR("tag:apple.com,2023:ObjectCapture#BundleVersion");
      v52 = *v10;
      v126[1] = v51;
      v126[2] = v52;
      v127[2] = CFSTR("Object Capture bundle version");
      objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x24BDBCE70], v53, (uint64_t)v127, v126, 3);
      if (CMPhotoCompressionSessionAddCustomMetadata())
      {
        v15 = 1;
        v36 = v109;
        v42 = (void *)v107;
        v28 = (void *)v112;
        v48 = (void *)v105;
        v54 = (void *)v103;
LABEL_59:

LABEL_60:
        if (!v48)
          goto LABEL_62;
        goto LABEL_61;
      }
    }
    objc_msgSend_objectForKeyedSubscript_(v5, v49, (uint64_t)CFSTR("tag:apple.com,2023:ObjectCapture#SegmentID"));
    v101 = objc_claimAutoreleasedReturnValue();
    if (v101)
    {
      v124[0] = *v29;
      objc_msgSend_objectForKeyedSubscript_(v5, v55, (uint64_t)CFSTR("tag:apple.com,2023:ObjectCapture#SegmentID"));
      v56 = objc_claimAutoreleasedReturnValue();
      v57 = *v9;
      v100 = (void *)v56;
      v125[0] = v56;
      v125[1] = CFSTR("tag:apple.com,2023:ObjectCapture#SegmentID");
      v58 = *v10;
      v124[1] = v57;
      v124[2] = v58;
      v125[2] = CFSTR("Object Capture segment ID");
      objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x24BDBCE70], v59, (uint64_t)v125, v124, 3);
      if (CMPhotoCompressionSessionAddCustomMetadata())
      {
        v15 = 1;
        v36 = v109;
        v42 = (void *)v107;
        v28 = (void *)v112;
        v48 = (void *)v105;
        v54 = (void *)v103;
        v60 = (void *)v101;
LABEL_57:

LABEL_58:
        if (!v54)
          goto LABEL_60;
        goto LABEL_59;
      }
    }
    objc_msgSend_objectForKeyedSubscript_(v5, v55, (uint64_t)CFSTR("tag:apple.com,2024:ObjectCapture#SessionUUID"));
    v99 = objc_claimAutoreleasedReturnValue();
    if (v99)
    {
      v122[0] = *v29;
      objc_msgSend_objectForKeyedSubscript_(v5, v61, (uint64_t)CFSTR("tag:apple.com,2024:ObjectCapture#SessionUUID"));
      v62 = objc_claimAutoreleasedReturnValue();
      v63 = *v9;
      v98 = (void *)v62;
      v123[0] = v62;
      v123[1] = CFSTR("tag:apple.com,2024:ObjectCapture#SessionUUID");
      v64 = *v10;
      v122[1] = v63;
      v122[2] = v64;
      v123[2] = CFSTR("Object Capture session UUID");
      objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x24BDBCE70], v65, (uint64_t)v123, v122, 3);
      if (CMPhotoCompressionSessionAddCustomMetadata())
      {
        v15 = 1;
        v36 = v109;
        v42 = (void *)v107;
        v28 = (void *)v112;
        v48 = (void *)v105;
        v54 = (void *)v103;
        v66 = (void *)v99;
LABEL_55:

LABEL_56:
        v60 = (void *)v101;
        if (!v101)
          goto LABEL_58;
        goto LABEL_57;
      }
    }
    objc_msgSend_objectForKeyedSubscript_(v5, v61, (uint64_t)CFSTR("tag:apple.com,2024:ObjectCapture#CaptureMode"));
    v97 = objc_claimAutoreleasedReturnValue();
    if (v97)
    {
      v120[0] = *v29;
      objc_msgSend_objectForKeyedSubscript_(v5, v67, (uint64_t)CFSTR("tag:apple.com,2024:ObjectCapture#CaptureMode"));
      v68 = objc_claimAutoreleasedReturnValue();
      v69 = *v9;
      v95 = (void *)v68;
      v121[0] = v68;
      v121[1] = CFSTR("tag:apple.com,2024:ObjectCapture#CaptureMode");
      v70 = *v10;
      v120[1] = v69;
      v120[2] = v70;
      v121[2] = CFSTR("Object Capture session capture mode");
      objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x24BDBCE70], v71, (uint64_t)v121, v120, 3);
      if (CMPhotoCompressionSessionAddCustomMetadata())
      {
        v15 = 1;
        v36 = v109;
        v42 = (void *)v107;
        v28 = (void *)v112;
        v48 = (void *)v105;
        v54 = (void *)v103;
        v72 = (void *)v97;
LABEL_53:

LABEL_54:
        v66 = (void *)v99;
        if (!v99)
          goto LABEL_56;
        goto LABEL_55;
      }
    }
    objc_msgSend_objectForKeyedSubscript_(v5, v67, (uint64_t)CFSTR("tag:apple.com,2023:ObjectCapture#Feedback"));
    v96 = (void *)objc_claimAutoreleasedReturnValue();
    if (v96)
    {
      v118[0] = *v29;
      objc_msgSend_objectForKeyedSubscript_(v5, v73, (uint64_t)CFSTR("tag:apple.com,2023:ObjectCapture#Feedback"));
      v74 = objc_claimAutoreleasedReturnValue();
      v75 = *v9;
      v94 = (void *)v74;
      v119[0] = v74;
      v119[1] = CFSTR("tag:apple.com,2023:ObjectCapture#Feedback");
      v76 = *v10;
      v118[1] = v75;
      v118[2] = v76;
      v119[2] = CFSTR("Object Capture feedback");
      objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x24BDBCE70], v77, (uint64_t)v119, v118, 3);
      if (CMPhotoCompressionSessionAddCustomMetadata())
      {
        v15 = 1;
        v36 = v109;
        v42 = (void *)v107;
        v28 = (void *)v112;
        v48 = (void *)v105;
        v54 = (void *)v103;
        v72 = (void *)v97;
LABEL_51:

LABEL_52:
        if (!v72)
          goto LABEL_54;
        goto LABEL_53;
      }
    }
    objc_msgSend_objectForKeyedSubscript_(v5, v73, (uint64_t)CFSTR("tag:apple.com,2023:ObjectCapture#WideToDepthCameraTransform"));
    v93 = objc_claimAutoreleasedReturnValue();
    if (!v93)
      goto LABEL_45;
    v116[0] = *v29;
    objc_msgSend_objectForKeyedSubscript_(v5, v78, (uint64_t)CFSTR("tag:apple.com,2023:ObjectCapture#WideToDepthCameraTransform"));
    v79 = objc_claimAutoreleasedReturnValue();
    v80 = *v9;
    v92 = (void *)v79;
    v117[0] = v79;
    v117[1] = CFSTR("tag:apple.com,2023:ObjectCapture#WideToDepthCameraTransform");
    v81 = *v10;
    v116[1] = v80;
    v116[2] = v81;
    v117[2] = CFSTR("Object Capture wide to depth camera transform");
    objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x24BDBCE70], v82, (uint64_t)v117, v116, 3);
    if (CMPhotoCompressionSessionAddCustomMetadata())
    {
      v15 = 1;
      v36 = v109;
      v83 = (void *)v93;
    }
    else
    {
LABEL_45:
      objc_msgSend_objectForKeyedSubscript_(v5, v78, (uint64_t)CFSTR("tag:apple.com,2023:ObjectCapture#TemporalDepthPointClouds"));
      v84 = objc_claimAutoreleasedReturnValue();
      if (v84)
      {
        v114[0] = *v29;
        v86 = (void *)v84;
        objc_msgSend_objectForKeyedSubscript_(v5, v85, (uint64_t)CFSTR("tag:apple.com,2023:ObjectCapture#TemporalDepthPointClouds"));
        v87 = (void *)objc_claimAutoreleasedReturnValue();
        v88 = *v9;
        v115[0] = v87;
        v115[1] = CFSTR("tag:apple.com,2023:ObjectCapture#TemporalDepthPointClouds");
        v89 = *v10;
        v114[1] = v88;
        v114[2] = v89;
        v115[2] = CFSTR("Object Capture temporal depth point clouds");
        objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x24BDBCE70], v90, (uint64_t)v115, v114, 3);
        v15 = CMPhotoCompressionSessionAddCustomMetadata() != 0;

      }
      else
      {
        v15 = 0;
      }
      v36 = v109;
      v83 = (void *)v93;
      if (!v93)
      {
LABEL_50:
        v42 = (void *)v107;
        v28 = (void *)v112;
        v48 = (void *)v105;
        v54 = (void *)v103;
        v72 = (void *)v97;
        if (!v96)
          goto LABEL_52;
        goto LABEL_51;
      }
    }

    goto LABEL_50;
  }
  v16 = 1;
LABEL_73:

  return v16;
}

void sub_239396D18(CFStringRef name, CFTypeRef value, uint64_t a3)
{
  CGImageMetadata *v5;
  const __CFString *v6;
  CGImageMetadataTagRef v7;
  const __CFString *v8;
  char v9;
  BOOL v10;
  const __CFString *v11;

  if (*(_BYTE *)(a3 + 24))
  {
    v5 = *(CGImageMetadata **)a3;
    v6 = *(const __CFString **)(a3 + 16);
    v7 = CGImageMetadataTagCreate(*(CFStringRef *)(a3 + 8), v6, name, kCGImageMetadataTypeDefault, value);
    v8 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("%@:%@"), v6, name);
    v9 = 0;
    if (v7)
      v10 = v8 == 0;
    else
      v10 = 1;
    if (!v10)
    {
      v11 = v8;
      if (CGImageMetadataSetTagWithPath(v5, 0, v8, v7))
      {
        CFRelease(v7);
        CFRelease(v11);
        v9 = 1;
      }
      else
      {
        v9 = 0;
      }
    }
    *(_BYTE *)(a3 + 24) = v9;
  }
}

uint64_t OCNonModularSPI_CMPhoto_update(uint64_t a1, void *a2, void *a3, void *a4, __n128 a5, __n128 a6, __n128 a7, __n128 a8, __n128 a9, int8x16_t a10, int8x16_t a11, int8x16_t a12)
{
  id v15;
  id v16;
  id v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  void **v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  void *v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  void *v34;
  __n128 v35;
  id v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  __n128 v65;
  id v67;
  id v68;
  id v69;
  id v70;
  _QWORD v71[3];
  _QWORD v72[3];
  void *v73;
  void **v74;
  uint64_t v75;
  int v76;
  uint64_t v77;

  v77 = *MEMORY[0x24BDAC8D0];
  v15 = a2;
  v16 = a3;
  v17 = a4;
  objc_msgSend_numberWithDouble_(MEMORY[0x24BDD16E0], v18, v19, a8.n128_f32[0]);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v73 = v20;
  objc_msgSend_numberWithDouble_(MEMORY[0x24BDD16E0], v21, v22, a8.n128_f32[1]);
  v23 = (void **)objc_claimAutoreleasedReturnValue();
  v74 = v23;
  objc_msgSend_numberWithDouble_(MEMORY[0x24BDD16E0], v24, v25, a8.n128_f32[2]);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v75 = (uint64_t)v26;
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x24BDBCE30], v27, (uint64_t)&v73, 3);
  v28 = (void *)objc_claimAutoreleasedReturnValue();

  sub_239389E54(a5, a6, a7, v29, v30, v31);
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_dataWithLength_(MEMORY[0x24BDBCEC8], v33, 48);
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  v35 = a9;
  v35.n128_u32[3] = a10.i32[0];
  v65 = v35;
  v36 = objc_retainAutorelease(v34);
  v39 = objc_msgSend_mutableBytes(v36, v37, v38);
  *(__n128 *)v39 = v65;
  *(int8x16_t *)(v39 + 16) = vextq_s8(vextq_s8(a10, a10, 0xCuLL), a11, 8uLL);
  *(int8x16_t *)(v39 + 32) = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a11, (int32x4_t)a11), a12, 0xCuLL);
  v42 = 4294967294;
  if (a1 && v15 && objc_msgSend_isFileURL(v15, v40, v41))
  {
    objc_msgSend_pathExtension(v15, v43, v44);
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    v47 = objc_msgSend_caseInsensitiveCompare_(v45, v46, (uint64_t)CFSTR("HEIC"));
    if (v16 && !v47 && (objc_msgSend_isFileURL(v16, v48, v49) & 1) != 0)
    {
      objc_msgSend_pathExtension(v16, v50, v51);
      v52 = (void *)objc_claimAutoreleasedReturnValue();
      v54 = objc_msgSend_caseInsensitiveCompare_(v52, v53, (uint64_t)CFSTR("HEIC"));

      v42 = 4294967294;
      if (!v54 && v28 && v32 && v36)
      {
        v73 = 0;
        v74 = &v73;
        v76 = -1;
        v56 = *MEMORY[0x24BE12030];
        v71[0] = *MEMORY[0x24BE12038];
        v71[1] = v56;
        v72[0] = &unk_250AD91E0;
        v72[1] = &unk_250AD91F8;
        v75 = 0x2020000000;
        v71[2] = *MEMORY[0x24BE12028];
        v72[2] = v16;
        objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x24BDBCE70], v55, (uint64_t)v72, v71, 3);
        v67 = v28;
        v68 = v32;
        v69 = v36;
        v70 = v17;
        if (CMPhotoCompressionSessionOpenExistingContainerForModification() || *((_DWORD *)v74 + 6))
        {
          v42 = 0xFFFFFFFFLL;
        }
        else if (CMPhotoCompressionSessionCloseContainer())
        {
          v42 = 0xFFFFFFFFLL;
        }
        else
        {
          v42 = 0;
        }

        _Block_object_dispose(&v73, 8);
      }
    }
    else
    {

      v42 = 4294967294;
    }
  }

  return v42;
}

void sub_239397180(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_23939719C(uint64_t *a1, void *a2)
{
  id v3;
  const char *v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  void *v15;
  uint64_t v16;
  const char *v17;
  void *v18;
  const char *v19;
  const char *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  void *v26;
  const char *v27;
  void *v28;
  const char *v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  const char *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  const char *v47;
  void *v48;
  uint64_t v49;
  const char *v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  const char *v54;
  const __CFData *v55;
  void *v56;
  const char *v57;
  CGImageMetadata *Mutable;
  const CGImageMetadata *v59;
  CFDataRef XMPData;
  const __CFDictionary *v61;
  CGImageMetadata *v62;
  const CGImageMetadata *v63;
  CFDataRef v64;
  const char *v65;
  CFDataRef v66;
  void *v67;
  const char *v68;
  void *v69;
  const char *v70;
  const char *v71;
  uint64_t v73;
  void *v74;
  void *v75;
  const CGImageMetadata *context;
  const __CFString *v77;
  const __CFString *v78;
  uint64_t v79;
  CFDataRef v80;
  _QWORD v81[3];
  _QWORD v82[3];
  _QWORD v83[2];
  _QWORD v84[4];

  v84[2] = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return *(unsigned int *)(*(_QWORD *)(a1[8] + 8) + 24);
  v3 = a2;
  objc_msgSend_objectForKeyedSubscript_(v3, v4, *MEMORY[0x24BE12018]);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v3, v6, *MEMORY[0x24BE12010]);
  v7 = objc_claimAutoreleasedReturnValue();
  v10 = (void *)v7;
  if (v5)
    v11 = v7 == 0;
  else
    v11 = 1;
  if (v11)
  {
    v12 = *(unsigned int *)(*(_QWORD *)(a1[8] + 8) + 24);
  }
  else
  {
    v75 = v5;
    v13 = (int)objc_msgSend_intValue(v5, v8, v9);
    objc_msgSend_objectAtIndexedSubscript_(v10, v14, v13);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = *MEMORY[0x24BE11FF8];
    objc_msgSend_objectForKeyedSubscript_(v15, v17, *MEMORY[0x24BE11FF8]);
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    v74 = v18;
    if (v18)
    {
      objc_msgSend_setObject_forKeyedSubscript_(v18, v19, a1[4], *MEMORY[0x24BE12000]);
      objc_msgSend_setObject_forKeyedSubscript_(v18, v20, a1[5], *MEMORY[0x24BE12008]);
    }
    else
    {
      v22 = *MEMORY[0x24BE12008];
      v83[0] = *MEMORY[0x24BE12000];
      v83[1] = v22;
      v23 = a1[5];
      v84[0] = a1[4];
      v84[1] = v23;
      objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x24BDBCE70], v19, (uint64_t)v84, v83, 2);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectAtIndexedSubscript_(v10, v25, v13);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v26, v27, (uint64_t)v24, v16);

    }
    objc_msgSend_objectAtIndexedSubscript_(v10, v21, v13, v13);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(v28, v29, *MEMORY[0x24BE11FF0]);
    v30 = (void *)objc_claimAutoreleasedReturnValue();

    v33 = objc_msgSend_count(v30, v31, v32);
    v35 = *MEMORY[0x24BE120E8];
    if (v33)
    {
      v36 = 0;
      while (1)
      {
        objc_msgSend_objectAtIndexedSubscript_(v30, v34, v36);
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectForKeyedSubscript_(v37, v38, v35);
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        v41 = objc_msgSend_compare_(v39, v40, (uint64_t)CFSTR("tag:apple.com,2023:ObjectCapture#ObjectBoundingBox"));

        if (!v41)
          break;

        if (++v36 >= (unint64_t)objc_msgSend_count(v30, v43, v44))
          goto LABEL_16;
      }
      objc_msgSend_setObject_forKeyedSubscript_(v37, v42, a1[6], *MEMORY[0x24BE120D8]);
    }
    else
    {
LABEL_16:
      v45 = a1[6];
      v81[0] = *MEMORY[0x24BE120D8];
      v81[1] = v35;
      v82[0] = v45;
      v82[1] = CFSTR("tag:apple.com,2023:ObjectCapture#ObjectBoundingBox");
      v81[2] = *MEMORY[0x24BE120E0];
      v82[2] = CFSTR("Object Capture object bounding box");
      objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x24BDBCE70], v34, (uint64_t)v82, v81, 3);
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addObject_(v30, v46, (uint64_t)v37);
    }

    if (a1[7])
    {
      objc_msgSend_objectAtIndexedSubscript_(v10, v47, v73);
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      v49 = *MEMORY[0x24BE12020];
      objc_msgSend_objectForKeyedSubscript_(v48, v50, *MEMORY[0x24BE12020]);
      v51 = (void *)objc_claimAutoreleasedReturnValue();

      if (v51 && objc_msgSend_count(v51, v52, v53))
      {
        objc_msgSend_objectAtIndexedSubscript_(v51, v54, 0);
        v55 = (const __CFData *)objc_claimAutoreleasedReturnValue();
        sub_2393976D0(v55);
        v56 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_addEntriesFromDictionary_(v56, v57, a1[7]);
        Mutable = CGImageMetadataCreateMutable();
        if (Mutable)
        {
          v59 = Mutable;
          XMPData = 0;
          if (CGImageMetadataRegisterNamespaceForPrefix(Mutable, CFSTR("http://ns.apple.com/oc/1.0/"), CFSTR("oc"), 0))
          {
            context = v59;
            v77 = CFSTR("http://ns.apple.com/oc/1.0/");
            v79 = 1;
            v78 = CFSTR("oc");
            CFDictionaryApplyFunction((CFDictionaryRef)v56, (CFDictionaryApplierFunction)sub_239396D18, &context);
            if ((_BYTE)v79)
              XMPData = CGImageMetadataCreateXMPData(v59, 0);
            else
              XMPData = 0;
            CFRelease(v59);
          }
        }
        else
        {
          XMPData = 0;
        }

        objc_msgSend_setObject_atIndexedSubscript_(v51, v71, (uint64_t)XMPData, 0);
      }
      else
      {
        v61 = (const __CFDictionary *)a1[7];
        v62 = CGImageMetadataCreateMutable();
        if (v62)
        {
          v63 = v62;
          if (CGImageMetadataRegisterNamespaceForPrefix(v62, CFSTR("http://ns.apple.com/oc/1.0/"), CFSTR("oc"), 0))
          {
            context = v63;
            v77 = CFSTR("http://ns.apple.com/oc/1.0/");
            v79 = 1;
            v78 = CFSTR("oc");
            CFDictionaryApplyFunction(v61, (CFDictionaryApplierFunction)sub_239396D18, &context);
            if ((_BYTE)v79)
            {
              v64 = CGImageMetadataCreateXMPData(v63, 0);
              CFRelease(v63);
              if (v64)
              {
                v80 = v64;
                objc_msgSend_arrayWithObjects_count_(MEMORY[0x24BDBCE30], v65, (uint64_t)&v80, 1);
                v66 = v64;
                v67 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_objectAtIndexedSubscript_(v10, v68, v73);
                v69 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_setObject_forKeyedSubscript_(v69, v70, (uint64_t)v67, v49);

              }
            }
            else
            {
              CFRelease(v63);
            }
          }
        }
      }

    }
    *(_DWORD *)(*(_QWORD *)(a1[8] + 8) + 24) = 0;
    v12 = *(unsigned int *)(*(_QWORD *)(a1[8] + 8) + 24);

    v5 = v75;
  }

  return v12;
}

id sub_2393976D0(const __CFData *a1)
{
  const CGImageMetadata *v1;
  const CGImageMetadata *v2;
  CFArrayRef v3;
  const __CFArray *v4;
  id v5;
  CFIndex Count;
  CFIndex v7;
  CFIndex i;
  id v9;
  CGImageMetadataTag *ValueAtIndex;
  const __CFString *v11;
  NSObject *v12;
  __CFString *v13;
  CFTypeRef v14;
  CFTypeID v15;
  const char *v16;
  CFIndex j;
  const char *v18;
  CGImageMetadataTag *v19;
  void *v20;
  const char *v21;
  const CGImageMetadata *cf;
  uint8_t buf[4];
  const __CFString *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (!a1)
    goto LABEL_21;
  v1 = CGImageMetadataCreateFromXMPData(a1);
  if (!v1)
    goto LABEL_21;
  v2 = v1;
  v3 = CGImageMetadataCopyTags(v1);
  if (!v3)
  {
    CFRelease(v2);
LABEL_21:
    v5 = 0;
    return v5;
  }
  v4 = v3;
  cf = v2;
  v5 = objc_alloc_init(MEMORY[0x24BDBCED8]);
  Count = CFArrayGetCount(v4);
  if (Count >= 1)
  {
    v7 = Count;
    for (i = 0; i != v7; ++i)
    {
      ValueAtIndex = (CGImageMetadataTag *)CFArrayGetValueAtIndex(v4, i);
      v11 = CGImageMetadataTagCopyPrefix(ValueAtIndex);
      if (CFStringCompare(v11, CFSTR("oc"), 1uLL))
      {
        if (qword_256930028 != -1)
          dispatch_once(&qword_256930028, &unk_250AD5B00);
        v12 = qword_256930020;
        if (os_log_type_enabled((os_log_t)qword_256930020, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138543362;
          v25 = v11;
          _os_log_debug_impl(&dword_239388000, v12, OS_LOG_TYPE_DEBUG, "copyXMPMetadata: Ignore prefix = %{public}@", buf, 0xCu);
        }
      }
      else
      {
        v13 = (__CFString *)CGImageMetadataTagCopyName(ValueAtIndex);
        v14 = CGImageMetadataTagCopyValue(ValueAtIndex);
        v15 = CFGetTypeID(v14);
        if (v15 == CFArrayGetTypeID())
        {
          v9 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
          for (j = 0; j < CFArrayGetCount((CFArrayRef)v14); ++j)
          {
            v19 = (CGImageMetadataTag *)CFArrayGetValueAtIndex((CFArrayRef)v14, j);
            v20 = (void *)CGImageMetadataTagCopyValue(v19);
            objc_msgSend_addObject_(v9, v21, (uint64_t)v20);

          }
          objc_msgSend_setObject_forKeyedSubscript_(v5, v18, (uint64_t)v9, v13);

          CFRelease(v14);
        }
        else
        {
          objc_msgSend_setObject_forKeyedSubscript_(v5, v16, (uint64_t)v14, v13);

          v9 = (id)v14;
        }

      }
      CFRelease(v11);
    }
  }
  CFRelease(v4);
  CFRelease(cf);
  return v5;
}

void sub_239397930()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.CoreOCModules", "General");
  v1 = (void *)qword_256930020;
  qword_256930020 = (uint64_t)v0;

}

uint64_t OCNonModularSPI_CMPhoto_updateInplace(void *a1, void *a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7, int8x16_t a8, int8x16_t a9, int8x16_t a10)
{
  id v11;
  const __CFDictionary *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  __CFString *v21;
  const char *v22;
  void *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  __n128 v28;
  const char *v29;
  id v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  int isFileURL;
  NSObject *v43;
  OCNonModularSPI_CMPhoto_InPlaceEditor *v44;
  NSObject *v45;
  const char *v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  const char *v50;
  CGImageMetadata *Mutable;
  const CGImageMetadata *v52;
  CFDataRef XMPData;
  NSObject *v54;
  __n128 v62;
  _QWORD v64[3];
  _QWORD v65[3];
  __int128 buf;
  const __CFString *v67;
  uint64_t v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  v11 = a1;
  v12 = a2;
  objc_msgSend_numberWithDouble_(MEMORY[0x24BDD16E0], v13, v14, a6.n128_f32[0]);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)&buf = v15;
  objc_msgSend_numberWithDouble_(MEMORY[0x24BDD16E0], v16, v17, a6.n128_f32[1]);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  *((_QWORD *)&buf + 1) = v18;
  objc_msgSend_numberWithDouble_(MEMORY[0x24BDD16E0], v19, v20, a6.n128_f32[2]);
  v21 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v67 = v21;
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x24BDBCE30], v22, (uint64_t)&buf, 3);
  v23 = (void *)objc_claimAutoreleasedReturnValue();

  sub_239389E54(a3, a4, a5, v24, v25, v26);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = a7;
  v28.n128_u32[3] = a8.i32[0];
  v62 = v28;
  objc_msgSend_dataWithLength_(MEMORY[0x24BDBCEC8], v29, 48);
  v30 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v33 = objc_msgSend_mutableBytes(v30, v31, v32);
  *(__n128 *)v33 = v62;
  *(int8x16_t *)(v33 + 16) = vextq_s8(vextq_s8(a8, a8, 0xCuLL), a9, 8uLL);
  *(int8x16_t *)(v33 + 32) = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a9, (int32x4_t)a9), a10, 0xCuLL);
  if (!v11)
    goto LABEL_4;
  objc_msgSend_pathExtension(v11, v34, v35);
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_caseInsensitiveCompare_(v36, v37, (uint64_t)CFSTR("HEIC")))
  {

LABEL_4:
    v40 = 4294967294;
    goto LABEL_5;
  }
  isFileURL = objc_msgSend_isFileURL(v11, v38, v39);

  v40 = 4294967294;
  if (isFileURL && v23 && v27 && v30)
  {
    if (qword_256930028 != -1)
      dispatch_once(&qword_256930028, &unk_250AD5B00);
    v43 = qword_256930020;
    if (os_log_type_enabled((os_log_t)qword_256930020, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf) = 138477827;
      *(_QWORD *)((char *)&buf + 4) = v11;
      _os_log_impl(&dword_239388000, v43, OS_LOG_TYPE_INFO, "CMPhoto_update: Has valid arguments for URL: %{private}@", (uint8_t *)&buf, 0xCu);
    }
    v44 = objc_alloc_init(OCNonModularSPI_CMPhoto_InPlaceEditor);
    if (qword_256930028 != -1)
      dispatch_once(&qword_256930028, &unk_250AD5B00);
    v45 = qword_256930020;
    if (os_log_type_enabled((os_log_t)qword_256930020, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf) = 138477827;
      *(_QWORD *)((char *)&buf + 4) = v11;
      _os_log_impl(&dword_239388000, v45, OS_LOG_TYPE_INFO, "CMPhoto_update: Created editor for URL: %{private}@", (uint8_t *)&buf, 0xCu);
    }
    v47 = *MEMORY[0x24BE120E8];
    v64[0] = *MEMORY[0x24BE120D8];
    v64[1] = v47;
    v65[0] = v30;
    v65[1] = CFSTR("tag:apple.com,2023:ObjectCapture#ObjectBoundingBox");
    v64[2] = *MEMORY[0x24BE120E0];
    v65[2] = CFSTR("Object Capture object bounding box");
    objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x24BDBCE70], v46, (uint64_t)v65, v64, 3, *(_OWORD *)&a3, *(_OWORD *)&a4, *(_OWORD *)&a5);
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_updateModifiedCustom_(v44, v49, (uint64_t)v48);
    if (v12)
    {
      Mutable = CGImageMetadataCreateMutable();
      if (Mutable)
      {
        v52 = Mutable;
        if (CGImageMetadataRegisterNamespaceForPrefix(Mutable, CFSTR("http://ns.apple.com/oc/1.0/"), CFSTR("oc"), 0))
        {
          *(_QWORD *)&buf = v52;
          *((_QWORD *)&buf + 1) = CFSTR("http://ns.apple.com/oc/1.0/");
          v67 = CFSTR("oc");
          v68 = 1;
          CFDictionaryApplyFunction(v12, (CFDictionaryApplierFunction)sub_239396D18, &buf);
          if ((_BYTE)v68)
          {
            XMPData = CGImageMetadataCreateXMPData(v52, 0);
            CFRelease(v52);
            if (XMPData)
            {
              objc_msgSend_updateModifiedXMP_(v44, v50, (uint64_t)XMPData);

            }
          }
          else
          {
            CFRelease(v52);
          }
        }
      }
    }
    objc_msgSend_updateModifiedExtrinsicsPosition_rotation_(v44, v50, (uint64_t)v23, v27);
    if (MEMORY[0x23B83C03C](v11, 0, v44))
    {
      v40 = 0xFFFFFFFFLL;
    }
    else
    {
      if (qword_256930028 != -1)
        dispatch_once(&qword_256930028, &unk_250AD5B00);
      v54 = qword_256930020;
      if (os_log_type_enabled((os_log_t)qword_256930020, OS_LOG_TYPE_INFO))
      {
        LODWORD(buf) = 138477827;
        *(_QWORD *)((char *)&buf + 4) = v11;
        _os_log_impl(&dword_239388000, v54, OS_LOG_TYPE_INFO, "CMPhoto_update: HEIF in-place update success for URL: %{private}@", (uint8_t *)&buf, 0xCu);
      }
      v40 = 0;
    }

  }
LABEL_5:

  return v40;
}

uint64_t OCNonModularSPI_CMPhoto_HeicWriteStop(uint64_t a1)
{
  if (a1)
    return 0;
  else
    return 4294967294;
}

uint64_t OCNonModularSPI_CMPhoto_HeicWriteDestroy(CFTypeRef *a1)
{
  if (!a1)
    return 4294967294;
  CFRelease(*a1);
  free(a1);
  return 0;
}

uint64_t OCNonModularSPI_CMPhoto_HeicReadCreate(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;

  if (!a1)
    return 4294967294;
  if (CMPhotoDecompressionSessionCreate())
    return 0xFFFFFFFFLL;
  v3 = malloc_type_malloc(8uLL, 0x2004093837F09uLL);
  result = 0;
  *v3 = 0;
  *a1 = v3;
  return result;
}

uint64_t OCNonModularSPI_CMPhoto_HeicReadStart(uint64_t a1)
{
  if (a1)
    return 0;
  else
    return 4294967294;
}

uint64_t OCNonModularSPI_CMPhoto_readTimestamp(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;

  v5 = a2;
  v8 = v5;
  v9 = 4294967294;
  if (a1)
  {
    if (v5)
    {
      if (objc_msgSend_isFileURL(v5, v6, v7))
      {
        objc_msgSend_pathExtension(v8, v10, v11);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = objc_msgSend_caseInsensitiveCompare_(v12, v13, (uint64_t)CFSTR("HEIC"));

        if (a3)
        {
          if (!v14)
          {
            if (!CMPhotoDecompressionSessionCreateContainer())
              CMPhotoDecompressionContainerGetImageCount();
            v9 = 0xFFFFFFFFLL;
          }
        }
      }
    }
  }

  return v9;
}

BOOL sub_2393981AC()
{
  return CMPhotoDecompressionContainerGetExifCountForIndex() == 0;
}

uint64_t OCNonModularSPI_CMPhoto_readResolution(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;

  v7 = a2;
  v10 = v7;
  v11 = 4294967294;
  if (a1)
  {
    if (v7)
    {
      if (objc_msgSend_isFileURL(v7, v8, v9))
      {
        objc_msgSend_pathExtension(v10, v12, v13);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = objc_msgSend_caseInsensitiveCompare_(v14, v15, (uint64_t)CFSTR("HEIC"));

        v11 = 4294967294;
        if (a4)
        {
          if (a3 && !v16)
          {
            if (!CMPhotoDecompressionSessionCreateContainer())
              CMPhotoDecompressionContainerGetImageCount();
            v11 = 0xFFFFFFFFLL;
          }
        }
      }
    }
  }

  return v11;
}

uint64_t OCNonModularSPI_CMPhoto_read(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  _OWORD v14[5];
  int v15;
  CFTypeRef v16;
  uint64_t v17;

  v3 = a2;
  v6 = v3;
  v7 = 4294967294;
  if (a1 && v3 && objc_msgSend_isFileURL(v3, v4, v5))
  {
    objc_msgSend_pathExtension(v6, v8, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend_caseInsensitiveCompare_(v10, v11, (uint64_t)CFSTR("HEIC"));

    if (v12)
    {
      v7 = 4294967294;
    }
    else
    {
      v16 = 0;
      v15 = 0;
      if (!CMPhotoDecompressionSessionCreateContainer())
      {
        memset(v14, 0, sizeof(v14));
        v17 = 0;
        CMPhotoDecompressionContainerGetImageCount();
        sub_239399340(v16, (uint64_t)v14);
      }
      v7 = 0xFFFFFFFFLL;
    }
  }

  return v7;
}

uint64_t sub_239398B44(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;

  if (CMPhotoDecompressionContainerGetCustomMetadataCountForIndex())
    return 0;
  objc_msgSend_dictionary(MEMORY[0x24BDBCED8], v4, v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_count(v7, v8, v9))
    *a3 = v7;
  v6 = 1;

  return v6;
}

void sub_239399340(const void *a1, uint64_t a2)
{
  __CVBuffer *v3;
  __CVBuffer *v4;
  __CVBuffer *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;

  if (a1)
    CFRelease(a1);
  if (a2)
  {
    if (*(_QWORD *)a2)
      CVPixelBufferRelease(*(CVPixelBufferRef *)a2);
    v3 = *(__CVBuffer **)(a2 + 8);
    if (v3)
      CVPixelBufferRelease(v3);
    v4 = *(__CVBuffer **)(a2 + 16);
    if (v4)
      CVPixelBufferRelease(v4);
    v5 = *(__CVBuffer **)(a2 + 24);
    if (v5)
      CVPixelBufferRelease(v5);
    v6 = *(const void **)(a2 + 32);
    if (v6)
      CFRelease(v6);
    v7 = *(const void **)(a2 + 40);
    if (v7)
      CFRelease(v7);
    v8 = *(const void **)(a2 + 48);
    if (v8)
      CFRelease(v8);
    v9 = *(const void **)(a2 + 56);
    if (v9)
      CFRelease(v9);
    v10 = *(const void **)(a2 + 64);
    if (v10)
      CFRelease(v10);
    v11 = *(const void **)(a2 + 72);
    if (v11)
      CFRelease(v11);
  }
}

id sub_2393993E8()
{
  if (qword_256930028 != -1)
    dispatch_once(&qword_256930028, &unk_250AD5B00);
  return (id)qword_256930020;
}

uint64_t OCNonModularSPI_CMPhoto_readThumbnail(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v6 = a2;
  v9 = v6;
  v10 = 4294967294;
  if (a1)
  {
    if (v6)
    {
      if (objc_msgSend_isFileURL(v6, v7, v8))
      {
        objc_msgSend_pathExtension(v9, v11, v12);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = objc_msgSend_caseInsensitiveCompare_(v13, v14, (uint64_t)CFSTR("HEIC"));

        v10 = 4294967294;
        if (a4)
        {
          if (!v15)
          {
            if (!CMPhotoDecompressionSessionCreateContainer())
              CMPhotoDecompressionContainerGetImageCount();
            v10 = 0xFFFFFFFFLL;
          }
        }
      }
    }
  }

  return v10;
}

uint64_t OCNonModularSPI_CMPhoto_readVersion(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  int isFileURL;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;

  v5 = a2;
  v8 = v5;
  v9 = 4294967294;
  if (a1)
  {
    if (v5)
    {
      isFileURL = objc_msgSend_isFileURL(v5, v6, v7);
      if (a3)
      {
        if (isFileURL)
        {
          objc_msgSend_pathExtension(v8, v11, v12);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          v15 = objc_msgSend_caseInsensitiveCompare_(v13, v14, (uint64_t)CFSTR("HEIC"));

          if (v15)
          {
            v9 = 4294967294;
          }
          else if (CMPhotoDecompressionSessionCreateContainer()
                 || CMPhotoDecompressionContainerGetCustomMetadataCountForIndex())
          {
            v9 = 0xFFFFFFFFLL;
          }
          else
          {
            v9 = 0;
          }
        }
      }
    }
  }

  return v9;
}

uint64_t OCNonModularSPI_CMPhoto_HeicReadStop(uint64_t a1)
{
  if (a1)
    return 0;
  else
    return 4294967294;
}

uint64_t OCNonModularSPI_CMPhoto_HeicReadDestroy(CFTypeRef *a1)
{
  if (!a1)
    return 4294967294;
  CFRelease(*a1);
  free(a1);
  return 0;
}

uint64_t OCVoxelCloudCreate(unsigned int a1, __int128 *a2, uint64_t *a3, float a4, float32x4_t a5, __n128 a6, float32x4_t a7, int8x16_t a8)
{
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  uint32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  uint32x4_t v25;
  float32x4_t v26;
  float32x2_t v28;
  uint32x2_t v29;
  __int128 *v30;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  NSObject *v40;
  float32x4_t v41;
  float32x4_t v43;
  uint8_t buf[4];
  const char *v46;
  __int16 v47;
  int v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  if (a4 <= 0.0001 || a1 == 0 || a2 == 0)
    goto LABEL_17;
  v13 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(a5, a5.f32[0]), (float32x4_t)a6, a6.n128_f32[0]), a7, a7.f32[0]);
  v14 = vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(a5, *(float32x2_t *)a5.f32, 1), (float32x4_t)a6, (float32x2_t)a6.n128_u64[0], 1), a7, *(float32x2_t *)a7.f32, 1);
  v15 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(a5, a5, 2), (float32x4_t)a6, (float32x4_t)a6, 2), a7, a7, 2);
  v16 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 16);
  v17 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 32);
  v18 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
  v19 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v18, vabdq_f32(v14, v16)), (int8x16_t)vcgeq_f32(v18, vabdq_f32(v13, *MEMORY[0x24BDAEDF8]))), (int8x16_t)vcgeq_f32(v18, vabdq_f32(v15, v17)));
  v19.i32[3] = v19.i32[2];
  if ((vminvq_u32(v19) & 0x80000000) == 0)
    goto LABEL_17;
  v20 = (float32x4_t)vdupq_laneq_s32((int32x4_t)a6, 2);
  v21 = (float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)a5, (int32x4_t)a7), (int32x4_t)v20);
  v22 = (float32x4_t)vtrn2q_s32((int32x4_t)a5, (int32x4_t)a6);
  v22.i32[2] = a7.i32[1];
  v23 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)a5, (int32x4_t)a7), (int32x4_t)a6);
  v24 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
  v25 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v24, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v23, a6.n128_f32[0]), (float32x4_t)vdupq_lane_s32((int32x2_t)a6.n128_u64[0], 1), v22), v20, v21), v16)), (int8x16_t)vcgeq_f32(v24, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v23, a5.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 1),
                                           v22),
                                         (float32x4_t)vdupq_laneq_s32((int32x4_t)a5, 2),
                                         v21),
                                       *MEMORY[0x24BDAEDF8]))),
                      (int8x16_t)vcgeq_f32(v24, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v23, a7.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a7.f32, 1), v22), (float32x4_t)vdupq_laneq_s32((int32x4_t)a7, 2), v21), v17)));
  v25.i32[3] = v25.i32[2];
  if ((vminvq_u32(v25) & 0x80000000) == 0)
    goto LABEL_17;
  v26 = vmulq_f32(a5, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)a7, (int8x16_t)a7, 0xCuLL), (int8x16_t)a7, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a6, (int32x4_t)a6), (int8x16_t)a6, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a7, (int32x4_t)a7), (int8x16_t)a7, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)a6, (int8x16_t)a6, 0xCuLL), (int8x16_t)a6, 8uLL)));
  if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 2), vaddq_f32(v26, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 1))).f32[0]+ -1.0) <= 0.000011&& a3&& (v28 = (float32x2_t)vdup_n_s32(0x38D1B717u), v29 = (uint32x2_t)vand_s8((int8x8_t)vcge_f32(v28, vabs_f32(vadd_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a7, (int8x16_t)a7, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(a8, a8, 8uLL)), (float32x2_t)0xBF80000080000000))), (int8x8_t)vcge_f32(
                                        v28,
                                        vabs_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a5, (int8x16_t)a5, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a6, (int8x16_t)a6, 8uLL))))), (vpmin_u32(v29, v29).u32[0] & 0x80000000) != 0))
  {
    v30 = a2;
    v41 = a5;
    v43 = a7;
    v32 = sub_239399D80(a1);
    if (v32)
    {
      v33 = 0;
      do
      {
        v34 = *v30++;
        v35 = v34;
        HIDWORD(v35) = 1;
        *(_OWORD *)(*(_QWORD *)(v32 + 96) + v33) = v35;
        v36 = *(_QWORD *)(v32 + 96) + v33;
        *(_QWORD *)(v36 + 16) = 0;
        *(_QWORD *)(v36 + 24) = 0;
        *(_OWORD *)(*(_QWORD *)(v32 + 96) + v33 + 32) = xmmword_2393F5320;
        v33 += 48;
      }
      while (48 * a1 != v33);
      v37 = 0;
      *(float *)(v32 + 16) = a4;
      *(float32x4_t *)(v32 + 32) = v41;
      *(__n128 *)(v32 + 48) = a6;
      *(float32x4_t *)(v32 + 64) = v43;
      *(int8x16_t *)(v32 + 80) = a8;
      *a3 = v32;
    }
    else
    {
      if (qword_256930038 != -1)
        dispatch_once(&qword_256930038, &unk_250AD5B20);
      v40 = qword_256930030;
      if (os_log_type_enabled((os_log_t)qword_256930030, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v46 = "OCVoxelCloudCreate";
        v47 = 1026;
        v48 = 121;
        _os_log_error_impl(&dword_239388000, v40, OS_LOG_TYPE_ERROR, "%s:%{public}d Insufficient memory.", buf, 0x12u);
      }
      return 4294967293;
    }
  }
  else
  {
LABEL_17:
    if (qword_256930038 != -1)
      dispatch_once(&qword_256930038, &unk_250AD5B20);
    v38 = qword_256930030;
    if (os_log_type_enabled((os_log_t)qword_256930030, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v46 = "OCVoxelCloudCreate";
      v47 = 1026;
      v48 = 115;
      _os_log_error_impl(&dword_239388000, v38, OS_LOG_TYPE_ERROR, "%s:%{public}d Invalid arguments.", buf, 0x12u);
    }
    return 4294967294;
  }
  return v37;
}

uint64_t sub_239399D80(unsigned int a1)
{
  uint64_t Instance;
  uint64_t v3;
  size_t prime;
  char *v5;
  _BYTE *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t i;
  void *v25;
  void *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  void *v32;
  void *__p[2];
  _BYTE v35[24];
  int v36;

  if (qword_256930048 != -1)
    dispatch_once(&qword_256930048, &unk_250AD5B60);
  Instance = _CFRuntimeCreateInstance();
  v3 = Instance;
  if (Instance)
  {
    prime = a1;
    v6 = *(_BYTE **)(Instance + 96);
    v5 = *(char **)(Instance + 104);
    v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - v6) >> 4);
    v8 = a1 - v7;
    if (a1 <= v7)
    {
      if (a1 >= v7)
        goto LABEL_21;
      v20 = &v6[48 * a1];
    }
    else
    {
      v9 = *(_QWORD *)(Instance + 112);
      if (0xAAAAAAAAAAAAAAABLL * ((v9 - (uint64_t)v5) >> 4) < v8)
      {
        v10 = 0xAAAAAAAAAAAAAAABLL * ((v9 - (uint64_t)v6) >> 4);
        v11 = 0x5555555555555556 * ((v9 - (uint64_t)v6) >> 4);
        if (v11 <= a1)
          v11 = a1;
        if (v10 >= 0x2AAAAAAAAAAAAAALL)
          v12 = 0x555555555555555;
        else
          v12 = v11;
        if (v12 > 0x555555555555555)
          sub_23938C4B8();
        v13 = 48 * v12;
        v14 = (char *)operator new(48 * v12);
        v15 = &v14[16 * ((v5 - v6) >> 4)];
        v16 = &v14[v13];
        bzero(v15, 48 * ((48 * v8 - 48) / 0x30) + 48);
        v17 = &v15[48 * ((48 * v8 - 48) / 0x30) + 48];
        if (v5 != v6)
        {
          do
          {
            v18 = *((_OWORD *)v5 - 3);
            v19 = *((_OWORD *)v5 - 1);
            *((_OWORD *)v15 - 2) = *((_OWORD *)v5 - 2);
            *((_OWORD *)v15 - 1) = v19;
            *((_OWORD *)v15 - 3) = v18;
            v15 -= 48;
            v5 -= 48;
          }
          while (v5 != v6);
          v5 = *(char **)(v3 + 96);
        }
        *(_QWORD *)(v3 + 96) = v15;
        *(_QWORD *)(v3 + 104) = v17;
        *(_QWORD *)(v3 + 112) = v16;
        if (v5)
          operator delete(v5);
LABEL_21:
        *(_OWORD *)__p = 0u;
        *(_OWORD *)v35 = 0u;
        *(_QWORD *)&v35[16] = a1;
        v36 = 1065353216;
        if (a1 == 1)
        {
          prime = 2;
        }
        else
        {
          if ((a1 & (a1 - 1)) != 0)
            prime = std::__next_prime(a1);
          if (!prime)
            goto LABEL_27;
        }
        sub_23938C8F4((uint64_t)__p, prime);
LABEL_27:
        if (*(_QWORD *)(v3 + 144))
        {
          v21 = *(_QWORD **)(v3 + 136);
          if (v21)
          {
            do
            {
              v22 = (_QWORD *)*v21;
              operator delete(v21);
              v21 = v22;
            }
            while (v22);
          }
          *(_QWORD *)(v3 + 136) = 0;
          v23 = *(_QWORD *)(v3 + 128);
          if (v23)
          {
            for (i = 0; i != v23; ++i)
              *(_QWORD *)(*(_QWORD *)(v3 + 120) + 8 * i) = 0;
          }
          *(_QWORD *)(v3 + 144) = 0;
        }
        v25 = __p[0];
        __p[0] = 0;
        v26 = *(void **)(v3 + 120);
        *(_QWORD *)(v3 + 120) = v25;
        if (v26)
          operator delete(v26);
        v28 = (unint64_t)__p[1];
        v27 = *(_QWORD **)v35;
        *(_QWORD *)(v3 + 136) = *(_QWORD *)v35;
        *(_QWORD *)(v3 + 128) = v28;
        __p[1] = 0;
        v29 = *(_QWORD *)&v35[8];
        *(_OWORD *)(v3 + 144) = *(_OWORD *)&v35[8];
        *(_DWORD *)(v3 + 160) = v36;
        if (v29)
        {
          v30 = v27[1];
          if ((v28 & (v28 - 1)) != 0)
          {
            if (v30 >= v28)
              v30 %= v28;
          }
          else
          {
            v30 &= v28 - 1;
          }
          *(_QWORD *)(*(_QWORD *)(v3 + 120) + 8 * v30) = v3 + 136;
          *(_OWORD *)v35 = 0uLL;
        }
        else if (v27)
        {
          do
          {
            v31 = (_QWORD *)*v27;
            operator delete(v27);
            v27 = v31;
          }
          while (v31);
        }
        v32 = __p[0];
        __p[0] = 0;
        if (v32)
          operator delete(v32);
        return v3;
      }
      bzero(*(void **)(Instance + 104), 48 * ((48 * v8 - 48) / 0x30) + 48);
      v20 = &v5[48 * ((48 * v8 - 48) / 0x30) + 48];
    }
    *(_QWORD *)(v3 + 104) = v20;
    goto LABEL_21;
  }
  return v3;
}

uint64_t sub_23939A0AC()
{
  uint64_t result;

  qword_256930050 = 0;
  *(_QWORD *)algn_256930058 = "OCVoxelCloud";
  qword_256930060 = (uint64_t)sub_23939A10C;
  unk_256930068 = 0;
  qword_256930070 = (uint64_t)sub_23939A128;
  unk_256930078 = 0;
  qword_256930080 = 0;
  unk_256930088 = sub_23939A22C;
  qword_256930090 = (uint64_t)sub_23939A284;
  result = _CFRuntimeRegisterClass();
  qword_256930040 = result;
  return result;
}

double sub_23939A10C(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  return result;
}

double sub_23939A128(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  unint64_t v4;
  _QWORD *v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  double result;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  __int128 v13;
  int v14;

  if (a1)
  {
    v2 = *(void **)(a1 + 96);
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    if (v2)
      operator delete(v2);
    v3 = *(_QWORD **)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 128);
    v5 = *(_QWORD **)(a1 + 136);
    v6 = *(_DWORD *)(a1 + 160);
    v11 = v3;
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    v12 = v5;
    v13 = *(_OWORD *)(a1 + 144);
    v7 = v13;
    *(_OWORD *)(a1 + 144) = xmmword_2393F5390;
    *(_DWORD *)(a1 + 160) = 1065353216;
    v14 = v6;
    if (v7)
    {
      v8 = v5[1];
      if ((v4 & (v4 - 1)) != 0)
      {
        if (v8 >= v4)
          v8 %= v4;
        v3[v8] = &v12;
      }
      else
      {
        v3[(v4 - 1) & v8] = &v12;
      }
    }
    else if (!v5)
    {
      if (!v3)
      {
LABEL_10:
        result = 0.0;
        *(_OWORD *)(a1 + 144) = 0u;
        *(_OWORD *)(a1 + 160) = 0u;
        *(_OWORD *)(a1 + 112) = 0u;
        *(_OWORD *)(a1 + 128) = 0u;
        *(_OWORD *)(a1 + 80) = 0u;
        *(_OWORD *)(a1 + 96) = 0u;
        *(_OWORD *)(a1 + 48) = 0u;
        *(_OWORD *)(a1 + 64) = 0u;
        *(_OWORD *)(a1 + 16) = 0u;
        *(_OWORD *)(a1 + 32) = 0u;
        return result;
      }
LABEL_9:
      operator delete(v3);
      goto LABEL_10;
    }
    do
    {
      v10 = (_QWORD *)*v5;
      operator delete(v5);
      v5 = v10;
    }
    while (v10);
    v3 = v11;
    if (!v11)
      goto LABEL_10;
    goto LABEL_9;
  }
  return result;
}

CFStringRef sub_23939A22C(const void *a1, const __CFDictionary *a2)
{
  const __CFAllocator *v4;
  CFAllocatorRef v5;

  v4 = CFGetAllocator(a1);
  v5 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v4, a2, CFSTR("<OCVoxelCloud %p [%p]>"), a1, v5);
}

CFStringRef sub_23939A284(const void *a1)
{
  const __CFAllocator *v2;
  CFAllocatorRef v3;

  v2 = CFGetAllocator(a1);
  v3 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<OCVoxelCloud %p [%p]>"), a1, v3);
}

os_log_t sub_23939A2D0()
{
  os_log_t result;

  result = os_log_create("com.apple.CoreOCModules", "VoxelHashing");
  qword_256930030 = (uint64_t)result;
  return result;
}

uint64_t OCVoxelCloudCreateWithRGB(unsigned int a1, __int128 *a2, __int128 *a3, uint64_t *a4, float a5, float32x4_t a6, __n128 a7, float32x4_t a8, int8x16_t a9)
{
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  uint32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  uint32x4_t v27;
  float32x4_t v28;
  float32x2_t v30;
  uint32x2_t v31;
  __int128 *v32;
  __int128 *v33;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  NSObject *v43;
  NSObject *v45;
  float32x4_t v46;
  float32x4_t v48;
  uint8_t buf[4];
  const char *v51;
  __int16 v52;
  int v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  if (a5 <= 0.0001 || a1 == 0 || a2 == 0 || a3 == 0)
    goto LABEL_20;
  v15 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(a6, a6.f32[0]), (float32x4_t)a7, a7.n128_f32[0]), a8, a8.f32[0]);
  v16 = vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(a6, *(float32x2_t *)a6.f32, 1), (float32x4_t)a7, (float32x2_t)a7.n128_u64[0], 1), a8, *(float32x2_t *)a8.f32, 1);
  v17 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(a6, a6, 2), (float32x4_t)a7, (float32x4_t)a7, 2), a8, a8, 2);
  v18 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 16);
  v19 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 32);
  v20 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
  v21 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v20, vabdq_f32(v16, v18)), (int8x16_t)vcgeq_f32(v20, vabdq_f32(v15, *MEMORY[0x24BDAEDF8]))), (int8x16_t)vcgeq_f32(v20, vabdq_f32(v17, v19)));
  v21.i32[3] = v21.i32[2];
  if ((vminvq_u32(v21) & 0x80000000) == 0)
    goto LABEL_20;
  v22 = (float32x4_t)vdupq_laneq_s32((int32x4_t)a7, 2);
  v23 = (float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)a6, (int32x4_t)a8), (int32x4_t)v22);
  v24 = (float32x4_t)vtrn2q_s32((int32x4_t)a6, (int32x4_t)a7);
  v24.i32[2] = a8.i32[1];
  v25 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)a6, (int32x4_t)a8), (int32x4_t)a7);
  v26 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
  v27 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v26, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v25, a7.n128_f32[0]), (float32x4_t)vdupq_lane_s32((int32x2_t)a7.n128_u64[0], 1), v24), v22, v23), v18)), (int8x16_t)vcgeq_f32(v26, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v25, a6.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a6.f32, 1),
                                           v24),
                                         (float32x4_t)vdupq_laneq_s32((int32x4_t)a6, 2),
                                         v23),
                                       *MEMORY[0x24BDAEDF8]))),
                      (int8x16_t)vcgeq_f32(v26, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v25, a8.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a8.f32, 1), v24), (float32x4_t)vdupq_laneq_s32((int32x4_t)a8, 2), v23), v19)));
  v27.i32[3] = v27.i32[2];
  if ((vminvq_u32(v27) & 0x80000000) == 0)
    goto LABEL_20;
  v28 = vmulq_f32(a6, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)a8, (int8x16_t)a8, 0xCuLL), (int8x16_t)a8, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a7, (int32x4_t)a7), (int8x16_t)a7, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a8, (int32x4_t)a8), (int8x16_t)a8, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)a7, (int8x16_t)a7, 0xCuLL), (int8x16_t)a7, 8uLL)));
  if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v28, 2), vaddq_f32(v28, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28.f32, 1))).f32[0]+ -1.0) <= 0.000011&& a4&& (v30 = (float32x2_t)vdup_n_s32(0x38D1B717u), v31 = (uint32x2_t)vand_s8((int8x8_t)vcge_f32(v30, vabs_f32(vadd_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a8, (int8x16_t)a8, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(a9, a9, 8uLL)), (float32x2_t)0xBF80000080000000))), (int8x8_t)vcge_f32(
                                        v30,
                                        vabs_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a6, (int8x16_t)a6, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a7, (int8x16_t)a7, 8uLL))))), (vpmin_u32(v31, v31).u32[0] & 0x80000000) != 0))
  {
    v32 = a3;
    v33 = a2;
    v46 = a6;
    v48 = a8;
    v35 = sub_239399D80(a1);
    if (v35)
    {
      v36 = 0;
      do
      {
        v37 = *v33++;
        v38 = v37;
        HIDWORD(v38) = 1;
        *(_OWORD *)(*(_QWORD *)(v35 + 96) + v36) = v38;
        v39 = *(_QWORD *)(v35 + 96) + v36;
        *(_QWORD *)(v39 + 16) = 0;
        *(_QWORD *)(v39 + 24) = 0;
        v40 = *v32++;
        v41 = v40;
        HIDWORD(v41) = 1.0;
        *(_OWORD *)(*(_QWORD *)(v35 + 96) + v36 + 32) = v41;
        v36 += 48;
      }
      while (48 * a1 != v36);
      v42 = 0;
      *(float *)(v35 + 16) = a5;
      *(float32x4_t *)(v35 + 32) = v46;
      *(__n128 *)(v35 + 48) = a7;
      *(float32x4_t *)(v35 + 64) = v48;
      *(int8x16_t *)(v35 + 80) = a9;
      *a4 = v35;
    }
    else
    {
      if (qword_256930038 != -1)
        dispatch_once(&qword_256930038, &unk_250AD5B20);
      v45 = qword_256930030;
      if (os_log_type_enabled((os_log_t)qword_256930030, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v51 = "OCVoxelCloudCreateWithRGB";
        v52 = 1026;
        v53 = 148;
        _os_log_error_impl(&dword_239388000, v45, OS_LOG_TYPE_ERROR, "%s:%{public}d Insufficient memory.", buf, 0x12u);
      }
      return 4294967293;
    }
  }
  else
  {
LABEL_20:
    if (qword_256930038 != -1)
      dispatch_once(&qword_256930038, &unk_250AD5B20);
    v43 = qword_256930030;
    if (os_log_type_enabled((os_log_t)qword_256930030, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v51 = "OCVoxelCloudCreateWithRGB";
      v52 = 1026;
      v53 = 142;
      _os_log_error_impl(&dword_239388000, v43, OS_LOG_TYPE_ERROR, "%s:%{public}d Invalid arguments.", buf, 0x12u);
    }
    return 4294967294;
  }
  return v42;
}

uint64_t OCVoxelCloudCreateWithNormal(unsigned int a1, __int128 *a2, __int128 *a3, uint64_t *a4, float a5, float32x4_t a6, __n128 a7, float32x4_t a8, int8x16_t a9)
{
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  uint32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  uint32x4_t v27;
  float32x4_t v28;
  float32x2_t v30;
  uint32x2_t v31;
  __int128 *v32;
  __int128 *v33;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  NSObject *v42;
  NSObject *v44;
  float32x4_t v45;
  float32x4_t v47;
  uint8_t buf[4];
  const char *v50;
  __int16 v51;
  int v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  if (a5 <= 0.0001 || a1 == 0 || a2 == 0 || a3 == 0)
    goto LABEL_20;
  v15 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(a6, a6.f32[0]), (float32x4_t)a7, a7.n128_f32[0]), a8, a8.f32[0]);
  v16 = vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(a6, *(float32x2_t *)a6.f32, 1), (float32x4_t)a7, (float32x2_t)a7.n128_u64[0], 1), a8, *(float32x2_t *)a8.f32, 1);
  v17 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(a6, a6, 2), (float32x4_t)a7, (float32x4_t)a7, 2), a8, a8, 2);
  v18 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 16);
  v19 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 32);
  v20 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
  v21 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v20, vabdq_f32(v16, v18)), (int8x16_t)vcgeq_f32(v20, vabdq_f32(v15, *MEMORY[0x24BDAEDF8]))), (int8x16_t)vcgeq_f32(v20, vabdq_f32(v17, v19)));
  v21.i32[3] = v21.i32[2];
  if ((vminvq_u32(v21) & 0x80000000) == 0)
    goto LABEL_20;
  v22 = (float32x4_t)vdupq_laneq_s32((int32x4_t)a7, 2);
  v23 = (float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)a6, (int32x4_t)a8), (int32x4_t)v22);
  v24 = (float32x4_t)vtrn2q_s32((int32x4_t)a6, (int32x4_t)a7);
  v24.i32[2] = a8.i32[1];
  v25 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)a6, (int32x4_t)a8), (int32x4_t)a7);
  v26 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
  v27 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v26, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v25, a7.n128_f32[0]), (float32x4_t)vdupq_lane_s32((int32x2_t)a7.n128_u64[0], 1), v24), v22, v23), v18)), (int8x16_t)vcgeq_f32(v26, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v25, a6.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a6.f32, 1),
                                           v24),
                                         (float32x4_t)vdupq_laneq_s32((int32x4_t)a6, 2),
                                         v23),
                                       *MEMORY[0x24BDAEDF8]))),
                      (int8x16_t)vcgeq_f32(v26, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v25, a8.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a8.f32, 1), v24), (float32x4_t)vdupq_laneq_s32((int32x4_t)a8, 2), v23), v19)));
  v27.i32[3] = v27.i32[2];
  if ((vminvq_u32(v27) & 0x80000000) == 0)
    goto LABEL_20;
  v28 = vmulq_f32(a6, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)a8, (int8x16_t)a8, 0xCuLL), (int8x16_t)a8, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a7, (int32x4_t)a7), (int8x16_t)a7, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a8, (int32x4_t)a8), (int8x16_t)a8, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)a7, (int8x16_t)a7, 0xCuLL), (int8x16_t)a7, 8uLL)));
  if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v28, 2), vaddq_f32(v28, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28.f32, 1))).f32[0]+ -1.0) <= 0.000011&& a4&& (v30 = (float32x2_t)vdup_n_s32(0x38D1B717u), v31 = (uint32x2_t)vand_s8((int8x8_t)vcge_f32(v30, vabs_f32(vadd_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a8, (int8x16_t)a8, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(a9, a9, 8uLL)), (float32x2_t)0xBF80000080000000))), (int8x8_t)vcge_f32(
                                        v30,
                                        vabs_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a6, (int8x16_t)a6, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a7, (int8x16_t)a7, 8uLL))))), (vpmin_u32(v31, v31).u32[0] & 0x80000000) != 0))
  {
    v32 = a3;
    v33 = a2;
    v45 = a6;
    v47 = a8;
    v35 = sub_239399D80(a1);
    if (v35)
    {
      v36 = 0;
      do
      {
        v37 = *v33++;
        v38 = v37;
        HIDWORD(v38) = 1;
        *(_OWORD *)(*(_QWORD *)(v35 + 96) + v36) = v38;
        v39 = *v32++;
        v40 = v39;
        HIDWORD(v40) = 1.0;
        *(_OWORD *)(*(_QWORD *)(v35 + 96) + v36 + 16) = v40;
        *(_OWORD *)(*(_QWORD *)(v35 + 96) + v36 + 32) = xmmword_2393F5320;
        v36 += 48;
      }
      while (48 * a1 != v36);
      v41 = 0;
      *(float *)(v35 + 16) = a5;
      *(float32x4_t *)(v35 + 32) = v45;
      *(__n128 *)(v35 + 48) = a7;
      *(float32x4_t *)(v35 + 64) = v47;
      *(int8x16_t *)(v35 + 80) = a9;
      *a4 = v35;
    }
    else
    {
      if (qword_256930038 != -1)
        dispatch_once(&qword_256930038, &unk_250AD5B20);
      v44 = qword_256930030;
      if (os_log_type_enabled((os_log_t)qword_256930030, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v50 = "OCVoxelCloudCreateWithNormal";
        v51 = 1026;
        v52 = 175;
        _os_log_error_impl(&dword_239388000, v44, OS_LOG_TYPE_ERROR, "%s:%{public}d Insufficient memory.", buf, 0x12u);
      }
      return 4294967293;
    }
  }
  else
  {
LABEL_20:
    if (qword_256930038 != -1)
      dispatch_once(&qword_256930038, &unk_250AD5B20);
    v42 = qword_256930030;
    if (os_log_type_enabled((os_log_t)qword_256930030, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v50 = "OCVoxelCloudCreateWithNormal";
      v51 = 1026;
      v52 = 169;
      _os_log_error_impl(&dword_239388000, v42, OS_LOG_TYPE_ERROR, "%s:%{public}d Invalid arguments.", buf, 0x12u);
    }
    return 4294967294;
  }
  return v41;
}

uint64_t OCVoxelCloudCreateWithRGBNormal(unsigned int a1, __int128 *a2, __int128 *a3, __int128 *a4, uint64_t *a5, float a6, float32x4_t a7, __n128 a8, float32x4_t a9, int8x16_t a10)
{
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  uint32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  uint32x4_t v28;
  float32x4_t v29;
  __int128 *v31;
  float32x2_t v32;
  uint32x2_t v33;
  __int128 *v34;
  __int128 *v35;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  NSObject *v46;
  NSObject *v48;
  float32x4_t v49;
  float32x4_t v51;
  uint8_t buf[4];
  const char *v54;
  __int16 v55;
  int v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  if (a6 <= 0.0001 || a1 == 0 || a2 == 0 || a3 == 0)
    goto LABEL_21;
  v16 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(a7, a7.f32[0]), (float32x4_t)a8, a8.n128_f32[0]), a9, a9.f32[0]);
  v17 = vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(a7, *(float32x2_t *)a7.f32, 1), (float32x4_t)a8, (float32x2_t)a8.n128_u64[0], 1), a9, *(float32x2_t *)a9.f32, 1);
  v18 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(a7, a7, 2), (float32x4_t)a8, (float32x4_t)a8, 2), a9, a9, 2);
  v19 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 16);
  v20 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 32);
  v21 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
  v22 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v21, vabdq_f32(v17, v19)), (int8x16_t)vcgeq_f32(v21, vabdq_f32(v16, *MEMORY[0x24BDAEDF8]))), (int8x16_t)vcgeq_f32(v21, vabdq_f32(v18, v20)));
  v22.i32[3] = v22.i32[2];
  if ((vminvq_u32(v22) & 0x80000000) == 0)
    goto LABEL_21;
  v23 = (float32x4_t)vdupq_laneq_s32((int32x4_t)a8, 2);
  v24 = (float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)a7, (int32x4_t)a9), (int32x4_t)v23);
  v25 = (float32x4_t)vtrn2q_s32((int32x4_t)a7, (int32x4_t)a8);
  v25.i32[2] = a9.i32[1];
  v26 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)a7, (int32x4_t)a9), (int32x4_t)a8);
  v27 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
  v28 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v27, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v26, a8.n128_f32[0]), (float32x4_t)vdupq_lane_s32((int32x2_t)a8.n128_u64[0], 1), v25), v23, v24), v19)), (int8x16_t)vcgeq_f32(v27, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v26, a7.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a7.f32, 1),
                                           v25),
                                         (float32x4_t)vdupq_laneq_s32((int32x4_t)a7, 2),
                                         v24),
                                       *MEMORY[0x24BDAEDF8]))),
                      (int8x16_t)vcgeq_f32(v27, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v26, a9.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a9.f32, 1), v25), (float32x4_t)vdupq_laneq_s32((int32x4_t)a9, 2), v24), v20)));
  v28.i32[3] = v28.i32[2];
  if ((vminvq_u32(v28) & 0x80000000) == 0)
    goto LABEL_21;
  v29 = vmulq_f32(a7, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)a9, (int8x16_t)a9, 0xCuLL), (int8x16_t)a9, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a8, (int32x4_t)a8), (int8x16_t)a8, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a9, (int32x4_t)a9), (int8x16_t)a9, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)a8, (int8x16_t)a8, 0xCuLL), (int8x16_t)a8, 8uLL)));
  if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v29, 2), vaddq_f32(v29, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 1))).f32[0]+ -1.0) <= 0.000011&& a5&& (v31 = a4) != 0&& (v32 = (float32x2_t)vdup_n_s32(0x38D1B717u), v33 = (uint32x2_t)vand_s8((int8x8_t)vcge_f32(v32, vabs_f32(vadd_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a9, (int8x16_t)a9, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(a10, a10, 8uLL)), (float32x2_t)0xBF80000080000000))),
                            (int8x8_t)vcge_f32(v32, vabs_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a7, (int8x16_t)a7, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a8, (int8x16_t)a8, 8uLL))))), (vpmin_u32(v33, v33).u32[0] & 0x80000000) != 0))
  {
    v34 = a3;
    v35 = a2;
    v49 = a7;
    v51 = a9;
    v37 = sub_239399D80(a1);
    if (v37)
    {
      v38 = 0;
      do
      {
        v39 = *v35++;
        v40 = v39;
        HIDWORD(v40) = 1;
        *(_OWORD *)(*(_QWORD *)(v37 + 96) + v38) = v40;
        v41 = *v31++;
        v42 = v41;
        HIDWORD(v42) = 1.0;
        *(_OWORD *)(*(_QWORD *)(v37 + 96) + v38 + 16) = v42;
        v43 = *v34++;
        v44 = v43;
        HIDWORD(v44) = 1.0;
        *(_OWORD *)(*(_QWORD *)(v37 + 96) + v38 + 32) = v44;
        v38 += 48;
      }
      while (48 * a1 != v38);
      v45 = 0;
      *(float *)(v37 + 16) = a6;
      *(float32x4_t *)(v37 + 32) = v49;
      *(__n128 *)(v37 + 48) = a8;
      *(float32x4_t *)(v37 + 64) = v51;
      *(int8x16_t *)(v37 + 80) = a10;
      *a5 = v37;
    }
    else
    {
      if (qword_256930038 != -1)
        dispatch_once(&qword_256930038, &unk_250AD5B20);
      v48 = qword_256930030;
      if (os_log_type_enabled((os_log_t)qword_256930030, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v54 = "OCVoxelCloudCreateWithRGBNormal";
        v55 = 1026;
        v56 = 202;
        _os_log_error_impl(&dword_239388000, v48, OS_LOG_TYPE_ERROR, "%s:%{public}d Insufficient memory.", buf, 0x12u);
      }
      return 4294967293;
    }
  }
  else
  {
LABEL_21:
    if (qword_256930038 != -1)
      dispatch_once(&qword_256930038, &unk_250AD5B20);
    v46 = qword_256930030;
    if (os_log_type_enabled((os_log_t)qword_256930030, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v54 = "OCVoxelCloudCreateWithRGBNormal";
      v55 = 1026;
      v56 = 196;
      _os_log_error_impl(&dword_239388000, v46, OS_LOG_TYPE_ERROR, "%s:%{public}d Invalid arguments.", buf, 0x12u);
    }
    return 4294967294;
  }
  return v45;
}

uint64_t OCVoxelCloudCreateFromOCVoxels(unsigned int a1, const void *a2, uint64_t *a3, float a4, float32x4_t a5, __n128 a6, float32x4_t a7, int8x16_t a8)
{
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  uint32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  uint32x4_t v25;
  float32x4_t v26;
  float32x2_t v28;
  uint32x2_t v29;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  NSObject *v35;
  NSObject *v36;
  float32x4_t v37;
  float32x4_t v39;
  uint8_t buf[4];
  const char *v42;
  __int16 v43;
  int v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  if (a4 <= 0.0001 || a1 == 0 || a2 == 0)
    goto LABEL_15;
  v13 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(a5, a5.f32[0]), (float32x4_t)a6, a6.n128_f32[0]), a7, a7.f32[0]);
  v14 = vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(a5, *(float32x2_t *)a5.f32, 1), (float32x4_t)a6, (float32x2_t)a6.n128_u64[0], 1), a7, *(float32x2_t *)a7.f32, 1);
  v15 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(a5, a5, 2), (float32x4_t)a6, (float32x4_t)a6, 2), a7, a7, 2);
  v16 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 16);
  v17 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 32);
  v18 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
  v19 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v18, vabdq_f32(v14, v16)), (int8x16_t)vcgeq_f32(v18, vabdq_f32(v13, *MEMORY[0x24BDAEDF8]))), (int8x16_t)vcgeq_f32(v18, vabdq_f32(v15, v17)));
  v19.i32[3] = v19.i32[2];
  if ((vminvq_u32(v19) & 0x80000000) == 0)
    goto LABEL_15;
  v20 = (float32x4_t)vdupq_laneq_s32((int32x4_t)a6, 2);
  v21 = (float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)a5, (int32x4_t)a7), (int32x4_t)v20);
  v22 = (float32x4_t)vtrn2q_s32((int32x4_t)a5, (int32x4_t)a6);
  v22.i32[2] = a7.i32[1];
  v23 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)a5, (int32x4_t)a7), (int32x4_t)a6);
  v24 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
  v25 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v24, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v23, a6.n128_f32[0]), (float32x4_t)vdupq_lane_s32((int32x2_t)a6.n128_u64[0], 1), v22), v20, v21), v16)), (int8x16_t)vcgeq_f32(v24, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v23, a5.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 1),
                                           v22),
                                         (float32x4_t)vdupq_laneq_s32((int32x4_t)a5, 2),
                                         v21),
                                       *MEMORY[0x24BDAEDF8]))),
                      (int8x16_t)vcgeq_f32(v24, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v23, a7.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a7.f32, 1), v22), (float32x4_t)vdupq_laneq_s32((int32x4_t)a7, 2), v21), v17)));
  v25.i32[3] = v25.i32[2];
  if ((vminvq_u32(v25) & 0x80000000) == 0)
    goto LABEL_15;
  v26 = vmulq_f32(a5, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)a7, (int8x16_t)a7, 0xCuLL), (int8x16_t)a7, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a6, (int32x4_t)a6), (int8x16_t)a6, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a7, (int32x4_t)a7), (int8x16_t)a7, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)a6, (int8x16_t)a6, 0xCuLL), (int8x16_t)a6, 8uLL)));
  if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 2), vaddq_f32(v26, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 1))).f32[0]+ -1.0) <= 0.000011&& a3&& (v28 = (float32x2_t)vdup_n_s32(0x38D1B717u), v29 = (uint32x2_t)vand_s8((int8x8_t)vcge_f32(v28, vabs_f32(vadd_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a7, (int8x16_t)a7, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(a8, a8, 8uLL)), (float32x2_t)0xBF80000080000000))), (int8x8_t)vcge_f32(
                                        v28,
                                        vabs_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a5, (int8x16_t)a5, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a6, (int8x16_t)a6, 8uLL))))), (vpmin_u32(v29, v29).u32[0] & 0x80000000) != 0))
  {
    v37 = a5;
    v39 = a7;
    v32 = sub_239399D80(a1);
    if (v32)
    {
      v33 = v32;
      *(float *)(v32 + 16) = a4;
      *(float32x4_t *)(v32 + 32) = v37;
      *(__n128 *)(v32 + 48) = a6;
      *(float32x4_t *)(v32 + 64) = v39;
      *(int8x16_t *)(v32 + 80) = a8;
      memcpy(*(void **)(v32 + 96), a2, 48 * a1);
      result = 0;
      *a3 = v33;
    }
    else
    {
      if (qword_256930038 != -1)
        dispatch_once(&qword_256930038, &unk_250AD5B20);
      v36 = qword_256930030;
      if (os_log_type_enabled((os_log_t)qword_256930030, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v42 = "OCVoxelCloudCreateFromOCVoxels";
        v43 = 1026;
        v44 = 228;
        _os_log_error_impl(&dword_239388000, v36, OS_LOG_TYPE_ERROR, "%s:%{public}d Insufficient memory.", buf, 0x12u);
      }
      return 4294967293;
    }
  }
  else
  {
LABEL_15:
    if (qword_256930038 != -1)
      dispatch_once(&qword_256930038, &unk_250AD5B20);
    v35 = qword_256930030;
    if (os_log_type_enabled((os_log_t)qword_256930030, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v42 = "OCVoxelCloudCreateFromOCVoxels";
      v43 = 1026;
      v44 = 222;
      _os_log_error_impl(&dword_239388000, v35, OS_LOG_TYPE_ERROR, "%s:%{public}d Invalid arguments.", buf, 0x12u);
    }
    return 4294967294;
  }
  return result;
}

uint64_t OCVoxelCloudCreateFromOCPoints(unsigned int a1, uint64_t a2, uint64_t *a3, float a4, float32x4_t a5, __n128 a6, float32x4_t a7, int8x16_t a8)
{
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  uint32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  uint32x4_t v25;
  float32x4_t v26;
  float32x2_t v28;
  uint32x2_t v29;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  NSObject *v36;
  NSObject *v38;
  float32x4_t v39;
  float32x4_t v41;
  uint8_t buf[4];
  const char *v44;
  __int16 v45;
  int v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  if (a4 <= 0.0001 || a1 == 0 || a2 == 0)
    goto LABEL_17;
  v13 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(a5, a5.f32[0]), (float32x4_t)a6, a6.n128_f32[0]), a7, a7.f32[0]);
  v14 = vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(a5, *(float32x2_t *)a5.f32, 1), (float32x4_t)a6, (float32x2_t)a6.n128_u64[0], 1), a7, *(float32x2_t *)a7.f32, 1);
  v15 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(a5, a5, 2), (float32x4_t)a6, (float32x4_t)a6, 2), a7, a7, 2);
  v16 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 16);
  v17 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 32);
  v18 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
  v19 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v18, vabdq_f32(v14, v16)), (int8x16_t)vcgeq_f32(v18, vabdq_f32(v13, *MEMORY[0x24BDAEDF8]))), (int8x16_t)vcgeq_f32(v18, vabdq_f32(v15, v17)));
  v19.i32[3] = v19.i32[2];
  if ((vminvq_u32(v19) & 0x80000000) == 0)
    goto LABEL_17;
  v20 = (float32x4_t)vdupq_laneq_s32((int32x4_t)a6, 2);
  v21 = (float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)a5, (int32x4_t)a7), (int32x4_t)v20);
  v22 = (float32x4_t)vtrn2q_s32((int32x4_t)a5, (int32x4_t)a6);
  v22.i32[2] = a7.i32[1];
  v23 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)a5, (int32x4_t)a7), (int32x4_t)a6);
  v24 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
  v25 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v24, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v23, a6.n128_f32[0]), (float32x4_t)vdupq_lane_s32((int32x2_t)a6.n128_u64[0], 1), v22), v20, v21), v16)), (int8x16_t)vcgeq_f32(v24, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v23, a5.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 1),
                                           v22),
                                         (float32x4_t)vdupq_laneq_s32((int32x4_t)a5, 2),
                                         v21),
                                       *MEMORY[0x24BDAEDF8]))),
                      (int8x16_t)vcgeq_f32(v24, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v23, a7.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a7.f32, 1), v22), (float32x4_t)vdupq_laneq_s32((int32x4_t)a7, 2), v21), v17)));
  v25.i32[3] = v25.i32[2];
  if ((vminvq_u32(v25) & 0x80000000) == 0)
    goto LABEL_17;
  v26 = vmulq_f32(a5, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)a7, (int8x16_t)a7, 0xCuLL), (int8x16_t)a7, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a6, (int32x4_t)a6), (int8x16_t)a6, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a7, (int32x4_t)a7), (int8x16_t)a7, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)a6, (int8x16_t)a6, 0xCuLL), (int8x16_t)a6, 8uLL)));
  if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 2), vaddq_f32(v26, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 1))).f32[0]+ -1.0) <= 0.000011&& a3&& (v28 = (float32x2_t)vdup_n_s32(0x38D1B717u), v29 = (uint32x2_t)vand_s8((int8x8_t)vcge_f32(v28, vabs_f32(vadd_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a7, (int8x16_t)a7, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(a8, a8, 8uLL)), (float32x2_t)0xBF80000080000000))), (int8x8_t)vcge_f32(
                                        v28,
                                        vabs_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a5, (int8x16_t)a5, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a6, (int8x16_t)a6, 8uLL))))), (vpmin_u32(v29, v29).u32[0] & 0x80000000) != 0))
  {
    v39 = a5;
    v41 = a7;
    v32 = sub_239399D80(a1);
    if (v32)
    {
      v33 = 0;
      do
      {
        *(int32x2_t *)&v34 = vcvt_s32_f32(vrndm_f32(*(float32x2_t *)(a2 + v33)));
        *((_QWORD *)&v34 + 1) = vcvtms_s32_f32(*(float *)(a2 + v33 + 8)) | 0x100000000;
        *(_OWORD *)(*(_QWORD *)(v32 + 96) + v33) = v34;
        *(_OWORD *)(*(_QWORD *)(v32 + 96) + v33 + 16) = *(_OWORD *)(a2 + v33 + 16);
        *(_OWORD *)(*(_QWORD *)(v32 + 96) + v33 + 32) = *(_OWORD *)(a2 + v33 + 32);
        v33 += 48;
      }
      while (48 * a1 != v33);
      v35 = 0;
      *(float *)(v32 + 16) = a4;
      *(float32x4_t *)(v32 + 32) = v39;
      *(__n128 *)(v32 + 48) = a6;
      *(float32x4_t *)(v32 + 64) = v41;
      *(int8x16_t *)(v32 + 80) = a8;
      *a3 = v32;
    }
    else
    {
      if (qword_256930038 != -1)
        dispatch_once(&qword_256930038, &unk_250AD5B20);
      v38 = qword_256930030;
      if (os_log_type_enabled((os_log_t)qword_256930030, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v44 = "OCVoxelCloudCreateFromOCPoints";
        v45 = 1026;
        v46 = 249;
        _os_log_error_impl(&dword_239388000, v38, OS_LOG_TYPE_ERROR, "%s:%{public}d Insufficient memory.", buf, 0x12u);
      }
      return 4294967293;
    }
  }
  else
  {
LABEL_17:
    if (qword_256930038 != -1)
      dispatch_once(&qword_256930038, &unk_250AD5B20);
    v36 = qword_256930030;
    if (os_log_type_enabled((os_log_t)qword_256930030, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v44 = "OCVoxelCloudCreateFromOCPoints";
      v45 = 1026;
      v46 = 243;
      _os_log_error_impl(&dword_239388000, v36, OS_LOG_TYPE_ERROR, "%s:%{public}d Invalid arguments.", buf, 0x12u);
    }
    return 4294967294;
  }
  return v35;
}

CFTypeRef OCVoxelCloudRetain(CFTypeRef cf)
{
  if (cf)
    CFRetain(cf);
  return cf;
}

void OCVoxelCloudRelease(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

uint64_t OCVoxelCloudSize(uint64_t a1)
{
  uint64_t result;
  NSObject *v2;
  int v3;
  const char *v4;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a1)
    return -1431655765 * ((*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 4);
  if (qword_256930038 != -1)
    dispatch_once(&qword_256930038, &unk_250AD5B20);
  v2 = qword_256930030;
  result = os_log_type_enabled((os_log_t)qword_256930030, OS_LOG_TYPE_ERROR);
  if ((_DWORD)result)
  {
    v3 = 136315394;
    v4 = "OCVoxelCloudSize";
    v5 = 1026;
    v6 = 283;
    _os_log_error_impl(&dword_239388000, v2, OS_LOG_TYPE_ERROR, "%s:%{public}d Invalid voxelcloud.", (uint8_t *)&v3, 0x12u);
    return 0;
  }
  return result;
}

uint64_t OCVoxelCloudVoxels(uint64_t a1)
{
  uint64_t result;
  NSObject *v3;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (!a1 || (result = *(_QWORD *)(a1 + 96), result == *(_QWORD *)(a1 + 104)))
  {
    if (qword_256930038 != -1)
      dispatch_once(&qword_256930038, &unk_250AD5B20);
    v3 = qword_256930030;
    if (os_log_type_enabled((os_log_t)qword_256930030, OS_LOG_TYPE_ERROR))
    {
      v4 = 136315394;
      v5 = "OCVoxelCloudVoxels";
      v6 = 1026;
      v7 = 292;
      _os_log_error_impl(&dword_239388000, v3, OS_LOG_TYPE_ERROR, "%s:%{public}d Invalid voxelcloud.", (uint8_t *)&v4, 0x12u);
    }
    return 0;
  }
  return result;
}

uint64_t OCVoxelCloudVoxelAt(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  NSObject *v4;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 96);
    if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 104) - v2) >> 4) > a2)
      return v2 + 48 * a2;
  }
  if (qword_256930038 != -1)
    dispatch_once(&qword_256930038, &unk_250AD5B20);
  v4 = qword_256930030;
  if (os_log_type_enabled((os_log_t)qword_256930030, OS_LOG_TYPE_ERROR))
  {
    v5 = 136315394;
    v6 = "OCVoxelCloudVoxelAt";
    v7 = 1026;
    v8 = 301;
    _os_log_error_impl(&dword_239388000, v4, OS_LOG_TYPE_ERROR, "%s:%{public}d Invalid voxelcloud.", (uint8_t *)&v5, 0x12u);
  }
  return 0;
}

uint64_t OCVoxelCloudBuildSpatialInfo(uint64_t a1)
{
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t i;
  unint64_t v10;
  int32x4_t **v11;
  int32x4_t v12;
  int8x16_t v13;
  int64x2_t v14;
  unint64_t v15;
  unint64_t v16;
  uint8x8_t v17;
  int32x4_t **v18;
  int32x4_t *v19;
  uint32x4_t v20;
  unint64_t v21;
  uint32x4_t v22;
  uint64_t v23;
  float v24;
  float v25;
  _BOOL8 v26;
  unint64_t v27;
  unint64_t v28;
  size_t prime;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  uint64_t v33;
  int32x4_t **v34;
  unint64_t v35;
  NSObject *v37;
  NSObject *v38;
  int32x4_t v39;
  uint8_t buf[4];
  const char *v41;
  __int16 v42;
  int v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    v4 = *(_QWORD *)(a1 + 96);
    v3 = *(_QWORD *)(a1 + 104);
    if (v4 == v3)
    {
      if (qword_256930038 != -1)
        dispatch_once(&qword_256930038, &unk_250AD5B20);
      v38 = qword_256930030;
      if (os_log_type_enabled((os_log_t)qword_256930030, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v41 = "OCVoxelCloudBuildSpatialInfo";
        v42 = 1026;
        v43 = 315;
        _os_log_error_impl(&dword_239388000, v38, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to build spatial info.", buf, 0x12u);
      }
      return 0xFFFFFFFFLL;
    }
    else
    {
      v5 = (uint64_t *)(a1 + 120);
      if (*(_QWORD *)(a1 + 144))
      {
        v6 = *(_QWORD **)(a1 + 136);
        if (v6)
        {
          do
          {
            v7 = (_QWORD *)*v6;
            operator delete(v6);
            v6 = v7;
          }
          while (v7);
        }
        *(_QWORD *)(a1 + 136) = 0;
        v8 = *(_QWORD *)(a1 + 128);
        if (v8)
        {
          for (i = 0; i != v8; ++i)
            *(_QWORD *)(*v5 + 8 * i) = 0;
        }
        *(_QWORD *)(a1 + 144) = 0;
        v4 = *(_QWORD *)(a1 + 96);
        v3 = *(_QWORD *)(a1 + 104);
      }
      if (v3 != v4)
      {
        v10 = 0;
        v11 = (int32x4_t **)(a1 + 136);
        do
        {
          v12 = *(int32x4_t *)(v4 + 48 * v10);
          v13.i64[1] = v12.i32[3];
          v13.i64[0] = 83492791 * (int)*(_QWORD *)(v4 + 48 * v10 + 8);
          v14 = vmull_s32(*(int32x2_t *)v12.i8, (int32x2_t)0x12740A50466F45DLL);
          v15 = veorq_s8((int8x16_t)vdupq_laneq_s64(v14, 1), veorq_s8(v13, (int8x16_t)v14)).u64[0]
              % *(_QWORD *)(a1 + 152);
          v16 = *(_QWORD *)(a1 + 128);
          if (v16)
          {
            v17 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
            v17.i16[0] = vaddlv_u8(v17);
            if (v17.u32[0] > 1uLL)
            {
              v1 = v15;
              if (v15 >= v16)
                v1 = v15 % v16;
            }
            else
            {
              v1 = (v16 - 1) & v15;
            }
            v18 = *(int32x4_t ***)(*v5 + 8 * v1);
            if (v18)
            {
              v19 = *v18;
              if (*v18)
              {
                if (v17.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v23 = v19->i64[1];
                    if (v23 == v15)
                    {
                      v22 = (uint32x4_t)vceqq_s32(v19[1], v12);
                      v22.i32[3] = v22.i32[2];
                      if ((vminvq_u32(v22) & 0x80000000) != 0)
                        goto LABEL_70;
                    }
                    else if ((v23 & (v16 - 1)) != v1)
                    {
                      goto LABEL_32;
                    }
                    v19 = (int32x4_t *)v19->i64[0];
                    if (!v19)
                      goto LABEL_32;
                  }
                }
                do
                {
                  v21 = v19->u64[1];
                  if (v21 == v15)
                  {
                    v20 = (uint32x4_t)vceqq_s32(v19[1], v12);
                    v20.i32[3] = v20.i32[2];
                    if ((vminvq_u32(v20) & 0x80000000) != 0)
                      goto LABEL_70;
                  }
                  else
                  {
                    if (v21 >= v16)
                      v21 %= v16;
                    if (v21 != v1)
                      break;
                  }
                  v19 = (int32x4_t *)v19->i64[0];
                }
                while (v19);
              }
            }
          }
LABEL_32:
          v39 = *(int32x4_t *)(v4 + 48 * v10);
          v19 = (int32x4_t *)operator new(0x30uLL);
          v19->i64[0] = 0;
          v19->i64[1] = v15;
          v19[1] = v39;
          v19[2].i64[0] = 0;
          v24 = (float)(unint64_t)(*(_QWORD *)(a1 + 144) + 1);
          v25 = *(float *)(a1 + 160);
          if (!v16 || (float)(v25 * (float)v16) < v24)
          {
            v26 = (v16 & (v16 - 1)) != 0;
            if (v16 < 3)
              v26 = 1;
            v27 = v26 | (2 * v16);
            v28 = vcvtps_u32_f32(v24 / v25);
            if (v27 <= v28)
              prime = v28;
            else
              prime = v27;
            if (prime == 1)
            {
              prime = 2;
            }
            else if ((prime & (prime - 1)) != 0)
            {
              prime = std::__next_prime(prime);
              v16 = *(_QWORD *)(a1 + 128);
            }
            if (prime > v16)
              goto LABEL_44;
            if (prime < v16)
            {
              v30 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 144) / *(float *)(a1 + 160));
              if (v16 < 3 || (v31 = (uint8x8_t)vcnt_s8((int8x8_t)v16), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
              {
                v30 = std::__next_prime(v30);
              }
              else
              {
                v32 = 1 << -(char)__clz(v30 - 1);
                if (v30 >= 2)
                  v30 = v32;
              }
              if (prime <= v30)
                prime = v30;
              if (prime < v16)
LABEL_44:
                sub_23938C8F4(a1 + 120, prime);
            }
            v16 = *(_QWORD *)(a1 + 128);
            if ((v16 & (v16 - 1)) != 0)
            {
              if (v15 >= v16)
                v1 = v15 % v16;
              else
                v1 = v15;
            }
            else
            {
              v1 = (v16 - 1) & v15;
            }
          }
          v33 = *v5;
          v34 = *(int32x4_t ***)(*v5 + 8 * v1);
          if (v34)
          {
            v19->i64[0] = (uint64_t)*v34;
          }
          else
          {
            v19->i64[0] = (uint64_t)*v11;
            *v11 = v19;
            *(_QWORD *)(v33 + 8 * v1) = v11;
            if (!v19->i64[0])
              goto LABEL_69;
            v35 = *(_QWORD *)(v19->i64[0] + 8);
            if ((v16 & (v16 - 1)) != 0)
            {
              if (v35 >= v16)
                v35 %= v16;
            }
            else
            {
              v35 &= v16 - 1;
            }
            v34 = (int32x4_t **)(*v5 + 8 * v35);
          }
          *v34 = v19;
LABEL_69:
          ++*(_QWORD *)(a1 + 144);
          v4 = *(_QWORD *)(a1 + 96);
          v3 = *(_QWORD *)(a1 + 104);
LABEL_70:
          v19[2].i64[0] = v10++;
        }
        while (v10 < 0xAAAAAAAAAAAAAAABLL * ((v3 - v4) >> 4));
      }
      return 0;
    }
  }
  else
  {
    if (qword_256930038 != -1)
      dispatch_once(&qword_256930038, &unk_250AD5B20);
    v37 = qword_256930030;
    if (os_log_type_enabled((os_log_t)qword_256930030, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v41 = "OCVoxelCloudBuildSpatialInfo";
      v42 = 1026;
      v43 = 310;
      _os_log_error_impl(&dword_239388000, v37, OS_LOG_TYPE_ERROR, "%s:%{public}d Invalid voxelcloud.", buf, 0x12u);
    }
    return 4294967294;
  }
}

uint64_t OCVoxelCloudVoxelIndexFromPosition(_QWORD *a1, int32x4_t a2, double a3, double a4, int8x16_t a5)
{
  int8x8_t v5;
  int64x2_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  NSObject *v10;
  const char *v11;
  int32x4_t **v12;
  int32x4_t *v13;
  uint64_t v14;
  uint32x4_t v15;
  unint64_t v16;
  uint32x4_t v17;
  uint64_t v18;
  int v20;
  const char *v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    if (qword_256930038 != -1)
      dispatch_once(&qword_256930038, &unk_250AD5B20);
    v10 = qword_256930030;
    if (!os_log_type_enabled((os_log_t)qword_256930030, OS_LOG_TYPE_ERROR))
      return -1;
    v20 = 136315394;
    v21 = "OCVoxelCloudVoxelIndexFromPosition";
    v22 = 1026;
    v23 = 325;
    v11 = "%s:%{public}d Invalid voxelcloud.";
    goto LABEL_37;
  }
  if (!a1[18])
  {
    if (qword_256930038 != -1)
      dispatch_once(&qword_256930038, &unk_250AD5B20);
    v10 = qword_256930030;
    if (!os_log_type_enabled((os_log_t)qword_256930030, OS_LOG_TYPE_ERROR))
      return -1;
    v20 = 136315394;
    v21 = "OCVoxelCloudVoxelIndexFromPosition";
    v22 = 1026;
    v23 = 333;
    v11 = "%s:%{public}d Spatial map is empty. Note: You must call OCVoxelCloudBuildSpatialInfo once before using OCVoxel"
          "CloudVoxelIndexFromPosition.";
    goto LABEL_37;
  }
  v5 = (int8x8_t)a1[16];
  if (!*(_QWORD *)&v5)
    goto LABEL_31;
  v6 = vmull_s32(*(int32x2_t *)a2.i8, (int32x2_t)0x12740A50466F45DLL);
  a5.i64[0] = 83492791 * a2.i32[2];
  v7 = veorq_s8((int8x16_t)vdupq_laneq_s64(v6, 1), veorq_s8(a5, (int8x16_t)v6)).u64[0] % a1[19];
  v8 = (uint8x8_t)vcnt_s8(v5);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    v9 = v7;
    if (v7 >= *(_QWORD *)&v5)
      v9 = v7 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v7;
  }
  v12 = *(int32x4_t ***)(a1[15] + 8 * v9);
  if (!v12 || (v13 = *v12) == 0)
  {
LABEL_31:
    if (qword_256930038 != -1)
      dispatch_once(&qword_256930038, &unk_250AD5B20);
    v10 = qword_256930030;
    if (!os_log_type_enabled((os_log_t)qword_256930030, OS_LOG_TYPE_ERROR))
      return -1;
    v20 = 136315394;
    v21 = "OCVoxelCloudVoxelIndexFromPosition";
    v22 = 1026;
    v23 = 339;
    v11 = "%s:%{public}d Voxel position not found in map.";
LABEL_37:
    _os_log_error_impl(&dword_239388000, v10, OS_LOG_TYPE_ERROR, v11, (uint8_t *)&v20, 0x12u);
    return -1;
  }
  if (v8.u32[0] < 2uLL)
  {
    v14 = *(_QWORD *)&v5 - 1;
    while (1)
    {
      v18 = v13->i64[1];
      if (v18 == v7)
      {
        v17 = (uint32x4_t)vceqq_s32(v13[1], a2);
        v17.i32[3] = v17.i32[2];
        if ((vminvq_u32(v17) & 0x80000000) != 0)
          return v13[2].i64[0];
      }
      else if ((v18 & v14) != v9)
      {
        goto LABEL_31;
      }
      v13 = (int32x4_t *)v13->i64[0];
      if (!v13)
        goto LABEL_31;
    }
  }
  while (1)
  {
    v16 = v13->u64[1];
    if (v16 == v7)
      break;
    if (v16 >= *(_QWORD *)&v5)
      v16 %= *(_QWORD *)&v5;
    if (v16 != v9)
      goto LABEL_31;
LABEL_21:
    v13 = (int32x4_t *)v13->i64[0];
    if (!v13)
      goto LABEL_31;
  }
  v15 = (uint32x4_t)vceqq_s32(v13[1], a2);
  v15.i32[3] = v15.i32[2];
  if ((vminvq_u32(v15) & 0x80000000) == 0)
    goto LABEL_21;
  return v13[2].i64[0];
}

double OCVoxelCloudVoxelDimension(uint64_t a1)
{
  const float *v1;
  double result;
  NSObject *v3;
  _BOOL4 v4;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    v1 = (const float *)(a1 + 16);
    *(_QWORD *)&result = vld1q_dup_f32(v1).u64[0];
  }
  else
  {
    if (qword_256930038 != -1)
      dispatch_once(&qword_256930038, &unk_250AD5B20);
    v3 = qword_256930030;
    v4 = os_log_type_enabled((os_log_t)qword_256930030, OS_LOG_TYPE_ERROR);
    result = 0.0;
    if (v4)
    {
      v5 = 136315394;
      v6 = "OCVoxelCloudVoxelDimension";
      v7 = 1026;
      v8 = 348;
      _os_log_error_impl(&dword_239388000, v3, OS_LOG_TYPE_ERROR, "%s:%{public}d Invalid voxelcloud.", (uint8_t *)&v5, 0x12u);
      return 0.0;
    }
  }
  return result;
}

double OCVoxelCloudGetData@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  NSObject *v7;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    v3 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(a2 + 80) = -1431655765 * ((unint64_t)(*(_QWORD *)(a1 + 104) - v3) >> 4);
    v4 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a2 + 32) = v4;
    v6 = *(_OWORD *)(a1 + 64);
    v5 = *(_OWORD *)(a1 + 80);
    *(_OWORD *)(a2 + 48) = v6;
    *(_OWORD *)(a2 + 64) = v5;
    LODWORD(v6) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)a2 = v6;
    *(_QWORD *)(a2 + 88) = v3;
  }
  else
  {
    if (qword_256930038 != -1)
      dispatch_once(&qword_256930038, &unk_250AD5B20);
    v7 = qword_256930030;
    if (os_log_type_enabled((os_log_t)qword_256930030, OS_LOG_TYPE_ERROR))
    {
      v9 = 136315394;
      v10 = "OCVoxelCloudGetData";
      v11 = 1026;
      v12 = 357;
      _os_log_error_impl(&dword_239388000, v7, OS_LOG_TYPE_ERROR, "%s:%{public}d Invalid voxelcloud.", (uint8_t *)&v9, 0x12u);
    }
    *(_QWORD *)&v6 = 0;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return *(double *)&v6;
}

double OCVoxelCloudTransformMatrix(float32x4_t *a1)
{
  double result;
  NSObject *v2;
  int v3;
  const char *v4;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    *(_QWORD *)&result = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(a1[2], a1[1].f32[0]), (float32x4_t)0, a1[3]), (float32x4_t)0, a1[4]), (float32x4_t)0, a1[5]).u64[0];
  }
  else
  {
    if (qword_256930038 != -1)
      dispatch_once(&qword_256930038, &unk_250AD5B20);
    v2 = qword_256930030;
    if (os_log_type_enabled((os_log_t)qword_256930030, OS_LOG_TYPE_ERROR))
    {
      v3 = 136315394;
      v4 = "OCVoxelCloudTransformMatrix";
      v5 = 1026;
      v6 = 371;
      _os_log_error_impl(&dword_239388000, v2, OS_LOG_TYPE_ERROR, "%s:%{public}d Invalid voxelcloud.", (uint8_t *)&v3, 0x12u);
    }
    return 0.0;
  }
  return result;
}

uint64_t OCFramingStationsGetTypeID()
{
  if (qword_2569300B0 != -1)
    dispatch_once(&qword_2569300B0, &unk_250AD5BA0);
  return qword_2569300B8;
}

uint64_t sub_23939C600()
{
  uint64_t result;

  qword_2569300C0 = 0;
  *(_QWORD *)algn_2569300C8 = "OCFramingStations";
  qword_2569300D0 = (uint64_t)sub_23939C660;
  unk_2569300D8 = 0;
  qword_2569300E0 = (uint64_t)sub_23939C668;
  unk_2569300E8 = 0;
  qword_2569300F0 = 0;
  unk_2569300F8 = sub_23939C6EC;
  qword_256930100 = (uint64_t)sub_23939C738;
  result = _CFRuntimeRegisterClass();
  qword_2569300B8 = result;
  return result;
}

uint64_t sub_23939C660(uint64_t result)
{
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_23939C668(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  void *v6;

  if (result)
  {
    v1 = result;
    v2 = *(_QWORD **)(result + 16);
    if (v2)
    {
      v3 = (_QWORD *)v2[12];
      if (v3)
      {
        do
        {
          v4 = (_QWORD *)*v3;
          operator delete(v3);
          v3 = v4;
        }
        while (v4);
      }
      v5 = (void *)v2[10];
      v2[10] = 0;
      if (v5)
        operator delete(v5);
      v6 = (void *)v2[6];
      if (v6)
      {
        v2[7] = v6;
        operator delete(v6);
      }
      result = MEMORY[0x23B83C4BC](v2, 0x10A0C402D199CC2);
    }
    *(_QWORD *)(v1 + 16) = 0;
  }
  return result;
}

CFStringRef sub_23939C6EC(const void *a1)
{
  const __CFAllocator *v2;
  CFAllocatorRef v3;

  v2 = CFGetAllocator(a1);
  v3 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<OCFramingStations %p [%p]>"), a1, v3);
}

CFStringRef sub_23939C738(const void *a1)
{
  const __CFAllocator *v2;
  CFAllocatorRef v3;

  v2 = CFGetAllocator(a1);
  v3 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<OCFramingStations %p [%p]>"), a1, v3);
}

uint64_t sub_23939C784(uint64_t a1, _QWORD *a2)
{
  int8x8_t v2;
  uint64_t Instance;
  _QWORD *v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _BYTE *v12;
  _BYTE *v13;
  int64_t v14;
  char *v15;
  int v16;
  uint64_t *v17;
  size_t prime;
  uint64_t result;
  BOOL v20;
  unint64_t v21;
  uint8x8_t v22;
  uint64_t v23;
  uint64_t **v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t **v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  float v34;
  float v35;
  _BOOL8 v36;
  unint64_t v37;
  unint64_t v38;
  size_t v39;
  unint64_t v40;
  uint8x8_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  _QWORD *v46;

  if (qword_2569300B0 != -1)
    dispatch_once(&qword_2569300B0, &unk_250AD5BA0);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return 4294967293;
  v6 = (_QWORD *)Instance;
  v7 = operator new(0x80uLL, MEMORY[0x24BEDB6B8]);
  if (!v7)
  {
    v6[2] = 0;
    CFRelease(v6);
    return 4294967293;
  }
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 16);
  v11 = *(_OWORD *)(v9 + 16);
  v10 = *(_OWORD *)(v9 + 32);
  *v7 = *(_OWORD *)v9;
  v7[1] = v11;
  v7[2] = v10;
  *((_QWORD *)v7 + 7) = 0;
  *((_QWORD *)v7 + 8) = 0;
  *((_QWORD *)v7 + 6) = 0;
  v13 = *(_BYTE **)(v9 + 48);
  v12 = *(_BYTE **)(v9 + 56);
  v14 = v12 - v13;
  if (v12 != v13)
  {
    if (v14 < 0)
      abort();
    v15 = (char *)operator new(v12 - v13);
    *((_QWORD *)v8 + 6) = v15;
    v2 = (int8x8_t)&v15[64 * (v14 >> 6)];
    *((int8x8_t *)v8 + 8) = v2;
    memcpy(v15, v13, v14);
    *((int8x8_t *)v8 + 7) = v2;
  }
  v16 = *(_DWORD *)(v9 + 72);
  v8[5] = 0u;
  v17 = (uint64_t *)(v8 + 5);
  *((_DWORD *)v8 + 18) = v16;
  v8[6] = 0u;
  *((_DWORD *)v8 + 28) = *(_DWORD *)(v9 + 112);
  prime = *(_QWORD *)(v9 + 88);
  v46 = a2;
  if (prime != 1)
  {
    if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v2 = *(int8x8_t *)((char *)v8 + 88);
      v20 = prime >= *(_QWORD *)&v2;
      if (prime > *(_QWORD *)&v2)
        goto LABEL_26;
    }
    else
    {
      v2 = 0;
      v20 = 1;
      if (prime)
        goto LABEL_26;
    }
    if (v20)
      goto LABEL_27;
    v21 = vcvtps_u32_f32((float)*((unint64_t *)v8 + 13) / *((float *)v8 + 28));
    if (*(_QWORD *)&v2 < 3uLL || (v22 = (uint8x8_t)vcnt_s8(v2), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
    {
      v21 = std::__next_prime(v21);
    }
    else
    {
      v23 = 1 << -(char)__clz(v21 - 1);
      if (v21 >= 2)
        v21 = v23;
    }
    if (prime <= v21)
      prime = v21;
    if (prime >= *(_QWORD *)&v2)
      goto LABEL_27;
    goto LABEL_26;
  }
  prime = 2;
LABEL_26:
  sub_23938C8F4((uint64_t)(v8 + 5), prime);
LABEL_27:
  v24 = *(uint64_t ***)(v9 + 96);
  if (v24)
  {
    v25 = v8 + 6;
    v26 = *((_QWORD *)v8 + 11);
    do
    {
      v27 = *((unsigned int *)v24 + 4);
      if (v26)
      {
        v28 = (uint8x8_t)vcnt_s8((int8x8_t)v26);
        v28.i16[0] = vaddlv_u8(v28);
        if (v28.u32[0] > 1uLL)
        {
          v2 = (int8x8_t)*((unsigned int *)v24 + 4);
          if (v26 <= v27)
            v2 = (int8x8_t)(v27 % v26);
        }
        else
        {
          v2 = (int8x8_t)(((_DWORD)v26 - 1) & v27);
        }
        v29 = *(uint64_t ***)(*v17 + 8 * *(_QWORD *)&v2);
        if (v29)
        {
          v30 = *v29;
          if (v30)
          {
            if (v28.u32[0] < 2uLL)
            {
              while (1)
              {
                v32 = v30[1];
                if (v32 == v27)
                {
                  if (*((_DWORD *)v30 + 4) == (_DWORD)v27)
                    goto LABEL_87;
                }
                else if ((v32 & (v26 - 1)) != *(_QWORD *)&v2)
                {
                  goto LABEL_49;
                }
                v30 = (uint64_t *)*v30;
                if (!v30)
                  goto LABEL_49;
              }
            }
            do
            {
              v31 = v30[1];
              if (v31 == v27)
              {
                if (*((_DWORD *)v30 + 4) == (_DWORD)v27)
                  goto LABEL_87;
              }
              else
              {
                if (v31 >= v26)
                  v31 %= v26;
                if (v31 != *(_QWORD *)&v2)
                  break;
              }
              v30 = (uint64_t *)*v30;
            }
            while (v30);
          }
        }
      }
LABEL_49:
      v33 = operator new(0x18uLL);
      *v33 = 0;
      v33[1] = v27;
      v33[2] = v24[2];
      v34 = (float)(unint64_t)(*((_QWORD *)v8 + 13) + 1);
      v35 = *((float *)v8 + 28);
      if (!v26 || (float)(v35 * (float)v26) < v34)
      {
        v36 = (v26 & (v26 - 1)) != 0;
        if (v26 < 3)
          v36 = 1;
        v37 = v36 | (2 * v26);
        v38 = vcvtps_u32_f32(v34 / v35);
        if (v37 <= v38)
          v39 = v38;
        else
          v39 = v37;
        if (v39 == 1)
        {
          v39 = 2;
        }
        else if ((v39 & (v39 - 1)) != 0)
        {
          v39 = std::__next_prime(v39);
          v26 = *((_QWORD *)v8 + 11);
        }
        if (v39 > v26)
          goto LABEL_61;
        if (v39 < v26)
        {
          v40 = vcvtps_u32_f32((float)*((unint64_t *)v8 + 13) / *((float *)v8 + 28));
          if (v26 < 3 || (v41 = (uint8x8_t)vcnt_s8((int8x8_t)v26), v41.i16[0] = vaddlv_u8(v41), v41.u32[0] > 1uLL))
          {
            v40 = std::__next_prime(v40);
          }
          else
          {
            v42 = 1 << -(char)__clz(v40 - 1);
            if (v40 >= 2)
              v40 = v42;
          }
          if (v39 <= v40)
            v39 = v40;
          if (v39 < v26)
LABEL_61:
            sub_23938C8F4((uint64_t)(v8 + 5), v39);
        }
        v26 = *((_QWORD *)v8 + 11);
        if ((v26 & (v26 - 1)) != 0)
        {
          if (v26 <= v27)
            v2 = (int8x8_t)(v27 % v26);
          else
            v2 = (int8x8_t)v27;
        }
        else
        {
          v2 = (int8x8_t)(((_DWORD)v26 - 1) & v27);
        }
      }
      v43 = *v17;
      v44 = *(_QWORD **)(*v17 + 8 * *(_QWORD *)&v2);
      if (v44)
      {
        *v33 = *v44;
      }
      else
      {
        *v33 = *v25;
        *v25 = v33;
        *(_QWORD *)(v43 + 8 * *(_QWORD *)&v2) = v25;
        if (!*v33)
          goto LABEL_86;
        v45 = *(_QWORD *)(*v33 + 8);
        if ((v26 & (v26 - 1)) != 0)
        {
          if (v45 >= v26)
            v45 %= v26;
        }
        else
        {
          v45 &= v26 - 1;
        }
        v44 = (_QWORD *)(*v17 + 8 * v45);
      }
      *v44 = v33;
LABEL_86:
      ++*((_QWORD *)v8 + 13);
LABEL_87:
      v24 = (uint64_t **)*v24;
    }
    while (v24);
  }
  result = 0;
  v6[2] = v8;
  *v46 = v6;
  return result;
}

CFTypeRef OCFramingStationsRetain(CFTypeRef cf)
{
  if (cf)
    CFRetain(cf);
  return cf;
}

void OCFramingStationsRelease(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

uint64_t OCFramingStationsStationAt(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;

  if (result)
  {
    v2 = *(_QWORD *)(*(_QWORD *)(result + 16) + 48);
    v3 = *(_QWORD *)(*(_QWORD *)(result + 16) + 56) - v2;
    if (((unint64_t)v3 >> 6) <= a2)
    {
      return 0;
    }
    else
    {
      if (a2 >= (unint64_t)(v3 >> 6))
        abort();
      return v2 + ((unint64_t)a2 << 6);
    }
  }
  return result;
}

uint64_t OCFramingStationsCount(uint64_t result)
{
  if (result)
    return (*(_QWORD *)(*(_QWORD *)(result + 16) + 56) - *(_QWORD *)(*(_QWORD *)(result + 16) + 48)) >> 6;
  return result;
}

uint64_t OCFramingStationsData(uint64_t result)
{
  if (result)
    return *(_QWORD *)(*(_QWORD *)(result + 16) + 48);
  return result;
}

uint64_t OCFramingStationsFindBestUnfinishedStation(uint64_t a1, _DWORD *a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, float32x4_t a7, float32x4_t a8, float32x4_t a9, float32x4_t a10)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  float32x4_t v14;
  float32x4_t v20;
  uint64_t v21;
  char v22;
  float v23;
  float32x2_t *v24;
  int8x16_t v25;
  float32x4_t v26;
  int8x16_t v27;
  float32x2_t v28;
  float32x4_t v29;
  int8x16_t v30;
  float v31;
  uint64_t result;

  if (!a1)
    return 4294967294;
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48);
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56) - v10;
  if ((v11 & 0x3FFFFFFFC0) == 0)
    return 0xFFFFFFFFLL;
  v12 = 0;
  v13 = 0;
  v14 = vmlaq_f32(vmulq_f32(a7, (float32x4_t)0), (float32x4_t)0, a8);
  __asm { FMOV            V5.4S, #-1.0 }
  v20 = vmlaq_f32(vmlaq_f32(v14, _Q5, a9), (float32x4_t)0, a10);
  v21 = (v11 >> 6);
  v22 = 1;
  v23 = 0.07;
LABEL_4:
  v24 = (float32x2_t *)(v10 + (v12 << 6));
  do
  {
    if ((v24[6].i32[0] - 1) <= 1)
    {
      v25 = (int8x16_t)vmulq_f32(v20, vmlaq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a3, COERCE_FLOAT(*(_OWORD *)v24[2].f32)), a4, v24[2], 1), a5, *(float32x4_t *)v24[2].f32, 2), (float32x4_t)0, a6));
      if (vaddv_f32(vadd_f32(*(float32x2_t *)v25.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL))) < -0.7)
      {
        v26 = vaddq_f32(a6, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a3, COERCE_FLOAT(*(_OWORD *)v24->f32)), a4, *v24, 1), a5, *(float32x4_t *)v24->f32, 2));
        v27 = (int8x16_t)vmulq_f32(v20, vsubq_f32(v26, a10));
        v28 = vadd_f32(*(float32x2_t *)v27.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL));
        if (vaddv_f32(v28) > 0.0)
        {
          v29 = vsubq_f32(vmlaq_n_f32(a10, v20, vadd_f32(v28, (float32x2_t)vdup_lane_s32((int32x2_t)v28, 1)).f32[0]), v26);
          v30 = (int8x16_t)vmulq_f32(v29, v29);
          v31 = sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v30.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL))));
          if (v31 < v23)
          {
            v22 = 0;
            v13 = v12++;
            v23 = v31;
            if (v12 != v21)
              goto LABEL_4;
            goto LABEL_15;
          }
        }
      }
    }
    ++v12;
    v24 += 8;
  }
  while (v21 != v12);
  if ((v22 & 1) != 0)
    return 0xFFFFFFFFLL;
LABEL_15:
  result = 0;
  *a2 = v13;
  return result;
}

void OCFramingStationsDefaultCameraTransform(float32x4_t *a1)
{
  float32x4_t v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  uint64_t v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  int8x16_t v20;
  int8x16_t v21;
  int32x4_t v22;
  float32x4_t v23;
  int32x4_t v24;
  float32x4_t v25;
  int8x16_t v26;
  int8x16_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float v31;
  float32x2_t v32;
  float v33;
  float32x2_t v34;
  float v35;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  simd_float2x2 *v42;
  float v43;
  float32x4_t v44;
  float32x4_t v45;
  int v46;
  uint64_t v47;
  float v48;
  __int32 v49;
  int v50;
  __int32 *v51;
  uint64_t i;
  __int32 v53;
  float32x2_t v54;
  float32x2_t v55;
  _QWORD v56[2];
  float32x2_t v57;
  float32x4_t v58;
  float32x2_t v59;
  float v60;
  simd_float4x4 v61;
  unsigned __int128 v62;
  int v63;
  _OWORD v64[2];
  int v65;
  _OWORD v66[6];
  simd_float4x4 **v67;
  uint64_t *v68;
  simd_float4x4 ***v69;
  float *v70;
  simd_float4x4 **v71;
  simd_float4x4 *v72;
  float *v73;
  float *v74;
  _BYTE v75[40];
  int v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  int v84;
  unint64_t v85;
  int v86;
  float v87;
  float v88;
  float v89;
  float v90[3];
  float v91[3];
  float v92[3];
  simd_float4x4 *v93;
  float v94;

  v2 = a1[1];
  LODWORD(v3) = a1[1].i64[1];
  LODWORD(v4) = HIDWORD(a1[1].i64[0]);
  v5 = 1.0
     / sqrtf((float)(vmulq_f32(v2, v2).f32[0] + vmuls_lane_f32(v4, *(float32x2_t *)v2.f32, 1)) + vmuls_lane_f32(v3, v2, 2));
  v6 = v5 * v2.f32[0];
  v7 = vmuls_lane_f32(v5, *(float32x2_t *)v2.f32, 1);
  v8 = vmuls_lane_f32(v5, v2, 2);
  __asm { FMOV            V5.2S, #1.0 }
  v68 = _D5;
  LODWORD(v69) = 1065353216;
  if (fabsf(v6) <= 0.000001)
  {
    if (fabsf(v7) <= 0.000001)
    {
      v16 = 1.0;
      v17 = 1.0;
      v18 = 1.0;
      if (fabsf(v8) <= 0.000001)
        goto LABEL_8;
      v14 = 2;
      v15 = v8;
    }
    else
    {
      v14 = 1;
      v15 = v7;
    }
  }
  else
  {
    v14 = 0;
    v15 = v6;
  }
  *((float *)&v68 + v14) = (float)-(float)((float)(v8 + (float)(v6 + v7)) + (float)((float)-v15 * *((float *)&v68 + v14)))
                         / v15;
  v19 = 1.0
      / sqrtf((float)((float)(*(float *)&v68 * *(float *)&v68) + (float)(*((float *)&v68 + 1) * *((float *)&v68 + 1)))+ (float)(*(float *)&v69 * *(float *)&v69));
  v17 = *(float *)&v68 * v19;
  v16 = *((float *)&v68 + 1) * v19;
  *(float *)&v68 = *(float *)&v68 * v19;
  *((float *)&v68 + 1) = *((float *)&v68 + 1) * v19;
  v18 = *(float *)&v69 * v19;
  *(float *)&v69 = *(float *)&v69 * v19;
LABEL_8:
  v54 = *(float32x2_t *)v2.f32;
  v61.columns[0].i64[0] = (uint64_t)v68;
  v61.columns[0].i32[2] = (int)v69;
  v61.columns[0].f32[3] = (float)(v4 * v18) - (float)(v3 * v16);
  v61.columns[1].f32[0] = (float)(v3 * v17) - (float)(v2.f32[0] * v18);
  v61.columns[1].f32[1] = (float)(v2.f32[0] * v16) - (float)(v4 * v17);
  v93 = &v61;
  v71 = &v93;
  v72 = &v61;
  v62 = 0uLL;
  sub_2393BBEB8((uint64_t)&v62, (uint64_t)&v71);
  v64[0] = __invert_f2((simd_float2x2)v62);
  *(_QWORD *)v75 = &v61;
  *(_QWORD *)&v75[8] = v64;
  memset(v66, 0, 24);
  *(double *)v20.i64 = sub_2393BBF9C((uint64_t)v66, (float **)v75);
  v20.i32[0] = DWORD2(v66[0]);
  v21.i32[0] = DWORD1(v66[1]);
  v22.i64[0] = v61.columns[0].i64[0];
  v23 = (float32x4_t)vzip1q_s32(v22, vdupq_lane_s32(*(int32x2_t *)v61.columns[0].f32, 1));
  v24.i64[0] = *(uint64_t *)((char *)&v61.columns[0].i64[1] + 4);
  v25 = (float32x4_t)vzip1q_s32(v24, vdupq_lane_s32(*(int32x2_t *)((char *)&v61.columns[0].u64[1] + 4), 1));
  v26.i64[0] = *(_QWORD *)&v66[0];
  v27.i64[0] = *(_QWORD *)((char *)v66 + 12);
  v57 = vmla_n_f32(vmla_n_f32(0, *(float32x2_t *)&v66[0], v61.columns[0].f32[0]), *(float32x2_t *)((char *)v66 + 12), v61.columns[0].f32[3]);
  v28 = (float32x4_t)vextq_s8(vextq_s8(v20, v20, 4uLL), v26, 0xCuLL);
  v28.i32[3] = v28.i32[0];
  v29 = vmlaq_f32((float32x4_t)0, v23, v28);
  v30 = (float32x4_t)vextq_s8(vextq_s8(v21, v21, 4uLL), v27, 0xCuLL);
  v30.i32[3] = v30.i32[0];
  v58 = vmlaq_f32(v29, v25, v30);
  v59 = vmla_n_f32(vmla_n_f32(0, *(float32x2_t *)&v66[0], v61.columns[0].f32[2]), *(float32x2_t *)((char *)v66 + 12), v61.columns[1].f32[1]);
  v31 = 0.0;
  v60 = (float)((float)(*((float *)v66 + 2) * v61.columns[0].f32[2]) + 0.0)
      + (float)(*((float *)&v66[1] + 1) * v61.columns[1].f32[1]);
  v55 = 0;
  v56[0] = 0;
  v56[1] = 1065353216;
  *(_QWORD *)&v66[0] = &v57;
  *((_QWORD *)&v66[0] + 1) = (char *)v56 + 4;
  sub_23939D4F4((float *)&v55, (float **)v66);
  if (fabsf(v55.f32[0]) > 0.000001 || fabsf(v55.f32[1]) > 0.000001 || fabsf(*(float *)v56) > 0.000001)
  {
    v35 = 1.0
        / sqrtf((float)((float)(v55.f32[0] * v55.f32[0]) + (float)(v55.f32[1] * v55.f32[1]))+ (float)(*(float *)v56 * *(float *)v56));
    v55.f32[0] = v55.f32[0] * v35;
    v55.f32[1] = v55.f32[1] * v35;
    v31 = *(float *)v56 * v35;
    *(float *)v56 = *(float *)v56 * v35;
    v32 = vneg_f32(v54);
    v33 = -v3;
    v34 = v55;
  }
  else
  {
    v32 = (float32x2_t)0xBF80000000000000;
    v33 = 0.0;
    v34 = (float32x2_t)1065353216;
  }
  _Q0 = vmlaq_n_f32(*a1, a1[1], a1[2].f32[0]);
  v37 = (float)(vmuls_lane_f32(v31, v32, 1) - vmuls_lane_f32(v33, v34, 1)) + _Q0.f32[0];
  v38 = _Q0.f32[1] + (float)((float)(v33 * v34.f32[0]) - (float)(v31 * v32.f32[0]));
  v39 = _Q0.f32[2] + (float)(vmuls_lane_f32(v32.f32[0], v34, 1) - vmuls_lane_f32(v34.f32[0], v32, 1));
  v34.f32[0] = _Q0.f32[0] + v34.f32[0];
  v32.f32[0] = _Q0.f32[0] - v32.f32[0];
  v40 = _Q0.f32[2] - v33;
  v87 = (float)((float)((float)(v37 + v34.f32[0]) + v32.f32[0]) + _Q0.f32[0]) * 0.25;
  v88 = (float)((float)((float)(v38 + (float)(_Q0.f32[1] + v34.f32[1])) + (float)(_Q0.f32[1] - v32.f32[1])) + _Q0.f32[1])
      * 0.25;
  v41 = (float)((float)((float)(v39 + (float)(_Q0.f32[2] + v31)) + v40) + _Q0.f32[2]) * 0.25;
  v92[0] = v37 - v87;
  v92[1] = v38 - v88;
  v92[2] = v39 - v41;
  v91[0] = v34.f32[0] - v87;
  v91[1] = (float)(_Q0.f32[1] + v34.f32[1]) - v88;
  v91[2] = (float)(_Q0.f32[2] + v31) - v41;
  v89 = v41;
  v90[0] = v32.f32[0] - v87;
  v90[1] = (float)(_Q0.f32[1] - v32.f32[1]) - v88;
  v90[2] = v40 - v41;
  *(float *)&v93 = _Q0.f32[0] - v87;
  *((float *)&v93 + 1) = _Q0.f32[1] - v88;
  v94 = _Q0.f32[2] - v41;
  __asm { FMOV            V0.2S, #0.25 }
  v77 = _Q0.i64[0];
  v78 = 1048576000;
  v85 = 0xBE8000003F400000;
  v86 = -1098907648;
  v83 = 0x3F400000BE800000;
  v84 = -1098907648;
  __asm { FMOV            V0.2S, #-0.25 }
  v81 = _Q0.i64[0];
  v82 = 1061158912;
  v79 = _Q0.i64[0];
  v80 = -1098907648;
  v74 = v92;
  *(_QWORD *)&v64[0] = &v85;
  *((_QWORD *)&v64[0] + 1) = &v74;
  v73 = v91;
  *(_QWORD *)&v62 = &v83;
  *((_QWORD *)&v62 + 1) = &v73;
  memset((char *)v66 + 4, 0, 36);
  sub_2393BA8E4((uint64_t)v66 + 4, (uint64_t)v64);
  memset((char *)&v66[2] + 8, 0, 36);
  v42 = (simd_float2x2 *)&v62;
  sub_2393BA8E4((uint64_t)&v66[2] + 8, (uint64_t)&v62);
  v70 = v90;
  v71 = (simd_float4x4 **)&v81;
  v72 = (simd_float4x4 *)&v70;
  *(_QWORD *)v75 = v66;
  memset(&v75[8], 0, 32);
  v76 = 0;
  sub_2393BA8E4((uint64_t)&v75[8], (uint64_t)&v71);
  v67 = &v93;
  v68 = &v79;
  v69 = &v67;
  v61.columns[0].i64[0] = (uint64_t)v75;
  memset(&v61.columns[0].u32[2], 0, 36);
  sub_2393BA8E4((uint64_t)&v61.columns[0].i64[1], (uint64_t)&v68);
  v43 = (float)((float)(*(float *)(*(_QWORD *)v61.columns[0].i64[0] + 36)
                      + *(float *)(*(_QWORD *)v61.columns[0].i64[0] + 72))
              + *(float *)(v61.columns[0].i64[0] + 40))
      + v61.columns[2].f32[2];
  v44 = vaddq_f32(vaddq_f32(vaddq_f32(*(float32x4_t *)(*(_QWORD *)v61.columns[0].i64[0] + 4), *(float32x4_t *)(*(_QWORD *)v61.columns[0].i64[0] + 40)), *(float32x4_t *)(v61.columns[0].i64[0] + 8)), *(float32x4_t *)((char *)v61.columns + 8));
  v45 = vaddq_f32(vaddq_f32(vaddq_f32(*(float32x4_t *)(*(_QWORD *)v61.columns[0].i64[0] + 20), *(float32x4_t *)(*(_QWORD *)v61.columns[0].i64[0] + 56)), *(float32x4_t *)(v61.columns[0].i64[0] + 24)), *(float32x4_t *)((char *)&v61.columns[1] + 8));
  memset(v66, 0, 93);
  *(_QWORD *)((char *)&v66[5] + 4) = 0x300000003;
  v61.columns[0] = (simd_float4)v44;
  v61.columns[1] = (simd_float4)v45;
  v61.columns[2].f32[0] = v43;
  sub_2393BA9D8((uint64_t)v66);
  *(_DWORD *)&v75[32] = v66[2];
  *(_OWORD *)v75 = v66[0];
  *(_OWORD *)&v75[16] = v66[1];
  v64[0] = *(_OWORD *)((char *)&v66[2] + 4);
  v64[1] = *(_OWORD *)((char *)&v66[3] + 4);
  v65 = DWORD1(v66[4]);
  v61.columns[0].i64[0] = (uint64_t)v75;
  v61.columns[0].i64[1] = (uint64_t)v64;
  memset(&v62, 0, 32);
  v63 = 0;
  sub_2393BAAF8((uint64_t)&v62, (float **)&v61);
  v71 = (simd_float4x4 **)&v62;
  v72 = (simd_float4x4 *)&v87;
  v61.columns[0] = (simd_float4)(unint64_t)&v77;
  v61.columns[1].i32[0] = 0;
  sub_23939D4F4(&v61.columns[0].f32[2], (float **)&v71);
  v46 = 0;
  v47 = 0;
  v48 = *(float *)(v61.columns[0].i64[0] + 8);
  v68 = (uint64_t *)vsub_f32(*(float32x2_t *)v61.columns[0].i64[0], *(float32x2_t *)&v61.columns[0].u32[2]);
  *(float *)&v69 = v48 - v61.columns[1].f32[0];
  memset(&v61, 0, sizeof(v61));
  do
  {
    v49 = v42->columns[0].i32[0];
    v42 = (simd_float2x2 *)((char *)v42 + 4);
    v61.columns[0].i32[v47] = v49;
    if (v46 > 1)
      ++v47;
    ++v47;
    if (v46 <= 1)
      ++v46;
    else
      v46 = 0;
  }
  while (v47 != 12);
  v50 = 0;
  v51 = (__int32 *)&v68;
  for (i = 12; i != 16; ++i)
  {
    v53 = *v51++;
    v61.columns[0].i32[i] = v53;
    if (v50 > 1)
      ++i;
    if (v50 <= 1)
      ++v50;
    else
      v50 = 0;
  }
  __invert_f4(v61);
}

float *sub_23939D4F4(float *result, float **a2)
{
  float *v2;
  float *v3;
  float *v4;
  uint64_t v5;
  int v6;

  v2 = result;
  v3 = *a2;
  if (*a2 == result || (v4 = a2[1], v4 == result))
  {
    v6 = 0;
    v5 = 0;
    result = (float *)sub_23939D4F4(&v5);
    *(_QWORD *)v2 = v5;
    *((_DWORD *)v2 + 2) = v6;
  }
  else
  {
    *result = (float)((float)((float)(*v3 * *v4) + 0.0) + (float)(v3[3] * v4[1])) + (float)(v3[6] * v4[2]);
    result[1] = (float)((float)((float)(v3[1] * *v4) + 0.0) + (float)(v3[4] * v4[1])) + (float)(v3[7] * v4[2]);
    result[2] = (float)((float)((float)(v3[2] * *v4) + 0.0) + (float)(v3[5] * v4[1])) + (float)(v3[8] * v4[2]);
  }
  return result;
}

uint64_t OCProxySurfaceCreate(uint64_t a1, _QWORD *a2)
{
  NSObject *v3;
  const char *v4;
  float v5;
  float v6;
  BOOL v8;
  char v9;
  float v10;
  float v11;
  float v12;
  _BOOL4 v13;
  BOOL v14;
  BOOL v15;
  NSObject *v17;
  NSObject *v19;
  NSObject *v20;
  _QWORD *v22;
  _QWORD *v23;
  dispatch_queue_t v24;
  void *v25;
  dispatch_group_t v26;
  void *v27;
  int v28;
  uint64_t v29;
  NSObject *v30;
  double v31;
  NSObject *v32;
  NSObject *v33;
  uint64_t v38;
  float32x4_t v39;
  simd_float4x4 v40;
  float32x4_t v41;
  uint32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  uint32x4_t v47;
  float32x4_t v48;
  float32x2_t v49;
  uint32x2_t v50;
  NSObject *v51;
  NSObject *v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  char v60;
  uint64_t v61;
  char v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char v69;
  uint64_t v70;
  int v71;
  NSObject *v72;
  uint64_t v73;
  int v74;
  __int128 v75;
  unint64_t v76;
  uint8_t v78[4];
  const char *v79;
  __int16 v80;
  int v81;
  _BYTE buf[12];
  uint64_t v83;
  double v84;
  __int128 v85;
  int v86;
  int v87;
  char v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  char v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  simd_float4x4 v96;
  char v97;
  BOOL v98;
  char v99;
  __int128 v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  char v108;
  uint64_t v109;
  int v110;
  __int16 v111;
  int v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  simd_float4x4 v116;

  v115 = *MEMORY[0x24BDAC8D0];
  if (!a1 || !a2)
    goto LABEL_48;
  if (*(_DWORD *)a1 >= 2u)
  {
    if (qword_256930128 != -1)
      dispatch_once(&qword_256930128, &unk_250AD5C30);
    v3 = qword_256930120;
    if (!os_log_type_enabled((os_log_t)qword_256930120, OS_LOG_TYPE_ERROR))
      goto LABEL_48;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "isConfigurationValid";
    LOWORD(v83) = 1026;
    *(_DWORD *)((char *)&v83 + 2) = 46;
    v4 = "%s:%{public}d Invalid pipeline type.";
    goto LABEL_47;
  }
  if (*(_DWORD *)(a1 + 16) >= 5u)
  {
    if (qword_256930128 != -1)
      dispatch_once(&qword_256930128, &unk_250AD5C30);
    v3 = qword_256930120;
    if (!os_log_type_enabled((os_log_t)qword_256930120, OS_LOG_TYPE_ERROR))
      goto LABEL_48;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "isConfigurationValid";
    LOWORD(v83) = 1026;
    *(_DWORD *)((char *)&v83 + 2) = 52;
    v4 = "%s:%{public}d Invalid input type.";
    goto LABEL_47;
  }
  if (*(_DWORD *)(a1 + 20) >= 2u)
  {
    if (qword_256930128 != -1)
      dispatch_once(&qword_256930128, &unk_250AD5C30);
    v3 = qword_256930120;
    if (!os_log_type_enabled((os_log_t)qword_256930120, OS_LOG_TYPE_ERROR))
      goto LABEL_48;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "isConfigurationValid";
    LOWORD(v83) = 1026;
    *(_DWORD *)((char *)&v83 + 2) = 57;
    v4 = "%s:%{public}d Invalid mode type.";
    goto LABEL_47;
  }
  v5 = *(float *)(a1 + 24);
  v6 = fabsf(v5);
  if (v5 < 0.0 && v6 > 0.000001)
  {
    v9 = 0;
  }
  else
  {
    v8 = fabsf(v5 + -1.0) <= 0.000011;
    v9 = v5 <= 1.0 || v8;
  }
  if (*(float *)(a1 + 32) < 0.0001 || !*(_BYTE *)(a1 + 36) || *(float *)(a1 + 40) < 1.0 || !*(_DWORD *)(a1 + 28))
    goto LABEL_43;
  v11 = *(float *)(a1 + 44);
  v10 = *(float *)(a1 + 48);
  v12 = fabsf(v11);
  v13 = v10 > 0.0;
  if (fabsf(v10) <= 0.000001)
    v13 = 1;
  v14 = v12 > 0.000001 && v11 < 0.0;
  v15 = v14 || v10 <= v11;
  if (v15 || !v13)
    goto LABEL_43;
  if (*(float *)(a1 + 72) <= 0.0)
    v9 = 0;
  if (*(float *)(a1 + 64) <= 0.0 || *(float *)(a1 + 68) <= 0.0 || (v9 & 1) == 0)
  {
LABEL_43:
    if (qword_256930128 != -1)
      dispatch_once(&qword_256930128, &unk_250AD5C30);
    v3 = qword_256930120;
    if (!os_log_type_enabled((os_log_t)qword_256930120, OS_LOG_TYPE_ERROR))
      goto LABEL_48;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "isConfigurationValid";
    LOWORD(v83) = 1026;
    *(_DWORD *)((char *)&v83 + 2) = 70;
    v4 = "%s:%{public}d Invalid voxel integrator config.";
LABEL_47:
    _os_log_error_impl(&dword_239388000, v3, OS_LOG_TYPE_ERROR, v4, buf, 0x12u);
LABEL_48:
    if (qword_256930128 != -1)
      dispatch_once(&qword_256930128, &unk_250AD5C30);
    v17 = qword_256930120;
    if (os_log_type_enabled((os_log_t)qword_256930120, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "OCProxySurfaceCreate";
      LOWORD(v83) = 1026;
      *(_DWORD *)((char *)&v83 + 2) = 51;
      _os_log_error_impl(&dword_239388000, v17, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create OCProxySurface - invalid config.", buf, 0x12u);
    }
    return 4294967294;
  }
  if (!*(_DWORD *)(a1 + 96) || !*(_DWORD *)(a1 + 100))
  {
    sub_23939E76C();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "isConfigurationValid";
      LOWORD(v83) = 1026;
      *(_DWORD *)((char *)&v83 + 2) = 76;
      _os_log_error_impl(&dword_239388000, v20, OS_LOG_TYPE_ERROR, "%s:%{public}d Invalid surface sampling config.", buf, 0x12u);
    }
    goto LABEL_83;
  }
  if (*(float *)(a1 + 104) < 0.0)
  {
    sub_23939E76C();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      v31 = *(float *)(a1 + 104);
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "isConfigurationValid";
      v83 = 0x802000000530402;
      v84 = v31;
      _os_log_error_impl(&dword_239388000, v19, OS_LOG_TYPE_ERROR, "%s:%{public}d Invalid value for pointCloudSamplingConfig.sampledPointRandomOffsetStdDev = %{public}f", buf, 0x1Cu);
    }

    goto LABEL_48;
  }
  if (*(_DWORD *)(a1 + 112) >= 3u)
  {
    sub_23939E76C();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "isConfigurationValid";
      LOWORD(v83) = 1026;
      *(_DWORD *)((char *)&v83 + 2) = 89;
      _os_log_error_impl(&dword_239388000, v20, OS_LOG_TYPE_ERROR, "%s:%{public}d Invalid depth rendering config.", buf, 0x12u);
    }
LABEL_83:

    goto LABEL_48;
  }
  if (!*(_DWORD *)(a1 + 116) || !*(_DWORD *)(a1 + 120))
  {
    sub_23939E76C();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "isConfigurationValid";
      LOWORD(v83) = 1026;
      *(_DWORD *)((char *)&v83 + 2) = 96;
      _os_log_error_impl(&dword_239388000, v20, OS_LOG_TYPE_ERROR, "%s:%{public}d Invalid coverage config.", buf, 0x12u);
    }
    goto LABEL_83;
  }
  v22 = operator new(0x50uLL, MEMORY[0x24BEDB6B8]);
  if (!v22)
  {
    if (qword_256930128 != -1)
      dispatch_once(&qword_256930128, &unk_250AD5C30);
    v30 = qword_256930120;
    if (os_log_type_enabled((os_log_t)qword_256930120, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "OCProxySurfaceCreate";
      LOWORD(v83) = 1026;
      *(_DWORD *)((char *)&v83 + 2) = 57;
      _os_log_error_impl(&dword_239388000, v30, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create OCProxySurface - out of memory.", buf, 0x12u);
    }
    return 4294967293;
  }
  v23 = v22;
  *((_OWORD *)v22 + 3) = 0u;
  *((_OWORD *)v22 + 4) = 0u;
  *((_OWORD *)v22 + 1) = 0u;
  *((_OWORD *)v22 + 2) = 0u;
  *(_OWORD *)v22 = 0u;
  *((_BYTE *)v22 + 56) = *(_BYTE *)(a1 + 4);
  v24 = dispatch_queue_create("com.apple.coreocmodules.proxysurfaceserialqueue", 0);
  v25 = (void *)v23[2];
  v23[2] = v24;

  if (!v23[2])
  {
    if (qword_256930128 != -1)
      dispatch_once(&qword_256930128, &unk_250AD5C30);
    v32 = qword_256930120;
    if (os_log_type_enabled((os_log_t)qword_256930120, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "OCProxySurfaceCreate";
      LOWORD(v83) = 1026;
      *(_DWORD *)((char *)&v83 + 2) = 66;
      _os_log_error_impl(&dword_239388000, v32, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create OCProxySurface - failed to create serial queue.", buf, 0x12u);
    }
    goto LABEL_115;
  }
  v26 = dispatch_group_create();
  v27 = (void *)v23[8];
  v23[8] = v26;

  if (!v23[8])
  {
    if (qword_256930128 != -1)
      dispatch_once(&qword_256930128, &unk_250AD5C30);
    v33 = qword_256930120;
    if (os_log_type_enabled((os_log_t)qword_256930120, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "OCProxySurfaceCreate";
      LOWORD(v83) = 1026;
      *(_DWORD *)((char *)&v83 + 2) = 74;
      _os_log_error_impl(&dword_239388000, v33, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create OCProxySurface - failed to create pipeline task group.", buf, 0x12u);
    }
    goto LABEL_115;
  }
  v28 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 >= 2u)
    v28 = 2;
  if (v28 == 1)
  {
    v29 = operator new();
    *(_OWORD *)(v29 + 144) = 0u;
    *(_OWORD *)(v29 + 160) = 0u;
    *(_OWORD *)(v29 + 192) = 0u;
    *(_OWORD *)(v29 + 208) = 0u;
    *(_OWORD *)(v29 + 224) = 0u;
    *(_OWORD *)(v29 + 240) = 0u;
    *(_OWORD *)(v29 + 256) = 0u;
    *(_OWORD *)(v29 + 272) = 0u;
    *(_OWORD *)(v29 + 288) = 0u;
    *(_OWORD *)(v29 + 304) = 0u;
    *(_OWORD *)(v29 + 320) = 0u;
    *(_OWORD *)(v29 + 336) = 0u;
    *(_OWORD *)(v29 + 352) = 0u;
    *(_OWORD *)(v29 + 368) = 0u;
    *(_OWORD *)(v29 + 384) = 0u;
    *(_OWORD *)(v29 + 400) = 0u;
    *(_OWORD *)(v29 + 416) = 0u;
    *(_OWORD *)(v29 + 432) = 0u;
    *(_OWORD *)(v29 + 128) = 0u;
    __asm { FMOV            V6.4S, #3.0 }
    *(_OWORD *)(v29 + 160) = _Q6;
    *(_OWORD *)(v29 + 176) = 0u;
    *(_QWORD *)(v29 + 128) = 3;
    *(_QWORD *)(v29 + 136) = 1063675494;
    *(_QWORD *)(v29 + 188) = 0x3F8000003F7851ECLL;
    *(int32x2_t *)(v29 + 200) = vdup_n_s32(0x186A0u);
    *(_OWORD *)(v29 + 216) = xmmword_2393F9BE8;
    *(_OWORD *)(v29 + 272) = xmmword_2393F9C20;
    *(_OWORD *)(v29 + 288) = unk_2393F9C30;
    *(_OWORD *)(v29 + 256) = unk_2393F9C10;
    *(_OWORD *)(v29 + 80) = 0u;
    *(_OWORD *)(v29 + 96) = 0u;
    *(_QWORD *)v29 = &off_250AD69F0;
    *(_OWORD *)(v29 + 8) = 0u;
    *(_OWORD *)(v29 + 24) = 0u;
    *(_OWORD *)(v29 + 40) = 0u;
    *(_OWORD *)(v29 + 56) = 0u;
    *(_OWORD *)(v29 + 72) = 0u;
    *(_BYTE *)(v29 + 88) = 0;
    *(_OWORD *)(v29 + 96) = 0u;
    *(_OWORD *)(v29 + 112) = 0u;
    *(_OWORD *)(v29 + 112) = 0u;
    *(_DWORD *)(v29 + 144) = 1069547520;
    *(_QWORD *)(v29 + 176) = 0x3C23D70A00002710;
    *(_BYTE *)(v29 + 184) = 1;
    *(_DWORD *)(v29 + 212) = 1065353216;
    *(_OWORD *)(v29 + 240) = xmmword_2393F9C00;
    *(_BYTE *)(v29 + 304) = 1;
    *(_BYTE *)(v29 + 306) = 0;
    *(_OWORD *)(v29 + 312) = xmmword_2393F53A0;
    *(_QWORD *)(v29 + 328) = 0x186A000000000;
    *(_DWORD *)(v29 + 336) = 1;
    *(_QWORD *)(v29 + 340) = 0x40A000003DCCCCCDLL;
    *(_OWORD *)(v29 + 348) = xmmword_2393F53B0;
    *(_OWORD *)(v29 + 364) = xmmword_2393F53C0;
    *(_OWORD *)(v29 + 380) = xmmword_2393F53D0;
    *(_OWORD *)(v29 + 396) = xmmword_2393F53E0;
    *(_QWORD *)(v29 + 416) = 5;
    *(_DWORD *)(v29 + 424) = 1096810496;
    *(_BYTE *)(v29 + 433) = 1;
    *(_DWORD *)(v29 + 436) = 1065353216;
    *(_QWORD *)(v29 + 440) = 0xBD000000FC0;
    *(_OWORD *)(v29 + 448) = 0u;
    *(_OWORD *)(v29 + 464) = 0u;
  }
  else if (v28)
  {
    v29 = 0;
  }
  else
  {
    v29 = operator new();
    *(_QWORD *)(v29 + 40) = 0;
    *(_QWORD *)v29 = &off_250AD6CC0;
    *(_OWORD *)(v29 + 24) = 0u;
    *(_OWORD *)(v29 + 8) = 0u;
    *(_WORD *)(v29 + 40) = 0;
    *(_OWORD *)(v29 + 60) = 0u;
    *(_OWORD *)(v29 + 76) = 0u;
    *(_OWORD *)(v29 + 92) = 0u;
    *(_OWORD *)(v29 + 108) = 0u;
    *(_OWORD *)(v29 + 124) = 0u;
    *(_OWORD *)(v29 + 140) = 0u;
    *(_DWORD *)(v29 + 156) = 0;
    *(_OWORD *)(v29 + 44) = 0u;
  }
  v38 = v23[3];
  v23[3] = v29;
  if (v38)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
    v29 = v23[3];
  }
  if (!v29)
  {
    if (qword_256930128 != -1)
      dispatch_once(&qword_256930128, &unk_250AD5C30);
    v52 = qword_256930120;
    if (os_log_type_enabled((os_log_t)qword_256930120, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "OCProxySurfaceCreate";
      LOWORD(v83) = 1026;
      *(_DWORD *)((char *)&v83 + 2) = 82;
      _os_log_error_impl(&dword_239388000, v52, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create OCProxySurface - failed to create voxelhashing pipeline.", buf, 0x12u);
    }
LABEL_115:
    OCProxySurfaceDestroy((uint64_t)v23);
    return 0xFFFFFFFFLL;
  }
  v40.columns[0] = (simd_float4)*MEMORY[0x24BDAEE00];
  v40.columns[1] = *(simd_float4 *)(MEMORY[0x24BDAEE00] + 16);
  v40.columns[2] = *(simd_float4 *)(MEMORY[0x24BDAEE00] + 32);
  v39 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 16);
  v40.columns[3] = *(simd_float4 *)(MEMORY[0x24BDAEDF8] + 32);
  v41 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
  v42 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v41, vabdq_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32((float32x4_t)v40.columns[0], *(float32x2_t *)v40.columns[0].f32, 1), (float32x4_t)v40.columns[1], *(float32x2_t *)v40.columns[1].f32, 1), (float32x4_t)v40.columns[2], *(float32x2_t *)v40.columns[2].f32, 1), v39)), (int8x16_t)vcgeq_f32(v41,
                                     vabdq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32((float32x4_t)v40.columns[0], v40.columns[0].f32[0]), (float32x4_t)v40.columns[1], v40.columns[1].f32[0]), (float32x4_t)v40.columns[2], v40.columns[2].f32[0]), *MEMORY[0x24BDAEDF8]))), (int8x16_t)vcgeq_f32(v41, vabdq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32((float32x4_t)v40.columns[0], (float32x4_t)v40.columns[0], 2), (float32x4_t)v40.columns[1], (float32x4_t)v40.columns[1], 2), (float32x4_t)v40.columns[2], (float32x4_t)v40.columns[2],
                                       2),
                                     (float32x4_t)v40.columns[3])));
  v42.i32[3] = v42.i32[2];
  if ((vminvq_u32(v42) & 0x80000000) == 0)
    goto LABEL_108;
  v43 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v40.columns[1], 2);
  v44 = (float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)v40.columns[0], (int32x4_t)v40.columns[2]), (int32x4_t)v43);
  v45 = (float32x4_t)vtrn2q_s32((int32x4_t)v40.columns[0], (int32x4_t)v40.columns[1]);
  v45.i32[2] = HIDWORD(*(_QWORD *)(MEMORY[0x24BDAEE00] + 32));
  v46 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)v40.columns[0], (int32x4_t)v40.columns[2]), (int32x4_t)v40.columns[1]);
  v47 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v41, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v46, v40.columns[1].f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.columns[1].f32, 1), v45), v43, v44), v39)), (int8x16_t)vcgeq_f32(v41, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v46, v40.columns[0].f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.columns[0].f32, 1),
                                           v45),
                                         (float32x4_t)vdupq_laneq_s32((int32x4_t)v40.columns[0], 2),
                                         v44),
                                       *MEMORY[0x24BDAEDF8]))),
                      (int8x16_t)vcgeq_f32(v41, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v46, v40.columns[2].f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.columns[2].f32, 1), v45), (float32x4_t)vdupq_laneq_s32((int32x4_t)v40.columns[2], 2), v44), (float32x4_t)v40.columns[3])));
  v47.i32[3] = v47.i32[2];
  if ((vminvq_u32(v47) & 0x80000000) == 0
    || (v48 = vmulq_f32((float32x4_t)v40.columns[0], vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v40.columns[2], (int8x16_t)v40.columns[2], 0xCuLL), (int8x16_t)v40.columns[2], 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v40.columns[1], (int32x4_t)v40.columns[1]), (int8x16_t)v40.columns[1], 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v40.columns[2], (int32x4_t)v40.columns[2]), (int8x16_t)v40.columns[2], 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v40.columns[1], (int8x16_t)v40.columns[1], 0xCuLL), (int8x16_t)v40.columns[1], 8uLL))),
        fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v48, 2), vaddq_f32(v48, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v48.f32, 1))).f32[0]+ -1.0) > 0.000011)|| (v40.columns[3] = *(simd_float4 *)(a1 + 80), v40.columns[3].i32[3] = *(_DWORD *)(MEMORY[0x24BDAEE00] + 60), v49 = (float32x2_t)vdup_n_s32(0x38D1B717u), v50 = (uint32x2_t)vand_s8((int8x8_t)vcge_f32(v49, vabs_f32(vadd_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v40.columns[2], (int8x16_t)v40.columns[2], 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v40.columns[3],
                                                                                    (int8x16_t)v40.columns[3],
                                                                                    8uLL)),
                                            (float32x2_t)0xBF80000080000000))),
                            (int8x8_t)vcge_f32(v49, vabs_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v40.columns[0], (int8x16_t)v40.columns[0], 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v40.columns[1], (int8x16_t)v40.columns[1], 8uLL))))), (vpmin_u32(v50, v50).u32[0] & 0x80000000) == 0))
  {
LABEL_108:
    buf[0] = 0;
    v114 = 0;
    sub_23939E76C();
    v51 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v78 = 136315394;
      v79 = "OCProxySurfaceCreate";
      v80 = 1026;
      v81 = 91;
      _os_log_error_impl(&dword_239388000, v51, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create OCProxySurface - failed to create voxelhashing pipeline config.", v78, 0x12u);
    }
LABEL_110:

    OCProxySurfaceDestroy((uint64_t)v23);
    return 0xFFFFFFFFLL;
  }
  v53 = *(unsigned int *)(a1 + 16);
  if (v53 > 5)
    v54 = 5;
  else
    v54 = dword_2393F5ADC[v53];
  if (*(_DWORD *)(a1 + 20) >= 2u)
    v55 = 2;
  else
    v55 = *(_DWORD *)(a1 + 20);
  v76 = __PAIR64__(v55, v54);
  LODWORD(v56) = *(_DWORD *)(a1 + 24);
  v57 = *(_QWORD *)(a1 + 44);
  v74 = v56;
  v75 = *(_OWORD *)(a1 + 64);
  v58 = *(_DWORD *)(a1 + 28);
  v59 = *(_DWORD *)(a1 + 32);
  v60 = *(_BYTE *)(a1 + 36);
  HIDWORD(v56) = *(_DWORD *)(a1 + 40);
  v73 = v56;
  v61 = *(_QWORD *)(a1 + 96);
  v62 = *(_BYTE *)(a1 + 108);
  v63 = *(_DWORD *)(a1 + 104);
  v64 = *(unsigned int *)(a1 + 112);
  v65 = 0;
  v66 = 0;
  if (v64 <= 2)
  {
    v67 = 8 * v64;
    v65 = *(_QWORD *)((char *)&unk_2393F5AF8 + v67);
    v66 = *(_QWORD *)((char *)&unk_2393F5B10 + v67);
  }
  v116 = __invert_f4(v40);
  v68 = *(_BYTE *)(a1 + 4);
  v69 = *(_BYTE *)(a1 + 124);
  v70 = *(_QWORD *)(a1 + 116);
  v71 = *(_DWORD *)(a1 + 128);
  *(_QWORD *)buf = v76;
  *(_DWORD *)&buf[8] = v74;
  v83 = v57;
  v85 = v75;
  v86 = v58;
  v87 = v59;
  v88 = v60;
  v89 = v73;
  v90 = 0;
  v91 = v61;
  v92 = v62;
  v93 = v63;
  v94 = v65;
  v95 = v66;
  v96 = v116;
  v97 = v68;
  v98 = v55 == 1;
  v99 = v69;
  v100 = xmmword_2393F53A0;
  v101 = 0x186A000000000;
  v102 = 1;
  v103 = 0x40A000003DCCCCCDLL;
  v104 = xmmword_2393F53B0;
  v105 = xmmword_2393F53C0;
  v106 = xmmword_2393F53D0;
  v107 = xmmword_2393F53E0;
  v108 = 0;
  v109 = 5;
  v110 = 1096810496;
  v111 = 0;
  v112 = v71;
  v113 = v70;
  v114 = 1;
  if ((*(unsigned int (**)(_QWORD, _BYTE *))(*(_QWORD *)v23[3] + 16))(v23[3], buf))
  {
    sub_23939E76C();
    v51 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v78 = 136315394;
      v79 = "OCProxySurfaceCreate";
      v80 = 1026;
      v81 = 98;
      _os_log_error_impl(&dword_239388000, v51, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create OCProxySurface - failed to initialize voxelhashing pipeline.", v78, 0x12u);
    }
    goto LABEL_110;
  }
  atomic_store(0, v23 + 9);
  *a2 = v23;
  sub_23939E76C();
  v72 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v78 = 136315394;
    v79 = "OCProxySurfaceCreate";
    v80 = 1026;
    v81 = 107;
    _os_log_impl(&dword_239388000, v72, OS_LOG_TYPE_DEFAULT, "%s:%{public}d OCProxySurfaceCreate succeeded.", v78, 0x12u);
  }

  return 0;
}

uint64_t OCProxySurfaceDestroy(uint64_t a1)
{
  NSObject *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  uint64_t v6;
  NSObject *v7;
  _BOOL4 v8;
  uint64_t result;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (!a1)
    return 4294967294;
  dispatch_sync(*(dispatch_queue_t *)(a1 + 16), &unk_250AD5BC8);
  v2 = *(NSObject **)(a1 + 64);
  if (v2)
    dispatch_group_wait(v2, 0xFFFFFFFFFFFFFFFFLL);
  v3 = *(const void **)(a1 + 32);
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(a1 + 40);
  if (v4)
    CFRelease(v4);
  v5 = *(const void **)(a1 + 48);
  if (v5)
    CFRelease(v5);

  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);

  MEMORY[0x23B83C4BC](a1, 0x10A0C40A52DDF8DLL);
  if (qword_256930128 != -1)
    dispatch_once(&qword_256930128, &unk_250AD5C30);
  v7 = qword_256930120;
  v8 = os_log_type_enabled((os_log_t)qword_256930120, OS_LOG_TYPE_DEFAULT);
  result = 0;
  if (v8)
  {
    v10 = 136315394;
    v11 = "OCProxySurfaceDestroy";
    v12 = 1026;
    v13 = 146;
    _os_log_impl(&dword_239388000, v7, OS_LOG_TYPE_DEFAULT, "%s:%{public}d OCProxySurfaceDestroy succeeded.", (uint8_t *)&v10, 0x12u);
    return 0;
  }
  return result;
}

id sub_23939E76C()
{
  if (qword_256930128 != -1)
    dispatch_once(&qword_256930128, &unk_250AD5C30);
  return (id)qword_256930120;
}

void sub_23939E7B0()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.CoreOCModules", "VoxelHashing");
  v1 = (void *)qword_256930120;
  qword_256930120 = (uint64_t)v0;

}

uint64_t OCProxySurfaceWait(uint64_t a1)
{
  NSObject *v2;
  int v3;
  const char *v4;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    dispatch_sync(*(dispatch_queue_t *)(a1 + 16), &unk_250AD5BC8);
    return 0;
  }
  else
  {
    if (qword_256930128 != -1)
      dispatch_once(&qword_256930128, &unk_250AD5C30);
    v2 = qword_256930120;
    if (os_log_type_enabled((os_log_t)qword_256930120, OS_LOG_TYPE_ERROR))
    {
      v3 = 136315394;
      v4 = "OCProxySurfaceWait";
      v5 = 1026;
      v6 = 173;
      _os_log_error_impl(&dword_239388000, v2, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to wait on OCProxySurface - invalid handle.", (uint8_t *)&v3, 0x12u);
    }
    return 4294967294;
  }
}

uint64_t OCProxySurfaceStart(uint64_t a1)
{
  NSObject *v2;
  int v3;
  const char *v4;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a1)
    return 0;
  if (qword_256930128 != -1)
    dispatch_once(&qword_256930128, &unk_250AD5C30);
  v2 = qword_256930120;
  if (os_log_type_enabled((os_log_t)qword_256930120, OS_LOG_TYPE_ERROR))
  {
    v3 = 136315394;
    v4 = "OCProxySurfaceStart";
    v5 = 1026;
    v6 = 153;
    _os_log_error_impl(&dword_239388000, v2, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to start OCProxySurface - invalid handle.", (uint8_t *)&v3, 0x12u);
  }
  return 4294967294;
}

uint64_t OCProxySurfaceStop(uint64_t a1)
{
  NSObject *v2;
  int v3;
  const char *v4;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a1)
    return 0;
  if (qword_256930128 != -1)
    dispatch_once(&qword_256930128, &unk_250AD5C30);
  v2 = qword_256930120;
  if (os_log_type_enabled((os_log_t)qword_256930120, OS_LOG_TYPE_ERROR))
  {
    v3 = 136315394;
    v4 = "OCProxySurfaceStop";
    v5 = 1026;
    v6 = 163;
    _os_log_error_impl(&dword_239388000, v2, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to stop OCProxySurface - invalid handle.", (uint8_t *)&v3, 0x12u);
  }
  return 4294967294;
}

uint64_t OCProxySurfaceExecutePipeline(uint64_t a1, _QWORD *a2, __int16 a3, int a4, __n128 a5, __n128 a6, __n128 a7, int8x16_t a8, int8x16_t a9, int8x16_t a10, int8x16_t a11, double a12, double a13, double a14, double a15)
{
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  uint32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  uint32x4_t v32;
  float32x4_t v33;
  float32x2_t v34;
  uint32x2_t v35;
  NSObject *v36;
  const char *v37;
  uint64_t v38;
  uint32x2_t v40;
  double v42;
  NSObject *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  NSObject *v52;
  NSObject *v53;
  NSObject *v54;
  NSObject *v55;
  uint64_t v56;
  int v57;
  _BYTE v58[64];
  _QWORD v59[4];
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  int v69;
  int v70;
  __int16 v71;
  _QWORD block[4];
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  double v81;
  int v82;
  int v83;
  __int16 v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  int v88;
  _QWORD v89[2];
  _OWORD v90[3];
  simd_float4x4 buf;
  uint64_t v92;

  v92 = *MEMORY[0x24BDAC8D0];
  v90[0] = a9;
  v90[1] = a10;
  v90[2] = a11;
  *(double *)v89 = a13;
  *(double *)&v89[1] = a14;
  if (!a1)
  {
    if (qword_256930128 != -1)
      dispatch_once(&qword_256930128, &unk_250AD5C30);
    v36 = qword_256930120;
    if (!os_log_type_enabled((os_log_t)qword_256930120, OS_LOG_TYPE_ERROR))
      return 4294967294;
    buf.columns[0].i32[0] = 136315394;
    *(uint64_t *)((char *)buf.columns[0].i64 + 4) = (uint64_t)"isValidInputForExecutePipeline";
    buf.columns[0].i16[6] = 1026;
    *(__int32 *)((char *)&buf.columns[0].i32[3] + 2) = 198;
    v37 = "%s:%{public}d Failed to run OCProxySurface pipeline - invalid handle.";
    goto LABEL_19;
  }
  if (!a2)
  {
    if (qword_256930128 != -1)
      dispatch_once(&qword_256930128, &unk_250AD5C30);
    v36 = qword_256930120;
    if (!os_log_type_enabled((os_log_t)qword_256930120, OS_LOG_TYPE_ERROR))
      return 4294967294;
    buf.columns[0].i32[0] = 136315394;
    *(uint64_t *)((char *)buf.columns[0].i64 + 4) = (uint64_t)"isValidInputForExecutePipeline";
    buf.columns[0].i16[6] = 1026;
    *(__int32 *)((char *)&buf.columns[0].i32[3] + 2) = 203;
    v37 = "%s:%{public}d Failed to run OCProxySurface pipeline - invalid pointcloud.";
    goto LABEL_19;
  }
  v21 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32((float32x4_t)a5, a5.n128_f32[0]), (float32x4_t)a6, a6.n128_f32[0]), (float32x4_t)a7, a7.n128_f32[0]);
  v22 = vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32((float32x4_t)a5, (float32x2_t)a5.n128_u64[0], 1), (float32x4_t)a6, (float32x2_t)a6.n128_u64[0], 1), (float32x4_t)a7, (float32x2_t)a7.n128_u64[0], 1);
  v23 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32((float32x4_t)a5, (float32x4_t)a5, 2), (float32x4_t)a6, (float32x4_t)a6, 2), (float32x4_t)a7, (float32x4_t)a7, 2);
  v24 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 16);
  v25 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 32);
  v26 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
  v27 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v26, vabdq_f32(v22, v24)), (int8x16_t)vcgeq_f32(v26, vabdq_f32(v21, *MEMORY[0x24BDAEDF8]))), (int8x16_t)vcgeq_f32(v26, vabdq_f32(v23, v25)));
  v27.i32[3] = v27.i32[2];
  if ((vminvq_u32(v27) & 0x80000000) != 0)
  {
    v28 = (float32x4_t)vdupq_laneq_s32((int32x4_t)a6, 2);
    v29 = (float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)a5, (int32x4_t)a7), (int32x4_t)v28);
    v30 = (float32x4_t)vtrn2q_s32((int32x4_t)a5, (int32x4_t)a6);
    v30.i32[2] = a7.n128_i32[1];
    v31 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)a5, (int32x4_t)a7), (int32x4_t)a6);
    v32 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v26, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v31, a6.n128_f32[0]), (float32x4_t)vdupq_lane_s32((int32x2_t)a6.n128_u64[0], 1), v30), v28, v29), v24)), (int8x16_t)vcgeq_f32(v26, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v31, a5.n128_f32[0]), (float32x4_t)vdupq_lane_s32((int32x2_t)a5.n128_u64[0], 1),
                                             v30),
                                           (float32x4_t)vdupq_laneq_s32((int32x4_t)a5, 2),
                                           v29),
                                         *MEMORY[0x24BDAEDF8]))),
                        (int8x16_t)vcgeq_f32(v26, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v31, a7.n128_f32[0]), (float32x4_t)vdupq_lane_s32((int32x2_t)a7.n128_u64[0], 1), v30), (float32x4_t)vdupq_laneq_s32((int32x4_t)a7, 2), v29), v25)));
    v32.i32[3] = v32.i32[2];
    if ((vminvq_u32(v32) & 0x80000000) != 0)
    {
      v33 = vmulq_f32((float32x4_t)a5, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)a7, (int8x16_t)a7, 0xCuLL), (int8x16_t)a7, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a6, (int32x4_t)a6), (int8x16_t)a6, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a7, (int32x4_t)a7), (int8x16_t)a7, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)a6, (int8x16_t)a6, 0xCuLL), (int8x16_t)a6, 8uLL)));
      if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v33, 2), vaddq_f32(v33, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.f32, 1))).f32[0]+ -1.0) <= 0.000011)
      {
        v34 = (float32x2_t)vdup_n_s32(0x38D1B717u);
        v35 = (uint32x2_t)vand_s8((int8x8_t)vcge_f32(v34, vabs_f32(vadd_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a7, (int8x16_t)a7, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(a8, a8, 8uLL)), (float32x2_t)0xBF80000080000000))), (int8x8_t)vcge_f32(v34, vabs_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a5, (int8x16_t)a5, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(
                                                                                         (int8x16_t)a6,
                                                                                         (int8x16_t)a6,
                                                                                         8uLL)))));
        if ((vpmin_u32(v35, v35).u32[0] & 0x80000000) != 0)
        {
          v40 = (uint32x2_t)vand_s8((int8x8_t)vcge_f32(v34, vabs_f32(vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(a10, a10, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(a11, a11, 8uLL)), (float32x2_t)0xBF80000080000000))), (int8x8_t)vcge_f32(v34, vabs_f32((float32x2_t)*(_OWORD *)&vextq_s8(a9, a9, 4uLL))));
          if ((vpmin_u32(v40, v40).u32[0] & 0x80000000) == 0)
          {
            if (qword_256930128 != -1)
              dispatch_once(&qword_256930128, &unk_250AD5C30);
            v36 = qword_256930120;
            if (!os_log_type_enabled((os_log_t)qword_256930120, OS_LOG_TYPE_ERROR))
              return 4294967294;
            buf.columns[0].i32[0] = 136315394;
            *(uint64_t *)((char *)buf.columns[0].i64 + 4) = (uint64_t)"isValidInputForExecutePipeline";
            buf.columns[0].i16[6] = 1026;
            *(__int32 *)((char *)&buf.columns[0].i32[3] + 2) = 215;
            v37 = "%s:%{public}d Failed to run OCProxySurface pipeline - invalid camera intrinsics.";
            goto LABEL_19;
          }
          if (a13 < 0.0 || fabs(a13) <= 0.000000999999997 || a14 < 0.0 || fabs(a14) <= 0.000000999999997)
          {
            if (qword_256930128 != -1)
              dispatch_once(&qword_256930128, &unk_250AD5C30);
            v36 = qword_256930120;
            if (!os_log_type_enabled((os_log_t)qword_256930120, OS_LOG_TYPE_ERROR))
              return 4294967294;
            buf.columns[0].i32[0] = 136315394;
            *(uint64_t *)((char *)buf.columns[0].i64 + 4) = (uint64_t)"isValidInputForExecutePipeline";
            buf.columns[0].i16[6] = 1026;
            *(__int32 *)((char *)&buf.columns[0].i32[3] + 2) = 222;
            v37 = "%s:%{public}d Failed to run OCProxySurface pipeline - invalid color image dimensions.";
            goto LABEL_19;
          }
          if (a15 < 0.0 || (v42 = COERCE_DOUBLE(atomic_load((unint64_t *)(a1 + 72))), v42 > a15))
          {
            if (qword_256930128 != -1)
              dispatch_once(&qword_256930128, &unk_250AD5C30);
            v36 = qword_256930120;
            if (!os_log_type_enabled((os_log_t)qword_256930120, OS_LOG_TYPE_ERROR))
              return 4294967294;
            buf.columns[0].i32[0] = 136315394;
            *(uint64_t *)((char *)buf.columns[0].i64 + 4) = (uint64_t)"isValidInputForExecutePipeline";
            buf.columns[0].i16[6] = 1026;
            *(__int32 *)((char *)&buf.columns[0].i32[3] + 2) = 227;
            v37 = "%s:%{public}d Failed to run OCProxySurface pipeline - invalid timestamp.";
            goto LABEL_19;
          }
          *(__n128 *)v58 = a5;
          *(__n128 *)&v58[16] = a6;
          *(__n128 *)&v58[32] = a7;
          *(int8x16_t *)&v58[48] = a8;
          if (dispatch_group_wait(*(dispatch_group_t *)(a1 + 64), 0))
          {
            if (qword_256930128 != -1)
              dispatch_once(&qword_256930128, &unk_250AD5C30);
            v45 = qword_256930120;
            if (os_log_type_enabled((os_log_t)qword_256930120, OS_LOG_TYPE_DEBUG))
            {
              buf.columns[0].i32[0] = 136315394;
              *(uint64_t *)((char *)buf.columns[0].i64 + 4) = (uint64_t)"OCProxySurfaceExecutePipeline";
              buf.columns[0].i16[6] = 1026;
              *(__int32 *)((char *)&buf.columns[0].i32[3] + 2) = 247;
              _os_log_debug_impl(&dword_239388000, v45, OS_LOG_TYPE_DEBUG, "%s:%{public}d Active pipeline task in queue, dropping input frame.", (uint8_t *)&buf, 0x12u);
            }
            return 0xFFFFFFFFLL;
          }
          v46 = -1431655765 * ((a2[13] - a2[12]) >> 4);
          v47 = OCPointCloudPoints((uint64_t)a2);
          v48 = OCPointCloudPointSupplements((uint64_t)a2);
          if (!v46 || !v47 || !v48)
          {
            if (qword_256930128 != -1)
              dispatch_once(&qword_256930128, &unk_250AD5C30);
            v52 = qword_256930120;
            if (os_log_type_enabled((os_log_t)qword_256930120, OS_LOG_TYPE_ERROR))
            {
              buf.columns[0].i32[0] = 136315394;
              *(uint64_t *)((char *)buf.columns[0].i64 + 4) = (uint64_t)"OCProxySurfaceExecutePipeline";
              buf.columns[0].i16[6] = 1026;
              *(__int32 *)((char *)&buf.columns[0].i32[3] + 2) = 256;
              _os_log_error_impl(&dword_239388000, v52, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to run OCProxySurface pipeline - invalid pointcloud.", (uint8_t *)&buf, 0x12u);
              return 0xFFFFFFFFLL;
            }
            return 0xFFFFFFFFLL;
          }
          v57 = v46;
          v56 = v48;
          v85 = 0;
          v86 = &v85;
          v87 = 0x2020000000;
          v88 = 0;
          if ((a3 & 0x100) == 0)
            goto LABEL_71;
          v49 = *(_QWORD *)(a1 + 24);
          buf = __invert_f4(*(simd_float4x4 *)v58);
          v50 = (*(uint64_t (**)(uint64_t, simd_float4x4 *, _OWORD *, _QWORD *))(*(_QWORD *)v49 + 48))(v49, &buf, v90, v89);
          switch(v50)
          {
            case 0:
              goto LABEL_71;
            case 2:
              v51 = -4;
              break;
            case 4:
              v51 = -2;
              break;
            default:
              v51 = -1;
              break;
          }
          *((_DWORD *)v86 + 6) = v51;
          if (qword_256930128 != -1)
            dispatch_once(&qword_256930128, &unk_250AD5C30);
          v53 = qword_256930120;
          if (os_log_type_enabled((os_log_t)qword_256930120, OS_LOG_TYPE_ERROR))
          {
            buf.columns[0].i32[0] = 136315394;
            *(uint64_t *)((char *)buf.columns[0].i64 + 4) = (uint64_t)"OCProxySurfaceExecutePipeline";
            buf.columns[0].i16[6] = 1026;
            *(__int32 *)((char *)&buf.columns[0].i32[3] + 2) = 268;
            _os_log_error_impl(&dword_239388000, v53, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to render depth image.", (uint8_t *)&buf, 0x12u);
            if (*(_BYTE *)(a1 + 56))
              goto LABEL_64;
          }
          else
          {
LABEL_71:
            if (*(_BYTE *)(a1 + 56))
            {
LABEL_64:
              CFRetain(a2);
              dispatch_group_enter(*(dispatch_group_t *)(a1 + 64));
              v54 = *(NSObject **)(a1 + 16);
              block[0] = MEMORY[0x24BDAC760];
              block[1] = 3221225472;
              block[2] = sub_23939F45C;
              block[3] = &unk_250AD5BE8;
              v73 = *(_OWORD *)v58;
              v74 = *(_OWORD *)&v58[16];
              v75 = *(_OWORD *)&v58[32];
              v76 = *(_OWORD *)&v58[48];
              v77 = a1;
              v78 = v47;
              v79 = v56;
              v80 = a2;
              v84 = a3;
              v82 = v57;
              v83 = a4;
              v81 = a15;
              dispatch_async(v54, block);
LABEL_68:
              v38 = *((unsigned int *)v86 + 6);
              _Block_object_dispose(&v85, 8);
              return v38;
            }
          }
          v55 = *(NSObject **)(a1 + 16);
          v59[0] = MEMORY[0x24BDAC760];
          v59[1] = 3221225472;
          v59[2] = sub_23939F520;
          v59[3] = &unk_250AD5C10;
          v60 = *(_OWORD *)v58;
          v61 = *(_OWORD *)&v58[16];
          v62 = *(_OWORD *)&v58[32];
          v63 = *(_OWORD *)&v58[48];
          v66 = v47;
          v67 = v56;
          v64 = &v85;
          v65 = a1;
          v71 = a3;
          v69 = v57;
          v70 = a4;
          v68 = a15;
          dispatch_sync(v55, v59);
          goto LABEL_68;
        }
      }
    }
  }
  if (qword_256930128 != -1)
    dispatch_once(&qword_256930128, &unk_250AD5C30);
  v36 = qword_256930120;
  if (!os_log_type_enabled((os_log_t)qword_256930120, OS_LOG_TYPE_ERROR))
    return 4294967294;
  buf.columns[0].i32[0] = 136315394;
  *(uint64_t *)((char *)buf.columns[0].i64 + 4) = (uint64_t)"isValidInputForExecutePipeline";
  buf.columns[0].i16[6] = 1026;
  *(__int32 *)((char *)&buf.columns[0].i32[3] + 2) = 209;
  v37 = "%s:%{public}d Failed to run OCProxySurface pipeline - invalid camera to world transform.";
LABEL_19:
  _os_log_error_impl(&dword_239388000, v36, OS_LOG_TYPE_ERROR, v37, (uint8_t *)&buf, 0x12u);
  return 4294967294;
}

void sub_23939F440(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 256), 8);
  _Unwind_Resume(a1);
}

void sub_23939F45C(uint64_t a1)
{
  const void *v2;

  kdebug_trace();
  (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 96) + 24) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 24), a1 + 32, *(unsigned int *)(a1 + 136), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112));
  v2 = *(const void **)(a1 + 120);
  if (v2)
    CFRelease(v2);
  if (*(_BYTE *)(a1 + 144) || *(_BYTE *)(a1 + 145))
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 96) + 24) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 24), *(unsigned int *)(a1 + 140));
  atomic_store(*(_QWORD *)(a1 + 128), (unint64_t *)(*(_QWORD *)(a1 + 96) + 72));
  kdebug_trace();
  dispatch_group_leave(*(dispatch_group_t *)(*(_QWORD *)(a1 + 96) + 64));
}

uint64_t sub_23939F520(uint64_t a1)
{
  int v2;
  int v3;
  unsigned int v4;
  int v5;

  kdebug_trace();
  v2 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 104) + 24)
                                                                          + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 24), a1 + 32, *(unsigned int *)(a1 + 136), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120));
  if (v2)
  {
    if (v2 == 2)
    {
      v3 = -4;
    }
    else if (v2 == 4)
    {
      v3 = -2;
    }
    else
    {
      v3 = -1;
    }
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 24) = v3;
  }
  if (*(_BYTE *)(a1 + 144) || *(_BYTE *)(a1 + 145))
  {
    v4 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 104) + 24) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 24), *(unsigned int *)(a1 + 140));
    if (v4 > 4)
      v5 = -1;
    else
      v5 = dword_2393F5B28[v4];
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 24) = v5;
  }
  atomic_store(*(_QWORD *)(a1 + 128), (unint64_t *)(*(_QWORD *)(a1 + 104) + 72));
  return kdebug_trace();
}

uint64_t OCProxySurfaceGetVoxelCloud(uint64_t a1)
{
  uint64_t *v1;
  const void *v2;
  NSObject *v4;
  unsigned int v5;
  __int128 v6;
  float32x4_t v7;
  __n128 v8;
  float32x4_t v9;
  int8x16_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    v1 = (uint64_t *)(a1 + 32);
    v2 = *(const void **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    (*(void (**)(unsigned int *__return_ptr))(**(_QWORD **)(a1 + 24) + 72))(&v5);
    OCVoxelCloudCreateFromOCPoints(v5, *(uint64_t *)((char *)&v6 + 4), v1, *((float *)&v6 + 3), v7, v8, v9, v10);
    if (v2)
      CFRelease(v2);
    return *v1;
  }
  else
  {
    if (qword_256930128 != -1)
      dispatch_once(&qword_256930128, &unk_250AD5C30);
    v4 = qword_256930120;
    if (os_log_type_enabled((os_log_t)qword_256930120, OS_LOG_TYPE_ERROR))
    {
      v5 = 136315394;
      *(_QWORD *)&v6 = "OCProxySurfaceGetVoxelCloud";
      WORD4(v6) = 1026;
      *(_DWORD *)((char *)&v6 + 10) = 332;
      _os_log_error_impl(&dword_239388000, v4, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to get voxelcloud - invalid handle.", (uint8_t *)&v5, 0x12u);
    }
    return 0;
  }
}

uint64_t OCProxySurfaceGetDebugVoxelCloud(uint64_t a1)
{
  uint64_t *v1;
  const void *v2;
  NSObject *v4;
  float v5;
  _BYTE v6[28];
  __n128 v7;
  float32x4_t v8;
  int8x16_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    v1 = (uint64_t *)(a1 + 40);
    v2 = *(const void **)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(float *__return_ptr))(**(_QWORD **)(a1 + 24) + 64))(&v5);
    OCVoxelCloudCreateFromOCVoxels(*(unsigned int *)v6, *(const void **)&v6[4], v1, v5, *(float32x4_t *)&v6[12], v7, v8, v9);
    if (v2)
      CFRelease(v2);
    return *v1;
  }
  else
  {
    if (qword_256930128 != -1)
      dispatch_once(&qword_256930128, &unk_250AD5C30);
    v4 = qword_256930120;
    if (os_log_type_enabled((os_log_t)qword_256930120, OS_LOG_TYPE_ERROR))
    {
      v5 = 4.8151e-34;
      *(_QWORD *)v6 = "OCProxySurfaceGetDebugVoxelCloud";
      *(_WORD *)&v6[8] = 1026;
      *(_DWORD *)&v6[10] = 354;
      _os_log_error_impl(&dword_239388000, v4, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to get debug voxelcloud - invalid handle.", (uint8_t *)&v5, 0x12u);
    }
    return 0;
  }
}

float32x4_t *OCProxySurfaceGetPointCloud(uint64_t a1)
{
  float32x4_t **v1;
  const void *v2;
  NSObject *v4;
  unsigned int v5;
  __int128 v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  int8x16_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    v1 = (float32x4_t **)(a1 + 48);
    v2 = *(const void **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;
    (*(void (**)(unsigned int *__return_ptr))(**(_QWORD **)(a1 + 24) + 72))(&v5);
    OCPointCloudCreateFromOCPoints(v5, *(uint64_t *)((char *)&v6 + 4), v1, *((float32_t *)&v6 + 3), v7, v8, v9, v10);
    if (v2)
      CFRelease(v2);
    return *v1;
  }
  else
  {
    if (qword_256930128 != -1)
      dispatch_once(&qword_256930128, &unk_250AD5C30);
    v4 = qword_256930120;
    if (os_log_type_enabled((os_log_t)qword_256930120, OS_LOG_TYPE_ERROR))
    {
      v5 = 136315394;
      *(_QWORD *)&v6 = "OCProxySurfaceGetPointCloud";
      WORD4(v6) = 1026;
      *(_DWORD *)((char *)&v6 + 10) = 375;
      _os_log_error_impl(&dword_239388000, v4, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to get pointcloud - invalid handle.", (uint8_t *)&v5, 0x12u);
    }
    return 0;
  }
}

__CVBuffer *OCProxySurfaceCreateDepthImage(uint64_t a1)
{
  CFNumberRef v2;
  __CVBuffer *v3;
  __CVBuffer *v4;
  NSObject *v5;
  NSObject *v6;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    if (qword_256930128 != -1)
      dispatch_once(&qword_256930128, &unk_250AD5C30);
    v5 = qword_256930120;
    if (os_log_type_enabled((os_log_t)qword_256930120, OS_LOG_TYPE_ERROR))
    {
      v8 = 136315394;
      v9 = "OCProxySurfaceCreateDepthImage";
      v10 = 1026;
      v11 = 396;
      _os_log_error_impl(&dword_239388000, v5, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to get depth image - invalid handle.", (uint8_t *)&v8, 0x12u);
    }
    return 0;
  }
  v2 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberDoubleType, (const void *)(a1 + 72));
  v3 = (__CVBuffer *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 88))(*(_QWORD *)(a1 + 24));
  if (!v3)
  {
    if (qword_256930128 != -1)
      dispatch_once(&qword_256930128, &unk_250AD5C30);
    v6 = qword_256930120;
    if (os_log_type_enabled((os_log_t)qword_256930120, OS_LOG_TYPE_ERROR))
    {
      v8 = 136315394;
      v9 = "OCProxySurfaceCreateDepthImage";
      v10 = 1026;
      v11 = 406;
      _os_log_error_impl(&dword_239388000, v6, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to get depth image from voxelhashing pipeline.", (uint8_t *)&v8, 0x12u);
      if (!v2)
        return 0;
    }
    else if (!v2)
    {
      return 0;
    }
    CFRelease(v2);
    return 0;
  }
  v4 = v3;
  CVBufferSetAttachment(v3, CFSTR("Timestamp"), v2, kCVAttachmentMode_ShouldPropagate);
  if (v2)
    CFRelease(v2);
  return v4;
}

__CVBuffer *OCProxySurfaceCreateNormalImage(uint64_t a1)
{
  CFNumberRef v2;
  __CVBuffer *v3;
  __CVBuffer *v4;
  NSObject *v5;
  NSObject *v6;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    if (qword_256930128 != -1)
      dispatch_once(&qword_256930128, &unk_250AD5C30);
    v5 = qword_256930120;
    if (os_log_type_enabled((os_log_t)qword_256930120, OS_LOG_TYPE_ERROR))
    {
      v8 = 136315394;
      v9 = "OCProxySurfaceCreateNormalImage";
      v10 = 1026;
      v11 = 424;
      _os_log_error_impl(&dword_239388000, v5, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to get normal image - invalid handle.", (uint8_t *)&v8, 0x12u);
    }
    return 0;
  }
  v2 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberDoubleType, (const void *)(a1 + 72));
  v3 = (__CVBuffer *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 96))(*(_QWORD *)(a1 + 24));
  if (!v3)
  {
    if (qword_256930128 != -1)
      dispatch_once(&qword_256930128, &unk_250AD5C30);
    v6 = qword_256930120;
    if (os_log_type_enabled((os_log_t)qword_256930120, OS_LOG_TYPE_ERROR))
    {
      v8 = 136315394;
      v9 = "OCProxySurfaceCreateNormalImage";
      v10 = 1026;
      v11 = 433;
      _os_log_error_impl(&dword_239388000, v6, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to get normal image from voxelhashing pipeline.", (uint8_t *)&v8, 0x12u);
      if (!v2)
        return 0;
    }
    else if (!v2)
    {
      return 0;
    }
    CFRelease(v2);
    return 0;
  }
  v4 = v3;
  CVBufferSetAttachment(v3, CFSTR("Timestamp"), v2, kCVAttachmentMode_ShouldPropagate);
  if (v2)
    CFRelease(v2);
  return v4;
}

uint64_t OCProxySurfaceCoverageGuideAddCameraShot(uint64_t a1, __n128 a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7, __n128 a8)
{
  int v9;
  int v10;
  uint64_t v11;
  NSObject *v13;
  _BYTE v17[64];
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  _BYTE v21[18];
  __n128 v22;
  __n128 v23;
  simd_float4x4 v24;
  simd_float4x4 v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    *(__n128 *)&v17[32] = a7;
    *(__n128 *)&v17[48] = a8;
    *(__n128 *)v17 = a5;
    *(__n128 *)&v17[16] = a6;
    v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 112))(*(_QWORD *)(a1 + 24));
    v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 120))(*(_QWORD *)(a1 + 24));
    v11 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)buf = v9;
    LODWORD(v19) = v10;
    *(__n128 *)&v21[2] = a2;
    v22 = a3;
    v23 = a4;
    v24 = *(simd_float4x4 *)v17;
    v25 = __invert_f4(*(simd_float4x4 *)v17);
    (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v11 + 128))(v11, buf);
    return 0;
  }
  else
  {
    if (qword_256930128 != -1)
      dispatch_once(&qword_256930128, &unk_250AD5C30);
    v13 = qword_256930120;
    if (os_log_type_enabled((os_log_t)qword_256930120, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v19 = "OCProxySurfaceCoverageGuideAddCameraShot";
      v20 = 1026;
      *(_DWORD *)v21 = 452;
      _os_log_error_impl(&dword_239388000, v13, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to add camera shot - invalid handle.", buf, 0x12u);
    }
    return 4294967294;
  }
}

void OCProxySurfaceCreateResults(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int *v7;
  char *v8;
  size_t v9;
  char *v10;
  uint64_t v11;
  float32x4_t v12;
  float32x4_t v13;
  int v14;
  float32x4_t v15;
  void *v16;
  int v17;
  NSObject *v18;
  int *v19;
  NSObject *v20;
  const void *v21;
  uint64_t v22;
  void *v23;
  int v24;
  NSObject *v25;
  const void *v26;
  uint64_t v27;
  void *BaseAddress;
  int v29;
  NSObject *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _BYTE buffer[12];
  __int16 v38;
  int v39;
  uint8_t buf[4];
  __int128 v41;
  const void *v42;
  void *__p;
  int *v44;
  int v45;
  unsigned int v46;
  const void *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    kdebug_trace();
    (*(void (**)(uint8_t *__return_ptr))(**(_QWORD **)(a1 + 24) + 104))(buf);
    v4 = *(_QWORD *)((char *)&v41 + 4);
    if (!*(_QWORD *)((char *)&v41 + 4) || (v5 = *(unsigned int *)buf, !*(_DWORD *)buf))
    {
      kdebug_trace();
      a2[4] = 0u;
      a2[5] = 0u;
      a2[2] = 0u;
      a2[3] = 0u;
      *a2 = 0u;
      a2[1] = 0u;
      v19 = (int *)__p;
      if (!__p)
        return;
      goto LABEL_23;
    }
    v6 = (int *)__p;
    v7 = v44;
    DWORD2(v32) = v45;
    v8 = (char *)operator new(48 * *(unsigned int *)buf);
    v9 = 48 * ((48 * v5 - 48) / 0x30uLL) + 48;
    bzero(v8, v9);
    v10 = v8 + 32;
    v11 = v4 + 16;
    v12 = (float32x4_t)vdupq_n_s32(0x437F0000u);
    if (v6 == v7)
    {
      do
      {
        *((_OWORD *)v10 - 2) = *(_OWORD *)(v11 - 16);
        *((_OWORD *)v10 - 1) = *(_OWORD *)v11;
        v15 = vminnmq_f32(vmaxnmq_f32(vrndaq_f32(vmulq_f32(*(float32x4_t *)(v11 + 16), v12)), (float32x4_t)0), v12);
        *(_QWORD *)v10 = v15.f32[3] | (v15.f32[1] << 16) | (v15.f32[0] << 24) | (v15.f32[2] << 8);
        v10 += 48;
        v11 += 48;
        --v5;
      }
      while (v5);
    }
    else
    {
      do
      {
        *((_OWORD *)v10 - 2) = *(_OWORD *)(v11 - 16);
        *((_OWORD *)v10 - 1) = *(_OWORD *)v11;
        v13 = vminnmq_f32(vmaxnmq_f32(vrndaq_f32(vmulq_f32(*(float32x4_t *)(v11 + 16), v12)), (float32x4_t)0), v12);
        *(_DWORD *)v10 = v13.f32[3] | (v13.f32[1] << 16) | (v13.f32[0] << 24) | (v13.f32[2] << 8);
        v14 = *v6++;
        *((_DWORD *)v10 + 1) = v14;
        v10 += 48;
        v11 += 48;
        --v5;
      }
      while (v5);
    }
    *(_QWORD *)buffer = 0;
    if (sub_23938BFB0(2021227107, 48 * (v9 / 0x30), (IOSurfaceRef *)buffer)
      || (v16 = IOSurfaceGetBaseAddress(*(IOSurfaceRef *)buffer),
          memcpy(v16, v8, 48 * (v9 / 0x30)),
          v17 = CVDataBufferCreateWithIOSurface(),
          CFRelease(*(CFTypeRef *)buffer),
          v17))
    {
      if (qword_256930128 != -1)
        dispatch_once(&qword_256930128, &unk_250AD5C30);
      v18 = qword_256930120;
      if (os_log_type_enabled((os_log_t)qword_256930120, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buffer = 136315394;
        *(_QWORD *)&buffer[4] = "OCProxySurfaceCreateResults";
        v38 = 1026;
        v39 = 543;
        _os_log_error_impl(&dword_239388000, v18, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create results - failed to create IOSurface for vertex buffer.", buffer, 0x12u);
      }
    }
    else
    {
      *((_QWORD *)&v31 + 1) = 0;
      v21 = v42;
      if (v42
        && HIDWORD(v41)
        && ((*(_QWORD *)buffer = 0,
             v22 = 4 * HIDWORD(v41),
             sub_23938BFB0(1278227250, v22, (IOSurfaceRef *)buffer))
         || (v23 = IOSurfaceGetBaseAddress(*(IOSurfaceRef *)buffer),
             memcpy(v23, v21, v22),
             v24 = CVDataBufferCreateWithIOSurface(),
             CFRelease(*(CFTypeRef *)buffer),
             v24)))
      {
        if (qword_256930128 != -1)
          dispatch_once(&qword_256930128, &unk_250AD5C30);
        v25 = qword_256930120;
        if (os_log_type_enabled((os_log_t)qword_256930120, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buffer = 136315394;
          *(_QWORD *)&buffer[4] = "OCProxySurfaceCreateResults";
          v38 = 1026;
          v39 = 563;
          _os_log_error_impl(&dword_239388000, v25, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create results - failed to create IOSurface for index buffer.", buffer, 0x12u);
        }
      }
      else
      {
        *(_QWORD *)&v32 = 0;
        v26 = v47;
        if (!v47
          || !v46
          || (*(_QWORD *)buffer = 0,
              v27 = 48 * v46,
              !sub_23938BFB0(2021227107, v27, (IOSurfaceRef *)buffer))
          && (BaseAddress = IOSurfaceGetBaseAddress(*(IOSurfaceRef *)buffer),
              memcpy(BaseAddress, v26, v27),
              v29 = CVDataBufferCreateWithIOSurface(),
              CFRelease(*(CFTypeRef *)buffer),
              !v29))
        {
          v33 = v48;
          v34 = v49;
          v35 = v50;
          v36 = v51;
          kdebug_trace();
          a2[2] = v33;
          a2[3] = v34;
          a2[4] = v35;
          a2[5] = v36;
          *a2 = v31;
          a2[1] = v32;
LABEL_15:
          operator delete(v8);
          v19 = (int *)__p;
          if (!__p)
            return;
LABEL_23:
          v44 = v19;
          operator delete(v19);
          return;
        }
        if (qword_256930128 != -1)
          dispatch_once(&qword_256930128, &unk_250AD5C30);
        v30 = qword_256930120;
        if (os_log_type_enabled((os_log_t)qword_256930120, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buffer = 136315394;
          *(_QWORD *)&buffer[4] = "OCProxySurfaceCreateResults";
          v38 = 1026;
          v39 = 584;
          _os_log_error_impl(&dword_239388000, v30, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create results - failed to create IOSurface for dense point buffer.", buffer, 0x12u);
        }
      }
    }
    kdebug_trace();
    a2[4] = 0u;
    a2[5] = 0u;
    a2[2] = 0u;
    a2[3] = 0u;
    *a2 = 0u;
    a2[1] = 0u;
    goto LABEL_15;
  }
  if (qword_256930128 != -1)
    dispatch_once(&qword_256930128, &unk_250AD5C30);
  v20 = qword_256930120;
  if (os_log_type_enabled((os_log_t)qword_256930120, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&v41 = "OCProxySurfaceCreateResults";
    WORD4(v41) = 1026;
    *(_DWORD *)((char *)&v41 + 10) = 484;
    _os_log_error_impl(&dword_239388000, v20, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create results - invalid handle.", buf, 0x12u);
  }
  a2[4] = 0u;
  a2[5] = 0u;
  a2[2] = 0u;
  a2[3] = 0u;
  *a2 = 0u;
  a2[1] = 0u;
}

void sub_2393A059C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  void *v30;

  operator delete(v30);
  if (!__p)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t OCProxySurfaceNumVoxelsAlongAxisInVoxelBlock()
{
  return 8;
}

uint64_t OCNonModularSPI_GetWideToDepthTransform(_OWORD *a1, const char *a2)
{
  void *v3;
  const char *v4;
  uint64_t v5;
  const char *v6;
  void *v7;
  BOOL v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  void *v21;
  const char *v22;
  void *v23;
  const char *v24;
  _OWORD v25[4];

  if (!a1)
    return 4294967294;
  objc_msgSend_defaultDeviceWithDeviceType_mediaType_position_(MEMORY[0x24BDB2460], a2, *MEMORY[0x24BDB1A58], *MEMORY[0x24BDB1D50], 1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_defaultDeviceWithDeviceType_mediaType_position_(MEMORY[0x24BDB2460], v4, *MEMORY[0x24BDB1A38], *MEMORY[0x24BDB1D28], 1);
  v5 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)v5;
  if (v3)
    v8 = v5 == 0;
  else
    v8 = 1;
  if (v8)
  {
    v9 = 0xFFFFFFFFLL;
  }
  else
  {
    objc_msgSend_extrinsicMatrixFromDevice_toDevice_(MEMORY[0x24BDB2460], v6, (uint64_t)v3, v5);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = v10;
    if (v10)
    {
      if ((unint64_t)objc_msgSend_length(v10, v11, v12) <= 0x3F)
      {
        objc_msgSend_currentHandler(MEMORY[0x24BDD1448], v14, v15);
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_stringWithUTF8String_(MEMORY[0x24BDD17C8], v22, (uint64_t)"OCReturn OCNonModularSPI_GetWideToDepthTransform(simd_float4x4 *)");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v21, v24, (uint64_t)v23, CFSTR("AVCapture+NonModularSPI.mm"), 48, CFSTR("NSData must contain enough bytes for simd_float4x3"));

      }
      objc_msgSend_getBytes_length_(v13, v14, (uint64_t)v25, 64);
      v9 = 0;
      v16 = v25[0];
      v17 = v25[1];
      HIDWORD(v16) = 0;
      HIDWORD(v17) = 0;
      v18 = v25[2];
      v19 = v25[3];
      HIDWORD(v18) = 0;
      *a1 = v16;
      a1[1] = v17;
      HIDWORD(v19) = 1.0;
      a1[2] = v18;
      a1[3] = v19;
    }
    else
    {
      v9 = 0xFFFFFFFFLL;
    }

  }
  return v9;
}

void sub_2393A0780(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

uint64_t OCNonModularSPI_AVCaptureDevice_IsTimeOfFlightOCMacroModeSupported(uint64_t a1, const char *a2)
{
  void *v2;
  const char *v3;
  void *v4;
  uint64_t isTimeOfFlightProjectorModeSupported;

  objc_msgSend_defaultDeviceWithDeviceType_mediaType_position_(MEMORY[0x24BDB2460], a2, *MEMORY[0x24BDB1A38], *MEMORY[0x24BDB1D28], 1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v2;
  if (v2)
    isTimeOfFlightProjectorModeSupported = objc_msgSend_isTimeOfFlightProjectorModeSupported_(v2, v3, 6);
  else
    isTimeOfFlightProjectorModeSupported = 0;

  return isTimeOfFlightProjectorModeSupported;
}

void sub_2393A0838(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL OCNonModularSPI_AVCaptureDevice_IsTimeOfFlightSensorType80(uint64_t a1, const char *a2)
{
  void *v2;
  const char *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  const char *v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  int NumberOfPoints;
  _BOOL8 v13;

  objc_msgSend_defaultDeviceWithDeviceType_mediaType_position_(MEMORY[0x24BDB2460], a2, *MEMORY[0x24BDB1A38], *MEMORY[0x24BDB1D28], 1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v2;
  if (v2)
  {
    objc_msgSend_formats(v2, v3, v4);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v6, v7, 0);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_formatDescription(v8, v9, v10);
    NumberOfPoints = CMPointCloudFormatDescriptionGetNumberOfPoints();

    v13 = NumberOfPoints == 84 || NumberOfPoints == 168;
  }
  else
  {
    v13 = 0;
  }

  return v13;
}

void sub_2393A08F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id OCNonModularSPI_CapturePhotoSettings(uint64_t a1, const char *a2)
{
  void *v2;
  void *v3;
  const char *v4;
  void *v5;
  const char *v6;
  const char *v7;
  const char *v8;
  uint64_t v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x24BDB24C8];
  v10 = *MEMORY[0x24BDC56B8];
  v11[0] = &unk_250AD9228;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x24BDBCE70], a2, (uint64_t)v11, &v10, 1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_photoSettingsWithFormat_(v2, v4, (uint64_t)v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_setHighResolutionPhotoEnabled_(v5, v6, 1);
  objc_msgSend_setPhotoQualityPrioritization_(v5, v7, 1);
  objc_msgSend_setShutterSound_(v5, v8, 0);
  return v5;
}

void sub_2393A09E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  v2 = v1;

  _Unwind_Resume(a1);
}

uint64_t OCNonModularSPI_ShutterSoundEntitlementValue()
{
  __SecTask *v0;
  __SecTask *v1;
  CFTypeRef v2;
  void *v3;
  CFTypeID v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;

  v0 = SecTaskCreateFromSelf((CFAllocatorRef)*MEMORY[0x24BDBD240]);
  if (!v0)
    return 0;
  v1 = v0;
  v2 = SecTaskCopyValueForEntitlement(v0, CFSTR("com.apple.avfoundation.allow-still-image-capture-shutter-sound-manipulation"), 0);
  if (v2)
  {
    v3 = (void *)v2;
    v4 = CFGetTypeID(v2);
    if (v4 == CFBooleanGetTypeID())
      v7 = objc_msgSend_BOOLValue(v3, v5, v6);
    else
      v7 = 0;
    CFRelease(v3);
  }
  else
  {
    v7 = 0;
  }
  CFRelease(v1);
  return v7;
}

void OCMetalInitWithDevice(id obj)
{
  objc_storeStrong((id *)&qword_256930528, obj);
}

id OCMetalDevice()
{
  unsigned __int8 v0;
  id v1;

  v0 = atomic_load((unsigned __int8 *)&qword_256930538);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_256930538))
  {
    qword_256930530 = sub_2393F2DD8();
    __cxa_atexit((void (*)(void *))sub_2393F2FA4, &qword_256930530, &dword_239388000);
    __cxa_guard_release(&qword_256930538);
  }
  if (qword_256930530)
    v1 = *(id *)qword_256930530;
  else
    v1 = 0;
  return v1;
}

void sub_2393A0B38(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_256930538);
  _Unwind_Resume(a1);
}

id OCMetalCommandQueue()
{
  unsigned __int8 v0;
  id v1;

  v0 = atomic_load((unsigned __int8 *)&qword_256930538);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_256930538))
  {
    qword_256930530 = sub_2393F2DD8();
    __cxa_atexit((void (*)(void *))sub_2393F2FA4, &qword_256930530, &dword_239388000);
    __cxa_guard_release(&qword_256930538);
  }
  if (qword_256930530)
    v1 = *(id *)(qword_256930530 + 8);
  else
    v1 = 0;
  return v1;
}

void sub_2393A0BD8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_256930538);
  _Unwind_Resume(a1);
}

id OCMetalDefaultLibrary()
{
  unsigned __int8 v0;
  id v1;

  v0 = atomic_load((unsigned __int8 *)&qword_256930538);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_256930538))
  {
    qword_256930530 = sub_2393F2DD8();
    __cxa_atexit((void (*)(void *))sub_2393F2FA4, &qword_256930530, &dword_239388000);
    __cxa_guard_release(&qword_256930538);
  }
  if (qword_256930530)
    v1 = *(id *)(qword_256930530 + 16);
  else
    v1 = 0;
  return v1;
}

void sub_2393A0C78(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_256930538);
  _Unwind_Resume(a1);
}

BOOL isAppleGPU()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_256930538);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_256930538))
  {
    qword_256930530 = sub_2393F2DD8();
    __cxa_atexit((void (*)(void *))sub_2393F2FA4, &qword_256930530, &dword_239388000);
    __cxa_guard_release(&qword_256930538);
  }
  return qword_256930530 && *(_BYTE *)(qword_256930530 + 24) != 0;
}

void sub_2393A0D1C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_256930538);
  _Unwind_Resume(a1);
}

uint64_t OCImageScalerCreate(int *a1, _QWORD *a2)
{
  uint64_t result;
  _QWORD *v5;
  int v6;
  uint64_t v7;

  result = 4294967294;
  if (a1 && a2)
  {
    v5 = (_QWORD *)operator new();
    *v5 = 0;
    v6 = *a1;
    v7 = operator new();
    *(_DWORD *)v7 = v6;
    if (VTPixelTransferSessionCreate(0, (VTPixelTransferSessionRef *)(v7 + 8)))
      *(_QWORD *)(v7 + 8) = 0;
    result = 0;
    *v5 = v7;
    *a2 = v5;
  }
  return result;
}

void sub_2393A0DD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B83C4BC](v1, 0x1020C40D5A9D86FLL);
  _Unwind_Resume(a1);
}

uint64_t OCImageScalerStart(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[16];

  if (qword_256930138 != -1)
    dispatch_once(&qword_256930138, &unk_250AD5C50);
  v2 = qword_256930130;
  if (os_log_type_enabled((os_log_t)qword_256930130, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v4 = 0;
    _os_log_debug_impl(&dword_239388000, v2, OS_LOG_TYPE_DEBUG, "OCImageScalerStart", v4, 2u);
  }
  if (a1)
    return 0;
  else
    return 4294967294;
}

void sub_2393A0E98()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.CoreOCModules", "General");
  v1 = (void *)qword_256930130;
  qword_256930130 = (uint64_t)v0;

}

uint64_t OCImageScalerResizeImage(void ***a1, __CVBuffer *a2, CVPixelBufferRef pixelBuffer, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7)
{
  void **v7;
  NSObject *v8;
  unsigned int v9;
  OSType PixelFormatType;
  unint64_t Width;
  unint64_t Height;
  OSType v20;
  const __CFDictionary *v21;
  const __CFDictionary *v22;
  CFTypeID v23;
  int CalibrationPinholeModel_0;
  const char *v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  const char *v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  const char *v41;
  uint64_t v42;
  const char *v43;
  const char *v44;
  const char *v45;
  uint64_t v46;
  void *v47;
  const char *v48;
  void *v49;
  const char *v50;
  void *v51;
  const char *v52;
  void *v53;
  const char *v54;
  void *v55;
  const char *v56;
  void *v57;
  const char *v58;
  uint64_t v59;
  const char *v60;
  void *v61;
  const char *v62;
  void *v63;
  const char *v64;
  void *v65;
  const char *v66;
  void *v67;
  const char *v68;
  void *v69;
  const char *v70;
  void *v71;
  const char *v72;
  void *v73;
  const char *v74;
  uint64_t v75;
  OpaqueVTPixelTransferSession *v76;
  NSObject *v77;
  const char *v78;
  NSObject *v79;
  const char *v80;
  NSObject *v81;
  CFTypeRef v82;
  NSObject *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  CGRect v90;
  CVPixelBufferRef pixelBufferOut;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  _QWORD v97[2];
  _QWORD v98[2];
  const __CFString *v99;
  void *v100;
  const __CFString *v101;
  void *v102;
  const __CFString *v103;
  void *v104;
  _QWORD v105[2];
  const __CFString *v106;
  void *v107;
  const __CFString *v108;
  void *v109;
  void *v110;
  const __CFString *v111;
  void *v112;
  void *v113;
  const __CFString *v114;
  void *v115;
  _QWORD v116[4];
  uint8_t buf[8];
  void *v118;
  void *v119;
  void *v120;
  void *v121;
  _QWORD v122[4];

  v122[2] = *MEMORY[0x24BDAC8D0];
  v90.origin.x = a4;
  v90.origin.y = a5;
  v90.size.width = a6;
  v90.size.height = a7;
  if (a1)
  {
    v7 = *a1;
    if (*(_DWORD *)*a1)
    {
      if (qword_2569303B8 != -1)
        dispatch_once(&qword_2569303B8, &unk_250AD6248);
      v8 = qword_2569303B0;
      if (!os_log_type_enabled((os_log_t)qword_2569303B0, OS_LOG_TYPE_ERROR))
        goto LABEL_6;
      *(_WORD *)buf = 0;
      v80 = "Failed to crop and scale image, input buffer is not RGB frame!";
      goto LABEL_36;
    }
    PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
    Width = CVPixelBufferGetWidth(pixelBuffer);
    Height = CVPixelBufferGetHeight(pixelBuffer);
    if (PixelFormatType != 875704422 && PixelFormatType != 1111970369 && PixelFormatType != 1278226488)
    {
      if (qword_2569303B8 != -1)
        dispatch_once(&qword_2569303B8, &unk_250AD6248);
      v79 = qword_2569303B0;
      if (os_log_type_enabled((os_log_t)qword_2569303B0, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67240192;
        *(_DWORD *)&buf[4] = PixelFormatType;
        _os_log_error_impl(&dword_239388000, v79, OS_LOG_TYPE_ERROR, "Failed to crop and scale image, pixel format %{public}x not supported!", buf, 8u);
      }
      goto LABEL_6;
    }
    v20 = CVPixelBufferGetPixelFormatType(a2);
    pixelBufferOut = 0;
    if (v20 == PixelFormatType)
    {
      if (!sub_2393C4654(a2, &v90, v7[1], pixelBuffer))
      {
        if (qword_2569303B8 != -1)
          dispatch_once(&qword_2569303B8, &unk_250AD6248);
        v8 = qword_2569303B0;
        if (!os_log_type_enabled((os_log_t)qword_2569303B0, OS_LOG_TYPE_ERROR))
          goto LABEL_6;
        *(_WORD *)buf = 0;
        v80 = "Failed to crop and scale image, error in cropping and scaling the grayscale image!";
LABEL_36:
        _os_log_error_impl(&dword_239388000, v8, OS_LOG_TYPE_ERROR, v80, buf, 2u);
        goto LABEL_6;
      }
LABEL_14:
      v21 = (const __CFDictionary *)CVBufferCopyAttachment(a2, CFSTR("Calibration Data"), 0);
      v22 = v21;
      if (v21)
      {
        v23 = CFGetTypeID(v21);
        if (v23 == CFDictionaryGetTypeID())
        {
          v95 = 0.0;
          v96 = 0.0;
          v93 = 0.0;
          v94 = 0.0;
          v92 = 0.0;
          CalibrationPinholeModel_0 = getCalibrationPinholeModel_0(v22, 0, (void **)&v96, (void **)&v95, (void **)&v94, (void **)&v93, (void **)&v92);
          CFRelease(v22);
          if (CalibrationPinholeModel_0)
          {
            v27 = (double)Width;
            if (vabdd_f64((double)Width / a6, (double)Height / a7) <= 0.000001)
            {
              v28 = (double)(unint64_t)a6;
              v29 = v95;
              v30 = (v94 - a4) * v27 / v28;
              v31 = v93;
              objc_msgSend_numberWithDouble_(MEMORY[0x24BDD16E0], v25, v26, v30);
              v32 = (void *)objc_claimAutoreleasedReturnValue();
              v122[0] = v32;
              objc_msgSend_numberWithDouble_(MEMORY[0x24BDD16E0], v33, v34, (v31 - a5) * v27 / v28);
              v35 = (void *)objc_claimAutoreleasedReturnValue();
              v122[1] = v35;
              objc_msgSend_arrayWithObjects_count_(MEMORY[0x24BDBCE30], v36, (uint64_t)v122, 2);
              v89 = (void *)objc_claimAutoreleasedReturnValue();

              objc_msgSend_numberWithDouble_(MEMORY[0x24BDD16E0], v37, v38, v92);
              v39 = (void *)objc_claimAutoreleasedReturnValue();
              v121 = v39;
              objc_msgSend_arrayWithObjects_count_(MEMORY[0x24BDBCE30], v40, (uint64_t)&v121, 1);
              v88 = (void *)objc_claimAutoreleasedReturnValue();

              v116[0] = CFSTR("Aspect Ratio");
              v114 = CFSTR("Data");
              objc_msgSend_numberWithDouble_(MEMORY[0x24BDD16E0], v41, v42, v96);
              v86 = (void *)objc_claimAutoreleasedReturnValue();
              v113 = v86;
              objc_msgSend_arrayWithObjects_count_(MEMORY[0x24BDBCE30], v43, (uint64_t)&v113, 1);
              v85 = (void *)objc_claimAutoreleasedReturnValue();
              v115 = v85;
              objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x24BDBCE70], v44, (uint64_t)&v115, &v114, 1);
              v84 = (void *)objc_claimAutoreleasedReturnValue();
              *(_QWORD *)buf = v84;
              v116[1] = CFSTR("Focal Length");
              v111 = CFSTR("Data");
              objc_msgSend_numberWithDouble_(MEMORY[0x24BDD16E0], v45, v46, v29 * v27 / v28);
              v47 = (void *)objc_claimAutoreleasedReturnValue();
              v110 = v47;
              objc_msgSend_arrayWithObjects_count_(MEMORY[0x24BDBCE30], v48, (uint64_t)&v110, 1);
              v49 = (void *)objc_claimAutoreleasedReturnValue();
              v112 = v49;
              objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x24BDBCE70], v50, (uint64_t)&v112, &v111, 1);
              v51 = (void *)objc_claimAutoreleasedReturnValue();
              v118 = v51;
              v116[2] = CFSTR("Principal Point");
              v108 = CFSTR("Data");
              v109 = v89;
              objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x24BDBCE70], v52, (uint64_t)&v109, &v108, 1);
              v53 = (void *)objc_claimAutoreleasedReturnValue();
              v119 = v53;
              v116[3] = CFSTR("Skew");
              v106 = CFSTR("Data");
              v107 = v88;
              objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x24BDBCE70], v54, (uint64_t)&v107, &v106, 1);
              v55 = (void *)objc_claimAutoreleasedReturnValue();
              v120 = v55;
              objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x24BDBCE70], v56, (uint64_t)buf, v116, 4);
              v57 = (void *)objc_claimAutoreleasedReturnValue();
              v87 = (void *)objc_msgSend_mutableCopy(v57, v58, v59);

              objc_msgSend_numberWithUnsignedLong_(MEMORY[0x24BDD16E0], v60, Width);
              v61 = (void *)objc_claimAutoreleasedReturnValue();
              v105[0] = v61;
              objc_msgSend_numberWithUnsignedLong_(MEMORY[0x24BDD16E0], v62, Height);
              v63 = (void *)objc_claimAutoreleasedReturnValue();
              v105[1] = v63;
              objc_msgSend_arrayWithObjects_count_(MEMORY[0x24BDBCE30], v64, (uint64_t)v105, 2);
              v65 = (void *)objc_claimAutoreleasedReturnValue();

              v103 = CFSTR("Sensors");
              v101 = CFSTR("Intrinsics");
              v98[1] = v65;
              v99 = CFSTR("RGB");
              v97[0] = CFSTR("Pinhole");
              v97[1] = CFSTR("Resolution");
              v98[0] = v87;
              objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x24BDBCE70], v66, (uint64_t)v98, v97, 2);
              v67 = (void *)objc_claimAutoreleasedReturnValue();
              v100 = v67;
              objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x24BDBCE70], v68, (uint64_t)&v100, &v99, 1);
              v69 = (void *)objc_claimAutoreleasedReturnValue();
              v102 = v69;
              objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x24BDBCE70], v70, (uint64_t)&v102, &v101, 1);
              v71 = (void *)objc_claimAutoreleasedReturnValue();
              v104 = v71;
              objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x24BDBCE70], v72, (uint64_t)&v104, &v103, 1);
              v73 = (void *)objc_claimAutoreleasedReturnValue();
              v22 = (const __CFDictionary *)objc_msgSend_mutableCopy(v73, v74, v75);

              CFRetain(v22);
              goto LABEL_44;
            }
          }
        }
        else
        {
          CFRelease(v22);
        }
        v22 = 0;
      }
LABEL_44:
      CVBufferSetAttachment(pixelBuffer, CFSTR("Calibration Data"), v22, kCVAttachmentMode_ShouldPropagate);
      v82 = CVBufferCopyAttachment(a2, CFSTR("MetadataDictionary"), 0);
      CVBufferSetAttachment(pixelBuffer, CFSTR("MetadataDictionary"), v82, kCVAttachmentMode_ShouldPropagate);
      if (v82)
        CFRelease(v82);
      if (v22)
        CFRelease(v22);
      v9 = 0x80000000;
      return ((int)~v9 >> 31);
    }
    if (CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], Width, Height, v20, 0, &pixelBufferOut))
    {
LABEL_6:
      v9 = 0;
      return ((int)~v9 >> 31);
    }
    if (!sub_2393C4654(a2, &v90, v7[1], pixelBufferOut))
    {
      if (qword_2569303B8 != -1)
        dispatch_once(&qword_2569303B8, &unk_250AD6248);
      v81 = qword_2569303B0;
      if (os_log_type_enabled((os_log_t)qword_2569303B0, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_239388000, v81, OS_LOG_TYPE_ERROR, "Failed to crop and scale image, error in cropping and scaling the grayscale image!", buf, 2u);
      }
      CVPixelBufferRelease(pixelBufferOut);
      goto LABEL_6;
    }
    v76 = (OpaqueVTPixelTransferSession *)v7[1];
    if (v76)
    {
      if (!VTPixelTransferSessionTransferImage(v76, pixelBufferOut, pixelBuffer))
      {
        CVPixelBufferRelease(pixelBufferOut);
        goto LABEL_14;
      }
      if (qword_2569303B8 != -1)
        dispatch_once(&qword_2569303B8, &unk_250AD6248);
      v77 = qword_2569303B0;
      if (!os_log_type_enabled((os_log_t)qword_2569303B0, OS_LOG_TYPE_ERROR))
      {
LABEL_52:
        if (qword_2569303B8 != -1)
          dispatch_once(&qword_2569303B8, &unk_250AD6248);
        v83 = (id)qword_2569303B0;
        if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_239388000, v83, OS_LOG_TYPE_ERROR, "Failed to crop and scale image, error in converting buffer type after scaling!", buf, 2u);
        }

        CVPixelBufferRelease(pixelBufferOut);
        goto LABEL_6;
      }
      *(_WORD *)buf = 0;
      v78 = "Failed to convert buffer pixel format in VTPixelTransferSession";
    }
    else
    {
      if (qword_2569303B8 != -1)
        dispatch_once(&qword_2569303B8, &unk_250AD6248);
      v77 = qword_2569303B0;
      if (!os_log_type_enabled((os_log_t)qword_2569303B0, OS_LOG_TYPE_ERROR))
        goto LABEL_52;
      *(_WORD *)buf = 0;
      v78 = "Failed to convert buffer type, pixel transfer session ref is nil!";
    }
    _os_log_error_impl(&dword_239388000, v77, OS_LOG_TYPE_ERROR, v78, buf, 2u);
    goto LABEL_52;
  }
  return 4294967294;
}

void sub_2393A182C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

uint64_t OCImageScalerStop(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[16];

  if (qword_256930138 != -1)
    dispatch_once(&qword_256930138, &unk_250AD5C50);
  v2 = qword_256930130;
  if (os_log_type_enabled((os_log_t)qword_256930130, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v4 = 0;
    _os_log_debug_impl(&dword_239388000, v2, OS_LOG_TYPE_DEBUG, "OCImageScalerStop", v4, 2u);
  }
  if (a1)
    return 0;
  else
    return 4294967294;
}

uint64_t OCImageScalerDestroy(uint64_t *a1)
{
  uint64_t v2;
  OpaqueVTPixelTransferSession *v3;

  if (!a1)
    return 4294967294;
  v2 = *a1;
  if (*a1)
  {
    v3 = *(OpaqueVTPixelTransferSession **)(v2 + 8);
    if (v3)
    {
      VTPixelTransferSessionInvalidate(v3);
      CFRelease(*(CFTypeRef *)(v2 + 8));
      *(_QWORD *)(v2 + 8) = 0;
    }
    MEMORY[0x23B83C4BC](v2, 0x1020C40D5A9D86FLL);
  }
  MEMORY[0x23B83C4BC](a1, 0x20C4093837F09);
  return 0;
}

uint64_t sub_2393A1A78()
{
  uint64_t result;

  qword_256930150 = 0;
  *(_QWORD *)algn_256930158 = "OCCoverageResults";
  qword_256930160 = (uint64_t)sub_2393A1AD8;
  unk_256930168 = 0;
  qword_256930170 = (uint64_t)sub_2393A1AE0;
  unk_256930178 = 0;
  qword_256930180 = 0;
  unk_256930188 = sub_2393A1B44;
  qword_256930190 = (uint64_t)sub_2393A1B90;
  result = _CFRuntimeRegisterClass();
  qword_256930148 = result;
  return result;
}

uint64_t sub_2393A1AD8(uint64_t result)
{
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_2393A1AE0(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;

  if (result)
  {
    v1 = result;
    v2 = *(_QWORD **)(result + 16);
    if (v2)
    {
      if (*v2)
      {
        MEMORY[0x23B83C498](*v2, 0x1000C80451B5BE8);
        *v2 = 0;
      }
      result = MEMORY[0x23B83C4BC](v2, 0x10A0C40700A216ALL);
    }
    *(_QWORD *)(v1 + 16) = 0;
  }
  return result;
}

CFStringRef sub_2393A1B44(const void *a1)
{
  const __CFAllocator *v2;
  CFAllocatorRef v3;

  v2 = CFGetAllocator(a1);
  v3 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<OCCoverageResults %p [%p]>"), a1, v3);
}

CFStringRef sub_2393A1B90(const void *a1)
{
  const __CFAllocator *v2;
  CFAllocatorRef v3;

  v2 = CFGetAllocator(a1);
  v3 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<OCCoverageResults %p [%p]>"), a1, v3);
}

CFTypeRef OCCoverageResultsRetain(CFTypeRef cf)
{
  if (cf)
    CFRetain(cf);
  return cf;
}

uint64_t OCCoverageResultsGetData(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 16);
  return result;
}

void OCCoverageResultsRelease(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

uint64_t sub_2393A1C20(float **a1, const void *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  float *v10;
  float *v11;
  uint64_t v12;
  size_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v17;
  uint64_t result;
  _OWORD *v19;
  __int128 *v20;
  unint64_t v21;
  __int128 v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  float *v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  float v31;
  uint64_t v32;
  float32x4_t *v33;
  int64x2_t v34;
  float32x4_t v35;
  int8x16_t v36;
  uint64_t v37;
  int64x2_t v38;
  int64x2_t v39;
  int64x2_t v40;
  int32x4_t v41;
  int8x16_t v42;
  int64x2_t v43;
  int64x2_t v44;
  int32x4_t v45;
  int64x2_t v46;
  float v47;

  if (!a3)
    return 4294967294;
  v6 = *a3;
  if (*a3)
  {
    if (*(_QWORD *)v6)
      CFRelease(*(CFTypeRef *)v6);
    *(_QWORD *)v6 = 0;
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
    {
      MEMORY[0x23B83C498](v7, 0x1000C8052888210);
      *(_QWORD *)(v6 + 8) = 0;
    }
    MEMORY[0x23B83C4BC](v6, 0x10A0C40D63CFB62);
    *a3 = 0;
  }
  v8 = operator new(0x20uLL, MEMORY[0x24BEDB6B8]);
  if (!v8)
    return 4294967293;
  v9 = v8;
  *v8 = 0u;
  v8[1] = 0u;
  v10 = *a1;
  v11 = a1[1];
  v12 = (char *)v11 - (char *)*a1;
  if (v12 < 0)
    v13 = -1;
  else
    v13 = (char *)v11 - (char *)*a1;
  v14 = (char *)operator new[](v13, MEMORY[0x24BEDB6B8]);
  *((_QWORD *)v9 + 1) = v14;
  if (!v14)
  {
    *(_QWORD *)v9 = 0;
    MEMORY[0x23B83C4BC](v9, 0x10A0C40D63CFB62);
    return 4294967293;
  }
  v15 = v12 >> 2;
  *((_QWORD *)v9 + 2) = v12 >> 2;
  if (v11 != v10)
  {
    if (v15 <= 1)
      v15 = 1;
    if (v15 < 8 || (unint64_t)(v14 - (char *)v10) <= 0x1F)
    {
      v17 = 0;
LABEL_27:
      v23 = v15 - v17;
      v24 = v17;
      v25 = &v14[4 * v17];
      v26 = &v10[v24];
      do
      {
        v27 = *(_DWORD *)v26++;
        *(_DWORD *)v25 = v27;
        v25 += 4;
        --v23;
      }
      while (v23);
      goto LABEL_29;
    }
    v17 = v15 & 0xFFFFFFFFFFFFFFF8;
    v19 = v14 + 16;
    v20 = (__int128 *)(v10 + 4);
    v21 = v15 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v22 = *v20;
      *(v19 - 1) = *(v20 - 1);
      *v19 = v22;
      v19 += 2;
      v20 += 2;
      v21 -= 8;
    }
    while (v21);
    if (v15 != v17)
      goto LABEL_27;
  }
LABEL_29:
  if (a2)
  {
    CFRetain(a2);
    v10 = *a1;
    v11 = a1[1];
  }
  *(_QWORD *)v9 = a2;
  if (v10 != v11)
  {
    v28 = (char *)v11 - (char *)v10;
    v29 = (char *)v11 - (char *)v10 - 4;
    if (v29 >= 0x1C)
    {
      v32 = (v29 >> 2) + 1;
      v33 = (float32x4_t *)(v10 + 4);
      v34 = 0uLL;
      v35 = (float32x4_t)vdupq_n_s32(0x3F4CCCCDu);
      v36 = (int8x16_t)vdupq_n_s64(1uLL);
      v37 = v32 & 0x7FFFFFFFFFFFFFF8;
      v38 = 0uLL;
      v39 = 0uLL;
      v40 = 0uLL;
      do
      {
        v41 = vcgtq_f32(v33[-1], v35);
        v42.i64[0] = v41.u32[0];
        v42.i64[1] = v41.u32[1];
        v43 = (int64x2_t)vandq_s8(v42, v36);
        v42.i64[0] = v41.u32[2];
        v42.i64[1] = v41.u32[3];
        v44 = (int64x2_t)vandq_s8(v42, v36);
        v45 = vcgtq_f32(*v33, v35);
        v42.i64[0] = v45.u32[0];
        v42.i64[1] = v45.u32[1];
        v46 = (int64x2_t)vandq_s8(v42, v36);
        v42.i64[0] = v45.u32[2];
        v42.i64[1] = v45.u32[3];
        v38 = vaddq_s64(v38, v44);
        v34 = vaddq_s64(v34, v43);
        v40 = vaddq_s64(v40, (int64x2_t)vandq_s8(v42, v36));
        v39 = vaddq_s64(v39, v46);
        v33 += 2;
        v37 -= 8;
      }
      while (v37);
      v30 = vaddvq_s64(vaddq_s64(vaddq_s64(v39, v34), vaddq_s64(v40, v38)));
      if (v32 == (v32 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_42:
        v31 = (float)v30 / (float)(unint64_t)(v28 >> 2);
        goto LABEL_43;
      }
      v10 += v32 & 0x7FFFFFFFFFFFFFF8;
    }
    else
    {
      v30 = 0;
    }
    do
    {
      v47 = *v10++;
      if (v47 > 0.8)
        ++v30;
    }
    while (v10 != v11);
    goto LABEL_42;
  }
  v31 = 0.0;
LABEL_43:
  result = 0;
  *((float *)v9 + 6) = v31;
  *a3 = (uint64_t)v9;
  return result;
}

void sub_2393A1EC8(float32x4_t **a1, CFTypeRef *a2)
{
  BOOL v2;
  uint64_t Instance;
  _QWORD *v6;
  void *v7;
  unint64_t v8;
  size_t v9;
  void *v10;
  float32x4_t *v11;
  float v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  NSObject *v21;
  uint64_t v22;
  unint64_t v23;
  float32x4_t v24;
  unint64_t v25;
  float32x4_t *v26;
  uint64_t v27;
  float32x4_t *v28;
  NSObject *v29;
  _BOOL4 v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  float32x4_t v34;
  unint64_t v35;
  float32x4_t *v36;
  float32x4_t *v37;
  uint64_t v38;
  unint64_t v39;
  float32x4_t v40;
  uint64_t v41;
  float32x4_t *v42;
  float32x4_t *v43;
  size_t v44;
  void *BaseAddress;
  int v46;
  __int128 v47;
  _OWORD *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  _BYTE buf[12];
  __int16 v58;
  int v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  if (*a1)
    v2 = a1[1] == 0;
  else
    v2 = 1;
  if (v2
    || a1[2] != (float32x4_t *)(-1431655765 * ((unint64_t)((*a1)[6].i64[1] - (*a1)[6].i64[0]) >> 4))
    || !a2
    || *((float *)a1 + 6) < 0.0)
  {
    return;
  }
  if (*a2)
  {
    CFRelease(*a2);
    *a2 = 0;
  }
  if (qword_256930140 != -1)
    dispatch_once(&qword_256930140, &unk_250AD5C70);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return;
  v6 = (_QWORD *)Instance;
  v7 = operator new(0x60uLL, MEMORY[0x24BEDB6B8]);
  v6[2] = v7;
  if (!v7
    || ((v8 = (unint64_t)a1[2], v8 >> 60) ? (v9 = -1) : (v9 = 16 * v8),
        v10 = operator new[](v9, MEMORY[0x24BEDB6B8]),
        (*(_QWORD *)v6[2] = v10) == 0))
  {
    CFRelease(v6);
    return;
  }
  v11 = *a1;
  if (*a1)
  {
    v12 = v11[1].f32[0];
    v13 = v11[2];
    v14 = v11[3];
    v15 = v11[4];
    v16 = v11[5];
    v56 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v13, v12), (float32x4_t)0, v14), (float32x4_t)0, v15), (float32x4_t)0, v16);
    v17 = vmulq_f32(v13, (float32x4_t)0);
    v18 = vmlaq_f32(vmlaq_f32(vmlaq_n_f32(v17, v14, v12), (float32x4_t)0, v15), (float32x4_t)0, v16);
    v19 = vmlaq_f32(v17, (float32x4_t)0, v14);
    v54 = vmlaq_f32(vmlaq_n_f32(v19, v15, v12), (float32x4_t)0, v16);
    v55 = v18;
    v20 = vaddq_f32(v16, vmlaq_f32(v19, (float32x4_t)0, v15));
  }
  else
  {
    if (qword_256930038 != -1)
      dispatch_once(&qword_256930038, &unk_250AD5B20);
    v21 = qword_256930030;
    if (os_log_type_enabled((os_log_t)qword_256930030, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "OCVoxelCloudTransformMatrix";
      v58 = 1026;
      v59 = 371;
      _os_log_error_impl(&dword_239388000, v21, OS_LOG_TYPE_ERROR, "%s:%{public}d Invalid voxelcloud.", buf, 0x12u);
    }
    v20 = 0uLL;
    v55 = 0u;
    v56 = 0u;
    v54 = 0u;
  }
  v53 = v20;
  if (!a1[2])
  {
    v33 = 0;
    v52 = v6[2];
    *(_QWORD *)(v52 + 8) = 0;
    *(_DWORD *)(v52 + 16) = *((_DWORD *)a1 + 6);
    goto LABEL_52;
  }
  v22 = 0;
  v23 = 0;
  do
  {
    v26 = *a1;
    if (*a1 && (v28 = v26 + 6, v27 = v26[6].i64[0], 0xAAAAAAAAAAAAAAABLL * ((v28->i64[1] - v27) >> 4) > v23))
    {
      if (!v27)
        goto LABEL_30;
      v24 = vaddq_f32(v53, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v56, (float)*(int *)(v27 + v22)), v55, (float)*(int *)(v27 + v22 + 4)), v54, (float)*(int *)(v27 + v22 + 8)));
    }
    else
    {
      if (qword_256930038 != -1)
        dispatch_once(&qword_256930038, &unk_250AD5B20);
      v29 = qword_256930030;
      v30 = os_log_type_enabled((os_log_t)qword_256930030, OS_LOG_TYPE_ERROR);
      v24.i64[0] = 0;
      v24.i32[2] = 0;
      if (v30)
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "OCVoxelCloudVoxelAt";
        v58 = 1026;
        v59 = 301;
        _os_log_error_impl(&dword_239388000, v29, OS_LOG_TYPE_ERROR, "%s:%{public}d Invalid voxelcloud.", buf, 0x12u);
LABEL_30:
        v24.i64[0] = 0;
        v24.i32[2] = 0;
      }
    }
    v24.i32[3] = a1[1]->i32[v23];
    *(float32x4_t *)(*(_QWORD *)v6[2] + 16 * v23++) = v24;
    v25 = (unint64_t)a1[2];
    v22 += 48;
  }
  while (v23 < v25);
  v31 = v6[2];
  *(_QWORD *)(v31 + 8) = v25;
  *(_DWORD *)(v31 + 16) = *((_DWORD *)a1 + 6);
  if (v25)
  {
    if (v25 >= 0x555555555555556)
      abort();
    v32 = 48 * v25;
    v33 = (char *)operator new(48 * v25);
    bzero(v33, 48 * ((v32 - 48) / 0x30uLL) + 48);
    v35 = 0;
    v36 = *a1;
    v37 = a1[1];
    v38 = 32;
    v39 = (unint64_t)a1[2];
    v40 = (float32x4_t)vdupq_n_s32(0x437F0000u);
    do
    {
      if (!v36 || (v41 = v36[6].i64[0], 0xAAAAAAAAAAAAAAABLL * ((v36[6].i64[1] - v41) >> 4) <= v35))
      {
        if (qword_256930038 != -1)
          dispatch_once(&qword_256930038, &unk_250AD5B20);
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "OCVoxelCloudVoxelAt";
        v58 = 1026;
        v59 = 301;
        _os_log_error_impl(&dword_239388000, (os_log_t)qword_256930030, OS_LOG_TYPE_ERROR, "%s:%{public}d Invalid voxelcloud.", buf, 0x12u);
        __break(1u);
        return;
      }
      v42 = (float32x4_t *)(v41 + v38);
      *(float32x2_t *)v34.f32 = vadd_f32(vcvt_f32_s32(*(int32x2_t *)v42[-2].f32), (float32x2_t)0x3F0000003F000000);
      v34.f32[2] = (float)v42[-2].i32[2] + 0.5;
      v43 = (float32x4_t *)&v33[v38];
      v43[-2] = v34;
      v43[-1] = v42[-1];
      v34 = vminnmq_f32(vmaxnmq_f32(vrndaq_f32(vmulq_f32(*v42, v40)), (float32x4_t)0), v40);
      v43->i32[0] = v34.f32[3] | (v34.f32[1] << 16) | (v34.f32[0] << 24) | (v34.f32[2] << 8);
      v43->i32[1] = v37->i32[v35++];
      v38 += 48;
    }
    while (v35 < v39);
    if (v39)
    {
      *(_QWORD *)buf = 0;
      v44 = 48 * v39;
      if (!sub_23938BFB0(2021227107, 48 * v39, (IOSurfaceRef *)buf))
      {
        BaseAddress = IOSurfaceGetBaseAddress(*(IOSurfaceRef *)buf);
        memcpy(BaseAddress, v33, v44);
        v46 = CVDataBufferCreateWithIOSurface();
        CFRelease(*(CFTypeRef *)buf);
        if (!v46)
        {
          *(double *)&v47 = OCVoxelCloudTransformMatrix(*a1);
          v48 = (_OWORD *)v6[2];
          v48[2] = v47;
          v48[3] = v49;
          v48[4] = v50;
          v48[5] = v51;
          *a2 = v6;
          goto LABEL_53;
        }
      }
    }
  }
  else
  {
    v33 = 0;
  }
LABEL_52:
  CFRelease(v6);
  if (v33)
LABEL_53:
    operator delete(v33);
}

void sub_2393A24E4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

id OCNonModularSPI_AVCameraCalibrationData_CreateDictionaryFrom(void *a1, const char *a2, uint64_t a3)
{
  if (a1)
  {
    objc_msgSend_cameraCalibrationDataDictionary(a1, a2, a3);
    a1 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return a1;
}

id OCNonModularSPI_AVCameraCalibrationData_InitFrom(void *a1, uint64_t a2)
{
  objc_class *v3;
  id v4;
  id v5;
  const char *v6;
  void *v7;

  if (a1)
  {
    v3 = (objc_class *)MEMORY[0x24BDB2430];
    v4 = a1;
    v5 = [v3 alloc];
    v7 = (void *)objc_msgSend_initWithCameraCalibrationDataDictionary_error_(v5, v6, (uint64_t)v4, a2);

  }
  else
  {
    v7 = 0;
  }
  return v7;
}

uint64_t OCMeshToObjFile(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::locale::id *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  const std::locale::facet *v18;
  uint64_t v19;
  std::locale::id *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  const std::locale::facet *v24;
  NSObject *v25;
  uint64_t v27;
  unsigned int v28;
  std::locale v29;
  uint8_t buf[8];
  _BYTE v31[408];
  _QWORD v32[22];

  v32[20] = *MEMORY[0x24BDAC8D0];
  if (a1)
    v2 = a2 == 0;
  else
    v2 = 1;
  v3 = !v2;
  if (v2)
  {
    if (qword_2569301B8 != -1)
      dispatch_once(&qword_2569301B8, &unk_250AD5CB0);
    v25 = qword_2569301B0;
    if (os_log_type_enabled((os_log_t)qword_2569301B0, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_239388000, v25, OS_LOG_TYPE_ERROR, "OCMeshToObjFile: Input mesh or filepath is empty!", buf, 2u);
    }
  }
  else
  {
    v28 = v3;
    v5 = MEMORY[0x24BEDB840];
    v6 = MEMORY[0x24BEDB840] + 64;
    v7 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 8);
    v8 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 16);
    v32[0] = MEMORY[0x24BEDB840] + 64;
    *(_QWORD *)buf = v7;
    *(_QWORD *)&buf[*(_QWORD *)(v7 - 24)] = v8;
    v9 = (std::ios_base *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)];
    std::ios_base::init(v9, v31);
    v9[1].__vftable = 0;
    v9[1].__fmtflags_ = -1;
    *(_QWORD *)buf = v5 + 24;
    v32[0] = v6;
    MEMORY[0x23B83C360](v31);
    std::ofstream::open();
    v27 = *(_QWORD *)(a1 + 8);
    v10 = *(unsigned int *)(a1 + 24);
    v11 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v10)
    {
      v12 = *(_QWORD *)a1 + 8;
      v13 = (std::locale::id *)MEMORY[0x24BEDB350];
      do
      {
        sub_2393A2954(buf, (uint64_t)"v ", 2);
        v14 = (_QWORD *)std::ostream::operator<<();
        sub_2393A2954(v14, (uint64_t)" ", 1);
        v15 = (_QWORD *)std::ostream::operator<<();
        sub_2393A2954(v15, (uint64_t)" ", 1);
        v12 += 16;
        v16 = (_QWORD *)std::ostream::operator<<();
        std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
        v17 = std::locale::use_facet(&v29, v13);
        ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
        std::locale::~locale(&v29);
        std::ostream::put();
        std::ostream::flush();
        --v10;
      }
      while (v10);
    }
    std::ios_base::getloc((const std::ios_base *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)]);
    v18 = std::locale::use_facet(&v29, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
    std::locale::~locale(&v29);
    std::ostream::put();
    std::ostream::flush();
    if ((_DWORD)v11)
    {
      v19 = v27 + 8;
      v20 = (std::locale::id *)MEMORY[0x24BEDB350];
      do
      {
        sub_2393A2954(buf, (uint64_t)"f ", 2);
        v21 = (_QWORD *)std::ostream::operator<<();
        sub_2393A2954(v21, (uint64_t)" ", 1);
        v22 = (_QWORD *)std::ostream::operator<<();
        sub_2393A2954(v22, (uint64_t)" ", 1);
        v19 += 16;
        v23 = (_QWORD *)std::ostream::operator<<();
        std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(_QWORD *)(*v23 - 24)));
        v24 = std::locale::use_facet(&v29, v20);
        ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
        std::locale::~locale(&v29);
        std::ostream::put();
        std::ostream::flush();
        --v11;
      }
      while (v11);
    }
    v3 = v28;
    if (!std::filebuf::close())
      std::ios_base::clear((std::ios_base *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)], *(_DWORD *)&v31[*(_QWORD *)(*(_QWORD *)buf - 24) + 24] | 4);
    *(_QWORD *)buf = *MEMORY[0x24BEDB7E8];
    *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 24);
    MEMORY[0x23B83C36C](v31);
    std::ostream::~ostream();
    MEMORY[0x23B83C468](v32);
  }
  return v3;
}

_QWORD *sub_2393A2954(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  const std::locale::facet *v11;
  uint64_t v12;
  BOOL v13;
  size_t v14;
  size_t v15;
  std::locale::__imp *p_b;
  uint64_t v17;
  uint64_t v18;
  void *locale;
  uint64_t v20;
  uint64_t v21;
  _BYTE v23[16];
  std::locale __b;
  size_t v25;
  int64_t v26;

  MEMORY[0x23B83C390](v23, a1);
  if (!v23[0])
    goto LABEL_32;
  v6 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v7 = *((_QWORD *)v6 + 5);
  v8 = a2 + a3;
  if ((*((_DWORD *)v6 + 2) & 0xB0) == 0x20)
    v9 = a2 + a3;
  else
    v9 = a2;
  v10 = *((_DWORD *)v6 + 36);
  if (v10 == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    v11 = std::locale::use_facet(&__b, MEMORY[0x24BEDB350]);
    v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 32);
    std::locale::~locale(&__b);
    *((_DWORD *)v6 + 36) = v10;
    if (!v7)
      goto LABEL_31;
  }
  else if (!v7)
  {
    goto LABEL_31;
  }
  v12 = *((_QWORD *)v6 + 3);
  v13 = v12 <= a3;
  v14 = v12 - a3;
  if (v13)
    v15 = 0;
  else
    v15 = v14;
  if (v9 - a2 >= 1
    && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 96))(v7, a2, v9 - a2) != v9 - a2)
  {
    goto LABEL_31;
  }
  if ((uint64_t)v15 >= 1)
  {
    if (v15 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v15 >= 0x17)
    {
      v17 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v15 | 7) != 0x17)
        v17 = v15 | 7;
      v18 = v17 + 1;
      p_b = (std::locale::__imp *)operator new(v17 + 1);
      v25 = v15;
      v26 = v18 | 0x8000000000000000;
      __b.__locale_ = p_b;
    }
    else
    {
      HIBYTE(v26) = v15;
      p_b = (std::locale::__imp *)&__b;
    }
    memset(p_b, v10, v15);
    *((_BYTE *)p_b + v15) = 0;
    if (v26 >= 0)
      locale = &__b;
    else
      locale = __b.__locale_;
    v20 = (*(uint64_t (**)(uint64_t, void *, size_t))(*(_QWORD *)v7 + 96))(v7, locale, v15);
    v21 = v20;
    if ((SHIBYTE(v26) & 0x80000000) == 0)
    {
      if (v20 != v15)
        goto LABEL_31;
      goto LABEL_28;
    }
    operator delete(__b.__locale_);
    if (v21 != v15)
    {
LABEL_31:
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
      goto LABEL_32;
    }
  }
LABEL_28:
  if (v8 - v9 >= 1
    && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 96))(v7, v9, v8 - v9) != v8 - v9)
  {
    goto LABEL_31;
  }
  *((_QWORD *)v6 + 3) = 0;
LABEL_32:
  MEMORY[0x23B83C39C](v23);
  return a1;
}

os_log_t sub_2393A2B84()
{
  os_log_t result;

  result = os_log_create("com.apple.CoreOCModules", "General");
  qword_2569301B0 = (uint64_t)result;
  return result;
}

uint64_t OCFramingGuideGetTypeID()
{
  if (qword_2569301C0 != -1)
    dispatch_once(&qword_2569301C0, &unk_250AD5CF0);
  return qword_2569301C8;
}

uint64_t sub_2393A2BF0()
{
  uint64_t result;

  qword_2569301D0 = 0;
  *(_QWORD *)algn_2569301D8 = "OCFramingGuide";
  qword_2569301E0 = (uint64_t)sub_2393A2C50;
  unk_2569301E8 = 0;
  qword_2569301F0 = (uint64_t)sub_2393A2C60;
  unk_2569301F8 = 0;
  qword_256930200 = 0;
  unk_256930208 = sub_2393A2C98;
  qword_256930210 = (uint64_t)sub_2393A2CE4;
  result = _CFRuntimeRegisterClass();
  qword_2569301C8 = result;
  return result;
}

double sub_2393A2C50(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  return result;
}

double sub_2393A2C60(uint64_t a1)
{
  const void *v2;
  double result;

  if (a1)
  {
    v2 = *(const void **)(a1 + 64);
    if (v2)
      CFRelease(v2);
    result = 0.0;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
  }
  return result;
}

CFStringRef sub_2393A2C98(const void *a1)
{
  const __CFAllocator *v2;
  CFAllocatorRef v3;

  v2 = CFGetAllocator(a1);
  v3 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<OCFramingGuide %p [%p]>"), a1, v3);
}

CFStringRef sub_2393A2CE4(const void *a1)
{
  const __CFAllocator *v2;
  CFAllocatorRef v3;

  v2 = CFGetAllocator(a1);
  v3 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<OCFramingGuide %p [%p]>"), a1, v3);
}

uint64_t OCFramingGuideCreate(__int128 *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t Instance;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;

  result = 4294967294;
  if (a1 && a2)
  {
    if (qword_2569301C0 != -1)
      dispatch_once(&qword_2569301C0, &unk_250AD5CF0);
    Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      v6 = (_OWORD *)Instance;
      result = 0;
      v7 = *a1;
      v8 = a1[2];
      v6[2] = a1[1];
      v6[3] = v8;
      v6[1] = v7;
      *a2 = v6;
    }
    else
    {
      return 4294967293;
    }
  }
  return result;
}

uint64_t OCFramingGuideStart(uint64_t a1, simd_float4 a2, simd_float4 a3, simd_float4 a4, simd_float4 a5, float32x4_t a6, float32x4_t a7, float32x4_t a8, float32x4_t a9)
{
  uint64_t result;
  int v11;
  uint64_t v12;
  char v13;
  uint64_t Instance;
  _QWORD *v15;
  char *v16;
  float32x2_t *v17;
  uint64_t v18;
  unsigned __int32 v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x4_t v22;
  int8x16_t v23;
  float32x2_t v24;
  float32x2_t v25;
  float32x4_t v26;
  int8x16_t v27;
  float32x2_t v28;
  float32x2_t v29;
  float32x4_t v30;
  float v31;
  int v32;
  unsigned int v33;
  float v34;
  int v35;
  unsigned int v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  int32x2_t v43;
  float cosval;
  __float2 v45;
  int v46;
  float v47;
  float v48;
  float v49;
  float v50;
  int v51;
  float v52;
  float v53;
  int v54;
  int v55;
  float v56;
  float32x4_t v57;
  _OWORD *f32;
  int v59;
  int32x2_t v60;
  __int32 v61;
  float v62;
  float v63;
  float v64;
  float v65;
  __float2 v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x2_t v70;
  float32x2_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x2_t v74;
  float32x4_t v75;
  int32x4_t v76;
  float32x2_t v77;
  float32x2_t v78;
  __float2 v79;
  float32x2_t v80;
  float v81;
  unint64_t v82;
  float32x4_t *v83;
  float32x4_t *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  float32x4_t *v90;
  float32x4_t v91;
  float32x4_t *v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  int v96;
  float32x4_t v97;
  _OWORD *v98;
  int v99;
  __int32 v100;
  float v101;
  float v102;
  float v103;
  float v104;
  __float2 v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x2_t v109;
  float32x2_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x2_t v113;
  float32x4_t v114;
  int32x4_t v115;
  float32x2_t v116;
  float32x2_t v117;
  __float2 v118;
  float32x2_t v119;
  float v120;
  unint64_t v121;
  float32x4_t *v122;
  float32x4_t *v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  char *v128;
  float32x4_t *v129;
  float32x4_t v130;
  float32x4_t *v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  _QWORD *v135;
  float v136;
  float v137;
  float v138;
  unsigned int v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float32x4_t v145;
  int v146;
  float32x4_t v147;
  float v148;
  float32x4_t v149;
  uint64_t v150;
  __int128 v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  __int128 v155;
  float32x4_t **v156;
  float v158;
  float v160;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v174;
  float32x4_t v175;
  float v177;
  float v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  float32x4_t v182;
  float32x4_t v183;
  float32x4_t v184;
  simd_float4x4 v185;
  simd_float4x4 v186;

  if (!a1)
    return 4294967294;
  if (*(_QWORD *)(a1 + 64))
    return 0xFFFFFFFFLL;
  v11 = *(_DWORD *)(a1 + 32);
  v151 = *(_OWORD *)(a1 + 36);
  v155 = *(_OWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 52);
  v13 = *(_BYTE *)(a1 + 60);
  if (qword_2569300B0 != -1)
    dispatch_once(&qword_2569300B0, &unk_250AD5BA0);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return 4294967293;
  v15 = (_QWORD *)Instance;
  v16 = (char *)operator new(0x80uLL, MEMORY[0x24BEDB6B8]);
  if (v16)
  {
    v17 = (float32x2_t *)v16;
    v135 = v15;
    *(_OWORD *)v16 = v155;
    *((_DWORD *)v16 + 4) = v11;
    *(_OWORD *)(v16 + 20) = v151;
    *(_QWORD *)(v16 + 36) = v12;
    v16[44] = v13;
    *((_QWORD *)v16 + 6) = 0;
    v156 = (float32x4_t **)(v16 + 48);
    *((_OWORD *)v16 + 5) = 0u;
    v18 = (uint64_t)(v16 + 80);
    *((_OWORD *)v16 + 6) = 0u;
    *((_QWORD *)v16 + 7) = 0;
    *((_QWORD *)v16 + 8) = 0;
    *((_DWORD *)v16 + 18) = 0;
    *((_DWORD *)v16 + 28) = 1065353216;
    v185.columns[0] = a2;
    v185.columns[1] = a3;
    v185.columns[2] = a4;
    v185.columns[3] = a5;
    v186 = __invert_f4(v185);
    v152 = (float32x4_t)v186.columns[3];
    v174 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v186.columns[0], COERCE_FLOAT(*(_OWORD *)v17->f32)), (float32x4_t)v186.columns[1], *v17, 1), (float32x4_t)v186.columns[2], *(float32x4_t *)v17->f32, 2);
    v186.columns[3] = (simd_float4)vmulq_f32(a6, a6);
    *(float32x2_t *)v186.columns[3].f32 = vadd_f32(*(float32x2_t *)v186.columns[3].f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v186.columns[3], (int8x16_t)v186.columns[3], 8uLL));
    v19 = vadd_f32(*(float32x2_t *)v186.columns[3].f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v186.columns[3].f32, 1)).u32[0];
    v20 = vrsqrte_f32((float32x2_t)v19);
    v21 = vmul_f32(v20, vrsqrts_f32((float32x2_t)v19, vmul_f32(v20, v20)));
    v22 = vmulq_n_f32(a6, vmul_f32(v21, vrsqrts_f32((float32x2_t)v19, vmul_f32(v21, v21))).f32[0]);
    v23 = (int8x16_t)vmulq_f32(a7, a7);
    *(float32x2_t *)v23.i8 = vadd_f32(*(float32x2_t *)v23.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL));
    v21.i32[0] = vadd_f32(*(float32x2_t *)v23.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v23.i8, 1)).u32[0];
    v24 = vrsqrte_f32((float32x2_t)v21.u32[0]);
    v25 = vmul_f32(v24, vrsqrts_f32((float32x2_t)v21.u32[0], vmul_f32(v24, v24)));
    v26 = vmulq_n_f32(a7, vmul_f32(v25, vrsqrts_f32((float32x2_t)v21.u32[0], vmul_f32(v25, v25))).f32[0]);
    v27 = (int8x16_t)vmulq_f32(a8, a8);
    *(float32x2_t *)v27.i8 = vadd_f32(*(float32x2_t *)v27.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL));
    v25.i32[0] = vadd_f32(*(float32x2_t *)v27.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v27.i8, 1)).u32[0];
    v28 = vrsqrte_f32((float32x2_t)v25.u32[0]);
    v29 = vmul_f32(v28, vrsqrts_f32((float32x2_t)v25.u32[0], vmul_f32(v28, v28)));
    v30 = vmulq_n_f32(a8, vmul_f32(v29, vrsqrts_f32((float32x2_t)v25.u32[0], vmul_f32(v29, v29))).f32[0]);
    v147 = v26;
    v149 = v22;
    v171 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v186.columns[0], v22.f32[0]), (float32x4_t)v186.columns[1], *(float32x2_t *)v22.f32, 1), (float32x4_t)v186.columns[2], v22, 2);
    v168 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v186.columns[0], v26.f32[0]), (float32x4_t)v186.columns[1], *(float32x2_t *)v26.f32, 1), (float32x4_t)v186.columns[2], v26, 2);
    v145 = v30;
    v165 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v186.columns[0], v30.f32[0]), (float32x4_t)v186.columns[1], *(float32x2_t *)v30.f32, 1), (float32x4_t)v186.columns[2], v30, 2);
    v162 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v186.columns[0], a9.f32[0]), (float32x4_t)v186.columns[1], *(float32x2_t *)a9.f32, 1), (float32x4_t)v186.columns[2], a9, 2);
    v160 = sqrtf(vaddv_f32(*(float32x2_t *)v186.columns[3].f32));
    v31 = sqrtf(vaddv_f32(*(float32x2_t *)v23.i8));
    v32 = (int)(float)((float)(v31 / v17[4].f32[0]) + 0.5);
    v158 = sqrtf(vaddv_f32(*(float32x2_t *)v27.i8));
    if (v32 <= 1)
      v32 = 1;
    if (v32 >= 4)
      v33 = 4;
    else
      v33 = v32;
    if (v17[5].i8[4])
      v34 = 0.0;
    else
      v34 = -0.5236;
    if ((float)((float)(v31 * 0.5) + (float)((float)(sinf(v34) * 0.6) * v31)) < 0.1)
      v34 = fminf(asinf(fmaxf(fminf((float)((float)(v31 * -0.5) + 0.1) / (float)(v31 * 0.6), 1.0), -1.0)), 0.2618);
    v35 = 0;
    v36 = 0;
    v172 = vmlaq_laneq_f32(v171, v152, v149, 3);
    v169 = vmlaq_laneq_f32(v168, v152, v147, 3);
    v166 = vmlaq_laneq_f32(v165, v152, v145, 3);
    v163 = vmlaq_laneq_f32(v162, v152, a9, 3);
    v175 = vmlaq_f32(v174, (float32x4_t)0, v152);
    v37 = v160 * 0.74;
    v38 = v158 * 0.74;
    if ((float)(v158 * 0.74) >= (float)(v160 * 0.74))
      v39 = v160 * 0.74;
    else
      v39 = v158 * 0.74;
    if (v37 >= v38)
      v40 = v160 * 0.74;
    else
      v40 = v158 * 0.74;
    v141 = v40;
    v142 = v39;
    v143 = v31;
    v41 = (float)(v31 * 1880.0) / 2560.0;
    v137 = (float)(int)(v33 - 1);
    v138 = v34;
    v140 = flt_2393F55D0[v33 - 1];
    v136 = v140 - v34;
    v150 = v18;
    v139 = v33;
    do
    {
      v42 = v140;
      if (v33 >= 2)
        v42 = v138 + (float)((float)(v136 * (float)v35) / v137);
      v146 = v35;
      v148 = v42;
      v45 = __sincosf_stret(v42);
      cosval = v45.__cosval;
      v43.i32[0] = *(_QWORD *)&v45;
      v46 = 0;
      v47 = v142 * cosval;
      v48 = v17[2].f32[1];
      if (v48 >= (float)(v142 * cosval))
        v47 = v17[2].f32[1];
      if (v48 < (float)(v141 * cosval))
        v48 = v141 * cosval;
      v49 = v48 * 6.2832;
      v50 = v17[3].f32[1];
      if (v50 < 0.001)
        v50 = 0.001;
      v51 = (int)(float)((float)(v49 / v50) + 0.5);
      v52 = v47 * 6.2832;
      if (v17[3].f32[0] >= 0.001)
        v53 = v17[3].f32[0];
      else
        v53 = 0.001;
      v54 = (int)(float)((float)(v52 / v53) + 0.5);
      if (v54 >= 16)
        v54 = 16;
      if (v51 <= v54)
        v51 = v54;
      if (v51 <= 3)
        v55 = 3;
      else
        v55 = v51;
      v56 = (float)v55;
      v144 = v143 * *(float *)v43.i32;
      *(float *)v43.i32 = (float)(v143 * *(float *)v43.i32) * 0.6;
      v153 = (float32x4_t)vdupq_lane_s32(v43, 0);
      do
      {
        v183 = 0u;
        v184 = 0u;
        v61 = v17[9].i32[0];
        v62 = v17[2].f32[1];
        if (v62 >= v37)
          v63 = v17[2].f32[1];
        else
          v63 = v160 * 0.74;
        v64 = cosval * v63;
        if (v62 < v38)
          v62 = v158 * 0.74;
        v65 = cosval * v62;
        v66 = __sincosf_stret((float)((float)v46 * 6.2832) / v56);
        v67 = vmlaq_f32(vaddq_f32(v163, vmlaq_n_f32(vmlaq_f32(vmulq_n_f32(v172, v66.__cosval * v64), (float32x4_t)0, v169), v166, -(float)(v66.__sinval * v65))), v153, v175);
        v68 = vsubq_f32(v67, v163);
        v69 = vmulq_f32(v68, v68);
        LODWORD(v177) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v69, 2), vaddq_f32(v69, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v69.f32, 1))).u32[0];
        v179 = v67;
        v70 = vrsqrte_f32((float32x2_t)LODWORD(v177));
        v71 = vmul_f32(v70, vrsqrts_f32((float32x2_t)LODWORD(v177), vmul_f32(v70, v70)));
        v72 = vmulq_n_f32(v68, vmul_f32(v71, vrsqrts_f32((float32x2_t)LODWORD(v177), vmul_f32(v71, v71))).f32[0]);
        v181 = v72;
        if (!v17[5].i8[4])
        {
          v73 = vmulq_f32(v175, v72);
          v74 = (float32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v73, 2), vaddq_f32(v73, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v73.f32, 1))).u64[0];
          if (v74.f32[0] < 0.0)
          {
            v75 = vmlsq_lane_f32(v72, v175, v74, 0);
            v76 = (int32x4_t)vmulq_f32(v75, v75);
            v76.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v76, 2), vadd_f32(*(float32x2_t *)v76.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v76.i8, 1))).u32[0];
            v77 = vrsqrte_f32((float32x2_t)v76.u32[0]);
            v78 = vmul_f32(v77, vrsqrts_f32((float32x2_t)v76.u32[0], vmul_f32(v77, v77)));
            v181 = vmulq_n_f32(v75, vmul_f32(v78, vrsqrts_f32((float32x2_t)v76.u32[0], vmul_f32(v78, v78))).f32[0]);
          }
        }
        v79 = __sincosf_stret((float)((float)((float)v46 * 6.2832) / v56) + 1.5708);
        v80.f32[0] = v160 * v79.__cosval;
        v80.f32[1] = v158 * v79.__sinval;
        v81 = (float)(sqrtf(vaddv_f32(vmul_f32(v80, v80))) * 1880.0) / 1920.0;
        if (v41 >= v81)
          v81 = v41;
        v183.i64[0] = __PAIR64__(v36, COERCE_UNSIGNED_INT(fmaxf((float)(v81 * 1.2) - sqrtf(v177), 0.25)));
        v183.i32[2] = v61;
        v184.i32[0] = 1;
        v83 = (float32x4_t *)v17[7];
        v82 = (unint64_t)v17[8];
        if ((unint64_t)v83 < v82)
        {
          *v83 = v179;
          v83[1] = v181;
          v57 = v184;
          v83[2] = v183;
          v83[3] = v57;
          f32 = (_OWORD *)v83[4].f32;
        }
        else
        {
          v84 = *v156;
          v85 = ((char *)v83 - (char *)*v156) >> 6;
          v86 = v85 + 1;
          if ((unint64_t)(v85 + 1) >> 58)
LABEL_110:
            abort();
          v87 = v82 - (_QWORD)v84;
          if (v87 >> 5 > v86)
            v86 = v87 >> 5;
          if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFC0)
            v88 = 0x3FFFFFFFFFFFFFFLL;
          else
            v88 = v86;
          if (v88)
          {
            if (v88 >> 58)
LABEL_111:
              sub_23938C4B8();
            v89 = (char *)operator new(v88 << 6);
          }
          else
          {
            v89 = 0;
          }
          v90 = (float32x4_t *)&v89[64 * v85];
          *v90 = v179;
          v90[1] = v181;
          v91 = v184;
          v90[2] = v183;
          v90[3] = v91;
          v92 = v90;
          if (v83 != v84)
          {
            do
            {
              v93 = v83[-4];
              v94 = v83[-3];
              v95 = v83[-1];
              v92[-2] = v83[-2];
              v92[-1] = v95;
              v92[-4] = v93;
              v92[-3] = v94;
              v92 -= 4;
              v83 -= 4;
            }
            while (v83 != v84);
            v83 = *v156;
          }
          f32 = (_OWORD *)v90[4].f32;
          v17[6] = (float32x2_t)v92;
          v17[7] = (float32x2_t)&v90[4];
          v17[8] = (float32x2_t)&v89[64 * v88];
          if (v83)
            operator delete(v83);
          v18 = v150;
        }
        ++v36;
        v17[7] = (float32x2_t)f32;
        v59 = (((unint64_t)f32 - *(_QWORD *)&v17[6]) >> 6) - 1;
        *((_DWORD *)sub_2393BD608(v18, v183.u32[1], &v183.i32[1]) + 5) = v59;
        ++v46;
      }
      while (v46 != v55);
      if (v148 > 0.0 && v17[5].i8[4])
      {
        v96 = 0;
        *(float *)v60.i32 = v144 * -0.6;
        v154 = (float32x4_t)vdupq_lane_s32(v60, 0);
        do
        {
          v183 = 0u;
          v184 = 0u;
          v100 = v17[9].i32[0];
          v101 = v17[2].f32[1];
          if (v101 >= v37)
            v102 = v17[2].f32[1];
          else
            v102 = v160 * 0.74;
          v103 = cosval * v102;
          if (v101 < v38)
            v101 = v158 * 0.74;
          v104 = cosval * v101;
          v105 = __sincosf_stret((float)((float)v96 * 6.2832) / v56);
          v106 = vmlaq_f32(vaddq_f32(v163, vmlaq_n_f32(vmlaq_f32(vmulq_n_f32(v172, v105.__cosval * v103), (float32x4_t)0, v169), v166, -(float)(v105.__sinval * v104))), v154, v175);
          v107 = vsubq_f32(v106, v163);
          v108 = vmulq_f32(v107, v107);
          LODWORD(v178) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v108, 2), vaddq_f32(v108, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v108.f32, 1))).u32[0];
          v180 = v106;
          v109 = vrsqrte_f32((float32x2_t)LODWORD(v178));
          v110 = vmul_f32(v109, vrsqrts_f32((float32x2_t)LODWORD(v178), vmul_f32(v109, v109)));
          v111 = vmulq_n_f32(v107, vmul_f32(v110, vrsqrts_f32((float32x2_t)LODWORD(v178), vmul_f32(v110, v110))).f32[0]);
          v182 = v111;
          if (!v17[5].i8[4])
          {
            v112 = vmulq_f32(v175, v111);
            v113 = (float32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v112, 2), vaddq_f32(v112, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v112.f32, 1))).u64[0];
            if (v113.f32[0] < 0.0)
            {
              v114 = vmlsq_lane_f32(v111, v175, v113, 0);
              v115 = (int32x4_t)vmulq_f32(v114, v114);
              v115.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v115, 2), vadd_f32(*(float32x2_t *)v115.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v115.i8, 1))).u32[0];
              v116 = vrsqrte_f32((float32x2_t)v115.u32[0]);
              v117 = vmul_f32(v116, vrsqrts_f32((float32x2_t)v115.u32[0], vmul_f32(v116, v116)));
              v182 = vmulq_n_f32(v114, vmul_f32(v117, vrsqrts_f32((float32x2_t)v115.u32[0], vmul_f32(v117, v117))).f32[0]);
            }
          }
          v118 = __sincosf_stret((float)((float)((float)v96 * 6.2832) / v56) + 1.5708);
          v119.f32[0] = v160 * v118.__cosval;
          v119.f32[1] = v158 * v118.__sinval;
          v120 = (float)(sqrtf(vaddv_f32(vmul_f32(v119, v119))) * 1880.0) / 1920.0;
          if (v41 >= v120)
            v120 = v41;
          v183.i64[0] = __PAIR64__(v36, COERCE_UNSIGNED_INT(fmaxf((float)(v120 * 1.2) - sqrtf(v178), 0.25)));
          v183.i32[2] = v100;
          v184.i32[0] = 1;
          v122 = (float32x4_t *)v17[7];
          v121 = (unint64_t)v17[8];
          if ((unint64_t)v122 < v121)
          {
            *v122 = v180;
            v122[1] = v182;
            v97 = v184;
            v122[2] = v183;
            v122[3] = v97;
            v98 = (_OWORD *)v122[4].f32;
          }
          else
          {
            v123 = *v156;
            v124 = ((char *)v122 - (char *)*v156) >> 6;
            v125 = v124 + 1;
            if ((unint64_t)(v124 + 1) >> 58)
              goto LABEL_110;
            v126 = v121 - (_QWORD)v123;
            if (v126 >> 5 > v125)
              v125 = v126 >> 5;
            if ((unint64_t)v126 >= 0x7FFFFFFFFFFFFFC0)
              v127 = 0x3FFFFFFFFFFFFFFLL;
            else
              v127 = v125;
            if (v127)
            {
              if (v127 >> 58)
                goto LABEL_111;
              v128 = (char *)operator new(v127 << 6);
            }
            else
            {
              v128 = 0;
            }
            v129 = (float32x4_t *)&v128[64 * v124];
            *v129 = v180;
            v129[1] = v182;
            v130 = v184;
            v129[2] = v183;
            v129[3] = v130;
            v131 = v129;
            if (v122 != v123)
            {
              do
              {
                v132 = v122[-4];
                v133 = v122[-3];
                v134 = v122[-1];
                v131[-2] = v122[-2];
                v131[-1] = v134;
                v131[-4] = v132;
                v131[-3] = v133;
                v131 -= 4;
                v122 -= 4;
              }
              while (v122 != v123);
              v122 = *v156;
            }
            v98 = (_OWORD *)v129[4].f32;
            v17[6] = (float32x2_t)v131;
            v17[7] = (float32x2_t)&v129[4];
            v17[8] = (float32x2_t)&v128[64 * v127];
            if (v122)
              operator delete(v122);
            v18 = v150;
          }
          ++v36;
          v17[7] = (float32x2_t)v98;
          v99 = (((unint64_t)v98 - *(_QWORD *)&v17[6]) >> 6) - 1;
          *((_DWORD *)sub_2393BD608(v18, v183.u32[1], &v183.i32[1]) + 5) = v99;
          ++v96;
        }
        while (v96 != v55);
      }
      v35 = v146 + 1;
      v33 = v139;
    }
    while (v146 + 1 != v139);
    result = 0;
    v135[2] = v17;
    *(_QWORD *)(a1 + 64) = v135;
  }
  else
  {
    v15[2] = 0;
    CFRelease(v15);
    return 4294967293;
  }
  return result;
}

uint64_t OCFramingGuideSignalNewFrame(uint64_t a1)
{
  const void *v1;
  _QWORD *v2;
  uint64_t v3;
  int8x8_t *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int8x8_t *v9;
  char *v10;
  int8x8_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  int8x8_t v15;
  int8x8_t **v16;
  int8x8_t *v17;
  uint64_t v18;
  int8x8_t v19;
  unint64_t v20;
  int8x8_t *v21;
  int8x8_t *v22;
  unint64_t v23;
  unint64_t v24;
  int8x8_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _BYTE *v36;
  unint64_t v37;
  BOOL v38;
  unint64_t v39;
  int8x8_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  char *v52;

  if (a1)
  {
    v2 = (_QWORD *)(a1 + 64);
    v1 = *(const void **)(a1 + 64);
    if (v1)
    {
      *v2 = 0;
      v3 = sub_23939C784((uint64_t)v1, v2);
      if (!(_DWORD)v3)
      {
        v4 = *(int8x8_t **)(*v2 + 16);
        ++v4[9].i32[0];
        v5 = (char *)v4[7];
        v6 = (uint64_t)&v5[-*(_QWORD *)&v4[6]];
        v7 = v6 >> 6;
        if (v6)
        {
          v8 = 0;
          v9 = v4 + 10;
          do
          {
            v5 = (char *)v4[6];
            v10 = &v5[64 * v8 + 48];
            while (*(_DWORD *)v10 != 3 || (v4[2].i32[0] + *((_DWORD *)v10 - 2)) > v4[9].i32[0])
            {
              ++v8;
              v10 += 64;
              if (v8 >= v7)
                goto LABEL_62;
            }
            if (v8 != --v7)
            {
              v11 = v4[11];
              if (v11)
              {
                v12 = *(unsigned int *)&v5[64 * v8 + 36];
                v13 = (uint8x8_t)vcnt_s8(v11);
                v13.i16[0] = vaddlv_u8(v13);
                if (v13.u32[0] > 1uLL)
                {
                  v14 = *(unsigned int *)&v5[64 * v8 + 36];
                  if (*(_QWORD *)&v11 <= v12)
                    v14 = v12 % *(_QWORD *)&v11;
                }
                else
                {
                  v14 = (v11.i32[0] - 1) & v12;
                }
                v15 = *v9;
                v16 = *(int8x8_t ***)(*(_QWORD *)v9 + 8 * v14);
                if (v16)
                {
                  v17 = *v16;
                  if (*v16)
                  {
                    v18 = *(_QWORD *)&v11 - 1;
                    if (v13.u32[0] < 2uLL)
                    {
                      while (1)
                      {
                        v19 = v17[1];
                        if (*(_QWORD *)&v19 == v12)
                        {
                          if (v17[2].i32[0] == (_DWORD)v12)
                            goto LABEL_32;
                        }
                        else if ((*(_QWORD *)&v19 & v18) != v14)
                        {
                          goto LABEL_59;
                        }
                        v17 = (int8x8_t *)*v17;
                        if (!v17)
                          goto LABEL_59;
                      }
                    }
                    do
                    {
                      v20 = (unint64_t)v17[1];
                      if (v20 == v12)
                      {
                        if (v17[2].i32[0] == (_DWORD)v12)
                        {
LABEL_32:
                          if (v13.u32[0] > 1uLL)
                          {
                            if (*(_QWORD *)&v11 <= v12)
                              v12 %= *(_QWORD *)&v11;
                          }
                          else
                          {
                            v12 &= v18;
                          }
                          v21 = *(int8x8_t **)(*(_QWORD *)&v15 + 8 * v12);
                          do
                          {
                            v22 = v21;
                            v21 = (int8x8_t *)*v21;
                          }
                          while (v21 != v17);
                          if (v22 == &v4[12])
                            goto LABEL_49;
                          v23 = (unint64_t)v22[1];
                          if (v13.u32[0] > 1uLL)
                          {
                            if (v23 >= *(_QWORD *)&v11)
                              v23 %= *(_QWORD *)&v11;
                          }
                          else
                          {
                            v23 &= v18;
                          }
                          if (v23 != v12)
                          {
LABEL_49:
                            if (!*(_QWORD *)v17)
                              goto LABEL_50;
                            v24 = *(_QWORD *)(*(_QWORD *)v17 + 8);
                            if (v13.u32[0] > 1uLL)
                            {
                              if (v24 >= *(_QWORD *)&v11)
                                v24 %= *(_QWORD *)&v11;
                            }
                            else
                            {
                              v24 &= v18;
                            }
                            if (v24 != v12)
LABEL_50:
                              *(_QWORD *)(*(_QWORD *)&v15 + 8 * v12) = 0;
                          }
                          v25 = *v17;
                          if (*v17)
                          {
                            v26 = *(_QWORD *)(*(_QWORD *)&v25 + 8);
                            if (v13.u32[0] > 1uLL)
                            {
                              if (v26 >= *(_QWORD *)&v11)
                                v26 %= *(_QWORD *)&v11;
                            }
                            else
                            {
                              v26 &= v18;
                            }
                            if (v26 != v12)
                            {
                              *(_QWORD *)(*(_QWORD *)v9 + 8 * v26) = v22;
                              v25 = *v17;
                            }
                          }
                          *v22 = v25;
                          --*(_QWORD *)&v4[13];
                          operator delete(v17);
                          v5 = (char *)v4[6];
                          break;
                        }
                      }
                      else
                      {
                        if (v20 >= *(_QWORD *)&v11)
                          v20 %= *(_QWORD *)&v11;
                        if (v20 != v14)
                          break;
                      }
                      v17 = (int8x8_t *)*v17;
                    }
                    while (v17);
                  }
                }
              }
LABEL_59:
              v27 = &v5[64 * v8];
              v28 = &v5[64 * v7];
              v30 = *((_OWORD *)v27 + 2);
              v29 = *((_OWORD *)v27 + 3);
              v32 = *(_OWORD *)v27;
              v31 = *((_OWORD *)v27 + 1);
              v33 = *((_OWORD *)v28 + 3);
              v35 = *(_OWORD *)v28;
              v34 = *((_OWORD *)v28 + 1);
              *((_OWORD *)v27 + 2) = *((_OWORD *)v28 + 2);
              *((_OWORD *)v27 + 3) = v33;
              *(_OWORD *)v27 = v35;
              *((_OWORD *)v27 + 1) = v34;
              *(_OWORD *)v28 = v32;
              *((_OWORD *)v28 + 1) = v31;
              *((_OWORD *)v28 + 2) = v30;
              *((_OWORD *)v28 + 3) = v29;
              *((_DWORD *)sub_2393BD608((uint64_t)&v4[10], *(_DWORD *)(*(_QWORD *)&v4[6] + (v8 << 6) + 36), (_DWORD *)(*(_QWORD *)&v4[6] + (v8 << 6) + 36))+ 5) = v8;
            }
          }
          while (v8 < v7);
          v5 = (char *)v4[6];
        }
LABEL_62:
        v36 = (_BYTE *)v4[7];
        v37 = (v36 - v5) >> 6;
        v38 = v7 >= v37;
        v39 = v7 - v37;
        if (v7 > v37)
        {
          v40 = v4[8];
          if (v39 > (uint64_t)(*(_QWORD *)&v40 - (_QWORD)v36) >> 6)
          {
            if (v7 >> 58)
              abort();
            v41 = *(_QWORD *)&v40 - (_QWORD)v5;
            v42 = v41 >> 5;
            if (v41 >> 5 <= v7)
              v42 = v7;
            v38 = (unint64_t)v41 >= 0x7FFFFFFFFFFFFFC0;
            v43 = 0x3FFFFFFFFFFFFFFLL;
            if (!v38)
              v43 = v42;
            if (v43 >> 58)
              sub_23938C4B8();
            v44 = v43 << 6;
            v45 = (char *)operator new(v43 << 6);
            v46 = &v45[64 * v37];
            v47 = &v45[v44];
            bzero(v46, v39 << 6);
            v48 = &v46[64 * v39];
            if (v36 != v5)
            {
              do
              {
                v49 = *((_OWORD *)v36 - 4);
                v50 = *((_OWORD *)v36 - 3);
                v51 = *((_OWORD *)v36 - 1);
                *((_OWORD *)v46 - 2) = *((_OWORD *)v36 - 2);
                *((_OWORD *)v46 - 1) = v51;
                *((_OWORD *)v46 - 4) = v49;
                *((_OWORD *)v46 - 3) = v50;
                v46 -= 64;
                v36 -= 64;
              }
              while (v36 != v5);
              v5 = (char *)v4[6];
            }
            v4[6] = (int8x8_t)v46;
            v4[7] = (int8x8_t)v48;
            v4[8] = (int8x8_t)v47;
            if (v5)
              operator delete(v5);
            v3 = 0;
            goto LABEL_81;
          }
          bzero(*(void **)&v4[7], v39 << 6);
          v3 = 0;
          v52 = &v36[64 * v39];
          goto LABEL_80;
        }
        v3 = 0;
        if (!v38)
        {
          v52 = &v5[64 * v7];
LABEL_80:
          v4[7] = (int8x8_t)v52;
        }
      }
LABEL_81:
      CFRelease(v1);
      return v3;
    }
  }
  return 4294967294;
}

uint64_t OCFramingGuideStations(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

uint64_t OCFramingGuideGetIsCameraInPosition(uint64_t a1, unsigned int a2, char *a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, float32x4_t a7, float32x4_t a8, float32x4_t a9, float32x4_t a10, float32x4_t a11)
{
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint8x8_t v18;
  unint64_t v19;
  uint64_t **v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float32x2_t *v27;
  float32x4_t v28;
  float v34;
  int8x16_t v35;
  float v36;
  float32x4_t v37;
  int8x16_t v38;
  float32x2_t v39;
  float v40;
  uint64_t v41;
  float *v42;
  float v43;
  NSObject *v44;
  double v45;
  const char *v46;
  float32x4_t v47;
  int8x16_t v48;
  float v49;
  char v50;
  float32x4_t v51;
  float32x4_t v56;
  float32x4_t v57;
  uint8_t buf[4];
  double v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  if (!a1)
    return 4294967294;
  result = 4294967294;
  if (a3)
  {
    v14 = *(_QWORD *)(a1 + 64);
    if (v14)
    {
      v15 = *(_QWORD *)(v14 + 16);
      v16 = *(_QWORD *)(v15 + 88);
      if (!v16)
        return 0xFFFFFFFFLL;
      v18 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
      v18.i16[0] = vaddlv_u8(v18);
      if (v18.u32[0] > 1uLL)
      {
        v19 = a2;
        if (v16 <= a2)
          v19 = a2 % v16;
      }
      else
      {
        v19 = ((_DWORD)v16 - 1) & a2;
      }
      v20 = *(uint64_t ***)(*(_QWORD *)(v15 + 80) + 8 * v19);
      if (!v20)
        return 0xFFFFFFFFLL;
      v21 = *v20;
      if (!v21)
        return 0xFFFFFFFFLL;
      if (v18.u32[0] < 2uLL)
      {
        v22 = v16 - 1;
        result = 0xFFFFFFFFLL;
        while (1)
        {
          v23 = v21[1];
          if (v23 == a2)
          {
            if (*((_DWORD *)v21 + 4) == a2)
              goto LABEL_27;
          }
          else if ((v23 & v22) != v19)
          {
            return 0xFFFFFFFFLL;
          }
          v21 = (uint64_t *)*v21;
          if (!v21)
            return result;
        }
      }
      result = 0xFFFFFFFFLL;
      do
      {
        v24 = v21[1];
        if (v24 == a2)
        {
          if (*((_DWORD *)v21 + 4) == a2)
          {
LABEL_27:
            v25 = *((unsigned int *)v21 + 5);
            v26 = *(_QWORD *)(v15 + 48);
            v27 = (float32x2_t *)(v26 + (v25 << 6));
            if ((v27[6].i32[0] - 1) <= 1)
            {
              v28 = vmlaq_f32(vmulq_f32(a8, (float32x4_t)0), (float32x4_t)0, a9);
              __asm { FMOV            V4.4S, #-1.0 }
              v56 = vmlaq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a4, COERCE_FLOAT(*(_OWORD *)v27[2].f32)), a5, v27[2], 1), a6, *(float32x4_t *)v27[2].f32, 2), (float32x4_t)0, a7);
              v57 = vmlaq_f32(vmlaq_f32(v28, _Q4, a10), (float32x4_t)0, a11);
              v51 = a4;
              v34 = cosf((float)(*(float *)(v15 + 36) * 3.1416) / 180.0);
              v35 = (int8x16_t)vmulq_f32(v57, v56);
              v36 = vaddv_f32(vadd_f32(*(float32x2_t *)v35.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL)));
              if (v36 >= (float)-v34)
              {
                if (qword_256930388 != -1)
                  dispatch_once(&qword_256930388, &unk_250AD5FC8);
                v44 = qword_256930380;
                if (!os_log_type_enabled((os_log_t)qword_256930380, OS_LOG_TYPE_INFO))
                  goto LABEL_46;
                *(_DWORD *)buf = 134349056;
                v59 = v36;
                v46 = "Station is not directly facing the camera: (%{public}f)";
              }
              else
              {
                v37 = vaddq_f32(a7, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v51, COERCE_FLOAT(*(_OWORD *)v27->f32)), a5, *v27, 1), a6, *(float32x4_t *)v27->f32, 2));
                v38 = (int8x16_t)vmulq_f32(v57, vsubq_f32(v37, a11));
                v39 = vadd_f32(*(float32x2_t *)v38.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL));
                v40 = vaddv_f32(v39);
                v41 = v26 + (v25 << 6);
                v43 = *(float *)(v41 + 32);
                v42 = (float *)(v41 + 32);
                if (vabds_f32(v40, v43) > *(float *)(v15 + 40))
                {
                  if (qword_256930388 != -1)
                    dispatch_once(&qword_256930388, &unk_250AD5FC8);
                  v44 = qword_256930380;
                  if (os_log_type_enabled((os_log_t)qword_256930380, OS_LOG_TYPE_INFO))
                  {
                    v45 = vabds_f32(v40, *v42);
                    *(_DWORD *)buf = 134349056;
                    v59 = v45;
                    v46 = "Camera not at the right distance from the station: (%{public}f)";
                    goto LABEL_45;
                  }
LABEL_46:
                  v50 = 0;
LABEL_47:
                  result = 0;
                  *a3 = v50;
                  return result;
                }
                v47 = vsubq_f32(vmlaq_n_f32(a11, v57, vadd_f32(v39, (float32x2_t)vdup_lane_s32((int32x2_t)v39, 1)).f32[0]), v37);
                v48 = (int8x16_t)vmulq_f32(v47, v47);
                v49 = sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v48.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v48, v48, 8uLL))));
                if (v49 <= 0.007)
                {
                  v50 = 1;
                  goto LABEL_47;
                }
                if (qword_256930388 != -1)
                  dispatch_once(&qword_256930388, &unk_250AD5FC8);
                v44 = qword_256930380;
                if (!os_log_type_enabled((os_log_t)qword_256930380, OS_LOG_TYPE_INFO))
                  goto LABEL_46;
                *(_DWORD *)buf = 134349056;
                v59 = v49;
                v46 = "Camera not looking directly at station: (%{public}f)";
              }
LABEL_45:
              _os_log_impl(&dword_239388000, v44, OS_LOG_TYPE_INFO, v46, buf, 0xCu);
              goto LABEL_46;
            }
            return 0xFFFFFFFFLL;
          }
        }
        else
        {
          if (v24 >= v16)
            v24 %= v16;
          if (v24 != v19)
            return 0xFFFFFFFFLL;
        }
        v21 = (uint64_t *)*v21;
      }
      while (v21);
    }
  }
  return result;
}

uint64_t OCFramingGuideSetStationProgress(uint64_t a1, unsigned int a2, int a3)
{
  const void *v3;
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint64_t **v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  _DWORD *v21;
  int v22;

  if (!a1)
    return 4294967294;
  v4 = (_QWORD *)(a1 + 64);
  v3 = *(const void **)(a1 + 64);
  if (!v3)
    return 4294967294;
  *v4 = 0;
  v7 = sub_23939C784((uint64_t)v3, v4);
  if ((_DWORD)v7)
    goto LABEL_32;
  v8 = *(_QWORD *)(*v4 + 16);
  v9 = *(_QWORD *)(v8 + 88);
  if (!v9)
    goto LABEL_31;
  v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    v11 = a2;
    if (v9 <= a2)
      v11 = a2 % v9;
  }
  else
  {
    v11 = ((_DWORD)v9 - 1) & a2;
  }
  v12 = *(uint64_t ***)(*(_QWORD *)(v8 + 80) + 8 * v11);
  if (!v12)
    goto LABEL_31;
  v13 = *v12;
  if (!v13)
    goto LABEL_31;
  if (v10.u32[0] < 2uLL)
  {
    v14 = v9 - 1;
    v7 = 0xFFFFFFFFLL;
    while (1)
    {
      v15 = v13[1];
      if (v15 == a2)
      {
        if (*((_DWORD *)v13 + 4) == a2)
          goto LABEL_27;
      }
      else if ((v15 & v14) != v11)
      {
        goto LABEL_31;
      }
      v13 = (uint64_t *)*v13;
      if (!v13)
        goto LABEL_32;
    }
  }
  v7 = 0xFFFFFFFFLL;
  while (1)
  {
    v16 = v13[1];
    if (v16 == a2)
      break;
    if (v16 >= v9)
      v16 %= v9;
    if (v16 != v11)
      goto LABEL_31;
LABEL_21:
    v13 = (uint64_t *)*v13;
    if (!v13)
      goto LABEL_32;
  }
  if (*((_DWORD *)v13 + 4) != a2)
    goto LABEL_21;
LABEL_27:
  v17 = *((unsigned int *)v13 + 5);
  v18 = *(_QWORD *)(v8 + 48);
  v19 = v18 + (v17 << 6);
  v20 = (_BYTE *)(v19 + 44);
  if (*(char *)(v19 + 44) > a3
    || (v22 = *(_DWORD *)(v19 + 48), v21 = (_DWORD *)(v19 + 48), (v22 - 1) > 1))
  {
LABEL_31:
    v7 = 0xFFFFFFFFLL;
    goto LABEL_32;
  }
  *v20 = a3;
  v7 = 0;
  if (a3 >= 100)
  {
    *v21 = 3;
    *(_DWORD *)(v18 + (v17 << 6) + 40) = *(_DWORD *)(v8 + 72);
  }
LABEL_32:
  CFRelease(v3);
  return v7;
}

uint64_t OCFramingGuideStop(uint64_t a1)
{
  const void *v2;
  uint64_t result;

  if (!a1)
    return 4294967294;
  v2 = *(const void **)(a1 + 64);
  if (!v2)
    return 0xFFFFFFFFLL;
  CFRelease(v2);
  result = 0;
  *(_QWORD *)(a1 + 64) = 0;
  return result;
}

void OCFramingGuideRelease(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

BOOL savePixelBufferToJpeg(__CVBuffer *a1, const char *a2, uint64_t a3)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  int v8;
  const UInt8 *BaseAddress;
  CFDataRef v10;
  const __CFDictionary *Width;
  H10ISP *v12;
  H10ISP *v13;
  __CFDictionary *v14;
  const void *v15;
  CFTypeRef v16;
  const void *v17;
  const __CFData *EXIFJPEGData;
  FILE *v19;
  const UInt8 *BytePtr;
  CFIndex v21;
  _BOOL8 result;
  NSObject *v23;
  NSObject *v24;
  NSObject *v25;
  NSObject *v26;
  NSObject *v27;
  NSObject *v28;
  _DWORD length[3];
  uint8_t buf[4];
  const char *v31;
  uint64_t v32;
  _QWORD v33[2];

  v33[1] = *MEMORY[0x24BDAC8D0];
  v32 = *MEMORY[0x24BDD9220];
  objc_msgSend_numberWithFloat_(MEMORY[0x24BDD16E0], a2, a3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v33[0] = v5;
  v7 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x24BDBCE70], v6, (uint64_t)v33, &v32, 1);

  memset(length, 0, sizeof(length));
  v8 = MEMORY[0x23B83C1C8](a1, v7, 0, &length[1], length);
  if (*(_QWORD *)&length[1])
  {
    IOSurfaceLock(*(IOSurfaceRef *)&length[1], 0, 0);
    BaseAddress = (const UInt8 *)IOSurfaceGetBaseAddress(*(IOSurfaceRef *)&length[1]);
    v10 = CFDataCreateWithBytesNoCopy(0, BaseAddress, length[0], (CFAllocatorRef)*MEMORY[0x24BDBD258]);
    if (v10)
    {
      Width = (const __CFDictionary *)CVPixelBufferGetWidth(a1);
      CVPixelBufferGetHeight(a1);
      v12 = (H10ISP *)CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x24BE10818], 0);
      if (v12)
      {
        v13 = v12;
        v14 = (__CFDictionary *)H10ISP::H10ISPCreateEXIFDictFromMetadataDict(v12, Width);
        CFRelease(v13);
        if (v14)
          goto LABEL_5;
      }
      else
      {
        if (qword_256930238 != -1)
          dispatch_once(&qword_256930238, &unk_250AD5D10);
        v25 = qword_256930230;
        if (os_log_type_enabled((os_log_t)qword_256930230, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_239388000, v25, OS_LOG_TYPE_ERROR, "Failed to obtain CaptureSampleBufferAttachmentKey metadata dictionary!", buf, 2u);
        }
        v14 = (__CFDictionary *)H10ISP::H10ISPCreateEXIFDictFromMetadataDict(0, Width);
        if (v14)
        {
LABEL_5:
          v15 = (const void *)*MEMORY[0x24BDD9698];
          v16 = CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x24BDD9698], 0);
          if (v16)
          {
            v17 = v16;
            CFDictionarySetValue(v14, v15, v16);
            CFRelease(v17);
          }
          EXIFJPEGData = (const __CFData *)CGImageCreateEXIFJPEGData();
          if (EXIFJPEGData)
          {
            v19 = fopen(a2, "wb");
            if (v19)
            {
              BytePtr = CFDataGetBytePtr(EXIFJPEGData);
              v21 = CFDataGetLength(EXIFJPEGData);
              fwrite(BytePtr, 1uLL, v21, v19);
              fclose(v19);
              IOSurfaceUnlock(*(IOSurfaceRef *)&length[1], 0, 0);
              CFRelease(*(CFTypeRef *)&length[1]);
              CFRelease(v10);
              CFRelease(v14);
              CFRelease(EXIFJPEGData);
              return 1;
            }
            if (qword_256930238 != -1)
              dispatch_once(&qword_256930238, &unk_250AD5D10);
            v28 = qword_256930230;
            if (os_log_type_enabled((os_log_t)qword_256930230, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136380675;
              v31 = a2;
              _os_log_error_impl(&dword_239388000, v28, OS_LOG_TYPE_ERROR, "Failed to open output JPEG file: %{private}s", buf, 0xCu);
            }
            IOSurfaceUnlock(*(IOSurfaceRef *)&length[1], 0, 0);
            CFRelease(*(CFTypeRef *)&length[1]);
            CFRelease(v10);
            CFRelease(v14);
            CFRelease(EXIFJPEGData);
          }
          else
          {
            if (qword_256930238 != -1)
              dispatch_once(&qword_256930238, &unk_250AD5D10);
            v27 = qword_256930230;
            if (os_log_type_enabled((os_log_t)qword_256930230, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_error_impl(&dword_239388000, v27, OS_LOG_TYPE_ERROR, "Failed to create EXIF/JPEG formatted data!", buf, 2u);
            }
            IOSurfaceUnlock(*(IOSurfaceRef *)&length[1], 0, 0);
            CFRelease(*(CFTypeRef *)&length[1]);
            CFRelease(v10);
            CFRelease(v14);
          }
          return 0;
        }
      }
      if (qword_256930238 != -1)
        dispatch_once(&qword_256930238, &unk_250AD5D10);
      v26 = qword_256930230;
      if (os_log_type_enabled((os_log_t)qword_256930230, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_239388000, v26, OS_LOG_TYPE_ERROR, "Failed to create JPEG properties dictionary!", buf, 2u);
      }
      IOSurfaceUnlock(*(IOSurfaceRef *)&length[1], 0, 0);
      CFRelease(*(CFTypeRef *)&length[1]);
      CFRelease(v10);
    }
    else
    {
      if (qword_256930238 != -1)
        dispatch_once(&qword_256930238, &unk_250AD5D10);
      v24 = qword_256930230;
      if (os_log_type_enabled((os_log_t)qword_256930230, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_239388000, v24, OS_LOG_TYPE_ERROR, "Failed to create JPEG code stream", buf, 2u);
      }
      IOSurfaceUnlock(*(IOSurfaceRef *)&length[1], 0, 0);
      CFRelease(*(CFTypeRef *)&length[1]);
    }
    return 0;
  }
  if (qword_256930238 != -1)
    dispatch_once(&qword_256930238, &unk_250AD5D10);
  v23 = qword_256930230;
  result = os_log_type_enabled((os_log_t)qword_256930230, OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_DWORD *)buf = 67240192;
    LODWORD(v31) = v8;
    _os_log_error_impl(&dword_239388000, v23, OS_LOG_TYPE_ERROR, "Failed to encode JPEG, error: 0x%{public}08X\n", buf, 8u);
    return 0;
  }
  return result;
}

void sub_2393A48DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2393A48F4()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.CoreOCModules", "General");
  v1 = (void *)qword_256930230;
  qword_256930230 = (uint64_t)v0;

}

uint64_t savePixelBufferOneComponent8ToPng(__CVBuffer *a1)
{
  uint64_t v2;

  CVPixelBufferLockBaseAddress(a1, 1uLL);
  cva::imageViewFromPixelBuffer<unsigned char>();
  v2 = cva::imwrite<unsigned char>();
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  return v2;
}

uint64_t savePixelBufferFloat32ToTiff(__CVBuffer *a1)
{
  uint64_t v2;

  CVPixelBufferLockBaseAddress(a1, 1uLL);
  cva::imageViewFromPixelBuffer<float>();
  v2 = cva::imwrite<float>();
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  return v2;
}

CVPixelBufferRef copyPixelBufferForType(__CVBuffer *a1, OSType a2)
{
  const __CFAllocator *v4;
  size_t Width;
  size_t Height;
  CVReturn v7;
  CVPixelBufferRef result;
  CFTypeRef cf;
  CVPixelBufferRef pixelBufferOut;

  pixelBufferOut = 0;
  v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  v7 = CVPixelBufferCreate(v4, Width, Height, a2, 0, &pixelBufferOut);
  result = 0;
  if (!v7)
  {
    cf = 0;
    if (VTPixelTransferSessionCreate(v4, (VTPixelTransferSessionRef *)&cf))
    {
      CVPixelBufferRelease(pixelBufferOut);
      return 0;
    }
    else if (VTPixelTransferSessionTransferImage((VTPixelTransferSessionRef)cf, a1, pixelBufferOut))
    {
      CVPixelBufferRelease(pixelBufferOut);
      CFRelease(cf);
      return 0;
    }
    else
    {
      VTPixelTransferSessionInvalidate((VTPixelTransferSessionRef)cf);
      CFRelease(cf);
      return pixelBufferOut;
    }
  }
  return result;
}

uint64_t OCMeshingCreate(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _OWORD *v5;
  uint64_t v6;

  v3 = operator new(8uLL, MEMORY[0x24BEDB6B8]);
  if (!v3)
    return 4294967293;
  v4 = v3;
  v5 = operator new(0x50uLL, MEMORY[0x24BEDB6B8]);
  if (v5)
  {
    v5[3] = 0u;
    v5[4] = 0u;
    *v5 = 0u;
    v5[1] = 0u;
    v5[2] = 0u;
    *((_QWORD *)v5 + 3) = v5 + 2;
    *((_QWORD *)v5 + 6) = 0;
    *((_QWORD *)v5 + 7) = 0;
    *((_QWORD *)v5 + 8) = 0;
  }
  v6 = 0;
  *v4 = v5;
  *a2 = v4;
  return v6;
}

uint64_t OCMeshingStart()
{
  return 0;
}

uint64_t OCMeshingStop()
{
  return 0;
}

uint64_t OCMeshingDestroy(char ***a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;

  v2 = *a1;
  if (*a1)
  {
    v3 = v2[6];
    if (v3)
    {
      v2[7] = v3;
      operator delete(v3);
    }
    sub_23938C854(v2[4]);
    v4 = *v2;
    if (*v2)
    {
      v5 = v2[1];
      v6 = *v2;
      if (v5 != v4)
      {
        do
        {
          sub_23938C854(*((_QWORD **)v5 - 3));
          sub_23938C854(*((_QWORD **)v5 - 6));
          sub_23938C854(*((_QWORD **)v5 - 9));
          v5 -= 128;
        }
        while (v5 != v4);
        v6 = *v2;
      }
      v2[1] = v4;
      operator delete(v6);
    }
    MEMORY[0x23B83C4BC](v2, 0x10A0C40554643BBLL);
  }
  MEMORY[0x23B83C4BC](a1, 0x20C4093837F09);
  return 0;
}

uint64_t sub_2393A4C14()
{
  uint64_t result;

  qword_256930250 = 0;
  *(_QWORD *)algn_256930258 = "OCMesh";
  qword_256930260 = (uint64_t)sub_2393A4C74;
  unk_256930268 = 0;
  qword_256930270 = (uint64_t)sub_2393A4C7C;
  unk_256930278 = 0;
  qword_256930280 = 0;
  unk_256930288 = sub_2393A4CBC;
  qword_256930290 = (uint64_t)sub_2393A4D08;
  result = _CFRuntimeRegisterClass();
  qword_256930248 = result;
  return result;
}

uint64_t sub_2393A4C74(uint64_t result)
{
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_2393A4C7C(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    result = *(_QWORD *)(result + 16);
    if (result)
      result = MEMORY[0x23B83C4BC](result, 0x1080C409B94441ALL);
    *(_QWORD *)(v1 + 16) = 0;
  }
  return result;
}

CFStringRef sub_2393A4CBC(const void *a1)
{
  const __CFAllocator *v2;
  CFAllocatorRef v3;

  v2 = CFGetAllocator(a1);
  v3 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<OCMesh %p [%p]>"), a1, v3);
}

CFStringRef sub_2393A4D08(const void *a1)
{
  const __CFAllocator *v2;
  CFAllocatorRef v3;

  v2 = CFGetAllocator(a1);
  v3 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<OCMesh %p [%p]>"), a1, v3);
}

uint64_t OCMeshingProcess(float32x4_t a1, float32x4_t a2, float32x4_t a3, __n128 a4, uint64_t a5, __int128 *a6, unint64_t a7)
{
  int8x16_t v7;
  int8x16_t v8;
  float32x4_t v9;
  float32x2_t v10;
  unint64_t v11;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  float32x2_t v16;
  int32x2_t v17;
  int32x2_t v18;
  int v19;
  float v20;
  float v21;
  float32x2_t v22;
  int v23;
  unsigned int v24;
  float32x2_t v25;
  float32x2_t v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  uint64_t v36;
  int v37;
  float32x2_t v38;
  float v39;
  _BYTE *v40;
  uint64_t v41;
  double v42;
  float32x2_t *v43;
  uint64_t v44;
  double v45;
  float32x2_t *v46;
  float v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  char *i;
  char *v52;
  char *v53;
  char *j;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  _BYTE *v59;
  char *v60;
  int v61;
  int v62;
  uint64_t v63;
  char *v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  int v70;
  _BYTE *v71;
  uint64_t v72;
  char *v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  int v78;
  _BYTE *v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  int v85;
  float v86;
  float v87;
  float v88;
  unint64_t v89;
  uint64_t v90;
  char *v91;
  unint64_t v92;
  unint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  int v97;
  char *v98;
  char *v99;
  unint64_t v100;
  unint64_t v101;
  char *v102;
  uint64_t v103;
  int v104;
  char *v105;
  unint64_t v106;
  unint64_t v107;
  char *v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  int v112;
  int v113;
  int v114;
  int v115;
  char *v116;
  unint64_t v117;
  char *v118;
  char *v119;
  char *v120;
  unint64_t v121;
  uint64_t v122;
  int v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t Instance;
  _QWORD *v127;
  _QWORD *v128;
  unint64_t v129;
  void *v130;
  unsigned int v131;
  const std::nothrow_t *v132;
  _OWORD *v133;
  _OWORD *v134;
  __int128 v135;
  uint64_t v136;
  _DWORD *v137;
  uint64_t v138;
  _DWORD *v139;
  int v141;
  float32x2_t v142;
  int v143;
  __int32 v144;
  float32x2_t v145;
  int v146;
  float v147;
  float v148;
  float v149;
  unsigned int v150;
  __int32 v151;
  float v152;
  char *__p;
  uint64_t v154;
  _BYTE *v155;
  int v156;
  int v157;
  char *v158;
  unint64_t v159;
  char *v160;
  uint64_t v162;
  float v163;
  int v164;
  _BYTE *v165;
  char *v166;
  float32x2_t v167;
  void *v168[2];
  __int128 v169;
  __int128 v170;
  void *v171[2];
  char *v172;
  uint64_t (**v173)();
  void *v174;
  void *v175;
  uint64_t v176;
  _BYTE v177[20];
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  float32x2_t v186;
  float v187;
  uint64_t v188;
  float v189;
  _QWORD v190[3];
  _QWORD *v191;
  uint64_t (**v192)();
  _BYTE v193[12];
  float v194;
  uint64_t (***v195)();
  float v196;
  unint64_t v197;
  float v198;
  uint64_t v199;
  float v200;
  uint64_t v201;
  float v202;
  uint64_t v203;
  float v204;
  uint64_t v205;
  float v206;
  double v207;
  double v208;
  double v209;
  double v210;
  double v211;
  double v212;
  double v213;
  double v214;
  uint64_t v215;
  float v216;
  uint64_t v217;
  float v218;
  uint64_t v219;
  float v220;
  uint64_t v221;

  v221 = *MEMORY[0x24BDAC8D0];
  v7 = (int8x16_t)vmulq_f32(a1, a1);
  v8 = (int8x16_t)vmulq_f32(a2, a2);
  v9 = vmulq_f32(a3, a3);
  v163 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), vaddq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1))).f32[0]);
  v173 = off_250AD5F48;
  v174 = 0;
  v10 = vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)), vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v7.i8, *(int32x2_t *)v8.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v7.i8, *(int32x2_t *)v8.i8))));
  v175 = 0;
  v176 = 0;
  v167 = v10;
  if (a7)
  {
    v11 = a7;
    sub_2393B5D28((char **)&v174, a7);
    v10 = v167;
    v13 = v174;
    do
    {
      v14 = *a6;
      v15 = a6[2];
      v13[1] = a6[1];
      v13[2] = v15;
      *v13 = v14;
      v13 += 3;
      a6 += 3;
      --v11;
    }
    while (v11);
  }
  v142 = vdiv_f32(v10, (float32x2_t)vdup_n_s32(0x42480000u));
  v152 = v163 / 50.0;
  v192 = &off_250AD5F70;
  *(_QWORD *)v193 = &v173;
  v195 = &v192;
  v191 = v190;
  sub_2393BD444((uint64_t)&v192, v190);
  v16 = v142;
  *(_OWORD *)v168 = 0u;
  v169 = 0u;
  v170 = 0u;
  *(_OWORD *)v171 = 0u;
  v172 = 0;
  if (fabsf(vmuls_lane_f32(v16.f32[0], v16, 1) * (float)(v163 / 50.0)) >= 0.00001)
  {
    v141 = vcvtps_s32_f32(vdiv_f32(v167, v142).f32[0]);
    if (v141 >= 1)
    {
      v17 = vcvt_s32_f32(vrndp_f32(vdiv_f32((float32x2_t)__PAIR64__(v167.u32[1], LODWORD(v163)), (float32x2_t)__PAIR64__(v142.u32[1], LODWORD(v152)))));
      v18 = vcgtz_s32(v17);
      if ((v18.i32[1] & v18.i32[0] & 1) != 0)
      {
        v19 = 0;
        v20 = a4.n128_f32[2] + (float)(v163 * -0.5);
        v21 = sqrtf((float)(vmul_f32(v142, v142).f32[0] + (float)(v142.f32[1] * v142.f32[1])) + (float)(v152 * v152))
            * 0.5;
        v22 = vadd_f32((float32x2_t)a4.n128_u64[0], vmul_f32(v167, (float32x2_t)0xBF000000BF000000));
        v145 = vmul_f32(v142, (float32x2_t)0x3F0000003F000000);
        v144 = v17.i32[1];
        v151 = v17.i32[0];
LABEL_9:
        v23 = 0;
        v143 = v19;
        v149 = v22.f32[0] + (float)((float)v19 * v16.f32[0]);
        v147 = v149 + v16.f32[0];
LABEL_11:
        v24 = 0;
        v146 = v23;
        v25.f32[0] = v149;
        v25.f32[1] = v22.f32[1] + (float)((float)v23 * v142.f32[1]);
        v26 = vadd_f32(v25, v145);
        v148 = v25.f32[1];
LABEL_15:
        v27 = v20 + (float)((float)v24 * v152);
        v186 = v26;
        v187 = v27 + (float)(v152 * 0.5);
        if (fabsf(((float (*)(uint64_t (***)(), float32x2_t *))*v173)(&v173, &v186)) > v21)
          goto LABEL_14;
        v150 = v24;
        v192 = (uint64_t (**)())__PAIR64__(LODWORD(v148), LODWORD(v149));
        *(float *)v193 = v20 + (float)((float)v24 * v152);
        *(float *)&v193[4] = v147;
        *(float *)&v193[8] = v148;
        v194 = *(float *)v193;
        v195 = (uint64_t (***)())__PAIR64__(LODWORD(v148), LODWORD(v147));
        v196 = v27 + v152;
        v197 = __PAIR64__(LODWORD(v148), LODWORD(v149));
        v198 = v27 + v152;
        *(float *)&v199 = v149;
        *((float *)&v199 + 1) = v148 + v142.f32[1];
        v200 = *(float *)v193;
        *(float *)&v201 = v147;
        *((float *)&v201 + 1) = v148 + v142.f32[1];
        v202 = *(float *)v193;
        *(float *)&v203 = v147;
        *((float *)&v203 + 1) = v148 + v142.f32[1];
        v204 = v27 + v152;
        *(float *)&v205 = v149;
        *((float *)&v205 + 1) = v148 + v142.f32[1];
        v206 = v27 + v152;
        *(_QWORD *)v177 = __PAIR64__(LODWORD(v148), LODWORD(v149));
        *(float *)&v177[8] = *(float *)v193;
        v28 = ((float (*)(uint64_t (***)(), _BYTE *))*v173)(&v173, v177);
        if (fabsf(v28) < 1.1755e-38)
          v28 = v28 + 0.000001;
        v207 = v28;
        *(_QWORD *)v177 = *(_QWORD *)&v193[4];
        *(float *)&v177[8] = v194;
        v29 = ((float (*)(uint64_t (***)(), _BYTE *))*v173)(&v173, v177);
        if (fabsf(v29) < 1.1755e-38)
          v29 = v29 + 0.000001;
        v208 = v29;
        *(_QWORD *)v177 = v195;
        *(float *)&v177[8] = v196;
        v30 = ((float (*)(uint64_t (***)(), _BYTE *))*v173)(&v173, v177);
        if (fabsf(v30) < 1.1755e-38)
          v30 = v30 + 0.000001;
        v209 = v30;
        *(_QWORD *)v177 = v197;
        *(float *)&v177[8] = v198;
        v31 = ((float (*)(uint64_t (***)(), _BYTE *))*v173)(&v173, v177);
        if (fabsf(v31) < 1.1755e-38)
          v31 = v31 + 0.000001;
        v210 = v31;
        *(_QWORD *)v177 = v199;
        *(float *)&v177[8] = v200;
        v32 = ((float (*)(uint64_t (***)(), _BYTE *))*v173)(&v173, v177);
        if (fabsf(v32) < 1.1755e-38)
          v32 = v32 + 0.000001;
        v211 = v32;
        *(_QWORD *)v177 = v201;
        *(float *)&v177[8] = v202;
        v33 = ((float (*)(uint64_t (***)(), _BYTE *))*v173)(&v173, v177);
        if (fabsf(v33) < 1.1755e-38)
          v33 = v33 + 0.000001;
        v212 = v33;
        *(_QWORD *)v177 = v203;
        *(float *)&v177[8] = v204;
        v34 = ((float (*)(uint64_t (***)(), _BYTE *))*v173)(&v173, v177);
        if (fabsf(v34) < 1.1755e-38)
          v34 = v34 + 0.000001;
        v213 = v34;
        *(_QWORD *)v177 = v205;
        *(float *)&v177[8] = v206;
        v35 = ((float (*)(uint64_t (***)(), _BYTE *))*v173)(&v173, v177);
        v36 = 0;
        if (fabsf(v35) < 1.1755e-38)
          v35 = v35 + 0.000001;
        v214 = v35;
        v184 = 0u;
        v185 = 0u;
        v182 = 0u;
        v183 = 0u;
        v180 = 0u;
        v181 = 0u;
        v178 = 0u;
        v179 = 0u;
        *(_OWORD *)&v177[4] = 0u;
        v177[0] = (v207 < 0.0) | (2 * (v208 < 0.0)) | (4 * (v209 < 0.0)) | (8 * (v210 < 0.0)) | (16 * (v211 < 0.0)) | (32 * (v212 < 0.0)) | ((v213 < 0.0) << 6) | ((v35 < 0.0) << 7);
        v154 = v177[0];
        v37 = dword_2393F9D88[v177[0]];
        while (1)
        {
          if (((unsigned __int16)v37 & (unsigned __int16)word_2393F9CF8[v36]) == 0)
            goto LABEL_35;
          v41 = *(int *)&word_2393F9CF8[v36 + 2];
          v42 = *(&v207 + v41);
          v43 = (float32x2_t *)&v193[12 * (int)v41 - 8];
          if (vabdd_f64(0.0, v42) >= 0.00000999999975)
          {
            v44 = *(int *)&word_2393F9CF8[v36 + 4];
            v45 = *(&v207 + v44);
            v46 = (float32x2_t *)&v193[12 * (int)v44 - 8];
            if (vabdd_f64(0.0, v45) < 0.00000999999975)
            {
              v38 = *v46;
              v39 = v46[1].f32[0];
              goto LABEL_34;
            }
            if (vabdd_f64(v42, v45) >= 0.00000999999975)
            {
              v47 = (0.0 - v42) / (v45 - v42);
              v38 = vadd_f32(*v43, vmul_n_f32(vsub_f32(*v46, *v43), v47));
              v39 = v43[1].f32[0] + (float)((float)(v46[1].f32[0] - v43[1].f32[0]) * v47);
              goto LABEL_34;
            }
          }
          v38 = *v43;
          v39 = v43[1].f32[0];
LABEL_34:
          v40 = &v177[v36 * 2];
          *(float32x2_t *)(v40 + 4) = v38;
          *((float *)v40 + 3) = v39;
LABEL_35:
          v36 += 6;
          if (v36 == 72)
          {
            v48 = v154;
            if ((_DWORD)v154 && (_DWORD)v154 != 255)
            {
              v49 = 0;
              v50 = dword_2393F5B78[16 * v154];
              v52 = (char *)v168[1];
              i = (char *)v168[0];
              v53 = (char *)v171[1];
              v160 = v172;
              j = (char *)v171[0];
              v158 = (char *)*((_QWORD *)&v170 + 1);
              v55 = (char *)v169;
              v56 = (char *)v170;
              __p = (char *)*((_QWORD *)&v169 + 1);
              v57 = (char *)v171[0];
              v58 = (char *)v168[0];
              while (1)
              {
                v59 = &v177[12 * v50 + 4];
                v162 = v49;
                v60 = (char *)&dword_2393F5B78[16 * v48 + v49];
                v62 = *((_DWORD *)v60 + 1);
                v61 = *((_DWORD *)v60 + 2);
                v156 = v61;
                if (v52 >= v55)
                {
                  v65 = 0xAAAAAAAAAAAAAAABLL * ((v52 - v58) >> 2) + 1;
                  if (v65 > 0x1555555555555555)
                    goto LABEL_200;
                  if (0x5555555555555556 * ((v55 - v58) >> 2) > v65)
                    v65 = 0x5555555555555556 * ((v55 - v58) >> 2);
                  if (0xAAAAAAAAAAAAAAABLL * ((v55 - v58) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                    v66 = 0x1555555555555555;
                  else
                    v66 = v65;
                  v164 = v62;
                  if (v66)
                  {
                    if (v66 > 0x1555555555555555)
                      goto LABEL_203;
                    v67 = (char *)operator new(12 * v66);
                  }
                  else
                  {
                    v67 = 0;
                  }
                  v68 = &v67[4 * ((v52 - v58) >> 2)];
                  *(_QWORD *)v68 = *(_QWORD *)v59;
                  *((_DWORD *)v68 + 2) = *((_DWORD *)v59 + 2);
                  for (i = v68; v52 != v58; *((_DWORD *)i + 2) = v70)
                  {
                    v69 = *(_QWORD *)(v52 - 12);
                    v52 -= 12;
                    v70 = *((_DWORD *)v52 + 2);
                    *(_QWORD *)(i - 12) = v69;
                    i -= 12;
                  }
                  v55 = &v67[12 * v66];
                  v64 = v68 + 12;
                  if (v58)
                    operator delete(v58);
                  v58 = i;
                  v61 = v156;
                  v62 = v164;
                }
                else
                {
                  v63 = *(_QWORD *)v59;
                  *((_DWORD *)v52 + 2) = *((_DWORD *)v59 + 2);
                  *(_QWORD *)v52 = v63;
                  v64 = v52 + 12;
                }
                v71 = &v177[12 * v62 + 4];
                v155 = v59;
                v165 = v71;
                if (v64 >= v55)
                {
                  v74 = 0xAAAAAAAAAAAAAAABLL * ((v64 - v58) >> 2) + 1;
                  if (v74 > 0x1555555555555555)
                    goto LABEL_200;
                  if (0x5555555555555556 * ((v55 - v58) >> 2) > v74)
                    v74 = 0x5555555555555556 * ((v55 - v58) >> 2);
                  if (0xAAAAAAAAAAAAAAABLL * ((v55 - v58) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                    v75 = 0x1555555555555555;
                  else
                    v75 = v74;
                  if (v75)
                  {
                    if (v75 > 0x1555555555555555)
                      sub_23938C4B8();
                    v76 = (char *)operator new(12 * v75);
                  }
                  else
                  {
                    v76 = 0;
                  }
                  i = &v76[4 * ((v64 - v58) >> 2)];
                  v55 = &v76[12 * v75];
                  *(_QWORD *)i = *(_QWORD *)v165;
                  *((_DWORD *)i + 2) = *((_DWORD *)v165 + 2);
                  v73 = i + 12;
                  if (v64 == v58)
                    goto LABEL_79;
                  do
                  {
                    v77 = *(_QWORD *)(v64 - 12);
                    v64 -= 12;
                    v78 = *((_DWORD *)v64 + 2);
                    *(_QWORD *)(i - 12) = v77;
                    i -= 12;
                    *((_DWORD *)i + 2) = v78;
                  }
                  while (v64 != v58);
                  if (v58)
LABEL_79:
                    operator delete(v58);
                  v58 = i;
                  v61 = v156;
                }
                else
                {
                  v72 = *(_QWORD *)v71;
                  *((_DWORD *)v64 + 2) = *((_DWORD *)v71 + 2);
                  *(_QWORD *)v64 = v72;
                  v73 = v64 + 12;
                }
                v79 = &v177[12 * v61 + 4];
                if (v73 >= v55)
                {
                  v81 = 0xAAAAAAAAAAAAAAABLL * ((v73 - v58) >> 2) + 1;
                  if (v81 > 0x1555555555555555)
                    goto LABEL_200;
                  if (0x5555555555555556 * ((v55 - v58) >> 2) > v81)
                    v81 = 0x5555555555555556 * ((v55 - v58) >> 2);
                  if (0xAAAAAAAAAAAAAAABLL * ((v55 - v58) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                    v82 = 0x1555555555555555;
                  else
                    v82 = v81;
                  if (v82)
                  {
                    if (v82 > 0x1555555555555555)
LABEL_203:
                      sub_23938C4B8();
                    v83 = (char *)operator new(12 * v82);
                  }
                  else
                  {
                    v83 = 0;
                  }
                  i = &v83[4 * ((v73 - v58) >> 2)];
                  v55 = &v83[12 * v82];
                  *(_QWORD *)i = *(_QWORD *)v79;
                  *((_DWORD *)i + 2) = *((_DWORD *)v79 + 2);
                  v52 = i + 12;
                  if (v73 == v58)
                    goto LABEL_96;
                  do
                  {
                    v84 = *(_QWORD *)(v73 - 12);
                    v73 -= 12;
                    v85 = *((_DWORD *)v73 + 2);
                    *(_QWORD *)(i - 12) = v84;
                    i -= 12;
                    *((_DWORD *)i + 2) = v85;
                  }
                  while (v73 != v58);
                  if (v58)
LABEL_96:
                    operator delete(v58);
                  v58 = i;
                }
                else
                {
                  v80 = *(_QWORD *)v79;
                  *((_DWORD *)v73 + 2) = *((_DWORD *)v79 + 2);
                  *(_QWORD *)v73 = v80;
                  v52 = v73 + 12;
                }
                if (!v191)
                  goto LABEL_199;
                (*(void (**)(uint64_t *__return_ptr, _QWORD *, _BYTE *))(*v191 + 48))(&v217, v191, v155);
                v86 = 1.0
                    / sqrtf((float)((float)(*(float *)&v217 * *(float *)&v217)+ (float)(*((float *)&v217 + 1) * *((float *)&v217 + 1)))+ (float)(v218 * v218));
                *(float *)&v217 = *(float *)&v217 * v86;
                *((float *)&v217 + 1) = *((float *)&v217 + 1) * v86;
                v218 = v218 * v86;
                v219 = v217;
                v220 = v218;
                if (!v191
                  || ((*(void (**)(uint64_t *__return_ptr, _QWORD *, _BYTE *))(*v191 + 48))(&v215, v191, v165), v87 = 1.0/ sqrtf((float)((float)(*(float *)&v215 * *(float *)&v215)+ (float)(*((float *)&v215 + 1) * *((float *)&v215 + 1)))+ (float)(v216 * v216)), *(float *)&v215 = *(float *)&v215 * v87, *((float *)&v215 + 1) = *((float *)&v215 + 1) * v87, v216 = v216 * v87, v217 = v215, v218 = v216, !v191))
                {
LABEL_199:
                  sub_2393BA8D0();
LABEL_200:
                  abort();
                }
                (*(void (**)(uint64_t *__return_ptr, _QWORD *, _BYTE *))(*v191 + 48))(&v188, v191, v79);
                v88 = 1.0
                    / sqrtf((float)((float)(*(float *)&v188 * *(float *)&v188)+ (float)(*((float *)&v188 + 1) * *((float *)&v188 + 1)))+ (float)(v189 * v189));
                *(float *)&v188 = *(float *)&v188 * v88;
                *((float *)&v188 + 1) = *((float *)&v188 + 1) * v88;
                v189 = v189 * v88;
                v215 = v188;
                v216 = v189;
                v89 = (unint64_t)v160;
                v166 = v55;
                if (v53 >= v160)
                {
                  v92 = 0xAAAAAAAAAAAAAAABLL * ((v53 - v57) >> 2) + 1;
                  if (v92 > 0x1555555555555555)
                    goto LABEL_202;
                  if (0x5555555555555556 * ((v160 - v57) >> 2) > v92)
                    v92 = 0x5555555555555556 * ((v160 - v57) >> 2);
                  if (0xAAAAAAAAAAAAAAABLL * ((v160 - v57) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                    v93 = 0x1555555555555555;
                  else
                    v93 = v92;
                  if (v93)
                  {
                    if (v93 > 0x1555555555555555)
                      goto LABEL_201;
                    v94 = (char *)operator new(12 * v93);
                  }
                  else
                  {
                    v94 = 0;
                  }
                  v95 = &v94[4 * ((v53 - v57) >> 2)];
                  *(_QWORD *)v95 = v219;
                  *((float *)v95 + 2) = v220;
                  for (j = v95; v53 != v57; *((_DWORD *)j + 2) = v97)
                  {
                    v96 = *(_QWORD *)(v53 - 12);
                    v53 -= 12;
                    v97 = *((_DWORD *)v53 + 2);
                    *(_QWORD *)(j - 12) = v96;
                    j -= 12;
                  }
                  v89 = (unint64_t)&v94[12 * v93];
                  v91 = v95 + 12;
                  v172 = (char *)v89;
                  if (v57)
                  {
                    v98 = &v94[12 * v93];
                    operator delete(v57);
                    v89 = (unint64_t)v98;
                  }
                  v57 = j;
                }
                else
                {
                  v90 = v219;
                  *((float *)v53 + 2) = v220;
                  *(_QWORD *)v53 = v90;
                  v91 = v53 + 12;
                }
                if ((unint64_t)v91 < v89)
                {
                  *(_QWORD *)v91 = v217;
                  *((float *)v91 + 2) = v218;
                  v99 = v91 + 12;
                  if ((unint64_t)(v91 + 12) >= v89)
                    goto LABEL_138;
                  goto LABEL_120;
                }
                v100 = 0xAAAAAAAAAAAAAAABLL * ((v91 - v57) >> 2) + 1;
                if (v100 > 0x1555555555555555)
                  goto LABEL_200;
                if (0x5555555555555556 * ((uint64_t)(v89 - (_QWORD)v57) >> 2) > v100)
                  v100 = 0x5555555555555556 * ((uint64_t)(v89 - (_QWORD)v57) >> 2);
                v101 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v89 - (_QWORD)v57) >> 2) >= 0xAAAAAAAAAAAAAAALL
                     ? 0x1555555555555555
                     : v100;
                if (v101)
                {
                  if (v101 > 0x1555555555555555)
                    goto LABEL_201;
                  v102 = (char *)operator new(12 * v101);
                }
                else
                {
                  v102 = 0;
                }
                j = &v102[4 * ((v91 - v57) >> 2)];
                v89 = (unint64_t)&v102[12 * v101];
                *(_QWORD *)j = v217;
                *((float *)j + 2) = v218;
                v99 = j + 12;
                if (v91 == v57)
                  break;
                do
                {
                  v103 = *(_QWORD *)(v91 - 12);
                  v91 -= 12;
                  v104 = *((_DWORD *)v91 + 2);
                  *(_QWORD *)(j - 12) = v103;
                  j -= 12;
                  *((_DWORD *)j + 2) = v104;
                }
                while (v91 != v57);
                v172 = &v102[12 * v101];
                if (v57)
                  goto LABEL_136;
LABEL_137:
                v57 = j;
                if ((unint64_t)v99 >= v89)
                {
LABEL_138:
                  v106 = 0xAAAAAAAAAAAAAAABLL * ((v99 - v57) >> 2) + 1;
                  if (v106 > 0x1555555555555555)
                    goto LABEL_200;
                  if (0x5555555555555556 * ((uint64_t)(v89 - (_QWORD)v57) >> 2) > v106)
                    v106 = 0x5555555555555556 * ((uint64_t)(v89 - (_QWORD)v57) >> 2);
                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v89 - (_QWORD)v57) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                    v107 = 0x1555555555555555;
                  else
                    v107 = v106;
                  if (v107)
                  {
                    if (v107 > 0x1555555555555555)
                      goto LABEL_201;
                    v108 = (char *)operator new(12 * v107);
                  }
                  else
                  {
                    v108 = 0;
                  }
                  j = &v108[4 * ((v99 - v57) >> 2)];
                  *(_QWORD *)j = v215;
                  *((float *)j + 2) = v216;
                  v53 = j + 12;
                  v160 = &v108[12 * v107];
                  if (v99 == v57)
                  {
                    v172 = &v108[12 * v107];
                  }
                  else
                  {
                    do
                    {
                      v109 = *(_QWORD *)(v99 - 12);
                      v99 -= 12;
                      v110 = *((_DWORD *)v99 + 2);
                      *(_QWORD *)(j - 12) = v109;
                      j -= 12;
                      *((_DWORD *)j + 2) = v110;
                    }
                    while (v99 != v57);
                    v172 = &v108[12 * v107];
                    if (!v57)
                      goto LABEL_154;
                  }
                  operator delete(v57);
LABEL_154:
                  v57 = j;
                  goto LABEL_155;
                }
LABEL_120:
                v160 = (char *)v89;
                *(_QWORD *)v99 = v215;
                *((float *)v99 + 2) = v216;
                v53 = v99 + 12;
LABEL_155:
                v48 = v154;
                v111 = v162;
                v112 = -1431655765 * ((unint64_t)(v52 - v58) >> 2);
                v171[1] = v53;
                v113 = v112 - 1;
                v114 = v112 - 3;
                v115 = v112 - 2;
                if (v56 < v158)
                {
                  *(_DWORD *)v56 = v114;
                  *((_DWORD *)v56 + 1) = v115;
                  *((_DWORD *)v56 + 2) = v113;
                  v56 += 12;
                  v55 = v166;
                }
                else
                {
                  v116 = __p;
                  v117 = 0xAAAAAAAAAAAAAAABLL * ((v56 - __p) >> 2) + 1;
                  if (v117 > 0x1555555555555555)
LABEL_202:
                    abort();
                  if (0x5555555555555556 * ((v158 - __p) >> 2) > v117)
                    v117 = 0x5555555555555556 * ((v158 - __p) >> 2);
                  if (0xAAAAAAAAAAAAAAABLL * ((v158 - __p) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                    v117 = 0x1555555555555555;
                  v159 = v117;
                  if (v117)
                  {
                    if (v117 > 0x1555555555555555)
LABEL_201:
                      sub_23938C4B8();
                    v157 = v113;
                    v118 = (char *)operator new(12 * v117);
                    v113 = v157;
                    v116 = __p;
                  }
                  else
                  {
                    v118 = 0;
                  }
                  v119 = &v118[4 * ((v56 - __p) >> 2)];
                  *(_DWORD *)v119 = v114;
                  *((_DWORD *)v119 + 1) = v115;
                  *((_DWORD *)v119 + 2) = v113;
                  v120 = v119;
                  if (v56 == v116)
                  {
                    v55 = v166;
                    v121 = v159;
                  }
                  else
                  {
                    v55 = v166;
                    v121 = v159;
                    do
                    {
                      v122 = *(_QWORD *)(v56 - 12);
                      v56 -= 12;
                      v123 = *((_DWORD *)v56 + 2);
                      *(_QWORD *)(v120 - 12) = v122;
                      v120 -= 12;
                      *((_DWORD *)v120 + 2) = v123;
                    }
                    while (v56 != v116);
                  }
                  v56 = v119 + 12;
                  *((_QWORD *)&v169 + 1) = v120;
                  v158 = &v118[12 * v121];
                  *((_QWORD *)&v170 + 1) = v158;
                  if (v116)
                    operator delete(v116);
                  __p = v120;
                  v48 = v154;
                  v111 = v162;
                }
                *(_QWORD *)&v170 = v56;
                v49 = v111 + 3;
                v50 = dword_2393F5B78[16 * v48 + v49];
                if (v50 == -1)
                {
                  v168[1] = v52;
                  *(_QWORD *)&v169 = v55;
                  v171[0] = j;
                  v168[0] = i;
                  goto LABEL_13;
                }
              }
              v172 = &v102[12 * v101];
LABEL_136:
              v105 = &v102[12 * v101];
              operator delete(v57);
              v89 = (unint64_t)v105;
              goto LABEL_137;
            }
LABEL_13:
            v24 = v150;
LABEL_14:
            if (++v24 != v151)
              goto LABEL_15;
            v23 = v146 + 1;
            if (v146 + 1 != v144)
              goto LABEL_11;
            v19 = v143 + 1;
            v16.i32[0] = v142.i32[0];
            if (v143 + 1 == v141)
              break;
            goto LABEL_9;
          }
        }
      }
    }
  }
  v124 = v191;
  if (v191 == v190)
  {
    v125 = 4;
    v124 = v190;
  }
  else
  {
    if (!v191)
      goto LABEL_178;
    v125 = 5;
  }
  (*(void (**)(void))(*v124 + 8 * v125))();
LABEL_178:
  v173 = off_250AD5F48;
  if (v174)
  {
    v175 = v174;
    operator delete(v174);
  }
  if (qword_256930240 != -1)
    dispatch_once(&qword_256930240, &unk_250AD5D30);
  Instance = _CFRuntimeCreateInstance();
  v127 = operator new(0x20uLL, MEMORY[0x24BEDB6B8]);
  v128 = v127;
  if (v127)
  {
    *(_OWORD *)v127 = 0u;
    *((_OWORD *)v127 + 1) = 0u;
  }
  v129 = 0xAAAAAAAAAAAAAAABLL * (((char *)v168[1] - (char *)v168[0]) >> 2);
  v130 = (void *)*((_QWORD *)&v169 + 1);
  v131 = -1431655765 * ((uint64_t)(v170 - *((_QWORD *)&v169 + 1)) >> 2);
  *((_DWORD *)v127 + 6) = v129;
  *((_DWORD *)v127 + 7) = v131;
  v132 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
  v133 = operator new[](0xFFFFFFFAAAAAAAB0 * (((char *)v168[1] - (char *)v168[0]) >> 2), MEMORY[0x24BEDB6B8]);
  *v128 = v133;
  v134 = operator new[](16 * v131, v132);
  v128[1] = v134;
  if ((_DWORD)v129)
  {
    v136 = -1431655765 * (((char *)v168[1] - (char *)v168[0]) >> 2);
    v137 = (char *)v168[0] + 8;
    do
    {
      *(_QWORD *)&v135 = *((_QWORD *)v137 - 1);
      DWORD2(v135) = *v137;
      *v133++ = v135;
      v137 += 3;
      --v136;
    }
    while (v136);
  }
  if (v131)
  {
    v138 = -1431655765 * ((uint64_t)(v170 - *((_QWORD *)&v169 + 1)) >> 2);
    v139 = (_DWORD *)(*((_QWORD *)&v169 + 1) + 8);
    do
    {
      *(_QWORD *)&v135 = *((_QWORD *)v139 - 1);
      DWORD2(v135) = *v139;
      *v134++ = v135;
      v139 += 3;
      --v138;
    }
    while (v138);
  }
  if (Instance)
    *(_QWORD *)(Instance + 16) = v128;
  if (v171[0])
  {
    operator delete(v171[0]);
    v130 = (void *)*((_QWORD *)&v169 + 1);
  }
  if (v130)
    operator delete(v130);
  if (v168[0])
    operator delete(v168[0]);
  return Instance;
}

void sub_2393A6028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_2393A603C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

uint64_t sub_2393A603C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t OCMeshingGetMesh(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v5;
  unint64_t i;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  if (!a2)
    return 4294967294;
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_DWORD *)(v2 + 24);
  if (v3)
  {
    *(_DWORD *)(a2 + 24) = v3;
    v5 = *(unsigned int *)(v2 + 24);
    *(_DWORD *)(a2 + 28) = *(_DWORD *)(v2 + 28);
    *(_QWORD *)a2 = operator new[](16 * v5, MEMORY[0x24BEDB6B8]);
    if ((_DWORD)v5)
    {
      for (i = 0; i < v7; ++i)
      {
        *(_OWORD *)(*(_QWORD *)a2 + 16 * i) = *(_OWORD *)(*(_QWORD *)v2 + 16 * i);
        v7 = *(unsigned int *)(v2 + 24);
      }
    }
    else
    {
      v7 = 0;
    }
    *(_QWORD *)(a2 + 16) = operator new[](8 * v7, MEMORY[0x24BEDB6B8]);
    if (v7)
    {
      v9 = *(_QWORD *)(v2 + 16);
      if (v9)
      {
        v10 = 0;
LABEL_12:
        *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v10) = *(_QWORD *)(v9 + 8 * v10);
        while (++v10 < (unint64_t)*(unsigned int *)(v2 + 24))
        {
          v9 = *(_QWORD *)(v2 + 16);
          if (v9)
            goto LABEL_12;
        }
      }
    }
    v11 = *(unsigned int *)(v2 + 28);
    *(_QWORD *)(a2 + 8) = operator new[](16 * v11, MEMORY[0x24BEDB6B8]);
    if ((_DWORD)v11)
    {
      v12 = 0;
      do
      {
        *(_OWORD *)(*(_QWORD *)(a2 + 8) + 16 * v12) = *(_OWORD *)(*(_QWORD *)(v2 + 8) + 16 * v12);
        ++v12;
      }
      while (v12 < *(unsigned int *)(v2 + 28));
    }
  }
  return 0;
}

CFTypeRef OCMeshingRetain(CFTypeRef cf)
{
  if (cf)
    CFRetain(cf);
  return cf;
}

void OCMeshingRelease(_QWORD *cf)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  if (cf)
  {
    v2 = (_QWORD *)cf[2];
    if (*v2)
    {
      MEMORY[0x23B83C498](*v2, 0x1000C80451B5BE8);
      *v2 = 0;
    }
    v3 = v2[2];
    if (v3)
    {
      MEMORY[0x23B83C498](v3, 0x1000C8000313F17);
      v2[2] = 0;
    }
    v4 = v2[1];
    if (v4)
    {
      MEMORY[0x23B83C498](v4, 0x1000C80451B5BE8);
      v2[1] = 0;
    }
    CFRelease(cf);
  }
}

uint64_t OCCoverageGuideCreate(int *a1, _QWORD *a2)
{
  uint64_t result;
  char *v5;
  char *v6;
  _DWORD *v7;
  __int128 v8;
  int v9;
  unsigned __int8 v10;
  char v11;
  float v12;
  float v13;
  int *v14;
  int *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  int v22;
  __int128 v23;
  int v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  char v34;
  uint64_t v35;
  int v36;
  __int16 v37;
  int v38;

  result = 4294967294;
  if (!a1 || !a2 || !a1[1] || !a1[2] || !a1[4] || !a1[5])
    return result;
  v5 = (char *)operator new(0x58uLL, MEMORY[0x24BEDB6B8]);
  if (!v5)
    return 4294967293;
  v6 = v5;
  *((_OWORD *)v5 + 2) = 0u;
  v7 = v5 + 32;
  *((_QWORD *)v5 + 10) = 0;
  *((_OWORD *)v5 + 3) = 0u;
  *((_OWORD *)v5 + 4) = 0u;
  v8 = *((_OWORD *)a1 + 1);
  *(_OWORD *)v5 = *(_OWORD *)a1;
  *((_OWORD *)v5 + 1) = v8;
  v26 = xmmword_2393F53A0;
  v27 = 0x186A000000000;
  v28 = 1;
  v29 = 0x40A000003DCCCCCDLL;
  v30 = xmmword_2393F53B0;
  v31 = xmmword_2393F53C0;
  v32 = xmmword_2393F53D0;
  v33 = xmmword_2393F53E0;
  v34 = 0;
  v35 = 5;
  v36 = 1096810496;
  v37 = 256;
  v38 = 1065353216;
  switch(*a1)
  {
    case 0:
      LODWORD(v26) = 0;
      goto LABEL_15;
    case 1:
      v9 = 1;
      goto LABEL_14;
    case 2:
      v9 = 2;
      goto LABEL_14;
    case 3:
      v9 = 3;
      goto LABEL_14;
    case 4:
      v9 = 4;
LABEL_14:
      LODWORD(v26) = v9;
LABEL_15:
      DWORD1(v26) = 1;
      LODWORD(v27) = 0;
      HIDWORD(v29) = 1084227584;
      v10 = atomic_load((unsigned __int8 *)&qword_256930538);
      if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_256930538))
      {
        qword_256930530 = sub_2393F2DD8();
        __cxa_atexit((void (*)(void *))sub_2393F2FA4, &qword_256930530, &dword_239388000);
        __cxa_guard_release(&qword_256930538);
      }
      v11 = qword_256930530;
      if (qword_256930530)
        v11 = *(_BYTE *)(qword_256930530 + 24) != 0;
      HIBYTE(v37) = v11;
      v12 = *((float *)a1 + 3);
      v13 = 0.0;
      if (v12 >= 0.0)
      {
        v13 = 1.0;
        if (v12 <= 1.0)
          v13 = *((float *)a1 + 3);
      }
      v38 = LODWORD(v13);
      v14 = (int *)operator new(0x320uLL, MEMORY[0x24BEDB6B8]);
      if (!v14)
      {
        *((_QWORD *)v6 + 5) = 0;
        goto LABEL_33;
      }
      v15 = v14;
      sub_2393DE6D4((uint64_t)v14, &v26);
      *((_QWORD *)v6 + 5) = v15;
      if ((sub_2393DE8B0(v15, *((unsigned int *)v6 + 1), *((unsigned int *)v6 + 2)) & 1) == 0)
      {
        OCCoverageGuideDestroy(v6);
        return 4294967294;
      }
      v16 = operator new(0x130uLL, MEMORY[0x24BEDB6B8]);
      if (!v16)
      {
        *((_QWORD *)v6 + 6) = 0;
        goto LABEL_33;
      }
      v17 = (uint64_t)v16;
      sub_2393F3000((uint64_t)v16);
      *((_QWORD *)v6 + 6) = v17;
      if ((sub_2393F30E4(v17, *((unsigned int *)v6 + 4), *((unsigned int *)v6 + 5), *((unsigned int *)v6 + 6), *((unsigned int *)v6 + 7), (uint64_t)&v26) & 1) == 0)
      {
LABEL_33:
        OCCoverageGuideDestroy(v6);
        return 4294967293;
      }
      *((_QWORD *)v6 + 8) = 0;
      v18 = *((_QWORD *)v6 + 2);
      *(_QWORD *)&v19 = v18;
      *((_QWORD *)&v19 + 1) = HIDWORD(v18);
      v23 = v19;
      v24 = 1111970369;
      v25 = xmmword_2393F53F0;
      if ((sub_2393C4B50(&v23, (CVPixelBufferPoolRef *)v6 + 9) & 1) != 0
        && (v20 = *((_QWORD *)v6 + 3),
            *(_QWORD *)&v21 = v20,
            *((_QWORD *)&v21 + 1) = HIDWORD(v20),
            v23 = v21,
            v24 = 1717855600,
            (sub_2393C4B50(&v23, (CVPixelBufferPoolRef *)v6 + 10) & 1) != 0))
      {
        *a2 = v6;
        v22 = *a1;
        if ((*a1 - 1) < 2)
          goto LABEL_38;
        if ((v22 - 3) < 2)
        {
          result = 0;
          *v7 = 0x40000000;
          return result;
        }
        if (v22)
        {
          return 0xFFFFFFFFLL;
        }
        else
        {
LABEL_38:
          result = 0;
          *v7 = 1077936128;
        }
      }
      else
      {
        OCCoverageGuideDestroy(v6);
        return 0xFFFFFFFFLL;
      }
      return result;
    default:
      return 0xFFFFFFFFLL;
  }
}

void sub_2393A65CC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_256930538);
  _Unwind_Resume(a1);
}

void sub_2393A65E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B83C4B0](v1, MEMORY[0x24BEDB6B8]);
  _Unwind_Resume(a1);
}

_QWORD *OCCoverageGuideDestroy(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  id *v4;
  uint64_t v5;
  uint64_t v6;
  const void *v7;
  __CVPixelBufferPool *v8;

  if (result)
  {
    v1 = result;
    v2 = result[5];
    if (v2)
    {
      v3 = sub_2393A6770(v2);
      MEMORY[0x23B83C4BC](v3, 0x10E0C40FDB0B8DBLL);
      v1[5] = 0;
    }
    v4 = (id *)v1[6];
    if (v4)
    {

      MEMORY[0x23B83C4BC](v4, 0x10E0C4013A4462ALL);
      v1[6] = 0;
    }
    v5 = v1[7];
    if (v5)
    {
      if (*(_QWORD *)v5)
        CFRelease(*(CFTypeRef *)v5);
      *(_QWORD *)v5 = 0;
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
      {
        MEMORY[0x23B83C498](v6, 0x1000C8052888210);
        *(_QWORD *)(v5 + 8) = 0;
      }
      MEMORY[0x23B83C4BC](v5, 0x10A0C40D63CFB62);
      v1[7] = 0;
    }
    v7 = (const void *)v1[8];
    if (v7)
    {
      CFRelease(v7);
      v1[8] = 0;
    }
    v8 = (__CVPixelBufferPool *)v1[9];
    if (v8)
    {
      CVPixelBufferPoolRelease(v8);
      v1[9] = 0;
    }
    JUMPOUT(0x23B83C4BCLL);
  }
  return result;
}

uint64_t sub_2393A6770(uint64_t a1)
{
  void *v2;
  void *v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = *(void **)(a1 + 768);
  if (v2)
  {
    *(_QWORD *)(a1 + 776) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 744);
  if (v3)
  {
    *(_QWORD *)(a1 + 752) = v3;
    operator delete(v3);
  }
  v4 = *(_QWORD **)(a1 + 704);
  if (v4)
  {
    do
    {
      v5 = (_QWORD *)*v4;
      operator delete(v4);
      v4 = v5;
    }
    while (v5);
  }
  v6 = *(void **)(a1 + 688);
  *(_QWORD *)(a1 + 688) = 0;
  if (v6)
    operator delete(v6);

  v7 = *(void **)(a1 + 152);
  if (v7)
  {
    *(_QWORD *)(a1 + 160) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 128);
  if (v8)
  {
    *(_QWORD *)(a1 + 136) = v8;
    operator delete(v8);
  }
  return a1;
}

uint64_t OCCoverageGuideStart(uint64_t a1)
{
  if (!a1)
    return 4294967294;
  if (*(_QWORD *)(a1 + 56))
    return 0xFFFFFFFFLL;
  if (*(_QWORD *)(a1 + 64))
    return 0xFFFFFFFFLL;
  return 0;
}

uint64_t OCCoverageGuideAddCameraShot(uint64_t a1, __n128 a2, __n128 a3, __n128 a4, simd_float4 a5, simd_float4 a6, simd_float4 a7, simd_float4 a8)
{
  uint64_t v10;
  __n128 v11;
  __n128 v12;
  __n128 v13;
  simd_float4 v14;
  simd_float4 v15;
  simd_float4 v16;
  simd_float4 v17;
  simd_float4x4 v18;
  simd_float4x4 v19;

  if (!a1)
    return 4294967294;
  if (!*(_QWORD *)(a1 + 40))
    return 4294967294;
  v10 = *(_QWORD *)(a1 + 4);
  v11 = a2;
  v12 = a3;
  v13 = a4;
  v14 = a5;
  v15 = a6;
  v16 = a7;
  v17 = a8;
  v19.columns[0] = a5;
  v19.columns[1] = a6;
  v19.columns[2] = a7;
  v19.columns[3] = a8;
  v18 = __invert_f4(v19);
  sub_2393E0C98(*(_QWORD *)(a1 + 40), (uint64_t)&v10);
  return 0;
}

uint64_t OCCoverageGuideCompute(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  float v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t *v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  uint32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  uint32x4_t v19;
  float32x4_t v20;
  int8x16_t v21;
  float32x2_t v22;
  uint32x2_t v23;
  int32x4_t *v24;
  unint64_t v25;
  unint64_t v30;
  int32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  uint32x4_t v34;
  __int32 *v36;
  uint64_t v37;
  float32x4_t v38;
  unint64_t v39;
  __int32 *v40;
  uint64_t v41;
  __int32 *v42;
  uint64_t v43;
  __int32 v44;
  uint64_t v45;
  uint64_t v46;
  int64x2_t v47;
  float *v48;
  float *v49;
  unint64_t v50;
  unint64_t v51;
  float *v52;
  uint64_t v53;
  float32x4_t *v54;
  int64x2_t v55;
  float32x4_t v56;
  int8x16_t v57;
  uint64_t v58;
  int64x2_t v59;
  int64x2_t v60;
  int64x2_t v61;
  int32x4_t v62;
  int8x16_t v63;
  int64x2_t v64;
  int64x2_t v65;
  int32x4_t v66;
  int64x2_t v67;
  float v68;
  int8x16_t v69;
  int v70;
  unint64_t v71;
  const char *v72;
  uint64_t v73;
  void *v74;
  const char *v75;
  uint64_t v76;
  size_t v77;
  uint64_t v78;
  uint64_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float v83;
  int v84;
  float32x4_t *v85;
  uint64_t v86;
  uint64_t v87;
  float v88;
  unint64_t v89;
  const char *v90;
  uint64_t v91;
  void *v92;
  const char *v93;
  uint64_t v94;
  size_t v95;
  const char *v96;
  uint64_t v97;
  void *v98;
  const char *v99;
  uint64_t v100;
  size_t v101;
  const char *v102;
  uint64_t v103;
  void *v104;
  const char *v105;
  uint64_t v106;
  size_t v107;
  const char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  const char *v114;
  uint64_t v115;
  size_t v116;
  const char *v117;
  uint64_t v118;
  void *v119;
  const char *v120;
  uint64_t v121;
  size_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float v126;
  char v127;
  char v128;
  unint64_t v129;
  const char *v130;
  uint64_t v131;
  void *v132;
  const char *v133;
  uint64_t v134;
  size_t v135;
  const char *v136;
  uint64_t v137;
  void *v138;
  const char *v139;
  uint64_t v140;
  size_t v141;
  const char *v142;
  uint64_t v143;
  void *v144;
  const char *v145;
  uint64_t v146;
  size_t v147;
  const char *v148;
  uint64_t v149;
  void *v150;
  const char *v151;
  uint64_t v152;
  size_t v153;
  uint64_t v154;
  uint64_t v155;
  const char *v156;
  uint64_t v157;
  void *v158;
  const char *v159;
  uint64_t v160;
  size_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float v165;
  uint64_t v166;
  unint64_t v167;
  float v168;
  int v169;
  uint64_t v170;
  float32x4_t *v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float v175;
  unint64_t v176;
  const char *v177;
  uint64_t v178;
  void *v179;
  const char *v180;
  uint64_t v181;
  size_t v182;
  unint64_t v183;
  const char *v184;
  uint64_t v185;
  void *v186;
  const char *v187;
  uint64_t v188;
  size_t v189;
  const char *v190;
  uint64_t v191;
  void *v192;
  const char *v193;
  uint64_t v194;
  size_t v195;
  uint64_t v196;
  float32x4_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float v200;
  char *v201;
  unint64_t v202;
  char *v203;
  unint64_t v205;
  float32x4_t *v206;
  float32x4_t *v207;
  unint64_t v208;
  unint64_t v209;
  uint64_t v210;
  __int32 *v211;
  float *v212;
  float v213;
  uint64_t v214;
  unint64_t v215;
  const char *v216;
  uint64_t v217;
  int8x16_t v218;
  uint64_t v219;
  uint64_t v220;
  const char *v221;
  uint64_t v222;
  void *v223;
  const char *v224;
  uint64_t v225;
  size_t v226;
  const char *v227;
  uint64_t v228;
  unint64_t v229;
  int32x4_t v230;
  float32x2_t v231;
  unint64_t v232;
  uint64_t v233;
  void *v234;
  const char *v235;
  void *v236;
  const char *v237;
  id v238;
  const char *v239;
  uint64_t v240;
  unint64_t v241;
  unint64_t v242;
  float32x4_t v243;
  float32x4_t v244;
  uint64_t v245;
  float32x4_t v246;
  float32x4_t *v247;
  float32x4_t v248;
  float32x4_t v249;
  float32x4_t v250;
  uint32x4_t v251;
  float32x4_t v252;
  float32x4_t v253;
  float32x4_t v254;
  float32x4_t v255;
  uint32x4_t v256;
  float32x4_t v257;
  uint32x2_t v258;
  float v259;
  float v260;
  float v261;
  float v262;
  float v263;
  unsigned int v264;
  unint64_t v265;
  float32x4_t v266;
  float32x4_t v267;
  float32x4_t v268;
  float32x4_t v269;
  float32x4_t v270;
  float32x4_t v271;
  id v272;
  const char *v273;
  const char *v274;
  const char *v275;
  const char *v276;
  const char *v277;
  const char *v278;
  const char *v279;
  uint64_t v280;
  id v281;
  const char *v282;
  uint64_t v283;
  const char *v284;
  const char *v285;
  const char *v286;
  const char *v287;
  const char *v288;
  const char *v289;
  const char *v290;
  const char *v291;
  const char *v292;
  uint64_t v293;
  const char *v294;
  uint64_t v295;
  const char *v296;
  uint64_t v297;
  char *v298;
  unint64_t v299;
  float32x4_t *v300;
  unint64_t v301;
  unint64_t v302;
  uint64_t v303;
  __int32 *v304;
  float *v305;
  float v306;
  float32x4_t *v307;
  float32x4_t *v308;
  unint64_t v309;
  int32x4_t v310;
  _DWORD *v311;
  unint64_t v312;
  unint64_t v313;
  unint64_t v314;
  void *v315;
  float32x4_t v316;
  float32x4_t v317;
  float32x4_t v318;
  float32x4_t v319;
  uint64_t v320;
  uint64_t v321;
  float32x4_t v322;
  float v323[4];
  float32x4_t v324;
  float32x4_t v325;
  float32x4_t v326;
  int8x16_t v327;
  unint64_t v328;
  int32x4_t *v329;
  float32x4_t v330;
  float32x4_t v331;
  void *__p[2];
  void *v333;
  float32x4_t *v334;
  float32x4_t *v335;
  uint64_t v336;
  void *v337[2];
  void (*v338)(_QWORD *, const char *, uint64_t);
  void *v339;
  uint64_t v340;
  float32x4_t **v341;
  unint64_t v342;
  int64x2_t v343;
  uint64_t v344;
  int v345;
  float32x4_t block;
  float32x4_t v347;
  float32x4_t v348;
  float32x4_t v349;
  _DWORD v350[3];

  v2 = 4294967294;
  if (!a1)
    return v2;
  if (!a2)
    return v2;
  v5 = *(_QWORD *)(a1 + 40);
  if (!v5)
    return v2;
  __p[0] = 0;
  __p[1] = 0;
  v333 = 0;
  v6 = *(float *)(a2 + 16);
  if (v6 > 0.0)
  {
    v7 = *(float32x4_t *)(a2 + 32);
    v8 = *(float32x4_t *)(a2 + 48);
    v9 = *(float32x4_t *)(a2 + 64);
    v10 = (float32x4_t *)MEMORY[0x24BDAEDF8];
    v11 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 16);
    v12 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 32);
    v13 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
    v14 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v13, vabdq_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v7, *(float32x2_t *)v7.f32, 1), v8, *(float32x2_t *)v8.f32, 1), v9, *(float32x2_t *)v9.f32, 1), v11)), (int8x16_t)vcgeq_f32(v13, vabdq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v7, v7.f32[0]), v8, v8.f32[0]),
                                           v9,
                                           v9.f32[0]),
                                         *MEMORY[0x24BDAEDF8]))),
                        (int8x16_t)vcgeq_f32(v13, vabdq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v7, v7, 2), v8, v8, 2), v9, v9, 2), v12)));
    v14.i32[3] = v14.i32[2];
    if ((vminvq_u32(v14) & 0x80000000) != 0)
    {
      v15 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v8, 2);
      v16 = (float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)v7, (int32x4_t)v9), (int32x4_t)v15);
      v17 = (float32x4_t)vtrn2q_s32((int32x4_t)v7, (int32x4_t)v8);
      v17.i32[2] = HIDWORD(*(_QWORD *)(a2 + 64));
      v18 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)v7, (int32x4_t)v9), (int32x4_t)v8);
      v19 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v13, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v18, v8.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 1), v17), v15, v16), v11)), (int8x16_t)vcgeq_f32(v13, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v18, v7.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1),
                                               v17),
                                             (float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2),
                                             v16),
                                           *MEMORY[0x24BDAEDF8]))),
                          (int8x16_t)vcgeq_f32(v13, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v18, v9.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1), v17), (float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), v16), v12)));
      v19.i32[3] = v19.i32[2];
      if ((vminvq_u32(v19) & 0x80000000) != 0)
      {
        v20 = vmulq_f32(v7, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v9, (int8x16_t)v9, 0xCuLL), (int8x16_t)v9, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v8, (int32x4_t)v8), (int8x16_t)v8, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v9, (int32x4_t)v9), (int8x16_t)v9, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v8, (int8x16_t)v8, 0xCuLL), (int8x16_t)v8, 8uLL)));
        if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 2), vaddq_f32(v20, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 1))).f32[0]+ -1.0) <= 0.000011)
        {
          v21 = *(int8x16_t *)(a2 + 80);
          v22 = (float32x2_t)vdup_n_s32(0x38D1B717u);
          v23 = (uint32x2_t)vand_s8((int8x8_t)vcge_f32(v22, vabs_f32(vadd_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL)), (float32x2_t)0xBF80000080000000))), (int8x8_t)vcge_f32(v22, vabs_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v7, (int8x16_t)v7, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(
                                                                                           (int8x16_t)v8,
                                                                                           (int8x16_t)v8,
                                                                                           8uLL)))));
          if ((vpmin_u32(v23, v23).u32[0] & 0x80000000) != 0)
          {
            v24 = *(int32x4_t **)(a2 + 96);
            v25 = -1431655765 * ((uint64_t)(*(_QWORD *)(a2 + 104) - (_QWORD)v24) >> 4);
            if (-1431655765 * ((uint64_t)(*(_QWORD *)(a2 + 104) - (_QWORD)v24) >> 4))
            {
              if (v24)
              {
                v330 = 0uLL;
                __asm { FMOV            V5.4S, #-1.0 }
                v331 = _Q5;
                v323[0] = v6;
                v324 = v7;
                v325 = v8;
                v326 = v9;
                v327 = v21;
                v30 = v25;
                v328 = v25;
                v329 = v24;
                do
                {
                  v31 = *v24;
                  v33 = v330;
                  v32 = v331;
                  v34 = (uint32x4_t)vcgtq_f32(v330, v331);
                  v34.i32[3] = v34.i32[2];
                  if ((vmaxvq_u32(v34) & 0x80000000) != 0)
                  {
                    v330 = vcvtq_f32_s32(v31);
                    v331 = v330;
                  }
                  else
                  {
                    if (v330.f32[0] > (float)v31.i32[0])
                      v330.f32[0] = (float)v31.i32[0];
                    if (v331.f32[0] < (float)v31.i32[0])
                      v331.f32[0] = (float)v31.i32[0];
                    if (v33.f32[1] > (float)v31.i32[1])
                      v330.f32[1] = (float)v31.i32[1];
                    if (v32.f32[1] < (float)v31.i32[1])
                      v331.f32[1] = (float)v31.i32[1];
                    if (v33.f32[2] > (float)v31.i32[2])
                      v330.f32[2] = (float)v31.i32[2];
                    if (v32.f32[2] < (float)v31.i32[2])
                      v331.f32[2] = (float)v31.i32[2];
                  }
                  v24 += 3;
                  --v30;
                }
                while (v30);
                if (*(_DWORD *)(v5 + 4) != 1 || v25 < *(unsigned int *)(v5 + 16))
                  goto LABEL_29;
                __p[1] = 0;
                block.i32[0] = 0;
                v36 = (__int32 *)operator new(4 * v25);
                v39 = (v25 - 1) & 0x3FFFFFFFFFFFFFFFLL;
                v40 = v36;
                if (v39 >= 0x13)
                {
                  if (v36 >= &block.i32[1] || (v40 = v36, &v36[v25] <= (__int32 *)&block))
                  {
                    v41 = (v39 + 1) & 0x7FFFFFFFFFFFFFF8;
                    v38 = 0uLL;
                    v42 = v36;
                    v43 = v41;
                    do
                    {
                      *(_OWORD *)v42 = 0uLL;
                      *((_OWORD *)v42 + 1) = 0uLL;
                      v42 += 8;
                      v43 -= 8;
                    }
                    while (v43);
                    if (v39 + 1 == v41)
                    {
LABEL_42:
                      __p[0] = v36;
                      __p[1] = &v36[v25];
                      v333 = __p[1];
                      v45 = *(_QWORD *)(v5 + 128);
                      v46 = *(_QWORD *)(v5 + 136);
                      if (v45 == v46)
                        goto LABEL_136;
                      if (!*(_BYTE *)(v5 + 120)
                        || *(_QWORD *)(v5 + 736) != 0xAAAAAAAAAAAAAAABLL * ((v46 - v45) >> 6)
                        || !*(_QWORD *)(v5 + 712))
                      {
LABEL_57:
                        if (!*(_BYTE *)(v5 + 121) || *(_DWORD *)v5)
                        {
                          v337[0] = 0;
                          v337[1] = 0;
                          v338 = 0;
                          if (!*(_BYTE *)(v5 + 480))
                            goto LABEL_29;
                          if (!sub_2393C11E4(v5 + 192, (uint64_t)v323, v37))
                            goto LABEL_131;
                          v70 = *(_DWORD *)v5;
                          if (*(_DWORD *)v5 == 4)
                          {
                            if (*(_BYTE *)(v5 + 481) && *(_DWORD *)(v5 + 384) == 4)
                            {
                              v129 = *(unsigned int *)(v5 + 484);
                              block.i32[0] = 0;
                              sub_2393C1758((uint64_t)__p, v129, block.f32);
                              if (*(_QWORD *)(v5 + 128) == *(_QWORD *)(v5 + 136))
                                goto LABEL_138;
                              v132 = (void *)objc_msgSend_contents(*(void **)(v5 + 328), v130, v131);
                              v135 = objc_msgSend_length(*(void **)(v5 + 328), v133, v134);
                              bzero(v132, v135);
                              v138 = (void *)objc_msgSend_contents(*(void **)(v5 + 656), v136, v137);
                              v141 = objc_msgSend_length(*(void **)(v5 + 656), v139, v140);
                              bzero(v138, v141);
                              v144 = (void *)objc_msgSend_contents(*(void **)(v5 + 664), v142, v143);
                              v147 = objc_msgSend_length(*(void **)(v5 + 664), v145, v146);
                              bzero(v144, v147);
                              v150 = (void *)objc_msgSend_contents(*(void **)(v5 + 672), v148, v149);
                              v153 = objc_msgSend_length(*(void **)(v5 + 672), v151, v152);
                              bzero(v150, v153);
                              v154 = *(_QWORD *)(v5 + 128);
                              v155 = *(_QWORD *)(v5 + 136);
                              if (v154 == v155)
                              {
LABEL_99:
                                sub_2393C23E0(v5 + 192, (const char *)__p, 0);
                                goto LABEL_138;
                              }
                              while (1)
                              {
                                kdebug_trace();
                                v158 = (void *)objc_msgSend_contents(*(void **)(v5 + 648), v156, v157);
                                v161 = objc_msgSend_length(*(void **)(v5 + 648), v159, v160);
                                bzero(v158, v161);
                                v343 = *(int64x2_t *)(v154 + 112);
                                v162 = *(float32x4_t *)(v154 + 144);
                                v163 = *(float32x4_t *)(v154 + 160);
                                v164 = *(float32x4_t *)(v154 + 176);
                                block = *(float32x4_t *)(v154 + 128);
                                v347 = v162;
                                v348 = v163;
                                v349 = v164;
                                v165 = atan2f((float)*(unsigned int *)(v154 + 4), *(float *)(v154 + 36) + *(float *)(v154 + 36));
                                if (!sub_2393C1960(v5 + 192, (uint64_t)&block, (uint64_t)&v343, 0, 0, 0, v165 + v165))break;
                                kdebug_trace();
                                v154 += 192;
                                if (v154 == v155)
                                  goto LABEL_99;
                              }
                            }
LABEL_131:
                            v84 = -2;
                            goto LABEL_132;
                          }
                          if (v70 == 3)
                          {
                            if (*(_BYTE *)(v5 + 481) && *(_DWORD *)(v5 + 384) == 3)
                            {
                              v89 = *(unsigned int *)(v5 + 484);
                              block.i32[0] = 0;
                              sub_2393C1758((uint64_t)__p, v89, block.f32);
                              if (*(_QWORD *)(v5 + 128) == *(_QWORD *)(v5 + 136))
                                goto LABEL_138;
                              v92 = (void *)objc_msgSend_contents(*(void **)(v5 + 624), v90, v91);
                              v95 = objc_msgSend_length(*(void **)(v5 + 624), v93, v94);
                              bzero(v92, v95);
                              v98 = (void *)objc_msgSend_contents(*(void **)(v5 + 632), v96, v97);
                              v101 = objc_msgSend_length(*(void **)(v5 + 632), v99, v100);
                              bzero(v98, v101);
                              v104 = (void *)objc_msgSend_contents(*(void **)(v5 + 640), v102, v103);
                              v107 = objc_msgSend_length(*(void **)(v5 + 640), v105, v106);
                              bzero(v104, v107);
                              v110 = *(_QWORD *)(v5 + 128);
                              v111 = *(_QWORD *)(v5 + 136);
                              if (v110 == v111)
                                goto LABEL_138;
                              v112 = v110 + 192;
                              do
                              {
                                v113 = (void *)objc_msgSend_contents(*(void **)(v5 + 328), v108, v109);
                                v116 = objc_msgSend_length(*(void **)(v5 + 328), v114, v115);
                                bzero(v113, v116);
                                v119 = (void *)objc_msgSend_contents(*(void **)(v5 + 616), v117, v118);
                                v122 = objc_msgSend_length(*(void **)(v5 + 616), v120, v121);
                                bzero(v119, v122);
                                v343 = *(int64x2_t *)(v112 - 80);
                                v123 = *(float32x4_t *)(v112 - 48);
                                v124 = *(float32x4_t *)(v112 - 32);
                                v125 = *(float32x4_t *)(v112 - 16);
                                block = *(float32x4_t *)(v112 - 64);
                                v347 = v123;
                                v348 = v124;
                                v349 = v125;
                                v126 = atan2f((float)*(unsigned int *)(v112 - 188), *(float *)(v112 - 156) + *(float *)(v112 - 156));
                                v127 = sub_2393C1960(v5 + 192, (uint64_t)&block, (uint64_t)&v343, 0, 0, __p, v126 + v126);
                                if (v112 == v111)
                                  v128 = 0;
                                else
                                  v128 = v127;
                                v112 += 192;
                              }
                              while ((v128 & 1) != 0);
                              if ((v127 & 1) != 0)
                                goto LABEL_138;
                            }
                            goto LABEL_131;
                          }
                          if (v70 == 2)
                          {
                            if (*(_BYTE *)(v5 + 481) && *(_DWORD *)(v5 + 384) == 2)
                            {
                              v71 = *(unsigned int *)(v5 + 484);
                              block.i32[0] = 0;
                              sub_2393C1758((uint64_t)__p, v71, block.f32);
                              if (*(_QWORD *)(v5 + 128) != *(_QWORD *)(v5 + 136))
                              {
                                v74 = (void *)objc_msgSend_contents(*(void **)(v5 + 328), v72, v73);
                                v77 = objc_msgSend_length(*(void **)(v5 + 328), v75, v76);
                                bzero(v74, v77);
                                v78 = *(_QWORD *)(v5 + 128);
                                v79 = *(_QWORD *)(v5 + 136);
                                if (v78 != v79)
                                {
                                  while (1)
                                  {
                                    v343 = *(int64x2_t *)(v78 + 112);
                                    v80 = *(float32x4_t *)(v78 + 144);
                                    v81 = *(float32x4_t *)(v78 + 160);
                                    v82 = *(float32x4_t *)(v78 + 176);
                                    block = *(float32x4_t *)(v78 + 128);
                                    v347 = v80;
                                    v348 = v81;
                                    v349 = v82;
                                    v83 = atan2f((float)*(unsigned int *)(v78 + 4), *(float *)(v78 + 36) + *(float *)(v78 + 36));
                                    if ((sub_2393C1960(v5 + 192, (uint64_t)&block, (uint64_t)&v343, 0, 0, 0, v83 + v83) & 1) == 0)goto LABEL_131;
                                    v78 += 192;
                                    if (v78 == v79)
                                      goto LABEL_99;
                                  }
                                }
                                goto LABEL_99;
                              }
LABEL_138:
                              if (*(_BYTE *)(v5 + 100))
                              {
                                sub_2393DF040(&block, v5, (uint64_t)v323, __p);
                                if (__p[0])
                                {
                                  __p[1] = __p[0];
                                  operator delete(__p[0]);
                                }
                                v38.i64[0] = block.i64[0];
                                *(float32x4_t *)__p = block;
                                v333 = (void *)v347.i64[0];
                              }
                              if (*(_BYTE *)(v5 + 120))
                                sub_2393DF588(v5, (uint64_t)v323, __p, *(double *)v38.i64, v69);
                              v84 = 0;
LABEL_132:
                              v85 = (float32x4_t *)v337[0];
                              if (v337[0])
                              {
                                v337[1] = v337[0];
                                goto LABEL_134;
                              }
LABEL_135:
                              if (!v84)
                              {
LABEL_136:
                                v38.i32[0] = *(_DWORD *)(a1 + 32);
                                sub_2393C45A4((float *)__p[0], (float *)__p[1], *(double *)v38.i64);
                                v2 = sub_2393A1C20((float **)__p, (const void *)a2, (uint64_t *)(a1 + 56));
                                if (!(_DWORD)v2)
                                {
                                  sub_2393A1EC8(*(float32x4_t ***)(a1 + 56), (CFTypeRef *)(a1 + 64));
                                  v2 = v214;
                                }
                                goto LABEL_30;
                              }
LABEL_29:
                              v2 = 0xFFFFFFFFLL;
                              goto LABEL_30;
                            }
                            goto LABEL_131;
                          }
                          v166 = *(_QWORD *)(v5 + 128);
                          if (*(_QWORD *)(v5 + 136) == v166)
                            goto LABEL_138;
                          v167 = 0;
                          v38.f32[0] = v323[0];
                          *(float *)v69.i32 = (float)v328;
                          v168 = v323[0] * (float)v328;
                          while (1)
                          {
                            v169 = *(_DWORD *)v5;
                            if ((*(_DWORD *)v5 - 2) >= 3)
                            {
                              v170 = v166 + 192 * v167;
                              if (v169 == 1)
                              {
                                LODWORD(v334) = *(_DWORD *)(*(_QWORD *)(v5 + 152) + 4 * v167);
                                *(float *)v350 = v168;
                                if (!*(_BYTE *)(v5 + 481))
                                  goto LABEL_131;
                                if (v168 < 0.0)
                                  goto LABEL_131;
                                if (*(_DWORD *)(v5 + 384) != 1)
                                  goto LABEL_131;
                                v183 = *(unsigned int *)(v5 + 484);
                                block.i32[0] = 0;
                                sub_2393C1758((uint64_t)v337, v183, block.f32);
                                v186 = (void *)objc_msgSend_contents(*(void **)(v5 + 328), v184, v185);
                                v189 = objc_msgSend_length(*(void **)(v5 + 328), v187, v188);
                                bzero(v186, v189);
                                v192 = (void *)objc_msgSend_contents(*(void **)(v5 + 600), v190, v191);
                                v195 = objc_msgSend_length(*(void **)(v5 + 600), v193, v194);
                                bzero(v192, v195);
                                v196 = v166 + 192 * v167;
                                v343 = *(int64x2_t *)(v196 + 112);
                                v197 = *(float32x4_t *)(v196 + 144);
                                v198 = *(float32x4_t *)(v196 + 160);
                                v199 = *(float32x4_t *)(v196 + 176);
                                block = *(float32x4_t *)(v196 + 128);
                                v347 = v197;
                                v348 = v198;
                                v349 = v199;
                                v200 = atan2f((float)*(unsigned int *)(v196 + 4), *(float *)(v170 + 36) + *(float *)(v170 + 36));
                                if ((sub_2393C1960(v5 + 192, (uint64_t)&block, (uint64_t)&v343, (uint64_t)&v334, (uint64_t)v350, v337, v200 + v200) & 1) == 0)goto LABEL_131;
                              }
                              else
                              {
                                if (v169)
                                {
                                  v84 = -3;
                                  goto LABEL_132;
                                }
                                v171 = (float32x4_t *)(v166 + 192 * v167);
                                v172 = v171[9];
                                v173 = v171[10];
                                v174 = v171[11];
                                block = v171[8];
                                v347 = v172;
                                v348 = v173;
                                v349 = v174;
                                v38.f32[0] = atan2f((float)v171->u32[1], *(float *)(v170 + 36) + *(float *)(v170 + 36));
                                if (!*(_BYTE *)(v5 + 481))
                                  goto LABEL_131;
                                if (*(_DWORD *)(v5 + 384))
                                  goto LABEL_131;
                                v175 = v38.f32[0];
                                v176 = *(unsigned int *)(v5 + 484);
                                v343.i32[0] = 0;
                                sub_2393C1758((uint64_t)v337, v176, (const float *)v343.i32);
                                v179 = (void *)objc_msgSend_contents(*(void **)(v5 + 328), v177, v178);
                                v182 = objc_msgSend_length(*(void **)(v5 + 328), v180, v181);
                                bzero(v179, v182);
                                if ((sub_2393C1960(v5 + 192, (uint64_t)&block, 0, 0, 0, v337, v175 + v175) & 1) == 0)
                                  goto LABEL_131;
                              }
                            }
                            v201 = (char *)__p[0];
                            if (__p[1] != __p[0])
                            {
                              v202 = ((char *)__p[1] - (char *)__p[0]) >> 2;
                              v203 = (char *)v337[0];
                              if (v202 <= 1)
                                v202 = 1;
                              if (v202 >= 8
                                && (__p[0] < (char *)v337[0] + 4 * v202
                                  ? (_CF = v337[0] >= (char *)__p[0] + 4 * v202)
                                  : (_CF = 1),
                                    _CF))
                              {
                                v205 = v202 & 0xFFFFFFFFFFFFFFF8;
                                v206 = (float32x4_t *)((char *)__p[0] + 16);
                                v207 = (float32x4_t *)((char *)v337[0] + 16);
                                v208 = v202 & 0xFFFFFFFFFFFFFFF8;
                                do
                                {
                                  v38 = vaddq_f32(v207[-1], v206[-1]);
                                  v69 = (int8x16_t)vaddq_f32(*v207, *v206);
                                  v206[-1] = v38;
                                  *v206 = (float32x4_t)v69;
                                  v206 += 2;
                                  v207 += 2;
                                  v208 -= 8;
                                }
                                while (v208);
                                if (v202 == v205)
                                  goto LABEL_102;
                              }
                              else
                              {
                                v205 = 0;
                              }
                              v209 = v202 - v205;
                              v210 = 4 * v205;
                              v211 = (__int32 *)&v201[v210];
                              v212 = (float *)&v203[v210];
                              do
                              {
                                v213 = *v212++;
                                v69.i32[0] = *v211;
                                v38.f32[0] = v213 + *(float *)v211;
                                *v211++ = v38.i32[0];
                                --v209;
                              }
                              while (v209);
                            }
LABEL_102:
                            ++v167;
                            v166 = *(_QWORD *)(v5 + 128);
                            if (v167 >= 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v5 + 136) - v166) >> 6))
                              goto LABEL_138;
                          }
                        }
                        v334 = 0;
                        v335 = 0;
                        v336 = 0;
                        if (!*(_BYTE *)(v5 + 480))
                          goto LABEL_29;
                        if (!sub_2393C11E4(v5 + 192, (uint64_t)v323, v37)
                          || *(_DWORD *)v5
                          || (v215 = *(unsigned int *)(v5 + 484),
                              block.i32[0] = 0,
                              sub_2393C1758((uint64_t)&v334, v215, block.f32),
                              !*(_BYTE *)(v5 + 481))
                          || (v311 = (_DWORD *)(v5 + 484),
                              *(_DWORD *)(v5 + 484) > ((unint64_t)((char *)v335 - (char *)v334) >> 2))
                          || (v219 = *(_QWORD *)(v5 + 752),
                              v220 = *(_QWORD *)(v5 + 744),
                              (v219 - v220) >> 6 != (uint64_t)(*(_QWORD *)(v5 + 776) - *(_QWORD *)(v5 + 768)) >> 2))
                        {
                          v84 = -2;
                          v85 = v334;
                          if (!v334)
                            goto LABEL_135;
                          goto LABEL_75;
                        }
                        if (v220 != v219)
                        {
                          objc_msgSend_commandBuffer(*(void **)(*(_QWORD *)(v5 + 192) + 8), v216, v217);
                          v315 = (void *)objc_claimAutoreleasedReturnValue();
                          v223 = (void *)objc_msgSend_contents(*(void **)(v5 + 328), v221, v222);
                          v226 = objc_msgSend_length(*(void **)(v5 + 328), v224, v225);
                          bzero(v223, v226);
                          v228 = 128;
                          if ((unint64_t)((uint64_t)(*(_QWORD *)(v5 + 752) - *(_QWORD *)(v5 + 744)) >> 6) < 0x80)
                            v228 = (uint64_t)(*(_QWORD *)(v5 + 752) - *(_QWORD *)(v5 + 744)) >> 6;
                          v313 = (uint64_t)(*(_QWORD *)(v5 + 752) - *(_QWORD *)(v5 + 744)) >> 6;
                          v314 = v228;
                          v312 = vcvtps_u32_f32((float)(unint64_t)v228 / 5.0);
                          if (v312)
                          {
                            v320 = 0;
                            v321 = 0;
                            v229 = 5;
                            v230 = vdupq_n_s32(0x38D1B717u);
                            v322 = (float32x4_t)v230;
                            v231 = (float32x2_t)vdup_n_s32(0x38D1B717u);
                            v230.i64[0] = 0;
                            v310 = v230;
                            do
                            {
                              v232 = v313;
                              if (v313 >= v229)
                                v232 = v229;
                              if (v232 >= 0x80)
                                v233 = 128;
                              else
                                v233 = v232;
                              objc_msgSend_renderCommandEncoderWithDescriptor_(v315, v227, *(_QWORD *)(v5 + 520), *(_OWORD *)&v310);
                              v234 = (void *)objc_claimAutoreleasedReturnValue();
                              v236 = v234;
                              if (v234)
                              {
                                objc_msgSend_setLabel_(v234, v235, (uint64_t)CFSTR("CoverageVisibilityTileEncoder"));
                                block = 0uLL;
                                v347 = (float32x4_t)vcvtq_f64_u64(*(uint64x2_t *)(v5 + 400));
                                v348 = (float32x4_t)xmmword_2393F5400;
                                objc_msgSend_setViewport_(v236, v237, (uint64_t)&block);
                                v238 = v236;
                              }

                              v241 = 5 * v321;
                              v242 = 5 * v321 + 5;
                              if (v314 < v242)
                                v242 = v314;
                              if (v241 < v242)
                              {
                                v243 = *v10;
                                v244 = v10[1];
                                v245 = v320;
                                v246 = v10[2];
                                do
                                {
                                  v247 = (float32x4_t *)(*(_QWORD *)(v5 + 744) + v245);
                                  v249 = *v247;
                                  v248 = v247[1];
                                  v250 = v247[2];
                                  v251 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v322, vabdq_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v249, *(float32x2_t *)v249.f32, 1), v248, *(float32x2_t *)v248.f32, 1), v250, *(float32x2_t *)v250.f32, 1), v244)), (int8x16_t)vcgeq_f32(v322,
                                                                      vabdq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v249, v249.f32[0]), v248, v248.f32[0]), v250, v250.f32[0]), v243))), (int8x16_t)vcgeq_f32(v322, vabdq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v249, v249, 2), v248, v248, 2), v250, v250,
                                                                        2),
                                                                      v246)));
                                  v251.i32[3] = v251.i32[2];
                                  if ((vminvq_u32(v251) & 0x80000000) != 0)
                                  {
                                    v252 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v248, 2);
                                    v253 = (float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)v249, (int32x4_t)v250), (int32x4_t)v252);
                                    v254 = (float32x4_t)vtrn2q_s32((int32x4_t)v249, (int32x4_t)v248);
                                    v254.i32[2] = HIDWORD(v247[2].i64[0]);
                                    v255 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)v249, (int32x4_t)v250), (int32x4_t)v248);
                                    v256 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v322, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v255, v248.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v248.f32, 1), v254), v252, v253), v244)), (int8x16_t)vcgeq_f32(v322, vabdq_f32(vmlaq_f32(vmlaq_f32(
                                                                              vmulq_n_f32(v255, v249.f32[0]),
                                                                              (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v249.f32, 1), v254), (float32x4_t)vdupq_laneq_s32((int32x4_t)v249, 2), v253), v243))), (int8x16_t)vcgeq_f32(v322, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v255, v250.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v250.f32, 1), v254), (float32x4_t)vdupq_laneq_s32(
                                                                                         (int32x4_t)v250,
                                                                                         2),
                                                                          v253),
                                                                        v246)));
                                    v256.i32[3] = v256.i32[2];
                                    if ((vminvq_u32(v256) & 0x80000000) != 0)
                                    {
                                      v257 = vmulq_f32(v249, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v250, (int8x16_t)v250, 0xCuLL), (int8x16_t)v250, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v248, (int32x4_t)v248), (int8x16_t)v248, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v250, (int32x4_t)v250), (int8x16_t)v250, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v248, (int8x16_t)v248, 0xCuLL),
                                                                (int8x16_t)v248,
                                                                8uLL)));
                                      if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v257, 2), vaddq_f32(v257, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v257.f32, 1))).f32[0]+ -1.0) <= 0.000011)
                                      {
                                        v316 = v247[3];
                                        v317 = *v247;
                                        v318 = v247[1];
                                        v319 = v247[2];
                                        v258 = (uint32x2_t)vand_s8((int8x8_t)vcge_f32(v231, vabs_f32(vadd_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v250, (int8x16_t)v250, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v316, (int8x16_t)v316, 8uLL)), (float32x2_t)0xBF80000080000000))), (int8x8_t)vcge_f32(v231, vabs_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v249, (int8x16_t)v249, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v248, (int8x16_t)v248, 8uLL)))));
                                        if ((vpmin_u32(v258, v258).u32[0] & 0x80000000) != 0)
                                        {
                                          v259 = *(float *)(*(_QWORD *)(v5 + 768) + 4 * v241);
                                          if (v259 > 0.0 && v259 < 3.1416)
                                          {
                                            v260 = (float)*(unint64_t *)(v5 + 400)
                                                 / (float)*(unint64_t *)(v5 + 408);
                                            if (v260 >= 0.001 && v259 >= 0.0 && fabsf(v259) > 0.000001)
                                            {
                                              v261 = *(float *)(v5 + 392);
                                              v262 = *(float *)(v5 + 396);
                                              if (v262 > v261
                                                && v262 >= 0.001
                                                && v261 >= 0.001
                                                && fabsf(v259 + -3.1416) > 0.000032416)
                                              {
                                                v263 = 1.0 / tanf(v259 * 0.5);
                                                *(float *)&v264 = v263 / v260;
                                                LODWORD(v265) = 0;
                                                *((float *)&v265 + 1) = v263;
                                                v266.i64[0] = v310.i64[0];
                                                v266.f32[2] = (float)-v262 / (float)(v262 - v261);
                                                v266.i32[3] = -1.0;
                                                v267.i64[0] = 0;
                                                v267.i32[3] = 0;
                                                v267.f32[2] = v266.f32[2] * v261;
                                                v268 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v317, COERCE_FLOAT(*(_OWORD *)(v5 + 416))), v318, *(float32x2_t *)(v5 + 416), 1), v319, *(float32x4_t *)(v5 + 416), 2), v316, *(float32x4_t *)(v5 + 416), 3);
                                                v269 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v317, COERCE_FLOAT(*(_OWORD *)(v5 + 432))), v318, *(float32x2_t *)(v5 + 432), 1), v319, *(float32x4_t *)(v5 + 432), 2), v316, *(float32x4_t *)(v5 + 432), 3);
                                                v270 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v317, COERCE_FLOAT(*(_OWORD *)(v5 + 448))), v318, *(float32x2_t *)(v5 + 448), 1), v319, *(float32x4_t *)(v5 + 448), 2), v316, *(float32x4_t *)(v5 + 448), 3);
                                                v271 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v317, COERCE_FLOAT(*(_OWORD *)(v5 + 464))), v318, *(float32x2_t *)(v5 + 464), 1), v319, *(float32x4_t *)(v5 + 464), 2), v316, *(float32x4_t *)(v5 + 464), 3);
                                                block = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v264, v268.f32[0]), (float32x4_t)v265, *(float32x2_t *)v268.f32, 1), v266, v268, 2), v267, v268, 3);
                                                v347 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v264, v269.f32[0]), (float32x4_t)v265, *(float32x2_t *)v269.f32, 1), v266, v269, 2), v267, v269, 3);
                                                v348 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v264, v270.f32[0]), (float32x4_t)v265, *(float32x2_t *)v270.f32, 1), v266, v270, 2), v267, v270, 3);
                                                v349 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v264, v271.f32[0]), (float32x4_t)v265, *(float32x2_t *)v271.f32, 1), v266, v271, 2), v267, v271, 3);
                                                v272 = v236;
                                                objc_msgSend_pushDebugGroup_(v272, v273, (uint64_t)CFSTR("ProjectSurfaceVoxels"));
                                                objc_msgSend_setRenderPipelineState_(v272, v274, *(_QWORD *)(v5 + 512));
                                                objc_msgSend_setDepthStencilState_(v272, v275, *(_QWORD *)(v5 + 240));
                                                objc_msgSend_setVertexBuffer_offset_atIndex_(v272, v276, *(_QWORD *)(v5 + 304), 0, 0);
                                                objc_msgSend_setVertexBytes_length_atIndex_(v272, v277, (uint64_t)&block, 64, 1);
                                                objc_msgSend_drawPrimitives_vertexStart_vertexCount_(v272, v278, 3, 0, (36 * *v311));
                                                objc_msgSend_popDebugGroup(v272, v279, v280);

                                                v281 = v272;
                                                v350[0] = v241;
                                                v345 = objc_msgSend_length(*(void **)(v5 + 328), v282, v283);
                                                objc_msgSend_pushDebugGroup_(v281, v284, (uint64_t)CFSTR("FetchVisibleSurfaceVoxels"));
                                                objc_msgSend_setRenderPipelineState_(v281, v285, *(_QWORD *)(v5 + 504));
                                                objc_msgSend_setTileBytes_length_atIndex_(v281, v286, (uint64_t)v311, 4, 0);
                                                objc_msgSend_setTileBytes_length_atIndex_(v281, v287, (uint64_t)&unk_2393F9BE0, 4, 1);
                                                objc_msgSend_setTileBytes_length_atIndex_(v281, v288, (uint64_t)v350, 4, 2);
                                                objc_msgSend_setTileBytes_length_atIndex_(v281, v289, (uint64_t)&v345, 4, 3);
                                                objc_msgSend_setTileBuffer_offset_atIndex_(v281, v290, *(_QWORD *)(v5 + 328), 0, 4);
                                                v343 = vdupq_n_s64(0x20uLL);
                                                v344 = 1;
                                                objc_msgSend_dispatchThreadsPerTile_(v281, v291, (uint64_t)&v343);
                                                objc_msgSend_popDebugGroup(v281, v292, v293);

                                                v243 = *v10;
                                                v244 = v10[1];
                                                v246 = v10[2];
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                  ++v241;
                                  v245 += 64;
                                }
                                while (v233 != v241);
                              }
                              objc_msgSend_endEncoding(v236, v239, v240);

                              v229 += 5;
                              v320 += 320;
                              ++v321;
                            }
                            while (v321 != v312);
                          }
                          v337[0] = (void *)MEMORY[0x24BDAC760];
                          v337[1] = (void *)3221225472;
                          v338 = sub_2393C3818;
                          v339 = &unk_250AD60B0;
                          v340 = v5 + 192;
                          v341 = &v334;
                          v342 = v314;
                          objc_msgSend_addCompletedHandler_(v315, v227, (uint64_t)v337);
                          objc_msgSend_commit(v315, v294, v295);
                          objc_msgSend_waitUntilCompleted(v315, v296, v297);

                        }
                        v298 = (char *)__p[0];
                        if (__p[1] != __p[0])
                        {
                          v299 = ((char *)__p[1] - (char *)__p[0]) >> 2;
                          v300 = v334;
                          if (v299 <= 1)
                            v299 = 1;
                          if (v299 < 8
                            || __p[0] < &v334->f32[v299] && v334 < (float32x4_t *)((char *)__p[0] + 4 * v299))
                          {
                            v301 = 0;
LABEL_188:
                            v302 = v299 - v301;
                            v303 = v301;
                            v304 = (__int32 *)&v298[v303 * 4];
                            v305 = &v300->f32[v303];
                            do
                            {
                              v306 = *v305++;
                              v218.i32[0] = *v304;
                              v38.f32[0] = v306 + *(float *)v304;
                              *v304++ = v38.i32[0];
                              --v302;
                            }
                            while (v302);
                            goto LABEL_190;
                          }
                          v301 = v299 & 0xFFFFFFFFFFFFFFF8;
                          v307 = (float32x4_t *)((char *)__p[0] + 16);
                          v308 = v334 + 1;
                          v309 = v299 & 0xFFFFFFFFFFFFFFF8;
                          do
                          {
                            v38 = vaddq_f32(v308[-1], v307[-1]);
                            v218 = (int8x16_t)vaddq_f32(*v308, *v307);
                            v307[-1] = v38;
                            *v307 = (float32x4_t)v218;
                            v307 += 2;
                            v308 += 2;
                            v309 -= 8;
                          }
                          while (v309);
                          if (v299 != v301)
                            goto LABEL_188;
                        }
LABEL_190:
                        if (*(_BYTE *)(v5 + 100))
                        {
                          sub_2393DF040(&block, v5, (uint64_t)v323, __p);
                          if (__p[0])
                          {
                            __p[1] = __p[0];
                            operator delete(__p[0]);
                          }
                          v38.i64[0] = block.i64[0];
                          *(float32x4_t *)__p = block;
                          v333 = (void *)v347.i64[0];
                        }
                        if (*(_BYTE *)(v5 + 120))
                          sub_2393DF588(v5, (uint64_t)v323, __p, *(double *)v38.i64, v218);
                        v84 = 0;
                        v85 = v334;
                        if (!v334)
                          goto LABEL_135;
LABEL_75:
                        v335 = v85;
LABEL_134:
                        operator delete(v85);
                        goto LABEL_135;
                      }
                      block.i64[0] = MEMORY[0x24BDAC760];
                      block.i64[1] = 3221225472;
                      v347.i64[0] = (uint64_t)sub_2393E083C;
                      v347.i64[1] = (uint64_t)&unk_250AD6B10;
                      v348.i64[0] = v5;
                      v348.i64[1] = (uint64_t)v323;
                      v349.i64[0] = (uint64_t)__p;
                      dispatch_apply(vcvtps_u32_f32((float)v25 / 500.0), 0, &block);
                      v48 = (float *)__p[0];
                      v49 = (float *)__p[1];
                      if (__p[0] == __p[1])
                        goto LABEL_136;
                      v50 = (char *)__p[1] - (char *)__p[0] - 4;
                      if (v50 >= 0x1C)
                      {
                        v53 = (v50 >> 2) + 1;
                        v54 = (float32x4_t *)((char *)__p[0] + 16);
                        v55 = 0uLL;
                        v56.i64[0] = 0xBF000000BF000000;
                        v56.i64[1] = 0xBF000000BF000000;
                        v57 = (int8x16_t)vdupq_n_s64(1uLL);
                        v58 = v53 & 0x7FFFFFFFFFFFFFF8;
                        v59 = 0uLL;
                        v60 = 0uLL;
                        v61 = 0uLL;
                        do
                        {
                          v62 = vcgtq_f32(v56, v54[-1]);
                          v63.i64[0] = v62.u32[0];
                          v63.i64[1] = v62.u32[1];
                          v64 = (int64x2_t)vandq_s8(v63, v57);
                          v63.i64[0] = v62.u32[2];
                          v63.i64[1] = v62.u32[3];
                          v65 = (int64x2_t)vandq_s8(v63, v57);
                          v66 = vcgtq_f32(v56, *v54);
                          v63.i64[0] = v66.u32[0];
                          v63.i64[1] = v66.u32[1];
                          v67 = (int64x2_t)vandq_s8(v63, v57);
                          v63.i64[0] = v66.u32[2];
                          v63.i64[1] = v66.u32[3];
                          v59 = vaddq_s64(v59, v65);
                          v55 = vaddq_s64(v55, v64);
                          v61 = vaddq_s64(v61, (int64x2_t)vandq_s8(v63, v57));
                          v60 = vaddq_s64(v60, v67);
                          v54 += 2;
                          v58 -= 8;
                        }
                        while (v58);
                        v47 = vaddq_s64(v61, v59);
                        v51 = vaddvq_s64(vaddq_s64(vaddq_s64(v60, v55), v47));
                        if (v53 == (v53 & 0x7FFFFFFFFFFFFFF8))
                          goto LABEL_56;
                        v52 = (float *)((char *)__p[0] + 4 * (v53 & 0x7FFFFFFFFFFFFFF8));
                      }
                      else
                      {
                        v51 = 0;
                        v52 = (float *)__p[0];
                      }
                      do
                      {
                        v68 = *v52++;
                        *(float *)v47.i32 = v68;
                        if (v68 < -0.5)
                          ++v51;
                      }
                      while (v52 != __p[1]);
LABEL_56:
                      if (v51 <= 9)
                      {
                        v86 = 0;
                        v87 = v5 + 688;
                        do
                        {
                          v88 = *v48;
                          if (*v48 < -0.5)
                          {
                            *v48 = 0.0;
                            v88 = 0.0;
                          }
                          *(int32x4_t *)v337 = v329[v86];
                          *(float *)sub_2393DF81C(v87, (int32x2_t *)v337, (int32x4_t *)v337, *(double *)v337, (int8x16_t)v47)[2].i32 = v88;
                          ++v48;
                          v86 += 3;
                        }
                        while (v48 != v49);
                        goto LABEL_136;
                      }
                      goto LABEL_57;
                    }
                    v40 = &v36[v41];
                  }
                }
                v44 = block.i32[0];
                do
                  *v40++ = v44;
                while (v40 != &v36[v25]);
                goto LABEL_42;
              }
            }
          }
        }
      }
    }
  }
LABEL_30:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v2;
}

void sub_2393A7EB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,uint64_t a52,void *a53,uint64_t a54)
{
  if (__p)
    operator delete(__p);
  if (a47)
    operator delete(a47);
  _Unwind_Resume(exception_object);
}

uint64_t OCCoverageGuideGetResults(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 64);
  return result;
}

CVPixelBufferRef OCCoverageGuideCreateHeatmap(uint64_t a1, int32x4_t *a2, unsigned int a3, const void *a4, float32x4_t a5, float32x4_t a6, float32x4_t a7, int8x16_t a8, float a9, double a10, double a11, double a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int128 a17, __int128 a18, __int128 a19, __int128 a20,float a21)
{
  uint64_t v19;
  uint64_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  uint32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  uint32x4_t v30;
  float32x4_t v32;
  float32x2_t v33;
  uint32x2_t v34;
  uint64_t v40;
  int32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  uint32x4_t v44;
  float v45[4];
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  int8x16_t v49;
  uint64_t v50;
  int32x4_t *v51;
  float32x4_t v52;
  float32x4_t v53;
  _OWORD v54[4];

  v54[0] = a17;
  v54[1] = a18;
  v54[2] = a19;
  v54[3] = a20;
  if (!a1)
    return 0;
  v19 = 0;
  if (a4)
  {
    if (a2)
    {
      v21 = *(_QWORD *)(a1 + 48);
      if (v21)
      {
        if (a9 <= 0.0)
          return 0;
        v22 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 16);
        v23 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 32);
        v24 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
        v25 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v24, vabdq_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(a5, *(float32x2_t *)a5.f32, 1), a6, *(float32x2_t *)a6.f32, 1), a7, *(float32x2_t *)a7.f32, 1), v22)), (int8x16_t)vcgeq_f32(v24, vabdq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(a5, a5.f32[0]), a6, a6.f32[0]),
                                               a7,
                                               a7.f32[0]),
                                             *MEMORY[0x24BDAEDF8]))),
                            (int8x16_t)vcgeq_f32(v24, vabdq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(a5, a5, 2), a6, a6, 2), a7, a7, 2), v23)));
        v25.i32[3] = v25.i32[2];
        if ((vminvq_u32(v25) & 0x80000000) == 0)
          return 0;
        v26 = (float32x4_t)vdupq_laneq_s32((int32x4_t)a6, 2);
        v27 = (float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)a5, (int32x4_t)a7), (int32x4_t)v26);
        v28 = (float32x4_t)vtrn2q_s32((int32x4_t)a5, (int32x4_t)a6);
        v28.i32[2] = a7.i32[1];
        v29 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)a5, (int32x4_t)a7), (int32x4_t)a6);
        v30 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v24, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v29, a6.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a6.f32, 1), v28), v26, v27), v22)), (int8x16_t)vcgeq_f32(v24, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v29, a5.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 1),
                                                 v28),
                                               (float32x4_t)vdupq_laneq_s32((int32x4_t)a5, 2),
                                               v27),
                                             *MEMORY[0x24BDAEDF8]))),
                            (int8x16_t)vcgeq_f32(v24, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v29, a7.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a7.f32, 1), v28), (float32x4_t)vdupq_laneq_s32((int32x4_t)a7, 2), v27), v23)));
        v30.i32[3] = v30.i32[2];
        if ((vminvq_u32(v30) & 0x80000000) == 0)
          return 0;
        v32 = vmulq_f32(a5, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)a7, (int8x16_t)a7, 0xCuLL), (int8x16_t)a7, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a6, (int32x4_t)a6), (int8x16_t)a6, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a7, (int32x4_t)a7), (int8x16_t)a7, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)a6, (int8x16_t)a6, 0xCuLL), (int8x16_t)a6, 8uLL)));
        v19 = 0;
        if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v32, 2), vaddq_f32(v32, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.f32, 1))).f32[0]+ -1.0) <= 0.000011)
        {
          v33 = (float32x2_t)vdup_n_s32(0x38D1B717u);
          v34 = (uint32x2_t)vand_s8((int8x8_t)vcge_f32(v33, vabs_f32(vadd_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a7, (int8x16_t)a7, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(a8, a8, 8uLL)), (float32x2_t)0xBF80000080000000))), (int8x8_t)vcge_f32(v33, vabs_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a5, (int8x16_t)a5, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(
                                                                                           (int8x16_t)a6,
                                                                                           (int8x16_t)a6,
                                                                                           8uLL)))));
          if ((vpmin_u32(v34, v34).u32[0] & 0x80000000) != 0)
          {
            if (a3)
            {
              v52 = 0uLL;
              __asm { FMOV            V6.4S, #-1.0 }
              v53 = _Q6;
              v45[0] = a9;
              v46 = a5;
              v47 = a6;
              v48 = a7;
              v49 = a8;
              v40 = a3;
              v50 = a3;
              v51 = a2;
              do
              {
                v41 = *a2;
                v43 = v52;
                v42 = v53;
                v44 = (uint32x4_t)vcgtq_f32(v52, v53);
                v44.i32[3] = v44.i32[2];
                if ((vmaxvq_u32(v44) & 0x80000000) != 0)
                {
                  v52 = vcvtq_f32_s32(v41);
                  v53 = v52;
                }
                else
                {
                  if (v52.f32[0] > (float)v41.i32[0])
                    v52.f32[0] = (float)v41.i32[0];
                  if (v53.f32[0] < (float)v41.i32[0])
                    v53.f32[0] = (float)v41.i32[0];
                  if (v43.f32[1] > (float)v41.i32[1])
                    v52.f32[1] = (float)v41.i32[1];
                  if (v42.f32[1] < (float)v41.i32[1])
                    v53.f32[1] = (float)v41.i32[1];
                  if (v43.f32[2] > (float)v41.i32[2])
                    v52.f32[2] = (float)v41.i32[2];
                  if (v42.f32[2] < (float)v41.i32[2])
                    v53.f32[2] = (float)v41.i32[2];
                }
                a2 += 3;
                --v40;
              }
              while (v40);
              if (sub_2393F3D80(v21, (uint64_t)v45, a4, (uint64_t)v54, 1, a21))
                return sub_2393A8274(a1, 1);
              return 0;
            }
          }
        }
      }
    }
  }
  return (CVPixelBufferRef)v19;
}

CVPixelBufferRef sub_2393A8274(uint64_t a1, int a2)
{
  uint64_t v2;
  id v4;
  void *v5;
  void *BaseAddress;
  size_t BytesPerRow;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  CVPixelBufferRef v13;
  id v14;
  CVPixelBufferRef v16[6];
  CVPixelBufferRef pixelBufferOut;

  v2 = *(_QWORD *)(a1 + 48);
  if (!v2)
    return 0;
  if (!a2)
  {
    if (*(_BYTE *)(v2 + 208))
    {
      v14 = *(id *)(v2 + 128);
      if (v14)
      {
        v5 = v14;
        pixelBufferOut = 0;
        if (!CVPixelBufferPoolCreatePixelBuffer((CFAllocatorRef)*MEMORY[0x24BDBD240], *(CVPixelBufferPoolRef *)(a1 + 80), &pixelBufferOut))goto LABEL_6;
LABEL_10:
        v13 = 0;
        goto LABEL_11;
      }
    }
    return 0;
  }
  if (!*(_BYTE *)(v2 + 208))
    return 0;
  v4 = *(id *)(v2 + 120);
  if (!v4)
    return 0;
  v5 = v4;
  pixelBufferOut = 0;
  if (CVPixelBufferPoolCreatePixelBuffer((CFAllocatorRef)*MEMORY[0x24BDBD240], *(CVPixelBufferPoolRef *)(a1 + 72), &pixelBufferOut))
  {
    goto LABEL_10;
  }
LABEL_6:
  CVPixelBufferLockBaseAddress(pixelBufferOut, 0);
  BaseAddress = CVPixelBufferGetBaseAddress(pixelBufferOut);
  BytesPerRow = CVPixelBufferGetBytesPerRow(pixelBufferOut);
  memset(v16, 0, 24);
  v16[3] = (CVPixelBufferRef)objc_msgSend_width(v5, v8, v9);
  v16[4] = (CVPixelBufferRef)objc_msgSend_height(v5, v10, v11);
  v16[5] = (CVPixelBufferRef)1;
  objc_msgSend_getBytes_bytesPerRow_fromRegion_mipmapLevel_(v5, v12, (uint64_t)BaseAddress, BytesPerRow, v16, 0);
  CVPixelBufferUnlockBaseAddress(pixelBufferOut, 0);
  v13 = pixelBufferOut;
LABEL_11:

  return v13;
}

void sub_2393A83A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

CVPixelBufferRef OCCoverageGuideCreateScoreMap(uint64_t a1, int32x4_t *a2, unsigned int a3, const void *a4, float32x4_t a5, float32x4_t a6, float32x4_t a7, int8x16_t a8, float a9, double a10, double a11, double a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int128 a17, __int128 a18, __int128 a19, __int128 a20,float a21)
{
  uint64_t v19;
  uint64_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  uint32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  uint32x4_t v30;
  float32x4_t v32;
  float32x2_t v33;
  uint32x2_t v34;
  uint64_t v40;
  int32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  uint32x4_t v44;
  float v45[4];
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  int8x16_t v49;
  uint64_t v50;
  int32x4_t *v51;
  float32x4_t v52;
  float32x4_t v53;
  _OWORD v54[4];

  v54[0] = a17;
  v54[1] = a18;
  v54[2] = a19;
  v54[3] = a20;
  if (!a1)
    return 0;
  v19 = 0;
  if (a4)
  {
    if (a2)
    {
      v21 = *(_QWORD *)(a1 + 48);
      if (v21)
      {
        if (a9 <= 0.0)
          return 0;
        v22 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 16);
        v23 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 32);
        v24 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
        v25 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v24, vabdq_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(a5, *(float32x2_t *)a5.f32, 1), a6, *(float32x2_t *)a6.f32, 1), a7, *(float32x2_t *)a7.f32, 1), v22)), (int8x16_t)vcgeq_f32(v24, vabdq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(a5, a5.f32[0]), a6, a6.f32[0]),
                                               a7,
                                               a7.f32[0]),
                                             *MEMORY[0x24BDAEDF8]))),
                            (int8x16_t)vcgeq_f32(v24, vabdq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(a5, a5, 2), a6, a6, 2), a7, a7, 2), v23)));
        v25.i32[3] = v25.i32[2];
        if ((vminvq_u32(v25) & 0x80000000) == 0)
          return 0;
        v26 = (float32x4_t)vdupq_laneq_s32((int32x4_t)a6, 2);
        v27 = (float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)a5, (int32x4_t)a7), (int32x4_t)v26);
        v28 = (float32x4_t)vtrn2q_s32((int32x4_t)a5, (int32x4_t)a6);
        v28.i32[2] = a7.i32[1];
        v29 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)a5, (int32x4_t)a7), (int32x4_t)a6);
        v30 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v24, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v29, a6.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a6.f32, 1), v28), v26, v27), v22)), (int8x16_t)vcgeq_f32(v24, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v29, a5.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 1),
                                                 v28),
                                               (float32x4_t)vdupq_laneq_s32((int32x4_t)a5, 2),
                                               v27),
                                             *MEMORY[0x24BDAEDF8]))),
                            (int8x16_t)vcgeq_f32(v24, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v29, a7.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a7.f32, 1), v28), (float32x4_t)vdupq_laneq_s32((int32x4_t)a7, 2), v27), v23)));
        v30.i32[3] = v30.i32[2];
        if ((vminvq_u32(v30) & 0x80000000) == 0)
          return 0;
        v32 = vmulq_f32(a5, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)a7, (int8x16_t)a7, 0xCuLL), (int8x16_t)a7, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a6, (int32x4_t)a6), (int8x16_t)a6, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a7, (int32x4_t)a7), (int8x16_t)a7, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)a6, (int8x16_t)a6, 0xCuLL), (int8x16_t)a6, 8uLL)));
        v19 = 0;
        if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v32, 2), vaddq_f32(v32, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.f32, 1))).f32[0]+ -1.0) <= 0.000011)
        {
          v33 = (float32x2_t)vdup_n_s32(0x38D1B717u);
          v34 = (uint32x2_t)vand_s8((int8x8_t)vcge_f32(v33, vabs_f32(vadd_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a7, (int8x16_t)a7, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(a8, a8, 8uLL)), (float32x2_t)0xBF80000080000000))), (int8x8_t)vcge_f32(v33, vabs_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a5, (int8x16_t)a5, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(
                                                                                           (int8x16_t)a6,
                                                                                           (int8x16_t)a6,
                                                                                           8uLL)))));
          if ((vpmin_u32(v34, v34).u32[0] & 0x80000000) != 0)
          {
            if (a3)
            {
              v52 = 0uLL;
              __asm { FMOV            V6.4S, #-1.0 }
              v53 = _Q6;
              v45[0] = a9;
              v46 = a5;
              v47 = a6;
              v48 = a7;
              v49 = a8;
              v40 = a3;
              v50 = a3;
              v51 = a2;
              do
              {
                v41 = *a2;
                v43 = v52;
                v42 = v53;
                v44 = (uint32x4_t)vcgtq_f32(v52, v53);
                v44.i32[3] = v44.i32[2];
                if ((vmaxvq_u32(v44) & 0x80000000) != 0)
                {
                  v52 = vcvtq_f32_s32(v41);
                  v53 = v52;
                }
                else
                {
                  if (v52.f32[0] > (float)v41.i32[0])
                    v52.f32[0] = (float)v41.i32[0];
                  if (v53.f32[0] < (float)v41.i32[0])
                    v53.f32[0] = (float)v41.i32[0];
                  if (v43.f32[1] > (float)v41.i32[1])
                    v52.f32[1] = (float)v41.i32[1];
                  if (v42.f32[1] < (float)v41.i32[1])
                    v53.f32[1] = (float)v41.i32[1];
                  if (v43.f32[2] > (float)v41.i32[2])
                    v52.f32[2] = (float)v41.i32[2];
                  if (v42.f32[2] < (float)v41.i32[2])
                    v53.f32[2] = (float)v41.i32[2];
                }
                a2 += 3;
                --v40;
              }
              while (v40);
              if (sub_2393F3D80(v21, (uint64_t)v45, a4, (uint64_t)v54, 0, a21))
                return sub_2393A8274(a1, 0);
              return 0;
            }
          }
        }
      }
    }
  }
  return (CVPixelBufferRef)v19;
}

uint64_t OCCoverageGuideStop(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  const void *v4;
  uint64_t result;

  if (!a1)
    return 4294967294;
  v2 = *(_QWORD *)(a1 + 56);
  if (v2)
  {
    if (*(_QWORD *)v2)
      CFRelease(*(CFTypeRef *)v2);
    *(_QWORD *)v2 = 0;
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      MEMORY[0x23B83C498](v3, 0x1000C8052888210);
      *(_QWORD *)(v2 + 8) = 0;
    }
    MEMORY[0x23B83C4BC](v2, 0x10A0C40D63CFB62);
  }
  *(_QWORD *)(a1 + 56) = 0;
  v4 = *(const void **)(a1 + 64);
  if (v4)
    CFRelease(v4);
  result = 0;
  *(_QWORD *)(a1 + 64) = 0;
  return result;
}

void *OCModulesGitHash()
{
  return &unk_2569302B0;
}

uint64_t computePointColor(__CVBuffer *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  int Height;
  signed int Width;
  _BYTE *BaseAddressOfPlane;
  char *v13;
  size_t BytesPerRowOfPlane;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  double *v18;
  float32x2_t v19;
  size_t v25;
  char *v26;
  float v27;
  float32x2_t v28;
  float v29;
  float32_t v30;
  float v31;
  uint64_t v32;
  float32x2_t v33;
  int8x8_t v34;
  float v35;
  float v36;
  unsigned int v37;
  double v38;

  CVPixelBufferLockBaseAddress(a1, 1uLL);
  Height = CVPixelBufferGetHeight(a1);
  Width = CVPixelBufferGetWidth(a1);
  BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(a1, 0);
  v13 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
  BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  v15 = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
  if (a4)
  {
    v17 = 0;
    v18 = (double *)(a2 + 8);
    v19 = (float32x2_t)vdup_n_s32(0x437F0000u);
    __asm { FMOV            V4.2S, #1.0 }
    do
    {
      v37 = llround(*(v18 - 1));
      if ((v37 & 0x80000000) != 0
        || (int)v37 >= Width
        || (v38 = *v18, LODWORD(v16) = llround(*v18), (v16 & 0x80000000) != 0)
        || (int)v16 >= Height)
      {
        if ((a5 & 1) == 0)
          *(_OWORD *)(a3 + 16 * v17++) = 0uLL;
      }
      else
      {
        v25 = BytesPerRowOfPlane * v16 + v37;
        v26 = &v13[(v37 & 0xFFFFFFFE) + v15 * (v16 >> 1)];
        v16 = *v26;
        LOBYTE(v38) = BaseAddressOfPlane[v25];
        v27 = (float)(v26[1] - 128);
        v28.f32[0] = (float)LODWORD(v38);
        v29 = (float)(v16 - 128);
        v30 = v28.f32[0] + (float)(v29 * -0.39176);
        v31 = v28.f32[0] + (float)(v29 * 2.0172);
        v32 = a3 + 16 * v17;
        v28.f32[1] = v30;
        v33 = vmaxnm_f32(vmla_n_f32(v28, (float32x2_t)0xBF501EA43FCC4A9ALL, v27), 0);
        v34 = vbsl_s8((int8x8_t)vcgt_f32(v33, v19), _D4, (int8x8_t)vdiv_f32(v33, v19));
        v35 = fmaxf(v31, 0.0);
        if (v35 <= 255.0)
          v36 = v35 / 255.0;
        else
          v36 = 1.0;
        ++v17;
        *(float *)(v32 + 8) = v36;
        *(int8x8_t *)v32 = v34;
      }
      v18 += 2;
      --a4;
    }
    while (a4);
  }
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  return 0;
}

BOOL initColorBufferData(__CVBuffer *a1, uint64_t a2)
{
  if (!a2)
    return 0;
  *(_DWORD *)a2 = CVPixelBufferGetHeight(a1);
  *(_DWORD *)(a2 + 4) = CVPixelBufferGetWidth(a1);
  *(_QWORD *)(a2 + 8) = CVPixelBufferGetBaseAddressOfPlane(a1, 0);
  *(_QWORD *)(a2 + 16) = CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
  *(_QWORD *)(a2 + 24) = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  *(_QWORD *)(a2 + 32) = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
  return *(_QWORD *)(a2 + 8) && *(_QWORD *)(a2 + 16) != 0;
}

float retrieveColorFromBuffer(uint64_t a1, double *a2)
{
  int v2;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x2_t v13;
  int8x8_t v14;

  v2 = llround(*a2);
  __asm { FMOV            V0.4S, #-1.0 }
  if ((v2 & 0x80000000) == 0)
  {
    v8 = *(unsigned int *)(a1 + 4);
    if ((int)v8 > v2)
    {
      LODWORD(v8) = llround(a2[1]);
      if ((v8 & 0x80000000) == 0 && *(_DWORD *)a1 > (int)v8)
      {
        v9 = *(_QWORD *)(a1 + 24) * v8 + v2;
        v10 = (unsigned __int8 *)(*(_QWORD *)(a1 + 16)
                                + (v2 & 0xFFFFFFFE)
                                + *(_QWORD *)(a1 + 32) * (v8 >> 1));
        LOBYTE(_Q0) = *(_BYTE *)(*(_QWORD *)(a1 + 8) + v9);
        v11.f32[0] = (float)_Q0;
        v11.f32[1] = v11.f32[0] + (float)((float)(*v10 - 128) * -0.39176);
        v12 = vmaxnm_f32(vmla_n_f32(v11, (float32x2_t)0xBF501EA43FCC4A9ALL, (float)(v10[1] - 128)), 0);
        v13 = (float32x2_t)vdup_n_s32(0x437F0000u);
        v14 = (int8x8_t)vcgt_f32(v12, v13);
        *(float32x2_t *)&_Q0 = vdiv_f32(v12, v13);
        __asm { FMOV            V1.2S, #1.0 }
        LODWORD(_Q0) = vbsl_s8(v14, _D1, *(int8x8_t *)&_Q0).u32[0];
      }
    }
  }
  return *(float *)&_Q0;
}

int8x8_t scalarToBGRA(float a1)
{
  float v1;
  float64x2_t v7;

  if (a1 <= 1.0)
    v1 = a1;
  else
    v1 = 1.0;
  if (a1 < 0.0)
    v1 = 0.0;
  __asm { FMOV            V4.2D, #4.0 }
  v7 = vabsq_f64(vmlaq_n_f64((float64x2_t)xmmword_2393F5410, _Q4, v1));
  __asm { FMOV            V2.2D, #1.5 }
  *(float32x2_t *)&v7.f64[0] = vcvt_f32_f64(vsubq_f64(_Q2, v7));
  __asm { FMOV            V4.2S, #1.0 }
  return vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)&v7.f64[0], *(float32x2_t *)&_Q4.f64[0]), *(int8x8_t *)&_Q4.f64[0], *(int8x8_t *)&v7.f64[0]), (int8x8_t)vcltz_f32(*(float32x2_t *)&v7.f64[0]));
}

uint64_t OCMultiviewGeometryCreate(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  const __CFAllocator *v7;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v9;
  CFNumberRef v10;
  CFNumberRef v11;
  CFNumberRef v12;
  CFNumberRef v13;
  CFMutableDictionaryRef v14;
  __CFDictionary *v15;
  CFNumberRef v16;
  CFNumberRef v17;
  CFNumberRef v18;
  CFNumberRef v19;
  CFNumberRef v20;
  CFNumberRef v21;
  CVReturn v22;
  __CFDictionary *v23;
  NSObject *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint8_t valuePtr[16];

  result = 4294967294;
  if (a1 && a2)
  {
    v5 = (_QWORD *)operator new();
    *v5 = 0;
    v6 = operator new();
    *(_OWORD *)v6 = xmmword_2393F5420;
    *(_OWORD *)(v6 + 24) = 0u;
    *(_QWORD *)(v6 + 16) = 1;
    *(_OWORD *)(v6 + 40) = 0u;
    *(_OWORD *)(v6 + 56) = 0u;
    *(_OWORD *)(v6 + 72) = 0u;
    *(_QWORD *)(v6 + 88) = 0;
    v28 = 6;
    *(_DWORD *)valuePtr = 2;
    v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    if (!Mutable)
      goto LABEL_15;
    v9 = Mutable;
    v10 = CFNumberCreate(v7, kCFNumberIntType, valuePtr);
    if (v10
      && (v11 = v10,
          CFDictionarySetValue(v9, (const void *)*MEMORY[0x24BDC56F0], v10),
          CFRelease(v11),
          (v12 = CFNumberCreate(v7, kCFNumberIntType, &v28)) != 0))
    {
      v13 = v12;
      CFDictionarySetValue(v9, (const void *)*MEMORY[0x24BDC56D0], v12);
      CFRelease(v13);
      v14 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
      if (!v14)
        goto LABEL_15;
      v15 = v14;
      v27 = *(_QWORD *)v6;
      v16 = CFNumberCreate(v7, kCFNumberIntType, &v27);
      if (v16)
      {
        v17 = v16;
        CFDictionarySetValue(v15, (const void *)*MEMORY[0x24BDC5708], v16);
        CFRelease(v17);
        v26 = *(_QWORD *)(v6 + 8);
        v18 = CFNumberCreate(v7, kCFNumberIntType, &v26);
        if (v18)
        {
          v19 = v18;
          CFDictionarySetValue(v15, (const void *)*MEMORY[0x24BDC5650], v18);
          CFRelease(v19);
          v25 = 1278226534;
          v20 = CFNumberCreate(v7, kCFNumberIntType, &v25);
          if (v20)
          {
            v21 = v20;
            CFDictionarySetValue(v15, (const void *)*MEMORY[0x24BDC56B8], v20);
            CFRelease(v21);
            v22 = CVPixelBufferPoolCreate(v7, v9, v15, (CVPixelBufferPoolRef *)(v6 + 24));
            CFRelease(v15);
            CFRelease(v9);
            if (!v22)
            {
LABEL_19:
              result = 0;
              *v5 = v6;
              *a2 = v5;
              return result;
            }
LABEL_15:
            if (qword_2569302C8 != -1)
              dispatch_once(&qword_2569302C8, &unk_250AD5D50);
            v24 = qword_2569302C0;
            if (os_log_type_enabled((os_log_t)qword_2569302C0, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)valuePtr = 0;
              _os_log_error_impl(&dword_239388000, v24, OS_LOG_TYPE_ERROR, "MVGConsistency: Failed to create buffer pool!", valuePtr, 2u);
            }
            goto LABEL_19;
          }
        }
      }
      v23 = v15;
    }
    else
    {
      v23 = v9;
    }
    CFRelease(v23);
    goto LABEL_15;
  }
  return result;
}

void sub_2393A8E2C(_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 / 0x12];
    v7 = (unint64_t)*v6 + 224 * (v5 % 0x12);
    v8 = (unint64_t)v2[(a1[5] + v5) / 0x12] + 224 * ((a1[5] + v5) % 0x12);
    if (v7 != v8)
    {
      do
      {
        CVPixelBufferRelease(*(CVPixelBufferRef *)v7);
        CVPixelBufferRelease(*(CVPixelBufferRef *)(v7 + 8));
        if (*(char *)(v7 + 215) < 0)
          operator delete(*(void **)(v7 + 192));
        v7 += 224;
        if (v7 - (_QWORD)*v6 == 4032)
        {
          v9 = (unint64_t)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != v8);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v10 = (char *)v3 - (char *)v2;
  if (v10 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v11 = a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v10 = v11 - (_QWORD)v2;
    }
    while (v10 > 0x10);
  }
  if (v10 >> 3 == 1)
  {
    v12 = 9;
  }
  else
  {
    if (v10 >> 3 != 2)
      return;
    v12 = 18;
  }
  a1[4] = v12;
}

void sub_2393A8F6C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 215) < 0)
    operator delete(*(void **)(v1 + 192));
  _Unwind_Resume(exception_object);
}

void sub_2393A8F88()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.CoreOCModules", "General");
  v1 = (void *)qword_2569302C0;
  qword_2569302C0 = (uint64_t)v0;

}

uint64_t OCMultiviewGeometryStart(uint64_t a1)
{
  if (a1)
    return 0;
  else
    return 4294967294;
}

uint64_t OCMultiviewGeometryStop(uint64_t a1)
{
  if (a1)
    return 0;
  else
    return 4294967294;
}

uint64_t OCMultiviewGeometryDestroy(uint64_t *a1)
{
  uint64_t v2;
  void **v3;
  void **v4;
  void **v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  if (!a1)
    return 4294967294;
  v2 = *a1;
  if (*a1)
  {
    CVPixelBufferPoolRelease(*(CVPixelBufferPoolRef *)(v2 + 24));
    *(_QWORD *)(v2 + 24) = 0;
    CVPixelBufferRelease(*(CVPixelBufferRef *)(v2 + 32));
    *(_QWORD *)(v2 + 32) = 0;
    CVPixelBufferRelease(*(CVPixelBufferRef *)(v2 + 40));
    *(_QWORD *)(v2 + 40) = 0;
    v3 = (void **)(v2 + 48);
    sub_2393A8E2C((_QWORD *)(v2 + 48));
    v4 = *(void ***)(v2 + 56);
    v5 = *(void ***)(v2 + 64);
    if (v4 != v5)
    {
      do
      {
        v6 = *v4++;
        operator delete(v6);
      }
      while (v4 != v5);
      v8 = *(_QWORD *)(v2 + 56);
      v7 = *(_QWORD *)(v2 + 64);
      if (v7 != v8)
        *(_QWORD *)(v2 + 64) = v7 + ((v8 - v7 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
    if (*v3)
      operator delete(*v3);
    MEMORY[0x23B83C4BC](v2, 0x10A0C40F9B348C6);
  }
  MEMORY[0x23B83C4BC](a1, 0x20C4093837F09);
  return 0;
}

void sub_2393A90C4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v3;
  void **v4;
  void **v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (void **)(v1 + 6);
  sub_2393A8E2C(v1 + 6);
  v4 = (void **)v1[7];
  v5 = (void **)v1[8];
  if (v4 != v5)
  {
    do
    {
      v6 = *v4++;
      operator delete(v6);
    }
    while (v4 != v5);
    v8 = v1[7];
    v7 = v1[8];
    if (v7 != v8)
      v1[8] = v7 + ((v8 - v7 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*v3)
    operator delete(*v3);
  _Unwind_Resume(a1);
}

uint64_t OCMultiviewGeometryProcess(uint64_t *a1, uint64_t a2)
{
  __CVBuffer *v4;
  __CVBuffer *v5;
  double v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  unint64_t Width;
  unint64_t Height;
  size_t v14;
  CFAllocatorRef *v15;
  __int128 v16;
  NSObject *v17;
  const char *v18;
  uint64_t v19;
  __CVBuffer *v20;
  OSType PixelFormatType;
  OSType v22;
  NSObject *v23;
  NSObject *v24;
  OSStatus v25;
  uint64_t v26;
  NSObject *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int64x2_t v32;
  const __CFAllocator *v33;
  CVReturn v34;
  uint64_t *v35;
  NSObject *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  BOOL v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  int64_t v53;
  char *v54;
  NSObject *v55;
  char *v56;
  char *v57;
  void *v58;
  char *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  int64_t v67;
  char *v68;
  unint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  void *v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  BOOL v82;
  int64_t v83;
  unint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  std::string *v88;
  std::string *p_pixelTransferSessionOut;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  char *v95;
  void *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  int64_t v105;
  unint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  __int128 *v111;
  char *v112;
  uint64_t v113;
  __int128 v114;
  uint64_t v115;
  unint64_t v116;
  _BYTE *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  int64_t v127;
  unint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  __int128 *v133;
  _OWORD *v134;
  uint64_t v135;
  __int128 v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  char *v142;
  char *v143;
  char *v144;
  uint64_t v145;
  unint64_t v146;
  char *v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  __int128 *v152;
  _OWORD *v153;
  uint64_t v154;
  __int128 v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  __int128 *v159;
  _OWORD *v160;
  uint64_t v161;
  __int128 v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  char *v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  int64_t v174;
  unint64_t v175;
  unint64_t v176;
  uint64_t v177;
  char *v178;
  char *v179;
  int64_t v180;
  unint64_t v181;
  char *v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  __int128 *v186;
  _OWORD *v187;
  uint64_t v188;
  __int128 v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  _BYTE *v201;
  __int128 v202;
  uint64_t v203;
  NSObject *v204;
  const char *v205;
  NSObject *v206;
  unint64_t v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  __CVBuffer **v212;
  uint64_t v213;
  unint64_t v214;
  uint64_t v215;
  __CVBuffer *v216;
  __CVBuffer *v217;
  __CVBuffer *v218;
  __CVBuffer *v219;
  __int128 v220;
  unint64_t v221;
  unint64_t v222;
  float32x4_t v223;
  float32x4_t v224;
  float32x4_t v225;
  uint64_t v226;
  simd_float4 *v227;
  simd_float4 *v228;
  simd_float4 *v229;
  uint64_t v230;
  simd_float3 *v231;
  simd_float3 *v232;
  simd_float3 *v233;
  float32x4_t v234;
  float v235;
  float32x4_t v236;
  float32x4_t v237;
  simd_float4x4 v238;
  float v239;
  float v240;
  float v241;
  float v242;
  float v243;
  unint64_t v244;
  unint64_t v245;
  simd_float3 v246;
  simd_float3 v247;
  simd_float3 v248;
  int32x4_t v249;
  float32x4_t v250;
  float32x2_t v251;
  float32x2_t v252;
  float32x4_t v253;
  float32x4_t v254;
  float32x4_t v255;
  float v256;
  float32x2_t v257;
  float32x2_t v258;
  float32x4_t v259;
  float v260;
  float32x2_t v261;
  float32x2_t v262;
  float32x4_t v263;
  float v264;
  BOOL v265;
  BOOL v266;
  BOOL v267;
  int v269;
  _BOOL4 v270;
  int v271;
  float32x4_t v272;
  unint64_t v274;
  uint64_t v275;
  unint64_t v276;
  uint64_t v277;
  void **v278;
  __int128 v279;
  std::string *v280;
  __CVBuffer *v281;
  __CVBuffer *pixelBuffer;
  __CVBuffer *v283;
  float32x2_t v284;
  float32x2_t v285;
  float32x4_t v286;
  float32x4_t v287;
  float32x4_t *v288;
  float32x4_t *v289;
  float32x4_t *v290;
  float32x4_t *v291;
  float32x2_t v292;
  float32x4_t v293;
  float32x4_t v294;
  simd_float4 *v295;
  simd_float4 *v296;
  simd_float4 *v297;
  simd_float4 *v298;
  unsigned int v299;
  float32x4_t v300;
  simd_float3x3 v301;
  __int128 v302;
  int32x2_t v303;
  float v304;
  float32x4_t v305;
  float32x4_t v306;
  float v307;
  float32x4_t v308;
  float32x4_t v309;
  float32x4_t v310;
  simd_float3 v311;
  float32x4_t v312;
  float32x4_t v313;
  simd_float3 v314;
  float32x4_t v315;
  float32x4_t v316;
  simd_float3 v317;
  float32x4_t v318;
  uint64_t *v319;
  __int32 v320;
  __int32 v321;
  float v322;
  __int32 v323;
  uint64_t v324;
  int v325;
  int v326;
  uint64_t v327;
  uint64_t v328;
  int v329;
  int v330;
  uint64_t v331;
  uint64_t v332;
  int v333;
  int v334;
  uint64_t v335;
  uint64_t v336;
  int v337;
  int v338;
  uint64_t v339;
  CVPixelBufferRef pixelBufferOut;
  CVPixelBufferRef texture;
  __int128 v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  __int128 v346;
  __int128 v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  std::string __p;
  _BYTE buf[12];
  __int16 v355;
  _BYTE v356[10];
  uint64_t v357;
  std::string pixelTransferSessionOut;
  uint64_t v359;
  uint64_t v360;
  simd_float3x3 v361;
  simd_float3x3 v362;
  simd_float4x4 v363;

  v360 = *MEMORY[0x24BDAC8D0];
  if (!a1)
    return 4294967294;
  v5 = *(__CVBuffer **)a2;
  v4 = *(__CVBuffer **)(a2 + 8);
  v6 = *(double *)(a2 + 192);
  texture = 0;
  pixelBufferOut = 0;
  v7 = *(_OWORD *)(a2 + 32);
  v342 = *(_OWORD *)(a2 + 16);
  v343 = v7;
  v8 = *(_OWORD *)(a2 + 64);
  v344 = *(_OWORD *)(a2 + 48);
  v345 = v8;
  v9 = *(_OWORD *)(MEMORY[0x24BDAEDF8] + 16);
  v346 = *MEMORY[0x24BDAEDF8];
  v347 = v9;
  v10 = *(_OWORD *)(a2 + 176);
  v351 = *(_OWORD *)(a2 + 160);
  v352 = v10;
  v11 = *(_OWORD *)(a2 + 144);
  v349 = *(_OWORD *)(a2 + 128);
  v350 = v11;
  v348 = *(_OWORD *)(MEMORY[0x24BDAEDF8] + 32);
  std::to_string(&__p, v6);
  Width = CVPixelBufferGetWidth(v4);
  Height = CVPixelBufferGetHeight(v4);
  v322 = (float)Width / (float)CVPixelBufferGetWidth(v5);
  v14 = CVPixelBufferGetHeight(v5);
  v15 = (CFAllocatorRef *)MEMORY[0x24BDBD240];
  if (vabds_f32(v322, (float)Height / (float)v14) < 0.000001)
  {
    v16 = *(_OWORD *)(a2 + 112);
    v347 = *(_OWORD *)(a2 + 96);
    v348 = v16;
    v346 = *(_OWORD *)(a2 + 80);
    *(float32x2_t *)&v346 = vmul_n_f32(*(float32x2_t *)&v346, v322);
    *(float32x2_t *)&v347 = vmul_n_f32(*(float32x2_t *)&v347, v322);
    *(float32x2_t *)&v348 = vmul_n_f32(*(float32x2_t *)&v16, v322);
    if (CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], Width, Height, 0x4C303038u, 0, &pixelBufferOut))
    {
      if (qword_2569303A8 != -1)
        dispatch_once(&qword_2569303A8, &unk_250AD6090);
      v17 = qword_2569303A0;
      if (os_log_type_enabled((os_log_t)qword_2569303A0, OS_LOG_TYPE_ERROR))
      {
        LOWORD(pixelTransferSessionOut.__r_.__value_.__l.__data_) = 0;
        v18 = "MVGDataFrame::setImageBufferAndIntrinsics: Failed to create image buffer!";
LABEL_29:
        _os_log_error_impl(&dword_239388000, v17, OS_LOG_TYPE_ERROR, v18, (uint8_t *)&pixelTransferSessionOut, 2u);
        goto LABEL_30;
      }
      goto LABEL_30;
    }
    v20 = pixelBufferOut;
    PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBufferOut);
    if (PixelFormatType == 1278226488 || (v22 = PixelFormatType, PixelFormatType == 1278226742))
    {
      pixelTransferSessionOut.__r_.__value_.__r.__words[0] = 0;
      if (VTPixelTransferSessionCreate(0, (VTPixelTransferSessionRef *)&pixelTransferSessionOut))
      {
        if (qword_2569303A8 != -1)
          dispatch_once(&qword_2569303A8, &unk_250AD6090);
        v23 = qword_2569303A0;
        if (os_log_type_enabled((os_log_t)qword_2569303A0, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_239388000, v23, OS_LOG_TYPE_ERROR, "MVGDataFrame::scaleAndConvertToGrayscale: Failed to create vtConverter!", buf, 2u);
        }
      }
      else
      {
        v25 = VTPixelTransferSessionTransferImage((VTPixelTransferSessionRef)pixelTransferSessionOut.__r_.__value_.__l.__data_, v5, v20);
        VTPixelTransferSessionInvalidate((VTPixelTransferSessionRef)pixelTransferSessionOut.__r_.__value_.__l.__data_);
        CFRelease(pixelTransferSessionOut.__r_.__value_.__l.__data_);
        if (!v25)
          goto LABEL_30;
      }
    }
    else
    {
      if (qword_2569303A8 != -1)
        dispatch_once(&qword_2569303A8, &unk_250AD6090);
      v24 = qword_2569303A0;
      if (!os_log_type_enabled((os_log_t)qword_2569303A0, OS_LOG_TYPE_ERROR))
        goto LABEL_27;
      LODWORD(pixelTransferSessionOut.__r_.__value_.__l.__data_) = 67240192;
      HIDWORD(pixelTransferSessionOut.__r_.__value_.__r.__words[0]) = v22;
      _os_log_error_impl(&dword_239388000, v24, OS_LOG_TYPE_ERROR, "MVGDataFrame::scaleAndConvertToGrayscale: Pixel format %{public}x is not supported!", (uint8_t *)&pixelTransferSessionOut, 8u);
    }
    if (qword_2569303A8 != -1)
      dispatch_once(&qword_2569303A8, &unk_250AD6090);
LABEL_27:
    v17 = qword_2569303A0;
    if (!os_log_type_enabled((os_log_t)qword_2569303A0, OS_LOG_TYPE_ERROR))
      goto LABEL_30;
    LOWORD(pixelTransferSessionOut.__r_.__value_.__l.__data_) = 0;
    v18 = "MVGDataFrame::setImageBufferAndIntrinsics: Failed to convert image buffer!";
    goto LABEL_29;
  }
  if (qword_2569303A8 != -1)
    dispatch_once(&qword_2569303A8, &unk_250AD6090);
  v17 = qword_2569303A0;
  if (os_log_type_enabled((os_log_t)qword_2569303A0, OS_LOG_TYPE_ERROR))
  {
    LOWORD(pixelTransferSessionOut.__r_.__value_.__l.__data_) = 0;
    v18 = "MVGDataFrame::setImageBufferAndIntrinsics: Invalid scaling parameters!";
    goto LABEL_29;
  }
LABEL_30:
  texture = CVPixelBufferRetain(v4);
  v26 = *a1;
  if (*(_QWORD *)(*a1 + 88) == *(_QWORD *)(*a1 + 16) + 1)
  {
    if (qword_256930378 != -1)
      dispatch_once(&qword_256930378, &unk_250AD5F18);
    v27 = qword_256930370;
    if (os_log_type_enabled((os_log_t)qword_256930370, OS_LOG_TYPE_DEBUG))
    {
      v75 = *(_QWORD *)(v26 + 56);
      if (*(_QWORD *)(v26 + 64) == v75)
        v76 = 0;
      else
        v76 = *(_QWORD *)(v75 + 8 * (*(_QWORD *)(v26 + 80) / 0x12uLL)) + 224 * (*(_QWORD *)(v26 + 80) % 0x12uLL);
      if (*(char *)(v76 + 215) < 0)
        sub_2393BD344(&pixelTransferSessionOut, *(void **)(v76 + 192), *(_QWORD *)(v76 + 200));
      else
        pixelTransferSessionOut = *(std::string *)(v76 + 192);
      p_pixelTransferSessionOut = &pixelTransferSessionOut;
      if ((pixelTransferSessionOut.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_pixelTransferSessionOut = (std::string *)pixelTransferSessionOut.__r_.__value_.__r.__words[0];
      v90 = *(_QWORD *)(v26 + 88);
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = p_pixelTransferSessionOut;
      v355 = 2050;
      *(_QWORD *)v356 = v90;
      _os_log_debug_impl(&dword_239388000, v27, OS_LOG_TYPE_DEBUG, "MVGConsistency::addNewFrame: Erasing frame %{public}s, size = %{public}lu", buf, 0x16u);
      if (SHIBYTE(pixelTransferSessionOut.__r_.__value_.__r.__words[2]) < 0)
        operator delete(pixelTransferSessionOut.__r_.__value_.__l.__data_);
    }
    v28 = *(_QWORD *)(v26 + 80);
    v29 = *(_QWORD *)(*(_QWORD *)(v26 + 56) + 8 * (v28 / 0x12));
    v30 = v28 % 0x12;
    v31 = v29 + 224 * (v28 % 0x12);
    CVPixelBufferRelease(*(CVPixelBufferRef *)v31);
    CVPixelBufferRelease(*(CVPixelBufferRef *)(v31 + 8));
    if (*(char *)(v31 + 215) < 0)
      operator delete(*(void **)(v29 + 224 * v30 + 192));
    v32 = vaddq_s64(*(int64x2_t *)(v26 + 80), (int64x2_t)xmmword_2393F5430);
    *(int64x2_t *)(v26 + 80) = v32;
    if (v32.i64[0] >= 0x24uLL)
    {
      operator delete(**(void ***)(v26 + 56));
      *(_QWORD *)(v26 + 56) += 8;
      *(_QWORD *)(v26 + 80) -= 18;
    }
  }
  CVPixelBufferPoolFlush(*(CVPixelBufferPoolRef *)(v26 + 24), 1uLL);
  CVPixelBufferRelease(*(CVPixelBufferRef *)(v26 + 32));
  *(_QWORD *)(v26 + 32) = 0;
  v33 = *v15;
  v34 = CVPixelBufferPoolCreatePixelBuffer(*v15, *(CVPixelBufferPoolRef *)(v26 + 24), (CVPixelBufferRef *)(v26 + 32));
  CVPixelBufferRelease(*(CVPixelBufferRef *)(v26 + 40));
  *(_QWORD *)(v26 + 40) = 0;
  if (v34 | CVPixelBufferPoolCreatePixelBuffer(v33, *(CVPixelBufferPoolRef *)(v26 + 24), (CVPixelBufferRef *)(v26 + 40)))
  {
    if (qword_256930378 != -1)
      dispatch_once(&qword_256930378, &unk_250AD5F18);
    v55 = qword_256930370;
    if (os_log_type_enabled((os_log_t)qword_256930370, OS_LOG_TYPE_ERROR))
    {
      LOWORD(pixelTransferSessionOut.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl(&dword_239388000, v55, OS_LOG_TYPE_ERROR, "MVGConsistency::addNewFrame: Failed to create buffers!", (uint8_t *)&pixelTransferSessionOut, 2u);
    }
    v19 = 0xFFFFFFFFLL;
    goto LABEL_265;
  }
  if (qword_256930378 != -1)
    dispatch_once(&qword_256930378, &unk_250AD5F18);
  v35 = &qword_256930000;
  v36 = qword_256930370;
  if (os_log_type_enabled((os_log_t)qword_256930370, OS_LOG_TYPE_DEBUG))
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      sub_2393BD344(&pixelTransferSessionOut, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      pixelTransferSessionOut = __p;
    v88 = &pixelTransferSessionOut;
    if ((pixelTransferSessionOut.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v88 = (std::string *)pixelTransferSessionOut.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v88;
    _os_log_debug_impl(&dword_239388000, v36, OS_LOG_TYPE_DEBUG, "MVGConsistency::addNewFrame: Adding frame %{public}s", buf, 0xCu);
    if (SHIBYTE(pixelTransferSessionOut.__r_.__value_.__r.__words[2]) < 0)
      operator delete(pixelTransferSessionOut.__r_.__value_.__l.__data_);
  }
  v319 = a1;
  v37 = *(char **)(v26 + 56);
  v38 = *(char **)(v26 + 64);
  v39 = (v38 - v37) >> 3;
  v40 = v38 - v37;
  if (v38 == v37)
    v41 = 0;
  else
    v41 = 18 * v39 - 1;
  v42 = *(_QWORD *)(v26 + 80);
  if (v41 == *(_QWORD *)(v26 + 88) + v42)
  {
    v43 = v42 >= 0x12;
    v44 = v42 - 18;
    if (!v43)
    {
      v56 = *(char **)(v26 + 72);
      v57 = *(char **)(v26 + 48);
      if (v39 < (unint64_t)((v56 - v57) >> 3))
      {
        v58 = operator new(0xFC0uLL);
        if (v56 != v38)
        {
          v59 = *(char **)(v26 + 64);
          if (v59 != *(char **)(v26 + 72))
          {
LABEL_176:
            *(_QWORD *)v59 = v58;
LABEL_204:
            v38 = (char *)(*(_QWORD *)(v26 + 64) + 8);
            *(_QWORD *)(v26 + 64) = v38;
            goto LABEL_205;
          }
          v61 = *(char **)(v26 + 48);
          v60 = *(char **)(v26 + 56);
          if (v60 > v61)
          {
            v62 = (v60 - v61) >> 3;
            if (v62 >= -1)
              v63 = v62 + 1;
            else
              v63 = v62 + 2;
            v64 = v63 >> 1;
            v65 = -v64;
            v66 = &v60[-8 * v64];
            v67 = v59 - v60;
            if (v59 != v60)
            {
              memmove(&v60[-8 * v64], *(const void **)(v26 + 56), v59 - v60);
              v59 = *(char **)(v26 + 56);
            }
            v68 = &v59[8 * v65];
            v59 = &v66[v67];
            *(_QWORD *)(v26 + 56) = v68;
            *(_QWORD *)(v26 + 64) = &v66[v67];
            goto LABEL_176;
          }
          v122 = (v59 - v61) >> 2;
          if (v59 == v61)
            v122 = 1;
          if (!(v122 >> 61))
          {
            v123 = v122 >> 2;
            v124 = 8 * v122;
            v125 = (char *)operator new(8 * v122);
            v126 = &v125[8 * v123];
            v127 = v59 - v60;
            v82 = v59 == v60;
            v59 = v126;
            if (v82)
              goto LABEL_174;
            v59 = &v126[v127 & 0xFFFFFFFFFFFFFFF8];
            v128 = v127 - 8;
            if ((unint64_t)(v127 - 8) >= 0x38)
            {
              v156 = &v125[8 * v123];
              v129 = v156;
              if ((unint64_t)(v156 - v60) >= 0x20)
              {
                v157 = (v128 >> 3) + 1;
                v158 = 8 * (v157 & 0x3FFFFFFFFFFFFFFCLL);
                v129 = &v126[v158];
                v159 = (__int128 *)(v60 + 16);
                v160 = v156 + 16;
                v161 = v157 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v162 = *v159;
                  *(v160 - 1) = *(v159 - 1);
                  *v160 = v162;
                  v159 += 2;
                  v160 += 2;
                  v161 -= 4;
                }
                while (v161);
                if (v157 == (v157 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_174:
                  *(_QWORD *)(v26 + 48) = v125;
                  *(_QWORD *)(v26 + 56) = v126;
                  *(_QWORD *)(v26 + 64) = v59;
                  *(_QWORD *)(v26 + 72) = &v125[v124];
                  if (v61)
                  {
                    operator delete(v61);
                    v59 = *(char **)(v26 + 64);
                  }
                  goto LABEL_176;
                }
                v60 += v158;
              }
            }
            else
            {
              v129 = &v125[8 * v123];
            }
            do
            {
              v163 = *(_QWORD *)v60;
              v60 += 8;
              *(_QWORD *)v129 = v163;
              v129 += 8;
            }
            while (v129 != v59);
            goto LABEL_174;
          }
LABEL_277:
          sub_23938C4B8();
        }
        v86 = *(char **)(v26 + 56);
        if (v86 != *(char **)(v26 + 48))
        {
          v87 = *(char **)(v26 + 56);
          goto LABEL_181;
        }
        v117 = *(_BYTE **)(v26 + 64);
        v116 = *(_QWORD *)(v26 + 72);
        if ((unint64_t)v117 < v116)
        {
          v118 = (uint64_t)(v116 - (_QWORD)v117) >> 3;
          if (v118 >= -1)
            v119 = v118 + 1;
          else
            v119 = v118 + 2;
          v120 = v119 >> 1;
          v121 = &v117[8 * (v119 >> 1)];
          v87 = &v121[-(v117 - v86)];
          if (v117 != v86)
          {
            memmove(&v121[-(v117 - v86)], *(const void **)(v26 + 56), v117 - v86);
            v86 = *(char **)(v26 + 64);
          }
          *(_QWORD *)(v26 + 56) = v87;
          *(_QWORD *)(v26 + 64) = &v86[8 * v120];
LABEL_181:
          *((_QWORD *)v87 - 1) = v58;
          v166 = *(char **)(v26 + 56);
          v165 = *(char **)(v26 + 64);
          *(_QWORD *)(v26 + 56) = v166 - 8;
          v167 = *((_QWORD *)v166 - 1);
          *(_QWORD *)(v26 + 56) = v166;
          if (v165 != *(char **)(v26 + 72))
          {
LABEL_203:
            *(_QWORD *)v165 = v167;
            goto LABEL_204;
          }
          v168 = *(char **)(v26 + 48);
          if (v166 > v168)
          {
            v169 = (v166 - v168) >> 3;
            if (v169 >= -1)
              v170 = v169 + 1;
            else
              v170 = v169 + 2;
            v171 = v170 >> 1;
            v172 = -v171;
            v173 = &v166[-8 * v171];
            v174 = v165 - v166;
            if (v165 != v166)
            {
              memmove(&v166[-8 * v171], v166, v165 - v166);
              v166 = *(char **)(v26 + 56);
            }
            v165 = &v173[v174];
            *(_QWORD *)(v26 + 56) = &v166[8 * v172];
            *(_QWORD *)(v26 + 64) = &v173[v174];
            goto LABEL_203;
          }
          v175 = (v165 - v168) >> 2;
          if (v165 == v168)
            v175 = 1;
          if (v175 >> 61)
            goto LABEL_277;
          v176 = v175 >> 2;
          v177 = 8 * v175;
          v178 = (char *)operator new(8 * v175);
          v179 = &v178[8 * v176];
          v180 = v165 - v166;
          v82 = v165 == v166;
          v165 = v179;
          if (!v82)
          {
            v165 = &v179[v180 & 0xFFFFFFFFFFFFFFF8];
            v181 = v180 - 8;
            if ((unint64_t)(v180 - 8) < 0x38)
            {
              v182 = &v178[8 * v176];
              goto LABEL_200;
            }
            v183 = &v178[8 * v176];
            v182 = v183;
            if ((unint64_t)(v183 - v166) < 0x20)
            {
              do
              {
LABEL_200:
                v190 = *(_QWORD *)v166;
                v166 += 8;
                *(_QWORD *)v182 = v190;
                v182 += 8;
              }
              while (v182 != v165);
              goto LABEL_201;
            }
            v184 = (v181 >> 3) + 1;
            v185 = 8 * (v184 & 0x3FFFFFFFFFFFFFFCLL);
            v182 = &v179[v185];
            v186 = (__int128 *)(v166 + 16);
            v187 = v183 + 16;
            v188 = v184 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v189 = *v186;
              *(v187 - 1) = *(v186 - 1);
              *v187 = v189;
              v186 += 2;
              v187 += 2;
              v188 -= 4;
            }
            while (v188);
            if (v184 != (v184 & 0x3FFFFFFFFFFFFFFCLL))
            {
              v166 += v185;
              goto LABEL_200;
            }
          }
LABEL_201:
          *(_QWORD *)(v26 + 48) = v178;
          *(_QWORD *)(v26 + 56) = v179;
          *(_QWORD *)(v26 + 64) = v165;
          *(_QWORD *)(v26 + 72) = &v178[v177];
          if (v168)
          {
            operator delete(v168);
            v165 = *(char **)(v26 + 64);
          }
          goto LABEL_203;
        }
        v138 = v116 - (_QWORD)v86;
        v82 = v138 == 0;
        v139 = v138 >> 2;
        if (v82)
          v139 = 1;
        if (v139 >> 61)
          goto LABEL_277;
        v140 = (v139 + 3) >> 2;
        v141 = 8 * v139;
        v142 = (char *)operator new(8 * v139);
        v87 = &v142[8 * v140];
        v143 = &v142[v141];
        v144 = v87;
        v145 = v117 - v86;
        if (v117 != v86)
        {
          v144 = &v87[v145 & 0xFFFFFFFFFFFFFFF8];
          v146 = v145 - 8;
          v147 = &v142[8 * v140];
          v148 = v86;
          if (v146 > 0x37)
          {
            v149 = &v142[8 * v140];
            v147 = v149;
            v148 = v86;
            if ((unint64_t)(v149 - v86) >= 0x20)
            {
              v150 = (v146 >> 3) + 1;
              v151 = 8 * (v150 & 0x3FFFFFFFFFFFFFFCLL);
              v147 = &v87[v151];
              v152 = (__int128 *)(v86 + 16);
              v153 = v149 + 16;
              v154 = v150 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v155 = *v152;
                *(v153 - 1) = *(v152 - 1);
                *v153 = v155;
                v152 += 2;
                v153 += 2;
                v154 -= 4;
              }
              while (v154);
              if (v150 == (v150 & 0x3FFFFFFFFFFFFFFCLL))
              {
                *(_QWORD *)(v26 + 48) = v142;
                *(_QWORD *)(v26 + 56) = v87;
                *(_QWORD *)(v26 + 64) = v144;
                *(_QWORD *)(v26 + 72) = v143;
LABEL_180:
                operator delete(v86);
                v87 = *(char **)(v26 + 56);
                goto LABEL_181;
              }
              v148 = &v86[v151];
            }
          }
          do
          {
            v164 = *(_QWORD *)v148;
            v148 += 8;
            *(_QWORD *)v147 = v164;
            v147 += 8;
          }
          while (v147 != v144);
        }
        *(_QWORD *)(v26 + 48) = v142;
        *(_QWORD *)(v26 + 56) = v87;
        *(_QWORD *)(v26 + 64) = v144;
        *(_QWORD *)(v26 + 72) = v143;
        if (!v86)
          goto LABEL_181;
        goto LABEL_180;
      }
      if (v56 == v57)
        v69 = 1;
      else
        v69 = (v56 - v57) >> 2;
      if (v69 >> 61)
        goto LABEL_277;
      v70 = (char *)operator new(8 * v69);
      v71 = &v70[8 * v39];
      v72 = &v70[8 * v69];
      v73 = operator new(0xFC0uLL);
      if (v39 == v69)
      {
        if (v40 < 1)
        {
          v91 = v40 >> 2;
          if (v38 == v37)
            v91 = 1;
          if (v91 >> 61)
            goto LABEL_277;
          v92 = 8 * v91;
          v71 = (char *)operator new(8 * v91);
          v72 = &v71[v92];
          operator delete(v70);
          v37 = *(char **)(v26 + 56);
          v38 = *(char **)(v26 + 64);
          v70 = v71;
        }
        else
        {
          v74 = v39 + 2;
          if (v39 >= -1)
            v74 = v39 + 1;
          v71 -= 8 * (v74 >> 1);
        }
      }
      *(_QWORD *)v71 = v73;
      v93 = v71 + 8;
      if (v38 == v37)
      {
        v94 = v71;
        v95 = v71 + 8;
LABEL_111:
        v96 = *(void **)(v26 + 48);
        *(_QWORD *)(v26 + 48) = v70;
        *(_QWORD *)(v26 + 56) = v94;
        v38 = v95;
        *(_QWORD *)(v26 + 64) = v95;
        *(_QWORD *)(v26 + 72) = v72;
        v35 = &qword_256930000;
        if (v96)
        {
          operator delete(v96);
          v38 = *(char **)(v26 + 64);
        }
        goto LABEL_205;
      }
      while (v71 != v70)
      {
        v97 = v71;
        v95 = v93;
LABEL_114:
        v98 = *((_QWORD *)v38 - 1);
        v38 -= 8;
        *((_QWORD *)v97 - 1) = v98;
        v94 = v97 - 8;
        v93 = v95;
        v71 = v94;
        if (v38 == *(char **)(v26 + 56))
          goto LABEL_111;
      }
      if (v93 < v72)
      {
        v99 = (v72 - v93) >> 3;
        if (v99 >= -1)
          v100 = v99 + 1;
        else
          v100 = v99 + 2;
        v95 = &v93[8 * (v100 >> 1)];
        v97 = &v71[8 * (v100 >> 1)];
        if (v93 == v71)
        {
          v70 = v93;
        }
        else
        {
          memmove(&v71[8 * (v100 >> 1)], v71, v93 - v71);
          v70 = v71;
        }
        goto LABEL_114;
      }
      v101 = (v72 - v71) >> 2;
      if (v72 == v71)
        v101 = 1;
      if (v101 >> 61)
        goto LABEL_277;
      v102 = (v101 + 3) >> 2;
      v103 = 8 * v101;
      v104 = (char *)operator new(8 * v101);
      v70 = v104;
      v97 = &v104[8 * v102];
      v95 = v97;
      v105 = v93 - v71;
      if (v93 != v71)
      {
        v95 = &v97[v105 & 0xFFFFFFFFFFFFFFF8];
        v106 = v105 - 8;
        v107 = &v104[8 * v102];
        v108 = v71;
        if (v106 >= 0x38)
        {
          v107 = &v104[8 * v102];
          v108 = v71;
          if ((unint64_t)(v107 - v71) >= 0x20)
          {
            v109 = (v106 >> 3) + 1;
            v110 = 8 * (v109 & 0x3FFFFFFFFFFFFFFCLL);
            v107 = &v97[v110];
            v111 = (__int128 *)(v71 + 16);
            v112 = &v104[8 * v102 + 16];
            v113 = v109 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v114 = *v111;
              *((_OWORD *)v112 - 1) = *(v111 - 1);
              *(_OWORD *)v112 = v114;
              v111 += 2;
              v112 += 32;
              v113 -= 4;
            }
            while (v113);
            if (v109 == (v109 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_133;
            v108 = &v71[v110];
          }
        }
        do
        {
          v115 = *(_QWORD *)v108;
          v108 += 8;
          *(_QWORD *)v107 = v115;
          v107 += 8;
        }
        while (v107 != v95);
      }
LABEL_133:
      v72 = &v104[v103];
      operator delete(v71);
      goto LABEL_114;
    }
    *(_QWORD *)(v26 + 80) = v44;
    v45 = v37 + 8;
    v46 = *(_QWORD *)v37;
    *(_QWORD *)(v26 + 56) = v37 + 8;
    if (v38 != *(char **)(v26 + 72))
    {
LABEL_156:
      *(_QWORD *)v38 = v46;
      v38 = (char *)(*(_QWORD *)(v26 + 64) + 8);
      *(_QWORD *)(v26 + 64) = v38;
      v35 = &qword_256930000;
LABEL_205:
      v37 = *(char **)(v26 + 56);
      goto LABEL_206;
    }
    v47 = *(char **)(v26 + 48);
    if (v45 > v47)
    {
      v48 = (v45 - v47) >> 3;
      if (v48 >= -1)
        v49 = v48 + 1;
      else
        v49 = v48 + 2;
      v50 = v49 >> 1;
      v51 = -v50;
      v52 = &v45[-8 * v50];
      v53 = v38 - v45;
      if (v38 != v45)
      {
        memmove(&v45[-8 * v50], v37 + 8, v38 - v45);
        v38 = *(char **)(v26 + 56);
      }
      v54 = &v38[8 * v51];
      v38 = &v52[v53];
      *(_QWORD *)(v26 + 56) = v54;
      *(_QWORD *)(v26 + 64) = &v52[v53];
      goto LABEL_156;
    }
    v77 = (v38 - v47) >> 2;
    if (v38 == v47)
      v77 = 1;
    if (v77 >> 61)
      goto LABEL_277;
    v78 = v77 >> 2;
    v79 = 8 * v77;
    v80 = (char *)operator new(8 * v77);
    v81 = &v80[8 * v78];
    v83 = v38 - v45;
    v82 = v38 == v45;
    v38 = v81;
    if (!v82)
    {
      v38 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
      v84 = v83 - 8;
      if ((unint64_t)(v83 - 8) < 0x38)
      {
        v85 = &v80[8 * v78];
        goto LABEL_153;
      }
      v130 = &v80[8 * v78];
      v85 = v130;
      if ((unint64_t)(v130 - v45) < 0x20)
      {
        do
        {
LABEL_153:
          v137 = *(_QWORD *)v45;
          v45 += 8;
          *(_QWORD *)v85 = v137;
          v85 += 8;
        }
        while (v85 != v38);
        goto LABEL_154;
      }
      v131 = (v84 >> 3) + 1;
      v132 = 8 * (v131 & 0x3FFFFFFFFFFFFFFCLL);
      v85 = &v81[v132];
      v133 = (__int128 *)(v37 + 24);
      v134 = v130 + 16;
      v135 = v131 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v136 = *v133;
        *(v134 - 1) = *(v133 - 1);
        *v134 = v136;
        v133 += 2;
        v134 += 2;
        v135 -= 4;
      }
      while (v135);
      if (v131 != (v131 & 0x3FFFFFFFFFFFFFFCLL))
      {
        v45 += v132;
        goto LABEL_153;
      }
    }
LABEL_154:
    *(_QWORD *)(v26 + 48) = v80;
    *(_QWORD *)(v26 + 56) = v81;
    *(_QWORD *)(v26 + 64) = v38;
    *(_QWORD *)(v26 + 72) = &v80[v79];
    if (v47)
    {
      operator delete(v47);
      v38 = *(char **)(v26 + 64);
    }
    goto LABEL_156;
  }
LABEL_206:
  if (v38 == v37)
  {
    v192 = 0;
  }
  else
  {
    v191 = *(_QWORD *)(v26 + 88) + *(_QWORD *)(v26 + 80);
    v192 = *(_QWORD *)&v37[8 * (v191 / 0x12)] + 224 * (v191 % 0x12);
  }
  *(_QWORD *)v192 = 0;
  *(_QWORD *)(v192 + 8) = 0;
  v193 = v342;
  v194 = v343;
  v195 = v345;
  *(_OWORD *)(v192 + 48) = v344;
  *(_OWORD *)(v192 + 64) = v195;
  *(_OWORD *)(v192 + 16) = v193;
  *(_OWORD *)(v192 + 32) = v194;
  v196 = v346;
  v197 = v348;
  *(_OWORD *)(v192 + 96) = v347;
  *(_OWORD *)(v192 + 112) = v197;
  *(_OWORD *)(v192 + 80) = v196;
  v198 = v349;
  v199 = v350;
  v200 = v352;
  *(_OWORD *)(v192 + 160) = v351;
  *(_OWORD *)(v192 + 176) = v200;
  *(_OWORD *)(v192 + 128) = v198;
  *(_OWORD *)(v192 + 144) = v199;
  v201 = (_BYTE *)(v192 + 192);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2393BD344(v201, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    v202 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(v192 + 208) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)v201 = v202;
  }
  *(_QWORD *)v192 = CVPixelBufferRetain(pixelBufferOut);
  *(_QWORD *)(v192 + 8) = CVPixelBufferRetain(texture);
  ++*(_QWORD *)(v26 + 88);
  v203 = *v319;
  if (*(_QWORD *)(*v319 + 88) >= (unint64_t)(*(_QWORD *)(*v319 + 16) + 1))
  {
    if (qword_256930378 != -1)
      dispatch_once(&qword_256930378, &unk_250AD5F18);
    v206 = v35[110];
    if (os_log_type_enabled(v206, OS_LOG_TYPE_DEBUG))
    {
      v274 = *(_QWORD *)(v203 + 88) + *(_QWORD *)(v203 + 80) - 1;
      v275 = *(_QWORD *)(*(_QWORD *)(v203 + 56) + 8 * (v274 / 0x12));
      v276 = v274 % 0x12;
      v277 = v275 + 224 * v276;
      v278 = (void **)(v277 + 192);
      if (*(char *)(v277 + 215) < 0)
      {
        sub_2393BD344(&pixelTransferSessionOut, *v278, *(_QWORD *)(v275 + 224 * v276 + 200));
      }
      else
      {
        v279 = *(_OWORD *)v278;
        pixelTransferSessionOut.__r_.__value_.__r.__words[2] = *(_QWORD *)(v277 + 208);
        *(_OWORD *)&pixelTransferSessionOut.__r_.__value_.__l.__data_ = v279;
      }
      v280 = &pixelTransferSessionOut;
      if ((pixelTransferSessionOut.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v280 = (std::string *)pixelTransferSessionOut.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v280;
      _os_log_debug_impl(&dword_239388000, v206, OS_LOG_TYPE_DEBUG, "MVGConsistency::evaluateFrame: Evaluating frame %{public}s", buf, 0xCu);
      if (SHIBYTE(pixelTransferSessionOut.__r_.__value_.__r.__words[2]) < 0)
        operator delete(pixelTransferSessionOut.__r_.__value_.__l.__data_);
    }
    v207 = *(_QWORD *)(v203 + 80);
    v208 = *(_QWORD *)(v203 + 88) + v207 - 1;
    v209 = *(_QWORD *)(v203 + 56);
    v210 = *(_QWORD *)(v209 + 8 * (v208 / 0x12));
    v211 = v208 % 0x12;
    v212 = (__CVBuffer **)(v210 + 224 * (v208 % 0x12));
    v213 = *(_QWORD *)(v209 + 8 * (v207 / 0x12));
    v214 = v207 % 0x12;
    v215 = v213 + 224 * (v207 % 0x12);
    v216 = v212[1];
    v217 = *(__CVBuffer **)(v215 + 8);
    CVPixelBufferLockBaseAddress(v216, 1uLL);
    pixelBuffer = v216;
    cva::imageViewFromPixelBuffer<float>();
    CVPixelBufferLockBaseAddress(v217, 1uLL);
    v283 = v217;
    cva::imageViewFromPixelBuffer<float>();
    CVPixelBufferLockBaseAddress(*(CVPixelBufferRef *)(v203 + 32), 0);
    cva::imageViewFromPixelBuffer<float>();
    v218 = *v212;
    v219 = *(__CVBuffer **)v215;
    CVPixelBufferLockBaseAddress(v218, 1uLL);
    cva::imageViewFromPixelBuffer<unsigned char>();
    CVPixelBufferLockBaseAddress(v219, 1uLL);
    v281 = v219;
    cva::imageViewFromPixelBuffer<unsigned char>();
    CVPixelBufferLockBaseAddress(*(CVPixelBufferRef *)(v203 + 40), 0);
    cva::imageViewFromPixelBuffer<float>();
    v221 = *(_QWORD *)v203;
    if (!*(_QWORD *)v203 || !*(_QWORD *)(v203 + 8))
    {
LABEL_261:
      CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(v203 + 32), 0);
      CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
      CVPixelBufferUnlockBaseAddress(v283, 1uLL);
      CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(v203 + 40), 0);
      CVPixelBufferUnlockBaseAddress(v218, 1uLL);
      CVPixelBufferUnlockBaseAddress(v281, 1uLL);
      if (qword_256930378 != -1)
        dispatch_once(&qword_256930378, &unk_250AD5F18);
      v204 = qword_256930370;
      if (!os_log_type_enabled((os_log_t)qword_256930370, OS_LOG_TYPE_DEBUG))
        goto LABEL_264;
      LOWORD(pixelTransferSessionOut.__r_.__value_.__l.__data_) = 0;
      v205 = "MVGConsistency::evaluateFrame: Completed multiviewProjection";
      goto LABEL_271;
    }
    v222 = 0;
    v223 = *(float32x4_t *)(v215 + 16);
    v224 = *(float32x4_t *)(v215 + 32);
    v225 = *(float32x4_t *)(v215 + 48);
    v293 = *(float32x4_t *)(v215 + 64);
    v299 = vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(v224, *(float32x4_t *)(MEMORY[0x24BDAEE00] + 16)), (int8x16_t)vceqq_f32(v223, *MEMORY[0x24BDAEE00])), vandq_s8((int8x16_t)vceqq_f32(v225, *(float32x4_t *)(MEMORY[0x24BDAEE00] + 32)), (int8x16_t)vceqq_f32(v293, *(float32x4_t *)(MEMORY[0x24BDAEE00] + 48)))));
    v226 = v210 + 224 * v211;
    v227 = (simd_float4 *)(v226 + 80);
    v228 = (simd_float4 *)(v226 + 96);
    v229 = (simd_float4 *)(v226 + 112);
    v230 = v213 + 224 * v214;
    v231 = (simd_float3 *)(v230 + 80);
    v232 = (simd_float3 *)(v230 + 96);
    v233 = (simd_float3 *)(v230 + 112);
    v298 = (simd_float4 *)(v230 + 128);
    v297 = (simd_float4 *)(v230 + 144);
    v295 = (simd_float4 *)(v230 + 176);
    v296 = (simd_float4 *)(v230 + 160);
    v290 = (float32x4_t *)(v226 + 144);
    v291 = (float32x4_t *)(v226 + 128);
    v294 = v223;
    v234 = vmulq_f32(v223, v223);
    v288 = (float32x4_t *)(v226 + 176);
    v289 = (float32x4_t *)(v226 + 160);
    v238.columns[1] = (simd_float4)vaddq_f32(v234, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v234.f32, 1));
    v238.columns[0] = (simd_float4)vdupq_laneq_s32((int32x4_t)v234, 2);
    v238.columns[3].i32[0] = vaddq_f32((float32x4_t)v238.columns[0], (float32x4_t)v238.columns[1]).u32[0];
    v238.columns[0].f32[0] = sqrtf(v238.columns[3].f32[0]) * 0.5;
    v292 = (float32x2_t)v238.columns[3].u32[0];
    v235 = -0.0000001 - v238.columns[0].f32[0];
    v286 = v225;
    v287 = v224;
    v238.columns[3] = (simd_float4)vmulq_f32(v225, v225);
    v236 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v238.columns[3].f32, 1);
    v238.columns[3].i32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v238.columns[3], 2), vaddq_f32((float32x4_t)v238.columns[3], v236)).u32[0];
    v236.f32[0] = sqrtf(v238.columns[3].f32[0]);
    v285 = (float32x2_t)v238.columns[3].u32[0];
    v238.columns[3] = (simd_float4)vmulq_f32(v224, v224);
    v237 = vaddq_f32((float32x4_t)v238.columns[3], (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v238.columns[3].f32, 1));
    v238.columns[3] = (simd_float4)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v238.columns[3], 2), v237);
    v237.f32[0] = sqrtf(v238.columns[3].f32[0]);
    v238.columns[3].i32[1] = 0;
    v284 = *(float32x2_t *)v238.columns[3].f32;
    v239 = (float)(v236.f32[0] * 0.5) + 0.0000001;
    v240 = -0.0000001 - (float)(v236.f32[0] * 0.5);
    v241 = (float)(v237.f32[0] * 0.5) + 0.0000001;
    v242 = -0.0000001 - (float)(v237.f32[0] * 0.5);
    v243 = v238.columns[0].f32[0] + 0.0000001;
    v244 = 1;
    while (!v244)
    {
LABEL_224:
      if (++v222 >= v221)
        goto LABEL_261;
    }
    v245 = 0;
    *(float *)&v220 = (float)v222;
    v302 = v220;
    while (1)
    {
      v238.columns[0].f32[0] = (float)v245;
      v303 = *(int32x2_t *)v238.columns[0].f32;
      v307 = *(float *)(v359
                      + pixelTransferSessionOut.__r_.__value_.__r.__words[0]
                      + (LODWORD(pixelTransferSessionOut.__r_.__value_.__r.__words[2]) * v222
                                     + HIDWORD(pixelTransferSessionOut.__r_.__value_.__r.__words[2]) * v245));
      v238.columns[0] = *v227;
      v238.columns[1] = *v228;
      v238.columns[2] = *v229;
      v238.columns[0].i32[3] = v238.columns[3].i32[3];
      v238.columns[1].i32[3] = v237.i32[3];
      v238.columns[2].i32[3] = v236.i32[3];
      v321 = v237.i32[3];
      v323 = v238.columns[3].i32[3];
      v320 = v236.i32[3];
      *(simd_float3x3 *)v238.columns[0].f32 = __invert_f3(*(simd_float3x3 *)v238.columns[0].f32);
      v220 = v302;
      v238.columns[0].i64[0] = vaddq_f32((float32x4_t)v238.columns[2], vmlaq_n_f32(vmulq_n_f32((float32x4_t)v238.columns[0], *(float *)&v302), (float32x4_t)v238.columns[1], *(float *)v303.i32)).u64[0];
      v238.columns[1] = (simd_float4)vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32((float32x4_t)xmmword_2393F5360, v307 * v238.columns[0].f32[0]), (float32x4_t)xmmword_2393F5440, vmuls_lane_f32(v307, *(float32x2_t *)v238.columns[0].f32, 1)), (float32x4_t)xmmword_2393F5450, v307);
      v238.columns[0].i32[1] = 0;
      v238.columns[2] = (simd_float4)vaddq_f32((float32x4_t)v238.columns[1], (float32x4_t)0);
      if (fabsf(v238.columns[2].f32[0] + INFINITY) < 1.0e-10)
      {
        *(_DWORD *)(v339 + v336 + (v337 * v222 + v338 * v245)) = 0;
        v238.columns[0].i32[0] = 0;
        v246 = v314;
        v247 = v317;
        v248 = v311;
        v237.i32[3] = v321;
        v238.columns[3].i32[3] = v323;
        v236.i32[3] = v320;
      }
      else
      {
        v300 = (float32x4_t)v238.columns[2];
        v249 = vdupq_lane_s32(v303, 0);
        v304 = *(float *)(v357 + *(_QWORD *)buf
                               + (*(_DWORD *)&v356[2] * v222 + *(_DWORD *)&v356[6] * v245));
        v308 = (float32x4_t)v249;
        v361.columns[0] = *v231;
        v361.columns[1] = *v232;
        v361.columns[2] = *v233;
        v361.columns[0].i32[3] = v317.i32[3];
        v361.columns[1].i32[3] = v314.i32[3];
        v361.columns[2].i32[3] = v311.i32[3];
        v301 = v361;
        v362 = __invert_f3(v361);
        v220 = v302;
        v362.columns[0].i64[0] = vaddq_f32((float32x4_t)v362.columns[2], vmlaq_f32(vmulq_n_f32((float32x4_t)v362.columns[0], *(float *)&v302), v308, (float32x4_t)v362.columns[1])).u64[0];
        v250 = vaddq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32((float32x4_t)xmmword_2393F5360, v304 * v362.columns[0].f32[0]), (float32x4_t)xmmword_2393F5440, vmuls_lane_f32(v304, *(float32x2_t *)v362.columns[0].f32, 1)), (float32x4_t)xmmword_2393F5450, v304), (float32x4_t)0);
        v238.columns[0] = *v298;
        v238.columns[1] = *v297;
        v238.columns[2] = *v296;
        v238.columns[3] = *v295;
        if ((v299 & 0x80000000) != 0)
          goto LABEL_247;
        v251 = vrsqrte_f32(v292);
        v252 = vmul_f32(v251, vrsqrts_f32(v292, vmul_f32(v251, v251)));
        v253 = vmulq_n_f32(v294, vmul_f32(v252, vrsqrts_f32(v292, vmul_f32(v252, v252))).f32[0]);
        v254 = vsubq_f32(vaddq_f32((float32x4_t)v238.columns[3], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v238.columns[0], v250.f32[0]), (float32x4_t)v238.columns[1], *(float32x2_t *)v250.f32, 1), (float32x4_t)v238.columns[2], v250, 2)), v293);
        v255 = vmulq_f32(v254, v253);
        v256 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v255, 2), vaddq_f32(v255, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v255.f32, 1))).f32[0];
        if (v256 < v235)
          goto LABEL_246;
        v257 = vrsqrte_f32(v285);
        v258 = vmul_f32(v257, vrsqrts_f32(v285, vmul_f32(v257, v257)));
        v259 = vmulq_f32(v254, vmulq_n_f32(v286, vmul_f32(v258, vrsqrts_f32(v285, vmul_f32(v258, v258))).f32[0]));
        LODWORD(v260) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v259, 2), vaddq_f32(v259, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v259.f32, 1))).u32[0];
        v261 = vrsqrte_f32(v284);
        v262 = vmul_f32(v261, vrsqrts_f32(v284, vmul_f32(v261, v261)));
        v263 = vmulq_f32(v254, vmulq_n_f32(v287, vmul_f32(v262, vrsqrts_f32(v284, vmul_f32(v262, v262))).f32[0]));
        LODWORD(v264) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v263, 2), vaddq_f32(v263, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v263.f32, 1))).u32[0];
        v265 = v256 > v243 || v264 < v242;
        v266 = !v265 && v264 <= v241;
        v267 = !v266 || v260 < v240;
        if (!v267 && v260 <= v239)
        {
LABEL_247:
          v305 = *v291;
          v309 = *v290;
          v312 = *v289;
          v315 = *v288;
          v318 = v250;
          v363 = __invert_f4(v238);
          v306 = vaddq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v363.columns[0], v315.f32[0]), (float32x4_t)v363.columns[1], *(float32x2_t *)v315.f32, 1), (float32x4_t)v363.columns[2], v315, 2), (float32x4_t)v363.columns[3], v315, 3), vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(
                               vmulq_n_f32((float32x4_t)v363.columns[0], v305.f32[0]),
                               (float32x4_t)v363.columns[1],
                               *(float32x2_t *)v305.f32,
                               1),
                             (float32x4_t)v363.columns[2],
                             v305,
                             2),
                           (float32x4_t)v363.columns[3],
                           v305,
                           3),
                         v300.f32[0]),
                       vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v363.columns[0], v309.f32[0]), (float32x4_t)v363.columns[1], *(float32x2_t *)v309.f32, 1), (float32x4_t)v363.columns[2], v309, 2), (float32x4_t)v363.columns[3], v309, 3), *(float32x2_t *)v300.f32, 1), vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v363.columns[0], v312.f32[0]), (float32x4_t)v363.columns[1],
                           *(float32x2_t *)v312.f32,
                           1),
                         (float32x4_t)v363.columns[2],
                         v312,
                         2),
                       (float32x4_t)v363.columns[3],
                       v312,
                       3),
                     v300,
                     2));
          v310 = *(float32x4_t *)v231;
          v313 = *(float32x4_t *)v232;
          v316 = *(float32x4_t *)v233;
          v238 = __invert_f4(*(simd_float4x4 *)zmmword_2393FA190);
          v238.columns[0] = (simd_float4)vaddq_f32((float32x4_t)v238.columns[3], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v238.columns[0], v306.f32[0]), (float32x4_t)v238.columns[1], *(float32x2_t *)v306.f32, 1), (float32x4_t)v238.columns[2], v306, 2));
          v238.columns[1] = (simd_float4)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v310, v238.columns[0].f32[0]), v313, *(float32x2_t *)v238.columns[0].f32, 1), v316, (float32x4_t)v238.columns[0], 2);
          *(float32x2_t *)v238.columns[0].f32 = vrnda_f32(vdiv_f32(*(float32x2_t *)v238.columns[1].f32, (float32x2_t)vdup_laneq_s32((int32x4_t)v238.columns[1], 2)));
          v269 = (int)v238.columns[0].f32[0];
          v270 = ((int)v238.columns[0].f32[0] & 0x80000000) == 0 && v269 < *(_DWORD *)v203;
          v237.i32[3] = v321;
          v238.columns[3].i32[3] = v323;
          v236.i32[3] = v320;
          v246 = v301.columns[1];
          v248 = v301.columns[2];
          v247 = v301.columns[0];
          v271 = (int)v238.columns[0].f32[1];
          if ((int)v238.columns[0].f32[1] < 0)
            goto LABEL_229;
          if (v271 >= *(_DWORD *)(v203 + 8))
            v270 = 0;
          if (!v270)
            goto LABEL_229;
          *(int32x2_t *)v238.columns[1].f32 = vdup_laneq_s32((int32x4_t)v306, 2);
          v238.columns[1].i32[0] = fabsf(v318.f32[0] + INFINITY);
          *(int32x2_t *)v238.columns[0].f32 = vdup_laneq_s32((int32x4_t)v318, 2);
          v238.columns[2].i32[0] = 786163455;
          v238.columns[0].i32[0] = 786163455;
          *(int32x2_t *)v238.columns[0].f32 = vcgt_f32(*(float32x2_t *)v238.columns[0].f32, *(float32x2_t *)v238.columns[1].f32);
          if (((v238.columns[0].i32[1] | v238.columns[0].i32[0]) & 1) != 0)
          {
            *(_DWORD *)(v339 + v336 + (v337 * v222 + v338 * v245)) = 0;
            v238.columns[0].i32[0] = 0;
          }
          else
          {
            v272 = vsubq_f32(v306, v318);
            v238.columns[0] = (simd_float4)vmulq_f32(v272, v272);
            v238.columns[0].i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v238.columns[0], 2), vaddq_f32((float32x4_t)v238.columns[0], (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v238.columns[0].f32, 1))).u64[0];
            v238.columns[0].f32[0] = sqrtf(v238.columns[0].f32[0]);
            if (v238.columns[0].f32[0] == INFINITY)
              v238.columns[0].f32[0] = 0.0;
            *(_DWORD *)(v339 + v336 + (v337 * v222 + v338 * v245)) = v238.columns[0].i32[0];
            v238.columns[0].i8[0] = *(_BYTE *)(v335 + v332 + (v333 * v222 + v334 * v245));
            v238.columns[2].i8[0] = *(_BYTE *)(v331 + v328 + (v329 * v269 + v330 * v271));
            v238.columns[0].f32[0] = (float)((float)v238.columns[0].u32[0] - (float)v238.columns[2].u32[0])
                                   * (float)((float)v238.columns[0].u32[0] - (float)v238.columns[2].u32[0]);
            if (v238.columns[0].f32[0] == INFINITY)
              v238.columns[0].f32[0] = 0.0;
          }
        }
        else
        {
LABEL_246:
          *(_DWORD *)(v339 + v336 + (v337 * v222 + v338 * v245)) = 0;
          v238.columns[0].i32[0] = 0;
          v237.i32[3] = v321;
          v238.columns[3].i32[3] = v323;
          v236.i32[3] = v320;
          v246 = v301.columns[1];
          v248 = v301.columns[2];
          v247 = v301.columns[0];
        }
      }
      *(_DWORD *)(v327 + v324 + (v325 * v222 + v326 * v245)) = v238.columns[0].i32[0];
LABEL_229:
      v311 = v248;
      v314 = v246;
      v317 = v247;
      ++v245;
      v244 = *(_QWORD *)(v203 + 8);
      if (v245 >= v244)
      {
        v221 = *(_QWORD *)v203;
        goto LABEL_224;
      }
    }
  }
  if (qword_256930378 != -1)
    dispatch_once(&qword_256930378, &unk_250AD5F18);
  v204 = v35[110];
  if (!os_log_type_enabled(v204, OS_LOG_TYPE_DEBUG))
    goto LABEL_264;
  LOWORD(pixelTransferSessionOut.__r_.__value_.__l.__data_) = 0;
  v205 = "MVGConsistency::evaluateFrame: Not enough frames, skipping evaluation.";
LABEL_271:
  _os_log_debug_impl(&dword_239388000, v204, OS_LOG_TYPE_DEBUG, v205, (uint8_t *)&pixelTransferSessionOut, 2u);
LABEL_264:
  v19 = 0;
LABEL_265:
  CVPixelBufferRelease(pixelBufferOut);
  CVPixelBufferRelease(texture);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v19;
}

void sub_2393AABD8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_2393AABE4(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x307]) < 0)
    operator delete((void *)STACK[0x2F0]);
  _Unwind_Resume(a1);
}

CVPixelBufferRef OCMultiviewGeometryCreatePhotometricConfidenceMap(CVPixelBufferRef result)
{
  if (result)
    return CVPixelBufferRetain(*(CVPixelBufferRef *)(*(_QWORD *)result + 40));
  return result;
}

CVPixelBufferRef OCMultiviewGeometryCreateGeometricConfidenceMap(CVPixelBufferRef result)
{
  if (result)
    return CVPixelBufferRetain(*(CVPixelBufferRef *)(*(_QWORD *)result + 32));
  return result;
}

float sub_2393AAC2C(uint64_t a1, CVPixelBufferRef pixelBuffer, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  size_t WidthOfPlane;
  size_t HeightOfPlane;
  float result;
  double v15;
  double v16;
  unint64_t v17;
  vImagePixelCount v18;
  double v19;
  unint64_t v20;
  vImagePixelCount v21;
  char *BaseAddressOfPlane;
  size_t BytesPerRowOfPlane;
  uint64_t __StandardDeviation;
  vImage_Buffer dest;
  vImage_Buffer src;

  WidthOfPlane = CVPixelBufferGetWidthOfPlane(pixelBuffer, 0);
  HeightOfPlane = CVPixelBufferGetHeightOfPlane(pixelBuffer, 0);
  result = 0.0;
  if (*(_QWORD *)(a1 + 8) >= a5 && *(_QWORD *)(a1 + 16) >= a6 && WidthOfPlane > a3 && HeightOfPlane > a4)
  {
    v15 = (double)a3;
    v16 = (double)a5 * 0.5;
    v17 = (unint64_t)fmax((double)a3 - v16, 0.0);
    v18 = (unint64_t)fmin(v16 + v15, (double)WidthOfPlane) - v17;
    v19 = (double)a6 * 0.5;
    v20 = (unint64_t)fmax((double)a4 - v19, 0.0);
    v21 = (unint64_t)fmin(v19 + (double)a4, (double)HeightOfPlane) - v20;
    CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL);
    BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0);
    BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 0);
    src.data = &BaseAddressOfPlane[BytesPerRowOfPlane * v20 + v17];
    src.height = v21;
    src.width = v18;
    src.rowBytes = BytesPerRowOfPlane;
    dest.data = *(void **)(a1 + 64);
    dest.height = v21;
    dest.width = v18;
    dest.rowBytes = 4 * v18;
    vImageConvert_Planar8toPlanarF(&src, &dest, 0.0, 255.0, 0);
    CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
    vDSP_f3x3(*(const float **)(a1 + 64), v21, v18, (const float *)(a1 + 24), *(float **)(a1 + 64));
    __StandardDeviation = 0;
    vDSP_normalize(*(const float **)(a1 + 64), 1, 0, 1, (float *)&__StandardDeviation + 1, (float *)&__StandardDeviation, v21 * v18);
    return *(float *)&__StandardDeviation;
  }
  return result;
}

uint64_t sub_2393AADD4(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_2393AAE04(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x23B83C4BCLL);
}

float sub_2393AAE44(uint64_t a1, CVPixelBufferRef pixelBuffer, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  unint64_t WidthOfPlane;
  size_t HeightOfPlane;
  float v14;
  uint64_t v15;
  id v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  const char *v24;
  uint64x2_t v25;
  uint64x2_t v26;
  float64x2_t v27;
  uint64x2_t v28;
  float64x2_t v34;
  int32x4_t v35;
  const char *v36;
  const char *v37;
  id v38;
  const char *v39;
  uint64_t v40;
  unint64_t v41;
  const char *v42;
  uint64_t v43;
  unint64_t v44;
  const char *v45;
  const char *v46;
  uint64_t v47;
  const char *v48;
  const char *v49;
  const char *v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  const char *v56;
  int32x4_t v58;
  void *v59;
  _QWORD v60[3];
  __int128 v61;
  uint64_t v62;
  _QWORD v63[3];
  int32x4_t v64;
  uint64_t v65;
  int32x4_t v66;
  CVMetalTextureRef textureOut;

  CVPixelBufferGetPixelFormatType(pixelBuffer);
  WidthOfPlane = CVPixelBufferGetWidthOfPlane(pixelBuffer, 0);
  HeightOfPlane = CVPixelBufferGetHeightOfPlane(pixelBuffer, 0);
  v14 = 0.0;
  if (*(_QWORD *)(a1 + 8) >= a5 && *(_QWORD *)(a1 + 16) >= a6 && WidthOfPlane > a3)
  {
    v15 = HeightOfPlane;
    if (HeightOfPlane > a4)
    {
      textureOut = 0;
      if (!CVMetalTextureCacheCreateTextureFromImage((CFAllocatorRef)*MEMORY[0x24BDBD240], *(CVMetalTextureCacheRef *)(a1 + 64), pixelBuffer, 0, MTLPixelFormatR8Unorm, WidthOfPlane, HeightOfPlane, 0, &textureOut))
      {
        CVMetalTextureGetTexture(textureOut);
        v59 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = *(id *)(*(_QWORD *)(a1 + 72) + 8);
        objc_msgSend_commandBuffer(v16, v17, v18);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_computeCommandEncoder(v19, v20, v21);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setComputePipelineState_(v22, v23, *(_QWORD *)(a1 + 144));
        objc_msgSend_setTexture_atIndex_(v22, v24, (uint64_t)v59, 0);
        v25.i64[0] = a3;
        v25.i64[1] = a4;
        v26.i64[0] = a5;
        v26.i64[1] = a6;
        v27 = vcvtq_f64_u64(v25);
        v28.i64[0] = WidthOfPlane;
        v28.i64[1] = v15;
        __asm { FMOV            V3.2D, #0.5 }
        v34 = vmulq_f64(vcvtq_f64_u64(v26), _Q3);
        v35 = (int32x4_t)vcvtq_u64_f64(vmaxnmq_f64(vsubq_f64(v27, v34), (float64x2_t)0));
        v58 = (int32x4_t)vsubq_s64((int64x2_t)vcvtq_u64_f64(vminnmq_f64(vaddq_f64(v34, v27), vcvtq_f64_u64(v28))), (int64x2_t)v35);
        v66 = vuzp1q_s32(v35, v58);
        objc_msgSend_setBytes_length_atIndex_(v22, v36, (uint64_t)&v66, 16, 0);
        objc_msgSend_setTexture_atIndex_(v22, v37, *(_QWORD *)(a1 + 96), 1);
        v38 = *(id *)(a1 + 144);
        v41 = objc_msgSend_threadExecutionWidth(v38, v39, v40);
        v44 = objc_msgSend_maxTotalThreadsPerThreadgroup(v38, v42, v43) / v41;

        v64 = v58;
        v65 = 1;
        v63[0] = v41;
        v63[1] = v44;
        v63[2] = 1;
        objc_msgSend_dispatchThreads_threadsPerThreadgroup_(v22, v45, (uint64_t)&v64, v63);
        objc_msgSend_endEncoding(v22, v46, v47);
        objc_msgSend_encodeToCommandBuffer_sourceTexture_destinationTexture_(*(void **)(a1 + 80), v48, (uint64_t)v19, *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104));
        objc_msgSend_encodeToCommandBuffer_sourceTexture_destinationTexture_(*(void **)(a1 + 88), v49, (uint64_t)v19, *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112));
        objc_msgSend_commit(v19, v50, v51);
        objc_msgSend_waitUntilCompleted(v19, v52, v53);
        v54 = *(void **)(a1 + 112);
        v55 = *(_QWORD *)(a1 + 120);
        memset(v60, 0, sizeof(v60));
        v61 = xmmword_2393F5460;
        v62 = 1;
        objc_msgSend_getBytes_bytesPerRow_fromRegion_mipmapLevel_(v54, v56, v55, 8, v60, 0);
        v14 = *(float *)(*(_QWORD *)(a1 + 120) + 4);

      }
    }
  }
  return v14;
}

void sub_2393AB0D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_2393AB120(uint64_t a1)
{
  sub_2393AB144(a1);
  JUMPOUT(0x23B83C4BCLL);
}

uint64_t sub_2393AB144(uint64_t a1)
{
  void *v2;

  CVMetalTextureCacheFlush(*(CVMetalTextureCacheRef *)(a1 + 64), 0);

  v2 = *(void **)(a1 + 120);
  if (v2)
  {
    *(_QWORD *)(a1 + 128) = v2;
    operator delete(v2);
  }

  return a1;
}

void sub_2393AB1B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 120);
  if (v3)
  {
    *(_QWORD *)(v1 + 128) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(a1);
}

double OCNonModularSPI_Serialization_InvalidBoundingBoxTransform()
{
  return 0.0;
}

double OCNonModularSPI_Serialization_InvalidObjectTransform()
{
  return 0.0;
}

double OCNonModularSPI_Serialization_InvalidCameraIntrinsics()
{
  return 0.0;
}

double OCNonModularSPI_Serialization_InvalidCameraTransform()
{
  return 0.0;
}

__IOSurface *OCNonModularSPI_Serialization_CVBufferToData(__IOSurface *DataSize)
{
  __IOSurface *v1;
  void *BaseAddress;
  const char *v3;

  if (DataSize)
  {
    DataSize = (__IOSurface *)CVDataBufferGetDataSize();
    if (DataSize)
    {
      v1 = DataSize;
      DataSize = (__IOSurface *)CVDataBufferGetIOSurface();
      if (DataSize)
      {
        BaseAddress = IOSurfaceGetBaseAddress(DataSize);
        objc_msgSend_dataWithBytes_length_(MEMORY[0x24BDBCE50], v3, (uint64_t)BaseAddress, v1);
        DataSize = (__IOSurface *)objc_claimAutoreleasedReturnValue();
      }
    }
  }
  return DataSize;
}

uint64_t OCImageDSPCentralCropMean(__CVBuffer *a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, float *a6)
{
  OSType PixelFormatType;
  uint64_t v13;
  size_t Width;
  size_t Height;
  float *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  size_t v20;
  unint64_t v21;
  size_t v22;
  float *v23;
  unint64_t v24;
  char *BaseAddress;
  size_t BytesPerRow;
  float __C;
  _QWORD block[8];

  if (!a1)
    return 4294967294;
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  v13 = 4294967294;
  if ((a4 & 1) != 0 && PixelFormatType == 1717855600 && (a5 & 1) != 0 && a6)
  {
    Width = CVPixelBufferGetWidth(a1);
    Height = CVPixelBufferGetHeight(a1);
    BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
    v16 = 0;
    v17 = a4 >> 1;
    if (a2 >= a4 >> 1)
      v18 = a2 - (a4 >> 1);
    else
      v18 = 0;
    v19 = a5 >> 1;
    v20 = v17 + a2;
    if (a3 >= a5 >> 1)
      v21 = a3 - (a5 >> 1);
    else
      v21 = 0;
    if (v20 < Width)
      Width = v20 + 1;
    if (Height > (a5 + a3 < 2))
      Height = a3 + v19 + 1;
    v22 = Height - v21;
    if (Height != v21)
    {
      if (v22 >> 62)
        abort();
      v23 = (float *)operator new(4 * v22);
      v16 = v23;
      if (a3 >= v19)
        v24 = v19;
      else
        v24 = a3;
      bzero(v23, 4 * (Height + v24) - 4 * a3);
    }
    if (!CVPixelBufferLockBaseAddress(a1, 1uLL))
    {
      BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
      block[0] = MEMORY[0x24BDAC760];
      block[1] = 3221225472;
      block[2] = sub_2393AB4B0;
      block[3] = &unk_250AD60F0;
      block[4] = &BaseAddress[4 * v18 + ((BytesPerRow * v21) & 0xFFFFFFFFFFFFFFFCLL)];
      block[5] = BytesPerRow;
      block[6] = v16;
      block[7] = Width - v18;
      dispatch_apply(Height - v21, 0, block);
      __C = 0.0;
      vDSP_sve(v16, 1, &__C, Height - v21);
      if (!CVPixelBufferUnlockBaseAddress(a1, 1uLL))
      {
        v13 = 0;
        *a6 = __C / (float)(v22 * (Width - v18));
        if (!v16)
          return v13;
        goto LABEL_25;
      }
    }
    v13 = 0xFFFFFFFFLL;
    if (v16)
LABEL_25:
      operator delete(v16);
  }
  return v13;
}

void sub_2393AB490(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_2393AB4B0(_QWORD *a1, uint64_t a2)
{
  vDSP_sve((const float *)(a1[4] + ((a1[5] * a2) & 0xFFFFFFFFFFFFFFFCLL)), 1, (float *)(a1[6] + 4 * a2), a1[7]);
}

uint64_t OCNonModularSPI_AppleMakerNote_Version()
{
  return *MEMORY[0x24BE10440];
}

uint64_t OCNonModularSPI_AppleMakerNote_Timestamp()
{
  return *MEMORY[0x24BE10438];
}

uint64_t OCNonModularSPI_AppleMakerNote_FocusAccelerometerVector()
{
  return *MEMORY[0x24BE10430];
}

uint64_t OCNonModularSPI_AppleMakerNote_Camera()
{
  return *MEMORY[0x24BE10428];
}

uint64_t OCNonModularSPI_AppleMakerNote_BackWideAngleCamera()
{
  return 2;
}

uint64_t OCRegistrationCreate(_DWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;

  v4 = operator new(0x10uLL, MEMORY[0x24BEDB6B8]);
  if (!v4)
    return 4294967293;
  v5 = v4;
  result = 0;
  *v5 = 0;
  v5[1] = 0;
  *(_DWORD *)v5 = *a1;
  *a2 = v5;
  return result;
}

uint64_t OCRegistrationStart(float *a1, int8x16_t *a2, unsigned int a3)
{
  uint64_t v6;
  float v7;
  float32x2_t v8;
  uint64_t v9;
  float32x2_t v10;
  float v11;
  float v12;
  int8x16_t *v18;
  int8x16_t v19;
  int8x16_t v20;
  float v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  int8x16_t *v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t *v33;
  int8x16_t *v34;
  unint64_t v35;
  int8x16_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  int8x16_t v42;
  char *v43;
  int8x16_t v44;
  int8x16_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t *v57;
  uint64_t *v58;
  float *v59;

  if (!a1)
    return 0xFFFFFFFFLL;
  v6 = operator new();
  v7 = *a1;
  *(_DWORD *)(v6 + 32) = 0;
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_QWORD *)(v6 + 104) = 0;
  *(_QWORD *)(v6 + 112) = 10;
  *(_QWORD *)(v6 + 120) = 0x3F8000003DCCCCCDLL;
  *(_QWORD *)(v6 + 128) = 0;
  if (v7 <= 0.0)
  {
    if (a3)
    {
      v8 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
      v9 = a3;
      v10 = (float32x2_t)0x80000000800000;
      v11 = 3.4028e38;
      v12 = -3.4028e38;
      __asm { FMOV            V5.2S, #1.0 }
      v18 = a2;
      do
      {
        v19 = *v18;
        v18 += 3;
        v20 = v19;
        v21 = *(float *)&v19.i32[1];
        if (v11 >= *(float *)&v19.i32[1])
          v11 = v21;
        if (v21 >= v12)
          v12 = v21;
        if (v12 < (float)(v11 + 1.0))
          v12 = v11 + 1.0;
        v22.i32[0] = vextq_s8(v20, v20, 8uLL).u32[0];
        v22.i32[1] = v20.i32[0];
        v8 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v22, v8), (int8x8_t)v8, (int8x8_t)v22);
        v23 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v10, v22), (int8x8_t)v10, (int8x8_t)v22);
        v24 = vadd_f32(v8, _D5);
        v10 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v24, v23), (int8x8_t)v24, (int8x8_t)v23);
        --v9;
      }
      while (v9);
      v25 = vsub_f32(v10, v8);
      v7 = cbrtf((float)(vmuls_lane_f32(v12 - v11, v25, 1) * v25.f32[0]) / (float)a3);
    }
    else
    {
      v7 = 0.0;
    }
  }
  *(float *)(v6 + 136) = v7;
  *(_QWORD *)(v6 + 112) = 10;
  *(_QWORD *)(v6 + 120) = 0x3F8000003DCCCCCDLL;
  v27 = (_QWORD *)operator new();
  *v27 = off_250AD6BD0;
  v28 = *(_QWORD *)(v6 + 128);
  *(_QWORD *)(v6 + 128) = v27;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28);
  v59 = a1;
  if (a3)
  {
    v29 = 0;
    v30 = *(int8x16_t **)(v6 + 16);
    do
    {
      v34 = &a2[3 * v29];
      v35 = *(_QWORD *)(v6 + 24);
      if ((unint64_t)v30 < v35)
      {
        v31 = *v34;
        v32 = v34[2];
        v30[1] = v34[1];
        v30[2] = v32;
        *v30 = v31;
        v33 = v30 + 3;
      }
      else
      {
        v36 = *(int8x16_t **)(v6 + 8);
        v37 = 0xAAAAAAAAAAAAAAABLL * (v30 - v36) + 1;
        if (v37 > 0x555555555555555)
          abort();
        v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (_QWORD)v36) >> 4);
        if (2 * v38 > v37)
          v37 = 2 * v38;
        if (v38 >= 0x2AAAAAAAAAAAAAALL)
          v39 = 0x555555555555555;
        else
          v39 = v37;
        if (v39)
        {
          if (v39 > 0x555555555555555)
            sub_23938C4B8();
          v40 = (char *)operator new(48 * v39);
        }
        else
        {
          v40 = 0;
        }
        v41 = &v40[16 * (v30 - v36)];
        v42 = v34[1];
        *(int8x16_t *)v41 = *v34;
        *((int8x16_t *)v41 + 1) = v42;
        *((int8x16_t *)v41 + 2) = v34[2];
        v43 = v41;
        if (v30 != v36)
        {
          do
          {
            v44 = v30[-3];
            v45 = v30[-1];
            *((int8x16_t *)v43 - 2) = v30[-2];
            *((int8x16_t *)v43 - 1) = v45;
            *((int8x16_t *)v43 - 3) = v44;
            v43 -= 48;
            v30 -= 3;
          }
          while (v30 != v36);
          v30 = *(int8x16_t **)(v6 + 8);
        }
        v33 = (int8x16_t *)(v41 + 48);
        *(_QWORD *)(v6 + 8) = v43;
        *(_QWORD *)(v6 + 16) = v41 + 48;
        *(_QWORD *)(v6 + 24) = &v40[48 * v39];
        if (v30)
          operator delete(v30);
      }
      *(_QWORD *)(v6 + 16) = v33;
      ++v29;
      v30 = v33;
    }
    while (v29 != a3);
  }
  else
  {
    v33 = *(int8x16_t **)(v6 + 16);
  }
  v46 = *(_QWORD *)(v6 + 8);
  *(_QWORD *)(v6 + 40) = v46;
  *(_DWORD *)(v6 + 32) = -1431655765 * (((unint64_t)v33 - v46) >> 4);
  v47 = (_QWORD *)operator new();
  *v47 = 0;
  v47[1] = 0;
  v48 = *(unsigned int *)(v6 + 32);
  v47[2] = 3;
  v47[3] = v48;
  v49 = (_QWORD *)operator new();
  *v49 = v6 + 32;
  *v47 = v49;
  v50 = operator new();
  *(_QWORD *)v50 = 0;
  *(_QWORD *)(v50 + 8) = 0;
  *(_QWORD *)(v50 + 16) = 0;
  *(_QWORD *)(v50 + 24) = 0;
  *(_DWORD *)(v50 + 88) = 0;
  *(_QWORD *)(v50 + 96) = 0;
  *(_QWORD *)(v50 + 112) = 0;
  *(_QWORD *)(v50 + 120) = v49;
  *(_QWORD *)(v50 + 128) = 15;
  *(_QWORD *)(v50 + 136) = v49;
  *(_DWORD *)(v50 + 56) = 3;
  v51 = *(unsigned int *)*v49;
  *(_QWORD *)(v50 + 40) = v51;
  *(_QWORD *)(v50 + 48) = v51;
  *(_QWORD *)(v50 + 32) = 15;
  sub_2393BC670((unsigned int **)v50);
  v47[1] = v50;
  sub_2393BC670((unsigned int **)v50);
  v52 = *(uint64_t **)v6;
  *(_QWORD *)v6 = v47;
  if (v52)
  {
    v53 = sub_2393BD2A0(v52);
    MEMORY[0x23B83C4BC](v53, 0x1020C406C4767B9);
  }
  v54 = *((_QWORD *)v59 + 1);
  *((_QWORD *)v59 + 1) = v6;
  if (!v54)
    return 0;
  v55 = *(_QWORD *)(v54 + 128);
  *(_QWORD *)(v54 + 128) = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 16))(v55);
  v56 = *(void **)(v54 + 8);
  if (v56)
  {
    *(_QWORD *)(v54 + 16) = v56;
    operator delete(v56);
  }
  v57 = *(uint64_t **)v54;
  *(_QWORD *)v54 = 0;
  if (v57)
  {
    v58 = sub_2393BD2A0(v57);
    MEMORY[0x23B83C4BC](v58, 0x1020C406C4767B9);
  }
  MEMORY[0x23B83C4BC](v54, 0x1060C406E0EDD12);
  if (*((_QWORD *)v59 + 1))
    return 0;
  else
    return 0xFFFFFFFFLL;
}

uint64_t OCRegistrationStop(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t *v4;
  uint64_t *v5;

  if (!a1)
    return 0xFFFFFFFFLL;
  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 128);
    *(_QWORD *)(v1 + 128) = 0;
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
    v3 = *(void **)(v1 + 8);
    if (v3)
    {
      *(_QWORD *)(v1 + 16) = v3;
      operator delete(v3);
    }
    v4 = *(uint64_t **)v1;
    *(_QWORD *)v1 = 0;
    if (v4)
    {
      v5 = sub_2393BD2A0(v4);
      MEMORY[0x23B83C4BC](v5, 0x1020C406C4767B9);
    }
    MEMORY[0x23B83C4BC](v1, 0x1060C406E0EDD12);
  }
  return 0;
}

uint64_t OCRegistrationDestroy(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t *v5;
  uint64_t *v6;

  if (!a1)
    return 0xFFFFFFFFLL;
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 128);
    *(_QWORD *)(v2 + 128) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    v4 = *(void **)(v2 + 8);
    if (v4)
    {
      *(_QWORD *)(v2 + 16) = v4;
      operator delete(v4);
    }
    v5 = *(uint64_t **)v2;
    *(_QWORD *)v2 = 0;
    if (v5)
    {
      v6 = sub_2393BD2A0(v5);
      MEMORY[0x23B83C4BC](v6, 0x1020C406C4767B9);
    }
    MEMORY[0x23B83C4BC](v2, 0x1060C406E0EDD12);
  }
  MEMORY[0x23B83C4BC](a1, 0x1020C40D5A9D86FLL);
  return 0;
}

uint64_t OCRegistrationProcess(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t *a4, float32x4_t *a5, __n128 a6, __n128 a7, __n128 a8, __n128 a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  __n128 *v17;
  char *v19;
  uint64_t v20;
  unsigned int v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  unint64_t v25;
  char *v26;
  float32x4_t *v28;
  unsigned int v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  unint64_t v34;
  float v35;
  float32x4_t *v36;
  _OWORD *v37;
  char *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  unint64_t v44;
  float v45;
  uint64_t v46;
  unsigned int v47;
  char *v48;
  unint64_t v49;
  __int128 v50;
  _DWORD *v51;
  uint64_t v52;
  char *v53;
  int *v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  _BYTE *v70;
  char *v71;
  char *v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  _OWORD *v77;
  char *v78;
  uint64_t v79;
  __int128 v80;
  _BOOL4 v81;
  unint64_t v82;
  uint64_t v83;
  size_t v84;
  uint64_t v85;
  size_t v86;
  size_t v87;
  size_t v88;
  size_t v89;
  int32x2_t v90;
  float *v91;
  char *v92;
  void *v93;
  unsigned int v94;
  uint64_t v95;
  char *v96;
  char *v97;
  unsigned int *v98;
  char *v99;
  uint64_t v100;
  float v101;
  float v102;
  float *v103;
  float v104;
  float v105;
  float v106;
  float v107;
  uint64_t v108;
  float *v109;
  float *v110;
  char *v111;
  int v112;
  int v113;
  char *v114;
  float v115;
  float *v116;
  uint64_t v117;
  float v118;
  float *v119;
  unint64_t v120;
  float *v121;
  uint64_t v122;
  float32x4_t v123;
  float32x4_t *v124;
  uint64_t v125;
  float32x4_t v126;
  float v127;
  float *v128;
  unint64_t v129;
  unint64_t v130;
  float32x4_t *v131;
  uint64_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float v135;
  BOOL v136;
  float32x4_t v137;
  float32x4_t v138;
  void *exception;
  float32x4_t *v140;
  uint64_t v141;
  unsigned int v142;
  float32x4_t *v143;
  char *v144;
  unint64_t v145;
  unint64_t v146;
  char *v147;
  char *v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  uint64_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  void *v158;
  size_t v159;
  int v160;
  void *v161;
  size_t v162;
  int v163;
  void *v164;
  size_t v165;
  int v166;
  void *v167;
  size_t v168;
  int v169;
  void **v170;
  void **v171;
  __int128 v172;
  uint64_t v173;
  void *memptr[2];
  uint64_t v175;
  uint64_t v176;
  float v177;
  void *v178;
  uint64_t v179;
  __int128 v180;

  if (!a1)
    return 0xFFFFFFFFLL;
  v10 = *(_QWORD *)(a1 + 8);
  if (!v10)
    return 0xFFFFFFFFLL;
  v11 = 4294967294;
  if (a4)
  {
    if (a5)
    {
      v13 = *a4;
      v14 = a4[1];
      *(_QWORD *)(v10 + 112) = *a4;
      *(_QWORD *)(v10 + 120) = v14;
      if (fabsf(*(float *)&v14) != INFINITY)
      {
        v15 = fabsf(*((float *)&v14 + 1)) == INFINITY || v13 == 0;
        if (!v15 && *(float *)&v14 <= 1.0 && *(float *)&v14 > 0.0 && *((float *)&v14 + 1) > 0.0)
        {
          *(_QWORD *)(v10 + 112) = v13;
          *(_QWORD *)(v10 + 120) = v14;
          v17 = *(__n128 **)(a1 + 8);
          v17[3] = a6;
          v17[4] = a7;
          v17[5] = a8;
          v17[6] = a9;
          v151 = 0u;
          v152 = 0u;
          v149 = 0u;
          v150 = 0u;
          if (a3)
          {
            if (a3 >= 0x555555555555556)
LABEL_148:
              abort();
            v19 = (char *)operator new(48 * a3);
            bzero(v19, 48 * ((48 * a3 - 48) / 0x30) + 48);
            v20 = 0;
            v21 = 1;
            do
            {
              v22 = *(_OWORD *)(a2 + v20 + 16);
              v23 = *(_OWORD *)(a2 + v20 + 32);
              v24 = &v19[v20];
              *(_OWORD *)v24 = *(_OWORD *)(a2 + v20);
              *((_OWORD *)v24 + 1) = v22;
              *((_OWORD *)v24 + 2) = v23;
              v25 = v21;
              v20 += 48;
              ++v21;
            }
            while (v25 < a3);
            v26 = &v19[48 * ((48 * a3 - 48) / 0x30) + 48];
          }
          else
          {
            v19 = 0;
            v26 = 0;
          }
          v28 = *(float32x4_t **)(a1 + 8);
          if (fabsf(v28[6].f32[3] + -1.0) > 1.1755e-38)
            goto LABEL_144;
          v140 = a5;
          v160 = 0;
          v158 = 0;
          v159 = 0;
          v161 = 0;
          v162 = 0;
          v163 = 0;
          v164 = 0;
          v165 = 0;
          v166 = 0;
          v167 = 0;
          v168 = 0;
          v169 = 0;
          v153 = 0x7F7FFFFF00800000;
          v141 = v28->i64[1];
          v29 = -1431655765 * ((unint64_t)(v28[1].i64[0] - v141) >> 4);
          v30 = v28[4];
          v154 = v28[3];
          v155 = v30;
          v31 = v28[6];
          v156 = v28[5];
          v157 = v31;
          if (&v28[3] != &v149)
          {
            v32 = v28[4];
            v149 = v28[3];
            v150 = v32;
            v33 = v28[6];
            v151 = v28[5];
            v152 = v33;
          }
          v34 = 0;
          v35 = (float)v29;
          v146 = 0xAAAAAAAAAAAAAAABLL * ((v26 - v19) >> 4);
          v143 = v28;
          v144 = v26;
          v142 = v29;
LABEL_25:
          v145 = v34;
          v36 = v28;
          v178 = 0;
          v179 = 16;
          memptr[0] = 0;
          malloc_type_posix_memalign(memptr, 0x20uLL, 0x40uLL, 0x49090899uLL);
          v37 = memptr[0];
          v178 = memptr[0];
          LODWORD(v180) = 4;
          *(float32x4_t *)memptr[0] = v154;
          v37[1] = v155;
          v37[2] = v156;
          v37[3] = v157;
          if (v19 != v26)
          {
            v38 = v19;
            do
            {
              v39 = *(_OWORD *)v38;
              v40 = *((_OWORD *)v38 + 1);
              memptr[0] = *(void **)v38;
              *(_QWORD *)&v172 = v40;
              memptr[1] = (void *)(DWORD2(v39) | 0x3F80000000000000);
              *((_QWORD *)&v172 + 1) = DWORD2(v40);
              v170 = &v178;
              v171 = memptr;
              sub_2393CF8DC((uint64_t)memptr, (uint64_t)&v170);
              v170 = &v178;
              v171 = (void **)&v172;
              sub_2393CF8DC((uint64_t)&v172, (uint64_t)&v170);
              v41 = *(_OWORD *)memptr;
              v42 = v172;
              HIDWORD(v41) = 1.0;
              HIDWORD(v42) = 0;
              *(_OWORD *)v38 = v41;
              *((_OWORD *)v38 + 1) = v42;
              v38 += 48;
            }
            while (v38 != v26);
          }
          free(v37);
          v28 = v36;
          v43 = v36->i64[0];
          v44 = v145;
          if (!v43 || !v29)
          {
LABEL_143:
            free(v167);
            free(v164);
            free(v161);
            free(v158);
LABEL_144:
            v11 = 0xFFFFFFFFLL;
            goto LABEL_145;
          }
          v45 = v28[8].f32[2];
          memptr[0] = 0;
          memptr[1] = 0;
          v175 = 0;
          v172 = 0uLL;
          v173 = 0;
          v153 = 0;
          if (v19 == v26)
          {
            v93 = 0;
            v81 = 0;
            goto LABEL_132;
          }
          v46 = 0;
          v47 = 0;
          v48 = 0;
          v147 = 0;
          v148 = 0;
          v49 = v146;
          while (1)
          {
            memptr[1] = memptr[0];
            if (!*(_QWORD *)(v43 + 24))
              goto LABEL_33;
            v50 = *(_OWORD *)&v19[48 * v46];
            v176 = *(_QWORD *)&v19[48 * v46];
            v177 = *((float *)&v50 + 2);
            sub_2393BC090((uint64_t)memptr, 1uLL);
            v51 = (_DWORD *)v172;
            if (*((_QWORD *)&v172 + 1) == (_QWORD)v172)
            {
              sub_2393BC22C((uint64_t)&v172, 1uLL);
              v51 = (_DWORD *)v172;
            }
            else if (*((_QWORD *)&v172 + 1) - (_QWORD)v172 >= 5uLL)
            {
              *((_QWORD *)&v172 + 1) = v172 + 4;
            }
            v52 = *(_QWORD *)(v43 + 8);
            v53 = (char *)memptr[0];
            v178 = memptr[0];
            v179 = (uint64_t)v51;
            v180 = xmmword_2393F5470;
            *v51 = 2139095039;
            if (!*(_QWORD *)(v52 + 40))
              break;
            v54 = *(int **)(v52 + 24);
            if (!v54)
            {
              exception = __cxa_allocate_exception(0x10uLL);
              MEMORY[0x23B83C30C](exception, "[nanoflann] findNeighbors() called before building the index.");
              __cxa_throw(exception, (struct type_info *)&unk_250AD5E80, MEMORY[0x24BEDAB60]);
            }
            LODWORD(v171) = 0;
            v170 = 0;
            v55 = *(float *)(v52 + 60);
            v56 = 0.0;
            if (*(float *)&v176 < v55)
            {
              v56 = (float)(*(float *)&v176 - v55) * (float)(*(float *)&v176 - v55);
              *(float *)&v170 = v56;
            }
            v57 = *(float *)(v52 + 64);
            if (*(float *)&v176 > v57)
            {
              *(float *)&v170 = (float)(*(float *)&v176 - v57) * (float)(*(float *)&v176 - v57);
              v56 = v56 + *(float *)&v170;
            }
            v58 = *(float *)(v52 + 68);
            if (*((float *)&v176 + 1) < v58)
            {
              *((float *)&v170 + 1) = (float)(*((float *)&v176 + 1) - v58) * (float)(*((float *)&v176 + 1) - v58);
              v56 = v56 + *((float *)&v170 + 1);
            }
            v59 = *(float *)(v52 + 72);
            if (*((float *)&v176 + 1) > v59)
            {
              *((float *)&v170 + 1) = (float)(*((float *)&v176 + 1) - v59) * (float)(*((float *)&v176 + 1) - v59);
              v56 = v56 + *((float *)&v170 + 1);
            }
            v60 = *(float *)(v52 + 76);
            if (v177 < v60)
            {
              *(float *)&v171 = (float)(v177 - v60) * (float)(v177 - v60);
              v56 = v56 + *(float *)&v171;
            }
            v61 = *(float *)(v52 + 80);
            if (v177 > v61)
            {
              *(float *)&v171 = (float)(v177 - v61) * (float)(v177 - v61);
              v56 = v56 + *(float *)&v171;
            }
            sub_2393BC3C8(v52, (uint64_t *)&v178, (float *)&v176, v54, (uint64_t)&v170, v56, 1.0);
            v62 = *((_QWORD *)&v180 + 1);
            v63 = ((char *)memptr[1] - (char *)v53) >> 2;
            if (*((_QWORD *)&v180 + 1) <= v63)
              goto LABEL_56;
            sub_2393BC090((uint64_t)memptr, *((_QWORD *)&v180 + 1) - v63);
LABEL_58:
            v64 = (uint64_t)(*((_QWORD *)&v172 + 1) - (_QWORD)v51) >> 2;
            if (v62 <= v64)
            {
              if (v62 < v64)
                *((_QWORD *)&v172 + 1) = &v51[v62];
            }
            else
            {
              sub_2393BC22C((uint64_t)&v172, v62 - v64);
            }
            if (memptr[0] == memptr[1] || *(float *)v172 > v45)
              goto LABEL_33;
            v65 = v19;
            v66 = *(unsigned int *)memptr[0] | (unint64_t)(v46 << 32);
            if (v148 >= v147)
            {
              v67 = (v148 - v48) >> 3;
              v68 = v67 + 1;
              if ((unint64_t)(v67 + 1) >> 61)
                goto LABEL_148;
              if ((v147 - v48) >> 2 > v68)
                v68 = (v147 - v48) >> 2;
              if ((unint64_t)(v147 - v48) >= 0x7FFFFFFFFFFFFFF8)
                v69 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v69 = v68;
              if (v69)
              {
                if (v69 >> 61)
                  sub_23938C4B8();
                v70 = operator new(8 * v69);
              }
              else
              {
                v70 = 0;
              }
              v71 = &v70[8 * v67];
              *(_QWORD *)v71 = v66;
              v72 = v71 + 8;
              if (v148 == v48)
              {
                v19 = v65;
                v49 = v146;
              }
              else
              {
                v73 = v148 - 8 - v48;
                v19 = v65;
                if (v73 < 0x168)
                {
                  v74 = v148;
                  v49 = v146;
                  goto LABEL_83;
                }
                if (&v70[v148 - v48 - 8 - (v73 & 0xFFFFFFFFFFFFFFF8)] > &v70[v148 - v48 - 8]
                  || &v148[-(v73 & 0xFFFFFFFFFFFFFFF8) - 8] > v148 - 8
                  || (unint64_t)(v48 - v70) < 0x20)
                {
                  v74 = v148;
                  v49 = v146;
                  goto LABEL_83;
                }
                v76 = (v73 >> 3) + 1;
                v74 = &v148[-8 * (v76 & 0x3FFFFFFFFFFFFFFCLL)];
                v77 = &v70[8 * v67 - 16];
                v78 = v148 - 16;
                v79 = v76 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v80 = *(_OWORD *)v78;
                  *(v77 - 1) = *((_OWORD *)v78 - 1);
                  *v77 = v80;
                  v77 -= 2;
                  v78 -= 32;
                  v79 -= 4;
                }
                while (v79);
                v71 -= 8 * (v76 & 0x3FFFFFFFFFFFFFFCLL);
                v49 = v146;
                if (v76 != (v76 & 0x3FFFFFFFFFFFFFFCLL))
                {
                  do
                  {
LABEL_83:
                    v75 = *((_QWORD *)v74 - 1);
                    v74 -= 8;
                    *((_QWORD *)v71 - 1) = v75;
                    v71 -= 8;
                  }
                  while (v74 != v48);
                }
              }
              v147 = &v70[8 * v69];
              if (v48)
                operator delete(v48);
              v148 = v72;
              v48 = v71;
              goto LABEL_33;
            }
            *(_QWORD *)v148 = v66;
            v148 += 8;
            v19 = v65;
LABEL_33:
            v46 = ++v47;
            if (v49 <= v47)
            {
              v81 = v48 != v148;
              v26 = v144;
              v29 = v142;
              v44 = v145;
              if (v48 != v148)
              {
                v82 = (v148 - v48) >> 3;
                v160 = v82;
                v83 = ((unint64_t)(v148 - v48) >> 3);
                if ((_DWORD)v82)
                {
                  v84 = (3 * v82);
                  v85 = 4 * v84;
                  if (v159 < v84)
                  {
                    free(v158);
                    v86 = (v85 + 31) & 0x7FFFFFFE0;
                    v158 = 0;
                    v159 = v86 >> 2;
                    v178 = 0;
                    malloc_type_posix_memalign(&v178, 0x20uLL, v86, 0x49090899uLL);
                    v158 = v178;
                  }
                  v163 = v82;
                  if (v162 < v84)
                  {
                    free(v161);
                    v87 = (v85 + 31) & 0x7FFFFFFE0;
                    v161 = 0;
                    v162 = v87 >> 2;
                    v178 = 0;
                    malloc_type_posix_memalign(&v178, 0x20uLL, v87, 0x49090899uLL);
                    v161 = v178;
                  }
                  v166 = v82;
                  if (v165 < v84)
                  {
                    free(v164);
                    v88 = (v85 + 31) & 0x7FFFFFFE0;
                    v164 = 0;
                    v165 = v88 >> 2;
                    v178 = 0;
                    malloc_type_posix_memalign(&v178, 0x20uLL, v88, 0x49090899uLL);
                    v164 = v178;
                  }
                  v169 = v82;
                  if (v168 < v84)
                  {
                    free(v167);
                    v89 = (v85 + 31) & 0x7FFFFFFE0;
                    v167 = 0;
                    v168 = v89 >> 2;
                    v178 = 0;
                    malloc_type_posix_memalign(&v178, 0x20uLL, v89, 0x49090899uLL);
                    v167 = v178;
                  }
                  v178 = 0;
                  malloc_type_posix_memalign(&v178, 0x20uLL, (4 * v83 + 31) & 0x7FFFFFFE0, 0x49090899uLL);
                  v91 = (float *)v178;
                  v92 = (char *)v167;
                }
                else
                {
                  free(v158);
                  v158 = 0;
                  v159 = 0;
                  v163 = 0;
                  free(v161);
                  v161 = 0;
                  v162 = 0;
                  v166 = 0;
                  free(v164);
                  v164 = 0;
                  v165 = 0;
                  v169 = 0;
                  free(v167);
                  v92 = 0;
                  v91 = 0;
                  v167 = 0;
                  v168 = 0;
                }
                v94 = 0;
                v95 = 0;
                v96 = (char *)v158;
                v97 = (char *)v161;
                v98 = (unsigned int *)(v48 + 4);
                v99 = (char *)v164;
                do
                {
                  v100 = v141 + 48 * *(v98 - 1);
                  v101 = *(float *)v100;
                  v102 = *(float *)(v100 + 4);
                  v103 = (float *)&v19[48 * *v98];
                  v104 = *v103;
                  v105 = v103[1];
                  v106 = *(float *)(v100 + 8);
                  v107 = v103[2];
                  v91[v95] = sqrtf((float)((float)(v106 - v107) * (float)(v106 - v107))+ (float)((float)((float)(*(float *)v100 - *v103) * (float)(*(float *)v100 - *v103))+ (float)((float)(v102 - v105) * (float)(v102 - v105))));
                  v108 = 4 * v94;
                  v109 = (float *)&v96[v108];
                  *v109 = v101;
                  v109[1] = v102;
                  v109[2] = v106;
                  v110 = (float *)&v97[v108];
                  *v110 = v104;
                  v110[1] = v105;
                  v110[2] = v107;
                  v111 = &v99[v108];
                  v112 = *(_DWORD *)(v100 + 24);
                  *(_QWORD *)v111 = *(_QWORD *)(v100 + 16);
                  *((_DWORD *)v111 + 2) = v112;
                  v113 = *((_DWORD *)v103 + 6);
                  v114 = &v92[v108];
                  *(_QWORD *)v114 = *((_QWORD *)v103 + 2);
                  ++v95;
                  v98 += 2;
                  v94 += 3;
                  *((_DWORD *)v114 + 2) = v113;
                }
                while (v82 > v95);
                *(float *)&v153 = (float)v82 / v35;
                if ((_DWORD)v82)
                {
                  v115 = *v91;
                  if ((_DWORD)v82 != 1)
                  {
                    v116 = v91 + 1;
                    v117 = 4 * v83 - 4;
                    do
                    {
                      v118 = *v116++;
                      v115 = v115 + v118;
                      v117 -= 4;
                    }
                    while (v117);
                  }
                  v119 = &v91[v83];
                  *(float *)v90.i32 = v115 / (float)v82;
                  v120 = (v83 - 1) & 0x3FFFFFFFFFFFFFFFLL;
                  v121 = v91;
                  if (v120 < 7)
                  {
                    do
                    {
LABEL_115:
                      *v121 = *v121 - *(float *)v90.i32;
                      ++v121;
                    }
                    while (v121 != v119);
                  }
                  else
                  {
                    v122 = (v120 + 1) & 0x7FFFFFFFFFFFFFF8;
                    v123 = (float32x4_t)vdupq_lane_s32(v90, 0);
                    v124 = (float32x4_t *)(v91 + 4);
                    v125 = v122;
                    do
                    {
                      v126 = vsubq_f32(*v124, v123);
                      v124[-1] = vsubq_f32(v124[-1], v123);
                      *v124 = v126;
                      v124 += 2;
                      v125 -= 8;
                    }
                    while (v125);
                    if (v120 + 1 != v122)
                    {
                      v121 = &v91[v122];
                      goto LABEL_115;
                    }
                  }
                  v127 = *v91 * *v91;
                  if ((_DWORD)v82 == 1)
                  {
                    v81 = v48 != v148;
                    goto LABEL_126;
                  }
                  v128 = v91 + 1;
                  v129 = (v83 + 0x3FFFFFFFFFFFFFFELL) & 0x3FFFFFFFFFFFFFFFLL;
                  if (v129 >= 7)
                  {
                    v130 = v129 + 1;
                    v131 = (float32x4_t *)(v91 + 5);
                    v132 = v130 & 0x7FFFFFFFFFFFFFF8;
                    do
                    {
                      v133 = vmulq_f32(v131[-1], v131[-1]);
                      v134 = vmulq_f32(*v131, *v131);
                      v127 = (float)((float)((float)((float)((float)((float)((float)(v127 + v133.f32[0]) + v133.f32[1])
                                                                   + v133.f32[2])
                                                           + v133.f32[3])
                                                   + v134.f32[0])
                                           + v134.f32[1])
                                   + v134.f32[2])
                           + v134.f32[3];
                      v131 += 2;
                      v132 -= 8;
                    }
                    while (v132);
                    v81 = v48 != v148;
                    if (v130 != (v130 & 0x7FFFFFFFFFFFFFF8))
                    {
                      v128 += v130 & 0x7FFFFFFFFFFFFFF8;
                      goto LABEL_125;
                    }
                  }
                  else
                  {
                    v81 = v48 != v148;
                    do
                    {
LABEL_125:
                      v135 = *v128++;
                      v127 = v127 + (float)(v135 * v135);
                    }
                    while (v128 != v119);
                  }
                }
                else
                {
                  v127 = 0.0;
                  v81 = v48 != v148;
                }
LABEL_126:
                HIDWORD(v153) = sqrtf(v127);
                free(v91);
              }
              if (v48)
                operator delete(v48);
              if ((_QWORD)v172)
                operator delete((void *)v172);
              v93 = memptr[0];
              v28 = v143;
LABEL_132:
              if (v93)
                operator delete(v93);
              if (!v81)
                goto LABEL_143;
              v136 = v28[7].i64[0] > v44 && (v28[7].f32[2] > *(float *)&v153 || v28[7].f32[3] < *((float *)&v153 + 1));
              if (!(**(unsigned int (***)(uint64_t, void **, void **, void **, void **, float32x4_t *))v28[8].i64[0])(v28[8].i64[0], &v158, &v164, &v161, &v164, &v154))goto LABEL_143;
              v178 = &v154;
              v179 = (uint64_t)&v149;
              sub_2393CF964(&v149, (uint64_t)&v178);
              v34 = v44 + 1;
              if (!v136)
              {
                free(v167);
                free(v164);
                free(v161);
                free(v158);
                v11 = 0;
                v137 = v150;
                *v140 = v149;
                v140[1] = v137;
                v138 = v152;
                v140[2] = v151;
                v140[3] = v138;
LABEL_145:
                if (v19)
                  operator delete(v19);
                return v11;
              }
              goto LABEL_25;
            }
          }
          v62 = 0;
          v63 = ((char *)memptr[1] - (char *)v53) >> 2;
LABEL_56:
          if (v63 > v62)
            memptr[1] = &v53[4 * v62];
          goto LABEL_58;
        }
      }
    }
  }
  return v11;
}

void sub_2393AC96C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t OCPointCloudCreate(unsigned int a1, uint64_t a2, float32x4_t **a3, float32_t a4, float32x4_t a5, float32x4_t a6, float32x4_t a7, int8x16_t a8)
{
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  uint32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  uint32x4_t v22;
  float32x4_t v23;
  NSObject *v24;
  float32x2_t v27;
  uint32x2_t v28;
  float32x4_t *v30;
  float32x4_t *v31;
  NSObject *v32;
  float32x4_t v33;
  uint8_t buf[4];
  const char *v38;
  __int16 v39;
  int v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  if (!a1)
    goto LABEL_7;
  if (!a2)
    goto LABEL_7;
  if (a4 <= 0.0)
    goto LABEL_7;
  v11 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(a5, a5.f32[0]), a6, a6.f32[0]), a7, a7.f32[0]);
  v12 = vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(a5, *(float32x2_t *)a5.f32, 1), a6, *(float32x2_t *)a6.f32, 1), a7, *(float32x2_t *)a7.f32, 1);
  v13 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(a5, a5, 2), a6, a6, 2), a7, a7, 2);
  v14 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 16);
  v15 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 32);
  v16 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
  v17 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v16, vabdq_f32(v12, v14)), (int8x16_t)vcgeq_f32(v16, vabdq_f32(v11, *MEMORY[0x24BDAEDF8]))), (int8x16_t)vcgeq_f32(v16, vabdq_f32(v13, v15)));
  v17.i32[3] = v17.i32[2];
  if ((vminvq_u32(v17) & 0x80000000) == 0)
    goto LABEL_7;
  v18 = (float32x4_t)vdupq_laneq_s32((int32x4_t)a6, 2);
  v19 = (float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)a5, (int32x4_t)a7), (int32x4_t)v18);
  v20 = (float32x4_t)vtrn2q_s32((int32x4_t)a5, (int32x4_t)a6);
  v20.i32[2] = a7.i32[1];
  v21 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)a5, (int32x4_t)a7), (int32x4_t)a6);
  v22 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v16, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v21, a6.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a6.f32, 1), v20), v18, v19), v14)), (int8x16_t)vcgeq_f32(v16, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v21, a5.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 1),
                                           v20),
                                         (float32x4_t)vdupq_laneq_s32((int32x4_t)a5, 2),
                                         v19),
                                       *MEMORY[0x24BDAEDF8]))),
                      (int8x16_t)vcgeq_f32(v16, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v21, a7.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a7.f32, 1), v20), (float32x4_t)vdupq_laneq_s32((int32x4_t)a7, 2), v19), v15)));
  v22.i32[3] = v22.i32[2];
  if ((vminvq_u32(v22) & 0x80000000) == 0)
    goto LABEL_7;
  v23 = vmulq_f32(a5, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)a7, (int8x16_t)a7, 0xCuLL), (int8x16_t)a7, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a6, (int32x4_t)a6), (int8x16_t)a6, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a7, (int32x4_t)a7), (int8x16_t)a7, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)a6, (int8x16_t)a6, 0xCuLL), (int8x16_t)a6, 8uLL)));
  if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v23, 2), vaddq_f32(v23, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v23.f32, 1))).f32[0]+ -1.0) <= 0.000011&& a3&& (v27 = (float32x2_t)vdup_n_s32(0x38D1B717u), v28 = (uint32x2_t)vand_s8((int8x8_t)vcge_f32(v27, vabs_f32(vadd_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a7, (int8x16_t)a7, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(a8, a8, 8uLL)), (float32x2_t)0xBF80000080000000))), (int8x8_t)vcge_f32(
                                        v27,
                                        vabs_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a5, (int8x16_t)a5, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a6, (int8x16_t)a6, 8uLL))))), (vpmin_u32(v28, v28).u32[0] & 0x80000000) != 0))
  {
    v33 = a5;
    kdebug_trace();
    v30 = (float32x4_t *)sub_2393ACD80(a1);
    if (v30)
    {
      v31 = v30;
      sub_2393ACF54(a1, a2, 0, v30);
      v31[1].f32[0] = a4;
      v31[2] = v33;
      v31[3] = a6;
      v31[4] = a7;
      v31[5] = (float32x4_t)a8;
      *a3 = v31;
      kdebug_trace();
      return 0;
    }
    else
    {
      if (qword_2569302D8 != -1)
        dispatch_once(&qword_2569302D8, &unk_250AD5DC0);
      v32 = qword_2569302D0;
      if (os_log_type_enabled((os_log_t)qword_2569302D0, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v38 = "OCPointCloudCreate";
        v39 = 1026;
        v40 = 401;
        _os_log_error_impl(&dword_239388000, v32, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create pointcloud - insufficient memory.", buf, 0x12u);
      }
      kdebug_trace();
      return 4294967293;
    }
  }
  else
  {
LABEL_7:
    if (qword_2569302D8 != -1)
      dispatch_once(&qword_2569302D8, &unk_250AD5DC0);
    v24 = qword_2569302D0;
    if (os_log_type_enabled((os_log_t)qword_2569302D0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v38 = "OCPointCloudCreate";
      v39 = 1026;
      v40 = 391;
      _os_log_error_impl(&dword_239388000, v24, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create pointcloud - invalid arguments.", buf, 0x12u);
    }
    return 4294967294;
  }
}

_QWORD *sub_2393ACD80(unsigned int a1)
{
  _QWORD *Instance;
  _QWORD *v3;
  unint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  __int128 v11;
  __int128 v12;
  _BYTE *v13;
  _BYTE *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;

  if (qword_2569302E8 != -1)
    dispatch_once(&qword_2569302E8, &unk_250AD5DE0);
  Instance = (_QWORD *)_CFRuntimeCreateInstance();
  v3 = Instance;
  if (Instance)
  {
    v4 = a1;
    v5 = (_BYTE *)Instance[12];
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(Instance[14] - (_QWORD)v5) >> 4) < v4)
    {
      v6 = (_BYTE *)Instance[13];
      v7 = (char *)operator new(48 * v4);
      v8 = &v7[48 * ((v6 - v5) / 48)];
      v9 = v8;
      if (v6 != v5)
      {
        v10 = &v7[48 * ((v6 - v5) / 48)];
        do
        {
          v11 = *((_OWORD *)v6 - 3);
          v12 = *((_OWORD *)v6 - 1);
          v9 = v10 - 48;
          *((_OWORD *)v10 - 2) = *((_OWORD *)v6 - 2);
          *((_OWORD *)v10 - 1) = v12;
          *((_OWORD *)v10 - 3) = v11;
          v6 -= 48;
          v10 -= 48;
        }
        while (v6 != v5);
      }
      v3[12] = v9;
      v3[13] = v8;
      v3[14] = &v7[48 * v4];
      if (v5)
        operator delete(v5);
    }
    v13 = (_BYTE *)v3[15];
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v3[17] - (_QWORD)v13) >> 2) < v4)
    {
      v14 = (_BYTE *)v3[16];
      v15 = (char *)operator new(20 * v4);
      v16 = &v15[20 * ((v14 - v13) / 20)];
      v17 = v16;
      if (v14 != v13)
      {
        v18 = &v15[20 * ((v14 - v13) / 20)];
        do
        {
          v19 = *(_OWORD *)(v14 - 20);
          v17 = v18 - 20;
          *((_DWORD *)v18 - 1) = *((_DWORD *)v14 - 1);
          *(_OWORD *)(v18 - 20) = v19;
          v14 -= 20;
          v18 -= 20;
        }
        while (v14 != v13);
      }
      v3[15] = v17;
      v3[16] = v16;
      v3[17] = &v15[20 * v4];
      if (v13)
        operator delete(v13);
    }
  }
  return v3;
}

void sub_2393ACF54(unsigned int a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  float32x4_t v10;
  float32x4_t v11;
  int32x4_t v12;
  float32x2_t v13;
  float32x2_t v14;
  unint64_t v15;
  float32x4_t *v16;
  _OWORD *f32;
  float32x4_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  float32x4_t *v23;
  float32x4_t *v24;
  float32x4_t v25;
  float32x4_t v26;
  unint64_t v27;
  char *v28;
  _BYTE *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  __int128 v36;
  float32x4_t v37;
  float32x4_t v38;

  v7 = 0;
  v8 = a1;
  do
  {
    v10 = *(float32x4_t *)(a2 + 16 * v7);
    if (a3)
    {
      v11 = *(float32x4_t *)(a3 + 16 * v7);
    }
    else
    {
      v12 = (int32x4_t)vmulq_f32(v10, v10);
      v12.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v12, 2), vadd_f32(*(float32x2_t *)v12.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v12.i8, 1))).u32[0];
      v13 = vrsqrte_f32((float32x2_t)v12.u32[0]);
      v14 = vmul_f32(v13, vrsqrts_f32((float32x2_t)v12.u32[0], vmul_f32(v13, v13)));
      v11 = vmulq_n_f32(vnegq_f32(v10), vmul_f32(v14, vrsqrts_f32((float32x2_t)v12.u32[0], vmul_f32(v14, v14))).f32[0]);
    }
    v10.i32[3] = 1.0;
    v11.i32[3] = 0;
    v16 = (float32x4_t *)a4[13];
    v15 = a4[14];
    if ((unint64_t)v16 >= v15)
    {
      v18 = (float32x4_t *)a4[12];
      v19 = 0xAAAAAAAAAAAAAAABLL * (v16 - v18) + 1;
      if (v19 > 0x555555555555555)
        goto LABEL_42;
      v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - (_QWORD)v18) >> 4);
      if (2 * v20 > v19)
        v19 = 2 * v20;
      if (v20 >= 0x2AAAAAAAAAAAAAALL)
        v21 = 0x555555555555555;
      else
        v21 = v19;
      if (v21)
      {
        v37 = v11;
        v38 = v10;
        if (v21 > 0x555555555555555)
          goto LABEL_43;
        v22 = (char *)operator new(48 * v21);
        v11 = v37;
        v10 = v38;
      }
      else
      {
        v22 = 0;
      }
      v23 = (float32x4_t *)&v22[16 * (v16 - v18)];
      *v23 = v10;
      v23[1] = v11;
      v23[2] = (float32x4_t)xmmword_2393F5320;
      v24 = v23;
      if (v16 != v18)
      {
        do
        {
          v25 = v16[-3];
          v26 = v16[-1];
          v24[-2] = v16[-2];
          v24[-1] = v26;
          v24[-3] = v25;
          v24 -= 3;
          v16 -= 3;
        }
        while (v16 != v18);
        v16 = (float32x4_t *)a4[12];
      }
      f32 = (_OWORD *)v23[3].f32;
      a4[12] = v24;
      a4[13] = v23 + 3;
      a4[14] = &v22[48 * v21];
      if (v16)
        operator delete(v16);
    }
    else
    {
      *v16 = v10;
      v16[1] = v11;
      f32 = (_OWORD *)v16[3].f32;
      v16[2] = (float32x4_t)xmmword_2393F5320;
    }
    a4[13] = f32;
    v28 = (char *)a4[16];
    v27 = a4[17];
    if ((unint64_t)v28 < v27)
    {
      *((_DWORD *)v28 + 4) = 0;
      *(_OWORD *)v28 = xmmword_2393F5B64;
      v9 = v28 + 20;
    }
    else
    {
      v29 = (_BYTE *)a4[15];
      v30 = 0xCCCCCCCCCCCCCCCDLL * ((v28 - v29) >> 2) + 1;
      if (v30 > 0xCCCCCCCCCCCCCCCLL)
LABEL_42:
        abort();
      v31 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v27 - (_QWORD)v29) >> 2);
      if (2 * v31 > v30)
        v30 = 2 * v31;
      if (v31 >= 0x666666666666666)
        v32 = 0xCCCCCCCCCCCCCCCLL;
      else
        v32 = v30;
      if (v32)
      {
        if (v32 > 0xCCCCCCCCCCCCCCCLL)
LABEL_43:
          sub_23938C4B8();
        v33 = (char *)operator new(20 * v32);
      }
      else
      {
        v33 = 0;
      }
      v34 = &v33[4 * ((v28 - v29) >> 2)];
      *(_OWORD *)v34 = xmmword_2393F5B64;
      *((_DWORD *)v34 + 4) = 0;
      v35 = v34;
      if (v28 != v29)
      {
        do
        {
          v36 = *(_OWORD *)(v28 - 20);
          *((_DWORD *)v35 - 1) = *((_DWORD *)v28 - 1);
          *(_OWORD *)(v35 - 20) = v36;
          v35 -= 20;
          v28 -= 20;
        }
        while (v28 != v29);
        v28 = (char *)a4[15];
      }
      v9 = v34 + 20;
      a4[15] = v35;
      a4[16] = v34 + 20;
      a4[17] = &v33[20 * v32];
      if (v28)
        operator delete(v28);
    }
    a4[16] = v9;
    ++v7;
  }
  while (v7 != v8);
}

uint64_t sub_2393AD254()
{
  uint64_t result;

  qword_2569302F0 = 0;
  *(_QWORD *)algn_2569302F8 = "OCPointCloud";
  qword_256930300 = (uint64_t)sub_2393AD2B4;
  unk_256930308 = 0;
  qword_256930310 = (uint64_t)sub_2393AD2CC;
  unk_256930318 = 0;
  qword_256930320 = 0;
  unk_256930328 = sub_2393AD328;
  qword_256930330 = (uint64_t)sub_2393AD380;
  result = _CFRuntimeRegisterClass();
  qword_2569302E0 = result;
  return result;
}

double sub_2393AD2B4(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  return result;
}

double sub_2393AD2CC(uint64_t a1)
{
  void *v2;
  void *v3;
  double result;

  if (a1)
  {
    v2 = *(void **)(a1 + 96);
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    if (v2)
      operator delete(v2);
    v3 = *(void **)(a1 + 120);
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    *(_QWORD *)(a1 + 120) = 0;
    if (v3)
      operator delete(v3);
    result = 0.0;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
  }
  return result;
}

CFStringRef sub_2393AD328(const void *a1, const __CFDictionary *a2)
{
  const __CFAllocator *v4;
  CFAllocatorRef v5;

  v4 = CFGetAllocator(a1);
  v5 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v4, a2, CFSTR("<OCPointCloud %p [%p]>"), a1, v5);
}

CFStringRef sub_2393AD380(const void *a1)
{
  const __CFAllocator *v2;
  CFAllocatorRef v3;

  v2 = CFGetAllocator(a1);
  v3 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<OCPointCloud %p [%p]>"), a1, v3);
}

void sub_2393AD3CC()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.CoreOCModules", "VoxelHashing");
  v1 = (void *)qword_2569302D0;
  qword_2569302D0 = (uint64_t)v0;

}

uint64_t OCPointCloudCreateWithRGB(unsigned int a1, uint64_t a2, uint64_t a3, __CVBuffer *a4, float32x4_t **a5, float32_t a6, float32x4_t a7, float32x4_t a8, float32x4_t a9, int8x16_t a10)
{
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  uint32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  uint32x4_t v27;
  float32x4_t v28;
  float32x2_t v30;
  uint32x2_t v31;
  float32x4_t *v36;
  float32x4_t *v37;
  NSObject *v39;
  NSObject *v40;
  NSObject *v41;
  float32x4_t v42;
  uint8_t buf[4];
  const char *v47;
  __int16 v48;
  int v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  if (a6 <= 0.0 || a1 == 0 || a2 == 0 || a3 == 0 || a4 == 0)
    goto LABEL_22;
  v16 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(a7, a7.f32[0]), a8, a8.f32[0]), a9, a9.f32[0]);
  v17 = vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(a7, *(float32x2_t *)a7.f32, 1), a8, *(float32x2_t *)a8.f32, 1), a9, *(float32x2_t *)a9.f32, 1);
  v18 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(a7, a7, 2), a8, a8, 2), a9, a9, 2);
  v19 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 16);
  v20 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 32);
  v21 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
  v22 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v21, vabdq_f32(v17, v19)), (int8x16_t)vcgeq_f32(v21, vabdq_f32(v16, *MEMORY[0x24BDAEDF8]))), (int8x16_t)vcgeq_f32(v21, vabdq_f32(v18, v20)));
  v22.i32[3] = v22.i32[2];
  if ((vminvq_u32(v22) & 0x80000000) == 0)
    goto LABEL_22;
  v23 = (float32x4_t)vdupq_laneq_s32((int32x4_t)a8, 2);
  v24 = (float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)a7, (int32x4_t)a9), (int32x4_t)v23);
  v25 = (float32x4_t)vtrn2q_s32((int32x4_t)a7, (int32x4_t)a8);
  v25.i32[2] = a9.i32[1];
  v26 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)a7, (int32x4_t)a9), (int32x4_t)a8);
  v27 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v21, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v26, a8.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a8.f32, 1), v25), v23, v24), v19)), (int8x16_t)vcgeq_f32(v21, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v26, a7.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a7.f32, 1),
                                           v25),
                                         (float32x4_t)vdupq_laneq_s32((int32x4_t)a7, 2),
                                         v24),
                                       *MEMORY[0x24BDAEDF8]))),
                      (int8x16_t)vcgeq_f32(v21, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v26, a9.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a9.f32, 1), v25), (float32x4_t)vdupq_laneq_s32((int32x4_t)a9, 2), v24), v20)));
  v27.i32[3] = v27.i32[2];
  if ((vminvq_u32(v27) & 0x80000000) == 0)
    goto LABEL_22;
  v28 = vmulq_f32(a7, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)a9, (int8x16_t)a9, 0xCuLL), (int8x16_t)a9, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a8, (int32x4_t)a8), (int8x16_t)a8, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a9, (int32x4_t)a9), (int8x16_t)a9, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)a8, (int8x16_t)a8, 0xCuLL), (int8x16_t)a8, 8uLL)));
  if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v28, 2), vaddq_f32(v28, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28.f32, 1))).f32[0]+ -1.0) <= 0.000011&& a5&& (v30 = (float32x2_t)vdup_n_s32(0x38D1B717u), v31 = (uint32x2_t)vand_s8((int8x8_t)vcge_f32(v30, vabs_f32(vadd_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a9, (int8x16_t)a9, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(a10, a10, 8uLL)), (float32x2_t)0xBF80000080000000))), (int8x8_t)vcge_f32(
                                        v30,
                                        vabs_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a7, (int8x16_t)a7, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a8, (int8x16_t)a8, 8uLL))))), (vpmin_u32(v31, v31).u32[0] & 0x80000000) != 0))
  {
    v42 = a7;
    kdebug_trace();
    v36 = (float32x4_t *)sub_2393ACD80(a1);
    if (v36)
    {
      v37 = v36;
      if (sub_2393AD8DC(a1, a2, 0, a3, a4, v36))
      {
        v37[1].f32[0] = a6;
        v37[2] = v42;
        v37[3] = a8;
        v37[4] = a9;
        v37[5] = (float32x4_t)a10;
        *a5 = v37;
        kdebug_trace();
        return 0;
      }
      else
      {
        if (qword_2569302D8 != -1)
          dispatch_once(&qword_2569302D8, &unk_250AD5DC0);
        v41 = qword_2569302D0;
        if (os_log_type_enabled((os_log_t)qword_2569302D0, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          v47 = "OCPointCloudCreateWithRGB";
          v48 = 1026;
          v49 = 471;
          _os_log_error_impl(&dword_239388000, v41, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create pointcloud - no points with valid pixel coords.", buf, 0x12u);
        }
        CFRelease(v37);
        kdebug_trace();
        return 0xFFFFFFFFLL;
      }
    }
    else
    {
      if (qword_2569302D8 != -1)
        dispatch_once(&qword_2569302D8, &unk_250AD5DC0);
      v40 = qword_2569302D0;
      if (os_log_type_enabled((os_log_t)qword_2569302D0, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v47 = "OCPointCloudCreateWithRGB";
        v48 = 1026;
        v49 = 450;
        _os_log_error_impl(&dword_239388000, v40, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create pointcloud - insufficient memory.", buf, 0x12u);
      }
      kdebug_trace();
      return 4294967293;
    }
  }
  else
  {
LABEL_22:
    if (qword_2569302D8 != -1)
      dispatch_once(&qword_2569302D8, &unk_250AD5DC0);
    v39 = qword_2569302D0;
    if (os_log_type_enabled((os_log_t)qword_2569302D0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v47 = "OCPointCloudCreateWithRGB";
      v48 = 1026;
      v49 = 440;
      _os_log_error_impl(&dword_239388000, v39, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create pointcloud - invalid arguments.", buf, 0x12u);
    }
    return 4294967294;
  }
}

BOOL sub_2393AD8DC(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, CVPixelBufferRef pixelBuffer, _QWORD *a6)
{
  size_t v6;
  size_t v7;
  __CVBuffer *v9;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  float32x4_t v16;
  float32x4_t v17;
  int32x4_t v18;
  float32x2_t v19;
  float32x2_t v20;
  double *v21;
  __int128 v22;
  float32x4_t v23;
  __int128 v24;
  unint64_t v25;
  _OWORD *v26;
  _OWORD *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  size_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  __int128 v45;
  float32x4_t v47;
  float32x4_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  char v52;
  uint64_t v53;

  v9 = pixelBuffer;
  v13 = 0;
  v53 = *MEMORY[0x24BDAC8D0];
  v14 = a1;
  do
  {
    v16 = *(float32x4_t *)(a2 + 16 * v13);
    if (a3)
    {
      v17 = *(float32x4_t *)(a3 + 16 * v13);
    }
    else
    {
      v18 = (int32x4_t)vmulq_f32(v16, v16);
      v18.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v18, 2), vadd_f32(*(float32x2_t *)v18.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v18.i8, 1))).u32[0];
      v19 = vrsqrte_f32((float32x2_t)v18.u32[0]);
      v20 = vmul_f32(v19, vrsqrts_f32((float32x2_t)v18.u32[0], vmul_f32(v19, v19)));
      v17 = vmulq_n_f32(vnegq_f32(v16), vmul_f32(v20, vrsqrts_f32((float32x2_t)v18.u32[0], vmul_f32(v20, v20))).f32[0]);
    }
    v21 = (double *)(a4 + 16 * v13);
    LODWORD(v6) = llround(*v21);
    if ((v6 & 0x80000000) == 0)
    {
      LODWORD(v7) = llround(v21[1]);
      if ((v7 & 0x80000000) == 0)
      {
        v47 = v17;
        v49 = *(_OWORD *)(a2 + 16 * v13);
        if ((CVPixelBufferGetPixelFormatType(v9) | 0x10) == 0x34323076)
        {
          sub_2393C49C0((uint64_t)&v51, v9, v6, v7);
          if (v52)
          {
            v23 = v47;
            v22 = v49;
            HIDWORD(v22) = 1.0;
            v23.i32[3] = 0;
            v24 = v51;
            HIDWORD(v24) = 1.0;
            v26 = (_OWORD *)a6[13];
            v25 = a6[14];
            if ((unint64_t)v26 >= v25)
            {
              v7 = a6[12];
              v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v26 - v7) >> 4) + 1;
              if (v28 > 0x555555555555555)
                goto LABEL_48;
              v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - v7) >> 4);
              if (2 * v29 > v28)
                v28 = 2 * v29;
              if (v29 >= 0x2AAAAAAAAAAAAAALL)
                v30 = 0x555555555555555;
              else
                v30 = v28;
              if (v30)
              {
                v45 = v24;
                v48 = v23;
                v50 = v22;
                if (v30 > 0x555555555555555)
                  goto LABEL_49;
                v31 = (char *)operator new(48 * v30);
                v23 = v48;
                v22 = v50;
                v24 = v45;
              }
              else
              {
                v31 = 0;
              }
              v32 = &v31[16 * ((uint64_t)((uint64_t)v26 - v7) >> 4)];
              *(_OWORD *)v32 = v22;
              *((float32x4_t *)v32 + 1) = v23;
              *((_OWORD *)v32 + 2) = v24;
              v33 = v32;
              if (v26 != (_OWORD *)v7)
              {
                do
                {
                  v34 = *(v26 - 3);
                  v35 = *(v26 - 1);
                  *((_OWORD *)v33 - 2) = *(v26 - 2);
                  *((_OWORD *)v33 - 1) = v35;
                  *((_OWORD *)v33 - 3) = v34;
                  v33 -= 48;
                  v26 -= 3;
                }
                while (v26 != (_OWORD *)v7);
                v26 = (_OWORD *)a6[12];
              }
              v27 = v32 + 48;
              a6[12] = v33;
              a6[13] = v32 + 48;
              a6[14] = &v31[48 * v30];
              if (v26)
                operator delete(v26);
              v9 = pixelBuffer;
            }
            else
            {
              *v26 = v22;
              v26[1] = v23;
              v27 = v26 + 3;
              v26[2] = v24;
            }
            a6[13] = v27;
            v6 = a6[16];
            v36 = a6[17];
            if (v6 < v36)
            {
              *(_DWORD *)(v6 + 16) = 0;
              *(_OWORD *)v6 = xmmword_2393F5B64;
              v15 = v6 + 20;
            }
            else
            {
              v7 = a6[15];
              v37 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - v7) >> 2) + 1;
              if (v37 > 0xCCCCCCCCCCCCCCCLL)
LABEL_48:
                abort();
              v38 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v36 - v7) >> 2);
              if (2 * v38 > v37)
                v37 = 2 * v38;
              if (v38 >= 0x666666666666666)
                v39 = 0xCCCCCCCCCCCCCCCLL;
              else
                v39 = v37;
              if (v39)
              {
                if (v39 > 0xCCCCCCCCCCCCCCCLL)
LABEL_49:
                  sub_23938C4B8();
                v40 = (char *)operator new(20 * v39);
              }
              else
              {
                v40 = 0;
              }
              v41 = &v40[4 * ((uint64_t)(v6 - v7) >> 2)];
              *(_OWORD *)v41 = xmmword_2393F5B64;
              *((_DWORD *)v41 + 4) = 0;
              v42 = v41;
              if (v6 != v7)
              {
                do
                {
                  v43 = *(_OWORD *)(v6 - 20);
                  *((_DWORD *)v42 - 1) = *(_DWORD *)(v6 - 4);
                  *(_OWORD *)(v42 - 20) = v43;
                  v42 -= 20;
                  v6 -= 20;
                }
                while (v6 != v7);
                v6 = a6[15];
              }
              v15 = (size_t)(v41 + 20);
              a6[15] = v42;
              a6[16] = v41 + 20;
              a6[17] = &v40[20 * v39];
              if (v6)
                operator delete((void *)v6);
              v9 = pixelBuffer;
            }
            a6[16] = v15;
          }
        }
      }
    }
    ++v13;
  }
  while (v13 != v14);
  return a6[12] != a6[13];
}

void OCPointCloudRelease(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

uint64_t OCPointCloudCreateWithRGBAndPlaneClassification(size_t a1, uint64_t a2, uint64_t a3, __CVBuffer *a4, size_t a5, float32x4_t **a6, float32_t a7, float32x4_t a8, float32x4_t a9, float32x4_t a10, int8x16_t a11, uint64_t a12, uint64_t a13, double a14, double a15, double a16, float32x4_t a17, float32x4_t a18, float32x4_t a19, float32x4_t a20,float a21)
{
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  uint32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  uint32x4_t v38;
  float32x4_t v39;
  size_t v40;
  float32x2_t v41;
  uint32x2_t v42;
  float32x4_t v43;
  uint32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  uint32x4_t v49;
  float32x4_t v50;
  NSObject *v51;
  uint64_t v52;
  float32x2_t v55;
  uint32x2_t v56;
  size_t v60;
  float32x4_t *v61;
  float32x4_t *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  int8x16_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  BOOL v78;
  unint64_t v79;
  char *v80;
  char *v81;
  unint64_t v82;
  __int128 v83;
  char *v84;
  NSObject *v85;
  uint64_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  uint64_t v92;
  double *v93;
  float32x4_t v94;
  int32x4_t v95;
  float32x2_t v96;
  float32x2_t v97;
  float32x4_t v98;
  float32x4_t v99;
  unint64_t v100;
  float32x4_t *v101;
  _OWORD *f32;
  float32x4_t *v103;
  unint64_t v104;
  unint64_t v105;
  char *v106;
  float32x4_t *v107;
  float32x4_t *v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  int8x16_t v112;
  BOOL v113;
  size_t v114;
  size_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  char *v119;
  char *v120;
  char *v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  NSObject *v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  uint64_t v129;
  uint64_t v130;
  float32x4_t *v131;
  unint64_t v132;
  float32x4_t v133;
  char *__p;
  char *__pa;
  uint64_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v140;
  int8x16_t v141;
  _BYTE v142[9];
  _BYTE buf[18];
  uint64_t v144;

  v144 = *MEMORY[0x24BDAC8D0];
  if (a7 <= 0.0 || (_DWORD)a1 == 0 || a2 == 0 || a3 == 0 || a4 == 0)
    goto LABEL_22;
  v26 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(a8, a8.f32[0]), a9, a9.f32[0]), a10, a10.f32[0]);
  v27 = vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(a8, *(float32x2_t *)a8.f32, 1), a9, *(float32x2_t *)a9.f32, 1), a10, *(float32x2_t *)a10.f32, 1);
  v28 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(a8, a8, 2), a9, a9, 2), a10, a10, 2);
  v30 = *(float32x4_t *)MEMORY[0x24BDAEDF8];
  v29 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 16);
  v31 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 32);
  v32 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
  v33 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v32, vabdq_f32(v27, v29)), (int8x16_t)vcgeq_f32(v32, vabdq_f32(v26, *MEMORY[0x24BDAEDF8]))), (int8x16_t)vcgeq_f32(v32, vabdq_f32(v28, v31)));
  v33.i32[3] = v33.i32[2];
  if ((vminvq_u32(v33) & 0x80000000) == 0)
    goto LABEL_22;
  v34 = (float32x4_t)vdupq_laneq_s32((int32x4_t)a9, 2);
  v35 = (float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)a8, (int32x4_t)a10), (int32x4_t)v34);
  v36 = (float32x4_t)vtrn2q_s32((int32x4_t)a8, (int32x4_t)a9);
  v36.i32[2] = a10.i32[1];
  v37 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)a8, (int32x4_t)a10), (int32x4_t)a9);
  v38 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v32, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v37, a9.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a9.f32, 1), v36), v34, v35), v29)), (int8x16_t)vcgeq_f32(v32, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v37, a8.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a8.f32, 1),
                                           v36),
                                         (float32x4_t)vdupq_laneq_s32((int32x4_t)a8, 2),
                                         v35),
                                       v30))),
                      (int8x16_t)vcgeq_f32(v32, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v37, a10.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a10.f32, 1), v36), (float32x4_t)vdupq_laneq_s32((int32x4_t)a10, 2), v35), v31)));
  v38.i32[3] = v38.i32[2];
  if ((vminvq_u32(v38) & 0x80000000) == 0)
    goto LABEL_22;
  v39 = vmulq_f32(a8, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)a10, (int8x16_t)a10, 0xCuLL), (int8x16_t)a10, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a9, (int32x4_t)a9), (int8x16_t)a9, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a10, (int32x4_t)a10), (int8x16_t)a10, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)a9, (int8x16_t)a9, 0xCuLL), (int8x16_t)a9, 8uLL)));
  if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v39, 2), vaddq_f32(v39, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.f32, 1))).f32[0]+ -1.0) > 0.000011)goto LABEL_22;
  v40 = a5;
  if (!a5)
    goto LABEL_22;
  v41 = (float32x2_t)vdup_n_s32(0x38D1B717u);
  v42 = (uint32x2_t)vand_s8((int8x8_t)vcge_f32(v41, vabs_f32(vadd_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a10, (int8x16_t)a10, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(a11, a11, 8uLL)), (float32x2_t)0xBF80000080000000))), (int8x8_t)vcge_f32(v41, vabs_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a8, (int8x16_t)a8, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(
                                                                                   (int8x16_t)a9,
                                                                                   (int8x16_t)a9,
                                                                                   8uLL)))));
  if ((vpmin_u32(v42, v42).u32[0] & 0x80000000) == 0)
    goto LABEL_22;
  v43 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
  v44 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v43, vabdq_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(a17, *(float32x2_t *)a17.f32, 1), a18, *(float32x2_t *)a18.f32, 1), a19, *(float32x2_t *)a19.f32, 1), v29)), (int8x16_t)vcgeq_f32(v43, vabdq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(a17, a17.f32[0]), a18, a18.f32[0]),
                                         a19,
                                         a19.f32[0]),
                                       v30))),
                      (int8x16_t)vcgeq_f32(v43, vabdq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(a17, a17, 2), a18, a18, 2), a19, a19, 2), v31)));
  v44.i32[3] = v44.i32[2];
  if ((vminvq_u32(v44) & 0x80000000) == 0)
    goto LABEL_22;
  v45 = (float32x4_t)vdupq_laneq_s32((int32x4_t)a18, 2);
  v46 = (float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)a17, (int32x4_t)a19), (int32x4_t)v45);
  v47 = (float32x4_t)vtrn2q_s32((int32x4_t)a17, (int32x4_t)a18);
  v47.i32[2] = a19.i32[1];
  v48 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)a17, (int32x4_t)a19), (int32x4_t)a18);
  v49 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v43, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v48, a18.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a18.f32, 1), v47), v45, v46), v29)), (int8x16_t)vcgeq_f32(v43, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v48, a17.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a17.f32, 1),
                                           v47),
                                         (float32x4_t)vdupq_laneq_s32((int32x4_t)a17, 2),
                                         v46),
                                       v30))),
                      (int8x16_t)vcgeq_f32(v43, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v48, a19.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a19.f32, 1), v47), (float32x4_t)vdupq_laneq_s32((int32x4_t)a19, 2), v46), v31)));
  v49.i32[3] = v49.i32[2];
  if ((vminvq_u32(v49) & 0x80000000) == 0)
    goto LABEL_22;
  v50 = vmulq_f32(a17, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)a19, (int8x16_t)a19, 0xCuLL), (int8x16_t)a19, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a18, (int32x4_t)a18), (int8x16_t)a18, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a19, (int32x4_t)a19), (int8x16_t)a19, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)a18, (int8x16_t)a18, 0xCuLL), (int8x16_t)a18, 8uLL)));
  if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v50, 2), vaddq_f32(v50, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v50.f32, 1))).f32[0]+ -1.0) <= 0.000011&& a6&& a21 >= 0.0&& (v55 = (float32x2_t)vdup_n_s32(0x38D1B717u), v56 = (uint32x2_t)vand_s8((int8x8_t)vcge_f32(v55, vabs_f32(vadd_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a19, (int8x16_t)a19, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a20,
                                                                                    (int8x16_t)a20,
                                                                                    8uLL)),
                                            (float32x2_t)0xBF80000080000000))),
                            (int8x8_t)vcge_f32(v55, vabs_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a17, (int8x16_t)a17, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a18, (int8x16_t)a18, 8uLL))))), (vpmin_u32(v56, v56).u32[0] & 0x80000000) != 0))
  {
    v60 = a1;
    v138 = a8;
    v140 = a10;
    v141 = a11;
    kdebug_trace();
    v61 = (float32x4_t *)sub_2393ACD80(v60);
    if (v61)
    {
      v62 = v61;
      v142[8] = 0;
      *(_QWORD *)v142 = 0x3F80000000000000;
      v63 = *(unsigned int *)(v40 + 104);
      v131 = v61;
      if ((_DWORD)v63)
      {
        v64 = 0;
        v65 = 0;
        v66 = 0;
        v67 = 0;
        v136 = *(_QWORD *)(v40 + 96);
        v69 = v140;
        v68 = v141;
        v71 = v138;
        v70 = a9;
        v129 = *(unsigned int *)(v40 + 104);
        do
        {
          if (v66 < v64)
          {
            *(_OWORD *)v66 = *(_OWORD *)(v136 + 16 * v67);
            v72 = v66 + 16;
          }
          else
          {
            v73 = v65;
            v74 = (v66 - v65) >> 4;
            v75 = v74 + 1;
            if ((unint64_t)(v74 + 1) >> 60)
              abort();
            __p = v73;
            v76 = v64 - v73;
            v77 = (v64 - v73) >> 3;
            if (v77 > v75)
              v75 = v77;
            v78 = v76 >= 0x7FFFFFFFFFFFFFF0;
            v79 = 0xFFFFFFFFFFFFFFFLL;
            if (!v78)
              v79 = v75;
            v132 = v79;
            if (v79)
            {
              if (v79 >> 60)
                sub_23938C4B8();
              v80 = (char *)operator new(16 * v79);
              v69 = v140;
              v68 = v141;
              v71 = v138;
              v70 = a9;
            }
            else
            {
              v80 = 0;
            }
            v81 = &v80[16 * v74];
            *(_OWORD *)v81 = *(_OWORD *)(v136 + 16 * v67);
            v72 = v81 + 16;
            if (v66 == __p)
            {
              v82 = v132;
            }
            else
            {
              v82 = v132;
              do
              {
                v83 = *((_OWORD *)v66 - 1);
                v66 -= 16;
                *((_OWORD *)v81 - 1) = v83;
                v81 -= 16;
              }
              while (v66 != __p);
            }
            v64 = &v80[16 * v82];
            if (__p)
            {
              v84 = &v80[16 * v82];
              operator delete(__p);
              v64 = v84;
              v71 = v138;
              v70 = a9;
              v69 = v140;
              v68 = v141;
            }
            v65 = v81;
            v63 = v129;
            v62 = v131;
          }
          ++v67;
          v66 = v72;
        }
        while (v67 != v63);
      }
      else
      {
        v65 = 0;
        v69 = v140;
        v68 = v141;
        v71 = v138;
        v70 = a9;
      }
      __pa = v65;
      v86 = 0;
      v87 = *(float32x4_t *)(v40 + 48);
      v88 = *(float32x4_t *)(v40 + 16);
      v89 = *(float32x4_t *)(v40 + 32);
      v90 = vmlaq_f32(vmlaq_f32(vaddq_f32(v88, vmulq_f32(*(float32x4_t *)v40, (float32x4_t)0)), (float32x4_t)0, v89), (float32x4_t)0, v87);
      v91 = vmulq_f32(v90, vaddq_f32(v87, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v40, COERCE_FLOAT(*(_OWORD *)(v40 + 64))), v88, *(float32x2_t *)(v40 + 64), 1), v89, *(float32x4_t *)(v40 + 64), 2)));
      v92 = v60;
      v90.i32[3] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v91, 2), vaddq_f32(v91, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v91.f32, 1))).u32[0];
      v133 = v90;
      v130 = v60;
      do
      {
        v93 = (double *)(a3 + 16 * v86);
        LODWORD(v60) = llround(*v93);
        if ((v60 & 0x80000000) == 0)
        {
          LODWORD(v40) = llround(v93[1]);
          if ((v40 & 0x80000000) == 0)
          {
            v137 = *(float32x4_t *)(a2 + 16 * v86);
            if ((CVPixelBufferGetPixelFormatType(a4) | 0x10) == 0x34323076
              && (sub_2393C49C0((uint64_t)buf, a4, v60, v40), buf[16]))
            {
              v94 = v137;
              v94.i32[3] = 1.0;
              v95 = (int32x4_t)vmulq_f32(v137, v137);
              v95.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v95, 2), vadd_f32(*(float32x2_t *)v95.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v95.i8, 1))).u32[0];
              v96 = vrsqrte_f32((float32x2_t)v95.u32[0]);
              v97 = vmul_f32(v96, vrsqrts_f32((float32x2_t)v95.u32[0], vmul_f32(v96, v96)));
              v98 = vmulq_n_f32(vnegq_f32(v137), vmul_f32(v97, vrsqrts_f32((float32x2_t)v95.u32[0], vmul_f32(v97, v97))).f32[0]);
              v98.i32[3] = 0;
              v99 = *(float32x4_t *)buf;
              v99.i32[3] = 1.0;
              v101 = (float32x4_t *)v62[6].i64[1];
              v100 = v62[7].u64[0];
              if ((unint64_t)v101 >= v100)
              {
                v103 = (float32x4_t *)v62[6].i64[0];
                v104 = 0xAAAAAAAAAAAAAAABLL * (v101 - v103) + 1;
                if (v104 > 0x555555555555555)
                  abort();
                v105 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v100 - (_QWORD)v103) >> 4);
                if (2 * v105 > v104)
                  v104 = 2 * v105;
                if (v105 >= 0x2AAAAAAAAAAAAAALL)
                  v40 = 0x555555555555555;
                else
                  v40 = v104;
                if (v40)
                {
                  v126 = v98;
                  v127 = v99;
                  v128 = v94;
                  if (v40 > 0x555555555555555)
                    sub_23938C4B8();
                  v106 = (char *)operator new(48 * v40);
                  v99 = v127;
                  v94 = v128;
                  v98 = v126;
                }
                else
                {
                  v106 = 0;
                }
                v107 = (float32x4_t *)&v106[16 * (v101 - v103)];
                *v107 = v94;
                v107[1] = v98;
                v107[2] = v99;
                v108 = v107;
                if (v101 == v103)
                {
                  v62 = v131;
                }
                else
                {
                  v62 = v131;
                  do
                  {
                    v109 = v101[-3];
                    v110 = v101[-1];
                    v108[-2] = v101[-2];
                    v108[-1] = v110;
                    v108[-3] = v109;
                    v108 -= 3;
                    v101 -= 3;
                  }
                  while (v101 != v103);
                  v101 = (float32x4_t *)v131[6].i64[0];
                }
                f32 = (_OWORD *)v107[3].f32;
                v62[6].i64[0] = (uint64_t)v108;
                v62[6].i64[1] = (uint64_t)&v107[3];
                v62[7].i64[0] = (uint64_t)&v106[48 * v40];
                if (v101)
                  operator delete(v101);
              }
              else
              {
                *v101 = v94;
                v101[1] = v98;
                f32 = (_OWORD *)v101[3].f32;
                v101[2] = v99;
              }
              v69 = v140;
              v68 = v141;
              v71 = v138;
              v70 = a9;
              v111 = vaddq_f32(a20, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a17, v137.f32[0]), a18, *(float32x2_t *)v137.f32, 1), a19, v137, 2));
              v111.i32[3] = -1.0;
              v112 = (int8x16_t)vmulq_f32(v133, v111);
              v113 = vaddv_f32(vadd_f32(*(float32x2_t *)v112.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v112, v112, 8uLL))) >= a21;
              v62[6].i64[1] = (uint64_t)f32;
              v60 = v62[8].u64[0];
              v114 = v62[8].u64[1];
              if (v60 >= v114)
              {
                v116 = v62[7].i64[1];
                v117 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v60 - v116) >> 2) + 1;
                if (v117 > 0xCCCCCCCCCCCCCCCLL)
                  abort();
                v118 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v114 - v116) >> 2);
                if (2 * v118 > v117)
                  v117 = 2 * v118;
                if (v118 >= 0x666666666666666)
                  v40 = 0xCCCCCCCCCCCCCCCLL;
                else
                  v40 = v117;
                if (v40)
                {
                  if (v40 > 0xCCCCCCCCCCCCCCCLL)
                    sub_23938C4B8();
                  v119 = (char *)operator new(20 * v40);
                  v69 = v140;
                  v68 = v141;
                  v71 = v138;
                  v70 = a9;
                }
                else
                {
                  v119 = 0;
                }
                v120 = &v119[4 * ((uint64_t)(v60 - v116) >> 2)];
                *(_QWORD *)v120 = 0x3F8000003F800000;
                v120[8] = v113;
                *(_QWORD *)(v120 + 9) = *(_QWORD *)&v142[1];
                *((_DWORD *)v120 + 4) = 0;
                v121 = v120;
                if (v60 == v116)
                {
                  v62 = v131;
                }
                else
                {
                  v62 = v131;
                  do
                  {
                    v122 = *(_OWORD *)(v60 - 20);
                    *((_DWORD *)v121 - 1) = *(_DWORD *)(v60 - 4);
                    *(_OWORD *)(v121 - 20) = v122;
                    v121 -= 20;
                    v60 -= 20;
                  }
                  while (v60 != v116);
                  v60 = v131[7].u64[1];
                }
                v115 = (size_t)(v120 + 20);
                v62[7].i64[1] = (uint64_t)v121;
                v62[8].i64[0] = (uint64_t)(v120 + 20);
                v62[8].i64[1] = (uint64_t)&v119[20 * v40];
                if (v60)
                {
                  operator delete((void *)v60);
                  v71 = v138;
                  v70 = a9;
                  v69 = v140;
                  v68 = v141;
                }
              }
              else
              {
                *(_QWORD *)v60 = 0x3F8000003F800000;
                *(_BYTE *)(v60 + 8) = v113;
                *(_QWORD *)(v60 + 9) = *(_QWORD *)&v142[1];
                *(_DWORD *)(v60 + 16) = 0;
                v115 = v60 + 20;
              }
              v62[8].i64[0] = v115;
              v92 = v130;
            }
            else
            {
              v69 = v140;
              v68 = v141;
              v71 = v138;
              v70 = a9;
            }
          }
        }
        ++v86;
      }
      while (v86 != v92);
      v123 = v62[6].i64[0];
      v124 = v62[6].i64[1];
      if (__pa)
      {
        operator delete(__pa);
        v71 = v138;
        v70 = a9;
        v69 = v140;
        v68 = v141;
      }
      if (v123 == v124)
      {
        if (qword_2569302D8 != -1)
          dispatch_once(&qword_2569302D8, &unk_250AD5DC0);
        v125 = qword_2569302D0;
        if (os_log_type_enabled((os_log_t)qword_2569302D0, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "OCPointCloudCreateWithRGBAndPlaneClassification";
          *(_WORD *)&buf[12] = 1026;
          *(_DWORD *)&buf[14] = 534;
          _os_log_error_impl(&dword_239388000, v125, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create pointcloud - no points above plane with valid pixel coords.", buf, 0x12u);
        }
        CFRelease(v62);
        v52 = 0xFFFFFFFFLL;
      }
      else
      {
        v52 = 0;
        v62[1].f32[0] = a7;
        v62[2] = v71;
        v62[3] = v70;
        v62[4] = v69;
        v62[5] = (float32x4_t)v68;
        *a6 = v62;
      }
      kdebug_trace();
    }
    else
    {
      if (qword_2569302D8 != -1)
        dispatch_once(&qword_2569302D8, &unk_250AD5DC0);
      v85 = qword_2569302D0;
      if (os_log_type_enabled((os_log_t)qword_2569302D0, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "OCPointCloudCreateWithRGBAndPlaneClassification";
        *(_WORD *)&buf[12] = 1026;
        *(_DWORD *)&buf[14] = 513;
        _os_log_error_impl(&dword_239388000, v85, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create pointcloud - insufficient memory.", buf, 0x12u);
      }
      kdebug_trace();
      return 4294967293;
    }
  }
  else
  {
LABEL_22:
    if (qword_2569302D8 != -1)
      dispatch_once(&qword_2569302D8, &unk_250AD5DC0);
    v51 = qword_2569302D0;
    if (os_log_type_enabled((os_log_t)qword_2569302D0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "OCPointCloudCreateWithRGBAndPlaneClassification";
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = 503;
      _os_log_error_impl(&dword_239388000, v51, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create pointcloud - invalid arguments.", buf, 0x12u);
    }
    return 4294967294;
  }
  return v52;
}

void sub_2393AE8C4(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_2393AE8D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p)
{
  if (!__p)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t OCPointCloudCreateWithNormal(unsigned int a1, uint64_t a2, uint64_t a3, float32x4_t **a4, float32_t a5, float32x4_t a6, float32x4_t a7, float32x4_t a8, int8x16_t a9)
{
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  uint32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  uint32x4_t v25;
  float32x4_t v26;
  float32x2_t v28;
  uint32x2_t v29;
  float32x4_t *v33;
  float32x4_t *v34;
  NSObject *v36;
  NSObject *v37;
  float32x4_t v38;
  uint8_t buf[4];
  const char *v43;
  __int16 v44;
  int v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  if (a5 <= 0.0 || a1 == 0 || a2 == 0 || a3 == 0)
    goto LABEL_18;
  v14 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(a6, a6.f32[0]), a7, a7.f32[0]), a8, a8.f32[0]);
  v15 = vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(a6, *(float32x2_t *)a6.f32, 1), a7, *(float32x2_t *)a7.f32, 1), a8, *(float32x2_t *)a8.f32, 1);
  v16 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(a6, a6, 2), a7, a7, 2), a8, a8, 2);
  v17 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 16);
  v18 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 32);
  v19 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
  v20 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v19, vabdq_f32(v15, v17)), (int8x16_t)vcgeq_f32(v19, vabdq_f32(v14, *MEMORY[0x24BDAEDF8]))), (int8x16_t)vcgeq_f32(v19, vabdq_f32(v16, v18)));
  v20.i32[3] = v20.i32[2];
  if ((vminvq_u32(v20) & 0x80000000) == 0)
    goto LABEL_18;
  v21 = (float32x4_t)vdupq_laneq_s32((int32x4_t)a7, 2);
  v22 = (float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)a6, (int32x4_t)a8), (int32x4_t)v21);
  v23 = (float32x4_t)vtrn2q_s32((int32x4_t)a6, (int32x4_t)a7);
  v23.i32[2] = a8.i32[1];
  v24 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)a6, (int32x4_t)a8), (int32x4_t)a7);
  v25 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v19, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v24, a7.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a7.f32, 1), v23), v21, v22), v17)), (int8x16_t)vcgeq_f32(v19, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v24, a6.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a6.f32, 1),
                                           v23),
                                         (float32x4_t)vdupq_laneq_s32((int32x4_t)a6, 2),
                                         v22),
                                       *MEMORY[0x24BDAEDF8]))),
                      (int8x16_t)vcgeq_f32(v19, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v24, a8.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a8.f32, 1), v23), (float32x4_t)vdupq_laneq_s32((int32x4_t)a8, 2), v22), v18)));
  v25.i32[3] = v25.i32[2];
  if ((vminvq_u32(v25) & 0x80000000) == 0)
    goto LABEL_18;
  v26 = vmulq_f32(a6, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)a8, (int8x16_t)a8, 0xCuLL), (int8x16_t)a8, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a7, (int32x4_t)a7), (int8x16_t)a7, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a8, (int32x4_t)a8), (int8x16_t)a8, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)a7, (int8x16_t)a7, 0xCuLL), (int8x16_t)a7, 8uLL)));
  if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 2), vaddq_f32(v26, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 1))).f32[0]+ -1.0) <= 0.000011&& a4&& (v28 = (float32x2_t)vdup_n_s32(0x38D1B717u), v29 = (uint32x2_t)vand_s8((int8x8_t)vcge_f32(v28, vabs_f32(vadd_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a8, (int8x16_t)a8, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(a9, a9, 8uLL)), (float32x2_t)0xBF80000080000000))), (int8x8_t)vcge_f32(
                                        v28,
                                        vabs_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a6, (int8x16_t)a6, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a7, (int8x16_t)a7, 8uLL))))), (vpmin_u32(v29, v29).u32[0] & 0x80000000) != 0))
  {
    v38 = a6;
    kdebug_trace();
    v33 = (float32x4_t *)sub_2393ACD80(a1);
    if (v33)
    {
      v34 = v33;
      sub_2393ACF54(a1, a2, a3, v33);
      v34[1].f32[0] = a5;
      v34[2] = v38;
      v34[3] = a7;
      v34[4] = a8;
      v34[5] = (float32x4_t)a9;
      *a4 = v34;
      kdebug_trace();
      return 0;
    }
    else
    {
      if (qword_2569302D8 != -1)
        dispatch_once(&qword_2569302D8, &unk_250AD5DC0);
      v37 = qword_2569302D0;
      if (os_log_type_enabled((os_log_t)qword_2569302D0, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v43 = "OCPointCloudCreateWithNormal";
        v44 = 1026;
        v45 = 573;
        _os_log_error_impl(&dword_239388000, v37, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create pointcloud - insufficient memory.", buf, 0x12u);
      }
      kdebug_trace();
      return 4294967293;
    }
  }
  else
  {
LABEL_18:
    if (qword_2569302D8 != -1)
      dispatch_once(&qword_2569302D8, &unk_250AD5DC0);
    v36 = qword_2569302D0;
    if (os_log_type_enabled((os_log_t)qword_2569302D0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v43 = "OCPointCloudCreateWithNormal";
      v44 = 1026;
      v45 = 563;
      _os_log_error_impl(&dword_239388000, v36, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create pointcloud - invalid arguments.", buf, 0x12u);
    }
    return 4294967294;
  }
}

uint64_t OCPointCloudCreateWithRGBNormal(unsigned int a1, uint64_t a2, uint64_t a3, __CVBuffer *a4, uint64_t a5, float32x4_t **a6, float32_t a7, float32x4_t a8, float32x4_t a9, float32x4_t a10, int8x16_t a11)
{
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  uint32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  uint32x4_t v29;
  float32x4_t v30;
  float32x2_t v32;
  uint32x2_t v33;
  float32x4_t *v39;
  float32x4_t *v40;
  NSObject *v42;
  NSObject *v43;
  NSObject *v44;
  float32x4_t v45;
  uint8_t buf[4];
  const char *v50;
  __int16 v51;
  int v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  if (a7 <= 0.0 || a1 == 0 || a2 == 0 || a3 == 0 || a4 == 0 || a5 == 0)
    goto LABEL_25;
  v18 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(a8, a8.f32[0]), a9, a9.f32[0]), a10, a10.f32[0]);
  v19 = vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(a8, *(float32x2_t *)a8.f32, 1), a9, *(float32x2_t *)a9.f32, 1), a10, *(float32x2_t *)a10.f32, 1);
  v20 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(a8, a8, 2), a9, a9, 2), a10, a10, 2);
  v21 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 16);
  v22 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 32);
  v23 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
  v24 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v23, vabdq_f32(v19, v21)), (int8x16_t)vcgeq_f32(v23, vabdq_f32(v18, *MEMORY[0x24BDAEDF8]))), (int8x16_t)vcgeq_f32(v23, vabdq_f32(v20, v22)));
  v24.i32[3] = v24.i32[2];
  if ((vminvq_u32(v24) & 0x80000000) == 0)
    goto LABEL_25;
  v25 = (float32x4_t)vdupq_laneq_s32((int32x4_t)a9, 2);
  v26 = (float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)a8, (int32x4_t)a10), (int32x4_t)v25);
  v27 = (float32x4_t)vtrn2q_s32((int32x4_t)a8, (int32x4_t)a9);
  v27.i32[2] = a10.i32[1];
  v28 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)a8, (int32x4_t)a10), (int32x4_t)a9);
  v29 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v23, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v28, a9.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a9.f32, 1), v27), v25, v26), v21)), (int8x16_t)vcgeq_f32(v23, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v28, a8.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a8.f32, 1),
                                           v27),
                                         (float32x4_t)vdupq_laneq_s32((int32x4_t)a8, 2),
                                         v26),
                                       *MEMORY[0x24BDAEDF8]))),
                      (int8x16_t)vcgeq_f32(v23, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v28, a10.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a10.f32, 1), v27), (float32x4_t)vdupq_laneq_s32((int32x4_t)a10, 2), v26), v22)));
  v29.i32[3] = v29.i32[2];
  if ((vminvq_u32(v29) & 0x80000000) == 0)
    goto LABEL_25;
  v30 = vmulq_f32(a8, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)a10, (int8x16_t)a10, 0xCuLL), (int8x16_t)a10, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a9, (int32x4_t)a9), (int8x16_t)a9, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a10, (int32x4_t)a10), (int8x16_t)a10, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)a9, (int8x16_t)a9, 0xCuLL), (int8x16_t)a9, 8uLL)));
  if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v30, 2), vaddq_f32(v30, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.f32, 1))).f32[0]+ -1.0) <= 0.000011&& a6&& (v32 = (float32x2_t)vdup_n_s32(0x38D1B717u), v33 = (uint32x2_t)vand_s8((int8x8_t)vcge_f32(v32, vabs_f32(vadd_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a10, (int8x16_t)a10, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(a11, a11, 8uLL)), (float32x2_t)0xBF80000080000000))), (int8x8_t)vcge_f32(
                                        v32,
                                        vabs_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a8, (int8x16_t)a8, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a9, (int8x16_t)a9, 8uLL))))), (vpmin_u32(v33, v33).u32[0] & 0x80000000) != 0))
  {
    v45 = a8;
    kdebug_trace();
    v39 = (float32x4_t *)sub_2393ACD80(a1);
    if (v39)
    {
      v40 = v39;
      if (sub_2393AD8DC(a1, a2, a5, a3, a4, v39))
      {
        v40[1].f32[0] = a7;
        v40[2] = v45;
        v40[3] = a9;
        v40[4] = a10;
        v40[5] = (float32x4_t)a11;
        *a6 = v40;
        kdebug_trace();
        return 0;
      }
      else
      {
        if (qword_2569302D8 != -1)
          dispatch_once(&qword_2569302D8, &unk_250AD5DC0);
        v44 = qword_2569302D0;
        if (os_log_type_enabled((os_log_t)qword_2569302D0, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          v50 = "OCPointCloudCreateWithRGBNormal";
          v51 = 1026;
          v52 = 644;
          _os_log_error_impl(&dword_239388000, v44, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create pointcloud - no points with valid pixel coords.", buf, 0x12u);
        }
        CFRelease(v40);
        kdebug_trace();
        return 0xFFFFFFFFLL;
      }
    }
    else
    {
      if (qword_2569302D8 != -1)
        dispatch_once(&qword_2569302D8, &unk_250AD5DC0);
      v43 = qword_2569302D0;
      if (os_log_type_enabled((os_log_t)qword_2569302D0, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v50 = "OCPointCloudCreateWithRGBNormal";
        v51 = 1026;
        v52 = 623;
        _os_log_error_impl(&dword_239388000, v43, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create pointcloud - insufficient memory.", buf, 0x12u);
      }
      kdebug_trace();
      return 4294967293;
    }
  }
  else
  {
LABEL_25:
    if (qword_2569302D8 != -1)
      dispatch_once(&qword_2569302D8, &unk_250AD5DC0);
    v42 = qword_2569302D0;
    if (os_log_type_enabled((os_log_t)qword_2569302D0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v50 = "OCPointCloudCreateWithRGBNormal";
      v51 = 1026;
      v52 = 613;
      _os_log_error_impl(&dword_239388000, v42, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create pointcloud - invalid arguments.", buf, 0x12u);
    }
    return 4294967294;
  }
}

uint64_t OCPointCloudCreateFromOCPoints(unsigned int a1, uint64_t a2, float32x4_t **a3, float32_t a4, float32x4_t a5, float32x4_t a6, float32x4_t a7, int8x16_t a8)
{
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  uint32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  uint32x4_t v22;
  float32x4_t v23;
  NSObject *v24;
  float32x2_t v27;
  uint32x2_t v28;
  float32x4_t *v30;
  float32x4_t *v31;
  uint64_t v32;
  uint64_t v38;
  char *v39;
  _OWORD *v40;
  unint64_t v41;
  _OWORD *v42;
  __int128 v43;
  __int128 v44;
  _OWORD *v45;
  _OWORD *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  __int128 v52;
  char *v53;
  __int128 v54;
  __int128 v55;
  char *v56;
  unint64_t v57;
  char *v58;
  _BYTE *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  __int128 v66;
  NSObject *v67;
  float32x4_t v68;
  uint8_t buf[4];
  const char *v73;
  __int16 v74;
  int v75;
  uint64_t v76;

  v76 = *MEMORY[0x24BDAC8D0];
  if (!a1)
    goto LABEL_7;
  if (!a2)
    goto LABEL_7;
  if (a4 <= 0.0)
    goto LABEL_7;
  v11 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(a5, a5.f32[0]), a6, a6.f32[0]), a7, a7.f32[0]);
  v12 = vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(a5, *(float32x2_t *)a5.f32, 1), a6, *(float32x2_t *)a6.f32, 1), a7, *(float32x2_t *)a7.f32, 1);
  v13 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(a5, a5, 2), a6, a6, 2), a7, a7, 2);
  v14 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 16);
  v15 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 32);
  v16 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
  v17 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v16, vabdq_f32(v12, v14)), (int8x16_t)vcgeq_f32(v16, vabdq_f32(v11, *MEMORY[0x24BDAEDF8]))), (int8x16_t)vcgeq_f32(v16, vabdq_f32(v13, v15)));
  v17.i32[3] = v17.i32[2];
  if ((vminvq_u32(v17) & 0x80000000) == 0)
    goto LABEL_7;
  v18 = (float32x4_t)vdupq_laneq_s32((int32x4_t)a6, 2);
  v19 = (float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)a5, (int32x4_t)a7), (int32x4_t)v18);
  v20 = (float32x4_t)vtrn2q_s32((int32x4_t)a5, (int32x4_t)a6);
  v20.i32[2] = a7.i32[1];
  v21 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)a5, (int32x4_t)a7), (int32x4_t)a6);
  v22 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v16, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v21, a6.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a6.f32, 1), v20), v18, v19), v14)), (int8x16_t)vcgeq_f32(v16, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v21, a5.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 1),
                                           v20),
                                         (float32x4_t)vdupq_laneq_s32((int32x4_t)a5, 2),
                                         v19),
                                       *MEMORY[0x24BDAEDF8]))),
                      (int8x16_t)vcgeq_f32(v16, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v21, a7.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a7.f32, 1), v20), (float32x4_t)vdupq_laneq_s32((int32x4_t)a7, 2), v19), v15)));
  v22.i32[3] = v22.i32[2];
  if ((vminvq_u32(v22) & 0x80000000) == 0)
    goto LABEL_7;
  v23 = vmulq_f32(a5, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)a7, (int8x16_t)a7, 0xCuLL), (int8x16_t)a7, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a6, (int32x4_t)a6), (int8x16_t)a6, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a7, (int32x4_t)a7), (int8x16_t)a7, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)a6, (int8x16_t)a6, 0xCuLL), (int8x16_t)a6, 8uLL)));
  if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v23, 2), vaddq_f32(v23, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v23.f32, 1))).f32[0]+ -1.0) <= 0.000011&& a3&& (v27 = (float32x2_t)vdup_n_s32(0x38D1B717u), v28 = (uint32x2_t)vand_s8((int8x8_t)vcge_f32(v27, vabs_f32(vadd_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a7, (int8x16_t)a7, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(a8, a8, 8uLL)), (float32x2_t)0xBF80000080000000))), (int8x8_t)vcge_f32(
                                        v27,
                                        vabs_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a5, (int8x16_t)a5, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a6, (int8x16_t)a6, 8uLL))))), (vpmin_u32(v28, v28).u32[0] & 0x80000000) != 0))
  {
    v68 = a5;
    kdebug_trace();
    v30 = (float32x4_t *)sub_2393ACD80(a1);
    if (v30)
    {
      v31 = v30;
      v32 = 0;
      __asm { FMOV            V9.2S, #1.0 }
      v38 = a1;
      do
      {
        v40 = (_OWORD *)(a2 + 48 * v32);
        v42 = (_OWORD *)v31[6].i64[1];
        v41 = v31[7].u64[0];
        if ((unint64_t)v42 >= v41)
        {
          v46 = (_OWORD *)v31[6].i64[0];
          v47 = 0xAAAAAAAAAAAAAAABLL * (v42 - v46) + 1;
          if (v47 > 0x555555555555555)
            goto LABEL_58;
          v48 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v41 - (_QWORD)v46) >> 4);
          if (2 * v48 > v47)
            v47 = 2 * v48;
          if (v48 >= 0x2AAAAAAAAAAAAAALL)
            v49 = 0x555555555555555;
          else
            v49 = v47;
          if (v49)
          {
            if (v49 > 0x555555555555555)
              goto LABEL_59;
            v50 = (char *)operator new(48 * v49);
          }
          else
          {
            v50 = 0;
          }
          v51 = &v50[16 * (v42 - v46)];
          v52 = v40[1];
          *(_OWORD *)v51 = *v40;
          *((_OWORD *)v51 + 1) = v52;
          *((_OWORD *)v51 + 2) = v40[2];
          v53 = v51;
          if (v42 != v46)
          {
            do
            {
              v54 = *(v42 - 3);
              v55 = *(v42 - 1);
              *((_OWORD *)v53 - 2) = *(v42 - 2);
              *((_OWORD *)v53 - 1) = v55;
              *((_OWORD *)v53 - 3) = v54;
              v53 -= 48;
              v42 -= 3;
            }
            while (v42 != v46);
            v42 = (_OWORD *)v31[6].i64[0];
          }
          v56 = &v50[48 * v49];
          v45 = v51 + 48;
          v31[6].i64[0] = (uint64_t)v53;
          v31[6].i64[1] = (uint64_t)(v51 + 48);
          v31[7].i64[0] = (uint64_t)v56;
          if (v42)
            operator delete(v42);
        }
        else
        {
          v43 = *v40;
          v44 = v40[2];
          v42[1] = v40[1];
          v42[2] = v44;
          *v42 = v43;
          v45 = v42 + 3;
        }
        v31[6].i64[1] = (uint64_t)v45;
        v58 = (char *)v31[8].i64[0];
        v57 = v31[8].u64[1];
        if ((unint64_t)v58 < v57)
        {
          *(_QWORD *)v58 = _D9;
          v58[8] = 1;
          v39 = v58 + 20;
          *(_QWORD *)(v58 + 12) = 0x23F800000;
        }
        else
        {
          v59 = (_BYTE *)v31[7].i64[1];
          v60 = 0xCCCCCCCCCCCCCCCDLL * ((v58 - v59) >> 2) + 1;
          if (v60 > 0xCCCCCCCCCCCCCCCLL)
LABEL_58:
            abort();
          v61 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v57 - (_QWORD)v59) >> 2);
          if (2 * v61 > v60)
            v60 = 2 * v61;
          if (v61 >= 0x666666666666666)
            v62 = 0xCCCCCCCCCCCCCCCLL;
          else
            v62 = v60;
          if (v62)
          {
            if (v62 > 0xCCCCCCCCCCCCCCCLL)
LABEL_59:
              sub_23938C4B8();
            v63 = (char *)operator new(20 * v62);
          }
          else
          {
            v63 = 0;
          }
          v64 = &v63[4 * ((v58 - v59) >> 2)];
          *(_QWORD *)v64 = _D9;
          v64[8] = 1;
          *(_QWORD *)(v64 + 12) = 0x23F800000;
          v65 = v64;
          if (v58 != v59)
          {
            do
            {
              v66 = *(_OWORD *)(v58 - 20);
              *((_DWORD *)v65 - 1) = *((_DWORD *)v58 - 1);
              *(_OWORD *)(v65 - 20) = v66;
              v65 -= 20;
              v58 -= 20;
            }
            while (v58 != v59);
            v58 = (char *)v31[7].i64[1];
          }
          v39 = v64 + 20;
          v31[7].i64[1] = (uint64_t)v65;
          v31[8].i64[0] = (uint64_t)(v64 + 20);
          v31[8].i64[1] = (uint64_t)&v63[20 * v62];
          if (v58)
            operator delete(v58);
        }
        v31[8].i64[0] = (uint64_t)v39;
        ++v32;
      }
      while (v32 != v38);
      v31[1].f32[0] = a4;
      v31[2] = v68;
      v31[3] = a6;
      v31[4] = a7;
      v31[5] = (float32x4_t)a8;
      *a3 = v31;
      kdebug_trace();
      return 0;
    }
    else
    {
      if (qword_2569302D8 != -1)
        dispatch_once(&qword_2569302D8, &unk_250AD5DC0);
      v67 = qword_2569302D0;
      if (os_log_type_enabled((os_log_t)qword_2569302D0, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v73 = "OCPointCloudCreateFromOCPoints";
        v74 = 1026;
        v75 = 682;
        _os_log_error_impl(&dword_239388000, v67, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create pointcloud - insufficient memory.", buf, 0x12u);
      }
      kdebug_trace();
      return 4294967293;
    }
  }
  else
  {
LABEL_7:
    if (qword_2569302D8 != -1)
      dispatch_once(&qword_2569302D8, &unk_250AD5DC0);
    v24 = qword_2569302D0;
    if (os_log_type_enabled((os_log_t)qword_2569302D0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v73 = "OCPointCloudCreateFromOCPoints";
      v74 = 1026;
      v75 = 672;
      _os_log_error_impl(&dword_239388000, v24, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create pointcloud - invalid arguments.", buf, 0x12u);
    }
    return 4294967294;
  }
}

void sub_2393AF87C(uint64_t a1, unint64_t a2)
{
  unsigned int v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  NSObject *v12;
  unsigned int v13;
  float v14;
  unsigned int v15;
  int v16;
  const char *v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (a1 && (sub_2393B013C(a1) & 1) != 0)
  {
    if (!HIDWORD(a2))
    {
      v4 = *(_DWORD *)(a1 + 232);
      if (*(_DWORD *)(a1 + 236) * v4 > a2)
      {
        v5 = *(_DWORD *)(a1 + 224);
        v6 = *(_QWORD *)(a1 + 200);
        v7 = HIDWORD(v6) + v5 * (a2 / v4);
        v8 = v7 + v5;
        if (v7 < v7 + v5)
        {
          v9 = v6 + v5 * (a2 % v4);
          v10 = v9 + v5;
          if (v9 < v10)
          {
            v11 = *(_DWORD *)(a1 + 228) * a2;
            do
            {
              if (v7 > *(_DWORD *)(a1 + 212))
                break;
              v13 = v9;
              do
              {
                if (v13 > *(_QWORD *)(a1 + 208))
                  break;
                v14 = *(float *)(*(_QWORD *)(a1 + 72)
                               + *(_QWORD *)(a1 + 48)
                               + *(_DWORD *)(a1 + 64) * v13
                               + *(_DWORD *)(a1 + 68) * v7);
                v15 = *(_DWORD *)(a1 + 224);
                *(float32x4_t *)(*(_QWORD *)(a1 + 512)
                               + 16
                               * ((v13 - *(_QWORD *)(a1 + 200)) % v15
                                + v11
                                + (v7 - HIDWORD(*(_QWORD *)(a1 + 200))) % v15 * v15)) = vaddq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32((float32x4_t)xmmword_2393F5360, (float)(v14 * (float)((float)v13 - *(float *)(a1 + 192))) / *(float *)(a1 + 184)), (float32x4_t)xmmword_2393F5440, (float)(v14 * (float)((float)v7 - *(float *)(a1 + 196))) / *(float *)(a1 + 188)), (float32x4_t)xmmword_2393F5450, v14), (float32x4_t)xmmword_2393F5320);
                ++v13;
              }
              while (v13 < v10);
              ++v7;
            }
            while (v7 != v8);
          }
        }
      }
    }
  }
  else
  {
    if (qword_2569302D8 != -1)
      dispatch_once(&qword_2569302D8, &unk_250AD5DC0);
    v12 = qword_2569302D0;
    if (os_log_type_enabled((os_log_t)qword_2569302D0, OS_LOG_TYPE_ERROR))
    {
      v16 = 136315394;
      v17 = "computePointsInRenderCameraFrame";
      v18 = 1026;
      v19 = 887;
      _os_log_error_impl(&dword_239388000, v12, OS_LOG_TYPE_ERROR, "%s:%{public}d Invalid pointcloud context.", (uint8_t *)&v16, 0x12u);
    }
  }
}

void sub_2393AFAB0(float32x4_t *a1, unint64_t a2)
{
  unsigned __int32 v4;
  __int32 v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  float v11;
  unsigned int v12;
  NSObject *v13;
  __int32 v14;
  uint64_t v15;
  float32x4_t v16;
  int8x16_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  float32x4_t v21;
  float32x4_t v22;
  int8x8_t v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  int32x2_t **v27;
  int32x2_t *v28;
  uint64_t v29;
  uint32x2_t v30;
  int32x2_t v31;
  uint32x2_t v32;
  int32x2_t v33;
  float32x4_t v34;
  int32x4_t v35;
  float32x2_t v36;
  float32x2_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float v41;
  float v42;
  float32x4_t v43;
  float v44;
  float v45;
  float v46;
  int v47;
  int32x4_t v48;
  float32x2_t v49;
  float32x2_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float v54;
  float v55;
  float32x4_t v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  uint8_t buf[4];
  const char *v65;
  __int16 v66;
  int v67;
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  if (a1 && (sub_2393B013C((uint64_t)a1) & 1) != 0)
  {
    if (!HIDWORD(a2))
    {
      v4 = a1[14].u32[2];
      if (a1[14].i32[3] * v4 > a2)
      {
        v5 = a1[14].i32[0];
        v6 = a1[12].i64[1];
        v7 = HIDWORD(v6) + v5 * (a2 / v4);
        v59 = v7 + v5;
        v57 = a2;
        if (v7 < v7 + v5)
        {
          v8 = v6 + v5 * (a2 % v4);
          v9 = v8 + v5;
          v58 = v8;
          if (v8 < v8 + v5)
          {
            v10 = 0;
            v11 = (float)a1[11].u32[0] / (float)a1[7].u32[0];
            v61 = (float32x4_t)vdupq_n_s32(0x358637BDu);
            v60 = a1[14].i32[1] * a2;
            v12 = v60;
            while (1)
            {
              if (v7 > a1[13].i32[1])
                goto LABEL_59;
              v15 = v58;
LABEL_19:
              if (v15 <= a1[13].i64[0])
                break;
              v14 = a1[15].i32[0];
LABEL_14:
              v7 += v14;
              if (v7 >= v59)
                goto LABEL_59;
            }
            sub_2393B028C();
            v22 = v21;
            v23 = *(int8x8_t *)a1[1].f32;
            if (!*(_QWORD *)&v23)
              goto LABEL_40;
            v24 = v7 | (unint64_t)(v15 << 32);
            v25 = (uint8x8_t)vcnt_s8(v23);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] >= 2uLL)
            {
              v26 = v7 | (unint64_t)(v15 << 32);
              if (v24 >= *(_QWORD *)&v23)
                v26 = v24 % *(_QWORD *)&v23;
            }
            else
            {
              v26 = (*(_QWORD *)&v23 - 1) & v24;
            }
            v27 = *(int32x2_t ***)(a1->i64[1] + 8 * v26);
            if (!v27 || (v28 = *v27) == 0)
            {
LABEL_40:
              v34 = *(float32x4_t *)(a1[32].i64[0]
                                   + 16
                                   * ((v15 - a1[12].i64[1]) % a1[14].i32[0]
                                    + v60
                                    + (v7 - HIDWORD(a1[12].i64[1])) % a1[14].i32[0] * a1[14].i32[0]));
              if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgeq_f32(v61, vabsq_f32(v22))))) & 1) == 0
                && a1[8].i32[1] * a1[8].i32[0])
              {
                v35 = (int32x4_t)vmulq_f32(v34, v34);
                v35.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v35, 2), vadd_f32(*(float32x2_t *)v35.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v35.i8, 1))).u32[0];
                v36 = vrsqrte_f32((float32x2_t)v35.u32[0]);
                v37 = vmul_f32(v36, vrsqrts_f32((float32x2_t)v35.u32[0], vmul_f32(v36, v36)));
                v38 = vmulq_n_f32(vnegq_f32(v34), vmul_f32(v37, vrsqrts_f32((float32x2_t)v35.u32[0], vmul_f32(v37, v37))).f32[0]);
                v38.i32[3] = v22.i32[3];
                v22 = v38;
              }
              v39 = vmulq_f32(v22, v22);
              v40 = vmulq_f32(v34, v34);
              v41 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v40, 2), vaddq_f32(v40, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.f32, 1))).f32[0])* sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v39, 2), vaddq_f32(v39, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.f32, 1))).f32[0]);
              v42 = 0.0;
              if (fabsf(v41) <= 0.000001)
              {
                v44 = 0.0;
              }
              else
              {
                v43 = vmulq_f32(v22, vnegq_f32(v34));
                v44 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v43, 2), vaddq_f32(v43, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v43.f32, 1))).f32[0]/ v41;
                if (v44 >= 0.6)
                  v42 = v44 * v44;
              }
              v45 = v42 + v42;
              v46 = *(float *)(a1[6].i64[1] + a1[5].i64[0] + a1[6].i32[0] * (_DWORD)v15 + a1[6].i32[1] * v7);
              v47 = 1;
              goto LABEL_48;
            }
            if (v25.u32[0] < 2uLL)
            {
              v29 = *(_QWORD *)&v23 - 1;
              while (1)
              {
                v33 = v28[1];
                if (*(_QWORD *)&v33 == v24)
                {
                  v32 = (uint32x2_t)vceq_s32(v28[2], (int32x2_t)__PAIR64__(v7, v15));
                  if ((vpmin_u32(v32, v32).u32[0] & 0x80000000) != 0)
                    goto LABEL_50;
                }
                else if ((*(_QWORD *)&v33 & v29) != v26)
                {
                  goto LABEL_40;
                }
                v28 = (int32x2_t *)*v28;
                if (!v28)
                  goto LABEL_40;
              }
            }
            while (1)
            {
              v31 = v28[1];
              if (*(_QWORD *)&v31 == v24)
              {
                v30 = (uint32x2_t)vceq_s32(v28[2], (int32x2_t)__PAIR64__(v7, v15));
                if ((vpmin_u32(v30, v30).u32[0] & 0x80000000) != 0)
                {
LABEL_50:
                  v28[3].i8[4] = 1;
                  v34 = *(float32x4_t *)(a1->i64[0] + 16 * v28[3].u32[0]);
                  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgeq_f32(v61, vabsq_f32(v22))))) & 1) == 0
                    && a1[8].i32[1] * a1[8].i32[0])
                  {
                    v48 = (int32x4_t)vmulq_f32(v34, v34);
                    v48.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v48, 2), vadd_f32(*(float32x2_t *)v48.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v48.i8, 1))).u32[0];
                    v49 = vrsqrte_f32((float32x2_t)v48.u32[0]);
                    v50 = vmul_f32(v49, vrsqrts_f32((float32x2_t)v48.u32[0], vmul_f32(v49, v49)));
                    v51 = vmulq_n_f32(vnegq_f32(v34), vmul_f32(v50, vrsqrts_f32((float32x2_t)v48.u32[0], vmul_f32(v50, v50))).f32[0]);
                    v51.i32[3] = v22.i32[3];
                    v22 = v51;
                  }
                  v52 = vmulq_f32(v22, v22);
                  v53 = vmulq_f32(v34, v34);
                  v54 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v53, 2), vaddq_f32(v53, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v53.f32, 1))).f32[0])* sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v52, 2), vaddq_f32(v52, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v52.f32, 1))).f32[0]);
                  v55 = 0.0;
                  if (fabsf(v54) <= 0.000001)
                  {
                    v44 = 0.0;
                  }
                  else
                  {
                    v56 = vmulq_f32(v22, vnegq_f32(v34));
                    v44 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v56, 2), vaddq_f32(v56, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v56.f32, 1))).f32[0]/ v54;
                    if (v44 >= 0.6)
                      v55 = v44 * v44;
                  }
                  v47 = 0;
                  v34.i32[3] = 1.0;
                  v45 = v55 * 10.0;
                  v46 = 1.0;
LABEL_48:
                  v62 = v34;
                  v63 = v22;
                  if (a1[26].i8[0])
                  {
                    v16 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a1[28], v34.f32[0]), a1[29], *(float32x2_t *)v34.f32, 1), a1[30], v34, 2), a1[31], v34, 3);
                    v16.i32[3] = -1.0;
                    v17 = (int8x16_t)vmulq_f32(v16, a1[23]);
                    v18 = vaddv_f32(vadd_f32(*(float32x2_t *)v17.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL))) >= a1[27].f32[0];
                  }
                  else
                  {
                    v18 = 1;
                  }
                  v19 = 48 * v12;
                  sub_2393B06EC(a1[9].i64[1], a1[10].i64[0], a1[10].u32[2], a1[10].u32[3], a1[11].u32[0], a1[11].u32[1], (_OWORD *)(a1[32].i64[1] + v19 + 32), (float)(v11 * (float)v15), (float)(v11 * (float)v7));
                  *(float32x4_t *)(a1[32].i64[1] + v19) = v62;
                  *(float32x4_t *)(a1[32].i64[1] + v19 + 16) = v63;
                  v20 = a1[33].i64[0] + 20 * v12;
                  *(float *)v20 = v45;
                  *(float *)(v20 + 4) = v46;
                  *(_BYTE *)(v20 + 8) = v18;
                  *(float *)(v20 + 12) = v44;
                  *(_DWORD *)(v20 + 16) = v47;
                  ++v12;
                  ++v10;
                  v14 = a1[15].i32[0];
                  v15 = (v14 + v15);
                  if (v15 >= v9)
                    goto LABEL_14;
                  goto LABEL_19;
                }
              }
              else
              {
                if (*(_QWORD *)&v31 >= *(_QWORD *)&v23)
                  *(_QWORD *)&v31 %= *(_QWORD *)&v23;
                if (*(_QWORD *)&v31 != v26)
                  goto LABEL_40;
              }
              v28 = (int32x2_t *)*v28;
              if (!v28)
                goto LABEL_40;
            }
          }
        }
        v10 = 0;
LABEL_59:
        *(_DWORD *)(a1[33].i64[1] + 4 * v57) = v10;
      }
    }
  }
  else
  {
    if (qword_2569302D8 != -1)
      dispatch_once(&qword_2569302D8, &unk_250AD5DC0);
    v13 = qword_2569302D0;
    if (os_log_type_enabled((os_log_t)qword_2569302D0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v65 = "createPointCloudFromDenseDepthAndPointcloudBlock";
      v66 = 1026;
      v67 = 1079;
      _os_log_error_impl(&dword_239388000, v13, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create pointcloud from depth image and pointcloud - invalid pointcloud context.", buf, 0x12u);
    }
  }
}

uint64_t sub_2393B013C(uint64_t a1)
{
  BOOL v1;
  unsigned int v2;
  unsigned int v3;
  BOOL v4;
  float v5;
  float v6;
  BOOL v7;
  int v8;
  uint64_t v9;

  if (*(_DWORD *)(a1 + 60) * *(_DWORD *)(a1 + 56)
    && *(_DWORD *)(a1 + 92) * *(_DWORD *)(a1 + 88)
    && *(_DWORD *)(a1 + 112))
  {
    v1 = *(_DWORD *)(a1 + 116) == 0;
    if (!*(_QWORD *)(a1 + 152))
      goto LABEL_13;
  }
  else
  {
    v1 = 1;
    if (!*(_QWORD *)(a1 + 152))
      goto LABEL_13;
  }
  if (*(_QWORD *)(a1 + 160))
  {
    if (*(_DWORD *)(a1 + 168))
    {
      if (*(_DWORD *)(a1 + 172))
      {
        v2 = *(_DWORD *)(a1 + 176);
        if (v2)
        {
          v3 = *(_DWORD *)(a1 + 180);
          if (v3)
          {
            if (v2 >= *(_DWORD *)(a1 + 112))
            {
              v4 = v3 < *(_DWORD *)(a1 + 116);
              goto LABEL_14;
            }
          }
        }
      }
    }
  }
LABEL_13:
  v4 = 1;
LABEL_14:
  if (*(float *)(a1 + 184) > 0.0
    && *(float *)(a1 + 188) > 0.0
    && (v5 = *(float *)(a1 + 192), v5 >= 0.0)
    && v5 < (float)((float)*(unsigned int *)(a1 + 176) * 0.5)
    && (v6 = *(float *)(a1 + 196), v6 >= 0.0))
  {
    v7 = v6 >= (float)((float)*(unsigned int *)(a1 + 180) * 0.5);
    v8 = *(_DWORD *)(a1 + 224);
    if (!v8)
      goto LABEL_23;
  }
  else
  {
    v7 = 1;
    v8 = *(_DWORD *)(a1 + 224);
    if (!v8)
      goto LABEL_23;
  }
  v8 = *(_DWORD *)(a1 + 232);
  if (v8)
  {
    v8 = *(_DWORD *)(a1 + 236);
    if (v8)
      v8 = *(_DWORD *)(a1 + 240) != 0;
  }
LABEL_23:
  v9 = *(_QWORD *)(a1 + 520);
  if (v9)
  {
    v9 = *(_QWORD *)(a1 + 528);
    if (v9)
      LODWORD(v9) = *(_QWORD *)(a1 + 536) != 0;
  }
  if (v1 || v4 || v7)
    return 0;
  else
    return v8 & v9;
}

uint64_t sub_2393B06EC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, _OWORD *a7, double a8, double a9)
{
  double v9;
  double v10;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  BOOL v22;
  int v23;
  _BOOL4 v24;
  _BOOL4 v25;
  int32x4_t v26;
  unint64_t v27;
  int32x4_t v28;
  unsigned __int8 *v29;
  float32x2_t v30;
  float v31;
  float32_t v32;
  float v33;
  float32x2_t v34;
  float v38;
  float v39;
  float v40;
  char v41;
  char v42;
  unint64_t v43;
  unsigned __int8 *v44;
  float32x2_t v45;
  float v46;
  float32_t v47;
  float v48;
  float32x2_t v49;
  float v51;
  float v52;
  float v53;
  int32x4_t v54;
  int32x4_t v56;
  unsigned __int8 *v57;
  float32x2_t v58;
  float v59;
  float32_t v60;
  float v61;
  float32x2_t v62;
  float v64;
  float v65;
  float v66;
  char v67;
  unsigned __int8 *v68;
  float32x2_t v69;
  float v70;
  float32_t v71;
  float v72;
  float32x2_t v73;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  int32x4_t v84;
  float v85;
  int8x16_t v86;
  int32x4_t v87;
  int8x16_t v88;
  int32x4_t v89;
  int8x16_t v90;
  float v91;
  float32x2_t v92;
  __int128 v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v102;
  unsigned __int8 *v103;
  float32x2_t v104;
  float v105;
  float32_t v106;
  float v107;
  float32x2_t v108;
  float v110;
  float v111;

  v9 = floor(a8);
  v10 = floor(a9);
  if (v9 == a8 && v10 == a9)
  {
    v95 = (unint64_t)a8;
    v96 = (unint64_t)a9;
    if ((unint64_t)a8 < a5 && result != 0 && a2 != 0 && a3 != 0 && a4 != 0 && v96 < a6)
    {
      v102 = v95 + v96 * a3;
      v103 = (unsigned __int8 *)(a2 + (v95 & 0xFFFFFFFFFFFFFFFELL) + (v96 >> 1) * a4);
      LOBYTE(a8) = *(_BYTE *)(result + v102);
      v104.f32[0] = (float)LODWORD(a8);
      v105 = (float)(*v103 - 128);
      v106 = v104.f32[0] + (float)(v105 * -0.39176);
      v107 = v104.f32[0] + (float)(v105 * 2.0172);
      v104.f32[1] = v106;
      v108 = vdiv_f32(vmla_n_f32(v104, (float32x2_t)0xBF501EA43FCC4A9ALL, (float)(v103[1] - 128)), (float32x2_t)vdup_n_s32(0x437F0000u));
      __asm { FMOV            V3.2S, #1.0 }
      *(int8x8_t *)&v94 = vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(v108, _D3), (int8x8_t)_D3, (int8x8_t)v108), (int8x8_t)vcltz_f32(v108));
      v91 = v107 / 255.0;
      goto LABEL_94;
    }
  }
  else
  {
    v12 = (unint64_t)v9;
    v13 = vcvtpd_u64_f64(a8);
    v14 = (unint64_t)v9 - 1;
    if (a5 - 1 <= (unint64_t)v9)
      v15 = (unint64_t)v9;
    else
      v15 = v12 + 1;
    if (a5 - 1 > (unint64_t)v9)
      v14 = (unint64_t)v9;
    if (v13 == v12)
    {
      v13 = v15;
      v12 = v14;
    }
    v16 = (unint64_t)v10;
    v17 = vcvtpd_u64_f64(a9);
    if (a6 - 1 > (unint64_t)v10)
      v18 = (unint64_t)v10;
    else
      v18 = (unint64_t)v10 - 1;
    if (a6 - 1 <= (unint64_t)v10)
      v19 = (unint64_t)v10;
    else
      v19 = v16 + 1;
    if (v17 == v16)
    {
      v16 = v18;
      v17 = v19;
    }
    if (result)
      v20 = a2 == 0;
    else
      v20 = 1;
    v22 = v20 || a3 == 0 || a4 == 0;
    v23 = !v22;
    v24 = !v22 && v12 < a5;
    v25 = v16 < a6 && v24;
    v26 = 0uLL;
    v27 = v16 >> 1;
    v28 = 0uLL;
    if (v25)
    {
      v29 = (unsigned __int8 *)(a2 + (v12 & 0xFFFFFFFFFFFFFFFELL) + v27 * a4);
      v28.i8[0] = *(_BYTE *)(result + v12 + v16 * a3);
      v30.f32[0] = (float)v28.u32[0];
      v31 = (float)(*v29 - 128);
      v32 = v30.f32[0] + (float)(v31 * -0.39176);
      v33 = v30.f32[0] + (float)(v31 * 2.0172);
      v30.f32[1] = v32;
      v34 = vdiv_f32(vmla_n_f32(v30, (float32x2_t)0xBF501EA43FCC4A9ALL, (float)(v29[1] - 128)), (float32x2_t)vdup_n_s32(0x437F0000u));
      __asm { FMOV            V6.2S, #1.0 }
      *(int8x8_t *)v28.i8 = vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(v34, _D6), (int8x8_t)_D6, (int8x8_t)v34), (int8x8_t)vcltz_f32(v34));
      v38 = v33 / 255.0;
      v39 = 1.0;
      if (v38 <= 1.0)
        v39 = v38;
      _NF = v38 < 0.0;
      v40 = 0.0;
      if (!_NF)
        v40 = v39;
      *(float *)&v28.i32[2] = v40;
    }
    v41 = !v24;
    if (v17 >= a6)
      v42 = 1;
    else
      v42 = v41;
    v43 = v17 >> 1;
    if ((v42 & 1) == 0)
    {
      v44 = (unsigned __int8 *)(a2 + (v12 & 0xFFFFFFFFFFFFFFFELL) + v43 * a4);
      v26.i8[0] = *(_BYTE *)(result + v12 + v17 * a3);
      v45.f32[0] = (float)v26.u32[0];
      v46 = (float)(*v44 - 128);
      v47 = v45.f32[0] + (float)(v46 * -0.39176);
      v48 = v45.f32[0] + (float)(v46 * 2.0172);
      v45.f32[1] = v47;
      v49 = vdiv_f32(vmla_n_f32(v45, (float32x2_t)0xBF501EA43FCC4A9ALL, (float)(v44[1] - 128)), (float32x2_t)vdup_n_s32(0x437F0000u));
      __asm { FMOV            V6.2S, #1.0 }
      *(int8x8_t *)v26.i8 = vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(v49, _D6), (int8x8_t)_D6, (int8x8_t)v49), (int8x8_t)vcltz_f32(v49));
      v51 = v48 / 255.0;
      v52 = 1.0;
      if (v51 <= 1.0)
        v52 = v51;
      _NF = v51 < 0.0;
      v53 = 0.0;
      if (!_NF)
        v53 = v52;
      *(float *)&v26.i32[2] = v53;
    }
    if (v13 >= a5)
      v23 = 0;
    v54 = 0uLL;
    _CF = v23 != 1 || v16 >= a6;
    v56 = 0uLL;
    if (!_CF)
    {
      v57 = (unsigned __int8 *)(a2 + (v13 & 0xFFFFFFFFFFFFFFFELL) + v27 * a4);
      v56.i8[0] = *(_BYTE *)(result + v13 + v16 * a3);
      v58.f32[0] = (float)v56.u32[0];
      v59 = (float)(*v57 - 128);
      v60 = v58.f32[0] + (float)(v59 * -0.39176);
      v61 = v58.f32[0] + (float)(v59 * 2.0172);
      v58.f32[1] = v60;
      v62 = vdiv_f32(vmla_n_f32(v58, (float32x2_t)0xBF501EA43FCC4A9ALL, (float)(v57[1] - 128)), (float32x2_t)vdup_n_s32(0x437F0000u));
      __asm { FMOV            V16.2S, #1.0 }
      *(int8x8_t *)v56.i8 = vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(v62, _D16), (int8x8_t)_D16, (int8x8_t)v62), (int8x8_t)vcltz_f32(v62));
      v64 = v61 / 255.0;
      v65 = 1.0;
      if (v64 <= 1.0)
        v65 = v64;
      _NF = v64 < 0.0;
      v66 = 0.0;
      if (!_NF)
        v66 = v65;
      *(float *)&v56.i32[2] = v66;
    }
    v67 = v23 ^ 1;
    if (v17 >= a6)
      v67 = 1;
    if ((v67 & 1) == 0)
    {
      v68 = (unsigned __int8 *)(a2 + (v13 & 0xFFFFFFFFFFFFFFFELL) + v43 * a4);
      v54.i8[0] = *(_BYTE *)(result + v13 + v17 * a3);
      v69.f32[0] = (float)v54.u32[0];
      v70 = (float)(*v68 - 128);
      v71 = v69.f32[0] + (float)(v70 * -0.39176);
      v72 = v69.f32[0] + (float)(v70 * 2.0172);
      v69.f32[1] = v71;
      v73 = vdiv_f32(vmla_n_f32(v69, (float32x2_t)0xBF501EA43FCC4A9ALL, (float)(v68[1] - 128)), (float32x2_t)vdup_n_s32(0x437F0000u));
      __asm { FMOV            V16.2S, #1.0 }
      *(int8x8_t *)v54.i8 = vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(v73, _D16), (int8x8_t)_D16, (int8x8_t)v73), (int8x8_t)vcltz_f32(v73));
      v75 = v72 / 255.0;
      v76 = 1.0;
      if (v75 <= 1.0)
        v76 = v75;
      _NF = v75 < 0.0;
      v77 = 0.0;
      if (!_NF)
        v77 = v76;
      *(float *)&v54.i32[2] = v77;
    }
    if (v17 >= a6)
      v25 = 0;
    if (v13 < a5 && v25)
    {
      v78 = 1.0 / (float)((v17 - v16) * (v13 - v12));
      v79 = a8;
      v80 = (float)v13 - v79;
      v81 = v79 - (float)v12;
      v82 = a9;
      v83 = (float)v17 - v82;
      v84 = vzip1q_s32(vzip1q_s32(v28, v26), vzip1q_s32(v56, v54));
      v85 = v82 - (float)v16;
      v86 = (int8x16_t)vzip1q_s32(v84, (int32x4_t)vdupq_laneq_s64((int64x2_t)v84, 1));
      *(float32x2_t *)v86.i8 = vmla_n_f32(vmul_n_f32(*(float32x2_t *)v86.i8, v80), (float32x2_t)*(_OWORD *)&vextq_s8(v86, v86, 8uLL), v81);
      v87 = vzip1q_s32(vtrn2q_s32(v28, v26), vtrn2q_s32(v56, v54));
      v88 = (int8x16_t)vzip1q_s32(v87, (int32x4_t)vdupq_laneq_s64((int64x2_t)v87, 1));
      v89 = vzip1q_s32(vzip2q_s32(v28, v26), vzip2q_s32(v56, v54));
      *(float32x2_t *)v88.i8 = vmla_n_f32(vmul_n_f32(*(float32x2_t *)v88.i8, v80), (float32x2_t)*(_OWORD *)&vextq_s8(v88, v88, 8uLL), v81);
      v90 = (int8x16_t)vzip1q_s32(v89, (int32x4_t)vdupq_laneq_s64((int64x2_t)v89, 1));
      *(float32x2_t *)v90.i8 = vmla_n_f32(vmul_n_f32(*(float32x2_t *)v90.i8, v80), (float32x2_t)*(_OWORD *)&vextq_s8(v90, v90, 8uLL), v81);
      v91 = vmuls_lane_f32(v85, *(float32x2_t *)v90.i8, 1) + (float)((float)(v78 * *(float *)v90.i32) * v83);
      v92 = vmla_n_f32(vmul_n_f32((float32x2_t)vzip2_s32(*(int32x2_t *)v86.i8, *(int32x2_t *)v88.i8), v85), vmul_n_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v86.i8, *(int32x2_t *)v88.i8), v78), v83);
      __asm { FMOV            V3.2S, #1.0 }
      *(int8x8_t *)&v94 = vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(v92, _D3), (int8x8_t)_D3, (int8x8_t)v92), (int8x8_t)vcltz_f32(v92));
LABEL_94:
      if (v91 <= 1.0)
        v110 = v91;
      else
        v110 = 1.0;
      _NF = v91 < 0.0;
      v111 = 0.0;
      if (!_NF)
        v111 = v110;
      *((_QWORD *)&v94 + 1) = __PAIR64__(1.0, LODWORD(v111));
      *a7 = v94;
    }
  }
  return result;
}

uint64_t sub_2393B0C20(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  if (*(_BYTE *)(a1 + 416))
  {
    v2 = *(void **)(a1 + 384);
    if (v2)
    {
      *(_QWORD *)(a1 + 392) = v2;
      operator delete(v2);
    }
  }
  v3 = *(_QWORD **)(a1 + 24);
  if (v3)
  {
    do
    {
      v4 = (_QWORD *)*v3;
      operator delete(v3);
      v3 = v4;
    }
    while (v4);
  }
  v5 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v5)
    operator delete(v5);
  return a1;
}

uint64_t OCPointCloudCreateFromDenseDepth(__CVBuffer *a1, __CVBuffer *a2, __CVBuffer *a3, __CVBuffer *a4, int a5, _QWORD *a6, int64x2_t a7, int8x16_t a8, int64x2_t a9)
{
  uint64_t v15;
  NSObject *v16;
  float32x4_t v21[4];
  char v22;
  simd_float4 v23[4];
  char v24;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if ((sub_2393B0E3C(a1, a2, a3, a4, a5, (uint64_t)a6) & 1) != 0)
  {
    kdebug_trace();
    v23[0].i8[0] = 0;
    v24 = 0;
    v21[0].i8[0] = 0;
    v22 = 0;
    v15 = sub_2393B1388(0, 0, 0, a1, a2, a3, a4, a5, a7, a8, a9, 0.0, 0, v23, v21, a6);
    kdebug_trace();
  }
  else
  {
    if (qword_2569302D8 != -1)
      dispatch_once(&qword_2569302D8, &unk_250AD5DC0);
    v16 = qword_2569302D0;
    if (os_log_type_enabled((os_log_t)qword_2569302D0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v26 = "OCPointCloudCreateFromDenseDepth";
      v27 = 1026;
      v28 = 1598;
      _os_log_error_impl(&dword_239388000, v16, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create pointcloud - invalid input.", buf, 0x12u);
    }
    return 4294967294;
  }
  return v15;
}

uint64_t sub_2393B0E3C(CVPixelBufferRef pixelBuffer, __CVBuffer *a2, __CVBuffer *a3, __CVBuffer *a4, int a5, uint64_t a6)
{
  int v12;
  NSObject *v13;
  size_t Width;
  size_t Height;
  int v16;
  NSObject *v17;
  size_t v18;
  size_t v19;
  NSObject *v20;
  int v21;
  NSObject *v22;
  NSObject *v23;
  NSObject *v24;
  unsigned int v25;
  int v27;
  const char *v28;
  __int16 v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  if (pixelBuffer
    && CVPixelBufferGetWidth(pixelBuffer)
    && CVPixelBufferGetHeight(pixelBuffer)
    && CVPixelBufferGetPixelFormatType(pixelBuffer) == 1717855600)
  {
    v12 = 0;
    if (!a2)
      goto LABEL_17;
  }
  else
  {
    if (qword_2569302D8 != -1)
      dispatch_once(&qword_2569302D8, &unk_250AD5DC0);
    v13 = qword_2569302D0;
    if (os_log_type_enabled((os_log_t)qword_2569302D0, OS_LOG_TYPE_ERROR))
    {
      v27 = 136315394;
      v28 = "isValidInputForPointCloudFromDenseDepth";
      v29 = 1026;
      v30 = 1476;
      _os_log_error_impl(&dword_239388000, v13, OS_LOG_TYPE_ERROR, "%s:%{public}d Invalid depth image.", (uint8_t *)&v27, 0x12u);
      v12 = 1;
      if (!a2)
        goto LABEL_17;
    }
    else
    {
      v12 = 1;
      if (!a2)
        goto LABEL_17;
    }
  }
  Width = CVPixelBufferGetWidth(a2);
  if (Width == CVPixelBufferGetWidth(pixelBuffer))
  {
    Height = CVPixelBufferGetHeight(a2);
    if (Height == CVPixelBufferGetHeight(pixelBuffer) && CVPixelBufferGetPixelFormatType(a2) == 1717855600)
    {
      v16 = 0;
      if (!a3)
        goto LABEL_31;
      goto LABEL_22;
    }
  }
LABEL_17:
  if (qword_2569302D8 != -1)
    dispatch_once(&qword_2569302D8, &unk_250AD5DC0);
  v17 = qword_2569302D0;
  if (os_log_type_enabled((os_log_t)qword_2569302D0, OS_LOG_TYPE_ERROR))
  {
    v27 = 136315394;
    v28 = "isValidInputForPointCloudFromDenseDepth";
    v29 = 1026;
    v30 = 1484;
    _os_log_error_impl(&dword_239388000, v17, OS_LOG_TYPE_ERROR, "%s:%{public}d Invalid depth confidence image.", (uint8_t *)&v27, 0x12u);
  }
  v16 = 1;
  if (a3)
  {
LABEL_22:
    v18 = CVPixelBufferGetWidth(a3);
    if (v18 == CVPixelBufferGetWidth(pixelBuffer)
      && (v19 = CVPixelBufferGetHeight(a3), v19 == CVPixelBufferGetHeight(pixelBuffer))
      && CVPixelBufferGetPixelFormatType(a3) == 1380410945)
    {
      LODWORD(a3) = 0;
    }
    else
    {
      if (qword_2569302D8 != -1)
        dispatch_once(&qword_2569302D8, &unk_250AD5DC0);
      v20 = qword_2569302D0;
      if (os_log_type_enabled((os_log_t)qword_2569302D0, OS_LOG_TYPE_ERROR))
      {
        v27 = 136315394;
        v28 = "isValidInputForPointCloudFromDenseDepth";
        v29 = 1026;
        v30 = 1494;
        _os_log_error_impl(&dword_239388000, v20, OS_LOG_TYPE_ERROR, "%s:%{public}d Invalid normal image.", (uint8_t *)&v27, 0x12u);
      }
      LODWORD(a3) = 1;
    }
  }
LABEL_31:
  if (a4
    && CVPixelBufferGetWidth(a4)
    && CVPixelBufferGetHeight(a4)
    && (CVPixelBufferGetPixelFormatType(a4) == 875704422 || CVPixelBufferGetPixelFormatType(a4) == 875704438))
  {
    v21 = 0;
    if (a6)
      goto LABEL_46;
  }
  else
  {
    if (qword_2569302D8 != -1)
      dispatch_once(&qword_2569302D8, &unk_250AD5DC0);
    v22 = qword_2569302D0;
    if (os_log_type_enabled((os_log_t)qword_2569302D0, OS_LOG_TYPE_ERROR))
    {
      v27 = 136315394;
      v28 = "isValidInputForPointCloudFromDenseDepth";
      v29 = 1026;
      v30 = 1502;
      _os_log_error_impl(&dword_239388000, v22, OS_LOG_TYPE_ERROR, "%s:%{public}d Invalid color image.", (uint8_t *)&v27, 0x12u);
    }
    v21 = 1;
    if (a6)
      goto LABEL_46;
  }
  if (qword_2569302D8 != -1)
    dispatch_once(&qword_2569302D8, &unk_250AD5DC0);
  v23 = qword_2569302D0;
  if (os_log_type_enabled((os_log_t)qword_2569302D0, OS_LOG_TYPE_ERROR))
  {
    v27 = 136315394;
    v28 = "isValidInputForPointCloudFromDenseDepth";
    v29 = 1026;
    v30 = 1507;
    _os_log_error_impl(&dword_239388000, v23, OS_LOG_TYPE_ERROR, "%s:%{public}d Invalid input pointcloud.", (uint8_t *)&v27, 0x12u);
    if (a5)
      goto LABEL_51;
    goto LABEL_47;
  }
LABEL_46:
  if (a5)
    goto LABEL_51;
LABEL_47:
  if (qword_2569302D8 != -1)
    dispatch_once(&qword_2569302D8, &unk_250AD5DC0);
  v24 = qword_2569302D0;
  if (os_log_type_enabled((os_log_t)qword_2569302D0, OS_LOG_TYPE_ERROR))
  {
    v27 = 136315394;
    v28 = "isValidInputForPointCloudFromDenseDepth";
    v29 = 1026;
    v30 = 1512;
    _os_log_error_impl(&dword_239388000, v24, OS_LOG_TYPE_ERROR, "%s:%{public}d Invalid step size.", (uint8_t *)&v27, 0x12u);
  }
LABEL_51:
  v25 = (v12 | v16 | a3 | v21) ^ 1;
  if (!a5)
    v25 = 0;
  if (a6)
    return v25;
  else
    return 0;
}

uint64_t sub_2393B1388(unsigned int a1, uint64_t a2, uint64_t a3, CVPixelBufferRef pixelBuffer, __CVBuffer *a5, __CVBuffer *a6, __CVBuffer *a7, int a8, int64x2_t a9, int8x16_t a10, int64x2_t a11, float a12, uint64_t a13, simd_float4 *a14, float32x4_t *a15, _QWORD *a16)
{
  int64_t v16;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  CGPoint origin;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *i;
  __int128 v46;
  uint64_t v47;
  float32x4_t v48;
  char x_low;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  char *v56;
  simd_float4 v57;
  simd_float4 v58;
  int32x2_t v59;
  uint64_t v60;
  float32x2_t v61;
  float64x2_t v62;
  unint64_t v63;
  unint64_t v64;
  uint8x8_t v65;
  int32x2_t **v66;
  int32x2_t *v67;
  uint32x2_t v68;
  unint64_t v69;
  uint32x2_t v70;
  int32x2_t v71;
  _QWORD *v72;
  float v73;
  _BOOL8 v74;
  unint64_t v75;
  unint64_t v76;
  size_t prime;
  void *v78;
  CGFloat v79;
  uint64_t v80;
  _QWORD **v81;
  size_t v82;
  size_t v83;
  size_t v84;
  _QWORD *j;
  size_t v86;
  uint64_t v87;
  unint64_t v88;
  uint8x8_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  size_t v93;
  CGFloat height;
  _QWORD *v95;
  unint64_t v96;
  CGFloat v97;
  __CVBuffer *v98;
  void *v99;
  char *v100;
  unsigned int Width;
  unsigned int v102;
  size_t BytesPerRow;
  void *BaseAddress;
  float32x4_t v105;
  simd_float4 v106;
  simd_float4 v107;
  uint64x2_t v108;
  float64x2_t v109;
  float32x4_t *v110;
  uint64_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x2_t v120;
  unsigned __int32 v121;
  float32x4_t *v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  uint32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  uint32x4_t v131;
  float32x4_t v132;
  uint32x2_t v133;
  unsigned __int8 v134;
  int32x4_t v135;
  uint64x2_t v136;
  CGFloat v137;
  void *v138;
  float64x2_t v139;
  CGFloat v140;
  CGFloat x;
  CGFloat v142;
  float64x2_t v143;
  double MinX;
  double MinY;
  double MaxX;
  double v147;
  double MaxY;
  double v149;
  double v150;
  double v151;
  float64x2_t v152;
  double v153;
  uint64_t v154;
  BOOL v155;
  void *v156;
  size_t v157;
  unint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  unint64_t v162;
  char *v163;
  int64_t v164;
  char *v165;
  unint64_t v166;
  char *v167;
  void *v168;
  char *v169;
  float64x2_t v170;
  size_t v171;
  void *v172;
  int32x2_t *v173;
  unsigned int v174;
  float32x2_t v175;
  NSObject *v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  int32x4_t *v180;
  int32x4_t v181;
  uint64_t v182;
  int32x4_t v183;
  uint64_t v184;
  int *v185;
  int v186;
  _QWORD *v187;
  uint64_t v188;
  uint64_t v189;
  unsigned int k;
  __int128 v191;
  char *v192;
  unsigned int v193;
  __int128 *v194;
  uint64_t v195;
  unint64_t v196;
  _OWORD *v197;
  __int128 v198;
  __int128 v199;
  _OWORD *v200;
  _OWORD *v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  char *v205;
  char *v206;
  __int128 v207;
  __int128 v208;
  char *v209;
  __int128 v210;
  __int128 v211;
  __int128 *v212;
  unint64_t v213;
  char *v214;
  _BYTE *v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  char *v219;
  __int128 v220;
  char *v221;
  char *v222;
  __int128 v223;
  unint64_t m;
  __int128 v225;
  char *v226;
  __int128 *v227;
  unint64_t v228;
  _OWORD *v229;
  __int128 v230;
  __int128 v231;
  _OWORD *v232;
  _OWORD *v233;
  unint64_t v234;
  unint64_t v235;
  unint64_t v236;
  char *v237;
  char *v238;
  __int128 v239;
  __int128 v240;
  char *v241;
  __int128 v242;
  __int128 v243;
  uint64_t v244;
  unint64_t v245;
  char *v246;
  _BYTE *v247;
  unint64_t v248;
  unint64_t v249;
  unint64_t v250;
  char *v251;
  __int128 v252;
  char *v253;
  char *v254;
  __int128 v255;
  uint64_t v256;
  NSObject *v257;
  NSObject *v258;
  _QWORD *v259;
  _QWORD *v260;
  CGFloat v261;
  float v263;
  float64x2_t v264;
  uint64_t v265;
  uint64_t v266;
  int32x2_t v267;
  uint32x2_t v268;
  uint64_t v269;
  CGPoint v270;
  CGPoint v271;
  float32x4_t v272;
  float32x4_t v273;
  int8x16_t v274;
  BOOL v275;
  float v276;
  int8x8_t v278;
  int32x4_t v279;
  float32x2_t v280;
  float32x2_t v281;
  float32x4_t v282;
  float32x4_t v283;
  float32x4_t v284;
  float v285;
  float v286;
  float32x4_t v287;
  __int128 v288;
  char *v289;
  int8x16_t v290;
  float32x4_t v291;
  float32x4_t v292;
  char v293;
  float32x4_t v294;
  float32x4_t v295;
  float32x4_t v296;
  float32x4_t v297;
  int v298;
  int v299;
  int v301;
  float32x4_t v302;
  float64x2_t v303;
  int v304;
  float32x2_t v305;
  float64x2_t v306;
  char *__src;
  __CVBuffer *v308;
  __CVBuffer *v309;
  void *v310;
  void *v311;
  void *v312;
  void *v313;
  CGFloat v314;
  int8x16_t v315;
  float64x2_t v316;
  char *v317;
  void *v318;
  float32x4_t v320;
  float64x2_t v321;
  float32x4_t v323;
  float64x2_t v324;
  float32x4_t v326;
  float64x2_t v327;
  float32x4_t v329;
  float64x2_t v330;
  float v331;
  __CVBuffer *pixelBuffera;
  int32x2_t v334;
  float64x2_t v335;
  float32x4_t v336;
  CGRect rect;
  void *v338[2];
  __int128 v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  __int128 v346;
  __int128 v347;
  _OWORD v348[2];
  __int128 v349;
  __int128 v350;
  int v351;
  char v352;
  uint64_t v353;
  __int32 v354;
  __int8 v355;
  __int128 v356;
  float32x4_t v357;
  CGSize v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  float32x4_t v362;
  void *__p;
  char *v364;
  char *v365;
  unsigned __int8 v366;
  float v367;
  simd_float4 v368;
  simd_float4 v369;
  simd_float4 v370;
  simd_float4 v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  unsigned int v375;
  simd_float4 v376;
  simd_float4 v377;
  simd_float4 v378;
  simd_float4 v379;
  CGSize v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  CGSize size;
  __int128 v385;
  __int128 v386;
  __int128 v387;
  _BYTE buf[32];
  float64x2_t v389;
  float64x2_t v390;
  float64x2_t v391;
  float64x2_t v392;
  float64x2_t v393;
  float64x2_t v394;
  uint64_t v395;
  simd_float4x4 v396;
  simd_float4x4 v397;
  CGRect v398;
  CGRect v399;
  CGRect v400;
  CGRect v401;
  CGRect v402;

  v395 = *MEMORY[0x24BDAC8D0];
  HIDWORD(v23) = 1023410176;
  v24 = vcvtps_u32_f32((float)CVPixelBufferGetWidth(pixelBuffer) * 0.03125);
  pixelBuffera = pixelBuffer;
  v25 = vcvtps_u32_f32((float)CVPixelBufferGetHeight(pixelBuffer) * 0.03125) * v24;
  v26 = 20;
  if ((_DWORD)v25)
  {
    v312 = operator new(49152 * v25);
    bzero(v312, 48 * ((49152 * v25 - 48) / 0x30uLL) + 48);
    v318 = operator new(20480 * v25);
    bzero(v318, 20 * ((20480 * v25 - 20) / 0x14uLL) + 20);
    v16 = 4 * v25;
    v311 = operator new(4 * v25);
    bzero(v311, 4 * v25);
  }
  else
  {
    v311 = 0;
    v312 = 0;
    v318 = 0;
  }
  v314 = *(double *)&a2;
  v308 = a5;
  v309 = a6;
  v27 = a1;
  v28 = a1;
  v299 = a8;
  if (a1)
  {
    v29 = operator new(48 * a1);
    bzero(v29, 48 * ((48 * (unint64_t)a1 - 48) / 0x30) + 48);
    v16 = 20 * a1;
    v310 = operator new(v16);
    bzero(v310, 20 * ((v16 - 20) / 0x14uLL) + 20);
  }
  else
  {
    v29 = 0;
    v310 = 0;
  }
  v30 = a13;
  v313 = v29;
  if (a13)
  {
    v31 = *(_QWORD *)(a13 + 96);
    v32 = *(unsigned int *)(a13 + 104);
    v33 = *(_OWORD *)(a13 + 16);
    rect.size = *(CGSize *)a13;
    *(_OWORD *)v338 = v33;
    v34 = *(_OWORD *)(a13 + 48);
    v339 = *(_OWORD *)(a13 + 32);
    v340 = v34;
    origin = *(CGPoint *)(a13 + 64);
    v288 = *(_OWORD *)(a13 + 80);
    if ((_DWORD)v32)
    {
      v36 = 0;
      v37 = 0;
      v38 = 0;
      v39 = 0;
      rect.origin = *(CGPoint *)(a13 + 64);
      do
      {
        if (v38 < v36)
        {
          *(_OWORD *)v38 = *(_OWORD *)(v31 + 16 * v39);
          v38 += 16;
        }
        else
        {
          v40 = (v38 - v37) >> 4;
          v41 = v40 + 1;
          if ((unint64_t)(v40 + 1) >> 60)
            abort();
          if ((v36 - v37) >> 3 > v41)
            v41 = (v36 - v37) >> 3;
          if ((unint64_t)(v36 - v37) >= 0x7FFFFFFFFFFFFFF0)
            v42 = 0xFFFFFFFFFFFFFFFLL;
          else
            v42 = v41;
          if (v42)
          {
            if (v42 >> 60)
              sub_23938C4B8();
            v43 = (char *)operator new(16 * v42);
            origin = rect.origin;
          }
          else
          {
            v43 = 0;
          }
          v44 = &v43[16 * v40];
          *(_OWORD *)v44 = *(_OWORD *)(v31 + 16 * v39);
          for (i = v44 + 16; v38 != v37; v44 -= 16)
          {
            v46 = *((_OWORD *)v38 - 1);
            v38 -= 16;
            *((_OWORD *)v44 - 1) = v46;
          }
          v36 = &v43[16 * v42];
          if (v37)
          {
            operator delete(v37);
            origin = rect.origin;
          }
          v37 = v44;
          v38 = i;
        }
        ++v39;
      }
      while (v39 != v32);
      v47 = a13;
      v28 = a1;
      v48 = *(float32x4_t *)(a13 + 64);
      v27 = a1;
    }
    else
    {
      v38 = 0;
      v37 = 0;
      v48 = *(float32x4_t *)(a13 + 64);
      v47 = a13;
    }
    v50 = *(float32x4_t *)(v47 + 16);
    v51 = *(float32x4_t *)(v47 + 32);
    v52 = *(float32x4_t *)(v47 + 48);
    v53 = vmlaq_f32(vmlaq_f32(vaddq_f32(v50, vmulq_f32(*(float32x4_t *)v47, (float32x4_t)0)), (float32x4_t)0, v51), (float32x4_t)0, v52);
    v54 = vmulq_f32(v53, vaddq_f32(v52, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v47, v48.f32[0]), v50, *(float32x2_t *)v48.f32, 1), v51, v48, 2)));
    v55 = v53;
    v55.i32[3] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v54, 2), vaddq_f32(v54, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v54.f32, 1))).u32[0];
    v291 = v53;
    v292 = v55;
    x_low = LOBYTE(origin.x);
    v290 = vextq_s8((int8x16_t)origin, (int8x16_t)rect.size, 1uLL);
    size = rect.size;
    v385 = *(_OWORD *)v338;
    v386 = v339;
    v387 = v340;
    v380 = rect.size;
    v381 = *(_OWORD *)v338;
    v382 = v339;
    v383 = v340;
    __src = v37;
    v16 = v38 - v37;
    if (v38 == v37)
    {
      v26 = 0;
      v289 = 0;
      v298 = 1;
      v30 = a13;
    }
    else
    {
      if (v16 < 0)
        abort();
      v56 = (char *)operator new(v38 - v37);
      v30 = a13;
      v26 = (uint64_t)v56;
      v289 = &v56[16 * (v16 >> 4)];
      memcpy(v56, __src, v16);
      v298 = 1;
    }
  }
  else
  {
    v298 = 0;
    x_low = 0;
  }
  v293 = x_low;
  v317 = (char *)v26;
  v57 = a14[1];
  v376 = *a14;
  v377 = v57;
  v58 = a14[3];
  v378 = a14[2];
  v379 = v58;
  v304 = a14[4].u8[0];
  v294 = *a15;
  v295 = a15[1];
  v296 = a15[3];
  v297 = a15[2];
  v301 = a15[4].u8[0];
  *(_QWORD *)&v339 = 0;
  rect.size = 0u;
  *(_OWORD *)v338 = 0u;
  DWORD2(v339) = 1065353216;
  v352 = 0;
  v366 = 0;
  v367 = 0.0;
  v340 = 0u;
  v341 = 0u;
  v342 = 0u;
  v343 = 0u;
  v344 = 0u;
  v345 = 0u;
  v346 = 0u;
  v347 = 0u;
  memset(v348, 0, sizeof(v348));
  v349 = 0u;
  v350 = 0u;
  v351 = 0;
  v375 = 0;
  v373 = 0u;
  v374 = 0u;
  v371 = 0u;
  v372 = 0u;
  v369 = 0u;
  v370 = 0u;
  v368 = 0u;
  LODWORD(v344) = CVPixelBufferGetWidth(pixelBuffera);
  DWORD1(v344) = CVPixelBufferGetHeight(pixelBuffera);
  LODWORD(v348[0]) = CVPixelBufferGetWidth(a7);
  *(float *)v59.i32 = (float)LODWORD(v348[0]) / (float)v344;
  v334 = v59;
  if (v27)
  {
    v60 = 0;
    v61 = (float32x2_t)vdup_lane_s32(v59, 0);
    while (1)
    {
      v62 = *(float64x2_t *)(a3 + 16 * v60);
      if (v62.f64[0] < 0.0 || v62.f64[1] < 0.0)
        goto LABEL_40;
      *(uint32x2_t *)&rect.origin.x = vcvt_u32_f32(vrnda_f32(vdiv_f32(vcvt_f32_f64(v62), v61)));
      v63 = HIDWORD(rect.origin.x) | ((unint64_t)LODWORD(rect.origin.x) << 32);
      v64 = (unint64_t)v338[0];
      if (v338[0])
      {
        v65 = (uint8x8_t)vcnt_s8((int8x8_t)v338[0]);
        v65.i16[0] = vaddlv_u8(v65);
        if (v65.u32[0] > 1uLL)
        {
          v16 = HIDWORD(rect.origin.x) | ((unint64_t)LODWORD(rect.origin.x) << 32);
          if ((void *)v63 >= v338[0])
            v16 = v63 % (unint64_t)v338[0];
        }
        else
        {
          v16 = v63 & ((unint64_t)v338[0] - 1);
        }
        v66 = *(int32x2_t ***)(*(_QWORD *)&rect.size.height + 8 * v16);
        if (v66)
        {
          v67 = *v66;
          if (v67)
          {
            if (v65.u32[0] < 2uLL)
            {
              while (1)
              {
                v71 = v67[1];
                if (*(_QWORD *)&v71 == v63)
                {
                  v70 = (uint32x2_t)vceq_s32(v67[2], *(int32x2_t *)&rect.origin.x);
                  if ((vpmin_u32(v70, v70).u32[0] & 0x80000000) != 0)
                    goto LABEL_40;
                }
                else if ((*(_QWORD *)&v71 & ((uint64_t)v338[0] - 1)) != v16)
                {
                  goto LABEL_63;
                }
                v67 = (int32x2_t *)*v67;
                if (!v67)
                  goto LABEL_63;
              }
            }
            do
            {
              v69 = (unint64_t)v67[1];
              if (v69 == v63)
              {
                v68 = (uint32x2_t)vceq_s32(v67[2], *(int32x2_t *)&rect.origin.x);
                if ((vpmin_u32(v68, v68).u32[0] & 0x80000000) != 0)
                  goto LABEL_40;
              }
              else
              {
                if ((void *)v69 >= v338[0])
                  v69 %= (unint64_t)v338[0];
                if (v69 != v16)
                  break;
              }
              v67 = (int32x2_t *)*v67;
            }
            while (v67);
          }
        }
      }
LABEL_63:
      v72 = operator new(0x20uLL);
      *v72 = 0;
      v72[1] = v63;
      v72[2] = *(_QWORD *)&rect.origin.x;
      v72[3] = v60;
      v73 = (float)(unint64_t)(v339 + 1);
      if (!v64 || (float)(*((float *)&v339 + 2) * (float)v64) < v73)
        break;
LABEL_113:
      height = rect.size.height;
      v95 = *(_QWORD **)(*(_QWORD *)&rect.size.height + 8 * v16);
      if (v95)
      {
        *v72 = *v95;
      }
      else
      {
        *v72 = v338[1];
        v338[1] = v72;
        *(_QWORD *)(*(_QWORD *)&height + 8 * v16) = &v338[1];
        if (!*v72)
          goto LABEL_39;
        v96 = *(_QWORD *)(*v72 + 8);
        if ((v64 & (v64 - 1)) != 0)
        {
          if (v96 >= v64)
            v96 %= v64;
        }
        else
        {
          v96 &= v64 - 1;
        }
        v95 = (_QWORD *)(*(_QWORD *)&rect.size.height + 8 * v96);
      }
      *v95 = v72;
LABEL_39:
      *(_QWORD *)&v339 = v339 + 1;
LABEL_40:
      if (++v60 >= v28)
        goto LABEL_129;
    }
    v74 = (v64 & (v64 - 1)) != 0;
    if (v64 < 3)
      v74 = 1;
    v75 = v74 | (2 * v64);
    v76 = vcvtps_u32_f32(v73 / *((float *)&v339 + 2));
    if (v75 <= v76)
      prime = v76;
    else
      prime = v75;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v64 = (unint64_t)v338[0];
    }
    if (prime <= v64)
    {
      if (prime >= v64)
        goto LABEL_100;
      v88 = vcvtps_u32_f32((float)(unint64_t)v339 / *((float *)&v339 + 2));
      if (v64 < 3 || (v89 = (uint8x8_t)vcnt_s8((int8x8_t)v64), v89.i16[0] = vaddlv_u8(v89), v89.u32[0] > 1uLL))
      {
        v88 = std::__next_prime(v88);
      }
      else
      {
        v90 = 1 << -(char)__clz(v88 - 1);
        if (v88 >= 2)
          v88 = v90;
      }
      if (prime <= v88)
        prime = v88;
      if (prime >= v64)
      {
        v64 = (unint64_t)v338[0];
LABEL_100:
        if ((v64 & (v64 - 1)) != 0)
        {
          if (v63 >= v64)
            v16 = v63 % v64;
          else
            v16 = HIDWORD(rect.origin.x) | ((unint64_t)LODWORD(rect.origin.x) << 32);
        }
        else
        {
          v16 = (v64 - 1) & v63;
        }
        goto LABEL_113;
      }
      if (!prime)
      {
        v97 = rect.size.height;
        rect.size.height = 0.0;
        if (v97 != 0.0)
          operator delete(*(void **)&v97);
        v64 = 0;
        v338[0] = 0;
        goto LABEL_100;
      }
    }
    if (prime >> 61)
      sub_23938C4B8();
    v78 = operator new(8 * prime);
    v79 = rect.size.height;
    *(_QWORD *)&rect.size.height = v78;
    if (v79 != 0.0)
      operator delete(*(void **)&v79);
    v80 = 0;
    v338[0] = (void *)prime;
    do
      *(_QWORD *)(*(_QWORD *)&rect.size.height + 8 * v80++) = 0;
    while (prime != v80);
    v81 = (_QWORD **)v338[1];
    if (!v338[1])
    {
LABEL_99:
      v64 = prime;
      goto LABEL_100;
    }
    v82 = *((_QWORD *)v338[1] + 1);
    v83 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v84 = v82 & v83;
      *(_QWORD *)(*(_QWORD *)&rect.size.height + 8 * v84) = &v338[1];
      for (j = *v81; *v81; j = *v81)
      {
        v86 = j[1] & v83;
        if (v86 == v84)
        {
          v81 = (_QWORD **)j;
        }
        else if (*(_QWORD *)(*(_QWORD *)&rect.size.height + 8 * v86))
        {
          *v81 = (_QWORD *)*j;
          v87 = 8 * v86;
          *j = **(_QWORD **)(*(_QWORD *)&rect.size.height + v87);
          **(_QWORD **)(*(_QWORD *)&rect.size.height + v87) = j;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)&rect.size.height + 8 * v86) = v81;
          v81 = (_QWORD **)j;
          v84 = v86;
        }
      }
      goto LABEL_99;
    }
    if (v82 >= prime)
      v82 %= prime;
    *(_QWORD *)(*(_QWORD *)&rect.size.height + 8 * v82) = &v338[1];
    v91 = *v81;
    if (!*v81)
      goto LABEL_99;
    while (1)
    {
      v93 = v91[1];
      if (v93 >= prime)
        v93 %= prime;
      if (v93 != v82)
      {
        if (!*(_QWORD *)(*(_QWORD *)&rect.size.height + 8 * v93))
        {
          *(_QWORD *)(*(_QWORD *)&rect.size.height + 8 * v93) = v81;
          goto LABEL_104;
        }
        *v81 = (_QWORD *)*v91;
        v92 = 8 * v93;
        *v91 = **(_QWORD **)(*(_QWORD *)&rect.size.height + v92);
        **(_QWORD **)(*(_QWORD *)&rect.size.height + v92) = v91;
        v91 = v81;
      }
      v93 = v82;
LABEL_104:
      v81 = (_QWORD **)v91;
      v91 = (_QWORD *)*v91;
      v82 = v93;
      if (!v91)
        goto LABEL_99;
    }
  }
LABEL_129:
  rect.size.width = v314;
  v98 = pixelBuffera;
  v100 = v317;
  v99 = v318;
  CVPixelBufferLockBaseAddress(pixelBuffera, 1uLL);
  CVPixelBufferLockBaseAddress(v308, 1uLL);
  CVPixelBufferLockBaseAddress(v309, 1uLL);
  CVPixelBufferLockBaseAddress(a7, 1uLL);
  cva::imageViewFromPixelBuffer<float>();
  v340 = *(_OWORD *)buf;
  v341 = *(_OWORD *)&buf[16];
  cva::imageViewFromPixelBuffer<float>();
  v342 = *(_OWORD *)buf;
  v343 = *(_OWORD *)&buf[16];
  if (v309)
  {
    Width = CVPixelBufferGetWidth(v309);
    v102 = CVPixelBufferGetHeight(v309);
    BytesPerRow = CVPixelBufferGetBytesPerRow(v309);
    BaseAddress = CVPixelBufferGetBaseAddress(v309);
    *((_QWORD *)&v344 + 1) = 0;
    *(_QWORD *)&v345 = Width | ((unint64_t)v102 << 32);
    *((_QWORD *)&v345 + 1) = (BytesPerRow << 32) | 0x10;
    *(_QWORD *)&v346 = BaseAddress;
  }
  *((_QWORD *)&v346 + 1) = CVPixelBufferGetBaseAddressOfPlane(a7, 0);
  *(_QWORD *)&v347 = CVPixelBufferGetBaseAddressOfPlane(a7, 1uLL);
  DWORD2(v347) = CVPixelBufferGetBytesPerRowOfPlane(a7, 0);
  HIDWORD(v347) = CVPixelBufferGetBytesPerRowOfPlane(a7, 1uLL);
  DWORD1(v348[0]) = CVPixelBufferGetHeight(a7);
  v105 = (float32x4_t)vzip1q_s64(a9, a11);
  v105.i32[1] = a10.i32[1];
  v315 = (int8x16_t)vdivq_f32(v105, (float32x4_t)vdupq_lane_s32(v334, 0));
  *(int8x16_t *)((char *)v348 + 8) = v315;
  v106 = *(simd_float4 *)(MEMORY[0x24BDAEE00] + 16);
  v368 = *(simd_float4 *)MEMORY[0x24BDAEE00];
  v369 = v106;
  v107 = *(simd_float4 *)(MEMORY[0x24BDAEE00] + 48);
  v370 = *(simd_float4 *)(MEMORY[0x24BDAEE00] + 32);
  v371 = v107;
  if (!v304)
  {
    v136.i64[0] = v344;
    v136.i64[1] = DWORD1(v344);
    v109 = vcvtq_f64_u64(v136);
    goto LABEL_146;
  }
  v368 = v376;
  v369 = v377;
  v370 = v378;
  v371 = v379;
  v108.i64[0] = v344;
  v108.i64[1] = DWORD1(v344);
  v109 = vcvtq_f64_u64(v108);
  if (!v301)
  {
LABEL_146:
    rect.origin.x = 0.0;
    v137 = 0.0;
    v138 = v313;
    goto LABEL_149;
  }
  v335 = v109;
  v110 = (float32x4_t *)operator new(0x80uLL);
  v111 = 0;
  v112.i64[0] = 0xBF000000BF000000;
  v112.i64[1] = 0xBF000000BF000000;
  v113 = vmulq_f32(v294, v112);
  v114 = vmlaq_f32(v113, v112, v295);
  v115.i64[0] = 0x3F0000003F000000;
  v115.i64[1] = 0x3F0000003F000000;
  v116 = vmulq_f32(v294, v115);
  v117 = vmlaq_f32(v116, v112, v295);
  *v110 = vaddq_f32(v296, vmlaq_f32(v114, v112, v297));
  v110[1] = vaddq_f32(v296, vmlaq_f32(v117, v112, v297));
  v110[2] = vaddq_f32(v296, vmlaq_f32(v117, v115, v297));
  v110[3] = vaddq_f32(v296, vmlaq_f32(v114, v115, v297));
  v118 = vmlaq_f32(v113, v115, v295);
  v119 = vmlaq_f32(v116, v115, v295);
  v110[4] = vaddq_f32(v296, vmlaq_f32(v118, v112, v297));
  v110[5] = vaddq_f32(v296, vmlaq_f32(v119, v112, v297));
  v110[6] = vaddq_f32(v296, vmlaq_f32(v119, v115, v297));
  v110[7] = vaddq_f32(v296, vmlaq_f32(v118, v115, v297));
  v120 = (float32x2_t)vdup_n_s32(0x38D1B717u);
  *(int8x8_t *)v112.f32 = vand_s8((int8x8_t)vcge_f32(v120, vabs_f32(vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(a10, a10, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a11, (int8x16_t)a11, 8uLL)), (float32x2_t)0xBF80000080000000))), (int8x8_t)vcge_f32(v120, vabs_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a9, (int8x16_t)a9, 4uLL))));
  v121 = vpmin_u32(*(uint32x2_t *)v112.f32, *(uint32x2_t *)v112.f32).u32[0];
  v305 = (float32x2_t)vextq_s8(v315, v315, 8uLL).u64[0];
  v122 = (float32x4_t *)MEMORY[0x24BDAEDF8];
  v123 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
  v302 = v123;
  while ((v121 & 0x80000000) != 0)
  {
    v124 = v122[1];
    v125 = v122[2];
    v126 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v123, vabdq_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32((float32x4_t)v368, *(float32x2_t *)v368.f32, 1), (float32x4_t)v369, *(float32x2_t *)v369.f32, 1), (float32x4_t)v370, *(float32x2_t *)v370.f32, 1), v124)), (int8x16_t)vcgeq_f32(v123, vabdq_f32(vmlaq_n_f32(vmlaq_n_f32(
                                              vmulq_n_f32((float32x4_t)v368, v368.f32[0]),
                                              (float32x4_t)v369,
                                              v369.f32[0]),
                                            (float32x4_t)v370,
                                            v370.f32[0]),
                                          *v122))),
                         (int8x16_t)vcgeq_f32(v123, vabdq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32((float32x4_t)v368, (float32x4_t)v368, 2), (float32x4_t)v369, (float32x4_t)v369, 2), (float32x4_t)v370, (float32x4_t)v370, 2), v125)));
    v126.i32[3] = v126.i32[2];
    if ((vminvq_u32(v126) & 0x80000000) == 0)
      break;
    v127 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v369, 2);
    v128 = (float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)v368, (int32x4_t)v370), (int32x4_t)v127);
    v129 = (float32x4_t)vtrn2q_s32((int32x4_t)v368, (int32x4_t)v369);
    v129.i32[2] = v370.i32[1];
    v130 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)v368, (int32x4_t)v370), (int32x4_t)v369);
    v131 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v123, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v130, v369.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v369.f32, 1), v129), v127, v128), v124)), (int8x16_t)vcgeq_f32(v123, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v130, v368.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v368.f32, 1),
                                              v129),
                                            (float32x4_t)vdupq_laneq_s32((int32x4_t)v368, 2),
                                            v128),
                                          *v122))),
                         (int8x16_t)vcgeq_f32(v123, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v130, v370.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v370.f32, 1), v129), (float32x4_t)vdupq_laneq_s32((int32x4_t)v370, 2), v128), v125)));
    v131.i32[3] = v131.i32[2];
    if ((vminvq_u32(v131) & 0x80000000) == 0)
      break;
    v132 = vmulq_f32((float32x4_t)v368, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v370, (int8x16_t)v370, 0xCuLL), (int8x16_t)v370, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v369, (int32x4_t)v369), (int8x16_t)v369, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v370, (int32x4_t)v370), (int8x16_t)v370, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v369, (int8x16_t)v369, 0xCuLL), (int8x16_t)v369, 8uLL)));
    if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v132, 2), vaddq_f32(v132, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v132.f32, 1))).f32[0]+ -1.0) > 0.000011)break;
    v133 = (uint32x2_t)vand_s8((int8x8_t)vcge_f32(v120, vabs_f32(vadd_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v370, (int8x16_t)v370, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v371, (int8x16_t)v371, 8uLL)), (float32x2_t)0xBF80000080000000))), (int8x8_t)vcge_f32(v120, vabs_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v368,
                                                                                      (int8x16_t)v368,
                                                                                      8uLL),
                                                             (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v369, (int8x16_t)v369, 8uLL)))));
    if ((vpmin_u32(v133, v133).u32[0] & 0x80000000) == 0)
      break;
    rect.origin = (CGPoint)v110[v111];
    v134 = atomic_load((unsigned __int8 *)&qword_256930450);
    if ((v134 & 1) == 0 && __cxa_guard_acquire(&qword_256930450))
    {
      *(simd_float4x4 *)zmmword_256930410 = __invert_f4(*(simd_float4x4 *)zmmword_2393FA190);
      __cxa_guard_release(&qword_256930450);
    }
    v320 = *(float32x4_t *)zmmword_256930410;
    v323 = *(float32x4_t *)&zmmword_256930410[16];
    v326 = *(float32x4_t *)&zmmword_256930410[32];
    v329 = *(float32x4_t *)&zmmword_256930410[48];
    v396.columns[2] = v370;
    v396.columns[3] = v371;
    v396.columns[0] = v368;
    v396.columns[1] = v369;
    v397 = __invert_f4(v396);
    v135 = (int32x4_t)vaddq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v320, v397.columns[3].f32[0]), v323, *(float32x2_t *)v397.columns[3].f32, 1), v326, (float32x4_t)v397.columns[3], 2), v329, (float32x4_t)v397.columns[3], 3), vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(
                                    vmulq_n_f32(v320, v397.columns[0].f32[0]),
                                    v323,
                                    *(float32x2_t *)v397.columns[0].f32,
                                    1),
                                  v326,
                                  (float32x4_t)v397.columns[0],
                                  2),
                                v329,
                                (float32x4_t)v397.columns[0],
                                3),
                              *(float *)&rect.origin.x),
                            vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v320, v397.columns[1].f32[0]), v323, *(float32x2_t *)v397.columns[1].f32, 1), v326, (float32x4_t)v397.columns[1], 2), v329, (float32x4_t)v397.columns[1], 3), *(float32x2_t *)&rect.origin.x, 1), vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v320, v397.columns[2].f32[0]), v323,
                                *(float32x2_t *)v397.columns[2].f32,
                                1),
                              v326,
                              (float32x4_t)v397.columns[2],
                              2),
                            v329,
                            (float32x4_t)v397.columns[2],
                            3),
                          (float32x4_t)rect.origin,
                          2));
    if (fabsf(*(float *)&v135.i32[2]) <= 0.000001)
      break;
    v123 = v302;
    *(float64x2_t *)&buf[v111 * 16] = vcvtq_f64_f32(vadd_f32(vdiv_f32(vmul_f32(*(float32x2_t *)v135.i8, *(float32x2_t *)v315.i8), (float32x2_t)vdup_laneq_s32(v135, 2)), v305));
    if (++v111 == 8)
    {
      rect.origin = *(CGPoint *)buf;
      v327 = v389;
      v330 = *(float64x2_t *)&buf[16];
      v321 = v391;
      v324 = v390;
      v316 = v392;
      v306 = v393;
      v170 = v394;
      goto LABEL_148;
    }
  }
  v170 = 0uLL;
  rect.origin = 0u;
  v327 = 0u;
  v330 = 0u;
  v321 = 0u;
  v324 = 0u;
  v316 = 0u;
  v306 = 0u;
LABEL_148:
  v303 = v170;
  operator delete(v110);
  v139 = vminnmq_f64(vmaxnmq_f64(vminnmq_f64(vminnmq_f64(vminnmq_f64(vminnmq_f64(vminnmq_f64(vminnmq_f64(vminnmq_f64(vminnmq_f64((float64x2_t)rect.origin, (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL)), v330), v327), v324), v321), v316), v306), v303), (float64x2_t)0), v335);
  v109 = vsubq_f64(vmaxnmq_f64(vminnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64((float64x2_t)rect.origin, (float64x2_t)vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL)), v330), v327), v324), v321), v316), v306), v303), v335), (float64x2_t)0),
           v139);
  v137 = v139.f64[1];
  rect.origin.x = v139.f64[0];
  v100 = v317;
  v99 = v318;
  v138 = v313;
  v30 = a13;
  v98 = pixelBuffera;
LABEL_149:
  v140 = v109.f64[1];
  x = rect.origin.x;
  v142 = v137;
  v143 = v109;
  MinX = CGRectGetMinX(*(CGRect *)(&v109 - 1));
  v398.size.width = v143.f64[0];
  v398.origin.x = rect.origin.x;
  v398.origin.y = v137;
  v398.size.height = v140;
  MinY = CGRectGetMinY(v398);
  v399.size.width = v143.f64[0];
  v399.origin.x = rect.origin.x;
  v399.origin.y = v137;
  v399.size.height = v140;
  MaxX = CGRectGetMaxX(v399);
  v400.size.width = v143.f64[0];
  v400.origin.x = rect.origin.x;
  v400.origin.y = v137;
  v400.size.height = v140;
  v147 = CGRectGetMinX(v400);
  LODWORD(v23) = v344;
  v401.size.width = v143.f64[0];
  v401.origin.x = rect.origin.x;
  v401.origin.y = v137;
  v401.size.height = v140;
  MaxY = CGRectGetMaxY(v401);
  v402.size.width = v143.f64[0];
  v402.origin.x = rect.origin.x;
  v402.origin.y = v137;
  v402.size.height = v140;
  v149 = CGRectGetMinY(v402);
  v150 = floor(MinX);
  v151 = floor(MinY);
  v152.f64[0] = fmin(ceil(MaxX) - floor(v147), (double)v23);
  v153 = fmin(ceil(MaxY) - floor(v149), (double)DWORD1(v344));
  LODWORD(v154) = v150;
  HIDWORD(v154) = v151;
  LODWORD(v150) = (v150 + v152.f64[0] + -1.0);
  HIDWORD(v150) = (v151 + v153 + -1.0);
  v155 = v344 > LODWORD(v150);
  *((_QWORD *)&v348[1] + 1) = v154;
  *(double *)&v349 = v150;
  LODWORD(v150) = v152.f64[0];
  HIDWORD(v150) = v153;
  *((double *)&v349 + 1) = v150;
  v155 = v155 && DWORD1(v344) > (v151 + v153 + -1.0);
  if (!v155)
    goto LABEL_199;
  v152.f64[1] = v153;
  *(_QWORD *)&v350 = 0x40000000020;
  *((int32x2_t *)&v350 + 1) = vmovn_s64((int64x2_t)vcvtq_u64_f64(vrndpq_f64(vmulq_f64(v152, (float64x2_t)vdupq_n_s64(0x3FA0000000000000uLL)))));
  v351 = v299;
  if (v366 == v298)
  {
    v156 = v312;
    if (!v366)
      goto LABEL_186;
    v352 = v293;
    v355 = v290.i8[14];
    *(_WORD *)((unint64_t)&v353 | 0xC) = v290.i16[6];
    v354 = v290.i32[2];
    v353 = v290.i64[0];
    v356 = v288;
    v357 = v291;
    v358 = v380;
    v359 = v381;
    v157 = v289 - v100;
    v158 = (v289 - v100) >> 4;
    v159 = (uint64_t)v365;
    v160 = (char *)__p;
    v360 = v382;
    v361 = v383;
    v362 = v292;
    if (v158 > (v365 - (_BYTE *)__p) >> 4)
    {
      if (__p)
      {
        v364 = (char *)__p;
        operator delete(__p);
        v159 = 0;
        __p = 0;
        v364 = 0;
        v365 = 0;
        v99 = v318;
      }
      if ((v157 & 0x8000000000000000) == 0)
      {
        v161 = v159 >> 3;
        if (v159 >> 3 <= v158)
          v161 = (v289 - v100) >> 4;
        v162 = (unint64_t)v159 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v161;
        if (!(v162 >> 60))
        {
          v163 = (char *)operator new(16 * v162);
          v160 = v163;
          __p = v163;
          v364 = v163;
          v365 = &v163[16 * v162];
          if (v289 != v100)
            memcpy(v163, v100, v157);
          goto LABEL_184;
        }
      }
LABEL_358:
      abort();
    }
    v166 = (v364 - (_BYTE *)__p) >> 4;
    if (v166 >= v158)
    {
      if (v289 == v100)
      {
LABEL_184:
        v364 = &v160[v157];
        goto LABEL_185;
      }
      v168 = __p;
      v169 = v100;
    }
    else
    {
      v167 = &v100[16 * v166];
      if (v364 != __p)
      {
        memmove(__p, v100, v364 - (_BYTE *)__p);
        v160 = v364;
      }
      v157 = v289 - v167;
      if (v289 == v167)
        goto LABEL_184;
      v168 = v160;
      v169 = v167;
    }
    memmove(v168, v169, v157);
    goto LABEL_184;
  }
  v156 = v312;
  if (!v366)
  {
    v355 = v290.i8[14];
    v352 = v293;
    v353 = v290.i64[0];
    *(_WORD *)((unint64_t)&v353 | 0xC) = v290.i16[6];
    v354 = v290.i32[2];
    v356 = v288;
    v357 = v291;
    v358 = v380;
    v359 = v381;
    v360 = v382;
    v361 = v383;
    v362 = v292;
    v365 = 0;
    __p = 0;
    v364 = 0;
    v164 = v289 - v100;
    if (v289 != v100)
    {
      if (v164 < 0)
        goto LABEL_358;
      __p = operator new(v289 - v100);
      v364 = (char *)__p;
      v165 = (char *)__p + 16 * (v164 >> 4);
      v365 = v165;
      memcpy(__p, v100, v164);
      v364 = v165;
    }
    v366 = 1;
LABEL_185:
    v156 = v312;
    goto LABEL_186;
  }
  if (__p)
  {
    v364 = (char *)__p;
    operator delete(__p);
  }
  v366 = 0;
LABEL_186:
  v367 = a12;
  *((_QWORD *)&v372 + 1) = v156;
  *(_QWORD *)&v373 = v99;
  *((_QWORD *)&v373 + 1) = v311;
  *(_QWORD *)&v374 = v138;
  *((_QWORD *)&v374 + 1) = v310;
  v375 = 0;
  v171 = (HIDWORD(v350) * DWORD2(v350));
  if ((_DWORD)v171)
  {
    v172 = operator new(v171 << 14);
    bzero(v172, v171 << 14);
  }
  else
  {
    v172 = 0;
  }
  *(_QWORD *)&v372 = v172;
  dispatch_apply_f(v171, 0, &rect.size, (void (__cdecl *)(void *, size_t))sub_2393AF87C);
  dispatch_apply_f(v171, 0, &rect.size, (void (__cdecl *)(void *, size_t))sub_2393AFAB0);
  if ((sub_2393B013C((uint64_t)&rect.size) & 1) != 0)
  {
    v173 = (int32x2_t *)v338[1];
    if (v338[1])
    {
      v174 = 0;
      v175 = (float32x2_t)vdup_n_s32(0x358637BDu);
      v331 = (float)LODWORD(v348[0]) / (float)v344;
      do
      {
        if ((v173[3].i8[4] & 1) == 0)
        {
          v267 = v173[2];
          if ((vcgt_u32(*(uint32x2_t *)((char *)&v348[1] + 8), (uint32x2_t)v267).u8[0] & 1) == 0
            && (vcgt_u32((uint32x2_t)v267, *(uint32x2_t *)&v349).u8[0] & 1) == 0)
          {
            v268 = vcgt_u32((uint32x2_t)vzip2_s32(v267, *(int32x2_t *)((char *)&v348[1] + 8)), (uint32x2_t)vzip2_s32(*(int32x2_t *)&v349, v267));
            if (((v268.i32[1] | v268.i32[0]) & 1) == 0)
            {
              v269 = v173[3].u32[0];
              sub_2393B028C();
              v271 = v270;
              v272 = *(float32x4_t *)(*(_QWORD *)&rect.size.width + 16 * v269);
              if (v366)
              {
                v273 = vaddq_f32((float32x4_t)v371, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v368, v272.f32[0]), (float32x4_t)v369, *(float32x2_t *)v272.f32, 1), (float32x4_t)v370, v272, 2));
                v273.i32[3] = -1.0;
                v274 = (int8x16_t)vmulq_f32(v273, v362);
                v275 = vaddv_f32(vadd_f32(*(float32x2_t *)v274.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v274, v274, 8uLL))) >= v367;
              }
              else
              {
                v275 = 1;
              }
              v276 = fabsf(*((float *)&v271.x + 1));
              if (fabsf(*(float *)&v271.x) <= 0.000001 && v276 <= 0.000001)
              {
                v278 = vmvn_s8((int8x8_t)vcge_f32(v175, vabs_f32((float32x2_t)vrev64_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v271, (int8x16_t)v271, 8uLL)))));
                if ((v278.i8[4] & 1) == 0 && (v278.i8[0] & 1) == 0 && DWORD1(v345) * (_DWORD)v345)
                {
                  v279 = (int32x4_t)vmulq_f32(v272, v272);
                  v279.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v279, 2), vadd_f32(*(float32x2_t *)v279.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v279.i8, 1))).u32[0];
                  v280 = vrsqrte_f32((float32x2_t)v279.u32[0]);
                  v281 = vmul_f32(v280, vrsqrts_f32((float32x2_t)v279.u32[0], vmul_f32(v280, v280)));
                  v282 = vmulq_n_f32(vnegq_f32(v272), vmul_f32(v281, vrsqrts_f32((float32x2_t)v279.u32[0], vmul_f32(v281, v281))).f32[0]);
                  v282.i32[3] = HIDWORD(v271.y);
                  v271 = (CGPoint)v282;
                }
              }
              v283 = vmulq_f32((float32x4_t)v271, (float32x4_t)v271);
              v284 = vmulq_f32(v272, v272);
              v285 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v284, 2), vaddq_f32(v284, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v284.f32, 1))).f32[0])* sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v283, 2), vaddq_f32(v283, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v283.f32, 1))).f32[0]);
              v286 = 0.0;
              rect.origin = v271;
              if (fabsf(v285) <= 0.000001)
              {
                v263 = 0.0;
              }
              else
              {
                v287 = vmulq_f32((float32x4_t)v271, vnegq_f32(v272));
                v263 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v287, 2), vaddq_f32(v287, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v287.f32, 1))).f32[0]/ v285;
                if (v263 >= 0.6)
                  v286 = v263 * v263;
              }
              v272.i32[3] = 1.0;
              v336 = v272;
              *(_QWORD *)&buf[8] = 0;
              *(_QWORD *)buf = 0;
              v264 = vcvtq_f64_f32(vmul_n_f32(vcvt_f32_u32((uint32x2_t)v267), v331));
              sub_2393B06EC(*((uint64_t *)&v346 + 1), v347, DWORD2(v347), HIDWORD(v347), LODWORD(v348[0]), DWORD1(v348[0]), buf, v264.f64[0], v264.f64[1]);
              v265 = 48 * v174;
              *(float32x4_t *)(v374 + v265) = v336;
              *(_OWORD *)(v374 + v265 + 32) = *(_OWORD *)buf;
              *(CGPoint *)(v374 + v265 + 16) = rect.origin;
              v266 = *((_QWORD *)&v374 + 1) + 20 * v174;
              *(float *)v266 = v286 * 10.0;
              *(_DWORD *)(v266 + 4) = 1065353216;
              *(_BYTE *)(v266 + 8) = v275;
              *(float *)(v266 + 12) = v263;
              *(_DWORD *)(v266 + 16) = 0;
              ++v174;
              v98 = pixelBuffera;
            }
          }
        }
        v173 = (int32x2_t *)*v173;
      }
      while (v173);
      goto LABEL_197;
    }
  }
  else
  {
    if (qword_2569302D8 != -1)
      dispatch_once(&qword_2569302D8, &unk_250AD5DC0);
    v176 = qword_2569302D0;
    if (os_log_type_enabled((os_log_t)qword_2569302D0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "createPointCloudFromNonCoincidentInputPoints";
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = 1190;
      _os_log_error_impl(&dword_239388000, v176, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create pointcloud from pointcloud - invalid pointcloud context.", buf, 0x12u);
    }
  }
  v174 = 0;
LABEL_197:
  v375 = v174;
  v99 = v318;
  CVPixelBufferUnlockBaseAddress(a7, 1uLL);
  CVPixelBufferUnlockBaseAddress(v309, 1uLL);
  CVPixelBufferUnlockBaseAddress(v308, 1uLL);
  CVPixelBufferUnlockBaseAddress(v98, 1uLL);
  v100 = v317;
  if (v172)
    operator delete(v172);
LABEL_199:
  v177 = (HIDWORD(v350) * DWORD2(v350));
  if (!(_DWORD)v177)
  {
    v179 = 0;
    goto LABEL_208;
  }
  if (v177 < 8)
  {
    v178 = 0;
    v179 = 0;
LABEL_206:
    v184 = v177 - v178;
    v185 = (int *)(*((_QWORD *)&v373 + 1) + 4 * v178);
    do
    {
      v186 = *v185++;
      v179 += v186;
      --v184;
    }
    while (v184);
    goto LABEL_208;
  }
  v178 = v177 & 0xFFFFFFF8;
  v180 = (int32x4_t *)(*((_QWORD *)&v373 + 1) + 16);
  v181 = 0uLL;
  v182 = v178;
  v183 = 0uLL;
  do
  {
    v181 = vaddq_s32(v180[-1], v181);
    v183 = vaddq_s32(*v180, v183);
    v180 += 2;
    v182 -= 8;
  }
  while (v182);
  v179 = vaddvq_s32(vaddq_s32(v183, v181));
  if (v178 != v177)
    goto LABEL_206;
LABEL_208:
  if (!(v375 + v179))
  {
    if (qword_2569302D8 != -1)
      dispatch_once(&qword_2569302D8, &unk_250AD5DC0);
    v257 = qword_2569302D0;
    if (os_log_type_enabled((os_log_t)qword_2569302D0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "createOCPointCloud";
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = 1567;
      _os_log_error_impl(&dword_239388000, v257, OS_LOG_TYPE_ERROR, "%s:%{public}d Processed pointcloud is empty.", buf, 0x12u);
      v256 = 0xFFFFFFFFLL;
      if (!v366)
        goto LABEL_308;
    }
    else
    {
      v256 = 0xFFFFFFFFLL;
      if (!v366)
        goto LABEL_308;
    }
    goto LABEL_306;
  }
  v187 = sub_2393ACD80(v375 + v179);
  if (!v187)
  {
    if (qword_2569302D8 != -1)
      dispatch_once(&qword_2569302D8, &unk_250AD5DC0);
    v258 = qword_2569302D0;
    if (os_log_type_enabled((os_log_t)qword_2569302D0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "createOCPointCloud";
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = 1573;
      _os_log_error_impl(&dword_239388000, v258, OS_LOG_TYPE_ERROR, "%s:%{public}d Insufficient memory.", buf, 0x12u);
    }
    v256 = 4294967293;
    if (!v366)
      goto LABEL_308;
LABEL_306:
    if (__p)
    {
      v364 = (char *)__p;
      operator delete(__p);
    }
    goto LABEL_308;
  }
  v188 = *((_QWORD *)&v373 + 1);
  if (*((_QWORD *)&v373 + 1))
  {
    if (*((_QWORD *)&v372 + 1))
    {
      if ((_QWORD)v373)
      {
        *(_QWORD *)&rect.origin.x = (HIDWORD(v350) * DWORD2(v350));
        if (LODWORD(rect.origin.x))
        {
          v189 = 0;
          do
          {
            if (*(_DWORD *)(v188 + 4 * v189))
            {
              for (k = 0; k < *(_DWORD *)(*((_QWORD *)&v373 + 1) + 4 * v189); ++k)
              {
                v193 = k + DWORD1(v350) * v189;
                v194 = (__int128 *)(*((_QWORD *)&v372 + 1) + 48 * v193);
                v195 = v373;
                v197 = (_OWORD *)v187[13];
                v196 = v187[14];
                if ((unint64_t)v197 >= v196)
                {
                  v201 = (_OWORD *)v187[12];
                  v202 = 0xAAAAAAAAAAAAAAABLL * (v197 - v201) + 1;
                  if (v202 > 0x555555555555555)
                    goto LABEL_352;
                  v203 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v196 - (_QWORD)v201) >> 4);
                  if (2 * v203 > v202)
                    v202 = 2 * v203;
                  if (v203 >= 0x2AAAAAAAAAAAAAALL)
                    v204 = 0x555555555555555;
                  else
                    v204 = v202;
                  if (v204)
                  {
                    if (v204 > 0x555555555555555)
                      goto LABEL_353;
                    v205 = (char *)operator new(48 * v204);
                  }
                  else
                  {
                    v205 = 0;
                  }
                  v206 = &v205[16 * (v197 - v201)];
                  v207 = *v194;
                  v208 = v194[2];
                  *((_OWORD *)v206 + 1) = v194[1];
                  *((_OWORD *)v206 + 2) = v208;
                  *(_OWORD *)v206 = v207;
                  v209 = v206;
                  if (v197 != v201)
                  {
                    do
                    {
                      v210 = *(v197 - 3);
                      v211 = *(v197 - 1);
                      *((_OWORD *)v209 - 2) = *(v197 - 2);
                      *((_OWORD *)v209 - 1) = v211;
                      *((_OWORD *)v209 - 3) = v210;
                      v209 -= 48;
                      v197 -= 3;
                    }
                    while (v197 != v201);
                    v197 = (_OWORD *)v187[12];
                  }
                  v200 = v206 + 48;
                  v187[12] = v209;
                  v187[13] = v206 + 48;
                  v187[14] = &v205[48 * v204];
                  if (v197)
                    operator delete(v197);
                }
                else
                {
                  v198 = *v194;
                  v199 = v194[2];
                  v197[1] = v194[1];
                  v197[2] = v199;
                  *v197 = v198;
                  v200 = v197 + 3;
                }
                v212 = (__int128 *)(v195 + 20 * v193);
                v187[13] = v200;
                v214 = (char *)v187[16];
                v213 = v187[17];
                if ((unint64_t)v214 < v213)
                {
                  v191 = *v212;
                  *((_DWORD *)v214 + 4) = *((_DWORD *)v212 + 4);
                  *(_OWORD *)v214 = v191;
                  v192 = v214 + 20;
                }
                else
                {
                  v215 = (_BYTE *)v187[15];
                  v216 = 0xCCCCCCCCCCCCCCCDLL * ((v214 - v215) >> 2) + 1;
                  if (v216 > 0xCCCCCCCCCCCCCCCLL)
LABEL_352:
                    abort();
                  v217 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v213 - (_QWORD)v215) >> 2);
                  if (2 * v217 > v216)
                    v216 = 2 * v217;
                  if (v217 >= 0x666666666666666)
                    v218 = 0xCCCCCCCCCCCCCCCLL;
                  else
                    v218 = v216;
                  if (v218)
                  {
                    if (v218 > 0xCCCCCCCCCCCCCCCLL)
LABEL_353:
                      sub_23938C4B8();
                    v219 = (char *)operator new(20 * v218);
                  }
                  else
                  {
                    v219 = 0;
                  }
                  v220 = *v212;
                  v221 = &v219[4 * ((v214 - v215) >> 2)];
                  *((_DWORD *)v221 + 4) = *((_DWORD *)v212 + 4);
                  *(_OWORD *)v221 = v220;
                  v222 = v221;
                  if (v214 != v215)
                  {
                    do
                    {
                      v223 = *(_OWORD *)(v214 - 20);
                      *((_DWORD *)v222 - 1) = *((_DWORD *)v214 - 1);
                      *(_OWORD *)(v222 - 20) = v223;
                      v222 -= 20;
                      v214 -= 20;
                    }
                    while (v214 != v215);
                    v214 = (char *)v187[15];
                  }
                  v192 = v221 + 20;
                  v187[15] = v222;
                  v187[16] = v221 + 20;
                  v187[17] = &v219[20 * v218];
                  if (v214)
                    operator delete(v214);
                }
                v187[16] = v192;
                v188 = *((_QWORD *)&v373 + 1);
              }
            }
            ++v189;
          }
          while (v189 != *(_QWORD *)&rect.origin.x);
        }
      }
    }
  }
  if ((_QWORD)v374 && *((_QWORD *)&v374 + 1) && v375)
  {
    for (m = 0; m < v375; ++m)
    {
      v227 = (__int128 *)(v374 + 48 * m);
      v229 = (_OWORD *)v187[13];
      v228 = v187[14];
      if ((unint64_t)v229 >= v228)
      {
        v233 = (_OWORD *)v187[12];
        v234 = 0xAAAAAAAAAAAAAAABLL * (v229 - v233) + 1;
        if (v234 > 0x555555555555555)
          goto LABEL_352;
        v235 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v228 - (_QWORD)v233) >> 4);
        if (2 * v235 > v234)
          v234 = 2 * v235;
        if (v235 >= 0x2AAAAAAAAAAAAAALL)
          v236 = 0x555555555555555;
        else
          v236 = v234;
        if (v236)
        {
          if (v236 > 0x555555555555555)
            goto LABEL_353;
          v237 = (char *)operator new(48 * v236);
        }
        else
        {
          v237 = 0;
        }
        v238 = &v237[16 * (v229 - v233)];
        v239 = *v227;
        v240 = v227[2];
        *((_OWORD *)v238 + 1) = v227[1];
        *((_OWORD *)v238 + 2) = v240;
        *(_OWORD *)v238 = v239;
        v241 = v238;
        if (v229 != v233)
        {
          do
          {
            v242 = *(v229 - 3);
            v243 = *(v229 - 1);
            *((_OWORD *)v241 - 2) = *(v229 - 2);
            *((_OWORD *)v241 - 1) = v243;
            *((_OWORD *)v241 - 3) = v242;
            v241 -= 48;
            v229 -= 3;
          }
          while (v229 != v233);
          v229 = (_OWORD *)v187[12];
        }
        v232 = v238 + 48;
        v187[12] = v241;
        v187[13] = v238 + 48;
        v187[14] = &v237[48 * v236];
        if (v229)
          operator delete(v229);
      }
      else
      {
        v230 = *v227;
        v231 = v227[2];
        v229[1] = v227[1];
        v229[2] = v231;
        *v229 = v230;
        v232 = v229 + 3;
      }
      v187[13] = v232;
      v244 = *((_QWORD *)&v374 + 1) + 20 * m;
      v246 = (char *)v187[16];
      v245 = v187[17];
      if ((unint64_t)v246 < v245)
      {
        v225 = *(_OWORD *)v244;
        *((_DWORD *)v246 + 4) = *(_DWORD *)(v244 + 16);
        *(_OWORD *)v246 = v225;
        v226 = v246 + 20;
      }
      else
      {
        v247 = (_BYTE *)v187[15];
        v248 = 0xCCCCCCCCCCCCCCCDLL * ((v246 - v247) >> 2) + 1;
        if (v248 > 0xCCCCCCCCCCCCCCCLL)
          goto LABEL_352;
        v249 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v245 - (_QWORD)v247) >> 2);
        if (2 * v249 > v248)
          v248 = 2 * v249;
        if (v249 >= 0x666666666666666)
          v250 = 0xCCCCCCCCCCCCCCCLL;
        else
          v250 = v248;
        if (v250)
        {
          if (v250 > 0xCCCCCCCCCCCCCCCLL)
            goto LABEL_353;
          v251 = (char *)operator new(20 * v250);
        }
        else
        {
          v251 = 0;
        }
        v252 = *(_OWORD *)v244;
        v253 = &v251[4 * ((v246 - v247) >> 2)];
        *((_DWORD *)v253 + 4) = *(_DWORD *)(v244 + 16);
        *(_OWORD *)v253 = v252;
        v254 = v253;
        if (v246 != v247)
        {
          do
          {
            v255 = *(_OWORD *)(v246 - 20);
            *((_DWORD *)v254 - 1) = *((_DWORD *)v246 - 1);
            *(_OWORD *)(v254 - 20) = v255;
            v254 -= 20;
            v246 -= 20;
          }
          while (v246 != v247);
          v246 = (char *)v187[15];
        }
        v226 = v253 + 20;
        v187[15] = v254;
        v187[16] = v253 + 20;
        v187[17] = &v251[20 * v250];
        if (v246)
          operator delete(v246);
      }
      v187[16] = v226;
    }
  }
  v256 = 0;
  *((_DWORD *)v187 + 4) = 1065353216;
  *((_OWORD *)v187 + 2) = xmmword_2393F9C00;
  *((_OWORD *)v187 + 3) = unk_2393F9C10;
  *((_OWORD *)v187 + 4) = xmmword_2393F9C20;
  *((_OWORD *)v187 + 5) = unk_2393F9C30;
  *a16 = v187;
  v100 = v317;
  v99 = v318;
  v138 = v313;
  v30 = a13;
  if (v366)
    goto LABEL_306;
LABEL_308:
  v259 = v338[1];
  if (v338[1])
  {
    do
    {
      v260 = (_QWORD *)*v259;
      operator delete(v259);
      v259 = v260;
    }
    while (v260);
  }
  v261 = rect.size.height;
  rect.size.height = 0.0;
  if (v261 != 0.0)
    operator delete(*(void **)&v261);
  if (v30 && v100)
    operator delete(v100);
  if (v30 && __src)
    operator delete(__src);
  if (v310)
    operator delete(v310);
  if (v138)
    operator delete(v138);
  if (v311)
    operator delete(v311);
  if (v99)
    operator delete(v99);
  if (v312)
    operator delete(v312);
  return v256;
}

void sub_2393B337C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,void *a38,void *a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  void *v63;
  void *v64;
  uint64_t v65;
  void *v66;
  void *v68;

  sub_2393B0C20((uint64_t)&a63);
  if (v65 && v64)
  {
    operator delete(v64);
  }
  else if (!v65)
  {
    goto LABEL_7;
  }
  if (__p)
    operator delete(__p);
LABEL_7:
  if (a38)
  {
    operator delete(a38);
    if (!v66)
    {
LABEL_9:
      v68 = a39;
      if (!a39)
        goto LABEL_10;
      goto LABEL_15;
    }
  }
  else if (!v66)
  {
    goto LABEL_9;
  }
  operator delete(v66);
  v68 = a39;
  if (!a39)
  {
LABEL_10:
    if (!v63)
      goto LABEL_11;
    goto LABEL_16;
  }
LABEL_15:
  operator delete(v68);
  if (!v63)
  {
LABEL_11:
    if (!a40)
      goto LABEL_12;
    goto LABEL_17;
  }
LABEL_16:
  operator delete(v63);
  if (!a40)
LABEL_12:
    _Unwind_Resume(a1);
LABEL_17:
  operator delete(a40);
  _Unwind_Resume(a1);
}

uint64_t OCPointCloudCreateFromDenseDepthWithBoundingBox(__CVBuffer *a1, __CVBuffer *a2, __CVBuffer *a3, __CVBuffer *a4, int a5, _QWORD *a6, int64x2_t a7, int8x16_t a8, int64x2_t a9, simd_float4 a10, simd_float4 a11, simd_float4 a12, int8x16_t a13, uint64_t a14, uint64_t a15, float32x4_t a16, float32x4_t a17, float32x4_t a18, float32x4_t a19)
{
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  uint32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  uint32x4_t v33;
  float32x4_t v34;
  float32x2_t v35;
  uint32x2_t v36;
  NSObject *v37;
  const char *v38;
  NSObject *v39;
  uint64_t v40;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53[4];
  char v54;
  simd_float4 v55[4];
  char v56;
  uint8_t buf[4];
  const char *v58;
  __int16 v59;
  int v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  v49 = a16;
  v50 = a17;
  v51 = a18;
  v52 = a19;
  if ((sub_2393B0E3C(a1, a2, a3, a4, a5, (uint64_t)a6) & 1) == 0)
  {
    if (qword_2569302D8 != -1)
      dispatch_once(&qword_2569302D8, &unk_250AD5DC0);
    v39 = qword_2569302D0;
    if (os_log_type_enabled((os_log_t)qword_2569302D0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v58 = "OCPointCloudCreateFromDenseDepthWithBoundingBox";
      v59 = 1026;
      v60 = 1623;
      _os_log_error_impl(&dword_239388000, v39, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create pointcloud - invalid input.", buf, 0x12u);
    }
    return 4294967294;
  }
  if ((sub_2393BBC44((uint64_t)&v49) & 1) == 0)
  {
    if (qword_2569302D8 != -1)
      dispatch_once(&qword_2569302D8, &unk_250AD5DC0);
    v37 = qword_2569302D0;
    if (!os_log_type_enabled((os_log_t)qword_2569302D0, OS_LOG_TYPE_DEBUG))
      return 4294967294;
    *(_DWORD *)buf = 136315394;
    v58 = "OCPointCloudCreateFromDenseDepthWithBoundingBox";
    v59 = 1026;
    v60 = 1629;
    v38 = "%s:%{public}d Invalid bounding box transform, computing pointcloud without bounding box.";
    goto LABEL_21;
  }
  v25 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 16);
  v26 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 32);
  v27 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
  v28 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v27, vabdq_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32((float32x4_t)a10, *(float32x2_t *)a10.f32, 1), (float32x4_t)a11, *(float32x2_t *)a11.f32, 1), (float32x4_t)a12, *(float32x2_t *)a12.f32, 1), v25)), (int8x16_t)vcgeq_f32(v27, vabdq_f32(vmlaq_n_f32(vmlaq_n_f32(
                                           vmulq_n_f32((float32x4_t)a10, a10.f32[0]),
                                           (float32x4_t)a11,
                                           a11.f32[0]),
                                         (float32x4_t)a12,
                                         a12.f32[0]),
                                       *MEMORY[0x24BDAEDF8]))),
                      (int8x16_t)vcgeq_f32(v27, vabdq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32((float32x4_t)a10, (float32x4_t)a10, 2), (float32x4_t)a11, (float32x4_t)a11, 2), (float32x4_t)a12, (float32x4_t)a12, 2), v26)));
  v28.i32[3] = v28.i32[2];
  if ((vminvq_u32(v28) & 0x80000000) != 0)
  {
    v29 = (float32x4_t)vdupq_laneq_s32((int32x4_t)a11, 2);
    v30 = (float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)a10, (int32x4_t)a12), (int32x4_t)v29);
    v31 = (float32x4_t)vtrn2q_s32((int32x4_t)a10, (int32x4_t)a11);
    v31.i32[2] = a12.i32[1];
    v32 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)a10, (int32x4_t)a12), (int32x4_t)a11);
    v33 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v27, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v32, a11.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a11.f32, 1), v31), v29, v30), v25)), (int8x16_t)vcgeq_f32(v27, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v32, a10.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a10.f32, 1),
                                             v31),
                                           (float32x4_t)vdupq_laneq_s32((int32x4_t)a10, 2),
                                           v30),
                                         *MEMORY[0x24BDAEDF8]))),
                        (int8x16_t)vcgeq_f32(v27, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v32, a12.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a12.f32, 1), v31), (float32x4_t)vdupq_laneq_s32((int32x4_t)a12, 2), v30), v26)));
    v33.i32[3] = v33.i32[2];
    if ((vminvq_u32(v33) & 0x80000000) != 0)
    {
      v34 = vmulq_f32((float32x4_t)a10, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)a12, (int8x16_t)a12, 0xCuLL), (int8x16_t)a12, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a11, (int32x4_t)a11), (int8x16_t)a11, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a12, (int32x4_t)a12), (int8x16_t)a12, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)a11, (int8x16_t)a11, 0xCuLL), (int8x16_t)a11, 8uLL)));
      if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v34, 2), vaddq_f32(v34, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v34.f32, 1))).f32[0]+ -1.0) <= 0.000011)
      {
        v35 = (float32x2_t)vdup_n_s32(0x38D1B717u);
        v36 = (uint32x2_t)vand_s8((int8x8_t)vcge_f32(v35, vabs_f32(vadd_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a12, (int8x16_t)a12, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(a13, a13, 8uLL)), (float32x2_t)0xBF80000080000000))), (int8x8_t)vcge_f32(v35, vabs_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a10, (int8x16_t)a10, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(
                                                                                         (int8x16_t)a11,
                                                                                         (int8x16_t)a11,
                                                                                         8uLL)))));
        if ((vpmin_u32(v36, v36).u32[0] & 0x80000000) != 0)
        {
          kdebug_trace();
          v55[0] = a10;
          v55[1] = a11;
          v55[2] = a12;
          v55[3] = (simd_float4)a13;
          v56 = 1;
          v53[0] = v49;
          v53[1] = v50;
          v53[2] = v51;
          v53[3] = v52;
          v54 = 1;
          v40 = sub_2393B1388(0, 0, 0, a1, a2, a3, a4, a5, a7, a8, a9, 0.0, 0, v55, v53, a6);
          kdebug_trace();
          return v40;
        }
      }
    }
  }
  if (qword_2569302D8 != -1)
    dispatch_once(&qword_2569302D8, &unk_250AD5DC0);
  v37 = qword_2569302D0;
  if (os_log_type_enabled((os_log_t)qword_2569302D0, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    v58 = "OCPointCloudCreateFromDenseDepthWithBoundingBox";
    v59 = 1026;
    v60 = 1635;
    v38 = "%s:%{public}d Invalid camera to world transform, computing pointcloud without bounding box.";
LABEL_21:
    _os_log_debug_impl(&dword_239388000, v37, OS_LOG_TYPE_DEBUG, v38, buf, 0x12u);
  }
  return 4294967294;
}

uint64_t OCPointCloudCreateFromDenseDepthWithPlaneClassification(__CVBuffer *a1, __CVBuffer *a2, __CVBuffer *a3, __CVBuffer *a4, int a5, uint64_t a6, _QWORD *a7, int64x2_t a8, int8x16_t a9, int64x2_t a10, simd_float4 a11, simd_float4 a12, simd_float4 a13, int8x16_t a14, float a15)
{
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  uint32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  uint32x4_t v37;
  float32x4_t v38;
  NSObject *v39;
  const char *v40;
  uint64_t v41;
  float32x2_t v43;
  uint32x2_t v44;
  float32x4_t v52[4];
  char v53;
  simd_float4 v54[4];
  char v55;
  uint8_t buf[4];
  const char *v57;
  __int16 v58;
  int v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  if ((sub_2393B0E3C(a1, a2, a3, a4, a5, (uint64_t)a7) & 1) == 0)
  {
    if (qword_2569302D8 != -1)
      dispatch_once(&qword_2569302D8, &unk_250AD5DC0);
    v39 = qword_2569302D0;
    if (!os_log_type_enabled((os_log_t)qword_2569302D0, OS_LOG_TYPE_ERROR))
      return 4294967294;
    *(_DWORD *)buf = 136315394;
    v57 = "OCPointCloudCreateFromDenseDepthWithPlaneClassification";
    v58 = 1026;
    v59 = 1661;
    v40 = "%s:%{public}d Failed to create pointcloud - invalid input.";
    goto LABEL_16;
  }
  if (a6)
  {
    v24 = (float32x4_t)a11;
    v23 = (float32x4_t)a12;
    v25 = (float32x4_t)a13;
    v26 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v24, v24.f32[0]), v23, v23.f32[0]), v25, v25.f32[0]);
    v27 = vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v24, *(float32x2_t *)v24.f32, 1), v23, *(float32x2_t *)v23.f32, 1), v25, *(float32x2_t *)v25.f32, 1);
    v28 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v24, v24, 2), v23, v23, 2), v25, v25, 2);
    v29 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 16);
    v30 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 32);
    v31 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
    v32 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v31, vabdq_f32(v27, v29)), (int8x16_t)vcgeq_f32(v31, vabdq_f32(v26, *MEMORY[0x24BDAEDF8]))), (int8x16_t)vcgeq_f32(v31, vabdq_f32(v28, v30)));
    v32.i32[3] = v32.i32[2];
    if ((vminvq_u32(v32) & 0x80000000) != 0)
    {
      v33 = (float32x4_t)vdupq_laneq_s32((int32x4_t)a12, 2);
      v34 = (float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)a11, (int32x4_t)a13), (int32x4_t)v33);
      v35 = (float32x4_t)vtrn2q_s32((int32x4_t)a11, (int32x4_t)a12);
      v35.i32[2] = a13.i32[1];
      v36 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)a11, (int32x4_t)a13), (int32x4_t)a12);
      v37 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v31, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v36, a12.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a12.f32, 1), v35), v33, v34), v29)), (int8x16_t)vcgeq_f32(v31, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v36, a11.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a11.f32, 1),
                                               v35),
                                             (float32x4_t)vdupq_laneq_s32((int32x4_t)a11, 2),
                                             v34),
                                           *MEMORY[0x24BDAEDF8]))),
                          (int8x16_t)vcgeq_f32(v31, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v36, a13.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a13.f32, 1), v35), (float32x4_t)vdupq_laneq_s32((int32x4_t)a13, 2), v34), v30)));
      v37.i32[3] = v37.i32[2];
      if ((vminvq_u32(v37) & 0x80000000) != 0)
      {
        v38 = vmulq_f32((float32x4_t)a11, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)a13, (int8x16_t)a13, 0xCuLL), (int8x16_t)a13, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a12, (int32x4_t)a12), (int8x16_t)a12, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a13, (int32x4_t)a13), (int8x16_t)a13, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)a12, (int8x16_t)a12, 0xCuLL), (int8x16_t)a12, 8uLL)));
        if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v38, 2), vaddq_f32(v38, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v38.f32, 1))).f32[0]+ -1.0) <= 0.000011&& a15 >= 0.0)
        {
          v43 = (float32x2_t)vdup_n_s32(0x38D1B717u);
          v44 = (uint32x2_t)vand_s8((int8x8_t)vcge_f32(v43, vabs_f32(vadd_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a13, (int8x16_t)a13, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(a14, a14, 8uLL)), (float32x2_t)0xBF80000080000000))), (int8x8_t)vcge_f32(v43, vabs_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a11, (int8x16_t)a11, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(
                                                                                           (int8x16_t)a12,
                                                                                           (int8x16_t)a12,
                                                                                           8uLL)))));
          if ((vpmin_u32(v44, v44).u32[0] & 0x80000000) != 0)
          {
            kdebug_trace();
            v54[0] = a11;
            v54[1] = a12;
            v54[2] = a13;
            v54[3] = (simd_float4)a14;
            v55 = 1;
            v52[0].i8[0] = 0;
            v53 = 0;
            v41 = sub_2393B1388(0, 0, 0, a1, a2, a3, a4, a5, a8, a9, a10, a15, a6, v54, v52, a7);
            kdebug_trace();
            return v41;
          }
        }
      }
    }
  }
  if (qword_2569302D8 != -1)
    dispatch_once(&qword_2569302D8, &unk_250AD5DC0);
  v39 = qword_2569302D0;
  if (os_log_type_enabled((os_log_t)qword_2569302D0, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    v57 = "OCPointCloudCreateFromDenseDepthWithPlaneClassification";
    v58 = 1026;
    v59 = 1666;
    v40 = "%s:%{public}d Invalid plane data.";
LABEL_16:
    _os_log_error_impl(&dword_239388000, v39, OS_LOG_TYPE_ERROR, v40, buf, 0x12u);
  }
  return 4294967294;
}

uint64_t OCPointCloudCreateFromDenseDepthWithPlaneClassificationAndBoundingBox(__CVBuffer *a1, __CVBuffer *a2, __CVBuffer *a3, __CVBuffer *a4, int a5, uint64_t a6, _QWORD *a7, int64x2_t a8, int8x16_t a9, int64x2_t a10, simd_float4 a11, simd_float4 a12, simd_float4 a13, int8x16_t a14, float a15, uint64_t a16, float32x4_t a17, float32x4_t a18, float32x4_t a19, float32x4_t a20)
{
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  uint32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  uint32x4_t v42;
  float32x4_t v43;
  NSObject *v44;
  const char *v45;
  uint64_t v46;
  float32x2_t v48;
  uint32x2_t v49;
  NSObject *v50;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62[4];
  char v63;
  simd_float4 v64[4];
  char v65;
  uint8_t buf[4];
  const char *v67;
  __int16 v68;
  int v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  v58 = a17;
  v59 = a18;
  v60 = a19;
  v61 = a20;
  if ((sub_2393B0E3C(a1, a2, a3, a4, a5, (uint64_t)a7) & 1) == 0)
  {
    if (qword_2569302D8 != -1)
      dispatch_once(&qword_2569302D8, &unk_250AD5DC0);
    v44 = qword_2569302D0;
    if (!os_log_type_enabled((os_log_t)qword_2569302D0, OS_LOG_TYPE_ERROR))
      return 4294967294;
    *(_DWORD *)buf = 136315394;
    v67 = "OCPointCloudCreateFromDenseDepthWithPlaneClassificationAndBoundingBox";
    v68 = 1026;
    v69 = 1693;
    v45 = "%s:%{public}d Failed to create pointcloud - invalid input.";
LABEL_16:
    _os_log_error_impl(&dword_239388000, v44, OS_LOG_TYPE_ERROR, v45, buf, 0x12u);
    return 4294967294;
  }
  if (!a6)
    goto LABEL_6;
  v29 = (float32x4_t)a11;
  v28 = (float32x4_t)a12;
  v30 = (float32x4_t)a13;
  v31 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v29, v29.f32[0]), v28, v28.f32[0]), v30, v30.f32[0]);
  v32 = vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v29, *(float32x2_t *)v29.f32, 1), v28, *(float32x2_t *)v28.f32, 1), v30, *(float32x2_t *)v30.f32, 1);
  v33 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v29, v29, 2), v28, v28, 2), v30, v30, 2);
  v34 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 16);
  v35 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 32);
  v36 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
  v37 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v36, vabdq_f32(v32, v34)), (int8x16_t)vcgeq_f32(v36, vabdq_f32(v31, *MEMORY[0x24BDAEDF8]))), (int8x16_t)vcgeq_f32(v36, vabdq_f32(v33, v35)));
  v37.i32[3] = v37.i32[2];
  if ((vminvq_u32(v37) & 0x80000000) == 0)
    goto LABEL_6;
  v38 = (float32x4_t)vdupq_laneq_s32((int32x4_t)a12, 2);
  v39 = (float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)a11, (int32x4_t)a13), (int32x4_t)v38);
  v40 = (float32x4_t)vtrn2q_s32((int32x4_t)a11, (int32x4_t)a12);
  v40.i32[2] = a13.i32[1];
  v41 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)a11, (int32x4_t)a13), (int32x4_t)a12);
  v42 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v36, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v41, a12.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a12.f32, 1), v40), v38, v39), v34)), (int8x16_t)vcgeq_f32(v36, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v41, a11.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a11.f32, 1),
                                           v40),
                                         (float32x4_t)vdupq_laneq_s32((int32x4_t)a11, 2),
                                         v39),
                                       *MEMORY[0x24BDAEDF8]))),
                      (int8x16_t)vcgeq_f32(v36, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v41, a13.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a13.f32, 1), v40), (float32x4_t)vdupq_laneq_s32((int32x4_t)a13, 2), v39), v35)));
  v42.i32[3] = v42.i32[2];
  if ((vminvq_u32(v42) & 0x80000000) == 0
    || (v43 = vmulq_f32((float32x4_t)a11, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)a13, (int8x16_t)a13, 0xCuLL), (int8x16_t)a13, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a12, (int32x4_t)a12), (int8x16_t)a12, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a13, (int32x4_t)a13), (int8x16_t)a13, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)a12, (int8x16_t)a12, 0xCuLL), (int8x16_t)a12, 8uLL))), fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v43, 2), vaddq_f32(v43, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v43.f32, 1))).f32[0]+ -1.0) > 0.000011)|| a15 < 0.0|| (v48 = (float32x2_t)vdup_n_s32(0x38D1B717u), v49 = (uint32x2_t)vand_s8((int8x8_t)vcge_f32(
                                        v48,
                                        vabs_f32(vadd_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a13, (int8x16_t)a13, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(a14, a14, 8uLL)), (float32x2_t)0xBF80000080000000))), (int8x8_t)vcge_f32(v48, vabs_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a11, (int8x16_t)a11, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a12, (int8x16_t)a12, 8uLL))))),
        (vpmin_u32(v49, v49).u32[0] & 0x80000000) == 0))
  {
LABEL_6:
    if (qword_2569302D8 != -1)
      dispatch_once(&qword_2569302D8, &unk_250AD5DC0);
    v44 = qword_2569302D0;
    if (!os_log_type_enabled((os_log_t)qword_2569302D0, OS_LOG_TYPE_ERROR))
      return 4294967294;
    *(_DWORD *)buf = 136315394;
    v67 = "OCPointCloudCreateFromDenseDepthWithPlaneClassificationAndBoundingBox";
    v68 = 1026;
    v69 = 1698;
    v45 = "%s:%{public}d Invalid plane data.";
    goto LABEL_16;
  }
  if ((sub_2393BBC44((uint64_t)&v58) & 1) != 0)
  {
    kdebug_trace();
    v64[0] = a11;
    v64[1] = a12;
    v64[2] = a13;
    v64[3] = (simd_float4)a14;
    v65 = 1;
    v62[0] = v58;
    v62[1] = v59;
    v62[2] = v60;
    v62[3] = v61;
    v63 = 1;
    v46 = sub_2393B1388(0, 0, 0, a1, a2, a3, a4, a5, a8, a9, a10, a15, a6, v64, v62, a7);
    kdebug_trace();
    return v46;
  }
  if (qword_2569302D8 != -1)
    dispatch_once(&qword_2569302D8, &unk_250AD5DC0);
  v50 = qword_2569302D0;
  if (os_log_type_enabled((os_log_t)qword_2569302D0, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    v67 = "OCPointCloudCreateFromDenseDepthWithPlaneClassificationAndBoundingBox";
    v68 = 1026;
    v69 = 1703;
    _os_log_debug_impl(&dword_239388000, v50, OS_LOG_TYPE_DEBUG, "%s:%{public}d Invalid bounding box transform.", buf, 0x12u);
  }
  return 4294967294;
}

uint64_t OCPointCloudCreateFromSparseAndDenseDepth(unsigned int a1, uint64_t a2, uint64_t a3, CVPixelBufferRef pixelBuffer, __CVBuffer *a5, __CVBuffer *a6, __CVBuffer *a7, int a8, int64x2_t a9, int8x16_t a10, int64x2_t a11, _QWORD *a12)
{
  uint64_t v20;
  NSObject *v21;
  const char *v22;
  float32x4_t v27[4];
  char v28;
  simd_float4 v29[4];
  char v30;
  uint8_t buf[4];
  const char *v32;
  __int16 v33;
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  if (!a1 || !a2 || !a3)
  {
    if (qword_2569302D8 != -1)
      dispatch_once(&qword_2569302D8, &unk_250AD5DC0);
    v21 = qword_2569302D0;
    if (!os_log_type_enabled((os_log_t)qword_2569302D0, OS_LOG_TYPE_ERROR))
      return 4294967294;
    *(_DWORD *)buf = 136315394;
    v32 = "OCPointCloudCreateFromSparseAndDenseDepth";
    v33 = 1026;
    v34 = 1728;
    v22 = "%s:%{public}d Invalid input pointcloud.";
    goto LABEL_16;
  }
  if ((sub_2393B0E3C(pixelBuffer, a5, a6, a7, a8, (uint64_t)a12) & 1) == 0)
  {
    if (qword_2569302D8 != -1)
      dispatch_once(&qword_2569302D8, &unk_250AD5DC0);
    v21 = qword_2569302D0;
    if (!os_log_type_enabled((os_log_t)qword_2569302D0, OS_LOG_TYPE_ERROR))
      return 4294967294;
    *(_DWORD *)buf = 136315394;
    v32 = "OCPointCloudCreateFromSparseAndDenseDepth";
    v33 = 1026;
    v34 = 1734;
    v22 = "%s:%{public}d Failed to create pointcloud - invalid input.";
LABEL_16:
    _os_log_error_impl(&dword_239388000, v21, OS_LOG_TYPE_ERROR, v22, buf, 0x12u);
    return 4294967294;
  }
  kdebug_trace();
  v29[0].i8[0] = 0;
  v30 = 0;
  v27[0].i8[0] = 0;
  v28 = 0;
  v20 = sub_2393B1388(a1, a2, a3, pixelBuffer, a5, a6, a7, a8, a9, a10, a11, 0.0, 0, v29, v27, a12);
  kdebug_trace();
  return v20;
}

uint64_t OCPointCloudCreateFromSparseAndDenseDepthWithBoundingBox(unsigned int a1, uint64_t a2, uint64_t a3, CVPixelBufferRef pixelBuffer, __CVBuffer *a5, __CVBuffer *a6, __CVBuffer *a7, int a8, int64x2_t a9, int8x16_t a10, int64x2_t a11, simd_float4 a12, simd_float4 a13, simd_float4 a14, int8x16_t a15, __int128 a16, __int128 a17, __int128 a18, __int128 a19, _QWORD *a20)
{
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  uint32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  uint32x4_t v36;
  float32x4_t v37;
  float32x2_t v38;
  uint32x2_t v39;
  NSObject *v40;
  const char *v41;
  NSObject *v42;
  const char *v43;
  uint64_t v44;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57[4];
  char v58;
  simd_float4 v59[4];
  char v60;
  uint8_t buf[4];
  const char *v62;
  __int16 v63;
  int v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v53 = (float32x4_t)a16;
  v54 = (float32x4_t)a17;
  v55 = (float32x4_t)a18;
  v56 = (float32x4_t)a19;
  if (!a1 || !a2 || !a3)
  {
    if (qword_2569302D8 != -1)
      dispatch_once(&qword_2569302D8, &unk_250AD5DC0);
    v42 = qword_2569302D0;
    if (!os_log_type_enabled((os_log_t)qword_2569302D0, OS_LOG_TYPE_ERROR))
      return 4294967294;
    *(_DWORD *)buf = 136315394;
    v62 = "OCPointCloudCreateFromSparseAndDenseDepthWithBoundingBox";
    v63 = 1026;
    v64 = 1760;
    v43 = "%s:%{public}d Invalid input pointcloud.";
LABEL_22:
    _os_log_error_impl(&dword_239388000, v42, OS_LOG_TYPE_ERROR, v43, buf, 0x12u);
    return 4294967294;
  }
  if ((sub_2393B0E3C(pixelBuffer, a5, a6, a7, a8, (uint64_t)a20) & 1) == 0)
  {
    if (qword_2569302D8 != -1)
      dispatch_once(&qword_2569302D8, &unk_250AD5DC0);
    v42 = qword_2569302D0;
    if (!os_log_type_enabled((os_log_t)qword_2569302D0, OS_LOG_TYPE_ERROR))
      return 4294967294;
    *(_DWORD *)buf = 136315394;
    v62 = "OCPointCloudCreateFromSparseAndDenseDepthWithBoundingBox";
    v63 = 1026;
    v64 = 1766;
    v43 = "%s:%{public}d Failed to create pointcloud - invalid input.";
    goto LABEL_22;
  }
  if ((sub_2393BBC44((uint64_t)&v53) & 1) == 0)
  {
    if (qword_2569302D8 != -1)
      dispatch_once(&qword_2569302D8, &unk_250AD5DC0);
    v40 = qword_2569302D0;
    if (!os_log_type_enabled((os_log_t)qword_2569302D0, OS_LOG_TYPE_DEBUG))
      return 4294967294;
    *(_DWORD *)buf = 136315394;
    v62 = "OCPointCloudCreateFromSparseAndDenseDepthWithBoundingBox";
    v63 = 1026;
    v64 = 1771;
    v41 = "%s:%{public}d Invalid bounding box transform.";
    goto LABEL_29;
  }
  v28 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 16);
  v29 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 32);
  v30 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
  v31 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v30, vabdq_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32((float32x4_t)a12, *(float32x2_t *)a12.f32, 1), (float32x4_t)a13, *(float32x2_t *)a13.f32, 1), (float32x4_t)a14, *(float32x2_t *)a14.f32, 1), v28)), (int8x16_t)vcgeq_f32(v30, vabdq_f32(vmlaq_n_f32(vmlaq_n_f32(
                                           vmulq_n_f32((float32x4_t)a12, a12.f32[0]),
                                           (float32x4_t)a13,
                                           a13.f32[0]),
                                         (float32x4_t)a14,
                                         a14.f32[0]),
                                       *MEMORY[0x24BDAEDF8]))),
                      (int8x16_t)vcgeq_f32(v30, vabdq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32((float32x4_t)a12, (float32x4_t)a12, 2), (float32x4_t)a13, (float32x4_t)a13, 2), (float32x4_t)a14, (float32x4_t)a14, 2), v29)));
  v31.i32[3] = v31.i32[2];
  if ((vminvq_u32(v31) & 0x80000000) != 0)
  {
    v32 = (float32x4_t)vdupq_laneq_s32((int32x4_t)a13, 2);
    v33 = (float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)a12, (int32x4_t)a14), (int32x4_t)v32);
    v34 = (float32x4_t)vtrn2q_s32((int32x4_t)a12, (int32x4_t)a13);
    v34.i32[2] = a14.i32[1];
    v35 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)a12, (int32x4_t)a14), (int32x4_t)a13);
    v36 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v30, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v35, a13.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a13.f32, 1), v34), v32, v33), v28)), (int8x16_t)vcgeq_f32(v30, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v35, a12.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a12.f32, 1),
                                             v34),
                                           (float32x4_t)vdupq_laneq_s32((int32x4_t)a12, 2),
                                           v33),
                                         *MEMORY[0x24BDAEDF8]))),
                        (int8x16_t)vcgeq_f32(v30, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v35, a14.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.f32, 1), v34), (float32x4_t)vdupq_laneq_s32((int32x4_t)a14, 2), v33), v29)));
    v36.i32[3] = v36.i32[2];
    if ((vminvq_u32(v36) & 0x80000000) != 0)
    {
      v37 = vmulq_f32((float32x4_t)a12, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)a14, (int8x16_t)a14, 0xCuLL), (int8x16_t)a14, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a13, (int32x4_t)a13), (int8x16_t)a13, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a14, (int32x4_t)a14), (int8x16_t)a14, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)a13, (int8x16_t)a13, 0xCuLL), (int8x16_t)a13, 8uLL)));
      if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v37, 2), vaddq_f32(v37, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v37.f32, 1))).f32[0]+ -1.0) <= 0.000011)
      {
        v38 = (float32x2_t)vdup_n_s32(0x38D1B717u);
        v39 = (uint32x2_t)vand_s8((int8x8_t)vcge_f32(v38, vabs_f32(vadd_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a14, (int8x16_t)a14, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(a15, a15, 8uLL)), (float32x2_t)0xBF80000080000000))), (int8x8_t)vcge_f32(v38, vabs_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a12, (int8x16_t)a12, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(
                                                                                         (int8x16_t)a13,
                                                                                         (int8x16_t)a13,
                                                                                         8uLL)))));
        if ((vpmin_u32(v39, v39).u32[0] & 0x80000000) != 0)
        {
          kdebug_trace();
          v59[0] = a12;
          v59[1] = a13;
          v59[2] = a14;
          v59[3] = (simd_float4)a15;
          v60 = 1;
          v57[0] = v53;
          v57[1] = v54;
          v57[2] = v55;
          v57[3] = v56;
          v58 = 1;
          v44 = sub_2393B1388(a1, a2, a3, pixelBuffer, a5, a6, a7, a8, a9, a10, a11, 0.0, 0, v59, v57, a20);
          kdebug_trace();
          return v44;
        }
      }
    }
  }
  if (qword_2569302D8 != -1)
    dispatch_once(&qword_2569302D8, &unk_250AD5DC0);
  v40 = qword_2569302D0;
  if (os_log_type_enabled((os_log_t)qword_2569302D0, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    v62 = "OCPointCloudCreateFromSparseAndDenseDepthWithBoundingBox";
    v63 = 1026;
    v64 = 1776;
    v41 = "%s:%{public}d Invalid camera to world transform.";
LABEL_29:
    _os_log_debug_impl(&dword_239388000, v40, OS_LOG_TYPE_DEBUG, v41, buf, 0x12u);
  }
  return 4294967294;
}

uint64_t OCPointCloudCreateFromSparseAndDenseDepthWithPlaneClassification(unsigned int a1, uint64_t a2, uint64_t a3, CVPixelBufferRef pixelBuffer, __CVBuffer *a5, __CVBuffer *a6, __CVBuffer *a7, int a8, int64x2_t a9, int8x16_t a10, int64x2_t a11, simd_float4 a12, simd_float4 a13, simd_float4 a14, int8x16_t a15, float a16, uint64_t a17, _QWORD *a18)
{
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  uint32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  uint32x4_t v35;
  float32x4_t v36;
  float32x2_t v37;
  uint32x2_t v38;
  uint64_t v39;
  NSObject *v40;
  const char *v41;
  float32x4_t v50[4];
  char v51;
  simd_float4 v52[4];
  char v53;
  uint8_t buf[4];
  const char *v55;
  __int16 v56;
  int v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  if (!a1 || !a2 || !a3)
  {
    if (qword_2569302D8 != -1)
      dispatch_once(&qword_2569302D8, &unk_250AD5DC0);
    v40 = qword_2569302D0;
    if (!os_log_type_enabled((os_log_t)qword_2569302D0, OS_LOG_TYPE_ERROR))
      return 4294967294;
    *(_DWORD *)buf = 136315394;
    v55 = "OCPointCloudCreateFromSparseAndDenseDepthWithPlaneClassification";
    v56 = 1026;
    v57 = 1802;
    v41 = "%s:%{public}d Invalid input pointcloud.";
    goto LABEL_24;
  }
  if ((sub_2393B0E3C(pixelBuffer, a5, a6, a7, a8, (uint64_t)a18) & 1) == 0)
  {
    if (qword_2569302D8 != -1)
      dispatch_once(&qword_2569302D8, &unk_250AD5DC0);
    v40 = qword_2569302D0;
    if (!os_log_type_enabled((os_log_t)qword_2569302D0, OS_LOG_TYPE_ERROR))
      return 4294967294;
    *(_DWORD *)buf = 136315394;
    v55 = "OCPointCloudCreateFromSparseAndDenseDepthWithPlaneClassification";
    v56 = 1026;
    v57 = 1808;
    v41 = "%s:%{public}d Failed to create pointcloud - invalid input.";
    goto LABEL_24;
  }
  if (!a17)
    goto LABEL_20;
  v27 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 16);
  v28 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 32);
  v29 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
  v30 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v29, vabdq_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32((float32x4_t)a12, *(float32x2_t *)a12.f32, 1), (float32x4_t)a13, *(float32x2_t *)a13.f32, 1), (float32x4_t)a14, *(float32x2_t *)a14.f32, 1), v27)), (int8x16_t)vcgeq_f32(v29, vabdq_f32(vmlaq_n_f32(vmlaq_n_f32(
                                           vmulq_n_f32((float32x4_t)a12, a12.f32[0]),
                                           (float32x4_t)a13,
                                           a13.f32[0]),
                                         (float32x4_t)a14,
                                         a14.f32[0]),
                                       *MEMORY[0x24BDAEDF8]))),
                      (int8x16_t)vcgeq_f32(v29, vabdq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32((float32x4_t)a12, (float32x4_t)a12, 2), (float32x4_t)a13, (float32x4_t)a13, 2), (float32x4_t)a14, (float32x4_t)a14, 2), v28)));
  v30.i32[3] = v30.i32[2];
  if ((vminvq_u32(v30) & 0x80000000) == 0)
    goto LABEL_20;
  v31 = (float32x4_t)vdupq_laneq_s32((int32x4_t)a13, 2);
  v32 = (float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)a12, (int32x4_t)a14), (int32x4_t)v31);
  v33 = (float32x4_t)vtrn2q_s32((int32x4_t)a12, (int32x4_t)a13);
  v33.i32[2] = a14.i32[1];
  v34 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)a12, (int32x4_t)a14), (int32x4_t)a13);
  v35 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v29, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v34, a13.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a13.f32, 1), v33), v31, v32), v27)), (int8x16_t)vcgeq_f32(v29, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v34, a12.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a12.f32, 1),
                                           v33),
                                         (float32x4_t)vdupq_laneq_s32((int32x4_t)a12, 2),
                                         v32),
                                       *MEMORY[0x24BDAEDF8]))),
                      (int8x16_t)vcgeq_f32(v29, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v34, a14.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.f32, 1), v33), (float32x4_t)vdupq_laneq_s32((int32x4_t)a14, 2), v32), v28)));
  v35.i32[3] = v35.i32[2];
  if ((vminvq_u32(v35) & 0x80000000) == 0
    || (v36 = vmulq_f32((float32x4_t)a12, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)a14, (int8x16_t)a14, 0xCuLL), (int8x16_t)a14, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a13, (int32x4_t)a13), (int8x16_t)a13, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a14, (int32x4_t)a14), (int8x16_t)a14, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)a13, (int8x16_t)a13, 0xCuLL), (int8x16_t)a13, 8uLL))), fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v36, 2), vaddq_f32(v36, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v36.f32, 1))).f32[0]+ -1.0) > 0.000011)|| a16 < 0.0|| (v37 = (float32x2_t)vdup_n_s32(0x38D1B717u), v38 = (uint32x2_t)vand_s8((int8x8_t)vcge_f32(
                                        v37,
                                        vabs_f32(vadd_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a14, (int8x16_t)a14, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(a15, a15, 8uLL)), (float32x2_t)0xBF80000080000000))), (int8x8_t)vcge_f32(v37, vabs_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a12, (int8x16_t)a12, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a13, (int8x16_t)a13, 8uLL))))),
        (vpmin_u32(v38, v38).u32[0] & 0x80000000) == 0))
  {
LABEL_20:
    if (qword_2569302D8 != -1)
      dispatch_once(&qword_2569302D8, &unk_250AD5DC0);
    v40 = qword_2569302D0;
    if (!os_log_type_enabled((os_log_t)qword_2569302D0, OS_LOG_TYPE_ERROR))
      return 4294967294;
    *(_DWORD *)buf = 136315394;
    v55 = "OCPointCloudCreateFromSparseAndDenseDepthWithPlaneClassification";
    v56 = 1026;
    v57 = 1815;
    v41 = "%s:%{public}d Invalid plane data.";
LABEL_24:
    _os_log_error_impl(&dword_239388000, v40, OS_LOG_TYPE_ERROR, v41, buf, 0x12u);
    return 4294967294;
  }
  kdebug_trace();
  v52[0] = a12;
  v52[1] = a13;
  v52[2] = a14;
  v52[3] = (simd_float4)a15;
  v53 = 1;
  v50[0].i8[0] = 0;
  v51 = 0;
  v39 = sub_2393B1388(a1, a2, a3, pixelBuffer, a5, a6, a7, a8, a9, a10, a11, a16, a17, v52, v50, a18);
  kdebug_trace();
  return v39;
}

uint64_t OCPointCloudCreateFromSparseAndDenseDepthWithPlaneClassificationAndBoundingBox(unsigned int a1, uint64_t a2, uint64_t a3, CVPixelBufferRef pixelBuffer, __CVBuffer *a5, __CVBuffer *a6, __CVBuffer *a7, int a8, int64x2_t a9, int8x16_t a10, int64x2_t a11, simd_float4 a12, simd_float4 a13, simd_float4 a14, int8x16_t a15, float a16, uint64_t a17, uint64_t a18, __int128 a19, __int128 a20,__int128 a21,__int128 a22,_QWORD *a23)
{
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  uint32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  uint32x4_t v40;
  float32x4_t v41;
  float32x2_t v42;
  uint32x2_t v43;
  uint64_t v44;
  NSObject *v45;
  const char *v46;
  NSObject *v48;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60[4];
  char v61;
  simd_float4 v62[4];
  char v63;
  uint8_t buf[4];
  const char *v65;
  __int16 v66;
  int v67;
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  v56 = (float32x4_t)a19;
  v57 = (float32x4_t)a20;
  v58 = (float32x4_t)a21;
  v59 = (float32x4_t)a22;
  if (!a1 || !a2 || !a3)
  {
    if (qword_2569302D8 != -1)
      dispatch_once(&qword_2569302D8, &unk_250AD5DC0);
    v45 = qword_2569302D0;
    if (!os_log_type_enabled((os_log_t)qword_2569302D0, OS_LOG_TYPE_ERROR))
      return 4294967294;
    *(_DWORD *)buf = 136315394;
    v65 = "OCPointCloudCreateFromSparseAndDenseDepthWithPlaneClassificationAndBoundingBox";
    v66 = 1026;
    v67 = 1842;
    v46 = "%s:%{public}d Invalid input pointcloud.";
LABEL_25:
    _os_log_error_impl(&dword_239388000, v45, OS_LOG_TYPE_ERROR, v46, buf, 0x12u);
    return 4294967294;
  }
  if ((sub_2393B0E3C(pixelBuffer, a5, a6, a7, a8, (uint64_t)a23) & 1) == 0)
  {
    if (qword_2569302D8 != -1)
      dispatch_once(&qword_2569302D8, &unk_250AD5DC0);
    v45 = qword_2569302D0;
    if (!os_log_type_enabled((os_log_t)qword_2569302D0, OS_LOG_TYPE_ERROR))
      return 4294967294;
    *(_DWORD *)buf = 136315394;
    v65 = "OCPointCloudCreateFromSparseAndDenseDepthWithPlaneClassificationAndBoundingBox";
    v66 = 1026;
    v67 = 1848;
    v46 = "%s:%{public}d Failed to create pointcloud - invalid input.";
    goto LABEL_25;
  }
  if (!a17)
    goto LABEL_21;
  v32 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 16);
  v33 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 32);
  v34 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
  v35 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v34, vabdq_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32((float32x4_t)a12, *(float32x2_t *)a12.f32, 1), (float32x4_t)a13, *(float32x2_t *)a13.f32, 1), (float32x4_t)a14, *(float32x2_t *)a14.f32, 1), v32)), (int8x16_t)vcgeq_f32(v34, vabdq_f32(vmlaq_n_f32(vmlaq_n_f32(
                                           vmulq_n_f32((float32x4_t)a12, a12.f32[0]),
                                           (float32x4_t)a13,
                                           a13.f32[0]),
                                         (float32x4_t)a14,
                                         a14.f32[0]),
                                       *MEMORY[0x24BDAEDF8]))),
                      (int8x16_t)vcgeq_f32(v34, vabdq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32((float32x4_t)a12, (float32x4_t)a12, 2), (float32x4_t)a13, (float32x4_t)a13, 2), (float32x4_t)a14, (float32x4_t)a14, 2), v33)));
  v35.i32[3] = v35.i32[2];
  if ((vminvq_u32(v35) & 0x80000000) == 0)
    goto LABEL_21;
  v36 = (float32x4_t)vdupq_laneq_s32((int32x4_t)a13, 2);
  v37 = (float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)a12, (int32x4_t)a14), (int32x4_t)v36);
  v38 = (float32x4_t)vtrn2q_s32((int32x4_t)a12, (int32x4_t)a13);
  v38.i32[2] = a14.i32[1];
  v39 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)a12, (int32x4_t)a14), (int32x4_t)a13);
  v40 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v34, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v39, a13.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a13.f32, 1), v38), v36, v37), v32)), (int8x16_t)vcgeq_f32(v34, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v39, a12.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a12.f32, 1),
                                           v38),
                                         (float32x4_t)vdupq_laneq_s32((int32x4_t)a12, 2),
                                         v37),
                                       *MEMORY[0x24BDAEDF8]))),
                      (int8x16_t)vcgeq_f32(v34, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v39, a14.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.f32, 1), v38), (float32x4_t)vdupq_laneq_s32((int32x4_t)a14, 2), v37), v33)));
  v40.i32[3] = v40.i32[2];
  if ((vminvq_u32(v40) & 0x80000000) == 0
    || (v41 = vmulq_f32((float32x4_t)a12, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)a14, (int8x16_t)a14, 0xCuLL), (int8x16_t)a14, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a13, (int32x4_t)a13), (int8x16_t)a13, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a14, (int32x4_t)a14), (int8x16_t)a14, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)a13, (int8x16_t)a13, 0xCuLL), (int8x16_t)a13, 8uLL))), fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v41, 2), vaddq_f32(v41, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v41.f32, 1))).f32[0]+ -1.0) > 0.000011)|| a16 < 0.0|| (v42 = (float32x2_t)vdup_n_s32(0x38D1B717u), v43 = (uint32x2_t)vand_s8((int8x8_t)vcge_f32(
                                        v42,
                                        vabs_f32(vadd_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a14, (int8x16_t)a14, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(a15, a15, 8uLL)), (float32x2_t)0xBF80000080000000))), (int8x8_t)vcge_f32(v42, vabs_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a12, (int8x16_t)a12, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a13, (int8x16_t)a13, 8uLL))))),
        (vpmin_u32(v43, v43).u32[0] & 0x80000000) == 0))
  {
LABEL_21:
    if (qword_2569302D8 != -1)
      dispatch_once(&qword_2569302D8, &unk_250AD5DC0);
    v45 = qword_2569302D0;
    if (!os_log_type_enabled((os_log_t)qword_2569302D0, OS_LOG_TYPE_ERROR))
      return 4294967294;
    *(_DWORD *)buf = 136315394;
    v65 = "OCPointCloudCreateFromSparseAndDenseDepthWithPlaneClassificationAndBoundingBox";
    v66 = 1026;
    v67 = 1855;
    v46 = "%s:%{public}d Invalid plane data.";
    goto LABEL_25;
  }
  if ((sub_2393BBC44((uint64_t)&v56) & 1) == 0)
  {
    if (qword_2569302D8 != -1)
      dispatch_once(&qword_2569302D8, &unk_250AD5DC0);
    v48 = qword_2569302D0;
    if (os_log_type_enabled((os_log_t)qword_2569302D0, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      v65 = "OCPointCloudCreateFromSparseAndDenseDepthWithPlaneClassificationAndBoundingBox";
      v66 = 1026;
      v67 = 1860;
      _os_log_debug_impl(&dword_239388000, v48, OS_LOG_TYPE_DEBUG, "%s:%{public}d Invalid bounding box transform.", buf, 0x12u);
    }
    return 4294967294;
  }
  kdebug_trace();
  v62[0] = a12;
  v62[1] = a13;
  v62[2] = a14;
  v62[3] = (simd_float4)a15;
  v63 = 1;
  v60[0] = v56;
  v60[1] = v57;
  v60[2] = v58;
  v60[3] = v59;
  v61 = 1;
  v44 = sub_2393B1388(a1, a2, a3, pixelBuffer, a5, a6, a7, a8, a9, a10, a11, a16, a17, v62, v60, a23);
  kdebug_trace();
  return v44;
}

CFTypeRef OCPointCloudRetain(CFTypeRef cf)
{
  if (cf)
    CFRetain(cf);
  return cf;
}

uint64_t OCPointCloudSize(uint64_t a1)
{
  uint64_t result;
  NSObject *v2;
  int v3;
  const char *v4;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a1)
    return -1431655765 * ((*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 4);
  if (qword_2569302D8 != -1)
    dispatch_once(&qword_2569302D8, &unk_250AD5DC0);
  v2 = qword_2569302D0;
  result = os_log_type_enabled((os_log_t)qword_2569302D0, OS_LOG_TYPE_ERROR);
  if ((_DWORD)result)
  {
    v3 = 136315394;
    v4 = "OCPointCloudSize";
    v5 = 1026;
    v6 = 1896;
    _os_log_error_impl(&dword_239388000, v2, OS_LOG_TYPE_ERROR, "%s:%{public}d Invalid pointcloud.", (uint8_t *)&v3, 0x12u);
    return 0;
  }
  return result;
}

uint64_t OCPointCloudPoints(uint64_t a1)
{
  uint64_t result;
  NSObject *v3;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (!a1 || (result = *(_QWORD *)(a1 + 96), result == *(_QWORD *)(a1 + 104)))
  {
    if (qword_2569302D8 != -1)
      dispatch_once(&qword_2569302D8, &unk_250AD5DC0);
    v3 = qword_2569302D0;
    if (os_log_type_enabled((os_log_t)qword_2569302D0, OS_LOG_TYPE_ERROR))
    {
      v4 = 136315394;
      v5 = "OCPointCloudPoints";
      v6 = 1026;
      v7 = 1905;
      _os_log_error_impl(&dword_239388000, v3, OS_LOG_TYPE_ERROR, "%s:%{public}d Invalid pointcloud.", (uint8_t *)&v4, 0x12u);
    }
    return 0;
  }
  return result;
}

uint64_t OCPointCloudPointSupplements(uint64_t a1)
{
  uint64_t result;
  NSObject *v3;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (!a1 || (result = *(_QWORD *)(a1 + 120), result == *(_QWORD *)(a1 + 128)))
  {
    if (qword_2569302D8 != -1)
      dispatch_once(&qword_2569302D8, &unk_250AD5DC0);
    v3 = qword_2569302D0;
    if (os_log_type_enabled((os_log_t)qword_2569302D0, OS_LOG_TYPE_ERROR))
    {
      v4 = 136315394;
      v5 = "OCPointCloudPointSupplements";
      v6 = 1026;
      v7 = 1914;
      _os_log_error_impl(&dword_239388000, v3, OS_LOG_TYPE_ERROR, "%s:%{public}d Invalid pointcloud.", (uint8_t *)&v4, 0x12u);
    }
    return 0;
  }
  return result;
}

double OCPointCloudGetData@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  NSObject *v7;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    *(_DWORD *)a2 = *(_DWORD *)(a1 + 16);
    v3 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(a2 + 80) = -1431655765 * ((unint64_t)(*(_QWORD *)(a1 + 104) - v3) >> 4);
    v4 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a2 + 32) = v4;
    v5 = *(_OWORD *)(a1 + 64);
    v6 = *(_OWORD *)(a1 + 80);
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v6;
    *(_QWORD *)(a2 + 88) = v3;
  }
  else
  {
    if (qword_2569302D8 != -1)
      dispatch_once(&qword_2569302D8, &unk_250AD5DC0);
    v7 = qword_2569302D0;
    if (os_log_type_enabled((os_log_t)qword_2569302D0, OS_LOG_TYPE_ERROR))
    {
      v9 = 136315394;
      v10 = "OCPointCloudGetData";
      v11 = 1026;
      v12 = 1924;
      _os_log_error_impl(&dword_239388000, v7, OS_LOG_TYPE_ERROR, "%s:%{public}d Invalid pointcloud.", (uint8_t *)&v9, 0x12u);
    }
    *(_QWORD *)&v5 = 0;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return *(double *)&v5;
}

float OCPointCloudScale(uint64_t a1)
{
  float v1;
  NSObject *v2;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (a1)
    return *(float *)(a1 + 16);
  if (qword_2569302D8 != -1)
    dispatch_once(&qword_2569302D8, &unk_250AD5DC0);
  v2 = qword_2569302D0;
  v1 = 0.0;
  if (os_log_type_enabled((os_log_t)qword_2569302D0, OS_LOG_TYPE_ERROR))
  {
    v4 = 136315394;
    v5 = "OCPointCloudScale";
    v6 = 1026;
    v7 = 1938;
    _os_log_error_impl(&dword_239388000, v2, OS_LOG_TYPE_ERROR, "%s:%{public}d Invalid pointcloud.", (uint8_t *)&v4, 0x12u);
  }
  return v1;
}

double OCPointCloudTransformMatrix(float32x4_t *a1)
{
  double result;
  NSObject *v2;
  int v3;
  const char *v4;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    *(_QWORD *)&result = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(a1[2], a1[1].f32[0]), (float32x4_t)0, a1[3]), (float32x4_t)0, a1[4]), (float32x4_t)0, a1[5]).u64[0];
  }
  else
  {
    if (qword_2569302D8 != -1)
      dispatch_once(&qword_2569302D8, &unk_250AD5DC0);
    v2 = qword_2569302D0;
    if (os_log_type_enabled((os_log_t)qword_2569302D0, OS_LOG_TYPE_ERROR))
    {
      v3 = 136315394;
      v4 = "OCPointCloudTransformMatrix";
      v5 = 1026;
      v6 = 1947;
      _os_log_error_impl(&dword_239388000, v2, OS_LOG_TYPE_ERROR, "%s:%{public}d Invalid pointcloud.", (uint8_t *)&v3, 0x12u);
    }
    return 0.0;
  }
  return result;
}

double sub_2393B5BC8(uint64_t a1, uint64_t a2, float32x4_t a3)
{
  float32x4_t *v3;
  uint64_t v4;
  unint64_t v5;
  float v6;
  float v7;
  float32x4_t *v8;
  float32x4_t v9;
  float v10;
  float32x4_t v11;
  float v12;
  float32x4_t v13;
  double result;

  v3 = *(float32x4_t **)(a1 + 8);
  a3.i32[0] = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a1 + 16) - (_QWORD)v3;
  if (v4)
  {
    v5 = v4 / 48;
    v7 = *(float *)(a2 + 4);
    v6 = *(float *)(a2 + 8);
    if (v5 <= 1)
      v5 = 1;
    v8 = v3 + 1;
    v9.i64[0] = 0;
    v9.i32[2] = 0;
    v10 = 3.4028e38;
    v11 = 0uLL;
    do
    {
      v12 = sqrtf((float)((float)((float)(a3.f32[0] - COERCE_FLOAT(*(_OWORD *)&v8[-1]))* (float)(a3.f32[0] - COERCE_FLOAT(*(_OWORD *)&v8[-1])))+ (float)((float)(v7 - COERCE_FLOAT(HIDWORD(v8[-1].i64[0])))* (float)(v7 - COERCE_FLOAT(HIDWORD(v8[-1].i64[0])))))+ (float)((float)(v6 - COERCE_FLOAT(v8[-1].i64[1])) * (float)(v6 - COERCE_FLOAT(v8[-1].i64[1]))));
      if (v10 > v12)
      {
        v11 = *v8;
        v9 = v8[-1];
        v10 = v12;
      }
      v8 += 3;
      --v5;
    }
    while (v5);
  }
  else
  {
    v7 = *(float *)(a2 + 4);
    v6 = *(float *)(a2 + 8);
    v11 = 0uLL;
    v9.i64[0] = 0;
    v9.i32[2] = 0;
  }
  a3.f32[1] = v7;
  *(float32x2_t *)a3.f32 = vsub_f32(*(float32x2_t *)a3.f32, *(float32x2_t *)v9.f32);
  a3.f32[2] = v6 - v9.f32[2];
  v13 = vmulq_f32(v11, a3);
  *(_QWORD *)&result = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1))).u64[0];
  return result;
}

_QWORD *sub_2393B5CA0(_QWORD *a1)
{
  void *v2;

  *a1 = off_250AD5F48;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_2393B5CDC(_QWORD *a1)
{
  void *v2;

  *a1 = off_250AD5F48;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x23B83C4BCLL);
}

void sub_2393B5D28(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  __int128 v17;
  __int128 v18;

  v5 = a1[1];
  v4 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 4) >= a2)
  {
    if (a2)
    {
      v12 = 48 * ((48 * a2 - 48) / 0x30) + 48;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 4);
    v8 = v7 + a2;
    if (v7 + a2 > 0x555555555555555)
      abort();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v6) >> 4);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x2AAAAAAAAAAAAAALL)
      v10 = 0x555555555555555;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x555555555555555)
        sub_23938C4B8();
      v11 = (char *)operator new(48 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[48 * v7];
    v14 = &v11[48 * v10];
    v15 = 48 * ((48 * a2 - 48) / 0x30) + 48;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        v17 = *((_OWORD *)v5 - 3);
        v18 = *((_OWORD *)v5 - 1);
        *((_OWORD *)v13 - 2) = *((_OWORD *)v5 - 2);
        *((_OWORD *)v13 - 1) = v18;
        *((_OWORD *)v13 - 3) = v17;
        v13 -= 48;
        v5 -= 48;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v14;
    if (v5)
      operator delete(v5);
  }
}

void sub_2393B5EC0(char **a1, unint64_t a2, uint64_t a3, float *a4)
{
  uint64_t v4;
  char *v8;
  uint64_t v9;
  char **v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  float *v17;
  float v18;
  float v19;
  float v20;
  float v21;
  _BOOL4 v22;
  float *v23;
  float v24;
  float v25;
  float v26;
  unint64_t v28;
  uint64_t v29;
  float v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  float v51;
  float v52;
  float v53;
  BOOL v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  unint64_t v60;
  char *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  _OWORD *v70;
  char *v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  __int128 v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  __int128 v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    v4 = 2 * a2;
    if ((2 * a2) >> 61)
LABEL_155:
      abort();
    v8 = (char *)operator new(16 * a2);
    v9 = 0;
    v10 = a1;
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[8 * v4];
    v11 = v8;
    v12 = v8;
    v13 = v8;
    v93 = a3;
    v94 = a2;
    v14 = a2;
    while (1)
    {
      v15 = v9 + 1;
      if (v9 + 1 == v14)
        v16 = 0;
      else
        v16 = v9 + 1;
      if (v14 <= v16)
        sub_2393B680C();
      v17 = (float *)(a3 + 8 * v9);
      v18 = a4[1];
      v19 = a4[2] - *a4;
      v20 = a4[3] - v18;
      v21 = (float)(v19 * (float)(v18 - v17[1])) - (float)((float)(*a4 - *v17) * v20);
      v22 = v21 < 0.0 || fabsf(v21 / sqrtf((float)(v19 * v19) + (float)(v20 * v20))) <= 0.000001;
      v23 = (float *)(a3 + 8 * v16);
      v24 = v23[1];
      v25 = (float)(v19 * (float)(v18 - v24)) - (float)((float)(*a4 - *v23) * v20);
      if (v25 >= 0.0)
      {
        v26 = fabsf(v25 / sqrtf((float)(v19 * v19) + (float)(v20 * v20)));
        if (v26 <= 0.000001 && v22)
        {
LABEL_21:
          if (v11 == v8
            || vabds_f32(*((float *)v8 - 2), *v23) > (float)((float)(fabsf(*v23) * 0.00001) + 0.000001)
            || vabds_f32(*((float *)v8 - 1), v24) > (float)((float)(fabsf(v24) * 0.00001) + 0.000001))
          {
            v28 = (unint64_t)v10[2];
            if ((unint64_t)v8 < v28)
            {
              *(_QWORD *)v8 = *(_QWORD *)v23;
              v12 = v8 + 8;
              goto LABEL_69;
            }
            v32 = (v8 - v11) >> 3;
            v33 = v32 + 1;
            if ((unint64_t)(v32 + 1) >> 61)
              goto LABEL_155;
            v34 = v28 - (_QWORD)v11;
            if (v34 >> 2 > v33)
              v33 = v34 >> 2;
            if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
              v35 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v35 = v33;
            if (v35)
            {
              if (v35 >> 61)
                goto LABEL_156;
              v36 = operator new(8 * v35);
              v10 = a1;
            }
            else
            {
              v36 = 0;
            }
            v44 = &v36[8 * v32];
            *(_QWORD *)v44 = *(_QWORD *)v23;
            v12 = v44 + 8;
            if (v11 == v8)
            {
              v11 = &v36[8 * v32];
              a3 = v93;
            }
            else
            {
              v45 = v8 - 8 - v11;
              if (v45 < 0x168
                || &v36[v8 - v11 - 8 - (v45 & 0xFFFFFFFFFFFFFFF8)] > &v36[v8 - v11 - 8]
                || &v8[-(v45 & 0xFFFFFFFFFFFFFFF8) - 8] > v8 - 8
                || (unint64_t)(v11 - v36) < 0x20)
              {
                v46 = v8;
                a3 = v93;
                goto LABEL_63;
              }
              v69 = (v45 >> 3) + 1;
              v46 = &v8[-8 * (v69 & 0x3FFFFFFFFFFFFFFCLL)];
              v70 = &v36[8 * v32 - 16];
              v71 = v8 - 16;
              v72 = v69 & 0x3FFFFFFFFFFFFFFCLL;
              a3 = v93;
              do
              {
                v73 = *(_OWORD *)v71;
                *(v70 - 1) = *((_OWORD *)v71 - 1);
                *v70 = v73;
                v70 -= 2;
                v71 -= 32;
                v72 -= 4;
              }
              while (v72);
              v44 -= 8 * (v69 & 0x3FFFFFFFFFFFFFFCLL);
              if (v69 != (v69 & 0x3FFFFFFFFFFFFFFCLL))
              {
                do
                {
LABEL_63:
                  v47 = *((_QWORD *)v46 - 1);
                  v46 -= 8;
                  *((_QWORD *)v44 - 1) = v47;
                  v44 -= 8;
                }
                while (v46 != v11);
              }
              v8 = *v10;
              v11 = v44;
            }
            *v10 = v11;
            v10[1] = v12;
            v10[2] = &v36[8 * v35];
            if (v8)
            {
              operator delete(v8);
              v10 = a1;
            }
            v14 = v94;
LABEL_69:
            v10[1] = v12;
            v8 = v12;
          }
          else
          {
            v12 = v8;
          }
          v13 = v11;
          goto LABEL_6;
        }
        if (v26 > 0.000001)
        {
          if (!v22)
            goto LABEL_6;
          v98 = 0;
          v42 = *(_QWORD *)v23;
          v96 = *(_QWORD *)v17;
          v97 = v42;
          sub_2393B6818(a4, (float *)&v96, (float *)&v98);
          if (v13 != v12
            && vabds_f32(*((float *)v12 - 2), *(float *)&v98) <= (float)((float)(fabsf(*(float *)&v98) * 0.00001)
                                                                       + 0.000001)
            && vabds_f32(*((float *)v12 - 1), *((float *)&v98 + 1)) <= (float)((float)(fabsf(*((float *)&v98 + 1))
                                                                                     * 0.00001)
                                                                             + 0.000001))
          {
            v10 = a1;
            goto LABEL_6;
          }
          v10 = a1;
          v43 = (unint64_t)a1[2];
          if ((unint64_t)v12 >= v43)
          {
            v64 = (v12 - v13) >> 3;
            v65 = v64 + 1;
            if ((unint64_t)(v64 + 1) >> 61)
              goto LABEL_155;
            v66 = v43 - (_QWORD)v13;
            if (v66 >> 2 > v65)
              v65 = v66 >> 2;
            if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF8)
              v67 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v67 = v65;
            if (v67)
            {
              if (v67 >> 61)
LABEL_156:
                sub_23938C4B8();
              v68 = (char *)operator new(8 * v67);
              v10 = a1;
            }
            else
            {
              v68 = 0;
            }
            v11 = &v68[8 * v64];
            *(_QWORD *)v11 = v98;
            v8 = v11 + 8;
            if (v13 != v12)
            {
              v84 = v12 - 8 - v13;
              if (v84 < 0x168
                || &v68[v12 - v13 - 8 - (v84 & 0xFFFFFFFFFFFFFFF8)] > &v68[v12 - v13 - 8]
                || &v12[-(v84 & 0xFFFFFFFFFFFFFFF8) - 8] > v12 - 8
                || (unint64_t)(v13 - v68) < 0x20)
              {
                v85 = v12;
                a3 = v93;
              }
              else
              {
                v87 = (v84 >> 3) + 1;
                v85 = &v12[-8 * (v87 & 0x3FFFFFFFFFFFFFFCLL)];
                v88 = &v68[8 * v64 - 16];
                v89 = v12 - 16;
                v90 = v87 & 0x3FFFFFFFFFFFFFFCLL;
                a3 = v93;
                do
                {
                  v91 = *(_OWORD *)v89;
                  *((_OWORD *)v88 - 1) = *((_OWORD *)v89 - 1);
                  *(_OWORD *)v88 = v91;
                  v88 -= 32;
                  v89 -= 32;
                  v90 -= 4;
                }
                while (v90);
                v11 -= 8 * (v87 & 0x3FFFFFFFFFFFFFFCLL);
                if (v87 == (v87 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_140:
                  v12 = *v10;
LABEL_142:
                  *v10 = v11;
                  v10[1] = v8;
                  v10[2] = &v68[8 * v67];
                  if (v12)
                  {
                    operator delete(v12);
                    v10 = a1;
                  }
                  v13 = v11;
                  v14 = v94;
                  goto LABEL_5;
                }
              }
              do
              {
                v86 = *((_QWORD *)v85 - 1);
                v85 -= 8;
                *((_QWORD *)v11 - 1) = v86;
                v11 -= 8;
              }
              while (v85 != v13);
              goto LABEL_140;
            }
            a3 = v93;
            goto LABEL_142;
          }
          *(_QWORD *)v12 = v98;
          v8 = v12 + 8;
          goto LABEL_5;
        }
      }
      else if (v22)
      {
        goto LABEL_21;
      }
      v98 = 0;
      v29 = *(_QWORD *)v23;
      v96 = *(_QWORD *)v17;
      v97 = v29;
      sub_2393B6818(a4, (float *)&v96, (float *)&v98);
      if (v13 != v12
        && vabds_f32(*((float *)v12 - 2), *(float *)&v98) <= (float)((float)(fabsf(*(float *)&v98) * 0.00001) + 0.000001))
      {
        v30 = *((float *)&v98 + 1);
        if (vabds_f32(*((float *)v12 - 1), *((float *)&v98 + 1)) <= (float)((float)(fabsf(*((float *)&v98 + 1))
                                                                                   * 0.00001)
                                                                           + 0.000001))
        {
          v51 = *(float *)&v29;
          v10 = a1;
          goto LABEL_86;
        }
      }
      v10 = a1;
      v31 = (unint64_t)a1[2];
      if ((unint64_t)v12 >= v31)
        break;
      *(_QWORD *)v12 = v98;
      v8 = v12 + 8;
LABEL_85:
      v10[1] = v8;
      v30 = *((float *)&v98 + 1);
      v51 = *v23;
      v12 = v8;
      v29 = *(_QWORD *)v23;
LABEL_86:
      v54 = vabds_f32(*(float *)&v98, v51) > (float)((float)(fabsf(v51) * 0.00001) + 0.000001);
      v52 = vabds_f32(v30, *((float *)&v29 + 1));
      v53 = (float)(fabsf(*((float *)&v29 + 1)) * 0.00001) + 0.000001;
      v54 = v54 || v52 > v53;
      if (!v54)
        goto LABEL_6;
      v55 = (unint64_t)v10[2];
      if ((unint64_t)v12 >= v55)
      {
        v56 = (v12 - v13) >> 3;
        v57 = v56 + 1;
        if ((unint64_t)(v56 + 1) >> 61)
          goto LABEL_155;
        v58 = v55 - (_QWORD)v13;
        if (v58 >> 2 > v57)
          v57 = v58 >> 2;
        if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8)
          v57 = 0x1FFFFFFFFFFFFFFFLL;
        v92 = v57;
        if (v57)
        {
          if (v57 >> 61)
            goto LABEL_156;
          v59 = (char *)operator new(8 * v57);
          v29 = *(_QWORD *)v23;
          v10 = a1;
        }
        else
        {
          v59 = 0;
        }
        v11 = &v59[8 * v56];
        *(_QWORD *)v11 = v29;
        v8 = v11 + 8;
        if (v12 == v13)
        {
          a3 = v93;
          v14 = v94;
          v62 = v92;
        }
        else
        {
          v60 = v12 - 8 - v13;
          if (v60 < 0x168
            || &v59[v12 - v13 - 8 - (v60 & 0xFFFFFFFFFFFFFFF8)] > &v59[v12 - v13 - 8]
            || &v12[-(v60 & 0xFFFFFFFFFFFFFFF8) - 8] > v12 - 8
            || (unint64_t)(v13 - v59) < 0x20)
          {
            v61 = v12;
            a3 = v93;
            v14 = v94;
            v62 = v92;
            goto LABEL_108;
          }
          v79 = (v60 >> 3) + 1;
          v61 = &v12[-8 * (v79 & 0x3FFFFFFFFFFFFFFCLL)];
          v80 = &v59[8 * v56 - 16];
          v81 = v12 - 16;
          v82 = v79 & 0x3FFFFFFFFFFFFFFCLL;
          a3 = v93;
          do
          {
            v83 = *(_OWORD *)v81;
            *((_OWORD *)v80 - 1) = *((_OWORD *)v81 - 1);
            *(_OWORD *)v80 = v83;
            v80 -= 32;
            v81 -= 32;
            v82 -= 4;
          }
          while (v82);
          v11 -= 8 * (v79 & 0x3FFFFFFFFFFFFFFCLL);
          v14 = v94;
          v62 = v92;
          if (v79 != (v79 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_108:
              v63 = *((_QWORD *)v61 - 1);
              v61 -= 8;
              *((_QWORD *)v11 - 1) = v63;
              v11 -= 8;
            }
            while (v61 != v13);
          }
          v12 = *v10;
        }
        *v10 = v11;
        v10[1] = v8;
        v10[2] = &v59[8 * v62];
        if (v12)
        {
          operator delete(v12);
          v10 = a1;
        }
        v13 = v11;
        goto LABEL_5;
      }
      *(_QWORD *)v12 = v29;
      v8 = v12 + 8;
LABEL_5:
      v10[1] = v8;
      v12 = v8;
LABEL_6:
      v9 = v15;
      if (v15 == v14)
        return;
    }
    v37 = (v12 - v13) >> 3;
    v38 = v37 + 1;
    if ((unint64_t)(v37 + 1) >> 61)
      goto LABEL_155;
    v39 = v31 - (_QWORD)v13;
    if (v39 >> 2 > v38)
      v38 = v39 >> 2;
    if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
      v40 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v40 = v38;
    if (v40)
    {
      if (v40 >> 61)
        goto LABEL_156;
      v41 = (char *)operator new(8 * v40);
      v10 = a1;
    }
    else
    {
      v41 = 0;
    }
    v11 = &v41[8 * v37];
    *(_QWORD *)v11 = v98;
    v8 = v11 + 8;
    if (v13 == v12)
    {
      a3 = v93;
      goto LABEL_82;
    }
    v48 = v12 - 8 - v13;
    if (v48 >= 0x168
      && &v41[v12 - v13 - 8 - (v48 & 0xFFFFFFFFFFFFFFF8)] <= &v41[v12 - v13 - 8]
      && &v12[-(v48 & 0xFFFFFFFFFFFFFFF8) - 8] <= v12 - 8
      && (unint64_t)(v13 - v41) >= 0x20)
    {
      v74 = (v48 >> 3) + 1;
      v49 = &v12[-8 * (v74 & 0x3FFFFFFFFFFFFFFCLL)];
      v75 = &v41[8 * v37 - 16];
      v76 = v12 - 16;
      v77 = v74 & 0x3FFFFFFFFFFFFFFCLL;
      a3 = v93;
      do
      {
        v78 = *(_OWORD *)v76;
        *((_OWORD *)v75 - 1) = *((_OWORD *)v76 - 1);
        *(_OWORD *)v75 = v78;
        v75 -= 32;
        v76 -= 32;
        v77 -= 4;
      }
      while (v77);
      v11 -= 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
      if (v74 == (v74 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_80;
    }
    else
    {
      v49 = v12;
      a3 = v93;
    }
    do
    {
      v50 = *((_QWORD *)v49 - 1);
      v49 -= 8;
      *((_QWORD *)v11 - 1) = v50;
      v11 -= 8;
    }
    while (v49 != v13);
LABEL_80:
    v12 = *v10;
LABEL_82:
    *v10 = v11;
    v10[1] = v8;
    v10[2] = &v41[8 * v40];
    if (v12)
    {
      operator delete(v12);
      v10 = a1;
    }
    v13 = v11;
    v14 = v94;
    goto LABEL_85;
  }
}

void sub_2393B680C()
{
  std::terminate();
}

float *sub_2393B6818(float *result, float *a2, float *a3)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float *v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  BOOL v20;
  BOOL v21;
  _BOOL4 v22;
  _BOOL4 v23;
  _BOOL4 v24;
  _BOOL4 v25;
  BOOL v26;
  BOOL v27;
  float v28;
  float v29;
  _BOOL4 v30;
  _BOOL4 v31;
  BOOL v32;
  BOOL v33;
  BOOL v34;
  BOOL v35;
  BOOL v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;

  v4 = a2[2];
  v3 = a2[3];
  v6 = *a2;
  v5 = a2[1];
  v7 = result + 2;
  v8 = result[2];
  v10 = *result;
  v9 = result[1];
  v11 = v8 - *result;
  v12 = v4 - *a2;
  v13 = result[3];
  v14 = (float)((float)(v3 - v5) * v11) - (float)(v12 * (float)(v13 - v9));
  v15 = *result - *a2;
  v16 = (float)(v12 * (float)(v9 - v5)) - (float)((float)(v3 - v5) * v15);
  if (fabsf(v14) > 0.000001)
  {
    *a3 = v10 + (float)((float)(v16 / v14) * v11);
    v17 = result[1] + (float)((float)(v16 / v14) * (float)(result[3] - result[1]));
LABEL_3:
    a3[1] = v17;
    return result;
  }
  v18 = fabsf((float)(v11 * (float)(v9 - v5)) - (float)((float)(v13 - v9) * v15));
  if (fabsf(v16) <= 0.000001 && v18 <= 0.000001)
  {
    v20 = v6 == v10 && v5 == v9;
    if (v20 || (v4 == v10 ? (v21 = v3 == v9) : (v21 = 0), v21))
    {
      if (a3 != result)
        *(_QWORD *)a3 = *(_QWORD *)result;
    }
    else if (v4 == v8 && v3 == v13 || v6 == v8 && v5 == v13)
    {
      if (v7 != a3)
        *(_QWORD *)a3 = *(_QWORD *)v7;
    }
    else
    {
      v22 = v6 > v10;
      if (v4 <= v10)
        v22 = 0;
      if (!v22 || v6 <= v8 || v4 <= v8)
      {
        v23 = v5 > v9;
        if (v3 <= v9)
          v23 = 0;
        if (!v23 || v5 <= v13 || v3 <= v13)
        {
          v24 = v6 < v10;
          if (v4 >= v10)
            v24 = 0;
          if (!v24 || v6 >= v8 || v4 >= v8)
          {
            v25 = v5 < v9;
            if (v3 >= v9)
              v25 = 0;
            if (!v25 || v5 >= v13 || v3 >= v13)
            {
              v26 = v10 > v8 && v24;
              v27 = v9 > v13 && v25;
              v28 = result[1];
              v29 = *result;
              if (!v26)
              {
                v28 = result[1];
                v29 = *result;
                if (!v27)
                {
                  if (v6 >= v8 || v4 >= v8 || (v28 = result[3], v29 = result[2], v8 <= v10))
                  {
                    if (v5 >= v13 || v3 >= v13 || (v28 = result[3], v29 = result[2], v13 <= v9))
                    {
                      if (v6 <= v10 || v6 <= v4 || (v28 = a2[1], v29 = *a2, v6 <= v8))
                      {
                        v30 = v5 > v13;
                        v31 = v5 > v9;
                        if (v5 <= v3)
                          v31 = 0;
                        if (v31 && v30)
                          v28 = a2[1];
                        else
                          v28 = a2[3];
                        if (v31 && v30)
                          v29 = *a2;
                        else
                          v29 = a2[2];
                      }
                    }
                  }
                }
              }
              if ((v29 != v10 || v28 != v9)
                && (v10 < v8 ? (v32 = v22) : (v32 = 0), v9 < v13 ? (v33 = v23) : (v33 = 0), v32 || v33))
              {
                v5 = result[1];
                v6 = *result;
              }
              else
              {
                if (v29 == v8 && v28 == v13)
                  goto LABEL_103;
                v34 = v5 > v13;
                if (v3 <= v13)
                  v34 = 0;
                if (v9 <= v13)
                  v34 = 0;
                v35 = v10 <= v8 || v4 <= v8;
                v36 = v35 || v6 <= v8;
                if (v36 && !v34)
                {
LABEL_103:
                  if (v29 == v6 && v28 == v5
                    || (v6 >= v10 || v6 >= v4 || v6 >= v8) && (v5 >= v9 || v5 >= v3 || v5 >= v13))
                  {
                    v5 = a2[3];
                    v6 = a2[2];
                  }
                }
                else
                {
                  v5 = result[3];
                  v6 = result[2];
                }
              }
              *(_QWORD *)a3 = 0;
              v37 = *result;
              if (*result != v29 || (v38 = 0.0, v39 = 0.0, result[1] != v28))
              {
                if (v37 != v6 || (v38 = 0.0, v39 = 0.0, result[1] != v5))
                {
                  v39 = v37 + 0.0;
                  *a3 = v37 + 0.0;
                  v38 = result[1] + 0.0;
                  a3[1] = v38;
                }
              }
              v40 = *v7;
              if ((*v7 != v29 || result[3] != v28) && (v40 != v6 || result[3] != v5))
              {
                v39 = v40 + v39;
                *a3 = v39;
                v38 = result[3] + v38;
                a3[1] = v38;
              }
              v41 = *a2;
              v42 = a2[1];
              if ((*a2 != v29 || v42 != v28) && (v41 != v6 || v42 != v5))
              {
                v39 = v41 + v39;
                *a3 = v39;
                v38 = a2[1] + v38;
                a3[1] = v38;
              }
              v43 = a2[2];
              v44 = a2[3];
              if ((v43 != v29 || v44 != v28) && (v43 != v6 || v44 != v5))
              {
                v39 = v43 + v39;
                *a3 = v39;
                v38 = a2[3] + v38;
              }
              v17 = v38 * 0.5;
              *a3 = v39 * 0.5;
              goto LABEL_3;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_2393B6C48(float32x2_t **a1, float32x2_t *a2, float32x4_t *a3, uint32x2_t *a4)
{
  uint32x2_t *v4;
  float32x2_t *v8;
  float32x2_t *v9;
  float *v10;
  float *v11;
  float *v12;
  float32x4_t v13;
  float v14;
  float32x4_t v15;
  float32x2_t v16;
  float32x2_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  float32x2_t *v22;
  float *v23;
  _BYTE *v24;
  float32x2_t *v25;
  float *v26;
  unint64_t v27;
  float *v28;
  float32x2_t v29;
  uint64_t v30;
  _OWORD *v31;
  float *v32;
  uint64_t v33;
  __int128 v34;
  float *v35;
  uint64_t v36;
  float *v37;
  float *v38;
  float *v39;
  size_t v40;
  unint64_t v41;
  char *v42;
  float v43;
  float *v44;
  float v45;
  float *v46;
  float *v47;
  float v48;
  uint64_t v49;
  float *v50;
  float *v51;
  float *v52;
  float *v53;
  float v54;
  float v55;
  uint64_t v56;
  float v57;
  float v58;
  BOOL v59;
  float *v60;
  float *v61;
  float *v62;
  float v63;
  float v64;
  float *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  float *v72;
  unint64_t v73;
  float *v74;
  float *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  float *v79;
  uint64_t v80;
  __int128 v81;
  float32x2_t *v82;
  float32x2_t v86;
  float *v87;
  float *v88;
  float *v89;
  float *v90;
  float *v91;
  float *v92;
  uint32x2_t *v93;
  float *v94;
  float *v95;
  char *v96;
  char *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  _BYTE *v103;
  unint64_t *v104;
  unint64_t v105;
  char *v106;
  unint64_t v107;
  uint64_t v108;
  _OWORD *v109;
  char *v110;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  uint32x2_t v115;
  float *v116;
  uint64_t v117;
  __n128 *v118;
  __n128 v119;
  unint64_t v120;
  __n128 *v121;
  uint64_t v122;
  signed int v123;
  int v124;
  __n128 *v125;
  __n128 *v126;
  __n128 *v127;
  uint64_t v128;
  unint64_t v129;
  int *v130;
  int *v131;
  int v132;
  int v133;
  signed __int32 v134;
  signed int v135;
  int v136;
  int v137;
  int v138;
  float v139;
  int v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  char *v144;
  __n128 *v145;
  __n128 *v146;
  unint64_t v147;
  signed int v148;
  uint64_t v149;
  BOOL v150;
  _QWORD *v151;
  int v152;
  int v153;
  uint64_t *v154;
  int v155;
  unint64_t v156;
  unint64_t v157;
  float v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  float v162;
  float v163;
  int v164;
  int v165;
  uint64_t v166;
  int v167;
  uint32x2_t v168;
  uint64_t v169;
  _BYTE *v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v174;
  int8x16_t v175;
  int8x16_t *v176;
  unint64_t v177;
  int8x8_t *v178;
  int8x8_t v179;
  unint64_t v180;
  int8x8_t *v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  int *v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  int v193;
  uint64_t v194;
  int v195;
  uint64_t *v196;
  _QWORD *v197;
  float *v198;
  int64_t v199;
  char *v200;
  uint64_t v201;
  float *v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  __int128 v210;
  int *v212;
  int v213;
  int v214;
  int v215;
  uint64_t v216;
  int v217;
  uint32x2_t v218;
  uint64_t v219;
  _BYTE *v220;
  unint64_t v221;
  unint64_t v222;
  unint64_t v224;
  uint64_t v225;
  int8x16_t v226;
  int8x16_t *v227;
  unint64_t v228;
  int8x8_t *v229;
  int8x8_t v230;
  unint64_t v231;
  int8x8_t *v232;
  unint64_t v233;
  int64_t v234;
  float *v235;
  float *v236;
  float32x2_t *__p;
  uint32x2_t *v238;
  uint64_t v239;
  float *v240;
  signed int v241;
  char *v242;
  float *v243;
  float *v244;
  __int128 v245;
  uint32x2_t v246;
  int8x8_t v247;
  uint64_t v248;
  _QWORD *v249;
  uint64_t v250;
  _QWORD *v251;
  _QWORD v252[3];

  v4 = a4;
  bzero(*(void **)&a4[3], (a4[1].i32[1] * a4[2].i32[1]));
  v9 = *a1;
  v8 = a1[1];
  v240 = 0;
  if (v9 == v8)
  {
    v235 = 0;
    v35 = 0;
    goto LABEL_112;
  }
  v238 = v4;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  do
  {
    v15 = a3[1];
    v13 = vaddq_f32(a3[3], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a3, COERCE_FLOAT(*(_OWORD *)v9->f32)), v15, *v9, 1), a3[2], *(float32x4_t *)v9->f32, 2));
    v14 = v13.f32[2];
    v15.i32[0] = 925353388;
    if (v13.f32[2] >= 0.00001)
      v15.f32[0] = v13.f32[2];
    v16 = *a2;
    v16.i32[1] = a2[2].i32[1];
    v17 = vadd_f32(a2[4], vdiv_f32(vmul_f32(v16, *(float32x2_t *)v13.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v15.f32, 0)));
    if (v12 < v11)
    {
      *(float32x2_t *)v12 = v17;
      v12 += 2;
      goto LABEL_24;
    }
    v18 = (char *)v12 - (char *)v10;
    v19 = ((char *)v12 - (char *)v10) >> 3;
    v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 61)
      goto LABEL_348;
    if (v11 - v10 > v20)
      v20 = v11 - v10;
    if ((unint64_t)((char *)v11 - (char *)v10) >= 0x7FFFFFFFFFFFFFF8)
      v21 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v21 = v20;
    if (v21)
    {
      if (v21 >> 61)
LABEL_349:
        sub_23938C4B8();
      v22 = v8;
      v23 = v10;
      v24 = operator new(8 * v21);
      v10 = v23;
      v8 = v22;
    }
    else
    {
      v24 = 0;
    }
    v25 = (float32x2_t *)&v24[8 * v19];
    *v25 = v17;
    v26 = (float *)&v25[1];
    if (v12 != v10)
    {
      v27 = (char *)(v12 - 2) - (char *)v10;
      if (v27 >= 0x168)
      {
        if (&v24[v18 - 8 - (v27 & 0xFFFFFFFFFFFFFFF8)] > &v24[v18 - 8])
        {
          v28 = v12;
        }
        else if ((float *)((char *)v12 - (v27 & 0xFFFFFFFFFFFFFFF8) - 8) > v12 - 2)
        {
          v28 = v12;
        }
        else if ((unint64_t)((char *)v12 - &v24[v18]) >= 0x20)
        {
          v30 = (v27 >> 3) + 1;
          v28 = &v12[-2 * (v30 & 0x3FFFFFFFFFFFFFFCLL)];
          v31 = &v24[8 * v19 - 16];
          v32 = v12 - 4;
          v33 = v30 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v34 = *(_OWORD *)v32;
            *(v31 - 1) = *((_OWORD *)v32 - 1);
            *v31 = v34;
            v31 -= 2;
            v32 -= 8;
            v33 -= 4;
          }
          while (v33);
          v25 -= v30 & 0x3FFFFFFFFFFFFFFCLL;
          if (v30 == (v30 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_21;
        }
        else
        {
          v28 = v12;
        }
      }
      else
      {
        v28 = v12;
      }
      do
      {
        v29 = *(float32x2_t *)(v28 - 2);
        v28 -= 2;
        v25[-1] = v29;
        --v25;
      }
      while (v28 != v10);
    }
LABEL_21:
    v11 = (float *)&v24[8 * v21];
    if (v10)
      operator delete(v10);
    v10 = (float *)v25;
    v12 = v26;
LABEL_24:
    if (v14 < 0.00001)
    {
      v36 = 0;
      if (v10)
        goto LABEL_311;
      return v36;
    }
    v9 += 2;
  }
  while (v9 != v8);
  v235 = v10;
  if (v10 == v12)
  {
    v35 = 0;
  }
  else
  {
    v37 = v10 + 2;
    v38 = v10;
    if (v10 + 2 != v12)
    {
      v39 = v10 + 2;
      v38 = v10;
      do
      {
        if (*v39 < *v38
          || vabds_f32(*v39, *v38) <= (float)((float)(fabsf(*v38) * 0.00001) + 0.000001) && v39[1] < v38[1])
        {
          v38 = v39;
        }
        v39 += 2;
      }
      while (v39 != v12);
    }
    v252[0] = *(_QWORD *)v38;
    v243 = (float *)v252;
    v40 = (char *)v12 - (char *)v10;
    v41 = ((char *)v12 - (char *)v10) >> 3;
    v42 = (char *)v10;
    sub_2393B8DD8((uint64_t)v10, v12, &v243, 126 - 2 * __clz(v41), 1);
    if (v37 == v12)
    {
      v44 = (float *)v42;
    }
    else
    {
      v43 = *(float *)v42;
      v44 = (float *)v42;
      while (1)
      {
        v45 = v43;
        v46 = v37 - 2;
        v43 = *v37;
        if (vabds_f32(v45, *v37) <= (float)((float)(fabsf(*v37) * 0.00001) + 0.000001)
          && vabds_f32(*(v37 - 1), v37[1]) <= (float)((float)(fabsf(v37[1]) * 0.00001) + 0.000001))
        {
          break;
        }
        v37 += 2;
        if (v37 == v12)
          goto LABEL_64;
      }
      if (v46 != v12)
      {
        v47 = v37 + 2;
        if (v37 + 2 != v12)
        {
          v48 = *v46;
          do
          {
            if (vabds_f32(v48, *v47) > (float)((float)(fabsf(*v47) * 0.00001) + 0.000001)
              || vabds_f32(v46[1], v47[1]) > (float)((float)(fabsf(v47[1]) * 0.00001) + 0.000001))
            {
              v49 = *(_QWORD *)v47;
              *((_QWORD *)v46 + 1) = *(_QWORD *)v47;
              v46 += 2;
              v48 = *(float *)&v49;
            }
            v47 += 2;
          }
          while (v47 != v12);
        }
        v198 = v46 + 2;
        if (v46 + 2 != v12)
        {
          v199 = (char *)v198 - v42;
          v200 = &v42[((char *)v198 - v42) & 0xFFFFFFFFFFFFFFF8];
          v201 = (char *)v12 - (char *)v198;
          v202 = (float *)&v200[(char *)v12 - (char *)v198];
          if (v202 == v12)
            goto LABEL_335;
          v203 = (char *)v12 - &v42[v201 + (v199 & 0xFFFFFFFFFFFFFFF8)] - 8;
          if (v203 < 0x58 || (unint64_t)(v201 + 31) < 0x20)
          {
            v207 = v200;
          }
          else
          {
            v204 = v201 >> 3;
            v205 = (v203 >> 3) + 1;
            v206 = 8 * (v205 & 0x3FFFFFFFFFFFFFFCLL);
            v207 = &v200[v206];
            v208 = 8 * v204;
            v209 = v205 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v210 = *(_OWORD *)&v200[v208 + 16];
              *(_OWORD *)v200 = *(_OWORD *)&v200[v208];
              *((_OWORD *)v200 + 1) = v210;
              v200 += 32;
              v209 -= 4;
            }
            while (v209);
            if (v205 == (v205 & 0x3FFFFFFFFFFFFFFCLL))
            {
              v200 = v207;
              goto LABEL_335;
            }
            v202 = (float *)((char *)v202 + v206);
          }
          v200 = v207;
          do
          {
            v225 = *(_QWORD *)v202;
            v202 += 2;
            *(_QWORD *)v200 = v225;
            v200 += 8;
          }
          while (v202 != v12);
LABEL_335:
          v40 = v200 - v42;
          v41 = (v200 - v42) >> 3;
          v12 = (float *)v200;
        }
      }
    }
LABEL_64:
    if (v12 != v44)
    {
      if ((v40 & 0x8000000000000000) == 0)
      {
        v35 = (float *)operator new(v40);
        v50 = &v35[2 * v41];
        v51 = v35;
        v52 = v235;
        while (1)
        {
          v55 = *v52;
          v54 = v52[1];
          v56 = (char *)v51 - (char *)v35;
          if ((unint64_t)((char *)v51 - (char *)v35) < 9
            || ((v57 = (float)((float)(*(v51 - 2) - *(v51 - 4)) * (float)(v54 - *(v51 - 1)))
                     - (float)((float)(*(v51 - 1) - *(v51 - 3)) * (float)(v55 - *(v51 - 2))),
                 v58 = fabsf(v57),
                 v57 > 0.0)
              ? (v59 = v58 > 0.000001)
              : (v59 = 0),
                v59))
          {
            v66 = v51;
          }
          else
          {
            v60 = v51 - 3;
            v61 = v51 - 2;
            do
            {
              v62 = v60;
              v51 = v61;
              if ((unint64_t)((char *)v61 - (char *)v35) <= 8)
                break;
              v60 -= 2;
              v63 = (float)((float)(*(v62 - 1) - *(v62 - 3)) * (float)(v54 - *v62))
                  - (float)((float)(*v62 - *(v62 - 2)) * (float)(v55 - *(v62 - 1)));
              v64 = fabsf(v63);
              v61 -= 2;
            }
            while (v63 <= 0.0 || v64 <= 0.000001);
            v66 = v62 + 1;
            v56 = (char *)v51 - (char *)v35;
          }
          if (v66 >= v50)
            break;
          *v66 = v55;
          v66[1] = v54;
          v51 = v66 + 2;
LABEL_68:
          v53 = v51;
          v52 += 2;
          if (v52 == v12)
            goto LABEL_110;
        }
        v67 = v56 >> 3;
        v68 = (v56 >> 3) + 1;
        if (v68 >> 61)
          goto LABEL_348;
        v69 = (char *)v50 - (char *)v35;
        if (v50 - v35 > v68)
          v68 = v69 >> 2;
        if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8)
          v68 = 0x1FFFFFFFFFFFFFFFLL;
        if (v68)
        {
          if (v68 >> 61)
            goto LABEL_349;
          v70 = v68;
          v71 = (char *)operator new(8 * v68);
        }
        else
        {
          v70 = 0;
          v71 = 0;
        }
        v72 = (float *)&v71[8 * v67];
        *v72 = v55;
        v72[1] = v54;
        if (v66 == v35)
        {
          v75 = (float *)&v71[8 * v67];
        }
        else
        {
          v73 = (char *)(v51 - 2) - (char *)v35;
          if (v73 < 0x168
            || &v71[(v56 & 0xFFFFFFFFFFFFFFF8) - 8 - (v73 & 0xFFFFFFFFFFFFFFF8)] > &v71[(v56 & 0xFFFFFFFFFFFFFFF8)
                                                                                          - 8]
            || (float *)((char *)v66 - (v73 & 0xFFFFFFFFFFFFFFF8) - 8) > v66 - 2
            || (unint64_t)((char *)v51 - &v71[v56 & 0xFFFFFFFFFFFFFFF8]) < 0x20)
          {
            v74 = v66;
            v75 = (float *)&v71[8 * v67];
          }
          else
          {
            v77 = (v73 >> 3) + 1;
            v74 = &v66[-2 * (v77 & 0x3FFFFFFFFFFFFFFCLL)];
            v78 = &v71[8 * v67 - 16];
            v79 = v66 - 4;
            v80 = v77 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v81 = *(_OWORD *)v79;
              *((_OWORD *)v78 - 1) = *((_OWORD *)v79 - 1);
              *(_OWORD *)v78 = v81;
              v78 -= 32;
              v79 -= 8;
              v80 -= 4;
            }
            while (v80);
            v75 = &v72[-2 * (v77 & 0x3FFFFFFFFFFFFFFCLL)];
            if (v77 == (v77 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_99;
          }
          do
          {
            v76 = *((_QWORD *)v74 - 1);
            v74 -= 2;
            *((_QWORD *)v75 - 1) = v76;
            v75 -= 2;
          }
          while (v74 != v35);
        }
LABEL_99:
        v51 = v72 + 2;
        v50 = (float *)&v71[8 * v70];
        if (v35)
        {
          v242 = &v71[8 * v70];
          operator delete(v35);
          v50 = (float *)v242;
        }
        v35 = v75;
        goto LABEL_68;
      }
LABEL_348:
      abort();
    }
    v35 = 0;
    v53 = 0;
LABEL_110:
    v240 = v53;
  }
  v4 = v238;
LABEL_112:
  v82 = (float32x2_t *)operator new(0x40uLL);
  *v82 = 0;
  v82[1].i32[1] = 0;
  __asm { FMOV            V1.2S, #-1.0 }
  v86 = vadd_f32(vcvt_f32_u32(v4[1]), _D1);
  v82[2].i32[0] = v86.i32[0];
  v87 = (float *)&v82[2];
  v82[2].i32[1] = 0;
  v82[1].i32[0] = v86.i32[0];
  v82[3] = v86;
  v82[4] = v86;
  v88 = (float *)&v82[4];
  v82[5].i32[0] = 0;
  v82[5].i32[1] = v86.i32[1];
  v82[6].i32[0] = 0;
  v89 = (float *)&v82[6];
  v82[6].i32[1] = v86.i32[1];
  __p = v82;
  v82[7] = 0;
  if ((char *)v240 - (char *)v35 <= -8 || !v35 && v240)
    goto LABEL_330;
  sub_2393B5EC0((char **)&v243, ((char *)v240 - (char *)v35) >> 3, (uint64_t)v35, (float *)v82);
  if (v35)
    operator delete(v35);
  v90 = v243;
  if ((char *)v244 - (char *)v243 < -7 || !v243 && v244)
    goto LABEL_330;
  sub_2393B5EC0((char **)&v243, ((char *)v244 - (char *)v243) >> 3, (uint64_t)v243, v87);
  if (v90)
    operator delete(v90);
  v91 = v243;
  if ((char *)v244 - (char *)v243 < -7 || !v243 && v244)
    goto LABEL_330;
  sub_2393B5EC0((char **)&v243, ((char *)v244 - (char *)v243) >> 3, (uint64_t)v243, v88);
  if (v91)
    operator delete(v91);
  v92 = v243;
  if ((char *)v244 - (char *)v243 < -7 || !v243 && v244)
    goto LABEL_330;
  sub_2393B5EC0((char **)&v243, ((char *)v244 - (char *)v243) >> 3, (uint64_t)v243, v89);
  if (v92)
    operator delete(v92);
  v93 = v4;
  v95 = v243;
  v94 = v244;
  v236 = v243;
  if (v243 != v244)
  {
    v96 = 0;
    v97 = 0;
    v98 = 0;
    while (v97 < v98)
    {
      *(_QWORD *)v97 = (int)*v95 | ((unint64_t)(int)v95[1] << 32);
      v99 = v97 + 8;
LABEL_135:
      v95 += 2;
      v97 = v99;
      if (v95 == v94)
        goto LABEL_165;
    }
    v100 = (v97 - v96) >> 3;
    v101 = v100 + 1;
    if ((unint64_t)(v100 + 1) >> 61)
      goto LABEL_348;
    if ((v98 - v96) >> 2 > v101)
      v101 = (v98 - v96) >> 2;
    if ((unint64_t)(v98 - v96) >= 0x7FFFFFFFFFFFFFF8)
      v102 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v102 = v101;
    if (v102)
    {
      if (v102 >> 61)
        goto LABEL_349;
      v103 = operator new(8 * v102);
    }
    else
    {
      v103 = 0;
    }
    v104 = (unint64_t *)&v103[8 * v100];
    *v104 = (int)*v95 | ((unint64_t)(int)v95[1] << 32);
    v99 = (char *)(v104 + 1);
    if (v97 != v96)
    {
      v105 = v97 - 8 - v96;
      if (v105 < 0x168)
      {
        v106 = v97;
        goto LABEL_150;
      }
      if (&v103[v97 - v96 - 8 - (v105 & 0xFFFFFFFFFFFFFFF8)] > &v103[v97 - v96 - 8])
      {
        v106 = v97;
        goto LABEL_150;
      }
      if (&v97[-(v105 & 0xFFFFFFFFFFFFFFF8) - 8] > v97 - 8)
      {
        v106 = v97;
        goto LABEL_150;
      }
      if ((unint64_t)(v96 - v103) < 0x20)
      {
        v106 = v97;
        goto LABEL_150;
      }
      v108 = (v105 >> 3) + 1;
      v106 = &v97[-8 * (v108 & 0x3FFFFFFFFFFFFFFCLL)];
      v109 = &v103[8 * v100 - 16];
      v110 = v97 - 16;
      v111 = v108 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v112 = *(_OWORD *)v110;
        *(v109 - 1) = *((_OWORD *)v110 - 1);
        *v109 = v112;
        v109 -= 2;
        v110 -= 32;
        v111 -= 4;
      }
      while (v111);
      v104 -= v108 & 0x3FFFFFFFFFFFFFFCLL;
      if (v108 != (v108 & 0x3FFFFFFFFFFFFFFCLL))
      {
        do
        {
LABEL_150:
          v107 = *((_QWORD *)v106 - 1);
          v106 -= 8;
          *--v104 = v107;
        }
        while (v106 != v96);
      }
    }
    v98 = &v103[8 * v102];
    if (v96)
      operator delete(v96);
    v96 = (char *)v104;
    goto LABEL_135;
  }
  v99 = 0;
  v96 = 0;
LABEL_165:
  v113 = v99 - v96;
  if (v99 - v96 <= -8)
    goto LABEL_330;
  _ZF = v99 && v96 == 0;
  if (_ZF)
    goto LABEL_330;
  v115 = v93[3];
  v244 = (float *)*v93;
  v245 = *(_OWORD *)v93[1].i8;
  v243 = (float *)v245;
  v246 = v115;
  v247.i8[0] = -1;
  v116 = v236;
  if (v99 == v96)
    goto LABEL_306;
  if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFF9)
    goto LABEL_348;
  v117 = v113 >> 3;
  v234 = v99 - v96;
  v118 = (__n128 *)operator new(2 * v113);
  v120 = v117;
  v121 = v118;
  v122 = 0;
  v123 = 0x80000000;
  v124 = 0x7FFFFFFF;
  v125 = v118;
  v126 = v118;
  v127 = &v118[v117];
  v239 = v117;
  do
  {
    v128 = v122 + 1;
    if (v122 + 1 == v120)
      v129 = 0;
    else
      v129 = v122 + 1;
    if (v120 <= v129)
      goto LABEL_330;
    v130 = (int *)&v96[8 * v122];
    v131 = (int *)&v96[8 * v129];
    v132 = v131[1];
    v133 = v130[1];
    if (v132 >= v133)
      v134 = v130[1];
    else
      v134 = v131[1];
    if (v133 <= v132)
      v135 = v131[1];
    else
      v135 = v130[1];
    if (v134 < v124)
      v124 = v134;
    if (v123 <= v135)
      v123 = v135;
    if (v134 != v135)
    {
      v136 = *v131;
      v137 = *v130;
      _VF = __OFSUB__(v132, v133);
      v138 = v132 - v133;
      v139 = (float)(v136 - v137) / (float)v138;
      if (v138 < 0 != _VF)
        v140 = v136;
      else
        v140 = v137;
      if (v125 < v127)
      {
        v125->n128_u32[0] = v134;
        v125->n128_u32[1] = v135;
        v119.n128_f32[0] = (float)v140;
        v125->n128_f32[2] = (float)v140;
        v125->n128_f32[3] = v139;
        ++v125;
      }
      else
      {
        v141 = v125 - v126;
        v142 = v141 + 1;
        if ((unint64_t)(v141 + 1) >> 60)
          goto LABEL_348;
        v241 = v123;
        if (((char *)v127 - (char *)v126) >> 3 > v142)
          v142 = ((char *)v127 - (char *)v126) >> 3;
        if ((unint64_t)((char *)v127 - (char *)v126) >= 0x7FFFFFFFFFFFFFF0)
          v142 = 0xFFFFFFFFFFFFFFFLL;
        if (v142 >> 60)
          goto LABEL_349;
        v143 = 16 * v142;
        v144 = (char *)operator new(16 * v142);
        v145 = (__n128 *)&v144[16 * v141];
        v145->n128_u32[0] = v134;
        v145->n128_u32[1] = v135;
        v119.n128_f32[0] = (float)v140;
        v145->n128_f32[2] = (float)v140;
        v145->n128_f32[3] = v139;
        if (v125 == v126)
        {
          v121 = (__n128 *)&v144[16 * v141];
        }
        else
        {
          v146 = (__n128 *)&v144[16 * v141];
          do
          {
            v119 = v125[-1];
            v121 = v146 - 1;
            v146[-1] = v119;
            --v125;
            --v146;
          }
          while (v125 != v126);
        }
        v127 = (__n128 *)&v144[v143];
        v125 = v145 + 1;
        if (v126)
          operator delete(v126);
        v126 = v121;
        v123 = v241;
        v120 = v239;
      }
    }
    v122 = v128;
  }
  while (v128 != v120);
  v147 = 126 - 2 * __clz(v125 - v121);
  v148 = v123;
  if (v125 == v121)
    v149 = 0;
  else
    v149 = v147;
  sub_2393B7E64(v121, v125, v149, 1, v119);
  v150 = v124 <= v148;
  if (v124 != v148)
  {
    v155 = v148;
    v116 = v236;
    if (!v150)
      goto LABEL_304;
    v156 = 0;
    v157 = 1;
    while (1)
    {
      if (v156 <= v157)
        v159 = v157;
      else
        v159 = v156;
      if (v124 < v155 && v121[v156].n128_u32[1] == v124)
        v160 = v159 + 1;
      else
        v160 = v156;
      if (v160 <= v157)
        v161 = v157;
      else
        v161 = v160;
      if (v124 < v155 && v121[v157].n128_u32[1] == v124)
        v157 = v161 + 1;
      v162 = v121[v160].n128_f32[2];
      v163 = v121[v157].n128_f32[2];
      if (v162 <= v163)
        v156 = v160;
      else
        v156 = v157;
      if (v162 > v163)
        v157 = v160;
      v158 = v121[v156].n128_f32[2];
      if (v124 < 0)
        goto LABEL_221;
      if (SHIDWORD(v243) <= v124)
        goto LABEL_221;
      v164 = llroundf(v121[v157].n128_f32[2]);
      if (v164 < 0)
        goto LABEL_221;
      v165 = llroundf(v158);
      if ((int)v243 <= v165)
        goto LABEL_221;
      v166 = v165 & ~(v165 >> 31);
      v167 = (_DWORD)v243 - 1;
      if ((int)v243 - 1 >= v164)
        v167 = v164;
      v168 = v246;
      v169 = (HIDWORD(v245) * v124);
      v170 = (_BYTE *)(*(_QWORD *)&v246 + v169 + v166);
      v171 = *(_QWORD *)&v246 + v169 + v167 + 1;
      v172 = v171 - (_QWORD)v170;
      if ((uint64_t)(v171 - (_QWORD)v170) < 1)
        goto LABEL_221;
      if (v172 < 8)
        goto LABEL_262;
      if (v170 < (_BYTE *)&v247 + 1 && (unint64_t)&v247 < v171)
        goto LABEL_262;
      if (v172 >= 0x20)
      {
        v174 = v172 & 0xFFFFFFFFFFFFFFE0;
        v175 = vdupq_lane_s8(v247, 0);
        v176 = (int8x16_t *)(*(_QWORD *)&v246 + v169 + v166 + 16);
        v177 = v172 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v176[-1] = v175;
          *v176 = v175;
          v176 += 2;
          v177 -= 32;
        }
        while (v177);
        if (v172 == v174)
          goto LABEL_220;
        if ((v172 & 0x18) == 0)
        {
          v172 &= 0x1Fu;
          v170 += v174;
          goto LABEL_262;
        }
      }
      else
      {
        v174 = 0;
      }
      v170 += v172 & 0xFFFFFFFFFFFFFFF8;
      v178 = &v247;
      v179 = vld1_dup_s8((const char *)v178);
      v180 = v174 - (v172 & 0xFFFFFFFFFFFFFFF8);
      v181 = (int8x8_t *)(*(_QWORD *)&v168 + v174 + v166 + v169);
      do
      {
        *v181++ = v179;
        v180 += 8;
      }
      while (v180);
      if (v172 == (v172 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_220;
      v172 &= 7u;
LABEL_262:
      v182 = v172 + 1;
      do
      {
        *v170++ = v247.i8[0];
        --v182;
      }
      while (v182 > 1);
LABEL_220:
      v158 = v121[v156].n128_f32[2];
LABEL_221:
      v121[v156].n128_f32[2] = v121[v156].n128_f32[3] + v158;
      v121[v157].n128_f32[2] = v121[v157].n128_f32[3] + v121[v157].n128_f32[2];
      _ZF = v124++ == v155;
      if (_ZF)
        goto LABEL_305;
    }
  }
  v252[0] = v239;
  v252[1] = v96;
  v249 = v252;
  v250 = 0;
  v151 = v252;
  v248 = 0;
  if (v234 == 8)
    goto LABEL_302;
  v152 = *((_DWORD *)v96 + 2);
  v153 = *(_DWORD *)v96;
  v154 = &v248;
  if (v152 < *(_DWORD *)v96)
    v154 = &v250;
  *v154 = 1;
  if (v234 == 16)
    goto LABEL_216;
  v183 = 0;
  v59 = v152 < v153;
  v184 = v152 >= v153;
  v185 = v59;
  v186 = v250;
  v187 = v248;
  v188 = v239 - 2;
  v189 = (int *)(v96 + 24);
  v190 = 1;
  while (2)
  {
    if (v188 == v183)
      goto LABEL_330;
    v191 = v183 + 2;
    if (v239 - 3 != v183)
    {
      v190 += 2;
      v192 = *v189;
      v193 = *(v189 - 2);
      if (*v189 >= v193)
      {
        if (v185 == v239 || v184 == v239)
          goto LABEL_330;
        if (v193 < *(_DWORD *)&v96[8 * v185])
        {
          v185 = v183 + 2;
          v186 = v183 + 2;
        }
        v191 = v190;
        if (v192 < *(_DWORD *)&v96[8 * v184])
        {
LABEL_270:
          v183 += 2;
          v189 += 4;
          if (v188 == v183)
          {
            v151 = v252;
            v249 = v252;
            v250 = v186;
            v248 = v187;
            goto LABEL_302;
          }
          continue;
        }
      }
      else
      {
        if (v185 == v239 || v184 == v239)
          goto LABEL_330;
        if (v192 < *(_DWORD *)&v96[8 * v185])
        {
          v185 = v183 + 3;
          v186 = v183 + 3;
        }
        if (v193 < *(_DWORD *)&v96[8 * v184])
          goto LABEL_270;
      }
      v187 = v191;
      v184 = v191;
      goto LABEL_270;
    }
    break;
  }
  v251 = v252;
  v249 = v252;
  v250 = v186;
  v248 = v187;
  if (v185 == v239)
    goto LABEL_330;
  v194 = 8 * v185;
  v195 = *(_DWORD *)&v96[8 * v191];
  if (v195 < *(_DWORD *)&v96[v194])
  {
    v196 = &v250;
    v197 = &v251;
LABEL_301:
    *v197 = v252;
    *v196 = v191;
    v151 = v251;
    goto LABEL_302;
  }
  if (v184 == v239)
    goto LABEL_330;
  if (v195 >= *(_DWORD *)&v96[8 * v184])
  {
    v196 = &v248;
    v197 = &v249;
    goto LABEL_301;
  }
LABEL_216:
  v151 = v252;
LABEL_302:
  v116 = v236;
  if (v252 != v151 || v250 != v239)
  {
    if (v250 != *v151 && v248 != *v249)
    {
      v212 = (int *)(v151[1] + 8 * v250);
      v213 = v212[1];
      if (v213 < 0)
        goto LABEL_304;
      if (SHIDWORD(v243) <= v213)
        goto LABEL_304;
      v214 = *(_DWORD *)(v249[1] + 8 * v248);
      if (v214 < 0)
        goto LABEL_304;
      v215 = *v212;
      if ((int)v243 <= v215)
        goto LABEL_304;
      v216 = v215 & ~(v215 >> 31);
      v217 = (_DWORD)v243 - 1;
      if ((int)v243 - 1 >= v214)
        v217 = *(_DWORD *)(v249[1] + 8 * v248);
      v218 = v246;
      v219 = (HIDWORD(v245) * v213);
      v220 = (_BYTE *)(*(_QWORD *)&v246 + v219 + v216);
      v221 = *(_QWORD *)&v246 + v219 + v217 + 1;
      v222 = v221 - (_QWORD)v220;
      if ((uint64_t)(v221 - (_QWORD)v220) < 1)
        goto LABEL_304;
      if (v222 >= 8 && (v220 >= (_BYTE *)&v247 + 1 || (unint64_t)&v247 >= v221))
      {
        if (v222 >= 0x20)
        {
          v224 = v222 & 0xFFFFFFFFFFFFFFE0;
          v226 = vdupq_lane_s8(v247, 0);
          v227 = (int8x16_t *)(v216 + v219 + *(_QWORD *)&v246 + 16);
          v228 = v222 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v227[-1] = v226;
            *v227 = v226;
            v227 += 2;
            v228 -= 32;
          }
          while (v228);
          if (v222 == v224)
            goto LABEL_304;
          if ((v222 & 0x18) == 0)
          {
            v222 &= 0x1Fu;
            v220 += v224;
            goto LABEL_345;
          }
        }
        else
        {
          v224 = 0;
        }
        v220 += v222 & 0xFFFFFFFFFFFFFFF8;
        v229 = &v247;
        v230 = vld1_dup_s8((const char *)v229);
        v231 = v224 - (v222 & 0xFFFFFFFFFFFFFFF8);
        v232 = (int8x8_t *)(*(_QWORD *)&v218 + v224 + v216 + v219);
        do
        {
          *v232++ = v230;
          v231 += 8;
        }
        while (v231);
        if (v222 == (v222 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_304;
        v222 &= 7u;
      }
LABEL_345:
      v233 = v222 + 1;
      do
      {
        *v220++ = v247.i8[0];
        --v233;
      }
      while (v233 > 1);
      goto LABEL_304;
    }
LABEL_330:
    sub_2393B680C();
  }
LABEL_304:
  if (v121)
LABEL_305:
    operator delete(v121);
LABEL_306:
  if (v96)
    operator delete(v96);
  operator delete(__p);
  if (v116)
    operator delete(v116);
  v36 = 1;
  v10 = v235;
  if (v235)
LABEL_311:
    operator delete(v10);
  return v36;
}

float sub_2393B7E64(__n128 *a1, __n128 *a2, uint64_t a3, char a4, __n128 a5)
{
  __n128 *v9;
  __n128 *i;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __n128 *v14;
  __n128 v15;
  uint64_t v16;
  __n128 *v17;
  __n128 v18;
  __n128 v19;
  signed __int32 v20;
  signed __int32 v21;
  unint64_t v22;
  __n128 *k;
  signed __int32 v24;
  __n128 *m;
  unsigned __int32 v26;
  unsigned __int32 v27;
  signed __int32 v28;
  __n128 *v30;
  signed __int32 v31;
  BOOL v32;
  signed __int32 v33;
  signed __int32 v34;
  BOOL v35;
  __n128 v36;
  signed __int32 v37;
  signed __int32 v38;
  signed __int32 v39;
  __n128 *j;
  unsigned __int32 v41;
  unint64_t v42;
  signed __int32 v43;
  signed __int32 v44;
  signed __int32 v45;
  BOOL v46;
  __n128 *v47;
  __n128 *v48;
  signed __int32 v49;
  signed __int32 v50;
  __n128 *v51;
  BOOL v53;
  uint64_t v54;
  __n128 *v55;
  __n128 *v56;
  __n128 *v57;
  signed __int32 v58;
  unint64_t v59;
  uint64_t v60;
  signed __int32 v61;
  int64_t v62;
  int64_t v63;
  __n128 *v64;
  int64_t v65;
  uint64_t v66;
  __n128 *v67;
  signed __int32 v68;
  __n128 *v69;
  signed __int32 v70;
  float v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  signed __int32 v75;
  uint64_t v76;
  uint64_t v78;
  __n128 *v79;
  __n128 *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  signed __int32 v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  __n128 *v88;
  signed __int32 v89;
  unint64_t v90;
  __n128 *v91;
  unint64_t v92;
  __n128 *v93;
  signed __int32 v94;
  unint64_t v95;
  __n128 *v96;
  __int32 v97;
  BOOL v98;
  __n128 v100;
  __n128 v101;
  __n128 v102;
  __n128 v103;
  __n128 v104;
  __n128 v105;

LABEL_1:
  v9 = a2 - 1;
  i = a1;
  while (2)
  {
    a1 = i;
    v11 = (char *)a2 - (char *)i;
    v12 = a2 - i;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return a5.n128_f32[0];
      case 2uLL:
        if ((signed __int32)v9->n128_u32[0] < (signed __int32)i->n128_u32[0]
          || v9->n128_u32[0] == i->n128_u32[0] && (a5.n128_u32[0] = a2[-1].n128_u32[3], a5.n128_f32[0] < i->n128_f32[3]))
        {
          v103 = *i;
          *i = *v9;
          a5.n128_u32[0] = v103.n128_u32[0];
          *v9 = v103;
        }
        return a5.n128_f32[0];
      case 3uLL:
        a5.n128_f32[0] = sub_2393B8858(i, i + 1, a2 - 1, a5);
        return a5.n128_f32[0];
      case 4uLL:
        v47 = i + 1;
        v48 = i + 2;
        a5.n128_f32[0] = sub_2393B8858(i, i + 1, i + 2, a5);
        v49 = i[2].n128_i32[0];
        if ((signed __int32)v9->n128_u32[0] < v49
          || v9->n128_u32[0] == v49 && (a5.n128_u32[0] = a2[-1].n128_u32[3], a5.n128_f32[0] < i[2].n128_f32[3]))
        {
          a5 = *v48;
          *v48 = *v9;
          *v9 = a5;
          if ((signed __int32)v48->n128_u32[0] < (signed __int32)v47->n128_u32[0]
            || v48->n128_u32[0] == v47->n128_u32[0]
            && (a5.n128_u32[0] = i[2].n128_u32[3], a5.n128_f32[0] < i[1].n128_f32[3]))
          {
            a5 = *v47;
            *v47 = *v48;
            *v48 = a5;
            v50 = i[1].n128_i32[0];
            if (v50 < (signed __int32)i->n128_u32[0]
              || v50 == i->n128_u32[0] && (a5.n128_u32[0] = i[1].n128_u32[3], a5.n128_f32[0] < i->n128_f32[3]))
            {
              v104 = *i;
              *i = *v47;
              a5.n128_u32[0] = v104.n128_u32[0];
              *v47 = v104;
            }
          }
        }
        return a5.n128_f32[0];
      case 5uLL:
        a5.n128_f32[0] = sub_2393B896C(i, i + 1, i + 2, i + 3, a2 - 1, a5);
        return a5.n128_f32[0];
      default:
        if (v11 <= 383)
        {
          v51 = i + 1;
          v53 = i == a2 || v51 == a2;
          if ((a4 & 1) != 0)
          {
            if (v53)
              return a5.n128_f32[0];
            v54 = 0;
            v55 = i;
            while (1)
            {
              v57 = v55;
              v55 = v51;
              v58 = v57[1].n128_i32[0];
              if (v58 < (signed __int32)v57->n128_u32[0])
                break;
              if (v58 == v57->n128_u32[0])
              {
                a5.n128_u32[0] = v57[1].n128_u32[3];
                if (a5.n128_f32[0] < v57->n128_f32[3])
                  goto LABEL_117;
              }
LABEL_112:
              v51 = v55 + 1;
              v54 += 16;
              if (&v55[1] == a2)
                return a5.n128_f32[0];
            }
            a5.n128_u32[0] = v57[1].n128_u32[3];
LABEL_117:
            v59 = *(unint64_t *)((char *)v57[1].n128_u64 + 4);
            *v55 = *v57;
            v56 = i;
            if (v57 != i)
            {
              v60 = v54;
              while (1)
              {
                v61 = *(__int32 *)((char *)i[-1].n128_i32 + v60);
                if (v58 >= v61)
                {
                  if (v58 != v61)
                  {
                    v56 = (__n128 *)((char *)i + v60);
                    goto LABEL_111;
                  }
                  if (a5.n128_f32[0] >= *(float *)((char *)&i->n128_f32[-1] + v60))
                    break;
                }
                --v57;
                *(__n128 *)((char *)i + v60) = *(__n128 *)((char *)i + v60 - 16);
                v60 -= 16;
                if (!v60)
                {
                  v56 = i;
                  goto LABEL_111;
                }
              }
              v56 = v57;
            }
LABEL_111:
            v56->n128_u32[0] = v58;
            *(unint64_t *)((char *)v56->n128_u64 + 4) = v59;
            v56->n128_u32[3] = a5.n128_u32[0];
            goto LABEL_112;
          }
          if (v53)
            return a5.n128_f32[0];
          while (1)
          {
            v93 = a1;
            a1 = v51;
            v94 = v93[1].n128_i32[0];
            if (v94 < (signed __int32)v93->n128_u32[0])
              break;
            if (v94 == v93->n128_u32[0])
            {
              a5.n128_u32[0] = v93[1].n128_u32[3];
              if (a5.n128_f32[0] < v93->n128_f32[3])
                goto LABEL_192;
            }
LABEL_187:
            v51 = a1 + 1;
            if (&a1[1] == a2)
              return a5.n128_f32[0];
          }
          a5.n128_u32[0] = v93[1].n128_u32[3];
LABEL_192:
          v95 = *(unint64_t *)((char *)v93[1].n128_u64 + 4);
          do
          {
            do
            {
              v96 = v93;
              v93[1] = *v93;
              v97 = v93[-1].n128_i32[0];
              --v93;
              v98 = v94 == v97;
            }
            while (v94 < v97);
          }
          while (v98 && a5.n128_f32[0] < v96[-1].n128_f32[3]);
          v96->n128_u32[0] = v94;
          *(unint64_t *)((char *)v96->n128_u64 + 4) = v95;
          v96->n128_u32[3] = a5.n128_u32[0];
          goto LABEL_187;
        }
        if (!a3)
        {
          if (i == a2)
            return a5.n128_f32[0];
          v62 = (v12 - 2) >> 1;
          v63 = v62;
          while (1)
          {
            v65 = v63;
            if (v62 >= v63)
            {
              v66 = (2 * v63) | 1;
              v67 = &i[v66];
              if (2 * v65 + 2 < (uint64_t)v12)
              {
                v68 = v67[1].n128_i32[0];
                if ((signed __int32)v67->n128_u32[0] < v68
                  || v67->n128_u32[0] == v68 && i[v66].n128_f32[3] < v67[1].n128_f32[3])
                {
                  ++v67;
                  v66 = 2 * v65 + 2;
                }
              }
              v69 = &i[v65];
              v70 = v69->n128_u32[0];
              if ((signed __int32)v67->n128_u32[0] >= (signed __int32)v69->n128_u32[0])
              {
                if (v67->n128_u32[0] != v70)
                {
                  v71 = v69->n128_f32[3];
LABEL_140:
                  v72 = *(unint64_t *)((char *)v69->n128_u64 + 4);
                  *v69 = *v67;
                  if (v62 >= v66)
                  {
                    while (1)
                    {
                      v73 = 2 * v66;
                      v66 = (2 * v66) | 1;
                      v64 = &i[v66];
                      v74 = v73 + 2;
                      if (v74 < (uint64_t)v12)
                      {
                        v75 = v64[1].n128_i32[0];
                        if ((signed __int32)v64->n128_u32[0] < v75
                          || v64->n128_u32[0] == v75 && i[v66].n128_f32[3] < v64[1].n128_f32[3])
                        {
                          ++v64;
                          v66 = v74;
                        }
                      }
                      if ((signed __int32)v64->n128_u32[0] < v70 || v64->n128_u32[0] == v70 && v64->n128_f32[3] < v71)
                        break;
                      *v67 = *v64;
                      v67 = v64;
                      if (v62 < v66)
                        goto LABEL_128;
                    }
                  }
                  v64 = v67;
LABEL_128:
                  v64->n128_u32[0] = v70;
                  *(unint64_t *)((char *)v64->n128_u64 + 4) = v72;
                  v64->n128_f32[3] = v71;
                  goto LABEL_129;
                }
                v71 = i[v65].n128_f32[3];
                if (v67->n128_f32[3] >= v71)
                  goto LABEL_140;
              }
            }
LABEL_129:
            v63 = v65 - 1;
            if (!v65)
            {
              v76 = (unint64_t)v11 >> 4;
              while (1)
              {
                v78 = 0;
                v105 = *i;
                v79 = i;
                do
                {
                  v80 = v79;
                  v81 = v78 + 1;
                  v79 += v78 + 1;
                  v82 = 2 * v78;
                  v78 = (2 * v78) | 1;
                  v83 = v82 + 2;
                  if (v83 < v76)
                  {
                    v84 = v79[1].n128_i32[0];
                    if ((signed __int32)v79->n128_u32[0] < v84
                      || v79->n128_u32[0] == v84 && v80[v81].n128_f32[3] < v79[1].n128_f32[3])
                    {
                      ++v79;
                      v78 = v83;
                    }
                  }
                  *v80 = *v79;
                }
                while (v78 <= (uint64_t)((unint64_t)(v76 - 2) >> 1));
                if (v79 == --a2)
                {
                  a5.n128_u32[0] = v105.n128_u32[0];
                  *v79 = v105;
                }
                else
                {
                  *v79 = *a2;
                  a5.n128_u32[0] = v105.n128_u32[0];
                  *a2 = v105;
                  v85 = (char *)v79 - (char *)i + 16;
                  if (v85 >= 17)
                  {
                    v86 = ((unint64_t)v85 >> 4) - 2;
                    v87 = v86 >> 1;
                    v88 = &i[v86 >> 1];
                    v89 = v79->n128_u32[0];
                    if ((signed __int32)v88->n128_u32[0] < (signed __int32)v79->n128_u32[0])
                    {
                      a5.n128_u32[0] = v79->n128_u32[3];
LABEL_167:
                      v90 = *(unint64_t *)((char *)v79->n128_u64 + 4);
                      *v79 = *v88;
                      if (v86 >= 2)
                      {
                        while (1)
                        {
                          v92 = v87 - 1;
                          v87 = (v87 - 1) >> 1;
                          v91 = &i[v87];
                          if ((signed __int32)v91->n128_u32[0] >= v89
                            && (v91->n128_u32[0] != v89 || i[v87].n128_f32[3] >= a5.n128_f32[0]))
                          {
                            break;
                          }
                          *v88 = *v91;
                          v88 = &i[v87];
                          if (v92 <= 1)
                            goto LABEL_169;
                        }
                      }
                      v91 = v88;
LABEL_169:
                      v91->n128_u32[0] = v89;
                      *(unint64_t *)((char *)v91->n128_u64 + 4) = v90;
                      v91->n128_u32[3] = a5.n128_u32[0];
                      goto LABEL_154;
                    }
                    if (v88->n128_u32[0] == v89)
                    {
                      a5.n128_u32[0] = v79->n128_u32[3];
                      if (i[v87].n128_f32[3] < a5.n128_f32[0])
                        goto LABEL_167;
                    }
                  }
                }
LABEL_154:
                if (v76-- <= 2)
                  return a5.n128_f32[0];
              }
            }
          }
        }
        v13 = v12 >> 1;
        v14 = &i[v12 >> 1];
        if ((unint64_t)v11 < 0x801)
        {
          sub_2393B8858(&a1[v12 >> 1], a1, a2 - 1, a5);
        }
        else
        {
          v15.n128_f32[0] = sub_2393B8858(a1, &a1[v12 >> 1], a2 - 1, a5);
          v16 = v13;
          v17 = &a1[v13 - 1];
          v18.n128_f32[0] = sub_2393B8858(a1 + 1, v17, a2 - 2, v15);
          v19.n128_f32[0] = sub_2393B8858(a1 + 2, &a1[v16 + 1], a2 - 3, v18);
          sub_2393B8858(v17, v14, &a1[v16 + 1], v19);
          v100 = *a1;
          *a1 = *v14;
          a5 = v100;
          *v14 = v100;
        }
        --a3;
        v20 = a1->n128_u32[0];
        if ((a4 & 1) == 0)
        {
          v21 = a1[-1].n128_i32[0];
          if (v21 >= v20)
          {
            if (v21 == v20)
            {
              a5.n128_u32[0] = a1->n128_u32[3];
              if (a1[-1].n128_f32[3] < a5.n128_f32[0])
                goto LABEL_13;
            }
            else
            {
              a5.n128_u32[0] = a1->n128_u32[3];
            }
            v37 = v9->n128_u32[0];
            if (v20 < (signed __int32)v9->n128_u32[0] || v20 == v37 && a5.n128_f32[0] < a2[-1].n128_f32[3])
            {
              i = a1;
              do
              {
                v39 = i[1].n128_i32[0];
                ++i;
                v38 = v39;
              }
              while (v20 >= v39 && (v20 != v38 || a5.n128_f32[0] >= i->n128_f32[3]));
            }
            else
            {
              for (i = a1 + 1;
                    i < a2
                 && v20 >= (signed __int32)i->n128_u32[0]
                 && (v20 != i->n128_u32[0] || a5.n128_f32[0] >= i->n128_f32[3]);
            }
            j = a2;
            if (i < a2)
            {
              for (j = a2 - 1; v20 < v37 || v20 == v37 && a5.n128_f32[0] < j->n128_f32[3]; --j)
              {
                v41 = j[-1].n128_u32[0];
                v37 = v41;
              }
            }
            v42 = *(unint64_t *)((char *)a1->n128_u64 + 4);
            while (i < j)
            {
              v102 = *i;
              *i = *j;
              *j = v102;
              do
              {
                v44 = i[1].n128_i32[0];
                ++i;
                v43 = v44;
              }
              while (v20 >= v44 && (v20 != v43 || a5.n128_f32[0] >= i->n128_f32[3]));
              do
              {
                do
                {
                  v45 = j[-1].n128_i32[0];
                  --j;
                  v46 = v20 == v45;
                }
                while (v20 < v45);
              }
              while (v46 && a5.n128_f32[0] < j->n128_f32[3]);
            }
            if (&i[-1] != a1)
              *a1 = i[-1];
            a4 = 0;
            i[-1].n128_u32[0] = v20;
            *(unint64_t *)((char *)i[-1].n128_u64 + 4) = v42;
            i[-1].n128_u32[3] = a5.n128_u32[0];
            continue;
          }
        }
LABEL_13:
        v22 = *(unint64_t *)((char *)a1->n128_u64 + 4);
        a5.n128_u32[0] = a1->n128_u32[3];
        for (k = a1 + 1;
              (signed __int32)k->n128_u32[0] < v20 || k->n128_u32[0] == v20 && k->n128_f32[3] < a5.n128_f32[0];
        if (&k[-1] == a1)
        {
          m = a2;
          if (k < a2)
          {
            v27 = v9->n128_u32[0];
            m = a2 - 1;
            if ((signed __int32)v9->n128_u32[0] >= v20)
            {
              m = a2 - 1;
              do
              {
                if (v27 == v20)
                {
                  if (m->n128_f32[3] < a5.n128_f32[0] || k >= m)
                    break;
                }
                else if (k >= m)
                {
                  break;
                }
                v28 = m[-1].n128_i32[0];
                --m;
                v27 = v28;
              }
              while (v28 >= v20);
            }
          }
        }
        else
        {
          v24 = v9->n128_u32[0];
          for (m = a2 - 1; v24 >= v20 && (v24 != v20 || m->n128_f32[3] >= a5.n128_f32[0]); --m)
          {
            v26 = m[-1].n128_u32[0];
            v24 = v26;
          }
        }
        i = k;
        if (k < m)
        {
          i = k;
          v30 = m;
          do
          {
            v101 = *i;
            *i = *v30;
            *v30 = v101;
            do
            {
              do
              {
                v31 = i[1].n128_i32[0];
                ++i;
                v32 = v31 == v20;
              }
              while (v31 < v20);
            }
            while (v32 && i->n128_f32[3] < a5.n128_f32[0]);
            do
            {
              v34 = v30[-1].n128_i32[0];
              --v30;
              v33 = v34;
            }
            while (v34 >= v20 && (v33 != v20 || v30->n128_f32[3] >= a5.n128_f32[0]));
          }
          while (i < v30);
        }
        if (&i[-1] != a1)
          *a1 = i[-1];
        i[-1].n128_u32[0] = v20;
        *(unint64_t *)((char *)i[-1].n128_u64 + 4) = v22;
        i[-1].n128_u32[3] = a5.n128_u32[0];
        if (k < m)
        {
LABEL_53:
          sub_2393B7E64(a1, &i[-1], a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v35 = sub_2393B8B3C(a1, i - 1, a5);
        if (!sub_2393B8B3C(i, a2, v36))
        {
          if (v35)
            continue;
          goto LABEL_53;
        }
        a2 = i - 1;
        if (!v35)
          goto LABEL_1;
        return a5.n128_f32[0];
    }
  }
}

float sub_2393B8858(__n128 *a1, __n128 *a2, __n128 *a3, __n128 a4)
{
  signed __int32 v4;

  v4 = a2->n128_u32[0];
  if ((signed __int32)a2->n128_u32[0] < (signed __int32)a1->n128_u32[0]
    || v4 == a1->n128_u32[0] && (a4.n128_u32[0] = a2->n128_u32[3], a4.n128_f32[0] < a1->n128_f32[3]))
  {
    if ((signed __int32)a3->n128_u32[0] < v4 || a3->n128_u32[0] == v4 && a3->n128_f32[3] < a2->n128_f32[3])
    {
      a4 = *a1;
      *a1 = *a3;
LABEL_17:
      *a3 = a4;
      return a4.n128_f32[0];
    }
    a4 = *a1;
    *a1 = *a2;
    *a2 = a4;
    if ((signed __int32)a3->n128_u32[0] < (signed __int32)a2->n128_u32[0]
      || a3->n128_u32[0] == a2->n128_u32[0] && (a4.n128_u32[0] = a3->n128_u32[3], a4.n128_f32[0] < a2->n128_f32[3]))
    {
      a4 = *a2;
      *a2 = *a3;
      goto LABEL_17;
    }
  }
  else if ((signed __int32)a3->n128_u32[0] < v4
         || a3->n128_u32[0] == v4 && (a4.n128_u32[0] = a3->n128_u32[3], a4.n128_f32[0] < a2->n128_f32[3]))
  {
    a4 = *a2;
    *a2 = *a3;
    *a3 = a4;
    if ((signed __int32)a2->n128_u32[0] < (signed __int32)a1->n128_u32[0]
      || a2->n128_u32[0] == a1->n128_u32[0] && (a4.n128_u32[0] = a2->n128_u32[3], a4.n128_f32[0] < a1->n128_f32[3]))
    {
      a4 = *a1;
      *a1 = *a2;
      *a2 = a4;
    }
  }
  return a4.n128_f32[0];
}

float sub_2393B896C(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5, __n128 a6)
{
  __n128 v11;

  v11.n128_f32[0] = sub_2393B8858(a1, a2, a3, a6);
  if ((signed __int32)a4->n128_u32[0] < (signed __int32)a3->n128_u32[0]
    || a4->n128_u32[0] == a3->n128_u32[0] && (v11.n128_u32[0] = a4->n128_u32[3], v11.n128_f32[0] < a3->n128_f32[3]))
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    if ((signed __int32)a3->n128_u32[0] < (signed __int32)a2->n128_u32[0]
      || a3->n128_u32[0] == a2->n128_u32[0] && (v11.n128_u32[0] = a3->n128_u32[3], v11.n128_f32[0] < a2->n128_f32[3]))
    {
      v11 = *a2;
      *a2 = *a3;
      *a3 = v11;
      if ((signed __int32)a2->n128_u32[0] < (signed __int32)a1->n128_u32[0]
        || a2->n128_u32[0] == a1->n128_u32[0] && (v11.n128_u32[0] = a2->n128_u32[3], v11.n128_f32[0] < a1->n128_f32[3]))
      {
        v11 = *a1;
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  if ((signed __int32)a5->n128_u32[0] < (signed __int32)a4->n128_u32[0]
    || a5->n128_u32[0] == a4->n128_u32[0] && (v11.n128_u32[0] = a5->n128_u32[3], v11.n128_f32[0] < a4->n128_f32[3]))
  {
    v11 = *a4;
    *a4 = *a5;
    *a5 = v11;
    if ((signed __int32)a4->n128_u32[0] < (signed __int32)a3->n128_u32[0]
      || a4->n128_u32[0] == a3->n128_u32[0] && (v11.n128_u32[0] = a4->n128_u32[3], v11.n128_f32[0] < a3->n128_f32[3]))
    {
      v11 = *a3;
      *a3 = *a4;
      *a4 = v11;
      if ((signed __int32)a3->n128_u32[0] < (signed __int32)a2->n128_u32[0]
        || a3->n128_u32[0] == a2->n128_u32[0] && (v11.n128_u32[0] = a3->n128_u32[3], v11.n128_f32[0] < a2->n128_f32[3]))
      {
        v11 = *a2;
        *a2 = *a3;
        *a3 = v11;
        if ((signed __int32)a2->n128_u32[0] < (signed __int32)a1->n128_u32[0]
          || a2->n128_u32[0] == a1->n128_u32[0]
          && (v11.n128_u32[0] = a2->n128_u32[3], v11.n128_f32[0] < a1->n128_f32[3]))
        {
          v11 = *a1;
          *a1 = *a2;
          *a2 = v11;
        }
      }
    }
  }
  return v11.n128_f32[0];
}

BOOL sub_2393B8B3C(__n128 *a1, __n128 *a2, __n128 a3)
{
  uint64_t v5;
  _BOOL8 result;
  __n128 *v7;
  signed __int32 v8;
  __n128 v9;
  __n128 *v10;
  __n128 *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  signed __int32 v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  signed __int32 v19;
  __n128 *v20;
  __n128 *v21;
  __n128 *v22;
  signed __int32 v23;
  signed __int32 v24;
  __n128 v25;
  __n128 v26;
  signed __int32 v27;
  __n128 v28;

  v5 = a2 - a1;
  result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v7 = a2 - 1;
      v8 = a2[-1].n128_i32[0];
      if (v8 < (signed __int32)a1->n128_u32[0] || v8 == a1->n128_u32[0] && a2[-1].n128_f32[3] < a1->n128_f32[3])
      {
        v9 = *a1;
        *a1 = *v7;
        *v7 = v9;
      }
      return result;
    case 3:
      sub_2393B8858(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      v20 = a1 + 1;
      v21 = a1 + 2;
      sub_2393B8858(a1, a1 + 1, a1 + 2, a3);
      v22 = a2 - 1;
      v23 = a2[-1].n128_i32[0];
      v24 = a1[2].n128_i32[0];
      if (v23 < v24 || v23 == v24 && a2[-1].n128_f32[3] < a1[2].n128_f32[3])
      {
        v25 = *v21;
        *v21 = *v22;
        *v22 = v25;
        if ((signed __int32)v21->n128_u32[0] < (signed __int32)v20->n128_u32[0]
          || v21->n128_u32[0] == v20->n128_u32[0] && a1[2].n128_f32[3] < a1[1].n128_f32[3])
        {
          v26 = *v20;
          *v20 = *v21;
          *v21 = v26;
          v27 = a1[1].n128_i32[0];
          if (v27 < (signed __int32)a1->n128_u32[0] || v27 == a1->n128_u32[0] && a1[1].n128_f32[3] < a1->n128_f32[3])
          {
            v28 = *a1;
            *a1 = *v20;
            *v20 = v28;
          }
        }
      }
      return 1;
    case 5:
      sub_2393B896C(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v10 = a1 + 2;
      sub_2393B8858(a1, a1 + 1, a1 + 2, a3);
      v11 = a1 + 3;
      if (&a1[3] == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    v15 = v11->n128_u32[0];
    if ((signed __int32)v11->n128_u32[0] < (signed __int32)v10->n128_u32[0])
      break;
    if (v15 == v10->n128_u32[0])
    {
      v16 = v11->n128_f32[3];
      if (v16 < v10->n128_f32[3])
        goto LABEL_11;
    }
LABEL_8:
    v10 = v11;
    v12 += 16;
    if (++v11 == a2)
      return 1;
  }
  v16 = v11->n128_f32[3];
LABEL_11:
  v17 = *(uint64_t *)((char *)v11->n128_i64 + 4);
  *v11 = *v10;
  v14 = (uint64_t)a1;
  if (v10 != a1)
  {
    v18 = v12;
    while (1)
    {
      v19 = *(__int32 *)((char *)a1[1].n128_i32 + v18);
      if (v15 >= v19)
      {
        if (v15 != v19)
        {
          v14 = (uint64_t)v10;
          goto LABEL_7;
        }
        if (v16 >= *(float *)((char *)&a1[1].n128_f32[3] + v18))
          break;
      }
      --v10;
      *(__n128 *)((char *)a1 + v18 + 32) = *(__n128 *)((char *)a1 + v18 + 16);
      v18 -= 16;
      if (v18 == -32)
      {
        v14 = (uint64_t)a1;
        goto LABEL_7;
      }
    }
    v14 = (uint64_t)&a1[2] + v18;
  }
LABEL_7:
  *(_DWORD *)v14 = v15;
  *(_QWORD *)(v14 + 4) = v17;
  *(float *)(v14 + 12) = v16;
  if (++v13 != 8)
    goto LABEL_8;
  return &v11[1] == a2;
}

uint64_t sub_2393B8DD8(uint64_t result, float *a2, float **a3, uint64_t a4, char a5)
{
  float *v7;
  float *v8;
  float *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  float *v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float *v20;
  float *v21;
  float v22;
  float *v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float *v30;
  float *v31;
  uint64_t v32;
  float v33;
  float v34;
  float v35;
  float v36;
  double v37;
  double v38;
  double v39;
  double v40;
  BOOL v41;
  double v42;
  double v43;
  float v44;
  float v45;
  float v46;
  float v47;
  double v49;
  float v50;
  double v51;
  float v52;
  float v53;
  float v54;
  float v55;
  double v57;
  float v58;
  double v59;
  BOOL v60;
  float v61;
  float v62;
  float *v63;
  float *v64;
  float v65;
  float v66;
  float v67;
  float v68;
  uint64_t v69;
  float v70;
  float v71;
  float v72;
  float v73;
  double v74;
  double v75;
  double v76;
  double v77;
  BOOL v78;
  double v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  double v86;
  float v87;
  double v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  double v95;
  float v96;
  double v97;
  uint64_t v98;
  uint64_t v99;
  int8x16_t v100;
  float *v101;
  BOOL v103;
  uint64_t v104;
  float *v105;
  float *v106;
  float *v107;
  float *v108;
  float v109;
  float v110;
  float v111;
  float v112;
  uint64_t v113;
  float v114;
  float v115;
  float v116;
  double v118;
  float v119;
  double v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  double v127;
  float v128;
  double v129;
  int64_t v130;
  int64_t v131;
  int64_t v132;
  uint64_t v133;
  float *v134;
  uint64_t v135;
  float *v136;
  float v137;
  float v138;
  float v139;
  float v140;
  _BOOL4 v141;
  float v142;
  float *v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  _BOOL4 v150;
  float v151;
  float *v152;
  uint64_t v153;
  float *v154;
  float *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  float *v159;
  BOOL v160;
  float *v162;
  uint64_t v163;
  uint64_t v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  double v172;
  float v173;
  double v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  double v181;
  float v182;
  double v183;
  uint64_t v184;
  unint64_t v185;
  float *v186;
  float v187;
  float v188;
  float *v189;
  float *v190;
  float *v191;
  float v192;
  float v193;
  float v194;
  float v195;
  float *v196;
  float v197;
  float v198;
  float v199;
  double v201;
  float v202;
  double v203;
  float v204;
  float v205;
  float v206;
  float v207;
  float v208;
  double v210;
  float v211;
  double v212;
  float *v213;
  float *v214;
  float *v215;
  float *v216;
  float *v217;

  v7 = (float *)result;
LABEL_2:
  v8 = a2 - 2;
  v213 = a2 - 6;
  v214 = a2 - 4;
  v9 = v7;
  v215 = a2 - 2;
  v216 = a2;
  while (2)
  {
    v7 = v9;
    v10 = (char *)a2 - (char *)v9;
    v11 = ((char *)a2 - (char *)v9) >> 3;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = sub_2393B9EF0(**a3, (*a3)[1], *(a2 - 2), *(a2 - 1), *v7, v7[1]);
        if ((_DWORD)result)
        {
          v98 = *(_QWORD *)v7;
          *(_QWORD *)v7 = *(_QWORD *)v8;
          *(_QWORD *)v8 = v98;
        }
        return result;
      case 3:
        return sub_2393BA0B4(v7, v7 + 2, v8, a3);
      case 4:
        sub_2393BA0B4(v7, v7 + 2, v7 + 4, a3);
        result = sub_2393B9EF0(**a3, (*a3)[1], *(a2 - 2), *(a2 - 1), v7[4], v7[5]);
        if ((_DWORD)result)
        {
          v99 = *((_QWORD *)v7 + 2);
          *((_QWORD *)v7 + 2) = *(_QWORD *)v8;
          *(_QWORD *)v8 = v99;
          result = sub_2393B9EF0(**a3, (*a3)[1], v7[4], v7[5], v7[2], v7[3]);
          if ((_DWORD)result)
          {
            v100 = vextq_s8(*(int8x16_t *)(v7 + 2), *(int8x16_t *)(v7 + 2), 8uLL);
            *(int8x16_t *)(v7 + 2) = v100;
            result = sub_2393B9EF0(**a3, (*a3)[1], *(float *)v100.i32, *(float *)&v100.i32[1], *v7, v7[1]);
            if ((_DWORD)result)
              *(int8x16_t *)v7 = vextq_s8(*(int8x16_t *)v7, *(int8x16_t *)v7, 8uLL);
          }
        }
        return result;
      case 5:
        return sub_2393BA1CC(v7, v7 + 2, v7 + 4, v7 + 6, v8, a3);
      default:
        if (v10 > 191)
        {
          if (!a4)
          {
            if (v7 != a2)
            {
              v130 = (unint64_t)(v11 - 2) >> 1;
              v131 = v130;
              do
              {
                v132 = v131;
                if (v130 >= v131)
                {
                  v133 = (2 * v131) | 1;
                  v134 = &v7[2 * v133];
                  v135 = 2 * v131 + 2;
                  v136 = *a3;
                  if (v135 >= v11)
                  {
                    v142 = *v134;
                    v139 = *v136;
                    v140 = v136[1];
                  }
                  else
                  {
                    v137 = *v134;
                    v138 = v134[2];
                    v139 = *v136;
                    v140 = v136[1];
                    v141 = sub_2393B9EF0(*v136, v140, *v134, v134[1], v138, v134[3]);
                    if (v141)
                      v142 = v138;
                    else
                      v142 = v137;
                    if (v141)
                    {
                      v134 += 2;
                      v133 = 2 * v132 + 2;
                    }
                  }
                  v143 = &v7[2 * v132];
                  v144 = *v143;
                  v145 = v143[1];
                  result = sub_2393B9EF0(v139, v140, v142, v134[1], *v143, v145);
                  if ((result & 1) == 0)
                  {
                    do
                    {
                      v152 = v134;
                      *(_QWORD *)v143 = *(_QWORD *)v134;
                      if (v130 < v133)
                        break;
                      v153 = (2 * v133) | 1;
                      v134 = &v7[2 * v153];
                      v133 = 2 * v133 + 2;
                      v154 = *a3;
                      if (v133 < v11)
                      {
                        v146 = *v134;
                        v147 = v134[2];
                        v148 = *v154;
                        v149 = v154[1];
                        v150 = sub_2393B9EF0(*v154, v149, *v134, v134[1], v147, v134[3]);
                        v151 = v150 ? v147 : v146;
                        if (v150)
                          v134 += 2;
                        else
                          v133 = v153;
                      }
                      else
                      {
                        v151 = *v134;
                        v133 = v153;
                        v148 = *v154;
                        v149 = v154[1];
                      }
                      result = sub_2393B9EF0(v148, v149, v151, v134[1], v144, v145);
                      v143 = v152;
                    }
                    while (!(_DWORD)result);
                    *v152 = v144;
                    v152[1] = v145;
                  }
                }
                v131 = v132 - 1;
              }
              while (v132);
              v155 = v216;
              v156 = (unint64_t)v10 >> 3;
              do
              {
                v157 = 0;
                v158 = *(_QWORD *)v7;
                v159 = v7;
                do
                {
                  v162 = &v159[2 * v157 + 2];
                  v163 = (2 * v157) | 1;
                  v164 = 2 * v157 + 2;
                  if (v164 < v156)
                  {
                    v166 = **a3;
                    v165 = (*a3)[1];
                    v167 = *v162;
                    v168 = v162[1];
                    v169 = vabds_f32(v165, v168);
                    v170 = (float)(fabsf(v168) * 0.00001) + 0.000001;
                    if (vabds_f32(v166, *v162) > (float)((float)(fabsf(*v162) * 0.00001) + 0.000001) || v169 > v170)
                    {
                      v172 = (float)(v167 - v166);
                      v173 = v168 - v165;
                      v174 = vabdd_f64(0.0, v172) <= fabs(v172) * 0.00000999999975 + 0.000000999999997
                           ? (double)(int)((__PAIR64__(v173 > 0.0, LODWORD(v173)) - COERCE_UNSIGNED_INT(0.0)) >> 32)
                           * 1.79769313e308
                           : v173 / v172;
                    }
                    else
                    {
                      v174 = -1.79769313e308;
                    }
                    v175 = v162[2];
                    v176 = v162[3];
                    v177 = (float)(fabsf(v175) * 0.00001) + 0.000001;
                    v178 = vabds_f32(v165, v176);
                    v179 = (float)(fabsf(v176) * 0.00001) + 0.000001;
                    if (vabds_f32(v166, v175) > v177 || v178 > v179)
                    {
                      v181 = (float)(v175 - v166);
                      v182 = v176 - v165;
                      v183 = vabdd_f64(0.0, v181) <= fabs(v181) * 0.00000999999975 + 0.000000999999997
                           ? (double)(int)((__PAIR64__(v182 > 0.0, LODWORD(v182)) - COERCE_UNSIGNED_INT(0.0)) >> 32)
                           * 1.79769313e308
                           : v182 / v181;
                    }
                    else
                    {
                      v183 = -1.79769313e308;
                    }
                    if (vabdd_f64(v174, v183) > fabs(v183) * 0.00000999999975 + 0.000000999999997)
                      v160 = v174 < v183;
                    else
                      v160 = vabds_f32(v167, v175) <= v177 ? v168 < v176 : v167 < v175;
                    if (v160)
                    {
                      v162 += 2;
                      v163 = v164;
                    }
                  }
                  *(_QWORD *)v159 = *(_QWORD *)v162;
                  v159 = v162;
                  v157 = v163;
                }
                while (v163 <= (uint64_t)((unint64_t)(v156 - 2) >> 1));
                v155 -= 2;
                if (v162 == v155)
                {
                  *(_QWORD *)v162 = v158;
                }
                else
                {
                  *(_QWORD *)v162 = *(_QWORD *)v155;
                  *(_QWORD *)v155 = v158;
                  v184 = (char *)v162 - (char *)v7 + 8;
                  if (v184 >= 9)
                  {
                    v185 = (((unint64_t)v184 >> 3) - 2) >> 1;
                    v186 = &v7[2 * v185];
                    v187 = *v162;
                    v188 = v162[1];
                    result = sub_2393B9EF0(**a3, (*a3)[1], *v186, v186[1], *v162, v188);
                    if ((_DWORD)result)
                    {
                      v217 = v155;
                      do
                      {
                        v189 = v186;
                        *(_QWORD *)v162 = *(_QWORD *)v186;
                        if (!v185)
                          break;
                        v185 = (v185 - 1) >> 1;
                        v186 = &v7[2 * v185];
                        result = sub_2393B9EF0(**a3, (*a3)[1], *v186, v186[1], v187, v188);
                        v162 = v189;
                      }
                      while ((result & 1) != 0);
                      *v189 = v187;
                      v189[1] = v188;
                      v155 = v217;
                    }
                  }
                }
                v41 = v156-- <= 2;
              }
              while (!v41);
            }
            return result;
          }
          v12 = (unint64_t)v11 >> 1;
          v13 = &v7[2 * ((unint64_t)v11 >> 1)];
          if ((unint64_t)v10 < 0x401)
          {
            sub_2393BA0B4(v13, v7, v8, a3);
          }
          else
          {
            sub_2393BA0B4(v7, v13, v8, a3);
            v14 = 2 * v12;
            sub_2393BA0B4(v7 + 2, &v7[v14 - 2], v214, a3);
            sub_2393BA0B4(v7 + 4, &v7[v14 + 2], v213, a3);
            sub_2393BA0B4(&v7[v14 - 2], v13, &v7[v14 + 2], a3);
            v15 = *(_QWORD *)v7;
            *(_QWORD *)v7 = *(_QWORD *)&v7[v14];
            *(_QWORD *)&v7[v14] = v15;
            v8 = v215;
          }
          --a4;
          a2 = v216;
          if ((a5 & 1) == 0)
          {
            v17 = *v7;
            v16 = v7[1];
            v18 = **a3;
            v19 = (*a3)[1];
            if (sub_2393B9EF0(v18, v19, *(v7 - 2), *(v7 - 1), *v7, v16))
              goto LABEL_12;
            result = sub_2393B9EF0(v18, v19, v17, v16, *(v216 - 2), *(v216 - 1));
            if ((result & 1) != 0)
            {
              v9 = v7;
              do
              {
                v61 = v9[2];
                v62 = v9[3];
                v9 += 2;
                result = sub_2393B9EF0(v18, v19, v17, v16, v61, v62);
              }
              while ((result & 1) == 0);
            }
            else
            {
              v63 = v7 + 2;
              do
              {
                v9 = v63;
                if (v63 >= v216)
                  break;
                result = sub_2393B9EF0(v18, v19, v17, v16, *v63, v63[1]);
                v63 = v9 + 2;
              }
              while (!(_DWORD)result);
            }
            v64 = v216;
            if (v9 < v216)
            {
              v64 = v216;
              do
              {
                v65 = *(v64 - 2);
                v66 = *(v64 - 1);
                v64 -= 2;
                result = sub_2393B9EF0(v18, v19, v17, v16, v65, v66);
              }
              while ((result & 1) != 0);
            }
            if (v9 < v64)
            {
              v67 = (float)(fabsf(v17) * 0.00001) + 0.000001;
              v68 = (float)(fabsf(v16) * 0.00001) + 0.000001;
              do
              {
                v69 = *(_QWORD *)v9;
                *(_QWORD *)v9 = *(_QWORD *)v64;
                v9 += 2;
                *(_QWORD *)v64 = v69;
                v70 = **a3;
                v71 = (*a3)[1];
                v72 = vabds_f32(v70, v17);
                v73 = vabds_f32(v71, v16);
                v74 = (float)(v17 - v70);
                v75 = vabdd_f64(0.0, v74);
                v76 = fabs(v74) * 0.00000999999975 + 0.000000999999997;
                v77 = (float)(v16 - v71) / v74;
                if (v75 <= v76)
                  v77 = (double)(int)((__PAIR64__((float)(v16 - v71) > 0.0, v16 - v71) - COERCE_UNSIGNED_INT(0.0)) >> 32)
                      * 1.79769313e308;
                v78 = v73 > v68 || v72 > v67;
                v79 = -1.79769313e308;
                if (v78)
                  v79 = v77;
                while (1)
                {
                  v80 = *v9;
                  v81 = v9[1];
                  v82 = (float)(fabsf(*v9) * 0.00001) + 0.000001;
                  v83 = vabds_f32(v71, v81);
                  v84 = (float)(fabsf(v81) * 0.00001) + 0.000001;
                  if (vabds_f32(v70, *v9) > v82 || v83 > v84)
                  {
                    v86 = (float)(v80 - v70);
                    v87 = v81 - v71;
                    if (vabdd_f64(0.0, v86) <= fabs(v86) * 0.00000999999975 + 0.000000999999997)
                      v88 = (double)(int)((__PAIR64__(v87 > 0.0, LODWORD(v87)) - COERCE_UNSIGNED_INT(0.0)) >> 32)
                          * 1.79769313e308;
                    else
                      v88 = v87 / v86;
                  }
                  else
                  {
                    v88 = -1.79769313e308;
                  }
                  if (vabdd_f64(v79, v88) > fabs(v88) * 0.00000999999975 + 0.000000999999997)
                  {
                    if (v79 < v88)
                      goto LABEL_106;
                    goto LABEL_90;
                  }
                  if (vabds_f32(v17, v80) <= v82)
                    break;
                  if (v17 < v80)
                    goto LABEL_106;
LABEL_90:
                  v9 += 2;
                }
                if (v16 >= v81)
                  goto LABEL_90;
                do
                {
                  while (1)
                  {
LABEL_106:
                    while (1)
                    {
                      v89 = *(v64 - 2);
                      v90 = *(v64 - 1);
                      v64 -= 2;
                      v91 = (float)(fabsf(v89) * 0.00001) + 0.000001;
                      v92 = vabds_f32(v71, v90);
                      v93 = (float)(fabsf(v90) * 0.00001) + 0.000001;
                      if (vabds_f32(v70, v89) > v91 || v92 > v93)
                      {
                        v95 = (float)(v89 - v70);
                        v96 = v90 - v71;
                        v97 = vabdd_f64(0.0, v95) <= fabs(v95) * 0.00000999999975 + 0.000000999999997
                            ? (double)(int)((__PAIR64__(v96 > 0.0, LODWORD(v96)) - COERCE_UNSIGNED_INT(0.0)) >> 32)
                            * 1.79769313e308
                            : v96 / v95;
                      }
                      else
                      {
                        v97 = -1.79769313e308;
                      }
                      if (vabdd_f64(v79, v97) <= fabs(v97) * 0.00000999999975 + 0.000000999999997)
                        break;
                      if (v79 >= v97)
                        goto LABEL_80;
                    }
                    if (vabds_f32(v17, v89) <= v91)
                      break;
                    if (v17 >= v89)
                      goto LABEL_80;
                  }
                }
                while (v16 < v90);
LABEL_80:
                ;
              }
              while (v9 < v64);
            }
            if (v9 - 2 != v7)
              *(_QWORD *)v7 = *((_QWORD *)v9 - 1);
            a5 = 0;
            *(v9 - 2) = v17;
            *(v9 - 1) = v16;
            continue;
          }
          v17 = *v7;
          v16 = v7[1];
          v18 = **a3;
          v19 = (*a3)[1];
LABEL_12:
          v20 = v7;
          do
          {
            v21 = v20;
            v22 = v20[2];
            v20 += 2;
          }
          while (sub_2393B9EF0(v18, v19, v22, v21[3], v17, v16));
          v23 = v216;
          if (v21 == v7)
          {
            v23 = v216;
            do
            {
              if (v20 >= v23)
                break;
              v26 = *(v23 - 2);
              v27 = *(v23 - 1);
              v23 -= 2;
            }
            while (!sub_2393B9EF0(v18, v19, v26, v27, v17, v16));
          }
          else
          {
            do
            {
              v24 = *(v23 - 2);
              v25 = *(v23 - 1);
              v23 -= 2;
            }
            while (!sub_2393B9EF0(v18, v19, v24, v25, v17, v16));
          }
          if (v20 < v23)
          {
            v28 = (float)(fabsf(v17) * 0.00001) + 0.000001;
            v29 = (float)(fabsf(v16) * 0.00001) + 0.000001;
            v30 = v20;
            v31 = v23;
            do
            {
              v32 = *(_QWORD *)v30;
              *(_QWORD *)v30 = *(_QWORD *)v31;
              v30 += 2;
              *(_QWORD *)v31 = v32;
              v33 = **a3;
              v34 = (*a3)[1];
              v35 = vabds_f32(v33, v17);
              v36 = vabds_f32(v34, v16);
              v37 = (float)(v17 - v33);
              v38 = vabdd_f64(0.0, v37);
              v39 = fabs(v37) * 0.00000999999975 + 0.000000999999997;
              v40 = (float)(v16 - v34) / v37;
              if (v38 <= v39)
                v40 = (double)(int)((__PAIR64__((float)(v16 - v34) > 0.0, v16 - v34) - COERCE_UNSIGNED_INT(0.0)) >> 32)
                    * 1.79769313e308;
              v41 = v36 > v29 || v35 > v28;
              v42 = -1.79769313e308;
              if (v41)
                v42 = v40;
              v43 = fabs(v42) * 0.00000999999975 + 0.000000999999997;
              while (1)
              {
                v44 = *v30;
                v45 = v30[1];
                v46 = vabds_f32(v34, v45);
                v47 = (float)(fabsf(v45) * 0.00001) + 0.000001;
                if (vabds_f32(v33, *v30) > (float)((float)(fabsf(*v30) * 0.00001) + 0.000001) || v46 > v47)
                {
                  v49 = (float)(v44 - v33);
                  v50 = v45 - v34;
                  if (vabdd_f64(0.0, v49) <= fabs(v49) * 0.00000999999975 + 0.000000999999997)
                    v51 = (double)(int)((__PAIR64__(v50 > 0.0, LODWORD(v50)) - COERCE_UNSIGNED_INT(0.0)) >> 32)
                        * 1.79769313e308;
                  else
                    v51 = v50 / v49;
                }
                else
                {
                  v51 = -1.79769313e308;
                }
                if (vabdd_f64(v51, v42) > v43)
                {
                  if (v51 >= v42)
                    goto LABEL_46;
                  goto LABEL_32;
                }
                if (vabds_f32(v44, v17) <= v28)
                  break;
                if (v44 >= v17)
                  goto LABEL_46;
LABEL_32:
                v30 += 2;
              }
              if (v45 < v16)
                goto LABEL_32;
LABEL_46:
              v21 = v30 - 2;
              do
              {
                while (1)
                {
                  while (1)
                  {
                    v52 = *(v31 - 2);
                    v53 = *(v31 - 1);
                    v31 -= 2;
                    v54 = vabds_f32(v34, v53);
                    v55 = (float)(fabsf(v53) * 0.00001) + 0.000001;
                    if (vabds_f32(v33, v52) > (float)((float)(fabsf(v52) * 0.00001) + 0.000001) || v54 > v55)
                    {
                      v57 = (float)(v52 - v33);
                      v58 = v53 - v34;
                      v59 = vabdd_f64(0.0, v57) <= fabs(v57) * 0.00000999999975 + 0.000000999999997
                          ? (double)(int)((__PAIR64__(v58 > 0.0, LODWORD(v58)) - COERCE_UNSIGNED_INT(0.0)) >> 32)
                          * 1.79769313e308
                          : v58 / v57;
                    }
                    else
                    {
                      v59 = -1.79769313e308;
                    }
                    if (vabdd_f64(v59, v42) <= v43)
                      break;
                    if (v59 < v42)
                      goto LABEL_22;
                  }
                  if (vabds_f32(v52, v17) <= v28)
                    break;
                  if (v52 < v17)
                    goto LABEL_22;
                }
              }
              while (v53 >= v16);
LABEL_22:
              ;
            }
            while (v30 < v31);
          }
          if (v21 != v7)
            *(_QWORD *)v7 = *(_QWORD *)v21;
          *v21 = v17;
          v21[1] = v16;
          if (v20 < v23)
            goto LABEL_67;
          v60 = sub_2393BA354(v7, v21, a3);
          v9 = v21 + 2;
          result = sub_2393BA354(v21 + 2, v216, a3);
          if (!(_DWORD)result)
          {
            if (v60)
              continue;
LABEL_67:
            result = sub_2393B8DD8(v7, v21, a3, a4, a5 & 1);
            a5 = 0;
            v9 = v21 + 2;
            continue;
          }
          a2 = v21;
          if (v60)
            return result;
          goto LABEL_2;
        }
        v101 = v7 + 2;
        v103 = v7 == a2 || v101 == a2;
        if ((a5 & 1) == 0)
        {
          if (v103)
            return result;
          v190 = *a3;
          while (1)
          {
            v191 = v101;
            v192 = v7[2];
            result = sub_2393B9EF0(*v190, v190[1], v192, v101[1], *v7, v7[1]);
            if ((_DWORD)result)
            {
              v193 = v7[3];
              v194 = (float)(fabsf(v192) * 0.00001) + 0.000001;
              v195 = (float)(fabsf(v193) * 0.00001) + 0.000001;
              do
              {
                while (1)
                {
                  while (1)
                  {
                    v196 = v7;
                    *((_QWORD *)v7 + 1) = *(_QWORD *)v7;
                    v198 = **a3;
                    v197 = (*a3)[1];
                    v199 = vabds_f32(v197, v193);
                    if (vabds_f32(v198, v192) > v194 || v199 > v195)
                    {
                      v201 = (float)(v192 - v198);
                      v202 = v193 - v197;
                      v203 = vabdd_f64(0.0, v201) <= fabs(v201) * 0.00000999999975 + 0.000000999999997
                           ? (double)(int)((__PAIR64__(v202 > 0.0, LODWORD(v202)) - COERCE_UNSIGNED_INT(0.0)) >> 32)
                           * 1.79769313e308
                           : v202 / v201;
                    }
                    else
                    {
                      v203 = -1.79769313e308;
                    }
                    v204 = *(v7 - 2);
                    v205 = *(v7 - 1);
                    v206 = (float)(fabsf(v204) * 0.00001) + 0.000001;
                    v207 = vabds_f32(v197, v205);
                    v208 = (float)(fabsf(v205) * 0.00001) + 0.000001;
                    if (vabds_f32(v198, v204) > v206 || v207 > v208)
                    {
                      v210 = (float)(v204 - v198);
                      v211 = v205 - v197;
                      v212 = vabdd_f64(0.0, v210) <= fabs(v210) * 0.00000999999975 + 0.000000999999997
                           ? (double)(int)((__PAIR64__(v211 > 0.0, LODWORD(v211)) - COERCE_UNSIGNED_INT(0.0)) >> 32)
                           * 1.79769313e308
                           : v211 / v210;
                    }
                    else
                    {
                      v212 = -1.79769313e308;
                    }
                    v7 -= 2;
                    if (vabdd_f64(v203, v212) <= fabs(v212) * 0.00000999999975 + 0.000000999999997)
                      break;
                    if (v203 >= v212)
                      goto LABEL_241;
                  }
                  if (vabds_f32(v192, v204) <= v206)
                    break;
                  if (v204 <= v192)
                    goto LABEL_241;
                }
              }
              while (v205 > v193);
LABEL_241:
              *v196 = v192;
              v196[1] = v193;
              v190 = *a3;
            }
            v101 = v191 + 2;
            v7 = v191;
            if (v191 + 2 == a2)
              return result;
          }
        }
        if (v103)
          return result;
        v104 = 0;
        v105 = *a3;
        v106 = v7;
        while (2)
        {
          v108 = v101;
          v109 = v106[2];
          result = sub_2393B9EF0(*v105, v105[1], v109, v101[1], *v106, v106[1]);
          if (!(_DWORD)result)
            goto LABEL_145;
          v110 = v106[3];
          *((_QWORD *)v106 + 1) = *(_QWORD *)v106;
          v107 = v7;
          if (v106 == v7)
            goto LABEL_144;
          v111 = (float)(fabsf(v109) * 0.00001) + 0.000001;
          v112 = (float)(fabsf(v110) * 0.00001) + 0.000001;
          v113 = v104;
          while (1)
          {
            v115 = **a3;
            v114 = (*a3)[1];
            v116 = vabds_f32(v114, v110);
            if (vabds_f32(v115, v109) > v111 || v116 > v112)
            {
              v118 = (float)(v109 - v115);
              v119 = v110 - v114;
              v120 = vabdd_f64(0.0, v118) <= fabs(v118) * 0.00000999999975 + 0.000000999999997
                   ? (double)(int)((__PAIR64__(v119 > 0.0, LODWORD(v119)) - COERCE_UNSIGNED_INT(0.0)) >> 32)
                   * 1.79769313e308
                   : v119 / v118;
            }
            else
            {
              v120 = -1.79769313e308;
            }
            v121 = *(float *)((char *)v7 + v113 - 8);
            v122 = *(float *)((char *)v7 + v113 - 4);
            v123 = (float)(fabsf(v121) * 0.00001) + 0.000001;
            v124 = vabds_f32(v114, v122);
            v125 = (float)(fabsf(v122) * 0.00001) + 0.000001;
            if (vabds_f32(v115, v121) > v123 || v124 > v125)
            {
              v127 = (float)(v121 - v115);
              v128 = v122 - v114;
              v129 = vabdd_f64(0.0, v127) <= fabs(v127) * 0.00000999999975 + 0.000000999999997
                   ? (double)(int)((__PAIR64__(v128 > 0.0, LODWORD(v128)) - COERCE_UNSIGNED_INT(0.0)) >> 32)
                   * 1.79769313e308
                   : v128 / v127;
            }
            else
            {
              v129 = -1.79769313e308;
            }
            if (vabdd_f64(v120, v129) > fabs(v129) * 0.00000999999975 + 0.000000999999997)
              break;
            if (vabds_f32(v109, v121) <= v123)
            {
              if (v122 <= v110)
              {
LABEL_172:
                v107 = v106;
                goto LABEL_144;
              }
            }
            else if (v121 <= v109)
            {
              goto LABEL_172;
            }
LABEL_150:
            v106 -= 2;
            *(_QWORD *)((char *)v7 + v113) = *(_QWORD *)((char *)v7 + v113 - 8);
            v113 -= 8;
            if (!v113)
            {
              v107 = v7;
              goto LABEL_144;
            }
          }
          if (v120 < v129)
            goto LABEL_150;
          v107 = (float *)((char *)v7 + v113);
LABEL_144:
          *v107 = v109;
          v107[1] = v110;
          v105 = *a3;
LABEL_145:
          v101 = v108 + 2;
          v104 += 8;
          v106 = v108;
          if (v108 + 2 != a2)
            continue;
          return result;
        }
    }
  }
}

BOOL sub_2393B9EF0(float a1, float a2, float a3, float a4, float a5, float a6)
{
  float v6;
  float v7;
  float v8;
  float v9;
  BOOL v10;
  BOOL v11;
  double v12;
  float v13;
  double v14;
  float v15;
  float v16;
  float v17;
  float v18;
  BOOL v19;
  BOOL v20;
  double v21;
  float v22;
  double v23;

  v6 = vabds_f32(a1, a3);
  v7 = (float)(fabsf(a3) * 0.00001) + 0.000001;
  v11 = v6 == v7;
  v10 = v6 >= v7;
  v8 = vabds_f32(a2, a4);
  v9 = (float)(fabsf(a4) * 0.00001) + 0.000001;
  if (!v11 && v10)
  {
    v10 = 1;
    v11 = 0;
  }
  else
  {
    v11 = v8 == v9;
    v10 = v8 >= v9;
  }
  if (!v11 && v10)
  {
    v12 = (float)(a3 - a1);
    v13 = a4 - a2;
    if (vabdd_f64(0.0, v12) <= fabs(v12) * 0.00000999999975 + 0.000000999999997)
      v14 = (double)(int)((__PAIR64__(v13 > 0.0, LODWORD(v13)) - COERCE_UNSIGNED_INT(0.0)) >> 32) * 1.79769313e308;
    else
      v14 = v13 / v12;
  }
  else
  {
    v14 = -1.79769313e308;
  }
  v15 = vabds_f32(a1, a5);
  v16 = (float)(fabsf(a5) * 0.00001) + 0.000001;
  v11 = v15 == v16;
  v10 = v15 >= v16;
  v17 = vabds_f32(a2, a6);
  v18 = (float)(fabsf(a6) * 0.00001) + 0.000001;
  if (!v11 && v10)
  {
    v19 = 1;
    v20 = 0;
  }
  else
  {
    v20 = v17 == v18;
    v19 = v17 >= v18;
  }
  if (!v20 && v19)
  {
    v21 = (float)(a5 - a1);
    v22 = a6 - a2;
    if (vabdd_f64(0.0, v21) <= fabs(v21) * 0.00000999999975 + 0.000000999999997)
      v23 = (double)(int)((__PAIR64__(v22 > 0.0, LODWORD(v22)) - COERCE_UNSIGNED_INT(0.0)) >> 32) * 1.79769313e308;
    else
      v23 = v22 / v21;
  }
  else
  {
    v23 = -1.79769313e308;
  }
  if (vabdd_f64(v14, v23) > fabs(v23) * 0.00000999999975 + 0.000000999999997)
    return v14 < v23;
  if (vabds_f32(a3, a5) <= v16)
    return a4 < a6;
  return a3 < a5;
}

BOOL sub_2393BA0B4(float *a1, float *a2, float *a3, float **a4)
{
  float v8;
  float v9;
  float v10;
  float v11;
  BOOL v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *a2;
  v9 = a2[1];
  v10 = **a4;
  v11 = (*a4)[1];
  v12 = sub_2393B9EF0(v10, v11, *a2, v9, *a1, a1[1]);
  result = sub_2393B9EF0(v10, v11, *a3, a3[1], v8, v9);
  if (v12)
  {
    v14 = *(_QWORD *)a1;
    if (result)
    {
      *(_QWORD *)a1 = *(_QWORD *)a3;
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)a2 = v14;
      result = sub_2393B9EF0(**a4, (*a4)[1], *a3, a3[1], *(float *)&v14, *((float *)&v14 + 1));
      if (!result)
        return result;
      *(_QWORD *)a2 = *(_QWORD *)a3;
    }
    *(_QWORD *)a3 = v14;
  }
  else if (result)
  {
    v15 = *(_QWORD *)a2;
    *(_QWORD *)a2 = *(_QWORD *)a3;
    *(_QWORD *)a3 = v15;
    result = sub_2393B9EF0(**a4, (*a4)[1], *a2, a2[1], *a1, a1[1]);
    if (result)
    {
      v16 = *(_QWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)a2 = v16;
    }
  }
  return result;
}

BOOL sub_2393BA1CC(float *a1, float *a2, float *a3, float *a4, float *a5, float **a6)
{
  float v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL8 result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  sub_2393BA0B4(a1, a2, a3, a6);
  v12 = **a6;
  v13 = (*a6)[1];
  if (sub_2393B9EF0(v12, v13, *a4, a4[1], *a3, a3[1]))
  {
    v14 = *(_QWORD *)a3;
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *(_QWORD *)a4 = v14;
    v12 = **a6;
    v13 = (*a6)[1];
    if (sub_2393B9EF0(v12, v13, *a3, a3[1], *a2, a2[1]))
    {
      v15 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v15;
      v12 = **a6;
      v13 = (*a6)[1];
      if (sub_2393B9EF0(v12, v13, *a2, a2[1], *a1, a1[1]))
      {
        v16 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)a2 = v16;
        v12 = **a6;
        v13 = (*a6)[1];
      }
    }
  }
  result = sub_2393B9EF0(v12, v13, *a5, a5[1], *a4, a4[1]);
  if (result)
  {
    v18 = *(_QWORD *)a4;
    *(_QWORD *)a4 = *(_QWORD *)a5;
    *(_QWORD *)a5 = v18;
    result = sub_2393B9EF0(**a6, (*a6)[1], *a4, a4[1], *a3, a3[1]);
    if (result)
    {
      v19 = *(_QWORD *)a3;
      *(_QWORD *)a3 = *(_QWORD *)a4;
      *(_QWORD *)a4 = v19;
      result = sub_2393B9EF0(**a6, (*a6)[1], *a3, a3[1], *a2, a2[1]);
      if (result)
      {
        v20 = *(_QWORD *)a2;
        *(_QWORD *)a2 = *(_QWORD *)a3;
        *(_QWORD *)a3 = v20;
        result = sub_2393B9EF0(**a6, (*a6)[1], *a2, a2[1], *a1, a1[1]);
        if (result)
        {
          v21 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)a2 = v21;
        }
      }
    }
  }
  return result;
}

BOOL sub_2393BA354(float *a1, float *a2, float **a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  float *v9;
  float *v10;
  uint64_t v11;
  int v12;
  float *v13;
  float v14;
  float v15;
  uint64_t v16;
  float *v17;
  float *v18;
  uint64_t v19;
  int8x16_t v20;

  v6 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (sub_2393B9EF0(**a3, (*a3)[1], *(a2 - 2), *(a2 - 1), *a1, a1[1]))
      {
        v8 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *((_QWORD *)a2 - 1);
        *((_QWORD *)a2 - 1) = v8;
      }
      return 1;
    case 3:
      sub_2393BA0B4(a1, a1 + 2, a2 - 2, a3);
      return 1;
    case 4:
      sub_2393BA0B4(a1, a1 + 2, a1 + 4, a3);
      if (sub_2393B9EF0(**a3, (*a3)[1], *(a2 - 2), *(a2 - 1), a1[4], a1[5]))
      {
        v19 = *((_QWORD *)a1 + 2);
        *((_QWORD *)a1 + 2) = *((_QWORD *)a2 - 1);
        *((_QWORD *)a2 - 1) = v19;
        if (sub_2393B9EF0(**a3, (*a3)[1], a1[4], a1[5], a1[2], a1[3]))
        {
          v20 = vextq_s8(*(int8x16_t *)(a1 + 2), *(int8x16_t *)(a1 + 2), 8uLL);
          *(int8x16_t *)(a1 + 2) = v20;
          if (sub_2393B9EF0(**a3, (*a3)[1], *(float *)v20.i32, *(float *)&v20.i32[1], *a1, a1[1]))
            *(int8x16_t *)a1 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
        }
      }
      return 1;
    case 5:
      sub_2393BA1CC(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2, a3);
      return 1;
    default:
      v9 = a1 + 4;
      sub_2393BA0B4(a1, a1 + 2, a1 + 4, a3);
      v10 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      v13 = *a3;
      break;
  }
  while (1)
  {
    v14 = *v10;
    v15 = v10[1];
    if (sub_2393B9EF0(*v13, v13[1], *v10, v15, *v9, v9[1]))
      break;
LABEL_6:
    v9 = v10;
    v11 += 8;
    v10 += 2;
    if (v10 == a2)
      return 1;
  }
  v16 = v11;
  while (1)
  {
    v17 = (float *)((char *)a1 + v16);
    *(_QWORD *)((char *)a1 + v16 + 24) = *(_QWORD *)((char *)a1 + v16 + 16);
    if (v16 == -16)
      break;
    v16 -= 8;
    if (!sub_2393B9EF0(**a3, (*a3)[1], v14, v15, v17[2], v17[3]))
    {
      v18 = (float *)((char *)a1 + v16 + 24);
      goto LABEL_13;
    }
  }
  v18 = a1;
LABEL_13:
  *v18 = v14;
  v18[1] = v15;
  if (++v12 != 8)
  {
    v13 = *a3;
    goto LABEL_6;
  }
  return v10 + 2 == a2;
}

void sub_2393BA588(uint64_t a1, unsigned int a2, float32x4_t *a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  float32x4_t v13;
  int32x4_t v14;
  float32x2_t v15;
  float32x2_t v16;
  int32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  int32x4_t v20;
  float32x4_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x4_t v24;
  float32x4_t v25;
  int8x16_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  unsigned __int32 v31;
  uint32x4_t v32;

  v8 = a2;
  v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 4);
  v10 = a2 >= v9;
  v11 = a2 - v9;
  if (v11 != 0 && v10)
  {
    sub_2393B5D28((char **)a4, v11);
  }
  else if (!v10)
  {
    *(_QWORD *)(a4 + 8) = *(_QWORD *)a4 + 48 * v8;
  }
  if (a2)
  {
    v12 = 0;
    v13 = a3[1];
    v14 = (int32x4_t)vmulq_f32(*a3, *a3);
    v14.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v14, 2), vadd_f32(*(float32x2_t *)v14.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v14.i8, 1))).u32[0];
    v15 = vrsqrte_f32((float32x2_t)v14.u32[0]);
    v16 = vmul_f32(v15, vrsqrts_f32((float32x2_t)v14.u32[0], vmul_f32(v15, v15)));
    v14.i32[0] = vmul_f32(v16, vrsqrts_f32((float32x2_t)v14.u32[0], vmul_f32(v16, v16))).u32[0];
    v17 = (int32x4_t)vmulq_f32(v13, v13);
    v17.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v17, 2), vadd_f32(*(float32x2_t *)v17.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v17.i8, 1))).u32[0];
    v18 = vmulq_n_f32(*a3, *(float *)v14.i32);
    *(float32x2_t *)v14.i8 = vrsqrte_f32((float32x2_t)v17.u32[0]);
    *(float32x2_t *)v14.i8 = vmul_f32(*(float32x2_t *)v14.i8, vrsqrts_f32((float32x2_t)v17.u32[0], vmul_f32(*(float32x2_t *)v14.i8, *(float32x2_t *)v14.i8)));
    v14.i32[0] = vmul_f32(*(float32x2_t *)v14.i8, vrsqrts_f32((float32x2_t)v17.u32[0], vmul_f32(*(float32x2_t *)v14.i8, *(float32x2_t *)v14.i8))).u32[0];
    v19 = a3[2];
    v20 = (int32x4_t)vmulq_f32(v19, v19);
    v20.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v20, 2), vadd_f32(*(float32x2_t *)v20.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v20.i8, 1))).u32[0];
    v21 = vmulq_n_f32(v13, *(float *)v14.i32);
    *(float32x2_t *)v14.i8 = vrsqrte_f32((float32x2_t)v20.u32[0]);
    v22 = vmul_f32(*(float32x2_t *)v14.i8, vrsqrts_f32((float32x2_t)v20.u32[0], vmul_f32(*(float32x2_t *)v14.i8, *(float32x2_t *)v14.i8)));
    v23 = vrsqrts_f32((float32x2_t)v20.u32[0], vmul_f32(v22, v22));
    v24 = (float32x4_t)vdupq_n_s32(0x437F0000u);
    v25 = vmulq_n_f32(v19, vmul_f32(v22, v23).f32[0]);
    v26.i64[0] = 0xFF000000FFLL;
    v26.i64[1] = 0xFF000000FFLL;
    do
    {
      *(float32x2_t *)v27.f32 = vrndm_f32(*(float32x2_t *)(a1 + v12));
      v27.i64[1] = __PAIR64__(1.0, COERCE_UNSIGNED_INT(floorf(*(float *)(a1 + v12 + 8))));
      v28 = vaddq_f32(v27, (float32x4_t)xmmword_2393F5480);
      *(float32x4_t *)(*(_QWORD *)a4 + v12) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a3, v28.f32[0]), a3[1], *(float32x2_t *)v28.f32, 1), a3[2], v28, 2), a3[3], v28, 3);
      v29 = *(float32x4_t *)(a1 + v12 + 16);
      v30 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v18, v29.f32[0]), v21, *(float32x2_t *)v29.f32, 1), v25, v29, 2);
      v30.i32[3] = 0;
      *(float32x4_t *)(*(_QWORD *)a4 + v12 + 16) = v30;
      v31 = *(_DWORD *)(a1 + v12 + 32);
      v29.i32[0] = v31;
      v30.i32[0] = vshrq_n_u32((uint32x4_t)v29, 0x18uLL).u32[0];
      v29.i32[1] = HIWORD(v31);
      v29.i32[2] = v31 >> 8;
      v29.i32[3] = v31;
      v32 = (uint32x4_t)vandq_s8((int8x16_t)v29, v26);
      v32.i32[0] = v30.i32[0];
      *(float32x4_t *)(*(_QWORD *)a4 + v12 + 32) = vdivq_f32(vcvtq_f32_u32(v32), v24);
      v12 += 48;
    }
    while (48 * v8 != v12);
  }
}

uint64_t sub_2393BA780(__CVBuffer *a1, __CVBuffer *a2, uint64_t a3)
{
  uint64_t result;
  const __CFDictionary *v7;
  CFTypeID v8;
  int CalibrationPinholeModel_0;
  double Width;
  double v11;
  double Height;
  double v13;
  unsigned int v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  void *v18;
  double v19;
  double v20;
  double v21;
  double v22;

  result = (uint64_t)CVBufferCopyAttachment(a1, CFSTR("Calibration Data"), 0);
  if (result)
  {
    v7 = (const __CFDictionary *)result;
    v8 = CFGetTypeID((CFTypeRef)result);
    if (v8 == CFDictionaryGetTypeID())
    {
      v21 = 0.0;
      v22 = 0.0;
      v19 = 0.0;
      v20 = 0.0;
      CalibrationPinholeModel_0 = getCalibrationPinholeModel_0(v7, 0, (void **)&v22, (void **)&v21, (void **)&v20, (void **)&v19, &v18);
      CFRelease(v7);
      if (CalibrationPinholeModel_0)
      {
        Width = (double)CVPixelBufferGetWidth(a2);
        v11 = Width / (double)CVPixelBufferGetWidth(a1);
        Height = (double)CVPixelBufferGetHeight(a2);
        v13 = Height / (double)CVPixelBufferGetHeight(a1);
        *(float *)&v14 = v11 * (v21 * v22);
        LODWORD(v15) = 0;
        v16 = v21 * v13;
        *((float *)&v15 + 1) = v16;
        *(float *)&v17 = v11 * v20;
        *(float *)&v13 = v13 * v19;
        HIDWORD(v17) = LODWORD(v13);
        *(_DWORD *)(a3 + 8) = 0;
        *(_QWORD *)a3 = v14;
        *(_DWORD *)(a3 + 24) = 0;
        *(_QWORD *)(a3 + 16) = v15;
        *(_DWORD *)(a3 + 40) = 1065353216;
        *(_QWORD *)(a3 + 32) = v17;
        return 1;
      }
    }
    else
    {
      CFRelease(v7);
    }
    return 0;
  }
  return result;
}

double sub_2393BA8D0()
{
  uint64_t v0;
  uint64_t v1;

  std::__libcpp_verbose_abort("bad_function_call was thrown in -fno-exceptions mode");
  return sub_2393BA8E4(v0, v1);
}

double sub_2393BA8E4(uint64_t a1, uint64_t a2)
{
  float *v3;
  float *v4;
  double result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  int v9;

  v3 = *(float **)a2;
  if (*(_QWORD *)a2 == a1)
  {
    v9 = 0;
    v7 = 0u;
    v8 = 0u;
    sub_2393BA8E4(&v7);
    result = *(double *)&v7;
    v6 = v8;
    *(_OWORD *)a1 = v7;
    *(_OWORD *)(a1 + 16) = v6;
    *(_DWORD *)(a1 + 32) = v9;
  }
  else
  {
    v4 = **(float ***)(a2 + 8);
    *(float *)a1 = (float)(*v3 * *v4) + 0.0;
    *(float *)(a1 + 4) = (float)(v3[1] * *v4) + 0.0;
    *(float *)(a1 + 8) = (float)(v3[2] * *v4) + 0.0;
    *(float *)(a1 + 12) = (float)(*v3 * v4[1]) + 0.0;
    *(float *)(a1 + 16) = (float)(v3[1] * v4[1]) + 0.0;
    *(float *)(a1 + 20) = (float)(v3[2] * v4[1]) + 0.0;
    *(float *)(a1 + 24) = (float)(*v3 * v4[2]) + 0.0;
    *(float *)(a1 + 28) = (float)(v3[1] * v4[2]) + 0.0;
    *(float *)&result = (float)(v3[2] * v4[2]) + 0.0;
    *(_DWORD *)(a1 + 32) = LODWORD(result);
  }
  return result;
}

void sub_2393BA9D8(uint64_t a1)
{
  void *v2;
  void *memptr;

  cva::vecLib::gesvd<float>();
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, (4 * 0.0 + 31) & 0x7FFFFFFE0, 0x49090899uLL);
  v2 = memptr;
  cva::vecLib::gesvd<float>();
  free(v2);
  *(_BYTE *)(a1 + 92) = 1;
}

double sub_2393BAAF8(uint64_t a1, float **a2)
{
  float *v3;
  float *v4;
  double result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  int v9;

  v3 = *a2;
  if (*a2 == (float *)a1 || (v4 = a2[1], v4 == (float *)a1))
  {
    v9 = 0;
    v7 = 0u;
    v8 = 0u;
    sub_2393BAAF8(&v7);
    result = *(double *)&v7;
    v6 = v8;
    *(_OWORD *)a1 = v7;
    *(_OWORD *)(a1 + 16) = v6;
    *(_DWORD *)(a1 + 32) = v9;
  }
  else
  {
    *(float *)a1 = (float)((float)((float)(*v3 * *v4) + 0.0) + (float)(v3[3] * v4[1])) + (float)(v3[6] * v4[2]);
    *(float *)(a1 + 4) = (float)((float)((float)(v3[1] * *v4) + 0.0) + (float)(v3[4] * v4[1])) + (float)(v3[7] * v4[2]);
    *(float *)(a1 + 8) = (float)((float)((float)(v3[2] * *v4) + 0.0) + (float)(v3[5] * v4[1])) + (float)(v3[8] * v4[2]);
    *(float *)(a1 + 12) = (float)((float)((float)(*v3 * v4[3]) + 0.0) + (float)(v3[3] * v4[4])) + (float)(v3[6] * v4[5]);
    *(float *)(a1 + 16) = (float)((float)((float)(v3[1] * v4[3]) + 0.0) + (float)(v3[4] * v4[4]))
                        + (float)(v3[7] * v4[5]);
    *(float *)(a1 + 20) = (float)((float)((float)(v3[2] * v4[3]) + 0.0) + (float)(v3[5] * v4[4]))
                        + (float)(v3[8] * v4[5]);
    *(float *)(a1 + 24) = (float)((float)((float)(*v3 * v4[6]) + 0.0) + (float)(v3[3] * v4[7])) + (float)(v3[6] * v4[8]);
    *(float *)(a1 + 28) = (float)((float)((float)(v3[1] * v4[6]) + 0.0) + (float)(v3[4] * v4[7]))
                        + (float)(v3[7] * v4[8]);
    *(float *)&result = (float)((float)((float)(v3[2] * v4[6]) + 0.0) + (float)(v3[5] * v4[7])) + (float)(v3[8] * v4[8]);
    *(_DWORD *)(a1 + 32) = LODWORD(result);
  }
  return result;
}

_QWORD *sub_2393BACA4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  *a1 = &off_250AD6228;
  v2 = a1[4];
  if (v2)
  {
    v3 = a1[5];
    v4 = (void *)a1[4];
    if (v3 != v2)
    {
      v5 = a1[5];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[4];
    }
    a1[5] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_2393BAD24(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  *a1 = &off_250AD6228;
  v2 = a1[4];
  if (v2)
  {
    v3 = a1[5];
    v4 = (void *)a1[4];
    if (v3 != v2)
    {
      v5 = a1[5];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[4];
    }
    a1[5] = v2;
    operator delete(v4);
  }
  JUMPOUT(0x23B83C4BCLL);
}

uint64_t sub_2393BADB4(uint64_t a1, _QWORD *a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  float v14;
  int v15;
  int v16;
  float v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  float v25;
  float v26;
  float v27;
  float v28;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  signed int v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;

  if ((*(unsigned int (**)(_QWORD *))(*a2 + 16))(a2) == 1
    && *(_BYTE *)(a1 + 24)
    && a2[1]
    && (v8 = a2[6]) != 0
    && (v9 = a2[3]) != 0)
  {
    v10 = 0;
    if (v9 <= a3)
    {
      v11 = 0;
    }
    else
    {
      v11 = 0;
      v35 = a2[4];
      if (v35 > a4)
      {
        v12 = *(_QWORD *)(a1 + 8);
        v13 = v12 >> 1;
        v14 = 0.0;
        v36 = (v12 >> 1) + a4;
        if ((int)(a4 - (v12 >> 1)) >= v36 || (int)v12 < 1)
        {
          v17 = 0.0;
        }
        else
        {
          v32 = a2[1];
          v33 = a2[6];
          v34 = a2;
          v15 = a3 - v13;
          v39 = a3;
          v16 = v13 + a3;
          v17 = 0.0;
          if ((int)a3 - (int)v13 < (int)v13 + (int)a3)
          {
            v18 = a4 - (v12 >> 1);
            v19 = 0;
            v31 = a2[7];
            v38 = v8 + v31 * a4;
            v20 = (int)v12;
            do
            {
              v37 = v18;
              if ((v18 & 0x80000000) == 0 && (int)v18 < (int)v35)
              {
                v21 = 0;
                v40 = v32 + v34[5] * v18;
                v22 = v33 + v31 * v18;
                v23 = 1;
                do
                {
                  v24 = v15 + v23 - 1;
                  if ((v24 & 0x80000000) == 0 && (int)v24 < (int)v9)
                  {
                    v25 = (float)(*(unsigned __int8 *)(v38 + v39) - *(unsigned __int8 *)(v22 + v24));
                    v26 = *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + v21) + 4 * v19);
                    v27 = *(float *)(a1 + 20) * *(float *)(a1 + 20);
                    v28 = v26 * (float)((float)(expf((float)((float)(v25 * v25) * -0.5) / v27) * 0.15915) / v27);
                    v17 = v17 + (float)(v28 * *(float *)(v40 + 4 * v24));
                    v14 = v14 + v28;
                  }
                  if (v15 + (int)v23 >= v16)
                    break;
                  v21 += 24;
                }
                while (v23++ < v20);
              }
              v18 = v37 + 1;
              if ((int)(v37 + 1) >= v36)
                break;
              ++v19;
            }
            while (v19 < v20);
          }
        }
        v11 = COERCE_UNSIGNED_INT(v17 / v14);
        v10 = 0x100000000;
      }
    }
  }
  else
  {
    v10 = 0;
    v11 = 0;
  }
  return v11 | v10;
}

uint64_t getCalibrationPinholeModel_0(const __CFDictionary *a1, void *a2, void **a3, void **a4, void **a5, void **a6, void **a7)
{
  const void *Value;
  CFTypeID v15;
  CFTypeID TypeID;
  uint64_t v17;
  const void *v18;
  CFTypeID v19;
  CFTypeID v20;
  CFTypeID v21;
  const void *v22;
  CFTypeID v23;
  CFTypeID v24;
  const __CFArray *v25;
  const __CFArray *v26;
  const __CFArray *v27;
  const __CFArray *v28;
  const __CFArray *v29;
  const __CFNumber *ValueAtIndex;
  const __CFNumber *v31;
  const __CFNumber *v32;
  const __CFNumber *v33;
  const __CFNumber *v34;
  void *keys;

  if (!CFDictionaryContainsKey(a1, CFSTR("Sensors")))
    return 0;
  Value = CFDictionaryGetValue(a1, CFSTR("Sensors"));
  v15 = CFGetTypeID(Value);
  TypeID = CFDictionaryGetTypeID();
  v17 = 0;
  if (!Value || v15 != TypeID)
    return v17;
  if (!CFDictionaryContainsKey((CFDictionaryRef)Value, CFSTR("Intrinsics")))
    return 0;
  v18 = CFDictionaryGetValue((CFDictionaryRef)Value, CFSTR("Intrinsics"));
  v19 = CFGetTypeID(v18);
  v20 = CFDictionaryGetTypeID();
  v17 = 0;
  if (!v18 || v19 != v20)
    return v17;
  keys = a2;
  if (!a2)
  {
    if (CFDictionaryGetCount((CFDictionaryRef)v18) != 1)
      return 0;
    CFDictionaryGetKeysAndValues((CFDictionaryRef)v18, (const void **)&keys, 0);
    a2 = keys;
  }
  if (!CFDictionaryContainsKey((CFDictionaryRef)v18, a2))
    return 0;
  v17 = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)v18, a2);
  v21 = CFGetTypeID((CFTypeRef)v17);
  if (v21 != CFDictionaryGetTypeID())
    return 0;
  if (!v17)
    return v17;
  if (!CFDictionaryContainsKey((CFDictionaryRef)v17, CFSTR("Pinhole")))
    return 0;
  v22 = CFDictionaryGetValue((CFDictionaryRef)v17, CFSTR("Pinhole"));
  v23 = CFGetTypeID(v22);
  v24 = CFDictionaryGetTypeID();
  v17 = 0;
  if (v22)
  {
    if (v23 == v24)
    {
      v25 = (const __CFArray *)sub_2393BB2C4((const __CFDictionary *)v22, CFSTR("Aspect Ratio"), 1);
      v26 = (const __CFArray *)sub_2393BB2C4((const __CFDictionary *)v22, CFSTR("Focal Length"), 1);
      v27 = (const __CFArray *)sub_2393BB2C4((const __CFDictionary *)v22, CFSTR("Principal Point"), 2);
      v28 = (const __CFArray *)sub_2393BB2C4((const __CFDictionary *)v22, CFSTR("Skew"), 1);
      v17 = 0;
      if (v25)
      {
        if (v26)
        {
          if (v27)
          {
            v29 = v28;
            if (v28)
            {
              ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v25, 0);
              keys = 0;
              CFNumberGetValue(ValueAtIndex, kCFNumberDoubleType, &keys);
              *a3 = keys;
              v31 = (const __CFNumber *)CFArrayGetValueAtIndex(v26, 0);
              keys = 0;
              CFNumberGetValue(v31, kCFNumberDoubleType, &keys);
              *a4 = keys;
              v32 = (const __CFNumber *)CFArrayGetValueAtIndex(v27, 0);
              keys = 0;
              CFNumberGetValue(v32, kCFNumberDoubleType, &keys);
              *a5 = keys;
              v17 = 1;
              v33 = (const __CFNumber *)CFArrayGetValueAtIndex(v27, 1);
              keys = 0;
              CFNumberGetValue(v33, kCFNumberDoubleType, &keys);
              *a6 = keys;
              v34 = (const __CFNumber *)CFArrayGetValueAtIndex(v29, 0);
              keys = 0;
              CFNumberGetValue(v34, kCFNumberDoubleType, &keys);
              *a7 = keys;
            }
          }
        }
      }
    }
  }
  return v17;
}

const void *sub_2393BB2C4(const __CFDictionary *a1, const void *a2, int a3)
{
  const void *Value;
  CFTypeID v7;
  CFTypeID TypeID;
  const void *result;
  const void *v10;
  CFTypeID v11;

  if (!CFDictionaryContainsKey(a1, a2))
    return 0;
  Value = CFDictionaryGetValue(a1, a2);
  v7 = CFGetTypeID(Value);
  TypeID = CFDictionaryGetTypeID();
  result = 0;
  if (Value && v7 == TypeID)
  {
    if (CFDictionaryContainsKey((CFDictionaryRef)Value, CFSTR("Data")))
    {
      v10 = CFDictionaryGetValue((CFDictionaryRef)Value, CFSTR("Data"));
      v11 = CFGetTypeID(v10);
      if (v11 == CFArrayGetTypeID())
      {
        if (CFArrayGetCount((CFArrayRef)v10) == a3)
          return v10;
        else
          return 0;
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_2393BB37C(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;

  v2 = atomic_load((unsigned __int8 *)&qword_256930538);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_256930538))
  {
    qword_256930530 = sub_2393F2DD8();
    __cxa_atexit((void (*)(void *))sub_2393F2FA4, &qword_256930530, &dword_239388000);
    __cxa_guard_release(&qword_256930538);
  }
  v3 = qword_256930530;
  *(_WORD *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 44) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  return a1;
}

void sub_2393BB40C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_256930538);
  _Unwind_Resume(a1);
}

uint64_t sub_2393BB424(uint64_t a1, unsigned int a2)
{
  id *v2;
  uint64_t result;
  uint64_t v5;
  id v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  id v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  const char *v17;
  void *v18;
  id v19;
  const char *v20;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  id v25;

  v2 = *(id **)a1;
  if (!*(_QWORD *)a1)
    return 0;
  result = 0;
  if (a2)
  {
    if (!*(_BYTE *)(a1 + 36))
    {
      *(_DWORD *)(a1 + 32) = a2;
      v5 = 48 * a2;
      v6 = *v2;
      v8 = objc_msgSend_newBufferWithLength_options_(v6, v7, v5, 0);
      v9 = *(void **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v8;

      result = *(_QWORD *)(a1 + 16);
      if (result)
      {
        objc_msgSend_setLabel_((void *)result, v10, (uint64_t)CFSTR("SurfaceVoxelBuffer"));
        v11 = 576 * *(unsigned int *)(a1 + 32);
        v12 = **(id **)a1;
        v14 = objc_msgSend_newBufferWithLength_options_(v12, v13, v11, 0);
        v15 = *(void **)(a1 + 24);
        *(_QWORD *)(a1 + 24) = v14;

        result = *(_QWORD *)(a1 + 24);
        if (result)
        {
          objc_msgSend_setLabel_((void *)result, v16, (uint64_t)CFSTR("SurfaceVoxelVertexBuffer"));
          v18 = (void *)objc_msgSend_newFunctionWithName_(*(void **)(*(_QWORD *)a1 + 16), v17, (uint64_t)CFSTR("coverageGenSurfaceVoxelVertex"));
          v19 = **(id **)a1;
          v25 = 0;
          v21 = objc_msgSend_newComputePipelineStateWithFunction_error_(v19, v20, (uint64_t)v18, &v25);
          v22 = v25;
          v23 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v21;

          v24 = *(_QWORD *)(a1 + 8);
          if (v24)
          {
            result = 1;
            *(_BYTE *)(a1 + 36) = 1;
            return result;
          }
          return 0;
        }
      }
    }
  }
  return result;
}

void sub_2393BB57C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_2393BB59C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  uint32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  uint32x4_t v17;
  float32x4_t v18;
  float32x2_t v19;
  float32x2_t v20;
  uint32x2_t v21;
  uint64_t v22;
  unsigned int v23;
  NSObject *v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  const char *v33;
  const char *v34;
  const char *v35;
  const char *v36;
  const char *v37;
  const char *v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  unint64_t v42;
  const char *v43;
  unint64_t v44;
  const char *v45;
  uint64_t v46;
  const char *v47;
  const char *v48;
  uint64_t v49;
  _QWORD v50[5];
  unint64_t v51;
  int64x2_t v52;
  uint8_t buf[8];
  int64x2_t v54;

  result = 0;
  if (*(_BYTE *)(a1 + 36) && *(float *)a2 > 0.0)
  {
    v6 = *(float32x4_t *)(a2 + 16);
    v7 = *(float32x4_t *)(a2 + 32);
    v8 = *(float32x4_t *)(a2 + 48);
    v9 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 16);
    v10 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 32);
    v11 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
    v12 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v11, vabdq_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v6, *(float32x2_t *)v6.f32, 1), v7, *(float32x2_t *)v7.f32, 1), v8, *(float32x2_t *)v8.f32, 1), v9)), (int8x16_t)vcgeq_f32(v11, vabdq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v6, v6.f32[0]), v7, v7.f32[0]),
                                           v8,
                                           v8.f32[0]),
                                         *MEMORY[0x24BDAEDF8]))),
                        (int8x16_t)vcgeq_f32(v11, vabdq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v6, v6, 2), v7, v7, 2), v8, v8, 2), v10)));
    v12.i32[3] = v12.i32[2];
    if ((vminvq_u32(v12) & 0x80000000) != 0
      && (v13 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2),
          v14 = (float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)v6, (int32x4_t)v8), (int32x4_t)v13),
          v15 = (float32x4_t)vtrn2q_s32((int32x4_t)v6, (int32x4_t)v7),
          v15.i32[2] = HIDWORD(*(_QWORD *)(a2 + 48)),
          v16 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)v6, (int32x4_t)v8), (int32x4_t)v7),
          v17 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v11, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v16, v7.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1), v15), v13, v14), v9)), (int8x16_t)vcgeq_f32(v11, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v16, v6.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v6.f32, 1),
                                                   v15),
                                                 (float32x4_t)vdupq_laneq_s32((int32x4_t)v6, 2),
                                                 v14),
                                               *MEMORY[0x24BDAEDF8]))),
                              (int8x16_t)vcgeq_f32(v11, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v16, v8.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 1), v15), (float32x4_t)vdupq_laneq_s32((int32x4_t)v8, 2), v14), v10))), v17.i32[3] = v17.i32[2], (vminvq_u32(v17) & 0x80000000) != 0))
    {
      v18 = vmulq_f32(v6, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v8, (int8x16_t)v8, 0xCuLL), (int8x16_t)v8, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v7, (int32x4_t)v7), (int8x16_t)v7, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v8, (int32x4_t)v8), (int8x16_t)v8, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v7, (int8x16_t)v7, 0xCuLL), (int8x16_t)v7, 8uLL)));
      result = 0;
      if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 2), vaddq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1))).f32[0]+ -1.0) <= 0.000011)
      {
        v19 = vabs_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v6, (int8x16_t)v6, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v7, (int8x16_t)v7, 8uLL)));
        v20 = (float32x2_t)vdup_n_s32(0x38D1B717u);
        v21 = (uint32x2_t)vand_s8((int8x8_t)vcge_f32(v20, vabs_f32(vadd_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(a2 + 64), *(int8x16_t *)(a2 + 64), 8uLL)), (float32x2_t)0xBF80000080000000))), (int8x8_t)vcge_f32(v20, v19));
        if ((vpmin_u32(v21, v21).u32[0] & 0x80000000) != 0)
        {
          v22 = *(_QWORD *)(a2 + 80);
          if (v22)
          {
            if (*(_QWORD *)(a2 + 88))
            {
              v23 = *(_DWORD *)(a1 + 32);
              if (v23 < v22)
              {
                if (qword_256930358 != -1)
                  dispatch_once(&qword_256930358, &unk_250AD5E30);
                v24 = qword_256930350;
                if (os_log_type_enabled((os_log_t)qword_256930350, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl(&dword_239388000, v24, OS_LOG_TYPE_DEFAULT, "The size of input surface voxel cloud exceeds the maximum allowable size. Exceeded surface voxels are culled.", buf, 2u);
                }
                LODWORD(v22) = v23;
              }
              v25 = (void *)objc_msgSend_contents(*(void **)(a1 + 16), (const char *)a2, a3);
              memcpy(v25, *(const void **)(a2 + 88), 48 * v22);
              *(_DWORD *)(a1 + 40) = *(_DWORD *)a2;
              *(_DWORD *)(a1 + 44) = v22;
              objc_msgSend_commandBuffer(*(void **)(*(_QWORD *)a1 + 8), v26, v27);
              v28 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_computeCommandEncoder(v28, v29, v30);
              v31 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_setLabel_(v31, v32, (uint64_t)CFSTR("GenerateSurfaceVoxelVertexEncoder"));
              objc_msgSend_setComputePipelineState_(v31, v33, *(_QWORD *)(a1 + 8));
              objc_msgSend_setBuffer_offset_atIndex_(v31, v34, *(_QWORD *)(a1 + 16), 0, 0);
              objc_msgSend_setBytes_length_atIndex_(v31, v35, a1 + 44, 4, 1);
              objc_msgSend_setBytes_length_atIndex_(v31, v36, a1 + 40, 4, 2);
              objc_msgSend_setBytes_length_atIndex_(v31, v37, a1 + 48, 1, 3);
              objc_msgSend_setBuffer_offset_atIndex_(v31, v38, *(_QWORD *)(a1 + 24), 0, 4);
              v39 = *(unsigned int *)(a1 + 44);
              v42 = objc_msgSend_maxTotalThreadsPerThreadgroup(*(void **)(a1 + 8), v40, v41);
              v44 = *(unsigned int *)(a1 + 44);
              if (v42 < v44)
                v44 = v42;
              *(_QWORD *)buf = v39;
              v54 = vdupq_n_s64(1uLL);
              v51 = v44;
              v52 = v54;
              objc_msgSend_dispatchThreads_threadsPerThreadgroup_(v31, v43, (uint64_t)buf, &v51);
              objc_msgSend_endEncoding(v31, v45, v46);

              v50[0] = MEMORY[0x24BDAC760];
              v50[1] = 3221225472;
              v50[2] = sub_2393BB9B0;
              v50[3] = &unk_250AD6DC0;
              v50[4] = a1;
              objc_msgSend_addCompletedHandler_(v28, v47, (uint64_t)v50);
              objc_msgSend_commit(v28, v48, v49);

              return 1;
            }
          }
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_2393BB990(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_2393BB9B0(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 32) + 37) = 1;
  return result;
}

void sub_2393BB9C0()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.CoreOCModules", "General");
  v1 = (void *)qword_256930350;
  qword_256930350 = (uint64_t)v0;

}

uint64_t sub_2393BB9F0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void sub_2393BBA48()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.CoreOCModules", "VoxelHashing");
  v1 = (void *)qword_256930360;
  qword_256930360 = (uint64_t)v0;

}

uint64_t sub_2393BBA78(uint64_t a1)
{
  float32x4_t v1;
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  uint32x4_t v7;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  uint32x4_t v13;
  float32x4_t v14;
  float32x2_t v15;
  float32x2_t v16;
  uint32x2_t v17;

  v1 = *(float32x4_t *)a1;
  v2 = *(float32x4_t *)(a1 + 16);
  v3 = *(float32x4_t *)(a1 + 32);
  v4 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 16);
  v5 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 32);
  v6 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
  v7 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v6, vabdq_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v1, *(float32x2_t *)v1.f32, 1), v2, *(float32x2_t *)v2.f32, 1), v3, *(float32x2_t *)v3.f32, 1), v4)), (int8x16_t)vcgeq_f32(v6, vabdq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v1, v1.f32[0]), v2, v2.f32[0]), v3, v3.f32[0]), *MEMORY[0x24BDAEDF8]))),
                     (int8x16_t)vcgeq_f32(v6, vabdq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v1, v1, 2), v2, v2, 2), v3, v3, 2), v5)));
  v7.i32[3] = v7.i32[2];
  if ((vminvq_u32(v7) & 0x80000000) == 0)
    return 0;
  v9 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v2, 2);
  v10 = (float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)v1, (int32x4_t)v3), (int32x4_t)v9);
  v11 = (float32x4_t)vtrn2q_s32((int32x4_t)v1, (int32x4_t)v2);
  v11.i32[2] = HIDWORD(*(_QWORD *)(a1 + 32));
  v12 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)v1, (int32x4_t)v3), (int32x4_t)v2);
  v13 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v6, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v12, v2.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v2.f32, 1), v11), v9, v10), v4)), (int8x16_t)vcgeq_f32(v6, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v12, v1.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1.f32, 1),
                                           v11),
                                         (float32x4_t)vdupq_laneq_s32((int32x4_t)v1, 2),
                                         v10),
                                       *MEMORY[0x24BDAEDF8]))),
                      (int8x16_t)vcgeq_f32(v6, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v12, v3.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v3.f32, 1), v11), (float32x4_t)vdupq_laneq_s32((int32x4_t)v3, 2), v10), v5)));
  v13.i32[3] = v13.i32[2];
  if ((vminvq_u32(v13) & 0x80000000) == 0)
    return 0;
  v14 = vmulq_f32(v1, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v3, (int8x16_t)v3, 0xCuLL), (int8x16_t)v3, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v2, (int32x4_t)v2), (int8x16_t)v2, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v3, (int32x4_t)v3), (int8x16_t)v3, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v2, (int8x16_t)v2, 0xCuLL), (int8x16_t)v2, 8uLL)));
  if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 2), vaddq_f32(v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.f32, 1))).f32[0]+ -1.0) > 0.000011)return 0;
  v15 = vabs_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v1, (int8x16_t)v1, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v2, (int8x16_t)v2, 8uLL)));
  v16 = (float32x2_t)vdup_n_s32(0x38D1B717u);
  v17 = (uint32x2_t)vand_s8((int8x8_t)vcge_f32(v16, vabs_f32(vadd_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v3, (int8x16_t)v3, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(a1 + 48), *(int8x16_t *)(a1 + 48), 8uLL)), (float32x2_t)0xBF80000080000000))), (int8x8_t)vcge_f32(v16, v15));
  return vpmin_u32(v17, v17).u32[0] >> 31;
}

uint64_t sub_2393BBC44(uint64_t a1)
{
  float32x4_t v1;
  int8x16_t v2;
  float32x2_t v3;
  float32x2_t v4;
  float32x4_t v5;
  int8x16_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x4_t v9;
  float32x4_t v10;
  int8x16_t v11;
  float32x2_t v12;
  float32x2_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  uint32x4_t v18;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  uint32x4_t v24;
  float32x4_t v25;
  float32x2_t v26;
  float32x2_t v27;
  uint32x2_t v28;

  v1 = *(float32x4_t *)(a1 + 16);
  v2 = (int8x16_t)vmulq_f32(*(float32x4_t *)a1, *(float32x4_t *)a1);
  *(float32x2_t *)v2.i8 = vadd_f32(*(float32x2_t *)v2.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v2, v2, 8uLL));
  v2.i32[0] = vadd_f32(*(float32x2_t *)v2.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v2.i8, 1)).u32[0];
  v3 = vrsqrte_f32((float32x2_t)v2.u32[0]);
  v4 = vmul_f32(v3, vrsqrts_f32((float32x2_t)v2.u32[0], vmul_f32(v3, v3)));
  v5 = vmulq_n_f32(*(float32x4_t *)a1, vmul_f32(v4, vrsqrts_f32((float32x2_t)v2.u32[0], vmul_f32(v4, v4))).f32[0]);
  v6 = (int8x16_t)vmulq_f32(v1, v1);
  *(float32x2_t *)v6.i8 = vadd_f32(*(float32x2_t *)v6.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL));
  v6.i32[0] = vadd_f32(*(float32x2_t *)v6.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v6.i8, 1)).u32[0];
  v7 = vrsqrte_f32((float32x2_t)v6.u32[0]);
  v8 = vmul_f32(v7, vrsqrts_f32((float32x2_t)v6.u32[0], vmul_f32(v7, v7)));
  v9 = vmulq_n_f32(v1, vmul_f32(v8, vrsqrts_f32((float32x2_t)v6.u32[0], vmul_f32(v8, v8))).f32[0]);
  v10 = *(float32x4_t *)(a1 + 32);
  v11 = (int8x16_t)vmulq_f32(v10, v10);
  *(float32x2_t *)v11.i8 = vadd_f32(*(float32x2_t *)v11.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL));
  v11.i32[0] = vadd_f32(*(float32x2_t *)v11.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v11.i8, 1)).u32[0];
  v12 = vrsqrte_f32((float32x2_t)v11.u32[0]);
  v13 = vmul_f32(v12, vrsqrts_f32((float32x2_t)v11.u32[0], vmul_f32(v12, v12)));
  v14 = vmulq_n_f32(v10, vmul_f32(v13, vrsqrts_f32((float32x2_t)v11.u32[0], vmul_f32(v13, v13))).f32[0]);
  v15 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 16);
  v16 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 32);
  v17 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
  v18 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v17, vabdq_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v5, *(float32x2_t *)v5.f32, 1), v9, *(float32x2_t *)v9.f32, 1), v14, *(float32x2_t *)v14.f32, 1), v15)), (int8x16_t)vcgeq_f32(v17, vabdq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v5, v5.f32[0]), v9, v9.f32[0]),
                                         v14,
                                         v14.f32[0]),
                                       *MEMORY[0x24BDAEDF8]))),
                      (int8x16_t)vcgeq_f32(v17, vabdq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v5, v5, 2), v9, v9, 2), v14, v14, 2), v16)));
  v18.i32[3] = v18.i32[2];
  if ((vminvq_u32(v18) & 0x80000000) == 0)
    return 0;
  v20 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2);
  v21 = (float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)v5, (int32x4_t)v14), (int32x4_t)v20);
  v22 = (float32x4_t)vtrn2q_s32((int32x4_t)v5, (int32x4_t)v9);
  v22.i32[2] = v14.i32[1];
  v23 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)v5, (int32x4_t)v14), (int32x4_t)v9);
  v24 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v17, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v23, v9.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1), v22), v20, v21), v15)), (int8x16_t)vcgeq_f32(v17, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v23, v5.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 1),
                                           v22),
                                         (float32x4_t)vdupq_laneq_s32((int32x4_t)v5, 2),
                                         v21),
                                       *MEMORY[0x24BDAEDF8]))),
                      (int8x16_t)vcgeq_f32(v17, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v23, v14.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.f32, 1), v22), (float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 2), v21), v16)));
  v24.i32[3] = v24.i32[2];
  if ((vminvq_u32(v24) & 0x80000000) == 0)
    return 0;
  v25 = vmulq_f32(v5, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v14, (int8x16_t)v14, 0xCuLL), (int8x16_t)v14, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v9, (int32x4_t)v9), (int8x16_t)v9, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v14, (int32x4_t)v14), (int8x16_t)v14, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v9, (int8x16_t)v9, 0xCuLL), (int8x16_t)v9, 8uLL)));
  if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), vaddq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1))).f32[0]+ -1.0) > 0.000011)return 0;
  v26 = vabs_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v5, (int8x16_t)v5, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL)));
  v27 = (float32x2_t)vdup_n_s32(0x38D1B717u);
  v28 = (uint32x2_t)vand_s8((int8x8_t)vcge_f32(v27, vabs_f32(vadd_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(a1 + 48), *(int8x16_t *)(a1 + 48), 8uLL)), (float32x2_t)0xBF80000080000000))), (int8x8_t)vcge_f32(v27, v26));
  return vpmin_u32(v28, v28).u32[0] >> 31;
}

double sub_2393BBEB8(uint64_t a1, uint64_t a2)
{
  float *v3;
  float *v4;
  double result;
  __int128 v6;

  v3 = *(float **)(a2 + 8);
  if (v3 == (float *)a1)
  {
    v6 = 0uLL;
    sub_2393BBEB8(&v6);
    result = *(double *)&v6;
    *(_OWORD *)a1 = v6;
  }
  else
  {
    v4 = **(float ***)a2;
    *(float *)a1 = (float)((float)((float)(v4[1] * v3[1]) + (float)(*v4 * *v3)) + 0.0) + (float)(v4[2] * v3[2]);
    *(float *)(a1 + 4) = (float)((float)((float)(v4[4] * v3[1]) + (float)(v4[3] * *v3)) + 0.0) + (float)(v4[5] * v3[2]);
    *(float *)(a1 + 8) = (float)((float)((float)(v4[1] * v3[4]) + (float)(*v4 * v3[3])) + 0.0) + (float)(v4[2] * v3[5]);
    *(float *)&result = (float)((float)((float)(v4[4] * v3[4]) + (float)(v4[3] * v3[3])) + 0.0) + (float)(v4[5] * v3[5]);
    *(_DWORD *)(a1 + 12) = LODWORD(result);
  }
  return result;
}

double sub_2393BBF9C(uint64_t a1, float **a2)
{
  float *v3;
  float *v4;
  double result;
  __int128 v6;
  uint64_t v7;

  v3 = *a2;
  if (*a2 == (float *)a1 || (v4 = a2[1], v4 == (float *)a1))
  {
    v6 = 0uLL;
    v7 = 0;
    sub_2393BBF9C(&v6);
    result = *(double *)&v6;
    *(_OWORD *)a1 = v6;
    *(_QWORD *)(a1 + 16) = v7;
  }
  else
  {
    *(float *)a1 = (float)((float)(*v3 * *v4) + 0.0) + (float)(v3[3] * v4[1]);
    *(float *)(a1 + 4) = (float)((float)(v3[1] * *v4) + 0.0) + (float)(v3[4] * v4[1]);
    *(float *)(a1 + 8) = (float)((float)(v3[2] * *v4) + 0.0) + (float)(v3[5] * v4[1]);
    *(float *)(a1 + 12) = (float)((float)(*v3 * v4[2]) + 0.0) + (float)(v3[3] * v4[3]);
    *(float *)(a1 + 16) = (float)((float)(v3[1] * v4[2]) + 0.0) + (float)(v3[4] * v4[3]);
    *(float *)&result = (float)((float)(v3[2] * v4[2]) + 0.0) + (float)(v3[5] * v4[3]);
    *(_DWORD *)(a1 + 20) = LODWORD(result);
  }
  return result;
}

void sub_2393BC090(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  int v24;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 2)
  {
    if (a2)
    {
      bzero(v5, 4 * a2);
      v6 = &v5[4 * a2];
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  else
  {
    v7 = *(char **)a1;
    v8 = (uint64_t)&v5[-*(_QWORD *)a1];
    v9 = v8 >> 2;
    v10 = (v8 >> 2) + a2;
    if (v10 >> 62)
      sub_2393BC5C8();
    v11 = v4 - (_QWORD)v7;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 62)
        sub_2393BC5D4();
      v13 = operator new(4 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = 4 * a2;
    v16 = &v13[4 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 4;
      if (v18 < 0x2C)
        goto LABEL_29;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_29;
      v19 = (v18 >> 2) + 1;
      v6 = &v5[-4 * (v19 & 0x7FFFFFFFFFFFFFF8)];
      v20 = &v13[4 * v9 - 16];
      v21 = v5 - 16;
      v22 = v19 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v23 = *(_OWORD *)v21;
        *(v20 - 1) = *((_OWORD *)v21 - 1);
        *v20 = v23;
        v20 -= 2;
        v21 -= 32;
        v22 -= 8;
      }
      while (v22);
      v14 -= 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
      if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_29:
        do
        {
          v24 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *((_DWORD *)v14 - 1) = v24;
          v14 -= 4;
        }
        while (v6 != v7);
      }
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    if (v7)
      operator delete(v7);
  }
}

void sub_2393BC22C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  int v24;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 2)
  {
    if (a2)
    {
      bzero(v5, 4 * a2);
      v6 = &v5[4 * a2];
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  else
  {
    v7 = *(char **)a1;
    v8 = (uint64_t)&v5[-*(_QWORD *)a1];
    v9 = v8 >> 2;
    v10 = (v8 >> 2) + a2;
    if (v10 >> 62)
      sub_2393BC5C8();
    v11 = v4 - (_QWORD)v7;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 62)
        sub_2393BC5D4();
      v13 = operator new(4 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = 4 * a2;
    v16 = &v13[4 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 4;
      if (v18 < 0x2C)
        goto LABEL_29;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_29;
      v19 = (v18 >> 2) + 1;
      v6 = &v5[-4 * (v19 & 0x7FFFFFFFFFFFFFF8)];
      v20 = &v13[4 * v9 - 16];
      v21 = v5 - 16;
      v22 = v19 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v23 = *(_OWORD *)v21;
        *(v20 - 1) = *((_OWORD *)v21 - 1);
        *v20 = v23;
        v20 -= 2;
        v21 -= 32;
        v22 -= 8;
      }
      while (v22);
      v14 -= 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
      if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_29:
        do
        {
          v24 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *((_DWORD *)v14 - 1) = v24;
          v14 -= 4;
        }
        while (v6 != v7);
      }
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    if (v7)
      operator delete(v7);
  }
}

uint64_t sub_2393BC3C8(uint64_t result, uint64_t *a2, float *a3, int *a4, uint64_t a5, float a6, float a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  float *v20;
  float v21;
  float v22;
  unint64_t v23;
  _DWORD *v24;
  unint64_t v25;
  float v26;
  uint64_t v27;
  uint64_t v31;
  float v32;
  float v33;
  float v34;
  float v35;
  BOOL v36;
  uint64_t v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  uint64_t v43;

  v9 = result;
  v10 = *((_QWORD *)a4 + 2);
  v11 = *((_QWORD *)a4 + 3);
  if (*((_OWORD *)a4 + 1) == 0)
  {
    v12 = *(_QWORD *)a4;
    if (*(_QWORD *)a4 < *((_QWORD *)a4 + 1))
    {
      v14 = a2[1];
      v13 = a2[2];
      v15 = *a2;
      v16 = *(float *)(v14 + 4 * v13 - 4);
      v17 = *(_QWORD *)result;
      v18 = *(_QWORD *)(**(_QWORD **)(result + 136) + 8);
      do
      {
        v19 = *(_DWORD *)(v17 + 4 * v12);
        v20 = (float *)(v18 + 48 * v19);
        v21 = a3[2] - v20[2];
        v22 = (float)((float)((float)((float)(*a3 - *v20) * (float)(*a3 - *v20)) + 0.0)
                    + (float)((float)(a3[1] - v20[1]) * (float)(a3[1] - v20[1])))
            + (float)(v21 * v21);
        if (v22 < v16)
        {
          v23 = a2[3];
          if (v23)
          {
            result = v14 + 4 * v23;
            v24 = (_DWORD *)(*a2 + 4 * v23);
            v25 = a2[3];
            do
            {
              v26 = *(float *)(result - 4);
              if (v26 <= v22)
                break;
              if (v25 < v13)
              {
                *(float *)result = v26;
                *v24 = *(v24 - 1);
              }
              result -= 4;
              --v24;
              --v25;
            }
            while (v25);
          }
          else
          {
            v25 = 0;
          }
          if (v25 < v13)
          {
            v27 = 4 * v25;
            *(float *)(v14 + v27) = v22;
            *(_DWORD *)(v15 + v27) = v19;
          }
          if (v23 < v13)
            a2[3] = v23 + 1;
        }
        ++v12;
      }
      while (v12 < *((_QWORD *)a4 + 1));
    }
  }
  else
  {
    v31 = *a4;
    v32 = a3[v31];
    v33 = v32 - *((float *)a4 + 1);
    v34 = v32 - *((float *)a4 + 2);
    v35 = v33 + v34;
    v36 = (float)(v33 + v34) < 0.0;
    if ((float)(v33 + v34) >= 0.0)
      v37 = *((_QWORD *)a4 + 3);
    else
      v37 = *((_QWORD *)a4 + 2);
    v38 = v34 * v34;
    v39 = v33 * v33;
    if (v36)
      v40 = v38;
    else
      v40 = v39;
    result = sub_2393BC3C8(result, a2, a3, v37, a6, a7);
    v41 = *(float *)(a5 + 4 * v31);
    v42 = (float)(v40 + a6) - v41;
    *(float *)(a5 + 4 * v31) = v40;
    if ((float)(v42 * a7) <= *(float *)(a2[1] + 4 * a2[2] - 4))
    {
      if (v35 >= 0.0)
        v43 = v10;
      else
        v43 = v11;
      result = sub_2393BC3C8(v9, a2, a3, v43, v42, a7);
    }
    *(float *)(a5 + 4 * v31) = v41;
  }
  return result;
}

void sub_2393BC5C8()
{
  sub_2393BC5FC();
}

void sub_2393BC5D4()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, (struct type_info *)&unk_250AD5EE0, MEMORY[0x24BEDABB8]);
}

void sub_2393BC5FC()
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_2393BC644(exception);
  __cxa_throw(exception, (struct type_info *)&unk_250AD5EC8, MEMORY[0x24BEDAAF0]);
}

void sub_2393BC630(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_2393BC644(std::logic_error *a1)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, "vector");
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

unsigned int *sub_2393BC670(unsigned int **a1)
{
  unint64_t v2;
  unint64_t v3;
  int32x4_t *v4;
  unint64_t v5;
  int32x4_t v6;
  int32x4_t *v7;
  int32x4_t v8;
  int32x4_t v9;
  unint64_t v10;
  unsigned int *result;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  float *v15;
  int32x4_t *v16;
  uint64_t v17;
  float *v18;
  __int128 v19;
  float v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  __int32 *v24;
  float v25;
  float v26;
  float v27;
  unsigned int v28;
  unsigned int v29;
  _OWORD *v30;
  __int128 v31;
  float v32;
  float v33;
  float *v34;
  float v35;
  float v36;
  void *exception;

  v2 = **(unsigned int **)a1[15];
  a1[5] = (unsigned int *)v2;
  a1[6] = (unsigned int *)v2;
  v3 = a1[1] - *a1;
  if (v2 != v3)
  {
    if (v2 <= v3)
    {
      if (v2 < v3)
        a1[1] = &(*a1)[v2];
    }
    else
    {
      sub_2393BC090((uint64_t)a1, v2 - v3);
      v2 = (unint64_t)a1[5];
    }
  }
  if (v2)
  {
    v4 = (int32x4_t *)*a1;
    if (v2 >= 8)
    {
      v5 = v2 & 0xFFFFFFFFFFFFFFF8;
      v6 = (int32x4_t)xmmword_2393F5490;
      v7 = v4 + 1;
      v8.i64[0] = 0x400000004;
      v8.i64[1] = 0x400000004;
      v9.i64[0] = 0x800000008;
      v9.i64[1] = 0x800000008;
      v10 = v2 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v7[-1] = v6;
        *v7 = vaddq_s32(v6, v8);
        v6 = vaddq_s32(v6, v9);
        v7 += 2;
        v10 -= 8;
      }
      while (v10);
      goto LABEL_13;
    }
    v5 = 0;
    do
    {
      v4->i32[v5] = v5;
      ++v5;
LABEL_13:
      ;
    }
    while (v2 != v5);
  }
  result = a1[12];
  if (result)
  {
    do
    {
      v12 = *(unsigned int **)result;
      free(result);
      a1[12] = v12;
      result = v12;
    }
    while (v12);
    v2 = (unint64_t)a1[5];
  }
  *((_DWORD *)a1 + 22) = 0;
  a1[12] = 0;
  a1[14] = 0;
  a1[3] = 0;
  a1[6] = (unsigned int *)v2;
  if (v2)
  {
    v13 = *(unsigned int **)a1[15];
    v14 = *v13;
    if (!(_DWORD)v14)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x23B83C30C](exception, "[nanoflann] computeBoundingBox() called but no data points found.");
      __cxa_throw(exception, (struct type_info *)&unk_250AD5E80, MEMORY[0x24BEDAB60]);
    }
    v15 = (float *)a1 + 15;
    v16 = (int32x4_t *)*a1;
    v17 = *((_QWORD *)v13 + 1);
    v18 = (float *)(v17 + 48 * **a1);
    v19 = *(_OWORD *)v18;
    *(unsigned int **)((char *)a1 + 60) = (unsigned int *)vdup_lane_s32(*(int32x2_t *)v18, 0);
    v20 = v18[1];
    *((float *)a1 + 17) = v20;
    *((float *)a1 + 18) = v20;
    v21 = v18[2];
    *((float *)a1 + 19) = v21;
    *((float *)a1 + 20) = v21;
    if ((_DWORD)v14 == 1)
    {
LABEL_20:
      result = (unsigned int *)sub_2393BC8EC((uint64_t *)a1, (uint64_t *)a1, 0, v2, v15);
      a1[3] = result;
      return result;
    }
    v22 = v17 + 4;
    v23 = v14 - 1;
    v24 = &v16->i32[1];
    v25 = v21;
    v26 = v20;
    v27 = *(float *)&v19;
    while (1)
    {
      v29 = *v24++;
      v28 = v29;
      v30 = (_OWORD *)(v17 + 48 * v29);
      v31 = *v30;
      if (COERCE_FLOAT(*v30) < v27)
      {
        *(_DWORD *)v15 = v31;
        v27 = *(float *)&v31;
        *(_QWORD *)&v31 = *(_QWORD *)v30;
      }
      if (*(float *)&v31 <= *(float *)&v19)
        break;
      *((_DWORD *)a1 + 16) = v31;
      v32 = *(float *)(v22 + 48 * v28);
      LODWORD(v19) = v31;
      if (v32 < v26)
        goto LABEL_30;
LABEL_31:
      v33 = *(float *)(v22 + 48 * v28);
      if (v33 > v20)
      {
        *((float *)a1 + 18) = v33;
        v20 = v33;
      }
      v34 = (float *)(v17 + 8 + 48 * v28);
      v35 = *v34;
      if (*v34 >= v25)
      {
        v36 = *v34;
        if (v35 > v21)
        {
LABEL_37:
          *((float *)a1 + 20) = v36;
          v21 = v36;
        }
      }
      else
      {
        *((float *)a1 + 19) = v35;
        v36 = *v34;
        v25 = v35;
        if (*v34 > v21)
          goto LABEL_37;
      }
      if (!--v23)
        goto LABEL_20;
    }
    v32 = *((float *)&v31 + 1);
    if (*((float *)&v31 + 1) >= v26)
      goto LABEL_31;
LABEL_30:
    *((float *)a1 + 17) = v32;
    v26 = v32;
    goto LABEL_31;
  }
  return result;
}

void sub_2393BC8D8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_2393BC8EC(uint64_t *a1, uint64_t *a2, uint64_t a3, unint64_t a4, float *a5)
{
  unsigned int v10;
  int v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  uint64_t *v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  float v27;
  unint64_t v28;
  unsigned int *v29;
  float v30;
  float v31;
  unsigned int v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  float *v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  uint64_t v43;
  unint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  _OWORD *v48;
  __int128 v49;
  float v50;
  float v51;
  float *v52;
  float v53;
  float v54;
  float v55;
  uint64_t v56;
  float v57;
  uint64_t v58;
  unint64_t v59;
  unsigned int *v60;
  float v61;
  float v62;
  unsigned int v63;
  float v64;
  float v65;
  char v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  float v72;
  float v73;
  float v74;
  unint64_t v75;
  unsigned int *v76;
  float v77;
  unsigned int v78;
  float v79;
  float v80;
  int v81;
  float *v82;
  float v83;
  unint64_t v84;
  unsigned int *v85;
  float v86;
  unsigned int v87;
  float v88;
  unint64_t v89;
  unsigned int *v90;
  float v91;
  unsigned int v92;
  float v93;
  unint64_t v94;
  unsigned int *v95;
  float v96;
  unsigned int v97;
  float v98;
  unint64_t v99;
  float v100;
  __int32 v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  _BOOL4 v109;
  unsigned int v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  _BOOL4 v118;
  unsigned int v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  __int32 v126;
  std::bad_alloc *exception;
  std::bad_alloc *v129;
  int32x4_t v130;
  int8x8_t v131;
  int32x4_t v132;
  int8x8_t v133;

  v10 = *((_DWORD *)a2 + 22);
  v11 = v10 - 32;
  if (v10 >= 0x20)
  {
    v13 = (_QWORD *)a2[13];
  }
  else
  {
    *((_DWORD *)a2 + 29) += v10;
    v12 = malloc_type_malloc(0x2000uLL, 0x63A5184BuLL);
    if (!v12)
    {
      fwrite("Failed to allocate memory.\n", 0x1BuLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v129 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v129, (struct type_info *)&unk_250AD5EB0, MEMORY[0x24BEDB670]);
    }
    *v12 = a2[12];
    a2[12] = (uint64_t)v12;
    v13 = v12 + 1;
    v11 = 8152;
  }
  a2[13] = (uint64_t)(v13 + 4);
  *((_DWORD *)a2 + 22) = v11;
  *((_DWORD *)a2 + 28) += 32;
  v14 = a4 - a3;
  if (a4 - a3 <= a2[4])
  {
    v13[2] = 0;
    v13[3] = 0;
    *v13 = a3;
    v13[1] = a4;
    v34 = *a2;
    v35 = *(_QWORD *)(*(_QWORD *)a2[15] + 8);
    v36 = (float *)(v35 + 48 * *(unsigned int *)(*a2 + 4 * a3));
    v37 = *v36;
    *a5 = *v36;
    v38 = *v36;
    a5[1] = *v36;
    v39 = v36[1];
    a5[2] = v39;
    v40 = v36[1];
    a5[3] = v40;
    v41 = v36[2];
    a5[4] = v41;
    v42 = v36[2];
    a5[5] = v42;
    if (a3 + 1 >= a4)
      return v13;
    v43 = v35 + 4;
    v44 = ~a3 + a4;
    v45 = (unsigned int *)(v34 + 4 * a3 + 4);
    while (1)
    {
      v47 = *v45++;
      v46 = v47;
      v48 = (_OWORD *)(v35 + 48 * v47);
      v49 = *v48;
      if (v37 > COERCE_FLOAT(*v48))
      {
        *(_DWORD *)a5 = v49;
        v37 = *(float *)&v49;
        *(_QWORD *)&v49 = *(_QWORD *)v48;
      }
      if (v38 >= *(float *)&v49)
        break;
      *((_DWORD *)a5 + 1) = v49;
      v50 = *(float *)(v43 + 48 * v46);
      v38 = *(float *)&v49;
      if (v39 > v50)
        goto LABEL_30;
LABEL_31:
      v51 = *(float *)(v43 + 48 * v46);
      if (v40 < v51)
      {
        a5[3] = v51;
        v40 = v51;
      }
      v52 = (float *)(v35 + 8 + 48 * v46);
      v53 = *v52;
      if (v41 <= *v52)
      {
        v54 = *v52;
        if (v42 >= v53)
          goto LABEL_23;
      }
      else
      {
        a5[4] = v53;
        v54 = *v52;
        v41 = v53;
        if (v42 >= *v52)
          goto LABEL_23;
      }
      a5[5] = v54;
      v42 = v54;
LABEL_23:
      if (!--v44)
        return v13;
    }
    v50 = *((float *)&v49 + 1);
    if (v39 <= *((float *)&v49 + 1))
      goto LABEL_31;
LABEL_30:
    a5[2] = v50;
    v39 = v50;
    goto LABEL_31;
  }
  v15 = a5[1] - *a5;
  v17 = a5[2];
  v16 = a5[3];
  v18 = v16 - v17;
  if ((float)(v16 - v17) <= v15)
    v19 = a5[1] - *a5;
  else
    v19 = v16 - v17;
  v21 = a5[4];
  v20 = a5[5];
  if ((float)(v20 - v21) > v19)
    v19 = v20 - v21;
  v22 = v19 * 0.99999;
  v23 = (uint64_t *)a2[15];
  v24 = *a1;
  v25 = -1.0;
  if (v15 > v22)
  {
    v26 = *(_QWORD *)(*v23 + 8);
    v27 = *(float *)(v26 + 48 * *(unsigned int *)(v24 + 4 * a3));
    if (v14 < 2)
    {
      v30 = *(float *)(v26 + 48 * *(unsigned int *)(v24 + 4 * a3));
    }
    else
    {
      v28 = ~a3 + a4;
      v29 = (unsigned int *)(v24 + 4 * a3 + 4);
      v30 = *(float *)(v26 + 48 * *(unsigned int *)(v24 + 4 * a3));
      v31 = v30;
      do
      {
        v32 = *v29++;
        v33 = *(float *)(v26 + 48 * v32);
        if (v33 < v27)
        {
          v27 = v33;
          v31 = v30;
        }
        if (v33 > v31)
        {
          v30 = v33;
          v31 = v33;
        }
        --v28;
      }
      while (v28);
    }
    v55 = v30 - v27;
    v25 = -1.0;
    if (v55 > -1.0)
      v25 = v55;
  }
  if (v18 <= v22)
    goto LABEL_53;
  v56 = *(_QWORD *)(*v23 + 8);
  v57 = *(float *)(v56 + 48 * *(unsigned int *)(v24 + 4 * a3) + 4);
  if (v14 < 2)
  {
    v61 = *(float *)(v56 + 48 * *(unsigned int *)(v24 + 4 * a3) + 4);
  }
  else
  {
    v58 = v56 + 4;
    v59 = ~a3 + a4;
    v60 = (unsigned int *)(v24 + 4 * a3 + 4);
    v61 = v57;
    v62 = v57;
    do
    {
      v63 = *v60++;
      v64 = *(float *)(v58 + 48 * v63);
      if (v64 < v57)
      {
        v57 = v64;
        v62 = v61;
      }
      if (v64 > v62)
      {
        v61 = v64;
        v62 = v64;
      }
      --v59;
    }
    while (v59);
  }
  v65 = v61 - v57;
  if (v65 <= v25)
  {
LABEL_53:
    v68 = 0;
    v67 = 0;
    v66 = 1;
  }
  else
  {
    v66 = 0;
    v67 = 1;
    v68 = 1;
    v25 = v65;
  }
  v69 = *(_DWORD *)(v24 + 4 * a3);
  if ((float)(v20 - v21) <= v22)
  {
    v70 = *v23;
    v71 = *(_QWORD *)(*v23 + 8);
    goto LABEL_66;
  }
  v70 = *v23;
  v71 = *(_QWORD *)(*v23 + 8);
  v72 = *(float *)(v71 + 48 * v69 + 8);
  v73 = v72;
  v74 = v72;
  if (v14 >= 2)
  {
    v75 = ~a3 + a4;
    v76 = (unsigned int *)(v24 + 4 * a3 + 4);
    v73 = *(float *)(v71 + 48 * v69 + 8);
    v74 = v73;
    v77 = v73;
    do
    {
      v78 = *v76++;
      v79 = *(float *)(v71 + 8 + 48 * v78);
      if (v79 < v73)
      {
        v73 = v79;
        v77 = v74;
      }
      if (v79 > v77)
      {
        v74 = v79;
        v77 = v79;
      }
      --v75;
    }
    while (v75);
  }
  if ((float)(v74 - v73) <= v25)
  {
LABEL_66:
    v80 = a5[2 * v67] + a5[2 * v67 + 1];
    v82 = (float *)(v71 + 48 * v69);
    if ((v66 & 1) != 0)
    {
      v81 = 0;
      v72 = *v82;
      if (v14 >= 2)
        goto LABEL_70;
    }
    else
    {
      v72 = v82[1];
      v81 = 1;
      if (v14 >= 2)
        goto LABEL_70;
    }
LABEL_68:
    v83 = v72;
    goto LABEL_92;
  }
  v80 = v21 + v20;
  v68 = 2;
  v81 = 2;
  if (v14 < 2)
    goto LABEL_68;
LABEL_70:
  if (v81 == 1)
  {
    v89 = ~a3 + a4;
    v90 = (unsigned int *)(v24 + 4 * a3 + 4);
    v83 = v72;
    v91 = v72;
    do
    {
      v92 = *v90++;
      v93 = *(float *)(v71 + 4 + 48 * v92);
      if (v93 < v72)
      {
        v72 = v93;
        v91 = v83;
      }
      if (v93 > v91)
      {
        v83 = v93;
        v91 = v93;
      }
      --v89;
    }
    while (v89);
  }
  else if (v81)
  {
    v94 = ~a3 + a4;
    v95 = (unsigned int *)(v24 + 4 * a3 + 4);
    v83 = v72;
    v96 = v72;
    do
    {
      v97 = *v95++;
      v98 = *(float *)(v71 + 8 + 48 * v97);
      if (v98 < v72)
      {
        v72 = v98;
        v96 = v83;
      }
      if (v98 > v96)
      {
        v83 = v98;
        v96 = v98;
      }
      --v94;
    }
    while (v94);
  }
  else
  {
    v84 = ~a3 + a4;
    v85 = (unsigned int *)(v24 + 4 * a3 + 4);
    v83 = v72;
    v86 = v72;
    do
    {
      v87 = *v85++;
      v88 = *(float *)(v71 + 48 * v87);
      if (v88 < v72)
      {
        v72 = v88;
        v86 = v83;
      }
      if (v88 > v86)
      {
        v83 = v88;
        v86 = v88;
      }
      --v84;
    }
    while (v84);
  }
LABEL_92:
  v99 = 0;
  v100 = v80 * 0.5;
  if (v100 <= v83)
    v83 = v100;
  if (v100 >= v72)
    *(float *)&v101 = v83;
  else
    *(float *)&v101 = v72;
  v102 = v14 - 1;
  v103 = v71 + 8;
  v104 = v24 + 4 * a3;
  v105 = v14 - 1;
LABEL_100:
  if (v81 == 1)
  {
    do
    {
      if (*(float *)(*(_QWORD *)(v70 + 8) + 4 + 48 * *(unsigned int *)(v104 + 4 * v99)) >= *(float *)&v101)
        break;
      ++v99;
    }
    while (v99 <= v105);
  }
  else if (v81)
  {
    do
    {
      if (*(float *)(*(_QWORD *)(v70 + 8) + 8 + 48 * *(unsigned int *)(v104 + 4 * v99)) >= *(float *)&v101)
        break;
      ++v99;
    }
    while (v99 <= v105);
  }
  else
  {
    do
    {
      if (*(float *)(*(_QWORD *)(v70 + 8) + 48 * *(unsigned int *)(v104 + 4 * v99)) >= *(float *)&v101)
        break;
      ++v99;
    }
    while (v99 <= v105);
  }
  while (1)
  {
    v109 = v105 != 0;
    if (v99 > v105)
    {
      v111 = v105;
LABEL_126:
      if (v99 > v111)
        break;
      goto LABEL_98;
    }
    if (!v105)
      goto LABEL_123;
    while (1)
    {
      v110 = *(_DWORD *)(v104 + 4 * v105);
      if (v81 != 1)
        break;
      if (*(float *)(*(_QWORD *)(v70 + 8) + 48 * v110 + 4) < *(float *)&v101)
        goto LABEL_122;
LABEL_119:
      v111 = v105 - 1;
      v109 = v105 != 1;
      if (v99 <= v105 - 1)
      {
        if (--v105)
          continue;
      }
      goto LABEL_126;
    }
    if (!v81)
    {
      if (*(float *)(*(_QWORD *)(v70 + 8) + 48 * v110) < *(float *)&v101)
        goto LABEL_122;
      goto LABEL_119;
    }
    if (*(float *)(v103 + 48 * v110) >= *(float *)&v101)
      goto LABEL_119;
LABEL_122:
    v109 = 1;
LABEL_123:
    v111 = v105;
    if (v99 > v105)
      break;
LABEL_98:
    if (!v109)
      break;
    v106 = 4 * (v99 + a3);
    v107 = 4 * (v111 + a3);
    v108 = *(_DWORD *)(v24 + v106);
    *(_DWORD *)(v24 + v106) = *(_DWORD *)(v24 + v107);
    *(_DWORD *)(v24 + v107) = v108;
    ++v99;
    v105 = v111 - 1;
    if (v99 <= v111 - 1)
      goto LABEL_100;
  }
  v112 = a2[15];
  v113 = v24 + 4 * a3;
  v114 = v99;
  if (v99 <= v102)
    goto LABEL_131;
  while (1)
  {
    v118 = v102 != 0;
    if (v114 > v102)
    {
      v120 = v102;
LABEL_157:
      if (v114 > v120)
        break;
      goto LABEL_129;
    }
    if (!v102)
      goto LABEL_154;
    while (1)
    {
      v119 = *(_DWORD *)(v113 + 4 * v102);
      if (v81 != 1)
        break;
      if (*(float *)(*(_QWORD *)(*(_QWORD *)v112 + 8) + 48 * v119 + 4) <= *(float *)&v101)
        goto LABEL_153;
LABEL_150:
      v120 = v102 - 1;
      v118 = v102 != 1;
      if (v114 <= v102 - 1)
      {
        if (--v102)
          continue;
      }
      goto LABEL_157;
    }
    if (!v81)
    {
      if (*(float *)(*(_QWORD *)(*(_QWORD *)v112 + 8) + 48 * v119) <= *(float *)&v101)
        goto LABEL_153;
      goto LABEL_150;
    }
    if (*(float *)(*(_QWORD *)(*(_QWORD *)v112 + 8) + 48 * v119 + 8) > *(float *)&v101)
      goto LABEL_150;
LABEL_153:
    v118 = 1;
LABEL_154:
    v120 = v102;
    if (v114 > v102)
      break;
LABEL_129:
    if (!v118)
      break;
    v115 = 4 * (v114 + a3);
    v116 = 4 * (v120 + a3);
    v117 = *(_DWORD *)(v24 + v115);
    *(_DWORD *)(v24 + v115) = *(_DWORD *)(v24 + v116);
    *(_DWORD *)(v24 + v116) = v117;
    ++v114;
    v102 = v120 - 1;
    if (v114 <= v120 - 1)
    {
LABEL_131:
      if (v81 == 1)
      {
        do
        {
          if (*(float *)(*(_QWORD *)(*(_QWORD *)v112 + 8) + 4 + 48 * *(unsigned int *)(v113 + 4 * v114)) > *(float *)&v101)
            break;
          ++v114;
        }
        while (v114 <= v102);
      }
      else if (v81)
      {
        do
        {
          if (*(float *)(*(_QWORD *)(*(_QWORD *)v112 + 8) + 8 + 48 * *(unsigned int *)(v113 + 4 * v114)) > *(float *)&v101)
            break;
          ++v114;
        }
        while (v114 <= v102);
      }
      else
      {
        do
        {
          if (*(float *)(*(_QWORD *)(*(_QWORD *)v112 + 8) + 48 * *(unsigned int *)(v113 + 4 * v114)) > *(float *)&v101)
            break;
          ++v114;
        }
        while (v114 <= v102);
      }
    }
  }
  v121 = v14 >> 1;
  if (v114 >= v121)
    v122 = v121;
  else
    v122 = v114;
  if (v99 <= v121)
    v123 = v122;
  else
    v123 = v99;
  *(_DWORD *)v13 = v68;
  v132 = *(int32x4_t *)a5;
  v133 = *(int8x8_t *)(a5 + 4);
  v124 = 2 * v68;
  v132.i32[v124 + 1] = v101;
  v125 = v123 + a3;
  v13[2] = sub_2393BC8EC(a1, a2, a3, v123 + a3, &v132);
  v130 = *(int32x4_t *)a5;
  v131 = *(int8x8_t *)(a5 + 4);
  v130.i32[v124] = v101;
  v13[3] = sub_2393BC8EC(a1, a2, v125, a4, &v130);
  v126 = v130.i32[v124];
  *((_DWORD *)v13 + 1) = v132.i32[v124 + 1];
  *((_DWORD *)v13 + 2) = v126;
  *(int8x16_t *)a5 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vtrn2q_s32(vrev64q_s32(v132), v130), (float32x4_t)vtrn2q_s32(vrev64q_s32(v130), v132)), (int8x16_t)v130, (int8x16_t)v132);
  *((int8x8_t *)a5 + 2) = vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)__PAIR64__(v131.u32[1], v133.u32[0]), (float32x2_t)__PAIR64__(v133.u32[1], v131.u32[0])), v131, v133);
  return v13;
}

uint64_t *sub_2393BD2A0(uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  uint64_t v6;

  v2 = a1[1];
  a1[1] = 0;
  if (v2)
  {
    v3 = *(_QWORD **)(v2 + 96);
    if (v3)
    {
      do
      {
        v4 = (_QWORD *)*v3;
        free(v3);
        *(_QWORD *)(v2 + 96) = v4;
        v3 = v4;
      }
      while (v4);
    }
    *(_DWORD *)(v2 + 88) = 0;
    *(_QWORD *)(v2 + 96) = 0;
    *(_QWORD *)(v2 + 112) = 0;
    v5 = *(void **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(v2 + 8) = v5;
      operator delete(v5);
    }
    MEMORY[0x23B83C4BC](v2, 0x10F0C40B93F282ALL);
  }
  v6 = *a1;
  *a1 = 0;
  if (v6)
    MEMORY[0x23B83C4BC](v6, 0x60C4044C4A2DFLL);
  return a1;
}

void *sub_2393BD344(_BYTE *__dst, void *__src, unint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v6 = a3 | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *v5 = v8;
    v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }
  return memmove(v5, __src, a3 + 1);
}

os_log_t sub_2393BD3CC()
{
  os_log_t result;

  result = os_log_create("com.apple.CoreOCModules", "General");
  qword_256930370 = (uint64_t)result;
  return result;
}

void sub_2393BD3FC()
{
  JUMPOUT(0x23B83C4BCLL);
}

_QWORD *sub_2393BD410(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_250AD5F70;
  result[1] = v3;
  return result;
}

uint64_t sub_2393BD444(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_250AD5F70;
  a2[1] = v2;
  return result;
}

float sub_2393BD460@<S0>(uint64_t a1@<X0>, uint64_t a2@<X1>, float *a3@<X8>)
{
  float (***v5)(_QWORD, float32x2_t *);
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float result;
  float32x2_t v13;
  float v14;
  float32x2_t v15;
  float v16;
  _DWORD v17[3];
  float32x2_t v18;
  float v19;
  float v20;
  uint64_t v21;
  float32x2_t v22;
  float v23;

  v5 = *(float (****)(_QWORD, float32x2_t *))(a1 + 8);
  v22 = vadd_f32(*(float32x2_t *)a2, (float32x2_t)925353388);
  v23 = *(float *)(a2 + 8) + 0.0;
  v6 = (**v5)(v5, &v22);
  v20 = *(float *)a2 + -0.00001;
  v21 = *(_QWORD *)(a2 + 4);
  v7 = (float)(v6 - (**v5)(v5, (float32x2_t *)&v20)) * 0.5;
  v18 = vadd_f32(*(float32x2_t *)a2, (float32x2_t)0x3727C5AC00000000);
  v19 = *(float *)(a2 + 8) + 0.0;
  v8 = (**v5)(v5, &v18);
  v9 = *(float *)(a2 + 4) + -0.00001;
  v17[0] = *(_DWORD *)a2;
  *(float *)&v17[1] = v9;
  v17[2] = *(_DWORD *)(a2 + 8);
  v10 = (float)(v8 - (**v5)(v5, (float32x2_t *)v17)) * 0.5;
  v15 = vadd_f32(*(float32x2_t *)a2, 0);
  v16 = *(float *)(a2 + 8) + 0.00001;
  v11 = (**v5)(v5, &v15);
  v13 = *(float32x2_t *)a2;
  v14 = *(float *)(a2 + 8) + -0.00001;
  result = (float)(v11 - (**v5)(v5, &v13)) * 0.5;
  *a3 = v7;
  a3[1] = v10;
  a3[2] = result;
  return result;
}

_QWORD *sub_2393BD608(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  *((_DWORD *)v10 + 5) = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_44;
    if (prime < v7)
    {
      v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        v19 = std::__next_prime(v19);
      }
      else
      {
        v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2)
          v19 = v21;
      }
      if (prime <= v19)
        prime = v19;
      if (prime < v7)
LABEL_44:
        sub_23938C8F4(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v23)
  {
    *v10 = *v23;
LABEL_58:
    *v23 = v10;
    goto LABEL_59;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v22 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v24 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7)
        v24 %= v7;
    }
    else
    {
      v24 &= v7 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

os_log_t sub_2393BD8CC()
{
  os_log_t result;

  result = os_log_create("com.apple.CoreOCModules", "General");
  qword_256930380 = (uint64_t)result;
  return result;
}

void sub_2393BD8FC(uint64_t a1)
{
  sub_2393BFFB8(a1);
  JUMPOUT(0x23B83C4BCLL);
}

BOOL sub_2393BD920(uint64_t a1, float32x4_t *a2)
{
  uint64_t v4;
  _BOOL8 v5;
  int32x2_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  size_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  _BYTE v32[27];

  if (!sub_2393BFCC4((uint64_t)a2))
    return 0;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4 || *(_BYTE *)(a1 + 8))
    return 0;
  v5 = *(_BYTE *)v4 != 0;
  if (!*(_BYTE *)v4)
    return v5;
  *(_OWORD *)v32 = *(_OWORD *)(v4 + 9);
  *(_OWORD *)&v32[11] = *(_OWORD *)(v4 + 20);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(v4 + 8);
  *(_OWORD *)(a1 + 33) = *(_OWORD *)v32;
  v7.i32[1] = *(_DWORD *)&v32[15];
  *(_OWORD *)(a1 + 44) = *(_OWORD *)&v32[11];
  *(float *)v7.i32 = 1.0 / a2[7].f32[0];
  *(float32x2_t *)(a1 + 60) = vmul_f32(*(float32x2_t *)&a2->u32[2], (float32x2_t)*(_OWORD *)&vdupq_lane_s32(v7, 0));
  *(_QWORD *)(a1 + 68) = a2[1].i64[0];
  v8.i64[0] = 0x3F0000003F000000;
  v8.i64[1] = 0x3F0000003F000000;
  *(float32x4_t *)(a1 + 80) = vmulq_n_f32(vmulq_f32(a2[2], v8), *(float *)v7.i32);
  v8.i64[0] = 0xBF000000BF000000;
  v8.i64[1] = 0xBF000000BF000000;
  *(float32x4_t *)(a1 + 96) = vmulq_n_f32(vmulq_f32(a2[2], v8), *(float *)v7.i32);
  v9 = a2[3];
  v10 = a2[4];
  v11 = a2[6];
  *(float32x4_t *)(a1 + 144) = a2[5];
  *(float32x4_t *)(a1 + 160) = v11;
  *(float32x4_t *)(a1 + 112) = v9;
  *(float32x4_t *)(a1 + 128) = v10;
  *(_DWORD *)(a1 + 176) = a2[7].i32[0];
  v13 = *(char **)(a1 + 184);
  v12 = *(char **)(a1 + 192);
  v14 = v12 - v13;
  if (!((unint64_t)(v12 - v13) >> 18))
  {
    v15 = 0x8000 - ((unint64_t)v14 >> 3);
    v16 = *(_QWORD *)(a1 + 200);
    if (v15 > (v16 - (uint64_t)v12) >> 3)
    {
      v17 = v14 >> 3;
      v18 = (v14 >> 3) + v15;
      if (v18 >> 61)
        abort();
      v19 = v16 - (_QWORD)v13;
      if (v19 >> 2 > v18)
        v18 = v19 >> 2;
      if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
        v20 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v20 = v18;
      if (v20)
      {
        if (v20 >> 61)
          sub_23938C4B8();
        v21 = (char *)operator new(8 * v20);
      }
      else
      {
        v21 = 0;
      }
      v23 = &v21[8 * v17];
      v24 = 8 * v15;
      v25 = &v21[8 * v20];
      bzero(v23, v24);
      v26 = &v23[v24];
      if (v12 != v13)
      {
        do
        {
          v27 = *((_QWORD *)v12 - 1);
          v12 -= 8;
          *((_QWORD *)v23 - 1) = v27;
          v23 -= 8;
        }
        while (v12 != v13);
        v12 = *(char **)(a1 + 184);
      }
      *(_QWORD *)(a1 + 184) = v23;
      *(_QWORD *)(a1 + 192) = v26;
      *(_QWORD *)(a1 + 200) = v25;
      if (v12)
        operator delete(v12);
      goto LABEL_28;
    }
    bzero(*(void **)(a1 + 192), 8 * v15);
    v22 = &v12[8 * v15];
    goto LABEL_21;
  }
  if (v14 != 0x40000)
  {
    v22 = v13 + 0x40000;
LABEL_21:
    *(_QWORD *)(a1 + 192) = v22;
  }
LABEL_28:
  *(_DWORD *)(a1 + 208) = a2[7].i32[1];
  v28 = a2->u32[0];
  if (v28 > 5)
  {
    v31 = 0;
    v30 = 0;
  }
  else
  {
    v29 = 4 * v28;
    v30 = *(_DWORD *)((char *)&unk_2393F9C70 + v29);
    v31 = *(_DWORD *)((char *)&unk_2393F9C88 + v29);
  }
  *(_DWORD *)(a1 + 212) = v30;
  *(_DWORD *)(a1 + 256) = a2[7].i32[2];
  *(_DWORD *)(a1 + 260) = v31;
  *(_BYTE *)(a1 + 8) = 1;
  return v5;
}

uint64_t sub_2393BDB98(float32x4_t *a1, float32x4_t *a2)
{
  uint64_t v2;
  float v3;
  float32x4_t v4;

  v2 = a1->u8[8];
  if (a1->i8[8])
  {
    v2 = 0;
    if (a2->f32[0] > 0.0 && a2->f32[1] > 0.0 && a2->f32[2] > 0.0)
    {
      v3 = 1.0 / a1[11].f32[0];
      v4.i64[0] = 0x3F0000003F000000;
      v4.i64[1] = 0x3F0000003F000000;
      a1[5] = vmulq_n_f32(vmulq_f32(*a2, v4), v3);
      v4.i64[0] = 0xBF000000BF000000;
      v4.i64[1] = 0xBF000000BF000000;
      a1[6] = vmulq_n_f32(vmulq_f32(*a2, v4), v3);
      return 1;
    }
  }
  return v2;
}

BOOL sub_2393BDC08(uint64_t a1, float32x2_t *a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  _BOOL8 result;
  uint64_t v11;
  int v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float v24;
  float32x4_t v25;
  float32x4_t v26;
  uint64_t v27;
  float32x2_t v28;
  float v29;
  float *v30;
  float32x4_t *v34;
  NSObject *v35;
  void **v36;
  const char *v37;
  uint64_t v38;
  float32x4_t *v39;
  float *f32;
  float32x4_t v41;
  float32x4_t v42;
  float v43;
  float *v44;
  float v45;
  float v47;
  float v48;
  float v49;
  float v50;
  float32x4_t v52;
  float32x4_t v53;
  int8x16_t v54;
  float32x2_t v55;
  float32x4_t v56;
  float32x4_t v57;
  __int128 v58;
  float32x4_t v59;
  float32x2_t v60;
  int8x8_t v61;
  float32x2_t v62;
  float32x2_t v63;
  int32x2_t v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v70;
  float v72;
  float32x4_t v73;
  _QWORD *v74;
  unint64_t v75;
  unint64_t v76;
  float32x4_t v77;
  int v78;
  int32x2_t v79;
  __int16 v80;
  float v81;
  __int16 v82;
  float v83;
  __int16 v84;
  float32x4_t v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float32x4_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  float32x4_t v94;
  uint32x4_t v95;
  uint64_t v96;
  unint64_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float v101;
  float v102;
  uint64_t v103;
  uint64_t v104;
  int16x4_t *v105;
  float32x4_t v106;
  float v107;
  uint64_t v108;
  int32x4_t v109;
  int32x4_t v110;
  int8x16_t v111;
  int v112;
  unsigned int v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  uint64_t v120;
  uint64_t v121;
  int32x2_t v122;
  int32x4_t v123;
  uint64_t v125;
  uint64_t v126;
  unsigned int v128;
  unsigned int v129;
  int16x4_t v130;
  int32x4_t v131;
  int32x4_t v132;
  float v133;
  unsigned int v134;
  unsigned int v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t v138;
  BOOL v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  uint64_t v144;
  uint64_t v145;
  unsigned int *v146;
  int v147;
  uint64_t v148;
  unsigned int v149;
  uint16x4_t v150;
  unint64_t v151;
  _BYTE *v152;
  unsigned int v153;
  unsigned int v154;
  float *v155;
  float32x4_t *v156;
  int32x4_t v157;
  uint64_t v158;
  unsigned int *v159;
  unsigned int v160;
  unsigned int v161;
  unsigned int v162;
  int v163;
  BOOL v164;
  unsigned int v165;
  uint64_t v166;
  uint64_t v167;
  unsigned int *v169;
  int32x4_t v170;
  int16x4_t v171;
  unsigned int v172;
  int16x4_t v173;
  uint64_t v174;
  float v175;
  float v176;
  float v177;
  float v178;
  unsigned int v179;
  unsigned int v180;
  unsigned int v181;
  uint64_t v182;
  void **v183;
  _QWORD *v184;
  unsigned int v185;
  unsigned int *v186;
  _QWORD *v187;
  float32x4_t v188;
  float32x4_t v189;
  float v190;
  float v191;
  int16x4_t v192;
  int16x4_t v193;
  float *v194;
  float *v195;
  float v196;
  float v197;
  float v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;
  float32x4_t v202;
  float32x4_t v203;
  float32x4_t v204;
  float32x4_t v205;
  float32x4_t v206;
  float32x4_t v207;
  float32x4_t v208;
  float32x4_t v209;
  float32x4_t v210;
  float32x4_t v211;
  float32x4_t v212;
  float32x4_t v213;
  float32x4_t v214;
  float32x4_t v215;
  float32x4_t v216;
  float32x4_t v217;
  float32x4_t v218;
  float32x4_t v219;
  float32x4_t v220;
  float32x4_t v221;
  float32x4_t v222;
  float32x4_t v223;
  unsigned int v224;
  float32x4_t v225;
  float32x4_t v226;
  unsigned int v227;
  int v228;
  void *v229[2];
  char v230;
  uint8_t buf[4];
  void **v232;
  __int16 v233;
  int v234;
  uint64_t v235;

  v235 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 8))
  {
    if (qword_256930398 != -1)
      dispatch_once(&qword_256930398, &unk_250AD6050);
    v35 = qword_256930390;
    result = os_log_type_enabled((os_log_t)qword_256930390, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    sub_2393C4DD0(v229, "virtual BOOL oc::voxel_hashing::VoxelIntegratorCPU::integratePointCloud(const simd_float4x4 &, const uint32_t, const common::Point *, const common::PointSupplements *)");
    if (v230 >= 0)
      v36 = v229;
    else
      v36 = (void **)v229[0];
    *(_DWORD *)buf = 136315394;
    v232 = v36;
    v233 = 1026;
    v234 = 137;
    v37 = "%s:%{public}d VoxelIntegratorCPU not initialized.";
LABEL_222:
    _os_log_error_impl(&dword_239388000, v35, OS_LOG_TYPE_ERROR, v37, buf, 0x12u);
    if (v230 < 0)
      operator delete(v229[0]);
    return 0;
  }
  result = sub_2393BEC08((uint64_t)a2, a3, a4, a5, *(_DWORD *)(a1 + 260));
  if (result)
  {
    if (a3)
    {
      v11 = 0;
      v12 = 0;
      v13 = *(float32x4_t *)(a1 + 112);
      v14 = *(float32x4_t *)(a1 + 128);
      v15 = *(float32x4_t *)(a1 + 144);
      v16 = *(float32x4_t *)(a1 + 160);
      v17 = *(float32x4_t *)a2[4].f32;
      v18 = *(float32x4_t *)a2[6].f32;
      v19 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v13, COERCE_FLOAT(*(_OWORD *)a2->f32)), v14, *a2, 1), v15, *(float32x4_t *)a2->f32, 2), v16, *(float32x4_t *)a2->f32, 3);
      v20 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v13, COERCE_FLOAT(*(_OWORD *)a2[2].f32)), v14, a2[2], 1), v15, *(float32x4_t *)a2[2].f32, 2), v16, *(float32x4_t *)a2[2].f32, 3);
      v21 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v13, v17.f32[0]), v14, *(float32x2_t *)v17.f32, 1), v15, v17, 2), v16, v17, 3);
      v22 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v13, v18.f32[0]), v14, *(float32x2_t *)v18.f32, 1), v15, v18, 2);
      v23 = vmlaq_laneq_f32(v22, v16, v18, 3);
      v24 = 1.0;
      v25 = vmulq_n_f32(vaddq_f32(v16, v22), 1.0 / *(float *)(a1 + 176));
      v26 = v25;
      v26.i32[3] = 1.0;
      v27 = a3;
      v28 = (float32x2_t)vrev64_s32(*(int32x2_t *)v25.f32);
      v29 = v25.f32[2];
      v30 = (float *)(a1 + 216);
      __asm { FMOV            V25.4S, #1.0 }
      v34 = (float32x4_t *)&loc_2393F5000;
      do
      {
        v39 = (float32x4_t *)(a4 + 48 * v11);
        v41 = *v39;
        f32 = v39[2].f32;
        v42 = v41;
        v43 = -v41.f32[2];
        if (*(float *)(a1 + 72) <= (float)-v41.f32[2] && *(float *)(a1 + 68) >= v43)
        {
          v44 = (float *)(a5 + 20 * v11);
          v45 = fabsf(*v44);
          if (*v44 >= 0.0 && v45 > 0.000001)
          {
            v47 = *(float *)(a5 + 20 * v11 + 4);
            v48 = *(float *)(a1 + 256);
            _NF = v47 < v48;
            v49 = vabds_f32(v47, v48);
            v50 = (float)(fabsf(v48) * 0.00001) + 0.000001;
            if (!_NF && v49 > v50)
            {
              v52 = vmulq_n_f32(vaddq_f32(v23, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v19, v42.f32[0]), v20, *(float32x2_t *)v42.f32, 1), v21, v42, 2)), v24 / *(float *)(a1 + 176));
              v52.f32[3] = v24;
              v53 = vsubq_f32(v52, v26);
              v54 = (int8x16_t)vmulq_f32(v53, v53);
              v55 = vadd_f32(*(float32x2_t *)v54.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v54, v54, 8uLL));
              v55.f32[0] = sqrtf(vaddv_f32(v55));
              if (v55.f32[0] >= 0.001)
              {
                v56 = vdivq_f32(v53, (float32x4_t)vdupq_lane_s32((int32x2_t)v55, 0));
                v58 = *(_OWORD *)(a1 + 80);
                v57 = *(float32x4_t *)(a1 + 96);
                v59 = vdivq_f32(_Q25, v56);
                v60 = (float32x2_t)vrev64_s32(*(int32x2_t *)v59.f32);
                v61 = (int8x8_t)vcgez_f32(v60);
                v62 = vmul_f32(v60, vsub_f32((float32x2_t)vbsl_s8(v61, (int8x8_t)vrev64_s32(*(int32x2_t *)v57.f32), (int8x8_t)vrev64_s32(*(int32x2_t *)&v58)), v28));
                v63 = vmul_f32(*(float32x2_t *)v59.f32, vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vrev64_s32((int32x2_t)vmvn_s8(v61)), *(int8x8_t *)v57.f32, *(int8x8_t *)&v58), *(float32x2_t *)v25.f32));
                v64 = vcgt_f32(v62, v63);
                if (((v64.i32[1] | v64.i32[0]) & 1) == 0)
                {
                  if (v62.f32[1] >= v62.f32[0])
                    v62.f32[0] = v62.f32[1];
                  if (v63.f32[1] < v63.f32[0])
                    v63.f32[0] = v63.f32[1];
                  LODWORD(v65) = *(_QWORD *)(a1 + 104);
                  if (v59.f32[2] >= 0.0)
                    LODWORD(v66) = *(_QWORD *)(a1 + 104);
                  else
                    LODWORD(v66) = *(_QWORD *)(a1 + 88);
                  if (v59.f32[2] >= 0.0)
                    LODWORD(v65) = *(_QWORD *)(a1 + 88);
                  v67 = vmuls_lane_f32(v66 - v29, v59, 2);
                  v68 = vmuls_lane_f32(v65 - v29, v59, 2);
                  if (v62.f32[0] <= v68 && v67 <= v63.f32[0])
                  {
                    v57.f32[0] = v55.f32[0] + 1.5;
                    if (v62.f32[0] >= v67)
                      v67 = v62.f32[0];
                    v70 = v68 >= v63.f32[0] ? v63.f32[0] : v68;
                    if (v67 > 0.0 || v70 < v57.f32[0])
                    {
                      v72 = fmaxf(v67, 0.0);
                      v73 = vmlaq_n_f32(v25, v56, v72);
                      if (v70 >= v57.f32[0])
                        v70 = v57.f32[0];
                      v57.f32[0] = v70 - v72;
                    }
                    else
                    {
                      v73 = v25;
                    }
                    if (v57.f32[0] > 0.0)
                    {
                      v74 = *(_QWORD **)(a1 + 184);
                      v75 = *(_QWORD *)(a1 + 192) - (_QWORD)v74;
                      v76 = v75 >> 3;
                      if (!(v75 >> 3))
                        goto LABEL_98;
                      v77 = (float32x4_t)vextq_s8((int8x16_t)v73, (int8x16_t)v73, 4uLL);
                      *(int32x2_t *)v77.f32 = vcvt_s32_f32(vrndm_f32(*(float32x2_t *)v77.f32));
                      v78 = v77.i32[1];
                      v79 = vdup_lane_s32(*(int32x2_t *)v77.f32, 0);
                      v79.i32[0] = vcvtms_s32_f32(v73.f32[0]);
                      v59.i16[0] = v79.i16[0];
                      v59.i16[1] = v77.i16[0];
                      v59.i16[2] = v77.i16[2];
                      *v74 = v59.i64[0];
                      if (v56.f32[0] >= 0.0)
                        v80 = 1;
                      else
                        v80 = -1;
                      v81 = v56.f32[1];
                      if (v56.f32[1] >= 0.0)
                        v82 = 1;
                      else
                        v82 = -1;
                      v83 = v56.f32[2];
                      if (v56.f32[2] >= 0.0)
                        v84 = 1;
                      else
                        v84 = -1;
                      *(float32x2_t *)v77.f32 = vcvt_f32_s32(v79);
                      v77.f32[2] = (float)v78;
                      v85 = vsubq_f32(v73, v77);
                      if (fabsf(v56.f32[0]) >= 1.1755e-38)
                      {
                        if (v56.f32[0] >= 0.0)
                          v77.f32[0] = (float)(v24 - v85.f32[0]) / v56.f32[0];
                        else
                          v77.f32[0] = v85.f32[0] / (float)-v56.f32[0];
                      }
                      else
                      {
                        v77.i32[0] = 2139095040;
                      }
                      if (fabsf(v56.f32[1]) >= 1.1755e-38)
                      {
                        v87 = v85.f32[1];
                        if (v56.f32[1] >= 0.0)
                          v87 = v24 - v85.f32[1];
                        else
                          v81 = -v56.f32[1];
                        v86 = v87 / v81;
                      }
                      else
                      {
                        v86 = INFINITY;
                      }
                      if (fabsf(v56.f32[2]) >= 1.1755e-38)
                      {
                        v89 = v85.f32[2];
                        if (v56.f32[2] >= 0.0)
                          v89 = v24 - v85.f32[2];
                        else
                          v83 = -v56.f32[2];
                        v88 = v89 / v83;
                      }
                      else
                      {
                        v88 = INFINITY;
                      }
                      if (v76 < 2)
                      {
                        LODWORD(v76) = 1;
                        goto LABEL_98;
                      }
                      v90 = vdivq_f32(_Q25, vabsq_f32(v56));
                      v77.f32[1] = v86;
                      v77.f32[2] = v88;
                      v57 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v57.f32, 0);
                      v91 = (v75 >> 3);
                      v92 = 1;
                      while (1)
                      {
                        v95 = (uint32x4_t)vcgtq_f32(v57, v77);
                        v95.i32[3] = v95.i32[2];
                        if ((vmaxvq_u32(v95) & 0x80000000) == 0)
                          break;
                        if (v77.f32[0] >= v77.f32[1])
                        {
                          if (v77.f32[1] < v77.f32[2])
                          {
                            LOWORD(v96) = v59.i16[0];
                            WORD1(v96) = v59.i16[1] + v82;
                            HIDWORD(v96) = v59.i32[1];
                            v94.i32[0] = v77.i32[0];
                            v94.f32[1] = v90.f32[1] + v77.f32[1];
                            v94.i32[2] = v77.i32[2];
                            v59.i64[0] = v96;
                            goto LABEL_89;
                          }
                        }
                        else if (v77.f32[0] < v77.f32[2])
                        {
                          LOWORD(v93) = v59.i16[0] + v80;
                          WORD1(v93) = v59.i16[1];
                          HIDWORD(v93) = v59.i32[1];
                          v94.f32[0] = v90.f32[0] + v77.f32[0];
                          v94.i32[1] = v77.i32[1];
                          v94.i32[2] = v77.i32[2];
                          goto LABEL_88;
                        }
                        LODWORD(v93) = v59.i32[0];
                        WORD2(v93) = v59.i16[2] + v84;
                        HIWORD(v93) = v59.i16[3];
                        v94.i64[0] = v77.i64[0];
                        v94.f32[2] = v90.f32[2] + v77.f32[2];
LABEL_88:
                        v59.i64[0] = v93;
LABEL_89:
                        v94.i32[3] = v77.i32[3];
                        v74[v92++] = v59.i64[0];
                        v77 = v94;
                        if (v91 == v92)
                          goto LABEL_98;
                      }
                      LODWORD(v76) = v92;
LABEL_98:
                      v228 = v12;
                      *(_DWORD *)(a1 + 180) = v76;
                      if ((_DWORD)v76)
                      {
                        v97 = 0;
                        v100 = v73;
                        v100.f32[3] = v24;
                        v98 = vsubq_f32(v52, v100);
                        v99 = vmulq_f32(v98, v98);
                        v100.i64[0] = vextq_s8((int8x16_t)v99, (int8x16_t)v99, 8uLL).u64[0];
                        v101 = sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v99.f32, *(float32x2_t *)v100.f32)));
                        v102 = *f32;
                        v103 = a4 + 48 * v11;
                        v197 = *(float *)(v103 + 36);
                        v198 = v102;
                        v196 = *(float *)(v103 + 40);
                        v104 = 1;
                        while (1)
                        {
                          v105 = (int16x4_t *)(*(_QWORD *)(a1 + 184) + 8 * v97);
                          v99.i32[0] = v105->i16[0];
                          v99.i32[1] = v105->i16[1];
                          *(float32x2_t *)v99.f32 = vadd_f32(vcvt_f32_s32(*(int32x2_t *)v99.f32), (float32x2_t)0x3F0000003F000000);
                          v100.i16[0] = v105->i16[2];
                          v99.f32[2] = (float)vmovl_s16(*(int16x4_t *)v100.f32).i32[0] + 0.5;
                          v106 = vmulq_f32(v56, vsubq_f32(v99, v73));
                          v100 = vaddq_f32(v106, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v106.f32, 1));
                          v99 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v106, 2), v100);
                          v107 = v101 - v99.f32[0];
                          if (*(float *)(a1 + 60) < (float)(v101 - v99.f32[0]))
                          {
                            v108 = *(_QWORD *)(a1 + 16);
LABEL_105:
                            if (!*(_BYTE *)v108 || !*(_DWORD *)(v108 + 4))
                              goto LABEL_100;
                            *(int16x4_t *)v100.f32 = vshr_n_s16(*v105, 3uLL);
                            v59.i32[0] = v100.u16[1];
                            v59.i32[1] = v100.u16[2];
                            v57.i32[0] = v100.i16[0];
                            *(int32x2_t *)v59.f32 = vshr_n_s32(vshl_n_s32(*(int32x2_t *)v59.f32, 0x10uLL), 0x10uLL);
                            v109 = (int32x4_t)vextq_s8(vextq_s8((int8x16_t)v57, (int8x16_t)v57, 4uLL), (int8x16_t)v59, 0xCuLL);
                            v59 = v34[74];
                            v110 = vmulq_s32(v109, (int32x4_t)v59);
                            v111 = veorq_s8((int8x16_t)vdupq_lane_s32(*(int32x2_t *)v110.i8, 1), (int8x16_t)vdupq_laneq_s32(v110, 2));
                            v57 = (float32x4_t)veorq_s8(v111, (int8x16_t)v110);
                            v113 = *(_DWORD *)(v108 + 8);
                            v112 = *(_DWORD *)(v108 + 12);
                            v114 = v57.i32[0] % v113;
                            v115 = v112 * (v57.i32[0] % v113);
                            v116 = (v115 + v112);
                            v117 = *(_DWORD *)(v108 + 16);
                            _CF = v115 >= v116 || v115 >= v117;
                            if (_CF || v116 > v117)
                            {
LABEL_100:
                              v38 = v104;
                              goto LABEL_101;
                            }
                            v120 = *(_QWORD *)(v108 + 48);
                            LODWORD(v121) = *(_DWORD *)(v108 + 16);
                            while (1)
                            {
                              if ((*(_DWORD *)(v120 + 16 * v115 + 12) & 0x80000000) == 0)
                              {
                                v57.i64[0] = *(_QWORD *)(v120 + 16 * v115);
                                *(int16x4_t *)v111.i8 = vceq_s16(*(int16x4_t *)v57.f32, *(int16x4_t *)v100.f32);
                                v111.i16[3] = v111.i16[2];
                                if ((vminv_u16(*(uint16x4_t *)v111.i8) & 0x8000) != 0)
                                {
                                  if (v117 <= v115)
                                    goto LABEL_100;
                                  v149 = *(_DWORD *)(v120 + 16 * v115 + 12);
                                  if ((v149 & 0x80000000) != 0)
                                    goto LABEL_100;
LABEL_157:
                                  v151 = *(_QWORD *)(v108 + 64)
                                       + 4104 * v149
                                       + ((*(_QWORD *)v105 & 7) << 9)
                                       + ((unint64_t)(HIWORD(v105->u32[0]) & 7) << 6)
                                       + 8 * (HIDWORD(*(unint64_t *)v105) & 7);
                                  v154 = *(unsigned __int8 *)(v151 + 4);
                                  v152 = (_BYTE *)(v151 + 4);
                                  v153 = v154;
                                  if (!v154)
                                    goto LABEL_100;
                                  *v152 = (int)(float)((float)v153 / *(float *)(a1 + 208));
                                  v227 = v104;
LABEL_159:
                                  v220 = v20;
                                  v223 = v19;
                                  v214 = v23;
                                  v217 = v21;
                                  v208 = v26;
                                  v211 = v25;
                                  v155 = v30;
                                  v202 = v56;
                                  v205 = _Q25;
                                  v156 = v34;
                                  v199 = v73;
                                  sub_2393BF85C(v30, v149, v149);
                                  v73 = v199;
                                  v56 = v202;
                                  v34 = v156;
                                  _Q25 = v205;
                                  v26 = v208;
                                  v30 = v155;
                                  v25 = v211;
                                  v23 = v214;
                                  v24 = 1.0;
                                  v21 = v217;
                                  v20 = v220;
                                  v19 = v223;
                                  v38 = v227;
                                  goto LABEL_101;
                                }
                                v111.i32[0] = v57.i16[0];
                                v122.i32[0] = v57.u16[1];
                                v122.i32[1] = v57.u16[2];
                                *(int32x2_t *)v57.f32 = vshr_n_s32(vshl_n_s32(v122, 0x10uLL), 0x10uLL);
                                v123 = vmulq_s32((int32x4_t)vextq_s8(vextq_s8(v111, v111, 4uLL), (int8x16_t)v57, 0xCuLL), (int32x4_t)v59);
                                v111 = veorq_s8((int8x16_t)vdupq_lane_s32(*(int32x2_t *)v123.i8, 1), (int8x16_t)vdupq_laneq_s32(v123, 2));
                                v57 = (float32x4_t)veorq_s8(v111, (int8x16_t)v123);
                                if (v57.i32[0] % v113 == v114 && (_DWORD)v121 == v117)
                                {
                                  if (*(_DWORD *)(v120 + 16 * v115 + 8) >= v117)
                                    LODWORD(v121) = *(_DWORD *)(v108 + 16);
                                  else
                                    LODWORD(v121) = v115;
                                }
                              }
                              if (++v115 == v116)
                              {
                                if (v117 > v121)
                                {
                                  while (1)
                                  {
                                    v121 = *(unsigned int *)(v120 + 16 * v121 + 8);
                                    if (v121 >= v117)
                                      break;
                                    v150 = (uint16x4_t)vceq_s16(*(int16x4_t *)(v120 + 16 * v121), *(int16x4_t *)v100.f32);
                                    v150.i16[3] = v150.i16[2];
                                    if ((vminv_u16(v150) & 0x8000) != 0)
                                    {
                                      v149 = *(_DWORD *)(v120 + 16 * v121 + 12);
                                      if ((v149 & 0x80000000) == 0)
                                        goto LABEL_157;
                                      goto LABEL_100;
                                    }
                                  }
                                }
                                goto LABEL_100;
                              }
                            }
                          }
                          v108 = *(_QWORD *)(a1 + 16);
                          if (*(float *)(a1 + 64) > v107)
                            goto LABEL_105;
                          if (!*(_BYTE *)v108)
                            goto LABEL_210;
                          v125 = *(_QWORD *)(v108 + 48);
                          v126 = *(_QWORD *)(v108 + 64);
                          if (!v125 || v126 == 0)
                            goto LABEL_210;
                          v128 = *(_DWORD *)(v108 + 4);
                          v129 = *(_DWORD *)(v108 + 16);
                          if (v128 >= v129)
                            goto LABEL_210;
                          v227 = v104;
                          v130 = *v105;
                          *(int16x4_t *)v17.f32 = vshr_n_s16(*v105, 3uLL);
                          v99.i32[0] = v17.i16[0];
                          v100.i32[0] = v17.u16[1];
                          v100.i32[1] = v17.u16[2];
                          *(int32x2_t *)v100.f32 = vshr_n_s32(vshl_n_s32(*(int32x2_t *)v100.f32, 0x10uLL), 0x10uLL);
                          v131 = (int32x4_t)vextq_s8(vextq_s8((int8x16_t)v99, (int8x16_t)v99, 4uLL), (int8x16_t)v100, 0xCuLL);
                          v99 = v34[74];
                          v132 = vmulq_s32(v131, (int32x4_t)v99);
                          v133 = *v44;
                          v57 = (float32x4_t)vdupq_laneq_s32(v132, 2);
                          v59 = (float32x4_t)veorq_s8((int8x16_t)vdupq_lane_s32(*(int32x2_t *)v132.i8, 1), (int8x16_t)v57);
                          v100 = (float32x4_t)veorq_s8((int8x16_t)v59, (int8x16_t)v132);
                          v134 = *(_DWORD *)(v108 + 8);
                          v135 = *(_DWORD *)(v108 + 12);
                          v136 = v100.i32[0] % v134;
                          v137 = v135 * (v100.i32[0] % v134);
                          v138 = v137 + v135;
                          v140 = v137 >= v138
                              || v137 >= v129
                              || v138 > v129;
                          v141 = *(_DWORD *)(v108 + 16);
                          v142 = v141;
                          v143 = v141;
                          if (v140)
                            goto LABEL_140;
                          v143 = *(_DWORD *)(v108 + 16);
                          v142 = v143;
                          v141 = v143;
                          while (1)
                          {
                            if ((*(_DWORD *)(v125 + 16 * v137 + 12) & 0x80000000) != 0)
                            {
                              if (v143 == v129)
                                v143 = v137;
                              goto LABEL_162;
                            }
                            v100.i64[0] = *(_QWORD *)(v125 + 16 * v137);
                            *(int16x4_t *)v59.f32 = vceq_s16(*(int16x4_t *)v100.f32, *(int16x4_t *)v17.f32);
                            v59.i16[3] = v59.i16[2];
                            if ((vminv_u16(*(uint16x4_t *)v59.f32) & 0x8000) != 0)
                              break;
                            v59.i32[0] = v100.i16[0];
                            v100.i32[0] = v100.u16[1];
                            v100.i32[1] = v100.u16[2];
                            *(int32x2_t *)v100.f32 = vshr_n_s32(vshl_n_s32(*(int32x2_t *)v100.f32, 0x10uLL), 0x10uLL);
                            v157 = vmulq_s32((int32x4_t)vextq_s8(vextq_s8((int8x16_t)v59, (int8x16_t)v59, 4uLL), (int8x16_t)v100, 0xCuLL), (int32x4_t)v99);
                            v57 = (float32x4_t)vdupq_laneq_s32(v157, 2);
                            v59 = (float32x4_t)veorq_s8((int8x16_t)vdupq_lane_s32(*(int32x2_t *)v157.i8, 1), (int8x16_t)v57);
                            v100 = (float32x4_t)veorq_s8((int8x16_t)v59, (int8x16_t)v157);
                            if (v100.i32[0] % v134 == v136)
                            {
                              if (v141 == v129)
                              {
                                if (*(_DWORD *)(v125 + 16 * v137 + 8) >= v129)
                                  v141 = *(_DWORD *)(v108 + 16);
                                else
                                  v141 = v137;
                              }
                              v142 = v137;
                            }
LABEL_162:
                            if (++v137 == v138)
                              goto LABEL_140;
                          }
                          v141 = *(_DWORD *)(v108 + 16);
                          v142 = v141;
                          v143 = v141;
                          if (v129 > v137)
                          {
                            v149 = *(_DWORD *)(v125 + 16 * v137 + 12);
                            v171 = *v105;
                            if ((v149 & 0x80000000) != 0)
                              goto LABEL_210;
                            goto LABEL_207;
                          }
LABEL_140:
                          if (v143 >= v129 && v142 >= v129 && v141 >= v129)
                            goto LABEL_210;
                          v144 = v143;
                          if (v143 < v129
                            && (v145 = v125 + 16 * v143,
                                v147 = *(_DWORD *)(v145 + 12),
                                v146 = (unsigned int *)(v145 + 12),
                                v147 < 0))
                          {
                            *(_QWORD *)(v125 + 16 * v144) = v17.i64[0];
                            *v146 = v128;
                            v187 = (_QWORD *)(v126 + 4104 * v128);
                            v221 = v20;
                            v225 = v19;
                            v215 = v23;
                            v218 = v21;
                            v209 = v26;
                            v212 = v25;
                            v194 = v30;
                            v203 = v56;
                            v206 = _Q25;
                            v200 = v73;
                            v192 = v130;
                            v190 = v133;
                            v188 = v17;
                            bzero(v187, 0x1000uLL);
                            v133 = v190;
                            v130 = v192;
                            v73 = v200;
                            v56 = v203;
                            v34 = (float32x4_t *)&loc_2393F5000;
                            _Q25 = v206;
                            v26 = v209;
                            v30 = v194;
                            v25 = v212;
                            v23 = v215;
                            v24 = 1.0;
                            v21 = v218;
                            v20 = v221;
                            v19 = v225;
                            v99.i32[3] = v188.i32[3];
                            v187[512] = v188.i64[0];
                          }
                          else
                          {
                            if (v141 < v129)
                            {
                              v142 = v141;
                              do
                              {
                                v148 = *(unsigned int *)(v125 + 16 * v142 + 8);
                                if (v148 >= v129)
                                  goto LABEL_171;
                                *(int16x4_t *)v100.f32 = vceq_s16(*(int16x4_t *)(v125 + 16 * v148), *(int16x4_t *)v17.f32);
                                v100.i16[3] = v100.i16[2];
                                v142 = *(_DWORD *)(v125 + 16 * v142 + 8);
                              }
                              while ((vminv_u16(*(uint16x4_t *)v100.f32) & 0x8000) == 0);
                              v149 = *(_DWORD *)(v125 + 16 * v148 + 12);
                              goto LABEL_205;
                            }
LABEL_171:
                            if (v142 >= v129)
                              goto LABEL_210;
                            v158 = v125 + 16 * v142;
                            v160 = *(_DWORD *)(v158 + 8);
                            v159 = (unsigned int *)(v158 + 8);
                            if (v160 < v129 || (*(_DWORD *)(v125 + 16 * v142 + 12) & 0x80000000) != 0)
                              goto LABEL_210;
                            v186 = v159;
                            v161 = (v135 + v142 - 1) / v135 % v134;
                            v162 = v161;
                            v224 = v161;
                            while (1)
                            {
                              v166 = v162 * v135;
                              v167 = v166 + v135;
                              if (v166 < v129 && v167 < v129)
                              {
                                if (v166 < v167)
                                {
                                  v164 = 0;
                                  v163 = 0;
                                  v169 = (unsigned int *)(v125 + 8 + 16 * v166);
                                  v165 = *(_DWORD *)(v108 + 16);
                                  while (1)
                                  {
                                    if ((v169[1] & 0x80000000) != 0)
                                    {
                                      if (v165 == v129)
                                        v165 = v166;
                                      if (v163)
                                        goto LABEL_178;
                                      v163 = 1;
                                    }
                                    else if (v164)
                                    {
                                      v164 = 1;
                                    }
                                    else if (*v169 >= v129)
                                    {
                                      v164 = 0;
                                    }
                                    else
                                    {
                                      v100.i32[0] = *((__int16 *)v169 - 4);
                                      v100.i32[1] = *((__int16 *)v169 - 3);
                                      v100.i32[2] = *((__int16 *)v169 - 2);
                                      v170 = vmulq_s32((int32x4_t)v100, (int32x4_t)v99);
                                      v57 = (float32x4_t)vdupq_laneq_s32(v170, 2);
                                      v59 = (float32x4_t)veorq_s8((int8x16_t)vdupq_lane_s32(*(int32x2_t *)v170.i8, 1), (int8x16_t)v57);
                                      v100 = (float32x4_t)veorq_s8((int8x16_t)v59, (int8x16_t)v170);
                                      v164 = v100.i32[0] % v134 == v162;
                                    }
                                    v169 += 4;
                                    if (v167 == ++v166)
                                      goto LABEL_176;
                                  }
                                }
                                v163 = 0;
                                v164 = 0;
                                v165 = *(_DWORD *)(v108 + 16);
LABEL_176:
                                if (!v164 || v163 == 0)
                                  v165 = *(_DWORD *)(v108 + 16);
LABEL_178:
                                v161 = v224;
                                if (v165 < v129)
                                  break;
                              }
                              v38 = 0;
                              if (v162 + 1 == v134)
                                v162 = 0;
                              else
                                ++v162;
                              if (v162 == v161)
                                goto LABEL_101;
                            }
                            v182 = v125 + 16 * v165;
                            *(_QWORD *)v182 = v17.i64[0];
                            *(_DWORD *)(v182 + 12) = v128;
                            v184 = (_QWORD *)(v126 + 4104 * v128);
                            v222 = v20;
                            v226 = v19;
                            v216 = v23;
                            v219 = v21;
                            v210 = v26;
                            v213 = v25;
                            v195 = v30;
                            v204 = v56;
                            v207 = _Q25;
                            v201 = v73;
                            v193 = v130;
                            v191 = v133;
                            v189 = v17;
                            v185 = v165;
                            bzero(v184, 0x1000uLL);
                            v133 = v191;
                            v130 = v193;
                            v73 = v201;
                            v56 = v204;
                            v34 = (float32x4_t *)&loc_2393F5000;
                            _Q25 = v207;
                            v26 = v210;
                            v30 = v195;
                            v25 = v213;
                            v23 = v216;
                            v24 = 1.0;
                            v21 = v219;
                            v20 = v222;
                            v19 = v226;
                            v99.i32[3] = v189.i32[3];
                            v184[512] = v189.i64[0];
                            *v186 = v185;
                          }
                          v149 = *(_DWORD *)(v108 + 4);
                          *(_DWORD *)(v108 + 4) = v149 + 1;
LABEL_205:
                          if ((v149 & 0x80000000) != 0)
                          {
LABEL_210:
                            v38 = 0;
                            goto LABEL_101;
                          }
                          v171 = *v105;
LABEL_207:
                          v38 = 0;
                          if (v133 >= 0.0)
                          {
                            v100.f32[0] = fabsf(v133);
                            v172 = 897988541;
                            if (v100.f32[0] > 0.000001)
                            {
                              v173 = vsub_s16(v171, (int16x4_t)(*(_QWORD *)&v130 & 0xFFF8FFF8FFF8FFF8));
                              v174 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 64)
                                   + 4104 * v149
                                   + ((uint64_t)v173.i16[0] << 9)
                                   + ((uint64_t)v173.i32[0] >> 16 << 6)
                                   + 8 * ((uint64_t)(*(_QWORD *)&v173 << 16) >> 48);
                              v175 = fminf(v133, 255.0);
                              LOBYTE(v172) = *(_BYTE *)(v174 + 4);
                              v176 = (float)v172;
                              v177 = fmaxf(fminf(roundf(*(float *)(a1 + 212) * v176), 255.0), v24);
                              v178 = fminf(v175 + v176, 255.0);
                              *(float *)&v179 = (float)((float)((float)(v175 * v107)
                                                              * (float)(v24 - (float)(v176 / 255.0)))
                                                      + (float)(*(float *)v174 * v176))
                                              / v178;
                              *(float *)v174 = *(float *)&v179;
                              LOBYTE(v179) = *(_BYTE *)(v174 + 5);
                              *(float *)&v180 = fminf((float)((float)((float)(v177 * v198) * 255.0)+ (float)(v176 * (float)v179))/ (float)(v177 + v176), 255.0);
                              *(_BYTE *)(v174 + 5) = (int)*(float *)&v180;
                              LOBYTE(v180) = *(_BYTE *)(v174 + 6);
                              *(float *)&v181 = fminf((float)((float)((float)(v177 * v197) * 255.0)+ (float)(v176 * (float)v180))/ (float)(v177 + v176), 255.0);
                              *(_BYTE *)(v174 + 6) = (int)*(float *)&v181;
                              LOBYTE(v181) = *(_BYTE *)(v174 + 7);
                              *(_BYTE *)(v174 + 7) = (int)fminf((float)((float)((float)(v177 * v196) * 255.0)+ (float)(v176 * (float)v181))/ (float)(v177 + v176), 255.0);
                              *(_BYTE *)(v174 + 4) = (int)v178;
                              goto LABEL_159;
                            }
                          }
LABEL_101:
                          ++v97;
                          v104 = v38;
                          if (v97 >= *(unsigned int *)(a1 + 180))
                            goto LABEL_14;
                        }
                      }
                      LODWORD(v38) = 1;
LABEL_14:
                      v12 = v38 | v228;
                    }
                  }
                }
              }
            }
          }
        }
        ++v11;
      }
      while (v11 != v27);
      sub_2393BF174();
      if ((v12 & 1) != 0)
        return 1;
    }
    else
    {
      sub_2393BF174();
    }
    if (qword_256930398 != -1)
      dispatch_once(&qword_256930398, &unk_250AD6050);
    v35 = qword_256930390;
    result = os_log_type_enabled((os_log_t)qword_256930390, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_2393C4DD0(v229, "virtual BOOL oc::voxel_hashing::VoxelIntegratorCPU::integratePointCloud(const simd_float4x4 &, const uint32_t, const common::Point *, const common::PointSupplements *)");
      if (v230 >= 0)
        v183 = v229;
      else
        v183 = (void **)v229[0];
      *(_DWORD *)buf = 136315394;
      v232 = v183;
      v233 = 1026;
      v234 = 210;
      v37 = "%s:%{public}d Couldn't find any existing voxels or create new voxels intersecting the pointcloud";
      goto LABEL_222;
    }
  }
  return result;
}

uint64_t sub_2393BEBF8()
{
  return 0;
}

uint64_t sub_2393BEC00()
{
  return 0;
}

BOOL sub_2393BEC08(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  uint32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  uint32x4_t v16;
  float32x4_t v17;
  float32x2_t v18;
  float32x2_t v19;
  uint32x2_t v20;
  NSObject *v21;
  _BOOL8 result;
  _BYTE *v23;
  const char *v24;
  void *v25;
  NSObject *v27;
  _BYTE *v28;
  _BYTE *v29;
  _BYTE *v30;
  _BYTE *v31;
  _BYTE v32[12];
  __int16 v33;
  int v34;
  char v35;
  _BYTE __p[12];
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v5 = *(float32x4_t *)a1;
  v6 = *(float32x4_t *)(a1 + 16);
  v7 = *(float32x4_t *)(a1 + 32);
  v8 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 16);
  v9 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 32);
  v10 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
  v11 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v10, vabdq_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v5, *(float32x2_t *)v5.f32, 1), v6, *(float32x2_t *)v6.f32, 1), v7, *(float32x2_t *)v7.f32, 1), v8)), (int8x16_t)vcgeq_f32(v10, vabdq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v5, v5.f32[0]), v6, v6.f32[0]),
                                         v7,
                                         v7.f32[0]),
                                       *MEMORY[0x24BDAEDF8]))),
                      (int8x16_t)vcgeq_f32(v10, vabdq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v5, v5, 2), v6, v6, 2), v7, v7, 2), v9)));
  v11.i32[3] = v11.i32[2];
  if ((vminvq_u32(v11) & 0x80000000) == 0)
    goto LABEL_5;
  v12 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v6, 2);
  v13 = (float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)v5, (int32x4_t)v7), (int32x4_t)v12);
  v14 = (float32x4_t)vtrn2q_s32((int32x4_t)v5, (int32x4_t)v6);
  v14.i32[2] = HIDWORD(*(_QWORD *)(a1 + 32));
  v15 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)v5, (int32x4_t)v7), (int32x4_t)v6);
  v16 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v10, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v15, v6.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v6.f32, 1), v14), v12, v13), v8)), (int8x16_t)vcgeq_f32(v10, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v15, v5.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 1),
                                           v14),
                                         (float32x4_t)vdupq_laneq_s32((int32x4_t)v5, 2),
                                         v13),
                                       *MEMORY[0x24BDAEDF8]))),
                      (int8x16_t)vcgeq_f32(v10, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v15, v7.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1), v14), (float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), v13), v9)));
  v16.i32[3] = v16.i32[2];
  if ((vminvq_u32(v16) & 0x80000000) == 0
    || (v17 = vmulq_f32(v5, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v7, (int8x16_t)v7, 0xCuLL), (int8x16_t)v7, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v6, (int32x4_t)v6), (int8x16_t)v6, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v7, (int32x4_t)v7), (int8x16_t)v7, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v6, (int8x16_t)v6, 0xCuLL), (int8x16_t)v6, 8uLL))), fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v17, 2), vaddq_f32(v17, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 1))).f32[0]+ -1.0) > 0.000011)|| (v18 = vabs_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v5, (int8x16_t)v5, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v6, (int8x16_t)v6, 8uLL))), v19 = (float32x2_t)vdup_n_s32(0x38D1B717u),
        v20 = (uint32x2_t)vand_s8((int8x8_t)vcge_f32(v19, vabs_f32(vadd_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v7, (int8x16_t)v7, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(a1 + 48), *(int8x16_t *)(a1 + 48), 8uLL)), (float32x2_t)0xBF80000080000000))), (int8x8_t)vcge_f32(v19, v18)), (vpmin_u32(v20, v20).u32[0] & 0x80000000) == 0))
  {
LABEL_5:
    if (qword_256930398 != -1)
      dispatch_once(&qword_256930398, &unk_250AD6050);
    v21 = qword_256930390;
    result = os_log_type_enabled((os_log_t)qword_256930390, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::areValidInputsToIntegratePointCloud(const simd_float4x4 &, const uint32_t, const common::Point *, const common::PointSupplements *, const uint32_t)");
    if (v40 >= 0)
      v23 = __p;
    else
      v23 = *(_BYTE **)__p;
    *(_DWORD *)v32 = 136315394;
    *(_QWORD *)&v32[4] = v23;
    v33 = 1026;
    v34 = 326;
    v24 = "%s:%{public}d Invalid input to world transform.";
    goto LABEL_13;
  }
  if (!a2)
  {
    if (qword_256930398 != -1)
      dispatch_once(&qword_256930398, &unk_250AD6050);
    v21 = qword_256930390;
    result = os_log_type_enabled((os_log_t)qword_256930390, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::areValidInputsToIntegratePointCloud(const simd_float4x4 &, const uint32_t, const common::Point *, const common::PointSupplements *, const uint32_t)");
    if (v40 >= 0)
      v29 = __p;
    else
      v29 = *(_BYTE **)__p;
    *(_DWORD *)v32 = 136315394;
    *(_QWORD *)&v32[4] = v29;
    v33 = 1026;
    v34 = 332;
    v24 = "%s:%{public}d Input pointcloud is empty.";
    goto LABEL_13;
  }
  if (a2 <= a5)
  {
    if (a3)
    {
      if (a4)
        return 1;
      if (qword_256930398 != -1)
        dispatch_once(&qword_256930398, &unk_250AD6050);
      v21 = qword_256930390;
      result = os_log_type_enabled((os_log_t)qword_256930390, OS_LOG_TYPE_ERROR);
      if (!result)
        return result;
      sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::areValidInputsToIntegratePointCloud(const simd_float4x4 &, const uint32_t, const common::Point *, const common::PointSupplements *, const uint32_t)");
      if (v40 >= 0)
        v31 = __p;
      else
        v31 = *(_BYTE **)__p;
      *(_DWORD *)v32 = 136315394;
      *(_QWORD *)&v32[4] = v31;
      v33 = 1026;
      v34 = 350;
      v24 = "%s:%{public}d Point supplements are invalid.";
    }
    else
    {
      if (qword_256930398 != -1)
        dispatch_once(&qword_256930398, &unk_250AD6050);
      v21 = qword_256930390;
      result = os_log_type_enabled((os_log_t)qword_256930390, OS_LOG_TYPE_ERROR);
      if (!result)
        return result;
      sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::areValidInputsToIntegratePointCloud(const simd_float4x4 &, const uint32_t, const common::Point *, const common::PointSupplements *, const uint32_t)");
      if (v40 >= 0)
        v30 = __p;
      else
        v30 = *(_BYTE **)__p;
      *(_DWORD *)v32 = 136315394;
      *(_QWORD *)&v32[4] = v30;
      v33 = 1026;
      v34 = 344;
      v24 = "%s:%{public}d Pointcloud is invalid.";
    }
LABEL_13:
    _os_log_error_impl(&dword_239388000, v21, OS_LOG_TYPE_ERROR, v24, v32, 0x12u);
    if ((SHIBYTE(v40) & 0x80000000) == 0)
      return 0;
    v25 = *(void **)__p;
LABEL_15:
    operator delete(v25);
    return 0;
  }
  if (qword_256930398 != -1)
    dispatch_once(&qword_256930398, &unk_250AD6050);
  v27 = qword_256930390;
  result = os_log_type_enabled((os_log_t)qword_256930390, OS_LOG_TYPE_ERROR);
  if (result)
  {
    sub_2393C4DD0(v32, "BOOL oc::voxel_hashing::areValidInputsToIntegratePointCloud(const simd_float4x4 &, const uint32_t, const common::Point *, const common::PointSupplements *, const uint32_t)");
    if (v35 >= 0)
      v28 = v32;
    else
      v28 = *(_BYTE **)v32;
    *(_DWORD *)__p = 136315650;
    *(_QWORD *)&__p[4] = v28;
    v37 = 1026;
    v38 = 338;
    v39 = 1026;
    v40 = a5;
    _os_log_error_impl(&dword_239388000, v27, OS_LOG_TYPE_ERROR, "%s:%{public}d Input pointcloud is greater than the max supported size %{public}u.", __p, 0x18u);
    if ((v35 & 0x80000000) == 0)
      return 0;
    v25 = *(void **)v32;
    goto LABEL_15;
  }
  return result;
}

void sub_2393BF174()
{
  uint64_t v0;
  int8x16_t v1;
  int8x16_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD **v5;
  uint64_t *v6;
  int32x4_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  uint64_t v16;
  int16x4_t v17;
  int32x4_t v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  BOOL v25;
  uint64_t v27;
  int32x2_t v28;
  int32x4_t v29;
  uint64_t v31;
  _DWORD *v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unsigned int v37;
  _QWORD *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int16x4_t v42;
  int32x4_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v54;
  uint64_t v55;
  int32x2_t v56;
  int32x4_t v57;
  uint16x4_t v59;
  void *v60;
  void *v61;
  unint64_t v62;
  unint64_t v63;
  uint8x8_t v64;
  unint64_t v65;
  uint64_t v66;
  void **v67;
  _QWORD *v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t i;
  _BYTE __dst[4104];

  v0 = MEMORY[0x24BDAC7A8]();
  if (!*(_BYTE *)(v0 + 8))
    return;
  v3 = (_QWORD *)v0;
  v4 = *(_QWORD *)(v0 + 16);
  if (!v4)
    return;
  v5 = (_QWORD **)(v0 + 232);
  v6 = *(uint64_t **)(v0 + 232);
  if (!v6)
    goto LABEL_132;
  v7 = (int32x4_t)xmmword_2393F54A0;
  do
  {
    while (1)
    {
      v8 = *((_DWORD *)v6 + 4);
      if ((v8 & 0x80000000) == 0 && v8 < *(_DWORD *)(v4 + 4))
      {
        v9 = 0;
        LOBYTE(v10) = 0;
        v11 = *(_QWORD *)(v4 + 64);
        v12 = v11 + 4104 * v8;
        v13 = 3.4028e38;
        do
        {
          v10 = v10;
          if (v10 <= *(unsigned __int8 *)(v12 + v9 + 4))
            v10 = *(unsigned __int8 *)(v12 + v9 + 4);
          if (*(_BYTE *)(v12 + v9 + 4))
          {
            v14 = fabsf(*(float *)(v12 + v9));
            if (v14 < v13)
              v13 = v14;
          }
          v9 += 8;
        }
        while (v9 != 4096);
        if (!v10 || v13 > 2.0)
          break;
      }
      v6 = (uint64_t *)*v6;
      if (!v6)
        goto LABEL_132;
    }
    if (!*(_BYTE *)v4)
      goto LABEL_51;
    v16 = *(_QWORD *)(v4 + 48);
    if (!v16)
      goto LABEL_51;
    v17 = *(int16x4_t *)(v11 + 4104 * v8 + 4096);
    v1.i32[0] = v17.i16[0];
    v2.i32[0] = v17.u16[1];
    v2.i32[1] = v17.u16[2];
    *(int32x2_t *)v2.i8 = vshr_n_s32(vshl_n_s32(*(int32x2_t *)v2.i8, 0x10uLL), 0x10uLL);
    v18 = vmulq_s32((int32x4_t)vextq_s8(vextq_s8(v1, v1, 4uLL), v2, 0xCuLL), v7);
    v2 = veorq_s8((int8x16_t)vdupq_lane_s32(*(int32x2_t *)v18.i8, 1), (int8x16_t)vdupq_laneq_s32(v18, 2));
    v1 = veorq_s8(v2, (int8x16_t)v18);
    v20 = *(_DWORD *)(v4 + 8);
    v19 = *(_DWORD *)(v4 + 12);
    v21 = v1.i32[0] % v20;
    v22 = v19 * (v1.i32[0] % v20);
    v23 = (v22 + v19);
    v24 = *(_DWORD *)(v4 + 16);
    v25 = v22 >= v23 || v22 >= v24;
    if (v25 || v23 > v24)
      goto LABEL_51;
    LODWORD(v27) = *(_DWORD *)(v4 + 16);
    while ((*(_DWORD *)(v16 + 16 * v22 + 12) & 0x80000000) != 0)
    {
LABEL_31:
      if (++v22 == v23)
      {
        if (v24 > v27)
        {
          while (1)
          {
            v31 = v16 + 16 * v27;
            v33 = *(_DWORD *)(v31 + 8);
            v32 = (_DWORD *)(v31 + 8);
            v27 = v33;
            if (v33 >= v24)
              break;
            *(int16x4_t *)v1.i8 = vceq_s16(*(int16x4_t *)(v16 + 16 * v27), v17);
            v1.i16[3] = v1.i16[2];
            if ((vminv_u16(*(uint16x4_t *)v1.i8) & 0x8000) != 0)
            {
              *v32 = *(_DWORD *)(v16 + 16 * v27 + 8);
              goto LABEL_50;
            }
          }
        }
        goto LABEL_51;
      }
    }
    v1.i64[0] = *(_QWORD *)(v16 + 16 * v22);
    *(int16x4_t *)v2.i8 = vceq_s16(*(int16x4_t *)v1.i8, v17);
    v2.i16[3] = v2.i16[2];
    if ((vminv_u16(*(uint16x4_t *)v2.i8) & 0x8000) == 0)
    {
      v2.i32[0] = v1.i16[0];
      v28.i32[0] = v1.u16[1];
      v28.i32[1] = v1.u16[2];
      *(int32x2_t *)v1.i8 = vshr_n_s32(vshl_n_s32(v28, 0x10uLL), 0x10uLL);
      v29 = vmulq_s32((int32x4_t)vextq_s8(vextq_s8(v2, v2, 4uLL), v1, 0xCuLL), v7);
      v2 = veorq_s8((int8x16_t)vdupq_lane_s32(*(int32x2_t *)v29.i8, 1), (int8x16_t)vdupq_laneq_s32(v29, 2));
      v1 = veorq_s8(v2, (int8x16_t)v29);
      if (v1.i32[0] % v20 == v21 && (_DWORD)v27 == v24)
      {
        if (*(_DWORD *)(v16 + 16 * v22 + 8) >= v24)
          LODWORD(v27) = *(_DWORD *)(v4 + 16);
        else
          LODWORD(v27) = v22;
      }
      goto LABEL_31;
    }
    if (v24 > v22 && (*(_DWORD *)(v16 + 16 * v22 + 12) & 0x80000000) == 0)
    {
      v27 = v22;
      v34 = v16 + 16 * v22;
      v37 = *(_DWORD *)(v34 + 8);
      v36 = (_QWORD *)(v34 + 8);
      v35 = v37;
      if (v37 < v24)
      {
        v38 = (_QWORD *)(v16 + 16 * v35);
        v1.i64[0] = v38[1];
        *(_QWORD *)(v16 + 16 * v27) = *v38;
        *v36 = v1.i64[0];
        v24 = *(_DWORD *)(v4 + 16);
        v4 = v3[2];
        v27 = v35;
      }
LABEL_50:
      v39 = v16 + 16 * v27;
      *(_DWORD *)(v39 + 8) = v24;
      *(_DWORD *)(v39 + 12) = -1;
    }
LABEL_51:
    v40 = *(_DWORD *)(v4 + 4) - 1;
    if (v8 == v40)
    {
      v6 = (uint64_t *)*v6;
      goto LABEL_103;
    }
    if (*(_BYTE *)v4)
    {
      v41 = *(_QWORD *)(v4 + 64);
      v42 = *(int16x4_t *)(v41 + 4104 * v40 + 4096);
      v1.i32[0] = v42.i16[0];
      v2.i32[0] = v42.u16[1];
      v2.i32[1] = v42.u16[2];
      *(int32x2_t *)v2.i8 = vshr_n_s32(vshl_n_s32(*(int32x2_t *)v2.i8, 0x10uLL), 0x10uLL);
      v43 = vmulq_s32((int32x4_t)vextq_s8(vextq_s8(v1, v1, 4uLL), v2, 0xCuLL), v7);
      v44 = veorq_s8((int8x16_t)vdupq_lane_s32(*(int32x2_t *)v43.i8, 1), (int8x16_t)vdupq_laneq_s32(v43, 2));
      v45 = veorq_s8(v44, (int8x16_t)v43);
      v47 = *(_DWORD *)(v4 + 8);
      v46 = *(_DWORD *)(v4 + 12);
      v48 = v45.i32[0] % v47;
      v49 = v46 * (v45.i32[0] % v47);
      v50 = (v49 + v46);
      v51 = *(_DWORD *)(v4 + 16);
      if (v49 < v50 && v49 < v51 && v50 <= v51)
      {
        v54 = *(_QWORD *)(v4 + 48);
        LODWORD(v55) = v51;
        do
        {
          if ((*(_DWORD *)(v54 + 16 * v49 + 12) & 0x80000000) == 0)
          {
            v45.i64[0] = *(_QWORD *)(v54 + 16 * v49);
            *(int16x4_t *)v44.i8 = vceq_s16(*(int16x4_t *)v45.i8, v42);
            v44.i16[3] = v44.i16[2];
            if ((vminv_u16(*(uint16x4_t *)v44.i8) & 0x8000) != 0)
            {
              if (v51 > v49 && (*(_DWORD *)(v54 + 16 * v49 + 12) & 0x80000000) == 0)
                v51 = v49;
              goto LABEL_81;
            }
            v44.i32[0] = v45.i16[0];
            v56.i32[0] = v45.u16[1];
            v56.i32[1] = v45.u16[2];
            *(int32x2_t *)v45.i8 = vshr_n_s32(vshl_n_s32(v56, 0x10uLL), 0x10uLL);
            v57 = vmulq_s32((int32x4_t)vextq_s8(vextq_s8(v44, v44, 4uLL), v45, 0xCuLL), v7);
            v44 = veorq_s8((int8x16_t)vdupq_lane_s32(*(int32x2_t *)v57.i8, 1), (int8x16_t)vdupq_laneq_s32(v57, 2));
            v45 = veorq_s8(v44, (int8x16_t)v57);
            if (v45.i32[0] % v47 == v48 && (_DWORD)v55 == v51)
            {
              if (*(_DWORD *)(v54 + 16 * v49 + 8) >= v51)
                LODWORD(v55) = v51;
              else
                LODWORD(v55) = v49;
            }
          }
          ++v49;
        }
        while (v49 != v50);
        if (v51 > v55)
        {
          while (1)
          {
            v55 = *(unsigned int *)(v54 + 16 * v55 + 8);
            if (v55 >= v51)
              break;
            v59 = (uint16x4_t)vceq_s16(*(int16x4_t *)(v54 + 16 * v55), v42);
            v59.i16[3] = v59.i16[2];
            if ((vminv_u16(v59) & 0x8000) != 0)
            {
              v51 = v55;
              break;
            }
          }
        }
      }
    }
    else
    {
      v51 = *(_DWORD *)(v4 + 16);
      v41 = *(_QWORD *)(v4 + 64);
    }
LABEL_81:
    v60 = (void *)(v41 + 4104 * v8);
    v61 = (void *)(v41 + 4104 * v40);
    memcpy(__dst, v60, sizeof(__dst));
    memcpy(v60, v61, 0x1008uLL);
    memcpy(v61, __dst, 0x1008uLL);
    v4 = v3[2];
    *(_DWORD *)(*(_QWORD *)(v4 + 48) + 16 * v51 + 12) = v8;
    v62 = v3[28];
    if (!v62)
      goto LABEL_101;
    v63 = v40;
    v64 = (uint8x8_t)vcnt_s8((int8x8_t)v62);
    v64.i16[0] = vaddlv_u8(v64);
    if (v64.u32[0] > 1uLL)
    {
      v65 = v40;
      if (v62 <= v40)
        v65 = v40 % v62;
    }
    else
    {
      v65 = (v62 - 1) & v40;
    }
    v66 = v3[27];
    v67 = *(void ***)(v66 + 8 * v65);
    if (!v67 || (v68 = *v67) == 0)
    {
LABEL_101:
      v6 = (uint64_t *)*v6;
      goto LABEL_102;
    }
    v69 = v62 - 1;
    if (v64.u32[0] < 2uLL)
    {
      while (1)
      {
        v70 = v68[1];
        if (v70 == v40)
        {
          if (*((_DWORD *)v68 + 4) == v40)
            goto LABEL_105;
        }
        else if ((v70 & v69) != v65)
        {
          goto LABEL_101;
        }
        v68 = (_QWORD *)*v68;
        if (!v68)
          goto LABEL_101;
      }
    }
    while (2)
    {
      v71 = v68[1];
      if (v71 != v40)
      {
        if (v71 >= v62)
          v71 %= v62;
        if (v71 != v65)
          goto LABEL_101;
        goto LABEL_96;
      }
      if (*((_DWORD *)v68 + 4) != v40)
      {
LABEL_96:
        v68 = (_QWORD *)*v68;
        if (!v68)
          goto LABEL_101;
        continue;
      }
      break;
    }
LABEL_105:
    if (v64.u32[0] > 1uLL)
    {
      if (v62 <= v40)
        v63 = v40 % v62;
    }
    else
    {
      v63 = v69 & v40;
    }
    v72 = *(_QWORD **)(v66 + 8 * v63);
    do
    {
      v73 = v72;
      v72 = (_QWORD *)*v72;
    }
    while (v72 != v68);
    if (v73 == v5)
      goto LABEL_122;
    v74 = v73[1];
    if (v64.u32[0] > 1uLL)
    {
      if (v74 >= v62)
        v74 %= v62;
    }
    else
    {
      v74 &= v69;
    }
    if (v74 != v63)
    {
LABEL_122:
      if (!*v68)
        goto LABEL_123;
      v75 = *(_QWORD *)(*v68 + 8);
      if (v64.u32[0] > 1uLL)
      {
        if (v75 >= v62)
          v75 %= v62;
      }
      else
      {
        v75 &= v69;
      }
      if (v75 != v63)
LABEL_123:
        *(_QWORD *)(v66 + 8 * v63) = 0;
    }
    v76 = *v68;
    if (*v68)
    {
      v77 = *(_QWORD *)(v76 + 8);
      if (v64.u32[0] > 1uLL)
      {
        if (v77 >= v62)
          v77 %= v62;
      }
      else
      {
        v77 &= v69;
      }
      if (v77 != v63)
      {
        *(_QWORD *)(v3[27] + 8 * v77) = v73;
        v76 = *v68;
      }
    }
    *v73 = v76;
    --v3[30];
    operator delete(v68);
    v4 = v3[2];
LABEL_102:
    v7 = (int32x4_t)xmmword_2393F54A0;
LABEL_103:
    --*(_DWORD *)(v4 + 4);
  }
  while (v6);
LABEL_132:
  if (v3[30])
  {
    v78 = *v5;
    if (*v5)
    {
      do
      {
        v79 = (_QWORD *)*v78;
        operator delete(v78);
        v78 = v79;
      }
      while (v79);
    }
    v3[29] = 0;
    v80 = v3[28];
    if (v80)
    {
      for (i = 0; i != v80; ++i)
        *(_QWORD *)(v3[27] + 8 * i) = 0;
    }
    v3[30] = 0;
  }
}

void sub_2393BF85C(float *a1, int a2, int a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  size_t v25;
  size_t v26;
  size_t v27;
  _QWORD *i;
  size_t v29;
  uint64_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  size_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD *v41;

  v6 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2)
                return;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (uint64_t *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = operator new(0x18uLL);
  *v13 = 0;
  v13[1] = v6;
  *((_DWORD *)v13 + 4) = a3;
  v14 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v15 = a1[8];
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = v18;
    else
      prime = v17;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *((_QWORD *)a1 + 1);
    }
    if (prime <= v7)
    {
      if (prime >= v7)
        goto LABEL_59;
      v31 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v7 < 3 || (v32 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        v31 = std::__next_prime(v31);
      }
      else
      {
        v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2)
          v31 = v33;
      }
      if (prime <= v31)
        prime = v31;
      if (prime >= v7)
      {
        v7 = *((_QWORD *)a1 + 1);
LABEL_59:
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v7 <= v6)
            v3 = v6 % v7;
          else
            v3 = v6;
        }
        else
        {
          v3 = (v7 - 1) & v6;
        }
        goto LABEL_72;
      }
      if (!prime)
      {
        v41 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v41)
          operator delete(v41);
        v7 = 0;
        *((_QWORD *)a1 + 1) = 0;
        goto LABEL_59;
      }
    }
    if (prime >> 61)
      sub_23938C4B8();
    v20 = operator new(8 * prime);
    v21 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v20;
    if (v21)
      operator delete(v21);
    v22 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22++) = 0;
    while (prime != v22);
    v24 = (uint64_t *)(a1 + 4);
    v23 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v23)
    {
LABEL_58:
      v7 = prime;
      goto LABEL_59;
    }
    v25 = v23[1];
    v26 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v27 = v25 & v26;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v24;
      for (i = (_QWORD *)*v23; *v23; i = (_QWORD *)*v23)
      {
        v29 = i[1] & v26;
        if (v29 == v27)
        {
          v23 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v29))
        {
          *v23 = *i;
          v30 = 8 * v29;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v30);
          **(_QWORD **)(*(_QWORD *)a1 + v30) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v29) = v23;
          v23 = i;
          v27 = v29;
        }
      }
      goto LABEL_58;
    }
    if (v25 >= prime)
      v25 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v24;
    v34 = (_QWORD *)*v23;
    if (!*v23)
      goto LABEL_58;
    while (1)
    {
      v36 = v34[1];
      if (v36 >= prime)
        v36 %= prime;
      if (v36 != v25)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v36))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v36) = v23;
          goto LABEL_63;
        }
        *v23 = *v34;
        v35 = 8 * v36;
        *v34 = **(_QWORD **)(*(_QWORD *)a1 + v35);
        **(_QWORD **)(*(_QWORD *)a1 + v35) = v34;
        v34 = v23;
      }
      v36 = v25;
LABEL_63:
      v23 = v34;
      v34 = (_QWORD *)*v34;
      v25 = v36;
      if (!v34)
        goto LABEL_58;
    }
  }
LABEL_72:
  v37 = *(_QWORD **)a1;
  v38 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v38)
  {
    *v13 = *v38;
LABEL_80:
    *v38 = v13;
    goto LABEL_81;
  }
  v39 = *((_QWORD *)a1 + 2);
  *v13 = v39;
  *((_QWORD *)a1 + 2) = v13;
  v37[v3] = a1 + 4;
  if (v39)
  {
    v40 = *(_QWORD *)(v39 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v40 >= v7)
        v40 %= v7;
    }
    else
    {
      v40 &= v7 - 1;
    }
    v38 = (_QWORD *)(*(_QWORD *)a1 + 8 * v40);
    goto LABEL_80;
  }
LABEL_81:
  ++*((_QWORD *)a1 + 3);
}

os_log_t sub_2393BFC98()
{
  os_log_t result;

  result = os_log_create("com.apple.CoreOCModules", "VoxelHashing");
  qword_256930390 = (uint64_t)result;
  return result;
}

BOOL sub_2393BFCC4(uint64_t a1)
{
  float v1;
  BOOL v2;
  int v4;
  float v5;
  float v6;
  float v7;
  _BOOL4 v8;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  uint32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  uint32x4_t v24;
  float32x4_t v25;
  float32x2_t v26;
  float32x2_t v27;
  uint32x2_t v28;
  float v29;

  v1 = *(float *)(a1 + 8);
  v2 = v1 <= 0.0 || v1 <= *(float *)(a1 + 12);
  if (*(_DWORD *)a1 == 5)
    return 0;
  v4 = *(_DWORD *)(a1 + 4);
  if (v4 == 2)
    v2 = 1;
  if (v2)
    return 0;
  v5 = *(float *)(a1 + 16);
  v6 = *(float *)(a1 + 20);
  v7 = fabsf(v6);
  v8 = v5 > 0.0;
  if (fabsf(v5) <= 0.000001)
    v8 = 1;
  if (v7 > 0.000001 && v6 < 0.0 || v5 <= v6 || !v8)
    return 0;
  v12 = 0;
  if (*(float *)(a1 + 32) > 0.0 && *(float *)(a1 + 36) > 0.0 && *(float *)(a1 + 40) > 0.0)
  {
    v13 = *(float32x4_t *)(a1 + 48);
    v14 = *(float32x4_t *)(a1 + 64);
    v15 = *(float32x4_t *)(a1 + 80);
    v16 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 16);
    v17 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 32);
    v18 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
    v19 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v18, vabdq_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v13, *(float32x2_t *)v13.f32, 1), v14, *(float32x2_t *)v14.f32, 1), v15, *(float32x2_t *)v15.f32, 1), v16)), (int8x16_t)vcgeq_f32(v18, vabdq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v13, v13.f32[0]), v14, v14.f32[0]),
                                           v15,
                                           v15.f32[0]),
                                         *MEMORY[0x24BDAEDF8]))),
                        (int8x16_t)vcgeq_f32(v18, vabdq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v13, v13, 2), v14, v14, 2), v15, v15, 2), v17)));
    v19.i32[3] = v19.i32[2];
    if ((vminvq_u32(v19) & 0x80000000) == 0)
      return 0;
    v20 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 2);
    v21 = (float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)v13, (int32x4_t)v15), (int32x4_t)v20);
    v22 = (float32x4_t)vtrn2q_s32((int32x4_t)v13, (int32x4_t)v14);
    v22.i32[2] = HIDWORD(*(_QWORD *)(a1 + 80));
    v23 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)v13, (int32x4_t)v15), (int32x4_t)v14);
    v24 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v18, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v23, v14.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.f32, 1), v22), v20, v21), v16)), (int8x16_t)vcgeq_f32(v18, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v23, v13.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1),
                                             v22),
                                           (float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2),
                                           v21),
                                         *MEMORY[0x24BDAEDF8]))),
                        (int8x16_t)vcgeq_f32(v18, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v23, v15.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 1), v22), (float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 2), v21), v17)));
    v24.i32[3] = v24.i32[2];
    if ((vminvq_u32(v24) & 0x80000000) == 0)
      return 0;
    v25 = vmulq_f32(v13, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v15, (int8x16_t)v15, 0xCuLL), (int8x16_t)v15, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v14, (int32x4_t)v14), (int8x16_t)v14, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v15, (int32x4_t)v15), (int8x16_t)v15, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v14, (int8x16_t)v14, 0xCuLL), (int8x16_t)v14, 8uLL)));
    if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), vaddq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1))).f32[0]+ -1.0) > 0.000011)return 0;
    v26 = vabs_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL)));
    v27 = (float32x2_t)vdup_n_s32(0x38D1B717u);
    v28 = (uint32x2_t)vand_s8((int8x8_t)vcge_f32(v27, vabs_f32(vadd_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(a1 + 96), *(int8x16_t *)(a1 + 96), 8uLL)), (float32x2_t)0xBF80000080000000))), (int8x8_t)vcge_f32(v27, v26));
    if ((vpmin_u32(v28, v28).u32[0] & 0x80000000) == 0)
      return 0;
    if (*(float *)(a1 + 112) < 0.0001)
      return 0;
    v12 = 0;
    if (*(float *)(a1 + 116) >= 1.0)
    {
      v29 = *(float *)(a1 + 120);
      if (v29 >= 0.0 && v29 <= 1.0)
      {
        v12 = *(unsigned __int8 *)(a1 + 126);
        if (*(_BYTE *)(a1 + 126))
          return !*(_BYTE *)(a1 + 127) || v4 == 1;
      }
    }
  }
  return v12;
}

uint64_t sub_2393BFFB8(uint64_t a1)
{
  void *v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD v19[2];
  int v20;

  v3 = (void **)(a1 + 184);
  v2 = *(void **)(a1 + 184);
  v3[1] = 0;
  v3[2] = 0;
  *v3 = 0;
  if (v2)
    operator delete(v2);
  v4 = *(_QWORD **)(a1 + 216);
  v5 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  v18 = v4;
  v6 = *(_QWORD **)(a1 + 232);
  v7 = *(_QWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  v19[0] = v6;
  v19[1] = v7;
  v20 = *(_DWORD *)(a1 + 248);
  *(_DWORD *)(a1 + 248) = 1065353216;
  if (v7)
  {
    v8 = v6[1];
    if ((v5 & (v5 - 1)) != 0)
    {
      if (v8 >= v5)
        v8 %= v5;
      v4[v8] = v19;
    }
    else
    {
      v4[v8 & (v5 - 1)] = v19;
    }
  }
  else if (!v6)
  {
    if (!v4)
      goto LABEL_9;
    goto LABEL_8;
  }
  do
  {
    v17 = (_QWORD *)*v6;
    operator delete(v6);
    v6 = v17;
  }
  while (v17);
  v4 = v18;
  if (v18)
LABEL_8:
    operator delete(v4);
LABEL_9:
  v9 = *(_QWORD **)(a1 + 232);
  if (v9)
  {
    do
    {
      v10 = (_QWORD *)*v9;
      operator delete(v9);
      v9 = v10;
    }
    while (v10);
  }
  v11 = *(void **)(a1 + 216);
  *(_QWORD *)(a1 + 216) = 0;
  if (v11)
    operator delete(v11);
  v12 = *v3;
  if (*v3)
  {
    *(_QWORD *)(a1 + 192) = v12;
    operator delete(v12);
  }
  v13 = *(std::__shared_weak_count **)(a1 + 24);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return a1;
}

os_log_t sub_2393C0108()
{
  os_log_t result;

  result = os_log_create("com.apple.CoreOCModules", "General");
  qword_2569303A0 = (uint64_t)result;
  return result;
}

uint64_t sub_2393C0134(uint64_t a1)
{
  id v2;
  const char *v3;
  void *v4;
  const char *v5;
  const char *v6;
  const char *v7;
  const char *v8;
  const char *v9;
  id v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  void *v15;
  const char *v16;
  const char *v17;
  id v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  void *v23;
  const char *v24;
  id v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  void *v30;
  const char *v31;
  const char *v32;
  id v33;
  const char *v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  void *v38;
  const char *v39;
  const char *v40;
  const char *v41;
  id v42;
  const char *v43;
  uint64_t v44;
  void *v45;
  const char *v46;
  void *v47;
  uint64_t v48;

  v2 = objc_alloc_init(MEMORY[0x24BDDD740]);
  v4 = v2;
  if (!v2)
    goto LABEL_15;
  objc_msgSend_setTextureType_(v2, v3, 2);
  objc_msgSend_setPixelFormat_(v4, v5, 53);
  objc_msgSend_setWidth_(v4, v6, *(_QWORD *)(a1 + 208));
  objc_msgSend_setHeight_(v4, v7, *(_QWORD *)(a1 + 216));
  objc_msgSend_setUsage_(v4, v8, 5);
  objc_msgSend_setStorageMode_(v4, v9, 2);
  v10 = **(id **)a1;
  v12 = objc_msgSend_newTextureWithDescriptor_(v10, v11, (uint64_t)v4);
  v13 = *(void **)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v12;

  v15 = *(void **)(a1 + 144);
  if (!v15)
    goto LABEL_15;
  objc_msgSend_setLabel_(v15, v14, (uint64_t)CFSTR("SurfaceVoxelVisibleIndexTexture"));
  if ((*(_DWORD *)(a1 + 192) - 1) <= 2)
  {
    objc_msgSend_setPixelFormat_(v4, v16, 125);
    objc_msgSend_setUsage_(v4, v17, 7);
    v18 = **(id **)a1;
    v20 = objc_msgSend_newTextureWithDescriptor_(v18, v19, (uint64_t)v4);
    v21 = *(void **)(a1 + 152);
    *(_QWORD *)(a1 + 152) = v20;

    v23 = *(void **)(a1 + 152);
    if (!v23)
      goto LABEL_15;
    objc_msgSend_setLabel_(v23, v22, (uint64_t)CFSTR("SurfaceVoxelNormalTexture"));
    objc_msgSend_setUsage_(v4, v24, 3);
    v25 = **(id **)a1;
    v27 = objc_msgSend_newTextureWithDescriptor_(v25, v26, (uint64_t)v4);
    v28 = *(void **)(a1 + 160);
    *(_QWORD *)(a1 + 160) = v27;

    v30 = *(void **)(a1 + 160);
    if (!v30)
      goto LABEL_15;
    objc_msgSend_setLabel_(v30, v29, (uint64_t)CFSTR("SurfaceVoxelSmoothedNormalTexture"));
  }
  objc_msgSend_setPixelFormat_(v4, v16, 252);
  objc_msgSend_setUsage_(v4, v31, 4);
  if (*(_BYTE *)(*(_QWORD *)a1 + 24))
    objc_msgSend_setStorageMode_(v4, v32, 3);
  else
    objc_msgSend_setStorageMode_(v4, v32, 2);
  v33 = **(id **)a1;
  v35 = objc_msgSend_newTextureWithDescriptor_(v33, v34, (uint64_t)v4);
  v36 = *(void **)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v35;

  v38 = *(void **)(a1 + 168);
  if (!v38)
    goto LABEL_15;
  objc_msgSend_setLabel_(v38, v37, (uint64_t)CFSTR("SurfaceVoxelDepthTexture"));
  if (*(_BYTE *)(*(_QWORD *)a1 + 24))
  {
    objc_msgSend_setPixelFormat_(v4, v39, 53);
    objc_msgSend_setUsage_(v4, v40, 5);
    objc_msgSend_setStorageMode_(v4, v41, 3);
    v42 = **(id **)a1;
    v44 = objc_msgSend_newTextureWithDescriptor_(v42, v43, (uint64_t)v4);
    v45 = *(void **)(a1 + 336);
    *(_QWORD *)(a1 + 336) = v44;

    v47 = *(void **)(a1 + 336);
    if (v47)
    {
      objc_msgSend_setLabel_(v47, v46, (uint64_t)CFSTR("tmpSurfaceVoxelVisibleIndexTexture"));
      goto LABEL_14;
    }
LABEL_15:
    v48 = 0;
    goto LABEL_16;
  }
LABEL_14:
  v48 = 1;
LABEL_16:

  return v48;
}

void sub_2393C038C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL sub_2393C03B8(unsigned int *a1, const char *a2)
{
  uint64_t v2;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  void *v7;
  id v8;
  const char *v9;
  uint64_t v10;
  id v11;
  void *v12;
  id v13;
  unint64_t v14;
  const char *v15;
  const char *v16;
  const char *v17;
  id v18;
  const char *v19;
  uint64_t v20;
  id v21;
  id v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  void *v27;
  id v28;
  const char *v29;
  uint64_t v30;
  id v31;
  const char *v32;
  uint64_t v33;
  id v34;
  void *v35;
  _BOOL8 v36;
  const char *v37;
  id v38;
  const char *v39;
  void *v40;
  const char *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  void *v47;
  const char *v48;
  void *v49;
  const char *v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  void *v56;
  const char *v57;
  void *v58;
  const char *v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  const char *v63;
  id v64;
  const char *v65;
  uint64_t v66;
  id v67;
  void *v68;
  const char *v69;
  id *v70;
  id v71;
  unint64_t v72;
  const char *v73;
  const char *v74;
  const char *v75;
  id v76;
  const char *v77;
  id v78;
  const char *v79;
  void *v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  const char *v84;
  uint64_t v85;
  void *v86;
  const char *v87;
  void *v88;
  const char *v89;
  const char *v90;
  id v91;
  const char *v92;
  uint64_t v93;
  id v94;
  void *v95;
  const char *v96;
  void *v97;
  const char *v98;
  id v99;
  const char *v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  const char *v104;
  id v105;
  const char *v106;
  uint64_t v107;
  id v108;
  void *v109;
  void *v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  id v117;
  id v118;
  id v119;
  id v120;
  float v121;
  float v122;
  id v123;
  id v124;
  id v125;
  id v126;
  float v127;
  float v128;
  id v129;

  v2 = a1[48];
  if (v2 <= 4)
  {
    v4 = v2;
    v5 = off_250AD6150[v4];
    v6 = off_250AD6178[v4];
    v7 = (void *)objc_msgSend_newFunctionWithName_(*(void **)(*(_QWORD *)a1 + 16), a2, (uint64_t)off_250AD61A0[v4]);
    v8 = **(id **)a1;
    v129 = 0;
    v10 = objc_msgSend_newComputePipelineStateWithFunction_error_(v8, v9, (uint64_t)v7, &v129);
    v11 = v129;
    v12 = (void *)*((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v10;

    if (!*((_QWORD *)a1 + 1))
    {
      v36 = 0;
LABEL_29:

      return v36;
    }
    v13 = objc_alloc_init(MEMORY[0x24BDDD5A0]);
    v14 = *((_QWORD *)a1 + 26);
    v127 = (float)*((unint64_t *)a1 + 27);
    v128 = (float)v14;
    objc_msgSend_setConstantValue_type_atIndex_(v13, v15, (uint64_t)&v128, 3, 0);
    objc_msgSend_setConstantValue_type_atIndex_(v13, v16, (uint64_t)&v127, 3, 1);
    objc_msgSend_setConstantValue_type_atIndex_(v13, v17, (uint64_t)(a1 + 76), 3, 2);
    v18 = *(id *)(*(_QWORD *)a1 + 16);
    v126 = v11;
    v20 = objc_msgSend_newFunctionWithName_constantValues_error_(v18, v19, (uint64_t)CFSTR("coverageFetchGOMDVisibleMeshVertex"), v13, &v126);
    v21 = v126;

    v22 = **(id **)a1;
    v125 = v21;
    v116 = (void *)v20;
    v24 = objc_msgSend_newComputePipelineStateWithFunction_error_(v22, v23, v20, &v125);
    v11 = v125;

    v25 = (void *)*((_QWORD *)a1 + 2);
    *((_QWORD *)a1 + 2) = v24;

    if (*((_QWORD *)a1 + 2))
    {
      v27 = v116;
      if (a1[48] != 4)
      {
        v34 = v11;
LABEL_11:
        v115 = (void *)objc_msgSend_newFunctionWithName_(*(void **)(*(_QWORD *)a1 + 16), v26, (uint64_t)v6);
        v114 = (void *)objc_msgSend_newFunctionWithName_(*(void **)(*(_QWORD *)a1 + 16), v37, (uint64_t)v5);
        v38 = objc_alloc_init(MEMORY[0x24BDDD6B8]);
        v40 = v38;
        if (v38)
        {
          objc_msgSend_setVertexFunction_(v38, v39, (uint64_t)v115);
          objc_msgSend_setFragmentFunction_(v40, v41, (uint64_t)v114);
          v44 = objc_msgSend_pixelFormat(*((void **)a1 + 18), v42, v43);
          objc_msgSend_colorAttachments(v40, v45, v46);
          v47 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_objectAtIndexedSubscript_(v47, v48, 0);
          v49 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setPixelFormat_(v49, v50, v44);

          v53 = objc_msgSend_pixelFormat(*((void **)a1 + 19), v51, v52);
          objc_msgSend_colorAttachments(v40, v54, v55);
          v56 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_objectAtIndexedSubscript_(v56, v57, 1);
          v58 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setPixelFormat_(v58, v59, v53);

          v62 = objc_msgSend_pixelFormat(*((void **)a1 + 21), v60, v61);
          objc_msgSend_setDepthAttachmentPixelFormat_(v40, v63, v62);
          v64 = **(id **)a1;
          v123 = v34;
          v66 = objc_msgSend_newRenderPipelineStateWithDescriptor_error_(v64, v65, (uint64_t)v40, &v123);
          v67 = v123;

          v68 = (void *)*((_QWORD *)a1 + 4);
          *((_QWORD *)a1 + 4) = v66;

          if (*((_QWORD *)a1 + 4))
          {
            v70 = *(id **)a1;
            if (*(_BYTE *)(*(_QWORD *)a1 + 24))
            {
              v71 = objc_alloc_init(MEMORY[0x24BDDD5A0]);
              v72 = *((_QWORD *)a1 + 26);
              v121 = (float)*((unint64_t *)a1 + 27);
              v122 = (float)v72;
              v27 = v116;
              v112 = v71;
              objc_msgSend_setConstantValue_type_atIndex_(v71, v73, (uint64_t)&v122, 3, 0);
              objc_msgSend_setConstantValue_type_atIndex_(v71, v74, (uint64_t)&v121, 3, 1);
              objc_msgSend_setConstantValue_type_atIndex_(v71, v75, (uint64_t)(a1 + 76), 3, 2);
              v76 = *(id *)(*(_QWORD *)a1 + 16);
              v120 = v67;
              v111 = (void *)objc_msgSend_newFunctionWithName_constantValues_error_(v76, v77, (uint64_t)CFSTR("coverageTileFetchVisibleSurfaceVoxel"), v71, &v120);
              v34 = v120;

              v78 = objc_alloc_init(MEMORY[0x24BDDD760]);
              v80 = v78;
              if (v78)
              {
                objc_msgSend_setTileFunction_(v78, v79, (uint64_t)v111);
                v83 = objc_msgSend_pixelFormat(*((void **)a1 + 42), v81, v82);
                objc_msgSend_colorAttachments(v80, v84, v85);
                v86 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_objectAtIndexedSubscript_(v86, v87, 0);
                v88 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_setPixelFormat_(v88, v89, v83);

                objc_msgSend_setThreadgroupSizeMatchesTileSize_(v80, v90, 1);
                v91 = **(id **)a1;
                v119 = v34;
                v93 = objc_msgSend_newRenderPipelineStateWithTileDescriptor_options_reflection_error_(v91, v92, (uint64_t)v80, 0, 0, &v119);
                v94 = v119;

                v95 = (void *)*((_QWORD *)a1 + 39);
                *((_QWORD *)a1 + 39) = v93;

                if (*((_QWORD *)a1 + 39))
                {
                  v97 = (void *)objc_msgSend_newFunctionWithName_(*(void **)(*(_QWORD *)a1 + 16), v96, (uint64_t)CFSTR("coverageVisibilityTileFragmentShader"));
                  objc_msgSend_setFragmentFunction_(v40, v98, (uint64_t)v97);
                  v99 = **(id **)a1;
                  v118 = v94;
                  v101 = objc_msgSend_newRenderPipelineStateWithDescriptor_error_(v99, v100, (uint64_t)v40, &v118);
                  v34 = v118;

                  v102 = (void *)*((_QWORD *)a1 + 40);
                  *((_QWORD *)a1 + 40) = v101;

                  v103 = *((_QWORD *)a1 + 40);
                  if (!v103)
                  {
                    v36 = 0;
                    v27 = v116;
                    goto LABEL_27;
                  }
                  v70 = *(id **)a1;
                  goto LABEL_23;
                }
                v34 = v94;
                v27 = v116;
              }

              v36 = 0;
              goto LABEL_27;
            }
            v34 = v67;
LABEL_23:
            v113 = (void *)objc_msgSend_newFunctionWithName_(v70[2], v69, (uint64_t)CFSTR("meshVisibilityVertexShader"), v111);
            objc_msgSend_setVertexFunction_(v40, v104, (uint64_t)v113);
            v105 = **(id **)a1;
            v117 = v34;
            v107 = objc_msgSend_newRenderPipelineStateWithDescriptor_error_(v105, v106, (uint64_t)v40, &v117);
            v108 = v117;

            v109 = (void *)*((_QWORD *)a1 + 5);
            *((_QWORD *)a1 + 5) = v107;

            v36 = *((_QWORD *)a1 + 5) != 0;
            v34 = v108;
            v27 = v116;

            goto LABEL_27;
          }
          v36 = 0;
          v34 = v67;
          v27 = v116;
        }
        else
        {
          v36 = 0;
        }
LABEL_27:

        v11 = v34;
        goto LABEL_28;
      }
      v28 = *(id *)(*(_QWORD *)a1 + 16);
      v30 = objc_msgSend_newFunctionWithName_(v28, v29, (uint64_t)CFSTR("coverageGOMDProcess"));

      v31 = **(id **)a1;
      v124 = v11;
      v33 = objc_msgSend_newComputePipelineStateWithFunction_error_(v31, v32, v30, &v124);
      v34 = v124;

      v35 = (void *)*((_QWORD *)a1 + 3);
      *((_QWORD *)a1 + 3) = v33;

      if (*((_QWORD *)a1 + 3))
      {
        v7 = (void *)v30;
        v27 = v116;
        goto LABEL_11;
      }
      v36 = 0;
      v7 = (void *)v30;
      v11 = v34;
    }
    else
    {
      v36 = 0;
    }
    v27 = v116;
LABEL_28:

    goto LABEL_29;
  }
  return 0;
}

void sub_2393C0A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

BOOL sub_2393C0BDC(uint64_t a1)
{
  id v2;
  const char *v3;
  void *v4;
  const char *v5;
  id v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  _BOOL8 v10;

  v2 = objc_alloc_init(MEMORY[0x24BDDD590]);
  v4 = v2;
  if (v2)
  {
    objc_msgSend_setDepthCompareFunction_(v2, v3, 1);
    objc_msgSend_setDepthWriteEnabled_(v4, v5, 1);
    v6 = **(id **)a1;
    v8 = objc_msgSend_newDepthStencilStateWithDescriptor_(v6, v7, (uint64_t)v4);
    v9 = *(void **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v8;

    v10 = *(_QWORD *)(a1 + 48) != 0;
  }
  else
  {
    v10 = 0;
  }

  return v10;
}

void sub_2393C0C70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL sub_2393C0C8C(uint64_t a1)
{
  id v2;
  void *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  void *v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  void *v16;
  const char *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  void *v29;
  const char *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  void *v36;
  const char *v37;
  const char *v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  void *v42;
  const char *v43;
  const char *v44;
  uint64_t v45;
  void *v46;
  const char *v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  void *v53;
  const char *v54;
  void *v55;
  const char *v56;
  uint64_t v57;
  void *v58;
  const char *v59;
  const char *v60;
  uint64_t v61;
  void *v62;
  const char *v63;
  const char *v64;
  uint64_t v65;
  void *v66;
  const char *v67;
  uint64_t v68;
  const char *v69;
  uint64_t v70;
  void *v71;
  const char *v72;

  v2 = objc_alloc_init(MEMORY[0x24BDDD690]);
  v3 = *(void **)(a1 + 176);
  *(_QWORD *)(a1 + 176) = v2;

  v6 = *(_QWORD *)(a1 + 176);
  if (v6)
  {
    v7 = *(_QWORD *)(a1 + 144);
    objc_msgSend_colorAttachments(*(void **)(a1 + 176), v4, v5);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v8, v9, 0);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setTexture_(v10, v11, v7);

    objc_msgSend_colorAttachments(*(void **)(a1 + 176), v12, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v14, v15, 0);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setLoadAction_(v16, v17, 2);

    objc_msgSend_colorAttachments(*(void **)(a1 + 176), v18, v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v20, v21, 0);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setClearColor_(v22, v23, v24, 0.0, 0.0, 0.0, 0.0);

    objc_msgSend_colorAttachments(*(void **)(a1 + 176), v25, v26);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v27, v28, 0);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setStoreAction_(v29, v30, 1);

    if ((*(_DWORD *)(a1 + 192) - 1) <= 3)
    {
      v33 = *(_QWORD *)(a1 + 152);
      objc_msgSend_colorAttachments(*(void **)(a1 + 176), v31, v32);
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectAtIndexedSubscript_(v34, v35, 1);
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setTexture_(v36, v37, v33);

      objc_msgSend_colorAttachments(*(void **)(a1 + 176), v38, v39);
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectAtIndexedSubscript_(v40, v41, 1);
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setLoadAction_(v42, v43, 2);

      objc_msgSend_colorAttachments(*(void **)(a1 + 176), v44, v45);
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectAtIndexedSubscript_(v46, v47, 1);
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setClearColor_(v48, v49, v50, 0.0, 0.0, 0.0, 0.0);

      objc_msgSend_colorAttachments(*(void **)(a1 + 176), v51, v52);
      v53 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectAtIndexedSubscript_(v53, v54, 1);
      v55 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setStoreAction_(v55, v56, 1);

    }
    v57 = *(_QWORD *)(a1 + 168);
    objc_msgSend_depthAttachment(*(void **)(a1 + 176), v31, v32);
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setTexture_(v58, v59, v57);

    objc_msgSend_depthAttachment(*(void **)(a1 + 176), v60, v61);
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setLoadAction_(v62, v63, 2);

    objc_msgSend_depthAttachment(*(void **)(a1 + 176), v64, v65);
    v66 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setClearDepth_(v66, v67, v68, 1.0);

    objc_msgSend_depthAttachment(*(void **)(a1 + 176), v69, v70);
    v71 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setStoreAction_(v71, v72, 0);

  }
  return v6 != 0;
}

void sub_2393C0F00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL sub_2393C0F6C(uint64_t a1)
{
  id v2;
  void *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  void *v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  void *v16;
  const char *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  const char *v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  const char *v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  void *v47;
  const char *v48;
  const char *v49;
  const char *v50;

  v2 = objc_alloc_init(MEMORY[0x24BDDD690]);
  v3 = *(void **)(a1 + 328);
  *(_QWORD *)(a1 + 328) = v2;

  v6 = *(_QWORD *)(a1 + 328);
  if (v6)
  {
    v7 = *(_QWORD *)(a1 + 336);
    objc_msgSend_colorAttachments(*(void **)(a1 + 328), v4, v5);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v8, v9, 0);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setTexture_(v10, v11, v7);

    objc_msgSend_colorAttachments(*(void **)(a1 + 328), v12, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v14, v15, 0);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setLoadAction_(v16, v17, 2);

    objc_msgSend_colorAttachments(*(void **)(a1 + 328), v18, v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v20, v21, 0);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setClearColor_(v22, v23, v24, 0.0, 0.0, 0.0, 0.0);

    objc_msgSend_colorAttachments(*(void **)(a1 + 328), v25, v26);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v27, v28, 0);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setStoreAction_(v29, v30, 0);

    v31 = *(_QWORD *)(a1 + 168);
    objc_msgSend_depthAttachment(*(void **)(a1 + 328), v32, v33);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setTexture_(v34, v35, v31);

    objc_msgSend_depthAttachment(*(void **)(a1 + 328), v36, v37);
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setLoadAction_(v38, v39, 2);

    objc_msgSend_depthAttachment(*(void **)(a1 + 328), v40, v41);
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setClearDepth_(v42, v43, v44, 1.0);

    objc_msgSend_depthAttachment(*(void **)(a1 + 328), v45, v46);
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setStoreAction_(v47, v48, 0);

    objc_msgSend_setTileWidth_(*(void **)(a1 + 328), v49, 32);
    objc_msgSend_setTileHeight_(*(void **)(a1 + 328), v50, 32);
  }
  return v6 != 0;
}

void sub_2393C111C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL sub_2393C1160(uint64_t a1)
{
  id v2;
  id v3;
  double v4;
  const char *v5;
  uint64_t v6;
  void *v7;

  v2 = objc_alloc(MEMORY[0x24BDDE3C8]);
  v3 = **(id **)a1;
  LODWORD(v4) = 1128857600;
  v6 = objc_msgSend_initWithDevice_sigma_(v2, v5, (uint64_t)v3, v4);
  v7 = *(void **)(a1 + 184);
  *(_QWORD *)(a1 + 184) = v6;

  return *(_QWORD *)(a1 + 184) != 0;
}

void sub_2393C11D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_2393C11E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  uint32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  uint32x4_t v17;
  float32x4_t v18;
  float32x2_t v19;
  float32x2_t v20;
  uint32x2_t v21;
  const char *v22;
  uint64_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  void *v33;

  result = 0;
  if (*(_BYTE *)(a1 + 288) && *(float *)a2 > 0.0)
  {
    v6 = *(float32x4_t *)(a2 + 16);
    v7 = *(float32x4_t *)(a2 + 32);
    v8 = *(float32x4_t *)(a2 + 48);
    v9 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 16);
    v10 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 32);
    v11 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
    v12 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v11, vabdq_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v6, *(float32x2_t *)v6.f32, 1), v7, *(float32x2_t *)v7.f32, 1), v8, *(float32x2_t *)v8.f32, 1), v9)), (int8x16_t)vcgeq_f32(v11, vabdq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v6, v6.f32[0]), v7, v7.f32[0]),
                                           v8,
                                           v8.f32[0]),
                                         *MEMORY[0x24BDAEDF8]))),
                        (int8x16_t)vcgeq_f32(v11, vabdq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v6, v6, 2), v7, v7, 2), v8, v8, 2), v10)));
    v12.i32[3] = v12.i32[2];
    if ((vminvq_u32(v12) & 0x80000000) != 0
      && (v13 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2),
          v14 = (float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)v6, (int32x4_t)v8), (int32x4_t)v13),
          v15 = (float32x4_t)vtrn2q_s32((int32x4_t)v6, (int32x4_t)v7),
          v15.i32[2] = HIDWORD(*(_QWORD *)(a2 + 48)),
          v16 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)v6, (int32x4_t)v8), (int32x4_t)v7),
          v17 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v11, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v16, v7.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1), v15), v13, v14), v9)), (int8x16_t)vcgeq_f32(v11, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v16, v6.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v6.f32, 1),
                                                   v15),
                                                 (float32x4_t)vdupq_laneq_s32((int32x4_t)v6, 2),
                                                 v14),
                                               *MEMORY[0x24BDAEDF8]))),
                              (int8x16_t)vcgeq_f32(v11, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v16, v8.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 1), v15), (float32x4_t)vdupq_laneq_s32((int32x4_t)v8, 2), v14), v10))), v17.i32[3] = v17.i32[2], (vminvq_u32(v17) & 0x80000000) != 0))
    {
      v18 = vmulq_f32(v6, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v8, (int8x16_t)v8, 0xCuLL), (int8x16_t)v8, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v7, (int32x4_t)v7), (int8x16_t)v7, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v8, (int32x4_t)v8), (int8x16_t)v8, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v7, (int8x16_t)v7, 0xCuLL), (int8x16_t)v7, 8uLL)));
      result = 0;
      if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 2), vaddq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1))).f32[0]+ -1.0) <= 0.000011)
      {
        v19 = vabs_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v6, (int8x16_t)v6, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v7, (int8x16_t)v7, 8uLL)));
        v20 = (float32x2_t)vdup_n_s32(0x38D1B717u);
        v21 = (uint32x2_t)vand_s8((int8x8_t)vcge_f32(v20, vabs_f32(vadd_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(a2 + 64), *(int8x16_t *)(a2 + 64), 8uLL)), (float32x2_t)0xBF80000080000000))), (int8x8_t)vcge_f32(v20, v19));
        if ((vpmin_u32(v21, v21).u32[0] & 0x80000000) != 0)
        {
          if (*(_QWORD *)(a2 + 80))
          {
            if (*(_QWORD *)(a2 + 88))
            {
              result = sub_2393BB59C(a1 + 56, a2, a3);
              if ((_DWORD)result)
              {
                v24 = *(float32x4_t *)(a2 + 16);
                v25 = *(float32x4_t *)(a2 + 32);
                v26 = *(float32x4_t *)(a2 + 48);
                v27 = *(float32x4_t *)(a2 + 64);
                v28 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v24, *(float *)a2), (float32x4_t)0, v25), (float32x4_t)0, v26), (float32x4_t)0, v27);
                v29 = vmulq_f32(v24, (float32x4_t)0);
                v30 = vmlaq_f32(vmlaq_f32(vmlaq_n_f32(v29, v25, *(float *)a2), (float32x4_t)0, v26), (float32x4_t)0, v27);
                v31 = vmlaq_f32(v29, (float32x4_t)0, v25);
                v32 = vmlaq_f32(vmlaq_n_f32(v31, v26, *(float *)a2), (float32x4_t)0, v27);
                *(float32x4_t *)(a1 + 224) = v28;
                *(float32x4_t *)(a1 + 240) = v30;
                *(float32x4_t *)(a1 + 256) = v32;
                *(float32x4_t *)(a1 + 272) = vaddq_f32(v27, vmlaq_f32(v31, (float32x4_t)0, v26));
                *(_DWORD *)(a1 + 292) = *(_DWORD *)(a1 + 100);
                *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 88);
                if (*(_DWORD *)(a1 + 192))
                {
                  v33 = (void *)objc_msgSend_contents(*(void **)(a1 + 120), v22, v23);
                  memcpy(v33, *(const void **)(a2 + 88), 48 * *(unsigned int *)(a1 + 292));
                }
                result = 1;
                *(_BYTE *)(a1 + 289) = 1;
                *(_DWORD *)(a1 + 488) = 1;
              }
            }
          }
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_2393C148C(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  uint32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  uint32x4_t v18;
  float32x4_t v19;
  float32x2_t v20;
  float32x2_t v21;
  uint32x2_t v22;
  uint64_t result;
  int v26;
  const char *v27;
  uint64_t v28;
  _DWORD *v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;

  if (a4 < 0.0001 || *(_BYTE *)(a1 + 288) == 0)
    return 0;
  v7 = *(float32x4_t *)a2;
  v6 = *(float32x4_t *)(a2 + 16);
  v8 = *(float32x4_t *)(a2 + 32);
  v9 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 16);
  v10 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 32);
  v11 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
  v12 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v11, vabdq_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v7, *(float32x2_t *)v7.f32, 1), v6, *(float32x2_t *)v6.f32, 1), v8, *(float32x2_t *)v8.f32, 1), v9)), (int8x16_t)vcgeq_f32(v11, vabdq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v7, v7.f32[0]), v6, v6.f32[0]),
                                         v8,
                                         v8.f32[0]),
                                       *MEMORY[0x24BDAEDF8]))),
                      (int8x16_t)vcgeq_f32(v11, vabdq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v7, v7, 2), v6, v6, 2), v8, v8, 2), v10)));
  v12.i32[3] = v12.i32[2];
  if ((vminvq_u32(v12) & 0x80000000) == 0)
    return 0;
  v13 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v6, 2);
  v14 = (float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)v7, (int32x4_t)v8), (int32x4_t)v13);
  v15 = (float32x4_t)vtrn2q_s32((int32x4_t)v7, (int32x4_t)v6);
  v15.i32[2] = HIDWORD(*(_QWORD *)(a2 + 32));
  v16 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)v7, (int32x4_t)v8), (int32x4_t)v6);
  v17 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
  v18 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v17, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v16, v6.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v6.f32, 1), v15), v13, v14), v9)), (int8x16_t)vcgeq_f32(v17, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v16, v7.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1),
                                           v15),
                                         (float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2),
                                         v14),
                                       *MEMORY[0x24BDAEDF8]))),
                      (int8x16_t)vcgeq_f32(v17, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v16, v8.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 1), v15), (float32x4_t)vdupq_laneq_s32((int32x4_t)v8, 2), v14), v10)));
  v18.i32[3] = v18.i32[2];
  if ((vminvq_u32(v18) & 0x80000000) == 0)
    return 0;
  v19 = vmulq_f32(v7, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v8, (int8x16_t)v8, 0xCuLL), (int8x16_t)v8, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v6, (int32x4_t)v6), (int8x16_t)v6, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v8, (int32x4_t)v8), (int8x16_t)v8, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v6, (int8x16_t)v6, 0xCuLL), (int8x16_t)v6, 8uLL)));
  if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2), vaddq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 1))).f32[0]+ -1.0) > 0.000011)return 0;
  v20 = vabs_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v7, (int8x16_t)v7, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v6, (int8x16_t)v6, 8uLL)));
  v21 = (float32x2_t)vdup_n_s32(0x38D1B717u);
  v22 = (uint32x2_t)vand_s8((int8x8_t)vcge_f32(v21, vabs_f32(vadd_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(a2 + 48), *(int8x16_t *)(a2 + 48), 8uLL)), (float32x2_t)0xBF80000080000000))), (int8x8_t)vcge_f32(v21, v20));
  if ((vpmin_u32(v22, v22).u32[0] & 0x80000000) == 0)
    return 0;
  result = *(_QWORD *)a3;
  if (*(_QWORD *)a3)
  {
    if (!*(_QWORD *)(a3 + 8) || !*(_QWORD *)(a3 + 16))
      return 0;
    v26 = *(_DWORD *)objc_msgSend_contents((void *)result, (const char *)a2, a3);
    v29 = (_DWORD *)objc_msgSend_contents(*(void **)(a3 + 16), v27, v28);
    result = 0;
    if (v26 && *v29)
    {
      *(_QWORD *)(a1 + 128) = a3;
      v30 = *(float32x4_t *)(a2 + 16);
      v31 = *(float32x4_t *)(a2 + 32);
      v32 = *(float32x4_t *)(a2 + 48);
      v33 = vmulq_f32(*(float32x4_t *)a2, (float32x4_t)0);
      v34 = vmlaq_f32(vmlaq_f32(vmlaq_n_f32(v33, v30, a4), (float32x4_t)0, v31), (float32x4_t)0, v32);
      v35 = vmlaq_f32(v33, (float32x4_t)0, v30);
      *(float32x4_t *)(a1 + 224) = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(*(float32x4_t *)a2, a4), (float32x4_t)0, v30), (float32x4_t)0, v31), (float32x4_t)0, v32);
      *(float32x4_t *)(a1 + 240) = v34;
      *(float32x4_t *)(a1 + 256) = vmlaq_f32(vmlaq_n_f32(v35, v31, a4), (float32x4_t)0, v32);
      *(float32x4_t *)(a1 + 272) = vaddq_f32(v32, vmlaq_f32(v35, (float32x4_t)0, v31));
      *(_DWORD *)(a1 + 292) = v26;
      if (*(_DWORD *)(a1 + 192))
        objc_storeStrong((id *)(a1 + 120), *(id *)(a3 + 8));
      result = 1;
      *(_BYTE *)(a1 + 289) = 1;
      *(_DWORD *)(a1 + 488) = 2;
    }
  }
  return result;
}

int32x4_t *sub_2393C1758(uint64_t a1, unint64_t a2, const float *a3)
{
  uint64_t v6;
  float *v7;
  int32x4_t *result;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  float *v13;
  int32x2_t v14;
  unint64_t v15;
  unint64_t v16;
  int32x4_t v17;
  int32x4_t *v18;
  uint64_t v19;
  float32x4_t *v20;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  float32x4_t v24;
  float32x4_t *v25;
  unint64_t v26;
  unint64_t v27;
  float32x4_t *v28;
  unint64_t v29;
  uint64_t v30;
  float32x4_t v31;
  float32x4_t *v32;
  uint64_t v33;

  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(float **)a1;
  result = (int32x4_t *)v7;
  if (a2 <= (v6 - (uint64_t)v7) >> 2)
  {
    v20 = *(float32x4_t **)(a1 + 8);
    v21 = (char *)v20 - (char *)v7;
    v22 = ((char *)v20 - (char *)v7) >> 2;
    if (v22 >= a2)
      v23 = a2;
    else
      v23 = ((char *)v20 - (char *)v7) >> 2;
    if (v23)
    {
      if (v23 < 8 || v7 < a3 + 1 && &v7[v23] > a3)
        goto LABEL_27;
      result = (int32x4_t *)&v7[v23 & 0xFFFFFFFFFFFFFFF8];
      v24 = vld1q_dup_f32(a3);
      v25 = (float32x4_t *)(v7 + 4);
      v26 = v23 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v25[-1] = v24;
        *v25 = v24;
        v25 += 2;
        v26 -= 8;
      }
      while (v26);
      if (v23 != (v23 & 0xFFFFFFFFFFFFFFF8))
      {
        v23 &= 7u;
        do
        {
LABEL_27:
          *(float *)result->i32 = *a3;
          result = (int32x4_t *)((char *)result + 4);
          --v23;
        }
        while (v23);
      }
    }
    v10 = a2 >= v22;
    v27 = a2 - v22;
    if (v27 == 0 || !v10)
    {
      v13 = &v7[a2];
      goto LABEL_39;
    }
    v28 = (float32x4_t *)((char *)v20 + 4 * v27);
    v29 = 4 * a2 - (v21 & 0xFFFFFFFFFFFFFFFCLL) - 4;
    if (v29 >= 0x4C && (v20 >= (float32x4_t *)(a3 + 1) || (char *)&v20->i32[1] + v29 <= (char *)a3))
    {
      v30 = (v29 >> 2) + 1;
      v31 = vld1q_dup_f32(a3);
      v32 = v20 + 1;
      v33 = v30 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v32[-1] = v31;
        *v32 = v31;
        v32 += 2;
        v33 -= 8;
      }
      while (v33);
      if (v30 == (v30 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_38;
      v20 = (float32x4_t *)((char *)v20 + 4 * (v30 & 0x7FFFFFFFFFFFFFF8));
    }
    do
    {
      v20->f32[0] = *a3;
      v20 = (float32x4_t *)((char *)v20 + 4);
    }
    while (v20 != v28);
LABEL_38:
    *(_QWORD *)(a1 + 8) = v28;
    return result;
  }
  if (v7)
  {
    *(_QWORD *)(a1 + 8) = v7;
    operator delete(v7);
    v6 = 0;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  v9 = v6 >> 1;
  if (v6 >> 1 <= a2)
    v9 = a2;
  v10 = (unint64_t)v6 >= 0x7FFFFFFFFFFFFFFCLL;
  v11 = 0x3FFFFFFFFFFFFFFFLL;
  if (!v10)
    v11 = v9;
  if (v11 >> 62)
    abort();
  v12 = 4 * v11;
  result = (int32x4_t *)operator new(4 * v11);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 16) = (char *)result + v12;
  v13 = (float *)&result->i32[a2];
  *(float *)v14.i32 = *a3;
  v15 = (a2 - 1) & 0x3FFFFFFFFFFFFFFFLL;
  if (v15 >= 7)
  {
    v16 = v15 + 1;
    v17 = vdupq_lane_s32(v14, 0);
    v18 = result + 1;
    v19 = v16 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v18[-1] = v17;
      *v18 = v17;
      v18 += 2;
      v19 -= 8;
    }
    while (v19);
    if (v16 == (v16 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_39;
    result = (int32x4_t *)((char *)result + 4 * (v16 & 0x7FFFFFFFFFFFFFF8));
  }
  do
  {
    result->i32[0] = v14.i32[0];
    result = (int32x4_t *)((char *)result + 4);
  }
  while (result != (int32x4_t *)v13);
LABEL_39:
  *(_QWORD *)(a1 + 8) = v13;
  return result;
}

uint64_t sub_2393C1960(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, float a7)
{
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  uint32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  uint32x4_t v18;
  float32x4_t v19;
  uint64_t result;
  float32x2_t v22;
  uint32x2_t v23;
  float v28;
  float v29;
  float v30;
  float v31;
  unsigned int v32;
  unint64_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  const char *v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  void *v44;
  const char *v45;
  const char *v46;
  const char *v47;
  const char *v48;
  const char *v49;
  const char *v50;
  const char *v51;
  const char *v52;
  const char *v53;
  const char *v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  void *v58;
  const char *v59;
  const char *v60;
  const char *v61;
  const char *v62;
  int v63;
  uint64_t *v64;
  uint64_t v65;
  const char *v66;
  uint64_t *v67;
  const char *v68;
  const char *v69;
  const char *v70;
  const char *v71;
  const char *v72;
  const char *v73;
  const char *v74;
  const char *v75;
  const char *v76;
  const char *v77;
  const char *v78;
  const char *v79;
  const char *v80;
  const char *v81;
  const char *v82;
  const char *v83;
  const char *v84;
  const char *v85;
  const char *v86;
  const char *v87;
  const char *v88;
  const char *v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  const char *v94;
  uint64_t v95;
  unint64_t v96;
  const char *v97;
  const char *v98;
  uint64_t v99;
  const char *v100;
  const char *v101;
  uint64_t v102;
  const char *v103;
  uint64_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  _QWORD v109[6];
  _OWORD v110[4];
  uint64_t v111;
  uint64_t v112;
  float64x2_t v113;
  __int128 v114;
  _QWORD v115[3];

  v8 = *(float32x4_t *)a2;
  v7 = *(float32x4_t *)(a2 + 16);
  v9 = *(float32x4_t *)(a2 + 32);
  v10 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 16);
  v11 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 32);
  v12 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
  v13 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v12, vabdq_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v8, *(float32x2_t *)v8.f32, 1), v7, *(float32x2_t *)v7.f32, 1), v9, *(float32x2_t *)v9.f32, 1), v10)), (int8x16_t)vcgeq_f32(v12, vabdq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v8, v8.f32[0]), v7, v7.f32[0]),
                                         v9,
                                         v9.f32[0]),
                                       *MEMORY[0x24BDAEDF8]))),
                      (int8x16_t)vcgeq_f32(v12, vabdq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v8, v8, 2), v7, v7, 2), v9, v9, 2), v11)));
  v13.i32[3] = v13.i32[2];
  if ((vminvq_u32(v13) & 0x80000000) == 0)
    return 0;
  v14 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2);
  v15 = (float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)v8, (int32x4_t)v9), (int32x4_t)v14);
  v16 = (float32x4_t)vtrn2q_s32((int32x4_t)v8, (int32x4_t)v7);
  v16.i32[2] = HIDWORD(*(_QWORD *)(a2 + 32));
  v17 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)v8, (int32x4_t)v9), (int32x4_t)v7);
  v18 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v12, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v17, v7.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1), v16), v14, v15), v10)), (int8x16_t)vcgeq_f32(v12, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v17, v8.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 1),
                                           v16),
                                         (float32x4_t)vdupq_laneq_s32((int32x4_t)v8, 2),
                                         v15),
                                       *MEMORY[0x24BDAEDF8]))),
                      (int8x16_t)vcgeq_f32(v12, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v17, v9.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1), v16), (float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), v15), v11)));
  v18.i32[3] = v18.i32[2];
  if ((vminvq_u32(v18) & 0x80000000) == 0)
    return 0;
  v19 = vmulq_f32(v8, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v9, (int8x16_t)v9, 0xCuLL), (int8x16_t)v9, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v7, (int32x4_t)v7), (int8x16_t)v7, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v9, (int32x4_t)v9), (int8x16_t)v9, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v7, (int8x16_t)v7, 0xCuLL), (int8x16_t)v7, 8uLL)));
  if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2), vaddq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 1))).f32[0]+ -1.0) > 0.000011)return 0;
  result = 0;
  if (a7 < 3.1416 && a7 > 0.0)
  {
    v22 = (float32x2_t)vdup_n_s32(0x38D1B717u);
    v23 = (uint32x2_t)vand_s8((int8x8_t)vcge_f32(v22, vabs_f32(vadd_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(a2 + 48), *(int8x16_t *)(a2 + 48), 8uLL)), (float32x2_t)0xBF80000080000000))), (int8x8_t)vcge_f32(v22, vabs_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v8,
                                                                                     (int8x16_t)v8,
                                                                                     8uLL),
                                                            (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v7, (int8x16_t)v7, 8uLL)))));
    if ((vpmin_u32(v23, v23).u32[0] & 0x80000000) != 0)
    {
      if (a6 && *(_DWORD *)(a1 + 292) > ((a6[1] - *a6) >> 2))
        return 0;
      result = 0;
      v28 = (float)*(unint64_t *)(a1 + 208) / (float)*(unint64_t *)(a1 + 216);
      if (v28 >= 0.001 && a7 >= 0.0 && fabsf(a7) > 0.000001)
      {
        result = 0;
        v29 = *(float *)(a1 + 200);
        v30 = *(float *)(a1 + 204);
        if (v30 > v29 && v30 >= 0.001 && v29 >= 0.001 && fabsf(a7 + -3.1416) > 0.000032416)
        {
          v106 = *(float32x4_t *)(a2 + 16);
          v107 = *(float32x4_t *)(a2 + 32);
          v105 = *(float32x4_t *)a2;
          v108 = *(float32x4_t *)(a2 + 48);
          v31 = 1.0 / tanf(a7 * 0.5);
          *(float *)&v32 = v31 / v28;
          LODWORD(v33) = 0;
          *((float *)&v33 + 1) = v31;
          v34.i64[0] = 0;
          v34.f32[2] = (float)-v30 / (float)(v30 - v29);
          v34.i32[3] = -1.0;
          v35.i64[0] = 0;
          v35.i32[3] = 0;
          v35.f32[2] = v34.f32[2] * v29;
          v36 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v105, COERCE_FLOAT(*(_OWORD *)(a1 + 224))), v106, *(float32x2_t *)(a1 + 224), 1), v107, *(float32x4_t *)(a1 + 224), 2), v108, *(float32x4_t *)(a1 + 224), 3);
          v37 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v105, COERCE_FLOAT(*(_OWORD *)(a1 + 240))), v106, *(float32x2_t *)(a1 + 240), 1), v107, *(float32x4_t *)(a1 + 240), 2), v108, *(float32x4_t *)(a1 + 240), 3);
          v38 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v105, COERCE_FLOAT(*(_OWORD *)(a1 + 256))), v106, *(float32x2_t *)(a1 + 256), 1), v107, *(float32x4_t *)(a1 + 256), 2), v108, *(float32x4_t *)(a1 + 256), 3);
          v39 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v105, COERCE_FLOAT(*(_OWORD *)(a1 + 272))), v106, *(float32x2_t *)(a1 + 272), 1), v107, *(float32x4_t *)(a1 + 272), 2), v108, *(float32x4_t *)(a1 + 272), 3);
          v110[0] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v32, v36.f32[0]), (float32x4_t)v33, *(float32x2_t *)v36.f32, 1), v34, v36, 2), v35, v36, 3);
          v110[1] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v32, v37.f32[0]), (float32x4_t)v33, *(float32x2_t *)v37.f32, 1), v34, v37, 2), v35, v37, 3);
          v110[2] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v32, v38.f32[0]), (float32x4_t)v33, *(float32x2_t *)v38.f32, 1), v34, v38, 2), v35, v38, 3);
          v110[3] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v32, v39.f32[0]), (float32x4_t)v33, *(float32x2_t *)v39.f32, 1), v34, v39, 2), v35, v39, 3);
          objc_msgSend_commandBuffer(*(void **)(*(_QWORD *)a1 + 8), v40, v41);
          v42 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_renderCommandEncoderWithDescriptor_(v42, v43, *(_QWORD *)(a1 + 176));
          v44 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setLabel_(v44, v45, (uint64_t)CFSTR("VisibleIndexRenderEncoder"));
          objc_msgSend_setRenderPipelineState_(v44, v46, *(_QWORD *)(a1 + 32));
          objc_msgSend_setDepthStencilState_(v44, v47, *(_QWORD *)(a1 + 48));
          objc_msgSend_setVertexBuffer_offset_atIndex_(v44, v48, *(_QWORD *)(a1 + 112), 0, 0);
          objc_msgSend_setVertexBytes_length_atIndex_(v44, v49, (uint64_t)v110, 64, 1);
          if ((*(_DWORD *)(a1 + 192) - 1) <= 3)
          {
            objc_msgSend_setVertexBuffer_offset_atIndex_(v44, v50, *(_QWORD *)(a1 + 120), 0, 2);
            objc_msgSend_setVertexBytes_length_atIndex_(v44, v51, a1 + 224, 64, 3);
            objc_msgSend_setVertexBytes_length_atIndex_(v44, v52, a1 + 488, 4, 4);
          }
          objc_msgSend_drawPrimitives_vertexStart_vertexCount_(v44, v50, 3, 0, (36 * *(_DWORD *)(a1 + 292)), *(_OWORD *)&v105, *(_OWORD *)&v106, *(_OWORD *)&v107, *(_OWORD *)&v108);
          v111 = 0;
          v112 = 0;
          v113 = vcvtq_f64_u64(*(uint64x2_t *)(a1 + 208));
          v114 = xmmword_2393F5400;
          objc_msgSend_setViewport_(v44, v53, (uint64_t)&v111);
          objc_msgSend_endEncoding(v44, v54, v55);

          if (*(_DWORD *)(a1 + 192) == 1)
            objc_msgSend_encodeToCommandBuffer_sourceTexture_destinationTexture_(*(void **)(a1 + 184), v56, (uint64_t)v42, *(_QWORD *)(a1 + 152), *(_QWORD *)(a1 + 160));
          objc_msgSend_computeCommandEncoder(v42, v56, v57);
          v58 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setLabel_(v58, v59, (uint64_t)CFSTR("FetchVisibleSurfaceVoxelEncoder"));
          objc_msgSend_setComputePipelineState_(v58, v60, *(_QWORD *)(a1 + 8));
          objc_msgSend_setTexture_atIndex_(v58, v61, *(_QWORD *)(a1 + 144), 0);
          v63 = *(_DWORD *)(a1 + 192);
          if ((v63 - 2) >= 2)
          {
            if (v63 != 1)
            {
LABEL_27:
              v65 = a1 + 292;
              switch(v63)
              {
                case 0:
                  objc_msgSend_setBytes_length_atIndex_(v58, v62, v65, 4, 0);
                  v67 = (uint64_t *)(a1 + 136);
                  goto LABEL_33;
                case 1:
                  objc_msgSend_setBytes_length_atIndex_(v58, v62, v65, 4, 0);
                  objc_msgSend_setBuffer_offset_atIndex_(v58, v68, *(_QWORD *)(a1 + 120), 0, 1);
                  objc_msgSend_setBytes_length_atIndex_(v58, v69, a1 + 224, 64, 2);
                  objc_msgSend_setBytes_length_atIndex_(v58, v70, a3, 16, 3);
                  objc_msgSend_setBytes_length_atIndex_(v58, v71, a4, 4, 4);
                  objc_msgSend_setBytes_length_atIndex_(v58, v72, a5, 4, 5);
                  objc_msgSend_setBytes_length_atIndex_(v58, v73, a1 + 344, 64, 6);
                  objc_msgSend_setBuffer_offset_atIndex_(v58, v74, *(_QWORD *)(a1 + 136), 0, 7);
                  objc_msgSend_setBuffer_offset_atIndex_(v58, v75, *(_QWORD *)(a1 + 408), 0, 8);
                  break;
                case 2:
                  objc_msgSend_setBytes_length_atIndex_(v58, v62, v65, 4, 0);
                  objc_msgSend_setBuffer_offset_atIndex_(v58, v76, *(_QWORD *)(a1 + 120), 0, 1);
                  objc_msgSend_setBytes_length_atIndex_(v58, v77, a1 + 224, 64, 2);
                  objc_msgSend_setBytes_length_atIndex_(v58, v78, a3, 16, 3);
                  objc_msgSend_setBytes_length_atIndex_(v58, v79, (uint64_t)&unk_2393F9BDE, 1, 4);
                  objc_msgSend_setBytes_length_atIndex_(v58, v80, (uint64_t)&unk_2393F9BDF, 1, 5);
                  objc_msgSend_setBuffer_offset_atIndex_(v58, v81, *(_QWORD *)(a1 + 136), 0, 6);
                  break;
                case 3:
                  objc_msgSend_setBytes_length_atIndex_(v58, v62, v65, 4, 0);
                  objc_msgSend_setBuffer_offset_atIndex_(v58, v82, *(_QWORD *)(a1 + 120), 0, 1);
                  objc_msgSend_setBytes_length_atIndex_(v58, v83, a1 + 224, 64, 2);
                  objc_msgSend_setBytes_length_atIndex_(v58, v84, a3, 16, 3);
                  objc_msgSend_setBuffer_offset_atIndex_(v58, v85, *(_QWORD *)(a1 + 432), 0, 4);
                  objc_msgSend_setBuffer_offset_atIndex_(v58, v86, *(_QWORD *)(a1 + 440), 0, 5);
                  objc_msgSend_setBuffer_offset_atIndex_(v58, v87, *(_QWORD *)(a1 + 448), 0, 6);
                  objc_msgSend_setBytes_length_atIndex_(v58, v88, a1 + 416, 4, 7);
                  objc_msgSend_setBuffer_offset_atIndex_(v58, v89, *(_QWORD *)(a1 + 136), 0, 8);
                  objc_msgSend_setBuffer_offset_atIndex_(v58, v90, *(_QWORD *)(a1 + 424), 0, 9);
                  break;
                case 4:
                  objc_msgSend_setBytes_length_atIndex_(v58, v62, v65, 4, 0);
                  v67 = (uint64_t *)(a1 + 456);
LABEL_33:
                  objc_msgSend_setBuffer_offset_atIndex_(v58, v66, *v67, 0, 1);
                  break;
                default:
                  break;
              }
              v91 = *(_QWORD *)(a1 + 208);
              v92 = *(_QWORD *)(a1 + 216);
              v93 = objc_msgSend_threadExecutionWidth(*(void **)(a1 + 8), v62, v65);
              v96 = objc_msgSend_maxTotalThreadsPerThreadgroup(*(void **)(a1 + 8), v94, v95);
              v111 = v91;
              v112 = v92;
              *(_QWORD *)&v113.f64[0] = 1;
              v115[0] = v93;
              v115[1] = v96 / v93;
              v115[2] = 1;
              objc_msgSend_dispatchThreads_threadsPerThreadgroup_(v58, v97, (uint64_t)&v111, v115);
              objc_msgSend_endEncoding(v58, v98, v99);

              if (*(_DWORD *)(a1 + 192) == 4)
                sub_2393C222C(a1, v42, a3);
              v109[0] = MEMORY[0x24BDAC760];
              v109[1] = 3221225472;
              v109[2] = sub_2393C23C8;
              v109[3] = &unk_250AD60D0;
              v109[4] = a1;
              v109[5] = a6;
              objc_msgSend_addCompletedHandler_(v42, v100, (uint64_t)v109);
              objc_msgSend_commit(v42, v101, v102);
              objc_msgSend_waitUntilCompleted(v42, v103, v104);

              return 1;
            }
            v64 = (uint64_t *)(a1 + 160);
          }
          else
          {
            v64 = (uint64_t *)(a1 + 152);
          }
          objc_msgSend_setTexture_atIndex_(v58, v62, *v64, 1);
          v63 = *(_DWORD *)(a1 + 192);
          goto LABEL_27;
        }
      }
    }
  }
  return result;
}

void sub_2393C2200(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2393C222C(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  const char *v6;
  const char *v7;
  const char *v8;
  const char *v9;
  const char *v10;
  const char *v11;
  const char *v12;
  const char *v13;
  const char *v14;
  const char *v15;
  const char *v16;
  const char *v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  unint64_t v22;
  const char *v23;
  unint64_t v24;
  const char *v25;
  uint64_t v26;
  unint64_t v27;
  int64x2_t v28;
  uint64_t v29;
  int64x2_t v30;

  objc_msgSend_computeCommandEncoder(a2, (const char *)a2, a3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setLabel_(v5, v6, (uint64_t)CFSTR("GOMDProcessEncoder"));
  objc_msgSend_setComputePipelineState_(v5, v7, *(_QWORD *)(a1 + 24));
  objc_msgSend_setBuffer_offset_atIndex_(v5, v8, *(_QWORD *)(a1 + 456), 0, 0);
  objc_msgSend_setBytes_length_atIndex_(v5, v9, (uint64_t)&unk_2393F9BE0, 4, 1);
  objc_msgSend_setBytes_length_atIndex_(v5, v10, a1 + 292, 4, 2);
  objc_msgSend_setBuffer_offset_atIndex_(v5, v11, *(_QWORD *)(a1 + 120), 0, 3);
  objc_msgSend_setBytes_length_atIndex_(v5, v12, a1 + 224, 64, 4);
  objc_msgSend_setBytes_length_atIndex_(v5, v13, a3, 16, 5);
  objc_msgSend_setBytes_length_atIndex_(v5, v14, a1 + 488, 4, 6);
  objc_msgSend_setBuffer_offset_atIndex_(v5, v15, *(_QWORD *)(a1 + 464), 0, 7);
  objc_msgSend_setBuffer_offset_atIndex_(v5, v16, *(_QWORD *)(a1 + 136), 0, 8);
  objc_msgSend_setBuffer_offset_atIndex_(v5, v17, *(_QWORD *)(a1 + 472), 0, 9);
  objc_msgSend_setBuffer_offset_atIndex_(v5, v18, *(_QWORD *)(a1 + 480), 0, 10);
  v19 = *(unsigned int *)(a1 + 292);
  v22 = objc_msgSend_maxTotalThreadsPerThreadgroup(*(void **)(a1 + 24), v20, v21);
  v24 = *(unsigned int *)(a1 + 292);
  if (v22 < v24)
    v24 = v22;
  v29 = v19;
  v30 = vdupq_n_s64(1uLL);
  v27 = v24;
  v28 = v30;
  objc_msgSend_dispatchThreads_threadsPerThreadgroup_(v5, v23, (uint64_t)&v29, &v27);
  objc_msgSend_endEncoding(v5, v25, v26);

}

void sub_2393C23B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2393C23C8(uint64_t a1)
{
  const char *v1;

  v1 = *(const char **)(a1 + 40);
  if (v1)
    sub_2393C23E0(*(_QWORD *)(a1 + 32), v1, 0);
}

void sub_2393C23E0(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v5;
  size_t v6;
  _QWORD *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD block[10];
  _QWORD v35[11];
  _QWORD v36[7];
  _QWORD v37[8];
  _QWORD v38[7];

  switch(*(_DWORD *)(a1 + 192))
  {
    case 0:
      v5 = objc_msgSend_contents(*(void **)(a1 + 136), a2, a3);
      v6 = vcvtps_u32_f32((float)*(unsigned int *)(a1 + 292) / 500.0);
      v38[0] = MEMORY[0x24BDAC760];
      v38[1] = 3221225472;
      v38[2] = sub_2393C267C;
      v38[3] = &unk_250AD6B10;
      v38[4] = a1;
      v38[5] = a2;
      v38[6] = v5;
      v7 = v38;
      goto LABEL_7;
    case 1:
      v8 = objc_msgSend_contents(*(void **)(a1 + 136), a2, a3);
      v11 = objc_msgSend_contents(*(void **)(a1 + 408), v9, v10);
      v6 = vcvtps_u32_f32((float)*(unsigned int *)(a1 + 292) / 500.0);
      v37[0] = MEMORY[0x24BDAC760];
      v37[1] = 3221225472;
      v37[2] = sub_2393C2738;
      v37[3] = &unk_250AD60F0;
      v37[4] = a1;
      v37[5] = v11;
      v37[6] = a2;
      v37[7] = v8;
      v7 = v37;
      goto LABEL_7;
    case 2:
      v12 = objc_msgSend_contents(*(void **)(a1 + 136), a2, a3);
      v6 = vcvtps_u32_f32((float)*(unsigned int *)(a1 + 292) / 500.0);
      v36[0] = MEMORY[0x24BDAC760];
      v36[1] = 3221225472;
      v36[2] = sub_2393C27AC;
      v36[3] = &unk_250AD6B10;
      v36[4] = a1;
      v36[5] = a2;
      v36[6] = v12;
      v7 = v36;
      goto LABEL_7;
    case 3:
      v13 = objc_msgSend_contents(*(void **)(a1 + 136), a2, a3);
      v16 = objc_msgSend_contents(*(void **)(a1 + 424), v14, v15);
      v19 = objc_msgSend_contents(*(void **)(a1 + 432), v17, v18);
      v22 = objc_msgSend_contents(*(void **)(a1 + 440), v20, v21);
      v25 = objc_msgSend_contents(*(void **)(a1 + 448), v23, v24);
      v6 = vcvtps_u32_f32((float)*(unsigned int *)(a1 + 292) / 500.0);
      v35[0] = MEMORY[0x24BDAC760];
      v35[1] = 3221225472;
      v35[2] = sub_2393C2B60;
      v35[3] = &unk_250AD6110;
      v35[4] = a1;
      v35[5] = v16;
      v35[6] = a2;
      v35[7] = v13;
      v35[8] = v19;
      v35[9] = v22;
      v35[10] = v25;
      v7 = v35;
      goto LABEL_7;
    case 4:
      v27 = objc_msgSend_contents(*(void **)(a1 + 136), a2, a3);
      v30 = objc_msgSend_contents(*(void **)(a1 + 472), v28, v29);
      v33 = objc_msgSend_contents(*(void **)(a1 + 464), v31, v32);
      v6 = vcvtps_u32_f32((float)*(unsigned int *)(a1 + 292) / 500.0);
      block[0] = MEMORY[0x24BDAC760];
      block[1] = 3221225472;
      block[2] = sub_2393C2C58;
      block[3] = &unk_250AD6130;
      block[4] = a1;
      block[5] = v33;
      block[6] = a2;
      block[7] = v27;
      block[8] = v30;
      block[9] = a3;
      v7 = block;
LABEL_7:
      dispatch_apply(v6, 0, v7);
      break;
    default:
      return;
  }
}

uint64_t sub_2393C267C(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int8x16_t *v9;
  int32x4_t *v10;
  unint64_t v16;
  int8x16_t v17;
  unint64_t v18;
  uint64_t v19;
  float *v20;
  _DWORD *v21;
  float v23;

  v2 = 500 * a2;
  v3 = *(unsigned int *)(*(_QWORD *)(result + 32) + 292);
  if (500 * a2 + 500 < v3)
    v3 = 500 * a2 + 500;
  v4 = v3 - v2;
  if (v3 > v2)
  {
    v5 = *(_QWORD *)(result + 48);
    v6 = **(_QWORD **)(result + 40);
    if (v4 > 7)
    {
      v7 = v4 & 0xFFFFFFFFFFFFFFF8;
      v8 = 2000 * a2 + 16;
      v9 = (int8x16_t *)(v6 + v8);
      v10 = (int32x4_t *)(v5 + v8);
      __asm { FMOV            V0.4S, #1.0 }
      v16 = v4 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v17 = vbicq_s8(_Q0, (int8x16_t)vceqzq_s32(*v10));
        v9[-1] = vbicq_s8(_Q0, (int8x16_t)vceqzq_s32(v10[-1]));
        *v9 = v17;
        v9 += 2;
        v10 += 2;
        v16 -= 8;
      }
      while (v16);
      if (v4 == v7)
        return result;
      v2 += v7;
    }
    v18 = v3 - v2;
    v19 = 4 * v2;
    v20 = (float *)(v6 + 4 * v2);
    v21 = (_DWORD *)(v5 + v19);
    do
    {
      if (*v21++)
        v23 = 1.0;
      else
        v23 = 0.0;
      *v20++ = v23;
      --v18;
    }
    while (v18);
  }
  return result;
}

uint64_t sub_2393C2738(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  unsigned int v7;

  v2 = 500 * a2;
  v3 = *(unsigned int *)(*(_QWORD *)(result + 32) + 292);
  if (500 * a2 + 500 < v3)
    v3 = 500 * a2 + 500;
  if (v2 < v3)
  {
    v4 = *(_QWORD *)(result + 40);
    v5 = **(_QWORD **)(result + 48);
    do
    {
      v7 = *(_DWORD *)(v4 + 4 * v2);
      if (v7)
        v6 = (float)((float)*(unsigned int *)(*(_QWORD *)(result + 56) + 4 * v2) / (float)v7) / 1000.0;
      else
        v6 = 0.0;
      *(float *)(v5 + 4 * v2++) = v6;
    }
    while (v3 != v2);
  }
  return result;
}

uint64_t sub_2393C27AC(uint64_t result, uint64_t a2, float32x4_t a3, float a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int8x16_t v15;
  float32x4_t v16;
  int8x8_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  int8x16_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;

  v4 = 500 * a2;
  v5 = *(unsigned int *)(*(_QWORD *)(result + 32) + 292);
  if (500 * a2 + 500 < v5)
    v5 = 500 * a2 + 500;
  if (v4 < v5)
  {
    v6 = 0;
    v7 = *(_QWORD *)(result + 48);
    v8 = **(_QWORD **)(result + 40);
    v9 = (2000 * a2) | 4;
    v10 = (32000 * a2) | 0x40;
    v11 = v7 + 32000 * a2;
    v12 = v8 + 2000 * a2;
    v13 = v11;
    do
    {
      a3.i32[0] = *(_DWORD *)(v8 + 4 * v4);
      if (v12 + 4 * v6 >= (unint64_t)(v7 + v10 + (v6 << 6))
        || v11 + (v6 << 6) >= (unint64_t)(v8 + v9 + 4 * v6))
      {
        v14 = v7 + (v4 << 6);
        v15 = *(int8x16_t *)(v14 + 16);
        v16 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(*(int8x8_t *)v14, *(int8x8_t *)a3.f32) & 0xFF00FF00FF00FFLL)));
        a3.f32[0] = (float)((float)(a3.f32[0] + v16.f32[0]) + v16.f32[1]) + v16.f32[2];
        v17 = (int8x8_t)vextq_s8(*(int8x16_t *)v14, *(int8x16_t *)v14, 8uLL).u64[0];
        v18 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(*(int8x8_t *)v14, *(int8x8_t *)a3.f32) & 0xFF00FF00FF00FFLL)));
        a3.f32[0] = (float)((float)((float)(a3.f32[0] + v16.f32[3]) + v18.f32[0]) + v18.f32[1]) + v18.f32[2];
        v19 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(v17, *(int8x8_t *)a3.f32) & 0xFF00FF00FF00FFLL)));
        v20 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(v17, *(int8x8_t *)a3.f32) & 0xFF00FF00FF00FFLL)));
        a3.f32[0] = (float)((float)((float)((float)((float)((float)(a3.f32[0] + v18.f32[3]) + v20.f32[0]) + v20.f32[1])
                                          + v20.f32[2])
                                  + v20.f32[3])
                          + v19.f32[0])
                  + v19.f32[1];
        v19.i64[0] = vextq_s8(v15, v15, 8uLL).u64[0];
        a3.f32[0] = a3.f32[0] + v19.f32[2];
        v21 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(*(int8x8_t *)v15.i8, *(int8x8_t *)a3.f32) & 0xFF00FF00FF00FFLL)));
        a3.f32[0] = (float)((float)((float)(a3.f32[0] + v19.f32[3]) + v21.f32[0]) + v21.f32[1]) + v21.f32[2];
        v22 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(*(int8x8_t *)v19.f32, *(int8x8_t *)a3.f32) & 0xFF00FF00FF00FFLL)));
        v23 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(*(int8x8_t *)v15.i8, *(int8x8_t *)a3.f32) & 0xFF00FF00FF00FFLL)));
        a3.f32[0] = (float)((float)((float)(a3.f32[0] + v21.f32[3]) + v23.f32[0]) + v23.f32[1]) + v23.f32[2];
        v24 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(*(int8x8_t *)v19.f32, *(int8x8_t *)a3.f32) & 0xFF00FF00FF00FFLL)));
        v22.f32[0] = (float)((float)((float)((float)((float)((float)((float)((float)(a3.f32[0] + v23.f32[3]) + v24.f32[0])
                                                                   + v24.f32[1])
                                                           + v24.f32[2])
                                                   + v24.f32[3])
                                           + v22.f32[0])
                                   + v22.f32[1])
                           + v22.f32[2])
                   + v22.f32[3];
        result = v7 + ((v4 << 6) | 0x20);
        v25 = *(int8x16_t *)(result + 16);
        v26 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(*(int8x8_t *)result, *(int8x8_t *)v25.i8) & 0xFF00FF00FF00FFLL)));
        v21.i64[0] = vextq_s8(*(int8x16_t *)result, *(int8x16_t *)result, 8uLL).u64[0];
        v27 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(*(int8x8_t *)result, *(int8x8_t *)v25.i8) & 0xFF00FF00FF00FFLL)));
        v22.f32[0] = (float)((float)((float)((float)((float)((float)(v22.f32[0] + v26.f32[0]) + v26.f32[1]) + v26.f32[2])
                                           + v26.f32[3])
                                   + v27.f32[0])
                           + v27.f32[1])
                   + v27.f32[2];
        v28 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(*(int8x8_t *)v21.f32, *(int8x8_t *)v25.i8) & 0xFF00FF00FF00FFLL)));
        v27.f32[0] = (float)((float)((float)(v22.f32[0] + v27.f32[3]) + v28.f32[0]) + v28.f32[1]) + v28.f32[2];
        v29 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(*(int8x8_t *)v21.f32, *(int8x8_t *)v25.i8) & 0xFF00FF00FF00FFLL)));
        v28.i32[0] = v29.i32[3];
        v27.f32[0] = (float)((float)((float)(v27.f32[0] + v28.f32[3]) + v29.f32[0]) + v29.f32[1]) + v29.f32[2];
        v30 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(*(int8x8_t *)v25.i8, *(int8x8_t *)v25.i8) & 0xFF00FF00FF00FFLL)));
        v27.f32[0] = (float)((float)((float)(v27.f32[0] + v28.f32[0]) + v30.f32[0]) + v30.f32[1]) + v30.f32[2];
        v28.i64[0] = vextq_s8(v25, v25, 8uLL).u64[0];
        a3 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(*(int8x8_t *)v25.i8, *(int8x8_t *)v25.i8) & 0xFF00FF00FF00FFLL)));
        v27.f32[0] = (float)((float)((float)(v27.f32[0] + v30.f32[3]) + a3.f32[0]) + a3.f32[1]) + a3.f32[2];
        v31 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(*(int8x8_t *)v28.f32, *(int8x8_t *)a3.f32) & 0xFF00FF00FF00FFLL)));
        a3.f32[0] = (float)((float)((float)(v27.f32[0] + a3.f32[3]) + v31.f32[0]) + v31.f32[1]) + v31.f32[2];
        v32 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(*(int8x8_t *)v28.f32, *(int8x8_t *)a3.f32) & 0xFF00FF00FF00FFLL)));
        a3.f32[0] = (float)((float)((float)(a3.f32[0] + v31.f32[3]) + v32.f32[0]) + v32.f32[1]) + v32.f32[2];
        a4 = v32.f32[3];
        *(float *)(v8 + 4 * v4) = a3.f32[0] + v32.f32[3];
      }
      else
      {
        for (result = 0; result != 64; ++result)
        {
          LOBYTE(a4) = *(_BYTE *)(v13 + result);
          a4 = (float)LODWORD(a4);
          a3.f32[0] = a3.f32[0] + a4;
          *(_DWORD *)(v8 + 4 * v4) = a3.i32[0];
        }
      }
      ++v4;
      ++v6;
      v13 += 64;
    }
    while (v4 != v5);
  }
  return result;
}

uint64_t sub_2393C2B60(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = 500 * a2;
  v3 = *(unsigned int *)(*(_QWORD *)(result + 32) + 292);
  if (500 * a2 + 500 < v3)
    v3 = 500 * a2 + 500;
  if (v2 < v3)
  {
    v4 = 2000 * a2;
    v5 = 8000 * a2;
    v6 = 10000 * a2 + 16;
    do
    {
      if (*(_BYTE *)(*(_QWORD *)(result + 40) + v2))
      {
        v7 = *(_QWORD *)(result + 56) + v6;
        *(float *)(**(_QWORD **)(result + 48) + v4) = *(float *)(v7 - 16) + *(float *)(**(_QWORD **)(result + 48) + v4);
        v8 = *(_QWORD *)(result + 72);
        *(_DWORD *)(*(_QWORD *)(result + 64) + v4) = *(_DWORD *)(v7 - 12);
        *(float *)(v8 + v5) = *(float *)(v7 - 8) + *(float *)(v8 + v5);
        *(float *)(*(_QWORD *)(result + 72) + 4 * v4 + 4) = *(float *)(*(_QWORD *)(result + 56) + v6 - 4)
                                                          + *(float *)(*(_QWORD *)(result + 72) + 4 * v4 + 4);
        *(float *)(*(_QWORD *)(result + 72) + 4 * v4 + 8) = *(float *)(*(_QWORD *)(result + 56) + v6)
                                                          + *(float *)(*(_QWORD *)(result + 72) + 4 * v4 + 8);
        ++*(_DWORD *)(*(_QWORD *)(result + 80) + v4);
      }
      ++v2;
      v4 += 4;
      v5 += 16;
      v6 += 20;
    }
    while (v3 != v2);
  }
  return result;
}

uint64_t sub_2393C2C58(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float *v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  BOOL v30;
  float32x4_t *v32;
  float32x4_t *v33;
  uint64_t v34;
  float32x4_t v35;
  float32x4_t v36;
  uint64_t v37;
  uint64_t v38;
  float *v39;
  float *v40;
  float v41;
  float v42;
  float v43;

  v2 = 500 * a2;
  v3 = *(unsigned int *)(*(_QWORD *)(result + 32) + 292);
  if (500 * a2 + 500 < v3)
    v3 = 500 * a2 + 500;
  if (v2 < v3)
  {
    v4 = 0;
    v5 = *(_QWORD *)(result + 40);
    v6 = (2000 * a2) | 4;
    v7 = 256000 * a2;
    v8 = (256000 * a2) | 0x10;
    v9 = 64000 * a2;
    v10 = 256000 * a2;
    do
    {
      v11 = *(unsigned int *)(v5 + 4 * v2);
      if ((_DWORD)v11)
      {
        v12 = *(_QWORD *)(result + 56);
        v13 = **(_QWORD **)(result + 48);
        v14 = (float *)(v13 + 4 * v2);
        v15 = *(_QWORD *)(result + 64);
        v16 = *(_QWORD *)(result + 72);
        v17 = *v14;
        if (v16)
        {
          v18 = 0;
          v19 = *(_DWORD *)(v16 + 4 * v2) + 1;
          v20 = v15 + v10;
          v21 = v12 + v10;
          do
          {
            v17 = v17
                + (float)(*(float *)(v21 + 4 * v18) * (float)(*(float *)(v20 + 4 * v18) * *(float *)(v20 + 4 * v18)));
            *v14 = v17;
            *(_DWORD *)(v16 + 4 * v2) = v19 + v18++;
          }
          while (v18 < *(unsigned int *)(v5 + 4 * v2));
        }
        else
        {
          if (v11 >= 0xC)
          {
            v22 = 0;
            v23 = v7 + (v4 << 9);
            v24 = v13 + v6 + 4 * v4;
            v25 = v12 + v23;
            v26 = v23 + 4 * v11;
            v27 = v12 + v26;
            v28 = v15 + v23;
            v30 = (unint64_t)v14 < v15 + v26 && v28 < v24;
            if ((v25 >= v24 || (unint64_t)v14 >= v27) && !v30)
            {
              v22 = v11 & 0xFFFFFFF8;
              v32 = (float32x4_t *)(v12 + v8);
              v33 = (float32x4_t *)(v15 + v8);
              v34 = v22;
              do
              {
                v35 = vmulq_f32(v32[-1], vmulq_f32(v33[-1], v33[-1]));
                v36 = vmulq_f32(*v32, vmulq_f32(*v33, *v33));
                v17 = (float)((float)((float)((float)((float)((float)((float)(v17 + v35.f32[0]) + v35.f32[1])
                                                            + v35.f32[2])
                                                    + v35.f32[3])
                                            + v36.f32[0])
                                    + v36.f32[1])
                            + v36.f32[2])
                    + v36.f32[3];
                v32 += 2;
                v33 += 2;
                v34 -= 8;
              }
              while (v34);
              *v14 = v17;
              if (v22 == v11)
                goto LABEL_5;
            }
          }
          else
          {
            v22 = 0;
          }
          v37 = v11 - v22;
          v38 = 4 * (v22 + v9);
          v39 = (float *)(v15 + v38);
          v40 = (float *)(v12 + v38);
          do
          {
            v41 = *v40++;
            v42 = v41;
            v43 = *v39++;
            v17 = v17 + (float)(v42 * (float)(v43 * v43));
            *v14 = v17;
            --v37;
          }
          while (v37);
        }
      }
LABEL_5:
      ++v2;
      ++v4;
      v10 += 512;
      v8 += 512;
      v9 += 128;
    }
    while (v2 != v3);
  }
  return result;
}

uint64_t sub_2393C2E44(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  unint64_t v5;
  const char *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  int32x4_t *v16;
  int32x4_t *v17;
  __int32 v18;
  unint64_t v19;
  unint64_t v20;
  int32x4_t v21;
  int32x4_t *v22;
  uint64_t v23;
  float32x4_t *v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  float32x4_t *v31;
  unint64_t v32;
  uint64_t v33;
  float32x4_t v34;
  float32x4_t *v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  size_t v40;
  const char *v41;
  uint64_t v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  size_t v46;
  const char *v47;
  uint64_t v48;
  void *v49;
  const char *v50;
  uint64_t v51;
  size_t v52;
  const char *v53;
  uint64_t v54;
  void *v55;
  const char *v56;
  uint64_t v57;
  size_t v58;
  uint64_t v59;
  uint64_t v60;
  float32x4_t *v61;
  float32x2_t v62;
  const char *v63;
  uint64_t v64;
  void *v65;
  const char *v66;
  uint64_t v67;
  size_t v68;
  float v69;
  float32x4_t v70;
  float32x4_t v71;
  uint32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  uint32x4_t v77;
  float32x4_t v78;
  float v79;
  uint32x2_t v80;
  float v81;
  float v82;
  float v83;
  float v84;
  unsigned int v85;
  unint64_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  const char *v93;
  uint64_t v94;
  id v95;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  const char *v99;
  void *v100;
  const char *v101;
  const char *v102;
  const char *v103;
  const char *v104;
  const char *v105;
  const char *v106;
  const char *v107;
  const char *v108;
  const char *v109;
  const char *v110;
  uint64_t v111;
  id v112;
  const char *v113;
  uint64_t v114;
  void *v115;
  void *v116;
  const char *v117;
  const char *v118;
  const char *v119;
  const char *v120;
  const char *v121;
  const char *v122;
  const char *v123;
  uint64_t v124;
  uint64_t v125;
  const char *v126;
  uint64_t v127;
  unint64_t v128;
  const char *v129;
  uint64_t v130;
  unint64_t v131;
  const char *v132;
  const char *v133;
  uint64_t v134;
  const char *v135;
  uint64_t v136;
  const char *v137;
  uint64_t v138;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  __int128 v145;
  _OWORD v146[4];
  uint64_t v147;
  uint64_t v148;
  float64x2_t v149;
  __int128 v150;
  _QWORD v151[4];

  if (*(_DWORD *)(a1 + 192) == 4)
  {
    v3 = *(_QWORD **)(a1 + 128);
    if (v3)
    {
      if (*v3 && v3[1] && v3[2])
      {
        v5 = *(unsigned int *)(a1 + 292);
        LODWORD(v146[0]) = 0;
        sub_2393C1758((uint64_t)(v3 + 6), v5, (const float *)v146);
        v8 = *(_QWORD **)(a1 + 128);
        v9 = *(unsigned int *)(a1 + 292);
        v10 = (char *)v8[9];
        LODWORD(v146[0]) = 0;
        v11 = v8[11];
        if (v9 > (v11 - (uint64_t)v10) >> 2)
        {
          if (v10)
          {
            v8[10] = v10;
            operator delete(v10);
            v11 = 0;
            v8[9] = 0;
            v8[10] = 0;
            v8[11] = 0;
          }
          v12 = v11 >> 1;
          if (v11 >> 1 <= v9)
            v12 = v9;
          v13 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL;
          v14 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v13)
            v14 = v12;
          if (v14 >> 62)
            abort();
          v15 = 4 * v14;
          v16 = (int32x4_t *)operator new(4 * v14);
          v8[9] = v16;
          v8[11] = (char *)v16 + v15;
          v17 = (int32x4_t *)((char *)v16 + 4 * v9);
          v18 = v146[0];
          v19 = (v9 - 1) & 0x3FFFFFFFFFFFFFFFLL;
          if (v19 >= 7)
          {
            v20 = v19 + 1;
            v21 = vdupq_n_s32(v146[0]);
            v22 = v16 + 1;
            v23 = v20 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v22[-1] = v21;
              *v22 = v21;
              v22 += 2;
              v23 -= 8;
            }
            while (v23);
            if (v20 == (v20 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_46;
            v16 = (int32x4_t *)((char *)v16 + 4 * (v20 & 0x7FFFFFFFFFFFFFF8));
          }
          do
          {
            v16->i32[0] = v18;
            v16 = (int32x4_t *)((char *)v16 + 4);
          }
          while (v16 != v17);
LABEL_46:
          v8[10] = v17;
LABEL_47:
          if (*a2 != a2[1])
          {
            v37 = (void *)objc_msgSend_contents(*(void **)(a1 + 136), v6, v7);
            v40 = objc_msgSend_length(*(void **)(a1 + 136), v38, v39);
            bzero(v37, v40);
            v43 = (void *)objc_msgSend_contents(*(void **)(a1 + 464), v41, v42);
            v46 = objc_msgSend_length(*(void **)(a1 + 464), v44, v45);
            bzero(v43, v46);
            v49 = (void *)objc_msgSend_contents(*(void **)(a1 + 472), v47, v48);
            v52 = objc_msgSend_length(*(void **)(a1 + 472), v50, v51);
            bzero(v49, v52);
            v55 = (void *)objc_msgSend_contents(*(void **)(a1 + 480), v53, v54);
            v58 = objc_msgSend_length(*(void **)(a1 + 480), v56, v57);
            bzero(v55, v58);
            v59 = *a2;
            v60 = a2[1];
            if (*a2 != v60)
            {
              v61 = (float32x4_t *)MEMORY[0x24BDAEDF8];
              v140 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
              v62 = (float32x2_t)vdup_n_s32(0x38D1B717u);
              do
              {
                kdebug_trace();
                v65 = (void *)objc_msgSend_contents(*(void **)(a1 + 456), v63, v64);
                v68 = objc_msgSend_length(*(void **)(a1 + 456), v66, v67);
                bzero(v65, v68);
                v145 = *(_OWORD *)(v59 + 112);
                v142 = *(float32x4_t *)(v59 + 128);
                v143 = *(float32x4_t *)(v59 + 144);
                v144 = *(float32x4_t *)(v59 + 160);
                v141 = *(float32x4_t *)(v59 + 176);
                v69 = atan2f((float)*(unsigned int *)(v59 + 4), *(float *)(v59 + 36) + *(float *)(v59 + 36));
                v70 = v61[1];
                v71 = v61[2];
                v72 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v140, vabdq_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v142, *(float32x2_t *)v142.f32, 1), v143, *(float32x2_t *)v143.f32, 1), v144, *(float32x2_t *)v144.f32, 1), v70)), (int8x16_t)vcgeq_f32(v140, vabdq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v142, v142.f32[0]), v143, v143.f32[0]),
                                                       v144,
                                                       v144.f32[0]),
                                                     *v61))),
                                    (int8x16_t)vcgeq_f32(v140, vabdq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v142, v142, 2), v143, v143, 2), v144, v144, 2), v71)));
                v72.i32[3] = v72.i32[2];
                if ((vminvq_u32(v72) & 0x80000000) == 0)
                  return 0;
                v73 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v143, 2);
                v74 = (float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)v142, (int32x4_t)v144), (int32x4_t)v73);
                v75 = (float32x4_t)vtrn2q_s32((int32x4_t)v142, (int32x4_t)v143);
                v75.i32[2] = v144.i32[1];
                v76 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)v142, (int32x4_t)v144), (int32x4_t)v143);
                v77 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v140, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v76, v143.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v143.f32, 1), v75), v73, v74), v70)), (int8x16_t)vcgeq_f32(v140, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v76, v142.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v142.f32, 1),
                                                         v75),
                                                       (float32x4_t)vdupq_laneq_s32((int32x4_t)v142, 2),
                                                       v74),
                                                     *v61))),
                                    (int8x16_t)vcgeq_f32(v140, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v76, v144.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v144.f32, 1), v75), (float32x4_t)vdupq_laneq_s32((int32x4_t)v144, 2), v74), v71)));
                v77.i32[3] = v77.i32[2];
                if ((vminvq_u32(v77) & 0x80000000) == 0)
                  return 0;
                v78 = vmulq_f32(v142, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v144, (int8x16_t)v144, 0xCuLL), (int8x16_t)v144, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v143, (int32x4_t)v143), (int8x16_t)v143, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v144, (int32x4_t)v144), (int8x16_t)v144, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v143, (int8x16_t)v143, 0xCuLL), (int8x16_t)v143, 8uLL)));
                if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v78, 2), vaddq_f32(v78, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v78.f32, 1))).f32[0]+ -1.0) > 0.000011)return 0;
                v79 = v69 + v69;
                if (v79 >= 3.1416)
                  return 0;
                if (v79 <= 0.0)
                  return 0;
                v80 = (uint32x2_t)vand_s8((int8x8_t)vcge_f32(v62, vabs_f32(vadd_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v144, (int8x16_t)v144, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v141, (int8x16_t)v141, 8uLL)), (float32x2_t)0xBF80000080000000))), (int8x8_t)vcge_f32(v62, vabs_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v142,
                                                                                                 (int8x16_t)v142,
                                                                                                 8uLL),
                                                                        (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v143, (int8x16_t)v143, 8uLL)))));
                if ((vpmin_u32(v80, v80).u32[0] & 0x80000000) == 0)
                  return 0;
                v81 = (float)*(unint64_t *)(a1 + 208) / (float)*(unint64_t *)(a1 + 216);
                if (v81 < 0.001)
                  return 0;
                if (v79 < 0.0)
                  return 0;
                if (fabsf(v79) <= 0.000001)
                  return 0;
                v82 = *(float *)(a1 + 200);
                v83 = *(float *)(a1 + 204);
                if (v83 <= v82 || v83 < 0.001 || v82 < 0.001 || fabsf(v79 + -3.1416) <= 0.000032416)
                  return 0;
                v84 = 1.0 / tanf(v79 * 0.5);
                *(float *)&v85 = v84 / v81;
                LODWORD(v86) = 0;
                *((float *)&v86 + 1) = v84;
                v87.i64[0] = 0;
                v87.f32[2] = (float)-v83 / (float)(v83 - v82);
                v87.i32[3] = -1.0;
                v88.i64[0] = 0;
                v88.i32[3] = 0;
                v88.f32[2] = v87.f32[2] * v82;
                v89 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v142, COERCE_FLOAT(*(_OWORD *)(a1 + 224))), v143, *(float32x2_t *)(a1 + 224), 1), v144, *(float32x4_t *)(a1 + 224), 2), v141, *(float32x4_t *)(a1 + 224), 3);
                v90 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v142, COERCE_FLOAT(*(_OWORD *)(a1 + 240))), v143, *(float32x2_t *)(a1 + 240), 1), v144, *(float32x4_t *)(a1 + 240), 2), v141, *(float32x4_t *)(a1 + 240), 3);
                v91 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v142, COERCE_FLOAT(*(_OWORD *)(a1 + 256))), v143, *(float32x2_t *)(a1 + 256), 1), v144, *(float32x4_t *)(a1 + 256), 2), v141, *(float32x4_t *)(a1 + 256), 3);
                v92 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v142, COERCE_FLOAT(*(_OWORD *)(a1 + 272))), v143, *(float32x2_t *)(a1 + 272), 1), v144, *(float32x4_t *)(a1 + 272), 2), v141, *(float32x4_t *)(a1 + 272), 3);
                v146[0] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v85, v89.f32[0]), (float32x4_t)v86, *(float32x2_t *)v89.f32, 1), v87, v89, 2), v88, v89, 3);
                v146[1] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v85, v90.f32[0]), (float32x4_t)v86, *(float32x2_t *)v90.f32, 1), v87, v90, 2), v88, v90, 3);
                v146[2] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v85, v91.f32[0]), (float32x4_t)v86, *(float32x2_t *)v91.f32, 1), v87, v91, 2), v88, v91, 3);
                v146[3] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v85, v92.f32[0]), (float32x4_t)v86, *(float32x2_t *)v92.f32, 1), v87, v92, 2), v88, v92, 3);
                objc_msgSend_commandBuffer(*(void **)(*(_QWORD *)a1 + 8), v93, v94);
                v95 = (id)objc_claimAutoreleasedReturnValue();
                v98 = *(unsigned int *)objc_msgSend_contents(*(void **)(*(_QWORD *)(a1 + 128) + 16), v96, v97);
                objc_msgSend_renderCommandEncoderWithDescriptor_(v95, v99, *(_QWORD *)(a1 + 176));
                v100 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_setLabel_(v100, v101, (uint64_t)CFSTR("VisibleMeshVertexIndexRenderEncoder"));
                objc_msgSend_setRenderPipelineState_(v100, v102, *(_QWORD *)(a1 + 40));
                objc_msgSend_setDepthStencilState_(v100, v103, *(_QWORD *)(a1 + 48));
                objc_msgSend_setVertexBuffer_offset_atIndex_(v100, v104, *(_QWORD *)(*(_QWORD *)(a1 + 128) + 24), 0, 0);
                objc_msgSend_setVertexBuffer_offset_atIndex_(v100, v105, *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8), 0, 1);
                objc_msgSend_setVertexBytes_length_atIndex_(v100, v106, (uint64_t)v146, 64, 2);
                objc_msgSend_setVertexBytes_length_atIndex_(v100, v107, a1 + 224, 64, 3);
                objc_msgSend_drawPrimitives_vertexStart_vertexCount_(v100, v108, 3, 0, v98);
                v147 = 0;
                v148 = 0;
                v149 = vcvtq_f64_u64(*(uint64x2_t *)(a1 + 208));
                v150 = xmmword_2393F5400;
                objc_msgSend_setViewport_(v100, v109, (uint64_t)&v147);
                objc_msgSend_endEncoding(v100, v110, v111);

                v112 = v95;
                v115 = v112;
                if (*(_DWORD *)(a1 + 192) == 4)
                {
                  objc_msgSend_computeCommandEncoder(v112, v113, v114);
                  v116 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_setLabel_(v116, v117, (uint64_t)CFSTR("FetchVisiblemeshVertexEncoder"));
                  objc_msgSend_setComputePipelineState_(v116, v118, *(_QWORD *)(a1 + 16));
                  objc_msgSend_setTexture_atIndex_(v116, v119, *(_QWORD *)(a1 + 144), 0);
                  objc_msgSend_setBytes_length_atIndex_(v116, v120, a1 + 292, 4, 0);
                  objc_msgSend_setBuffer_offset_atIndex_(v116, v121, *(_QWORD *)(*(_QWORD *)(a1 + 128) + 16), 0, 1);
                  objc_msgSend_setBuffer_offset_atIndex_(v116, v122, *(_QWORD *)(*(_QWORD *)(a1 + 128) + 24), 0, 2);
                  objc_msgSend_setBuffer_offset_atIndex_(v116, v123, *(_QWORD *)(a1 + 456), 0, 3);
                  v124 = *(_QWORD *)(a1 + 208);
                  v125 = *(_QWORD *)(a1 + 216);
                  v128 = objc_msgSend_threadExecutionWidth(*(void **)(a1 + 8), v126, v127);
                  v131 = objc_msgSend_maxTotalThreadsPerThreadgroup(*(void **)(a1 + 8), v129, v130);
                  v147 = v124;
                  v148 = v125;
                  *(_QWORD *)&v149.f64[0] = 1;
                  v151[0] = v128;
                  v151[1] = v131 / v128;
                  v151[2] = 1;
                  objc_msgSend_dispatchThreads_threadsPerThreadgroup_(v116, v132, (uint64_t)&v147, v151);
                  objc_msgSend_endEncoding(v116, v133, v134);

                }
                if (*(_DWORD *)(a1 + 192) == 4)
                  sub_2393C222C(a1, v115, (uint64_t)&v145);
                objc_msgSend_commit(v115, v135, v136);
                objc_msgSend_waitUntilCompleted(v115, v137, v138);

                kdebug_trace();
                v59 += 192;
              }
              while (v59 != v60);
            }
            sub_2393C23E0(a1, (const char *)(*(_QWORD *)(a1 + 128) + 48), *(_QWORD *)(*(_QWORD *)(a1 + 128) + 72));
          }
          return 1;
        }
        v24 = (float32x4_t *)v8[10];
        v25 = ((char *)v24 - v10) >> 2;
        if (v25 >= v9)
          v26 = v9;
        else
          v26 = ((char *)v24 - v10) >> 2;
        if (v26)
        {
          if (v26 < 8)
          {
            v27 = v10;
            goto LABEL_34;
          }
          if (v10 < (char *)v146 + 4 && &v10[4 * v26] > (char *)v146)
          {
            v27 = v10;
            goto LABEL_34;
          }
          v27 = &v10[4 * (v26 & 0xFFFFFFF8)];
          v28 = v10;
          v29 = v26 & 0xFFFFFFF8;
          do
          {
            *(_OWORD *)v28 = 0uLL;
            *((_OWORD *)v28 + 1) = 0uLL;
            v28 += 32;
            v29 -= 8;
          }
          while (v29);
          if (v26 != (v26 & 0xFFFFFFF8))
          {
            v26 &= 7u;
            do
            {
LABEL_34:
              *(_DWORD *)v27 = v146[0];
              v27 += 4;
              --v26;
            }
            while (v26);
          }
        }
        v13 = v9 >= v25;
        v30 = v9 - v25;
        if (v30 == 0 || !v13)
        {
          v17 = (int32x4_t *)&v10[4 * v9];
          goto LABEL_46;
        }
        v31 = (float32x4_t *)((char *)v24 + 4 * v30);
        v32 = 4 * v9 - (((char *)v24 - v10) & 0xFFFFFFFFFFFFFFFCLL) - 4;
        if (v32 >= 0x4C
          && (v24 >= (float32x4_t *)((char *)v146 + 4)
           || (char *)v24 + 4 * v9 - (((char *)v24 - v10) & 0xFFFFFFFFFFFFFFFCLL) <= (char *)v146))
        {
          v33 = (v32 >> 2) + 1;
          v34 = vld1q_dup_f32((const float *)v146);
          v35 = v24 + 1;
          v36 = v33 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v35[-1] = v34;
            *v35 = v34;
            v35 += 2;
            v36 -= 8;
          }
          while (v36);
          if (v33 == (v33 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_45;
          v24 = (float32x4_t *)((char *)v24 + 4 * (v33 & 0x7FFFFFFFFFFFFFF8));
        }
        do
        {
          v24->i32[0] = v146[0];
          v24 = (float32x4_t *)((char *)v24 + 4);
        }
        while (v24 != v31);
LABEL_45:
        v8[10] = v31;
        goto LABEL_47;
      }
    }
  }
  return 0;
}

void sub_2393C37D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2393C3818(_QWORD *a1, const char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  _QWORD v8[8];

  v3 = a1[4];
  v4 = a1[5];
  v5 = a1[6];
  v6 = objc_msgSend_contents(*(void **)(v3 + 136), a2, a3);
  v7 = vcvtps_u32_f32((float)*(unsigned int *)(v3 + 292) / 500.0);
  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 3221225472;
  v8[2] = sub_2393C38AC;
  v8[3] = &unk_250AD60F0;
  v8[4] = v3;
  v8[5] = v5;
  v8[6] = v4;
  v8[7] = v6;
  dispatch_apply(v7, 0, v8);
}

unint64_t sub_2393C38AC(unint64_t result, uint64_t a2, double a3, float a4, double a5, double a6, double a7, int8x16_t a8)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float *v14;
  _BYTE *v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int8x16_t *v27;
  int8x16_t *v28;
  float v29;
  unint64_t v30;
  uint64_t v31;
  int8x16_t *v32;
  unint64_t v33;
  int8x16_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float v37;
  float32x4_t v38;
  float v39;
  int8x16_t v40;
  float32x4_t v41;
  float v42;
  float32x4_t v43;
  float v44;
  float32x4_t v45;
  float v46;
  float v47;
  float32x4_t v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  uint32x4_t v52;
  float32x4_t v53;

  v8 = 500 * a2;
  v9 = 500 * a2 + 500;
  if (v9 >= *(unsigned int *)(*(_QWORD *)(result + 32) + 292))
    v9 = *(unsigned int *)(*(_QWORD *)(result + 32) + 292);
  v10 = v9 - v8;
  if (v9 > v8)
  {
    v11 = *(_QWORD *)(result + 40);
    if (v11)
    {
      v12 = *(_QWORD *)(result + 56);
      v13 = **(_QWORD **)(result + 48);
      if (v11 < 8)
      {
        v14 = (float *)(v13 + 2000 * a2);
        v15 = (_BYTE *)(v12 + 64000 * a2 + 3);
        do
        {
          LOBYTE(a4) = *(v15 - 3);
          a4 = (float)LODWORD(a4);
          v16 = *v14 + a4;
          *v14 = v16;
          if (v11 != 1)
          {
            LOBYTE(a4) = *(v15 - 2);
            a4 = (float)LODWORD(a4);
            v17 = v16 + a4;
            *v14 = v17;
            if (v11 != 2)
            {
              LOBYTE(a4) = *(v15 - 1);
              a4 = (float)LODWORD(a4);
              v18 = v17 + a4;
              *v14 = v18;
              if (v11 != 3)
              {
                LOBYTE(a4) = *v15;
                a4 = (float)LODWORD(a4);
                v19 = v18 + a4;
                *v14 = v19;
                if (v11 != 4)
                {
                  LOBYTE(a4) = v15[1];
                  a4 = (float)LODWORD(a4);
                  v20 = v19 + a4;
                  *v14 = v20;
                  if (v11 != 5)
                  {
                    LOBYTE(a4) = v15[2];
                    a4 = (float)LODWORD(a4);
                    v21 = v20 + a4;
                    *v14 = v21;
                    if (v11 != 6)
                    {
                      LOBYTE(a4) = v15[3];
                      a4 = (float)LODWORD(a4);
                      *v14 = v21 + a4;
                    }
                  }
                }
              }
            }
          }
          ++v14;
          v15 += 128;
          --v10;
        }
        while (v10);
        return result;
      }
      v22 = 0;
      v23 = 2000 * a2;
      v24 = (2000 * a2) | 4;
      v25 = 64000 * a2;
      v26 = v11 + 64000 * a2;
      result = v11 & 0xFFFFFFFFFFFFFFE0;
      v27 = (int8x16_t *)(v12 + 64000 * a2);
      v28 = v27 + 1;
      do
      {
        v29 = *(float *)(v13 + 4 * v8);
        if (v13 + v23 + 4 * v22 >= v12 + v26 + (v22 << 7)
          || v12 + v25 + (v22 << 7) >= (unint64_t)(v13 + v24 + 4 * v22))
        {
          if (v11 < 0x20)
          {
            v31 = 0;
LABEL_26:
            v49 = v31 - (v11 & 0xFFFFFFFFFFFFFFF8);
            v50 = (unint64_t *)((char *)v27->u64 + v31);
            do
            {
              v51 = *v50++;
              a8.i64[0] = v51;
              v52 = (uint32x4_t)vqtbl1q_s8(a8, (int8x16_t)xmmword_2393F54B0);
              a8 = (int8x16_t)vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a8, (int8x16_t)xmmword_2393F54C0));
              v53 = vcvtq_f32_u32(v52);
              v29 = (float)((float)((float)((float)((float)((float)((float)(v29 + v53.f32[0]) + v53.f32[1]) + v53.f32[2])
                                                  + v53.f32[3])
                                          + *(float *)a8.i32)
                                  + *(float *)&a8.i32[1])
                          + *(float *)&a8.i32[2])
                  + *(float *)&a8.i32[3];
              v49 += 8;
            }
            while (v49);
            *(float *)(v13 + 4 * v8) = v29;
            v30 = v11 & 0xFFFFFFFFFFFFFFF8;
            if (v11 == (v11 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_16;
            goto LABEL_29;
          }
          v32 = v28;
          v33 = v11 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v34 = v32[-1];
            v35 = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v34, (int8x16_t)xmmword_2393F54B0));
            v36 = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v34, (int8x16_t)xmmword_2393F54C0));
            v37 = (float)((float)((float)((float)((float)((float)(v29 + v35.f32[0]) + v35.f32[1]) + v35.f32[2])
                                        + v35.f32[3])
                                + v36.f32[0])
                        + v36.f32[1])
                + v36.f32[2];
            v38 = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v34, (int8x16_t)xmmword_2393F54D0));
            v39 = (float)((float)((float)(v37 + v36.f32[3]) + v38.f32[0]) + v38.f32[1]) + v38.f32[2];
            v40 = *v32;
            v32 += 2;
            v41 = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v34, (int8x16_t)xmmword_2393F54E0));
            v38.i32[0] = v41.i32[3];
            v42 = (float)((float)((float)(v39 + v38.f32[3]) + v41.f32[0]) + v41.f32[1]) + v41.f32[2];
            v43 = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v40, (int8x16_t)xmmword_2393F54B0));
            v44 = (float)((float)((float)(v42 + v38.f32[0]) + v43.f32[0]) + v43.f32[1]) + v43.f32[2];
            v45 = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v40, (int8x16_t)xmmword_2393F54C0));
            v46 = (float)((float)((float)(v44 + v43.f32[3]) + v45.f32[0]) + v45.f32[1]) + v45.f32[2];
            a8 = (int8x16_t)vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v40, (int8x16_t)xmmword_2393F54D0));
            v47 = (float)((float)((float)(v46 + v45.f32[3]) + *(float *)a8.i32) + *(float *)&a8.i32[1])
                + *(float *)&a8.i32[2];
            v48 = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v40, (int8x16_t)xmmword_2393F54E0));
            a8.i32[0] = v48.i32[3];
            v29 = (float)((float)((float)((float)(v47 + *(float *)&a8.i32[3]) + v48.f32[0]) + v48.f32[1]) + v48.f32[2])
                + v48.f32[3];
            v33 -= 32;
          }
          while (v33);
          *(float *)(v13 + 4 * v8) = v29;
          if (v11 == result)
            goto LABEL_16;
          v31 = v11 & 0xFFFFFFFFFFFFFFE0;
          v30 = v11 & 0xFFFFFFFFFFFFFFE0;
          if ((v11 & 0x18) != 0)
            goto LABEL_26;
        }
        else
        {
          v30 = 0;
        }
        do
        {
LABEL_29:
          a8.i8[0] = v27->i8[v30];
          *(float *)a8.i32 = (float)a8.u32[0];
          v29 = v29 + *(float *)a8.i32;
          *(float *)(v13 + 4 * v8) = v29;
          ++v30;
        }
        while (v11 != v30);
LABEL_16:
        ++v8;
        ++v22;
        v28 += 8;
        v27 += 8;
      }
      while (v8 != v9);
    }
  }
  return result;
}

void sub_2393C3C6C()
{
  JUMPOUT(0x23B83C4BCLL);
}

uint64_t sub_2393C3C80()
{
  return 0;
}

void sub_2393C3C8C()
{
  JUMPOUT(0x23B83C4BCLL);
}

uint64_t sub_2393C3CA0()
{
  return 1;
}

_QWORD *sub_2393C3CA8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  *a1 = &off_250AD6228;
  v2 = a1[4];
  if (v2)
  {
    v3 = a1[5];
    v4 = (void *)a1[4];
    if (v3 != v2)
    {
      v5 = a1[5];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[4];
    }
    a1[5] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_2393C3D28(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  *a1 = &off_250AD6228;
  v2 = a1[4];
  if (v2)
  {
    v3 = a1[5];
    v4 = (void *)a1[4];
    if (v3 != v2)
    {
      v5 = a1[5];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[4];
    }
    a1[5] = v2;
    operator delete(v4);
  }
  JUMPOUT(0x23B83C4BCLL);
}

uint64_t sub_2393C3DB8(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  result = 0;
  if (a2 >= 2 && (a2 & 1) != 0)
  {
    if (*(_BYTE *)(a1 + 24))
    {
      *(_QWORD *)(a1 + 8) = a2;
      sub_2393C3FFC((_QWORD *)a1);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_2393C3DFC(uint64_t a1, _QWORD *a2, unint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  float v11;
  int v12;
  int v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  float v20;
  float v21;
  float v22;
  float v23;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;

  v4 = 0;
  if (!a2)
    goto LABEL_23;
  v6 = 0;
  if (!*(_BYTE *)(a1 + 24))
    return v6 | v4;
  if (!a2[1] || (v7 = a2[3]) == 0)
  {
    v4 = 0;
    v6 = 0;
    return v6 | v4;
  }
  v4 = 0;
  if (v7 <= a3)
  {
LABEL_23:
    v6 = 0;
    return v6 | v4;
  }
  v6 = 0;
  v28 = a2[4];
  if (v28 > a4)
  {
    v8 = *(_QWORD *)(a1 + 8);
    v9 = v8 >> 1;
    v10 = a4 - (v8 >> 1);
    v11 = 0.0;
    v29 = (v8 >> 1) + a4;
    if (v10 >= v29 || (int)v8 < 1)
    {
      v14 = 0.0;
    }
    else
    {
      v27 = a2[1];
      v12 = a3 - v9;
      v13 = v9 + a3;
      v14 = 0.0;
      if ((int)a3 - (int)v9 < (int)v9 + (int)a3)
      {
        v15 = 0;
        v26 = a2[5];
        v30 = v27 + v26 * a4;
        v16 = (int)v8;
        do
        {
          if ((v10 & 0x80000000) == 0 && v10 < (int)v28)
          {
            v17 = 0;
            v18 = 1;
            do
            {
              v19 = v12 + v18 - 1;
              if ((v19 & 0x80000000) == 0 && v19 < (int)v7)
              {
                v20 = *(float *)(v27 + v26 * v10 + 4 * v19);
                v21 = *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + v17) + 4 * v15);
                v22 = *(float *)(a1 + 20) * *(float *)(a1 + 20);
                v23 = v21
                    * (float)((float)(expf((float)((float)((float)(*(float *)(v30 + 4 * a3) - v20)* (float)(*(float *)(v30 + 4 * a3) - v20))* -0.5)/ v22)* 0.15915)/ v22);
                v11 = v11 + (float)(v23 * v20);
                v14 = v14 + v23;
              }
              if (v12 + (int)v18 >= v13)
                break;
              v17 += 24;
            }
            while (v18++ < v16);
          }
          if (++v10 >= v29)
            break;
          ++v15;
        }
        while (v15 < v16);
      }
    }
    v6 = COERCE_UNSIGNED_INT(v11 / v14);
    v4 = 0x100000000;
  }
  return v6 | v4;
}

void sub_2393C3FFC(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  void *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  char **v23;
  char *v24;
  char *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  _QWORD *v34;
  _QWORD *v35;
  __int128 v36;
  _QWORD *v37;
  _QWORD *v38;
  void *v39;
  void *v40;
  unint64_t v41;
  unint64_t v42;
  unsigned int v43;
  float *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t i;
  uint64_t v49;
  int v50;
  uint64_t v51;
  float v52;
  uint64_t v53;
  int v54;
  unsigned int v55;
  unint64_t v56;
  int32x4_t v58;
  float32x4_t *v59;
  uint64_t v60;
  int32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float v64;
  float32x4_t v65;
  float v66;
  float32x4_t v67;
  int32x4_t v68;
  uint64_t v69;
  int v70;
  float v71;
  int32x4_t v72;
  unint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  float32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  float32x4_t v82;
  float v83;
  float32x4_t v84;
  float32x4_t v85;
  char *v86;
  float32x4_t v87;

  v3 = (_QWORD *)a1[4];
  v2 = (_QWORD *)a1[5];
  if (v2 != v3)
  {
    v4 = (_QWORD *)a1[5];
    do
    {
      v6 = (void *)*(v4 - 3);
      v4 -= 3;
      v5 = v6;
      if (v6)
      {
        *(v2 - 2) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[5] = v3;
  v7 = a1[1];
  if (v7)
  {
    if (v7 >> 62)
      goto LABEL_75;
    v8 = (char *)operator new(4 * v7);
    bzero(v8, 4 * v7);
    v9 = &v8[4 * v7];
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  v10 = a1[4];
  v11 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - v10) >> 3);
  v12 = v7 - v11;
  if (v7 <= v11)
  {
    if (v7 < v11)
    {
      v26 = (_QWORD *)(v10 + 24 * v7);
      if (v3 != v26)
      {
        v27 = v3;
        do
        {
          v29 = (void *)*(v27 - 3);
          v27 -= 3;
          v28 = v29;
          if (v29)
          {
            *(v3 - 2) = v28;
            operator delete(v28);
          }
          v3 = v27;
        }
        while (v27 != v26);
      }
      a1[5] = v26;
    }
    goto LABEL_47;
  }
  v13 = a1[6];
  if (0xAAAAAAAAAAAAAAABLL * ((v13 - (uint64_t)v3) >> 3) < v12)
  {
    if (v7 <= 0xAAAAAAAAAAAAAAALL)
    {
      v14 = 0xAAAAAAAAAAAAAAABLL * ((v13 - v10) >> 3);
      v15 = 2 * v14;
      if (2 * v14 <= v7)
        v15 = v7;
      if (v14 >= 0x555555555555555)
        v16 = 0xAAAAAAAAAAAAAAALL;
      else
        v16 = v15;
      if (v16 > 0xAAAAAAAAAAAAAAALL)
        sub_23938C4B8();
      v17 = 24 * v16;
      v18 = (char *)operator new(24 * v16);
      v19 = &v18[24 * v11];
      v86 = &v18[v17];
      v20 = 24 * v7;
      v21 = &v18[24 * v7];
      v22 = v20 - 24 * v11;
      v23 = (char **)(v19 + 8);
      do
      {
        *(v23 - 1) = 0;
        *v23 = 0;
        v23[1] = 0;
        if (v9 != v8)
        {
          if (v9 - v8 < 0)
            goto LABEL_75;
          v24 = (char *)operator new(v9 - v8);
          *(v23 - 1) = v24;
          *v23 = v24;
          v25 = &v24[4 * ((v9 - v8) >> 2)];
          v23[1] = v25;
          memcpy(v24, v8, v9 - v8);
          *v23 = v25;
        }
        v23 += 3;
        v22 -= 24;
      }
      while (v22);
      v34 = (_QWORD *)a1[4];
      v35 = (_QWORD *)a1[5];
      if (v35 == v34)
      {
        a1[4] = v19;
        a1[5] = v21;
        a1[6] = v86;
      }
      else
      {
        do
        {
          *((_QWORD *)v19 - 3) = 0;
          *((_QWORD *)v19 - 2) = 0;
          v19 -= 24;
          *((_QWORD *)v19 + 2) = 0;
          v36 = *(_OWORD *)(v35 - 3);
          v35 -= 3;
          *(_OWORD *)v19 = v36;
          *((_QWORD *)v19 + 2) = v35[2];
          *v35 = 0;
          v35[1] = 0;
          v35[2] = 0;
        }
        while (v35 != v34);
        v35 = (_QWORD *)a1[4];
        v37 = (_QWORD *)a1[5];
        a1[4] = v19;
        a1[5] = v21;
        a1[6] = v86;
        if (v37 != v35)
        {
          v38 = v37;
          do
          {
            v40 = (void *)*(v38 - 3);
            v38 -= 3;
            v39 = v40;
            if (v40)
            {
              *(v37 - 2) = v39;
              operator delete(v39);
            }
            v37 = v38;
          }
          while (v38 != v35);
        }
      }
      if (v35)
        operator delete(v35);
      goto LABEL_47;
    }
LABEL_75:
    abort();
  }
  v30 = &v3[3 * v12];
  v31 = 24 * v7 - 8 * (((uint64_t)v3 - v10) >> 3);
  do
  {
    *v3 = 0;
    v3[1] = 0;
    v3[2] = 0;
    if (v9 != v8)
    {
      if (v9 - v8 < 0)
        goto LABEL_75;
      v32 = (char *)operator new(v9 - v8);
      *v3 = v32;
      v33 = &v32[4 * ((v9 - v8) >> 2)];
      v3[2] = v33;
      memcpy(v32, v8, v9 - v8);
      v3[1] = v33;
    }
    v3 += 3;
    v31 -= 24;
  }
  while (v31);
  a1[5] = v30;
LABEL_47:
  if (v8)
    operator delete(v8);
  v41 = a1[1];
  v42 = v41 >> 1;
  if (((v41 >> 1) & 0x80000000) == 0 && (int)v41 >= 1)
  {
    v43 = -(int)v42;
    v44 = (float *)(a1 + 2);
    v77 = a1[4];
    v45 = (int)v41;
    v46 = (int)v41 - 1;
    v47 = a1[1] & 0xFFFFFFFELL;
    if (v46 < v47)
      v47 = v46;
    if (v47 < 3)
    {
      for (i = 0; i < v45; ++i)
      {
        v49 = 0;
        v78 = v43;
        v50 = v43 * v43;
        v51 = *(_QWORD *)(v77 + 24 * i);
        do
        {
          v52 = *v44 * *v44;
          *(float *)(v51 + 4 * v49) = (float)(expf((float)((float)(v50+ (v49 - v42) * (v49 - v42))* -0.5)/ v52)* 0.15915)/ v52;
          if ((int)v49 - (int)v42 >= (int)v42)
            break;
          ++v49;
        }
        while (v49 < v45);
        if (v78 >= (int)v42)
          break;
        v43 = v78 + 1;
      }
      return;
    }
    v53 = 0;
    v75 = (char *)a1 + 20;
    v76 = 4 * v47 + 4;
    v73 = v47 + 1;
    v74 = (v47 + 1) & 0x1FFFFFFFCLL;
    v72 = vaddq_s32(vdupq_n_s32(v43), (int32x4_t)xmmword_2393F5490);
    v54 = -(int)v42;
    v79 = (float32x4_t)vdupq_n_s32(0x3E22F983u);
    while (1)
    {
      v55 = v54 * v54;
      v56 = *(_QWORD *)(v77 + 24 * v53);
      if (v56 < (unint64_t)v75 && (unint64_t)v44 < v56 + v76)
        break;
      v58 = vdupq_n_s32(v55);
      v80 = v58;
      *(float *)v58.i32 = *v44 * *v44;
      v82 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v58.i8, 0);
      v59 = *(float32x4_t **)(v77 + 24 * v53);
      v60 = v74;
      v61 = v72;
      do
      {
        v81 = v61;
        v62.i64[0] = 0xBF000000BF000000;
        v62.i64[1] = 0xBF000000BF000000;
        v87 = vdivq_f32(vmulq_f32(vcvtq_f32_s32(vmlaq_s32(v80, v61, v61)), v62), v82);
        v83 = expf(v87.f32[1]);
        v63.f32[0] = expf(v87.f32[0]);
        v63.f32[1] = v83;
        v84 = v63;
        v64 = expf(v87.f32[2]);
        v65 = v84;
        v65.f32[2] = v64;
        v85 = v65;
        v66 = expf(v87.f32[3]);
        v67 = v85;
        v67.f32[3] = v66;
        *v59++ = vdivq_f32(vmulq_f32(v67, v79), v82);
        v68.i64[0] = 0x400000004;
        v68.i64[1] = 0x400000004;
        v61 = vaddq_s32(v81, v68);
        v60 -= 4;
      }
      while (v60);
      v69 = v74;
      v70 = v74 - v42;
      if (v73 != v74)
        goto LABEL_70;
LABEL_72:
      v43 = -(int)v42;
      if (v54 < (int)v42)
      {
        ++v54;
        if (++v53 < v45)
          continue;
      }
      return;
    }
    v69 = 0;
    v70 = v43;
    do
    {
LABEL_70:
      v71 = *v44 * *v44;
      *(float *)(v56 + 4 * v69) = (float)(expf((float)((float)(int)(v55 + v70 * v70) * -0.5) / v71) * 0.15915) / v71;
      if (v70 >= (int)v42)
        break;
      ++v70;
      ++v69;
    }
    while (v69 < v45);
    goto LABEL_72;
  }
}

float *sub_2393C45A4(float *result, float *a2, double a3)
{
  unint64_t v3;
  uint64_t v4;
  float32x4_t v5;
  float32x4_t *v6;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float v15;
  float v16;
  float v17;

  if (result != a2)
  {
    v3 = (char *)a2 - (char *)result - 4;
    if (v3 >= 0x1C)
    {
      v4 = (v3 >> 2) + 1;
      v5 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
      v6 = (float32x4_t *)(result + 4);
      __asm { FMOV            V2.4S, #1.0 }
      v12 = v4 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v13 = vdivq_f32(v6[-1], v5);
        v14 = vdivq_f32(*v6, v5);
        v6[-1] = (float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v13, _Q2), (int8x16_t)_Q2, (int8x16_t)v13), (int8x16_t)vcltzq_f32(v13));
        *(int8x16_t *)v6 = vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v14, _Q2), (int8x16_t)_Q2, (int8x16_t)v14), (int8x16_t)vcltzq_f32(v14));
        v6 += 2;
        v12 -= 8;
      }
      while (v12);
      if (v4 == (v4 & 0x7FFFFFFFFFFFFFF8))
        return result;
      result += v4 & 0x7FFFFFFFFFFFFFF8;
    }
    do
    {
      v15 = *result / *(float *)&a3;
      if (v15 <= 1.0)
        v16 = *result / *(float *)&a3;
      else
        v16 = 1.0;
      if (v15 >= 0.0)
        v17 = v16;
      else
        v17 = 0.0;
      *result++ = v17;
    }
    while (result != a2);
  }
  return result;
}

BOOL sub_2393C4654(__CVBuffer *a1, CGRect *a2, void *a3, __CVBuffer *a4)
{
  CFDictionaryRef DictionaryRepresentation;
  const __CFString *v8;
  OSStatus v9;
  uint64_t v10;
  _BOOL8 result;
  const char *v12;
  uint64_t v13;
  NSObject *v14;
  uint32_t v15;
  OSStatus v16;
  int v17;
  OSStatus v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (!a3)
  {
    if (qword_2569303B8 != -1)
      dispatch_once(&qword_2569303B8, &unk_250AD6248);
    v13 = qword_2569303B0;
    result = os_log_type_enabled((os_log_t)qword_2569303B0, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    LOWORD(v17) = 0;
    v12 = "Failed to crop and scale pixel buffer, pixel transfer session ref is nil!";
LABEL_11:
    v14 = v13;
    v15 = 2;
LABEL_18:
    _os_log_error_impl(&dword_239388000, v14, OS_LOG_TYPE_ERROR, v12, (uint8_t *)&v17, v15);
    return 0;
  }
  DictionaryRepresentation = CGRectCreateDictionaryRepresentation(*a2);
  v8 = (const __CFString *)*MEMORY[0x24BDF9688];
  v9 = VTSessionSetProperty(a3, (CFStringRef)*MEMORY[0x24BDF9688], DictionaryRepresentation);
  CFRelease(DictionaryRepresentation);
  if (v9)
  {
    if (qword_2569303B8 != -1)
      dispatch_once(&qword_2569303B8, &unk_250AD6248);
    v10 = qword_2569303B0;
    result = os_log_type_enabled((os_log_t)qword_2569303B0, OS_LOG_TYPE_ERROR);
    if (result)
    {
      v17 = 67240192;
      v18 = v9;
      v12 = "Failed to crop and scaled pixel buffer, unable to initialize pixel transfer session for image cropping: %{public}d";
LABEL_17:
      v14 = v10;
      v15 = 8;
      goto LABEL_18;
    }
    return result;
  }
  v16 = VTPixelTransferSessionTransferImage((VTPixelTransferSessionRef)a3, a1, a4);
  if (VTSessionSetProperty(a3, v8, 0))
  {
    if (qword_2569303B8 != -1)
      dispatch_once(&qword_2569303B8, &unk_250AD6248);
    v10 = qword_2569303B0;
    result = os_log_type_enabled((os_log_t)qword_2569303B0, OS_LOG_TYPE_ERROR);
    if (result)
    {
      v17 = 67240192;
      v18 = 0;
      v12 = "Failed to crop and scaled pixel buffer, unable to unset crop rectangle for  pixel transfer session for image"
            " cropping: %{public}d";
      goto LABEL_17;
    }
    return result;
  }
  if (!v16)
    return 1;
  if (qword_2569303B8 != -1)
    dispatch_once(&qword_2569303B8, &unk_250AD6248);
  v13 = qword_2569303B0;
  result = os_log_type_enabled((os_log_t)qword_2569303B0, OS_LOG_TYPE_ERROR);
  if (result)
  {
    LOWORD(v17) = 0;
    v12 = "Failed to crop and scale image in VTPixelTransferSession";
    goto LABEL_11;
  }
  return result;
}

void sub_2393C48CC()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.CoreOCModules", "General");
  v1 = (void *)qword_2569303B0;
  qword_2569303B0 = (uint64_t)v0;

}

uint64_t *sub_2393C48FC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_2393C4940(v2);
    MEMORY[0x23B83C4BC](v3, 0x10E0C40A317B3DBLL);
  }
  return a1;
}

uint64_t sub_2393C4940(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

uint64_t sub_2393C49C0(uint64_t a1, CVPixelBufferRef pixelBuffer, size_t a3, size_t a4)
{
  _BYTE *BaseAddressOfPlane;
  char *v9;
  size_t BytesPerRowOfPlane;
  size_t v11;
  size_t Width;
  size_t Height;
  __int128 v14;
  char *v15;
  float32x2_t v16;
  float v17;
  float32_t v18;
  float v19;
  float32x2_t v20;
  float v26;
  float v27;
  float v28;
  char v29;

  CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL);
  BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0);
  v9 = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 1uLL);
  BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 0);
  v11 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 1uLL);
  Width = CVPixelBufferGetWidth(pixelBuffer);
  Height = CVPixelBufferGetHeight(pixelBuffer);
  if (Width > a3 && BaseAddressOfPlane && v9 && BytesPerRowOfPlane && v11 && Height > a4)
  {
    v15 = &v9[(a3 & 0xFFFFFFFFFFFFFFFELL) + v11 * (a4 >> 1)];
    LOBYTE(v14) = BaseAddressOfPlane[a3 + BytesPerRowOfPlane * a4];
    v16.f32[0] = (float)v14;
    v17 = (float)(*v15 - 128);
    v18 = v16.f32[0] + (float)(v17 * -0.39176);
    v19 = v16.f32[0] + (float)(v17 * 2.0172);
    v16.f32[1] = v18;
    v20 = vdiv_f32(vmla_n_f32(v16, (float32x2_t)0xBF501EA43FCC4A9ALL, (float)(v15[1] - 128)), (float32x2_t)vdup_n_s32(0x437F0000u));
    __asm { FMOV            V3.2S, #1.0 }
    *(int8x8_t *)&v14 = vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(v20, _D3), (int8x8_t)_D3, (int8x8_t)v20), (int8x8_t)vcltz_f32(v20));
    v26 = v19 / 255.0;
    v27 = 1.0;
    if (v26 <= 1.0)
      v27 = v26;
    _NF = v26 < 0.0;
    v28 = 0.0;
    if (!_NF)
      v28 = v27;
    *((float *)&v14 + 2) = v28;
    *(_OWORD *)a1 = v14;
    v29 = 1;
  }
  else
  {
    v29 = 0;
    *(_BYTE *)a1 = 0;
  }
  *(_BYTE *)(a1 + 16) = v29;
  return CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
}

CFMutableDictionaryRef sub_2393C4B50(_QWORD *a1, CVPixelBufferPoolRef *a2)
{
  const void *v2;
  BOOL v3;
  unint64_t v5;
  const void *v6;
  int v8;
  const void *v9;
  const __CFAllocator *v10;
  CFMutableDictionaryRef result;
  __CFDictionary *v12;
  CFNumberRef v13;
  CFNumberRef v14;
  CFNumberRef v15;
  CFNumberRef v16;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v18;
  CFNumberRef v19;
  CFNumberRef v20;
  CFNumberRef v21;
  CFNumberRef v22;
  CFNumberRef v23;
  CFNumberRef v24;
  CVReturn v25;
  __CFDictionary *v26;
  CFMutableDictionaryRef cf;

  v2 = a1 + 1;
  if (*a1)
    v3 = a1[1] == 0;
  else
    v3 = 1;
  if (!v3)
  {
    v6 = a1 + 3;
    v5 = a1[3];
    if (v5)
    {
      if (a1[4] - 1 < v5)
      {
        v9 = a1 + 2;
        v8 = *((_DWORD *)a1 + 4);
        if (v8 == 1111970369 || v8 == 1717855600 || v8 == 1380410945)
        {
          v10 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
          result = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
          cf = result;
          if (!result)
            return result;
          v12 = result;
          v13 = CFNumberCreate(v10, kCFNumberIntType, a1 + 4);
          if (v13
            && (v14 = v13,
                CFDictionarySetValue(v12, (const void *)*MEMORY[0x24BDC56F0], v13),
                CFRelease(v14),
                (v15 = CFNumberCreate(v10, kCFNumberIntType, v6)) != 0))
          {
            v16 = v15;
            CFDictionarySetValue(v12, (const void *)*MEMORY[0x24BDC56D0], v15);
            CFRelease(v16);
            Mutable = CFDictionaryCreateMutable(v10, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
            if (Mutable)
            {
              v18 = Mutable;
              v19 = CFNumberCreate(v10, kCFNumberIntType, a1);
              if (v19)
              {
                v20 = v19;
                CFDictionarySetValue(v18, (const void *)*MEMORY[0x24BDC5708], v19);
                CFRelease(v20);
                v21 = CFNumberCreate(v10, kCFNumberIntType, v2);
                if (v21)
                {
                  v22 = v21;
                  CFDictionarySetValue(v18, (const void *)*MEMORY[0x24BDC5650], v21);
                  CFRelease(v22);
                  v23 = CFNumberCreate(v10, kCFNumberIntType, v9);
                  if (v23)
                  {
                    v24 = v23;
                    CFDictionarySetValue(v18, (const void *)*MEMORY[0x24BDC56B8], v23);
                    CFRelease(v24);
                    v25 = CVPixelBufferPoolCreate(v10, v12, v18, a2);
                    CFRelease(v12);
                    CFRelease(v18);
                    return (CFMutableDictionaryRef)(v25 == 0);
                  }
                }
              }
              CFRelease(v12);
              v26 = v18;
            }
            else
            {
              v26 = v12;
            }
          }
          else
          {
            CFRelease(&cf);
            v26 = cf;
          }
          CFRelease(v26);
        }
      }
    }
  }
  return 0;
}

void sub_2393C4DD0(_BYTE *a1, char *__s)
{
  _QWORD *v2;
  size_t v4;
  size_t v5;
  __int128 *p_dst;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  __int128 *v16;
  __int128 *v17;
  __int128 *v18;
  char *v19;
  __int128 *v20;
  __int128 *v21;
  int64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _BYTE *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _BOOL4 v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  __int128 *v33;
  __int128 *v34;
  char *v35;
  uint64_t v36;
  BOOL *v37;
  uint64_t v38;
  char *v39;
  __int128 *v40;
  unint64_t v41;
  char *v42;
  unint64_t v43;
  BOOL v44;
  char *v45;
  char *v46;
  char *v47;
  __int128 *v48;
  BOOL *v49;
  char *v50;
  char *v51;
  unint64_t v52;
  _BYTE *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  __int128 *v59;
  _OWORD *v60;
  unint64_t v61;
  __int128 v62;
  char v63;
  size_t v64;
  const void *p_p;
  size_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  __int128 __dst;
  int64_t v71;
  void *__p;
  __int128 *v73;
  int64_t v74;
  __int128 v75;
  BOOL v76;
  __int128 *v77;
  __int128 *v78;
  BOOL v79;
  __int128 v80;
  BOOL v81;
  char v82;
  __int128 *v83;

  v2 = a1;
  if (!__s)
  {
    a1[23] = 0;
    *a1 = 0;
    return;
  }
  v4 = strlen(__s);
  if (v4 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_127;
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    p_dst = (__int128 *)operator new(v7 + 1);
    *((_QWORD *)&__dst + 1) = v5;
    v71 = v8 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v71) = v4;
    p_dst = &__dst;
    if (!v4)
      goto LABEL_11;
  }
  memcpy(p_dst, __s, v5);
LABEL_11:
  *((_BYTE *)p_dst + v5) = 0;
  v9 = atomic_load((unsigned __int8 *)qword_256930400);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(qword_256930400))
  {
    sub_2393C5594();
    __cxa_atexit((void (*)(void *))sub_2393C5614, &stru_2569303C0, &dword_239388000);
    __cxa_guard_release(qword_256930400);
  }
  v77 = 0;
  v78 = 0;
  v79 = 0;
  v80 = 0uLL;
  v81 = 0;
  v82 = 0;
  v83 = 0;
  __p = 0;
  v73 = 0;
  if (v71 >= 0)
    v10 = &__dst;
  else
    v10 = (__int128 *)__dst;
  if (v71 >= 0)
    v11 = HIBYTE(v71);
  else
    v11 = *((_QWORD *)&__dst + 1);
  v12 = (uint64_t)v10 + v11;
  v74 = 0;
  *(_QWORD *)&v75 = (char *)v10 + v11;
  *((_QWORD *)&v75 + 1) = (char *)v10 + v11;
  v76 = 0;
  sub_2393C566C((uint64_t)&__p, (dword_2569303DC + 1), &v75);
  v77 = v10;
  v78 = v10;
  v79 = 0;
  v80 = v75;
  v81 = v76;
  v83 = v10;
  v82 = 1;
  if ((word_2569303D8 & 0x1F0) != 0)
  {
    if (dword_2569303DC)
    {
      if (sub_2393C69D8((uint64_t)v10, (uint64_t)v10 + v11, (uint64_t *)&__p, 0, 1))
        goto LABEL_41;
    }
    else if ((sub_2393C5CC0((uint64_t)v10, (uint64_t)v10 + v11, (uint64_t *)&__p, 0, 1) & 1) != 0)
    {
      goto LABEL_41;
    }
  }
  else if ((sub_2393C57F4((uint64_t)&stru_2569303C0, (uint64_t)v10, (uint64_t)v10 + v11, (uint64_t *)&__p, 0, 1) & 1) != 0)
  {
    goto LABEL_41;
  }
  if (!v11)
  {
LABEL_48:
    v15 = (__int128 *)__p;
    v20 = v77;
    v73 = (__int128 *)__p;
    v16 = (__int128 *)__p;
    goto LABEL_49;
  }
  v13 = v11 - 1;
  if (v11 != 1)
  {
    v14 = (uint64_t)v10 + 1;
    do
    {
      sub_2393C566C((uint64_t)&__p, 0xAAAAAAAAAAAAAAABLL * (((char *)v73 - (_BYTE *)__p) >> 3), &v75);
      if ((word_2569303D8 & 0x1F0) != 0)
      {
        if (dword_2569303DC)
        {
          if (sub_2393C69D8(v14, v12, (uint64_t *)&__p, 128, 0))
            goto LABEL_41;
        }
        else if ((sub_2393C5CC0(v14, v12, (uint64_t *)&__p, 128, 0) & 1) != 0)
        {
          goto LABEL_41;
        }
      }
      else if ((sub_2393C57F4((uint64_t)&stru_2569303C0, v14, v12, (uint64_t *)&__p, 128, 0) & 1) != 0)
      {
        goto LABEL_41;
      }
      sub_2393C566C((uint64_t)&__p, 0xAAAAAAAAAAAAAAABLL * (((char *)v73 - (_BYTE *)__p) >> 3), &v75);
      ++v14;
      --v13;
    }
    while (v13);
  }
  sub_2393C566C((uint64_t)&__p, 0xAAAAAAAAAAAAAAABLL * (((char *)v73 - (_BYTE *)__p) >> 3), &v75);
  if ((word_2569303D8 & 0x1F0) == 0)
  {
    if ((sub_2393C57F4((uint64_t)&stru_2569303C0, v12, v12, (uint64_t *)&__p, 128, 0) & 1) != 0)
      goto LABEL_41;
    goto LABEL_48;
  }
  if (!dword_2569303DC)
  {
    if ((sub_2393C5CC0(v12, v12, (uint64_t *)&__p, 128, 0) & 1) != 0)
      goto LABEL_41;
    goto LABEL_48;
  }
  if (!sub_2393C69D8(v12, v12, (uint64_t *)&__p, 128, 0))
    goto LABEL_48;
LABEL_41:
  v15 = (__int128 *)__p;
  v16 = v73;
  if (v73 == __p)
    v17 = &v75;
  else
    v17 = (__int128 *)__p;
  v18 = *(__int128 **)v17;
  v78 = v18;
  v19 = (char *)__p + 8;
  if (v73 == __p)
    v19 = (char *)&v75 + 8;
  v20 = v77;
  v79 = v77 != v18;
  *(_QWORD *)&v80 = *(_QWORD *)v19;
  v81 = (_QWORD)v80 != *((_QWORD *)&v80 + 1);
LABEL_49:
  if (v71 >= 0)
    v21 = &__dst;
  else
    v21 = (__int128 *)__dst;
  v22 = (char *)v16 - (char *)v15;
  if (v16 == v15)
  {
    v25 = 0;
    v29 = 1;
  }
  else
  {
    v23 = v22 / 24;
    if ((unint64_t)(v22 / 24) >= 0xAAAAAAAAAAAAAABLL)
      goto LABEL_127;
    v24 = operator new(v22);
    v25 = v24;
    v26 = 24 * v23;
    v27 = v24;
    do
    {
      *v27 = 0;
      v27[1] = 0;
      *((_BYTE *)v27 + 16) = 0;
      v27 += 3;
      v26 -= 24;
    }
    while (v26);
    v28 = 24 * v23;
    v29 = 24 * v23 == 0;
    if (v28)
    {
      v30 = (unsigned __int128)(v28 * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
      v31 = (v30 >> 2) + ((unint64_t)v30 >> 63);
      if (v31 <= 1)
        v32 = 1;
      else
        v32 = (v30 >> 2) + ((unint64_t)v30 >> 63);
      if (v16 == v15)
        v33 = &v75;
      else
        v33 = v15;
      *v24 = (char *)v21 + *(_QWORD *)v33 - (_QWORD)v20;
      v15 = (__int128 *)__p;
      v34 = v73;
      v35 = (char *)__p + 8;
      if (v73 == __p)
        v35 = (char *)&v75 + 8;
      v36 = *(_QWORD *)v35;
      v37 = (BOOL *)__p + 16;
      if (v73 == __p)
        v37 = &v76;
      v24[1] = (char *)v21 + v36 - (_QWORD)v20;
      *((_BYTE *)v24 + 16) = *v37;
      if (v31 >= 2)
      {
        v38 = 0;
        v39 = (char *)__p;
        v40 = v73;
        v41 = 0xAAAAAAAAAAAAAAABLL * (((char *)v73 - (_BYTE *)__p) >> 3);
        v42 = (char *)__p + 32;
        v43 = 1;
        do
        {
          v44 = 0xAAAAAAAAAAAAAAABLL * (((char *)v34 - (char *)v15) >> 3) > v43;
          v45 = &v25[v38];
          v46 = &v42[v38];
          v47 = &v39[v38];
          v38 += 24;
          v48 = (__int128 *)((char *)v15 + v38);
          if (!v44)
            v48 = &v75;
          *((_QWORD *)v45 + 3) = (char *)v21 + *(_QWORD *)v48 - (_QWORD)v20;
          if (v41 <= v43)
            v46 = (char *)&v75 + 8;
          *((_QWORD *)v45 + 4) = (char *)v21 + *(_QWORD *)v46 - (_QWORD)v20;
          v49 = (BOOL *)(v47 + 40);
          if (v41 <= v43)
            v49 = &v76;
          v45[40] = *v49;
          ++v43;
          v15 = (__int128 *)v39;
          v34 = v40;
        }
        while (v32 != v43);
        v15 = (__int128 *)v39;
      }
    }
  }
  if (v15)
  {
    v73 = v15;
    operator delete(v15);
  }
  if (!v29)
  {
    if (!v25[16])
    {
      __p = 0;
      v73 = 0;
      v54 = -1;
      v74 = 0;
LABEL_109:
      v64 = HIBYTE(v74);
      if (v74 >= 0)
      {
        p_p = &__p;
      }
      else
      {
        v64 = (size_t)v73;
        p_p = __p;
      }
      if (v64 >= v54)
        v66 = v54;
      else
        v66 = v64;
      if (v66 <= 0x7FFFFFFFFFFFFFF7)
      {
        if (v66 >= 0x17)
        {
          v67 = (v66 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v66 | 7) != 0x17)
            v67 = v66 | 7;
          v68 = v67 + 1;
          v69 = operator new(v67 + 1);
          v2[1] = v66;
          v2[2] = v68 | 0x8000000000000000;
          *v2 = v69;
          v2 = v69;
        }
        else
        {
          *((_BYTE *)v2 + 23) = v66;
          if (!v66)
          {
LABEL_123:
            *((_BYTE *)v2 + v66) = 0;
            if (SHIBYTE(v74) < 0)
              operator delete(__p);
            goto LABEL_125;
          }
        }
        memmove(v2, p_p, v66);
        goto LABEL_123;
      }
LABEL_127:
      abort();
    }
    v50 = *(char **)v25;
    v51 = (char *)*((_QWORD *)v25 + 1);
    v52 = (unint64_t)&v51[-*(_QWORD *)v25];
    if (v52 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_127;
    if (v52 > 0x16)
    {
      v55 = (v52 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v52 | 7) != 0x17)
        v55 = v52 | 7;
      v56 = v55 + 1;
      v53 = operator new(v55 + 1);
      v73 = (__int128 *)v52;
      v74 = v56 | 0x8000000000000000;
      __p = v53;
      if (v50 == v51)
        goto LABEL_106;
    }
    else
    {
      HIBYTE(v74) = (_BYTE)v51 - *v25;
      v53 = &__p;
      if (v50 == v51)
      {
LABEL_106:
        *v53 = 0;
        if (v25[16])
          v54 = *((_QWORD *)v25 + 1) + ~*(_QWORD *)v25;
        else
          v54 = -1;
        goto LABEL_109;
      }
    }
    if (v52 < 0x20 || (unint64_t)(v53 - v50) < 0x20)
    {
      v58 = v53;
    }
    else
    {
      v57 = v52 & 0x7FFFFFFFFFFFFFE0;
      v58 = &v53[v52 & 0xFFFFFFFFFFFFFFE0];
      v59 = (__int128 *)(v50 + 16);
      v60 = v53 + 16;
      v61 = v52 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v62 = *v59;
        *(v60 - 1) = *(v59 - 1);
        *v60 = v62;
        v59 += 2;
        v60 += 2;
        v61 -= 32;
      }
      while (v61);
      if (v52 == v57)
      {
        v53 += v52 & 0xFFFFFFFFFFFFFFE0;
        goto LABEL_106;
      }
      v50 += v57;
    }
    v53 = v58;
    do
    {
      v63 = *v50++;
      *v53++ = v63;
    }
    while (v50 != v51);
    goto LABEL_106;
  }
  if (SHIBYTE(v71) < 0)
  {
    sub_2393BD344(v2, (void *)__dst, *((unint64_t *)&__dst + 1));
    if (!v25)
      goto LABEL_90;
  }
  else
  {
    *(_OWORD *)v2 = __dst;
    v2[2] = v71;
    if (!v25)
    {
LABEL_90:
      if ((SHIBYTE(v71) & 0x80000000) == 0)
        return;
LABEL_126:
      operator delete((void *)__dst);
      return;
    }
  }
LABEL_125:
  operator delete(v25);
  if (SHIBYTE(v71) < 0)
    goto LABEL_126;
}

void sub_2393C5594()
{
  const std::locale *v0;
  std::locale *v1;

  v0 = (const std::locale *)MEMORY[0x23B83C438](&stru_2569303C0);
  qword_2569303C8 = (uint64_t)std::locale::use_facet(v0, MEMORY[0x24BEDB350]);
  qword_2569303D0 = (uint64_t)std::locale::use_facet(&stru_2569303C0, MEMORY[0x24BEDB4B0]);
  *(_OWORD *)&word_2569303D8 = 0u;
  *(_OWORD *)&qword_2569303E8 = 0u;
  qword_2569303F8 = 0;
  if (sub_2393C8114((uint64_t)&stru_2569303C0, "[a-zA-Z0-9_]+::[a-zA-Z0-9_]+\\(", "") != "")
  {
    v1 = (std::locale *)sub_2393C78AC();
    sub_2393C5614(v1);
  }
}

void sub_2393C5614(std::locale *this)
{
  std::__shared_weak_count *locale;
  unint64_t *p_shared_owners;
  unint64_t v4;

  locale = (std::__shared_weak_count *)this[6].__locale_;
  if (locale)
  {
    p_shared_owners = (unint64_t *)&locale->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
      std::__shared_weak_count::__release_weak(locale);
    }
  }
  std::locale::~locale(this);
}

_QWORD *sub_2393C566C(uint64_t a1, unint64_t a2, __int128 *a3)
{
  uint64_t v6;
  _QWORD *result;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;

  v6 = *(_QWORD *)(a1 + 16);
  result = *(_QWORD **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - (uint64_t)result) >> 3) < a2)
  {
    if (result)
    {
      *(_QWORD *)(a1 + 8) = result;
      operator delete(result);
      v6 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (a2 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_26;
    v8 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= a2)
      v9 = a2;
    v10 = v8 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v9;
    if (v10 > 0xAAAAAAAAAAAAAAALL)
LABEL_26:
      abort();
    v11 = 3 * v10;
    result = operator new(24 * v10);
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 8) = result;
    *(_QWORD *)(a1 + 16) = &result[v11];
    v12 = 24 * a2;
    v13 = &result[3 * a2];
    do
    {
      *(_OWORD *)result = *a3;
      result[2] = *((_QWORD *)a3 + 2);
      result += 3;
      v12 -= 24;
    }
    while (v12);
    goto LABEL_25;
  }
  v14 = *(_QWORD *)(a1 + 8);
  v15 = (v14 - (uint64_t)result) / 24;
  if (v15 >= a2)
    v16 = a2;
  else
    v16 = (v14 - (uint64_t)result) / 24;
  if (v16)
  {
    v17 = result;
    do
    {
      *(_OWORD *)v17 = *a3;
      *((_BYTE *)v17 + 16) = *((_BYTE *)a3 + 16);
      v17 += 3;
      --v16;
    }
    while (v16);
  }
  if (a2 <= v15)
  {
    v13 = &result[3 * a2];
LABEL_25:
    *(_QWORD *)(a1 + 8) = v13;
    return result;
  }
  v18 = v14 + 24 * (a2 - v15);
  v19 = 24 * a2 - 24 * v15;
  do
  {
    v20 = *a3;
    *(_QWORD *)(v14 + 16) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v14 = v20;
    v14 += 24;
    v19 -= 24;
  }
  while (v19);
  *(_QWORD *)(a1 + 8) = v18;
  return result;
}

uint64_t sub_2393C57F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  signed int v17;
  unsigned int v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  void *v25;
  void *v26;
  __int128 v27;
  _BYTE *v28;
  _BYTE *v29;
  int64_t v30;
  char *v31;
  size_t v32;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  char *v36;
  size_t v37;
  uint64_t v38;
  char *v39;
  __int128 v40;
  uint64_t v41;
  char *i;
  void *v43;
  void *v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _BYTE *v50;
  unsigned int v51;
  uint64_t v52;
  char v53;
  uint64_t v55;
  signed int v57;
  _BYTE v60[56];
  void *__p[2];
  _QWORD v62[4];
  __int128 v63;
  char v64;
  char *v65;
  char *v66;
  unint64_t v67;

  v65 = 0;
  v66 = 0;
  v67 = 0;
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    *(_QWORD *)&v63 = a3;
    *((_QWORD *)&v63 + 1) = a3;
    v64 = 0;
    *(_DWORD *)v60 = 0;
    memset(&v60[8], 0, 48);
    *(_OWORD *)__p = 0u;
    memset(v62, 0, 21);
    v10 = sub_2393C7420((void **)&v65, (uint64_t)v60);
    v66 = v10;
    if (__p[0])
      operator delete(__p[0]);
    if (*(_QWORD *)&v60[32])
      operator delete(*(void **)&v60[32]);
    v11 = *((_QWORD *)v10 - 8);
    *((_DWORD *)v10 - 24) = 0;
    *((_QWORD *)v10 - 11) = a2;
    *((_QWORD *)v10 - 10) = a2;
    *((_QWORD *)v10 - 9) = a3;
    v12 = *(unsigned int *)(a1 + 28);
    v13 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v10 - 7) - v11) >> 3);
    if (v12 <= v13)
    {
      if (v12 < v13)
        *((_QWORD *)v10 - 7) = v11 + 24 * v12;
    }
    else
    {
      sub_2393C75EC((void **)v10 - 8, v12 - v13, &v63);
    }
    v14 = *((_QWORD *)v10 - 5);
    v15 = *(unsigned int *)(a1 + 32);
    v16 = (*((_QWORD *)v10 - 4) - v14) >> 4;
    if (v15 <= v16)
    {
      if (v15 < v16)
        *((_QWORD *)v10 - 4) = v14 + 16 * v15;
    }
    else
    {
      sub_2393C7788((char **)v10 - 5, v15 - v16);
    }
    v17 = a3 - a2;
    *((_QWORD *)v10 - 2) = v6;
    *((_DWORD *)v10 - 2) = a5;
    *(v10 - 4) = a6;
    v18 = 1;
    v57 = a3 - a2;
    while (2)
    {
      if ((v18 & 0xFFF) == 0 && (int)(v18 >> 12) >= v17)
      {
        sub_2393C78AC();
LABEL_56:
        abort();
      }
      v21 = v10 - 16;
      v20 = *((_QWORD *)v10 - 2);
      v22 = v10 - 96;
      if (v20)
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v20 + 16))(v20, v10 - 96);
      switch(*(_DWORD *)v22)
      {
        case 0xFFFFFC18:
          v23 = *((_QWORD *)v10 - 10);
          if ((a5 & 0x20) != 0 && v23 == a2)
            goto LABEL_24;
          v46 = *a4;
          *(_QWORD *)v46 = a2;
          *(_QWORD *)(v46 + 8) = v23;
          *(_BYTE *)(v46 + 16) = 1;
          v47 = *((_QWORD *)v10 - 8);
          v48 = *((_QWORD *)v10 - 7) - v47;
          if (v48)
          {
            v49 = 0xAAAAAAAAAAAAAAABLL * (v48 >> 3);
            v50 = (_BYTE *)(v47 + 16);
            v51 = 1;
            do
            {
              v52 = v46 + 24 * v51;
              *(_OWORD *)v52 = *((_OWORD *)v50 - 1);
              v53 = *v50;
              v50 += 24;
              *(_BYTE *)(v52 + 16) = v53;
            }
            while (v49 > v51++);
          }
          v6 = 1;
          v19 = v65;
          if (!v65)
            return v6;
          goto LABEL_41;
        case 0xFFFFFC1D:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_16;
        case 0xFFFFFC1F:
LABEL_24:
          v24 = v66;
          v25 = (void *)*((_QWORD *)v66 - 5);
          if (v25)
          {
            *((_QWORD *)v66 - 4) = v25;
            operator delete(v25);
          }
          v26 = (void *)*((_QWORD *)v24 - 8);
          if (v26)
          {
            *((_QWORD *)v24 - 7) = v26;
            operator delete(v26);
          }
          v66 = v24 - 96;
          goto LABEL_16;
        case 0xFFFFFC20:
          v27 = *((_OWORD *)v10 - 5);
          *(_OWORD *)v60 = *(_OWORD *)v22;
          *(_OWORD *)&v60[16] = v27;
          memset(&v60[32], 0, 24);
          v29 = (_BYTE *)*((_QWORD *)v10 - 8);
          v28 = (_BYTE *)*((_QWORD *)v10 - 7);
          v30 = v28 - v29;
          if (v28 == v29)
            goto LABEL_31;
          if (0xAAAAAAAAAAAAAAABLL * (v30 >> 3) >= 0xAAAAAAAAAAAAAABLL)
            goto LABEL_56;
          v31 = (char *)operator new(v30);
          *(_QWORD *)&v60[32] = v31;
          *(_QWORD *)&v60[40] = v31;
          *(_QWORD *)&v60[48] = &v31[8 * (v30 >> 3)];
          v32 = 24 * ((v30 - 24) / 0x18uLL) + 24;
          memcpy(v31, v29, v32);
          *(_QWORD *)&v60[40] = &v31[v32];
LABEL_31:
          __p[0] = 0;
          __p[1] = 0;
          v62[0] = 0;
          v34 = (_BYTE *)*((_QWORD *)v10 - 5);
          v33 = (_BYTE *)*((_QWORD *)v10 - 4);
          v35 = v33 - v34;
          if (v33 == v34)
            goto LABEL_34;
          if (v35 < 0)
            goto LABEL_56;
          v36 = (char *)operator new(v33 - v34);
          __p[0] = v36;
          __p[1] = v36;
          v62[0] = &v36[16 * (v35 >> 4)];
          v37 = v35 & 0xFFFFFFFFFFFFFFF0;
          memcpy(v36, v34, v37);
          __p[1] = &v36[v37];
LABEL_34:
          v38 = *(_QWORD *)v21;
          *(_QWORD *)((char *)&v62[1] + 5) = *(_QWORD *)(v10 - 11);
          v62[1] = v38;
          (*(void (**)(_QWORD, uint64_t, char *))(**(_QWORD **)v21 + 24))(*(_QWORD *)v21, 1, v10 - 96);
          (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v62[1] + 24))(v62[1], 0, v60);
          v39 = v66;
          if ((unint64_t)v66 >= v67)
          {
            v66 = sub_2393C7420((void **)&v65, (uint64_t)v60);
            v17 = v57;
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          else
          {
            v40 = *(_OWORD *)&v60[16];
            *(_OWORD *)v66 = *(_OWORD *)v60;
            *((_OWORD *)v39 + 1) = v40;
            *((_QWORD *)v39 + 4) = 0;
            *((_QWORD *)v39 + 5) = 0;
            *((_QWORD *)v39 + 6) = 0;
            *((_QWORD *)v39 + 7) = 0;
            *((_OWORD *)v39 + 2) = *(_OWORD *)&v60[32];
            *((_QWORD *)v39 + 6) = *(_QWORD *)&v60[48];
            memset(&v60[32], 0, 24);
            *((_QWORD *)v39 + 8) = 0;
            *((_QWORD *)v39 + 9) = 0;
            *(_OWORD *)(v39 + 56) = *(_OWORD *)__p;
            *((_QWORD *)v39 + 9) = v62[0];
            __p[0] = 0;
            __p[1] = 0;
            v62[0] = 0;
            v41 = v62[1];
            *(_QWORD *)(v39 + 85) = *(_QWORD *)((char *)&v62[1] + 5);
            *((_QWORD *)v39 + 10) = v41;
            v66 = v39 + 96;
            v17 = v57;
          }
          if (*(_QWORD *)&v60[32])
          {
            *(_QWORD *)&v60[40] = *(_QWORD *)&v60[32];
            operator delete(*(void **)&v60[32]);
          }
LABEL_16:
          v19 = v65;
          v10 = v66;
          ++v18;
          if (v65 != v66)
            continue;
          v6 = 0;
          if (v65)
          {
LABEL_41:
            for (i = v66; i != v19; i -= 96)
            {
              v43 = (void *)*((_QWORD *)i - 5);
              if (v43)
              {
                *((_QWORD *)i - 4) = v43;
                operator delete(v43);
              }
              v44 = (void *)*((_QWORD *)i - 8);
              if (v44)
              {
                *((_QWORD *)i - 7) = v44;
                operator delete(v44);
              }
            }
            operator delete(v19);
          }
          break;
        default:
          v55 = sub_2393C78AC();
          return sub_2393C5CC0(v55);
      }
      break;
    }
  }
  return v6;
}

uint64_t sub_2393C5CC0(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, char a5)
{
  uint64_t v5;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  void *v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  void *v49;
  void *v50;
  __int128 v51;
  uint64_t v52;
  _BYTE *v53;
  _BYTE *v54;
  int64_t v55;
  char *v56;
  size_t v57;
  uint64_t v58;
  _BYTE *v59;
  _BYTE *v60;
  uint64_t v61;
  char *v62;
  size_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void **v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  unint64_t v77;
  void *v78;
  void *v79;
  _QWORD *v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  void *v86;
  void *v87;
  uint64_t v88;
  __int128 v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  void *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  void *v98;
  char *v99;
  char *v100;
  char *v101;
  void *v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  void *v115;
  __int128 v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  int64_t v125;
  uint64_t v126;
  unint64_t v127;
  char *v128;
  unint64_t v129;
  char *v130;
  unint64_t v131;
  int64_t v132;
  unint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  __int128 *v138;
  char *v139;
  uint64_t v140;
  __int128 v141;
  uint64_t v142;
  char *v143;
  char *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  void **v148;
  void **v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  void *v153;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char v160;
  uint64_t v161;
  _BYTE v163[32];
  void *v164[2];
  char *v165;
  void *__p[2];
  char *v167;
  _QWORD v168[2];
  __int128 v169;
  __int128 v170;
  __int128 v171;

  v170 = 0u;
  v171 = 0u;
  v169 = 0u;
  v5 = qword_2569303E8;
  if (!qword_2569303E8)
    goto LABEL_141;
  v161 = a2 - a1;
  memset(&v163[4], 0, 24);
  sub_2393C78C0((uint64_t)&v169);
  v9 = *(_QWORD *)(*((_QWORD *)&v169 + 1) + 8 * ((*((_QWORD *)&v171 + 1) + (_QWORD)v171) / 0x2AuLL))
     + 96 * ((*((_QWORD *)&v171 + 1) + (_QWORD)v171) % 0x2AuLL);
  *(_DWORD *)v9 = 0;
  *(_OWORD *)(v9 + 4) = *(_OWORD *)v163;
  v10 = *(_OWORD *)&v163[12];
  *(_OWORD *)(v9 + 48) = 0u;
  *(_OWORD *)(v9 + 64) = 0u;
  *(_OWORD *)(v9 + 16) = v10;
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)(v9 + 77) = 0u;
  v11 = *((_QWORD *)&v171 + 1);
  v12 = ++*((_QWORD *)&v171 + 1);
  v13 = *((_QWORD *)&v169 + 1);
  v14 = v171 + v11;
  v15 = 8 * (v14 / 0x2A);
  v16 = v14 % 0x2A;
  v17 = 96 * (v14 % 0x2A);
  v18 = *(_QWORD *)(*((_QWORD *)&v169 + 1) + v15) + v17;
  *(_DWORD *)v18 = 0;
  *(_QWORD *)(v18 + 8) = a1;
  *(_QWORD *)(*(_QWORD *)(v13 + v15) + v17 + 16) = a1;
  *(_QWORD *)(*(_QWORD *)(v13 + v15) + v17 + 24) = a2;
  v19 = *(_QWORD *)(v13 + v15) + v17;
  v22 = *(_QWORD *)(v19 + 56);
  v20 = v19 + 56;
  v21 = v22;
  v23 = (*(_QWORD *)(v20 + 8) - v22) >> 4;
  v158 = a1;
  if (dword_2569303E0 <= v23)
  {
    if (dword_2569303E0 < v23)
      *(_QWORD *)(v20 + 8) = v21 + 16 * dword_2569303E0;
  }
  else
  {
    sub_2393C7788((char **)v20, dword_2569303E0 - v23);
  }
  v160 = 0;
  v24 = 0;
  v159 = 0;
  *(_QWORD *)(*(_QWORD *)(v13 + v15) + 96 * v16 + 80) = v5;
  v25 = *(_QWORD *)(v13 + v15) + 96 * v16;
  *(_DWORD *)(v25 + 88) = a4;
  *(_BYTE *)(v25 + 92) = a5;
  v26 = v161;
  while (2)
  {
    if ((++v24 & 0xFFF) == 0 && (int)(v24 >> 12) >= (int)v26)
    {
      sub_2393C78AC();
LABEL_156:
      abort();
    }
    v28 = v12 + v171 - 1;
    v29 = *(_QWORD *)(*((_QWORD *)&v169 + 1) + 8 * (v28 / 0x2A));
    v30 = v28 % 0x2A;
    v31 = v29 + 96 * (v28 % 0x2A);
    v33 = (_QWORD *)(v31 + 80);
    v32 = *(_QWORD *)(v31 + 80);
    if (v32)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v32 + 16))(v32, v29 + 96 * v30);
    switch(*(_DWORD *)v31)
    {
      case 0xFFFFFC18:
        v34 = *(_QWORD *)(v29 + 96 * v30 + 16);
        if ((a4 & 0x20) != 0 && v34 == v158)
        {
          v35 = *((_QWORD *)&v171 + 1) + v171 - 1;
          v36 = *(_QWORD *)(*((_QWORD *)&v169 + 1) + 8 * (v35 / 0x2A));
          v37 = v35 % 0x2A;
          v38 = *(void **)(v36 + 96 * (v35 % 0x2A) + 56);
          if (v38)
          {
            *(_QWORD *)(v36 + 96 * v37 + 64) = v38;
            operator delete(v38);
          }
          v39 = *(void **)(v36 + 96 * v37 + 32);
          if (v39)
          {
            *(_QWORD *)(v36 + 96 * v37 + 40) = v39;
            operator delete(v39);
          }
          v40 = v170;
          v41 = (_QWORD)v170 == *((_QWORD *)&v169 + 1);
          v42 = 42 * ((uint64_t)(v170 - *((_QWORD *)&v169 + 1)) >> 3) - 1;
LABEL_110:
          v116 = v171;
          --*((_QWORD *)&v171 + 1);
          if (v41)
            v42 = 0;
          if ((unint64_t)(v42 - (*((_QWORD *)&v116 + 1) + v116) + 1) >= 0x54)
          {
            operator delete(*(void **)(v40 - 8));
            *(_QWORD *)&v170 = v170 - 8;
          }
          goto LABEL_8;
        }
        v71 = v34 - *(_QWORD *)(v29 + 96 * v30 + 8);
        v72 = v159;
        if ((v160 & (v159 >= v71)) == 0)
          v72 = v71;
        if (v72 == v26)
        {
          v73 = (void **)*((_QWORD *)&v169 + 1);
          v74 = v170;
          if ((_QWORD)v170 == *((_QWORD *)&v169 + 1))
          {
            v74 = *((_QWORD *)&v169 + 1);
          }
          else
          {
            v75 = (_QWORD *)(*((_QWORD *)&v169 + 1) + 8 * ((unint64_t)v171 / 0x2A));
            v76 = (_QWORD *)(*v75 + 96 * ((unint64_t)v171 % 0x2A));
            v77 = *(_QWORD *)(*((_QWORD *)&v169 + 1) + 8 * ((*((_QWORD *)&v171 + 1) + (_QWORD)v171) / 0x2AuLL))
                + 96 * ((*((_QWORD *)&v171 + 1) + (_QWORD)v171) % 0x2AuLL);
            if (v76 != (_QWORD *)v77)
            {
              do
              {
                v78 = (void *)v76[7];
                if (v78)
                {
                  v76[8] = v78;
                  operator delete(v78);
                }
                v79 = (void *)v76[4];
                if (v79)
                {
                  v76[5] = v79;
                  operator delete(v79);
                }
                v76 += 12;
                if ((_QWORD *)((char *)v76 - *v75) == (_QWORD *)4032)
                {
                  v80 = (_QWORD *)v75[1];
                  ++v75;
                  v76 = v80;
                }
              }
              while (v76 != (_QWORD *)v77);
              v73 = (void **)*((_QWORD *)&v169 + 1);
              v74 = v170;
            }
          }
          *((_QWORD *)&v171 + 1) = 0;
          v90 = v74 - (_QWORD)v73;
          if (v90 >= 0x11)
          {
            do
            {
              operator delete(*v73);
              v73 = (void **)(*((_QWORD *)&v169 + 1) + 8);
              *((_QWORD *)&v169 + 1) = v73;
              v90 = v170 - (_QWORD)v73;
            }
            while ((_QWORD)v170 - (_QWORD)v73 > 0x10uLL);
          }
          if (v90 >> 3 == 1)
          {
            v91 = 21;
LABEL_88:
            *(_QWORD *)&v171 = v91;
          }
          else if (v90 >> 3 == 2)
          {
            v91 = 42;
            goto LABEL_88;
          }
          v160 = 1;
          v159 = v26;
          goto LABEL_8;
        }
        v159 = v72;
        v83 = *((_QWORD *)&v171 + 1) + v171 - 1;
        v84 = *(_QWORD *)(*((_QWORD *)&v169 + 1) + 8 * (v83 / 0x2A));
        v85 = v83 % 0x2A;
        v86 = *(void **)(v84 + 96 * (v83 % 0x2A) + 56);
        if (v86)
        {
          *(_QWORD *)(v84 + 96 * v85 + 64) = v86;
          operator delete(v86);
        }
        v87 = *(void **)(v84 + 96 * v85 + 32);
        if (v87)
        {
          *(_QWORD *)(v84 + 96 * v85 + 40) = v87;
          operator delete(v87);
        }
        v88 = 42 * ((uint64_t)(v170 - *((_QWORD *)&v169 + 1)) >> 3) - 1;
        v89 = v171;
        --*((_QWORD *)&v171 + 1);
        if ((_QWORD)v170 == *((_QWORD *)&v169 + 1))
          v88 = 0;
        if ((unint64_t)(v88 - (*((_QWORD *)&v89 + 1) + v89) + 1) >= 0x54)
        {
          operator delete(*(void **)(v170 - 8));
          *(_QWORD *)&v170 = v170 - 8;
        }
        v160 = 1;
LABEL_8:
        v12 = *((_QWORD *)&v171 + 1);
        if (*((_QWORD *)&v171 + 1))
          continue;
        if ((v160 & 1) != 0)
        {
          v146 = *a3;
          *(_QWORD *)v146 = v158;
          *(_QWORD *)(v146 + 8) = v158 + v159;
          v147 = 1;
          *(_BYTE *)(v146 + 16) = 1;
          goto LABEL_142;
        }
LABEL_141:
        v147 = 0;
LABEL_142:
        v148 = (void **)*((_QWORD *)&v169 + 1);
        v149 = (void **)v170;
        *((_QWORD *)&v171 + 1) = 0;
        v150 = v170 - *((_QWORD *)&v169 + 1);
        if ((_QWORD)v170 - *((_QWORD *)&v169 + 1) >= 0x11uLL)
        {
          do
          {
            operator delete(*v148);
            v149 = (void **)v170;
            v148 = (void **)(*((_QWORD *)&v169 + 1) + 8);
            *((_QWORD *)&v169 + 1) = v148;
            v150 = v170 - (_QWORD)v148;
          }
          while ((_QWORD)v170 - (_QWORD)v148 > 0x10uLL);
        }
        v151 = v150 >> 3;
        if (v151 == 1)
        {
          v152 = 21;
          goto LABEL_148;
        }
        if (v151 == 2)
        {
          v152 = 42;
LABEL_148:
          *(_QWORD *)&v171 = v152;
        }
        if (v148 != v149)
        {
          do
          {
            v153 = *v148++;
            operator delete(v153);
          }
          while (v148 != v149);
          if ((_QWORD)v170 != *((_QWORD *)&v169 + 1))
            *(_QWORD *)&v170 = v170 + ((*((_QWORD *)&v169 + 1) - v170 + 7) & 0xFFFFFFFFFFFFFFF8);
        }
        if ((_QWORD)v169)
          operator delete((void *)v169);
        return v147;
      case 0xFFFFFC19:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        goto LABEL_8;
      case 0xFFFFFC1D:
        v43 = v171;
        v44 = (uint64_t *)*((_QWORD *)&v169 + 1);
        v45 = (uint64_t *)v170;
        if ((_QWORD)v171)
          goto LABEL_101;
        v81 = (uint64_t)(v170 - *((_QWORD *)&v169 + 1)) >> 3;
        v82 = 42 * v81 - 1;
        if ((_QWORD)v170 == *((_QWORD *)&v169 + 1))
          v82 = 0;
        if ((unint64_t)(v82 - *((_QWORD *)&v171 + 1)) >= 0x2A)
        {
          *(_QWORD *)&v171 = 42;
          *(_QWORD *)v163 = *(_QWORD *)(v170 - 8);
          *(_QWORD *)&v170 = v170 - 8;
          sub_2393C7DE8((void **)&v169, v163);
          goto LABEL_100;
        }
        if (v81 < (uint64_t)(*((_QWORD *)&v170 + 1) - v169) >> 3)
        {
          if (*((_QWORD *)&v169 + 1) == (_QWORD)v169)
          {
            *(_QWORD *)v163 = operator new(0xFC0uLL);
            sub_2393C7F8C((char **)&v169, v163);
            *(_QWORD *)v163 = *(_QWORD *)(v170 - 8);
            *(_QWORD *)&v170 = v170 - 8;
          }
          else
          {
            *(_QWORD *)v163 = operator new(0xFC0uLL);
          }
          sub_2393C7DE8((void **)&v169, v163);
          v97 = 21;
          if ((_QWORD)v170 - *((_QWORD *)&v169 + 1) != 8)
            v97 = v171 + 42;
          *(_QWORD *)&v171 = v97;
          goto LABEL_100;
        }
        if (*((_QWORD *)&v170 + 1) == (_QWORD)v169)
          v92 = 1;
        else
          v92 = (uint64_t)(*((_QWORD *)&v170 + 1) - v169) >> 2;
        if (v92 >> 61)
LABEL_158:
          sub_23938C4B8();
        v93 = (char *)operator new(8 * v92);
        v94 = operator new(0xFC0uLL);
        if (v92)
        {
          v95 = &v93[8 * v92];
          v96 = v93;
        }
        else
        {
          v98 = v94;
          v99 = (char *)operator new(8uLL);
          v95 = v99 + 8;
          operator delete(v93);
          v94 = v98;
          v44 = (uint64_t *)*((_QWORD *)&v169 + 1);
          v45 = (uint64_t *)v170;
          v96 = v99;
        }
        *(_QWORD *)v96 = v94;
        v100 = v96 + 8;
        v101 = v96;
        if (v44 == v45)
        {
LABEL_96:
          v102 = (void *)v169;
          *(_QWORD *)&v169 = v96;
          *((_QWORD *)&v169 + 1) = v101;
          *(_QWORD *)&v170 = v100;
          *((_QWORD *)&v170 + 1) = v95;
          v103 = v171 + 42;
          if (v100 - v101 == 8)
            v103 = 21;
          *(_QWORD *)&v171 = v103;
          v26 = v161;
          if (v102)
            operator delete(v102);
LABEL_100:
          v43 = v171;
          v44 = (uint64_t *)*((_QWORD *)&v169 + 1);
          v45 = (uint64_t *)v170;
LABEL_101:
          v104 = &v44[v43 / 0x2A];
          v105 = *v104 + 96 * (v43 % 0x2A);
          if (v45 == v44)
            v105 = 0;
          if (v105 == *v104)
            v105 = *(v104 - 1) + 4032;
          v106 = *(_OWORD *)(v31 + 16);
          *(_OWORD *)(v105 - 96) = *(_OWORD *)v31;
          *(_OWORD *)(v105 - 80) = v106;
          v107 = v29 + 96 * v30;
          *(_QWORD *)(v105 - 56) = 0;
          *(_QWORD *)(v105 - 48) = 0;
          *(_QWORD *)(v105 - 64) = 0;
          *(_OWORD *)(v105 - 64) = *(_OWORD *)(v107 + 32);
          *(_QWORD *)(v105 - 48) = *(_QWORD *)(v107 + 48);
          *(_QWORD *)(v107 + 32) = 0;
          *(_QWORD *)(v107 + 40) = 0;
          *(_QWORD *)(v107 + 48) = 0;
          *(_QWORD *)(v105 - 40) = 0;
          *(_QWORD *)(v105 - 32) = 0;
          *(_QWORD *)(v105 - 24) = 0;
          *(_OWORD *)(v105 - 40) = *(_OWORD *)(v107 + 56);
          *(_QWORD *)(v105 - 24) = *(_QWORD *)(v107 + 72);
          *(_QWORD *)(v107 + 56) = 0;
          *(_QWORD *)(v107 + 64) = 0;
          *(_QWORD *)(v107 + 72) = 0;
          v108 = *v33;
          *(_QWORD *)(v105 - 11) = *(_QWORD *)(v31 + 85);
          *(_QWORD *)(v105 - 16) = v108;
          v109 = *((_QWORD *)&v171 + 1);
          *(_QWORD *)&v171 = v171 - 1;
          ++*((_QWORD *)&v171 + 1);
          v110 = v109 + v171;
          v111 = (v109 + (uint64_t)v171) / 0x2AuLL;
          v112 = *(_QWORD *)(*((_QWORD *)&v169 + 1) + 8 * v111);
          v113 = v110 - 42 * v111;
          v114 = *(void **)(v112 + 96 * v113 + 56);
          if (v114)
          {
            *(_QWORD *)(v112 + 96 * v113 + 64) = v114;
            operator delete(v114);
          }
          v115 = *(void **)(v112 + 96 * v113 + 32);
          if (v115)
          {
            *(_QWORD *)(v112 + 96 * v113 + 40) = v115;
            operator delete(v115);
          }
          v40 = v170;
          v41 = (_QWORD)v170 == *((_QWORD *)&v169 + 1);
          v42 = 42 * ((uint64_t)(v170 - *((_QWORD *)&v169 + 1)) >> 3) - 1;
          goto LABEL_110;
        }
        break;
      case 0xFFFFFC1F:
        v46 = *((_QWORD *)&v171 + 1) + v171 - 1;
        v47 = *(_QWORD *)(*((_QWORD *)&v169 + 1) + 8 * (v46 / 0x2A));
        v48 = v46 % 0x2A;
        v49 = *(void **)(v47 + 96 * (v46 % 0x2A) + 56);
        if (v49)
        {
          *(_QWORD *)(v47 + 96 * v48 + 64) = v49;
          operator delete(v49);
        }
        v50 = *(void **)(v47 + 96 * v48 + 32);
        if (v50)
        {
          *(_QWORD *)(v47 + 96 * v48 + 40) = v50;
          operator delete(v50);
        }
        v40 = v170;
        v41 = (_QWORD)v170 == *((_QWORD *)&v169 + 1);
        v42 = 42 * ((uint64_t)(v170 - *((_QWORD *)&v169 + 1)) >> 3) - 1;
        goto LABEL_110;
      case 0xFFFFFC20:
        v51 = *(_OWORD *)(v31 + 16);
        *(_OWORD *)v163 = *(_OWORD *)v31;
        *(_OWORD *)&v163[16] = v51;
        v52 = v29 + 96 * v30;
        v164[1] = 0;
        v165 = 0;
        v164[0] = 0;
        v54 = *(_BYTE **)(v52 + 32);
        v53 = *(_BYTE **)(v52 + 40);
        v55 = v53 - v54;
        if (v53 == v54)
          goto LABEL_34;
        if (0xAAAAAAAAAAAAAAABLL * (v55 >> 3) >= 0xAAAAAAAAAAAAAABLL)
          goto LABEL_156;
        v56 = (char *)operator new(v55);
        v164[0] = v56;
        v164[1] = v56;
        v165 = &v56[8 * (v55 >> 3)];
        v57 = 24 * ((v55 - 24) / 0x18uLL) + 24;
        memcpy(v56, v54, v57);
        v164[1] = &v56[v57];
LABEL_34:
        v58 = v29 + 96 * v30;
        __p[0] = 0;
        __p[1] = 0;
        v167 = 0;
        v60 = *(_BYTE **)(v58 + 56);
        v59 = *(_BYTE **)(v58 + 64);
        v61 = v59 - v60;
        if (v59 == v60)
          goto LABEL_37;
        if (v61 < 0)
          goto LABEL_156;
        v62 = (char *)operator new(v59 - v60);
        __p[0] = v62;
        __p[1] = v62;
        v167 = &v62[16 * (v61 >> 4)];
        v63 = v61 & 0xFFFFFFFFFFFFFFF0;
        memcpy(v62, v60, v63);
        __p[1] = &v62[v63];
LABEL_37:
        v64 = *v33;
        *(_QWORD *)((char *)v168 + 5) = *(_QWORD *)(v31 + 85);
        v168[0] = v64;
        (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v33 + 24))(*v33, 1, v31);
        (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v168[0] + 24))(v168[0], 0, v163);
        v65 = *((_QWORD *)&v169 + 1);
        if ((_QWORD)v170 == *((_QWORD *)&v169 + 1))
          v66 = 0;
        else
          v66 = 42 * ((uint64_t)(v170 - *((_QWORD *)&v169 + 1)) >> 3) - 1;
        v67 = *((_QWORD *)&v171 + 1) + v171;
        if (v66 == *((_QWORD *)&v171 + 1) + (_QWORD)v171)
        {
          sub_2393C78C0((uint64_t)&v169);
          v65 = *((_QWORD *)&v169 + 1);
          v67 = *((_QWORD *)&v171 + 1) + v171;
        }
        v68 = *(_QWORD *)(v65 + 8 * (v67 / 0x2A)) + 96 * (v67 % 0x2A);
        v69 = *(_OWORD *)&v163[16];
        *(_OWORD *)v68 = *(_OWORD *)v163;
        *(_OWORD *)(v68 + 16) = v69;
        *(_QWORD *)(v68 + 40) = 0;
        *(_QWORD *)(v68 + 48) = 0;
        *(_QWORD *)(v68 + 32) = 0;
        *(_OWORD *)(v68 + 32) = *(_OWORD *)v164;
        *(_QWORD *)(v68 + 48) = v165;
        v164[0] = 0;
        v164[1] = 0;
        v165 = 0;
        *(_QWORD *)(v68 + 56) = 0;
        *(_QWORD *)(v68 + 64) = 0;
        *(_QWORD *)(v68 + 72) = 0;
        *(_OWORD *)(v68 + 56) = *(_OWORD *)__p;
        *(_QWORD *)(v68 + 72) = v167;
        __p[0] = 0;
        __p[1] = 0;
        v167 = 0;
        v70 = v168[0];
        *(_QWORD *)(v68 + 85) = *(_QWORD *)((char *)v168 + 5);
        *(_QWORD *)(v68 + 80) = v70;
        ++*((_QWORD *)&v171 + 1);
        v26 = v161;
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        if (v164[0])
        {
          v164[1] = v164[0];
          operator delete(v164[0]);
        }
        goto LABEL_8;
      default:
        sub_2393C78AC();
        goto LABEL_158;
    }
    break;
  }
  while (1)
  {
    if (v100 == v95)
    {
      if (v101 <= v96)
      {
        v127 = (v100 - v96) >> 2;
        if (v100 == v96)
          v127 = 1;
        if (v127 >> 61)
          goto LABEL_158;
        v128 = v96;
        v129 = v127 >> 2;
        v157 = 8 * v127;
        v130 = (char *)operator new(8 * v127);
        v131 = v129;
        v96 = v130;
        v117 = &v130[8 * v129];
        v118 = v117;
        v132 = v100 - v101;
        if (v100 != v101)
        {
          v118 = &v117[v132 & 0xFFFFFFFFFFFFFFF8];
          v133 = v132 - 8;
          if (v133 >= 0x38)
          {
            v135 = 8 * v131;
            if ((unint64_t)(&v130[8 * v131] - v101) < 0x20)
            {
              v134 = v117;
              goto LABEL_136;
            }
            v136 = (v133 >> 3) + 1;
            v137 = 8 * (v136 & 0x3FFFFFFFFFFFFFFCLL);
            v134 = &v117[v137];
            v138 = (__int128 *)(v101 + 16);
            v139 = &v130[v135 + 16];
            v140 = v136 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v141 = *v138;
              *((_OWORD *)v139 - 1) = *(v138 - 1);
              *(_OWORD *)v139 = v141;
              v138 += 2;
              v139 += 32;
              v140 -= 4;
            }
            while (v140);
            if (v136 != (v136 & 0x3FFFFFFFFFFFFFFCLL))
            {
              v101 += v137;
              goto LABEL_136;
            }
          }
          else
          {
            v134 = v117;
            do
            {
LABEL_136:
              v142 = *(_QWORD *)v101;
              v101 += 8;
              *(_QWORD *)v134 = v142;
              v134 += 8;
            }
            while (v134 != v118);
          }
        }
        v100 = &v130[v157];
        if (v128)
        {
          v143 = v128;
          v144 = v117;
          v145 = v96;
          operator delete(v143);
          v117 = v144;
          v96 = v145;
        }
        goto LABEL_115;
      }
      v120 = (v101 - v96) >> 3;
      if (v120 >= -1)
        v121 = v120 + 1;
      else
        v121 = v120 + 2;
      v122 = v121 >> 1;
      v123 = &v101[-8 * (v121 >> 1)];
      v124 = v100;
      v125 = v100 - v101;
      if (v100 != v101)
      {
        v156 = v96;
        memmove(v123, v101, v100 - v101);
        v125 = v100 - v101;
        v96 = v156;
        v124 = v101;
      }
      v126 = -v122;
      v118 = &v123[v125];
      v117 = &v124[8 * v126];
    }
    else
    {
      v117 = v101;
      v118 = v100;
      v100 = v95;
    }
LABEL_115:
    v119 = *v44++;
    *(_QWORD *)v118 = v119;
    v101 = v117;
    v95 = v100;
    v100 = v118 + 8;
    if (v44 == (uint64_t *)v170)
      goto LABEL_96;
  }
}

char *sub_2393C69D8(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, char a5)
{
  uint64_t v5;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  unsigned int v16;
  char *v17;
  BOOL v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  void *v24;
  void *v25;
  __int128 v26;
  _BYTE *v27;
  _BYTE *v28;
  int64_t v29;
  char *v30;
  size_t v31;
  _BYTE *v32;
  _BYTE *v33;
  uint64_t v34;
  char *v35;
  size_t v36;
  uint64_t v37;
  char *v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  _BYTE *v43;
  _BYTE *v44;
  unint64_t v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  char *v52;
  char *v53;
  size_t v54;
  _BYTE *v55;
  char *v56;
  char *i;
  __int128 v58;
  uint64_t v59;
  char *v60;
  char *v61;
  int64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char *v66;
  size_t v67;
  char *v68;
  char *v69;
  double *v70;
  uint64_t v71;
  int64_t v72;
  unint64_t v73;
  char *v74;
  unint64_t v75;
  double *v76;
  unint64_t v77;
  char *v78;
  unint64_t v79;
  char *v80;
  double *v81;
  BOOL v83;
  BOOL v84;
  uint64_t v85;
  uint64_t v86;
  const double *v87;
  double *v88;
  uint64_t v89;
  const double *v90;
  double *v91;
  char *v92;
  __int128 v93;
  unint64_t v94;
  char *v95;
  double *v96;
  unint64_t v97;
  BOOL v99;
  BOOL v100;
  uint64_t v101;
  uint64_t v102;
  const double *v103;
  double *v104;
  uint64_t v105;
  const double *v106;
  double *v107;
  char *v108;
  char *v109;
  void *v110;
  void *v111;
  void *v112;
  void *v113;
  uint64_t v114;
  double *v115;
  _BYTE *v116;
  unsigned int v117;
  uint64_t v118;
  char v119;
  char *v120;
  char *j;
  void *v122;
  void *v123;
  void **v125;
  uint64_t v126;
  double *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  double *v135;
  char v136;
  uint64_t v137;
  _BYTE v139[56];
  void *__p[2];
  _OWORD v141[2];
  __int128 v142;
  char v143;
  char *v144;
  char *v145;
  unint64_t v146;
  float64x2x2_t v147;
  float64x2x2_t v148;
  float64x2x2_t v149;
  float64x2x2_t v150;

  v144 = 0;
  v145 = 0;
  v146 = 0;
  v5 = qword_2569303E8;
  if (qword_2569303E8)
  {
    *(_QWORD *)&v142 = a2;
    *((_QWORD *)&v142 + 1) = a2;
    v143 = 0;
    *(_DWORD *)v139 = 0;
    memset(&v139[8], 0, 48);
    *(_OWORD *)__p = 0u;
    memset(v141, 0, 21);
    v8 = sub_2393C7420((void **)&v144, (uint64_t)v139);
    v145 = v8;
    if (__p[0])
      operator delete(__p[0]);
    if (*(_QWORD *)&v139[32])
      operator delete(*(void **)&v139[32]);
    v9 = a2 - a1;
    v10 = *((_QWORD *)v8 - 8);
    *((_DWORD *)v8 - 24) = 0;
    *((_QWORD *)v8 - 11) = a1;
    *((_QWORD *)v8 - 10) = a1;
    *((_QWORD *)v8 - 9) = a2;
    v11 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v8 - 7) - v10) >> 3);
    if (dword_2569303DC <= v11)
    {
      if (dword_2569303DC < v11)
        *((_QWORD *)v8 - 7) = v10 + 24 * dword_2569303DC;
    }
    else
    {
      sub_2393C75EC((void **)v8 - 8, dword_2569303DC - v11, &v142);
    }
    v13 = *((_QWORD *)v8 - 5);
    v14 = (*((_QWORD *)v8 - 4) - v13) >> 4;
    if (dword_2569303E0 <= v14)
    {
      if (dword_2569303E0 < v14)
        *((_QWORD *)v8 - 4) = v13 + 16 * dword_2569303E0;
    }
    else
    {
      sub_2393C7788((char **)v8 - 5, dword_2569303E0 - v14);
    }
    v15 = 0;
    v129 = 0;
    v130 = 0;
    v135 = 0;
    v128 = 0;
    v136 = 0;
    v16 = 0;
    v133 = 0;
    *((_QWORD *)v8 - 2) = v5;
    *((_DWORD *)v8 - 2) = a4;
    *(v8 - 4) = a5;
    v17 = (char *)v141 + 8;
    v131 = 0;
    while (1)
    {
      v18 = (++v16 & 0xFFF) != 0 || (int)(v16 >> 12) < (int)v9;
      if (!v18)
      {
        sub_2393C78AC();
LABEL_167:
        abort();
      }
      v20 = v8 - 16;
      v19 = *((_QWORD *)v8 - 2);
      v21 = v8 - 96;
      if (v19)
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v19 + 16))(v19, v8 - 96);
      switch(*(_DWORD *)v21)
      {
        case 0xFFFFFC18:
          v22 = *((_QWORD *)v8 - 10);
          if ((a4 & 0x20) != 0 && v22 == a1)
            goto LABEL_28;
          v41 = v133;
          if ((v136 & (v133 >= v22 - *((_QWORD *)v8 - 11))) != 0)
          {
            v42 = (char *)v135;
            goto LABEL_133;
          }
          v137 = v22 - *((_QWORD *)v8 - 11);
          v44 = (_BYTE *)*((_QWORD *)v8 - 8);
          v43 = (_BYTE *)*((_QWORD *)v8 - 7);
          v45 = 0xAAAAAAAAAAAAAAABLL * ((v43 - v44) >> 3);
          v46 = v131;
          if (0xAAAAAAAAAAAAAAABLL * ((v130 - (uint64_t)v131) >> 3) < v45)
          {
            if (v131)
            {
              operator delete(v131);
              v130 = 0;
            }
            if (v45 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_167;
            v47 = 0x5555555555555556 * (v130 >> 3);
            if (v47 <= v45)
              v47 = 0xAAAAAAAAAAAAAAABLL * ((v43 - v44) >> 3);
            v48 = 0xAAAAAAAAAAAAAAABLL * (v130 >> 3) >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v47;
            if (v48 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_167;
            v49 = 24 * v48;
            v46 = (char *)operator new(24 * v48);
            v50 = v46;
            if (v44 != v43)
            {
              v51 = (v43 - v44 - 24) / 0x18uLL;
              v52 = v46;
              v53 = v17;
              v54 = 24 * v51 + 24;
              memcpy(v46, v44, v54);
              v46 = v52;
              v50 = &v52[v54];
              v17 = v53;
            }
            v130 = (uint64_t)&v46[v49];
            goto LABEL_71;
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v15 - v131) >> 3) >= v45)
          {
            if (v44 == v43)
            {
              v50 = v131;
            }
            else
            {
              v50 = v131;
              do
              {
                *(_OWORD *)v50 = *(_OWORD *)v44;
                v50[16] = v44[16];
                v50 += 24;
                v44 += 24;
              }
              while (v44 != v43);
              v46 = v131;
            }
LABEL_71:
            v59 = v50 - v46;
            v15 = v46;
            goto LABEL_72;
          }
          v55 = &v44[8 * ((v15 - v131) >> 3)];
          if (v15 != v131)
          {
            v56 = v131;
            do
            {
              *(_OWORD *)v56 = *(_OWORD *)v44;
              v56[16] = v44[16];
              v44 += 24;
              v56 += 24;
            }
            while (v44 != v55);
          }
          for (i = v15; v55 != v43; v55 += 24)
          {
            v58 = *(_OWORD *)v55;
            *((_QWORD *)i + 2) = *((_QWORD *)v55 + 2);
            *(_OWORD *)i = v58;
            i += 24;
          }
          v59 = i - v15;
          v46 = v131;
LABEL_72:
          v131 = v46;
          v60 = (char *)*((_QWORD *)v8 - 5);
          v61 = (char *)*((_QWORD *)v8 - 4);
          v62 = v61 - v60;
          v63 = (v61 - v60) >> 4;
          v42 = (char *)v135;
          if (v63 <= (v129 - (uint64_t)v135) >> 4)
          {
            v70 = v128;
            v72 = (char *)v128 - (char *)v135;
            v73 = ((char *)v128 - (char *)v135) >> 4;
            if (v73 >= v63)
            {
              if (v60 == v61)
              {
                v78 = (char *)v135;
              }
              else
              {
                v77 = v62 - 16;
                if ((unint64_t)(v62 - 16) < 0xF0)
                {
                  v78 = (char *)v135;
                  goto LABEL_130;
                }
                v94 = v77 & 0xFFFFFFFFFFFFFFF0 | 8;
                v95 = (char *)v135 + v94;
                v96 = (double *)&v60[v94];
                v97 = (v77 & 0xFFFFFFFFFFFFFFF0) + 16;
                v99 = v135 + 1 < (double *)&v60[v97] && v60 + 8 < (char *)v135 + v97;
                v78 = (char *)v135;
                v100 = v95 <= v60 || v135 >= v96;
                if (!v100 || v99)
                {
                  do
                  {
LABEL_130:
                    *(_QWORD *)v78 = *(_QWORD *)v60;
                    *((_QWORD *)v78 + 1) = *((_QWORD *)v60 + 1);
                    v78 += 16;
                    v60 += 16;
                  }
                  while (v60 != v61);
                }
                else
                {
                  v101 = (v77 >> 4) + 1;
                  v102 = 2 * (v101 & 0x1FFFFFFFFFFFFFFCLL);
                  v78 = (char *)&v135[v102];
                  v103 = (const double *)(v60 + 32);
                  v104 = v135 + 4;
                  v105 = v101 & 0x1FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v106 = v103 - 4;
                    v148 = vld2q_f64(v106);
                    v150 = vld2q_f64(v103);
                    v107 = v104 - 4;
                    vst2q_f64(v107, v148);
                    vst2q_f64(v104, v150);
                    v103 += 8;
                    v104 += 8;
                    v105 -= 4;
                  }
                  while (v105);
                  if (v101 != (v101 & 0x1FFFFFFFFFFFFFFCLL))
                  {
                    v60 += v102 * 8;
                    goto LABEL_130;
                  }
                }
              }
              v71 = v137;
              v69 = (char *)(v78 - (char *)v135);
              v70 = v135;
              goto LABEL_132;
            }
            v74 = &v60[16 * v73];
            if (v128 != v135)
            {
              v75 = v72 - 16;
              if ((unint64_t)(v72 - 16) < 0xF0)
              {
                v76 = v135;
                goto LABEL_108;
              }
              v79 = v72 & 0xFFFFFFFFFFFFFFF0;
              v80 = (char *)v135 + v79 - 8;
              v81 = (double *)&v60[v79 - 8];
              v83 = v135 + 1 < (double *)&v60[v79] && v60 + 8 < (char *)v135 + v79;
              v76 = v135;
              v84 = v80 <= v60 || v135 >= v81;
              if (!v84 || v83)
              {
                do
                {
LABEL_108:
                  *v76 = *(double *)v60;
                  v76[1] = *((double *)v60 + 1);
                  v60 += 16;
                  v76 += 2;
                }
                while (v60 != v74);
              }
              else
              {
                v85 = (v75 >> 4) + 1;
                v86 = 2 * (v85 & 0x1FFFFFFFFFFFFFFCLL);
                v76 = &v135[v86];
                v87 = (const double *)(v60 + 32);
                v88 = v135 + 4;
                v89 = v85 & 0x1FFFFFFFFFFFFFFCLL;
                do
                {
                  v90 = v87 - 4;
                  v147 = vld2q_f64(v90);
                  v149 = vld2q_f64(v87);
                  v91 = v88 - 4;
                  vst2q_f64(v91, v147);
                  vst2q_f64(v88, v149);
                  v87 += 8;
                  v88 += 8;
                  v89 -= 4;
                }
                while (v89);
                if (v85 != (v85 & 0x1FFFFFFFFFFFFFFCLL))
                {
                  v60 += v86 * 8;
                  goto LABEL_108;
                }
              }
            }
            v92 = (char *)v128;
            if (v74 == v61)
            {
              v71 = v137;
              v69 = 0;
            }
            else
            {
              v71 = v137;
              do
              {
                v93 = *(_OWORD *)v74;
                v74 += 16;
                *(_OWORD *)v92 = v93;
                v92 += 16;
              }
              while (v74 != v61);
              v69 = (char *)(v92 - (char *)v128);
            }
            goto LABEL_132;
          }
          if (v135)
          {
            operator delete(v135);
            v129 = 0;
          }
          if (v62 < 0)
            goto LABEL_167;
          v64 = v129 >> 3;
          if (v129 >> 3 <= v63)
            v64 = (v61 - v60) >> 4;
          if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFF0)
            v64 = 0xFFFFFFFFFFFFFFFLL;
          if (v64 >> 60)
            goto LABEL_167;
          v65 = 16 * v64;
          v42 = (char *)operator new(16 * v64);
          v66 = v42;
          if (v60 != v61)
          {
            v67 = ((v62 - 16) & 0xFFFFFFFFFFFFFFF0) + 16;
            v68 = v42;
            memcpy(v42, v60, v67);
            v42 = v68;
            v66 = &v68[v67];
          }
          v129 = (uint64_t)&v42[v65];
          v69 = (char *)(v66 - v42);
          v70 = (double *)v42;
          v71 = v137;
LABEL_132:
          v15 += v59;
          v128 = (double *)&v69[(_QWORD)v70];
          v41 = v71;
LABEL_133:
          v108 = v145;
          v135 = (double *)v42;
          if (v41 == v9)
          {
            v109 = v144;
            while (v108 != v109)
            {
              v110 = (void *)*((_QWORD *)v108 - 5);
              if (v110)
              {
                *((_QWORD *)v108 - 4) = v110;
                operator delete(v110);
              }
              v111 = (void *)*((_QWORD *)v108 - 8);
              if (v111)
              {
                *((_QWORD *)v108 - 7) = v111;
                operator delete(v111);
              }
              v108 -= 96;
            }
            v145 = v109;
            v136 = 1;
            v133 = a2 - a1;
          }
          else
          {
            v112 = (void *)*((_QWORD *)v145 - 5);
            if (v112)
            {
              *((_QWORD *)v145 - 4) = v112;
              operator delete(v112);
            }
            v133 = v41;
            v113 = (void *)*((_QWORD *)v108 - 8);
            if (v113)
            {
              *((_QWORD *)v108 - 7) = v113;
              operator delete(v113);
            }
            v145 = v108 - 96;
            v136 = 1;
          }
LABEL_17:
          v8 = v145;
          if (v144 == v145)
          {
            if ((v136 & 1) != 0)
            {
              v114 = *a3;
              *(_QWORD *)v114 = a1;
              *(_QWORD *)(v114 + 8) = a1 + v133;
              *(_BYTE *)(v114 + 16) = 1;
              v115 = v135;
              if (v15 != v131)
              {
                v116 = v131 + 16;
                v117 = 1;
                do
                {
                  v118 = v114 + 24 * v117;
                  *(_OWORD *)v118 = *((_OWORD *)v116 - 1);
                  v119 = *v116;
                  v116 += 24;
                  *(_BYTE *)(v118 + 16) = v119;
                  v18 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v131) >> 3) > v117++;
                }
                while (v18);
              }
              v12 = 1;
              if (!v135)
              {
LABEL_155:
                if (v131)
                  operator delete(v131);
                goto LABEL_157;
              }
            }
            else
            {
              v12 = 0;
              v115 = v135;
              if (!v135)
                goto LABEL_155;
            }
            operator delete(v115);
            goto LABEL_155;
          }
          break;
        case 0xFFFFFC1D:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_17;
        case 0xFFFFFC1F:
LABEL_28:
          v23 = v145;
          v24 = (void *)*((_QWORD *)v145 - 5);
          if (v24)
          {
            *((_QWORD *)v145 - 4) = v24;
            operator delete(v24);
          }
          v25 = (void *)*((_QWORD *)v23 - 8);
          if (v25)
          {
            *((_QWORD *)v23 - 7) = v25;
            operator delete(v25);
          }
          v145 = v23 - 96;
          goto LABEL_17;
        case 0xFFFFFC20:
          v26 = *((_OWORD *)v8 - 5);
          *(_OWORD *)v139 = *(_OWORD *)v21;
          *(_OWORD *)&v139[16] = v26;
          memset(&v139[32], 0, 24);
          v28 = (_BYTE *)*((_QWORD *)v8 - 8);
          v27 = (_BYTE *)*((_QWORD *)v8 - 7);
          v29 = v27 - v28;
          if (v27 == v28)
            goto LABEL_35;
          v132 = v15;
          if (0xAAAAAAAAAAAAAAABLL * (v29 >> 3) > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_167;
          v30 = (char *)operator new(v29);
          *(_QWORD *)&v139[32] = v30;
          *(_QWORD *)&v139[40] = v30;
          *(_QWORD *)&v139[48] = &v30[8 * (v29 >> 3)];
          v31 = 24 * ((v29 - 24) / 0x18uLL) + 24;
          memcpy(v30, v28, v31);
          *(_QWORD *)&v139[40] = &v30[v31];
          v15 = v132;
LABEL_35:
          __p[0] = 0;
          __p[1] = 0;
          *(_QWORD *)&v141[0] = 0;
          v33 = (_BYTE *)*((_QWORD *)v8 - 5);
          v32 = (_BYTE *)*((_QWORD *)v8 - 4);
          v34 = v32 - v33;
          if (v32 == v33)
            goto LABEL_38;
          if (v34 < 0)
            goto LABEL_167;
          v35 = (char *)operator new(v32 - v33);
          __p[0] = v35;
          __p[1] = v35;
          *(_QWORD *)&v141[0] = &v35[16 * (v34 >> 4)];
          v36 = v34 & 0xFFFFFFFFFFFFFFF0;
          memcpy(v35, v33, v36);
          __p[1] = &v35[v36];
LABEL_38:
          v37 = *(_QWORD *)v20;
          v17 = (char *)v141 + 8;
          *(_QWORD *)((char *)v141 + 13) = *(_QWORD *)(v20 + 5);
          *((_QWORD *)&v141[0] + 1) = v37;
          (*(void (**)(_QWORD, uint64_t, char *))(**(_QWORD **)v20 + 24))(*(_QWORD *)v20, 1, v21);
          (*(void (**)(_QWORD, _QWORD, _BYTE *))(**((_QWORD **)&v141[0] + 1) + 24))(*((_QWORD *)&v141[0] + 1), 0, v139);
          v38 = v145;
          if ((unint64_t)v145 >= v146)
          {
            v145 = sub_2393C7420((void **)&v144, (uint64_t)v139);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          else
          {
            v39 = *(_OWORD *)&v139[16];
            *(_OWORD *)v145 = *(_OWORD *)v139;
            *((_OWORD *)v38 + 1) = v39;
            *((_QWORD *)v38 + 4) = 0;
            *((_QWORD *)v38 + 5) = 0;
            *((_QWORD *)v38 + 6) = 0;
            *((_QWORD *)v38 + 7) = 0;
            *((_OWORD *)v38 + 2) = *(_OWORD *)&v139[32];
            *((_QWORD *)v38 + 6) = *(_QWORD *)&v139[48];
            memset(&v139[32], 0, 24);
            *((_QWORD *)v38 + 8) = 0;
            *((_QWORD *)v38 + 9) = 0;
            *(_OWORD *)(v38 + 56) = *(_OWORD *)__p;
            *((_QWORD *)v38 + 9) = *(_QWORD *)&v141[0];
            __p[0] = 0;
            __p[1] = 0;
            *(_QWORD *)&v141[0] = 0;
            v40 = *((_QWORD *)&v141[0] + 1);
            *(_QWORD *)(v38 + 85) = *(_QWORD *)((char *)v141 + 13);
            *((_QWORD *)v38 + 10) = v40;
            v145 = v38 + 96;
          }
          if (*(_QWORD *)&v139[32])
          {
            *(_QWORD *)&v139[40] = *(_QWORD *)&v139[32];
            operator delete(*(void **)&v139[32]);
          }
          goto LABEL_17;
        default:
          v125 = (void **)sub_2393C78AC();
          return sub_2393C7420(v125, v126);
      }
    }
  }
  v12 = 0;
LABEL_157:
  v120 = v144;
  if (v144)
  {
    for (j = v145; j != v120; j -= 96)
    {
      v122 = (void *)*((_QWORD *)j - 5);
      if (v122)
      {
        *((_QWORD *)j - 4) = v122;
        operator delete(v122);
      }
      v123 = (void *)*((_QWORD *)j - 8);
      if (v123)
      {
        *((_QWORD *)j - 7) = v123;
        operator delete(v123);
      }
    }
    operator delete(v120);
  }
  return (char *)v12;
}

char *sub_2393C7420(void **a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  __int128 v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  char *v21;
  void *v22;
  void *v23;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 5);
  v3 = v2 + 1;
  if (v2 + 1 > 0x2AAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) > v3)
    v3 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) >= 0x155555555555555)
    v6 = 0x2AAAAAAAAAAAAAALL;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL)
      sub_23938C4B8();
    v7 = (char *)operator new(96 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = *(_OWORD *)(a2 + 16);
  v9 = &v7[96 * v2];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v8;
  v10 = &v7[96 * v6];
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v9 + 6) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(v9 + 85) = *(_QWORD *)(a2 + 85);
  v11 = *(_QWORD *)(a2 + 72);
  v12 = *(_QWORD *)(a2 + 80);
  *((_QWORD *)v9 + 9) = 0;
  *((_QWORD *)v9 + 10) = v12;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(a2 + 56);
  *((_QWORD *)v9 + 9) = v11;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v13 = v9 + 96;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v9;
    a1[1] = v13;
    a1[2] = v10;
  }
  else
  {
    v16 = 0;
    do
    {
      v17 = &v9[v16];
      v18 = &v15[v16];
      v19 = *(_OWORD *)&v15[v16 - 80];
      *((_OWORD *)v17 - 6) = *(_OWORD *)&v15[v16 - 96];
      *((_OWORD *)v17 - 5) = v19;
      *((_QWORD *)v17 - 7) = 0;
      *((_QWORD *)v17 - 6) = 0;
      *((_OWORD *)v17 - 4) = *(_OWORD *)&v15[v16 - 64];
      *((_QWORD *)v17 - 6) = *(_QWORD *)&v15[v16 - 48];
      *((_QWORD *)v18 - 8) = 0;
      *((_QWORD *)v18 - 7) = 0;
      *((_QWORD *)v18 - 6) = 0;
      *((_QWORD *)v17 - 4) = 0;
      *((_QWORD *)v17 - 3) = 0;
      *(_OWORD *)(v17 - 40) = *(_OWORD *)&v15[v16 - 40];
      *((_QWORD *)v17 - 3) = *(_QWORD *)&v15[v16 - 24];
      *((_QWORD *)v18 - 5) = 0;
      *((_QWORD *)v18 - 4) = 0;
      *((_QWORD *)v18 - 3) = 0;
      v20 = *(_QWORD *)&v15[v16 - 16];
      *(_QWORD *)(v17 - 11) = *(_QWORD *)&v15[v16 - 11];
      *((_QWORD *)v17 - 2) = v20;
      v16 -= 96;
    }
    while (&v15[v16] != v14);
    v15 = (char *)*a1;
    v21 = (char *)a1[1];
    *a1 = &v9[v16];
    a1[1] = v13;
    a1[2] = v10;
    while (v21 != v15)
    {
      v22 = (void *)*((_QWORD *)v21 - 5);
      if (v22)
      {
        *((_QWORD *)v21 - 4) = v22;
        operator delete(v22);
      }
      v23 = (void *)*((_QWORD *)v21 - 8);
      if (v23)
      {
        *((_QWORD *)v21 - 7) = v23;
        operator delete(v23);
      }
      v21 -= 96;
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

void sub_2393C75EC(void **a1, unint64_t a2, __int128 *a3)
{
  _BYTE *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  __int128 v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  char *v21;
  __int128 v22;

  v7 = (char *)a1[1];
  v6 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = &v7[24 * a2];
      v14 = 24 * a2;
      do
      {
        v15 = *a3;
        *((_QWORD *)v7 + 2) = *((_QWORD *)a3 + 2);
        *(_OWORD *)v7 = v15;
        v7 += 24;
        v14 -= 24;
      }
      while (v14);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (_BYTE *)*a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v6 - (_BYTE *)*a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 > 0xAAAAAAAAAAAAAAALL)
        sub_23938C4B8();
      v12 = (char *)operator new(24 * v11);
    }
    else
    {
      v12 = 0;
    }
    v16 = &v12[24 * v8];
    v17 = 24 * a2;
    v18 = &v16[24 * a2];
    v19 = v16;
    do
    {
      v20 = *a3;
      *((_QWORD *)v19 + 2) = *((_QWORD *)a3 + 2);
      *(_OWORD *)v19 = v20;
      v19 += 24;
      v17 -= 24;
    }
    while (v17);
    v21 = (char *)*a1;
    if (v7 != *a1)
    {
      do
      {
        v22 = *(_OWORD *)(v7 - 24);
        *((_QWORD *)v16 - 1) = *((_QWORD *)v7 - 1);
        *(_OWORD *)(v16 - 24) = v22;
        v16 -= 24;
        v7 -= 24;
      }
      while (v7 != v21);
      v7 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v18;
    a1[2] = &v12[24 * v11];
    if (v7)
      operator delete(v7);
  }
}

void sub_2393C7788(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  char *v15;
  char *v16;

  v5 = a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - v5) >> 4)
  {
    if (a2)
    {
      v12 = 16 * a2;
      bzero(a1[1], 16 * a2);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = (v5 - *a1) >> 4;
    v8 = v7 + a2;
    if ((v7 + a2) >> 60)
      abort();
    v9 = v4 - v6;
    if (v9 >> 3 > v8)
      v8 = v9 >> 3;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v10 = 0xFFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 60)
        sub_23938C4B8();
      v11 = (char *)operator new(16 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[16 * v7];
    v14 = 16 * a2;
    v15 = &v11[16 * v10];
    bzero(v13, v14);
    v16 = &v13[v14];
    if (v5 != v6)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v5 - 1);
        v13 -= 16;
        v5 -= 16;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v15;
    if (v5)
      operator delete(v5);
  }
}

uint64_t sub_2393C78AC()
{
  std::__libcpp_verbose_abort("regex_error was thrown in -fno-exceptions mode");
  return sub_2393C78C0();
}

void sub_2393C78C0(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  void *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  BOOL v36;
  int64_t v37;
  unint64_t v38;
  char *v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int64_t v44;
  unint64_t v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  char *v60;
  int64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  __int128 *v67;
  char *v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  __int128 *v75;
  _OWORD *v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  __int128 *v83;
  _OWORD *v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  void *v88;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x2A;
  v4 = v2 - 42;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_75:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v30 = (v5 - v9) >> 2;
      if (v5 == v9)
        v30 = 1;
      if (!(v30 >> 61))
      {
        v31 = v30 >> 2;
        v32 = 8 * v30;
        v33 = (char *)operator new(8 * v30);
        v34 = &v33[8 * v31];
        v35 = &v33[v32];
        v37 = v5 - v7;
        v36 = v5 == v7;
        v5 = v34;
        if (!v36)
        {
          v5 = &v34[v37 & 0xFFFFFFFFFFFFFFF8];
          v38 = v37 - 8;
          if ((unint64_t)(v37 - 8) >= 0x38)
          {
            v72 = &v33[8 * v31];
            v39 = v72;
            if ((unint64_t)(v72 - v7) >= 0x20)
            {
              v73 = (v38 >> 3) + 1;
              v74 = 8 * (v73 & 0x3FFFFFFFFFFFFFFCLL);
              v39 = &v34[v74];
              v75 = (__int128 *)(v6 + 3);
              v76 = v72 + 16;
              v77 = v73 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v78 = *v75;
                *(v76 - 1) = *(v75 - 1);
                *v76 = v78;
                v75 += 2;
                v76 += 2;
                v77 -= 4;
              }
              while (v77);
              if (v73 == (v73 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_73;
              v7 += v74;
            }
          }
          else
          {
            v39 = &v33[8 * v31];
          }
          do
          {
            v79 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v39 = v79;
            v39 += 8;
          }
          while (v39 != v5);
        }
        goto LABEL_73;
      }
LABEL_84:
      sub_23938C4B8();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_75;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v88 = operator new(0xFC0uLL);
      sub_2393C7F8C((char **)a1, &v88);
      return;
    }
    v88 = operator new(0xFC0uLL);
    sub_2393C7DE8((void **)a1, &v88);
    v40 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v40 + 1);
    v8 = *v40;
    *(_QWORD *)(a1 + 8) = v40 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_75;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v41 = (v5 - v9) >> 2;
      if (v5 == v9)
        v41 = 1;
      if (!(v41 >> 61))
      {
        v42 = v41 >> 2;
        v43 = 8 * v41;
        v33 = (char *)operator new(8 * v41);
        v34 = &v33[8 * v42];
        v35 = &v33[v43];
        v44 = v5 - v7;
        v36 = v5 == v7;
        v5 = v34;
        if (!v36)
        {
          v5 = &v34[v44 & 0xFFFFFFFFFFFFFFF8];
          v45 = v44 - 8;
          if ((unint64_t)(v44 - 8) >= 0x38)
          {
            v80 = &v33[8 * v42];
            v46 = v80;
            if ((unint64_t)(v80 - v7) >= 0x20)
            {
              v81 = (v45 >> 3) + 1;
              v82 = 8 * (v81 & 0x3FFFFFFFFFFFFFFCLL);
              v46 = &v34[v82];
              v83 = (__int128 *)(v40 + 3);
              v84 = v80 + 16;
              v85 = v81 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v86 = *v83;
                *(v84 - 1) = *(v83 - 1);
                *v84 = v86;
                v83 += 2;
                v84 += 2;
                v85 -= 4;
              }
              while (v85);
              if (v81 == (v81 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_73;
              v7 += v82;
            }
          }
          else
          {
            v46 = &v33[8 * v42];
          }
          do
          {
            v87 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v46 = v87;
            v46 += 8;
          }
          while (v46 != v5);
        }
LABEL_73:
        *(_QWORD *)a1 = v33;
        *(_QWORD *)(a1 + 8) = v34;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v35;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_75;
      }
      goto LABEL_84;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_84;
  v25 = (char *)operator new(8 * v24);
  v26 = &v25[8 * v21];
  v27 = &v25[8 * v24];
  v28 = operator new(0xFC0uLL);
  if (v21 == v24)
  {
    if (v20 < 1)
    {
      v47 = v20 >> 2;
      if (v18 == v19)
        v47 = 1;
      if (v47 >> 61)
        goto LABEL_84;
      v48 = 8 * v47;
      v26 = (char *)operator new(8 * v47);
      v27 = &v26[v48];
      operator delete(v25);
      v19 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v26;
    }
    else
    {
      v29 = v21 + 2;
      if (v21 >= -1)
        v29 = v21 + 1;
      v26 -= 8 * (v29 >> 1);
    }
  }
  *(_QWORD *)v26 = v28;
  v49 = v26 + 8;
  if (v18 != v19)
  {
    while (v26 != v25)
    {
      v53 = v26;
      v51 = v49;
LABEL_46:
      v54 = *(_QWORD *)(v18 - 8);
      v18 -= 8;
      *((_QWORD *)v53 - 1) = v54;
      v50 = v53 - 8;
      v49 = v51;
      v26 = v50;
      if (v18 == *(_QWORD *)(a1 + 8))
        goto LABEL_43;
    }
    if (v49 < v27)
    {
      v55 = (v27 - v49) >> 3;
      if (v55 >= -1)
        v56 = v55 + 1;
      else
        v56 = v55 + 2;
      v51 = &v49[8 * (v56 >> 1)];
      v53 = &v26[8 * (v56 >> 1)];
      if (v49 == v26)
      {
        v25 = v49;
      }
      else
      {
        memmove(&v26[8 * (v56 >> 1)], v26, v49 - v26);
        v25 = v26;
      }
      goto LABEL_46;
    }
    v57 = (v27 - v26) >> 2;
    if (v27 == v26)
      v57 = 1;
    if (v57 >> 61)
      goto LABEL_84;
    v58 = (v57 + 3) >> 2;
    v59 = 8 * v57;
    v60 = (char *)operator new(8 * v57);
    v25 = v60;
    v53 = &v60[8 * v58];
    v51 = v53;
    v61 = v49 - v26;
    if (v49 != v26)
    {
      v51 = &v53[v61 & 0xFFFFFFFFFFFFFFF8];
      v62 = v61 - 8;
      v63 = &v60[8 * v58];
      v64 = v26;
      if (v62 >= 0x38)
      {
        v63 = &v60[8 * v58];
        v64 = v26;
        if ((unint64_t)(v63 - v26) >= 0x20)
        {
          v65 = (v62 >> 3) + 1;
          v66 = 8 * (v65 & 0x3FFFFFFFFFFFFFFCLL);
          v63 = &v53[v66];
          v67 = (__int128 *)(v26 + 16);
          v68 = &v60[8 * v58 + 16];
          v69 = v65 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v70 = *v67;
            *((_OWORD *)v68 - 1) = *(v67 - 1);
            *(_OWORD *)v68 = v70;
            v67 += 2;
            v68 += 32;
            v69 -= 4;
          }
          while (v69);
          if (v65 == (v65 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_65;
          v64 = &v26[v66];
        }
      }
      do
      {
        v71 = *(_QWORD *)v64;
        v64 += 8;
        *(_QWORD *)v63 = v71;
        v63 += 8;
      }
      while (v63 != v51);
    }
LABEL_65:
    v27 = &v60[v59];
    operator delete(v26);
    goto LABEL_46;
  }
  v50 = v26;
  v51 = v26 + 8;
LABEL_43:
  v52 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v50;
  *(_QWORD *)(a1 + 16) = v51;
  *(_QWORD *)(a1 + 24) = v27;
  if (v52)
    operator delete(v52);
}

void sub_2393C7DE8(void **a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 *v27;
  _OWORD *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;

  v4 = (char *)a1[1];
  if (v4 != *a1)
  {
    v5 = (char *)a1[1];
    goto LABEL_25;
  }
  v7 = a1[2];
  v6 = a1[3];
  if (v7 >= v6)
  {
    v13 = v6 - v4;
    v12 = v13 == 0;
    v14 = v13 >> 2;
    if (v12)
      v14 = 1;
    if (v14 >> 61)
      sub_23938C4B8();
    v15 = (v14 + 3) >> 2;
    v16 = 8 * v14;
    v17 = (char *)operator new(8 * v14);
    v5 = &v17[8 * v15];
    v18 = &v17[v16];
    v19 = v5;
    v20 = v7 - v4;
    if (v7 != v4)
    {
      v19 = &v5[v20 & 0xFFFFFFFFFFFFFFF8];
      v21 = v20 - 8;
      v22 = &v17[8 * v15];
      v23 = v4;
      if (v21 > 0x37)
      {
        v24 = &v17[8 * v15];
        v22 = v24;
        v23 = v4;
        if ((unint64_t)(v24 - v4) >= 0x20)
        {
          v25 = (v21 >> 3) + 1;
          v26 = 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
          v22 = &v5[v26];
          v27 = (__int128 *)(v4 + 16);
          v28 = v24 + 16;
          v29 = v25 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v30 = *v27;
            *(v28 - 1) = *(v27 - 1);
            *v28 = v30;
            v27 += 2;
            v28 += 2;
            v29 -= 4;
          }
          while (v29);
          if (v25 == (v25 & 0x3FFFFFFFFFFFFFFCLL))
          {
            *a1 = v17;
            a1[1] = v5;
            a1[2] = v19;
            a1[3] = v18;
            goto LABEL_24;
          }
          v23 = &v4[v26];
        }
      }
      do
      {
        v31 = *(_QWORD *)v23;
        v23 += 8;
        *(_QWORD *)v22 = v31;
        v22 += 8;
      }
      while (v22 != v19);
    }
    *a1 = v17;
    a1[1] = v5;
    a1[2] = v19;
    a1[3] = v18;
    if (!v4)
      goto LABEL_25;
LABEL_24:
    operator delete(v4);
    v5 = (char *)a1[1];
    goto LABEL_25;
  }
  v8 = (v6 - v7) >> 3;
  if (v8 >= -1)
    v9 = v8 + 1;
  else
    v9 = v8 + 2;
  v10 = v9 >> 1;
  v11 = &v7[8 * (v9 >> 1)];
  v5 = &v11[-(v7 - v4)];
  if (v7 != v4)
  {
    memmove(&v11[-(v7 - v4)], v4, v7 - v4);
    v4 = (char *)a1[2];
  }
  a1[1] = v5;
  a1[2] = &v4[8 * v10];
LABEL_25:
  *((_QWORD *)v5 - 1) = *a2;
  a1[1] = (char *)a1[1] - 8;
}

void sub_2393C7F8C(char **a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  BOOL v19;
  int64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  _OWORD *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;

  v4 = a1[2];
  if (v4 != a1[3])
    goto LABEL_23;
  v6 = *a1;
  v5 = a1[1];
  if (v5 > *a1)
  {
    v7 = (v5 - *a1) >> 3;
    if (v7 >= -1)
      v8 = v7 + 1;
    else
      v8 = v7 + 2;
    v9 = v8 >> 1;
    v10 = -v9;
    v11 = &v5[-8 * v9];
    v12 = v4 - v5;
    if (v4 != v5)
    {
      memmove(&v5[-8 * v9], a1[1], v4 - v5);
      v4 = a1[1];
    }
    v13 = &v4[8 * v10];
    v4 = &v11[v12];
    a1[1] = v13;
    a1[2] = &v11[v12];
    goto LABEL_23;
  }
  v14 = (v4 - v6) >> 2;
  if (v4 == v6)
    v14 = 1;
  if (v14 >> 61)
    sub_23938C4B8();
  v15 = v14 >> 2;
  v16 = 8 * v14;
  v17 = (char *)operator new(8 * v14);
  v18 = &v17[8 * v15];
  v20 = v4 - v5;
  v19 = v4 == v5;
  v4 = v18;
  if (!v19)
  {
    v4 = &v18[v20 & 0xFFFFFFFFFFFFFFF8];
    v21 = v20 - 8;
    if ((unint64_t)(v20 - 8) < 0x38)
    {
      v22 = &v17[8 * v15];
      goto LABEL_20;
    }
    v23 = &v17[8 * v15];
    v22 = v23;
    if ((unint64_t)(v23 - v5) < 0x20)
    {
      do
      {
LABEL_20:
        v30 = *(_QWORD *)v5;
        v5 += 8;
        *(_QWORD *)v22 = v30;
        v22 += 8;
      }
      while (v22 != v4);
      goto LABEL_21;
    }
    v24 = (v21 >> 3) + 1;
    v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    v22 = &v18[v25];
    v26 = (__int128 *)(v5 + 16);
    v27 = v23 + 16;
    v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v29 = *v26;
      *(v27 - 1) = *(v26 - 1);
      *v27 = v29;
      v26 += 2;
      v27 += 2;
      v28 -= 4;
    }
    while (v28);
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
    {
      v5 += v25;
      goto LABEL_20;
    }
  }
LABEL_21:
  *a1 = v17;
  a1[1] = v18;
  a1[2] = v4;
  a1[3] = &v17[v16];
  if (v6)
  {
    operator delete(v6);
    v4 = a1[2];
  }
LABEL_23:
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

char *sub_2393C8114(uint64_t a1, void *a2, char *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  char *v14;
  char *v15;
  char *v17;
  char *v18;
  uint64_t v19;
  int v20;
  char *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  int v40;
  char *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int8 *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  unsigned __int8 *v75;
  unsigned __int8 *v76;

  v6 = (_QWORD *)operator new();
  *v6 = &off_250AD6278;
  v7 = (_QWORD *)operator new();
  *v7 = &off_250AD62E0;
  v7[1] = v6;
  v8 = (_QWORD *)operator new();
  *v8 = &off_250AD62A8;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = v7;
  v9 = *(std::__shared_weak_count **)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 56) = v12;
  v13 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v13 > 0x3F)
  {
    if (v13 != 64)
    {
      if (v13 == 128)
      {
        v25 = (unsigned __int8 *)memchr(a2, 10, a3 - (_BYTE *)a2);
        if (v25)
          v26 = v25;
        else
          v26 = (unsigned __int8 *)a3;
        if (v26 == a2)
        {
          v61 = (_QWORD *)operator new();
          v62 = *(_QWORD *)(a1 + 56);
          v63 = *(_QWORD *)(v62 + 8);
          *v61 = &off_250AD62E0;
          v61[1] = v63;
          *(_QWORD *)(v62 + 8) = v61;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        }
        else
        {
          sub_2393C8804(a1, (unsigned __int8 *)a2, v26);
        }
        if (v26 == (unsigned __int8 *)a3)
          v64 = v26;
        else
          v64 = v26 + 1;
        if (v64 != (unsigned __int8 *)a3)
        {
          v65 = *(_QWORD *)(a1 + 56);
          do
          {
            v75 = (unsigned __int8 *)memchr(v64, 10, a3 - (char *)v64);
            if (v75)
              v76 = v75;
            else
              v76 = (unsigned __int8 *)a3;
            if (v76 == v64)
            {
              v66 = (_QWORD *)operator new();
              v67 = *(_QWORD *)(a1 + 56);
              v68 = *(_QWORD *)(v67 + 8);
              *v66 = &off_250AD62E0;
              v66[1] = v68;
              *(_QWORD *)(v67 + 8) = v66;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
            }
            else
            {
              sub_2393C8804(a1, v64, v76);
            }
            v69 = (_QWORD *)operator new();
            v70 = *(_QWORD *)(v65 + 8);
            v69[1] = *(_QWORD *)(v12 + 8);
            v69[2] = v70;
            *v69 = &off_250AD6670;
            *(_QWORD *)(v12 + 8) = v69;
            *(_QWORD *)(v65 + 8) = 0;
            v71 = (_QWORD *)operator new();
            v72 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
            *v71 = &off_250AD62E0;
            v71[1] = v72;
            *(_QWORD *)(v65 + 8) = v71;
            *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
            v73 = (_QWORD *)operator new();
            v74 = *(_QWORD *)(v65 + 8);
            *v73 = &unk_250AD66A0;
            v73[1] = v74;
            *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v73;
            v65 = *(_QWORD *)(v65 + 8);
            *(_QWORD *)(a1 + 56) = v65;
            if (v76 == (unsigned __int8 *)a3)
              v64 = v76;
            else
              v64 = v76 + 1;
          }
          while (v64 != (unsigned __int8 *)a3);
        }
        return a3;
      }
      if (v13 == 256)
      {
        v14 = (char *)memchr(a2, 10, a3 - (_BYTE *)a2);
        if (v14)
          v15 = v14;
        else
          v15 = a3;
        if (v15 == a2)
        {
          v45 = (_QWORD *)operator new();
          v46 = *(_QWORD *)(a1 + 56);
          v47 = *(_QWORD *)(v46 + 8);
          *v45 = &off_250AD62E0;
          v45[1] = v47;
          *(_QWORD *)(v46 + 8) = v45;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        }
        else
        {
          sub_2393C8980(a1, (char *)a2, v15);
        }
        if (v15 == a3)
          v48 = v15;
        else
          v48 = v15 + 1;
        if (v48 != a3)
        {
          v49 = *(_QWORD *)(a1 + 56);
          do
          {
            v59 = (char *)memchr(v48, 10, a3 - v48);
            if (v59)
              v60 = v59;
            else
              v60 = a3;
            if (v60 == v48)
            {
              v50 = (_QWORD *)operator new();
              v51 = *(_QWORD *)(a1 + 56);
              v52 = *(_QWORD *)(v51 + 8);
              *v50 = &off_250AD62E0;
              v50[1] = v52;
              *(_QWORD *)(v51 + 8) = v50;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
            }
            else
            {
              sub_2393C8980(a1, v48, v60);
            }
            v53 = (_QWORD *)operator new();
            v54 = *(_QWORD *)(v49 + 8);
            v53[1] = *(_QWORD *)(v12 + 8);
            v53[2] = v54;
            *v53 = &off_250AD6670;
            *(_QWORD *)(v12 + 8) = v53;
            *(_QWORD *)(v49 + 8) = 0;
            v55 = (_QWORD *)operator new();
            v56 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
            *v55 = &off_250AD62E0;
            v55[1] = v56;
            *(_QWORD *)(v49 + 8) = v55;
            *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
            v57 = (_QWORD *)operator new();
            v58 = *(_QWORD *)(v49 + 8);
            *v57 = &unk_250AD66A0;
            v57[1] = v58;
            *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v57;
            v49 = *(_QWORD *)(v49 + 8);
            *(_QWORD *)(a1 + 56) = v49;
            if (v60 == a3)
              v48 = v60;
            else
              v48 = v60 + 1;
          }
          while (v48 != a3);
        }
        return a3;
      }
      goto LABEL_79;
    }
    return sub_2393C8980(a1, (char *)a2, a3);
  }
  if (v13)
  {
    if (v13 == 16)
    {
      v22 = a1;
      v23 = (unsigned __int8 *)a2;
      v24 = (unsigned __int8 *)a3;
      return (char *)sub_2393C8804(v22, v23, v24);
    }
    if (v13 != 32)
    {
LABEL_79:
      v22 = sub_2393C78AC();
      return (char *)sub_2393C8804(v22, v23, v24);
    }
    return sub_2393C8980(a1, (char *)a2, a3);
  }
  v17 = (char *)a2;
  while (1)
  {
    v18 = v17;
    v17 = (char *)sub_2393CE778(a1, v17, a3);
    if (v17 == v18)
      break;
LABEL_21:
    if (v17 == v18)
      goto LABEL_32;
  }
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_DWORD *)(a1 + 28);
  v21 = sub_2393CEA24(a1, v18, a3);
  if (v21 != v18)
  {
    v17 = sub_2393C9D94(a1, v21, a3, v19, v20 + 1, *(_DWORD *)(a1 + 28) + 1);
    goto LABEL_21;
  }
LABEL_32:
  if (v18 == a2)
  {
    v27 = (_QWORD *)operator new();
    v28 = *(_QWORD *)(a1 + 56);
    v29 = *(_QWORD *)(v28 + 8);
    *v27 = &off_250AD62E0;
    v27[1] = v29;
    *(_QWORD *)(v28 + 8) = v27;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  }
  if (v18 == a3)
    return a3;
  while (2)
  {
    if (*v18 != 124)
      return v18;
    v36 = *(_QWORD *)(a1 + 56);
    v37 = v18 + 1;
    v38 = v18 + 1;
    while (2)
    {
      v18 = v38;
      v38 = (char *)sub_2393CE778(a1, v38, a3);
      if (v38 != v18)
      {
LABEL_41:
        if (v38 == v18)
          goto LABEL_36;
        continue;
      }
      break;
    }
    v39 = *(_QWORD *)(a1 + 56);
    v40 = *(_DWORD *)(a1 + 28);
    v41 = sub_2393CEA24(a1, v18, a3);
    if (v41 != v18)
    {
      v38 = sub_2393C9D94(a1, v41, a3, v39, v40 + 1, *(_DWORD *)(a1 + 28) + 1);
      goto LABEL_41;
    }
LABEL_36:
    if (v18 == v37)
    {
      v42 = (_QWORD *)operator new();
      v43 = *(_QWORD *)(a1 + 56);
      v44 = *(_QWORD *)(v43 + 8);
      *v42 = &off_250AD62E0;
      v42[1] = v44;
      *(_QWORD *)(v43 + 8) = v42;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    v30 = (_QWORD *)operator new();
    v31 = *(_QWORD *)(v36 + 8);
    v30[1] = *(_QWORD *)(v12 + 8);
    v30[2] = v31;
    *v30 = &off_250AD6670;
    *(_QWORD *)(v12 + 8) = v30;
    *(_QWORD *)(v36 + 8) = 0;
    v32 = (_QWORD *)operator new();
    v33 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    *v32 = &off_250AD62E0;
    v32[1] = v33;
    *(_QWORD *)(v36 + 8) = v32;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
    v34 = (_QWORD *)operator new();
    v35 = *(_QWORD *)(v36 + 8);
    *v34 = &unk_250AD66A0;
    v34[1] = v35;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v34;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(v36 + 8);
    if (v18 != a3)
      continue;
    return a3;
  }
}

uint64_t sub_2393C8804(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  char *v4;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v3 = a2;
  if (a2 == a3)
    return (uint64_t)a2;
  v4 = (char *)a3;
  if (*a2 == 94)
  {
    v6 = operator new();
    v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)v6 = &off_250AD6340;
    *(_QWORD *)(v6 + 8) = v9;
    *(_BYTE *)(v6 + 16) = v7;
    *(_QWORD *)(v8 + 8) = v6;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    ++v3;
  }
  if (v3 != (unsigned __int8 *)v4)
  {
    while (v3 != (unsigned __int8 *)v4)
    {
      v10 = (char *)v3;
      v11 = *(_QWORD *)(a1 + 56);
      v12 = *(_DWORD *)(a1 + 28);
      v13 = sub_2393CDEDC(a1, v10, v4);
      if (v13 != (unsigned __int8 *)v10)
      {
        v3 = sub_2393CE1B4(a1, v13, (unsigned __int8 *)v4, v11, v12 + 1, *(_DWORD *)(a1 + 28) + 1);
        if (v3 != (unsigned __int8 *)v10)
          continue;
      }
      if (v10 + 1 == v4 && *v10 == 36)
      {
        v14 = operator new();
        v15 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
        v16 = *(_QWORD *)(a1 + 56);
        v17 = *(_QWORD *)(v16 + 8);
        *(_QWORD *)v14 = &off_250AD6370;
        *(_QWORD *)(v14 + 8) = v17;
        *(_BYTE *)(v14 + 16) = v15;
        *(_QWORD *)(v16 + 8) = v14;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        return (uint64_t)v4;
      }
      v19 = sub_2393C78AC();
      return sub_2393C8980(v19);
    }
  }
  return (uint64_t)v4;
}

char *sub_2393C8980(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v19;
  char *v20;
  char *v21;

  v3 = a3;
  v6 = *(_QWORD *)(a1 + 56);
  v7 = sub_2393C8B10(a1, a2, a3);
  if (v7 == a2)
    goto LABEL_13;
  do
  {
    v8 = v7;
    v7 = sub_2393C8B10(a1, v7, v3);
  }
  while (v7 != v8);
  if (v8 == a2)
  {
LABEL_13:
    v19 = sub_2393C78AC();
    return sub_2393C8B10(v19, v20, v21);
  }
  else
  {
    if (v8 != v3)
    {
      while (*v8 == 124)
      {
        v9 = *(_QWORD *)(a1 + 56);
        v10 = v8 + 1;
        v11 = sub_2393C8B10(a1, v8 + 1, v3);
        if (v11 == v8 + 1)
          goto LABEL_13;
        do
        {
          v8 = v11;
          v11 = sub_2393C8B10(a1, v11, v3);
        }
        while (v11 != v8);
        if (v8 == v10)
          goto LABEL_13;
        v12 = (_QWORD *)operator new();
        v13 = *(_QWORD *)(v9 + 8);
        v12[1] = *(_QWORD *)(v6 + 8);
        v12[2] = v13;
        *v12 = &off_250AD6670;
        *(_QWORD *)(v6 + 8) = v12;
        *(_QWORD *)(v9 + 8) = 0;
        v14 = (_QWORD *)operator new();
        v15 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        *v14 = &off_250AD62E0;
        v14[1] = v15;
        *(_QWORD *)(v9 + 8) = v14;
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
        v16 = (_QWORD *)operator new();
        v17 = *(_QWORD *)(v9 + 8);
        *v16 = &unk_250AD66A0;
        v16[1] = v17;
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v16;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(v9 + 8);
        if (v8 == v3)
          return v3;
      }
      return v8;
    }
    return v3;
  }
}

char *sub_2393C8B10(uint64_t a1, char *a2, char *a3)
{
  uint64_t v6;
  int v7;
  char *v8;
  int v9;
  signed __int8 v10;
  char *v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (**v22)();
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  char *v34;
  char *v35;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_DWORD *)(a1 + 28);
  if (a2 != a3)
  {
    switch(*a2)
    {
      case '$':
      case '(':
      case '*':
      case '+':
      case '.':
      case '?':
      case '[':
      case '\\':
      case '^':
      case '{':
      case '|':
        goto LABEL_3;
      case ')':
        if (!*(_DWORD *)(a1 + 36))
          goto LABEL_8;
LABEL_3:
        v8 = a2 + 1;
        if (a2 + 1 == a3)
        {
LABEL_15:
          v9 = *a2;
        }
        else
        {
          v9 = *a2;
          if (v9 == 92)
          {
            v10 = *v8;
            switch(*v8)
            {
              case '$':
              case '(':
              case ')':
              case '*':
              case '+':
              case '.':
              case '?':
              case '[':
              case '\\':
              case '^':
              case '{':
              case '|':
              case '}':
                sub_2393CC450(a1, v10);
                v11 = a2 + 2;
                return sub_2393C9D94(a1, v11, a3, v6, v7 + 1, *(_DWORD *)(a1 + 28) + 1);
              default:
                if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
                {
                  v11 = sub_2393CBBF8(a1, v8, a3, 0);
                }
                else
                {
                  v12 = sub_2393CD968(a1, v10);
                  v13 = 2;
                  if (!v12)
                    v13 = 0;
                  v11 = &a2[v13];
                }
                if (v11 == a2)
                  goto LABEL_15;
                goto LABEL_19;
            }
          }
        }
        if (v9 != 46)
          goto LABEL_18;
        v14 = (_QWORD *)operator new();
        v15 = *(_QWORD *)(a1 + 56);
        v16 = *(_QWORD *)(v15 + 8);
        *v14 = &off_250AD66D0;
        v14[1] = v16;
        *(_QWORD *)(v15 + 8) = v14;
        break;
      default:
LABEL_8:
        sub_2393CC450(a1, *a2);
        v11 = a2 + 1;
        return sub_2393C9D94(a1, v11, a3, v6, v7 + 1, *(_DWORD *)(a1 + 28) + 1);
    }
    goto LABEL_27;
  }
LABEL_18:
  v11 = sub_2393C8E8C(a1, a2, a3);
LABEL_19:
  if (v11 != a2 || v11 == a3)
    goto LABEL_36;
  v17 = *a2;
  if (v17 == 36)
  {
    v18 = operator new();
    v19 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v20 = *(_QWORD *)(a1 + 56);
    v21 = *(_QWORD *)(v20 + 8);
    v22 = &off_250AD6370;
    goto LABEL_26;
  }
  if (v17 != 40)
  {
    if (v17 == 94)
    {
      v18 = operator new();
      v19 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v20 = *(_QWORD *)(a1 + 56);
      v21 = *(_QWORD *)(v20 + 8);
      v22 = &off_250AD6340;
LABEL_26:
      *(_QWORD *)v18 = v22;
      *(_QWORD *)(v18 + 8) = v21;
      *(_BYTE *)(v18 + 16) = v19;
      *(_QWORD *)(v20 + 8) = v18;
LABEL_27:
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v11 = a2 + 1;
      return sub_2393C9D94(a1, v11, a3, v6, v7 + 1, *(_DWORD *)(a1 + 28) + 1);
    }
    return a2;
  }
  if ((*(_BYTE *)(a1 + 24) & 2) != 0)
  {
    v24 = *(_DWORD *)(a1 + 28);
  }
  else
  {
    v23 = operator new();
    v24 = *(_DWORD *)(a1 + 28) + 1;
    *(_DWORD *)(a1 + 28) = v24;
    v25 = *(_QWORD *)(a1 + 56);
    v26 = *(_QWORD *)(v25 + 8);
    *(_QWORD *)v23 = &off_250AD6580;
    *(_QWORD *)(v23 + 8) = v26;
    *(_DWORD *)(v23 + 16) = v24;
    *(_QWORD *)(v25 + 8) = v23;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  }
  ++*(_DWORD *)(a1 + 36);
  v27 = (char *)sub_2393C8980(a1);
  if (v27 != a3)
  {
    v28 = v27;
    if (*v27 == 41)
    {
      if ((*(_BYTE *)(a1 + 24) & 2) == 0)
      {
        v29 = operator new();
        v30 = *(_QWORD *)(a1 + 56);
        v31 = *(_QWORD *)(v30 + 8);
        *(_QWORD *)v29 = &off_250AD65B0;
        *(_QWORD *)(v29 + 8) = v31;
        *(_DWORD *)(v29 + 16) = v24;
        *(_QWORD *)(v30 + 8) = v29;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      }
      --*(_DWORD *)(a1 + 36);
      v11 = v28 + 1;
LABEL_36:
      if (v11 != a2)
        return sub_2393C9D94(a1, v11, a3, v6, v7 + 1, *(_DWORD *)(a1 + 28) + 1);
      return a2;
    }
  }
  v33 = sub_2393C78AC();
  return sub_2393C8E8C(v33, v34, v35);
}

char *sub_2393C8E8C(uint64_t a1, char *a2, char *a3)
{
  int v5;
  char v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  int v12;
  int v13;
  uint64_t k;
  char *v15;
  int v16;
  int v17;
  char *v18;
  int64_t v19;
  char *v20;
  char *i;
  int v22;
  uint64_t j;
  std::string::size_type v24;
  std::string *v25;
  std::string::size_type size;
  uint64_t v27;
  unsigned __int8 *v28;
  std::string::size_type v29;
  int v30;
  std::string *p_dst;
  int v32;
  unsigned __int8 v33;
  std::string *p_p;
  _BYTE *v35;
  int v36;
  int v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  std::string::size_type v42;
  std::string *v43;
  std::string *v44;
  std::regex_traits<char>::char_class_type classname;
  int64_t v46;
  char *v47;
  char *m;
  int v49;
  char *v50;
  std::string *v51;
  std::string *v52;
  std::string::value_type v53;
  std::string::size_type v54;
  std::string *v55;
  std::string::size_type v56;
  std::string *p_src;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  std::string::size_type *v62;
  _OWORD *v63;
  uint64_t v64;
  __int128 v65;
  std::string::size_type v66;
  int v67;
  std::string::size_type v68;
  unint64_t v69;
  std::string *v70;
  __int128 v71;
  std::string::size_type v72;
  std::string *v73;
  std::string *v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  _BYTE *v78;
  std::string *v79;
  std::string *v80;
  std::string *v81;
  _BYTE *v82;
  char *v83;
  __int128 v84;
  void **v85;
  std::string::size_type v86;
  std::string::size_type n;
  std::string::value_type v88;
  std::string *v89;
  std::string *v90;
  std::string::size_type ii;
  std::string::value_type v92;
  std::string *v93;
  std::string *v94;
  std::string::size_type v95;
  std::string::size_type v96;
  std::string *v97;
  std::string::value_type v98;
  std::string *v99;
  std::string *v100;
  std::string::value_type v101;
  std::string *v102;
  std::string *v103;
  std::string::size_type jj;
  std::string::size_type kk;
  std::string::size_type v106;
  std::string *v107;
  std::string::size_type v108;
  std::string *v109;
  std::string *v110;
  char *v111;
  int v112;
  void *v113;
  char *v114;
  int v115;
  void **v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  std::string v121;
  std::string v122;
  std::string v123;
  std::string __p;
  std::string __src;
  std::string v126;
  std::string __dst;
  std::string v128;

  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3)
      goto LABEL_306;
    v5 = a2[1];
    v6 = v5 == 94;
    v7 = v5 == 94 ? a2 + 2 : a2 + 1;
    v8 = operator new();
    v9 = sub_2393CAF74(v8, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), v6, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v9;
    *(_QWORD *)(a1 + 56) = v9;
    if (v7 == a3)
      goto LABEL_306;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *v7 == 93)
    {
      sub_2393CB07C(v8, 93);
      ++v7;
    }
    if (v7 == a3)
      goto LABEL_306;
    v117 = (void **)(v8 + 88);
    v118 = v8 + 16;
    v119 = a1;
    v120 = a3 - 4;
    while (1)
    {
      v10 = v7;
      v11 = a3;
      if (v7 == a3)
        goto LABEL_14;
      v12 = *v7;
      v11 = v7;
      if (v12 == 93)
        goto LABEL_14;
      v11 = v7 + 1;
      memset(&__p, 0, sizeof(__p));
      if (v7 + 1 != a3 && v12 == 91)
      {
        v13 = *v11;
        switch(v13)
        {
          case '.':
            if (a3 - (v7 + 2) < 2)
              goto LABEL_306;
            v19 = v120 - v7;
            v20 = v7 + 2;
            for (i = v7 + 2; ; v20 = i)
            {
              v22 = *i++;
              if (v22 == 46 && *i == 93)
                break;
              if (!v19)
                goto LABEL_306;
              --v19;
            }
            if (v20 == a3)
              goto LABEL_306;
            sub_2393CB4A0((uint64_t)&__dst, a1, v7 + 2, v20);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            __p = __dst;
            size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              size = __p.__r_.__value_.__l.__size_;
            if (size - 1 >= 2)
              goto LABEL_307;
            v11 = v20 + 2;
            v16 = *(_DWORD *)(a1 + 24) & 0x1F0;
            if (v20 + 2 == a3)
            {
LABEL_68:
              v33 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              {
                if (__p.__r_.__value_.__l.__size_)
                {
                  if (__p.__r_.__value_.__l.__size_ != 1)
                    goto LABEL_81;
                  goto LABEL_71;
                }
LABEL_13:
                operator delete(__p.__r_.__value_.__l.__data_);
                goto LABEL_14;
              }
              goto LABEL_76;
            }
            goto LABEL_67;
          case ':':
            if (a3 - (v7 + 2) < 2)
              goto LABEL_306;
            for (j = 0; v7[j + 2] != 58 || v7[j + 3] != 93; ++j)
            {
              if (v120 - v7 == j)
                goto LABEL_306;
            }
            v27 = j + 2;
            v28 = (unsigned __int8 *)&v7[v27];
            if (&v7[v27] == a3)
              goto LABEL_306;
            v29 = v27 - 2;
            if ((unint64_t)(v27 - 2) > 0x7FFFFFFFFFFFFFF7)
              goto LABEL_308;
            v30 = *(_DWORD *)(a1 + 24);
            if (v29 >= 0x17)
            {
              v39 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v29 | 7) != 0x17)
                v39 = v29 | 7;
              v40 = v39 + 1;
              p_dst = (std::string *)operator new(v39 + 1);
              __dst.__r_.__value_.__l.__size_ = v29;
              __dst.__r_.__value_.__r.__words[2] = v40 | 0x8000000000000000;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
            }
            else
            {
              *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v27 - 2;
              p_dst = &__dst;
              if (v27 == 2)
              {
LABEL_90:
                v41 = v30 & 1;
                p_dst->__r_.__value_.__s.__data_[0] = 0;
                a1 = v119;
                v42 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
                if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v43 = &__dst;
                else
                  v43 = (std::string *)__dst.__r_.__value_.__r.__words[0];
                if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v42 = __dst.__r_.__value_.__l.__size_;
                (*(void (**)(_QWORD, std::string *, char *))(**(_QWORD **)(v119 + 8) + 48))(*(_QWORD *)(v119 + 8), v43, (char *)v43 + v42);
                if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v44 = &__dst;
                else
                  v44 = (std::string *)__dst.__r_.__value_.__r.__words[0];
                classname = std::__get_classname((const char *)v44, v41);
                if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__dst.__r_.__value_.__l.__data_);
                if (!classname)
                {
                  sub_2393C78AC();
LABEL_310:
                  sub_2393C78AC();
LABEL_311:
                  sub_23938C4B8();
                }
                v37 = 0;
                *(_DWORD *)(v8 + 160) |= classname;
                v7 = (char *)(v28 + 2);
                v38 = v10;
                if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_84:
                  v11 = v38;
                  if (!v37)
                    goto LABEL_15;
                  goto LABEL_14;
                }
                goto LABEL_102;
              }
            }
            memcpy(p_dst, v10 + 2, v29);
            p_dst = (std::string *)((char *)p_dst + v29);
            goto LABEL_90;
          case '=':
            if (a3 - (v7 + 2) < 2)
              goto LABEL_306;
            for (k = 0; ; ++k)
            {
              v15 = &v7[k + 2];
              if (*v15 == 61 && v7[k + 3] == 93)
                break;
              if (v120 - v7 == k)
                goto LABEL_306;
            }
            if (v15 == a3)
              goto LABEL_306;
            sub_2393CB4A0((uint64_t)&v126, a1, v7 + 2, &v7[k + 2]);
            if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
            {
              v24 = v126.__r_.__value_.__l.__size_;
              if (!v126.__r_.__value_.__l.__size_)
                goto LABEL_307;
              if (v126.__r_.__value_.__l.__size_ > 0x7FFFFFFFFFFFFFF7)
                goto LABEL_308;
              v25 = (std::string *)v126.__r_.__value_.__r.__words[0];
            }
            else
            {
              v24 = HIBYTE(v126.__r_.__value_.__r.__words[2]);
              if (!*((_BYTE *)&v126.__r_.__value_.__s + 23))
                goto LABEL_307;
              v25 = &v126;
            }
            v51 = (std::string *)((char *)v25 + v24);
            if (v24 > 0x16)
            {
              v58 = (v24 & 0x7FFFFFFFFFFFFFF8) + 8;
              if ((v24 | 7) != 0x17)
                v58 = v24 | 7;
              v59 = v58 + 1;
              v60 = (char *)operator new(v58 + 1);
              __dst.__r_.__value_.__l.__size_ = v24;
              __dst.__r_.__value_.__r.__words[2] = v59 | 0x8000000000000000;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v60;
              if (v24 < 0x20)
              {
                v52 = (std::string *)v60;
                goto LABEL_122;
              }
              if ((unint64_t)(v60 - (char *)v25) < 0x20)
              {
                v52 = (std::string *)v60;
                goto LABEL_122;
              }
              v61 = v24 & 0x7FFFFFFFFFFFFFE0;
              v52 = (std::string *)&v60[v24 & 0x7FFFFFFFFFFFFFE0];
              v62 = &v25->__r_.__value_.__r.__words[2];
              v63 = v60 + 16;
              v64 = v24 & 0x7FFFFFFFFFFFFFE0;
              do
              {
                v65 = *(_OWORD *)v62;
                *(v63 - 1) = *((_OWORD *)v62 - 1);
                *v63 = v65;
                v62 += 4;
                v63 += 2;
                v64 -= 32;
              }
              while (v64);
              if (v24 != v61)
              {
                v25 = (std::string *)((char *)v25 + v61);
                goto LABEL_122;
              }
            }
            else
            {
              *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v24;
              v52 = &__dst;
              do
              {
LABEL_122:
                v53 = v25->__r_.__value_.__s.__data_[0];
                v25 = (std::string *)((char *)v25 + 1);
                v52->__r_.__value_.__s.__data_[0] = v53;
                v52 = (std::string *)((char *)v52 + 1);
              }
              while (v25 != v51);
            }
            v52->__r_.__value_.__s.__data_[0] = 0;
            v54 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v55 = &__dst;
            else
              v55 = (std::string *)__dst.__r_.__value_.__r.__words[0];
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v54 = __dst.__r_.__value_.__l.__size_;
            (*(void (**)(std::string *__return_ptr, _QWORD, std::string *, char *))(**(_QWORD **)(a1 + 16)
                                                                                             + 32))(&__src, *(_QWORD *)(a1 + 16), v55, (char *)v55 + v54);
            v56 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
            if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v56 = __src.__r_.__value_.__l.__size_;
            if (v56 != 1)
            {
              if (v56 == 12)
              {
                p_src = &__src;
                if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  p_src = (std::string *)__src.__r_.__value_.__r.__words[0];
                p_src->__r_.__value_.__s.__data_[11] = p_src->__r_.__value_.__s.__data_[3];
                if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
LABEL_147:
                  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_148:
                v66 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
                v67 = SHIBYTE(__src.__r_.__value_.__r.__words[2]);
                v68 = __src.__r_.__value_.__l.__size_;
                if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v66 = __src.__r_.__value_.__l.__size_;
                if (v66)
                {
                  v70 = *(std::string **)(v8 + 144);
                  v69 = *(_QWORD *)(v8 + 152);
                  if ((unint64_t)v70 < v69)
                  {
                    if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
                    {
                      sub_2393BD344(*(_BYTE **)(v8 + 144), __src.__r_.__value_.__l.__data_, __src.__r_.__value_.__l.__size_);
                    }
                    else
                    {
                      v71 = *(_OWORD *)&__src.__r_.__value_.__l.__data_;
                      v70->__r_.__value_.__r.__words[2] = __src.__r_.__value_.__r.__words[2];
                      *(_OWORD *)&v70->__r_.__value_.__l.__data_ = v71;
                    }
                    v80 = v70 + 1;
                    a1 = v119;
                    goto LABEL_196;
                  }
                  v74 = *(std::string **)(v8 + 136);
                  v75 = 0xAAAAAAAAAAAAAAABLL * (((char *)v70 - (char *)v74) >> 3) + 1;
                  if (v75 > 0xAAAAAAAAAAAAAAALL)
                    goto LABEL_308;
                  v76 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v69 - (_QWORD)v74) >> 3);
                  if (2 * v76 > v75)
                    v75 = 2 * v76;
                  if (v76 >= 0x555555555555555)
                    v77 = 0xAAAAAAAAAAAAAAALL;
                  else
                    v77 = v75;
                  if (v77)
                  {
                    if (v77 > 0xAAAAAAAAAAAAAAALL)
                      goto LABEL_311;
                    v78 = operator new(24 * v77);
                  }
                  else
                  {
                    v78 = 0;
                  }
                  v81 = (std::string *)&v78[8 * (((char *)v70 - (char *)v74) >> 3)];
                  if (v67 < 0)
                  {
                    v82 = v78;
                    sub_2393BD344(&v78[8 * (((char *)v70 - (char *)v74) >> 3)], __src.__r_.__value_.__l.__data_, v68);
                    v78 = v82;
                    v74 = *(std::string **)(v8 + 136);
                    v70 = *(std::string **)(v8 + 144);
                  }
                  else
                  {
                    *v81 = __src;
                  }
                  v83 = &v78[24 * v77];
                  v80 = v81 + 1;
                  a1 = v119;
                  if (v70 == v74)
                  {
                    *(_QWORD *)(v8 + 136) = v81;
                    *(_QWORD *)(v8 + 144) = v80;
                    *(_QWORD *)(v8 + 152) = v83;
                    if (!v74)
                      goto LABEL_196;
LABEL_195:
                    operator delete(v74);
                    goto LABEL_196;
                  }
                  do
                  {
                    v84 = *(_OWORD *)&v70[-1].__r_.__value_.__l.__data_;
                    v81[-1].__r_.__value_.__r.__words[2] = v70[-1].__r_.__value_.__r.__words[2];
                    *(_OWORD *)&v81[-1].__r_.__value_.__l.__data_ = v84;
                    --v81;
                    v70[-1].__r_.__value_.__l.__size_ = 0;
                    v70[-1].__r_.__value_.__r.__words[2] = 0;
                    v70[-1].__r_.__value_.__r.__words[0] = 0;
                    --v70;
                  }
                  while (v70 != v74);
                  v74 = *(std::string **)(v8 + 136);
                  v85 = *(void ***)(v8 + 144);
                  *(_QWORD *)(v8 + 136) = v81;
                  *(_QWORD *)(v8 + 144) = v80;
                  *(_QWORD *)(v8 + 152) = v83;
                  while (v85 != (void **)v74)
                  {
                    if (*((char *)v85 - 1) < 0)
                      operator delete(*(v85 - 3));
                    v85 -= 3;
                  }
                  a1 = v119;
                  if (v74)
                    goto LABEL_195;
LABEL_196:
                  *(_QWORD *)(v8 + 144) = v80;
                  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
LABEL_197:
                    operator delete(__src.__r_.__value_.__l.__data_);
                }
                else
                {
                  v72 = HIBYTE(v126.__r_.__value_.__r.__words[2]);
                  if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v72 = v126.__r_.__value_.__l.__size_;
                  if (v72 == 2)
                  {
                    v79 = &v126;
                    if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                      v79 = (std::string *)v126.__r_.__value_.__r.__words[0];
                    sub_2393CBDA4(v8, v79->__r_.__value_.__s.__data_[0], v79->__r_.__value_.__s.__data_[1]);
                    a1 = v119;
                    if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
                      goto LABEL_197;
                  }
                  else
                  {
                    a1 = v119;
                    if (v72 != 1)
                      goto LABEL_307;
                    v73 = &v126;
                    if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                      v73 = (std::string *)v126.__r_.__value_.__r.__words[0];
                    sub_2393CB07C(v8, v73->__r_.__value_.__s.__data_[0]);
                    if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
                      goto LABEL_197;
                  }
                }
                if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v126.__r_.__value_.__l.__data_);
                v37 = 0;
                v7 = v15 + 2;
                v38 = v10;
                if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_84;
                goto LABEL_102;
              }
              if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
              {
                *__src.__r_.__value_.__l.__data_ = 0;
                __src.__r_.__value_.__l.__size_ = 0;
                if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                  goto LABEL_147;
                goto LABEL_148;
              }
              __src.__r_.__value_.__s.__data_[0] = 0;
              *((_BYTE *)&__src.__r_.__value_.__s + 23) = 0;
            }
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_147;
            goto LABEL_148;
        }
      }
      v16 = *(_DWORD *)(a1 + 24) & 0x1F0;
      if ((*(_DWORD *)(a1 + 24) & 0x1B0 | 0x40) != 0x40)
      {
        LOBYTE(v17) = *v7;
LABEL_34:
        std::string::operator=(&__p, v17);
        if (v11 == a3)
          goto LABEL_68;
        goto LABEL_67;
      }
      v17 = *v7;
      if (v17 != 92)
        goto LABEL_34;
      if (v16)
        v18 = sub_2393CBBF8(a1, v7 + 1, a3, &__p);
      else
        v18 = (char *)sub_2393CB694(a1, (unsigned __int8 *)v7 + 1, (unsigned __int8 *)a3, &__p, v8);
      v11 = v18;
      if (v18 == a3)
        goto LABEL_68;
LABEL_67:
      v32 = *v11;
      if (v32 == 93)
        goto LABEL_68;
      v35 = v11 + 1;
      if (v11 + 1 != a3 && v32 == 45 && *v35 != 93)
      {
        memset(&v123, 0, sizeof(v123));
        v38 = v11 + 2;
        if (v11 + 2 == a3 || *v35 != 91 || *v38 != 46)
        {
          if ((v16 | 0x40) == 0x40)
          {
            LODWORD(v35) = *v35;
            if ((_DWORD)v35 == 92)
            {
              if (v16)
                v50 = sub_2393CBBF8(a1, v38, a3, &v123);
              else
                v50 = (char *)sub_2393CB694(a1, (unsigned __int8 *)v38, (unsigned __int8 *)a3, &v123, v8);
              v38 = v50;
              goto LABEL_213;
            }
          }
          else
          {
            LOBYTE(v35) = *v35;
          }
          std::string::operator=(&v123, (std::string::value_type)v35);
          goto LABEL_213;
        }
        if (a3 - (v11 + 3) < 2)
          goto LABEL_306;
        v46 = a3 - 5 - v11;
        v47 = v11 + 3;
        for (m = v11 + 3; ; v47 = m)
        {
          v49 = *m++;
          if (v49 == 46 && *m == 93)
            break;
          if (!v46)
            goto LABEL_306;
          --v46;
        }
        if (v47 == a3)
          goto LABEL_306;
        sub_2393CB4A0((uint64_t)&__dst, a1, v11 + 3, v47);
        if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v123.__r_.__value_.__l.__data_);
        v123 = __dst;
        v86 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v86 = v123.__r_.__value_.__l.__size_;
        if (v86 - 1 >= 2)
          goto LABEL_307;
        v38 = v47 + 2;
LABEL_213:
        v122 = __p;
        memset(&__p, 0, sizeof(__p));
        v121 = v123;
        memset(&v123, 0, sizeof(v123));
        if (*(_BYTE *)(v8 + 170))
        {
          if (*(_BYTE *)(v8 + 169))
          {
            for (n = 0; ; ++n)
            {
              if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
              {
                if (n >= v122.__r_.__value_.__l.__size_)
                {
LABEL_225:
                  for (ii = 0; ; ++ii)
                  {
                    if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
                    {
                      if (ii >= v121.__r_.__value_.__l.__size_)
                        goto LABEL_266;
                      v94 = (std::string *)v121.__r_.__value_.__r.__words[0];
                    }
                    else
                    {
                      if (ii >= HIBYTE(v121.__r_.__value_.__r.__words[2]))
                        goto LABEL_266;
                      v94 = &v121;
                    }
                    v92 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v8 + 24) + 40))(*(_QWORD *)(v8 + 24), v94->__r_.__value_.__s.__data_[ii]);
                    v93 = &v121;
                    if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                      v93 = (std::string *)v121.__r_.__value_.__r.__words[0];
                    v93->__r_.__value_.__s.__data_[ii] = v92;
                  }
                }
                v90 = (std::string *)v122.__r_.__value_.__r.__words[0];
              }
              else
              {
                if (n >= HIBYTE(v122.__r_.__value_.__r.__words[2]))
                  goto LABEL_225;
                v90 = &v122;
              }
              v88 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v8 + 24) + 40))(*(_QWORD *)(v8 + 24), v90->__r_.__value_.__s.__data_[n]);
              if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v89 = &v122;
              else
                v89 = (std::string *)v122.__r_.__value_.__r.__words[0];
              v89->__r_.__value_.__s.__data_[n] = v88;
            }
          }
          for (jj = 0; ; ++jj)
          {
            if ((*((_BYTE *)&v122.__r_.__value_.__s + 23) & 0x80) != 0)
            {
              if (jj >= v122.__r_.__value_.__l.__size_)
                goto LABEL_261;
            }
            else if (jj >= HIBYTE(v122.__r_.__value_.__r.__words[2]))
            {
LABEL_261:
              for (kk = 0; ; ++kk)
              {
                if ((*((_BYTE *)&v121.__r_.__value_.__s + 23) & 0x80) != 0)
                {
                  if (kk >= v121.__r_.__value_.__l.__size_)
                    goto LABEL_266;
                }
                else if (kk >= HIBYTE(v121.__r_.__value_.__r.__words[2]))
                {
LABEL_266:
                  v106 = HIBYTE(v122.__r_.__value_.__r.__words[2]);
                  if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v107 = &v122;
                  else
                    v107 = (std::string *)v122.__r_.__value_.__r.__words[0];
                  if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v106 = v122.__r_.__value_.__l.__size_;
                  sub_2393CC15C((uint64_t)&v126, v118, (char *)v107, (char *)v107 + v106);
                  v108 = HIBYTE(v121.__r_.__value_.__r.__words[2]);
                  if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v109 = &v121;
                  else
                    v109 = (std::string *)v121.__r_.__value_.__r.__words[0];
                  if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v108 = v121.__r_.__value_.__l.__size_;
                  sub_2393CC15C((uint64_t)&__src, v118, (char *)v109, (char *)v109 + v108);
                  __dst = v126;
                  memset(&v126, 0, sizeof(v126));
                  v128 = __src;
                  memset(&__src, 0, sizeof(__src));
                  v110 = *(std::string **)(v8 + 96);
                  if ((unint64_t)v110 >= *(_QWORD *)(v8 + 104))
                  {
                    v111 = sub_2393CC2B8(v117, (uint64_t)&__dst);
                    v112 = SHIBYTE(v128.__r_.__value_.__r.__words[2]);
                    *(_QWORD *)(v8 + 96) = v111;
                    if (v112 < 0)
                      operator delete(v128.__r_.__value_.__l.__data_);
                  }
                  else
                  {
                    *v110 = __dst;
                    memset(&__dst, 0, sizeof(__dst));
                    v110[1] = v128;
                    *(_QWORD *)(v8 + 96) = v110 + 2;
                  }
                  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__dst.__r_.__value_.__l.__data_);
                  a1 = v119;
                  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__src.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
                  {
                    v113 = (void *)v126.__r_.__value_.__r.__words[0];
                    goto LABEL_290;
                  }
                  goto LABEL_291;
                }
              }
            }
          }
        }
        v95 = HIBYTE(v122.__r_.__value_.__r.__words[2]);
        if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v95 = v122.__r_.__value_.__l.__size_;
        if (v95 != 1)
          goto LABEL_310;
        v96 = HIBYTE(v121.__r_.__value_.__r.__words[2]);
        if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v96 = v121.__r_.__value_.__l.__size_;
        if (v96 != 1)
          goto LABEL_310;
        if (*(_BYTE *)(v8 + 169))
        {
          if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v97 = &v122;
          else
            v97 = (std::string *)v122.__r_.__value_.__r.__words[0];
          v98 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v8 + 24) + 40))(*(_QWORD *)(v8 + 24), v97->__r_.__value_.__s.__data_[0]);
          if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v99 = &v122;
          else
            v99 = (std::string *)v122.__r_.__value_.__r.__words[0];
          v99->__r_.__value_.__s.__data_[0] = v98;
          if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v100 = &v121;
          else
            v100 = (std::string *)v121.__r_.__value_.__r.__words[0];
          v101 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v8 + 24) + 40))(*(_QWORD *)(v8 + 24), v100->__r_.__value_.__s.__data_[0]);
          if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v102 = &v121;
          else
            v102 = (std::string *)v121.__r_.__value_.__r.__words[0];
          v102->__r_.__value_.__s.__data_[0] = v101;
        }
        __dst = v122;
        memset(&v122, 0, sizeof(v122));
        v128 = v121;
        memset(&v121, 0, sizeof(v121));
        v103 = *(std::string **)(v8 + 96);
        if ((unint64_t)v103 >= *(_QWORD *)(v8 + 104))
        {
          v114 = sub_2393CC2B8(v117, (uint64_t)&__dst);
          v115 = SHIBYTE(v128.__r_.__value_.__r.__words[2]);
          *(_QWORD *)(v8 + 96) = v114;
          if (v115 < 0)
            operator delete(v128.__r_.__value_.__l.__data_);
        }
        else
        {
          *v103 = __dst;
          memset(&__dst, 0, sizeof(__dst));
          v103[1] = v128;
          *(_QWORD *)(v8 + 96) = v103 + 2;
        }
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          v113 = (void *)__dst.__r_.__value_.__r.__words[0];
LABEL_290:
          operator delete(v113);
        }
LABEL_291:
        if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v121.__r_.__value_.__l.__data_);
          if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_297;
LABEL_293:
          if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
LABEL_298:
            operator delete(v123.__r_.__value_.__l.__data_);
        }
        else
        {
          if ((SHIBYTE(v122.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_293;
LABEL_297:
          operator delete(v122.__r_.__value_.__l.__data_);
          if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_298;
        }
        v37 = 1;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_84;
LABEL_102:
        operator delete(__p.__r_.__value_.__l.__data_);
        v11 = v38;
        if ((v37 & 1) == 0)
          goto LABEL_15;
        goto LABEL_14;
      }
      v33 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        if (__p.__r_.__value_.__l.__size_)
        {
          if (__p.__r_.__value_.__l.__size_ != 1)
          {
LABEL_81:
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
LABEL_82:
            sub_2393CBDA4(v8, p_p->__r_.__value_.__s.__data_[0], p_p->__r_.__value_.__s.__data_[1]);
LABEL_83:
            v37 = 1;
            v38 = v11;
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_84;
            goto LABEL_102;
          }
LABEL_71:
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
LABEL_78:
          sub_2393CB07C(v8, p_p->__r_.__value_.__s.__data_[0]);
          goto LABEL_83;
        }
        goto LABEL_13;
      }
LABEL_76:
      v36 = v33;
      if (v33)
      {
        p_p = &__p;
        if (v36 != 1)
          goto LABEL_82;
        goto LABEL_78;
      }
LABEL_14:
      v7 = v11;
LABEL_15:
      if (v7 == v10)
      {
        if (v10 != a3)
        {
          if (*v10 == 45)
          {
            sub_2393CB07C(v8, 45);
            ++v10;
          }
          if (v10 != a3 && *v10 == 93)
            return v10 + 1;
        }
LABEL_306:
        sub_2393C78AC();
LABEL_307:
        sub_2393C78AC();
LABEL_308:
        abort();
      }
    }
  }
  return a2;
}

char *sub_2393C9D94(uint64_t a1, char *a2, char *a3, uint64_t a4, int a5, int a6)
{
  int v10;
  int v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  __int128 v19;
  char *v20;
  int v21;
  int v22;
  char *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  __int128 v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  char *v50;
  int v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  char *v58;
  int v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;

  if (a2 == a3)
    return a2;
  v10 = *(_DWORD *)(a1 + 24) & 0x1F0;
  v11 = *a2;
  if (v11 <= 62)
  {
    if (v11 == 42)
    {
      v12 = a2 + 1;
      if (v10)
        v28 = 1;
      else
        v28 = v12 == a3;
      if (!v28 && *v12 == 63)
      {
        v12 = a2 + 2;
        v29 = (_QWORD *)operator new();
        v30 = *(_QWORD *)(a1 + 56);
        v31 = *(_QWORD *)(v30 + 8);
        *v29 = &off_250AD62E0;
        v29[1] = v31;
        *(_QWORD *)(v30 + 8) = 0;
        v16 = operator new();
        v17 = v16;
        v18 = *(_DWORD *)(a1 + 32);
        *(_QWORD *)(v16 + 8) = *(_QWORD *)(a4 + 8);
        *(_QWORD *)(v16 + 16) = v29;
        *(_QWORD *)v16 = &off_250AD65E0;
        v19 = xmmword_2393F5500;
        goto LABEL_41;
      }
      v42 = (_QWORD *)operator new();
      v43 = *(_QWORD *)(a1 + 56);
      v44 = *(_QWORD *)(v43 + 8);
      *v42 = &off_250AD62E0;
      v42[1] = v44;
      *(_QWORD *)(v43 + 8) = 0;
      v39 = operator new();
      v17 = v39;
      v40 = *(_DWORD *)(a1 + 32);
      *(_QWORD *)(v39 + 8) = *(_QWORD *)(a4 + 8);
      *(_QWORD *)(v39 + 16) = v42;
      *(_QWORD *)v39 = &off_250AD65E0;
      v41 = xmmword_2393F5500;
      goto LABEL_45;
    }
    if (v11 == 43)
    {
      v12 = a2 + 1;
      if (!v10 && v12 != a3 && *v12 == 63)
      {
        v12 = a2 + 2;
        v13 = (_QWORD *)operator new();
        v14 = *(_QWORD *)(a1 + 56);
        v15 = *(_QWORD *)(v14 + 8);
        *v13 = &off_250AD62E0;
        v13[1] = v15;
        *(_QWORD *)(v14 + 8) = 0;
        v16 = operator new();
        v17 = v16;
        v18 = *(_DWORD *)(a1 + 32);
        *(_QWORD *)(v16 + 8) = *(_QWORD *)(a4 + 8);
        *(_QWORD *)(v16 + 16) = v13;
        *(_QWORD *)v16 = &off_250AD65E0;
        v19 = xmmword_2393F5430;
LABEL_41:
        *(_OWORD *)(v16 + 24) = v19;
        *(_DWORD *)(v16 + 40) = v18;
        *(_DWORD *)(v16 + 44) = a5;
        *(_DWORD *)(v16 + 48) = a6;
        *(_BYTE *)(v16 + 52) = 0;
LABEL_47:
        *(_QWORD *)(a4 + 8) = 0;
        v48 = (_QWORD *)operator new();
        *v48 = &off_250AD6640;
        v48[1] = v17;
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v48;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(v17 + 16);
        *(_QWORD *)(a4 + 8) = v17;
        ++*(_DWORD *)(a1 + 32);
        return v12;
      }
      v36 = (_QWORD *)operator new();
      v37 = *(_QWORD *)(a1 + 56);
      v38 = *(_QWORD *)(v37 + 8);
      *v36 = &off_250AD62E0;
      v36[1] = v38;
      *(_QWORD *)(v37 + 8) = 0;
      v39 = operator new();
      v17 = v39;
      v40 = *(_DWORD *)(a1 + 32);
      *(_QWORD *)(v39 + 8) = *(_QWORD *)(a4 + 8);
      *(_QWORD *)(v39 + 16) = v36;
      *(_QWORD *)v39 = &off_250AD65E0;
      v41 = xmmword_2393F5430;
      goto LABEL_45;
    }
    return a2;
  }
  if (v11 == 63)
  {
    v12 = a2 + 1;
    if (v10)
      v32 = 1;
    else
      v32 = v12 == a3;
    if (!v32 && *v12 == 63)
    {
      v12 = a2 + 2;
      v33 = (_QWORD *)operator new();
      v34 = *(_QWORD *)(a1 + 56);
      v35 = *(_QWORD *)(v34 + 8);
      *v33 = &off_250AD62E0;
      v33[1] = v35;
      *(_QWORD *)(v34 + 8) = 0;
      v16 = operator new();
      v17 = v16;
      v18 = *(_DWORD *)(a1 + 32);
      *(_QWORD *)(v16 + 8) = *(_QWORD *)(a4 + 8);
      *(_QWORD *)(v16 + 16) = v33;
      *(_QWORD *)v16 = &off_250AD65E0;
      v19 = xmmword_2393F54F0;
      goto LABEL_41;
    }
    v45 = (_QWORD *)operator new();
    v46 = *(_QWORD *)(a1 + 56);
    v47 = *(_QWORD *)(v46 + 8);
    *v45 = &off_250AD62E0;
    v45[1] = v47;
    *(_QWORD *)(v46 + 8) = 0;
    v39 = operator new();
    v17 = v39;
    v40 = *(_DWORD *)(a1 + 32);
    *(_QWORD *)(v39 + 8) = *(_QWORD *)(a4 + 8);
    *(_QWORD *)(v39 + 16) = v45;
    *(_QWORD *)v39 = &off_250AD65E0;
    v41 = xmmword_2393F54F0;
LABEL_45:
    *(_OWORD *)(v39 + 24) = v41;
LABEL_46:
    *(_DWORD *)(v39 + 40) = v40;
    *(_DWORD *)(v39 + 44) = a5;
    *(_DWORD *)(v39 + 48) = a6;
    *(_BYTE *)(v39 + 52) = 1;
    goto LABEL_47;
  }
  if (v11 != 123)
    return a2;
  v20 = a2 + 1;
  if (a2 + 1 == a3)
    goto LABEL_75;
  v21 = *v20;
  if ((v21 & 0xF8) != 0x30 && (v21 & 0xFE) != 0x38)
    goto LABEL_75;
  v22 = v21 - 48;
  v23 = a2 + 2;
  if (a2 + 2 == a3)
  {
LABEL_19:
    v23 = a3;
  }
  else
  {
    while (1)
    {
      v24 = *v23;
      if ((v24 & 0xF8) != 0x30 && (v24 & 0xFE) != 0x38)
        break;
      if (v22 >= 214748364)
        goto LABEL_75;
      v22 = v24 + 10 * v22 - 48;
      if (++v23 == a3)
        goto LABEL_19;
    }
  }
  if (v23 == v20)
    goto LABEL_75;
  if (v23 == a3)
    goto LABEL_76;
  v25 = *v23;
  if (v25 != 44)
  {
    if (v25 == 125)
    {
      v12 = v23 + 1;
      if (v10 || v12 == a3 || *v12 != 63)
      {
        v52 = v22;
        v53 = (_QWORD *)operator new();
        v54 = *(_QWORD *)(a1 + 56);
        v55 = *(_QWORD *)(v54 + 8);
        *v53 = &off_250AD62E0;
        v53[1] = v55;
        *(_QWORD *)(v54 + 8) = 0;
        v39 = operator new();
        v17 = v39;
        v40 = *(_DWORD *)(a1 + 32);
        v56 = *(_QWORD *)(a4 + 8);
        *(_QWORD *)v39 = &off_250AD65E0;
        *(_QWORD *)(v39 + 8) = v56;
        *(_QWORD *)(v39 + 16) = v53;
        *(_QWORD *)(v39 + 24) = v52;
        *(_QWORD *)(v39 + 32) = v52;
        goto LABEL_46;
      }
      v26 = v22;
      v12 = v23 + 2;
      v27 = v22;
LABEL_72:
      sub_2393CA514(a1, v26, v27, a4, a5, a6);
      return v12;
    }
    goto LABEL_75;
  }
  v50 = v23 + 1;
  if (v23 + 1 == a3)
  {
LABEL_75:
    sub_2393C78AC();
    goto LABEL_76;
  }
  v51 = *v50;
  if (v51 == 125)
  {
    v12 = v23 + 2;
    if (!v10 && v12 != a3 && *v12 == 63)
    {
      v12 = v23 + 3;
      sub_2393CA61C(a1, v22, a4, a5, a6);
      return v12;
    }
    v60 = v22;
    v61 = (_QWORD *)operator new();
    v62 = *(_QWORD *)(a1 + 56);
    v63 = *(_QWORD *)(v62 + 8);
    *v61 = &off_250AD62E0;
    v61[1] = v63;
    *(_QWORD *)(v62 + 8) = 0;
    v39 = operator new();
    v17 = v39;
    v40 = *(_DWORD *)(a1 + 32);
    v64 = *(_QWORD *)(a4 + 8);
    *(_QWORD *)v39 = &off_250AD65E0;
    *(_QWORD *)(v39 + 8) = v64;
    *(_QWORD *)(v39 + 16) = v61;
    *(_QWORD *)(v39 + 24) = v60;
    *(_QWORD *)(v39 + 32) = -1;
    goto LABEL_46;
  }
  if ((v51 & 0xF8) == 0x30 || (v51 & 0xFE) == 0x38)
  {
    v57 = v51 - 48;
    v58 = v23 + 2;
    if (v58 == a3)
    {
LABEL_63:
      v58 = a3;
    }
    else
    {
      while (1)
      {
        v59 = *v58;
        if ((v59 & 0xF8) != 0x30 && (v59 & 0xFE) != 0x38)
          break;
        if (v57 >= 214748364)
          goto LABEL_75;
        v57 = v59 + 10 * v57 - 48;
        if (++v58 == a3)
          goto LABEL_63;
      }
    }
    if (v58 != v50 && v58 != a3 && *v58 == 125)
    {
      if (v57 >= v22)
      {
        v12 = v58 + 1;
        if (v10 || v12 == a3 || *v12 != 63)
        {
          v65 = v22;
          v66 = v57;
          v67 = (_QWORD *)operator new();
          v68 = *(_QWORD *)(a1 + 56);
          v69 = *(_QWORD *)(v68 + 8);
          *v67 = &off_250AD62E0;
          v67[1] = v69;
          *(_QWORD *)(v68 + 8) = 0;
          v39 = operator new();
          v17 = v39;
          v40 = *(_DWORD *)(a1 + 32);
          v70 = *(_QWORD *)(a4 + 8);
          *(_QWORD *)v39 = &off_250AD65E0;
          *(_QWORD *)(v39 + 8) = v70;
          *(_QWORD *)(v39 + 16) = v67;
          *(_QWORD *)(v39 + 24) = v65;
          *(_QWORD *)(v39 + 32) = v66;
          goto LABEL_46;
        }
        v26 = v22;
        v27 = v57;
        v12 = v58 + 2;
        goto LABEL_72;
      }
      goto LABEL_75;
    }
  }
LABEL_76:
  v71 = sub_2393C78AC();
  return (char *)sub_2393CA514(v71, v72, v73, v74, v75, v76);
}

_QWORD *sub_2393CA514(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _QWORD *result;

  v12 = (_QWORD *)operator new();
  v13 = *(_QWORD *)(a1 + 56);
  v14 = *(_QWORD *)(v13 + 8);
  *v12 = &off_250AD62E0;
  v12[1] = v14;
  *(_QWORD *)(v13 + 8) = 0;
  v15 = operator new();
  v16 = *(_DWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a4 + 8);
  *(_QWORD *)v15 = &off_250AD65E0;
  *(_QWORD *)(v15 + 8) = v17;
  *(_QWORD *)(v15 + 16) = v12;
  *(_QWORD *)(v15 + 24) = a2;
  *(_QWORD *)(v15 + 32) = a3;
  *(_DWORD *)(v15 + 40) = v16;
  *(_DWORD *)(v15 + 44) = a5;
  *(_DWORD *)(v15 + 48) = a6;
  *(_BYTE *)(v15 + 52) = 0;
  *(_QWORD *)(a4 + 8) = 0;
  result = (_QWORD *)operator new();
  *result = &off_250AD6640;
  result[1] = v15;
  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = result;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(v15 + 16);
  *(_QWORD *)(a4 + 8) = v15;
  ++*(_DWORD *)(a1 + 32);
  return result;
}

_QWORD *sub_2393CA61C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _QWORD *result;

  v10 = (_QWORD *)operator new();
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_QWORD *)(v11 + 8);
  *v10 = &off_250AD62E0;
  v10[1] = v12;
  *(_QWORD *)(v11 + 8) = 0;
  v13 = operator new();
  v14 = *(_DWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)v13 = &off_250AD65E0;
  *(_QWORD *)(v13 + 8) = v15;
  *(_QWORD *)(v13 + 16) = v10;
  *(_QWORD *)(v13 + 24) = a2;
  *(_QWORD *)(v13 + 32) = -1;
  *(_DWORD *)(v13 + 40) = v14;
  *(_DWORD *)(v13 + 44) = a4;
  *(_DWORD *)(v13 + 48) = a5;
  *(_BYTE *)(v13 + 52) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  result = (_QWORD *)operator new();
  *result = &off_250AD6640;
  result[1] = v13;
  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = result;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(v13 + 16);
  *(_QWORD *)(a3 + 8) = v13;
  ++*(_DWORD *)(a1 + 32);
  return result;
}

void sub_2393CA728()
{
  JUMPOUT(0x23B83C4BCLL);
}

uint64_t sub_2393CA73C(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *sub_2393CA754(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_250AD6610;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = &off_250AD6310;
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void sub_2393CA7B4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_250AD6610;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = &off_250AD6310;
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  JUMPOUT(0x23B83C4BCLL);
}

uint64_t sub_2393CA824(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BOOL4 v8;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _BYTE *v35;

  v2 = *(unsigned int *)(result + 40);
  v3 = *(_QWORD *)(a2 + 56);
  v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 != -991)
  {
    *v4 = 0;
    if (!*(_QWORD *)(result + 32))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_40;
    }
    if (*(_QWORD *)(result + 24))
    {
      *(_DWORD *)a2 = -994;
      *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
      *(_QWORD *)(v3 + 16 * v2 + 8) = *(_QWORD *)(a2 + 16);
      v24 = *(_DWORD *)(result + 44);
      v25 = *(_DWORD *)(result + 48);
      if (v24 == v25)
        return result;
      v26 = (v25 - 1);
      v27 = (v24 - 1);
      v28 = *(_QWORD *)(a2 + 24);
      v29 = *(_QWORD *)(a2 + 32);
      v30 = v26 - v27;
      if ((unint64_t)(v26 - v27) >= 2)
      {
        v31 = v30 & 0xFFFFFFFFFFFFFFFELL;
        v32 = v29 + 24 * v27 + 24;
        v33 = v30 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          *(_QWORD *)(v32 - 24) = v28;
          *(_QWORD *)(v32 - 16) = v28;
          *(_QWORD *)v32 = v28;
          *(_QWORD *)(v32 + 8) = v28;
          *(_BYTE *)(v32 - 8) = 0;
          *(_BYTE *)(v32 + 16) = 0;
          v32 += 48;
          v33 -= 2;
        }
        while (v33);
        if (v30 == v31)
          return result;
        v27 += v31;
      }
      v34 = v26 - v27;
      v35 = (_BYTE *)(v29 + 24 * v27 + 16);
      do
      {
        *((_QWORD *)v35 - 2) = v28;
        *((_QWORD *)v35 - 1) = v28;
        *v35 = 0;
        v35 += 24;
        --v34;
      }
      while (v34);
      return result;
    }
LABEL_38:
    *(_DWORD *)a2 = -992;
    return result;
  }
  v5 = *v4 + 1;
  *v4 = v5;
  v6 = *(_QWORD *)(result + 24);
  v7 = *(_QWORD *)(result + 32);
  v8 = v5 < v7;
  if (v5 < v7 && v5 >= v6)
    v8 = v5 < v7 && *(_QWORD *)(v3 + 16 * v2 + 8) != *(_QWORD *)(a2 + 16);
  if (v8 && v5 >= v6)
    goto LABEL_38;
  *(_DWORD *)a2 = -994;
  if (!v8)
  {
LABEL_40:
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 16);
    return result;
  }
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  *(_QWORD *)(v3 + 16 * v2 + 8) = *(_QWORD *)(a2 + 16);
  v12 = *(_DWORD *)(result + 44);
  v13 = *(_DWORD *)(result + 48);
  if (v12 == v13)
    return result;
  v14 = (v13 - 1);
  v15 = (v12 - 1);
  v16 = *(_QWORD *)(a2 + 24);
  v17 = *(_QWORD *)(a2 + 32);
  v18 = v14 - v15;
  if ((unint64_t)(v14 - v15) < 2)
    goto LABEL_24;
  v19 = v18 & 0xFFFFFFFFFFFFFFFELL;
  v20 = v17 + 24 * v15 + 24;
  v21 = v18 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    *(_QWORD *)(v20 - 24) = v16;
    *(_QWORD *)(v20 - 16) = v16;
    *(_QWORD *)v20 = v16;
    *(_QWORD *)(v20 + 8) = v16;
    *(_BYTE *)(v20 - 8) = 0;
    *(_BYTE *)(v20 + 16) = 0;
    v20 += 48;
    v21 -= 2;
  }
  while (v21);
  if (v18 != v19)
  {
    v15 += v19;
LABEL_24:
    v22 = v14 - v15;
    v23 = (_BYTE *)(v17 + 24 * v15 + 16);
    do
    {
      *((_QWORD *)v23 - 2) = v16;
      *((_QWORD *)v23 - 1) = v16;
      *v23 = 0;
      v23 += 24;
      --v22;
    }
    while (v22);
  }
  return result;
}

uint64_t sub_2393CA9F8(uint64_t result, int a2, uint64_t a3)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;

  *(_DWORD *)a3 = -994;
  if (*(unsigned __int8 *)(result + 52) == a2)
  {
    *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + 16);
    return result;
  }
  *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + 8);
  v3 = *(_DWORD *)(result + 44);
  *(_QWORD *)(*(_QWORD *)(a3 + 56) + 16 * *(unsigned int *)(result + 40) + 8) = *(_QWORD *)(a3 + 16);
  v4 = *(_DWORD *)(result + 48);
  if (v3 != v4)
  {
    v5 = (v4 - 1);
    v6 = (v3 - 1);
    v7 = *(_QWORD *)(a3 + 24);
    v8 = *(_QWORD *)(a3 + 32);
    v9 = v5 - v6;
    if ((unint64_t)(v5 - v6) < 2)
      goto LABEL_9;
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    v11 = v8 + 24 * v6 + 24;
    v12 = v9 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      *(_QWORD *)(v11 - 24) = v7;
      *(_QWORD *)(v11 - 16) = v7;
      *(_QWORD *)v11 = v7;
      *(_QWORD *)(v11 + 8) = v7;
      *(_BYTE *)(v11 - 8) = 0;
      *(_BYTE *)(v11 + 16) = 0;
      v11 += 48;
      v12 -= 2;
    }
    while (v12);
    if (v9 != v10)
    {
      v6 += v10;
LABEL_9:
      v13 = v5 - v6;
      v14 = (_BYTE *)(v8 + 24 * v6 + 16);
      do
      {
        *((_QWORD *)v14 - 2) = v7;
        *((_QWORD *)v14 - 1) = v7;
        *v14 = 0;
        v14 += 24;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

_QWORD *sub_2393CAAB8(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_250AD6310;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_2393CAAF8(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_250AD6310;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x23B83C4BCLL);
}

_QWORD *sub_2393CAB4C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_250AD6610;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = &off_250AD6310;
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void sub_2393CABAC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_250AD6610;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = &off_250AD6310;
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  JUMPOUT(0x23B83C4BCLL);
}

_QWORD *sub_2393CAC1C(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_250AD6310;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_2393CAC5C(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_250AD6310;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x23B83C4BCLL);
}

uint64_t sub_2393CACAC(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_DWORD *)a2 = -994;
  v2 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(_QWORD *)(v2 + 8) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(v2 + 16) = 1;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *sub_2393CACE4(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_250AD6310;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_2393CAD24(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_250AD6310;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x23B83C4BCLL);
}

uint64_t sub_2393CAD74(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(*(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *sub_2393CADA4(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_250AD6310;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_2393CADE4(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_250AD6310;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x23B83C4BCLL);
}

uint64_t sub_2393CAE34(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  int v3;
  BOOL v4;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(_BYTE *)(a2 + 88) & 2) == 0
    || *(_BYTE *)(result + 16) && ((v3 = *v2, v3 != 13) ? (v4 = v3 == 10) : (v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  else
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  return result;
}

_QWORD *sub_2393CAE84(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_250AD6310;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_2393CAEC4(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_250AD6310;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x23B83C4BCLL);
}

uint64_t sub_2393CAF14(uint64_t result, uint64_t a2)
{
  int v2;

  if (!*(_BYTE *)(a2 + 92))
  {
    if (!*(_BYTE *)(result + 16))
      goto LABEL_12;
    v2 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10)
      goto LABEL_12;
LABEL_11:
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
    return result;
  }
  if (*(_QWORD *)(a2 + 16) == *(_QWORD *)(a2 + 8) && (*(_BYTE *)(a2 + 88) & 1) == 0)
    goto LABEL_11;
LABEL_12:
  *(_DWORD *)a2 = -993;
  *(_QWORD *)(a2 + 80) = 0;
  return result;
}

uint64_t sub_2393CAF74(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  const std::locale *v11;
  BOOL v12;
  std::locale v14;
  std::string v15;

  *(_QWORD *)a1 = &off_250AD6550;
  *(_QWORD *)(a1 + 8) = a3;
  v11 = (const std::locale *)(a1 + 16);
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_BYTE *)(a1 + 168) = a4;
  *(_BYTE *)(a1 + 169) = a5;
  *(_BYTE *)(a1 + 170) = a6;
  std::locale::locale(&v14, v11);
  std::locale::name(&v15, &v14);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    v12 = v15.__r_.__value_.__l.__size_ != 1 || *v15.__r_.__value_.__l.__data_ != 67;
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  else
  {
    v12 = SHIBYTE(v15.__r_.__value_.__r.__words[2]) != 1 || v15.__r_.__value_.__s.__data_[0] != 67;
  }
  std::locale::~locale(&v14);
  *(_BYTE *)(a1 + 171) = v12;
  return a1;
}

void sub_2393CB07C(uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  size_t v24;
  unint64_t v25;
  unint64_t v26;
  __int128 *v27;
  _OWORD *v28;
  unint64_t v29;
  __int128 v30;
  unint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  __int128 *v35;
  _OWORD *v36;
  unint64_t v37;
  __int128 v38;
  unint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  __int128 *v43;
  _OWORD *v44;
  unint64_t v45;
  __int128 v46;
  unint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char v52;
  char *v53;
  char v54;
  char *v55;
  char v56;

  v2 = a2;
  if (!*(_BYTE *)(a1 + 169))
  {
    v5 = *(_BYTE **)(a1 + 48);
    v12 = *(_QWORD *)(a1 + 56);
    if (*(_BYTE *)(a1 + 170))
    {
      if ((unint64_t)v5 < v12)
        goto LABEL_22;
      v6 = *(_BYTE **)(a1 + 40);
      v13 = v5 - v6;
      v14 = v5 - v6 + 1;
      if (v14 >= 0)
      {
        v15 = v12 - (_QWORD)v6;
        if (2 * v15 > v14)
          v14 = 2 * v15;
        if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
          v16 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v16 = v14;
        if (v16)
          v11 = operator new(v16);
        else
          v11 = 0;
        v18 = (char *)v11 + v13;
        v19 = (char *)v11 + v16;
        *((_BYTE *)v11 + v13) = v2;
        v17 = (uint64_t)v11 + v13 + 1;
        if (v5 == v6)
          goto LABEL_49;
        if (v13 >= 8 && (unint64_t)(v6 - (_BYTE *)v11) >= 0x20)
        {
          if (v13 >= 0x20)
          {
            v25 = v13 & 0xFFFFFFFFFFFFFFE0;
            v35 = (__int128 *)(v5 - 16);
            v36 = (char *)v11 + v5 - 16 - v6;
            v37 = v13 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v38 = *v35;
              *(v36 - 1) = *(v35 - 1);
              *v36 = v38;
              v36 -= 2;
              v35 -= 2;
              v37 -= 32;
            }
            while (v37);
            if (v13 == v25)
              goto LABEL_73;
            if ((v13 & 0x18) == 0)
            {
              v18 -= v25;
              v5 -= v25;
              goto LABEL_80;
            }
          }
          else
          {
            v25 = 0;
          }
          v39 = v25 - (v13 & 0xFFFFFFFFFFFFFFF8);
          v40 = &v5[-v25 - 8];
          v41 = (char *)(v40 - v6);
          do
          {
            v42 = *(_QWORD *)v40;
            v40 -= 8;
            *(_QWORD *)&v41[(_QWORD)v11] = v42;
            v41 -= 8;
            v39 += 8;
          }
          while (v39);
          if (v13 == (v13 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_73;
          v18 -= v13 & 0xFFFFFFFFFFFFFFF8;
          v5 -= v13 & 0xFFFFFFFFFFFFFFF8;
        }
LABEL_80:
        v53 = v18 - 1;
        do
        {
          v54 = *--v5;
          *v53-- = v54;
        }
        while (v5 != v6);
        goto LABEL_86;
      }
LABEL_90:
      abort();
    }
    if ((unint64_t)v5 < v12)
      goto LABEL_22;
    v6 = *(_BYTE **)(a1 + 40);
    v21 = v5 - v6;
    v22 = v5 - v6 + 1;
    if (v22 < 0)
      goto LABEL_90;
    v23 = v12 - (_QWORD)v6;
    if (2 * v23 > v22)
      v22 = 2 * v23;
    if (v23 >= 0x3FFFFFFFFFFFFFFFLL)
      v24 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v24 = v22;
    if (v24)
      v11 = operator new(v24);
    else
      v11 = 0;
    v18 = (char *)v11 + v21;
    v19 = (char *)v11 + v24;
    *((_BYTE *)v11 + v21) = v2;
    v17 = (uint64_t)v11 + v21 + 1;
    if (v5 == v6)
      goto LABEL_49;
    if (v21 >= 8 && (unint64_t)(v6 - (_BYTE *)v11) >= 0x20)
    {
      if (v21 >= 0x20)
      {
        v26 = v21 & 0xFFFFFFFFFFFFFFE0;
        v43 = (__int128 *)(v5 - 16);
        v44 = (char *)v11 + v5 - 16 - v6;
        v45 = v21 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v46 = *v43;
          *(v44 - 1) = *(v43 - 1);
          *v44 = v46;
          v44 -= 2;
          v43 -= 2;
          v45 -= 32;
        }
        while (v45);
        if (v21 == v26)
          goto LABEL_73;
        if ((v21 & 0x18) == 0)
        {
          v18 -= v26;
          v5 -= v26;
          goto LABEL_84;
        }
      }
      else
      {
        v26 = 0;
      }
      v47 = v26 - (v21 & 0xFFFFFFFFFFFFFFF8);
      v48 = &v5[-v26 - 8];
      v49 = (char *)(v48 - v6);
      do
      {
        v50 = *(_QWORD *)v48;
        v48 -= 8;
        *(_QWORD *)&v49[(_QWORD)v11] = v50;
        v49 -= 8;
        v47 += 8;
      }
      while (v47);
      if (v21 == (v21 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_73;
      v18 -= v21 & 0xFFFFFFFFFFFFFFF8;
      v5 -= v21 & 0xFFFFFFFFFFFFFFF8;
    }
LABEL_84:
    v55 = v18 - 1;
    do
    {
      v56 = *--v5;
      *v55-- = v56;
    }
    while (v5 != v6);
    goto LABEL_86;
  }
  v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
  v5 = *(_BYTE **)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56);
  if ((unint64_t)v5 < v4)
  {
LABEL_22:
    *v5 = v2;
    v17 = (uint64_t)(v5 + 1);
    goto LABEL_89;
  }
  v6 = *(_BYTE **)(a1 + 40);
  v7 = v5 - v6;
  v8 = v5 - v6 + 1;
  if (v8 < 0)
    goto LABEL_90;
  v9 = v4 - (_QWORD)v6;
  if (2 * v9 > v8)
    v8 = 2 * v9;
  if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
    v10 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v10 = v8;
  if (v10)
    v11 = operator new(v10);
  else
    v11 = 0;
  v18 = (char *)v11 + v7;
  v19 = (char *)v11 + v10;
  *((_BYTE *)v11 + v7) = v2;
  v17 = (uint64_t)v11 + v7 + 1;
  if (v5 == v6)
  {
LABEL_49:
    v11 = v18;
    goto LABEL_87;
  }
  if (v7 < 8 || (unint64_t)(v6 - (_BYTE *)v11) < 0x20)
    goto LABEL_75;
  if (v7 < 0x20)
  {
    v20 = 0;
    goto LABEL_54;
  }
  v20 = v7 & 0xFFFFFFFFFFFFFFE0;
  v27 = (__int128 *)(v5 - 16);
  v28 = (char *)v11 + v5 - 16 - v6;
  v29 = v7 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v30 = *v27;
    *(v28 - 1) = *(v27 - 1);
    *v28 = v30;
    v28 -= 2;
    v27 -= 2;
    v29 -= 32;
  }
  while (v29);
  if (v7 == v20)
    goto LABEL_73;
  if ((v7 & 0x18) != 0)
  {
LABEL_54:
    v31 = v20 - (v7 & 0xFFFFFFFFFFFFFFF8);
    v32 = &v5[-v20 - 8];
    v33 = (char *)(v32 - v6);
    do
    {
      v34 = *(_QWORD *)v32;
      v32 -= 8;
      *(_QWORD *)&v33[(_QWORD)v11] = v34;
      v33 -= 8;
      v31 += 8;
    }
    while (v31);
    if (v7 != (v7 & 0xFFFFFFFFFFFFFFF8))
    {
      v18 -= v7 & 0xFFFFFFFFFFFFFFF8;
      v5 -= v7 & 0xFFFFFFFFFFFFFFF8;
      goto LABEL_75;
    }
LABEL_73:
    v5 = v6;
    goto LABEL_87;
  }
  v18 -= v20;
  v5 -= v20;
LABEL_75:
  v51 = v18 - 1;
  do
  {
    v52 = *--v5;
    *v51-- = v52;
  }
  while (v5 != v6);
LABEL_86:
  v5 = *(_BYTE **)(a1 + 40);
LABEL_87:
  *(_QWORD *)(a1 + 40) = v11;
  *(_QWORD *)(a1 + 48) = v17;
  *(_QWORD *)(a1 + 56) = v19;
  if (v5)
    operator delete(v5);
LABEL_89:
  *(_QWORD *)(a1 + 48) = v17;
}

void sub_2393CB4A0(uint64_t a1, uint64_t a2, _BYTE *__src, _BYTE *a4)
{
  size_t v4;
  std::string *p_dst;
  uint64_t v10;
  uint64_t v11;
  std::string *v12;
  unint64_t v13;
  unint64_t v14;
  std::string::size_type size;
  std::string *v16;
  int v17;
  uint64_t v18;
  std::string v19;
  std::string __dst;

  v4 = a4 - __src;
  if ((unint64_t)(a4 - __src) >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v4 <= 0x16)
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = (_BYTE)a4 - (_BYTE)__src;
    p_dst = &__dst;
    if (__src == a4)
      goto LABEL_9;
LABEL_8:
    memcpy(p_dst, __src, v4);
    p_dst = (std::string *)((char *)p_dst + v4);
    goto LABEL_9;
  }
  v10 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v4 | 7) != 0x17)
    v10 = v4 | 7;
  v11 = v10 + 1;
  p_dst = (std::string *)operator new(v10 + 1);
  __dst.__r_.__value_.__l.__size_ = v4;
  __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  if (__src != a4)
    goto LABEL_8;
LABEL_9:
  p_dst->__r_.__value_.__s.__data_[0] = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__dst.__r_.__value_.__l.__size_)
      goto LABEL_17;
    v12 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&__dst.__r_.__value_.__s + 23))
      return;
    v12 = &__dst;
  }
  std::__get_collation_name(&v19, (const char *)v12);
  *(_OWORD *)a1 = *(_OWORD *)&v19.__r_.__value_.__l.__data_;
  v13 = v19.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a1 + 16) = *((_QWORD *)&v19.__r_.__value_.__l + 2);
  v14 = HIBYTE(v13);
  if ((v14 & 0x80u) != 0)
    v14 = *(_QWORD *)(a1 + 8);
  if (v14)
    goto LABEL_17;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __dst.__r_.__value_.__l.__size_;
    if (__dst.__r_.__value_.__l.__size_ >= 3)
      goto LABEL_17;
    v16 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  else
  {
    size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if (HIBYTE(__dst.__r_.__value_.__r.__words[2]) >= 3u)
      return;
    v16 = &__dst;
  }
  (*(void (**)(std::string *__return_ptr, _QWORD, std::string *, char *))(**(_QWORD **)(a2 + 16) + 32))(&v19, *(_QWORD *)(a2 + 16), v16, (char *)v16 + size);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  *(std::string *)a1 = v19;
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    v17 = *(unsigned __int8 *)(a1 + 23);
    if (v17 != 12 && v17 != 1)
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 23) = 0;
      goto LABEL_17;
    }
    goto LABEL_33;
  }
  v18 = *(_QWORD *)(a1 + 8);
  if (v18 == 1 || v18 == 12)
  {
LABEL_33:
    std::string::operator=((std::string *)a1, &__dst);
    goto LABEL_17;
  }
  **(_BYTE **)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
LABEL_17:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

unsigned __int8 *sub_2393CB694(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, std::string *this, uint64_t a5)
{
  char v8;
  char v9;
  unint64_t v10;
  _BYTE *v11;
  unint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  size_t v18;
  void *v19;
  _BYTE *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  size_t v24;
  void *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  size_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  __int128 *v39;
  _OWORD *v40;
  unint64_t v41;
  __int128 v42;
  unint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  __int128 *v47;
  _OWORD *v48;
  unint64_t v49;
  __int128 v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  __int128 *v55;
  _OWORD *v56;
  unint64_t v57;
  __int128 v58;
  unint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char v64;
  char *v65;
  char v66;
  char *v67;
  char v68;

  if (a2 == a3)
  {
    sub_2393C78AC();
    goto LABEL_109;
  }
  switch(*a2)
  {
    case 'D':
      *(_DWORD *)(a5 + 164) |= 0x400u;
      return a2 + 1;
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'T':
    case 'U':
    case 'V':
    case 'X':
    case 'Y':
    case 'Z':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
    case 'a':
    case 'c':
    case 'e':
    case 'f':
    case 'g':
    case 'h':
    case 'i':
    case 'j':
    case 'k':
    case 'l':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'q':
    case 'r':
    case 't':
    case 'u':
    case 'v':
      return sub_2393CC868(a1, a2, a3, this);
    case 'S':
      *(_DWORD *)(a5 + 164) |= 0x4000u;
      return a2 + 1;
    case 'W':
      *(_DWORD *)(a5 + 164) |= 0x500u;
      if (!*(_BYTE *)(a5 + 169))
      {
        v13 = *(_BYTE **)(a5 + 72);
        v12 = *(_QWORD *)(a5 + 80);
        if (*(_BYTE *)(a5 + 170))
        {
          if ((unint64_t)v13 >= v12)
          {
            v14 = *(_BYTE **)(a5 + 64);
            v15 = v13 - v14;
            v16 = v13 - v14 + 1;
            if (v16 < 0)
              goto LABEL_109;
            v17 = v12 - (_QWORD)v14;
            if (2 * v17 > v16)
              v16 = 2 * v17;
            if (v17 >= 0x3FFFFFFFFFFFFFFFLL)
              v18 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v18 = v16;
            if (v18)
              v19 = operator new(v18);
            else
              v19 = 0;
            v34 = (char *)v19 + v15;
            v35 = (char *)v19 + v18;
            *((_BYTE *)v19 + v15) = 95;
            v36 = (uint64_t)v19 + v15 + 1;
            if (v13 != v14)
            {
              if (v15 < 8 || (unint64_t)(v14 - (_BYTE *)v19) < 0x20)
                goto LABEL_97;
              if (v15 < 0x20)
              {
                v37 = 0;
LABEL_76:
                v51 = v37 - (v15 & 0xFFFFFFFFFFFFFFF8);
                v52 = &v13[-v37 - 8];
                v53 = (char *)(v52 - v14);
                do
                {
                  v54 = *(_QWORD *)v52;
                  v52 -= 8;
                  *(_QWORD *)&v53[(_QWORD)v19] = v54;
                  v53 -= 8;
                  v51 += 8;
                }
                while (v51);
                if (v15 != (v15 & 0xFFFFFFFFFFFFFFF8))
                {
                  v34 -= v15 & 0xFFFFFFFFFFFFFFF8;
                  v13 -= v15 & 0xFFFFFFFFFFFFFFF8;
                  goto LABEL_97;
                }
                goto LABEL_87;
              }
              v37 = v15 & 0xFFFFFFFFFFFFFFE0;
              v47 = (__int128 *)(v13 - 16);
              v48 = (char *)v19 + v13 - 16 - v14;
              v49 = v15 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v50 = *v47;
                *(v48 - 1) = *(v47 - 1);
                *v48 = v50;
                v48 -= 2;
                v47 -= 2;
                v49 -= 32;
              }
              while (v49);
              if (v15 != v37)
              {
                if ((v15 & 0x18) == 0)
                {
                  v34 -= v37;
                  v13 -= v37;
LABEL_97:
                  v65 = v34 - 1;
                  do
                  {
                    v66 = *--v13;
                    *v65-- = v66;
                  }
                  while (v13 != v14);
LABEL_103:
                  v13 = *(_BYTE **)(a5 + 64);
                  goto LABEL_104;
                }
                goto LABEL_76;
              }
LABEL_87:
              v13 = v14;
              goto LABEL_104;
            }
LABEL_62:
            v19 = v34;
LABEL_104:
            *(_QWORD *)(a5 + 64) = v19;
            *(_QWORD *)(a5 + 72) = v36;
            *(_QWORD *)(a5 + 80) = v35;
            if (v13)
              operator delete(v13);
            *(_QWORD *)(a5 + 72) = v36;
            return a2 + 1;
          }
LABEL_34:
          *v13 = 95;
          *(_QWORD *)(a5 + 72) = v13 + 1;
          return a2 + 1;
        }
        if ((unint64_t)v13 < v12)
          goto LABEL_34;
        v14 = *(_BYTE **)(a5 + 64);
        v30 = v13 - v14;
        v31 = v13 - v14 + 1;
        if (v31 < 0)
          goto LABEL_109;
        v32 = v12 - (_QWORD)v14;
        if (2 * v32 > v31)
          v31 = 2 * v32;
        if (v32 >= 0x3FFFFFFFFFFFFFFFLL)
          v33 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v33 = v31;
        if (v33)
          v19 = operator new(v33);
        else
          v19 = 0;
        v34 = (char *)v19 + v30;
        v35 = (char *)v19 + v33;
        *((_BYTE *)v19 + v30) = 95;
        v36 = (uint64_t)v19 + v30 + 1;
        if (v13 == v14)
          goto LABEL_62;
        if (v30 >= 8 && (unint64_t)(v14 - (_BYTE *)v19) >= 0x20)
        {
          if (v30 >= 0x20)
          {
            v38 = v30 & 0xFFFFFFFFFFFFFFE0;
            v55 = (__int128 *)(v13 - 16);
            v56 = (char *)v19 + v13 - 16 - v14;
            v57 = v30 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v58 = *v55;
              *(v56 - 1) = *(v55 - 1);
              *v56 = v58;
              v56 -= 2;
              v55 -= 2;
              v57 -= 32;
            }
            while (v57);
            if (v30 == v38)
              goto LABEL_87;
            if ((v30 & 0x18) == 0)
            {
              v34 -= v38;
              v13 -= v38;
              goto LABEL_101;
            }
          }
          else
          {
            v38 = 0;
          }
          v59 = v38 - (v30 & 0xFFFFFFFFFFFFFFF8);
          v60 = &v13[-v38 - 8];
          v61 = (char *)(v60 - v14);
          do
          {
            v62 = *(_QWORD *)v60;
            v60 -= 8;
            *(_QWORD *)&v61[(_QWORD)v19] = v62;
            v61 -= 8;
            v59 += 8;
          }
          while (v59);
          if (v30 == (v30 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_87;
          v34 -= v30 & 0xFFFFFFFFFFFFFFF8;
          v13 -= v30 & 0xFFFFFFFFFFFFFFF8;
        }
LABEL_101:
        v67 = v34 - 1;
        do
        {
          v68 = *--v13;
          *v67-- = v68;
        }
        while (v13 != v14);
        goto LABEL_103;
      }
      v8 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a5 + 24) + 40))(*(_QWORD *)(a5 + 24), 95);
      v9 = v8;
      v11 = *(_BYTE **)(a5 + 72);
      v10 = *(_QWORD *)(a5 + 80);
      if ((unint64_t)v11 >= v10)
      {
        v20 = *(_BYTE **)(a5 + 64);
        v21 = v11 - v20;
        v22 = v11 - v20 + 1;
        if (v22 >= 0)
        {
          v23 = v10 - (_QWORD)v20;
          if (2 * v23 > v22)
            v22 = 2 * v23;
          if (v23 >= 0x3FFFFFFFFFFFFFFFLL)
            v24 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v24 = v22;
          if (v24)
            v25 = operator new(v24);
          else
            v25 = 0;
          v26 = (char *)v25 + v21;
          v27 = (char *)v25 + v24;
          *((_BYTE *)v25 + v21) = v9;
          v28 = (uint64_t)v25 + v21 + 1;
          if (v11 == v20)
          {
            v25 = (char *)v25 + v21;
            goto LABEL_92;
          }
          if (v21 >= 8 && (unint64_t)(v20 - (_BYTE *)v25) >= 0x20)
          {
            if (v21 < 0x20)
            {
              v29 = 0;
              goto LABEL_67;
            }
            v29 = v21 & 0xFFFFFFFFFFFFFFE0;
            v39 = (__int128 *)(v11 - 16);
            v40 = (char *)v25 + v11 - 16 - v20;
            v41 = v21 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v42 = *v39;
              *(v40 - 1) = *(v39 - 1);
              *v40 = v42;
              v40 -= 2;
              v39 -= 2;
              v41 -= 32;
            }
            while (v41);
            if (v21 == v29)
              goto LABEL_70;
            if ((v21 & 0x18) != 0)
            {
LABEL_67:
              v43 = v29 - (v21 & 0xFFFFFFFFFFFFFFF8);
              v44 = &v11[-v29 - 8];
              v45 = (char *)(v44 - v20);
              do
              {
                v46 = *(_QWORD *)v44;
                v44 -= 8;
                *(_QWORD *)&v45[(_QWORD)v25] = v46;
                v45 -= 8;
                v43 += 8;
              }
              while (v43);
              if (v21 == (v21 & 0xFFFFFFFFFFFFFFF8))
              {
LABEL_70:
                v11 = v20;
                goto LABEL_92;
              }
              v26 -= v21 & 0xFFFFFFFFFFFFFFF8;
              v11 -= v21 & 0xFFFFFFFFFFFFFFF8;
              goto LABEL_89;
            }
            v26 -= v29;
            v11 -= v29;
          }
LABEL_89:
          v63 = v26 - 1;
          do
          {
            v64 = *--v11;
            *v63-- = v64;
          }
          while (v11 != v20);
          v11 = *(_BYTE **)(a5 + 64);
LABEL_92:
          *(_QWORD *)(a5 + 64) = v25;
          *(_QWORD *)(a5 + 72) = v28;
          *(_QWORD *)(a5 + 80) = v27;
          if (v11)
            operator delete(v11);
          *(_QWORD *)(a5 + 72) = v28;
          return a2 + 1;
        }
LABEL_109:
        abort();
      }
      *v11 = v8;
      *(_QWORD *)(a5 + 72) = v11 + 1;
      return a2 + 1;
    case 'b':
      std::string::operator=(this, 8);
      return a2 + 1;
    case 'd':
      *(_DWORD *)(a5 + 160) |= 0x400u;
      return a2 + 1;
    case 's':
      *(_DWORD *)(a5 + 160) |= 0x4000u;
      return a2 + 1;
    case 'w':
      *(_DWORD *)(a5 + 160) |= 0x500u;
      sub_2393CB07C(a5, 95);
      return a2 + 1;
    default:
      if (!*a2)
      {
        std::string::operator=(this, 0);
        return a2 + 1;
      }
      return sub_2393CC868(a1, a2, a3, this);
  }
}

char *sub_2393CBBF8(uint64_t a1, char *a2, char *a3, std::string *this)
{
  uint64_t v5;
  std::string *v6;
  char v7;
  char *v8;
  char v9;
  char v10;
  int v11;
  char v12;
  uint64_t v13;
  uint64_t v15;

  if (a2 == a3)
  {
LABEL_45:
    v15 = sub_2393C78AC();
    return (char *)sub_2393CBDA4(v15);
  }
  v5 = *a2;
  switch((int)v5)
  {
    case '"':
    case '/':
    case '\\':
      if (!this)
        goto LABEL_41;
      v6 = this;
      goto LABEL_30;
    case 'a':
      if (this)
      {
        v6 = this;
        LOBYTE(v5) = 7;
        goto LABEL_30;
      }
      v5 = 7;
      goto LABEL_41;
    case 'b':
      if (this)
      {
        v6 = this;
        LOBYTE(v5) = 8;
        goto LABEL_30;
      }
      v5 = 8;
      goto LABEL_41;
    case 'f':
      if (this)
      {
        v6 = this;
        LOBYTE(v5) = 12;
        goto LABEL_30;
      }
      v5 = 12;
      goto LABEL_41;
    case 'n':
      if (this)
      {
        v6 = this;
        LOBYTE(v5) = 10;
        goto LABEL_30;
      }
      v5 = 10;
      goto LABEL_41;
    case 'r':
      if (this)
      {
        v6 = this;
        LOBYTE(v5) = 13;
        goto LABEL_30;
      }
      v5 = 13;
      goto LABEL_41;
    case 't':
      if (this)
      {
        v6 = this;
        LOBYTE(v5) = 9;
        goto LABEL_30;
      }
      v5 = 9;
      goto LABEL_41;
    case 'v':
      if (this)
      {
        v6 = this;
        LOBYTE(v5) = 11;
LABEL_30:
        std::string::operator=(v6, v5);
        return a2 + 1;
      }
      else
      {
        v5 = 11;
LABEL_41:
        sub_2393CC450(a1, v5);
        return a2 + 1;
      }
    default:
      if ((v5 & 0xFFFFFFF8) != 0x30)
        goto LABEL_45;
      v7 = v5 - 48;
      v8 = a2 + 1;
      if (a2 + 1 == a3)
      {
        v8 = a3;
LABEL_32:
        v13 = v7;
        if (!this)
          goto LABEL_15;
        goto LABEL_33;
      }
      if ((*v8 & 0xF8) != 0x30)
        goto LABEL_32;
      v9 = *v8 + 8 * v7 - 48;
      if (a2 + 2 != a3)
      {
        v10 = a2[2];
        v11 = v10 & 0xF8;
        v12 = v10 + 8 * v9 - 48;
        if (v11 == 48)
          v8 = a2 + 3;
        else
          v8 = a2 + 2;
        if (v11 == 48)
          v9 = v12;
        v13 = v9;
        if (!this)
          goto LABEL_15;
        goto LABEL_33;
      }
      v8 = a3;
      v13 = v9;
      if (!this)
      {
LABEL_15:
        sub_2393CC450(a1, v13);
        return v8;
      }
LABEL_33:
      std::string::operator=(this, v13);
      return v8;
  }
}

void sub_2393CBDA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v5;
  __int16 v6;
  unint64_t v7;
  char *v8;
  _WORD *v9;
  __int16 v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  _WORD *v27;
  char *v28;
  _WORD *v29;
  unint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  char *v33;
  unint64_t v34;
  __int128 v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  _WORD *v43;
  char *v44;
  unint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  char *v48;
  unint64_t v49;
  __int128 v50;
  __int16 v51;
  unint64_t v52;
  uint64_t v53;
  _OWORD *v54;
  char *v55;
  unint64_t v56;
  __int128 v57;
  __int16 v58;

  if (!*(_BYTE *)(a1 + 169))
  {
    v10 = a2 | (unsigned __int16)((_WORD)a3 << 8);
    v12 = *(char **)(a1 + 120);
    v11 = *(_QWORD *)(a1 + 128);
    if (*(_BYTE *)(a1 + 170))
    {
      if ((unint64_t)v12 >= v11)
      {
        v13 = *(char **)(a1 + 112);
        v14 = v12 - v13;
        if (v12 - v13 <= -3)
          goto LABEL_73;
        v15 = v14 >> 1;
        v16 = v11 - (_QWORD)v13;
        if (v16 <= (v14 >> 1) + 1)
          v17 = v15 + 1;
        else
          v17 = v16;
        if (v16 >= 0x7FFFFFFFFFFFFFFELL)
          v18 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v18 = v17;
        if (v18)
        {
          if (v18 < 0)
            goto LABEL_74;
          v19 = operator new(2 * v18);
        }
        else
        {
          v19 = 0;
        }
        v43 = &v19[2 * v15];
        v44 = &v19[2 * v18];
        *v43 = v10;
        v9 = v43 + 1;
        if (v12 != v13)
        {
          v45 = v12 - v13 - 2;
          if (v45 < 0x1E)
            goto LABEL_77;
          if (v12 - v19 - (v14 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
            goto LABEL_77;
          v46 = (v45 >> 1) + 1;
          v47 = &v19[2 * v15 - 16];
          v48 = v12 - 16;
          v49 = v46 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v50 = *(_OWORD *)v48;
            *(v47 - 1) = *((_OWORD *)v48 - 1);
            *v47 = v50;
            v47 -= 2;
            v48 -= 32;
            v49 -= 16;
          }
          while (v49);
          v43 -= v46 & 0xFFFFFFFFFFFFFFF0;
          v12 -= 2 * (v46 & 0xFFFFFFFFFFFFFFF0);
          if (v46 != (v46 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_77:
            do
            {
              v51 = *((_WORD *)v12 - 1);
              v12 -= 2;
              *--v43 = v51;
            }
            while (v12 != v13);
LABEL_68:
            v13 = *(char **)(a1 + 112);
            goto LABEL_70;
          }
          goto LABEL_70;
        }
        goto LABEL_69;
      }
    }
    else if ((unint64_t)v12 >= v11)
    {
      v13 = *(char **)(a1 + 112);
      v37 = v12 - v13;
      if (v12 - v13 <= -3)
        goto LABEL_73;
      v38 = v37 >> 1;
      v39 = v11 - (_QWORD)v13;
      if (v39 <= (v37 >> 1) + 1)
        v40 = v38 + 1;
      else
        v40 = v39;
      if (v39 >= 0x7FFFFFFFFFFFFFFELL)
        v41 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v41 = v40;
      if (v41)
      {
        if (v41 < 0)
          goto LABEL_74;
        v42 = operator new(2 * v41);
      }
      else
      {
        v42 = 0;
      }
      v43 = &v42[2 * v38];
      v44 = &v42[2 * v41];
      *v43 = v10;
      v9 = v43 + 1;
      if (v12 != v13)
      {
        v52 = v12 - v13 - 2;
        if (v52 < 0x1E)
          goto LABEL_78;
        if (v12 - v42 - (v37 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
          goto LABEL_78;
        v53 = (v52 >> 1) + 1;
        v54 = &v42[2 * v38 - 16];
        v55 = v12 - 16;
        v56 = v53 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v57 = *(_OWORD *)v55;
          *(v54 - 1) = *((_OWORD *)v55 - 1);
          *v54 = v57;
          v54 -= 2;
          v55 -= 32;
          v56 -= 16;
        }
        while (v56);
        v43 -= v53 & 0xFFFFFFFFFFFFFFF0;
        v12 -= 2 * (v53 & 0xFFFFFFFFFFFFFFF0);
        if (v53 != (v53 & 0xFFFFFFFFFFFFFFF0))
        {
LABEL_78:
          do
          {
            v58 = *((_WORD *)v12 - 1);
            v12 -= 2;
            *--v43 = v58;
          }
          while (v12 != v13);
          goto LABEL_68;
        }
LABEL_70:
        *(_QWORD *)(a1 + 112) = v43;
        *(_QWORD *)(a1 + 120) = v9;
        *(_QWORD *)(a1 + 128) = v44;
        if (v13)
          operator delete(v13);
        goto LABEL_72;
      }
LABEL_69:
      v13 = v12;
      goto LABEL_70;
    }
    *(_WORD *)v12 = v10;
    v9 = v12 + 2;
    goto LABEL_72;
  }
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
  v6 = v5 | (unsigned __int16)((*(unsigned __int16 (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a3) << 8);
  v8 = *(char **)(a1 + 120);
  v7 = *(_QWORD *)(a1 + 128);
  if ((unint64_t)v8 < v7)
  {
    *(_WORD *)v8 = v6;
    v9 = v8 + 2;
LABEL_72:
    *(_QWORD *)(a1 + 120) = v9;
    return;
  }
  v20 = *(char **)(a1 + 112);
  v21 = v8 - v20;
  if (v8 - v20 <= -3)
LABEL_73:
    abort();
  v22 = v21 >> 1;
  v23 = v7 - (_QWORD)v20;
  if (v23 <= (v21 >> 1) + 1)
    v24 = v22 + 1;
  else
    v24 = v23;
  if (v23 >= 0x7FFFFFFFFFFFFFFELL)
    v25 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v25 = v24;
  if (!v25)
  {
    v26 = 0;
    goto LABEL_29;
  }
  if (v25 < 0)
LABEL_74:
    sub_23938C4B8();
  v26 = operator new(2 * v25);
LABEL_29:
  v27 = &v26[2 * v22];
  v28 = &v26[2 * v25];
  *v27 = v6;
  v29 = v27 + 1;
  if (v8 == v20)
  {
    v20 = v8;
  }
  else
  {
    v30 = v8 - v20 - 2;
    if (v30 < 0x1E)
      goto LABEL_79;
    if (v8 - v26 - (v21 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
      goto LABEL_79;
    v31 = (v30 >> 1) + 1;
    v32 = &v26[2 * v22 - 16];
    v33 = v8 - 16;
    v34 = v31 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v35 = *(_OWORD *)v33;
      *(v32 - 1) = *((_OWORD *)v33 - 1);
      *v32 = v35;
      v32 -= 2;
      v33 -= 32;
      v34 -= 16;
    }
    while (v34);
    v27 -= v31 & 0xFFFFFFFFFFFFFFF0;
    v8 -= 2 * (v31 & 0xFFFFFFFFFFFFFFF0);
    if (v31 != (v31 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_79:
      do
      {
        v36 = *((_WORD *)v8 - 1);
        v8 -= 2;
        *--v27 = v36;
      }
      while (v8 != v20);
      v20 = *(char **)(a1 + 112);
    }
  }
  *(_QWORD *)(a1 + 112) = v27;
  *(_QWORD *)(a1 + 120) = v29;
  *(_QWORD *)(a1 + 128) = v28;
  if (v20)
    operator delete(v20);
  *(_QWORD *)(a1 + 120) = v29;
}

void sub_2393CC15C(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  unint64_t v4;
  char *v6;
  _BYTE *p_p;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  __int128 *v13;
  _OWORD *v14;
  unint64_t v15;
  __int128 v16;
  char v17;
  unint64_t v18;
  char *v19;
  void *__p;
  unint64_t v21;
  int64_t v22;

  v4 = a4 - a3;
  if ((unint64_t)(a4 - a3) >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v6 = a3;
  if (v4 <= 0x16)
  {
    HIBYTE(v22) = (_BYTE)a4 - (_BYTE)a3;
    p_p = &__p;
    if (a3 == a4)
      goto LABEL_18;
LABEL_8:
    if (v4 < 0x20 || (unint64_t)(p_p - v6) < 0x20)
    {
      v12 = p_p;
    }
    else
    {
      v11 = v4 & 0xFFFFFFFFFFFFFFE0;
      v12 = &p_p[v4 & 0xFFFFFFFFFFFFFFE0];
      v13 = (__int128 *)(v6 + 16);
      v14 = p_p + 16;
      v15 = v4 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v16 = *v13;
        *(v14 - 1) = *(v13 - 1);
        *v14 = v16;
        v13 += 2;
        v14 += 2;
        v15 -= 32;
      }
      while (v15);
      if (v4 == v11)
      {
        p_p += v4 & 0xFFFFFFFFFFFFFFE0;
        goto LABEL_18;
      }
      v6 += v11;
    }
    p_p = v12;
    do
    {
      v17 = *v6++;
      *p_p++ = v17;
    }
    while (v6 != a4);
    goto LABEL_18;
  }
  v9 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v4 | 7) != 0x17)
    v9 = v4 | 7;
  v10 = v9 + 1;
  p_p = operator new(v9 + 1);
  v21 = v4;
  v22 = v10 | 0x8000000000000000;
  __p = p_p;
  if (v6 != a4)
    goto LABEL_8;
LABEL_18:
  *p_p = 0;
  v18 = HIBYTE(v22);
  if (v22 >= 0)
    v19 = (char *)&__p;
  else
    v19 = (char *)__p;
  if (v22 < 0)
    v18 = v21;
  (*(void (**)(_QWORD, char *, char *))(**(_QWORD **)(a2 + 16) + 32))(*(_QWORD *)(a2 + 16), v19, &v19[v18]);
  if (SHIBYTE(v22) < 0)
    operator delete(__p);
}

char *sub_2393CC2B8(void **a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;
  void **v12;
  void **v13;
  __int128 v14;
  __int128 v15;
  void **v16;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4);
  v3 = v2 + 1;
  if (v2 + 1 > 0x555555555555555)
    abort();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) > v3)
    v3 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v6 = 0x555555555555555;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0x555555555555555)
      sub_23938C4B8();
    v7 = (char *)operator new(48 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[48 * v2];
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  v9 = &v7[48 * v6];
  v10 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)(v8 + 24) = v10;
  *((_QWORD *)v8 + 5) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v11 = v8 + 48;
  v12 = (void **)*a1;
  v13 = (void **)a1[1];
  if (v13 != *a1)
  {
    do
    {
      v14 = *((_OWORD *)v13 - 3);
      *((_QWORD *)v8 - 4) = *(v13 - 4);
      *((_OWORD *)v8 - 3) = v14;
      *(v13 - 5) = 0;
      *(v13 - 4) = 0;
      *(v13 - 6) = 0;
      v15 = *(_OWORD *)(v13 - 3);
      *((_QWORD *)v8 - 1) = *(v13 - 1);
      *(_OWORD *)(v8 - 24) = v15;
      v8 -= 48;
      *(v13 - 2) = 0;
      *(v13 - 1) = 0;
      *(v13 - 3) = 0;
      v13 -= 6;
    }
    while (v13 != v12);
    v13 = (void **)*a1;
    v16 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v11;
    a1[2] = v9;
    while (1)
    {
      if (v16 == v13)
        goto LABEL_22;
      if (*((char *)v16 - 1) < 0)
      {
        operator delete(*(v16 - 3));
        if ((*((char *)v16 - 25) & 0x80000000) == 0)
          goto LABEL_14;
      }
      else if ((*((char *)v16 - 25) & 0x80000000) == 0)
      {
        goto LABEL_14;
      }
      operator delete(*(v16 - 6));
LABEL_14:
      v16 -= 6;
    }
  }
  *a1 = v8;
  a1[1] = v11;
  a1[2] = v9;
LABEL_22:
  if (v13)
    operator delete(v13);
  return v11;
}

uint64_t sub_2393CC450(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_DWORD *)(a1 + 24);
  if ((v4 & 1) != 0)
  {
    v8 = operator new();
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    *(_QWORD *)v8 = &off_250AD6430;
    *(_QWORD *)(v8 + 8) = v9;
    std::locale::locale((std::locale *)(v8 + 16), (const std::locale *)a1);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)(a1 + 8);
    result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), a2);
    *(_BYTE *)(v8 + 40) = result;
LABEL_6:
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v8;
    goto LABEL_7;
  }
  if ((v4 & 8) != 0)
  {
    v8 = operator new();
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    *(_QWORD *)v8 = &off_250AD6460;
    *(_QWORD *)(v8 + 8) = v10;
    result = (uint64_t)std::locale::locale((std::locale *)(v8 + 16), (const std::locale *)a1);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)(a1 + 8);
    *(_BYTE *)(v8 + 40) = a2;
    goto LABEL_6;
  }
  result = operator new();
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(v6 + 8);
  *(_QWORD *)result = &off_250AD6490;
  *(_QWORD *)(result + 8) = v7;
  *(_BYTE *)(result + 16) = a2;
  *(_QWORD *)(v6 + 8) = result;
LABEL_7:
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  return result;
}

_QWORD *sub_2393CC570(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_250AD6310;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_2393CC5B0(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_250AD6310;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x23B83C4BCLL);
}

uint64_t sub_2393CC600(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  return result;
}

std::locale *sub_2393CC648(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_250AD6460;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_250AD6310;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void sub_2393CC698(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_250AD6460;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_250AD6310;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x23B83C4BCLL);
}

uint64_t sub_2393CC6F8(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  return result;
}

std::locale *sub_2393CC740(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_250AD6430;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_250AD6310;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void sub_2393CC790(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_250AD6430;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_250AD6310;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x23B83C4BCLL);
}

uint64_t sub_2393CC7F0(uint64_t result, uint64_t a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (v4 = result,
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(result + 24) + 40))(*(_QWORD *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(_QWORD *)(a2 + 16);
    v5 = *(_QWORD *)(v4 + 8);
  }
  *(_QWORD *)(a2 + 80) = v5;
  return result;
}

unsigned __int8 *sub_2393CC868(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, std::string *this)
{
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned __int8 v10;
  char v11;
  unsigned __int8 v12;
  char v13;
  uint64_t v15;

  v4 = a2;
  if (a2 != a3)
  {
    switch(*a2)
    {
      case '0':
        if (this)
        {
          std::string::operator=(this, 0);
          return ++v4;
        }
        v6 = 0;
        goto LABEL_54;
      case 'c':
        if (a2 + 1 == a3 || ((a2[1] & 0xDF) - 65) > 0x19u)
          goto LABEL_57;
        v7 = a2[1] & 0x1F;
        if (this)
          std::string::operator=(this, v7);
        else
          sub_2393CC450(a1, v7);
        v4 += 2;
        return v4;
      case 'f':
        if (this)
        {
          std::string::operator=(this, 12);
          return ++v4;
        }
        v6 = 12;
        goto LABEL_54;
      case 'n':
        if (this)
        {
          std::string::operator=(this, 10);
          return ++v4;
        }
        v6 = 10;
        goto LABEL_54;
      case 'r':
        if (this)
        {
          std::string::operator=(this, 13);
          return ++v4;
        }
        v6 = 13;
        goto LABEL_54;
      case 't':
        if (this)
        {
          std::string::operator=(this, 9);
          return ++v4;
        }
        v6 = 9;
        goto LABEL_54;
      case 'u':
        if (a2 + 1 != a3)
        {
          v8 = a2[1];
          if ((v8 & 0xF8) == 0x30 || (v8 & 0xFE) == 0x38 || (v8 | 0x20u) - 97 < 6)
          {
            v4 = a2 + 2;
            if (a2 + 2 != a3)
            {
              v9 = *v4;
              if ((v9 & 0xF8) == 0x30 || (v9 & 0xFE) == 0x38 || (v9 | 0x20u) - 97 < 6)
                goto LABEL_31;
            }
          }
        }
        goto LABEL_57;
      case 'v':
        if (this)
        {
          std::string::operator=(this, 11);
        }
        else
        {
          v6 = 11;
LABEL_54:
          sub_2393CC450(a1, v6);
        }
        return ++v4;
      case 'x':
LABEL_31:
        if (v4 + 1 == a3)
          goto LABEL_57;
        v10 = v4[1];
        v11 = -48;
        if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38)
          goto LABEL_36;
        v10 |= 0x20u;
        if ((v10 - 97) >= 6u)
          goto LABEL_57;
        v11 = -87;
LABEL_36:
        if (v4 + 2 == a3)
          goto LABEL_57;
        v12 = v4[2];
        v13 = -48;
        if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38)
          goto LABEL_41;
        v12 |= 0x20u;
        if ((v12 - 97) >= 6u)
        {
LABEL_57:
          v15 = sub_2393C78AC();
          return (unsigned __int8 *)sub_2393CCB14(v15);
        }
        v13 = -87;
LABEL_41:
        if (this)
          std::string::operator=(this, v13 + v12 + 16 * (v11 + v10));
        else
          sub_2393CC450(a1, (char)(v13 + v12 + 16 * (v11 + v10)));
        v4 += 3;
        break;
      default:
        v5 = *a2;
        if ((_DWORD)v5 == 95
          || (v5 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16) + 4 * v5) & 0x500) != 0)
        {
          goto LABEL_57;
        }
        v6 = (char)v5;
        if (!this)
          goto LABEL_54;
        std::string::operator=(this, v5);
        return ++v4;
    }
  }
  return v4;
}

void sub_2393CCB18(std::locale *a1)
{
  sub_2393CD760(a1);
  JUMPOUT(0x23B83C4BCLL);
}

void sub_2393CCB3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  unsigned __int8 v6;
  __int16 v7;
  __int16 v8;
  std::string::size_type size;
  int v10;
  uint64_t v11;
  int v12;
  std::string::size_type v13;
  std::string *p_s;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::string::size_type v24;
  std::string *v25;
  uint64_t v26;
  unsigned __int8 *v27;
  BOOL v28;
  int v29;
  size_t v30;
  char *v31;
  size_t v32;
  int v33;
  _BOOL4 v34;
  int v35;
  size_t v36;
  char *v37;
  size_t v38;
  int v39;
  BOOL v40;
  int v41;
  int v42;
  std::string::size_type v43;
  unsigned __int8 v44;
  unsigned __int8 *v45;
  unint64_t v46;
  int v47;
  unsigned int v48;
  int v49;
  void *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  std::string::size_type v59;
  std::string *v60;
  uint64_t v61;
  unsigned __int8 *v62;
  BOOL v63;
  int v64;
  size_t v65;
  char *v66;
  size_t v67;
  int v68;
  _BOOL4 v69;
  int v70;
  size_t v71;
  char *v72;
  size_t v73;
  int v74;
  BOOL v75;
  std::string::size_type v76;
  std::string *v77;
  std::string::size_type v78;
  std::string *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  __int128 v85;
  std::string::size_type v86;
  uint64_t v87;
  BOOL v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  unsigned __int8 *v93;
  std::string *v94;
  uint64_t v95;
  unsigned int v96;
  int v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  unint64_t v103;
  std::string::size_type v104;
  std::string::size_type v105;
  uint64_t v106;
  uint64_t v107;
  BOOL v108;
  unsigned __int8 *v109;
  uint64_t v110;
  int v111;
  std::string *v112;
  uint64_t v113;
  uint64_t v114;
  const void *v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  unint64_t v119;
  const void *v120;
  int v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  int v132;
  int v133;
  char v134;
  char v135;
  uint64_t v136;
  int v137;
  unsigned __int8 v138;
  uint64_t v139;
  unint64_t v140;
  unsigned __int8 v141;
  __int16 v142;
  int v143;
  int v144;
  char v145;
  uint64_t v146;
  uint64_t v147;
  char v148;
  std::string __p;
  std::string v150;
  std::string __s;

  v2 = a2;
  v4 = *(unsigned __int8 **)(a2 + 16);
  v5 = *(unsigned __int8 **)(a2 + 24);
  if (v4 == v5)
  {
    v11 = 0;
    v12 = *(unsigned __int8 *)(a1 + 168);
    goto LABEL_210;
  }
  if (!*(_BYTE *)(a1 + 171) || v4 + 1 == v5)
    goto LABEL_67;
  v6 = *v4;
  v7 = v4[1];
  if (*(_BYTE *)(a1 + 169))
  {
    v6 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), (char)v6);
    v7 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), (char)v7);
  }
  *((_BYTE *)&__s.__r_.__value_.__s + 23) = 2;
  v8 = v6 | (unsigned __int16)(v7 << 8);
  LOWORD(__s.__r_.__value_.__l.__data_) = v8;
  __s.__r_.__value_.__s.__data_[2] = 0;
  std::__get_collation_name(&v150, (const char *)&__s);
  __p = v150;
  size = HIBYTE(v150.__r_.__value_.__r.__words[2]);
  v10 = SHIBYTE(v150.__r_.__value_.__r.__words[2]);
  if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v150.__r_.__value_.__l.__size_;
  if (size)
    goto LABEL_9;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    v13 = __s.__r_.__value_.__l.__size_;
    if (__s.__r_.__value_.__l.__size_ >= 3)
      goto LABEL_9;
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    v13 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
      goto LABEL_15;
    p_s = &__s;
  }
  (*(void (**)(std::string *__return_ptr, _QWORD, std::string *, char *))(**(_QWORD **)(a1 + 32) + 32))(&v150, *(_QWORD *)(a1 + 32), p_s, (char *)p_s + v13);
  if (v10 < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = v150;
  if ((SHIBYTE(v150.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (HIBYTE(v150.__r_.__value_.__r.__words[2]) != 12 && HIBYTE(v150.__r_.__value_.__r.__words[2]) != 1)
    {
      __p.__r_.__value_.__s.__data_[0] = 0;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_155;
  }
  if (__p.__r_.__value_.__l.__size_ == 1 || __p.__r_.__value_.__l.__size_ == 12)
  {
LABEL_155:
    std::string::operator=(&__p, &__s);
    goto LABEL_9;
  }
  *__p.__r_.__value_.__l.__data_ = 0;
  __p.__r_.__value_.__l.__size_ = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
LABEL_15:
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
      goto LABEL_17;
LABEL_67:
    v41 = 0;
    v11 = 1;
    goto LABEL_68;
  }
  v43 = __p.__r_.__value_.__l.__size_;
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v43)
    goto LABEL_67;
LABEL_17:
  v15 = *(_QWORD *)(a1 + 112);
  v16 = *(_QWORD *)(a1 + 120) - v15;
  if (v16)
  {
    v17 = v16 >> 1;
    if (v17 <= 1)
      v17 = 1;
    v18 = (unsigned __int8 *)(v15 + 1);
    while (*(v18 - 1) != v6 || *v18 != v7)
    {
      v18 += 2;
      if (!--v17)
        goto LABEL_25;
    }
LABEL_291:
    v12 = 1;
    v11 = 2;
    goto LABEL_210;
  }
LABEL_25:
  if (!*(_BYTE *)(a1 + 170) || *(_QWORD *)(a1 + 88) == *(_QWORD *)(a1 + 96))
  {
    v41 = 0;
    goto LABEL_162;
  }
  *((_BYTE *)&__s.__r_.__value_.__s + 23) = 2;
  __s.__r_.__value_.__s.__data_[0] = v6;
  __s.__r_.__value_.__s.__data_[1] = v7;
  __s.__r_.__value_.__s.__data_[2] = 0;
  (*(void (**)(std::string *__return_ptr, _QWORD, std::string *, std::string::value_type *))(**(_QWORD **)(a1 + 32) + 32))(&v150, *(_QWORD *)(a1 + 32), &__s, &__s.__r_.__value_.__s.__data_[2]);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  v19 = *(_QWORD *)(a1 + 88);
  v20 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
  v21 = *(_QWORD *)(a1 + 96) - v19;
  if (v21)
  {
    v142 = v6 | (unsigned __int16)(v7 << 8);
    v134 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
    v138 = v6;
    v145 = v7;
    v22 = 0;
    v23 = v21 / 48;
    if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v24 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
    else
      v24 = v150.__r_.__value_.__l.__size_;
    if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v25 = &v150;
    else
      v25 = (std::string *)v150.__r_.__value_.__r.__words[0];
    if (v23 <= 1)
      v26 = 1;
    else
      v26 = v21 / 48;
    v27 = (unsigned __int8 *)(v19 + 47);
    v28 = 1;
    do
    {
      v29 = (char)*(v27 - 24);
      if (v29 >= 0)
        v30 = *(v27 - 24);
      else
        v30 = *(_QWORD *)(v27 - 39);
      if (v29 >= 0)
        v31 = (char *)(v27 - 47);
      else
        v31 = *(char **)(v27 - 47);
      if (v30 >= v24)
        v32 = v24;
      else
        v32 = v30;
      v33 = memcmp(v25, v31, v32);
      v34 = v24 >= v30;
      if (v33)
        v34 = v33 >= 0;
      if (v34)
      {
        v35 = (char)*v27;
        if (v35 >= 0)
          v36 = *v27;
        else
          v36 = *(_QWORD *)(v27 - 15);
        if (v35 >= 0)
          v37 = (char *)(v27 - 23);
        else
          v37 = *(char **)(v27 - 23);
        if (v24 >= v36)
          v38 = v36;
        else
          v38 = v24;
        v39 = memcmp(v37, v25, v38);
        v40 = v36 >= v24;
        if (v39)
          v40 = v39 >= 0;
        if (v40)
        {
          v41 = 1;
          v42 = 5;
          goto LABEL_157;
        }
      }
      v28 = ++v22 < v23;
      v27 += 48;
    }
    while (v26 != v22);
    v42 = 0;
    v41 = 0;
LABEL_157:
    LOBYTE(v7) = v145;
    v20 = v134;
    v6 = v138;
    v8 = v142;
  }
  else
  {
    v28 = 0;
    v42 = 0;
    v41 = 0;
  }
  if (v20 < 0)
    operator delete(v150.__r_.__value_.__l.__data_);
  if (!v28)
  {
LABEL_162:
    if (*(_QWORD *)(a1 + 136) == *(_QWORD *)(a1 + 144))
      goto LABEL_272;
    *((_BYTE *)&__s.__r_.__value_.__s + 23) = 2;
    LOWORD(__s.__r_.__value_.__l.__data_) = v8;
    __s.__r_.__value_.__s.__data_[2] = 0;
    (*(void (**)(std::string *__return_ptr, _QWORD, std::string *, std::string::value_type *))(**(_QWORD **)(a1 + 32) + 32))(&v150, *(_QWORD *)(a1 + 32), &__s, &__s.__r_.__value_.__s.__data_[2]);
    v78 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
    if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v78 = v150.__r_.__value_.__l.__size_;
    if (v78 != 1)
    {
      if (v78 == 12)
      {
        v79 = &v150;
        if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v79 = (std::string *)v150.__r_.__value_.__r.__words[0];
        v79->__r_.__value_.__s.__data_[11] = v79->__r_.__value_.__s.__data_[3];
      }
      else if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
      {
        *v150.__r_.__value_.__l.__data_ = 0;
        v150.__r_.__value_.__l.__size_ = 0;
      }
      else
      {
        v150.__r_.__value_.__s.__data_[0] = 0;
        *((_BYTE *)&v150.__r_.__value_.__s + 23) = 0;
      }
    }
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s.__r_.__value_.__l.__data_);
    v100 = *(_QWORD *)(a1 + 136);
    v101 = SHIBYTE(v150.__r_.__value_.__r.__words[2]);
    v102 = *(_QWORD *)(a1 + 144) - v100;
    if (v102)
    {
      v103 = v102 / 24;
      v104 = v150.__r_.__value_.__l.__size_;
      if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v105 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
      else
        v105 = v150.__r_.__value_.__l.__size_;
      if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
      {
        v137 = SHIBYTE(v150.__r_.__value_.__r.__words[2]);
        v141 = v6;
        v148 = v7;
        v144 = v41;
        v114 = 0;
        v115 = (const void *)v150.__r_.__value_.__r.__words[0];
        if (v103 <= 1)
          v116 = 1;
        else
          v116 = v102 / 24;
        v108 = 1;
        do
        {
          v117 = *(unsigned __int8 *)(v100 + 23);
          v118 = (char)v117;
          if ((v117 & 0x80u) != 0)
            v117 = *(_QWORD *)(v100 + 8);
          if (v105 == v117)
          {
            v119 = v103;
            v120 = v118 >= 0 ? (const void *)v100 : *(const void **)v100;
            v121 = memcmp(v115, v120, v104);
            v103 = v119;
            if (!v121)
            {
              v41 = 1;
              v42 = 5;
              goto LABEL_253;
            }
          }
          v108 = ++v114 < v103;
          v100 += 24;
        }
        while (v116 != v114);
        v42 = 0;
        v41 = v144;
LABEL_253:
        LOBYTE(v7) = v148;
        v101 = v137;
        v6 = v141;
LABEL_267:
        if (v101 < 0)
          operator delete(v150.__r_.__value_.__l.__data_);
        if (v108)
          goto LABEL_270;
LABEL_272:
        if ((v6 & 0x80) != 0)
        {
          v133 = *(_DWORD *)(a1 + 164);
        }
        else
        {
          v130 = *(_DWORD *)(a1 + 160);
          v131 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16);
          v132 = *(_DWORD *)(v131 + 4 * v6);
          if (((v132 & v130) != 0 || v6 == 95 && (v130 & 0x80) != 0)
            && (v7 & 0x80) == 0
            && ((*(_DWORD *)(v131 + 4 * v7) & v130) != 0
             || (v130 & 0x80) != 0 && v7 == 95))
          {
            goto LABEL_291;
          }
          v133 = *(_DWORD *)(a1 + 164);
          if ((v132 & v133) != 0 || v6 == 95 && (v133 & 0x80) != 0)
            goto LABEL_289;
        }
        if ((v7 & 0x80) != 0)
          goto LABEL_291;
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 4 * v7) & v133) == 0)
        {
          v12 = 1;
          if (v7 != 95 || (v133 & 0x80) == 0)
          {
LABEL_290:
            v11 = 2;
            goto LABEL_210;
          }
        }
LABEL_289:
        v12 = v41;
        goto LABEL_290;
      }
      if (*((_BYTE *)&v150.__r_.__value_.__s + 23))
      {
        v106 = 0;
        if (v103 <= 1)
          v107 = 1;
        else
          v107 = v102 / 24;
        v108 = 1;
        do
        {
          v109 = (unsigned __int8 *)(v100 + 24 * v106);
          v110 = v109[23];
          v111 = (char)v110;
          if ((v110 & 0x80u) != 0)
            v110 = *((_QWORD *)v109 + 1);
          if (v105 == v110)
          {
            if (v111 < 0)
              v109 = *(unsigned __int8 **)v109;
            v112 = &v150;
            v113 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
            while (v112->__r_.__value_.__s.__data_[0] == *v109)
            {
              v112 = (std::string *)((char *)v112 + 1);
              ++v109;
              if (!--v113)
                goto LABEL_238;
            }
          }
          v108 = ++v106 < v103;
        }
        while (v106 != v107);
      }
      else
      {
        v122 = *(unsigned __int8 *)(v100 + 23);
        if ((v122 & 0x80u) != 0)
          v122 = *(_QWORD *)(v100 + 8);
        if (v122 == HIBYTE(v150.__r_.__value_.__r.__words[2]))
          goto LABEL_291;
        v123 = 0;
        if (v103 <= 1)
          v124 = 1;
        else
          v124 = v103;
        v125 = v124 - 1;
        v126 = (uint64_t *)(v100 + 32);
        while (v125 != v123)
        {
          ++v123;
          v127 = *((unsigned __int8 *)v126 + 15);
          v129 = *v126;
          v126 += 3;
          v128 = v129;
          if ((v127 & 0x80u) != 0)
            v127 = v128;
          if (v105 == v127)
          {
            v108 = v123 < v103;
LABEL_238:
            v41 = 1;
            v42 = 5;
            goto LABEL_267;
          }
        }
      }
    }
    v108 = 0;
    v42 = 0;
    goto LABEL_267;
  }
LABEL_270:
  if (v42)
    goto LABEL_289;
  v11 = 2;
LABEL_68:
  v44 = **(_BYTE **)(v2 + 16);
  if (*(_BYTE *)(a1 + 169))
    v44 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), (char)v44);
  v45 = *(unsigned __int8 **)(a1 + 40);
  v46 = *(_QWORD *)(a1 + 48) - (_QWORD)v45;
  if (v46)
  {
    if (v46 <= 1)
      v46 = 1;
    while (1)
    {
      v47 = *v45++;
      if (v47 == v44)
        break;
      if (!--v46)
        goto LABEL_75;
    }
LABEL_208:
    v41 = 1;
    goto LABEL_209;
  }
LABEL_75:
  v48 = *(_DWORD *)(a1 + 164);
  if (v48 || *(_QWORD *)(a1 + 64) != *(_QWORD *)(a1 + 72))
  {
    if ((v44 & 0x80) != 0 || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 4 * v44) & v48) == 0)
      v49 = (v44 == 95) & (v48 >> 7);
    else
      LOBYTE(v49) = 1;
    v50 = *(void **)(a1 + 72);
    v51 = memchr(*(void **)(a1 + 64), (char)v44, (size_t)v50 - *(_QWORD *)(a1 + 64));
    v52 = v51 ? v51 : v50;
    if ((v49 & 1) == 0 && v52 == v50)
      goto LABEL_208;
  }
  v53 = *(_QWORD *)(a1 + 88);
  v54 = *(_QWORD *)(a1 + 96);
  if (v53 != v54)
  {
    v143 = v41;
    if (*(_BYTE *)(a1 + 170))
    {
      *((_BYTE *)&__s.__r_.__value_.__s + 23) = 1;
      LOWORD(__s.__r_.__value_.__l.__data_) = v44;
      (*(void (**)(std::string *__return_ptr, _QWORD, std::string *, std::string::value_type *))(**(_QWORD **)(a1 + 32) + 32))(&v150, *(_QWORD *)(a1 + 32), &__s, &__s.__r_.__value_.__s.__data_[1]);
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s.__r_.__value_.__l.__data_);
      v53 = *(_QWORD *)(a1 + 88);
      v55 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
      v56 = *(_QWORD *)(a1 + 96) - v53;
      if (v56)
        goto LABEL_91;
    }
    else
    {
      v55 = 1;
      *((_BYTE *)&v150.__r_.__value_.__s + 23) = 1;
      LOWORD(v150.__r_.__value_.__l.__data_) = v44;
      v56 = v54 - v53;
      if (v56)
      {
LABEL_91:
        v146 = v11;
        v139 = v2;
        v57 = 0;
        v58 = v56 / 48;
        v135 = v55;
        if ((v55 & 0x80u) == 0)
          v59 = v55;
        else
          v59 = v150.__r_.__value_.__l.__size_;
        if ((v55 & 0x80u) == 0)
          v60 = &v150;
        else
          v60 = (std::string *)v150.__r_.__value_.__r.__words[0];
        if (v58 <= 1)
          v61 = 1;
        else
          v61 = v56 / 48;
        v62 = (unsigned __int8 *)(v53 + 47);
        v63 = 1;
        do
        {
          v64 = (char)*(v62 - 24);
          if (v64 >= 0)
            v65 = *(v62 - 24);
          else
            v65 = *(_QWORD *)(v62 - 39);
          if (v64 >= 0)
            v66 = (char *)(v62 - 47);
          else
            v66 = *(char **)(v62 - 47);
          if (v65 >= v59)
            v67 = v59;
          else
            v67 = v65;
          v68 = memcmp(v60, v66, v67);
          v69 = v59 >= v65;
          if (v68)
            v69 = v68 >= 0;
          if (v69)
          {
            v70 = (char)*v62;
            if (v70 >= 0)
              v71 = *v62;
            else
              v71 = *(_QWORD *)(v62 - 15);
            if (v70 >= 0)
              v72 = (char *)(v62 - 23);
            else
              v72 = *(char **)(v62 - 23);
            if (v59 >= v71)
              v73 = v71;
            else
              v73 = v59;
            v74 = memcmp(v72, v60, v73);
            v75 = v71 >= v59;
            if (v74)
              v75 = v74 >= 0;
            if (v75)
            {
              v41 = 1;
              v2 = v139;
              goto LABEL_129;
            }
          }
          v63 = ++v57 < v58;
          v62 += 48;
        }
        while (v61 != v57);
        v2 = v139;
        v41 = v143;
LABEL_129:
        v11 = v146;
        if ((v135 & 0x80) == 0)
          goto LABEL_131;
        goto LABEL_130;
      }
    }
    v63 = 0;
    if ((v55 & 0x80) == 0)
    {
LABEL_131:
      if (v63)
        goto LABEL_209;
      goto LABEL_132;
    }
LABEL_130:
    operator delete(v150.__r_.__value_.__l.__data_);
    goto LABEL_131;
  }
LABEL_132:
  if (*(_QWORD *)(a1 + 136) == *(_QWORD *)(a1 + 144))
    goto LABEL_203;
  *((_BYTE *)&__s.__r_.__value_.__s + 23) = 1;
  LOWORD(__s.__r_.__value_.__l.__data_) = v44;
  (*(void (**)(std::string *__return_ptr, _QWORD, std::string *, std::string::value_type *))(**(_QWORD **)(a1 + 32) + 32))(&v150, *(_QWORD *)(a1 + 32), &__s, &__s.__r_.__value_.__s.__data_[1]);
  v76 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
  if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v76 = v150.__r_.__value_.__l.__size_;
  if (v76 != 1)
  {
    if (v76 == 12)
    {
      v77 = &v150;
      if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v77 = (std::string *)v150.__r_.__value_.__r.__words[0];
      v77->__r_.__value_.__s.__data_[11] = v77->__r_.__value_.__s.__data_[3];
    }
    else if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
    {
      *v150.__r_.__value_.__l.__data_ = 0;
      v150.__r_.__value_.__l.__size_ = 0;
    }
    else
    {
      v150.__r_.__value_.__s.__data_[0] = 0;
      *((_BYTE *)&v150.__r_.__value_.__s + 23) = 0;
    }
  }
  v147 = v11;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  v80 = *(_QWORD *)(a1 + 136);
  v81 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
  v82 = *(_QWORD *)(a1 + 144) - v80;
  if (!v82)
  {
    if ((*((_BYTE *)&v150.__r_.__value_.__s + 23) & 0x80) != 0)
      operator delete(v150.__r_.__value_.__l.__data_);
    v11 = v147;
LABEL_203:
    if ((v44 & 0x80) != 0)
      goto LABEL_209;
    v96 = *(_DWORD *)(a1 + 160);
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 4 * v44) & v96) == 0)
    {
      v97 = (v96 >> 7) & 1;
      if (v44 != 95)
        v97 = 0;
      if (v97 != 1)
        goto LABEL_209;
    }
    goto LABEL_208;
  }
  v83 = 0;
  v84 = v82 / 24;
  v85 = *(_OWORD *)&v150.__r_.__value_.__l.__data_;
  if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v86 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
  else
    v86 = v150.__r_.__value_.__l.__size_;
  if (v84 <= 1)
    v87 = 1;
  else
    v87 = v82 / 24;
  v88 = 1;
  while (1)
  {
    v90 = v80 + 24 * v83;
    v91 = *(unsigned __int8 *)(v90 + 23);
    v92 = (char)v91;
    if ((v91 & 0x80u) != 0)
      v91 = *(_QWORD *)(v90 + 8);
    if (v86 != v91)
      goto LABEL_184;
    v93 = v92 >= 0 ? (unsigned __int8 *)(v80 + 24 * v83) : *(unsigned __int8 **)v90;
    if ((v81 & 0x80) == 0)
      break;
    v136 = v87;
    v140 = v84;
    v89 = memcmp((const void *)v85, v93, *((size_t *)&v85 + 1));
    v87 = v136;
    v84 = v140;
    if (!v89)
    {
      v41 = 1;
      v11 = v147;
      goto LABEL_197;
    }
LABEL_184:
    v88 = ++v83 < v84;
    if (v83 == v87)
    {
      v11 = v147;
      if ((v81 & 0x80) == 0)
      {
LABEL_198:
        if (!v88)
          goto LABEL_203;
        goto LABEL_209;
      }
LABEL_197:
      operator delete(v150.__r_.__value_.__l.__data_);
      goto LABEL_198;
    }
  }
  if ((_DWORD)v81)
  {
    v94 = &v150;
    v95 = v81;
    while (v94->__r_.__value_.__s.__data_[0] == *v93)
    {
      v94 = (std::string *)((char *)v94 + 1);
      ++v93;
      if (!--v95)
      {
        v41 = 1;
        v11 = v147;
        if ((v81 & 0x80) == 0)
          goto LABEL_198;
        goto LABEL_197;
      }
    }
    goto LABEL_184;
  }
  v41 = 1;
  v11 = v147;
  if (!v88)
    goto LABEL_203;
LABEL_209:
  v12 = v41;
LABEL_210:
  if (v12 == *(unsigned __int8 *)(a1 + 168))
  {
    v98 = 0;
    v99 = -993;
  }
  else
  {
    *(_QWORD *)(v2 + 16) += v11;
    v98 = *(_QWORD *)(a1 + 8);
    v99 = -995;
  }
  *(_DWORD *)v2 = v99;
  *(_QWORD *)(v2 + 80) = v98;
}

std::locale *sub_2393CD760(std::locale *a1)
{
  std::locale::__imp *locale;
  std::locale::__imp *v3;
  std::locale::__imp *v4;
  std::locale::__imp *v5;
  std::locale::__imp *v6;
  std::locale::__imp *v7;
  std::locale::__imp *v8;
  std::locale::__imp *v9;
  std::locale::__imp *v10;
  std::locale::__imp *v11;

  a1->__locale_ = (std::locale::__imp *)&off_250AD6550;
  locale = a1[17].__locale_;
  if (locale)
  {
    v3 = a1[18].__locale_;
    v4 = a1[17].__locale_;
    if (v3 != locale)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*((void **)v3 - 3));
        v3 = (std::locale::__imp *)((char *)v3 - 24);
      }
      while (v3 != locale);
      v4 = a1[17].__locale_;
    }
    a1[18].__locale_ = locale;
    operator delete(v4);
  }
  v5 = a1[14].__locale_;
  if (v5)
  {
    a1[15].__locale_ = v5;
    operator delete(v5);
  }
  v6 = a1[11].__locale_;
  if (v6)
  {
    v7 = a1[12].__locale_;
    v8 = a1[11].__locale_;
    if (v7 == v6)
    {
LABEL_21:
      a1[12].__locale_ = v6;
      operator delete(v8);
      goto LABEL_22;
    }
    while (1)
    {
      if (*((char *)v7 - 1) < 0)
      {
        operator delete(*((void **)v7 - 3));
        if (*((char *)v7 - 25) < 0)
LABEL_19:
          operator delete(*((void **)v7 - 6));
      }
      else if (*((char *)v7 - 25) < 0)
      {
        goto LABEL_19;
      }
      v7 = (std::locale::__imp *)((char *)v7 - 48);
      if (v7 == v6)
      {
        v8 = a1[11].__locale_;
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v9 = a1[8].__locale_;
  if (v9)
  {
    a1[9].__locale_ = v9;
    operator delete(v9);
  }
  v10 = a1[5].__locale_;
  if (v10)
  {
    a1[6].__locale_ = v10;
    operator delete(v10);
  }
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_250AD6310;
  v11 = a1[1].__locale_;
  if (v11)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v11 + 8))(v11);
  return a1;
}

_QWORD *sub_2393CD898(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_250AD6310;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_2393CD8D8(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_250AD6310;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x23B83C4BCLL);
}

uint64_t sub_2393CD928(uint64_t result, uint64_t a2)
{
  _BYTE *v2;

  v2 = *(_BYTE **)(a2 + 16);
  if (v2 == *(_BYTE **)(a2 + 24) || !*v2)
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  return result;
}

uint64_t sub_2393CD968(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v3;
  int v4;

  if ((a2 & 0xF8) != 0x30 && (a2 & 0xFE) != 0x38 || a2 - 49 > 8)
    return 0;
  if (a2 - 48 > *(_DWORD *)(a1 + 28))
  {
    v3 = sub_2393C78AC();
    return sub_2393CD9C8(v3, v4);
  }
  else
  {
    sub_2393CD9C8(a1, a2 - 48);
    return 1;
  }
}

uint64_t sub_2393CD9C8(uint64_t a1, int a2)
{
  int v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  std::locale *v8;
  std::locale *v9;
  std::locale::__imp *v10;
  uint64_t (**v11)();

  v4 = *(_DWORD *)(a1 + 24);
  if ((v4 & 1) != 0)
  {
    v8 = (std::locale *)operator new();
    v9 = v8;
    v10 = *(std::locale::__imp **)(*(_QWORD *)(a1 + 56) + 8);
    v11 = &off_250AD64C0;
LABEL_6:
    v8->__locale_ = (std::locale::__imp *)v11;
    v8[1].__locale_ = v10;
    result = (uint64_t)std::locale::locale(v8 + 2, (const std::locale *)a1);
    *(_OWORD *)&v9[3].__locale_ = *(_OWORD *)(a1 + 8);
    LODWORD(v9[5].__locale_) = a2;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v9;
    goto LABEL_7;
  }
  if ((v4 & 8) != 0)
  {
    v8 = (std::locale *)operator new();
    v9 = v8;
    v10 = *(std::locale::__imp **)(*(_QWORD *)(a1 + 56) + 8);
    v11 = &off_250AD64F0;
    goto LABEL_6;
  }
  result = operator new();
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(v6 + 8);
  *(_QWORD *)result = &off_250AD6520;
  *(_QWORD *)(result + 8) = v7;
  *(_DWORD *)(result + 16) = a2;
  *(_QWORD *)(v6 + 8) = result;
LABEL_7:
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  return result;
}

_QWORD *sub_2393CDABC(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_250AD6310;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_2393CDAFC(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_250AD6310;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x23B83C4BCLL);
}

uint64_t sub_2393CDB4C(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v5;
  uint64_t v6;
  uint64_t *v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(unsigned int *)(result + 16);
  v3 = *(_QWORD *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 40) - v3) >> 3) < v2)
  {
    v11 = sub_2393C78AC();
    return sub_2393CDC08(v11);
  }
  else
  {
    v5 = v2 - 1;
    if (*(_BYTE *)(v3 + 24 * v5 + 16)
      && (v6 = result,
          v7 = (uint64_t *)(v3 + 24 * v5),
          result = *v7,
          v8 = v7[1] - *v7,
          v9 = *(_QWORD *)(a2 + 16),
          *(_QWORD *)(a2 + 24) - v9 >= v8)
      && (result = memcmp((const void *)result, *(const void **)(a2 + 16), v8), !(_DWORD)result))
    {
      *(_DWORD *)a2 = -994;
      *(_QWORD *)(a2 + 16) = v9 + v8;
      v10 = *(_QWORD *)(v6 + 8);
    }
    else
    {
      v10 = 0;
      *(_DWORD *)a2 = -993;
    }
    *(_QWORD *)(a2 + 80) = v10;
  }
  return result;
}

std::locale *sub_2393CDC08(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_250AD64F0;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_250AD6310;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void sub_2393CDC58(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_250AD64F0;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_250AD6310;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x23B83C4BCLL);
}

uint64_t sub_2393CDCB8(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  int v12;

  v2 = *(_DWORD *)(result + 40) - 1;
  v3 = *(_QWORD *)(a2 + 32);
  if (!*(_BYTE *)(v3 + 24 * v2 + 16)
    || (v4 = (unsigned __int8 **)(v3 + 24 * v2),
        v5 = *v4,
        v6 = v4[1] - *v4,
        v7 = *(_QWORD *)(a2 + 16),
        *(_QWORD *)(a2 + 24) - v7 < v6))
  {
LABEL_3:
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    return result;
  }
  if (v6 >= 1)
  {
    v8 = v6;
    v9 = *(unsigned __int8 **)(a2 + 16);
    do
    {
      v11 = *v5++;
      v10 = v11;
      v12 = *v9++;
      if (v10 != v12)
        goto LABEL_3;
    }
    while (--v8);
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 16) = v7 + v6;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

std::locale *sub_2393CDD48(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_250AD64C0;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_250AD6310;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void sub_2393CDD98(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_250AD64C0;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_250AD6310;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x23B83C4BCLL);
}

uint64_t sub_2393CDDF8(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v3 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (*(_BYTE *)(v3 + 16))
  {
    v4 = *(_QWORD *)(v3 + 8) - *(_QWORD *)v3;
    v5 = *(_QWORD *)(a2 + 16);
    if (*(_QWORD *)(a2 + 24) - v5 >= v4)
    {
      v7 = result;
      if (v4 < 1)
      {
LABEL_9:
        *(_DWORD *)a2 = -994;
        *(_QWORD *)(a2 + 16) = v5 + v4;
        v6 = *(_QWORD *)(v7 + 8);
        goto LABEL_10;
      }
      v8 = 0;
      while (1)
      {
        v9 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), *(char *)(*(_QWORD *)v3 + v8));
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), *(char *)(*(_QWORD *)(a2 + 16) + v8));
        if (v9 != (_DWORD)result)
          break;
        if (v4 == ++v8)
        {
          v5 = *(_QWORD *)(a2 + 16);
          goto LABEL_9;
        }
      }
    }
  }
  v6 = 0;
  *(_DWORD *)a2 = -993;
LABEL_10:
  *(_QWORD *)(a2 + 80) = v6;
  return result;
}

unsigned __int8 *sub_2393CDEDC(uint64_t a1, char *a2, char *a3)
{
  int v6;
  char *v7;
  char *v8;
  int v9;
  unsigned __int8 *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  int v22;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  uint64_t v29;
  int v30;
  int v31;

  if (a2 != a3)
  {
    v7 = a2 + 1;
    v6 = *a2;
    if (a2 + 1 != a3 || v6 != 36)
    {
      if ((v6 - 46) > 0x2E || ((1 << (v6 - 46)) & 0x600000000001) == 0)
      {
        sub_2393CC450(a1, (char)v6);
        return (unsigned __int8 *)v7;
      }
      if (v7 == a3 || v6 != 92)
      {
        if (v6 == 46)
        {
          v17 = operator new();
          v18 = *(_QWORD *)(a1 + 56);
          v19 = *(_QWORD *)(v18 + 8);
          *(_QWORD *)v17 = &off_250AD66D0;
          *(_QWORD *)(v17 + 8) = v19;
LABEL_39:
          *(_QWORD *)(v18 + 8) = v17;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          return (unsigned __int8 *)v7;
        }
      }
      else
      {
        v16 = *v7;
        if ((v16 - 36) <= 0x3A && ((1 << (v16 - 36)) & 0x580000000000441) != 0)
        {
          sub_2393CC450(a1, (char)v16);
          return (unsigned __int8 *)(a2 + 2);
        }
      }
    }
  }
  v8 = sub_2393C8E8C(a1, a2, a3);
  v7 = v8;
  if (v8 != a2 || v8 == a3)
    return (unsigned __int8 *)v7;
  if (a2 + 1 == a3 || *a2 != 92)
    return (unsigned __int8 *)a2;
  v9 = a2[1];
  if (v9 == 40)
  {
    v10 = (unsigned __int8 *)(a2 + 2);
    if ((*(_BYTE *)(a1 + 24) & 2) != 0)
    {
      v12 = *(_DWORD *)(a1 + 28);
    }
    else
    {
      v11 = operator new();
      v12 = *(_DWORD *)(a1 + 28) + 1;
      *(_DWORD *)(a1 + 28) = v12;
      v13 = *(_QWORD *)(a1 + 56);
      v14 = *(_QWORD *)(v13 + 8);
      *(_QWORD *)v11 = &off_250AD6580;
      *(_QWORD *)(v11 + 8) = v14;
      *(_DWORD *)(v11 + 16) = v12;
      *(_QWORD *)(v13 + 8) = v11;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    do
    {
      if (v10 == (unsigned __int8 *)a3)
        goto LABEL_41;
      v20 = v10;
      v21 = *(_QWORD *)(a1 + 56);
      v22 = *(_DWORD *)(a1 + 28);
      v23 = (unsigned __int8 *)sub_2393CDEDC(a1, v20, a3);
      if (v23 == v20)
        break;
      v10 = sub_2393CE1B4(a1, v23, (unsigned __int8 *)a3, v21, v22 + 1, *(_DWORD *)(a1 + 28) + 1);
    }
    while (v10 != v20);
    if (v20 + 1 == (unsigned __int8 *)a3 || *v20 != 92 || v20[1] != 41)
    {
LABEL_41:
      sub_2393C78AC();
      goto LABEL_42;
    }
    v7 = (char *)&v20[2 * (v20[1] == 41)];
    if ((*(_BYTE *)(a1 + 24) & 2) != 0)
      return (unsigned __int8 *)v7;
    v17 = operator new();
    v18 = *(_QWORD *)(a1 + 56);
    v24 = *(_QWORD *)(v18 + 8);
    *(_QWORD *)v17 = &off_250AD65B0;
    *(_QWORD *)(v17 + 8) = v24;
    *(_DWORD *)(v17 + 16) = v12;
    goto LABEL_39;
  }
  if ((v9 & 0xF8) != 0x30 && (v9 & 0xFE) != 0x38 || (v9 - 49) > 8)
    return (unsigned __int8 *)a2;
  if ((v9 - 48) <= *(_DWORD *)(a1 + 28))
  {
    sub_2393CD9C8(a1, v9 - 48);
    return (unsigned __int8 *)(a2 + 2);
  }
LABEL_42:
  v26 = sub_2393C78AC();
  return sub_2393CE1B4(v26, v27, v28, v29, v30, v31);
}

unsigned __int8 *sub_2393CE1B4(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, int a5, int a6)
{
  unsigned __int8 *v6;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  unsigned __int8 *v19;
  int v20;
  int v21;
  unsigned __int8 *v22;
  int v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;

  v6 = a2;
  if (a2 != a3)
  {
    v11 = *a2;
    if (v11 == 42)
    {
      v12 = (_QWORD *)operator new();
      v13 = *(_QWORD *)(a1 + 56);
      v14 = *(_QWORD *)(v13 + 8);
      *v12 = &off_250AD62E0;
      v12[1] = v14;
      *(_QWORD *)(v13 + 8) = 0;
      v15 = operator new();
      v16 = *(_DWORD *)(a1 + 32);
      *(_QWORD *)(v15 + 8) = *(_QWORD *)(a4 + 8);
      *(_QWORD *)(v15 + 16) = v12;
      *(_QWORD *)v15 = &off_250AD65E0;
      *(_OWORD *)(v15 + 24) = xmmword_2393F5500;
      *(_DWORD *)(v15 + 40) = v16;
      *(_DWORD *)(v15 + 44) = a5;
      *(_DWORD *)(v15 + 48) = a6;
      *(_BYTE *)(v15 + 52) = 1;
      *(_QWORD *)(a4 + 8) = 0;
      v17 = (_QWORD *)operator new();
      *v17 = &off_250AD6640;
      v17[1] = v15;
      *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v17;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(v15 + 16);
      *(_QWORD *)(a4 + 8) = v15;
      ++*(_DWORD *)(a1 + 32);
      return ++v6;
    }
    if (a2 + 1 != a3 && v11 == 92 && a2[1] == 123)
    {
      v19 = &a2[2 * (a2[1] == 123)];
      if (v19 == a3)
        goto LABEL_44;
      v20 = *v19;
      if ((v20 & 0xF8) != 0x30 && (v20 & 0xFE) != 0x38)
        goto LABEL_44;
      v21 = v20 - 48;
      v22 = v19 + 1;
      if (v19 + 1 == a3)
      {
LABEL_16:
        v22 = a3;
      }
      else
      {
        while (1)
        {
          v23 = *v22;
          if ((v23 & 0xF8) != 0x30 && (v23 & 0xFE) != 0x38)
            break;
          if (v21 >= 214748364)
            goto LABEL_44;
          v21 = v23 + 10 * v21 - 48;
          if (++v22 == a3)
            goto LABEL_16;
        }
      }
      if (v22 == v19)
        goto LABEL_44;
      if (v22 == a3)
        goto LABEL_41;
      v24 = v22 + 1;
      v25 = *v22;
      if (v25 != 44)
      {
        if (v24 != a3 && v25 == 92 && *v24 == 125)
        {
          v6 = v22 + 2;
          v37 = v21;
          v38 = (_QWORD *)operator new();
          v39 = *(_QWORD *)(a1 + 56);
          v40 = *(_QWORD *)(v39 + 8);
          *v38 = &off_250AD62E0;
          v38[1] = v40;
          *(_QWORD *)(v39 + 8) = 0;
          v33 = operator new();
          v34 = v33;
          v35 = *(_DWORD *)(a1 + 32);
          v41 = *(_QWORD *)(a4 + 8);
          *(_QWORD *)v33 = &off_250AD65E0;
          *(_QWORD *)(v33 + 8) = v41;
          *(_QWORD *)(v33 + 16) = v38;
          *(_QWORD *)(v33 + 24) = v37;
          *(_QWORD *)(v33 + 32) = v37;
          goto LABEL_43;
        }
        goto LABEL_41;
      }
      if (v24 != a3)
      {
        v26 = *v24;
        if ((v26 & 0xF8) == 0x30 || (v26 & 0xFE) == 0x38)
        {
          v24 = v22 + 2;
          if (v22 + 2 == a3)
            goto LABEL_41;
          v27 = v26 - 48;
          while (1)
          {
            v26 = *v24;
            if ((v26 & 0xF8) != 0x30 && (v26 & 0xFE) != 0x38)
              break;
            if (v27 >= 214748364)
              goto LABEL_44;
            v27 = v26 + 10 * v27 - 48;
            if (++v24 == a3)
              goto LABEL_41;
          }
        }
        else
        {
          v27 = -1;
        }
        if (v24 != a3 && v24 + 1 != a3 && v26 == 92 && v24[1] == 125)
        {
          v6 = &v24[2 * (v24[1] == 125)];
          if (v27 != -1)
          {
            if (v27 >= v21)
            {
              v28 = v21;
              v29 = v27;
              v30 = (_QWORD *)operator new();
              v31 = *(_QWORD *)(a1 + 56);
              v32 = *(_QWORD *)(v31 + 8);
              *v30 = &off_250AD62E0;
              v30[1] = v32;
              *(_QWORD *)(v31 + 8) = 0;
              v33 = operator new();
              v34 = v33;
              v35 = *(_DWORD *)(a1 + 32);
              v36 = *(_QWORD *)(a4 + 8);
              *(_QWORD *)v33 = &off_250AD65E0;
              *(_QWORD *)(v33 + 8) = v36;
              *(_QWORD *)(v33 + 16) = v30;
              *(_QWORD *)(v33 + 24) = v28;
              *(_QWORD *)(v33 + 32) = v29;
LABEL_43:
              *(_DWORD *)(v33 + 40) = v35;
              *(_DWORD *)(v33 + 44) = a5;
              *(_DWORD *)(v33 + 48) = a6;
              *(_BYTE *)(v33 + 52) = 1;
              *(_QWORD *)(a4 + 8) = 0;
              v47 = (_QWORD *)operator new();
              *v47 = &off_250AD6640;
              v47[1] = v34;
              *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v47;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(v34 + 16);
              *(_QWORD *)(a4 + 8) = v34;
              ++*(_DWORD *)(a1 + 32);
              return v6;
            }
LABEL_44:
            sub_2393C78AC();
            JUMPOUT(0x2393CE64CLL);
          }
LABEL_42:
          v42 = v21;
          v43 = (_QWORD *)operator new();
          v44 = *(_QWORD *)(a1 + 56);
          v45 = *(_QWORD *)(v44 + 8);
          *v43 = &off_250AD62E0;
          v43[1] = v45;
          *(_QWORD *)(v44 + 8) = 0;
          v33 = operator new();
          v34 = v33;
          v35 = *(_DWORD *)(a1 + 32);
          v46 = *(_QWORD *)(a4 + 8);
          *(_QWORD *)v33 = &off_250AD65E0;
          *(_QWORD *)(v33 + 8) = v46;
          *(_QWORD *)(v33 + 16) = v43;
          *(_QWORD *)(v33 + 24) = v42;
          *(_QWORD *)(v33 + 32) = -1;
          goto LABEL_43;
        }
      }
LABEL_41:
      sub_2393C78AC();
      goto LABEL_42;
    }
  }
  return v6;
}

void sub_2393CE650()
{
  JUMPOUT(0x23B83C4BCLL);
}

uint64_t sub_2393CE664(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *sub_2393CE678(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_250AD6610;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = &off_250AD6310;
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void sub_2393CE6D8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_250AD6610;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = &off_250AD6310;
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  JUMPOUT(0x23B83C4BCLL);
}

void sub_2393CE748(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t sub_2393CE754(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3;

  *(_DWORD *)a3 = -994;
  v3 = 8;
  if (a2)
    v3 = 16;
  *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + v3);
  return result;
}

uint64_t sub_2393CE778(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  int v6;
  char *v7;
  BOOL v8;
  char *v9;
  int v11;
  char *v12;
  int v13;
  int v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (**v21)();
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  std::locale v30[3];
  int v31;
  int v32;

  v3 = a2;
  if (a2 == a3)
    return (uint64_t)v3;
  v6 = *a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 != a3)
      {
        v23 = a2[1];
        if (v23 == 66)
        {
          v24 = operator new();
          v26 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          *(_QWORD *)v24 = &off_250AD63A0;
          *(_QWORD *)(v24 + 8) = v26;
          std::locale::locale((std::locale *)(v24 + 16), (const std::locale *)a1);
          *(_OWORD *)(v24 + 24) = *(_OWORD *)(a1 + 8);
          *(_BYTE *)(v24 + 40) = 1;
        }
        else
        {
          if (v23 != 98)
            return (uint64_t)v3;
          v24 = operator new();
          v25 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          *(_QWORD *)v24 = &off_250AD63A0;
          *(_QWORD *)(v24 + 8) = v25;
          std::locale::locale((std::locale *)(v24 + 16), (const std::locale *)a1);
          *(_OWORD *)(v24 + 24) = *(_OWORD *)(a1 + 8);
          *(_BYTE *)(v24 + 40) = 0;
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v24;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        v3 += 2;
      }
      return (uint64_t)v3;
    }
    if (v6 != 94)
      return (uint64_t)v3;
    v17 = operator new();
    v18 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v19 = *(_QWORD *)(a1 + 56);
    v20 = *(_QWORD *)(v19 + 8);
    v21 = &off_250AD6340;
LABEL_19:
    *(_QWORD *)v17 = v21;
    *(_QWORD *)(v17 + 8) = v20;
    *(_BYTE *)(v17 + 16) = v18;
    *(_QWORD *)(v19 + 8) = v17;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    return (uint64_t)++v3;
  }
  if (v6 == 36)
  {
    v17 = operator new();
    v18 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v19 = *(_QWORD *)(a1 + 56);
    v20 = *(_QWORD *)(v19 + 8);
    v21 = &off_250AD6370;
    goto LABEL_19;
  }
  v8 = v6 == 40;
  v7 = a2 + 1;
  v8 = !v8 || v7 == a3;
  if (v8)
    return (uint64_t)v3;
  v8 = *v7 == 63;
  v9 = a2 + 2;
  if (!v8 || v9 == a3)
    return (uint64_t)v3;
  v11 = *v9;
  if (v11 == 33)
  {
    sub_2393CF224((uint64_t)v30);
    v31 = *(_DWORD *)(a1 + 24);
    v12 = (char *)sub_2393C8114(v30, v3 + 3, a3);
    v13 = v32;
    v14 = *(_DWORD *)(a1 + 28);
    v15 = a1;
    v16 = 1;
    goto LABEL_28;
  }
  if (v11 != 61)
    return (uint64_t)v3;
  sub_2393CF224((uint64_t)v30);
  v31 = *(_DWORD *)(a1 + 24);
  v12 = (char *)sub_2393C8114(v30, v3 + 3, a3);
  v13 = v32;
  v14 = *(_DWORD *)(a1 + 28);
  v15 = a1;
  v16 = 0;
LABEL_28:
  sub_2393CF27C(v15, (uint64_t)v30, v16, v14);
  *(_DWORD *)(a1 + 28) += v13;
  if (v12 != a3 && *v12 == 41)
  {
    v3 = v12 + 1;
    sub_2393C5614(v30);
    return (uint64_t)v3;
  }
  v27 = sub_2393C78AC();
  return sub_2393CEA24(v27, v28, v29);
}

char *sub_2393CEA24(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  int v5;
  unsigned __int8 *v7;
  _DWORD *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  char v29;
  int v30;
  uint64_t v31;
  char v32;
  unsigned __int8 *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  char v37;
  int v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  char v44;
  int v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;

  v3 = a2;
  if (a2 == a3)
    return a2;
  v5 = *a2;
  v7 = (unsigned __int8 *)a2;
  switch(*a2)
  {
    case '$':
    case ')':
    case ']':
    case '^':
    case '|':
    case '}':
      return (char *)v7;
    case '(':
      if (a2 + 1 == a3)
        goto LABEL_54;
      if (a2 + 2 != a3 && a2[1] == 63 && a2[2] == 58)
      {
        v8 = (_DWORD *)(a1 + 36);
        ++*(_DWORD *)(a1 + 36);
        v9 = sub_2393CEF1C(a1, a2 + 3, a3);
        if (v9 == a3 || (v3 = v9, *v9 != 41))
        {
LABEL_54:
          sub_2393C78AC();
          goto LABEL_55;
        }
      }
      else
      {
        if ((*(_BYTE *)(a1 + 24) & 2) != 0)
        {
          v18 = *(_DWORD *)(a1 + 28);
        }
        else
        {
          v17 = operator new();
          v18 = *(_DWORD *)(a1 + 28) + 1;
          *(_DWORD *)(a1 + 28) = v18;
          v19 = *(_QWORD *)(a1 + 56);
          v20 = *(_QWORD *)(v19 + 8);
          *(_QWORD *)v17 = &off_250AD6580;
          *(_QWORD *)(v17 + 8) = v20;
          *(_DWORD *)(v17 + 16) = v18;
          *(_QWORD *)(v19 + 8) = v17;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        }
        v8 = (_DWORD *)(a1 + 36);
        ++*(_DWORD *)(a1 + 36);
        v21 = sub_2393CEF1C(a1, v3 + 1, a3);
        if (v21 == a3)
          goto LABEL_54;
        v3 = v21;
        if (*v21 != 41)
          goto LABEL_54;
        if ((*(_BYTE *)(a1 + 24) & 2) == 0)
        {
          v22 = operator new();
          v23 = *(_QWORD *)(a1 + 56);
          v24 = *(_QWORD *)(v23 + 8);
          *(_QWORD *)v22 = &off_250AD65B0;
          *(_QWORD *)(v22 + 8) = v24;
          *(_DWORD *)(v22 + 16) = v18;
          *(_QWORD *)(v23 + 8) = v22;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        }
      }
      --*v8;
      return v3 + 1;
    case '*':
    case '+':
    case '?':
    case '{':
      sub_2393C78AC();
      goto LABEL_54;
    case '.':
      v10 = (_QWORD *)operator new();
      v11 = *(_QWORD *)(a1 + 56);
      v12 = *(_QWORD *)(v11 + 8);
      *v10 = &off_250AD6400;
      v10[1] = v12;
      *(_QWORD *)(v11 + 8) = v10;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      return v3 + 1;
    case '[':
      return sub_2393C8E8C(a1, a2, a3);
    case '\\':
      if (v5 != 92)
        return a2;
      v14 = (unsigned __int8 *)(a2 + 1);
      if (a2 + 1 == a3)
        goto LABEL_56;
      v15 = *v14;
      v16 = (v15 - 48);
      if (v15 == 48)
      {
        sub_2393CC450(a1, v16);
        return v3 + 2;
      }
      if ((v15 - 49) > 8)
        goto LABEL_39;
      v7 = (unsigned __int8 *)(v3 + 2);
      if (v3 + 2 == a3)
      {
        v7 = (unsigned __int8 *)a3;
      }
      else
      {
        while (1)
        {
          v25 = *v7;
          if ((v25 - 48) > 9)
            break;
          if (v16 >= 0x19999999)
            goto LABEL_55;
          ++v7;
          LODWORD(v16) = v25 + 10 * v16 - 48;
          if (v7 == (unsigned __int8 *)a3)
          {
            v7 = (unsigned __int8 *)a3;
            break;
          }
        }
        if (!(_DWORD)v16)
        {
LABEL_55:
          sub_2393C78AC();
LABEL_56:
          v54 = sub_2393C78AC();
          return sub_2393CEF1C(v54, v55, v56);
        }
      }
      if (v16 > *(_DWORD *)(a1 + 28))
        goto LABEL_55;
      sub_2393CD9C8(a1, v16);
      if (v7 == v14)
      {
LABEL_39:
        switch(*v14)
        {
          case 'D':
            v26 = operator new();
            v27 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
            v28 = *(_DWORD *)(a1 + 24);
            v29 = v28 & 1;
            v30 = (v28 >> 3) & 1;
            v31 = a1;
            v32 = 1;
            goto LABEL_47;
          case 'S':
            v34 = operator new();
            v35 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
            v36 = *(_DWORD *)(a1 + 24);
            v37 = v36 & 1;
            v38 = (v36 >> 3) & 1;
            v39 = a1;
            v40 = 1;
            goto LABEL_49;
          case 'W':
            v41 = operator new();
            v42 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
            v43 = *(_DWORD *)(a1 + 24);
            v44 = v43 & 1;
            v45 = (v43 >> 3) & 1;
            v46 = a1;
            v47 = 1;
            goto LABEL_52;
          case 'd':
            v26 = operator new();
            v27 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
            v48 = *(_DWORD *)(a1 + 24);
            v29 = v48 & 1;
            v30 = (v48 >> 3) & 1;
            v31 = a1;
            v32 = 0;
LABEL_47:
            v49 = sub_2393CAF74(v26, v31, v27, v32, v29, v30);
            *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v49;
            *(_QWORD *)(a1 + 56) = v49;
            v50 = *(_DWORD *)(v49 + 160) | 0x400;
            goto LABEL_50;
          case 's':
            v34 = operator new();
            v35 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
            v51 = *(_DWORD *)(a1 + 24);
            v37 = v51 & 1;
            v38 = (v51 >> 3) & 1;
            v39 = a1;
            v40 = 0;
LABEL_49:
            v49 = sub_2393CAF74(v34, v39, v35, v40, v37, v38);
            *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v49;
            *(_QWORD *)(a1 + 56) = v49;
            v50 = *(_DWORD *)(v49 + 160) | 0x4000;
LABEL_50:
            *(_DWORD *)(v49 + 160) = v50;
            v7 = (unsigned __int8 *)(v3 + 2);
            break;
          case 'w':
            v41 = operator new();
            v42 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
            v52 = *(_DWORD *)(a1 + 24);
            v44 = v52 & 1;
            v45 = (v52 >> 3) & 1;
            v46 = a1;
            v47 = 0;
LABEL_52:
            v53 = sub_2393CAF74(v41, v46, v42, v47, v44, v45);
            *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v53;
            *(_QWORD *)(a1 + 56) = v53;
            *(_DWORD *)(v53 + 160) |= 0x500u;
            sub_2393CB07C(v53, 95);
            v7 = (unsigned __int8 *)(v3 + 2);
            break;
          default:
            v33 = sub_2393CC868(a1, (unsigned __int8 *)v3 + 1, (unsigned __int8 *)a3, 0);
            if (v33 == v14)
              v7 = (unsigned __int8 *)v3;
            else
              v7 = v33;
            break;
        }
      }
      break;
    default:
      sub_2393CC450(a1, (char)v5);
      return v3 + 1;
  }
  return (char *)v7;
}

char *sub_2393CEF1C(uint64_t a1, char *a2, char *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  int v25;
  char *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = a2;
  while (1)
  {
    v8 = v7;
    v7 = (char *)sub_2393CE778(a1, v7, a3);
    if (v7 == v8)
      break;
LABEL_2:
    if (v7 == v8)
      goto LABEL_6;
  }
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_DWORD *)(a1 + 28);
  v11 = (char *)sub_2393CEA24(a1, (int)v8, (int)a3);
  if (v11 != v8)
  {
    v7 = sub_2393C9D94(a1, v11, a3, v9, v10 + 1, *(_DWORD *)(a1 + 28) + 1);
    goto LABEL_2;
  }
LABEL_6:
  if (v8 == a2)
  {
    v12 = (_QWORD *)operator new();
    v13 = *(_QWORD *)(a1 + 56);
    v14 = *(_QWORD *)(v13 + 8);
    *v12 = &off_250AD62E0;
    v12[1] = v14;
    *(_QWORD *)(v13 + 8) = v12;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  }
  if (v8 == a3)
    return a3;
  while (2)
  {
    if (*v8 != 124)
      return v8;
    v21 = *(_QWORD *)(a1 + 56);
    v22 = v8 + 1;
    v23 = v8 + 1;
    while (2)
    {
      v8 = v23;
      v23 = (char *)sub_2393CE778(a1, v23, a3);
      if (v23 != v8)
      {
LABEL_14:
        if (v23 == v8)
          goto LABEL_17;
        continue;
      }
      break;
    }
    v24 = *(_QWORD *)(a1 + 56);
    v25 = *(_DWORD *)(a1 + 28);
    v26 = (char *)sub_2393CEA24(a1, (int)v8, (int)a3);
    if (v26 != v8)
    {
      v23 = sub_2393C9D94(a1, v26, a3, v24, v25 + 1, *(_DWORD *)(a1 + 28) + 1);
      goto LABEL_14;
    }
LABEL_17:
    if (v8 == v22)
    {
      v27 = (_QWORD *)operator new();
      v28 = *(_QWORD *)(a1 + 56);
      v29 = *(_QWORD *)(v28 + 8);
      *v27 = &off_250AD62E0;
      v27[1] = v29;
      *(_QWORD *)(v28 + 8) = v27;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    v15 = (_QWORD *)operator new();
    v16 = *(_QWORD *)(v21 + 8);
    v15[1] = *(_QWORD *)(v6 + 8);
    v15[2] = v16;
    *v15 = &off_250AD6670;
    *(_QWORD *)(v6 + 8) = v15;
    *(_QWORD *)(v21 + 8) = 0;
    v17 = (_QWORD *)operator new();
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    *v17 = &off_250AD62E0;
    v17[1] = v18;
    *(_QWORD *)(v21 + 8) = v17;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
    v19 = (_QWORD *)operator new();
    v20 = *(_QWORD *)(v21 + 8);
    *v19 = &unk_250AD66A0;
    v19[1] = v20;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v19;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(v21 + 8);
    if (v8 != a3)
      continue;
    return a3;
  }
}

_QWORD *sub_2393CF194(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_250AD6310;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_2393CF1D4(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_250AD6310;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x23B83C4BCLL);
}

uint64_t sub_2393CF224(uint64_t a1)
{
  const std::locale *v2;

  v2 = (const std::locale *)MEMORY[0x23B83C438]();
  *(_QWORD *)(a1 + 8) = std::locale::use_facet(v2, MEMORY[0x24BEDB350]);
  *(_QWORD *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, MEMORY[0x24BEDB4B0]);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  return a1;
}

std::locale *sub_2393CF27C(uint64_t a1, uint64_t a2, char a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  std::locale *result;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  v8 = operator new();
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  *(_QWORD *)v8 = &off_250AD63D0;
  *(_QWORD *)(v8 + 8) = v9;
  result = std::locale::locale((std::locale *)(v8 + 16), (const std::locale *)a2);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v8 + 40) = *(_OWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(v8 + 56) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(v8 + 64) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_QWORD *)(v8 + 72) = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(v8 + 80) = a4;
  *(_BYTE *)(v8 + 84) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v8;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  return result;
}

std::locale *sub_2393CF340(std::locale *a1)
{
  std::locale *v2;
  std::__shared_weak_count *locale;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::locale::__imp *v6;

  a1->__locale_ = (std::locale::__imp *)&off_250AD63D0;
  v2 = a1 + 2;
  locale = (std::__shared_weak_count *)a1[8].__locale_;
  if (locale)
  {
    p_shared_owners = (unint64_t *)&locale->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
      std::__shared_weak_count::__release_weak(locale);
    }
  }
  std::locale::~locale(v2);
  a1->__locale_ = (std::locale::__imp *)&off_250AD6310;
  v6 = a1[1].__locale_;
  if (v6)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v6 + 8))(v6);
  return a1;
}

void sub_2393CF3D8(std::locale *a1)
{
  std::locale *v2;
  std::__shared_weak_count *locale;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::locale::__imp *v6;

  a1->__locale_ = (std::locale::__imp *)&off_250AD63D0;
  v2 = a1 + 2;
  locale = (std::__shared_weak_count *)a1[8].__locale_;
  if (locale)
  {
    p_shared_owners = (unint64_t *)&locale->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
      std::__shared_weak_count::__release_weak(locale);
    }
  }
  std::locale::~locale(v2);
  a1->__locale_ = (std::locale::__imp *)&off_250AD6310;
  v6 = a1[1].__locale_;
  if (v6)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v6 + 8))(v6);
  JUMPOUT(0x23B83C4BCLL);
}

void sub_2393CF480(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  char v10;
  char *v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t i;
  char *v17;
  uint64_t v18;
  void *__p;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  __int128 v27;
  char v28;
  char v29;
  uint64_t v30;

  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0uLL;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  __p = 0;
  v20 = 0;
  v4 = a1 + 16;
  v5 = (*(_DWORD *)(a1 + 44) + 1);
  v7 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v21 = 0;
  *(_QWORD *)&v22 = v6;
  *((_QWORD *)&v22 + 1) = v6;
  v23 = 0;
  sub_2393C566C((uint64_t)&__p, v5, &v22);
  v24 = v7;
  v25 = v7;
  v26 = 0;
  v27 = v22;
  v28 = v23;
  v30 = v7;
  v29 = 1;
  v8 = *(_QWORD *)(a2 + 16);
  if (*(_BYTE *)(a2 + 92))
    v9 = v8 == *(_QWORD *)(a2 + 8);
  else
    v9 = 0;
  v10 = v9;
  if (*(unsigned __int8 *)(a1 + 84) == sub_2393C57F4(v4, v8, *(_QWORD *)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v10))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    v11 = (char *)__p;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 8);
  v11 = (char *)__p;
  v12 = 0xAAAAAAAAAAAAAAABLL * ((v20 - (uint64_t)__p) >> 3);
  if (v12 < 2)
  {
LABEL_13:
    if (!v11)
      return;
    goto LABEL_14;
  }
  v13 = *(_DWORD *)(a1 + 80);
  v14 = *(_QWORD *)(a2 + 32);
  v15 = 2;
  for (i = 1; i < v12; i = v15++)
  {
    v17 = &v11[24 * i];
    v18 = v14 + 24 * (v13 + v15 - 2);
    *(_OWORD *)v18 = *(_OWORD *)v17;
    *(_BYTE *)(v18 + 16) = v17[16];
  }
LABEL_14:
  operator delete(v11);
}

std::locale *sub_2393CF5FC(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_250AD63A0;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_250AD6310;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void sub_2393CF64C(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_250AD63A0;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_250AD6310;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x23B83C4BCLL);
}

uint64_t sub_2393CF6AC(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;

  v2 = *(unsigned __int8 **)(a2 + 8);
  v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3)
    goto LABEL_18;
  v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 == v3)
  {
    if ((*(_BYTE *)(a2 + 88) & 8) == 0)
    {
      v6 = *(v3 - 1);
      if (v6 != 95)
      {
LABEL_15:
        if ((v6 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
          goto LABEL_17;
        goto LABEL_18;
      }
LABEL_17:
      v10 = 1;
      goto LABEL_25;
    }
LABEL_18:
    v10 = 0;
    goto LABEL_25;
  }
  if (v4 == v2)
  {
    v5 = *(_DWORD *)(a2 + 88);
    if ((v5 & 0x80) == 0)
    {
      if ((v5 & 4) == 0)
      {
        v6 = *v2;
        if (v6 != 95)
          goto LABEL_15;
        goto LABEL_17;
      }
      goto LABEL_18;
    }
  }
  v7 = *(v4 - 1);
  v8 = *v4;
  if (v7 == 95 || (v7 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v7) & 0x500) != 0)
  {
    v9 = 1;
    if ((_DWORD)v8 == 95)
      goto LABEL_22;
  }
  else
  {
    v9 = 0;
    if ((_DWORD)v8 == 95)
      goto LABEL_22;
  }
  if ((v8 & 0x80) != 0 || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v8) & 0x500) == 0)
  {
    v11 = 0;
    goto LABEL_24;
  }
LABEL_22:
  v11 = 1;
LABEL_24:
  v10 = v9 != v11;
LABEL_25:
  if (*(unsigned __int8 *)(result + 40) == v10)
  {
    v12 = 0;
    v13 = -993;
  }
  else
  {
    v12 = *(_QWORD *)(result + 8);
    v13 = -994;
  }
  *(_DWORD *)a2 = v13;
  *(_QWORD *)(a2 + 80) = v12;
  return result;
}

void sub_2393CF7D4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83C4BCLL);
}

uint64_t sub_2393CF7F8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *sub_2393CF814(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_250AD6310;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_2393CF854(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_250AD6310;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x23B83C4BCLL);
}

uint64_t sub_2393CF8A4(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void sub_2393CF8BC()
{
  JUMPOUT(0x23B83C4BCLL);
}

void sub_2393CF8D0(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

uint64_t sub_2393CF8DC(uint64_t result, uint64_t a2)
{
  _OWORD *v2;
  float32x4_t *v3;
  __int32 *v4;
  uint64_t v5;
  uint64_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;

  v2 = (_OWORD *)result;
  v3 = **(float32x4_t ***)a2;
  if (v3 == (float32x4_t *)result || (v4 = *(__int32 **)(a2 + 8), v4 == (__int32 *)result))
  {
    v10 = 0uLL;
    result = sub_2393CF8DC(&v10);
    v7 = v10;
  }
  else
  {
    v5 = (4 * *(_DWORD *)(*(_QWORD *)a2 + 16));
    if ((_DWORD)v5)
    {
      v6 = 4 * v5;
      v7 = 0uLL;
      do
      {
        v8 = *v3++;
        v9 = v8;
        v8.i32[0] = *v4++;
        v7 = vmlaq_n_f32(v7, v9, v8.f32[0]);
        v6 -= 16;
      }
      while (v6);
    }
    else
    {
      v7 = 0uLL;
    }
  }
  *v2 = v7;
  return result;
}

float32x4_t *sub_2393CF964(float32x4_t *result, uint64_t a2)
{
  float32x4_t *v2;
  float32x4_t *v3;
  float *v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;

  v2 = result;
  v3 = *(float32x4_t **)a2;
  if (*(float32x4_t **)a2 == result || (v4 = *(float **)(a2 + 8), v4 == (float *)result))
  {
    v9 = 0u;
    v10 = 0u;
    v7 = 0u;
    v8 = 0u;
    result = (float32x4_t *)sub_2393CF964(&v7);
    v6 = v8;
    *v2 = v7;
    v2[1] = v6;
    v5 = v10;
    v2[2] = v9;
  }
  else
  {
    *result = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32((float32x4_t)0, *v3, *v4), v3[1], v4[1]), v3[2], v4[2]), v3[3], v4[3]);
    result[1] = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32((float32x4_t)0, *v3, v4[4]), v3[1], v4[5]), v3[2], v4[6]), v3[3], v4[7]);
    result[2] = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32((float32x4_t)0, *v3, v4[8]), v3[1], v4[9]), v3[2], v4[10]), v3[3], v4[11]);
    v5 = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32((float32x4_t)0, *v3, v4[12]), v3[1], v4[13]), v3[2], v4[14]), v3[3], v4[15]);
  }
  v2[3] = v5;
  return result;
}

uint64_t sub_2393CFA68(float32x4_t *a1, float32x4_t *a2, uint64_t a3)
{
  char *v6;
  int32x2_t v7;
  unsigned int v8;
  int32x4_t v9;
  int v10;
  signed __int32 v11;
  signed __int32 v12;
  signed __int32 v13;
  signed __int32 v14;
  BOOL v17;
  int v18;
  __int32 v19;
  float32x4_t v20;
  uint64_t v22;
  unsigned int *v23;
  unsigned int *v24;
  char *v25;
  int v26;
  float32x4_t v27;
  float32x4_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _BYTE *v36;
  _DWORD *v37;
  unint64_t v38;
  char *v39;
  int v40;
  uint64_t v41;
  _OWORD *v42;
  char *v43;
  uint64_t v44;
  __int128 v45;
  signed __int32 v46;
  unsigned __int32 v47;
  int v48;
  signed __int32 v49;
  int v50;
  float32x4_t *v51;
  int v52;
  unsigned int *v53;
  signed __int32 v54;

  kdebug_trace();
  v6 = *(char **)a3;
  *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
  v7.i32[0] = a1[1].i32[0];
  v8 = vcvtms_s32_f32(0.04 / *(float *)v7.i32);
  v9.i64[0] = -1;
  v9.i32[2] = -1;
  if (a1[4].i32[0] && a1[4].i32[1] && a1[4].i32[2])
    v9 = vcvtq_s32_f32(vdivq_f32(vsubq_f32(*a2, a1[2]), (float32x4_t)vdupq_lane_s32(v7, 0)));
  v10 = v9.i32[0] - v8;
  v47 = v9.i32[0] + v8;
  if ((int)(v9.i32[0] - v8) <= (int)(v9.i32[0] + v8))
  {
    v11 = v9.i32[1] - v8;
    v12 = v9.i32[1] + v8;
    v13 = v9.i32[2] - v8;
    v14 = v9.i32[2] + v8;
    v46 = v11;
    v48 = v12;
    v49 = v13;
    v54 = v14;
    if (v11 <= v12 && v13 <= v14)
    {
      v51 = a2;
      while (1)
      {
        v18 = v46;
        v52 = v10;
        if ((v10 & 0x80000000) == 0)
          break;
LABEL_12:
        v17 = v10++ == v47;
        if (v17)
          return kdebug_trace();
      }
      while (1)
      {
        v19 = v49;
        v50 = v18;
        if ((v18 & 0x80000000) == 0)
          break;
LABEL_15:
        v18 = v50 + 1;
        if (v50 + 1 > v48)
          goto LABEL_12;
      }
      while (1)
      {
        v20 = a1[4];
        if (v10 < v20.i32[0] && (v19 & 0x80000000) == 0 && v50 < v20.i32[1] && v19 < v20.i32[2])
        {
          v22 = a1[5].i64[0] + 24 * (v19 + (v50 + v20.i32[1] * v10) * v20.i32[2]);
          v24 = *(unsigned int **)v22;
          v23 = *(unsigned int **)(v22 + 8);
          if (*(unsigned int **)v22 != v23)
            break;
        }
LABEL_18:
        v17 = v19++ == v54;
        if (v17)
          goto LABEL_15;
      }
      v53 = *(unsigned int **)(v22 + 8);
      while (1)
      {
        v26 = *v24;
        v27 = vsubq_f32(*(float32x4_t *)(a1->i64[1] + 48 * *v24), *a2);
        v28 = vmulq_f32(v27, v27);
        if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v28, 2), vaddq_f32(v28, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28.f32, 1))).f32[0]) > 0.04)goto LABEL_30;
        v29 = *(_QWORD *)(a3 + 16);
        if ((unint64_t)v6 >= v29)
          break;
        *(_DWORD *)v6 = v26;
        v25 = v6 + 4;
LABEL_29:
        *(_QWORD *)(a3 + 8) = v25;
        v6 = v25;
LABEL_30:
        if (++v24 == v23)
          goto LABEL_18;
      }
      v30 = *(char **)a3;
      v31 = (uint64_t)&v6[-*(_QWORD *)a3];
      v32 = v31 >> 2;
      v33 = (v31 >> 2) + 1;
      if (v33 >> 62)
        abort();
      v34 = v29 - (_QWORD)v30;
      if (v34 >> 1 > v33)
        v33 = v34 >> 1;
      if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL)
        v35 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v35 = v33;
      if (v35)
      {
        if (v35 >> 62)
          sub_23938C4B8();
        v36 = operator new(4 * v35);
        v26 = *v24;
      }
      else
      {
        v36 = 0;
      }
      v37 = &v36[4 * v32];
      *v37 = v26;
      v25 = (char *)(v37 + 1);
      if (v6 != v30)
      {
        v38 = v6 - 4 - v30;
        if (v38 >= 0xBC)
        {
          if (&v36[v31 - 4 - (v38 & 0xFFFFFFFFFFFFFFFCLL)] > &v36[v31 - 4])
          {
            v39 = v6;
          }
          else if (&v6[-(v38 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v6 - 4)
          {
            v39 = v6;
          }
          else if ((unint64_t)(v6 - v36 - v31) >= 0x20)
          {
            v41 = (v38 >> 2) + 1;
            v39 = &v6[-4 * (v41 & 0x7FFFFFFFFFFFFFF8)];
            v42 = &v36[4 * v32 - 16];
            v43 = v6 - 16;
            v44 = v41 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v45 = *(_OWORD *)v43;
              *(v42 - 1) = *((_OWORD *)v43 - 1);
              *v42 = v45;
              v42 -= 2;
              v43 -= 32;
              v44 -= 8;
            }
            while (v44);
            v37 -= v41 & 0x7FFFFFFFFFFFFFF8;
            if (v41 == (v41 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_47;
          }
          else
          {
            v39 = v6;
          }
        }
        else
        {
          v39 = v6;
        }
        do
        {
          v40 = *((_DWORD *)v39 - 1);
          v39 -= 4;
          *--v37 = v40;
        }
        while (v39 != v30);
      }
LABEL_47:
      *(_QWORD *)a3 = v37;
      *(_QWORD *)(a3 + 8) = v25;
      *(_QWORD *)(a3 + 16) = &v36[4 * v35];
      if (v30)
        operator delete(v30);
      a2 = v51;
      v10 = v52;
      v23 = v53;
      goto LABEL_29;
    }
  }
  return kdebug_trace();
}

void sub_2393CFE24(uint64_t a1)
{
  sub_2393D3424(a1);
  JUMPOUT(0x23B83C4BCLL);
}

uint64_t sub_2393CFE48(uint64_t a1, unint64_t a2, unint64_t a3, float32x4_t *a4, float a5)
{
  id *v5;
  uint64_t v7;
  NSObject *v8;
  void **v9;
  const char *v10;
  void **v11;
  void **v12;
  void **v13;
  void **v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  id v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  void *v26;
  id v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  void *v32;
  const char *v33;
  id v34;
  void *v35;
  const char *v36;
  void *v37;
  uint64_t v38;
  void **v39;
  void **v40;
  void **v42;
  void **v43;
  void *__p[2];
  char v45;
  uint8_t buf[4];
  void **v47;
  __int16 v48;
  int v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v5 = *(id **)(a1 + 48);
  if (!v5)
  {
    if (qword_256930460 != -1)
      dispatch_once(&qword_256930460, &unk_250AD6740);
    v8 = (id)qword_256930458;
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      goto LABEL_70;
    sub_2393C4DD0(__p, "virtual BOOL oc::voxel_hashing::VoxelDepthRendererUsingMesh::init(const std::size_t, const std::size_t, const simd_float4x4 &, const float, const uint8_t)");
    if (v45 >= 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v47 = v12;
    v48 = 1026;
    v49 = 52;
    v10 = "%s:%{public}d Failed to initialize VoxelDepthRendererUsingMesh - failed to get MTLDeviceContext.";
    goto LABEL_43;
  }
  v7 = *(_QWORD *)(a1 + 32);
  if (!v7 || !*(_BYTE *)(v7 + 8))
  {
    if (qword_256930460 != -1)
      dispatch_once(&qword_256930460, &unk_250AD6740);
    v8 = (id)qword_256930458;
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      goto LABEL_70;
    sub_2393C4DD0(__p, "virtual BOOL oc::voxel_hashing::VoxelDepthRendererUsingMesh::init(const std::size_t, const std::size_t, const simd_float4x4 &, const float, const uint8_t)");
    if (v45 >= 0)
      v11 = __p;
    else
      v11 = (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v47 = v11;
    v48 = 1026;
    v49 = 58;
    v10 = "%s:%{public}d Failed to initialize VoxelDepthRendererUsingMesh - invalid init config.";
    goto LABEL_43;
  }
  if (!a2 || !a3)
  {
    if (qword_256930460 != -1)
      dispatch_once(&qword_256930460, &unk_250AD6740);
    v8 = (id)qword_256930458;
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      goto LABEL_70;
    sub_2393C4DD0(__p, "virtual BOOL oc::voxel_hashing::VoxelDepthRendererUsingMesh::init(const std::size_t, const std::size_t, const simd_float4x4 &, const float, const uint8_t)");
    if (v45 >= 0)
      v13 = __p;
    else
      v13 = (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v47 = v13;
    v48 = 1026;
    v49 = 64;
    v10 = "%s:%{public}d Failed to initialize VoxelDepthRendererUsingMesh - invalid image size.";
    goto LABEL_43;
  }
  if (a5 < 0.0001)
  {
    if (qword_256930460 != -1)
      dispatch_once(&qword_256930460, &unk_250AD6740);
    v8 = (id)qword_256930458;
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      goto LABEL_70;
    sub_2393C4DD0(__p, "virtual BOOL oc::voxel_hashing::VoxelDepthRendererUsingMesh::init(const std::size_t, const std::size_t, const simd_float4x4 &, const float, const uint8_t)");
    if (v45 >= 0)
      v9 = __p;
    else
      v9 = (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v47 = v9;
    v48 = 1026;
    v49 = 70;
    v10 = "%s:%{public}d Failed to initialize VoxelDepthRendererUsingMesh - invalid voxel dimension.";
    goto LABEL_43;
  }
  if (*(_BYTE *)(a1 + 8))
  {
    if (qword_256930460 != -1)
      dispatch_once(&qword_256930460, &unk_250AD6740);
    v8 = (id)qword_256930458;
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      goto LABEL_70;
    sub_2393C4DD0(__p, "virtual BOOL oc::voxel_hashing::VoxelDepthRendererUsingMesh::init(const std::size_t, const std::size_t, const simd_float4x4 &, const float, const uint8_t)");
    if (v45 >= 0)
      v14 = __p;
    else
      v14 = (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v47 = v14;
    v48 = 1026;
    v49 = 76;
    v10 = "%s:%{public}d Failed to initialize VoxelDepthRendererUsingMesh - already been initialized.";
    goto LABEL_43;
  }
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = a3;
  *(double *)(a1 + 56) = (double)a2;
  *(double *)(a1 + 64) = (double)a3;
  v15 = a4[1];
  v16 = a4[2];
  v17 = a4[3];
  v18 = vmulq_f32(*a4, (float32x4_t)0);
  v19 = vmlaq_f32(vmlaq_f32(vmlaq_n_f32(v18, v15, a5), (float32x4_t)0, v16), (float32x4_t)0, v17);
  v20 = vmlaq_f32(v18, (float32x4_t)0, v15);
  *(float32x4_t *)(a1 + 80) = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(*a4, a5), (float32x4_t)0, v15), (float32x4_t)0, v16), (float32x4_t)0, v17);
  *(float32x4_t *)(a1 + 96) = v19;
  *(float32x4_t *)(a1 + 112) = vmlaq_f32(vmlaq_n_f32(v20, v16, a5), (float32x4_t)0, v17);
  *(float32x4_t *)(a1 + 128) = vaddq_f32(v17, vmlaq_f32(v20, (float32x4_t)0, v16));
  v21 = *v5;
  v23 = objc_msgSend_newBufferWithLength_options_(v21, v22, 4 * *(_QWORD *)(a1 + 24) * *(_QWORD *)(a1 + 16), 0);
  v24 = *(void **)(a1 + 232);
  *(_QWORD *)(a1 + 232) = v23;

  v26 = *(void **)(a1 + 232);
  if (!v26)
  {
    if (qword_256930460 != -1)
      dispatch_once(&qword_256930460, &unk_250AD6740);
    v8 = (id)qword_256930458;
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      goto LABEL_70;
    sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::VoxelDepthRendererUsingMesh::createBuffers()");
    if (v45 >= 0)
      v40 = __p;
    else
      v40 = (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v47 = v40;
    v48 = 1026;
    v49 = 265;
    v10 = "%s:%{public}d Failed to create depthImageBuffer.";
    goto LABEL_43;
  }
  objc_msgSend_setLabel_(v26, v25, (uint64_t)CFSTR("depthImageBuffer"));
  v27 = **(id **)(a1 + 48);
  v29 = objc_msgSend_newBufferWithLength_options_(v27, v28, 16 * *(_QWORD *)(a1 + 24) * *(_QWORD *)(a1 + 16), 0);
  v30 = *(void **)(a1 + 304);
  *(_QWORD *)(a1 + 304) = v29;

  v32 = *(void **)(a1 + 304);
  if (!v32)
  {
    if (qword_256930460 != -1)
      dispatch_once(&qword_256930460, &unk_250AD6740);
    v8 = (id)qword_256930458;
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      goto LABEL_70;
    sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::VoxelDepthRendererUsingMesh::createBuffers()");
    if (v45 >= 0)
      v42 = __p;
    else
      v42 = (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v47 = v42;
    v48 = 1026;
    v49 = 275;
    v10 = "%s:%{public}d Failed to create normalImageBuffer.";
    goto LABEL_43;
  }
  objc_msgSend_setLabel_(v32, v31, (uint64_t)CFSTR("normalImageBuffer"));
  if (sub_2393D1FE0(a1)
    && sub_2393D2510(a1, v33)
    && sub_2393D2AA8(a1)
    && sub_2393D2CF0(a1))
  {
    v34 = objc_alloc_init(MEMORY[0x24BDDD508]);
    v35 = *(void **)(a1 + 328);
    *(_QWORD *)(a1 + 328) = v34;

    v37 = *(void **)(a1 + 328);
    if (v37)
    {
      v38 = 1;
      objc_msgSend_setErrorOptions_(v37, v36, 1);
      *(_BYTE *)(a1 + 8) = 1;
      sub_2393D3024();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        sub_2393C4DD0(__p, "virtual BOOL oc::voxel_hashing::VoxelDepthRendererUsingMesh::init(const std::size_t, const std::size_t, const simd_float4x4 &, const float, const uint8_t)");
        if (v45 >= 0)
          v39 = __p;
        else
          v39 = (void **)__p[0];
        *(_DWORD *)buf = 136315394;
        v47 = v39;
        v48 = 1026;
        v49 = 102;
        _os_log_debug_impl(&dword_239388000, v8, OS_LOG_TYPE_DEBUG, "%s:%{public}d Successfully Initialized VoxelDepthRendererUsingMesh.", buf, 0x12u);
        if (v45 < 0)
          operator delete(__p[0]);
        v38 = 1;
      }
      goto LABEL_71;
    }
    sub_2393D3024();
    v8 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
LABEL_70:
      v38 = 0;
LABEL_71:

      return v38;
    }
    sub_2393C4DD0(__p, "virtual BOOL oc::voxel_hashing::VoxelDepthRendererUsingMesh::init(const std::size_t, const std::size_t, const simd_float4x4 &, const float, const uint8_t)");
    if (v45 >= 0)
      v43 = __p;
    else
      v43 = (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v47 = v43;
    v48 = 1026;
    v49 = 94;
    v10 = "%s:%{public}d Failed to initialize VoxelDepthRendererUsingMesh - failed to create command buffer descriptor.";
LABEL_43:
    _os_log_error_impl(&dword_239388000, v8, OS_LOG_TYPE_ERROR, v10, buf, 0x12u);
    if (v45 < 0)
      operator delete(__p[0]);
    goto LABEL_70;
  }
  return 0;
}

void sub_2393D05A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2393D05BC(uint64_t a1, uint64_t a2, uint64_t a3, double *a4)
{
  unsigned __int8 v8;
  const char *v9;
  uint64_t v10;
  int v11;
  int v12;
  NSObject *v13;
  NSObject *v14;
  void **v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  int v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  void **v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  float32x2_t v29;
  uint32x2_t v30;
  void **v31;
  void **v32;
  double v33;
  double v34;
  double v35;
  double v36;
  uint64_t v37;
  float v38;
  float v39;
  void **v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  float v48;
  float v49;
  float v50;
  unsigned int v51;
  unsigned int v52;
  void *v57;
  float64x2_t v58;
  float32x2_t v59;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  uint64_t v67;
  const char *v68;
  uint64_t v69;
  void *v70;
  const char *v71;
  void *v72;
  const char *v73;
  uint64_t v74;
  const char *v75;
  uint64_t v76;
  void *v77;
  const char *v78;
  void *v79;
  const char *v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  const char *v84;
  void *v85;
  const char *v86;
  const char *v87;
  const char *v88;
  const char *v89;
  const char *v90;
  const char *v91;
  const char *v92;
  const char *v93;
  const char *v94;
  const char *v95;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  const char *v99;
  const char *v100;
  const char *v101;
  uint64_t v102;
  unsigned __int8 v103;
  const char *v104;
  uint64_t v105;
  NSObject *v106;
  void **v107;
  float32x2_t v108;
  float64_t v109;
  float64_t v110;
  int8x16_t v111;
  __int128 v112;
  _QWORD v113[5];
  _QWORD v114[5];
  simd_float4x4 v115;
  void *__p[2];
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  _QWORD v120[2];
  __int128 v121;
  __int128 v122;
  _BYTE buf[32];
  float32x4_t v124;
  float32x4_t v125;
  uint64_t v126;
  simd_float4x4 v127;

  v126 = *MEMORY[0x24BDAC8D0];
  sub_2393ED54C(*(_QWORD *)(a1 + 32));
  v8 = atomic_load((unsigned __int8 *)(a1 + 144));
  v11 = sub_2393EC064(*(_QWORD *)(a1 + 32), v9, v10);
  v12 = atomic_load((unsigned int *)(a1 + 148));
  if ((v8 & 1) != 0)
  {
    if (qword_256930460 != -1)
      dispatch_once(&qword_256930460, &unk_250AD6740);
    v14 = (id)qword_256930458;
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::canRenderDepthImage(const BOOL, const uint32_t, const int, const simd_float4x4 &, const simd_float3x3 &, const CGSize &)");
    if (v117.i8[7] >= 0)
      v32 = __p;
    else
      v32 = (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v32;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = 148;
    v16 = "%s:%{public}d Failed to render depth image - rendering has been stopped.";
    goto LABEL_45;
  }
  if (!v11)
  {
    if (qword_256930460 != -1)
      dispatch_once(&qword_256930460, &unk_250AD6740);
    v13 = (id)qword_256930458;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::canRenderDepthImage(const BOOL, const uint32_t, const int, const simd_float4x4 &, const simd_float3x3 &, const CGSize &)");
      v40 = v117.i8[7] >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v40;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = 154;
      _os_log_error_impl(&dword_239388000, v13, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to render depth image - empty voxel blocks.", buf, 0x12u);
      if (v117.i8[7] < 0)
        operator delete(__p[0]);
    }

  }
  if (v12 >= 1)
  {
    if (qword_256930460 != -1)
      dispatch_once(&qword_256930460, &unk_250AD6740);
    v14 = (id)qword_256930458;
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::canRenderDepthImage(const BOOL, const uint32_t, const int, const simd_float4x4 &, const simd_float3x3 &, const CGSize &)");
    if (v117.i8[7] >= 0)
      v15 = __p;
    else
      v15 = (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v15;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = 159;
    v16 = "%s:%{public}d Failed to render depth image - rendering task already in pipeline.";
LABEL_45:
    _os_log_error_impl(&dword_239388000, v14, OS_LOG_TYPE_ERROR, v16, buf, 0x12u);
    if (v117.i8[7] < 0)
      operator delete(__p[0]);
LABEL_18:

    return;
  }
  if (sub_2393D1B6C(a2, a3, *a4, a4[1]))
  {
    v17 = sub_2393ED2E4(*(_QWORD *)(a1 + 32));
    v20 = *(_DWORD *)objc_msgSend_contents(*(void **)(v17 + 16), v18, v19);
    if (*(_DWORD *)objc_msgSend_contents(*(void **)v17, v21, v22))
      _ZF = v20 == 0;
    else
      _ZF = 1;
    if (_ZF)
    {
      if (qword_256930460 != -1)
        dispatch_once(&qword_256930460, &unk_250AD6740);
      v14 = (id)qword_256930458;
      if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        goto LABEL_18;
      sub_2393C4DD0(__p, "virtual void oc::voxel_hashing::VoxelDepthRendererUsingMesh::renderDepthImage(const simd_float4x4 &, const simd_float3x3 &, const CGSize &)");
      if (v117.i8[7] >= 0)
        v25 = __p;
      else
        v25 = (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v25;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = 123;
      v16 = "%s:%{public}d Failed to render depth image - mesh is empty.";
    }
    else
    {
      v27 = *(int8x16_t *)a3;
      v26 = *(int8x16_t *)(a3 + 16);
      v28 = *(int8x16_t *)(a3 + 32);
      v29 = (float32x2_t)vdup_n_s32(0x38D1B717u);
      v30 = (uint32x2_t)vand_s8((int8x8_t)vcge_f32(v29, vabs_f32(vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL)), (float32x2_t)0xBF80000080000000))), (int8x8_t)vcge_f32(v29, vabs_f32((float32x2_t)vext_s8(*(int8x8_t *)a3, (int8x8_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL), 4uLL))));
      if ((vpmin_u32(v30, v30).u32[0] & 0x80000000) != 0)
      {
        v33 = *a4;
        if (*a4 >= 0.0 && fabs(v33) > 0.000000999999997)
        {
          v34 = a4[1];
          if (v34 >= 0.0 && fabs(v34) > 0.000000999999997)
          {
            v35 = *(double *)(a1 + 56);
            if (v35 >= 0.0 && fabs(v35) > 0.000000999999997)
            {
              v36 = *(double *)(a1 + 64);
              if (v36 >= 0.0 && fabs(v36) > 0.000000999999997)
              {
                *(float *)&v37 = *(float *)v28.i32 + 0.5;
                v38 = v34;
                v39 = v38 - (float)(*(float *)&v28.i32[1] + 0.5);
                v109 = *(double *)(a1 + 64);
                v110 = *(double *)(a1 + 56);
                if (v33 == v35 && v34 == v36)
                {
                  v111 = *(int8x16_t *)a3;
                  v112 = *(_OWORD *)(a3 + 16);
                  *((float *)&v37 + 1) = v39;
                  objc_msgSend_commandBufferWithDescriptor_(*(void **)(*(_QWORD *)(a1 + 48) + 8), v23, *(_QWORD *)(a1 + 328), v37);
                }
                else
                {
                  v41 = *(float *)v27.i32;
                  v42 = *(float *)&v26.i32[1];
                  v43 = *(float *)&v37;
                  v44 = v39;
                  if (v35 / v36 >= v33 / v34)
                  {
                    v45 = v35 / v33;
                    v46 = v35 / v33 * v43;
                    v47 = -(v36 - v34 * v45) * -0.5 + v44 * v45;
                  }
                  else
                  {
                    v45 = v36 / v34;
                    v46 = -(v35 - v33 * (v36 / v34)) * -0.5 + v43 * (v36 / v34);
                    v47 = v36 / v34 * v44;
                  }
                  v48 = v45 * v41;
                  v49 = v48;
                  v50 = v45 * v42;
                  *(float *)v111.i32 = v49;
                  *((float *)&v112 + 1) = v50;
                  *(float *)&v51 = v46;
                  *(float *)&v52 = v47;
                  __asm { FMOV            V2.4S, #1.0 }
                  objc_msgSend_commandBufferWithDescriptor_(*(void **)(*(_QWORD *)(a1 + 48) + 8), v23, *(_QWORD *)(a1 + 328), __PAIR64__(v52, v51));
                }
                v57 = (void *)objc_claimAutoreleasedReturnValue();
                v58.f64[0] = v110;
                if (v57)
                {
                  v58.f64[1] = v109;
                  v59 = vcvt_f32_f64(v58);
                  v127.columns[1].i32[0] = 0;
                  v127.columns[1].i64[1] = 0;
                  v127.columns[0].i32[1] = 0;
                  v127.columns[0].i64[1] = 0;
                  v127.columns[0].f32[0] = (float)(*(float *)v111.i32 + *(float *)v111.i32) / v59.f32[0];
                  v127.columns[1].f32[1] = (float)(*((float *)&v112 + 1) + *((float *)&v112 + 1)) / v59.f32[1];
                  __asm { FMOV            V3.2S, #1.0 }
                  *(float32x2_t *)v127.columns[2].f32 = vsub_f32(_D3, vdiv_f32(vadd_f32(v108, v108), v59));
                  v127.columns[2].i64[1] = 0xBF800000BF80063ELL;
                  v61 = *(float32x4_t *)(a2 + 16);
                  v62 = *(float32x4_t *)(a2 + 32);
                  v63 = *(float32x4_t *)(a2 + 48);
                  v64 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)a2, COERCE_FLOAT(*(_OWORD *)(a1 + 96))), v61, *(float32x2_t *)(a1 + 96), 1), v62, *(float32x4_t *)(a1 + 96), 2), v63, *(float32x4_t *)(a1 + 96), 3);
                  v65 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)a2, COERCE_FLOAT(*(_OWORD *)(a1 + 112))), v61, *(float32x2_t *)(a1 + 112), 1), v62, *(float32x4_t *)(a1 + 112), 2), v63, *(float32x4_t *)(a1 + 112), 3);
                  v66 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)a2, COERCE_FLOAT(*(_OWORD *)(a1 + 128))), v61, *(float32x2_t *)(a1 + 128), 1), v62, *(float32x4_t *)(a1 + 128), 2), v63, *(float32x4_t *)(a1 + 128), 3);
                  *(float32x4_t *)__p = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)a2, COERCE_FLOAT(*(_OWORD *)(a1 + 80))), v61, *(float32x2_t *)(a1 + 80), 1), v62, *(float32x4_t *)(a1 + 80), 2), v63, *(float32x4_t *)(a1 + 80), 3);
                  v117 = v64;
                  v118 = v65;
                  v119 = v66;
                  v127.columns[3] = (simd_float4)xmmword_2393F5510;
                  *(float32x4_t *)buf = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v127.columns[0].u32[0], *(float *)__p), (float32x4_t)v127.columns[1].u64[0], (float32x2_t)__p[0], 1), (float32x4_t)v127.columns[2], *(float32x4_t *)__p, 2), (float32x4_t)xmmword_2393F5510, *(float32x4_t *)__p, 3);
                  *(float32x4_t *)&buf[16] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v127.columns[0].u32[0], v64.f32[0]), (float32x4_t)v127.columns[1].u64[0], *(float32x2_t *)v64.f32, 1), (float32x4_t)v127.columns[2], v64, 2), (float32x4_t)xmmword_2393F5510, v64, 3);
                  v124 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v127.columns[0].u32[0], v65.f32[0]), (float32x4_t)v127.columns[1].u64[0], *(float32x2_t *)v65.f32, 1), (float32x4_t)v127.columns[2], v65, 2), (float32x4_t)xmmword_2393F5510, v65, 3);
                  v125 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v127.columns[0].u32[0], v66.f32[0]), (float32x4_t)v127.columns[1].u64[0], *(float32x2_t *)v66.f32, 1), (float32x4_t)v127.columns[2], v66, 2), (float32x4_t)xmmword_2393F5510, v66, 3);
                  v115 = __invert_f4(v127);
                  v14 = v57;
                  v67 = *(_QWORD *)(*(_QWORD *)(a1 + 168) + 8 * *(_QWORD *)(a1 + 192));
                  objc_msgSend_colorAttachments(*(void **)(a1 + 320), v68, v69);
                  v70 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_objectAtIndexedSubscript_(v70, v71, 0);
                  v72 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_setTexture_(v72, v73, v67);

                  v74 = *(_QWORD *)(*(_QWORD *)(a1 + 240) + 8 * *(_QWORD *)(a1 + 264));
                  objc_msgSend_colorAttachments(*(void **)(a1 + 320), v75, v76);
                  v77 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_objectAtIndexedSubscript_(v77, v78, 1);
                  v79 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_setTexture_(v79, v80, v74);

                  v83 = *(unsigned int *)objc_msgSend_contents(*(void **)(v17 + 16), v81, v82);
                  objc_msgSend_renderCommandEncoderWithDescriptor_(v14, v84, *(_QWORD *)(a1 + 320));
                  v85 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_setLabel_(v85, v86, (uint64_t)CFSTR("RenderDepth Encoder"));
                  objc_msgSend_setRenderPipelineState_(v85, v87, *(_QWORD *)(a1 + 152));
                  objc_msgSend_setDepthStencilState_(v85, v88, *(_QWORD *)(a1 + 312));
                  objc_msgSend_setVertexBuffer_offset_atIndex_(v85, v89, *(_QWORD *)(v17 + 8), 0, 0);
                  objc_msgSend_setVertexBytes_length_atIndex_(v85, v90, (uint64_t)buf, 64, 1);
                  objc_msgSend_setFragmentBytes_length_atIndex_(v85, v91, (uint64_t)&v115, 64, 0);
                  objc_msgSend_setFragmentBytes_length_atIndex_(v85, v92, (uint64_t)__p, 64, 1);
                  objc_msgSend_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset_(v85, v93, 3, v83, 1, *(_QWORD *)(v17 + 24), 0);
                  v120[0] = 0;
                  v120[1] = 0;
                  v121 = *(_OWORD *)(a1 + 56);
                  v122 = xmmword_2393F5400;
                  objc_msgSend_setViewport_(v85, v94, (uint64_t)v120);
                  objc_msgSend_setCullMode_(v85, v95, 2);
                  objc_msgSend_endEncoding(v85, v96, v97);

                  v98 = MEMORY[0x24BDAC760];
                  v114[0] = MEMORY[0x24BDAC760];
                  v114[1] = 3221225472;
                  v114[2] = sub_2393D1770;
                  v114[3] = &unk_250AD6DC0;
                  v114[4] = a1;
                  objc_msgSend_addScheduledHandler_(v14, v99, (uint64_t)v114);
                  v113[0] = v98;
                  v113[1] = 3221225472;
                  v113[2] = sub_2393D178C;
                  v113[3] = &unk_250AD6DC0;
                  v113[4] = a1;
                  objc_msgSend_addCompletedHandler_(v14, v100, (uint64_t)v113);
                  v103 = atomic_load((unsigned __int8 *)(a1 + 144));
                  if ((v103 & 1) == 0)
                  {
                    objc_msgSend_commit(v14, v101, v102);
                    objc_msgSend_waitUntilCompleted(v14, v104, v105);
                  }
                }
                else
                {
                  if (qword_256930460 != -1)
                    dispatch_once(&qword_256930460, &unk_250AD6740);
                  v106 = (id)qword_256930458;
                  if (os_log_type_enabled(v106, OS_LOG_TYPE_ERROR))
                  {
                    sub_2393C4DD0(__p, "virtual void oc::voxel_hashing::VoxelDepthRendererUsingMesh::renderDepthImage(const simd_float4x4 &, const simd_float3x3 &, const CGSize &)");
                    v107 = v117.i8[7] >= 0 ? __p : (void **)__p[0];
                    *(_DWORD *)buf = 136315394;
                    *(_QWORD *)&buf[4] = v107;
                    *(_WORD *)&buf[12] = 1026;
                    *(_DWORD *)&buf[14] = 138;
                    _os_log_error_impl(&dword_239388000, v106, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to render depth image - failed to create command buffer.", buf, 0x12u);
                    if (v117.i8[7] < 0)
                      operator delete(__p[0]);
                  }

                  v14 = 0;
                }
                goto LABEL_18;
              }
            }
          }
        }
      }
      if (qword_256930460 != -1)
        dispatch_once(&qword_256930460, &unk_250AD6740);
      v14 = (id)qword_256930458;
      if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        goto LABEL_18;
      sub_2393C4DD0(__p, "virtual void oc::voxel_hashing::VoxelDepthRendererUsingMesh::renderDepthImage(const simd_float4x4 &, const simd_float3x3 &, const CGSize &)");
      if (v117.i8[7] >= 0)
        v31 = __p;
      else
        v31 = (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v31;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = 131;
      v16 = "%s:%{public}d Failed to render depth image - projection matrix is invalid.";
    }
    goto LABEL_45;
  }
}

void sub_2393D0F84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_2393D0FEC(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  id v4;
  NSObject *v5;
  void **v7;
  void *block[2];
  int8x16_t (*v9)(uint64_t);
  void *v10;
  uint64_t v11;
  uint8_t buf[4];
  void **v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 8))
  {
    v2 = a1 + 168;
    v3 = *(NSObject **)(a1 + 216);
    block[0] = (void *)MEMORY[0x24BDAC760];
    block[1] = (void *)3221225472;
    v9 = sub_2393D1750;
    v10 = &unk_250AD6C48;
    v11 = v2;
    dispatch_sync(v3, block);
    v4 = *(id *)(*(_QWORD *)(a1 + 168) + 8 * *(_QWORD *)(a1 + 208));
  }
  else
  {
    if (qword_256930460 != -1)
      dispatch_once(&qword_256930460, &unk_250AD6740);
    v5 = (id)qword_256930458;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      sub_2393C4DD0(block, "virtual id<MTLTexture> oc::voxel_hashing::VoxelDepthRendererUsingMesh::depthTexture()");
      if (SHIBYTE(v9) >= 0)
        v7 = block;
      else
        v7 = (void **)block[0];
      *(_DWORD *)buf = 136315394;
      v13 = v7;
      v14 = 1026;
      v15 = 207;
      _os_log_error_impl(&dword_239388000, v5, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to get depth texture - VoxelDepthRendererUsingMesh not initialized.", buf, 0x12u);
      if (SHIBYTE(v9) < 0)
        operator delete(block[0]);
    }

    v4 = 0;
  }
  return v4;
}

id sub_2393D1164(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  void *v4;
  NSObject *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  id v22;
  void **v24;
  _QWORD v25[3];
  void *v26[3];
  void *__p[2];
  char v28;
  uint8_t buf[4];
  void **v30;
  __int16 v31;
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  sub_2393D0FEC(a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    objc_msgSend_commandBuffer(*(void **)(*(_QWORD *)(a1 + 48) + 8), v2, v3);
    v5 = objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend_width(v4, v6, v7);
    v11 = objc_msgSend_height(v4, v9, v10);
    objc_msgSend_blitCommandEncoder(v5, v12, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    memset(v26, 0, sizeof(v26));
    v25[0] = v8;
    v25[1] = v11;
    v25[2] = 1;
    objc_msgSend_copyFromTexture_sourceSlice_sourceLevel_sourceOrigin_sourceSize_toBuffer_destinationOffset_destinationBytesPerRow_destinationBytesPerImage_(v14, v15, (uint64_t)v4, 0, 0, v26, v25, *(_QWORD *)(a1 + 232), 0, 4 * v8, v11 * 4 * v8);
    objc_msgSend_endEncoding(v14, v16, v17);
    objc_msgSend_commit(v5, v18, v19);
    objc_msgSend_waitUntilCompleted(v5, v20, v21);
    v22 = *(id *)(a1 + 232);

  }
  else
  {
    if (qword_256930460 != -1)
      dispatch_once(&qword_256930460, &unk_250AD6740);
    v5 = (id)qword_256930458;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      sub_2393C4DD0(__p, "virtual id<MTLBuffer> oc::voxel_hashing::VoxelDepthRendererUsingMesh::depthBuffer()");
      if (v28 >= 0)
        v24 = __p;
      else
        v24 = (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      v30 = v24;
      v31 = 1026;
      v32 = 175;
      _os_log_error_impl(&dword_239388000, v5, OS_LOG_TYPE_ERROR, "%s:%{public}d Received invalid texture.", buf, 0x12u);
      if (v28 < 0)
        operator delete(__p[0]);
    }
    v22 = 0;
  }

  return v22;
}

void sub_2393D134C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_2393D138C(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  id v4;
  NSObject *v5;
  void **v7;
  void *block[2];
  int8x16_t (*v9)(uint64_t);
  void *v10;
  uint64_t v11;
  uint8_t buf[4];
  void **v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 8))
  {
    v2 = a1 + 240;
    v3 = *(NSObject **)(a1 + 288);
    block[0] = (void *)MEMORY[0x24BDAC760];
    block[1] = (void *)3221225472;
    v9 = sub_2393D1750;
    v10 = &unk_250AD6C48;
    v11 = v2;
    dispatch_sync(v3, block);
    v4 = *(id *)(*(_QWORD *)(a1 + 240) + 8 * *(_QWORD *)(a1 + 280));
  }
  else
  {
    if (qword_256930460 != -1)
      dispatch_once(&qword_256930460, &unk_250AD6740);
    v5 = (id)qword_256930458;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      sub_2393C4DD0(block, "virtual id<MTLTexture> oc::voxel_hashing::VoxelDepthRendererUsingMesh::normalTexture()");
      if (SHIBYTE(v9) >= 0)
        v7 = block;
      else
        v7 = (void **)block[0];
      *(_DWORD *)buf = 136315394;
      v13 = v7;
      v14 = 1026;
      v15 = 218;
      _os_log_error_impl(&dword_239388000, v5, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to get normal texture - VoxelDepthRendererUsingMesh not initialized.", buf, 0x12u);
      if (SHIBYTE(v9) < 0)
        operator delete(block[0]);
    }

    v4 = 0;
  }
  return v4;
}

id sub_2393D1504(uint64_t a1)
{
  void *v2;
  const char *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  NSObject *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  id v23;
  void **v25;
  _QWORD v26[3];
  void *v27[3];
  void *__p[2];
  char v29;
  uint8_t buf[4];
  void **v31;
  __int16 v32;
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  sub_2393D138C(a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v2;
  if (v2)
  {
    v6 = objc_msgSend_width(v2, v3, v4);
    v9 = objc_msgSend_height(v5, v7, v8);
    objc_msgSend_commandBuffer(*(void **)(*(_QWORD *)(a1 + 48) + 8), v10, v11);
    v12 = objc_claimAutoreleasedReturnValue();
    objc_msgSend_blitCommandEncoder(v12, v13, v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    memset(v27, 0, sizeof(v27));
    v26[0] = v6;
    v26[1] = v9;
    v26[2] = 1;
    objc_msgSend_copyFromTexture_sourceSlice_sourceLevel_sourceOrigin_sourceSize_toBuffer_destinationOffset_destinationBytesPerRow_destinationBytesPerImage_(v15, v16, (uint64_t)v5, 0, 0, v27, v26, *(_QWORD *)(a1 + 304), 0, 16 * v6, v9 * 16 * v6);
    objc_msgSend_endEncoding(v15, v17, v18);
    objc_msgSend_commit(v12, v19, v20);
    objc_msgSend_waitUntilCompleted(v12, v21, v22);
    v23 = *(id *)(a1 + 304);

  }
  else
  {
    if (qword_256930460 != -1)
      dispatch_once(&qword_256930460, &unk_250AD6740);
    v12 = (id)qword_256930458;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      sub_2393C4DD0(__p, "virtual id<MTLBuffer> oc::voxel_hashing::VoxelDepthRendererUsingMesh::normalBuffer()");
      if (v29 >= 0)
        v25 = __p;
      else
        v25 = (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      v31 = v25;
      v32 = 1026;
      v33 = 230;
      _os_log_error_impl(&dword_239388000, v12, OS_LOG_TYPE_ERROR, "%s:%{public}d Received invalid texture.", buf, 0x12u);
      if (v29 < 0)
        operator delete(__p[0]);
    }
    v23 = 0;
  }

  return v23;
}

void sub_2393D16E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2393D1720()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.CoreOCModules", "VoxelHashing");
  v1 = (void *)qword_256930458;
  qword_256930458 = (uint64_t)v0;

}

int8x16_t sub_2393D1750(uint64_t a1)
{
  int8x16_t *v1;
  int8x16_t result;

  v1 = *(int8x16_t **)(a1 + 32);
  if (v1[3].i8[8])
  {
    result = vextq_s8(v1[2], v1[2], 8uLL);
    v1[2] = result;
    v1[3].i8[8] = 0;
  }
  return result;
}

uint64_t sub_2393D1770(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(*(_QWORD *)(result + 32) + 148);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return result;
}

void sub_2393D178C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t block;
  uint64_t v14;
  int8x16_t (*v15)(uint64_t);
  void *v16;
  uint64_t v17;

  v3 = *(_QWORD *)(a1 + 32);
  objc_msgSend_error(a2, (const char *)a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v4;
  if (v4)
  {
    sub_2393D1870(v4, v5, v6);
  }
  else
  {
    v8 = MEMORY[0x24BDAC760];
    v9 = *(NSObject **)(v3 + 216);
    block = MEMORY[0x24BDAC760];
    v14 = 3221225472;
    v15 = sub_2393D1B20;
    v16 = &unk_250AD6C48;
    v17 = v3 + 168;
    dispatch_sync(v9, &block);
    v10 = *(NSObject **)(v3 + 288);
    block = v8;
    v14 = 3221225472;
    v15 = sub_2393D1B20;
    v16 = &unk_250AD6C48;
    v17 = v3 + 240;
    dispatch_sync(v10, &block);
  }

  v11 = (unsigned int *)(v3 + 148);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
}

void sub_2393D1860(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2393D1870(void *a1, const char *a2, uint64_t a3)
{
  void *v3;
  const char *v4;
  void *v5;
  id v6;
  const char *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  const char *v15;
  uint64_t v16;
  NSObject *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint8_t buf[4];
  void *v30;
  _BYTE v31[128];
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  objc_msgSend_userInfo(a1, a2, a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v3, v4, *MEMORY[0x24BDDD128]);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v6 = v5;
  v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v7, (uint64_t)&v25, v31, 16);
  if (v10)
  {
    v12 = *(_QWORD *)v26;
    *(_QWORD *)&v11 = 138543362;
    v24 = v11;
    do
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v26 != v12)
          objc_enumerationMutation(v6);
        v14 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * i);
        if (objc_msgSend_errorState(v14, v8, v9, v24, (_QWORD)v25) == 4)
        {
          if (qword_256930470 != -1)
            dispatch_once(&qword_256930470, &unk_250AD6760);
          v17 = (id)qword_256930468;
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          {
            objc_msgSend_label(v14, v18, v19);
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = v24;
            v30 = v20;
            _os_log_error_impl(&dword_239388000, v17, OS_LOG_TYPE_ERROR, "%{public}@ has faulted", buf, 0xCu);

          }
LABEL_4:

          continue;
        }
        if (objc_msgSend_errorState(v14, v15, v16) == 2)
        {
          if (qword_256930470 != -1)
            dispatch_once(&qword_256930470, &unk_250AD6760);
          v17 = (id)qword_256930468;
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          {
            objc_msgSend_label(v14, v21, v22);
            v23 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = v24;
            v30 = v23;
            _os_log_error_impl(&dword_239388000, v17, OS_LOG_TYPE_ERROR, "%{public}@ has been affected", buf, 0xCu);

          }
          goto LABEL_4;
        }
      }
      v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v8, (uint64_t)&v25, v31, 16);
    }
    while (v10);
  }

}

void sub_2393D1AD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

int8x16_t sub_2393D1B20(uint64_t a1)
{
  uint64_t v1;
  int8x16_t result;

  v1 = *(_QWORD *)(a1 + 32);
  result = vextq_s8(*(int8x16_t *)(v1 + 24), *(int8x16_t *)(v1 + 24), 8uLL);
  *(int8x16_t *)(v1 + 24) = result;
  *(_BYTE *)(v1 + 56) = 1;
  return result;
}

void sub_2393D1B3C()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.CoreOCModules", "General");
  v1 = (void *)qword_256930468;
  qword_256930468 = (uint64_t)v0;

}

uint64_t sub_2393D1B6C(uint64_t a1, uint64_t a2, double a3, double a4)
{
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  uint32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  uint32x4_t v15;
  float32x4_t v16;
  float32x2_t v17;
  float32x2_t v18;
  uint32x2_t v19;
  NSObject *v20;
  void **v22;
  const char *v23;
  uint32x2_t v24;
  void **v25;
  void **v26;
  void *__p[2];
  char v28;
  uint8_t buf[4];
  void **v30;
  __int16 v31;
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v4 = *(float32x4_t *)a1;
  v5 = *(float32x4_t *)(a1 + 16);
  v6 = *(float32x4_t *)(a1 + 32);
  v7 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 16);
  v8 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 32);
  v9 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
  v10 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v9, vabdq_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v4, *(float32x2_t *)v4.f32, 1), v5, *(float32x2_t *)v5.f32, 1), v6, *(float32x2_t *)v6.f32, 1), v7)), (int8x16_t)vcgeq_f32(v9, vabdq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v4, v4.f32[0]), v5, v5.f32[0]),
                                         v6,
                                         v6.f32[0]),
                                       *MEMORY[0x24BDAEDF8]))),
                      (int8x16_t)vcgeq_f32(v9, vabdq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v4, v4, 2), v5, v5, 2), v6, v6, 2), v8)));
  v10.i32[3] = v10.i32[2];
  if ((vminvq_u32(v10) & 0x80000000) == 0)
    goto LABEL_5;
  v11 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v5, 2);
  v12 = (float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)v4, (int32x4_t)v6), (int32x4_t)v11);
  v13 = (float32x4_t)vtrn2q_s32((int32x4_t)v4, (int32x4_t)v5);
  v13.i32[2] = HIDWORD(*(_QWORD *)(a1 + 32));
  v14 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)v4, (int32x4_t)v6), (int32x4_t)v5);
  v15 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v9, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v14, v5.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 1), v13), v11, v12), v7)), (int8x16_t)vcgeq_f32(v9, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v14, v4.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v4.f32, 1),
                                           v13),
                                         (float32x4_t)vdupq_laneq_s32((int32x4_t)v4, 2),
                                         v12),
                                       *MEMORY[0x24BDAEDF8]))),
                      (int8x16_t)vcgeq_f32(v9, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v14, v6.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v6.f32, 1), v13), (float32x4_t)vdupq_laneq_s32((int32x4_t)v6, 2), v12), v8)));
  v15.i32[3] = v15.i32[2];
  if ((vminvq_u32(v15) & 0x80000000) == 0
    || (v16 = vmulq_f32(v4, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v6, (int8x16_t)v6, 0xCuLL), (int8x16_t)v6, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v5, (int32x4_t)v5), (int8x16_t)v5, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v6, (int32x4_t)v6), (int8x16_t)v6, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v5, (int8x16_t)v5, 0xCuLL), (int8x16_t)v5, 8uLL))), fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1))).f32[0]+ -1.0) > 0.000011)|| (v17 = vabs_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v4, (int8x16_t)v4, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v5, (int8x16_t)v5, 8uLL))), v18 = (float32x2_t)vdup_n_s32(0x38D1B717u),
        v19 = (uint32x2_t)vand_s8((int8x8_t)vcge_f32(v18, vabs_f32(vadd_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v6, (int8x16_t)v6, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(a1 + 48), *(int8x16_t *)(a1 + 48), 8uLL)), (float32x2_t)0xBF80000080000000))), (int8x8_t)vcge_f32(v18, v17)), (vpmin_u32(v19, v19).u32[0] & 0x80000000) == 0))
  {
LABEL_5:
    if (qword_256930460 != -1)
      dispatch_once(&qword_256930460, &unk_250AD6740);
    v20 = (id)qword_256930458;
    if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      goto LABEL_8;
    sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::isValidInputForRenderDepthImage(const simd_float4x4 &, const simd_float3x3 &, const CGSize &)");
    if (v28 >= 0)
      v22 = __p;
    else
      v22 = (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v30 = v22;
    v31 = 1026;
    v32 = 114;
    v23 = "%s:%{public}d Failed to render depth image - invalid viewMatrix.";
LABEL_13:
    _os_log_error_impl(&dword_239388000, v20, OS_LOG_TYPE_ERROR, v23, buf, 0x12u);
    if (v28 < 0)
      operator delete(__p[0]);
LABEL_8:

    return 0;
  }
  v24 = (uint32x2_t)vand_s8((int8x8_t)vcge_f32(v18, vabs_f32(vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)(a2 + 24), *(int32x2_t *)(a2 + 40)), (float32x2_t)0xBF80000080000000))), (int8x8_t)vcge_f32(v18, vabs_f32((float32x2_t)vext_s8(*(int8x8_t *)a2, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a2, *(int8x16_t *)a2, 8uLL), 4uLL))));
  if ((vpmin_u32(v24, v24).u32[0] & 0x80000000) == 0)
  {
    if (qword_256930460 != -1)
      dispatch_once(&qword_256930460, &unk_250AD6740);
    v20 = (id)qword_256930458;
    if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      goto LABEL_8;
    sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::isValidInputForRenderDepthImage(const simd_float4x4 &, const simd_float3x3 &, const CGSize &)");
    if (v28 >= 0)
      v25 = __p;
    else
      v25 = (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v30 = v25;
    v31 = 1026;
    v32 = 120;
    v23 = "%s:%{public}d Failed to render depth image - invalid camera intrinsics.";
    goto LABEL_13;
  }
  if (a3 < 0.0 || fabs(a3) <= 0.000000999999997 || a4 < 0.0 || fabs(a4) <= 0.000000999999997)
  {
    if (qword_256930460 != -1)
      dispatch_once(&qword_256930460, &unk_250AD6740);
    v20 = (id)qword_256930458;
    if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      goto LABEL_8;
    sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::isValidInputForRenderDepthImage(const simd_float4x4 &, const simd_float3x3 &, const CGSize &)");
    if (v28 >= 0)
      v26 = __p;
    else
      v26 = (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v30 = v26;
    v31 = 1026;
    v32 = 127;
    v23 = "%s:%{public}d Failed to render depth image - invalid render image size.";
    goto LABEL_13;
  }
  return 1;
}

uint64_t sub_2393D1FE0(uint64_t a1)
{
  id v2;
  const char *v3;
  const char *v4;
  const char *v5;
  const char *v6;
  const char *v7;
  const char *v8;
  id v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  void *v14;
  const char *v15;
  const char *v16;
  const char *v17;
  const char *v18;
  const char *v19;
  const char *v20;
  const char *v21;
  uint64_t (***v22)();
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  const char *v26;
  const char *v27;
  const char *v28;
  const char *v29;
  const char *v30;
  void **v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  void ***v35;
  uint64_t v36;
  void **v38;
  void **v39;
  void *v40;
  void *v41;
  __int128 v42;
  void **v43;
  _BYTE buf[24];
  _BYTE *v45;
  uint64_t (**v46)();
  __int128 v47;
  uint64_t (***v48)();
  void **v49;
  __int128 v50;
  void **v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v2 = objc_alloc_init(MEMORY[0x24BDDD740]);
  v40 = v2;
  if (!v2)
  {
    if (qword_256930460 != -1)
      dispatch_once(&qword_256930460, &unk_250AD6740);
    v24 = (id)qword_256930458;
    if (!os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      goto LABEL_16;
    sub_2393C4DD0(&v49, "BOOL oc::voxel_hashing::VoxelDepthRendererUsingMesh::createTextures()");
    v38 = v50 >= 0 ? (void **)&v49 : v49;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v38;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = 290;
    _os_log_error_impl(&dword_239388000, v24, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create textureDescriptor.", buf, 0x12u);
    if ((SHIBYTE(v50) & 0x80000000) == 0)
      goto LABEL_16;
    goto LABEL_45;
  }
  objc_msgSend_setTextureType_(v2, v3, 2);
  objc_msgSend_setPixelFormat_(v40, v4, 252);
  objc_msgSend_setWidth_(v40, v5, *(_QWORD *)(a1 + 16));
  objc_msgSend_setHeight_(v40, v6, *(_QWORD *)(a1 + 24));
  objc_msgSend_setUsage_(v40, v7, 5);
  if (*(_BYTE *)(*(_QWORD *)(a1 + 48) + 24))
    objc_msgSend_setStorageMode_(v40, v8, 3);
  else
    objc_msgSend_setStorageMode_(v40, v8, 2);
  v9 = **(id **)(a1 + 48);
  v11 = objc_msgSend_newTextureWithDescriptor_(v9, v10, (uint64_t)v40);
  v12 = *(void **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v11;

  v14 = *(void **)(a1 + 160);
  if (v14)
  {
    objc_msgSend_setLabel_(v14, v13, (uint64_t)CFSTR("renderDepthTexture"));
    objc_msgSend_setTextureType_(v40, v15, 2);
    objc_msgSend_setPixelFormat_(v40, v16, 55);
    objc_msgSend_setWidth_(v40, v17, *(_QWORD *)(a1 + 16));
    objc_msgSend_setHeight_(v40, v18, *(_QWORD *)(a1 + 24));
    objc_msgSend_setUsage_(v40, v19, 5);
    objc_msgSend_setStorageMode_(v40, v20, 0);
    v49 = (void **)&off_250AD6790;
    *(_QWORD *)&v50 = a1;
    *((_QWORD *)&v50 + 1) = &v40;
    v51 = (void **)&v49;
    v48 = &v46;
    v46 = &off_250AD6790;
    v47 = v50;
    sub_2393D3064((void ***)(a1 + 168), (uint64_t)&v46);
    v22 = v48;
    if (v48 == &v46)
    {
      v23 = 4;
      v22 = &v46;
    }
    else
    {
      if (!v48)
        goto LABEL_19;
      v23 = 5;
    }
    (*v22)[v23]();
LABEL_19:
    objc_msgSend_setTextureType_(v40, v21, 2);
    objc_msgSend_setPixelFormat_(v40, v26, 125);
    objc_msgSend_setWidth_(v40, v27, *(_QWORD *)(a1 + 16));
    objc_msgSend_setHeight_(v40, v28, *(_QWORD *)(a1 + 24));
    objc_msgSend_setUsage_(v40, v29, 5);
    objc_msgSend_setStorageMode_(v40, v30, 0);
    *(_QWORD *)buf = &unk_250AD67D8;
    *(_QWORD *)&buf[8] = a1;
    *(_QWORD *)&buf[16] = &v40;
    v45 = buf;
    v43 = &v41;
    v41 = &unk_250AD67D8;
    v42 = *(_OWORD *)&buf[8];
    sub_2393D3064((void ***)(a1 + 240), (uint64_t)&v41);
    v31 = v43;
    if (v43 == &v41)
    {
      v32 = 4;
      v31 = &v41;
    }
    else
    {
      if (!v43)
        goto LABEL_24;
      v32 = 5;
    }
    (*((void (**)(void))*v31 + v32))();
LABEL_24:
    v33 = v45;
    if (v45 == buf)
    {
      v34 = 4;
      v33 = buf;
    }
    else
    {
      if (!v45)
        goto LABEL_29;
      v34 = 5;
    }
    (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_29:
    v35 = (void ***)v51;
    if (v51 == (void **)&v49)
    {
      v36 = 4;
      v35 = &v49;
    }
    else
    {
      if (!v51)
      {
LABEL_34:
        v25 = 1;
        goto LABEL_35;
      }
      v36 = 5;
    }
    ((void (*)(void))(*v35)[v36])();
    goto LABEL_34;
  }
  if (qword_256930460 != -1)
    dispatch_once(&qword_256930460, &unk_250AD6740);
  v24 = (id)qword_256930458;
  if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
  {
    sub_2393C4DD0(&v49, "BOOL oc::voxel_hashing::VoxelDepthRendererUsingMesh::createTextures()");
    v39 = v50 >= 0 ? (void **)&v49 : v49;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v39;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = 302;
    _os_log_error_impl(&dword_239388000, v24, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create renderDepthTexture.", buf, 0x12u);
    if (SHIBYTE(v50) < 0)
LABEL_45:
      operator delete(v49);
  }
LABEL_16:

  v25 = 0;
LABEL_35:

  return v25;
}

void sub_2393D2430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, char a11, uint64_t a12, uint64_t a13, char *a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  char *v18;
  uint64_t v19;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;

  v21 = a14;
  if (a14 == v18)
  {
    v22 = 4;
    v21 = &a11;
  }
  else
  {
    if (!a14)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  v23 = a18;
  if (a18 == &a15)
  {
    v24 = 4;
    v23 = &a15;
  }
  else
  {
    if (!a18)
      goto LABEL_11;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_11:
  v25 = *(_QWORD **)(v19 - 32);
  if (v25 == (_QWORD *)(v19 - 56))
  {
    v26 = 4;
    v25 = (_QWORD *)(v19 - 56);
  }
  else
  {
    if (!v25)
      goto LABEL_16;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_16:

  _Unwind_Resume(a1);
}

uint64_t sub_2393D2510(uint64_t a1, const char *a2)
{
  const char *v3;
  void *v4;
  NSObject *v5;
  id v6;
  const char *v7;
  void *v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  void *v17;
  const char *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  void *v26;
  const char *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  id v32;
  const char *v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t *v36;
  void *v37;
  uint64_t v38;
  NSObject *v39;
  _BYTE *v41;
  _BYTE *v42;
  _BYTE *v43;
  int v44;
  _BYTE *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  _BYTE *v50;
  id v51;
  _BYTE buf[12];
  __int16 v53;
  int v54;
  char v55;
  _BYTE __p[12];
  __int16 v57;
  int v58;
  __int16 v59;
  uint64_t v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  v4 = (void *)objc_msgSend_newFunctionWithName_(*(void **)(*(_QWORD *)(a1 + 48) + 16), a2, (uint64_t)CFSTR("oc::voxel_hashing::vertexShaderForMesh"));
  if (v4)
  {
    v5 = objc_msgSend_newFunctionWithName_(*(void **)(*(_QWORD *)(a1 + 48) + 16), v3, (uint64_t)CFSTR("oc::voxel_hashing::fragmentShaderForMesh"));
    if (!v5)
    {
      if (qword_256930460 != -1)
        dispatch_once(&qword_256930460, &unk_250AD6740);
      v35 = (id)qword_256930458;
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      {
        sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::VoxelDepthRendererUsingMesh::createPipelines()");
        v42 = (v60 & 0x80000000) == 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v42;
        v53 = 1026;
        v54 = 364;
        _os_log_error_impl(&dword_239388000, v35, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to find fragmentShaderForMesh fragment shader.", buf, 0x12u);
        if (SBYTE3(v60) < 0)
          operator delete(*(void **)__p);
      }
      v38 = 0;
      goto LABEL_23;
    }
    v6 = objc_alloc_init(MEMORY[0x24BDDD6B8]);
    v8 = v6;
    if (v6)
    {
      objc_msgSend_setVertexFunction_(v6, v7, (uint64_t)v4);
      objc_msgSend_setFragmentFunction_(v8, v9, (uint64_t)v5);
      v12 = objc_msgSend_pixelFormat(*(void **)(*(_QWORD *)(a1 + 168) + 8 * *(_QWORD *)(a1 + 208)), v10, v11);
      objc_msgSend_colorAttachments(v8, v13, v14);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectAtIndexedSubscript_(v15, v16, 0);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setPixelFormat_(v17, v18, v12);

      v21 = objc_msgSend_pixelFormat(*(void **)(*(_QWORD *)(a1 + 240) + 8 * *(_QWORD *)(a1 + 280)), v19, v20);
      objc_msgSend_colorAttachments(v8, v22, v23);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectAtIndexedSubscript_(v24, v25, 1);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setPixelFormat_(v26, v27, v21);

      v30 = objc_msgSend_pixelFormat(*(void **)(a1 + 160), v28, v29);
      objc_msgSend_setDepthAttachmentPixelFormat_(v8, v31, v30);
      v32 = **(id **)(a1 + 48);
      v51 = 0;
      v34 = objc_msgSend_newRenderPipelineStateWithDescriptor_error_(v32, v33, (uint64_t)v8, &v51);
      v35 = v51;
      v37 = *(void **)(a1 + 152);
      v36 = (uint64_t *)(a1 + 152);
      *v36 = v34;

      if (*v36)
      {
        v38 = 1;
LABEL_22:

LABEL_23:
        goto LABEL_24;
      }
      if (qword_256930460 != -1)
        dispatch_once(&qword_256930460, &unk_250AD6740);
      v39 = (id)qword_256930458;
      if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
      {
        sub_2393C4DD0(buf, "BOOL oc::voxel_hashing::VoxelDepthRendererUsingMesh::createPipelines()");
        v44 = v55;
        v45 = *(_BYTE **)buf;
        objc_msgSend_localizedDescription(v35, v46, v47);
        v48 = objc_claimAutoreleasedReturnValue();
        v49 = (void *)v48;
        if (v44 >= 0)
          v50 = buf;
        else
          v50 = v45;
        *(_DWORD *)__p = 136315650;
        *(_QWORD *)&__p[4] = v50;
        v57 = 1026;
        v58 = 382;
        v59 = 2114;
        v60 = v48;
        _os_log_error_impl(&dword_239388000, v39, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create render pipeline state. Error details: %{public}@", __p, 0x1Cu);

        if (v55 < 0)
          operator delete(*(void **)buf);
      }
    }
    else
    {
      if (qword_256930460 != -1)
        dispatch_once(&qword_256930460, &unk_250AD6740);
      v39 = (id)qword_256930458;
      if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
      {
        sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::VoxelDepthRendererUsingMesh::createPipelines()");
        v43 = (v60 & 0x80000000) == 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v43;
        v53 = 1026;
        v54 = 370;
        _os_log_error_impl(&dword_239388000, v39, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create render pipeline descriptor.", buf, 0x12u);
        if (SBYTE3(v60) < 0)
          operator delete(*(void **)__p);
      }
      v35 = 0;
    }

    v38 = 0;
    goto LABEL_22;
  }
  if (qword_256930460 != -1)
    dispatch_once(&qword_256930460, &unk_250AD6740);
  v5 = (id)qword_256930458;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::VoxelDepthRendererUsingMesh::createPipelines()");
    v41 = (v60 & 0x80000000) == 0 ? __p : *(_BYTE **)__p;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v41;
    v53 = 1026;
    v54 = 357;
    _os_log_error_impl(&dword_239388000, v5, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to find vertexShaderForMesh vertex shader.", buf, 0x12u);
    if (SBYTE3(v60) < 0)
      operator delete(*(void **)__p);
  }
  v38 = 0;
LABEL_24:

  return v38;
}

void sub_2393D2A24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  int v7;

  if (v7 < 0)
    operator delete(v6);

  _Unwind_Resume(a1);
}

uint64_t sub_2393D2AA8(uint64_t a1)
{
  id v2;
  const char *v3;
  void *v4;
  const char *v5;
  id v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  void **v12;
  const char *v13;
  void **v15;
  void *__p[2];
  char v17;
  uint8_t buf[4];
  void **v19;
  __int16 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v2 = objc_alloc_init(MEMORY[0x24BDDD590]);
  v4 = v2;
  if (!v2)
  {
    if (qword_256930460 != -1)
      dispatch_once(&qword_256930460, &unk_250AD6740);
    v11 = (id)qword_256930458;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      goto LABEL_14;
    sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::VoxelDepthRendererUsingMesh::createDepthStencilStates()");
    if (v17 >= 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v19 = v12;
    v20 = 1026;
    v21 = 395;
    v13 = "%s:%{public}d Failed to create depth stencil descriptor.";
    goto LABEL_20;
  }
  objc_msgSend_setDepthCompareFunction_(v2, v3, 1);
  objc_msgSend_setDepthWriteEnabled_(v4, v5, 1);
  v6 = **(id **)(a1 + 48);
  v8 = objc_msgSend_newDepthStencilStateWithDescriptor_(v6, v7, (uint64_t)v4);
  v9 = *(void **)(a1 + 312);
  *(_QWORD *)(a1 + 312) = v8;

  if (!*(_QWORD *)(a1 + 312))
  {
    if (qword_256930460 != -1)
      dispatch_once(&qword_256930460, &unk_250AD6740);
    v11 = (id)qword_256930458;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      goto LABEL_14;
    sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::VoxelDepthRendererUsingMesh::createDepthStencilStates()");
    if (v17 >= 0)
      v15 = __p;
    else
      v15 = (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v19 = v15;
    v20 = 1026;
    v21 = 404;
    v13 = "%s:%{public}d Failed to create depth stencil state.";
LABEL_20:
    _os_log_error_impl(&dword_239388000, v11, OS_LOG_TYPE_ERROR, v13, buf, 0x12u);
    if (v17 < 0)
      operator delete(__p[0]);
LABEL_14:

    v10 = 0;
    goto LABEL_15;
  }
  v10 = 1;
LABEL_15:

  return v10;
}

void sub_2393D2CD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL sub_2393D2CF0(uint64_t a1)
{
  id v2;
  void *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  void *v22;
  const char *v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  void *v35;
  const char *v36;
  const char *v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  void *v41;
  const char *v42;
  const char *v43;
  uint64_t v44;
  void *v45;
  const char *v46;
  void *v47;
  const char *v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  void *v52;
  const char *v53;
  void *v54;
  const char *v55;
  NSObject *v56;
  void **v58;
  void *__p[2];
  char v60;
  uint8_t buf[4];
  void **v62;
  __int16 v63;
  int v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v2 = objc_alloc_init(MEMORY[0x24BDDD690]);
  v3 = *(void **)(a1 + 320);
  *(_QWORD *)(a1 + 320) = v2;

  v6 = *(_QWORD *)(a1 + 320);
  if (v6)
  {
    objc_msgSend_depthAttachment(*(void **)(a1 + 320), v4, v5);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setLoadAction_(v7, v8, 2);

    objc_msgSend_depthAttachment(*(void **)(a1 + 320), v9, v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setStoreAction_(v11, v12, 0);

    v13 = *(_QWORD *)(a1 + 160);
    objc_msgSend_depthAttachment(*(void **)(a1 + 320), v14, v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setTexture_(v16, v17, v13);

    objc_msgSend_colorAttachments(*(void **)(a1 + 320), v18, v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v20, v21, 0);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setLoadAction_(v22, v23, 2);

    objc_msgSend_colorAttachments(*(void **)(a1 + 320), v24, v25);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v26, v27, 0);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setClearColor_(v28, v29, v30, 0.0, 0.0, 0.0, 0.0);

    objc_msgSend_colorAttachments(*(void **)(a1 + 320), v31, v32);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v33, v34, 0);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setStoreAction_(v35, v36, 1);

    objc_msgSend_colorAttachments(*(void **)(a1 + 320), v37, v38);
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v39, v40, 1);
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setLoadAction_(v41, v42, 2);

    objc_msgSend_colorAttachments(*(void **)(a1 + 320), v43, v44);
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v45, v46, 1);
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setClearColor_(v47, v48, v49, 0.0, 0.0, 0.0, 0.0);

    objc_msgSend_colorAttachments(*(void **)(a1 + 320), v50, v51);
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v52, v53, 1);
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setStoreAction_(v54, v55, 1);

  }
  else
  {
    if (qword_256930460 != -1)
      dispatch_once(&qword_256930460, &unk_250AD6740);
    v56 = (id)qword_256930458;
    if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
    {
      sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::VoxelDepthRendererUsingMesh::createRenderPassDescriptors()");
      if (v60 >= 0)
        v58 = __p;
      else
        v58 = (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      v62 = v58;
      v63 = 1026;
      v64 = 415;
      _os_log_error_impl(&dword_239388000, v56, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create render pass descriptor.", buf, 0x12u);
      if (v60 < 0)
        operator delete(__p[0]);
    }

  }
  return v6 != 0;
}

void sub_2393D2FC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_2393D3024()
{
  if (qword_256930460 != -1)
    dispatch_once(&qword_256930460, &unk_250AD6740);
  return (id)qword_256930458;
}

void sub_2393D3064(void ***a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v3 = *(_QWORD *)(a2 + 24);
  if (!v3)
    goto LABEL_5;
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = **a1;
  **a1 = (void *)v5;

  v7 = *(_QWORD *)(a2 + 24);
  if (!v7
    || ((*(void (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7),
        v8 = objc_claimAutoreleasedReturnValue(),
        v9 = (*a1)[1],
        (*a1)[1] = (void *)v8,
        v9,
        (v10 = *(_QWORD *)(a2 + 24)) == 0))
  {
LABEL_5:
    sub_2393BA8D0();
    JUMPOUT(0x2393D30FCLL);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10);
  v11 = objc_claimAutoreleasedReturnValue();
  v12 = (*a1)[2];
  (*a1)[2] = (void *)v11;

}

void sub_2393D3100()
{
  JUMPOUT(0x23B83C4BCLL);
}

__n128 sub_2393D3114(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_250AD67D8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_2393D314C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_250AD67D8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

id sub_2393D316C(uint64_t a1, const char *a2)
{
  const char *v2;
  void *v3;
  NSObject *v4;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v3 = (void *)objc_msgSend_newTextureWithDescriptor_(**(void ***)(*(_QWORD *)(a1 + 8) + 48), a2, **(_QWORD **)(a1 + 16));
  if (!v3)
  {
    if (qword_256930460 != -1)
      dispatch_once(&qword_256930460, &unk_250AD6740);
    v4 = qword_256930458;
    if (os_log_type_enabled((os_log_t)qword_256930458, OS_LOG_TYPE_ERROR))
    {
      v6 = 136315394;
      v7 = "VoxelDepthRendererUsingMesh::createTextures";
      v8 = 1026;
      v9 = 337;
      _os_log_error_impl(&dword_239388000, v4, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create depthTexture.", (uint8_t *)&v6, 0x12u);
    }
  }
  objc_msgSend_setLabel_(v3, v2, (uint64_t)CFSTR("normalTexture"));
  return v3;
}

void sub_2393D3278(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2393D3294()
{
  JUMPOUT(0x23B83C4BCLL);
}

__n128 sub_2393D32A8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_250AD6790;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_2393D32E0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250AD6790;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

id sub_2393D3300(uint64_t a1, const char *a2)
{
  const char *v2;
  void *v3;
  NSObject *v4;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v3 = (void *)objc_msgSend_newTextureWithDescriptor_(**(void ***)(*(_QWORD *)(a1 + 8) + 48), a2, **(_QWORD **)(a1 + 16));
  if (!v3)
  {
    if (qword_256930460 != -1)
      dispatch_once(&qword_256930460, &unk_250AD6740);
    v4 = qword_256930458;
    if (os_log_type_enabled((os_log_t)qword_256930458, OS_LOG_TYPE_ERROR))
    {
      v6 = 136315394;
      v7 = "VoxelDepthRendererUsingMesh::createTextures";
      v8 = 1026;
      v9 = 318;
      _os_log_error_impl(&dword_239388000, v4, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create depthTexture.", (uint8_t *)&v6, 0x12u);
    }
  }
  objc_msgSend_setLabel_(v3, v2, (uint64_t)CFSTR("depthTexture"));
  return v3;
}

void sub_2393D340C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_2393D3424(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::chrono::nanoseconds __ns;

  atomic_store(1u, (unsigned __int8 *)(a1 + 144));
  v2 = atomic_load((unsigned int *)(a1 + 148));
  if (v2 >= 1)
  {
    do
    {
      __ns.__rep_ = 1000000;
      std::this_thread::sleep_for (&__ns);
      v3 = atomic_load((unsigned int *)(a1 + 148));
    }
    while (v3 > 0);
  }

  v4 = *(_QWORD *)(a1 + 240);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 248);
    v6 = *(void **)(a1 + 240);
    if (v5 != v4)
    {
      do
      {
        v7 = *(void **)(v5 - 8);
        v5 -= 8;

      }
      while (v5 != v4);
      v6 = *(void **)(a1 + 240);
    }
    *(_QWORD *)(a1 + 248) = v4;
    operator delete(v6);
  }

  v8 = *(_QWORD *)(a1 + 168);
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 176);
    v10 = *(void **)(a1 + 168);
    if (v9 != v8)
    {
      do
      {
        v11 = *(void **)(v9 - 8);
        v9 -= 8;

      }
      while (v9 != v8);
      v10 = *(void **)(a1 + 168);
    }
    *(_QWORD *)(a1 + 176) = v8;
    operator delete(v10);
  }

  v12 = *(std::__shared_weak_count **)(a1 + 40);
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  return a1;
}

void sub_2393D357C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2393D35D8((char **)(v1 + 240));
  sub_2393D35D8((char **)(v1 + 168));

  sub_2393BB9F0(v1 + 32);
  _Unwind_Resume(a1);
}

char **sub_2393D35D8(char **a1)
{
  char *v2;
  char *v3;
  char *v4;
  void *v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 1);
        v3 -= 8;

      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_2393D363C(uint64_t a1)
{
  _QWORD *v2;
  dispatch_queue_t v3;
  void *v4;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = xmmword_2393F5520;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  v2 = operator new(0x18uLL);
  *v2 = 0;
  v2[1] = 0;
  v2[2] = 0;
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2 + 3;
  *(_QWORD *)(a1 + 16) = v2 + 3;
  v3 = dispatch_queue_create("com.apple.coreocmodules.voxelHashing_tripleBuffer_serial_queue", 0);
  v4 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v3;

  return a1;
}

void sub_2393D36B8(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v3;
  char *v4;
  void *v5;
  void *v6;

  v3 = (char *)*v1;
  if (*v1)
  {
    v4 = (char *)v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 1);
        v4 -= 8;

      }
      while (v4 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_2393D36FC(uint64_t a1)
{
  sub_2393DA1D0(a1);
  JUMPOUT(0x23B83C4BCLL);
}

uint64_t sub_2393D3720(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  float v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  int8x16_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  _BYTE *v25;
  NSObject *v26;
  _BYTE *v27;
  const char *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  void *v33;
  const char *v34;
  void *v35;
  _BYTE *v36;
  _BYTE *v37;
  _BYTE *v38;
  _BYTE *v39;
  _BYTE *v40;
  _BYTE *v41;
  _BYTE *v42;
  _BYTE *v43;
  _BYTE __p[28];
  char v45;
  _BYTE buf[12];
  __int16 v47;
  int v48;
  char v49;
  uint8_t v50[4];
  _BYTE *v51;
  __int16 v52;
  int v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  if (sub_2393BFCC4((uint64_t)a2))
  {
    v4 = *a2;
    v5 = a2[1];
    v6 = a2[3];
    *(_OWORD *)(a1 + 544) = a2[2];
    *(_OWORD *)(a1 + 560) = v6;
    *(_OWORD *)(a1 + 512) = v4;
    *(_OWORD *)(a1 + 528) = v5;
    v7 = a2[4];
    v8 = a2[5];
    v9 = a2[7];
    *(_OWORD *)(a1 + 608) = a2[6];
    *(_OWORD *)(a1 + 624) = v9;
    *(_OWORD *)(a1 + 576) = v7;
    *(_OWORD *)(a1 + 592) = v8;
    if (*(_QWORD *)(a1 + 32))
    {
      v10 = *(_QWORD *)(a1 + 16);
      if (v10 && *(_BYTE *)(v10 + 8))
      {
        if (*(_BYTE *)(a1 + 8))
        {
          if (qword_256930480 != -1)
            dispatch_once(&qword_256930480, &unk_250AD68B8);
          v11 = (id)qword_256930478;
          if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
            goto LABEL_21;
          sub_2393C4DD0(__p, "virtual BOOL oc::voxel_hashing::VoxelIntegratorGPU::init(const InitConfig &)");
          v39 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v39;
          v47 = 1026;
          v48 = 66;
          _os_log_error_impl(&dword_239388000, v11, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to initialize VoxelIntegratorGPU - already initialized.", buf, 0x12u);
          if ((__p[23] & 0x80000000) == 0)
            goto LABEL_21;
          goto LABEL_64;
        }
        v14 = *(float *)(a1 + 624);
        v15 = *(float32x4_t *)(a1 + 544);
        v16.i64[0] = 0x3F0000003F000000;
        v16.i64[1] = 0x3F0000003F000000;
        v17.i64[0] = 0xBF000000BF000000;
        v17.i64[1] = 0xBF000000BF000000;
        *(float32x4_t *)(a1 + 48) = vmulq_f32(v15, v16);
        *(float32x4_t *)(a1 + 64) = vmulq_f32(v15, v17);
        sub_2393EC230((uint64_t)__p, v10);
        if (v45)
        {
          *(_OWORD *)(a1 + 96) = *(_OWORD *)__p;
          *(_OWORD *)(a1 + 108) = *(_OWORD *)&__p[12];
          v18 = *(int8x16_t *)(a1 + 520);
          *(int8x16_t *)(a1 + 124) = vextq_s8(v18, v18, 8uLL);
          *(float32x2_t *)(a1 + 140) = vmul_n_f32(*(float32x2_t *)v18.i8, 1.0 / v14);
          *(_DWORD *)(a1 + 148) = 64;
          v19 = *(_OWORD *)(a1 + 576);
          *(_OWORD *)(a1 + 224) = *(_OWORD *)(a1 + 560);
          *(_OWORD *)(a1 + 240) = v19;
          v20 = *(_OWORD *)(a1 + 608);
          *(_OWORD *)(a1 + 256) = *(_OWORD *)(a1 + 592);
          *(_OWORD *)(a1 + 272) = v20;
          *(_DWORD *)(a1 + 288) = *(_DWORD *)&__p[16];
          *(_QWORD *)(a1 + 292) = *(_QWORD *)(a1 + 624);
          v21 = *(unsigned int *)(a1 + 512);
          if (v21 > 5)
          {
            v24 = 0;
            v23 = 0;
          }
          else
          {
            v22 = 4 * v21;
            v23 = *(_DWORD *)((char *)&unk_2393F9C70 + v22);
            v24 = *(_DWORD *)((char *)&unk_2393F9C88 + v22);
          }
          *(_DWORD *)(a1 + 300) = v23;
          *(_DWORD *)(a1 + 304) = *(_DWORD *)(a1 + 632);
          *(_BYTE *)(a1 + 308) = *(_BYTE *)(a1 + 638);
          *(_DWORD *)(a1 + 440) = v24;
          v29 = *(uint64_t **)(a1 + 320);
          v30 = *v29;
          v31 = v29[1];
          if (v30 == v31 || *(_DWORD *)(a1 + 120) != ((unint64_t)(v31 - v30) >> 3))
          {
            sub_2393D6724();
            v26 = objc_claimAutoreleasedReturnValue();
            if (!os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
              goto LABEL_53;
            sub_2393C4DD0(buf, "virtual BOOL oc::voxel_hashing::VoxelIntegratorGPU::init(const InitConfig &)");
            if (v49 >= 0)
              v42 = buf;
            else
              v42 = *(_BYTE **)buf;
            *(_DWORD *)v50 = 136315394;
            v51 = v42;
            v52 = 1026;
            v53 = 116;
            v28 = "%s:%{public}d Failed to initialize VoxelIntegratorGPU - hashtable extents is empty.";
          }
          else if ((sub_2393D79B4(a1, (int *)(a1 + 516)) & 1) != 0)
          {
            if ((sub_2393D90E8(a1) & 1) != 0)
            {
              if (*(_BYTE *)(a1 + 639) && !sub_2393D9980(a1))
                return 0;
              v32 = objc_alloc_init(MEMORY[0x24BDDD508]);
              v33 = *(void **)(a1 + 400);
              *(_QWORD *)(a1 + 400) = v32;

              v35 = *(void **)(a1 + 400);
              if (v35)
              {
                v12 = 1;
                objc_msgSend_setErrorOptions_(v35, v34, 1);
                sub_2393D9FE0((uint64_t *)buf);
                sub_2393DA120((uint64_t *)(a1 + 640), (uint64_t *)buf);
                sub_2393DA17C((uint64_t *)buf);
                *(_BYTE *)(a1 + 8) = 1;
                sub_2393D6724();
                v26 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
                {
                  sub_2393C4DD0(buf, "virtual BOOL oc::voxel_hashing::VoxelIntegratorGPU::init(const InitConfig &)");
                  if (v49 >= 0)
                    v36 = buf;
                  else
                    v36 = *(_BYTE **)buf;
                  *(_DWORD *)v50 = 136315394;
                  v51 = v36;
                  v52 = 1026;
                  v53 = 151;
                  _os_log_debug_impl(&dword_239388000, v26, OS_LOG_TYPE_DEBUG, "%s:%{public}d Successfully Initialized VoxelIntegratorGPU.", v50, 0x12u);
                  if (v49 < 0)
                    operator delete(*(void **)buf);
                  v12 = 1;
                }
                goto LABEL_54;
              }
              sub_2393D6724();
              v26 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
              {
                sub_2393C4DD0(buf, "virtual BOOL oc::voxel_hashing::VoxelIntegratorGPU::init(const InitConfig &)");
                if (v49 >= 0)
                  v43 = buf;
                else
                  v43 = *(_BYTE **)buf;
                *(_DWORD *)v50 = 136315394;
                v51 = v43;
                v52 = 1026;
                v53 = 141;
                v28 = "%s:%{public}d Failed to initialize VoxelIntegratorGPU - failed to create command buffer descriptor.";
                goto LABEL_84;
              }
LABEL_53:
              v12 = 0;
LABEL_54:

              return v12;
            }
            sub_2393D6724();
            v26 = objc_claimAutoreleasedReturnValue();
            if (!os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
              goto LABEL_53;
            sub_2393C4DD0(buf, "virtual BOOL oc::voxel_hashing::VoxelIntegratorGPU::init(const InitConfig &)");
            if (v49 >= 0)
              v41 = buf;
            else
              v41 = *(_BYTE **)buf;
            *(_DWORD *)v50 = 136315394;
            v51 = v41;
            v52 = 1026;
            v53 = 128;
            v28 = "%s:%{public}d Failed to initialize VoxelIntegratorGPU - failed to create metal buffers.";
          }
          else
          {
            sub_2393D6724();
            v26 = objc_claimAutoreleasedReturnValue();
            if (!os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
              goto LABEL_53;
            sub_2393C4DD0(buf, "virtual BOOL oc::voxel_hashing::VoxelIntegratorGPU::init(const InitConfig &)");
            if (v49 >= 0)
              v40 = buf;
            else
              v40 = *(_BYTE **)buf;
            *(_DWORD *)v50 = 136315394;
            v51 = v40;
            v52 = 1026;
            v53 = 122;
            v28 = "%s:%{public}d Failed to initialize VoxelIntegratorGPU - failed to create pipeline states.";
          }
        }
        else
        {
          sub_2393D6724();
          v26 = objc_claimAutoreleasedReturnValue();
          if (!os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
            goto LABEL_53;
          sub_2393C4DD0(buf, "virtual BOOL oc::voxel_hashing::VoxelIntegratorGPU::init(const InitConfig &)");
          if (v49 >= 0)
            v27 = buf;
          else
            v27 = *(_BYTE **)buf;
          *(_DWORD *)v50 = 136315394;
          v51 = v27;
          v52 = 1026;
          v53 = 78;
          v28 = "%s:%{public}d Failed to initialize VoxelIntegratorGPU - failed to get hash table parameters.";
        }
LABEL_84:
        _os_log_error_impl(&dword_239388000, v26, OS_LOG_TYPE_ERROR, v28, v50, 0x12u);
        if (v49 < 0)
          operator delete(*(void **)buf);
        goto LABEL_53;
      }
      if (qword_256930480 != -1)
        dispatch_once(&qword_256930480, &unk_250AD68B8);
      v11 = (id)qword_256930478;
      if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        goto LABEL_21;
      sub_2393C4DD0(__p, "virtual BOOL oc::voxel_hashing::VoxelIntegratorGPU::init(const InitConfig &)");
      v37 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v37;
      v47 = 1026;
      v48 = 60;
      _os_log_error_impl(&dword_239388000, v11, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to initialize VoxelIntegratorGPU - invalid voxelHashingData or it's not initialized.", buf, 0x12u);
      if ((__p[23] & 0x80000000) == 0)
        goto LABEL_21;
    }
    else
    {
      if (qword_256930480 != -1)
        dispatch_once(&qword_256930480, &unk_250AD68B8);
      v11 = (id)qword_256930478;
      if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        goto LABEL_21;
      sub_2393C4DD0(__p, "virtual BOOL oc::voxel_hashing::VoxelIntegratorGPU::init(const InitConfig &)");
      v38 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v38;
      v47 = 1026;
      v48 = 53;
      _os_log_error_impl(&dword_239388000, v11, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to initialize VoxelIntegratorGPU - failed to get MTLDeviceContext.", buf, 0x12u);
      if ((__p[23] & 0x80000000) == 0)
        goto LABEL_21;
    }
  }
  else
  {
    if (qword_256930480 != -1)
      dispatch_once(&qword_256930480, &unk_250AD68B8);
    v11 = (id)qword_256930478;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      goto LABEL_21;
    sub_2393C4DD0(__p, "virtual BOOL oc::voxel_hashing::VoxelIntegratorGPU::init(const InitConfig &)");
    v25 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v25;
    v47 = 1026;
    v48 = 45;
    _os_log_error_impl(&dword_239388000, v11, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to initialize VoxelIntegratorGPU - invalid init config.", buf, 0x12u);
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_21;
  }
LABEL_64:
  operator delete(*(void **)__p);
LABEL_21:

  return 0;
}

uint64_t sub_2393D3F60(float32x4_t *a1, float32x4_t *a2)
{
  float32x4_t v2;
  NSObject *v4;
  void **v5;
  void **v6;
  void *__p[2];
  char v8;
  uint8_t buf[4];
  void **v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (!a1->i8[8])
  {
    if (qword_256930480 != -1)
      dispatch_once(&qword_256930480, &unk_250AD68B8);
    v4 = (id)qword_256930478;
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      goto LABEL_13;
    sub_2393C4DD0(__p, "virtual BOOL oc::voxel_hashing::VoxelIntegratorGPU::reset(const VoxelIntegrator::ResetConfig &)");
    v5 = v8 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v10 = v5;
    v11 = 1026;
    v12 = 159;
    _os_log_error_impl(&dword_239388000, v4, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to reset VoxelIntegratorGPU - not initialized.", buf, 0x12u);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_23;
  }
  if (a2->f32[0] > 0.0 && a2->f32[1] > 0.0 && a2->f32[2] > 0.0)
  {
    v2.i64[0] = 0x3F0000003F000000;
    v2.i64[1] = 0x3F0000003F000000;
    a1[3] = vmulq_f32(*a2, v2);
    v2.i64[0] = 0xBF000000BF000000;
    v2.i64[1] = 0xBF000000BF000000;
    a1[4] = vmulq_f32(*a2, v2);
    a1[34] = *a2;
    return 1;
  }
  if (qword_256930480 != -1)
    dispatch_once(&qword_256930480, &unk_250AD68B8);
  v4 = (id)qword_256930478;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    sub_2393C4DD0(__p, "virtual BOOL oc::voxel_hashing::VoxelIntegratorGPU::reset(const VoxelIntegrator::ResetConfig &)");
    v6 = v8 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v10 = v6;
    v11 = 1026;
    v12 = 165;
    _os_log_error_impl(&dword_239388000, v4, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to reset VoxelIntegratorGPU - reset config is invalid.", buf, 0x12u);
    if (v8 < 0)
LABEL_23:
      operator delete(__p[0]);
  }
LABEL_13:

  return 0;
}

uint64_t sub_2393D419C(uint64_t a1, float32x2_t *a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  unsigned int v26;
  unint64_t v27;
  float32x4_t *v28;
  float32x4_t v29;
  float32x4_t v30;
  uint64_t v31;
  __int128 v32;
  NSObject *v33;
  void *p_p;
  const char *v35;
  void *v36;
  void *v37;
  id v38;
  id v39;
  const char *v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  const char *v44;
  const char *v45;
  const char *v46;
  const char *v47;
  void *v48;
  const char *v49;
  const char *v50;
  const char *v51;
  const char *v52;
  void *v53;
  const char *v54;
  void *v55;
  const char *v56;
  const char *v57;
  void *v58;
  const char *v59;
  void *v60;
  const char *v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  const char *v65;
  const char *v66;
  uint64_t v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  const char *v71;
  uint64_t v72;
  const char *v73;
  uint64_t v74;
  const char *v75;
  uint64_t v76;
  void *v77;
  NSObject *v78;
  void *v79;
  const char *v80;
  NSObject *v82;
  void *v83;
  void *v84;
  void *__p;
  int64x2_t v86;
  int v87;
  _BYTE buf[24];
  uint64_t v89;

  v89 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 8))
  {
    if (qword_256930480 != -1)
      dispatch_once(&qword_256930480, &unk_250AD68B8);
    v33 = (id)qword_256930478;
    if (!os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      goto LABEL_46;
    sub_2393C4DD0(&__p, "virtual BOOL oc::voxel_hashing::VoxelIntegratorGPU::integratePointCloud(const simd_float4x4 &, const uint32_t, const common::Point *, const common::PointSupplements *)");
    if (v86.i8[15] >= 0)
      p_p = &__p;
    else
      p_p = __p;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = p_p;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = 183;
    v35 = "%s:%{public}d VoxelIntegratorGPU not initialized.";
    goto LABEL_33;
  }
  v5 = a5;
  v6 = a4;
  if (!sub_2393BEC08((uint64_t)a2, a3, a4, a5, *(_DWORD *)(a1 + 440)))
    return 0;
  *(_DWORD *)(a1 + 408) = 0;
  v10 = *(float32x4_t *)(a1 + 224);
  v11 = *(float32x4_t *)(a1 + 240);
  v12 = *(float32x4_t *)(a1 + 256);
  v13 = *(float32x4_t *)(a1 + 272);
  v14 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v10, COERCE_FLOAT(*(_OWORD *)a2->f32)), v11, *a2, 1), v12, *(float32x4_t *)a2->f32, 2), v13, *(float32x4_t *)a2->f32, 3);
  v15 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v10, COERCE_FLOAT(*(_OWORD *)a2[2].f32)), v11, a2[2], 1), v12, *(float32x4_t *)a2[2].f32, 2), v13, *(float32x4_t *)a2[2].f32, 3);
  v16 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v10, COERCE_FLOAT(*(_OWORD *)a2[4].f32)), v11, a2[4], 1), v12, *(float32x4_t *)a2[4].f32, 2), v13, *(float32x4_t *)a2[4].f32, 3);
  v17 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v10, COERCE_FLOAT(*(_OWORD *)a2[6].f32)), v11, a2[6], 1), v12, *(float32x4_t *)a2[6].f32, 2), v13, *(float32x4_t *)a2[6].f32, 3);
  *(float32x4_t *)(a1 + 160) = v14;
  *(float32x4_t *)(a1 + 176) = v15;
  *(float32x4_t *)(a1 + 192) = v16;
  *(float32x4_t *)(a1 + 208) = v17;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)a2[6].f32;
  v20 = 0;
  if (sub_2393D5C78(a1, a3, (float32x4_t *)v6, v5))
  {
    if (!*(_BYTE *)(a1 + 639))
      sub_2393D67E8(a1, a3, v6);
    v21 = objc_msgSend_contents(*(void **)(a1 + 448), v18, v19);
    v24 = objc_msgSend_contents(*(void **)(a1 + 456), v22, v23);
    *(_DWORD *)(a1 + 444) = 0;
    if (a3)
    {
      v26 = 0;
      v27 = 0;
      do
      {
        if (((*(_QWORD *)(*(_QWORD *)(a1 + 416) + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v27) & 1) != 0)
        {
          v28 = (float32x4_t *)(v21 + 48 * v26);
          v29 = *(float32x4_t *)v6;
          v30 = *(float32x4_t *)(v6 + 32);
          v28[1] = *(float32x4_t *)(v6 + 16);
          v28[2] = v30;
          *v28 = v29;
          v31 = v24 + 20 * *(unsigned int *)(a1 + 444);
          v32 = *(_OWORD *)v5;
          *(_DWORD *)(v31 + 16) = *(_DWORD *)(v5 + 16);
          *(_OWORD *)v31 = v32;
          v26 = *(_DWORD *)(a1 + 444) + 1;
          *(_DWORD *)(a1 + 444) = v26;
        }
        ++v27;
        v6 += 48;
        v5 += 20;
      }
      while (a3 != v27);
      if (v26)
      {
        objc_msgSend_commandBufferWithDescriptor_(*(void **)(*(_QWORD *)(a1 + 32) + 8), v25, *(_QWORD *)(a1 + 400));
        v33 = objc_claimAutoreleasedReturnValue();
        if (v33)
        {
          sub_2393D6260(a1, v33);
          v36 = *(void **)(a1 + 448);
          v37 = *(void **)(a1 + 456);
          v87 = *(_DWORD *)(a1 + 444);
          v38 = v36;
          v39 = v37;
          objc_msgSend_computeCommandEncoder(v33, v40, v41);
          v42 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setLabel_(v42, v43, (uint64_t)CFSTR("integrateVoxelsBetweenCameraAndEndPoints Encoder"));
          objc_msgSend_setComputePipelineState_(v42, v44, *(_QWORD *)(a1 + 352));
          objc_msgSend_setBytes_length_atIndex_(v42, v45, a1 + 48, 272, 0);
          objc_msgSend_setBytes_length_atIndex_(v42, v46, **(_QWORD **)(a1 + 320), *(_QWORD *)(*(_QWORD *)(a1 + 320) + 8) - **(_QWORD **)(a1 + 320), 1);
          objc_msgSend_setBytes_length_atIndex_(v42, v47, a1 + 408, 4, 2);
          sub_2393ED1B8(*(_QWORD *)(a1 + 16));
          v48 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setBuffer_offset_atIndex_(v42, v49, (uint64_t)v48, 0, 3);

          objc_msgSend_setBytes_length_atIndex_(v42, v50, (uint64_t)&v87, 4, 4);
          objc_msgSend_setBuffer_offset_atIndex_(v42, v51, (uint64_t)v38, 0, 5);
          objc_msgSend_setBuffer_offset_atIndex_(v42, v52, (uint64_t)v39, 0, 6);
          sub_2393EC380(*(_QWORD *)(a1 + 16));
          v53 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setBuffer_offset_atIndex_(v42, v54, (uint64_t)v53, 0, 7);

          sub_2393EC4AC(*(_QWORD *)(a1 + 16));
          v55 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setBuffer_offset_atIndex_(v42, v56, (uint64_t)v55, 0, 8);

          objc_msgSend_setBuffer_offset_atIndex_(v42, v57, *(_QWORD *)(a1 + 488), 0, 9);
          sub_2393ECA98(*(_QWORD *)(a1 + 16));
          v58 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setBuffer_offset_atIndex_(v42, v59, (uint64_t)v58, 0, 10);

          sub_2393EC968(*(_QWORD *)(a1 + 16));
          v60 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setBuffer_offset_atIndex_(v42, v61, (uint64_t)v60, 0, 11);

          v64 = objc_msgSend_maxTotalThreadsPerThreadgroup(*(void **)(a1 + 352), v62, v63);
          __p = (void *)*(unsigned int *)(a1 + 444);
          v86 = vdupq_n_s64(1uLL);
          *(_QWORD *)buf = v64;
          *(int64x2_t *)&buf[8] = v86;
          objc_msgSend_dispatchThreads_threadsPerThreadgroup_(v42, v65, (uint64_t)&__p, buf);
          objc_msgSend_endEncoding(v42, v66, v67);

          if (*(_BYTE *)(a1 + 636))
          {
            sub_2393D64B8((uint64_t *)a1, v33, v69);
            sub_2393D65B8((uint64_t *)a1, v33, v70);
          }
          objc_msgSend_addCompletedHandler_(v33, v68, (uint64_t)&unk_250AD6858);
          objc_msgSend_commit(v33, v71, v72);
          objc_msgSend_waitUntilCompleted(v33, v73, v74);
          if ((sub_2393ECF54(*(_QWORD *)(a1 + 16), *(_DWORD *)(a1 + 408)) & 1) != 0)
          {
            kdebug_trace();
            if (sub_2393ED6E8(*(_QWORD *)(a1 + 16), v75, v76))
            {
              kdebug_trace();
              v20 = 1;
LABEL_47:

              return v20;
            }
            sub_2393D6724();
            v82 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v82, OS_LOG_TYPE_ERROR))
            {
              sub_2393C4DD0(&__p, "virtual BOOL oc::voxel_hashing::VoxelIntegratorGPU::integratePointCloud(const simd_float4x4 &, const uint32_t, const common::Point *, const common::PointSupplements *)");
              if (v86.i8[15] >= 0)
                v84 = &__p;
              else
                v84 = __p;
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = v84;
              *(_WORD *)&buf[12] = 1026;
              *(_DWORD *)&buf[14] = 260;
              _os_log_error_impl(&dword_239388000, v82, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to erase hash entries with empty voxelblocks.", buf, 0x12u);
              if (v86.i8[15] < 0)
                operator delete(__p);
            }

            kdebug_trace();
LABEL_46:
            v20 = 0;
            goto LABEL_47;
          }
          if (qword_256930480 != -1)
            dispatch_once(&qword_256930480, &unk_250AD68B8);
          v78 = (id)qword_256930478;
          if (!os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
          {
LABEL_45:

            goto LABEL_46;
          }
          sub_2393C4DD0(&__p, "virtual BOOL oc::voxel_hashing::VoxelIntegratorGPU::integratePointCloud(const simd_float4x4 &, const uint32_t, const common::Point *, const common::PointSupplements *)");
          if (v86.i8[15] >= 0)
            v83 = &__p;
          else
            v83 = __p;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v83;
          *(_WORD *)&buf[12] = 1026;
          *(_DWORD *)&buf[14] = 250;
          v80 = "%s:%{public}d Failed to setLastIntegratedSubmapID.";
        }
        else
        {
          if (qword_256930480 != -1)
            dispatch_once(&qword_256930480, &unk_250AD68B8);
          v78 = (id)qword_256930478;
          if (!os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
            goto LABEL_45;
          sub_2393C4DD0(&__p, "virtual BOOL oc::voxel_hashing::VoxelIntegratorGPU::integratePointCloud(const simd_float4x4 &, const uint32_t, const common::Point *, const common::PointSupplements *)");
          if (v86.i8[15] >= 0)
            v79 = &__p;
          else
            v79 = __p;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v79;
          *(_WORD *)&buf[12] = 1026;
          *(_DWORD *)&buf[14] = 226;
          v80 = "%s:%{public}d Failed to integrate pointcloud - failed to create command buffer.";
        }
        _os_log_error_impl(&dword_239388000, v78, OS_LOG_TYPE_ERROR, v80, buf, 0x12u);
        if (v86.i8[15] < 0)
          operator delete(__p);
        goto LABEL_45;
      }
    }
    if (qword_256930480 != -1)
      dispatch_once(&qword_256930480, &unk_250AD68B8);
    v33 = (id)qword_256930478;
    if (!os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      goto LABEL_46;
    sub_2393C4DD0(&__p, "virtual BOOL oc::voxel_hashing::VoxelIntegratorGPU::integratePointCloud(const simd_float4x4 &, const uint32_t, const common::Point *, const common::PointSupplements *)");
    if (v86.i8[15] >= 0)
      v77 = &__p;
    else
      v77 = __p;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v77;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = 217;
    v35 = "%s:%{public}d Failed to integrate pointcloud - pointcloud does not intersect region of interest.";
LABEL_33:
    _os_log_error_impl(&dword_239388000, v33, OS_LOG_TYPE_ERROR, v35, buf, 0x12u);
    if (v86.i8[15] < 0)
      operator delete(__p);
    goto LABEL_46;
  }
  return v20;
}

void sub_2393D499C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t sub_2393D4A14(uint64_t a1, float32x2_t *a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  unsigned int v26;
  unint64_t v27;
  unsigned int *v28;
  float32x4_t *v29;
  float32x4_t v30;
  float32x4_t v31;
  uint64_t v32;
  __int128 v33;
  NSObject *v34;
  void *p_p;
  const char *v36;
  const char *v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  const char *v41;
  const char *v42;
  const char *v43;
  const char *v44;
  void *v45;
  const char *v46;
  const char *v47;
  const char *v48;
  const char *v49;
  void *v50;
  const char *v51;
  void *v52;
  const char *v53;
  const char *v54;
  void *v55;
  const char *v56;
  void *v57;
  const char *v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  const char *v63;
  uint64_t v64;
  const char *v65;
  uint64_t v66;
  void *v67;
  const char *v68;
  const char *v69;
  const char *v70;
  const char *v71;
  const char *v72;
  void *v73;
  const char *v74;
  const char *v75;
  const char *v76;
  const char *v77;
  void *v78;
  const char *v79;
  void *v80;
  const char *v81;
  const char *v82;
  void *v83;
  const char *v84;
  void *v85;
  const char *v86;
  const char *v87;
  uint64_t v88;
  uint64_t v89;
  const char *v90;
  const char *v91;
  uint64_t v92;
  uint64_t v93;
  const char *v94;
  uint64_t v95;
  const char *v96;
  uint64_t v97;
  const char *v98;
  uint64_t v99;
  void *v100;
  NSObject *v101;
  void *v102;
  const char *v103;
  NSObject *v105;
  void *v106;
  void *v107;
  void *__p;
  int64x2_t v109;
  _BYTE buf[24];
  uint64_t v111;

  v111 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 8))
  {
    if (qword_256930480 != -1)
      dispatch_once(&qword_256930480, &unk_250AD68B8);
    v34 = (id)qword_256930478;
    if (!os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      goto LABEL_48;
    sub_2393C4DD0(&__p, "virtual BOOL oc::voxel_hashing::VoxelIntegratorGPU::integratePointCloudInTruncationRegion(const simd_float4x4 &, const uint32_t, const common::Point *, const common::PointSupplements *)");
    if (v109.i8[15] >= 0)
      p_p = &__p;
    else
      p_p = __p;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = p_p;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = 282;
    v36 = "%s:%{public}d VoxelIntegratorGPU not initialized.";
    goto LABEL_35;
  }
  v5 = a5;
  v6 = a4;
  if (!sub_2393BEC08((uint64_t)a2, a3, a4, a5, *(_DWORD *)(a1 + 440)))
    return 0;
  *(_DWORD *)(a1 + 408) = 0;
  v10 = *(float32x4_t *)(a1 + 224);
  v11 = *(float32x4_t *)(a1 + 240);
  v12 = *(float32x4_t *)(a1 + 256);
  v13 = *(float32x4_t *)(a1 + 272);
  v14 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v10, COERCE_FLOAT(*(_OWORD *)a2->f32)), v11, *a2, 1), v12, *(float32x4_t *)a2->f32, 2), v13, *(float32x4_t *)a2->f32, 3);
  v15 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v10, COERCE_FLOAT(*(_OWORD *)a2[2].f32)), v11, a2[2], 1), v12, *(float32x4_t *)a2[2].f32, 2), v13, *(float32x4_t *)a2[2].f32, 3);
  v16 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v10, COERCE_FLOAT(*(_OWORD *)a2[4].f32)), v11, a2[4], 1), v12, *(float32x4_t *)a2[4].f32, 2), v13, *(float32x4_t *)a2[4].f32, 3);
  v17 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v10, COERCE_FLOAT(*(_OWORD *)a2[6].f32)), v11, a2[6], 1), v12, *(float32x4_t *)a2[6].f32, 2), v13, *(float32x4_t *)a2[6].f32, 3);
  *(float32x4_t *)(a1 + 160) = v14;
  *(float32x4_t *)(a1 + 176) = v15;
  *(float32x4_t *)(a1 + 192) = v16;
  *(float32x4_t *)(a1 + 208) = v17;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)a2[6].f32;
  v20 = 0;
  if (sub_2393D5C78(a1, a3, (float32x4_t *)v6, v5))
  {
    if (!*(_BYTE *)(a1 + 639))
      sub_2393D67E8(a1, a3, v6);
    v21 = objc_msgSend_contents(*(void **)(a1 + 448), v18, v19);
    v24 = objc_msgSend_contents(*(void **)(a1 + 456), v22, v23);
    *(_DWORD *)(a1 + 444) = 0;
    if (a3)
    {
      v26 = 0;
      v27 = 0;
      v28 = (unsigned int *)(a1 + 444);
      do
      {
        if (((*(_QWORD *)(*(_QWORD *)(a1 + 416) + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v27) & 1) != 0)
        {
          v29 = (float32x4_t *)(v21 + 48 * v26);
          v30 = *(float32x4_t *)v6;
          v31 = *(float32x4_t *)(v6 + 32);
          v29[1] = *(float32x4_t *)(v6 + 16);
          v29[2] = v31;
          *v29 = v30;
          v32 = v24 + 20 * *v28;
          v33 = *(_OWORD *)v5;
          *(_DWORD *)(v32 + 16) = *(_DWORD *)(v5 + 16);
          *(_OWORD *)v32 = v33;
          v26 = *v28 + 1;
          *v28 = v26;
        }
        ++v27;
        v6 += 48;
        v5 += 20;
      }
      while (a3 != v27);
      if (v26)
      {
        objc_msgSend_commandBufferWithDescriptor_(*(void **)(*(_QWORD *)(a1 + 32) + 8), v25, *(_QWORD *)(a1 + 400));
        v34 = objc_claimAutoreleasedReturnValue();
        if (v34)
        {
          sub_2393D6260(a1, v34);
          if (*v28)
          {
            objc_msgSend_computeCommandEncoder(v34, v37, v38);
            v39 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_setLabel_(v39, v40, (uint64_t)CFSTR("integrateVoxelsUptoTruncationRegion Encoder"));
            objc_msgSend_setComputePipelineState_(v39, v41, *(_QWORD *)(a1 + 360));
            objc_msgSend_setBytes_length_atIndex_(v39, v42, a1 + 48, 272, 0);
            objc_msgSend_setBytes_length_atIndex_(v39, v43, **(_QWORD **)(a1 + 320), *(_QWORD *)(*(_QWORD *)(a1 + 320) + 8) - **(_QWORD **)(a1 + 320), 1);
            objc_msgSend_setBytes_length_atIndex_(v39, v44, a1 + 408, 4, 2);
            sub_2393ED1B8(*(_QWORD *)(a1 + 16));
            v45 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_setBuffer_offset_atIndex_(v39, v46, (uint64_t)v45, 0, 3);

            objc_msgSend_setBytes_length_atIndex_(v39, v47, a1 + 444, 4, 4);
            objc_msgSend_setBuffer_offset_atIndex_(v39, v48, *(_QWORD *)(a1 + 448), 0, 5);
            objc_msgSend_setBuffer_offset_atIndex_(v39, v49, *(_QWORD *)(a1 + 456), 0, 6);
            sub_2393EC380(*(_QWORD *)(a1 + 16));
            v50 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_setBuffer_offset_atIndex_(v39, v51, (uint64_t)v50, 0, 7);

            sub_2393EC4AC(*(_QWORD *)(a1 + 16));
            v52 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_setBuffer_offset_atIndex_(v39, v53, (uint64_t)v52, 0, 8);

            objc_msgSend_setBuffer_offset_atIndex_(v39, v54, *(_QWORD *)(a1 + 488), 0, 9);
            sub_2393ECA98(*(_QWORD *)(a1 + 16));
            v55 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_setBuffer_offset_atIndex_(v39, v56, (uint64_t)v55, 0, 10);

            sub_2393EC968(*(_QWORD *)(a1 + 16));
            v57 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_setBuffer_offset_atIndex_(v39, v58, (uint64_t)v57, 0, 11);

            v61 = objc_msgSend_maxTotalThreadsPerThreadgroup(*(void **)(a1 + 360), v59, v60);
            __p = (void *)*v28;
            v109 = vdupq_n_s64(1uLL);
            *(_QWORD *)buf = v61;
            *(int64x2_t *)&buf[8] = v109;
            objc_msgSend_dispatchThreads_threadsPerThreadgroup_(v39, v62, (uint64_t)&__p, buf);
            objc_msgSend_endEncoding(v39, v63, v64);

            objc_msgSend_computeCommandEncoder(v34, v65, v66);
            v67 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_setLabel_(v67, v68, (uint64_t)CFSTR("integrateVoxelsInTruncationRegion Encoder"));
            objc_msgSend_setComputePipelineState_(v67, v69, *(_QWORD *)(a1 + 368));
            objc_msgSend_setBytes_length_atIndex_(v67, v70, a1 + 48, 272, 0);
            objc_msgSend_setBytes_length_atIndex_(v67, v71, **(_QWORD **)(a1 + 320), *(_QWORD *)(*(_QWORD *)(a1 + 320) + 8) - **(_QWORD **)(a1 + 320), 1);
            objc_msgSend_setBytes_length_atIndex_(v67, v72, a1 + 408, 4, 2);
            sub_2393ED1B8(*(_QWORD *)(a1 + 16));
            v73 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_setBuffer_offset_atIndex_(v67, v74, (uint64_t)v73, 0, 3);

            objc_msgSend_setBytes_length_atIndex_(v67, v75, a1 + 444, 4, 4);
            objc_msgSend_setBuffer_offset_atIndex_(v67, v76, *(_QWORD *)(a1 + 448), 0, 5);
            objc_msgSend_setBuffer_offset_atIndex_(v67, v77, *(_QWORD *)(a1 + 456), 0, 6);
            sub_2393EC380(*(_QWORD *)(a1 + 16));
            v78 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_setBuffer_offset_atIndex_(v67, v79, (uint64_t)v78, 0, 7);

            sub_2393EC4AC(*(_QWORD *)(a1 + 16));
            v80 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_setBuffer_offset_atIndex_(v67, v81, (uint64_t)v80, 0, 8);

            objc_msgSend_setBuffer_offset_atIndex_(v67, v82, *(_QWORD *)(a1 + 488), 0, 9);
            sub_2393ECA98(*(_QWORD *)(a1 + 16));
            v83 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_setBuffer_offset_atIndex_(v67, v84, (uint64_t)v83, 0, 10);

            sub_2393EC968(*(_QWORD *)(a1 + 16));
            v85 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_setBuffer_offset_atIndex_(v67, v86, (uint64_t)v85, 0, 11);

            v89 = objc_msgSend_maxTotalThreadsPerThreadgroup(*(void **)(a1 + 368), v87, v88);
            __p = (void *)*v28;
            v109 = vdupq_n_s64(1uLL);
            *(_QWORD *)buf = v89;
            *(int64x2_t *)&buf[8] = v109;
            objc_msgSend_dispatchThreads_threadsPerThreadgroup_(v67, v90, (uint64_t)&__p, buf);
            objc_msgSend_endEncoding(v67, v91, v92);

          }
          if (*(_BYTE *)(a1 + 636))
          {
            sub_2393D64B8((uint64_t *)a1, v34, v38);
            sub_2393D65B8((uint64_t *)a1, v34, v93);
          }
          objc_msgSend_addCompletedHandler_(v34, v37, (uint64_t)&unk_250AD6878);
          objc_msgSend_commit(v34, v94, v95);
          objc_msgSend_waitUntilCompleted(v34, v96, v97);
          if ((sub_2393ECF54(*(_QWORD *)(a1 + 16), *(_DWORD *)(a1 + 408)) & 1) != 0)
          {
            kdebug_trace();
            if (sub_2393ED6E8(*(_QWORD *)(a1 + 16), v98, v99))
            {
              kdebug_trace();
              v20 = 1;
LABEL_49:

              return v20;
            }
            sub_2393D6724();
            v105 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v105, OS_LOG_TYPE_ERROR))
            {
              sub_2393C4DD0(&__p, "virtual BOOL oc::voxel_hashing::VoxelIntegratorGPU::integratePointCloudInTruncationRegion(const simd_float4x4 &, const uint32_t, const common::Point *, const common::PointSupplements *)");
              if (v109.i8[15] >= 0)
                v107 = &__p;
              else
                v107 = __p;
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = v107;
              *(_WORD *)&buf[12] = 1026;
              *(_DWORD *)&buf[14] = 364;
              _os_log_error_impl(&dword_239388000, v105, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to erase hash entries with empty voxelblocks.", buf, 0x12u);
              if (v109.i8[15] < 0)
                operator delete(__p);
            }

            kdebug_trace();
LABEL_48:
            v20 = 0;
            goto LABEL_49;
          }
          if (qword_256930480 != -1)
            dispatch_once(&qword_256930480, &unk_250AD68B8);
          v101 = (id)qword_256930478;
          if (!os_log_type_enabled(v101, OS_LOG_TYPE_ERROR))
          {
LABEL_47:

            goto LABEL_48;
          }
          sub_2393C4DD0(&__p, "virtual BOOL oc::voxel_hashing::VoxelIntegratorGPU::integratePointCloudInTruncationRegion(const simd_float4x4 &, const uint32_t, const common::Point *, const common::PointSupplements *)");
          if (v109.i8[15] >= 0)
            v106 = &__p;
          else
            v106 = __p;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v106;
          *(_WORD *)&buf[12] = 1026;
          *(_DWORD *)&buf[14] = 354;
          v103 = "%s:%{public}d Failed to setLastIntegratedSubmapID.";
        }
        else
        {
          if (qword_256930480 != -1)
            dispatch_once(&qword_256930480, &unk_250AD68B8);
          v101 = (id)qword_256930478;
          if (!os_log_type_enabled(v101, OS_LOG_TYPE_ERROR))
            goto LABEL_47;
          sub_2393C4DD0(&__p, "virtual BOOL oc::voxel_hashing::VoxelIntegratorGPU::integratePointCloudInTruncationRegion(const simd_float4x4 &, const uint32_t, const common::Point *, const common::PointSupplements *)");
          if (v109.i8[15] >= 0)
            v102 = &__p;
          else
            v102 = __p;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v102;
          *(_WORD *)&buf[12] = 1026;
          *(_DWORD *)&buf[14] = 326;
          v103 = "%s:%{public}d Failed to integrate pointcloud - Failed to create command buffer.";
        }
        _os_log_error_impl(&dword_239388000, v101, OS_LOG_TYPE_ERROR, v103, buf, 0x12u);
        if (v109.i8[15] < 0)
          operator delete(__p);
        goto LABEL_47;
      }
    }
    if (qword_256930480 != -1)
      dispatch_once(&qword_256930480, &unk_250AD68B8);
    v34 = (id)qword_256930478;
    if (!os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      goto LABEL_48;
    sub_2393C4DD0(&__p, "virtual BOOL oc::voxel_hashing::VoxelIntegratorGPU::integratePointCloudInTruncationRegion(const simd_float4x4 &, const uint32_t, const common::Point *, const common::PointSupplements *)");
    if (v109.i8[15] >= 0)
      v100 = &__p;
    else
      v100 = __p;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v100;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = 317;
    v36 = "%s:%{public}d Failed to integrate pointcloud - pointcloud does not intersect region of interest.";
LABEL_35:
    _os_log_error_impl(&dword_239388000, v34, OS_LOG_TYPE_ERROR, v36, buf, 0x12u);
    if (v109.i8[15] < 0)
      operator delete(__p);
    goto LABEL_48;
  }
  return v20;
}

void sub_2393D53C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_2393D5460(uint64_t a1, float32x2_t *a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  unsigned int v25;
  unint64_t v26;
  unsigned int *v27;
  float32x4_t *v28;
  float32x4_t v29;
  float32x4_t v30;
  uint64_t v31;
  __int128 v32;
  NSObject *v33;
  void *p_p;
  const char *v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  const char *v41;
  const char *v42;
  const char *v43;
  const char *v44;
  void *v45;
  const char *v46;
  const char *v47;
  const char *v48;
  const char *v49;
  void *v50;
  const char *v51;
  void *v52;
  const char *v53;
  const char *v54;
  void *v55;
  const char *v56;
  void *v57;
  const char *v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  const char *v63;
  uint64_t v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  const char *v72;
  uint64_t v73;
  NSObject *v75;
  void *v76;
  const char *v77;
  void *v78;
  NSObject *v79;
  void *v80;
  void *v81;
  void *__p;
  int64x2_t v83;
  _BYTE buf[24];
  uint64_t v85;

  v85 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 8))
  {
    if (qword_256930480 != -1)
      dispatch_once(&qword_256930480, &unk_250AD68B8);
    v33 = (id)qword_256930478;
    if (!os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      goto LABEL_27;
    sub_2393C4DD0(&__p, "virtual BOOL oc::voxel_hashing::VoxelIntegratorGPU::deintegratePointCloudInTruncationRegion(const simd_float4x4 &, const uint32_t, const common::Point *, const common::PointSupplements *)");
    if (v83.i8[15] >= 0)
      p_p = &__p;
    else
      p_p = __p;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = p_p;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = 386;
    v35 = "%s:%{public}d VoxelIntegratorGPU not initialized.";
    goto LABEL_45;
  }
  v5 = a5;
  v6 = a4;
  if (sub_2393BEC08((uint64_t)a2, a3, a4, a5, *(_DWORD *)(a1 + 440)))
  {
    *(_DWORD *)(a1 + 408) = 0;
    v10 = *(float32x4_t *)(a1 + 224);
    v11 = *(float32x4_t *)(a1 + 240);
    v12 = *(float32x4_t *)(a1 + 256);
    v13 = *(float32x4_t *)(a1 + 272);
    v14 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v10, COERCE_FLOAT(*(_OWORD *)a2->f32)), v11, *a2, 1), v12, *(float32x4_t *)a2->f32, 2), v13, *(float32x4_t *)a2->f32, 3);
    v15 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v10, COERCE_FLOAT(*(_OWORD *)a2[2].f32)), v11, a2[2], 1), v12, *(float32x4_t *)a2[2].f32, 2), v13, *(float32x4_t *)a2[2].f32, 3);
    v16 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v10, COERCE_FLOAT(*(_OWORD *)a2[4].f32)), v11, a2[4], 1), v12, *(float32x4_t *)a2[4].f32, 2), v13, *(float32x4_t *)a2[4].f32, 3);
    v17 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v10, COERCE_FLOAT(*(_OWORD *)a2[6].f32)), v11, a2[6], 1), v12, *(float32x4_t *)a2[6].f32, 2), v13, *(float32x4_t *)a2[6].f32, 3);
    *(float32x4_t *)(a1 + 160) = v14;
    *(float32x4_t *)(a1 + 176) = v15;
    *(float32x4_t *)(a1 + 192) = v16;
    *(float32x4_t *)(a1 + 208) = v17;
    *(_OWORD *)(a1 + 80) = *(_OWORD *)a2[6].f32;
    if (sub_2393D5C78(a1, a3, (float32x4_t *)v6, v5))
    {
      v20 = objc_msgSend_contents(*(void **)(a1 + 448), v18, v19);
      v23 = objc_msgSend_contents(*(void **)(a1 + 456), v21, v22);
      *(_DWORD *)(a1 + 444) = 0;
      if (a3)
      {
        v25 = 0;
        v26 = 0;
        v27 = (unsigned int *)(a1 + 444);
        do
        {
          if (((*(_QWORD *)(*(_QWORD *)(a1 + 416) + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v26) & 1) != 0)
          {
            v28 = (float32x4_t *)(v20 + 48 * v25);
            v29 = *(float32x4_t *)v6;
            v30 = *(float32x4_t *)(v6 + 32);
            v28[1] = *(float32x4_t *)(v6 + 16);
            v28[2] = v30;
            *v28 = v29;
            v31 = v23 + 20 * *v27;
            v32 = *(_OWORD *)v5;
            *(_DWORD *)(v31 + 16) = *(_DWORD *)(v5 + 16);
            *(_OWORD *)v31 = v32;
            v25 = *v27 + 1;
            *v27 = v25;
          }
          ++v26;
          v6 += 48;
          v5 += 20;
        }
        while (a3 != v26);
        if (v25)
        {
          objc_msgSend_commandBufferWithDescriptor_(*(void **)(*(_QWORD *)(a1 + 32) + 8), v24, *(_QWORD *)(a1 + 400));
          v33 = objc_claimAutoreleasedReturnValue();
          if (v33)
          {
            sub_2393D6260(a1, v33);
            objc_msgSend_computeCommandEncoder(v33, v37, v38);
            v39 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_setLabel_(v39, v40, (uint64_t)CFSTR("deintegrateVoxelsIntersectingRays Encoder"));
            objc_msgSend_setComputePipelineState_(v39, v41, *(_QWORD *)(a1 + 376));
            objc_msgSend_setBytes_length_atIndex_(v39, v42, a1 + 48, 272, 0);
            objc_msgSend_setBytes_length_atIndex_(v39, v43, **(_QWORD **)(a1 + 320), *(_QWORD *)(*(_QWORD *)(a1 + 320) + 8) - **(_QWORD **)(a1 + 320), 1);
            objc_msgSend_setBytes_length_atIndex_(v39, v44, a1 + 408, 4, 2);
            sub_2393ED1B8(*(_QWORD *)(a1 + 16));
            v45 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_setBuffer_offset_atIndex_(v39, v46, (uint64_t)v45, 0, 3);

            objc_msgSend_setBytes_length_atIndex_(v39, v47, a1 + 444, 4, 4);
            objc_msgSend_setBuffer_offset_atIndex_(v39, v48, *(_QWORD *)(a1 + 448), 0, 5);
            objc_msgSend_setBuffer_offset_atIndex_(v39, v49, *(_QWORD *)(a1 + 456), 0, 6);
            sub_2393EC380(*(_QWORD *)(a1 + 16));
            v50 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_setBuffer_offset_atIndex_(v39, v51, (uint64_t)v50, 0, 7);

            sub_2393EC4AC(*(_QWORD *)(a1 + 16));
            v52 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_setBuffer_offset_atIndex_(v39, v53, (uint64_t)v52, 0, 8);

            objc_msgSend_setBuffer_offset_atIndex_(v39, v54, *(_QWORD *)(a1 + 488), 0, 9);
            sub_2393ECA98(*(_QWORD *)(a1 + 16));
            v55 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_setBuffer_offset_atIndex_(v39, v56, (uint64_t)v55, 0, 10);

            sub_2393EC968(*(_QWORD *)(a1 + 16));
            v57 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_setBuffer_offset_atIndex_(v39, v58, (uint64_t)v57, 0, 11);

            v61 = objc_msgSend_maxTotalThreadsPerThreadgroup(*(void **)(a1 + 376), v59, v60);
            __p = (void *)*v27;
            v83 = vdupq_n_s64(1uLL);
            *(_QWORD *)buf = v61;
            *(int64x2_t *)&buf[8] = v83;
            objc_msgSend_dispatchThreads_threadsPerThreadgroup_(v39, v62, (uint64_t)&__p, buf);
            objc_msgSend_endEncoding(v39, v63, v64);

            if (*(_BYTE *)(a1 + 636))
            {
              sub_2393D64B8((uint64_t *)a1, v33, v66);
              sub_2393D65B8((uint64_t *)a1, v33, v67);
            }
            objc_msgSend_addCompletedHandler_(v33, v65, (uint64_t)&unk_250AD6898);
            objc_msgSend_commit(v33, v68, v69);
            objc_msgSend_waitUntilCompleted(v33, v70, v71);
            if ((sub_2393ECF54(*(_QWORD *)(a1 + 16), *(_DWORD *)(a1 + 408)) & 1) != 0)
            {
              kdebug_trace();
              if (sub_2393ED6E8(*(_QWORD *)(a1 + 16), v72, v73))
              {
                kdebug_trace();
                v36 = 1;
LABEL_28:

                return v36;
              }
              sub_2393D6724();
              v79 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
              {
                sub_2393C4DD0(&__p, "virtual BOOL oc::voxel_hashing::VoxelIntegratorGPU::deintegratePointCloudInTruncationRegion(const simd_float4x4 &, const uint32_t, const common::Point *, const common::PointSupplements *)");
                if (v83.i8[15] >= 0)
                  v81 = &__p;
                else
                  v81 = __p;
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = v81;
                *(_WORD *)&buf[12] = 1026;
                *(_DWORD *)&buf[14] = 446;
                _os_log_error_impl(&dword_239388000, v79, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to erase hash entries with empty voxelblocks.", buf, 0x12u);
                if (v83.i8[15] < 0)
                  operator delete(__p);
              }

              kdebug_trace();
LABEL_27:
              v36 = 0;
              goto LABEL_28;
            }
            if (qword_256930480 != -1)
              dispatch_once(&qword_256930480, &unk_250AD68B8);
            v75 = (id)qword_256930478;
            if (!os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
            {
LABEL_40:

              goto LABEL_27;
            }
            sub_2393C4DD0(&__p, "virtual BOOL oc::voxel_hashing::VoxelIntegratorGPU::deintegratePointCloudInTruncationRegion(const simd_float4x4 &, const uint32_t, const common::Point *, const common::PointSupplements *)");
            if (v83.i8[15] >= 0)
              v80 = &__p;
            else
              v80 = __p;
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = v80;
            *(_WORD *)&buf[12] = 1026;
            *(_DWORD *)&buf[14] = 436;
            v77 = "%s:%{public}d Failed to setLastIntegratedSubmapID.";
          }
          else
          {
            if (qword_256930480 != -1)
              dispatch_once(&qword_256930480, &unk_250AD68B8);
            v75 = (id)qword_256930478;
            if (!os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
              goto LABEL_40;
            sub_2393C4DD0(&__p, "virtual BOOL oc::voxel_hashing::VoxelIntegratorGPU::deintegratePointCloudInTruncationRegion(const simd_float4x4 &, const uint32_t, const common::Point *, const common::PointSupplements *)");
            if (v83.i8[15] >= 0)
              v76 = &__p;
            else
              v76 = __p;
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = v76;
            *(_WORD *)&buf[12] = 1026;
            *(_DWORD *)&buf[14] = 412;
            v77 = "%s:%{public}d Failed to deintegrate pointcloud - Failed to create command buffer.";
          }
          _os_log_error_impl(&dword_239388000, v75, OS_LOG_TYPE_ERROR, v77, buf, 0x12u);
          if (v83.i8[15] < 0)
            operator delete(__p);
          goto LABEL_40;
        }
      }
    }
    if (qword_256930480 != -1)
      dispatch_once(&qword_256930480, &unk_250AD68B8);
    v33 = (id)qword_256930478;
    if (!os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      goto LABEL_27;
    sub_2393C4DD0(&__p, "virtual BOOL oc::voxel_hashing::VoxelIntegratorGPU::deintegratePointCloudInTruncationRegion(const simd_float4x4 &, const uint32_t, const common::Point *, const common::PointSupplements *)");
    if (v83.i8[15] >= 0)
      v78 = &__p;
    else
      v78 = __p;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v78;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = 403;
    v35 = "%s:%{public}d Failed to deintegrate pointcloud - processed pointcloud is empty.";
LABEL_45:
    _os_log_error_impl(&dword_239388000, v33, OS_LOG_TYPE_ERROR, v35, buf, 0x12u);
    if (v83.i8[15] < 0)
      operator delete(__p);
    goto LABEL_27;
  }
  return 0;
}

void sub_2393D5C30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL sub_2393D5C78(uint64_t a1, unsigned int a2, float32x4_t *a3, uint64_t a4)
{
  unint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  float v13;
  float v14;
  float v15;
  int v16;
  float32x4_t *v17;
  uint64_t v18;
  float *v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  _BOOL4 v23;
  float v24;
  float v25;
  _BOOL4 v26;
  int v27;
  char v28;
  BOOL v29;
  float v30;
  char v31;
  float32x4_t v32;
  _BOOL4 v33;
  char v34;
  char v35;
  unint64_t v36;
  uint64_t v37;
  NSObject *v38;
  NSObject *v39;
  NSObject *v40;
  NSObject *v41;
  NSObject *v42;
  NSObject *v43;
  double v45;
  double v46;
  double v47;
  int v48;
  const char *v49;
  __int16 v50;
  int v51;
  __int16 v52;
  double v53;
  __int16 v54;
  double v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)(a1 + 444) = 0;
  if (a2)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = *(float *)(a1 + 124);
    v14 = *(float *)(a1 + 128);
    v15 = *(float *)(a1 + 304);
    v16 = *(_DWORD *)(a1 + 516);
    v17 = a3 + 1;
    v18 = *(_QWORD *)(a1 + 416);
    v19 = (float *)(a4 + 8);
    v20 = a2;
    do
    {
      v22 = -v17[-1].f32[2];
      v23 = v14 > v22;
      if (v13 < v22)
        v23 = 1;
      v24 = v19[1];
      v25 = fabsf(v24);
      v26 = v24 <= 1.0;
      if (fabsf(v24 + -1.0) <= 0.000011)
        v26 = 1;
      v27 = v7 + v26;
      v28 = !v26;
      v29 = v24 > 0.0 && v25 > 0.000001;
      if (v29)
        v7 = v27;
      if (!v29)
        v28 = 1;
      v30 = *(v19 - 1);
      if (v30 >= v15)
        ++v8;
      if (v16 && (v16 != 1 || *(v19 - 2) <= 0.0))
      {
        v31 = 1;
      }
      else
      {
        v31 = 0;
        ++v10;
      }
      v32 = vmulq_f32(*v17, *v17);
      v33 = fabsf(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v32, 2), vaddq_f32(v32, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.f32, 1))).f32[0])+ -1.0) > 0.000011;
      if (fabsf(COERCE_FLOAT(HIDWORD(*(unsigned __int128 *)v17))) > 0.000001)
        v33 = 1;
      v34 = v31 | v28;
      if (!*(_BYTE *)v19)
        v34 = 1;
      v35 = v34 | v23 | v33;
      v36 = v5 >> 6;
      v37 = 1 << v5;
      if ((v35 & 1) != 0 || v30 < v15)
      {
        v21 = *(_QWORD *)(v18 + 8 * v36) & ~v37;
      }
      else
      {
        v21 = *(_QWORD *)(v18 + 8 * v36) | v37;
        ++v12;
      }
      v6 += !v23;
      v9 += *(unsigned __int8 *)v19;
      v11 += !v33;
      *(_QWORD *)(v18 + 8 * v36) = v21;
      ++v5;
      v17 += 3;
      v19 += 5;
    }
    while (v20 != v5);
    if (v6)
    {
LABEL_37:
      if (v7)
        goto LABEL_42;
      goto LABEL_38;
    }
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
  }
  if (qword_256930480 != -1)
    dispatch_once(&qword_256930480, &unk_250AD68B8);
  v38 = qword_256930478;
  if (!os_log_type_enabled((os_log_t)qword_256930478, OS_LOG_TYPE_ERROR))
    goto LABEL_37;
  v45 = *(float *)(a1 + 128);
  v46 = *(float *)(a1 + 124);
  v48 = 136315906;
  v49 = "VoxelIntegratorGPU";
  v50 = 1026;
  v51 = 801;
  v52 = 2050;
  v53 = v45;
  v54 = 2050;
  v55 = v46;
  _os_log_error_impl(&dword_239388000, v38, OS_LOG_TYPE_ERROR, "%s:%{public}d No points with valid distance. Distance range: [%{public}f, %{public}f].", (uint8_t *)&v48, 0x26u);
  if (v7)
    goto LABEL_42;
LABEL_38:
  if (qword_256930480 != -1)
    dispatch_once(&qword_256930480, &unk_250AD68B8);
  v39 = qword_256930478;
  if (os_log_type_enabled((os_log_t)qword_256930478, OS_LOG_TYPE_ERROR))
  {
    v48 = 136315394;
    v49 = "VoxelIntegratorGPU";
    v50 = 1026;
    v51 = 808;
    _os_log_error_impl(&dword_239388000, v39, OS_LOG_TYPE_ERROR, "%s:%{public}d No points with valid angle of incidence. Angle of incidence range: [-pi, pi]", (uint8_t *)&v48, 0x12u);
  }
  if (v8)
    goto LABEL_46;
LABEL_42:
  if (qword_256930480 != -1)
    dispatch_once(&qword_256930480, &unk_250AD68B8);
  v40 = qword_256930478;
  if (os_log_type_enabled((os_log_t)qword_256930478, OS_LOG_TYPE_ERROR))
  {
    v47 = *(float *)(a1 + 304);
    v48 = 136315650;
    v49 = "VoxelIntegratorGPU";
    v50 = 1026;
    v51 = 813;
    v52 = 2050;
    v53 = v47;
    _os_log_error_impl(&dword_239388000, v40, OS_LOG_TYPE_ERROR, "%s:%{public}d No points with valid confidence. Confidence threshold = %{public}f.", (uint8_t *)&v48, 0x1Cu);
    if (v10)
      goto LABEL_51;
  }
  else
  {
LABEL_46:
    if (v10)
      goto LABEL_51;
  }
  if (qword_256930480 != -1)
    dispatch_once(&qword_256930480, &unk_250AD68B8);
  v41 = qword_256930478;
  if (os_log_type_enabled((os_log_t)qword_256930478, OS_LOG_TYPE_ERROR))
  {
    v48 = 136315394;
    v49 = "VoxelIntegratorGPU";
    v50 = 1026;
    v51 = 817;
    _os_log_error_impl(&dword_239388000, v41, OS_LOG_TYPE_ERROR, "%s:%{public}d No points with valid weight", (uint8_t *)&v48, 0x12u);
  }
  if (v9)
    goto LABEL_55;
LABEL_51:
  if (qword_256930480 != -1)
    dispatch_once(&qword_256930480, &unk_250AD68B8);
  v42 = qword_256930478;
  if (os_log_type_enabled((os_log_t)qword_256930478, OS_LOG_TYPE_ERROR))
  {
    v48 = 136315394;
    v49 = "VoxelIntegratorGPU";
    v50 = 1026;
    v51 = 821;
    _os_log_error_impl(&dword_239388000, v42, OS_LOG_TYPE_ERROR, "%s:%{public}d No above plane points.", (uint8_t *)&v48, 0x12u);
    if (v11)
      return v12 != 0;
  }
  else
  {
LABEL_55:
    if (v11)
      return v12 != 0;
  }
  if (qword_256930480 != -1)
    dispatch_once(&qword_256930480, &unk_250AD68B8);
  v43 = qword_256930478;
  if (os_log_type_enabled((os_log_t)qword_256930478, OS_LOG_TYPE_ERROR))
  {
    v48 = 136315394;
    v49 = "VoxelIntegratorGPU";
    v50 = 1026;
    v51 = 825;
    _os_log_error_impl(&dword_239388000, v43, OS_LOG_TYPE_ERROR, "%s:%{public}d No points with valid normals.", (uint8_t *)&v48, 0x12u);
  }
  return v12 != 0;
}

void sub_2393D6260(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  id v6;
  const char *v7;
  uint64_t v8;
  id v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  const char *v19;
  const char *v20;
  const char *v21;
  const char *v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  const char *v29;
  const char *v30;
  const char *v31;
  void *v32;
  const char *v33;
  const char *v34;
  const char *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  int64x2_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  int64x2_t v44;

  v3 = a2;
  *(_DWORD *)objc_msgSend_contents(*(void **)(a1 + 472), v4, v5) = 0;
  sub_2393ECA98(*(_QWORD *)(a1 + 16));
  v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  *(_DWORD *)objc_msgSend_contents(v6, v7, v8) = 0;

  sub_2393ECCF8(*(_QWORD *)(a1 + 16));
  v9 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  *(_DWORD *)objc_msgSend_contents(v9, v10, v11) = 0;

  v14 = objc_msgSend_contents(*(void **)(a1 + 496), v12, v13);
  *(_QWORD *)v14 = 0;
  *(_DWORD *)(v14 + 8) = 0;
  objc_msgSend_computeCommandEncoder(v3, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setLabel_(v17, v18, (uint64_t)CFSTR("resetAllHashBucketLocks Encoder"));
  objc_msgSend_setComputePipelineState_(v17, v19, *(_QWORD *)(a1 + 328));
  objc_msgSend_setBytes_length_atIndex_(v17, v20, a1 + 96, 28, 0);
  objc_msgSend_setBuffer_offset_atIndex_(v17, v21, *(_QWORD *)(a1 + 464), 0, 1);
  v43 = (*(_DWORD *)(a1 + 120) * *(_DWORD *)(a1 + 96));
  v44 = vdupq_n_s64(1uLL);
  v41 = xmmword_2393F5530;
  v42 = 1;
  objc_msgSend_dispatchThreads_threadsPerThreadgroup_(v17, v22, (uint64_t)&v43, &v41);
  objc_msgSend_endEncoding(v17, v23, v24);
  objc_msgSend_computeCommandEncoder(v3, v25, v26);
  v27 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_setLabel_(v27, v28, (uint64_t)CFSTR("resetAllHashEntryLocks Encoder"));
  objc_msgSend_setComputePipelineState_(v27, v29, *(_QWORD *)(a1 + 336));
  objc_msgSend_setBytes_length_atIndex_(v27, v30, a1 + 96, 28, 0);
  objc_msgSend_setBuffer_offset_atIndex_(v27, v31, *(_QWORD *)(a1 + 488), 0, 1);
  sub_2393EC380(*(_QWORD *)(a1 + 16));
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setBuffer_offset_atIndex_(v27, v33, (uint64_t)v32, 0, 2);

  v39 = *(unsigned int *)(a1 + 108);
  v40 = vdupq_n_s64(1uLL);
  v37 = xmmword_2393F5530;
  v38 = 1;
  objc_msgSend_dispatchThreads_threadsPerThreadgroup_(v27, v34, (uint64_t)&v39, &v37);
  objc_msgSend_endEncoding(v27, v35, v36);

}

void sub_2393D6470(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_2393D64B8(uint64_t *a1, void *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  const char *v6;
  const char *v7;
  void *v8;
  const char *v9;
  const char *v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;

  objc_msgSend_computeCommandEncoder(a2, (const char *)a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setLabel_(v4, v5, (uint64_t)CFSTR("updateArgsForFindHashEntriesToErase Encoder"));
  objc_msgSend_setComputePipelineState_(v4, v6, a1[48]);
  objc_msgSend_setBytes_length_atIndex_(v4, v7, (uint64_t)(a1 + 6), 272, 0);
  sub_2393ECA98(a1[2]);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setBuffer_offset_atIndex_(v4, v9, (uint64_t)v8, 0, 1);

  objc_msgSend_setBuffer_offset_atIndex_(v4, v10, a1[62], 0, 2);
  v16 = xmmword_2393F9C40;
  v17 = 1;
  v15 = 1;
  v14 = xmmword_2393F9C40;
  objc_msgSend_dispatchThreads_threadsPerThreadgroup_(v4, v11, (uint64_t)&v16, &v14);
  objc_msgSend_endEncoding(v4, v12, v13);

}

void sub_2393D6598(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2393D65B8(uint64_t *a1, void *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  const char *v6;
  const char *v7;
  void *v8;
  const char *v9;
  void *v10;
  const char *v11;
  void *v12;
  const char *v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  const char *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;

  objc_msgSend_computeCommandEncoder(a2, (const char *)a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setLabel_(v4, v5, (uint64_t)CFSTR("findHashEntriesToErase Encoder"));
  objc_msgSend_setComputePipelineState_(v4, v6, a1[49]);
  objc_msgSend_setBytes_length_atIndex_(v4, v7, (uint64_t)(a1 + 6), 272, 0);
  sub_2393EC4AC(a1[2]);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setBuffer_offset_atIndex_(v4, v9, (uint64_t)v8, 0, 1);

  sub_2393ECA98(a1[2]);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setBuffer_offset_atIndex_(v4, v11, (uint64_t)v10, 0, 2);

  sub_2393EC968(a1[2]);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setBuffer_offset_atIndex_(v4, v13, (uint64_t)v12, 0, 3);

  sub_2393EC380(a1[2]);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setBuffer_offset_atIndex_(v4, v15, (uint64_t)v14, 0, 4);

  v16 = a1[62];
  v21 = 1;
  v20 = xmmword_2393F9C58;
  objc_msgSend_dispatchThreadgroupsWithIndirectBuffer_indirectBufferOffset_threadsPerThreadgroup_(v4, v17, v16, 0, &v20);
  objc_msgSend_endEncoding(v4, v18, v19);

}

void sub_2393D66F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_2393D6724()
{
  if (qword_256930480 != -1)
    dispatch_once(&qword_256930480, &unk_250AD68B8);
  return (id)qword_256930478;
}

void sub_2393D6764(uint64_t a1, void *a2, uint64_t a3)
{
  const char *v3;
  uint64_t v4;
  id v5;

  objc_msgSend_error(a2, (const char *)a2, a3);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  if (v5)
    sub_2393D1870(v5, v3, v4);

}

void sub_2393D67A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_2393D67B8()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.CoreOCModules", "VoxelHashing");
  v1 = (void *)qword_256930478;
  qword_256930478 = (uint64_t)v0;

}

void sub_2393D67E8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  id v6;
  const char *v7;
  uint64_t v8;
  id v9;
  const char *v10;
  uint64_t v11;
  id v12;
  const char *v13;
  uint64_t v14;
  id v15;
  const char *v16;
  uint64_t v17;
  unsigned int *v18;
  id v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  const char *v24;
  uint64_t v25;
  _DWORD *v26;
  id v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  int32x2_t v31;
  unint64_t v32;
  uint64_t v37;
  float32x4_t v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  float32x4_t v42;
  float32x4_t v43;
  int32x4_t v44;
  float32x2_t v45;
  float32x2_t v46;
  float v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float v56;
  float v57;
  float32x4_t v58;
  float v59;
  float v60;
  BOOL v61;
  float v62;
  float v63;
  BOOL v64;
  float v65;
  float v66;
  BOOL v67;
  float32x4_t v68;
  float32x4_t v69;
  int32x2_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x2_t v74;
  int8x8_t v75;
  float32x2_t v76;
  float32x2_t v77;
  int32x2_t v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v86;
  float v87;
  float v89;
  uint64_t v90;
  float32x4_t *v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  int32x4_t v97;
  float32x2_t v98;
  float32x2_t v99;
  int32x4_t v100;
  int v101;
  float32x4_t v102;
  int8x16_t v103;
  float32x4_t v104;
  __int16 v105;
  int v106;
  int v107;
  float32x4_t v108;
  float v109;
  float v110;
  int32x4_t v111;
  float32x4_t v112;
  float v113;
  float v114;
  __int32 v115;
  int8x16_t v116;
  int32x4_t v117;
  int8x16_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  int v126;
  __int16 v127;
  uint64_t v128;
  uint64_t v129;
  int32x2_t v130;
  float32x4_t v131;
  int32x2_t v132;
  float32x4_t v133;
  int16x4_t v134;

  sub_2393ED1B8(*(_QWORD *)(a1 + 16));
  v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v121 = objc_msgSend_contents(v6, v7, v8);

  sub_2393EC380(*(_QWORD *)(a1 + 16));
  v9 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v129 = objc_msgSend_contents(v9, v10, v11);

  sub_2393EC4AC(*(_QWORD *)(a1 + 16));
  v12 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v128 = objc_msgSend_contents(v12, v13, v14);

  sub_2393EC5D8(*(_QWORD *)(a1 + 16));
  v15 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v18 = (unsigned int *)objc_msgSend_contents(v15, v16, v17);

  sub_2393EC708(*(_QWORD *)(a1 + 16));
  v19 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v22 = objc_msgSend_contents(v19, v20, v21);

  sub_2393EC838(*(_QWORD *)(a1 + 16));
  v23 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v26 = (_DWORD *)objc_msgSend_contents(v23, v24, v25);

  sub_2393ECE28(*(_QWORD *)(a1 + 16));
  v27 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v30 = objc_msgSend_contents(v27, v28, v29);

  if (a2)
  {
    v32 = 0;
    __asm { FMOV            V0.4S, #1.0 }
    v123 = _Q0;
    v37 = a2;
    v119 = a2;
    v120 = a3;
    while (1)
    {
      v38 = *(float32x4_t *)(a3 + 48 * v32);
      v39 = -COERCE_FLOAT(*(_QWORD *)(a3 + 48 * v32 + 8));
      if (*(float *)(a1 + 128) <= v39 && *(float *)(a1 + 124) >= v39)
      {
        v40 = *(_QWORD *)(a1 + 416);
        v41 = *(_QWORD *)(v40 + 8 * (v32 >> 6));
        if ((v41 & (1 << v32)) != 0)
          break;
      }
LABEL_4:
      if (++v32 == v37)
        return;
    }
    v42 = *(float32x4_t *)(a3 + 48 * v32 + 16);
    v43 = vmulq_f32(v42, v42);
    if (fabsf(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v43, 2), vaddq_f32(v43, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v43.f32, 1))).f32[0])+ -1.0) > 0.000011)
    {
      v44 = (int32x4_t)vmulq_f32(v38, v38);
      v44.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v44, 2), vadd_f32(*(float32x2_t *)v44.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v44.i8, 1))).u32[0];
      v45 = vrsqrte_f32((float32x2_t)v44.u32[0]);
      v46 = vmul_f32(v45, vrsqrts_f32((float32x2_t)v44.u32[0], vmul_f32(v45, v45)));
      v42 = vmulq_n_f32(vnegq_f32(v38), vmul_f32(v46, vrsqrts_f32((float32x2_t)v44.u32[0], vmul_f32(v46, v46))).f32[0]);
      v42.i32[3] = 0;
    }
    v47 = 1.0 / (float)(*(float *)(a1 + 292) * 8.0);
    v48 = *(float32x4_t *)(a1 + 132);
    v49 = vmlaq_n_f32(v38, v42, v48.f32[0]);
    v50 = *(float32x4_t *)(a1 + 160);
    v51 = *(float32x4_t *)(a1 + 176);
    v52 = *(float32x4_t *)(a1 + 192);
    v53 = *(float32x4_t *)(a1 + 208);
    v54 = vmulq_n_f32(vaddq_f32(v53, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v50, v49.f32[0]), v51, *(float32x2_t *)v49.f32, 1), v52, v49, 2)), v47);
    v55 = vmulq_n_f32(vaddq_f32(v53, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v50, v38.f32[0]), v51, *(float32x2_t *)v38.f32, 1), v52, v38, 2)), v47);
    v56 = vmuls_lane_f32(0.125, v48, 2);
    v57 = vmuls_lane_f32(0.125, v48, 3);
    v58 = vsubq_f32(v54, v55);
    v59 = fabsf(v58.f32[1]);
    v60 = (float)(fabsf(v55.f32[1]) * 0.00001) + 0.000001;
    v61 = fabsf(v58.f32[0]) > (float)((float)(fabsf(v55.f32[0]) * 0.00001) + 0.000001) || v59 > v60;
    v62 = fabsf(v58.f32[2]);
    v63 = (float)(fabsf(v55.f32[2]) * 0.00001) + 0.000001;
    v64 = v61 || v62 > v63;
    v65 = vabds_f32(v56, v57);
    v66 = fabsf(v57);
    v67 = v64 && v65 > (float)((float)(v66 * 0.00001) + 0.000001);
    if (v67 && v47 > 0.0)
    {
      v68 = vsubq_f32(v55, v54);
      v69 = vmulq_f32(v68, v68);
      v70 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v69, 2), vaddq_f32(v69, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v69.f32, 1))).u64[0];
      *(float *)v70.i32 = sqrtf(*(float *)v70.i32);
      v31.i32[0] = 0;
      if (*(float *)v70.i32 >= 0.001)
        v68 = vdivq_f32(v68, (float32x4_t)vdupq_lane_s32(v70, 0));
      else
        v70.i32[0] = 0;
      v71 = vmulq_n_f32(*(float32x4_t *)(a1 + 48), v47);
      v72 = vmulq_n_f32(*(float32x4_t *)(a1 + 64), v47);
      v73 = vdivq_f32(v123, v68);
      v74 = (float32x2_t)vrev64_s32(*(int32x2_t *)v73.f32);
      v75 = (int8x8_t)vcgez_f32(v74);
      v76 = vmul_f32(v74, vsub_f32((float32x2_t)vbsl_s8(v75, (int8x8_t)vrev64_s32(*(int32x2_t *)v72.f32), (int8x8_t)vrev64_s32(*(int32x2_t *)v71.f32)), (float32x2_t)vrev64_s32(*(int32x2_t *)v54.f32)));
      v77 = vmul_f32(*(float32x2_t *)v73.f32, vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vrev64_s32((int32x2_t)vmvn_s8(v75)), *(int8x8_t *)v72.f32, *(int8x8_t *)v71.f32), *(float32x2_t *)v54.f32));
      v78 = vcgt_f32(v76, v77);
      if (((v78.i32[1] | v78.i32[0]) & 1) == 0)
      {
        v79 = fmaxf(v76.f32[1], v76.f32[0]);
        v80 = fminf(v77.f32[0], v77.f32[1]);
        v81 = v72.f32[2];
        if (v73.f32[2] >= 0.0)
          v82 = v72.f32[2];
        else
          v82 = v71.f32[2];
        if (v73.f32[2] >= 0.0)
          v81 = v71.f32[2];
        v83 = vmuls_lane_f32(v82 - v54.f32[2], v73, 2);
        v84 = vmuls_lane_f32(v81 - v54.f32[2], v73, 2);
        if (v79 <= v84 && v83 <= v80)
        {
          *(float *)v31.i32 = v66 + *(float *)v70.i32;
          v86 = fmaxf(v79, v83);
          v87 = fminf(v80, v84);
          if (v86 > 0.0 || v87 < *(float *)v31.i32)
          {
            v89 = fmaxf(v86, 0.0);
            v54 = vmlaq_n_f32(v54, v68, v89);
            *(float *)v31.i32 = fminf(*(float *)v31.i32, v87) - v89;
          }
        }
      }
      if (fabsf(*(float *)v31.i32) <= 0.000001 || *(float *)v31.i32 < 0.0)
      {
        *(_QWORD *)(v40 + 8 * (v32 >> 6)) = v41 & ~(1 << v32);
        goto LABEL_4;
      }
      v130 = v31;
      v90 = *(unsigned int *)(a1 + 408);
      v91 = (float32x4_t *)(v121 + (v90 << 8));
      v92 = v91[8];
      v93 = v91[9];
      v94 = v91[10];
      v95 = v91[11];
      v96 = vmlaq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v92, v68.f32[0]), v93, *(float32x2_t *)v68.f32, 1), v94, v68, 2), (float32x4_t)0, v95);
      v97 = (int32x4_t)vmulq_f32(v96, v96);
      v97.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v97, 2), vadd_f32(*(float32x2_t *)v97.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v97.i8, 1))).u32[0];
      v98 = vrsqrte_f32((float32x2_t)v97.u32[0]);
      v99 = vmul_f32(v98, vrsqrts_f32((float32x2_t)v97.u32[0], vmul_f32(v98, v98)));
      v124 = vmulq_n_f32(v96, vmul_f32(v99, vrsqrts_f32((float32x2_t)v97.u32[0], vmul_f32(v99, v99))).f32[0]);
      v100 = (int32x4_t)vaddq_f32(v95, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v92, v54.f32[0]), v93, *(float32x2_t *)v54.f32, 1), v94, v54, 2));
      v122 = (float32x4_t)v100;
      *(float32x2_t *)v54.f32 = vrndm_f32(*(float32x2_t *)v100.i8);
      v100.i32[0] = v100.i32[2];
      v101 = vcvtms_s32_f32(*(float *)&v100.i32[2]);
      *(int32x2_t *)v54.f32 = vcvt_s32_f32(*(float32x2_t *)v54.f32);
      v132 = *(int32x2_t *)v54.f32;
      v54.i16[1] = v54.i16[2];
      v54.i16[2] = v101;
      v134 = *(int16x4_t *)v54.f32;
      sub_2393D6FF8((unsigned int *)(a1 + 96), **(_QWORD **)(a1 + 320), v90, &v134, *(_BYTE *)(a1 + 637), v129, v128, v18, (int8x16_t)v54, v100, (int8x16_t)v92, v22, v26, v30);
      if (v124.f32[0] >= 0.0)
        v105 = 1;
      else
        v105 = -1;
      if (v124.f32[1] >= 0.0)
        v106 = 1;
      else
        v106 = -1;
      v126 = v106;
      v127 = v105;
      if (v124.f32[2] >= 0.0)
        v107 = 1;
      else
        v107 = -1;
      *(float32x2_t *)v102.f32 = vcvt_f32_s32(v132);
      v102.f32[2] = (float)v101;
      v108 = vsubq_f32(v122, v102);
      if (fabsf(v124.f32[0]) >= 1.1755e-38)
      {
        if (v124.f32[0] >= 0.0)
          v104.f32[0] = (float)(1.0 - v108.f32[0]) / v124.f32[0];
        else
          v104.f32[0] = v108.f32[0] / (float)-v124.f32[0];
      }
      else
      {
        v104.i32[0] = 2139095040;
      }
      if (fabsf(v124.f32[1]) >= 1.1755e-38)
      {
        if (v124.f32[1] >= 0.0)
          v109 = (float)(1.0 - v108.f32[1]) / v124.f32[1];
        else
          v109 = v108.f32[1] / (float)-v124.f32[1];
      }
      else
      {
        v109 = INFINITY;
      }
      *(float *)v103.i32 = fabsf(v124.f32[2]);
      if (*(float *)v103.i32 >= 1.1755e-38)
      {
        if (v124.f32[2] >= 0.0)
        {
          v110 = (float)(1.0 - v108.f32[2]) / v124.f32[2];
        }
        else
        {
          *(float *)v103.i32 = -v124.f32[2];
          v110 = v108.f32[2] / (float)-v124.f32[2];
        }
      }
      else
      {
        v110 = INFINITY;
      }
      v104.f32[1] = v109;
      v104.f32[2] = v110;
      v111 = (int32x4_t)v123;
      v112 = vdivq_f32(v123, vabsq_f32(v124));
      v113 = v112.f32[2];
      v125 = v112;
      v114 = v112.f32[1];
      v131 = (float32x4_t)vdupq_lane_s32(v130, 0);
      v115 = v132.i32[1];
      while (1)
      {
        v116 = (int8x16_t)vcgtq_f32(v131, v104);
        v116.i32[3] = v116.i32[2];
        if ((vmaxvq_u32((uint32x4_t)v116) & 0x80000000) == 0)
        {
          v117 = (int32x4_t)vmlaq_f32(v122, v124, v131);
          v118 = vextq_s8((int8x16_t)v117, (int8x16_t)v117, 4uLL);
          *(int32x2_t *)v118.i8 = vcvt_s32_f32(vrndm_f32(*(float32x2_t *)v118.i8));
          v117.i16[0] = vcvtms_s32_f32(*(float *)v117.i32);
          v117.i16[1] = v118.i16[0];
          v117.i16[2] = v118.i16[2];
          v134 = *(int16x4_t *)v117.i8;
          sub_2393D6FF8((unsigned int *)(a1 + 96), **(_QWORD **)(a1 + 320), *(_DWORD *)(a1 + 408), &v134, *(_BYTE *)(a1 + 637), v129, v128, v18, v118, v117, (int8x16_t)v131, v22, v26, v30);
          v37 = v119;
          a3 = v120;
          goto LABEL_4;
        }
        v111.i32[0] = v104.i32[1];
        if (v104.f32[0] >= v104.f32[1])
          break;
        if (v104.f32[0] >= v104.f32[2])
          goto LABEL_69;
        *(int16x4_t *)v116.i8 = v134;
        v134.i16[0] += v127;
        v111 = (int32x4_t)v125;
        *(float *)v111.i32 = v125.f32[0] + v104.f32[0];
        v104.f32[0] = v125.f32[0] + v104.f32[0];
        v133 = v104;
        v101 = v116.u16[2];
        v115 = v116.u16[1];
LABEL_71:
        sub_2393D6FF8((unsigned int *)(a1 + 96), **(_QWORD **)(a1 + 320), *(_DWORD *)(a1 + 408), &v134, *(_BYTE *)(a1 + 637), v129, v128, v18, v116, v111, v103, v22, v26, v30);
        v104 = v133;
      }
      if (v104.f32[1] >= v104.f32[2])
      {
LABEL_69:
        v101 += v107;
        v134.i16[2] = v101;
        *(float *)v116.i32 = v113 + v104.f32[2];
        v104.f32[2] = v113 + v104.f32[2];
      }
      else
      {
        v115 += v126;
        v134.i16[1] = v115;
        *(float *)v116.i32 = v114 + v104.f32[1];
        v104.f32[1] = v114 + v104.f32[1];
      }
      v133 = v104;
      goto LABEL_71;
    }
  }
}

void sub_2393D6F7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2393D6FA4(uint64_t a1, void *a2, uint64_t a3)
{
  const char *v3;
  uint64_t v4;
  id v5;

  objc_msgSend_error(a2, (const char *)a2, a3);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  if (v5)
    sub_2393D1870(v5, v3, v4);

}

void sub_2393D6FE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_2393D6FF8(unsigned int *a1, uint64_t a2, unsigned int a3, int16x4_t *a4, char a5, uint64_t a6, uint64_t a7, unsigned int *a8, int8x16_t a9, int32x4_t a10, int8x16_t a11, uint64_t a12, _DWORD *a13, uint64_t a14)
{
  int16x4_t v14;
  int32x4_t v15;
  int8x16_t v16;
  int8x16_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  BOOL v26;
  uint64_t v27;
  BOOL v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  int32x4_t v35;
  unsigned int v36;
  unsigned int v37;
  uint16x4_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  BOOL v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v53;
  unsigned int v54;
  BOOL v55;
  int v56;
  unsigned int *v57;
  int32x4_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;

  v14 = *a4;
  a9.i32[0] = a4->i16[0];
  a11.i32[0] = HIWORD(a4->u32[0]);
  a11.i32[1] = (unsigned __int16)WORD2(*(unint64_t *)a4);
  *(int32x2_t *)a11.i8 = vshr_n_s32(vshl_n_s32(*(int32x2_t *)a11.i8, 0x10uLL), 0x10uLL);
  v15 = vmulq_s32((int32x4_t)vextq_s8(vextq_s8(a9, a9, 4uLL), a11, 0xCuLL), (int32x4_t)xmmword_2393F54A0);
  v16 = veorq_s8((int8x16_t)vdupq_lane_s32(*(int32x2_t *)v15.i8, 1), (int8x16_t)vdupq_laneq_s32(v15, 2));
  v17 = veorq_s8(v16, (int8x16_t)v15);
  v18 = *a1;
  v19 = a1[1];
  v20 = v17.i32[0] % *a1;
  v21 = *a1 * a3;
  v22 = (v21 + v20) * v19;
  v23 = (unsigned int *)(a2 + 8 * a3);
  v25 = *v23;
  v24 = v23[1];
  v26 = *v23 <= v22 && v24 > v22;
  if (!v26
    || ((v27 = v22 + v19, v27 <= v24) ? (v28 = v22 > v24 - v19) : (v28 = 1),
        v28))
  {
    v29 = a1[3];
LABEL_12:
    LODWORD(v22) = v29;
LABEL_13:
    v30 = v29;
    v31 = v29;
    v32 = v29;
    if (v22 < v29)
      goto LABEL_17;
    goto LABEL_14;
  }
  v29 = a1[3];
  if (v22 >= v27)
    goto LABEL_12;
  v30 = a1[3];
  v31 = v30;
  v32 = v30;
  do
  {
    if ((*(_DWORD *)(a6 + 24 * v22 + 12) & 0x80000000) != 0)
    {
      if (v30 == v29)
        v30 = v22;
    }
    else
    {
      v17.i64[0] = *(_QWORD *)(a6 + 24 * v22);
      *(int16x4_t *)v16.i8 = vceq_s16(*(int16x4_t *)v17.i8, v14);
      v16.i16[3] = v16.i16[2];
      if ((vminv_u16(*(uint16x4_t *)v16.i8) & 0x8000) != 0)
        goto LABEL_13;
      v16.i32[0] = v17.i16[0];
      v17.i32[0] = v17.u16[1];
      v17.i32[1] = v17.u16[2];
      *(int32x2_t *)v17.i8 = vshr_n_s32(vshl_n_s32(*(int32x2_t *)v17.i8, 0x10uLL), 0x10uLL);
      v35 = vmulq_s32((int32x4_t)vextq_s8(vextq_s8(v16, v16, 4uLL), v17, 0xCuLL), (int32x4_t)xmmword_2393F54A0);
      v16 = veorq_s8((int8x16_t)vdupq_lane_s32(*(int32x2_t *)v35.i8, 1), (int8x16_t)vdupq_laneq_s32(v35, 2));
      v17 = veorq_s8(v16, (int8x16_t)v35);
      if (v17.i32[0] % v18 == v20)
      {
        if (v32 == v29)
        {
          v36 = *(_DWORD *)(a6 + 24 * v22 + 8);
          if (v25 <= v36)
          {
            if (v24 <= v36)
              v32 = a1[3];
            else
              v32 = v22;
          }
          else
          {
            v32 = a1[3];
          }
        }
        v31 = v22;
      }
    }
    ++v22;
  }
  while (v22 != v27);
  LODWORD(v22) = a1[3];
LABEL_14:
  if (v30 >= v29 && v31 >= v29 && v32 >= v29)
    return 0xFFFFFFFFLL;
LABEL_17:
  if (v25 <= v22 && v24 > v22)
    return 0xFFFFFFFFLL;
  if (v25 <= v30 && v24 > v30 && (*(_DWORD *)(a6 + 24 * v30 + 12) & 0x80000000) != 0)
  {
    v62 = *a13;
    *a13 = v62 - 1;
    if ((v62 & 0x80000000) != 0)
    {
      v63 = *a8;
      if (a1[4] >= (int)v63 + 1)
        v64 = v63 + 1;
      else
        v64 = a1[4];
      *a8 = v64;
    }
    else
    {
      v63 = *(unsigned int *)(a12 + 4 * v62);
    }
    v33 = 0xFFFFFFFFLL;
    if ((v63 & 0x80000000) == 0 && (int)v63 < (int)a1[4])
    {
      sub_2393D74F0(a3, v30, a4, v63, a5, a6, a7, a14);
      return v63;
    }
  }
  else
  {
    if (v25 <= v32 && v24 > v32)
    {
      v31 = v32;
      while (1)
      {
        v37 = *(_DWORD *)(a6 + 24 * v31 + 8);
        if (v25 > v37 || v24 <= v37)
          break;
        v39 = (uint16x4_t)vceq_s16(*(int16x4_t *)(a6 + 24 * v37), v14);
        v39.i16[3] = v39.i16[2];
        v31 = *(_DWORD *)(a6 + 24 * v31 + 8);
        if ((vminv_u16(v39) & 0x8000) != 0)
          return 0xFFFFFFFFLL;
      }
    }
    v33 = 0xFFFFFFFFLL;
    if (v25 <= v31 && v24 > v31)
    {
      v40 = a6 + 24 * v31;
      v43 = *(_DWORD *)(v40 + 8);
      v42 = (unsigned int *)(v40 + 8);
      v41 = v43;
      v44 = v25 <= v43 && v24 > v41;
      if (v44 || (*(_DWORD *)(a6 + 24 * v31 + 12) & 0x80000000) != 0)
      {
LABEL_97:
        v54 = v29;
      }
      else
      {
        v45 = v31 / v19;
        if (v31 % v19 + 2 >= v19)
          ++v45;
        v46 = v45 % v18;
        v47 = v46;
        while (1)
        {
          v48 = (v47 + v21) * v19;
          v49 = v48 + v19;
          v53 = v25 <= v49
             && v25 <= v48
             && v24 > v48
             && v48 <= v24 - v19
             && v24 > v49;
          v54 = v29;
          if (v53)
          {
            if (v48 < v49)
            {
              v55 = 0;
              v56 = 0;
              v57 = (unsigned int *)(a6 + 8 + 24 * v48);
              v54 = v29;
              while (1)
              {
                if ((v57[1] & 0x80000000) != 0)
                {
                  if (v54 == v29)
                    v54 = v48;
                  if (v56)
                    goto LABEL_93;
                  v56 = 1;
                }
                else if (v55)
                {
                  v55 = 1;
                }
                else if (v25 <= *v57 && v24 > *v57)
                {
                  a10.i32[0] = *((__int16 *)v57 - 4);
                  a10.i32[1] = *((__int16 *)v57 - 3);
                  a10.i32[2] = *((__int16 *)v57 - 2);
                  v59 = vmulq_s32(a10, (int32x4_t)xmmword_2393F54A0);
                  a10 = (int32x4_t)veorq_s8(veorq_s8((int8x16_t)vdupq_lane_s32(*(int32x2_t *)v59.i8, 1), (int8x16_t)vdupq_laneq_s32(v59, 2)), (int8x16_t)v59);
                  v55 = a10.i32[0] % v18 == v47;
                }
                else
                {
                  v55 = 0;
                }
                v57 += 6;
                if (v49 == ++v48)
                  goto LABEL_91;
              }
            }
            v56 = 0;
            v55 = 0;
            v54 = v29;
LABEL_91:
            if (!v55 || v56 == 0)
              v54 = v29;
          }
LABEL_93:
          if (v25 <= v54 && v24 > v54)
            break;
          v47 = (v47 + v21 + 1) % v18;
          if (v47 == v46)
            goto LABEL_97;
        }
      }
      v33 = 0xFFFFFFFFLL;
      if (v25 <= v54 && v24 > v54)
      {
        v60 = *a13;
        *a13 = v60 - 1;
        if ((v60 & 0x80000000) != 0)
        {
          v61 = *a8;
          if (a1[4] >= (int)v61 + 1)
            v65 = v61 + 1;
          else
            v65 = a1[4];
          *a8 = v65;
        }
        else
        {
          v61 = *(unsigned int *)(a12 + 4 * v60);
        }
        v33 = 0xFFFFFFFFLL;
        if ((v61 & 0x80000000) == 0 && (int)v61 < (int)a1[4])
        {
          sub_2393D74F0(a3, v54, a4, v61, a5, a6, a7, a14);
          *v42 = v54;
          return v61;
        }
      }
    }
  }
  return v33;
}

double sub_2393D74F0(int a1, unsigned int a2, _QWORD *a3, unsigned int a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  char *v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  double result;
  uint64_t v22;

  v8 = a6 + 24 * a2;
  *(_QWORD *)v8 = *a3;
  *(_DWORD *)(v8 + 12) = a4;
  v9 = a7 + 17368 * a4;
  atomic_store(0, (unsigned int *)(v9 + 6144));
  if ((a5 & 1) != 0)
  {
    v10 = 0;
    v11 = (unsigned int *)(a8 + 30852 * a4);
    atomic_store(0, v11);
    v12 = (char *)v11 + 28834;
    v13 = a7 + 17368 * a4 + 48;
    v14 = v11 + 7205;
    do
    {
      v15 = 0;
      v16 = v13;
      do
      {
        *(_WORD *)(v16 - 44) = 0;
        *(_DWORD *)(v16 - 48) = 0;
        *(_DWORD *)(v16 - 40) = 0;
        v17 = &v14[v15];
        *((_WORD *)v17 - 8) = 0;
        v18 = &v12[v15 * 4];
        *((_WORD *)v18 - 14) = -1;
        *(_WORD *)(v16 - 32) = 0;
        *(_DWORD *)(v16 - 36) = 0;
        *(_DWORD *)(v16 - 28) = 0;
        *((_WORD *)v17 - 6) = 0;
        *((_WORD *)v18 - 12) = -1;
        *(_WORD *)(v16 - 20) = 0;
        *(_DWORD *)(v16 - 24) = 0;
        *(_DWORD *)(v16 - 16) = 0;
        *((_WORD *)v17 - 4) = 0;
        *((_WORD *)v18 - 10) = -1;
        *(_WORD *)(v16 - 8) = 0;
        *(_DWORD *)(v16 - 12) = 0;
        *(_DWORD *)(v16 - 4) = 0;
        *((_WORD *)v17 - 2) = 0;
        *((_WORD *)v18 - 8) = -1;
        *(_WORD *)(v16 + 4) = 0;
        *(_DWORD *)v16 = 0;
        *(_DWORD *)(v16 + 8) = 0;
        *(_WORD *)v17 = 0;
        *((_WORD *)v18 - 6) = -1;
        *(_WORD *)(v16 + 16) = 0;
        *(_DWORD *)(v16 + 12) = 0;
        *(_DWORD *)(v16 + 20) = 0;
        *((_WORD *)v17 + 2) = 0;
        *((_WORD *)v18 - 4) = -1;
        *(_WORD *)(v16 + 28) = 0;
        *(_DWORD *)(v16 + 24) = 0;
        *(_DWORD *)(v16 + 32) = 0;
        *((_WORD *)v17 + 4) = 0;
        *((_WORD *)v18 - 2) = -1;
        *(_WORD *)(v16 + 40) = 0;
        *(_DWORD *)(v16 + 36) = 0;
        *(_DWORD *)(v16 + 44) = 0;
        *((_WORD *)v17 + 6) = 0;
        v15 += 8;
        v16 += 96;
        *(_WORD *)v18 = -1;
      }
      while (v15 != 64);
      ++v10;
      v12 += 256;
      v13 += 768;
      v14 += 64;
    }
    while (v10 != 8);
  }
  else
  {
    v19 = -6144;
    do
    {
      v20 = v9 + v19;
      *(_WORD *)(v20 + 6148) = 0;
      *(_DWORD *)(v20 + 6144) = 0;
      *(_DWORD *)(v20 + 6152) = 0;
      *(_WORD *)(v20 + 6160) = 0;
      *(_DWORD *)(v20 + 6156) = 0;
      *(_DWORD *)(v20 + 6164) = 0;
      *(_WORD *)(v20 + 6172) = 0;
      *(_DWORD *)(v20 + 6168) = 0;
      *(_DWORD *)(v20 + 6176) = 0;
      *(_WORD *)(v20 + 6184) = 0;
      *(_DWORD *)(v20 + 6180) = 0;
      *(_DWORD *)(v20 + 6188) = 0;
      *(_WORD *)(v20 + 6196) = 0;
      *(_DWORD *)(v20 + 6192) = 0;
      *(_DWORD *)(v20 + 6200) = 0;
      *(_WORD *)(v20 + 6208) = 0;
      *(_DWORD *)(v20 + 6204) = 0;
      *(_DWORD *)(v20 + 6212) = 0;
      *(_WORD *)(v20 + 6220) = 0;
      *(_DWORD *)(v20 + 6216) = 0;
      *(_DWORD *)(v20 + 6224) = 0;
      *(_WORD *)(v20 + 6232) = 0;
      *(_DWORD *)(v20 + 6228) = 0;
      *(_DWORD *)(v20 + 6236) = 0;
      *(_WORD *)(v20 + 6244) = 0;
      *(_DWORD *)(v20 + 6240) = 0;
      *(_DWORD *)(v20 + 6248) = 0;
      *(_WORD *)(v20 + 6256) = 0;
      *(_DWORD *)(v20 + 6252) = 0;
      *(_DWORD *)(v20 + 6260) = 0;
      *(_WORD *)(v20 + 6268) = 0;
      *(_DWORD *)(v20 + 6264) = 0;
      *(_DWORD *)(v20 + 6272) = 0;
      *(_WORD *)(v20 + 6280) = 0;
      *(_DWORD *)(v20 + 6276) = 0;
      *(_DWORD *)(v20 + 6284) = 0;
      *(_WORD *)(v20 + 6292) = 0;
      *(_DWORD *)(v20 + 6288) = 0;
      *(_DWORD *)(v20 + 6296) = 0;
      *(_WORD *)(v20 + 6304) = 0;
      *(_DWORD *)(v20 + 6300) = 0;
      *(_DWORD *)(v20 + 6308) = 0;
      *(_WORD *)(v20 + 6316) = 0;
      *(_DWORD *)(v20 + 6312) = 0;
      *(_DWORD *)(v20 + 6320) = 0;
      *(_WORD *)(v20 + 6328) = 0;
      *(_DWORD *)(v20 + 6324) = 0;
      *(_DWORD *)(v20 + 6332) = 0;
      *(_WORD *)(v20 + 6340) = 0;
      *(_DWORD *)(v20 + 6336) = 0;
      *(_DWORD *)(v20 + 6344) = 0;
      *(_WORD *)(v20 + 6352) = 0;
      *(_DWORD *)(v20 + 6348) = 0;
      *(_DWORD *)(v20 + 6356) = 0;
      *(_WORD *)(v20 + 6364) = 0;
      *(_DWORD *)(v20 + 6360) = 0;
      *(_DWORD *)(v20 + 6368) = 0;
      *(_WORD *)(v20 + 6376) = 0;
      *(_DWORD *)(v20 + 6372) = 0;
      *(_DWORD *)(v20 + 6380) = 0;
      *(_WORD *)(v20 + 6388) = 0;
      *(_DWORD *)(v20 + 6384) = 0;
      *(_DWORD *)(v20 + 6392) = 0;
      *(_WORD *)(v20 + 6400) = 0;
      *(_DWORD *)(v20 + 6396) = 0;
      *(_DWORD *)(v20 + 6404) = 0;
      *(_WORD *)(v20 + 6412) = 0;
      *(_DWORD *)(v20 + 6408) = 0;
      *(_DWORD *)(v20 + 6416) = 0;
      *(_WORD *)(v20 + 6424) = 0;
      *(_DWORD *)(v20 + 6420) = 0;
      *(_DWORD *)(v20 + 6428) = 0;
      *(_WORD *)(v20 + 6436) = 0;
      *(_DWORD *)(v20 + 6432) = 0;
      *(_DWORD *)(v20 + 6440) = 0;
      *(_WORD *)(v20 + 6448) = 0;
      *(_DWORD *)(v20 + 6444) = 0;
      *(_DWORD *)(v20 + 6452) = 0;
      *(_WORD *)(v20 + 6460) = 0;
      *(_DWORD *)(v20 + 6456) = 0;
      *(_DWORD *)(v20 + 6464) = 0;
      *(_WORD *)(v20 + 6472) = 0;
      *(_DWORD *)(v20 + 6468) = 0;
      *(_DWORD *)(v20 + 6476) = 0;
      *(_WORD *)(v20 + 6484) = 0;
      *(_DWORD *)(v20 + 6480) = 0;
      *(_DWORD *)(v20 + 6488) = 0;
      *(_WORD *)(v20 + 6496) = 0;
      *(_DWORD *)(v20 + 6492) = 0;
      *(_DWORD *)(v20 + 6500) = 0;
      *(_WORD *)(v20 + 6508) = 0;
      *(_DWORD *)(v20 + 6504) = 0;
      *(_DWORD *)(v20 + 6512) = 0;
      *(_WORD *)(v20 + 6520) = 0;
      *(_DWORD *)(v20 + 6516) = 0;
      *(_DWORD *)(v20 + 6524) = 0;
      *(_WORD *)(v20 + 6532) = 0;
      *(_DWORD *)(v20 + 6528) = 0;
      *(_DWORD *)(v20 + 6536) = 0;
      *(_WORD *)(v20 + 6544) = 0;
      *(_DWORD *)(v20 + 6540) = 0;
      *(_DWORD *)(v20 + 6548) = 0;
      *(_WORD *)(v20 + 6556) = 0;
      *(_DWORD *)(v20 + 6552) = 0;
      *(_DWORD *)(v20 + 6560) = 0;
      *(_WORD *)(v20 + 6568) = 0;
      *(_DWORD *)(v20 + 6564) = 0;
      *(_DWORD *)(v20 + 6572) = 0;
      *(_WORD *)(v20 + 6580) = 0;
      *(_DWORD *)(v20 + 6576) = 0;
      *(_DWORD *)(v20 + 6584) = 0;
      *(_WORD *)(v20 + 6592) = 0;
      *(_DWORD *)(v20 + 6588) = 0;
      *(_DWORD *)(v20 + 6596) = 0;
      *(_WORD *)(v20 + 6604) = 0;
      *(_DWORD *)(v20 + 6600) = 0;
      *(_DWORD *)(v20 + 6608) = 0;
      *(_WORD *)(v20 + 6616) = 0;
      *(_DWORD *)(v20 + 6612) = 0;
      *(_DWORD *)(v20 + 6620) = 0;
      *(_WORD *)(v20 + 6628) = 0;
      *(_DWORD *)(v20 + 6624) = 0;
      *(_DWORD *)(v20 + 6632) = 0;
      *(_WORD *)(v20 + 6640) = 0;
      *(_DWORD *)(v20 + 6636) = 0;
      *(_DWORD *)(v20 + 6644) = 0;
      *(_WORD *)(v20 + 6652) = 0;
      *(_DWORD *)(v20 + 6648) = 0;
      *(_DWORD *)(v20 + 6656) = 0;
      *(_WORD *)(v20 + 6664) = 0;
      *(_DWORD *)(v20 + 6660) = 0;
      *(_DWORD *)(v20 + 6668) = 0;
      *(_WORD *)(v20 + 6676) = 0;
      *(_DWORD *)(v20 + 6672) = 0;
      *(_DWORD *)(v20 + 6680) = 0;
      *(_WORD *)(v20 + 6688) = 0;
      *(_DWORD *)(v20 + 6684) = 0;
      *(_DWORD *)(v20 + 6692) = 0;
      *(_WORD *)(v20 + 6700) = 0;
      *(_DWORD *)(v20 + 6696) = 0;
      *(_DWORD *)(v20 + 6704) = 0;
      *(_WORD *)(v20 + 6712) = 0;
      *(_DWORD *)(v20 + 6708) = 0;
      *(_DWORD *)(v20 + 6716) = 0;
      *(_WORD *)(v20 + 6724) = 0;
      *(_DWORD *)(v20 + 6720) = 0;
      *(_DWORD *)(v20 + 6728) = 0;
      *(_WORD *)(v20 + 6736) = 0;
      *(_DWORD *)(v20 + 6732) = 0;
      *(_DWORD *)(v20 + 6740) = 0;
      *(_WORD *)(v20 + 6748) = 0;
      *(_DWORD *)(v20 + 6744) = 0;
      *(_DWORD *)(v20 + 6752) = 0;
      *(_WORD *)(v20 + 6760) = 0;
      *(_DWORD *)(v20 + 6756) = 0;
      *(_DWORD *)(v20 + 6764) = 0;
      *(_WORD *)(v20 + 6772) = 0;
      *(_DWORD *)(v20 + 6768) = 0;
      *(_DWORD *)(v20 + 6776) = 0;
      *(_WORD *)(v20 + 6784) = 0;
      *(_DWORD *)(v20 + 6780) = 0;
      *(_DWORD *)(v20 + 6788) = 0;
      *(_WORD *)(v20 + 6796) = 0;
      *(_DWORD *)(v20 + 6792) = 0;
      *(_DWORD *)(v20 + 6800) = 0;
      *(_WORD *)(v20 + 6808) = 0;
      *(_DWORD *)(v20 + 6804) = 0;
      *(_DWORD *)(v20 + 6812) = 0;
      *(_WORD *)(v20 + 6820) = 0;
      *(_DWORD *)(v20 + 6816) = 0;
      *(_DWORD *)(v20 + 6824) = 0;
      *(_WORD *)(v20 + 6832) = 0;
      *(_DWORD *)(v20 + 6828) = 0;
      *(_DWORD *)(v20 + 6836) = 0;
      *(_WORD *)(v20 + 6844) = 0;
      *(_DWORD *)(v20 + 6840) = 0;
      *(_DWORD *)(v20 + 6848) = 0;
      *(_WORD *)(v20 + 6856) = 0;
      *(_DWORD *)(v20 + 6852) = 0;
      *(_DWORD *)(v20 + 6860) = 0;
      *(_WORD *)(v20 + 6868) = 0;
      *(_DWORD *)(v20 + 6864) = 0;
      *(_DWORD *)(v20 + 6872) = 0;
      *(_WORD *)(v20 + 6880) = 0;
      *(_DWORD *)(v20 + 6876) = 0;
      *(_DWORD *)(v20 + 6884) = 0;
      *(_WORD *)(v20 + 6892) = 0;
      *(_DWORD *)(v20 + 6888) = 0;
      *(_DWORD *)(v20 + 6896) = 0;
      *(_WORD *)(v20 + 6904) = 0;
      *(_DWORD *)(v20 + 6900) = 0;
      *(_DWORD *)(v20 + 6908) = 0;
      v19 += 768;
    }
    while (v19);
  }
  result = *(double *)a3;
  v22 = a7 + 17368 * a4;
  *(_QWORD *)(v22 + 17352) = *a3;
  *(_DWORD *)(v22 + 17360) = a1;
  *(_BYTE *)(v22 + 17364) = 0;
  return result;
}

void sub_2393D7960(uint64_t a1, void *a2, uint64_t a3)
{
  const char *v3;
  uint64_t v4;
  id v5;

  objc_msgSend_error(a2, (const char *)a2, a3);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  if (v5)
    sub_2393D1870(v5, v3, v4);

}

void sub_2393D79A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_2393D79B4(uint64_t a1, int *a2)
{
  id v4;
  const char *v5;
  const char *v6;
  const char *v7;
  void *v8;
  NSObject *v9;
  id v10;
  const char *v11;
  uint64_t v12;
  id v13;
  void *v14;
  const char *v15;
  NSObject *v16;
  NSObject *v17;
  id v18;
  const char *v19;
  uint64_t v20;
  id v21;
  void *v22;
  id v23;
  const char *v24;
  uint64_t v25;
  id v26;
  id v27;
  const char *v28;
  uint64_t v29;
  id v30;
  void *v31;
  id v32;
  const char *v33;
  id v34;
  uint64_t v35;
  NSObject *v36;
  id v37;
  const char *v38;
  uint64_t v39;
  void *v40;
  id v41;
  const char *v42;
  id v43;
  uint64_t v44;
  NSObject *v45;
  id v46;
  const char *v47;
  uint64_t v48;
  void *v49;
  id v50;
  const char *v51;
  id v52;
  uint64_t v53;
  NSObject *v54;
  id v55;
  const char *v56;
  uint64_t v57;
  void *v58;
  id v59;
  const char *v60;
  id v61;
  uint64_t v62;
  NSObject *v63;
  id v64;
  const char *v65;
  uint64_t v66;
  id v67;
  void *v68;
  const char *v69;
  NSObject *v70;
  uint64_t v71;
  NSObject *v72;
  id v73;
  const char *v74;
  uint64_t v75;
  void *v76;
  const char *v77;
  NSObject *v78;
  NSObject *v79;
  id v80;
  const char *v81;
  uint64_t v82;
  id v83;
  void *v84;
  uint64_t v85;
  NSObject *v86;
  NSObject *v87;
  NSObject *v88;
  NSObject *v89;
  NSObject *v90;
  _BYTE *v91;
  int v92;
  _BYTE *v93;
  const char *v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  _BYTE *v98;
  _BYTE *v99;
  int v100;
  _BYTE *v101;
  const char *v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  _BYTE *v106;
  NSObject *v107;
  int v109;
  _BYTE *v110;
  const char *v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  _BYTE *v115;
  int v116;
  _BYTE *v117;
  const char *v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  _BYTE *v122;
  int v123;
  _BYTE *v124;
  const char *v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  _BYTE *v129;
  int v130;
  _BYTE *v131;
  const char *v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  _BYTE *v136;
  int v137;
  _BYTE *v138;
  const char *v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  _BYTE *v143;
  int v144;
  _BYTE *v145;
  const char *v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  _BYTE *v150;
  int v151;
  _BYTE *v152;
  const char *v153;
  uint64_t v154;
  uint64_t v155;
  void *v156;
  _BYTE *v157;
  int v158;
  _BYTE *v159;
  const char *v160;
  uint64_t v161;
  uint64_t v162;
  void *v163;
  _BYTE *v164;
  int v165;
  _BYTE *v166;
  const char *v167;
  uint64_t v168;
  uint64_t v169;
  void *v170;
  _BYTE *v171;
  int v172;
  _BYTE *v173;
  const char *v174;
  uint64_t v175;
  uint64_t v176;
  void *v177;
  _BYTE *v178;
  _BYTE *v179;
  int v180;
  _BYTE *v181;
  const char *v182;
  uint64_t v183;
  uint64_t v184;
  void *v185;
  _BYTE *v186;
  _BYTE *v187;
  int v188;
  _BYTE *v189;
  const char *v190;
  uint64_t v191;
  uint64_t v192;
  void *v193;
  _BYTE *v194;
  void *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  id v200;
  id v201;
  id v202;
  id v203;
  id v204;
  id v205;
  id v206;
  id v207;
  id v208;
  id v209;
  id v210;
  id v211;
  id v212;
  id v213;
  int v214;
  _BYTE buf[12];
  __int16 v216;
  int v217;
  char v218;
  _BYTE v219[12];
  __int16 v220;
  int v221;
  __int16 v222;
  uint64_t v223;
  uint64_t v224;

  v224 = *MEMORY[0x24BDAC8D0];
  v4 = objc_alloc_init(MEMORY[0x24BDDD5A0]);
  v214 = *a2;
  objc_msgSend_setConstantValue_type_atIndex_(v4, v5, (uint64_t)&v214, 33, 0);
  objc_msgSend_setConstantValue_type_atIndex_(v4, v6, a1 + 637, 53, 1);
  v8 = (void *)objc_msgSend_newFunctionWithName_(*(void **)(*(_QWORD *)(a1 + 32) + 16), v7, (uint64_t)CFSTR("oc::voxel_hashing::resetAllHashBucketLocks"));
  if (!v8)
  {
    if (qword_256930480 != -1)
      dispatch_once(&qword_256930480, &unk_250AD68B8);
    v9 = (id)qword_256930478;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      sub_2393C4DD0(v219, "BOOL oc::voxel_hashing::VoxelIntegratorGPU::createPipelineStates(const VoxelHashingMode &)");
      v91 = (v223 & 0x80000000) == 0 ? v219 : *(_BYTE **)v219;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v91;
      v216 = 1026;
      v217 = 479;
      _os_log_error_impl(&dword_239388000, v9, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to find resetAllHashBucketLocks compute shader.", buf, 0x12u);
      if (SBYTE3(v223) < 0)
        operator delete(*(void **)v219);
    }

  }
  v10 = **(id **)(a1 + 32);
  v213 = 0;
  v12 = objc_msgSend_newComputePipelineStateWithFunction_error_(v10, v11, (uint64_t)v8, &v213);
  v13 = v213;
  v14 = *(void **)(a1 + 328);
  *(_QWORD *)(a1 + 328) = v12;

  if (*(_QWORD *)(a1 + 328))
  {
    v16 = objc_msgSend_newFunctionWithName_(*(void **)(*(_QWORD *)(a1 + 32) + 16), v15, (uint64_t)CFSTR("oc::voxel_hashing::resetAllHashEntryLocksAndHashEntryUpdateFlag"));
    if (!v16)
    {
      if (qword_256930480 != -1)
        dispatch_once(&qword_256930480, &unk_250AD68B8);
      v17 = (id)qword_256930478;
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        sub_2393C4DD0(v219, "BOOL oc::voxel_hashing::VoxelIntegratorGPU::createPipelineStates(const VoxelHashingMode &)");
        v99 = (v223 & 0x80000000) == 0 ? v219 : *(_BYTE **)v219;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v99;
        v216 = 1026;
        v217 = 495;
        _os_log_error_impl(&dword_239388000, v17, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to find resetAllHashEntryLocksAndHashEntryUpdateFlag compute shader.", buf, 0x12u);
        if (SBYTE3(v223) < 0)
          operator delete(*(void **)v219);
      }

    }
    v18 = **(id **)(a1 + 32);
    v212 = v13;
    v20 = objc_msgSend_newComputePipelineStateWithFunction_error_(v18, v19, (uint64_t)v16, &v212);
    v21 = v212;

    v22 = *(void **)(a1 + 336);
    *(_QWORD *)(a1 + 336) = v20;

    if (*(_QWORD *)(a1 + 336))
    {
      v23 = *(id *)(*(_QWORD *)(a1 + 32) + 16);
      v211 = v21;
      v25 = objc_msgSend_newFunctionWithName_constantValues_error_(v23, v24, (uint64_t)CFSTR("oc::voxel_hashing::allocateVoxelBlocksIntersectingRay"), v4, &v211);
      v26 = v211;

      if (v25)
      {
        v27 = **(id **)(a1 + 32);
        v210 = v26;
        v29 = objc_msgSend_newComputePipelineStateWithFunction_error_(v27, v28, v25, &v210);
        v30 = v210;

        v31 = *(void **)(a1 + 344);
        *(_QWORD *)(a1 + 344) = v29;

        if (*(_QWORD *)(a1 + 344))
        {
          v32 = *(id *)(*(_QWORD *)(a1 + 32) + 16);
          v209 = v30;
          v199 = objc_msgSend_newFunctionWithName_constantValues_error_(v32, v33, (uint64_t)CFSTR("oc::voxel_hashing::integrateVoxelsBetweenCameraAndEndPoints"), v4, &v209);
          v34 = v209;

          v35 = v199;
          if (!v199)
          {
            if (qword_256930480 != -1)
              dispatch_once(&qword_256930480, &unk_250AD68B8);
            v36 = (id)qword_256930478;
            if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
            {
              sub_2393C4DD0(buf, "BOOL oc::voxel_hashing::VoxelIntegratorGPU::createPipelineStates(const VoxelHashingMode &)");
              v123 = v218;
              v124 = *(_BYTE **)buf;
              objc_msgSend_localizedDescription(v34, v125, v126);
              v127 = objc_claimAutoreleasedReturnValue();
              v128 = (void *)v127;
              v129 = buf;
              if (v123 < 0)
                v129 = v124;
              *(_DWORD *)v219 = 136315650;
              *(_QWORD *)&v219[4] = v129;
              v220 = 1026;
              v221 = 534;
              v222 = 2114;
              v223 = v127;
              _os_log_error_impl(&dword_239388000, v36, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to find integrateVoxelsBetweenCameraAndEndPoints compute shader. Error details: %{public}@", v219, 0x1Cu);

              if (v218 < 0)
                operator delete(*(void **)buf);
            }

            v35 = 0;
          }
          v37 = **(id **)(a1 + 32);
          v208 = v34;
          v39 = objc_msgSend_newComputePipelineStateWithFunction_error_(v37, v38, v35, &v208);
          v26 = v208;

          v40 = *(void **)(a1 + 352);
          *(_QWORD *)(a1 + 352) = v39;

          if (*(_QWORD *)(a1 + 352))
          {
            v41 = *(id *)(*(_QWORD *)(a1 + 32) + 16);
            v207 = v26;
            v198 = objc_msgSend_newFunctionWithName_constantValues_error_(v41, v42, (uint64_t)CFSTR("oc::voxel_hashing::integrateVoxelsUptoTruncationRegion"), v4, &v207);
            v43 = v207;

            v44 = v198;
            if (!v198)
            {
              if (qword_256930480 != -1)
                dispatch_once(&qword_256930480, &unk_250AD68B8);
              v45 = (id)qword_256930478;
              if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
              {
                sub_2393C4DD0(buf, "BOOL oc::voxel_hashing::VoxelIntegratorGPU::createPipelineStates(const VoxelHashingMode &)");
                v137 = v218;
                v138 = *(_BYTE **)buf;
                objc_msgSend_localizedDescription(v43, v139, v140);
                v141 = objc_claimAutoreleasedReturnValue();
                v142 = (void *)v141;
                v143 = buf;
                if (v137 < 0)
                  v143 = v138;
                *(_DWORD *)v219 = 136315650;
                *(_QWORD *)&v219[4] = v143;
                v220 = 1026;
                v221 = 554;
                v222 = 2114;
                v223 = v141;
                _os_log_error_impl(&dword_239388000, v45, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to find integrateVoxelsUptoTruncationRegion compute shader. Error details: %{public}@", v219, 0x1Cu);

                if (v218 < 0)
                  operator delete(*(void **)buf);
              }

              v44 = 0;
            }
            v46 = **(id **)(a1 + 32);
            v206 = v43;
            v48 = objc_msgSend_newComputePipelineStateWithFunction_error_(v46, v47, v44, &v206);
            v26 = v206;

            v49 = *(void **)(a1 + 360);
            *(_QWORD *)(a1 + 360) = v48;

            if (*(_QWORD *)(a1 + 360))
            {
              v50 = *(id *)(*(_QWORD *)(a1 + 32) + 16);
              v205 = v26;
              v197 = objc_msgSend_newFunctionWithName_constantValues_error_(v50, v51, (uint64_t)CFSTR("oc::voxel_hashing::integrateVoxelsInTruncationRegion"), v4, &v205);
              v52 = v205;

              v53 = v197;
              if (!v197)
              {
                if (qword_256930480 != -1)
                  dispatch_once(&qword_256930480, &unk_250AD68B8);
                v54 = (id)qword_256930478;
                if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
                {
                  sub_2393C4DD0(buf, "BOOL oc::voxel_hashing::VoxelIntegratorGPU::createPipelineStates(const VoxelHashingMode &)");
                  v151 = v218;
                  v152 = *(_BYTE **)buf;
                  objc_msgSend_localizedDescription(v52, v153, v154);
                  v155 = objc_claimAutoreleasedReturnValue();
                  v156 = (void *)v155;
                  v157 = buf;
                  if (v151 < 0)
                    v157 = v152;
                  *(_DWORD *)v219 = 136315650;
                  *(_QWORD *)&v219[4] = v157;
                  v220 = 1026;
                  v221 = 573;
                  v222 = 2114;
                  v223 = v155;
                  _os_log_error_impl(&dword_239388000, v54, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to find integrateVoxelsInTruncationRegion compute shader. Error details: %{public}@", v219, 0x1Cu);

                  if (v218 < 0)
                    operator delete(*(void **)buf);
                }

                v53 = 0;
              }
              v55 = **(id **)(a1 + 32);
              v204 = v52;
              v57 = objc_msgSend_newComputePipelineStateWithFunction_error_(v55, v56, v53, &v204);
              v26 = v204;

              v58 = *(void **)(a1 + 368);
              *(_QWORD *)(a1 + 368) = v57;

              if (*(_QWORD *)(a1 + 368))
              {
                v59 = *(id *)(*(_QWORD *)(a1 + 32) + 16);
                v203 = v26;
                v196 = objc_msgSend_newFunctionWithName_constantValues_error_(v59, v60, (uint64_t)CFSTR("oc::voxel_hashing::deintegrateVoxelsInTruncationRegion"), v4, &v203);
                v61 = v203;

                v62 = v196;
                if (!v196)
                {
                  sub_2393D6724();
                  v63 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
                  {
                    sub_2393C4DD0(buf, "BOOL oc::voxel_hashing::VoxelIntegratorGPU::createPipelineStates(const VoxelHashingMode &)");
                    v165 = v218;
                    v166 = *(_BYTE **)buf;
                    objc_msgSend_localizedDescription(v61, v167, v168);
                    v169 = objc_claimAutoreleasedReturnValue();
                    v170 = (void *)v169;
                    v171 = buf;
                    if (v165 < 0)
                      v171 = v166;
                    *(_DWORD *)v219 = 136315650;
                    *(_QWORD *)&v219[4] = v171;
                    v220 = 1026;
                    v221 = 592;
                    v222 = 2114;
                    v223 = v169;
                    _os_log_error_impl(&dword_239388000, v63, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to find deintegrateVoxelsInTruncationRegion compute shader. Error details: %{public}@", v219, 0x1Cu);

                    if (v218 < 0)
                      operator delete(*(void **)buf);
                  }

                  v62 = 0;
                }
                v64 = **(id **)(a1 + 32);
                v202 = v61;
                v66 = objc_msgSend_newComputePipelineStateWithFunction_error_(v64, v65, v62, &v202);
                v67 = v202;

                v68 = *(void **)(a1 + 376);
                *(_QWORD *)(a1 + 376) = v66;

                if (!*(_QWORD *)(a1 + 376))
                {
                  sub_2393D6724();
                  v70 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
                  {
                    sub_2393C4DD0(buf, "BOOL oc::voxel_hashing::VoxelIntegratorGPU::createPipelineStates(const VoxelHashingMode &)");
                    v172 = v218;
                    v173 = *(_BYTE **)buf;
                    objc_msgSend_localizedDescription(v67, v174, v175);
                    v176 = objc_claimAutoreleasedReturnValue();
                    v177 = (void *)v176;
                    v178 = buf;
                    if (v172 < 0)
                      v178 = v173;
                    *(_DWORD *)v219 = 136315650;
                    *(_QWORD *)&v219[4] = v178;
                    v220 = 1026;
                    v221 = 600;
                    v222 = 2114;
                    v223 = v176;
                    _os_log_error_impl(&dword_239388000, v70, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create pipeline state for deintegrateVoxelsInTruncationRegion compute shader. Error details: %{public}@", v219, 0x1Cu);

                    if (v218 < 0)
                      operator delete(*(void **)buf);
                  }

                }
                v71 = objc_msgSend_newFunctionWithName_(*(void **)(*(_QWORD *)(a1 + 32) + 16), v69, (uint64_t)CFSTR("oc::voxel_hashing::updateArgsForFindHashEntriesToErase"));
                if (!v71)
                {
                  sub_2393D6724();
                  v72 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR))
                  {
                    sub_2393C4DD0(v219, "BOOL oc::voxel_hashing::VoxelIntegratorGPU::createPipelineStates(const VoxelHashingMode &)");
                    v179 = (v223 & 0x80000000) == 0 ? v219 : *(_BYTE **)v219;
                    *(_DWORD *)buf = 136315394;
                    *(_QWORD *)&buf[4] = v179;
                    v216 = 1026;
                    v217 = 607;
                    _os_log_error_impl(&dword_239388000, v72, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to find updateArgsForFindHashEntriesToErase compute shader.", buf, 0x12u);
                    if (SBYTE3(v223) < 0)
                      operator delete(*(void **)v219);
                  }

                  v71 = 0;
                }
                v73 = **(id **)(a1 + 32);
                v201 = v67;
                v195 = (void *)v71;
                v75 = objc_msgSend_newComputePipelineStateWithFunction_error_(v73, v74, v71, &v201);
                v26 = v201;

                v76 = *(void **)(a1 + 384);
                *(_QWORD *)(a1 + 384) = v75;

                if (*(_QWORD *)(a1 + 384))
                {
                  v78 = objc_msgSend_newFunctionWithName_(*(void **)(*(_QWORD *)(a1 + 32) + 16), v77, (uint64_t)CFSTR("oc::voxel_hashing::findHashEntriesToErase"));
                  if (!v78)
                  {
                    sub_2393D6724();
                    v79 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
                    {
                      sub_2393C4DD0(v219, "BOOL oc::voxel_hashing::VoxelIntegratorGPU::createPipelineStates(const VoxelHashingMode &)");
                      v187 = (v223 & 0x80000000) == 0 ? v219 : *(_BYTE **)v219;
                      *(_DWORD *)buf = 136315394;
                      *(_QWORD *)&buf[4] = v187;
                      v216 = 1026;
                      v217 = 623;
                      _os_log_error_impl(&dword_239388000, v79, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to find findHashEntriesToErase compute shader.", buf, 0x12u);
                      if (SBYTE3(v223) < 0)
                        operator delete(*(void **)v219);
                    }

                  }
                  v80 = **(id **)(a1 + 32);
                  v200 = v26;
                  v82 = objc_msgSend_newComputePipelineStateWithFunction_error_(v80, v81, (uint64_t)v78, &v200);
                  v83 = v200;

                  v84 = *(void **)(a1 + 392);
                  *(_QWORD *)(a1 + 392) = v82;

                  if (*(_QWORD *)(a1 + 392))
                  {
                    v85 = 1;
                  }
                  else
                  {
                    sub_2393D6724();
                    v107 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v107, OS_LOG_TYPE_ERROR))
                    {
                      sub_2393C4DD0(buf, "BOOL oc::voxel_hashing::VoxelIntegratorGPU::createPipelineStates(const VoxelHashingMode &)");
                      v188 = v218;
                      v189 = *(_BYTE **)buf;
                      objc_msgSend_localizedDescription(v83, v190, v191);
                      v192 = objc_claimAutoreleasedReturnValue();
                      v193 = (void *)v192;
                      v194 = buf;
                      if (v188 < 0)
                        v194 = v189;
                      *(_DWORD *)v219 = 136315650;
                      *(_QWORD *)&v219[4] = v194;
                      v220 = 1026;
                      v221 = 631;
                      v222 = 2114;
                      v223 = v192;
                      _os_log_error_impl(&dword_239388000, v107, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create pipeline state for findHashEntriesToErase compute shader. Error details: %{public}@", v219, 0x1Cu);

                      if (v218 < 0)
                        operator delete(*(void **)buf);
                    }

                    v85 = 0;
                  }
                  v26 = v83;
                }
                else
                {
                  sub_2393D6724();
                  v78 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
                  {
                    sub_2393C4DD0(buf, "BOOL oc::voxel_hashing::VoxelIntegratorGPU::createPipelineStates(const VoxelHashingMode &)");
                    v180 = v218;
                    v181 = *(_BYTE **)buf;
                    objc_msgSend_localizedDescription(v26, v182, v183);
                    v184 = objc_claimAutoreleasedReturnValue();
                    v185 = (void *)v184;
                    v186 = v180 >= 0 ? buf : v181;
                    *(_DWORD *)v219 = 136315650;
                    *(_QWORD *)&v219[4] = v186;
                    v220 = 1026;
                    v221 = 615;
                    v222 = 2114;
                    v223 = v184;
                    _os_log_error_impl(&dword_239388000, v78, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create pipeline state for updateArgsForFindHashEntriesToErase compute shader. Error details: %{public}@", v219, 0x1Cu);

                    if (v218 < 0)
                      operator delete(*(void **)buf);
                  }
                  v85 = 0;
                }

                v90 = v196;
              }
              else
              {
                if (qword_256930480 != -1)
                  dispatch_once(&qword_256930480, &unk_250AD68B8);
                v90 = (id)qword_256930478;
                if (os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
                {
                  sub_2393C4DD0(buf, "BOOL oc::voxel_hashing::VoxelIntegratorGPU::createPipelineStates(const VoxelHashingMode &)");
                  v158 = v218;
                  v159 = *(_BYTE **)buf;
                  objc_msgSend_localizedDescription(v26, v160, v161);
                  v162 = objc_claimAutoreleasedReturnValue();
                  v163 = (void *)v162;
                  v164 = v158 >= 0 ? buf : v159;
                  *(_DWORD *)v219 = 136315650;
                  *(_QWORD *)&v219[4] = v164;
                  v220 = 1026;
                  v221 = 581;
                  v222 = 2114;
                  v223 = v162;
                  _os_log_error_impl(&dword_239388000, v90, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create pipeline state for integrateVoxelsInTruncationRegion compute shader. Error details: %{public}@", v219, 0x1Cu);

                  if (v218 < 0)
                    operator delete(*(void **)buf);
                }
                v85 = 0;
              }

              v89 = v197;
            }
            else
            {
              if (qword_256930480 != -1)
                dispatch_once(&qword_256930480, &unk_250AD68B8);
              v89 = (id)qword_256930478;
              if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR))
              {
                sub_2393C4DD0(buf, "BOOL oc::voxel_hashing::VoxelIntegratorGPU::createPipelineStates(const VoxelHashingMode &)");
                v144 = v218;
                v145 = *(_BYTE **)buf;
                objc_msgSend_localizedDescription(v26, v146, v147);
                v148 = objc_claimAutoreleasedReturnValue();
                v149 = (void *)v148;
                v150 = v144 >= 0 ? buf : v145;
                *(_DWORD *)v219 = 136315650;
                *(_QWORD *)&v219[4] = v150;
                v220 = 1026;
                v221 = 562;
                v222 = 2114;
                v223 = v148;
                _os_log_error_impl(&dword_239388000, v89, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create pipeline state for integrateVoxelsUptoTruncationRegion compute shader. Error details: %{public}@", v219, 0x1Cu);

                if (v218 < 0)
                  operator delete(*(void **)buf);
              }
              v85 = 0;
            }

            v88 = v198;
          }
          else
          {
            if (qword_256930480 != -1)
              dispatch_once(&qword_256930480, &unk_250AD68B8);
            v88 = (id)qword_256930478;
            if (os_log_type_enabled(v88, OS_LOG_TYPE_ERROR))
            {
              sub_2393C4DD0(buf, "BOOL oc::voxel_hashing::VoxelIntegratorGPU::createPipelineStates(const VoxelHashingMode &)");
              v130 = v218;
              v131 = *(_BYTE **)buf;
              objc_msgSend_localizedDescription(v26, v132, v133);
              v134 = objc_claimAutoreleasedReturnValue();
              v135 = (void *)v134;
              v136 = v130 >= 0 ? buf : v131;
              *(_DWORD *)v219 = 136315650;
              *(_QWORD *)&v219[4] = v136;
              v220 = 1026;
              v221 = 543;
              v222 = 2114;
              v223 = v134;
              _os_log_error_impl(&dword_239388000, v88, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create pipeline state for integrateVoxelsBetweenCameraAndEndPoints compute shader. Error details: %{public}@", v219, 0x1Cu);

              if (v218 < 0)
                operator delete(*(void **)buf);
            }
            v85 = 0;
          }

          v87 = v199;
        }
        else
        {
          if (qword_256930480 != -1)
            dispatch_once(&qword_256930480, &unk_250AD68B8);
          v87 = (id)qword_256930478;
          if (os_log_type_enabled(v87, OS_LOG_TYPE_ERROR))
          {
            sub_2393C4DD0(buf, "BOOL oc::voxel_hashing::VoxelIntegratorGPU::createPipelineStates(const VoxelHashingMode &)");
            v116 = v218;
            v117 = *(_BYTE **)buf;
            objc_msgSend_localizedDescription(v30, v118, v119);
            v120 = objc_claimAutoreleasedReturnValue();
            v121 = (void *)v120;
            v122 = v116 >= 0 ? buf : v117;
            *(_DWORD *)v219 = 136315650;
            *(_QWORD *)&v219[4] = v122;
            v220 = 1026;
            v221 = 523;
            v222 = 2114;
            v223 = v120;
            _os_log_error_impl(&dword_239388000, v87, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create pipeline state for allocateVoxelBlocksIntersectingRay compute shader. Error details: %{public}@", v219, 0x1Cu);

            if (v218 < 0)
              operator delete(*(void **)buf);
          }
          v85 = 0;
          v26 = v30;
        }
      }
      else
      {
        if (qword_256930480 != -1)
          dispatch_once(&qword_256930480, &unk_250AD68B8);
        v87 = (id)qword_256930478;
        if (os_log_type_enabled(v87, OS_LOG_TYPE_ERROR))
        {
          sub_2393C4DD0(buf, "BOOL oc::voxel_hashing::VoxelIntegratorGPU::createPipelineStates(const VoxelHashingMode &)");
          v109 = v218;
          v110 = *(_BYTE **)buf;
          objc_msgSend_localizedDescription(v26, v111, v112);
          v113 = objc_claimAutoreleasedReturnValue();
          v114 = (void *)v113;
          v115 = v109 >= 0 ? buf : v110;
          *(_DWORD *)v219 = 136315650;
          *(_QWORD *)&v219[4] = v115;
          v220 = 1026;
          v221 = 514;
          v222 = 2114;
          v223 = v113;
          _os_log_error_impl(&dword_239388000, v87, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to find allocateVoxelBlocksIntersectingRay compute shader. Error details: %{public}@", v219, 0x1Cu);

          if (v218 < 0)
            operator delete(*(void **)buf);
        }
        v85 = 0;
      }

      v86 = v25;
      v21 = v26;
    }
    else
    {
      if (qword_256930480 != -1)
        dispatch_once(&qword_256930480, &unk_250AD68B8);
      v86 = (id)qword_256930478;
      if (os_log_type_enabled(v86, OS_LOG_TYPE_ERROR))
      {
        sub_2393C4DD0(buf, "BOOL oc::voxel_hashing::VoxelIntegratorGPU::createPipelineStates(const VoxelHashingMode &)");
        v100 = v218;
        v101 = *(_BYTE **)buf;
        objc_msgSend_localizedDescription(v21, v102, v103);
        v104 = objc_claimAutoreleasedReturnValue();
        v105 = (void *)v104;
        v106 = v100 >= 0 ? buf : v101;
        *(_DWORD *)v219 = 136315650;
        *(_QWORD *)&v219[4] = v106;
        v220 = 1026;
        v221 = 503;
        v222 = 2114;
        v223 = v104;
        _os_log_error_impl(&dword_239388000, v86, OS_LOG_TYPE_ERROR, "%s:%{public}d VoxelIntegratorGPU::createPipelineStates: Failed to create pipeline state for resetAllHashEntryLocksAndHashEntryUpdateFlag compute shader. Error details: %{public}@", v219, 0x1Cu);

        if (v218 < 0)
          operator delete(*(void **)buf);
      }
      v85 = 0;
    }

    v13 = v21;
  }
  else
  {
    if (qword_256930480 != -1)
      dispatch_once(&qword_256930480, &unk_250AD68B8);
    v16 = (id)qword_256930478;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      sub_2393C4DD0(buf, "BOOL oc::voxel_hashing::VoxelIntegratorGPU::createPipelineStates(const VoxelHashingMode &)");
      v92 = v218;
      v93 = *(_BYTE **)buf;
      objc_msgSend_localizedDescription(v13, v94, v95);
      v96 = objc_claimAutoreleasedReturnValue();
      v97 = (void *)v96;
      v98 = v92 >= 0 ? buf : v93;
      *(_DWORD *)v219 = 136315650;
      *(_QWORD *)&v219[4] = v98;
      v220 = 1026;
      v221 = 487;
      v222 = 2114;
      v223 = v96;
      _os_log_error_impl(&dword_239388000, v16, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create pipeline state for resetAllHashBucketLocks compute shader. Error details: %{public}@", v219, 0x1Cu);

      if (v218 < 0)
        operator delete(*(void **)buf);
    }
    v85 = 0;
  }

  return v85;
}

void sub_2393D8E6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  int v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;

  if (v38 < 0)
    operator delete(v41);

  _Unwind_Resume(a1);
}

uint64_t sub_2393D90E8(uint64_t a1)
{
  id v2;
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  void *v7;
  id v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  void *v19;
  unsigned int v20;
  id v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  void *v26;
  id v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  id v35;
  const char *v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  void *v40;
  id v41;
  const char *v42;
  uint64_t v43;
  void *v44;
  const char *v45;
  void *v46;
  id v47;
  const char *v48;
  uint64_t v49;
  void *v50;
  const char *v51;
  void *v52;
  NSObject *v54;
  void **v55;
  void **v56;
  void **v57;
  void **v58;
  void **v59;
  void **v60;
  void **v61;
  void *__p[2];
  char v63;
  uint8_t buf[4];
  void **v65;
  __int16 v66;
  int v67;
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  v2 = **(id **)(a1 + 32);
  v4 = objc_msgSend_newBufferWithLength_options_(v2, v3, 48 * *(unsigned int *)(a1 + 440), 0);
  v5 = *(void **)(a1 + 448);
  *(_QWORD *)(a1 + 448) = v4;

  v7 = *(void **)(a1 + 448);
  if (!v7)
  {
    if (qword_256930480 != -1)
      dispatch_once(&qword_256930480, &unk_250AD68B8);
    v54 = (id)qword_256930478;
    if (!os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
      goto LABEL_48;
    sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::VoxelIntegratorGPU::createBuffers()");
    v55 = v63 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v65 = v55;
    v66 = 1026;
    v67 = 646;
    _os_log_error_impl(&dword_239388000, v54, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create points buffer.", buf, 0x12u);
    if ((v63 & 0x80000000) == 0)
      goto LABEL_48;
    goto LABEL_83;
  }
  objc_msgSend_setLabel_(v7, v6, (uint64_t)CFSTR("InputPoints Buffer"));
  v8 = **(id **)(a1 + 32);
  v10 = objc_msgSend_newBufferWithLength_options_(v8, v9, 20 * *(unsigned int *)(a1 + 440), 0);
  v11 = *(void **)(a1 + 456);
  *(_QWORD *)(a1 + 456) = v10;

  v13 = *(void **)(a1 + 456);
  if (!v13)
  {
    if (qword_256930480 != -1)
      dispatch_once(&qword_256930480, &unk_250AD68B8);
    v54 = (id)qword_256930478;
    if (!os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
      goto LABEL_48;
    sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::VoxelIntegratorGPU::createBuffers()");
    v56 = v63 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v65 = v56;
    v66 = 1026;
    v67 = 656;
    _os_log_error_impl(&dword_239388000, v54, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create pointSupplements buffer.", buf, 0x12u);
    if ((v63 & 0x80000000) == 0)
      goto LABEL_48;
    goto LABEL_83;
  }
  objc_msgSend_setLabel_(v13, v12, (uint64_t)CFSTR("PointSupplements Buffer"));
  v14 = *(unsigned int *)(a1 + 440);
  if ((_DWORD)v14)
  {
    v15 = ((v14 - 1) >> 6) + 1;
    v16 = operator new(8 * v15);
    v17 = v16;
    if (v14 >= 0x41)
      v18 = (v14 - 1) >> 6;
    else
      v18 = 0;
    v16[v18] = 0;
    if (v14 >= 0x40)
      bzero(v16, 8 * (v14 >> 6));
    if ((v14 & 0x3F) != 0)
      v17[v14 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v14 & 0x3F));
    v19 = *(void **)(a1 + 416);
    if (v19)
      goto LABEL_12;
  }
  else
  {
    v15 = 0;
    v17 = 0;
    v19 = *(void **)(a1 + 416);
    if (v19)
    {
LABEL_12:
      operator delete(v19);
      *(_QWORD *)(a1 + 416) = 0;
      *(_QWORD *)(a1 + 424) = 0;
      *(_QWORD *)(a1 + 432) = 0;
    }
  }
  *(_QWORD *)(a1 + 416) = v17;
  *(_QWORD *)(a1 + 424) = v14;
  *(_QWORD *)(a1 + 432) = v15;
  v20 = *(_DWORD *)(a1 + 120) * *(_DWORD *)(a1 + 96);
  v21 = **(id **)(a1 + 32);
  v23 = objc_msgSend_newBufferWithLength_options_(v21, v22, 4 * v20, 0);
  v24 = *(void **)(a1 + 464);
  *(_QWORD *)(a1 + 464) = v23;

  v26 = *(void **)(a1 + 464);
  if (!v26)
  {
    if (qword_256930480 != -1)
      dispatch_once(&qword_256930480, &unk_250AD68B8);
    v54 = (id)qword_256930478;
    if (!os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
      goto LABEL_48;
    sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::VoxelIntegratorGPU::createBuffers()");
    v57 = v63 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v65 = v57;
    v66 = 1026;
    v67 = 669;
    _os_log_error_impl(&dword_239388000, v54, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create hashBucketLocks buffer.", buf, 0x12u);
    if ((v63 & 0x80000000) == 0)
      goto LABEL_48;
    goto LABEL_83;
  }
  objc_msgSend_setLabel_(v26, v25, (uint64_t)CFSTR("HashBucketLocks Buffer"));
  v27 = **(id **)(a1 + 32);
  v29 = objc_msgSend_newBufferWithLength_options_(v27, v28, 4, 0);
  v30 = *(void **)(a1 + 472);
  *(_QWORD *)(a1 + 472) = v29;

  v32 = *(void **)(a1 + 472);
  if (!v32)
  {
    if (qword_256930480 != -1)
      dispatch_once(&qword_256930480, &unk_250AD68B8);
    v54 = (id)qword_256930478;
    if (!os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
      goto LABEL_48;
    sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::VoxelIntegratorGPU::createBuffers()");
    v58 = v63 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v65 = v58;
    v66 = 1026;
    v67 = 678;
    _os_log_error_impl(&dword_239388000, v54, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create numLockedBucketIdxs buffer.", buf, 0x12u);
    if ((v63 & 0x80000000) == 0)
      goto LABEL_48;
    goto LABEL_83;
  }
  objc_msgSend_setLabel_(v32, v31, (uint64_t)CFSTR("NumLockedBucketIdxs Buffer"));
  *(_DWORD *)objc_msgSend_contents(*(void **)(a1 + 472), v33, v34) = 0;
  v35 = **(id **)(a1 + 32);
  v37 = objc_msgSend_newBufferWithLength_options_(v35, v36, 4 * *(unsigned int *)(a1 + 96), 0);
  v38 = *(void **)(a1 + 480);
  *(_QWORD *)(a1 + 480) = v37;

  v40 = *(void **)(a1 + 480);
  if (!v40)
  {
    if (qword_256930480 != -1)
      dispatch_once(&qword_256930480, &unk_250AD68B8);
    v54 = (id)qword_256930478;
    if (!os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
      goto LABEL_48;
    sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::VoxelIntegratorGPU::createBuffers()");
    v59 = v63 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v65 = v59;
    v66 = 1026;
    v67 = 692;
    _os_log_error_impl(&dword_239388000, v54, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create lockedBucketIdxs buffer.", buf, 0x12u);
    if ((v63 & 0x80000000) == 0)
      goto LABEL_48;
    goto LABEL_83;
  }
  objc_msgSend_setLabel_(v40, v39, (uint64_t)CFSTR("LockedBucketIdxs Buffer"));
  v41 = **(id **)(a1 + 32);
  v43 = objc_msgSend_newBufferWithLength_options_(v41, v42, 4 * *(unsigned int *)(a1 + 108), 0);
  v44 = *(void **)(a1 + 488);
  *(_QWORD *)(a1 + 488) = v43;

  v46 = *(void **)(a1 + 488);
  if (!v46)
  {
    if (qword_256930480 != -1)
      dispatch_once(&qword_256930480, &unk_250AD68B8);
    v54 = (id)qword_256930478;
    if (!os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
      goto LABEL_48;
    sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::VoxelIntegratorGPU::createBuffers()");
    v60 = v63 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v65 = v60;
    v66 = 1026;
    v67 = 702;
    _os_log_error_impl(&dword_239388000, v54, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create hashEntryLocks buffer.", buf, 0x12u);
    if ((v63 & 0x80000000) == 0)
      goto LABEL_48;
    goto LABEL_83;
  }
  objc_msgSend_setLabel_(v46, v45, (uint64_t)CFSTR("HashEntryLocks Buffer"));
  v47 = **(id **)(a1 + 32);
  v49 = objc_msgSend_newBufferWithLength_options_(v47, v48, 12, 0);
  v50 = *(void **)(a1 + 496);
  *(_QWORD *)(a1 + 496) = v49;

  v52 = *(void **)(a1 + 496);
  if (v52)
  {
    objc_msgSend_setLabel_(v52, v51, (uint64_t)CFSTR("IndirectArgsFindHashEntriesToErase Buffer"));
    return 1;
  }
  if (qword_256930480 != -1)
    dispatch_once(&qword_256930480, &unk_250AD68B8);
  v54 = (id)qword_256930478;
  if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
  {
    sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::VoxelIntegratorGPU::createBuffers()");
    v61 = v63 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v65 = v61;
    v66 = 1026;
    v67 = 712;
    _os_log_error_impl(&dword_239388000, v54, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create indirectArgsFindHashEntriesToErase buffer.", buf, 0x12u);
    if (v63 < 0)
LABEL_83:
      operator delete(__p[0]);
  }
LABEL_48:

  return 0;
}

void sub_2393D9954(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_2393D9980(uint64_t a1)
{
  std::chrono::steady_clock::time_point v2;
  id v3;
  const char *v4;
  uint64_t v5;
  id v6;
  const char *v7;
  uint64_t v8;
  id v9;
  const char *v10;
  uint64_t v11;
  id v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  const char *v17;
  uint64_t v18;
  _DWORD *v19;
  id v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  __int32 v28;
  __int32 v29;
  float32x4_t v30;
  int8x16_t v31;
  int v32;
  __int32 v33;
  __int16 v34;
  __int16 v35;
  BOOL v36;
  std::chrono::steady_clock::time_point v37;
  NSObject *v38;
  NSObject *v40;
  int v41;
  __int16 v42;
  int v43;
  unsigned __int16 v44;
  NSObject *v45;
  _BYTE *v46;
  _BYTE *v47;
  _BYTE *v48;
  _BYTE *v49;
  __int16 v50;
  __int32 v51;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  float32x4_t v53;
  int v54;
  __int16 v55;
  __int16 v56;
  int v57;
  unsigned int *v58;
  uint64_t v59;
  uint64_t v60;
  int16x4_t v61;
  _BYTE buf[12];
  __int16 v63;
  int v64;
  __int16 v65;
  __int128 v66;
  double v67;
  __int16 v68;
  double v69;
  _BYTE v70[12];
  __int16 v71;
  int v72;
  char v73;
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  v2.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  sub_2393EC380(*(_QWORD *)(a1 + 16));
  v3 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v60 = objc_msgSend_contents(v3, v4, v5);

  sub_2393EC4AC(*(_QWORD *)(a1 + 16));
  v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v59 = objc_msgSend_contents(v6, v7, v8);

  sub_2393EC5D8(*(_QWORD *)(a1 + 16));
  v9 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v58 = (unsigned int *)objc_msgSend_contents(v9, v10, v11);

  sub_2393EC708(*(_QWORD *)(a1 + 16));
  v12 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v15 = objc_msgSend_contents(v12, v13, v14);

  sub_2393EC838(*(_QWORD *)(a1 + 16));
  v16 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v19 = (_DWORD *)objc_msgSend_contents(v16, v17, v18);

  sub_2393ECE28(*(_QWORD *)(a1 + 16));
  v20 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v23 = objc_msgSend_contents(v20, v21, v22);

  v24 = *(float32x4_t *)(a1 + 48);
  v25 = vaddq_f32(v24, v24);
  v24.f32[0] = *(float *)(a1 + 292) * 8.0;
  v26.i64[0] = 0x3F0000003F000000;
  v26.i64[1] = 0x3F0000003F000000;
  v30 = vmulq_f32(v25, v26);
  v27 = vdivq_f32(v30, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.f32, 0));
  v27.i32[3] = 0;
  v31 = (int8x16_t)vrndpq_f32(v27);
  *(int32x2_t *)v30.f32 = vcvt_s32_f32(*(float32x2_t *)v31.i8);
  v28 = v30.i32[1];
  v29 = v30.i32[0];
  v30.i16[1] = v30.i16[2];
  v30.i16[2] = (int)*(float *)&v31.i32[2];
  *(int16x4_t *)v31.i8 = vneg_s16(*(int16x4_t *)v30.f32);
  v32 = 8 * v28 * v29 * (int)*(float *)&v31.i32[2];
  LOWORD(v33) = v31.i16[1];
  if (v31.i16[1] >= v28
    || ((v34 = v31.i16[2], v35 = v31.i16[0], v31.i16[2] < (int)*(float *)&v31.i32[2])
      ? (v36 = v29 <= v31.i16[0])
      : (v36 = 1),
        v36))
  {
    v41 = 0;
  }
  else
  {
    v53 = v25;
    v41 = 0;
    v42 = v29 - v31.i16[0];
    rep = v2.__d_.__rep_;
    v54 = 8 * v28 * v29 * (int)*(float *)&v31.i32[2];
    v55 = v29 - v31.i16[0];
    v56 = v31.i16[0];
    v57 = (int)*(float *)&v31.i32[2];
    v50 = v31.i16[2];
    v51 = v28;
    do
    {
      LOWORD(v43) = v34;
      while (2)
      {
        v44 = v42 + v41;
        do
        {
          v31.i16[0] = v35;
          v31.i16[1] = v33;
          v31.i16[2] = v43;
          v61 = *(int16x4_t *)v31.i8;
          if ((sub_2393D6FF8((unsigned int *)(a1 + 96), **(_QWORD **)(a1 + 320), *(_DWORD *)(a1 + 408), &v61, *(_BYTE *)(a1 + 637), v60, v59, v58, v31, (int32x4_t)v30, (int8x16_t)v25, v15, v19, v23) & 0x80000000) != 0)
          {
            if (qword_256930480 != -1)
              dispatch_once(&qword_256930480, &unk_250AD68B8);
            v45 = (id)qword_256930478;
            if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
            {
              sub_2393C4DD0(v70, "BOOL oc::voxel_hashing::VoxelIntegratorGPU::allocateAllVoxelBlocksInBoundingBox()");
              v49 = v73 >= 0 ? v70 : *(_BYTE **)v70;
              *(_DWORD *)buf = 136316162;
              *(_QWORD *)&buf[4] = v49;
              v63 = 1026;
              v64 = 756;
              v65 = 1026;
              LODWORD(v66) = v35;
              WORD2(v66) = 1026;
              *(_DWORD *)((char *)&v66 + 6) = (__int16)v33;
              WORD5(v66) = 1026;
              HIDWORD(v66) = (__int16)v43;
              _os_log_error_impl(&dword_239388000, v45, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to allocate voxel block at position {%{public}d, %{public}d, %{public}d}", buf, 0x24u);
              if (v73 < 0)
                operator delete(*(void **)v70);
            }

            if (qword_256930480 != -1)
              dispatch_once(&qword_256930480, &unk_250AD68B8);
            v40 = (id)qword_256930478;
            if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
            {
              sub_2393C4DD0(v70, "BOOL oc::voxel_hashing::VoxelIntegratorGPU::allocateAllVoxelBlocksInBoundingBox()");
              v46 = v73 >= 0 ? v70 : *(_BYTE **)v70;
              *(_DWORD *)buf = 136316418;
              *(_QWORD *)&buf[4] = v46;
              v63 = 1026;
              v64 = 763;
              v65 = 1026;
              LODWORD(v66) = v54;
              WORD2(v66) = 2050;
              *(double *)((char *)&v66 + 6) = v53.f32[0];
              HIWORD(v66) = 2050;
              v67 = v53.f32[1];
              v68 = 2050;
              v69 = v53.f32[2];
              _os_log_impl(&dword_239388000, v40, OS_LOG_TYPE_DEFAULT, "%s:%{public}d VoxelBlockPreallocation is enabled, ensure the voxelHashingCapacity is set to %{public}u to fill the bounding box of extents {%{public}f, %{public}f, %{public}f}", buf, 0x36u);
              if (v73 < 0)
                operator delete(*(void **)v70);
            }
            goto LABEL_35;
          }
          ++v41;
          ++v35;
        }
        while (v44 != (unsigned __int16)v41);
        v43 = (__int16)(v43 + 1);
        v35 = v56;
        v42 = v55;
        if (v43 < v57)
          continue;
        break;
      }
      v33 = (__int16)(v33 + 1);
      v34 = v50;
      v2.__d_.__rep_ = rep;
      v32 = v54;
    }
    while (v33 < v51);
  }
  if (v41 == v32)
  {
    v37.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    if (qword_256930480 != -1)
      dispatch_once(&qword_256930480, &unk_250AD68B8);
    v38 = (id)qword_256930478;
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
    {
      sub_2393C4DD0(v70, "BOOL oc::voxel_hashing::VoxelIntegratorGPU::allocateAllVoxelBlocksInBoundingBox()");
      if (v73 >= 0)
        v47 = v70;
      else
        v47 = *(_BYTE **)v70;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v47;
      v63 = 1026;
      v64 = 782;
      v65 = 2050;
      *(double *)&v66 = (float)((float)((v37.__d_.__rep_ - v2.__d_.__rep_) / 1000) / 1000.0);
      _os_log_debug_impl(&dword_239388000, v38, OS_LOG_TYPE_DEBUG, "%s:%{public}d VoxelBlockPreallocation took %{public}f ms", buf, 0x1Cu);
      if (v73 < 0)
        operator delete(*(void **)v70);
    }

    return 1;
  }
  else
  {
    if (qword_256930480 != -1)
      dispatch_once(&qword_256930480, &unk_250AD68B8);
    v40 = (id)qword_256930478;
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      sub_2393C4DD0(buf, "BOOL oc::voxel_hashing::VoxelIntegratorGPU::allocateAllVoxelBlocksInBoundingBox()");
      v48 = (SBYTE3(v66) & 0x80u) == 0 ? buf : *(_BYTE **)buf;
      *(_DWORD *)v70 = 136315394;
      *(_QWORD *)&v70[4] = v48;
      v71 = 1026;
      v72 = 775;
      _os_log_error_impl(&dword_239388000, v40, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to pre-allocate all the voxel blocks in the bounding box", v70, 0x12u);
      if (SBYTE3(v66) < 0)
        operator delete(*(void **)buf);
    }
LABEL_35:

    return 0;
  }
}

void sub_2393D9FB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_2393D9FE0(uint64_t *a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;
  const char *v10;
  uint64_t result;

  v4 = operator new();
  v5 = atomic_load((unsigned __int8 *)&qword_256930538);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_256930538))
  {
    qword_256930530 = sub_2393F2DD8();
    __cxa_atexit((void (*)(void *))sub_2393F2FA4, &qword_256930530, &dword_239388000);
    __cxa_guard_release(&qword_256930538);
  }
  *(_QWORD *)v4 = qword_256930530;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  objc_msgSend_sharedCaptureManager(MEMORY[0x24BDDD500], v2, v3);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = *(void **)(v4 + 8);
  *(_QWORD *)(v4 + 8) = v6;

  v8 = objc_alloc_init(MEMORY[0x24BDDD4F8]);
  v9 = *(void **)(v4 + 16);
  *(_QWORD *)(v4 + 16) = v8;

  result = objc_msgSend_setCaptureObject_(*(void **)(v4 + 16), v10, **(_QWORD **)v4);
  *a1 = v4;
  return result;
}

void sub_2393DA0D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  __cxa_guard_abort(&qword_256930538);
  MEMORY[0x23B83C4BC](v1, 0xE0C40BC9ECFC2);
  _Unwind_Resume(a1);
}

uint64_t *sub_2393DA120(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {

    MEMORY[0x23B83C4BC](v4, 0xE0C40BC9ECFC2);
  }
  return a1;
}

uint64_t *sub_2393DA17C(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {

    MEMORY[0x23B83C4BC](v2, 0xE0C40BC9ECFC2);
  }
  return a1;
}

uint64_t sub_2393DA1D0(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *(_QWORD *)(a1 + 640);
  *(_QWORD *)(a1 + 640) = 0;
  if (v2)
  {

    MEMORY[0x23B83C4BC](v2, 0xE0C40BC9ECFC2);
  }

  v3 = *(void **)(a1 + 416);
  if (v3)
    operator delete(v3);

  v4 = *(std::__shared_weak_count **)(a1 + 24);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

uint64_t sub_2393DA2F0(_QWORD *a1, float32x4_t *a2, float32x4_t *a3, uint64_t a4, _OWORD *a5, unsigned int **a6)
{
  float32x4_t v6;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t *v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  signed __int32 v23;
  size_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  _DWORD *v30;
  int v31;
  int v32;
  int32x4_t v33;
  uint64_t v36;
  char *v37;
  _QWORD *v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _BYTE *v46;
  _DWORD *v47;
  unint64_t v48;
  uint64_t v49;
  _OWORD *v50;
  char *v51;
  uint64_t v52;
  __int128 v53;
  int v54;
  uint64_t v55;
  char *v56;
  NSObject *global_queue;
  char *v58;
  char *v59;
  size_t v60;
  uint64_t v61;
  _DWORD *v62;
  float *v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t *v66;
  float32x4_t *v67;
  float32x4_t *v68;
  float32x4_t v69;
  int8x16_t v70;
  unsigned __int8 v71;
  unsigned int v72;
  float *v73;
  float *v74;
  float *v75;
  float *v76;
  __int32 v77;
  float32x4_t v78;
  float32x4_t *v79;
  float32x4_t *v80;
  float32x4_t *v81;
  float32x4_t v82;
  int8x16_t v83;
  unsigned __int8 v84;
  unsigned int v85;
  float *v86;
  float *v87;
  float *v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  _OWORD *v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  void *v101;
  unint64_t *v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  char *v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  int64_t v118;
  char *v119;
  uint64_t v120;
  unint64_t v121;
  unsigned int *v122;
  unsigned int *v123;
  unsigned int *v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  __int128 *v132;
  _OWORD *v133;
  __int128 v134;
  __int128 v135;
  float *v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  _QWORD *v140;
  _QWORD **v141;
  _QWORD *v142;
  int v143;
  int v144;
  int v145;
  _QWORD *v146;
  _QWORD *v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  _BYTE *v151;
  int v152;
  uint64_t v153;
  int v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t *v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  _DWORD *v166;
  _DWORD *v167;
  int v168;
  int v169;
  int v170;
  int v171;
  unint64_t v172;
  unsigned int **v173;
  unint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t v181;
  _BYTE *v182;
  unsigned int *v183;
  unint64_t v184;
  uint64_t v185;
  _OWORD *v186;
  char *v187;
  uint64_t v188;
  __int128 v189;
  unsigned int v190;
  unsigned int *v191;
  char *v192;
  char *v193;
  uint64_t v194;
  void *v195;
  void *v196;
  unint64_t v197;
  char *v198;
  char *v199;
  char *v200;
  void *v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  uint64_t v205;
  char *v206;
  char *v207;
  int64_t v208;
  unint64_t v209;
  char *v210;
  char *v211;
  unint64_t v212;
  unint64_t v213;
  uint64_t v214;
  char *v215;
  char *v216;
  char *v217;
  unint64_t v218;
  char *v219;
  char *v220;
  char *v221;
  uint64_t v222;
  uint64_t v223;
  __int128 *v224;
  _OWORD *v225;
  uint64_t v226;
  __int128 v227;
  unint64_t v228;
  uint64_t v229;
  char *v230;
  char *v231;
  char *v232;
  void *v233;
  char *v234;
  uint64_t v235;
  uint64_t v236;
  unint64_t v237;
  unint64_t v238;
  unint64_t v239;
  uint64_t v240;
  char *v241;
  int64_t v242;
  unint64_t v243;
  char *v244;
  char *v245;
  uint64_t v246;
  uint64_t v247;
  __int128 *v248;
  char *v249;
  uint64_t v250;
  __int128 v251;
  uint64_t v252;
  char *v253;
  uint64_t v254;
  uint64_t v255;
  __int128 *v256;
  _OWORD *v257;
  uint64_t v258;
  __int128 v259;
  uint64_t v260;
  uint64_t v261;
  char *v262;
  char *v263;
  uint64_t v264;
  char *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  char *v270;
  int64_t v271;
  unint64_t v272;
  unint64_t v273;
  uint64_t v274;
  char *v275;
  char *v276;
  int64_t v277;
  unint64_t v278;
  char *v279;
  char *v280;
  uint64_t v281;
  uint64_t v282;
  __int128 *v283;
  _OWORD *v284;
  uint64_t v285;
  __int128 v286;
  uint64_t v287;
  unint64_t v288;
  _QWORD **v289;
  float32x4_t *v290;
  unint64_t v291;
  int64x2_t v292;
  char *v293;
  char *v294;
  void **v295;
  void **v296;
  unint64_t v297;
  void *v298;
  int *v299;
  unint64_t v300;
  unint64_t v301;
  unint64_t v302;
  unint64_t v303;
  int v304;
  int v305;
  int v306;
  int v307;
  unint64_t v308;
  uint64_t **v309;
  _QWORD *v310;
  int v311;
  int v312;
  int v313;
  int v314;
  int v315;
  char *v316;
  int v317;
  uint64_t v318;
  uint64_t *v319;
  _QWORD **v320;
  void *v321;
  char *v322;
  char *v323;
  void *v324;
  char *v325;
  void *v326;
  void *v327;
  uint64_t v328;
  __int128 *v329;
  float32x4_t v330;
  float32x4_t v331;
  float v332;
  float v333;
  BOOL v334;
  float v335;
  float v336;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  uint64_t v343;
  __int128 v344;
  __int128 v345;
  unsigned int *v346;
  unsigned int *v347;
  float32x2_t *v348;
  float32x2_t *v349;
  float32x2_t *v350;
  float32x4_t v351;
  float32x4_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint8_t *v356;
  uint8_t *v357;
  uint8_t *v358;
  uint64_t *v359;
  int v360;
  int v361;
  int v362;
  int v363;
  uint64_t v364;
  uint64_t *v365;
  uint64_t *v366;
  int32x2_t v367;
  uint64_t v368;
  unint64_t v369;
  unint64_t v370;
  char *v371;
  int32x2_t *v372;
  float32x2_t *v373;
  float32x2_t v374;
  _QWORD *v375;
  NSObject *v376;
  int v377;
  char *v378;
  unsigned int *v379;
  float v380;
  unsigned int v381;
  float32x4_t v382;
  int8x16_t v383;
  float v384;
  float32x4_t v385;
  float32x4_t v386;
  int32x2_t v387;
  int32x2_t v388;
  float32x2_t v389;
  float32x2_t v390;
  float32x2_t v391;
  float32x2_t v392;
  float32x2_t v393;
  float32x2_t v394;
  float32x2_t v395;
  float32x2_t *v396;
  simd_float2x2 v397;
  float32x2_t v398;
  float32x2_t v399;
  int32x2_t v400;
  int32x2_t v401;
  float32x4_t v402;
  float32x4_t v403;
  float32x2_t v404;
  unsigned int v405;
  float32x2_t v406;
  float32x2_t v407;
  float32x2_t v408;
  float32x2_t v409;
  float32x2_t v410;
  float32x2_t v411;
  float32x2_t v412;
  float32x2_t v413;
  float32x2_t v414;
  float32x2_t *v415;
  simd_float2x2 v416;
  float32x4_t v417;
  float32x2_t v418;
  int32x2_t v419;
  int32x2_t v420;
  int32x4_t v421;
  int32x4_t v422;
  int32x4_t v423;
  float32x2_t v424;
  float32x2_t v425;
  float32x2_t v426;
  float32x2_t v427;
  float32x2_t v428;
  float32x2_t v429;
  float *v430;
  int v431;
  float *v432;
  float *v433;
  float v435;
  uint64_t v436;
  unint64_t v437;
  unint64_t v438;
  _BYTE *v439;
  float *v440;
  float *v441;
  unint64_t v442;
  float *v443;
  uint64_t v444;
  _OWORD *v445;
  float *v446;
  uint64_t v447;
  __int128 v448;
  int v449;
  uint64_t v450;
  size_t v451;
  float *v452;
  uint64_t v453;
  float32x2_t *v454;
  float32x2_t *v455;
  float32x2_t *v456;
  uint64_t v457;
  float32x4_t v458;
  float32x4_t v459;
  int32x2_t v460;
  float v461;
  uint64_t v462;
  float32x4_t *v463;
  float32x4_t v464;
  float32x4_t v465;
  int32x4_t v466;
  float32x2_t v467;
  float32x2_t v468;
  float32x4_t v469;
  float32x4_t v470;
  __float2 v471;
  float32x2_t v472;
  float32x2_t v473;
  float32x2_t v474;
  float32x2_t v475;
  float32x2_t *v476;
  simd_float2x2 v477;
  float32x2_t v478;
  float32x2_t v479;
  float32x2_t v480;
  float32x2_t v481;
  float32x2_t v482;
  uint64_t v483;
  unint64_t v484;
  unint64_t v485;
  char *v486;
  float32x2_t *v487;
  char *v488;
  __int128 v489;
  float32x2_t *v490;
  float32x4_t v491;
  float32x4_t v492;
  float32x2_t *v493;
  float v494;
  float32x2_t v495;
  float32x2_t v496;
  unsigned int v497;
  float32x4_t v498;
  float32x4_t v499;
  unint64_t v500;
  float *v501;
  float32x2_t *v502;
  float *v503;
  unint64_t v504;
  float v505;
  float *v506;
  float *v507;
  float v508;
  float32x2_t *v509;
  float32x2_t v510;
  float32x2_t v511;
  float32x2_t v512;
  float32x2_t v513;
  int8x16_t v514;
  float32x4_t v515;
  int32x4_t v516;
  unsigned int v517;
  float32x2_t v518;
  unsigned int v519;
  float32x4_t v520;
  float v521;
  float32x2_t v522;
  float32x2_t v523;
  float32x4_t v524;
  float32x2_t v525;
  float32x2_t v526;
  float32x4_t v527;
  float32x4_t v528;
  float32x4_t v529;
  float32x4_t v530;
  float32x4_t v531;
  int8x16_t v532;
  float32x4_t v533;
  float32x4_t v534;
  float32x4_t v535;
  float32x4_t v536;
  uint32x4_t v537;
  float32x4_t v538;
  float32x4_t v539;
  float32x4_t v540;
  float32x4_t v544;
  int32x4_t v545;
  float32x4_t v546;
  float32x4_t v547;
  float32x4_t v548;
  float32x4_t v549;
  float32x4_t v550;
  float32x4_t v551;
  float32x4_t v552;
  float32x4_t v553;
  int32x4_t v554;
  float32x2_t v555;
  float32x2_t v556;
  float32x4_t v557;
  int32x4_t v558;
  float32x2_t v559;
  float32x2_t v560;
  float32x4_t v561;
  int32x4_t v562;
  float32x2_t v563;
  float32x2_t v564;
  float32x4_t v565;
  float32x4_t v566;
  float32x4_t v567;
  float32x4_t v568;
  float32x4_t v569;
  float32x4_t v570;
  float32x4_t v571;
  float32x4_t v572;
  float32x4_t v573;
  int8x16_t v574;
  float32x4_t v575;
  float v576;
  float32x4_t v577;
  float v578;
  float v579;
  float32x4_t v580;
  float v581;
  float v582;
  float32x4_t v583;
  float32x4_t v584;
  float32x4_t v585;
  float32x4_t v586;
  float32x4_t v587;
  float v588;
  float32x4_t v589;
  float32x4_t v590;
  float v591;
  float32x2_t v592;
  float32x2_t v593;
  int32x4_t v594;
  int32x4_t v595;
  float32x2_t v596;
  float32x2_t v597;
  float32x4_t v598;
  float v599;
  float32x2_t v600;
  float32x2_t v601;
  float32x2_t v602;
  float32x2_t v603;
  float v604;
  float32x2_t v606;
  float32x2_t v607;
  float32x2_t v608;
  float v609;
  float32_t v610;
  float32x2_t v611;
  float32x2_t v612;
  float32x2_t v613;
  float v614;
  float32x2_t v615;
  float32x2_t v616;
  float32x2_t v617;
  float32x2_t v618;
  float32x2_t v619;
  float32x2_t v620;
  int8x16_t v622;
  float32x4_t v623;
  float v624;
  unsigned int v625;
  float32x2_t v626;
  float32x2_t v627;
  float32x2_t v628;
  float32x2_t v629;
  float32x2_t v630;
  float32x2_t v631;
  float32x4_t v632;
  float v633;
  float32x2_t v634;
  float32x2_t v635;
  int32x4_t v636;
  float32x2_t v637;
  float32x2_t v638;
  int32x4_t v639;
  float32x2_t v640;
  float32x2_t v641;
  float32x4_t v642;
  float v643;
  float v645;
  float32x2_t v646;
  float32x2_t v647;
  float32x2_t v648;
  float32x2_t v649;
  float32x2_t v650;
  float32x2_t v651;
  float v653;
  unsigned int v654;
  float32x2_t v655;
  float32x2_t v656;
  float32x2_t v657;
  float32x2_t v658;
  float32x2_t v659;
  float32x2_t v660;
  float32x2_t v661;
  float v662;
  float32x2_t v664;
  float32x2_t v665;
  float32x2_t v666;
  float v667;
  unsigned int v668;
  float32x2_t v669;
  float32x2_t v670;
  float32x2_t v671;
  float32x2_t v672;
  float32x2_t v673;
  float32x4_t v674;
  float32x4_t v675;
  float32x4_t v676;
  float32x2_t v677;
  float32x2_t v678;
  float32x4_t v679;
  int32x4_t v680;
  int8x16_t v681;
  float32x4_t v682;
  float32x4_t v683;
  float32x4_t v684;
  float32x4_t v685;
  float v686;
  float v687;
  float v688;
  float32x4_t v689;
  float32x4_t v690;
  float v691;
  float32x4_t v692;
  float32x2_t v693;
  float32x2_t v694;
  __float2 v695;
  int8x16_t v696;
  float v697;
  float v698;
  float32x4_t v699;
  int8x16_t v700;
  float32x4_t v701;
  int8x16_t v702;
  float v703;
  float32x4_t v704;
  float32x4_t v705;
  float v706;
  float v707;
  float v708;
  float32x2_t v709;
  float32x2_t v710;
  float v711;
  float v712;
  int32x2_t v713;
  float32x4_t v714;
  float32x4_t v715;
  float v716;
  float v717;
  float v718;
  float32x4_t v720;
  int8x16_t v721;
  float32x4_t v722;
  int8x16_t v723;
  float v724;
  float v725;
  float v726;
  float v727;
  float32x2_t v728;
  float32x2_t v729;
  float v730;
  float32x4_t v731;
  float v732;
  float v733;
  float v734;
  int8x16_t v735;
  float32x2_t v736;
  unsigned __int32 v738;
  float32x2_t v739;
  float32x2_t v740;
  float32x4_t v741;
  float v745;
  float v746;
  int32x2_t v751;
  float32x4_t v755;
  float32x4_t v756;
  float32x4_t v757;
  _OWORD *v758;
  __int128 v759;
  __int128 v760;
  __int128 v761;
  size_t v763;
  float *v764;
  float32x4_t v765;
  _QWORD *v767;
  uint64_t v768;
  float32x4_t v770;
  float32x4_t v771;
  uint64_t v772;
  uint64_t v774;
  void **v775;
  float32x4_t v776;
  float32x4_t v777;
  float v778;
  uint64_t v779;
  float32x4_t v780;
  float32x4_t v781;
  float v782;
  _QWORD *v783;
  uint64_t v784;
  float32x4_t v785;
  float32x2_t v786;
  float32x4_t v787;
  unsigned int **v788;
  float32x4_t v789;
  float32x4_t v790;
  uint64_t v791;
  float32x4_t v792;
  float v793;
  float v794;
  float v795;
  float v796;
  float v797;
  float32x4_t v798;
  float32x4_t v799;
  float32x4_t v800;
  float32x4_t v801;
  float32x4_t *v802;
  float32x4_t v803;
  float32x4_t v804;
  float v805;
  float32x4_t v806;
  float32x4_t v807;
  unint64_t *v808;
  float32x4_t v809;
  float32x2_t v810;
  float32x4_t v811;
  float32x4_t v812;
  uint64_t v813;
  float32x4_t v814;
  unint64_t v815;
  float32x4_t v816;
  float32x4_t v817;
  void *v818;
  char *v819;
  uint64_t v820;
  void *v821;
  char *v822;
  char *v823;
  float32x4_t v824;
  __int128 v825;
  __int128 v826;
  void **v827;
  uint64_t v828;
  float32x4_t *v829;
  unsigned int *block;
  uint64_t v831;
  void (*v832)(uint64_t, uint64_t);
  void *v833;
  _QWORD *v834;
  float32x4_t *v835;
  void **v836;
  float32x4_t *v837;
  _QWORD **v838;
  _QWORD *v839;
  uint64_t v840;
  __n128 (*v841)(_QWORD *, uint64_t);
  void (*v842)(uint64_t);
  void *__p;
  void *v844;
  char *v845;
  uint8_t buf[16];
  __int128 v847;
  float32x4_t v848;
  float32x4_t v849;
  float32x4_t *v850;
  void **v851;
  uint64_t v852;
  simd_float4x4 v853;
  simd_float4x4 v854;
  simd_float2x2 v855;
  simd_float2x2 v856;
  simd_float2x2 v857;

  v852 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  v767 = a1;
  v10 = (unint64_t *)*a1;
  a6[1] = *a6;
  if (!a2->i32[0])
    return 0;
  v808 = v10;
  v788 = a6;
  v11 = operator new();
  v12 = v11;
  *(_DWORD *)v11 = 0;
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 80) = 0;
  v775 = (void **)(v11 + 80);
  *(_QWORD *)(v11 + 88) = 0;
  *(_QWORD *)(v11 + 96) = 0;
  v13 = a2->u32[0];
  v802 = a2;
  v779 = v11;
  if ((_DWORD)v13)
  {
    *(float32x4_t *)v11 = *a2;
    *(_DWORD *)(v11 + 16) = 1025758986;
    v14 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
    v15.i64[0] = 0x80000000800000;
    v15.i64[1] = 0x80000000800000;
    *(float32x4_t *)(v11 + 32) = v14;
    *(float32x4_t *)(v11 + 48) = v15;
    v16 = (float32x4_t *)a2->i64[1];
    do
    {
      v17 = *v16;
      v14.i32[3] = 0;
      v17.i32[3] = 0;
      v14 = vminnmq_f32(v14, v17);
      *(float32x4_t *)(v11 + 32) = v14;
      v18 = *v16;
      v16 += 3;
      v19 = v18;
      v15.i32[3] = 0;
      v19.i32[3] = 0;
      v15 = vmaxnmq_f32(v15, v19);
      *(float32x4_t *)(v11 + 48) = v15;
      --v13;
    }
    while (v13);
    v20 = vcvtq_s32_f32(vdivq_f32(vsubq_f32(v15, v14), (float32x4_t)vdupq_n_s32(0x3D23D70Au)));
    v21.i64[0] = 0x100000001;
    v21.i64[1] = 0x100000001;
    v22 = vaddq_s32(v20, v21);
    *(int32x4_t *)(v11 + 64) = v22;
    v23 = vmulq_laneq_s32(vmulq_lane_s32(v22, *(int32x2_t *)v22.i8, 1), v22, 2).u32[0];
    if (!v23)
      goto LABEL_10;
    if ((v23 & 0x80000000) == 0)
    {
      v24 = 24 * v23;
      v25 = (char *)operator new(v24);
      v26 = 0;
      v27 = &v25[v24];
      do
      {
        v28 = &v25[v26];
        *(_QWORD *)v28 = 0;
        *((_QWORD *)v28 + 1) = 0;
        *((_QWORD *)v28 + 2) = 0;
        v26 += 24;
      }
      while (v24 != v26);
      *(_QWORD *)(v12 + 80) = v25;
      *(_QWORD *)(v12 + 88) = v27;
      *(_QWORD *)(v12 + 96) = v27;
LABEL_10:
      v29 = 0;
      while (1)
      {
        v31 = *(_DWORD *)(v12 + 68);
        v32 = *(_DWORD *)(v12 + 72);
        v33.i64[0] = -1;
        v33.i32[2] = -1;
        if (*(_DWORD *)(v12 + 64))
          _ZF = v31 == 0;
        else
          _ZF = 1;
        if (!_ZF && v32 != 0)
          v33 = vcvtq_s32_f32(vdivq_f32(vsubq_f32(*(float32x4_t *)(a2->i64[1] + 48 * v29), *(float32x4_t *)(v12 + 32)), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)(v12 + 16), 0)));
        v36 = (uint64_t)*v775 + 24 * v33.i32[2] + 24 * (v33.i32[1] + v31 * v33.i32[0]) * v32;
        v38 = (_QWORD *)(v36 + 8);
        v37 = *(char **)(v36 + 8);
        v39 = *(_QWORD *)(v36 + 16);
        if ((unint64_t)v37 < v39)
        {
          *(_DWORD *)v37 = v29;
          v30 = v37 + 4;
          a2 = v802;
        }
        else
        {
          v40 = *(char **)v36;
          v41 = (uint64_t)&v37[-*(_QWORD *)v36];
          v42 = v41 >> 2;
          v43 = (v41 >> 2) + 1;
          if (v43 >> 62)
            break;
          v44 = v39 - (_QWORD)v40;
          if (v44 >> 1 > v43)
            v43 = v44 >> 1;
          if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL)
            v45 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v45 = v43;
          if (v45)
          {
            if (v45 >> 62)
              goto LABEL_596;
            v46 = operator new(4 * v45);
          }
          else
          {
            v46 = 0;
          }
          v47 = &v46[4 * v42];
          *v47 = v29;
          v30 = v47 + 1;
          if (v37 != v40)
          {
            v48 = v37 - 4 - v40;
            if (v48 < 0x2C)
              goto LABEL_599;
            if ((unint64_t)(v37 - &v46[v41]) < 0x20)
              goto LABEL_599;
            v49 = (v48 >> 2) + 1;
            v50 = &v46[4 * v42 - 16];
            v51 = v37 - 16;
            v52 = v49 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v53 = *(_OWORD *)v51;
              *(v50 - 1) = *((_OWORD *)v51 - 1);
              *v50 = v53;
              v50 -= 2;
              v51 -= 32;
              v52 -= 8;
            }
            while (v52);
            v47 -= v49 & 0x7FFFFFFFFFFFFFF8;
            v37 -= 4 * (v49 & 0x7FFFFFFFFFFFFFF8);
            if (v49 != (v49 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_599:
              do
              {
                v54 = *((_DWORD *)v37 - 1);
                v37 -= 4;
                *--v47 = v54;
              }
              while (v37 != v40);
            }
          }
          *(_QWORD *)v36 = v47;
          *v38 = v30;
          *(_QWORD *)(v36 + 16) = &v46[4 * v45];
          if (v40)
            operator delete(v40);
          a2 = v802;
          v12 = v779;
        }
        *v38 = v30;
        if (++v29 >= (unint64_t)a2->u32[0])
          goto LABEL_42;
      }
    }
LABEL_595:
    abort();
  }
LABEL_42:
  kdebug_trace();
  v821 = 0;
  v822 = 0;
  v823 = 0;
  v818 = 0;
  v819 = 0;
  v820 = 0;
  v55 = a2->u32[0];
  if ((_DWORD)v55)
  {
    v56 = (char *)operator new(16 * v55);
    bzero(v56, 16 * v55);
    v821 = v56;
    v822 = &v56[16 * v55];
    v823 = v822;
  }
  global_queue = dispatch_get_global_queue(0, 0);
  v838 = 0;
  v839 = &v838;
  v840 = 0x4002000000;
  v841 = sub_2393DDB28;
  v842 = sub_2393DDB4C;
  v844 = 0;
  v845 = 0;
  __p = 0;
  if ((_DWORD)v55)
  {
    v58 = (char *)operator new(4 * v55);
    v59 = &v58[4 * v55];
    __p = v58;
    v845 = v59;
    bzero(v58, 4 * v55);
    v844 = v59;
  }
  v60 = vcvtps_u32_f32((float)v55 / 500.0);
  v61 = MEMORY[0x24BDAC760];
  block = (unsigned int *)MEMORY[0x24BDAC760];
  v831 = 0x40000000;
  v832 = sub_2393DDB64;
  v833 = &unk_250AD68E0;
  v836 = &v821;
  v837 = a3;
  v834 = &v838;
  v835 = a2;
  dispatch_apply(v60, global_queue, &block);
  v824.i64[0] = v61;
  v824.i64[1] = 0x40000000;
  *(_QWORD *)&v825 = sub_2393DDC70;
  *((_QWORD *)&v825 + 1) = &unk_250AD6908;
  v827 = &v821;
  v828 = v12;
  v829 = a3;
  *(_QWORD *)&v826 = &v838;
  *((_QWORD *)&v826 + 1) = a2;
  dispatch_apply(v60, global_queue, &v824);
  v62 = v821;
  v63 = (float *)((char *)v821 + 16);
  v64 = *(float32x4_t *)v821;
  if (v821 == v822 || v63 == (float *)v822)
  {
    v78 = *(float32x4_t *)v821;
    v88 = (float *)v821;
  }
  else
  {
    v65 = *(float32x4_t *)v821;
    v66 = (float32x4_t *)((char *)v821 + 16);
    v67 = (float32x4_t *)v821;
    v68 = (float32x4_t *)((char *)v821 + 16);
    do
    {
      v69 = *v68++;
      v70 = (int8x16_t)v69;
      v71 = vmovn_s32(vcgtq_f32(v65, v69)).u8[0];
      if ((v71 & 1) != 0)
        v72 = -1;
      else
        v72 = 0;
      v65 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v72), v70, (int8x16_t)v65);
      if ((v71 & 1) != 0)
        v67 = v66;
      v66 = v68;
    }
    while (v68 != (float32x4_t *)v822);
    v73 = (float *)((char *)v821 + 16);
    v74 = (float *)v821;
    do
    {
      if (v73[1] < v74[1])
        v74 = v73;
      v73 += 4;
    }
    while (v73 != (float *)v822);
    v75 = (float *)((char *)v821 + 16);
    v76 = (float *)v821;
    do
    {
      if (v75[2] < v76[2])
        v76 = v75;
      v75 += 4;
    }
    while (v75 != (float *)v822);
    v78 = *v67;
    v77 = *((_DWORD *)v76 + 2);
    v78.f32[1] = v74[1];
    v79 = (float32x4_t *)((char *)v821 + 16);
    v80 = (float32x4_t *)v821;
    v81 = (float32x4_t *)((char *)v821 + 16);
    do
    {
      v82 = *v81++;
      v83 = (int8x16_t)v82;
      v84 = vmovn_s32(vcgtq_f32(v82, v64)).u8[0];
      if ((v84 & 1) != 0)
        v85 = -1;
      else
        v85 = 0;
      v64 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v85), v83, (int8x16_t)v64);
      if ((v84 & 1) != 0)
        v80 = v79;
      v79 = v81;
    }
    while (v81 != (float32x4_t *)v822);
    v86 = (float *)((char *)v821 + 16);
    v87 = (float *)v821;
    do
    {
      if (v87[1] < v86[1])
        v87 = v86;
      v86 += 4;
    }
    while (v86 != (float *)v822);
    v88 = (float *)v821;
    do
    {
      if (v88[2] < v63[2])
        v88 = v63;
      v63 += 4;
    }
    while (v63 != (float *)v822);
    v78.i32[2] = v77;
    v64 = *v80;
    v62 = v87;
  }
  v64.i32[1] = v62[1];
  v64.f32[2] = v88[2];
  *(_QWORD *)buf = v61;
  *(_QWORD *)&buf[8] = 0x40000000;
  *(_QWORD *)&v847 = sub_2393DDF2C;
  *((_QWORD *)&v847 + 1) = &unk_250AD6928;
  v850 = a2;
  v851 = &v821;
  v848 = v78;
  v849 = v64;
  dispatch_apply(v60, global_queue, buf);
  _Block_object_dispose(&v838, 8);
  if (__p)
  {
    v844 = __p;
    operator delete(__p);
  }
  v89 = (v822 - (_BYTE *)v821) >> 4;
  v90 = (v819 - (_BYTE *)v818) >> 2;
  if (v89 <= v90)
  {
    if (v89 < v90)
      v819 = (char *)v818 + 4 * v89;
  }
  else
  {
    sub_2393BC22C((uint64_t)&v818, v89 - v90);
    v89 = (v822 - (_BYTE *)v821) >> 4;
  }
  *(_QWORD *)buf = v61;
  *(_QWORD *)&buf[8] = 0x40000000;
  *(_QWORD *)&v847 = sub_2393DDF88;
  *((_QWORD *)&v847 + 1) = &unk_250AD6948;
  v848.i64[0] = (uint64_t)&v821;
  v848.i64[1] = (uint64_t)&v818;
  dispatch_apply(vcvtps_u32_f32((float)v89 / 500.0), global_queue, buf);
  kdebug_trace();
  kdebug_trace();
  v91 = a2->u32[0];
  if ((_DWORD)v91)
  {
    v92 = operator new(8 * ((v91 - 1) >> 6) + 8);
    v93 = v92;
    if (v91 >= 0x41)
      v94 = (v91 - 1) >> 6;
    else
      v94 = 0;
    v92[v94] = 0;
    if (v91 >= 0x40)
      bzero(v92, 8 * (v91 >> 6));
    if ((v91 & 0x3F) != 0)
      v93[v91 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v91 & 0x3F));
  }
  else
  {
    v93 = 0;
  }
  v839 = 0;
  v840 = 0;
  v838 = &v839;
  block = 0;
  v831 = 0;
  v832 = 0;
  v847 = 0u;
  v848 = 0u;
  *(_OWORD *)buf = 0u;
  sub_2393DE0A0((uint64_t)buf);
  v95 = v848.i64[1];
  v96 = v848.i64[0];
  v97 = (_OWORD *)(*(_QWORD *)(*(_QWORD *)&buf[8] + 8 * ((v848.i64[1] + v848.i64[0]) / 0x55uLL))
                 + 48 * ((v848.i64[1] + v848.i64[0]) % 0x55uLL));
  v99 = *(_OWORD *)(a4 + 16);
  v98 = *(_OWORD *)(a4 + 32);
  *v97 = *(_OWORD *)a4;
  v97[1] = v99;
  v97[2] = v98;
  v100 = v95 + 1;
  v848.i64[1] = v95 + 1;
  if (v95 == -1)
    goto LABEL_96;
  v783 = v93;
  while (2)
  {
    v120 = *(_QWORD *)&buf[8];
    v121 = *(_QWORD *)(*(_QWORD *)&buf[8] + 8 * (v96 / 0x55)) + 48 * (v96 % 0x55);
    v824 = *(float32x4_t *)v121;
    v825 = *(_OWORD *)(v121 + 16);
    v826 = *(_OWORD *)(v121 + 32);
    v848.i64[0] = v96 + 1;
    v848.i64[1] = v100 - 1;
    v813 = v96 + 1;
    if (v96 + 1 >= 0xAA)
    {
      operator delete(**(void ***)&buf[8]);
      *(_QWORD *)&buf[8] = v120 + 8;
      v813 = v96 - 84;
      v848.i64[0] = v96 - 84;
    }
    sub_2393CFA68((float32x4_t *)v12, &v824, (uint64_t)&block);
    v123 = block;
    v122 = (unsigned int *)v831;
    --v100;
    v791 = v831;
    if (block == (unsigned int *)v831)
      goto LABEL_109;
    while (2)
    {
      v125 = *v123;
      v126 = v125 >> 6;
      v127 = v93[v125 >> 6];
      if (((1 << v125) & v127) != 0 || *((float *)v818 + v125) <= 0.15)
        goto LABEL_116;
      v128 = *(_QWORD *)&buf[8];
      v129 = a2->i64[1];
      if ((_QWORD)v847 == *(_QWORD *)&buf[8])
        v130 = 0;
      else
        v130 = 85 * ((uint64_t)(v847 - *(_QWORD *)&buf[8]) >> 3) - 1;
      v131 = v100 + v813;
      if (v130 == v100 + v813)
      {
        sub_2393DE0A0((uint64_t)buf);
        v128 = *(_QWORD *)&buf[8];
        v100 = v848.i64[1];
        v813 = v848.i64[0];
        v131 = v848.i64[1] + v848.i64[0];
        v127 = v93[v126];
      }
      v132 = (__int128 *)(v129 + 48 * v125);
      v133 = (_OWORD *)(*(_QWORD *)(v128 + 8 * (v131 / 0x55)) + 48 * (v131 % 0x55));
      v134 = *v132;
      v135 = v132[2];
      v133[1] = v132[1];
      v133[2] = v135;
      *v133 = v134;
      v848.i64[1] = ++v100;
      v93[v126] = v127 | (1 << v125);
      v136 = (float *)(a2->i64[1] + 48 * v125);
      v137 = (int)(float)(*v136 * 200.0);
      v138 = (int)(float)(v136[1] * 200.0);
      v139 = (int)(float)(v136[2] * 200.0);
      v140 = v839;
      v141 = &v839;
LABEL_126:
      v142 = v141;
      if (v140)
      {
        do
        {
          v141 = (_QWORD **)v140;
          v143 = *((_DWORD *)v140 + 7);
          if (v143 > (int)v137)
          {
LABEL_125:
            v140 = *v141;
            goto LABEL_126;
          }
          if (v143 >= (int)v137)
          {
            v144 = *((_DWORD *)v141 + 8);
            if (v144 > (int)v138)
              goto LABEL_125;
            if (v144 >= (int)v138)
            {
              v145 = *((_DWORD *)v141 + 9);
              if (v145 > v139)
                goto LABEL_125;
              if (v145 >= v139)
                goto LABEL_167;
            }
          }
          v140 = v141[1];
        }
        while (v140);
        v142 = v141 + 1;
      }
      v146 = operator new(0x28uLL);
      *(_QWORD *)((char *)v146 + 28) = (v138 << 32) | v137;
      *((_DWORD *)v146 + 9) = v139;
      *v146 = 0;
      v146[1] = 0;
      v146[2] = v141;
      *v142 = v146;
      if (*v838)
      {
        v838 = (_QWORD **)*v838;
        v146 = (_QWORD *)*v142;
      }
      v147 = v839;
      _ZF = v146 == v839;
      *((_BYTE *)v146 + 24) = v146 == v839;
      if (!_ZF)
      {
        do
        {
          v148 = v146[2];
          if (*(_BYTE *)(v148 + 24))
            break;
          v149 = *(_QWORD **)(v148 + 16);
          v150 = *v149;
          if (*v149 == v148)
          {
            v153 = v149[1];
            if (!v153 || (v154 = *(unsigned __int8 *)(v153 + 24), v151 = (_BYTE *)(v153 + 24), v154))
            {
              if (*(_QWORD **)v148 == v146)
              {
                v155 = (uint64_t *)v146[2];
              }
              else
              {
                v155 = *(uint64_t **)(v148 + 8);
                v156 = *v155;
                *(_QWORD *)(v148 + 8) = *v155;
                if (v156)
                {
                  *(_QWORD *)(v156 + 16) = v148;
                  v149 = *(_QWORD **)(v148 + 16);
                }
                v155[2] = (uint64_t)v149;
                *(_QWORD *)(*(_QWORD *)(v148 + 16) + 8 * (**(_QWORD **)(v148 + 16) != v148)) = v155;
                *v155 = v148;
                *(_QWORD *)(v148 + 16) = v155;
                v149 = (_QWORD *)v155[2];
                v148 = *v149;
              }
              *((_BYTE *)v155 + 24) = 1;
              *((_BYTE *)v149 + 24) = 0;
              v159 = *(_QWORD *)(v148 + 8);
              *v149 = v159;
              if (v159)
                *(_QWORD *)(v159 + 16) = v149;
              *(_QWORD *)(v148 + 16) = v149[2];
              *(_QWORD *)(v149[2] + 8 * (*(_QWORD *)v149[2] != (_QWORD)v149)) = v148;
              *(_QWORD *)(v148 + 8) = v149;
              goto LABEL_165;
            }
          }
          else if (!v150 || (v152 = *(unsigned __int8 *)(v150 + 24), v151 = (_BYTE *)(v150 + 24), v152))
          {
            if (*(_QWORD **)v148 == v146)
            {
              v157 = v146[1];
              *(_QWORD *)v148 = v157;
              if (v157)
              {
                *(_QWORD *)(v157 + 16) = v148;
                v149 = *(_QWORD **)(v148 + 16);
              }
              v146[2] = v149;
              *(_QWORD *)(*(_QWORD *)(v148 + 16) + 8 * (**(_QWORD **)(v148 + 16) != v148)) = v146;
              v146[1] = v148;
              *(_QWORD *)(v148 + 16) = v146;
              v149 = (_QWORD *)v146[2];
            }
            else
            {
              v146 = (_QWORD *)v146[2];
            }
            *((_BYTE *)v146 + 24) = 1;
            *((_BYTE *)v149 + 24) = 0;
            v148 = v149[1];
            v158 = *(_QWORD **)v148;
            v149[1] = *(_QWORD *)v148;
            if (v158)
              v158[2] = v149;
            *(_QWORD *)(v148 + 16) = v149[2];
            *(_QWORD *)(v149[2] + 8 * (*(_QWORD *)v149[2] != (_QWORD)v149)) = v148;
            *(_QWORD *)v148 = v149;
LABEL_165:
            v149[2] = v148;
            break;
          }
          *(_BYTE *)(v148 + 24) = 1;
          v146 = v149;
          *((_BYTE *)v149 + 24) = v149 == v147;
          *v151 = 1;
        }
        while (v149 != v147);
      }
      ++v840;
LABEL_167:
      v160 = v808[2];
      if (v808[3] == v160)
      {
LABEL_190:
        v173 = v788;
        v175 = (char *)v788[1];
        v174 = (unint64_t)v788[2];
        if ((unint64_t)v175 < v174)
        {
          *(_DWORD *)v175 = v125;
          v124 = (unsigned int *)(v175 + 4);
        }
        else
        {
          v176 = (char *)*v788;
          v177 = v175 - (char *)*v788;
          v178 = v177 >> 2;
          v179 = (v177 >> 2) + 1;
          if (v179 >> 62)
            goto LABEL_595;
          v180 = v174 - (_QWORD)v176;
          if (v180 >> 1 > v179)
            v179 = v180 >> 1;
          if ((unint64_t)v180 >= 0x7FFFFFFFFFFFFFFCLL)
            v181 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v181 = v179;
          if (v181)
          {
            if (v181 >> 62)
              goto LABEL_596;
            v182 = operator new(4 * v181);
          }
          else
          {
            v182 = 0;
          }
          v183 = (unsigned int *)&v182[4 * v178];
          *v183 = v125;
          v124 = v183 + 1;
          if (v175 != v176)
          {
            v184 = v175 - 4 - v176;
            if (v184 < 0x2C)
              goto LABEL_600;
            if ((unint64_t)(v175 - &v182[v177]) < 0x20)
              goto LABEL_600;
            v185 = (v184 >> 2) + 1;
            v186 = &v182[4 * v178 - 16];
            v187 = v175 - 16;
            v188 = v185 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v189 = *(_OWORD *)v187;
              *(v186 - 1) = *((_OWORD *)v187 - 1);
              *v186 = v189;
              v186 -= 2;
              v187 -= 32;
              v188 -= 8;
            }
            while (v188);
            v183 -= v185 & 0x7FFFFFFFFFFFFFF8;
            v175 -= 4 * (v185 & 0x7FFFFFFFFFFFFFF8);
            if (v185 != (v185 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_600:
              do
              {
                v190 = *((_DWORD *)v175 - 1);
                v175 -= 4;
                *--v183 = v190;
              }
              while (v175 != v176);
            }
          }
          v191 = (unsigned int *)&v182[4 * v181];
          v173 = v788;
          *v788 = v183;
          v788[1] = v124;
          v788[2] = v191;
          if (v176)
            operator delete(v176);
        }
        a2 = v802;
        v93 = v783;
        v122 = (unsigned int *)v791;
        v173[1] = v124;
        goto LABEL_116;
      }
      v161 = v808[5];
      v162 = (unint64_t *)(v160 + 8 * (v161 / 0xAA));
      v163 = *v162;
      v164 = *v162 + 24 * (v161 % 0xAA);
      v165 = *(_QWORD *)(v160 + 8 * ((v808[6] + v161) / 0xAA)) + 24 * ((v808[6] + v161) % 0xAA);
      while (2)
      {
        if (v164 == v165)
          goto LABEL_190;
        v166 = *(_DWORD **)(v164 + 8);
        if (!v166)
          break;
        v167 = (_DWORD *)(v164 + 8);
        do
        {
          v168 = v166[7];
          if (v168 < (int)v137)
          {
LABEL_172:
            v166 += 2;
            goto LABEL_173;
          }
          if (v168 > (int)v137)
            goto LABEL_176;
          v169 = v166[8];
          if (v169 < (int)v138)
            goto LABEL_172;
          if (v169 > (int)v138)
          {
LABEL_176:
            v167 = v166;
          }
          else if (v166[9] < v139)
          {
            v166 += 2;
          }
          else
          {
            v167 = v166;
          }
LABEL_173:
          v166 = *(_DWORD **)v166;
        }
        while (v166);
        if (v167 != (_DWORD *)(v164 + 8))
        {
          v170 = v167[7];
          if (v170 <= (int)v137)
          {
            if (v170 < (int)v137 || (v171 = v167[8], v171 <= (int)v138) && (v171 < (int)v138 || v167[9] <= v139))
            {
              v164 += 24;
              if (v164 - v163 == 4080)
              {
                v172 = v162[1];
                ++v162;
                v163 = v172;
                v164 = v172;
              }
              continue;
            }
          }
        }
        break;
      }
      a2 = v802;
      v93 = v783;
      v122 = (unsigned int *)v791;
LABEL_116:
      if (++v123 != v122)
        continue;
      break;
    }
LABEL_109:
    v96 = v813;
    v12 = v779;
    if (v100)
      continue;
    break;
  }
LABEL_96:
  v101 = v93;
  v102 = v808;
  v103 = (char *)v808[3];
  v104 = (char *)v808[2];
  v105 = v103 - v104;
  v106 = (v103 - v104) >> 3;
  if (v103 == v104)
    v107 = 0;
  else
    v107 = 170 * v106 - 1;
  v108 = v808[5];
  v109 = v808[6] + v108;
  if (v107 != v109)
    goto LABEL_311;
  if (v108 < 0xAA)
  {
    v192 = (char *)v808[4];
    v193 = (char *)v808[1];
    v194 = v192 - v193;
    if (v106 < (unint64_t)((v192 - v193) >> 3))
    {
      v195 = operator new(0xFF0uLL);
      v196 = v195;
      if (v192 != v103)
      {
        *(_QWORD *)v103 = v195;
        v102 = v808;
LABEL_309:
        v102[3] += 8;
        goto LABEL_310;
      }
      v211 = v104;
      v102 = v808;
      if (v193 != v104)
      {
LABEL_286:
        *((_QWORD *)v211 - 1) = v196;
        v262 = (char *)v808[2];
        v263 = (char *)v808[3];
        v808[2] = (unint64_t)(v262 - 8);
        v264 = *((_QWORD *)v262 - 1);
        v808[2] = (unint64_t)v262;
        if (v263 != (char *)v808[4])
        {
LABEL_308:
          *(_QWORD *)v263 = v264;
          goto LABEL_309;
        }
        v265 = (char *)v808[1];
        if (v262 > v265)
        {
          v266 = (v262 - v265) >> 3;
          if (v266 >= -1)
            v267 = v266 + 1;
          else
            v267 = v266 + 2;
          v268 = v267 >> 1;
          v269 = -v268;
          v270 = &v262[-8 * v268];
          v271 = v263 - v262;
          if (v263 != v262)
          {
            memmove(&v262[-8 * v268], v262, v263 - v262);
            v262 = (char *)v808[2];
          }
          v263 = &v270[v271];
          v808[2] = (unint64_t)&v262[8 * v269];
          v808[3] = (unint64_t)&v270[v271];
          goto LABEL_308;
        }
        v272 = (v263 - v265) >> 2;
        if (v263 == v265)
          v272 = 1;
        if (v272 >> 61)
          goto LABEL_596;
        v273 = v272 >> 2;
        v274 = 8 * v272;
        v275 = (char *)operator new(8 * v272);
        v276 = &v275[8 * v273];
        v277 = v263 - v262;
        _ZF = v263 == v262;
        v263 = v276;
        if (!_ZF)
        {
          v263 = &v276[v277 & 0xFFFFFFFFFFFFFFF8];
          v278 = v277 - 8;
          if ((unint64_t)(v277 - 8) < 0x38)
          {
            v279 = &v275[8 * v273];
            goto LABEL_305;
          }
          v280 = &v275[8 * v273];
          v279 = v280;
          if ((unint64_t)(v280 - v262) < 0x20)
          {
            do
            {
LABEL_305:
              v287 = *(_QWORD *)v262;
              v262 += 8;
              *(_QWORD *)v279 = v287;
              v279 += 8;
            }
            while (v279 != v263);
            goto LABEL_306;
          }
          v281 = (v278 >> 3) + 1;
          v282 = 8 * (v281 & 0x3FFFFFFFFFFFFFFCLL);
          v279 = &v276[v282];
          v283 = (__int128 *)(v262 + 16);
          v284 = v280 + 16;
          v285 = v281 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v286 = *v283;
            *(v284 - 1) = *(v283 - 1);
            *v284 = v286;
            v283 += 2;
            v284 += 2;
            v285 -= 4;
          }
          while (v285);
          if (v281 != (v281 & 0x3FFFFFFFFFFFFFFCLL))
          {
            v262 += v282;
            goto LABEL_305;
          }
        }
LABEL_306:
        v808[1] = (unint64_t)v275;
        v808[2] = (unint64_t)v276;
        v808[3] = (unint64_t)v263;
        v808[4] = (unint64_t)&v275[v274];
        if (v265)
        {
          operator delete(v265);
          v263 = (char *)v808[3];
        }
        goto LABEL_308;
      }
      v212 = v194 >> 2;
      if (v103 == v104)
        v212 = 1;
      if (v212 >> 61)
        goto LABEL_596;
      v213 = (v212 + 3) >> 2;
      v214 = 8 * v212;
      v215 = (char *)operator new(8 * v212);
      v211 = &v215[8 * v213];
      v216 = &v215[v214];
      v217 = v211;
      if (v103 != v104)
      {
        v217 = &v211[(v103 - v193) & 0xFFFFFFFFFFFFFFF8];
        v218 = v103 - v193 - 8;
        v219 = &v215[8 * v213];
        v220 = v104;
        if (v218 > 0x37)
        {
          v221 = &v215[8 * v213];
          v219 = v221;
          v220 = v104;
          if ((unint64_t)(v221 - v193) >= 0x20)
          {
            v222 = (v218 >> 3) + 1;
            v223 = 8 * (v222 & 0x3FFFFFFFFFFFFFFCLL);
            v219 = &v211[v223];
            v224 = (__int128 *)(v104 + 16);
            v225 = v221 + 16;
            v226 = v222 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v227 = *v224;
              *(v225 - 1) = *(v224 - 1);
              *v225 = v227;
              v224 += 2;
              v225 += 2;
              v226 -= 4;
            }
            while (v226);
            if (v222 == (v222 & 0x3FFFFFFFFFFFFFFCLL))
            {
              v808[1] = (unint64_t)v215;
              v808[2] = (unint64_t)v211;
              v808[3] = (unint64_t)v217;
              v808[4] = (unint64_t)v216;
LABEL_285:
              operator delete(v104);
              v211 = (char *)v808[2];
              goto LABEL_286;
            }
            v220 = &v104[v223];
          }
        }
        do
        {
          v261 = *(_QWORD *)v220;
          v220 += 8;
          *(_QWORD *)v219 = v261;
          v219 += 8;
        }
        while (v219 != v217);
      }
      v808[1] = (unint64_t)v215;
      v808[2] = (unint64_t)v211;
      v808[3] = (unint64_t)v217;
      v808[4] = (unint64_t)v216;
      if (!v104)
        goto LABEL_286;
      goto LABEL_285;
    }
    if (v192 == v193)
      v197 = 1;
    else
      v197 = v194 >> 2;
    if (v197 >> 61)
      goto LABEL_596;
    v198 = (char *)operator new(8 * v197);
    v199 = &v198[8 * v106];
    v200 = &v198[8 * v197];
    v201 = operator new(0xFF0uLL);
    if (v106 == v197)
    {
      v102 = v808;
      if (v105 < 1)
      {
        v228 = v105 >> 2;
        if (v103 == v104)
          v228 = 1;
        if (v228 >> 61)
          goto LABEL_596;
        v229 = 8 * v228;
        v199 = (char *)operator new(8 * v228);
        v200 = &v199[v229];
        operator delete(v198);
        v104 = (char *)v808[2];
        v103 = (char *)v808[3];
        v198 = v199;
      }
      else
      {
        v202 = v106 + 2;
        if (v106 >= -1)
          v202 = v106 + 1;
        v199 -= 8 * (v202 >> 1);
      }
    }
    else
    {
      v102 = v808;
    }
    *(_QWORD *)v199 = v201;
    v230 = v199 + 8;
    if (v103 == v104)
    {
      v231 = v199;
      v232 = v199 + 8;
LABEL_247:
      v233 = (void *)v102[1];
      v102[1] = (unint64_t)v198;
      v102[2] = (unint64_t)v231;
      v102[3] = (unint64_t)v232;
      v102[4] = (unint64_t)v200;
      v12 = v779;
      if (v233)
        operator delete(v233);
      goto LABEL_310;
    }
    while (v199 != v198)
    {
      v234 = v199;
      v232 = v230;
LABEL_250:
      v235 = *((_QWORD *)v103 - 1);
      v103 -= 8;
      *((_QWORD *)v234 - 1) = v235;
      v231 = v234 - 8;
      v230 = v232;
      v199 = v231;
      if (v103 == (char *)v102[2])
        goto LABEL_247;
    }
    if (v230 < v200)
    {
      v236 = (v200 - v230) >> 3;
      if (v236 >= -1)
        v237 = v236 + 1;
      else
        v237 = v236 + 2;
      v232 = &v230[8 * (v237 >> 1)];
      v234 = &v199[8 * (v237 >> 1)];
      if (v230 == v199)
      {
        v198 = v230;
      }
      else
      {
        memmove(&v199[8 * (v237 >> 1)], v199, v230 - v199);
        v198 = v199;
      }
      goto LABEL_250;
    }
    v238 = (v200 - v199) >> 2;
    if (v200 == v199)
      v238 = 1;
    if (v238 >> 61)
      goto LABEL_596;
    v239 = (v238 + 3) >> 2;
    v240 = 8 * v238;
    v241 = (char *)operator new(8 * v238);
    v198 = v241;
    v234 = &v241[8 * v239];
    v232 = v234;
    v242 = v230 - v199;
    if (v230 != v199)
    {
      v232 = &v234[v242 & 0xFFFFFFFFFFFFFFF8];
      v243 = v242 - 8;
      v244 = &v241[8 * v239];
      v245 = v199;
      if (v243 >= 0x38)
      {
        v244 = &v241[8 * v239];
        v245 = v199;
        if ((unint64_t)(v244 - v199) >= 0x20)
        {
          v246 = (v243 >> 3) + 1;
          v247 = 8 * (v246 & 0x3FFFFFFFFFFFFFFCLL);
          v244 = &v234[v247];
          v248 = (__int128 *)(v199 + 16);
          v249 = &v241[8 * v239 + 16];
          v250 = v246 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v251 = *v248;
            *((_OWORD *)v249 - 1) = *(v248 - 1);
            *(_OWORD *)v249 = v251;
            v248 += 2;
            v249 += 32;
            v250 -= 4;
          }
          while (v250);
          if (v246 == (v246 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_269;
          v245 = &v199[v247];
        }
      }
      do
      {
        v252 = *(_QWORD *)v245;
        v245 += 8;
        *(_QWORD *)v244 = v252;
        v244 += 8;
      }
      while (v244 != v232);
    }
LABEL_269:
    v200 = &v241[v240];
    operator delete(v199);
    goto LABEL_250;
  }
  v808[5] = v108 - 170;
  v110 = v104 + 8;
  v111 = *(_QWORD *)v104;
  v808[2] = (unint64_t)(v104 + 8);
  if ((char *)v808[4] != v103)
    goto LABEL_281;
  v112 = (char *)v808[1];
  if (v110 > v112)
  {
    v113 = (v110 - v112) >> 3;
    if (v113 >= -1)
      v114 = v113 + 1;
    else
      v114 = v113 + 2;
    v115 = v114 >> 1;
    v116 = -v115;
    v117 = &v110[-8 * v115];
    v118 = v103 - v110;
    if (v103 == v110)
    {
      v119 = v103;
    }
    else
    {
      memmove(&v110[-8 * v115], v110, v103 - v110);
      v119 = (char *)v808[2];
    }
    v103 = &v117[v118];
    v808[2] = (unint64_t)&v119[8 * v116];
    v808[3] = (unint64_t)&v117[v118];
    goto LABEL_281;
  }
  v203 = (v103 - v112) >> 2;
  if (v103 == v112)
    v203 = 1;
  if (v203 >> 61)
LABEL_596:
    sub_23938C4B8();
  v204 = v203 >> 2;
  v205 = 8 * v203;
  v206 = (char *)operator new(8 * v203);
  v207 = &v206[8 * v204];
  v208 = v103 - v110;
  _ZF = v103 == v110;
  v103 = v207;
  if (!_ZF)
  {
    v103 = &v207[v208 & 0xFFFFFFFFFFFFFFF8];
    v209 = v208 - 8;
    if ((unint64_t)(v208 - 8) >= 0x38)
    {
      v253 = &v206[8 * v204];
      v210 = v253;
      if ((unint64_t)(v253 - v110) < 0x20)
        goto LABEL_278;
      v254 = (v209 >> 3) + 1;
      v255 = 8 * (v254 & 0x3FFFFFFFFFFFFFFCLL);
      v210 = &v207[v255];
      v256 = (__int128 *)(v104 + 24);
      v257 = v253 + 16;
      v258 = v254 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v259 = *v256;
        *(v257 - 1) = *(v256 - 1);
        *v257 = v259;
        v256 += 2;
        v257 += 2;
        v258 -= 4;
      }
      while (v258);
      if (v254 != (v254 & 0x3FFFFFFFFFFFFFFCLL))
      {
        v110 += v255;
        goto LABEL_278;
      }
    }
    else
    {
      v210 = &v206[8 * v204];
      do
      {
LABEL_278:
        v260 = *(_QWORD *)v110;
        v110 += 8;
        *(_QWORD *)v210 = v260;
        v210 += 8;
      }
      while (v210 != v103);
    }
  }
  v808[1] = (unint64_t)v206;
  v808[2] = (unint64_t)v207;
  v808[3] = (unint64_t)v103;
  v808[4] = (unint64_t)&v206[v205];
  if (v112)
  {
    operator delete(v112);
    v103 = (char *)v808[3];
  }
LABEL_281:
  *(_QWORD *)v103 = v111;
  v808[3] += 8;
  v12 = v779;
LABEL_310:
  v104 = (char *)v102[2];
  v109 = v102[6] + v102[5];
LABEL_311:
  v288 = *(_QWORD *)&v104[8 * (v109 / 0xAA)] + 24 * (v109 % 0xAA);
  *(_QWORD *)(v288 + 8) = 0;
  *(_QWORD *)(v288 + 16) = 0;
  *(_QWORD *)v288 = v288 + 8;
  v289 = v838;
  v290 = v802;
  if (v838 != &v839)
  {
    while (1)
    {
      v299 = (int *)v289 + 7;
      v300 = *(_QWORD *)(v288 + 8);
      v301 = v288 + 8;
      if (*(_QWORD *)v288 != v288 + 8)
      {
        v302 = *(_QWORD *)(v288 + 8);
        v303 = v288 + 8;
        if (v300)
        {
          do
          {
            v301 = v302;
            v302 = *(_QWORD *)(v302 + 8);
          }
          while (v302);
        }
        else
        {
          do
          {
            v301 = *(_QWORD *)(v303 + 16);
            _ZF = *(_QWORD *)v301 == v303;
            v303 = v301;
          }
          while (_ZF);
        }
        v304 = *(_DWORD *)(v301 + 28);
        v305 = *v299;
        if (v304 >= *v299)
        {
          if (v305 < v304)
            break;
          v306 = *(_DWORD *)(v301 + 32);
          v307 = *((_DWORD *)v289 + 8);
          if (v306 >= v307 && (v307 < v306 || *(_DWORD *)(v301 + 36) >= *((_DWORD *)v289 + 9)))
            break;
        }
      }
      if (v300)
        v308 = v301;
      else
        v308 = v288 + 8;
      if (v300)
        v309 = (uint64_t **)(v301 + 8);
      else
        v309 = (uint64_t **)(v288 + 8);
LABEL_335:
      if (*v309)
      {
        v310 = v289[1];
        if (v310)
          goto LABEL_352;
      }
      else
      {
LABEL_348:
        v316 = (char *)operator new(0x28uLL);
        v317 = *((_DWORD *)v289 + 9);
        *(_QWORD *)(v316 + 28) = *(_QWORD *)v299;
        *((_DWORD *)v316 + 9) = v317;
        *(_QWORD *)v316 = 0;
        *((_QWORD *)v316 + 1) = 0;
        *((_QWORD *)v316 + 2) = v308;
        *v309 = (uint64_t *)v316;
        v318 = **(_QWORD **)v288;
        if (v318)
        {
          *(_QWORD *)v288 = v318;
          v319 = *v309;
        }
        else
        {
          v319 = (uint64_t *)v316;
        }
        sub_23938CAE0(*(uint64_t **)(v288 + 8), v319);
        ++*(_QWORD *)(v288 + 16);
        v310 = v289[1];
        if (v310)
        {
          do
          {
LABEL_352:
            v320 = (_QWORD **)v310;
            v310 = (_QWORD *)*v310;
          }
          while (v310);
          goto LABEL_318;
        }
      }
      do
      {
        v320 = (_QWORD **)v289[2];
        _ZF = *v320 == v289;
        v289 = v320;
      }
      while (!_ZF);
LABEL_318:
      v289 = v320;
      if (v320 == &v839)
        goto LABEL_312;
    }
    v308 = v288 + 8;
    v309 = (uint64_t **)(v288 + 8);
    if (!v300)
      goto LABEL_335;
    v311 = *((_DWORD *)v289 + 8);
    v312 = *((_DWORD *)v289 + 9);
    v309 = (uint64_t **)(v288 + 8);
    while (1)
    {
      v308 = v300;
      v313 = *(_DWORD *)(v300 + 28);
      if (v305 < v313)
        goto LABEL_340;
      if (v313 < v305)
        goto LABEL_347;
      v314 = *(_DWORD *)(v308 + 32);
      if (v311 < v314)
        goto LABEL_340;
      if (v314 < v311)
      {
LABEL_347:
        v309 = (uint64_t **)(v308 + 8);
        v300 = *(_QWORD *)(v308 + 8);
        if (!v300)
          goto LABEL_348;
      }
      else
      {
        v315 = *(_DWORD *)(v308 + 36);
        if (v312 >= v315)
        {
          if (v315 >= v312)
            goto LABEL_335;
          goto LABEL_347;
        }
LABEL_340:
        v300 = *(_QWORD *)v308;
        v309 = (uint64_t **)v308;
        if (!*(_QWORD *)v308)
          goto LABEL_348;
      }
    }
  }
LABEL_312:
  v291 = v102[6] + 1;
  v102[6] = v291;
  if (v291 > *v102)
  {
    sub_23938C854(*(_QWORD **)(*(_QWORD *)(v102[2] + 8 * (v102[5] / 0xAA)) + 24 * (v102[5] % 0xAA) + 8));
    v292 = vaddq_s64(*(int64x2_t *)(v102 + 5), (int64x2_t)xmmword_2393F5430);
    *(int64x2_t *)(v102 + 5) = v292;
    if (v292.i64[0] >= 0x154uLL)
    {
      operator delete(*(void **)v102[2]);
      v102[2] += 8;
      v102[5] -= 170;
    }
  }
  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
  kdebug_trace();
  v294 = (char *)*v788;
  v293 = (char *)v788[1];
  v295 = *(void ***)&buf[8];
  v296 = (void **)v847;
  v297 = v847 - *(_QWORD *)&buf[8];
  if ((_QWORD)v847 - *(_QWORD *)&buf[8] >= 0x11uLL)
  {
    do
    {
      v298 = *v295++;
      operator delete(v298);
      v297 -= 8;
    }
    while (v297 > 0x10);
    *(_QWORD *)&buf[8] = v295;
  }
  while (v295 != v296)
  {
    v321 = *v295++;
    operator delete(v321);
  }
  if (*(_QWORD *)buf)
    operator delete(*(void **)buf);
  if (block)
    operator delete(block);
  sub_23938C854(v839);
  if (v101)
    operator delete(v101);
  if (v818)
  {
    v819 = (char *)v818;
    operator delete(v818);
  }
  if (v821)
  {
    v822 = (char *)v821;
    operator delete(v821);
  }
  v322 = (char *)*v775;
  if (*v775)
  {
    v323 = *(char **)(v12 + 88);
    v324 = *v775;
    if (v323 != v322)
    {
      v325 = *(char **)(v12 + 88);
      do
      {
        v327 = (void *)*((_QWORD *)v325 - 3);
        v325 -= 24;
        v326 = v327;
        if (v327)
        {
          *((_QWORD *)v323 - 2) = v326;
          operator delete(v326);
        }
        v323 = v325;
      }
      while (v325 != v322);
      v324 = *v775;
    }
    *(_QWORD *)(v12 + 88) = v322;
    operator delete(v324);
  }
  MEMORY[0x23B83C4BC](v12, 0x1060C4083185909);
  if (v293 == v294)
    return 0;
  kdebug_trace();
  kdebug_trace();
  v328 = v767[1];
  v329 = (__int128 *)MEMORY[0x24BDAEDF8];
  if (!*(_BYTE *)v328)
    goto LABEL_387;
  v330 = *(float32x4_t *)(v328 + 16);
  v331 = vsubq_f32(*(float32x4_t *)a4, v330);
  v332 = fabsf(v331.f32[1]);
  v333 = (float)(fabsf(COERCE_FLOAT(HIDWORD(*(_QWORD *)(v328 + 16)))) * 0.00001) + 0.000001;
  v334 = fabsf(v331.f32[0]) > (float)((float)(fabsf(v330.f32[0]) * 0.00001) + 0.000001) || v332 > v333;
  v335 = fabsf(v331.f32[2]);
  v336 = (float)(fabsf(v330.f32[2]) * 0.00001) + 0.000001;
  if (v334 || v335 > v336)
  {
LABEL_387:
    v339 = *(_OWORD *)(a4 + 16);
    v338 = *(_OWORD *)(a4 + 32);
    *(_OWORD *)(v328 + 16) = *(_OWORD *)a4;
    *(_OWORD *)(v328 + 32) = v339;
    *(_BYTE *)v328 = 0;
    v340 = *v329;
    v341 = v329[1];
    *(_OWORD *)(v328 + 48) = v338;
    *(_OWORD *)(v328 + 64) = v340;
    v342 = v329[2];
    *(_OWORD *)(v328 + 80) = v341;
    *(_OWORD *)(v328 + 96) = v342;
    v343 = MEMORY[0x24BDAEE00];
    v344 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 16);
    *(_OWORD *)(v328 + 112) = *MEMORY[0x24BDAEE00];
    *(_OWORD *)(v328 + 128) = v344;
    v345 = *(_OWORD *)(v343 + 48);
    *(_OWORD *)(v328 + 144) = *(_OWORD *)(v343 + 32);
    *(_OWORD *)(v328 + 160) = v345;
  }
  v784 = v328;
  v853 = *(simd_float4x4 *)a3[3].i8;
  v776 = (float32x4_t)v853.columns[1];
  v780 = (float32x4_t)v853.columns[0];
  v770 = (float32x4_t)v853.columns[2];
  v854 = __invert_f4(v853);
  v809 = (float32x4_t)v854.columns[0];
  v792 = (float32x4_t)v854.columns[2];
  v798 = (float32x4_t)v854.columns[1];
  v785 = (float32x4_t)v854.columns[3];
  *(_QWORD *)&buf[8] = 0;
  *(_QWORD *)&v847 = 0;
  *(_QWORD *)buf = &buf[8];
  v346 = *v788;
  v347 = v788[1];
  if (*v788 == v347)
  {
    v349 = 0;
    v350 = 0;
    v375 = 0;
    goto LABEL_438;
  }
  v348 = 0;
  v349 = 0;
  v350 = 0;
  while (2)
  {
    v351 = *(float32x4_t *)(v290->i64[1] + 48 * *v346);
    v352 = vsubq_f32(vaddq_f32(v785, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v809, v351.f32[0]), v798, *(float32x2_t *)v351.f32, 1), v792, v351, 2)), *a3);
    v353 = (int)(float)(200.0 * v352.f32[0]);
    v354 = (int)vmuls_lane_f32(200.0, v352, 2);
    v355 = *(_QWORD *)&buf[8];
    v356 = &buf[8];
    v357 = &buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v358 = &buf[8];
      v359 = *(uint64_t **)&buf[8];
      do
      {
        v360 = *((_DWORD *)v359 + 7);
        if (v360 < (int)v353)
        {
          ++v359;
        }
        else if (v360 <= (int)v353)
        {
          if (*((_DWORD *)v359 + 8) < (int)v354)
            ++v359;
          else
            v358 = (uint8_t *)v359;
        }
        else
        {
          v358 = (uint8_t *)v359;
        }
        v359 = (uint64_t *)*v359;
      }
      while (v359);
      if (v358 != &buf[8])
      {
        v361 = *((_DWORD *)v358 + 7);
        if (v361 <= (int)v353 && (v361 < (int)v353 || *((_DWORD *)v358 + 8) <= (int)v354))
        {
LABEL_420:
          v290 = v802;
          goto LABEL_391;
        }
      }
      while (2)
      {
        while (1)
        {
          v357 = (uint8_t *)v355;
          v362 = *(_DWORD *)(v355 + 28);
          if (v362 > (int)v353)
            break;
          if (v362 >= (int)v353)
          {
            v363 = *((_DWORD *)v357 + 8);
            if (v363 > (int)v354)
              break;
            if (v363 >= (int)v354)
              goto LABEL_418;
          }
          v355 = *((_QWORD *)v357 + 1);
          if (!v355)
          {
            v356 = v357 + 8;
            goto LABEL_414;
          }
        }
        v355 = *(_QWORD *)v357;
        v356 = v357;
        if (!*(_QWORD *)v357)
          break;
        continue;
      }
    }
LABEL_414:
    v814 = v352;
    v364 = v354 << 32;
    v365 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v365 + 28) = v364 | v353;
    *v365 = 0;
    v365[1] = 0;
    v365[2] = (uint64_t)v357;
    *(_QWORD *)v356 = v365;
    if (**(_QWORD **)buf)
    {
      *(_QWORD *)buf = **(_QWORD **)buf;
      v366 = *(uint64_t **)v356;
    }
    else
    {
      v366 = v365;
    }
    sub_23938CAE0(*(uint64_t **)&buf[8], v366);
    *(_QWORD *)&v847 = v847 + 1;
    v352 = v814;
LABEL_418:
    v367 = vzip1_s32(*(int32x2_t *)v352.f32, (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v352, (int8x16_t)v352, 8uLL));
    if (v349 < v348)
    {
      *v349++ = (float32x2_t)v367;
      goto LABEL_420;
    }
    v368 = v349 - v350;
    v369 = v368 + 1;
    v290 = v802;
    if ((unint64_t)(v368 + 1) >> 61)
      goto LABEL_595;
    if (((char *)v348 - (char *)v350) >> 2 > v369)
      v369 = ((char *)v348 - (char *)v350) >> 2;
    if ((unint64_t)((char *)v348 - (char *)v350) >= 0x7FFFFFFFFFFFFFF8)
      v370 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v370 = v369;
    if (v370)
    {
      if (v370 >> 61)
        goto LABEL_596;
      v371 = (char *)operator new(8 * v370);
    }
    else
    {
      v371 = 0;
    }
    v372 = (int32x2_t *)&v371[8 * v368];
    *v372 = v367;
    v373 = (float32x2_t *)&v372[1];
    if (v349 != v350)
    {
      do
      {
        v374 = v349[-1];
        --v349;
        v372[-1] = (int32x2_t)v374;
        --v372;
      }
      while (v349 != v350);
      v349 = v350;
    }
    v350 = (float32x2_t *)v372;
    v348 = (float32x2_t *)&v371[8 * v370];
    if (v349)
      operator delete(v349);
    v349 = v373;
LABEL_391:
    if (++v346 != v347)
      continue;
    break;
  }
  v375 = *(_QWORD **)&buf[8];
LABEL_438:
  sub_23938C854(v375);
  if ((unint64_t)((char *)v349 - (char *)v350) <= 0x17)
  {
    if (qword_2569304A0 != -1)
      dispatch_once(&qword_2569304A0, &unk_250AD6988);
    v376 = qword_256930498;
    if (os_log_type_enabled((os_log_t)qword_256930498, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v349 - v350;
      _os_log_error_impl(&dword_239388000, v376, OS_LOG_TYPE_ERROR, "Failed to fit bounding box, not enough object voxels #: %{public}lu", buf, 0xCu);
      v377 = 0;
      if (v350)
        goto LABEL_589;
    }
    else
    {
      v377 = 0;
      if (v350)
        goto LABEL_589;
    }
    goto LABEL_590;
  }
  v378 = (char *)*v788;
  v379 = v788[1];
  if (*v788 == v379)
  {
    v380 = -3.4028e38;
  }
  else
  {
    v380 = -3.4028e38;
    do
    {
      v381 = *(_DWORD *)v378;
      v378 += 4;
      v382 = *(float32x4_t *)(v290->i64[1] + 48 * v381);
      v382.i32[3] = -1.0;
      v383 = (int8x16_t)vmulq_f32(a3[7], v382);
      v384 = vaddv_f32(vadd_f32(*(float32x2_t *)v383.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v383, v383, 8uLL)));
      if (v380 < v384)
        v380 = v384;
    }
    while (v378 != (char *)v379);
  }
  v765 = v290[2];
  if (*(_BYTE *)v784 && v350 != v349)
  {
    v385 = *(float32x4_t *)(v784 + 64);
    v386 = *(float32x4_t *)(v784 + 80);
    *(float *)v387.i32 = vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v385, v385));
    v387.i32[1] = vdupq_n_s32(0x7FC00000u).i32[1];
    *(float *)v388.i32 = vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v386, v386));
    v388.i32[1] = v387.i32[1];
    v389 = *(float32x2_t *)(v784 + 96);
    v390 = vrsqrte_f32((float32x2_t)v387.u32[0]);
    v391 = vmul_f32(v390, vrsqrts_f32((float32x2_t)v387.u32[0], vmul_f32(v390, v390)));
    v392 = vmul_n_f32(*(float32x2_t *)v385.f32, vmul_f32(v391, vrsqrts_f32((float32x2_t)v387.u32[0], vmul_f32(v391, v391))).f32[0]);
    *(float32x2_t *)v385.f32 = vrsqrte_f32((float32x2_t)v388.u32[0]);
    *(float32x2_t *)v385.f32 = vmul_f32(*(float32x2_t *)v385.f32, vrsqrts_f32((float32x2_t)v388.u32[0], vmul_f32(*(float32x2_t *)v385.f32, *(float32x2_t *)v385.f32)));
    v393 = vmul_n_f32(*(float32x2_t *)v386.f32, vmul_f32(*(float32x2_t *)v385.f32, vrsqrts_f32((float32x2_t)v388.u32[0], vmul_f32(*(float32x2_t *)v385.f32, *(float32x2_t *)v385.f32))).f32[0]);
    *(float32x2_t *)v385.f32 = vmul_f32(vmul_f32(vsqrt_f32((float32x2_t)vzip1_s32(v387, v388)), (float32x2_t)vdup_n_s32(0x3F8CCCCDu)), (float32x2_t)0x3F0000003F000000);
    v394 = vadd_f32(*(float32x2_t *)v385.f32, (float32x2_t)vdup_n_s32(0x3727C5ACu));
    v395 = vsub_f32((float32x2_t)vdup_n_s32(0xB727C5AC), *(float32x2_t *)v385.f32);
    v396 = v350;
    while (1)
    {
      v855.columns[0] = (simd_float2)v392;
      v855.columns[1] = (simd_float2)v393;
      v397 = __invert_f2(v855);
      v398 = vsub_f32(*v396, v389);
      v399 = vmla_lane_f32(vmul_n_f32((float32x2_t)v397.columns[0], v398.f32[0]), (float32x2_t)v397.columns[1], v398, 1);
      v400 = vcgt_f32(v399, v395);
      if ((v400.i8[0] & 1) == 0)
        break;
      if ((v400.i8[4] & 1) == 0)
        break;
      v401 = vcgt_f32(v394, v399);
      if ((v401.i32[0] & v401.i32[1] & 1) == 0)
        break;
      if (++v396 == v349)
      {
        v402 = *(float32x4_t *)(v784 + 64);
        v403 = *(float32x4_t *)(v784 + 80);
        v404 = (float32x2_t)vmulq_f32(v402, v402).u64[0];
        *(float *)&v405 = vaddv_f32(v404);
        v406 = (float32x2_t)vmulq_f32(v403, v403).u64[0];
        v407 = *(float32x2_t *)(v784 + 96);
        v408 = vrsqrte_f32((float32x2_t)v405);
        v409 = vmul_f32(v408, vrsqrts_f32((float32x2_t)v405, vmul_f32(v408, v408)));
        v410 = vmul_n_f32(*(float32x2_t *)v402.f32, vmul_f32(v409, vrsqrts_f32((float32x2_t)v405, vmul_f32(v409, v409))).f32[0]);
        v411 = (float32x2_t)COERCE_UNSIGNED_INT(vaddv_f32(v406));
        *(float32x2_t *)v402.f32 = vrsqrte_f32(v411);
        *(float32x2_t *)v402.f32 = vmul_f32(*(float32x2_t *)v402.f32, vrsqrts_f32((float32x2_t)v411.u32[0], vmul_f32(*(float32x2_t *)v402.f32, *(float32x2_t *)v402.f32)));
        v412 = vmul_n_f32(*(float32x2_t *)v403.f32, vmul_f32(*(float32x2_t *)v402.f32, vrsqrts_f32((float32x2_t)v411.u32[0], vmul_f32(*(float32x2_t *)v402.f32, *(float32x2_t *)v402.f32))).f32[0]);
        *(float32x2_t *)v402.f32 = vmul_f32(vmul_f32(vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32(v404, (float32x2_t)vdup_lane_s32((int32x2_t)v404, 1)), (int32x2_t)vadd_f32(v406, (float32x2_t)vdup_lane_s32((int32x2_t)v406, 1)))), (float32x2_t)vdup_n_s32(0x3F666666u)), (float32x2_t)0x3F0000003F000000);
        v413 = vadd_f32(*(float32x2_t *)v402.f32, (float32x2_t)vdup_n_s32(0x3727C5ACu));
        v414 = vsub_f32((float32x2_t)vdup_n_s32(0xB727C5AC), *(float32x2_t *)v402.f32);
        v415 = v350;
        do
        {
          v856.columns[0] = (simd_float2)v410;
          v856.columns[1] = (simd_float2)v412;
          v416 = __invert_f2(v856);
          *(float32x2_t *)v417.f32 = vsub_f32(*v415, v407);
          v418 = vmla_lane_f32(vmul_n_f32((float32x2_t)v416.columns[0], v417.f32[0]), (float32x2_t)v416.columns[1], *(float32x2_t *)v417.f32, 1);
          v419 = vcgt_f32(v418, v414);
          if ((v419.i8[0] & 1) == 0)
            goto LABEL_543;
          if ((v419.i8[4] & 1) == 0)
            goto LABEL_543;
          v420 = vcgt_f32(v413, v418);
          if ((v420.i32[0] & v420.i32[1] & 1) == 0)
            goto LABEL_543;
          ++v415;
        }
        while (v415 != v349);
        break;
      }
    }
  }
  v421 = (int32x4_t)vmulq_f32(v780, v780);
  v422 = (int32x4_t)vmulq_f32(v776, v776);
  v423 = (int32x4_t)vmulq_f32(v770, v770);
  v421.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v421, 2), vadd_f32(*(float32x2_t *)v421.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v421.i8, 1))).u32[0];
  v422.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v422, 2), vadd_f32(*(float32x2_t *)v422.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v422.i8, 1))).u32[0];
  v423.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v423, 2), vadd_f32(*(float32x2_t *)v423.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v423.i8, 1))).u32[0];
  v424 = vrsqrte_f32((float32x2_t)v421.u32[0]);
  v425 = vrsqrte_f32((float32x2_t)v422.u32[0]);
  v426 = vrsqrte_f32((float32x2_t)v423.u32[0]);
  v427 = vmul_f32(v424, vrsqrts_f32((float32x2_t)v421.u32[0], vmul_f32(v424, v424)));
  v428 = vmul_f32(v425, vrsqrts_f32((float32x2_t)v422.u32[0], vmul_f32(v425, v425)));
  v429 = vmul_f32(v426, vrsqrts_f32((float32x2_t)v423.u32[0], vmul_f32(v426, v426)));
  v777 = vmulq_n_f32(v776, vmul_f32(v428, vrsqrts_f32((float32x2_t)v422.u32[0], vmul_f32(v428, v428))).f32[0]);
  v781 = vmulq_n_f32(v780, vmul_f32(v427, vrsqrts_f32((float32x2_t)v421.u32[0], vmul_f32(v427, v427))).f32[0]);
  v771 = vmulq_n_f32(v770, vmul_f32(v429, vrsqrts_f32((float32x2_t)v423.u32[0], vmul_f32(v429, v429))).f32[0]);
  v430 = (float *)operator new(0x94uLL);
  v431 = 0;
  v432 = v430 + 37;
  v433 = v430;
  do
  {
    v435 = (float)v431;
    if (v430 < v432)
    {
      *v430++ = v435;
      goto LABEL_465;
    }
    v436 = v430 - v433;
    v437 = v436 + 1;
    if ((unint64_t)(v436 + 1) >> 62)
      goto LABEL_595;
    if (((char *)v432 - (char *)v433) >> 1 > v437)
      v437 = ((char *)v432 - (char *)v433) >> 1;
    if ((unint64_t)((char *)v432 - (char *)v433) >= 0x7FFFFFFFFFFFFFFCLL)
      v438 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v438 = v437;
    if (v438)
    {
      if (v438 >> 62)
        goto LABEL_596;
      v439 = operator new(4 * v438);
    }
    else
    {
      v439 = 0;
    }
    v440 = (float *)&v439[4 * v436];
    *v440 = v435;
    v441 = v440 + 1;
    if (v430 != v433)
    {
      v442 = (char *)(v430 - 1) - (char *)v433;
      if (v442 >= 0xBC)
      {
        if (&v439[(char *)v430 - (char *)v433 - 4 - (v442 & 0xFFFFFFFFFFFFFFFCLL)] > &v439[(char *)v430
                                                                                          - (char *)v433
                                                                                          - 4])
        {
          v443 = v430;
        }
        else if ((float *)((char *)v430 - (v442 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v430 - 1)
        {
          v443 = v430;
        }
        else if ((unint64_t)((char *)v433 - v439) >= 0x20)
        {
          v444 = (v442 >> 2) + 1;
          v443 = &v430[-(v444 & 0x7FFFFFFFFFFFFFF8)];
          v445 = &v439[4 * v436 - 16];
          v446 = v430 - 4;
          v447 = v444 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v448 = *(_OWORD *)v446;
            *(v445 - 1) = *((_OWORD *)v446 - 1);
            *v445 = v448;
            v445 -= 2;
            v446 -= 8;
            v447 -= 8;
          }
          while (v447);
          v440 -= v444 & 0x7FFFFFFFFFFFFFF8;
          if (v444 == (v444 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_490;
        }
        else
        {
          v443 = v430;
        }
      }
      else
      {
        v443 = v430;
      }
      do
      {
        v449 = *((_DWORD *)v443-- - 1);
        *((_DWORD *)v440-- - 1) = v449;
      }
      while (v443 != v433);
    }
LABEL_490:
    v432 = (float *)&v439[4 * v438];
    if (v433)
      operator delete(v433);
    v433 = v440;
    v430 = v441;
LABEL_465:
    _CF = v431 >= 0xAF;
    v431 += 5;
  }
  while (!_CF);
  v450 = (char *)v430 - (char *)v433;
  if (v430 == v433)
  {
    v501 = 0;
    v454 = 0;
    v503 = 0;
    v452 = 0;
    v458 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
    v459.i64[0] = 0x80000000800000;
    v459.i64[1] = 0x80000000800000;
    v502 = (float32x2_t *)v784;
    if (*(_BYTE *)v784)
      goto LABEL_530;
    goto LABEL_532;
  }
  if ((unint64_t)v450 >= 0x3FFFFFFFFFFFFFFDLL)
    goto LABEL_595;
  v815 = v450 >> 2;
  v451 = 4 * v450;
  v452 = (float *)operator new(4 * v450);
  bzero(v452, v451);
  v453 = 0;
  v454 = 0;
  v455 = 0;
  v456 = 0;
  v763 = v451;
  v764 = &v452[v451 / 4];
  v457 = v815;
  if (v815 <= 1)
    v457 = 1;
  v768 = v457;
  v458 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
  v459.i64[0] = 0x80000000800000;
  v459.i64[1] = 0x80000000800000;
  v460 = vdup_n_s32(0x7F7FFFFFu);
  do
  {
    v799 = v459;
    v803 = v458;
    v471 = __sincosf_stret((float)(v433[v453] * 3.1416) / 180.0);
    v472 = (float32x2_t)__PAIR64__(LODWORD(v471.__sinval), LODWORD(v471.__cosval));
    v473.f32[0] = -v471.__sinval;
    v473.i32[1] = LODWORD(v471.__cosval);
    v810 = v473;
    v474 = (float32x2_t)0x80000000800000;
    v475 = (float32x2_t)v460;
    if (v350 != v349)
    {
      v476 = v350;
      do
      {
        v857.columns[0] = (simd_float2)v472;
        v857.columns[1] = (simd_float2)v473;
        v477 = __invert_f2(v857);
        v478 = *v476++;
        v479 = vmla_lane_f32(vmul_n_f32((float32x2_t)v477.columns[0], v478.f32[0]), (float32x2_t)v477.columns[1], v478, 1);
        v473 = v810;
        v472 = (float32x2_t)__PAIR64__(LODWORD(v471.__sinval), LODWORD(v471.__cosval));
        v475 = vminnm_f32(v475, v479);
        v474 = vmaxnm_f32(v474, v479);
      }
      while (v476 != v349);
    }
    v480 = vsub_f32(v474, v475);
    v481 = vmul_f32(vadd_f32(v474, v475), (float32x2_t)0x3F0000003F000000);
    v482 = vmla_lane_f32(vmul_n_f32(v472, v481.f32[0]), v473, v481, 1);
    if (v455 >= v456)
    {
      v483 = ((char *)v455 - (char *)v454) >> 5;
      v484 = v483 + 1;
      if ((unint64_t)(v483 + 1) >> 59)
        goto LABEL_595;
      if (((char *)v456 - (char *)v454) >> 4 > v484)
        v484 = ((char *)v456 - (char *)v454) >> 4;
      if ((unint64_t)((char *)v456 - (char *)v454) >= 0x7FFFFFFFFFFFFFE0)
        v485 = 0x7FFFFFFFFFFFFFFLL;
      else
        v485 = v484;
      v786 = v480;
      if (v485)
      {
        if (v485 >> 59)
          goto LABEL_596;
        v486 = (char *)operator new(32 * v485);
        v473 = v810;
        v472 = (float32x2_t)__PAIR64__(LODWORD(v471.__sinval), LODWORD(v471.__cosval));
        v480 = v786;
      }
      else
      {
        v486 = 0;
      }
      v487 = (float32x2_t *)&v486[32 * v483];
      *v487 = v482;
      v487[1] = v480;
      v487[2] = v472;
      v487[3] = v473;
      if (v455 == v454)
      {
        v490 = (float32x2_t *)&v486[32 * v483];
      }
      else
      {
        v488 = &v486[32 * v483];
        do
        {
          v489 = *(_OWORD *)v455[-2].f32;
          v490 = (float32x2_t *)(v488 - 32);
          *((_OWORD *)v488 - 2) = *(_OWORD *)v455[-4].f32;
          *((_OWORD *)v488 - 1) = v489;
          v455 -= 4;
          v488 -= 32;
        }
        while (v455 != v454);
      }
      v456 = (float32x2_t *)&v486[32 * v485];
      v455 = v487 + 4;
      if (v454)
      {
        operator delete(v454);
        v480 = v786;
        v472 = (float32x2_t)__PAIR64__(LODWORD(v471.__sinval), LODWORD(v471.__cosval));
      }
      v454 = v490;
    }
    else
    {
      *v455 = v482;
      v455[1] = v480;
      v455[2] = v472;
      v455[3] = v473;
      v455 += 4;
    }
    v492 = v799;
    v491 = v803;
    if (v350 == v349)
    {
      v461 = 0.0;
    }
    else
    {
      v461 = 0.0;
      v493 = v350;
      v494 = sqrtf(vaddv_f32(vmul_f32(v472, v472)));
      do
      {
        v495 = *v493++;
        v496 = vsub_f32(v495, v482);
        *(float *)&v497 = vmlas_n_f32(-(float)(v496.f32[1] * v471.__cosval), v471.__sinval, v496.f32[0]);
        v498.i64[0] = 0;
        v498.i64[1] = v497;
        v499 = vmulq_f32(v498, v498);
        v499.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v499, 2), vaddq_f32(v499, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v499.f32, 1))).f32[0]);
        v461 = v461 + (float)((float)(v499.f32[0] / v494) * (float)(v499.f32[0] / v494));
      }
      while (v493 != v349);
    }
    *(float *)&v462 = sqrtf(v461);
    v463 = (float32x4_t *)&v452[4 * v453];
    v464 = vmlaq_lane_f32(vmlaq_f32(vmulq_n_f32(v781, v471.__cosval), (float32x4_t)0, v777), v771, v472, 1);
    v465 = *(float32x4_t *)(v784 + 112);
    v466 = (int32x4_t)vmulq_f32(v465, v465);
    v466.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v466, 2), vadd_f32(*(float32x2_t *)v466.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v466.i8, 1))).u32[0];
    v467 = vrsqrte_f32((float32x2_t)v466.u32[0]);
    v468 = vmul_f32(v467, vrsqrts_f32((float32x2_t)v466.u32[0], vmul_f32(v467, v467)));
    v469 = vmulq_f32(v464, vmulq_n_f32(v465, vmul_f32(v468, vrsqrts_f32((float32x2_t)v466.u32[0], vmul_f32(v468, v468))).f32[0]));
    HIDWORD(v462) = vmul_lane_f32(v480, v480, 1).u32[0];
    v463->i64[0] = v462;
    v463->f32[2] = 1.0
                 - fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v469, 2), vaddq_f32(v469, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v469.f32, 1))).f32[0]);
    v470 = *v463;
    v491.i32[3] = 0;
    v470.i32[3] = 0;
    v458 = vminnmq_f32(v491, v470);
    v492.i32[3] = 0;
    v459 = vmaxnmq_f32(v492, v470);
    ++v453;
  }
  while (v453 != v768);
  v500 = 0;
  do
  {
    *(float32x4_t *)&v452[v500 / 4] = vdivq_f32(*(float32x4_t *)&v452[v500 / 4], v459);
    v500 += 16;
  }
  while (v763 != v500);
  v501 = v452;
  v502 = (float32x2_t *)v784;
  v503 = v764;
  if (!*(_BYTE *)v784)
  {
LABEL_532:
    v505 = 0.0;
    goto LABEL_533;
  }
LABEL_530:
  v504 = vdivq_f32(v458, v459).u64[0];
  v505 = 1.0 / (float)(expf((float)(0.75 - fminf(*(float *)&v504, *((float *)&v504 + 1))) * 20.0) + 1.0);
LABEL_533:
  v506 = v501;
  if (v430 != v433)
  {
    v507 = v452 + 4;
    v506 = v501;
    if (v452 + 4 != v503)
    {
      v508 = *v452;
      v506 = v452;
      do
      {
        if ((float)((float)(v505 * v507[2]) + (float)(*v507 * v507[1])) < (float)((float)(v505 * v506[2])
                                                                                 + (float)(v508 * v506[1])))
        {
          v508 = *v507;
          v506 = v507;
        }
        v507 += 4;
      }
      while (v507 != v503);
    }
  }
  v509 = (float32x2_t *)((char *)v454 + 2 * ((char *)v506 - (char *)v501));
  v511 = *v509;
  v510 = v509[1];
  v512 = vmul_n_f32(v509[2], v510.f32[0]);
  v513 = vmul_lane_f32(v509[3], v510, 1);
  v502[9].i32[0] = 0;
  v502[8] = v512;
  v502[11].i32[0] = 0;
  v502[10] = v513;
  v502[13].i32[0] = 1065353216;
  v502[12] = v511;
  if (v452)
    operator delete(v452);
  operator delete(v454);
  if (v433)
    operator delete(v433);
LABEL_543:
  v514 = (int8x16_t)vmulq_f32(v765, v765);
  v417.f32[0] = sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v514.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v514, v514, 8uLL))));
  v528 = *(float32x4_t *)(v784 + 80);
  v515 = *(float32x4_t *)(v784 + 96);
  v515.i32[1] = 0;
  v515.i32[2] = HIDWORD(*(_QWORD *)(v784 + 96));
  v524 = *(float32x4_t *)(v784 + 64);
  v516 = (int32x4_t)vmulq_f32(v524, v524);
  *(float *)&v517 = vaddv_f32(*(float32x2_t *)v516.i8);
  v518 = (float32x2_t)vmulq_f32(v528, v528).u64[0];
  *(float *)&v519 = vaddv_f32(v518);
  *(float32x2_t *)v516.i8 = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32(*(float32x2_t *)v516.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v516.i8, 1)), (int32x2_t)vadd_f32(v518, (float32x2_t)vdup_lane_s32((int32x2_t)v518, 1))));
  v520 = (float32x4_t)vzip1q_s32(v516, v516);
  v520.i32[1] = 0;
  v521 = *(float *)&v517;
  v522 = vrsqrte_f32((float32x2_t)v517);
  v523 = vmul_f32(v522, vrsqrts_f32((float32x2_t)LODWORD(v521), vmul_f32(v522, v522)));
  *(float32x2_t *)v524.f32 = vmul_n_f32(*(float32x2_t *)v524.f32, vmul_f32(v523, vrsqrts_f32((float32x2_t)LODWORD(v521), vmul_f32(v523, v523))).f32[0]);
  v525 = vrsqrte_f32((float32x2_t)v519);
  v526 = vmul_f32(v525, vrsqrts_f32((float32x2_t)v519, vmul_f32(v525, v525)));
  v516.i32[0] = vmul_f32(v526, vrsqrts_f32((float32x2_t)v519, vmul_f32(v526, v526))).u32[0];
  v527 = v524;
  v527.i32[1] = 0;
  v527.i32[2] = v524.i32[1];
  *(float32x2_t *)v528.f32 = vmul_n_f32(*(float32x2_t *)v528.f32, *(float *)v516.i32);
  v529 = v528;
  v529.i32[1] = 0;
  v529.i32[2] = v528.i32[1];
  v530 = vaddq_f32(v515, *a3);
  v531 = (float32x4_t)vzip1q_s32((int32x4_t)v528, (int32x4_t)v528);
  v531.i32[1] = 0;
  v532 = 0uLL;
  v533 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v524.f32, 1);
  v534 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 16);
  v535 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 32);
  v536 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
  v537 = (uint32x4_t)vandq_s8((int8x16_t)vcgeq_f32(v536, vabdq_f32(vmlaq_f32(vaddq_f32(vmulq_f32(v527, (float32x4_t)0), (float32x4_t)xmmword_2393F5540), (float32x4_t)0, v529), v534)), vandq_s8((int8x16_t)vcgeq_f32(v536, vabdq_f32(vmlaq_n_f32(vaddq_f32(vmulq_n_f32(v527, v524.f32[0]), (float32x4_t)0), v529, v528.f32[0]), *MEMORY[0x24BDAEDF8])), (int8x16_t)vcgeq_f32(v536,
                                      vabdq_f32(vmlaq_lane_f32(vaddq_f32(vmulq_lane_f32(v527, *(float32x2_t *)v524.f32, 1), (float32x4_t)0), v529, *(float32x2_t *)v528.f32, 1), v535))));
  v537.i32[3] = v537.i32[2];
  if ((vminvq_u32(v537) & 0x80000000) == 0)
    goto LABEL_545;
  v538 = (float32x4_t)vzip1q_s32((int32x4_t)v524, (int32x4_t)v524);
  v538.i32[1] = 0;
  v539 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v528.f32, 1);
  v540 = (float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)v538, (int32x4_t)v531), (int32x4_t)0);
  __asm { FMOV            V24.4S, #1.0 }
  _Q24.i32[0] = 0;
  _Q24.i32[2] = 0;
  v544 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)v538, (int32x4_t)v531), (int32x4_t)0);
  v532 = vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v536, vabdq_f32(vmlaq_f32(vaddq_f32(_Q24, vmulq_f32(v544, (float32x4_t)0)), (float32x4_t)0, v540), v534)), (int8x16_t)vcgeq_f32(v536, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v544, v524.f32[0]), (float32x4_t)0, _Q24), v533, v540), *MEMORY[0x24BDAEDF8]))), (int8x16_t)vcgeq_f32(v536, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v544, v528.f32[0]), (float32x4_t)0, _Q24), v539, v540), v535)));
  v532.i32[3] = v532.i32[2];
  if ((vminvq_u32((uint32x4_t)v532) & 0x80000000) == 0)
    goto LABEL_545;
  v622 = (int8x16_t)vmulq_f32(v531, (float32x4_t)xmmword_2393F5550);
  v623 = vmulq_f32(v538, vmlaq_f32((float32x4_t)vextq_s8(vextq_s8(v622, v622, 0xCuLL), v622, 8uLL), (float32x4_t)xmmword_2393F5360, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v531, (int32x4_t)v531), (int8x16_t)v531, 0xCuLL)));
  v532 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v623, 2), vaddq_f32(v623, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v623.f32, 1)));
  if (fabsf(*(float *)v532.i32 + -1.0) <= 0.000011 && *(float *)v532.i32 > 0.0)
  {
    v546 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v528.f32, 0);
    v547 = 0uLL;
  }
  else
  {
LABEL_545:
    v545 = (int32x4_t)vnegq_f32(v531);
    v546 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v545.i8, 0);
    v547 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v545.i8, 1);
    v539 = (float32x4_t)vdupq_laneq_s32(v545, 2);
  }
  v532.i32[0] = 0;
  v548 = a3[3];
  v549 = a3[4];
  v550 = a3[5];
  v551 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v548, v530.f32[0]), v549, *(float32x2_t *)v530.f32, 1), v550, v530, 2);
  v552 = v417;
  v552.f32[1] = v380 + v417.f32[0];
  v552.i32[2] = v417.i32[0];
  v553 = vaddq_f32(v552, v520);
  v554 = (int32x4_t)vmulq_f32(v548, v548);
  v554.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v554, 2), vadd_f32(*(float32x2_t *)v554.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v554.i8, 1))).u32[0];
  v555 = vrsqrte_f32((float32x2_t)v554.u32[0]);
  v556 = vmul_f32(v555, vrsqrts_f32((float32x2_t)v554.u32[0], vmul_f32(v555, v555)));
  v557 = vmulq_n_f32(v548, vmul_f32(v556, vrsqrts_f32((float32x2_t)v554.u32[0], vmul_f32(v556, v556))).f32[0]);
  v558 = (int32x4_t)vmulq_f32(v549, v549);
  v558.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v558, 2), vadd_f32(*(float32x2_t *)v558.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v558.i8, 1))).u32[0];
  v559 = vrsqrte_f32((float32x2_t)v558.u32[0]);
  v560 = vmul_f32(v559, vrsqrts_f32((float32x2_t)v558.u32[0], vmul_f32(v559, v559)));
  v561 = vmulq_n_f32(v549, vmul_f32(v560, vrsqrts_f32((float32x2_t)v558.u32[0], vmul_f32(v560, v560))).f32[0]);
  v562 = (int32x4_t)vmulq_f32(v550, v550);
  v562.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v562, 2), vadd_f32(*(float32x2_t *)v562.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v562.i8, 1))).u32[0];
  v563 = vrsqrte_f32((float32x2_t)v562.u32[0]);
  v564 = vmul_f32(v563, vrsqrts_f32((float32x2_t)v562.u32[0], vmul_f32(v563, v563)));
  v565 = vmulq_n_f32(v550, vmul_f32(v564, vrsqrts_f32((float32x2_t)v562.u32[0], vmul_f32(v564, v564))).f32[0]);
  v566 = vmlaq_f32(vmlaq_f32(vmulq_f32(v557, v546), v547, v561), v539, v565);
  v567 = vmulq_n_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v557, v524.f32[0]), (float32x4_t)0, v561), v533, v565), v553.f32[0]);
  v568 = v567;
  v568.i32[3] = 0;
  v569 = vmulq_lane_f32(vmlaq_f32(vaddq_f32(v561, vmulq_f32(v557, (float32x4_t)0)), (float32x4_t)0, v565), *(float32x2_t *)v553.f32, 1);
  v570 = v569;
  v570.i32[3] = 0;
  v571 = vmulq_laneq_f32(v566, v553, 2);
  v572 = v571;
  v572.i32[3] = 0;
  v573 = *(float32x4_t *)(v784 + 112);
  v565.i8[0] = *(_BYTE *)v784;
  v574 = vbicq_s8((int8x16_t)vdupq_n_s32(0x3F4CCCCDu), vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8((int8x16_t)v565, v532), 0));
  v575 = vmulq_f32(v568, v568);
  LODWORD(v576) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v575, 2), vaddq_f32(v575, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v575.f32, 1))).u32[0];
  v6.f32[0] = sqrtf(v576);
  v577 = vmulq_f32(v570, v570);
  LODWORD(v578) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v577, 2), vaddq_f32(v577, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v577.f32, 1))).u32[0];
  v579 = sqrtf(v578);
  v580 = vmulq_f32(v572, v572);
  LODWORD(v581) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v580, 2), vaddq_f32(v580, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v580.f32, 1))).u32[0];
  v582 = sqrtf(v581);
  v583 = vmulq_f32(v573, v573);
  v584 = vaddq_f32(v583, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v583.f32, 1));
  v590 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v583, 2);
  v584.i32[0] = vaddq_f32(v590, v584).u32[0];
  v590.f32[0] = sqrtf(v584.f32[0]);
  v585 = *(float32x4_t *)(v784 + 128);
  v586 = *(float32x4_t *)(v784 + 144);
  v587 = vmulq_f32(v585, v585);
  LODWORD(v588) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v587, 2), vaddq_f32(v587, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v587.f32, 1))).u32[0];
  v589 = vmulq_f32(v586, v586);
  v589.i32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v589, 2), vaddq_f32(v589, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v589.f32, 1))).u32[0];
  v590.i32[1] = sqrtf(v588);
  v591 = sqrtf(v589.f32[0]);
  v592 = vrsqrte_f32((float32x2_t)v584.u32[0]);
  v593 = vmul_f32(v592, vrsqrts_f32((float32x2_t)v584.u32[0], vmul_f32(v592, v592)));
  v594 = (int32x4_t)vmulq_n_f32(v573, vmul_f32(v593, vrsqrts_f32((float32x2_t)v584.u32[0], vmul_f32(v593, v593))).f32[0]);
  *(float32x2_t *)v584.f32 = vrsqrte_f32((float32x2_t)LODWORD(v588));
  *(float32x2_t *)v584.f32 = vmul_f32(*(float32x2_t *)v584.f32, vrsqrts_f32((float32x2_t)LODWORD(v588), vmul_f32(*(float32x2_t *)v584.f32, *(float32x2_t *)v584.f32)));
  v595 = (int32x4_t)vmulq_n_f32(v585, vmul_f32(*(float32x2_t *)v584.f32, vrsqrts_f32((float32x2_t)LODWORD(v588), vmul_f32(*(float32x2_t *)v584.f32, *(float32x2_t *)v584.f32))).f32[0]);
  v596 = vrsqrte_f32((float32x2_t)v589.u32[0]);
  v597 = vmul_f32(v596, vrsqrts_f32((float32x2_t)v589.u32[0], vmul_f32(v596, v596)));
  v598 = vmulq_n_f32(v586, vmul_f32(v597, vrsqrts_f32((float32x2_t)v589.u32[0], vmul_f32(v597, v597))).f32[0]);
  v599 = v598.f32[2] + (float)(*(float *)v594.i32 + *(float *)&v595.i32[1]);
  if (v599 >= 0.0)
  {
    v609 = sqrtf(v599 + 1.0);
    v610 = v609 + v609;
    v611 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(v609 + v609));
    v612 = vmul_f32(v611, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v609 + v609), v611));
    v612.i32[0] = vmul_f32(v612, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v609 + v609), v612)).u32[0];
    v606 = vmul_n_f32(vsub_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v595, (int8x16_t)v595, 8uLL), *(int32x2_t *)v598.f32), (float32x2_t)vext_s8(*(int8x8_t *)v598.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v594, (int8x16_t)v594, 8uLL), 4uLL)), v612.f32[0]);
    v613.i32[0] = vsub_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v594.i8, 1), *(float32x2_t *)v595.i8).u32[0];
    v613.f32[1] = v610;
    v612.i32[1] = 0.25;
    v608 = vmul_f32(v613, v612);
  }
  else if (*(float *)v594.i32 < *(float *)&v595.i32[1] || *(float *)v594.i32 < v598.f32[2])
  {
    v614 = 1.0 - *(float *)v594.i32;
    if (*(float *)&v595.i32[1] >= v598.f32[2])
    {
      v624 = sqrtf(*(float *)&v595.i32[1] + (float)(v614 - v598.f32[2]));
      *(float *)&v625 = v624 + v624;
      v626 = vrecpe_f32((float32x2_t)v625);
      v627 = vmul_f32(v626, vrecps_f32((float32x2_t)v625, v626));
      v628.i32[0] = vmul_f32(v627, vrecps_f32((float32x2_t)v625, v627)).u32[0];
      v627.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v594.i8, 1), *(float32x2_t *)v595.i8).u32[0];
      v627.i32[1] = v625;
      v629 = (float32x2_t)vdup_laneq_s32(v594, 2);
      v630 = (float32x2_t)vrev64_s32(*(int32x2_t *)v598.f32);
      v631.i32[0] = vadd_f32(v630, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v595, (int8x16_t)v595, 8uLL)).u32[0];
      v631.i32[1] = vsub_f32(v630, v629).i32[1];
      v608 = vmul_n_f32(v631, v628.f32[0]);
      v628.i32[1] = 0.25;
      v606 = vmul_f32(v627, v628);
    }
    else
    {
      v615 = (float32x2_t)__PAIR64__(v594.u32[1], COERCE_UNSIGNED_INT(sqrtf(v598.f32[2] + (float)(v614 - *(float *)&v595.i32[1]))));
      v616 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v594, (int8x16_t)v594, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v595, (int8x16_t)v595, 8uLL)), *(float32x2_t *)v598.f32);
      v617 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v595.i8, 0);
      v618 = vsub_f32(*(float32x2_t *)v594.i8, v617);
      v617.i32[0] = 2.0;
      v617.i32[0] = vmul_f32(v615, v617).u32[0];
      v617.i32[1] = v618.i32[1];
      v619 = vrecpe_f32((float32x2_t)v617.u32[0]);
      v620 = vmul_f32(v619, vrecps_f32((float32x2_t)v617.u32[0], v619));
      v618.i32[0] = vmul_f32(v620, vrecps_f32((float32x2_t)v617.u32[0], v620)).u32[0];
      v606 = vmul_n_f32(v616, v618.f32[0]);
      __asm { FMOV            V26.2S, #0.25 }
      _D26.i32[1] = v618.i32[0];
      v608 = vmul_f32(v617, _D26);
    }
  }
  else
  {
    v600 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v595.i8, 0);
    v601 = vadd_f32(*(float32x2_t *)v594.i8, v600);
    v600.i32[0] = 2.0;
    v600.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v594.u32[1], COERCE_UNSIGNED_INT(sqrtf(*(float *)v594.i32 + (float)((float)(1.0- *(float *)&v595.i32[1])- v598.f32[2])))), v600).u32[0];
    v600.i32[1] = v601.i32[1];
    v602 = vrecpe_f32((float32x2_t)v600.u32[0]);
    v603 = vmul_f32(v602, vrecps_f32((float32x2_t)v600.u32[0], v602));
    LODWORD(v604) = vmul_f32(v603, vrecps_f32((float32x2_t)v600.u32[0], v603)).u32[0];
    __asm { FMOV            V28.2S, #0.25 }
    _D28.f32[1] = v604;
    v606 = vmul_f32(v600, _D28);
    v607.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v594, (int8x16_t)v594, 8uLL), *(float32x2_t *)v598.f32).u32[0];
    v607.i32[1] = vsub_f32((float32x2_t)vdup_laneq_s32(v595, 2), *(float32x2_t *)&v598).i32[1];
    v608 = vmul_n_f32(v607, v604);
  }
  v632 = vaddq_f32(a3[6], v551);
  v6.f32[1] = v579;
  v590.f32[2] = v591;
  v633 = v576;
  v634 = vrsqrte_f32((float32x2_t)LODWORD(v576));
  v635 = vmul_f32(v634, vrsqrts_f32((float32x2_t)LODWORD(v633), vmul_f32(v634, v634)));
  v636 = (int32x4_t)vmulq_n_f32(v567, vmul_f32(v635, vrsqrts_f32((float32x2_t)LODWORD(v633), vmul_f32(v635, v635))).f32[0]);
  v635.f32[0] = v578;
  v637 = vrsqrte_f32((float32x2_t)LODWORD(v578));
  v638 = vmul_f32(v637, vrsqrts_f32((float32x2_t)v635.u32[0], vmul_f32(v637, v637)));
  v639 = (int32x4_t)vmulq_n_f32(v569, vmul_f32(v638, vrsqrts_f32((float32x2_t)v635.u32[0], vmul_f32(v638, v638))).f32[0]);
  v635.f32[0] = v581;
  v640 = vrsqrte_f32((float32x2_t)LODWORD(v581));
  v641 = vmul_f32(v640, vrsqrts_f32((float32x2_t)v635.u32[0], vmul_f32(v640, v640)));
  v642 = vmulq_n_f32(v571, vmul_f32(v641, vrsqrts_f32((float32x2_t)v635.u32[0], vmul_f32(v641, v641))).f32[0]);
  v643 = v642.f32[2] + (float)(*(float *)v636.i32 + *(float *)&v639.i32[1]);
  v778 = 1.0 - *(float *)&v574.i32[1];
  v782 = 1.0 - *(float *)v574.i32;
  if (v643 >= 0.0)
  {
    v653 = sqrtf(v643 + 1.0);
    *(float *)&v654 = v653 + v653;
    v655 = vrecpe_f32((float32x2_t)v654);
    v656 = vmul_f32(v655, vrecps_f32((float32x2_t)v654, v655));
    v656.i32[0] = vmul_f32(v656, vrecps_f32((float32x2_t)v654, v656)).u32[0];
    v664 = vmul_n_f32(vsub_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v639, (int8x16_t)v639, 8uLL), *(int32x2_t *)v642.f32), (float32x2_t)vext_s8(*(int8x8_t *)v642.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v636, (int8x16_t)v636, 8uLL), 4uLL)), v656.f32[0]);
    v657.i32[0] = vsub_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v636.i8, 1), *(float32x2_t *)v639.i8).u32[0];
    v657.i32[1] = v654;
    v656.i32[1] = 0.25;
    v666 = vmul_f32(v657, v656);
  }
  else if (*(float *)v636.i32 < *(float *)&v639.i32[1] || *(float *)v636.i32 < v642.f32[2])
  {
    v645 = 1.0 - *(float *)v636.i32;
    if (*(float *)&v639.i32[1] >= v642.f32[2])
    {
      v667 = sqrtf(*(float *)&v639.i32[1] + (float)(v645 - v642.f32[2]));
      *(float *)&v668 = v667 + v667;
      v669 = vrecpe_f32((float32x2_t)v668);
      v670 = vmul_f32(v669, vrecps_f32((float32x2_t)v668, v669));
      v671.i32[0] = vmul_f32(v670, vrecps_f32((float32x2_t)v668, v670)).u32[0];
      v670.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v636.i8, 1), *(float32x2_t *)v639.i8).u32[0];
      v670.i32[1] = v668;
      v672 = (float32x2_t)vrev64_s32(*(int32x2_t *)v642.f32);
      v673.i32[0] = vadd_f32(v672, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v639, (int8x16_t)v639, 8uLL)).u32[0];
      v673.i32[1] = vsub_f32(v672, (float32x2_t)vdup_laneq_s32(v636, 2)).i32[1];
      v666 = vmul_n_f32(v673, v671.f32[0]);
      v671.i32[1] = 0.25;
      v664 = vmul_f32(v670, v671);
    }
    else
    {
      v646 = (float32x2_t)__PAIR64__(v636.u32[1], COERCE_UNSIGNED_INT(sqrtf(v642.f32[2] + (float)(v645 - *(float *)&v639.i32[1]))));
      v647 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v636, (int8x16_t)v636, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v639, (int8x16_t)v639, 8uLL)), *(float32x2_t *)v642.f32);
      v648 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v639.i8, 0);
      v649 = vsub_f32(*(float32x2_t *)v636.i8, v648);
      v648.i32[0] = 2.0;
      v648.i32[0] = vmul_f32(v646, v648).u32[0];
      v648.i32[1] = v649.i32[1];
      v650 = vrecpe_f32((float32x2_t)v648.u32[0]);
      v651 = vmul_f32(v650, vrecps_f32((float32x2_t)v648.u32[0], v650));
      v649.i32[0] = vmul_f32(v651, vrecps_f32((float32x2_t)v648.u32[0], v651)).u32[0];
      v664 = vmul_n_f32(v647, v649.f32[0]);
      __asm { FMOV            V5.2S, #0.25 }
      _D5.i32[1] = v649.i32[0];
      v666 = vmul_f32(v648, _D5);
    }
  }
  else
  {
    v658 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v639.i8, 0);
    v659 = vadd_f32(*(float32x2_t *)v636.i8, v658);
    v658.i32[0] = 2.0;
    v658.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v636.u32[1], COERCE_UNSIGNED_INT(sqrtf(*(float *)v636.i32 + (float)((float)(1.0- *(float *)&v639.i32[1])- v642.f32[2])))), v658).u32[0];
    v658.i32[1] = v659.i32[1];
    v660 = vrecpe_f32((float32x2_t)v658.u32[0]);
    v661 = vmul_f32(v660, vrecps_f32((float32x2_t)v658.u32[0], v660));
    LODWORD(v662) = vmul_f32(v661, vrecps_f32((float32x2_t)v658.u32[0], v661)).u32[0];
    __asm { FMOV            V20.2S, #0.25 }
    _D20.f32[1] = v662;
    v664 = vmul_f32(v658, _D20);
    v665.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v636, (int8x16_t)v636, 8uLL), *(float32x2_t *)v642.f32).u32[0];
    v665.i32[1] = vsub_f32((float32x2_t)vdup_laneq_s32(v639, 2), *(float32x2_t *)&v642).i32[1];
    v666 = vmul_n_f32(v665, v662);
  }
  v6.f32[2] = v582;
  v787 = vmlaq_n_f32(v632, a3[2], v380 * 0.5);
  *(float32x2_t *)v674.f32 = v606;
  *(float32x2_t *)&v674.u32[2] = v608;
  v797 = *(float *)&v574.i32[2];
  v800 = v674;
  *(float32x2_t *)v675.f32 = v664;
  *(float32x2_t *)&v675.u32[2] = v666;
  v811 = vmulq_lane_f32(v590, *(float32x2_t *)v574.i8, 1);
  v816 = vmulq_n_f32(*(float32x4_t *)(v784 + 160), *(float *)v574.i32);
  v804 = v675;
  v676 = vmulq_f32(v675, (float32x4_t)xmmword_2393F5560);
  v772 = (uint64_t)v664;
  v774 = (uint64_t)v666;
  *(float32x2_t *)v675.f32 = vadd_f32(vmul_f32(v664, v664), vmul_f32(v666, v666));
  v675.i32[0] = vadd_f32(*(float32x2_t *)v675.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v675.f32, 1)).u32[0];
  v677 = vrecpe_f32((float32x2_t)v675.u32[0]);
  v678 = vmul_f32(v677, vrecps_f32((float32x2_t)v675.u32[0], v677));
  v679 = vmulq_n_f32(v676, vmul_f32(v678, vrecps_f32((float32x2_t)v675.u32[0], v678)).f32[0]);
  v680 = (int32x4_t)vnegq_f32(v679);
  v681 = (int8x16_t)vtrn2q_s32((int32x4_t)v679, vtrn1q_s32((int32x4_t)v679, v680));
  v682 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v679, (int8x16_t)v680, 8uLL), v606, 1), (float32x4_t)vextq_s8(v681, v681, 8uLL), v606.f32[0]);
  v683 = (float32x4_t)vrev64q_s32((int32x4_t)v679);
  v683.i32[0] = v680.i32[1];
  v683.i32[3] = v680.i32[2];
  v684 = vaddq_f32(vmlaq_n_f32(vmulq_lane_f32(v679, v608, 1), v683, v608.f32[0]), v682);
  v685 = vmulq_f32(v684, v684);
  v686 = atan2f(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v685, 2), vaddq_f32(v685, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v685.f32, 1))).f32[0]), v684.f32[3]);
  if ((float)(v686 + v686) >= 1.5708)
  {
    v690 = vmulq_f32(v804, v804);
    LODWORD(v805) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v690, 2), vaddq_f32(v690, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v690.f32, 1))).u32[0];
    v691 = atan2f(sqrtf(v805), *((float *)&v774 + 1));
    v692.i64[0] = v772;
    v692.i64[1] = v774;
    v693 = vrsqrte_f32((float32x2_t)LODWORD(v805));
    v694 = vmul_f32(v693, vrsqrts_f32((float32x2_t)LODWORD(v805), vmul_f32(v693, v693)));
    v806 = vmulq_n_f32(v692, vmul_f32(v694, vrsqrts_f32((float32x2_t)LODWORD(v805), vmul_f32(v694, v694))).f32[0]);
    v695 = __sincosf_stret((float)((float)(v691 + v691) + -3.1416) * 0.5);
    v689 = vmulq_n_f32(v806, v695.__sinval);
    v689.i32[3] = LODWORD(v695.__cosval);
    v688 = v778;
    v687 = v782;
  }
  else
  {
    v688 = v778;
    v687 = v782;
    v689 = v804;
  }
  v817 = vmlaq_n_f32(v816, v787, v687);
  v807 = v689;
  v812 = vmlaq_n_f32(v811, v6, v688);
  v696 = (int8x16_t)vmulq_f32(v800, v689);
  v697 = 1.0;
  v698 = 1.0 - v797;
  if (vaddv_f32(vadd_f32(*(float32x2_t *)v696.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v696, v696, 8uLL))) >= 0.0)
  {
    v720 = vsubq_f32(v689, v800);
    v721 = (int8x16_t)vmulq_f32(v720, v720);
    v722 = vaddq_f32(v800, v689);
    v723 = (int8x16_t)vmulq_f32(v722, v722);
    v724 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v721.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v721, v721, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v723.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v723, v723, 8uLL)))));
    v725 = v724 + v724;
    _ZF = (float)(v724 + v724) == 0.0;
    v726 = 1.0;
    if (!_ZF)
      v726 = sinf(v725) / v725;
    v727 = v726;
    v728 = vrecpe_f32((float32x2_t)LODWORD(v726));
    v729 = vmul_f32(v728, vrecps_f32((float32x2_t)LODWORD(v727), v728));
    LODWORD(v730) = vmul_f32(v729, vrecps_f32((float32x2_t)LODWORD(v727), v729)).u32[0];
    if ((float)(v698 * v725) != 0.0)
    {
      v795 = v730;
      v729.f32[0] = sinf(v698 * v725);
      v730 = v795;
      v697 = v729.f32[0] / (float)(v698 * v725);
    }
    v729.f32[0] = v698 * (float)(v730 * v697);
    v731 = (float32x4_t)vdupq_lane_s32((int32x2_t)v729, 0);
    v732 = v797 * v725;
    v733 = 1.0;
    if (v732 != 0.0)
    {
      v790 = v731;
      v796 = v730;
      v734 = sinf(v732);
      v731 = v790;
      v730 = v796;
      v733 = v734 / v732;
    }
    _Q0 = vmlaq_f32(vmulq_n_f32(v800, v797 * (float)(v730 * v733)), v807, v731);
  }
  else
  {
    v699 = vaddq_f32(v800, v689);
    v700 = (int8x16_t)vmulq_f32(v699, v699);
    v701 = vsubq_f32(v689, v800);
    v702 = (int8x16_t)vmulq_f32(v701, v701);
    v703 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v700.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v700, v700, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v702.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v702, v702, 8uLL)))));
    v706 = v703 + v703;
    _ZF = (float)(v703 + v703) == 0.0;
    v707 = 1.0;
    if (!_ZF)
      v707 = sinf(v706) / v706;
    v708 = v707;
    v709 = vrecpe_f32((float32x2_t)LODWORD(v707));
    v710 = vmul_f32(v709, vrecps_f32((float32x2_t)LODWORD(v708), v709));
    LODWORD(v711) = vmul_f32(v710, vrecps_f32((float32x2_t)LODWORD(v708), v710)).u32[0];
    if ((float)(v698 * v706) != 0.0)
    {
      v793 = v711;
      v712 = sinf(v698 * v706);
      v711 = v793;
      v697 = v712 / (float)(v698 * v706);
    }
    v713.i32[1] = v800.i32[1];
    v714 = vnegq_f32(v800);
    *(float *)v713.i32 = v698 * (float)(v711 * v697);
    v715 = (float32x4_t)vdupq_lane_s32(v713, 0);
    v716 = v797 * v706;
    v717 = 1.0;
    if (v716 != 0.0)
    {
      v794 = v711;
      v801 = v714;
      v789 = v715;
      v718 = sinf(v716);
      v715 = v789;
      v711 = v794;
      v714 = v801;
      v717 = v718 / v716;
    }
    _Q0 = vmlaq_f32(vmulq_n_f32(v714, v797 * (float)(v711 * v717)), v807, v715);
  }
  v735 = (int8x16_t)vmulq_f32(_Q0, _Q0);
  v736 = vadd_f32(*(float32x2_t *)v735.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v735, v735, 8uLL));
  if (vaddv_f32(v736) == 0.0)
  {
    _Q1 = (float32x4_t)xmmword_2393F5320;
  }
  else
  {
    v738 = vadd_f32(v736, (float32x2_t)vdup_lane_s32((int32x2_t)v736, 1)).u32[0];
    v739 = vrsqrte_f32((float32x2_t)v738);
    v740 = vmul_f32(v739, vrsqrts_f32((float32x2_t)v738, vmul_f32(v739, v739)));
    _Q1 = vmulq_n_f32(_Q0, vmul_f32(v740, vrsqrts_f32((float32x2_t)v738, vmul_f32(v740, v740))).f32[0]);
  }
  v741 = v817;
  _S2 = _Q1.i32[1];
  _S3 = _Q1.i32[2];
  __asm { FMLS            S0, S3, V1.S[2] }
  _S5 = _Q1.i32[3];
  __asm { FMLA            S0, S5, V1.S[3] }
  v745 = vmlas_n_f32(vmuls_lane_f32(_Q1.f32[2], _Q1, 3), _Q1.f32[1], _Q1.f32[0]);
  v704.f32[0] = vmuls_lane_f32(_Q1.f32[1], _Q1, 3);
  v746 = vmlas_n_f32(-(float)(_Q1.f32[1] * _Q1.f32[3]), _Q1.f32[2], _Q1.f32[0]);
  v705.f32[0] = vmlas_n_f32(-(float)(_Q1.f32[2] * _Q1.f32[3]), _Q1.f32[1], _Q1.f32[0]);
  v705.f32[0] = v705.f32[0] + v705.f32[0];
  __asm
  {
    FMLA            S4, S2, V1.S[1]
    FMLA            S4, S5, V1.S[3]
    FMLS            S4, S1, V1.S[0]
    FMLA            S18, S3, V1.S[1]
  }
  v751 = (int32x2_t)vextq_s8((int8x16_t)_Q1, (int8x16_t)_Q1, 8uLL).u64[0];
  v704.f32[1] = -(float)(_Q1.f32[0] * _Q1.f32[3]);
  *(float32x2_t *)v704.f32 = vmla_f32(*(float32x2_t *)v704.f32, (float32x2_t)vzip1_s32(*(int32x2_t *)_Q1.f32, v751), (float32x2_t)__PAIR64__(_Q1.u32[1], v751.u32[0]));
  *(float32x2_t *)v704.f32 = vadd_f32(*(float32x2_t *)v704.f32, *(float32x2_t *)v704.f32);
  __asm
  {
    FMLA            S5, S3, V1.S[2]
    FMLS            S5, S1, V1.S[0]
    FMLS            S5, S2, V1.S[1]
  }
  v704.i32[2] = _S5;
  _Q0.f32[1] = v745 + v745;
  _Q0.f32[2] = v746 + v746;
  v705.i32[1] = _S4;
  v705.f32[2] = _S18 + _S18;
  v755 = vmulq_n_f32(_Q0, v812.f32[0]);
  v755.i32[3] = 0;
  v756 = vmulq_lane_f32(v705, *(float32x2_t *)v812.f32, 1);
  v756.i32[3] = 0;
  v757 = vmulq_laneq_f32(v704, v812, 2);
  v757.i32[3] = 0;
  v741.i32[3] = 1.0;
  *(float32x4_t *)(v784 + 112) = v755;
  *(float32x4_t *)(v784 + 128) = v756;
  *(float32x4_t *)(v784 + 144) = v757;
  *(float32x4_t *)(v784 + 160) = v741;
  *(_BYTE *)v784 = 1;
  v377 = sub_2393BBC44(v784 + 112);
  if (v350)
LABEL_589:
    operator delete(v350);
LABEL_590:
  if (v377)
  {
    v758 = (_OWORD *)v767[1];
    v759 = v758[8];
    v760 = v758[9];
    v761 = v758[10];
    *a5 = v758[7];
    a5[1] = v759;
    a5[2] = v760;
    a5[3] = v761;
    kdebug_trace();
    return 1;
  }
  return 0;
}

double sub_2393DD788(uint64_t a1, uint64_t a2)
{
  float *v3;
  float *v4;
  double result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  int v9;

  v3 = *(float **)(a2 + 8);
  if (v3 == (float *)a1)
  {
    v9 = 0;
    v7 = 0u;
    v8 = 0u;
    sub_2393DD788(&v7);
    result = *(double *)&v7;
    v6 = v8;
    *(_OWORD *)a1 = v7;
    *(_OWORD *)(a1 + 16) = v6;
    *(_DWORD *)(a1 + 32) = v9;
  }
  else
  {
    v4 = **(float ***)a2;
    *(float *)a1 = (float)((float)((float)(v4[1] * v3[1]) + (float)(*v4 * *v3)) + 0.0) + (float)(v4[2] * v3[2]);
    *(float *)(a1 + 4) = (float)((float)((float)(v4[4] * v3[1]) + (float)(v4[3] * *v3)) + 0.0) + (float)(v4[5] * v3[2]);
    *(float *)(a1 + 8) = (float)((float)((float)(v4[7] * v3[1]) + (float)(v4[6] * *v3)) + 0.0) + (float)(v4[8] * v3[2]);
    *(float *)(a1 + 12) = (float)((float)((float)(v4[1] * v3[4]) + (float)(*v4 * v3[3])) + 0.0) + (float)(v4[2] * v3[5]);
    *(float *)(a1 + 16) = (float)((float)((float)(v4[4] * v3[4]) + (float)(v4[3] * v3[3])) + 0.0)
                        + (float)(v4[5] * v3[5]);
    *(float *)(a1 + 20) = (float)((float)((float)(v4[7] * v3[4]) + (float)(v4[6] * v3[3])) + 0.0)
                        + (float)(v4[8] * v3[5]);
    *(float *)(a1 + 24) = (float)((float)((float)(v4[1] * v3[7]) + (float)(*v4 * v3[6])) + 0.0) + (float)(v4[2] * v3[8]);
    *(float *)(a1 + 28) = (float)((float)((float)(v4[4] * v3[7]) + (float)(v4[3] * v3[6])) + 0.0)
                        + (float)(v4[5] * v3[8]);
    *(float *)&result = (float)((float)((float)(v4[7] * v3[7]) + (float)(v4[6] * v3[6])) + 0.0) + (float)(v4[8] * v3[8]);
    *(_DWORD *)(a1 + 32) = LODWORD(result);
  }
  return result;
}

double sub_2393DD930(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  float *v4;
  unsigned int *v5;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  float *v9;
  uint64_t v10;
  int v11;
  float *v12;
  uint64_t v13;
  float *v14;
  uint64_t v15;
  float *v16;
  uint64_t v17;
  double result;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  int v22;

  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(float **)v3;
  if (*(_QWORD *)v3 - 4 * *(unsigned int *)(v3 + 12) == a1)
  {
    v22 = 0;
    v20 = 0u;
    v21 = 0u;
    sub_2393DD930(&v20);
    result = *(double *)&v20;
    v19 = v21;
    *(_OWORD *)a1 = v20;
    *(_OWORD *)(a1 + 16) = v19;
    *(_DWORD *)(a1 + 32) = v22;
  }
  else
  {
    v5 = **(unsigned int ***)a2;
    v6 = *(unsigned int *)(v3 + 8);
    v7 = *(float **)v5;
    v8 = v5[2];
    *(float *)a1 = (float)((float)((float)(*(float *)(*(_QWORD *)v5 + 4) * v4[1]) + (float)(**(float **)v5 * *v4))
                         + 0.0)
                 + (float)(*(float *)(*(_QWORD *)v5 + 8) * v4[2]);
    v9 = &v7[v8];
    v10 = (v8 + 2);
    *(float *)(a1 + 4) = (float)((float)((float)(v9[1] * v4[1]) + (float)(*v9 * *v4)) + 0.0) + (float)(v7[v10] * v4[2]);
    v11 = 2 * v8;
    v12 = &v7[(2 * v8)];
    v13 = (v11 + 2);
    *(float *)(a1 + 8) = (float)((float)((float)(v12[1] * v4[1]) + (float)(*v12 * *v4)) + 0.0)
                       + (float)(v7[v13] * v4[2]);
    v14 = &v4[v6];
    v15 = (v6 + 2);
    *(float *)(a1 + 12) = (float)((float)((float)(v7[1] * v14[1]) + (float)(*v7 * *v14)) + 0.0)
                        + (float)(v7[2] * v4[v15]);
    *(float *)(a1 + 16) = (float)((float)((float)(v9[1] * v14[1]) + (float)(*v9 * *v14)) + 0.0)
                        + (float)(v7[v10] * v4[v15]);
    *(float *)(a1 + 20) = (float)((float)((float)(v12[1] * v14[1]) + (float)(*v12 * *v14)) + 0.0)
                        + (float)(v7[v13] * v4[v15]);
    LODWORD(v6) = 2 * v6;
    v16 = &v4[v6];
    v17 = (v6 + 2);
    *(float *)(a1 + 24) = (float)((float)((float)(v7[1] * v16[1]) + (float)(*v7 * *v16)) + 0.0)
                        + (float)(v7[2] * v4[v17]);
    *(float *)(a1 + 28) = (float)((float)((float)(v9[1] * v16[1]) + (float)(*v9 * *v16)) + 0.0)
                        + (float)(v7[v10] * v4[v17]);
    *(float *)&result = (float)((float)((float)(v12[1] * v16[1]) + (float)(*v12 * *v16)) + 0.0)
                      + (float)(v7[v13] * v4[v17]);
    *(_DWORD *)(a1 + 32) = LODWORD(result);
  }
  return result;
}

__n128 sub_2393DDB28(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void sub_2393DDB4C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void sub_2393DDB64(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float32x4_t v9;
  int8x16_t v10;

  v2 = 500 * a2;
  v3 = 500 * a2 + 500;
  if (v3 >= **(unsigned int **)(a1 + 40))
    v3 = **(unsigned int **)(a1 + 40);
  v4 = v3 - v2;
  if (v3 > v2)
  {
    v6 = **(_QWORD **)(a1 + 48);
    v7 = 2000 * a2;
    v8 = 24000 * a2;
    do
    {
      v9 = *(float32x4_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + v8);
      v9.i32[3] = -1.0;
      v10 = (int8x16_t)vmulq_f32(*(float32x4_t *)(*(_QWORD *)(a1 + 56) + 112), v9);
      *(float *)(v6 + 4 * v7 + 12) = vaddv_f32(vadd_f32(*(float32x2_t *)v10.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL)));
      v6 = **(_QWORD **)(a1 + 48);
      *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) + v7) = 1.0
                                                                                   / (float)(expf((float)(0.02 - *(float *)(v6 + 4 * v7 + 12))* 500.0)+ 1.0);
      v7 += 4;
      v8 += 48;
      --v4;
    }
    while (v4);
  }
}

void sub_2393DDC70(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned int *v5;
  float32x4_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  float32x2_t v11;
  unsigned int *v12;
  float32x2_t v13;
  float v14;
  unsigned int *v15;
  float32x2_t v16;
  float32x2_t v17;
  unsigned int v18;
  uint64_t v19;
  float32x2_t v30;
  float32x2_t v31;
  float32x4_t v33;
  float32_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  unsigned int *v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  __int32 v42;
  unsigned int *v43;
  unsigned int *v44;
  uint64_t v45;

  v43 = 0;
  v44 = 0;
  v45 = 0;
  v2 = 500 * a2;
  if (500 * a2 + 500 >= (unint64_t)**(unsigned int **)(a1 + 40))
    v3 = **(unsigned int **)(a1 + 40);
  else
    v3 = 500 * a2 + 500;
  if (v2 < v3)
  {
    v5 = 0;
    v6.i32[3] = 0;
    do
    {
      v8 = **(_QWORD **)(a1 + 48);
      v9 = *(_OWORD *)(v8 + 16 * v2);
      if (*((float *)&v9 + 3) < -0.025)
      {
        *(_QWORD *)&v7 = 0;
        DWORD2(v7) = 0;
        HIDWORD(v7) = HIDWORD(v9);
        *(_OWORD *)(v8 + 16 * v2) = v7;
      }
      else
      {
        v42 = v6.i32[3];
        sub_2393CFA68(*(float32x4_t **)(a1 + 56), (float32x4_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48 * v2), (uint64_t)&v43);
        v5 = v43;
        v12 = v44;
        if (v43 == v44)
        {
          v13 = 0;
          _S0 = 0.0;
          v14 = 0.0;
          v16 = 0;
          _Q6.i32[0] = 0;
          v17 = 0;
        }
        else
        {
          v13 = 0;
          v14 = 0.0;
          v15 = v43;
          v16 = 0;
          v17 = 0;
          do
          {
            v18 = *v15++;
            v19 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48 * v18;
            _Q6 = *(float32x4_t *)(v19 + 16);
            _S7 = HIDWORD(*(_QWORD *)(v19 + 16));
            v16 = vmla_n_f32(v16, *(float32x2_t *)_Q6.f32, _Q6.f32[0]);
            _S16 = COERCE_FLOAT(*(_QWORD *)(v19 + 24));
            __asm { FMLA            S1, S7, V6.S[1] }
            v17 = vmla_laneq_f32(v17, *(float32x2_t *)_Q6.f32, _Q6, 2);
            __asm { FMLA            S0, S16, V6.S[2] }
            v13 = vadd_f32(*(float32x2_t *)_Q6.f32, v13);
            v14 = _S16 + v14;
          }
          while (v15 != v44);
          if ((char *)v44 - (char *)v43 < 0)
            abort();
          _Q6.f32[0] = (float)((unint64_t)((char *)v44 - (char *)v43) >> 2);
        }
        v11.f32[0] = v14 / _Q6.f32[0];
        _D4 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)_Q6.f32, 0);
        _D16 = vdiv_f32(v13, _D4);
        v30 = vdiv_f32(v17, _D4);
        v31 = vmls_lane_f32(vdiv_f32(v16, _D4), _D16, _D16, 0);
        _D4.i32[0] = _D16.i32[1];
        *(float32x2_t *)v6.f32 = _D16;
        v6.i64[1] = __PAIR64__(v42, v11.u32[0]);
        __asm { FMLS            S17, S4, V16.S[1] }
        *(float32x2_t *)v33.f32 = v31;
        v33.i64[1] = __PAIR64__(v41, vmls_lane_f32(v30, _D16, v11, 0).u32[0]);
        v34 = (float)(_S0 / _Q6.f32[0]) - (float)(v11.f32[0] * v11.f32[0]);
        v35 = vmulq_f32(v6, *(float32x4_t *)(*(_QWORD *)(a1 + 64) + 32));
        *(float *)(**(_QWORD **)(a1 + 48) + 16 * v2) = 1.0
                                                     - vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v35, 2), vaddq_f32(v35, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v35.f32, 1))).f32[0];
        v36 = v33;
        v36.i32[1] = _S17;
        v36.f32[2] = v34;
        v37 = vmulq_f32(v36, v36);
        *(float *)(**(_QWORD **)(a1 + 48) + 16 * v2 + 4) = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v37, 2), vaddq_f32(v37, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v37.f32, 1))).f32[0]);
        *(_DWORD *)(**(_QWORD **)(a1 + 48) + 16 * v2 + 8) = 0;
        if (v5 != v12)
        {
          v38 = v5;
          do
          {
            v39 = *v38++;
            v40 = **(_QWORD **)(a1 + 48) + 16 * v2;
            *(float *)(v40 + 8) = *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) + 4 * v39)
                                + *(float *)(v40 + 8);
          }
          while (v38 != v12);
        }
      }
      ++v2;
    }
    while (v2 != v3);
    if (v5)
      operator delete(v5);
  }
}

float32x4_t sub_2393DDF2C(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  float32x4_t result;
  float32x4_t v6;

  v2 = 500 * a2;
  v3 = 500 * a2 + 500;
  if (v3 >= **(unsigned int **)(a1 + 64))
    v3 = **(unsigned int **)(a1 + 64);
  if (v2 < v3)
  {
    do
    {
      v4 = **(_QWORD **)(a1 + 72);
      result = *(float32x4_t *)(v4 + 16 * v2);
      v6 = vdivq_f32(vsubq_f32(result, *(float32x4_t *)(a1 + 32)), vsubq_f32(*(float32x4_t *)(a1 + 48), *(float32x4_t *)(a1 + 32)));
      v6.i32[3] = result.i32[3];
      *(float32x4_t *)(v4 + 16 * v2++) = v6;
    }
    while (v3 != v2);
  }
  return result;
}

void sub_2393DDF88(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  float *v6;
  float32x4_t *v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float32x4_t v13;
  float32x4_t v14;

  v2 = 500 * a2;
  v3 = 500 * a2 + 500;
  v4 = **(_QWORD **)(a1 + 32);
  if ((*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) - v4) >> 4 < v3)
    v3 = (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) - v4) >> 4;
  v5 = v3 - v2;
  if (v3 > v2)
  {
    v6 = (float *)(**(_QWORD **)(a1 + 40) + 2000 * a2);
    v7 = (float32x4_t *)(v4 + 8000 * a2);
    do
    {
      v8 = v7->f32[3];
      v9 = expf((float)(0.035 - v8) * 500.0) + 1.0;
      v10 = (float)(v8 + 0.025) * 500.0;
      v11 = 1.0 / v9;
      v12 = expf(v10);
      v13 = *v7++;
      v14 = vmulq_f32(v13, (float32x4_t)xmmword_2393F5570);
      *v6++ = v11
            + (float)((float)(1.0 - (float)((float)(1.0 / (float)(v12 + 1.0)) + v11))
                    * vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 2), vaddq_f32(v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.f32, 1))).f32[0]);
      --v5;
    }
    while (v5);
  }
}

void sub_2393DE0A0(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  void *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  BOOL v39;
  int64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  int64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  __int128 *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  unint64_t v78;
  uint64_t v79;
  __int128 *v80;
  _OWORD *v81;
  uint64_t v82;
  __int128 v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  __int128 *v87;
  _OWORD *v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  int64_t v96;
  unint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  __int128 *v102;
  _OWORD *v103;
  uint64_t v104;
  __int128 v105;
  uint64_t v106;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x55;
  v4 = v2 - 85;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_84:
      *(_QWORD *)v5 = v8;
      goto LABEL_85;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v33 = (v5 - v9) >> 2;
      if (v5 == v9)
        v33 = 1;
      if (!(v33 >> 61))
      {
        v34 = v33 >> 2;
        v35 = 8 * v33;
        v36 = (char *)operator new(8 * v33);
        v37 = &v36[8 * v34];
        v38 = &v36[v35];
        v40 = v5 - v7;
        v39 = v5 == v7;
        v5 = v37;
        if (!v39)
        {
          v5 = &v37[v40 & 0xFFFFFFFFFFFFFFF8];
          v41 = v40 - 8;
          if ((unint64_t)(v40 - 8) >= 0x38)
          {
            v84 = &v36[8 * v34];
            v42 = v84;
            if ((unint64_t)(v84 - v7) >= 0x20)
            {
              v85 = (v41 >> 3) + 1;
              v86 = 8 * (v85 & 0x3FFFFFFFFFFFFFFCLL);
              v42 = &v37[v86];
              v87 = (__int128 *)(v6 + 3);
              v88 = v84 + 16;
              v89 = v85 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v90 = *v87;
                *(v88 - 1) = *(v87 - 1);
                *v88 = v90;
                v87 += 2;
                v88 += 2;
                v89 -= 4;
              }
              while (v89);
              if (v85 == (v85 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_77;
              v7 += v86;
            }
          }
          else
          {
            v42 = &v36[8 * v34];
          }
          do
          {
            v91 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v42 = v91;
            v42 += 8;
          }
          while (v42 != v5);
        }
        goto LABEL_77;
      }
LABEL_101:
      sub_23938C4B8();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_84;
  }
  v18 = *(char **)(a1 + 16);
  v17 = *(char **)(a1 + 24);
  v20 = *(char **)a1;
  v19 = *(char **)(a1 + 8);
  v21 = v18 - v19;
  v22 = (v18 - v19) >> 3;
  v23 = (uint64_t)&v17[-*(_QWORD *)a1];
  if (v22 < (unint64_t)(v23 >> 3))
  {
    v24 = operator new(0xFF0uLL);
    v25 = v24;
    if (v17 != v18)
    {
      *(_QWORD *)v18 = v24;
LABEL_85:
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    if (v19 != v20)
    {
      v43 = v19;
      goto LABEL_83;
    }
    v69 = (v17 - v19) >> 2;
    if (v18 == v19)
      v69 = 1;
    if (v69 >> 61)
      goto LABEL_101;
    v70 = (v69 + 3) >> 2;
    v71 = 8 * v69;
    v72 = (char *)operator new(8 * v69);
    v43 = &v72[8 * v70];
    v73 = &v72[v71];
    v74 = v43;
    if (v18 != v19)
    {
      v74 = &v43[8 * v22];
      v75 = &v72[8 * v70];
      v76 = v19;
      if ((unint64_t)(v21 - 8) > 0x37)
      {
        v77 = &v72[8 * v70];
        v75 = v77;
        v76 = v19;
        if ((unint64_t)(v77 - v19) >= 0x20)
        {
          v78 = ((unint64_t)(v21 - 8) >> 3) + 1;
          v79 = 8 * (v78 & 0x3FFFFFFFFFFFFFFCLL);
          v75 = &v43[v79];
          v80 = (__int128 *)(v19 + 16);
          v81 = v77 + 16;
          v82 = v78 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v83 = *v80;
            *(v81 - 1) = *(v80 - 1);
            *v81 = v83;
            v80 += 2;
            v81 += 2;
            v82 -= 4;
          }
          while (v82);
          if (v78 == (v78 & 0x3FFFFFFFFFFFFFFCLL))
          {
            *(_QWORD *)a1 = v72;
            *(_QWORD *)(a1 + 8) = v43;
            *(_QWORD *)(a1 + 16) = v74;
            *(_QWORD *)(a1 + 24) = v73;
LABEL_82:
            operator delete(v19);
            v43 = *(char **)(a1 + 8);
LABEL_83:
            *((_QWORD *)v43 - 1) = v25;
            v7 = *(char **)(a1 + 8);
            v5 = *(char **)(a1 + 16);
            *(_QWORD *)(a1 + 8) = v7 - 8;
            v8 = *((_QWORD *)v7 - 1);
            *(_QWORD *)(a1 + 8) = v7;
            if (v5 != *(char **)(a1 + 24))
              goto LABEL_84;
            v9 = *(char **)a1;
            v10 = (uint64_t)&v7[-*(_QWORD *)a1];
            if ((unint64_t)v7 <= *(_QWORD *)a1)
            {
              v93 = (v5 - v9) >> 2;
              if (v5 == v9)
                v93 = 1;
              if (!(v93 >> 61))
              {
                v94 = v93 >> 2;
                v95 = 8 * v93;
                v36 = (char *)operator new(8 * v93);
                v37 = &v36[8 * v94];
                v38 = &v36[v95];
                v96 = v5 - v7;
                v39 = v5 == v7;
                v5 = v37;
                if (!v39)
                {
                  v5 = &v37[v96 & 0xFFFFFFFFFFFFFFF8];
                  v97 = v96 - 8;
                  if ((unint64_t)(v96 - 8) >= 0x38)
                  {
                    v99 = &v36[8 * v94];
                    v98 = v99;
                    if ((unint64_t)(v99 - v7) >= 0x20)
                    {
                      v100 = (v97 >> 3) + 1;
                      v101 = 8 * (v100 & 0x3FFFFFFFFFFFFFFCLL);
                      v98 = &v37[v101];
                      v102 = (__int128 *)(v7 + 16);
                      v103 = v99 + 16;
                      v104 = v100 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v105 = *v102;
                        *(v103 - 1) = *(v102 - 1);
                        *v103 = v105;
                        v102 += 2;
                        v103 += 2;
                        v104 -= 4;
                      }
                      while (v104);
                      if (v100 == (v100 & 0x3FFFFFFFFFFFFFFCLL))
                        goto LABEL_77;
                      v7 += v101;
                    }
                  }
                  else
                  {
                    v98 = &v36[8 * v94];
                  }
                  do
                  {
                    v106 = *(_QWORD *)v7;
                    v7 += 8;
                    *(_QWORD *)v98 = v106;
                    v98 += 8;
                  }
                  while (v98 != v5);
                }
LABEL_77:
                *(_QWORD *)a1 = v36;
                *(_QWORD *)(a1 + 8) = v37;
                *(_QWORD *)(a1 + 16) = v5;
                *(_QWORD *)(a1 + 24) = v38;
                if (v9)
                {
                  operator delete(v9);
                  v5 = *(char **)(a1 + 16);
                }
                goto LABEL_84;
              }
              goto LABEL_101;
            }
            goto LABEL_5;
          }
          v76 = &v19[v79];
        }
      }
      do
      {
        v92 = *(_QWORD *)v76;
        v76 += 8;
        *(_QWORD *)v75 = v92;
        v75 += 8;
      }
      while (v75 != v74);
    }
    *(_QWORD *)a1 = v72;
    *(_QWORD *)(a1 + 8) = v43;
    *(_QWORD *)(a1 + 16) = v74;
    *(_QWORD *)(a1 + 24) = v73;
    if (!v19)
      goto LABEL_83;
    goto LABEL_82;
  }
  v26 = v23 >> 2;
  if (v17 == v20)
    v27 = 1;
  else
    v27 = v26;
  if (v27 >> 61)
    goto LABEL_101;
  v28 = (char *)operator new(8 * v27);
  v29 = &v28[8 * v22];
  v30 = &v28[8 * v27];
  v31 = operator new(0xFF0uLL);
  if (v22 == v27)
  {
    if (v21 < 1)
    {
      v44 = v21 >> 2;
      if (v18 == v19)
        v44 = 1;
      if (v44 >> 61)
        goto LABEL_101;
      v45 = 8 * v44;
      v29 = (char *)operator new(8 * v44);
      v30 = &v29[v45];
      operator delete(v28);
      v19 = *(char **)(a1 + 8);
      v18 = *(char **)(a1 + 16);
      v28 = v29;
    }
    else
    {
      v32 = v22 + 2;
      if (v22 >= -1)
        v32 = v22 + 1;
      v29 -= 8 * (v32 >> 1);
    }
  }
  *(_QWORD *)v29 = v31;
  v46 = v29 + 8;
  if (v18 != v19)
  {
    while (v29 != v28)
    {
      v50 = v29;
      v48 = v46;
LABEL_40:
      v51 = *((_QWORD *)v18 - 1);
      v18 -= 8;
      *((_QWORD *)v50 - 1) = v51;
      v47 = v50 - 8;
      v46 = v48;
      v29 = v47;
      if (v18 == *(char **)(a1 + 8))
        goto LABEL_37;
    }
    if (v46 < v30)
    {
      v52 = (v30 - v46) >> 3;
      if (v52 >= -1)
        v53 = v52 + 1;
      else
        v53 = v52 + 2;
      v48 = &v46[8 * (v53 >> 1)];
      v50 = &v29[8 * (v53 >> 1)];
      if (v46 == v29)
      {
        v28 = v46;
      }
      else
      {
        memmove(&v29[8 * (v53 >> 1)], v29, v46 - v29);
        v28 = v29;
      }
      goto LABEL_40;
    }
    v54 = (v30 - v29) >> 2;
    if (v30 == v29)
      v54 = 1;
    if (v54 >> 61)
      goto LABEL_101;
    v55 = (v54 + 3) >> 2;
    v56 = 8 * v54;
    v57 = (char *)operator new(8 * v54);
    v28 = v57;
    v50 = &v57[8 * v55];
    v48 = v50;
    v58 = v46 - v29;
    if (v46 != v29)
    {
      v48 = &v50[v58 & 0xFFFFFFFFFFFFFFF8];
      v59 = v58 - 8;
      v60 = &v57[8 * v55];
      v61 = v29;
      if (v59 >= 0x38)
      {
        v60 = &v57[8 * v55];
        v61 = v29;
        if ((unint64_t)(v60 - v29) >= 0x20)
        {
          v62 = (v59 >> 3) + 1;
          v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
          v60 = &v50[v63];
          v64 = (__int128 *)(v29 + 16);
          v65 = &v57[8 * v55 + 16];
          v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v67 = *v64;
            *((_OWORD *)v65 - 1) = *(v64 - 1);
            *(_OWORD *)v65 = v67;
            v64 += 2;
            v65 += 32;
            v66 -= 4;
          }
          while (v66);
          if (v62 == (v62 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_59;
          v61 = &v29[v63];
        }
      }
      do
      {
        v68 = *(_QWORD *)v61;
        v61 += 8;
        *(_QWORD *)v60 = v68;
        v60 += 8;
      }
      while (v60 != v48);
    }
LABEL_59:
    v30 = &v57[v56];
    operator delete(v29);
    goto LABEL_40;
  }
  v47 = v29;
  v48 = v29 + 8;
LABEL_37:
  v49 = *(char **)a1;
  *(_QWORD *)a1 = v28;
  *(_QWORD *)(a1 + 8) = v47;
  *(_QWORD *)(a1 + 16) = v48;
  *(_QWORD *)(a1 + 24) = v30;
  if (v49)
    operator delete(v49);
}

os_log_t sub_2393DE6A8()
{
  os_log_t result;

  result = os_log_create("com.apple.CoreOCModules", "General");
  qword_256930498 = (uint64_t)result;
  return result;
}

uint64_t sub_2393DE6D4(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  unsigned __int8 v10;
  int v12;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v5;
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  v6 = a2[4];
  v7 = a2[5];
  v8 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v8;
  v9 = 0uLL;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  v10 = atomic_load((unsigned __int8 *)&qword_256930538);
  if ((v10 & 1) == 0)
  {
    v12 = __cxa_guard_acquire(&qword_256930538);
    v9 = 0uLL;
    if (v12)
    {
      qword_256930530 = sub_2393F2DD8();
      __cxa_atexit((void (*)(void *))sub_2393F2FA4, &qword_256930530, &dword_239388000);
      __cxa_guard_release(&qword_256930538);
      v9 = 0uLL;
    }
  }
  *(_QWORD *)(a1 + 192) = qword_256930530;
  *(_OWORD *)(a1 + 200) = v9;
  *(_OWORD *)(a1 + 216) = v9;
  *(_OWORD *)(a1 + 232) = v9;
  sub_2393BB37C(a1 + 248);
  *(_WORD *)(a1 + 480) = 0;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = xmmword_2393F53B0;
  *(_OWORD *)(a1 + 552) = xmmword_2393F53C0;
  *(_OWORD *)(a1 + 568) = xmmword_2393F53D0;
  *(_OWORD *)(a1 + 584) = xmmword_2393F53E0;
  *(_QWORD *)(a1 + 600) = 0;
  *(_DWORD *)(a1 + 608) = 0x40000000;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_DWORD *)(a1 + 680) = 3;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_QWORD *)(a1 + 720) = 10;
  *(_DWORD *)(a1 + 728) = 1065353216;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_QWORD *)(a1 + 784) = 0;
  return a1;
}

void sub_2393DE830(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void *v4;
  void *v5;

  __cxa_guard_abort(&qword_256930538);
  v4 = (void *)v1[19];
  if (v4)
  {
    v1[20] = v4;
    operator delete(v4);
    v5 = *v2;
    if (!*v2)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else
  {
    v5 = *v2;
    if (!*v2)
      goto LABEL_3;
  }
  v1[17] = v5;
  operator delete(v5);
  _Unwind_Resume(a1);
}

uint64_t sub_2393DE8B0(int *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  float v6;
  float v7;
  int v8;
  BOOL v10;
  uint64_t result;
  float v13;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  id v21;
  void *v22;
  uint64_t v23;
  id v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  void *v33;
  uint64_t v34;
  id v35;
  const char *v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  void *v40;
  uint64_t v41;
  id v42;
  const char *v43;
  uint64_t v44;
  void *v45;
  const char *v46;
  void *v47;
  uint64_t v48;
  id v49;
  const char *v50;
  uint64_t v51;
  void *v52;
  const char *v53;
  void *v54;
  uint64_t v55;
  id v56;
  const char *v57;
  uint64_t v58;
  void *v59;
  const char *v60;
  void *v61;
  uint64_t v62;
  id v63;
  const char *v64;
  uint64_t v65;
  void *v66;
  const char *v67;
  void *v68;
  uint64_t v69;
  id v70;
  const char *v71;
  uint64_t v72;
  void *v73;
  const char *v74;
  void *v75;
  uint64_t v76;
  id v77;
  const char *v78;
  uint64_t v79;
  void *v80;
  const char *v81;
  void *v82;
  uint64_t v83;
  id v84;
  const char *v85;
  uint64_t v86;
  void *v87;
  const char *v88;
  void *v89;
  uint64_t v90;
  id v91;
  const char *v92;
  uint64_t v93;
  void *v94;
  const char *v95;
  void *v96;
  uint64_t v97;
  const char *v98;
  void *v99;
  const char *v100;
  void *v101;
  uint64_t v102;
  id v103;
  const char *v104;
  uint64_t v105;
  void *v106;
  const char *v107;
  void *v108;
  uint64_t v109;
  id v110;
  const char *v111;
  uint64_t v112;
  void *v113;
  const char *v114;
  void *v115;
  uint64_t v116;
  id v117;
  const char *v118;
  uint64_t v119;
  void *v120;
  const char *v121;
  void *v122;
  uint64_t v123;
  id v124;
  const char *v125;
  uint64_t v126;
  void *v127;
  const char *v128;
  void *v129;
  uint64_t v130;
  id v131;
  const char *v132;
  uint64_t v133;
  void *v134;
  const char *v135;
  void *v136;
  uint64_t v137;
  id v138;
  const char *v139;
  uint64_t v140;
  void *v141;
  const char *v142;
  void *v143;
  const char *v144;
  unsigned int *v145;

  v4 = a1[5];
  if (a1[4] >= v4)
    return 0;
  v6 = *((float *)a1 + 7);
  if (v6 <= 0.0)
    return 0;
  v7 = *((float *)a1 + 8);
  if (v6 >= v7)
    return 0;
  *((_QWORD *)a1 + 22) = a2;
  *((_QWORD *)a1 + 23) = a3;
  if (!*((_QWORD *)a1 + 24))
    return 0;
  v8 = *((unsigned __int8 *)a1 + 480);
  v10 = v6 <= 0.0 || a3 == 0 || a2 == 0;
  result = 0;
  if (!v10 && v8 == 0)
  {
    v13 = *((float *)a1 + 31);
    if (v13 <= 1.0 && v6 < v7 && v13 >= 0.0)
    {
      result = 0;
      v15 = *((float *)a1 + 134);
      if (v15 >= 0.0 && v15 <= 1.0)
      {
        v16 = *((float *)a1 + 135);
        if (v16 <= 0.0)
          return 0;
        v17 = *((float *)a1 + 136);
        if ((float)(v16 + 0.1) > v17)
          return 0;
        v18 = *((float *)a1 + 137);
        if (v16 >= v18 || v18 > (float)((float)(v16 + v17) * 0.5) || *((float *)a1 + 138) < 1.1)
          return 0;
        result = 0;
        if (*((float *)a1 + 139) >= 0.0)
        {
          v19 = *((float *)a1 + 140);
          if (v19 >= 0.0 && v19 <= 1.0)
          {
            v145 = (unsigned int *)(a1 + 48);
            if (*((float *)a1 + 141) <= 0.0)
              return 0;
            v20 = *(float *)a1;
            *((_QWORD *)a1 + 50) = a2;
            *((_QWORD *)a1 + 51) = a3;
            a1[97] = v4;
            *((float *)a1 + 98) = v6;
            *((float *)a1 + 99) = v7;
            *((float *)a1 + 124) = v13;
            *((float *)a1 + 96) = v20;
            result = sub_2393BB424((uint64_t)(a1 + 62), v4);
            if ((_DWORD)result)
            {
              if (*((_BYTE *)a1 + 284))
                v21 = *((id *)a1 + 34);
              else
                v21 = 0;
              v22 = (void *)*((_QWORD *)a1 + 38);
              *((_QWORD *)a1 + 38) = v21;

              if (!*((_QWORD *)a1 + 38))
                return 0;
              switch(a1[96])
              {
                case 0:
                  v23 = (a1[97] << 7);
                  v24 = **((id **)a1 + 24);
                  v26 = objc_msgSend_newBufferWithLength_options_(v24, v25, v23, 0);
                  goto LABEL_55;
                case 1:
                  v69 = 48 * a1[97];
                  v70 = **((id **)a1 + 24);
                  v72 = objc_msgSend_newBufferWithLength_options_(v70, v71, v69, 0);
                  v73 = (void *)*((_QWORD *)a1 + 39);
                  *((_QWORD *)a1 + 39) = v72;

                  v75 = (void *)*((_QWORD *)a1 + 39);
                  if (v75)
                  {
                    objc_msgSend_setLabel_(v75, v74, (uint64_t)CFSTR("SurfaceVoxelDataBuffer"));
                    v76 = (4 * a1[97]);
                    v77 = **((id **)a1 + 24);
                    v79 = objc_msgSend_newBufferWithLength_options_(v77, v78, v76, 0);
                    v80 = (void *)*((_QWORD *)a1 + 41);
                    *((_QWORD *)a1 + 41) = v79;

                    v82 = (void *)*((_QWORD *)a1 + 41);
                    if (v82)
                    {
                      objc_msgSend_setLabel_(v82, v81, (uint64_t)CFSTR("SurfaceVoxelVisibilityBuffer"));
                      v83 = 4 * a1[97];
                      v84 = **((id **)a1 + 24);
                      v86 = objc_msgSend_newBufferWithLength_options_(v84, v85, v83, 0);
                      v87 = (void *)*((_QWORD *)a1 + 75);
                      *((_QWORD *)a1 + 75) = v86;

                      v89 = (void *)*((_QWORD *)a1 + 75);
                      if (v89)
                        objc_msgSend_setLabel_(v89, v88, (uint64_t)CFSTR("SurfaceVoxelWCCountBuffer"));
                    }
                  }
                  goto LABEL_64;
                case 2:
                  v90 = 48 * a1[97];
                  v91 = **((id **)a1 + 24);
                  v93 = objc_msgSend_newBufferWithLength_options_(v91, v92, v90, 0);
                  v94 = (void *)*((_QWORD *)a1 + 39);
                  *((_QWORD *)a1 + 39) = v93;

                  v96 = (void *)*((_QWORD *)a1 + 39);
                  if (!v96)
                    goto LABEL_64;
                  objc_msgSend_setLabel_(v96, v95, (uint64_t)CFSTR("SurfaceVoxelDataBuffer"));
                  v97 = (a1[97] << 6);
                  v24 = **((id **)a1 + 24);
                  v26 = objc_msgSend_newBufferWithLength_options_(v24, v98, v97, 0);
LABEL_55:
                  v99 = (void *)*((_QWORD *)a1 + 41);
                  *((_QWORD *)a1 + 41) = v26;

                  v101 = (void *)*((_QWORD *)a1 + 41);
                  if (v101)
                    objc_msgSend_setLabel_(v101, v100, (uint64_t)CFSTR("SurfaceVoxelVisibilityBuffer"));
LABEL_64:
                  result = sub_2393C0134((uint64_t)v145);
                  if ((_DWORD)result)
                  {
                    result = sub_2393C03B8(v145, v144);
                    if ((_DWORD)result)
                    {
                      result = sub_2393C0BDC((uint64_t)v145);
                      if ((_DWORD)result)
                      {
                        result = sub_2393C0C8C((uint64_t)v145);
                        if ((_DWORD)result)
                        {
                          if (!*(_BYTE *)(*(_QWORD *)v145 + 24)
                            || (result = sub_2393C0F6C((uint64_t)v145), (_DWORD)result))
                          {
                            if (a1[96] != 1 || (result = sub_2393C1160((uint64_t)v145), (_DWORD)result))
                            {
                              result = 1;
                              *((_BYTE *)a1 + 480) = 1;
                            }
                          }
                        }
                      }
                    }
                  }
                  break;
                case 3:
                  v102 = 48 * a1[97];
                  v103 = **((id **)a1 + 24);
                  v105 = objc_msgSend_newBufferWithLength_options_(v103, v104, v102, 0);
                  v106 = (void *)*((_QWORD *)a1 + 39);
                  *((_QWORD *)a1 + 39) = v105;

                  v108 = (void *)*((_QWORD *)a1 + 39);
                  if (v108)
                  {
                    objc_msgSend_setLabel_(v108, v107, (uint64_t)CFSTR("SurfaceVoxelDataBuffer"));
                    v109 = (20 * a1[97]);
                    v110 = **((id **)a1 + 24);
                    v112 = objc_msgSend_newBufferWithLength_options_(v110, v111, v109, 0);
                    v113 = (void *)*((_QWORD *)a1 + 41);
                    *((_QWORD *)a1 + 41) = v112;

                    v115 = (void *)*((_QWORD *)a1 + 41);
                    if (v115)
                    {
                      objc_msgSend_setLabel_(v115, v114, (uint64_t)CFSTR("SurfaceVoxelVisibilityBuffer"));
                      v116 = a1[97];
                      v117 = **((id **)a1 + 24);
                      v119 = objc_msgSend_newBufferWithLength_options_(v117, v118, v116, 0);
                      v120 = (void *)*((_QWORD *)a1 + 77);
                      *((_QWORD *)a1 + 77) = v119;

                      v122 = (void *)*((_QWORD *)a1 + 77);
                      if (v122)
                      {
                        objc_msgSend_setLabel_(v122, v121, (uint64_t)CFSTR("SurfaceVoxelFisherCountBuffer"));
                        v123 = 4 * a1[97];
                        v124 = **((id **)a1 + 24);
                        v126 = objc_msgSend_newBufferWithLength_options_(v124, v125, v123, 0);
                        v127 = (void *)*((_QWORD *)a1 + 78);
                        *((_QWORD *)a1 + 78) = v126;

                        v129 = (void *)*((_QWORD *)a1 + 78);
                        if (v129)
                        {
                          objc_msgSend_setLabel_(v129, v128, (uint64_t)CFSTR("SurfaceVoxelFisherKappaBuffer"));
                          v130 = 4 * a1[97];
                          v131 = **((id **)a1 + 24);
                          v133 = objc_msgSend_newBufferWithLength_options_(v131, v132, v130, 0);
                          v134 = (void *)*((_QWORD *)a1 + 80);
                          *((_QWORD *)a1 + 80) = v133;

                          v136 = (void *)*((_QWORD *)a1 + 80);
                          if (v136)
                          {
                            objc_msgSend_setLabel_(v136, v135, (uint64_t)CFSTR("SurfaceVoxelFisherPastViewDirCountBuffer"));
                            v137 = 16 * a1[97];
                            v138 = **((id **)a1 + 24);
                            v140 = objc_msgSend_newBufferWithLength_options_(v138, v139, v137, 0);
                            v141 = (void *)*((_QWORD *)a1 + 79);
                            *((_QWORD *)a1 + 79) = v140;

                            v143 = (void *)*((_QWORD *)a1 + 79);
                            if (v143)
                              objc_msgSend_setLabel_(v143, v142, (uint64_t)CFSTR("SurfaceVoxelFisherPastViewDirBuffer"));
                          }
                        }
                      }
                    }
                  }
                  goto LABEL_64;
                case 4:
                  v27 = 48 * a1[97];
                  v28 = **((id **)a1 + 24);
                  v30 = objc_msgSend_newBufferWithLength_options_(v28, v29, v27, 0);
                  v31 = (void *)*((_QWORD *)a1 + 39);
                  *((_QWORD *)a1 + 39) = v30;

                  v33 = (void *)*((_QWORD *)a1 + 39);
                  if (v33)
                  {
                    objc_msgSend_setLabel_(v33, v32, (uint64_t)CFSTR("SurfaceVoxelDataBuffer"));
                    v34 = (a1[97] << 9);
                    v35 = **((id **)a1 + 24);
                    v37 = objc_msgSend_newBufferWithLength_options_(v35, v36, v34, 0);
                    v38 = (void *)*((_QWORD *)a1 + 41);
                    *((_QWORD *)a1 + 41) = v37;

                    v40 = (void *)*((_QWORD *)a1 + 41);
                    if (v40)
                    {
                      objc_msgSend_setLabel_(v40, v39, (uint64_t)CFSTR("SurfaceVoxelVisibilityBuffer"));
                      v41 = a1[97];
                      v42 = **((id **)a1 + 24);
                      v44 = objc_msgSend_newBufferWithLength_options_(v42, v43, v41, 0);
                      v45 = (void *)*((_QWORD *)a1 + 81);
                      *((_QWORD *)a1 + 81) = v44;

                      v47 = (void *)*((_QWORD *)a1 + 81);
                      if (v47)
                      {
                        objc_msgSend_setLabel_(v47, v46, (uint64_t)CFSTR("SurfaceVoxelGOMDCountBuffer"));
                        v48 = 4 * a1[97];
                        v49 = **((id **)a1 + 24);
                        v51 = objc_msgSend_newBufferWithLength_options_(v49, v50, v48, 0);
                        v52 = (void *)*((_QWORD *)a1 + 82);
                        *((_QWORD *)a1 + 82) = v51;

                        v54 = (void *)*((_QWORD *)a1 + 82);
                        if (v54)
                        {
                          objc_msgSend_setLabel_(v54, v53, (uint64_t)CFSTR("SurfaceVoxelGOMDCameraNumBuffer"));
                          v55 = (unint64_t)a1[97] << 9;
                          v56 = **((id **)a1 + 24);
                          v58 = objc_msgSend_newBufferWithLength_options_(v56, v57, v55, 0);
                          v59 = (void *)*((_QWORD *)a1 + 83);
                          *((_QWORD *)a1 + 83) = v58;

                          v61 = (void *)*((_QWORD *)a1 + 83);
                          if (v61)
                          {
                            objc_msgSend_setLabel_(v61, v60, (uint64_t)CFSTR("SurfaceVoxelGOMDGoodnessBuffer"));
                            v62 = (unint64_t)a1[97] << 11;
                            v63 = **((id **)a1 + 24);
                            v65 = objc_msgSend_newBufferWithLength_options_(v63, v64, v62, 0);
                            v66 = (void *)*((_QWORD *)a1 + 84);
                            *((_QWORD *)a1 + 84) = v65;

                            v68 = (void *)*((_QWORD *)a1 + 84);
                            if (v68)
                              objc_msgSend_setLabel_(v68, v67, (uint64_t)CFSTR("SurfaceVoxelGOMDViewDirBuffer"));
                          }
                        }
                      }
                    }
                  }
                  goto LABEL_64;
                default:
                  return 0;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_2393DEFEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2393DF040(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v5;
  uint64_t *v6;
  int32x2_t v7;
  uint64_t *v8;
  char *v9;
  uint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float v13;
  int *v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _BYTE *v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  size_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t *v46;
  _BYTE *v47;
  _BYTE *v48;
  int64_t v49;
  char *v50;
  char *v51;
  _QWORD block[7];
  void *__p;
  char *v57;
  char *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  __n128 (*v64)(__n128 *, __n128 *);
  void (*v65)(uint64_t);
  void *v66;
  void *v67;
  void *v68;
  char *v69;

  v5 = *(_QWORD *)(a3 + 80);
  if (v5)
  {
    v6 = (uint64_t *)operator new(8uLL);
    v8 = v6;
    *v6 = 0;
    v9 = (char *)(v6 + 1);
    if (v5 != 1)
    {
      v10 = 0;
      v12 = *(float32x4_t *)(a3 + 48);
      v11 = *(float32x4_t *)(a3 + 64);
      v13 = *(float *)a3;
      v14 = *(int **)(a3 + 88);
      v15 = *(float32x4_t *)(a3 + 16);
      v16 = *(float32x4_t *)(a3 + 32);
      v17 = vaddq_f32(v11, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v15, *(float *)a3 * (float)((float)*v14 + 0.5)), v16, *(float *)a3 * (float)((float)v14[1] + 0.5)), v12, *(float *)a3 * (float)((float)v14[2] + 0.5)));
      v18 = 1;
      v19 = (char *)(v6 + 1);
      v20 = (char *)(v6 + 1);
      v21 = (char *)v6;
      while (1)
      {
        v22 = vaddq_f32(v11, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v15, v13 * (float)((float)v14[12 * v18] + 0.5)), v16, v13 * (float)((float)v14[12 * v18 + 1] + 0.5)), v12, v13 * (float)((float)v14[12 * v18 + 2] + 0.5)));
        *(float *)v7.i32 = (float)(unint64_t)(v18 - v10);
        v23 = vsubq_f32(v22, vdivq_f32(v17, (float32x4_t)vdupq_lane_s32(v7, 0)));
        v24 = vmulq_f32(v23, v23);
        v7 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 2), vaddq_f32(v24, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.f32, 1))).u64[0];
        if (sqrtf(*(float *)v7.i32) >= (float)(v13 * 14.0))
          break;
        v17 = vaddq_f32(v17, v22);
LABEL_5:
        if (++v18 >= v5)
          goto LABEL_37;
      }
      if (v19 < v20)
      {
        *(_QWORD *)v19 = v18;
        v9 = v19 + 8;
LABEL_26:
        v15 = *(float32x4_t *)(a3 + 16);
        v16 = *(float32x4_t *)(a3 + 32);
        v12 = *(float32x4_t *)(a3 + 48);
        v11 = *(float32x4_t *)(a3 + 64);
        v17 = vaddq_f32(v11, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v15, v13 * (float)((float)v14[12 * v18] + 0.5)), v16, v13 * (float)((float)v14[12 * v18 + 1] + 0.5)), v12, v13 * (float)((float)v14[12 * v18 + 2] + 0.5)));
        v5 = *(_QWORD *)(a3 + 80);
        v19 = v9;
        v10 = v18;
        goto LABEL_5;
      }
      v25 = (v19 - v21) >> 3;
      v26 = v25 + 1;
      if ((unint64_t)(v25 + 1) >> 61)
        abort();
      if ((v20 - v21) >> 2 > v26)
        v26 = (v20 - v21) >> 2;
      if ((unint64_t)(v20 - v21) >= 0x7FFFFFFFFFFFFFF8)
        v27 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v27 = v26;
      if (v27)
      {
        if (v27 >> 61)
          sub_23938C4B8();
        v28 = operator new(8 * v27);
      }
      else
      {
        v28 = 0;
      }
      v8 = (uint64_t *)&v28[8 * v25];
      *v8 = v18;
      if (v19 == v21)
      {
        v9 = (char *)(v8 + 1);
        v20 = &v28[8 * v27];
        if (!v21)
          goto LABEL_25;
        goto LABEL_24;
      }
      v29 = v19 - 8 - v21;
      if (v29 < 0x168
        || &v28[v19 - v21 - 8 - (v29 & 0xFFFFFFFFFFFFFFF8)] > &v28[v19 - v21 - 8]
        || &v19[-(v29 & 0xFFFFFFFFFFFFFFF8) - 8] > v19 - 8
        || (unint64_t)(v21 - v28) < 0x20)
      {
        v30 = v19;
        v9 = (char *)(v8 + 1);
      }
      else
      {
        v32 = (v29 >> 3) + 1;
        v30 = &v19[-8 * (v32 & 0x3FFFFFFFFFFFFFFCLL)];
        v33 = &v28[8 * v25 - 16];
        v34 = v19 - 16;
        v35 = v32 & 0x3FFFFFFFFFFFFFFCLL;
        v9 = (char *)(v8 + 1);
        do
        {
          v36 = *(_OWORD *)v34;
          *(v33 - 1) = *((_OWORD *)v34 - 1);
          *v33 = v36;
          v33 -= 2;
          v34 -= 32;
          v35 -= 4;
        }
        while (v35);
        v8 -= v32 & 0x3FFFFFFFFFFFFFFCLL;
        if (v32 == (v32 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_23:
          v20 = &v28[8 * v27];
          if (!v21)
          {
LABEL_25:
            v21 = (char *)v8;
            goto LABEL_26;
          }
LABEL_24:
          operator delete(v21);
          v14 = *(int **)(a3 + 88);
          v13 = *(float *)a3;
          goto LABEL_25;
        }
      }
      do
      {
        v31 = *((_QWORD *)v30 - 1);
        v30 -= 8;
        *--v8 = v31;
      }
      while (v30 != v21);
      goto LABEL_23;
    }
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
LABEL_37:
  v61 = 0;
  v62 = &v61;
  v63 = 0x4812000000;
  v64 = sub_2393DFB98;
  v65 = sub_2393DFBBC;
  v38 = *a4;
  v37 = a4[1];
  v66 = &unk_239409746;
  v67 = 0;
  v68 = 0;
  v69 = 0;
  v39 = v37 - v38;
  if (v37 != v38)
  {
    if (v39 < 0)
      abort();
    v40 = (char *)operator new(v37 - v38);
    v41 = &v40[4 * (v39 >> 2)];
    v67 = v40;
    v69 = v41;
    bzero(v40, v39 & 0xFFFFFFFFFFFFFFFCLL);
    v68 = v41;
  }
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3321888768;
  block[2] = sub_2393DFBD4;
  block[3] = &unk_250AD69B0;
  block[5] = a2;
  block[6] = 50;
  v57 = 0;
  v58 = 0;
  __p = 0;
  v42 = v9 - (char *)v8;
  v43 = (v9 - (char *)v8) >> 3;
  if (v9 != (char *)v8)
  {
    if ((v42 & 0x8000000000000000) != 0)
      abort();
    v44 = (char *)operator new(v9 - (char *)v8);
    v45 = &v44[8 * v43];
    __p = v44;
    v58 = v45;
    memcpy(v44, v8, v42);
    v57 = v45;
  }
  v59 = a3;
  v60 = a4;
  block[4] = &v61;
  dispatch_apply((unint64_t)ceilf((float)(unint64_t)v43 / 50.0), 0, block);
  v46 = v62;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v48 = (_BYTE *)v46[6];
  v47 = (_BYTE *)v46[7];
  v49 = v47 - v48;
  if (v47 != v48)
  {
    if (v49 < 0)
      abort();
    v50 = (char *)operator new(v47 - v48);
    *a1 = v50;
    v51 = &v50[4 * (v49 >> 2)];
    a1[2] = v51;
    memcpy(v50, v48, v49);
    a1[1] = v51;
  }
  if (__p)
    operator delete(__p);
  _Block_object_dispose(&v61, 8);
  if (v67)
  {
    v68 = v67;
    operator delete(v67);
  }
  if (v8)
    operator delete(v8);
}

void sub_2393DF528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32)
{
  void *v32;

  if (__p)
    operator delete(__p);
  _Block_object_dispose(&a25, 8);
  if (a31)
  {
    a32 = (uint64_t)a31;
    operator delete(a31);
    if (!v32)
LABEL_5:
      _Unwind_Resume(a1);
  }
  else if (!v32)
  {
    goto LABEL_5;
  }
  operator delete(v32);
  _Unwind_Resume(a1);
}

void sub_2393DF588(uint64_t a1, uint64_t a2, _QWORD *a3, double a4, int8x16_t a5)
{
  size_t prime;
  void *v9;
  BOOL v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __int32 v16;
  void *v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  float v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  void *v29;
  int32x4_t v30;
  void *v31[2];
  _BYTE __p[24];
  float v33;

  *(_QWORD *)(a1 + 736) = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 128)) >> 6);
  prime = *(_QWORD *)(a2 + 80);
  *(_OWORD *)v31 = 0u;
  *(_OWORD *)__p = 0u;
  *(_QWORD *)&__p[16] = prime;
  v33 = 1.0;
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_23938C8F4((uint64_t)v31, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v9 = v31[1];
    v10 = (void *)prime >= v31[1];
    if ((void *)prime > v31[1])
      goto LABEL_17;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v10)
  {
    *(float *)a5.i32 = v33;
    v11 = vcvtps_u32_f32((float)*(unint64_t *)&__p[8] / v33);
    if ((unint64_t)v9 < 3
      || (v12 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      v11 = std::__next_prime(v11);
    }
    else
    {
      v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2)
        v11 = v13;
    }
    if (prime <= v11)
      prime = v11;
    if (prime < (unint64_t)v9)
      goto LABEL_17;
  }
LABEL_18:
  if (*(_QWORD *)(a2 + 80))
  {
    v14 = 0;
    v15 = 0;
    do
    {
      v16 = *(_DWORD *)(*a3 + 4 * v15);
      v30 = *(int32x4_t *)(*(_QWORD *)(a2 + 88) + v14);
      sub_2393DF81C((uint64_t)v31, (int32x2_t *)&v30, &v30, *(double *)v30.i64, a5)[2].i32[0] = v16;
      ++v15;
      v14 += 48;
    }
    while (v15 < *(_QWORD *)(a2 + 80));
  }
  v17 = *(void **)(a1 + 688);
  v18 = v31[0];
  v19 = (unint64_t)v31[1];
  *(void **)(a1 + 688) = v31[0];
  v20 = *(_QWORD *)(a1 + 696);
  *(_QWORD *)(a1 + 696) = v19;
  v31[0] = v17;
  v31[1] = (void *)v20;
  v21 = *(_QWORD **)(a1 + 704);
  v22 = *(_QWORD *)__p;
  *(_QWORD *)(a1 + 704) = *(_QWORD *)__p;
  *(_QWORD *)__p = v21;
  v23 = *(_QWORD *)&__p[8];
  v24 = *(_OWORD *)(a1 + 712);
  *(_OWORD *)(a1 + 712) = *(_OWORD *)&__p[8];
  *(_OWORD *)&__p[8] = v24;
  v25 = *(float *)(a1 + 728);
  *(float *)(a1 + 728) = v33;
  v33 = v25;
  if (v23)
  {
    v26 = *(_QWORD *)(v22 + 8);
    if ((v19 & (v19 - 1)) != 0)
    {
      if (v26 >= v19)
        v26 %= v19;
    }
    else
    {
      v26 &= v19 - 1;
    }
    v18[v26] = a1 + 704;
    v21 = *(_QWORD **)__p;
  }
  if ((_QWORD)v24)
  {
    v27 = v21[1];
    if ((v20 & (v20 - 1)) != 0)
    {
      if (v27 >= v20)
        v27 %= v20;
    }
    else
    {
      v27 &= v20 - 1;
    }
    *((_QWORD *)v31[0] + v27) = __p;
    v21 = *(_QWORD **)__p;
  }
  if (v21)
  {
    do
    {
      v28 = (_QWORD *)*v21;
      operator delete(v21);
      v21 = v28;
    }
    while (v28);
  }
  v29 = v31[0];
  v31[0] = 0;
  if (v29)
    operator delete(v29);
}

void sub_2393DF7F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2393DFB50((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2393DF808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2393DFB50((uint64_t)va);
  _Unwind_Resume(a1);
}

int32x4_t *sub_2393DF81C(uint64_t a1, int32x2_t *a2, int32x4_t *a3, double a4, int8x16_t a5)
{
  unint64_t v5;
  int64x2_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  int32x4_t **v13;
  int32x4_t *v14;
  int32x4_t v15;
  uint32x4_t v16;
  unint64_t v17;
  uint32x4_t v18;
  uint64_t v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t prime;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  uint64_t v29;
  int32x4_t **v30;
  unint64_t v31;

  a5.i64[0] = 83492791 * a2[1].i32[0];
  v8 = vmull_s32(*a2, (int32x2_t)0x12740A50466F45DLL);
  v9 = veorq_s8((int8x16_t)vdupq_laneq_s64(v8, 1), veorq_s8(a5, (int8x16_t)v8)).u64[0] % *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v5 = v9;
      if (v9 >= v10)
        v5 = v9 % v10;
    }
    else
    {
      v5 = (v10 - 1) & v9;
    }
    v13 = *(int32x4_t ***)(*(_QWORD *)a1 + 8 * v5);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = *(int32x4_t *)a2->i8;
        if (v12 < 2)
        {
          while (1)
          {
            v19 = v14->i64[1];
            if (v19 == v9)
            {
              v18 = (uint32x4_t)vceqq_s32(v14[1], v15);
              v18.i32[3] = v18.i32[2];
              if ((vminvq_u32(v18) & 0x80000000) != 0)
                return v14;
            }
            else if ((v19 & (v10 - 1)) != v5)
            {
              goto LABEL_22;
            }
            v14 = (int32x4_t *)v14->i64[0];
            if (!v14)
              goto LABEL_22;
          }
        }
        do
        {
          v17 = v14->u64[1];
          if (v17 == v9)
          {
            v16 = (uint32x4_t)vceqq_s32(v14[1], v15);
            v16.i32[3] = v16.i32[2];
            if ((vminvq_u32(v16) & 0x80000000) != 0)
              return v14;
          }
          else
          {
            if (v17 >= v10)
              v17 %= v10;
            if (v17 != v5)
              break;
          }
          v14 = (int32x4_t *)v14->i64[0];
        }
        while (v14);
      }
    }
  }
LABEL_22:
  v14 = (int32x4_t *)operator new(0x30uLL);
  v14->i64[0] = 0;
  v14->i64[1] = v9;
  v14[1] = *a3;
  v14[2].i32[0] = 0;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 40);
  if (!v10 || (float)(v21 * (float)v10) < v20)
  {
    v22 = 1;
    if (v10 >= 3)
      v22 = (v10 & (v10 - 1)) != 0;
    v23 = v22 | (2 * v10);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      prime = v24;
    else
      prime = v23;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v10 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v10)
      goto LABEL_34;
    if (prime < v10)
    {
      v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 40));
      if (v10 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (prime <= v26)
        prime = v26;
      if (prime < v10)
LABEL_34:
        sub_23938C8F4(a1, prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v5 = v9 % v10;
      else
        v5 = v9;
    }
    else
    {
      v5 = (v10 - 1) & v9;
    }
  }
  v29 = *(_QWORD *)a1;
  v30 = *(int32x4_t ***)(*(_QWORD *)a1 + 8 * v5);
  if (v30)
  {
    v14->i64[0] = (uint64_t)*v30;
LABEL_58:
    *v30 = v14;
    goto LABEL_59;
  }
  v14->i64[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v29 + 8 * v5) = a1 + 16;
  if (v14->i64[0])
  {
    v31 = *(_QWORD *)(v14->i64[0] + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v31 >= v10)
        v31 %= v10;
    }
    else
    {
      v31 &= v10 - 1;
    }
    v30 = (int32x4_t **)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_2393DFB3C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2393DFB50(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

__n128 sub_2393DFB98(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_2393DFBBC(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_2393DFBD4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  float v14;
  float32x4_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int *v19;
  float v20;
  int v21;
  int v22;
  int v23;
  int *v24;
  int v25;
  int v26;
  int v27;
  float *v28;
  float32x4_t v29;
  float32x4_t v30;
  float v31;
  float *v32;
  float **v33;
  float **v34;
  float *v35;
  uint64_t v36;
  float *v37;
  uint64_t v38;
  _BYTE *v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  float *v46;
  uint64_t v47;
  uint64_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float v53;
  unint64_t v54;
  float *v55;
  float **v56;
  float **v57;
  float *v58;
  float *v59;
  uint64_t v60;
  float *v61;
  uint64_t v62;
  _BYTE *v63;
  int v64;
  uint64_t v65;
  int v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  float *v70;
  uint64_t v71;
  float *v72;
  float *v73;
  float *v74;
  float *v75;
  float *v76;
  float *v77;
  int v78;
  float *v79;
  float **v80;
  float *v81;
  int v82;
  uint64_t v83;
  float *v84;
  uint64_t v85;
  float *v86;
  BOOL v87;
  float *v88;
  float *v89;
  float *v90;
  float **v91;
  float *v92;
  float *v93;
  _QWORD *v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  float *v102;
  float v103;
  uint64_t v104;
  float v105;
  float v106;
  float v107;
  float *v108;
  float *v109;
  float **v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t *v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float *v120;
  float *v121;
  unint64_t v122;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = v2 * a2;
  v4 = v2 + v2 * a2;
  if ((uint64_t)(*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 3 < v4)
    v4 = (uint64_t)(*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 3;
  v111 = v4;
  if (v3 < v4)
  {
    v6 = *(_QWORD *)(a1 + 40);
    while (1)
    {
      v7 = *(_QWORD *)(a1 + 56);
      v112 = v3 + 1;
      if (v3 + 1 >= (*(_QWORD *)(a1 + 64) - v7) >> 3)
        v8 = (uint64_t *)(*(_QWORD *)(a1 + 80) + 80);
      else
        v8 = (uint64_t *)(v7 + 8 * (v3 + 1));
      v9 = *(_QWORD *)(v7 + 8 * v3);
      v10 = *v8;
      v113 = *v8 - v9;
      if (*v8 <= v9)
        goto LABEL_5;
      v11 = *(_QWORD *)(v7 + 8 * v3);
      v114 = v11;
      if (v113 >= 2)
        break;
      v12 = **(_QWORD **)(a1 + 88);
      v13 = v9;
      do
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48) + 4 * v13++) = *(_DWORD *)(v12 + 4 * v9);
      while (v10 != v13);
LABEL_5:
      v3 = v112;
      if (v112 == v111)
        return;
    }
LABEL_16:
    v15 = *(float32x4_t **)(a1 + 80);
    v115 = *(uint64_t **)(a1 + 88);
    v121 = 0;
    v122 = 0;
    v120 = (float *)&v121;
    if (v113 <= *(_QWORD *)(v6 + 104))
    {
      v16 = 0;
      v17 = v114;
      do
      {
        v18 = v15[5].i64[1];
        v19 = (int *)(v18 + 48 * v11);
        v116 = v15[1];
        v117 = v15[2];
        v118 = v15[4];
        v119 = v15[3];
        v20 = v15->f32[0];
        v21 = *v19;
        v22 = v19[1];
        v23 = v19[2];
        v24 = (int *)(v18 + 48 * v17);
        v26 = *v24;
        v25 = v24[1];
        v27 = v24[2];
        v28 = (float *)operator new(0x30uLL);
        v29 = vsubq_f32(vaddq_f32(v118, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v116, v20 * (float)((float)v21 + 0.5)), v117, v20 * (float)((float)v22 + 0.5)), v119, v20 * (float)((float)v23 + 0.5))), vaddq_f32(v118, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v116, v20 * (float)((float)v26 + 0.5)), v117, v20 * (float)((float)v25 + 0.5)), v119, v20 * (float)((float)v27 + 0.5))));
        v30 = vmulq_f32(v29, v29);
        v31 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v30, 2), vaddq_f32(v30, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.f32, 1))).f32[0]);
        v28[8] = v31;
        *((_QWORD *)v28 + 5) = v17;
        v32 = v121;
        v33 = &v121;
        v34 = &v121;
        if (v121)
        {
          do
          {
            while (1)
            {
              v33 = (float **)v32;
              if (v31 <= v32[8])
                break;
              v32 = *(float **)v32;
              v34 = v33;
              if (!*v33)
                goto LABEL_28;
            }
            v32 = (float *)*((_QWORD *)v32 + 1);
          }
          while (v32);
          v34 = v33 + 1;
        }
LABEL_28:
        *(_QWORD *)v28 = 0;
        *((_QWORD *)v28 + 1) = 0;
        *((_QWORD *)v28 + 2) = v33;
        *v34 = v28;
        if (*(_QWORD *)v120)
        {
          v120 = *(float **)v120;
          v28 = *v34;
        }
        v35 = v121;
        v87 = v28 == v121;
        *((_BYTE *)v28 + 24) = v28 == v121;
        if (!v87)
        {
          do
          {
            v36 = *((_QWORD *)v28 + 2);
            if (*(_BYTE *)(v36 + 24))
              break;
            v37 = *(float **)(v36 + 16);
            v38 = *(_QWORD *)v37;
            if (*(_QWORD *)v37 == v36)
            {
              v41 = *((_QWORD *)v37 + 1);
              if (!v41 || (v42 = *(unsigned __int8 *)(v41 + 24), v39 = (_BYTE *)(v41 + 24), v42))
              {
                if (*(float **)v36 == v28)
                {
                  v43 = (uint64_t *)*((_QWORD *)v28 + 2);
                }
                else
                {
                  v43 = *(uint64_t **)(v36 + 8);
                  v44 = *v43;
                  *(_QWORD *)(v36 + 8) = *v43;
                  if (v44)
                  {
                    *(_QWORD *)(v44 + 16) = v36;
                    v37 = *(float **)(v36 + 16);
                  }
                  v43[2] = (uint64_t)v37;
                  *(_QWORD *)(*(_QWORD *)(v36 + 16) + 8 * (**(_QWORD **)(v36 + 16) != v36)) = v43;
                  *v43 = v36;
                  *(_QWORD *)(v36 + 16) = v43;
                  v37 = (float *)v43[2];
                  v36 = *(_QWORD *)v37;
                }
                *((_BYTE *)v43 + 24) = 1;
                *((_BYTE *)v37 + 24) = 0;
                v47 = *(_QWORD *)(v36 + 8);
                *(_QWORD *)v37 = v47;
                if (v47)
                  *(_QWORD *)(v47 + 16) = v37;
                *(_QWORD *)(v36 + 16) = *((_QWORD *)v37 + 2);
                *(_QWORD *)(*((_QWORD *)v37 + 2) + 8 * (**((_QWORD **)v37 + 2) != (_QWORD)v37)) = v36;
                *(_QWORD *)(v36 + 8) = v37;
                goto LABEL_19;
              }
            }
            else if (!v38 || (v40 = *(unsigned __int8 *)(v38 + 24), v39 = (_BYTE *)(v38 + 24), v40))
            {
              if (*(float **)v36 == v28)
              {
                v45 = *((_QWORD *)v28 + 1);
                *(_QWORD *)v36 = v45;
                if (v45)
                {
                  *(_QWORD *)(v45 + 16) = v36;
                  v37 = *(float **)(v36 + 16);
                }
                *((_QWORD *)v28 + 2) = v37;
                *(_QWORD *)(*(_QWORD *)(v36 + 16) + 8 * (**(_QWORD **)(v36 + 16) != v36)) = v28;
                *((_QWORD *)v28 + 1) = v36;
                *(_QWORD *)(v36 + 16) = v28;
                v37 = (float *)*((_QWORD *)v28 + 2);
              }
              else
              {
                v28 = (float *)*((_QWORD *)v28 + 2);
              }
              *((_BYTE *)v28 + 24) = 1;
              *((_BYTE *)v37 + 24) = 0;
              v36 = *((_QWORD *)v37 + 1);
              v46 = *(float **)v36;
              *((_QWORD *)v37 + 1) = *(_QWORD *)v36;
              if (v46)
                *((_QWORD *)v46 + 2) = v37;
              *(_QWORD *)(v36 + 16) = *((_QWORD *)v37 + 2);
              *(_QWORD *)(*((_QWORD *)v37 + 2) + 8 * (**((_QWORD **)v37 + 2) != (_QWORD)v37)) = v36;
              *(_QWORD *)v36 = v37;
LABEL_19:
              *((_QWORD *)v37 + 2) = v36;
              break;
            }
            *(_BYTE *)(v36 + 24) = 1;
            v28 = v37;
            *((_BYTE *)v37 + 24) = v37 == v35;
            *v39 = 1;
          }
          while (v37 != v35);
        }
        v122 = ++v16;
        ++v17;
      }
      while (v17 != v10);
      goto LABEL_178;
    }
LABEL_59:
    v48 = v15[5].i64[1];
    v49 = v15[1];
    v50 = v15[2];
    v51 = vsubq_f32(vaddq_f32(v15[4], vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v49, v15->f32[0] * (float)((float)*(int *)(v48 + 48 * v11) + 0.5)), v50, v15->f32[0] * (float)((float)*(int *)(v48 + 48 * v11 + 4) + 0.5)), v15[3], v15->f32[0] * (float)((float)*(int *)(v48 + 48 * v11 + 8) + 0.5))), vaddq_f32(v15[4], vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v49, v15->f32[0] * (float)((float)*(int *)(v48 + 48 * v9) + 0.5)), v50, v15->f32[0] * (float)((float)*(int *)(v48 + 48 * v9 + 4) + 0.5)), v15[3], v15->f32[0] * (float)((float)*(int *)(v48 + 48 * v9 + 8) + 0.5))));
    v52 = vmulq_f32(v51, v51);
    v53 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v52, 2), vaddq_f32(v52, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v52.f32, 1))).f32[0]);
    v54 = v122;
    if (v122 >= *(_QWORD *)(v6 + 104) && v53 >= v120[8])
      goto LABEL_58;
    v55 = (float *)operator new(0x30uLL);
    v55[8] = v53;
    *((_QWORD *)v55 + 5) = v9;
    v56 = &v121;
    v57 = &v121;
    v58 = v121;
    if (v121)
    {
      do
      {
        while (1)
        {
          v56 = (float **)v58;
          if (v53 <= v58[8])
            break;
          v58 = *(float **)v58;
          v57 = v56;
          if (!*v56)
            goto LABEL_68;
        }
        v58 = (float *)*((_QWORD *)v58 + 1);
      }
      while (v58);
      v57 = v56 + 1;
    }
LABEL_68:
    *(_QWORD *)v55 = 0;
    *((_QWORD *)v55 + 1) = 0;
    *((_QWORD *)v55 + 2) = v56;
    *v57 = v55;
    if (*(_QWORD *)v120)
    {
      v120 = *(float **)v120;
      v55 = *v57;
    }
    v59 = v121;
    v87 = v55 == v121;
    *((_BYTE *)v55 + 24) = v55 == v121;
    if (!v87)
    {
      do
      {
        v60 = *((_QWORD *)v55 + 2);
        if (*(_BYTE *)(v60 + 24))
          break;
        v61 = *(float **)(v60 + 16);
        v62 = *(_QWORD *)v61;
        if (*(_QWORD *)v61 == v60)
        {
          v65 = *((_QWORD *)v61 + 1);
          if (!v65 || (v66 = *(unsigned __int8 *)(v65 + 24), v63 = (_BYTE *)(v65 + 24), v66))
          {
            if (*(float **)v60 == v55)
            {
              v67 = (uint64_t *)*((_QWORD *)v55 + 2);
            }
            else
            {
              v67 = *(uint64_t **)(v60 + 8);
              v68 = *v67;
              *(_QWORD *)(v60 + 8) = *v67;
              if (v68)
              {
                *(_QWORD *)(v68 + 16) = v60;
                v61 = *(float **)(v60 + 16);
              }
              v67[2] = (uint64_t)v61;
              *(_QWORD *)(*(_QWORD *)(v60 + 16) + 8 * (**(_QWORD **)(v60 + 16) != v60)) = v67;
              *v67 = v60;
              *(_QWORD *)(v60 + 16) = v67;
              v61 = (float *)v67[2];
              v60 = *(_QWORD *)v61;
            }
            *((_BYTE *)v67 + 24) = 1;
            *((_BYTE *)v61 + 24) = 0;
            v71 = *(_QWORD *)(v60 + 8);
            *(_QWORD *)v61 = v71;
            if (v71)
              *(_QWORD *)(v71 + 16) = v61;
            *(_QWORD *)(v60 + 16) = *((_QWORD *)v61 + 2);
            *(_QWORD *)(*((_QWORD *)v61 + 2) + 8 * (**((_QWORD **)v61 + 2) != (_QWORD)v61)) = v60;
            *(_QWORD *)(v60 + 8) = v61;
            goto LABEL_97;
          }
        }
        else if (!v62 || (v64 = *(unsigned __int8 *)(v62 + 24), v63 = (_BYTE *)(v62 + 24), v64))
        {
          if (*(float **)v60 == v55)
          {
            v69 = *((_QWORD *)v55 + 1);
            *(_QWORD *)v60 = v69;
            if (v69)
            {
              *(_QWORD *)(v69 + 16) = v60;
              v61 = *(float **)(v60 + 16);
            }
            *((_QWORD *)v55 + 2) = v61;
            *(_QWORD *)(*(_QWORD *)(v60 + 16) + 8 * (**(_QWORD **)(v60 + 16) != v60)) = v55;
            *((_QWORD *)v55 + 1) = v60;
            *(_QWORD *)(v60 + 16) = v55;
            v61 = (float *)*((_QWORD *)v55 + 2);
          }
          else
          {
            v55 = (float *)*((_QWORD *)v55 + 2);
          }
          *((_BYTE *)v55 + 24) = 1;
          *((_BYTE *)v61 + 24) = 0;
          v60 = *((_QWORD *)v61 + 1);
          v70 = *(float **)v60;
          *((_QWORD *)v61 + 1) = *(_QWORD *)v60;
          if (v70)
            *((_QWORD *)v70 + 2) = v61;
          *(_QWORD *)(v60 + 16) = *((_QWORD *)v61 + 2);
          *(_QWORD *)(*((_QWORD *)v61 + 2) + 8 * (**((_QWORD **)v61 + 2) != (_QWORD)v61)) = v60;
          *(_QWORD *)v60 = v61;
LABEL_97:
          *((_QWORD *)v61 + 2) = v60;
          break;
        }
        *(_BYTE *)(v60 + 24) = 1;
        v55 = v61;
        *((_BYTE *)v61 + 24) = v61 == v59;
        *v63 = 1;
      }
      while (v61 != v59);
    }
    v122 = v54 + 1;
    if (v54 + 1 <= *(_QWORD *)(v6 + 104))
      goto LABEL_58;
    v72 = v120;
    v73 = (float *)*((_QWORD *)v120 + 1);
    v74 = v73;
    v75 = v120;
    if (v73)
    {
      do
      {
        v76 = v74;
        v74 = *(float **)v74;
      }
      while (v74);
    }
    else
    {
      do
      {
        v76 = (float *)*((_QWORD *)v75 + 2);
        v87 = *(_QWORD *)v76 == (_QWORD)v75;
        v75 = v76;
      }
      while (!v87);
    }
    v120 = v76;
    v122 = v54;
    if (*(_QWORD *)v72)
    {
      if (v73)
      {
        do
        {
          v77 = v73;
          v73 = *(float **)v73;
        }
        while (v73);
        v73 = (float *)*((_QWORD *)v77 + 1);
        if (!v73)
          goto LABEL_110;
      }
      else
      {
        v73 = *(float **)v72;
        v77 = v72;
      }
    }
    else
    {
      v77 = v72;
      if (!v73)
      {
LABEL_110:
        v78 = 1;
LABEL_113:
        v79 = v121;
        v80 = (float **)*((_QWORD *)v77 + 2);
        v81 = *v80;
        if (*v80 == v77)
        {
          *v80 = v73;
          if (v77 == v79)
          {
            v81 = 0;
            v79 = v73;
          }
          else
          {
            v81 = v80[1];
          }
        }
        else
        {
          v80[1] = v73;
        }
        v82 = *((unsigned __int8 *)v77 + 24);
        if (v77 != v72)
        {
          v83 = *((_QWORD *)v72 + 2);
          *((_QWORD *)v77 + 2) = v83;
          *(_QWORD *)(v83 + 8 * (**((_QWORD **)v72 + 2) != (_QWORD)v72)) = v77;
          v84 = *(float **)v72;
          *(_QWORD *)v77 = *(_QWORD *)v72;
          *((_QWORD *)v84 + 2) = v77;
          v85 = *((_QWORD *)v72 + 1);
          *((_QWORD *)v77 + 1) = v85;
          if (v85)
            *(_QWORD *)(v85 + 16) = v77;
          *((_BYTE *)v77 + 24) = *((_BYTE *)v72 + 24);
          if (v79 == v72)
            v79 = v77;
        }
        if (!v82 || !v79)
          goto LABEL_57;
        if (!v78)
        {
          *((_BYTE *)v73 + 24) = 1;
          goto LABEL_57;
        }
        while (1)
        {
          v88 = (float *)*((_QWORD *)v81 + 2);
          if (*(float **)v88 != v81)
          {
            if (*((_BYTE *)v81 + 24))
            {
              v89 = *(float **)v81;
              if (!*(_QWORD *)v81)
              {
LABEL_145:
                v93 = (float *)*((_QWORD *)v81 + 1);
                if (v93 && !*((_BYTE *)v93 + 24))
                  goto LABEL_169;
                *((_BYTE *)v81 + 24) = 0;
                v86 = (float *)*((_QWORD *)v81 + 2);
                if (v86 == v79)
                {
                  *((_BYTE *)v79 + 24) = 1;
                  goto LABEL_57;
                }
                if (!*((_BYTE *)v86 + 24))
                  goto LABEL_56;
                goto LABEL_131;
              }
            }
            else
            {
              *((_BYTE *)v81 + 24) = 1;
              *((_BYTE *)v88 + 24) = 0;
              v91 = (float **)*((_QWORD *)v88 + 1);
              v92 = *v91;
              *((_QWORD *)v88 + 1) = *v91;
              if (v92)
                *((_QWORD *)v92 + 2) = v88;
              v91[2] = (float *)*((_QWORD *)v88 + 2);
              *(_QWORD *)(*((_QWORD *)v88 + 2) + 8 * (**((_QWORD **)v88 + 2) != (_QWORD)v88)) = v91;
              *v91 = v88;
              *((_QWORD *)v88 + 2) = v91;
              if (v79 == *(float **)v81)
                v79 = v81;
              v81 = *(float **)(*(_QWORD *)v81 + 8);
              v89 = *(float **)v81;
              if (!*(_QWORD *)v81)
                goto LABEL_145;
            }
            if (!*((_BYTE *)v89 + 24))
            {
              v93 = (float *)*((_QWORD *)v81 + 1);
              if (v93 && !*((_BYTE *)v93 + 24))
              {
LABEL_169:
                v89 = v81;
              }
              else
              {
                *((_BYTE *)v89 + 24) = 1;
                *((_BYTE *)v81 + 24) = 0;
                v97 = *((_QWORD *)v89 + 1);
                *(_QWORD *)v81 = v97;
                if (v97)
                  *(_QWORD *)(v97 + 16) = v81;
                *((_QWORD *)v89 + 2) = *((_QWORD *)v81 + 2);
                *(_QWORD *)(*((_QWORD *)v81 + 2) + 8 * (**((_QWORD **)v81 + 2) != (_QWORD)v81)) = v89;
                *((_QWORD *)v89 + 1) = v81;
                *((_QWORD *)v81 + 2) = v89;
                v93 = v81;
              }
              v98 = *((_QWORD *)v89 + 2);
              *((_BYTE *)v89 + 24) = *(_BYTE *)(v98 + 24);
              *(_BYTE *)(v98 + 24) = 1;
              *((_BYTE *)v93 + 24) = 1;
              v99 = *(uint64_t **)(v98 + 8);
              v100 = *v99;
              *(_QWORD *)(v98 + 8) = *v99;
              if (v100)
                *(_QWORD *)(v100 + 16) = v98;
              v99[2] = *(_QWORD *)(v98 + 16);
              *(_QWORD *)(*(_QWORD *)(v98 + 16) + 8 * (**(_QWORD **)(v98 + 16) != v98)) = v99;
              *v99 = v98;
              goto LABEL_177;
            }
            goto LABEL_145;
          }
          if (*((_BYTE *)v81 + 24))
          {
            v90 = *(float **)v81;
            if (*(_QWORD *)v81)
              goto LABEL_155;
          }
          else
          {
            *((_BYTE *)v81 + 24) = 1;
            *((_BYTE *)v88 + 24) = 0;
            v94 = (_QWORD *)*((_QWORD *)v81 + 1);
            *(_QWORD *)v88 = v94;
            if (v94)
              v94[2] = v88;
            *((_QWORD *)v81 + 2) = *((_QWORD *)v88 + 2);
            *(_QWORD *)(*((_QWORD *)v88 + 2) + 8 * (**((_QWORD **)v88 + 2) != (_QWORD)v88)) = v81;
            *((_QWORD *)v81 + 1) = v88;
            *((_QWORD *)v88 + 2) = v81;
            if (v79 == v88)
              v79 = v81;
            v81 = *(float **)v88;
            v90 = **(float ***)v88;
            if (v90)
            {
LABEL_155:
              if (!*((_BYTE *)v90 + 24))
                goto LABEL_173;
            }
          }
          v95 = (uint64_t *)*((_QWORD *)v81 + 1);
          if (v95 && !*((_BYTE *)v95 + 24))
          {
            if (v90 && !*((_BYTE *)v90 + 24))
            {
LABEL_173:
              v95 = (uint64_t *)v81;
            }
            else
            {
              *((_BYTE *)v95 + 24) = 1;
              *((_BYTE *)v81 + 24) = 0;
              v96 = *v95;
              *((_QWORD *)v81 + 1) = *v95;
              if (v96)
                *(_QWORD *)(v96 + 16) = v81;
              v95[2] = *((_QWORD *)v81 + 2);
              *(_QWORD *)(*((_QWORD *)v81 + 2) + 8 * (**((_QWORD **)v81 + 2) != (_QWORD)v81)) = v95;
              *v95 = (uint64_t)v81;
              *((_QWORD *)v81 + 2) = v95;
              v90 = v81;
            }
            v98 = v95[2];
            *((_BYTE *)v95 + 24) = *(_BYTE *)(v98 + 24);
            *(_BYTE *)(v98 + 24) = 1;
            *((_BYTE *)v90 + 24) = 1;
            v99 = *(uint64_t **)v98;
            v101 = *(_QWORD *)(*(_QWORD *)v98 + 8);
            *(_QWORD *)v98 = v101;
            if (v101)
              *(_QWORD *)(v101 + 16) = v98;
            v99[2] = *(_QWORD *)(v98 + 16);
            *(_QWORD *)(*(_QWORD *)(v98 + 16) + 8 * (**(_QWORD **)(v98 + 16) != v98)) = v99;
            v99[1] = v98;
LABEL_177:
            *(_QWORD *)(v98 + 16) = v99;
LABEL_57:
            operator delete(v72);
LABEL_58:
            if (++v9 != v10)
              goto LABEL_59;
LABEL_178:
            v102 = v120;
            if (v120 == (float *)&v121)
            {
              v14 = NAN;
            }
            else
            {
              v103 = (float)(*(float *)(v6 + 112) * v15->f32[0]) * (float)(*(float *)(v6 + 112) * v15->f32[0]);
              v104 = *v115;
              v105 = 0.0;
              v106 = 0.0;
              do
              {
                v107 = expf((float)((float)(v102[8] * v102[8]) * -0.5) / v103);
                v108 = (float *)*((_QWORD *)v102 + 1);
                v109 = v102;
                if (v108)
                {
                  do
                  {
                    v110 = (float **)v108;
                    v108 = *(float **)v108;
                  }
                  while (v108);
                }
                else
                {
                  do
                  {
                    v110 = (float **)*((_QWORD *)v109 + 2);
                    v87 = *v110 == v109;
                    v109 = (float *)v110;
                  }
                  while (!v87);
                }
                v105 = v105 + (float)(v107 * *(float *)(v104 + 4 * *((_QWORD *)v102 + 5)));
                v106 = v106 + v107;
                v102 = (float *)v110;
              }
              while (v110 != &v121);
              v14 = v105 / v106;
            }
            v9 = v114;
            sub_23938C854(v121);
            *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48) + 4 * v11++) = v14;
            if (v11 == v10)
              goto LABEL_5;
            goto LABEL_16;
          }
          *((_BYTE *)v81 + 24) = 0;
          v86 = (float *)*((_QWORD *)v81 + 2);
          if (*((_BYTE *)v86 + 24))
            v87 = v86 == v79;
          else
            v87 = 1;
          if (v87)
          {
LABEL_56:
            *((_BYTE *)v86 + 24) = 1;
            goto LABEL_57;
          }
LABEL_131:
          v81 = *(float **)(*((_QWORD *)v86 + 2) + 8 * (**((_QWORD **)v86 + 2) == (_QWORD)v86));
        }
      }
    }
    v78 = 0;
    *((_QWORD *)v73 + 2) = *((_QWORD *)v77 + 2);
    goto LABEL_113;
  }
}

void sub_2393E07A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,_QWORD *a24)
{
  sub_23938C854(a24);
  _Unwind_Resume(a1);
}

_QWORD *sub_2393E07BC(_QWORD *result, uint64_t a2)
{
  _BYTE *v2;
  _BYTE *v3;
  int64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;

  result[7] = 0;
  result[8] = 0;
  result[9] = 0;
  v3 = *(_BYTE **)(a2 + 56);
  v2 = *(_BYTE **)(a2 + 64);
  v4 = v2 - v3;
  if (v2 != v3)
  {
    if (v4 < 0)
      abort();
    v5 = result;
    v6 = (char *)operator new(v2 - v3);
    v5[7] = v6;
    v5[8] = v6;
    v7 = &v6[8 * (v4 >> 3)];
    v5[9] = v7;
    result = memcpy(v6, v3, v4);
    v5[8] = v7;
  }
  return result;
}

void sub_2393E0824(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
}

void sub_2393E083C(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, int8x16_t a10)
{
  int8x16_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint8x8_t v19;
  unint64_t v20;
  float v21;
  int32x4_t v22;
  int8x16_t v23;
  int64x2_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t **v29;
  uint64_t *v30;
  uint32x4_t v31;
  uint64_t v32;
  uint32x4_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  float v38;
  BOOL v39;
  uint64_t v40;
  int8x16_t v41;
  int8x16_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  int32x4_t **v47;
  int32x4_t *v48;
  uint64_t v49;
  uint64_t v50;
  int8x16_t v51;
  int8x16_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  int32x4_t **v57;
  int32x4_t *v58;
  unint64_t v59;

  v11 = 500 * a2;
  v12 = 500 * a2 + 500;
  v13 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(v13 + 80) < v12)
    v12 = *(_QWORD *)(v13 + 80);
  if (v11 < v12)
  {
    v14 = *(_QWORD **)(a1 + 32);
    v15 = v14[87];
    v16 = **(_QWORD **)(a1 + 48);
    if (v15)
    {
      v17 = *(_QWORD *)(v13 + 88);
      v18 = v14[90];
      v19 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
      v19.i16[0] = vaddlv_u8(v19);
      v20 = v15 - 1;
      do
      {
        v22 = *(int32x4_t *)(v17 + 48 * v11);
        v23.i64[1] = v22.i32[3];
        v23.i64[0] = 83492791 * (int)*(_QWORD *)(v17 + 48 * v11 + 8);
        v24 = vmull_s32(*(int32x2_t *)v22.i8, (int32x2_t)0x12740A50466F45DLL);
        v25 = veorq_s8((int8x16_t)vdupq_laneq_s64(v24, 1), veorq_s8(v23, (int8x16_t)v24)).u64[0];
        v26 = v25 % v18;
        if (v19.u32[0] > 1uLL)
        {
          v27 = v25 % v18;
          if (v26 >= v15)
            v27 = v26 % v15;
        }
        else
        {
          v27 = v20 & v26;
        }
        v28 = v14[86];
        v29 = *(uint64_t ***)(v28 + 8 * v27);
        if (v29)
        {
          v30 = *v29;
          if (v30)
          {
            if (v19.u32[0] < 2uLL)
            {
              while (1)
              {
                v32 = v30[1];
                if (v26 == v32)
                {
                  v31 = (uint32x4_t)vceqq_s32(*((int32x4_t *)v30 + 1), v22);
                  v31.i32[3] = v31.i32[2];
                  if ((vminvq_u32(v31) & 0x80000000) != 0)
                    goto LABEL_6;
                }
                else if ((v32 & v20) != v27)
                {
                  goto LABEL_27;
                }
                v30 = (uint64_t *)*v30;
                if (!v30)
                  goto LABEL_27;
              }
            }
            do
            {
              v34 = v30[1];
              if (v26 == v34)
              {
                v33 = (uint32x4_t)vceqq_s32(*((int32x4_t *)v30 + 1), v22);
                v33.i32[3] = v33.i32[2];
                if ((vminvq_u32(v33) & 0x80000000) != 0)
                {
LABEL_6:
                  v21 = *((float *)v30 + 8);
                  goto LABEL_7;
                }
              }
              else
              {
                if (v34 >= v15)
                  v34 %= v15;
                if (v34 != v27)
                  break;
              }
              v30 = (uint64_t *)*v30;
            }
            while (v30);
          }
        }
LABEL_27:
        v35 = v22.i32[0] - 1;
        v36 = v22.i32[0];
        if (v19.u32[0] >= 2uLL)
        {
          v37 = 0;
          v38 = 0.0;
          do
          {
            v24.i32[0] = v35;
            v50 = v22.i32[1] - 1;
            do
            {
              v51 = (int8x16_t)v24;
              v51.i32[1] = v50;
              v52.i64[0] = v35;
              v52.i64[1] = v50;
              v53 = vextq_s8(v52, v52, 8uLL).u64[0];
              v54 = v22.i32[2] - 1;
              do
              {
                a10.i64[0] = 73856093 * v35;
                v10.i64[0] = 83492791 * v54;
                a10 = veorq_s8((int8x16_t)vdupq_n_s64(19349669 * v53), veorq_s8(v10, a10));
                v55 = a10.i64[0] % v18;
                v56 = a10.i64[0] % v18;
                if (a10.i64[0] % v18 >= v15)
                  v56 = v55 % v15;
                v57 = *(int32x4_t ***)(v28 + 8 * v56);
                if (v57)
                {
                  v58 = *v57;
                  if (v58)
                  {
                    a10 = v51;
                    a10.i32[2] = v54;
                    do
                    {
                      v59 = v58->u64[1];
                      if (v55 == v59)
                      {
                        v10 = (int8x16_t)vceqq_s32(v58[1], (int32x4_t)a10);
                        v10.i32[3] = v10.i32[2];
                        if ((vminvq_u32((uint32x4_t)v10) & 0x80000000) != 0)
                        {
                          ++v37;
                          v38 = v38 + *(float *)v58[2].i32;
                          break;
                        }
                      }
                      else
                      {
                        if (v59 >= v15)
                          v59 %= v15;
                        if (v59 != v56)
                          break;
                      }
                      v58 = (int32x4_t *)v58->i64[0];
                    }
                    while (v58);
                  }
                }
                v39 = v54++ <= v22.i32[2];
              }
              while (v39);
              v39 = v50++ <= v22.i32[1];
            }
            while (v39);
            v39 = v35++ <= v36;
          }
          while (v39);
        }
        else
        {
          v37 = 0;
          v38 = 0.0;
          do
          {
            v24.i32[0] = v35;
            v40 = v22.i32[1] - 1;
            do
            {
              v41 = (int8x16_t)v24;
              v41.i32[1] = v40;
              v42.i64[0] = v35;
              v42.i64[1] = v40;
              v43 = vextq_s8(v42, v42, 8uLL).u64[0];
              v44 = v22.i32[2] - 1;
              do
              {
                a10.i64[0] = 73856093 * v35;
                v10.i64[0] = 83492791 * v44;
                a10 = veorq_s8((int8x16_t)vdupq_n_s64(19349669 * v43), veorq_s8(v10, a10));
                v45 = a10.i64[0] % v18;
                v46 = (a10.i64[0] % v18) & v20;
                v47 = *(int32x4_t ***)(v28 + 8 * v46);
                if (v47)
                {
                  v48 = *v47;
                  if (v48)
                  {
                    a10 = v41;
                    a10.i32[2] = v44;
                    do
                    {
                      v49 = v48->i64[1];
                      if (v45 == v49)
                      {
                        v10 = (int8x16_t)vceqq_s32(v48[1], (int32x4_t)a10);
                        v10.i32[3] = v10.i32[2];
                        if ((vminvq_u32((uint32x4_t)v10) & 0x80000000) != 0)
                        {
                          ++v37;
                          v38 = v38 + *(float *)v48[2].i32;
                          break;
                        }
                      }
                      else if ((v49 & v20) != v46)
                      {
                        break;
                      }
                      v48 = (int32x4_t *)v48->i64[0];
                    }
                    while (v48);
                  }
                }
                v39 = v44++ <= v22.i32[2];
              }
              while (v39);
              v39 = v40++ <= v22.i32[1];
            }
            while (v39);
            v39 = v35++ <= v36;
          }
          while (v39);
        }
        v21 = -1.0;
        if (v37 > 1)
          v21 = v38 / (float)v37;
LABEL_7:
        *(float *)(v16 + 4 * v11++) = v21;
      }
      while (v11 != v12);
    }
    else
    {
      memset_pattern16((void *)(v16 + 2000 * a2), &unk_2393F55E0, 4 * v12 - 2000 * a2);
    }
  }
}

void sub_2393E0C98(uint64_t a1, uint64_t a2)
{
  float32x4_t *v4;
  float32x4_t *v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float v9;
  float32x4_t v10;
  float32x4_t v11;
  float v12;
  unint64_t v13;
  float *v14;
  float *v15;
  float *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  float *v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  float *v27;
  uint64_t v28;
  __int128 v29;
  int v30;
  unint64_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  _OWORD *f32;
  float32x4_t *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  __int128 v47;
  char *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  char *v67;
  unint64_t v68;
  _OWORD *v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  float v80;
  float v81;
  float *v82;
  unint64_t v83;
  float *v84;
  float *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  _BYTE *v90;
  float *v91;
  char *v92;
  unint64_t v93;
  uint64_t v94;
  _OWORD *v95;
  float *v96;
  uint64_t v97;
  __int128 v98;
  int v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;

  v4 = *(float32x4_t **)(a1 + 128);
  v5 = *(float32x4_t **)(a1 + 136);
  if (v4 == v5)
  {
    v9 = -1.0;
  }
  else
  {
    v6 = *(float32x4_t *)(a2 + 112);
    v7 = vsubq_f32(v6, v4[7]);
    v8 = vmulq_f32(v7, v7);
    v9 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v8, 2), vaddq_f32(v8, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 1))).f32[0]);
    do
    {
      v10 = vsubq_f32(v6, v4[7]);
      v11 = vmulq_f32(v10, v10);
      v12 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2), vaddq_f32(v11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1))).f32[0]);
      if (v12 < v9)
        v9 = v12;
      v4 += 12;
    }
    while (v4 != v5);
  }
  v14 = *(float **)(a1 + 160);
  v13 = *(_QWORD *)(a1 + 168);
  if ((unint64_t)v14 >= v13)
  {
    v16 = *(float **)(a1 + 152);
    v17 = v14 - v16;
    v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 62)
      goto LABEL_88;
    v19 = v13 - (_QWORD)v16;
    if (v19 >> 1 > v18)
      v18 = v19 >> 1;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
      v20 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v20 = v18;
    if (v20)
    {
      if (v20 >> 62)
        goto LABEL_89;
      v21 = operator new(4 * v20);
    }
    else
    {
      v21 = 0;
    }
    v22 = (float *)&v21[4 * v17];
    v23 = &v21[4 * v20];
    *v22 = v9;
    v15 = v22 + 1;
    if (v14 != v16)
    {
      v24 = (char *)v14 - (char *)v16 - 4;
      if (v24 < 0x2C)
        goto LABEL_92;
      if ((unint64_t)((char *)v16 - v21) < 0x20)
        goto LABEL_92;
      v25 = (v24 >> 2) + 1;
      v26 = &v21[4 * v17 - 16];
      v27 = v14 - 4;
      v28 = v25 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 8;
        v28 -= 8;
      }
      while (v28);
      v22 -= v25 & 0x7FFFFFFFFFFFFFF8;
      v14 -= v25 & 0x7FFFFFFFFFFFFFF8;
      if (v25 != (v25 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_92:
        do
        {
          v30 = *((_DWORD *)v14-- - 1);
          *((_DWORD *)v22-- - 1) = v30;
        }
        while (v14 != v16);
      }
    }
    *(_QWORD *)(a1 + 152) = v22;
    *(_QWORD *)(a1 + 160) = v15;
    *(_QWORD *)(a1 + 168) = v23;
    if (v16)
    {
      operator delete(v16);
      v5 = *(float32x4_t **)(a1 + 136);
    }
  }
  else
  {
    *v14 = v9;
    v15 = v14 + 1;
  }
  *(_QWORD *)(a1 + 160) = v15;
  v31 = *(_QWORD *)(a1 + 144);
  if ((unint64_t)v5 >= v31)
  {
    v42 = *(float32x4_t **)(a1 + 128);
    v43 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)v42) >> 6) + 1;
    if (v43 > 0x155555555555555)
      goto LABEL_88;
    v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - (_QWORD)v42) >> 6);
    if (2 * v44 > v43)
      v43 = 2 * v44;
    if (v44 >= 0xAAAAAAAAAAAAAALL)
      v45 = 0x155555555555555;
    else
      v45 = v43;
    if (v45)
    {
      if (v45 > 0x155555555555555)
        goto LABEL_89;
      v46 = (char *)operator new(192 * v45);
    }
    else
    {
      v46 = 0;
    }
    v47 = *(_OWORD *)(a2 + 144);
    v48 = &v46[64 * (((char *)v5 - (char *)v42) >> 6)];
    *((_OWORD *)v48 + 8) = *(_OWORD *)(a2 + 128);
    *((_OWORD *)v48 + 9) = v47;
    v49 = *(_OWORD *)(a2 + 176);
    *((_OWORD *)v48 + 10) = *(_OWORD *)(a2 + 160);
    *((_OWORD *)v48 + 11) = v49;
    v50 = *(_OWORD *)(a2 + 80);
    *((_OWORD *)v48 + 4) = *(_OWORD *)(a2 + 64);
    *((_OWORD *)v48 + 5) = v50;
    v51 = *(_OWORD *)(a2 + 112);
    *((_OWORD *)v48 + 6) = *(_OWORD *)(a2 + 96);
    *((_OWORD *)v48 + 7) = v51;
    v52 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v48 = *(_OWORD *)a2;
    *((_OWORD *)v48 + 1) = v52;
    v53 = *(_OWORD *)(a2 + 48);
    f32 = v48 + 192;
    *((_OWORD *)v48 + 2) = *(_OWORD *)(a2 + 32);
    *((_OWORD *)v48 + 3) = v53;
    if (v5 != v42)
    {
      do
      {
        v54 = v5[-12];
        v55 = v5[-11];
        v56 = v5[-9];
        *((float32x4_t *)v48 - 10) = v5[-10];
        *((float32x4_t *)v48 - 9) = v56;
        *((float32x4_t *)v48 - 12) = v54;
        *((float32x4_t *)v48 - 11) = v55;
        v57 = v5[-8];
        v58 = v5[-7];
        v59 = v5[-5];
        *((float32x4_t *)v48 - 6) = v5[-6];
        *((float32x4_t *)v48 - 5) = v59;
        *((float32x4_t *)v48 - 8) = v57;
        *((float32x4_t *)v48 - 7) = v58;
        v60 = v5[-4];
        v61 = v5[-3];
        v62 = v5[-1];
        *((float32x4_t *)v48 - 2) = v5[-2];
        *((float32x4_t *)v48 - 1) = v62;
        *((float32x4_t *)v48 - 4) = v60;
        *((float32x4_t *)v48 - 3) = v61;
        v48 -= 192;
        v5 -= 12;
      }
      while (v5 != v42);
      v5 = *(float32x4_t **)(a1 + 128);
    }
    *(_QWORD *)(a1 + 128) = v48;
    *(_QWORD *)(a1 + 136) = f32;
    *(_QWORD *)(a1 + 144) = &v46[192 * v45];
    if (v5)
      operator delete(v5);
  }
  else
  {
    v32 = *(float32x4_t *)a2;
    v33 = *(float32x4_t *)(a2 + 16);
    v34 = *(float32x4_t *)(a2 + 48);
    v5[2] = *(float32x4_t *)(a2 + 32);
    v5[3] = v34;
    *v5 = v32;
    v5[1] = v33;
    v35 = *(float32x4_t *)(a2 + 64);
    v36 = *(float32x4_t *)(a2 + 80);
    v37 = *(float32x4_t *)(a2 + 112);
    v5[6] = *(float32x4_t *)(a2 + 96);
    v5[7] = v37;
    v5[4] = v35;
    v5[5] = v36;
    v38 = *(float32x4_t *)(a2 + 128);
    v39 = *(float32x4_t *)(a2 + 144);
    v40 = *(float32x4_t *)(a2 + 176);
    v5[10] = *(float32x4_t *)(a2 + 160);
    v5[11] = v40;
    v5[8] = v38;
    v5[9] = v39;
    f32 = (_OWORD *)v5[12].f32;
  }
  *(_QWORD *)(a1 + 136) = f32;
  if (*(_BYTE *)(a1 + 121) && !*(_DWORD *)a1)
  {
    v64 = *(_OWORD *)(a2 + 128);
    v63 = *(_OWORD *)(a2 + 144);
    v66 = *(_OWORD *)(a2 + 160);
    v65 = *(_OWORD *)(a2 + 176);
    v67 = *(char **)(a1 + 752);
    v68 = *(_QWORD *)(a1 + 760);
    if ((unint64_t)v67 >= v68)
    {
      v70 = *(char **)(a1 + 744);
      v71 = (v67 - v70) >> 6;
      v72 = v71 + 1;
      if ((unint64_t)(v71 + 1) >> 58)
        goto LABEL_88;
      v73 = v68 - (_QWORD)v70;
      if (v73 >> 5 > v72)
        v72 = v73 >> 5;
      if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFC0)
        v74 = 0x3FFFFFFFFFFFFFFLL;
      else
        v74 = v72;
      if (v74)
      {
        v100 = *(_OWORD *)(a2 + 128);
        v101 = *(_OWORD *)(a2 + 144);
        v102 = *(_OWORD *)(a2 + 160);
        v103 = *(_OWORD *)(a2 + 176);
        if (v74 >> 58)
          goto LABEL_89;
        v75 = (char *)operator new(v74 << 6);
        v66 = v102;
        v65 = v103;
        v64 = v100;
        v63 = v101;
      }
      else
      {
        v75 = 0;
      }
      v76 = &v75[64 * v71];
      *(_OWORD *)v76 = v64;
      *((_OWORD *)v76 + 1) = v63;
      *((_OWORD *)v76 + 2) = v66;
      *((_OWORD *)v76 + 3) = v65;
      v69 = v76 + 64;
      if (v67 != v70)
      {
        do
        {
          v77 = *((_OWORD *)v67 - 4);
          v78 = *((_OWORD *)v67 - 3);
          v79 = *((_OWORD *)v67 - 1);
          *((_OWORD *)v76 - 2) = *((_OWORD *)v67 - 2);
          *((_OWORD *)v76 - 1) = v79;
          *((_OWORD *)v76 - 4) = v77;
          *((_OWORD *)v76 - 3) = v78;
          v76 -= 64;
          v67 -= 64;
        }
        while (v67 != v70);
        v67 = *(char **)(a1 + 744);
      }
      *(_QWORD *)(a1 + 744) = v76;
      *(_QWORD *)(a1 + 752) = v69;
      *(_QWORD *)(a1 + 760) = &v75[64 * v74];
      if (v67)
        operator delete(v67);
    }
    else
    {
      *(_OWORD *)v67 = v64;
      *((_OWORD *)v67 + 1) = v63;
      v69 = v67 + 64;
      *((_OWORD *)v67 + 2) = v66;
      *((_OWORD *)v67 + 3) = v65;
    }
    *(_QWORD *)(a1 + 752) = v69;
    v80 = atan2f((float)*(unsigned int *)(a2 + 4), *(float *)(a2 + 36) + *(float *)(a2 + 36));
    v81 = v80 + v80;
    v82 = *(float **)(a1 + 776);
    v83 = *(_QWORD *)(a1 + 784);
    if ((unint64_t)v82 < v83)
    {
      *v82 = v81;
      v84 = v82 + 1;
LABEL_86:
      *(_QWORD *)(a1 + 776) = v84;
      return;
    }
    v85 = *(float **)(a1 + 768);
    v86 = v82 - v85;
    v87 = v86 + 1;
    if (!((unint64_t)(v86 + 1) >> 62))
    {
      v88 = v83 - (_QWORD)v85;
      if (v88 >> 1 > v87)
        v87 = v88 >> 1;
      if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFFCLL)
        v89 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v89 = v87;
      if (!v89)
      {
        v90 = 0;
LABEL_77:
        v91 = (float *)&v90[4 * v86];
        v92 = &v90[4 * v89];
        *v91 = v81;
        v84 = v91 + 1;
        if (v82 != v85)
        {
          v93 = (char *)v82 - (char *)v85 - 4;
          if (v93 < 0x2C)
            goto LABEL_93;
          if ((unint64_t)((char *)v85 - v90) < 0x20)
            goto LABEL_93;
          v94 = (v93 >> 2) + 1;
          v95 = &v90[4 * v86 - 16];
          v96 = v82 - 4;
          v97 = v94 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v98 = *(_OWORD *)v96;
            *(v95 - 1) = *((_OWORD *)v96 - 1);
            *v95 = v98;
            v95 -= 2;
            v96 -= 8;
            v97 -= 8;
          }
          while (v97);
          v91 -= v94 & 0x7FFFFFFFFFFFFFF8;
          v82 -= v94 & 0x7FFFFFFFFFFFFFF8;
          if (v94 != (v94 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_93:
            do
            {
              v99 = *((_DWORD *)v82-- - 1);
              *((_DWORD *)v91-- - 1) = v99;
            }
            while (v82 != v85);
          }
        }
        *(_QWORD *)(a1 + 768) = v91;
        *(_QWORD *)(a1 + 776) = v84;
        *(_QWORD *)(a1 + 784) = v92;
        if (v85)
          operator delete(v85);
        goto LABEL_86;
      }
      if (!(v89 >> 62))
      {
        v90 = operator new(4 * v89);
        goto LABEL_77;
      }
LABEL_89:
      sub_23938C4B8();
    }
LABEL_88:
    abort();
  }
}

void sub_2393E1204(uint64_t a1)
{
  sub_2393E73EC(a1);
  JUMPOUT(0x23B83C4BCLL);
}

uint64_t sub_2393E1228(uint64_t a1, const void *a2)
{
  NSObject *v4;
  _BYTE *v5;
  const char *v6;
  uint64_t v7;
  NSObject *v8;
  _BYTE *v9;
  int32x2_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  int v14;
  NSObject *v15;
  int v16;
  unsigned int v17;
  int v18;
  _OWORD *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  char v23;
  int v24;
  char *v25;
  unsigned __int8 v26;
  _QWORD *v27;
  dispatch_queue_t v28;
  void *v29;
  int32x2_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  _BOOL4 v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  BOOL v40;
  int8x16_t v41;
  int32x2_t v42;
  BOOL v43;
  const char *v44;
  int32x2_t v45;
  BOOL v46;
  NSObject *v47;
  _BYTE *v48;
  const char *v49;
  NSObject *v50;
  _BYTE *v52;
  _BYTE *v53;
  _BYTE *v54;
  _BYTE *v55;
  _BYTE *v56;
  int v57;
  double v58;
  double v59;
  double v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  int v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  unint64_t v69;
  __int128 v70;
  unint64_t v71;
  __int128 v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  int v76;
  unsigned int v77;
  unsigned int v78;
  id v79;
  void *v80;
  const char *v81;
  const char *v82;
  uint64_t v83;
  const char *v84;
  const char *v85;
  uint64_t v86;
  const char *v87;
  uint64_t v88;
  NSObject *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  _BYTE *v98;
  _BYTE *v99;
  _BYTE *v100;
  _BYTE *v101;
  NSObject *v102;
  _BYTE *v103;
  const char *v104;
  unsigned __int8 v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  float v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t *v126;
  unint64_t v127;
  NSObject *v128;
  _BYTE *v129;
  const char *v130;
  unsigned __int8 v131;
  std::__shared_weak_count *v132;
  uint64_t v133;
  unint64_t *v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t *v141;
  unint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  _BYTE *v145;
  _BYTE *v146;
  _BYTE *v147;
  unsigned __int8 v148;
  uint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  _BYTE *v156;
  _BYTE *v157;
  _BYTE *v158;
  _BYTE *v159;
  uint64_t v160;
  char v161;
  simd_float4x4 v162;
  float v163;
  uint64_t v164;
  float v165;
  float32x4_t v166;
  _BYTE buf[12];
  __int16 v168;
  int v169;
  char v170;
  _BYTE __p[80];
  __int128 v172;
  __int128 v173;
  float v174;
  int32x2_t v175;
  char v176;
  char v177;
  char v178;
  char v179;
  uint64_t v180;

  v180 = *MEMORY[0x24BDAC8D0];
  if (sub_2393E5E40((uint64_t)a2))
  {
    if (*(_BYTE *)(a1 + 88))
    {
      if (qword_2569304B0 != -1)
        dispatch_once(&qword_2569304B0, &unk_250AD6A78);
      v4 = (id)qword_2569304A8;
      if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        goto LABEL_80;
      sub_2393C4DD0(__p, "virtual VoxelHashingStatus oc::voxel_hashing::VoxelHashingPipelineGPUSubmaps::init(const VoxelHashingPipelineConfig &)");
      if (__p[23] >= 0)
        v5 = __p;
      else
        v5 = *(_BYTE **)__p;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v5;
      v168 = 1026;
      v169 = 37;
      v6 = "%s:%{public}d Failed to initialize VoxelHashingPipelineGPU - already initialized.";
      goto LABEL_91;
    }
    v160 = a1 + 128;
    memcpy((void *)(a1 + 128), a2, 0x140uLL);
    if (*(_BYTE *)(a1 + 305))
    {
      if (qword_2569304B0 != -1)
        dispatch_once(&qword_2569304B0, &unk_250AD6A78);
      v8 = (id)qword_2569304A8;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        sub_2393C4DD0(__p, "virtual VoxelHashingStatus oc::voxel_hashing::VoxelHashingPipelineGPUSubmaps::init(const VoxelHashingPipelineConfig &)");
        v9 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v9;
        v168 = 1026;
        v169 = 46;
        _os_log_impl(&dword_239388000, v8, OS_LOG_TYPE_INFO, "%s:%{public}d VoxelBlockPreallocation is enabled.", buf, 0x12u);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
      }

      *(float *)v10.i32 = *(float *)(a1 + 180) * 8.0;
      v11.i64[0] = 0x3F0000003F000000;
      v11.i64[1] = 0x3F0000003F000000;
      v12 = vdivq_f32(vmulq_f32(*(float32x4_t *)(a1 + 160), v11), (float32x4_t)vdupq_lane_s32(v10, 0));
      v12.i32[3] = 0;
      v13 = vrndpq_f32(v12);
      v14 = 8 * (int)v13.f32[1] * (int)v13.f32[0] * (int)v13.f32[2];
      if (*(_DWORD *)(a1 + 176) != v14)
      {
        if (qword_2569304B0 != -1)
          dispatch_once(&qword_2569304B0, &unk_250AD6A78);
        v15 = (id)qword_2569304A8;
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        {
          sub_2393C4DD0(buf, "virtual VoxelHashingStatus oc::voxel_hashing::VoxelHashingPipelineGPUSubmaps::init(const VoxelHashingPipelineConfig &)");
          v56 = v170 >= 0 ? buf : *(_BYTE **)buf;
          v57 = *(_DWORD *)(a1 + 176);
          v58 = *(float *)(a1 + 160);
          v59 = *(float *)(a1 + 164);
          v60 = *(float *)(a1 + 168);
          *(_DWORD *)__p = 136316674;
          *(_QWORD *)&__p[4] = v56;
          *(_WORD *)&__p[12] = 1026;
          *(_DWORD *)&__p[14] = 57;
          *(_WORD *)&__p[18] = 1026;
          *(_DWORD *)&__p[20] = v57;
          *(_WORD *)&__p[24] = 2050;
          *(double *)&__p[26] = v58;
          *(_WORD *)&__p[34] = 2050;
          *(double *)&__p[36] = v59;
          *(_WORD *)&__p[44] = 2050;
          *(double *)&__p[46] = v60;
          *(_WORD *)&__p[54] = 1026;
          *(_DWORD *)&__p[56] = v14;
          _os_log_error_impl(&dword_239388000, v15, OS_LOG_TYPE_ERROR, "%s:%{public}d Specified voxelHashingCapacity = %{public}d is insufficient/excessive to fill the bounding box with extents: [%{public}f, %{public}f, %{public}f], adjusted voxelHashingCapacity to %{public}d", __p, 0x3Cu);
          if (v170 < 0)
            operator delete(*(void **)buf);
        }

        *(_DWORD *)(a1 + 176) = v14;
      }
    }
    v163 = *(float *)(a1 + 180);
    v162 = __invert_f4(*(simd_float4x4 *)(a1 + 240));
    v16 = *(_DWORD *)(a1 + 132);
    if (v16)
      v17 = 0x8000;
    else
      v17 = 0x10000;
    v18 = *(_DWORD *)(a1 + 176);
    v164 = *(_QWORD *)(a1 + 200);
    v165 = *(float *)(a1 + 180);
    v166 = *(float32x4_t *)(a1 + 160);
    v19 = operator new(0x40uLL);
    v20 = MEMORY[0x24BDAEE00];
    v21 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 16);
    *v19 = *MEMORY[0x24BDAEE00];
    v19[1] = v21;
    v22 = *(_OWORD *)(v20 + 48);
    v19[2] = *(_OWORD *)(v20 + 32);
    v19[3] = v22;
    v23 = *(_BYTE *)(a1 + 208);
    v24 = *(unsigned __int8 *)(a1 + 305);
    v25 = (char *)operator new(0x2B0uLL);
    v161 = v23;
    *((_QWORD *)v25 + 1) = 0;
    *((_QWORD *)v25 + 2) = 0;
    *(_QWORD *)v25 = &off_250AD6AA8;
    v26 = atomic_load((unsigned __int8 *)&qword_256930538);
    if ((v26 & 1) == 0 && __cxa_guard_acquire(&qword_256930538))
    {
      qword_256930530 = sub_2393F2DD8();
      __cxa_atexit((void (*)(void *))sub_2393F2FA4, &qword_256930530, &dword_239388000);
      __cxa_guard_release(&qword_256930538);
    }
    *((_QWORD *)v25 + 4) = qword_256930530;
    v25[40] = 0;
    *((_QWORD *)v25 + 57) = 0;
    *((_QWORD *)v25 + 58) = 0;
    *((_QWORD *)v25 + 56) = 0;
    *((_OWORD *)v25 + 3) = 0u;
    *((_OWORD *)v25 + 4) = 0u;
    *((_OWORD *)v25 + 5) = 0u;
    *((_OWORD *)v25 + 6) = 0u;
    *((_OWORD *)v25 + 7) = 0u;
    *((_OWORD *)v25 + 8) = 0u;
    *((_OWORD *)v25 + 9) = 0u;
    *((_OWORD *)v25 + 10) = 0u;
    *((_OWORD *)v25 + 11) = 0u;
    *((_OWORD *)v25 + 12) = 0u;
    *((_OWORD *)v25 + 13) = 0u;
    *((_OWORD *)v25 + 14) = 0u;
    *((_OWORD *)v25 + 15) = 0u;
    *((_OWORD *)v25 + 16) = 0u;
    *((_OWORD *)v25 + 17) = 0u;
    *((_OWORD *)v25 + 18) = 0u;
    *((_OWORD *)v25 + 19) = 0u;
    *((_OWORD *)v25 + 20) = 0u;
    *((_OWORD *)v25 + 21) = 0u;
    *((_OWORD *)v25 + 22) = 0u;
    *((_OWORD *)v25 + 23) = 0u;
    *((_OWORD *)v25 + 24) = 0u;
    *((_OWORD *)v25 + 25) = 0u;
    *((_OWORD *)v25 + 26) = 0u;
    *(_OWORD *)(v25 + 428) = 0u;
    *(_OWORD *)(v25 + 556) = 0u;
    *((_OWORD *)v25 + 33) = 0u;
    *((_OWORD *)v25 + 34) = 0u;
    *((_OWORD *)v25 + 31) = 0u;
    *((_OWORD *)v25 + 32) = 0u;
    *((_OWORD *)v25 + 30) = 0u;
    *((_QWORD *)v25 + 72) = 0;
    *((_QWORD *)v25 + 74) = 0;
    *((_QWORD *)v25 + 73) = 0;
    *((_DWORD *)v25 + 150) = 0;
    *((_OWORD *)v25 + 38) = 0u;
    *((_OWORD *)v25 + 39) = 0u;
    *((_OWORD *)v25 + 40) = xmmword_2393F5520;
    *((_QWORD *)v25 + 82) = 0;
    v25[664] = 0;
    v27 = operator new(0x138uLL);
    v27[38] = 0;
    *((_OWORD *)v27 + 17) = 0u;
    *((_OWORD *)v27 + 18) = 0u;
    *((_OWORD *)v27 + 15) = 0u;
    *((_OWORD *)v27 + 16) = 0u;
    *((_OWORD *)v27 + 13) = 0u;
    *((_OWORD *)v27 + 14) = 0u;
    *((_OWORD *)v27 + 11) = 0u;
    *((_OWORD *)v27 + 12) = 0u;
    *((_OWORD *)v27 + 9) = 0u;
    *((_OWORD *)v27 + 10) = 0u;
    *((_OWORD *)v27 + 7) = 0u;
    *((_OWORD *)v27 + 8) = 0u;
    *((_OWORD *)v27 + 5) = 0u;
    *((_OWORD *)v27 + 6) = 0u;
    *((_OWORD *)v27 + 3) = 0u;
    *((_OWORD *)v27 + 4) = 0u;
    *((_OWORD *)v27 + 1) = 0u;
    *((_OWORD *)v27 + 2) = 0u;
    *(_OWORD *)v27 = 0u;
    *((_QWORD *)v25 + 76) = v27;
    *((_QWORD *)v25 + 77) = v27 + 39;
    *((_QWORD *)v25 + 78) = v27 + 39;
    v28 = dispatch_queue_create("com.apple.coreocmodules.voxelHashing_tripleBuffer_serial_queue", 0);
    v29 = (void *)*((_QWORD *)v25 + 82);
    *((_QWORD *)v25 + 82) = v28;

    v31 = (uint64_t)(v25 + 32);
    *((_DWORD *)v25 + 168) = 2;
    v25[676] = 0;
    v32 = *(std::__shared_weak_count **)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v25 + 32;
    *(_QWORD *)(a1 + 16) = v25;
    if (v32)
    {
      p_shared_owners = (unint64_t *)&v32->__shared_owners_;
      do
        v34 = __ldaxr(p_shared_owners);
      while (__stlxr(v34 - 1, p_shared_owners));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
      v31 = *(_QWORD *)(a1 + 8);
      if (!v31)
        goto LABEL_73;
    }
    v35 = v18 > 0;
    if (v24)
    {
      *(float *)v30.i32 = v165 * 8.0;
      v36.i64[0] = 0x3F0000003F000000;
      v36.i64[1] = 0x3F0000003F000000;
      v37 = vdivq_f32(vmulq_f32(v166, v36), (float32x4_t)vdupq_lane_s32(v30, 0));
      v37.i32[3] = 0;
      v38 = vrndpq_f32(v37);
      v35 = v18 > 0 && v18 == 8 * (int)v38.f32[1] * (int)v38.f32[0] * (int)v38.f32[2];
    }
    v40 = v16 == 1 || v24 == 0;
    if (v40
      && v35
      && (_DWORD)v164
      && HIDWORD(v164)
      && v165 >= 0.0001
      && v166.f32[0] > 0.0
      && (v41 = (int8x16_t)v166,
          v41.i32[0] = vextq_s8(v41, v41, 8uLL).u32[0],
          v42 = vcgtz_f32(*(float32x2_t *)v41.i8),
          (v42.i8[4] & 1) != 0)
      && (v42.i8[0] & 1) != 0
      && ((v43 = sub_2393EBB70((uint64_t)v19, (uint64_t)(v19 + 4)), v16 != 2) ? (v46 = v43) : (v46 = 0), v46))
    {
      if (*(_BYTE *)(v31 + 8))
      {
        if (qword_2569304C0 != -1)
          dispatch_once(&qword_2569304C0, &unk_250AD6C28);
        v47 = (id)qword_2569304B8;
        if (!os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
          goto LABEL_72;
        sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::VoxelHashingDataGPU::init(const InitConfig &)");
        if (__p[23] >= 0)
          v48 = __p;
        else
          v48 = *(_BYTE **)__p;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v48;
        v168 = 1026;
        v169 = 37;
        v49 = "%s:%{public}d Failed to initialize VoxelHashingDataGPU - already initialized.";
        goto LABEL_102;
      }
      v61 = vmulq_f32((float32x4_t)v162.columns[0], (float32x4_t)0);
      v62 = vmlaq_f32(vmulq_n_f32((float32x4_t)v162.columns[0], v163), (float32x4_t)0, (float32x4_t)v162.columns[1]);
      v63 = vmlaq_n_f32(v61, (float32x4_t)v162.columns[1], v163);
      *(_DWORD *)(v31 + 388) = 2;
      *(_DWORD *)(v31 + 392) = v17;
      *(_DWORD *)(v31 + 384) = v17 >> 1;
      *(_DWORD *)(v31 + 400) = v18;
      if (v18 >= 0x3E8)
        v64 = 1000;
      else
        v64 = v18;
      *(_DWORD *)(v31 + 404) = v64;
      *(_DWORD *)(v31 + 408) = 1;
      *(float *)v45.i32 = v165 * 8.0;
      v65.i64[0] = 0x3F0000003F000000;
      v65.i64[1] = 0x3F0000003F000000;
      v66 = vdivq_f32(vmulq_f32(v166, v65), (float32x4_t)vdupq_lane_s32(v45, 0));
      v66.i32[3] = 0;
      *(_DWORD *)(v31 + 396) = v17;
      v67 = vrndpq_f32(v66);
      v68 = vaddq_f32(v67, v67);
      *(uint32x2_t *)v68.f32 = vcvt_u32_f32(*(float32x2_t *)v68.f32);
      v68.i32[2] = v68.f32[2];
      *(float32x4_t *)(v31 + 448) = v68;
      LODWORD(v69) = 0;
      *((float *)&v69 + 1) = 1.0 / v165;
      *(_QWORD *)&v70 = 0;
      HIDWORD(v70) = 0;
      *((float *)&v70 + 2) = 1.0 / v165;
      *(_OWORD *)(v31 + 64) = COERCE_UNSIGNED_INT(1.0 / v165);
      *(_OWORD *)(v31 + 80) = v69;
      LODWORD(v71) = 0;
      *((float *)&v71 + 1) = v165;
      *(_OWORD *)(v31 + 128) = LODWORD(v165);
      *(_OWORD *)(v31 + 144) = v71;
      LODWORD(v71) = 0;
      *((float *)&v71 + 1) = 1.0 / (float)(v165 * 8.0);
      *(_QWORD *)&v72 = 0;
      HIDWORD(v72) = 0;
      *((float *)&v72 + 2) = *((float *)&v71 + 1);
      v68.i64[0] = 0;
      v68.i64[1] = LODWORD(v165);
      *(float *)(v31 + 56) = v165;
      *(float *)(v31 + 60) = v165 * 8.0;
      v73 = vmlaq_f32(v61, (float32x4_t)0, (float32x4_t)v162.columns[1]);
      *(_OWORD *)(v31 + 96) = v70;
      *(_OWORD *)(v31 + 112) = xmmword_2393F5320;
      *(float32x4_t *)(v31 + 160) = v68;
      *(_OWORD *)(v31 + 176) = xmmword_2393F5320;
      v74 = vmlaq_f32(vmlaq_n_f32(v73, (float32x4_t)v162.columns[2], v163), (float32x4_t)0, (float32x4_t)v162.columns[3]);
      v75 = vaddq_f32((float32x4_t)v162.columns[3], vmlaq_f32(v73, (float32x4_t)0, (float32x4_t)v162.columns[2]));
      *(_OWORD *)(v31 + 192) = HIDWORD(v71);
      *(_OWORD *)(v31 + 208) = v71;
      v73.i32[0] = 0;
      v73.f32[1] = v165 * 8.0;
      v68.i64[0] = 0;
      v68.i32[3] = 0;
      *(_OWORD *)(v31 + 224) = v72;
      *(_OWORD *)(v31 + 240) = xmmword_2393F5320;
      v68.f32[2] = v165 * 8.0;
      *(_OWORD *)(v31 + 256) = COERCE_UNSIGNED_INT(v165 * 8.0);
      *(_OWORD *)(v31 + 272) = v73.u64[0];
      *(float32x4_t *)(v31 + 288) = v68;
      *(_OWORD *)(v31 + 304) = xmmword_2393F5320;
      *(float32x4_t *)(v31 + 320) = vmlaq_f32(vmlaq_f32(v62, (float32x4_t)0, (float32x4_t)v162.columns[2]), (float32x4_t)0, (float32x4_t)v162.columns[3]);
      *(float32x4_t *)(v31 + 336) = vmlaq_f32(vmlaq_f32(v63, (float32x4_t)0, (float32x4_t)v162.columns[2]), (float32x4_t)0, (float32x4_t)v162.columns[3]);
      *(float32x4_t *)(v31 + 352) = v74;
      *(float32x4_t *)(v31 + 368) = v75;
      *(_DWORD *)(v31 + 560) = v164;
      *(_DWORD *)(v31 + 564) = 3 * v164;
      *(_DWORD *)(v31 + 568) = HIDWORD(v164);
      *(_DWORD *)(v31 + 640) = v16;
      *(_BYTE *)(v31 + 644) = v161;
      if (*(_QWORD *)v31)
      {
        v76 = *(_DWORD *)(v31 + 384);
        if (v76
          && (v77 = *(_DWORD *)(v31 + 392), v78 = *(_DWORD *)(v31 + 388), v78 - 1 < v77)
          && v77 == v78 * v76
          && !(v77 % v78)
          && v17 == v77
          && v18 >= 1
          && v64 - 1 < v18)
        {
          if ((sub_2393E9C0C(v31, v44) & 1) != 0)
          {
            if ((sub_2393E9ED4(v31) & 1) != 0)
            {
              sub_2393EAC84(v31);
              v79 = objc_alloc_init(MEMORY[0x24BDDD508]);
              v80 = *(void **)(v31 + 32);
              *(_QWORD *)(v31 + 32) = v79;

              objc_msgSend_setErrorOptions_(*(void **)(v31 + 32), v81, 1);
              objc_msgSend_commandBufferWithDescriptor_(*(void **)(*(_QWORD *)v31 + 8), v82, *(_QWORD *)(v31 + 32));
              v47 = objc_claimAutoreleasedReturnValue();
              if (v47)
              {
                sub_2393EAE70(v31, v47, v83);
                objc_msgSend_addCompletedHandler_(v47, v84, (uint64_t)&unk_250AD6C08);
                objc_msgSend_commit(v47, v85, v86);
                objc_msgSend_waitUntilCompleted(v47, v87, v88);
                if ((sub_2393EAF3C(v31, 0, (uint64_t)v19) & 1) != 0)
                {
                  sub_2393D9FE0((uint64_t *)__p);
                  sub_2393DA120((uint64_t *)(v31 + 16), (uint64_t *)__p);
                  sub_2393DA17C((uint64_t *)__p);
                  *(_BYTE *)(v31 + 8) = 1;
                  sub_2393EAC44();
                  v89 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v89, OS_LOG_TYPE_DEBUG))
                  {
                    sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::VoxelHashingDataGPU::init(const InitConfig &)");
                    v147 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
                    *(_DWORD *)buf = 136315394;
                    *(_QWORD *)&buf[4] = v147;
                    v168 = 1026;
                    v169 = 140;
                    _os_log_debug_impl(&dword_239388000, v89, OS_LOG_TYPE_DEBUG, "%s:%{public}d Successfully initialized VoxelHashingDataGPU.", buf, 0x12u);
                    if ((__p[23] & 0x80000000) != 0)
                      operator delete(*(void **)__p);
                  }

                  operator delete(v19);
                  v90 = operator new();
                  v91 = v90;
                  v93 = *(_QWORD *)(a1 + 8);
                  v92 = *(_QWORD *)(a1 + 16);
                  *(_QWORD *)__p = v93;
                  *(_QWORD *)&__p[8] = v92;
                  if (v92)
                  {
                    v94 = (unint64_t *)(v92 + 8);
                    do
                      v95 = __ldxr(v94);
                    while (__stxr(v95 + 1, v94));
                    *(_BYTE *)(v90 + 8) = 0;
                    *(_QWORD *)v90 = &off_250AD6820;
                    *(_QWORD *)(v90 + 16) = v93;
                    *(_QWORD *)(v90 + 24) = v92;
                    v96 = (unint64_t *)(v92 + 8);
                    do
                      v97 = __ldxr(v96);
                    while (__stxr(v97 + 1, v96));
                  }
                  else
                  {
                    *(_BYTE *)(v90 + 8) = 0;
                    *(_QWORD *)v90 = &off_250AD6820;
                    *(_QWORD *)(v90 + 16) = v93;
                    *(_QWORD *)(v90 + 24) = 0;
                  }
                  v105 = atomic_load((unsigned __int8 *)&qword_256930538);
                  if ((v105 & 1) == 0 && __cxa_guard_acquire(&qword_256930538))
                  {
                    qword_256930530 = sub_2393F2DD8();
                    __cxa_atexit((void (*)(void *))sub_2393F2FA4, &qword_256930530, &dword_239388000);
                    __cxa_guard_release(&qword_256930538);
                  }
                  v106 = qword_256930530;
                  *(_OWORD *)(v91 + 48) = 0u;
                  *(_QWORD *)(v91 + 32) = v106;
                  *(_OWORD *)(v91 + 64) = 0u;
                  *(_OWORD *)(v91 + 80) = 0u;
                  *(_OWORD *)(v91 + 96) = 0u;
                  *(_OWORD *)(v91 + 112) = 0u;
                  *(_OWORD *)(v91 + 128) = 0u;
                  *(_QWORD *)(v91 + 144) = 0;
                  *(_OWORD *)(v91 + 160) = 0u;
                  *(_OWORD *)(v91 + 176) = 0u;
                  *(_OWORD *)(v91 + 192) = 0u;
                  *(_OWORD *)(v91 + 208) = 0u;
                  *(_OWORD *)(v91 + 224) = 0u;
                  *(_OWORD *)(v91 + 240) = 0u;
                  *(_OWORD *)(v91 + 256) = 0u;
                  *(_OWORD *)(v91 + 272) = 0u;
                  *(_OWORD *)(v91 + 288) = 0u;
                  *(_QWORD *)(v91 + 301) = 0;
                  v107 = *(std::__shared_weak_count **)&__p[8];
                  *(_QWORD *)(v91 + 320) = *(_QWORD *)__p + 416;
                  *(_OWORD *)(v91 + 328) = 0u;
                  *(_OWORD *)(v91 + 344) = 0u;
                  *(_OWORD *)(v91 + 360) = 0u;
                  *(_OWORD *)(v91 + 376) = 0u;
                  *(_OWORD *)(v91 + 392) = 0u;
                  *(_DWORD *)(v91 + 408) = 0;
                  *(_OWORD *)(v91 + 416) = 0u;
                  *(_OWORD *)(v91 + 432) = 0u;
                  *(_OWORD *)(v91 + 448) = 0u;
                  *(_OWORD *)(v91 + 464) = 0u;
                  *(_OWORD *)(v91 + 480) = 0u;
                  *(_QWORD *)(v91 + 496) = 0;
                  *(_QWORD *)(v91 + 512) = 3;
                  *(_OWORD *)(v91 + 520) = xmmword_2393F5580;
                  __asm { FMOV            V0.4S, #3.0 }
                  *(_OWORD *)(v91 + 592) = xmmword_2393F9C20;
                  *(_OWORD *)(v91 + 608) = unk_2393F9C30;
                  *(_OWORD *)(v91 + 560) = xmmword_2393F9C00;
                  *(_OWORD *)(v91 + 576) = unk_2393F9C10;
                  *(_OWORD *)(v91 + 544) = _Q0;
                  *(_QWORD *)(v91 + 624) = 0x3F8000003C23D70ALL;
                  *(_DWORD *)(v91 + 632) = 1064849900;
                  *(_DWORD *)(v91 + 636) = 0x10000;
                  *(_QWORD *)(v91 + 640) = 0;
                  if (v107)
                  {
                    v112 = (unint64_t *)&v107->__shared_owners_;
                    do
                      v113 = __ldaxr(v112);
                    while (__stlxr(v113 - 1, v112));
                    if (!v113)
                    {
                      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
                      std::__shared_weak_count::__release_weak(v107);
                    }
                  }
                  v114 = *(_QWORD *)(a1 + 96);
                  *(_QWORD *)(a1 + 96) = v91;
                  if (v114)
                  {
                    (*(void (**)(uint64_t))(*(_QWORD *)v114 + 8))(v114);
                    v91 = *(_QWORD *)(a1 + 96);
                    if (!v91)
                      goto LABEL_180;
                  }
                  v115 = *(float *)(a1 + 180);
                  *(_QWORD *)__p = *(_QWORD *)(a1 + 128);
                  *(float32x2_t *)&__p[8] = vmul_n_f32((float32x2_t)0xC000000041000000, v115);
                  *(int32x2_t *)&__p[16] = vrev64_s32(*(int32x2_t *)(a1 + 140));
                  v116 = *(_OWORD *)(a1 + 240);
                  v117 = *(_OWORD *)(a1 + 256);
                  *(_OWORD *)&__p[32] = *(_OWORD *)(a1 + 160);
                  *(_OWORD *)&__p[48] = v116;
                  v118 = *(_OWORD *)(a1 + 272);
                  v119 = *(_OWORD *)(a1 + 288);
                  *(_OWORD *)&__p[64] = v117;
                  v172 = v118;
                  v173 = v119;
                  v174 = v115;
                  v175 = vrev64_s32(*(int32x2_t *)(a1 + 188));
                  v176 = *(_BYTE *)(a1 + 196);
                  v177 = *(_BYTE *)(a1 + 208);
                  v178 = *(_BYTE *)(a1 + 184);
                  v179 = *(_BYTE *)(a1 + 305);
                  if (((*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v91 + 16))(v91, __p) & 1) != 0)
                  {
                    v120 = operator new();
                    v121 = v120;
                    v123 = *(_QWORD *)(a1 + 8);
                    v122 = *(_QWORD *)(a1 + 16);
                    *(_QWORD *)__p = v123;
                    *(_QWORD *)&__p[8] = v122;
                    if (v122)
                    {
                      v124 = (unint64_t *)(v122 + 8);
                      do
                        v125 = __ldxr(v124);
                      while (__stxr(v125 + 1, v124));
                      *(_BYTE *)(v120 + 8) = 0;
                      *(_OWORD *)(v120 + 12) = 0u;
                      *(_OWORD *)(v120 + 28) = 0u;
                      *(_OWORD *)(v120 + 44) = 0u;
                      *(_OWORD *)(v120 + 60) = 0u;
                      *(_OWORD *)(v120 + 76) = 0u;
                      *(_OWORD *)(v120 + 92) = 0u;
                      *(_OWORD *)(v120 + 108) = 0u;
                      *(_DWORD *)(v120 + 124) = 0;
                      *(_QWORD *)v120 = &off_250AD6D90;
                      *(_QWORD *)(v120 + 128) = v123;
                      v126 = (unint64_t *)(v122 + 8);
                      *(_QWORD *)(v120 + 136) = v122;
                      do
                        v127 = __ldxr(v126);
                      while (__stxr(v127 + 1, v126));
                    }
                    else
                    {
                      *(_BYTE *)(v120 + 8) = 0;
                      *(_OWORD *)(v120 + 12) = 0u;
                      *(_OWORD *)(v120 + 28) = 0u;
                      *(_OWORD *)(v120 + 44) = 0u;
                      *(_OWORD *)(v120 + 60) = 0u;
                      *(_OWORD *)(v120 + 76) = 0u;
                      *(_OWORD *)(v120 + 92) = 0u;
                      *(_OWORD *)(v120 + 108) = 0u;
                      *(_DWORD *)(v120 + 124) = 0;
                      *(_QWORD *)v120 = &off_250AD6D90;
                      *(_QWORD *)(v120 + 128) = v123;
                      *(_QWORD *)(v120 + 136) = 0;
                    }
                    v131 = atomic_load((unsigned __int8 *)&qword_256930538);
                    if ((v131 & 1) == 0 && __cxa_guard_acquire(&qword_256930538))
                    {
                      qword_256930530 = sub_2393F2DD8();
                      __cxa_atexit((void (*)(void *))sub_2393F2FA4, &qword_256930530, &dword_239388000);
                      __cxa_guard_release(&qword_256930538);
                    }
                    v132 = *(std::__shared_weak_count **)&__p[8];
                    v133 = *(_QWORD *)__p + 416;
                    *(_QWORD *)(v121 + 144) = qword_256930530;
                    *(_QWORD *)(v121 + 152) = v133;
                    *(_DWORD *)(v121 + 224) = 1065353216;
                    *(_DWORD *)(v121 + 288) = 2;
                    *(_OWORD *)(v121 + 160) = 0u;
                    *(_OWORD *)(v121 + 176) = 0u;
                    *(_OWORD *)(v121 + 192) = 0u;
                    *(_OWORD *)(v121 + 208) = 0u;
                    *(_BYTE *)(v121 + 228) = 0;
                    *(_DWORD *)(v121 + 232) = 0;
                    *(_OWORD *)(v121 + 240) = 0u;
                    *(_OWORD *)(v121 + 256) = 0u;
                    *(_OWORD *)(v121 + 272) = 0u;
                    *(_BYTE *)(v121 + 292) = 0;
                    if (v132)
                    {
                      v134 = (unint64_t *)&v132->__shared_owners_;
                      do
                        v135 = __ldaxr(v134);
                      while (__stlxr(v135 - 1, v134));
                      if (!v135)
                      {
                        ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
                        std::__shared_weak_count::__release_weak(v132);
                      }
                    }
                    v136 = *(_QWORD *)(a1 + 104);
                    *(_QWORD *)(a1 + 104) = v121;
                    if (v136)
                    {
                      (*(void (**)(uint64_t))(*(_QWORD *)v136 + 8))(v136);
                      v121 = *(_QWORD *)(a1 + 104);
                      if (!v121)
                        goto LABEL_203;
                    }
                    *(_DWORD *)__p = *(_DWORD *)(a1 + 200);
                    *(_DWORD *)&__p[4] = *(_DWORD *)(a1 + 180);
                    __p[8] = *(_BYTE *)(a1 + 184);
                    *(simd_float4x4 *)&__p[16] = __invert_f4(*(simd_float4x4 *)(a1 + 240));
                    LODWORD(v172) = *(_DWORD *)(a1 + 132);
                    DWORD1(v172) = *(_DWORD *)(a1 + 212);
                    BYTE8(v172) = *(_BYTE *)(a1 + 208);
                    if (((*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v121 + 16))(v121, __p) & 1) != 0)
                    {
                      v137 = operator new();
                      v138 = v137;
                      v140 = *(_QWORD *)(a1 + 8);
                      v139 = *(_QWORD *)(a1 + 16);
                      *(_QWORD *)__p = v140;
                      *(_QWORD *)&__p[8] = v139;
                      if (v139)
                      {
                        v141 = (unint64_t *)(v139 + 8);
                        do
                          v142 = __ldxr(v141);
                        while (__stxr(v142 + 1, v141));
                        *(_BYTE *)(v137 + 8) = 0;
                        *(_QWORD *)(v137 + 16) = 0;
                        *(_QWORD *)(v137 + 24) = 0;
                        *(_QWORD *)v137 = &off_250AD6700;
                        *(_QWORD *)(v137 + 32) = v140;
                        v143 = (unint64_t *)(v139 + 8);
                        *(_QWORD *)(v137 + 40) = v139;
                        do
                          v144 = __ldxr(v143);
                        while (__stxr(v144 + 1, v143));
                      }
                      else
                      {
                        *(_BYTE *)(v137 + 8) = 0;
                        *(_QWORD *)(v137 + 16) = 0;
                        *(_QWORD *)(v137 + 24) = 0;
                        *(_QWORD *)v137 = &off_250AD6700;
                        *(_QWORD *)(v137 + 32) = v140;
                        *(_QWORD *)(v137 + 40) = 0;
                      }
                      v148 = atomic_load((unsigned __int8 *)&qword_256930538);
                      if ((v148 & 1) == 0 && __cxa_guard_acquire(&qword_256930538))
                      {
                        qword_256930530 = sub_2393F2DD8();
                        __cxa_atexit((void (*)(void *))sub_2393F2FA4, &qword_256930530, &dword_239388000);
                        __cxa_guard_release(&qword_256930538);
                      }
                      v149 = qword_256930530;
                      *(_QWORD *)(v138 + 56) = 0;
                      *(_QWORD *)(v138 + 64) = 0;
                      *(_QWORD *)(v138 + 48) = v149;
                      *(_OWORD *)(v138 + 80) = 0u;
                      *(_OWORD *)(v138 + 96) = 0u;
                      *(_OWORD *)(v138 + 112) = 0u;
                      *(_OWORD *)(v138 + 128) = 0u;
                      *(_BYTE *)(v138 + 144) = 0;
                      *(_QWORD *)(v138 + 156) = 0;
                      *(_QWORD *)(v138 + 148) = 0;
                      *(_DWORD *)(v138 + 164) = 0;
                      sub_2393D363C(v138 + 168);
                      *(_QWORD *)(v138 + 232) = 0;
                      sub_2393D363C(v138 + 240);
                      *(_OWORD *)(v138 + 304) = 0u;
                      *(_OWORD *)(v138 + 320) = 0u;
                      v150 = *(std::__shared_weak_count **)&__p[8];
                      if (*(_QWORD *)&__p[8])
                      {
                        v151 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
                        do
                          v152 = __ldaxr(v151);
                        while (__stlxr(v152 - 1, v151));
                        if (!v152)
                        {
                          ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
                          std::__shared_weak_count::__release_weak(v150);
                        }
                      }
                      v153 = *(_QWORD *)(a1 + 112);
                      *(_QWORD *)(a1 + 112) = v138;
                      if (!v153
                        || ((*(void (**)(uint64_t))(*(_QWORD *)v153 + 8))(v153),
                            (v138 = *(_QWORD *)(a1 + 112)) != 0))
                      {
                        v154 = (unint64_t)*(double *)(a1 + 216);
                        v155 = (unint64_t)*(double *)(a1 + 224);
                        *(simd_float4x4 *)__p = __invert_f4(*(simd_float4x4 *)(a1 + 240));
                        if (((*(uint64_t (**)(uint64_t, unint64_t, unint64_t, _BYTE *, _QWORD, float))(*(_QWORD *)v138 + 16))(v138, v154, v155, __p, *(unsigned __int8 *)(a1 + 184), *(float *)(a1 + 180)) & 1) != 0)
                        {
                          if (sub_2393E603C(a1, v160) && (sub_2393E625C((_QWORD *)a1, v160) & 1) != 0)
                          {
                            if (*(_BYTE *)(a1 + 306) && (sub_2393E6F1C(a1, v160) & 1) == 0)
                            {
                              sub_2393E719C();
                              v4 = objc_claimAutoreleasedReturnValue();
                              if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
                              {
                                sub_2393C4DD0(__p, "virtual VoxelHashingStatus oc::voxel_hashing::VoxelHashingPipelineGPUSubmaps::init(const VoxelHashingPipelineConfig &)");
                                if (__p[23] >= 0)
                                  v159 = __p;
                                else
                                  v159 = *(_BYTE **)__p;
                                *(_DWORD *)buf = 136315394;
                                *(_QWORD *)&buf[4] = v159;
                                v168 = 1026;
                                v169 = 77;
                                v6 = "%s:%{public}d Failed to initialize VoxelHashingPipelineGPU - invalid coverage config.";
                                goto LABEL_91;
                              }
                            }
                            else
                            {
                              *(_QWORD *)(a1 + 448) = 0x700000002;
                              *(_OWORD *)(a1 + 456) = xmmword_2393F5590;
                              if (sub_2393E71DC(a1 + 448))
                              {
                                *(_BYTE *)(a1 + 88) = 1;
                                sub_2393E719C();
                                v4 = objc_claimAutoreleasedReturnValue();
                                if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
                                {
                                  sub_2393C4DD0(__p, "virtual VoxelHashingStatus oc::voxel_hashing::VoxelHashingPipelineGPUSubmaps::init(const VoxelHashingPipelineConfig &)");
                                  v156 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
                                  *(_DWORD *)buf = 136315394;
                                  *(_QWORD *)&buf[4] = v156;
                                  v168 = 1026;
                                  v169 = 98;
                                  _os_log_impl(&dword_239388000, v4, OS_LOG_TYPE_DEFAULT, "%s:%{public}d Successfully initialized.", buf, 0x12u);
                                  if ((__p[23] & 0x80000000) != 0)
                                    operator delete(*(void **)__p);
                                }
                                v7 = 0;
                                goto LABEL_81;
                              }
                              sub_2393E719C();
                              v4 = objc_claimAutoreleasedReturnValue();
                              if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
                              {
                                sub_2393C4DD0(__p, "virtual VoxelHashingStatus oc::voxel_hashing::VoxelHashingPipelineGPUSubmaps::init(const VoxelHashingPipelineConfig &)");
                                if (__p[23] >= 0)
                                  v158 = __p;
                                else
                                  v158 = *(_BYTE **)__p;
                                *(_DWORD *)buf = 136315394;
                                *(_QWORD *)&buf[4] = v158;
                                v168 = 1026;
                                v169 = 91;
                                v6 = "%s:%{public}d Failed to initialize VoxelHashingPipelineGPU - invalid coverage score"
                                     " correction config.";
LABEL_91:
                                _os_log_error_impl(&dword_239388000, v4, OS_LOG_TYPE_ERROR, v6, buf, 0x12u);
                                if ((__p[23] & 0x80000000) != 0)
                                  operator delete(*(void **)__p);
                              }
                            }
LABEL_80:
                            v7 = 1;
                            goto LABEL_81;
                          }
LABEL_77:
                          if (qword_2569304B0 != -1)
                            dispatch_once(&qword_2569304B0, &unk_250AD6A78);
                          v4 = (id)qword_2569304A8;
                          if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
                            goto LABEL_80;
                          sub_2393C4DD0(__p, "virtual VoxelHashingStatus oc::voxel_hashing::VoxelHashingPipelineGPUSubmaps::init(const VoxelHashingPipelineConfig &)");
                          if (__p[23] >= 0)
                            v53 = __p;
                          else
                            v53 = *(_BYTE **)__p;
                          *(_DWORD *)buf = 136315394;
                          *(_QWORD *)&buf[4] = v53;
                          v168 = 1026;
                          v169 = 70;
                          v6 = "%s:%{public}d Failed to initialize VoxelHashingPipelineGPU - failed to initialize submodules.";
                          goto LABEL_91;
                        }
                      }
                      if (qword_2569304B0 != -1)
                        dispatch_once(&qword_2569304B0, &unk_250AD6A78);
                      v128 = (id)qword_2569304A8;
                      if (!os_log_type_enabled(v128, OS_LOG_TYPE_ERROR))
                      {
LABEL_252:

                        goto LABEL_77;
                      }
                      sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::VoxelHashingPipelineGPUSubmaps::configureVoxelDepthRenderer(const VoxelHashingPipelineConfig &)");
                      if (__p[23] >= 0)
                        v157 = __p;
                      else
                        v157 = *(_BYTE **)__p;
                      *(_DWORD *)buf = 136315394;
                      *(_QWORD *)&buf[4] = v157;
                      v168 = 1026;
                      v169 = 437;
                      v130 = "%s:%{public}d Failed to configure VoxelDepthRenderer.";
                    }
                    else
                    {
LABEL_203:
                      if (qword_2569304B0 != -1)
                        dispatch_once(&qword_2569304B0, &unk_250AD6A78);
                      v128 = (id)qword_2569304A8;
                      if (!os_log_type_enabled(v128, OS_LOG_TYPE_ERROR))
                        goto LABEL_252;
                      sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::VoxelHashingPipelineGPUSubmaps::configureVoxelSurfaceSampler(const VoxelHashingPipelineConfig &)");
                      if (__p[23] >= 0)
                        v145 = __p;
                      else
                        v145 = *(_BYTE **)__p;
                      *(_DWORD *)buf = 136315394;
                      *(_QWORD *)&buf[4] = v145;
                      v168 = 1026;
                      v169 = 423;
                      v130 = "%s:%{public}d Failed to configure VoxelSurfaceSampler.";
                    }
                  }
                  else
                  {
LABEL_180:
                    if (qword_2569304B0 != -1)
                      dispatch_once(&qword_2569304B0, &unk_250AD6A78);
                    v128 = (id)qword_2569304A8;
                    if (!os_log_type_enabled(v128, OS_LOG_TYPE_ERROR))
                      goto LABEL_252;
                    sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::VoxelHashingPipelineGPUSubmaps::configureVoxelIntegrator(const VoxelHashingPipelineConfig &)");
                    if (__p[23] >= 0)
                      v129 = __p;
                    else
                      v129 = *(_BYTE **)__p;
                    *(_DWORD *)buf = 136315394;
                    *(_QWORD *)&buf[4] = v129;
                    v168 = 1026;
                    v169 = 412;
                    v130 = "%s:%{public}d Failed to configure VoxelIntegrator.";
                  }
                  _os_log_error_impl(&dword_239388000, v128, OS_LOG_TYPE_ERROR, v130, buf, 0x12u);
                  if ((__p[23] & 0x80000000) != 0)
                    operator delete(*(void **)__p);
                  goto LABEL_252;
                }
                sub_2393EAC44();
                v102 = objc_claimAutoreleasedReturnValue();
                if (!os_log_type_enabled(v102, OS_LOG_TYPE_ERROR))
                  goto LABEL_163;
                sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::VoxelHashingDataGPU::init(const InitConfig &)");
                if (__p[23] >= 0)
                  v146 = __p;
                else
                  v146 = *(_BYTE **)__p;
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = v146;
                v168 = 1026;
                v169 = 130;
                v104 = "%s:%{public}d Failed to initialize VoxelHashingDataGPU - failed to update submap transforms.";
              }
              else
              {
                sub_2393EAC44();
                v102 = objc_claimAutoreleasedReturnValue();
                if (!os_log_type_enabled(v102, OS_LOG_TYPE_ERROR))
                {
LABEL_163:

                  goto LABEL_72;
                }
                sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::VoxelHashingDataGPU::init(const InitConfig &)");
                if (__p[23] >= 0)
                  v103 = __p;
                else
                  v103 = *(_BYTE **)__p;
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = v103;
                v168 = 1026;
                v169 = 111;
                v104 = "%s:%{public}d Failed to initialize VoxelHashingDataGPU - failed to create command buffer.";
              }
              _os_log_error_impl(&dword_239388000, v102, OS_LOG_TYPE_ERROR, v104, buf, 0x12u);
              if ((__p[23] & 0x80000000) != 0)
                operator delete(*(void **)__p);
              goto LABEL_163;
            }
            sub_2393EAC44();
            v47 = objc_claimAutoreleasedReturnValue();
            if (!os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
            {
LABEL_72:

LABEL_73:
              if (qword_2569304B0 != -1)
                dispatch_once(&qword_2569304B0, &unk_250AD6A78);
              v50 = (id)qword_2569304A8;
              if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
              {
                sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::VoxelHashingPipelineGPUSubmaps::configureVoxelHashingData(const VoxelHashingPipelineConfig &)");
                v54 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = v54;
                v168 = 1026;
                v169 = 401;
                _os_log_error_impl(&dword_239388000, v50, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to configure VoxelHashingData.", buf, 0x12u);
                if ((__p[23] & 0x80000000) != 0)
                  operator delete(*(void **)__p);
              }

              operator delete(v19);
              goto LABEL_77;
            }
            sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::VoxelHashingDataGPU::init(const InitConfig &)");
            if (__p[23] >= 0)
              v101 = __p;
            else
              v101 = *(_BYTE **)__p;
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = v101;
            v168 = 1026;
            v169 = 100;
            v49 = "%s:%{public}d Failed to initialize VoxelHashingDataGPU - failed to create metal buffers.";
          }
          else
          {
            if (qword_2569304C0 != -1)
              dispatch_once(&qword_2569304C0, &unk_250AD6C28);
            v47 = (id)qword_2569304B8;
            if (!os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
              goto LABEL_72;
            sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::VoxelHashingDataGPU::init(const InitConfig &)");
            if (__p[23] >= 0)
              v100 = __p;
            else
              v100 = *(_BYTE **)__p;
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = v100;
            v168 = 1026;
            v169 = 94;
            v49 = "%s:%{public}d Failed to initialize VoxelHashingDataGPU - failed to create pipeline states.";
          }
        }
        else
        {
          if (qword_2569304C0 != -1)
            dispatch_once(&qword_2569304C0, &unk_250AD6C28);
          v47 = (id)qword_2569304B8;
          if (!os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
            goto LABEL_72;
          sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::VoxelHashingDataGPU::init(const InitConfig &)");
          if (__p[23] >= 0)
            v98 = __p;
          else
            v98 = *(_BYTE **)__p;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v98;
          v168 = 1026;
          v169 = 88;
          v49 = "%s:%{public}d Failed to initialize VoxelHashingDataGPU - hash table params are invalid.";
        }
      }
      else
      {
        if (qword_2569304C0 != -1)
          dispatch_once(&qword_2569304C0, &unk_250AD6C28);
        v47 = (id)qword_2569304B8;
        if (!os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
          goto LABEL_72;
        sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::VoxelHashingDataGPU::init(const InitConfig &)");
        if (__p[23] >= 0)
          v99 = __p;
        else
          v99 = *(_BYTE **)__p;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v99;
        v168 = 1026;
        v169 = 82;
        v49 = "%s:%{public}d Failed to initialize VoxelHashingDataGPU - failed to get MTLDeviceContext.";
      }
    }
    else
    {
      if (qword_2569304C0 != -1)
        dispatch_once(&qword_2569304C0, &unk_250AD6C28);
      v47 = (id)qword_2569304B8;
      if (!os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
        goto LABEL_72;
      sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::VoxelHashingDataGPU::init(const InitConfig &)");
      if (__p[23] >= 0)
        v55 = __p;
      else
        v55 = *(_BYTE **)__p;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v55;
      v168 = 1026;
      v169 = 31;
      v49 = "%s:%{public}d Failed to initialize VoxelHashingDataGPU - invalid config for VoxelHashingDataGPU.";
    }
LABEL_102:
    _os_log_error_impl(&dword_239388000, v47, OS_LOG_TYPE_ERROR, v49, buf, 0x12u);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    goto LABEL_72;
  }
  if (qword_2569304B0 != -1)
    dispatch_once(&qword_2569304B0, &unk_250AD6A78);
  v4 = (id)qword_2569304A8;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    sub_2393C4DD0(__p, "virtual VoxelHashingStatus oc::voxel_hashing::VoxelHashingPipelineGPUSubmaps::init(const VoxelHashingPipelineConfig &)");
    v52 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v52;
    v168 = 1026;
    v169 = 31;
    _os_log_error_impl(&dword_239388000, v4, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to initialize VoxelHashingPipelineGPU - invalid config.", buf, 0x12u);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
  }
  v7 = 4;
LABEL_81:

  return v7;
}

void sub_2393E2D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  std::__shared_weak_count **v31;
  uint64_t v32;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;

  __cxa_guard_abort(&qword_256930538);
  v34 = *v31;
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  sub_2393BB9F0((uint64_t)&a31);
  MEMORY[0x23B83C4BC](v32, 0x10E1C405E8DB06BLL);
  _Unwind_Resume(a1);
}

void sub_2393E2EE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2393E2EF8()
{
  uint64_t v0;
  void **v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;

  v2 = *v1;
  if (*v1)
  {
    v3 = *(_QWORD *)(v0 + 616);
    v4 = *v1;
    if ((void *)v3 != v2)
    {
      do
      {
        v3 -= 104;
        sub_2393E738C(v3);
      }
      while ((void *)v3 != v2);
      v4 = *v1;
    }
    *(_QWORD *)(v0 + 616) = v2;
    operator delete(v4);
  }

  v5 = *(void **)(v0 + 448);
  if (v5)
  {
    *(_QWORD *)(v0 + 456) = v5;
    operator delete(v5);
  }

  v6 = *(_QWORD *)(v0 + 48);
  *(_QWORD *)(v0 + 48) = 0;
  if (v6)
  {

    MEMORY[0x23B83C4BC](v6, 0xE0C40BC9ECFC2);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v0);
  operator delete(v7);
  JUMPOUT(0x2393E301CLL);
}

uint64_t sub_2393E3030()
{
  return 2;
}

uint64_t sub_2393E3038(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSObject *v11;
  void **v12;
  void *__p[2];
  char v14;
  uint8_t buf[4];
  void **v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 88))
  {
    kdebug_trace();
    LODWORD(a5) = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), a2, a3, a4, a5);
    kdebug_trace();
    return a5 ^ 1;
  }
  else
  {
    if (qword_2569304B0 != -1)
      dispatch_once(&qword_2569304B0, &unk_250AD6A78);
    v11 = (id)qword_2569304A8;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      sub_2393C4DD0(__p, "virtual VoxelHashingStatus oc::voxel_hashing::VoxelHashingPipelineGPUSubmaps::integratePointCloud(const simd_float4x4 &, const uint32_t, const oc::common::Point *, const common::PointSupplements *)");
      if (v14 >= 0)
        v12 = __p;
      else
        v12 = (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      v16 = v12;
      v17 = 1026;
      v18 = 114;
      _os_log_error_impl(&dword_239388000, v11, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to integrate pointcloud - pipeline not initialized.", buf, 0x12u);
      if (v14 < 0)
        operator delete(__p[0]);
    }

    return 1;
  }
}

uint64_t sub_2393E31E4(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  float v6;
  const char *v7;
  uint64_t v8;
  BOOL v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t result;
  uint64_t *v13;
  uint64_t v14;
  float *v15;
  float *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  unsigned int v29;
  simd_float4x4 *v31;
  simd_float4x4 *v32;
  simd_float4x4 *v33;
  unint64_t v34;
  float v35;
  unint64_t v36;
  float32x4_t *v37;
  int64x2_t v38;
  float32x4_t v39;
  int8x16_t v40;
  uint64_t v41;
  int64x2_t v42;
  int64x2_t v43;
  int64x2_t v44;
  int32x4_t v45;
  int8x16_t v46;
  int64x2_t v47;
  int64x2_t v48;
  int32x4_t v49;
  int64x2_t v50;
  uint64_t v51;
  float v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  void *v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  const char *v69;
  uint64_t v70;
  const char *v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  int32x2_t v80;
  float v81;
  uint64_t v82;
  unsigned int v83;
  NSObject *v84;
  NSObject *v85;
  float32x4_t v86;
  uint64_t v87;
  float32x4_t *v88;
  int32x4_t v89;
  int32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  uint64_t v93;
  float *v94;
  float v95;
  unsigned int v96;
  unsigned int v97;
  float v98;
  void *v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  const char *v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  int32x4_t v107;
  int32x4_t v108;
  unsigned int v109;
  _DWORD *v110;
  unsigned int i;
  int32x4_t v112;
  uint64_t v113;
  unsigned int v114;
  int32x4_t v115;
  int32x4_t v116;
  float *v117;
  int32x4_t v118;
  float *v119;
  void *v120;
  const char *v121;
  const char *v122;
  const char *v123;
  const char *v124;
  const char *v125;
  const char *v126;
  const char *v127;
  const char *v128;
  const char *v129;
  const char *v130;
  const char *v131;
  const char *v132;
  const char *v133;
  uint64_t v134;
  uint64_t v135;
  const char *v136;
  const char *v137;
  uint64_t v138;
  const char *v139;
  uint64_t v140;
  const char *v141;
  uint64_t v142;
  uint64_t v143;
  NSObject *v144;
  NSObject *v145;
  void **v146;
  const char *v147;
  uint64_t v148;
  const char *v149;
  uint64_t v150;
  _DWORD *v151;
  simd_float4x4 *p_p;
  simd_float4x4 *v153;
  simd_float4x4 *v154;
  simd_float4x4 *v155;
  unint64_t v156;
  int64_t v157;
  simd_float4x4 __p;
  BOOL v159;
  unsigned int v160;
  _BYTE buf[24];
  uint64_t v162;

  v162 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 88))
  {
    if (qword_2569304B0 != -1)
      dispatch_once(&qword_2569304B0, &unk_250AD6A78);
    v11 = (id)qword_2569304A8;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      goto LABEL_21;
    sub_2393C4DD0(&__p, "virtual VoxelHashingStatus oc::voxel_hashing::VoxelHashingPipelineGPUSubmaps::sampleSurfacePoints(const uint32_t)");
    v33 = __p.columns[1].i8[7] >= 0 ? &__p : (simd_float4x4 *)__p.columns[0].i64[0];
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v33;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = 135;
    _os_log_error_impl(&dword_239388000, v11, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to sample surface points - pipeline not initialized.", buf, 0x12u);
    if ((__p.columns[1].i8[7] & 0x80000000) == 0)
      goto LABEL_21;
LABEL_61:
    operator delete((void *)__p.columns[0].i64[0]);
LABEL_21:

    return 1;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 104) + 24))(*(_QWORD *)(a1 + 104));
  if (!*(_BYTE *)(a1 + 306))
    goto LABEL_76;
  v4 = sub_2393ED418(*(_QWORD *)(a1 + 8));
  v5 = *(_QWORD *)(a1 + 472);
  v6 = *(float *)(a1 + 180);
  __p = __invert_f4(*(simd_float4x4 *)(a1 + 240));
  v9 = *(_DWORD *)(v5 + 4) != 1 || v4 == 0;
  if (v9
    || !*(_QWORD *)v4
    || !*(_QWORD *)(v4 + 8)
    || !*(_QWORD *)(v4 + 16)
    || *(_DWORD *)objc_msgSend_contents(*(void **)v4, v7, v8) < *(_DWORD *)(v5 + 16)
    || (v13 = (uint64_t *)(v5 + 128), *(_QWORD *)(v5 + 128) != *(_QWORD *)(v5 + 136))
    && (!*(_BYTE *)(v5 + 480)
     || (v14 = v5 + 192, (sub_2393C148C(v14, (uint64_t)&__p, v4, v6) & 1) == 0)
     || (sub_2393C2E44(v14, v13) & 1) == 0))
  {
    if (qword_2569304B0 != -1)
      dispatch_once(&qword_2569304B0, &unk_250AD6A78);
    v10 = (id)qword_2569304A8;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      sub_2393C4DD0(&__p, "BOOL oc::voxel_hashing::VoxelHashingPipelineGPUSubmaps::computeCoverage()");
      v31 = __p.columns[1].i8[7] >= 0 ? &__p : (simd_float4x4 *)__p.columns[0].i64[0];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v31;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = 510;
      _os_log_error_impl(&dword_239388000, v10, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to compute coverage scores.", buf, 0x12u);
      if (__p.columns[1].i8[7] < 0)
        operator delete((void *)__p.columns[0].i64[0]);
    }

    if (qword_2569304B0 != -1)
      dispatch_once(&qword_2569304B0, &unk_250AD6A78);
    v11 = (id)qword_2569304A8;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      goto LABEL_21;
    sub_2393C4DD0(&__p, "virtual VoxelHashingStatus oc::voxel_hashing::VoxelHashingPipelineGPUSubmaps::sampleSurfacePoints(const uint32_t)");
    v32 = __p.columns[1].i8[7] >= 0 ? &__p : (simd_float4x4 *)__p.columns[0].i64[0];
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v32;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = 143;
    _os_log_error_impl(&dword_239388000, v11, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to sample surface points - failed to compute coverage.", buf, 0x12u);
    if ((__p.columns[1].i8[7] & 0x80000000) == 0)
      goto LABEL_21;
    goto LABEL_61;
  }
  v15 = *(float **)(v4 + 48);
  v16 = *(float **)(v4 + 56);
  if (v15 == v16)
  {
    v35 = 0.0;
    goto LABEL_75;
  }
  v17 = 0;
  v157 = (char *)v16 - (char *)v15;
  v18 = *(_QWORD *)(v4 + 72);
  v19 = *(_DWORD *)(a1 + 448) + 1;
  v20 = *(_DWORD *)(a1 + 452) + 1;
  v156 = v16 - v15;
  if (v156 <= 1)
    v21 = 1;
  else
    v21 = v16 - v15;
  do
  {
    v29 = *(_DWORD *)(v18 + 4 * v17);
    if (v29 - 1 < *(_DWORD *)(a1 + 448))
    {
      v22 = v17;
      v23 = v15[v17];
      v24 = *(float *)(a1 + 456);
LABEL_31:
      v25 = v23 / v24;
      v15[v22] = v25;
      goto LABEL_32;
    }
    if (v29 >= v19 && v29 <= *(_DWORD *)(a1 + 452))
    {
      v22 = v17;
      v23 = v15[v17];
      v24 = *(float *)(a1 + 460);
      goto LABEL_31;
    }
    v25 = v15[v17];
    if (v29 >= v20)
    {
      v25 = v25 / *(float *)(a1 + 464);
      v15[v17] = v25;
    }
LABEL_32:
    v26 = powf(fmaxf(v25, 0.0), *(float *)(a1 + 468));
    if (v26 <= 1.0)
      v27 = v26;
    else
      v27 = 1.0;
    if (v26 >= 0.0)
      v28 = v27;
    else
      v28 = 0.0;
    v15[v17++] = v28;
  }
  while (v21 != v17);
  if ((unint64_t)(v157 - 4) >= 0x1C)
  {
    v36 = ((unint64_t)(v157 - 4) >> 2) + 1;
    v37 = (float32x4_t *)(v15 + 4);
    v38 = 0uLL;
    v39 = (float32x4_t)vdupq_n_s32(0x3F4CCCCDu);
    v40 = (int8x16_t)vdupq_n_s64(1uLL);
    v41 = v36 & 0x7FFFFFFFFFFFFFF8;
    v42 = 0uLL;
    v43 = 0uLL;
    v44 = 0uLL;
    do
    {
      v45 = vcgtq_f32(v37[-1], v39);
      v46.i64[0] = v45.u32[0];
      v46.i64[1] = v45.u32[1];
      v47 = (int64x2_t)vandq_s8(v46, v40);
      v46.i64[0] = v45.u32[2];
      v46.i64[1] = v45.u32[3];
      v48 = (int64x2_t)vandq_s8(v46, v40);
      v49 = vcgtq_f32(*v37, v39);
      v46.i64[0] = v49.u32[0];
      v46.i64[1] = v49.u32[1];
      v50 = (int64x2_t)vandq_s8(v46, v40);
      v46.i64[0] = v49.u32[2];
      v46.i64[1] = v49.u32[3];
      v42 = vaddq_s64(v42, v48);
      v38 = vaddq_s64(v38, v47);
      v44 = vaddq_s64(v44, (int64x2_t)vandq_s8(v46, v40));
      v43 = vaddq_s64(v43, v50);
      v37 += 2;
      v41 -= 8;
    }
    while (v41);
    v34 = vaddvq_s64(vaddq_s64(vaddq_s64(v43, v38), vaddq_s64(v44, v42)));
    if (v36 != (v36 & 0x7FFFFFFFFFFFFFF8))
    {
      v15 += v36 & 0x7FFFFFFFFFFFFFF8;
      goto LABEL_70;
    }
    v51 = v16 - v15;
  }
  else
  {
    v34 = 0;
LABEL_70:
    v51 = v156;
    do
    {
      v52 = *v15++;
      if (v52 > 0.8)
        ++v34;
    }
    while (v15 != v16);
  }
  v35 = (float)v34 / (float)(unint64_t)v51;
LABEL_75:
  *(float *)(v4 + 96) = v35;
LABEL_76:
  if (!a2)
    goto LABEL_122;
  kdebug_trace();
  v53 = *(_QWORD *)(a1 + 120);
  if (!*(_BYTE *)(v53 + 160))
  {
    if (qword_256930368 != -1)
      dispatch_once(&qword_256930368, &unk_250AD5E50);
    v84 = (id)qword_256930360;
    if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR))
    {
      sub_2393C4DD0(&__p, "BOOL oc::voxel_hashing::MeshSurfaceSamplerGPU::samplePointsFromMesh(const uint32_t)");
      v153 = __p.columns[1].i8[7] >= 0 ? &__p : (simd_float4x4 *)__p.columns[0].i64[0];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v153;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = 59;
      _os_log_error_impl(&dword_239388000, v84, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to sample points from mesh - MeshSurfaceSamplerGPU not initialized", buf, 0x12u);
      if (__p.columns[1].i8[7] < 0)
        operator delete((void *)__p.columns[0].i64[0]);
    }

    kdebug_trace();
    return 1;
  }
  v54 = sub_2393ED418(*(_QWORD *)v53);
  if (!*(_DWORD *)objc_msgSend_contents(*(void **)(v54 + 16), v55, v56))
  {
    if (qword_256930368 != -1)
      dispatch_once(&qword_256930368, &unk_250AD5E50);
    v85 = (id)qword_256930360;
    if (!os_log_type_enabled(v85, OS_LOG_TYPE_DEBUG))
      goto LABEL_92;
    sub_2393C4DD0(&__p, "BOOL oc::voxel_hashing::MeshSurfaceSamplerGPU::samplePointsFromMesh(const uint32_t)");
    v155 = __p.columns[1].i8[7] >= 0 ? &__p : (simd_float4x4 *)__p.columns[0].i64[0];
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v155;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = 78;
    _os_log_debug_impl(&dword_239388000, v85, OS_LOG_TYPE_DEBUG, "%s:%{public}d Can't sample points from mesh - triangle mesh is empty", buf, 0x12u);
    if ((__p.columns[1].i8[7] & 0x80000000) == 0)
      goto LABEL_92;
LABEL_148:
    operator delete((void *)__p.columns[0].i64[0]);
LABEL_92:

    goto LABEL_121;
  }
  v59 = (void *)objc_msgSend_contents(*(void **)(v53 + 56), v57, v58);
  memcpy(v59, *(const void **)(v54 + 48), *(_QWORD *)(v54 + 56) - *(_QWORD *)(v54 + 48));
  v62 = objc_msgSend_contents(*(void **)(v53 + 40), v60, v61);
  v65 = objc_msgSend_contents(*(void **)(v54 + 8), v63, v64);
  v68 = objc_msgSend_contents(*(void **)(v54 + 24), v66, v67);
  v72 = *(_DWORD *)objc_msgSend_contents(*(void **)(v54 + 16), v69, v70);
  if (!v72)
    goto LABEL_116;
  v73 = 0;
  LODWORD(v74) = 0;
  do
  {
    v75 = *(float32x4_t *)(v65 + 48 * *(unsigned int *)(v68 + 4 * v73));
    v76 = vsubq_f32(*(float32x4_t *)(v65 + 48 * *(unsigned int *)(v68 + 4 * (v73 + 1))), v75);
    v77 = vsubq_f32(*(float32x4_t *)(v65 + 48 * *(unsigned int *)(v68 + 4 * (v73 + 2))), v75);
    v78 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v77, (int32x4_t)v77), (int8x16_t)v77, 0xCuLL), vnegq_f32(v76)), v77, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v76, (int32x4_t)v76), (int8x16_t)v76, 0xCuLL));
    v79 = vmulq_f32(v78, v78);
    v80 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v79.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v79, 2), v79)).u64[0];
    *(float *)(v62 + 4 * v74) = sqrtf(*(float *)v80.i32) * 0.5;
    v74 = (v74 + 1);
    v73 += 3;
  }
  while (v73 < v72);
  if (!(_DWORD)v74)
    goto LABEL_116;
  v81 = *(float *)(*(_QWORD *)v53 + 56) * *(float *)(*(_QWORD *)v53 + 56);
  *(float *)v80.i32 = fminf(v81, 0.000049);
  if (v74 <= 7)
  {
    v82 = 0;
    v83 = 0;
    goto LABEL_96;
  }
  v82 = v74 & 0xFFFFFFF8;
  v86 = (float32x4_t)vdupq_lane_s32(v80, 0);
  v87 = v82;
  v88 = (float32x4_t *)(v62 + 16);
  v89 = 0uLL;
  v90 = 0uLL;
  do
  {
    v91 = vrndpq_f32(vdivq_f32(vmulq_n_f32(v88[-1], v81), v86));
    v92 = vrndpq_f32(vdivq_f32(vmulq_n_f32(*v88, v81), v86));
    v88[-1] = v91;
    *v88 = v92;
    v89 = vaddq_s32(v89, (int32x4_t)vcvtq_u32_f32(v91));
    v90 = vaddq_s32(v90, (int32x4_t)vcvtq_u32_f32(v92));
    v88 += 2;
    v87 -= 8;
  }
  while (v87);
  v83 = vaddvq_s32(vaddq_s32(v90, v89));
  if (v82 != v74)
  {
LABEL_96:
    v93 = v74 - v82;
    v94 = (float *)(v62 + 4 * v82);
    do
    {
      v95 = (float)(v81 * *v94) / *(float *)v80.i32;
      *v94++ = ceilf(v95);
      v83 += vcvtps_u32_f32(v95);
      --v93;
    }
    while (v93);
  }
  v96 = *(_DWORD *)(v53 + 64);
  if (v83 > v96)
  {
    v97 = 0;
    do
    {
      v98 = *(float *)(v62 + 4 * v97);
      if (v98)
      {
        *(float *)(v62 + 4 * v97) = ceilf(v98 + -1.0);
        --v83;
      }
      ++v97;
    }
    while (v83 > v96);
  }
  if (!v83)
  {
LABEL_116:
    if (qword_256930368 != -1)
      dispatch_once(&qword_256930368, &unk_250AD5E50);
    v85 = (id)qword_256930360;
    if (!os_log_type_enabled(v85, OS_LOG_TYPE_DEBUG))
      goto LABEL_92;
    sub_2393C4DD0(&__p, "BOOL oc::voxel_hashing::MeshSurfaceSamplerGPU::samplePointsFromMesh(const uint32_t)");
    v154 = __p.columns[1].i8[7] >= 0 ? &__p : (simd_float4x4 *)__p.columns[0].i64[0];
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v154;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = 94;
    _os_log_debug_impl(&dword_239388000, v85, OS_LOG_TYPE_DEBUG, "%s:%{public}d Can't sample points from mesh - num of computed points is 0", buf, 0x12u);
    if ((__p.columns[1].i8[7] & 0x80000000) == 0)
      goto LABEL_92;
    goto LABEL_148;
  }
  objc_msgSend_commandBufferWithDescriptor_(*(void **)(*(_QWORD *)(v53 + 16) + 8), v71, *(_QWORD *)(v53 + 32));
  v99 = (void *)objc_claimAutoreleasedReturnValue();
  v102 = objc_msgSend_contents(*(void **)(v53 + 48), v100, v101);
  v105 = 0;
  v106 = 0;
  v107.i64[0] = 0x400000004;
  v107.i64[1] = 0x400000004;
  v108.i64[0] = 0x800000008;
  v108.i64[1] = 0x800000008;
  do
  {
    v109 = vcvtps_u32_f32(*(float *)(v62 + 4 * v105));
    if (!v109)
      goto LABEL_105;
    if (v109 <= 7 || __CFADD__(v106, v109 - 1))
    {
      for (i = 0; i != v109; ++i)
      {
LABEL_111:
        v110 = (_DWORD *)(v102 + 8 * v106);
        *v110 = v105;
        v110[1] = i;
        ++v106;
      }
      goto LABEL_105;
    }
    i = v109 & 0xFFFFFFF8;
    v112 = vdupq_n_s32(v105);
    v113 = v109 & 0xFFFFFFF8;
    v114 = v106;
    v115 = (int32x4_t)xmmword_2393F5490;
    do
    {
      v116 = vaddq_s32(v115, v107);
      v117 = (float *)(v102 + 8 * v114);
      v118 = v112;
      vst2q_f32(v117, *(float32x4x2_t *)(&v115 - 1));
      v119 = (float *)(v102 + 8 * (v114 + 4));
      vst2q_f32(v119, *(float32x4x2_t *)v112.i8);
      v115 = vaddq_s32(v115, v108);
      v114 += 8;
      v113 -= 8;
    }
    while (v113);
    v106 += i;
    if (i != v109)
      goto LABEL_111;
LABEL_105:
    ++v105;
  }
  while (v105 != v74);
  v160 = v83;
  v159 = *(_QWORD *)(v54 + 48) != *(_QWORD *)(v54 + 56);
  objc_msgSend_computeCommandEncoder(v99, v103, v104, COERCE_DOUBLE(0x100000000), COERCE_DOUBLE(0x400000004), COERCE_DOUBLE(0x800000008));
  v120 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setLabel_(v120, v121, (uint64_t)CFSTR("SamplePointsFromTriangleMesh Encoder"));
  objc_msgSend_setComputePipelineState_(v120, v122, *(_QWORD *)(v53 + 24));
  objc_msgSend_setBytes_length_atIndex_(v120, v123, v53 + 144, 16, 0);
  objc_msgSend_setBytes_length_atIndex_(v120, v124, v53 + 64, 4, 1);
  objc_msgSend_setBuffer_offset_atIndex_(v120, v125, *(_QWORD *)(v54 + 16), 0, 2);
  objc_msgSend_setBuffer_offset_atIndex_(v120, v126, *(_QWORD *)(v54 + 24), 0, 3);
  objc_msgSend_setBuffer_offset_atIndex_(v120, v127, *(_QWORD *)(v54 + 8), 0, 4);
  objc_msgSend_setBuffer_offset_atIndex_(v120, v128, *(_QWORD *)(v53 + 56), 0, 5);
  objc_msgSend_setBytes_length_atIndex_(v120, v129, (uint64_t)&v159, 1, 6);
  objc_msgSend_setBuffer_offset_atIndex_(v120, v130, *(_QWORD *)(v53 + 48), 0, 7);
  objc_msgSend_setBytes_length_atIndex_(v120, v131, (uint64_t)&v160, 4, 8);
  objc_msgSend_setBuffer_offset_atIndex_(v120, v132, *(_QWORD *)(v54 + 40), 0, 9);
  v135 = objc_msgSend_maxTotalThreadsPerThreadgroup(*(void **)(v53 + 24), v133, v134);
  __p.columns[0].i64[0] = v160;
  *(int64x2_t *)((char *)__p.columns + 8) = vdupq_n_s64(1uLL);
  *(_QWORD *)buf = v135;
  *(simd_float4 *)&buf[8] = *(simd_float4 *)((char *)__p.columns + 8);
  objc_msgSend_dispatchThreads_threadsPerThreadgroup_(v120, v136, (uint64_t)&__p, buf);
  objc_msgSend_endEncoding(v120, v137, v138);

  objc_msgSend_commit(v99, v139, v140);
  objc_msgSend_waitUntilCompleted(v99, v141, v142);
  *(_DWORD *)(v54 + 32) = v83;

LABEL_121:
  kdebug_trace();
LABEL_122:
  v143 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v143 + 8))
  {
    v144 = *(NSObject **)(v143 + 624);
    __p.columns[0].i64[0] = MEMORY[0x24BDAC760];
    __p.columns[0].i64[1] = 3221225472;
    __p.columns[1].i64[0] = (uint64_t)sub_2393ED6CC;
    __p.columns[1].i64[1] = (uint64_t)&unk_250AD6C48;
    __p.columns[2].i64[0] = v143 + 576;
    dispatch_sync(v144, &__p);
  }
  else
  {
    if (qword_2569304C0 != -1)
      dispatch_once(&qword_2569304C0, &unk_250AD6C28);
    v145 = (id)qword_2569304B8;
    if (os_log_type_enabled(v145, OS_LOG_TYPE_ERROR))
    {
      sub_2393C4DD0(&__p, "void oc::voxel_hashing::VoxelHashingDataGPU::updateMeshWriterBuffer()");
      if (__p.columns[1].i8[7] >= 0)
        p_p = &__p;
      else
        p_p = (simd_float4x4 *)__p.columns[0].i64[0];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = p_p;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = 436;
      _os_log_error_impl(&dword_239388000, v145, OS_LOG_TYPE_ERROR, "%s:%{public}d VoxelHashingDataGPU not initialized.", buf, 0x12u);
      if (__p.columns[1].i8[7] < 0)
        operator delete((void *)__p.columns[0].i64[0]);
    }

  }
  v146 = (void **)sub_2393ED418(*(_QWORD *)(a1 + 8));
  *(_DWORD *)objc_msgSend_contents(*v146, v147, v148) = 0;
  v151 = (_DWORD *)objc_msgSend_contents(v146[2], v149, v150);
  result = 0;
  *v151 = 0;
  return result;
}

void sub_2393E3F94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_2393E3FBC(uint64_t a1, uint64_t a2, uint64_t a3, double *a4)
{
  NSObject *v9;
  void **v10;
  void *__p[2];
  char v12;
  uint8_t buf[4];
  void **v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 88))
  {
    if (sub_2393D1B6C(a2, a3, *a4, a4[1]))
    {
      kdebug_trace();
      (*(void (**)(_QWORD, uint64_t, uint64_t, double *))(**(_QWORD **)(a1 + 112) + 24))(*(_QWORD *)(a1 + 112), a2, a3, a4);
      kdebug_trace();
      return 0;
    }
    else
    {
      return 4;
    }
  }
  else
  {
    if (qword_2569304B0 != -1)
      dispatch_once(&qword_2569304B0, &unk_250AD6A78);
    v9 = (id)qword_2569304A8;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      sub_2393C4DD0(__p, "virtual VoxelHashingStatus oc::voxel_hashing::VoxelHashingPipelineGPUSubmaps::renderDepthImage(const simd_float4x4 &, const simd_float3x3 &, const CGSize &)");
      if (v12 >= 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      v14 = v10;
      v15 = 1026;
      v16 = 183;
      _os_log_error_impl(&dword_239388000, v9, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to render depth image - pipeline not initialized.", buf, 0x12u);
      if (v12 < 0)
        operator delete(__p[0]);
    }

    return 1;
  }
}

double sub_2393E4178@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  uint64_t v5;
  BOOL v6;
  char *v7;
  char *v8;
  void *v9;
  __int128 v10;
  double result;
  __int128 v12;
  NSObject *v13;
  size_t v14;
  char *v15;
  size_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  char *v21;
  void **v22;
  void *__p;
  uint64_t v24;
  int v25;
  char v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint8_t buf[4];
  void **v32;
  __int16 v33;
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 88))
  {
    (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 104) + 40))(&__p);
    v4 = (int)__p;
    v5 = v24;
    if ((_DWORD)__p)
      v6 = v24 == 0;
    else
      v6 = 1;
    if (v6)
    {
      v15 = 0;
      v7 = 0;
      v8 = 0;
      v9 = *(void **)(a1 + 24);
      if (!v9)
      {
LABEL_9:
        *(_QWORD *)(a1 + 24) = v15;
        *(_QWORD *)(a1 + 32) = v7;
        *(_QWORD *)(a1 + 40) = v8;
        *(_DWORD *)a2 = v25;
        *(_DWORD *)(a2 + 4) = v4;
        *(_QWORD *)(a2 + 8) = v15;
        v10 = v28;
        *(_OWORD *)(a2 + 16) = v27;
        *(_OWORD *)(a2 + 32) = v10;
        result = *(double *)&v29;
        v12 = v30;
        *(_OWORD *)(a2 + 48) = v29;
        *(_OWORD *)(a2 + 64) = v12;
        return result;
      }
    }
    else
    {
      v14 = 48 * __p;
      v15 = (char *)operator new(v14);
      v16 = 48 * ((v14 - 48) / 0x30) + 48;
      bzero(v15, v16);
      v17 = 0;
      do
      {
        *(int32x2_t *)&v18 = vcvt_s32_f32(vrndm_f32(*(float32x2_t *)(v5 + v17)));
        *((_QWORD *)&v18 + 1) = vcvtms_s32_f32(*(float *)(v5 + v17 + 8)) | 0x100000000;
        v19 = *(_OWORD *)(v5 + v17 + 16);
        v20 = *(_OWORD *)(v5 + v17 + 32);
        v21 = &v15[v17];
        *(_OWORD *)v21 = v18;
        *((_OWORD *)v21 + 1) = v19;
        *((_OWORD *)v21 + 2) = v20;
        v17 += 48;
      }
      while (v14 != v17);
      v8 = &v15[48 * v4];
      v7 = &v15[v16];
      v9 = *(void **)(a1 + 24);
      if (!v9)
        goto LABEL_9;
    }
    *(_QWORD *)(a1 + 32) = v9;
    operator delete(v9);
    v4 = (int)__p;
    goto LABEL_9;
  }
  if (qword_2569304B0 != -1)
    dispatch_once(&qword_2569304B0, &unk_250AD6A78);
  v13 = (id)qword_2569304A8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    sub_2393C4DD0(&__p, "virtual common::VoxelCloudModelFrame oc::voxel_hashing::VoxelHashingPipelineGPUSubmaps::surfaceVoxelCloud()");
    v22 = v26 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 136315394;
    v32 = v22;
    v33 = 1026;
    v34 = 206;
    _os_log_error_impl(&dword_239388000, v13, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to get surface voxelcloud - pipeline not initialized.", buf, 0x12u);
    if (v26 < 0)
      operator delete(__p);
  }

  result = 0.0;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  return result;
}

void sub_2393E43D0(uint64_t a1@<X0>, float32x4_t *a2@<X8>)
{
  uint64_t *v3;
  id v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  void *v11;
  void **v12;
  uint64_t v13;
  char *v14;
  char *v15;
  NSObject *v16;
  uint64_t v17;
  int32x4_t v18;
  uint64_t v19;
  __int16 *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int32x4_t v24;
  float v33;
  float v34;
  __int128 v35;
  BOOL v36;
  __int128 v37;
  int32x4_t v38;
  int32x4_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  __int128 v45;
  __int128 v46;
  char *v47;
  float32x4_t *v48;
  uint64_t v49;
  void **v50;
  void **v51;
  uint64_t *v52;
  float32x4_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int32x4_t v57;
  int32x4_t v58;
  __int128 v59;
  float32x4_t v60;
  float32x4_t v61;
  int32x4_t v62;
  float32x4_t v63;
  int32x4_t v64;
  unsigned __int32 v65;
  int64x2_t v66;
  float32x4_t v67;
  void *v68[2];
  char v69;
  uint8_t buf[4];
  void **v71;
  __int16 v72;
  int v73;
  uint64_t v74;
  simd_float4x4 v75;
  simd_float4x4 v76;

  v74 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 88))
  {
    v3 = (uint64_t *)a1;
    sub_2393EC4AC(*(_QWORD *)(a1 + 8));
    v4 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v55 = objc_msgSend_contents(v4, v5, v6);

    v9 = sub_2393EC064(v3[1], v7, v8);
    v10 = v9;
    v12 = (void **)(v3 + 6);
    v11 = (void *)v3[6];
    v3[7] = (uint64_t)v11;
    v13 = v9 << 9;
    if ((_DWORD)v13)
    {
      v14 = (char *)operator new(48 * v13);
      v15 = &v14[48 * v13];
      v66 = vdupq_n_s64((unint64_t)v14);
      if (!v10)
        goto LABEL_52;
    }
    else
    {
      v15 = 0;
      v14 = 0;
      v66 = 0u;
      if (!v9)
      {
LABEL_52:
        if (v11)
        {
          v3[7] = (uint64_t)v11;
          operator delete(v11);
          *v12 = 0;
          v12[1] = 0;
          v12[2] = 0;
        }
        *((int64x2_t *)v3 + 3) = v66;
        v3[8] = (uint64_t)v15;
        v48 = (float32x4_t *)v3[1];
        v60 = v48[20];
        v61 = v48[21];
        v63 = v48[22];
        v65 = v48[3].u32[2];
        v67 = v48[23];
        v75.columns[2].i64[0] = 0;
        v75.columns[0] = (simd_float4)v65;
        v75.columns[1].i32[0] = 0;
        v75.columns[1].i64[1] = 0;
        v75.columns[1].i32[1] = v65;
        v75.columns[2].i64[1] = v65;
        v75.columns[3] = (simd_float4)xmmword_2393F5320;
        v76 = __invert_f4(v75);
        a2->i32[0] = v65;
        v49 = v3[6];
        a2->i32[1] = -1431655765 * ((unint64_t)(v3[7] - v49) >> 4);
        a2->i64[1] = v49;
        a2[1] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v76.columns[0], v60.f32[0]), (float32x4_t)v76.columns[1], *(float32x2_t *)v60.f32, 1), (float32x4_t)v76.columns[2], v60, 2), (float32x4_t)v76.columns[3], v60, 3);
        a2[2] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v76.columns[0], v61.f32[0]), (float32x4_t)v76.columns[1], *(float32x2_t *)v61.f32, 1), (float32x4_t)v76.columns[2], v61, 2), (float32x4_t)v76.columns[3], v61, 3);
        a2[3] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v76.columns[0], v63.f32[0]), (float32x4_t)v76.columns[1], *(float32x2_t *)v63.f32, 1), (float32x4_t)v76.columns[2], v63, 2), (float32x4_t)v76.columns[3], v63, 3);
        a2[4] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v76.columns[0], v67.f32[0]), (float32x4_t)v76.columns[1], *(float32x2_t *)v67.f32, 1), (float32x4_t)v76.columns[2], v67, 2), (float32x4_t)v76.columns[3], v67, 3);
        return;
      }
    }
    v51 = (void **)(v3 + 6);
    v52 = v3;
    v53 = a2;
    v17 = 0;
    v18.i32[3] = 1060320051;
    v54 = v10;
    do
    {
      v19 = 0;
      v56 = v17;
      v20 = (__int16 *)(v55 + 17368 * v17);
      v18.i32[0] = v20[8676];
      v18.i32[1] = v20[8677];
      v18.i32[2] = v20[8678];
      v18 = vshlq_n_s32(v18, 3uLL);
      v62 = v18;
      do
      {
        v21 = 0;
        v18.i32[0] = v19;
        v57 = v18;
        do
        {
          v22 = 0;
          v23 = (char *)v66.i64[0];
          v18 = v57;
          v24 = v57;
          v24.i32[1] = v21;
          v24.i32[2] = v57.i32[2];
          v64 = v24;
          do
          {
            if (LOBYTE(v20[384 * v19 + 1 + 48 * v21 + 6 * v22]))
            {
              _H0 = v20[384 * v19 + 48 * v21 + 6 * v22];
              __asm { FCVT            S1, H0 }
              _S0 = fabsf(_S1);
              __asm
              {
                FCVT            H0, S0
                FCVT            S2, H0
              }
              v33 = (float)(_S2 / -12.0) + 1.0;
              if (v33 <= 1.0)
                v34 = (float)(_S2 / -12.0) + 1.0;
              else
                v34 = 1.0;
              if (v33 >= 0.2)
                *(float *)&v35 = v34;
              else
                *(float *)&v35 = 0.2;
              v36 = _S2 <= 12.0;
              v37 = xmmword_2393F55A0;
              if (v36)
              {
                if (_S1 >= 0.0)
                {
                  *(_QWORD *)&v37 = 0;
                  *((_QWORD *)&v37 + 1) = v35 | 0x3F33333300000000;
                }
                else
                {
                  DWORD1(v35) = 0;
                  *((_QWORD *)&v35 + 1) = 0x3F33333300000000;
                  v37 = v35;
                }
              }
              v38 = v64;
              v38.i32[2] = v22;
              v39 = vaddq_s32(v38, v62);
              v39.i32[3] = 1;
              if (v14 < v15)
              {
                *(int32x4_t *)v14 = v39;
                *((_QWORD *)v14 + 2) = 0;
                *((_QWORD *)v14 + 3) = 0;
                *((_OWORD *)v14 + 2) = v37;
                v14 += 48;
              }
              else
              {
                v40 = 0xAAAAAAAAAAAAAAABLL * ((v14 - v23) >> 4) + 1;
                if (v40 > 0x555555555555555)
                  abort();
                if (0x5555555555555556 * ((v15 - v23) >> 4) > v40)
                  v40 = 0x5555555555555556 * ((v15 - v23) >> 4);
                if (0xAAAAAAAAAAAAAAABLL * ((v15 - v23) >> 4) >= 0x2AAAAAAAAAAAAAALL)
                  v41 = 0x555555555555555;
                else
                  v41 = v40;
                if (v41)
                {
                  if (v41 > 0x555555555555555)
                    sub_23938C4B8();
                  v58 = v39;
                  v59 = v37;
                  v42 = (char *)operator new(48 * v41);
                  v39 = v58;
                  v37 = v59;
                }
                else
                {
                  v42 = 0;
                }
                v43 = &v42[16 * ((v14 - v23) >> 4)];
                *(int32x4_t *)v43 = v39;
                *((_QWORD *)v43 + 2) = 0;
                *((_QWORD *)v43 + 3) = 0;
                *((_OWORD *)v43 + 2) = v37;
                if (v14 == v23)
                {
                  v47 = &v42[16 * ((v14 - v23) >> 4)];
                }
                else
                {
                  v44 = &v42[16 * ((v14 - v23) >> 4)];
                  do
                  {
                    v45 = *((_OWORD *)v14 - 3);
                    v46 = *((_OWORD *)v14 - 1);
                    v47 = v44 - 48;
                    *((_OWORD *)v44 - 2) = *((_OWORD *)v14 - 2);
                    *((_OWORD *)v44 - 1) = v46;
                    *((_OWORD *)v44 - 3) = v45;
                    v14 -= 48;
                    v44 -= 48;
                  }
                  while (v14 != v23);
                }
                v15 = &v42[48 * v41];
                v14 = v43 + 48;
                v66.i64[0] = (uint64_t)v47;
                if (v23)
                  operator delete(v23);
                v23 = v47;
              }
              v18.i64[0] = v66.i64[0];
              v18.i64[1] = (uint64_t)v14;
              v66 = (int64x2_t)v18;
            }
            ++v22;
          }
          while (v22 != 8);
          ++v21;
        }
        while (v21 != 8);
        ++v19;
      }
      while (v19 != 8);
      v17 = v56 + 1;
    }
    while (v56 + 1 != v54);
    v12 = v51;
    v3 = v52;
    v11 = *v51;
    a2 = v53;
    goto LABEL_52;
  }
  if (qword_2569304B0 != -1)
    dispatch_once(&qword_2569304B0, &unk_250AD6A78);
  v16 = (id)qword_2569304A8;
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    sub_2393C4DD0(v68, "virtual common::VoxelCloudModelFrame oc::voxel_hashing::VoxelHashingPipelineGPUSubmaps::debugVoxelCloud()");
    v50 = v69 >= 0 ? v68 : (void **)v68[0];
    *(_DWORD *)buf = 136315394;
    v71 = v50;
    v72 = 1026;
    v73 = 221;
    _os_log_error_impl(&dword_239388000, v16, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to get debug voxelcloud - pipeline not initialized.", buf, 0x12u);
    if (v69 < 0)
      operator delete(v68[0]);
  }

  a2[3] = 0u;
  a2[4] = 0u;
  a2[1] = 0u;
  a2[2] = 0u;
  *a2 = 0u;
}

void sub_2393E49A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,__int128 a31)
{
  _Unwind_Resume(exception_object);
}

double sub_2393E49FC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  NSObject *v4;
  void **v5;
  void *__p[2];
  char v7;
  uint8_t buf[4];
  void **v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 88))
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 104) + 40))(*(_QWORD *)(a1 + 104));
  }
  else
  {
    if (qword_2569304B0 != -1)
      dispatch_once(&qword_2569304B0, &unk_250AD6A78);
    v4 = (id)qword_2569304A8;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      sub_2393C4DD0(__p, "virtual common::PointCloudModelFrame oc::voxel_hashing::VoxelHashingPipelineGPUSubmaps::surfacePointCloud()");
      if (v7 >= 0)
        v5 = __p;
      else
        v5 = (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      v9 = v5;
      v10 = 1026;
      v11 = 245;
      _os_log_error_impl(&dword_239388000, v4, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to get surface pointcloud - pipeline not initialized.", buf, 0x12u);
      if (v7 < 0)
        operator delete(__p[0]);
    }

    *(_DWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 0;
    result = 0.0;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
  }
  return result;
}

void sub_2393E4B78(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  int v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  uint64_t v14;
  __int128 v15;
  void **v16;
  void **v17;
  void **v18;
  void *__p[2];
  char v20;
  uint8_t buf[4];
  void **v22;
  __int16 v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 88))
  {
    v3 = *(_QWORD *)(a1 + 120);
    if (*(_BYTE *)(v3 + 160))
    {
      sub_2393ED54C(*(_QWORD *)v3);
      v4 = sub_2393ED2E4(*(_QWORD *)v3);
      v7 = *(_DWORD *)(v4 + 32);
      if (v7)
      {
        *(_DWORD *)a2 = v7;
        *(_QWORD *)(a2 + 8) = objc_msgSend_contents(*(void **)(v4 + 40), v5, v6);
        *(_DWORD *)(a2 + 16) = *(_DWORD *)(v3 + 72);
        v8 = *(_OWORD *)(v3 + 96);
        *(_OWORD *)(a2 + 32) = *(_OWORD *)(v3 + 80);
        *(_OWORD *)(a2 + 48) = v8;
        v9 = *(_OWORD *)(v3 + 112);
        v10 = *(_OWORD *)(v3 + 128);
LABEL_18:
        *(_OWORD *)(a2 + 64) = v9;
        *(_OWORD *)(a2 + 80) = v10;
        return;
      }
      if (qword_256930368 != -1)
        dispatch_once(&qword_256930368, &unk_250AD5E50);
      v13 = (id)qword_256930360;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        sub_2393C4DD0(__p, "common::PointCloudWithCoverageModelFrame oc::voxel_hashing::MeshSurfaceSamplerGPU::sampledPoints()");
        if (v20 >= 0)
          v18 = __p;
        else
          v18 = (void **)__p[0];
        *(_DWORD *)buf = 136315394;
        v22 = v18;
        v23 = 1026;
        v24 = 126;
        _os_log_debug_impl(&dword_239388000, v13, OS_LOG_TYPE_DEBUG, "%s:%{public}d No points sampled from mesh", buf, 0x12u);
        if (v20 < 0)
          operator delete(__p[0]);
      }

      *(_DWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_DWORD *)(a2 + 16) = *(_DWORD *)(v3 + 72);
    }
    else
    {
      if (qword_256930368 != -1)
        dispatch_once(&qword_256930368, &unk_250AD5E50);
      v12 = (id)qword_256930360;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        sub_2393C4DD0(__p, "common::PointCloudWithCoverageModelFrame oc::voxel_hashing::MeshSurfaceSamplerGPU::sampledPoints()");
        v17 = v20 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136315394;
        v22 = v17;
        v23 = 1026;
        v24 = 115;
        _os_log_error_impl(&dword_239388000, v12, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to get sampled points from mesh - MeshSurfaceSamplerGPU not initialized", buf, 0x12u);
        if (v20 < 0)
          operator delete(__p[0]);
      }

      *(_DWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_DWORD *)(a2 + 16) = 0;
    }
    v14 = MEMORY[0x24BDAEE00];
    v15 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 16);
    *(_OWORD *)(a2 + 32) = *MEMORY[0x24BDAEE00];
    *(_OWORD *)(a2 + 48) = v15;
    v9 = *(_OWORD *)(v14 + 32);
    v10 = *(_OWORD *)(v14 + 48);
    goto LABEL_18;
  }
  if (qword_2569304B0 != -1)
    dispatch_once(&qword_2569304B0, &unk_250AD6A78);
  v11 = (id)qword_2569304A8;
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    sub_2393C4DD0(__p, "virtual common::PointCloudWithCoverageModelFrame oc::voxel_hashing::VoxelHashingPipelineGPUSubmaps::sampledPointCloud()");
    v16 = v20 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v22 = v16;
    v23 = 1026;
    v24 = 255;
    _os_log_error_impl(&dword_239388000, v11, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to sample points from mesh - pipeline not initialized.", buf, 0x12u);
    if (v20 < 0)
      operator delete(__p[0]);
  }

  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
}

CVPixelBufferRef sub_2393E4EC8(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  _QWORD *v4;
  __CVBuffer *v5;
  void *BaseAddress;
  void *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  void **v20;
  void **v21;
  void **v22;
  CVPixelBufferRef pixelBufferOut;
  void *__p[2];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint8_t buf[4];
  void **v30;
  __int16 v31;
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  pixelBufferOut = 0;
  if (!*(_BYTE *)(a1 + 88))
  {
    if (qword_2569304B0 != -1)
      dispatch_once(&qword_2569304B0, &unk_250AD6A78);
    v3 = (id)qword_2569304A8;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      sub_2393C4DD0(__p, "virtual CVPixelBufferRef oc::voxel_hashing::VoxelHashingPipelineGPUSubmaps::depthImage()");
      v21 = v25 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      v30 = v21;
      v31 = 1026;
      v32 = 267;
      _os_log_error_impl(&dword_239388000, v3, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to get depth image - pipeline not initialized.", buf, 0x12u);
      if (SHIBYTE(v25) < 0)
        operator delete(__p[0]);
    }

    return 0;
  }
  if (CVPixelBufferPoolCreatePixelBuffer((CFAllocatorRef)*MEMORY[0x24BDBD240], *(CVPixelBufferPoolRef *)(a1 + 72), &pixelBufferOut))
  {
    if (qword_2569304B0 != -1)
      dispatch_once(&qword_2569304B0, &unk_250AD6A78);
    v2 = (id)qword_2569304A8;
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      goto LABEL_30;
    sub_2393C4DD0(__p, "virtual CVPixelBufferRef oc::voxel_hashing::VoxelHashingPipelineGPUSubmaps::depthImage()");
    v20 = v25 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v30 = v20;
    v31 = 1026;
    v32 = 274;
    _os_log_error_impl(&dword_239388000, v2, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to get depth image - failed to create pixel buffer from pool.", buf, 0x12u);
    if ((SHIBYTE(v25) & 0x80000000) == 0)
      goto LABEL_30;
  }
  else
  {
    v4 = *(_QWORD **)(a1 + 112);
    if (v4)
    {
      v5 = pixelBufferOut;
      if (pixelBufferOut)
      {
        if (CVPixelBufferGetBytesPerRow(pixelBufferOut) >= 4 * v4[2])
        {
          CVPixelBufferLockBaseAddress(v5, 0);
          BaseAddress = CVPixelBufferGetBaseAddress(v5);
          (*(void (**)(_QWORD *))(*v4 + 32))(v4);
          v7 = (void *)objc_claimAutoreleasedReturnValue();
          v10 = v7;
          if (v7)
          {
            v11 = objc_msgSend_width(v7, v8, v9);
            v14 = objc_msgSend_width(v10, v12, v13);
            v17 = objc_msgSend_height(v10, v15, v16);
            __p[0] = 0;
            __p[1] = 0;
            v25 = 0;
            v26 = v14;
            v27 = v17;
            v28 = 1;
            objc_msgSend_getBytes_bytesPerRow_fromRegion_mipmapLevel_(v10, v18, (uint64_t)BaseAddress, 4 * v11, __p, 0);
            CVPixelBufferUnlockBaseAddress(v5, 0);

            return pixelBufferOut;
          }
          CVPixelBufferUnlockBaseAddress(v5, 0);
          CVPixelBufferRelease(v5);
        }
      }
    }
    if (qword_2569304B0 != -1)
      dispatch_once(&qword_2569304B0, &unk_250AD6A78);
    v2 = (id)qword_2569304A8;
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      goto LABEL_30;
    sub_2393C4DD0(__p, "virtual CVPixelBufferRef oc::voxel_hashing::VoxelHashingPipelineGPUSubmaps::depthImage()");
    v22 = v25 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v30 = v22;
    v31 = 1026;
    v32 = 280;
    _os_log_error_impl(&dword_239388000, v2, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to get depth image - failed to copy depth image to pixel buffer.", buf, 0x12u);
    if ((SHIBYTE(v25) & 0x80000000) == 0)
      goto LABEL_30;
  }
  operator delete(__p[0]);
LABEL_30:

  return 0;
}

void sub_2393E5274(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

CVPixelBufferRef sub_2393E528C(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  _QWORD *v4;
  __CVBuffer *v5;
  void *BaseAddress;
  void *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  void **v20;
  void **v21;
  void **v22;
  CVPixelBufferRef pixelBufferOut;
  void *__p[2];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint8_t buf[4];
  void **v30;
  __int16 v31;
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  pixelBufferOut = 0;
  if (!*(_BYTE *)(a1 + 88))
  {
    if (qword_2569304B0 != -1)
      dispatch_once(&qword_2569304B0, &unk_250AD6A78);
    v3 = (id)qword_2569304A8;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      sub_2393C4DD0(__p, "virtual CVPixelBufferRef oc::voxel_hashing::VoxelHashingPipelineGPUSubmaps::normalImage()");
      v21 = v25 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      v30 = v21;
      v31 = 1026;
      v32 = 291;
      _os_log_error_impl(&dword_239388000, v3, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to get normal image - pipeline not initialized.", buf, 0x12u);
      if (SHIBYTE(v25) < 0)
        operator delete(__p[0]);
    }

    return 0;
  }
  if (CVPixelBufferPoolCreatePixelBuffer((CFAllocatorRef)*MEMORY[0x24BDBD240], *(CVPixelBufferPoolRef *)(a1 + 80), &pixelBufferOut))
  {
    if (qword_2569304B0 != -1)
      dispatch_once(&qword_2569304B0, &unk_250AD6A78);
    v2 = (id)qword_2569304A8;
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      goto LABEL_30;
    sub_2393C4DD0(__p, "virtual CVPixelBufferRef oc::voxel_hashing::VoxelHashingPipelineGPUSubmaps::normalImage()");
    v20 = v25 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v30 = v20;
    v31 = 1026;
    v32 = 298;
    _os_log_error_impl(&dword_239388000, v2, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to get normal image - failed to create pixel buffer from pool.", buf, 0x12u);
    if ((SHIBYTE(v25) & 0x80000000) == 0)
      goto LABEL_30;
  }
  else
  {
    v4 = *(_QWORD **)(a1 + 112);
    if (v4)
    {
      v5 = pixelBufferOut;
      if (pixelBufferOut)
      {
        if (CVPixelBufferGetBytesPerRow(pixelBufferOut) >= 16 * v4[2])
        {
          CVPixelBufferLockBaseAddress(v5, 0);
          BaseAddress = CVPixelBufferGetBaseAddress(v5);
          (*(void (**)(_QWORD *))(*v4 + 48))(v4);
          v7 = (void *)objc_claimAutoreleasedReturnValue();
          v10 = v7;
          if (v7)
          {
            v11 = objc_msgSend_width(v7, v8, v9);
            v14 = objc_msgSend_width(v10, v12, v13);
            v17 = objc_msgSend_height(v10, v15, v16);
            __p[0] = 0;
            __p[1] = 0;
            v25 = 0;
            v26 = v14;
            v27 = v17;
            v28 = 1;
            objc_msgSend_getBytes_bytesPerRow_fromRegion_mipmapLevel_(v10, v18, (uint64_t)BaseAddress, 16 * v11, __p, 0);
            CVPixelBufferUnlockBaseAddress(v5, 0);

            return pixelBufferOut;
          }
          CVPixelBufferUnlockBaseAddress(v5, 0);
          CVPixelBufferRelease(v5);
        }
      }
    }
    if (qword_2569304B0 != -1)
      dispatch_once(&qword_2569304B0, &unk_250AD6A78);
    v2 = (id)qword_2569304A8;
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      goto LABEL_30;
    sub_2393C4DD0(__p, "virtual CVPixelBufferRef oc::voxel_hashing::VoxelHashingPipelineGPUSubmaps::normalImage()");
    v22 = v25 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v30 = v22;
    v31 = 1026;
    v32 = 304;
    _os_log_error_impl(&dword_239388000, v2, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to get normal image - failed to copy normal image to pixel buffer.", buf, 0x12u);
    if ((SHIBYTE(v25) & 0x80000000) == 0)
      goto LABEL_30;
  }
  operator delete(__p[0]);
LABEL_30:

  return 0;
}

void sub_2393E5638(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double sub_2393E5650@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  int v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  double result;
  const char *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  NSObject *v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE *v26;
  _BYTE *v27;
  int64_t v28;
  char *v29;
  char *v30;
  void **v31;
  void **v32;
  void **v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  void *__p[2];
  char v39;
  uint8_t buf[4];
  void **v41;
  __int16 v42;
  int v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 88))
  {
    if (qword_2569304B0 != -1)
      dispatch_once(&qword_2569304B0, &unk_250AD6A78);
    v20 = (id)qword_2569304A8;
    if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      goto LABEL_24;
    sub_2393C4DD0(__p, "virtual VoxelHashingPipelineResults oc::voxel_hashing::VoxelHashingPipelineGPUSubmaps::results()");
    v31 = v39 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v41 = v31;
    v42 = 1026;
    v43 = 343;
    _os_log_error_impl(&dword_239388000, v20, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to get voxelhashing results - pipeline not initialized.", buf, 0x12u);
    if ((v39 & 0x80000000) == 0)
      goto LABEL_24;
LABEL_39:
    operator delete(__p[0]);
LABEL_24:

    *(_DWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 0;
    *(_DWORD *)(a2 + 64) = 0;
    result = 0.0;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_DWORD *)(a2 + 56) = 0;
    *(_OWORD *)(a2 + 72) = 0u;
    *(_OWORD *)(a2 + 88) = 0u;
    *(_OWORD *)(a2 + 104) = 0u;
    *(_OWORD *)(a2 + 120) = 0u;
    *(_QWORD *)(a2 + 136) = 0;
    return result;
  }
  sub_2393ED54C(*(_QWORD *)(a1 + 8));
  v4 = sub_2393ED2E4(*(_QWORD *)(a1 + 8));
  v9 = *(_DWORD *)objc_msgSend_contents(*(void **)v4, v5, v6);
  if (!v9)
  {
    if (qword_2569304B0 != -1)
      dispatch_once(&qword_2569304B0, &unk_250AD6A78);
    v20 = (id)qword_2569304A8;
    if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      goto LABEL_24;
    sub_2393C4DD0(__p, "virtual VoxelHashingPipelineResults oc::voxel_hashing::VoxelHashingPipelineGPUSubmaps::results()");
    v32 = v39 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v41 = v32;
    v42 = 1026;
    v43 = 354;
    _os_log_error_impl(&dword_239388000, v20, OS_LOG_TYPE_ERROR, "%s:%{public}d Vertex buffer is empty.", buf, 0x12u);
    if ((v39 & 0x80000000) == 0)
      goto LABEL_24;
    goto LABEL_39;
  }
  v12 = objc_msgSend_contents(*(void **)(v4 + 8), v7, v8);
  if (!*(_BYTE *)(a1 + 208))
  {
    v17 = 0;
    v16 = 0;
    v18 = *(_DWORD *)(v4 + 32);
    if (v18)
      goto LABEL_6;
LABEL_16:
    v19 = 0;
    goto LABEL_17;
  }
  v16 = *(_DWORD *)objc_msgSend_contents(*(void **)(v4 + 16), v10, v11);
  if (!v16)
  {
    if (qword_2569304B0 != -1)
      dispatch_once(&qword_2569304B0, &unk_250AD6A78);
    v20 = (id)qword_2569304A8;
    if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      goto LABEL_24;
    sub_2393C4DD0(__p, "virtual VoxelHashingPipelineResults oc::voxel_hashing::VoxelHashingPipelineGPUSubmaps::results()");
    v33 = v39 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v41 = v33;
    v42 = 1026;
    v43 = 366;
    _os_log_error_impl(&dword_239388000, v20, OS_LOG_TYPE_ERROR, "%s:%{public}d Index buffer is empty.", buf, 0x12u);
    if ((v39 & 0x80000000) == 0)
      goto LABEL_24;
    goto LABEL_39;
  }
  v17 = objc_msgSend_contents(*(void **)(v4 + 24), v14, v15);
  v18 = *(_DWORD *)(v4 + 32);
  if (!v18)
    goto LABEL_16;
LABEL_6:
  v19 = objc_msgSend_contents(*(void **)(v4 + 40), v10, v11);
LABEL_17:
  v21 = *(_OWORD **)(a1 + 8);
  v22 = v21[20];
  v23 = v21[21];
  v24 = v21[22];
  v25 = v21[23];
  *(_DWORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v12;
  *(_DWORD *)(a2 + 16) = v16;
  *(_QWORD *)(a2 + 24) = v17;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  v27 = *(_BYTE **)(v4 + 48);
  v26 = *(_BYTE **)(v4 + 56);
  v28 = v26 - v27;
  if (v26 != v27)
  {
    v34 = v25;
    v35 = v24;
    v36 = v23;
    v37 = v22;
    if (v28 < 0)
      abort();
    v29 = (char *)operator new(v26 - v27);
    *(_QWORD *)(a2 + 32) = v29;
    v30 = &v29[4 * (v28 >> 2)];
    *(_QWORD *)(a2 + 48) = v30;
    memcpy(v29, v27, v28);
    *(_QWORD *)(a2 + 40) = v30;
    v23 = v36;
    v22 = v37;
    v25 = v34;
    v24 = v35;
  }
  LODWORD(result) = *(_DWORD *)(v4 + 96);
  *(_DWORD *)(a2 + 56) = LODWORD(result);
  *(_DWORD *)(a2 + 64) = v18;
  *(_QWORD *)(a2 + 72) = v19;
  *(_OWORD *)(a2 + 80) = v22;
  *(_OWORD *)(a2 + 96) = v23;
  *(_OWORD *)(a2 + 112) = v24;
  *(_OWORD *)(a2 + 128) = v25;
  return result;
}

uint64_t sub_2393E5A60(uint64_t a1)
{
  NSObject *v2;
  void **v3;
  void *__p[2];
  char v5;
  uint8_t buf[4];
  void **v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 88) && *(_BYTE *)(a1 + 306))
    return *(unsigned int *)(a1 + 440);
  if (qword_2569304B0 != -1)
    dispatch_once(&qword_2569304B0, &unk_250AD6A78);
  v2 = (id)qword_2569304A8;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    sub_2393C4DD0(__p, "virtual uint32_t oc::voxel_hashing::VoxelHashingPipelineGPUSubmaps::cameraShotWidth()");
    if (v5 >= 0)
      v3 = __p;
    else
      v3 = (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v7 = v3;
    v8 = 1026;
    v9 = 313;
    _os_log_error_impl(&dword_239388000, v2, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to get camera shot width - coverage is not enabled.", buf, 0x12u);
    if (v5 < 0)
      operator delete(__p[0]);
  }

  return 0;
}

uint64_t sub_2393E5B90(uint64_t a1)
{
  NSObject *v2;
  void **v3;
  void *__p[2];
  char v5;
  uint8_t buf[4];
  void **v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 88) && *(_BYTE *)(a1 + 306))
    return *(unsigned int *)(a1 + 444);
  if (qword_2569304B0 != -1)
    dispatch_once(&qword_2569304B0, &unk_250AD6A78);
  v2 = (id)qword_2569304A8;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    sub_2393C4DD0(__p, "virtual uint32_t oc::voxel_hashing::VoxelHashingPipelineGPUSubmaps::cameraShotHeight()");
    if (v5 >= 0)
      v3 = __p;
    else
      v3 = (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v7 = v3;
    v8 = 1026;
    v9 = 323;
    _os_log_error_impl(&dword_239388000, v2, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to get camera shot width - coverage is not enabled.", buf, 0x12u);
    if (v5 < 0)
      operator delete(__p[0]);
  }

  return 0;
}

void sub_2393E5CC0(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  void **v3;
  void *__p[2];
  char v5;
  uint8_t buf[4];
  void **v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 88) && *(_BYTE *)(a1 + 306))
  {
    sub_2393E0C98(*(_QWORD *)(a1 + 472), a2);
  }
  else
  {
    if (qword_2569304B0 != -1)
      dispatch_once(&qword_2569304B0, &unk_250AD6A78);
    v2 = (id)qword_2569304A8;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      sub_2393C4DD0(__p, "virtual void oc::voxel_hashing::VoxelHashingPipelineGPUSubmaps::addCameraShot(const framing_guide::CoverageCamera &)");
      if (v5 >= 0)
        v3 = __p;
      else
        v3 = (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      v7 = v3;
      v8 = 1026;
      v9 = 333;
      _os_log_error_impl(&dword_239388000, v2, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to add camera shot - Coverage is not enabled.", buf, 0x12u);
      if (v5 < 0)
        operator delete(__p[0]);
    }

  }
}

void sub_2393E5E10()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.CoreOCModules", "VoxelHashing");
  v1 = (void *)qword_2569304A8;
  qword_2569304A8 = (uint64_t)v0;

}

BOOL sub_2393E5E40(uint64_t a1)
{
  float v2;
  float v3;
  BOOL v5;
  char v6;
  _BOOL4 v7;
  float v8;
  _BOOL4 v9;
  float v10;
  _BOOL4 v11;
  int v12;
  _BOOL8 result;
  float v14;
  float v15;
  float v16;
  _BOOL4 v17;
  BOOL v19;
  _BOOL4 v23;
  BOOL v24;

  v2 = *(float *)(a1 + 8);
  v3 = fabsf(v2);
  if (v2 < 0.0 && v3 > 0.000001)
  {
    v6 = 1;
  }
  else
  {
    v5 = fabsf(v2 + -1.0) > 0.000011;
    v6 = v2 > 1.0 && v5;
  }
  v7 = *(double *)(a1 + 88) <= 0.0 || *(double *)(a1 + 96) <= 0.0;
  v8 = *(float *)(a1 + 60);
  v9 = v8 > 1.0 || v8 < 0.0;
  v11 = *(_DWORD *)(a1 + 200) < *(_DWORD *)(a1 + 204)
     && (v10 = *(float *)(a1 + 212), v10 > 0.0)
     && v10 < *(float *)(a1 + 216)
     && *(_DWORD *)(a1 + 312)
     && *(_DWORD *)(a1 + 316) != 0;
  if (*(_DWORD *)a1 == 5)
    return 0;
  v12 = *(_DWORD *)(a1 + 4);
  if (v12 == 2)
    v6 = 1;
  if ((v6 & 1) != 0)
    return 0;
  v15 = *(float *)(a1 + 12);
  v14 = *(float *)(a1 + 16);
  v16 = fabsf(v15);
  v17 = v14 > 0.0;
  if (fabsf(v14) <= 0.000001)
    v17 = 1;
  v19 = v16 > 0.000001 && v15 < 0.0 || v14 <= v15;
  result = 0;
  if (!v19 && v17 && *(float *)(a1 + 32) > 0.0 && *(float *)(a1 + 36) > 0.0 && *(float *)(a1 + 40) > 0.0)
  {
    if (*(_DWORD *)(a1 + 48))
    {
      result = 0;
      if (*(float *)(a1 + 52) >= 0.0001)
      {
        if (*(_BYTE *)(a1 + 56))
        {
          v23 = *(float *)(a1 + 64) < 1.0 || *(_DWORD *)(a1 + 72) == 0 || *(_DWORD *)(a1 + 76) == 0;
          if (*(float *)(a1 + 84) < 0.0)
            v23 = 1;
          if (v23 || v7 || ((sub_2393BBA78(a1 + 112) ^ 1 | v9) & 1) != 0)
            return 0;
          if (*(_BYTE *)(a1 + 177))
            v24 = v12 == 1;
          else
            v24 = 1;
          return v24 && v11;
        }
      }
    }
  }
  return result;
}

uint64_t sub_2393E603C(uint64_t a1, uint64_t a2)
{
  NSObject *v5;
  void **v6;
  const char *v7;
  void **v8;
  void *__p[2];
  char v10;
  uint64x2_t v11;
  int v12;
  __int128 v13;
  uint8_t buf[4];
  void **v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v13 = xmmword_2393F53F0;
  v11 = vcvtq_u64_f64(*(float64x2_t *)(a2 + 88));
  v12 = 1717855600;
  if ((sub_2393C4B50(&v11, (CVPixelBufferPoolRef *)(a1 + 72)) & 1) == 0)
  {
    if (qword_2569304B0 != -1)
      dispatch_once(&qword_2569304B0, &unk_250AD6A78);
    v5 = (id)qword_2569304A8;
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      goto LABEL_14;
    sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::VoxelHashingPipelineGPUSubmaps::configureImageBufferPools(const VoxelHashingPipelineConfig &)");
    if (v10 >= 0)
      v6 = __p;
    else
      v6 = (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v15 = v6;
    v16 = 1026;
    v17 = 452;
    v7 = "%s:%{public}d Failed to create pixel buffer pool for depth image.";
    goto LABEL_19;
  }
  v11 = vcvtq_u64_f64(*(float64x2_t *)(a2 + 88));
  v12 = 1380410945;
  if ((sub_2393C4B50(&v11, (CVPixelBufferPoolRef *)(a1 + 80)) & 1) != 0)
    return 1;
  if (qword_2569304B0 != -1)
    dispatch_once(&qword_2569304B0, &unk_250AD6A78);
  v5 = (id)qword_2569304A8;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::VoxelHashingPipelineGPUSubmaps::configureImageBufferPools(const VoxelHashingPipelineConfig &)");
    if (v10 >= 0)
      v8 = __p;
    else
      v8 = (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v15 = v8;
    v16 = 1026;
    v17 = 462;
    v7 = "%s:%{public}d Failed to create pixel buffer pool for normal image.";
LABEL_19:
    _os_log_error_impl(&dword_239388000, v5, OS_LOG_TYPE_ERROR, v7, buf, 0x12u);
    if (v10 < 0)
      operator delete(__p[0]);
  }
LABEL_14:

  return 0;
}

uint64_t sub_2393E625C(_QWORD *a1, uint64_t a2)
{
  int32x4_t **v4;
  int32x4_t **v5;
  int32x4_t *v6;
  int32x4_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unsigned __int8 v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float32x4_t v17;
  int32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  uint32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  uint32x4_t v28;
  float32x4_t v29;
  float32x2_t v30;
  uint32x2_t v31;
  NSObject *v32;
  NSObject *v33;
  uint64_t v34;
  _BYTE *v36;
  _BYTE *v37;
  const char *v38;
  uint64_t v39;
  id v40;
  const char *v41;
  uint64_t v42;
  int32x4_t *v43;
  const char *v44;
  int32x4_t *v45;
  id v46;
  const char *v47;
  uint64_t v48;
  int32x4_t *v49;
  const char *v50;
  int32x4_t *v51;
  id v52;
  unsigned int v53;
  const char *v54;
  uint64_t v55;
  int32x4_t *v56;
  const char *v57;
  int32x4_t *v58;
  const char *v59;
  void *v60;
  id v61;
  const char *v62;
  uint64_t v63;
  id v64;
  int32x4_t *v65;
  NSObject *v66;
  int v67;
  _BYTE *v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  _BYTE *v73;
  _BYTE *v74;
  _BYTE *v75;
  _BYTE *v76;
  int32x4_t *v77;
  int32x4_t *v78;
  const char *v79;
  int32x4_t v80;
  NSObject *v81;
  _BYTE *v82;
  _BYTE *v83;
  _BYTE *v84;
  simd_float4 v85;
  simd_float4 v86;
  int32x4_t v87;
  float32x4_t v88;
  id v89;
  _BYTE buf[12];
  __int16 v91;
  int v92;
  char v93;
  _BYTE __p[18];
  __int16 v95;
  uint64_t v96;
  uint64_t v97;
  simd_float4x4 v98;

  v97 = *MEMORY[0x24BDAC8D0];
  v4 = (int32x4_t **)operator new();
  v5 = v4;
  v7 = (int32x4_t *)a1[1];
  v6 = (int32x4_t *)a1[2];
  *(_QWORD *)__p = v7;
  *(_QWORD *)&__p[8] = v6;
  if (v6)
  {
    v8 = &v6->u64[1];
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    *v4 = v7;
    v4[1] = v6;
    v10 = &v6->u64[1];
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  else
  {
    *v4 = v7;
    v4[1] = 0;
  }
  v12 = atomic_load((unsigned __int8 *)&qword_256930538);
  if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_256930538))
  {
    qword_256930530 = sub_2393F2DD8();
    __cxa_atexit((void (*)(void *))sub_2393F2FA4, &qword_256930530, &dword_239388000);
    __cxa_guard_release(&qword_256930538);
  }
  v5[2] = (int32x4_t *)qword_256930530;
  *(_OWORD *)(v5 + 3) = 0u;
  *(_OWORD *)(v5 + 5) = 0u;
  *(_OWORD *)(v5 + 7) = 0u;
  *((_DWORD *)v5 + 18) = 0;
  *((_OWORD *)v5 + 5) = 0u;
  *((_OWORD *)v5 + 6) = 0u;
  *((_OWORD *)v5 + 7) = 0u;
  *((_OWORD *)v5 + 8) = 0u;
  *((_OWORD *)v5 + 9) = 0u;
  *((_BYTE *)v5 + 160) = 0;
  if (*(_QWORD *)&__p[8])
  {
    v13 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)&__p[8] + 16))(*(_QWORD *)&__p[8]);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&__p[8]);
    }
  }
  v15 = a1[15];
  a1[15] = v5;
  if (v15)
  {
    v16 = sub_2393C4940(v15);
    MEMORY[0x23B83C4BC](v16, 0x10E0C40A317B3DBLL);
    v5 = (int32x4_t **)a1[15];
    if (!v5)
      goto LABEL_25;
  }
  v98 = __invert_f4(*(simd_float4x4 *)(a2 + 112));
  if (*((_BYTE *)v5 + 160))
    goto LABEL_21;
  v17 = (float32x4_t)v98.columns[0];
  v18 = (int32x4_t)v98.columns[1];
  v19 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32((float32x4_t)v98.columns[0], v98.columns[0].f32[0]), (float32x4_t)v98.columns[1], v98.columns[1].f32[0]), (float32x4_t)v98.columns[2], v98.columns[2].f32[0]);
  v20 = vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32((float32x4_t)v98.columns[0], *(float32x2_t *)v98.columns[0].f32, 1), (float32x4_t)v98.columns[1], *(float32x2_t *)v98.columns[1].f32, 1), (float32x4_t)v98.columns[2], *(float32x2_t *)v98.columns[2].f32, 1);
  v21 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32((float32x4_t)v98.columns[0], (float32x4_t)v98.columns[0], 2), (float32x4_t)v98.columns[1], (float32x4_t)v98.columns[1], 2), (float32x4_t)v98.columns[2], (float32x4_t)v98.columns[2], 2);
  v98.columns[1] = *(simd_float4 *)(MEMORY[0x24BDAEDF8] + 16);
  v98.columns[0] = *(simd_float4 *)(MEMORY[0x24BDAEDF8] + 32);
  v22 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
  v23 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v22, vabdq_f32(v20, (float32x4_t)v98.columns[1])), (int8x16_t)vcgeq_f32(v22, vabdq_f32(v19, *MEMORY[0x24BDAEDF8]))), (int8x16_t)vcgeq_f32(v22, vabdq_f32(v21, (float32x4_t)v98.columns[0])));
  v23.i32[3] = v23.i32[2];
  if ((vminvq_u32(v23) & 0x80000000) == 0)
    goto LABEL_21;
  v24 = (float32x4_t)vdupq_laneq_s32(v18, 2);
  v25 = (float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)v17, (int32x4_t)v98.columns[2]), (int32x4_t)v24);
  v26 = (float32x4_t)vtrn2q_s32((int32x4_t)v17, v18);
  v26.i32[2] = v98.columns[2].i32[1];
  v27 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)v17, (int32x4_t)v98.columns[2]), v18);
  v28 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v22, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v27, *(float *)v18.i32), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.i8, 1), v26), v24, v25), (float32x4_t)v98.columns[1])), (int8x16_t)vcgeq_f32(v22, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v27, v17.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 1),
                                           v26),
                                         (float32x4_t)vdupq_laneq_s32((int32x4_t)v17, 2),
                                         v25),
                                       *MEMORY[0x24BDAEDF8]))),
                      (int8x16_t)vcgeq_f32(v22, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v27, v98.columns[2].f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v98.columns[2].f32, 1), v26), (float32x4_t)vdupq_laneq_s32((int32x4_t)v98.columns[2], 2), v25), (float32x4_t)v98.columns[0])));
  v28.i32[3] = v28.i32[2];
  if ((vminvq_u32(v28) & 0x80000000) == 0)
    goto LABEL_21;
  v29 = vmulq_f32(v17, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v98.columns[2], (int8x16_t)v98.columns[2], 0xCuLL), (int8x16_t)v98.columns[2], 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v18, v18), (int8x16_t)v18, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v98.columns[2], (int32x4_t)v98.columns[2]), (int8x16_t)v98.columns[2], 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v18, (int8x16_t)v18, 0xCuLL), (int8x16_t)v18, 8uLL)));
  if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v29, 2), vaddq_f32(v29, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 1))).f32[0]+ -1.0) <= 0.000011&& (v30 = (float32x2_t)vdup_n_s32(0x38D1B717u), v31 = (uint32x2_t)vand_s8((int8x8_t)vcge_f32(v30, vabs_f32(vadd_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v98.columns[2], (int8x16_t)v98.columns[2], 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v98.columns[3], (int8x16_t)v98.columns[3], 8uLL)),
                                            (float32x2_t)0xBF80000080000000))),
                            (int8x8_t)vcge_f32(v30, vabs_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL))))), (vpmin_u32(v31, v31).u32[0] & 0x80000000) != 0)&& (v39 = (uint64_t)*v5) != 0&& *(_BYTE *)(v39 + 8))
  {
    v85 = v98.columns[3];
    v86 = v98.columns[2];
    v87 = v18;
    v88 = v17;
    *((_DWORD *)v5 + 16) = *(_DWORD *)(v39 + 568);
    *((_DWORD *)v5 + 17) = sub_2393EBF3C(v39);
    *((_DWORD *)v5 + 18) = (*v5)[3].i32[2];
    *((float32x4_t *)v5 + 5) = v88;
    *((int32x4_t *)v5 + 6) = v87;
    *((simd_float4 *)v5 + 7) = v86;
    *((simd_float4 *)v5 + 8) = v85;
    v40 = (id)v5[2]->i64[0];
    v42 = objc_msgSend_newBufferWithLength_options_(v40, v41, 4 * *((unsigned int *)v5 + 17), 0);
    v43 = v5[5];
    v5[5] = (int32x4_t *)v42;

    v45 = v5[5];
    if (v45)
    {
      objc_msgSend_setLabel_(v45, v44, (uint64_t)CFSTR("NumSamplesPerTriangle Buffer"));
      v46 = (id)v5[2]->i64[0];
      v48 = objc_msgSend_newBufferWithLength_options_(v46, v47, 8 * *((unsigned int *)v5 + 16), 0);
      v49 = v5[6];
      v5[6] = (int32x4_t *)v48;

      v51 = v5[6];
      if (v51)
      {
        objc_msgSend_setLabel_(v51, v50, (uint64_t)CFSTR("SampledPointTriangleIdxs Buffer"));
        v52 = (id)v5[2]->i64[0];
        v53 = sub_2393EBE14((uint64_t)*v5);
        v55 = objc_msgSend_newBufferWithLength_options_(v52, v54, 4 * v53, 0);
        v56 = v5[7];
        v5[7] = (int32x4_t *)v55;

        v58 = v5[7];
        if (v58)
        {
          objc_msgSend_setLabel_(v58, v57, (uint64_t)CFSTR("CoverageScores Buffer"));
          v60 = (void *)objc_msgSend_newFunctionWithName_((void *)v5[2][1].i64[0], v59, (uint64_t)CFSTR("oc::voxel_hashing::samplePointsFromTriangleMesh"));
          if (v60)
          {
            v61 = (id)v5[2]->i64[0];
            v89 = 0;
            v63 = objc_msgSend_newComputePipelineStateWithFunction_error_(v61, v62, (uint64_t)v60, &v89);
            v64 = v89;
            v65 = v5[3];
            v5[3] = (int32x4_t *)v63;

            if (v5[3])
            {
LABEL_82:

              v77 = (int32x4_t *)objc_alloc_init(MEMORY[0x24BDDD508]);
              v78 = v5[4];
              v5[4] = v77;

              objc_msgSend_setErrorOptions_(v5[4], v79, 1);
              if ((*v5)->i8[8])
              {
                v80 = (*v5)[28];
              }
              else
              {
                if (qword_2569304C0 != -1)
                  dispatch_once(&qword_2569304C0, &unk_250AD6C28);
                v81 = (id)qword_2569304B8;
                if (os_log_type_enabled(v81, OS_LOG_TYPE_ERROR))
                {
                  sub_2393C4DD0(__p, "std::optional<simd_uint3> oc::voxel_hashing::VoxelHashingDataGPU::voxelBlockGridSize() const");
                  v84 = (v96 & 0x80000000) == 0 ? __p : *(_BYTE **)__p;
                  *(_DWORD *)buf = 136315394;
                  *(_QWORD *)&buf[4] = v84;
                  v91 = 1026;
                  v92 = 396;
                  _os_log_error_impl(&dword_239388000, v81, OS_LOG_TYPE_ERROR, "%s:%{public}d VoxelHashingDataGPU not initialized.", buf, 0x12u);
                  if (SBYTE3(v96) < 0)
                    operator delete(*(void **)__p);
                }

                v80 = 0uLL;
              }
              *((int32x4_t *)v5 + 9) = vshlq_n_s32(v80, 3uLL);
              *((_BYTE *)v5 + 160) = 1;
              if (qword_256930368 != -1)
                dispatch_once(&qword_256930368, &unk_250AD5E50);
              v33 = (id)qword_256930360;
              if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
              {
                sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::MeshSurfaceSamplerGPU::init(const simd_float4x4 &)");
                if ((v96 & 0x80000000) == 0)
                  v82 = __p;
                else
                  v82 = *(_BYTE **)__p;
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = v82;
                v91 = 1026;
                v92 = 51;
                _os_log_debug_impl(&dword_239388000, v33, OS_LOG_TYPE_DEBUG, "%s:%{public}d Successfully initialized MeshSurfaceSamplerGPU.", buf, 0x12u);
                if (SBYTE3(v96) < 0)
                  operator delete(*(void **)__p);
              }
              v34 = 1;
              goto LABEL_29;
            }
            if (qword_256930368 != -1)
              dispatch_once(&qword_256930368, &unk_250AD5E50);
            v66 = (id)qword_256930360;
            if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
            {
              sub_2393C4DD0(buf, "BOOL oc::voxel_hashing::MeshSurfaceSamplerGPU::createPipelineState()");
              v67 = v93;
              v68 = *(_BYTE **)buf;
              objc_msgSend_localizedDescription(v64, v69, v70);
              v71 = objc_claimAutoreleasedReturnValue();
              v72 = (void *)v71;
              v73 = v67 >= 0 ? buf : v68;
              *(_DWORD *)__p = 136315650;
              *(_QWORD *)&__p[4] = v73;
              *(_WORD *)&__p[12] = 1026;
              *(_DWORD *)&__p[14] = 191;
              v95 = 2114;
              v96 = v71;
              _os_log_error_impl(&dword_239388000, v66, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create pipelinestate for samplePointsFromTriangleMesh compute shader. Error details: %{public}@", __p, 0x1Cu);

              if (v93 < 0)
                operator delete(*(void **)buf);
            }
          }
          else
          {
            if (qword_256930368 != -1)
              dispatch_once(&qword_256930368, &unk_250AD5E50);
            v66 = (id)qword_256930360;
            if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
            {
              sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::MeshSurfaceSamplerGPU::createPipelineState()");
              v83 = (v96 & 0x80000000) == 0 ? __p : *(_BYTE **)__p;
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = v83;
              v91 = 1026;
              v92 = 181;
              _os_log_error_impl(&dword_239388000, v66, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to find samplePointsFromTriangleMesh compute shader", buf, 0x12u);
              if (SBYTE3(v96) < 0)
                operator delete(*(void **)__p);
            }
            v64 = 0;
          }

          goto LABEL_82;
        }
        if (qword_256930368 != -1)
          dispatch_once(&qword_256930368, &unk_250AD5E50);
        v32 = (id)qword_256930360;
        if (!os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
          goto LABEL_24;
        sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::MeshSurfaceSamplerGPU::createBuffers()");
        if ((v96 & 0x80000000) == 0)
          v76 = __p;
        else
          v76 = *(_BYTE **)__p;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v76;
        v91 = 1026;
        v92 = 166;
        v38 = "%s:%{public}d Failed to create coverageScores buffer";
      }
      else
      {
        if (qword_256930368 != -1)
          dispatch_once(&qword_256930368, &unk_250AD5E50);
        v32 = (id)qword_256930360;
        if (!os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
          goto LABEL_24;
        sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::MeshSurfaceSamplerGPU::createBuffers()");
        if ((v96 & 0x80000000) == 0)
          v75 = __p;
        else
          v75 = *(_BYTE **)__p;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v75;
        v91 = 1026;
        v92 = 157;
        v38 = "%s:%{public}d Failed to create sampledPointTriangleIdxs buffer";
      }
    }
    else
    {
      if (qword_256930368 != -1)
        dispatch_once(&qword_256930368, &unk_250AD5E50);
      v32 = (id)qword_256930360;
      if (!os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
        goto LABEL_24;
      sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::MeshSurfaceSamplerGPU::createBuffers()");
      if ((v96 & 0x80000000) == 0)
        v74 = __p;
      else
        v74 = *(_BYTE **)__p;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v74;
      v91 = 1026;
      v92 = 147;
      v38 = "%s:%{public}d Failed to create numSamplesPerTriangle buffer";
    }
  }
  else
  {
LABEL_21:
    if (qword_256930368 != -1)
      dispatch_once(&qword_256930368, &unk_250AD5E50);
    v32 = (id)qword_256930360;
    if (!os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      goto LABEL_24;
    sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::MeshSurfaceSamplerGPU::init(const simd_float4x4 &)");
    if ((v96 & 0x80000000) == 0)
      v37 = __p;
    else
      v37 = *(_BYTE **)__p;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v37;
    v91 = 1026;
    v92 = 26;
    v38 = "%s:%{public}d Failed to initialize MeshSurfaceSampler.";
  }
  _os_log_error_impl(&dword_239388000, v32, OS_LOG_TYPE_ERROR, v38, buf, 0x12u);
  if (SBYTE3(v96) < 0)
    operator delete(*(void **)__p);
LABEL_24:

LABEL_25:
  if (qword_2569304B0 != -1)
    dispatch_once(&qword_2569304B0, &unk_250AD6A78);
  v33 = (id)qword_2569304A8;
  if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
  {
    sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::VoxelHashingPipelineGPUSubmaps::configureMeshSurfaceSampler(const VoxelHashingPipelineConfig &)");
    v36 = (v96 & 0x80000000) == 0 ? __p : *(_BYTE **)__p;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v36;
    v91 = 1026;
    v92 = 473;
    _os_log_error_impl(&dword_239388000, v33, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to configure mesh surface sampler.", buf, 0x12u);
    if (SBYTE3(v96) < 0)
      operator delete(*(void **)__p);
  }
  v34 = 0;
LABEL_29:

  return v34;
}

void sub_2393E6E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  std::__shared_weak_count **v16;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  va_list va;

  va_start(va, a15);
  __cxa_guard_abort(&qword_256930538);
  v18 = *v16;
  if (*v16)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  sub_2393BB9F0((uint64_t)va);
  MEMORY[0x23B83C4BC](v15, 0x10E0C40A317B3DBLL);
  _Unwind_Resume(a1);
}

void sub_2393E6ED0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  int v5;

  if (v5 < 0)
    operator delete(v4);

  _Unwind_Resume(a1);
}

uint64_t sub_2393E6F1C(uint64_t a1, uint64_t a2)
{
  float v3;
  BOOL v4;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v10;
  void **v11;
  const char *v12;
  void **v13;
  void *__p[2];
  char v15;
  uint8_t buf[4];
  void **v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 200) >= *(_DWORD *)(a2 + 204)
    || ((v3 = *(float *)(a2 + 212), v3 > 0.0) ? (v4 = v3 < *(float *)(a2 + 216)) : (v4 = 0),
        !v4 || !*(_DWORD *)(a2 + 312) || !*(_DWORD *)(a2 + 316)))
  {
    if (qword_2569304B0 != -1)
      dispatch_once(&qword_2569304B0, &unk_250AD6A78);
    v10 = (id)qword_2569304A8;
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      goto LABEL_16;
    sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::VoxelHashingPipelineGPUSubmaps::configureCoverage(const VoxelHashingPipelineConfig &)");
    if (v15 >= 0)
      v11 = __p;
    else
      v11 = (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v17 = v11;
    v18 = 1026;
    v19 = 486;
    v12 = "%s:%{public}d Failed to configure coverage - invalid coverage config.";
    goto LABEL_21;
  }
  v6 = (int *)operator new();
  sub_2393DE6D4((uint64_t)v6, (__int128 *)(a2 + 184));
  v7 = *(_QWORD *)(a1 + 472);
  *(_QWORD *)(a1 + 472) = v6;
  if (v7)
  {
    v8 = sub_2393A6770(v7);
    MEMORY[0x23B83C4BC](v8, 0x10E0C40FDB0B8DBLL);
    v6 = *(int **)(a1 + 472);
  }
  if ((sub_2393DE8B0(v6, *(unsigned int *)(a2 + 312), *(unsigned int *)(a2 + 316)) & 1) != 0)
    return 1;
  if (qword_2569304B0 != -1)
    dispatch_once(&qword_2569304B0, &unk_250AD6A78);
  v10 = (id)qword_2569304A8;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::VoxelHashingPipelineGPUSubmaps::configureCoverage(const VoxelHashingPipelineConfig &)");
    if (v15 >= 0)
      v13 = __p;
    else
      v13 = (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v17 = v13;
    v18 = 1026;
    v19 = 494;
    v12 = "%s:%{public}d Failed to configure coverage - failed to create CoverageFOMManager.";
LABEL_21:
    _os_log_error_impl(&dword_239388000, v10, OS_LOG_TYPE_ERROR, v12, buf, 0x12u);
    if (v15 < 0)
      operator delete(__p[0]);
  }
LABEL_16:

  return 0;
}

void sub_2393E7174(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B83C4BC](v1, 0x10E0C40FDB0B8DBLL);
  _Unwind_Resume(a1);
}

id sub_2393E719C()
{
  if (qword_2569304B0 != -1)
    dispatch_once(&qword_2569304B0, &unk_250AD6A78);
  return (id)qword_2569304A8;
}

BOOL sub_2393E71DC(uint64_t a1)
{
  return *(float *)(a1 + 20) > 0.0
      && *(_DWORD *)a1
      && *(_DWORD *)(a1 + 4) > *(_DWORD *)a1
      && *(float *)(a1 + 8) > 0.0
      && *(float *)(a1 + 12) > 0.0
      && *(float *)(a1 + 16) > 0.0;
}

void sub_2393E722C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250AD6AA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2393E723C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250AD6AA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83C4BCLL);
}

void sub_2393E726C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 608);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 616);
    v4 = *(void **)(a1 + 608);
    if (v3 != v2)
    {
      do
      {
        v3 -= 104;
        sub_2393E738C(v3);
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 608);
    }
    *(_QWORD *)(a1 + 616) = v2;
    operator delete(v4);
  }

  v5 = *(void **)(a1 + 448);
  if (v5)
  {
    *(_QWORD *)(a1 + 456) = v5;
    operator delete(v5);
  }

  v6 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v6)
  {

    JUMPOUT(0x23B83C4BCLL);
  }
}

void sub_2393E738C(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 48);
  if (v3)
  {
    *(_QWORD *)(a1 + 56) = v3;
    operator delete(v3);
  }

}

uint64_t sub_2393E73EC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  NSObject *v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  void *__p[2];
  char v21;
  uint8_t buf[4];
  void **v23;
  __int16 v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_250AD69F0;
  *(_QWORD *)(a1 + 8) = 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  CVPixelBufferPoolRelease(*(CVPixelBufferPoolRef *)(a1 + 72));
  CVPixelBufferPoolRelease(*(CVPixelBufferPoolRef *)(a1 + 80));
  *(_QWORD *)(a1 + 72) = 0;
  if (qword_2569304B0 != -1)
    dispatch_once(&qword_2569304B0, &unk_250AD6A78);
  v5 = (id)qword_2569304A8;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    sub_2393C4DD0(__p, "virtual oc::voxel_hashing::VoxelHashingPipelineGPUSubmaps::~VoxelHashingPipelineGPUSubmaps()");
    v6 = v21 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v23 = v6;
    v24 = 1026;
    v25 = 42;
    _os_log_impl(&dword_239388000, v5, OS_LOG_TYPE_DEFAULT, "%s:%{public}d Successfully destroyed VoxelHashingPipelineGPUSubmaps.", buf, 0x12u);
    if (v21 < 0)
      operator delete(__p[0]);
  }

  v7 = *(_QWORD *)(a1 + 472);
  *(_QWORD *)(a1 + 472) = 0;
  if (v7)
  {
    v8 = sub_2393A6770(v7);
    MEMORY[0x23B83C4BC](v8, 0x10E0C40FDB0B8DBLL);
  }
  v9 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = 0;
  if (v9)
  {
    v10 = sub_2393C4940(v9);
    MEMORY[0x23B83C4BC](v10, 0x10E0C40A317B3DBLL);
  }
  v11 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(void **)(a1 + 48);
  if (v14)
  {
    *(_QWORD *)(a1 + 56) = v14;
    operator delete(v14);
  }
  v15 = *(void **)(a1 + 24);
  if (v15)
  {
    *(_QWORD *)(a1 + 32) = v15;
    operator delete(v15);
  }
  v16 = *(std::__shared_weak_count **)(a1 + 16);
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  return a1;
}

void sub_2393E7658(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;

  sub_2393E76F8(v1 + 59);
  sub_2393C48FC(v1 + 15);
  v4 = v1[14];
  v1[14] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = v1[13];
  v1[13] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = v1[12];
  v1[12] = 0;
  if (v6)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = (void *)v1[6];
    if (!v7)
    {
LABEL_7:
      v8 = (void *)v1[3];
      if (!v8)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  else
  {
    v7 = (void *)v1[6];
    if (!v7)
      goto LABEL_7;
  }
  v1[7] = v7;
  operator delete(v7);
  v8 = (void *)v1[3];
  if (!v8)
  {
LABEL_9:
    sub_2393BB9F0(v2);
    _Unwind_Resume(a1);
  }
LABEL_8:
  v1[4] = v8;
  operator delete(v8);
  goto LABEL_9;
}

uint64_t *sub_2393E76F8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_2393A6770(v2);
    MEMORY[0x23B83C4BC](v3, 0x10E0C40FDB0B8DBLL);
  }
  return a1;
}

void sub_2393E7740(uint64_t a1)
{
  sub_2393E8C1C(a1);
  JUMPOUT(0x23B83C4BCLL);
}

BOOL sub_2393E7764(uint64_t a1, int *a2)
{
  BOOL v2;
  __int128 *v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  uint32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  uint32x4_t v18;
  _BOOL8 v19;
  float32x4_t v21;
  float32x2_t v22;
  float32x2_t v23;
  uint32x2_t v24;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  _QWORD *v29;
  void *v30;
  _QWORD *v31;
  void *v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  void *v46;
  _Unwind_Exception *v47;
  int v48;
  __int128 v49;
  uint64_t v50;
  _QWORD v51[3];
  _QWORD *v52;
  _QWORD v53[3];
  _QWORD *v54;
  _QWORD v55[4];
  _BYTE v56[32];
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  if (*a2)
    v2 = *((float *)a2 + 1) < 0.0001;
  else
    v2 = 1;
  if (v2 || *((_BYTE *)a2 + 8) == 0)
    return 0;
  v6 = *((float32x4_t *)a2 + 1);
  v7 = *((float32x4_t *)a2 + 2);
  v5 = (__int128 *)(a2 + 4);
  v8 = *((float32x4_t *)a2 + 3);
  v9 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 16);
  v10 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 32);
  v11 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
  v12 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v11, vabdq_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v6, *(float32x2_t *)v6.f32, 1), v7, *(float32x2_t *)v7.f32, 1), v8, *(float32x2_t *)v8.f32, 1), v9)), (int8x16_t)vcgeq_f32(v11, vabdq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v6, v6.f32[0]), v7, v7.f32[0]),
                                         v8,
                                         v8.f32[0]),
                                       *MEMORY[0x24BDAEDF8]))),
                      (int8x16_t)vcgeq_f32(v11, vabdq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v6, v6, 2), v7, v7, 2), v8, v8, 2), v10)));
  v12.i32[3] = v12.i32[2];
  if ((vminvq_u32(v12) & 0x80000000) == 0)
    return 0;
  v13 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2);
  v14 = (float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)v6, (int32x4_t)v8), (int32x4_t)v13);
  v15 = (float32x4_t)vtrn2q_s32((int32x4_t)v6, (int32x4_t)v7);
  v15.i32[2] = HIDWORD(*((_QWORD *)a2 + 6));
  v16 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)v6, (int32x4_t)v8), (int32x4_t)v7);
  v17 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
  v18 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v17, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v16, v7.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1), v15), v13, v14), v9)), (int8x16_t)vcgeq_f32(v17, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v16, v6.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v6.f32, 1),
                                           v15),
                                         (float32x4_t)vdupq_laneq_s32((int32x4_t)v6, 2),
                                         v14),
                                       *MEMORY[0x24BDAEDF8]))),
                      (int8x16_t)vcgeq_f32(v17, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v16, v8.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 1), v15), (float32x4_t)vdupq_laneq_s32((int32x4_t)v8, 2), v14), v10)));
  v18.i32[3] = v18.i32[2];
  if ((vminvq_u32(v18) & 0x80000000) == 0)
    return 0;
  v21 = vmulq_f32(v6, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v8, (int8x16_t)v8, 0xCuLL), (int8x16_t)v8, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v7, (int32x4_t)v7), (int8x16_t)v7, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v8, (int32x4_t)v8), (int8x16_t)v8, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v7, (int8x16_t)v7, 0xCuLL), (int8x16_t)v7, 8uLL)));
  v19 = 0;
  if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 2), vaddq_f32(v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 1))).f32[0]+ -1.0) <= 0.000011)
  {
    v22 = vabs_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v6, (int8x16_t)v6, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v7, (int8x16_t)v7, 8uLL)));
    v23 = (float32x2_t)vdup_n_s32(0x38D1B717u);
    v24 = (uint32x2_t)vand_s8((int8x8_t)vcge_f32(v23, vabs_f32(vadd_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(*((int8x16_t *)a2 + 4), *((int8x16_t *)a2 + 4), 8uLL)), (float32x2_t)0xBF80000080000000))), (int8x8_t)vcge_f32(v23, v22));
    if ((vpmin_u32(v24, v24).u32[0] & 0x80000000) != 0 && a2[20] != 2 && *((float *)a2 + 21) >= 0.0)
    {
      if (*(_BYTE *)(a1 + 8) || !*(_QWORD *)(a1 + 128))
        return 0;
      v48 = *a2;
      *(_QWORD *)v56 = &off_250AD6B40;
      *(_QWORD *)&v56[24] = v56;
      v55[3] = v55;
      v55[0] = &off_250AD6B40;
      v26 = *(_QWORD *)(a1 + 144);
      *(_QWORD *)v26 = 0;
      *(_DWORD *)(v26 + 8) = 0;
      v53[0] = &off_250AD6B88;
      v53[1] = &v48;
      v54 = v53;
      v52 = v51;
      v51[0] = &off_250AD6B88;
      v51[1] = &v48;
      sub_2393E8B38((uint64_t)v51, &v49);
      v27 = *(_QWORD *)(a1 + 208);
      v28 = *(void **)v27;
      if (*(_QWORD *)v27)
      {
        *(_QWORD *)(v27 + 8) = v28;
        operator delete(v28);
        *(_QWORD *)v27 = 0;
        *(_QWORD *)(v27 + 8) = 0;
        *(_QWORD *)(v27 + 16) = 0;
      }
      *(_OWORD *)v27 = v49;
      *(_QWORD *)(v27 + 16) = v50;
      if (!v52)
        goto LABEL_43;
      (*(void (**)(__int128 *__return_ptr))(*v52 + 48))(&v49);
      v29 = *(_QWORD **)(a1 + 208);
      v30 = (void *)v29[3];
      if (v30)
      {
        v29[4] = v30;
        operator delete(v30);
      }
      *(_OWORD *)(v29 + 3) = v49;
      v29[5] = v50;
      if (!v52)
      {
LABEL_43:
        sub_2393BA8D0();
        _Unwind_Resume(v47);
      }
      (*(void (**)(__int128 *__return_ptr))(*v52 + 48))(&v49);
      v31 = *(_QWORD **)(a1 + 208);
      v32 = (void *)v31[6];
      if (v32)
      {
        v31[7] = v32;
        operator delete(v32);
      }
      *((_OWORD *)v31 + 3) = v49;
      v31[8] = v50;
      v33 = v52;
      if (v52 == v51)
      {
        v34 = 4;
        v33 = v51;
      }
      else
      {
        if (!v52)
          goto LABEL_31;
        v34 = 5;
      }
      (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_31:
      v35 = v54;
      if (v54 == v53)
      {
        v36 = 4;
        v35 = v53;
      }
      else
      {
        if (!v54)
          goto LABEL_36;
        v36 = 5;
      }
      (*(void (**)(void))(*v35 + 8 * v36))();
LABEL_36:
      v37 = *(_QWORD **)&v56[24];
      if (*(_BYTE **)&v56[24] == v56)
      {
        v38 = 4;
        v37 = v56;
      }
      else
      {
        if (!*(_QWORD *)&v56[24])
          goto LABEL_41;
        v38 = 5;
      }
      (*(void (**)(void))(*v37 + 8 * v38))();
LABEL_41:
      *(_DWORD *)(a1 + 60) = a2[1];
      v39 = *v5;
      v40 = v5[1];
      v41 = v5[3];
      *(_OWORD *)(a1 + 96) = v5[2];
      *(_OWORD *)(a1 + 112) = v41;
      *(_OWORD *)(a1 + 64) = v39;
      *(_OWORD *)(a1 + 80) = v40;
      v42 = *(_QWORD *)(a1 + 128);
      v19 = *(_BYTE *)v42 != 0;
      if (*(_BYTE *)v42)
      {
        v43 = *(_BYTE *)(v42 + 8);
        *(_OWORD *)v56 = *(_OWORD *)(v42 + 9);
        *(_OWORD *)&v56[11] = *(_OWORD *)(v42 + 20);
        *(_BYTE *)(a1 + 12) = v43;
        *(_OWORD *)(a1 + 13) = *(_OWORD *)v56;
        v44 = *(_DWORD *)&v56[11];
        *(_OWORD *)(a1 + 24) = *(_OWORD *)&v56[11];
        *(_DWORD *)(a1 + 40) = *a2;
        LOBYTE(v44) = *((_BYTE *)a2 + 8);
        *(float *)(a1 + 48) = (float)v44;
        dispatch_get_global_queue(0, 0);
        v45 = objc_claimAutoreleasedReturnValue();
        v46 = *(void **)(a1 + 280);
        *(_QWORD *)(a1 + 280) = v45;

        *(_BYTE *)(a1 + 8) = 1;
      }
    }
  }
  return v19;
}

void sub_2393E7C10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18, char a19, uint64_t a20,uint64_t a21,char *a22)
{
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;

  v26 = a18;
  if (a18 == v22)
  {
    v27 = 4;
    v26 = &a15;
  }
  else
  {
    if (!a18)
      goto LABEL_6;
    v27 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v26 + 8 * v27))();
LABEL_6:
  v28 = a22;
  if (a22 == &a19)
  {
    v29 = 4;
    v28 = &a19;
  }
  else
  {
    if (!a22)
      goto LABEL_11;
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
LABEL_11:
  v30 = *(_QWORD **)(v23 + 24);
  if (v30 == (_QWORD *)(v24 - 96))
  {
    v31 = 4;
    v30 = (_QWORD *)(v24 - 96);
  }
  else
  {
    if (!v30)
      _Unwind_Resume(exception_object);
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
  _Unwind_Resume(exception_object);
}

void sub_2393E7CB0(uint64_t a1)
{
  uint64_t v1;
  size_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  NSObject *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  _QWORD v16[7];
  uint64_t block;
  uint64_t v18;
  int8x16_t (*v19)(uint64_t);
  void *v20;
  _QWORD *v21;

  v1 = *(_QWORD *)(a1 + 128);
  if (*(_BYTE *)v1)
  {
    v3 = *(unsigned int *)(v1 + 4);
    v4 = *(_QWORD *)(v1 + 48);
    v5 = *(_QWORD *)(v1 + 64);
    v6 = !(_DWORD)v3 || v4 == 0;
    if (!v6 && v5 != 0)
    {
      atomic_store(0, (unsigned int *)(a1 + 272));
      v8 = *(NSObject **)(a1 + 280);
      v9 = MEMORY[0x24BDAC760];
      v16[0] = MEMORY[0x24BDAC760];
      v16[1] = 3221225472;
      v16[2] = sub_2393E7EF4;
      v16[3] = &unk_250AD6B10;
      v16[4] = a1;
      v16[5] = v4;
      v16[6] = v5;
      dispatch_apply(v3, v8, v16);
      v10 = atomic_load((unsigned int *)(a1 + 272));
      v13 = *(_QWORD *)(a1 + 144);
      v12 = (_QWORD *)(a1 + 144);
      v11 = v13;
      if (*((_DWORD *)v12 - 26) < v10)
        v10 = *((_DWORD *)v12 - 26);
      *(_DWORD *)(v11 + 4 * v12[3]) = v10;
      v14 = v12[6];
      block = v9;
      v18 = 3221225472;
      v19 = sub_2393E8A98;
      v20 = &unk_250AD6C48;
      v21 = v12;
      dispatch_sync(v14, &block);
      v15 = v12[14];
      block = v9;
      v18 = 3221225472;
      v19 = sub_2393E8AB4;
      v20 = &unk_250AD6C48;
      v21 = v12 + 8;
      dispatch_sync(v15, &block);
    }
  }
}

float sub_2393E7DC8@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  uint64_t v9;
  float result;
  __int128 v11;
  __int128 v12;
  uint64_t block;
  uint64_t v14;
  int8x16_t (*v15)(uint64_t);
  void *v16;
  uint64_t v17;

  v4 = a1 + 144;
  v5 = MEMORY[0x24BDAC760];
  v6 = *(NSObject **)(a1 + 192);
  block = MEMORY[0x24BDAC760];
  v14 = 3221225472;
  v15 = sub_2393E7EB4;
  v16 = &unk_250AD6C48;
  v17 = v4;
  dispatch_sync(v6, &block);
  v7 = *(NSObject **)(a1 + 256);
  block = v5;
  v14 = 3221225472;
  v15 = sub_2393E7ED4;
  v16 = &unk_250AD6C48;
  v17 = a1 + 208;
  dispatch_sync(v7, &block);
  v8 = *(_DWORD *)(*(_QWORD *)(a1 + 144) + 4 * *(_QWORD *)(a1 + 184));
  if (v8)
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 24 * *(_QWORD *)(a1 + 248));
  else
    v9 = 0;
  result = *(float *)(a1 + 60);
  v11 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 48) = v11;
  v12 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 80) = v12;
  *(_DWORD *)a2 = v8;
  *(_QWORD *)(a2 + 8) = v9;
  *(float *)(a2 + 16) = result;
  return result;
}

int8x16_t sub_2393E7EB4(uint64_t a1)
{
  int8x16_t *v1;
  int8x16_t result;

  v1 = *(int8x16_t **)(a1 + 32);
  if (v1[3].i8[8])
  {
    result = vextq_s8(v1[2], v1[2], 8uLL);
    v1[2] = result;
    v1[3].i8[8] = 0;
  }
  return result;
}

int8x16_t sub_2393E7ED4(uint64_t a1)
{
  int8x16_t *v1;
  int8x16_t result;

  v1 = *(int8x16_t **)(a1 + 32);
  if (v1[3].i8[8])
  {
    result = vextq_s8(v1[2], v1[2], 8uLL);
    v1[2] = result;
    v1[3].i8[8] = 0;
  }
  return result;
}

float32x4_t *sub_2393E7EF4(_QWORD *a1, int a2, int8x16_t a3, __n128 a4, double a5, double a6, double a7, __n128 a8)
{
  float32x4_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float32x4_t *result;
  unsigned int *v14;
  float v15;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  float v22;
  unsigned int v24;
  float32x4_t v25;
  float32x4_t v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  float32x4_t v30;
  uint64_t v31;
  float32x4_t v32;
  float32x4_t v33;
  int16x4_t v34;
  float32x4_t v35;
  __int16 v36;
  int8x8_t v37;
  __int128 v38;
  __int128 v39;
  int8x16_t v40;
  float32x4_t v41;
  _BOOL4 v42;
  int8x8_t v43;
  float v44;
  __n128 *v45;
  int16x4_t v46;
  int32x4_t v47;
  int8x16_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v54;
  int32x2_t v55;
  int32x4_t v56;
  uint16x4_t v58;
  uint64_t v59;
  unsigned int v60;
  unint64_t v61;
  uint32x2_t v62;
  float32x2_t v63;
  float v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float v68;
  float v70;
  float v71;
  float v72;
  float32x4_t v74;
  float v75;
  float v76;
  float v77;
  float v79;
  float v80;
  float v81;
  float32x4_t v83;
  float v84;
  float v85;
  float v86;
  float v88;
  float v89;
  float v91;
  float v93;
  float v94;
  int32x4_t v96;
  float32x2_t v97;
  float32x2_t v98;
  int32x2_t v99;
  uint16x4_t v100;
  int32x2_t v101;
  unsigned int v102;
  uint64_t v103;
  _QWORD *v104;
  int v105;
  __n128 v106;
  _QWORD v107[2];
  float32x4_t v108;
  uint64_t v109;
  float32x4_t v110;
  uint64_t v111;
  float32x4_t v112;
  uint64_t v113;
  float32x4_t v114;
  uint64_t v115;
  float32x4_t v116;
  uint64_t v117;
  float32x4_t v118;
  uint64_t v119;
  float32x4_t v120;
  uint64_t v121;
  float32x4_t v122;
  _OWORD v123[4];
  uint64_t v124;

  v9 = 0;
  v124 = *MEMORY[0x24BDAC8D0];
  v10 = a1[4];
  v11 = a1[5];
  v12 = a1[6];
  v105 = a2 << 9;
  result = &v114;
  v14 = (unsigned int *)(v10 + 272);
  v15 = 0.5;
  __asm { FMOV            V23.2S, #1.0 }
  while (2)
  {
    v19 = v9 + v105;
    if ((v9 + v105) >= *(_DWORD *)(*(_QWORD *)(v10 + 128) + 4) << 9)
      goto LABEL_2;
    *(int8x8_t *)a3.i8 = vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v19), (uint32x2_t)0xFFFFFFFDFFFFFFFALL), (int8x8_t)0x700000007);
    v20 = v19 >> 9;
    v21 = v12 + 4104 * v20 + ((unint64_t)a3.u32[0] << 9) + ((unint64_t)a3.u32[1] << 6);
    if (!*(_BYTE *)(v21 + 8 * (v9 & 7) + 4))
      goto LABEL_2;
    v22 = *(float *)(v21 + 8 * (v9 & 7));
    if (v22 < -1.732 || v22 > 1.732)
      goto LABEL_2;
    v24 = 0;
    a3.i16[1] = a3.i16[2];
    a3.i16[2] = v9 & 7;
    a4.n128_u64[0] = (unint64_t)vorr_s8((int8x8_t)vshl_n_s16(*(int16x4_t *)(v12 + 4104 * v20 + 4096), 3uLL), *(int8x8_t *)a3.i8);
    *(float *)a3.i32 = (float)a4.n128_i16[0];
    v106 = a4;
    a4.n128_u32[0] = a4.n128_u16[1];
    a4.n128_u32[1] = a4.n128_u16[2];
    v104 = (_QWORD *)(*(_QWORD *)(v10 + 208) + 24 * *(_QWORD *)(v10 + 232));
    a4.n128_u64[0] = (unint64_t)vcvt_f32_s32(vshr_n_s32(vshl_n_s32((int32x2_t)a4.n128_u64[0], 0x10uLL), 0x10uLL));
    v25 = (float32x4_t)vextq_s8(vextq_s8(a3, a3, 4uLL), (int8x16_t)a4, 0xCuLL);
    a4.n128_u64[0] = 0x3F0000003F000000;
    a4.n128_u64[1] = 0x3F0000003F000000;
    v26 = vaddq_f32(v25, (float32x4_t)a4);
    v27 = *(_DWORD *)(v10 + 12);
    v28 = *(_DWORD *)(v10 + 16);
    v29 = *(_DWORD *)(v10 + 20);
    v8.i32[0] = 0;
    v30 = 0uLL;
    while (2)
    {
      v31 = 0;
      v26 = vmlsq_lane_f32(v26, v30, *(float32x2_t *)v8.f32, 0);
      v32 = v26;
      v32.i32[3] = 0;
      v33 = vrndmq_f32(v32);
      v34 = (int16x4_t)vcvt_s32_f32(*(float32x2_t *)v33.f32);
      v34.i16[1] = v34.i16[2];
      v35 = vsubq_f32(v26, v33);
      if (v35.f32[2] >= v15)
        v36 = 0;
      else
        v36 = -1;
      v37 = (int8x8_t)vcgt_f32((float32x2_t)0x3F0000003F000000, *(float32x2_t *)v35.f32);
      *(int8x8_t *)v33.f32 = v37;
      v33.i16[1] = v37.i16[2];
      v33.i16[2] = v36;
      v34.i16[2] = (int)v33.f32[2];
      *(int16x4_t *)v40.i8 = vadd_s16(*(int16x4_t *)v33.f32, v34);
      *(int16x4_t *)v41.f32 = vadd_s16(*(int16x4_t *)v40.i8, (int16x4_t)0x1000000010000);
      *(int16x4_t *)&v38 = vadd_s16(*(int16x4_t *)v40.i8, (int16x4_t)0x100000000);
      *(int16x4_t *)&v39 = vadd_s16(*(int16x4_t *)v40.i8, (int16x4_t)0x100010000);
      v40.u64[1] = (unint64_t)vadd_s16(*(int16x4_t *)v40.i8, (int16x4_t)1);
      *(int16x4_t *)&v41.u32[2] = vadd_s16(*(int16x4_t *)v40.i8, (int16x4_t)65537);
      v123[0] = v40;
      v123[1] = v41;
      *((int16x4_t *)&v38 + 1) = vadd_s16(*(int16x4_t *)v40.i8, (int16x4_t)0x100000001);
      *((int16x4_t *)&v39 + 1) = vadd_s16(*(int16x4_t *)v40.i8, (int16x4_t)0x1000100010001);
      v123[2] = v38;
      v123[3] = v39;
      v42 = v35.f32[2] >= v15;
      v43 = vmvn_s8(v37);
      v107[0] = 0;
      v122 = 0uLL;
      v109 = 0;
      v108 = 0uLL;
      v111 = 0;
      v110 = 0uLL;
      v113 = 0;
      v112 = 0uLL;
      v115 = 0;
      v114 = 0uLL;
      v117 = 0;
      v116 = 0uLL;
      v119 = 0;
      v118 = 0uLL;
      v120 = 0uLL;
      v121 = 0;
      while (2)
      {
        v46 = vshr_n_s16(*(int16x4_t *)((char *)v123 + 8 * v31), 3uLL);
        v40.i32[0] = v46.i16[0];
        a4.n128_u32[0] = v46.u16[1];
        a4.n128_u32[1] = v46.u16[2];
        a4.n128_u64[0] = (unint64_t)vshr_n_s32(vshl_n_s32((int32x2_t)a4.n128_u64[0], 0x10uLL), 0x10uLL);
        v47 = vmulq_s32((int32x4_t)vextq_s8(vextq_s8(v40, v40, 4uLL), (int8x16_t)a4, 0xCuLL), (int32x4_t)xmmword_2393F54A0);
        v48 = (int8x16_t)vdupq_laneq_s32(v47, 2);
        v40 = veorq_s8(veorq_s8((int8x16_t)vdupq_lane_s32(*(int32x2_t *)v47.i8, 1), v48), (int8x16_t)v47);
        v49 = v40.i32[0] % v27;
        v50 = v40.i32[0] % v27 * v28;
        v51 = (v50 + v28);
        a4 = 0uLL;
        v40.i32[0] = 0;
        if (v50 >= v51 || v50 >= v29 || v51 > v29)
        {
LABEL_17:
          v44 = 0.0;
          goto LABEL_18;
        }
        LODWORD(v54) = v29;
        while ((*(_DWORD *)(v11 + 16 * v50 + 12) & 0x80000000) != 0)
        {
LABEL_27:
          if (++v50 == v51)
          {
            if (v29 > v54)
            {
              while (1)
              {
                v54 = *(unsigned int *)(v11 + 16 * v54 + 8);
                if (v54 >= v29)
                  break;
                v58 = (uint16x4_t)vceq_s16(*(int16x4_t *)(v11 + 16 * v54), v46);
                v58.i16[3] = v58.i16[2];
                if ((vminv_u16(v58) & 0x8000) != 0)
                {
                  v59 = v11 + 16 * v54;
                  goto LABEL_44;
                }
              }
            }
            goto LABEL_17;
          }
        }
        v48.i64[0] = *(_QWORD *)(v11 + 16 * v50);
        a8.n128_u64[0] = (unint64_t)vceq_s16(*(int16x4_t *)v48.i8, v46);
        a8.n128_u16[3] = a8.n128_u16[2];
        if ((vminv_u16((uint16x4_t)a8.n128_u64[0]) & 0x8000) == 0)
        {
          a8.n128_u32[0] = v48.i16[0];
          v55.i32[0] = v48.u16[1];
          v55.i32[1] = v48.u16[2];
          *(int32x2_t *)v48.i8 = vshr_n_s32(vshl_n_s32(v55, 0x10uLL), 0x10uLL);
          v56 = vmulq_s32((int32x4_t)vextq_s8(vextq_s8((int8x16_t)a8, (int8x16_t)a8, 4uLL), v48, 0xCuLL), (int32x4_t)xmmword_2393F54A0);
          a8 = (__n128)veorq_s8((int8x16_t)vdupq_lane_s32(*(int32x2_t *)v56.i8, 1), (int8x16_t)vdupq_laneq_s32(v56, 2));
          v48 = veorq_s8((int8x16_t)a8, (int8x16_t)v56);
          if (v48.i32[0] % v27 == v49 && (_DWORD)v54 == v29)
          {
            if (*(_DWORD *)(v11 + 16 * v50 + 8) >= v29)
              LODWORD(v54) = v29;
            else
              LODWORD(v54) = v50;
          }
          goto LABEL_27;
        }
        if (v29 <= v50)
          goto LABEL_17;
        v59 = v11 + 16 * v50;
LABEL_44:
        v60 = *(_DWORD *)(v59 + 12);
        v44 = 0.0;
        if ((v60 & 0x80000000) == 0)
        {
          v61 = v12
              + 4104 * v60
              + ((*((_QWORD *)v123 + v31) & 7) << 9)
              + ((unint64_t)(WORD1(*((_QWORD *)v123 + v31)) & 7) << 6)
              + 8 * (HIDWORD(*((_QWORD *)v123 + v31)) & 7);
          v40.i32[0] = *(_DWORD *)v61;
          a4.n128_u8[0] = *(_BYTE *)(v61 + 4);
          v44 = (float)a4.n128_u32[0];
          v62.i32[0] = *(unsigned __int8 *)(v61 + 5);
          v62.i32[1] = *(unsigned __int8 *)(v61 + 6);
          v63 = (float32x2_t)vdup_n_s32(0x437F0000u);
          a4.n128_u64[0] = (unint64_t)vdiv_f32(vcvt_f32_u32(v62), v63);
          v63.i8[0] = *(_BYTE *)(v61 + 7);
          a4.n128_f32[2] = (float)v63.u32[0] / 255.0;
          a4.n128_u32[3] = 1.0;
        }
LABEL_18:
        v45 = (__n128 *)&v107[4 * v31];
        v45->n128_u32[0] = v40.i32[0];
        v45->n128_f32[1] = v44;
        v45->n128_u64[1] = 0;
        v45[1] = a4;
        if (++v31 != 8)
          continue;
        break;
      }
      v64 = 0.0;
      if (v35.f32[2] < v15)
        v64 = 1.0;
      a4.n128_u64[0] = (unint64_t)vand_s8(v37, _D23);
      *(float32x2_t *)v41.f32 = vcvt_f32_u32((uint32x2_t)vand_s8(v43, (int8x8_t)0x100000001));
      a4.n128_f32[2] = v64;
      v65.i64[0] = 0x3F0000003F000000;
      v65.i64[1] = 0x3F0000003F000000;
      v66 = vmlaq_f32(v35, v65, (float32x4_t)a4);
      v41.f32[2] = (float)v42;
      a3.i64[0] = 0xBF000000BF000000;
      a3.i64[1] = 0xBF000000BF000000;
      v67 = vmlaq_f32(v66, (float32x4_t)a3, v41);
      v68 = *((float *)v107 + 1);
      if (*((float *)v107 + 1) <= 0.0)
      {
        v68 = 0.0;
        a8 = 0uLL;
        if (v67.f32[0] > 1.0 || v67.f32[0] < 0.0)
        {
LABEL_58:
          v70 = 0.0;
        }
        else
        {
          v70 = 0.0;
          if (*((float *)&v109 + 1) > 0.0)
          {
            a8 = (__n128)v110;
            v70 = v67.f32[0] * *(float *)&v109;
            v68 = *((float *)&v109 + 1);
          }
        }
      }
      else
      {
        if (v67.f32[0] < 0.0 || v67.f32[0] > 1.0)
        {
          v68 = 0.0;
          a8 = 0uLL;
          goto LABEL_58;
        }
        v71 = 1.0 - v67.f32[0];
        if (*((float *)&v109 + 1) <= 0.0)
        {
          a8 = (__n128)v108;
          v70 = v71 * *(float *)v107;
        }
        else
        {
          v70 = (float)(v67.f32[0] * *(float *)&v109) + (float)(*(float *)v107 * v71);
          v68 = (float)(v67.f32[0] * *((float *)&v109 + 1)) + (float)(*((float *)v107 + 1) * v71);
          a4 = (__n128)v108;
          a8 = (__n128)vmlaq_n_f32(vmulq_n_f32(v110, v67.f32[0]), v108, v71);
        }
      }
      v72 = *((float *)&v113 + 1);
      if (*((float *)&v113 + 1) <= 0.0)
      {
        v72 = 0.0;
        v74 = 0uLL;
        if (v67.f32[0] > 1.0 || v67.f32[0] < 0.0)
        {
LABEL_72:
          v75 = 0.0;
        }
        else
        {
          v75 = 0.0;
          if (*((float *)&v111 + 1) > 0.0)
          {
            v74 = v112;
            v75 = v67.f32[0] * *(float *)&v111;
            v72 = *((float *)&v111 + 1);
          }
        }
      }
      else
      {
        if (v67.f32[0] < 0.0 || v67.f32[0] > 1.0)
        {
          v72 = 0.0;
          v74 = 0uLL;
          goto LABEL_72;
        }
        v76 = 1.0 - v67.f32[0];
        if (*((float *)&v111 + 1) <= 0.0)
        {
          v74 = v114;
          v75 = v76 * *(float *)&v113;
        }
        else
        {
          v75 = (float)(v67.f32[0] * *(float *)&v111) + (float)(*(float *)&v113 * v76);
          v72 = (float)(v67.f32[0] * *((float *)&v111 + 1)) + (float)(*((float *)&v113 + 1) * v76);
          a4 = (__n128)v114;
          v74 = vmlaq_n_f32(vmulq_n_f32(v112, v67.f32[0]), v114, v76);
        }
      }
      v77 = *((float *)&v115 + 1);
      if (*((float *)&v115 + 1) <= 0.0)
      {
        v77 = 0.0;
        v8 = 0uLL;
        if (v67.f32[0] > 1.0 || v67.f32[0] < 0.0)
        {
LABEL_86:
          v79 = 0.0;
        }
        else
        {
          v79 = 0.0;
          if (*((float *)&v117 + 1) > 0.0)
          {
            v8 = v118;
            v79 = v67.f32[0] * *(float *)&v117;
            v77 = *((float *)&v117 + 1);
          }
        }
      }
      else
      {
        if (v67.f32[0] < 0.0 || v67.f32[0] > 1.0)
        {
          v77 = 0.0;
          v8 = 0uLL;
          goto LABEL_86;
        }
        v80 = 1.0 - v67.f32[0];
        if (*((float *)&v117 + 1) <= 0.0)
        {
          v8 = v116;
          v79 = v80 * *(float *)&v115;
        }
        else
        {
          v79 = (float)(v67.f32[0] * *(float *)&v117) + (float)(*(float *)&v115 * v80);
          v77 = (float)(v67.f32[0] * *((float *)&v117 + 1)) + (float)(*((float *)&v115 + 1) * v80);
          a4 = (__n128)v116;
          v8 = vmlaq_n_f32(vmulq_n_f32(v118, v67.f32[0]), v116, v80);
        }
      }
      v81 = *((float *)&v121 + 1);
      if (*((float *)&v121 + 1) <= 0.0)
      {
        v81 = 0.0;
        v83 = 0uLL;
        if (v67.f32[0] > 1.0 || v67.f32[0] < 0.0)
        {
LABEL_100:
          v84 = 0.0;
        }
        else
        {
          v84 = 0.0;
          if (*((float *)&v119 + 1) > 0.0)
          {
            v83 = v120;
            v84 = v67.f32[0] * *(float *)&v119;
            v81 = *((float *)&v119 + 1);
          }
        }
      }
      else
      {
        if (v67.f32[0] < 0.0 || v67.f32[0] > 1.0)
        {
          v81 = 0.0;
          v83 = 0uLL;
          goto LABEL_100;
        }
        v85 = 1.0 - v67.f32[0];
        if (*((float *)&v119 + 1) <= 0.0)
        {
          v83 = v122;
          v84 = v85 * *(float *)&v121;
        }
        else
        {
          v84 = (float)(v67.f32[0] * *(float *)&v119) + (float)(*(float *)&v121 * v85);
          v81 = (float)(v67.f32[0] * *((float *)&v119 + 1)) + (float)(*((float *)&v121 + 1) * v85);
          a4 = (__n128)v122;
          v83 = vmlaq_n_f32(vmulq_n_f32(v120, v67.f32[0]), v122, v85);
        }
      }
      v86 = 1.0 - v67.f32[1];
      if (v68 <= 0.0)
      {
        v68 = 0.0;
        a8 = 0uLL;
        if (v67.f32[1] > 1.0 || v67.f32[1] < 0.0)
        {
LABEL_115:
          v88 = 0.0;
          if (v72 > 0.0)
            goto LABEL_125;
          goto LABEL_116;
        }
        v88 = 0.0;
        if (v77 > 0.0)
        {
          v88 = v67.f32[1] * v79;
          a8 = (__n128)v8;
          v68 = v77;
          if (v72 > 0.0)
            goto LABEL_125;
          goto LABEL_116;
        }
LABEL_124:
        if (v72 > 0.0)
          goto LABEL_125;
LABEL_116:
        v72 = 0.0;
        v74 = 0uLL;
        if (v67.f32[1] > 1.0 || v67.f32[1] < 0.0)
        {
LABEL_130:
          v89 = 0.0;
        }
        else
        {
          v89 = 0.0;
          if (v81 > 0.0)
          {
            v89 = v67.f32[1] * v84;
            v74 = v83;
            v72 = v81;
          }
        }
        goto LABEL_134;
      }
      if (v67.f32[1] < 0.0 || v67.f32[1] > 1.0)
      {
        v68 = 0.0;
        a8 = 0uLL;
        goto LABEL_115;
      }
      if (v77 <= 0.0)
      {
        v88 = v86 * v70;
        goto LABEL_124;
      }
      v88 = (float)(v67.f32[1] * v79) + (float)(v70 * v86);
      v68 = (float)(v67.f32[1] * v77) + (float)(v68 * v86);
      v8 = vmlaq_n_f32(vmulq_lane_f32(v8, *(float32x2_t *)v67.f32, 1), (float32x4_t)a8, v86);
      a8 = (__n128)v8;
      if (v72 <= 0.0)
        goto LABEL_116;
LABEL_125:
      if (v67.f32[1] < 0.0 || v67.f32[1] > 1.0)
      {
        v72 = 0.0;
        v74 = 0uLL;
        goto LABEL_130;
      }
      if (v81 <= 0.0)
      {
        v89 = v86 * v75;
      }
      else
      {
        v89 = (float)(v67.f32[1] * v84) + (float)(v75 * v86);
        v72 = (float)(v67.f32[1] * v81) + (float)(v72 * v86);
        v8 = vmlaq_n_f32(vmulq_lane_f32(v83, *(float32x2_t *)v67.f32, 1), v74, v86);
        v74 = v8;
      }
LABEL_134:
      v91 = 1.0 - v67.f32[2];
      if (v68 <= 0.0)
      {
        v68 = 0.0;
        a8 = 0uLL;
        if (v67.f32[2] > 1.0 || v67.f32[2] < 0.0)
        {
LABEL_144:
          v8.i32[0] = 0;
        }
        else
        {
          v8.i32[0] = 0;
          if (v72 > 0.0)
          {
            v8.f32[0] = v67.f32[2] * v89;
            a8 = (__n128)v74;
            v68 = v72;
          }
        }
      }
      else
      {
        if (v67.f32[2] < 0.0 || v67.f32[2] > 1.0)
        {
          v68 = 0.0;
          a8 = 0uLL;
          goto LABEL_144;
        }
        if (v72 <= 0.0)
        {
          v8.f32[0] = v91 * v88;
        }
        else
        {
          v8.f32[0] = (float)(v67.f32[2] * v89) + (float)(v88 * v91);
          v68 = (float)(v67.f32[2] * v72) + (float)(v68 * v91);
          a8 = (__n128)vmlaq_n_f32(vmulq_laneq_f32(v74, v67, 2), (float32x4_t)a8, v91);
        }
      }
      a4.n128_f32[0] = (float)(v67.f32[2]
                             * (float)((float)(v67.f32[1] * (float)(*(float *)&v119 - *(float *)&v121))
                                     + (float)(v86 * (float)(*(float *)&v111 - *(float *)&v113))))
                     + (float)(v91
                             * (float)((float)(v67.f32[1] * (float)(*(float *)&v117 - *(float *)&v115))
                                     + (float)(v86 * (float)(*(float *)&v109 - *(float *)v107))));
      if (fabsf(a4.n128_f32[0]) <= 0.000001)
      {
        v94 = fabsf(v89 - v88);
        v93 = *(float *)(v10 + 48);
        if (fabsf((float)(v67.f32[2] * (float)(v84 - v75)) + (float)(v91 * (float)(v79 - v70))) > 0.000001
          || v94 > 0.000001)
        {
          v15 = 0.5;
          if (v68 < v93)
            goto LABEL_2;
          goto LABEL_157;
        }
        a4.n128_f32[0] = fabsf(v8.f32[0]);
        v15 = 0.5;
      }
      else
      {
        v93 = *(float *)(v10 + 48);
        v15 = 0.5;
        if (v68 < v93)
          goto LABEL_2;
LABEL_157:
        a4.n128_f32[1] = (float)(v67.f32[2] * (float)(v84 - v75)) + (float)(v91 * (float)(v79 - v70));
        a4.n128_f32[2] = v89 - v88;
        v96 = (int32x4_t)vmulq_f32((float32x4_t)a4, (float32x4_t)a4);
        v96.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v96, 2), vadd_f32(*(float32x2_t *)v96.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v96.i8, 1))).u32[0];
        v97 = vrsqrte_f32((float32x2_t)v96.u32[0]);
        v98 = vmul_f32(v97, vrsqrts_f32((float32x2_t)v96.u32[0], vmul_f32(v97, v97)));
        v30 = vmulq_n_f32((float32x4_t)a4, vmul_f32(v98, vrsqrts_f32((float32x2_t)v96.u32[0], vmul_f32(v98, v98))).f32[0]);
        a4.n128_f32[0] = fabsf(v8.f32[0]);
        if (a4.n128_f32[0] >= 0.01)
        {
          if (v24 <= 8)
            goto LABEL_12;
        }
        else
        {
          v99 = vcvt_s32_f32(vrndm_f32((float32x2_t)vext_s8(*(int8x8_t *)v26.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL), 4uLL)));
          v98.i16[0] = vcvtms_s32_f32(v26.f32[0]);
          v98.i16[1] = v99.i16[0];
          v98.i16[2] = v99.i16[2];
          v100 = (uint16x4_t)vceq_s16((int16x4_t)v98, (int16x4_t)v106.n128_u64[0]);
          v100.i16[3] = v100.i16[2];
          if ((vminv_u16(v100) & 0x8000) == 0 && v24 < 9)
          {
LABEL_12:
            ++v24;
            continue;
          }
        }
      }
      break;
    }
    if (v68 >= v93 && a4.n128_f32[0] < 0.01)
    {
      v101 = vcvt_s32_f32(vrndm_f32((float32x2_t)vext_s8(*(int8x8_t *)v26.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL), 4uLL)));
      a4.n128_u16[0] = vcvtms_s32_f32(v26.f32[0]);
      a4.n128_u16[1] = v101.i16[0];
      a4.n128_u16[2] = v101.u16[2];
      a3.i64[1] = v106.n128_i64[1];
      *(int16x4_t *)a3.i8 = vceq_s16((int16x4_t)a4.n128_u64[0], (int16x4_t)v106.n128_u64[0]);
      a3.i16[3] = a3.i16[2];
      if ((vminv_u16(*(uint16x4_t *)a3.i8) & 0x8000) != 0)
      {
        do
          v102 = __ldaxr(v14);
        while (__stlxr(v102 + 1, v14));
        if (v102 < *(_DWORD *)(v10 + 40))
        {
          a8.n128_u32[3] = 1.0;
          v26.i32[3] = 1.0;
          v30.i32[3] = 0;
          v103 = *v104 + 48 * v102;
          *(float32x4_t *)v103 = v26;
          *(float32x4_t *)(v103 + 16) = v30;
          *(__n128 *)(v103 + 32) = a8;
        }
      }
    }
LABEL_2:
    if (++v9 != 512)
      continue;
    return result;
  }
}

int8x16_t sub_2393E8A98(uint64_t a1)
{
  uint64_t v1;
  int8x16_t result;

  v1 = *(_QWORD *)(a1 + 32);
  result = vextq_s8(*(int8x16_t *)(v1 + 24), *(int8x16_t *)(v1 + 24), 8uLL);
  *(int8x16_t *)(v1 + 24) = result;
  *(_BYTE *)(v1 + 56) = 1;
  return result;
}

int8x16_t sub_2393E8AB4(uint64_t a1)
{
  uint64_t v1;
  int8x16_t result;

  v1 = *(_QWORD *)(a1 + 32);
  result = vextq_s8(*(int8x16_t *)(v1 + 24), *(int8x16_t *)(v1 + 24), 8uLL);
  *(int8x16_t *)(v1 + 24) = result;
  *(_BYTE *)(v1 + 56) = 1;
  return result;
}

void sub_2393E8AD4()
{
  JUMPOUT(0x23B83C4BCLL);
}

_QWORD *sub_2393E8AE8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_250AD6B88;
  result[1] = v3;
  return result;
}

uint64_t sub_2393E8B1C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_250AD6B88;
  a2[1] = v2;
  return result;
}

void sub_2393E8B38(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  size_t v6;

  v3 = **(unsigned int **)(a1 + 8);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if ((_DWORD)v3)
  {
    v4 = 48 * v3;
    v5 = (char *)operator new(48 * v3);
    *a2 = v5;
    a2[2] = &v5[v4];
    v6 = 48 * ((v4 - 48) / 0x30uLL) + 48;
    bzero(v5, v6);
    a2[1] = &v5[v6];
  }
}

void sub_2393E8BC4()
{
  JUMPOUT(0x23B83C4BCLL);
}

_QWORD *sub_2393E8BD8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_250AD6B40;
  return result;
}

void sub_2393E8BFC(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_250AD6B40;
}

uint64_t sub_2393E8C14()
{
  return 0;
}

uint64_t sub_2393E8C1C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = *(_QWORD *)(a1 + 208);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 216);
    v4 = *(void **)(a1 + 208);
    if (v3 != v2)
    {
      v5 = *(_QWORD *)(a1 + 216);
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *(void **)(a1 + 208);
    }
    *(_QWORD *)(a1 + 216) = v2;
    operator delete(v4);
  }

  v8 = *(void **)(a1 + 144);
  if (v8)
  {
    *(_QWORD *)(a1 + 152) = v8;
    operator delete(v8);
  }
  v9 = *(std::__shared_weak_count **)(a1 + 136);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return a1;
}

BOOL sub_2393E8CF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float32x2_t *a6)
{
  unsigned int v6;
  int v7;
  BOOL v8;
  _BOOL8 v9;
  float *v13;
  float *v14;
  float v15;
  uint64_t v16;
  float *v17;
  float *v18;
  uint64_t v19;
  size_t v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float *v26;
  float *v27;
  float v28;
  unint64_t v29;
  unint64_t v30;
  float *v31;
  uint64_t v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float *v37;
  float *v38;
  uint64_t v39;
  float v40;
  float v41;
  float v42;
  float *v43;
  float v44;
  float *v45;
  float *v46;
  uint64_t v47;
  float v48;
  float v49;
  float *v50;
  float v51;
  float v52;
  float v53;
  float *v54;
  float v55;
  unint64_t v56;
  unint64_t v57;
  float *v58;
  uint64_t v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float *v64;
  float *v65;
  uint64_t v66;
  float v67;
  float v68;
  float v69;
  float *v70;
  float v71;
  float *v72;
  float *v73;
  uint64_t v74;
  float v75;
  float v76;
  float *v77;
  float v78;
  float *v79;
  uint64_t v80;
  float v81;
  float v82;
  float v83;
  float *v84;
  float v85;
  unint64_t v86;
  unint64_t v87;
  float *v88;
  uint64_t v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float *v94;
  float *v95;
  uint64_t v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float *v101;
  float *v102;
  uint64_t v103;
  float v104;
  float v105;
  float v106;
  float *v107;
  float v108;
  float v109;
  float *v110;
  float *v111;
  uint64_t v112;
  float v113;
  float v114;
  float *v115;
  float v116;
  float *v117;
  float v118;
  float *v119;
  float *v120;
  uint64_t v121;
  float v122;
  float v123;
  float *v124;
  float v125;
  float v126;
  char *v127;
  int v128;
  char *v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  unsigned int v139;
  unint64_t v140;
  float v141;
  unint64_t v142;
  uint64_t v143;
  float *v144;
  float *v145;
  float v146;
  float v147;
  float v148;
  float *v149;
  float *v150;
  float v151;
  float v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  float *v156;
  float *v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  int8x16_t v168;
  int8x16_t v169;
  int8x16_t v170;
  int32x4_t v171;
  float32x4_t v172;
  int32x4_t v173;
  float32x4_t v174;
  int32x4_t v175;
  int8x16_t v176;
  int8x16_t v177;
  int8x16_t v178;
  float32x2_t v179;
  float32x4_t v180;
  float32x4_t v181;
  float32x4_t v182;
  float32x4_t v183;
  float32x2_t v184;
  float v185;
  float32_t v186;
  float32x2_t v187;
  unsigned __int8 v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  float v194;
  float v195;
  float v196;
  float v197;
  float v198;
  float v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  uint64_t v205;
  float v206;
  float v207;
  float v208;
  float *v209;
  float v210;
  unsigned int v211;
  float v212;
  float v213;
  float v214;
  float v215;
  float v216;
  float v217;
  float v218;
  float v219;
  float v220;
  float v221;
  float v222;
  float v223;
  float32x2_t v224;
  float32x2_t v225;
  int v227;
  __int128 v228;
  float32x2_t v229;
  __int128 v230;
  float32x2_t v231;
  float v232;
  int v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  int v237;
  float v238;
  void *memptr[4];
  __int128 v240;
  __int128 v241;
  float v242[8];
  uint64_t v243;
  float v244;
  uint64_t v245;
  float v246;
  __int128 v247;
  __int128 v248;
  float v249;
  float **v250;
  int *v251;
  int v252;
  float v253;
  __int32 v254;
  float v255;
  int v256;
  float *v257[2];
  _BYTE v258[36];
  float v259;

  v6 = *(_DWORD *)(a2 + 16);
  v7 = *(_DWORD *)(a4 + 16);
  if (v6)
    v8 = v7 == 0;
  else
    v8 = 1;
  if (v8)
    return 0;
  v246 = 0.0;
  v245 = 0;
  v243 = 0;
  v13 = *(float **)a2;
  v14 = *(float **)a2;
  v15 = (float)v6;
  v16 = 3 * v6;
  v17 = *(float **)a4;
  v18 = *(float **)a4;
  v19 = (3 * v7);
  v20 = 4 * v16;
  if (v6 != 1)
  {
    v26 = &v13[v20 / 4];
    v27 = v14 + 3;
    v28 = *v14;
    v29 = v20 - 24;
    v30 = (v20 - 24) / 0xC + 1;
    if (v7 == 1)
    {
      if (v29 >= 0xC)
      {
        v31 = v13 + 6;
        v32 = v30 & 0x3FFFFFFFFFFFFFFELL;
        do
        {
          v33 = *(v31 - 3);
          v34 = *v31;
          v31 += 6;
          v28 = (float)(v28 + v33) + v34;
          v32 -= 2;
        }
        while (v32);
        if (v30 == (v30 & 0x3FFFFFFFFFFFFFFELL))
        {
LABEL_17:
          v21 = v28 / v15;
          *(float *)&v245 = v28 / v15;
          v22 = *v18 / v15;
          *(float *)&v243 = v22;
          v36 = v14[1];
          v37 = v14 + 4;
          if (v29 >= 0xC)
          {
            v38 = v13 + 7;
            v39 = v30 & 0x3FFFFFFFFFFFFFFELL;
            do
            {
              v40 = *(v38 - 3);
              v41 = *v38;
              v38 += 6;
              v36 = (float)(v36 + v40) + v41;
              v39 -= 2;
            }
            while (v39);
            if (v30 == (v30 & 0x3FFFFFFFFFFFFFFELL))
              goto LABEL_23;
            v37 += 3 * (v30 & 0x3FFFFFFFFFFFFFFELL);
          }
          do
          {
            v42 = *v37;
            v37 += 3;
            v36 = v36 + v42;
          }
          while (v37 != &v14[v16 + 1]);
LABEL_23:
          v24 = v36 / v15;
          *((float *)&v245 + 1) = v36 / v15;
          v25 = v18[1] / v15;
          *((float *)&v243 + 1) = v25;
          v44 = v14[2];
          v43 = v14 + 2;
          v23 = v44;
          v45 = v43 + 3;
          if (v29 >= 0xC)
          {
            v46 = v13 + 8;
            v47 = v30 & 0x3FFFFFFFFFFFFFFELL;
            do
            {
              v48 = *(v46 - 3);
              v49 = *v46;
              v46 += 6;
              v23 = (float)(v23 + v48) + v49;
              v47 -= 2;
            }
            while (v47);
            if (v30 == (v30 & 0x3FFFFFFFFFFFFFFELL))
              goto LABEL_30;
            v45 += 3 * (v30 & 0x3FFFFFFFFFFFFFFELL);
          }
          v50 = &v43[v16];
          do
          {
            v51 = *v45;
            v45 += 3;
            v23 = v23 + v51;
          }
          while (v45 != v50);
LABEL_30:
          v52 = v23 / v15;
          v246 = v23 / v15;
          v53 = v18[2];
          goto LABEL_89;
        }
        v27 += 3 * (v30 & 0x3FFFFFFFFFFFFFFELL);
      }
      do
      {
        v35 = *v27;
        v27 += 3;
        v28 = v28 + v35;
      }
      while (v27 != v26);
      goto LABEL_17;
    }
    if (v29 > 0xB)
    {
      v79 = v13 + 6;
      v80 = v30 & 0x3FFFFFFFFFFFFFFELL;
      do
      {
        v81 = *(v79 - 3);
        v82 = *v79;
        v79 += 6;
        v28 = (float)(v28 + v81) + v82;
        v80 -= 2;
      }
      while (v80);
      if (v30 == (v30 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_57:
        v21 = v28 / v15;
        *(float *)&v245 = v28 / v15;
        v84 = v18 + 3;
        v85 = *v18;
        v86 = 4 * v19 - 24;
        v87 = v86 / 0xC + 1;
        if (v86 >= 0xC)
        {
          v88 = v17 + 6;
          v89 = v87 & 0x3FFFFFFFFFFFFFFELL;
          do
          {
            v90 = *(v88 - 3);
            v91 = *v88;
            v88 += 6;
            v85 = (float)(v85 + v90) + v91;
            v89 -= 2;
          }
          while (v89);
          if (v87 == (v87 & 0x3FFFFFFFFFFFFFFELL))
          {
LABEL_63:
            v22 = v85 / v15;
            *(float *)&v243 = v85 / v15;
            v93 = v14[1];
            v94 = v14 + 4;
            if (v29 >= 0xC)
            {
              v95 = v13 + 7;
              v96 = v30 & 0x3FFFFFFFFFFFFFFELL;
              do
              {
                v97 = *(v95 - 3);
                v98 = *v95;
                v95 += 6;
                v93 = (float)(v93 + v97) + v98;
                v96 -= 2;
              }
              while (v96);
              if (v30 == (v30 & 0x3FFFFFFFFFFFFFFELL))
              {
LABEL_69:
                v24 = v93 / v15;
                *((float *)&v245 + 1) = v93 / v15;
                v100 = v18[1];
                v101 = v18 + 4;
                if (v86 >= 0xC)
                {
                  v102 = v17 + 7;
                  v103 = v87 & 0x3FFFFFFFFFFFFFFELL;
                  do
                  {
                    v104 = *(v102 - 3);
                    v105 = *v102;
                    v102 += 6;
                    v100 = (float)(v100 + v104) + v105;
                    v103 -= 2;
                  }
                  while (v103);
                  if (v87 == (v87 & 0x3FFFFFFFFFFFFFFELL))
                  {
LABEL_75:
                    v25 = v100 / v15;
                    *((float *)&v243 + 1) = v100 / v15;
                    v108 = v14[2];
                    v107 = v14 + 2;
                    v109 = v108;
                    v110 = v107 + 3;
                    if (v29 >= 0xC)
                    {
                      v111 = v13 + 8;
                      v112 = v30 & 0x3FFFFFFFFFFFFFFELL;
                      do
                      {
                        v113 = *(v111 - 3);
                        v114 = *v111;
                        v111 += 6;
                        v109 = (float)(v109 + v113) + v114;
                        v112 -= 2;
                      }
                      while (v112);
                      if (v30 == (v30 & 0x3FFFFFFFFFFFFFFELL))
                        goto LABEL_82;
                      v110 += 3 * (v30 & 0x3FFFFFFFFFFFFFFELL);
                    }
                    v115 = &v107[v16];
                    do
                    {
                      v116 = *v110;
                      v110 += 3;
                      v109 = v109 + v116;
                    }
                    while (v110 != v115);
LABEL_82:
                    v52 = v109 / v15;
                    v246 = v109 / v15;
                    v118 = v18[2];
                    v117 = v18 + 2;
                    v53 = v118;
                    v119 = v117 + 3;
                    if (v86 >= 0xC)
                    {
                      v120 = v17 + 8;
                      v121 = v87 & 0x3FFFFFFFFFFFFFFELL;
                      do
                      {
                        v122 = *(v120 - 3);
                        v123 = *v120;
                        v120 += 6;
                        v53 = (float)(v53 + v122) + v123;
                        v121 -= 2;
                      }
                      while (v121);
                      if (v87 == (v87 & 0x3FFFFFFFFFFFFFFELL))
                        goto LABEL_89;
                      v119 += 3 * (v87 & 0x3FFFFFFFFFFFFFFELL);
                    }
                    v124 = &v117[v19];
                    do
                    {
                      v125 = *v119;
                      v119 += 3;
                      v53 = v53 + v125;
                    }
                    while (v119 != v124);
                    goto LABEL_89;
                  }
                  v101 += 3 * (v87 & 0x3FFFFFFFFFFFFFFELL);
                }
                do
                {
                  v106 = *v101;
                  v101 += 3;
                  v100 = v100 + v106;
                }
                while (v101 != &v18[v19 + 1]);
                goto LABEL_75;
              }
              v94 += 3 * (v30 & 0x3FFFFFFFFFFFFFFELL);
            }
            do
            {
              v99 = *v94;
              v94 += 3;
              v93 = v93 + v99;
            }
            while (v94 != &v14[v16 + 1]);
            goto LABEL_69;
          }
          v84 += 3 * (v87 & 0x3FFFFFFFFFFFFFFELL);
        }
        do
        {
          v92 = *v84;
          v84 += 3;
          v85 = v85 + v92;
        }
        while (v84 != &v17[v19]);
        goto LABEL_63;
      }
      v27 += 3 * (v30 & 0x3FFFFFFFFFFFFFFELL);
    }
    do
    {
      v83 = *v27;
      v27 += 3;
      v28 = v28 + v83;
    }
    while (v27 != v26);
    goto LABEL_57;
  }
  v21 = *v14 / v15;
  *(float *)&v245 = v21;
  if (v7 == 1)
  {
    v22 = *v18 / v15;
    v23 = v14[2];
    v24 = v14[1] / v15;
    *((float *)&v245 + 1) = v24;
    v25 = v18[1] / v15;
    *(float *)&v243 = v22;
    *((float *)&v243 + 1) = v25;
    goto LABEL_30;
  }
  v54 = v18 + 3;
  v55 = *v18;
  v56 = 4 * v19 - 24;
  v57 = v56 / 0xC + 1;
  if (v56 <= 0xB)
    goto LABEL_36;
  v58 = v17 + 6;
  v59 = v57 & 0x3FFFFFFFFFFFFFFELL;
  do
  {
    v60 = *(v58 - 3);
    v61 = *v58;
    v58 += 6;
    v55 = (float)(v55 + v60) + v61;
    v59 -= 2;
  }
  while (v59);
  if (v57 != (v57 & 0x3FFFFFFFFFFFFFFELL))
  {
    v54 += 3 * (v57 & 0x3FFFFFFFFFFFFFFELL);
    do
    {
LABEL_36:
      v62 = *v54;
      v54 += 3;
      v55 = v55 + v62;
    }
    while (v54 != &v17[v19]);
  }
  v22 = v55 / v15;
  *(float *)&v243 = v55 / v15;
  v24 = v14[1] / v15;
  *((float *)&v245 + 1) = v24;
  v63 = v18[1];
  v64 = v18 + 4;
  if (v56 >= 0xC)
  {
    v65 = v17 + 7;
    v66 = v57 & 0x3FFFFFFFFFFFFFFELL;
    do
    {
      v67 = *(v65 - 3);
      v68 = *v65;
      v65 += 6;
      v63 = (float)(v63 + v67) + v68;
      v66 -= 2;
    }
    while (v66);
    if (v57 == (v57 & 0x3FFFFFFFFFFFFFFELL))
      goto LABEL_43;
    v64 += 3 * (v57 & 0x3FFFFFFFFFFFFFFELL);
  }
  do
  {
    v69 = *v64;
    v64 += 3;
    v63 = v63 + v69;
  }
  while (v64 != &v18[v19 + 1]);
LABEL_43:
  v25 = v63 / v15;
  *((float *)&v243 + 1) = v63 / v15;
  v52 = v14[2] / v15;
  v246 = v52;
  v71 = v18[2];
  v70 = v18 + 2;
  v53 = v71;
  v72 = v70 + 3;
  if (v56 >= 0xC)
  {
    v73 = v17 + 8;
    v74 = v57 & 0x3FFFFFFFFFFFFFFELL;
    do
    {
      v75 = *(v73 - 3);
      v76 = *v73;
      v73 += 6;
      v53 = (float)(v53 + v75) + v76;
      v74 -= 2;
    }
    while (v74);
    if (v57 == (v57 & 0x3FFFFFFFFFFFFFFELL))
      goto LABEL_89;
    v72 += 3 * (v57 & 0x3FFFFFFFFFFFFFFELL);
  }
  v77 = &v70[v19];
  do
  {
    v78 = *v72;
    v72 += 3;
    v53 = v53 + v78;
  }
  while (v72 != v77);
LABEL_89:
  v126 = v53 / v15;
  v244 = v53 / v15;
  memptr[0] = 0;
  malloc_type_posix_memalign(memptr, 0x20uLL, (v20 + 31) & 0x7FFFFFFE0, 0x49090899uLL);
  v127 = (char *)memptr[0];
  memcpy(memptr[0], *(const void **)a2, v20);
  v128 = *(_DWORD *)(a4 + 16);
  memptr[0] = 0;
  malloc_type_posix_memalign(memptr, 0x20uLL, (4 * (3 * v128) + 31) & 0x7FFFFFFE0, 0x49090899uLL);
  v129 = (char *)memptr[0];
  if (v128)
    memcpy(memptr[0], *(const void **)a4, 4 * (3 * v128));
  v130 = 0.0;
  v131 = 0.0;
  v132 = 0.0;
  v133 = 0.0;
  v134 = 0.0;
  v135 = 0.0;
  v136 = 0.0;
  v137 = 0.0;
  v138 = 0.0;
  if (*(_DWORD *)(a2 + 16))
  {
    v139 = 0;
    v140 = 0;
    do
    {
      v143 = 4 * v139;
      v144 = (float *)(*(_QWORD *)a2 + v143);
      v145 = (float *)&v127[v143];
      v146 = *v144 - v21;
      if (*(char **)a2 == v127)
      {
        v148 = v144[1] - v24;
        v147 = v144[2] - v52;
        *v145 = v146;
        v145[1] = v148;
      }
      else
      {
        *v145 = v146;
        v145[1] = v144[1] - v24;
        v147 = v144[2] - v52;
      }
      v145[2] = v147;
      v149 = (float *)(*(_QWORD *)a4 + v143);
      v150 = (float *)&v129[v143];
      v151 = *v149 - v22;
      if (*(char **)a4 == v129)
      {
        v141 = v149[2];
        v152 = v149[1] - v25;
        *v150 = v151;
        v150[1] = v152;
      }
      else
      {
        *v150 = v151;
        v150[1] = v149[1] - v25;
        v141 = v149[2];
      }
      v150[2] = v141 - v126;
      ++v140;
      v142 = *(unsigned int *)(a2 + 16);
      v139 += 3;
    }
    while (v140 < v142);
    v130 = 0.0;
    v131 = 0.0;
    v132 = 0.0;
    v133 = 0.0;
    v134 = 0.0;
    v135 = 0.0;
    v136 = 0.0;
    v137 = 0.0;
    v138 = 0.0;
    if ((_DWORD)v142)
    {
      v153 = 0;
      v154 = 3 * v142;
      do
      {
        v155 = 4 * v153;
        v156 = (float *)&v129[v155];
        v157 = (float *)&v127[v155];
        v158 = v156[1];
        v159 = v157[1];
        v138 = v138 + (float)(*v156 * *v157);
        v160 = v156[2];
        v132 = v132 + (float)(*v156 * v159);
        v130 = v130 + (float)(v158 * *v157);
        v133 = v133 + (float)(v158 * v159);
        v161 = v157[2];
        v135 = v135 + (float)(*v156 * v161);
        v131 = v131 + (float)(v160 * *v157);
        v134 = v134 + (float)(v160 * v159);
        v136 = v136 + (float)(v158 * v161);
        v137 = v137 + (float)(v160 * v161);
        v153 += 3;
      }
      while (v154 != v153);
    }
  }
  memset(v242, 0, 29);
  v240 = 0u;
  v241 = 0u;
  memset(memptr, 0, sizeof(memptr));
  *(_QWORD *)&v242[5] = 0x300000003;
  *(float *)v258 = v138;
  *(float *)&v258[4] = v130;
  *(float *)&v258[8] = v131;
  *(float *)&v258[12] = v132;
  *(float *)&v258[16] = v133;
  *(float *)&v258[20] = v134;
  *(float *)&v258[24] = v135;
  *(float *)&v258[28] = v136;
  *(float *)&v258[32] = v137;
  sub_2393BA9D8((uint64_t)memptr);
  v234 = 0;
  v235 = 0x3F80000000000000;
  v237 = 0;
  v236 = 0;
  v233 = 1065353216;
  v162 = (float)((float)((float)(*((float *)&v240 + 1) * *((float *)memptr + 1)) + 0.0)
               + (float)(*((float *)&v240 + 2) * *(float *)&memptr[2]))
       + (float)(*((float *)&v240 + 3) * *((float *)&memptr[3] + 1));
  v163 = (float)((float)((float)(*(float *)&v241 * *((float *)memptr + 1)) + 0.0)
               + (float)(*((float *)&v241 + 1) * *(float *)&memptr[2]))
       + (float)(*((float *)&v241 + 2) * *((float *)&memptr[3] + 1));
  v164 = (float)((float)((float)(*((float *)&v241 + 3) * *((float *)memptr + 1)) + 0.0)
               + (float)(v242[0] * *(float *)&memptr[2]))
       + (float)(v242[1] * *((float *)&memptr[3] + 1));
  v165 = (float)((float)((float)(*((float *)&v240 + 1) * *(float *)&memptr[1]) + 0.0)
               + (float)(*((float *)&v240 + 2) * *((float *)&memptr[2] + 1)))
       + (float)(*((float *)&v240 + 3) * *(float *)&v240);
  v166 = (float)((float)((float)(*(float *)&v241 * *(float *)&memptr[1]) + 0.0)
               + (float)(*((float *)&v241 + 1) * *((float *)&memptr[2] + 1)))
       + (float)(*((float *)&v241 + 2) * *(float *)&v240);
  v167 = (float)((float)((float)(*((float *)&v241 + 3) * *(float *)&memptr[1]) + 0.0)
               + (float)(v242[0] * *((float *)&memptr[2] + 1)))
       + (float)(v242[1] * *(float *)&v240);
  v238 = (float)((float)((float)((float)((float)(*((float *)&v241 + 3) * *(float *)memptr) + 0.0)
                               + (float)(v242[0] * *((float *)&memptr[1] + 1)))
                       + (float)(v242[1] * *(float *)&memptr[3]))
               * (float)((float)(v166 * v162) - (float)(v163 * v165)))
       + (float)((float)((float)((float)((float)((float)(*((float *)&v240 + 1) * *(float *)memptr) + 0.0)
                                       + (float)(*((float *)&v240 + 2) * *((float *)&memptr[1] + 1)))
                               + (float)(*((float *)&v240 + 3) * *(float *)&memptr[3]))
                       * (float)((float)(v167 * v163) - (float)(v164 * v166)))
               - (float)((float)((float)((float)((float)(*(float *)&v241 * *(float *)memptr) + 0.0)
                                       + (float)(*((float *)&v241 + 1) * *((float *)&memptr[1] + 1)))
                               + (float)(*((float *)&v241 + 2) * *(float *)&memptr[3]))
                       * (float)((float)(v167 * v162) - (float)(v164 * v165))));
  *(_QWORD *)&v247 = (char *)&v240 + 4;
  v250 = (float **)&v247;
  v251 = &v233;
  memset(v258, 0, sizeof(v258));
  *(double *)v168.i64 = sub_2393DD788((uint64_t)v258, (uint64_t)&v250);
  v168.i32[0] = *(_DWORD *)&v258[8];
  v169.i32[0] = *(_DWORD *)&v258[20];
  v170.i32[0] = *(_DWORD *)&v258[32];
  v171.i64[0] = (uint64_t)memptr[0];
  v172 = (float32x4_t)vzip1q_s32(v171, vdupq_lane_s32((int32x2_t)memptr[0], 1));
  v173.i64[0] = *(uint64_t *)((char *)&memptr[1] + 4);
  v174 = (float32x4_t)vzip1q_s32(v173, vdupq_lane_s32(*(int32x2_t *)((char *)&memptr[1] + 4), 1));
  v175.i64[0] = (uint64_t)memptr[3];
  v176.i64[0] = *(_QWORD *)v258;
  v177.i64[0] = *(_QWORD *)&v258[12];
  v178.i64[0] = *(_QWORD *)&v258[24];
  v179 = vmla_n_f32(vmla_n_f32(vmla_n_f32(0, *(float32x2_t *)v258, *(float *)memptr), *(float32x2_t *)&v258[12], *((float *)&memptr[1] + 1)), *(float32x2_t *)&v258[24], *(float *)&memptr[3]);
  v229 = v179;
  v180 = (float32x4_t)vextq_s8(vextq_s8(v168, v168, 4uLL), v176, 0xCuLL);
  v180.i32[3] = v180.i32[0];
  v181 = vmlaq_f32((float32x4_t)0, v172, v180);
  v182 = (float32x4_t)vextq_s8(vextq_s8(v169, v169, 4uLL), v177, 0xCuLL);
  v182.i32[3] = v182.i32[0];
  v183 = (float32x4_t)vextq_s8(vextq_s8(v170, v170, 4uLL), v178, 0xCuLL);
  v183.i32[3] = v183.i32[0];
  v228 = (__int128)vmlaq_f32(vmlaq_f32(v181, v174, v182), (float32x4_t)vzip1q_s32(v175, vdupq_lane_s32((int32x2_t)memptr[3], 1)), v183);
  v230 = v228;
  v184 = vmla_n_f32(vmla_n_f32(vmla_n_f32(0, *(float32x2_t *)v258, *(float *)&memptr[1]), *(float32x2_t *)&v258[12], *((float *)&memptr[2] + 1)), *(float32x2_t *)&v258[24], *(float *)&v240);
  v231 = v184;
  v185 = (float)((float)((float)(*(float *)&v258[8] * *(float *)&memptr[1]) + 0.0)
               + (float)(*(float *)&v258[20] * *((float *)&memptr[2] + 1)))
       + (float)(*(float *)&v258[32] * *(float *)&v240);
  v232 = v185;
  v250 = (float **)&v229;
  v251 = (int *)&v243;
  *(_QWORD *)v258 = &v245;
  *(_QWORD *)&v258[8] = 0;
  *(_DWORD *)&v258[16] = 0;
  sub_23939D4F4((float *)&v258[8], (float **)&v250);
  v186 = *(float *)(*(_QWORD *)v258 + 8) - *(float *)&v258[16];
  v187 = vsub_f32(**(float32x2_t **)v258, *(float32x2_t *)&v258[8]);
  *a6 = v179;
  a6[1] = (float32x2_t)v228;
  a6[2] = (float32x2_t)(v228 >> 32);
  a6[3].i32[0] = HIDWORD(v228);
  a6[3].i32[1] = 0;
  a6[4] = v184;
  a6[5].f32[0] = v185;
  a6[5].i32[1] = 0;
  a6[6] = v187;
  a6[7].f32[0] = v186;
  a6[7].i32[1] = 1065353216;
  *(_QWORD *)&v247 = a6;
  *((_QWORD *)&v247 + 1) = 4;
  v188 = atomic_load((unsigned __int8 *)&qword_256930490);
  if ((v188 & 1) == 0 && __cxa_guard_acquire(&qword_256930490))
  {
    dword_256930488 = 968164595;
    __cxa_guard_release(&qword_256930490);
  }
  v189 = *(float *)&dword_256930488;
  v257[0] = (float *)&v247;
  v250 = v257;
  v251 = (int *)&v247;
  memset(&v258[4], 0, 32);
  v259 = 0.0;
  sub_2393DD930((uint64_t)&v258[4], (uint64_t)&v250);
  v190 = fabsf(*(float *)&v258[4] + -1.0);
  v191 = fabsf(*(float *)&v258[8]);
  if (v190 < v191)
    v190 = v191;
  v192 = fabsf(*(float *)&v258[12]);
  if (v190 < v192)
    v190 = v192;
  v193 = fabsf(*(float *)&v258[16]);
  if (v190 < v193)
    v190 = v193;
  v194 = fabsf(*(float *)&v258[20] + -1.0);
  if (v190 < v194)
    v190 = v194;
  v195 = fabsf(*(float *)&v258[24]);
  if (v190 < v195)
    v190 = v195;
  v196 = fabsf(*(float *)&v258[28]);
  if (v190 < v196)
    v190 = v196;
  v197 = fabsf(*(float *)&v258[32]);
  if (v190 < v197)
    v190 = v197;
  v198 = fabsf(v259 + -1.0);
  if (v190 >= v198)
    v199 = v190;
  else
    v199 = v198;
  v200 = 2.0;
  v201 = 0.0;
  if (v199 > v189)
    goto LABEL_131;
  v203 = *(float *)v247;
  v202 = *(float *)(v247 + 4);
  v204 = *(float *)(v247 + 8);
  v205 = 4 * (DWORD2(v247) - 3);
  v206 = *(float *)(v247 + v205 + 12);
  v207 = *(float *)(v247 + v205 + 16);
  v208 = *(float *)(v247 + v205 + 20);
  v209 = (float *)(v247 + v205 + 12 + v205);
  if (fabsf((float)((float)(v204 * (float)((float)(v209[4] * v206) - (float)(v207 * v209[3])))+ (float)((float)(*(float *)v247 * (float)((float)(v209[5] * v207) - (float)(v208 * v209[4])))- (float)(v202 * (float)((float)(v209[5] * v206) - (float)(v208 * v209[3])))))+ -1.0) > v189)
  {
LABEL_131:
    v224 = 0;
  }
  else
  {
    v210 = *(float *)(v247 + 4 * (DWORD2(v247) + 1));
    v211 = 2 * DWORD2(v247);
    v212 = *(float *)(v247 + 4 * (2 * DWORD2(v247) + 2));
    v213 = (float)((float)(v203 + 1.0) + v210) + v212;
    v214 = (float)((float)(v203 + 1.0) - v210) - v212;
    v215 = 1.0 - v203;
    v216 = (float)((float)(1.0 - v203) + v210) - v212;
    v217 = (float)(v215 - v210) + v212;
    if (v214 <= v213)
      v218 = v213;
    else
      v218 = v214;
    if (v216 <= v218)
      v219 = v218;
    else
      v219 = v216;
    if (v217 <= v219)
    {
      v227 = v214 > v213;
      if (v216 > v218)
        v227 = 2;
      v221 = sqrtf(v219);
      v222 = -v221;
      if (v227 == 2)
      {
        v221 = (float)(*(float *)(v247 + 4 * v211) - v204) / v222;
        v220 = (float)(*(float *)(v247 + 4 * (v211 | 1)) + *(float *)(v247 + 4 * (DWORD2(v247) + 2)))
             / v222;
        v223 = v222;
        v222 = (float)(*(float *)(v247 + 4 * DWORD2(v247)) + v202) / v222;
      }
      else if (v227 == 1)
      {
        v221 = (float)(*(float *)(v247 + 4 * (DWORD2(v247) + 2)) - *(float *)(v247 + 4 * (v211 | 1)))
             / v222;
        v223 = (float)(*(float *)(v247 + 4 * DWORD2(v247)) + v202) / v222;
        v220 = (float)(v204 + *(float *)(v247 + 4 * v211)) / v222;
      }
      else
      {
        v223 = (float)(v204 - *(float *)(v247 + 4 * v211)) / v222;
        v220 = (float)(*(float *)(v247 + 4 * DWORD2(v247)) - v202) / v222;
        v222 = (float)(*(float *)(v247 + 4 * (v211 | 1)) - *(float *)(v247 + 4 * (DWORD2(v247) + 2)))
             / v222;
      }
    }
    else
    {
      v220 = -sqrtf(v217);
      v221 = (float)(v202 - *(float *)(v247 + 4 * DWORD2(v247))) / v220;
      v222 = (float)(v204 + *(float *)(v247 + 4 * v211)) / v220;
      v223 = (float)(*(float *)(v247 + 4 * (v211 | 1)) + *(float *)(v247 + 4 * (DWORD2(v247) + 2)))
           / v220;
    }
    v224 = 0;
    if ((a6[6].i32[0] & 0x7FFFFFFFu) <= 0x7F7FFFFF
      && (a6[6].i32[1] & 0x7FFFFFFFu) <= 0x7F7FFFFF
      && (a6[7].i32[0] & 0x7FFFFFFFu) <= 0x7F7FFFFF)
    {
      v201 = v222 * 0.5;
      v224.f32[0] = v223 * 0.5;
      v224.f32[1] = v220 * 0.5;
      v200 = (float)((float)(v221 * 0.5) + (float)(v221 * 0.5)) + 0.0;
    }
  }
  LODWORD(v250) = 0;
  HIDWORD(v250) = v224.i32[1];
  v252 = 0;
  v254 = v224.i32[0];
  v255 = -v201;
  v251 = (int *)vneg_f32(v224);
  v253 = v201;
  v256 = 0;
  *((float32x2_t *)&v247 + 1) = vmul_f32(v224, (float32x2_t)0xC0000000C0000000);
  v225 = (float32x2_t)vdup_lane_s32((int32x2_t)v224, 0);
  v225.f32[0] = v201;
  *(float32x2_t *)((char *)&v248 + 4) = vadd_f32(v225, v225);
  *(float *)&v247 = v200;
  *((float *)&v247 + 1) = v224.f32[1] + v224.f32[1];
  *((float *)&v248 + 3) = v201 * -2.0;
  v249 = v200;
  *(float *)&v248 = v200;
  v257[0] = (float *)&v247;
  v257[1] = (float *)&v250;
  memset(v258, 0, sizeof(v258));
  sub_2393BAAF8((uint64_t)v258, v257);
  v247 = *(_OWORD *)v258;
  v248 = *(_OWORD *)&v258[16];
  *(float *)&v247 = *(float *)v258 + 1.0;
  *(float *)&v248 = *(float *)&v258[16] + 1.0;
  v249 = *(float *)&v258[32] + 1.0;
  v257[0] = (float *)&v247;
  v250 = v257;
  v251 = (int *)&v247;
  memset(&v258[4], 0, 32);
  v259 = 0.0;
  sub_2393DD788((uint64_t)&v258[4], (uint64_t)&v250);
  v9 = fabsf((float)((float)(*(float *)&v258[4] + -1.0) + (float)(*(float *)&v258[20] + -1.0)) + (float)(v259 + -1.0)) < 0.1;
  free(v129);
  free(v127);
  return v9;
}

void sub_2393E9BF8()
{
  JUMPOUT(0x23B83C4BCLL);
}

uint64_t sub_2393E9C0C(uint64_t a1, const char *a2)
{
  void *v3;
  id v4;
  const char *v5;
  uint64_t v6;
  id v7;
  uint64_t *v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  _BYTE *v13;
  int v14;
  _BYTE *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  _BYTE *v20;
  id v21;
  _BYTE buf[12];
  __int16 v23;
  int v24;
  char v25;
  _BYTE __p[12];
  __int16 v27;
  int v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v3 = (void *)objc_msgSend_newFunctionWithName_(*(void **)(*(_QWORD *)a1 + 16), a2, (uint64_t)CFSTR("oc::voxel_hashing::resetHashEntries"));
  if (!v3)
  {
    if (qword_2569304C0 != -1)
      dispatch_once(&qword_2569304C0, &unk_250AD6C28);
    v11 = (id)qword_2569304B8;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::VoxelHashingDataGPU::createPipelineStates()");
      v13 = (v30 & 0x80000000) == 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v13;
      v23 = 1026;
      v24 = 520;
      _os_log_error_impl(&dword_239388000, v11, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to find resetHashEntries compute shader.", buf, 0x12u);
      if (SBYTE3(v30) < 0)
        operator delete(*(void **)__p);
    }
    v7 = 0;
    goto LABEL_11;
  }
  v4 = **(id **)a1;
  v21 = 0;
  v6 = objc_msgSend_newComputePipelineStateWithFunction_error_(v4, v5, (uint64_t)v3, &v21);
  v7 = v21;
  v9 = *(void **)(a1 + 24);
  v8 = (uint64_t *)(a1 + 24);
  *v8 = v6;

  if (!*v8)
  {
    if (qword_2569304C0 != -1)
      dispatch_once(&qword_2569304C0, &unk_250AD6C28);
    v11 = (id)qword_2569304B8;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      sub_2393C4DD0(buf, "BOOL oc::voxel_hashing::VoxelHashingDataGPU::createPipelineStates()");
      v14 = v25;
      v15 = *(_BYTE **)buf;
      objc_msgSend_localizedDescription(v7, v16, v17);
      v18 = objc_claimAutoreleasedReturnValue();
      v19 = (void *)v18;
      if (v14 >= 0)
        v20 = buf;
      else
        v20 = v15;
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = v20;
      v27 = 1026;
      v28 = 527;
      v29 = 2114;
      v30 = v18;
      _os_log_error_impl(&dword_239388000, v11, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create pipeline state for resetHashEntries compute shader. Error details: %{public}@", __p, 0x1Cu);

      if (v25 < 0)
        operator delete(*(void **)buf);
    }
LABEL_11:

    v10 = 0;
    goto LABEL_12;
  }
  v10 = 1;
LABEL_12:

  return v10;
}

void sub_2393E9E9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  int v5;

  if (v5 < 0)
    operator delete(v4);

  _Unwind_Resume(a1);
}

uint64_t sub_2393E9ED4(uint64_t a1)
{
  host_t v2;
  id v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  void *v8;
  id v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  void *v14;
  id v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  void *v29;
  id v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  id v38;
  const char *v39;
  uint64_t v40;
  void *v41;
  const char *v42;
  void *v43;
  id v44;
  const char *v45;
  uint64_t v46;
  void *v47;
  const char *v48;
  void *v49;
  const char *v50;
  uint64_t v51;
  id v52;
  const char *v53;
  uint64_t v54;
  void *v55;
  const char *v56;
  void *v57;
  id v58;
  const char *v59;
  uint64_t v60;
  void *v61;
  const char *v62;
  void *v63;
  const char *v64;
  uint64_t v65;
  id v66;
  const char *v67;
  uint64_t v68;
  void *v69;
  const char *v70;
  void *v71;
  uint64_t v72;
  NSObject *v73;
  void **v74;
  void **v75;
  void **v76;
  void **v77;
  id v78;
  const char *v79;
  uint64_t v80;
  void *v81;
  const char *v82;
  void *v83;
  _QWORD *v84;
  uint64_t v85;
  void **v87;
  void **v88;
  uint64_t v89;
  void **v90;
  void **v91;
  void **v92;
  void **v93;
  void **v94;
  void **v95;
  vm_size_t v96;
  _QWORD v97[3];
  _QWORD *v98;
  void *__p[2];
  char v100;
  void **v101;
  uint8_t buf[4];
  void **v103;
  __int16 v104;
  int v105;
  uint64_t v106;

  v106 = *MEMORY[0x24BDAC8D0];
  v96 = 0;
  v2 = MEMORY[0x23B83C6E4]();
  host_page_size(v2, &v96);
  *(_QWORD *)(a1 + 40) = (v96 + 24 * *(unsigned int *)(a1 + 396) + 1) / v96 * v96;
  v3 = **(id **)a1;
  v5 = objc_msgSend_newBufferWithLength_options_(v3, v4, *(_QWORD *)(a1 + 40), 0);
  v6 = *(void **)(a1 + 464);
  *(_QWORD *)(a1 + 464) = v5;

  v8 = *(void **)(a1 + 464);
  if (!v8)
  {
    if (qword_2569304C0 != -1)
      dispatch_once(&qword_2569304C0, &unk_250AD6C28);
    v73 = (id)qword_2569304B8;
    if (!os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
      goto LABEL_73;
    sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::VoxelHashingDataGPU::createBuffers(const InitConfig &)");
    v74 = v100 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v103 = v74;
    v104 = 1026;
    v105 = 548;
    _os_log_error_impl(&dword_239388000, v73, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create hashEntries buffer.", buf, 0x12u);
    if ((v100 & 0x80000000) == 0)
      goto LABEL_73;
LABEL_66:
    operator delete(__p[0]);
LABEL_73:

    return 0;
  }
  objc_msgSend_setLabel_(v8, v7, (uint64_t)CFSTR("HashEntries Buffer"));
  *(_QWORD *)(a1 + 48) = (v96 + 17368 * *(unsigned int *)(a1 + 400) + 1) / v96 * v96;
  v9 = **(id **)a1;
  v11 = objc_msgSend_newBufferWithLength_options_(v9, v10, *(_QWORD *)(a1 + 48), 0);
  v12 = *(void **)(a1 + 472);
  *(_QWORD *)(a1 + 472) = v11;

  v14 = *(void **)(a1 + 472);
  if (!v14)
  {
    if (qword_2569304C0 != -1)
      dispatch_once(&qword_2569304C0, &unk_250AD6C28);
    v73 = (id)qword_2569304B8;
    if (!os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
      goto LABEL_73;
    sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::VoxelHashingDataGPU::createBuffers(const InitConfig &)");
    v75 = v100 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v103 = v75;
    v104 = 1026;
    v105 = 560;
    _os_log_error_impl(&dword_239388000, v73, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create voxelBlocks buffer.", buf, 0x12u);
    if ((v100 & 0x80000000) == 0)
      goto LABEL_73;
    goto LABEL_66;
  }
  objc_msgSend_setLabel_(v14, v13, (uint64_t)CFSTR("VoxelBlocks Buffer"));
  v15 = **(id **)a1;
  v17 = objc_msgSend_newBufferWithLength_options_(v15, v16, 4, 0);
  v18 = *(void **)(a1 + 480);
  *(_QWORD *)(a1 + 480) = v17;

  v20 = *(void **)(a1 + 480);
  if (!v20)
  {
    if (qword_2569304C0 != -1)
      dispatch_once(&qword_2569304C0, &unk_250AD6C28);
    v73 = (id)qword_2569304B8;
    if (!os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
      goto LABEL_73;
    sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::VoxelHashingDataGPU::createBuffers(const InitConfig &)");
    v76 = v100 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v103 = v76;
    v104 = 1026;
    v105 = 569;
    _os_log_error_impl(&dword_239388000, v73, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create nextAvailableVoxelBlockIdx buffer.", buf, 0x12u);
    if ((v100 & 0x80000000) == 0)
      goto LABEL_73;
    goto LABEL_66;
  }
  objc_msgSend_setLabel_(v20, v19, (uint64_t)CFSTR("NextAvailableVoxelBlockIdx Buffer"));
  *(_DWORD *)objc_msgSend_contents(*(void **)(a1 + 480), v21, v22) = 0;
  v23 = 4 * *(unsigned int *)(a1 + 404);
  v24 = **(id **)a1;
  v26 = objc_msgSend_newBufferWithLength_options_(v24, v25, v23, 0);
  v27 = *(void **)(a1 + 488);
  *(_QWORD *)(a1 + 488) = v26;

  v29 = *(void **)(a1 + 488);
  if (!v29)
  {
    if (qword_2569304C0 != -1)
      dispatch_once(&qword_2569304C0, &unk_250AD6C28);
    v73 = (id)qword_2569304B8;
    if (!os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
      goto LABEL_73;
    sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::VoxelHashingDataGPU::createBuffers(const InitConfig &)");
    v77 = v100 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v103 = v77;
    v104 = 1026;
    v105 = 582;
    _os_log_error_impl(&dword_239388000, v73, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create voxelBlocksFreeStack buffer.", buf, 0x12u);
    if ((v100 & 0x80000000) == 0)
      goto LABEL_73;
    goto LABEL_66;
  }
  objc_msgSend_setLabel_(v29, v28, (uint64_t)CFSTR("VoxelBlocksFreeStack Buffer"));
  v30 = **(id **)a1;
  v32 = objc_msgSend_newBufferWithLength_options_(v30, v31, 4, 0);
  v33 = *(void **)(a1 + 496);
  *(_QWORD *)(a1 + 496) = v32;

  v35 = *(void **)(a1 + 496);
  if (!v35)
  {
    if (qword_2569304C0 != -1)
      dispatch_once(&qword_2569304C0, &unk_250AD6C28);
    v73 = (id)qword_2569304B8;
    if (!os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
      goto LABEL_73;
    sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::VoxelHashingDataGPU::createBuffers(const InitConfig &)");
    v87 = v100 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v103 = v87;
    v104 = 1026;
    v105 = 591;
    _os_log_error_impl(&dword_239388000, v73, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create voxelBlocksFreeStackTop buffer.", buf, 0x12u);
    if ((v100 & 0x80000000) == 0)
      goto LABEL_73;
    goto LABEL_66;
  }
  objc_msgSend_setLabel_(v35, v34, (uint64_t)CFSTR("VoxelBlocksFreeStackTop Buffer"));
  *(_DWORD *)objc_msgSend_contents(*(void **)(a1 + 496), v36, v37) = -1;
  v38 = **(id **)a1;
  v40 = objc_msgSend_newBufferWithLength_options_(v38, v39, 12 * *(unsigned int *)(a1 + 392), 0);
  v41 = *(void **)(a1 + 504);
  *(_QWORD *)(a1 + 504) = v40;

  v43 = *(void **)(a1 + 504);
  if (!v43)
  {
    if (qword_2569304C0 != -1)
      dispatch_once(&qword_2569304C0, &unk_250AD6C28);
    v73 = (id)qword_2569304B8;
    if (!os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
      goto LABEL_73;
    sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::VoxelHashingDataGPU::createBuffers(const InitConfig &)");
    v90 = v100 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v103 = v90;
    v104 = 1026;
    v105 = 605;
    _os_log_error_impl(&dword_239388000, v73, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create updatedAndErasableHashEntries buffer.", buf, 0x12u);
    if ((v100 & 0x80000000) == 0)
      goto LABEL_73;
    goto LABEL_66;
  }
  objc_msgSend_setLabel_(v43, v42, (uint64_t)CFSTR("UpdatedAndErasableHashEntries Buffer"));
  v44 = **(id **)a1;
  v46 = objc_msgSend_newBufferWithLength_options_(v44, v45, 4, 0);
  v47 = *(void **)(a1 + 512);
  *(_QWORD *)(a1 + 512) = v46;

  v49 = *(void **)(a1 + 512);
  if (!v49)
  {
    if (qword_2569304C0 != -1)
      dispatch_once(&qword_2569304C0, &unk_250AD6C28);
    v73 = (id)qword_2569304B8;
    if (!os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
      goto LABEL_73;
    sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::VoxelHashingDataGPU::createBuffers(const InitConfig &)");
    v91 = v100 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v103 = v91;
    v104 = 1026;
    v105 = 614;
    _os_log_error_impl(&dword_239388000, v73, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create numUpdatedAndErasableHashEntries buffer.", buf, 0x12u);
    if ((v100 & 0x80000000) == 0)
      goto LABEL_73;
    goto LABEL_66;
  }
  objc_msgSend_setLabel_(v49, v48, (uint64_t)CFSTR("NumUpdatedAndErasableHashEntries Buffer"));
  *(_DWORD *)objc_msgSend_contents(*(void **)(a1 + 512), v50, v51) = 0;
  v52 = **(id **)a1;
  v54 = objc_msgSend_newBufferWithLength_options_(v52, v53, 12 * *(unsigned int *)(a1 + 392), 0);
  v55 = *(void **)(a1 + 520);
  *(_QWORD *)(a1 + 520) = v54;

  v57 = *(void **)(a1 + 520);
  if (!v57)
  {
    sub_2393EAC44();
    v73 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
      goto LABEL_73;
    sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::VoxelHashingDataGPU::createBuffers(const InitConfig &)");
    v92 = v100 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v103 = v92;
    v104 = 1026;
    v105 = 626;
    _os_log_error_impl(&dword_239388000, v73, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create updatedHashEntries buffer.", buf, 0x12u);
    if ((v100 & 0x80000000) == 0)
      goto LABEL_73;
    goto LABEL_66;
  }
  objc_msgSend_setLabel_(v57, v56, (uint64_t)CFSTR("UpdatedHashEntries Buffer"));
  v58 = **(id **)a1;
  v60 = objc_msgSend_newBufferWithLength_options_(v58, v59, 4, 0);
  v61 = *(void **)(a1 + 528);
  *(_QWORD *)(a1 + 528) = v60;

  v63 = *(void **)(a1 + 528);
  if (!v63)
  {
    sub_2393EAC44();
    v73 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
      goto LABEL_73;
    sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::VoxelHashingDataGPU::createBuffers(const InitConfig &)");
    v93 = v100 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v103 = v93;
    v104 = 1026;
    v105 = 635;
    _os_log_error_impl(&dword_239388000, v73, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create numUpdatedHashEntries buffer.", buf, 0x12u);
    if ((v100 & 0x80000000) == 0)
      goto LABEL_73;
    goto LABEL_66;
  }
  objc_msgSend_setLabel_(v63, v62, (uint64_t)CFSTR("NumUpdatedHashEntries Buffer"));
  *(_DWORD *)objc_msgSend_contents(*(void **)(a1 + 528), v64, v65) = 0;
  v66 = **(id **)a1;
  v68 = objc_msgSend_newBufferWithLength_options_(v66, v67, (unint64_t)*(unsigned int *)(a1 + 408) << 8, 0);
  v69 = *(void **)(a1 + 544);
  *(_QWORD *)(a1 + 544) = v68;

  v71 = *(void **)(a1 + 544);
  if (!v71)
  {
    sub_2393EAC44();
    v73 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
      goto LABEL_73;
    sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::VoxelHashingDataGPU::createBuffers(const InitConfig &)");
    v94 = v100 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v103 = v94;
    v104 = 1026;
    v105 = 646;
    _os_log_error_impl(&dword_239388000, v73, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create submapsData buffer.", buf, 0x12u);
    if ((v100 & 0x80000000) == 0)
      goto LABEL_73;
    goto LABEL_66;
  }
  objc_msgSend_setLabel_(v71, v70, (uint64_t)CFSTR("SubmapsData Buffer"));
  if (*(_BYTE *)(a1 + 644))
    v72 = 30852 * *(unsigned int *)(a1 + 400);
  else
    v72 = 1;
  v78 = **(id **)a1;
  v80 = objc_msgSend_newBufferWithLength_options_(v78, v79, v72, 0);
  v81 = *(void **)(a1 + 552);
  *(_QWORD *)(a1 + 552) = v80;

  v83 = *(void **)(a1 + 552);
  if (!v83)
  {
    sub_2393EAC44();
    v73 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
      goto LABEL_73;
    sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::VoxelHashingDataGPU::createBuffers(const InitConfig &)");
    v95 = v100 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v103 = v95;
    v104 = 1026;
    v105 = 662;
    _os_log_error_impl(&dword_239388000, v73, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create triangleFacesInVoxelBlocks buffer.", buf, 0x12u);
    if ((v100 & 0x80000000) == 0)
      goto LABEL_73;
    goto LABEL_66;
  }
  objc_msgSend_setLabel_(v83, v82, (uint64_t)CFSTR("TriangleFacesInVoxelBlocks Buffer"));
  __p[0] = &off_250AD6C78;
  __p[1] = (void *)a1;
  v101 = __p;
  v98 = v97;
  v97[0] = &off_250AD6C78;
  v97[1] = a1;
  sub_2393EB2F8((uint64_t *)(a1 + 576), (uint64_t)v97);
  v84 = v98;
  if (v98 == v97)
  {
    v85 = 4;
    v84 = v97;
  }
  else
  {
    if (!v98)
      goto LABEL_81;
    v85 = 5;
  }
  (*(void (**)(void))(*v84 + 8 * v85))();
LABEL_81:
  v88 = v101;
  if (v101 == __p)
  {
    v89 = 4;
    v88 = __p;
    goto LABEL_85;
  }
  if (v101)
  {
    v89 = 5;
LABEL_85:
    (*((void (**)(void))*v88 + v89))();
  }
  return 1;
}

void sub_2393EAB4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  char *v18;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;

  v20 = a14;
  if (a14 == v18)
  {
    v21 = 4;
    v20 = &a11;
  }
  else
  {
    if (!a14)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  v22 = a18;
  if (a18 == &a15)
  {
    v23 = 4;
    v22 = &a15;
  }
  else
  {
    if (!a18)
      _Unwind_Resume(exception_object);
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
  _Unwind_Resume(exception_object);
}

id sub_2393EAC44()
{
  if (qword_2569304C0 != -1)
    dispatch_once(&qword_2569304C0, &unk_250AD6C28);
  return (id)qword_2569304B8;
}

void sub_2393EAC84(uint64_t a1)
{
  unsigned int v2;
  char *v3;
  char *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  uint64_t *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  _OWORD *v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  if (*(_DWORD *)(a1 + 408))
  {
    v2 = 0;
    v3 = *(char **)(a1 + 424);
    while (1)
    {
      v5 = *(_DWORD *)(a1 + 392);
      v6 = v5 * v2++;
      v7 = v5 * v2;
      v8 = *(_QWORD *)(a1 + 432);
      if ((unint64_t)v3 >= v8)
        break;
      *(_QWORD *)v3 = v6 | (v7 << 32);
      v4 = v3 + 8;
LABEL_4:
      *(_QWORD *)(a1 + 424) = v4;
      v3 = v4;
      if (v2 >= *(_DWORD *)(a1 + 408))
        return;
    }
    v9 = *(char **)(a1 + 416);
    v10 = (v3 - v9) >> 3;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 61)
      abort();
    v12 = v8 - (_QWORD)v9;
    if (v12 >> 2 > v11)
      v11 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 >> 61)
        sub_23938C4B8();
      v14 = operator new(8 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = (uint64_t *)&v14[8 * v10];
    *v15 = v6 | (v7 << 32);
    v4 = (char *)(v15 + 1);
    if (v3 == v9)
    {
      v9 = v3;
    }
    else
    {
      v16 = v3 - 8 - v9;
      if (v16 < 0x168)
      {
        v17 = v3;
        goto LABEL_29;
      }
      if (&v14[v3 - v9 - 8 - (v16 & 0xFFFFFFFFFFFFFFF8)] > &v14[v3 - v9 - 8])
      {
        v17 = v3;
        goto LABEL_29;
      }
      if (&v3[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] > v3 - 8)
      {
        v17 = v3;
        goto LABEL_29;
      }
      if ((unint64_t)(v9 - v14) < 0x20)
      {
        v17 = v3;
        goto LABEL_29;
      }
      v18 = (v16 >> 3) + 1;
      v17 = &v3[-8 * (v18 & 0x3FFFFFFFFFFFFFFCLL)];
      v19 = &v14[8 * v10 - 16];
      v20 = v3 - 16;
      v21 = v18 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v22 = *(_OWORD *)v20;
        *(v19 - 1) = *((_OWORD *)v20 - 1);
        *v19 = v22;
        v19 -= 2;
        v20 -= 32;
        v21 -= 4;
      }
      while (v21);
      v15 -= v18 & 0x3FFFFFFFFFFFFFFCLL;
      if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
      {
        do
        {
LABEL_29:
          v23 = *((_QWORD *)v17 - 1);
          v17 -= 8;
          *--v15 = v23;
        }
        while (v17 != v9);
        v9 = *(char **)(a1 + 416);
      }
    }
    *(_QWORD *)(a1 + 416) = v15;
    *(_QWORD *)(a1 + 424) = v4;
    *(_QWORD *)(a1 + 432) = &v14[8 * v13];
    if (v9)
      operator delete(v9);
    goto LABEL_4;
  }
}

void sub_2393EAE70(uint64_t a1, void *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  const char *v6;
  const char *v7;
  const char *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  int64x2_t v16;
  uint64_t v17;
  int64x2_t v18;

  objc_msgSend_computeCommandEncoder(a2, (const char *)a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setLabel_(v4, v5, (uint64_t)CFSTR("ResetHashEntries Encoder"));
  objc_msgSend_setComputePipelineState_(v4, v6, *(_QWORD *)(a1 + 24));
  objc_msgSend_setBytes_length_atIndex_(v4, v7, a1 + 384, 28, 0);
  objc_msgSend_setBuffer_offset_atIndex_(v4, v8, *(_QWORD *)(a1 + 464), 0, 1);
  v11 = objc_msgSend_maxTotalThreadsPerThreadgroup(*(void **)(a1 + 24), v9, v10);
  v17 = *(unsigned int *)(a1 + 396);
  v18 = vdupq_n_s64(1uLL);
  v15 = v11;
  v16 = v18;
  objc_msgSend_dispatchThreads_threadsPerThreadgroup_(v4, v12, (uint64_t)&v17, &v15);
  objc_msgSend_endEncoding(v4, v13, v14);

}

void sub_2393EAF24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_2393EAF3C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  float32x4_t v4;
  simd_float4x4 v5;
  float32x4_t v6;
  uint32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  uint32x4_t v12;
  float32x4_t v13;
  float32x2_t v14;
  uint32x2_t v15;
  const char *v19;
  uint64_t v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  simd_float4 v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  simd_float4x4 v41;

  if (*(_DWORD *)(a1 + 408) <= a2)
    return 0;
  v5.columns[0] = *(simd_float4 *)a3;
  v5.columns[1] = *(simd_float4 *)(a3 + 16);
  v5.columns[2] = *(simd_float4 *)(a3 + 32);
  v4 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 16);
  v5.columns[3] = *(simd_float4 *)(MEMORY[0x24BDAEDF8] + 32);
  v6 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
  v7 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v6, vabdq_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32((float32x4_t)v5.columns[0], *(float32x2_t *)v5.columns[0].f32, 1), (float32x4_t)v5.columns[1], *(float32x2_t *)v5.columns[1].f32, 1), (float32x4_t)v5.columns[2], *(float32x2_t *)v5.columns[2].f32, 1), v4)), (int8x16_t)vcgeq_f32(v6,
                                    vabdq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32((float32x4_t)v5.columns[0], v5.columns[0].f32[0]), (float32x4_t)v5.columns[1], v5.columns[1].f32[0]), (float32x4_t)v5.columns[2], v5.columns[2].f32[0]), *MEMORY[0x24BDAEDF8]))), (int8x16_t)vcgeq_f32(v6, vabdq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32((float32x4_t)v5.columns[0], (float32x4_t)v5.columns[0], 2), (float32x4_t)v5.columns[1], (float32x4_t)v5.columns[1], 2), (float32x4_t)v5.columns[2], (float32x4_t)v5.columns[2],
                                      2),
                                    (float32x4_t)v5.columns[3])));
  v7.i32[3] = v7.i32[2];
  if ((vminvq_u32(v7) & 0x80000000) == 0)
    return 0;
  v8 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v5.columns[1], 2);
  v9 = (float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)v5.columns[0], (int32x4_t)v5.columns[2]), (int32x4_t)v8);
  v10 = (float32x4_t)vtrn2q_s32((int32x4_t)v5.columns[0], (int32x4_t)v5.columns[1]);
  v10.i32[2] = HIDWORD(*(_QWORD *)(a3 + 32));
  v11 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)v5.columns[0], (int32x4_t)v5.columns[2]), (int32x4_t)v5.columns[1]);
  v12 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v6, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v11, v5.columns[1].f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.columns[1].f32, 1), v10), v8, v9), v4)), (int8x16_t)vcgeq_f32(v6, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v11, v5.columns[0].f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.columns[0].f32, 1),
                                           v10),
                                         (float32x4_t)vdupq_laneq_s32((int32x4_t)v5.columns[0], 2),
                                         v9),
                                       *MEMORY[0x24BDAEDF8]))),
                      (int8x16_t)vcgeq_f32(v6, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v11, v5.columns[2].f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.columns[2].f32, 1), v10), (float32x4_t)vdupq_laneq_s32((int32x4_t)v5.columns[2], 2), v9), (float32x4_t)v5.columns[3])));
  v12.i32[3] = v12.i32[2];
  if ((vminvq_u32(v12) & 0x80000000) == 0)
    return 0;
  v13 = vmulq_f32((float32x4_t)v5.columns[0], vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v5.columns[2], (int8x16_t)v5.columns[2], 0xCuLL), (int8x16_t)v5.columns[2], 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v5.columns[1], (int32x4_t)v5.columns[1]), (int8x16_t)v5.columns[1], 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v5.columns[2], (int32x4_t)v5.columns[2]), (int8x16_t)v5.columns[2], 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v5.columns[1], (int8x16_t)v5.columns[1], 0xCuLL), (int8x16_t)v5.columns[1], 8uLL)));
  if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1))).f32[0]+ -1.0) > 0.000011)return 0;
  v5.columns[3] = *(simd_float4 *)(a3 + 48);
  v14 = (float32x2_t)vdup_n_s32(0x38D1B717u);
  v15 = (uint32x2_t)vand_s8((int8x8_t)vcge_f32(v14, vabs_f32(vadd_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v5.columns[2], (int8x16_t)v5.columns[2], 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v5.columns[3], (int8x16_t)v5.columns[3], 8uLL)), (float32x2_t)0xBF80000080000000))), (int8x8_t)vcge_f32(v14, vabs_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v5.columns[0],
                                                                                   (int8x16_t)v5.columns[0],
                                                                                   8uLL),
                                                          (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v5.columns[1], (int8x16_t)v5.columns[1], 8uLL)))));
  if ((vpmin_u32(v15, v15).u32[0] & 0x80000000) == 0)
    return 0;
  v41 = __invert_f4(v5);
  v21 = objc_msgSend_contents(*(void **)(a1 + 544), v19, v20) + ((unint64_t)a2 << 8);
  v22 = *(_OWORD *)(a3 + 48);
  v24 = *(simd_float4 *)a3;
  v23 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v21 + 32) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(v21 + 48) = v22;
  *(simd_float4 *)v21 = v24;
  *(_OWORD *)(v21 + 16) = v23;
  *(simd_float4x4 *)(v21 + 64) = v41;
  v25 = *(float32x4_t *)(a1 + 192);
  v26 = *(float32x4_t *)(a1 + 208);
  v27 = *(float32x4_t *)(a1 + 224);
  v28 = *(float32x4_t *)(a1 + 240);
  v29 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v41.columns[0], COERCE_FLOAT(*(_OWORD *)(a1 + 256))), (float32x4_t)v41.columns[1], *(float32x2_t *)(a1 + 256), 1), (float32x4_t)v41.columns[2], *(float32x4_t *)(a1 + 256), 2), (float32x4_t)v41.columns[3], *(float32x4_t *)(a1 + 256), 3);
  v30 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v41.columns[0], COERCE_FLOAT(*(_OWORD *)(a1 + 272))), (float32x4_t)v41.columns[1], *(float32x2_t *)(a1 + 272), 1), (float32x4_t)v41.columns[2], *(float32x4_t *)(a1 + 272), 2), (float32x4_t)v41.columns[3], *(float32x4_t *)(a1 + 272), 3);
  v31 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v41.columns[0], COERCE_FLOAT(*(_OWORD *)(a1 + 288))), (float32x4_t)v41.columns[1], *(float32x2_t *)(a1 + 288), 1), (float32x4_t)v41.columns[2], *(float32x4_t *)(a1 + 288), 2), (float32x4_t)v41.columns[3], *(float32x4_t *)(a1 + 288), 3);
  v32 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v41.columns[0], COERCE_FLOAT(*(_OWORD *)(a1 + 304))), (float32x4_t)v41.columns[1], *(float32x2_t *)(a1 + 304), 1), (float32x4_t)v41.columns[2], *(float32x4_t *)(a1 + 304), 2), (float32x4_t)v41.columns[3], *(float32x4_t *)(a1 + 304), 3);
  *(float32x4_t *)(v21 + 128) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v25, v29.f32[0]), v26, *(float32x2_t *)v29.f32, 1), v27, v29, 2), v28, v29, 3);
  *(float32x4_t *)(v21 + 144) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v25, v30.f32[0]), v26, *(float32x2_t *)v30.f32, 1), v27, v30, 2), v28, v30, 3);
  *(float32x4_t *)(v21 + 160) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v25, v31.f32[0]), v26, *(float32x2_t *)v31.f32, 1), v27, v31, 2), v28, v31, 3);
  *(float32x4_t *)(v21 + 176) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v25, v32.f32[0]), v26, *(float32x2_t *)v32.f32, 1), v27, v32, 2), v28, v32, 3);
  v33 = *(float32x4_t *)(a1 + 64);
  v34 = *(float32x4_t *)(a1 + 80);
  v35 = *(float32x4_t *)(a1 + 96);
  v36 = *(float32x4_t *)(a1 + 112);
  v37 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v41.columns[0], COERCE_FLOAT(*(_OWORD *)(a1 + 128))), (float32x4_t)v41.columns[1], *(float32x2_t *)(a1 + 128), 1), (float32x4_t)v41.columns[2], *(float32x4_t *)(a1 + 128), 2), (float32x4_t)v41.columns[3], *(float32x4_t *)(a1 + 128), 3);
  v38 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v41.columns[0], COERCE_FLOAT(*(_OWORD *)(a1 + 144))), (float32x4_t)v41.columns[1], *(float32x2_t *)(a1 + 144), 1), (float32x4_t)v41.columns[2], *(float32x4_t *)(a1 + 144), 2), (float32x4_t)v41.columns[3], *(float32x4_t *)(a1 + 144), 3);
  v39 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v41.columns[0], COERCE_FLOAT(*(_OWORD *)(a1 + 160))), (float32x4_t)v41.columns[1], *(float32x2_t *)(a1 + 160), 1), (float32x4_t)v41.columns[2], *(float32x4_t *)(a1 + 160), 2), (float32x4_t)v41.columns[3], *(float32x4_t *)(a1 + 160), 3);
  v40 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v41.columns[0], COERCE_FLOAT(*(_OWORD *)(a1 + 176))), (float32x4_t)v41.columns[1], *(float32x2_t *)(a1 + 176), 1), (float32x4_t)v41.columns[2], *(float32x4_t *)(a1 + 176), 2), (float32x4_t)v41.columns[3], *(float32x4_t *)(a1 + 176), 3);
  *(float32x4_t *)(v21 + 192) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v33, v37.f32[0]), v34, *(float32x2_t *)v37.f32, 1), v35, v37, 2), v36, v37, 3);
  *(float32x4_t *)(v21 + 208) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v33, v38.f32[0]), v34, *(float32x2_t *)v38.f32, 1), v35, v38, 2), v36, v38, 3);
  *(float32x4_t *)(v21 + 224) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v33, v39.f32[0]), v34, *(float32x2_t *)v39.f32, 1), v35, v39, 2), v36, v39, 3);
  *(float32x4_t *)(v21 + 240) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v33, v40.f32[0]), v34, *(float32x2_t *)v40.f32, 1), v35, v40, 2), v36, v40, 3);
  return 1;
}

void sub_2393EB2A4(uint64_t a1, void *a2, uint64_t a3)
{
  const char *v3;
  uint64_t v4;
  id v5;

  objc_msgSend_error(a2, (const char *)a2, a3);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  if (v5)
    sub_2393D1870(v5, v3, v4);

}

void sub_2393EB2E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_2393EB2F8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  void *__p;
  void *v17;

  v3 = *(_QWORD *)(a2 + 24);
  if (!v3)
    goto LABEL_17;
  (*(void (**)(id *__return_ptr))(*(_QWORD *)v3 + 48))(&v9);
  sub_2393EB470(*a1, (uint64_t *)&v9);
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  if (v14)
  {
    v15 = v14;
    operator delete(v14);
  }

  v5 = *(_QWORD *)(a2 + 24);
  if (!v5)
    goto LABEL_17;
  (*(void (**)(id *__return_ptr))(*(_QWORD *)v5 + 48))(&v9);
  sub_2393EB470(*a1 + 104, (uint64_t *)&v9);
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  if (v14)
  {
    v15 = v14;
    operator delete(v14);
  }

  v6 = *(_QWORD *)(a2 + 24);
  if (v6)
  {
    (*(void (**)(id *__return_ptr))(*(_QWORD *)v6 + 48))(&v9);
    sub_2393EB470(*a1 + 208, (uint64_t *)&v9);
    if (__p)
    {
      v17 = __p;
      operator delete(__p);
    }
    if (v14)
    {
      v15 = v14;
      operator delete(v14);
    }

  }
  else
  {
LABEL_17:
    sub_2393BA8D0();
    sub_2393EB470(v7, v8);
  }
}

uint64_t sub_2393EB470(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;

  v4 = *a2;
  *a2 = 0;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;

  v6 = a2[1];
  a2[1] = 0;
  v7 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;

  v8 = a2[2];
  a2[2] = 0;
  v9 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v8;

  v10 = a2[3];
  a2[3] = 0;
  v11 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v10;

  *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
  v12 = a2[5];
  a2[5] = 0;
  v13 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v12;

  v14 = *(void **)(a1 + 48);
  if (v14)
  {
    *(_QWORD *)(a1 + 56) = v14;
    operator delete(v14);
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
  }
  *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
  *(_QWORD *)(a1 + 64) = a2[8];
  a2[6] = 0;
  a2[7] = 0;
  a2[8] = 0;
  v15 = *(void **)(a1 + 72);
  if (v15)
  {
    *(_QWORD *)(a1 + 80) = v15;
    operator delete(v15);
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
  }
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
  *(_QWORD *)(a1 + 88) = a2[11];
  a2[9] = 0;
  a2[10] = 0;
  a2[11] = 0;
  *(_DWORD *)(a1 + 96) = *((_DWORD *)a2 + 24);
  return a1;
}

void sub_2393EB580()
{
  JUMPOUT(0x23B83C4BCLL);
}

_QWORD *sub_2393EB594(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_250AD6C78;
  result[1] = v3;
  return result;
}

uint64_t sub_2393EB5C8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_250AD6C78;
  a2[1] = v2;
  return result;
}

void sub_2393EB5E4(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  void *v5;
  const char *v6;
  void *v7;
  const char *v8;
  void *v9;
  const char *v10;
  void *v11;
  const char *v12;
  void *v13;
  const char *v14;
  void *v15;
  const char *v16;
  void *v17;
  const char *v18;
  void *v19;
  NSObject *v20;
  NSObject *v21;
  NSObject *v22;
  void *v23;
  const char *v24;
  void *v25;
  NSObject *v26;
  NSObject *v27;
  int v28;
  const char *v29;
  __int16 v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 8);
  v5 = (void *)objc_msgSend_newBufferWithLength_options_(**(void ***)v4, a2, 4, 0);
  v7 = v5;
  if (!v5)
  {
    if (qword_2569304C0 != -1)
      dispatch_once(&qword_2569304C0, &unk_250AD6C28);
    v20 = qword_2569304B8;
    if (os_log_type_enabled((os_log_t)qword_2569304B8, OS_LOG_TYPE_ERROR))
    {
      v28 = 136315394;
      v29 = "VoxelHashingDataGPU::createBuffers";
      v30 = 1026;
      v31 = 672;
      _os_log_error_impl(&dword_239388000, v20, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create numVertices in meshBuffer", (uint8_t *)&v28, 0x12u);
    }
    v11 = 0;
    v15 = 0;
    v7 = 0;
    goto LABEL_22;
  }
  objc_msgSend_setLabel_(v5, v6, (uint64_t)CFSTR("NumVertices Buffer"));
  v9 = (void *)objc_msgSend_newBufferWithLength_options_(**(void ***)v4, v8, 48 * *(unsigned int *)(v4 + 560), 0);
  v11 = v9;
  if (!v9)
  {
    if (qword_2569304C0 != -1)
      dispatch_once(&qword_2569304C0, &unk_250AD6C28);
    v21 = qword_2569304B8;
    if (os_log_type_enabled((os_log_t)qword_2569304B8, OS_LOG_TYPE_ERROR))
    {
      v28 = 136315394;
      v29 = "VoxelHashingDataGPU::createBuffers";
      v30 = 1026;
      v31 = 681;
      _os_log_error_impl(&dword_239388000, v21, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create numVertices in meshBuffer", (uint8_t *)&v28, 0x12u);
    }
    v11 = 0;
    goto LABEL_21;
  }
  objc_msgSend_setLabel_(v9, v10, (uint64_t)CFSTR("Vertices Buffer"));
  v13 = (void *)objc_msgSend_newBufferWithLength_options_(**(void ***)v4, v12, 4, 0);
  v15 = v13;
  if (!v13)
  {
    if (qword_2569304C0 != -1)
      dispatch_once(&qword_2569304C0, &unk_250AD6C28);
    v22 = qword_2569304B8;
    if (os_log_type_enabled((os_log_t)qword_2569304B8, OS_LOG_TYPE_ERROR))
    {
      v28 = 136315394;
      v29 = "VoxelHashingDataGPU::createBuffers";
      v30 = 1026;
      v31 = 692;
      _os_log_error_impl(&dword_239388000, v22, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create numTriangleVertexIdxs in meshBuffer", (uint8_t *)&v28, 0x12u);
    }
LABEL_21:
    v15 = 0;
LABEL_22:
    v19 = 0;
    goto LABEL_23;
  }
  objc_msgSend_setLabel_(v13, v14, (uint64_t)CFSTR("NumTriangleVertexIdxs Buffer"));
  if (!*(_BYTE *)(v4 + 644))
  {
    v19 = 0;
    goto LABEL_26;
  }
  v17 = (void *)objc_msgSend_newBufferWithLength_options_(**(void ***)v4, v16, 12 * *(unsigned int *)(v4 + 564), 0);
  v19 = v17;
  if (!v17)
  {
    if (qword_2569304C0 != -1)
      dispatch_once(&qword_2569304C0, &unk_250AD6C28);
    v27 = qword_2569304B8;
    if (os_log_type_enabled((os_log_t)qword_2569304B8, OS_LOG_TYPE_ERROR))
    {
      v28 = 136315394;
      v29 = "VoxelHashingDataGPU::createBuffers";
      v30 = 1026;
      v31 = 703;
      _os_log_error_impl(&dword_239388000, v27, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create triangleVertexIdxs in meshBuffer", (uint8_t *)&v28, 0x12u);
    }
    goto LABEL_22;
  }
  objc_msgSend_setLabel_(v17, v18, (uint64_t)CFSTR("TriangleVertexIdxs Buffer"));
LABEL_26:
  v23 = (void *)objc_msgSend_newBufferWithLength_options_(**(void ***)v4, v16, 48 * *(unsigned int *)(v4 + 568), 0);
  v25 = v23;
  if (v23)
  {
    objc_msgSend_setLabel_(v23, v24, (uint64_t)CFSTR("SampledPointsFromMesh Buffer"));
    *(_QWORD *)a3 = v7;
    *(_QWORD *)(a3 + 8) = v11;
    *(_QWORD *)(a3 + 16) = v15;
    *(_QWORD *)(a3 + 24) = v19;
    *(_DWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 40) = v25;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_DWORD *)(a3 + 96) = 0;
    v11 = 0;
    v15 = 0;
    v7 = 0;
    v19 = 0;
    goto LABEL_24;
  }
  if (qword_2569304C0 != -1)
    dispatch_once(&qword_2569304C0, &unk_250AD6C28);
  v26 = qword_2569304B8;
  if (os_log_type_enabled((os_log_t)qword_2569304B8, OS_LOG_TYPE_ERROR))
  {
    v28 = 136315394;
    v29 = "VoxelHashingDataGPU::createBuffers";
    v30 = 1026;
    v31 = 714;
    _os_log_error_impl(&dword_239388000, v26, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create sampledPointsFromMesh in meshBuffer", (uint8_t *)&v28, 0x12u);
  }
LABEL_23:
  *(_DWORD *)(a3 + 32) = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 84) = 0u;
LABEL_24:

}

void sub_2393EBACC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_2393EBB40()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.CoreOCModules", "VoxelHashing");
  v1 = (void *)qword_2569304B8;
  qword_2569304B8 = (uint64_t)v0;

}

BOOL sub_2393EBB70(uint64_t a1, uint64_t a2)
{
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x2_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  uint32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  uint32x4_t v15;
  float32x4_t v16;
  uint32x2_t v17;
  _BOOL8 result;
  NSObject *v19;
  int v20;
  const char *v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if (a1 == a2)
    return 1;
  v2 = *(float32x4_t *)MEMORY[0x24BDAEDF8];
  v3 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 16);
  v4 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 32);
  v5 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
  v6 = (float32x2_t)vdup_n_s32(0x38D1B717u);
  while (1)
  {
    v7 = *(float32x4_t *)a1;
    v8 = *(float32x4_t *)(a1 + 16);
    v9 = *(float32x4_t *)(a1 + 32);
    v10 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v5, vabdq_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v7, *(float32x2_t *)v7.f32, 1), v8, *(float32x2_t *)v8.f32, 1), v9, *(float32x2_t *)v9.f32, 1), v3)), (int8x16_t)vcgeq_f32(v5, vabdq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v7, v7.f32[0]), v8, v8.f32[0]),
                                           v9,
                                           v9.f32[0]),
                                         v2))),
                        (int8x16_t)vcgeq_f32(v5, vabdq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v7, v7, 2), v8, v8, 2), v9, v9, 2), v4)));
    v10.i32[3] = v10.i32[2];
    if ((vminvq_u32(v10) & 0x80000000) == 0)
      break;
    v11 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v8, 2);
    v12 = (float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)v7, (int32x4_t)v9), (int32x4_t)v11);
    v13 = (float32x4_t)vtrn2q_s32((int32x4_t)v7, (int32x4_t)v8);
    v13.i32[2] = HIDWORD(*(_QWORD *)(a1 + 32));
    v14 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)v7, (int32x4_t)v9), (int32x4_t)v8);
    v15 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v5, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v14, v8.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 1), v13), v11, v12), v3)), (int8x16_t)vcgeq_f32(v5, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v14, v7.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1),
                                             v13),
                                           (float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2),
                                           v12),
                                         v2))),
                        (int8x16_t)vcgeq_f32(v5, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v14, v9.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1), v13), (float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), v12), v4)));
    v15.i32[3] = v15.i32[2];
    if ((vminvq_u32(v15) & 0x80000000) == 0)
      break;
    v16 = vmulq_f32(v7, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v9, (int8x16_t)v9, 0xCuLL), (int8x16_t)v9, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v8, (int32x4_t)v8), (int8x16_t)v8, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v9, (int32x4_t)v9), (int8x16_t)v9, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v8, (int8x16_t)v8, 0xCuLL), (int8x16_t)v8, 8uLL)));
    if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1))).f32[0]+ -1.0) > 0.000011)break;
    v17 = (uint32x2_t)vand_s8((int8x8_t)vcge_f32(v6, vabs_f32(vadd_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(a1 + 48), *(int8x16_t *)(a1 + 48), 8uLL)), (float32x2_t)0xBF80000080000000))), (int8x8_t)vcge_f32(v6, vabs_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v7,
                                                                                     (int8x16_t)v7,
                                                                                     8uLL),
                                                            (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL)))));
    if ((vpmin_u32(v17, v17).u32[0] & 0x80000000) == 0)
      break;
    a1 += 64;
    if (a1 == a2)
      return 1;
  }
  if (qword_2569304C0 != -1)
    dispatch_once(&qword_2569304C0, &unk_250AD6C28);
  v19 = qword_2569304B8;
  result = os_log_type_enabled((os_log_t)qword_2569304B8, OS_LOG_TYPE_ERROR);
  if (result)
  {
    v20 = 136315394;
    v21 = "VoxelHashingDataGPU::InitConfig";
    v22 = 1026;
    v23 = 113;
    _os_log_error_impl(&dword_239388000, v19, OS_LOG_TYPE_ERROR, "%s:%{public}d Submap to world transform is invalid.", (uint8_t *)&v20, 0x12u);
    return 0;
  }
  return result;
}

uint64_t sub_2393EBE14(uint64_t a1)
{
  NSObject *v2;
  void **v3;
  void *__p[2];
  char v5;
  uint8_t buf[4];
  void **v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 8))
    return *(unsigned int *)(a1 + 560);
  if (qword_2569304C0 != -1)
    dispatch_once(&qword_2569304C0, &unk_250AD6C28);
  v2 = (id)qword_2569304B8;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    sub_2393C4DD0(__p, "uint32_t oc::voxel_hashing::VoxelHashingDataGPU::vertexCapacity() const");
    if (v5 >= 0)
      v3 = __p;
    else
      v3 = (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v7 = v3;
    v8 = 1026;
    v9 = 157;
    _os_log_error_impl(&dword_239388000, v2, OS_LOG_TYPE_ERROR, "%s:%{public}d VoxelHashingDataGPU not initialized.", buf, 0x12u);
    if (v5 < 0)
      operator delete(__p[0]);
  }

  return 0;
}

uint64_t sub_2393EBF3C(uint64_t a1)
{
  NSObject *v2;
  void **v3;
  void *__p[2];
  char v5;
  uint8_t buf[4];
  void **v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 8))
    return *(unsigned int *)(a1 + 564);
  if (qword_2569304C0 != -1)
    dispatch_once(&qword_2569304C0, &unk_250AD6C28);
  v2 = (id)qword_2569304B8;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    sub_2393C4DD0(__p, "uint32_t oc::voxel_hashing::VoxelHashingDataGPU::triangleCapacity() const");
    if (v5 >= 0)
      v3 = __p;
    else
      v3 = (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v7 = v3;
    v8 = 1026;
    v9 = 167;
    _os_log_error_impl(&dword_239388000, v2, OS_LOG_TYPE_ERROR, "%s:%{public}d VoxelHashingDataGPU not initialized.", buf, 0x12u);
    if (v5 < 0)
      operator delete(__p[0]);
  }

  return 0;
}

uint64_t sub_2393EC064(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  int v10;
  const char *v11;
  uint64_t v12;
  int v13;
  NSObject *v15;
  void **v16;
  void *__p[2];
  char v18;
  uint8_t buf[4];
  void **v20;
  __int16 v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 8)
    && *(_QWORD *)(a1 + 488)
    && *(_QWORD *)(a1 + 496)
    && (v4 = *(void **)(a1 + 480)) != 0
    && (v5 = *(_DWORD *)(a1 + 384)) != 0
    && (v6 = *(_DWORD *)(a1 + 392), v7 = *(_DWORD *)(a1 + 388), v7 - 1 < v6)
    && v6 == v7 * v5
    && !(v6 % v7)
    && (v8 = *(_DWORD *)(a1 + 408), *(_DWORD *)(a1 + 396) == v8 * v6)
    && (v9 = *(_DWORD *)(a1 + 400), v9 >= 1)
    && v8
    && *(_DWORD *)(a1 + 404) - 1 < v9)
  {
    v10 = *(_DWORD *)objc_msgSend_contents(v4, a2, a3);
    v13 = *(_DWORD *)objc_msgSend_contents(*(void **)(a1 + 496), v11, v12);
    if (v13 < 0)
      v13 = -1;
    return (v10 + ~v13);
  }
  else
  {
    if (qword_2569304C0 != -1)
      dispatch_once(&qword_2569304C0, &unk_250AD6C28);
    v15 = (id)qword_2569304B8;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      sub_2393C4DD0(__p, "uint32_t oc::voxel_hashing::VoxelHashingDataGPU::numVoxelBlocks() const");
      v16 = v18 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      v20 = v16;
      v21 = 1026;
      v22 = 188;
      _os_log_error_impl(&dword_239388000, v15, OS_LOG_TYPE_ERROR, "%s:%{public}d VoxelHashingDataGPU not initialized.", buf, 0x12u);
      if (v18 < 0)
        operator delete(__p[0]);
    }

    return 0;
  }
}

void sub_2393EC230(uint64_t a1, uint64_t a2)
{
  char v3;
  NSObject *v4;
  void **v5;
  void *__p[2];
  char v7;
  uint8_t buf[4];
  void **v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a2 + 8))
  {
    *(_OWORD *)a1 = *(_OWORD *)(a2 + 384);
    *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 396);
    v3 = 1;
  }
  else
  {
    if (qword_2569304C0 != -1)
      dispatch_once(&qword_2569304C0, &unk_250AD6C28);
    v4 = (id)qword_2569304B8;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      sub_2393C4DD0(__p, "std::optional<HashTableParams> oc::voxel_hashing::VoxelHashingDataGPU::hashTableParams() const");
      if (v7 >= 0)
        v5 = __p;
      else
        v5 = (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      v9 = v5;
      v10 = 1026;
      v11 = 200;
      _os_log_error_impl(&dword_239388000, v4, OS_LOG_TYPE_ERROR, "%s:%{public}d VoxelHashingDataGPU not initialized.", buf, 0x12u);
      if (v7 < 0)
        operator delete(__p[0]);
    }

    v3 = 0;
    *(_BYTE *)a1 = 0;
  }
  *(_BYTE *)(a1 + 28) = v3;
}

id sub_2393EC380(uint64_t a1)
{
  id v1;
  NSObject *v2;
  void **v4;
  void *__p[2];
  char v6;
  uint8_t buf[4];
  void **v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 8))
  {
    v1 = *(id *)(a1 + 464);
  }
  else
  {
    if (qword_2569304C0 != -1)
      dispatch_once(&qword_2569304C0, &unk_250AD6C28);
    v2 = (id)qword_2569304B8;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      sub_2393C4DD0(__p, "id<MTLBuffer> oc::voxel_hashing::VoxelHashingDataGPU::hashEntries()");
      if (v6 >= 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      v8 = v4;
      v9 = 1026;
      v10 = 210;
      _os_log_error_impl(&dword_239388000, v2, OS_LOG_TYPE_ERROR, "%s:%{public}d VoxelHashingDataGPU not initialized.", buf, 0x12u);
      if (v6 < 0)
        operator delete(__p[0]);
    }

    v1 = 0;
  }
  return v1;
}

id sub_2393EC4AC(uint64_t a1)
{
  id v1;
  NSObject *v2;
  void **v4;
  void *__p[2];
  char v6;
  uint8_t buf[4];
  void **v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 8))
  {
    v1 = *(id *)(a1 + 472);
  }
  else
  {
    if (qword_2569304C0 != -1)
      dispatch_once(&qword_2569304C0, &unk_250AD6C28);
    v2 = (id)qword_2569304B8;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      sub_2393C4DD0(__p, "id<MTLBuffer> oc::voxel_hashing::VoxelHashingDataGPU::voxelBlocks()");
      if (v6 >= 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      v8 = v4;
      v9 = 1026;
      v10 = 220;
      _os_log_error_impl(&dword_239388000, v2, OS_LOG_TYPE_ERROR, "%s:%{public}d VoxelHashingDataGPU not initialized.", buf, 0x12u);
      if (v6 < 0)
        operator delete(__p[0]);
    }

    v1 = 0;
  }
  return v1;
}

id sub_2393EC5D8(uint64_t a1)
{
  void *v1;
  id v2;
  NSObject *v3;
  void **v5;
  void *__p[2];
  char v7;
  uint8_t buf[4];
  void **v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 8) && (v1 = *(void **)(a1 + 480)) != 0)
  {
    v2 = v1;
  }
  else
  {
    if (qword_2569304C0 != -1)
      dispatch_once(&qword_2569304C0, &unk_250AD6C28);
    v3 = (id)qword_2569304B8;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      sub_2393C4DD0(__p, "id<MTLBuffer> oc::voxel_hashing::VoxelHashingDataGPU::nextAvailableVoxelBlockIdx()");
      if (v7 >= 0)
        v5 = __p;
      else
        v5 = (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      v9 = v5;
      v10 = 1026;
      v11 = 230;
      _os_log_error_impl(&dword_239388000, v3, OS_LOG_TYPE_ERROR, "%s:%{public}d VoxelHashingDataGPU not initialized.", buf, 0x12u);
      if (v7 < 0)
        operator delete(__p[0]);
    }

    v2 = 0;
  }
  return v2;
}

id sub_2393EC708(uint64_t a1)
{
  void *v1;
  id v2;
  NSObject *v3;
  void **v5;
  void *__p[2];
  char v7;
  uint8_t buf[4];
  void **v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 8) && (v1 = *(void **)(a1 + 488)) != 0)
  {
    v2 = v1;
  }
  else
  {
    if (qword_2569304C0 != -1)
      dispatch_once(&qword_2569304C0, &unk_250AD6C28);
    v3 = (id)qword_2569304B8;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      sub_2393C4DD0(__p, "id<MTLBuffer> oc::voxel_hashing::VoxelHashingDataGPU::voxelBlocksFreeStack()");
      if (v7 >= 0)
        v5 = __p;
      else
        v5 = (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      v9 = v5;
      v10 = 1026;
      v11 = 240;
      _os_log_error_impl(&dword_239388000, v3, OS_LOG_TYPE_ERROR, "%s:%{public}d VoxelHashingDataGPU not initialized.", buf, 0x12u);
      if (v7 < 0)
        operator delete(__p[0]);
    }

    v2 = 0;
  }
  return v2;
}

id sub_2393EC838(uint64_t a1)
{
  void *v1;
  id v2;
  NSObject *v3;
  void **v5;
  void *__p[2];
  char v7;
  uint8_t buf[4];
  void **v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 8) && (v1 = *(void **)(a1 + 496)) != 0)
  {
    v2 = v1;
  }
  else
  {
    if (qword_2569304C0 != -1)
      dispatch_once(&qword_2569304C0, &unk_250AD6C28);
    v3 = (id)qword_2569304B8;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      sub_2393C4DD0(__p, "id<MTLBuffer> oc::voxel_hashing::VoxelHashingDataGPU::voxelBlocksFreeStackTopBuffer()");
      if (v7 >= 0)
        v5 = __p;
      else
        v5 = (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      v9 = v5;
      v10 = 1026;
      v11 = 250;
      _os_log_error_impl(&dword_239388000, v3, OS_LOG_TYPE_ERROR, "%s:%{public}d VoxelHashingDataGPU not initialized.", buf, 0x12u);
      if (v7 < 0)
        operator delete(__p[0]);
    }

    v2 = 0;
  }
  return v2;
}

id sub_2393EC968(uint64_t a1)
{
  void *v1;
  id v2;
  NSObject *v3;
  void **v5;
  void *__p[2];
  char v7;
  uint8_t buf[4];
  void **v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 8) && (v1 = *(void **)(a1 + 504)) != 0)
  {
    v2 = v1;
  }
  else
  {
    if (qword_2569304C0 != -1)
      dispatch_once(&qword_2569304C0, &unk_250AD6C28);
    v3 = (id)qword_2569304B8;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      sub_2393C4DD0(__p, "id<MTLBuffer> oc::voxel_hashing::VoxelHashingDataGPU::updatedAndErasableHashEntries()");
      if (v7 >= 0)
        v5 = __p;
      else
        v5 = (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      v9 = v5;
      v10 = 1026;
      v11 = 260;
      _os_log_error_impl(&dword_239388000, v3, OS_LOG_TYPE_ERROR, "%s:%{public}d VoxelHashingDataGPU not initialized.", buf, 0x12u);
      if (v7 < 0)
        operator delete(__p[0]);
    }

    v2 = 0;
  }
  return v2;
}

id sub_2393ECA98(uint64_t a1)
{
  void *v1;
  id v2;
  NSObject *v3;
  void **v5;
  void *__p[2];
  char v7;
  uint8_t buf[4];
  void **v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 8) && (v1 = *(void **)(a1 + 512)) != 0)
  {
    v2 = v1;
  }
  else
  {
    if (qword_2569304C0 != -1)
      dispatch_once(&qword_2569304C0, &unk_250AD6C28);
    v3 = (id)qword_2569304B8;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      sub_2393C4DD0(__p, "id<MTLBuffer> oc::voxel_hashing::VoxelHashingDataGPU::numUpdatedAndErasableHashEntriesBuffer()");
      if (v7 >= 0)
        v5 = __p;
      else
        v5 = (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      v9 = v5;
      v10 = 1026;
      v11 = 270;
      _os_log_error_impl(&dword_239388000, v3, OS_LOG_TYPE_ERROR, "%s:%{public}d VoxelHashingDataGPU not initialized.", buf, 0x12u);
      if (v7 < 0)
        operator delete(__p[0]);
    }

    v2 = 0;
  }
  return v2;
}

id sub_2393ECBC8(uint64_t a1)
{
  void *v1;
  id v2;
  NSObject *v3;
  void **v5;
  void *__p[2];
  char v7;
  uint8_t buf[4];
  void **v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 8) && (v1 = *(void **)(a1 + 520)) != 0)
  {
    v2 = v1;
  }
  else
  {
    if (qword_2569304C0 != -1)
      dispatch_once(&qword_2569304C0, &unk_250AD6C28);
    v3 = (id)qword_2569304B8;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      sub_2393C4DD0(__p, "id<MTLBuffer> oc::voxel_hashing::VoxelHashingDataGPU::updatedHashEntries()");
      if (v7 >= 0)
        v5 = __p;
      else
        v5 = (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      v9 = v5;
      v10 = 1026;
      v11 = 280;
      _os_log_error_impl(&dword_239388000, v3, OS_LOG_TYPE_ERROR, "%s:%{public}d VoxelHashingDataGPU not initialized.", buf, 0x12u);
      if (v7 < 0)
        operator delete(__p[0]);
    }

    v2 = 0;
  }
  return v2;
}

id sub_2393ECCF8(uint64_t a1)
{
  void *v1;
  id v2;
  NSObject *v3;
  void **v5;
  void *__p[2];
  char v7;
  uint8_t buf[4];
  void **v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 8) && (v1 = *(void **)(a1 + 528)) != 0)
  {
    v2 = v1;
  }
  else
  {
    if (qword_2569304C0 != -1)
      dispatch_once(&qword_2569304C0, &unk_250AD6C28);
    v3 = (id)qword_2569304B8;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      sub_2393C4DD0(__p, "id<MTLBuffer> oc::voxel_hashing::VoxelHashingDataGPU::numUpdatedHashEntriesBuffer()");
      if (v7 >= 0)
        v5 = __p;
      else
        v5 = (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      v9 = v5;
      v10 = 1026;
      v11 = 290;
      _os_log_error_impl(&dword_239388000, v3, OS_LOG_TYPE_ERROR, "%s:%{public}d VoxelHashingDataGPU not initialized.", buf, 0x12u);
      if (v7 < 0)
        operator delete(__p[0]);
    }

    v2 = 0;
  }
  return v2;
}

id sub_2393ECE28(uint64_t a1)
{
  id v1;
  NSObject *v2;
  void **v4;
  void *__p[2];
  char v6;
  uint8_t buf[4];
  void **v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 8))
  {
    v1 = *(id *)(a1 + 552);
  }
  else
  {
    if (qword_2569304C0 != -1)
      dispatch_once(&qword_2569304C0, &unk_250AD6C28);
    v2 = (id)qword_2569304B8;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      sub_2393C4DD0(__p, "id<MTLBuffer> oc::voxel_hashing::VoxelHashingDataGPU::triangleFacesInVoxelBlocks()");
      if (v6 >= 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      v8 = v4;
      v9 = 1026;
      v10 = 340;
      _os_log_error_impl(&dword_239388000, v2, OS_LOG_TYPE_ERROR, "%s:%{public}d VoxelHashingDataGPU not initialized.", buf, 0x12u);
      if (v6 < 0)
        operator delete(__p[0]);
    }

    v1 = 0;
  }
  return v1;
}

uint64_t sub_2393ECF54(uint64_t a1, unsigned int a2)
{
  NSObject *v3;
  void **v4;
  void *__p[2];
  char v6;
  uint8_t buf[4];
  void **v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 8) && *(_DWORD *)(a1 + 408) > a2)
  {
    *(_DWORD *)(a1 + 536) = a2;
    return 1;
  }
  else
  {
    if (qword_2569304C0 != -1)
      dispatch_once(&qword_2569304C0, &unk_250AD6C28);
    v3 = (id)qword_2569304B8;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::VoxelHashingDataGPU::setLastIntegratedSubmapID(const SubmapID)");
      if (v6 >= 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      v8 = v4;
      v9 = 1026;
      v10 = 350;
      _os_log_error_impl(&dword_239388000, v3, OS_LOG_TYPE_ERROR, "%s:%{public}d VoxelHashingDataGPU not initialized or the submapID is invalid.", buf, 0x12u);
      if (v6 < 0)
        operator delete(__p[0]);
    }

    return 0;
  }
}

uint64_t sub_2393ED08C(uint64_t a1)
{
  NSObject *v2;
  void **v3;
  void *__p[2];
  char v5;
  uint8_t buf[4];
  void **v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 8))
    return *(unsigned int *)(a1 + 536) | 0x100000000;
  if (qword_2569304C0 != -1)
    dispatch_once(&qword_2569304C0, &unk_250AD6C28);
  v2 = (id)qword_2569304B8;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    sub_2393C4DD0(__p, "std::optional<SubmapID> oc::voxel_hashing::VoxelHashingDataGPU::lastIntegratedSubmapID() const");
    if (v5 >= 0)
      v3 = __p;
    else
      v3 = (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v7 = v3;
    v8 = 1026;
    v9 = 361;
    _os_log_error_impl(&dword_239388000, v2, OS_LOG_TYPE_ERROR, "%s:%{public}d VoxelHashingDataGPU not initialized.", buf, 0x12u);
    if (v5 < 0)
      operator delete(__p[0]);
  }

  return 0;
}

id sub_2393ED1B8(uint64_t a1)
{
  id v1;
  NSObject *v2;
  void **v4;
  void *__p[2];
  char v6;
  uint8_t buf[4];
  void **v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 8))
  {
    v1 = *(id *)(a1 + 544);
  }
  else
  {
    if (qword_2569304C0 != -1)
      dispatch_once(&qword_2569304C0, &unk_250AD6C28);
    v2 = (id)qword_2569304B8;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      sub_2393C4DD0(__p, "id<MTLBuffer> oc::voxel_hashing::VoxelHashingDataGPU::submapsData()");
      if (v6 >= 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      v8 = v4;
      v9 = 1026;
      v10 = 386;
      _os_log_error_impl(&dword_239388000, v2, OS_LOG_TYPE_ERROR, "%s:%{public}d VoxelHashingDataGPU not initialized.", buf, 0x12u);
      if (v6 < 0)
        operator delete(__p[0]);
    }

    v1 = 0;
  }
  return v1;
}

uint64_t sub_2393ED2E4(uint64_t a1)
{
  NSObject *v2;
  void **v3;
  void *__p[2];
  char v5;
  uint8_t buf[4];
  void **v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 8))
    return *(_QWORD *)(a1 + 576) + 104 * *(_QWORD *)(a1 + 616);
  if (qword_2569304C0 != -1)
    dispatch_once(&qword_2569304C0, &unk_250AD6C28);
  v2 = (id)qword_2569304B8;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    sub_2393C4DD0(__p, "MeshBuffers *oc::voxel_hashing::VoxelHashingDataGPU::meshReaderBuffers()");
    if (v5 >= 0)
      v3 = __p;
    else
      v3 = (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v7 = v3;
    v8 = 1026;
    v9 = 406;
    _os_log_error_impl(&dword_239388000, v2, OS_LOG_TYPE_ERROR, "%s:%{public}d VoxelHashingDataGPU not initialized.", buf, 0x12u);
    if (v5 < 0)
      operator delete(__p[0]);
  }

  return 0;
}

uint64_t sub_2393ED418(uint64_t a1)
{
  NSObject *v2;
  void **v3;
  void *__p[2];
  char v5;
  uint8_t buf[4];
  void **v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 8))
    return *(_QWORD *)(a1 + 576) + 104 * *(_QWORD *)(a1 + 600);
  if (qword_2569304C0 != -1)
    dispatch_once(&qword_2569304C0, &unk_250AD6C28);
  v2 = (id)qword_2569304B8;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    sub_2393C4DD0(__p, "MeshBuffers *oc::voxel_hashing::VoxelHashingDataGPU::meshWriterBuffers()");
    if (v5 >= 0)
      v3 = __p;
    else
      v3 = (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v7 = v3;
    v8 = 1026;
    v9 = 416;
    _os_log_error_impl(&dword_239388000, v2, OS_LOG_TYPE_ERROR, "%s:%{public}d VoxelHashingDataGPU not initialized.", buf, 0x12u);
    if (v5 < 0)
      operator delete(__p[0]);
  }

  return 0;
}

void sub_2393ED54C(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;
  void **v4;
  void *block[2];
  int8x16_t (*v6)(uint64_t);
  void *v7;
  uint64_t v8;
  uint8_t buf[4];
  void **v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 8))
  {
    v1 = a1 + 576;
    v2 = *(NSObject **)(a1 + 624);
    block[0] = (void *)MEMORY[0x24BDAC760];
    block[1] = (void *)3221225472;
    v6 = sub_2393ED6AC;
    v7 = &unk_250AD6C48;
    v8 = v1;
    dispatch_sync(v2, block);
  }
  else
  {
    if (qword_2569304C0 != -1)
      dispatch_once(&qword_2569304C0, &unk_250AD6C28);
    v3 = (id)qword_2569304B8;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      sub_2393C4DD0(block, "void oc::voxel_hashing::VoxelHashingDataGPU::updateMeshReaderBuffer()");
      if (SHIBYTE(v6) >= 0)
        v4 = block;
      else
        v4 = (void **)block[0];
      *(_DWORD *)buf = 136315394;
      v10 = v4;
      v11 = 1026;
      v12 = 426;
      _os_log_error_impl(&dword_239388000, v3, OS_LOG_TYPE_ERROR, "%s:%{public}d VoxelHashingDataGPU not initialized.", buf, 0x12u);
      if (SHIBYTE(v6) < 0)
        operator delete(block[0]);
    }

  }
}

int8x16_t sub_2393ED6AC(uint64_t a1)
{
  int8x16_t *v1;
  int8x16_t result;

  v1 = *(int8x16_t **)(a1 + 32);
  if (v1[3].i8[8])
  {
    result = vextq_s8(v1[2], v1[2], 8uLL);
    v1[2] = result;
    v1[3].i8[8] = 0;
  }
  return result;
}

int8x16_t sub_2393ED6CC(uint64_t a1)
{
  uint64_t v1;
  int8x16_t result;

  v1 = *(_QWORD *)(a1 + 32);
  result = vextq_s8(*(int8x16_t *)(v1 + 24), *(int8x16_t *)(v1 + 24), 8uLL);
  *(int8x16_t *)(v1 + 24) = result;
  *(_BYTE *)(v1 + 56) = 1;
  return result;
}

BOOL sub_2393ED6E8(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  unsigned int *v7;
  const char *v8;
  uint64_t v9;
  _DWORD *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  int *v18;
  const char *v19;
  uint64_t v20;
  int *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  NSObject *v40;
  uint64_t v41;
  unsigned int v42;
  _QWORD *v43;
  unsigned int v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void **v50;
  NSObject *v51;
  void **v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  void *__p[2];
  char v58;
  uint8_t buf[4];
  void **v60;
  __int16 v61;
  int v62;
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  v56 = *(unsigned __int8 *)(a1 + 8);
  if (*(_BYTE *)(a1 + 8))
  {
    v4 = *(unsigned int *)objc_msgSend_contents(*(void **)(a1 + 512), a2, a3);
    v7 = (unsigned int *)objc_msgSend_contents(*(void **)(a1 + 504), v5, v6);
    v10 = (_DWORD *)objc_msgSend_contents(*(void **)(a1 + 528), v8, v9);
    *v10 = 0;
    v13 = objc_msgSend_contents(*(void **)(a1 + 520), v11, v12);
    v55 = objc_msgSend_contents(*(void **)(a1 + 488), v14, v15);
    v18 = (int *)objc_msgSend_contents(*(void **)(a1 + 496), v16, v17);
    v21 = v18;
    if (*v18 <= -2)
      *v18 = -1;
    v54 = objc_msgSend_contents(*(void **)(a1 + 472), v19, v20);
    v24 = objc_msgSend_contents(*(void **)(a1 + 464), v22, v23);
    if ((_DWORD)v4)
    {
      v27 = v24;
      do
      {
        if (*v21 >= *(_DWORD *)(a1 + 404) - 1)
          break;
        if (*((_BYTE *)v7 + 8) && (v30 = *v7, *(_DWORD *)(v27 + 24 * *v7 + 16) == 2))
        {
          v31 = *(_QWORD *)(a1 + 416);
          v32 = *(unsigned int *)(a1 + 536);
          if (*(_DWORD *)(v31 + 8 * v32) > v30 || *(_DWORD *)(v31 + 8 * v32 + 4) <= v30)
          {
            if (qword_2569304C0 != -1)
              dispatch_once(&qword_2569304C0, &unk_250AD6C28);
            v40 = (id)qword_2569304B8;
            if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
            {
              sub_2393C4DD0(__p, "Pointer oc::voxel_hashing::VoxelHashingDataGPU::eraseHashEntry(const UpdatedHashEntry &)");
              v50 = __p;
              if (v58 < 0)
                v50 = (void **)__p[0];
              *(_DWORD *)buf = 136315394;
              v60 = v50;
              v61 = 1026;
              v62 = 765;
              _os_log_error_impl(&dword_239388000, v40, OS_LOG_TYPE_ERROR, "%s:%{public}d Received invalid updatedHashEntry.", buf, 0x12u);
              if (v58 < 0)
                operator delete(__p[0]);
            }

          }
          else
          {
            v33 = objc_msgSend_contents(*(void **)(a1 + 464), v25, v26);
            v34 = *v7;
            v35 = v7[1];
            v36 = *(_DWORD *)(v33 + 24 * *v7 + 12);
            v37 = *(_QWORD *)(a1 + 416);
            v38 = *(unsigned int *)(a1 + 536);
            v39 = *(_DWORD *)(v37 + 8 * v38);
            if (v39 > v35 || *(_DWORD *)(v37 + 8 * v38 + 4) <= v35)
            {
              v41 = v33 + 24 * v34;
              v44 = *(_DWORD *)(v41 + 8);
              v43 = (_QWORD *)(v41 + 8);
              v42 = v44;
              if (v39 <= v44 && *(_DWORD *)(v37 + 8 * v38 + 4) > v42)
              {
                v45 = (_QWORD *)(v33 + 24 * v42);
                v46 = v45[1];
                v47 = v33 + 24 * v34;
                *(_QWORD *)v47 = *v45;
                *v43 = v46;
                *(_DWORD *)(v47 + 16) = 0;
                v34 = v42;
              }
            }
            else
            {
              *(_DWORD *)(v33 + 24 * v35 + 8) = *(_DWORD *)(v33 + 24 * v34 + 8);
            }
            v48 = v33 + 24 * v34;
            *(_DWORD *)(v48 + 8) = *(_DWORD *)(a1 + 396);
            *(_QWORD *)(v48 + 12) = 0xFFFFFFFFLL;
            if ((v36 & 0x80000000) == 0)
            {
              v49 = *v21 + 1;
              *v21 = v49;
              *(_DWORD *)(v55 + 4 * v49) = v36;
              *(_BYTE *)(v54 + 17368 * v36 + 17364) = 1;
            }
          }
        }
        else
        {
          v28 = v13 + 12 * *v10;
          v29 = *(_QWORD *)v7;
          *(_BYTE *)(v28 + 8) = *((_BYTE *)v7 + 8);
          *(_QWORD *)v28 = v29;
          ++*v10;
        }
        v7 += 3;
        --v4;
      }
      while (v4);
    }
  }
  else
  {
    if (qword_2569304C0 != -1)
      dispatch_once(&qword_2569304C0, &unk_250AD6C28);
    v51 = (id)qword_2569304B8;
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
    {
      sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::VoxelHashingDataGPU::eraseHashEntriesWithEmptyVoxelBlocks()");
      v53 = v58 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      v60 = v53;
      v61 = 1026;
      v62 = 446;
      _os_log_error_impl(&dword_239388000, v51, OS_LOG_TYPE_ERROR, "%s:%{public}d VoxelHashingDataGPU not initialized.", buf, 0x12u);
      if (v58 < 0)
        operator delete(__p[0]);
    }

  }
  return v56 != 0;
}

double sub_2393EDAF4@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  return result;
}

uint64_t sub_2393EDB10()
{
  return 0;
}

uint64_t sub_2393EDB18()
{
  return 0;
}

uint64_t sub_2393EDB20()
{
  return 0;
}

_QWORD *sub_2393EDB2C(_QWORD *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  v4 = a1[4];
  a1[4] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = a1[3];
  a1[3] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return a1;
}

void sub_2393EDBD4(_QWORD *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  v4 = a1[4];
  a1[4] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = a1[3];
  a1[3] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x23B83C4BCLL);
}

uint64_t sub_2393EDC8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char *v6;
  std::__shared_weak_count *v7;
  int32x4_t *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  uint64_t v12;
  host_t v13;
  vm_size_t v14;
  vm_map_t *v15;
  int32x4_t *v16;
  vm_size_t v17;
  vm_map_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float v31;
  simd_float4 v32;
  simd_float4 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  dispatch_queue_t v44;
  void *v45;
  _QWORD *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  float32x4_t v51;
  float32x4_t v52;
  float v53;
  vm_size_t v54;
  float32x2_t v55;
  simd_float4x4 v56;
  __int128 v57;
  __int128 v58;
  float v59;
  int32x2_t v60;
  char v61;
  char v62;
  char v63;
  char v64;
  simd_float4x4 v65;

  if (!sub_2393E5E40(a2))
    return 4;
  if (*(_BYTE *)(a1 + 40))
    return 1;
  v6 = (char *)operator new(0x60uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_250AD6D58;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *((_QWORD *)v6 + 11) = 0;
  v7 = *(std::__shared_weak_count **)(a1 + 16);
  *(_OWORD *)(v6 + 24) = 0u;
  v8 = (int32x4_t *)(v6 + 24);
  *(_QWORD *)(a1 + 8) = v6 + 24;
  *(_QWORD *)(a1 + 16) = v6;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    v8 = *(int32x4_t **)(a1 + 8);
    if (!v8)
      return 1;
    v11 = v8->u8[0];
  }
  else
  {
    v11 = 0;
  }
  v12 = *(unsigned int *)(a2 + 48);
  v4 = 1;
  if (v12 < 2 || v11 || (v12 & 1) != 0)
    return v4;
  v54 = 0;
  v13 = MEMORY[0x23B83C6E4]();
  host_page_size(v13, &v54);
  v14 = (v54 + 16 * v12 - 1) / v54 * v54;
  v8[2].i64[1] = v14;
  v15 = (vm_map_t *)MEMORY[0x24BDAEC58];
  if (vm_allocate(*MEMORY[0x24BDAEC58], (vm_address_t *)&v8[3], v14, 1))
  {
    v16 = v8 + 3;
LABEL_20:
    v16->i64[0] = 0;
    return 1;
  }
  v17 = (v54 + 4104 * v12 - 1) / v54 * v54;
  v8[3].i64[1] = v17;
  v18 = *v15;
  v16 = v8 + 4;
  if (vm_allocate(v18, (vm_address_t *)&v8[4], v17, 1))
    goto LABEL_20;
  v19 = v8[3].i64[0];
  v20 = v12;
  do
  {
    *(_QWORD *)v19 = 0;
    *(_DWORD *)(v19 + 8) = v12;
    *(_DWORD *)(v19 + 12) = -1;
    v19 += 16;
    --v20;
  }
  while (v20);
  v8->i32[2] = v12 >> 1;
  v8->i32[3] = 2;
  v8[2].i32[0] = 1;
  v8[1] = vdupq_n_s32(v12);
  v8->i8[0] = 1;
  v21 = operator new();
  v22 = v21;
  v23 = *(_QWORD *)(a1 + 8);
  v24 = *(std::__shared_weak_count **)(a1 + 16);
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
    *(_BYTE *)(v21 + 8) = 0;
    *(_QWORD *)v21 = &off_250AD5FF8;
    *(_QWORD *)(v21 + 16) = v23;
    *(_QWORD *)(v21 + 24) = v24;
    do
      v27 = __ldxr(v25);
    while (__stxr(v27 + 1, v25));
  }
  else
  {
    *(_BYTE *)(v21 + 8) = 0;
    *(_QWORD *)v21 = &off_250AD5FF8;
    *(_QWORD *)(v21 + 16) = v23;
    *(_QWORD *)(v21 + 24) = 0;
  }
  *(_OWORD *)(v21 + 60) = 0u;
  *(_OWORD *)(v21 + 32) = 0u;
  *(_OWORD *)(v21 + 48) = 0u;
  *(_OWORD *)(v21 + 80) = 0u;
  *(_OWORD *)(v21 + 96) = 0u;
  *(_OWORD *)(v21 + 112) = 0u;
  *(_OWORD *)(v21 + 128) = 0u;
  *(_OWORD *)(v21 + 144) = 0u;
  *(_OWORD *)(v21 + 160) = 0u;
  *(_OWORD *)(v21 + 176) = 0u;
  *(_OWORD *)(v21 + 192) = 0u;
  *(_OWORD *)(v21 + 208) = 0u;
  *(_OWORD *)(v21 + 224) = 0u;
  *(_QWORD *)(v21 + 240) = 0;
  *(_DWORD *)(v21 + 248) = 1065353216;
  *(_QWORD *)(v21 + 256) = 0;
  if (v24)
  {
    v28 = (unint64_t *)&v24->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v30 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v22;
  if (v30)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    v22 = *(_QWORD *)(a1 + 24);
    if (!v22)
      return 1;
  }
  v31 = *(float *)(a2 + 52);
  v54 = *(_QWORD *)a2;
  v55 = vmul_n_f32((float32x2_t)0xC000000041000000, v31);
  *(int32x2_t *)v56.columns[0].f32 = vrev64_s32(*(int32x2_t *)(a2 + 12));
  v32 = *(simd_float4 *)(a2 + 112);
  v33 = *(simd_float4 *)(a2 + 128);
  v56.columns[1] = *(simd_float4 *)(a2 + 32);
  v56.columns[2] = v32;
  v34 = *(_OWORD *)(a2 + 144);
  v35 = *(_OWORD *)(a2 + 160);
  v56.columns[3] = v33;
  v57 = v34;
  v58 = v35;
  v59 = v31;
  v60 = vrev64_s32(*(int32x2_t *)(a2 + 60));
  v61 = *(_BYTE *)(a2 + 68);
  v62 = *(_BYTE *)(a2 + 80);
  v63 = *(_BYTE *)(a2 + 56);
  v64 = *(_BYTE *)(a2 + 177);
  if (!(*(unsigned int (**)(uint64_t, vm_size_t *))(*(_QWORD *)v22 + 16))(v22, &v54))
    return 1;
  v36 = operator new();
  v37 = v36;
  v38 = *(_QWORD *)(a1 + 8);
  v39 = *(std::__shared_weak_count **)(a1 + 16);
  if (v39)
  {
    v40 = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
    *(_BYTE *)(v36 + 8) = 0;
    *(_OWORD *)(v36 + 12) = 0u;
    *(_OWORD *)(v36 + 28) = 0u;
    *(_OWORD *)(v36 + 44) = 0u;
    *(_OWORD *)(v36 + 60) = 0u;
    *(_OWORD *)(v36 + 76) = 0u;
    *(_OWORD *)(v36 + 92) = 0u;
    *(_OWORD *)(v36 + 108) = 0u;
    *(_DWORD *)(v36 + 124) = 0;
    *(_QWORD *)v36 = &off_250AD6AE0;
    *(_QWORD *)(v36 + 128) = v38;
    v42 = (unint64_t *)&v39->__shared_owners_;
    *(_QWORD *)(v36 + 136) = v39;
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
  }
  else
  {
    *(_BYTE *)(v36 + 8) = 0;
    *(_OWORD *)(v36 + 12) = 0u;
    *(_OWORD *)(v36 + 28) = 0u;
    *(_OWORD *)(v36 + 44) = 0u;
    *(_OWORD *)(v36 + 60) = 0u;
    *(_OWORD *)(v36 + 76) = 0u;
    *(_OWORD *)(v36 + 92) = 0u;
    *(_OWORD *)(v36 + 108) = 0u;
    *(_DWORD *)(v36 + 124) = 0;
    *(_QWORD *)v36 = &off_250AD6AE0;
    *(_QWORD *)(v36 + 128) = v38;
    *(_QWORD *)(v36 + 136) = 0;
  }
  *(_OWORD *)(v36 + 144) = 0u;
  *(_OWORD *)(v36 + 160) = 0u;
  *(_OWORD *)(v36 + 176) = xmmword_2393F5520;
  *(_QWORD *)(v36 + 192) = 0;
  *(_BYTE *)(v36 + 200) = 0;
  sub_2393BC090(v36 + 144, 3uLL);
  v44 = dispatch_queue_create("com.apple.coreocmodules.voxelHashing_tripleBuffer_serial_queue", 0);
  v45 = *(void **)(v37 + 192);
  *(_QWORD *)(v37 + 192) = v44;

  *(_OWORD *)(v37 + 208) = 0u;
  *(_OWORD *)(v37 + 224) = 0u;
  *(_OWORD *)(v37 + 240) = xmmword_2393F5520;
  *(_QWORD *)(v37 + 256) = 0;
  *(_BYTE *)(v37 + 264) = 0;
  v46 = operator new(0x48uLL);
  v46[8] = 0;
  *((_OWORD *)v46 + 2) = 0u;
  *((_OWORD *)v46 + 3) = 0u;
  *(_OWORD *)v46 = 0u;
  *((_OWORD *)v46 + 1) = 0u;
  *(_QWORD *)(v37 + 208) = v46;
  *(_QWORD *)(v37 + 216) = v46 + 9;
  *(_QWORD *)(v37 + 224) = v46 + 9;
  *(_QWORD *)(v37 + 256) = dispatch_queue_create("com.apple.coreocmodules.voxelHashing_tripleBuffer_serial_queue", 0);
  *(_DWORD *)(v37 + 272) = 0;
  *(_QWORD *)(v37 + 280) = 0;
  if (v39)
  {
    v47 = (unint64_t *)&v39->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v49 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v37;
  if (v49)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
    v37 = *(_QWORD *)(a1 + 32);
    if (!v37)
      return 1;
  }
  LODWORD(v54) = *(_DWORD *)(a2 + 72);
  HIDWORD(v54) = *(_DWORD *)(a2 + 52);
  v55.i8[0] = *(_BYTE *)(a2 + 56);
  v56 = __invert_f4(*(simd_float4x4 *)(a2 + 112));
  LODWORD(v57) = *(_DWORD *)(a2 + 4);
  DWORD1(v57) = *(_DWORD *)(a2 + 84);
  BYTE8(v57) = *(_BYTE *)(a2 + 80);
  v50 = (*(uint64_t (**)(uint64_t, vm_size_t *))(*(_QWORD *)v37 + 16))(v37, &v54);
  v4 = 1;
  if (v50)
  {
    v53 = *(float *)(a2 + 52);
    v65 = __invert_f4(*(simd_float4x4 *)(a2 + 112));
    v51 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32((float32x4_t)v65.columns[0], v53), (float32x4_t)0, (float32x4_t)v65.columns[1]), (float32x4_t)0, (float32x4_t)v65.columns[2]), (float32x4_t)0, (float32x4_t)v65.columns[3]);
    v65.columns[0] = (simd_float4)vmulq_f32((float32x4_t)v65.columns[0], (float32x4_t)0);
    v52 = vmlaq_f32(vmlaq_f32(vmlaq_n_f32((float32x4_t)v65.columns[0], (float32x4_t)v65.columns[1], v53), (float32x4_t)0, (float32x4_t)v65.columns[2]), (float32x4_t)0, (float32x4_t)v65.columns[3]);
    v65.columns[0] = (simd_float4)vmlaq_f32((float32x4_t)v65.columns[0], (float32x4_t)0, (float32x4_t)v65.columns[1]);
    *(float32x4_t *)(a1 + 96) = v51;
    *(float32x4_t *)(a1 + 112) = v52;
    *(float32x4_t *)(a1 + 128) = vmlaq_f32(vmlaq_n_f32((float32x4_t)v65.columns[0], (float32x4_t)v65.columns[2], v53), (float32x4_t)0, (float32x4_t)v65.columns[3]);
    *(float32x4_t *)(a1 + 144) = vaddq_f32((float32x4_t)v65.columns[3], vmlaq_f32((float32x4_t)v65.columns[0], (float32x4_t)0, (float32x4_t)v65.columns[2]));
    *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 52);
    *(_BYTE *)(a1 + 40) = 1;
    return 0;
  }
  return v4;
}

void sub_2393EE274(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v3;
  std::__shared_weak_count **v4;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 152) = v6;
    operator delete(v6);
  }
  v7 = *v4;
  if (*v4)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2393EE2E4()
{
  return 2;
}

uint64_t sub_2393EE2EC(uint64_t a1)
{
  uint64_t result;

  if (!*(_BYTE *)(a1 + 40)
    || !(*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24)))
  {
    return 1;
  }
  result = 0;
  *(_BYTE *)(a1 + 41) = 0;
  return result;
}

uint64_t sub_2393EE334(uint64_t a1)
{
  uint64_t result;

  if (!*(_BYTE *)(a1 + 40))
    return 1;
  if (*(_BYTE *)(a1 + 41))
    return 0;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
  result = 0;
  *(_BYTE *)(a1 + 41) = 1;
  return result;
}

uint64_t sub_2393EE38C()
{
  return 2;
}

double sub_2393EE394@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  uint64_t v5;
  BOOL v6;
  char *v7;
  char *v8;
  void *v9;
  double result;
  size_t v11;
  char *v12;
  size_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  if (!*(_BYTE *)(a1 + 40))
  {
    result = 0.0;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    return result;
  }
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 32) + 40))(&v21);
  v4 = v21;
  v5 = v22;
  if ((_DWORD)v21)
    v6 = v22 == 0;
  else
    v6 = 1;
  if (v6)
  {
    v12 = 0;
    v7 = 0;
    v8 = 0;
    v9 = *(void **)(a1 + 48);
    if (!v9)
      goto LABEL_13;
  }
  else
  {
    v11 = 48 * v21;
    v12 = (char *)operator new(v11);
    v13 = 48 * ((v11 - 48) / 0x30) + 48;
    bzero(v12, v13);
    v14 = 0;
    do
    {
      *(int32x2_t *)&v15 = vcvt_s32_f32(vrndm_f32(*(float32x2_t *)(v5 + v14)));
      *((_QWORD *)&v15 + 1) = vcvtms_s32_f32(*(float *)(v5 + v14 + 8)) | 0x100000000;
      v16 = *(_OWORD *)(v5 + v14 + 16);
      v17 = *(_OWORD *)(v5 + v14 + 32);
      v18 = &v12[v14];
      *(_OWORD *)v18 = v15;
      *((_OWORD *)v18 + 1) = v16;
      *((_OWORD *)v18 + 2) = v17;
      v14 += 48;
    }
    while (v11 != v14);
    v8 = &v12[48 * v4];
    v7 = &v12[v13];
    v9 = *(void **)(a1 + 48);
    if (!v9)
      goto LABEL_13;
  }
  *(_QWORD *)(a1 + 56) = v9;
  operator delete(v9);
  v4 = v21;
LABEL_13:
  *(_QWORD *)(a1 + 48) = v12;
  *(_QWORD *)(a1 + 56) = v7;
  *(_QWORD *)(a1 + 64) = v8;
  *(_DWORD *)a2 = v23;
  *(_DWORD *)(a2 + 4) = v4;
  *(_QWORD *)(a2 + 8) = v12;
  v19 = v25;
  *(_OWORD *)(a2 + 16) = v24;
  *(_OWORD *)(a2 + 32) = v19;
  result = *(double *)&v26;
  v20 = v27;
  *(_OWORD *)(a2 + 48) = v26;
  *(_OWORD *)(a2 + 64) = v20;
  return result;
}

void sub_2393EE4F8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  unsigned int v7;
  int32x4_t *v8;
  int32x4_t *v9;
  int64x2_t v10;
  uint64_t v11;
  int32x4_t v12;
  uint64_t v13;
  __int16 *v14;
  uint64_t v15;
  uint64_t v16;
  int32x4_t *v17;
  int32x4_t v18;
  __int16 *v19;
  float v20;
  float v21;
  float v22;
  float v23;
  __int128 v24;
  BOOL v25;
  __int128 v26;
  int32x4_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  int32x4_t *v31;
  int32x4_t *v32;
  int32x4_t v33;
  int32x4_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int32x4_t v40;
  int32x4_t v41;
  __int128 v42;
  int64x2_t v43;
  float32x4_t v44;
  float32x4_t v45;
  int32x4_t v46;
  float32x4_t v47;
  int32x4_t v48;
  float32x4_t v49;
  simd_float4x4 v50;
  simd_float4x4 v51;

  if (!*(_BYTE *)(a1 + 40))
  {
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    return;
  }
  v3 = a1;
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)v4)
    v37 = *(_QWORD *)(v4 + 64);
  else
    v37 = 0;
  v5 = *(unsigned int *)(v4 + 4);
  v6 = *(void **)(a1 + 72);
  *(_QWORD *)(a1 + 80) = v6;
  v38 = v5;
  v7 = (_DWORD)v5 << 9;
  if ((_DWORD)v5 << 9)
  {
    v8 = (int32x4_t *)operator new(48 * v7);
    v9 = &v8[3 * v7];
    v10 = vdupq_n_s64((unint64_t)v8);
    if (!(_DWORD)v38)
      goto LABEL_52;
LABEL_10:
    v36 = v3;
    v11 = 0;
    v12.i32[3] = 1060320051;
    do
    {
      v13 = 0;
      v39 = v11;
      v14 = (__int16 *)(v37 + 4104 * v11);
      v12.i32[0] = v14[2048];
      v12.i32[1] = v14[2049];
      v12.i32[2] = v14[2050];
      v12 = vshlq_n_s32(v12, 3uLL);
      v46 = v12;
      do
      {
        v15 = 0;
        v12.i32[0] = v13;
        v40 = v12;
        do
        {
          v16 = 0;
          v17 = (int32x4_t *)v10.i64[0];
          v12 = v40;
          v18 = v40;
          v18.i32[1] = v15;
          v18.i32[2] = v40.i32[2];
          v48 = v18;
          do
          {
            v19 = &v14[256 * v13 + 32 * v15];
            if (LOBYTE(v19[4 * v16 + 2]))
            {
              v20 = *(float *)&v19[4 * v16];
              v21 = fabsf(v20);
              v22 = 1.0 - (float)(v21 / 12.0);
              if (v22 <= 1.0)
                v23 = 1.0 - (float)(v21 / 12.0);
              else
                v23 = 1.0;
              if (v22 >= 0.2)
                *(float *)&v24 = v23;
              else
                *(float *)&v24 = 0.2;
              v25 = v21 <= 12.0;
              v26 = xmmword_2393F55A0;
              if (v25)
              {
                if (v20 >= 0.0)
                {
                  *(_QWORD *)&v26 = 0;
                  *((_QWORD *)&v26 + 1) = v24 | 0x3F33333300000000;
                }
                else
                {
                  DWORD1(v24) = 0;
                  *((_QWORD *)&v24 + 1) = 0x3F33333300000000;
                  v26 = v24;
                }
              }
              v27 = v48;
              v27.i32[2] = v16;
              v12 = vaddq_s32(v27, v46);
              v12.i32[3] = 1;
              if (v8 < v9)
              {
                *v8 = v12;
                v8[1].i64[0] = 0;
                v8[1].i64[1] = 0;
                v8[2] = (int32x4_t)v26;
                v8 += 3;
              }
              else
              {
                v28 = 0xAAAAAAAAAAAAAAABLL * (v8 - v17) + 1;
                if (v28 > 0x555555555555555)
                  abort();
                if (0x5555555555555556 * (v9 - v17) > v28)
                  v28 = 0x5555555555555556 * (v9 - v17);
                if (0xAAAAAAAAAAAAAAABLL * (v9 - v17) >= 0x2AAAAAAAAAAAAAALL)
                  v29 = 0x555555555555555;
                else
                  v29 = v28;
                if (v29)
                {
                  if (v29 > 0x555555555555555)
                    sub_23938C4B8();
                  v41 = v12;
                  v42 = v26;
                  v30 = (char *)operator new(48 * v29);
                  v12 = v41;
                  v26 = v42;
                }
                else
                {
                  v30 = 0;
                }
                v31 = (int32x4_t *)&v30[16 * (v8 - v17)];
                *v31 = v12;
                v31[1].i64[0] = 0;
                v31[1].i64[1] = 0;
                v31[2] = (int32x4_t)v26;
                if (v8 == v17)
                {
                  v34 = (int32x4_t *)&v30[16 * (v8 - v17)];
                }
                else
                {
                  v32 = (int32x4_t *)&v30[16 * (v8 - v17)];
                  do
                  {
                    v12 = v8[-3];
                    v33 = v8[-1];
                    v34 = v32 - 3;
                    v32[-2] = v8[-2];
                    v32[-1] = v33;
                    v32[-3] = v12;
                    v8 -= 3;
                    v32 -= 3;
                  }
                  while (v8 != v17);
                }
                v9 = (int32x4_t *)&v30[48 * v29];
                v8 = v31 + 3;
                v10.i64[0] = (uint64_t)v34;
                if (v17)
                {
                  operator delete(v17);
                  v10.i64[0] = (uint64_t)v34;
                }
                v17 = v34;
              }
              v10.i64[1] = (uint64_t)v8;
            }
            ++v16;
          }
          while (v16 != 8);
          ++v15;
        }
        while (v15 != 8);
        ++v13;
      }
      while (v13 != 8);
      v11 = v39 + 1;
    }
    while (v39 + 1 != v38);
    v3 = v36;
    v6 = *(void **)(v36 + 72);
    goto LABEL_52;
  }
  v9 = 0;
  v8 = 0;
  v10 = 0uLL;
  if ((_DWORD)v5)
    goto LABEL_10;
LABEL_52:
  if (v6)
  {
    *(_QWORD *)(v3 + 80) = v6;
    v43 = v10;
    operator delete(v6);
    v10 = v43;
  }
  *(int64x2_t *)(v3 + 72) = v10;
  *(_QWORD *)(v3 + 88) = v9;
  v44 = *(float32x4_t *)(v3 + 96);
  v45 = *(float32x4_t *)(v3 + 112);
  v47 = *(float32x4_t *)(v3 + 128);
  v49 = *(float32x4_t *)(v3 + 144);
  v50.columns[2].i64[0] = 0;
  v50.columns[0] = (simd_float4)*(unsigned int *)(v3 + 44);
  v50.columns[1].i32[0] = 0;
  v50.columns[1].i64[1] = 0;
  v50.columns[1].i32[1] = v50.columns[0].i32[0];
  v50.columns[2].i64[1] = v50.columns[0].u32[0];
  v50.columns[3] = (simd_float4)xmmword_2393F5320;
  v51 = __invert_f4(v50);
  *(_DWORD *)a2 = *(_DWORD *)(v3 + 44);
  v35 = *(_QWORD *)(v3 + 72);
  *(_DWORD *)(a2 + 4) = -1431655765 * ((unint64_t)(*(_QWORD *)(v3 + 80) - v35) >> 4);
  *(_QWORD *)(a2 + 8) = v35;
  *(float32x4_t *)(a2 + 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v51.columns[0], v44.f32[0]), (float32x4_t)v51.columns[1], *(float32x2_t *)v44.f32, 1), (float32x4_t)v51.columns[2], v44, 2), (float32x4_t)v51.columns[3], v44, 3);
  *(float32x4_t *)(a2 + 32) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v51.columns[0], v45.f32[0]), (float32x4_t)v51.columns[1], *(float32x2_t *)v45.f32, 1), (float32x4_t)v51.columns[2], v45, 2), (float32x4_t)v51.columns[3], v45, 3);
  *(float32x4_t *)(a2 + 48) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v51.columns[0], v47.f32[0]), (float32x4_t)v51.columns[1], *(float32x2_t *)v47.f32, 1), (float32x4_t)v51.columns[2], v47, 2), (float32x4_t)v51.columns[3], v47, 3);
  *(float32x4_t *)(a2 + 64) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v51.columns[0], v49.f32[0]), (float32x4_t)v51.columns[1], *(float32x2_t *)v49.f32, 1), (float32x4_t)v51.columns[2], v49, 2), (float32x4_t)v51.columns[3], v49, 3);
}

double sub_2393EE964@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  if (*(_BYTE *)(a1 + 40))
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 40))(*(_QWORD *)(a1 + 32));
  }
  else
  {
    *(_DWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 0;
    result = 0.0;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
  }
  return result;
}

uint64_t sub_2393EE998()
{
  return 0;
}

_QWORD *sub_2393EE9A0@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  int v3;
  _OWORD *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  _QWORD v8[12];

  v3 = *((unsigned __int8 *)result + 40);
  if (*((_BYTE *)result + 40))
  {
    v4 = result;
    result = (*(_QWORD *(**)(_QWORD *__return_ptr))(*(_QWORD *)result[4] + 40))(v8);
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    v3 = v8[0];
    v5 = v8[1];
    v6 = v4[7];
    *(_OWORD *)(a2 + 80) = v4[6];
    *(_OWORD *)(a2 + 96) = v6;
    v7 = v4[9];
    *(_OWORD *)(a2 + 112) = v4[8];
    *(_OWORD *)(a2 + 128) = v7;
  }
  else
  {
    v5 = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_OWORD *)(a2 + 112) = 0u;
    *(_OWORD *)(a2 + 128) = 0u;
  }
  *(_DWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v5;
  *(_DWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 56) = 0;
  *(_DWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  return result;
}

void sub_2393EEA3C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250AD6D58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2393EEA4C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250AD6D58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83C4BCLL);
}

uint64_t sub_2393EEA7C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = result;
  v2 = *(_QWORD *)(result + 72);
  if (v2)
    result = MEMORY[0x23B83C9E4](*MEMORY[0x24BDAEC58], v2, *(_QWORD *)(result + 64));
  if (*(_QWORD *)(v1 + 88))
    JUMPOUT(0x23B83C9E4);
  return result;
}

BOOL sub_2393EEAD4(float32x4_t *a1, float32x4_t *a2, int *a3, int *a4, int *a5, int *a6)
{
  char v8;
  uint64_t v9;
  char *v10;
  char *m;
  char *v12;
  char v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char *i;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  __int128 v28;
  char *v29;
  char *j;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  char *v37;
  char *k;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  __int128 v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  __int128 v48;
  float32x4_t *v49;
  float32x4_t *v50;
  float32x4_t *v51;
  uint64_t n;
  float32x4_t *ii;
  float32x4_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  float32x4_t *v59;
  float32x4_t v60;
  uint64_t v61;
  int v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  unsigned __int8 v71;
  float32x4_t v72;
  float v73;
  float v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  __int128 v87;
  float32x4_t v88;
  __int128 v91;
  float32x4_t v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  float32x4_t v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  float32x4_t v100;
  float32x4_t v101;
  _QWORD v102[3];

  v8 = 0;
  v9 = 0;
  v10 = 0;
  m = 0;
  v12 = 0;
  v102[1] = *MEMORY[0x24BDAC8D0];
  *a4 = 0x80000000;
  *a6 = 0x80000000;
  *a3 = 0x7FFFFFFF;
  *a5 = 0x7FFFFFFF;
  v102[0] = 0xBF0000003F000000;
  __asm { FMOV            V0.4S, #1.0 }
  v91 = _Q0;
  do
  {
    v18 = v8;
    v19 = v91;
    LODWORD(v19) = *((_DWORD *)v102 + v9);
    v20 = v19;
    DWORD1(v20) = 0.5;
    v21 = v20;
    DWORD2(v21) = 0.5;
    v97 = v19;
    if (m >= v12)
    {
      v23 = (m - v10) >> 4;
      v24 = v23 + 1;
      if ((unint64_t)(v23 + 1) >> 60)
        goto LABEL_111;
      if ((v12 - v10) >> 3 > v24)
        v24 = (v12 - v10) >> 3;
      if ((unint64_t)(v12 - v10) >= 0x7FFFFFFFFFFFFFF0)
        v25 = 0xFFFFFFFFFFFFFFFLL;
      else
        v25 = v24;
      v93 = v20;
      if (v25)
      {
        v87 = v21;
        if (v25 >> 60)
          goto LABEL_112;
        v26 = (char *)operator new(16 * v25);
        v19 = v97;
        v20 = v93;
        v21 = v87;
      }
      else
      {
        v26 = 0;
      }
      v27 = &v26[16 * v23];
      *(_OWORD *)v27 = v21;
      for (i = v27 + 16; m != v10; v27 -= 16)
      {
        v28 = *((_OWORD *)m - 1);
        m -= 16;
        *((_OWORD *)v27 - 1) = v28;
      }
      v12 = &v26[16 * v25];
      if (v10)
      {
        operator delete(v10);
        v20 = v93;
        v19 = v97;
      }
      v10 = v27;
    }
    else
    {
      *(_OWORD *)m = v21;
      i = m + 16;
    }
    DWORD2(v20) = -0.5;
    if (i >= v12)
    {
      v31 = (i - v10) >> 4;
      v32 = v31 + 1;
      if ((unint64_t)(v31 + 1) >> 60)
        goto LABEL_111;
      if ((v12 - v10) >> 3 > v32)
        v32 = (v12 - v10) >> 3;
      if ((unint64_t)(v12 - v10) >= 0x7FFFFFFFFFFFFFF0)
        v33 = 0xFFFFFFFFFFFFFFFLL;
      else
        v33 = v32;
      if (v33)
      {
        v94 = v20;
        if (v33 >> 60)
          goto LABEL_112;
        v34 = (char *)operator new(16 * v33);
        v19 = v97;
        v20 = v94;
      }
      else
      {
        v34 = 0;
      }
      v29 = &v34[16 * v31];
      *(_OWORD *)v29 = v20;
      for (j = v29 + 16; i != v10; v29 -= 16)
      {
        v35 = *((_OWORD *)i - 1);
        i -= 16;
        *((_OWORD *)v29 - 1) = v35;
      }
      v12 = &v34[16 * v33];
      if (v10)
      {
        operator delete(v10);
        v19 = v97;
      }
    }
    else
    {
      *(_OWORD *)i = v20;
      v29 = v10;
      j = i + 16;
    }
    DWORD1(v19) = -0.5;
    v36 = v19;
    DWORD2(v36) = 0.5;
    if (j >= v12)
    {
      v39 = (j - v29) >> 4;
      v40 = v39 + 1;
      if ((unint64_t)(v39 + 1) >> 60)
        goto LABEL_111;
      if ((v12 - v29) >> 3 > v40)
        v40 = (v12 - v29) >> 3;
      if ((unint64_t)(v12 - v29) >= 0x7FFFFFFFFFFFFFF0)
        v41 = 0xFFFFFFFFFFFFFFFLL;
      else
        v41 = v40;
      v98 = v19;
      if (v41)
      {
        v95 = v36;
        if (v41 >> 60)
          goto LABEL_112;
        v42 = (char *)operator new(16 * v41);
        v19 = v98;
        v36 = v95;
      }
      else
      {
        v42 = 0;
      }
      v37 = &v42[16 * v39];
      *(_OWORD *)v37 = v36;
      for (k = v37 + 16; j != v29; v37 -= 16)
      {
        v43 = *((_OWORD *)j - 1);
        j -= 16;
        *((_OWORD *)v37 - 1) = v43;
      }
      v12 = &v42[16 * v41];
      if (v29)
      {
        operator delete(v29);
        v19 = v98;
      }
    }
    else
    {
      *(_OWORD *)j = v36;
      v37 = v29;
      k = j + 16;
    }
    DWORD2(v19) = -0.5;
    if (k < v12)
    {
      *(_OWORD *)k = v19;
      v10 = v37;
      m = k + 16;
    }
    else
    {
      v44 = (k - v37) >> 4;
      v45 = v44 + 1;
      if ((unint64_t)(v44 + 1) >> 60)
LABEL_111:
        abort();
      if ((v12 - v37) >> 3 > v45)
        v45 = (v12 - v37) >> 3;
      if ((unint64_t)(v12 - v37) >= 0x7FFFFFFFFFFFFFF0)
        v46 = 0xFFFFFFFFFFFFFFFLL;
      else
        v46 = v45;
      if (v46)
      {
        v99 = v19;
        if (v46 >> 60)
LABEL_112:
          sub_23938C4B8();
        v47 = (char *)operator new(16 * v46);
        v19 = v99;
      }
      else
      {
        v47 = 0;
      }
      v10 = &v47[16 * v44];
      *(_OWORD *)v10 = v19;
      for (m = v10 + 16; k != v37; v10 -= 16)
      {
        v48 = *((_OWORD *)k - 1);
        k -= 16;
        *((_OWORD *)v10 - 1) = v48;
      }
      v12 = &v47[16 * v46];
      if (v37)
        operator delete(v37);
    }
    v8 = 1;
    v9 = 1;
  }
  while ((v18 & 1) == 0);
  v49 = 0;
  v50 = 0;
  v51 = 0;
  for (n = 0; n != 8; ++n)
  {
    v54 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a2, COERCE_FLOAT(*(_OWORD *)&v10[16 * n])), a2[1], *(float32x2_t *)&v10[16 * n], 1), a2[2], *(float32x4_t *)&v10[16 * n], 2), a2[3], *(float32x4_t *)&v10[16 * n], 3);
    if (v51 < v50)
    {
      *v51 = v54;
      ii = v51 + 1;
    }
    else
    {
      v55 = v51 - v49;
      v56 = v55 + 1;
      if ((unint64_t)(v55 + 1) >> 60)
        goto LABEL_111;
      if (((char *)v50 - (char *)v49) >> 3 > v56)
        v56 = ((char *)v50 - (char *)v49) >> 3;
      if ((unint64_t)((char *)v50 - (char *)v49) >= 0x7FFFFFFFFFFFFFF0)
        v57 = 0xFFFFFFFFFFFFFFFLL;
      else
        v57 = v56;
      if (v57)
      {
        v100 = v54;
        if (v57 >> 60)
          goto LABEL_112;
        v58 = (char *)operator new(16 * v57);
        v54 = v100;
      }
      else
      {
        v58 = 0;
      }
      v59 = (float32x4_t *)&v58[16 * v55];
      *v59 = v54;
      for (ii = v59 + 1; v51 != v49; --v59)
      {
        v60 = v51[-1];
        --v51;
        v59[-1] = v60;
      }
      v50 = (float32x4_t *)&v58[16 * v57];
      if (v49)
        operator delete(v49);
      v49 = v59;
    }
    v51 = ii;
  }
  if (v10)
    operator delete(v10);
  v61 = 0;
  v62 = 0;
  do
  {
    v63 = a1[12];
    v64 = a1[13];
    v66 = a1[14];
    v65 = a1[15];
    v68 = a1[2];
    v67 = a1[3];
    v69 = a1[4];
    v70 = v49[v61];
    v71 = atomic_load((unsigned __int8 *)&qword_256930510);
    if ((v71 & 1) == 0)
    {
      v101 = a1[3];
      v92 = a1[2];
      v96 = a1[4];
      v88 = v49[v61];
      v83 = a1[14];
      v84 = a1[15];
      v81 = a1[12];
      v82 = a1[13];
      v79 = __cxa_guard_acquire(&qword_256930510);
      v63 = v81;
      v64 = v82;
      v66 = v83;
      v65 = v84;
      v70 = v88;
      v68 = v92;
      v69 = v96;
      v67 = v101;
      if (v79)
      {
        *(simd_float4x4 *)zmmword_2569304D0 = __invert_f4(*(simd_float4x4 *)zmmword_2393FA190);
        __cxa_guard_release(&qword_256930510);
        v63 = v81;
        v64 = v82;
        v66 = v83;
        v65 = v84;
        v70 = v88;
        v68 = v92;
        v69 = v96;
        v67 = v101;
      }
    }
    v72 = vaddq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)zmmword_2569304D0, v65.f32[0]), *(float32x4_t *)&zmmword_2569304D0[16], *(float32x2_t *)v65.f32, 1), *(float32x4_t *)&zmmword_2569304D0[32], v65, 2), *(float32x4_t *)&zmmword_2569304D0[48], v65, 3), vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(
                        vmulq_n_f32(*(float32x4_t *)zmmword_2569304D0, v63.f32[0]),
                        *(float32x4_t *)&zmmword_2569304D0[16],
                        *(float32x2_t *)v63.f32,
                        1),
                      *(float32x4_t *)&zmmword_2569304D0[32],
                      v63,
                      2),
                    *(float32x4_t *)&zmmword_2569304D0[48],
                    v63,
                    3),
                  v70.f32[0]),
                vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)zmmword_2569304D0, v64.f32[0]), *(float32x4_t *)&zmmword_2569304D0[16], *(float32x2_t *)v64.f32, 1), *(float32x4_t *)&zmmword_2569304D0[32], v64, 2), *(float32x4_t *)&zmmword_2569304D0[48], v64, 3), *(float32x2_t *)v70.f32, 1), vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)zmmword_2569304D0, v66.f32[0]), *(float32x4_t *)&zmmword_2569304D0[16],
                    *(float32x2_t *)v66.f32,
                    1),
                  *(float32x4_t *)&zmmword_2569304D0[32],
                  v66,
                  2),
                *(float32x4_t *)&zmmword_2569304D0[48],
                v66,
                3),
              v70,
              2));
    v73 = fmaxf(fabsf(v72.f32[2]), 0.00000011921);
    if (v72.f32[2] >= 0.0)
      v74 = v73;
    else
      v74 = -v73;
    v72.i64[0] = vaddq_f32(v69, vmlaq_n_f32(vmulq_n_f32(v68, v72.f32[0] / v74), v67, v72.f32[1] / v74)).u64[0];
    if (v72.f32[2] < 0.0)
      ++v62;
    v75 = (int)v72.f32[0];
    v76 = (int)v72.f32[1];
    v77 = *a3;
    if (*a3 >= (int)v72.f32[1])
      v77 = (int)v72.f32[1];
    *a3 = v77;
    if (*a4 > v76)
      v76 = *a4;
    *a4 = v76;
    v78 = *a5;
    if (*a5 >= v75)
      v78 = (int)v72.f32[0];
    *a5 = v78;
    if (*a6 > v75)
      v75 = *a6;
    *a6 = v75;
    ++v61;
  }
  while (v61 != 8);
  if (v49)
    operator delete(v49);
  return v62 != 8;
}

void sub_2393EF15C(uint64_t a1)
{
  sub_2393F2914(a1);
  JUMPOUT(0x23B83C4BCLL);
}

uint64_t sub_2393EF180(uint64_t a1, uint64_t a2)
{
  float v2;
  BOOL v3;
  __int128 *v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  uint32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  uint32x4_t v19;
  float32x4_t v20;
  NSObject *v21;
  uint64_t v22;
  _BYTE *v24;
  float32x2_t v25;
  float32x2_t v26;
  uint32x2_t v27;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unsigned int v33;
  unsigned int v34;
  const char *v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  id v39;
  void *v40;
  const char *v41;
  void *v42;
  id v43;
  const char *v44;
  uint64_t v45;
  id v46;
  const char *v47;
  uint64_t v48;
  NSObject *v49;
  _BYTE *v50;
  _BYTE *v51;
  const char *v52;
  _BYTE *v53;
  _BYTE *v54;
  _BYTE *v55;
  _BYTE *v56;
  _BYTE *v57;
  _BYTE *v58;
  _BYTE *v59;
  _BYTE __p[28];
  char v61;
  _BYTE buf[12];
  __int16 v63;
  int v64;
  char v65;
  uint8_t v66[4];
  _BYTE *v67;
  __int16 v68;
  int v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  v2 = *(float *)(a2 + 4);
  if (*(_DWORD *)a2)
    v3 = v2 < 0.0001;
  else
    v3 = 1;
  if (v3 || *(_BYTE *)(a2 + 8) == 0)
    goto LABEL_11;
  v7 = *(float32x4_t *)(a2 + 16);
  v8 = *(float32x4_t *)(a2 + 32);
  v6 = (__int128 *)(a2 + 16);
  v9 = *(float32x4_t *)(a2 + 48);
  v10 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 16);
  v11 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 32);
  v12 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
  v13 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v12, vabdq_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v7, *(float32x2_t *)v7.f32, 1), v8, *(float32x2_t *)v8.f32, 1), v9, *(float32x2_t *)v9.f32, 1), v10)), (int8x16_t)vcgeq_f32(v12, vabdq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v7, v7.f32[0]), v8, v8.f32[0]),
                                         v9,
                                         v9.f32[0]),
                                       *MEMORY[0x24BDAEDF8]))),
                      (int8x16_t)vcgeq_f32(v12, vabdq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v7, v7, 2), v8, v8, 2), v9, v9, 2), v11)));
  v13.i32[3] = v13.i32[2];
  if ((vminvq_u32(v13) & 0x80000000) == 0)
    goto LABEL_11;
  v14 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v8, 2);
  v15 = (float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)v7, (int32x4_t)v9), (int32x4_t)v14);
  v16 = (float32x4_t)vtrn2q_s32((int32x4_t)v7, (int32x4_t)v8);
  v16.i32[2] = HIDWORD(*(_QWORD *)(a2 + 48));
  v17 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)v7, (int32x4_t)v9), (int32x4_t)v8);
  v18 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
  v19 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v18, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v17, v8.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 1), v16), v14, v15), v10)), (int8x16_t)vcgeq_f32(v18, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v17, v7.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1),
                                           v16),
                                         (float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2),
                                         v15),
                                       *MEMORY[0x24BDAEDF8]))),
                      (int8x16_t)vcgeq_f32(v18, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v17, v9.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1), v16), (float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), v15), v11)));
  v19.i32[3] = v19.i32[2];
  if ((vminvq_u32(v19) & 0x80000000) == 0)
    goto LABEL_11;
  v20 = vmulq_f32(v7, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v9, (int8x16_t)v9, 0xCuLL), (int8x16_t)v9, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v8, (int32x4_t)v8), (int8x16_t)v8, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v9, (int32x4_t)v9), (int8x16_t)v9, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v8, (int8x16_t)v8, 0xCuLL), (int8x16_t)v8, 8uLL)));
  if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 2), vaddq_f32(v20, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 1))).f32[0]+ -1.0) <= 0.000011&& (v25 = vabs_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v7, (int8x16_t)v7, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL))), v26 = (float32x2_t)vdup_n_s32(0x38D1B717u), v27 = (uint32x2_t)vand_s8((int8x8_t)vcge_f32(v26, vabs_f32(vadd_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(
                                                                                    *(int8x16_t *)(a2 + 64),
                                                                                    *(int8x16_t *)(a2 + 64),
                                                                                    8uLL)),
                                            (float32x2_t)0xBF80000080000000))),
                            (int8x8_t)vcge_f32(v26, v25)),
        (vpmin_u32(v27, v27).u32[0] & 0x80000000) != 0)
    && *(_DWORD *)(a2 + 80) != 2
    && *(float *)(a2 + 84) >= 0.0)
  {
    if (*(_QWORD *)(a1 + 144))
    {
      v29 = *(_QWORD *)(a1 + 128);
      if (v29 && *(_BYTE *)(v29 + 8))
      {
        if (*(_BYTE *)(a1 + 8))
        {
          if (qword_256930520 != -1)
            dispatch_once(&qword_256930520, &unk_250AD6E20);
          v21 = (id)qword_256930518;
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
            goto LABEL_14;
          sub_2393C4DD0(__p, "virtual BOOL oc::voxel_hashing::VoxelSurfaceSamplerGPU::init(const InitConfig &)");
          v57 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v57;
          v63 = 1026;
          v64 = 95;
          _os_log_error_impl(&dword_239388000, v21, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to initialize VoxelSurfaceSamplerGPU - already initialized.", buf, 0x12u);
          if ((__p[23] & 0x80000000) == 0)
            goto LABEL_14;
          goto LABEL_71;
        }
        *(float *)(a1 + 60) = v2;
        v30 = *v6;
        v31 = v6[1];
        v32 = v6[3];
        *(_OWORD *)(a1 + 96) = v6[2];
        *(_OWORD *)(a1 + 112) = v32;
        *(_OWORD *)(a1 + 64) = v30;
        *(_OWORD *)(a1 + 80) = v31;
        sub_2393EC230((uint64_t)__p, v29);
        if (v61)
        {
          *(_OWORD *)(a1 + 12) = *(_OWORD *)__p;
          *(_OWORD *)(a1 + 24) = *(_OWORD *)&__p[12];
          *(_DWORD *)(a1 + 40) = sub_2393EBE14(*(_QWORD *)(a1 + 128));
          *(_DWORD *)(a1 + 44) = sub_2393EBF3C(*(_QWORD *)(a1 + 128));
          LOBYTE(v33) = *(_BYTE *)(a2 + 8);
          *(float *)(a1 + 48) = (float)v33;
          v34 = *(_DWORD *)(a1 + 28);
          if (v34 >= 0xA)
            v34 = 10;
          *(_DWORD *)(a1 + 52) = v34;
          *(_DWORD *)(a1 + 56) = 1024;
          *(_DWORD *)(a1 + 288) = *(_DWORD *)(a2 + 80);
          *(_BYTE *)(a1 + 292) = *(_BYTE *)(a2 + 88);
          if (**(_QWORD **)(a1 + 152) == *(_QWORD *)(*(_QWORD *)(a1 + 152) + 8))
          {
            sub_2393F1628();
            v49 = objc_claimAutoreleasedReturnValue();
            if (!os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
              goto LABEL_99;
            sub_2393C4DD0(buf, "virtual BOOL oc::voxel_hashing::VoxelSurfaceSamplerGPU::init(const InitConfig &)");
            if (v65 >= 0)
              v55 = buf;
            else
              v55 = *(_BYTE **)buf;
            *(_DWORD *)v66 = 136315394;
            v67 = v55;
            v68 = 1026;
            v69 = 126;
            v52 = "%s:%{public}d Failed to initialize VoxelSurfaceSamplerGPU - hashtable extents is empty.";
          }
          else if ((sub_2393F1668(a1) & 1) != 0)
          {
            if ((sub_2393F21FC(a1) & 1) != 0)
            {
              sub_2393F25BC(*(void **)(a1 + 208), v35, v36);
              if (*(_DWORD *)(a1 + 288) == 1)
              {
                *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 84);
                sub_2393F2630(a1, v37, v38);
              }
              v39 = objc_alloc_init(MEMORY[0x24BDDD508]);
              v40 = *(void **)(a1 + 192);
              *(_QWORD *)(a1 + 192) = v39;

              v42 = *(void **)(a1 + 192);
              if (v42)
              {
                objc_msgSend_setErrorOptions_(v42, v41, 1);
                sub_2393EC4AC(*(_QWORD *)(a1 + 128));
                v43 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
                *(_QWORD *)(a1 + 240) = objc_msgSend_contents(v43, v44, v45);

                if (*(_BYTE *)(a1 + 292))
                {
                  sub_2393ECE28(*(_QWORD *)(a1 + 128));
                  v46 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
                  *(_QWORD *)(a1 + 248) = objc_msgSend_contents(v46, v47, v48);

                }
                sub_2393D9FE0((uint64_t *)buf);
                sub_2393DA120((uint64_t *)(a1 + 280), (uint64_t *)buf);
                sub_2393DA17C((uint64_t *)buf);
                v22 = 1;
                *(_BYTE *)(a1 + 8) = 1;
                sub_2393F1628();
                v49 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
                {
                  sub_2393C4DD0(buf, "virtual BOOL oc::voxel_hashing::VoxelSurfaceSamplerGPU::init(const InitConfig &)");
                  v50 = v65 >= 0 ? buf : *(_BYTE **)buf;
                  *(_DWORD *)v66 = 136315394;
                  v67 = v50;
                  v68 = 1026;
                  v69 = 170;
                  _os_log_debug_impl(&dword_239388000, v49, OS_LOG_TYPE_DEBUG, "%s:%{public}d Successfully initialized VoxelSurfaceSamplerGPU.", v66, 0x12u);
                  if (v65 < 0)
                    operator delete(*(void **)buf);
                }
                goto LABEL_100;
              }
              sub_2393F1628();
              v49 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
              {
                sub_2393C4DD0(buf, "virtual BOOL oc::voxel_hashing::VoxelSurfaceSamplerGPU::init(const InitConfig &)");
                if (v65 >= 0)
                  v59 = buf;
                else
                  v59 = *(_BYTE **)buf;
                *(_DWORD *)v66 = 136315394;
                v67 = v59;
                v68 = 1026;
                v69 = 152;
                v52 = "%s:%{public}d Failed to initialize VoxelSurfaceSamplerGPU - failed to command buffer descriptor.";
                goto LABEL_97;
              }
LABEL_99:
              v22 = 0;
LABEL_100:

              return v22;
            }
            sub_2393F1628();
            v49 = objc_claimAutoreleasedReturnValue();
            if (!os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
              goto LABEL_99;
            sub_2393C4DD0(buf, "virtual BOOL oc::voxel_hashing::VoxelSurfaceSamplerGPU::init(const InitConfig &)");
            if (v65 >= 0)
              v58 = buf;
            else
              v58 = *(_BYTE **)buf;
            *(_DWORD *)v66 = 136315394;
            v67 = v58;
            v68 = 1026;
            v69 = 138;
            v52 = "%s:%{public}d Failed to initialize VoxelSurfaceSamplerGPU - failed to create buffers.";
          }
          else
          {
            sub_2393F1628();
            v49 = objc_claimAutoreleasedReturnValue();
            if (!os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
              goto LABEL_99;
            sub_2393C4DD0(buf, "virtual BOOL oc::voxel_hashing::VoxelSurfaceSamplerGPU::init(const InitConfig &)");
            if (v65 >= 0)
              v56 = buf;
            else
              v56 = *(_BYTE **)buf;
            *(_DWORD *)v66 = 136315394;
            v67 = v56;
            v68 = 1026;
            v69 = 132;
            v52 = "%s:%{public}d Failed to initialize VoxelSurfaceSamplerGPU - failed to create pipeline states.";
          }
        }
        else
        {
          sub_2393F1628();
          v49 = objc_claimAutoreleasedReturnValue();
          if (!os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
            goto LABEL_99;
          sub_2393C4DD0(buf, "virtual BOOL oc::voxel_hashing::VoxelSurfaceSamplerGPU::init(const InitConfig &)");
          if (v65 >= 0)
            v51 = buf;
          else
            v51 = *(_BYTE **)buf;
          *(_DWORD *)v66 = 136315394;
          v67 = v51;
          v68 = 1026;
          v69 = 107;
          v52 = "%s:%{public}d Failed to initialize VoxelSurfaceSamplerGPU - failed to get hash table parameters.";
        }
LABEL_97:
        _os_log_error_impl(&dword_239388000, v49, OS_LOG_TYPE_ERROR, v52, v66, 0x12u);
        if (v65 < 0)
          operator delete(*(void **)buf);
        goto LABEL_99;
      }
      if (qword_256930520 != -1)
        dispatch_once(&qword_256930520, &unk_250AD6E20);
      v21 = (id)qword_256930518;
      if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        goto LABEL_14;
      sub_2393C4DD0(__p, "virtual BOOL oc::voxel_hashing::VoxelSurfaceSamplerGPU::init(const InitConfig &)");
      v53 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v53;
      v63 = 1026;
      v64 = 89;
      _os_log_error_impl(&dword_239388000, v21, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to initialize VoxelSurfaceSamplerGPU - invalid voxelHashingData or it's not initialized.", buf, 0x12u);
      if ((__p[23] & 0x80000000) == 0)
        goto LABEL_14;
    }
    else
    {
      if (qword_256930520 != -1)
        dispatch_once(&qword_256930520, &unk_250AD6E20);
      v21 = (id)qword_256930518;
      if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        goto LABEL_14;
      sub_2393C4DD0(__p, "virtual BOOL oc::voxel_hashing::VoxelSurfaceSamplerGPU::init(const InitConfig &)");
      v54 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v54;
      v63 = 1026;
      v64 = 82;
      _os_log_error_impl(&dword_239388000, v21, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to initialize VoxelSurfaceSamplerGPU - failed to get MTLDeviceContext.", buf, 0x12u);
      if ((__p[23] & 0x80000000) == 0)
        goto LABEL_14;
    }
  }
  else
  {
LABEL_11:
    if (qword_256930520 != -1)
      dispatch_once(&qword_256930520, &unk_250AD6E20);
    v21 = (id)qword_256930518;
    if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      goto LABEL_14;
    sub_2393C4DD0(__p, "virtual BOOL oc::voxel_hashing::VoxelSurfaceSamplerGPU::init(const InitConfig &)");
    v24 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v24;
    v63 = 1026;
    v64 = 76;
    _os_log_error_impl(&dword_239388000, v21, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to initialize VoxelSurfaceSamplerGPU - invalid init config.", buf, 0x12u);
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_14;
  }
LABEL_71:
  operator delete(*(void **)__p);
LABEL_14:

  return 0;
}

void sub_2393EFB68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2393EFB80(uint64_t a1)
{
  unsigned __int8 v1;
  int v3;
  NSObject *v4;
  id v5;
  const char *v6;
  uint64_t v7;
  int v8;
  const char *v9;
  NSObject *v10;
  NSObject *v11;
  id v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  const char *v20;
  const char *v21;
  const char *v22;
  void *v23;
  const char *v24;
  void *v25;
  const char *v26;
  void *v27;
  const char *v28;
  void *v29;
  const char *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  const char *v35;
  uint64_t v36;
  NSObject *v37;
  id v38;
  const char *v39;
  uint64_t v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  void *v44;
  const char *v45;
  const char *v46;
  const char *v47;
  const char *v48;
  const char *v49;
  void *v50;
  const char *v51;
  void *v52;
  const char *v53;
  const char *v54;
  void *v55;
  const char *v56;
  const char *v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  const char *v62;
  uint64_t v63;
  NSObject *v64;
  id v65;
  const char *v66;
  uint64_t v67;
  const char *v68;
  uint64_t v69;
  void *v70;
  const char *v71;
  const char *v72;
  const char *v73;
  const char *v74;
  void *v75;
  const char *v76;
  void *v77;
  const char *v78;
  const char *v79;
  const char *v80;
  const char *v81;
  void *v82;
  const char *v83;
  void *v84;
  const char *v85;
  const char *v86;
  const char *v87;
  uint64_t v88;
  const char *v89;
  NSObject *v90;
  id v91;
  const char *v92;
  uint64_t v93;
  int v94;
  const char *v95;
  uint64_t v96;
  void *v97;
  const char *v98;
  const char *v99;
  const char *v100;
  const char *v101;
  const char *v102;
  const char *v103;
  void *v104;
  const char *v105;
  void *v106;
  const char *v107;
  void *v108;
  const char *v109;
  void *v110;
  const char *v111;
  const char *v112;
  uint64_t v113;
  uint64_t v114;
  const char *v115;
  const char *v116;
  uint64_t v117;
  uint64_t v118;
  const char *v119;
  const char *v120;
  uint64_t v121;
  unsigned __int8 v122;
  const char *v123;
  uint64_t v124;
  void *v125;
  const char *v126;
  void *p_p;
  NSObject *v128;
  void **v129;
  _QWORD v130[5];
  _QWORD v131[5];
  void *__p;
  int64x2_t v133;
  uint64_t v134;
  _BYTE buf[24];
  uint64_t v136;

  v136 = *MEMORY[0x24BDAC8D0];
  v1 = atomic_load((unsigned __int8 *)(a1 + 228));
  if ((v1 & 1) != 0 || (v3 = atomic_load((unsigned int *)(a1 + 232)), v3 >= 1))
  {
    if (qword_256930520 != -1)
      dispatch_once(&qword_256930520, &unk_250AD6E20);
    v4 = (id)qword_256930518;
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      goto LABEL_6;
    sub_2393C4DD0(&__p, "virtual void oc::voxel_hashing::VoxelSurfaceSamplerGPU::sampleSurfacePoints()");
    if (v133.i8[15] >= 0)
      p_p = &__p;
    else
      p_p = __p;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = p_p;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = 187;
    v126 = "%s:%{public}d Skipping sampling task because sampling has been stopped.";
LABEL_24:
    _os_log_debug_impl(&dword_239388000, v4, OS_LOG_TYPE_DEBUG, v126, buf, 0x12u);
    if (v133.i8[15] < 0)
      operator delete(__p);
    goto LABEL_6;
  }
  sub_2393ECCF8(*(_QWORD *)(a1 + 128));
  v5 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v8 = *(_DWORD *)objc_msgSend_contents(v5, v6, v7);

  if (v8)
  {
    kdebug_trace();
    objc_msgSend_commandBufferWithDescriptor_(*(void **)(*(_QWORD *)(a1 + 144) + 8), v9, *(_QWORD *)(a1 + 192));
    v10 = objc_claimAutoreleasedReturnValue();
    v4 = v10;
    if (v10)
    {
      v11 = v10;
      sub_2393ECCF8(*(_QWORD *)(a1 + 128));
      v12 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v15 = (void *)*(unsigned int *)objc_msgSend_contents(v12, v13, v14);
      objc_msgSend_computeCommandEncoder(v11, v16, v17);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setLabel_(v18, v19, (uint64_t)CFSTR("ResetMeshDataInUpdatedVoxelBlocks Encoder"));
      objc_msgSend_setComputePipelineState_(v18, v20, *(_QWORD *)(a1 + 160));
      objc_msgSend_setBytes_length_atIndex_(v18, v21, a1 + 12, 48, 0);
      objc_msgSend_setBuffer_offset_atIndex_(v18, v22, (uint64_t)v12, 0, 1);
      sub_2393ECBC8(*(_QWORD *)(a1 + 128));
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setBuffer_offset_atIndex_(v18, v24, (uint64_t)v23, 0, 2);

      sub_2393EC380(*(_QWORD *)(a1 + 128));
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setBuffer_offset_atIndex_(v18, v26, (uint64_t)v25, 0, 3);

      sub_2393EC4AC(*(_QWORD *)(a1 + 128));
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setBuffer_offset_atIndex_(v18, v28, (uint64_t)v27, 0, 4);

      sub_2393ECE28(*(_QWORD *)(a1 + 128));
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setBuffer_offset_atIndex_(v18, v30, (uint64_t)v29, 0, 5);

      v33 = objc_msgSend_maxTotalThreadsPerThreadgroup(*(void **)(a1 + 160), v31, v32);
      __p = v15;
      v133 = vdupq_n_s64(1uLL);
      *(_QWORD *)buf = v33;
      *(int64x2_t *)&buf[8] = v133;
      objc_msgSend_dispatchThreads_threadsPerThreadgroup_(v18, v34, (uint64_t)&__p, buf);
      objc_msgSend_endEncoding(v18, v35, v36);

      v37 = v11;
      v134 = sub_2393ED08C(*(_QWORD *)(a1 + 128));
      sub_2393ECCF8(*(_QWORD *)(a1 + 128));
      v38 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v41 = (void *)*(unsigned int *)objc_msgSend_contents(v38, v39, v40);
      objc_msgSend_computeCommandEncoder(v37, v42, v43);
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setLabel_(v44, v45, (uint64_t)CFSTR("GetVoxelBlocksSurroundingUpdatedVoxelBlocks Encoder"));
      objc_msgSend_setComputePipelineState_(v44, v46, *(_QWORD *)(a1 + 168));
      objc_msgSend_setBytes_length_atIndex_(v44, v47, a1 + 12, 48, 0);
      objc_msgSend_setBytes_length_atIndex_(v44, v48, **(_QWORD **)(a1 + 152), *(_QWORD *)(*(_QWORD *)(a1 + 152) + 8) - **(_QWORD **)(a1 + 152), 1);
      objc_msgSend_setBytes_length_atIndex_(v44, v49, (uint64_t)&v134, 4, 2);
      sub_2393EC380(*(_QWORD *)(a1 + 128));
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setBuffer_offset_atIndex_(v44, v51, (uint64_t)v50, 0, 3);

      sub_2393EC4AC(*(_QWORD *)(a1 + 128));
      v52 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setBuffer_offset_atIndex_(v44, v53, (uint64_t)v52, 0, 4);

      objc_msgSend_setBuffer_offset_atIndex_(v44, v54, (uint64_t)v38, 0, 5);
      sub_2393ECBC8(*(_QWORD *)(a1 + 128));
      v55 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setBuffer_offset_atIndex_(v44, v56, (uint64_t)v55, 0, 6);

      objc_msgSend_setBuffer_offset_atIndex_(v44, v57, *(_QWORD *)(a1 + 200), 0, 7);
      v60 = objc_msgSend_maxTotalThreadsPerThreadgroup(*(void **)(a1 + 168), v58, v59);
      __p = v41;
      v133 = vdupq_n_s64(1uLL);
      *(_QWORD *)buf = v60;
      *(int64x2_t *)&buf[8] = v133;
      objc_msgSend_dispatchThreads_threadsPerThreadgroup_(v44, v61, (uint64_t)&__p, buf);
      objc_msgSend_endEncoding(v44, v62, v63);

      v64 = v37;
      sub_2393ECCF8(*(_QWORD *)(a1 + 128));
      v65 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      LODWORD(v41) = *(_DWORD *)objc_msgSend_contents(v65, v66, v67);
      objc_msgSend_computeCommandEncoder(v64, v68, v69);
      v70 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setLabel_(v70, v71, (uint64_t)CFSTR("ComputeMeshVerticesInUpdatedVoxelBlocks Encoder"));
      objc_msgSend_setComputePipelineState_(v70, v72, *(_QWORD *)(a1 + 176));
      objc_msgSend_setBytes_length_atIndex_(v70, v73, a1 + 12, 48, 0);
      objc_msgSend_setBuffer_offset_atIndex_(v70, v74, (uint64_t)v65, 0, 1);
      sub_2393ECBC8(*(_QWORD *)(a1 + 128));
      v75 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setBuffer_offset_atIndex_(v70, v76, (uint64_t)v75, 0, 2);

      sub_2393EC380(*(_QWORD *)(a1 + 128));
      v77 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setBuffer_offset_atIndex_(v70, v78, (uint64_t)v77, 0, 3);

      objc_msgSend_setBuffer_offset_atIndex_(v70, v79, *(_QWORD *)(a1 + 200), 0, 4);
      objc_msgSend_setBuffer_offset_atIndex_(v70, v80, *(_QWORD *)(a1 + 216), 0, 5);
      objc_msgSend_setBuffer_offset_atIndex_(v70, v81, *(_QWORD *)(a1 + 208), 0, 6);
      sub_2393EC4AC(*(_QWORD *)(a1 + 128));
      v82 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setBuffer_offset_atIndex_(v70, v83, (uint64_t)v82, 0, 7);

      sub_2393ECE28(*(_QWORD *)(a1 + 128));
      v84 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setBuffer_offset_atIndex_(v70, v85, (uint64_t)v84, 0, 8);

      __p = (void *)(729 * (_DWORD)v41);
      v133 = vdupq_n_s64(1uLL);
      *(_QWORD *)&buf[16] = 1;
      *(_OWORD *)buf = xmmword_2393F9CA0;
      objc_msgSend_dispatchThreads_threadsPerThreadgroup_(v70, v86, (uint64_t)&__p, buf);
      objc_msgSend_endEncoding(v70, v87, v88);

      if (*(_BYTE *)(a1 + 292))
      {
        v90 = v64;
        sub_2393ECCF8(*(_QWORD *)(a1 + 128));
        v91 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v94 = *(_DWORD *)objc_msgSend_contents(v91, v92, v93);
        v134 = sub_2393ED08C(*(_QWORD *)(a1 + 128));
        objc_msgSend_computeCommandEncoder(v90, v95, v96);
        v97 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setLabel_(v97, v98, (uint64_t)CFSTR("GenerateMeshFacesInUpdatedVoxelBlocks Encoder"));
        objc_msgSend_setComputePipelineState_(v97, v99, *(_QWORD *)(a1 + 184));
        objc_msgSend_setBytes_length_atIndex_(v97, v100, a1 + 12, 48, 0);
        objc_msgSend_setBytes_length_atIndex_(v97, v101, **(_QWORD **)(a1 + 152), *(_QWORD *)(*(_QWORD *)(a1 + 152) + 8) - **(_QWORD **)(a1 + 152), 1);
        objc_msgSend_setBytes_length_atIndex_(v97, v102, (uint64_t)&v134, 4, 2);
        objc_msgSend_setBuffer_offset_atIndex_(v97, v103, (uint64_t)v91, 0, 3);
        sub_2393ECBC8(*(_QWORD *)(a1 + 128));
        v104 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setBuffer_offset_atIndex_(v97, v105, (uint64_t)v104, 0, 4);

        sub_2393EC380(*(_QWORD *)(a1 + 128));
        v106 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setBuffer_offset_atIndex_(v97, v107, (uint64_t)v106, 0, 5);

        sub_2393EC4AC(*(_QWORD *)(a1 + 128));
        v108 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setBuffer_offset_atIndex_(v97, v109, (uint64_t)v108, 0, 6);

        sub_2393ECE28(*(_QWORD *)(a1 + 128));
        v110 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setBuffer_offset_atIndex_(v97, v111, (uint64_t)v110, 0, 7);

        v114 = objc_msgSend_maxTotalThreadsPerThreadgroup(*(void **)(a1 + 184), v112, v113);
        __p = (void *)(v94 << 9);
        v133 = vdupq_n_s64(1uLL);
        *(_QWORD *)buf = v114;
        *(int64x2_t *)&buf[8] = v133;
        objc_msgSend_dispatchThreads_threadsPerThreadgroup_(v97, v115, (uint64_t)&__p, buf);
        objc_msgSend_endEncoding(v97, v116, v117);

      }
      v118 = MEMORY[0x24BDAC760];
      v131[0] = MEMORY[0x24BDAC760];
      v131[1] = 3221225472;
      v131[2] = sub_2393F08AC;
      v131[3] = &unk_250AD6DC0;
      v131[4] = a1;
      objc_msgSend_addScheduledHandler_(v64, v89, (uint64_t)v131);
      v130[0] = v118;
      v130[1] = 3221225472;
      v130[2] = sub_2393F08C8;
      v130[3] = &unk_250AD6DC0;
      v130[4] = a1;
      objc_msgSend_addCompletedHandler_(v64, v119, (uint64_t)v130);
      v122 = atomic_load((unsigned __int8 *)(a1 + 228));
      if ((v122 & 1) == 0)
      {
        objc_msgSend_commit(v64, v120, v121);
        objc_msgSend_waitUntilCompleted(v64, v123, v124);
      }
    }
    else
    {
      if (qword_256930520 != -1)
        dispatch_once(&qword_256930520, &unk_250AD6E20);
      v128 = (id)qword_256930518;
      if (os_log_type_enabled(v128, OS_LOG_TYPE_ERROR))
      {
        sub_2393C4DD0(&__p, "virtual void oc::voxel_hashing::VoxelSurfaceSamplerGPU::sampleSurfacePoints()");
        v129 = v133.i8[15] >= 0 ? &__p : (void **)__p;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v129;
        *(_WORD *)&buf[12] = 1026;
        *(_DWORD *)&buf[14] = 207;
        _os_log_error_impl(&dword_239388000, v128, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to sample surface points - failed to create command buffer.", buf, 0x12u);
        if (v133.i8[15] < 0)
          operator delete(__p);
      }

    }
    kdebug_trace();
  }
  else
  {
    if (qword_256930520 != -1)
      dispatch_once(&qword_256930520, &unk_250AD6E20);
    v4 = (id)qword_256930518;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      sub_2393C4DD0(&__p, "virtual void oc::voxel_hashing::VoxelSurfaceSamplerGPU::sampleSurfacePoints()");
      if (v133.i8[15] >= 0)
        v125 = &__p;
      else
        v125 = __p;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v125;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = 196;
      v126 = "%s:%{public}d Skipping sampling task because no updated hash entries.";
      goto LABEL_24;
    }
  }
LABEL_6:

}

void sub_2393F0540(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_2393F06E4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void **v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  int v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  NSObject *v13;
  _OWORD *v14;
  __int128 v15;
  void **v16;
  void *__p[2];
  char v18;
  uint8_t buf[4];
  void **v20;
  __int16 v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  sub_2393ED54C(*(_QWORD *)(a1 + 128));
  v4 = (void **)sub_2393ED2E4(*(_QWORD *)(a1 + 128));
  v9 = *(_DWORD *)objc_msgSend_contents(*v4, v5, v6);
  if (v9)
  {
    *(_DWORD *)a2 = v9;
    *(_QWORD *)(a2 + 8) = objc_msgSend_contents(v4[1], v7, v8);
    *(_DWORD *)(a2 + 16) = *(_DWORD *)(a1 + 60);
    v10 = *(_OWORD *)(a1 + 80);
    *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 64);
    *(_OWORD *)(a2 + 48) = v10;
    v11 = *(_OWORD *)(a1 + 96);
    v12 = *(_OWORD *)(a1 + 112);
  }
  else
  {
    if (qword_256930520 != -1)
      dispatch_once(&qword_256930520, &unk_250AD6E20);
    v13 = (id)qword_256930518;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      sub_2393C4DD0(__p, "virtual common::PointCloudModelFrame oc::voxel_hashing::VoxelSurfaceSamplerGPU::surfacePointCloud()");
      if (v18 >= 0)
        v16 = __p;
      else
        v16 = (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      v20 = v16;
      v21 = 1026;
      v22 = 262;
      _os_log_debug_impl(&dword_239388000, v13, OS_LOG_TYPE_DEBUG, "%s:%{public}d No mesh vertices found.", buf, 0x12u);
      if (v18 < 0)
        operator delete(__p[0]);
    }

    *(_DWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v14 = (_OWORD *)MEMORY[0x24BDAEE00];
    *(_DWORD *)(a2 + 16) = *(_DWORD *)(a1 + 60);
    v15 = v14[1];
    *(_OWORD *)(a2 + 32) = *v14;
    *(_OWORD *)(a2 + 48) = v15;
    v11 = v14[2];
    v12 = v14[3];
  }
  *(_OWORD *)(a2 + 64) = v11;
  *(_OWORD *)(a2 + 80) = v12;
}

void sub_2393F087C()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.CoreOCModules", "VoxelHashing");
  v1 = (void *)qword_256930518;
  qword_256930518 = (uint64_t)v0;

}

uint64_t sub_2393F08AC(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(*(_QWORD *)(result + 32) + 232);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return result;
}

void sub_2393F08C8(uint64_t a1, void *a2, uint64_t a3)
{
  _QWORD *v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  id v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  int v21;
  char *v22;
  char *v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _DWORD *v35;
  unint64_t v36;
  char *v37;
  int v38;
  uint64_t v39;
  _OWORD *v40;
  char *v41;
  uint64_t v42;
  __int128 v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 *v52;
  unsigned int v53;
  unsigned int *v54;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  int v65;
  unsigned int *v66;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  int v77;
  unsigned int *v78;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  unsigned int v88;
  unsigned int v89;
  int v90;
  int v91;
  unsigned int v92;
  unsigned int v93;
  NSObject *v94;
  NSObject *v95;
  NSObject *v96;
  unsigned int *v97;
  unsigned int v98;
  void **v99;
  void **v100;
  void **v101;
  void **v102;
  size_t v103;
  _DWORD *v104;
  _DWORD *v105;
  _QWORD *v106;
  void *block[2];
  void (*v108)(uint64_t, int);
  void *v109;
  _QWORD *v110;
  size_t v111;
  int v112;
  uint8_t buf[4];
  void **v114;
  __int16 v115;
  int v116;
  uint64_t v117;

  v117 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD **)(a1 + 32);
  objc_msgSend_error(a2, (const char *)a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v4;
  if (v4)
  {
    sub_2393D1870(v4, v5, v6);
    goto LABEL_100;
  }
  sub_2393EC5D8(v3[16]);
  v8 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v11 = *(unsigned int *)objc_msgSend_contents(v8, v9, v10);

  if (!(_DWORD)v11)
  {
    if (qword_256930520 != -1)
      dispatch_once(&qword_256930520, &unk_250AD6E20);
    v94 = (id)qword_256930518;
    if (os_log_type_enabled(v94, OS_LOG_TYPE_DEBUG))
    {
      sub_2393C4DD0(block, "void oc::voxel_hashing::VoxelSurfaceSamplerGPU::copyMeshToOutputBuffers()");
      v99 = SHIBYTE(v108) >= 0 ? block : (void **)block[0];
      *(_DWORD *)buf = 136315394;
      v114 = v99;
      v115 = 1026;
      v116 = 575;
      _os_log_debug_impl(&dword_239388000, v94, OS_LOG_TYPE_DEBUG, "%s:%{public}d Skipping copy task because no voxel blocks have been allocated.", buf, 0x12u);
      if (SHIBYTE(v108) < 0)
        operator delete(block[0]);
    }

    goto LABEL_100;
  }
  kdebug_trace();
  v12 = (void **)sub_2393ED418(v3[16]);
  v105 = (_DWORD *)objc_msgSend_contents(*v12, v13, v14);
  v104 = (_DWORD *)objc_msgSend_contents(v12[2], v15, v16);
  v19 = objc_msgSend_contents(v12[1], v17, v18);
  v103 = v19;
  v102 = v12;
  v106 = v3;
  v20 = 0;
  v21 = 0;
  v22 = (char *)v3[32];
  v3[33] = v22;
  do
  {
    v25 = v3[30];
    if (*(_BYTE *)(v25 + 17368 * v20 + 17364))
      v26 = 0;
    else
      v26 = *(_DWORD *)(v25 + 17368 * v20 + 6144);
    v27 = v3[34];
    if ((unint64_t)v22 < v27)
    {
      *(_DWORD *)v22 = v21;
      v23 = v22 + 4;
      goto LABEL_6;
    }
    v28 = v3;
    v29 = v11;
    v30 = (char *)v28[32];
    v31 = (v22 - v30) >> 2;
    v32 = v31 + 1;
    if ((unint64_t)(v31 + 1) >> 62)
      abort();
    v33 = v27 - (_QWORD)v30;
    if (v33 >> 1 > v32)
      v32 = v33 >> 1;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL)
      v34 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v34 = v32;
    if (v34)
    {
      if (v34 >> 62)
        sub_23938C4B8();
      v19 = (size_t)operator new(4 * v34);
    }
    else
    {
      v19 = 0;
    }
    v35 = (_DWORD *)(v19 + 4 * v31);
    *v35 = v21;
    v23 = (char *)(v35 + 1);
    if (v22 != v30)
    {
      v36 = v22 - 4 - v30;
      if (v36 >= 0xBC)
      {
        if (v19 + v22 - v30 - 4 - (v36 & 0xFFFFFFFFFFFFFFFCLL) > v19 + v22 - v30 - 4)
        {
          v37 = v22;
        }
        else if (&v22[-(v36 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v22 - 4)
        {
          v37 = v22;
        }
        else if ((unint64_t)&v30[-v19] >= 0x20)
        {
          v39 = (v36 >> 2) + 1;
          v37 = &v22[-4 * (v39 & 0x7FFFFFFFFFFFFFF8)];
          v40 = (_OWORD *)(v19 + 4 * v31 - 16);
          v41 = v22 - 16;
          v42 = v39 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v43 = *(_OWORD *)v41;
            *(v40 - 1) = *((_OWORD *)v41 - 1);
            *v40 = v43;
            v40 -= 2;
            v41 -= 32;
            v42 -= 8;
          }
          while (v42);
          v35 -= v39 & 0x7FFFFFFFFFFFFFF8;
          if (v39 == (v39 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_28;
        }
        else
        {
          v37 = v22;
        }
      }
      else
      {
        v37 = v22;
      }
      do
      {
        v38 = *((_DWORD *)v37 - 1);
        v37 -= 4;
        *--v35 = v38;
      }
      while (v37 != v30);
    }
LABEL_28:
    v106[32] = v35;
    v106[33] = v23;
    v106[34] = v19 + 4 * v34;
    if (v30)
      operator delete(v30);
    v11 = v29;
    v3 = v106;
LABEL_6:
    v3[33] = v23;
    if (v26 >= 0x190)
      v24 = 400;
    else
      v24 = v26;
    v21 += v24;
    ++v20;
    v22 = v23;
  }
  while (v20 != v11);
  if (v21)
  {
    LODWORD(v19) = vcvtps_u32_f32((float)v11 / 10.0);
    block[0] = (void *)MEMORY[0x24BDAC760];
    block[1] = (void *)3221225472;
    v108 = sub_2393F11FC;
    v109 = &unk_250AD6DE0;
    v112 = v11;
    v110 = v3;
    v111 = v103;
    dispatch_apply(v19, 0, block);
    *v105 = v21;
    v7 = 0;
    if (*((_BYTE *)v3 + 292))
    {
      v46 = objc_msgSend_contents(v102[3], v44, v45);
      v47 = 0;
      v48 = 0;
      v49 = 16;
      while (1)
      {
        v50 = v3[31];
        LODWORD(v51) = *(_BYTE *)(v3[30] + 17368 * v47 + 17364) ? 0 : *(_DWORD *)(v50 + 30852 * v47);
        v51 = v51 >= 0x4B0 ? 1200 : v51;
        if ((_DWORD)v51)
          break;
LABEL_44:
        ++v47;
        v49 += 30852;
        if (v47 == v11)
          goto LABEL_98;
      }
      v52 = (unsigned __int8 *)(v50 + v49);
      while (v48 < *((_DWORD *)v3 + 11))
      {
        if (((char)*(v52 - 5) & 0x80000000) == 0)
        {
          v53 = *((_DWORD *)v52 - 3);
          if ((v53 & 0x80000000) == 0 && v53 < *((_DWORD *)v3 + 7))
          {
            v54 = (unsigned int *)(v3[30] + 17368 * v53 + 6144);
            if (atomic_load(v54))
            {
              v56 = v3[31];
              v57 = *((_DWORD *)v52 - 3);
              v58 = *(v52 - 8);
              v59 = *(v52 - 7);
              v60 = *(v52 - 6);
              if (*(_BYTE *)(v56 + 30852 * v57 + (v58 << 8) + 32 * v59 + 4 * v60 + 28804))
              {
                v61 = *(__int16 *)(v56 + 30852 * v57 + (v58 << 8) + 32 * v59 + 4 * v60 + 28806);
                if ((v61 & 0x80000000) == 0)
                {
                  if (*(_BYTE *)(v56 + 30852 * v57 + (v58 << 8) + 32 * v59 + 4 * v60 + 28805))
                  {
                    v62 = (char)*(v52 - 5) + v61;
                    v63 = atomic_load(v54);
                    if (v62 < v63 && ((char)v52[3] & 0x80000000) == 0)
                    {
                      v64 = *((_DWORD *)v52 - 1);
                      if ((v64 & 0x80000000) == 0 && v64 < *((_DWORD *)v3 + 7))
                      {
                        v65 = *(_DWORD *)(v3[32] + 4 * *((int *)v52 - 3));
                        v66 = (unsigned int *)(v3[30] + 17368 * v64 + 6144);
                        if (atomic_load(v66))
                        {
                          v68 = v3[31];
                          v69 = *((_DWORD *)v52 - 1);
                          v70 = *v52;
                          v71 = v52[1];
                          v72 = v52[2];
                          if (*(_BYTE *)(v68 + 30852 * v69 + (v70 << 8) + 32 * v71 + 4 * v72 + 28804))
                          {
                            v73 = *(__int16 *)(v68 + 30852 * v69 + (v70 << 8) + 32 * v71 + 4 * v72 + 28806);
                            if ((v73 & 0x80000000) == 0)
                            {
                              if (*(_BYTE *)(v68 + 30852 * v69 + (v70 << 8) + 32 * v71 + 4 * v72 + 28805))
                              {
                                v74 = (char)v52[3] + v73;
                                v75 = atomic_load(v66);
                                if (v74 < v75 && ((char)v52[11] & 0x80000000) == 0)
                                {
                                  v76 = *((_DWORD *)v52 + 1);
                                  if ((v76 & 0x80000000) == 0 && v76 < *((_DWORD *)v3 + 7))
                                  {
                                    v77 = *(_DWORD *)(v3[32] + 4 * *((int *)v52 - 1));
                                    v78 = (unsigned int *)(v3[30] + 17368 * v76 + 6144);
                                    if (atomic_load(v78))
                                    {
                                      v80 = v3;
                                      v81 = v11;
                                      v82 = v80[31];
                                      v83 = *((_DWORD *)v52 + 1);
                                      v84 = v52[8];
                                      v85 = v52[9];
                                      v86 = v52[10];
                                      if (*(_BYTE *)(v82 + 30852 * v83 + (v84 << 8) + 32 * v85 + 4 * v86 + 28804))
                                      {
                                        v87 = *(__int16 *)(v82 + 30852 * v83 + (v84 << 8) + 32 * v85 + 4 * v86 + 28806);
                                        if ((v87 & 0x80000000) == 0)
                                        {
                                          if (*(_BYTE *)(v82 + 30852 * v83 + (v84 << 8) + 32 * v85 + 4 * v86 + 28805))
                                          {
                                            v88 = (char)v52[11] + v87;
                                            v89 = atomic_load(v78);
                                            if (v88 < v89)
                                            {
                                              v90 = v65 + v62;
                                              v91 = v77 + v74;
                                              if (v90 != v77 + v74)
                                              {
                                                v92 = *(_DWORD *)(v106[32] + 4 * *((int *)v52 + 1)) + v88;
                                                if (v90 != v92 && v91 != v92)
                                                {
                                                  *(_DWORD *)(v46 + 4 * v48) = v90;
                                                  v93 = v48 + 2;
                                                  *(_DWORD *)(v46 + 4 * (v48 + 1)) = v91;
                                                  v48 += 3;
                                                  *(_DWORD *)(v46 + 4 * v93) = v92;
                                                }
                                              }
                                            }
                                            v7 = 0;
                                          }
                                        }
                                      }
                                      v11 = v81;
                                      v3 = v106;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v52 += 24;
        if (!--v51)
          goto LABEL_44;
      }
      if (qword_256930520 != -1)
        dispatch_once(&qword_256930520, &unk_250AD6E20);
      v96 = (id)qword_256930518;
      if (os_log_type_enabled(v96, OS_LOG_TYPE_DEBUG))
      {
        sub_2393C4DD0(block, "uint32_t oc::voxel_hashing::VoxelSurfaceSamplerGPU::copyTrianglesFromVoxelBlocksToOutputBuffer(const uint32_t, uint32_t *)");
        v100 = SHIBYTE(v108) >= 0 ? block : (void **)block[0];
        *(_DWORD *)buf = 136315394;
        v114 = v100;
        v115 = 1026;
        v116 = 744;
        _os_log_debug_impl(&dword_239388000, v96, OS_LOG_TYPE_DEBUG, "%s:%{public}d Stopping copy task because triangle faces buffer is full.", buf, 0x12u);
        if (SHIBYTE(v108) < 0)
          operator delete(block[0]);
      }

LABEL_98:
      *v104 = v48;
    }
  }
  else
  {
    v7 = 0;
    *v105 = 0;
    if (*((_BYTE *)v3 + 292))
    {
      *v104 = 0;
      if (qword_256930520 != -1)
        dispatch_once(&qword_256930520, &unk_250AD6E20);
      v95 = (id)qword_256930518;
      if (os_log_type_enabled(v95, OS_LOG_TYPE_DEBUG))
      {
        sub_2393C4DD0(block, "void oc::voxel_hashing::VoxelSurfaceSamplerGPU::copyMeshToOutputBuffers()");
        v101 = SHIBYTE(v108) >= 0 ? block : (void **)block[0];
        *(_DWORD *)buf = 136315394;
        v114 = v101;
        v115 = 1026;
        v116 = 603;
        _os_log_debug_impl(&dword_239388000, v95, OS_LOG_TYPE_DEBUG, "%s:%{public}d Skip copying triangle faces because no mesh vertices found.", buf, 0x12u);
        if (SHIBYTE(v108) < 0)
          operator delete(block[0]);
      }

    }
  }
  kdebug_trace();
LABEL_100:

  v97 = (unsigned int *)(v3 + 29);
  do
    v98 = __ldaxr(v97);
  while (__stlxr(v98 - 1, v97));
}

void sub_2393F11CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2393F11FC(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t i;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  int v16;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  unsigned int v20;
  float v21;
  __int128 v22;
  unsigned int v23;
  void **v24;
  NSObject *v25;
  void **v26;
  void **v27;
  unint64_t v28;
  void *__p[2];
  char v30;
  uint8_t buf[4];
  void **v32;
  __int16 v33;
  int v34;
  uint64_t v35;

  v3 = (10 * a2);
  v35 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 32);
  LODWORD(v5) = v3 + 10;
  v6 = *(_DWORD *)(a1 + 48);
  if (v6 >= (int)v3 + 10)
    v5 = v5;
  else
    v5 = v6;
  v28 = v5;
  for (i = 17368 * v3 + 6175; ; i += 17368)
  {
    v8 = *(_DWORD *)(*(_QWORD *)(v4 + 256) + 4 * v3);
    if (v8 >= *(_DWORD *)(v4 + 40))
      break;
    v9 = *(_QWORD *)(v4 + 240);
    if (!*(_BYTE *)(v9 + 17368 * v3 + 17364))
    {
      v10 = v9 + 17368 * v3;
      v11 = *(unsigned int *)(v10 + 6144);
      if (v11 >= 0x191)
      {
        if (qword_256930520 != -1)
          dispatch_once(&qword_256930520, &unk_250AD6E20);
        v12 = (id)qword_256930518;
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
        {
          sub_2393C4DD0(__p, "uint32_t oc::voxel_hashing::VoxelSurfaceSamplerGPU::copyVerticesFromVoxelBlocksToOutputBuffer(const uint32_t, common::Point *)_block_invoke");
          v24 = __p;
          if (v30 < 0)
            v24 = (void **)__p[0];
          *(_DWORD *)buf = 136315394;
          v32 = v24;
          v33 = 1026;
          v34 = 654;
          _os_log_debug_impl(&dword_239388000, v12, OS_LOG_TYPE_DEBUG, "%s:%{public}d Number of vertices in voxel block is greater than the capacity, adjusted number of vertices to the capacity.", buf, 0x12u);
          if (v30 < 0)
            operator delete(__p[0]);
        }

        v11 = 400;
LABEL_15:
        v13 = 0;
        v14 = (unsigned __int8 *)(v9 + i);
        v15 = (unsigned __int8 *)(v9 + i);
        while (1)
        {
          v16 = *v15;
          v15 += 28;
          if (!v16)
          {
            *(_DWORD *)(v10 + 6144) = v13;
            goto LABEL_6;
          }
          v17 = (_OWORD *)(*(_QWORD *)(a1 + 40) + 48 * (v8 + v13));
          v18 = *v17;
          v19 = v17[1];
          LODWORD(v18) = *(_DWORD *)(v14 - 27);
          *(_DWORD *)v17 = v18;
          DWORD1(v18) = *(_DWORD *)(v14 - 23);
          *v17 = v18;
          DWORD2(v18) = *(_DWORD *)(v14 - 19);
          HIDWORD(v18) = 1.0;
          *v17 = v18;
          v20 = *(_DWORD *)(v14 - 15);
          LODWORD(v19) = v20;
          *((_DWORD *)v17 + 4) = v20;
          DWORD1(v19) = *(_DWORD *)(v14 - 11);
          v17[1] = v19;
          *((_QWORD *)&v19 + 1) = *(unsigned int *)(v14 - 7);
          v17[1] = v19;
          LOBYTE(v20) = *(v14 - 3);
          v21 = (float)v20 / 255.0;
          v22 = v17[2];
          *(float *)&v22 = v21;
          *((float *)v17 + 8) = v21;
          LOBYTE(v21) = *(v14 - 2);
          *(float *)&v23 = (float)LODWORD(v21) / 255.0;
          DWORD1(v22) = v23;
          v17[2] = v22;
          LOBYTE(v23) = *(v14 - 1);
          *((_QWORD *)&v22 + 1) = __PAIR64__(1.0, (float)v23 / 255.0);
          v17[2] = v22;
          if (v8 + v13 + 1 >= *(_DWORD *)(v4 + 40))
            break;
          ++v13;
          v14 = v15;
          if (v11 == v13)
            goto LABEL_6;
        }
        if (qword_256930520 != -1)
          dispatch_once(&qword_256930520, &unk_250AD6E20);
        v25 = (id)qword_256930518;
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
        {
          sub_2393C4DD0(__p, "uint32_t oc::voxel_hashing::VoxelSurfaceSamplerGPU::copyVerticesFromVoxelBlocksToOutputBuffer(const uint32_t, common::Point *)_block_invoke");
          if (v30 >= 0)
            v26 = __p;
          else
            v26 = (void **)__p[0];
          *(_DWORD *)buf = 136315394;
          v32 = v26;
          v33 = 1026;
          v34 = 677;
LABEL_40:
          _os_log_debug_impl(&dword_239388000, v25, OS_LOG_TYPE_DEBUG, "%s:%{public}d Stopping copy task because vertex buffer is full.", buf, 0x12u);
          if (v30 < 0)
            operator delete(__p[0]);
          goto LABEL_34;
        }
        goto LABEL_34;
      }
      if (*(_DWORD *)(v10 + 6144))
        goto LABEL_15;
    }
LABEL_6:
    if (++v3 >= v28)
      return;
  }
  if (qword_256930520 != -1)
    dispatch_once(&qword_256930520, &unk_250AD6E20);
  v25 = (id)qword_256930518;
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
  {
    sub_2393C4DD0(__p, "uint32_t oc::voxel_hashing::VoxelSurfaceSamplerGPU::copyVerticesFromVoxelBlocksToOutputBuffer(const uint32_t, common::Point *)_block_invoke");
    if (v30 >= 0)
      v27 = __p;
    else
      v27 = (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v32 = v27;
    v33 = 1026;
    v34 = 636;
    goto LABEL_40;
  }
LABEL_34:

}

id sub_2393F1628()
{
  if (qword_256930520 != -1)
    dispatch_once(&qword_256930520, &unk_250AD6E20);
  return (id)qword_256930518;
}

uint64_t sub_2393F1668(uint64_t a1)
{
  id v2;
  const char *v3;
  const char *v4;
  id v5;
  const char *v6;
  void *v7;
  id v8;
  id v9;
  const char *v10;
  uint64_t v11;
  id v12;
  void *v13;
  const char *v14;
  NSObject *v15;
  id v16;
  const char *v17;
  uint64_t v18;
  id v19;
  void *v20;
  id v21;
  const char *v22;
  uint64_t v23;
  id v24;
  const char *v25;
  uint64_t v26;
  id v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  NSObject *v33;
  int v34;
  _BYTE *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  NSObject *v41;
  int v42;
  _BYTE *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  _BYTE *v48;
  id v49;
  const char *v50;
  uint64_t v51;
  uint64_t *v52;
  void *v53;
  int v54;
  _BYTE *v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  _BYTE *v60;
  int v61;
  _BYTE *v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  _BYTE *v67;
  NSObject *v68;
  _BYTE *v69;
  _BYTE *v70;
  int v72;
  _BYTE *v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  _BYTE *v78;
  int v79;
  _BYTE *v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  _BYTE *v85;
  int v86;
  _BYTE *v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  _BYTE *v92;
  id v93;
  id v94;
  id v95;
  id v96;
  id v97;
  id v98;
  int v99;
  _BYTE buf[12];
  __int16 v101;
  int v102;
  __int16 v103;
  uint64_t v104;
  __int16 v105;
  int v106;
  _BYTE __p[12];
  __int16 v108;
  int v109;
  char v110;
  uint64_t v111;

  v111 = *MEMORY[0x24BDAC8D0];
  v2 = objc_alloc_init(MEMORY[0x24BDDD5A0]);
  v99 = *(_DWORD *)(a1 + 288);
  objc_msgSend_setConstantValue_type_atIndex_(v2, v3, (uint64_t)&v99, 33, 0);
  objc_msgSend_setConstantValue_type_atIndex_(v2, v4, a1 + 292, 53, 1);
  v5 = *(id *)(*(_QWORD *)(a1 + 144) + 16);
  v98 = 0;
  v7 = (void *)objc_msgSend_newFunctionWithName_constantValues_error_(v5, v6, (uint64_t)CFSTR("oc::voxel_hashing::resetMeshDataInUpdatedVoxelBlocks"), v2, &v98);
  v8 = v98;

  if (v7)
  {
    v9 = **(id **)(a1 + 144);
    v97 = v8;
    v11 = objc_msgSend_newComputePipelineStateWithFunction_error_(v9, v10, (uint64_t)v7, &v97);
    v12 = v97;

    v13 = *(void **)(a1 + 160);
    *(_QWORD *)(a1 + 160) = v11;

    if (!*(_QWORD *)(a1 + 160))
    {
      if (qword_256930520 != -1)
        dispatch_once(&qword_256930520, &unk_250AD6E20);
      v15 = (id)qword_256930518;
      if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        goto LABEL_22;
      sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::VoxelSurfaceSamplerGPU::createPipelineState()");
      v61 = v110;
      v62 = *(_BYTE **)__p;
      objc_msgSend_localizedDescription(v12, v63, v64);
      v65 = objc_claimAutoreleasedReturnValue();
      v66 = (void *)v65;
      v67 = v61 >= 0 ? __p : v62;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v67;
      v101 = 1026;
      v102 = 303;
      v103 = 2114;
      v104 = v65;
      _os_log_error_impl(&dword_239388000, v15, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create pipeline state for resetMeshDataInUpdatedVoxelBlocks compute shader. Error details: %{public}@", buf, 0x1Cu);

      if (v110 < 0)
      {
        operator delete(*(void **)__p);
        v40 = 0;
      }
      else
      {
LABEL_22:
        v40 = 0;
      }
      goto LABEL_74;
    }
    v15 = objc_msgSend_newFunctionWithName_(*(void **)(*(_QWORD *)(a1 + 144) + 16), v14, (uint64_t)CFSTR("oc::voxel_hashing::getVoxelBlocksSurroundingUpdatedVoxelBlocks"));
    if (!v15)
    {
      if (qword_256930520 != -1)
        dispatch_once(&qword_256930520, &unk_250AD6E20);
      v41 = (id)qword_256930518;
      if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
      {
        sub_2393C4DD0(buf, "BOOL oc::voxel_hashing::VoxelSurfaceSamplerGPU::createPipelineState()");
        v70 = (v104 & 0x80000000) == 0 ? buf : *(_BYTE **)buf;
        *(_DWORD *)__p = 136315394;
        *(_QWORD *)&__p[4] = v70;
        v108 = 1026;
        v109 = 311;
        _os_log_error_impl(&dword_239388000, v41, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to find getVoxelBlocksSurroundingUpdatedVoxelBlocks compute shader.", __p, 0x12u);
        if (SBYTE3(v104) < 0)
          operator delete(*(void **)buf);
      }
      v40 = 0;
      goto LABEL_73;
    }
    v16 = **(id **)(a1 + 144);
    v96 = v12;
    v18 = objc_msgSend_newComputePipelineStateWithFunction_error_(v16, v17, (uint64_t)v15, &v96);
    v19 = v96;

    v20 = *(void **)(a1 + 168);
    *(_QWORD *)(a1 + 168) = v18;

    if (!*(_QWORD *)(a1 + 168))
    {
      if (qword_256930520 != -1)
        dispatch_once(&qword_256930520, &unk_250AD6E20);
      v41 = (id)qword_256930518;
      if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
      {
        sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::VoxelSurfaceSamplerGPU::createPipelineState()");
        v72 = v110;
        v73 = *(_BYTE **)__p;
        objc_msgSend_localizedDescription(v19, v74, v75);
        v76 = objc_claimAutoreleasedReturnValue();
        v77 = (void *)v76;
        v78 = v72 >= 0 ? __p : v73;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = v78;
        v101 = 1026;
        v102 = 321;
        v103 = 2114;
        v104 = v76;
        _os_log_error_impl(&dword_239388000, v41, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create pipeline state for getVoxelBlocksSurroundingUpdatedVoxelBlocks compute shader. Error details: %{public}@", buf, 0x1Cu);

        if (v110 < 0)
          operator delete(*(void **)__p);
      }
      v40 = 0;
      v12 = v19;
      goto LABEL_73;
    }
    v21 = *(id *)(*(_QWORD *)(a1 + 144) + 16);
    v95 = v19;
    v23 = objc_msgSend_newFunctionWithName_constantValues_error_(v21, v22, (uint64_t)CFSTR("oc::voxel_hashing::computeMeshVerticesInUpdatedVoxelBlocks"), v2, &v95);
    v12 = v95;

    if (!v23)
    {
      if (qword_256930520 != -1)
        dispatch_once(&qword_256930520, &unk_250AD6E20);
      v33 = (id)qword_256930518;
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::VoxelSurfaceSamplerGPU::createPipelineState()");
        v79 = v110;
        v80 = *(_BYTE **)__p;
        objc_msgSend_localizedDescription(v12, v81, v82);
        v83 = objc_claimAutoreleasedReturnValue();
        v84 = (void *)v83;
        v85 = v79 >= 0 ? __p : v80;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = v85;
        v101 = 1026;
        v102 = 333;
        v103 = 2114;
        v104 = v83;
        _os_log_error_impl(&dword_239388000, v33, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed find computeMeshVerticesInUpdatedVoxelBlocks compute shader. Error details: %{public}@", buf, 0x1Cu);

        if (v110 < 0)
          operator delete(*(void **)__p);
      }
      v40 = 0;
      goto LABEL_72;
    }
    v24 = **(id **)(a1 + 144);
    v94 = v12;
    v26 = objc_msgSend_newComputePipelineStateWithFunction_error_(v24, v25, v23, &v94);
    v27 = v94;

    v28 = *(void **)(a1 + 176);
    *(_QWORD *)(a1 + 176) = v26;

    v31 = *(void **)(a1 + 176);
    if (v31)
    {
      if ((unint64_t)objc_msgSend_maxTotalThreadsPerThreadgroup(v31, v29, v30) > 0x2D8)
      {
        v33 = objc_msgSend_newFunctionWithName_(*(void **)(*(_QWORD *)(a1 + 144) + 16), v32, (uint64_t)CFSTR("oc::voxel_hashing::generateMeshFacesInUpdatedVoxelBlocks"));
        if (v33)
        {
          v49 = **(id **)(a1 + 144);
          v93 = v27;
          v51 = objc_msgSend_newComputePipelineStateWithFunction_error_(v49, v50, (uint64_t)v33, &v93);
          v12 = v93;

          v53 = *(void **)(a1 + 184);
          v52 = (uint64_t *)(a1 + 184);
          *v52 = v51;

          if (*v52)
          {
            v40 = 1;
LABEL_72:

            v41 = v23;
LABEL_73:

LABEL_74:
            v8 = v12;
            goto LABEL_75;
          }
          sub_2393F1628();
          v68 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
          {
            sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::VoxelSurfaceSamplerGPU::createPipelineState()");
            v86 = v110;
            v87 = *(_BYTE **)__p;
            objc_msgSend_localizedDescription(v12, v88, v89);
            v90 = objc_claimAutoreleasedReturnValue();
            v91 = (void *)v90;
            v92 = __p;
            if (v86 < 0)
              v92 = v87;
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = v92;
            v101 = 1026;
            v102 = 370;
            v103 = 2114;
            v104 = v90;
            _os_log_error_impl(&dword_239388000, v68, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create pipeline state for generateMeshFacesInUpdatedVoxelBlocks compute shader. Error details: %{public}@", buf, 0x1Cu);

            if (v110 < 0)
              operator delete(*(void **)__p);
          }
          v27 = v12;
        }
        else
        {
          sub_2393F1628();
          v68 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
          {
            sub_2393C4DD0(buf, "BOOL oc::voxel_hashing::VoxelSurfaceSamplerGPU::createPipelineState()");
            v69 = (v104 & 0x80000000) == 0 ? buf : *(_BYTE **)buf;
            *(_DWORD *)__p = 136315394;
            *(_QWORD *)&__p[4] = v69;
            v108 = 1026;
            v109 = 361;
            _os_log_error_impl(&dword_239388000, v68, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed find generateMeshFacesInUpdatedVoxelBlocks compute shader.", __p, 0x12u);
            if (SBYTE3(v104) < 0)
              operator delete(*(void **)buf);
          }
        }

LABEL_71:
        v40 = 0;
        v12 = v27;
        goto LABEL_72;
      }
      if (qword_256930520 != -1)
        dispatch_once(&qword_256930520, &unk_250AD6E20);
      v33 = (id)qword_256930518;
      if (!os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
        goto LABEL_71;
      sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::VoxelSurfaceSamplerGPU::createPipelineState()");
      v34 = v110;
      v35 = *(_BYTE **)__p;
      v38 = objc_msgSend_maxTotalThreadsPerThreadgroup(*(void **)(a1 + 176), v36, v37);
      if (v34 >= 0)
        v39 = __p;
      else
        v39 = v35;
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = v39;
      v101 = 1026;
      v102 = 353;
      v103 = 2050;
      v104 = v38;
      v105 = 1026;
      v106 = 729;
      _os_log_error_impl(&dword_239388000, v33, OS_LOG_TYPE_ERROR, "%s:%{public}d maxTotalThreadsPerThreadgroup = %{public}lu in computeMeshVerticesInUpdatedVoxelBlocks compute shader is less than the minimum required %{public}u", buf, 0x22u);
    }
    else
    {
      if (qword_256930520 != -1)
        dispatch_once(&qword_256930520, &unk_250AD6E20);
      v33 = (id)qword_256930518;
      if (!os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
        goto LABEL_71;
      sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::VoxelSurfaceSamplerGPU::createPipelineState()");
      v42 = v110;
      v43 = *(_BYTE **)__p;
      objc_msgSend_localizedDescription(v27, v44, v45);
      v46 = objc_claimAutoreleasedReturnValue();
      v47 = (void *)v46;
      if (v42 >= 0)
        v48 = __p;
      else
        v48 = v43;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v48;
      v101 = 1026;
      v102 = 343;
      v103 = 2114;
      v104 = v46;
      _os_log_error_impl(&dword_239388000, v33, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create pipeline state for computeMeshVerticesInUpdatedVoxelBlocks compute shader. Error details: %{public}@", buf, 0x1Cu);

    }
    if (v110 < 0)
      operator delete(*(void **)__p);
    goto LABEL_71;
  }
  if (qword_256930520 != -1)
    dispatch_once(&qword_256930520, &unk_250AD6E20);
  v15 = (id)qword_256930518;
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::VoxelSurfaceSamplerGPU::createPipelineState()");
    v54 = v110;
    v55 = *(_BYTE **)__p;
    objc_msgSend_localizedDescription(v8, v56, v57);
    v58 = objc_claimAutoreleasedReturnValue();
    v59 = (void *)v58;
    v60 = v54 >= 0 ? __p : v55;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v60;
    v101 = 1026;
    v102 = 294;
    v103 = 2114;
    v104 = v58;
    _os_log_error_impl(&dword_239388000, v15, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed find resetMeshDataInUpdatedVoxelBlocks compute shader. Error details: %{public}@", buf, 0x1Cu);

    if (v110 < 0)
      operator delete(*(void **)__p);
  }
  v40 = 0;
LABEL_75:

  return v40;
}

void sub_2393F20BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  void *v17;

  if (v15 < 0)
    operator delete(v17);

  _Unwind_Resume(a1);
}

uint64_t sub_2393F21FC(uint64_t a1)
{
  int v2;
  id v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  void *v8;
  id v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  void *v14;
  uint64_t v15;
  id v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  void *v21;
  NSObject *v23;
  void **v24;
  void **v25;
  void **v26;
  void *__p[2];
  char v28;
  uint8_t buf[4];
  void **v30;
  __int16 v31;
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 28) >= 0xFA0u)
    v2 = 4000;
  else
    v2 = *(_DWORD *)(a1 + 28);
  v3 = **(id **)(a1 + 144);
  v5 = objc_msgSend_newBufferWithLength_options_(v3, v4, (108 * v2), 32);
  v6 = *(void **)(a1 + 200);
  *(_QWORD *)(a1 + 200) = v5;

  v8 = *(void **)(a1 + 200);
  if (!v8)
  {
    if (qword_256930520 != -1)
      dispatch_once(&qword_256930520, &unk_250AD6E20);
    v23 = (id)qword_256930518;
    if (!os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      goto LABEL_21;
    sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::VoxelSurfaceSamplerGPU::createBuffers()");
    v24 = v28 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v30 = v24;
    v31 = 1026;
    v32 = 386;
    _os_log_error_impl(&dword_239388000, v23, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create neighborVoxelBlockIdxs Buffer.", buf, 0x12u);
    if ((v28 & 0x80000000) == 0)
      goto LABEL_21;
    goto LABEL_36;
  }
  objc_msgSend_setLabel_(v8, v7, (uint64_t)CFSTR("NeighborVoxelBlockIdxs Buffer"));
  v9 = **(id **)(a1 + 144);
  v11 = objc_msgSend_newBufferWithLength_options_(v9, v10, 11664, 0);
  v12 = *(void **)(a1 + 208);
  *(_QWORD *)(a1 + 208) = v11;

  v14 = *(void **)(a1 + 208);
  if (!v14)
  {
    if (qword_256930520 != -1)
      dispatch_once(&qword_256930520, &unk_250AD6E20);
    v23 = (id)qword_256930518;
    if (!os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      goto LABEL_21;
    sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::VoxelSurfaceSamplerGPU::createBuffers()");
    v25 = v28 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v30 = v25;
    v31 = 1026;
    v32 = 396;
    _os_log_error_impl(&dword_239388000, v23, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create threadPosInThreadgroupToIdxInVoxelVerticesMap buffer.", buf, 0x12u);
    if ((v28 & 0x80000000) == 0)
      goto LABEL_21;
    goto LABEL_36;
  }
  objc_msgSend_setLabel_(v14, v13, (uint64_t)CFSTR("ThreadPosInThreadgroupToIdxInVoxelVerticesMap Buffer"));
  if (*(_DWORD *)(a1 + 288) != 1)
    return 1;
  v15 = (4 * *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 56));
  v16 = **(id **)(a1 + 144);
  v18 = objc_msgSend_newBufferWithLength_options_(v16, v17, v15, 0);
  v19 = *(void **)(a1 + 216);
  *(_QWORD *)(a1 + 216) = v18;

  v21 = *(void **)(a1 + 216);
  if (v21)
  {
    objc_msgSend_setLabel_(v21, v20, (uint64_t)CFSTR("RandomNumbers Buffer"));
    return 1;
  }
  if (qword_256930520 != -1)
    dispatch_once(&qword_256930520, &unk_250AD6E20);
  v23 = (id)qword_256930518;
  if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
  {
    sub_2393C4DD0(__p, "BOOL oc::voxel_hashing::VoxelSurfaceSamplerGPU::createBuffers()");
    v26 = v28 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v30 = v26;
    v31 = 1026;
    v32 = 410;
    _os_log_error_impl(&dword_239388000, v23, OS_LOG_TYPE_ERROR, "%s:%{public}d Failed to create randomNumbers buffer.", buf, 0x12u);
    if (v28 < 0)
LABEL_36:
      operator delete(__p[0]);
  }
LABEL_21:

  return 0;
}

void sub_2393F25A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_2393F25BC(void *a1, const char *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t i;
  uint64_t v5;

  result = objc_msgSend_contents(a1, a2, a3);
  for (i = 0; i != 729; ++i)
  {
    LODWORD(v5) = (unsigned __int16)i / 0x51u;
    HIDWORD(v5) = (i - 81 * v5) / 9u;
    *(_DWORD *)(result + 8) = (unsigned __int16)i % 9u;
    *(_QWORD *)result = v5;
    result += 16;
  }
  return result;
}

void sub_2393F2630(uint64_t a1, const char *a2, uint64_t a3)
{
  float v4;
  NSObject *v5;
  float v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  float v12;
  float v13;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  float v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  float v26;
  float v27;
  float v28;
  float v29;
  void **v30;
  double v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  void *__p[2];
  char v37;
  uint8_t buf[4];
  void **v39;
  __int16 v40;
  int v41;
  __int16 v42;
  double v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v4 = *(float *)(a1 + 224);
  v34 = objc_msgSend_contents(*(void **)(a1 + 216), a2, a3);
  if (qword_256930520 != -1)
    dispatch_once(&qword_256930520, &unk_250AD6E20);
  v5 = (id)qword_256930518;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    sub_2393C4DD0(__p, "void oc::voxel_hashing::VoxelSurfaceSamplerGPU::generateRandomNumbers()");
    v30 = v37 >= 0 ? __p : (void **)__p[0];
    v31 = *(float *)(a1 + 224);
    *(_DWORD *)buf = 136315650;
    v39 = v30;
    v40 = 1026;
    v41 = 441;
    v42 = 2050;
    v43 = v31;
    _os_log_debug_impl(&dword_239388000, v5, OS_LOG_TYPE_DEBUG, "%s:%{public}d Generating random numbers from normal distribution with stddev = %{public}f", buf, 0x1Cu);
    if (v37 < 0)
      operator delete(__p[0]);
  }

  v32 = *(_DWORD *)(a1 + 52);
  if (v32)
  {
    v35 = *(unsigned int *)(a1 + 56);
    if ((_DWORD)v35)
    {
      v7 = 0;
      v8 = 0;
      v9 = 1;
      do
      {
        v10 = 0;
        v33 = v7;
        v11 = v35 * v7;
        while (1)
        {
          if (v8)
          {
            v8 = 0;
            v12 = v6;
          }
          else
          {
            do
            {
              v15 = 48271 * (v9 % 0xADC8);
              v16 = 3399 * (v9 / 0xADC8);
              v17 = v15 >= v16;
              v18 = v15 - v16;
              if (v17)
                v19 = 0;
              else
                v19 = 0x7FFFFFFF;
              v20 = v19 + v18;
              v21 = (float)(v20 - 1) * 4.6566e-10;
              v22 = v20 / 0xADC8;
              v23 = 48271 * (v20 % 0xADC8);
              v22 *= 3399;
              v17 = v23 >= v22;
              v24 = v23 - v22;
              if (v17)
                v25 = 0;
              else
                v25 = 0x7FFFFFFF;
              v9 = v25 + v24;
              v26 = (float)(v21 * 2.0) + -1.0;
              v27 = (float)((float)((float)(v25 + v24 - 1) * 4.6566e-10) * 2.0) + -1.0;
              v28 = (float)(v27 * v27) + (float)(v26 * v26);
            }
            while (v28 > 1.0 || v28 == 0.0);
            v29 = sqrtf((float)(logf((float)(v27 * v27) + (float)(v26 * v26)) * -2.0) / v28);
            v6 = v27 * v29;
            v12 = v26 * v29;
            v8 = 1;
          }
          v13 = (float)(v12 * v4) + 0.0;
          if (v13 > -0.4 && v13 < 0.4)
          {
            *(float *)(v34 + 4 * (v11 + v10++)) = v13;
            if (v10 == v35)
              break;
          }
        }
        v7 = v33 + 1;
      }
      while (v33 + 1 != v32);
    }
  }
}

uint64_t sub_2393F2914(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::chrono::nanoseconds __ns;

  atomic_store(1u, (unsigned __int8 *)(a1 + 228));
  v2 = atomic_load((unsigned int *)(a1 + 232));
  if (v2 >= 1)
  {
    do
    {
      __ns.__rep_ = 1000000;
      std::this_thread::sleep_for (&__ns);
      v3 = atomic_load((unsigned int *)(a1 + 232));
    }
    while (v3 > 0);
  }
  v4 = *(_QWORD *)(a1 + 280);
  *(_QWORD *)(a1 + 280) = 0;
  if (v4)
  {

    MEMORY[0x23B83C4BC](v4, 0xE0C40BC9ECFC2);
  }
  v5 = *(void **)(a1 + 256);
  if (v5)
  {
    *(_QWORD *)(a1 + 264) = v5;
    operator delete(v5);
  }

  v6 = *(std::__shared_weak_count **)(a1 + 136);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return a1;
}

void sub_2393F2A38(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  sub_2393DA17C((uint64_t *)(v1 + 280));
  v3 = *(void **)(v1 + 256);
  if (v3)
  {
    *(_QWORD *)(v1 + 264) = v3;
    operator delete(v3);
  }

  sub_2393BB9F0(v1 + 128);
  _Unwind_Resume(a1);
}

uint64_t sub_2393F2AA4(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a2[3];
  v5 = *a2;
  v4 = a2[1];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v3;
  *(_OWORD *)a1 = v5;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 96) = 0;
  if (*(_BYTE *)(a1 + 8))
  {
    v6 = operator new();
    *(_OWORD *)v6 = *(_OWORD *)(a1 + 16);
    *(_WORD *)(v6 + 16) = 1;
    *(_QWORD *)(v6 + 24) = 0;
    *(_QWORD *)(v6 + 32) = 0;
    v7 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 64) = v6;
    if (v7)
      MEMORY[0x23B83C4BC](v7, 0x1000C40FA9F20B1);
  }
  if (*(_BYTE *)(a1 + 9))
  {
    v8 = operator new();
    *(_OWORD *)v8 = *(_OWORD *)(a1 + 32);
    *(_WORD *)(v8 + 16) = 1;
    *(_QWORD *)(v8 + 24) = 0;
    *(_QWORD *)(v8 + 32) = 0;
    v9 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v8;
    if (v9)
      MEMORY[0x23B83C4BC](v9, 0x1000C40FA9F20B1);
  }
  if (*(_BYTE *)(a1 + 10))
  {
    v10 = operator new();
    *(_OWORD *)v10 = *(_OWORD *)(a1 + 48);
    *(_WORD *)(v10 + 16) = 1;
    *(_OWORD *)(v10 + 24) = 0u;
    *(_OWORD *)(v10 + 40) = 0u;
    v11 = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 80) = v10;
    if (v11)
      MEMORY[0x23B83C4BC](v11, 0x1000C40B166FFE6);
  }
  return a1;
}

uint64_t sub_2393F2BF4(uint64_t a1, float32x4_t *a2, float32x2_t *a3, float32x4_t *a4)
{
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  int32x2_t v13;
  int64x2_t v14;
  float64x2_t v15;
  uint64_t v16;
  float64x2_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float v25;
  float v26;
  float v27;
  _BOOL4 v29;
  _BOOL4 v30;
  uint64_t v31;
  uint64_t v32;
  float32x4_t v33[4];

  v6 = a4[1];
  v7 = a4[2];
  v8 = a4[3];
  v9 = *(float32x4_t *)a3[6].f32;
  v10 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a4, COERCE_FLOAT(*(_OWORD *)a3[2].f32)), v6, a3[2], 1), v7, *(float32x4_t *)a3[2].f32, 2), v8, *(float32x4_t *)a3[2].f32, 3);
  v11 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a4, COERCE_FLOAT(*(_OWORD *)a3[4].f32)), v6, a3[4], 1), v7, *(float32x4_t *)a3[4].f32, 2), v8, *(float32x4_t *)a3[4].f32, 3);
  v12 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a4, v9.f32[0]), v6, *(float32x2_t *)v9.f32, 1), v7, v9, 2);
  v33[0] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a4, COERCE_FLOAT(*(_OWORD *)a3->f32)), v6, *a3, 1), v7, *(float32x4_t *)a3->f32, 2), v8, *(float32x4_t *)a3->f32, 3);
  v33[1] = v10;
  v33[2] = v11;
  v33[3] = vmlaq_laneq_f32(v12, v8, v9, 3);
  v31 = 0;
  v32 = 0;
  if (sub_2393EEAD4(a2, v33, (int *)&v32 + 1, (int *)&v32, (int *)&v31 + 1, (int *)&v31))
  {
    v13 = vsub_s32((int32x2_t)__PAIR64__(v32, v31), (int32x2_t)__PAIR64__(HIDWORD(v32), HIDWORD(v31)));
    v14.i64[0] = v13.i32[0];
    v14.i64[1] = v13.i32[1];
    v15 = vcvtq_f64_s64(v14);
    v16 = a2[17].i64[0];
    v14.i64[0] = v16;
    v14.i64[1] = HIDWORD(v16);
    v17 = vdivq_f64(v15, vcvtq_f64_u64((uint64x2_t)v14));
    if (*(_BYTE *)(a1 + 10))
    {
      v18 = *(_QWORD *)(a1 + 80);
      if (*(_BYTE *)(v18 + 16))
      {
        *(float64x2_t *)(v18 + 24) = v17;
        *(_BYTE *)(v18 + 16) = 0;
      }
      else
      {
        v21 = *(float64x2_t *)(v18 + 24);
        if (*(_BYTE *)(v18 + 17))
        {
          v22 = *(float64x2_t *)(v18 + 40);
        }
        else
        {
          v22 = vsubq_f64(v17, v21);
          *(_BYTE *)(v18 + 17) = 1;
        }
        v23 = vaddq_f64(vmulq_n_f64(v17, *(double *)v18), vmulq_n_f64(vaddq_f64(v21, v22), 1.0 - *(double *)v18));
        v24 = vaddq_f64(vmulq_n_f64(vsubq_f64(v23, v21), *(double *)(v18 + 8)), vmulq_n_f64(v22, 1.0 - *(double *)(v18 + 8)));
        *(float64x2_t *)(v18 + 24) = v23;
        *(float64x2_t *)(v18 + 40) = v24;
        v17 = vaddq_f64(v23, v24);
      }
    }
    v25 = v17.f64[0];
    v26 = v17.f64[1];
    v27 = v25 * v26;
    v29 = (v25 < 1.0 || v26 < 1.0) && v27 < *(float *)a1;
    v30 = *(_DWORD *)(a1 + 96) == 2 && v27 < *(float *)(a1 + 4);
    return v29 | v30;
  }
  else
  {
    result = 0;
    if (*(_BYTE *)(a1 + 10))
    {
      v20 = *(_QWORD *)(a1 + 80);
      *(_OWORD *)(v20 + 40) = 0u;
      *(_OWORD *)(v20 + 24) = 0u;
      *(_WORD *)(v20 + 16) = 1;
    }
  }
  return result;
}

uint64_t sub_2393F2DD8()
{
  id v0;
  uint64_t v1;
  id v2;
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  void *v7;
  const char *v8;
  const char *v9;
  const char *v10;

  if (qword_256930528)
  {
    v0 = (id)qword_256930528;
  }
  else
  {
    v0 = MTLCreateSystemDefaultDevice();
    if (!v0)
    {
      v2 = 0;
      v1 = 0;
      goto LABEL_13;
    }
  }
  v1 = operator new();
  v2 = v0;
  *(_QWORD *)v1 = v2;
  v5 = (void *)objc_msgSend_newCommandQueue(v2, v3, v4);
  *(_QWORD *)(v1 + 8) = v5;
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  objc_msgSend_bundleWithIdentifier_(MEMORY[0x24BDD1488], v6, (uint64_t)CFSTR("com.apple.CoreOCModules"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)(v1 + 16) = objc_msgSend_newDefaultLibraryWithBundle_error_(v2, v8, (uint64_t)v7, 0);
  if (objc_msgSend_supportsFamily_(v2, v9, 1001)
    || (objc_msgSend_supportsFamily_(v2, v10, 1002) & 1) != 0
    || (objc_msgSend_supportsFamily_(v2, v10, 1003) & 1) != 0
    || (objc_msgSend_supportsFamily_(v2, v10, 1004) & 1) != 0
    || (objc_msgSend_supportsFamily_(v2, v10, 1005) & 1) != 0
    || (objc_msgSend_supportsFamily_(v2, v10, 1006) & 1) != 0
    || (objc_msgSend_supportsFamily_(v2, v10, 1007) & 1) != 0)
  {
    *(_BYTE *)(v1 + 24) = 1;
  }
  objc_msgSend_setLabel_(v5, v10, (uint64_t)CFSTR("com.apple.coreocmodules.queue"));

LABEL_13:
  return v1;
}

void sub_2393F2F3C(_Unwind_Exception *a1)
{
  void *v1;
  id *v2;
  void *v3;

  MEMORY[0x23B83C4BC](v2, 0x1080C4097C26A9CLL);
  _Unwind_Resume(a1);
}

id **sub_2393F2FA4(id **a1)
{
  id *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {

    MEMORY[0x23B83C4BC](v2, 0x1080C4097C26A9CLL);
  }
  return a1;
}

uint64_t sub_2393F3000(uint64_t a1)
{
  unsigned __int8 v2;

  v2 = atomic_load((unsigned __int8 *)&qword_256930538);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_256930538))
  {
    qword_256930530 = sub_2393F2DD8();
    __cxa_atexit((void (*)(void *))sub_2393F2FA4, &qword_256930530, &dword_239388000);
    __cxa_guard_release(&qword_256930538);
  }
  *(_QWORD *)a1 = qword_256930530;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  sub_2393BB37C(a1 + 32);
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_QWORD *)(a1 + 152) = 0;
  return a1;
}

void sub_2393F30A8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_256930538);
  _Unwind_Resume(a1);
}

void sub_2393F30C0(_Unwind_Exception *a1)
{
  id *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_2393F30E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  unsigned int v8;
  float v9;
  float v10;
  id v11;
  void *v12;
  uint64_t v13;
  id v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  id v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  const char *v23;

  if (!*(_QWORD *)a1)
    return 0;
  result = 0;
  if (!a5 || !a4 || !a3 || !a2 || *(_BYTE *)(a1 + 208))
    return result;
  v8 = *(_DWORD *)(a6 + 20);
  if (*(_DWORD *)(a6 + 16) >= v8)
    return 0;
  result = 0;
  v9 = *(float *)(a6 + 28);
  if (v9 <= 0.0)
    return result;
  v10 = *(float *)(a6 + 32);
  if (v9 >= v10)
    return result;
  *(_QWORD *)(a1 + 176) = a2;
  *(_QWORD *)(a1 + 184) = a3;
  *(_QWORD *)(a1 + 192) = a4;
  *(_QWORD *)(a1 + 200) = a5;
  *(_DWORD *)(a1 + 160) = v8;
  *(float *)(a1 + 164) = v9;
  *(float *)(a1 + 168) = v10;
  result = sub_2393BB424(a1 + 32, v8);
  if (!(_DWORD)result)
    return result;
  v11 = *(_BYTE *)(a1 + 68) ? *(id *)(a1 + 56) : 0;
  v12 = *(void **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v11;

  if (!*(_QWORD *)(a1 + 88))
    return 0;
  v13 = 4 * *(unsigned int *)(a1 + 160);
  v14 = **(id **)a1;
  v16 = objc_msgSend_newBufferWithLength_options_(v14, v15, v13, 0);
  v17 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v16;

  result = *(_QWORD *)(a1 + 96);
  if (result)
  {
    objc_msgSend_setLabel_((void *)result, v18, (uint64_t)CFSTR("SurfaceVoxelCoverageScoreBuffer"));
    v19 = **(id **)a1;
    v21 = objc_msgSend_newBufferWithBytes_length_options_(v19, v20, (uint64_t)&unk_2393F9CB8, 64, 0);
    v22 = *(void **)(a1 + 104);
    *(_QWORD *)(a1 + 104) = v21;

    result = *(_QWORD *)(a1 + 104);
    if (result)
    {
      objc_msgSend_setLabel_((void *)result, v23, (uint64_t)CFSTR("ImagePlaneVertexBuffer"));
      result = sub_2393F3290(a1);
      if ((_DWORD)result)
      {
        result = sub_2393F34F0(a1);
        if ((_DWORD)result)
        {
          result = sub_2393F36CC(a1);
          if ((_DWORD)result)
          {
            result = sub_2393F39F4(a1);
            if ((_DWORD)result)
            {
              result = sub_2393F3AA4((uint64_t *)a1);
              if ((_DWORD)result)
              {
                result = 1;
                *(_BYTE *)(a1 + 208) = 1;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_2393F327C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL sub_2393F3290(uint64_t a1)
{
  id v2;
  void *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  void *v9;
  const char *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  void *v15;
  const char *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  void *v21;
  const char *v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  void *v27;
  const char *v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  void *v33;
  const char *v34;
  const char *v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  void *v39;
  const char *v40;
  const char *v41;
  uint64_t v42;
  void *v43;
  const char *v44;
  void *v45;
  const char *v46;
  const char *v47;
  uint64_t v48;
  void *v49;
  const char *v50;
  void *v51;
  const char *v52;
  const char *v53;
  uint64_t v54;
  void *v55;
  const char *v56;
  void *v57;
  const char *v58;

  v2 = objc_alloc_init(MEMORY[0x24BDDD770]);
  v3 = *(void **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v2;

  v6 = *(_QWORD *)(a1 + 112);
  if (v6)
  {
    objc_msgSend_attributes(*(void **)(a1 + 112), v4, v5);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v7, v8, 0);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setFormat_(v9, v10, 29);

    objc_msgSend_attributes(*(void **)(a1 + 112), v11, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v13, v14, 0);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setOffset_(v15, v16, 0);

    objc_msgSend_attributes(*(void **)(a1 + 112), v17, v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v19, v20, 0);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setBufferIndex_(v21, v22, 0);

    objc_msgSend_attributes(*(void **)(a1 + 112), v23, v24);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v25, v26, 1);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setFormat_(v27, v28, 29);

    objc_msgSend_attributes(*(void **)(a1 + 112), v29, v30);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v31, v32, 1);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setOffset_(v33, v34, 8);

    objc_msgSend_attributes(*(void **)(a1 + 112), v35, v36);
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v37, v38, 1);
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setBufferIndex_(v39, v40, 0);

    objc_msgSend_layouts(*(void **)(a1 + 112), v41, v42);
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v43, v44, 0);
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setStride_(v45, v46, 16);

    objc_msgSend_layouts(*(void **)(a1 + 112), v47, v48);
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v49, v50, 0);
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setStepRate_(v51, v52, 1);

    objc_msgSend_layouts(*(void **)(a1 + 112), v53, v54);
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v55, v56, 0);
    v57 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setStepFunction_(v57, v58, 1);

  }
  return v6 != 0;
}

void sub_2393F348C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_2393F34F0(uint64_t a1)
{
  id v2;
  const char *v3;
  void *v4;
  const char *v5;
  const char *v6;
  const char *v7;
  const char *v8;
  const char *v9;
  id v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  void *v15;
  const char *v16;
  const char *v17;
  const char *v18;
  const char *v19;
  id v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  void *v25;
  const char *v26;
  const char *v27;
  const char *v28;
  const char *v29;
  id v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  void *v35;
  uint64_t v36;

  v2 = objc_alloc_init(MEMORY[0x24BDDD740]);
  v4 = v2;
  if (!v2)
    goto LABEL_9;
  objc_msgSend_setTextureType_(v2, v3, 2);
  objc_msgSend_setPixelFormat_(v4, v5, 80);
  objc_msgSend_setWidth_(v4, v6, *(_QWORD *)(a1 + 176));
  objc_msgSend_setHeight_(v4, v7, *(_QWORD *)(a1 + 184));
  objc_msgSend_setUsage_(v4, v8, 6);
  objc_msgSend_setStorageMode_(v4, v9, 0);
  v10 = **(id **)a1;
  v12 = objc_msgSend_newTextureWithDescriptor_(v10, v11, (uint64_t)v4);
  v13 = *(void **)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v12;

  v15 = *(void **)(a1 + 120);
  if (!v15)
    goto LABEL_9;
  objc_msgSend_setLabel_(v15, v14, (uint64_t)CFSTR("CoverageHeatmapTexture"));
  objc_msgSend_setPixelFormat_(v4, v16, 55);
  objc_msgSend_setWidth_(v4, v17, *(_QWORD *)(a1 + 192));
  objc_msgSend_setHeight_(v4, v18, *(_QWORD *)(a1 + 200));
  objc_msgSend_setUsage_(v4, v19, 7);
  v20 = **(id **)a1;
  v22 = objc_msgSend_newTextureWithDescriptor_(v20, v21, (uint64_t)v4);
  v23 = *(void **)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v22;

  v25 = *(void **)(a1 + 128);
  if (!v25)
    goto LABEL_9;
  objc_msgSend_setLabel_(v25, v24, (uint64_t)CFSTR("CoverageScoreTexture"));
  objc_msgSend_setTextureType_(v4, v26, 2);
  objc_msgSend_setPixelFormat_(v4, v27, 252);
  objc_msgSend_setUsage_(v4, v28, 4);
  if (*(_BYTE *)(*(_QWORD *)a1 + 24))
    objc_msgSend_setStorageMode_(v4, v29, 3);
  else
    objc_msgSend_setStorageMode_(v4, v29, 2);
  v30 = **(id **)a1;
  v32 = objc_msgSend_newTextureWithDescriptor_(v30, v31, (uint64_t)v4);
  v33 = *(void **)(a1 + 136);
  *(_QWORD *)(a1 + 136) = v32;

  v35 = *(void **)(a1 + 136);
  if (v35)
  {
    objc_msgSend_setLabel_(v35, v34, (uint64_t)CFSTR("DepthTexture"));
    v36 = 1;
  }
  else
  {
LABEL_9:
    v36 = 0;
  }

  return v36;
}

void sub_2393F36A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL sub_2393F36CC(uint64_t a1)
{
  const char *v2;
  id v3;
  void *v4;
  const char *v5;
  void *v6;
  const char *v7;
  const char *v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  void *v17;
  const char *v18;
  id v19;
  const char *v20;
  uint64_t v21;
  id v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  const char *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  void *v37;
  const char *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  id v43;
  const char *v44;
  uint64_t v45;
  id v46;
  void *v47;
  _BOOL8 v48;
  id v50;
  id v51;

  v3 = objc_alloc_init(MEMORY[0x24BDDD6B8]);
  if (v3)
  {
    v4 = (void *)objc_msgSend_newFunctionWithName_(*(void **)(*(_QWORD *)a1 + 16), v2, (uint64_t)CFSTR("coverageHeatmapVertexShader"));
    v6 = (void *)objc_msgSend_newFunctionWithName_(*(void **)(*(_QWORD *)a1 + 16), v5, (uint64_t)CFSTR("coverageHeatmapFragmentShader"));
    objc_msgSend_setVertexFunction_(v3, v7, (uint64_t)v4);
    objc_msgSend_setFragmentFunction_(v3, v8, (uint64_t)v6);
    objc_msgSend_setVertexDescriptor_(v3, v9, *(_QWORD *)(a1 + 112));
    v12 = objc_msgSend_pixelFormat(*(void **)(a1 + 120), v10, v11);
    objc_msgSend_colorAttachments(v3, v13, v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v15, v16, 0);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setPixelFormat_(v17, v18, v12);

    v19 = **(id **)a1;
    v51 = 0;
    v21 = objc_msgSend_newRenderPipelineStateWithDescriptor_error_(v19, v20, (uint64_t)v3, &v51);
    v22 = v51;
    v23 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v21;

    if (*(_QWORD *)(a1 + 8))
    {
      v25 = objc_msgSend_newFunctionWithName_(*(void **)(*(_QWORD *)a1 + 16), v24, (uint64_t)CFSTR("coverageScoreVertexShader"));

      v27 = objc_msgSend_newFunctionWithName_(*(void **)(*(_QWORD *)a1 + 16), v26, (uint64_t)CFSTR("coverageScoreFragmentShader"));
      objc_msgSend_setVertexFunction_(v3, v28, v25);
      objc_msgSend_setFragmentFunction_(v3, v29, v27);
      v32 = objc_msgSend_pixelFormat(*(void **)(a1 + 128), v30, v31);
      objc_msgSend_colorAttachments(v3, v33, v34);
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectAtIndexedSubscript_(v35, v36, 0);
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setPixelFormat_(v37, v38, v32);

      v41 = objc_msgSend_pixelFormat(*(void **)(a1 + 136), v39, v40);
      objc_msgSend_setDepthAttachmentPixelFormat_(v3, v42, v41);
      v43 = **(id **)a1;
      v50 = v22;
      v45 = objc_msgSend_newRenderPipelineStateWithDescriptor_error_(v43, v44, (uint64_t)v3, &v50);
      v46 = v50;

      v47 = *(void **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v45;

      v48 = *(_QWORD *)(a1 + 16) != 0;
      v22 = v46;
      v4 = (void *)v25;
      v6 = (void *)v27;
    }
    else
    {
      v48 = 0;
    }

  }
  else
  {
    v22 = 0;
    v48 = 0;
  }

  return v48;
}

void sub_2393F3964(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

BOOL sub_2393F39F4(uint64_t a1)
{
  id v2;
  const char *v3;
  void *v4;
  const char *v5;
  id v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  _BOOL8 v10;

  v2 = objc_alloc_init(MEMORY[0x24BDDD590]);
  v4 = v2;
  if (v2)
  {
    objc_msgSend_setDepthCompareFunction_(v2, v3, 1);
    objc_msgSend_setDepthWriteEnabled_(v4, v5, 1);
    v6 = **(id **)a1;
    v8 = objc_msgSend_newDepthStencilStateWithDescriptor_(v6, v7, (uint64_t)v4);
    v9 = *(void **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;

    v10 = *(_QWORD *)(a1 + 24) != 0;
  }
  else
  {
    v10 = 0;
  }

  return v10;
}

void sub_2393F3A88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_2393F3AA4(uint64_t *a1)
{
  id v2;
  void *v3;
  const char *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  void *v8;
  const char *v9;
  void *v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  void *v16;
  const char *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  void *v29;
  const char *v30;
  id v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  void *v38;
  const char *v39;
  const char *v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  void *v44;
  const char *v45;
  const char *v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  void *v50;
  const char *v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  void *v55;
  const char *v56;
  void *v57;
  const char *v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  void *v62;
  const char *v63;
  const char *v64;
  uint64_t v65;
  void *v66;
  const char *v67;
  const char *v68;
  uint64_t v69;
  void *v70;
  const char *v71;
  uint64_t v72;
  const char *v73;
  uint64_t v74;
  void *v75;
  const char *v76;

  v2 = objc_alloc_init(MEMORY[0x24BDDD690]);
  v3 = (void *)a1[18];
  a1[18] = (uint64_t)v2;

  result = a1[18];
  if (result)
  {
    v7 = a1[15];
    objc_msgSend_colorAttachments((void *)result, v4, v5);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v8, v9, 0);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setTexture_(v10, v11, v7);

    objc_msgSend_colorAttachments((void *)a1[18], v12, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v14, v15, 0);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setLoadAction_(v16, v17, 2);

    objc_msgSend_colorAttachments((void *)a1[18], v18, v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v20, v21, 0);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setClearColor_(v22, v23, v24, 0.0, 0.0, 0.0, 0.0);

    objc_msgSend_colorAttachments((void *)a1[18], v25, v26);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v27, v28, 0);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setStoreAction_(v29, v30, 1);

    v31 = objc_alloc_init(MEMORY[0x24BDDD690]);
    v32 = (void *)a1[19];
    a1[19] = (uint64_t)v31;

    result = a1[19];
    if (result)
    {
      v35 = a1[16];
      objc_msgSend_colorAttachments((void *)result, v33, v34);
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectAtIndexedSubscript_(v36, v37, 0);
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setTexture_(v38, v39, v35);

      objc_msgSend_colorAttachments((void *)a1[19], v40, v41);
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectAtIndexedSubscript_(v42, v43, 0);
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setLoadAction_(v44, v45, 2);

      objc_msgSend_colorAttachments((void *)a1[19], v46, v47);
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectAtIndexedSubscript_(v48, v49, 0);
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setClearColor_(v50, v51, v52, 0.0, 0.0, 0.0, 0.0);

      objc_msgSend_colorAttachments((void *)a1[19], v53, v54);
      v55 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectAtIndexedSubscript_(v55, v56, 0);
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setStoreAction_(v57, v58, 1);

      v59 = a1[17];
      objc_msgSend_depthAttachment((void *)a1[19], v60, v61);
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setTexture_(v62, v63, v59);

      objc_msgSend_depthAttachment((void *)a1[19], v64, v65);
      v66 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setLoadAction_(v66, v67, 2);

      objc_msgSend_depthAttachment((void *)a1[19], v68, v69);
      v70 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setClearDepth_(v70, v71, v72, 1.0);

      objc_msgSend_depthAttachment((void *)a1[19], v73, v74);
      v75 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setStoreAction_(v75, v76, 0);

      return 1;
    }
  }
  return result;
}

void sub_2393F3D1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_2393F3D80(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, int a5, float a6)
{
  uint64_t result;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  uint32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  uint32x4_t v22;
  float32x4_t v23;
  float32x2_t v24;
  float32x2_t v25;
  uint32x2_t v26;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  uint32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  uint32x4_t v37;
  float32x4_t v38;
  float32x2_t v39;
  uint32x2_t v40;
  const char *v43;
  uint64_t v44;
  void *v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  unint64_t v50;
  float v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float v60;
  float v61;
  float v62;
  float v63;
  unsigned int v64;
  unint64_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  const char *v75;
  uint64_t v76;
  void *v77;
  const char *v78;
  void *v79;
  const char *v80;
  const char *v81;
  const char *v82;
  const char *v83;
  const char *v84;
  const char *v85;
  const char *v86;
  const char *v87;
  const char *v88;
  const char *v89;
  uint64_t v90;
  const char *v91;
  uint64_t v92;
  const char *v93;
  uint64_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float v98;
  float v99;
  float32x4_t v100;
  _OWORD v101[4];
  _QWORD v102[2];
  float64x2_t v103;
  __int128 v104;

  result = 0;
  if (*(_BYTE *)(a1 + 208) && *(float *)a2 > 0.0)
  {
    v10 = *(float32x4_t *)(a2 + 16);
    v11 = *(float32x4_t *)(a2 + 32);
    v12 = *(float32x4_t *)(a2 + 48);
    v14 = *(float32x4_t *)MEMORY[0x24BDAEDF8];
    v13 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 16);
    v15 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 32);
    v16 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
    v17 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v16, vabdq_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v10, *(float32x2_t *)v10.f32, 1), v11, *(float32x2_t *)v11.f32, 1), v12, *(float32x2_t *)v12.f32, 1), v13)), (int8x16_t)vcgeq_f32(v16, vabdq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v10, v10.f32[0]), v11, v11.f32[0]),
                                           v12,
                                           v12.f32[0]),
                                         *MEMORY[0x24BDAEDF8]))),
                        (int8x16_t)vcgeq_f32(v16, vabdq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v10, v10, 2), v11, v11, 2), v12, v12, 2), v15)));
    v17.i32[3] = v17.i32[2];
    if ((vminvq_u32(v17) & 0x80000000) == 0)
      return 0;
    v18 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2);
    v19 = (float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)v10, (int32x4_t)v12), (int32x4_t)v18);
    v20 = (float32x4_t)vtrn2q_s32((int32x4_t)v10, (int32x4_t)v11);
    v20.i32[2] = HIDWORD(*(_QWORD *)(a2 + 48));
    v21 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)v10, (int32x4_t)v12), (int32x4_t)v11);
    v22 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v16, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v21, v11.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1), v20), v18, v19), v13)), (int8x16_t)vcgeq_f32(v16, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v21, v10.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1),
                                             v20),
                                           (float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2),
                                           v19),
                                         v14))),
                        (int8x16_t)vcgeq_f32(v16, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v21, v12.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1), v20), (float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2), v19), v15)));
    v22.i32[3] = v22.i32[2];
    if ((vminvq_u32(v22) & 0x80000000) == 0)
      return 0;
    v23 = vmulq_f32(v10, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v12, (int8x16_t)v12, 0xCuLL), (int8x16_t)v12, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v11, (int32x4_t)v11), (int8x16_t)v11, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v12, (int32x4_t)v12), (int8x16_t)v12, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v11, (int8x16_t)v11, 0xCuLL), (int8x16_t)v11, 8uLL)));
    result = 0;
    if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v23, 2), vaddq_f32(v23, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v23.f32, 1))).f32[0]+ -1.0) <= 0.000011)
    {
      v24 = vabs_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL)));
      v25 = (float32x2_t)vdup_n_s32(0x38D1B717u);
      v26 = (uint32x2_t)vand_s8((int8x8_t)vcge_f32(v25, vabs_f32(vadd_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(a2 + 64), *(int8x16_t *)(a2 + 64), 8uLL)), (float32x2_t)0xBF80000080000000))), (int8x8_t)vcge_f32(v25, v24));
      if ((vpmin_u32(v26, v26).u32[0] & 0x80000000) != 0 && *(_QWORD *)(a2 + 80) && *(_QWORD *)(a2 + 88))
      {
        v28 = *(float32x4_t *)a4;
        v29 = *(float32x4_t *)(a4 + 16);
        v30 = *(float32x4_t *)(a4 + 32);
        v31 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
        v32 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v31, vabdq_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v28, *(float32x2_t *)v28.f32, 1), v29, *(float32x2_t *)v29.f32, 1), v30, *(float32x2_t *)v30.f32, 1), v13)), (int8x16_t)vcgeq_f32(v31, vabdq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v28, v28.f32[0]), v29, v29.f32[0]),
                                               v30,
                                               v30.f32[0]),
                                             v14))),
                            (int8x16_t)vcgeq_f32(v31, vabdq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v28, v28, 2), v29, v29, 2), v30, v30, 2), v15)));
        v32.i32[3] = v32.i32[2];
        if ((vminvq_u32(v32) & 0x80000000) == 0)
          return 0;
        v33 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v29, 2);
        v34 = (float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)v28, (int32x4_t)v30), (int32x4_t)v33);
        v35 = (float32x4_t)vtrn2q_s32((int32x4_t)v28, (int32x4_t)v29);
        v35.i32[2] = HIDWORD(*(_QWORD *)(a4 + 32));
        v36 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)v28, (int32x4_t)v30), (int32x4_t)v29);
        v37 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v31, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v36, v29.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 1), v35), v33, v34), v13)), (int8x16_t)vcgeq_f32(v31, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v36, v28.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28.f32, 1),
                                                 v35),
                                               (float32x4_t)vdupq_laneq_s32((int32x4_t)v28, 2),
                                               v34),
                                             v14))),
                            (int8x16_t)vcgeq_f32(v31, vabdq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v36, v30.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.f32, 1), v35), (float32x4_t)vdupq_laneq_s32((int32x4_t)v30, 2), v34), v15)));
        v37.i32[3] = v37.i32[2];
        if ((vminvq_u32(v37) & 0x80000000) == 0)
          return 0;
        v38 = vmulq_f32(v28, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v30, (int8x16_t)v30, 0xCuLL), (int8x16_t)v30, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v29, (int32x4_t)v29), (int8x16_t)v29, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v30, (int32x4_t)v30), (int8x16_t)v30, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v29, (int8x16_t)v29, 0xCuLL), (int8x16_t)v29, 8uLL)));
        result = 0;
        if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v38, 2), vaddq_f32(v38, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v38.f32, 1))).f32[0]+ -1.0) <= 0.000011&& a6 < 3.1416&& a6 > 0.0)
        {
          v39 = (float32x2_t)vdup_n_s32(0x38D1B717u);
          v40 = (uint32x2_t)vand_s8((int8x8_t)vcge_f32(v39, vabs_f32(vadd_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v30, (int8x16_t)v30, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(a4 + 48), *(int8x16_t *)(a4 + 48), 8uLL)), (float32x2_t)0xBF80000080000000))), (int8x8_t)vcge_f32(v39, vabs_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v28,
                                                                                           (int8x16_t)v28,
                                                                                           8uLL),
                                                                  (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL)))));
          if ((vpmin_u32(v40, v40).u32[0] & 0x80000000) != 0)
          {
            result = sub_2393BB59C(a1 + 32, a2, (uint64_t)a3);
            if ((_DWORD)result)
            {
              *(_DWORD *)(a1 + 288) = *(_DWORD *)(a1 + 76);
              v45 = (void *)objc_msgSend_contents(*(void **)(a1 + 96), v43, v44);
              memcpy(v45, a3, 4 * *(unsigned int *)(a1 + 288));
              result = 0;
              v46 = *(float32x4_t *)(a2 + 16);
              v47 = *(float32x4_t *)(a2 + 32);
              v48 = *(float32x4_t *)(a2 + 48);
              v49 = *(float32x4_t *)(a2 + 64);
              v50 = *(_QWORD *)(a1 + 200);
              v51 = (float)*(unint64_t *)(a1 + 192);
              v52 = vmlaq_f32(vmulq_n_f32(v46, *(float *)a2), (float32x4_t)0, v47);
              v53 = vmulq_f32(v46, (float32x4_t)0);
              v54 = vmlaq_n_f32(v53, v47, *(float *)a2);
              v55 = vmlaq_f32(v53, (float32x4_t)0, v47);
              v56 = vmlaq_f32(vmlaq_f32(v52, (float32x4_t)0, v48), (float32x4_t)0, v49);
              v57 = vmlaq_f32(vmlaq_f32(v54, (float32x4_t)0, v48), (float32x4_t)0, v49);
              v58 = vmlaq_f32(vmlaq_n_f32(v55, v48, *(float *)a2), (float32x4_t)0, v49);
              v59 = vaddq_f32(v49, vmlaq_f32(v55, (float32x4_t)0, v48));
              *(float32x4_t *)(a1 + 224) = v56;
              *(float32x4_t *)(a1 + 240) = v57;
              *(float32x4_t *)(a1 + 256) = v58;
              *(float32x4_t *)(a1 + 272) = v59;
              v60 = v51 / (float)v50;
              if (v60 >= 0.001)
              {
                v100 = v59;
                if (a6 >= 0.0 && fabsf(a6) > 0.000001)
                {
                  result = 0;
                  v61 = *(float *)(a1 + 164);
                  v62 = *(float *)(a1 + 168);
                  if (v62 > v61)
                  {
                    v99 = *(float *)(a1 + 168);
                    if (v62 >= 0.001)
                    {
                      v98 = *(float *)(a1 + 164);
                      if (v61 >= 0.001 && fabsf(a6 + -3.1416) > 0.000032416)
                      {
                        v96 = v57;
                        v97 = v58;
                        v95 = v56;
                        v63 = 1.0 / tanf(a6 * 0.5);
                        *(float *)&v64 = v63 / v60;
                        LODWORD(v65) = 0;
                        *((float *)&v65 + 1) = v63;
                        v66.i64[0] = 0;
                        v66.f32[2] = (float)-v99 / (float)(v99 - v98);
                        v67.i64[0] = 0;
                        v67.i32[3] = 0;
                        v66.i32[3] = -1.0;
                        v67.f32[2] = v66.f32[2] * v98;
                        v68 = *(float32x4_t *)(a4 + 16);
                        v69 = *(float32x4_t *)(a4 + 32);
                        v70 = *(float32x4_t *)(a4 + 48);
                        v71 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)a4, v95.f32[0]), v68, *(float32x2_t *)v95.f32, 1), v69, v95, 2), v70, v95, 3);
                        v72 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)a4, v96.f32[0]), v68, *(float32x2_t *)v96.f32, 1), v69, v96, 2), v70, v96, 3);
                        v73 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)a4, v97.f32[0]), v68, *(float32x2_t *)v97.f32, 1), v69, v97, 2), v70, v97, 3);
                        v74 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)a4, v100.f32[0]), v68, *(float32x2_t *)v100.f32, 1), v69, v100, 2), v70, v100, 3);
                        v101[0] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v64, v71.f32[0]), (float32x4_t)v65, *(float32x2_t *)v71.f32, 1), v66, v71, 2), v67, v71, 3);
                        v101[1] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v64, v72.f32[0]), (float32x4_t)v65, *(float32x2_t *)v72.f32, 1), v66, v72, 2), v67, v72, 3);
                        v101[2] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v64, v73.f32[0]), (float32x4_t)v65, *(float32x2_t *)v73.f32, 1), v66, v73, 2), v67, v73, 3);
                        v101[3] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v64, v74.f32[0]), (float32x4_t)v65, *(float32x2_t *)v74.f32, 1), v66, v74, 2), v67, v74, 3);
                        objc_msgSend_commandBuffer(*(void **)(*(_QWORD *)a1 + 8), v75, v76);
                        v77 = (void *)objc_claimAutoreleasedReturnValue();
                        objc_msgSend_renderCommandEncoderWithDescriptor_(v77, v78, *(_QWORD *)(a1 + 152));
                        v79 = (void *)objc_claimAutoreleasedReturnValue();
                        objc_msgSend_setLabel_(v79, v80, (uint64_t)CFSTR("CoverageScoreRenderEncoder"));
                        objc_msgSend_setRenderPipelineState_(v79, v81, *(_QWORD *)(a1 + 16));
                        objc_msgSend_setDepthStencilState_(v79, v82, *(_QWORD *)(a1 + 24));
                        objc_msgSend_setVertexBuffer_offset_atIndex_(v79, v83, *(_QWORD *)(a1 + 88), 0, 0);
                        objc_msgSend_setVertexBytes_length_atIndex_(v79, v84, (uint64_t)v101, 64, 1);
                        objc_msgSend_setVertexBuffer_offset_atIndex_(v79, v85, *(_QWORD *)(a1 + 96), 0, 2);
                        objc_msgSend_setVertexBytes_length_atIndex_(v79, v86, a1 + 288, 4, 3);
                        objc_msgSend_drawPrimitives_vertexStart_vertexCount_(v79, v87, 3, 0, (36 * *(_DWORD *)(a1 + 288)));
                        v102[0] = 0;
                        v102[1] = 0;
                        v103 = vcvtq_f64_u64(*(uint64x2_t *)(a1 + 192));
                        v104 = xmmword_2393F5400;
                        objc_msgSend_setViewport_(v79, v88, (uint64_t)v102);
                        objc_msgSend_endEncoding(v79, v89, v90);

                        if (a5)
                          sub_2393F44C8((uint64_t *)a1, v77);
                        objc_msgSend_commit(v77, v91, v92, *(_OWORD *)&v95, *(_OWORD *)&v96, *(_OWORD *)&v97);
                        objc_msgSend_waitUntilCompleted(v77, v93, v94);

                        return 1;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_2393F44AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2393F44C8(uint64_t *a1, void *a2)
{
  const char *v3;
  const char *v4;
  const char *v5;
  const char *v6;
  const char *v7;
  const char *v8;
  uint64_t v9;
  id v10;

  objc_msgSend_renderCommandEncoderWithDescriptor_(a2, (const char *)a2, a1[18]);
  v10 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setLabel_(v10, v3, (uint64_t)CFSTR("CoverageHeatmapRenderEncoder"));
  objc_msgSend_setRenderPipelineState_(v10, v4, a1[1]);
  objc_msgSend_setVertexBuffer_offset_atIndex_(v10, v5, a1[13], 0, 0);
  objc_msgSend_setFragmentTexture_atIndex_(v10, v6, a1[16], 0);
  objc_msgSend_drawPrimitives_vertexStart_vertexCount_(v10, v7, 4, 0, 4);
  objc_msgSend_endEncoding(v10, v8, v9);

}

void sub_2393F455C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x24BDBB820](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x24BDBB850]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x24BDBB860](theArray, idx);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x24BDBBA18]();
}

CFDataRef CFDataCreateWithBytesNoCopy(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator)
{
  return (CFDataRef)MEMORY[0x24BDBBCC0](allocator, bytes, length, bytesDeallocator);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x24BDBBCE0](theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x24BDBBCF8](theData);
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
  MEMORY[0x24BDBBDB8](theDict, applier, context);
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x24BDBBDC0](theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x24BDBBDD8](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x24BDBBDF0](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x24BDBBE00](theDict);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
  MEMORY[0x24BDBBE10](theDict, keys, values);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x24BDBBE18]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x24BDBBE30](theDict, key);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x24BDBBE60](theDict, key, value);
}

CFAllocatorRef CFGetAllocator(CFTypeRef cf)
{
  return (CFAllocatorRef)MEMORY[0x24BDBBEE0](cf);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x24BDBBEF8](cf);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x24BDBC0A0](allocator, theType, valuePtr);
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x24BDBC130](number, theType, valuePtr);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x24BDBC298](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x24BDBC2A8](cf);
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x24BDBC4D0](theString1, theString2, compareOptions);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x24BDBC598](alloc, formatOptions, format);
}

uint64_t CGImageCreateEXIFJPEGData()
{
  return MEMORY[0x24BDD9028]();
}

