double FIK::Task::Task(uint64_t a1, uint64_t *a2, int a3, char a4, uint64_t a5)
{
  uint64_t v5;
  double result;

  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + *(_QWORD *)(v5 - 264)) = a2[1];
  *(_DWORD *)(a1 + 8) = -1;
  *(_DWORD *)(a1 + 24) = a3;
  *(_BYTE *)(a1 + 29) = a4;
  *(_QWORD *)(a1 + 40) = a5;
  *(_QWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 136) = 1065353216;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 34) = 1;
  *(_DWORD *)(a1 + 30) = 16842752;
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)(a1 + 48) = _Q0;
  *(_QWORD *)(a1 + 72) = -3229614080;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(a1 + 64) = result;
  *(_BYTE *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  return result;
}

uint64_t FIK::Task::setDofs(uint64_t this, unsigned int a2, int a3, int a4)
{
  if (*(unsigned __int8 *)(this + 32) != a2
    || *(unsigned __int8 *)(this + 33) != a3
    || *(unsigned __int8 *)(this + 34) != a4)
  {
    *(_BYTE *)(this + 32) = a2;
    *(_BYTE *)(this + 33) = a3;
    *(_BYTE *)(this + 34) = a4;
    *(_BYTE *)(*(_QWORD *)(this + 128) + 381) = 1;
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 136))(this, a3 | a4 | a2, 0);
  }
  return this;
}

uint64_t FIK::Task::isDofEnabled(FIK::Task *this, unsigned int a2)
{
  return *((unsigned __int8 *)this + a2 + 32);
}

uint64_t FIK::Task::setLength(uint64_t this, int a2)
{
  *(_DWORD *)(this + 76) = a2;
  *(_BYTE *)(*(_QWORD *)(this + 128) + 381) = 1;
  return this;
}

uint64_t FIK::Task::registerTask(uint64_t this, float **a2, float *a3)
{
  uint64_t v3;

  *(_QWORD *)(this + 88) = a2;
  if (*(_DWORD *)(this + 24) == 3)
  {
    v3 = *(unsigned int *)(this + 12);
    *(_QWORD *)(this + 96) = a2[*(unsigned int *)(this + 8)];
    *(_QWORD *)(this + 104) = a2[v3];
    *(_QWORD *)(this + 112) = a2[*(unsigned int *)(this + 16)];
  }
  *(_QWORD *)(this + 120) = a3;
  return this;
}

uint64_t FIK::Task::setActive(uint64_t this, int a2, int a3)
{
  if (a3)
  {
    *(_BYTE *)(this + 34) = a2;
    *(_BYTE *)(this + 33) = a2;
    *(_BYTE *)(this + 32) = a2;
  }
  if (*(unsigned __int8 *)(this + 29) != a2)
  {
    *(_BYTE *)(this + 29) = a2;
    *(_BYTE *)(*(_QWORD *)(this + 128) + 381) = 1;
  }
  return this;
}

uint64_t FIK::Task::setWeight(FIK::Task *this, int32x2_t a2)
{
  *((int32x4_t *)this + 3) = vdupq_lane_s32(a2, 0);
  return FIK::Solver::weightTask(*((FIK::Solver **)this + 16), this);
}

uint64_t FIK::Task::setDofWeight(FIK::Task *this, unsigned int a2, float a3)
{
  *((float *)this + a2 + 13) = a3;
  return FIK::Solver::weightTask(*((FIK::Solver **)this + 16), this);
}

float FIK::Task::setPrecision(FIK::Task *this, float a2)
{
  float v2;
  float v3;

  v2 = 2.0;
  if (a2 <= 2.0)
    v2 = a2;
  if (a2 >= 0.001)
    v3 = v2;
  else
    v3 = 0.001;
  *((float *)this + 17) = v3;
  *((float *)this + 18) = v3;
  *((float *)this + 16) = v3;
  *((float *)this + 34) = v3;
  return FIK::Solver::setTaskPrecision(*((FIK::Solver **)this + 16), this);
}

float FIK::Task::setDofPrecision(FIK::Task *this, unsigned int a2, float a3)
{
  float v3;
  float v4;

  v3 = 2.0;
  if (a3 <= 2.0)
    v3 = a3;
  if (a3 >= 0.001)
    v4 = v3;
  else
    v4 = 0.001;
  *((float *)this + a2 + 16) = v4;
  return FIK::Solver::setTaskPrecision(*((FIK::Solver **)this + 16), this);
}

uint64_t FIK::Task::fillJacobian(FIK::Task *this)
{
  uint64_t result;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  char *v10;

  result = (*(uint64_t (**)(FIK::Task *))(*(_QWORD *)this + 168))(this);
  if ((result & 1) != 0
    || (result = (*(uint64_t (**)(FIK::Task *))(*(_QWORD *)this + 160))(this), (_DWORD)result))
  {
    v3 = *((_QWORD *)this + 5);
    if (v3)
    {
      v4 = 0;
      do
      {
        if (v4 >= *((_DWORD *)this + 19))
          break;
        if (*(_BYTE *)(v3 + 814))
        {
          v5 = *(_DWORD *)(v3 + 516);
          result = (*(uint64_t (**)(FIK::Task *))(*(_QWORD *)this + 168))(this);
          v6 = 0;
          if ((_DWORD)result)
            v7 = 3;
          else
            v7 = 6;
          do
          {
            if (*(_BYTE *)(v3 + v6 + 808))
            {
              v8 = *((unsigned int *)this + 6);
              if ((_DWORD)v8)
              {
                v9 = *((_DWORD *)this + 2);
                v10 = (char *)this + 32;
                do
                {
                  if (*v10++)
                    *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 8 * v9) + 4 * v5) = 1065353216;
                  ++v9;
                  --v8;
                }
                while (v8);
              }
              ++v5;
            }
            ++v6;
          }
          while (v6 != v7);
        }
        ++v4;
        v3 = *(_QWORD *)(v3 + 32);
      }
      while (v3);
    }
  }
  return result;
}

uint64_t FIK::Task::Active(FIK::Task *this)
{
  return *((unsigned __int8 *)this + 29);
}

uint64_t FIK::Task::TaskId(FIK::Task *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t FIK::Task::Size(FIK::Task *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t FIK::Task::NoDofs(FIK::Task *this)
{
  return *((unsigned __int8 *)this + 33)
       + *((unsigned __int8 *)this + 32)
       + *((unsigned __int8 *)this + 34);
}

float FIK::Task::Weight(FIK::Task *this)
{
  return *((float *)this + 12);
}

uint64_t FIK::Task::getLength(FIK::Task *this)
{
  return *((unsigned int *)this + 19);
}

float FIK::Task::getDofWeight(FIK::Task *this, unsigned int a2)
{
  return *((float *)this + a2 + 13);
}

float FIK::Task::getDofPrecision(FIK::Task *this, unsigned int a2)
{
  return *((float *)this + a2 + 16);
}

uint64_t FIK::Task::Positional(FIK::Task *this)
{
  return 0;
}

uint64_t FIK::Task::Orientational(FIK::Task *this)
{
  return 0;
}

uint64_t FIK::Task::Kinetic(FIK::Task *this)
{
  return 0;
}

uint64_t FIK::Task::Supporting(FIK::Task *this)
{
  return 0;
}

uint64_t FIK::Task::Gravitational(FIK::Task *this)
{
  return 0;
}

uint64_t FIK::Task::getSegment(FIK::Task *this)
{
  return *((_QWORD *)this + 5);
}

uint64_t FIK::Task::setUserData(uint64_t this, void *a2)
{
  *(_QWORD *)(this + 144) = a2;
  return this;
}

uint64_t FIK::Task::getUserData(FIK::Task *this)
{
  return *((_QWORD *)this + 18);
}

uint64_t FIK::Task::isDependent(FIK::Task *this)
{
  return *((unsigned __int8 *)this + 31);
}

uint64_t `covariant return thunk to'FIK::Task::getDependentTask(FIK::Task *this)
{
  _QWORD *v1;

  v1 = *(_QWORD **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 248) + 160);
  if (v1)
    return (uint64_t)v1 + *(_QWORD *)(*v1 - 264);
  else
    return 0;
}

uint64_t FIK::Task::getDependentTask(FIK::Task *this)
{
  return *((_QWORD *)this + 20);
}

uint64_t `covariant return thunk to'FIK::Task::getDependentOnTask(FIK::Task *this)
{
  _QWORD *v1;

  v1 = *(_QWORD **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 256) + 152);
  if (v1)
    return (uint64_t)v1 + *(_QWORD *)(*v1 - 264);
  else
    return 0;
}

uint64_t FIK::Task::getDependentOnTask(FIK::Task *this)
{
  return *((_QWORD *)this + 19);
}

uint64_t FIK::Task::setDerevativeRule(uint64_t this)
{
  *(_BYTE *)(this + 28) = 0;
  return this;
}

_QWORD *std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  const std::locale::facet *v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x212BCAEDC](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = a2 + a3;
    if ((*(_DWORD *)(v6 + 8) & 0xB0) == 0x20)
      v9 = v8;
    else
      v9 = a2;
    v10 = *(_DWORD *)(v6 + 144);
    if (v10 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v11 = std::locale::use_facet(&v14, MEMORY[0x24BEDB350]);
      v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v10;
    }
    if (!std::__pad_and_output[abi:nn180100]<char,std::char_traits<char>>(v7, a2, v9, v8, v6, (char)v10))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x212BCAEE8](v13);
  return a1;
}

uint64_t std::__pad_and_output[abi:nn180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      std::string::basic_string[abi:nn180100](__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

_QWORD *std::string::basic_string[abi:nn180100](_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

float32x4_t FIK::Segment::computeLookAtTarget@<Q0>(float32x4_t *a1@<X0>, int32x4_t *a2@<X1>, float32x4_t *a3@<X2>, float32x4_t *a4@<X8>)
{
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  int32x4_t v7;
  float32x4_t v8;
  int32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float v14;
  BOOL v15;
  float v16;
  float32x4_t v17;
  float32x4_t v18;
  float v19;
  float32x4_t v20;
  int32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float v24;
  float32x4_t v25;
  float32x4_t v26;
  float v27;
  float32x4_t v28;
  int32x4_t v29;
  float32x4_t v30;
  int32x4_t v31;
  float32x4_t v32;
  int8x16_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t result;

  v4 = a1[28];
  v5 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v4, (int32x4_t)v4), (int8x16_t)v4, 0xCuLL);
  v6 = vnegq_f32(v4);
  v7 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*a2, *a2), *(int8x16_t *)a2, 0xCuLL), v6), *(float32x4_t *)a2, v5);
  v8 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v7, v7), (int8x16_t)v7, 0xCuLL);
  v9 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v8, (int32x4_t)v8), (int8x16_t)v8, 0xCuLL), v6), v8, v5);
  v10 = vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v9, v9), (int8x16_t)v9, 0xCuLL), v8, v4, 3);
  v8.i64[0] = 0x4000000040000000;
  v8.i64[1] = 0x4000000040000000;
  v11 = vmlaq_f32(*(float32x4_t *)a2, v8, v10);
  v12 = v11;
  v12.i32[3] = 0;
  v13 = vmulq_f32(v12, v12);
  v13.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1))).f32[0]);
  v14 = 1.0 / v13.f32[0];
  v15 = v13.f32[0] == 0.0;
  v16 = 0.0;
  if (!v15)
    v16 = v14;
  v17 = vmulq_n_f32(v11, v16);
  v18 = vmulq_f32(*a3, v17);
  v19 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 2), vaddq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1))).f32[0];
  if (v19 >= 1.0)
  {
    v28 = (float32x4_t)xmmword_210802BA0;
  }
  else if (v19 >= -0.999999)
  {
    v29 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)a3, *(int32x4_t *)a3), *(int8x16_t *)a3, 0xCuLL), vnegq_f32(v17)), *a3, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v17, (int32x4_t)v17), (int8x16_t)v17, 0xCuLL));
    v30 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v29, v29), (int8x16_t)v29, 0xCuLL);
    v30.i32[3] = sqrtf((float)(v19 + 1.0) + (float)(v19 + 1.0));
    v31.i32[1] = 1056964608;
    v31.i64[1] = 0x3F0000003F000000;
    *(float *)v31.i32 = 1.0 / v30.f32[3];
    v32 = (float32x4_t)vzip1q_s32(v31, v31);
    v32.f32[2] = 1.0 / v30.f32[3];
    v28 = vmulq_f32(v30, v32);
  }
  else
  {
    v20 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v17, (int32x4_t)v17), (int8x16_t)v17, 0xCuLL);
    v21 = (int32x4_t)vmlaq_f32(vmulq_f32(v20, (float32x4_t)xmmword_210802BB0), (float32x4_t)xmmword_210802BC0, v17);
    v22 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v21, v21), (int8x16_t)v21, 0xCuLL);
    v22.i32[3] = 0;
    v23 = vmulq_f32(v22, v22);
    v24 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v23, 2), vaddq_f32(v23, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v23.f32, 1))).f32[0]);
    if (fabsf(v24) < 0.000000001)
    {
      v25 = vmlaq_f32(vmulq_f32(v20, (float32x4_t)xmmword_210802BD0), (float32x4_t)xmmword_210802BE0, v17);
      v26 = vmulq_f32(v25, v25);
      v22 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v25, (int32x4_t)v25), (int8x16_t)v25, 0xCuLL);
      v24 = sqrtf(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 2), v26)).f32[0]);
    }
    v27 = 1.0 / v24;
    if (v24 == 0.0)
      v27 = 0.0;
    v28 = vmulq_n_f32(v22, v27);
    v28.i32[3] = 0;
  }
  v33 = (int8x16_t)vtrn2q_s32((int32x4_t)v4, vtrn1q_s32((int32x4_t)v4, (int32x4_t)v6));
  v34 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v4, (int8x16_t)v6, 8uLL), *(float32x2_t *)v28.f32, 1), (float32x4_t)vextq_s8(v33, v33, 8uLL), v28.f32[0]);
  v35 = (float32x4_t)vrev64q_s32((int32x4_t)v4);
  v35.i32[0] = v6.i32[1];
  v35.i32[3] = v6.i32[2];
  result = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v4, v28, 3), v35, v28, 2), v34);
  *a4 = result;
  return result;
}

FIK::Segment *FIK::Segment::Segment(FIK::Segment *this, int a2, int a3)
{
  _OWORD *v6;
  void (***v7)(FIK::CrtAllocator *__hidden);
  void (***v8)(FIK::CrtAllocator *__hidden);
  __int128 v9;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v6 = (_OWORD *)((char *)this + 536);
  *(_QWORD *)this = &off_24CA6C118;
  v7 = FIK::defaultAllocator(this);
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = v7;
  *((_QWORD *)this + 4) = 0;
  v8 = FIK::defaultAllocator((FIK *)v7);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = v8;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 16) = xmmword_210802BA0;
  v9 = *((_OWORD *)this + 16);
  *((_OWORD *)this + 22) = 0u;
  *((_QWORD *)this + 54) = 0;
  *((_QWORD *)this + 55) = 0;
  *((_OWORD *)this + 28) = xmmword_210802BA0;
  *((_DWORD *)this + 128) = a2;
  *((_DWORD *)this + 129) = -1;
  *((_BYTE *)this + 532) = a3;
  *(_QWORD *)((char *)this + 612) = 0x3DCCCCCD3F800000;
  *((_OWORD *)this + 49) = xmmword_210802BA0;
  *((_BYTE *)this + 818) = 0;
  *((_BYTE *)this + 823) = 0;
  *((_OWORD *)this + 57) = 0u;
  *((_OWORD *)this + 58) = 0u;
  *((_OWORD *)this + 55) = 0u;
  *((_OWORD *)this + 56) = 0u;
  *((_OWORD *)this + 53) = 0u;
  *((_OWORD *)this + 54) = 0u;
  *((_OWORD *)this + 52) = 0u;
  __asm { FMOV            V3.2S, #1.0 }
  *((_QWORD *)this + 69) = _D3;
  __asm { FMOV            V4.4S, #1.0 }
  *v6 = _Q4;
  *((_OWORD *)this + 24) = xmmword_210802BA0;
  *((_OWORD *)this + 25) = xmmword_210802BF0;
  v16 = *MEMORY[0x24BDAEDF8];
  v17 = *(_OWORD *)(MEMORY[0x24BDAEDF8] + 16);
  v18 = *(_OWORD *)(MEMORY[0x24BDAEDF8] + 32);
  *((_OWORD *)this + 8) = v17;
  *((_OWORD *)this + 9) = v18;
  *((_OWORD *)this + 23) = v9;
  *((_OWORD *)this + 10) = v16;
  *((_OWORD *)this + 11) = v17;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = v16;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = xmmword_210802BA0;
  *((_OWORD *)this + 12) = v18;
  *((_OWORD *)this + 13) = 0u;
  *((_DWORD *)this + 140) = 0;
  *((_OWORD *)this + 55) = 0u;
  *((_OWORD *)this + 56) = 0u;
  *((_OWORD *)this + 54) = 0u;
  v6[6] = xmmword_210802C10;
  v6[7] = xmmword_210802C00;
  *((_QWORD *)this + 83) = 0x40490FDBC0490FDBLL;
  *(_OWORD *)((char *)this + 696) = 0u;
  *(_OWORD *)((char *)this + 712) = 0u;
  *(_OWORD *)((char *)this + 680) = 0u;
  *((_DWORD *)this + 132) = 2;
  *((_DWORD *)this + 131) = 2;
  *((_OWORD *)this + 36) = xmmword_210802BE0;
  *((_OWORD *)this + 37) = xmmword_210802BA0;
  *((_BYTE *)this + 825) = 1;
  *((_BYTE *)this + 535) = 1;
  *((_QWORD *)this + 101) = 0x101000000010101;
  *((_QWORD *)this + 97) = 0;
  *((_QWORD *)this + 100) = 0;
  *((_WORD *)this + 408) = 0;
  *(_DWORD *)((char *)this + 819) = 0;
  *((_BYTE *)this + 534) = 1;
  *((_DWORD *)this + 152) = 1022739087;
  *((_BYTE *)this + 533) = a3;
  *((_DWORD *)this + 189) = 0;
  *((_QWORD *)this + 71) = 0;
  *((_QWORD *)this + 78) = _D3;
  *((_DWORD *)this + 155) = 1065353216;
  FIK::Segment::setActiveDofs((uint64_t)this, a3, a3, a3, 0);
  return this;
}

uint64_t FIK::Segment::setActiveDofs(uint64_t this, int a2, int a3, int a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  char v13;

  if (a5)
    v5 = 0;
  else
    v5 = 3;
  v6 = this + v5;
  if (a5)
    v7 = 0;
  else
    v7 = 3;
  v8 = (v7 + 1);
  if (*(unsigned __int8 *)(v6 + 808) != a2
    || *(unsigned __int8 *)(this + v8 + 808) != a3
    || *(unsigned __int8 *)(this + (v7 + 2) + 808) != a4)
  {
    *(_BYTE *)(v6 + 808) = a2;
    *(_BYTE *)(this + 808 + v8) = a3;
    *(_BYTE *)(this + 808 + (v7 + 2)) = a4;
    v9 = *(_BYTE **)(this + 776);
    if (v9)
      *v9 = 1;
    v10 = *(_QWORD *)(this + 800);
    if (v10)
      *(_BYTE *)(v10 + 382) = 1;
    if ((a5 & 1) == 0)
    {
      if (*(_BYTE *)(this + 533) || *(_QWORD *)(this + 72))
      {
        *(_BYTE *)(this + 532) = a3 | a4 | a2;
      }
      else
      {
        *(_BYTE *)(this + 532) = 0;
        *(_BYTE *)(this + 813) = 0;
        *(_WORD *)(this + 811) = 0;
      }
    }
    v11 = 0;
    v12 = 0;
    v13 = 0;
    *(_DWORD *)(this + 512) = 0;
    do
    {
      if (*(_BYTE *)(this + 808 + v12))
      {
        *(_DWORD *)(this + 512) = ++v11;
        v13 = 1;
      }
      ++v12;
    }
    while (v12 != 6);
    if (*(_BYTE *)(this + 814) != (v13 & 1))
    {
      *(_BYTE *)(this + 814) = v13 & 1;
      if (v9)
        *v9 = 1;
      if (v10)
        *(_BYTE *)(v10 + 382) = 1;
    }
  }
  return this;
}

_QWORD *FIK::Segment::registerSegment(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  result[100] = a2;
  result[97] = a3;
  result[95] = a4;
  result[96] = a5;
  return result;
}

uint64_t FIK::Segment::enforceLimits(uint64_t this, char a2)
{
  *(_BYTE *)(this + 819) = a2;
  return this;
}

float32x4_t *FIK::Segment::resetStretch(float32x4_t *this, int a2)
{
  uint64_t i;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;

  for (i = this[4].i64[1]; i; i = *(_QWORD *)(i + 80))
  {
    *(_OWORD *)(i + 96) = *(_OWORD *)(i + 864);
    *(_BYTE *)(i + 815) = 1;
  }
  if (this[33].i8[4])
  {
    v3 = this[54];
    this[6] = v3;
    v4 = this[13];
    v5 = v3;
  }
  else
  {
    v4 = this[14];
    this[13] = v4;
    v5 = this[6];
    v3 = this[54];
  }
  v6 = vmulq_f32(v4, v4);
  v7 = vsubq_f32(v5, v3);
  v8 = vmulq_f32(v7, v7);
  this[25].f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v6, 2), vaddq_f32(v6, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v6.f32, 1))).f32[0])+ sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v8, 2), vaddq_f32(v8, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 1))).f32[0]);
  if (a2)
    return (float32x4_t *)FIK::Segment::setActiveDofs((uint64_t)this, 0, 0, 0, 0);
  return this;
}

uint64_t FIK::Segment::setActive(uint64_t this, int a2, int a3)
{
  _BYTE *v3;
  uint64_t v4;

  if (a3)
  {
    *(_WORD *)(this + 812) = 257 * a2;
    *(_DWORD *)(this + 808) = 16843009 * a2;
  }
  if (*(unsigned __int8 *)(this + 814) != a2)
  {
    *(_BYTE *)(this + 814) = a2;
    v3 = *(_BYTE **)(this + 776);
    if (v3)
      *v3 = 1;
    v4 = *(_QWORD *)(this + 800);
    if (v4)
      *(_BYTE *)(v4 + 382) = 1;
  }
  return this;
}

uint64_t FIK::Segment::setActiveRotationDoFs(FIK::Segment *this, int a2, int a3, int a4)
{
  return FIK::Segment::setActiveDofs((uint64_t)this, a2, a3, a4, 1);
}

uint64_t FIK::Segment::setActiveTranslationDoFs(FIK::Segment *this, int a2, int a3, int a4)
{
  return FIK::Segment::setActiveDofs((uint64_t)this, a2, a3, a4, 0);
}

__n128 FIK::Segment::resetSegment(FIK::Segment *this)
{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;

  v1 = *((_OWORD *)this + 8);
  *((_OWORD *)this + 10) = *((_OWORD *)this + 7);
  *((_OWORD *)this + 11) = v1;
  v2 = *((_OWORD *)this + 9);
  v3 = *((_OWORD *)this + 23);
  *((_OWORD *)this + 15) = v3;
  v4 = *((_OWORD *)this + 14);
  *((_OWORD *)this + 12) = v2;
  *((_OWORD *)this + 13) = v4;
  result = *((__n128 *)this + 54);
  *((__n128 *)this + 6) = result;
  *((_OWORD *)this + 24) = v3;
  *((_BYTE *)this + 815) = 1;
  return result;
}

__n128 FIK::Segment::setRestTranslation(__n128 *this, __n128 a2, float a3, float a4)
{
  __n128 result;

  a2.n128_f32[1] = a3;
  a2.n128_f32[2] = a4;
  this[6] = a2;
  this[54] = a2;
  this[50].n128_u8[15] = 1;
  result.n128_u64[0] = a2.n128_u64[0];
  result.n128_u32[2] = a2.n128_u32[2];
  return result;
}

__n128 FIK::Segment::setRestTranslation(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[6] = *a2;
  a1[54] = result;
  a1[50].n128_u8[15] = 1;
  return result;
}

__n128 FIK::Segment::setRestTransform(uint64_t a1, uint64_t a2)
{
  float32x4_t v2;
  int8x16_t v3;
  float32x2_t v4;
  float32x4_t v5;
  unsigned __int32 v6;
  float32x2_t v7;
  float32x2_t v8;
  __int128 v9;
  float v10;
  float v11;
  float v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __n128 result;

  v2 = *(float32x4_t *)(a2 + 16);
  v3 = (int8x16_t)vmulq_f32(v2, v2);
  v4 = vadd_f32(*(float32x2_t *)v3.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v3, v3, 8uLL));
  if (vaddv_f32(v4) == 0.0)
  {
    v5 = (float32x4_t)xmmword_210802BA0;
  }
  else
  {
    v6 = vadd_f32(v4, (float32x2_t)vdup_lane_s32((int32x2_t)v4, 1)).u32[0];
    v7 = vrsqrte_f32((float32x2_t)v6);
    v8 = vmul_f32(v7, vrsqrts_f32((float32x2_t)v6, vmul_f32(v7, v7)));
    v5 = vmulq_n_f32(v2, vmul_f32(v8, vrsqrts_f32((float32x2_t)v6, vmul_f32(v8, v8))).f32[0]);
  }
  *(float32x4_t *)(a1 + 368) = v5;
  v9 = *(_OWORD *)(a1 + 368);
  *(_OWORD *)(a1 + 784) = v9;
  *(_OWORD *)(a1 + 384) = v9;
  *(_OWORD *)(a1 + 240) = v9;
  if (*(_BYTE *)(a1 + 534))
    *(_OWORD *)(a1 + 784) = *(_OWORD *)(a1 + 368);
  v10 = *(float *)(a1 + 240);
  v11 = *(float *)(a1 + 244);
  v12 = *(float *)(a1 + 248);
  v13 = *(float *)(a1 + 252);
  *(float *)&v14 = (float)((float)((float)(v10 * v10) - (float)(v11 * v11)) - (float)(v12 * v12)) + (float)(v13 * v13);
  *((float *)&v14 + 1) = (float)((float)(v12 * v13) + (float)(v10 * v11))
                       + (float)((float)(v12 * v13) + (float)(v10 * v11));
  *(float *)&v15 = (float)-(float)((float)(v12 * v13) - (float)(v10 * v11))
                 - (float)((float)(v12 * v13) - (float)(v10 * v11));
  *((float *)&v15 + 1) = (float)((float)((float)(v11 * v11) - (float)(v12 * v12)) + (float)(v13 * v13))
                       - (float)(v10 * v10);
  *(float *)&v16 = (float)((float)(v11 * v13) + (float)(v12 * v10)) + (float)((float)(v11 * v13) + (float)(v12 * v10));
  *((float *)&v16 + 1) = (float)-(float)((float)(v10 * v13) - (float)(v11 * v12))
                       - (float)((float)(v10 * v13) - (float)(v11 * v12));
  *(_QWORD *)(a1 + 112) = v14;
  v17 = a1 + 112;
  *(float *)(v17 + 8) = (float)-(float)((float)(v11 * v13) - (float)(v10 * v12))
                      - (float)((float)(v11 * v13) - (float)(v10 * v12));
  *(float *)(v17 + 24) = (float)((float)(v10 * v13) + (float)(v11 * v12))
                       + (float)((float)(v10 * v13) + (float)(v11 * v12));
  *(_QWORD *)(v17 + 16) = v15;
  *(float *)(v17 + 40) = (float)((float)((float)(v13 * v13) + (float)(v12 * v12)) - (float)(v10 * v10))
                       - (float)(v11 * v11);
  *(_QWORD *)(v17 + 32) = v16;
  v18 = *(_OWORD *)(v17 + 16);
  *(_OWORD *)(v17 + 48) = *(_OWORD *)v17;
  *(_OWORD *)(v17 + 64) = v18;
  *(_OWORD *)(v17 + 80) = *(_OWORD *)(v17 + 32);
  v19 = *(_OWORD *)(v17 + 16 * *(int *)(v17 + 416));
  *(_OWORD *)(v17 + 720) = v19;
  *(_OWORD *)(v17 + 736) = v19;
  *(_BYTE *)(v17 + 703) = 1;
  result = *(__n128 *)a2;
  *(_OWORD *)(v17 - 16) = *(_OWORD *)a2;
  *(__n128 *)(v17 + 752) = result;
  *(_BYTE *)(v17 + 703) = 1;
  return result;
}

__n128 FIK::Segment::setTranslation(__n128 *this, __n128 a2, float a3, float a4)
{
  __n128 result;

  a2.n128_f32[1] = a3;
  a2.n128_f32[2] = a4;
  this[6] = a2;
  this[50].n128_u8[15] = 1;
  result.n128_u64[0] = a2.n128_u64[0];
  result.n128_u32[2] = a2.n128_u32[2];
  return result;
}

__n128 FIK::Segment::setTranslation(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[6] = *a2;
  a1[50].n128_u8[15] = 1;
  return result;
}

uint64_t FIK::Segment::computeReach(uint64_t this, float *a2)
{
  float v2;

  v2 = *a2;
  do
  {
    v2 = *(float *)(this + 400) + v2;
    *a2 = v2;
    this = *(_QWORD *)(this + 32);
  }
  while (this);
  return this;
}

double FIK::Segment::setRestOrientation(FIK::Segment *this, float32x4_t a2, float32_t a3, float a4, float a5)
{
  double result;
  float32x4_t v6;

  a2.f32[1] = a3;
  a2.i64[1] = __PAIR64__(LODWORD(a5), LODWORD(a4));
  v6 = a2;
  *(_QWORD *)&result = FIK::Segment::setRestOrientation((uint64_t)this, &v6).n128_u64[0];
  return result;
}

__n128 FIK::Segment::setRestOrientation(uint64_t a1, float32x4_t *a2)
{
  float32x4_t v2;
  int8x16_t v3;
  float32x2_t v4;
  float32x4_t v5;
  unsigned __int32 v6;
  float32x2_t v7;
  float32x2_t v8;
  __int128 v9;
  float v10;
  float v11;
  float v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __n128 result;

  v2 = *a2;
  v3 = (int8x16_t)vmulq_f32(v2, v2);
  v4 = vadd_f32(*(float32x2_t *)v3.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v3, v3, 8uLL));
  if (vaddv_f32(v4) == 0.0)
  {
    v5 = (float32x4_t)xmmword_210802BA0;
  }
  else
  {
    v6 = vadd_f32(v4, (float32x2_t)vdup_lane_s32((int32x2_t)v4, 1)).u32[0];
    v7 = vrsqrte_f32((float32x2_t)v6);
    v8 = vmul_f32(v7, vrsqrts_f32((float32x2_t)v6, vmul_f32(v7, v7)));
    v5 = vmulq_n_f32(v2, vmul_f32(v8, vrsqrts_f32((float32x2_t)v6, vmul_f32(v8, v8))).f32[0]);
  }
  *(float32x4_t *)(a1 + 368) = v5;
  v9 = *(_OWORD *)(a1 + 368);
  *(_OWORD *)(a1 + 784) = v9;
  *(_OWORD *)(a1 + 384) = v9;
  *(_OWORD *)(a1 + 240) = v9;
  if (*(_BYTE *)(a1 + 534))
    *(_OWORD *)(a1 + 784) = *(_OWORD *)(a1 + 368);
  v10 = *(float *)(a1 + 240);
  v11 = *(float *)(a1 + 244);
  v12 = *(float *)(a1 + 248);
  v13 = *(float *)(a1 + 252);
  *(float *)&v14 = (float)((float)((float)(v10 * v10) - (float)(v11 * v11)) - (float)(v12 * v12)) + (float)(v13 * v13);
  *((float *)&v14 + 1) = (float)((float)(v12 * v13) + (float)(v10 * v11))
                       + (float)((float)(v12 * v13) + (float)(v10 * v11));
  *(float *)&v15 = (float)-(float)((float)(v12 * v13) - (float)(v10 * v11))
                 - (float)((float)(v12 * v13) - (float)(v10 * v11));
  *((float *)&v15 + 1) = (float)((float)((float)(v11 * v11) - (float)(v12 * v12)) + (float)(v13 * v13))
                       - (float)(v10 * v10);
  *(float *)&v16 = (float)((float)(v11 * v13) + (float)(v12 * v10)) + (float)((float)(v11 * v13) + (float)(v12 * v10));
  *((float *)&v16 + 1) = (float)-(float)((float)(v10 * v13) - (float)(v11 * v12))
                       - (float)((float)(v10 * v13) - (float)(v11 * v12));
  *(_QWORD *)(a1 + 112) = v14;
  v17 = a1 + 112;
  *(float *)(v17 + 8) = (float)-(float)((float)(v11 * v13) - (float)(v10 * v12))
                      - (float)((float)(v11 * v13) - (float)(v10 * v12));
  *(float *)(v17 + 24) = (float)((float)(v10 * v13) + (float)(v11 * v12))
                       + (float)((float)(v10 * v13) + (float)(v11 * v12));
  *(_QWORD *)(v17 + 16) = v15;
  *(float *)(v17 + 40) = (float)((float)((float)(v13 * v13) + (float)(v12 * v12)) - (float)(v10 * v10))
                       - (float)(v11 * v11);
  *(_QWORD *)(v17 + 32) = v16;
  v18 = *(_OWORD *)(v17 + 16);
  *(_OWORD *)(v17 + 48) = *(_OWORD *)v17;
  *(_OWORD *)(v17 + 64) = v18;
  *(_OWORD *)(v17 + 80) = *(_OWORD *)(v17 + 32);
  result = *(__n128 *)(v17 + 16 * *(int *)(v17 + 416));
  *(__n128 *)(v17 + 720) = result;
  *(__n128 *)(v17 + 736) = result;
  *(_BYTE *)(v17 + 703) = 1;
  return result;
}

float32x4_t *FIK::Segment::setOrientation(float32x4_t *this, float32x4_t a2, float32_t a3, float a4, float a5)
{
  int8x16_t v5;
  float32x2_t v6;
  float32x4_t v7;
  unsigned __int32 v8;
  float32x2_t v9;
  float32x2_t v10;

  a2.f32[1] = a3;
  a2.i64[1] = __PAIR64__(LODWORD(a5), LODWORD(a4));
  v5 = (int8x16_t)vmulq_f32(a2, a2);
  v6 = vadd_f32(*(float32x2_t *)v5.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL));
  if (vaddv_f32(v6) == 0.0)
  {
    v7 = (float32x4_t)xmmword_210802BA0;
  }
  else
  {
    v8 = vadd_f32(v6, (float32x2_t)vdup_lane_s32((int32x2_t)v6, 1)).u32[0];
    v9 = vrsqrte_f32((float32x2_t)v8);
    v10 = vmul_f32(v9, vrsqrts_f32((float32x2_t)v8, vmul_f32(v9, v9)));
    v7 = vmulq_n_f32(a2, vmul_f32(v10, vrsqrts_f32((float32x2_t)v8, vmul_f32(v10, v10))).f32[0]);
  }
  this[15] = v7;
  this[50].i8[15] = 1;
  return this;
}

float32x4_t *FIK::Segment::setOrientation(float32x4_t *result, float32x4_t *a2)
{
  float32x4_t v2;
  int8x16_t v3;
  float32x2_t v4;
  float32x4_t v5;
  unsigned __int32 v6;
  float32x2_t v7;
  float32x2_t v8;

  v2 = *a2;
  v3 = (int8x16_t)vmulq_f32(v2, v2);
  v4 = vadd_f32(*(float32x2_t *)v3.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v3, v3, 8uLL));
  if (vaddv_f32(v4) == 0.0)
  {
    v5 = (float32x4_t)xmmword_210802BA0;
  }
  else
  {
    v6 = vadd_f32(v4, (float32x2_t)vdup_lane_s32((int32x2_t)v4, 1)).u32[0];
    v7 = vrsqrte_f32((float32x2_t)v6);
    v8 = vmul_f32(v7, vrsqrts_f32((float32x2_t)v6, vmul_f32(v7, v7)));
    v5 = vmulq_n_f32(v2, vmul_f32(v8, vrsqrts_f32((float32x2_t)v6, vmul_f32(v8, v8))).f32[0]);
  }
  result[15] = v5;
  result[50].i8[15] = 1;
  return result;
}

uint64_t FIK::Segment::getPos(FIK::Segment *this)
{
  return (uint64_t)this + 96;
}

uint64_t FIK::Segment::getPosition(FIK::Segment *this)
{
  return (uint64_t)this + 96;
}

uint64_t FIK::Segment::RayTrace(uint64_t a1, float32x4_t *a2, float32x4_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  float32x4_t v7;

  if (**(_BYTE **)(a1 + 776))
    return 0;
  result = *(_QWORD *)(a1 + 928);
  if (result)
  {
    v7 = vaddq_f32(*a2, vmulq_f32(*a3, (float32x4_t)vdupq_n_s32(0xC2480000)));
    return (*(uint64_t (**)(uint64_t, uint64_t, float32x4_t *, float32x4_t *, uint64_t, uint64_t))(*(_QWORD *)result + 32))(result, a1 + 432, &v7, a3, a4, a5);
  }
  return result;
}

uint64_t FIK::Segment::getGlobalPos(FIK::Segment *this)
{
  return (uint64_t)this + 416;
}

uint64_t FIK::Segment::getGlobalPosition(FIK::Segment *this)
{
  return (uint64_t)this + 416;
}

float32x4_t *FIK::Segment::getQ(float32x4_t *this)
{
  float32x4_t v1;
  int8x16_t v2;
  float32x2_t v3;
  float32x4_t v4;
  unsigned __int32 v5;
  float32x2_t v6;
  float32x2_t v7;

  v1 = this[15];
  v2 = (int8x16_t)vmulq_f32(v1, v1);
  v3 = vadd_f32(*(float32x2_t *)v2.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v2, v2, 8uLL));
  if (vaddv_f32(v3) == 0.0)
  {
    v4 = (float32x4_t)xmmword_210802BA0;
  }
  else
  {
    v5 = vadd_f32(v3, (float32x2_t)vdup_lane_s32((int32x2_t)v3, 1)).u32[0];
    v6 = vrsqrte_f32((float32x2_t)v5);
    v7 = vmul_f32(v6, vrsqrts_f32((float32x2_t)v5, vmul_f32(v6, v6)));
    v4 = vmulq_n_f32(v1, vmul_f32(v7, vrsqrts_f32((float32x2_t)v5, vmul_f32(v7, v7))).f32[0]);
  }
  this[15] = v4;
  this[16] = this[15];
  return this + 16;
}

uint64_t FIK::Segment::getRotation(FIK::Segment *this)
{
  return (uint64_t)this + 240;
}

float32x4_t *FIK::Segment::getDeltaQ(float32x4_t *this)
{
  float32x4_t v1;
  float32x4_t v2;
  int32x4_t v3;
  int8x16_t v4;
  float32x4_t v5;
  float32x4_t v6;

  v1 = vmulq_f32(this[23], (float32x4_t)xmmword_210802C20);
  v2 = this[15];
  v3 = (int32x4_t)vnegq_f32(v2);
  v4 = (int8x16_t)vtrn2q_s32((int32x4_t)v2, vtrn1q_s32((int32x4_t)v2, v3));
  v5 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v2, (int8x16_t)v3, 8uLL), *(float32x2_t *)v1.f32, 1), (float32x4_t)vextq_s8(v4, v4, 8uLL), v1.f32[0]);
  v6 = (float32x4_t)vrev64q_s32((int32x4_t)v2);
  v6.i32[0] = v3.i32[1];
  v6.i32[3] = v3.i32[2];
  this[16] = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v2, v1, 3), v6, v1, 2), v5);
  return this + 16;
}

float32x4_t *FIK::Segment::getDeltaRotation(float32x4_t *this)
{
  float32x4_t v1;
  float32x4_t v2;
  int32x4_t v3;
  int8x16_t v4;
  float32x4_t v5;
  float32x4_t v6;

  v1 = vmulq_f32(this[23], (float32x4_t)xmmword_210802C20);
  v2 = this[15];
  v3 = (int32x4_t)vnegq_f32(v2);
  v4 = (int8x16_t)vtrn2q_s32((int32x4_t)v2, vtrn1q_s32((int32x4_t)v2, v3));
  v5 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v2, (int8x16_t)v3, 8uLL), *(float32x2_t *)v1.f32, 1), (float32x4_t)vextq_s8(v4, v4, 8uLL), v1.f32[0]);
  v6 = (float32x4_t)vrev64q_s32((int32x4_t)v2);
  v6.i32[0] = v3.i32[1];
  v6.i32[3] = v3.i32[2];
  this[16] = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v2, v1, 3), v6, v1, 2), v5);
  return this + 16;
}

uint64_t FIK::Segment::getGlobalQ(FIK::Segment *this)
{
  return (uint64_t)this + 448;
}

uint64_t FIK::Segment::getGlobalRotation(FIK::Segment *this)
{
  return (uint64_t)this + 448;
}

uint64_t FIK::Segment::getGlobalMat(FIK::Segment *this)
{
  float v1;
  float v2;
  float v3;
  float v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *((float *)this + 112);
  v2 = *((float *)this + 113);
  v3 = *((float *)this + 114);
  v4 = *((float *)this + 115);
  *(float *)&v5 = (float)((float)((float)(v1 * v1) - (float)(v2 * v2)) - (float)(v3 * v3)) + (float)(v4 * v4);
  *((float *)&v5 + 1) = (float)((float)(v3 * v4) + (float)(v1 * v2)) + (float)((float)(v3 * v4) + (float)(v1 * v2));
  *(float *)&v6 = (float)-(float)((float)(v3 * v4) - (float)(v1 * v2)) - (float)((float)(v3 * v4) - (float)(v1 * v2));
  *((float *)&v6 + 1) = (float)((float)((float)(v2 * v2) - (float)(v3 * v3)) + (float)(v4 * v4)) - (float)(v1 * v1);
  *(float *)&v7 = (float)((float)(v2 * v4) + (float)(v3 * v1)) + (float)((float)(v2 * v4) + (float)(v3 * v1));
  *((float *)&v7 + 1) = (float)-(float)((float)(v1 * v4) - (float)(v2 * v3))
                      - (float)((float)(v1 * v4) - (float)(v2 * v3));
  *((float *)this + 70) = (float)-(float)((float)(v2 * v4) - (float)(v1 * v3))
                        - (float)((float)(v2 * v4) - (float)(v1 * v3));
  *((_QWORD *)this + 34) = v5;
  *((float *)this + 74) = (float)((float)(v1 * v4) + (float)(v2 * v3)) + (float)((float)(v1 * v4) + (float)(v2 * v3));
  *((_QWORD *)this + 36) = v6;
  *((float *)this + 78) = (float)((float)((float)(v4 * v4) + (float)(v3 * v3)) - (float)(v1 * v1)) - (float)(v2 * v2);
  *((_QWORD *)this + 38) = v7;
  return (uint64_t)this + 272;
}

_QWORD *FIK::Segment::setParent(_QWORD *this, FIK::Segment *a2)
{
  FIK::Segment *v2;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  v2 = (FIK::Segment *)this[4];
  if (v2 != a2)
  {
    v4 = this;
    if (v2)
    {
      v5 = (_QWORD *)*((_QWORD *)v2 + 9);
      if (v5)
      {
        if (v5 == this)
        {
          *((_QWORD *)v2 + 9) = this[10];
          if (!a2)
            goto LABEL_9;
          goto LABEL_8;
        }
        do
        {
          v6 = v5;
          v5 = (_QWORD *)v5[10];
        }
        while (v5 != this);
        v6[10] = this[10];
      }
    }
    if (!a2)
    {
LABEL_9:
      v4[4] = a2;
      return this;
    }
LABEL_8:
    this = FIK::Segment::addChild(a2, (FIK::Segment *)this);
    v4[10] = *((_QWORD *)a2 + 9);
    *((_QWORD *)a2 + 9) = v4;
    goto LABEL_9;
  }
  return this;
}

_QWORD *FIK::Segment::addChild(FIK::Segment *this, FIK::Segment *a2)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  FIK::Segment **v7;
  uint64_t v8;
  uint64_t v9;

  v6 = *((_QWORD *)this + 5);
  result = (_QWORD *)((char *)this + 40);
  v5 = v6;
  if (v6)
  {
    v7 = (FIK::Segment **)result[2];
    v8 = 8 * v5;
    while (*v7 != a2)
    {
      ++v7;
      v8 -= 8;
      if (!v8)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    result = FIK::IKArray<FIK::Segment *>::reserve(result, v5 + 1);
    v9 = *((_QWORD *)this + 5);
    *(_QWORD *)(*((_QWORD *)this + 7) + 8 * v9) = a2;
    *((_QWORD *)this + 5) = v9 + 1;
  }
  return result;
}

float32x4_t *FIK::Segment::updateAugCenter(float32x4_t *result, float32x4_t *a2, float32x4_t *a3)
{
  float v5;
  uint64_t i;

  v5 = result[47].f32[1];
  if (v5 != 0.0)
    *a3 = vaddq_f32(*a3, vmulq_n_f32(vsubq_f32(result[56], *a2), v5));
  for (i = result[4].i64[1]; i; i = *(_QWORD *)(i + 80))
    result = (float32x4_t *)FIK::Segment::updateAugCenter(i, a2, a3);
  return result;
}

double FIK::Segment::computeAugCenter(float32x4_t *this)
{
  float v2;
  float32x4_t v3;
  float32x4_t *v4;
  float32x4_t *v5;
  float32x4_t v6;

  v2 = this[35].f32[3];
  if (v2 == 0.0)
  {
    v6.i64[0] = 0;
    this[57] = 0u;
  }
  else
  {
    v3 = vmulq_n_f32(vsubq_f32(this[56], this[26]), this[47].f32[1]);
    v4 = this + 57;
    this[57] = v3;
    v5 = (float32x4_t *)this[4].i64[1];
    if (v5)
    {
      do
      {
        FIK::Segment::updateAugCenter(v5, this + 26, this + 57);
        v5 = (float32x4_t *)v5[5].i64[0];
      }
      while (v5);
      v2 = this[35].f32[3];
      v3 = this[57];
    }
    v6 = vmulq_n_f32(v3, 1.0 / v2);
    *v4 = v6;
  }
  return *(double *)v6.i64;
}

uint64_t FIK::Segment::computeCGWeight(uint64_t this, float a2)
{
  uint64_t v3;
  float *v4;
  uint64_t i;
  float v6;

  v3 = this;
  v4 = (float *)(this + 572);
  *(_DWORD *)(this + 572) = *(_DWORD *)(this + 756);
  for (i = *(_QWORD *)(this + 72); i; i = *(_QWORD *)(i + 80))
    this = FIK::Segment::updateAugMass(i, v4);
  v6 = 0.0;
  if (a2 > 0.0)
    v6 = *v4 / a2;
  *(float *)(v3 + 568) = v6;
  return this;
}

uint64_t FIK::Segment::updateAugMass(uint64_t this, float *a2)
{
  FIK::Segment *i;

  *a2 = *(float *)(this + 756) + *a2;
  for (i = *(FIK::Segment **)(this + 72); i; i = (FIK::Segment *)*((_QWORD *)i + 10))
    this = FIK::Segment::updateAugMass(i, a2);
  return this;
}

float32x4_t *FIK::Segment::setMass(FIK::Segment *this, float a2)
{
  float32x4_t *result;

  *((float *)this + 189) = a2;
  result = (float32x4_t *)*((_QWORD *)this + 100);
  if (result)
    result = FIK::Solver::recomputeCGWeights(result);
  *((_BYTE *)this + 815) = 1;
  return result;
}

uint64_t FIK::Segment::setMaxW(uint64_t this, float a2)
{
  *(float *)(this + 608) = a2;
  return this;
}

uint64_t FIK::Segment::getAugCenter(FIK::Segment *this)
{
  return (uint64_t)this + 912;
}

uint64_t FIK::Segment::getCenter(FIK::Segment *this)
{
  return (uint64_t)this + 880;
}

uint64_t FIK::Segment::getCenterofMass(FIK::Segment *this)
{
  return (uint64_t)this + 880;
}

float32x4_t FIK::Segment::translateSegment(float32x4_t *this, float32x4_t a2, float32_t a3, float32_t a4)
{
  float32x4_t result;

  a2.f32[1] = a3;
  a2.f32[2] = a4;
  result = vaddq_f32(a2, this[6]);
  this[6] = result;
  this[50].i8[15] = 1;
  return result;
}

float32x4_t FIK::Segment::translateSegment(float32x4_t *a1, float32x4_t *a2)
{
  float32x4_t result;

  result = vaddq_f32(*a2, a1[6]);
  a1[6] = result;
  a1[50].i8[15] = 1;
  return result;
}

uint64_t FIK::Segment::scaleSegment(float32x4_t *this, float a2)
{
  float32x4_t v3;
  float32x4_t v4;
  uint64_t result;

  this[6] = vmulq_n_f32(this[6], a2);
  v3 = vmulq_n_f32(this[14], a2);
  this[13] = vmulq_n_f32(this[13], a2);
  this[14] = v3;
  v4 = vmulq_n_f32(this[27], a2);
  this[26] = vmulq_n_f32(this[26], a2);
  this[27] = v4;
  this[25].f32[0] = this[25].f32[0] * a2;
  this[55] = vmulq_n_f32(this[55], a2);
  result = this[50].i64[0];
  if (result)
    result = FIK::Solver::recomputeScale(result);
  this[50].i8[15] = 1;
  return result;
}

void FIK::Segment::setLimits(FIK::Segment *this, unsigned int a2, float a3, float a4)
{
  float v9;
  float v10;
  uint64_t *v11;
  float *v12;
  BOOL v15;

  if (a2 >= 4)
  {
    v11 = ikinemaLogObject();
    ikinemaAssertHandler(*v11, 0, (uint64_t)"setLimits", "(axis <= 3) There are 4 valid axes");
LABEL_10:
    v12 = (float *)((char *)this + 8 * a2);
    v12[160] = a3;
    v12[161] = a4;
    if (a2 == 2)
    {
      if (a3 <= -1.0 && a4 >= 1.0)
        goto LABEL_29;
      *((_BYTE *)this + 562) = 1;
    }
    else if (a2 == 1)
    {
      if (a3 <= -1.0 && a4 >= 1.0)
        goto LABEL_29;
      *((_BYTE *)this + 561) = 1;
    }
    else
    {
      if (a2 || a3 <= -1.0 && a4 >= 1.0)
        goto LABEL_29;
      *((_BYTE *)this + 560) = 1;
    }
    *((_BYTE *)this + 817) = 1;
    goto LABEL_29;
  }
  if (a2 != 3)
    goto LABEL_10;
  if (a3 > -180.0 || a4 < 180.0)
  {
    v9 = atan2f(*((float *)this + *((int *)this + 131) + 92), *((float *)this + 95));
    v10 = v9 + v9;
    *((float *)this + 166) = (float)(a3 * 0.017453) + v10;
    *((float *)this + 167) = (float)(a4 * 0.017453) + v10;
    *((_BYTE *)this + 563) = 1;
    *((float *)this + 168) = a3;
    *((float *)this + 169) = a4;
  }
LABEL_29:
  v15 = !*((_BYTE *)this + 560) && !*((_BYTE *)this + 561) && !*((_BYTE *)this + 562) && *((_BYTE *)this + 563) == 0;
  *((_BYTE *)this + 825) = v15;
}

uint64_t FIK::Segment::setAlwaysToRest(uint64_t this, int a2)
{
  *(_BYTE *)(this + 825) = a2;
  if (a2)
    *(_BYTE *)(this + 817) = 1;
  return this;
}

uint64_t FIK::Segment::enableLimits(uint64_t this, int a2)
{
  BOOL v2;
  _BYTE *v3;

  if (!a2)
  {
    v3 = (_BYTE *)(this + 817);
LABEL_13:
    *v3 = 0;
    return this;
  }
  v2 = *(_BYTE *)(this + 560)
    || *(_BYTE *)(this + 561)
    || *(_BYTE *)(this + 562)
    || *(_BYTE *)(this + 563)
    || *(_BYTE *)(this + 825) != 0;
  *(_BYTE *)(this + 817) = v2;
  if (*(_BYTE *)(this + 825))
    *(_OWORD *)(this + 384) = *(_OWORD *)(this + 368);
  if (!*(_BYTE *)(this + 816))
  {
    v3 = (_BYTE *)(this + 535);
    goto LABEL_13;
  }
  return this;
}

uint64_t FIK::Segment::enableRetargeting(uint64_t this, char a2, int a3)
{
  BOOL v3;

  *(_BYTE *)(this + 535) = a2;
  if (*(_BYTE *)(this + 816))
    v3 = 1;
  else
    v3 = a3 == 0;
  if (!v3 && (a2 & 1) == 0)
    return FIK::Segment::enableLimits(this, 1);
  return this;
}

uint64_t FIK::Segment::setSegAddErrors(uint64_t this, char a2)
{
  *(_BYTE *)(this + 816) = a2;
  return this;
}

uint64_t FIK::Segment::setWeight(FIK::Segment *this, int a2, float a3)
{
  uint64_t result;

  *((float *)this + a2 + 134) = a3;
  result = *((_QWORD *)this + 100);
  if (result)
    return FIK::Solver::weightSegment(result, this);
  return result;
}

uint64_t FIK::Segment::setWeight(FIK::Segment *a1, int a2, float a3)
{
  uint64_t result;

  *((float *)a1 + a2 + 134) = (float)(a3 + -1.0) + 1.0;
  result = *((_QWORD *)a1 + 100);
  if (result)
    return FIK::Solver::weightSegment(result, a1);
  return result;
}

{
  uint64_t result;

  *((float *)a1 + a2 + 134) = (float)(a3 + -1.0) + 1.0;
  result = *((_QWORD *)a1 + 100);
  if (result)
    return FIK::Solver::weightSegment(result, a1);
  return result;
}

uint64_t FIK::Segment::setStiffness(FIK::Segment *a1, int a2, float a3)
{
  uint64_t result;

  *((float *)a1 + a2 + 134) = 1.0 - a3;
  result = *((_QWORD *)a1 + 100);
  if (result)
    return FIK::Solver::weightSegment(result, a1);
  return result;
}

{
  uint64_t result;

  *((float *)a1 + a2 + 134) = 1.0 - a3;
  result = *((_QWORD *)a1 + 100);
  if (result)
    return FIK::Solver::weightSegment(result, a1);
  return result;
}

float32x4_t FIK::Segment::setTargetRotation(float32x4_t *a1, float32x4_t *a2)
{
  float32x4_t v2;
  int8x16_t v3;
  float32x2_t v4;
  float32x4_t result;
  unsigned __int32 v6;
  float32x2_t v7;
  float32x2_t v8;

  v2 = *a2;
  v3 = (int8x16_t)vmulq_f32(v2, v2);
  v4 = vadd_f32(*(float32x2_t *)v3.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v3, v3, 8uLL));
  if (vaddv_f32(v4) == 0.0)
  {
    result = (float32x4_t)xmmword_210802BA0;
  }
  else
  {
    v6 = vadd_f32(v4, (float32x2_t)vdup_lane_s32((int32x2_t)v4, 1)).u32[0];
    v7 = vrsqrte_f32((float32x2_t)v6);
    v8 = vmul_f32(v7, vrsqrts_f32((float32x2_t)v6, vmul_f32(v7, v7)));
    result = vmulq_n_f32(v2, vmul_f32(v8, vrsqrts_f32((float32x2_t)v6, vmul_f32(v8, v8))).f32[0]);
  }
  a1[49] = result;
  if (a1[33].i8[7])
  {
    result = a1[49];
    a1[24] = result;
  }
  return result;
}

float32x4_t FIK::Segment::setTargetOrientation(float32x4_t *this, float32x4_t a2, float32_t a3, float a4, float a5)
{
  int8x16_t v5;
  float32x2_t v6;
  float32x4_t result;
  unsigned __int32 v8;
  float32x2_t v9;
  float32x2_t v10;

  a2.f32[1] = a3;
  a2.i64[1] = __PAIR64__(LODWORD(a5), LODWORD(a4));
  v5 = (int8x16_t)vmulq_f32(a2, a2);
  v6 = vadd_f32(*(float32x2_t *)v5.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL));
  if (vaddv_f32(v6) == 0.0)
  {
    result = (float32x4_t)xmmword_210802BA0;
  }
  else
  {
    v8 = vadd_f32(v6, (float32x2_t)vdup_lane_s32((int32x2_t)v6, 1)).u32[0];
    v9 = vrsqrte_f32((float32x2_t)v8);
    v10 = vmul_f32(v9, vrsqrts_f32((float32x2_t)v8, vmul_f32(v9, v9)));
    result = vmulq_n_f32(a2, vmul_f32(v10, vrsqrts_f32((float32x2_t)v8, vmul_f32(v10, v10))).f32[0]);
  }
  this[49] = result;
  if (this[33].i8[7])
  {
    result = this[49];
    this[24] = result;
  }
  return result;
}

void FIK::Segment::getStretchLimitsError(FIK::Segment *this, float *a2, float a3, float *a4)
{
  float *v4;
  float *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  uint64_t v11;
  uint64_t v12;
  float *v13;
  float *v14;
  uint64_t v15;
  float v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  float v21;

  if (*((_QWORD *)this + 4))
  {
    v4 = a4;
    v5 = a2;
    if (!a2)
    {
      v7 = *((unsigned int *)this + 129);
      v8 = *((_QWORD *)this + 96) + 4 * v7;
      v9 = *((unsigned __int8 *)this + 808);
      v10 = &a4[v7 + v9];
      v11 = v8 + 4 * v9;
      v12 = *((unsigned __int8 *)this + 809);
      v13 = &v10[v12];
      v14 = (float *)(v11 + 4 * v12);
      if (*((_BYTE *)this + 810))
        v4 = v13 + 1;
      else
        v4 = v13;
      if (*((_BYTE *)this + 810))
        v5 = v14 + 1;
      else
        v5 = v14;
    }
    v15 = 0;
    v16 = *((float *)this + 158) * a3;
    if (*((_BYTE *)this + 533))
      v17 = (char *)this + 864;
    else
      v17 = (char *)this + 224;
    if (*((_BYTE *)this + 533))
      v18 = (char *)this + 96;
    else
      v18 = (char *)this + 208;
    v19 = (char *)this + 811;
    v20 = 708;
    do
    {
      if (v19[v15])
      {
        v21 = *(float *)&v17[4 * v15] - *(float *)&v18[4 * v15];
        *v5 = v16 * v21;
        if (*((_BYTE *)this + 824))
          *v4++ = fmaxf(*((float *)this + v15 + 137)* cosf(*(float *)((char *)this + v20) - (float)(*(float *)((char *)this + v20 - 4) * v21)), 0.01);
        ++v5;
      }
      ++v15;
      v20 += 8;
    }
    while (v15 != 3);
  }
}

void FIK::Segment::computeLimitsEnforcement(float32x4_t *this, float a2)
{
  uint64_t v4;
  float v5;
  unsigned __int32 v6;
  float32x4_t v7;

  if (this[50].i8[14] && this[51].i8[1])
  {
    FIK::Segment::limitsEnforcementCorrection(this, &v7);
    v4 = 0;
    v5 = v7.f32[3] * (float)(this[38].f32[1] * a2);
    v6 = this[32].u32[1];
    do
    {
      if (this[50].i8[v4 + 8])
      {
        *(float *)(this[47].i64[1] + 4 * v6) = *(float *)(this[47].i64[1] + 4 * v6) + (float)(v5 * v7.f32[v4]);
        ++v6;
      }
      ++v4;
    }
    while (v4 != 3);
  }
}

uint64_t FIK::Segment::Active(FIK::Segment *this)
{
  return *((unsigned __int8 *)this + 814);
}

void FIK::Segment::limitsEnforcementCorrection(float32x4_t *this@<X0>, float32x4_t *a2@<X8>)
{
  float32x4_t v3;
  __int32 v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  int32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  uint32x4_t v18;
  float32x4_t v19;
  float v20;
  BOOL v21;
  float v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  int32x2_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float v32;
  float32x4_t v33;
  float32x4_t v34;
  float v35;
  int32x4_t v36;
  float32x4_t v37;
  int8x16_t v38;
  float32x2_t v39;
  unsigned __int32 v40;
  float32x2_t v41;
  float32x2_t v42;
  int32x4_t v43;
  int8x16_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  int8x16_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t *v51;
  uint64_t v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float32x4_t v57;
  float v58;
  float32x4_t v59;
  float v60;
  float32x4_t v61;
  float v62;
  float32x4_t v63;
  float32x4_t v64;
  int32x4_t v65;
  int8x16_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  int32x4_t v70;
  int8x16_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float v74;
  float v75;
  float v76;
  float32x4_t v77;
  float v78;
  float32x4_t v79;
  float v80;
  __float2 v81;
  int32x4_t v82;
  int8x16_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  int32x4_t v88;

  v3 = (float32x4_t)xmmword_210802BA0;
  *a2 = (float32x4_t)xmmword_210802BA0;
  if (this[51].i8[1])
  {
    if (this[35].i8[0] || this[35].i8[1] || this[35].i8[2])
    {
      v5 = this[33].i32[0];
      v88 = 0uLL;
      v88.i32[v5 % 3] = 1065353216;
      v6 = this[15];
      v7 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v6, (int32x4_t)v6), (int8x16_t)v6, 0xCuLL);
      v8 = vnegq_f32(v6);
      v9 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v88, v88), (int8x16_t)v88, 0xCuLL), v8), (float32x4_t)v88, v7);
      v10 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v9, v9), (int8x16_t)v9, 0xCuLL);
      v11 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v10, (int32x4_t)v10), (int8x16_t)v10, 0xCuLL), v8), v10, v7);
      v12 = vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v11, (int32x4_t)v11), (int8x16_t)v11, 0xCuLL), v10, v6, 3);
      v10.i64[0] = 0x4000000040000000;
      v10.i64[1] = 0x4000000040000000;
      v13 = vmlaq_f32((float32x4_t)v88, v10, v12);
      v14 = v13;
      v14.i32[3] = 0;
      v12.i32[0] = this[40].i32[0];
      v12.i32[1] = this[40].i32[2];
      v12.i32[2] = this[41].i32[0];
      v15 = vmaxnmq_f32(v14, v12);
      v15.i32[3] = 0;
      v11.i32[0] = this[40].i32[1];
      v11.i32[1] = this[40].i32[3];
      v11.i32[2] = this[41].i32[1];
      v16 = vminnmq_f32(v15, v11);
      v17 = v16;
      v17.i32[3] = 0;
      v18 = (uint32x4_t)vceqq_f32(v17, v14);
      v18.i32[3] = v18.i32[2];
      if ((vminvq_u32(v18) & 0x80000000) == 0)
      {
        v19 = vmulq_f32(v17, v17);
        v19.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2), vaddq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 1))).f32[0]);
        v20 = 1.0 / v19.f32[0];
        v21 = v19.f32[0] == 0.0;
        v22 = 0.0;
        if (!v21)
          v22 = v20;
        v23 = vmulq_n_f32(v16, v22);
        v24 = vmulq_f32(v6, (float32x4_t)xmmword_210802C20);
        v25 = vmulq_f32(v14, v23);
        v26 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), vaddq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1))).u64[0];
        v27 = (float32x4_t)xmmword_210802BA0;
        if (*(float *)v26.i32 < 1.0)
        {
          if (*(float *)v26.i32 >= -0.999999)
          {
            *(float *)v26.i32 = sqrtf((float)(*(float *)v26.i32 + 1.0) + (float)(*(float *)v26.i32 + 1.0));
            v36 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v23, (int32x4_t)v23), (int8x16_t)v23, 0xCuLL), vnegq_f32(v13)), v23, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v13, (int32x4_t)v13), (int8x16_t)v13, 0xCuLL));
            v37 = vdivq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v36, v36), (int8x16_t)v36, 0xCuLL), (float32x4_t)vdupq_lane_s32(v26, 0));
            v37.f32[3] = *(float *)v26.i32 * 0.5;
            v38 = (int8x16_t)vmulq_f32(v37, v37);
            v39 = vadd_f32(*(float32x2_t *)v38.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL));
            if (vaddv_f32(v39) != 0.0)
            {
              v40 = vadd_f32(v39, (float32x2_t)vdup_lane_s32((int32x2_t)v39, 1)).u32[0];
              v41 = vrsqrte_f32((float32x2_t)v40);
              v42 = vmul_f32(v41, vrsqrts_f32((float32x2_t)v40, vmul_f32(v41, v41)));
              v27 = vmulq_n_f32(v37, vmul_f32(v42, vrsqrts_f32((float32x2_t)v40, vmul_f32(v42, v42))).f32[0]);
            }
          }
          else
          {
            v28 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v13, (int32x4_t)v13), (int8x16_t)v13, 0xCuLL);
            v29 = (int32x4_t)vmlaq_f32(vmulq_f32(v28, (float32x4_t)xmmword_210802BB0), (float32x4_t)xmmword_210802BC0, v13);
            v30 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v29, v29), (int8x16_t)v29, 0xCuLL);
            v30.i32[3] = 0;
            v31 = vmulq_f32(v30, v30);
            v32 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v31, 2), vaddq_f32(v31, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v31.f32, 1))).f32[0]);
            if (fabsf(v32) < 0.000000001)
            {
              v33 = vmlaq_f32(vmulq_f32(v28, (float32x4_t)xmmword_210802BD0), (float32x4_t)xmmword_210802BE0, v13);
              v34 = vmulq_f32(v33, v33);
              v30 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v33, (int32x4_t)v33), (int8x16_t)v33, 0xCuLL);
              v32 = sqrtf(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v34.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v34, 2), v34)).f32[0]);
            }
            v35 = 1.0 / v32;
            if (v32 == 0.0)
              v35 = 0.0;
            v27 = vmulq_n_f32(v30, v35);
            v27.i32[3] = 0;
          }
        }
        v43 = (int32x4_t)vnegq_f32(v27);
        v44 = (int8x16_t)vtrn2q_s32((int32x4_t)v27, vtrn1q_s32((int32x4_t)v27, v43));
        v45 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v27, (int8x16_t)v43, 8uLL), *(float32x2_t *)v24.f32, 1), (float32x4_t)vextq_s8(v44, v44, 8uLL), v24.f32[0]);
        v46 = (float32x4_t)vrev64q_s32((int32x4_t)v27);
        v46.i32[0] = v43.i32[1];
        v46.i32[3] = v43.i32[2];
        v47 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v27, v24, 3), v46, v24, 2), v45);
        v48 = (int8x16_t)vtrn2q_s32((int32x4_t)v6, vtrn1q_s32((int32x4_t)v6, (int32x4_t)v8));
        v49 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v6, (int8x16_t)v8, 8uLL), *(float32x2_t *)v47.f32, 1), (float32x4_t)vextq_s8(v48, v48, 8uLL), v47.f32[0]);
        v50 = (float32x4_t)vrev64q_s32((int32x4_t)v6);
        v50.i32[0] = v8.i32[1];
        v50.i32[3] = v8.i32[2];
        v3 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v6, v47, 3), v50, v47, 2), v49);
        *a2 = v3;
      }
    }
    else
    {
      v3 = (float32x4_t)xmmword_210802BA0;
    }
    if (this[35].i8[3])
    {
      v87 = v3;
      v51 = this + 15;
      v52 = this[32].i32[3];
      v53 = this[15].f32[3];
      v54 = atan2f(this[15].f32[v52], v53);
      v88 = 0uLL;
      v88.i32[(int)v52 % 3] = 1065353216;
      v55 = v54 + v54;
      v56 = this[41].f32[2];
      if (v56 >= (float)(v55 + -6.2832))
      {
        v60 = this[41].f32[3];
        if ((float)(v55 + 6.2832) < v60)
        {
          v61 = vmulq_f32((float32x4_t)v88, (float32x4_t)v88);
          LODWORD(v62) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v61, 2), vaddq_f32(v61, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v61.f32, 1))).u32[0];
          if (fabsf(v62) >= 0.000000001)
          {
            v63 = vmulq_n_f32((float32x4_t)v88, -0.000000087423 / sqrtf(v62));
            v63.i32[3] = -1.0;
          }
          else
          {
            v63 = (float32x4_t)xmmword_210802BA0;
          }
          v70 = (int32x4_t)vnegq_f32(*v51);
          v71 = (int8x16_t)vtrn2q_s32(*(int32x4_t *)v51, vtrn1q_s32(*(int32x4_t *)v51, v70));
          v72 = (float32x4_t)vrev64q_s32(*(int32x4_t *)v51);
          v72.i32[0] = v70.i32[1];
          v72.i32[3] = v70.i32[2];
          v73 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(*v51, v63, 3), v72, v63, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8(*(int8x16_t *)v51, (int8x16_t)v70, 8uLL), *(float32x2_t *)v63.f32, 1), (float32x4_t)vextq_s8(v71, v71, 8uLL), v63.f32[0]));
          *v51 = v73;
          v53 = v73.f32[3];
        }
      }
      else
      {
        v57 = vmulq_f32((float32x4_t)v88, (float32x4_t)v88);
        LODWORD(v58) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v57, 2), vaddq_f32(v57, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v57.f32, 1))).u32[0];
        if (fabsf(v58) >= 0.000000001)
        {
          v59 = vmulq_n_f32((float32x4_t)v88, 0.000000087423 / sqrtf(v58));
          v59.i32[3] = -1.0;
        }
        else
        {
          v59 = (float32x4_t)xmmword_210802BA0;
        }
        v64 = this[15];
        v65 = (int32x4_t)vnegq_f32(v64);
        v66 = (int8x16_t)vtrn2q_s32((int32x4_t)v64, vtrn1q_s32((int32x4_t)v64, v65));
        v67 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v64, (int8x16_t)v65, 8uLL), *(float32x2_t *)v59.f32, 1), (float32x4_t)vextq_s8(v66, v66, 8uLL), v59.f32[0]);
        v68 = (float32x4_t)vrev64q_s32((int32x4_t)v64);
        v68.i32[0] = v65.i32[1];
        v68.i32[3] = v65.i32[2];
        v69 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v64, v59, 3), v68, v59, 2), v67);
        this[15] = v69;
        v53 = v69.f32[3];
        v60 = this[41].f32[3];
      }
      v74 = atan2f(v51->f32[v52], v53);
      v75 = v74 + v74;
      v76 = fminf(fmaxf(v75, v56), v60);
      if (v75 != v76)
      {
        v77 = vmulq_f32((float32x4_t)v88, (float32x4_t)v88);
        LODWORD(v78) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v77, 2), vaddq_f32(v77, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v77.f32, 1))).u32[0];
        if (fabsf(v78) >= 0.000000001)
        {
          v80 = sqrtf(v78);
          v86 = (float32x4_t)v88;
          v81 = __sincosf_stret((float)(v76 - v75) * 0.5);
          v79 = vmulq_n_f32(v86, v81.__sinval / v80);
          v79.i32[3] = LODWORD(v81.__cosval);
        }
        else
        {
          v79 = (float32x4_t)xmmword_210802BA0;
        }
        v82 = (int32x4_t)vnegq_f32(v87);
        v83 = (int8x16_t)vtrn2q_s32((int32x4_t)v87, vtrn1q_s32((int32x4_t)v87, v82));
        v84 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v87, (int8x16_t)v82, 8uLL), *(float32x2_t *)v79.f32, 1), (float32x4_t)vextq_s8(v83, v83, 8uLL), v79.f32[0]);
        v85 = (float32x4_t)vrev64q_s32((int32x4_t)v87);
        v85.i32[0] = v82.i32[1];
        v85.i32[3] = v82.i32[2];
        *a2 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v87, v79, 3), v85, v79, 2), v84);
      }
    }
  }
}

float FIK::Segment::getLimitsGain(FIK::Segment *this)
{
  return *((float *)this + 153);
}

void FIK::Segment::getLimitsError(FIK::Segment *this, float a2, float a3, float *a4)
{
  float32x4_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  float32x4_t v12;
  float32x4_t v13;
  int32x4_t v14;
  float32x4_t v15;
  int32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float v20;
  __int32 *v21;
  float v22;
  float32x4_t v23;
  uint32x4_t v24;
  float32x4_t v25;
  float v26;
  BOOL v27;
  float v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float v32;
  float32x4_t v33;
  int32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float v37;
  float32x4_t v38;
  float32x4_t v39;
  float v40;
  float32x4_t v41;
  uint64_t v42;
  int8x16_t v43;
  float32x4_t v44;
  float v45;
  uint64_t v46;
  float v47;
  float v48;
  float32x4_t v49;
  float32x4_t v50;
  float v51;
  float32x4_t v52;
  int32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float v56;
  float32x4_t v57;
  float32x4_t v58;
  float v59;
  int32x4_t v60;
  float32x4_t v61;
  int32x4_t v62;
  float32x4_t v63;
  int32x4_t v64;
  float32x4_t v65;
  int32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  int32x4_t v69;
  int8x16_t v70;
  float32x4_t v71;
  uint64_t v72;
  float32x4_t v73;
  float32x4_t v74;
  int32x4_t v75;
  int8x16_t v76;
  float32x4_t v77;
  float v78;
  unsigned int v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;

  if (*((_BYTE *)this + 817))
  {
    if (*((_BYTE *)this + 825))
    {
      v8 = *((float32x4_t *)this + 15);
      goto LABEL_43;
    }
    v9 = 0;
    v10 = 0;
    v11 = *((_DWORD *)this + 132);
    v85 = 0u;
    v85.i32[v11 % 3] = 1065353216;
    v8 = *((float32x4_t *)this + 15);
    v12 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v8, (int32x4_t)v8), (int8x16_t)v8, 0xCuLL);
    v13 = vnegq_f32(v8);
    v14 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v85, (int32x4_t)v85), (int8x16_t)v85, 0xCuLL), v13), v85, v12);
    v15 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v14, v14), (int8x16_t)v14, 0xCuLL);
    v16 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v15, (int32x4_t)v15), (int8x16_t)v15, 0xCuLL), v13), v15, v12);
    v17 = vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v16, v16), (int8x16_t)v16, 0xCuLL), v15, v8, 3);
    v15.i64[0] = 0x4000000040000000;
    v15.i64[1] = 0x4000000040000000;
    v18 = vmlaq_f32(v85, v15, v17);
    v19 = v18;
    v19.i32[3] = 0;
    *(_WORD *)((char *)this + 821) = 0;
    v20 = v8.f32[3];
    v83 = 0u;
    v84 = v19;
    do
    {
      v21 = (__int32 *)((char *)&v84 + v9 * 4);
      v22 = v84.f32[v9];
      if (*(float *)((char *)this + v10 + 644) < v22)
        v21 = (__int32 *)((char *)this + v10 + 644);
      if (v22 < *(float *)((char *)this + v10 + 640))
        v21 = (__int32 *)((char *)this + v10 + 640);
      v83.i32[v9] = *v21;
      v10 += 8;
      ++v9;
    }
    while (v10 != 24);
    v23 = v83;
    v24 = (uint32x4_t)vceqq_f32(v83, v19);
    v24.i32[3] = v24.i32[2];
    v24.i32[0] = vminvq_u32(v24);
    *((_BYTE *)this + 821) = v24.i32[0] >= 0;
    if (v24.i32[0] < 0)
    {
      v81 = v19;
      v82 = v18;
      v42 = *((int *)this + 131);
      v80 = v8;
      if ((_DWORD)v42 == 3)
      {
        v43 = (int8x16_t)vtrn2q_s32((int32x4_t)v8, vtrn1q_s32((int32x4_t)v8, (int32x4_t)v13));
        v44 = (float32x4_t)vrev64q_s32((int32x4_t)v8);
        v44.i32[0] = v13.i32[1];
        v44.i32[3] = v13.i32[2];
        v46 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v8, *(float32x4_t *)(this + 592), 3), v44, *(float32x4_t *)(this + 592), 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8(*(int8x16_t *)&v8, *(int8x16_t *)&v13, 8uLL), *(float32x2_t *)(this + 592), 1), (float32x4_t)vextq_s8(v43, v43, 8uLL), COERCE_FLOAT(*(_OWORD *)(this + 592)))).i64[1];
        v20 = *((float *)&v46 + 1);
        v45 = *(float *)&v46;
      }
      else
      {
        v45 = *((float *)this + v42 + 60);
      }
      v47 = atan2f(v45, v20);
      v48 = v47 + v47;
      if (v48 <= *((float *)this + 167) && v48 >= *((float *)this + 166))
        return;
      *((_BYTE *)this + 822) = 1;
      if (!*((_BYTE *)this + 563))
        return;
      v49 = *((float32x4_t *)this + 53);
      v50 = vmulq_f32(v81, v49);
      v51 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v50, 2), vaddq_f32(v50, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v50.f32, 1))).f32[0];
      if (v51 >= 1.0)
      {
        v41 = (float32x4_t)xmmword_210802BA0;
      }
      else if (v51 >= -0.999999)
      {
        v64 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v82, (int32x4_t)v82), (int8x16_t)v82, 0xCuLL), vnegq_f32(v49)), v82, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v49, (int32x4_t)v49), (int8x16_t)v49, 0xCuLL));
        v65 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v64, v64), (int8x16_t)v64, 0xCuLL);
        v65.i32[3] = sqrtf((float)(v51 + 1.0) + (float)(v51 + 1.0));
        v66.i32[1] = 1056964608;
        v66.i64[1] = 0x3F0000003F000000;
        *(float *)v66.i32 = 1.0 / v65.f32[3];
        v67 = (float32x4_t)vzip1q_s32(v66, v66);
        v67.f32[2] = 1.0 / v65.f32[3];
        v41 = vmulq_f32(v65, v67);
      }
      else
      {
        v52 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v49, (int32x4_t)v49), (int8x16_t)v49, 0xCuLL);
        v53 = (int32x4_t)vmlaq_f32(vmulq_f32(v52, (float32x4_t)xmmword_210802BB0), (float32x4_t)xmmword_210802BC0, v49);
        v54 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v53, v53), (int8x16_t)v53, 0xCuLL);
        v54.i32[3] = 0;
        v55 = vmulq_f32(v54, v54);
        v56 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v55, 2), vaddq_f32(v55, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v55.f32, 1))).f32[0]);
        if (fabsf(v56) < 0.000000001)
        {
          v57 = vmlaq_f32(vmulq_f32(v52, (float32x4_t)xmmword_210802BD0), (float32x4_t)xmmword_210802BE0, v49);
          v58 = vmulq_f32(v57, v57);
          v54 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v57, (int32x4_t)v57), (int8x16_t)v57, 0xCuLL);
          v56 = sqrtf(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v58.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v58, 2), v58)).f32[0]);
        }
        v59 = 1.0 / v56;
        if (v56 == 0.0)
          v59 = 0.0;
        v41 = vmulq_n_f32(v54, v59);
        v41.i32[3] = 0;
      }
      v8 = v80;
    }
    else
    {
      if (!*((_BYTE *)this + 819))
        goto LABEL_43;
      v25 = vmulq_f32(v23, v23);
      v25.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), vaddq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1))).f32[0]);
      v26 = 1.0 / v25.f32[0];
      v27 = v25.f32[0] == 0.0;
      v28 = 0.0;
      if (!v27)
        v28 = v26;
      v29 = vmulq_n_f32(v23, v28);
      v30 = *((float32x4_t *)this + 53);
      v31 = vmulq_f32(v29, v30);
      v32 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v31, 2), vaddq_f32(v31, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v31.f32, 1))).f32[0];
      if (v32 >= 1.0)
      {
        v41 = (float32x4_t)xmmword_210802BA0;
      }
      else if (v32 >= -0.999999)
      {
        v60 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v29, (int32x4_t)v29), (int8x16_t)v29, 0xCuLL), vnegq_f32(v30)), v29, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v30, (int32x4_t)v30), (int8x16_t)v30, 0xCuLL));
        v61 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v60, v60), (int8x16_t)v60, 0xCuLL);
        v61.i32[3] = sqrtf((float)(v32 + 1.0) + (float)(v32 + 1.0));
        v62.i32[1] = 1056964608;
        v62.i64[1] = 0x3F0000003F000000;
        *(float *)v62.i32 = 1.0 / v61.f32[3];
        v63 = (float32x4_t)vzip1q_s32(v62, v62);
        v63.f32[2] = 1.0 / v61.f32[3];
        v41 = vmulq_f32(v61, v63);
      }
      else
      {
        v33 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v30, (int32x4_t)v30), (int8x16_t)v30, 0xCuLL);
        v34 = (int32x4_t)vmlaq_f32(vmulq_f32(v33, (float32x4_t)xmmword_210802BB0), (float32x4_t)xmmword_210802BC0, v30);
        v35 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v34, v34), (int8x16_t)v34, 0xCuLL);
        v35.i32[3] = 0;
        v36 = vmulq_f32(v35, v35);
        v37 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v36, 2), vaddq_f32(v36, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v36.f32, 1))).f32[0]);
        if (fabsf(v37) < 0.000000001)
        {
          v38 = vmlaq_f32(vmulq_f32(v33, (float32x4_t)xmmword_210802BD0), (float32x4_t)xmmword_210802BE0, v30);
          v39 = vmulq_f32(v38, v38);
          v35 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v38, (int32x4_t)v38), (int8x16_t)v38, 0xCuLL);
          v37 = sqrtf(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v39, 2), v39)).f32[0]);
        }
        v40 = 1.0 / v37;
        if (v37 == 0.0)
          v40 = 0.0;
        v41 = vmulq_n_f32(v35, v40);
        v41.i32[3] = 0;
      }
    }
    v68 = *((float32x4_t *)this + 23);
    v69 = (int32x4_t)vnegq_f32(v68);
    v70 = (int8x16_t)vtrn2q_s32((int32x4_t)v68, vtrn1q_s32((int32x4_t)v68, v69));
    v71 = (float32x4_t)vrev64q_s32((int32x4_t)v68);
    v71.i32[0] = v69.i32[1];
    v71.i32[3] = v69.i32[2];
    *((float32x4_t *)this + 24) = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v68, v41, 3), v71, v41, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v68, (int8x16_t)v69, 8uLL), *(float32x2_t *)v41.f32, 1), (float32x4_t)vextq_s8(v70, v70, 8uLL), v41.f32[0]));
LABEL_43:
    v72 = 0;
    v73 = vmulq_f32(v8, (float32x4_t)xmmword_210802C20);
    v74 = *((float32x4_t *)this + 24);
    v75 = (int32x4_t)vnegq_f32(v74);
    v76 = (int8x16_t)vtrn2q_s32((int32x4_t)v74, vtrn1q_s32((int32x4_t)v74, v75));
    v77 = (float32x4_t)vrev64q_s32((int32x4_t)v74);
    v77.i32[0] = v75.i32[1];
    v77.i32[3] = v75.i32[2];
    v85 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v74, v73, 3), v77, v73, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v74, (int8x16_t)v75, 8uLL), *(float32x2_t *)v73.f32, 1), (float32x4_t)vextq_s8(v76, v76, 8uLL), v73.f32[0]));
    v78 = vmuls_lane_f32(*((float *)this + 153), v85, 3) * a2;
    v79 = *((_DWORD *)this + 129);
    do
    {
      if (*((_BYTE *)this + v72 + 808))
      {
        *(float *)(*((_QWORD *)this + 96) + 4 * v79) = *(float *)(*((_QWORD *)this + 96) + 4 * v79)
                                                       + (float)(v78 * v85.f32[v72]);
        ++v79;
      }
      ++v72;
    }
    while (v72 != 3);
    if (*((_BYTE *)this + 532))
    {
      if (*((_BYTE *)this + 818))
        FIK::Segment::getStretchLimitsError(this, (float *)(*((_QWORD *)this + 96) + 4 * v79), a3, &a4[v79]);
    }
    return;
  }
  if (*((_BYTE *)this + 532) && *((_BYTE *)this + 818))
    FIK::Segment::getStretchLimitsError(this, 0, a3, a4);
}

float32x4_t *FIK::Segment::getRetargetingError(float32x4_t *this, float a2)
{
  uint64_t v2;
  float32x4_t v3;
  float32x4_t v4;
  int32x4_t v5;
  int8x16_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float v9;
  unsigned __int32 v10;
  __int8 *v11;
  __int128 v12;

  v2 = 0;
  v3 = vmulq_f32(this[15], (float32x4_t)xmmword_210802C20);
  v4 = this[49];
  v5 = (int32x4_t)vnegq_f32(v4);
  v6 = (int8x16_t)vtrn2q_s32((int32x4_t)v4, vtrn1q_s32((int32x4_t)v4, v5));
  v7 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v4, (int8x16_t)v5, 8uLL), *(float32x2_t *)v3.f32, 1), (float32x4_t)vextq_s8(v6, v6, 8uLL), v3.f32[0]);
  v8 = (float32x4_t)vrev64q_s32((int32x4_t)v4);
  v8.i32[0] = v5.i32[1];
  v8.i32[3] = v5.i32[2];
  v9 = vmuls_lane_f32(this[38].f32[2], vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v4, v3, 3), v8, v3, 2), v7), 3) * a2;
  v10 = this[32].u32[1];
  v11 = &this[50].i8[8];
  do
  {
    if (v11[v2])
      *(float *)(this[48].i64[0] + 4 * v10++) = (float)(v9 * *(float *)&v11[4 * v2 - 188]) * *((float *)&v12 + v2);
    ++v2;
  }
  while (v2 != 3);
  return this;
}

void FIK::Segment::integrateAngle(float32x4_t *this, double a2, double a3, double a4)
{
  uint64_t v5;
  unsigned __int32 v6;
  int v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float v15;
  float32x4_t v16;
  float32x4_t v17;
  float v18;
  __float2 v19;
  float32x4_t v20;
  int32x4_t v21;
  int8x16_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  int8x16_t v26;
  float32x2_t v27;
  unsigned __int32 v28;
  float32x2_t v29;
  float32x2_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  int32x4_t v34;
  float32x4_t v35;
  int32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  uint64_t v41;
  float32x4_t **v42;
  uint64_t v43;
  float32x4_t *v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;

  v5 = 0;
  v50 = *MEMORY[0x24BDAC8D0];
  v48 = 0uLL;
  v49 = 0;
  v6 = this[32].u32[1];
  do
  {
    if (this[50].i8[v5 + 8])
    {
      v7 = *(_DWORD *)(this[47].i64[1] + 4 * v6++);
      *((_DWORD *)&v48 + v5) = v7;
    }
    ++v5;
  }
  while (v5 != 6);
  v8.i64[0] = v48;
  LODWORD(a3) = this[38].i32[0];
  *(float *)&a4 = -*(float *)&a3;
  v8.i64[1] = DWORD2(v48);
  v9 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0);
  v9.i32[3] = 0;
  v10 = vmaxnmq_f32(v8, v9);
  v10.i32[3] = 0;
  v11 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
  v11.i32[3] = 0;
  v12 = vminnmq_f32(v10, v11);
  v13 = v12;
  v13.i32[3] = 0;
  v14 = vmulq_f32(v13, v13);
  LODWORD(v15) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 2), vaddq_f32(v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.f32, 1))).u32[0];
  v16 = (float32x4_t)xmmword_210802BA0;
  v17 = (float32x4_t)xmmword_210802BA0;
  if (fabsf(v15) >= 0.000000001)
  {
    v18 = sqrtf(v15);
    v47 = v12;
    v19 = __sincosf_stret(v18 * 0.5);
    v16 = (float32x4_t)xmmword_210802BA0;
    v17 = vmulq_n_f32(v47, v19.__sinval / v18);
    v17.i32[3] = LODWORD(v19.__cosval);
  }
  v20 = this[15];
  v21 = (int32x4_t)vnegq_f32(v17);
  v22 = (int8x16_t)vtrn2q_s32((int32x4_t)v17, vtrn1q_s32((int32x4_t)v17, v21));
  v23 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v17, (int8x16_t)v21, 8uLL), *(float32x2_t *)v20.f32, 1), (float32x4_t)vextq_s8(v22, v22, 8uLL), v20.f32[0]);
  v24 = (float32x4_t)vrev64q_s32((int32x4_t)v17);
  v24.i32[0] = v21.i32[1];
  v24.i32[3] = v21.i32[2];
  v25 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v17, v20, 3), v24, v20, 2), v23);
  v26 = (int8x16_t)vmulq_f32(v25, v25);
  v27 = vadd_f32(*(float32x2_t *)v26.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL));
  if (vaddv_f32(v27) != 0.0)
  {
    v28 = vadd_f32(v27, (float32x2_t)vdup_lane_s32((int32x2_t)v27, 1)).u32[0];
    v29 = vrsqrte_f32((float32x2_t)v28);
    v30 = vmul_f32(v29, vrsqrts_f32((float32x2_t)v28, vmul_f32(v29, v29)));
    v16 = vmulq_n_f32(v25, vmul_f32(v30, vrsqrts_f32((float32x2_t)v28, vmul_f32(v30, v30))).f32[0]);
  }
  this[15] = v16;
  this[50].i8[15] = 1;
  if (this[33].i8[4] && fabsf((float)(*((float *)&v48 + 3) + *(float *)&v49) + *((float *)&v49 + 1)) >= 0.000000001)
  {
    v31.i32[3] = 0;
    v31.i32[0] = HIDWORD(v48);
    *(uint64_t *)((char *)v31.i64 + 4) = v49;
    if (this[33].i8[5])
    {
      v32 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v16, (int32x4_t)v16), (int8x16_t)v16, 0xCuLL);
      v33 = vnegq_f32(v16);
      v34 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v31, (int32x4_t)v31), (int8x16_t)v31, 0xCuLL), v33), v31, v32);
      v35 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v34, v34), (int8x16_t)v34, 0xCuLL);
      v36 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v35, (int32x4_t)v35), (int8x16_t)v35, 0xCuLL), v33), v35, v32);
      v37 = vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v36, v36), (int8x16_t)v36, 0xCuLL), v35, v16, 3);
      v35.i64[0] = 0x4000000040000000;
      v35.i64[1] = 0x4000000040000000;
      v38 = vaddq_f32(vmlaq_f32(v31, v35, v37), this[6]);
      this[6] = v38;
      if (this[2].i64[0])
      {
        v39 = vsubq_f32(v38, this[54]);
        v40 = vmulq_f32(v39, v39);
        this[25].f32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v40, 2), vaddq_f32(v40, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.f32, 1))).f32[0]);
      }
    }
    else
    {
      v41 = this[2].i64[1];
      if (v41)
      {
        v42 = (float32x4_t **)this[3].i64[1];
        v43 = 8 * v41;
        do
        {
          v44 = *v42++;
          v44[6] = vaddq_f32(v31, v44[6]);
          v44[50].i8[15] = 1;
          v43 -= 8;
        }
        while (v43);
      }
      v45 = vaddq_f32(v31, this[13]);
      v46 = vmulq_f32(v45, v45);
      this[13] = v45;
      this[25].f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v46, 2), vaddq_f32(v46, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v46.f32, 1))).f32[0]);
      v45.i64[0] = 0x3F0000003F000000;
      v45.i64[1] = 0x3F0000003F000000;
      this[55] = vaddq_f32(vmulq_f32(v31, v45), this[55]);
    }
  }
}

float32x2_t FIK::Segment::setRotationAxis(float32x2_t *this, unsigned int a2, const float *a3)
{
  uint64_t i;
  float32x4_t v6;
  float32x4_t v7;
  float v8;
  BOOL v9;
  float v10;
  float32x4_t v11;
  float32x4_t v12;
  float v13;
  float32x4_t v14;
  int32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float v18;
  float32x4_t v19;
  float32x4_t v20;
  float v21;
  float32x4_t v22;
  int32x4_t v23;
  float32x4_t v24;
  int32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  int32x4_t v28;
  int8x16_t v29;
  float32x4_t v30;
  float v31;
  float v32;
  uint64_t v33;
  uint64_t *v34;
  float32x2_t *v35;
  uint64_t *v36;
  uint64_t v37;
  float v38;
  int32x2_t v39;
  float32x2_t result;

  if (a2 >= 4)
  {
    v34 = ikinemaLogObject();
    ikinemaAssertHandler(*v34, 0, (uint64_t)"setRotationAxis", "(rotation_axis <= 3) There are 4 valid axes");
LABEL_18:
    this[65].i32[1] = a2;
    if (a2 == 2)
    {
      v35 = this + 72;
      v36 = (uint64_t *)((char *)&this[72] + 4);
      v37 = 0x3F80000000000000;
    }
    else
    {
      if (a2 != 1)
      {
        if (a2)
        {
LABEL_26:
          v31 = this[46].f32[a2];
          v32 = this[47].f32[1];
          goto LABEL_27;
        }
        this[72].i32[0] = 1065353216;
        this[73].i32[0] = 0;
        v35 = (float32x2_t *)((char *)this + 580);
LABEL_25:
        v35->i32[0] = 0;
        goto LABEL_26;
      }
      v35 = this + 72;
      v36 = (uint64_t *)((char *)&this[72] + 4);
      v37 = 1065353216;
    }
    *v36 = v37;
    goto LABEL_25;
  }
  if (a2 != 3)
    goto LABEL_18;
  for (i = 0; i != 3; ++i)
    this[72].f32[i] = a3[i];
  v6 = *(float32x4_t *)this[72].f32;
  v7 = vmulq_f32(v6, v6);
  v7.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1))).f32[0]);
  v8 = 1.0 / v7.f32[0];
  v9 = v7.f32[0] == 0.0;
  v10 = 0.0;
  if (!v9)
    v10 = v8;
  v11 = vmulq_n_f32(v6, v10);
  *(float32x4_t *)this[72].f32 = v11;
  v12 = vmulq_f32(v11, (float32x4_t)xmmword_210802BE0);
  this[65].i32[1] = 3;
  v13 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2), vaddq_f32(v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1))).f32[0];
  if (v13 >= 1.0)
  {
    v22 = (float32x4_t)xmmword_210802BA0;
  }
  else if (v13 >= -0.999999)
  {
    v23 = (int32x4_t)vmlaq_f32(vmulq_f32(v11, (float32x4_t)xmmword_210802BB0), (float32x4_t)xmmword_210802BE0, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v11, (int32x4_t)v11), (int8x16_t)v11, 0xCuLL));
    v24 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v23, v23), (int8x16_t)v23, 0xCuLL);
    v24.i32[3] = sqrtf((float)(v13 + 1.0) + (float)(v13 + 1.0));
    v25.i32[1] = 1056964608;
    v25.i64[1] = 0x3F0000003F000000;
    *(float *)v25.i32 = 1.0 / v24.f32[3];
    v26 = (float32x4_t)vzip1q_s32(v25, v25);
    v26.f32[2] = 1.0 / v24.f32[3];
    v22 = vmulq_f32(v24, v26);
  }
  else
  {
    v14 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v11, (int32x4_t)v11), (int8x16_t)v11, 0xCuLL);
    v15 = (int32x4_t)vmlaq_f32(vmulq_f32(v14, (float32x4_t)xmmword_210802BB0), (float32x4_t)xmmword_210802BC0, v11);
    v16 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v15, v15), (int8x16_t)v15, 0xCuLL);
    v16.i32[3] = 0;
    v17 = vmulq_f32(v16, v16);
    v18 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v17, 2), vaddq_f32(v17, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 1))).f32[0]);
    if (fabsf(v18) < 0.000000001)
    {
      v19 = vmlaq_f32(vmulq_f32(v14, (float32x4_t)xmmword_210802BD0), (float32x4_t)xmmword_210802BE0, v11);
      v20 = vmulq_f32(v19, v19);
      v16 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v19, (int32x4_t)v19), (int8x16_t)v19, 0xCuLL);
      v18 = sqrtf(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 2), v20)).f32[0]);
    }
    v21 = 1.0 / v18;
    if (v18 == 0.0)
      v21 = 0.0;
    v22 = vmulq_n_f32(v16, v21);
    v22.i32[3] = 0;
  }
  *(float32x4_t *)this[74].f32 = v22;
  v27 = *(float32x4_t *)this[46].f32;
  v28 = (int32x4_t)vnegq_f32(v27);
  v29 = (int8x16_t)vtrn2q_s32((int32x4_t)v27, vtrn1q_s32((int32x4_t)v27, v28));
  v30 = (float32x4_t)vrev64q_s32((int32x4_t)v27);
  v30.i32[0] = v28.i32[1];
  v30.i32[3] = v28.i32[2];
  v33 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v27, v22, 3), v30, v22, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8(*(int8x16_t *)&v27, *(int8x16_t *)&v28, 8uLL), *(float32x2_t *)&v22, 1), (float32x4_t)vextq_s8(v29, v29, 8uLL), *(float *)&v22)).i64[1];
  v32 = *((float *)&v33 + 1);
  v31 = *(float *)&v33;
LABEL_27:
  v38 = atan2f(v31, v32);
  *(float *)v39.i32 = v38 + v38;
  result = vadd_f32((float32x2_t)vdup_lane_s32(v39, 0), vmul_f32(this[84], (float32x2_t)vdup_n_s32(0x3C8EFA35u)));
  this[83] = result;
  return result;
}

__n128 FIK::Segment::setProjectionAxis(float32x4_t *this, unsigned int a2)
{
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  int32x4_t v9;
  float32x4_t v10;
  int32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  __n128 result;
  uint64_t *v15;

  if (a2 >= 3)
  {
    v15 = ikinemaLogObject();
    ikinemaAssertHandler(*v15, 0, (uint64_t)"setProjectionAxis", "(projection_axis <= 2) There are only 3 valid axes");
  }
  this[33].i32[0] = a2;
  if (a2 == 1)
  {
    v4 = this[23];
    v5 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v4, (int32x4_t)v4), (int8x16_t)v4, 0xCuLL);
    v6 = vnegq_f32(v4);
    v7 = vmulq_f32(v4, (float32x4_t)xmmword_210802C30);
    v8 = (float32x4_t)xmmword_210802BC0;
  }
  else
  {
    v4 = this[23];
    v5 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v4, (int32x4_t)v4), (int8x16_t)v4, 0xCuLL);
    v6 = vnegq_f32(v4);
    if (a2)
    {
      v7 = vmulq_f32(v4, (float32x4_t)xmmword_210802BB0);
      v8 = (float32x4_t)xmmword_210802BE0;
    }
    else
    {
      v7 = vmulq_f32(v4, (float32x4_t)xmmword_210802BD0);
      v8 = (float32x4_t)xmmword_210802C40;
    }
  }
  v9 = (int32x4_t)vmlaq_f32(v7, v8, v5);
  v10 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v9, v9), (int8x16_t)v9, 0xCuLL);
  v11 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v10, (int32x4_t)v10), (int8x16_t)v10, 0xCuLL), v6), v10, v5);
  v12 = vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v11, v11), (int8x16_t)v11, 0xCuLL), v10, v4, 3);
  v13.i64[0] = 0x4000000040000000;
  v13.i64[1] = 0x4000000040000000;
  this[53] = vmlaq_f32(v8, v13, v12);
  result = (__n128)this[23];
  this[24] = (float32x4_t)result;
  return result;
}

__n128 FIK::Segment::setCenter(__n128 *this, __n128 a2, float a3, float a4)
{
  __n128 result;

  a2.n128_f32[1] = a3;
  a2.n128_f32[2] = a4;
  this[55] = a2;
  this[50].n128_u8[15] = 1;
  result.n128_u64[0] = a2.n128_u64[0];
  result.n128_u32[2] = a2.n128_u32[2];
  return result;
}

__n128 FIK::Segment::setCenterofMass(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[55] = *a2;
  a1[50].n128_u8[15] = 1;
  return result;
}

__n128 FIK::Segment::setCenterofMass(__n128 *this, __n128 a2, float a3, float a4)
{
  __n128 result;

  a2.n128_f32[1] = a3;
  a2.n128_f32[2] = a4;
  this[55] = a2;
  this[50].n128_u8[15] = 1;
  result.n128_u64[0] = a2.n128_u64[0];
  result.n128_u32[2] = a2.n128_u32[2];
  return result;
}

__n128 FIK::Segment::setCenter(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[55] = *a2;
  a1[50].n128_u8[15] = 1;
  return result;
}

uint64_t FIK::Segment::getDepthToRoot(FIK::Segment *this)
{
  uint64_t v1;

  LODWORD(v1) = 0;
  do
  {
    this = (FIK::Segment *)*((_QWORD *)this + 4);
    v1 = (v1 + 1);
  }
  while (this);
  return v1;
}

BOOL FIK::EulerLimitsChecker::isWithinLimits(uint64_t a1, uint64_t a2)
{
  float v4;
  float v5;
  float v6;
  _BOOL8 result;
  float v8;
  float v9;
  _QWORD v10[2];
  char v11;
  _QWORD v12[2];
  char v13;

  v12[0] = 0;
  v12[1] = 0;
  v13 = 0;
  FIK::RangeInCircularSpace::expandLeftBy((uint64_t)v12, fabsf(*(float *)(a1 + 8 * *(unsigned int *)(a1 + 36)) * 0.017453));
  FIK::RangeInCircularSpace::expandRightBy((uint64_t)v12, fabsf(*(float *)(a1 + 8 * *(unsigned int *)(a1 + 36) + 4) * 0.017453));
  v10[0] = 0;
  v10[1] = 0;
  v11 = 0;
  FIK::RangeInCircularSpace::expandLeftBy((uint64_t)v10, fabsf(*(float *)(a1 + 8 * *(unsigned int *)(a1 + 32)) * 0.017453));
  FIK::RangeInCircularSpace::expandRightBy((uint64_t)v10, fabsf(*(float *)(a1 + 8 * *(unsigned int *)(a1 + 32) + 4) * 0.017453));
  v4 = *(float *)(a2 + 4 * *(int *)(a1 + 32));
  v5 = fabsf(v4);
  v6 = fabsf(*(float *)(a2 + 4 * *(int *)(a1 + 36)));
  if (v5 < 0.00001 && v6 < 0.00001)
  {
    if (*(float *)(a2 + 4 * *(int *)(a1 + 28)) < 0.0
      && !FIK::RangeInCircularSpace::isInside((FIK::RangeInCircularSpace *)v12, 3.1416))
    {
      return FIK::RangeInCircularSpace::isInside((FIK::RangeInCircularSpace *)v10, 3.1416);
    }
    return 1;
  }
  if (v5 < 0.00001
    || (v8 = atan2f(v4, *(float *)(a2 + 4 * *(int *)(a1 + 28))),
        result = FIK::RangeInCircularSpace::isInside((FIK::RangeInCircularSpace *)v12, v8)))
  {
    if (v6 < 0.00001)
      return 1;
    v9 = atan2f(-*(float *)(a2 + 4 * *(int *)(a1 + 36)), *(float *)(a2 + 4 * *(int *)(a1 + 28)));
    result = FIK::RangeInCircularSpace::isInside((FIK::RangeInCircularSpace *)v10, v9);
    if (result)
      return 1;
  }
  return result;
}

uint64_t FIK::RangeInCircularSpace::expandLeftBy(uint64_t this, float a2)
{
  uint64_t v3;
  float v4;
  uint64_t *v5;

  v3 = this;
  if (a2 < 0.0)
  {
    v5 = ikinemaLogObject();
    this = ikinemaAssertHandler(*v5, 0, (uint64_t)"expandLeftBy", "(amount >= 0.0f) Must expand range by a non-negative amount.");
  }
  *(float *)(v3 + 12) = *(float *)(v3 + 12) + a2;
  v4 = *(float *)(v3 + 4) - a2;
  if (v4 < -3.1416)
  {
    *(_BYTE *)(v3 + 16) = 1;
    do
      v4 = v4 + 6.2832;
    while (v4 < -3.1416);
  }
  *(float *)(v3 + 4) = v4;
  return this;
}

uint64_t FIK::RangeInCircularSpace::expandRightBy(uint64_t this, float a2)
{
  uint64_t v3;
  float v4;
  float v5;
  uint64_t *v6;

  v3 = this;
  if (a2 < 0.0)
  {
    v6 = ikinemaLogObject();
    this = ikinemaAssertHandler(*v6, 0, (uint64_t)"expandRightBy", "(amount >= 0.0f) Must expand range by a non-negative amount.");
  }
  v4 = *(float *)(v3 + 8);
  *(float *)(v3 + 12) = *(float *)(v3 + 12) + a2;
  v5 = v4 + a2;
  if ((float)(v4 + a2) > 3.1416)
  {
    *(_BYTE *)(v3 + 16) = 1;
    do
      v5 = v5 + -6.2832;
    while (v5 > 3.1416);
  }
  *(float *)(v3 + 8) = v5;
  return this;
}

BOOL FIK::RangeInCircularSpace::isInside(FIK::RangeInCircularSpace *this, float a2)
{
  float v2;
  float v3;
  float v4;

  v2 = a2 - *(float *)this;
  v3 = vabds_f32(a2, *(float *)this) + -3.1416;
  if (v3 > 0.0)
  {
    v4 = -1.0;
    if (v2 > 0.0)
      v4 = 1.0;
    v2 = v2 + (float)((float)((float)(int)v4 * -6.2832) * ceilf(v3 / 6.2832));
  }
  if (*((float *)this + 3) >= 6.2832)
    return 1;
  if (*((_BYTE *)this + 16))
    return *((float *)this + 1) <= v2 || v2 <= *((float *)this + 2);
  else
    return *((float *)this + 1) <= v2 && v2 <= *((float *)this + 2);
}

void FIK::Segment::setEulerLimits(FIK::Segment *this, __int128 *a2, int a3)
{
  __int128 v4;
  unsigned int v5;
  _BOOL4 v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  int32x4_t v14;
  float32x4_t v15;
  int32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  int32x4_t v20;
  float32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  float32x4_t v24;
  int32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float v28;
  float32x4_t v29;
  float v30;
  float32x4_t v31;
  float v32;
  uint64_t v33;
  unsigned int v34;
  float32x4_t *v35;
  __int128 v36;
  float v37;
  float v38;
  float v40;
  float v41;
  _BOOL8 v42;
  unint64_t v43;
  float v44;
  float32x4_t v45;
  float v46;
  float32x4_t v47;
  float v48;
  __float2 v49;
  int32x4_t v50;
  int8x16_t v51;
  float32x4_t v52;
  float32x4_t v53;
  uint64_t v54;
  int v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  __int128 v59;
  float32x4_t v60;
  uint64_t v61;
  uint64_t v62;
  __int32 *v63;
  char v64;
  char v65;
  float32x4_t v66;
  float v67;
  float32x4_t v68;
  float v69;
  __float2 v70;
  int32x4_t v71;
  int8x16_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  int32x4_t v78;
  float32x4_t v79;
  int32x4_t v80;
  float32x4_t v81;
  int32x4_t v82;
  float32x4_t v83;
  int32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  int32x4_t v87;
  float32x4_t v88;
  int32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  int32x4_t v92;
  float32x4_t v93;
  int32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  int32x4_t v97;
  float32x4_t v98;
  int32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  int32x4_t v102;
  float32x4_t v103;
  int32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  int32x4_t v107;
  float32x4_t v108;
  int32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  BOOL isWithinLimits;
  uint64_t v113;
  __int8 *v114;
  float *v115;
  uint64_t i;
  float v117;
  float *v118;
  uint64_t v119;
  uint64_t v120;
  float v121;
  float *v122;
  uint64_t v123;
  uint64_t v124;
  float v125;
  float v126;
  uint64_t v127;
  float *v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int v132;
  unsigned int v133[2];
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  _BYTE v151[6];
  _BYTE v152[45];
  _BYTE v153[3];
  _BYTE v154[25];
  float32x4_t v155[3];
  _OWORD v156[4];
  __int128 v157;
  uint64_t v158;
  uint64_t v159;

  v159 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  *(_OWORD *)((char *)this + 737) = *(__int128 *)((char *)a2 + 9);
  *(_OWORD *)((char *)this + 728) = v4;
  *(_OWORD *)v154 = *a2;
  *(_OWORD *)&v154[9] = *(__int128 *)((char *)a2 + 9);
  v157 = xmmword_210802D08;
  v158 = 0x3F800000BF800000;
  v153[0] = (float)(fabsf(*(float *)v154) + fabsf(*(float *)&v154[4])) > 359.0;
  v153[1] = (float)(fabsf(*(float *)&v154[8]) + fabsf(*(float *)&v154[12])) > 359.0;
  v153[2] = (float)(fabsf(*(float *)&v154[16]) + fabsf(*(float *)&v154[20])) > 359.0;
  v5 = v154[24];
  v6 = v154[24] != 2 && v154[24] != 1;
  if (v154[24] == 2)
    v7 = 1;
  else
    v7 = 2;
  if (v154[24] == 2)
    v8 = 2;
  else
    v8 = v154[24] == 1;
  *(_QWORD *)v133 = v8;
  if (v153[v7] + v153[v6] <= 1)
  {
    v9 = 0;
    v10 = 240;
    if (a3)
      v10 = 368;
    v11 = *(float32x4_t *)((char *)this + v10);
    v12 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v11, (int32x4_t)v11), (int8x16_t)v11, 0xCuLL);
    v13 = vnegq_f32(v11);
    v14 = (int32x4_t)vmlaq_f32(vmulq_f32(v11, (float32x4_t)xmmword_210802BD0), (float32x4_t)xmmword_210802C40, v12);
    v15 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v14, v14), (int8x16_t)v14, 0xCuLL);
    v16 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v15, (int32x4_t)v15), (int8x16_t)v15, 0xCuLL), v13), v15, v12);
    v17 = vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v16, v16), (int8x16_t)v16, 0xCuLL), v15, v11, 3);
    v15.i64[0] = 0x4000000040000000;
    v15.i64[1] = 0x4000000040000000;
    v18 = vmlaq_f32((float32x4_t)xmmword_210802C40, v15, v17);
    v19 = (float32x4_t)xmmword_210802BC0;
    v20 = (int32x4_t)vmlaq_f32(vmulq_f32(v11, (float32x4_t)xmmword_210802C30), (float32x4_t)xmmword_210802BC0, v12);
    v21 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v20, v20), (int8x16_t)v20, 0xCuLL);
    v22 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v21, (int32x4_t)v21), (int8x16_t)v21, 0xCuLL), v13), v21, v12);
    v156[0] = v18;
    v156[1] = vmlaq_f32((float32x4_t)xmmword_210802BC0, v15, vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v22, v22), (int8x16_t)v22, 0xCuLL), v21, v11, 3));
    v23 = (int32x4_t)vmlaq_f32(vmulq_f32(v11, (float32x4_t)xmmword_210802BB0), (float32x4_t)xmmword_210802BE0, v12);
    v24 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v23, v23), (int8x16_t)v23, 0xCuLL);
    v25 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v24, (int32x4_t)v24), (int8x16_t)v24, 0xCuLL), v13), v24, v12);
    v156[2] = vmlaq_f32((float32x4_t)xmmword_210802BE0, v15, vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v25, v25), (int8x16_t)v25, 0xCuLL), v24, v11, 3));
    do
    {
      v26 = (float32x4_t)v156[v9];
      v27 = vmulq_f32(v26, (float32x4_t)xmmword_210802C40);
      v28 = fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v27, 2), vaddq_f32(v27, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 1))).f32[0]);
      v29 = vmulq_f32(v26, (float32x4_t)xmmword_210802BC0);
      v30 = fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v29, 2), vaddq_f32(v29, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 1))).f32[0]);
      v31 = vmulq_f32(v26, (float32x4_t)xmmword_210802BE0);
      v32 = fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v31, 2), vaddq_f32(v31, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v31.f32, 1))).f32[0]);
      if (v30 >= v32)
        v32 = v30;
      if (v28 >= v32)
        v32 = v28;
      if (v32 == v28)
      {
        *((_DWORD *)&v156[3] + v9 + 1) = 0;
      }
      else if (v32 == v30)
      {
        *((_DWORD *)&v156[3] + v9 + 1) = 1;
      }
      else
      {
        *((_DWORD *)&v156[3] + v9 + 1) = 2;
      }
      ++v9;
    }
    while (v9 != 3);
    v129 = v7;
    v130 = v6;
    v33 = 0;
    v34 = *((_DWORD *)&v156[3] + v133[0] + 1);
    v35 = v155;
    v36 = xmmword_210802BA0;
    do
    {
      if (8 * v133[0] != v33)
      {
        v37 = *(float *)&v154[v33];
        v38 = *(float *)&v154[v33 + 4];
        if (v37 != 0.0 && v37 < 0.0 != v38 >= 0.0)
        {
          v155[0] = 0uLL;
          v35->i32[0] = 1065353216;
          v40 = fabsf(v37);
          v41 = fabsf(v38);
          v42 = v40 < v41;
          v43 = (unint64_t)v154 | (4 * (v40 >= v41));
          v44 = *(float *)(v43 + v33) + flt_210802CC8[*(float *)(v43 + v33) > 0.0];
          v45 = vmulq_f32(v155[0], v155[0]);
          LODWORD(v46) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v45, 2), vaddq_f32(v45, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v45.f32, 1))).u32[0];
          v47 = (float32x4_t)v36;
          if (fabsf(v46) >= 0.000000001)
          {
            v48 = sqrtf(v46);
            v139 = v11;
            v142 = v155[0];
            v49 = __sincosf_stret((float)(v44 * 0.017453) * 0.5);
            v36 = xmmword_210802BA0;
            v19 = (float32x4_t)xmmword_210802BC0;
            v11 = v139;
            v47 = vmulq_n_f32(v142, v49.__sinval / v48);
            v47.i32[3] = LODWORD(v49.__cosval);
          }
          v50 = (int32x4_t)vnegq_f32(v47);
          v51 = (int8x16_t)vtrn2q_s32((int32x4_t)v47, vtrn1q_s32((int32x4_t)v47, v50));
          v52 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v47, (int8x16_t)v50, 8uLL), *(float32x2_t *)v11.f32, 1), (float32x4_t)vextq_s8(v51, v51, 8uLL), v11.f32[0]);
          v53 = (float32x4_t)vrev64q_s32((int32x4_t)v47);
          v53.i32[0] = v50.i32[1];
          v53.i32[3] = v50.i32[2];
          *(float *)(((unint64_t)v154 | (4 * v42)) + v33) = *(float *)(((unint64_t)v154 | (4 * v42)) + v33)
                                                                 - v44;
          v11 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v47, v11, 3), v53, v11, 2), v52);
          *(float *)(v43 + v33) = *(float *)(v43 + v33) - v44;
        }
      }
      v33 += 8;
      v35 = (float32x4_t *)((char *)v35 + 4);
    }
    while (v33 != 24);
    v132 = v34;
    if (v133[0])
    {
      if (v133[0] != 1)
        v19 = (float32x4_t)xmmword_210802BE0;
    }
    else
    {
      v19 = (float32x4_t)xmmword_210802C40;
    }
    v54 = 0;
    v55 = 0;
    v56 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 0);
    v57 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2);
    v58 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v19, (int32x4_t)v19), (int8x16_t)v19, 0xCuLL);
    v59 = xmmword_210802BA0;
    v60.i64[0] = 0x4000000040000000;
    v60.i64[1] = 0x4000000040000000;
    v61 = *(_QWORD *)v133;
    v137 = v19;
    v140 = v11;
    v135 = v57;
    v136 = v56;
    v134 = v58;
    do
    {
      if (v54 != v61)
      {
        v62 = 0;
        v63 = &v155[0].i32[3 * v55 + 2];
        v55 += 2;
        v64 = 1;
        do
        {
          *(_OWORD *)v152 = 0uLL;
          *(_DWORD *)&v152[4 * v54] = 1065353216;
          v65 = v64;
          v66 = vmulq_f32(*(float32x4_t *)v152, *(float32x4_t *)v152);
          LODWORD(v67) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v66, 2), vaddq_f32(v66, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v66.f32, 1))).u32[0];
          v68 = (float32x4_t)v59;
          if (fabsf(v67) >= 0.000000001)
          {
            v69 = sqrtf(v67);
            v143 = *(float32x4_t *)v152;
            v70 = __sincosf_stret((float)(*(float *)&v154[8 * v54 + 4 * v62] * 0.017453) * 0.5);
            v60.i64[0] = 0x4000000040000000;
            v60.i64[1] = 0x4000000040000000;
            v59 = xmmword_210802BA0;
            v58 = v134;
            v57 = v135;
            v56 = v136;
            v19 = v137;
            v11 = v140;
            v68 = vmulq_n_f32(v143, v70.__sinval / v69);
            v68.i32[3] = LODWORD(v70.__cosval);
          }
          v64 = 0;
          v71 = (int32x4_t)vnegq_f32(v68);
          v72 = (int8x16_t)vtrn2q_s32((int32x4_t)v68, vtrn1q_s32((int32x4_t)v68, v71));
          v73 = vmlaq_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v68, (int8x16_t)v71, 8uLL), *(float32x2_t *)v11.f32, 1), (float32x4_t)vextq_s8(v72, v72, 8uLL), v56);
          v74 = (float32x4_t)vrev64q_s32((int32x4_t)v68);
          v74.i32[0] = v71.i32[1];
          v74.i32[3] = v71.i32[2];
          v75 = vaddq_f32(vmlaq_f32(vmulq_laneq_f32(v68, v11, 3), v74, v57), v73);
          v76 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v75, (int32x4_t)v75), (int8x16_t)v75, 0xCuLL);
          v77 = vnegq_f32(v75);
          v78 = (int32x4_t)vmlaq_f32(vmulq_f32(v58, v77), v19, v76);
          v79 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v78, v78), (int8x16_t)v78, 0xCuLL);
          v80 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v79, (int32x4_t)v79), (int8x16_t)v79, 0xCuLL), v77), v79, v76);
          v81 = vmlaq_f32(v19, v60, vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v80, v80), (int8x16_t)v80, 0xCuLL), v79, v75, 3));
          *((_QWORD *)v63 - 1) = v81.i64[0];
          *v63 = v81.i32[2];
          v63 += 3;
          v62 = 1;
        }
        while ((v65 & 1) != 0);
        v61 = *(_QWORD *)v133;
      }
      ++v54;
    }
    while (v54 != 3);
    v144 = vmulq_f32(v11, (float32x4_t)xmmword_210802C20);
    FIK::EulerLimitsChecker::EulerLimitsChecker((uint64_t)v152, a2, v61, v130, v129);
    v138 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v144, (int32x4_t)v144), (int8x16_t)v144, 0xCuLL);
    v141 = vnegq_f32(v144);
    v82 = (int32x4_t)vmlaq_f32(vmulq_f32(v144, (float32x4_t)xmmword_210802C50), (float32x4_t)xmmword_210802C60, v138);
    v83 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v82, v82), (int8x16_t)v82, 0xCuLL);
    v84 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v83, (int32x4_t)v83), (int8x16_t)v83, 0xCuLL), v141), v83, v138);
    v85 = vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v84, v84), (int8x16_t)v84, 0xCuLL), v83, v144, 3);
    v83.i64[0] = 0x4000000040000000;
    v83.i64[1] = 0x4000000040000000;
    v86 = vmlaq_f32((float32x4_t)xmmword_210802C60, v83, v85);
    v86.i32[3] = 0;
    v150 = v86;
    v151[0] = FIK::EulerLimitsChecker::isWithinLimits((uint64_t)v152, (uint64_t)&v150);
    v87 = (int32x4_t)vmlaq_f32(vmulq_f32(v144, (float32x4_t)xmmword_210802BD0), (float32x4_t)xmmword_210802C40, v138);
    v88 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v87, v87), (int8x16_t)v87, 0xCuLL);
    v89 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v88, (int32x4_t)v88), (int8x16_t)v88, 0xCuLL), v141), v88, v138);
    v90 = vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v89, v89), (int8x16_t)v89, 0xCuLL), v88, v144, 3);
    v88.i64[0] = 0x4000000040000000;
    v88.i64[1] = 0x4000000040000000;
    v91 = vmlaq_f32((float32x4_t)xmmword_210802C40, v88, v90);
    v91.i32[3] = 0;
    v149 = v91;
    v151[1] = FIK::EulerLimitsChecker::isWithinLimits((uint64_t)v152, (uint64_t)&v149);
    v92 = (int32x4_t)vmlaq_f32(vmulq_f32(v144, (float32x4_t)xmmword_210802C70), (float32x4_t)xmmword_210802C80, v138);
    v93 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v92, v92), (int8x16_t)v92, 0xCuLL);
    v94 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v93, (int32x4_t)v93), (int8x16_t)v93, 0xCuLL), v141), v93, v138);
    v95 = vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v94, v94), (int8x16_t)v94, 0xCuLL), v93, v144, 3);
    v93.i64[0] = 0x4000000040000000;
    v93.i64[1] = 0x4000000040000000;
    v96 = vmlaq_f32((float32x4_t)xmmword_210802C80, v93, v95);
    v96.i32[3] = 0;
    v148 = v96;
    v151[2] = FIK::EulerLimitsChecker::isWithinLimits((uint64_t)v152, (uint64_t)&v148);
    v97 = (int32x4_t)vmlaq_f32(vmulq_f32(v144, (float32x4_t)xmmword_210802C30), (float32x4_t)xmmword_210802BC0, v138);
    v98 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v97, v97), (int8x16_t)v97, 0xCuLL);
    v99 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v98, (int32x4_t)v98), (int8x16_t)v98, 0xCuLL), v141), v98, v138);
    v100 = vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v99, v99), (int8x16_t)v99, 0xCuLL), v98, v144, 3);
    v98.i64[0] = 0x4000000040000000;
    v98.i64[1] = 0x4000000040000000;
    v101 = vmlaq_f32((float32x4_t)xmmword_210802BC0, v98, v100);
    v101.i32[3] = 0;
    v147 = v101;
    v151[3] = FIK::EulerLimitsChecker::isWithinLimits((uint64_t)v152, (uint64_t)&v147);
    v102 = (int32x4_t)vmlaq_f32(vmulq_f32(v144, (float32x4_t)xmmword_210802C90), (float32x4_t)xmmword_210802CA0, v138);
    v103 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v102, v102), (int8x16_t)v102, 0xCuLL);
    v104 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v103, (int32x4_t)v103), (int8x16_t)v103, 0xCuLL), v141), v103, v138);
    v105 = vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v104, v104), (int8x16_t)v104, 0xCuLL), v103, v144, 3);
    v103.i64[0] = 0x4000000040000000;
    v103.i64[1] = 0x4000000040000000;
    v106 = vmlaq_f32((float32x4_t)xmmword_210802CA0, v103, v105);
    v106.i32[3] = 0;
    v146 = v106;
    v151[4] = FIK::EulerLimitsChecker::isWithinLimits((uint64_t)v152, (uint64_t)&v146);
    v107 = (int32x4_t)vmlaq_f32(vmulq_f32(v144, (float32x4_t)xmmword_210802BB0), (float32x4_t)xmmword_210802BE0, v138);
    v108 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v107, v107), (int8x16_t)v107, 0xCuLL);
    v109 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v108, (int32x4_t)v108), (int8x16_t)v108, 0xCuLL), v141), v108, v138);
    v110 = vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v109, v109), (int8x16_t)v109, 0xCuLL), v108, v144, 3);
    v108.i64[0] = 0x4000000040000000;
    v108.i64[1] = 0x4000000040000000;
    v111 = vmlaq_f32((float32x4_t)xmmword_210802BE0, v108, v110);
    v111.i32[3] = 0;
    v145 = v111;
    isWithinLimits = FIK::EulerLimitsChecker::isWithinLimits((uint64_t)v152, (uint64_t)&v145);
    v113 = 0;
    v151[5] = isWithinLimits;
    v114 = &v155[0].i8[12];
    v5 = v132;
    do
    {
      v115 = (float *)v114;
      for (i = 1; i != 4; ++i)
      {
        v117 = v155[0].f32[3 * i + v113];
        v118 = v115;
        v119 = i;
        while (1)
        {
          v120 = v119 - 1;
          v121 = v155[0].f32[3 * (v119 - 1) + v113];
          if (v121 <= v117)
            break;
          *v118 = v121;
          v118 -= 3;
          --v119;
          if (v120 + 1 <= 1)
          {
            LODWORD(v119) = 0;
            break;
          }
        }
        v155[0].f32[3 * (int)v119 + v113] = v117;
        v115 += 3;
      }
      ++v113;
      v114 += 4;
    }
    while (v113 != 3);
    v122 = (float *)&v157 + 1;
    v123 = 1;
    v124 = 9;
    do
    {
      if (!v151[v123 - 1])
        *(v122 - 1) = *(float *)&v152[v124 * 4 + 44];
      if (v151[v123])
      {
        v125 = *v122;
      }
      else
      {
        v125 = v155[0].f32[v124];
        *v122 = v125;
      }
      v126 = *(v122 - 1);
      if (v126 == v125)
      {
        if (v126 == 1.0)
        {
          *(v122 - 1) = 0.9998;
        }
        else if (v126 == -1.0)
        {
          *v122 = -0.9998;
        }
        else if (v126 == 0.0)
        {
          *(_QWORD *)(v122 - 1) = 0x3C75C28FBC75C28FLL;
        }
      }
      else if (v126 == 0.0)
      {
        *(v122 - 1) = 0.0001;
      }
      else if (v125 == 0.0)
      {
        *v122 = 0.0001;
      }
      v122 += 2;
      v123 += 2;
      ++v124;
    }
    while (v123 != 7);
  }
  v127 = 0;
  v128 = (float *)&v157 + 1;
  do
  {
    FIK::Segment::setLimits(this, v127++, *(v128 - 1), *v128);
    v128 += 2;
  }
  while (v127 != 3);
  FIK::Segment::setProjectionAxis((float32x4_t *)this, v133[0]);
  FIK::Segment::setRotationAxis((float32x2_t *)this, v5, 0);
  FIK::Segment::setLimits(this, 3u, *(float *)&v154[8 * v133[0]], *(float *)&v154[8 * v133[0] + 4]);
}

uint64_t FIK::Segment::getLimits(FIK::Segment *this)
{
  return (uint64_t)this + 640;
}

float FIK::Segment::getLimits(FIK::Segment *this, int a2)
{
  return *((float *)this + 2 * a2 + 160);
}

uint64_t FIK::Segment::getEulerLimits(FIK::Segment *this)
{
  return (uint64_t)this + 728;
}

uint64_t FIK::Segment::getStretchLimits(FIK::Segment *this)
{
  return (uint64_t)this + 680;
}

uint64_t FIK::Segment::setTranslating(uint64_t this, char a2, int a3)
{
  *(_BYTE *)(this + 533) = a2;
  if (a3)
    return FIK::Segment::setActiveDofs(this, a2, a2, a2, 0);
  return this;
}

uint64_t FIK::Segment::enableStretchLimits(uint64_t this, char a2)
{
  if (*(_QWORD *)(this + 32))
    *(_BYTE *)(this + 818) = a2;
  return this;
}

BOOL FIK::Segment::getEnableStretchLimits(FIK::Segment *this)
{
  return *((_QWORD *)this + 4) && *((_BYTE *)this + 818) != 0;
}

double FIK::Segment::setStretchLimits(FIK::Segment *this, unsigned int a2, float a3, float a4)
{
  float *v4;
  float *v5;
  double result;

  v4 = (float *)((char *)this + 8 * a2 + 680);
  if (a4 <= a3)
  {
    result = 0.0;
    *(_QWORD *)v4 = 0;
    *((_QWORD *)this + a2 + 88) = 0;
  }
  else
  {
    *v4 = a3;
    v5 = (float *)((char *)this + 8 * a2);
    v5[171] = a4;
    v5[176] = 3.1416 / (float)(a4 - a3);
    *(float *)&result = (float)(a3 + a4) * -0.5;
    v5[177] = *(float *)&result;
  }
  return result;
}

double FIK::Segment::setLimits(FIK::Segment *a1, int a2, float a3, float a4)
{
  return FIK::Segment::setStretchLimits(a1, (char)(a2 - 3 * ((((86 * a2) & 0x8000) != 0) + ((unsigned __int16)(86 * a2) >> 8))), a3, a4);
}

__n128 FIK::Segment::setRestStretch(uint64_t a1, float32x4_t *a2)
{
  float32x4_t v2;
  float32x4_t v3;
  __n128 result;

  v2.i64[0] = 0x3F0000003F000000;
  v2.i64[1] = 0x3F0000003F000000;
  *(float32x4_t *)(a1 + 880) = vmulq_f32(*a2, v2);
  v3 = vmulq_f32(*a2, *a2);
  *(float *)(a1 + 400) = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v3, 2), vaddq_f32(v3, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v3.f32, 1))).f32[0]);
  result = *(__n128 *)a2;
  *(float32x4_t *)(a1 + 208) = *a2;
  *(__n128 *)(a1 + 224) = result;
  return result;
}

uint64_t FIK::Segment::GetSolver(FIK::Segment *this)
{
  return *((_QWORD *)this + 100);
}

uint64_t FIK::Segment::Parent(FIK::Segment *this)
{
  return *((_QWORD *)this + 4);
}

void *FIK::Segment::getName(FIK::Segment *this)
{
  if (*((_QWORD *)this + 2))
    return (void *)*((_QWORD *)this + 1);
  else
    return &unk_2108059BE;
}

uint64_t FIK::Segment::enableShadowPosing(uint64_t this, int a2)
{
  float v2;

  v2 = 0.1;
  if (!a2)
    v2 = 1.0;
  *(_BYTE *)(this + 534) = a2;
  *(float *)(this + 616) = v2;
  return this;
}

void FIK::Segment::~Segment(FIK::Segment *this, void *a2)
{
  FIK::Segment::~Segment(this, a2);
  JUMPOUT(0x212BCAFB4);
}

{
  FIK *v3;
  uint64_t v4;

  v3 = (FIK *)*((_QWORD *)this + 116);
  if (v3)
    FIK::FIKFree(v3, a2);
  *((_QWORD *)this + 5) = 0;
  v4 = *((_QWORD *)this + 7);
  if (v4)
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)this + 8) + 24))(*((_QWORD *)this + 8), v4, 0, 8);
  if (*((_QWORD *)this + 2))
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 3) + 24))(*((_QWORD *)this + 3), *((_QWORD *)this + 1), 0, 8);
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
  }
}

uint64_t FIK::Segment::haveRetargeting(FIK::Segment *this)
{
  return *((unsigned __int8 *)this + 535);
}

uint64_t FIK::Segment::haveShadowPosing(FIK::Segment *this)
{
  return *((unsigned __int8 *)this + 534);
}

uint64_t FIK::Segment::haveLimits(FIK::Segment *this)
{
  return *((unsigned __int8 *)this + 817);
}

uint64_t FIK::Segment::getEnforceLimits(FIK::Segment *this)
{
  return *((unsigned __int8 *)this + 819);
}

uint64_t FIK::Segment::enforceStretchLimits(uint64_t this, char a2)
{
  *(_BYTE *)(this + 824) = a2;
  return this;
}

uint64_t FIK::Segment::getEnforceStretchLimits(FIK::Segment *this)
{
  return *((unsigned __int8 *)this + 824);
}

uint64_t FIK::Segment::Translational(FIK::Segment *this)
{
  return *((unsigned __int8 *)this + 532);
}

uint64_t FIK::Segment::getTranslating(FIK::Segment *this)
{
  return *((unsigned __int8 *)this + 533);
}

float32x4_t FIK::Segment::setTargetRotation(float32x4_t *this, float32x4_t a2, float32_t a3, float a4, float a5)
{
  int8x16_t v5;
  float32x2_t v6;
  float32x4_t result;
  unsigned __int32 v8;
  float32x2_t v9;
  float32x2_t v10;

  a2.f32[1] = a3;
  a2.i64[1] = __PAIR64__(LODWORD(a5), LODWORD(a4));
  v5 = (int8x16_t)vmulq_f32(a2, a2);
  v6 = vadd_f32(*(float32x2_t *)v5.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL));
  if (vaddv_f32(v6) == 0.0)
  {
    result = (float32x4_t)xmmword_210802BA0;
  }
  else
  {
    v8 = vadd_f32(v6, (float32x2_t)vdup_lane_s32((int32x2_t)v6, 1)).u32[0];
    v9 = vrsqrte_f32((float32x2_t)v8);
    v10 = vmul_f32(v9, vrsqrts_f32((float32x2_t)v8, vmul_f32(v9, v9)));
    result = vmulq_n_f32(a2, vmul_f32(v10, vrsqrts_f32((float32x2_t)v8, vmul_f32(v10, v10))).f32[0]);
  }
  this[49] = result;
  if (this[33].i8[7])
  {
    result = this[49];
    this[24] = result;
  }
  return result;
}

uint64_t FIK::Segment::getTargetOrientation(FIK::Segment *this)
{
  return (uint64_t)this + 784;
}

uint64_t FIK::Segment::getTargetRotation(FIK::Segment *this)
{
  return (uint64_t)this + 784;
}

__n128 FIK::Segment::getLocalTransform@<Q0>(__n128 *this@<X0>, __n128 *a2@<X8>)
{
  __n128 result;
  __n128 v3;

  result = this[6];
  v3 = this[15];
  *a2 = result;
  a2[1] = v3;
  return result;
}

uint64_t FIK::Segment::Child(FIK::Segment *this)
{
  return *((_QWORD *)this + 9);
}

uint64_t FIK::Segment::Sibling(FIK::Segment *this)
{
  return *((_QWORD *)this + 10);
}

BOOL FIK::Segment::isRoot(FIK::Segment *this)
{
  return *((_QWORD *)this + 4) == 0;
}

uint64_t FIK::Segment::NoDof(FIK::Segment *this)
{
  return *((unsigned int *)this + 128);
}

uint64_t FIK::Segment::Id(FIK::Segment *this)
{
  return *((unsigned int *)this + 129);
}

uint64_t FIK::Segment::SegmentId(FIK::Segment *this)
{
  return *((unsigned int *)this + 130);
}

uint64_t FIK::Segment::setUserData(uint64_t this, void *a2)
{
  *(_QWORD *)(this + 936) = a2;
  return this;
}

uint64_t FIK::Segment::getUserData(FIK::Segment *this)
{
  return *((_QWORD *)this + 117);
}

uint64_t FIK::Segment::getStart(FIK::Segment *this)
{
  return (uint64_t)this + 416;
}

uint64_t FIK::Segment::getEnd(FIK::Segment *this)
{
  return (uint64_t)this + 432;
}

uint64_t FIK::Segment::getTransform(FIK::Segment *this)
{
  return (uint64_t)this + 432;
}

uint64_t FIK::Segment::SetCollisionShape(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 928) = a2;
  return result;
}

uint64_t FIK::Segment::GetCollisionShape(FIK::Segment *this)
{
  return *((_QWORD *)this + 116);
}

{
  return *((_QWORD *)this + 116);
}

uint64_t FIK::Segment::setLimitsGain(uint64_t this, float a2)
{
  *(float *)(this + 612) = a2;
  return this;
}

uint64_t FIK::Segment::setRetargetingGain(uint64_t this, float a2)
{
  *(float *)(this + 616) = a2;
  return this;
}

uint64_t FIK::Segment::setRetargetingGain(uint64_t this, int a2, float a3)
{
  if (a2 <= 2)
    *(float *)(this + 4 * a2 + 620) = a3;
  return this;
}

uint64_t FIK::Segment::setRetargetingGain(uint64_t result, int a2, float a3)
{
  *(float *)(result + 4 * a2 + 620) = a3;
  return result;
}

float FIK::Segment::getRetargetingGain(FIK::Segment *this)
{
  return *((float *)this + 154);
}

float FIK::Segment::getRetargetingGain(FIK::Segment *this, int a2)
{
  float result;

  result = -1.0;
  if (a2 <= 2)
    return *((float *)this + a2 + 155);
  return result;
}

float FIK::Segment::getRetargetingGain(uint64_t a1, int a2)
{
  return *(float *)(a1 + 4 * a2 + 620);
}

uint64_t FIK::Segment::setTranslationErrorGain(uint64_t this, float a2)
{
  *(float *)(this + 632) = a2;
  return this;
}

float FIK::Segment::getTranslationErrorGain(FIK::Segment *this)
{
  return *((float *)this + 158);
}

float FIK::Segment::MaxExtension(FIK::Segment *this)
{
  return *((float *)this + 100);
}

float FIK::Segment::Weight(FIK::Segment *this, int a2)
{
  return *((float *)this + a2 + 134);
}

float FIK::Segment::getStiffness(uint64_t a1, int a2)
{
  return 1.0 - *(float *)(a1 + 4 * a2 + 536);
}

{
  return 1.0 - *(float *)(a1 + 4 * a2 + 536);
}

float FIK::Segment::Weight(uint64_t a1, int a2)
{
  return *(float *)(a1 + 4 * a2 + 536);
}

{
  return *(float *)(a1 + 4 * a2 + 536);
}

void FIK::Segment::setName(FIK::Segment *this, char *__s)
{
  _QWORD *v3;
  IKString *v4;

  v3 = (_QWORD *)((char *)this + 8);
  v4 = (IKString *)strlen(__s);
  IKString::assign(v3, __s, v4);
}

uint64_t FIK::Segment::getRestPosition(FIK::Segment *this)
{
  return (uint64_t)this + 864;
}

uint64_t FIK::Segment::getRestQuaternion(FIK::Segment *this)
{
  return (uint64_t)this + 368;
}

__n128 FIK::Segment::getRestTransform@<Q0>(__n128 *this@<X0>, __n128 *a2@<X8>)
{
  __n128 result;
  __n128 v3;

  result = this[54];
  v3 = this[23];
  *a2 = result;
  a2[1] = v3;
  return result;
}

__n128 FIK::Segment::Axis@<Q0>(__n128 *this@<X0>, int a2@<W1>, __n128 *a3@<X8>)
{
  __n128 result;

  result = this[a2 % 3 + 20];
  *a3 = result;
  return result;
}

__n128 FIK::Segment::Axis@<Q0>(uint64_t a1@<X0>, int a2@<W1>, __n128 *a3@<X8>)
{
  __n128 result;

  result = *(__n128 *)(a1
                     + 16 * (char)(a2 - 3 * ((((86 * a2) & 0x8000) != 0) + ((unsigned __int16)(86 * a2) >> 8)))
                     + 320);
  *a3 = result;
  return result;
}

BOOL FIK::Segment::haveMocap(FIK::Segment *this)
{
  return *((_BYTE *)this + 535) || *((_BYTE *)this + 534) != 0;
}

uint64_t FIK::Segment::ActiveDof(FIK::Segment *this, unsigned int a2)
{
  return *((unsigned __int8 *)this + a2 + 808);
}

uint64_t FIK::Segment::ActiveDof(uint64_t a1, int a2)
{
  return *(unsigned __int8 *)(a1 + a2 + 808);
}

{
  return *(unsigned __int8 *)(a1 + a2 + 808);
}

uint64_t FIK::Segment::ActiveStretchDof(FIK::Segment *this, int a2)
{
  return *((unsigned __int8 *)this + (a2 + 3) + 808);
}

float FIK::Segment::getCoMWeight(FIK::Segment *this)
{
  return *((float *)this + 142);
}

float FIK::Segment::getMass(FIK::Segment *this)
{
  return *((float *)this + 189);
}

float FIK::Segment::getMaxW(FIK::Segment *this)
{
  return *((float *)this + 152);
}

uint64_t FIK::EulerLimitsChecker::EulerLimitsChecker(uint64_t a1, __int128 *a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  __int128 v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;

  v9 = *a2;
  *(_OWORD *)(a1 + 9) = *(__int128 *)((char *)a2 + 9);
  *(_OWORD *)a1 = v9;
  *(_DWORD *)(a1 + 28) = a3;
  *(_DWORD *)(a1 + 32) = a4;
  *(_DWORD *)(a1 + 36) = a5;
  if (a4 >= a3)
    v10 = a3;
  else
    v10 = a4;
  if (v10 > a5)
    v10 = a5;
  if (v10)
  {
    v13 = ikinemaLogObject();
    ikinemaAssertHandler(*v13, 0, (uint64_t)"EulerLimitsChecker", "(std::min({forwardAxis, leftAxis, upAxis}) == 0) Axis indices must be within [0, 2].");
  }
  if (a3 <= a4)
    v11 = a4;
  else
    v11 = a3;
  if (v11 < a5)
    v11 = a5;
  if (v11 != 2)
  {
    v14 = ikinemaLogObject();
    ikinemaAssertHandler(*v14, 0, (uint64_t)"EulerLimitsChecker", "(std::max({forwardAxis, leftAxis, upAxis}) == 2) Axis indices must be within [0, 2].");
  }
  if (a3 == a4)
  {
    v15 = ikinemaLogObject();
    ikinemaAssertHandler(*v15, 0, (uint64_t)"EulerLimitsChecker", "(forwardAxis != leftAxis) All axes must be unique.");
  }
  if (a3 == a5)
  {
    v16 = ikinemaLogObject();
    ikinemaAssertHandler(*v16, 0, (uint64_t)"EulerLimitsChecker", "(forwardAxis != upAxis) All axes must be unique.");
  }
  if (a4 == a5)
  {
    v17 = ikinemaLogObject();
    ikinemaAssertHandler(*v17, 0, (uint64_t)"EulerLimitsChecker", "(leftAxis != upAxis) All axes must be unique.");
  }
  return a1;
}

void IKString::assign(_QWORD *a1, char *__src, IKString *this)
{
  IKString *v4;
  char *v6;
  _BYTE *StringBuffer;
  IKString *v8;
  char v9;

  v4 = (IKString *)a1[1];
  if (this)
  {
    v6 = __src;
    if (v4 >= this)
    {
      memmove((void *)*a1, __src, (size_t)this);
      if (v4 != this)
        bzero((char *)this + *a1, v4 - this);
    }
    else
    {
      if (v4)
      {
        (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a1[2] + 24))(a1[2], *a1, 0, 8);
        *a1 = 0;
        a1[1] = 0;
      }
      StringBuffer = (_BYTE *)IKString::allocateStringBuffer(this, a1[2], this);
      *a1 = StringBuffer;
      v8 = this;
      do
      {
        v9 = *v6++;
        *StringBuffer++ = v9;
        v8 = (IKString *)((char *)v8 - 1);
      }
      while (v8);
    }
    a1[1] = this;
  }
  else if (v4)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a1[2] + 24))(a1[2], *a1, 0, 8);
    *a1 = 0;
    a1[1] = 0;
  }
}

uint64_t IKString::allocateStringBuffer(IKString *this, uint64_t a2, FIK::Allocator *a3)
{
  uint64_t v4;
  uint64_t *v6;

  if (!this)
    return 0;
  v4 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)a2 + 16))(a2, (char *)this + 1, 8);
  if (!v4)
  {
    v6 = ikinemaLogObject();
    ikinemaAssertHandler(*v6, 0, (uint64_t)"allocateStringBuffer", "(buffer) Unable to allocate memory for string.");
  }
  *((_BYTE *)this + v4) = 0;
  return v4;
}

_QWORD *FIK::IKArray<FIK::Segment *>::reserve(_QWORD *result, unint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;

  if (result[1] < a2)
  {
    v2 = result;
    v3 = result[3];
    v4 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v4)
    {
      v5 = (void *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)v3 + 16))(result[3], 8 * v4, 8);
      v6 = v5;
      if (8 * v4)
        bzero(v5, 8 * v4);
    }
    else
    {
      v6 = 0;
    }
    memcpy(v6, (const void *)v2[2], 8 * *v2);
    v7 = v2[2];
    result = (_QWORD *)v2[3];
    v2[1] = v4;
    v2[2] = v6;
    v2[3] = v3;
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, _QWORD, uint64_t))(*result + 24))(result, v7, 0, 8);
  }
  return result;
}

void FIK::BalanceTask::BalanceTask(FIK::BalanceTask *this, char a2, FIK::Segment *a3, int a4, char a5, char a6, uint64_t a7)
{
  uint64_t v12;

  *((_QWORD *)this + 33) = off_24CA68D90;
  *(_QWORD *)this = &unk_24CA69010;
  FIK::Task::Task((uint64_t)this, (uint64_t *)&off_24CA6A740, 3, a2, (uint64_t)a3);
  *(_QWORD *)v12 = &off_24CA6AC88;
  *(_QWORD *)(v12 + 168) = a7;
  *(_QWORD *)(v12 + 176) = 0;
  *(_BYTE *)(v12 + 184) = a5;
  *(_BYTE *)(v12 + 185) = a6;
  *(_BYTE *)(v12 + 186) = 0;
  *(_OWORD *)(v12 + 192) = 0u;
  *(_OWORD *)(v12 + 208) = 0u;
  *(_OWORD *)(v12 + 224) = 0u;
  *(_OWORD *)(v12 + 240) = 0u;
  *(_QWORD *)(v12 + 256) = a3;
  *(_QWORD *)(v12 + 264) = &off_24CA6AFD8;
  *(_DWORD *)(v12 + 4 * a4 + 240) = 1065353216;
  if ((a6 & 1) == 0)
    *(_DWORD *)(v12 + 24) = 0;
  *(_BYTE *)(v12 + 29) = a5 | a6;
}

uint64_t FIK::BalanceTask::setCGRelativeRoot(uint64_t this, char a2)
{
  *(_BYTE *)(this + 186) = a2;
  return this;
}

_QWORD *`virtual thunk to'FIK::BalanceTask::setCGRelativeRoot(_QWORD *this, char a2)
{
  *((_BYTE *)this + *(_QWORD *)(*this - 328) + 186) = a2;
  return this;
}

uint64_t FIK::BalanceTask::setWeightForce(float32x4_t *this, float32_t a2)
{
  this[11].f32[1] = a2;
  this[14] = vmulq_n_f32(this[15], -a2);
  return FIK::Solver::recalculateForces(this[8].i64[0], 1);
}

uint64_t FIK::BalanceTask::setGlobalUp(float32x4_t *this, float32x4_t a2, float32_t a3, float32_t a4)
{
  float32x4_t v4;
  float32x4_t v5;
  float v6;
  BOOL v7;
  float v8;
  float32x4_t v9;

  v4.i64[0] = __PAIR64__(LODWORD(a3), a2.u32[0]);
  v4.i64[1] = LODWORD(a4);
  a2.f32[1] = a3;
  a2.f32[2] = a4;
  v5 = vmulq_f32(v4, v4);
  v5.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v5, 2), vaddq_f32(v5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 1))).f32[0]);
  v6 = 1.0 / v5.f32[0];
  v7 = v5.f32[0] == 0.0;
  v8 = 0.0;
  if (!v7)
    v8 = v6;
  v9 = vmulq_n_f32(a2, v8);
  this[14] = vmulq_n_f32(v9, -this[11].f32[1]);
  this[15] = v9;
  return FIK::Solver::recalculateForces(this[8].i64[0], 1);
}

uint64_t FIK::BalanceTask::setGlobalUp(float32x4_t *a1, float32x4_t *a2)
{
  float32x4_t v2;
  float32x4_t v3;
  float v4;
  BOOL v5;
  float v6;
  float32x4_t v7;

  v2 = *a2;
  v3 = vmulq_f32(v2, v2);
  v3.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v3, 2), vaddq_f32(v3, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v3.f32, 1))).f32[0]);
  v4 = 1.0 / v3.f32[0];
  v5 = v3.f32[0] == 0.0;
  v6 = 0.0;
  if (!v5)
    v6 = v4;
  v7 = vmulq_n_f32(v2, v6);
  a1[14] = vmulq_n_f32(v7, -a1[11].f32[1]);
  a1[15] = v7;
  return FIK::Solver::recalculateForces(a1[8].i64[0], 1);
}

uint64_t `virtual thunk to'FIK::BalanceTask::setGlobalUp(FIK::BalanceTask *this, float32x4_t a2, float32_t a3, float32_t a4)
{
  float32x4_t *v4;
  float32x4_t v5;
  float32x4_t v6;
  float v7;
  BOOL v8;
  float v9;
  float32x4_t v10;

  v4 = (float32x4_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 368));
  v5.i64[0] = __PAIR64__(LODWORD(a3), a2.u32[0]);
  v5.i64[1] = LODWORD(a4);
  a2.f32[1] = a3;
  a2.f32[2] = a4;
  v6 = vmulq_f32(v5, v5);
  v6.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v6, 2), vaddq_f32(v6, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v6.f32, 1))).f32[0]);
  v7 = 1.0 / v6.f32[0];
  v8 = v6.f32[0] == 0.0;
  v9 = 0.0;
  if (!v8)
    v9 = v7;
  v10 = vmulq_n_f32(a2, v9);
  v4[14] = vmulq_n_f32(v10, -v4[11].f32[1]);
  v4[15] = v10;
  return FIK::Solver::recalculateForces(v4[8].i64[0], 1);
}

uint64_t `virtual thunk to'FIK::BalanceTask::setGlobalUp(_QWORD *a1, float32x4_t *a2)
{
  float32x4_t *v2;
  float32x4_t v3;
  float32x4_t v4;
  float v5;
  BOOL v6;
  float v7;
  float32x4_t v8;

  v2 = (float32x4_t *)((char *)a1 + *(_QWORD *)(*a1 - 376));
  v3 = *a2;
  v4 = vmulq_f32(v3, v3);
  v4.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v4, 2), vaddq_f32(v4, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v4.f32, 1))).f32[0]);
  v5 = 1.0 / v4.f32[0];
  v6 = v4.f32[0] == 0.0;
  v7 = 0.0;
  if (!v6)
    v7 = v5;
  v8 = vmulq_n_f32(v3, v7);
  v2[14] = vmulq_n_f32(v8, -v2[11].f32[1]);
  v2[15] = v8;
  return FIK::Solver::recalculateForces(v2[8].i64[0], 1);
}

uint64_t FIK::BalanceTask::setGlobalUp(FIK::BalanceTask *this, int a2)
{
  float32x4_t *v2;

  *((_OWORD *)this + 15) = 0u;
  v2 = (float32x4_t *)((char *)this + 240);
  v2->i32[a2] = 1065353216;
  v2[-1] = vmulq_n_f32(*v2, -v2[-4].f32[1]);
  return FIK::Solver::recalculateForces(v2[-7].i64[0], 1);
}

uint64_t `virtual thunk to'FIK::BalanceTask::setGlobalUp(FIK::BalanceTask *this, int a2)
{
  char *v2;

  v2 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 360);
  *((_OWORD *)v2 + 15) = 0u;
  v2 += 240;
  *(_DWORD *)&v2[4 * a2] = 1065353216;
  *((float32x4_t *)v2 - 1) = vmulq_n_f32(*(float32x4_t *)v2, -*((float *)v2 - 15));
  return FIK::Solver::recalculateForces(*((_QWORD *)v2 - 14), 1);
}

uint64_t FIK::BalanceTask::enableCGPosition(uint64_t this, int a2)
{
  int v2;
  char v3;

  if (*(unsigned __int8 *)(this + 185) != a2)
  {
    *(_WORD *)(*(_QWORD *)(this + 128) + 381) = 257;
    if (a2)
      v2 = 3;
    else
      v2 = 0;
    *(_DWORD *)(this + 24) = v2;
    *(_BYTE *)(this + 185) = a2;
    if (*(_BYTE *)(this + 184))
      v3 = 1;
    else
      v3 = a2;
    *(_BYTE *)(this + 29) = v3;
  }
  return this;
}

_QWORD *`virtual thunk to'FIK::BalanceTask::enableCGPosition(_QWORD *this, int a2)
{
  char *v2;
  int v3;
  char v4;

  v2 = (char *)this + *(_QWORD *)(*this - 320);
  if (v2[185] != a2)
  {
    *(_WORD *)(*((_QWORD *)v2 + 16) + 381) = 257;
    if (a2)
      v3 = 3;
    else
      v3 = 0;
    *((_DWORD *)v2 + 6) = v3;
    v2[185] = a2;
    if (v2[184])
      v4 = 1;
    else
      v4 = a2;
    v2[29] = v4;
  }
  return this;
}

_BYTE *FIK::BalanceTask::enableMoments(_BYTE *this, int a2)
{
  uint64_t v2;
  BOOL v3;

  if (this[184] != a2)
  {
    v2 = *((_QWORD *)this + 16);
    *(_WORD *)(v2 + 381) = 257;
    this[184] = a2;
    v3 = (a2 & 1) != 0 || this[185] != 0;
    this[29] = v3;
    return FIK::BalanceTask::updateTasks(this, (_QWORD *)(v2 + 112));
  }
  return this;
}

_BYTE *FIK::BalanceTask::updateTasks(_BYTE *result, _QWORD *a2)
{
  char v2;
  _QWORD *v3;
  uint64_t v4;

  if (result[184])
    v2 = result[29] != 0;
  else
    v2 = 0;
  if (*a2)
  {
    v3 = (_QWORD *)a2[2];
    v4 = 8 * *a2;
    do
    {
      result = (_BYTE *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3 + 160))(*v3);
      if ((_DWORD)result)
        result = FIK::PositionTask::computeTorqueDerivatives((_BYTE *)*v3, v2);
      ++v3;
      v4 -= 8;
    }
    while (v4);
  }
  return result;
}

_BYTE *`virtual thunk to'FIK::BalanceTask::enableMoments(FIK::BalanceTask *this, int a2)
{
  return FIK::BalanceTask::enableMoments((_BYTE *)this + *(_QWORD *)(*(_QWORD *)this - 336), a2);
}

__n128 FIK::BalanceTask::setTarget(__n128 *this, const float *a2, __n128 a3)
{
  __n128 result;

  a3.n128_u64[0] = *(_QWORD *)a2;
  a3.n128_f32[2] = a2[2];
  this[12] = a3;
  result.n128_u64[0] = a3.n128_u64[0];
  result.n128_u32[2] = a3.n128_u32[2];
  return result;
}

__n128 FIK::BalanceTask::setTarget(__n128 *this, __n128 a2, float a3, float a4)
{
  __n128 result;

  a2.n128_f32[1] = a3;
  a2.n128_f32[2] = a4;
  this[12] = a2;
  result.n128_u64[0] = a2.n128_u64[0];
  result.n128_u32[2] = a2.n128_u32[2];
  return result;
}

__n128 `virtual thunk to'FIK::BalanceTask::setTarget(FIK::BalanceTask *this, const float *a2, __n128 a3)
{
  __n128 result;

  a3.n128_u64[0] = *(_QWORD *)a2;
  a3.n128_f32[2] = a2[2];
  *(__n128 *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 136) + 192) = a3;
  result.n128_u64[0] = a3.n128_u64[0];
  result.n128_u32[2] = a3.n128_u32[2];
  return result;
}

__n128 `virtual thunk to'FIK::BalanceTask::setTarget(FIK::BalanceTask *this, __n128 a2, float a3, float a4)
{
  __n128 result;

  a2.n128_f32[1] = a3;
  a2.n128_f32[2] = a4;
  *(__n128 *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 272) + 192) = a2;
  result.n128_u64[0] = a2.n128_u64[0];
  result.n128_u32[2] = a2.n128_u32[2];
  return result;
}

__n128 FIK::BalanceTask::setTarget(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[12] = *a2;
  return result;
}

__n128 `virtual thunk to'FIK::BalanceTask::setTarget(_QWORD *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *(__n128 *)((char *)a1 + *(_QWORD *)(*a1 - 280) + 192) = *a2;
  return result;
}

_BYTE *FIK::BalanceTask::setActive(_BYTE *this, int a2, int a3)
{
  uint64_t v3;

  if (a3)
  {
    this[34] = a2;
    this[33] = a2;
    this[32] = a2;
  }
  if (!this[185] && !this[184])
    a2 = 0;
  if (this[29] != a2)
  {
    this[29] = a2;
    v3 = *((_QWORD *)this + 16);
    *(_BYTE *)(v3 + 381) = 1;
    return FIK::BalanceTask::updateTasks(this, (_QWORD *)(v3 + 112));
  }
  return this;
}

_BYTE *`virtual thunk to'FIK::BalanceTask::setActive(FIK::BalanceTask *this, int a2, int a3)
{
  return FIK::BalanceTask::setActive((_BYTE *)this + *(_QWORD *)(*(_QWORD *)this - 152), a2, a3);
}

float32x4_t FIK::BalanceTask::setFKTarget(FIK::BalanceTask *this)
{
  uint64_t Pos;
  float32x4_t v3;
  float32x4_t result;

  Pos = FIK::Segment::getPos(*((FIK::Segment **)this + 32));
  v3.i64[0] = *(_QWORD *)Pos;
  v3.i32[2] = *(_DWORD *)(Pos + 8);
  result = vaddq_f32(*((float32x4_t *)this + 13), vaddq_f32(v3, *(float32x4_t *)FIK::Segment::getAugCenter(*((FIK::Segment **)this + 32))));
  *((float32x4_t *)this + 12) = result;
  return result;
}

uint64_t FIK::BalanceTask::computeDeltaX(uint64_t this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_BYTE *)(this + 185))
  {
    v2 = *(_QWORD *)(this + 120);
    v3 = *(unsigned int *)(this + 8);
    *(_DWORD *)(v2 + 4 * (v3 + 2)) = 0;
    *(_DWORD *)(v2 + 4 * (v3 + 1)) = 0;
    *(_DWORD *)(v2 + 4 * v3) = 0;
  }
  if (*(_BYTE *)(this + 184))
  {
    v4 = *(_QWORD *)(this + 120);
    *(_DWORD *)(v4 + 4 * (a2 - 1)) = 0;
    *(_DWORD *)(v4 + 4 * (a2 - 2)) = 0;
    *(_DWORD *)(v4 + 4 * (a2 - 3)) = 0;
  }
  return this;
}

void FIK::BalanceTask::getTorque(FIK::BalanceTask *this@<X0>, int8x16_t *a2@<X8>)
{
  float32x4_t v4;
  int32x4_t v5;
  int8x16_t v6;
  uint64_t v7;
  uint64_t v8;
  float32x4_t **v9;
  uint64_t v10;
  float32x4_t v11;
  float32x4_t v12;

  if (*((_QWORD *)this + 32))
  {
    if ((FIK::Solver::doneFK(*((FIK::Solver **)this + 16)) & 1) == 0)
      FIK::Solver::updateFK(*((float32x4_t **)this + 16));
    v4 = vaddq_f32(*(float32x4_t *)(*((_QWORD *)this + 32) + 416), *(float32x4_t *)FIK::Segment::getAugCenter(*((FIK::Segment **)this + 32)));
    v5 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*((int32x4_t *)this + 14), *((int32x4_t *)this + 14)), *((int8x16_t *)this + 14), 0xCuLL), vnegq_f32(v4)), *((float32x4_t *)this + 14), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v4, (int32x4_t)v4), (int8x16_t)v4, 0xCuLL));
    v6 = vextq_s8((int8x16_t)vuzp1q_s32(v5, v5), (int8x16_t)v5, 0xCuLL);
    v6.i32[3] = 0;
    v11 = (float32x4_t)v6;
    *a2 = v6;
    v7 = *((_QWORD *)this + 16);
    v8 = *(_QWORD *)(v7 + 112);
    if (v8)
    {
      v9 = *(float32x4_t ***)(v7 + 128);
      v10 = 8 * v8;
      do
      {
        if ((*v9)[1].i8[13])
        {
          if ((*(unsigned int (**)(float32x4_t *))((*v9)->i64[0] + 176))(*v9))
          {
            FIK::PositionTask::getNTorque(*v9, (__n128 *)&v12);
            v11 = vsubq_f32(v11, v12);
            v12 = vnegq_f32(v12);
            *a2 = (int8x16_t)v11;
          }
        }
        ++v9;
        v10 -= 8;
      }
      while (v10);
    }
  }
  else
  {
    a2->i64[0] = 0;
    a2->i64[1] = 0;
  }
}

void `virtual thunk to'FIK::BalanceTask::getTorque(FIK::BalanceTask *this@<X0>, int8x16_t *a2@<X8>)
{
  FIK::BalanceTask::getTorque((FIK::BalanceTask *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 312)), a2);
}

void FIK::BalanceTask::computeDerivatives(FIK::BalanceTask *this, unsigned int a2, int a3)
{
  float32x4_t v5;
  float32x4_t *AugCenter;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int32x4_t v11;
  int8x16_t v12;
  uint64_t v13;
  uint64_t v14;
  float32x4_t **v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  int8x16_t *v21;
  uint64_t v22;
  float32x4_t v23;
  unsigned int v24;
  float32x4_t v25;
  float32x4_t v26;
  int32x4_t v27;
  float32x4_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int32x4_t v33;
  uint64_t v34;
  uint64_t v35;
  float32x4_t v36;
  int v37;
  uint64_t v38;
  int i;
  uint64_t j;
  uint64_t v41;
  int32x4_t v42;
  uint64_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;

  v5 = vaddq_f32(*(float32x4_t *)(*((_QWORD *)this + 32) + 416), *(float32x4_t *)FIK::Segment::getAugCenter(*((FIK::Segment **)this + 32)));
  if (*((_BYTE *)this + 185))
  {
    v45 = v5;
    if (*((_BYTE *)this + 186))
    {
      v44 = *((float32x4_t *)this + 12);
      AugCenter = (float32x4_t *)FIK::Segment::getAugCenter(*((FIK::Segment **)this + 32));
    }
    else
    {
      v44 = vsubq_f32(*((float32x4_t *)this + 12), v5);
      AugCenter = (float32x4_t *)FIK::Solver::getZMP(*((FIK::Solver **)this + 16));
    }
    v48 = vsubq_f32(v44, *AugCenter);
    v7 = *((_DWORD *)this + 6);
    if (v7)
    {
      v8 = 0;
      v9 = *((_DWORD *)this + 2);
      v10 = *((_QWORD *)this + 15);
      do
      {
        *(_DWORD *)(v10 + 4 * (v9 + v8)) = v48.i32[v8];
        ++v8;
      }
      while (v7 != v8);
    }
    v5 = v45;
  }
  if (*((_BYTE *)this + 184))
  {
    v11 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v5, (int32x4_t)v5), (int8x16_t)v5, 0xCuLL), vnegq_f32(*((float32x4_t *)this + 14))), v5, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*((int32x4_t *)this + 14), *((int32x4_t *)this + 14)), *((int8x16_t *)this + 14), 0xCuLL));
    v12 = vextq_s8((int8x16_t)vuzp1q_s32(v11, v11), (int8x16_t)v11, 0xCuLL);
    v12.i32[3] = 0;
    v46 = (float32x4_t)v12;
    v13 = *((_QWORD *)this + 16);
    v14 = *(_QWORD *)(v13 + 112);
    if (v14)
    {
      v15 = *(float32x4_t ***)(v13 + 128);
      v16 = 8 * v14;
      do
      {
        if ((*v15)[1].i8[13] && (*(unsigned int (**)(float32x4_t *))((*v15)->i64[0] + 176))(*v15))
        {
          FIK::PositionTask::getNTorque(*v15, (__n128 *)&v48);
          v46 = vaddq_f32(v46, v48);
        }
        ++v15;
        v16 -= 8;
      }
      while (v16);
    }
    v17 = *((_QWORD *)this + 15);
    *(_DWORD *)(v17 + 4 * (a3 - 3)) = v46.i32[0];
    *(_DWORD *)(v17 + 4 * (a3 - 2)) = v46.i32[1];
    *(_DWORD *)(v17 + 4 * (a3 - 1)) = v46.i32[2];
  }
  if (*((_QWORD *)this + 21))
  {
    LODWORD(v18) = 0;
    v19 = *((_QWORD *)this + 5);
    v20 = a3 - 3;
    while (1)
    {
      if (!*(_QWORD *)(v19 + 72))
        FIK::Solver::checkReach(*((_QWORD *)this + 16), *(float *)(v19 + 636));
      if (*(_BYTE *)(v19 + 814))
      {
        v21 = (int8x16_t *)FIK::Segment::getAugCenter((FIK::Segment *)v19);
        v22 = 0;
        v23 = *(float32x4_t *)v21;
        v24 = *(_DWORD *)(v19 + 516);
        v25 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v23, (int32x4_t)v23), *v21, 0xCuLL);
        do
        {
          if (*(_BYTE *)(v19 + v22 + 808))
          {
            v26 = vmulq_n_f32(*(float32x4_t *)(v19 + 16 * v22 + 320), *(float *)(v19 + 568));
            v27 = (int32x4_t)vmlaq_f32(vmulq_f32(v25, vnegq_f32(v26)), v23, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v26, (int32x4_t)v26), (int8x16_t)v26, 0xCuLL));
            v28 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v27, v27), (int8x16_t)v27, 0xCuLL);
            v48 = v28;
            if (*((_BYTE *)this + 185))
            {
              v29 = 0;
              v30 = *((_DWORD *)this + 2);
              v31 = *((_QWORD *)this + 11);
              do
              {
                *(_DWORD *)(*(_QWORD *)(v31 + 8 * (v30 + v29)) + 4 * v24) = v48.i32[v29];
                ++v29;
              }
              while (v29 != 3);
            }
            if (*((_BYTE *)this + 184))
            {
              v32 = 0;
              v33 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*((int32x4_t *)this + 14), *((int32x4_t *)this + 14)), *((int8x16_t *)this + 14), 0xCuLL), vnegq_f32(v28)), *((float32x4_t *)this + 14), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v28, (int32x4_t)v28), (int8x16_t)v28, 0xCuLL));
              v48 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v33, v33), (int8x16_t)v33, 0xCuLL);
              v34 = *((_QWORD *)this + 11);
              do
              {
                *(_DWORD *)(*(_QWORD *)(v34 + 8 * (v20 + v32)) + 4 * v24) = v48.i32[v32];
                ++v32;
              }
              while (v32 != 3);
            }
            ++v24;
          }
          ++v22;
        }
        while (v22 != 3);
        if (*(_BYTE *)(v19 + 532))
          break;
      }
LABEL_49:
      v18 = (v18 + 1);
      v19 += 944;
      if (*((_QWORD *)this + 21) <= v18)
        return;
    }
    v35 = 0;
    while (!*(_BYTE *)(v35 + v19 + 811))
    {
LABEL_48:
      if (++v35 == 3)
        goto LABEL_49;
    }
    v36 = vmulq_n_f32(*(float32x4_t *)(v19 + 16 * v35 + 320), *(float *)(v19 + 568));
    v47 = v36;
    if (*((_BYTE *)this + 185))
    {
      v37 = *((_DWORD *)this + 2);
      if (*((_BYTE *)this + 186))
      {
        v38 = *((_QWORD *)this + 11);
        if (v19 == *((_QWORD *)this + 32))
        {
          for (i = 0; i != 3; ++i)
            *(_DWORD *)(*(_QWORD *)(v38 + 8 * (v37 + i)) + 4 * v24) = 0;
          goto LABEL_44;
        }
      }
      else
      {
        v38 = *((_QWORD *)this + 11);
      }
      for (j = 0; j != 3; ++j)
        *(_DWORD *)(*(_QWORD *)(v38 + 8 * (v37 + j)) + 4 * v24) = v47.i32[j];
    }
LABEL_44:
    if (*((_BYTE *)this + 184))
    {
      v41 = 0;
      v42 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*((int32x4_t *)this + 14), *((int32x4_t *)this + 14)), *((int8x16_t *)this + 14), 0xCuLL), vnegq_f32(v36)), *((float32x4_t *)this + 14), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v36, (int32x4_t)v36), (int8x16_t)v36, 0xCuLL));
      v48 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v42, v42), (int8x16_t)v42, 0xCuLL);
      v43 = *((_QWORD *)this + 11);
      do
      {
        *(_DWORD *)(*(_QWORD *)(v43 + 8 * (v20 + v41)) + 4 * v24) = v48.i32[v41];
        ++v41;
      }
      while (v41 != 3);
    }
    ++v24;
    goto LABEL_48;
  }
}

uint64_t FIK::BalanceTask::fillJacobian(uint64_t this, unsigned int a2, int a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  v3 = *(_QWORD *)(this + 168);
  if (v3)
  {
    LODWORD(v4) = 0;
    v5 = *(_QWORD *)(this + 40);
    do
    {
      if (*(_BYTE *)(v5 + 814))
      {
        v6 = 0;
        v7 = *(_DWORD *)(v5 + 516);
        do
        {
          if (*(_BYTE *)(v5 + v6 + 808))
          {
            if (*(_BYTE *)(this + 185) && *(float *)(v5 + 568) != 0.0)
            {
              v8 = 0;
              v9 = *(_DWORD *)(this + 8);
              do
              {
                if (*(_BYTE *)(this + 32 + v8))
                  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(this + 88) + 8 * (v9 + v8)) + 4 * v7) = 1065353216;
                ++v8;
              }
              while (v8 != 3);
            }
            if (*(_BYTE *)(this + 184))
            {
              v10 = *(_QWORD *)(this + 88);
              v11 = -3;
              do
                *(_DWORD *)(*(_QWORD *)(v10 + 8 * (a3 + v11)) + 4 * v7) = 1065353216;
              while (!__CFADD__(v11++, 1));
            }
            ++v7;
          }
          ++v6;
        }
        while (v6 != 6);
      }
      v4 = (v4 + 1);
      v5 += 944;
    }
    while (v3 > v4);
  }
  return this;
}

float *FIK::BalanceTask::addToTarget(float *this, float a2, float a3, float a4)
{
  this[52] = a2;
  this[53] = a3;
  this[54] = a4;
  return this;
}

_QWORD *`virtual thunk to'FIK::BalanceTask::addToTarget(_QWORD *this, float a2, float a3, float a4)
{
  float *v4;

  v4 = (float *)((char *)this + *(_QWORD *)(*this - 288));
  v4[52] = a2;
  v4[53] = a3;
  v4[54] = a4;
  return this;
}

__n128 FIK::BalanceTask::addToTarget(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[13] = *a2;
  return result;
}

__n128 `virtual thunk to'FIK::BalanceTask::addToTarget(_QWORD *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *(__n128 *)((char *)a1 + *(_QWORD *)(*a1 - 296) + 208) = *a2;
  return result;
}

void FIK::BalanceTask::~BalanceTask(FIK::BalanceTask *this)
{
  JUMPOUT(0x212BCAFB4);
}

uint64_t FIK::BalanceTask::Gravitational(FIK::BalanceTask *this)
{
  return *((unsigned __int8 *)this + 185);
}

uint64_t FIK::BalanceTask::getTarget(FIK::BalanceTask *this)
{
  return (uint64_t)this + 192;
}

uint64_t FIK::BalanceTask::getMomentsPriority(FIK::BalanceTask *this)
{
  return *((unsigned int *)this + 44);
}

uint64_t FIK::BalanceTask::getGlobalUp(FIK::BalanceTask *this)
{
  return (uint64_t)this + 240;
}

uint64_t FIK::BalanceTask::getMomentsEnabled(FIK::BalanceTask *this)
{
  return *((unsigned __int8 *)this + 184);
}

uint64_t FIK::BalanceTask::getCoGEnabled(FIK::BalanceTask *this)
{
  return *((unsigned __int8 *)this + 185);
}

void `virtual thunk to'FIK::BalanceTask::~BalanceTask(FIK::BalanceTask *this)
{
  JUMPOUT(0x212BCAFB4);
}

uint64_t `virtual thunk to'FIK::BalanceTask::getTarget(FIK::BalanceTask *this)
{
  return (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 304) + 192;
}

uint64_t `virtual thunk to'FIK::BalanceTask::getMomentsPriority(FIK::BalanceTask *this)
{
  return *(unsigned int *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 352) + 176);
}

uint64_t `virtual thunk to'FIK::BalanceTask::getGlobalUp(FIK::BalanceTask *this)
{
  return (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 384) + 240;
}

uint64_t `virtual thunk to'FIK::BalanceTask::getMomentsEnabled(FIK::BalanceTask *this)
{
  return *((unsigned __int8 *)this + *(_QWORD *)(*(_QWORD *)this - 392) + 184);
}

uint64_t `virtual thunk to'FIK::BalanceTask::getCoGEnabled(FIK::BalanceTask *this)
{
  return *((unsigned __int8 *)this + *(_QWORD *)(*(_QWORD *)this - 400) + 185);
}

uint64_t ikinemaAssertHandler(NSObject *a1, int a2, uint64_t a3, const char *a4)
{
  os_log_type_t v8;
  uint64_t result;
  _OWORD buf[5];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v8 = 16 * (a2 == 0);
  if (os_log_type_enabled(a1, v8))
  {
    LODWORD(buf[0]) = 136315394;
    *(_QWORD *)((char *)buf + 4) = a3;
    WORD6(buf[0]) = 2080;
    *(_QWORD *)((char *)buf + 14) = a4;
    _os_log_impl(&dword_21078E000, a1, v8, "Assertion failed! %s: %s", (uint8_t *)buf, 0x16u);
  }
  result = fprintf((FILE *)*MEMORY[0x24BDAC8D8], "Assertion failed! %s", a4);
  if (!a2)
  {
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return result;
}

float FIK::ImportBone::setRestTransform(_DWORD *a1, _DWORD *a2)
{
  uint64_t v2;
  float result;

  v2 = 0;
  a1[15] = a2[7];
  a1[16] = a2[4];
  a1[17] = a2[5];
  a1[18] = a2[6];
  do
  {
    result = *(float *)&a2[v2];
    *(float *)&a1[v2 + 12] = result;
    ++v2;
  }
  while (v2 != 3);
  return result;
}

FIK::Solver *FIK::Solver::Solver(FIK::Solver *this, FIK::IKSolver *a2, FIK::Allocator *a3)
{
  char *v4;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  v4 = (char *)this + 580;
  *((_QWORD *)this + 4) = a3;
  *((_QWORD *)this + 5) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((_QWORD *)this + 8) = a3;
  *((_QWORD *)this + 9) = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_QWORD *)this + 12) = a3;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_QWORD *)this + 17) = a3;
  *((_QWORD *)this + 18) = 0;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_QWORD *)this + 21) = a3;
  *((_OWORD *)this + 11) = 0u;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = a3;
  *((_OWORD *)this + 13) = 0u;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 29) = a3;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = xmmword_210802BA0;
  *((_DWORD *)this + 135) = 0;
  *((_OWORD *)this + 20) = 0u;
  *(_OWORD *)((char *)this + 340) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *((_QWORD *)this + 66) = 0;
  *((_DWORD *)this + 152) = 1065353216;
  *((_DWORD *)this + 160) = 0;
  *((_BYTE *)this + 648) = 0;
  *((_WORD *)this + 339) = 0;
  *(_QWORD *)((char *)this + 670) = 0;
  *(_OWORD *)((char *)this + 654) = 0u;
  *((_DWORD *)this + 171) = 1;
  *((_OWORD *)this + 49) = 0u;
  *((_OWORD *)this + 50) = 0u;
  *((_OWORD *)this + 47) = 0u;
  *((_OWORD *)this + 48) = 0u;
  *((_OWORD *)this + 45) = 0u;
  *((_OWORD *)this + 46) = 0u;
  *((_OWORD *)this + 43) = 0u;
  *((_OWORD *)this + 44) = 0u;
  *((_OWORD *)this + 51) = xmmword_210802BA0;
  *((_QWORD *)this + 104) = a3;
  *((_QWORD *)this + 105) = a2;
  FIK::FIKRedBlackTree<IKString,FIK::Segment *>::clear((uint64_t)this);
  *((_DWORD *)this + 134) = 1065353216;
  *((_DWORD *)this + 142) = 1065353216;
  *((_DWORD *)this + 89) = 1;
  *((_DWORD *)this + 95) = 65792;
  *((_DWORD *)this + 161) = 0;
  *(_DWORD *)(v4 + 69) = 16843009;
  *((_OWORD *)this + 48) = 0u;
  *((_BYTE *)this + 653) = 0;
  *((_DWORD *)this + 82) = 0;
  *((_OWORD *)this + 43) = 0u;
  *((_OWORD *)this + 44) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *((_QWORD *)this + 66) = 0;
  *((_OWORD *)this + 41) = 0u;
  *((_QWORD *)this + 69) = 0x3DA7EF9E3F800000;
  *((_QWORD *)this + 70) = 0x400000003EE3D70ALL;
  *(int32x4_t *)v4 = vdupq_n_s32(0x3D4CCCCDu);
  *((_DWORD *)this + 149) = 1041865114;
  *((_QWORD *)this + 75) = 0x3E4CCCCD3E19999ALL;
  *(_OWORD *)(v4 + 36) = xmmword_210802D80;
  *((_DWORD *)this + 153) = -1104679010;
  *((_QWORD *)this + 68) = 0xBE27EF9E3A83126FLL;
  return this;
}

uint64_t FIK::FIKRedBlackTree<IKString,FIK::Segment *>::clear(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = result;
  v2 = *(_QWORD *)(result + 8);
  if (v2)
  {
    v3 = *(uint64_t **)(result + 24);
    v4 = 8 * v2;
    do
    {
      v5 = *v3++;
      result = FIK::Allocator::destroy<FIK::FIKRedBlackTree<IKString,FIK::Segment *>::Node>(*(_QWORD *)(v1 + 32), v5);
      v4 -= 8;
    }
    while (v4);
  }
  *(_QWORD *)(v1 + 8) = 0;
  return result;
}

void FIK::Solver::~Solver(FIK::Solver *this)
{
  __n128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  FIK::Solver::freeTasks(this);
  if (*((_BYTE *)this + 644))
    v2.n128_f64[0] = FIK::Solver::freeMemory(this);
  v3 = *((_QWORD *)this + 56);
  if (v3)
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t, __n128))(**((_QWORD **)this + 104) + 24))(*((_QWORD *)this + 104), v3, 0, 8, v2);
  v4 = *((_QWORD *)this + 61);
  if (v4)
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t, __n128))(**((_QWORD **)this + 104) + 24))(*((_QWORD *)this + 104), v4, 0, 8, v2);
  *((_QWORD *)this + 26) = 0;
  v5 = *((_QWORD *)this + 28);
  if (v5)
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t, __n128))(**((_QWORD **)this + 29) + 24))(*((_QWORD *)this + 29), v5, 0, 8, v2);
  *((_QWORD *)this + 22) = 0;
  v6 = *((_QWORD *)this + 24);
  if (v6)
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t, __n128))(**((_QWORD **)this + 25) + 24))(*((_QWORD *)this + 25), v6, 0, 8, v2);
  *((_QWORD *)this + 18) = 0;
  v7 = *((_QWORD *)this + 20);
  if (v7)
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t, __n128))(**((_QWORD **)this + 21) + 24))(*((_QWORD *)this + 21), v7, 0, 8, v2);
  *((_QWORD *)this + 14) = 0;
  v8 = *((_QWORD *)this + 16);
  if (v8)
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t, __n128))(**((_QWORD **)this + 17) + 24))(*((_QWORD *)this + 17), v8, 0, 8, v2);
  *((_QWORD *)this + 9) = 0;
  v9 = (void *)*((_QWORD *)this + 11);
  if (v9)
    (*(void (**)(_QWORD, void *, _QWORD, uint64_t, __n128))(**((_QWORD **)this + 12) + 24))(*((_QWORD *)this + 12), v9, 0, 8, v2);
  FIK::IKArray<FIK::Segment>::~IKArray((uint64_t *)this + 5, v9);
  FIK::FIKRedBlackTree<IKString,FIK::Segment *>::~FIKRedBlackTree((uint64_t)this);
}

_QWORD *FIK::Solver::freeTasks(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void (***v5)(_QWORD);
  uint64_t v6;
  uint64_t v7;

  v1 = this;
  v2 = this[14];
  if (v2)
  {
    v3 = (_QWORD *)this[16];
    v4 = 8 * v2;
    do
    {
      v5 = (void (***)(_QWORD))*v3;
      if (*v3)
      {
        v6 = v1[104];
        (**v5)(*v3);
        this = (_QWORD *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD), _QWORD, uint64_t))(*(_QWORD *)v6 + 24))(v6, v5, 0, 8);
      }
      *v3++ = 0;
      v4 -= 8;
    }
    while (v4);
  }
  v1[14] = 0;
  v7 = v1[94];
  if (v7)
  {
    this = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v1[104] + 24))(v1[104], v7, 0, 8);
    v1[94] = 0;
  }
  return this;
}

double FIK::Solver::freeMemory(FIK::Solver *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double result;

  v2 = *((_QWORD *)this + 64);
  if (v2)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)this + 104) + 24))(*((_QWORD *)this + 104), v2, 0, 8);
    *((_QWORD *)this + 64) = 0;
  }
  v3 = *((_QWORD *)this + 65);
  if (v3)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)this + 104) + 24))(*((_QWORD *)this + 104), v3, 0, 8);
    *((_QWORD *)this + 65) = 0;
  }
  v4 = *((_QWORD *)this + 54);
  if (v4)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)this + 104) + 24))(*((_QWORD *)this + 104), v4, 0, 8);
    *((_QWORD *)this + 54) = 0;
  }
  v5 = *((_QWORD *)this + 55);
  if (v5)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)this + 104) + 24))(*((_QWORD *)this + 104), v5, 0, 8);
    *((_QWORD *)this + 55) = 0;
  }
  v6 = *((_QWORD *)this + 53);
  if (v6)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)this + 104) + 24))(*((_QWORD *)this + 104), v6, 0, 8);
    *((_QWORD *)this + 53) = 0;
  }
  v7 = *((_QWORD *)this + 56);
  if (v7)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)this + 104) + 24))(*((_QWORD *)this + 104), v7, 0, 8);
    *((_QWORD *)this + 56) = 0;
  }
  v8 = *((_QWORD *)this + 57);
  if (v8)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)this + 104) + 24))(*((_QWORD *)this + 104), v8, 0, 8);
    *((_QWORD *)this + 57) = 0;
  }
  v9 = *((_QWORD *)this + 58);
  if (v9)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)this + 104) + 24))(*((_QWORD *)this + 104), v9, 0, 8);
    *((_QWORD *)this + 58) = 0;
  }
  v10 = *((_QWORD *)this + 59);
  if (v10)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)this + 104) + 24))(*((_QWORD *)this + 104), v10, 0, 8);
    *((_QWORD *)this + 59) = 0;
  }
  v11 = *((_QWORD *)this + 60);
  if (v11)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)this + 104) + 24))(*((_QWORD *)this + 104), v11, 0, 8);
    *((_QWORD *)this + 60) = 0;
  }
  v12 = *((_QWORD *)this + 61);
  if (v12)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)this + 104) + 24))(*((_QWORD *)this + 104), v12, 0, 8);
    *((_QWORD *)this + 61) = 0;
  }
  v13 = *((_QWORD *)this + 48);
  if (v13)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)this + 104) + 24))(*((_QWORD *)this + 104), v13, 0, 8);
    *((_QWORD *)this + 48) = 0;
  }
  v14 = *((_QWORD *)this + 62);
  if (v14)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)this + 104) + 24))(*((_QWORD *)this + 104), v14, 0, 8);
    *((_QWORD *)this + 62) = 0;
    v15 = *((_QWORD *)this + 63);
    if (v15)
      (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)this + 104) + 24))(*((_QWORD *)this + 104), v15, 0, 8);
    *((_QWORD *)this + 63) = 0;
  }
  v16 = *((_QWORD *)this + 52);
  if (v16)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)this + 104) + 24))(*((_QWORD *)this + 104), v16, 0, 8);
    *((_QWORD *)this + 52) = 0;
  }
  v17 = *((_QWORD *)this + 49);
  if (v17)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)this + 104) + 24))(*((_QWORD *)this + 104), v17, 0, 8);
    *((_QWORD *)this + 49) = 0;
  }
  v18 = *((_QWORD *)this + 50);
  if (v18)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)this + 104) + 24))(*((_QWORD *)this + 104), v18, 0, 8);
    *((_QWORD *)this + 50) = 0;
  }
  (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 104) + 24))(*((_QWORD *)this + 104), *((_QWORD *)this + 86), 0, 8);
  (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 104) + 24))(*((_QWORD *)this + 104), *((_QWORD *)this + 87), 0, 8);
  *((_OWORD *)this + 43) = 0u;
  (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 104) + 24))(*((_QWORD *)this + 104), *((_QWORD *)this + 90), 0, 8);
  *((_QWORD *)this + 90) = 0;
  *((_QWORD *)this + 35) = 0;
  result = 0.0;
  *((_OWORD *)this + 41) = 0u;
  return result;
}

void FIK::Solver::computeScale(FIK::Solver *this)
{
  unint64_t v2;
  int v3;
  uint64_t v4;
  float32x4_t *v5;
  float v6;
  float32x4_t v7;
  float v8;
  unint64_t v10;
  uint64_t v11;
  float v12;
  unint64_t v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  unsigned int v17;
  float32x4_t v18;
  float32x4_t v19;

  *((_DWORD *)this + 134) = 0;
  if (!*((_QWORD *)this + 5))
  {
    *((_DWORD *)this + 158) = 0;
    goto LABEL_32;
  }
  LODWORD(v2) = 0;
  v3 = 0;
  v4 = *((_QWORD *)this + 7);
  do
  {
    v19 = 0uLL;
    v5 = *(float32x4_t **)(v4 + 72);
    if (!v5)
    {
      FIK::Segment::setRestStretch(v4, &v19);
      goto LABEL_19;
    }
    v6 = 1.0e20;
    do
    {
      v7 = vmulq_f32(v5[6], v5[6]);
      v8 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1))).f32[0]);
      if (v3)
      {
        if (v8 > (float)(*((float *)this + 134) / (float)(50 * v3)) && v8 < v6)
        {
LABEL_11:
          v19 = v5[6];
          v6 = v8;
        }
      }
      else if (v8 < v6)
      {
        goto LABEL_11;
      }
      v5 = (float32x4_t *)v5[5].i64[0];
    }
    while (v5);
    FIK::Segment::setRestStretch(v4, &v19);
    if (v6 < 1.0e20)
    {
      *((float *)this + 134) = v6 + *((float *)this + 134);
      ++v3;
    }
LABEL_19:
    v2 = (v2 + 1);
    v4 += 944;
    v10 = *((_QWORD *)this + 5);
  }
  while (v10 > v2);
  v11 = *((_QWORD *)this + 7);
  *((_DWORD *)this + 158) = 0;
  if (v10)
  {
    if (v10 == 1)
    {
      *((_DWORD *)this + 158) = 1104537436;
      *((_DWORD *)this + 134) = 1065353216;
      v12 = *((float *)this + 154);
      v13 = 1;
LABEL_30:
      v16 = *((_QWORD *)this + 7) + 756;
      v17 = 1;
      do
      {
        v18 = vmulq_f32(*(float32x4_t *)(v16 + 124), *(float32x4_t *)(v16 + 124));
        v18.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 2), vaddq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1))).f32[0]);
        *(float *)v16 = v12 * (float)(v18.f32[0] + v18.f32[0]);
        v15 = v13 > v17++;
        v16 += 944;
      }
      while (v15);
    }
    else
    {
      v14 = 1;
      do
      {
        v19.i32[0] = 0;
        FIK::Segment::computeReach(v11, v19.f32);
        if (v19.f32[0] > *((float *)this + 158))
          *((_DWORD *)this + 158) = v19.i32[0];
        v11 += 944;
        v13 = *((_QWORD *)this + 5);
        v15 = v13 > v14++;
      }
      while (v15);
      if (v13)
      {
        v12 = *((float *)this + 154) / *((float *)this + 134);
        goto LABEL_30;
      }
    }
  }
LABEL_32:
  *(_WORD *)((char *)this + 649) = 256;
}

uint64_t FIK::Solver::checkReach(uint64_t this, float a2)
{
  if (*(float *)(this + 640) < a2)
    *(float *)(this + 640) = a2;
  return this;
}

void FIK::Solver::updateReach(FIK::Solver *this)
{
  float v1;
  double v3;
  float v4;
  float *v5;
  float v6;
  uint64_t v7;
  FIK::Task **v8;
  uint64_t v9;
  FIK::Task *v10;
  FIK::Task *v11;

  v1 = *((float *)this + 160);
  if (v1 != 0.0 && *((float *)this + 158) < vabds_f32(v1, *((float *)this + 158)))
  {
    *((float *)this + 158) = v1;
    v3 = (float)(v1 * 3.366);
    v4 = v3 / 90.0 * (v3 / 90.0) * 10.0;
    *((float *)this + 143) = v4;
    v6 = pow(90.0 / v3, 0.1) * 0.001;
    *((float *)this + 144) = v6;
    v7 = *((_QWORD *)this + 14);
    if (v7)
    {
      v8 = (FIK::Task **)*((_QWORD *)this + 16);
      v9 = 8 * v7;
      do
      {
        v10 = *v8++;
        FIK::Solver::setTaskParameters((uint64_t)this, v10, v5);
        v9 -= 8;
      }
      while (v9);
    }
    v11 = (FIK::Task *)*((_QWORD *)this + 94);
    if (v11)
    {
      if (*((_BYTE *)v11 + 185))
        FIK::Solver::setTaskParameters((uint64_t)this, v11, v5);
      FIK::Solver::weightMoments((uint64_t)this);
    }
  }
}

uint64_t FIK::Solver::setTaskParameters(uint64_t this, FIK::Task *a2, float *a3)
{
  unsigned int v3;
  uint64_t v5;
  uint64_t v6;
  double v7;
  float v8;
  uint64_t v9;
  float *v10;
  float v11;
  float v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  float *v17;
  float v18;

  v3 = *((_DWORD *)a2 + 2);
  if (v3 != -1)
  {
    v5 = this;
    this = (*(uint64_t (**)(FIK::Task *))(*(_QWORD *)a2 + 192))(a2);
    if ((_DWORD)this)
    {
      v6 = *((unsigned int *)a2 + 6);
      if ((_DWORD)v6)
      {
        v7 = (float)((float)(*(float *)(v5 + 632) * 3.366) / 55.0);
        v8 = (float)(*(float *)(v5 + 560) * *(float *)(v5 + 552)) / (v7 * v7 * 55.0) * *(float *)(v5 + 556);
        v9 = *(_QWORD *)(v5 + 400);
        v10 = (float *)((char *)a2 + 52);
        do
        {
          v11 = *v10++;
          *(float *)(v9 + 4 * v3++) = v11 * v8;
          --v6;
        }
        while (v6);
      }
    }
    else
    {
      this = (*(uint64_t (**)(FIK::Task *))(*(_QWORD *)a2 + 160))(a2);
      v12 = *(float *)(v5 + 552);
      if ((_DWORD)this)
      {
        v13 = (float)((float)(*(float *)(v5 + 632) * 3.366) / 55.0);
        v14 = (float)(*(float *)(v5 + 560) * v12) / (v13 * v13 * 55.0) * *(float *)(v5 + 556);
      }
      else
      {
        v14 = *(float *)(v5 + 556) * (float)((float)(*(float *)(v5 + 564) * v12) / 55.0);
      }
      v15 = *((unsigned int *)a2 + 6);
      if ((_DWORD)v15)
      {
        v16 = *(_QWORD *)(v5 + 400);
        v17 = (float *)((char *)a2 + 52);
        do
        {
          v18 = *v17++;
          *(float *)(v16 + 4 * v3++) = v14 * v18;
          --v15;
        }
        while (v15);
      }
    }
  }
  return this;
}

uint64_t FIK::Solver::weightMoments(uint64_t this)
{
  uint64_t v1;
  unint64_t v2;
  double v3;
  float v4;
  unint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(this + 752);
  if (v1)
  {
    if (*(_BYTE *)(v1 + 184))
    {
      v2 = *(unsigned int *)(this + 320);
      if (v2 >= 3)
      {
        v3 = (float)(45.2 / (float)(*(float *)(this + 632) * 3.366));
        v4 = (float)(80.0 / *(float *)(this + 616))
           * (float)(80.0 / *(float *)(this + 616))
           * (v3
            * v3
            * 0.00000000199999994)
           * *(float *)(this + 608);
        v5 = (v2 - 3);
        v6 = *(_QWORD *)(this + 400);
        do
          *(float *)(v6 + 4 * v5++) = v4;
        while (v5 < v2);
      }
    }
  }
  return this;
}

uint64_t FIK::Solver::recomputeScale(uint64_t this)
{
  *(_WORD *)(this + 649) = 257;
  *(_BYTE *)(this + 382) = 1;
  return this;
}

float32x4_t *FIK::Solver::setFigureMass(float32x4_t *this, float32_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  float v6;
  float32x4_t v7;
  BOOL v8;

  v2 = (uint64_t)this;
  this[38].f32[2] = a2;
  v3 = this[2].u64[1];
  if (v3)
  {
    v4 = this[3].i64[1] + 756;
    v5 = 1;
    v6 = a2 / this[33].f32[2];
    do
    {
      v7 = vmulq_f32(*(float32x4_t *)(v4 + 124), *(float32x4_t *)(v4 + 124));
      v7.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1))).f32[0]);
      *(float *)v4 = v6 * (float)(v7.f32[0] + v7.f32[0]);
      v8 = v3 > v5++;
      v4 += 944;
    }
    while (v8);
  }
  this[40].i8[10] = 1;
  if (!this[23].i8[14])
  {
    FIK::Solver::recomputeCGWeights(this);
    FIK::Solver::weightMoments(v2);
    this = *(float32x4_t **)(v2 + 752);
    if (this)
      return (float32x4_t *)FIK::BalanceTask::setWeightForce(this, *(float *)(v2 + 616) * 9.81);
  }
  return this;
}

float32x4_t *FIK::Solver::recomputeCGWeights(float32x4_t *this)
{
  __int32 v1;
  float32x4_t *v2;
  uint64_t v3;
  float *v4;
  float v5;
  __int32 v6;

  v1 = this[2].i32[2];
  if (v1)
  {
    v2 = this;
    v3 = this[3].i64[1];
    v4 = (float *)(v3 + 756);
    v5 = 0.0;
    v6 = this[2].i32[2];
    do
    {
      v5 = *v4 + v5;
      v4 += 236;
      --v6;
    }
    while (v6);
    this[38].f32[2] = v5;
    do
    {
      FIK::Segment::computeCGWeight(v3, v2[38].f32[2]);
      v3 += 944;
      --v1;
    }
    while (v1);
    this = (float32x4_t *)v2[47].i64[0];
    if (this)
      this = (float32x4_t *)FIK::BalanceTask::setWeightForce(this, v2[38].f32[2] * 9.81);
    v2[40].i8[10] = 0;
  }
  return this;
}

float32x4_t *FIK::Solver::addPositionTask(FIK::Solver *this, int a2)
{
  if (*((_QWORD *)this + 5) <= (unint64_t)a2)
    return 0;
  else
    return FIK::Solver::addPositionTask(this, (const FIK::Segment *)(*((_QWORD *)this + 7) + 944 * a2));
}

float32x4_t *FIK::Solver::addPositionTask(FIK::Solver *this, const FIK::Segment *a2)
{
  FIK::PositionTask *v4;
  float32x4_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float32x4_t v11;

  v4 = (FIK::PositionTask *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 104) + 16))(*((_QWORD *)this + 104), 496, 16);
  v5 = (float32x4_t *)v4;
  if (v4)
    FIK::PositionTask::PositionTask(v4, 1, a2);
  v6 = *((_QWORD *)this + 14);
  v5[8].i64[0] = (uint64_t)this;
  v5[1].i32[1] = v6;
  FIK::IKArray<FIK::Segment *>::reserve((_QWORD *)this + 14, v6 + 1);
  v7 = *((_QWORD *)this + 18);
  v8 = *((_QWORD *)this + 14);
  *(_QWORD *)(*((_QWORD *)this + 16) + 8 * v8) = v5;
  *((_QWORD *)this + 14) = v8 + 1;
  FIK::IKArray<FIK::Segment *>::reserve((_QWORD *)this + 18, v7 + 1);
  v9 = *((_QWORD *)this + 18);
  *(_QWORD *)(*((_QWORD *)this + 20) + 8 * v9) = v5;
  *((_QWORD *)this + 18) = v9 + 1;
  *(_WORD *)((char *)this + 381) = 257;
  if (*((_QWORD *)this + 13))
  {
    if (!*((_BYTE *)this + 645))
    {
      FIK::Solver::updateForwardFromRoot((float32x4_t *)this, 0);
      *((_BYTE *)this + 645) = 1;
    }
    v11 = vaddq_f32(*(float32x4_t *)(v5[2].i64[1] + 432), *((float32x4_t *)this + 18));
    FIK::PositionTask::setTarget(v5, &v11);
  }
  return v5;
}

float32x4_t *FIK::Solver::addPositionTask(FIK::Solver *this, const IKString *a2)
{
  const FIK::Segment **Key;

  Key = (const FIK::Segment **)FIK::FIKRedBlackTree<IKString,FIK::Segment *>::FindKey((_QWORD **)this, a2);
  if (Key)
    return FIK::Solver::addPositionTask(this, *Key);
  fwrite("Uknown bone name\n", 0x11uLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
  return 0;
}

_QWORD *FIK::FIKRedBlackTree<IKString,FIK::Segment *>::FindKey(_QWORD **a1, _QWORD *a2)
{
  _QWORD *v2;
  size_t v4;
  const void *v5;
  const void *v6;
  uint64_t v7;

  v2 = *a1;
  if (!*a1)
    return 0;
  while (1)
  {
    v4 = v2[1];
    v5 = v4 ? (const void *)*v2 : &unk_2108059BE;
    if (a2[1] == v4)
    {
      v6 = v4 ? (const void *)*a2 : &unk_2108059BE;
      if (!memcmp(v6, v5, v4))
        break;
    }
    if (IKString::operator<((uint64_t)a2, (uint64_t)v2))
      v7 = 5;
    else
      v7 = 6;
    v2 = (_QWORD *)v2[v7];
    if (!v2)
      return 0;
  }
  return v2 + 3;
}

float32x4_t *FIK::Solver::updateForwardFromRoot(float32x4_t *this, int a2)
{
  uint64_t v2;
  int v3;
  unsigned int *v4;
  uint64_t v5;
  float32x4_t v6;
  unsigned int v7;
  uint64_t v8;
  float32x4_t *v9;
  float32x4_t v10;
  uint64_t v11;
  float32x4_t v12;
  int32x4_t v13;
  int8x16_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int32x4_t v21;
  float32x4_t v22;
  int32x4_t v23;
  float32x4_t v24;
  float32x4_t *v25;
  float32x4_t v26;
  uint64_t v27;
  float32x4_t v28;
  int32x4_t v29;
  int8x16_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  int32x4_t v36;
  float32x4_t v37;
  int32x4_t v38;
  float32x4_t *v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  int32x4_t v43;
  float32x4_t v44;
  int32x4_t v45;

  v2 = this[4].i64[1];
  if (v2)
  {
    v3 = *(_DWORD *)(this[6].i64[1] + 520);
    v4 = (unsigned int *)this[5].i64[1];
    v5 = 4 * v2;
    v6.i64[0] = 0x4000000040000000;
    v6.i64[1] = 0x4000000040000000;
    do
    {
      v7 = *v4;
      v8 = this[3].i64[1];
      v9 = (float32x4_t *)(v8 + 944 * *v4);
      if (*v4 == v3)
      {
        v10 = v9[6];
        if (a2)
          v11 = 49;
        else
          v11 = 15;
        v12 = v9[v11];
        v13 = (int32x4_t)vnegq_f32(v12);
        v14 = (int8x16_t)vtrn2q_s32((int32x4_t)v12, vtrn1q_s32((int32x4_t)v12, v13));
        v15 = this[19];
        v16 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v12, (int8x16_t)v13, 8uLL), *(float32x2_t *)v15.f32, 1), (float32x4_t)vextq_s8(v14, v14, 8uLL), v15.f32[0]);
        v17 = (float32x4_t)vrev64q_s32((int32x4_t)v12);
        v17.i32[0] = v13.i32[1];
        v17.i32[3] = v13.i32[2];
        v18 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v12, v15, 3), v17, v15, 2), v16);
        v19 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v15, (int32x4_t)v15), (int8x16_t)v15, 0xCuLL);
        v20 = vnegq_f32(v15);
        v21 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v10, (int32x4_t)v10), (int8x16_t)v10, 0xCuLL), v20), v10, v19);
        v22 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v21, v21), (int8x16_t)v21, 0xCuLL);
        v23 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v22, (int32x4_t)v22), (int8x16_t)v22, 0xCuLL), v20), v22, v19);
        v24 = vaddq_f32(this[18], vmlaq_f32(v10, v6, vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v23, v23), (int8x16_t)v23, 0xCuLL), v22, v15, 3)));
        v9[27] = v24;
        v9[28] = v18;
        v9[26] = v24;
      }
      else
      {
        v25 = (float32x4_t *)v9[2].i64[0];
        v26 = v9[6];
        if (a2)
          v27 = 49;
        else
          v27 = 15;
        v28 = v9[v27];
        v29 = (int32x4_t)vnegq_f32(v28);
        v30 = (int8x16_t)vtrn2q_s32((int32x4_t)v28, vtrn1q_s32((int32x4_t)v28, v29));
        v31 = v25[28];
        v32 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v28, (int8x16_t)v29, 8uLL), *(float32x2_t *)v31.f32, 1), (float32x4_t)vextq_s8(v30, v30, 8uLL), v31.f32[0]);
        v33 = (float32x4_t)vrev64q_s32((int32x4_t)v28);
        v33.i32[0] = v29.i32[1];
        v33.i32[3] = v29.i32[2];
        v18 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v28, v31, 3), v33, v31, 2), v32);
        v34 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v31, (int32x4_t)v31), (int8x16_t)v31, 0xCuLL);
        v35 = vnegq_f32(v31);
        v36 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v26, (int32x4_t)v26), (int8x16_t)v26, 0xCuLL), v35), v26, v34);
        v37 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v36, v36), (int8x16_t)v36, 0xCuLL);
        v38 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v37, (int32x4_t)v37), (int8x16_t)v37, 0xCuLL), v35), v37, v34);
        v24 = vaddq_f32(v25[27], vmlaq_f32(v26, v6, vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v38, v38), (int8x16_t)v38, 0xCuLL), v37, v31, 3)));
        v9[27] = v24;
        v9[28] = v18;
        v9[26] = v24;
        v9[39].f32[3] = (float)(v25[39].f32[3] + v25[25].f32[0]) + v25[25].f32[1];
      }
      v39 = (float32x4_t *)(v8 + 944 * v7);
      v39[50].i8[15] = 0;
      v40 = v39[55];
      v41 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v18, (int32x4_t)v18), (int8x16_t)v18, 0xCuLL);
      v42 = vnegq_f32(v18);
      v43 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v40, (int32x4_t)v40), (int8x16_t)v40, 0xCuLL), v42), v40, v41);
      v44 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v43, v43), (int8x16_t)v43, 0xCuLL);
      v45 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v44, (int32x4_t)v44), (int8x16_t)v44, 0xCuLL), v42), v44, v41);
      v39[56] = vaddq_f32(v24, vmlaq_f32(v40, v6, vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v45, v45), (int8x16_t)v45, 0xCuLL), v44, v18, 3)));
      ++v4;
      v5 -= 4;
    }
    while (v5);
  }
  return this;
}

uint64_t FIK::Solver::addBalanceTask(FIK::Solver *this, int a2, int a3, int a4)
{
  FIK::BalanceTask *v5;
  void (***v8)(FIK::CrtAllocator *__hidden);
  float32x4_t *v9;
  __n128 v10;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  int v16;

  v16 = a2;
  v15 = a3;
  v14 = a4;
  v5 = (FIK::BalanceTask *)*((_QWORD *)this + 94);
  if (v5)
  {
    FIK::BalanceTask::setGlobalUp(v5, a2);
    FIK::BalanceTask::enableMoments(*((_BYTE **)this + 94), a3);
    FIK::BalanceTask::enableCGPosition(*((_QWORD *)this + 94), a4);
  }
  else
  {
    v8 = FIK::defaultAllocator(0);
    v13 = 0;
    v12 = *((_QWORD *)this + 5);
    FIK::Allocator::create<FIK::BalanceTask,BOOL,FIK::Segment *&,unsigned int &,BOOL &,BOOL &,unsigned long>((uint64_t)v8, &v13, (FIK::Segment **)this + 13, &v16, &v15, &v14, &v12);
    *((_QWORD *)this + 94) = v9;
    v9[8].i64[0] = (uint64_t)this;
    v9[1].i32[1] = -1;
    FIK::BalanceTask::setWeightForce(v9, *((float *)this + 154) * 9.81);
    *(_WORD *)((char *)this + 381) = 257;
    if (*((_QWORD *)this + 13))
    {
      if (!*((_BYTE *)this + 645))
      {
        FIK::Solver::updateForwardFromRoot((float32x4_t *)this, 0);
        *((_BYTE *)this + 645) = 1;
      }
      FIK::Solver::recomputeCGWeights((float32x4_t *)this);
      FIK::Segment::computeAugCenter(*((float32x4_t **)this + 13));
      v10 = (__n128)vaddq_f32(*(float32x4_t *)(*((_QWORD *)this + 13) + 96), *(float32x4_t *)(*((_QWORD *)this + 13) + 912));
      *((__n128 *)this + 46) = v10;
      FIK::BalanceTask::setTarget(*((__n128 **)this + 94), v10, v10.n128_f32[1], v10.n128_f32[2]);
    }
  }
  return *((_QWORD *)this + 94);
}

void FIK::Allocator::create<FIK::BalanceTask,BOOL,FIK::Segment *&,unsigned int &,BOOL &,BOOL &,unsigned long>(uint64_t a1, char *a2, FIK::Segment **a3, int *a4, char *a5, char *a6, uint64_t *a7)
{
  FIK::BalanceTask *v13;

  v13 = (FIK::BalanceTask *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 272, 16);
  if (v13)
    FIK::BalanceTask::BalanceTask(v13, *a2, *a3, *a4, *a5, *a6, *a7);
}

__n128 *FIK::Solver::addOrientationTask(FIK::Solver *this, const FIK::Segment *a2)
{
  FIK::OrientationTask *v4;
  __n128 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = (FIK::OrientationTask *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 104) + 16))(*((_QWORD *)this + 104), 288, 16);
  v5 = (__n128 *)v4;
  if (v4)
    FIK::OrientationTask::OrientationTask(v4, 1, a2);
  v6 = *((_QWORD *)this + 14);
  v5[8].n128_u64[0] = (unint64_t)this;
  v5[1].n128_u32[1] = v6;
  FIK::IKArray<FIK::Segment *>::reserve((_QWORD *)this + 14, v6 + 1);
  v7 = *((_QWORD *)this + 22);
  v8 = *((_QWORD *)this + 14);
  *(_QWORD *)(*((_QWORD *)this + 16) + 8 * v8) = v5;
  *((_QWORD *)this + 14) = v8 + 1;
  FIK::IKArray<FIK::Segment *>::reserve((_QWORD *)this + 22, v7 + 1);
  v9 = *((_QWORD *)this + 22);
  *(_QWORD *)(*((_QWORD *)this + 24) + 8 * v9) = v5;
  *((_QWORD *)this + 22) = v9 + 1;
  *(_WORD *)((char *)this + 381) = 257;
  if (*((_QWORD *)this + 13))
  {
    if (!*((_BYTE *)this + 645))
    {
      FIK::Solver::updateForwardFromRoot((float32x4_t *)this, 0);
      *((_BYTE *)this + 645) = 1;
    }
    FIK::OrientationTask::setTarget(v5, (__n128 *)(v5[2].n128_u64[1] + 448));
  }
  return v5;
}

__n128 *FIK::Solver::addOrientationTask(FIK::Solver *this, int a2)
{
  if (*((_QWORD *)this + 5) <= (unint64_t)a2)
    return 0;
  else
    return FIK::Solver::addOrientationTask(this, (const FIK::Segment *)(*((_QWORD *)this + 7) + 944 * a2));
}

const FIK::Segment **FIK::Solver::addOrientationTask(FIK::Solver *a1, _QWORD *a2)
{
  const FIK::Segment **result;

  result = (const FIK::Segment **)FIK::FIKRedBlackTree<IKString,FIK::Segment *>::FindKey((_QWORD **)a1, a2);
  if (result)
    return (const FIK::Segment **)FIK::Solver::addOrientationTask(a1, *result);
  return result;
}

_QWORD *FIK::Solver::removeTask(FIK::Solver *this, int a2)
{
  _QWORD *v4;
  _QWORD *result;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  v4 = (_QWORD *)((char *)this + 112);
  result = FIK::IKArray<FIK::Task *>::IKArray(&v18, (_QWORD *)this + 14);
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 22) = 0;
  v6 = v19;
  if (v18)
  {
    v7 = 8 * v18;
    do
    {
      v8 = *v6;
      if (*(_DWORD *)(*v6 + 20) == a2)
      {
        *(_WORD *)((char *)this + 381) = 257;
        v9 = *(_QWORD *)(v8 + 152);
        if (v9)
        {
          *(_QWORD *)(v9 + 160) = 0;
          v8 = *v6;
        }
        v10 = *(_QWORD *)(v8 + 160);
        if (!v10 || (*(_QWORD *)(v10 + 152) = 0, (v8 = *v6) != 0))
        {
          v11 = *((_QWORD *)this + 104);
          (**(void (***)(uint64_t))v8)(v8);
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v11 + 24))(v11, v8, 0, 8);
        }
      }
      else
      {
        FIK::IKArray<FIK::Segment *>::reserve(v4, *((_QWORD *)this + 14) + 1);
        v12 = *((_QWORD *)this + 14);
        *(_QWORD *)(*((_QWORD *)this + 16) + 8 * v12) = *v6;
        *((_QWORD *)this + 14) = v12 + 1;
        v13 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v6 + 160))(*v6);
        v14 = *v6;
        if (v13)
        {
          result = FIK::IKArray<FIK::Segment *>::reserve((_QWORD *)this + 18, *((_QWORD *)this + 18) + 1);
          v15 = *((_QWORD *)this + 18);
          *(_QWORD *)(*((_QWORD *)this + 20) + 8 * v15) = v14;
          *((_QWORD *)this + 18) = v15 + 1;
        }
        else
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v14 + 168))(*v6);
          if ((_DWORD)result)
          {
            v16 = *v6;
            result = FIK::IKArray<FIK::Segment *>::reserve((_QWORD *)this + 22, *((_QWORD *)this + 22) + 1);
            v17 = *((_QWORD *)this + 22);
            *(_QWORD *)(*((_QWORD *)this + 24) + 8 * v17) = v16;
            *((_QWORD *)this + 22) = v17 + 1;
          }
        }
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
    v6 = v19;
  }
  v18 = 0;
  if (v6)
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v20 + 24))(v20, v6, 0, 8);
  return result;
}

_QWORD *FIK::Solver::getSegment(_QWORD **a1, _QWORD *a2)
{
  _QWORD *result;

  result = FIK::FIKRedBlackTree<IKString,FIK::Segment *>::FindKey(a1, a2);
  if (result)
    return (_QWORD *)*result;
  return result;
}

uint64_t FIK::Solver::setTranslationWeight(uint64_t this, float a2)
{
  uint64_t v3;
  int i;

  if (*(_QWORD *)(this + 104))
  {
    v3 = this;
    for (i = 3; i != 6; ++i)
      this = FIK::Segment::setWeight(*(FIK::Segment **)(v3 + 104), i, a2);
  }
  return this;
}

uint64_t FIK::Solver::setup(FIK::Solver *this, __n128 a2)
{
  unint64_t v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v9;
  _QWORD *v10;
  unsigned int v11;
  uint64_t *v12;
  FIK::Task ***v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  unsigned int v19;
  double v20;
  float v21;
  FIK::Task **v22;
  FIK::Task **v23;
  float *v24;
  FIK::Task *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  float *v29;
  float v30;
  uint64_t v31;
  float *v32;
  FIK::Task *v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  float *v38;
  float v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  _DWORD *v46;
  int v47;
  uint64_t v48;
  FIK::Segment *v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  unsigned int v53;
  BOOL v54;
  int v55;

  v3 = *((_QWORD *)this + 5);
  if (!v3)
  {
    result = 0;
    *(_QWORD *)((char *)this + 340) = 0;
    *((_DWORD *)this + 135) = 0;
    return result;
  }
  v4 = 0;
  v5 = *((_QWORD *)this + 7);
  v6 = 1;
  do
  {
    *(_DWORD *)(v5 + 516) = v4;
    *(_DWORD *)(v5 + 520) = v6 - 1;
    v7 = *(_DWORD *)(v5 + 512);
    if (!*(_QWORD *)(v5 + 32))
      *((_QWORD *)this + 13) = v5;
    v4 += v7;
    v5 += 944;
  }
  while (v3 > v6++);
  v10 = (_QWORD *)((char *)this + 112);
  v9 = *((_QWORD *)this + 14);
  if (v9)
  {
    v11 = 0;
    v13 = (FIK::Task ***)((char *)this + 128);
    v12 = (uint64_t *)*((_QWORD *)this + 16);
    v14 = (unsigned int *)((char *)this + 344);
    a2.n128_f32[0] = (float)(*((float *)this + 134) + *((float *)this + 134)) / (float)v3;
    v15 = 8 * v9;
    do
    {
      v16 = *v12++;
      *(_DWORD *)(v16 + 8) = v11;
      *(int32x2_t *)(v16 + 12) = vadd_s32(vdup_n_s32(v11), (int32x2_t)0x200000001);
      *(_DWORD *)(v16 + 20) = v11 / 3;
      v11 += *(_DWORD *)(v16 + 24);
      *(_DWORD *)(v16 + 140) = a2.n128_u32[0];
      v15 -= 8;
    }
    while (v15);
    *v14 = v11;
  }
  else
  {
    if (*((_DWORD *)this + 85) == v4)
    {
      *((_DWORD *)this + 86) = 0;
      *((_DWORD *)this + 135) = 0;
      if (!*((_QWORD *)this + 94))
      {
        if (*((_BYTE *)this + 644))
          return 0;
      }
    }
    v11 = 0;
    v14 = (unsigned int *)((char *)this + 344);
    *((_DWORD *)this + 86) = 0;
    v13 = (FIK::Task ***)((char *)this + 128);
  }
  v18 = *((_QWORD *)this + 94);
  if (v18)
  {
    if (*(_BYTE *)(v18 + 185))
    {
      a2.n128_u64[0] = (unint64_t)vadd_s32(vdup_n_s32(v11), (int32x2_t)0x200000001);
      v19 = v11 / 3;
      *v14 = v11 + 3;
    }
    else
    {
      a2.n128_u64[0] = 0x100000000;
      v19 = 1431655765;
      v11 = -1;
    }
    *(_DWORD *)(v18 + 8) = v11;
    *(_QWORD *)(v18 + 12) = a2.n128_u64[0];
    *(_DWORD *)(v18 + 20) = v19;
    v11 = *v14;
    if (*(_BYTE *)(v18 + 184))
    {
      v11 += 3;
      *v14 = v11;
    }
  }
  if (!v11)
  {
    v11 = 1;
    *v14 = 1;
  }
  if (*((_DWORD *)this + 80) != v11 || *((_DWORD *)this + 81) != v4)
  {
    *((_DWORD *)this + 80) = v11;
    *((_DWORD *)this + 85) = v4;
    *((_DWORD *)this + 81) = v4;
    a2.n128_f32[0] = FIK::Solver::initialiseFIK(this);
  }
  if (*((_BYTE *)this + 649))
  {
    FIK::Solver::computeScale(this);
    v20 = (float)(*((float *)this + 158) * 3.366);
    v21 = v20 / 90.0 * (v20 / 90.0) * 10.0;
    *((float *)this + 143) = v21;
    a2.n128_f64[0] = pow(90.0 / v20, 0.1) * 0.001;
    a2.n128_f32[0] = a2.n128_f64[0];
    *((_DWORD *)this + 144) = a2.n128_u32[0];
  }
  if (!*((_BYTE *)this + 645))
    FIK::Solver::updateForwardFromRoot((float32x4_t *)this, 0);
  if (*v10)
  {
    v22 = *v13;
    v23 = &v22[*v10];
    do
    {
      (*(void (**)(FIK::Task *, _QWORD, _QWORD, __n128))(*(_QWORD *)*v22 + 280))(*v22, *((_QWORD *)this + 65), *((_QWORD *)this + 53), a2);
      (*(void (**)(FIK::Task *, _QWORD))(*(_QWORD *)*v22 + 296))(*v22, 0);
      FIK::Solver::setTaskParameters((uint64_t)this, *v22, v24);
      v25 = *v22;
      v26 = *((_DWORD *)*v22 + 2);
      if (v26 != -1)
      {
        v27 = *((unsigned int *)v25 + 6);
        if ((_DWORD)v27)
        {
          v28 = *((_QWORD *)this + 52);
          v29 = (float *)((char *)v25 + 64);
          do
          {
            v30 = *v29++;
            a2.n128_f32[0] = *((float *)this + 137) / v30;
            *(float *)(v28 + 4 * v26++) = a2.n128_f32[0];
            --v27;
          }
          while (v27);
        }
      }
      ++v22;
    }
    while (v22 != v23);
  }
  v31 = *((_QWORD *)this + 94);
  if (v31)
  {
    FIK::Task::registerTask(v31, *((float ***)this + 65), *((float **)this + 53));
    FIK::BalanceTask::updateTasks(*((_BYTE **)this + 94), (_QWORD *)this + 14);
    FIK::BalanceTask::computeDeltaX(*((_QWORD *)this + 94), *((_DWORD *)this + 86));
    v33 = (FIK::Task *)*((_QWORD *)this + 94);
    if (*((_BYTE *)v33 + 185))
    {
      FIK::Solver::setTaskParameters((uint64_t)this, v33, v32);
      v34 = *((_QWORD *)this + 94);
      v35 = *(_DWORD *)(v34 + 8);
      if (v35 != -1)
      {
        v36 = *(unsigned int *)(v34 + 24);
        if ((_DWORD)v36)
        {
          v37 = *((_QWORD *)this + 52);
          v38 = (float *)(v34 + 64);
          do
          {
            v39 = *v38++;
            *(float *)(v37 + 4 * v35++) = *((float *)this + 137) / v39;
            --v36;
          }
          while (v36);
        }
      }
    }
    FIK::Solver::weightMoments((uint64_t)this);
    v40 = *((_QWORD *)this + 94);
    if (v40)
    {
      if (*(_BYTE *)(v40 + 184))
      {
        v41 = *((unsigned int *)this + 80);
        if (v41 >= 3)
        {
          v42 = (v41 - 3);
          v43 = *((_QWORD *)this + 52);
          do
            *(_DWORD *)(v43 + 4 * v42++) = *((_DWORD *)this + 153);
          while (v42 < v41);
        }
      }
    }
  }
  v44 = *v14;
  if ((_DWORD)v44)
  {
    v45 = (int *)*((_QWORD *)this + 53);
    v46 = (_DWORD *)*((_QWORD *)this + 56);
    do
    {
      v47 = *v45++;
      *v46++ = v47;
      --v44;
    }
    while (v44);
  }
  bzero(*((void **)this + 61), 4 * *((unsigned int *)this + 80));
  v48 = *((_QWORD *)this + 5);
  if (v48)
  {
    v49 = (FIK::Segment *)*((_QWORD *)this + 7);
    v50 = 944 * v48;
    do
    {
      FIK::Segment::registerSegment(v49, (uint64_t)this, (uint64_t)this + 381, *((_QWORD *)this + 54), *((_QWORD *)this + 48));
      FIK::Solver::weightSegment((uint64_t)this, v49);
      v49 = (FIK::Segment *)((char *)v49 + 944);
      v50 -= 944;
    }
    while (v50);
  }
  if (*((_BYTE *)this + 650))
    FIK::Solver::recomputeCGWeights((float32x4_t *)this);
  v51 = *((_QWORD *)this + 13);
  if (v51)
  {
    if (*(_BYTE *)(v51 + 532))
      v52 = *(_BYTE *)(v51 + 533) != 0;
    else
      v52 = 0;
    *((_BYTE *)this + 380) = v52;
  }
  result = 1;
  *(_WORD *)((char *)this + 381) = 1;
  v53 = *((_DWORD *)this + 86);
  *((_DWORD *)this + 87) = v53 >> 4;
  v54 = (v53 & 3) == 0;
  v55 = (v53 >> 2) & 3;
  if (!v54)
    ++v55;
  *((_DWORD *)this + 88) = v55;
  return result;
}

float FIK::Solver::initialiseFIK(FIK::Solver *this)
{
  size_t v2;
  void *v3;
  void *v4;
  BOOL v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  void *v44;
  void *v45;
  uint64_t v46;
  void *v47;
  void *v48;
  uint64_t v49;
  _DWORD *v50;
  _DWORD *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  void *v55;
  void *v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  double v62;
  float v63;
  float result;

  if (*((_BYTE *)this + 644))
    FIK::Solver::freeMemory(this);
  *((int32x2_t *)this + 41) = vrev64_s32(vadd_s32((int32x2_t)(*((_QWORD *)this + 40) & 0xFFFFFFFCFFFFFFFCLL), (int32x2_t)0x400000004));
  FIK::Solver::allocMasks(this);
  v2 = 4 * *((unsigned int *)this + 83) * (unint64_t)*((unsigned int *)this + 82);
  v3 = (void *)(*(uint64_t (**)(_QWORD, size_t, uint64_t))(**((_QWORD **)this + 104) + 16))(*((_QWORD *)this + 104), v2, 128);
  v4 = v3;
  if (v2)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5)
    bzero(v3, v2);
  *((_QWORD *)this + 64) = v4;
  bzero(v4, 4 * (*((_DWORD *)this + 82) * *((_DWORD *)this + 83)));
  v6 = *((unsigned int *)this + 83);
  v7 = (void *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 104) + 16))(*((_QWORD *)this + 104), 8 * v6, 128);
  v8 = v7;
  if ((_DWORD)v6 && v7)
    bzero(v7, 8 * v6);
  *((_QWORD *)this + 65) = v8;
  v9 = *((unsigned int *)this + 83);
  v10 = *((unsigned int *)this + 82);
  if ((_DWORD)v9)
  {
    v11 = 0;
    v12 = *((_QWORD *)this + 64);
    v13 = 8 * v9;
    do
    {
      *(_QWORD *)(*((_QWORD *)this + 65) + v11) = v12;
      v11 += 8;
      v12 += 4 * v10;
    }
    while (v13 != v11);
  }
  v14 = (void *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 104) + 16))(*((_QWORD *)this + 104), 4 * v10, 128);
  v15 = v14;
  if ((_DWORD)v10 && v14)
    bzero(v14, 4 * v10);
  *((_QWORD *)this + 54) = v15;
  bzero(v15, 4 * *((unsigned int *)this + 82));
  v16 = *((unsigned int *)this + 82);
  v17 = (void *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 104) + 16))(*((_QWORD *)this + 104), 4 * v16, 128);
  v18 = v17;
  if ((_DWORD)v16 && v17)
    bzero(v17, 4 * v16);
  *((_QWORD *)this + 55) = v18;
  bzero(v18, 4 * *((unsigned int *)this + 82));
  v19 = *((unsigned int *)this + 83);
  v20 = (void *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 104) + 16))(*((_QWORD *)this + 104), 4 * v19, 128);
  v21 = v20;
  if ((_DWORD)v19 && v20)
    bzero(v20, 4 * v19);
  *((_QWORD *)this + 53) = v21;
  bzero(v21, 4 * *((unsigned int *)this + 83));
  v22 = *((unsigned int *)this + 83);
  v23 = (void *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 104) + 16))(*((_QWORD *)this + 104), 4 * v22, 128);
  v24 = v23;
  if ((_DWORD)v22 && v23)
    bzero(v23, 4 * v22);
  *((_QWORD *)this + 56) = v24;
  v25 = *((unsigned int *)this + 83);
  v26 = (void *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 104) + 16))(*((_QWORD *)this + 104), 4 * v25, 128);
  v27 = v26;
  if ((_DWORD)v25 && v26)
    bzero(v26, 4 * v25);
  *((_QWORD *)this + 57) = v27;
  v28 = *((unsigned int *)this + 83);
  v29 = (void *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 104) + 16))(*((_QWORD *)this + 104), 4 * v28, 128);
  v30 = v29;
  if ((_DWORD)v28 && v29)
    bzero(v29, 4 * v28);
  *((_QWORD *)this + 58) = v30;
  v31 = *((unsigned int *)this + 82);
  v32 = (void *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 104) + 16))(*((_QWORD *)this + 104), 4 * v31, 128);
  v33 = v32;
  if ((_DWORD)v31 && v32)
    bzero(v32, 4 * v31);
  *((_QWORD *)this + 59) = v33;
  v34 = *((unsigned int *)this + 82);
  v35 = (void *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 104) + 16))(*((_QWORD *)this + 104), 4 * v34, 128);
  v36 = v35;
  if ((_DWORD)v34 && v35)
    bzero(v35, 4 * v34);
  *((_QWORD *)this + 60) = v36;
  v37 = *((unsigned int *)this + 83);
  v38 = (void *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 104) + 16))(*((_QWORD *)this + 104), 4 * v37, 128);
  v39 = v38;
  if ((_DWORD)v37 && v38)
    bzero(v38, 4 * v37);
  *((_QWORD *)this + 61) = v39;
  bzero(v39, 4 * *((unsigned int *)this + 83));
  v40 = *((unsigned int *)this + 82);
  v41 = (void *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 104) + 16))(*((_QWORD *)this + 104), 4 * v40, 128);
  v42 = v41;
  if ((_DWORD)v40 && v41)
    bzero(v41, 4 * v40);
  *((_QWORD *)this + 48) = v42;
  bzero(v42, 4 * *((unsigned int *)this + 82));
  v43 = *((unsigned int *)this + 82);
  v44 = (void *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 104) + 16))(*((_QWORD *)this + 104), 4 * v43, 128);
  v45 = v44;
  if ((_DWORD)v43 && v44)
    bzero(v44, 4 * v43);
  *((_QWORD *)this + 62) = v45;
  v46 = *((unsigned int *)this + 83);
  v47 = (void *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 104) + 16))(*((_QWORD *)this + 104), 4 * v46, 128);
  v48 = v47;
  if ((_DWORD)v46 && v47)
    bzero(v47, 4 * v46);
  *((_QWORD *)this + 63) = v48;
  v49 = *((unsigned int *)this + 83);
  v50 = (_DWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 104) + 16))(*((_QWORD *)this + 104), 4 * v49, 128);
  v51 = v50;
  if ((_DWORD)v49 && v50)
    bzero(v50, 4 * v49);
  *((_QWORD *)this + 52) = v51;
  v52 = *((unsigned int *)this + 83);
  if ((_DWORD)v52)
  {
    v53 = *((_DWORD *)this + 137);
    do
    {
      *v51++ = v53;
      --v52;
    }
    while (v52);
  }
  v54 = *((unsigned int *)this + 82);
  v55 = (void *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 104) + 16))(*((_QWORD *)this + 104), 4 * v54, 128);
  v56 = v55;
  if ((_DWORD)v54)
    v57 = v55 == 0;
  else
    v57 = 1;
  if (!v57)
    bzero(v55, 4 * v54);
  *((_QWORD *)this + 49) = v56;
  v58 = *((unsigned int *)this + 82);
  if ((_DWORD)v58)
    memset_pattern16(v56, &unk_210802D90, 4 * v58);
  v59 = *((unsigned int *)this + 83);
  v60 = (void *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 104) + 16))(*((_QWORD *)this + 104), 4 * v59, 128);
  v61 = v60;
  if ((_DWORD)v59 && v60)
    bzero(v60, 4 * v59);
  *((_QWORD *)this + 50) = v61;
  v62 = (float)(*((float *)this + 158) * 3.366);
  v63 = v62 / 90.0 * (v62 / 90.0) * 10.0;
  *((float *)this + 143) = v63;
  result = pow(90.0 / v62, 0.1) * 0.001;
  *((float *)this + 144) = result;
  *((_BYTE *)this + 644) = 1;
  return result;
}

float FIK::Solver::setTaskPrecision(FIK::Solver *this, FIK::Task *a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  float *v5;
  float v6;
  float result;

  v2 = *((_DWORD *)a2 + 2);
  if (v2 != -1)
  {
    v3 = *((unsigned int *)a2 + 6);
    if ((_DWORD)v3)
    {
      v4 = *((_QWORD *)this + 52);
      v5 = (float *)((char *)a2 + 64);
      do
      {
        v6 = *v5++;
        result = *((float *)this + 137) / v6;
        *(float *)(v4 + 4 * v2++) = result;
        --v3;
      }
      while (v3);
    }
  }
  return result;
}

uint64_t FIK::Solver::weightSegment(uint64_t this, FIK::Segment *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char *v6;
  float v7;

  v2 = *(_QWORD *)(this + 392);
  if (v2)
  {
    v3 = 0;
    v4 = *((unsigned int *)a2 + 129);
    v5 = *(unsigned int *)(this + 340);
    v6 = (char *)a2 + 808;
    do
    {
      if (v4 >= v5)
        break;
      if (v6[v3])
      {
        v7 = *(float *)&v6[4 * v3 - 272];
        if (v3 >= 3)
          v7 = (float)(v7 * *(float *)(this + 572)) * *(float *)(this + 568);
        *(float *)(v2 + 4 * v4++) = v7;
      }
      ++v3;
    }
    while (v3 != 6);
  }
  return this;
}

uint64_t FIK::Solver::translateRoot(FIK::Solver *this, int a2)
{
  uint64_t result;

  if (*((unsigned __int8 *)this + 380) != a2)
    *((_BYTE *)this + 381) = 1;
  *((_BYTE *)this + 380) = a2;
  result = *((_QWORD *)this + 13);
  if (result)
    return FIK::Segment::setTranslating(result, a2, 1);
  return result;
}

void FIK::Solver::computeDerivatives(FIK::Solver *this)
{
  uint64_t v2;
  float32x4_t *v3;
  uint64_t v4;
  FIK::BalanceTask *v5;
  uint64_t v6;
  float32x4_t *v7;
  uint64_t v8;
  uint64_t v9;
  FIK::PositionTask **v10;
  uint64_t v11;
  FIK::PositionTask *v12;
  uint64_t v13;
  float32x4_t **v14;
  uint64_t v15;
  float32x4_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;

  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    v3 = (float32x4_t *)*((_QWORD *)this + 7);
    v4 = 944 * v2;
    do
    {
      if (v3[50].i8[14])
        FIK::Segment::updateAxes(v3);
      v3 += 59;
      v4 -= 944;
    }
    while (v4);
  }
  v5 = (FIK::BalanceTask *)*((_QWORD *)this + 94);
  if (v5 && *((_BYTE *)v5 + 29))
  {
    v6 = *((_QWORD *)this + 5);
    if (v6)
    {
      v7 = (float32x4_t *)*((_QWORD *)this + 7);
      v8 = 944 * v6;
      do
      {
        FIK::Segment::computeAugCenter(v7);
        v7 += 59;
        v8 -= 944;
      }
      while (v8);
      v5 = (FIK::BalanceTask *)*((_QWORD *)this + 94);
    }
    FIK::BalanceTask::computeDerivatives(v5, *((_DWORD *)this + 85), *((_DWORD *)this + 86));
  }
  v9 = *((_QWORD *)this + 18);
  if (v9)
  {
    v10 = (FIK::PositionTask **)*((_QWORD *)this + 20);
    v11 = 8 * v9;
    do
    {
      v12 = *v10;
      if (*((_BYTE *)*v10 + 29) && !*((_BYTE *)v12 + 31))
        FIK::PositionTask::computeDerivatives(v12, *((_DWORD *)this + 85), *((_DWORD *)this + 86));
      ++v10;
      v11 -= 8;
    }
    while (v11);
  }
  v13 = *((_QWORD *)this + 22);
  if (v13)
  {
    v14 = (float32x4_t **)*((_QWORD *)this + 24);
    v15 = 8 * v13;
    do
    {
      v16 = *v14;
      if ((*v14)[1].i8[13] && !v16[1].i8[15])
        FIK::OrientationTask::computeDerivatives(v16, *((_DWORD *)this + 85));
      ++v14;
      v15 -= 8;
    }
    while (v15);
  }
  v17 = *((_QWORD *)this + 26);
  if (v17)
  {
    v18 = (uint64_t *)*((_QWORD *)this + 28);
    v19 = 8 * v17;
    do
    {
      v20 = *v18++;
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v20 + 288))(v20, *((unsigned int *)this + 85), *((unsigned int *)this + 86));
      v19 -= 8;
    }
    while (v19);
  }
}

float32x4_t FIK::Segment::updateAxes(float32x4_t *this)
{
  float v1;
  float v2;
  float v3;
  float v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t result;

  v1 = this[28].f32[0];
  v2 = this[28].f32[1];
  v3 = this[28].f32[2];
  v4 = this[28].f32[3];
  *(float *)&v5 = (float)((float)((float)(v1 * v1) - (float)(v2 * v2)) - (float)(v3 * v3)) + (float)(v4 * v4);
  *((float *)&v5 + 1) = (float)((float)(v3 * v4) + (float)(v1 * v2)) + (float)((float)(v3 * v4) + (float)(v1 * v2));
  *(float *)&v6 = (float)-(float)((float)(v3 * v4) - (float)(v1 * v2)) - (float)((float)(v3 * v4) - (float)(v1 * v2));
  *((float *)&v6 + 1) = (float)((float)((float)(v2 * v2) - (float)(v3 * v3)) + (float)(v4 * v4)) - (float)(v1 * v1);
  *(float *)&v7 = (float)((float)(v2 * v4) + (float)(v3 * v1)) + (float)((float)(v2 * v4) + (float)(v3 * v1));
  *((float *)&v7 + 1) = (float)-(float)((float)(v1 * v4) - (float)(v2 * v3))
                      - (float)((float)(v1 * v4) - (float)(v2 * v3));
  this[29].f32[2] = (float)-(float)((float)(v2 * v4) - (float)(v1 * v3)) - (float)((float)(v2 * v4) - (float)(v1 * v3));
  this[29].i64[0] = v5;
  this[30].f32[2] = (float)((float)(v1 * v4) + (float)(v2 * v3)) + (float)((float)(v1 * v4) + (float)(v2 * v3));
  this[30].i64[0] = v6;
  this[31].f32[2] = (float)((float)((float)(v4 * v4) + (float)(v3 * v3)) - (float)(v1 * v1)) - (float)(v2 * v2);
  this[31].i64[0] = v7;
  v8 = this[29];
  v9 = this[30];
  v10 = this[31];
  v11 = vmulq_f32(v8, (float32x4_t)0);
  this[20] = vmlaq_f32(vmlaq_f32(v8, (float32x4_t)0, v9), (float32x4_t)0, v10);
  this[21] = vmlaq_f32(vaddq_f32(v9, v11), (float32x4_t)0, v10);
  result = vaddq_f32(v10, vmlaq_f32(v11, (float32x4_t)0, v9));
  this[22] = result;
  return result;
}

void FIK::Solver::clampToLimits(FIK::Solver *this)
{
  uint64_t v2;
  float32x4_t *v3;
  uint64_t v4;

  if (*((_BYTE *)this + 655))
  {
    v2 = *((_QWORD *)this + 5);
    if (v2)
    {
      v3 = (float32x4_t *)*((_QWORD *)this + 7);
      v4 = 944 * v2;
      do
      {
        FIK::Segment::computeLimitsEnforcement(v3, *((float *)this + 147));
        v3 += 59;
        v4 -= 944;
      }
      while (v4);
    }
  }
}

void FIK::Solver::integrate(FIK::Solver *this, double a2, double a3, double a4)
{
  uint64_t v5;
  float32x4_t *v6;
  uint64_t v7;

  v5 = *((_QWORD *)this + 5);
  if (v5)
  {
    v6 = (float32x4_t *)*((_QWORD *)this + 7);
    v7 = 944 * v5;
    do
    {
      if (v6[50].i8[14])
      {
        FIK::Segment::integrateAngle(v6, a2, a3, a4);
        if (v6[33].i8[7] || v6[33].i8[6])
          FIK::Segment::getRetargetingError(v6, *((float *)this + 145));
        if (!*((_BYTE *)this + 653) && (v6[33].i8[7] || v6[33].i8[6]) || *((_BYTE *)this + 655))
        {
          if (v6[33].i8[4] && v6[51].i8[2])
            FIK::Segment::getStretchLimitsError((FIK::Segment *)v6, 0, *((float *)this + 144), *((float **)this + 49));
        }
        else
        {
          FIK::Segment::getLimitsError((FIK::Segment *)v6, *((float *)this + 147), *((float *)this + 144), *((float **)this + 49));
        }
      }
      v6 += 59;
      v7 -= 944;
    }
    while (v7);
  }
  *((_BYTE *)this + 645) = 0;
}

BOOL FIK::Solver::CheckSolve(FIK::Solver *this, float *a2, float *a3)
{
  unsigned int v6;
  unsigned int v7;
  float32x4_t v8;
  float32x4_t v9;
  int8x16_t v10;
  const float *v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;

  v6 = *((_DWORD *)this + 82);
  if (v6)
  {
    v7 = 0;
    v8 = (float32x4_t)vdupq_n_s32(0x7F800000u);
    while (1)
    {
      v9 = *(float32x4_t *)(*((_QWORD *)this + 54) + 4 * v7);
      v10 = (int8x16_t)vabsq_s32((int32x4_t)vbicq_s8(vorrq_s8((int8x16_t)vcltzq_f32(v9), (int8x16_t)vcgezq_f32(v9)), (int8x16_t)vceqq_f32(vabsq_f32(v9), v8)));
      *(int32x2_t *)v10.i8 = vadd_s32(*(int32x2_t *)v10.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL));
      if (vadd_s32(*(int32x2_t *)v10.i8, vdup_lane_s32(*(int32x2_t *)v10.i8, 1)).i32[0] < 4)
        return 0;
      v7 += 4;
      if (v7 >= v6)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    v11 = (const float *)*((unsigned int *)this + 86);
    if (v12 >= v13)
      v15 = v12;
    else
      v15 = v13;
    *a2 = v15;
    if (*a3 >= v14)
      v14 = *a3;
    *a3 = v14;
    v16 = *a2 / v14;
    *a2 = v16;
    return *a3 <= 100000.0 && v16 <= (float)(*((float *)this + 159) * 3.0);
  }
}

float FIK::`anonymous namespace'::vectorMaxAbsElement(FIK::_anonymous_namespace_ *this, const float *a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  float32x4_t v5;
  FIK::_anonymous_namespace_ *v6;
  __int128 v7;
  float result;
  float v9;
  float v10;
  float v11;

  v2 = a2 & 3;
  v3 = a2 & 0xFFFFFFFC;
  if ((a2 & 0xFFFFFFFC) != 0)
  {
    v4 = 0;
    v5 = 0uLL;
    v6 = this;
    do
    {
      v7 = *(_OWORD *)v6;
      v6 = (FIK::_anonymous_namespace_ *)((char *)v6 + 16);
      v5 = vmaxnmq_f32((float32x4_t)(v7 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), v5);
      v4 += 4;
    }
    while (v4 < v3);
  }
  else
  {
    v5 = 0uLL;
  }
  result = vmaxvq_f32(v5);
  if (v2 != 1)
  {
    if (v2 != 2)
    {
      if (v2 != 3)
        return result;
      v9 = fabsf(*((float *)this + (v3 | 2)));
      if (v9 >= result)
        result = v9;
    }
    v10 = fabsf(*((float *)this + (v3 | 1)));
    if (v10 >= result)
      result = v10;
  }
  v11 = fabsf(*((float *)this + v3));
  if (v11 >= result)
    return v11;
  return result;
}

float32x4_t *FIK::Solver::updateFkOfActiveBones(float32x4_t *this)
{
  uint64_t v1;
  int v2;
  unsigned int *v3;
  uint64_t v4;
  float32x4_t v5;
  unsigned int v6;
  uint64_t v7;
  float32x4_t *v8;
  float32x4_t v9;
  float32x4_t v10;
  int32x4_t v11;
  int8x16_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  int32x4_t v19;
  float32x4_t v20;
  int32x4_t v21;
  float32x4_t v22;
  float32x4_t *v23;
  float32x4_t v24;
  float32x4_t v25;
  int32x4_t v26;
  int8x16_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  int32x4_t v33;
  float32x4_t v34;
  int32x4_t v35;
  float32x4_t *v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  int32x4_t v40;
  float32x4_t v41;
  int32x4_t v42;

  v1 = this[4].i64[1];
  if (v1)
  {
    v2 = *(_DWORD *)(this[6].i64[1] + 520);
    v3 = (unsigned int *)this[5].i64[1];
    v4 = 4 * v1;
    v5.i64[0] = 0x4000000040000000;
    v5.i64[1] = 0x4000000040000000;
    do
    {
      v6 = *v3;
      v7 = this[3].i64[1];
      if (*(_BYTE *)(v7 + 944 * *v3 + 814))
      {
        v8 = (float32x4_t *)(v7 + 944 * v6);
        if (v6 == v2)
        {
          v9 = v8[6];
          v10 = v8[15];
          v11 = (int32x4_t)vnegq_f32(v10);
          v12 = (int8x16_t)vtrn2q_s32((int32x4_t)v10, vtrn1q_s32((int32x4_t)v10, v11));
          v13 = this[19];
          v14 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v10, (int8x16_t)v11, 8uLL), *(float32x2_t *)v13.f32, 1), (float32x4_t)vextq_s8(v12, v12, 8uLL), v13.f32[0]);
          v15 = (float32x4_t)vrev64q_s32((int32x4_t)v10);
          v15.i32[0] = v11.i32[1];
          v15.i32[3] = v11.i32[2];
          v16 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v10, v13, 3), v15, v13, 2), v14);
          v17 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v13, (int32x4_t)v13), (int8x16_t)v13, 0xCuLL);
          v18 = vnegq_f32(v13);
          v19 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v9, (int32x4_t)v9), (int8x16_t)v9, 0xCuLL), v18), v9, v17);
          v20 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v19, v19), (int8x16_t)v19, 0xCuLL);
          v21 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v20, (int32x4_t)v20), (int8x16_t)v20, 0xCuLL), v18), v20, v17);
          v22 = vaddq_f32(this[18], vmlaq_f32(v9, v5, vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v21, v21), (int8x16_t)v21, 0xCuLL), v20, v13, 3)));
          v8[27] = v22;
          v8[28] = v16;
          v8[26] = v22;
        }
        else
        {
          v23 = (float32x4_t *)v8[2].i64[0];
          v24 = v8[6];
          v25 = v8[15];
          v26 = (int32x4_t)vnegq_f32(v25);
          v27 = (int8x16_t)vtrn2q_s32((int32x4_t)v25, vtrn1q_s32((int32x4_t)v25, v26));
          v28 = v23[28];
          v29 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v25, (int8x16_t)v26, 8uLL), *(float32x2_t *)v28.f32, 1), (float32x4_t)vextq_s8(v27, v27, 8uLL), v28.f32[0]);
          v30 = (float32x4_t)vrev64q_s32((int32x4_t)v25);
          v30.i32[0] = v26.i32[1];
          v30.i32[3] = v26.i32[2];
          v16 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v25, v28, 3), v30, v28, 2), v29);
          v31 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v28, (int32x4_t)v28), (int8x16_t)v28, 0xCuLL);
          v32 = vnegq_f32(v28);
          v33 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v24, (int32x4_t)v24), (int8x16_t)v24, 0xCuLL), v32), v24, v31);
          v34 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v33, v33), (int8x16_t)v33, 0xCuLL);
          v35 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v34, (int32x4_t)v34), (int8x16_t)v34, 0xCuLL), v32), v34, v31);
          v22 = vaddq_f32(v23[27], vmlaq_f32(v24, v5, vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v35, v35), (int8x16_t)v35, 0xCuLL), v34, v28, 3)));
          v8[27] = v22;
          v8[28] = v16;
          v8[26] = v22;
          v8[39].f32[3] = (float)(v23[39].f32[3] + v23[25].f32[0]) + v23[25].f32[1];
        }
        v36 = (float32x4_t *)(v7 + 944 * v6);
        v36[50].i8[15] = 0;
        v37 = v36[55];
        v38 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v16, (int32x4_t)v16), (int8x16_t)v16, 0xCuLL);
        v39 = vnegq_f32(v16);
        v40 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v37, (int32x4_t)v37), (int8x16_t)v37, 0xCuLL), v39), v37, v38);
        v41 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v40, v40), (int8x16_t)v40, 0xCuLL);
        v42 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v41, (int32x4_t)v41), (int8x16_t)v41, 0xCuLL), v39), v41, v38);
        v36[56] = vaddq_f32(v22, vmlaq_f32(v37, v5, vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v42, v42), (int8x16_t)v42, 0xCuLL), v41, v16, 3)));
      }
      ++v3;
      v4 -= 4;
    }
    while (v4);
  }
  return this;
}

uint64_t FIK::Solver::solve(FIK::Solver *this, unsigned int a2)
{
  __n128 v4;
  uint64_t v5;
  char v6;
  float32x4_t *v7;
  uint64_t v8;
  _BOOL4 v9;
  _BOOL4 v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v14;
  _QWORD **v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _BOOL4 v19;
  _BOOL8 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  _BYTE *v26;
  float32x4_t *v27;
  float32x4_t v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  unsigned int v35;
  uint64_t v36;
  NSObject *v38;
  float v39;
  float v40;

  kdebug_trace();
  v40 = 0.0;
  if (*((_BYTE *)this + 382))
    FIK::Solver::setup(this, v4);
  if (*((_BYTE *)this + 381))
    FIK::Solver::findZeros(this);
  bzero(*((void **)this + 48), 4 * *((unsigned int *)this + 85));
  v5 = *((_QWORD *)this + 5);
  if (v5)
  {
    v6 = 0;
    v7 = (float32x4_t *)*((_QWORD *)this + 7);
    v8 = 944 * v5;
    LOBYTE(v9) = 1;
    LOBYTE(v10) = 1;
    while (v10)
    {
      if (v7[50].i8[14])
      {
        v10 = 1;
      }
      else
      {
        v11 = v7[4].i64[1];
        if (!v11)
          break;
        v10 = *(unsigned __int8 *)(v11 + 814) == 0;
      }
LABEL_13:
      if (v9)
      {
        v9 = 0;
        if (v7[50].i8[8])
          v12 = v7[50].i8[9] == 0;
        else
          v12 = 1;
        if (!v12 && v7[50].i8[10] != 0)
          v9 = v7 == *((float32x4_t **)this + 13) || v7[33].i8[4] == 0;
      }
      else
      {
        v9 = 0;
      }
      if (v7[33].i8[7] || v7[33].i8[6])
      {
        if (v7[50].i8[14])
          FIK::Segment::getRetargetingError(v7, *((float *)this + 145));
        v6 = 1;
      }
      else if (v7[50].i8[14] && !*((_BYTE *)this + 655))
      {
        FIK::Segment::getLimitsError((FIK::Segment *)v7, *((float *)this + 147), *((float *)this + 144), *((float **)this + 49));
      }
      v7 += 59;
      v8 -= 944;
      if (!v8)
        goto LABEL_36;
    }
    v10 = 0;
    goto LABEL_13;
  }
  v6 = 0;
  v10 = 1;
  v9 = 1;
LABEL_36:
  v14 = *((_QWORD *)this + 18);
  if (v14)
  {
    v15 = (_QWORD **)*((_QWORD *)this + 20);
    v16 = 8 * v14;
    do
    {
      v17 = *v15++;
      FIK::PositionTask::queryAffectedSegments(v17);
      v16 -= 8;
    }
    while (v16);
  }
  v18 = *((_QWORD *)this + 94);
  if (v18)
    v19 = *(unsigned __int8 *)(v18 + 29) != 0;
  else
    v19 = 0;
  v20 = v9 && !v19;
  v21 = *((_QWORD *)this + 16);
  v22 = *((_QWORD *)this + 14);
  if ((v6 & 1) != 0)
  {
    if (v22)
    {
      v23 = 8 * v22;
      do
      {
        v24 = *(_BYTE **)v21;
        if (*(_BYTE *)(*(_QWORD *)v21 + 29))
        {
          v24[30] = 0;
          (*(void (**)(_BYTE *, _BOOL8))(*(_QWORD *)v24 + 264))(v24, v20);
        }
        v21 += 8;
        v23 -= 8;
      }
      while (v23);
    }
  }
  else if (v22)
  {
    v25 = 8 * v22;
    do
    {
      v26 = *(_BYTE **)v21;
      v21 += 8;
      v26[30] = 0;
      (*(void (**)(_BYTE *, _BOOL8))(*(_QWORD *)v26 + 264))(v26, v20);
      v25 -= 8;
    }
    while (v25);
  }
  if (v19)
  {
    if (*((_BYTE *)this + 646) && *(_BYTE *)(*((_QWORD *)this + 94) + 184))
      FIK::Solver::balanceForces((uint64_t)this);
    v27 = (float32x4_t *)*((_QWORD *)this + 95);
    if (v27)
    {
      v28 = v27[11];
      *((float32x4_t *)this + 48) = v28;
      *((float32x4_t *)this + 18) = vnegq_f32(v28);
    }
  }
  v39 = 1.0;
  *((_DWORD *)this + 84) = 0;
  if (a2)
  {
    while (1)
    {
      *((_DWORD *)this + 160) = 0;
      if (v10)
        FIK::Solver::updateFkOfActiveBones((float32x4_t *)this);
      else
        FIK::Solver::updateForwardFromRoot((float32x4_t *)this, 0);
      FIK::Solver::computeDerivatives(this);
      if (!*((_DWORD *)this + 84))
        FIK::Solver::updateReach(this);
      FIK::Solver::invertFIKCombined(this);
      FIK::Solver::clampToLimits(this);
      if (!FIK::Solver::CheckSolve(this, &v40, &v39))
        break;
      if (*((_DWORD *)this + 84))
      {
        LODWORD(v29) = *((_DWORD *)this + 135);
        LODWORD(v30) = *((_DWORD *)this + 136);
        if (*(float *)&v29 < *(float *)&v30)
        {
          FIK::Segment::integrateAngle(*((float32x4_t **)this + 13), v29, v30, v31);
          *((_BYTE *)this + 645) = 0;
          goto LABEL_70;
        }
      }
      bzero(*((void **)this + 48), 4 * *((unsigned int *)this + 85));
      FIK::Solver::integrate(this, v32, v33, v34);
      v35 = *((_DWORD *)this + 84) + 1;
      *((_DWORD *)this + 84) = v35;
      if (v35 >= a2)
        goto LABEL_70;
    }
    v38 = ikinemaLogObject()[1];
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      FIK::Solver::solve(v38);
    v36 = 0;
  }
  else
  {
LABEL_70:
    *((float32x4_t *)this + 46) = vaddq_f32(*(float32x4_t *)(*((_QWORD *)this + 13) + 96), *(float32x4_t *)(*((_QWORD *)this + 13) + 912));
    FIK::Solver::updateForwardFromRoot((float32x4_t *)this, 0);
    kdebug_trace();
    v36 = 1;
  }
  kdebug_trace();
  return v36;
}

uint64_t FIK::Solver::findZeros(FIK::Solver *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  *((_DWORD *)this + 171) = 0;
  bzero(*((void **)this + 64), 4 * (*((_DWORD *)this + 81) * *((_DWORD *)this + 80)));
  v2 = *((_QWORD *)this + 14);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 16);
    v4 = 8 * v2;
    do
    {
      if (*(_BYTE *)(*v3 + 29))
        (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v3 + 272))(*v3, *((unsigned int *)this + 85), *((unsigned int *)this + 86));
      ++v3;
      v4 -= 8;
    }
    while (v4);
  }
  result = *((_QWORD *)this + 94);
  if (result && *(_BYTE *)(result + 29))
    result = FIK::BalanceTask::fillJacobian(result, *((_DWORD *)this + 85), *((_DWORD *)this + 86));
  if (*((_DWORD *)this + 86))
  {
    v6 = 0;
    v7 = 0;
    v8 = *((_QWORD *)this + 87);
    do
    {
      v9 = *((unsigned int *)this + 85);
      if ((_DWORD)v9)
      {
        v10 = 0;
        v11 = 0;
        v12 = *(_QWORD *)(*((_QWORD *)this + 65) + 8 * v6);
        do
        {
          if (*(float *)(v12 + 4 * v10) != 0.0)
          {
            v13 = v10 & 0xFFFFFFFC;
            v14 = *((_QWORD *)this + 86);
            if (!v11 || !v7 || *(_DWORD *)(v14 + 4 * v7 - 4) != v13)
            {
              *(_DWORD *)(v14 + 4 * v7++) = v13;
              ++v11;
              v9 = *((unsigned int *)this + 85);
            }
          }
          ++v10;
        }
        while (v10 < v9);
      }
      else
      {
        v11 = 0;
      }
      *(_DWORD *)(v8 + 4 * v6++) = v11;
    }
    while (v6 < *((unsigned int *)this + 86));
  }
  *((_BYTE *)this + 381) = 0;
  return result;
}

uint64_t FIK::Solver::balanceForces(uint64_t this)
{
  uint64_t v1;
  float32x4_t **v2;
  float32x4_t v3;
  uint64_t v4;
  uint64_t v5;
  float32x4_t **v6;
  float32x4_t *v7;
  _BOOL8 v8;
  float32x4_t v9;
  float32x4_t *v10;

  v1 = *(_QWORD *)(this + 144);
  if (!v1)
  {
    if (!*(_BYTE *)(this + 652))
      goto LABEL_19;
    goto LABEL_18;
  }
  v2 = *(float32x4_t ***)(this + 160);
  v3 = *(float32x4_t *)(*(_QWORD *)(this + 752) + 224);
  v4 = 8 * v1;
  v5 = 8 * v1;
  v6 = v2;
  do
  {
    v7 = *v6;
    if ((*v6)[1].i8[13] && v7[18].i8[1] && !v7[18].i8[2])
      v3 = vaddq_f32(v3, v7[15]);
    ++v6;
    v5 -= 8;
  }
  while (v5);
  v8 = *(_BYTE *)(this + 652) != 0;
  v9 = vnegq_f32(v3);
  do
  {
    v10 = *v2;
    if ((*v2)[1].i8[13] && v10[18].i8[2])
    {
      v10[15] = vmulq_n_f32(v9, v10[20].f32[2]);
      if (v8)
      {
        if ((*v2)[2].u8[1] + (*v2)[2].u8[0] + (*v2)[2].u8[2] == 3)
        {
          LOBYTE(v8) = 0;
          *(_QWORD *)(this + 760) = *v2;
        }
        else
        {
          LOBYTE(v8) = 1;
        }
      }
      else
      {
        LOBYTE(v8) = 0;
      }
    }
    ++v2;
    v4 -= 8;
  }
  while (v4);
  if (v8)
  {
LABEL_18:
    *(_QWORD *)(this + 776) = 0;
    *(_OWORD *)(this + 760) = 0u;
  }
LABEL_19:
  *(_BYTE *)(this + 646) = 0;
  return this;
}

void FIK::Solver::invertFIKCombined(FIK::Solver *this)
{
  float32x2_t v2;
  float32x4_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float32x4_t v15;
  float32x4_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  const float *v20;
  const float *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const float *v30;
  uint64_t v31;
  int v32;
  float32x4_t v33;
  uint64_t v34;
  float32x4_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  float32x4_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  float32x4_t *v47;
  float32x4_t *v48;
  float32x4_t *v49;
  float32x4_t *v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;

  *((_DWORD *)this + 135) = 0;
  bzero(*((void **)this + 55), 4 * *((unsigned int *)this + 85));
  bzero(*((void **)this + 62), 4 * *((unsigned int *)this + 85));
  v4 = *((unsigned int *)this + 86);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      v7 = *(_DWORD *)(*((_QWORD *)this + 83) + 4 * v5);
      v8 = *((_QWORD *)this + 63);
      if (v7)
      {
        v9 = (unsigned int *)(*((_QWORD *)this + 82) + 4 * v6);
        v10 = *((_QWORD *)this + 55);
        v11 = *(float *)(*((_QWORD *)this + 50) + 4 * v5);
        v12 = *((_QWORD *)this + 62);
        v2.f32[0] = *(float *)(*((_QWORD *)this + 56) + 4 * v5) * v11;
        v3.f32[0] = v11 * *(float *)(*((_QWORD *)this + 61) + 4 * v5);
        v13 = *(_QWORD *)(*((_QWORD *)this + 65) + 8 * v5);
        v14 = *((_QWORD *)this + 48);
        v15 = (float32x4_t)vdupq_lane_s32((int32x2_t)v2, 0);
        v3 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v3.f32, 0);
        v16 = 0uLL;
        v17 = *(unsigned int *)(*((_QWORD *)this + 83) + 4 * v5);
        do
        {
          v18 = *v9++;
          v19 = 4 * v18;
          *(float32x4_t *)(v10 + v19) = vmlaq_f32(*(float32x4_t *)(v10 + v19), v15, *(float32x4_t *)(v13 + v19));
          *(float32x4_t *)(v12 + v19) = vmlaq_f32(*(float32x4_t *)(v12 + v19), v3, *(float32x4_t *)(v13 + v19));
          v16 = vmlaq_f32(v16, *(float32x4_t *)(v14 + v19), *(float32x4_t *)(v13 + v19));
          --v17;
        }
        while (v17);
        v4 = *((unsigned int *)this + 86);
      }
      else
      {
        v16 = 0uLL;
      }
      v6 += v7;
      v2 = vadd_f32(*(float32x2_t *)v16.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL));
      *(float *)(v8 + 4 * v5++) = vaddv_f32(v2);
    }
    while (v5 < v4);
  }
  v20 = (const float *)*((unsigned int *)this + 86);
  if ((_DWORD)v20)
  {
    v21 = 0;
    v22 = 0;
    v23 = *((_QWORD *)this + 82);
    v24 = *((_QWORD *)this + 83);
    v25 = *((_QWORD *)this + 65);
    v26 = *((_QWORD *)this + 55);
    v27 = *((_QWORD *)this + 53);
    v28 = *((_QWORD *)this + 62);
    v29 = *((_QWORD *)this + 63);
    v30 = (const float *)*((_QWORD *)this + 57);
    v31 = *((_QWORD *)this + 58);
    do
    {
      v32 = *(_DWORD *)(v24 + 4 * (_QWORD)v21);
      if (v32)
      {
        v33 = 0uLL;
        v34 = *(unsigned int *)(v24 + 4 * (_QWORD)v21);
        v35 = 0uLL;
        v36 = (unsigned int *)(v23 + 4 * v22);
        do
        {
          v37 = *v36++;
          v38 = 4 * v37;
          v39 = *(float32x4_t *)(*(_QWORD *)(v25 + 8 * (_QWORD)v21) + v38);
          v33 = vmlaq_f32(v33, *(float32x4_t *)(v26 + v38), v39);
          v35 = vmlaq_f32(v35, *(float32x4_t *)(v28 + v38), v39);
          --v34;
        }
        while (v34);
      }
      else
      {
        v35 = 0uLL;
        v33 = 0uLL;
      }
      v22 += v32;
      v30[(_QWORD)v21] = *(float *)(v27 + 4 * (_QWORD)v21)
                       - vaddv_f32(vadd_f32(*(float32x2_t *)v33.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL)));
      *(float *)(v31 + 4 * (_QWORD)v21) = *(float *)(v29 + 4 * (_QWORD)v21)
                                          - vaddv_f32(vadd_f32(*(float32x2_t *)v35.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL)));
      v21 = (const float *)((char *)v21 + 1);
    }
    while (v21 != v20);
  }
  else
  {
    v30 = (const float *)*((_QWORD *)this + 57);
  }
  v40 = *((_QWORD *)this + 54);
  v41 = *((_QWORD *)this + 55);
  v42 = *((_QWORD *)this + 48);
  v43 = *((_QWORD *)this + 62);
  v44 = *((_DWORD *)this + 85) & 3;
  v45 = *((_DWORD *)this + 85) & 0xFFFFFFFC;
  if ((_DWORD)v45)
  {
    v46 = 0;
    v47 = (float32x4_t *)*((_QWORD *)this + 54);
    v48 = (float32x4_t *)*((_QWORD *)this + 55);
    v49 = (float32x4_t *)*((_QWORD *)this + 48);
    v50 = (float32x4_t *)*((_QWORD *)this + 62);
    do
    {
      v51 = *v48++;
      v52 = v51;
      v53 = *v49++;
      v54 = v53;
      v55 = *v50++;
      *v47++ = vsubq_f32(vaddq_f32(v52, v54), v55);
      v46 += 4;
    }
    while (v46 < v45);
  }
  switch(v44)
  {
    case 1:
      goto LABEL_27;
    case 2:
LABEL_26:
      *(float *)(v40 + 4 * (v45 | 1)) = (float)(*(float *)(v41 + 4 * (v45 | 1))
                                                              + *(float *)(v42 + 4 * (v45 | 1)))
                                                      - *(float *)(v43 + 4 * (v45 | 1));
LABEL_27:
      *(float *)(v40 + 4 * v45) = (float)(*(float *)(v41 + 4 * v45)
                                                        + *(float *)(v42 + 4 * v45))
                                                - *(float *)(v43 + 4 * v45);
      break;
    case 3:
      *(float *)(v40 + 4 * (v45 | 2)) = (float)(*(float *)(v41 + 4 * (v45 | 2))
                                                              + *(float *)(v42 + 4 * (v45 | 2)))
                                                      - *(float *)(v43 + 4 * (v45 | 2));
      goto LABEL_26;
  }
}

float32x4_t *FIK::Solver::updateFK(float32x4_t *this)
{
  if (this[6].i64[1])
    return FIK::Solver::updateForwardFromRoot(this, 0);
  return this;
}

void FIK::Solver::allocMasks(FIK::Solver *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  size_t v5;
  void *v6;
  void *v7;
  BOOL v8;
  uint64_t v9;
  void *v10;
  void *v11;
  size_t v12;
  void *v13;
  void *v14;

  v2 = *((_QWORD *)this + 86);
  if (v2)
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)this + 104) + 24))(*((_QWORD *)this + 104), v2, 0, 8);
  v3 = *((_QWORD *)this + 87);
  if (v3)
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)this + 104) + 24))(*((_QWORD *)this + 104), v3, 0, 8);
  *((_OWORD *)this + 41) = 0u;
  *((_QWORD *)this + 86) = 0;
  *((_QWORD *)this + 87) = 0;
  v4 = *((_QWORD *)this + 90);
  if (v4)
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)this + 104) + 24))(*((_QWORD *)this + 104), v4, 0, 8);
  *((_QWORD *)this + 90) = 0;
  v5 = 4 * *((unsigned int *)this + 80) * (unint64_t)(*((_DWORD *)this + 82) >> 2);
  v6 = (void *)(*(uint64_t (**)(_QWORD, size_t, uint64_t))(**((_QWORD **)this + 104) + 16))(*((_QWORD *)this + 104), v5, 128);
  v7 = v6;
  if (v5)
    v8 = v6 == 0;
  else
    v8 = 1;
  if (!v8)
    bzero(v6, v5);
  *((_QWORD *)this + 82) = v7;
  *((_QWORD *)this + 86) = v7;
  v9 = *((unsigned int *)this + 80);
  v10 = (void *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 104) + 16))(*((_QWORD *)this + 104), 4 * v9, 128);
  v11 = v10;
  if ((_DWORD)v9 && v10)
    bzero(v10, 4 * v9);
  *((_QWORD *)this + 83) = v11;
  *((_QWORD *)this + 87) = v11;
  v12 = 4 * *((unsigned int *)this + 83) * (unint64_t)*((unsigned int *)this + 81);
  v13 = (void *)(*(uint64_t (**)(_QWORD, size_t, uint64_t))(**((_QWORD **)this + 104) + 16))(*((_QWORD *)this + 104), v12, 128);
  v14 = v13;
  if (v12 && v13)
    bzero(v13, v12);
  *((_QWORD *)this + 35) = v14;
  *((_QWORD *)this + 90) = v14;
}

uint64_t FIK::Solver::setP(uint64_t this, float a2)
{
  *(float *)(this + 552) = a2;
  *(_BYTE *)(this + 382) = 1;
  return this;
}

uint64_t FIK::Solver::setMomentsWeight(uint64_t this, float a2)
{
  *(float *)(this + 608) = a2;
  return FIK::Solver::weightMoments(this);
}

float32_t FIK::`anonymous namespace'::vectorMul(float32x4_t *this, float *a2, const float *a3)
{
  int v3;
  unint64_t v4;
  unint64_t v5;
  float *v6;
  float32x4_t *v7;
  float32x4_t v8;
  float32x4_t v9;

  v3 = a3 & 3;
  v4 = a3 & 0xFFFFFFFC;
  if ((a3 & 0xFFFFFFFC) != 0)
  {
    v5 = 0;
    v6 = a2;
    v7 = this;
    do
    {
      v8 = *(float32x4_t *)v6;
      v6 += 4;
      v9 = vmulq_f32(*v7, v8);
      *v7++ = v9;
      v5 += 4;
    }
    while (v5 < v4);
  }
  switch(v3)
  {
    case 1:
      goto LABEL_9;
    case 2:
LABEL_8:
      this->f32[v4 | 1] = a2[v4 | 1] * this->f32[v4 | 1];
LABEL_9:
      v9.f32[0] = a2[v4] * this->f32[v4];
      this->i32[v4] = v9.i32[0];
      return v9.f32[0];
    case 3:
      this->f32[v4 | 2] = a2[v4 | 2] * this->f32[v4 | 2];
      goto LABEL_8;
  }
  return v9.f32[0];
}

float32_t FIK::`anonymous namespace'::vectorAddMulAdd(float32x4_t *this, float *a2, const float *a3, const float *a4)
{
  int v4;
  unint64_t v5;
  unint64_t v6;
  const float *v7;
  float *v8;
  float32x4_t *v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  int v14;
  int v15;

  v4 = a4 & 3;
  v5 = a4 & 0xFFFFFFFC;
  if ((a4 & 0xFFFFFFFC) != 0)
  {
    v6 = 0;
    v7 = a3;
    v8 = a2;
    v9 = this;
    do
    {
      v10 = *v9;
      v11 = *(float32x4_t *)v8;
      v8 += 4;
      v12 = v11;
      v13 = *(float32x4_t *)v7;
      v7 += 4;
      *v9 = vmlaq_f32(vaddq_f32(*v9, v13), v12, *v9);
      ++v9;
      v6 += 4;
    }
    while (v6 < v5);
  }
  switch(v4)
  {
    case 1:
      goto LABEL_9;
    case 2:
LABEL_8:
      v15 = v5 | 1;
      this->f32[v15] = this->f32[v15] + (float)(a3[v15] + (float)(this->f32[v15] * a2[v15]));
LABEL_9:
      v10.f32[0] = this->f32[v5]
                 + (float)(a3[v5] + (float)(this->f32[v5] * a2[v5]));
      this->i32[v5] = v10.i32[0];
      return v10.f32[0];
    case 3:
      v14 = v5 | 2;
      this->f32[v14] = this->f32[v14] + (float)(a3[v14] + (float)(this->f32[v14] * a2[v14]));
      goto LABEL_8;
  }
  return v10.f32[0];
}

unint64_t *FIK::constructWalkSequenceFromBones@<X0>(unint64_t *a1@<X0>, int a2@<W1>, unint64_t *a3@<X8>)
{
  unint64_t v6;
  void (***v7)(FIK::CrtAllocator *__hidden);
  unint64_t *result;
  _DWORD *v9;
  int v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t i;
  int v14;

  v6 = *a1;
  v7 = FIK::defaultAllocator((FIK *)a1);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  a3[3] = (unint64_t)v7;
  v14 = 0;
  result = FIK::IKArray<unsigned int>::resize(a3, v6, &v14);
  v9 = (_DWORD *)a3[2];
  *v9 = a2;
  if (v6 >= 2)
  {
    v10 = 0;
    v11 = a1[2];
    v12 = 1;
    do
    {
      for (i = *(_QWORD *)(v11 + 944 * v9[v10] + 72); i; i = *(_QWORD *)(i + 80))
        v9[v12++] = *(_DWORD *)(i + 520);
      ++v10;
    }
    while (v6 > v12);
  }
  return result;
}

__n128 FIK::Solver::importBones(__n128 *this, const FIK::ImportBone *a2, unint64_t a3)
{
  uint64_t *v6;
  void *v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  IKString *v15;
  float *v16;
  char *v17;
  unsigned int v18;
  uint64_t i;
  char *v20;
  unsigned int v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  unsigned int v25;
  _QWORD *v26;
  FIK::Segment **Key;
  unint64_t v28;
  unsigned int *v29;
  float v30;
  unsigned int v31;
  float32x4_t v32;
  float32x4_t v33;
  unint64_t v34;
  unint64_t v35;
  __n128 result;
  __n128 v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int8x16_t v42;
  uint64_t v43;
  uint64_t v44;

  v6 = &this[2].n128_i64[1];
  FIK::Segment::Segment((FIK::Segment *)&v42, 3u, 0);
  FIK::IKArray<FIK::Segment>::resize(v6, a3, (uint64_t)&v42);
  FIK::Segment::~Segment((FIK::Segment *)&v42, v7);
  FIK::FIKRedBlackTree<IKString,FIK::Segment *>::clear((uint64_t)this);
  if (this[7].n128_u64[0])
  {
    FIK::Solver::freeTasks(this);
    this[7].n128_u64[0] = 0;
    this[9].n128_u64[0] = 0;
    this[11].n128_u64[0] = 0;
  }
  if (a3)
  {
    v8 = 0;
    v9 = 0;
    v38 = v6;
    do
    {
      v10 = a3;
      v11 = (char *)a2 + 144 * v8;
      v12 = this[3].n128_u64[1];
      v13 = v12 + 944 * v8;
      *(_DWORD *)(v13 + 520) = v9;
      if (*((_QWORD *)v11 + 1))
        v14 = *(char **)v11;
      else
        v14 = (char *)&unk_2108059BE;
      v15 = (IKString *)strlen(v14);
      IKString::assign((_QWORD *)(v13 + 8), v14, v15);
      IKString::IKString((IKString *)&v39, (const FIK::ImportBone *)((char *)a2 + 144 * v8));
      FIK::FIKRedBlackTree<IKString,FIK::Segment *>::InsertKey((uint64_t *)this, &v39, v12 + 944 * v8);
      if (v40)
      {
        (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v41 + 24))(v41, v39, 0, 8);
        v39 = 0;
        v40 = 0;
      }
      v16 = (float *)((char *)a2 + 144 * v9 + 116);
      v17 = (char *)a2 + 144 * v8;
      v42 = vextq_s8(*(int8x16_t *)(v17 + 60), *(int8x16_t *)(v17 + 60), 4uLL);
      FIK::Segment::setRestOrientation(v12 + 944 * v8, (float32x4_t *)&v42);
      v18 = *((_DWORD *)v17 + 14);
      v42.i64[0] = *((_QWORD *)v17 + 6);
      v42.i64[1] = v18;
      FIK::Segment::setRestTranslation((__n128 *)(v12 + 944 * v8), (__n128 *)&v42);
      for (i = 0; i != 4; ++i)
      {
        FIK::Segment::setLimits((FIK::Segment *)(v12 + 944 * v8), i, *(v16 - 1), *v16);
        v16 += 2;
      }
      v20 = (char *)a2 + 144 * v8;
      FIK::Segment::setProjectionAxis((float32x4_t *)(v12 + 944 * v8), *((_DWORD *)v20 + 22));
      v21 = *((_DWORD *)v20 + 23);
      if (v21 >= 3)
      {
        a3 = v10;
        if (v21 == 3)
          FIK::Segment::setRotationAxis((float32x2_t *)(v12 + 944 * v8), 3u, (const float *)a2 + 36 * v8 + 25);
      }
      else
      {
        FIK::Segment::setRotationAxis((float32x2_t *)(v12 + 944 * v8), v21, 0);
        a3 = v10;
      }
      v22 = (char *)a2 + 144 * v8;
      FIK::Segment::enforceLimits(v12 + 944 * v8, v22[96]);
      FIK::Segment::setSegAddErrors(v12 + 944 * v8, this[40].n128_i8[13]);
      FIK::Segment::enableLimits(v12 + 944 * v8, 1);
      *(_QWORD *)(v12 + 944 * v8 + 936) = *((_QWORD *)v22 + 10);
      FIK::Segment::registerSegment((_QWORD *)(v12 + 944 * v8), (uint64_t)this, (uint64_t)&this[23].n128_i64[1] + 5, this[27].n128_i64[0], this[24].n128_i64[0]);
      v8 = ++v9;
    }
    while (v9 < a3);
    v23 = 0;
    v24 = (_QWORD *)((char *)a2 + 24);
    v25 = 1;
    v6 = v38;
    do
    {
      v26 = (_QWORD *)(this[3].n128_u64[1] + v23);
      Key = (FIK::Segment **)FIK::FIKRedBlackTree<IKString,FIK::Segment *>::FindKey(this, v24);
      if (Key)
        FIK::Segment::setParent(v26, *Key);
      else
        this[6].n128_u64[1] = (unint64_t)v26;
      v28 = v25;
      v24 += 18;
      v23 += 944;
      ++v25;
    }
    while (v28 < a3);
  }
  FIK::Solver::computeScale((FIK::Solver *)this);
  this[23].n128_u8[14] = 1;
  this[40].n128_u16[5] = 257;
  this[39].n128_u32[3] = 0;
  if (a3)
  {
    v29 = (unsigned int *)((char *)a2 + 56);
    v30 = 0.0;
    v31 = 1;
    do
    {
      v32.i64[0] = *((_QWORD *)v29 - 1);
      v32.i64[1] = *v29;
      v33 = vmulq_f32(v32, v32);
      v30 = v30
          + sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v33, 2), vaddq_f32(v33, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.f32, 1))).f32[0]);
      this[39].n128_f32[3] = v30;
      v34 = v31;
      v29 += 36;
      ++v31;
    }
    while (v34 < a3);
  }
  FIK::constructWalkSequenceFromBones((unint64_t *)v6, *(_DWORD *)(this[6].n128_u64[1] + 520), (unint64_t *)&v42);
  FIK::IKArray<unsigned int>::operator=(&this[4].n128_i64[1], (__int128 *)v42.i8);
  v42.i64[0] = 0;
  if (v43)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v44 + 24))(v44, v43, 0, 8);
  v35 = this[3].n128_u64[1];
  result = *(__n128 *)(v35 + 96);
  v37 = *(__n128 *)(v35 + 240);
  this[50] = result;
  this[51] = v37;
  return result;
}

void FIK::IKArray<FIK::Segment>::resize(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  FIK::Segment *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t i;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;

  v3 = *a1;
  if (*a1 > a2)
  {
    if (*a1 != a2)
    {
      v4 = (FIK::Segment *)(a1[2] + 944 * a2);
      v5 = a2 - v3;
      do
      {
        FIK::Segment::~Segment(v4, (void *)a2);
        v4 = (FIK::Segment *)(v6 + 944);
      }
      while (!__CFADD__(v5++, 1));
    }
  }
  else
  {
    FIK::IKArray<FIK::Segment>::reserve(a1, a2);
    v11 = a2 - *a1;
    if (a2 != *a1)
    {
      v12 = a1[2] + 944 * *a1;
      do
      {
        *(_QWORD *)v12 = &off_24CA6C118;
        IKString::IKString((IKString *)(v12 + 8), (const IKString *)(a3 + 8));
        *(_QWORD *)(v12 + 32) = *(_QWORD *)(a3 + 32);
        FIK::IKArray<FIK::Task *>::IKArray((_QWORD *)(v12 + 40), (_QWORD *)(a3 + 40));
        *(_OWORD *)(v12 + 72) = *(_OWORD *)(a3 + 72);
        *(_OWORD *)(v12 + 96) = *(_OWORD *)(a3 + 96);
        v13 = *(_OWORD *)(a3 + 192);
        v15 = *(_OWORD *)(a3 + 144);
        v14 = *(_OWORD *)(a3 + 160);
        *(_OWORD *)(v12 + 176) = *(_OWORD *)(a3 + 176);
        *(_OWORD *)(v12 + 192) = v13;
        *(_OWORD *)(v12 + 144) = v15;
        *(_OWORD *)(v12 + 160) = v14;
        v16 = *(_OWORD *)(a3 + 128);
        *(_OWORD *)(v12 + 112) = *(_OWORD *)(a3 + 112);
        *(_OWORD *)(v12 + 128) = v16;
        *(_OWORD *)(v12 + 208) = *(_OWORD *)(a3 + 208);
        *(_OWORD *)(v12 + 224) = *(_OWORD *)(a3 + 224);
        *(_OWORD *)(v12 + 240) = *(_OWORD *)(a3 + 240);
        *(_OWORD *)(v12 + 256) = *(_OWORD *)(a3 + 256);
        v17 = *(_OWORD *)(a3 + 272);
        v18 = *(_OWORD *)(a3 + 304);
        *(_OWORD *)(v12 + 288) = *(_OWORD *)(a3 + 288);
        *(_OWORD *)(v12 + 304) = v18;
        *(_OWORD *)(v12 + 272) = v17;
        for (i = 320; i != 368; i += 16)
          *(_OWORD *)(v12 + i) = *(_OWORD *)(a3 + i);
        *(_OWORD *)(v12 + 368) = *(_OWORD *)(a3 + 368);
        *(_OWORD *)(v12 + 384) = *(_OWORD *)(a3 + 384);
        *(_OWORD *)(v12 + 400) = *(_OWORD *)(a3 + 400);
        *(_OWORD *)(v12 + 416) = *(_OWORD *)(a3 + 416);
        *(_OWORD *)(v12 + 432) = *(_OWORD *)(a3 + 432);
        *(_OWORD *)(v12 + 448) = *(_OWORD *)(a3 + 448);
        v20 = *(_OWORD *)(a3 + 464);
        v21 = *(_OWORD *)(a3 + 496);
        *(_OWORD *)(v12 + 480) = *(_OWORD *)(a3 + 480);
        *(_OWORD *)(v12 + 496) = v21;
        *(_OWORD *)(v12 + 464) = v20;
        v22 = *(_OWORD *)(a3 + 512);
        v23 = *(_OWORD *)(a3 + 528);
        v24 = *(_OWORD *)(a3 + 560);
        *(_OWORD *)(v12 + 544) = *(_OWORD *)(a3 + 544);
        *(_OWORD *)(v12 + 560) = v24;
        *(_OWORD *)(v12 + 512) = v22;
        *(_OWORD *)(v12 + 528) = v23;
        *(_OWORD *)(v12 + 576) = *(_OWORD *)(a3 + 576);
        *(_OWORD *)(v12 + 592) = *(_OWORD *)(a3 + 592);
        v25 = *(_OWORD *)(a3 + 608);
        v26 = *(_OWORD *)(a3 + 640);
        *(_OWORD *)(v12 + 624) = *(_OWORD *)(a3 + 624);
        *(_OWORD *)(v12 + 640) = v26;
        *(_OWORD *)(v12 + 608) = v25;
        v27 = *(_OWORD *)(a3 + 656);
        v28 = *(_OWORD *)(a3 + 672);
        v29 = *(_OWORD *)(a3 + 704);
        *(_OWORD *)(v12 + 688) = *(_OWORD *)(a3 + 688);
        *(_OWORD *)(v12 + 704) = v29;
        *(_OWORD *)(v12 + 656) = v27;
        *(_OWORD *)(v12 + 672) = v28;
        v30 = *(_OWORD *)(a3 + 720);
        v31 = *(_OWORD *)(a3 + 736);
        v32 = *(_OWORD *)(a3 + 768);
        *(_OWORD *)(v12 + 752) = *(_OWORD *)(a3 + 752);
        *(_OWORD *)(v12 + 768) = v32;
        *(_OWORD *)(v12 + 720) = v30;
        *(_OWORD *)(v12 + 736) = v31;
        *(_OWORD *)(v12 + 784) = *(_OWORD *)(a3 + 784);
        v33 = *(_OWORD *)(a3 + 800);
        *(_OWORD *)(v12 + 810) = *(_OWORD *)(a3 + 810);
        *(_OWORD *)(v12 + 800) = v33;
        *(_OWORD *)(v12 + 832) = *(_OWORD *)(a3 + 832);
        *(_OWORD *)(v12 + 848) = *(_OWORD *)(a3 + 848);
        *(_OWORD *)(v12 + 864) = *(_OWORD *)(a3 + 864);
        *(_OWORD *)(v12 + 880) = *(_OWORD *)(a3 + 880);
        *(_OWORD *)(v12 + 896) = *(_OWORD *)(a3 + 896);
        *(_OWORD *)(v12 + 912) = *(_OWORD *)(a3 + 912);
        *(_OWORD *)(v12 + 928) = *(_OWORD *)(a3 + 928);
        v12 += 944;
        --v11;
      }
      while (v11);
    }
  }
  *a1 = a2;
}

_QWORD *FIK::FIKRedBlackTree<IKString,FIK::Segment *>::InsertKey(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;

  v3 = a1;
  v8 = a3;
  v4 = FIK::Allocator::create<FIK::FIKRedBlackTree<IKString,FIK::Segment *>::Node,IKString,FIK::Segment *>(a1[4], a2, &v8);
  FIK::FIKRedBlackTree<IKString,FIK::Segment *>::InsertBinaryTree(v3, v4);
  FIK::FIKRedBlackTree<IKString,FIK::Segment *>::InsertFixup(v3, v4);
  v5 = v3[1];
  result = FIK::IKArray<FIK::Segment *>::reserve(++v3, v5 + 1);
  v7 = *v3;
  *(_QWORD *)(v3[2] + 8 * *v3) = v4;
  *v3 = v7 + 1;
  return result;
}

void IKString::IKString(IKString *this, const IKString *a2)
{
  uint64_t v4;
  IKString *v5;
  char *v6;
  IKString *v7;
  char *v8;

  v4 = *((_QWORD *)a2 + 2);
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = v4;
  v5 = (IKString *)*((_QWORD *)a2 + 1);
  if (v5)
    v6 = *(char **)a2;
  else
    v6 = (char *)&unk_2108059BE;
  IKString::assign(this, v6, v5);
  v7 = (IKString *)*((_QWORD *)a2 + 1);
  if (v7)
    v8 = *(char **)a2;
  else
    v8 = (char *)&unk_2108059BE;
  IKString::assign(this, v8, v7);
}

uint64_t *FIK::IKArray<unsigned int>::operator=(uint64_t *a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v6;
  __int128 v7;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  v6 = v3;
  v7 = v4;
  FIK::swap(a1, (uint64_t *)&v6);
  *(_QWORD *)&v6 = 0;
  if ((_QWORD)v7)
    (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**((_QWORD **)&v7 + 1) + 24))(*((_QWORD *)&v7 + 1), v7, 0, 8);
  return a1;
}

float FIK::Solver::setPrecision(FIK::Solver *this, float a2)
{
  float result;

  if (a2 > 0.0)
    a2 = -a2;
  result = a2 * *((float *)this + 139);
  *((float *)this + 137) = result;
  *((_BYTE *)this + 382) = 1;
  return result;
}

float FIK::Solver::setLimitsGain(FIK::Solver *this, float a2)
{
  float result;

  result = *((float *)this + 148) * a2;
  *((float *)this + 147) = result;
  return result;
}

float FIK::Solver::setRetargetingGain(FIK::Solver *this, float a2)
{
  float result;

  result = *((float *)this + 146) * a2;
  *((float *)this + 145) = result;
  return result;
}

uint64_t FIK::Solver::getZMP(FIK::Solver *this)
{
  return (uint64_t)this + 768;
}

uint64_t FIK::Solver::recalculateForces(uint64_t this, char a2)
{
  *(_BYTE *)(this + 646) = a2;
  return this;
}

void FIK::Solver::resetSolver(FIK::Solver *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  FIK::Segment *v8;
  uint64_t v9;

  if (*((_DWORD *)this + 86))
  {
    v2 = (void *)*((_QWORD *)this + 55);
    if (v2)
      bzero(v2, 4 * (*((_DWORD *)this + 85) + 3));
    v3 = (void *)*((_QWORD *)this + 62);
    if (v3)
      bzero(v3, 4 * (*((_DWORD *)this + 85) + 3));
    v4 = (void *)*((_QWORD *)this + 61);
    if (v4)
      bzero(v4, 4 * *((unsigned int *)this + 80));
    v5 = (void *)*((_QWORD *)this + 56);
    if (v5)
    {
      v6 = *((unsigned int *)this + 80);
      if ((_DWORD)v6)
        memset_pattern16(v5, &unk_210802DA0, 4 * v6);
    }
  }
  v7 = *((_QWORD *)this + 5);
  if (v7)
  {
    v8 = (FIK::Segment *)*((_QWORD *)this + 7);
    v9 = 944 * v7;
    do
    {
      FIK::Segment::resetSegment(v8);
      v8 = (FIK::Segment *)((char *)v8 + 944);
      v9 -= 944;
    }
    while (v9);
  }
}

uint64_t FIK::Solver::doneFK(FIK::Solver *this)
{
  return *((unsigned __int8 *)this + 645);
}

float32x4_t FIK::Solver::setZMP(float32x4_t *a1, float32x4_t *a2)
{
  float32x4_t v2;
  float32x4_t result;

  v2 = *a2;
  a1[48] = *a2;
  result = vnegq_f32(v2);
  a1[18] = result;
  a1[40].i8[12] = 0;
  a1[47].i64[1] = 0;
  a1[40].i8[5] = 0;
  return result;
}

double FIK::Solver::useDefaultZMP(FIK::Solver *this, int a2)
{
  double result;

  *((_BYTE *)this + 652) = a2;
  if (a2)
  {
    result = 0.0;
    *((_OWORD *)this + 48) = 0u;
    *((_OWORD *)this + 18) = 0u;
    *((_BYTE *)this + 645) = 0;
  }
  return result;
}

float FIK::Solver::getRetargetingGain(FIK::Solver *this)
{
  return *((float *)this + 145) / *((float *)this + 146);
}

float FIK::Solver::getP(FIK::Solver *this)
{
  return *((float *)this + 138);
}

uint64_t FIK::Solver::setAddErrors(uint64_t this, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(this + 653) = a2;
  v2 = *(_QWORD *)(this + 40);
  if (v2)
  {
    v3 = this;
    v4 = *(_QWORD *)(this + 56);
    v5 = 944 * v2;
    do
    {
      this = FIK::Segment::setSegAddErrors(v4, *(_BYTE *)(v3 + 653));
      v4 += 944;
      v5 -= 944;
    }
    while (v5);
  }
  return this;
}

uint64_t FIK::Solver::getBalanceTask(FIK::Solver *this)
{
  return *((_QWORD *)this + 94);
}

uint64_t FIK::Solver::enableShadowPosing(uint64_t this, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (a2)
    *(_DWORD *)(this + 580) = *(_DWORD *)(this + 584);
  *(_BYTE *)(this + 654) = a2;
  v3 = *(_QWORD *)(this + 40);
  if (v3)
  {
    v4 = *(_QWORD *)(this + 56);
    v5 = 944 * v3;
    do
    {
      this = FIK::Segment::enableShadowPosing(v4, a2);
      v4 += 944;
      v5 -= 944;
    }
    while (v5);
  }
  return this;
}

uint64_t FIK::FIKRedBlackTree<IKString,FIK::Segment *>::~FIKRedBlackTree(uint64_t a1)
{
  uint64_t v2;

  FIK::FIKRedBlackTree<IKString,FIK::Segment *>::clear(a1);
  *(_QWORD *)(a1 + 8) = 0;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32), v2, 0, 8);
  return a1;
}

uint64_t *FIK::IKArray<FIK::Segment>::~IKArray(uint64_t *a1, void *a2)
{
  uint64_t v3;
  FIK::Segment *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  if (*a1)
  {
    v4 = (FIK::Segment *)a1[2];
    do
    {
      FIK::Segment::~Segment(v4, a2);
      v4 = (FIK::Segment *)(v5 + 944);
      --v3;
    }
    while (v3);
  }
  *a1 = 0;
  v6 = a1[2];
  if (v6)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1[3] + 24))(a1[3], v6, 0, 8);
  return a1;
}

uint64_t FIK::Allocator::destroy<FIK::FIKRedBlackTree<IKString,FIK::Segment *>::Node>(uint64_t result, uint64_t a2)
{
  uint64_t v3;

  if (a2)
  {
    v3 = result;
    if (*(_QWORD *)(a2 + 8))
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(a2 + 16) + 24))(*(_QWORD *)(a2 + 16), *(_QWORD *)a2, 0, 8);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v3 + 24))(v3, a2, 0, 8);
  }
  return result;
}

uint64_t IKString::operator<(uint64_t a1, uint64_t a2)
{
  size_t v2;
  const void *v3;
  size_t v4;
  const void *v5;
  size_t v6;
  int v7;
  unsigned int v8;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
    v3 = *(const void **)a1;
  else
    v3 = &unk_2108059BE;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
    v5 = *(const void **)a2;
  else
    v5 = &unk_2108059BE;
  if (v4 >= v2)
    v6 = v2;
  else
    v6 = v4;
  v7 = memcmp(v3, v5, v6);
  if (v2 < v4)
    v8 = -1;
  else
    v8 = 1;
  if (v2 == v4)
    v8 = 0;
  if (v7)
    v8 = v7;
  return v8 >> 31;
}

_QWORD *FIK::IKArray<FIK::Task *>::IKArray(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  v4 = a2[1];
  v5 = a2[3];
  *a1 = *a2;
  a1[1] = v4;
  if (v4)
  {
    v6 = 8 * v4;
    v7 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, 8 * v4, 8);
    a1[2] = v7;
    a1[3] = v5;
    if (v6)
    {
      bzero(v7, v6);
      v7 = (_QWORD *)a1[2];
    }
  }
  else
  {
    v7 = 0;
    a1[2] = 0;
    a1[3] = v5;
  }
  v8 = *a2;
  if (*a2)
  {
    v9 = (uint64_t *)a2[2];
    do
    {
      v10 = *v9++;
      *v7++ = v10;
      --v8;
    }
    while (v8);
  }
  return a1;
}

unint64_t *FIK::IKArray<unsigned int>::resize(unint64_t *result, unint64_t a2, _DWORD *a3)
{
  unint64_t *v4;
  unint64_t v6;
  _DWORD *v7;
  unint64_t v8;

  v4 = result;
  if (*result <= a2)
  {
    result = FIK::IKArray<unsigned int>::reserve(result, a2);
    v6 = *v4;
    if (a2 != *v4)
    {
      v7 = (_DWORD *)(v4[2] + 4 * v6);
      v8 = v6 - a2;
      do
        *v7++ = *a3;
      while (!__CFADD__(v8++, 1));
    }
  }
  *v4 = a2;
  return result;
}

_QWORD *FIK::IKArray<unsigned int>::reserve(_QWORD *result, unint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;

  if (result[1] < a2)
  {
    v2 = result;
    v3 = result[3];
    v4 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v4)
    {
      v5 = (void *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)v3 + 16))(result[3], 4 * v4, 4);
      v6 = v5;
      if (4 * v4)
        bzero(v5, 4 * v4);
    }
    else
    {
      v6 = 0;
    }
    memcpy(v6, (const void *)v2[2], 4 * *v2);
    v7 = v2[2];
    result = (_QWORD *)v2[3];
    v2[1] = v4;
    v2[2] = v6;
    v2[3] = v3;
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, _QWORD, uint64_t))(*result + 24))(result, v7, 0, 8);
  }
  return result;
}

_QWORD *FIK::IKArray<unsigned int>::MemoryBlock::operator=(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = *(_OWORD *)(a2 + 1);
  *a2 = 0;
  a2[1] = 0;
  *a1 = v3;
  v6 = a1[1];
  v5 = a1[2];
  *(_OWORD *)(a1 + 1) = v4;
  if (v6)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v5 + 24))(v5, v6, 0, 8);
  return a1;
}

void FIK::IKArray<FIK::Segment>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  __n128 v8;
  FIK::Segment *v9;
  uint64_t v10;
  uint64_t v11;
  FIK::Segment *v12;
  uint64_t v13;

  if (a1[1] < a2)
  {
    v3 = a1[3];
    v4 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v4)
    {
      v5 = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v3 + 16))(a1[3], 944 * v4, 16);
      v6 = (uint64_t)v5;
      if (944 * v4)
        bzero(v5, 944 * v4);
    }
    else
    {
      v6 = 0;
    }
    v8 = FIK::IKArray<FIK::Segment>::moveRange(a1[2], *a1, v6);
    v9 = (FIK::Segment *)a1[2];
    v10 = a1[3];
    a1[1] = v4;
    a1[2] = v6;
    a1[3] = v3;
    v11 = *a1;
    if (v11)
    {
      v12 = v9;
      do
      {
        FIK::Segment::~Segment(v12, v7);
        v12 = (FIK::Segment *)(v13 + 944);
        --v11;
      }
      while (v11);
    }
    if (v9)
      (*(void (**)(uint64_t, FIK::Segment *, _QWORD, uint64_t, __n128))(*(_QWORD *)v10 + 24))(v10, v9, 0, 8, v8);
  }
}

__n128 FIK::IKArray<FIK::Segment>::moveRange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t i;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __n128 result;

  if (a2)
  {
    v4 = a2;
    do
    {
      *(_QWORD *)a3 = &off_24CA6C118;
      IKString::IKString((IKString *)(a3 + 8), (const IKString *)(a1 + 8));
      *(_QWORD *)(a3 + 32) = *(_QWORD *)(a1 + 32);
      FIK::IKArray<FIK::Task *>::IKArray((_QWORD *)(a3 + 40), (_QWORD *)(a1 + 40));
      *(_OWORD *)(a3 + 72) = *(_OWORD *)(a1 + 72);
      *(_OWORD *)(a3 + 96) = *(_OWORD *)(a1 + 96);
      v6 = *(_OWORD *)(a1 + 192);
      v8 = *(_OWORD *)(a1 + 144);
      v7 = *(_OWORD *)(a1 + 160);
      *(_OWORD *)(a3 + 176) = *(_OWORD *)(a1 + 176);
      *(_OWORD *)(a3 + 192) = v6;
      *(_OWORD *)(a3 + 144) = v8;
      *(_OWORD *)(a3 + 160) = v7;
      v9 = *(_OWORD *)(a1 + 128);
      *(_OWORD *)(a3 + 112) = *(_OWORD *)(a1 + 112);
      *(_OWORD *)(a3 + 128) = v9;
      *(_OWORD *)(a3 + 208) = *(_OWORD *)(a1 + 208);
      *(_OWORD *)(a3 + 224) = *(_OWORD *)(a1 + 224);
      *(_OWORD *)(a3 + 240) = *(_OWORD *)(a1 + 240);
      *(_OWORD *)(a3 + 256) = *(_OWORD *)(a1 + 256);
      v10 = *(_OWORD *)(a1 + 272);
      v11 = *(_OWORD *)(a1 + 304);
      *(_OWORD *)(a3 + 288) = *(_OWORD *)(a1 + 288);
      *(_OWORD *)(a3 + 304) = v11;
      *(_OWORD *)(a3 + 272) = v10;
      for (i = 320; i != 368; i += 16)
        *(_OWORD *)(a3 + i) = *(_OWORD *)(a1 + i);
      *(_OWORD *)(a3 + 368) = *(_OWORD *)(a1 + 368);
      *(_OWORD *)(a3 + 384) = *(_OWORD *)(a1 + 384);
      *(_OWORD *)(a3 + 400) = *(_OWORD *)(a1 + 400);
      *(_OWORD *)(a3 + 416) = *(_OWORD *)(a1 + 416);
      *(_OWORD *)(a3 + 432) = *(_OWORD *)(a1 + 432);
      *(_OWORD *)(a3 + 448) = *(_OWORD *)(a1 + 448);
      v13 = *(_OWORD *)(a1 + 464);
      v14 = *(_OWORD *)(a1 + 496);
      *(_OWORD *)(a3 + 480) = *(_OWORD *)(a1 + 480);
      *(_OWORD *)(a3 + 496) = v14;
      *(_OWORD *)(a3 + 464) = v13;
      v15 = *(_OWORD *)(a1 + 512);
      v16 = *(_OWORD *)(a1 + 528);
      v17 = *(_OWORD *)(a1 + 560);
      *(_OWORD *)(a3 + 544) = *(_OWORD *)(a1 + 544);
      *(_OWORD *)(a3 + 560) = v17;
      *(_OWORD *)(a3 + 512) = v15;
      *(_OWORD *)(a3 + 528) = v16;
      *(_OWORD *)(a3 + 576) = *(_OWORD *)(a1 + 576);
      *(_OWORD *)(a3 + 592) = *(_OWORD *)(a1 + 592);
      v18 = *(_OWORD *)(a1 + 608);
      v19 = *(_OWORD *)(a1 + 640);
      *(_OWORD *)(a3 + 624) = *(_OWORD *)(a1 + 624);
      *(_OWORD *)(a3 + 640) = v19;
      *(_OWORD *)(a3 + 608) = v18;
      v20 = *(_OWORD *)(a1 + 656);
      v21 = *(_OWORD *)(a1 + 672);
      v22 = *(_OWORD *)(a1 + 704);
      *(_OWORD *)(a3 + 688) = *(_OWORD *)(a1 + 688);
      *(_OWORD *)(a3 + 704) = v22;
      *(_OWORD *)(a3 + 656) = v20;
      *(_OWORD *)(a3 + 672) = v21;
      v23 = *(_OWORD *)(a1 + 720);
      v24 = *(_OWORD *)(a1 + 736);
      v25 = *(_OWORD *)(a1 + 768);
      *(_OWORD *)(a3 + 752) = *(_OWORD *)(a1 + 752);
      *(_OWORD *)(a3 + 768) = v25;
      *(_OWORD *)(a3 + 720) = v23;
      *(_OWORD *)(a3 + 736) = v24;
      *(_OWORD *)(a3 + 784) = *(_OWORD *)(a1 + 784);
      v26 = *(_OWORD *)(a1 + 800);
      *(_OWORD *)(a3 + 810) = *(_OWORD *)(a1 + 810);
      *(_OWORD *)(a3 + 800) = v26;
      *(_OWORD *)(a3 + 832) = *(_OWORD *)(a1 + 832);
      *(_OWORD *)(a3 + 848) = *(_OWORD *)(a1 + 848);
      *(_OWORD *)(a3 + 864) = *(_OWORD *)(a1 + 864);
      *(_OWORD *)(a3 + 880) = *(_OWORD *)(a1 + 880);
      *(_OWORD *)(a3 + 896) = *(_OWORD *)(a1 + 896);
      *(_OWORD *)(a3 + 912) = *(_OWORD *)(a1 + 912);
      result = *(__n128 *)(a1 + 928);
      *(__n128 *)(a3 + 928) = result;
      a3 += 944;
      a1 += 944;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t FIK::Allocator::create<FIK::FIKRedBlackTree<IKString,FIK::Segment *>::Node,IKString,FIK::Segment *>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v8[2];
  uint64_t v9;

  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 64, 8);
  if (v6)
  {
    IKString::IKString(v8, a2, a2[2]);
    FIK::FIKRedBlackTree<IKString,FIK::Segment *>::Node::Node(v6, v8, *a3, a1);
    if (v8[1])
      (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v9 + 24))(v9, v8[0], 0, 8);
  }
  return v6;
}

uint64_t *IKString::IKString(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  IKString *v8;
  char *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *a2;
  v6 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  *a1 = v5;
  a1[1] = v6;
  v7 = a2[2];
  a1[2] = v7;
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 32))(v7, a3) & 1) == 0)
  {
    v11 = 0;
    v12 = 0;
    v13 = a3;
    v8 = (IKString *)a1[1];
    if (v8)
      v9 = (char *)*a1;
    else
      v9 = (char *)&unk_2108059BE;
    IKString::assign(&v11, v9, v8);
    IKString::operator=(a1, (uint64_t)&v11);
    if (v12)
      (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v13 + 24))(v13, v11, 0, 8);
  }
  return a1;
}

uint64_t *IKString::operator=(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  uint64_t v8;

  IKString::IKString(&v7, a2, *(_QWORD *)(a2 + 16));
  v3 = *a1;
  v4 = a1[1];
  *(_OWORD *)a1 = v7;
  *(_QWORD *)&v7 = v3;
  *((_QWORD *)&v7 + 1) = v4;
  v5 = a1[2];
  a1[2] = v8;
  v8 = v5;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  return a1;
}

uint64_t FIK::FIKRedBlackTree<IKString,FIK::Segment *>::Node::Node(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  void (***v8)(FIK::CrtAllocator *__hidden);
  uint64_t v10[2];
  uint64_t v11;

  v8 = FIK::defaultAllocator((FIK *)a1);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v8;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  IKString::IKString(v10, a2, a4);
  IKString::operator=((uint64_t *)a1, (uint64_t)v10);
  if (v10[1])
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v11 + 24))(v11, v10[0], 0, 8);
  *(_QWORD *)(a1 + 24) = a3;
  return a1;
}

uint64_t *FIK::FIKRedBlackTree<IKString,FIK::Segment *>::InsertBinaryTree(uint64_t *result, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = result;
  v4 = *result;
  *(_QWORD *)(a2 + 56) = 0;
  if (v4)
  {
    do
    {
      *(_QWORD *)(a2 + 56) = v4;
      result = (uint64_t *)IKString::operator<(a2, v4);
      if ((_DWORD)result)
        v5 = 40;
      else
        v5 = 48;
      v4 = *(_QWORD *)(v4 + v5);
    }
    while (v4);
    v6 = *(_QWORD *)(a2 + 56);
    if (v6)
    {
      result = (uint64_t *)IKString::operator<(a2, *(_QWORD *)(a2 + 56));
      if ((_DWORD)result)
        v3 = (uint64_t *)(v6 + 40);
      else
        v3 = (uint64_t *)(v6 + 48);
    }
  }
  *v3 = a2;
  return result;
}

uint64_t *FIK::FIKRedBlackTree<IKString,FIK::Segment *>::InsertFixup(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;

  v2 = a2;
  v3 = *result;
  if (*result == a2)
  {
LABEL_35:
    v3 = v2;
  }
  else
  {
    v4 = (uint64_t *)(a2 + 56);
    v5 = *(_QWORD *)(a2 + 56);
    v6 = (_DWORD *)(v5 + 32);
    if (!*(_DWORD *)(v5 + 32))
    {
      v7 = result;
      do
      {
        v8 = *(_QWORD *)(v5 + 56);
        v9 = *(_QWORD *)(v8 + 40);
        if (v5 == v9)
        {
          v11 = *(_QWORD *)(v8 + 48);
          if (!v11 || *(_DWORD *)(v11 + 32))
          {
            v12 = *(_QWORD *)(v5 + 48);
            if (v2 == v12)
            {
              result = FIK::FIKRedBlackTree<IKString,FIK::Segment *>::RotateLeft(v7, v5);
              v14 = *(_QWORD *)(v5 + 56);
              v8 = *(_QWORD *)(v14 + 56);
              v13 = *(_QWORD *)(v8 + 40);
              v12 = *(_QWORD *)(v13 + 48);
              v2 = v5;
            }
            else
            {
              v13 = v5;
              v14 = v5;
            }
            *(_DWORD *)(v14 + 32) = 1;
            *(_DWORD *)(v8 + 32) = 0;
            *(_QWORD *)(v8 + 40) = v12;
            if (v12)
              *(_QWORD *)(v12 + 56) = v8;
            *(_QWORD *)(v13 + 56) = *(_QWORD *)(v8 + 56);
            v20 = *(_QWORD *)(v8 + 56);
            v21 = v7;
            if (v20)
            {
              v23 = *(_QWORD *)(v20 + 48);
              v22 = (uint64_t *)(v20 + 48);
              if (v23 == v8)
                v21 = v22;
              else
                v21 = v22 - 1;
            }
            *v21 = v13;
            *(_QWORD *)(v13 + 48) = v8;
            *(_QWORD *)(v8 + 56) = v13;
            goto LABEL_32;
          }
          *v6 = 1;
          *(_DWORD *)(v11 + 32) = 1;
        }
        else
        {
          if (!v9 || *(_DWORD *)(v9 + 32))
          {
            if (v2 == *(_QWORD *)(v5 + 40))
            {
              v15 = *(_QWORD *)(v2 + 48);
              *(_QWORD *)(v5 + 40) = v15;
              if (v15)
              {
                *(_QWORD *)(v15 + 56) = v5;
                v8 = *(_QWORD *)(v5 + 56);
              }
              *v4 = v8;
              v16 = *(_QWORD *)(v5 + 56);
              v17 = v7;
              if (v16)
              {
                v19 = *(_QWORD *)(v16 + 48);
                v18 = (uint64_t *)(v16 + 48);
                if (v19 == v5)
                  v17 = v18;
                else
                  v17 = v18 - 1;
              }
              *v17 = v2;
              *(_QWORD *)(v2 + 48) = v5;
              *(_QWORD *)(v5 + 56) = v2;
              v8 = *v4;
              v10 = v2;
              v2 = v5;
            }
            else
            {
              v10 = v5;
            }
            *(_DWORD *)(v10 + 32) = 1;
            *(_DWORD *)(v8 + 32) = 0;
            result = FIK::FIKRedBlackTree<IKString,FIK::Segment *>::RotateLeft(v7, v8);
            goto LABEL_32;
          }
          *v6 = 1;
          *(_DWORD *)(v9 + 32) = 1;
        }
        v2 = v8;
        *(_DWORD *)(v8 + 32) = 0;
LABEL_32:
        v3 = *v7;
        if (v2 == *v7)
          goto LABEL_35;
        v4 = (uint64_t *)(v2 + 56);
        v5 = *(_QWORD *)(v2 + 56);
        v6 = (_DWORD *)(v5 + 32);
      }
      while (!*(_DWORD *)(v5 + 32));
    }
  }
  *(_DWORD *)(v3 + 32) = 1;
  return result;
}

_QWORD *FIK::FIKRedBlackTree<IKString,FIK::Segment *>::RotateLeft(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  if (a2)
  {
    v2 = *(_QWORD *)(a2 + 48);
    v3 = *(_QWORD *)(v2 + 40);
    *(_QWORD *)(a2 + 48) = v3;
    if (v3)
      *(_QWORD *)(v3 + 56) = a2;
    *(_QWORD *)(v2 + 56) = *(_QWORD *)(a2 + 56);
    v4 = *(_QWORD *)(a2 + 56);
    if (v4)
    {
      v6 = *(_QWORD *)(v4 + 40);
      v5 = (_QWORD *)(v4 + 40);
      if (v6 == a2)
        result = v5;
      else
        result = v5 + 1;
    }
    *result = v2;
    *(_QWORD *)(v2 + 40) = a2;
    *(_QWORD *)(a2 + 56) = v2;
  }
  return result;
}

uint64_t FIK::swap(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  __int128 v8;

  v3 = *a1;
  *a1 = *a2;
  *a2 = v3;
  v5 = a1[1];
  v4 = a1 + 1;
  v8 = *(_OWORD *)(v4 + 1);
  *v4 = 0;
  v4[1] = 0;
  FIK::IKArray<unsigned int>::MemoryBlock::operator=(v4, a2 + 1);
  a2[1] = v5;
  v7 = a2[2];
  result = a2[3];
  *((_OWORD *)a2 + 1) = v8;
  if (v7)
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)result + 24))(result, v7, 0, 8);
  return result;
}

float FIK::paramOfPointOnCurveAtDistanceFromReferencePoint(void (***a1)(float32x4_t *__return_ptr, _QWORD, float), float32x4_t *a2, int *a3, float a4, float a5, float a6, float a7)
{
  float v7;
  float v8;
  float v11;
  char v15;
  char v16;
  uint64_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float v20;
  int v21;
  float32x4_t v23;

  v7 = a5;
  *a3 = 3;
  if (a5 > a6)
    return a5;
  v11 = a6;
  v15 = 0;
  v16 = 0;
  v17 = 25;
  do
  {
    v8 = (float)(v7 + v11) * 0.5;
    (**a1)(&v23, a1, v8);
    v18 = vsubq_f32(*a2, v23);
    v19 = vmulq_f32(v18, v18);
    v20 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2), vaddq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 1))).f32[0]);
    if (vabds_f32(v20, a4) <= a7)
    {
      *a3 = 0;
      return v8;
    }
    if (v20 >= a4)
      v11 = (float)(v7 + v11) * 0.5;
    else
      v7 = (float)(v7 + v11) * 0.5;
    v16 |= v20 < a4;
    v15 |= v20 >= a4;
    --v17;
  }
  while (v17);
  if (v15 & 1 | ((v16 & 1) == 0))
    v21 = 1;
  else
    v21 = 2;
  *a3 = v21;
  return v8;
}

void FIK::chainOfSegmentsOnCurve(FIK *a1@<X0>, float *a2@<X1>, unint64_t a3@<X2>, int *a4@<X3>, uint64_t *a5@<X8>, float a6@<S0>, float a7@<S1>, float a8@<S2>)
{
  uint64_t *v9;
  FIK *v10;
  void (***v11)(FIK::CrtAllocator *__hidden);
  float v19;
  void (***v20)(FIK::CrtAllocator *__hidden);
  uint64_t v21;
  float v22;
  float v23;
  int v24;
  uint64_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  int v30;

  *a4 = 3;
  if (a3 > 1)
  {
    v19 = a8 / (float)(2 * a3);
    v20 = FIK::defaultAllocator(a1);
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    a5[3] = (uint64_t)v20;
    FIK::IKArray<unsigned int>::reserve(a5, a3);
    v30 = 3;
    v21 = 4 * a3;
    while (1)
    {
      v22 = *a2;
      (**(void (***)(float32x4_t *__return_ptr, FIK *, float))a1)(&v29, a1, a6);
      v23 = FIK::paramOfPointOnCurveAtDistanceFromReferencePoint((void (***)(float32x4_t *__return_ptr, _QWORD, float))a1, &v29, &v30, v22, a6, a7, v19);
      v24 = v30;
      if (v30)
        break;
      a6 = v23;
      FIK::IKArray<unsigned int>::reserve(a5, *a5 + 1);
      v25 = *a5;
      *(float *)(a5[2] + 4 * *a5) = a6;
      *a5 = v25 + 1;
      ++a2;
      v21 -= 4;
      if (!v21)
      {
        (**(void (***)(float32x4_t *__return_ptr, FIK *, float))a1)(&v29, a1, a7);
        (**(void (***)(float32x4_t *__return_ptr, FIK *, float))a1)(&v28, a1, a6);
        v26 = vsubq_f32(v29, v28);
        v27 = vmulq_f32(v26, v26);
        v24 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v27, 2), vaddq_f32(v27, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 1))).f32[0] >= (float)(a8 * a8);
        goto LABEL_9;
      }
    }
    if (v30 != 2)
      v24 = 3;
LABEL_9:
    *a4 = v24;
  }
  else
  {
    v9 = ikinemaLogObject();
    v10 = (FIK *)ikinemaAssertHandler(*v9, 0, (uint64_t)"chainOfSegmentsOnCurve", "(false) At least two segments expected.");
    v11 = FIK::defaultAllocator(v10);
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    a5[3] = (uint64_t)v11;
  }
}

uint64_t *FIK::IKArray<FIK::Vector>::reserve(uint64_t *result, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  __int128 *v7;
  uint64_t v8;
  _OWORD *v9;
  __int128 v10;

  if (result[1] < a2)
  {
    v2 = result;
    v3 = result[3];
    v4 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v4)
    {
      v5 = (_OWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v3 + 16))(result[3], 16 * v4, 16);
      v6 = v5;
      if (16 * v4)
        bzero(v5, 16 * v4);
    }
    else
    {
      v6 = 0;
    }
    v7 = (__int128 *)v2[2];
    v8 = *v2;
    if (*v2)
    {
      v9 = v6;
      do
      {
        v10 = *v7++;
        *v9++ = v10;
        --v8;
      }
      while (v8);
      v7 = (__int128 *)v2[2];
    }
    result = (uint64_t *)v2[3];
    v2[1] = v4;
    v2[2] = (uint64_t)v6;
    v2[3] = v3;
    if (v7)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, __int128 *, _QWORD, uint64_t))(*result + 24))(result, v7, 0, 8);
  }
  return result;
}

void FIK::scaleChainToFitCurve(float32x4_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int *a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X8>, float a8@<S0>, float a9@<S1>)
{
  float32x4_t v9;
  NSObject *v11;
  const char *v12;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  uint64_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float v26;
  float v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float v41;
  float v42;
  float32x4_t v43;
  char v44;
  float32x4_t v45;
  float32x4_t v46;
  float v47;
  char v48;
  float v49;
  float v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  int32x2_t v55;
  float32x4_t v56;
  int32x4_t v57;
  float32x4_t v58;
  int8x16_t v59;
  float32x2_t v60;
  unsigned __int32 v61;
  float32x2_t v62;
  float32x2_t v63;
  float32x4_t v64;
  float v65;
  float v66;
  float v67;
  float32x2_t v68;
  float32x2_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float v73;
  float32x4_t v74;
  float v75;
  __float2 v76;
  float32x4_t v77;
  float32x4_t v78;
  int32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  uint64_t *v83;
  unint64_t v84;
  char v85;
  char v86;
  double v87;
  float v88;
  float v89;
  float v90;
  float v91;
  void (***v92)(FIK::CrtAllocator *__hidden);
  float *v93;
  unint64_t v94;
  uint64_t v95;
  float *v96;
  void (***v97)(FIK::CrtAllocator *__hidden);
  float *v98;
  uint64_t v99;
  float v100;
  uint64_t v101;
  float v102;
  char v103;
  uint64_t v104;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  uint64_t v115;
  uint64_t v116;
  __int128 v117;
  uint64_t v118;
  float *v119;
  uint64_t v120;
  int v121;
  unint64_t v122;
  float *v123;
  uint64_t v124;
  float32x4_t v125[9];
  _OWORD v126[3];

  if (a6 <= 1)
  {
    v11 = *ikinemaLogObject();
    v12 = "(false) At least two segments expected.";
LABEL_5:
    ikinemaAssertHandler(v11, 0, (uint64_t)"scaleChainToFitCurve", v12);
    goto LABEL_6;
  }
  v16 = a1[1];
  v17 = vsubq_f32(*a1, v16);
  v18 = vmulq_f32(v17, v17);
  if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 2), vaddq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1))).f32[0] < (float)(a9 * a9))
  {
    v11 = *ikinemaLogObject();
    v12 = "(false) Start and end point must not coincide.";
    goto LABEL_5;
  }
  v23 = 0;
  v24 = vsubq_f32(v16, *a1);
  v25 = vmulq_f32(v24, v24);
  v26 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), vaddq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1))).f32[0]);
  if (v26 == 0.0)
    v27 = 0.0;
  else
    v27 = 1.0 / v26;
  v28 = vmulq_n_f32(v24, v27);
  v29 = v28;
  v29.i32[3] = 0;
  v30 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v28, (int32x4_t)v28), (int8x16_t)v28, 0xCuLL);
  v31 = (int32x4_t)vmlaq_f32(vmulq_f32(v30, (float32x4_t)xmmword_210802BB0), (float32x4_t)xmmword_210802BC0, v28);
  v32 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v31, v31), (int8x16_t)v31, 0xCuLL);
  v32.i32[3] = 0;
  v33 = vmulq_f32(v32, v32);
  memset(v126, 0, 32);
  v34 = vaddq_f32(v33, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.f32, 1));
  v35 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v33, 2);
  v36 = sqrtf(vaddq_f32(v35, v34).f32[0]);
  v35.f32[0] = fabsf(v36);
  v9.i32[0] = 814313567;
  v109 = v30;
  v37 = vmlaq_f32(vmulq_f32(v30, (float32x4_t)xmmword_210802BD0), (float32x4_t)xmmword_210802BE0, v28);
  v38 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v9, v35), 0), vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v37, (int32x4_t)v37), (int8x16_t)v37, 0xCuLL), (int8x16_t)v32);
  v39 = vmulq_f32(v37, v37);
  v108 = v28;
  v40 = vnegq_f32(v28);
  v41 = sqrtf(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v39, 2), v39)).f32[0]);
  if (v35.f32[0] < 0.000000001)
    v36 = v41;
  if (v36 == 0.0)
    v42 = 0.0;
  else
    v42 = 1.0 / v36;
  v43 = vmulq_n_f32(v38, v42);
  v43.i32[3] = 0;
  v106 = v40;
  v107 = v43;
  v44 = 1;
  v110 = v29;
  while (1)
  {
    v45 = *(float32x4_t *)(a2 + 16 * v23);
    v46 = vmulq_f32(v45, v45);
    v47 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v46, 2), vaddq_f32(v46, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v46.f32, 1))).f32[0];
    if (v47 < 0.00000001)
      break;
    v48 = v44;
    v49 = sqrtf(v47);
    if (v49 == 0.0)
      v50 = 0.0;
    else
      v50 = 1.0 / v49;
    v51 = vmulq_n_f32(v45, v50);
    v126[v23] = v51;
    v52 = vsubq_f32(v29, v51);
    v53 = vmulq_f32(v52, v52);
    if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v53, 2), vaddq_f32(v53, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v53.f32, 1))).f32[0] >= 0.000025)
    {
      v54 = vmulq_f32(v29, v51);
      v55 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v54, 2), vaddq_f32(v54, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v54.f32, 1))).u64[0];
      if (*(float *)v55.i32 >= 1.0)
      {
        v56 = (float32x4_t)xmmword_210802BA0;
      }
      else
      {
        v56 = v107;
        if (*(float *)v55.i32 >= -0.999999)
        {
          *(float *)v55.i32 = sqrtf((float)(*(float *)v55.i32 + 1.0) + (float)(*(float *)v55.i32 + 1.0));
          v57 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v51, (int32x4_t)v51), (int8x16_t)v51, 0xCuLL), v106), v51, v109);
          v58 = vdivq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v57, v57), (int8x16_t)v57, 0xCuLL), (float32x4_t)vdupq_lane_s32(v55, 0));
          v58.f32[3] = *(float *)v55.i32 * 0.5;
          v59 = (int8x16_t)vmulq_f32(v58, v58);
          v60 = vadd_f32(*(float32x2_t *)v59.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v59, v59, 8uLL));
          v56 = (float32x4_t)xmmword_210802BA0;
          if (vaddv_f32(v60) != 0.0)
          {
            v61 = vadd_f32(v60, (float32x2_t)vdup_lane_s32((int32x2_t)v60, 1)).u32[0];
            v62 = vrsqrte_f32((float32x2_t)v61);
            v63 = vmul_f32(v62, vrsqrts_f32((float32x2_t)v61, vmul_f32(v62, v62)));
            v56 = vmulq_n_f32(v58, vmul_f32(v63, vrsqrts_f32((float32x2_t)v61, vmul_f32(v63, v63))).f32[0]);
          }
        }
      }
      v64 = vmulq_f32(v56, v56);
      LODWORD(v111) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v64, 2), vaddq_f32(v64, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v64.f32, 1))).u32[0];
      v112 = v56;
      v65 = atan2f(sqrtf(v111), v56.f32[3]);
      v66 = v65 + v65;
      v67 = *(float *)(a4 + 4 * v23);
      v29 = v110;
      if (v66 > v67)
      {
        v68 = vrsqrte_f32((float32x2_t)LODWORD(v111));
        v69 = vmul_f32(v68, vrsqrts_f32((float32x2_t)LODWORD(v111), vmul_f32(v68, v68)));
        v70 = vmulq_n_f32(v112, vmul_f32(v69, vrsqrts_f32((float32x2_t)LODWORD(v111), vmul_f32(v69, v69))).f32[0]);
        v71 = v70;
        v71.i32[3] = 0;
        v72 = vmulq_f32(v71, v71);
        LODWORD(v73) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v72, 2), vaddq_f32(v72, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v72.f32, 1))).u32[0];
        if (fabsf(v73) >= 0.000000001)
        {
          v75 = sqrtf(v73);
          v113 = v70;
          v76 = __sincosf_stret(v67 * 0.5);
          v29 = v110;
          v74 = vmulq_n_f32(v113, v76.__sinval / v75);
          v74.i32[3] = LODWORD(v76.__cosval);
        }
        else
        {
          v74 = (float32x4_t)xmmword_210802BA0;
        }
        v77 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v74, (int32x4_t)v74), (int8x16_t)v74, 0xCuLL);
        v78 = vnegq_f32(v74);
        v79 = (int32x4_t)vmlaq_f32(vmulq_f32(v109, v78), v108, v77);
        v80 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v79, v79), (int8x16_t)v79, 0xCuLL);
        v81 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v80, (int32x4_t)v80), (int8x16_t)v80, 0xCuLL), v78), v80, v77);
        v82 = vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v81, (int32x4_t)v81), (int8x16_t)v81, 0xCuLL), v80, v74, 3);
        v81.i64[0] = 0x4000000040000000;
        v81.i64[1] = 0x4000000040000000;
        v126[v23] = vmlaq_f32(v108, v81, v82);
      }
    }
    v44 = 0;
    v23 = 1;
    if ((v48 & 1) == 0)
    {
      v83 = (uint64_t *)FIK::CubicBezierCurve::CubicBezierCurve(v125, a1, v126, a3);
      v84 = 0;
      v85 = 0;
      v86 = 0;
      v87 = 1.0 / a8;
      v89 = 2.0;
      v90 = 0.5;
      while (2)
      {
        v91 = sqrtf(v89 * v90);
        v92 = FIK::defaultAllocator((FIK *)v83);
        FIK::IKArray<float>::IKArray<float,void>(&v122, a5, a6, (uint64_t)v92);
        v93 = v123;
        v94 = v122;
        if (v122)
        {
          v95 = 4 * v122;
          v96 = v123;
          do
          {
            *v96 = v91 * *v96;
            ++v96;
            v95 -= 4;
          }
          while (v95);
        }
        v121 = 3;
        FIK::chainOfSegmentsOnCurve((FIK *)v125, v93, v94, &v121, &v118, 0.0, 1.0, a9);
        switch(v121)
        {
          case 0:
            v97 = FIK::defaultAllocator((FIK *)v83);
            v115 = 0;
            v116 = 0;
            *(_QWORD *)&v117 = 0;
            *((_QWORD *)&v117 + 1) = v97;
            v83 = FIK::IKArray<FIK::Vector>::reserve(&v115, a6);
            if (v118)
            {
              v98 = v119;
              v99 = 4 * v118;
              do
              {
                v100 = *v98++;
                FIK::CubicBezierCurve::positionAtParam(v125, v100, &v114);
                v83 = FIK::IKArray<FIK::Vector>::reserve(&v115, v115 + 1);
                *(float32x4_t *)(v117 + 16 * v115) = v114;
                v101 = ++v115;
                v99 -= 4;
              }
              while (v99);
            }
            else
            {
              v101 = v115;
            }
            v103 = 0;
            v104 = v116;
            *(_QWORD *)a7 = v101;
            *(_QWORD *)(a7 + 8) = v104;
            *(_OWORD *)(a7 + 16) = v117;
            *(_BYTE *)(a7 + 32) = 1;
            goto LABEL_56;
          case 1:
            v102 = v89 + v89;
            if (v86 & 1 | (v84 < 2))
              v102 = v89;
            if (v102 <= a8)
              v89 = v102;
            else
              v89 = a8;
            v85 = 1;
            v90 = v91;
            goto LABEL_53;
          case 2:
            if (v85 & 1 | (v84 < 2) || (v90 = v90 * 0.5, v85 = 0, v87 <= v90))
            {
              v86 = 1;
              v89 = v91;
            }
            else
            {
              v86 = 1;
              v89 = v91;
              v88 = v87;
              v90 = v88;
            }
            goto LABEL_53;
          case 3:
            v103 = 0;
            *(_BYTE *)a7 = 0;
            *(_BYTE *)(a7 + 32) = 0;
            goto LABEL_56;
          default:
LABEL_53:
            v103 = 1;
LABEL_56:
            v118 = 0;
            if (v119)
              v83 = (uint64_t *)(*(uint64_t (**)(uint64_t, float *, _QWORD, uint64_t))(*(_QWORD *)v120 + 24))(v120, v119, 0, 8);
            v122 = 0;
            if (v123)
              v83 = (uint64_t *)(*(uint64_t (**)(uint64_t, float *, _QWORD, uint64_t))(*(_QWORD *)v124 + 24))(v124, v123, 0, 8);
            if ((v103 & 1) == 0)
              return;
            if (++v84 == 40)
              goto LABEL_6;
            continue;
        }
      }
    }
  }
LABEL_6:
  *(_BYTE *)a7 = 0;
  *(_BYTE *)(a7 + 32) = 0;
}

void FIK::dbgPointsToAcadPolylineString(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, std::string *a5@<X8>)
{
  float *v10;
  float *v11;
  void **v12;
  std::string::size_type v13;
  char *v14;
  std::string::size_type v15;
  void *__p[2];
  unsigned __int8 v17;
  char __str[8];
  std::string::size_type v19;
  unsigned __int8 v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:nn180100]<0>(a5, "(command \"pline\"");
  if (a2)
  {
    v10 = (float *)(a1 + 4 * a4);
    v11 = (float *)(a1 + 4 * a3);
    do
    {
      snprintf(__str, 0x3E8uLL, " \"%.3f,%.3f\"", *v11, *v10);
      std::string::basic_string[abi:nn180100]<0>(__p, __str);
      if ((v17 & 0x80u) == 0)
        v12 = __p;
      else
        v12 = (void **)__p[0];
      if ((v17 & 0x80u) == 0)
        v13 = v17;
      else
        v13 = (std::string::size_type)__p[1];
      std::string::append(a5, (const std::string::value_type *)v12, v13);
      if ((char)v17 < 0)
        operator delete(__p[0]);
      v10 += 4;
      v11 += 4;
      --a2;
    }
    while (a2);
  }
  std::string::basic_string[abi:nn180100]<0>(__str, " \"\")");
  if ((v20 & 0x80u) == 0)
    v14 = __str;
  else
    v14 = *(char **)__str;
  if ((v20 & 0x80u) == 0)
    v15 = v20;
  else
    v15 = v19;
  std::string::append(a5, v14, v15);
  if ((char)v20 < 0)
    operator delete(*(void **)__str);
}

_QWORD *FIK::IKArray<float>::IKArray<float,void>(_QWORD *a1, int *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  size_t v9;
  _DWORD *v10;
  uint64_t v11;
  int v12;

  v8 = (a3 + 7) & 0xFFFFFFFFFFFFFFF8;
  *a1 = a3;
  a1[1] = v8;
  if (!v8)
  {
    v10 = 0;
    a1[2] = 0;
    a1[3] = a4;
    if (!a3)
      return a1;
    goto LABEL_7;
  }
  v9 = 4 * v8;
  v10 = (_DWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a4 + 16))(a4, 4 * v8, 4);
  a1[2] = v10;
  a1[3] = a4;
  if (v9)
  {
    bzero(v10, v9);
    v10 = (_DWORD *)a1[2];
  }
  if (a3)
  {
LABEL_7:
    v11 = 4 * a3;
    do
    {
      v12 = *a2++;
      *v10++ = v12;
      v11 -= 4;
    }
    while (v11);
  }
  return a1;
}

_QWORD *std::string::basic_string[abi:nn180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

double FIK::OrientationTask::OrientationTask(FIK::OrientationTask *this, char a2, const FIK::Segment *a3)
{
  uint64_t v3;
  double result;
  uint64_t v5;
  __int128 v6;

  *((_QWORD *)this + 34) = off_24CA69CE8;
  *(_QWORD *)this = &unk_24CA69F40;
  FIK::Task::Task((uint64_t)this, (uint64_t *)&off_24CA6A7B0, 3, a2, (uint64_t)a3);
  *(_QWORD *)v3 = &off_24CA6BB08;
  *(_QWORD *)(v3 + 264) = 0;
  *(_QWORD *)(v3 + 272) = &off_24CA6BE08;
  *(_BYTE *)(v3 + 168) = 0;
  *(_QWORD *)(v3 + 176) = 0;
  *(_QWORD *)(v3 + 184) = 0;
  result = 0.0;
  *(_QWORD *)(v3 + 256) = 0;
  v5 = MEMORY[0x24BDAEDF8];
  v6 = *(_OWORD *)(MEMORY[0x24BDAEDF8] + 16);
  *(_OWORD *)(v3 + 192) = *MEMORY[0x24BDAEDF8];
  *(_OWORD *)(v3 + 208) = v6;
  *(_OWORD *)(v3 + 224) = *(_OWORD *)(v5 + 32);
  *(_OWORD *)(v3 + 240) = xmmword_210802BA0;
  return result;
}

__n128 FIK::OrientationTask::setTarget(__n128 *this, __n128 result, float a3, float a4, float a5)
{
  result.n128_f32[1] = a3;
  result.n128_u64[1] = __PAIR64__(LODWORD(a5), LODWORD(a4));
  this[15] = result;
  return result;
}

__n128 `virtual thunk to'FIK::OrientationTask::setTarget(FIK::OrientationTask *this, __n128 result, float a3, float a4, float a5)
{
  result.n128_f32[1] = a3;
  result.n128_u64[1] = __PAIR64__(LODWORD(a5), LODWORD(a4));
  *(__n128 *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 280) + 240) = result;
  return result;
}

__n128 FIK::OrientationTask::setTarget(__n128 *a1, __n128 *a2)
{
  __n128 result;

  if (!a1[10].n128_u8[8])
  {
    result = *a2;
    a1[15] = *a2;
  }
  return result;
}

__n128 `virtual thunk to'FIK::OrientationTask::setTarget(_QWORD *a1, __n128 *a2)
{
  __n128 *v2;
  __n128 result;

  v2 = (__n128 *)((char *)a1 + *(_QWORD *)(*a1 - 272));
  if (!v2[10].n128_u8[8])
  {
    result = *a2;
    v2[15] = *a2;
  }
  return result;
}

float32x4_t FIK::OrientationTask::setLookAtAxis(float32x4_t *this, float32_t a2, float32_t a3, float32_t a4)
{
  float32x4_t result;
  float32x4_t v5;
  float v6;

  this[11].f32[0] = a2;
  this[11].f32[1] = a3;
  this[11].f32[2] = a4;
  result = this[11];
  v5 = vmulq_f32(result, result);
  v6 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v5, 2), vaddq_f32(v5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 1))).f32[0]);
  if (fabsf(v6) >= 0.000000001)
  {
    result = vmulq_n_f32(result, 1.0 / v6);
    this[11] = result;
  }
  return result;
}

float32x4_t `virtual thunk to'FIK::OrientationTask::setLookAtAxis(FIK::OrientationTask *this, float a2, float a3, float a4)
{
  float *v4;
  float32x4_t result;
  float32x4_t v6;
  float v7;

  v4 = (float *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 304));
  v4[44] = a2;
  v4[45] = a3;
  v4[46] = a4;
  result = *(float32x4_t *)(v4 + 44);
  v6 = vmulq_f32(result, result);
  v7 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v6, 2), vaddq_f32(v6, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v6.f32, 1))).f32[0]);
  if (fabsf(v7) >= 0.000000001)
  {
    result = vmulq_n_f32(result, 1.0 / v7);
    *((float32x4_t *)v4 + 11) = result;
  }
  return result;
}

float32x4_t FIK::OrientationTask::setLookAtAxis(float32x4_t *a1, float32x4_t *a2)
{
  float32x4_t v2;
  float32x4_t v3;
  float v4;
  BOOL v5;
  float v6;
  float32x4_t result;

  v2 = *a2;
  v3 = vmulq_f32(v2, v2);
  v3.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v3, 2), vaddq_f32(v3, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v3.f32, 1))).f32[0]);
  v4 = 1.0 / v3.f32[0];
  v5 = v3.f32[0] == 0.0;
  v6 = 0.0;
  if (!v5)
    v6 = v4;
  result = vmulq_n_f32(v2, v6);
  a1[11] = result;
  return result;
}

float32x4_t `virtual thunk to'FIK::OrientationTask::setLookAtAxis(_QWORD *a1, float32x4_t *a2)
{
  float32x4_t v2;
  float32x4_t v3;
  float v4;
  BOOL v5;
  float v6;
  float32x4_t result;

  v2 = *a2;
  v3 = vmulq_f32(v2, v2);
  v3.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v3, 2), vaddq_f32(v3, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v3.f32, 1))).f32[0]);
  v4 = 1.0 / v3.f32[0];
  v5 = v3.f32[0] == 0.0;
  v6 = 0.0;
  if (!v5)
    v6 = v4;
  result = vmulq_n_f32(v2, v6);
  *(float32x4_t *)((char *)a1 + *(_QWORD *)(*a1 - 312) + 176) = result;
  return result;
}

void FIK::OrientationTask::setLookAtDirection(FIK::OrientationTask *this, float a2, float a3, float a4)
{
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float v8;
  float32x4_t v9;
  float32x4_t v10;

  *((float *)this + 64) = a2;
  *((float *)this + 65) = a3;
  *((float *)this + 66) = a4;
  if (*((_BYTE *)this + 168))
  {
    v5 = vmulq_f32(*((float32x4_t *)this + 11), *((float32x4_t *)this + 11));
    if (fabsf(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v5, 2), vaddq_f32(v5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 1))).f32[0])) >= 0.000000001&& (v6 = *((float32x4_t *)this + 16), v7 = vmulq_f32(v6, v6), v8 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1))).f32[0]), fabsf(v8) >= 0.000000001))
    {
      *((float32x4_t *)this + 16) = vmulq_n_f32(v6, 1.0 / v8);
      FIK::Segment::computeLookAtTarget(*((float32x4_t **)this + 5), (int32x4_t *)this + 11, (float32x4_t *)this + 16, &v10);
      v9 = v10;
    }
    else
    {
      v9 = *(float32x4_t *)(*((_QWORD *)this + 5) + 448);
    }
    *((float32x4_t *)this + 15) = v9;
  }
}

void `virtual thunk to'FIK::OrientationTask::setLookAtDirection(FIK::OrientationTask *this, float a2, float a3, float a4)
{
  FIK::OrientationTask::setLookAtDirection((FIK::OrientationTask *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 328)), a2, a3, a4);
}

void FIK::OrientationTask::setLookAtDirection(uint64_t a1, float32x4_t *a2)
{
  float32x4_t v2;
  float32x4_t v4;
  float v5;
  float32x4_t v6;
  float32x4_t v7;

  v2 = *a2;
  *(float32x4_t *)(a1 + 256) = *a2;
  if (*(_BYTE *)(a1 + 168))
  {
    v4 = vmulq_f32(v2, v2);
    v5 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v4, 2), vaddq_f32(v4, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v4.f32, 1))).f32[0]);
    if (fabsf(v5) >= 0.000000001)
    {
      *(float32x4_t *)(a1 + 256) = vmulq_n_f32(v2, 1.0 / v5);
      FIK::Segment::computeLookAtTarget(*(float32x4_t **)(a1 + 40), (int32x4_t *)(a1 + 176), (float32x4_t *)(a1 + 256), &v7);
      v6 = v7;
    }
    else
    {
      v6 = *(float32x4_t *)(*(_QWORD *)(a1 + 40) + 448);
    }
    *(float32x4_t *)(a1 + 240) = v6;
  }
}

void `virtual thunk to'FIK::OrientationTask::setLookAtDirection(_QWORD *a1, float32x4_t *a2)
{
  FIK::OrientationTask::setLookAtDirection((uint64_t)a1 + *(_QWORD *)(*a1 - 336), a2);
}

__n128 FIK::OrientationTask::setFKTarget(__n128 *this)
{
  __n128 result;

  result = *(__n128 *)(this[2].n128_u64[1] + 448);
  this[15] = result;
  return result;
}

uint64_t FIK::OrientationTask::setDerevativeRule(uint64_t this, int a2)
{
  BOOL v2;

  if (a2)
    v2 = *(_DWORD *)(this + 24) == 3;
  else
    v2 = 0;
  *(_BYTE *)(this + 28) = v2;
  return this;
}

void FIK::OrientationTask::computeDerivatives(float32x4_t *this, unsigned int a2)
{
  int v2;
  float32x4_t *v3;
  float32x4_t v4;
  float32x4_t v5;
  int32x4_t v6;
  int8x16_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  __int32 v17;
  uint64_t v18;
  __int32 v19;
  uint64_t v20;
  uint64_t v21;
  __int32 *v22;
  uint64_t v23;
  int v24;
  int v25;
  __int32 v26;
  unsigned int v27;
  uint64_t v28;
  unsigned __int32 v29;
  uint64_t v30;
  __int32 v31;
  unsigned __int32 v32;

  if (this[1].i8[12])
  {
    if (this[1].i8[15] && !this[1].i8[14])
    {
      v28 = this->u32[2];
      v29 = this[1].u32[2];
      if (v29)
      {
        v30 = this[7].i64[1];
        v31 = this[1].i32[2];
        v32 = this->u32[2];
        do
        {
          *(_DWORD *)(v30 + 4 * v32++) = 0;
          --v31;
        }
        while (v31);
      }
      bzero(*(void **)(this[5].i64[1] + 8 * v28), 4 * v29 * (unint64_t)a2);
    }
    else
    {
      v2 = 0;
      v3 = (float32x4_t *)this[2].i64[1];
      v4 = vmulq_f32(this[15], (float32x4_t)xmmword_210802C20);
      v5 = v3[28];
      v6 = (int32x4_t)vnegq_f32(v4);
      v7 = (int8x16_t)vtrn2q_s32((int32x4_t)v4, vtrn1q_s32((int32x4_t)v4, v6));
      v8 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v4, (int8x16_t)v6, 8uLL), *(float32x2_t *)v5.f32, 1), (float32x4_t)vextq_s8(v7, v7, 8uLL), v5.f32[0]);
      v9 = (float32x4_t)vrev64q_s32((int32x4_t)v4);
      v9.i32[0] = v6.i32[1];
      v9.i32[3] = v6.i32[2];
      v10 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v4, v5, 3), v9, v5, 2), v8);
      v11 = vmulq_laneq_f32(v10, v10, 3);
      v12 = -v11.f32[0];
      if (!this[2].i8[0])
        v12 = 0.0;
      v13 = this[7].i64[1];
      v14 = this->u32[3];
      *(float *)(v13 + 4 * this->u32[2]) = v12;
      v15 = -v11.f32[1];
      if (!this[2].i8[1])
        v15 = 0.0;
      *(float *)(v13 + 4 * v14) = v15;
      v16 = -v11.f32[2];
      if (!this[2].i8[2])
        v16 = 0.0;
      *(float *)(v13 + 4 * this[1].u32[0]) = v16;
      v17 = this[4].i32[3];
      do
      {
        if (v2 == v17)
          break;
        if (v3[50].i8[14])
        {
          v18 = 0;
          v19 = v3[32].i32[1];
          v20 = this[6].i64[0];
          v21 = this[6].i64[1];
          v22 = &v3[20].i32[2];
          v23 = this[7].i64[0];
          do
          {
            v24 = *(v22 - 2);
            v25 = *(v22 - 1);
            v26 = *v22;
            v22 += 4;
            v27 = v19 + v18;
            *(_DWORD *)(v20 + 4 * v27) = v24;
            *(_DWORD *)(v21 + 4 * v27) = v25;
            *(_DWORD *)(v23 + 4 * v27) = v26;
            ++v18;
          }
          while (v18 != 3);
        }
        v3 = (float32x4_t *)v3[2].i64[0];
        ++v2;
      }
      while (v3);
    }
  }
  else
  {
    FIK::OrientationTask::computeDerivativesCommon(this, a2);
  }
}

void FIK::OrientationTask::computeDerivativesCommon(float32x4_t *this, unsigned int a2)
{
  float32x4_t *v2;
  float32x4_t v3;
  float32x4_t v4;
  int32x4_t v5;
  int8x16_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x2_t v11;
  float32x2_t v12;
  __int32 v13;
  __int32 v14;
  uint64_t v15;
  uint64_t v16;
  __int32 v17;
  int v18;
  __int32 v19;
  uint64_t v20;
  unsigned __int32 v21;
  uint64_t v22;
  uint64_t v23;
  __int32 v24;
  uint64_t v25;
  unsigned __int32 v26;
  uint64_t v27;
  __int32 v28;
  unsigned __int32 v29;
  float32x4_t v30;
  float32x4_t v31;

  if (this[1].i8[15] && !this[1].i8[14])
  {
    v25 = this->u32[2];
    v26 = this[1].u32[2];
    if (v26)
    {
      v27 = this[7].i64[1];
      v28 = this[1].i32[2];
      v29 = this->u32[2];
      do
      {
        *(_DWORD *)(v27 + 4 * v29++) = 0;
        --v28;
      }
      while (v28);
    }
    bzero(*(void **)(this[5].i64[1] + 8 * v25), 4 * v26 * (unint64_t)a2);
  }
  else
  {
    v2 = (float32x4_t *)this[2].i64[1];
    v3 = vmulq_f32(this[15], (float32x4_t)xmmword_210802C20);
    v4 = v2[28];
    v5 = (int32x4_t)vnegq_f32(v3);
    v6 = (int8x16_t)vtrn2q_s32((int32x4_t)v3, vtrn1q_s32((int32x4_t)v3, v5));
    v7 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v3, (int8x16_t)v5, 8uLL), *(float32x2_t *)v4.f32, 1), (float32x4_t)vextq_s8(v6, v6, 8uLL), v4.f32[0]);
    v8 = (float32x4_t)vrev64q_s32((int32x4_t)v3);
    v8.i32[0] = v5.i32[1];
    v8.i32[3] = v5.i32[2];
    v9 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v3, v4, 3), v8, v4, 2), v7);
    v10 = vmulq_laneq_f32(v9, v9, 3);
    v10.f32[0] = vmlas_n_f32(v10.f32[2], v9.f32[1], v9.f32[0]);
    v8.f32[0] = vmlas_n_f32(-v10.f32[2], v9.f32[1], v9.f32[0]);
    v4.f32[0] = v8.f32[0] + v8.f32[0];
    v8.i32[0] = vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL).u32[0];
    *(float32x2_t *)v7.f32 = vmul_laneq_f32(*(float32x2_t *)v9.f32, v9, 3);
    v8.i32[1] = v9.i32[0];
    v11 = vneg_f32(*(float32x2_t *)v7.f32);
    *(float32x2_t *)v7.f32 = vmla_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v8.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v9, (int8x16_t)v9, 4uLL));
    v12 = vmla_laneq_f32(v11, (float32x2_t)vrev64_s32(*(int32x2_t *)v9.f32), v9, 2);
    *(float32x2_t *)v9.f32 = vsub_f32(vadd_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v7.f32), vadd_f32(v12, v12));
    v9.f32[2] = (float)(v10.f32[0] + v10.f32[0]) - v4.f32[0];
    v4.i64[0] = 0xBF000000BF000000;
    v4.i64[1] = 0xBF000000BF000000;
    v31 = vmulq_f32(v9, v4);
    v13 = this->i32[2];
    v14 = this[1].i32[2];
    if (!v14)
      goto LABEL_10;
    v15 = 0;
    v16 = this[7].i64[1];
    do
    {
      if (this[2].i8[v15])
        v17 = v31.i32[(int)v15];
      else
        v17 = 0;
      *(_DWORD *)(v16 + 4 * (v13 + v15++)) = v17;
    }
    while (v14 != (_DWORD)v15);
    if (v2)
    {
LABEL_10:
      v18 = 0;
      v19 = this[4].i32[3];
      do
      {
        if (v18 == v19)
          break;
        if (v2[50].i8[14])
        {
          v20 = 0;
          v21 = v2[32].u32[1];
          do
          {
            if (v2[50].i8[v20 + 8])
            {
              v30 = v2[v20 + 20];
              if (v14)
              {
                v22 = 0;
                v23 = this[5].i64[1];
                do
                {
                  if (this[2].i8[v22])
                    v24 = v30.i32[(int)v22];
                  else
                    v24 = 0;
                  *(_DWORD *)(*(_QWORD *)(v23 + 8 * (v13 + v22++)) + 4 * v21) = v24;
                }
                while (v14 != (_DWORD)v22);
              }
              ++v21;
            }
            ++v20;
          }
          while (v20 != 3);
        }
        v2 = (float32x4_t *)v2[2].i64[0];
        ++v18;
      }
      while (v2);
    }
  }
}

float32x4_t *FIK::OrientationTask::computeDeltaX(float32x4_t *this)
{
  unsigned __int32 v1;
  float32x4_t v2;
  float32x4_t v3;
  int32x4_t v4;
  int8x16_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x2_t v10;
  float32x2_t v11;
  __int32 v12;
  uint64_t v13;
  uint64_t v14;
  __int32 v15;
  __int32 v16;
  uint64_t v17;
  float32x4_t v18;

  v1 = this->u32[2];
  if (this[1].i8[13])
  {
    v2 = vmulq_f32(this[15], (float32x4_t)xmmword_210802C20);
    v3 = *(float32x4_t *)(this[2].i64[1] + 448);
    v4 = (int32x4_t)vnegq_f32(v2);
    v5 = (int8x16_t)vtrn2q_s32((int32x4_t)v2, vtrn1q_s32((int32x4_t)v2, v4));
    v6 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v2, (int8x16_t)v4, 8uLL), *(float32x2_t *)v3.f32, 1), (float32x4_t)vextq_s8(v5, v5, 8uLL), v3.f32[0]);
    v7 = (float32x4_t)vrev64q_s32((int32x4_t)v2);
    v7.i32[0] = v4.i32[1];
    v7.i32[3] = v4.i32[2];
    v8 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v2, v3, 3), v7, v3, 2), v6);
    v9 = vmulq_laneq_f32(v8, v8, 3);
    v9.f32[0] = vmlas_n_f32(v9.f32[2], v8.f32[1], v8.f32[0]);
    v7.f32[0] = vmlas_n_f32(-v9.f32[2], v8.f32[1], v8.f32[0]);
    v3.f32[0] = v7.f32[0] + v7.f32[0];
    v7.i32[0] = vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL).u32[0];
    *(float32x2_t *)v6.f32 = vmul_laneq_f32(*(float32x2_t *)v8.f32, v8, 3);
    v7.i32[1] = v8.i32[0];
    v10 = vneg_f32(*(float32x2_t *)v6.f32);
    *(float32x2_t *)v6.f32 = vmla_f32(*(float32x2_t *)v6.f32, *(float32x2_t *)v7.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v8, (int8x16_t)v8, 4uLL));
    v11 = vmla_laneq_f32(v10, (float32x2_t)vrev64_s32(*(int32x2_t *)v8.f32), v8, 2);
    *(float32x2_t *)v8.f32 = vsub_f32(vadd_f32(*(float32x2_t *)v6.f32, *(float32x2_t *)v6.f32), vadd_f32(v11, v11));
    v8.f32[2] = (float)(v9.f32[0] + v9.f32[0]) - v3.f32[0];
    v3.i64[0] = 0xBF000000BF000000;
    v3.i64[1] = 0xBF000000BF000000;
    v18 = vmulq_f32(v8, v3);
    v12 = this[1].i32[2];
    if (v12)
    {
      v13 = 0;
      v14 = this[7].i64[1];
      do
      {
        if (this[2].i8[v13])
          v15 = v18.i32[(int)v13];
        else
          v15 = 0;
        *(_DWORD *)(v14 + 4 * (v1 + v13++)) = v15;
      }
      while (v12 != (_DWORD)v13);
    }
  }
  else
  {
    v16 = this[1].i32[2];
    if (v16)
    {
      v17 = this[7].i64[1];
      do
      {
        *(_DWORD *)(v17 + 4 * v1++) = 0;
        --v16;
      }
      while (v16);
    }
  }
  return this;
}

void FIK::OrientationTask::~OrientationTask(FIK::OrientationTask *this)
{
  JUMPOUT(0x212BCAFB4);
}

uint64_t FIK::OrientationTask::Orientational(FIK::OrientationTask *this)
{
  return 1;
}

float FIK::OrientationTask::setTarget(uint64_t a1, _OWORD *a2)
{
  int32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float v5;
  float v6;
  float v7;
  float v9;
  float v10;
  float32x4_t v11;
  int32x4_t v12;
  float32x2_t v13;
  float v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float v23;
  float32_t v24;
  float32x2_t v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x2_t v28;
  float v29;
  unsigned int v30;
  float32x2_t v31;
  float32x2_t v32;
  float v33;
  float v34;
  float32x2_t v35;
  float v37;
  unsigned int v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t v42;
  float v46;
  float v47;
  uint64_t v48;
  float v50;
  float v51;
  float v52;
  uint64_t v53;
  float v54;
  float result;

  v2 = *(int32x4_t *)a2;
  v3 = *((float32x4_t *)a2 + 1);
  v4 = *((float32x4_t *)a2 + 2);
  LODWORD(v5) = HIDWORD(*((_QWORD *)a2 + 2));
  v6 = COERCE_FLOAT(*((_QWORD *)a2 + 5));
  v7 = v6 + (float)(COERCE_FLOAT(*a2) + v5);
  if (v7 >= 0.0)
  {
    v23 = sqrtf(v7 + 1.0);
    v24 = v23 + v23;
    v25 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(v23 + v23));
    v26 = vmul_f32(v25, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v23 + v23), v25));
    v27.i32[0] = vmul_f32(v26, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v23 + v23), v26)).u32[0];
    v33 = vmuls_lane_f32(v27.f32[0], (float32x2_t)*(_OWORD *)&vsubq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v3, 2), v4), 1);
    v34 = vmuls_n_f32(vsubq_f32(v4, (float32x4_t)vdupq_laneq_s32(v2, 2)).f32[0], v27.f32[0]);
    v28.i32[0] = vsub_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v2.i8, 1), *(float32x2_t *)v3.f32).u32[0];
    v28.f32[1] = v24;
    v27.i32[1] = 0.25;
    _D2 = vmul_f32(v28, v27);
  }
  else if (*(float *)v2.i32 < v5 || *(float *)v2.i32 < v6)
  {
    v9 = 1.0 - *(float *)v2.i32;
    if (v5 >= v6)
    {
      v37 = sqrtf(v5 + (float)(v9 - v6));
      *(float *)&v38 = v37 + v37;
      v39 = vrecpe_f32((float32x2_t)v38);
      v40 = vmul_f32(v39, vrecps_f32((float32x2_t)v38, v39));
      v40.i32[0] = vmul_f32(v40, vrecps_f32((float32x2_t)v38, v40)).u32[0];
      v33 = vmuls_n_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v2.i8, 1), v3).f32[0], v40.f32[0]);
      v34 = *(float *)&v38 * 0.25;
      v41 = (float32x2_t)vrev64_s32(*(int32x2_t *)v4.f32);
      v42.i32[0] = vadd_f32(v41, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v3, (int8x16_t)v3, 8uLL)).u32[0];
      v42.i32[1] = vsub_f32(v41, (float32x2_t)vdup_laneq_s32(v2, 2)).i32[1];
      _D2 = vmul_n_f32(v42, v40.f32[0]);
    }
    else
    {
      v10 = v6 + (float)(v9 - v5);
      v11 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v3, 2);
      v12 = *(int32x4_t *)a2;
      v12.i32[0] = sqrtf(v10);
      v13 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v3.f32, 0);
      LODWORD(v14) = vaddq_f32((float32x4_t)vdupq_laneq_s32(v2, 2), v4).u32[0];
      v15 = vsub_f32(*(float32x2_t *)v2.i8, v13);
      v13.i32[0] = 2.0;
      v16.i32[0] = vmul_f32(*(float32x2_t *)v12.i8, v13).u32[0];
      v16.i32[1] = v15.i32[1];
      v17 = vrecpe_f32((float32x2_t)v16.u32[0]);
      v18 = vmul_f32(v17, vrecps_f32((float32x2_t)v16.u32[0], v17));
      v18.i32[0] = vmul_f32(v18, vrecps_f32((float32x2_t)v16.u32[0], v18)).u32[0];
      v33 = vmuls_n_f32(v14, v18.f32[0]);
      v34 = vmuls_lane_f32(v18.f32[0], (float32x2_t)*(_OWORD *)&vaddq_f32(v11, v4), 1);
      __asm { FMOV            V2.2S, #0.25 }
      _D2.i32[1] = v18.i32[0];
      _D2 = vmul_f32(v16, _D2);
    }
  }
  else
  {
    v29 = sqrtf(*(float *)v2.i32 + (float)((float)(1.0 - v5) - v6));
    *(float *)&v30 = v29 + v29;
    v31 = vrecpe_f32((float32x2_t)v30);
    v32 = vmul_f32(v31, vrecps_f32((float32x2_t)v30, v31));
    v32.i32[0] = vmul_f32(v32, vrecps_f32((float32x2_t)v30, v32)).u32[0];
    v33 = *(float *)&v30 * 0.25;
    v34 = vmuls_n_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v2.i8, 1), v3).f32[0], v32.f32[0]);
    v35.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v2, (int8x16_t)v2, 8uLL), *(float32x2_t *)v4.f32).u32[0];
    v35.i32[1] = vsub_f32((float32x2_t)vdup_laneq_s32(*(int32x4_t *)&v3, 2), *(float32x2_t *)&v4).i32[1];
    _D2 = vmul_n_f32(v35, v32.f32[0]);
  }
  __asm { FMLS            S3, S2, V2.S[0] }
  _S5 = _D2.i32[1];
  __asm { FMLA            S3, S5, V2.S[1] }
  v46 = vmuls_lane_f32(_D2.f32[0], _D2, 1);
  v47 = vmlas_n_f32(-(float)(v34 * _D2.f32[1]), v33, _D2.f32[0]);
  *((float *)&_D3 + 1) = (float)(v46 + (float)(v33 * v34)) + (float)(v46 + (float)(v33 * v34));
  *(float *)&v48 = (float)-(float)(v46 - (float)(v33 * v34)) - (float)(v46 - (float)(v33 * v34));
  __asm { FMLA            S4, S5, V2.S[1] }
  v50 = vmlas_n_f32(vmuls_lane_f32(v33, _D2, 1), v34, _D2.f32[0]);
  *((float *)&v48 + 1) = _S4 - (float)(v33 * v33);
  v51 = v50 + v50;
  v52 = vmlas_n_f32(vmuls_lane_f32(v34, _D2, 1), v33, _D2.f32[0]);
  *(float *)&v53 = v52 + v52;
  v54 = vmlas_n_f32(-(float)(v33 * _D2.f32[1]), v34, _D2.f32[0]);
  *((float *)&v53 + 1) = v54 + v54;
  *(float *)(a1 + 200) = v47 + v47;
  *(_QWORD *)(a1 + 192) = _D3;
  *(float *)(a1 + 216) = v51;
  *(_QWORD *)(a1 + 208) = v48;
  result = (float)(vmlas_n_f32(vmuls_lane_f32(_D2.f32[1], _D2, 1), _D2.f32[0], _D2.f32[0]) - (float)(v33 * v33))
         - (float)(v34 * v34);
  *(float *)(a1 + 232) = result;
  *(_QWORD *)(a1 + 224) = v53;
  return result;
}

uint64_t FIK::OrientationTask::getTarget(FIK::OrientationTask *this)
{
  return (uint64_t)this + 240;
}

uint64_t FIK::OrientationTask::getLookAtAxis(FIK::OrientationTask *this)
{
  return (uint64_t)this + 176;
}

uint64_t FIK::OrientationTask::getLookAtDirection(FIK::OrientationTask *this)
{
  return (uint64_t)this + 256;
}

uint64_t FIK::OrientationTask::setLookAt(uint64_t this, char a2)
{
  *(_BYTE *)(this + 168) = a2;
  return this;
}

uint64_t FIK::OrientationTask::isLookAt(FIK::OrientationTask *this)
{
  return *((unsigned __int8 *)this + 168);
}

void `virtual thunk to'FIK::OrientationTask::~OrientationTask(FIK::OrientationTask *this)
{
  JUMPOUT(0x212BCAFB4);
}

float `virtual thunk to'FIK::OrientationTask::setTarget(_QWORD *a1, _OWORD *a2)
{
  return FIK::OrientationTask::setTarget((uint64_t)a1 + *(_QWORD *)(*a1 - 288), a2);
}

uint64_t `virtual thunk to'FIK::OrientationTask::getTarget(FIK::OrientationTask *this)
{
  return (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 296) + 240;
}

uint64_t `virtual thunk to'FIK::OrientationTask::getLookAtAxis(FIK::OrientationTask *this)
{
  return (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 320) + 176;
}

uint64_t `virtual thunk to'FIK::OrientationTask::getLookAtDirection(FIK::OrientationTask *this)
{
  return (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 344) + 256;
}

_QWORD *`virtual thunk to'FIK::OrientationTask::setLookAt(_QWORD *this, char a2)
{
  *((_BYTE *)this + *(_QWORD *)(*this - 352) + 168) = a2;
  return this;
}

uint64_t `virtual thunk to'FIK::OrientationTask::isLookAt(FIK::OrientationTask *this)
{
  return *((unsigned __int8 *)this + *(_QWORD *)(*(_QWORD *)this - 360) + 168);
}

uint64_t *ikinemaLogObject(void)
{
  unsigned __int8 v0;

  {
    ikinemaLogObject(void)::logs = (uint64_t)os_log_create("com.apple.coreik", "general");
    qword_254A70D90 = (uint64_t)os_log_create("com.apple.coreik", "solver");
    qword_254A70D98 = (uint64_t)os_log_create("com.apple.coreik", "rig");
    qword_254A70DA0 = (uint64_t)os_log_create("com.apple.coreik", "fusion");
  }
  return &ikinemaLogObject(void)::logs;
}

__n128 FIK::CubicBezierCurve::calculatePolynomialCoeffs(float32x4_t *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  float32x4_t v5;
  float v6;
  uint64_t i;
  __n128 result;
  _OWORD v9[4];

  v1 = 0;
  v2 = 0;
  memset(v9, 0, sizeof(v9));
  do
  {
    v3 = 0;
    v4 = v1;
    v5 = 0uLL;
    do
    {
      if ((((_BYTE)v2 + (_BYTE)v3) & 1) != 0)
        v6 = -1.0;
      else
        v6 = 1.0;
      v5 = vaddq_f32(v5, vmulq_n_f32(this[v3 + 1], v6 / (float)(*(int *)((char *)dword_210802E90 + v4) * dword_210802E90[v3])));
      ++v3;
      v4 -= 4;
    }
    while (v4 != -4);
    v9[v2] = vmulq_n_f32(v5, (float)(6 / dword_210802E90[3 - v2]));
    ++v2;
    v1 += 4;
  }
  while (v2 != 4);
  for (i = 0; i != 4; ++i)
  {
    result = (__n128)v9[i];
    this[i + 5] = (float32x4_t)result;
  }
  return result;
}

uint64_t FIK::CubicBezierCurve::CubicBezierCurve(uint64_t a1, float32x4_t *a2, float32x4_t *a3, uint64_t a4)
{
  float32x4_t v5;
  float32x4_t v6;
  float v7;
  float32x4_t v8;
  float32x4_t v9;
  float v10;
  BOOL v11;
  float v12;
  float32x4_t v13;
  float32x4_t v14;
  float v15;

  *(_QWORD *)a1 = &off_24CA6C038;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  v5 = vsubq_f32(*a2, a2[1]);
  v6 = vmulq_f32(v5, v5);
  v7 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v6, 2), vaddq_f32(v6, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v6.f32, 1))).f32[0]);
  *(float32x4_t *)(a1 + 16) = *a2;
  v8 = *a3;
  v9 = vmulq_f32(v8, v8);
  v9.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), vaddq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1))).f32[0]);
  v10 = 1.0 / v9.f32[0];
  v11 = v9.f32[0] == 0.0;
  v12 = 0.0;
  if (v11)
    v10 = 0.0;
  *(float32x4_t *)(a1 + 32) = vaddq_f32(*a2, vmulq_n_f32(vmulq_n_f32(vmulq_n_f32(v8, v10), COERCE_FLOAT(*(_QWORD *)a4)), v7));
  v13 = a3[1];
  v14 = vmulq_f32(v13, v13);
  v15 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 2), vaddq_f32(v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.f32, 1))).f32[0]);
  if (v15 != 0.0)
    v12 = 1.0 / v15;
  *(float32x4_t *)(a1 + 48) = vsubq_f32(a2[1], vmulq_n_f32(vmulq_n_f32(vmulq_n_f32(v13, v12), *(float *)(a4 + 4)), v7));
  *(float32x4_t *)(a1 + 64) = a2[1];
  FIK::CubicBezierCurve::calculatePolynomialCoeffs((float32x4_t *)a1);
  return a1;
}

float32x4_t *FIK::CubicBezierCurve::positionAtParam@<X0>(float32x4_t *this@<X0>, float a2@<S0>, float32x4_t *a3@<X8>)
{
  float32x4_t v3;

  v3 = vmlaq_n_f32(this[5], vmlaq_n_f32(this[6], vmlaq_n_f32(this[7], this[8], a2), a2), a2);
  v3.i32[3] = 0;
  *a3 = v3;
  return this;
}

void FIK::CubicBezierCurve::dbgPrint(FIK::CubicBezierCurve *this, float a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  float v7;
  float v8;
  float32x4_t *v9;
  float *f32;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  float32x4_t v14;
  std::string *p_p;
  std::string *v16;
  __int128 v17;
  std::string __p;
  _OWORD v19[1000];
  uint64_t v20;

  v2 = MEMORY[0x24BDAC7A8](this, a2);
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v9 = (float32x4_t *)v2;
  v20 = *MEMORY[0x24BDAC8D0];
  puts("Cubic Bezier curve:");
  puts("Control points:");
  f32 = v9[1].f32;
  do
  {
    printf(" %7.3f %7.3f %7.3f\n", *f32, f32[1], f32[2]);
    f32 += 4;
  }
  while (f32 != (float *)&v9[5]);
  puts("Points on curve:");
  bzero(v19, 0x3E80uLL);
  v12 = 0;
  if (v8 <= 0.0)
    v8 = 0.05;
  LODWORD(v11) = 0;
  do
  {
    v17 = v11;
    v13 = v12;
    v14 = vmlaq_n_f32(v9[5], vmlaq_n_f32(v9[6], vmlaq_n_f32(v9[7], v9[8], *(float *)&v11), *(float *)&v11), *(float *)&v11);
    v19[v12] = v14;
    printf(" %7.3f %7.3f %7.3f\n", v14.f32[0], v14.f32[1], v14.f32[2]);
    v11 = v17;
    ++v12;
    if (v13 > 0x3E6)
      break;
    *(float *)&v11 = v8 + *(float *)&v17;
  }
  while ((float)(v8 + *(float *)&v17) < 1.001);
  putchar(10);
  FIK::dbgPointsToAcadPolylineString((uint64_t)&v9[1], 4, v6, v4, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  puts((const char *)p_p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  FIK::dbgPointsToAcadPolylineString((uint64_t)v19, v12, v6, v4, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = &__p;
  else
    v16 = (std::string *)__p.__r_.__value_.__r.__words[0];
  puts((const char *)v16);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

float FIK::CubicBezierCurve::endParam(FIK::CubicBezierCurve *this)
{
  return 1.0;
}

float FIK::CubicBezierCurve::startParam(FIK::CubicBezierCurve *this)
{
  return 0.0;
}

__n128 FIK::CubicBezierCurve::startPoint@<Q0>(__n128 *this@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = this[1];
  *a2 = result;
  return result;
}

__n128 FIK::CubicBezierCurve::endPoint@<Q0>(__n128 *this@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = this[4];
  *a2 = result;
  return result;
}

FIK::IKSolver *FIK::IKSolver::IKSolver(FIK::IKSolver *this, FIK::Allocator *a2)
{
  FIK::Solver *v4;

  v4 = (FIK::Solver *)(*(uint64_t (**)(FIK::Allocator *, uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, 848, 16);
  if (v4)
    v4 = (FIK::Solver *)FIK::Solver::Solver(v4, this, a2);
  *(_QWORD *)this = v4;
  return this;
}

void FIK::IKSolver::~IKSolver(FIK::Solver **this)
{
  FIK::Solver *v1;
  uint64_t v2;

  v1 = *this;
  if (*this)
  {
    v2 = *((_QWORD *)v1 + 104);
    FIK::Solver::~Solver(*this);
    (*(void (**)(uint64_t, FIK::Solver *, _QWORD, uint64_t))(*(_QWORD *)v2 + 24))(v2, v1, 0, 8);
  }
}

double FIK::IKSolver::importBones(__n128 **a1, unint64_t *a2)
{
  double result;

  *(_QWORD *)&result = FIK::Solver::importBones(*a1, (const FIK::ImportBone *)a2[2], *a2).n128_u64[0];
  return result;
}

_QWORD *FIK::IKSolver::getSegment(_QWORD ***a1, _QWORD *a2)
{
  return FIK::Solver::getSegment(*a1, a2);
}

uint64_t FIK::IKSolver::getSegment(FIK::IKSolver *this, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)this + 56) + 944 * a2;
}

uint64_t FIK::IKSolver::getRootSegment(FIK::IKSolver *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 56);
}

uint64_t FIK::IKSolver::numSegments(FIK::IKSolver *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 40);
}

float32x4_t *FIK::IKSolver::addPositionTask(FIK::Solver **this, const IKString *a2)
{
  float32x4_t *v2;

  v2 = FIK::Solver::addPositionTask(*this, a2);
  if (v2)
    return v2 + 30;
  else
    return 0;
}

float32x4_t *FIK::IKSolver::addPositionTask(FIK::Solver **a1, const FIK::Segment *a2)
{
  float32x4_t *v2;

  v2 = FIK::Solver::addPositionTask(*a1, a2);
  if (v2)
    return v2 + 30;
  else
    return 0;
}

float32x4_t *FIK::IKSolver::addPositionTask(FIK::Solver **this, int a2)
{
  float32x4_t *v2;

  v2 = FIK::Solver::addPositionTask(*this, a2);
  if (v2)
    return v2 + 30;
  else
    return 0;
}

const FIK::Segment **FIK::IKSolver::addOrientationTask(FIK::Solver **a1, _QWORD *a2)
{
  const FIK::Segment **v2;

  v2 = FIK::Solver::addOrientationTask(*a1, a2);
  if (v2)
    return v2 + 34;
  else
    return 0;
}

__n128 *FIK::IKSolver::addOrientationTask(FIK::Solver **this, int a2)
{
  __n128 *v2;

  v2 = FIK::Solver::addOrientationTask(*this, a2);
  if (v2)
    return v2 + 17;
  else
    return 0;
}

uint64_t FIK::IKSolver::addBalanceTask(FIK::Solver **this, int a2, int a3, int a4)
{
  uint64_t v4;

  v4 = FIK::Solver::addBalanceTask(*this, a2, a3, a4);
  if (v4)
    return v4 + 264;
  else
    return 0;
}

FIK::Solver **FIK::IKSolver::removeTask(FIK::Solver **result, uint64_t a2)
{
  FIK::Solver *v2;
  int v3;

  if (a2)
  {
    v2 = *result;
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    return (FIK::Solver **)FIK::Solver::removeTask(v2, v3);
  }
  return result;
}

uint64_t FIK::IKSolver::solve(FIK::Solver **a1, unsigned int a2, _DWORD *a3)
{
  NSObject *v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  int v12;
  FIK::Solver *v13;
  uint64_t v14;
  __int128 v15;
  uint64_t result;
  int v17;
  const char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  *a3 = 0;
  if ((FIK::Solver::solve(*a1, a2) & 1) != 0)
    goto LABEL_15;
  v6 = ikinemaLogObject()[1];
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v17 = 136315138;
    v18 = "solve";
    _os_log_impl(&dword_21078E000, v6, OS_LOG_TYPE_DEFAULT, "%s: Solver triggered auto-tune", (uint8_t *)&v17, 0xCu);
  }
  *a3 = 1;
  v7 = FIK::Solver::getP(*a1);
  v8 = fminf(fmaxf(v7 / 40.0, 0.005), 0.1);
  FIK::Segment::setRestTransform(*((_QWORD *)*a1 + 7), (uint64_t)*a1 + 800);
  if ((float)(v7 + -0.01) > v8)
  {
    v9 = 0.01;
    v10 = v7;
    do
    {
      v11 = (float)(v9 + v10) * 0.5;
      FIK::Solver::setP((uint64_t)*a1, v11);
      FIK::Solver::resetSolver(*a1);
      v12 = FIK::Solver::solve(*a1, a2);
      if (v12)
        v9 = (float)(v9 + v10) * 0.5;
      else
        v10 = v11;
      if (v12)
        v7 = v11;
    }
    while ((float)(v10 - v9) > v8);
  }
  if (v7 > 0.001)
    FIK::Solver::setP((uint64_t)*a1, v7);
  FIK::Solver::resetSolver(*a1);
  if ((FIK::Solver::solve(*a1, a2) & 1) != 0)
  {
LABEL_15:
    v13 = *a1;
    v14 = *((_QWORD *)*a1 + 7);
    v15 = *(_OWORD *)(v14 + 240);
    *((_OWORD *)v13 + 50) = *(_OWORD *)(v14 + 96);
    *((_OWORD *)v13 + 51) = v15;
    return 1;
  }
  else
  {
    result = 0;
    *a3 = 2;
  }
  return result;
}

float FIK::IKSolver::getPGain(FIK::Solver **this)
{
  return FIK::Solver::getP(*this);
}

uint64_t FIK::IKSolver::setPGain(FIK::IKSolver *this, float a2)
{
  return FIK::Solver::setP(*(_QWORD *)this, a2);
}

void FIK::IKSolver::resetSolver(FIK::Solver **this)
{
  FIK::Solver::resetSolver(*this);
}

__n128 FIK::IKSolver::storeRootTransform(FIK::IKSolver *this)
{
  uint64_t v1;
  uint64_t v2;
  __n128 result;
  __int128 v4;

  v1 = *(_QWORD *)this;
  v2 = *(_QWORD *)(*(_QWORD *)this + 56);
  result = *(__n128 *)(v2 + 96);
  v4 = *(_OWORD *)(v2 + 240);
  *(__n128 *)(v1 + 800) = result;
  *(_OWORD *)(v1 + 816) = v4;
  return result;
}

uint64_t FIK::IKSolver::setup(FIK::Solver **this, __n128 a2)
{
  return FIK::Solver::setup(*this, a2);
}

uint64_t FIK::IKSolver::translateRoot(FIK::Solver **this, int a2)
{
  return FIK::Solver::translateRoot(*this, a2);
}

uint64_t FIK::IKSolver::setTranslationWeight(FIK::IKSolver *this, float a2)
{
  return FIK::Solver::setTranslationWeight(*(_QWORD *)this, a2);
}

float32x4_t *FIK::IKSolver::setFigureMass(float32x4_t **this, float32_t a2)
{
  return FIK::Solver::setFigureMass(*this, a2);
}

double FIK::IKSolver::setZMP(float32x4_t **a1, float32x4_t *a2)
{
  double result;

  *(_QWORD *)&result = FIK::Solver::setZMP(*a1, a2).u64[0];
  return result;
}

double FIK::IKSolver::useDefaultZMP(FIK::Solver **this, int a2)
{
  return FIK::Solver::useDefaultZMP(*this, a2);
}

float FIK::IKSolver::setPrecision(FIK::Solver **this, float a2)
{
  return FIK::Solver::setPrecision(*this, a2);
}

float FIK::IKSolver::setLimitsGain(FIK::Solver **this, float a2)
{
  return FIK::Solver::setLimitsGain(*this, a2);
}

float FIK::IKSolver::setRetargetingGain(FIK::Solver **this, float a2)
{
  return FIK::Solver::setRetargetingGain(*this, a2);
}

float FIK::IKSolver::getRetargetingGain(FIK::Solver **this)
{
  return FIK::Solver::getRetargetingGain(*this);
}

uint64_t FIK::IKSolver::enableShadowPosing(FIK::IKSolver *this, int a2)
{
  return FIK::Solver::enableShadowPosing(*(_QWORD *)this, a2);
}

uint64_t FIK::IKSolver::setMomentsWeight(FIK::IKSolver *this, float a2)
{
  return FIK::Solver::setMomentsWeight(*(_QWORD *)this, a2);
}

uint64_t FIK::IKSolver::setAddErrors(FIK::IKSolver *this, char a2)
{
  return FIK::Solver::setAddErrors(*(_QWORD *)this, a2);
}

uint64_t FIK::IKSolver::setSolutionTolerance(uint64_t this, float a2)
{
  *(float *)(*(_QWORD *)this + 544) = a2;
  return this;
}

void (***FIK::defaultAllocator(FIK *this))(FIK::CrtAllocator *__hidden this)
{
  return FIK::activeDefaultAllocator;
}

uint64_t FIK::SetMemoryRoutines(uint64_t this, unint64_t a2, void (*a3)(void *))
{
  void (***v3)(FIK::CrtAllocator *__hidden);

  if (this && a2)
  {
    v3 = (void (***)(FIK::CrtAllocator *__hidden))&FIK::customAllocator;
    qword_253ED88F0 = this;
    unk_253ED88F8 = a2;
  }
  else
  {
    if (this | a2)
      FIK::SetMemoryRoutines();
    v3 = &FIK::standardAllocator;
  }
  FIK::activeDefaultAllocator = v3;
  return this;
}

void *FIK::FIKAlloc(FIK *this)
{
  void *v2;
  void *v3;

  v2 = (void *)((uint64_t (*)(void))(*FIK::activeDefaultAllocator)[2])();
  v3 = v2;
  if (this)
    bzero(v2, (size_t)this);
  return v3;
}

uint64_t FIK::FIKFree(FIK *this, void *a2)
{
  return ((uint64_t (*)(void))(*FIK::activeDefaultAllocator)[3])();
}

void FIK::CrtAllocator::~CrtAllocator(FIK::CrtAllocator *this)
{
  JUMPOUT(0x212BCAFB4);
}

_QWORD *FIK::CrtAllocator::doAllocate(FIK::CrtAllocator *this, size_t a2, unint64_t a3)
{
  size_t v3;
  size_t v4;
  size_t v5;
  NSObject *v6;
  char *v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  NSObject *v13;
  size_t v14;
  void *__ptr;
  uint8_t buf[4];
  const char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (a3 <= 8)
    v3 = 8;
  else
    v3 = a3;
  v4 = v3 + a2;
  v5 = v3 + a2 + 8;
  if (v5 < a2)
  {
    v6 = *ikinemaLogObject();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      v17 = "doAllocate";
      _os_log_impl(&dword_21078E000, v6, OS_LOG_TYPE_DEFAULT, "%s: Overflow in allocation request", buf, 0xCu);
    }
    return 0;
  }
  v8 = (char *)malloc_type_malloc(v5, 0x1CAB8285uLL);
  if (!v8)
    return 0;
  v9 = v8;
  v14 = v4;
  __ptr = v8 + 8;
  v10 = std::align(v3, a2, &__ptr, &v14);
  v11 = v10;
  if (v10)
  {
    *(v10 - 1) = v9;
  }
  else
  {
    v13 = *ikinemaLogObject();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      v17 = "doAllocate";
      _os_log_impl(&dword_21078E000, v13, OS_LOG_TYPE_DEFAULT, "%s: Unable to align new buffer.", buf, 0xCu);
    }
    free(v9);
  }
  return v11;
}

void FIK::CrtAllocator::doDeallocate(FIK::CrtAllocator *this, void **a2)
{
  free(*(a2 - 1));
}

uint64_t FIK::CrtAllocator::doIsEqual()
{
  return 1;
}

uint64_t FIK::Allocator::doUpstream(FIK::Allocator *this)
{
  return 0;
}

void FIK::LegacyCustomAllocator::~LegacyCustomAllocator(FIK::LegacyCustomAllocator *this)
{
  JUMPOUT(0x212BCAFB4);
}

uint64_t FIK::LegacyCustomAllocator::doAllocate(uint64_t (**this)(uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  return this[1](a2, a3);
}

uint64_t FIK::LegacyCustomAllocator::doDeallocate(uint64_t (**this)(void *), void *a2)
{
  return this[2](a2);
}

BOOL FIK::Allocator::doIsEqual(FIK::Allocator *this, const FIK::Allocator *a2)
{
  return this == a2;
}

FIK::PositionTask *FIK::PositionTask::PositionTask(FIK::PositionTask *this, char a2, const FIK::Segment *a3)
{
  uint64_t v4;
  void (***v5)(FIK::CrtAllocator *__hidden);
  void (***v6)(FIK::CrtAllocator *__hidden);

  *((_QWORD *)this + 60) = off_24CA69550;
  *(_QWORD *)this = &unk_24CA69848;
  FIK::Task::Task((uint64_t)this, (uint64_t *)&off_24CA6A778, 3, a2, (uint64_t)a3);
  *(_QWORD *)v4 = &off_24CA6B340;
  *(_QWORD *)(v4 + 480) = &off_24CA6B780;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_DWORD *)(v4 + 208) = 0;
  *(_OWORD *)(v4 + 224) = 0u;
  *(_OWORD *)(v4 + 240) = 0u;
  *(_QWORD *)(v4 + 256) = 0x3F80000000000000;
  *(_QWORD *)(v4 + 264) = 0;
  *(_QWORD *)(v4 + 272) = 0;
  *(_QWORD *)(v4 + 280) = 0;
  *(_BYTE *)(v4 + 288) = 1;
  *(_DWORD *)(v4 + 289) = 0;
  *(_DWORD *)(v4 + 292) = 0;
  v5 = FIK::defaultAllocator((FIK *)v4);
  *((_QWORD *)this + 37) = 0;
  *((_QWORD *)this + 38) = 0;
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 40) = v5;
  v6 = FIK::defaultAllocator((FIK *)v5);
  *((_QWORD *)this + 42) = 0;
  *((_QWORD *)this + 43) = 0;
  *((_QWORD *)this + 44) = 0;
  *((_QWORD *)this + 45) = v6;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = xmmword_210802EF0;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 28) = xmmword_210802F00;
  *((_QWORD *)this + 58) = 0;
  *((_QWORD *)this + 59) = 0;
  *((_DWORD *)this + 82) = 1065353216;
  return this;
}

__n128 FIK::PositionTask::AdjustNormalFilter(FIK::PositionTask *this, float a2)
{
  __int128 v2;
  __n128 result;

  v2 = *((_OWORD *)this + 16);
  *((_OWORD *)this + 23) = v2;
  *((_OWORD *)this + 24) = v2;
  *((float *)this + 100) = a2;
  *((float *)this + 101) = (float)(a2 * 0.033333) / (float)(1.0 - a2);
  *((float *)this + 102) = a2;
  *((_DWORD *)this + 103) = 1106247680;
  *((_OWORD *)this + 26) = v2;
  *((_OWORD *)this + 27) = v2;
  result = *((__n128 *)this + 25);
  *((__n128 *)this + 28) = result;
  return result;
}

__n128 `virtual thunk to'FIK::PositionTask::AdjustNormalFilter(FIK::PositionTask *this, float a2)
{
  char *v2;
  __int128 v3;
  __n128 result;

  v2 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 352);
  v3 = *((_OWORD *)v2 + 16);
  *((_OWORD *)v2 + 23) = v3;
  *((_OWORD *)v2 + 24) = v3;
  *((float *)v2 + 100) = a2;
  *((float *)v2 + 101) = (float)(a2 * 0.033333) / (float)(1.0 - a2);
  *((float *)v2 + 102) = a2;
  *((_DWORD *)v2 + 103) = 1106247680;
  *((_OWORD *)v2 + 26) = v3;
  *((_OWORD *)v2 + 27) = v3;
  result = *((__n128 *)v2 + 25);
  *((__n128 *)v2 + 28) = result;
  return result;
}

void FIK::PositionTask::FindSelfCollisionPlane(float32x4_t *this)
{
  float32x4_t *v2;
  uint64_t v3;
  unsigned int v4;
  FIK::Segment *v5;
  uint64_t GlobalPos;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float v10;
  float v11;
  float v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float v17;
  float v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v22;
  float v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;

  v27 = 0u;
  v28 = 0u;
  v2 = this + 11;
  if (vabds_f32(this[29].f32[0], this[11].f32[0]) <= 0.0001 && vabds_f32(this[29].f32[1], this[11].f32[1]) <= 0.0001)
  {
    v23 = vabds_f32(this[29].f32[2], this[11].f32[2]);
    v26 = 0uLL;
    v25 = *v2;
    if (v23 <= 0.0001)
      return;
  }
  else
  {
    v26 = 0uLL;
    v25 = *v2;
  }
  if (this[21].i64[0])
  {
    v3 = 0;
    v4 = 1;
    do
    {
      v5 = *(FIK::Segment **)(this[22].i64[0] + 8 * v3);
      GlobalPos = FIK::Segment::getGlobalPos(v5);
      v7.i64[0] = *(_QWORD *)GlobalPos;
      v7.i32[2] = *(_DWORD *)(GlobalPos + 8);
      v8 = vsubq_f32(v7, v25);
      v9 = vmulq_f32(v8, v8);
      v10 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), vaddq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1))).f32[0]);
      if (v10 == 0.0)
        v11 = 0.0;
      else
        v11 = 1.0 / v10;
      v24 = vmulq_n_f32(v8, v11);
      if (FIK::Segment::RayTrace((uint64_t)v5, &v25, &v24, (uint64_t)&v28, (uint64_t)&v27))
      {
        v12 = this[25].f32[0];
        v13 = vaddq_f32(vmulq_n_f32(v27, v12), vmulq_n_f32(this[23], 1.0 - v12));
        v14 = vaddq_f32(vmulq_n_f32(this[24], 1.0 - v12), vmulq_n_f32(v13, v12));
        this[23] = v13;
        this[24] = v14;
        v15 = vsubq_f32(vmulq_n_f32(v13, this[25].f32[1] + 2.0), vmulq_n_f32(v14, this[25].f32[1] + 1.0));
        v16 = vmulq_f32(v15, v15);
        v17 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1))).f32[0]);
        if (v17 == 0.0)
          v18 = 0.0;
        else
          v18 = 1.0 / v17;
        v19 = vmulq_n_f32(v15, v18);
        v20 = vaddq_f32(v28, vmulq_n_f32(v19, this[20].f32[3]));
        this[16] = v19;
        this[17] = v20;
        FIK::PositionTask::getPlaneError((uint64_t)this, &v25, &v26);
        v25 = vsubq_f32(v25, v26);
      }
      v3 = v4;
    }
    while (this[21].i64[0] > (unint64_t)v4++);
  }
  v22 = v25;
  this[11] = v25;
  this[29] = v22;
}

void FIK::PositionTask::getPlaneError(uint64_t a1, float32x4_t *a2, float32x4_t *a3)
{
  float32x4_t v3;
  float32x4_t v4;
  float v5;
  float32x4_t v6;
  float32x4_t v7;
  float v8;
  float32x4_t v9;
  float32x4_t v10;
  int32x4_t v11;
  int32x2_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  float32x4_t v16;
  uint64_t v17;

  v3 = vsubq_f32(*a2, *(float32x4_t *)(a1 + 272));
  v4 = vmulq_f32(v3, v3);
  v5 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v4, 2), vaddq_f32(v4, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v4.f32, 1))).f32[0]);
  if (fabsf(v5) >= 0.000000001)
  {
    v6 = *(float32x4_t *)(a1 + 256);
    v7 = vmulq_f32(v6, v6);
    v8 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1))).f32[0]);
    if (fabsf(v8) >= 0.000000001)
    {
      v9 = vmulq_n_f32(v6, 1.0 / v8);
      v10 = vmulq_f32(vmulq_n_f32(v3, 1.0 / v5), v9);
      *(float32x4_t *)(a1 + 256) = v9;
      if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1))).f32[0] < 0.0)
      {
        v11 = (int32x4_t)vmulq_f32(v9, v9);
        v12 = (int32x2_t)vmul_laneq_f32(*(float32x2_t *)v9.f32, v9, 2);
        *(int32x2_t *)v13.i8 = v12;
        v13.u64[1] = (unint64_t)v12;
        v14 = vzip1q_s32(v11, v13);
        v15 = vzip2q_s32(v13, v11);
        *(int32x2_t *)v13.i8 = vdup_lane_s32(v12, 1);
        *(float32x2_t *)v9.f32 = vmul_lane_f32(*(float32x2_t *)v9.f32, *(float32x2_t *)v9.f32, 1);
        v16 = (float32x4_t)vzip1q_s32(v14, (int32x4_t)v9);
        v9.i32[3] = v12.i32[1];
        v9.i32[2] = v12.i32[1];
        *a3 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v16, v3.f32[0]), v9, *(float32x2_t *)v3.f32, 1), (float32x4_t)vzip1q_s32(v15, v13), v3, 2);
        v17 = *(_QWORD *)(a1 + 160);
        if (v17)
        {
          if (!*(_BYTE *)(v17 + 30))
          {
            FIK::OrientationTask::setLookAtDirection(*(FIK::OrientationTask **)(a1 + 160), *(float *)(a1 + 256), *(float *)(a1 + 260), *(float *)(a1 + 264));
            *(_BYTE *)(v17 + 30) = 1;
          }
        }
      }
    }
  }
}

void FIK::PositionTask::setTarget(float32x4_t *this, float32x4_t *a2)
{
  this[11] = *a2;
  if (this[18].i8[6] || this[18].i8[7])
    FIK::PositionTask::FindSelfCollisionPlane(this);
}

void `virtual thunk to'FIK::PositionTask::setTarget(_QWORD *a1, _OWORD *a2)
{
  char *v2;

  v2 = (char *)a1 + *(_QWORD *)(*a1 - 272);
  *((_OWORD *)v2 + 11) = *a2;
  if (v2[294] || v2[295])
    FIK::PositionTask::FindSelfCollisionPlane((float32x4_t *)v2);
}

void FIK::PositionTask::setTarget(float32x4_t *this, const float *a2)
{
  this[11].i64[0] = *(_QWORD *)a2;
  this[11].f32[2] = a2[2];
  if (this[18].i16[3])
    FIK::PositionTask::FindSelfCollisionPlane(this);
}

void `virtual thunk to'FIK::PositionTask::setTarget(FIK::PositionTask *this, const float *a2)
{
  FIK::PositionTask::setTarget((float32x4_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 136)), a2);
}

void FIK::PositionTask::setTarget(float32x4_t *this, float32_t a2, float32_t a3, float32_t a4)
{
  this[11].f32[0] = a2;
  this[11].f32[1] = a3;
  this[11].f32[2] = a4;
  if (this[18].i8[6] || this[18].i8[7])
    FIK::PositionTask::FindSelfCollisionPlane(this);
}

void `virtual thunk to'FIK::PositionTask::setTarget(FIK::PositionTask *this, float32_t a2, float32_t a3, float32_t a4)
{
  float32x4_t *v4;

  v4 = (float32x4_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 280));
  v4[11].f32[0] = a2;
  v4[11].f32[1] = a3;
  v4[11].f32[2] = a4;
  if (v4[18].i8[6] || v4[18].i8[7])
    FIK::PositionTask::FindSelfCollisionPlane(v4);
}

float FIK::PositionTask::setTipOffset(float32x4_t *this, float a2, float a3, float a4)
{
  float32x4_t v4;
  float32x4_t v5;
  float result;

  v4.i64[0] = __PAIR64__(LODWORD(a3), LODWORD(a2));
  v4.i64[1] = LODWORD(a4);
  this[12] = v4;
  v5 = vmulq_f32(v4, v4);
  result = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v5, 2), vaddq_f32(v5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 1))).f32[0]);
  this[13].f32[0] = result;
  return result;
}

float FIK::PositionTask::setTipOffset(float32x4_t *a1, float32x4_t *a2)
{
  float32x4_t v2;
  float32x4_t v3;
  float result;

  v2 = *a2;
  a1[12] = *a2;
  v3 = vmulq_f32(v2, v2);
  result = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v3, 2), vaddq_f32(v3, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v3.f32, 1))).f32[0]);
  a1[13].f32[0] = result;
  return result;
}

float `virtual thunk to'FIK::PositionTask::setTipOffset(FIK::PositionTask *this, float a2, float a3, float a4)
{
  float32x4_t *v4;
  float32x4_t v5;
  float32x4_t v6;
  float result;

  v4 = (float32x4_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 296));
  v5.i64[0] = __PAIR64__(LODWORD(a3), LODWORD(a2));
  v5.i64[1] = LODWORD(a4);
  v4[12] = v5;
  v6 = vmulq_f32(v5, v5);
  result = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v6, 2), vaddq_f32(v6, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v6.f32, 1))).f32[0]);
  v4[13].f32[0] = result;
  return result;
}

float `virtual thunk to'FIK::PositionTask::setTipOffset(_QWORD *a1, float32x4_t *a2)
{
  float32x4_t *v2;
  float32x4_t v3;
  float32x4_t v4;
  float result;

  v2 = (float32x4_t *)((char *)a1 + *(_QWORD *)(*a1 - 304));
  v3 = *a2;
  v2[12] = *a2;
  v4 = vmulq_f32(v3, v3);
  result = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v4, 2), vaddq_f32(v4, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v4.f32, 1))).f32[0]);
  v2[13].f32[0] = result;
  return result;
}

uint64_t FIK::PositionTask::setForce(FIK::PositionTask *this, float a2, float a3, float a4)
{
  *((float *)this + 60) = a2;
  *((float *)this + 61) = a3;
  *((float *)this + 62) = a4;
  return FIK::Solver::recalculateForces(*((_QWORD *)this + 16), 1);
}

uint64_t `virtual thunk to'FIK::PositionTask::setForce(FIK::PositionTask *this, float a2, float a3, float a4)
{
  char *v4;

  v4 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 320);
  *((float *)v4 + 60) = a2;
  *((float *)v4 + 61) = a3;
  *((float *)v4 + 62) = a4;
  return FIK::Solver::recalculateForces(*((_QWORD *)v4 + 16), 1);
}

uint64_t FIK::PositionTask::setForce(uint64_t a1, _OWORD *a2)
{
  *(_OWORD *)(a1 + 240) = *a2;
  return FIK::Solver::recalculateForces(*(_QWORD *)(a1 + 128), 1);
}

uint64_t `virtual thunk to'FIK::PositionTask::setForce(_QWORD *a1, _OWORD *a2)
{
  char *v2;

  v2 = (char *)a1 + *(_QWORD *)(*a1 - 328);
  *((_OWORD *)v2 + 15) = *a2;
  return FIK::Solver::recalculateForces(*((_QWORD *)v2 + 16), 1);
}

uint64_t FIK::PositionTask::getForce(FIK::PositionTask *this)
{
  return (uint64_t)this + 240;
}

uint64_t `virtual thunk to'FIK::PositionTask::getForce(FIK::PositionTask *this)
{
  return (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 336) + 240;
}

uint64_t FIK::PositionTask::setSupportRatio(FIK::PositionTask *this, float a2)
{
  *((float *)this + 82) = a2;
  return FIK::Solver::recalculateForces(*((_QWORD *)this + 16), 1);
}

uint64_t `virtual thunk to'FIK::PositionTask::setSupportRatio(FIK::PositionTask *this, float a2)
{
  char *v2;

  v2 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 368);
  *((float *)v2 + 82) = a2;
  return FIK::Solver::recalculateForces(*((_QWORD *)v2 + 16), 1);
}

uint64_t FIK::PositionTask::enablePosition(FIK::PositionTask *this, int a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 16);
  if (*((unsigned __int8 *)this + 288) != a2)
    *(_BYTE *)(v2 + 381) = 1;
  *((_BYTE *)this + 288) = a2;
  return FIK::Solver::recalculateForces(v2, 1);
}

uint64_t `virtual thunk to'FIK::PositionTask::enablePosition(FIK::PositionTask *this, int a2)
{
  char *v2;
  uint64_t v3;

  v2 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 344);
  v3 = *((_QWORD *)v2 + 16);
  if (v2[288] != a2)
    *(_BYTE *)(v3 + 381) = 1;
  v2[288] = a2;
  return FIK::Solver::recalculateForces(v3, 1);
}

uint64_t FIK::PositionTask::enableForce(FIK::PositionTask *this, int a2, char a3)
{
  BOOL v3;

  *((_BYTE *)this + 289) = a2;
  *((_BYTE *)this + 290) = a3;
  if (a2)
    v3 = *((_BYTE *)this + 292) != 0;
  else
    v3 = 0;
  *((_BYTE *)this + 291) = v3;
  return FIK::Solver::recalculateForces(*((_QWORD *)this + 16), 1);
}

uint64_t `virtual thunk to'FIK::PositionTask::enableForce(FIK::PositionTask *this, int a2, char a3)
{
  char *v3;
  BOOL v4;

  v3 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 360);
  v3[289] = a2;
  v3[290] = a3;
  if (a2)
    v4 = v3[292] != 0;
  else
    v4 = 0;
  v3[291] = v4;
  return FIK::Solver::recalculateForces(*((_QWORD *)v3 + 16), 1);
}

_BYTE *FIK::PositionTask::computeTorqueDerivatives(_BYTE *this, char a2)
{
  char v2;

  this[292] = a2;
  if (this[289])
    v2 = a2;
  else
    v2 = 0;
  this[291] = v2;
  return this;
}

_QWORD *`virtual thunk to'FIK::PositionTask::computeTorqueDerivatives(_QWORD *this, char a2)
{
  _BYTE *v2;
  char v3;

  v2 = (char *)this + *(_QWORD *)(*this - 384);
  v2[292] = a2;
  if (v2[289])
    v3 = a2;
  else
    v3 = 0;
  v2[291] = v3;
  return this;
}

__n128 FIK::PositionTask::getNTorque@<Q0>(float32x4_t *this@<X0>, __n128 *a2@<X8>)
{
  int32x4_t v2;
  __n128 result;

  v2 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)(this[2].i64[1] + 416), *(int32x4_t *)(this[2].i64[1] + 416)), *(int8x16_t *)(this[2].i64[1] + 416), 0xCuLL), vnegq_f32(this[15])), *(float32x4_t *)(this[2].i64[1] + 416), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)this[15], (int32x4_t)this[15]), (int8x16_t)this[15], 0xCuLL));
  result = (__n128)vextq_s8((int8x16_t)vuzp1q_s32(v2, v2), (int8x16_t)v2, 0xCuLL);
  result.n128_u32[3] = 0;
  *a2 = result;
  return result;
}

__n128 `virtual thunk to'FIK::PositionTask::getNTorque@<Q0>(FIK::PositionTask *this@<X0>, __n128 *a2@<X8>)
{
  float32x4_t *v2;
  int32x4_t v3;
  __n128 result;

  v2 = (float32x4_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 408));
  v3 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)(v2[2].i64[1] + 416), *(int32x4_t *)(v2[2].i64[1] + 416)), *(int8x16_t *)(v2[2].i64[1] + 416), 0xCuLL), vnegq_f32(v2[15])), *(float32x4_t *)(v2[2].i64[1] + 416), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v2[15], (int32x4_t)v2[15]), (int8x16_t)v2[15], 0xCuLL));
  result = (__n128)vextq_s8((int8x16_t)vuzp1q_s32(v3, v3), (int8x16_t)v3, 0xCuLL);
  result.n128_u32[3] = 0;
  *a2 = result;
  return result;
}

_QWORD *FIK::PositionTask::addCollisionSegment(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  if (a2)
  {
    v3 = result;
    if (*((_BYTE *)result + 294) || *((_BYTE *)result + 295))
    {
      result = FIK::IKArray<FIK::Segment *>::reserve(result + 42, result[42] + 1);
      v4 = v3[42];
      *(_QWORD *)(v3[44] + 8 * v4) = a2;
      v3[42] = v4 + 1;
    }
  }
  return result;
}

_QWORD *`virtual thunk to'FIK::PositionTask::addCollisionSegment(_QWORD *a1, uint64_t a2)
{
  return FIK::PositionTask::addCollisionSegment((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 512)), a2);
}

uint64_t FIK::PositionTask::getSolveError(FIK::PositionTask *this)
{
  return (uint64_t)this + 224;
}

uint64_t `virtual thunk to'FIK::PositionTask::getSolveError(FIK::PositionTask *this)
{
  return (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 400) + 224;
}

float32x4_t FIK::PositionTask::scaleTarget(float32x4_t *this, float a2)
{
  float32x4_t result;

  result = vmulq_n_f32(this[11], a2);
  this[11] = result;
  return result;
}

float32x4_t `virtual thunk to'FIK::PositionTask::scaleTarget(FIK::PositionTask *this, float a2)
{
  float32x4_t *v2;
  float32x4_t result;

  v2 = (float32x4_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 144));
  result = vmulq_n_f32(v2[11], a2);
  v2[11] = result;
  return result;
}

uint64_t FIK::PositionTask::getDeltaPos(FIK::PositionTask *this)
{
  return (uint64_t)this + 224;
}

uint64_t `virtual thunk to'FIK::PositionTask::getDeltaPos(FIK::PositionTask *this)
{
  return (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 392) + 224;
}

float32x4_t *FIK::PositionTask::computeDeltaX(float32x4_t *this)
{
  unsigned __int32 v1;
  __int32 v2;
  uint64_t v3;
  uint64_t v4;
  __int32 v5;
  __int32 v6;
  uint64_t v7;

  v1 = this->u32[2];
  if (this[1].i8[13] && this[18].i8[0])
  {
    this[14] = vsubq_f32(this[11], *(float32x4_t *)(this[2].i64[1] + 432));
    v2 = this[1].i32[2];
    if (v2)
    {
      v3 = 0;
      v4 = this[7].i64[1];
      do
      {
        if (this[2].i8[v3])
          v5 = this[14].i32[(int)v3];
        else
          v5 = 0;
        *(_DWORD *)(v4 + 4 * (v1 + v3++)) = v5;
      }
      while (v2 != (_DWORD)v3);
    }
  }
  else
  {
    v6 = this[1].i32[2];
    if (v6)
    {
      v7 = this[7].i64[1];
      do
      {
        *(_DWORD *)(v7 + 4 * v1++) = 0;
        --v6;
      }
      while (v6);
    }
  }
  return this;
}

float32x4_t FIK::PositionTask::setFKTarget(FIK::PositionTask *this)
{
  float32x4_t result;

  *((_OWORD *)this + 11) = *(_OWORD *)(*((_QWORD *)this + 5) + 432);
  if (FIK::Solver::getBalanceTask(*((FIK::Solver **)this + 16)))
  {
    if (*(_BYTE *)(FIK::Solver::getBalanceTask(*((FIK::Solver **)this + 16)) + 29))
    {
      result = vaddq_f32(*((float32x4_t *)this + 11), *(float32x4_t *)FIK::Solver::getZMP(*((FIK::Solver **)this + 16)));
      *((float32x4_t *)this + 11) = result;
    }
  }
  return result;
}

uint64_t FIK::PositionTask::setDerevativeRule(uint64_t this, int a2)
{
  BOOL v2;

  if (a2)
    v2 = *(_DWORD *)(this + 24) == 3;
  else
    v2 = 0;
  *(_BYTE *)(this + 28) = v2;
  return this;
}

void FIK::PositionTask::computeDerivatives(FIK::PositionTask *this, unsigned int a2, int a3)
{
  if (*((_BYTE *)this + 28))
    FIK::PositionTask::computeDerivativesOptimized(this);
  else
    FIK::PositionTask::computeDerivativesCommon(this, a2, a3);
}

void FIK::PositionTask::computeDerivativesOptimized(FIK::PositionTask *this)
{
  float32x4_t *v2;
  float32x4_t *v3;
  float32x4_t *v4;
  float32x4_t v5;
  BOOL v6;
  float32x4_t v7;
  float32x4_t v8;
  float v9;
  float32x4_t v10;
  float32x4_t v11;
  float v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  uint64_t BalanceTask;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  float32x4_t **v29;
  float32x4_t **v30;
  float32x4_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float32x4_t *v36;
  __int32 v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  int32x4_t v42;
  int8x16_t v43;
  int32x4_t v44;
  int8x16_t v45;
  int32x4_t v46;
  int8x16_t v47;
  unsigned __int32 v48;
  uint64_t v49;
  unsigned __int32 v50;
  uint64_t v51;
  unsigned __int32 v52;
  uint64_t v53;
  unsigned __int32 v54;
  unsigned __int8 *v55;
  float32x4_t *v56;
  int v58;
  int v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63[3];
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  v2 = (float32x4_t *)*((_QWORD *)this + 5);
  v62 = v2[26];
  if (!*((_BYTE *)this + 288))
  {
    FIK::Solver::checkReach(*((_QWORD *)this + 16), v2[39].f32[3]);
    goto LABEL_30;
  }
  if (*((_BYTE *)this + 293))
  {
    *((_OWORD *)this + 14) = 0u;
    v3 = (float32x4_t *)v2[2].i64[0];
    v4 = (float32x4_t *)v2[4].i64[1];
    v5.i32[0] = 0;
    if (v3)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (v6)
      goto LABEL_23;
    v7 = vsubq_f32(v62, v3[26]);
    v8 = vmulq_f32(v7, v7);
    v9 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v8, 2), vaddq_f32(v8, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 1))).f32[0]);
    if (fabsf(v9) < 0.000000001)
      goto LABEL_23;
    v10 = vsubq_f32(v4[26], v62);
    v11 = vmulq_f32(v10, v10);
    v12 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2), vaddq_f32(v11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1))).f32[0]);
    if (fabsf(v12) < 0.000000001)
      goto LABEL_23;
    v13 = vmulq_n_f32(v7, 1.0 / v9);
    v14 = vmulq_n_f32(v10, 1.0 / v12);
    v15 = vmulq_f32(v13, v14);
    if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 2), vaddq_f32(v15, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 1))).f32[0] > 0.98875)goto LABEL_23;
    v60 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v14, (int32x4_t)v14), (int8x16_t)v14, 0xCuLL), vnegq_f32(v13)), v14, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v13, (int32x4_t)v13), (int8x16_t)v13, 0xCuLL));
    *((float32x4_t *)this + 14) = vsubq_f32(*((float32x4_t *)this + 11), v62);
    if (FIK::Solver::getBalanceTask(*((FIK::Solver **)this + 16)))
    {
      BalanceTask = FIK::Solver::getBalanceTask(*((FIK::Solver **)this + 16));
      v17 = *((float32x4_t *)this + 14);
      if (*(_BYTE *)(BalanceTask + 29))
        v17 = vsubq_f32(*((float32x4_t *)this + 14), *(float32x4_t *)FIK::Solver::getZMP(*((FIK::Solver **)this + 16)));
    }
    else
    {
      v17 = *((float32x4_t *)this + 14);
    }
    v20 = v60;
    v21 = (int32x4_t)vmulq_f32(v20, v20);
    v22 = (int32x4_t)vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL);
    v23 = (float32x4_t)v22;
    v23.i32[1] = v60.i32[0];
    *(float32x2_t *)v23.f32 = vmul_n_f32(*(float32x2_t *)v23.f32, v60.f32[0]);
    v20.i32[0] = v22.i32[0];
    *(float32x2_t *)v20.f32 = vmul_f32((float32x2_t)vrev64_s32(*(int32x2_t *)v60.f32), *(float32x2_t *)v20.f32);
    v20.i64[1] = v20.i64[0];
    v24 = (float32x4_t)vzip1q_s32(vzip1q_s32(vdupq_laneq_s32(v21, 2), (int32x4_t)v20), (int32x4_t)v23);
    v23.i32[3] = v20.i32[1];
    v23.i32[2] = v20.i32[1];
    *(int32x2_t *)v22.i8 = vdup_lane_s32(*(int32x2_t *)v20.f32, 1);
    v5 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v24, v17.f32[0]), v23, *(float32x2_t *)v17.f32, 1), (float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)v20, vdupq_lane_s32(*(int32x2_t *)v21.i8, 1)), v22), v17, 2);
  }
  else
  {
    v61 = vaddq_f32(v62, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v2[29], COERCE_FLOAT(*((_OWORD *)this + 12))), v2[30], *(float32x2_t *)((char *)this + 192), 1), v2[31], *((float32x4_t *)this + 12), 2));
    v62 = v61;
    FIK::Solver::checkReach(*((_QWORD *)this + 16), v2[39].f32[3] + *((float *)this + 52));
    if (*((_BYTE *)this + 295))
    {
      v63[0] = 0uLL;
      FIK::PositionTask::getPlaneError((uint64_t)this, (float32x4_t *)this + 11, v63);
      v18 = vsubq_f32(*((float32x4_t *)this + 11), v61);
      v19 = v63[0];
    }
    else
    {
      v19 = v61;
      if (*((_BYTE *)this + 294))
      {
        v63[0] = 0uLL;
        FIK::PositionTask::getPlaneError((uint64_t)this, &v62, v63);
        v5 = vsubq_f32((float32x4_t)0, v63[0]);
        goto LABEL_22;
      }
      v18 = *((float32x4_t *)this + 11);
    }
    v5 = vsubq_f32(v18, v19);
  }
LABEL_22:
  *((float32x4_t *)this + 14) = v5;
LABEL_23:
  v25 = 0;
  if (!*((_BYTE *)this + 32))
    v5.f32[0] = 0.0;
  v26 = *((_QWORD *)this + 15);
  *(_DWORD *)(v26 + 4 * *((unsigned int *)this + 2)) = v5.i32[0];
  v27 = 0;
  if (*((_BYTE *)this + 33))
    v27 = *((_DWORD *)this + 57);
  *(_DWORD *)(v26 + 4 * *((unsigned int *)this + 3)) = v27;
  if (*((_BYTE *)this + 34))
    v25 = *((_DWORD *)this + 58);
  *(_DWORD *)(v26 + 4 * *((unsigned int *)this + 4)) = v25;
LABEL_30:
  v28 = *((_QWORD *)this + 37);
  if (v28)
  {
    v29 = (float32x4_t **)*((_QWORD *)this + 39);
    v30 = &v29[v28];
    v31 = v62;
    v32 = *((_QWORD *)this + 12);
    v33 = *((_QWORD *)this + 13);
    v34 = *((_QWORD *)this + 14);
    do
    {
      v35 = 0;
      v36 = *v29;
      v37 = (*v29)[32].i32[1];
      v38 = vsubq_f32((*v29)[26], v31);
      v39 = (*v29)[22];
      v40 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v38, (int32x4_t)v38), (int8x16_t)v38, 0xCuLL);
      v41 = vnegq_f32(v38);
      v42 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)(*v29)[20], (int32x4_t)(*v29)[20]), (int8x16_t)(*v29)[20], 0xCuLL), v41), (*v29)[20], v40);
      v43 = vextq_s8((int8x16_t)vuzp1q_s32(v42, v42), (int8x16_t)v42, 0xCuLL);
      v43.i32[3] = 0;
      v44 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)(*v29)[21], (int32x4_t)(*v29)[21]), (int8x16_t)(*v29)[21], 0xCuLL), v41), (*v29)[21], v40);
      v45 = vextq_s8((int8x16_t)vuzp1q_s32(v44, v44), (int8x16_t)v44, 0xCuLL);
      v45.i32[3] = 0;
      v63[0] = (float32x4_t)v43;
      v63[1] = (float32x4_t)v45;
      v46 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v39, (int32x4_t)v39), (int8x16_t)v39, 0xCuLL), v41), v39, v40);
      v47 = vextq_s8((int8x16_t)vuzp1q_s32(v46, v46), (int8x16_t)v46, 0xCuLL);
      v47.i32[3] = 0;
      v63[2] = (float32x4_t)v47;
      v48 = v37;
      do
        *(_DWORD *)(v32 + 4 * v48++) = v63[v35++].i32[0];
      while (v35 != 3);
      v49 = 1;
      v50 = v37;
      do
      {
        *(_DWORD *)(v33 + 4 * v50++) = v63[0].i32[v49];
        v49 += 4;
      }
      while (v49 != 13);
      v51 = 2;
      v52 = v37;
      do
      {
        *(_DWORD *)(v34 + 4 * v52++) = v63[0].i32[v51];
        v51 += 4;
      }
      while (v51 != 14);
      if (v36[33].i8[4])
      {
        v53 = v36[2].i64[0];
        if (!v53)
        {
          v54 = v37 + 3;
          v55 = &v36[50].u8[11];
          v56 = v36 + 20;
          do
          {
            if (*v55++)
            {
              v58 = *(__int32 *)((char *)&v56->i32[1] + v53);
              v59 = *(__int32 *)((char *)&v56->i32[2] + v53);
              *(_DWORD *)(v32 + 4 * v54) = *(__int32 *)((char *)v56->i32 + v53);
              *(_DWORD *)(v33 + 4 * v54) = v58;
              *(_DWORD *)(v34 + 4 * v54++) = v59;
            }
            v53 += 16;
          }
          while (v53 != 48);
        }
      }
      ++v29;
    }
    while (v29 != v30);
  }
}

void FIK::PositionTask::computeDerivativesCommon(FIK::PositionTask *this, unsigned int a2, int a3)
{
  float32x4_t *v5;
  float32x4_t *v6;
  float32x4_t *v7;
  BOOL v8;
  float32x4_t v9;
  float32x4_t v10;
  float v11;
  float32x4_t v12;
  float32x4_t v13;
  float v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  uint64_t BalanceTask;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  float32x4_t **v29;
  float32x4_t **v30;
  float32x4_t v31;
  uint64_t v32;
  float32x4_t *v33;
  float32x4_t v34;
  unsigned __int32 v35;
  float32x4_t v36;
  float32x4_t v37;
  int32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  __int32 v45;
  int32x4_t v46;
  int8x16_t v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t i;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  float32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  int8x16_t v64;
  float32x4_t v65;
  float32x4_t v66;

  v5 = (float32x4_t *)*((_QWORD *)this + 5);
  v66 = v5[26];
  if (!*((_BYTE *)this + 288))
  {
    FIK::Solver::checkReach(*((_QWORD *)this + 16), v5[39].f32[3]);
    goto LABEL_29;
  }
  if (*((_BYTE *)this + 293))
  {
    *((_OWORD *)this + 14) = 0u;
    v6 = (float32x4_t *)v5[2].i64[0];
    v7 = (float32x4_t *)v5[4].i64[1];
    if (v6)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
    {
      v9 = vsubq_f32(v66, v6[26]);
      v10 = vmulq_f32(v9, v9);
      v11 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1))).f32[0]);
      if (fabsf(v11) >= 0.000000001)
      {
        v12 = vsubq_f32(v7[26], v66);
        v13 = vmulq_f32(v12, v12);
        v14 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1))).f32[0]);
        if (fabsf(v14) >= 0.000000001)
        {
          v15 = vmulq_n_f32(v9, 1.0 / v11);
          v16 = vmulq_n_f32(v12, 1.0 / v14);
          v17 = vmulq_f32(v15, v16);
          if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v17, 2), vaddq_f32(v17, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 1))).f32[0] <= 0.98875)
          {
            v62 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v16, (int32x4_t)v16), (int8x16_t)v16, 0xCuLL), vnegq_f32(v15)), v16, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v15, (int32x4_t)v15), (int8x16_t)v15, 0xCuLL));
            *((float32x4_t *)this + 14) = vsubq_f32(*((float32x4_t *)this + 11), v66);
            if (FIK::Solver::getBalanceTask(*((FIK::Solver **)this + 16)))
            {
              BalanceTask = FIK::Solver::getBalanceTask(*((FIK::Solver **)this + 16));
              v19 = *((float32x4_t *)this + 14);
              if (*(_BYTE *)(BalanceTask + 29))
                v19 = vsubq_f32(*((float32x4_t *)this + 14), *(float32x4_t *)FIK::Solver::getZMP(*((FIK::Solver **)this + 16)));
            }
            else
            {
              v19 = *((float32x4_t *)this + 14);
            }
            v57 = v62;
            v58 = (int32x4_t)vmulq_f32(v57, v57);
            v59 = (int32x4_t)vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL);
            v60 = (float32x4_t)v59;
            v60.i32[1] = v62.i32[0];
            *(float32x2_t *)v60.f32 = vmul_n_f32(*(float32x2_t *)v60.f32, v62.f32[0]);
            v57.i32[0] = v59.i32[0];
            *(float32x2_t *)v57.f32 = vmul_f32((float32x2_t)vrev64_s32(*(int32x2_t *)v62.f32), *(float32x2_t *)v57.f32);
            v57.i64[1] = v57.i64[0];
            v61 = (float32x4_t)vzip1q_s32(vzip1q_s32(vdupq_laneq_s32(v58, 2), (int32x4_t)v57), (int32x4_t)v60);
            v60.i32[3] = v57.i32[1];
            v60.i32[2] = v57.i32[1];
            *(int32x2_t *)v59.i8 = vdup_lane_s32(*(int32x2_t *)v57.f32, 1);
            *((float32x4_t *)this + 14) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v61, v19.f32[0]), v60, *(float32x2_t *)v19.f32, 1), (float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)v57, vdupq_lane_s32(*(int32x2_t *)v58.i8, 1)), v59), v19, 2);
          }
        }
      }
    }
    goto LABEL_23;
  }
  v63 = vaddq_f32(v66, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v5[29], COERCE_FLOAT(*((_OWORD *)this + 12))), v5[30], *(float32x2_t *)((char *)this + 192), 1), v5[31], *((float32x4_t *)this + 12), 2));
  v66 = v63;
  FIK::Solver::checkReach(*((_QWORD *)this + 16), v5[39].f32[3] + *((float *)this + 52));
  if (FIK::Solver::getBalanceTask(*((FIK::Solver **)this + 16))
    && *(_BYTE *)(FIK::Solver::getBalanceTask(*((FIK::Solver **)this + 16)) + 29))
  {
    v63 = vaddq_f32(v63, *(float32x4_t *)FIK::Solver::getZMP(*((FIK::Solver **)this + 16)));
    v66 = v63;
  }
  if (*((_BYTE *)this + 295))
  {
    v65 = 0uLL;
    FIK::PositionTask::getPlaneError((uint64_t)this, (float32x4_t *)this + 11, &v65);
    v20 = vsubq_f32(*((float32x4_t *)this + 11), v63);
    v21 = v65;
  }
  else
  {
    if (*((_BYTE *)this + 294))
    {
      v65 = 0uLL;
      FIK::PositionTask::getPlaneError((uint64_t)this, &v66, &v65);
      v22 = vsubq_f32((float32x4_t)0, v65);
      goto LABEL_22;
    }
    v20 = *((float32x4_t *)this + 11);
    v21 = v63;
  }
  v22 = vsubq_f32(v20, v21);
LABEL_22:
  *((float32x4_t *)this + 14) = v22;
LABEL_23:
  v23 = *((_DWORD *)this + 6);
  if (v23)
  {
    v24 = 0;
    v25 = *((_DWORD *)this + 2);
    v26 = *((_QWORD *)this + 15);
    do
    {
      if (*((_BYTE *)this + v24 + 32))
        v27 = *((_DWORD *)this + (int)v24 + 56);
      else
        v27 = 0;
      *(_DWORD *)(v26 + 4 * (v25 + v24++)) = v27;
    }
    while (v23 != (_DWORD)v24);
  }
LABEL_29:
  v28 = *((_QWORD *)this + 37);
  if (v28)
  {
    v29 = (float32x4_t **)*((_QWORD *)this + 39);
    v30 = &v29[v28];
    v31 = v66;
    do
    {
      v32 = 0;
      v33 = *v29;
      v34 = vsubq_f32((*v29)[26], v31);
      v35 = (*v29)[32].u32[1];
      v36 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v34, (int32x4_t)v34), (int8x16_t)v34, 0xCuLL);
      v37 = vnegq_f32(v34);
      do
      {
        if (v33[50].i8[v32 + 8])
        {
          v38 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v33[v32 + 20], (int32x4_t)v33[v32 + 20]), (int8x16_t)v33[v32 + 20], 0xCuLL), v37), v33[v32 + 20], v36);
          v39 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v38, v38), (int8x16_t)v38, 0xCuLL);
          v40 = v39;
          v40.i32[3] = 0;
          v65 = v40;
          if (*((_BYTE *)this + 288))
          {
            v41 = *((_DWORD *)this + 6);
            if (v41)
            {
              v42 = 0;
              v43 = *((_DWORD *)this + 2);
              v44 = *((_QWORD *)this + 11);
              do
              {
                if (*((_BYTE *)this + v42 + 32))
                  v45 = v65.i32[(int)v42];
                else
                  v45 = 0;
                *(_DWORD *)(*(_QWORD *)(v44 + 8 * (v43 + v42++)) + 4 * v35) = v45;
              }
              while (v41 != (_DWORD)v42);
            }
          }
          if (*((_BYTE *)this + 291))
          {
            v46 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*((int32x4_t *)this + 15), *((int32x4_t *)this + 15)), *((int8x16_t *)this + 15), 0xCuLL), vnegq_f32(v39)), *((float32x4_t *)this + 15), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v39, (int32x4_t)v39), (int8x16_t)v39, 0xCuLL));
            v47 = vextq_s8((int8x16_t)vuzp1q_s32(v46, v46), (int8x16_t)v46, 0xCuLL);
            v47.i32[3] = 0;
            v64 = v47;
            v48 = *((_DWORD *)this + 6);
            if (v48)
            {
              v49 = 0;
              v50 = *((_QWORD *)this + 11);
              do
              {
                v51 = *(_QWORD *)(v50 + 8 * (a3 - 3 + v49));
                *(float *)(v51 + 4 * v35) = *(float *)&v64.i32[v49++] + *(float *)(v51 + 4 * v35);
              }
              while (v48 != v49);
            }
          }
          ++v35;
        }
        ++v32;
      }
      while (v32 != 3);
      if (v33[33].i8[4])
      {
        for (i = 0; i != 3; ++i)
        {
          if (v33[50].i8[i + 11])
          {
            v65 = v33[i + 20];
            if (*((_BYTE *)this + 288))
            {
              v53 = *((_DWORD *)this + 6);
              if (v53)
              {
                v54 = 0;
                v55 = *((_DWORD *)this + 2);
                v56 = *((_QWORD *)this + 11);
                do
                {
                  *(_DWORD *)(*(_QWORD *)(v56 + 8 * (v55 + v54)) + 4 * v35) = v65.i32[v54];
                  ++v54;
                }
                while (v53 != v54);
              }
            }
            ++v35;
          }
        }
      }
      ++v29;
    }
    while (v29 != v30);
  }
}

_QWORD *FIK::PositionTask::queryAffectedSegments(_QWORD *this)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  int v5;
  uint64_t v6;

  this[37] = 0;
  v1 = this[5];
  if (v1)
  {
    v2 = this;
    v3 = 0;
    v4 = this + 37;
    v5 = -1;
    do
    {
      if (++v5 >= *((_DWORD *)v2 + 19))
        break;
      if (*(_BYTE *)(v1 + 814))
      {
        this = FIK::IKArray<FIK::Segment *>::reserve(v4, v3 + 1);
        v6 = v2[37];
        *(_QWORD *)(v2[39] + 8 * v6) = v1;
        v3 = v6 + 1;
        v2[37] = v6 + 1;
      }
      v1 = *(_QWORD *)(v1 + 32);
    }
    while (v1);
  }
  return this;
}

void FIK::PositionTask::~PositionTask(FIK::PositionTask *this)
{
  uint64_t v2;
  uint64_t v3;

  *((_QWORD *)this + 42) = 0;
  v2 = *((_QWORD *)this + 44);
  if (v2)
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)this + 45) + 24))(*((_QWORD *)this + 45), v2, 0, 8);
  *((_QWORD *)this + 37) = 0;
  v3 = *((_QWORD *)this + 39);
  if (v3)
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)this + 40) + 24))(*((_QWORD *)this + 40), v3, 0, 8);
}

{
  uint64_t v2;
  uint64_t v3;

  *((_QWORD *)this + 42) = 0;
  v2 = *((_QWORD *)this + 44);
  if (v2)
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)this + 45) + 24))(*((_QWORD *)this + 45), v2, 0, 8);
  *((_QWORD *)this + 37) = 0;
  v3 = *((_QWORD *)this + 39);
  if (v3)
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)this + 40) + 24))(*((_QWORD *)this + 40), v3, 0, 8);
  JUMPOUT(0x212BCAFB4);
}

uint64_t FIK::PositionTask::Positional(FIK::PositionTask *this)
{
  return *((unsigned __int8 *)this + 288);
}

uint64_t FIK::PositionTask::Kinetic(FIK::PositionTask *this)
{
  return *((unsigned __int8 *)this + 289);
}

uint64_t FIK::PositionTask::Supporting(FIK::PositionTask *this)
{
  return *((unsigned __int8 *)this + 290);
}

uint64_t FIK::PositionTask::getTarget(FIK::PositionTask *this)
{
  return (uint64_t)this + 176;
}

uint64_t FIK::PositionTask::getTipOffset(FIK::PositionTask *this)
{
  return (uint64_t)this + 192;
}

float FIK::PositionTask::getSupportRatio(FIK::PositionTask *this)
{
  return *((float *)this + 82);
}

uint64_t FIK::PositionTask::setAsPoleTask(uint64_t this, char a2)
{
  *(_BYTE *)(this + 293) = a2;
  return this;
}

uint64_t FIK::PositionTask::getAsPoleTask(FIK::PositionTask *this)
{
  return *((unsigned __int8 *)this + 293);
}

uint64_t FIK::PositionTask::setAsPenetrationTask(uint64_t this, char a2)
{
  *(_BYTE *)(this + 294) = a2;
  return this;
}

uint64_t FIK::PositionTask::getAsPenetrationTask(FIK::PositionTask *this)
{
  return *((unsigned __int8 *)this + 294);
}

uint64_t FIK::PositionTask::setWithPenetrationTask(uint64_t this, char a2)
{
  *(_BYTE *)(this + 295) = a2;
  return this;
}

uint64_t FIK::PositionTask::getWithPenetrationTask(FIK::PositionTask *this)
{
  return *((unsigned __int8 *)this + 295);
}

float *FIK::PositionTask::setPPlaneNormal(float *this, float a2, float a3, float a4)
{
  this[64] = a2;
  this[65] = a3;
  this[66] = a4;
  return this;
}

__n128 FIK::PositionTask::setPPlaneNormal(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[16] = *a2;
  return result;
}

uint64_t FIK::PositionTask::getPPlaneNormal(FIK::PositionTask *this)
{
  return (uint64_t)this + 256;
}

float *FIK::PositionTask::setPPlanePosition(float *this, float a2, float a3, float a4)
{
  this[68] = a2;
  this[69] = a3;
  this[70] = a4;
  return this;
}

__n128 FIK::PositionTask::setPPlanePosition(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[17] = *a2;
  return result;
}

uint64_t FIK::PositionTask::getPPlanePosition(FIK::PositionTask *this)
{
  return (uint64_t)this + 272;
}

uint64_t FIK::PositionTask::SetMeshOffset(uint64_t this, float a2)
{
  *(float *)(this + 332) = a2;
  return this;
}

void `virtual thunk to'FIK::PositionTask::~PositionTask(FIK::PositionTask *this)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *((_QWORD *)v1 + 42) = 0;
  v2 = *((_QWORD *)v1 + 44);
  if (v2)
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)v1 + 45) + 24))(*((_QWORD *)v1 + 45), v2, 0, 8);
  *((_QWORD *)v1 + 37) = 0;
  v3 = *((_QWORD *)v1 + 39);
  if (v3)
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)v1 + 40) + 24))(*((_QWORD *)v1 + 40), v3, 0, 8);
}

{
  char *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *((_QWORD *)v1 + 42) = 0;
  v2 = *((_QWORD *)v1 + 44);
  if (v2)
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)v1 + 45) + 24))(*((_QWORD *)v1 + 45), v2, 0, 8);
  *((_QWORD *)v1 + 37) = 0;
  v3 = *((_QWORD *)v1 + 39);
  if (v3)
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)v1 + 40) + 24))(*((_QWORD *)v1 + 40), v3, 0, 8);
  JUMPOUT(0x212BCAFB4);
}

uint64_t `virtual thunk to'FIK::PositionTask::getTarget(FIK::PositionTask *this)
{
  return (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 288) + 176;
}

uint64_t `virtual thunk to'FIK::PositionTask::getTipOffset(FIK::PositionTask *this)
{
  return (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 312) + 192;
}

float `virtual thunk to'FIK::PositionTask::getSupportRatio(FIK::PositionTask *this)
{
  return *(float *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 376) + 328);
}

_QWORD *`virtual thunk to'FIK::PositionTask::setAsPoleTask(_QWORD *this, char a2)
{
  *((_BYTE *)this + *(_QWORD *)(*this - 416) + 293) = a2;
  return this;
}

uint64_t `virtual thunk to'FIK::PositionTask::getAsPoleTask(FIK::PositionTask *this)
{
  return *((unsigned __int8 *)this + *(_QWORD *)(*(_QWORD *)this - 424) + 293);
}

_QWORD *`virtual thunk to'FIK::PositionTask::setAsPenetrationTask(_QWORD *this, char a2)
{
  *((_BYTE *)this + *(_QWORD *)(*this - 432) + 294) = a2;
  return this;
}

uint64_t `virtual thunk to'FIK::PositionTask::getAsPenetrationTask(FIK::PositionTask *this)
{
  return *((unsigned __int8 *)this + *(_QWORD *)(*(_QWORD *)this - 440) + 294);
}

_QWORD *`virtual thunk to'FIK::PositionTask::setWithPenetrationTask(_QWORD *this, char a2)
{
  *((_BYTE *)this + *(_QWORD *)(*this - 448) + 295) = a2;
  return this;
}

uint64_t `virtual thunk to'FIK::PositionTask::getWithPenetrationTask(FIK::PositionTask *this)
{
  return *((unsigned __int8 *)this + *(_QWORD *)(*(_QWORD *)this - 456) + 295);
}

_QWORD *`virtual thunk to'FIK::PositionTask::setPPlaneNormal(_QWORD *this, float a2, float a3, float a4)
{
  float *v4;

  v4 = (float *)((char *)this + *(_QWORD *)(*this - 464));
  v4[64] = a2;
  v4[65] = a3;
  v4[66] = a4;
  return this;
}

__n128 `virtual thunk to'FIK::PositionTask::setPPlaneNormal(_QWORD *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *(__n128 *)((char *)a1 + *(_QWORD *)(*a1 - 472) + 256) = *a2;
  return result;
}

uint64_t `virtual thunk to'FIK::PositionTask::getPPlaneNormal(FIK::PositionTask *this)
{
  return (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 480) + 256;
}

_QWORD *`virtual thunk to'FIK::PositionTask::setPPlanePosition(_QWORD *this, float a2, float a3, float a4)
{
  float *v4;

  v4 = (float *)((char *)this + *(_QWORD *)(*this - 488));
  v4[68] = a2;
  v4[69] = a3;
  v4[70] = a4;
  return this;
}

__n128 `virtual thunk to'FIK::PositionTask::setPPlanePosition(_QWORD *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *(__n128 *)((char *)a1 + *(_QWORD *)(*a1 - 496) + 272) = *a2;
  return result;
}

uint64_t `virtual thunk to'FIK::PositionTask::getPPlanePosition(FIK::PositionTask *this)
{
  return (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 504) + 272;
}

_QWORD *`virtual thunk to'FIK::PositionTask::SetMeshOffset(_QWORD *this, float a2)
{
  *(float *)((char *)this + *(_QWORD *)(*this - 520) + 332) = a2;
  return this;
}

_QWORD *JSONS::PrettyPrint@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  BOOL v7;
  __int128 v8;
  const char *String;
  uint64_t *v11;
  _OWORD v12[2];
  uint64_t v13;
  uint64_t v14;
  int v15;
  __int16 v16;
  uint64_t v17;
  _OWORD v18[2];
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v25 = 0u;
  v26 = 0u;
  v22 = 0;
  v24 = 0u;
  v21 = 0u;
  v27 = 1024;
  v28 = 0;
  v29 = 0;
  v4 = operator new();
  v23 = rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>::MemoryPoolAllocator(v4, 0x10000, 0);
  *(_QWORD *)&v24 = v23;
  if (*(char *)(a1 + 23) < 0)
  {
    v6 = *(unsigned __int8 **)a1;
    v5 = *(_QWORD *)(a1 + 8);
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 23);
    v6 = (unsigned __int8 *)a1;
  }
  if (*(_DWORD *)(rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>,FIK::RapidJsonAllocator>::Parse<0u,rapidjson::UTF8<char>>((uint64_t)&v21, v6, v5)+ 88))v7 = 0;
  else
    v7 = HIWORD(v22) == 3;
  if (v7)
  {
    memset(v18, 0, sizeof(v18));
    v19 = 0;
    v20 = 256;
    v11 = (uint64_t *)v18;
    memset(v12, 0, sizeof(v12));
    v13 = 0;
    v14 = 512;
    v15 = 324;
    v16 = 0x2000;
    v17 = 4;
    rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::Accept<rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>>((unsigned int *)&v21, &v11);
    String = (const char *)rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>::GetString((uint64_t *)v18);
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)a2, String);
    rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy((uint64_t)v12);
    rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy((uint64_t)v18);
  }
  else
  {
    v8 = *(_OWORD *)(a1 + 16);
    *a2 = *(_OWORD *)a1;
    a2[1] = v8;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
  }
  return rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>,FIK::RapidJsonAllocator>::~GenericDocument(&v21);
}

uint64_t rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::Accept<rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>>(unsigned int *a1, uint64_t **a2)
{
  __int16 v4;
  double v6;
  uint64_t **v7;
  int v8;
  uint64_t v9;
  int8x16_t *v10;
  unsigned int v11;
  uint64_t v12;
  int8x16_t *v13;
  unsigned int v14;

  v4 = *((_WORD *)a1 + 11);
  switch(v4 & 7)
  {
    case 0:
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(a2);
      return rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteNull(a2);
    case 1:
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(a2);
      v7 = a2;
      v8 = 0;
      return rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteBool(v7, v8);
    case 2:
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(a2);
      v7 = a2;
      v8 = 1;
      return rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteBool(v7, v8);
    case 3:
      if (!rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartObject((uint64_t)a2))
        return 0;
      if (!*a1)
        return rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndObject(a2);
      v9 = *((_QWORD *)a1 + 1) + 24;
      while (1)
      {
        v10 = (*(_WORD *)(v9 - 2) & 0x1000) != 0 ? (int8x16_t *)(v9 - 24) : *(int8x16_t **)(v9 - 16);
        v11 = (*(_WORD *)(v9 - 2) & 0x1000) != 0 ? 21 - *(char *)(v9 - 3) : *(_DWORD *)(v9 - 24);
        rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(a2);
        if (!rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString(a2, v10, v11)|| (rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::Accept<rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>>(v9, a2) & 1) == 0)
        {
          break;
        }
        v9 += 48;
        if (v9 - 24 == *((_QWORD *)a1 + 1) + 48 * *a1)
          return rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndObject(a2);
      }
      return 0;
    case 4:
      if (!rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartArray((uint64_t)a2))
        return 0;
      if (!*a1)
        return rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndArray(a2);
      v12 = *((_QWORD *)a1 + 1);
      break;
    case 5:
      if ((*((_WORD *)a1 + 11) & 0x1000) != 0)
        v13 = (int8x16_t *)a1;
      else
        v13 = (int8x16_t *)*((_QWORD *)a1 + 1);
      if ((*((_WORD *)a1 + 11) & 0x1000) != 0)
        v14 = 21 - *((char *)a1 + 21);
      else
        v14 = *a1;
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(a2);
      return rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString(a2, v13, v14);
    default:
      if ((*((_WORD *)a1 + 11) & 0x200) != 0)
        return rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Double((uint64_t *)a2, *(double *)a1);
      if ((v4 & 0x20) != 0)
        return rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Int(a2, (rapidjson::internal *)*a1);
      if ((v4 & 0x40) != 0)
        return rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Uint(a2, (rapidjson::internal *)*a1);
      v6 = *(double *)a1;
      if ((v4 & 0x80) != 0)
        return rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Int64(a2, *(unint64_t *)&v6);
      else
        return rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Uint64(a2, *(unint64_t *)&v6);
  }
  while ((rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::Accept<rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>>(v12, a2) & 1) != 0)
  {
    v12 += 24;
    if (v12 == *((_QWORD *)a1 + 1) + 24 * *a1)
      return rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndArray(a2);
  }
  return 0;
}

uint64_t rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>::GetString(uint64_t *a1)
{
  _BYTE *v2;
  uint64_t result;

  v2 = (_BYTE *)a1[3];
  if (a1[4] - (uint64_t)v2 <= 0)
  {
    rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(a1, 1);
    v2 = (_BYTE *)a1[3];
  }
  a1[3] = (uint64_t)(v2 + 1);
  *v2 = 0;
  result = a1[2];
  --a1[3];
  return result;
}

int *rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember(unsigned int *a1, char *__s)
{
  int *v3;
  _QWORD v5[4];

  v5[3] = *MEMORY[0x24BDAC8D0];
  v5[1] = __s;
  v5[2] = 0x405000000000000;
  v5[0] = strlen(__s);
  v3 = (int *)*((_QWORD *)a1 + 1);
  if (*a1)
  {
    do
    {
      if (rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::StringEqual<rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>((unsigned int *)v5, v3))
      {
        break;
      }
      v3 += 12;
    }
    while (v3 != (int *)(*((_QWORD *)a1 + 1) + 48 * *a1));
  }
  return v3;
}

int *JSONS::getMemberOrLegacyMember(unsigned int *a1, char *a2, char **a3, uint64_t a4)
{
  int *Member;
  uint64_t v9;

  Member = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember(a1, a2);
  if ((int *)(*((_QWORD *)a1 + 1) + 48 * *a1) != Member)
    return Member + 6;
  if (a4)
  {
    v9 = 8 * a4;
    while (1)
    {
      Member = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember(a1, *a3);
      if ((int *)(*((_QWORD *)a1 + 1) + 48 * *a1) != Member)
        break;
      ++a3;
      v9 -= 8;
      if (!v9)
        return 0;
    }
    return Member + 6;
  }
  return 0;
}

int *JSONS::StringFromJSON(unsigned int *a1, char *a2)
{
  int *Member;

  Member = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember(a1, a2);
  if ((int *)(*((_QWORD *)a1 + 1) + 48 * *a1) == Member || (*((_WORD *)Member + 23) & 0x400) == 0)
    return 0;
  if ((*((_WORD *)Member + 23) & 0x1000) != 0)
    return Member + 6;
  return (int *)*((_QWORD *)Member + 4);
}

int *JSONS::assignBoolArrayFromJSON(_DWORD *a1, unsigned int *a2, char *__s, BOOL *a4, uint64_t a5)
{
  int *result;
  uint64_t i;
  int v12;

  result = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember(a2, __s);
  if ((int *)(*((_QWORD *)a2 + 1) + 48 * *a2) != result && *((_WORD *)result + 23) == 4 && a5 == result[6] && a5 != 0)
  {
    for (i = 22; ; i += 24)
    {
      v12 = *(unsigned __int16 *)(*((_QWORD *)result + 4) + i);
      if ((v12 & 8) == 0)
        break;
      *a4++ = v12 == 10;
      if (!--a5)
        return result;
    }
    *a1 = 3;
  }
  return result;
}

float JSONS::RealFromJSON(unsigned int *a1, char *a2, float a3)
{
  int *Member;
  double v6;

  Member = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember(a1, a2);
  if ((int *)(*((_QWORD *)a1 + 1) + 48 * *a1) != Member && (*((_WORD *)Member + 23) & 0x10) != 0)
    return rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::GetDouble((_WORD *)Member + 12, v6);
  return a3;
}

uint64_t JSONS::AxisFromJSON(unsigned int *a1, char *a2)
{
  int *v2;
  uint64_t v3;
  int *v4;
  int v5;
  int v6;
  unsigned int v7;
  unint64_t v10;
  int v11;

  v2 = JSONS::StringFromJSON(a1, a2);
  v4 = v2;
  if (v3 == 9)
  {
    if (!memcmp(v2, "NegativeX", 9uLL))
    {
      return 3;
    }
    else if (*(_QWORD *)v4 == 0x657669746167654ELL && *((_BYTE *)v4 + 8) == 89)
    {
      return 4;
    }
    else
    {
      v10 = bswap64(*(_QWORD *)v4);
      if (v10 == 0x4E65676174697665)
      {
        v11 = *((unsigned __int8 *)v4 + 8) - 90;
      }
      else if (v10 < 0x4E65676174697665)
      {
        v11 = -1;
      }
      else
      {
        v11 = 1;
      }
      if (v11)
        return 1;
      else
        return 5;
    }
  }
  else if (v3 == 1)
  {
    v5 = *(unsigned __int8 *)v2;
    if (v5 == 90)
      v6 = 2;
    else
      v6 = 1;
    if (v5 == 89)
      v7 = 1;
    else
      v7 = v6;
    if (v5 == 88)
      return 0;
    else
      return v7;
  }
  else
  {
    return 1;
  }
}

uint64_t JSONS::RigTypeFromJSON(unsigned int *a1, char *a2)
{
  int *v2;
  uint64_t v3;

  v2 = JSONS::StringFromJSON(a1, a2);
  if (v3 == 11)
    return 2 * (memcmp(v2, "GameRigType", 0xBuLL) == 0);
  if (v3 == 12)
    return memcmp(v2, "MoCapRigType", 0xCuLL) == 0;
  return 0;
}

uint64_t JSONS::BlendTypeFromJSON(unsigned int *a1, char *a2)
{
  int *v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v7;
  unint64_t v8;
  int v9;

  v2 = JSONS::StringFromJSON(a1, a2);
  v4 = (unint64_t *)v2;
  if (v3 != 15)
  {
    if (v3 == 13)
      return *(_QWORD *)v2 != 0x546F54646E656C42 || *(_QWORD *)((char *)v2 + 5) != 0x7465677261546F54;
    return 1;
  }
  if (!memcmp(v2, "BlendWithTarget", 0xFuLL))
    return 1;
  v7 = 0x426C656E64576974;
  v8 = bswap64(*v4);
  if (v8 == 0x426C656E64576974
    && (v7 = 0x74684F6666736574, v8 = bswap64(*(unint64_t *)((char *)v4 + 7)), v8 == 0x74684F6666736574))
  {
    v9 = 0;
  }
  else if (v8 < v7)
  {
    v9 = -1;
  }
  else
  {
    v9 = 1;
  }
  if (v9)
    return 1;
  else
    return 2;
}

uint64_t JSONS::BalanceTypeFromJSON(unsigned int *a1, char *a2)
{
  int *v2;
  uint64_t v3;

  v2 = JSONS::StringFromJSON(a1, a2);
  if (v3 == 13)
    return 2 * (memcmp(v2, "StaticBalance", 0xDuLL) == 0);
  if (v3 == 12)
    return memcmp(v2, "CentreOfMass", 0xCuLL) == 0;
  return 0;
}

uint64_t JSONS::CollisionShapeTypeFromJSON(unsigned int *a1, char *a2)
{
  int *v2;
  uint64_t v3;

  v2 = JSONS::StringFromJSON(a1, a2);
  switch(v3)
  {
    case 3:
      if (!memcmp(v2, "Box", 3uLL))
        return 3;
      else
        return 0;
    case 7:
      return 2 * (memcmp(v2, "Capsule", 7uLL) == 0);
    case 6:
      return memcmp(v2, "Sphere", 6uLL) == 0;
    default:
      return 0;
  }
}

uint64_t JSONS::AimingModeFromJSON(unsigned int *a1, char *a2)
{
  int *v2;
  uint64_t v3;
  int *v4;
  _BOOL4 v6;

  v2 = JSONS::StringFromJSON(a1, a2);
  v4 = v2;
  if (v3 == 9)
  {
    if (!memcmp(v2, "DualWield", 9uLL))
      return 3;
    else
      return 0;
  }
  else if (v3 == 7)
  {
    if (!memcmp(v2, "TwoHand", 7uLL))
    {
      return 1;
    }
    else
    {
      v6 = *v4 == 1214606927 && *(int *)((char *)v4 + 3) == 1684955464;
      return (2 * v6);
    }
  }
  else
  {
    return 0;
  }
}

void JSONS::QuaternionFromJSON(uint64_t a1@<X0>, float32x4_t *a2@<X8>, double a3@<D0>)
{
  float32x4_t v5;
  double v6;
  float64x2_t v7;
  double v8;
  float64x2_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x4_t v13;
  float v14;
  int8x16_t v15;
  unsigned __int32 v16;
  float32x2_t v17;
  float32x2_t v18;
  double v19;
  float v20;
  double Double;
  float32x2_t v22;
  float v23;
  float v24;

  if (*(_WORD *)(a1 + 22) == 4)
  {
    v5 = (float32x4_t)xmmword_210802BA0;
    if (*(_DWORD *)a1 == 4)
    {
      Double = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::GetDouble(*(_WORD **)(a1 + 8), a3);
      v6 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::GetDouble((_WORD *)(*(_QWORD *)(a1 + 8) + 24), Double);
      v7.f64[0] = Double;
      v7.f64[1] = v6;
      v22 = vcvt_f32_f64(v7);
      v19 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::GetDouble((_WORD *)(*(_QWORD *)(a1 + 8) + 48), *(double *)&v22);
      v8 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::GetDouble((_WORD *)(*(_QWORD *)(a1 + 8) + 72), v19);
      v9.f64[0] = v19;
      v9.f64[1] = v8;
      v10 = vcvt_f32_f64(v9);
      v11 = vadd_f32(vmul_f32(v22, v22), vmul_f32(v10, v10));
      v5 = (float32x4_t)xmmword_210802BA0;
      if (vaddv_f32(v11) != 0.0)
      {
        v12 = (float32x2_t)vdup_lane_s32((int32x2_t)v11, 1);
        v13 = vcvt_hight_f32_f64((int32x2_t)v22, v9);
LABEL_8:
        v16 = vadd_f32(v11, v12).u32[0];
        v17 = vrsqrte_f32((float32x2_t)v16);
        v18 = vmul_f32(v17, vrsqrts_f32((float32x2_t)v16, vmul_f32(v17, v17)));
        v5 = vmulq_n_f32(v13, vmul_f32(v18, vrsqrts_f32((float32x2_t)v16, vmul_f32(v18, v18))).f32[0]);
      }
    }
  }
  else
  {
    v24 = JSONS::RealFromJSON((unsigned int *)a1, "X", 0.0);
    v23 = JSONS::RealFromJSON((unsigned int *)a1, "Y", 0.0);
    v20 = JSONS::RealFromJSON((unsigned int *)a1, "Z", 0.0);
    v14 = JSONS::RealFromJSON((unsigned int *)a1, "W", 1.0);
    v13.i64[0] = __PAIR64__(LODWORD(v23), LODWORD(v24));
    v13.i64[1] = __PAIR64__(LODWORD(v14), LODWORD(v20));
    v15 = (int8x16_t)vmulq_f32(v13, v13);
    v11 = vadd_f32(*(float32x2_t *)v15.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL));
    if (vaddv_f32(v11) != 0.0)
    {
      v12 = (float32x2_t)vdup_lane_s32((int32x2_t)v11, 1);
      goto LABEL_8;
    }
    v5 = (float32x4_t)xmmword_210802BA0;
  }
  *a2 = v5;
}

void JSONS::VectorFromJSON(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  double Double;
  float v6;
  double v7;
  float v8;
  float v9;

  if (*(_WORD *)(a1 + 22) != 4)
  {
    v6 = JSONS::RealFromJSON((unsigned int *)a1, "X", 0.0);
    v8 = JSONS::RealFromJSON((unsigned int *)a1, "Y", 0.0);
    v9 = JSONS::RealFromJSON((unsigned int *)a1, "Z", 0.0);
    goto LABEL_5;
  }
  if (*(_DWORD *)a1 == 3)
  {
    Double = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::GetDouble(*(_WORD **)(a1 + 8), a3);
    v6 = Double;
    v7 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::GetDouble((_WORD *)(*(_QWORD *)(a1 + 8) + 24), Double);
    v8 = v7;
    v9 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::GetDouble((_WORD *)(*(_QWORD *)(a1 + 8) + 48), v7);
LABEL_5:
    *(float *)a2 = v6;
    *(float *)(a2 + 4) = v8;
    *(float *)(a2 + 8) = v9;
    *(_DWORD *)(a2 + 12) = 0;
    return;
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
}

void JSONS::VectorFromParentJSON(unsigned int *a1@<X0>, char *a2@<X1>, _QWORD *a3@<X8>)
{
  int *Member;
  double v6;

  Member = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember(a1, a2);
  if ((int *)(*((_QWORD *)a1 + 1) + 48 * *a1) == Member)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    JSONS::VectorFromJSON((uint64_t)(Member + 6), (uint64_t)a3, v6);
  }
}

double JSONS::TransformFromJSON@<D0>(unsigned int *a1@<X0>, char *a2@<X1>, float32x4_t *a3@<X8>)
{
  int *Member;
  double result;
  unsigned int *v7;
  int *MemberOrLegacyMember;
  double v9;
  int *v10;
  float32x4_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  a3->i64[0] = 0;
  a3->i64[1] = 0;
  a3[1] = (float32x4_t)xmmword_210802BA0;
  Member = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember(a1, a2);
  if ((int *)(*((_QWORD *)a1 + 1) + 48 * *a1) != Member)
  {
    v7 = (unsigned int *)(Member + 6);
    v11.i64[0] = (uint64_t)"Rotation";
    MemberOrLegacyMember = JSONS::getMemberOrLegacyMember((unsigned int *)Member + 6, "rotation", (char **)&v11, 1);
    if (MemberOrLegacyMember)
      JSONS::QuaternionFromJSON((uint64_t)MemberOrLegacyMember, a3 + 1, v9);
    v11.i64[0] = (uint64_t)"Translation";
    v10 = JSONS::getMemberOrLegacyMember(v7, "translation", (char **)&v11, 1);
    if (v10)
    {
      JSONS::VectorFromJSON((uint64_t)v10, (uint64_t)&v11, result);
      result = *(double *)v11.i64;
      *a3 = v11;
    }
  }
  return result;
}

int *JSONS::SolverSettingsFromJSON@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  int *result;
  int *v5;
  unsigned int *v6;
  int *Member;
  BOOL v8;
  int *v9;
  BOOL v10;
  int *v11;
  BOOL v12;
  int *v13;
  BOOL v14;
  int *v15;
  BOOL v16;
  int *v17;
  int v18;
  BOOL v19;
  __int128 v20;

  *(_QWORD *)a2 = 0x3727C5AC3E4CCCCDLL;
  *(_QWORD *)(a2 + 8) = 0x1E3F800000;
  *(_QWORD *)(a2 + 16) = 0x3F80000040800000;
  *(_WORD *)(a2 + 24) = 1;
  *(_BYTE *)(a2 + 26) = 0;
  *(_QWORD *)(a2 + 36) = 0;
  *(_QWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a2 + 44) = 0x3F80000000000000;
  *(_WORD *)(a2 + 52) = 0;
  *(_DWORD *)(a2 + 56) = 1117782016;
  result = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember(a1, "solver_conf_");
  if ((int *)(*((_QWORD *)a1 + 1) + 48 * *a1) != result)
  {
    v5 = result;
    v6 = (unsigned int *)(result + 6);
    Member = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember((unsigned int *)result + 6, "balance_moments_enabled_");
    v8 = (int *)(*((_QWORD *)v5 + 4) + 48 * v5[6]) != Member && *((_WORD *)Member + 23) == 10;
    *(_BYTE *)(a2 + 52) = v8;
    v9 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember(v6, "translate_root");
    v10 = (int *)(*((_QWORD *)v5 + 4) + 48 * v5[6]) != v9 && *((_WORD *)v9 + 23) == 10;
    *(_BYTE *)(a2 + 24) = v10;
    v11 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember(v6, "enable_shadow_posing_");
    v12 = (int *)(*((_QWORD *)v5 + 4) + 48 * v5[6]) != v11 && *((_WORD *)v11 + 23) == 10;
    *(_BYTE *)(a2 + 25) = v12;
    v13 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember(v6, "combine_errors_");
    v14 = (int *)(*((_QWORD *)v5 + 4) + 48 * v5[6]) != v13 && *((_WORD *)v13 + 23) == 10;
    *(_BYTE *)(a2 + 26) = v14;
    v15 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember(v6, "balance_use_default_zmp");
    v16 = (int *)(*((_QWORD *)v5 + 4) + 48 * v5[6]) != v15 && *((_WORD *)v15 + 23) == 10;
    *(_BYTE *)(a2 + 53) = v16;
    *(_DWORD *)(a2 + 28) = JSONS::BalanceTypeFromJSON(v6, "balance_task_type");
    v17 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember(v6, "max_iterations_");
    if ((int *)(*((_QWORD *)v5 + 4) + 48 * v5[6]) != v17 && (*((_WORD *)v17 + 23) & 0x10) != 0)
      v18 = v17[6];
    else
      v18 = -1;
    *(_DWORD *)(a2 + 12) = v18;
    *(float *)(a2 + 16) = JSONS::RealFromJSON(v6, "task_precision_", 0.0);
    *(float *)(a2 + 56) = JSONS::RealFromJSON(v6, "balance_figure_mass_", 0.0);
    *(float *)(a2 + 20) = JSONS::RealFromJSON(v6, "limits_gain_", 0.0);
    *(float *)(a2 + 48) = JSONS::RealFromJSON(v6, "balance_moments_weight_", 0.0);
    *(float *)a2 = JSONS::RealFromJSON(v6, "p_coeff_", 0.0);
    *(float *)(a2 + 4) = JSONS::RealFromJSON(v6, "solution_tolerance_", 0.0);
    *(float *)(a2 + 8) = JSONS::RealFromJSON(v6, "retargeting_gain_", 0.0);
    JSONS::VectorFromParentJSON(v6, "balance_zero_moment_point", &v20);
    *(_OWORD *)(a2 + 32) = v20;
    result = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember(v6, "balance_use_default_zmp");
    v19 = (int *)(*((_QWORD *)v5 + 4) + 48 * v5[6]) != result && *((_WORD *)result + 23) == 10;
    *(_BYTE *)(a2 + 53) = v19;
  }
  return result;
}

double JSONS::RigBalanceTaskFromJSON@<D0>(_DWORD *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  BOOL *v6;
  int *Member;
  double result;
  int *v9;
  unsigned int *v10;
  int *v11;
  int v12;
  __int128 v13;

  *(_DWORD *)a3 = 1;
  *(_WORD *)(a3 + 4) = 257;
  v6 = (BOOL *)(a3 + 4);
  *(_BYTE *)(a3 + 6) = 1;
  *(_OWORD *)(a3 + 16) = xmmword_2108040D0;
  *(_OWORD *)(a3 + 32) = xmmword_2108040E0;
  Member = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember(a2, "balance_task_");
  if ((int *)(*((_QWORD *)a2 + 1) + 48 * *a2) != Member)
  {
    v9 = Member;
    v10 = (unsigned int *)(Member + 6);
    v11 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember((unsigned int *)Member + 6, "global_up");
    if ((int *)(*((_QWORD *)v9 + 4) + 48 * v9[6]) != v11 && (*((_WORD *)v11 + 23) & 0x10) != 0)
      v12 = v11[6];
    else
      v12 = -1;
    *(_DWORD *)a3 = v12;
    JSONS::assignBoolArrayFromJSON(a1, v10, "position_dof", v6, 3);
    JSONS::VectorFromParentJSON(v10, "weight", &v13);
    *(_OWORD *)(a3 + 16) = v13;
    JSONS::VectorFromParentJSON(v10, "precision", &v13);
    result = *(double *)&v13;
    *(_OWORD *)(a3 + 32) = v13;
  }
  return result;
}

double JSONS::RigBoneBaseFromJSON(float32x4_t *a1, unsigned int *a2)
{
  int *v4;
  IKString *v5;
  int *v6;
  IKString *v7;
  int *Member;
  int v9;
  int *v10;
  int v11;
  double result;
  float32x4_t v13;
  float32x4_t v14[2];

  v4 = JSONS::StringFromJSON(a2, "name_");
  IKString::assign(&a1->i64[1], (char *)v4, v5);
  v6 = JSONS::StringFromJSON(a2, "parent_name_");
  IKString::assign((float32x4_t *)a1[2].i64, (char *)v6, v7);
  Member = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember(a2, "solver_index_");
  if ((int *)(*((_QWORD *)a2 + 1) + 48 * *a2) != Member && (*((_WORD *)Member + 23) & 0x10) != 0)
    v9 = Member[6];
  else
    v9 = -1;
  a1->i32[0] = v9;
  v10 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember(a2, "parent_index_");
  if ((int *)(*((_QWORD *)a2 + 1) + 48 * *a2) != v10 && (*((_WORD *)v10 + 23) & 0x10) != 0)
    v11 = v10[6];
  else
    v11 = -1;
  a1->i32[1] = v11;
  JSONS::TransformFromJSON(a2, "rest_transform_", v14);
  result = *(double *)v14[0].i64;
  v13 = v14[1];
  a1[4] = v14[0];
  a1[5] = v13;
  return result;
}

double JSONS::RigBoneFromJSON(_DWORD *a1, uint64_t a2, unsigned int *a3)
{
  int *Member;
  BOOL v7;
  int *v8;
  BOOL v9;
  int *v10;
  BOOL v11;
  int *v12;
  BOOL v13;
  int *v14;
  BOOL v15;
  int *v16;
  BOOL v17;
  int *v18;
  BOOL v19;
  double result;
  __int128 v21;

  JSONS::RigBoneBaseFromJSON((float32x4_t *)a2, a3);
  Member = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember(a3, "active_");
  v7 = (int *)(*((_QWORD *)a3 + 1) + 48 * *a3) != Member && *((_WORD *)Member + 23) == 10;
  *(_BYTE *)(a2 + 96) = v7;
  JSONS::assignBoolArrayFromJSON(a1, a3, "dof_", (BOOL *)(a2 + 97), 3);
  v8 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember(a3, "enable_limits_");
  v9 = (int *)(*((_QWORD *)a3 + 1) + 48 * *a3) != v8 && *((_WORD *)v8 + 23) == 10;
  *(_BYTE *)(a2 + 103) = v9;
  v10 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember(a3, "enable_retargeting_");
  v11 = (int *)(*((_QWORD *)a3 + 1) + 48 * *a3) != v10 && *((_WORD *)v10 + 23) == 10;
  *(_BYTE *)(a2 + 100) = v11;
  v12 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember(a3, "enable_target_translate_");
  v13 = (int *)(*((_QWORD *)a3 + 1) + 48 * *a3) != v12 && *((_WORD *)v12 + 23) == 10;
  *(_BYTE *)(a2 + 102) = v13;
  v14 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember(a3, "enable_stretch_limits_");
  v15 = (int *)(*((_QWORD *)a3 + 1) + 48 * *a3) != v14 && *((_WORD *)v14 + 23) == 10;
  *(_BYTE *)(a2 + 101) = v15;
  v16 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember(a3, "enforce_limits_");
  v17 = (int *)(*((_QWORD *)a3 + 1) + 48 * *a3) != v16 && *((_WORD *)v16 + 23) == 10;
  *(_BYTE *)(a2 + 104) = v17;
  *(_DWORD *)(a2 + 128) = JSONS::AxisFromJSON(a3, "limits_bone_axis_");
  JSONS::VectorFromParentJSON(a3, "limits_max_degrees_", &v21);
  *(_OWORD *)(a2 + 192) = v21;
  JSONS::VectorFromParentJSON(a3, "limits_min_degrees_", &v21);
  *(_OWORD *)(a2 + 176) = v21;
  *(float *)(a2 + 124) = JSONS::RealFromJSON(a3, "limits_gain_", 0.0);
  v18 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember(a3, "override_mass_");
  v19 = (int *)(*((_QWORD *)a3 + 1) + 48 * *a3) != v18 && *((_WORD *)v18 + 23) == 10;
  *(_BYTE *)(a2 + 108) = v19;
  *(float *)(a2 + 112) = JSONS::RealFromJSON(a3, "mass_", 0.0);
  *(float *)(a2 + 116) = JSONS::RealFromJSON(a3, "max_velocity_", 0.0);
  *(float *)(a2 + 120) = JSONS::RealFromJSON(a3, "retargeting_gain_", 0.0);
  JSONS::VectorFromParentJSON(a3, "retargeting_gain_dof", &v21);
  *(_OWORD *)(a2 + 160) = v21;
  *(float *)(a2 + 132) = JSONS::RealFromJSON(a3, "stretch_error_gain_", 0.0);
  JSONS::VectorFromParentJSON(a3, "stretch_max_", &v21);
  *(_OWORD *)(a2 + 224) = v21;
  JSONS::VectorFromParentJSON(a3, "stretch_min_", &v21);
  *(_OWORD *)(a2 + 208) = v21;
  JSONS::VectorFromParentJSON(a3, "stretch_stiffness_", &v21);
  *(_OWORD *)(a2 + 240) = v21;
  JSONS::assignBoolArrayFromJSON(a1, a3, "stretch_on_", (BOOL *)(a2 + 105), 3);
  JSONS::VectorFromParentJSON(a3, "weight_", &v21);
  result = *(double *)&v21;
  *(_OWORD *)(a2 + 144) = v21;
  return result;
}

void JSONS::SelfPenetrationBoneSettingsFromJSON(int *a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X2>, uint64_t a4@<X8>)
{
  _OWORD *v8;
  int *Member;
  BOOL v10;
  float32x4_t v11;
  __int128 v12;
  __int128 v13;
  int *v14;
  int v15;
  int *v16;
  int v17;
  float32x4_t v18;
  __int128 v19;
  float32x4_t v20;
  __int128 v21;

  *(_BYTE *)a4 = 0;
  *(_DWORD *)(a4 + 4) = 0;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_QWORD *)(a4 + 48) = 0;
  *(_QWORD *)(a4 + 56) = a2;
  *(_OWORD *)(a4 + 80) = xmmword_210802BA0;
  v8 = (_OWORD *)(a4 + 80);
  *(_QWORD *)(a4 + 64) = 0;
  *(_QWORD *)(a4 + 72) = 0;
  *(_QWORD *)(a4 + 96) = 0x3DCCCCCD00000000;
  *(_OWORD *)(a4 + 112) = xmmword_2108040D0;
  *(_OWORD *)(a4 + 128) = xmmword_2108040D0;
  *(_QWORD *)(a4 + 144) = -1;
  *(_QWORD *)(a4 + 152) = 0x4000000040000000;
  Member = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember(a3, "self_penetration_enabled");
  v10 = (int *)(*((_QWORD *)a3 + 1) + 48 * *a3) != Member && *((_WORD *)Member + 23) == 10;
  *(_BYTE *)a4 = v10;
  *(_DWORD *)(a4 + 4) = JSONS::CollisionShapeTypeFromJSON(a3, "collision_shape_type");
  JSONS::VectorFromParentJSON(a3, "collision_shape_extents", &v20);
  *(float32x4_t *)(a4 + 16) = v20;
  JSONS::ArrayFromJSON<IKString>("colliding_segments", a1, a2, (int *)a3, &v18);
  v11 = v18;
  v12 = v19;
  v18 = 0uLL;
  *(_QWORD *)&v19 = 0;
  v20 = v11;
  v21 = v12;
  FIK::swap((uint64_t *)(a4 + 32), (uint64_t *)&v20);
  FIK::IKArray<IKString>::~IKArray((uint64_t)&v20);
  FIK::IKArray<IKString>::~IKArray((uint64_t)&v18);
  JSONS::TransformFromJSON(a3, "local_offset", &v20);
  v13 = v21;
  *(float32x4_t *)(a4 + 64) = v20;
  *v8 = v13;
  *(float *)(a4 + 96) = JSONS::RealFromJSON(a3, "mesh_offset", 0.0);
  *(float *)(a4 + 100) = JSONS::RealFromJSON(a3, "filter_alpha", 0.0);
  JSONS::VectorFromParentJSON(a3, "position_weight", &v20);
  *(float32x4_t *)(a4 + 112) = v20;
  JSONS::VectorFromParentJSON(a3, "rotation_weight", &v20);
  *(float32x4_t *)(a4 + 128) = v20;
  v14 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember(a3, "position_depth");
  if ((int *)(*((_QWORD *)a3 + 1) + 48 * *a3) != v14 && (*((_WORD *)v14 + 23) & 0x10) != 0)
    v15 = v14[6];
  else
    v15 = -1;
  *(_DWORD *)(a4 + 144) = v15;
  v16 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember(a3, "rotation_depth");
  if ((int *)(*((_QWORD *)a3 + 1) + 48 * *a3) != v16 && (*((_WORD *)v16 + 23) & 0x10) != 0)
    v17 = v16[6];
  else
    v17 = -1;
  *(_DWORD *)(a4 + 148) = v17;
  *(float *)(a4 + 152) = JSONS::RealFromJSON(a3, "position_precision", 0.0);
  *(float *)(a4 + 156) = JSONS::RealFromJSON(a3, "rotation_precision", 0.0);
}

void JSONS::ArrayFromJSON<IKString>(char *__s@<X3>, int *a2@<X0>, uint64_t a3@<X1>, int *a4@<X2>, _QWORD *a5@<X8>)
{
  uint64_t *v9;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  a5[3] = a3;
  if ((int *)(*((_QWORD *)a4 + 1) + 48 * *a4) != rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember((unsigned int *)a4, __s))
  {
    v17 = __s;
    v18 = 0x405000000000000;
    v16 = strlen(__s);
    v9 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::operator[]<rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>(a4, (unsigned int *)&v16);
    if (*((_WORD *)v9 + 11) == 4 && *(_DWORD *)v9 != 0)
    {
      v11 = v9;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      while (1)
      {
        JSONS::ObjectFromJSON<IKString>((FIK *)v9, v11[1] + v12, &v16);
        v15 = *a2;
        if (*a2)
          v14 = 1;
        else
          FIK::IKArray<IKString>::push_back<IKString&,void>(a5, (uint64_t)&v16);
        if (v17)
          v9 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v18 + 24))(v18, v16, 0, 8);
        if (v15)
          break;
        ++v13;
        v12 += 24;
        if (v13 >= *(unsigned int *)v11)
          return;
      }
      if ((v14 & 1) == 0)
        FIK::IKArray<IKString>::~IKArray((uint64_t)a5);
    }
  }
}

int *JSONS::MoCapBoneFromJSON@<X0>(int *a1@<X0>, FIK::Allocator *a2@<X1>, unsigned int *a3@<X2>, uint64_t a4@<X8>)
{
  int *v8;
  IKString *v9;
  int *Member;
  int v11;
  __int128 v12;
  __int128 v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  int *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  int *v22;
  BOOL v23;
  int *v24;
  BOOL v25;
  int *v26;
  BOOL v27;
  int *v28;
  BOOL v29;
  int *v30;
  BOOL v31;
  int *result;
  int v33;
  _OWORD v34[2];
  float32x4_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  FIK::MoCapBone::MoCapBone((FIK::MoCapBone *)a4, a2);
  JSONS::RigBoneFromJSON(a1, a4, a3);
  v8 = JSONS::StringFromJSON(a3, "source_name");
  IKString::assign((_QWORD *)(a4 + 256), (char *)v8, v9);
  Member = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember(a3, "source_index");
  if ((int *)(*((_QWORD *)a3 + 1) + 48 * *a3) != Member && (*((_WORD *)Member + 23) & 0x10) != 0)
    v11 = Member[6];
  else
    v11 = -1;
  *(_DWORD *)(a4 + 280) = v11;
  JSONS::TransformFromJSON(a3, "source_rot_offset", &v35);
  v12 = v36;
  *(float32x4_t *)(a4 + 288) = v35;
  *(_OWORD *)(a4 + 304) = v12;
  JSONS::TransformFromJSON(a3, "source_rot_offset_p", &v35);
  v13 = v36;
  *(float32x4_t *)(a4 + 320) = v35;
  *(_OWORD *)(a4 + 336) = v13;
  *(_QWORD *)&v36 = 0x405000000000000;
  v35.i64[1] = (uint64_t)"acp";
  v35.i64[0] = 3;
  v14 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::operator[]<rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>((int *)a3, (unsigned int *)&v35);
  *(_QWORD *)&v36 = 0x405000000000000;
  v35.i64[1] = (uint64_t)"floor_compensation";
  v35.i64[0] = 18;
  v15 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::operator[]<rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>((int *)v14, (unsigned int *)&v35);
  *(_QWORD *)&v36 = 0x405000000000000;
  v35.i64[1] = (uint64_t)"auto_locking";
  v35.i64[0] = 12;
  v16 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::operator[]<rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>((int *)v14, (unsigned int *)&v35);
  v17 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember((unsigned int *)v14, "self_penetration");
  if ((int *)(v14[1] + 48 * *(unsigned int *)v14) != v17)
  {
    JSONS::SelfPenetrationBoneSettingsFromJSON(a1, (uint64_t)a2, (unsigned int *)v17 + 6, (uint64_t)&v35);
    *(_QWORD *)(a4 + 384) = v35.i64[0];
    v18 = v37;
    *(_OWORD *)(a4 + 400) = v36;
    v37 = 0uLL;
    v19 = v38;
    *(_QWORD *)&v38 = 0;
    v34[0] = v18;
    v34[1] = v19;
    FIK::swap((uint64_t *)(a4 + 416), (uint64_t *)v34);
    FIK::IKArray<IKString>::~IKArray((uint64_t)v34);
    v20 = v40;
    *(_OWORD *)(a4 + 448) = v39;
    *(_OWORD *)(a4 + 464) = v20;
    *(_QWORD *)(a4 + 480) = v41;
    v21 = v43;
    *(_OWORD *)(a4 + 496) = v42;
    *(_OWORD *)(a4 + 512) = v21;
    *(_OWORD *)(a4 + 528) = v44;
    FIK::IKArray<IKString>::~IKArray((uint64_t)&v37);
  }
  v22 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember((unsigned int *)v15, "is_correcting");
  v23 = (int *)(v15[1] + 48 * *(unsigned int *)v15) != v22 && *((_WORD *)v22 + 23) == 10;
  *(_BYTE *)(a4 + 353) = v23;
  *(float *)(a4 + 356) = JSONS::RealFromJSON((unsigned int *)v15, "mesh_offset", 0.0);
  v24 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember((unsigned int *)v15, "enabled");
  v25 = (int *)(v15[1] + 48 * *(unsigned int *)v15) != v24 && *((_WORD *)v24 + 23) == 10;
  *(_BYTE *)(a4 + 352) = v25;
  v26 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember((unsigned int *)v15, "offsets_hips");
  v27 = (int *)(v15[1] + 48 * *(unsigned int *)v15) != v26 && *((_WORD *)v26 + 23) == 10;
  *(_BYTE *)(a4 + 354) = v27;
  v28 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember((unsigned int *)v16, "is_locking");
  v29 = (int *)(v16[1] + 48 * *(unsigned int *)v16) != v28 && *((_WORD *)v28 + 23) == 10;
  *(_BYTE *)(a4 + 361) = v29;
  *(float *)(a4 + 364) = JSONS::RealFromJSON((unsigned int *)v16, "min_velocity_threshold", 0.0);
  *(float *)(a4 + 368) = JSONS::RealFromJSON((unsigned int *)v16, "max_velocity_threshold", 0.0);
  v30 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember((unsigned int *)v16, "enabled");
  v31 = (int *)(v16[1] + 48 * *(unsigned int *)v16) != v30 && *((_WORD *)v30 + 23) == 10;
  *(_BYTE *)(a4 + 360) = v31;
  result = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember((unsigned int *)v16, "blend_frames_count");
  if ((int *)(v16[1] + 48 * *(unsigned int *)v16) != result && (*((_WORD *)result + 23) & 0x10) != 0)
    v33 = result[6];
  else
    v33 = -1;
  *(_DWORD *)(a4 + 372) = v33;
  return result;
}

unint64_t JSONS::TaskPreprocessingFromJSON(int *a1)
{
  uint64_t *v2;
  float v3;
  uint64_t v4;
  int *Member;
  _QWORD v7[4];

  v7[3] = *MEMORY[0x24BDAC8D0];
  if ((int *)(*((_QWORD *)a1 + 1) + 48 * *a1) == rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember((unsigned int *)a1, "task_preprocessing"))
  {
    v4 = 0;
    v3 = 0.0;
  }
  else
  {
    v7[1] = "task_preprocessing";
    v7[2] = 0x405000000000000;
    v7[0] = 18;
    v2 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::operator[]<rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>(a1, (unsigned int *)v7);
    if ((int *)(v2[1] + 48 * *(unsigned int *)v2) == rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember((unsigned int *)v2, "filter_strength"))v3 = 0.0;
    else
      v3 = JSONS::RealFromJSON((unsigned int *)v2, "filter_strength", 0.0);
    v4 = (int *)(v2[1] + 48 * *(unsigned int *)v2) != rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember((unsigned int *)v2, "locking_active")&& (Member = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember((unsigned int *)v2, "locking_active"), (int *)(v2[1] + 48 * *(unsigned int *)v2) != Member)&& *((unsigned __int16 *)Member + 23) == 10;
    if ((int *)(v2[1] + 48 * *(unsigned int *)v2) != rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember((unsigned int *)v2, "unlock_blend_frames"))rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember((unsigned int *)v2, "unlock_blend_frames");
    if ((int *)(v2[1] + 48 * *(unsigned int *)v2) != rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember((unsigned int *)v2, "unlock_distance"))JSONS::RealFromJSON((unsigned int *)v2, "unlock_distance", 0.0);
  }
  return LODWORD(v3) | (unint64_t)(v4 << 32);
}

unint64_t JSONS::RigTaskFromJSON(_DWORD *a1, uint64_t a2, unsigned int *a3)
{
  int *v6;
  IKString *v7;
  int *Member;
  BOOL v9;
  int *v10;
  BOOL v11;
  int *v12;
  IKString *v13;
  int *v14;
  int v15;
  int *v16;
  BOOL v17;
  int *v18;
  int v19;
  int *v20;
  int v21;
  unint64_t result;
  uint64_t v23;
  __int128 v24;

  v6 = JSONS::StringFromJSON(a3, "name_");
  IKString::assign((_QWORD *)a2, (char *)v6, v7);
  Member = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember(a3, "has_position_");
  v9 = (int *)(*((_QWORD *)a3 + 1) + 48 * *a3) != Member && *((_WORD *)Member + 23) == 10;
  *(_BYTE *)(a2 + 52) = v9;
  v10 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember(a3, "has_rotation_");
  v11 = (int *)(*((_QWORD *)a3 + 1) + 48 * *a3) != v10 && *((_WORD *)v10 + 23) == 10;
  *(_BYTE *)(a2 + 53) = v11;
  v12 = JSONS::StringFromJSON(a3, "target_name_");
  IKString::assign((_QWORD *)(a2 + 24), (char *)v12, v13);
  v14 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember(a3, "target_index_");
  if ((int *)(*((_QWORD *)a3 + 1) + 48 * *a3) != v14 && (*((_WORD *)v14 + 23) & 0x10) != 0)
    v15 = v14[6];
  else
    v15 = -1;
  *(_DWORD *)(a2 + 48) = v15;
  JSONS::VectorFromParentJSON(a3, "tip_offset_", &v24);
  *(_OWORD *)(a2 + 144) = v24;
  v16 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember(a3, "position_as_pole_");
  v17 = (int *)(*((_QWORD *)a3 + 1) + 48 * *a3) != v16 && *((_WORD *)v16 + 23) == 10;
  *(_BYTE *)(a2 + 54) = v17;
  JSONS::assignBoolArrayFromJSON(a1, a3, "position_dof_", (BOOL *)(a2 + 55), 3);
  v18 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember(a3, "position_depth_");
  if ((int *)(*((_QWORD *)a3 + 1) + 48 * *a3) != v18 && (*((_WORD *)v18 + 23) & 0x10) != 0)
    v19 = v18[6];
  else
    v19 = -1;
  *(_DWORD *)(a2 + 64) = v19;
  JSONS::VectorFromParentJSON(a3, "position_weight_", &v24);
  *(_OWORD *)(a2 + 80) = v24;
  JSONS::VectorFromParentJSON(a3, "position_precision_", &v24);
  *(_OWORD *)(a2 + 112) = v24;
  JSONS::assignBoolArrayFromJSON(a1, a3, "rotation_dof_", (BOOL *)(a2 + 58), 3);
  v20 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember(a3, "rotation_depth_");
  if ((int *)(*((_QWORD *)a3 + 1) + 48 * *a3) != v20 && (*((_WORD *)v20 + 23) & 0x10) != 0)
    v21 = v20[6];
  else
    v21 = -1;
  *(_DWORD *)(a2 + 68) = v21;
  JSONS::VectorFromParentJSON(a3, "rotation_weight_", &v24);
  *(_OWORD *)(a2 + 96) = v24;
  JSONS::VectorFromParentJSON(a3, "rotation_precision_", &v24);
  *(_OWORD *)(a2 + 128) = v24;
  result = JSONS::TaskPreprocessingFromJSON((int *)a3);
  *(_QWORD *)(a2 + 160) = result;
  *(_QWORD *)(a2 + 168) = v23;
  return result;
}

int *JSONS::MoCapTaskFromJSON@<X0>(_DWORD *a1@<X0>, FIK::Allocator *a2@<X1>, unsigned int *a3@<X2>, uint64_t a4@<X8>)
{
  int v8;
  int *v9;
  IKString *v10;
  int *Member;
  float32x4_t v12;
  int *v13;
  BOOL v14;
  int *result;
  BOOL v16;
  float32x4_t v17[2];

  FIK::RigTask::RigTask((FIK::RigTask *)a4, a2);
  *(_QWORD *)(a4 + 176) = 0;
  *(_QWORD *)(a4 + 184) = 0;
  *(_QWORD *)(a4 + 192) = a2;
  v8 = -1;
  *(_DWORD *)(a4 + 200) = -1;
  *(_WORD *)(a4 + 204) = 1;
  *(_QWORD *)(a4 + 208) = 0;
  *(_QWORD *)(a4 + 216) = 0;
  *(_OWORD *)(a4 + 224) = xmmword_210802BA0;
  *(_OWORD *)(a4 + 240) = xmmword_2108040F0;
  JSONS::RigTaskFromJSON(a1, a4, a3);
  v9 = JSONS::StringFromJSON(a3, "source_name");
  IKString::assign((_QWORD *)(a4 + 176), (char *)v9, v10);
  Member = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember(a3, "source_index");
  if ((int *)(*((_QWORD *)a3 + 1) + 48 * *a3) != Member && (*((_WORD *)Member + 23) & 0x10) != 0)
    v8 = Member[6];
  *(_DWORD *)(a4 + 200) = v8;
  JSONS::TransformFromJSON(a3, "offset", v17);
  v12 = v17[1];
  *(float32x4_t *)(a4 + 208) = v17[0];
  *(float32x4_t *)(a4 + 224) = v12;
  JSONS::VectorFromParentJSON(a3, "scale_offset", v17);
  *(float32x4_t *)(a4 + 240) = v17[0];
  v13 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember(a3, "is_parent_constraint");
  v14 = (int *)(*((_QWORD *)a3 + 1) + 48 * *a3) != v13 && *((_WORD *)v13 + 23) == 10;
  *(_BYTE *)(a4 + 204) = v14;
  result = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember(a3, "is_zero_offset");
  v16 = (int *)(*((_QWORD *)a3 + 1) + 48 * *a3) != result && *((_WORD *)result + 23) == 10;
  *(_BYTE *)(a4 + 205) = v16;
  return result;
}

uint64_t JSONS::GameTaskFromJSON@<X0>(_DWORD *a1@<X0>, FIK::Allocator *a2@<X1>, unsigned int *a3@<X2>, uint64_t a4@<X8>)
{
  int *Member;
  BOOL v8;
  int *v9;
  BOOL v10;
  int *v11;
  BOOL v12;
  int *v13;
  BOOL v14;
  int *v15;
  BOOL v16;
  int *v17;
  BOOL v18;
  float32x4_t v19;
  uint64_t result;
  float32x4_t v21[2];

  FIK::RigTask::RigTask((FIK::RigTask *)a4, a2);
  *(_QWORD *)(a4 + 176) = 0;
  *(_DWORD *)(a4 + 184) = 1065353216;
  *(_OWORD *)(a4 + 208) = xmmword_210802BA0;
  *(_QWORD *)(a4 + 196) = 0;
  *(_QWORD *)(a4 + 188) = 0;
  *(_DWORD *)(a4 + 204) = 0;
  *(_DWORD *)(a4 + 236) = 0;
  *(_QWORD *)(a4 + 224) = 0;
  *(_WORD *)(a4 + 232) = 0;
  JSONS::RigTaskFromJSON(a1, a4, a3);
  Member = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember(a3, "is_raytrace_");
  v8 = (int *)(*((_QWORD *)a3 + 1) + 48 * *a3) != Member && *((_WORD *)Member + 23) == 10;
  *(_BYTE *)(a4 + 228) = v8;
  v9 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember(a3, "is_chest_");
  v10 = (int *)(*((_QWORD *)a3 + 1) + 48 * *a3) != v9 && *((_WORD *)v9 + 23) == 10;
  *(_BYTE *)(a4 + 229) = v10;
  v11 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember(a3, "is_vr_task_");
  v12 = (int *)(*((_QWORD *)a3 + 1) + 48 * *a3) != v11 && *((_WORD *)v11 + 23) == 10;
  *(_BYTE *)(a4 + 230) = v12;
  v13 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember(a3, "use_fk_orientation_");
  v14 = (int *)(*((_QWORD *)a3 + 1) + 48 * *a3) != v13 && *((_WORD *)v13 + 23) == 10;
  *(_BYTE *)(a4 + 231) = v14;
  v15 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember(a3, "is_ls_look_at_");
  v16 = (int *)(*((_QWORD *)a3 + 1) + 48 * *a3) != v15 && *((_WORD *)v15 + 23) == 10;
  *(_BYTE *)(a4 + 232) = v16;
  v17 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember(a3, "is_look_at_");
  v18 = (int *)(*((_QWORD *)a3 + 1) + 48 * *a3) != v17 && *((_WORD *)v17 + 23) == 10;
  *(_BYTE *)(a4 + 233) = v18;
  JSONS::VectorFromParentJSON(a3, "look_at_axis", v21);
  *(float32x4_t *)(a4 + 176) = v21[0];
  *(float *)(a4 + 236) = JSONS::RealFromJSON(a3, "mesh_offset_", 0.0);
  JSONS::TransformFromJSON(a3, "motion_controller_offset_", v21);
  v19 = v21[1];
  *(float32x4_t *)(a4 + 192) = v21[0];
  *(float32x4_t *)(a4 + 208) = v19;
  result = JSONS::BlendTypeFromJSON(a3, "blend_type_");
  *(_DWORD *)(a4 + 224) = result;
  return result;
}

double JSONS::IKRigFromJSON(_DWORD *a1, uint64_t a2, unsigned int *a3)
{
  int *v6;
  IKString *v7;
  int *Member;
  int v9;
  int *v10;
  BOOL v11;
  __int128 v12;
  double result;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  int v19;

  *(_DWORD *)(a2 + 48) = JSONS::RigTypeFromJSON(a3, "rig_type_");
  v6 = JSONS::StringFromJSON(a3, "uid");
  IKString::assign((_QWORD *)a2, (char *)v6, v7);
  *(float *)(a2 + 24) = JSONS::RealFromJSON(a3, "unit_scale", 1.0);
  *(_DWORD *)(a2 + 28) = JSONS::AxisFromJSON(a3, "up_axis");
  *(_DWORD *)(a2 + 32) = JSONS::AxisFromJSON(a3, "forward_axis");
  *(_DWORD *)(a2 + 36) = JSONS::AxisFromJSON(a3, "right_axis");
  Member = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember(a3, "left_handed");
  if ((int *)(*((_QWORD *)a3 + 1) + 48 * *a3) != Member && (*((_WORD *)Member + 23) & 0x10) != 0)
    v9 = Member[6];
  else
    v9 = -1;
  *(_DWORD *)(a2 + 40) = v9;
  v10 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember(a3, "continuous_solving_");
  v11 = (int *)(*((_QWORD *)a3 + 1) + 48 * *a3) != v10 && *((_WORD *)v10 + 23) == 10;
  *(_BYTE *)(a2 + 44) = v11;
  JSONS::SolverSettingsFromJSON(a3, (uint64_t)&v15);
  v12 = v16;
  *(_OWORD *)(a2 + 64) = v15;
  *(_OWORD *)(a2 + 80) = v12;
  *(_OWORD *)(a2 + 96) = v17;
  *(_QWORD *)(a2 + 112) = v18;
  *(_DWORD *)(a2 + 120) = v19;
  JSONS::RigBalanceTaskFromJSON(a1, a3, (uint64_t)&v15);
  *(_DWORD *)(a2 + 128) = v15;
  *(_DWORD *)(a2 + 131) = *(_DWORD *)((char *)&v15 + 3);
  result = *(double *)&v16;
  v14 = v17;
  *(_OWORD *)(a2 + 144) = v16;
  *(_OWORD *)(a2 + 160) = v14;
  return result;
}

void **JSONS::JSONLine@<X0>(uint64_t a1@<X0>, void **a2@<X1>, const void **a3@<X2>, void **a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *v10;
  __int128 v11;
  int v12;
  void *v13;
  size_t v14;
  _QWORD *v15;
  __int128 v16;
  _QWORD *v17;
  __int128 v18;
  int v19;
  void *v20;
  size_t v21;
  _QWORD *v22;
  __int128 v23;
  int v24;
  void *v25;
  size_t v26;
  _QWORD *v27;
  __int128 v28;
  void **result;
  _QWORD v30[2];
  char v31;
  uint64_t v32;
  __int128 __src;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;

  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)(a5 + 24) = FIK::defaultAllocator((FIK *)a1);
  std::operator+[abi:nn180100]<char,std::char_traits<char>,FIK::FIKAllocator<char>>((const void **)a5, a3, (uint64_t)v30);
  v10 = std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(v30, "\"", 1uLL);
  v11 = *((_OWORD *)v10 + 1);
  __src = *(_OWORD *)v10;
  v34 = v11;
  v10[1] = 0;
  v10[2] = 0;
  *v10 = 0;
  v12 = *(char *)(a1 + 23);
  if (v12 >= 0)
    v13 = (void *)a1;
  else
    v13 = *(void **)a1;
  if (v12 >= 0)
    v14 = *(unsigned __int8 *)(a1 + 23);
  else
    v14 = *(_QWORD *)(a1 + 8);
  v15 = std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(&__src, v13, v14);
  v16 = *((_OWORD *)v15 + 1);
  v35 = *(_OWORD *)v15;
  v36 = v16;
  v15[1] = 0;
  v15[2] = 0;
  *v15 = 0;
  v17 = std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(&v35, "\":", 2uLL);
  v18 = *((_OWORD *)v17 + 1);
  v37 = *(_OWORD *)v17;
  v38 = v18;
  v17[1] = 0;
  v17[2] = 0;
  *v17 = 0;
  v19 = *((char *)a2 + 23);
  if (v19 >= 0)
    v20 = a2;
  else
    v20 = *a2;
  if (v19 >= 0)
    v21 = *((unsigned __int8 *)a2 + 23);
  else
    v21 = (size_t)a2[1];
  v22 = std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(&v37, v20, v21);
  v23 = *((_OWORD *)v22 + 1);
  v39 = *(_OWORD *)v22;
  v40 = v23;
  v22[1] = 0;
  v22[2] = 0;
  *v22 = 0;
  v24 = *((char *)a4 + 23);
  if (v24 >= 0)
    v25 = a4;
  else
    v25 = *a4;
  if (v24 >= 0)
    v26 = *((unsigned __int8 *)a4 + 23);
  else
    v26 = (size_t)a4[1];
  v27 = std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(&v39, v25, v26);
  v28 = *((_OWORD *)v27 + 1);
  v41 = *(_OWORD *)v27;
  v42 = v28;
  v27[1] = 0;
  v27[2] = 0;
  *v27 = 0;
  result = std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::operator=[abi:nn180100]((void **)a5, &v41);
  if (SBYTE7(v42) < 0 && (_QWORD)v41)
    result = (void **)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**((_QWORD **)&v42 + 1) + 24))(*((_QWORD *)&v42 + 1), v41, 0, 8);
  if (SBYTE7(v40) < 0 && (_QWORD)v39)
    result = (void **)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**((_QWORD **)&v40 + 1) + 24))(*((_QWORD *)&v40 + 1), v39, 0, 8);
  if (SBYTE7(v38) < 0 && (_QWORD)v37)
    result = (void **)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**((_QWORD **)&v38 + 1) + 24))(*((_QWORD *)&v38 + 1), v37, 0, 8);
  if (SBYTE7(v36) < 0 && (_QWORD)v35)
    result = (void **)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**((_QWORD **)&v36 + 1) + 24))(*((_QWORD *)&v36 + 1), v35, 0, 8);
  if (SBYTE7(v34) < 0 && (_QWORD)__src)
    result = (void **)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**((_QWORD **)&v34 + 1) + 24))(*((_QWORD *)&v34 + 1), __src, 0, 8);
  if (v31 < 0)
  {
    if (v30[0])
      return (void **)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v32 + 24))(v32, v30[0], 0, 8);
  }
  return result;
}

uint64_t std::operator+[abi:nn180100]<char,std::char_traits<char>,FIK::FIKAllocator<char>>@<X0>(const void **a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  size_t v5;
  size_t v6;
  uint64_t result;
  char *v8;
  const void *v9;
  char *v10;
  const void *v11;
  const void *v12;

  if (*((char *)a1 + 23) >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = (size_t)a1[1];
  if (*((char *)a2 + 23) >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  v12 = a1[3];
  result = std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100](a3, v6 + v5, (uint64_t *)&v12);
  if (*(char *)(result + 23) >= 0)
    v8 = (char *)result;
  else
    v8 = *(char **)result;
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0)
      v9 = a1;
    else
      v9 = *a1;
    result = (uint64_t)memmove(v8, v9, v5);
  }
  v10 = &v8[v5];
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0)
      v11 = a2;
    else
      v11 = *a2;
    result = (uint64_t)memmove(v10, v11, v6);
  }
  v10[v6] = 0;
  return result;
}

void **std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::operator=[abi:nn180100](void **a1, __int128 *a2)
{
  void *v4;
  __int128 v5;

  v4 = a1[3];
  if (v4 == *((void **)a2 + 3))
  {
    if (*((char *)a1 + 23) < 0 && *a1)
      (*(void (**)(void *, void *, _QWORD, uint64_t))(*(_QWORD *)v4 + 24))(v4, *a1, 0, 8);
    v5 = *a2;
    a1[2] = (void *)*((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v5;
    *((_BYTE *)a2 + 23) = 0;
    *(_BYTE *)a2 = 0;
  }
  else
  {
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::operator=(a1, (void **)a2);
  }
  return a1;
}

void **JSONS::JSONLineInt@<X0>(__int128 *a1@<X0>, int a2@<W1>, __int128 *a3@<X2>, __int128 *a4@<X3>, uint64_t a5@<X8>)
{
  void **result;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 __dst;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  char __str[24];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  snprintf(__str, 0x18uLL, "%d", a2);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v22, __str);
  v21 = *((_QWORD *)a1 + 3);
  if (*((char *)a1 + 23) < 0)
  {
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::__init_copy_ctor_external((_QWORD **)&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v20 = *((_QWORD *)a1 + 2);
  }
  v18 = v24;
  if (SHIBYTE(v23) < 0)
  {
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::__init_copy_ctor_external((_QWORD **)&v16, (void *)v22, *((unint64_t *)&v22 + 1));
  }
  else
  {
    v16 = v22;
    v17 = v23;
  }
  v15 = *((_QWORD *)a3 + 3);
  if (*((char *)a3 + 23) < 0)
  {
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::__init_copy_ctor_external((_QWORD **)&v13, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v13 = *a3;
    v14 = *((_QWORD *)a3 + 2);
  }
  v12 = *((_QWORD *)a4 + 3);
  if (*((char *)a4 + 23) < 0)
  {
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::__init_copy_ctor_external((_QWORD **)&v10, *(void **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v10 = *a4;
    v11 = *((_QWORD *)a4 + 2);
  }
  result = JSONS::JSONLine((uint64_t)&__dst, (void **)&v16, (const void **)&v13, (void **)&v10, a5);
  if (SHIBYTE(v11) < 0 && (_QWORD)v10)
    result = (void **)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v12 + 24))(v12, v10, 0, 8);
  if (SHIBYTE(v14) < 0 && (_QWORD)v13)
    result = (void **)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v15 + 24))(v15, v13, 0, 8);
  if (SHIBYTE(v17) < 0 && (_QWORD)v16)
    result = (void **)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v18 + 24))(v18, v16, 0, 8);
  if (SHIBYTE(v20) < 0 && (_QWORD)__dst)
    result = (void **)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v21 + 24))(v21, __dst, 0, 8);
  if (SHIBYTE(v23) < 0)
  {
    if ((_QWORD)v22)
      return (void **)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v24 + 24))(v24, v22, 0, 8);
  }
  return result;
}

uint64_t JSONS::JSONLineReal@<X0>(__int128 *a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, int a4@<W4>, uint64_t a5@<X8>)
{
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 __dst;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (**v26)();
  _QWORD v27[8];
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t (**v31)();

  std::basic_ostringstream<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_ostringstream[abi:nn180100]((uint64_t)&v26);
  *(_QWORD *)((char *)&v27[1] + (_QWORD)*(v26 - 3)) = a4;
  std::ostream::operator<<();
  std::basic_stringbuf<char,std::char_traits<char>,FIK::FIKAllocator<char>>::str((uint64_t)v27, &v23);
  v22 = *((_QWORD *)a1 + 3);
  if (*((char *)a1 + 23) < 0)
  {
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::__init_copy_ctor_external((_QWORD **)&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v21 = *((_QWORD *)a1 + 2);
  }
  v19 = v25;
  if (SHIBYTE(v24) < 0)
  {
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::__init_copy_ctor_external((_QWORD **)&v17, (void *)v23, *((unint64_t *)&v23 + 1));
  }
  else
  {
    v17 = v23;
    v18 = v24;
  }
  v16 = *((_QWORD *)a2 + 3);
  if (*((char *)a2 + 23) < 0)
  {
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::__init_copy_ctor_external((_QWORD **)&v14, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v14 = *a2;
    v15 = *((_QWORD *)a2 + 2);
  }
  v13 = *((_QWORD *)a3 + 3);
  if (*((char *)a3 + 23) < 0)
  {
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::__init_copy_ctor_external((_QWORD **)&v11, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v11 = *a3;
    v12 = *((_QWORD *)a3 + 2);
  }
  JSONS::JSONLine((uint64_t)&__dst, (void **)&v17, (const void **)&v14, (void **)&v11, a5);
  if (SHIBYTE(v12) < 0 && (_QWORD)v11)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v13 + 24))(v13, v11, 0, 8);
  if (SHIBYTE(v15) < 0 && (_QWORD)v14)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v16 + 24))(v16, v14, 0, 8);
  if (SHIBYTE(v18) < 0 && (_QWORD)v17)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v19 + 24))(v19, v17, 0, 8);
  if (SHIBYTE(v21) < 0 && (_QWORD)__dst)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v22 + 24))(v22, __dst, 0, 8);
  if (SHIBYTE(v24) < 0 && (_QWORD)v23)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v25 + 24))(v25, v23, 0, 8);
  v31 = off_24CA6CAB0;
  v26 = off_24CA6CA88;
  v27[0] = off_24CA6CA00;
  if (v29 < 0 && v28)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v30 + 24))(v30, v28, 0, 8);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x212BCAF90](&v31);
}

uint64_t std::basic_ostringstream<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_ostringstream[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  FIK *v3;

  *(_QWORD *)a1 = &unk_24CA6A050;
  *(_QWORD *)(a1 + 120) = &unk_24CA6A078;
  v2 = (_QWORD *)(a1 + 120);
  std::ios_base::init((std::ios_base *)(a1 + 120), (void *)(a1 + 8));
  *(_QWORD *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = -1;
  *(_QWORD *)a1 = off_24CA6CA88;
  *v2 = off_24CA6CAB0;
  v3 = (FIK *)std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 8) = off_24CA6CA00;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 96) = FIK::defaultAllocator(v3);
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 16;
  return a1;
}

uint64_t std::basic_ostringstream<char,std::char_traits<char>,FIK::FIKAllocator<char>>::~basic_ostringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_24CA6CA88;
  *(_QWORD *)(a1 + 120) = off_24CA6CAB0;
  v2 = a1 + 120;
  *(_QWORD *)(a1 + 8) = off_24CA6CA00;
  if (*(char *)(a1 + 95) < 0)
  {
    v3 = *(_QWORD *)(a1 + 72);
    if (v3)
      (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)(a1 + 96) + 24))(*(_QWORD *)(a1 + 96), v3, 0, 8);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x212BCAF90](v2);
  return a1;
}

void **JSONS::JSONLineBool@<X0>(__int128 *a1@<X0>, int a2@<W1>, __int128 *a3@<X2>, __int128 *a4@<X3>, uint64_t a5@<X8>)
{
  const char *v9;
  void **result;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 __dst;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  if (a2)
    v9 = "true";
  else
    v9 = "false";
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v23, v9);
  v22 = *((_QWORD *)a1 + 3);
  if (*((char *)a1 + 23) < 0)
  {
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::__init_copy_ctor_external((_QWORD **)&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v21 = *((_QWORD *)a1 + 2);
  }
  v19 = v25;
  if (SHIBYTE(v24) < 0)
  {
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::__init_copy_ctor_external((_QWORD **)&v17, (void *)v23, *((unint64_t *)&v23 + 1));
  }
  else
  {
    v17 = v23;
    v18 = v24;
  }
  v16 = *((_QWORD *)a3 + 3);
  if (*((char *)a3 + 23) < 0)
  {
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::__init_copy_ctor_external((_QWORD **)&v14, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v14 = *a3;
    v15 = *((_QWORD *)a3 + 2);
  }
  v13 = *((_QWORD *)a4 + 3);
  if (*((char *)a4 + 23) < 0)
  {
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::__init_copy_ctor_external((_QWORD **)&v11, *(void **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v11 = *a4;
    v12 = *((_QWORD *)a4 + 2);
  }
  result = JSONS::JSONLine((uint64_t)&__dst, (void **)&v17, (const void **)&v14, (void **)&v11, a5);
  if (SHIBYTE(v12) < 0 && (_QWORD)v11)
    result = (void **)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v13 + 24))(v13, v11, 0, 8);
  if (SHIBYTE(v15) < 0 && (_QWORD)v14)
    result = (void **)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v16 + 24))(v16, v14, 0, 8);
  if (SHIBYTE(v18) < 0 && (_QWORD)v17)
    result = (void **)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v19 + 24))(v19, v17, 0, 8);
  if (SHIBYTE(v21) < 0 && (_QWORD)__dst)
    result = (void **)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v22 + 24))(v22, __dst, 0, 8);
  if (SHIBYTE(v24) < 0)
  {
    if ((_QWORD)v23)
      return (void **)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v25 + 24))(v25, v23, 0, 8);
  }
  return result;
}

void **JSONS::JSONLineStr@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, __int128 *a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *v9;
  __int128 v10;
  _QWORD *v11;
  __int128 v12;
  void **result;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 __dst;
  uint64_t v24;
  uint64_t v25;
  _QWORD __src[2];
  char v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  if (*(_QWORD *)(a2 + 8))
  {
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)__src, *(const char **)a2);
    v9 = std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::insert(__src, 0, "\"", 1uLL);
    v10 = *((_OWORD *)v9 + 1);
    v29 = *(_OWORD *)v9;
    v30 = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    v11 = std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(&v29, "\"", 1uLL);
    v12 = *((_OWORD *)v11 + 1);
    v31 = *(_OWORD *)v11;
    v32 = v12;
    v11[1] = 0;
    v11[2] = 0;
    *v11 = 0;
    if (SBYTE7(v30) < 0 && (_QWORD)v29)
      (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**((_QWORD **)&v30 + 1) + 24))(*((_QWORD *)&v30 + 1), v29, 0, 8);
    if (v27 < 0 && __src[0])
      (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v28 + 24))(v28, __src[0], 0, 8);
  }
  else
  {
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v31, "\"\"");
  }
  v25 = *((_QWORD *)a1 + 3);
  if (*((char *)a1 + 23) < 0)
  {
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::__init_copy_ctor_external((_QWORD **)&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v24 = *((_QWORD *)a1 + 2);
  }
  v22 = *((_QWORD *)&v32 + 1);
  if (SBYTE7(v32) < 0)
  {
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::__init_copy_ctor_external((_QWORD **)&v20, (void *)v31, *((unint64_t *)&v31 + 1));
  }
  else
  {
    v20 = v31;
    v21 = v32;
  }
  v19 = *((_QWORD *)a3 + 3);
  if (*((char *)a3 + 23) < 0)
  {
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::__init_copy_ctor_external((_QWORD **)&v17, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v17 = *a3;
    v18 = *((_QWORD *)a3 + 2);
  }
  v16 = *((_QWORD *)a4 + 3);
  if (*((char *)a4 + 23) < 0)
  {
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::__init_copy_ctor_external((_QWORD **)&v14, *(void **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v14 = *a4;
    v15 = *((_QWORD *)a4 + 2);
  }
  result = JSONS::JSONLine((uint64_t)&__dst, (void **)&v20, (const void **)&v17, (void **)&v14, a5);
  if (SHIBYTE(v15) < 0 && (_QWORD)v14)
    result = (void **)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v16 + 24))(v16, v14, 0, 8);
  if (SHIBYTE(v18) < 0 && (_QWORD)v17)
    result = (void **)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v19 + 24))(v19, v17, 0, 8);
  if (SHIBYTE(v21) < 0 && (_QWORD)v20)
    result = (void **)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v22 + 24))(v22, v20, 0, 8);
  if (SHIBYTE(v24) < 0 && (_QWORD)__dst)
    result = (void **)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v25 + 24))(v25, __dst, 0, 8);
  if (SBYTE7(v32) < 0)
  {
    if ((_QWORD)v31)
      return (void **)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**((_QWORD **)&v32 + 1) + 24))(*((_QWORD *)&v32 + 1), v31, 0, 8);
  }
  return result;
}

void **JSONS::JSONLineVect@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X2>, __int128 *a3@<X3>, uint64_t a4@<X8>)
{
  _QWORD *v8;
  size_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;
  size_t v13;
  void **result;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  void (***v23)(FIK::CrtAllocator *__hidden);
  __int128 __dst;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  char v28;
  uint64_t v29;
  __int128 v30;
  char v31;
  uint64_t v32;
  _QWORD *v33;
  size_t v34;
  unsigned __int8 v35;
  uint64_t v36;
  __int128 __src;
  uint64_t v38;
  void (***v39)(FIK::CrtAllocator *__hidden);

  __src = 0uLL;
  v38 = 0;
  v39 = FIK::defaultAllocator((FIK *)a1);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(&__src, "{", 1uLL);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v30, "X");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v27, ",");
  JSONS::JSONLineReal(&v30, (__int128 *)a2, &v27, 8, (uint64_t)&v33);
  if ((v35 & 0x80u) == 0)
    v8 = &v33;
  else
    v8 = v33;
  if ((v35 & 0x80u) == 0)
    v9 = v35;
  else
    v9 = v34;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(&__src, v8, v9);
  if ((char)v35 < 0 && v33)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v36 + 24))(v36, v33, 0, 8);
  if (v28 < 0 && (_QWORD)v27)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v29 + 24))(v29, v27, 0, 8);
  if (v31 < 0 && (_QWORD)v30)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v32 + 24))(v32, v30, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v30, "Y");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v27, ",");
  JSONS::JSONLineReal(&v30, (__int128 *)a2, &v27, 8, (uint64_t)&v33);
  if ((v35 & 0x80u) == 0)
    v10 = &v33;
  else
    v10 = v33;
  if ((v35 & 0x80u) == 0)
    v11 = v35;
  else
    v11 = v34;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(&__src, v10, v11);
  if ((char)v35 < 0 && v33)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v36 + 24))(v36, v33, 0, 8);
  if (v28 < 0 && (_QWORD)v27)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v29 + 24))(v29, v27, 0, 8);
  if (v31 < 0 && (_QWORD)v30)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v32 + 24))(v32, v30, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v30, "Z");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v27, (const char *)&unk_2108059BE);
  JSONS::JSONLineReal(&v30, (__int128 *)a2, &v27, 8, (uint64_t)&v33);
  if ((v35 & 0x80u) == 0)
    v12 = &v33;
  else
    v12 = v33;
  if ((v35 & 0x80u) == 0)
    v13 = v35;
  else
    v13 = v34;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(&__src, v12, v13);
  if ((char)v35 < 0 && v33)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v36 + 24))(v36, v33, 0, 8);
  if (v28 < 0 && (_QWORD)v27)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v29 + 24))(v29, v27, 0, 8);
  if (v31 < 0 && (_QWORD)v30)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v32 + 24))(v32, v30, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(&__src, "}", 1uLL);
  v26 = a1[3];
  if (*((char *)a1 + 23) < 0)
  {
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::__init_copy_ctor_external((_QWORD **)&__dst, (void *)*a1, a1[1]);
  }
  else
  {
    __dst = *(_OWORD *)a1;
    v25 = a1[2];
  }
  v23 = v39;
  if (SHIBYTE(v38) < 0)
  {
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::__init_copy_ctor_external((_QWORD **)&v21, (void *)__src, *((unint64_t *)&__src + 1));
  }
  else
  {
    v21 = __src;
    v22 = v38;
  }
  v20 = *(_QWORD *)(a2 + 24);
  if (*(char *)(a2 + 23) < 0)
  {
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::__init_copy_ctor_external((_QWORD **)&v18, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    v18 = *(_OWORD *)a2;
    v19 = *(_QWORD *)(a2 + 16);
  }
  v17 = *((_QWORD *)a3 + 3);
  if (*((char *)a3 + 23) < 0)
  {
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::__init_copy_ctor_external((_QWORD **)&v15, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v15 = *a3;
    v16 = *((_QWORD *)a3 + 2);
  }
  result = JSONS::JSONLine((uint64_t)&__dst, (void **)&v21, (const void **)&v18, (void **)&v15, a4);
  if (SHIBYTE(v16) < 0 && (_QWORD)v15)
    result = (void **)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v17 + 24))(v17, v15, 0, 8);
  if (SHIBYTE(v19) < 0 && (_QWORD)v18)
    result = (void **)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v20 + 24))(v20, v18, 0, 8);
  if (SHIBYTE(v22) < 0 && (_QWORD)v21)
    result = (void **)((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), _QWORD, _QWORD, uint64_t))(*v23)[3])(v23, v21, 0, 8);
  if (SHIBYTE(v25) < 0 && (_QWORD)__dst)
    result = (void **)(*(uint64_t (**)(unint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v26 + 24))(v26, __dst, 0, 8);
  if (SHIBYTE(v38) < 0)
  {
    if ((_QWORD)__src)
      return (void **)((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), _QWORD, _QWORD, uint64_t))(*v39)[3])(v39, __src, 0, 8);
  }
  return result;
}

void **JSONS::JSONLineQuat@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X2>, __int128 *a3@<X3>, uint64_t a4@<X8>)
{
  _QWORD *v8;
  size_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;
  size_t v13;
  _QWORD *v14;
  size_t v15;
  void **result;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  void (***v25)(FIK::CrtAllocator *__hidden);
  __int128 __dst;
  unint64_t v27;
  unint64_t v28;
  __int128 v29;
  char v30;
  uint64_t v31;
  __int128 v32;
  char v33;
  uint64_t v34;
  _QWORD *v35;
  size_t v36;
  unsigned __int8 v37;
  uint64_t v38;
  __int128 __src;
  uint64_t v40;
  void (***v41)(FIK::CrtAllocator *__hidden);

  __src = 0uLL;
  v40 = 0;
  v41 = FIK::defaultAllocator((FIK *)a1);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(&__src, "{", 1uLL);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v32, "X");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v29, ",");
  JSONS::JSONLineReal(&v32, (__int128 *)a2, &v29, 8, (uint64_t)&v35);
  if ((v37 & 0x80u) == 0)
    v8 = &v35;
  else
    v8 = v35;
  if ((v37 & 0x80u) == 0)
    v9 = v37;
  else
    v9 = v36;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(&__src, v8, v9);
  if ((char)v37 < 0 && v35)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v38 + 24))(v38, v35, 0, 8);
  if (v30 < 0 && (_QWORD)v29)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v31 + 24))(v31, v29, 0, 8);
  if (v33 < 0 && (_QWORD)v32)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v34 + 24))(v34, v32, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v32, "Y");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v29, ",");
  JSONS::JSONLineReal(&v32, (__int128 *)a2, &v29, 8, (uint64_t)&v35);
  if ((v37 & 0x80u) == 0)
    v10 = &v35;
  else
    v10 = v35;
  if ((v37 & 0x80u) == 0)
    v11 = v37;
  else
    v11 = v36;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(&__src, v10, v11);
  if ((char)v37 < 0 && v35)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v38 + 24))(v38, v35, 0, 8);
  if (v30 < 0 && (_QWORD)v29)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v31 + 24))(v31, v29, 0, 8);
  if (v33 < 0 && (_QWORD)v32)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v34 + 24))(v34, v32, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v32, "Z");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v29, ",");
  JSONS::JSONLineReal(&v32, (__int128 *)a2, &v29, 8, (uint64_t)&v35);
  if ((v37 & 0x80u) == 0)
    v12 = &v35;
  else
    v12 = v35;
  if ((v37 & 0x80u) == 0)
    v13 = v37;
  else
    v13 = v36;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(&__src, v12, v13);
  if ((char)v37 < 0 && v35)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v38 + 24))(v38, v35, 0, 8);
  if (v30 < 0 && (_QWORD)v29)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v31 + 24))(v31, v29, 0, 8);
  if (v33 < 0 && (_QWORD)v32)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v34 + 24))(v34, v32, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v32, "W");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v29, (const char *)&unk_2108059BE);
  JSONS::JSONLineReal(&v32, (__int128 *)a2, &v29, 8, (uint64_t)&v35);
  if ((v37 & 0x80u) == 0)
    v14 = &v35;
  else
    v14 = v35;
  if ((v37 & 0x80u) == 0)
    v15 = v37;
  else
    v15 = v36;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(&__src, v14, v15);
  if ((char)v37 < 0 && v35)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v38 + 24))(v38, v35, 0, 8);
  if (v30 < 0 && (_QWORD)v29)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v31 + 24))(v31, v29, 0, 8);
  if (v33 < 0 && (_QWORD)v32)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v34 + 24))(v34, v32, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(&__src, "}", 1uLL);
  v28 = a1[3];
  if (*((char *)a1 + 23) < 0)
  {
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::__init_copy_ctor_external((_QWORD **)&__dst, (void *)*a1, a1[1]);
  }
  else
  {
    __dst = *(_OWORD *)a1;
    v27 = a1[2];
  }
  v25 = v41;
  if (SHIBYTE(v40) < 0)
  {
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::__init_copy_ctor_external((_QWORD **)&v23, (void *)__src, *((unint64_t *)&__src + 1));
  }
  else
  {
    v23 = __src;
    v24 = v40;
  }
  v22 = *(_QWORD *)(a2 + 24);
  if (*(char *)(a2 + 23) < 0)
  {
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::__init_copy_ctor_external((_QWORD **)&v20, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    v20 = *(_OWORD *)a2;
    v21 = *(_QWORD *)(a2 + 16);
  }
  v19 = *((_QWORD *)a3 + 3);
  if (*((char *)a3 + 23) < 0)
  {
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::__init_copy_ctor_external((_QWORD **)&v17, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v17 = *a3;
    v18 = *((_QWORD *)a3 + 2);
  }
  result = JSONS::JSONLine((uint64_t)&__dst, (void **)&v23, (const void **)&v20, (void **)&v17, a4);
  if (SHIBYTE(v18) < 0 && (_QWORD)v17)
    result = (void **)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v19 + 24))(v19, v17, 0, 8);
  if (SHIBYTE(v21) < 0 && (_QWORD)v20)
    result = (void **)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v22 + 24))(v22, v20, 0, 8);
  if (SHIBYTE(v24) < 0 && (_QWORD)v23)
    result = (void **)((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), _QWORD, _QWORD, uint64_t))(*v25)[3])(v25, v23, 0, 8);
  if (SHIBYTE(v27) < 0 && (_QWORD)__dst)
    result = (void **)(*(uint64_t (**)(unint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v28 + 24))(v28, __dst, 0, 8);
  if (SHIBYTE(v40) < 0)
  {
    if ((_QWORD)__src)
      return (void **)((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), _QWORD, _QWORD, uint64_t))(*v41)[3])(v41, __src, 0, 8);
  }
  return result;
}

void **JSONS::JSONLineTransform@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X2>, __int128 *a3@<X3>, uint64_t a4@<X8>)
{
  _QWORD *v8;
  size_t v9;
  _QWORD *v10;
  size_t v11;
  void **result;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  void (***v21)(FIK::CrtAllocator *__hidden);
  __int128 __dst;
  unint64_t v23;
  unint64_t v24;
  __int128 v25;
  char v26;
  uint64_t v27;
  unint64_t v28[2];
  char v29;
  uint64_t v30;
  _QWORD *v31;
  size_t v32;
  unsigned __int8 v33;
  uint64_t v34;
  __int128 __src;
  uint64_t v36;
  void (***v37)(FIK::CrtAllocator *__hidden);

  __src = 0uLL;
  v36 = 0;
  v37 = FIK::defaultAllocator((FIK *)a1);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(&__src, "{", 1uLL);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)v28, "translation");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v25, ",");
  JSONS::JSONLineVect(v28, a2, &v25, (uint64_t)&v31);
  if ((v33 & 0x80u) == 0)
    v8 = &v31;
  else
    v8 = v31;
  if ((v33 & 0x80u) == 0)
    v9 = v33;
  else
    v9 = v32;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(&__src, v8, v9);
  if ((char)v33 < 0 && v31)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v34 + 24))(v34, v31, 0, 8);
  if (v26 < 0 && (_QWORD)v25)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v27 + 24))(v27, v25, 0, 8);
  if (v29 < 0 && v28[0])
    (*(void (**)(uint64_t, unint64_t, _QWORD, uint64_t))(*(_QWORD *)v30 + 24))(v30, v28[0], 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)v28, "rotation");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v25, (const char *)&unk_2108059BE);
  JSONS::JSONLineQuat(v28, a2, &v25, (uint64_t)&v31);
  if ((v33 & 0x80u) == 0)
    v10 = &v31;
  else
    v10 = v31;
  if ((v33 & 0x80u) == 0)
    v11 = v33;
  else
    v11 = v32;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(&__src, v10, v11);
  if ((char)v33 < 0 && v31)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v34 + 24))(v34, v31, 0, 8);
  if (v26 < 0 && (_QWORD)v25)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v27 + 24))(v27, v25, 0, 8);
  if (v29 < 0 && v28[0])
    (*(void (**)(uint64_t, unint64_t, _QWORD, uint64_t))(*(_QWORD *)v30 + 24))(v30, v28[0], 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(&__src, "}", 1uLL);
  v24 = a1[3];
  if (*((char *)a1 + 23) < 0)
  {
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::__init_copy_ctor_external((_QWORD **)&__dst, (void *)*a1, a1[1]);
  }
  else
  {
    __dst = *(_OWORD *)a1;
    v23 = a1[2];
  }
  v21 = v37;
  if (SHIBYTE(v36) < 0)
  {
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::__init_copy_ctor_external((_QWORD **)&v19, (void *)__src, *((unint64_t *)&__src + 1));
  }
  else
  {
    v19 = __src;
    v20 = v36;
  }
  v18 = *(_QWORD *)(a2 + 24);
  if (*(char *)(a2 + 23) < 0)
  {
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::__init_copy_ctor_external((_QWORD **)&v16, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    v16 = *(_OWORD *)a2;
    v17 = *(_QWORD *)(a2 + 16);
  }
  v15 = *((_QWORD *)a3 + 3);
  if (*((char *)a3 + 23) < 0)
  {
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::__init_copy_ctor_external((_QWORD **)&v13, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v13 = *a3;
    v14 = *((_QWORD *)a3 + 2);
  }
  result = JSONS::JSONLine((uint64_t)&__dst, (void **)&v19, (const void **)&v16, (void **)&v13, a4);
  if (SHIBYTE(v14) < 0 && (_QWORD)v13)
    result = (void **)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v15 + 24))(v15, v13, 0, 8);
  if (SHIBYTE(v17) < 0 && (_QWORD)v16)
    result = (void **)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v18 + 24))(v18, v16, 0, 8);
  if (SHIBYTE(v20) < 0 && (_QWORD)v19)
    result = (void **)((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), _QWORD, _QWORD, uint64_t))(*v21)[3])(v21, v19, 0, 8);
  if (SHIBYTE(v23) < 0 && (_QWORD)__dst)
    result = (void **)(*(uint64_t (**)(unint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v24 + 24))(v24, __dst, 0, 8);
  if (SHIBYTE(v36) < 0)
  {
    if ((_QWORD)__src)
      return (void **)((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), _QWORD, _QWORD, uint64_t))(*v37)[3])(v37, __src, 0, 8);
  }
  return result;
}

void **JSONS::JSONLineIKArrayString@<X0>(__int128 *a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, __int128 *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  uint64_t v15;
  char *v16;
  size_t v17;
  void **result;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  __int128 __dst;
  uint64_t v31;
  uint64_t v32;
  __int128 __src;
  uint64_t v34;
  uint64_t v35;

  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&__src, "[");
  v8 = *a2;
  if ((unint64_t)*a2 >= 2)
  {
    v9 = 0;
    v10 = 1;
    do
    {
      std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::push_back(&__src, 34);
      v11 = a2[2];
      if (*(_QWORD *)(v11 + 24 * v9 + 8))
        v12 = *(char **)(v11 + 24 * v9);
      else
        v12 = (char *)&unk_2108059BE;
      v13 = strlen(v12);
      std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(&__src, v12, v13);
      std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(&__src, "\",", 2uLL);
      v9 = v10;
    }
    while (v8 - 1 > (unint64_t)v10++);
  }
  if (v8)
  {
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::push_back(&__src, 34);
    v15 = a2[2];
    if (*(_QWORD *)(v15 + 24 * (v8 - 1) + 8))
      v16 = *(char **)(v15 + 24 * (v8 - 1));
    else
      v16 = (char *)&unk_2108059BE;
    v17 = strlen(v16);
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(&__src, v16, v17);
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::push_back(&__src, 34);
  }
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(&__src, "]", 1uLL);
  v32 = *((_QWORD *)a1 + 3);
  if (*((char *)a1 + 23) < 0)
  {
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::__init_copy_ctor_external((_QWORD **)&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v31 = *((_QWORD *)a1 + 2);
  }
  v29 = v35;
  if (SHIBYTE(v34) < 0)
  {
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::__init_copy_ctor_external((_QWORD **)&v27, (void *)__src, *((unint64_t *)&__src + 1));
  }
  else
  {
    v27 = __src;
    v28 = v34;
  }
  v26 = *((_QWORD *)a3 + 3);
  if (*((char *)a3 + 23) < 0)
  {
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::__init_copy_ctor_external((_QWORD **)&v24, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v24 = *a3;
    v25 = *((_QWORD *)a3 + 2);
  }
  v23 = *((_QWORD *)a4 + 3);
  if (*((char *)a4 + 23) < 0)
  {
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::__init_copy_ctor_external((_QWORD **)&v21, *(void **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v21 = *a4;
    v22 = *((_QWORD *)a4 + 2);
  }
  result = JSONS::JSONLine((uint64_t)&__dst, (void **)&v27, (const void **)&v24, (void **)&v21, a5);
  if (SHIBYTE(v22) < 0 && (_QWORD)v21)
    result = (void **)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v23 + 24))(v23, v21, 0, 8);
  if (SHIBYTE(v25) < 0 && (_QWORD)v24)
    result = (void **)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v26 + 24))(v26, v24, 0, 8);
  if (SHIBYTE(v28) < 0 && (_QWORD)v27)
    result = (void **)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v29 + 24))(v29, v27, 0, 8);
  if (SHIBYTE(v31) < 0 && (_QWORD)__dst)
    result = (void **)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v32 + 24))(v32, __dst, 0, 8);
  if (SHIBYTE(v34) < 0)
  {
    if ((_QWORD)__src)
      return (void **)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v35 + 24))(v35, __src, 0, 8);
  }
  return result;
}

void **JSONS::JSONLineRigType@<X0>(FIK *a1@<X0>, int *a2@<X1>, __int128 *a3@<X2>, __int128 *a4@<X3>, uint64_t a5@<X8>)
{
  int v9;
  char *v10;
  uint64_t v11;
  void **result;
  uint64_t v13;
  uint64_t v14;
  void (***v15)(FIK::CrtAllocator *__hidden);

  v9 = *a2;
  if (*a2 == 2)
  {
    v13 = 0;
    v14 = 0;
    v15 = FIK::defaultAllocator(a1);
    v10 = "GameRigType";
    v11 = 11;
  }
  else
  {
    v13 = 0;
    v14 = 0;
    if (v9 == 1)
    {
      v15 = FIK::defaultAllocator(a1);
      v10 = "MoCapRigType";
      v11 = 12;
    }
    else
    {
      v15 = FIK::defaultAllocator(a1);
      v10 = "IKRigType";
      v11 = 9;
    }
  }
  IKString::assign(&v13, v10, (IKString *)v11);
  result = JSONS::JSONLineStr((__int128 *)a1, (uint64_t)&v13, a3, a4, a5);
  if (v14)
    return (void **)((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v15)[3])(v15, v13, 0, 8);
  return result;
}

void JSONS::JSONLineAxis(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void **sub_2107A1650(FIK *a1)
{
  __int128 *v1;
  __int128 *v2;
  __int128 *v3;
  uint64_t v4;
  void **result;
  uint64_t v6;
  uint64_t v7;
  void (***v8)(FIK::CrtAllocator *__hidden);

  v6 = 0;
  v7 = 0;
  v8 = FIK::defaultAllocator(a1);
  IKString::assign(&v6, "X", (IKString *)1);
  result = JSONS::JSONLineStr(v3, (uint64_t)&v6, v2, v1, v4);
  if (v7)
    return (void **)((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v8)[3])(v8, v6, 0, 8);
  return result;
}

void JSONS::JSONLineAimingMode(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void **sub_2107A1784(FIK *a1)
{
  __int128 *v1;
  __int128 *v2;
  __int128 *v3;
  uint64_t v4;
  void **result;
  uint64_t v6;
  uint64_t v7;
  void (***v8)(FIK::CrtAllocator *__hidden);

  v6 = 0;
  v7 = 0;
  v8 = FIK::defaultAllocator(a1);
  IKString::assign(&v6, "Disabled", (IKString *)8);
  result = JSONS::JSONLineStr(v3, (uint64_t)&v6, v2, v1, v4);
  if (v7)
    return (void **)((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v8)[3])(v8, v6, 0, 8);
  return result;
}

void **JSONS::JSONLineBalanceType@<X0>(FIK *a1@<X0>, int *a2@<X1>, __int128 *a3@<X2>, __int128 *a4@<X3>, uint64_t a5@<X8>)
{
  int v9;
  char *v10;
  uint64_t v11;
  void **result;
  uint64_t v13;
  uint64_t v14;
  void (***v15)(FIK::CrtAllocator *__hidden);

  v9 = *a2;
  if (*a2 == 2)
  {
    v13 = 0;
    v14 = 0;
    v15 = FIK::defaultAllocator(a1);
    v10 = "StaticBalance";
    v11 = 13;
  }
  else
  {
    v13 = 0;
    v14 = 0;
    if (v9 == 1)
    {
      v15 = FIK::defaultAllocator(a1);
      v10 = "CentreOfMass";
      v11 = 12;
    }
    else
    {
      v15 = FIK::defaultAllocator(a1);
      v10 = "Disabled";
      v11 = 8;
    }
  }
  IKString::assign(&v13, v10, (IKString *)v11);
  result = JSONS::JSONLineStr((__int128 *)a1, (uint64_t)&v13, a3, a4, a5);
  if (v14)
    return (void **)((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v15)[3])(v15, v13, 0, 8);
  return result;
}

void JSONS::JSONLineCollisionShapeType(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void **sub_2107A197C(FIK *a1)
{
  __int128 *v1;
  __int128 *v2;
  __int128 *v3;
  uint64_t v4;
  void **result;
  uint64_t v6;
  uint64_t v7;
  void (***v8)(FIK::CrtAllocator *__hidden);

  v6 = 0;
  v7 = 0;
  v8 = FIK::defaultAllocator(a1);
  IKString::assign(&v6, "None", (IKString *)4);
  result = JSONS::JSONLineStr(v3, (uint64_t)&v6, v2, v1, v4);
  if (v7)
    return (void **)((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v8)[3])(v8, v6, 0, 8);
  return result;
}

_QWORD *JSONS::JSONObject<FIK::Item>@<X0>(int *a1@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  _QWORD *v5;
  size_t v6;
  _QWORD *v7;
  size_t v8;
  __int128 v10;
  char v11;
  uint64_t v12;
  __int128 v13;
  char v14;
  uint64_t v15;
  __int128 v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  size_t v20;
  unsigned __int8 v21;
  uint64_t v22;

  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)a2, "{");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v16, "index");
  v4 = *a1;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v13, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v10, ",");
  JSONS::JSONLineInt(&v16, v4, &v13, &v10, (uint64_t)&v19);
  if ((v21 & 0x80u) == 0)
    v5 = &v19;
  else
    v5 = v19;
  if ((v21 & 0x80u) == 0)
    v6 = v21;
  else
    v6 = v20;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, v5, v6);
  if ((char)v21 < 0 && v19)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v22 + 24))(v22, v19, 0, 8);
  if (v11 < 0 && (_QWORD)v10)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v12 + 24))(v12, v10, 0, 8);
  if (v14 < 0 && (_QWORD)v13)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v15 + 24))(v15, v13, 0, 8);
  if (v17 < 0 && (_QWORD)v16)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v18 + 24))(v18, v16, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v16, "name");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v13, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v10, (const char *)&unk_2108059BE);
  JSONS::JSONLineStr(&v16, (uint64_t)(a1 + 2), &v13, &v10, (uint64_t)&v19);
  if ((v21 & 0x80u) == 0)
    v7 = &v19;
  else
    v7 = v19;
  if ((v21 & 0x80u) == 0)
    v8 = v21;
  else
    v8 = v20;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, v7, v8);
  if ((char)v21 < 0 && v19)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v22 + 24))(v22, v19, 0, 8);
  if (v11 < 0 && (_QWORD)v10)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v12 + 24))(v12, v10, 0, 8);
  if (v14 < 0 && (_QWORD)v13)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v15 + 24))(v15, v13, 0, 8);
  if (v17 < 0 && (_QWORD)v16)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v18 + 24))(v18, v16, 0, 8);
  return std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::push_back(a2, 125);
}

_QWORD *JSONS::JSONObject<FIK::TaskPreprocessing>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  size_t v5;
  int v6;
  _QWORD *v7;
  size_t v8;
  int v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;
  size_t v13;
  __int128 v15;
  char v16;
  uint64_t v17;
  __int128 v18;
  char v19;
  uint64_t v20;
  __int128 v21;
  char v22;
  uint64_t v23;
  _QWORD *v24;
  size_t v25;
  unsigned __int8 v26;
  uint64_t v27;

  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)a2, "{");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v21, "filter_strength");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v18, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v15, ",");
  JSONS::JSONLineReal(&v21, &v18, &v15, 8, (uint64_t)&v24);
  if ((v26 & 0x80u) == 0)
    v4 = &v24;
  else
    v4 = v24;
  if ((v26 & 0x80u) == 0)
    v5 = v26;
  else
    v5 = v25;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, v4, v5);
  if ((char)v26 < 0 && v24)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v27 + 24))(v27, v24, 0, 8);
  if (v16 < 0 && (_QWORD)v15)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v17 + 24))(v17, v15, 0, 8);
  if (v19 < 0 && (_QWORD)v18)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v20 + 24))(v20, v18, 0, 8);
  if (v22 < 0 && (_QWORD)v21)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v23 + 24))(v23, v21, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v21, "locking_active");
  v6 = *(unsigned __int8 *)(a1 + 4);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v18, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v15, ",");
  JSONS::JSONLineBool(&v21, v6, &v18, &v15, (uint64_t)&v24);
  if ((v26 & 0x80u) == 0)
    v7 = &v24;
  else
    v7 = v24;
  if ((v26 & 0x80u) == 0)
    v8 = v26;
  else
    v8 = v25;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, v7, v8);
  if ((char)v26 < 0 && v24)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v27 + 24))(v27, v24, 0, 8);
  if (v16 < 0 && (_QWORD)v15)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v17 + 24))(v17, v15, 0, 8);
  if (v19 < 0 && (_QWORD)v18)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v20 + 24))(v20, v18, 0, 8);
  if (v22 < 0 && (_QWORD)v21)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v23 + 24))(v23, v21, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v21, "unlock_blend_frames");
  v9 = *(_DWORD *)(a1 + 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v18, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v15, ",");
  JSONS::JSONLineInt(&v21, v9, &v18, &v15, (uint64_t)&v24);
  if ((v26 & 0x80u) == 0)
    v10 = &v24;
  else
    v10 = v24;
  if ((v26 & 0x80u) == 0)
    v11 = v26;
  else
    v11 = v25;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, v10, v11);
  if ((char)v26 < 0 && v24)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v27 + 24))(v27, v24, 0, 8);
  if (v16 < 0 && (_QWORD)v15)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v17 + 24))(v17, v15, 0, 8);
  if (v19 < 0 && (_QWORD)v18)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v20 + 24))(v20, v18, 0, 8);
  if (v22 < 0 && (_QWORD)v21)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v23 + 24))(v23, v21, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v21, "unlock_distance");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v18, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v15, (const char *)&unk_2108059BE);
  JSONS::JSONLineReal(&v21, &v18, &v15, 8, (uint64_t)&v24);
  if ((v26 & 0x80u) == 0)
    v12 = &v24;
  else
    v12 = v24;
  if ((v26 & 0x80u) == 0)
    v13 = v26;
  else
    v13 = v25;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, v12, v13);
  if ((char)v26 < 0 && v24)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v27 + 24))(v27, v24, 0, 8);
  if (v16 < 0 && (_QWORD)v15)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v17 + 24))(v17, v15, 0, 8);
  if (v19 < 0 && (_QWORD)v18)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v20 + 24))(v20, v18, 0, 8);
  if (v22 < 0 && (_QWORD)v21)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v23 + 24))(v23, v21, 0, 8);
  return std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::push_back(a2, 125);
}

_QWORD *JSONS::JSONObject<FIK::SelfPenetrationBone>@<X0>(unsigned __int8 *a1@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  _QWORD *v5;
  size_t v6;
  _QWORD *v7;
  size_t v8;
  _QWORD *v9;
  size_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;
  size_t v14;
  _QWORD *v15;
  size_t v16;
  _QWORD *v17;
  size_t v18;
  _QWORD *v19;
  size_t v20;
  _QWORD *v21;
  size_t v22;
  int v23;
  _QWORD *v24;
  size_t v25;
  int v26;
  _QWORD *v27;
  size_t v28;
  _QWORD *v29;
  size_t v30;
  _QWORD *v31;
  size_t v32;
  __int128 v34;
  char v35;
  uint64_t v36;
  __int128 v37;
  char v38;
  uint64_t v39;
  __int128 v40;
  char v41;
  uint64_t v42;
  _QWORD *v43;
  size_t v44;
  unsigned __int8 v45;
  uint64_t v46;

  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)a2, "\"self_penetration\":{");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v40, "self_penetration_enabled");
  v4 = *a1;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v37, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v34, ",");
  JSONS::JSONLineBool(&v40, v4, &v37, &v34, (uint64_t)&v43);
  if ((v45 & 0x80u) == 0)
    v5 = &v43;
  else
    v5 = v43;
  if ((v45 & 0x80u) == 0)
    v6 = v45;
  else
    v6 = v44;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, v5, v6);
  if ((char)v45 < 0 && v43)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v46 + 24))(v46, v43, 0, 8);
  if (v35 < 0 && (_QWORD)v34)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v36 + 24))(v36, v34, 0, 8);
  if (v38 < 0 && (_QWORD)v37)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v39 + 24))(v39, v37, 0, 8);
  if (v41 < 0 && (_QWORD)v40)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v42 + 24))(v42, v40, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v40, "collision_shape_type");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v37, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v34, ",");
  JSONS::JSONLineCollisionShapeType((uint64_t)&v40, (uint64_t)(a1 + 4));
  if ((v45 & 0x80u) == 0)
    v7 = &v43;
  else
    v7 = v43;
  if ((v45 & 0x80u) == 0)
    v8 = v45;
  else
    v8 = v44;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, v7, v8);
  if ((char)v45 < 0 && v43)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v46 + 24))(v46, v43, 0, 8);
  if (v35 < 0 && (_QWORD)v34)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v36 + 24))(v36, v34, 0, 8);
  if (v38 < 0 && (_QWORD)v37)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v39 + 24))(v39, v37, 0, 8);
  if (v41 < 0 && (_QWORD)v40)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v42 + 24))(v42, v40, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v40, "collision_shape_extents");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v37, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v34, ",");
  JSONS::JSONLineVect((unint64_t *)&v40, (uint64_t)&v37, &v34, (uint64_t)&v43);
  if ((v45 & 0x80u) == 0)
    v9 = &v43;
  else
    v9 = v43;
  if ((v45 & 0x80u) == 0)
    v10 = v45;
  else
    v10 = v44;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, v9, v10);
  if ((char)v45 < 0 && v43)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v46 + 24))(v46, v43, 0, 8);
  if (v35 < 0 && (_QWORD)v34)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v36 + 24))(v36, v34, 0, 8);
  if (v38 < 0 && (_QWORD)v37)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v39 + 24))(v39, v37, 0, 8);
  if (v41 < 0 && (_QWORD)v40)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v42 + 24))(v42, v40, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v40, "colliding_segments");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v37, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v34, ",");
  JSONS::JSONLineIKArrayString(&v40, (uint64_t *)a1 + 4, &v37, &v34, (uint64_t)&v43);
  if ((v45 & 0x80u) == 0)
    v11 = &v43;
  else
    v11 = v43;
  if ((v45 & 0x80u) == 0)
    v12 = v45;
  else
    v12 = v44;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, v11, v12);
  if ((char)v45 < 0 && v43)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v46 + 24))(v46, v43, 0, 8);
  if (v35 < 0 && (_QWORD)v34)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v36 + 24))(v36, v34, 0, 8);
  if (v38 < 0 && (_QWORD)v37)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v39 + 24))(v39, v37, 0, 8);
  if (v41 < 0 && (_QWORD)v40)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v42 + 24))(v42, v40, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v40, "local_offset");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v37, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v34, ",");
  JSONS::JSONLineTransform((unint64_t *)&v40, (uint64_t)&v37, &v34, (uint64_t)&v43);
  if ((v45 & 0x80u) == 0)
    v13 = &v43;
  else
    v13 = v43;
  if ((v45 & 0x80u) == 0)
    v14 = v45;
  else
    v14 = v44;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, v13, v14);
  if ((char)v45 < 0 && v43)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v46 + 24))(v46, v43, 0, 8);
  if (v35 < 0 && (_QWORD)v34)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v36 + 24))(v36, v34, 0, 8);
  if (v38 < 0 && (_QWORD)v37)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v39 + 24))(v39, v37, 0, 8);
  if (v41 < 0 && (_QWORD)v40)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v42 + 24))(v42, v40, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v40, "mesh_offset");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v37, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v34, ",");
  JSONS::JSONLineReal(&v40, &v37, &v34, 8, (uint64_t)&v43);
  if ((v45 & 0x80u) == 0)
    v15 = &v43;
  else
    v15 = v43;
  if ((v45 & 0x80u) == 0)
    v16 = v45;
  else
    v16 = v44;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, v15, v16);
  if ((char)v45 < 0 && v43)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v46 + 24))(v46, v43, 0, 8);
  if (v35 < 0 && (_QWORD)v34)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v36 + 24))(v36, v34, 0, 8);
  if (v38 < 0 && (_QWORD)v37)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v39 + 24))(v39, v37, 0, 8);
  if (v41 < 0 && (_QWORD)v40)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v42 + 24))(v42, v40, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v40, "filter_alpha");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v37, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v34, ",");
  JSONS::JSONLineReal(&v40, &v37, &v34, 8, (uint64_t)&v43);
  if ((v45 & 0x80u) == 0)
    v17 = &v43;
  else
    v17 = v43;
  if ((v45 & 0x80u) == 0)
    v18 = v45;
  else
    v18 = v44;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, v17, v18);
  if ((char)v45 < 0 && v43)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v46 + 24))(v46, v43, 0, 8);
  if (v35 < 0 && (_QWORD)v34)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v36 + 24))(v36, v34, 0, 8);
  if (v38 < 0 && (_QWORD)v37)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v39 + 24))(v39, v37, 0, 8);
  if (v41 < 0 && (_QWORD)v40)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v42 + 24))(v42, v40, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v40, "position_weight");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v37, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v34, ",");
  JSONS::JSONLineVect((unint64_t *)&v40, (uint64_t)&v37, &v34, (uint64_t)&v43);
  if ((v45 & 0x80u) == 0)
    v19 = &v43;
  else
    v19 = v43;
  if ((v45 & 0x80u) == 0)
    v20 = v45;
  else
    v20 = v44;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, v19, v20);
  if ((char)v45 < 0 && v43)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v46 + 24))(v46, v43, 0, 8);
  if (v35 < 0 && (_QWORD)v34)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v36 + 24))(v36, v34, 0, 8);
  if (v38 < 0 && (_QWORD)v37)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v39 + 24))(v39, v37, 0, 8);
  if (v41 < 0 && (_QWORD)v40)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v42 + 24))(v42, v40, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v40, "rotation_weight");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v37, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v34, ",");
  JSONS::JSONLineVect((unint64_t *)&v40, (uint64_t)&v37, &v34, (uint64_t)&v43);
  if ((v45 & 0x80u) == 0)
    v21 = &v43;
  else
    v21 = v43;
  if ((v45 & 0x80u) == 0)
    v22 = v45;
  else
    v22 = v44;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, v21, v22);
  if ((char)v45 < 0 && v43)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v46 + 24))(v46, v43, 0, 8);
  if (v35 < 0 && (_QWORD)v34)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v36 + 24))(v36, v34, 0, 8);
  if (v38 < 0 && (_QWORD)v37)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v39 + 24))(v39, v37, 0, 8);
  if (v41 < 0 && (_QWORD)v40)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v42 + 24))(v42, v40, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v40, "position_depth");
  v23 = *((_DWORD *)a1 + 36);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v37, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v34, ",");
  JSONS::JSONLineInt(&v40, v23, &v37, &v34, (uint64_t)&v43);
  if ((v45 & 0x80u) == 0)
    v24 = &v43;
  else
    v24 = v43;
  if ((v45 & 0x80u) == 0)
    v25 = v45;
  else
    v25 = v44;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, v24, v25);
  if ((char)v45 < 0 && v43)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v46 + 24))(v46, v43, 0, 8);
  if (v35 < 0 && (_QWORD)v34)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v36 + 24))(v36, v34, 0, 8);
  if (v38 < 0 && (_QWORD)v37)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v39 + 24))(v39, v37, 0, 8);
  if (v41 < 0 && (_QWORD)v40)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v42 + 24))(v42, v40, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v40, "rotation_depth");
  v26 = *((_DWORD *)a1 + 37);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v37, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v34, ",");
  JSONS::JSONLineInt(&v40, v26, &v37, &v34, (uint64_t)&v43);
  if ((v45 & 0x80u) == 0)
    v27 = &v43;
  else
    v27 = v43;
  if ((v45 & 0x80u) == 0)
    v28 = v45;
  else
    v28 = v44;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, v27, v28);
  if ((char)v45 < 0 && v43)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v46 + 24))(v46, v43, 0, 8);
  if (v35 < 0 && (_QWORD)v34)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v36 + 24))(v36, v34, 0, 8);
  if (v38 < 0 && (_QWORD)v37)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v39 + 24))(v39, v37, 0, 8);
  if (v41 < 0 && (_QWORD)v40)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v42 + 24))(v42, v40, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v40, "position_precision");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v37, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v34, ",");
  JSONS::JSONLineReal(&v40, &v37, &v34, 8, (uint64_t)&v43);
  if ((v45 & 0x80u) == 0)
    v29 = &v43;
  else
    v29 = v43;
  if ((v45 & 0x80u) == 0)
    v30 = v45;
  else
    v30 = v44;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, v29, v30);
  if ((char)v45 < 0 && v43)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v46 + 24))(v46, v43, 0, 8);
  if (v35 < 0 && (_QWORD)v34)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v36 + 24))(v36, v34, 0, 8);
  if (v38 < 0 && (_QWORD)v37)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v39 + 24))(v39, v37, 0, 8);
  if (v41 < 0 && (_QWORD)v40)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v42 + 24))(v42, v40, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v40, "rotation_precision");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v37, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v34, (const char *)&unk_2108059BE);
  JSONS::JSONLineReal(&v40, &v37, &v34, 8, (uint64_t)&v43);
  if ((v45 & 0x80u) == 0)
    v31 = &v43;
  else
    v31 = v43;
  if ((v45 & 0x80u) == 0)
    v32 = v45;
  else
    v32 = v44;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, v31, v32);
  if ((char)v45 < 0 && v43)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v46 + 24))(v46, v43, 0, 8);
  if (v35 < 0 && (_QWORD)v34)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v36 + 24))(v36, v34, 0, 8);
  if (v38 < 0 && (_QWORD)v37)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v39 + 24))(v39, v37, 0, 8);
  if (v41 < 0 && (_QWORD)v40)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v42 + 24))(v42, v40, 0, 8);
  return std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, "}", 1uLL);
}

_QWORD *JSONS::JSONObject<FIK::ACPBone>@<X0>(unsigned __int8 *a1@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  _QWORD *v5;
  size_t v6;
  int v7;
  _QWORD *v8;
  size_t v9;
  _QWORD *v10;
  size_t v11;
  int v12;
  _QWORD *v13;
  size_t v14;
  int v15;
  _QWORD *v16;
  size_t v17;
  _QWORD *v18;
  size_t v19;
  _QWORD *v20;
  size_t v21;
  int v22;
  _QWORD *v23;
  size_t v24;
  int v25;
  _QWORD *v26;
  size_t v27;
  _QWORD *v28;
  size_t v29;
  __int128 v31;
  char v32;
  uint64_t v33;
  __int128 v34;
  char v35;
  uint64_t v36;
  __int128 v37;
  char v38;
  uint64_t v39;
  _QWORD *v40;
  size_t v41;
  unsigned __int8 v42;
  uint64_t v43;

  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)a2, "{");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, "\"floor_compensation\":{", 0x16uLL);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v37, "is_correcting");
  v4 = a1[1];
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v34, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v31, ",");
  JSONS::JSONLineBool(&v37, v4, &v34, &v31, (uint64_t)&v40);
  if ((v42 & 0x80u) == 0)
    v5 = &v40;
  else
    v5 = v40;
  if ((v42 & 0x80u) == 0)
    v6 = v42;
  else
    v6 = v41;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, v5, v6);
  if ((char)v42 < 0 && v40)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v43 + 24))(v43, v40, 0, 8);
  if (v32 < 0 && (_QWORD)v31)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v33 + 24))(v33, v31, 0, 8);
  if (v35 < 0 && (_QWORD)v34)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v36 + 24))(v36, v34, 0, 8);
  if (v38 < 0 && (_QWORD)v37)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v39 + 24))(v39, v37, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v37, "offsets_hips");
  v7 = a1[2];
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v34, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v31, ",");
  JSONS::JSONLineBool(&v37, v7, &v34, &v31, (uint64_t)&v40);
  if ((v42 & 0x80u) == 0)
    v8 = &v40;
  else
    v8 = v40;
  if ((v42 & 0x80u) == 0)
    v9 = v42;
  else
    v9 = v41;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, v8, v9);
  if ((char)v42 < 0 && v40)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v43 + 24))(v43, v40, 0, 8);
  if (v32 < 0 && (_QWORD)v31)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v33 + 24))(v33, v31, 0, 8);
  if (v35 < 0 && (_QWORD)v34)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v36 + 24))(v36, v34, 0, 8);
  if (v38 < 0 && (_QWORD)v37)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v39 + 24))(v39, v37, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v37, "mesh_offset");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v34, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v31, ",");
  JSONS::JSONLineReal(&v37, &v34, &v31, 8, (uint64_t)&v40);
  if ((v42 & 0x80u) == 0)
    v10 = &v40;
  else
    v10 = v40;
  if ((v42 & 0x80u) == 0)
    v11 = v42;
  else
    v11 = v41;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, v10, v11);
  if ((char)v42 < 0 && v40)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v43 + 24))(v43, v40, 0, 8);
  if (v32 < 0 && (_QWORD)v31)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v33 + 24))(v33, v31, 0, 8);
  if (v35 < 0 && (_QWORD)v34)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v36 + 24))(v36, v34, 0, 8);
  if (v38 < 0 && (_QWORD)v37)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v39 + 24))(v39, v37, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v37, "enabled");
  v12 = *a1;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v34, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v31, (const char *)&unk_2108059BE);
  JSONS::JSONLineBool(&v37, v12, &v34, &v31, (uint64_t)&v40);
  if ((v42 & 0x80u) == 0)
    v13 = &v40;
  else
    v13 = v40;
  if ((v42 & 0x80u) == 0)
    v14 = v42;
  else
    v14 = v41;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, v13, v14);
  if ((char)v42 < 0 && v40)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v43 + 24))(v43, v40, 0, 8);
  if (v32 < 0 && (_QWORD)v31)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v33 + 24))(v33, v31, 0, 8);
  if (v35 < 0 && (_QWORD)v34)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v36 + 24))(v36, v34, 0, 8);
  if (v38 < 0 && (_QWORD)v37)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v39 + 24))(v39, v37, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, "},", 2uLL);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, "\"auto_locking\":{", 0x10uLL);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v37, "is_locking");
  v15 = a1[9];
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v34, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v31, ",");
  JSONS::JSONLineBool(&v37, v15, &v34, &v31, (uint64_t)&v40);
  if ((v42 & 0x80u) == 0)
    v16 = &v40;
  else
    v16 = v40;
  if ((v42 & 0x80u) == 0)
    v17 = v42;
  else
    v17 = v41;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, v16, v17);
  if ((char)v42 < 0 && v40)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v43 + 24))(v43, v40, 0, 8);
  if (v32 < 0 && (_QWORD)v31)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v33 + 24))(v33, v31, 0, 8);
  if (v35 < 0 && (_QWORD)v34)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v36 + 24))(v36, v34, 0, 8);
  if (v38 < 0 && (_QWORD)v37)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v39 + 24))(v39, v37, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v37, "min_velocity_threshold");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v34, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v31, ",");
  JSONS::JSONLineReal(&v37, &v34, &v31, 8, (uint64_t)&v40);
  if ((v42 & 0x80u) == 0)
    v18 = &v40;
  else
    v18 = v40;
  if ((v42 & 0x80u) == 0)
    v19 = v42;
  else
    v19 = v41;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, v18, v19);
  if ((char)v42 < 0 && v40)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v43 + 24))(v43, v40, 0, 8);
  if (v32 < 0 && (_QWORD)v31)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v33 + 24))(v33, v31, 0, 8);
  if (v35 < 0 && (_QWORD)v34)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v36 + 24))(v36, v34, 0, 8);
  if (v38 < 0 && (_QWORD)v37)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v39 + 24))(v39, v37, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v37, "max_velocity_threshold");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v34, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v31, ",");
  JSONS::JSONLineReal(&v37, &v34, &v31, 8, (uint64_t)&v40);
  if ((v42 & 0x80u) == 0)
    v20 = &v40;
  else
    v20 = v40;
  if ((v42 & 0x80u) == 0)
    v21 = v42;
  else
    v21 = v41;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, v20, v21);
  if ((char)v42 < 0 && v40)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v43 + 24))(v43, v40, 0, 8);
  if (v32 < 0 && (_QWORD)v31)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v33 + 24))(v33, v31, 0, 8);
  if (v35 < 0 && (_QWORD)v34)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v36 + 24))(v36, v34, 0, 8);
  if (v38 < 0 && (_QWORD)v37)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v39 + 24))(v39, v37, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v37, "enabled");
  v22 = a1[8];
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v34, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v31, ",");
  JSONS::JSONLineBool(&v37, v22, &v34, &v31, (uint64_t)&v40);
  if ((v42 & 0x80u) == 0)
    v23 = &v40;
  else
    v23 = v40;
  if ((v42 & 0x80u) == 0)
    v24 = v42;
  else
    v24 = v41;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, v23, v24);
  if ((char)v42 < 0 && v40)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v43 + 24))(v43, v40, 0, 8);
  if (v32 < 0 && (_QWORD)v31)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v33 + 24))(v33, v31, 0, 8);
  if (v35 < 0 && (_QWORD)v34)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v36 + 24))(v36, v34, 0, 8);
  if (v38 < 0 && (_QWORD)v37)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v39 + 24))(v39, v37, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v37, "blend_frames_count");
  v25 = *((_DWORD *)a1 + 5);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v34, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v31, (const char *)&unk_2108059BE);
  JSONS::JSONLineInt(&v37, v25, &v34, &v31, (uint64_t)&v40);
  if ((v42 & 0x80u) == 0)
    v26 = &v40;
  else
    v26 = v40;
  if ((v42 & 0x80u) == 0)
    v27 = v42;
  else
    v27 = v41;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, v26, v27);
  if ((char)v42 < 0 && v40)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v43 + 24))(v43, v40, 0, 8);
  if (v32 < 0 && (_QWORD)v31)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v33 + 24))(v33, v31, 0, 8);
  if (v35 < 0 && (_QWORD)v34)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v36 + 24))(v36, v34, 0, 8);
  if (v38 < 0 && (_QWORD)v37)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v39 + 24))(v39, v37, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, "},", 2uLL);
  JSONS::JSONObject<FIK::SelfPenetrationBone>(a1 + 32, &v40);
  if ((v42 & 0x80u) == 0)
    v28 = &v40;
  else
    v28 = v40;
  if ((v42 & 0x80u) == 0)
    v29 = v42;
  else
    v29 = v41;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, v28, v29);
  if ((char)v42 < 0 && v40)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v43 + 24))(v43, v40, 0, 8);
  return std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::push_back(a2, 125);
}

void **JSONS::JSONLineIKArray@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X1>, __int128 *a3@<X2>, __int128 *a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  size_t v13;
  unint64_t v14;
  void **result;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  void (***v25)(FIK::CrtAllocator *__hidden);
  __int128 __dst;
  unint64_t v27;
  unint64_t v28;
  _QWORD v29[2];
  unsigned __int8 v30;
  uint64_t v31;
  __int128 __src;
  uint64_t v33;
  void (***v34)(FIK::CrtAllocator *__hidden);
  char __str[24];
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  __src = 0uLL;
  v33 = 0x100000000000000;
  v34 = FIK::defaultAllocator((FIK *)a1);
  LOWORD(__src) = 91;
  if (*a2)
  {
    v10 = 0;
    v11 = 1;
    do
    {
      snprintf(__str, 0x18uLL, "%d", *(_DWORD *)(a2[2] + 4 * v10));
      std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)v29, __str);
      if ((v30 & 0x80u) == 0)
        v12 = v29;
      else
        v12 = (_QWORD *)v29[0];
      if ((v30 & 0x80u) == 0)
        v13 = v30;
      else
        v13 = v29[1];
      std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(&__src, v12, v13);
      if ((char)v30 < 0 && v29[0])
        (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v31 + 24))(v31, v29[0], 0, 8);
      v14 = *a2;
      if (*a2 - 1 > v10)
      {
        std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(&__src, ",", 1uLL);
        v14 = *a2;
      }
      v10 = v11;
    }
    while (v14 > v11++);
  }
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(&__src, "]", 1uLL);
  v28 = a1[3];
  if (*((char *)a1 + 23) < 0)
  {
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::__init_copy_ctor_external((_QWORD **)&__dst, (void *)*a1, a1[1]);
  }
  else
  {
    __dst = *(_OWORD *)a1;
    v27 = a1[2];
  }
  v25 = v34;
  if (SHIBYTE(v33) < 0)
  {
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::__init_copy_ctor_external((_QWORD **)&v23, (void *)__src, *((unint64_t *)&__src + 1));
  }
  else
  {
    v23 = __src;
    v24 = v33;
  }
  v22 = *((_QWORD *)a3 + 3);
  if (*((char *)a3 + 23) < 0)
  {
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::__init_copy_ctor_external((_QWORD **)&v20, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v20 = *a3;
    v21 = *((_QWORD *)a3 + 2);
  }
  v19 = *((_QWORD *)a4 + 3);
  if (*((char *)a4 + 23) < 0)
  {
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::__init_copy_ctor_external((_QWORD **)&v17, *(void **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v17 = *a4;
    v18 = *((_QWORD *)a4 + 2);
  }
  result = JSONS::JSONLine((uint64_t)&__dst, (void **)&v23, (const void **)&v20, (void **)&v17, a5);
  if (SHIBYTE(v18) < 0 && (_QWORD)v17)
    result = (void **)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v19 + 24))(v19, v17, 0, 8);
  if (SHIBYTE(v21) < 0 && (_QWORD)v20)
    result = (void **)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v22 + 24))(v22, v20, 0, 8);
  if (SHIBYTE(v24) < 0 && (_QWORD)v23)
    result = (void **)((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), _QWORD, _QWORD, uint64_t))(*v25)[3])(v25, v23, 0, 8);
  if (SHIBYTE(v27) < 0 && (_QWORD)__dst)
    result = (void **)(*(uint64_t (**)(unint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v28 + 24))(v28, __dst, 0, 8);
  if (SHIBYTE(v33) < 0)
  {
    if ((_QWORD)__src)
      return (void **)((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), _QWORD, _QWORD, uint64_t))(*v34)[3])(v34, __src, 0, 8);
  }
  return result;
}

_QWORD *JSONS::JSONfromRigBoneBase@<X0>(FIK *a1@<X0>, void **a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  size_t v7;
  _QWORD *v8;
  size_t v9;
  int v10;
  _QWORD *v11;
  size_t v12;
  int v13;
  _QWORD *v14;
  size_t v15;
  _QWORD *v16;
  size_t v17;
  void *v18;
  int v19;
  void *v20;
  size_t v21;
  __int128 v23;
  char v24;
  uint64_t v25;
  __int128 v26;
  char v27;
  uint64_t v28;
  __int128 v29;
  char v30;
  uint64_t v31;
  _QWORD *v32;
  size_t v33;
  unsigned __int8 v34;
  uint64_t v35;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  a3[3] = FIK::defaultAllocator(a1);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a3, "{", 1uLL);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v29, "name_");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v26, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v23, ",");
  JSONS::JSONLineStr(&v29, (uint64_t)a1 + 8, &v26, &v23, (uint64_t)&v32);
  if ((v34 & 0x80u) == 0)
    v6 = &v32;
  else
    v6 = v32;
  if ((v34 & 0x80u) == 0)
    v7 = v34;
  else
    v7 = v33;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a3, v6, v7);
  if ((char)v34 < 0 && v32)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v35 + 24))(v35, v32, 0, 8);
  if (v24 < 0 && (_QWORD)v23)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v25 + 24))(v25, v23, 0, 8);
  if (v27 < 0 && (_QWORD)v26)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v28 + 24))(v28, v26, 0, 8);
  if (v30 < 0 && (_QWORD)v29)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v31 + 24))(v31, v29, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v29, "parent_name_");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v26, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v23, ",");
  JSONS::JSONLineStr(&v29, (uint64_t)a1 + 32, &v26, &v23, (uint64_t)&v32);
  if ((v34 & 0x80u) == 0)
    v8 = &v32;
  else
    v8 = v32;
  if ((v34 & 0x80u) == 0)
    v9 = v34;
  else
    v9 = v33;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a3, v8, v9);
  if ((char)v34 < 0 && v32)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v35 + 24))(v35, v32, 0, 8);
  if (v24 < 0 && (_QWORD)v23)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v25 + 24))(v25, v23, 0, 8);
  if (v27 < 0 && (_QWORD)v26)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v28 + 24))(v28, v26, 0, 8);
  if (v30 < 0 && (_QWORD)v29)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v31 + 24))(v31, v29, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v29, "solver_index_");
  v10 = *(_DWORD *)a1;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v26, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v23, ",");
  JSONS::JSONLineInt(&v29, v10, &v26, &v23, (uint64_t)&v32);
  if ((v34 & 0x80u) == 0)
    v11 = &v32;
  else
    v11 = v32;
  if ((v34 & 0x80u) == 0)
    v12 = v34;
  else
    v12 = v33;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a3, v11, v12);
  if ((char)v34 < 0 && v32)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v35 + 24))(v35, v32, 0, 8);
  if (v24 < 0 && (_QWORD)v23)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v25 + 24))(v25, v23, 0, 8);
  if (v27 < 0 && (_QWORD)v26)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v28 + 24))(v28, v26, 0, 8);
  if (v30 < 0 && (_QWORD)v29)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v31 + 24))(v31, v29, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v29, "parent_index_");
  v13 = *((_DWORD *)a1 + 1);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v26, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v23, ",");
  JSONS::JSONLineInt(&v29, v13, &v26, &v23, (uint64_t)&v32);
  if ((v34 & 0x80u) == 0)
    v14 = &v32;
  else
    v14 = v32;
  if ((v34 & 0x80u) == 0)
    v15 = v34;
  else
    v15 = v33;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a3, v14, v15);
  if ((char)v34 < 0 && v32)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v35 + 24))(v35, v32, 0, 8);
  if (v24 < 0 && (_QWORD)v23)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v25 + 24))(v25, v23, 0, 8);
  if (v27 < 0 && (_QWORD)v26)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v28 + 24))(v28, v26, 0, 8);
  if (v30 < 0 && (_QWORD)v29)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v31 + 24))(v31, v29, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v29, "rest_transform_");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v26, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v23, (const char *)&unk_2108059BE);
  JSONS::JSONLineTransform((unint64_t *)&v29, (uint64_t)&v26, &v23, (uint64_t)&v32);
  if ((v34 & 0x80u) == 0)
    v16 = &v32;
  else
    v16 = v32;
  if ((v34 & 0x80u) == 0)
    v17 = v34;
  else
    v17 = v33;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a3, v16, v17);
  if ((char)v34 < 0 && v32)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v35 + 24))(v35, v32, 0, 8);
  if (v24 < 0 && (_QWORD)v23)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v25 + 24))(v25, v23, 0, 8);
  if (v27 < 0 && (_QWORD)v26)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v28 + 24))(v28, v26, 0, 8);
  if (v30 < 0 && (_QWORD)v29)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v31 + 24))(v31, v29, 0, 8);
  v18 = (void *)*((unsigned __int8 *)a2 + 23);
  if ((char)v18 < 0)
    v18 = a2[1];
  if (v18)
  {
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a3, ",", 1uLL);
    v19 = *((char *)a2 + 23);
    if (v19 >= 0)
      v20 = a2;
    else
      v20 = *a2;
    if (v19 >= 0)
      v21 = *((unsigned __int8 *)a2 + 23);
    else
      v21 = (size_t)a2[1];
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a3, v20, v21);
  }
  return std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a3, "}", 1uLL);
}

_QWORD *JSONS::JSONfromRigBone@<X0>(unsigned __int8 *a1@<X0>, void **a2@<X1>, _QWORD *a3@<X8>)
{
  int v6;
  _QWORD *v7;
  size_t v8;
  _QWORD *v9;
  size_t v10;
  int v11;
  _QWORD *v12;
  size_t v13;
  int v14;
  _QWORD *v15;
  size_t v16;
  int v17;
  _QWORD *v18;
  size_t v19;
  int v20;
  _QWORD *v21;
  size_t v22;
  int v23;
  _QWORD *v24;
  size_t v25;
  _QWORD *v26;
  size_t v27;
  _QWORD *v28;
  size_t v29;
  _QWORD *v30;
  size_t v31;
  _QWORD *v32;
  size_t v33;
  int v34;
  _QWORD *v35;
  size_t v36;
  _QWORD *v37;
  size_t v38;
  _QWORD *v39;
  size_t v40;
  _QWORD *v41;
  size_t v42;
  _QWORD *v43;
  size_t v44;
  _QWORD *v45;
  size_t v46;
  _QWORD *v47;
  size_t v48;
  _QWORD *v49;
  size_t v50;
  _QWORD *v51;
  size_t v52;
  _QWORD *v53;
  size_t v54;
  _QWORD *v55;
  size_t v56;
  _QWORD *v57;
  size_t v58;
  void *v59;
  int v60;
  void *v61;
  size_t v62;
  _QWORD *result;
  __int128 v64;
  char v65;
  uint64_t v66;
  __int128 v67;
  char v68;
  uint64_t v69;
  __int128 v70;
  char v71;
  uint64_t v72;
  _QWORD *v73;
  size_t v74;
  unsigned __int8 v75;
  uint64_t v76;
  void *__src[2];
  uint64_t v78;
  void (***v79)(FIK::CrtAllocator *__hidden);

  __src[0] = 0;
  __src[1] = 0;
  v78 = 0;
  v79 = FIK::defaultAllocator((FIK *)a1);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v70, "active_");
  v6 = a1[96];
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v67, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v64, ",");
  JSONS::JSONLineBool(&v70, v6, &v67, &v64, (uint64_t)&v73);
  if ((v75 & 0x80u) == 0)
    v7 = &v73;
  else
    v7 = v73;
  if ((v75 & 0x80u) == 0)
    v8 = v75;
  else
    v8 = v74;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(__src, v7, v8);
  if ((char)v75 < 0 && v73)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v76 + 24))(v76, v73, 0, 8);
  if (v65 < 0 && (_QWORD)v64)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v66 + 24))(v66, v64, 0, 8);
  if (v68 < 0 && (_QWORD)v67)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v69 + 24))(v69, v67, 0, 8);
  if (v71 < 0 && (_QWORD)v70)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v72 + 24))(v72, v70, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v70, "dof_");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v67, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v64, ",");
  JSONS::JSONLineFromArray<BOOL,3ul>((unint64_t *)&v70, a1 + 97, &v67, &v64, (uint64_t)&v73);
  if ((v75 & 0x80u) == 0)
    v9 = &v73;
  else
    v9 = v73;
  if ((v75 & 0x80u) == 0)
    v10 = v75;
  else
    v10 = v74;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(__src, v9, v10);
  if ((char)v75 < 0 && v73)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v76 + 24))(v76, v73, 0, 8);
  if (v65 < 0 && (_QWORD)v64)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v66 + 24))(v66, v64, 0, 8);
  if (v68 < 0 && (_QWORD)v67)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v69 + 24))(v69, v67, 0, 8);
  if (v71 < 0 && (_QWORD)v70)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v72 + 24))(v72, v70, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v70, "enable_limits_");
  v11 = a1[103];
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v67, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v64, ",");
  JSONS::JSONLineBool(&v70, v11, &v67, &v64, (uint64_t)&v73);
  if ((v75 & 0x80u) == 0)
    v12 = &v73;
  else
    v12 = v73;
  if ((v75 & 0x80u) == 0)
    v13 = v75;
  else
    v13 = v74;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(__src, v12, v13);
  if ((char)v75 < 0 && v73)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v76 + 24))(v76, v73, 0, 8);
  if (v65 < 0 && (_QWORD)v64)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v66 + 24))(v66, v64, 0, 8);
  if (v68 < 0 && (_QWORD)v67)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v69 + 24))(v69, v67, 0, 8);
  if (v71 < 0 && (_QWORD)v70)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v72 + 24))(v72, v70, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v70, "enable_retargeting_");
  v14 = a1[100];
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v67, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v64, ",");
  JSONS::JSONLineBool(&v70, v14, &v67, &v64, (uint64_t)&v73);
  if ((v75 & 0x80u) == 0)
    v15 = &v73;
  else
    v15 = v73;
  if ((v75 & 0x80u) == 0)
    v16 = v75;
  else
    v16 = v74;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(__src, v15, v16);
  if ((char)v75 < 0 && v73)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v76 + 24))(v76, v73, 0, 8);
  if (v65 < 0 && (_QWORD)v64)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v66 + 24))(v66, v64, 0, 8);
  if (v68 < 0 && (_QWORD)v67)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v69 + 24))(v69, v67, 0, 8);
  if (v71 < 0 && (_QWORD)v70)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v72 + 24))(v72, v70, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v70, "enable_target_translate_");
  v17 = a1[102];
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v67, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v64, ",");
  JSONS::JSONLineBool(&v70, v17, &v67, &v64, (uint64_t)&v73);
  if ((v75 & 0x80u) == 0)
    v18 = &v73;
  else
    v18 = v73;
  if ((v75 & 0x80u) == 0)
    v19 = v75;
  else
    v19 = v74;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(__src, v18, v19);
  if ((char)v75 < 0 && v73)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v76 + 24))(v76, v73, 0, 8);
  if (v65 < 0 && (_QWORD)v64)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v66 + 24))(v66, v64, 0, 8);
  if (v68 < 0 && (_QWORD)v67)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v69 + 24))(v69, v67, 0, 8);
  if (v71 < 0 && (_QWORD)v70)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v72 + 24))(v72, v70, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v70, "enable_stretch_limits_");
  v20 = a1[101];
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v67, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v64, ",");
  JSONS::JSONLineBool(&v70, v20, &v67, &v64, (uint64_t)&v73);
  if ((v75 & 0x80u) == 0)
    v21 = &v73;
  else
    v21 = v73;
  if ((v75 & 0x80u) == 0)
    v22 = v75;
  else
    v22 = v74;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(__src, v21, v22);
  if ((char)v75 < 0 && v73)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v76 + 24))(v76, v73, 0, 8);
  if (v65 < 0 && (_QWORD)v64)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v66 + 24))(v66, v64, 0, 8);
  if (v68 < 0 && (_QWORD)v67)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v69 + 24))(v69, v67, 0, 8);
  if (v71 < 0 && (_QWORD)v70)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v72 + 24))(v72, v70, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v70, "enforce_limits_");
  v23 = a1[104];
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v67, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v64, ",");
  JSONS::JSONLineBool(&v70, v23, &v67, &v64, (uint64_t)&v73);
  if ((v75 & 0x80u) == 0)
    v24 = &v73;
  else
    v24 = v73;
  if ((v75 & 0x80u) == 0)
    v25 = v75;
  else
    v25 = v74;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(__src, v24, v25);
  if ((char)v75 < 0 && v73)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v76 + 24))(v76, v73, 0, 8);
  if (v65 < 0 && (_QWORD)v64)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v66 + 24))(v66, v64, 0, 8);
  if (v68 < 0 && (_QWORD)v67)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v69 + 24))(v69, v67, 0, 8);
  if (v71 < 0 && (_QWORD)v70)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v72 + 24))(v72, v70, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v70, "limits_bone_axis_");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v67, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v64, ",");
  JSONS::JSONLineAxis((uint64_t)&v70, (uint64_t)(a1 + 128));
  if ((v75 & 0x80u) == 0)
    v26 = &v73;
  else
    v26 = v73;
  if ((v75 & 0x80u) == 0)
    v27 = v75;
  else
    v27 = v74;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(__src, v26, v27);
  if ((char)v75 < 0 && v73)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v76 + 24))(v76, v73, 0, 8);
  if (v65 < 0 && (_QWORD)v64)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v66 + 24))(v66, v64, 0, 8);
  if (v68 < 0 && (_QWORD)v67)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v69 + 24))(v69, v67, 0, 8);
  if (v71 < 0 && (_QWORD)v70)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v72 + 24))(v72, v70, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v70, "limits_max_degrees_");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v67, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v64, ",");
  JSONS::JSONLineVect((unint64_t *)&v70, (uint64_t)&v67, &v64, (uint64_t)&v73);
  if ((v75 & 0x80u) == 0)
    v28 = &v73;
  else
    v28 = v73;
  if ((v75 & 0x80u) == 0)
    v29 = v75;
  else
    v29 = v74;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(__src, v28, v29);
  if ((char)v75 < 0 && v73)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v76 + 24))(v76, v73, 0, 8);
  if (v65 < 0 && (_QWORD)v64)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v66 + 24))(v66, v64, 0, 8);
  if (v68 < 0 && (_QWORD)v67)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v69 + 24))(v69, v67, 0, 8);
  if (v71 < 0 && (_QWORD)v70)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v72 + 24))(v72, v70, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v70, "limits_min_degrees_");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v67, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v64, ",");
  JSONS::JSONLineVect((unint64_t *)&v70, (uint64_t)&v67, &v64, (uint64_t)&v73);
  if ((v75 & 0x80u) == 0)
    v30 = &v73;
  else
    v30 = v73;
  if ((v75 & 0x80u) == 0)
    v31 = v75;
  else
    v31 = v74;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(__src, v30, v31);
  if ((char)v75 < 0 && v73)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v76 + 24))(v76, v73, 0, 8);
  if (v65 < 0 && (_QWORD)v64)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v66 + 24))(v66, v64, 0, 8);
  if (v68 < 0 && (_QWORD)v67)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v69 + 24))(v69, v67, 0, 8);
  if (v71 < 0 && (_QWORD)v70)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v72 + 24))(v72, v70, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v70, "limits_gain_");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v67, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v64, ",");
  JSONS::JSONLineReal(&v70, &v67, &v64, 8, (uint64_t)&v73);
  if ((v75 & 0x80u) == 0)
    v32 = &v73;
  else
    v32 = v73;
  if ((v75 & 0x80u) == 0)
    v33 = v75;
  else
    v33 = v74;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(__src, v32, v33);
  if ((char)v75 < 0 && v73)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v76 + 24))(v76, v73, 0, 8);
  if (v65 < 0 && (_QWORD)v64)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v66 + 24))(v66, v64, 0, 8);
  if (v68 < 0 && (_QWORD)v67)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v69 + 24))(v69, v67, 0, 8);
  if (v71 < 0 && (_QWORD)v70)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v72 + 24))(v72, v70, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v70, "override_mass_");
  v34 = a1[108];
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v67, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v64, ",");
  JSONS::JSONLineBool(&v70, v34, &v67, &v64, (uint64_t)&v73);
  if ((v75 & 0x80u) == 0)
    v35 = &v73;
  else
    v35 = v73;
  if ((v75 & 0x80u) == 0)
    v36 = v75;
  else
    v36 = v74;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(__src, v35, v36);
  if ((char)v75 < 0 && v73)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v76 + 24))(v76, v73, 0, 8);
  if (v65 < 0 && (_QWORD)v64)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v66 + 24))(v66, v64, 0, 8);
  if (v68 < 0 && (_QWORD)v67)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v69 + 24))(v69, v67, 0, 8);
  if (v71 < 0 && (_QWORD)v70)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v72 + 24))(v72, v70, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v70, "mass_");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v67, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v64, ",");
  JSONS::JSONLineReal(&v70, &v67, &v64, 8, (uint64_t)&v73);
  if ((v75 & 0x80u) == 0)
    v37 = &v73;
  else
    v37 = v73;
  if ((v75 & 0x80u) == 0)
    v38 = v75;
  else
    v38 = v74;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(__src, v37, v38);
  if ((char)v75 < 0 && v73)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v76 + 24))(v76, v73, 0, 8);
  if (v65 < 0 && (_QWORD)v64)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v66 + 24))(v66, v64, 0, 8);
  if (v68 < 0 && (_QWORD)v67)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v69 + 24))(v69, v67, 0, 8);
  if (v71 < 0 && (_QWORD)v70)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v72 + 24))(v72, v70, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v70, "max_velocity_");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v67, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v64, ",");
  JSONS::JSONLineReal(&v70, &v67, &v64, 8, (uint64_t)&v73);
  if ((v75 & 0x80u) == 0)
    v39 = &v73;
  else
    v39 = v73;
  if ((v75 & 0x80u) == 0)
    v40 = v75;
  else
    v40 = v74;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(__src, v39, v40);
  if ((char)v75 < 0 && v73)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v76 + 24))(v76, v73, 0, 8);
  if (v65 < 0 && (_QWORD)v64)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v66 + 24))(v66, v64, 0, 8);
  if (v68 < 0 && (_QWORD)v67)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v69 + 24))(v69, v67, 0, 8);
  if (v71 < 0 && (_QWORD)v70)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v72 + 24))(v72, v70, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v70, "ResetToRest");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v67, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v64, ",");
  JSONS::JSONLineBool(&v70, 0, &v67, &v64, (uint64_t)&v73);
  if ((v75 & 0x80u) == 0)
    v41 = &v73;
  else
    v41 = v73;
  if ((v75 & 0x80u) == 0)
    v42 = v75;
  else
    v42 = v74;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(__src, v41, v42);
  if ((char)v75 < 0 && v73)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v76 + 24))(v76, v73, 0, 8);
  if (v65 < 0 && (_QWORD)v64)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v66 + 24))(v66, v64, 0, 8);
  if (v68 < 0 && (_QWORD)v67)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v69 + 24))(v69, v67, 0, 8);
  if (v71 < 0 && (_QWORD)v70)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v72 + 24))(v72, v70, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v70, "retargeting_gain_");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v67, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v64, ",");
  JSONS::JSONLineReal(&v70, &v67, &v64, 8, (uint64_t)&v73);
  if ((v75 & 0x80u) == 0)
    v43 = &v73;
  else
    v43 = v73;
  if ((v75 & 0x80u) == 0)
    v44 = v75;
  else
    v44 = v74;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(__src, v43, v44);
  if ((char)v75 < 0 && v73)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v76 + 24))(v76, v73, 0, 8);
  if (v65 < 0 && (_QWORD)v64)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v66 + 24))(v66, v64, 0, 8);
  if (v68 < 0 && (_QWORD)v67)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v69 + 24))(v69, v67, 0, 8);
  if (v71 < 0 && (_QWORD)v70)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v72 + 24))(v72, v70, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v70, "retargeting_gain_dof");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v67, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v64, ",");
  JSONS::JSONLineVect((unint64_t *)&v70, (uint64_t)&v67, &v64, (uint64_t)&v73);
  if ((v75 & 0x80u) == 0)
    v45 = &v73;
  else
    v45 = v73;
  if ((v75 & 0x80u) == 0)
    v46 = v75;
  else
    v46 = v74;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(__src, v45, v46);
  if ((char)v75 < 0 && v73)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v76 + 24))(v76, v73, 0, 8);
  if (v65 < 0 && (_QWORD)v64)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v66 + 24))(v66, v64, 0, 8);
  if (v68 < 0 && (_QWORD)v67)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v69 + 24))(v69, v67, 0, 8);
  if (v71 < 0 && (_QWORD)v70)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v72 + 24))(v72, v70, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v70, "stretch_error_gain_");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v67, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v64, ",");
  JSONS::JSONLineReal(&v70, &v67, &v64, 8, (uint64_t)&v73);
  if ((v75 & 0x80u) == 0)
    v47 = &v73;
  else
    v47 = v73;
  if ((v75 & 0x80u) == 0)
    v48 = v75;
  else
    v48 = v74;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(__src, v47, v48);
  if ((char)v75 < 0 && v73)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v76 + 24))(v76, v73, 0, 8);
  if (v65 < 0 && (_QWORD)v64)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v66 + 24))(v66, v64, 0, 8);
  if (v68 < 0 && (_QWORD)v67)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v69 + 24))(v69, v67, 0, 8);
  if (v71 < 0 && (_QWORD)v70)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v72 + 24))(v72, v70, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v70, "stretch_max_");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v67, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v64, ",");
  JSONS::JSONLineVect((unint64_t *)&v70, (uint64_t)&v67, &v64, (uint64_t)&v73);
  if ((v75 & 0x80u) == 0)
    v49 = &v73;
  else
    v49 = v73;
  if ((v75 & 0x80u) == 0)
    v50 = v75;
  else
    v50 = v74;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(__src, v49, v50);
  if ((char)v75 < 0 && v73)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v76 + 24))(v76, v73, 0, 8);
  if (v65 < 0 && (_QWORD)v64)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v66 + 24))(v66, v64, 0, 8);
  if (v68 < 0 && (_QWORD)v67)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v69 + 24))(v69, v67, 0, 8);
  if (v71 < 0 && (_QWORD)v70)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v72 + 24))(v72, v70, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v70, "stretch_min_");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v67, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v64, ",");
  JSONS::JSONLineVect((unint64_t *)&v70, (uint64_t)&v67, &v64, (uint64_t)&v73);
  if ((v75 & 0x80u) == 0)
    v51 = &v73;
  else
    v51 = v73;
  if ((v75 & 0x80u) == 0)
    v52 = v75;
  else
    v52 = v74;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(__src, v51, v52);
  if ((char)v75 < 0 && v73)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v76 + 24))(v76, v73, 0, 8);
  if (v65 < 0 && (_QWORD)v64)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v66 + 24))(v66, v64, 0, 8);
  if (v68 < 0 && (_QWORD)v67)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v69 + 24))(v69, v67, 0, 8);
  if (v71 < 0 && (_QWORD)v70)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v72 + 24))(v72, v70, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v70, "stretch_stiffness_");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v67, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v64, ",");
  JSONS::JSONLineVect((unint64_t *)&v70, (uint64_t)&v67, &v64, (uint64_t)&v73);
  if ((v75 & 0x80u) == 0)
    v53 = &v73;
  else
    v53 = v73;
  if ((v75 & 0x80u) == 0)
    v54 = v75;
  else
    v54 = v74;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(__src, v53, v54);
  if ((char)v75 < 0 && v73)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v76 + 24))(v76, v73, 0, 8);
  if (v65 < 0 && (_QWORD)v64)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v66 + 24))(v66, v64, 0, 8);
  if (v68 < 0 && (_QWORD)v67)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v69 + 24))(v69, v67, 0, 8);
  if (v71 < 0 && (_QWORD)v70)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v72 + 24))(v72, v70, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v70, "stretch_on_");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v67, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v64, ",");
  JSONS::JSONLineFromArray<BOOL,3ul>((unint64_t *)&v70, a1 + 105, &v67, &v64, (uint64_t)&v73);
  if ((v75 & 0x80u) == 0)
    v55 = &v73;
  else
    v55 = v73;
  if ((v75 & 0x80u) == 0)
    v56 = v75;
  else
    v56 = v74;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(__src, v55, v56);
  if ((char)v75 < 0 && v73)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v76 + 24))(v76, v73, 0, 8);
  if (v65 < 0 && (_QWORD)v64)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v66 + 24))(v66, v64, 0, 8);
  if (v68 < 0 && (_QWORD)v67)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v69 + 24))(v69, v67, 0, 8);
  if (v71 < 0 && (_QWORD)v70)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v72 + 24))(v72, v70, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v70, "weight_");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v67, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v64, (const char *)&unk_2108059BE);
  JSONS::JSONLineVect((unint64_t *)&v70, (uint64_t)&v67, &v64, (uint64_t)&v73);
  if ((v75 & 0x80u) == 0)
    v57 = &v73;
  else
    v57 = v73;
  if ((v75 & 0x80u) == 0)
    v58 = v75;
  else
    v58 = v74;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(__src, v57, v58);
  if ((char)v75 < 0 && v73)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v76 + 24))(v76, v73, 0, 8);
  if (v65 < 0 && (_QWORD)v64)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v66 + 24))(v66, v64, 0, 8);
  if (v68 < 0 && (_QWORD)v67)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v69 + 24))(v69, v67, 0, 8);
  if (v71 < 0 && (_QWORD)v70)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v72 + 24))(v72, v70, 0, 8);
  v59 = (void *)*((unsigned __int8 *)a2 + 23);
  if ((char)v59 < 0)
    v59 = a2[1];
  if (v59)
  {
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(__src, ",", 1uLL);
    v60 = *((char *)a2 + 23);
    if (v60 >= 0)
      v61 = a2;
    else
      v61 = *a2;
    if (v60 >= 0)
      v62 = *((unsigned __int8 *)a2 + 23);
    else
      v62 = (size_t)a2[1];
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(__src, v61, v62);
  }
  result = JSONS::JSONfromRigBoneBase((FIK *)a1, __src, a3);
  if (SHIBYTE(v78) < 0)
  {
    if (__src[0])
      return (_QWORD *)((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), void *, _QWORD, uint64_t))(*v79)[3])(v79, __src[0], 0, 8);
  }
  return result;
}

void **JSONS::JSONLineFromArray<BOOL,3ul>@<X0>(unint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, __int128 *a3@<X2>, __int128 *a4@<X3>, uint64_t a5@<X8>)
{
  unsigned __int8 *v9;
  int v10;
  BOOL v11;
  char *v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  size_t v17;
  void **result;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  void (***v28)(FIK::CrtAllocator *__hidden);
  __int128 __dst;
  unint64_t v30;
  unint64_t v31;
  __int128 __src;
  uint64_t v33;
  void (***v34)(FIK::CrtAllocator *__hidden);

  __src = 0uLL;
  v33 = 0x100000000000000;
  v34 = FIK::defaultAllocator((FIK *)a1);
  LOWORD(__src) = 91;
  v10 = *a2;
  v9 = a2 + 1;
  v11 = v10 == 0;
  if (v10)
    v12 = "true";
  else
    v12 = "false";
  if (v11)
    v13 = 5;
  else
    v13 = 4;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(&__src, v12, v13);
  v14 = 0;
  do
  {
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(&__src, ",", 1uLL);
    v15 = v14 + 1;
    if (v9[v14])
      v16 = "true";
    else
      v16 = "false";
    if (v9[v14])
      v17 = 4;
    else
      v17 = 5;
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(&__src, v16, v17);
    ++v14;
  }
  while (v15 != 2);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(&__src, "]", 1uLL);
  v31 = a1[3];
  if (*((char *)a1 + 23) < 0)
  {
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::__init_copy_ctor_external((_QWORD **)&__dst, (void *)*a1, a1[1]);
  }
  else
  {
    __dst = *(_OWORD *)a1;
    v30 = a1[2];
  }
  v28 = v34;
  if (SHIBYTE(v33) < 0)
  {
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::__init_copy_ctor_external((_QWORD **)&v26, (void *)__src, *((unint64_t *)&__src + 1));
  }
  else
  {
    v26 = __src;
    v27 = v33;
  }
  v25 = *((_QWORD *)a3 + 3);
  if (*((char *)a3 + 23) < 0)
  {
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::__init_copy_ctor_external((_QWORD **)&v23, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v23 = *a3;
    v24 = *((_QWORD *)a3 + 2);
  }
  v22 = *((_QWORD *)a4 + 3);
  if (*((char *)a4 + 23) < 0)
  {
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::__init_copy_ctor_external((_QWORD **)&v20, *(void **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v20 = *a4;
    v21 = *((_QWORD *)a4 + 2);
  }
  result = JSONS::JSONLine((uint64_t)&__dst, (void **)&v26, (const void **)&v23, (void **)&v20, a5);
  if (SHIBYTE(v21) < 0 && (_QWORD)v20)
    result = (void **)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v22 + 24))(v22, v20, 0, 8);
  if (SHIBYTE(v24) < 0 && (_QWORD)v23)
    result = (void **)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v25 + 24))(v25, v23, 0, 8);
  if (SHIBYTE(v27) < 0 && (_QWORD)v26)
    result = (void **)((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), _QWORD, _QWORD, uint64_t))(*v28)[3])(v28, v26, 0, 8);
  if (SHIBYTE(v30) < 0 && (_QWORD)__dst)
    result = (void **)(*(uint64_t (**)(unint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v31 + 24))(v31, __dst, 0, 8);
  if (SHIBYTE(v33) < 0)
  {
    if ((_QWORD)__src)
      return (void **)((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), _QWORD, _QWORD, uint64_t))(*v34)[3])(v34, __src, 0, 8);
  }
  return result;
}

_QWORD *JSONS::JSONfromMoCapBone@<X0>(JSONS *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v5;
  size_t v6;
  _QWORD *v7;
  size_t v8;
  _QWORD *v9;
  size_t v10;
  int v11;
  _QWORD *v12;
  size_t v13;
  _QWORD *v14;
  size_t v15;
  _QWORD *result;
  __int128 v17;
  char v18;
  uint64_t v19;
  __int128 v20;
  char v21;
  uint64_t v22;
  __int128 v23;
  char v24;
  uint64_t v25;
  _QWORD *v26;
  size_t v27;
  unsigned __int8 v28;
  uint64_t v29;
  void *__src[2];
  uint64_t v31;
  void (***v32)(FIK::CrtAllocator *__hidden);

  __src[0] = 0;
  __src[1] = 0;
  v31 = 0;
  v32 = FIK::defaultAllocator(this);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v23, "acp");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v20, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v17, ",");
  JSONS::JSONLineObject<FIK::ACPBone>((void **)&v23, (unsigned __int8 *)this + 352, (const void **)&v20, (void **)&v17, 1, (uint64_t)&v26);
  if ((v28 & 0x80u) == 0)
    v5 = &v26;
  else
    v5 = v26;
  if ((v28 & 0x80u) == 0)
    v6 = v28;
  else
    v6 = v27;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(__src, v5, v6);
  if ((char)v28 < 0 && v26)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v29 + 24))(v29, v26, 0, 8);
  if (v18 < 0 && (_QWORD)v17)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v19 + 24))(v19, v17, 0, 8);
  if (v21 < 0 && (_QWORD)v20)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v22 + 24))(v22, v20, 0, 8);
  if (v24 < 0 && (_QWORD)v23)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v25 + 24))(v25, v23, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v23, "source_rot_offset");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v20, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v17, ",");
  JSONS::JSONLineTransform((unint64_t *)&v23, (uint64_t)&v20, &v17, (uint64_t)&v26);
  if ((v28 & 0x80u) == 0)
    v7 = &v26;
  else
    v7 = v26;
  if ((v28 & 0x80u) == 0)
    v8 = v28;
  else
    v8 = v27;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(__src, v7, v8);
  if ((char)v28 < 0 && v26)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v29 + 24))(v29, v26, 0, 8);
  if (v18 < 0 && (_QWORD)v17)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v19 + 24))(v19, v17, 0, 8);
  if (v21 < 0 && (_QWORD)v20)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v22 + 24))(v22, v20, 0, 8);
  if (v24 < 0 && (_QWORD)v23)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v25 + 24))(v25, v23, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v23, "source_rot_offset_p");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v20, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v17, ",");
  JSONS::JSONLineTransform((unint64_t *)&v23, (uint64_t)&v20, &v17, (uint64_t)&v26);
  if ((v28 & 0x80u) == 0)
    v9 = &v26;
  else
    v9 = v26;
  if ((v28 & 0x80u) == 0)
    v10 = v28;
  else
    v10 = v27;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(__src, v9, v10);
  if ((char)v28 < 0 && v26)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v29 + 24))(v29, v26, 0, 8);
  if (v18 < 0 && (_QWORD)v17)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v19 + 24))(v19, v17, 0, 8);
  if (v21 < 0 && (_QWORD)v20)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v22 + 24))(v22, v20, 0, 8);
  if (v24 < 0 && (_QWORD)v23)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v25 + 24))(v25, v23, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v23, "source_index");
  v11 = *((_DWORD *)this + 70);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v20, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v17, ",");
  JSONS::JSONLineInt(&v23, v11, &v20, &v17, (uint64_t)&v26);
  if ((v28 & 0x80u) == 0)
    v12 = &v26;
  else
    v12 = v26;
  if ((v28 & 0x80u) == 0)
    v13 = v28;
  else
    v13 = v27;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(__src, v12, v13);
  if ((char)v28 < 0 && v26)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v29 + 24))(v29, v26, 0, 8);
  if (v18 < 0 && (_QWORD)v17)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v19 + 24))(v19, v17, 0, 8);
  if (v21 < 0 && (_QWORD)v20)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v22 + 24))(v22, v20, 0, 8);
  if (v24 < 0 && (_QWORD)v23)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v25 + 24))(v25, v23, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v23, "source_name");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v20, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v17, (const char *)&unk_2108059BE);
  JSONS::JSONLineStr(&v23, (uint64_t)this + 256, &v20, &v17, (uint64_t)&v26);
  if ((v28 & 0x80u) == 0)
    v14 = &v26;
  else
    v14 = v26;
  if ((v28 & 0x80u) == 0)
    v15 = v28;
  else
    v15 = v27;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(__src, v14, v15);
  if ((char)v28 < 0 && v26)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v29 + 24))(v29, v26, 0, 8);
  if (v18 < 0 && (_QWORD)v17)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v19 + 24))(v19, v17, 0, 8);
  if (v21 < 0 && (_QWORD)v20)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v22 + 24))(v22, v20, 0, 8);
  if (v24 < 0 && (_QWORD)v23)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v25 + 24))(v25, v23, 0, 8);
  result = JSONS::JSONfromRigBone((unsigned __int8 *)this, __src, a2);
  if (SHIBYTE(v31) < 0)
  {
    if (__src[0])
      return (_QWORD *)((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), void *, _QWORD, uint64_t))(*v32)[3])(v32, __src[0], 0, 8);
  }
  return result;
}

_QWORD *JSONS::JSONLineObject<FIK::ACPBone>@<X0>(void **a1@<X0>, unsigned __int8 *a2@<X1>, const void **a3@<X2>, void **a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  int v11;
  void *v12;
  size_t v13;
  _QWORD *v14;
  __int128 v15;
  _QWORD *v16;
  __int128 v17;
  _QWORD *v18;
  size_t v19;
  _QWORD *v20;
  __int128 v21;
  int v22;
  void *v23;
  size_t v24;
  _QWORD *result;
  __int128 v26;
  _QWORD v27[2];
  unsigned __int8 v28;
  uint64_t v29;
  _QWORD __src[2];
  char v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;

  std::operator+[abi:nn180100]<char,std::char_traits<char>,FIK::FIKAllocator<char>>(a3, 34, (uint64_t)__src);
  v11 = *((char *)a1 + 23);
  if (v11 >= 0)
    v12 = a1;
  else
    v12 = *a1;
  if (v11 >= 0)
    v13 = *((unsigned __int8 *)a1 + 23);
  else
    v13 = (size_t)a1[1];
  v14 = std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(__src, v12, v13);
  v15 = *((_OWORD *)v14 + 1);
  v33 = *(_OWORD *)v14;
  v34 = v15;
  v14[1] = 0;
  v14[2] = 0;
  *v14 = 0;
  v16 = std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(&v33, "\":", 2uLL);
  v17 = *((_OWORD *)v16 + 1);
  v35 = *(_OWORD *)v16;
  v36 = v17;
  v16[1] = 0;
  v16[2] = 0;
  *v16 = 0;
  JSONS::JSONObject<FIK::ACPBone>(a2, v27);
  if ((v28 & 0x80u) == 0)
    v18 = v27;
  else
    v18 = (_QWORD *)v27[0];
  if ((v28 & 0x80u) == 0)
    v19 = v28;
  else
    v19 = v27[1];
  v20 = std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(&v35, v18, v19);
  v21 = *((_OWORD *)v20 + 1);
  v37 = *(_OWORD *)v20;
  v38 = v21;
  v20[1] = 0;
  v20[2] = 0;
  *v20 = 0;
  v22 = *((char *)a4 + 23);
  if (v22 >= 0)
    v23 = a4;
  else
    v23 = *a4;
  if (v22 >= 0)
    v24 = *((unsigned __int8 *)a4 + 23);
  else
    v24 = (size_t)a4[1];
  result = std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(&v37, v23, v24);
  v26 = *((_OWORD *)result + 1);
  *(_OWORD *)a6 = *(_OWORD *)result;
  *(_OWORD *)(a6 + 16) = v26;
  result[1] = 0;
  result[2] = 0;
  *result = 0;
  if (SBYTE7(v38) < 0 && (_QWORD)v37)
    result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**((_QWORD **)&v38 + 1) + 24))(*((_QWORD *)&v38 + 1), v37, 0, 8);
  if ((char)v28 < 0 && v27[0])
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v29 + 24))(v29, v27[0], 0, 8);
  if (SBYTE7(v36) < 0 && (_QWORD)v35)
    result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**((_QWORD **)&v36 + 1) + 24))(*((_QWORD *)&v36 + 1), v35, 0, 8);
  if (SBYTE7(v34) < 0 && (_QWORD)v33)
    result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**((_QWORD **)&v34 + 1) + 24))(*((_QWORD *)&v34 + 1), v33, 0, 8);
  if (v31 < 0 && __src[0])
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v32 + 24))(v32, __src[0], 0, 8);
  if (a5)
    return std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::push_back((_QWORD *)a6, 10);
  return result;
}

_QWORD *JSONS::JSONfromRigTask@<X0>(uint64_t a1@<X0>, void **a2@<X1>, _QWORD *a3@<X8>)
{
  int v6;
  int v7;
  _QWORD *v8;
  size_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;
  size_t v13;
  _QWORD *v14;
  size_t v15;
  int v16;
  _QWORD *v17;
  size_t v18;
  int v19;
  _QWORD *v20;
  size_t v21;
  _QWORD *v22;
  size_t v23;
  int v24;
  _QWORD *v25;
  size_t v26;
  _QWORD *v27;
  size_t v28;
  _QWORD *v29;
  size_t v30;
  _QWORD *v31;
  size_t v32;
  int v33;
  _QWORD *v34;
  size_t v35;
  _QWORD *v36;
  size_t v37;
  _QWORD *v38;
  size_t v39;
  _QWORD *v40;
  size_t v41;
  _QWORD *v42;
  size_t v43;
  void *v44;
  int v45;
  void *v46;
  size_t v47;
  __int128 v49;
  char v50;
  uint64_t v51;
  __int128 v52;
  char v53;
  uint64_t v54;
  __int128 v55;
  char v56;
  uint64_t v57;
  _QWORD *v58;
  size_t v59;
  unsigned __int8 v60;
  uint64_t v61;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  a3[3] = FIK::defaultAllocator((FIK *)a1);
  v6 = *(unsigned __int8 *)(a1 + 52);
  v7 = *(unsigned __int8 *)(a1 + 53);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a3, "{", 1uLL);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v55, "name_");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v52, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v49, ",");
  JSONS::JSONLineStr(&v55, a1, &v52, &v49, (uint64_t)&v58);
  if ((v60 & 0x80u) == 0)
    v8 = &v58;
  else
    v8 = v58;
  if ((v60 & 0x80u) == 0)
    v9 = v60;
  else
    v9 = v59;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a3, v8, v9);
  if ((char)v60 < 0 && v58)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v61 + 24))(v61, v58, 0, 8);
  if (v50 < 0 && (_QWORD)v49)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v51 + 24))(v51, v49, 0, 8);
  if (v53 < 0 && (_QWORD)v52)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v54 + 24))(v54, v52, 0, 8);
  if (v56 < 0 && (_QWORD)v55)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v57 + 24))(v57, v55, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v55, "has_position_");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v52, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v49, ",");
  JSONS::JSONLineBool(&v55, v6 != 0, &v52, &v49, (uint64_t)&v58);
  if ((v60 & 0x80u) == 0)
    v10 = &v58;
  else
    v10 = v58;
  if ((v60 & 0x80u) == 0)
    v11 = v60;
  else
    v11 = v59;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a3, v10, v11);
  if ((char)v60 < 0 && v58)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v61 + 24))(v61, v58, 0, 8);
  if (v50 < 0 && (_QWORD)v49)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v51 + 24))(v51, v49, 0, 8);
  if (v53 < 0 && (_QWORD)v52)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v54 + 24))(v54, v52, 0, 8);
  if (v56 < 0 && (_QWORD)v55)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v57 + 24))(v57, v55, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v55, "has_rotation_");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v52, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v49, ",");
  JSONS::JSONLineBool(&v55, v7 != 0, &v52, &v49, (uint64_t)&v58);
  if ((v60 & 0x80u) == 0)
    v12 = &v58;
  else
    v12 = v58;
  if ((v60 & 0x80u) == 0)
    v13 = v60;
  else
    v13 = v59;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a3, v12, v13);
  if ((char)v60 < 0 && v58)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v61 + 24))(v61, v58, 0, 8);
  if (v50 < 0 && (_QWORD)v49)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v51 + 24))(v51, v49, 0, 8);
  if (v53 < 0 && (_QWORD)v52)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v54 + 24))(v54, v52, 0, 8);
  if (v56 < 0 && (_QWORD)v55)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v57 + 24))(v57, v55, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v55, "target_name_");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v52, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v49, ",");
  JSONS::JSONLineStr(&v55, a1 + 24, &v52, &v49, (uint64_t)&v58);
  if ((v60 & 0x80u) == 0)
    v14 = &v58;
  else
    v14 = v58;
  if ((v60 & 0x80u) == 0)
    v15 = v60;
  else
    v15 = v59;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a3, v14, v15);
  if ((char)v60 < 0 && v58)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v61 + 24))(v61, v58, 0, 8);
  if (v50 < 0 && (_QWORD)v49)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v51 + 24))(v51, v49, 0, 8);
  if (v53 < 0 && (_QWORD)v52)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v54 + 24))(v54, v52, 0, 8);
  if (v56 < 0 && (_QWORD)v55)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v57 + 24))(v57, v55, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v55, "target_index_");
  v16 = *(_DWORD *)(a1 + 48);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v52, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v49, ",");
  JSONS::JSONLineInt(&v55, v16, &v52, &v49, (uint64_t)&v58);
  if ((v60 & 0x80u) == 0)
    v17 = &v58;
  else
    v17 = v58;
  if ((v60 & 0x80u) == 0)
    v18 = v60;
  else
    v18 = v59;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a3, v17, v18);
  if ((char)v60 < 0 && v58)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v61 + 24))(v61, v58, 0, 8);
  if (v50 < 0 && (_QWORD)v49)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v51 + 24))(v51, v49, 0, 8);
  if (v53 < 0 && (_QWORD)v52)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v54 + 24))(v54, v52, 0, 8);
  if (v56 < 0 && (_QWORD)v55)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v57 + 24))(v57, v55, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v55, "position_as_pole_");
  v19 = *(unsigned __int8 *)(a1 + 54);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v52, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v49, ",");
  JSONS::JSONLineBool(&v55, v19, &v52, &v49, (uint64_t)&v58);
  if ((v60 & 0x80u) == 0)
    v20 = &v58;
  else
    v20 = v58;
  if ((v60 & 0x80u) == 0)
    v21 = v60;
  else
    v21 = v59;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a3, v20, v21);
  if ((char)v60 < 0 && v58)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v61 + 24))(v61, v58, 0, 8);
  if (v50 < 0 && (_QWORD)v49)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v51 + 24))(v51, v49, 0, 8);
  if (v53 < 0 && (_QWORD)v52)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v54 + 24))(v54, v52, 0, 8);
  if (v56 < 0 && (_QWORD)v55)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v57 + 24))(v57, v55, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v55, "position_dof_");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v52, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v49, ",");
  JSONS::JSONLineFromArray<BOOL,3ul>((unint64_t *)&v55, (unsigned __int8 *)(a1 + 55), &v52, &v49, (uint64_t)&v58);
  if ((v60 & 0x80u) == 0)
    v22 = &v58;
  else
    v22 = v58;
  if ((v60 & 0x80u) == 0)
    v23 = v60;
  else
    v23 = v59;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a3, v22, v23);
  if ((char)v60 < 0 && v58)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v61 + 24))(v61, v58, 0, 8);
  if (v50 < 0 && (_QWORD)v49)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v51 + 24))(v51, v49, 0, 8);
  if (v53 < 0 && (_QWORD)v52)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v54 + 24))(v54, v52, 0, 8);
  if (v56 < 0 && (_QWORD)v55)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v57 + 24))(v57, v55, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v55, "position_depth_");
  v24 = *(_DWORD *)(a1 + 64);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v52, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v49, ",");
  JSONS::JSONLineInt(&v55, v24, &v52, &v49, (uint64_t)&v58);
  if ((v60 & 0x80u) == 0)
    v25 = &v58;
  else
    v25 = v58;
  if ((v60 & 0x80u) == 0)
    v26 = v60;
  else
    v26 = v59;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a3, v25, v26);
  if ((char)v60 < 0 && v58)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v61 + 24))(v61, v58, 0, 8);
  if (v50 < 0 && (_QWORD)v49)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v51 + 24))(v51, v49, 0, 8);
  if (v53 < 0 && (_QWORD)v52)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v54 + 24))(v54, v52, 0, 8);
  if (v56 < 0 && (_QWORD)v55)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v57 + 24))(v57, v55, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v55, "position_weight_");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v52, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v49, ",");
  JSONS::JSONLineVect((unint64_t *)&v55, (uint64_t)&v52, &v49, (uint64_t)&v58);
  if ((v60 & 0x80u) == 0)
    v27 = &v58;
  else
    v27 = v58;
  if ((v60 & 0x80u) == 0)
    v28 = v60;
  else
    v28 = v59;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a3, v27, v28);
  if ((char)v60 < 0 && v58)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v61 + 24))(v61, v58, 0, 8);
  if (v50 < 0 && (_QWORD)v49)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v51 + 24))(v51, v49, 0, 8);
  if (v53 < 0 && (_QWORD)v52)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v54 + 24))(v54, v52, 0, 8);
  if (v56 < 0 && (_QWORD)v55)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v57 + 24))(v57, v55, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v55, "position_precision_");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v52, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v49, ",");
  JSONS::JSONLineVect((unint64_t *)&v55, (uint64_t)&v52, &v49, (uint64_t)&v58);
  if ((v60 & 0x80u) == 0)
    v29 = &v58;
  else
    v29 = v58;
  if ((v60 & 0x80u) == 0)
    v30 = v60;
  else
    v30 = v59;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a3, v29, v30);
  if ((char)v60 < 0 && v58)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v61 + 24))(v61, v58, 0, 8);
  if (v50 < 0 && (_QWORD)v49)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v51 + 24))(v51, v49, 0, 8);
  if (v53 < 0 && (_QWORD)v52)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v54 + 24))(v54, v52, 0, 8);
  if (v56 < 0 && (_QWORD)v55)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v57 + 24))(v57, v55, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v55, "rotation_dof_");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v52, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v49, ",");
  JSONS::JSONLineFromArray<BOOL,3ul>((unint64_t *)&v55, (unsigned __int8 *)(a1 + 58), &v52, &v49, (uint64_t)&v58);
  if ((v60 & 0x80u) == 0)
    v31 = &v58;
  else
    v31 = v58;
  if ((v60 & 0x80u) == 0)
    v32 = v60;
  else
    v32 = v59;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a3, v31, v32);
  if ((char)v60 < 0 && v58)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v61 + 24))(v61, v58, 0, 8);
  if (v50 < 0 && (_QWORD)v49)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v51 + 24))(v51, v49, 0, 8);
  if (v53 < 0 && (_QWORD)v52)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v54 + 24))(v54, v52, 0, 8);
  if (v56 < 0 && (_QWORD)v55)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v57 + 24))(v57, v55, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v55, "rotation_depth_");
  v33 = *(_DWORD *)(a1 + 68);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v52, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v49, ",");
  JSONS::JSONLineInt(&v55, v33, &v52, &v49, (uint64_t)&v58);
  if ((v60 & 0x80u) == 0)
    v34 = &v58;
  else
    v34 = v58;
  if ((v60 & 0x80u) == 0)
    v35 = v60;
  else
    v35 = v59;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a3, v34, v35);
  if ((char)v60 < 0 && v58)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v61 + 24))(v61, v58, 0, 8);
  if (v50 < 0 && (_QWORD)v49)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v51 + 24))(v51, v49, 0, 8);
  if (v53 < 0 && (_QWORD)v52)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v54 + 24))(v54, v52, 0, 8);
  if (v56 < 0 && (_QWORD)v55)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v57 + 24))(v57, v55, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v55, "rotation_weight_");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v52, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v49, ",");
  JSONS::JSONLineVect((unint64_t *)&v55, (uint64_t)&v52, &v49, (uint64_t)&v58);
  if ((v60 & 0x80u) == 0)
    v36 = &v58;
  else
    v36 = v58;
  if ((v60 & 0x80u) == 0)
    v37 = v60;
  else
    v37 = v59;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a3, v36, v37);
  if ((char)v60 < 0 && v58)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v61 + 24))(v61, v58, 0, 8);
  if (v50 < 0 && (_QWORD)v49)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v51 + 24))(v51, v49, 0, 8);
  if (v53 < 0 && (_QWORD)v52)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v54 + 24))(v54, v52, 0, 8);
  if (v56 < 0 && (_QWORD)v55)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v57 + 24))(v57, v55, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v55, "rotation_precision_");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v52, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v49, ",");
  JSONS::JSONLineVect((unint64_t *)&v55, (uint64_t)&v52, &v49, (uint64_t)&v58);
  if ((v60 & 0x80u) == 0)
    v38 = &v58;
  else
    v38 = v58;
  if ((v60 & 0x80u) == 0)
    v39 = v60;
  else
    v39 = v59;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a3, v38, v39);
  if ((char)v60 < 0 && v58)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v61 + 24))(v61, v58, 0, 8);
  if (v50 < 0 && (_QWORD)v49)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v51 + 24))(v51, v49, 0, 8);
  if (v53 < 0 && (_QWORD)v52)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v54 + 24))(v54, v52, 0, 8);
  if (v56 < 0 && (_QWORD)v55)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v57 + 24))(v57, v55, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v55, "tip_offset_");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v52, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v49, ",");
  JSONS::JSONLineVect((unint64_t *)&v55, (uint64_t)&v52, &v49, (uint64_t)&v58);
  if ((v60 & 0x80u) == 0)
    v40 = &v58;
  else
    v40 = v58;
  if ((v60 & 0x80u) == 0)
    v41 = v60;
  else
    v41 = v59;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a3, v40, v41);
  if ((char)v60 < 0 && v58)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v61 + 24))(v61, v58, 0, 8);
  if (v50 < 0 && (_QWORD)v49)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v51 + 24))(v51, v49, 0, 8);
  if (v53 < 0 && (_QWORD)v52)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v54 + 24))(v54, v52, 0, 8);
  if (v56 < 0 && (_QWORD)v55)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v57 + 24))(v57, v55, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v55, "task_preprocessing");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v52, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v49, (const char *)&unk_2108059BE);
  JSONS::JSONLineObject<FIK::TaskPreprocessing>((void **)&v55, a1 + 160, (const void **)&v52, (void **)&v49, 1, (uint64_t)&v58);
  if ((v60 & 0x80u) == 0)
    v42 = &v58;
  else
    v42 = v58;
  if ((v60 & 0x80u) == 0)
    v43 = v60;
  else
    v43 = v59;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a3, v42, v43);
  if ((char)v60 < 0 && v58)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v61 + 24))(v61, v58, 0, 8);
  if (v50 < 0 && (_QWORD)v49)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v51 + 24))(v51, v49, 0, 8);
  if (v53 < 0 && (_QWORD)v52)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v54 + 24))(v54, v52, 0, 8);
  if (v56 < 0 && (_QWORD)v55)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v57 + 24))(v57, v55, 0, 8);
  v44 = (void *)*((unsigned __int8 *)a2 + 23);
  if ((char)v44 < 0)
    v44 = a2[1];
  if (v44)
  {
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a3, ",", 1uLL);
    v45 = *((char *)a2 + 23);
    if (v45 >= 0)
      v46 = a2;
    else
      v46 = *a2;
    if (v45 >= 0)
      v47 = *((unsigned __int8 *)a2 + 23);
    else
      v47 = (size_t)a2[1];
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a3, v46, v47);
  }
  return std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a3, "}", 1uLL);
}

_QWORD *JSONS::JSONLineObject<FIK::TaskPreprocessing>@<X0>(void **a1@<X0>, uint64_t a2@<X1>, const void **a3@<X2>, void **a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  int v11;
  void *v12;
  size_t v13;
  _QWORD *v14;
  __int128 v15;
  _QWORD *v16;
  __int128 v17;
  _QWORD *v18;
  size_t v19;
  _QWORD *v20;
  __int128 v21;
  int v22;
  void *v23;
  size_t v24;
  _QWORD *result;
  __int128 v26;
  _QWORD v27[2];
  unsigned __int8 v28;
  uint64_t v29;
  _QWORD __src[2];
  char v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;

  std::operator+[abi:nn180100]<char,std::char_traits<char>,FIK::FIKAllocator<char>>(a3, 34, (uint64_t)__src);
  v11 = *((char *)a1 + 23);
  if (v11 >= 0)
    v12 = a1;
  else
    v12 = *a1;
  if (v11 >= 0)
    v13 = *((unsigned __int8 *)a1 + 23);
  else
    v13 = (size_t)a1[1];
  v14 = std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(__src, v12, v13);
  v15 = *((_OWORD *)v14 + 1);
  v33 = *(_OWORD *)v14;
  v34 = v15;
  v14[1] = 0;
  v14[2] = 0;
  *v14 = 0;
  v16 = std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(&v33, "\":", 2uLL);
  v17 = *((_OWORD *)v16 + 1);
  v35 = *(_OWORD *)v16;
  v36 = v17;
  v16[1] = 0;
  v16[2] = 0;
  *v16 = 0;
  JSONS::JSONObject<FIK::TaskPreprocessing>(a2, v27);
  if ((v28 & 0x80u) == 0)
    v18 = v27;
  else
    v18 = (_QWORD *)v27[0];
  if ((v28 & 0x80u) == 0)
    v19 = v28;
  else
    v19 = v27[1];
  v20 = std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(&v35, v18, v19);
  v21 = *((_OWORD *)v20 + 1);
  v37 = *(_OWORD *)v20;
  v38 = v21;
  v20[1] = 0;
  v20[2] = 0;
  *v20 = 0;
  v22 = *((char *)a4 + 23);
  if (v22 >= 0)
    v23 = a4;
  else
    v23 = *a4;
  if (v22 >= 0)
    v24 = *((unsigned __int8 *)a4 + 23);
  else
    v24 = (size_t)a4[1];
  result = std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(&v37, v23, v24);
  v26 = *((_OWORD *)result + 1);
  *(_OWORD *)a6 = *(_OWORD *)result;
  *(_OWORD *)(a6 + 16) = v26;
  result[1] = 0;
  result[2] = 0;
  *result = 0;
  if (SBYTE7(v38) < 0 && (_QWORD)v37)
    result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**((_QWORD **)&v38 + 1) + 24))(*((_QWORD *)&v38 + 1), v37, 0, 8);
  if ((char)v28 < 0 && v27[0])
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v29 + 24))(v29, v27[0], 0, 8);
  if (SBYTE7(v36) < 0 && (_QWORD)v35)
    result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**((_QWORD **)&v36 + 1) + 24))(*((_QWORD *)&v36 + 1), v35, 0, 8);
  if (SBYTE7(v34) < 0 && (_QWORD)v33)
    result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**((_QWORD **)&v34 + 1) + 24))(*((_QWORD *)&v34 + 1), v33, 0, 8);
  if (v31 < 0 && __src[0])
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v32 + 24))(v32, __src[0], 0, 8);
  if (a5)
    return std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::push_back((_QWORD *)a6, 10);
  return result;
}

_QWORD *JSONS::JSONfromMoCapTask@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  size_t v5;
  _QWORD *v6;
  size_t v7;
  _QWORD *v8;
  size_t v9;
  int v10;
  _QWORD *v11;
  size_t v12;
  int v13;
  _QWORD *v14;
  size_t v15;
  int v16;
  _QWORD *v17;
  size_t v18;
  _QWORD *result;
  __int128 v20;
  char v21;
  uint64_t v22;
  __int128 v23;
  char v24;
  uint64_t v25;
  __int128 v26;
  char v27;
  uint64_t v28;
  _QWORD *v29;
  size_t v30;
  unsigned __int8 v31;
  uint64_t v32;
  void *__src[2];
  uint64_t v34;
  void (***v35)(FIK::CrtAllocator *__hidden);

  __src[0] = 0;
  __src[1] = 0;
  v34 = 0;
  v35 = FIK::defaultAllocator((FIK *)a1);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v26, "offset");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v23, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v20, ",");
  JSONS::JSONLineTransform((unint64_t *)&v26, (uint64_t)&v23, &v20, (uint64_t)&v29);
  if ((v31 & 0x80u) == 0)
    v4 = &v29;
  else
    v4 = v29;
  if ((v31 & 0x80u) == 0)
    v5 = v31;
  else
    v5 = v30;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(__src, v4, v5);
  if ((char)v31 < 0 && v29)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v32 + 24))(v32, v29, 0, 8);
  if (v21 < 0 && (_QWORD)v20)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v22 + 24))(v22, v20, 0, 8);
  if (v24 < 0 && (_QWORD)v23)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v25 + 24))(v25, v23, 0, 8);
  if (v27 < 0 && (_QWORD)v26)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v28 + 24))(v28, v26, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v26, "scale_offset");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v23, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v20, ",");
  JSONS::JSONLineVect((unint64_t *)&v26, (uint64_t)&v23, &v20, (uint64_t)&v29);
  if ((v31 & 0x80u) == 0)
    v6 = &v29;
  else
    v6 = v29;
  if ((v31 & 0x80u) == 0)
    v7 = v31;
  else
    v7 = v30;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(__src, v6, v7);
  if ((char)v31 < 0 && v29)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v32 + 24))(v32, v29, 0, 8);
  if (v21 < 0 && (_QWORD)v20)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v22 + 24))(v22, v20, 0, 8);
  if (v24 < 0 && (_QWORD)v23)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v25 + 24))(v25, v23, 0, 8);
  if (v27 < 0 && (_QWORD)v26)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v28 + 24))(v28, v26, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v26, "source_name");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v23, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v20, ",");
  JSONS::JSONLineStr(&v26, a1 + 176, &v23, &v20, (uint64_t)&v29);
  if ((v31 & 0x80u) == 0)
    v8 = &v29;
  else
    v8 = v29;
  if ((v31 & 0x80u) == 0)
    v9 = v31;
  else
    v9 = v30;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(__src, v8, v9);
  if ((char)v31 < 0 && v29)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v32 + 24))(v32, v29, 0, 8);
  if (v21 < 0 && (_QWORD)v20)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v22 + 24))(v22, v20, 0, 8);
  if (v24 < 0 && (_QWORD)v23)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v25 + 24))(v25, v23, 0, 8);
  if (v27 < 0 && (_QWORD)v26)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v28 + 24))(v28, v26, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v26, "source_index");
  v10 = *(_DWORD *)(a1 + 200);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v23, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v20, ",");
  JSONS::JSONLineInt(&v26, v10, &v23, &v20, (uint64_t)&v29);
  if ((v31 & 0x80u) == 0)
    v11 = &v29;
  else
    v11 = v29;
  if ((v31 & 0x80u) == 0)
    v12 = v31;
  else
    v12 = v30;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(__src, v11, v12);
  if ((char)v31 < 0 && v29)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v32 + 24))(v32, v29, 0, 8);
  if (v21 < 0 && (_QWORD)v20)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v22 + 24))(v22, v20, 0, 8);
  if (v24 < 0 && (_QWORD)v23)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v25 + 24))(v25, v23, 0, 8);
  if (v27 < 0 && (_QWORD)v26)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v28 + 24))(v28, v26, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v26, "is_parent_constraint");
  v13 = *(unsigned __int8 *)(a1 + 204);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v23, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v20, ",");
  JSONS::JSONLineBool(&v26, v13, &v23, &v20, (uint64_t)&v29);
  if ((v31 & 0x80u) == 0)
    v14 = &v29;
  else
    v14 = v29;
  if ((v31 & 0x80u) == 0)
    v15 = v31;
  else
    v15 = v30;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(__src, v14, v15);
  if ((char)v31 < 0 && v29)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v32 + 24))(v32, v29, 0, 8);
  if (v21 < 0 && (_QWORD)v20)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v22 + 24))(v22, v20, 0, 8);
  if (v24 < 0 && (_QWORD)v23)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v25 + 24))(v25, v23, 0, 8);
  if (v27 < 0 && (_QWORD)v26)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v28 + 24))(v28, v26, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v26, "is_zero_offset");
  v16 = *(unsigned __int8 *)(a1 + 205);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v23, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v20, (const char *)&unk_2108059BE);
  JSONS::JSONLineBool(&v26, v16, &v23, &v20, (uint64_t)&v29);
  if ((v31 & 0x80u) == 0)
    v17 = &v29;
  else
    v17 = v29;
  if ((v31 & 0x80u) == 0)
    v18 = v31;
  else
    v18 = v30;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(__src, v17, v18);
  if ((char)v31 < 0 && v29)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v32 + 24))(v32, v29, 0, 8);
  if (v21 < 0 && (_QWORD)v20)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v22 + 24))(v22, v20, 0, 8);
  if (v24 < 0 && (_QWORD)v23)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v25 + 24))(v25, v23, 0, 8);
  if (v27 < 0 && (_QWORD)v26)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v28 + 24))(v28, v26, 0, 8);
  result = JSONS::JSONfromRigTask(a1, __src, a2);
  if (SHIBYTE(v34) < 0)
  {
    if (__src[0])
      return (_QWORD *)((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), void *, _QWORD, uint64_t))(*v35)[3])(v35, __src[0], 0, 8);
  }
  return result;
}

_QWORD *JSONS::JSONfromGameTask@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  _QWORD *v5;
  size_t v6;
  int v7;
  _QWORD *v8;
  size_t v9;
  int v10;
  _QWORD *v11;
  size_t v12;
  int v13;
  _QWORD *v14;
  size_t v15;
  int v16;
  _QWORD *v17;
  size_t v18;
  int v19;
  _QWORD *v20;
  size_t v21;
  _QWORD *v22;
  size_t v23;
  _QWORD *v24;
  size_t v25;
  _QWORD *v26;
  size_t v27;
  int v28;
  _QWORD *v29;
  size_t v30;
  _QWORD *result;
  __int128 v32;
  char v33;
  uint64_t v34;
  __int128 v35;
  char v36;
  uint64_t v37;
  __int128 v38;
  char v39;
  uint64_t v40;
  _QWORD *v41;
  size_t v42;
  unsigned __int8 v43;
  uint64_t v44;
  void *__src[2];
  uint64_t v46;
  void (***v47)(FIK::CrtAllocator *__hidden);

  __src[0] = 0;
  __src[1] = 0;
  v46 = 0;
  v47 = FIK::defaultAllocator((FIK *)a1);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v38, "is_raytrace_");
  v4 = *(unsigned __int8 *)(a1 + 228);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v35, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v32, ",");
  JSONS::JSONLineBool(&v38, v4, &v35, &v32, (uint64_t)&v41);
  if ((v43 & 0x80u) == 0)
    v5 = &v41;
  else
    v5 = v41;
  if ((v43 & 0x80u) == 0)
    v6 = v43;
  else
    v6 = v42;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(__src, v5, v6);
  if ((char)v43 < 0 && v41)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v44 + 24))(v44, v41, 0, 8);
  if (v33 < 0 && (_QWORD)v32)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v34 + 24))(v34, v32, 0, 8);
  if (v36 < 0 && (_QWORD)v35)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v37 + 24))(v37, v35, 0, 8);
  if (v39 < 0 && (_QWORD)v38)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v40 + 24))(v40, v38, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v38, "is_chest_");
  v7 = *(unsigned __int8 *)(a1 + 229);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v35, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v32, ",");
  JSONS::JSONLineBool(&v38, v7, &v35, &v32, (uint64_t)&v41);
  if ((v43 & 0x80u) == 0)
    v8 = &v41;
  else
    v8 = v41;
  if ((v43 & 0x80u) == 0)
    v9 = v43;
  else
    v9 = v42;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(__src, v8, v9);
  if ((char)v43 < 0 && v41)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v44 + 24))(v44, v41, 0, 8);
  if (v33 < 0 && (_QWORD)v32)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v34 + 24))(v34, v32, 0, 8);
  if (v36 < 0 && (_QWORD)v35)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v37 + 24))(v37, v35, 0, 8);
  if (v39 < 0 && (_QWORD)v38)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v40 + 24))(v40, v38, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v38, "is_vr_task_");
  v10 = *(unsigned __int8 *)(a1 + 230);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v35, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v32, ",");
  JSONS::JSONLineBool(&v38, v10, &v35, &v32, (uint64_t)&v41);
  if ((v43 & 0x80u) == 0)
    v11 = &v41;
  else
    v11 = v41;
  if ((v43 & 0x80u) == 0)
    v12 = v43;
  else
    v12 = v42;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(__src, v11, v12);
  if ((char)v43 < 0 && v41)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v44 + 24))(v44, v41, 0, 8);
  if (v33 < 0 && (_QWORD)v32)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v34 + 24))(v34, v32, 0, 8);
  if (v36 < 0 && (_QWORD)v35)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v37 + 24))(v37, v35, 0, 8);
  if (v39 < 0 && (_QWORD)v38)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v40 + 24))(v40, v38, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v38, "use_fk_orientation_");
  v13 = *(unsigned __int8 *)(a1 + 231);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v35, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v32, ",");
  JSONS::JSONLineBool(&v38, v13, &v35, &v32, (uint64_t)&v41);
  if ((v43 & 0x80u) == 0)
    v14 = &v41;
  else
    v14 = v41;
  if ((v43 & 0x80u) == 0)
    v15 = v43;
  else
    v15 = v42;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(__src, v14, v15);
  if ((char)v43 < 0 && v41)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v44 + 24))(v44, v41, 0, 8);
  if (v33 < 0 && (_QWORD)v32)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v34 + 24))(v34, v32, 0, 8);
  if (v36 < 0 && (_QWORD)v35)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v37 + 24))(v37, v35, 0, 8);
  if (v39 < 0 && (_QWORD)v38)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v40 + 24))(v40, v38, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v38, "is_ls_look_at_");
  v16 = *(unsigned __int8 *)(a1 + 232);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v35, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v32, ",");
  JSONS::JSONLineBool(&v38, v16, &v35, &v32, (uint64_t)&v41);
  if ((v43 & 0x80u) == 0)
    v17 = &v41;
  else
    v17 = v41;
  if ((v43 & 0x80u) == 0)
    v18 = v43;
  else
    v18 = v42;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(__src, v17, v18);
  if ((char)v43 < 0 && v41)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v44 + 24))(v44, v41, 0, 8);
  if (v33 < 0 && (_QWORD)v32)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v34 + 24))(v34, v32, 0, 8);
  if (v36 < 0 && (_QWORD)v35)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v37 + 24))(v37, v35, 0, 8);
  if (v39 < 0 && (_QWORD)v38)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v40 + 24))(v40, v38, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v38, "is_look_at_");
  v19 = *(unsigned __int8 *)(a1 + 233);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v35, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v32, ",");
  JSONS::JSONLineBool(&v38, v19, &v35, &v32, (uint64_t)&v41);
  if ((v43 & 0x80u) == 0)
    v20 = &v41;
  else
    v20 = v41;
  if ((v43 & 0x80u) == 0)
    v21 = v43;
  else
    v21 = v42;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(__src, v20, v21);
  if ((char)v43 < 0 && v41)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v44 + 24))(v44, v41, 0, 8);
  if (v33 < 0 && (_QWORD)v32)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v34 + 24))(v34, v32, 0, 8);
  if (v36 < 0 && (_QWORD)v35)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v37 + 24))(v37, v35, 0, 8);
  if (v39 < 0 && (_QWORD)v38)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v40 + 24))(v40, v38, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v38, "look_at_axis_");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v35, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v32, ",");
  JSONS::JSONLineVect((unint64_t *)&v38, (uint64_t)&v35, &v32, (uint64_t)&v41);
  if ((v43 & 0x80u) == 0)
    v22 = &v41;
  else
    v22 = v41;
  if ((v43 & 0x80u) == 0)
    v23 = v43;
  else
    v23 = v42;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(__src, v22, v23);
  if ((char)v43 < 0 && v41)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v44 + 24))(v44, v41, 0, 8);
  if (v33 < 0 && (_QWORD)v32)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v34 + 24))(v34, v32, 0, 8);
  if (v36 < 0 && (_QWORD)v35)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v37 + 24))(v37, v35, 0, 8);
  if (v39 < 0 && (_QWORD)v38)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v40 + 24))(v40, v38, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v38, "mesh_offset_");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v35, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v32, ",");
  JSONS::JSONLineReal(&v38, &v35, &v32, 8, (uint64_t)&v41);
  if ((v43 & 0x80u) == 0)
    v24 = &v41;
  else
    v24 = v41;
  if ((v43 & 0x80u) == 0)
    v25 = v43;
  else
    v25 = v42;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(__src, v24, v25);
  if ((char)v43 < 0 && v41)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v44 + 24))(v44, v41, 0, 8);
  if (v33 < 0 && (_QWORD)v32)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v34 + 24))(v34, v32, 0, 8);
  if (v36 < 0 && (_QWORD)v35)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v37 + 24))(v37, v35, 0, 8);
  if (v39 < 0 && (_QWORD)v38)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v40 + 24))(v40, v38, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v38, "motion_controller_offset_");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v35, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v32, ",");
  JSONS::JSONLineTransform((unint64_t *)&v38, (uint64_t)&v35, &v32, (uint64_t)&v41);
  if ((v43 & 0x80u) == 0)
    v26 = &v41;
  else
    v26 = v41;
  if ((v43 & 0x80u) == 0)
    v27 = v43;
  else
    v27 = v42;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(__src, v26, v27);
  if ((char)v43 < 0 && v41)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v44 + 24))(v44, v41, 0, 8);
  if (v33 < 0 && (_QWORD)v32)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v34 + 24))(v34, v32, 0, 8);
  if (v36 < 0 && (_QWORD)v35)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v37 + 24))(v37, v35, 0, 8);
  if (v39 < 0 && (_QWORD)v38)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v40 + 24))(v40, v38, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v38, "blend_type_");
  v28 = *(_DWORD *)(a1 + 224);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v35, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v32, (const char *)&unk_2108059BE);
  JSONS::JSONLineInt(&v38, v28, &v35, &v32, (uint64_t)&v41);
  if ((v43 & 0x80u) == 0)
    v29 = &v41;
  else
    v29 = v41;
  if ((v43 & 0x80u) == 0)
    v30 = v43;
  else
    v30 = v42;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(__src, v29, v30);
  if ((char)v43 < 0 && v41)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v44 + 24))(v44, v41, 0, 8);
  if (v33 < 0 && (_QWORD)v32)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v34 + 24))(v34, v32, 0, 8);
  if (v36 < 0 && (_QWORD)v35)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v37 + 24))(v37, v35, 0, 8);
  if (v39 < 0 && (_QWORD)v38)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v40 + 24))(v40, v38, 0, 8);
  result = JSONS::JSONfromRigTask(a1, __src, a2);
  if (SHIBYTE(v46) < 0)
  {
    if (__src[0])
      return (_QWORD *)((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), void *, _QWORD, uint64_t))(*v47)[3])(v47, __src[0], 0, 8);
  }
  return result;
}

_QWORD *JSONS::JSONfromRigBalanceTask@<X0>(unsigned __int8 *a1@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  _QWORD *v5;
  size_t v6;
  _QWORD *v7;
  size_t v8;
  _QWORD *v9;
  size_t v10;
  _QWORD *v11;
  size_t v12;
  __int128 v14;
  char v15;
  uint64_t v16;
  __int128 v17;
  char v18;
  uint64_t v19;
  __int128 v20;
  char v21;
  uint64_t v22;
  _QWORD *v23;
  size_t v24;
  unsigned __int8 v25;
  uint64_t v26;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = FIK::defaultAllocator((FIK *)a1);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, "{", 1uLL);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v20, "global_up");
  v4 = *(_DWORD *)a1;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v17, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v14, ",");
  JSONS::JSONLineInt(&v20, v4, &v17, &v14, (uint64_t)&v23);
  if ((v25 & 0x80u) == 0)
    v5 = &v23;
  else
    v5 = v23;
  if ((v25 & 0x80u) == 0)
    v6 = v25;
  else
    v6 = v24;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, v5, v6);
  if ((char)v25 < 0 && v23)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v26 + 24))(v26, v23, 0, 8);
  if (v15 < 0 && (_QWORD)v14)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v16 + 24))(v16, v14, 0, 8);
  if (v18 < 0 && (_QWORD)v17)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v19 + 24))(v19, v17, 0, 8);
  if (v21 < 0 && (_QWORD)v20)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v22 + 24))(v22, v20, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v20, "position_dof");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v17, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v14, ",");
  JSONS::JSONLineFromArray<BOOL,3ul>((unint64_t *)&v20, a1 + 4, &v17, &v14, (uint64_t)&v23);
  if ((v25 & 0x80u) == 0)
    v7 = &v23;
  else
    v7 = v23;
  if ((v25 & 0x80u) == 0)
    v8 = v25;
  else
    v8 = v24;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, v7, v8);
  if ((char)v25 < 0 && v23)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v26 + 24))(v26, v23, 0, 8);
  if (v15 < 0 && (_QWORD)v14)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v16 + 24))(v16, v14, 0, 8);
  if (v18 < 0 && (_QWORD)v17)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v19 + 24))(v19, v17, 0, 8);
  if (v21 < 0 && (_QWORD)v20)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v22 + 24))(v22, v20, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v20, "precision");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v17, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v14, ",");
  JSONS::JSONLineVect((unint64_t *)&v20, (uint64_t)&v17, &v14, (uint64_t)&v23);
  if ((v25 & 0x80u) == 0)
    v9 = &v23;
  else
    v9 = v23;
  if ((v25 & 0x80u) == 0)
    v10 = v25;
  else
    v10 = v24;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, v9, v10);
  if ((char)v25 < 0 && v23)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v26 + 24))(v26, v23, 0, 8);
  if (v15 < 0 && (_QWORD)v14)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v16 + 24))(v16, v14, 0, 8);
  if (v18 < 0 && (_QWORD)v17)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v19 + 24))(v19, v17, 0, 8);
  if (v21 < 0 && (_QWORD)v20)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v22 + 24))(v22, v20, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v20, "weight");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v17, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v14, (const char *)&unk_2108059BE);
  JSONS::JSONLineVect((unint64_t *)&v20, (uint64_t)&v17, &v14, (uint64_t)&v23);
  if ((v25 & 0x80u) == 0)
    v11 = &v23;
  else
    v11 = v23;
  if ((v25 & 0x80u) == 0)
    v12 = v25;
  else
    v12 = v24;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, v11, v12);
  if ((char)v25 < 0 && v23)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v26 + 24))(v26, v23, 0, 8);
  if (v15 < 0 && (_QWORD)v14)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v16 + 24))(v16, v14, 0, 8);
  if (v18 < 0 && (_QWORD)v17)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v19 + 24))(v19, v17, 0, 8);
  if (v21 < 0 && (_QWORD)v20)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v22 + 24))(v22, v20, 0, 8);
  return std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, "}", 1uLL);
}

_QWORD *JSONS::JSONfromSolverSettings@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  _QWORD *v5;
  size_t v6;
  int v7;
  _QWORD *v8;
  size_t v9;
  int v10;
  _QWORD *v11;
  size_t v12;
  int v13;
  _QWORD *v14;
  size_t v15;
  _QWORD *v16;
  size_t v17;
  int v18;
  _QWORD *v19;
  size_t v20;
  int v21;
  _QWORD *v22;
  size_t v23;
  _QWORD *v24;
  size_t v25;
  _QWORD *v26;
  size_t v27;
  _QWORD *v28;
  size_t v29;
  _QWORD *v30;
  size_t v31;
  _QWORD *v32;
  size_t v33;
  _QWORD *v34;
  size_t v35;
  _QWORD *v36;
  size_t v37;
  _QWORD *v38;
  size_t v39;
  __int128 v41;
  char v42;
  uint64_t v43;
  __int128 v44;
  char v45;
  uint64_t v46;
  __int128 v47;
  char v48;
  uint64_t v49;
  _QWORD *v50;
  size_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = FIK::defaultAllocator((FIK *)a1);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, "{", 1uLL);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v47, "balance_moments_enabled_");
  v4 = *(unsigned __int8 *)(a1 + 52);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v44, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v41, ",");
  JSONS::JSONLineBool(&v47, v4, &v44, &v41, (uint64_t)&v50);
  if ((v52 & 0x80u) == 0)
    v5 = &v50;
  else
    v5 = v50;
  if ((v52 & 0x80u) == 0)
    v6 = v52;
  else
    v6 = v51;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, v5, v6);
  if ((char)v52 < 0 && v50)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v53 + 24))(v53, v50, 0, 8);
  if (v42 < 0 && (_QWORD)v41)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v43 + 24))(v43, v41, 0, 8);
  if (v45 < 0 && (_QWORD)v44)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v46 + 24))(v46, v44, 0, 8);
  if (v48 < 0 && (_QWORD)v47)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v49 + 24))(v49, v47, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v47, "translate_root");
  v7 = *(unsigned __int8 *)(a1 + 24);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v44, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v41, ",");
  JSONS::JSONLineBool(&v47, v7, &v44, &v41, (uint64_t)&v50);
  if ((v52 & 0x80u) == 0)
    v8 = &v50;
  else
    v8 = v50;
  if ((v52 & 0x80u) == 0)
    v9 = v52;
  else
    v9 = v51;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, v8, v9);
  if ((char)v52 < 0 && v50)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v53 + 24))(v53, v50, 0, 8);
  if (v42 < 0 && (_QWORD)v41)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v43 + 24))(v43, v41, 0, 8);
  if (v45 < 0 && (_QWORD)v44)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v46 + 24))(v46, v44, 0, 8);
  if (v48 < 0 && (_QWORD)v47)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v49 + 24))(v49, v47, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v47, "enable_shadow_posing_");
  v10 = *(unsigned __int8 *)(a1 + 25);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v44, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v41, ",");
  JSONS::JSONLineBool(&v47, v10, &v44, &v41, (uint64_t)&v50);
  if ((v52 & 0x80u) == 0)
    v11 = &v50;
  else
    v11 = v50;
  if ((v52 & 0x80u) == 0)
    v12 = v52;
  else
    v12 = v51;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, v11, v12);
  if ((char)v52 < 0 && v50)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v53 + 24))(v53, v50, 0, 8);
  if (v42 < 0 && (_QWORD)v41)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v43 + 24))(v43, v41, 0, 8);
  if (v45 < 0 && (_QWORD)v44)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v46 + 24))(v46, v44, 0, 8);
  if (v48 < 0 && (_QWORD)v47)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v49 + 24))(v49, v47, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v47, "combine_errors_");
  v13 = *(unsigned __int8 *)(a1 + 26);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v44, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v41, ",");
  JSONS::JSONLineBool(&v47, v13, &v44, &v41, (uint64_t)&v50);
  if ((v52 & 0x80u) == 0)
    v14 = &v50;
  else
    v14 = v50;
  if ((v52 & 0x80u) == 0)
    v15 = v52;
  else
    v15 = v51;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, v14, v15);
  if ((char)v52 < 0 && v50)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v53 + 24))(v53, v50, 0, 8);
  if (v42 < 0 && (_QWORD)v41)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v43 + 24))(v43, v41, 0, 8);
  if (v45 < 0 && (_QWORD)v44)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v46 + 24))(v46, v44, 0, 8);
  if (v48 < 0 && (_QWORD)v47)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v49 + 24))(v49, v47, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v47, "balance_task_type");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v44, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v41, ",");
  JSONS::JSONLineBalanceType((FIK *)&v47, (int *)(a1 + 28), &v44, &v41, (uint64_t)&v50);
  if ((v52 & 0x80u) == 0)
    v16 = &v50;
  else
    v16 = v50;
  if ((v52 & 0x80u) == 0)
    v17 = v52;
  else
    v17 = v51;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, v16, v17);
  if ((char)v52 < 0 && v50)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v53 + 24))(v53, v50, 0, 8);
  if (v42 < 0 && (_QWORD)v41)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v43 + 24))(v43, v41, 0, 8);
  if (v45 < 0 && (_QWORD)v44)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v46 + 24))(v46, v44, 0, 8);
  if (v48 < 0 && (_QWORD)v47)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v49 + 24))(v49, v47, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v47, "balance_use_default_zmp");
  v18 = *(unsigned __int8 *)(a1 + 53);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v44, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v41, ",");
  JSONS::JSONLineBool(&v47, v18, &v44, &v41, (uint64_t)&v50);
  if ((v52 & 0x80u) == 0)
    v19 = &v50;
  else
    v19 = v50;
  if ((v52 & 0x80u) == 0)
    v20 = v52;
  else
    v20 = v51;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, v19, v20);
  if ((char)v52 < 0 && v50)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v53 + 24))(v53, v50, 0, 8);
  if (v42 < 0 && (_QWORD)v41)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v43 + 24))(v43, v41, 0, 8);
  if (v45 < 0 && (_QWORD)v44)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v46 + 24))(v46, v44, 0, 8);
  if (v48 < 0 && (_QWORD)v47)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v49 + 24))(v49, v47, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v47, "max_iterations_");
  v21 = *(_DWORD *)(a1 + 12);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v44, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v41, ",");
  JSONS::JSONLineInt(&v47, v21, &v44, &v41, (uint64_t)&v50);
  if ((v52 & 0x80u) == 0)
    v22 = &v50;
  else
    v22 = v50;
  if ((v52 & 0x80u) == 0)
    v23 = v52;
  else
    v23 = v51;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, v22, v23);
  if ((char)v52 < 0 && v50)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v53 + 24))(v53, v50, 0, 8);
  if (v42 < 0 && (_QWORD)v41)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v43 + 24))(v43, v41, 0, 8);
  if (v45 < 0 && (_QWORD)v44)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v46 + 24))(v46, v44, 0, 8);
  if (v48 < 0 && (_QWORD)v47)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v49 + 24))(v49, v47, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v47, "task_precision_");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v44, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v41, ",");
  JSONS::JSONLineReal(&v47, &v44, &v41, 8, (uint64_t)&v50);
  if ((v52 & 0x80u) == 0)
    v24 = &v50;
  else
    v24 = v50;
  if ((v52 & 0x80u) == 0)
    v25 = v52;
  else
    v25 = v51;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, v24, v25);
  if ((char)v52 < 0 && v50)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v53 + 24))(v53, v50, 0, 8);
  if (v42 < 0 && (_QWORD)v41)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v43 + 24))(v43, v41, 0, 8);
  if (v45 < 0 && (_QWORD)v44)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v46 + 24))(v46, v44, 0, 8);
  if (v48 < 0 && (_QWORD)v47)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v49 + 24))(v49, v47, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v47, "balance_figure_mass_");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v44, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v41, ",");
  JSONS::JSONLineReal(&v47, &v44, &v41, 8, (uint64_t)&v50);
  if ((v52 & 0x80u) == 0)
    v26 = &v50;
  else
    v26 = v50;
  if ((v52 & 0x80u) == 0)
    v27 = v52;
  else
    v27 = v51;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, v26, v27);
  if ((char)v52 < 0 && v50)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v53 + 24))(v53, v50, 0, 8);
  if (v42 < 0 && (_QWORD)v41)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v43 + 24))(v43, v41, 0, 8);
  if (v45 < 0 && (_QWORD)v44)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v46 + 24))(v46, v44, 0, 8);
  if (v48 < 0 && (_QWORD)v47)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v49 + 24))(v49, v47, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v47, "limits_gain_");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v44, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v41, ",");
  JSONS::JSONLineReal(&v47, &v44, &v41, 8, (uint64_t)&v50);
  if ((v52 & 0x80u) == 0)
    v28 = &v50;
  else
    v28 = v50;
  if ((v52 & 0x80u) == 0)
    v29 = v52;
  else
    v29 = v51;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, v28, v29);
  if ((char)v52 < 0 && v50)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v53 + 24))(v53, v50, 0, 8);
  if (v42 < 0 && (_QWORD)v41)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v43 + 24))(v43, v41, 0, 8);
  if (v45 < 0 && (_QWORD)v44)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v46 + 24))(v46, v44, 0, 8);
  if (v48 < 0 && (_QWORD)v47)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v49 + 24))(v49, v47, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v47, "balance_moments_weight_");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v44, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v41, ",");
  JSONS::JSONLineReal(&v47, &v44, &v41, 8, (uint64_t)&v50);
  if ((v52 & 0x80u) == 0)
    v30 = &v50;
  else
    v30 = v50;
  if ((v52 & 0x80u) == 0)
    v31 = v52;
  else
    v31 = v51;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, v30, v31);
  if ((char)v52 < 0 && v50)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v53 + 24))(v53, v50, 0, 8);
  if (v42 < 0 && (_QWORD)v41)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v43 + 24))(v43, v41, 0, 8);
  if (v45 < 0 && (_QWORD)v44)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v46 + 24))(v46, v44, 0, 8);
  if (v48 < 0 && (_QWORD)v47)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v49 + 24))(v49, v47, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v47, "p_coeff_");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v44, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v41, ",");
  JSONS::JSONLineReal(&v47, &v44, &v41, 8, (uint64_t)&v50);
  if ((v52 & 0x80u) == 0)
    v32 = &v50;
  else
    v32 = v50;
  if ((v52 & 0x80u) == 0)
    v33 = v52;
  else
    v33 = v51;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, v32, v33);
  if ((char)v52 < 0 && v50)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v53 + 24))(v53, v50, 0, 8);
  if (v42 < 0 && (_QWORD)v41)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v43 + 24))(v43, v41, 0, 8);
  if (v45 < 0 && (_QWORD)v44)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v46 + 24))(v46, v44, 0, 8);
  if (v48 < 0 && (_QWORD)v47)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v49 + 24))(v49, v47, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v47, "solution_tolerance_");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v44, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v41, ",");
  JSONS::JSONLineReal(&v47, &v44, &v41, 8, (uint64_t)&v50);
  if ((v52 & 0x80u) == 0)
    v34 = &v50;
  else
    v34 = v50;
  if ((v52 & 0x80u) == 0)
    v35 = v52;
  else
    v35 = v51;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, v34, v35);
  if ((char)v52 < 0 && v50)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v53 + 24))(v53, v50, 0, 8);
  if (v42 < 0 && (_QWORD)v41)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v43 + 24))(v43, v41, 0, 8);
  if (v45 < 0 && (_QWORD)v44)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v46 + 24))(v46, v44, 0, 8);
  if (v48 < 0 && (_QWORD)v47)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v49 + 24))(v49, v47, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v47, "retargeting_gain_");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v44, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v41, ",");
  JSONS::JSONLineReal(&v47, &v44, &v41, 8, (uint64_t)&v50);
  if ((v52 & 0x80u) == 0)
    v36 = &v50;
  else
    v36 = v50;
  if ((v52 & 0x80u) == 0)
    v37 = v52;
  else
    v37 = v51;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, v36, v37);
  if ((char)v52 < 0 && v50)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v53 + 24))(v53, v50, 0, 8);
  if (v42 < 0 && (_QWORD)v41)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v43 + 24))(v43, v41, 0, 8);
  if (v45 < 0 && (_QWORD)v44)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v46 + 24))(v46, v44, 0, 8);
  if (v48 < 0 && (_QWORD)v47)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v49 + 24))(v49, v47, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v47, "balance_zero_moment_point");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v44, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v41, (const char *)&unk_2108059BE);
  JSONS::JSONLineVect((unint64_t *)&v47, (uint64_t)&v44, &v41, (uint64_t)&v50);
  if ((v52 & 0x80u) == 0)
    v38 = &v50;
  else
    v38 = v50;
  if ((v52 & 0x80u) == 0)
    v39 = v52;
  else
    v39 = v51;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, v38, v39);
  if ((char)v52 < 0 && v50)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v53 + 24))(v53, v50, 0, 8);
  if (v42 < 0 && (_QWORD)v41)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v43 + 24))(v43, v41, 0, 8);
  if (v45 < 0 && (_QWORD)v44)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v46 + 24))(v46, v44, 0, 8);
  if (v48 < 0 && (_QWORD)v47)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v49 + 24))(v49, v47, 0, 8);
  return std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, "}", 1uLL);
}

_QWORD *JSONS::JSONFromAimSetup@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  size_t v5;
  _QWORD *v6;
  size_t v7;
  _QWORD *v8;
  size_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;
  size_t v13;
  __int128 v15;
  char v16;
  uint64_t v17;
  __int128 v18;
  char v19;
  uint64_t v20;
  __int128 v21;
  char v22;
  uint64_t v23;
  _QWORD *v24;
  size_t v25;
  unsigned __int8 v26;
  uint64_t v27;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = FIK::defaultAllocator((FIK *)a1);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, "{", 1uLL);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v21, "name");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v18, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v15, ",");
  JSONS::JSONLineStr(&v21, a1, &v18, &v15, (uint64_t)&v24);
  if ((v26 & 0x80u) == 0)
    v4 = &v24;
  else
    v4 = v24;
  if ((v26 & 0x80u) == 0)
    v5 = v26;
  else
    v5 = v25;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, v4, v5);
  if ((char)v26 < 0 && v24)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v27 + 24))(v27, v24, 0, 8);
  if (v16 < 0 && (_QWORD)v15)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v17 + 24))(v17, v15, 0, 8);
  if (v19 < 0 && (_QWORD)v18)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v20 + 24))(v20, v18, 0, 8);
  if (v22 < 0 && (_QWORD)v21)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v23 + 24))(v23, v21, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v21, "mode");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v18, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v15, ",");
  JSONS::JSONLineAimingMode((uint64_t)&v21, a1 + 120);
  if ((v26 & 0x80u) == 0)
    v6 = &v24;
  else
    v6 = v24;
  if ((v26 & 0x80u) == 0)
    v7 = v26;
  else
    v7 = v25;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, v6, v7);
  if ((char)v26 < 0 && v24)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v27 + 24))(v27, v24, 0, 8);
  if (v16 < 0 && (_QWORD)v15)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v17 + 24))(v17, v15, 0, 8);
  if (v19 < 0 && (_QWORD)v18)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v20 + 24))(v20, v18, 0, 8);
  if (v22 < 0 && (_QWORD)v21)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v23 + 24))(v23, v21, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v21, "controller_task");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v18, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v15, ",");
  JSONS::JSONLineObject<FIK::Item>((void **)&v21, (int *)(a1 + 24), (const void **)&v18, (void **)&v15, 1, (uint64_t)&v24);
  if ((v26 & 0x80u) == 0)
    v8 = &v24;
  else
    v8 = v24;
  if ((v26 & 0x80u) == 0)
    v9 = v26;
  else
    v9 = v25;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, v8, v9);
  if ((char)v26 < 0 && v24)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v27 + 24))(v27, v24, 0, 8);
  if (v16 < 0 && (_QWORD)v15)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v17 + 24))(v17, v15, 0, 8);
  if (v19 < 0 && (_QWORD)v18)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v20 + 24))(v20, v18, 0, 8);
  if (v22 < 0 && (_QWORD)v21)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v23 + 24))(v23, v21, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v21, "trigger_hand_tasks");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v18, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v15, ",");
  JSONS::JSONLineIKArrayT<FIK::Item>((void **)&v21, (unint64_t *)(a1 + 56), (const void **)&v18, (void **)&v15, 1, (uint64_t)&v24);
  if ((v26 & 0x80u) == 0)
    v10 = &v24;
  else
    v10 = v24;
  if ((v26 & 0x80u) == 0)
    v11 = v26;
  else
    v11 = v25;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, v10, v11);
  if ((char)v26 < 0 && v24)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v27 + 24))(v27, v24, 0, 8);
  if (v16 < 0 && (_QWORD)v15)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v17 + 24))(v17, v15, 0, 8);
  if (v19 < 0 && (_QWORD)v18)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v20 + 24))(v20, v18, 0, 8);
  if (v22 < 0 && (_QWORD)v21)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v23 + 24))(v23, v21, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v21, "handle_hand_tasks");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v18, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v15, (const char *)&unk_2108059BE);
  JSONS::JSONLineIKArrayT<FIK::Item>((void **)&v21, (unint64_t *)(a1 + 88), (const void **)&v18, (void **)&v15, 1, (uint64_t)&v24);
  if ((v26 & 0x80u) == 0)
    v12 = &v24;
  else
    v12 = v24;
  if ((v26 & 0x80u) == 0)
    v13 = v26;
  else
    v13 = v25;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, v12, v13);
  if ((char)v26 < 0 && v24)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v27 + 24))(v27, v24, 0, 8);
  if (v16 < 0 && (_QWORD)v15)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v17 + 24))(v17, v15, 0, 8);
  if (v19 < 0 && (_QWORD)v18)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v20 + 24))(v20, v18, 0, 8);
  if (v22 < 0 && (_QWORD)v21)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v23 + 24))(v23, v21, 0, 8);
  return std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::push_back(a2, 125);
}

_QWORD *JSONS::JSONLineObject<FIK::Item>@<X0>(void **a1@<X0>, int *a2@<X1>, const void **a3@<X2>, void **a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  int v11;
  void *v12;
  size_t v13;
  _QWORD *v14;
  __int128 v15;
  _QWORD *v16;
  __int128 v17;
  _QWORD *v18;
  size_t v19;
  _QWORD *v20;
  __int128 v21;
  int v22;
  void *v23;
  size_t v24;
  _QWORD *result;
  __int128 v26;
  _QWORD v27[2];
  unsigned __int8 v28;
  uint64_t v29;
  _QWORD __src[2];
  char v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;

  std::operator+[abi:nn180100]<char,std::char_traits<char>,FIK::FIKAllocator<char>>(a3, 34, (uint64_t)__src);
  v11 = *((char *)a1 + 23);
  if (v11 >= 0)
    v12 = a1;
  else
    v12 = *a1;
  if (v11 >= 0)
    v13 = *((unsigned __int8 *)a1 + 23);
  else
    v13 = (size_t)a1[1];
  v14 = std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(__src, v12, v13);
  v15 = *((_OWORD *)v14 + 1);
  v33 = *(_OWORD *)v14;
  v34 = v15;
  v14[1] = 0;
  v14[2] = 0;
  *v14 = 0;
  v16 = std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(&v33, "\":", 2uLL);
  v17 = *((_OWORD *)v16 + 1);
  v35 = *(_OWORD *)v16;
  v36 = v17;
  v16[1] = 0;
  v16[2] = 0;
  *v16 = 0;
  JSONS::JSONObject<FIK::Item>(a2, v27);
  if ((v28 & 0x80u) == 0)
    v18 = v27;
  else
    v18 = (_QWORD *)v27[0];
  if ((v28 & 0x80u) == 0)
    v19 = v28;
  else
    v19 = v27[1];
  v20 = std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(&v35, v18, v19);
  v21 = *((_OWORD *)v20 + 1);
  v37 = *(_OWORD *)v20;
  v38 = v21;
  v20[1] = 0;
  v20[2] = 0;
  *v20 = 0;
  v22 = *((char *)a4 + 23);
  if (v22 >= 0)
    v23 = a4;
  else
    v23 = *a4;
  if (v22 >= 0)
    v24 = *((unsigned __int8 *)a4 + 23);
  else
    v24 = (size_t)a4[1];
  result = std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(&v37, v23, v24);
  v26 = *((_OWORD *)result + 1);
  *(_OWORD *)a6 = *(_OWORD *)result;
  *(_OWORD *)(a6 + 16) = v26;
  result[1] = 0;
  result[2] = 0;
  *result = 0;
  if (SBYTE7(v38) < 0 && (_QWORD)v37)
    result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**((_QWORD **)&v38 + 1) + 24))(*((_QWORD *)&v38 + 1), v37, 0, 8);
  if ((char)v28 < 0 && v27[0])
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v29 + 24))(v29, v27[0], 0, 8);
  if (SBYTE7(v36) < 0 && (_QWORD)v35)
    result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**((_QWORD **)&v36 + 1) + 24))(*((_QWORD *)&v36 + 1), v35, 0, 8);
  if (SBYTE7(v34) < 0 && (_QWORD)v33)
    result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**((_QWORD **)&v34 + 1) + 24))(*((_QWORD *)&v34 + 1), v33, 0, 8);
  if (v31 < 0 && __src[0])
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v32 + 24))(v32, __src[0], 0, 8);
  if (a5)
    return std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::push_back((_QWORD *)a6, 10);
  return result;
}

_QWORD *JSONS::JSONLineIKArrayT<FIK::Item>@<X0>(void **a1@<X0>, unint64_t *a2@<X1>, const void **a3@<X2>, void **a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  int v11;
  void *v12;
  size_t v13;
  _QWORD *v14;
  __int128 v15;
  _QWORD *v16;
  __int128 v17;
  _QWORD *v18;
  size_t v19;
  _QWORD *v20;
  __int128 v21;
  int v22;
  void *v23;
  size_t v24;
  _QWORD *result;
  __int128 v26;
  _QWORD v27[2];
  unsigned __int8 v28;
  uint64_t v29;
  _QWORD __src[2];
  char v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;

  std::operator+[abi:nn180100]<char,std::char_traits<char>,FIK::FIKAllocator<char>>(a3, 34, (uint64_t)__src);
  v11 = *((char *)a1 + 23);
  if (v11 >= 0)
    v12 = a1;
  else
    v12 = *a1;
  if (v11 >= 0)
    v13 = *((unsigned __int8 *)a1 + 23);
  else
    v13 = (size_t)a1[1];
  v14 = std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(__src, v12, v13);
  v15 = *((_OWORD *)v14 + 1);
  v33 = *(_OWORD *)v14;
  v34 = v15;
  v14[1] = 0;
  v14[2] = 0;
  *v14 = 0;
  v16 = std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(&v33, "\":", 2uLL);
  v17 = *((_OWORD *)v16 + 1);
  v35 = *(_OWORD *)v16;
  v36 = v17;
  v16[1] = 0;
  v16[2] = 0;
  *v16 = 0;
  JSONS::JSONIKArray<FIK::Item>(a2, v27);
  if ((v28 & 0x80u) == 0)
    v18 = v27;
  else
    v18 = (_QWORD *)v27[0];
  if ((v28 & 0x80u) == 0)
    v19 = v28;
  else
    v19 = v27[1];
  v20 = std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(&v35, v18, v19);
  v21 = *((_OWORD *)v20 + 1);
  v37 = *(_OWORD *)v20;
  v38 = v21;
  v20[1] = 0;
  v20[2] = 0;
  *v20 = 0;
  v22 = *((char *)a4 + 23);
  if (v22 >= 0)
    v23 = a4;
  else
    v23 = *a4;
  if (v22 >= 0)
    v24 = *((unsigned __int8 *)a4 + 23);
  else
    v24 = (size_t)a4[1];
  result = std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(&v37, v23, v24);
  v26 = *((_OWORD *)result + 1);
  *(_OWORD *)a6 = *(_OWORD *)result;
  *(_OWORD *)(a6 + 16) = v26;
  result[1] = 0;
  result[2] = 0;
  *result = 0;
  if (SBYTE7(v38) < 0 && (_QWORD)v37)
    result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**((_QWORD **)&v38 + 1) + 24))(*((_QWORD *)&v38 + 1), v37, 0, 8);
  if ((char)v28 < 0 && v27[0])
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v29 + 24))(v29, v27[0], 0, 8);
  if (SBYTE7(v36) < 0 && (_QWORD)v35)
    result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**((_QWORD **)&v36 + 1) + 24))(*((_QWORD *)&v36 + 1), v35, 0, 8);
  if (SBYTE7(v34) < 0 && (_QWORD)v33)
    result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**((_QWORD **)&v34 + 1) + 24))(*((_QWORD *)&v34 + 1), v33, 0, 8);
  if (v31 < 0 && __src[0])
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v32 + 24))(v32, __src[0], 0, 8);
  if (a5)
    return std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::push_back((_QWORD *)a6, 10);
  return result;
}

_QWORD *JSONS::JSONFromAimSetups@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  __int128 v8;
  __int128 *v9;
  size_t v10;
  __int128 *v12;
  size_t v13;
  _QWORD v15[2];
  char v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;

  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)a2, "[");
  v4 = *a1;
  if ((unint64_t)*a1 >= 2)
  {
    v5 = 0;
    v6 = 1;
    do
    {
      JSONS::JSONFromAimSetup(a1[2] + (v5 << 7), v15);
      v7 = std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(v15, ",", 1uLL);
      v8 = *((_OWORD *)v7 + 1);
      v18 = *(_OWORD *)v7;
      v19 = v8;
      v7[1] = 0;
      v7[2] = 0;
      *v7 = 0;
      if ((SBYTE7(v19) & 0x80u) == 0)
        v9 = &v18;
      else
        v9 = (__int128 *)v18;
      if ((SBYTE7(v19) & 0x80u) == 0)
        v10 = BYTE7(v19);
      else
        v10 = *((_QWORD *)&v18 + 1);
      std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, v9, v10);
      if (SBYTE7(v19) < 0 && (_QWORD)v18)
        (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**((_QWORD **)&v19 + 1) + 24))(*((_QWORD *)&v19 + 1), v18, 0, 8);
      if (v16 < 0 && v15[0])
        (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v17 + 24))(v17, v15[0], 0, 8);
      v5 = v6;
    }
    while (v4 - 1 > (unint64_t)v6++);
  }
  if (v4)
  {
    JSONS::JSONFromAimSetup(a1[2] + (v4 << 7) - 128, &v18);
    if ((SBYTE7(v19) & 0x80u) == 0)
      v12 = &v18;
    else
      v12 = (__int128 *)v18;
    if ((SBYTE7(v19) & 0x80u) == 0)
      v13 = BYTE7(v19);
    else
      v13 = *((_QWORD *)&v18 + 1);
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, v12, v13);
    if (SBYTE7(v19) < 0 && (_QWORD)v18)
      (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**((_QWORD **)&v19 + 1) + 24))(*((_QWORD *)&v19 + 1), v18, 0, 8);
  }
  return std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, "]", 1uLL);
}

_QWORD *JSONS::JSONfromFootPlacement@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  size_t v5;
  _QWORD *v6;
  size_t v7;
  _QWORD *v8;
  size_t v9;
  _QWORD *v10;
  size_t v11;
  void *v13[2];
  char v14;
  uint64_t v15;
  const void *v16[2];
  char v17;
  uint64_t v18;
  void *v19[2];
  char v20;
  uint64_t v21;
  _QWORD v22[2];
  char v23;
  uint64_t v24;
  __int128 v25;
  char v26;
  uint64_t v27;
  __int128 v28;
  char v29;
  uint64_t v30;
  __int128 v31;
  char v32;
  uint64_t v33;
  void *v34[2];
  char v35;
  uint64_t v36;
  const void *v37[2];
  char v38;
  uint64_t v39;
  void *v40[2];
  char v41;
  uint64_t v42;
  _QWORD v43[2];
  char v44;
  uint64_t v45;
  _QWORD *v46;
  size_t v47;
  unsigned __int8 v48;
  uint64_t v49;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = FIK::defaultAllocator((FIK *)a1);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)v43, "foot_placement_");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)v40, "{");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)v37, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)v34, (const char *)&unk_2108059BE);
  JSONS::JSONLine((uint64_t)v43, v40, v37, v34, (uint64_t)&v46);
  if ((v48 & 0x80u) == 0)
    v4 = &v46;
  else
    v4 = v46;
  if ((v48 & 0x80u) == 0)
    v5 = v48;
  else
    v5 = v47;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, v4, v5);
  if ((char)v48 < 0 && v46)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v49 + 24))(v49, v46, 0, 8);
  if (v35 < 0 && v34[0])
    (*(void (**)(uint64_t, void *, _QWORD, uint64_t))(*(_QWORD *)v36 + 24))(v36, v34[0], 0, 8);
  if (v38 < 0 && v37[0])
    (*(void (**)(uint64_t, const void *, _QWORD, uint64_t))(*(_QWORD *)v39 + 24))(v39, v37[0], 0, 8);
  if (v41 < 0 && v40[0])
    (*(void (**)(uint64_t, void *, _QWORD, uint64_t))(*(_QWORD *)v42 + 24))(v42, v40[0], 0, 8);
  if (v44 < 0 && v43[0])
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v45 + 24))(v45, v43[0], 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v31, "raytracing_task_names");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v28, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v25, ",");
  JSONS::JSONLineIKArrayString(&v31, (uint64_t *)a1, &v28, &v25, (uint64_t)&v46);
  if ((v48 & 0x80u) == 0)
    v6 = &v46;
  else
    v6 = v46;
  if ((v48 & 0x80u) == 0)
    v7 = v48;
  else
    v7 = v47;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, v6, v7);
  if ((char)v48 < 0 && v46)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v49 + 24))(v49, v46, 0, 8);
  if (v26 < 0 && (_QWORD)v25)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v27 + 24))(v27, v25, 0, 8);
  if (v29 < 0 && (_QWORD)v28)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v30 + 24))(v30, v28, 0, 8);
  if (v32 < 0 && (_QWORD)v31)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v33 + 24))(v33, v31, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v31, "raytracing_tasks");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v28, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v25, ",");
  JSONS::JSONLineIKArray((unint64_t *)&v31, (unint64_t *)(a1 + 32), &v28, &v25, (uint64_t)&v46);
  if ((v48 & 0x80u) == 0)
    v8 = &v46;
  else
    v8 = v46;
  if ((v48 & 0x80u) == 0)
    v9 = v48;
  else
    v9 = v47;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, v8, v9);
  if ((char)v48 < 0 && v46)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v49 + 24))(v49, v46, 0, 8);
  if (v26 < 0 && (_QWORD)v25)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v27 + 24))(v27, v25, 0, 8);
  if (v29 < 0 && (_QWORD)v28)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v30 + 24))(v30, v28, 0, 8);
  if (v32 < 0 && (_QWORD)v31)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v33 + 24))(v33, v31, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)v22, "aiming_setups");
  JSONS::JSONFromAimSetups((uint64_t *)(a1 + 64), v19);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)v16, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)v13, (const char *)&unk_2108059BE);
  JSONS::JSONLine((uint64_t)v22, v19, v16, v13, (uint64_t)&v46);
  if ((v48 & 0x80u) == 0)
    v10 = &v46;
  else
    v10 = v46;
  if ((v48 & 0x80u) == 0)
    v11 = v48;
  else
    v11 = v47;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, v10, v11);
  if ((char)v48 < 0 && v46)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v49 + 24))(v49, v46, 0, 8);
  if (v14 < 0 && v13[0])
    (*(void (**)(uint64_t, void *, _QWORD, uint64_t))(*(_QWORD *)v15 + 24))(v15, v13[0], 0, 8);
  if (v17 < 0 && v16[0])
    (*(void (**)(uint64_t, const void *, _QWORD, uint64_t))(*(_QWORD *)v18 + 24))(v18, v16[0], 0, 8);
  if (v20 < 0 && v19[0])
    (*(void (**)(uint64_t, void *, _QWORD, uint64_t))(*(_QWORD *)v21 + 24))(v21, v19[0], 0, 8);
  if (v23 < 0 && v22[0])
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v24 + 24))(v24, v22[0], 0, 8);
  return std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, "}", 1uLL);
}

_QWORD *JSONS::JSONfromIKRig@<X0>(uint64_t a1@<X0>, void **a2@<X1>, _QWORD *a3@<X8>)
{
  __int128 *v6;
  size_t v7;
  FIK *v8;
  char *v9;
  IKString *v10;
  __int128 *v11;
  size_t v12;
  __int128 *v13;
  size_t v14;
  __int128 *v15;
  size_t v16;
  __int128 *v17;
  size_t v18;
  __int128 *v19;
  size_t v20;
  int v21;
  __int128 *v22;
  size_t v23;
  int v24;
  __int128 *v25;
  size_t v26;
  __int128 *v27;
  size_t v28;
  __int128 *v29;
  size_t v30;
  int v31;
  void *v32;
  size_t v33;
  _QWORD *result;
  void *v35[2];
  char v36;
  uint64_t v37;
  const void *v38[2];
  char v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[2];
  char v45;
  uint64_t v46;
  void *v47[2];
  char v48;
  uint64_t v49;
  const void *v50[2];
  char v51;
  uint64_t v52;
  __int128 __dst;
  uint64_t v54;
  uint64_t v55;
  _QWORD v56[2];
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (***v61)(FIK::CrtAllocator *__hidden);
  __int128 v62;
  char v63;
  uint64_t v64;
  __int128 v65;
  unsigned __int8 v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  a3[3] = FIK::defaultAllocator((FIK *)a1);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a3, "{", 1uLL);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v68, "rig_type_");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v65, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v62, ",");
  JSONS::JSONLineRigType((FIK *)&v68, (int *)(a1 + 48), &v65, &v62, (uint64_t)&v71);
  if (v72 >= 0)
    v6 = &v71;
  else
    v6 = (__int128 *)v71;
  if (v72 >= 0)
    v7 = HIBYTE(v72);
  else
    v7 = *((_QWORD *)&v71 + 1);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a3, v6, v7);
  if (SHIBYTE(v72) < 0 && (_QWORD)v71)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v73 + 24))(v73, v71, 0, 8);
  if (v63 < 0 && (_QWORD)v62)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v64 + 24))(v64, v62, 0, 8);
  if ((char)v66 < 0 && (_QWORD)v65)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v67 + 24))(v67, v65, 0, 8);
  if (SHIBYTE(v69) < 0 && (_QWORD)v68)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v70 + 24))(v70, v68, 0, 8);
  v8 = (FIK *)std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v68, "uid");
  if (*(_QWORD *)(a1 + 8))
    v9 = *(char **)a1;
  else
    v9 = (char *)&unk_2108059BE;
  v59 = 0;
  v60 = 0;
  v61 = FIK::defaultAllocator(v8);
  v10 = (IKString *)strlen(v9);
  IKString::assign(&v59, v9, v10);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v65, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v62, ",");
  JSONS::JSONLineStr(&v68, (uint64_t)&v59, &v65, &v62, (uint64_t)&v71);
  if (v72 >= 0)
    v11 = &v71;
  else
    v11 = (__int128 *)v71;
  if (v72 >= 0)
    v12 = HIBYTE(v72);
  else
    v12 = *((_QWORD *)&v71 + 1);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a3, v11, v12);
  if (SHIBYTE(v72) < 0 && (_QWORD)v71)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v73 + 24))(v73, v71, 0, 8);
  if (v63 < 0 && (_QWORD)v62)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v64 + 24))(v64, v62, 0, 8);
  if ((char)v66 < 0 && (_QWORD)v65)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v67 + 24))(v67, v65, 0, 8);
  if (v60)
    ((void (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v61)[3])(v61, v59, 0, 8);
  if (SHIBYTE(v69) < 0 && (_QWORD)v68)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v70 + 24))(v70, v68, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v68, "unit_scale");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v65, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v62, ",");
  JSONS::JSONLineReal(&v68, &v65, &v62, 8, (uint64_t)&v71);
  if (v72 >= 0)
    v13 = &v71;
  else
    v13 = (__int128 *)v71;
  if (v72 >= 0)
    v14 = HIBYTE(v72);
  else
    v14 = *((_QWORD *)&v71 + 1);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a3, v13, v14);
  if (SHIBYTE(v72) < 0 && (_QWORD)v71)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v73 + 24))(v73, v71, 0, 8);
  if (v63 < 0 && (_QWORD)v62)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v64 + 24))(v64, v62, 0, 8);
  if ((char)v66 < 0 && (_QWORD)v65)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v67 + 24))(v67, v65, 0, 8);
  if (SHIBYTE(v69) < 0 && (_QWORD)v68)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v70 + 24))(v70, v68, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v68, "up_axis");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v65, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v62, ",");
  JSONS::JSONLineAxis((uint64_t)&v68, a1 + 28);
  if (v72 >= 0)
    v15 = &v71;
  else
    v15 = (__int128 *)v71;
  if (v72 >= 0)
    v16 = HIBYTE(v72);
  else
    v16 = *((_QWORD *)&v71 + 1);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a3, v15, v16);
  if (SHIBYTE(v72) < 0 && (_QWORD)v71)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v73 + 24))(v73, v71, 0, 8);
  if (v63 < 0 && (_QWORD)v62)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v64 + 24))(v64, v62, 0, 8);
  if ((char)v66 < 0 && (_QWORD)v65)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v67 + 24))(v67, v65, 0, 8);
  if (SHIBYTE(v69) < 0 && (_QWORD)v68)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v70 + 24))(v70, v68, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v68, "forward_axis");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v65, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v62, ",");
  JSONS::JSONLineAxis((uint64_t)&v68, a1 + 32);
  if (v72 >= 0)
    v17 = &v71;
  else
    v17 = (__int128 *)v71;
  if (v72 >= 0)
    v18 = HIBYTE(v72);
  else
    v18 = *((_QWORD *)&v71 + 1);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a3, v17, v18);
  if (SHIBYTE(v72) < 0 && (_QWORD)v71)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v73 + 24))(v73, v71, 0, 8);
  if (v63 < 0 && (_QWORD)v62)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v64 + 24))(v64, v62, 0, 8);
  if ((char)v66 < 0 && (_QWORD)v65)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v67 + 24))(v67, v65, 0, 8);
  if (SHIBYTE(v69) < 0 && (_QWORD)v68)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v70 + 24))(v70, v68, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v68, "right_axis");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v65, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v62, ",");
  JSONS::JSONLineAxis((uint64_t)&v68, a1 + 36);
  if (v72 >= 0)
    v19 = &v71;
  else
    v19 = (__int128 *)v71;
  if (v72 >= 0)
    v20 = HIBYTE(v72);
  else
    v20 = *((_QWORD *)&v71 + 1);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a3, v19, v20);
  if (SHIBYTE(v72) < 0 && (_QWORD)v71)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v73 + 24))(v73, v71, 0, 8);
  if (v63 < 0 && (_QWORD)v62)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v64 + 24))(v64, v62, 0, 8);
  if ((char)v66 < 0 && (_QWORD)v65)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v67 + 24))(v67, v65, 0, 8);
  if (SHIBYTE(v69) < 0 && (_QWORD)v68)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v70 + 24))(v70, v68, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v68, "left_handed");
  v21 = *(_DWORD *)(a1 + 40);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v65, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v62, ",");
  JSONS::JSONLineInt(&v68, v21, &v65, &v62, (uint64_t)&v71);
  if (v72 >= 0)
    v22 = &v71;
  else
    v22 = (__int128 *)v71;
  if (v72 >= 0)
    v23 = HIBYTE(v72);
  else
    v23 = *((_QWORD *)&v71 + 1);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a3, v22, v23);
  if (SHIBYTE(v72) < 0 && (_QWORD)v71)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v73 + 24))(v73, v71, 0, 8);
  if (v63 < 0 && (_QWORD)v62)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v64 + 24))(v64, v62, 0, 8);
  if ((char)v66 < 0 && (_QWORD)v65)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v67 + 24))(v67, v65, 0, 8);
  if (SHIBYTE(v69) < 0 && (_QWORD)v68)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v70 + 24))(v70, v68, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v68, "continuous_solving_");
  v24 = *(unsigned __int8 *)(a1 + 44);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v65, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v62, ",");
  JSONS::JSONLineBool(&v68, v24, &v65, &v62, (uint64_t)&v71);
  if (v72 >= 0)
    v25 = &v71;
  else
    v25 = (__int128 *)v71;
  if (v72 >= 0)
    v26 = HIBYTE(v72);
  else
    v26 = *((_QWORD *)&v71 + 1);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a3, v25, v26);
  if (SHIBYTE(v72) < 0 && (_QWORD)v71)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v73 + 24))(v73, v71, 0, 8);
  if (v63 < 0 && (_QWORD)v62)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v64 + 24))(v64, v62, 0, 8);
  if ((char)v66 < 0 && (_QWORD)v65)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v67 + 24))(v67, v65, 0, 8);
  if (SHIBYTE(v69) < 0 && (_QWORD)v68)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v70 + 24))(v70, v68, 0, 8);
  JSONS::JSONfromRigBalanceTask((unsigned __int8 *)(a1 + 128), &v71);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)v56, "balance_task_");
  v55 = v73;
  if (SHIBYTE(v72) < 0)
  {
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::__init_copy_ctor_external((_QWORD **)&__dst, (void *)v71, *((unint64_t *)&v71 + 1));
  }
  else
  {
    __dst = v71;
    v54 = v72;
  }
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)v50, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)v47, ",");
  JSONS::JSONLine((uint64_t)v56, (void **)&__dst, v50, v47, (uint64_t)&v68);
  if (v69 >= 0)
    v27 = &v68;
  else
    v27 = (__int128 *)v68;
  if (v69 >= 0)
    v28 = HIBYTE(v69);
  else
    v28 = *((_QWORD *)&v68 + 1);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a3, v27, v28);
  if (SHIBYTE(v69) < 0 && (_QWORD)v68)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v70 + 24))(v70, v68, 0, 8);
  if (v48 < 0 && v47[0])
    (*(void (**)(uint64_t, void *, _QWORD, uint64_t))(*(_QWORD *)v49 + 24))(v49, v47[0], 0, 8);
  if (v51 < 0 && v50[0])
    (*(void (**)(uint64_t, const void *, _QWORD, uint64_t))(*(_QWORD *)v52 + 24))(v52, v50[0], 0, 8);
  if (SHIBYTE(v54) < 0 && (_QWORD)__dst)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v55 + 24))(v55, __dst, 0, 8);
  if (v57 < 0 && v56[0])
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v58 + 24))(v58, v56[0], 0, 8);
  JSONS::JSONfromSolverSettings(a1 + 64, &v68);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)v44, "solver_conf_");
  v43 = v70;
  if (SHIBYTE(v69) < 0)
  {
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::__init_copy_ctor_external((_QWORD **)&v41, (void *)v68, *((unint64_t *)&v68 + 1));
  }
  else
  {
    v41 = v68;
    v42 = v69;
  }
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)v38, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)v35, (const char *)&unk_2108059BE);
  JSONS::JSONLine((uint64_t)v44, (void **)&v41, v38, v35, (uint64_t)&v65);
  if ((v66 & 0x80u) == 0)
    v29 = &v65;
  else
    v29 = (__int128 *)v65;
  if ((v66 & 0x80u) == 0)
    v30 = v66;
  else
    v30 = *((_QWORD *)&v65 + 1);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a3, v29, v30);
  if ((char)v66 < 0 && (_QWORD)v65)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v67 + 24))(v67, v65, 0, 8);
  if (v36 < 0 && v35[0])
    (*(void (**)(uint64_t, void *, _QWORD, uint64_t))(*(_QWORD *)v37 + 24))(v37, v35[0], 0, 8);
  if (v39 < 0 && v38[0])
    (*(void (**)(uint64_t, const void *, _QWORD, uint64_t))(*(_QWORD *)v40 + 24))(v40, v38[0], 0, 8);
  if (SHIBYTE(v42) < 0 && (_QWORD)v41)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v43 + 24))(v43, v41, 0, 8);
  if (v45 < 0 && v44[0])
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v46 + 24))(v46, v44[0], 0, 8);
  if (*((char *)a2 + 23) < 0)
  {
    if (!a2[1])
      goto LABEL_207;
  }
  else if (!*((_BYTE *)a2 + 23))
  {
    goto LABEL_207;
  }
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a3, ",", 1uLL);
  v31 = *((char *)a2 + 23);
  if (v31 >= 0)
    v32 = a2;
  else
    v32 = *a2;
  if (v31 >= 0)
    v33 = *((unsigned __int8 *)a2 + 23);
  else
    v33 = (size_t)a2[1];
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a3, v32, v33);
LABEL_207:
  result = std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a3, "}", 1uLL);
  if (SHIBYTE(v69) < 0 && (_QWORD)v68)
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v70 + 24))(v70, v68, 0, 8);
  if (SHIBYTE(v72) < 0)
  {
    if ((_QWORD)v71)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v73 + 24))(v73, v71, 0, 8);
  }
  return result;
}

_QWORD *JSONS::JSONfromMoCapRig@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  size_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  size_t v9;
  unint64_t v10;
  _QWORD *v11;
  size_t v12;
  unint64_t v13;
  unsigned int v14;
  FIK *v15;
  _QWORD *v16;
  size_t v17;
  unint64_t v18;
  BOOL v19;
  _QWORD *v20;
  size_t v21;
  unint64_t v22;
  unsigned int v23;
  _QWORD *v24;
  size_t v25;
  unint64_t v26;
  _QWORD *v27;
  size_t v28;
  int v29;
  _QWORD *v30;
  size_t v31;
  _QWORD *v32;
  size_t v33;
  _QWORD *result;
  __int128 v35;
  uint64_t v36;
  void (***v37)(FIK::CrtAllocator *__hidden);
  __int128 v38;
  char v39;
  uint64_t v40;
  __int128 v41;
  char v42;
  uint64_t v43;
  void *v44[2];
  char v45;
  uint64_t v46;
  const void *v47[2];
  char v48;
  uint64_t v49;
  void *v50[2];
  char v51;
  uint64_t v52;
  _QWORD v53[2];
  char v54;
  uint64_t v55;
  __int128 v56;
  char v57;
  uint64_t v58;
  void *v59[2];
  char v60;
  uint64_t v61;
  const void *v62[2];
  char v63;
  uint64_t v64;
  void *v65[2];
  char v66;
  uint64_t v67;
  _QWORD v68[2];
  char v69;
  uint64_t v70;
  void *v71[2];
  char v72;
  uint64_t v73;
  const void *v74[2];
  char v75;
  uint64_t v76;
  void *v77[2];
  char v78;
  uint64_t v79;
  _QWORD v80[2];
  char v81;
  uint64_t v82;
  _QWORD *v83;
  size_t v84;
  unsigned __int8 v85;
  uint64_t v86;
  __int128 __src;
  uint64_t v88;
  void (***v89)(FIK::CrtAllocator *__hidden);

  __src = 0uLL;
  v88 = 0;
  v89 = FIK::defaultAllocator((FIK *)a1);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)v80, "bones_");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)v77, "[");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)v74, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)v71, (const char *)&unk_2108059BE);
  JSONS::JSONLine((uint64_t)v80, v77, v74, v71, (uint64_t)&v83);
  if ((v85 & 0x80u) == 0)
    v4 = &v83;
  else
    v4 = v83;
  if ((v85 & 0x80u) == 0)
    v5 = v85;
  else
    v5 = v84;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(&__src, v4, v5);
  if ((char)v85 < 0 && v83)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v86 + 24))(v86, v83, 0, 8);
  if (v72 < 0 && v71[0])
    (*(void (**)(uint64_t, void *, _QWORD, uint64_t))(*(_QWORD *)v73 + 24))(v73, v71[0], 0, 8);
  if (v75 < 0 && v74[0])
    (*(void (**)(uint64_t, const void *, _QWORD, uint64_t))(*(_QWORD *)v76 + 24))(v76, v74[0], 0, 8);
  if (v78 < 0 && v77[0])
    (*(void (**)(uint64_t, void *, _QWORD, uint64_t))(*(_QWORD *)v79 + 24))(v79, v77[0], 0, 8);
  if (v81 < 0 && v80[0])
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v82 + 24))(v82, v80[0], 0, 8);
  if (*(_QWORD *)(a1 + 208))
  {
    v6 = 0;
    v7 = 0;
    do
    {
      JSONS::JSONfromMoCapBone((JSONS *)(*(_QWORD *)(a1 + 224) + v6), &v83);
      if ((v85 & 0x80u) == 0)
        v8 = &v83;
      else
        v8 = v83;
      if ((v85 & 0x80u) == 0)
        v9 = v85;
      else
        v9 = v84;
      std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(&__src, v8, v9);
      if ((char)v85 < 0 && v83)
        (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v86 + 24))(v86, v83, 0, 8);
      v10 = *(_QWORD *)(a1 + 208);
      if (v7 < v10 - 1)
      {
        std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(&__src, ",", 1uLL);
        v10 = *(_QWORD *)(a1 + 208);
      }
      ++v7;
      v6 += 544;
    }
    while (v7 < v10);
  }
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(&__src, "],", 2uLL);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)v68, "sources");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)v65, "[");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)v62, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)v59, (const char *)&unk_2108059BE);
  JSONS::JSONLine((uint64_t)v68, v65, v62, v59, (uint64_t)&v83);
  if ((v85 & 0x80u) == 0)
    v11 = &v83;
  else
    v11 = v83;
  if ((v85 & 0x80u) == 0)
    v12 = v85;
  else
    v12 = v84;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(&__src, v11, v12);
  if ((char)v85 < 0 && v83)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v86 + 24))(v86, v83, 0, 8);
  if (v60 < 0 && v59[0])
    (*(void (**)(uint64_t, void *, _QWORD, uint64_t))(*(_QWORD *)v61 + 24))(v61, v59[0], 0, 8);
  if (v63 < 0 && v62[0])
    (*(void (**)(uint64_t, const void *, _QWORD, uint64_t))(*(_QWORD *)v64 + 24))(v64, v62[0], 0, 8);
  if (v66 < 0 && v65[0])
    (*(void (**)(uint64_t, void *, _QWORD, uint64_t))(*(_QWORD *)v67 + 24))(v67, v65[0], 0, 8);
  if (v69 < 0 && v68[0])
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v70 + 24))(v70, v68[0], 0, 8);
  if (*(_QWORD *)(a1 + 240))
  {
    v13 = 0;
    v14 = 1;
    do
    {
      v15 = (FIK *)(*(_QWORD *)(a1 + 256) + 96 * v13);
      std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v56, (const char *)&unk_2108059BE);
      JSONS::JSONfromRigBoneBase(v15, (void **)&v56, &v83);
      if ((v85 & 0x80u) == 0)
        v16 = &v83;
      else
        v16 = v83;
      if ((v85 & 0x80u) == 0)
        v17 = v85;
      else
        v17 = v84;
      std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(&__src, v16, v17);
      if ((char)v85 < 0 && v83)
        (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v86 + 24))(v86, v83, 0, 8);
      if (v57 < 0 && (_QWORD)v56)
        (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v58 + 24))(v58, v56, 0, 8);
      v18 = *(_QWORD *)(a1 + 240);
      if (v18 - 1 > v13)
      {
        std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(&__src, ",", 1uLL);
        v18 = *(_QWORD *)(a1 + 240);
      }
      v13 = v14;
      v19 = v18 > v14++;
    }
    while (v19);
  }
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(&__src, "],", 2uLL);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)v53, "tasks_");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)v50, "[");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)v47, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)v44, (const char *)&unk_2108059BE);
  JSONS::JSONLine((uint64_t)v53, v50, v47, v44, (uint64_t)&v83);
  if ((v85 & 0x80u) == 0)
    v20 = &v83;
  else
    v20 = v83;
  if ((v85 & 0x80u) == 0)
    v21 = v85;
  else
    v21 = v84;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(&__src, v20, v21);
  if ((char)v85 < 0 && v83)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v86 + 24))(v86, v83, 0, 8);
  if (v45 < 0 && v44[0])
    (*(void (**)(uint64_t, void *, _QWORD, uint64_t))(*(_QWORD *)v46 + 24))(v46, v44[0], 0, 8);
  if (v48 < 0 && v47[0])
    (*(void (**)(uint64_t, const void *, _QWORD, uint64_t))(*(_QWORD *)v49 + 24))(v49, v47[0], 0, 8);
  if (v51 < 0 && v50[0])
    (*(void (**)(uint64_t, void *, _QWORD, uint64_t))(*(_QWORD *)v52 + 24))(v52, v50[0], 0, 8);
  if (v54 < 0 && v53[0])
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v55 + 24))(v55, v53[0], 0, 8);
  if (*(_QWORD *)(a1 + 176))
  {
    v22 = 0;
    v23 = 1;
    do
    {
      JSONS::JSONfromMoCapTask(*(_QWORD *)(a1 + 192) + (v22 << 8), &v83);
      if ((v85 & 0x80u) == 0)
        v24 = &v83;
      else
        v24 = v83;
      if ((v85 & 0x80u) == 0)
        v25 = v85;
      else
        v25 = v84;
      std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(&__src, v24, v25);
      if ((char)v85 < 0 && v83)
        (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v86 + 24))(v86, v83, 0, 8);
      v26 = *(_QWORD *)(a1 + 176);
      if (v26 - 1 > v22)
      {
        std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(&__src, ",", 1uLL);
        v26 = *(_QWORD *)(a1 + 176);
      }
      v22 = v23;
      v19 = v26 > v23++;
    }
    while (v19);
  }
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(&__src, "],", 2uLL);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v56, "source_transform");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v41, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v38, ",");
  JSONS::JSONLineTransform((unint64_t *)&v56, (uint64_t)&v41, &v38, (uint64_t)&v83);
  if ((v85 & 0x80u) == 0)
    v27 = &v83;
  else
    v27 = v83;
  if ((v85 & 0x80u) == 0)
    v28 = v85;
  else
    v28 = v84;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(&__src, v27, v28);
  if ((char)v85 < 0 && v83)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v86 + 24))(v86, v83, 0, 8);
  if (v39 < 0 && (_QWORD)v38)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v40 + 24))(v40, v38, 0, 8);
  if (v42 < 0 && (_QWORD)v41)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v43 + 24))(v43, v41, 0, 8);
  if (v57 < 0 && (_QWORD)v56)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v58 + 24))(v58, v56, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v56, "rigid_body_solve");
  v29 = *(unsigned __int8 *)(a1 + 304);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v41, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v38, ",");
  JSONS::JSONLineBool(&v56, v29, &v41, &v38, (uint64_t)&v83);
  if ((v85 & 0x80u) == 0)
    v30 = &v83;
  else
    v30 = v83;
  if ((v85 & 0x80u) == 0)
    v31 = v85;
  else
    v31 = v84;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(&__src, v30, v31);
  if ((char)v85 < 0 && v83)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v86 + 24))(v86, v83, 0, 8);
  if (v39 < 0 && (_QWORD)v38)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v40 + 24))(v40, v38, 0, 8);
  if (v42 < 0 && (_QWORD)v41)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v43 + 24))(v43, v41, 0, 8);
  if (v57 < 0 && (_QWORD)v56)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v58 + 24))(v58, v56, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v56, "source_scale");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v41, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)&v38, (const char *)&unk_2108059BE);
  JSONS::JSONLineReal(&v56, &v41, &v38, 8, (uint64_t)&v83);
  if ((v85 & 0x80u) == 0)
    v32 = &v83;
  else
    v32 = v83;
  if ((v85 & 0x80u) == 0)
    v33 = v85;
  else
    v33 = v84;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(&__src, v32, v33);
  if ((char)v85 < 0 && v83)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v86 + 24))(v86, v83, 0, 8);
  if (v39 < 0 && (_QWORD)v38)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v40 + 24))(v40, v38, 0, 8);
  if (v42 < 0 && (_QWORD)v41)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v43 + 24))(v43, v41, 0, 8);
  if (v57 < 0 && (_QWORD)v56)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v58 + 24))(v58, v56, 0, 8);
  v37 = v89;
  if (SHIBYTE(v88) < 0)
  {
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::__init_copy_ctor_external((_QWORD **)&v35, (void *)__src, *((unint64_t *)&__src + 1));
  }
  else
  {
    v35 = __src;
    v36 = v88;
  }
  result = JSONS::JSONfromIKRig(a1, (void **)&v35, a2);
  if (SHIBYTE(v36) < 0 && (_QWORD)v35)
    result = (_QWORD *)((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), _QWORD, _QWORD, uint64_t))(*v37)[3])(v37, v35, 0, 8);
  if (SHIBYTE(v88) < 0)
  {
    if ((_QWORD)__src)
      return (_QWORD *)((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), _QWORD, _QWORD, uint64_t))(*v89)[3])(v89, __src, 0, 8);
  }
  return result;
}

_QWORD *JSONS::JSONfromGameRig@<X0>(FIK *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  size_t v5;
  _QWORD *v6;
  size_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned __int8 *v10;
  _QWORD *v11;
  size_t v12;
  unint64_t v13;
  BOOL v14;
  _QWORD *v15;
  size_t v16;
  unint64_t v17;
  unsigned int v18;
  _QWORD *v19;
  size_t v20;
  unint64_t v21;
  _QWORD *result;
  __int128 v23;
  uint64_t v24;
  void (***v25)(FIK::CrtAllocator *__hidden);
  void *v26[2];
  char v27;
  uint64_t v28;
  const void *v29[2];
  char v30;
  uint64_t v31;
  void *v32[2];
  char v33;
  uint64_t v34;
  _QWORD v35[2];
  char v36;
  uint64_t v37;
  void *v38[2];
  char v39;
  uint64_t v40;
  void *v41[2];
  char v42;
  uint64_t v43;
  const void *v44[2];
  char v45;
  uint64_t v46;
  void *v47[2];
  char v48;
  uint64_t v49;
  _QWORD v50[2];
  char v51;
  uint64_t v52;
  _QWORD *v53;
  size_t v54;
  unsigned __int8 v55;
  uint64_t v56;
  __int128 __src;
  uint64_t v58;
  void (***v59)(FIK::CrtAllocator *__hidden);

  __src = 0uLL;
  v58 = 0;
  v59 = FIK::defaultAllocator(a1);
  JSONS::JSONfromFootPlacement((uint64_t)a1 + 240, &v53);
  if ((v55 & 0x80u) == 0)
    v4 = &v53;
  else
    v4 = v53;
  if ((v55 & 0x80u) == 0)
    v5 = v55;
  else
    v5 = v54;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(&__src, v4, v5);
  if ((char)v55 < 0 && v53)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v56 + 24))(v56, v53, 0, 8);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(&__src, ",", 1uLL);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)v50, "bones_");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)v47, "[");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)v44, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)v41, (const char *)&unk_2108059BE);
  JSONS::JSONLine((uint64_t)v50, v47, v44, v41, (uint64_t)&v53);
  if ((v55 & 0x80u) == 0)
    v6 = &v53;
  else
    v6 = v53;
  if ((v55 & 0x80u) == 0)
    v7 = v55;
  else
    v7 = v54;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(&__src, v6, v7);
  if ((char)v55 < 0 && v53)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v56 + 24))(v56, v53, 0, 8);
  if (v42 < 0 && v41[0])
    (*(void (**)(uint64_t, void *, _QWORD, uint64_t))(*(_QWORD *)v43 + 24))(v43, v41[0], 0, 8);
  if (v45 < 0 && v44[0])
    (*(void (**)(uint64_t, const void *, _QWORD, uint64_t))(*(_QWORD *)v46 + 24))(v46, v44[0], 0, 8);
  if (v48 < 0 && v47[0])
    (*(void (**)(uint64_t, void *, _QWORD, uint64_t))(*(_QWORD *)v49 + 24))(v49, v47[0], 0, 8);
  if (v51 < 0 && v50[0])
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v52 + 24))(v52, v50[0], 0, 8);
  if (*((_QWORD *)a1 + 26))
  {
    v8 = 0;
    v9 = 1;
    do
    {
      v10 = (unsigned __int8 *)(*((_QWORD *)a1 + 28) + (v8 << 8));
      std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)v38, (const char *)&unk_2108059BE);
      JSONS::JSONfromRigBone(v10, v38, &v53);
      if ((v55 & 0x80u) == 0)
        v11 = &v53;
      else
        v11 = v53;
      if ((v55 & 0x80u) == 0)
        v12 = v55;
      else
        v12 = v54;
      std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(&__src, v11, v12);
      if ((char)v55 < 0 && v53)
        (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v56 + 24))(v56, v53, 0, 8);
      if (v39 < 0 && v38[0])
        (*(void (**)(uint64_t, void *, _QWORD, uint64_t))(*(_QWORD *)v40 + 24))(v40, v38[0], 0, 8);
      v13 = *((_QWORD *)a1 + 26);
      if (v13 - 1 > v8)
      {
        std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(&__src, ",", 1uLL);
        v13 = *((_QWORD *)a1 + 26);
      }
      v8 = v9;
      v14 = v13 > v9++;
    }
    while (v14);
  }
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(&__src, "],", 2uLL);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)v35, "tasks_");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)v32, "[");
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)v29, (const char *)&unk_2108059BE);
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)v26, (const char *)&unk_2108059BE);
  JSONS::JSONLine((uint64_t)v35, v32, v29, v26, (uint64_t)&v53);
  if ((v55 & 0x80u) == 0)
    v15 = &v53;
  else
    v15 = v53;
  if ((v55 & 0x80u) == 0)
    v16 = v55;
  else
    v16 = v54;
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(&__src, v15, v16);
  if ((char)v55 < 0 && v53)
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v56 + 24))(v56, v53, 0, 8);
  if (v27 < 0 && v26[0])
    (*(void (**)(uint64_t, void *, _QWORD, uint64_t))(*(_QWORD *)v28 + 24))(v28, v26[0], 0, 8);
  if (v30 < 0 && v29[0])
    (*(void (**)(uint64_t, const void *, _QWORD, uint64_t))(*(_QWORD *)v31 + 24))(v31, v29[0], 0, 8);
  if (v33 < 0 && v32[0])
    (*(void (**)(uint64_t, void *, _QWORD, uint64_t))(*(_QWORD *)v34 + 24))(v34, v32[0], 0, 8);
  if (v36 < 0 && v35[0])
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v37 + 24))(v37, v35[0], 0, 8);
  if (*((_QWORD *)a1 + 22))
  {
    v17 = 0;
    v18 = 1;
    do
    {
      JSONS::JSONfromGameTask(*((_QWORD *)a1 + 24) + 240 * v17, &v53);
      if ((v55 & 0x80u) == 0)
        v19 = &v53;
      else
        v19 = v53;
      if ((v55 & 0x80u) == 0)
        v20 = v55;
      else
        v20 = v54;
      std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(&__src, v19, v20);
      if ((char)v55 < 0 && v53)
        (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v56 + 24))(v56, v53, 0, 8);
      v21 = *((_QWORD *)a1 + 22);
      if (v21 - 1 > v17)
      {
        std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(&__src, ",", 1uLL);
        v21 = *((_QWORD *)a1 + 22);
      }
      v17 = v18;
      v14 = v21 > v18++;
    }
    while (v14);
  }
  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(&__src, "]", 1uLL);
  v25 = v59;
  if (SHIBYTE(v58) < 0)
  {
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::__init_copy_ctor_external((_QWORD **)&v23, (void *)__src, *((unint64_t *)&__src + 1));
  }
  else
  {
    v23 = __src;
    v24 = v58;
  }
  result = JSONS::JSONfromIKRig((uint64_t)a1, (void **)&v23, a2);
  if (SHIBYTE(v24) < 0 && (_QWORD)v23)
    result = (_QWORD *)((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), _QWORD, _QWORD, uint64_t))(*v25)[3])(v25, v23, 0, 8);
  if (SHIBYTE(v58) < 0)
  {
    if ((_QWORD)__src)
      return (_QWORD *)((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), _QWORD, _QWORD, uint64_t))(*v59)[3])(v59, __src, 0, 8);
  }
  return result;
}

void JSONS::ObjectFromJSON<IKString>(FIK *a1@<X0>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  char *v4;
  void (***v5)(FIK::CrtAllocator *__hidden);
  IKString *v6;

  if ((*(_WORD *)(a2 + 22) & 0x1000) != 0)
    v4 = (char *)a2;
  else
    v4 = *(char **)(a2 + 8);
  v5 = FIK::defaultAllocator(a1);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = v5;
  v6 = (IKString *)strlen(v4);
  IKString::assign(a3, v4, v6);
}

void JSONS::ObjectFromJSON<FIK::Item>(uint64_t a1@<X1>, unsigned int *a2@<X2>, uint64_t a3@<X8>)
{
  _QWORD *v5;
  int *Member;
  int v7;
  int *v8;
  IKString *v9;

  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v5 = (_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 24) = a1;
  Member = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember(a2, "index");
  if ((int *)(*((_QWORD *)a2 + 1) + 48 * *a2) != Member && (*((_WORD *)Member + 23) & 0x10) != 0)
    v7 = Member[6];
  else
    v7 = -1;
  *(_DWORD *)a3 = v7;
  v8 = JSONS::StringFromJSON(a2, "name");
  IKString::assign(v5, (char *)v8, v9);
}

uint64_t JSONS::ObjectFromJSON<FIK::AimSetup>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = a2;
  *(_QWORD *)(a4 + 32) = 0;
  *(_QWORD *)(a4 + 40) = 0;
  *(_QWORD *)(a4 + 48) = a2;
  *(_QWORD *)(a4 + 56) = 0;
  *(_QWORD *)(a4 + 64) = 0;
  *(_QWORD *)(a4 + 72) = 0;
  *(_QWORD *)(a4 + 80) = a2;
  *(_QWORD *)(a4 + 88) = 0;
  *(_QWORD *)(a4 + 96) = 0;
  *(_QWORD *)(a4 + 104) = 0;
  *(_QWORD *)(a4 + 112) = a2;
  *(_DWORD *)(a4 + 120) = JSONS::AimingModeFromJSON(a3, "mode");
  *(_QWORD *)&v17 = 0x405000000000000;
  *((_QWORD *)&v16 + 1) = "controller_task";
  *(_QWORD *)&v16 = 15;
  v8 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::operator[]<rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>((int *)a3, (unsigned int *)&v16);
  JSONS::ObjectFromJSON<FIK::Item>(a2, (unsigned int *)v8, (uint64_t)&v16);
  *(_DWORD *)(a4 + 24) = v16;
  IKString::operator=((uint64_t *)(a4 + 32), (uint64_t)&v16 + 8);
  if ((_QWORD)v17)
    (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**((_QWORD **)&v17 + 1) + 24))(*((_QWORD *)&v17 + 1), *((_QWORD *)&v16 + 1), 0, 8);
  JSONS::ArrayFromJSON<FIK::Item>("trigger_hand_tasks", a1, a2, (int *)a3, &v14);
  v9 = v14;
  v10 = v15;
  v14 = 0u;
  *(_QWORD *)&v15 = 0;
  v16 = v9;
  v17 = v10;
  FIK::swap((uint64_t *)(a4 + 56), (uint64_t *)&v16);
  FIK::IKArray<FIK::Item>::~IKArray((uint64_t)&v16);
  FIK::IKArray<FIK::Item>::~IKArray((uint64_t)&v14);
  JSONS::ArrayFromJSON<FIK::Item>("handle_hand_tasks", a1, a2, (int *)a3, &v14);
  v11 = v14;
  v12 = v15;
  v14 = 0u;
  *(_QWORD *)&v15 = 0;
  v16 = v11;
  v17 = v12;
  FIK::swap((uint64_t *)(a4 + 88), (uint64_t *)&v16);
  FIK::IKArray<FIK::Item>::~IKArray((uint64_t)&v16);
  return FIK::IKArray<FIK::Item>::~IKArray((uint64_t)&v14);
}

void JSONS::ArrayFromJSON<FIK::Item>(char *__s@<X3>, int *a2@<X0>, uint64_t a3@<X1>, int *a4@<X2>, _QWORD *a5@<X8>)
{
  uint64_t *v10;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  int v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  a5[3] = a3;
  if ((int *)(*((_QWORD *)a4 + 1) + 48 * *a4) != rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember((unsigned int *)a4, __s))
  {
    v18 = __s;
    v19 = 0x405000000000000;
    v17 = strlen(__s);
    v10 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::operator[]<rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>(a4, (unsigned int *)&v17);
    if (*((_WORD *)v10 + 11) == 4 && *(_DWORD *)v10 != 0)
    {
      v12 = v10;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        JSONS::ObjectFromJSON<FIK::Item>(a3, (unsigned int *)(v12[1] + v13), (uint64_t)&v17);
        v16 = *a2;
        if (*a2)
          v15 = 1;
        else
          FIK::IKArray<FIK::Item>::push_back<FIK::Item&,void>(a5, (uint64_t)&v17);
        if (v19)
          (*(void (**)(uint64_t, char *, _QWORD, uint64_t))(*(_QWORD *)v20 + 24))(v20, v18, 0, 8);
        if (v16)
          break;
        ++v14;
        v13 += 24;
        if (v14 >= *(unsigned int *)v12)
          return;
      }
      if ((v15 & 1) == 0)
        FIK::IKArray<FIK::Item>::~IKArray((uint64_t)a5);
    }
  }
}

uint64_t *JSONS::FootPlacementFromJSON@<X0>(int *a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t *result;
  uint64_t *v9;
  char *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  a4[3] = a2;
  a4[4] = 0;
  a4[5] = 0;
  a4[6] = 0;
  a4[7] = a2;
  a4[8] = 0;
  a4[9] = 0;
  a4[10] = 0;
  a4[11] = a2;
  result = (uint64_t *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember(a3, "foot_placement_");
  if ((uint64_t *)(*((_QWORD *)a3 + 1) + 48 * *a3) != result)
  {
    *((_QWORD *)&v17 + 1) = "foot_placement_";
    *(_QWORD *)&v18 = 0x405000000000000;
    *(_QWORD *)&v17 = 15;
    v9 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::operator[]<rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>((int *)a3, (unsigned int *)&v17);
    result = (uint64_t *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember((unsigned int *)v9, "raytracing_tasks");
    if ((uint64_t *)(v9[1] + 48 * *(unsigned int *)v9) == result)
    {
      *a1 = 3;
      return result;
    }
    *((_QWORD *)&v17 + 1) = "raytracing_tasks";
    *(_QWORD *)&v18 = 0x405000000000000;
    *(_QWORD *)&v17 = 16;
    if ((*((_WORD *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::operator[]<rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>((int *)v9, (unsigned int *)&v17)+ 11) & 7) == 5)
    {
      v10 = "raytracing_tasks";
    }
    else
    {
      *((_QWORD *)&v17 + 1) = "raytracing_tasks";
      *(_QWORD *)&v18 = 0x405000000000000;
      *(_QWORD *)&v17 = 16;
      if ((*((_WORD *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::operator[]<rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>((int *)v9, (unsigned int *)&v17)+ 11) & 7) != 6)
      {
LABEL_11:
        JSONS::ArrayFromJSON<FIK::AimSetup>("aiming_setups", a1, a2, (unsigned int *)v9, (uint64_t *)&v15);
        v13 = v15;
        v14 = v16;
        v15 = 0uLL;
        *(_QWORD *)&v16 = 0;
        v17 = v13;
        v18 = v14;
        FIK::swap(a4 + 8, (uint64_t *)&v17);
        FIK::IKArray<FIK::AimSetup>::~IKArray((uint64_t *)&v17);
        return FIK::IKArray<FIK::AimSetup>::~IKArray((uint64_t *)&v15);
      }
      JSONS::ArrayFromJSON<int>("raytracing_tasks", a1, a2, (unsigned int *)v9, (uint64_t *)&v17);
      FIK::IKArray<unsigned int>::operator=(a4 + 4, &v17);
      *(_QWORD *)&v17 = 0;
      if ((_QWORD)v18)
        (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**((_QWORD **)&v18 + 1) + 24))(*((_QWORD *)&v18 + 1), v18, 0, 8);
      v10 = "raytracing_task_names";
    }
    JSONS::ArrayFromJSON<IKString>(v10, a1, a2, (int *)v9, &v15);
    v11 = v15;
    v12 = v16;
    v15 = 0uLL;
    *(_QWORD *)&v16 = 0;
    v17 = v11;
    v18 = v12;
    FIK::swap(a4, (uint64_t *)&v17);
    FIK::IKArray<IKString>::~IKArray((uint64_t)&v17);
    FIK::IKArray<IKString>::~IKArray((uint64_t)&v15);
    goto LABEL_11;
  }
  return result;
}

unsigned int *JSONS::ArrayFromJSON<int>@<X0>(char *__s@<X3>, _DWORD *a2@<X0>, uint64_t a3@<X1>, unsigned int *a4@<X2>, uint64_t *a5@<X8>)
{
  unsigned int *result;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  _QWORD v18[4];

  v18[3] = *MEMORY[0x24BDAC8D0];
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  a5[3] = a3;
  result = (unsigned int *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember(a4, __s);
  if ((unsigned int *)(*((_QWORD *)a4 + 1) + 48 * *a4) != result)
  {
    v18[1] = __s;
    v18[2] = 0x405000000000000;
    v18[0] = strlen(__s);
    result = (unsigned int *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::operator[]<rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>((int *)a4, (unsigned int *)v18);
    if (*((_WORD *)result + 11) == 4)
    {
      v10 = result;
      if (*result)
      {
        if (!*a2)
        {
          v11 = 0;
          v12 = 0;
          v13 = 1;
          do
          {
            v14 = *(_DWORD *)(*((_QWORD *)v10 + 1) + v11);
            result = (unsigned int *)FIK::IKArray<unsigned int>::reserve(a5, v12 + 1);
            v15 = *a5;
            *(_DWORD *)(a5[2] + 4 * *a5) = v14;
            v12 = v15 + 1;
            *a5 = v15 + 1;
            v11 += 24;
          }
          while (v13++ < *v10 && *a2 == 0);
        }
      }
    }
  }
  return result;
}

uint64_t *JSONS::ArrayFromJSON<FIK::AimSetup>@<X0>(char *__s@<X3>, int *a2@<X0>, uint64_t a3@<X1>, unsigned int *a4@<X2>, uint64_t *a5@<X8>)
{
  uint64_t *result;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  char v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[6];

  v24[5] = *MEMORY[0x24BDAC8D0];
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  a5[3] = a3;
  result = (uint64_t *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember(a4, __s);
  if ((uint64_t *)(*((_QWORD *)a4 + 1) + 48 * *a4) != result)
  {
    v18 = __s;
    v19 = 0x405000000000000;
    v17 = strlen(__s);
    result = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::operator[]<rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>((int *)a4, (unsigned int *)&v17);
    if (*((_WORD *)result + 11) == 4 && *(_DWORD *)result != 0)
    {
      v12 = result;
      v13 = 0;
      v14 = 0;
      v16 = 0;
      while (1)
      {
        JSONS::ObjectFromJSON<FIK::AimSetup>(a2, a3, (unsigned int *)(v12[1] + v13), (uint64_t)&v17);
        v15 = *a2;
        if (*a2)
          v16 = 1;
        else
          FIK::IKArray<FIK::AimSetup>::push_back<FIK::AimSetup&,void>(a5, (uint64_t)&v17);
        FIK::IKArray<FIK::Item>::~IKArray((uint64_t)v24);
        result = (uint64_t *)FIK::IKArray<FIK::Item>::~IKArray((uint64_t)&v23);
        if (v21)
        {
          result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v22 + 24))(v22, v20, 0, 8);
          v20 = 0;
          v21 = 0;
        }
        if (v18)
          result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v19 + 24))(v19, v17, 0, 8);
        if (v15)
          break;
        ++v14;
        v13 += 24;
        if (v14 >= *(unsigned int *)v12)
          return result;
      }
      if ((v16 & 1) == 0)
        return FIK::IKArray<FIK::AimSetup>::~IKArray(a5);
    }
  }
  return result;
}

uint64_t FIK::SerialisationJson::LoadJSON(uint64_t a1, unsigned __int8 *a2, unint64_t a3)
{
  FIK *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  size_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  BOOL v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  void (***v19)(FIK::CrtAllocator *__hidden);
  unsigned __int8 *v20;
  unint64_t v21;

  v20 = a2;
  v21 = a3;
  v4 = (FIK *)std::string_view::find[abi:nn180100]((uint64_t *)&v20, "\\\"", 0);
  if (v4 == (FIK *)-1)
  {
    if (*(_DWORD *)(rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>,FIK::RapidJsonAllocator>::Parse<0u,rapidjson::UTF8<char>>(a1, v20, v21)+ 88))v15 = 0;
    else
      v15 = *(unsigned __int16 *)(a1 + 22) == 3;
    if (v15)
      return 0;
  }
  else
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = FIK::defaultAllocator(v4);
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::reserve((unint64_t *)&v16, v21);
    v5 = -1;
    do
    {
      v6 = v5 + 1;
      v7 = std::string_view::find[abi:nn180100]((uint64_t *)&v20, "\\\"", v5 + 1);
      v8 = v21 - (v5 + 1);
      if (v21 < v5 + 1)
        abort();
      v5 = v7;
      if (v8 >= v7 - v6)
        v9 = v7 - v6;
      else
        v9 = v21 - v6;
      std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(&v16, &v20[v6], v9);
    }
    while (v5 != -1);
    if (v18 >= 0)
      v10 = (unsigned __int8 *)&v16;
    else
      v10 = v16;
    if (v18 >= 0)
      v11 = HIBYTE(v18);
    else
      v11 = v17;
    if (*(_DWORD *)(rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>,FIK::RapidJsonAllocator>::Parse<0u,rapidjson::UTF8<char>>(a1, v10, v11)+ 88))v12 = 0;
    else
      v12 = *(unsigned __int16 *)(a1 + 22) == 3;
    v13 = v12;
    if (SHIBYTE(v18) < 0)
    {
      if (v16)
        ((void (*)(void (***)(FIK::CrtAllocator *__hidden), unsigned __int8 *, _QWORD, uint64_t))(*v19)[3])(v19, v16, 0, 8);
    }
    if (v13)
      return 0;
  }
  return 3;
}

unint64_t std::string_view::find[abi:nn180100](uint64_t *a1, char *__s, unint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  int64_t v8;
  void *v9;
  char *v10;
  int64_t v11;
  char *v12;
  int v14;
  uint64_t v15;
  char *v16;

  v6 = *a1;
  v5 = a1[1];
  v7 = strlen(__s);
  if (v5 < a3)
    return -1;
  v8 = v7;
  if (v7)
  {
    v9 = (void *)(v6 + a3);
    v10 = (char *)(v6 + v5);
    v11 = v5 - a3;
    if ((uint64_t)(v5 - a3) >= v8)
    {
      v14 = *__s;
      do
      {
        v15 = v11 - v8;
        if (v15 == -1)
          break;
        v16 = (char *)memchr(v9, v14, v15 + 1);
        if (!v16)
          break;
        v12 = v16;
        if (!memcmp(v16, __s, v8))
          goto LABEL_6;
        v9 = v12 + 1;
        v11 = v10 - (v12 + 1);
      }
      while (v11 >= v8);
    }
    v12 = v10;
LABEL_6:
    if (v12 == v10)
      return -1;
    else
      return (unint64_t)&v12[-v6];
  }
  return a3;
}

unint64_t *std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::reserve(unint64_t *__dst, unint64_t a2)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  int v13;
  const void *v14;
  unint64_t *v15;
  unint64_t v16;
  char v17;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v2 = __dst;
  LODWORD(v3) = *((char *)__dst + 23);
  if ((v3 & 0x80000000) == 0)
  {
    if (a2 <= 0x16)
      return __dst;
    v4 = *((unsigned __int8 *)__dst + 23);
    if (v4 <= a2)
      v5 = a2;
    else
      v5 = *((unsigned __int8 *)__dst + 23);
    v6 = v5 | 7;
    if ((v5 | 7) != 0x17)
    {
      v11 = v6 + 1;
      v7 = 22;
      goto LABEL_24;
    }
    v6 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    v7 = 22;
LABEL_20:
    v11 = v6 + 1;
    if (v6 < 0x17)
    {
      v12 = 0;
      v13 = 0;
      v14 = (const void *)*__dst;
      v15 = __dst;
      if ((v3 & 0x80) != 0)
        goto LABEL_35;
      goto LABEL_33;
    }
LABEL_24:
    if (v7 >= v6)
    {
      if (!v11)
        return __dst;
      __dst = (unint64_t *)(*(uint64_t (**)(unint64_t, unint64_t, uint64_t))(*(_QWORD *)__dst[3] + 16))(__dst[3], v11, 128);
      v15 = __dst;
      if (!__dst)
        return __dst;
    }
    else if (v11)
    {
      __dst = (unint64_t *)(*(uint64_t (**)(unint64_t, unint64_t, uint64_t))(*(_QWORD *)__dst[3] + 16))(__dst[3], v11, 128);
      v15 = __dst;
    }
    else
    {
      v15 = 0;
    }
    LODWORD(v3) = *((char *)v2 + 23);
    if ((v3 & 0x80000000) != 0)
    {
      v14 = (const void *)*v2;
      v12 = 1;
LABEL_35:
      LOBYTE(v13) = 0;
      v16 = v2[1];
      goto LABEL_36;
    }
    v13 = 1;
    v14 = v2;
LABEL_33:
    v16 = v3;
    v12 = v13;
LABEL_36:
    if (v16 != -1)
      __dst = (unint64_t *)memmove(v15, v14, v16 + 1);
    if (v14)
      v17 = v13;
    else
      v17 = 1;
    if ((v17 & 1) == 0)
      __dst = (unint64_t *)(*(uint64_t (**)(unint64_t, const void *, _QWORD, uint64_t))(*(_QWORD *)v2[3] + 24))(v2[3], v14, 0, 8);
    if (v12)
    {
      v2[1] = v4;
      v2[2] = v11 | 0x8000000000000000;
      *v2 = (unint64_t)v15;
    }
    else
    {
      *((_BYTE *)v2 + 23) = v4 & 0x7F;
    }
    return __dst;
  }
  v8 = __dst[2];
  v7 = (v8 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v7 < a2)
  {
    v4 = __dst[1];
    if (v4 <= a2)
      v9 = a2;
    else
      v9 = __dst[1];
    v10 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v10 = v9 | 7;
    v6 = v9 >= 0x17 ? v10 : 22;
    if (v6 != v7)
    {
      v3 = HIBYTE(v8);
      goto LABEL_20;
    }
  }
  return __dst;
}

void FIK::SerialisationJson::GetMoCapRig(FIK::Allocator *a1@<X2>, int *a2@<X0>, unsigned int *a3@<X1>, uint64_t a4@<X8>)
{
  float32x4_t v8;
  __int128 v9;
  float32x4_t v10;
  __int128 v11;
  float32x4_t v12;
  __int128 v13;
  __int128 v14;
  int *Member;
  BOOL v16;
  float32x4_t v17;
  __int128 v18;
  float32x4_t v19;
  __int128 v20;

  FIK::IKRig::IKRig((FIK::IKRig *)a4, a1);
  *(_OWORD *)(a4 + 176) = 0u;
  *(_QWORD *)(a4 + 192) = 0;
  *(_QWORD *)(a4 + 200) = a1;
  *(_OWORD *)(a4 + 216) = 0u;
  *(_QWORD *)(a4 + 208) = 0;
  *(_QWORD *)(a4 + 232) = a1;
  *(_OWORD *)(a4 + 248) = 0u;
  *(_QWORD *)(a4 + 240) = 0;
  *(_QWORD *)(a4 + 264) = a1;
  *(_OWORD *)(a4 + 272) = 0u;
  *(_OWORD *)(a4 + 288) = xmmword_210802BA0;
  *(_BYTE *)(a4 + 304) = 0;
  *(_DWORD *)(a4 + 308) = 1065353216;
  *(_DWORD *)(a4 + 48) = 1;
  JSONS::IKRigFromJSON(a2, a4, a3);
  JSONS::ArrayFromJSON<FIK::MoCapBone>("bones_", a2, a1, a3, (uint64_t *)&v17);
  v8 = v17;
  v9 = v18;
  v17 = 0u;
  *(_QWORD *)&v18 = 0;
  v19 = v8;
  v20 = v9;
  FIK::swap((uint64_t *)(a4 + 208), (uint64_t *)&v19);
  FIK::IKArray<FIK::MoCapBone>::~IKArray((uint64_t *)&v19);
  FIK::IKArray<FIK::MoCapBone>::~IKArray((uint64_t *)&v17);
  JSONS::ArrayFromJSON<FIK::MoCapTask>("tasks_", a2, a1, a3, (uint64_t *)&v17);
  v10 = v17;
  v11 = v18;
  v17 = 0u;
  *(_QWORD *)&v18 = 0;
  v19 = v10;
  v20 = v11;
  FIK::swap((uint64_t *)(a4 + 176), (uint64_t *)&v19);
  FIK::IKArray<FIK::MoCapTask>::~IKArray((uint64_t *)&v19);
  FIK::IKArray<FIK::MoCapTask>::~IKArray((uint64_t *)&v17);
  JSONS::ArrayFromJSON<FIK::RigBoneBase>("sources", a2, (uint64_t)a1, (int *)a3, (uint64_t *)&v17);
  v12 = v17;
  v13 = v18;
  v17 = 0u;
  *(_QWORD *)&v18 = 0;
  v19 = v12;
  v20 = v13;
  FIK::swap((uint64_t *)(a4 + 240), (uint64_t *)&v19);
  FIK::IKArray<FIK::RigBoneBase>::~IKArray((uint64_t *)&v19);
  FIK::IKArray<FIK::RigBoneBase>::~IKArray((uint64_t *)&v17);
  JSONS::TransformFromJSON(a3, "source_transform", &v19);
  v14 = v20;
  *(float32x4_t *)(a4 + 272) = v19;
  *(_OWORD *)(a4 + 288) = v14;
  Member = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember(a3, "rigid_body_solve");
  v16 = (int *)(*((_QWORD *)a3 + 1) + 48 * *a3) != Member && *((_WORD *)Member + 23) == 10;
  *(_BYTE *)(a4 + 304) = v16;
  *(float *)(a4 + 308) = JSONS::RealFromJSON(a3, "source_scale", 0.0);
}

uint64_t *JSONS::ArrayFromJSON<FIK::MoCapBone>@<X0>(char *__s@<X3>, int *a2@<X0>, FIK::Allocator *a3@<X1>, unsigned int *a4@<X2>, uint64_t *a5@<X8>)
{
  uint64_t *result;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  char v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[18];

  v27[16] = *MEMORY[0x24BDAC8D0];
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  a5[3] = (uint64_t)a3;
  result = (uint64_t *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember(a4, __s);
  if ((uint64_t *)(*((_QWORD *)a4 + 1) + 48 * *a4) != result)
  {
    v18 = __s;
    v19 = 0x405000000000000;
    v17 = strlen(__s);
    result = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::operator[]<rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>((int *)a4, (unsigned int *)&v17);
    if (*((_WORD *)result + 11) == 4 && *(_DWORD *)result != 0)
    {
      v12 = result;
      v13 = 0;
      v14 = 0;
      v16 = 0;
      while (1)
      {
        JSONS::MoCapBoneFromJSON(a2, a3, (unsigned int *)(v12[1] + v13), (uint64_t)&v17);
        v15 = *a2;
        if (*a2)
          v16 = 1;
        else
          FIK::IKArray<FIK::MoCapBone>::push_back<FIK::MoCapBone&,void>((uint64_t)a5, (const FIK::MoCapBone *)&v17);
        result = (uint64_t *)FIK::IKArray<IKString>::~IKArray((uint64_t)v27);
        if (v25)
        {
          result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v26 + 24))(v26, v24, 0, 8);
          v24 = 0;
          v25 = 0;
        }
        if (v22)
        {
          result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v23 + 24))(v23, v21, 0, 8);
          v21 = 0;
          v22 = 0;
        }
        if (v19)
          result = (uint64_t *)(*(uint64_t (**)(uint64_t, char *, _QWORD, uint64_t))(*(_QWORD *)v20 + 24))(v20, v18, 0, 8);
        if (v15)
          break;
        ++v14;
        v13 += 24;
        if (v14 >= *(unsigned int *)v12)
          return result;
      }
      if ((v16 & 1) == 0)
        return FIK::IKArray<FIK::MoCapBone>::~IKArray(a5);
    }
  }
  return result;
}

uint64_t *JSONS::ArrayFromJSON<FIK::MoCapTask>@<X0>(char *__s@<X3>, int *a2@<X0>, FIK::Allocator *a3@<X1>, unsigned int *a4@<X2>, uint64_t *a5@<X8>)
{
  uint64_t *result;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  int v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  a5[3] = (uint64_t)a3;
  result = (uint64_t *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember(a4, __s);
  if ((uint64_t *)(*((_QWORD *)a4 + 1) + 48 * *a4) != result)
  {
    v18 = __s;
    v19 = 0x405000000000000;
    v17 = strlen(__s);
    result = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::operator[]<rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>((int *)a4, (unsigned int *)&v17);
    if (*((_WORD *)result + 11) == 4 && *(_DWORD *)result != 0)
    {
      v12 = result;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        result = (uint64_t *)JSONS::MoCapTaskFromJSON(a2, a3, (unsigned int *)(v12[1] + v13), (uint64_t)&v17);
        v16 = *a2;
        if (*a2)
          v15 = 1;
        else
          result = (uint64_t *)FIK::IKArray<FIK::MoCapTask>::push_back<FIK::MoCapTask&,void>((uint64_t)a5, (uint64_t)&v17);
        if (v24)
        {
          result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v25 + 24))(v25, v23, 0, 8);
          v23 = 0;
          v24 = 0;
        }
        if (v21)
        {
          result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v22 + 24))(v22, v20, 0, 8);
          v20 = 0;
          v21 = 0;
        }
        if (v18)
          result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v19 + 24))(v19, v17, 0, 8);
        if (v16)
          break;
        ++v14;
        v13 += 24;
        if (v14 >= *(unsigned int *)v12)
          return result;
      }
      if ((v15 & 1) == 0)
        return FIK::IKArray<FIK::MoCapTask>::~IKArray(a5);
    }
  }
  return result;
}

void JSONS::ArrayFromJSON<FIK::RigBoneBase>(char *__s@<X3>, int *a2@<X0>, uint64_t a3@<X1>, int *a4@<X2>, uint64_t *a5@<X8>)
{
  uint64_t *v10;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  __n128 v16;
  int v17;
  char v18;
  float32x4_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  a5[3] = a3;
  if ((int *)(*((_QWORD *)a4 + 1) + 48 * *a4) != rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember((unsigned int *)a4, __s))
  {
    v19.i64[1] = (uint64_t)__s;
    v20 = 0x405000000000000;
    v19.i64[0] = strlen(__s);
    v10 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::operator[]<rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>(a4, (unsigned int *)&v19);
    if (*((_WORD *)v10 + 11) == 4 && *(_DWORD *)v10 != 0)
    {
      v12 = v10;
      v13 = 0;
      v14 = 0;
      v18 = 0;
      while (1)
      {
        v15 = (unsigned int *)(v12[1] + v13);
        v19 = (float32x4_t)0xFFFFFFFFFFFFFFFFLL;
        v20 = 0;
        v22 = 0;
        v23 = 0;
        v21 = a3;
        v24 = a3;
        v25 = 0;
        v26 = 0;
        v27 = xmmword_210802BA0;
        v16.n128_f64[0] = JSONS::RigBoneBaseFromJSON(&v19, v15);
        v17 = *a2;
        if (*a2)
          v18 = 1;
        else
          FIK::IKArray<FIK::RigBoneBase>::push_back<FIK::RigBoneBase&,void>(a5, (uint64_t)&v19);
        if (v23)
        {
          (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, __n128))(*(_QWORD *)v24 + 24))(v24, v22, 0, 8, v16);
          v22 = 0;
          v23 = 0;
        }
        if (v20)
          (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, __n128))(*(_QWORD *)v21 + 24))(v21, v19.i64[1], 0, 8, v16);
        if (v17)
          break;
        ++v14;
        v13 += 24;
        if (v14 >= *(unsigned int *)v12)
          return;
      }
      if ((v18 & 1) == 0)
        FIK::IKArray<FIK::RigBoneBase>::~IKArray(a5);
    }
  }
}

uint64_t *FIK::SerialisationJson::GetGameRig@<X0>(FIK::Allocator *a1@<X2>, int *a2@<X0>, unsigned int *a3@<X1>, uint64_t a4@<X8>)
{
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  FIK::IKRig::IKRig((FIK::IKRig *)a4, a1);
  *(_OWORD *)(a4 + 176) = 0u;
  *(_QWORD *)(a4 + 208) = 0;
  *(_QWORD *)(a4 + 192) = 0;
  *(_QWORD *)(a4 + 200) = a1;
  *(_OWORD *)(a4 + 216) = 0u;
  *(_QWORD *)(a4 + 232) = a1;
  *(_QWORD *)(a4 + 240) = 0;
  *(_OWORD *)(a4 + 248) = 0u;
  *(_QWORD *)(a4 + 264) = a1;
  *(_QWORD *)(a4 + 272) = 0;
  *(_OWORD *)(a4 + 280) = 0u;
  *(_QWORD *)(a4 + 296) = a1;
  *(_OWORD *)(a4 + 304) = 0u;
  *(_QWORD *)(a4 + 320) = 0;
  *(_QWORD *)(a4 + 328) = a1;
  *(_DWORD *)(a4 + 48) = 2;
  JSONS::IKRigFromJSON(a2, a4, a3);
  JSONS::FootPlacementFromJSON(a2, (uint64_t)a1, a3, (uint64_t *)&v17);
  v8 = v17;
  v9 = v18;
  v17 = 0u;
  *(_QWORD *)&v18 = 0;
  v24 = v8;
  v25 = v9;
  FIK::swap((uint64_t *)(a4 + 240), (uint64_t *)&v24);
  FIK::IKArray<IKString>::~IKArray((uint64_t)&v24);
  FIK::IKArray<unsigned int>::operator=((uint64_t *)(a4 + 272), &v19);
  v10 = v22;
  v11 = v23;
  v22 = 0u;
  *(_QWORD *)&v23 = 0;
  v24 = v10;
  v25 = v11;
  FIK::swap((uint64_t *)(a4 + 304), (uint64_t *)&v24);
  FIK::IKArray<FIK::AimSetup>::~IKArray((uint64_t *)&v24);
  FIK::IKArray<FIK::AimSetup>::~IKArray((uint64_t *)&v22);
  *(_QWORD *)&v19 = 0;
  if (v20)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v21 + 24))(v21, v20, 0, 8);
  FIK::IKArray<IKString>::~IKArray((uint64_t)&v17);
  JSONS::ArrayFromJSON<FIK::RigBone>("bones_", a2, (uint64_t)a1, (int *)a3, (uint64_t *)&v24);
  v12 = v24;
  v13 = v25;
  v24 = 0u;
  *(_QWORD *)&v25 = 0;
  v17 = v12;
  v18 = v13;
  FIK::swap((uint64_t *)(a4 + 208), (uint64_t *)&v17);
  FIK::IKArray<FIK::RigBone>::~IKArray((uint64_t *)&v17);
  FIK::IKArray<FIK::RigBone>::~IKArray((uint64_t *)&v24);
  JSONS::ArrayFromJSON<FIK::GameTask>("tasks_", a2, a1, (int *)a3, (uint64_t *)&v24);
  v14 = v24;
  v15 = v25;
  v24 = 0u;
  *(_QWORD *)&v25 = 0;
  v17 = v14;
  v18 = v15;
  FIK::swap((uint64_t *)(a4 + 176), (uint64_t *)&v17);
  FIK::IKArray<FIK::GameTask>::~IKArray((uint64_t *)&v17);
  return FIK::IKArray<FIK::GameTask>::~IKArray((uint64_t *)&v24);
}

void JSONS::ArrayFromJSON<FIK::RigBone>(char *__s@<X3>, int *a2@<X0>, uint64_t a3@<X1>, int *a4@<X2>, uint64_t *a5@<X8>)
{
  uint64_t *v8;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  int32x2_t v13;
  unsigned int *v14;
  __n128 v15;
  int v16;
  char v18;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  int v30;
  char v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  int32x2_t v38;
  int v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  int v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  a5[3] = a3;
  if ((int *)(*((_QWORD *)a4 + 1) + 48 * *a4) != rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember((unsigned int *)a4, __s))
  {
    v21 = __s;
    v22 = 0x405000000000000;
    v20 = strlen(__s);
    v8 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::operator[]<rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>(a4, (unsigned int *)&v20);
    if (*((_WORD *)v8 + 11) == 4 && *(_DWORD *)v8 != 0)
    {
      v10 = v8;
      v11 = 0;
      v12 = 0;
      v18 = 0;
      v13 = vdup_n_s32(0x43B40000u);
      while (1)
      {
        v14 = (unsigned int *)(v10[1] + v11);
        v20 = -1;
        v21 = 0;
        v22 = 0;
        v24 = 0;
        v25 = 0;
        v23 = a3;
        v26 = a3;
        v27 = 0;
        v28 = 0;
        v29 = xmmword_210802BA0;
        v30 = 16843009;
        v31 = 1;
        v32 = 0;
        v33 = xmmword_210804100;
        v34 = 0x3F80000000000000;
        v35 = xmmword_2108040F0;
        v36 = xmmword_2108040F0;
        v37 = xmmword_210804110;
        v38 = v13;
        v39 = 1135869952;
        v43 = 0;
        v41 = 0u;
        v42 = 0u;
        v40 = 0u;
        v15.n128_f64[0] = JSONS::RigBoneFromJSON(a2, (uint64_t)&v20, v14);
        v16 = *a2;
        if (*a2)
          v18 = 1;
        else
          FIK::IKArray<FIK::RigBone>::push_back<FIK::RigBone&,void>((uint64_t)a5, (const FIK::RigBone *)&v20);
        if (v25)
        {
          (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, __n128))(*(_QWORD *)v26 + 24))(v26, v24, 0, 8, v15);
          v24 = 0;
          v25 = 0;
        }
        if (v22)
          (*(void (**)(uint64_t, char *, _QWORD, uint64_t, __n128))(*(_QWORD *)v23 + 24))(v23, v21, 0, 8, v15);
        if (v16)
          break;
        ++v12;
        v11 += 24;
        if (v12 >= *(unsigned int *)v10)
          return;
      }
      if ((v18 & 1) == 0)
        FIK::IKArray<FIK::RigBone>::~IKArray(a5);
    }
  }
}

void JSONS::ArrayFromJSON<FIK::GameTask>(char *__s@<X3>, int *a2@<X0>, FIK::Allocator *a3@<X1>, int *a4@<X2>, uint64_t *a5@<X8>)
{
  uint64_t *v10;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  int v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  a5[3] = (uint64_t)a3;
  if ((int *)(*((_QWORD *)a4 + 1) + 48 * *a4) != rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::FindMember((unsigned int *)a4, __s))
  {
    v18 = __s;
    v19 = 0x405000000000000;
    v17 = strlen(__s);
    v10 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::operator[]<rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>(a4, (unsigned int *)&v17);
    if (*((_WORD *)v10 + 11) == 4 && *(_DWORD *)v10 != 0)
    {
      v12 = v10;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        JSONS::GameTaskFromJSON(a2, a3, (unsigned int *)(v12[1] + v13), (uint64_t)&v17);
        v16 = *a2;
        if (*a2)
          v15 = 1;
        else
          FIK::IKArray<FIK::GameTask>::push_back<FIK::GameTask&,void>((uint64_t)a5, (uint64_t)&v17);
        if (v21)
        {
          (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v22 + 24))(v22, v20, 0, 8);
          v20 = 0;
          v21 = 0;
        }
        if (v18)
          (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v19 + 24))(v19, v17, 0, 8);
        if (v16)
          break;
        ++v14;
        v13 += 24;
        if (v14 >= *(unsigned int *)v12)
          return;
      }
      if ((v15 & 1) == 0)
        FIK::IKArray<FIK::GameTask>::~IKArray(a5);
    }
  }
}

_QWORD *FIK::SerialisationJson::LoadIKRigFromString@<X0>(_DWORD *a1@<X0>, unsigned __int8 *a2@<X1>, unint64_t a3@<X2>, FIK::Allocator *a4@<X3>, FIK::IKRig *a5@<X8>)
{
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v16 = 0u;
  v17 = 0u;
  v13 = 0;
  v15 = 0u;
  v12 = 0u;
  v18 = 1024;
  v19 = 0;
  v20 = 0;
  v10 = operator new();
  v14 = rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>::MemoryPoolAllocator(v10, 0x10000, 0);
  *(_QWORD *)&v15 = v14;
  LODWORD(a3) = FIK::SerialisationJson::LoadJSON((uint64_t)&v12, a2, a3);
  *a1 = a3;
  FIK::IKRig::IKRig(a5, a4);
  if (!(_DWORD)a3)
    JSONS::IKRigFromJSON(a1, (uint64_t)a5, (unsigned int *)&v12);
  return rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>,FIK::RapidJsonAllocator>::~GenericDocument(&v12);
}

_QWORD *FIK::SerialisationJson::LoadMoCapRigFromString@<X0>(int *a1@<X0>, unsigned __int8 *a2@<X1>, unint64_t a3@<X2>, FIK::Allocator *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  int JSON;
  int fixed;
  float32x4_t *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  int v24;
  __int128 v25;
  uint64_t v26[2];
  uint64_t v27;
  _QWORD v28[12];
  int v29;
  _DWORD v30[4];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _QWORD v41[2];
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v46 = 0u;
  v47 = 0u;
  v43 = 0;
  v45 = 0u;
  v42 = 0u;
  v48 = 1024;
  v49 = 0;
  v50 = 0;
  v10 = operator new();
  v44 = rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>::MemoryPoolAllocator(v10, 0x10000, 0);
  *(_QWORD *)&v45 = v44;
  JSON = FIK::SerialisationJson::LoadJSON((uint64_t)&v42, a2, a3);
  *a1 = JSON;
  if (JSON)
    goto LABEL_8;
  if (JSONS::RigTypeFromJSON((unsigned int *)&v42, "rig_type_") != 1)
  {
    *a1 = 3;
    goto LABEL_8;
  }
  if (*a1)
  {
LABEL_8:
    FIK::IKRig::IKRig((FIK::IKRig *)a5, a4);
    *(_QWORD *)(a5 + 176) = 0;
    *(_QWORD *)(a5 + 184) = 0;
    *(_QWORD *)(a5 + 192) = 0;
    *(_QWORD *)(a5 + 200) = a4;
    *(_QWORD *)(a5 + 208) = 0;
    *(_QWORD *)(a5 + 216) = 0;
    *(_QWORD *)(a5 + 224) = 0;
    *(_QWORD *)(a5 + 232) = a4;
    *(_QWORD *)(a5 + 240) = 0;
    *(_QWORD *)(a5 + 248) = 0;
    *(_QWORD *)(a5 + 256) = 0;
    *(_QWORD *)(a5 + 264) = a4;
    *(_QWORD *)(a5 + 272) = 0;
    *(_QWORD *)(a5 + 280) = 0;
    *(_OWORD *)(a5 + 288) = xmmword_210802BA0;
    *(_BYTE *)(a5 + 304) = 0;
    *(_DWORD *)(a5 + 308) = 1065353216;
    *(_DWORD *)(a5 + 48) = 1;
    return rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>,FIK::RapidJsonAllocator>::~GenericDocument(&v42);
  }
  FIK::SerialisationJson::GetMoCapRig(a4, a1, (unsigned int *)&v42, (uint64_t)v26);
  if (*a1 == 3 || (fixed = FIK::Serialisation::fixUpRigIndices((uint64_t)v26), *a1 = fixed, fixed == 3))
  {
    FIK::IKRig::IKRig((FIK::IKRig *)a5, a4);
    *(_QWORD *)(a5 + 176) = 0;
    *(_QWORD *)(a5 + 184) = 0;
    *(_QWORD *)(a5 + 192) = 0;
    *(_QWORD *)(a5 + 200) = a4;
    *(_QWORD *)(a5 + 208) = 0;
    *(_QWORD *)(a5 + 216) = 0;
    *(_QWORD *)(a5 + 224) = 0;
    *(_QWORD *)(a5 + 232) = a4;
    *(_QWORD *)(a5 + 240) = 0;
    *(_QWORD *)(a5 + 248) = 0;
    *(_QWORD *)(a5 + 256) = 0;
    *(_QWORD *)(a5 + 264) = a4;
    *(_QWORD *)(a5 + 272) = 0;
    *(_QWORD *)(a5 + 280) = 0;
    *(_OWORD *)(a5 + 288) = xmmword_210802BA0;
    *(_BYTE *)(a5 + 304) = 0;
    *(_DWORD *)(a5 + 308) = 1065353216;
    *(_DWORD *)(a5 + 48) = 1;
  }
  else
  {
    if ((_QWORD)v33)
    {
      v14 = (float32x4_t *)(v34 + 208);
      v15 = (_QWORD)v33 << 8;
      do
      {
        if (!(v14[-1].u8[12] | v14[-1].u8[13]))
          *v14 = vdivq_f32(*v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)v41 + 4), 0));
        v14 += 16;
        v15 -= 256;
      }
      while (v15);
    }
    IKString::IKString((uint64_t *)a5, v26, v27);
    *(_OWORD *)(a5 + 24) = *(_OWORD *)v28;
    *(_OWORD *)(a5 + 36) = *(_OWORD *)((char *)&v28[1] + 4);
    v16 = *(_OWORD *)&v28[7];
    *(_OWORD *)(a5 + 64) = *(_OWORD *)&v28[5];
    *(_OWORD *)(a5 + 80) = v16;
    *(_OWORD *)(a5 + 96) = *(_OWORD *)&v28[9];
    v17 = v32;
    *(_OWORD *)(a5 + 144) = v31;
    *(_OWORD *)(a5 + 160) = v17;
    v18 = v33;
    v19 = v34;
    v33 = 0u;
    *(_OWORD *)(a5 + 176) = v18;
    *(_OWORD *)(a5 + 192) = v19;
    v20 = v35;
    v21 = v36;
    v35 = 0u;
    *(_OWORD *)(a5 + 208) = v20;
    *(_OWORD *)(a5 + 224) = v21;
    v22 = v37;
    v23 = v38;
    v37 = 0u;
    *(_QWORD *)(a5 + 112) = v28[11];
    v24 = v30[0];
    *(_DWORD *)(a5 + 120) = v29;
    *(_DWORD *)(a5 + 131) = *(_DWORD *)((char *)v30 + 3);
    *(_DWORD *)(a5 + 128) = v24;
    *(_QWORD *)&v34 = 0;
    *(_QWORD *)&v36 = 0;
    *(_QWORD *)&v38 = 0;
    *(_OWORD *)(a5 + 240) = v22;
    *(_OWORD *)(a5 + 256) = v23;
    v25 = v40;
    *(_OWORD *)(a5 + 272) = v39;
    *(_OWORD *)(a5 + 288) = v25;
    *(_QWORD *)(a5 + 304) = v41[0];
  }
  FIK::IKArray<FIK::RigBoneBase>::~IKArray((uint64_t *)&v37);
  FIK::IKArray<FIK::MoCapBone>::~IKArray((uint64_t *)&v35);
  FIK::IKArray<FIK::MoCapTask>::~IKArray((uint64_t *)&v33);
  if (v26[1])
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v27 + 24))(v27, v26[0], 0, 8);
  return rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>,FIK::RapidJsonAllocator>::~GenericDocument(&v42);
}

uint64_t FIK::Serialisation::fixUpRigIndices(uint64_t a1)
{
  unint64_t v2;
  unsigned int *v3;
  _DWORD *v4;
  unsigned int v5;
  BOOL v6;
  unint64_t v7;
  unsigned int *v8;
  _DWORD *v9;
  unsigned int v10;
  unint64_t *v11;

  v3 = (unsigned int *)(a1 + 208);
  v2 = *(_QWORD *)(a1 + 208);
  if (v2)
  {
    v4 = *(_DWORD **)(a1 + 224);
    v5 = 1;
    do
    {
      *v4 = v5 - 1;
      v4 += 136;
      v6 = v2 > v5++;
    }
    while (v6);
  }
  v8 = (unsigned int *)(a1 + 240);
  v7 = *(_QWORD *)(a1 + 240);
  if (v7)
  {
    v9 = *(_DWORD **)(a1 + 256);
    v10 = 1;
    do
    {
      *v9 = v10 - 1;
      v9 += 24;
      v6 = v7 > v10++;
    }
    while (v6);
  }
  FIK::IKRigUtils::updateParentIndices<FIK::MoCapBone>((unsigned int *)(a1 + 208));
  FIK::IKRigUtils::updateParentIndices<FIK::RigBoneBase>((unsigned int *)(a1 + 240));
  v11 = (unint64_t *)(a1 + 176);
  FIK::IKRigUtils::updateTargetIndices<FIK::MoCapTask,FIK::MoCapBone>(v11, v3);
  if (FIK::IKRigUtils::updateSourceIndices(v3, v11, v8))
    return 0;
  else
    return 3;
}

{
  unint64_t v2;
  unsigned int *v3;
  _DWORD *v4;
  unsigned int v5;

  v3 = (unsigned int *)(a1 + 208);
  v2 = *(_QWORD *)(a1 + 208);
  if (v2)
  {
    v4 = *(_DWORD **)(a1 + 224);
    v5 = 1;
    do
    {
      *v4 = v5 - 1;
      v4 += 64;
    }
    while (v2 > v5++);
  }
  FIK::IKRigUtils::updateParentIndices<FIK::RigBone>((unsigned int *)(a1 + 208));
  FIK::IKRigUtils::updateTargetIndices<FIK::GameTask,FIK::RigBone>((unint64_t *)(a1 + 176), v3);
  return 0;
}

_QWORD *FIK::SerialisationJson::LoadGameRigFromString@<X0>(int *a1@<X0>, unsigned __int8 *a2@<X1>, unint64_t a3@<X2>, FIK::Allocator *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  int JSON;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25[2];
  uint64_t v26;
  _QWORD v27[12];
  int v28;
  _DWORD v29[4];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  FIK::Allocator *v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v47 = 0u;
  v48 = 0u;
  v44 = 0;
  v46 = 0u;
  v43 = 0u;
  v49 = 1024;
  v50 = 0;
  v51 = 0;
  v10 = operator new();
  v45 = rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>::MemoryPoolAllocator(v10, 0x10000, 0);
  *(_QWORD *)&v46 = v45;
  JSON = FIK::SerialisationJson::LoadJSON((uint64_t)&v43, a2, a3);
  *a1 = JSON;
  if (JSON)
    goto LABEL_7;
  if (JSONS::RigTypeFromJSON((unsigned int *)&v43, "rig_type_") != 2)
  {
    *a1 = 3;
    goto LABEL_7;
  }
  if (*a1)
  {
LABEL_7:
    FIK::IKRig::IKRig((FIK::IKRig *)a5, a4);
    *(_QWORD *)(a5 + 176) = 0;
    *(_QWORD *)(a5 + 184) = 0;
    *(_QWORD *)(a5 + 192) = 0;
    *(_QWORD *)(a5 + 200) = a4;
    *(_QWORD *)(a5 + 208) = 0;
    *(_QWORD *)(a5 + 216) = 0;
    *(_QWORD *)(a5 + 224) = 0;
    *(_QWORD *)(a5 + 232) = a4;
    *(_QWORD *)(a5 + 240) = 0;
    *(_QWORD *)(a5 + 248) = 0;
    *(_QWORD *)(a5 + 256) = 0;
    *(_QWORD *)(a5 + 264) = a4;
    *(_QWORD *)(a5 + 272) = 0;
    *(_QWORD *)(a5 + 280) = 0;
    *(_QWORD *)(a5 + 288) = 0;
    *(_QWORD *)(a5 + 296) = a4;
    *(_QWORD *)(a5 + 304) = 0;
    *(_QWORD *)(a5 + 312) = 0;
    *(_QWORD *)(a5 + 320) = 0;
    *(_QWORD *)(a5 + 328) = a4;
    *(_DWORD *)(a5 + 48) = 2;
    return rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>,FIK::RapidJsonAllocator>::~GenericDocument(&v43);
  }
  FIK::SerialisationJson::GetGameRig(a4, a1, (unsigned int *)&v43, (uint64_t)v25);
  if (*a1 == 3)
  {
    FIK::IKRig::IKRig((FIK::IKRig *)a5, a4);
    *(_QWORD *)(a5 + 176) = 0;
    *(_QWORD *)(a5 + 184) = 0;
    *(_QWORD *)(a5 + 192) = 0;
    *(_QWORD *)(a5 + 200) = a4;
    *(_QWORD *)(a5 + 208) = 0;
    *(_QWORD *)(a5 + 216) = 0;
    *(_QWORD *)(a5 + 224) = 0;
    *(_QWORD *)(a5 + 232) = a4;
    *(_QWORD *)(a5 + 240) = 0;
    *(_QWORD *)(a5 + 248) = 0;
    *(_QWORD *)(a5 + 256) = 0;
    *(_QWORD *)(a5 + 264) = a4;
    *(_QWORD *)(a5 + 272) = 0;
    *(_QWORD *)(a5 + 280) = 0;
    *(_QWORD *)(a5 + 288) = 0;
    *(_QWORD *)(a5 + 296) = a4;
    *(_QWORD *)(a5 + 304) = 0;
    *(_QWORD *)(a5 + 312) = 0;
    *(_QWORD *)(a5 + 320) = 0;
    *(_DWORD *)(a5 + 48) = 2;
  }
  else
  {
    FIK::Serialisation::fixUpRigIndices((uint64_t)v25);
    *a1 = 0;
    IKString::IKString((uint64_t *)a5, v25, v26);
    *(_QWORD *)(a5 + 112) = v27[11];
    v13 = v29[0];
    *(_DWORD *)(a5 + 120) = v28;
    *(_DWORD *)(a5 + 131) = *(_DWORD *)((char *)v29 + 3);
    *(_DWORD *)(a5 + 128) = v13;
    a4 = v42;
    *(_QWORD *)(a5 + 320) = v41;
    *(_OWORD *)(a5 + 24) = *(_OWORD *)v27;
    *(_OWORD *)(a5 + 36) = *(_OWORD *)((char *)&v27[1] + 4);
    v14 = *(_OWORD *)&v27[7];
    *(_OWORD *)(a5 + 64) = *(_OWORD *)&v27[5];
    *(_OWORD *)(a5 + 80) = v14;
    *(_OWORD *)(a5 + 96) = *(_OWORD *)&v27[9];
    v15 = v31;
    *(_OWORD *)(a5 + 144) = v30;
    *(_OWORD *)(a5 + 160) = v15;
    v16 = v32;
    v17 = v33;
    v32 = 0u;
    *(_QWORD *)&v33 = 0;
    *(_OWORD *)(a5 + 176) = v16;
    *(_OWORD *)(a5 + 192) = v17;
    v18 = v34;
    v19 = v35;
    v34 = 0u;
    *(_QWORD *)&v35 = 0;
    *(_OWORD *)(a5 + 208) = v18;
    *(_OWORD *)(a5 + 224) = v19;
    v20 = v36;
    v21 = v37;
    v36 = 0u;
    *(_QWORD *)&v37 = 0;
    *(_OWORD *)(a5 + 240) = v20;
    *(_OWORD *)(a5 + 256) = v21;
    v22 = v38;
    v23 = v39;
    v38 = 0u;
    *(_QWORD *)&v39 = 0;
    *(_OWORD *)(a5 + 272) = v22;
    *(_OWORD *)(a5 + 288) = v23;
    v24 = v40;
    v40 = 0u;
    *(_OWORD *)(a5 + 304) = v24;
    v41 = 0;
  }
  *(_QWORD *)(a5 + 328) = a4;
  FIK::IKArray<FIK::AimSetup>::~IKArray((uint64_t *)&v40);
  *(_QWORD *)&v38 = 0;
  if ((_QWORD)v39)
    (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**((_QWORD **)&v39 + 1) + 24))(*((_QWORD *)&v39 + 1), v39, 0, 8);
  FIK::IKArray<IKString>::~IKArray((uint64_t)&v36);
  FIK::IKArray<FIK::RigBone>::~IKArray((uint64_t *)&v34);
  FIK::IKArray<FIK::GameTask>::~IKArray((uint64_t *)&v32);
  if (v25[1])
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v26 + 24))(v26, v25[0], 0, 8);
  return rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>,FIK::RapidJsonAllocator>::~GenericDocument(&v43);
}

uint64_t FIK::SerialisationJson::ReadFile(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  _QWORD v12[51];
  _QWORD v13[20];

  v13[19] = *MEMORY[0x24BDAC8D0];
  v2 = MEMORY[0x24BEDB838];
  v3 = MEMORY[0x24BEDB838] + 64;
  v4 = (_QWORD *)MEMORY[0x24BEDB7E0];
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 8);
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 16);
  v13[0] = MEMORY[0x24BEDB838] + 64;
  v11[0] = v5;
  *(_QWORD *)((char *)v11 + *(_QWORD *)(v5 - 24)) = v6;
  v11[1] = 0;
  v7 = (std::ios_base *)((char *)v11 + *(_QWORD *)(v11[0] - 24));
  std::ios_base::init(v7, v12);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  v11[0] = v2 + 24;
  v13[0] = v3;
  MEMORY[0x212BCAEAC](v12);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)v11 + *(_QWORD *)(v11[0] - 24)), *(_DWORD *)((char *)&v12[2] + *(_QWORD *)(v11[0] - 24)) | 4);
  if (v12[15])
  {
    std::getline[abi:nn180100]<char,std::char_traits<char>,FIK::FIKAllocator<char>>(v11, a1, 0);
    v8 = *(unsigned __int8 *)(a1 + 23);
    if ((v8 & 0x80u) != 0)
      v8 = *(_QWORD *)(a1 + 8);
    v9 = 2 * (v8 == 0);
  }
  else
  {
    v9 = 1;
  }
  v11[0] = *v4;
  *(_QWORD *)((char *)v11 + *(_QWORD *)(v11[0] - 24)) = v4[3];
  MEMORY[0x212BCAEB8](v12);
  std::istream::~istream();
  MEMORY[0x212BCAF90](v13);
  return v9;
}

void FIK::SerialisationJson::LoadMoCapRigFromFile(FIK *a1@<X0>, FIK::Allocator *a2@<X3>, uint64_t a3@<X8>)
{
  int File;
  unsigned __int8 *v7;
  unint64_t v8;
  unsigned __int8 *v9;
  unint64_t v10;
  uint64_t v11;
  void (***v12)(FIK::CrtAllocator *__hidden);

  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = FIK::defaultAllocator(a1);
  File = FIK::SerialisationJson::ReadFile((uint64_t)&v9);
  *(_DWORD *)a1 = File;
  if (File)
  {
    FIK::IKRig::IKRig((FIK::IKRig *)a3, a2);
    *(_QWORD *)(a3 + 176) = 0;
    *(_QWORD *)(a3 + 184) = 0;
    *(_QWORD *)(a3 + 192) = 0;
    *(_QWORD *)(a3 + 200) = a2;
    *(_QWORD *)(a3 + 208) = 0;
    *(_QWORD *)(a3 + 216) = 0;
    *(_QWORD *)(a3 + 224) = 0;
    *(_QWORD *)(a3 + 232) = a2;
    *(_QWORD *)(a3 + 240) = 0;
    *(_QWORD *)(a3 + 248) = 0;
    *(_QWORD *)(a3 + 256) = 0;
    *(_QWORD *)(a3 + 264) = a2;
    *(_QWORD *)(a3 + 272) = 0;
    *(_QWORD *)(a3 + 280) = 0;
    *(_OWORD *)(a3 + 288) = xmmword_210802BA0;
    *(_BYTE *)(a3 + 304) = 0;
    *(_DWORD *)(a3 + 308) = 1065353216;
    *(_DWORD *)(a3 + 48) = 1;
  }
  else
  {
    if (v11 >= 0)
      v7 = (unsigned __int8 *)&v9;
    else
      v7 = v9;
    if (v11 >= 0)
      v8 = HIBYTE(v11);
    else
      v8 = v10;
    FIK::SerialisationJson::LoadMoCapRigFromString((int *)a1, v7, v8, a2, a3);
  }
  if (SHIBYTE(v11) < 0)
  {
    if (v9)
      ((void (*)(void (***)(FIK::CrtAllocator *__hidden), unsigned __int8 *, _QWORD, uint64_t))(*v12)[3])(v12, v9, 0, 8);
  }
}

void FIK::SerialisationJson::LoadGameRigFromFile(FIK *a1@<X0>, FIK::Allocator *a2@<X3>, uint64_t a3@<X8>)
{
  int File;
  __n128 v7;
  unsigned __int8 *v8;
  unint64_t v9;
  unsigned __int8 *v10;
  unint64_t v11;
  uint64_t v12;
  void (***v13)(FIK::CrtAllocator *__hidden);

  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = FIK::defaultAllocator(a1);
  File = FIK::SerialisationJson::ReadFile((uint64_t)&v10);
  *(_DWORD *)a1 = File;
  if (File)
  {
    v7.n128_f64[0] = FIK::IKRig::IKRig((FIK::IKRig *)a3, a2);
    *(_QWORD *)(a3 + 176) = 0;
    *(_QWORD *)(a3 + 184) = 0;
    *(_QWORD *)(a3 + 192) = 0;
    *(_QWORD *)(a3 + 200) = a2;
    *(_QWORD *)(a3 + 208) = 0;
    *(_QWORD *)(a3 + 216) = 0;
    *(_QWORD *)(a3 + 224) = 0;
    *(_QWORD *)(a3 + 232) = a2;
    *(_QWORD *)(a3 + 240) = 0;
    *(_QWORD *)(a3 + 248) = 0;
    *(_QWORD *)(a3 + 256) = 0;
    *(_QWORD *)(a3 + 264) = a2;
    *(_QWORD *)(a3 + 272) = 0;
    *(_QWORD *)(a3 + 280) = 0;
    *(_QWORD *)(a3 + 288) = 0;
    *(_QWORD *)(a3 + 296) = a2;
    *(_QWORD *)(a3 + 304) = 0;
    *(_QWORD *)(a3 + 312) = 0;
    *(_QWORD *)(a3 + 320) = 0;
    *(_QWORD *)(a3 + 328) = a2;
    *(_DWORD *)(a3 + 48) = 2;
  }
  else
  {
    if (v12 >= 0)
      v8 = (unsigned __int8 *)&v10;
    else
      v8 = v10;
    if (v12 >= 0)
      v9 = HIBYTE(v12);
    else
      v9 = v11;
    FIK::SerialisationJson::LoadGameRigFromString((int *)a1, v8, v9, a2, a3);
  }
  if (SHIBYTE(v12) < 0)
  {
    if (v10)
      ((void (*)(void (***)(FIK::CrtAllocator *__hidden), unsigned __int8 *, _QWORD, uint64_t, __n128))(*v13)[3])(v13, v10, 0, 8, v7);
  }
}

uint64_t FIK::IKArray<IKString>::reserve(uint64_t result, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  if (*(_QWORD *)(result + 8) < a2)
  {
    v2 = (uint64_t *)result;
    v3 = *(_QWORD *)(result + 24);
    v4 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v4)
    {
      v5 = (uint64_t *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)v3 + 16))(*(_QWORD *)(result + 24), 24 * v4, 8);
      v6 = v5;
      if (24 * v4)
        bzero(v5, 24 * v4);
    }
    else
    {
      v6 = 0;
    }
    v7 = (uint64_t *)v2[2];
    v8 = *v2;
    if (*v2)
    {
      v9 = v6;
      do
      {
        v9 = IKString::IKString(v9, v7, v7[2]) + 3;
        v7 += 3;
        --v8;
      }
      while (v8);
      v7 = (uint64_t *)v2[2];
      v10 = *v2;
    }
    else
    {
      v10 = 0;
    }
    v11 = v2[3];
    v2[1] = v4;
    v2[2] = (uint64_t)v6;
    v2[3] = v3;
    result = std::destroy_n[abi:nn180100]<IKString *,unsigned long>((uint64_t)v7, v10);
    if (v7)
      return (*(uint64_t (**)(uint64_t, uint64_t *, _QWORD, uint64_t))(*(_QWORD *)v11 + 24))(v11, v7, 0, 8);
  }
  return result;
}

uint64_t FIK::SerialisationJson::WriteFile(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  _BYTE v15[408];
  _QWORD v16[20];

  v16[19] = *MEMORY[0x24BDAC8D0];
  v4 = MEMORY[0x24BEDB840];
  v5 = MEMORY[0x24BEDB840] + 64;
  v6 = (uint64_t *)MEMORY[0x24BEDB7E8];
  v7 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 8);
  v8 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 16);
  v16[0] = MEMORY[0x24BEDB840] + 64;
  v14 = v7;
  *(_QWORD *)&v15[*(_QWORD *)(v7 - 24) - 8] = v8;
  v9 = (std::ios_base *)&v15[*(_QWORD *)(v14 - 24) - 8];
  std::ios_base::init(v9, v15);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v14 = v4 + 24;
  v16[0] = v5;
  MEMORY[0x212BCAEAC](v15);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)&v15[*(_QWORD *)(v14 - 24) - 8], *(_DWORD *)&v15[*(_QWORD *)(v14 - 24) + 24] | 4);
  if ((v15[*(_QWORD *)(v14 - 24) + 24] & 5) == 0)
  {
    v10 = *(char *)(a3 + 23);
    if (v10 >= 0)
      v11 = a3;
    else
      v11 = *(_QWORD *)a3;
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(a3 + 23);
    else
      v12 = *(_QWORD *)(a3 + 8);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v14, v11, v12);
    if (!std::filebuf::close())
      std::ios_base::clear((std::ios_base *)&v15[*(_QWORD *)(v14 - 24) - 8], *(_DWORD *)&v15[*(_QWORD *)(v14 - 24) + 24] | 4);
  }
  v14 = *v6;
  *(_QWORD *)&v15[*(_QWORD *)(v14 - 24) - 8] = v6[3];
  MEMORY[0x212BCAEB8](v15);
  std::ostream::~ostream();
  return MEMORY[0x212BCAF90](v16);
}

uint64_t FIK::SerialisationJson::SaveMoCapRig(uint64_t a1, const char *a2, int a3)
{
  size_t v5;
  uint64_t result;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  __int128 __dst;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  char v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  JSONS::JSONfromMoCapRig(a1, &v16);
  if (a3)
  {
    v12 = v18;
    if (SHIBYTE(v17) < 0)
    {
      std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::__init_copy_ctor_external((_QWORD **)&__dst, (void *)v16, *((unint64_t *)&v16 + 1));
    }
    else
    {
      __dst = v16;
      v11 = v17;
    }
    JSONS::PrettyPrint((uint64_t)&__dst, &v13);
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::operator=[abi:nn180100]((void **)&v16, &v13);
    if (v14 < 0 && (_QWORD)v13)
      (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v15 + 24))(v15, v13, 0, 8);
    if (SHIBYTE(v11) < 0 && (_QWORD)__dst)
      (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v12 + 24))(v12, __dst, 0, 8);
  }
  v5 = strlen(a2);
  v9 = v18;
  if (SHIBYTE(v17) < 0)
  {
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::__init_copy_ctor_external((_QWORD **)&v7, (void *)v16, *((unint64_t *)&v16 + 1));
  }
  else
  {
    v7 = v16;
    v8 = v17;
  }
  result = FIK::SerialisationJson::WriteFile((uint64_t)a2, v5, (uint64_t)&v7);
  if (SHIBYTE(v8) < 0 && (_QWORD)v7)
    result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v9 + 24))(v9, v7, 0, 8);
  if (SHIBYTE(v17) < 0)
  {
    if ((_QWORD)v16)
      return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v18 + 24))(v18, v16, 0, 8);
  }
  return result;
}

uint64_t FIK::SerialisationJson::SaveGameRig(FIK *a1, const char *a2, int a3)
{
  size_t v5;
  uint64_t result;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  __int128 __dst;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  char v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  JSONS::JSONfromGameRig(a1, &v16);
  if (a3)
  {
    v12 = v18;
    if (SHIBYTE(v17) < 0)
    {
      std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::__init_copy_ctor_external((_QWORD **)&__dst, (void *)v16, *((unint64_t *)&v16 + 1));
    }
    else
    {
      __dst = v16;
      v11 = v17;
    }
    JSONS::PrettyPrint((uint64_t)&__dst, &v13);
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::operator=[abi:nn180100]((void **)&v16, &v13);
    if (v14 < 0 && (_QWORD)v13)
      (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v15 + 24))(v15, v13, 0, 8);
    if (SHIBYTE(v11) < 0 && (_QWORD)__dst)
      (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v12 + 24))(v12, __dst, 0, 8);
  }
  v5 = strlen(a2);
  v9 = v18;
  if (SHIBYTE(v17) < 0)
  {
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::__init_copy_ctor_external((_QWORD **)&v7, (void *)v16, *((unint64_t *)&v16 + 1));
  }
  else
  {
    v7 = v16;
    v8 = v17;
  }
  result = FIK::SerialisationJson::WriteFile((uint64_t)a2, v5, (uint64_t)&v7);
  if (SHIBYTE(v8) < 0 && (_QWORD)v7)
    result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v9 + 24))(v9, v7, 0, 8);
  if (SHIBYTE(v17) < 0)
  {
    if ((_QWORD)v16)
      return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v18 + 24))(v18, v16, 0, 8);
  }
  return result;
}

void FIK::SerialisationJson::GetMoCapRigJson(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  FIK *v5;
  char *v6;
  void (***v7)(FIK::CrtAllocator *__hidden);
  IKString *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  char v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  v5 = (FIK *)JSONS::JSONfromMoCapRig(a1, &v15);
  if (a2)
  {
    v11 = v17;
    if (SHIBYTE(v16) < 0)
    {
      std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::__init_copy_ctor_external((_QWORD **)&v9, (void *)v15, *((unint64_t *)&v15 + 1));
    }
    else
    {
      v9 = v15;
      v10 = v16;
    }
    JSONS::PrettyPrint((uint64_t)&v9, &v12);
    v5 = (FIK *)std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::operator=[abi:nn180100]((void **)&v15, &v12);
    if (v13 < 0 && (_QWORD)v12)
      v5 = (FIK *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v14 + 24))(v14, v12, 0, 8);
    if (SHIBYTE(v10) < 0 && (_QWORD)v9)
      v5 = (FIK *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v11 + 24))(v11, v9, 0, 8);
  }
  if (v16 >= 0)
    v6 = (char *)&v15;
  else
    v6 = (char *)v15;
  v7 = FIK::defaultAllocator(v5);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = v7;
  v8 = (IKString *)strlen(v6);
  IKString::assign(a3, v6, v8);
  if (SHIBYTE(v16) < 0)
  {
    if ((_QWORD)v15)
      (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v17 + 24))(v17, v15, 0, 8);
  }
}

void FIK::SerialisationJson::GetGameRigJson(FIK *a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  FIK *v5;
  char *v6;
  void (***v7)(FIK::CrtAllocator *__hidden);
  IKString *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  char v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  v5 = (FIK *)JSONS::JSONfromGameRig(a1, &v15);
  if (a2)
  {
    v11 = v17;
    if (SHIBYTE(v16) < 0)
    {
      std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::__init_copy_ctor_external((_QWORD **)&v9, (void *)v15, *((unint64_t *)&v15 + 1));
    }
    else
    {
      v9 = v15;
      v10 = v16;
    }
    JSONS::PrettyPrint((uint64_t)&v9, &v12);
    v5 = (FIK *)std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::operator=[abi:nn180100]((void **)&v15, &v12);
    if (v13 < 0 && (_QWORD)v12)
      v5 = (FIK *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v14 + 24))(v14, v12, 0, 8);
    if (SHIBYTE(v10) < 0 && (_QWORD)v9)
      v5 = (FIK *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v11 + 24))(v11, v9, 0, 8);
  }
  if (v16 >= 0)
    v6 = (char *)&v15;
  else
    v6 = (char *)v15;
  v7 = FIK::defaultAllocator(v5);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = v7;
  v8 = (IKString *)strlen(v6);
  IKString::assign(a3, v6, v8);
  if (SHIBYTE(v16) < 0)
  {
    if ((_QWORD)v15)
      (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v17 + 24))(v17, v15, 0, 8);
  }
}

_QWORD *std::getline[abi:nn180100]<char,std::char_traits<char>,FIK::FIKAllocator<char>>(_QWORD *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  int v9;
  char v11;

  MEMORY[0x212BCAEC4](&v11, a1, 1);
  if (!v11)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v6 = 0;
  while (1)
  {
    v7 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v8 = (_BYTE *)v7[3];
    if (v8 != (_BYTE *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(_QWORD *))(*v7 + 80))(v7);
    if ((_DWORD)v7 == -1)
      break;
LABEL_9:
    if (v7 == a3)
    {
      v9 = 0;
      goto LABEL_17;
    }
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::push_back((_QWORD *)a2, (char)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(_QWORD *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6)
    v9 = 2;
  else
    v9 = 6;
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v9);
  return a1;
}

unsigned int *FIK::IKRigUtils::updateParentIndices<FIK::MoCapBone>(unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  size_t v5;
  void *v6;

  if (*(_QWORD *)result)
  {
    v1 = result;
    v2 = 0;
    v3 = *((_QWORD *)result + 2);
    v4 = 1;
    do
    {
      v5 = *(_QWORD *)(v3 + 544 * v2 + 40);
      if (v5)
        v6 = *(void **)(v3 + 544 * v2 + 32);
      else
        v6 = &unk_2108059BE;
      result = (unsigned int *)FIK::IKRigUtils::getBoneIndex<FIK::MoCapBone,void>(v6, v5, v1);
      v3 = *((_QWORD *)v1 + 2);
      *(_DWORD *)(v3 + 544 * v2 + 4) = (_DWORD)result;
      v2 = v4;
    }
    while (*(_QWORD *)v1 > (unint64_t)v4++);
  }
  return result;
}

unsigned int *FIK::IKRigUtils::updateParentIndices<FIK::RigBoneBase>(unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  size_t v5;
  void *v6;

  if (*(_QWORD *)result)
  {
    v1 = result;
    v2 = 0;
    v3 = *((_QWORD *)result + 2);
    v4 = 1;
    do
    {
      v5 = *(_QWORD *)(v3 + 96 * v2 + 40);
      if (v5)
        v6 = *(void **)(v3 + 96 * v2 + 32);
      else
        v6 = &unk_2108059BE;
      result = (unsigned int *)FIK::IKRigUtils::getBoneIndex<FIK::RigBoneBase,void>(v6, v5, v1);
      v3 = *((_QWORD *)v1 + 2);
      *(_DWORD *)(v3 + 96 * v2 + 4) = (_DWORD)result;
      v2 = v4;
    }
    while (*(_QWORD *)v1 > (unint64_t)v4++);
  }
  return result;
}

unint64_t *FIK::IKRigUtils::updateTargetIndices<FIK::MoCapTask,FIK::MoCapBone>(unint64_t *result, unsigned int *a2)
{
  unint64_t v2;
  unint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  size_t v9;
  void *v10;

  v2 = *result;
  if (*result)
  {
    v4 = result;
    v5 = 0;
    v6 = result[2];
    v7 = 1;
    do
    {
      v8 = v6 + (v5 << 8);
      if ((*(_DWORD *)(v8 + 48) & 0x80000000) != 0)
      {
        v9 = *(_QWORD *)(v8 + 32);
        if (v9)
          v10 = *(void **)(v8 + 24);
        else
          v10 = &unk_2108059BE;
        result = (unint64_t *)FIK::IKRigUtils::getBoneIndex<FIK::MoCapBone,void>(v10, v9, a2);
        v6 = v4[2];
        *(_DWORD *)(v6 + (v5 << 8) + 48) = (_DWORD)result;
        v2 = *v4;
      }
      v5 = v7;
    }
    while (v2 > v7++);
  }
  return result;
}

uint64_t FIK::IKRigUtils::updateSourceIndices(_QWORD *a1, _QWORD *a2, unsigned int *a3)
{
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  void *v9;
  _DWORD *v10;
  uint64_t v11;
  size_t v12;
  void *v13;
  int v14;
  int v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _DWORD *i;
  NSObject *v20;
  _BOOL4 v21;
  uint64_t result;
  void *v23;
  NSObject *v24;
  int v25;
  int v26;
  const char *v27;
  __int16 v28;
  void *v29;
  __int16 v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (*a1)
  {
    v6 = a1[2] + 256;
    v7 = 544 * *a1;
    do
    {
      v8 = *(_QWORD *)(v6 + 8);
      if (v8)
        v9 = *(void **)v6;
      else
        v9 = &unk_2108059BE;
      *(_DWORD *)(v6 + 24) = FIK::IKRigUtils::getBoneIndex<FIK::RigBoneBase,void>(v9, v8, a3);
      v6 += 544;
      v7 -= 544;
    }
    while (v7);
  }
  if (*a2)
  {
    v10 = (_DWORD *)(a2[2] + 200);
    v11 = *a2 << 8;
    do
    {
      v12 = *((_QWORD *)v10 - 2);
      if (v12)
        v13 = (void *)*((_QWORD *)v10 - 3);
      else
        v13 = &unk_2108059BE;
      v14 = FIK::IKRigUtils::getBoneIndex<FIK::RigBoneBase,void>(v13, v12, a3);
      *v10 = v14;
      if (v14 == -1)
      {
        v15 = *(v10 - 38);
        if (v15 == -1)
        {
          v16 = ikinemaLogObject();
          ikinemaAssertHandler(*v16, 0, (uint64_t)"updateSourceIndices", "(task.target_index_ != kInvalidRigIndex) Task without target index detected, you need to call updateTargetIndices first");
          v15 = *(v10 - 38);
        }
        if (*a1 < (unint64_t)v15)
        {
          v17 = ikinemaLogObject();
          ikinemaAssertHandler(*v17, 0, (uint64_t)"updateSourceIndices", "(static_cast<size_t>(task.target_index_) <= bones.size()) Task with invalid target bone");
          v15 = *(v10 - 38);
        }
        if (v15 == -1)
        {
          v20 = *ikinemaLogObject();
          v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
          result = 0;
          if (v21)
          {
            if (*((_QWORD *)v10 - 24))
              v23 = (void *)*((_QWORD *)v10 - 25);
            else
              v23 = &unk_2108059BE;
            v25 = *(v10 - 38);
            v26 = 136315650;
            v27 = "updateSourceIndices";
            v28 = 2080;
            v29 = v23;
            v30 = 1024;
            v31 = v25;
            _os_log_impl(&dword_21078E000, v20, OS_LOG_TYPE_DEFAULT, "%s: Task %s contains invalid target index: %d\n", (uint8_t *)&v26, 0x1Cu);
            return 0;
          }
          return result;
        }
        *v10 = *(_DWORD *)(a1[2] + 544 * v15 + 280);
      }
      v10 += 64;
      v11 -= 256;
    }
    while (v11);
    if (*a2)
    {
      v18 = *a2 << 8;
      for (i = (_DWORD *)(a2[2] + 200); *i != -1; i += 64)
      {
        v18 -= 256;
        if (!v18)
          return 1;
      }
      v24 = ikinemaLogObject()[2];
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        FIK::IKRigUtils::updateSourceIndices(v24);
    }
  }
  return 1;
}

unsigned int *FIK::IKRigUtils::updateParentIndices<FIK::RigBone>(unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  size_t v6;
  void *v7;

  if (*(_QWORD *)result)
  {
    v1 = result;
    v2 = 0;
    v3 = *((_QWORD *)result + 2);
    v4 = 1;
    do
    {
      v5 = v3 + (v2 << 8);
      v6 = *(_QWORD *)(v5 + 40);
      if (v6)
        v7 = *(void **)(v5 + 32);
      else
        v7 = &unk_2108059BE;
      result = (unsigned int *)FIK::IKRigUtils::getBoneIndex<FIK::RigBone,void>(v7, v6, v1);
      v3 = *((_QWORD *)v1 + 2);
      *(_DWORD *)(v3 + (v2 << 8) + 4) = (_DWORD)result;
      v2 = v4;
    }
    while (*(_QWORD *)v1 > (unint64_t)v4++);
  }
  return result;
}

unint64_t *FIK::IKRigUtils::updateTargetIndices<FIK::GameTask,FIK::RigBone>(unint64_t *result, unsigned int *a2)
{
  unint64_t v2;
  unint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  size_t v9;
  void *v10;

  v2 = *result;
  if (*result)
  {
    v4 = result;
    v5 = 0;
    v6 = result[2];
    v7 = 1;
    do
    {
      v8 = v6 + 240 * v5;
      if ((*(_DWORD *)(v8 + 48) & 0x80000000) != 0)
      {
        v9 = *(_QWORD *)(v8 + 32);
        if (v9)
          v10 = *(void **)(v8 + 24);
        else
          v10 = &unk_2108059BE;
        result = (unint64_t *)FIK::IKRigUtils::getBoneIndex<FIK::RigBone,void>(v10, v9, a2);
        v6 = v4[2];
        *(_DWORD *)(v6 + 240 * v5 + 48) = (_DWORD)result;
        v2 = *v4;
      }
      v5 = v7;
    }
    while (v2 > v7++);
  }
  return result;
}

void FIK::IKArray<IKString>::push_back<IKString&,void>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  IKString *v6;
  char *v7;

  FIK::IKArray<IKString>::reserve((uint64_t)a1, *a1 + 1);
  v4 = a1[3];
  v5 = (_QWORD *)(a1[2] + 24 * *a1);
  *v5 = 0;
  v5[1] = 0;
  v5[2] = v4;
  v6 = *(IKString **)(a2 + 8);
  if (v6)
    v7 = *(char **)a2;
  else
    v7 = (char *)&unk_2108059BE;
  IKString::assign(v5, v7, v6);
  ++*a1;
}

uint64_t rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy(uint64_t a1)
{
  uint64_t result;

  free(*(void **)(a1 + 16));
  result = *(_QWORD *)(a1 + 8);
  if (result)
    JUMPOUT(0x212BCAFB4);
  return result;
}

FIK::MoCapBone *FIK::MoCapBone::MoCapBone(FIK::MoCapBone *this, FIK::Allocator *a2)
{
  uint64_t v4;

  FIK::RigBone::RigBone(this, a2);
  *(_QWORD *)(v4 + 256) = 0;
  *(_QWORD *)(v4 + 264) = 0;
  *(_QWORD *)(v4 + 272) = a2;
  *(_DWORD *)(v4 + 280) = -1;
  *(_QWORD *)(v4 + 288) = 0;
  *(_QWORD *)(v4 + 296) = 0;
  *(_OWORD *)(v4 + 304) = xmmword_210802BA0;
  *(_QWORD *)(v4 + 320) = 0;
  *(_QWORD *)(v4 + 328) = 0;
  *(_OWORD *)(v4 + 336) = xmmword_210802BA0;
  FIK::ACPBone::ACPBone((FIK::ACPBone *)(v4 + 352), a2);
  return this;
}

double FIK::RigBone::RigBone(FIK::RigBone *this, FIK::Allocator *a2)
{
  double result;

  *(_QWORD *)this = -1;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = a2;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = a2;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_OWORD *)this + 5) = xmmword_210802BA0;
  *((_DWORD *)this + 24) = 16843009;
  *((_BYTE *)this + 100) = 1;
  *(_QWORD *)((char *)this + 101) = 0;
  *((_OWORD *)this + 7) = xmmword_210804100;
  *((_QWORD *)this + 16) = 0x3F80000000000000;
  *((_OWORD *)this + 9) = xmmword_2108040F0;
  *((_OWORD *)this + 10) = xmmword_2108040F0;
  *((_OWORD *)this + 11) = xmmword_210804110;
  *((int32x2_t *)this + 24) = vdup_n_s32(0x43B40000u);
  *((_DWORD *)this + 50) = 1135869952;
  *((_DWORD *)this + 63) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 236) = 0u;
  *(_OWORD *)((char *)this + 220) = 0u;
  *(_OWORD *)((char *)this + 204) = 0u;
  return result;
}

double FIK::ACPBone::ACPBone(FIK::ACPBone *this, FIK::Allocator *a2)
{
  double result;

  *(_WORD *)this = 0;
  *((_BYTE *)this + 2) = 0;
  *((_DWORD *)this + 1) = 0;
  *((_WORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 3) = 0;
  *((_BYTE *)this + 32) = 0;
  *((_DWORD *)this + 9) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = a2;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_OWORD *)this + 7) = xmmword_210802BA0;
  *((_QWORD *)this + 16) = 0x3DCCCCCD00000000;
  *((_OWORD *)this + 9) = xmmword_2108040D0;
  *((_OWORD *)this + 10) = xmmword_2108040D0;
  result = NAN;
  *((_QWORD *)this + 22) = -1;
  *((_QWORD *)this + 23) = 0x4000000040000000;
  return result;
}

double FIK::RigTask::RigTask(FIK::RigTask *this, FIK::Allocator *a2)
{
  double result;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = a2;
  *((_DWORD *)this + 12) = -1;
  *((_WORD *)this + 26) = 257;
  *((_BYTE *)this + 54) = 0;
  *(_DWORD *)((char *)this + 55) = 16843009;
  *(_WORD *)((char *)this + 59) = 257;
  *((_QWORD *)this + 8) = -1;
  *((_OWORD *)this + 5) = xmmword_210804120;
  *((_OWORD *)this + 6) = xmmword_210804130;
  *((_OWORD *)this + 7) = xmmword_2108040E0;
  result = 2.00000048;
  *((_QWORD *)this + 16) = 0x4000000040000000;
  *((_DWORD *)this + 34) = 0x40000000;
  *(_QWORD *)((char *)this + 148) = 0;
  *(_QWORD *)((char *)this + 140) = 0;
  *((_BYTE *)this + 164) = 0;
  *(_QWORD *)((char *)this + 156) = 0;
  *((_QWORD *)this + 21) = 5;
  return result;
}

void `virtual thunk to'std::basic_ostringstream<char,std::char_traits<char>,FIK::FIKAllocator<char>>::~basic_ostringstream(_QWORD *a1)
{
  char *v1;
  uint64_t v2;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = off_24CA6CA88;
  *((_QWORD *)v1 + 15) = off_24CA6CAB0;
  *((_QWORD *)v1 + 1) = off_24CA6CA00;
  if (v1[95] < 0)
  {
    v2 = *((_QWORD *)v1 + 9);
    if (v2)
      (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)v1 + 12) + 24))(*((_QWORD *)v1 + 12), v2, 0, 8);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  JUMPOUT(0x212BCAF90);
}

{
  char *v1;
  uint64_t v2;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = off_24CA6CA88;
  *((_QWORD *)v1 + 15) = off_24CA6CAB0;
  *((_QWORD *)v1 + 1) = off_24CA6CA00;
  if (v1[95] < 0)
  {
    v2 = *((_QWORD *)v1 + 9);
    if (v2)
      (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)v1 + 12) + 24))(*((_QWORD *)v1 + 12), v2, 0, 8);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x212BCAF90](v1 + 120);
  JUMPOUT(0x212BCAFB4);
}

void std::basic_ostringstream<char,std::char_traits<char>,FIK::FIKAllocator<char>>::~basic_ostringstream(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)a1 = off_24CA6CA88;
  *(_QWORD *)(a1 + 120) = off_24CA6CAB0;
  v1 = a1 + 120;
  *(_QWORD *)(a1 + 8) = off_24CA6CA00;
  if (*(char *)(a1 + 95) < 0)
  {
    v2 = *(_QWORD *)(a1 + 72);
    if (v2)
      (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)(a1 + 96) + 24))(*(_QWORD *)(a1 + 96), v2, 0, 8);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x212BCAF90](v1);
  JUMPOUT(0x212BCAFB4);
}

uint64_t std::basic_stringbuf<char,std::char_traits<char>,FIK::FIKAllocator<char>>::~basic_stringbuf(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)a1 = off_24CA6CA00;
  if (*(char *)(a1 + 87) < 0)
  {
    v1 = *(_QWORD *)(a1 + 64);
    if (v1)
      (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)(a1 + 88) + 24))(*(_QWORD *)(a1 + 88), v1, 0, 8);
  }
  return std::streambuf::~streambuf();
}

void std::basic_stringbuf<char,std::char_traits<char>,FIK::FIKAllocator<char>>::~basic_stringbuf(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)a1 = off_24CA6CA00;
  if (*(char *)(a1 + 87) < 0)
  {
    v1 = *(_QWORD *)(a1 + 64);
    if (v1)
      (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)(a1 + 88) + 24))(*(_QWORD *)(a1 + 88), v1, 0, 8);
  }
  std::streambuf::~streambuf();
  JUMPOUT(0x212BCAFB4);
}

double std::basic_stringbuf<char,std::char_traits<char>,FIK::FIKAllocator<char>>::seekoff@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;
  uint64_t v12;

  v5 = *(_QWORD *)(a1 + 96);
  v6 = *(_QWORD *)(a1 + 48);
  if (v5 < v6)
  {
    *(_QWORD *)(a1 + 96) = v6;
    v5 = v6;
  }
  if ((a4 & 0x18) == 0 || a3 == 1 && (a4 & 0x18) == 0x18)
    goto LABEL_14;
  if (v5)
  {
    v7 = (_QWORD *)(a1 + 64);
    if (*(char *)(a1 + 87) < 0)
      v7 = (_QWORD *)*v7;
    v8 = v5 - (_QWORD)v7;
    if (a3)
      goto LABEL_10;
LABEL_17:
    v9 = a3;
    goto LABEL_20;
  }
  v8 = 0;
  if (!a3)
    goto LABEL_17;
LABEL_10:
  if (a3 != 2)
  {
    if (a3 == 1)
    {
      if ((a4 & 8) != 0)
        v9 = *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16);
      else
        v9 = v6 - *(_QWORD *)(a1 + 40);
      goto LABEL_20;
    }
LABEL_14:
    v10 = -1;
    goto LABEL_15;
  }
  v9 = v8;
LABEL_20:
  v10 = -1;
  v12 = v9 + a2;
  if (v12 >= 0 && v8 >= v12 && (!v12 || ((a4 & 8) == 0 || *(_QWORD *)(a1 + 24)) && ((a4 & 0x10) == 0 || v6)))
  {
    if ((a4 & 8) != 0)
    {
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a1 + 16) + v12;
      *(_QWORD *)(a1 + 32) = v5;
    }
    if ((a4 & 0x10) != 0)
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 40) + v12;
    v10 = v12;
  }
LABEL_15:
  result = 0.0;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_QWORD *)(a5 + 128) = v10;
  return result;
}

uint64_t std::basic_stringbuf<char,std::char_traits<char>,FIK::FIKAllocator<char>>::seekpos(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a1 + 32))(a1, *(_QWORD *)(a2 + 128), 0, a3);
}

uint64_t std::basic_stringbuf<char,std::char_traits<char>,FIK::FIKAllocator<char>>::underflow(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;

  v1 = *(_QWORD *)(a1 + 96);
  v2 = *(_QWORD *)(a1 + 48);
  if (v1 < v2)
  {
    *(_QWORD *)(a1 + 96) = v2;
    v1 = v2;
  }
  if ((*(_BYTE *)(a1 + 104) & 8) == 0)
    return 0xFFFFFFFFLL;
  v3 = *(_QWORD *)(a1 + 32);
  if (v3 < v1)
  {
    *(_QWORD *)(a1 + 32) = v1;
    v3 = v1;
  }
  v4 = *(unsigned __int8 **)(a1 + 24);
  if ((unint64_t)v4 < v3)
    return *v4;
  else
    return 0xFFFFFFFFLL;
}

uint64_t std::basic_stringbuf<char,std::char_traits<char>,FIK::FIKAllocator<char>>::pbackfail(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a1 + 96);
  v3 = *(_QWORD *)(a1 + 48);
  if (v2 < v3)
  {
    *(_QWORD *)(a1 + 96) = v3;
    v2 = v3;
  }
  v4 = *(_QWORD *)(a1 + 24);
  if (*(_QWORD *)(a1 + 16) >= v4)
    return 0xFFFFFFFFLL;
  if ((_DWORD)a2 == -1)
  {
    a2 = 0;
    *(_QWORD *)(a1 + 24) = v4 - 1;
    *(_QWORD *)(a1 + 32) = v2;
    return a2;
  }
  if ((*(_BYTE *)(a1 + 104) & 0x10) == 0 && *(unsigned __int8 *)(v4 - 1) != a2)
    return 0xFFFFFFFFLL;
  *(_QWORD *)(a1 + 24) = v4 - 1;
  *(_QWORD *)(a1 + 32) = v2;
  *(_BYTE *)(v4 - 1) = a2;
  return a2;
}

uint64_t std::basic_stringbuf<char,std::char_traits<char>,FIK::FIKAllocator<char>>::overflow(uint64_t a1, int a2)
{
  unsigned __int8 v2;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  if (a2 == -1)
    return 0;
  v2 = a2;
  v5 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v7 = *(unsigned __int8 **)(a1 + 48);
  v6 = *(unsigned __int8 **)(a1 + 56);
  if (v7 == v6)
  {
    if ((*(_BYTE *)(a1 + 104) & 0x10) == 0)
      return 0xFFFFFFFFLL;
    v10 = *(_QWORD *)(a1 + 40);
    v11 = *(_QWORD *)(a1 + 96);
    v12 = a1 + 64;
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::push_back((_QWORD *)(a1 + 64), 0);
    if (*(char *)(a1 + 87) < 0)
      v13 = (*(_QWORD *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1;
    else
      v13 = 22;
    v14 = &v7[-v10];
    v15 = v11 - v10;
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::resize((_QWORD *)(a1 + 64), v13, 0);
    if (*(char *)(a1 + 87) < 0)
    {
      v12 = *(_QWORD *)(a1 + 64);
      v16 = *(_QWORD *)(a1 + 72);
    }
    else
    {
      v16 = *(unsigned __int8 *)(a1 + 87);
    }
    v6 = (unsigned __int8 *)(v12 + v16);
    v7 = &v14[v12];
    *(_QWORD *)(a1 + 40) = v12;
    *(_QWORD *)(a1 + 48) = v7;
    *(_QWORD *)(a1 + 56) = v6;
    v8 = v12 + v15;
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 96);
  }
  if ((unint64_t)(v7 + 1) >= v8)
    v8 = (unint64_t)(v7 + 1);
  *(_QWORD *)(a1 + 96) = v8;
  if ((*(_BYTE *)(a1 + 104) & 8) != 0)
  {
    v17 = (_QWORD *)(a1 + 64);
    if (*(char *)(a1 + 87) < 0)
      v17 = (_QWORD *)*v17;
    *(_QWORD *)(a1 + 16) = v17;
    *(_QWORD *)(a1 + 24) = (char *)v17 + v4 - v5;
    *(_QWORD *)(a1 + 32) = v8;
  }
  if (v7 == v6)
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 104))(a1, v2);
  *(_QWORD *)(a1 + 48) = v7 + 1;
  *v7 = v2;
  return v2;
}

_QWORD *std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::push_back(_QWORD *__src, char a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;

  v3 = __src;
  if ((*((char *)__src + 23) & 0x80000000) == 0)
  {
    if (*((_BYTE *)__src + 23) != 22)
    {
      v5 = *((unsigned __int8 *)__src + 23);
      *((_BYTE *)__src + 23) = (*((_BYTE *)__src + 23) + 1) & 0x7F;
      goto LABEL_8;
    }
    v4 = 22;
    goto LABEL_5;
  }
  v5 = __src[1];
  v4 = (__src[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v5 == v4)
  {
LABEL_5:
    __src = std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::__grow_by(__src, v4, 1uLL, v4, v4, 0, 0);
    v5 = v4;
  }
  v3[1] = v5 + 1;
  v3 = (_QWORD *)*v3;
LABEL_8:
  v6 = (char *)v3 + v5;
  *v6 = a2;
  v6[1] = 0;
  return __src;
}

_QWORD *std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::__grow_by(_QWORD *__src, unint64_t a2, unint64_t a3, uint64_t a4, size_t __len, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v13;
  char *v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;

  v7 = 0x7FFFFFFFFFFFFFF7;
  if (0x7FFFFFFFFFFFFFF7 - a2 < a3)
    abort();
  v13 = __src;
  v14 = (char *)__src;
  if (*((char *)__src + 23) < 0)
    v14 = (char *)*__src;
  if (a2 >= 0x3FFFFFFFFFFFFFF3)
  {
    v16 = __src + 3;
    goto LABEL_15;
  }
  v15 = a3 + a2;
  if (a3 + a2 <= 2 * a2)
    v15 = 2 * a2;
  if (v15 <= 0x16)
  {
    v16 = __src + 3;
    v7 = 23;
    goto LABEL_15;
  }
  v17 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
  v18 = v15 | 7;
  if (v18 == 23)
    v18 = v17;
  v16 = __src + 3;
  v7 = v18 + 1;
  if (v18 != -1)
  {
LABEL_15:
    __src = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v16 + 16))(*v16, v7, 128);
    v19 = (char *)__src;
    if (!__len)
      goto LABEL_17;
    goto LABEL_16;
  }
  v7 = 0;
  v19 = 0;
  if (__len)
LABEL_16:
    __src = memmove(v19, v14, __len);
LABEL_17:
  if (a4 != a6 + __len)
    __src = memmove(&v19[__len + a7], &v14[__len + a6], a4 - (a6 + __len));
  if (a2 != 22 && v14)
    __src = (_QWORD *)(*(uint64_t (**)(_QWORD, char *, _QWORD, uint64_t))(*(_QWORD *)*v16 + 24))(*v16, v14, 0, 8);
  *v13 = v19;
  v13[2] = v7 | 0x8000000000000000;
  return __src;
}

_QWORD *std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::resize(_QWORD *result, unint64_t a2, int a3)
{
  unint64_t v3;

  if (*((char *)result + 23) < 0)
  {
    v3 = result[1];
    if (v3 >= a2)
    {
      result[1] = a2;
      result = (_QWORD *)*result;
      goto LABEL_7;
    }
    return std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(result, a2 - v3, a3);
  }
  v3 = *((unsigned __int8 *)result + 23);
  if (v3 < a2)
    return std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(result, a2 - v3, a3);
  *((_BYTE *)result + 23) = a2 & 0x7F;
LABEL_7:
  *((_BYTE *)result + a2) = 0;
  return result;
}

_QWORD *std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(_QWORD *__src, size_t __len, int __c)
{
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  size_t v11;

  if (__len)
  {
    LODWORD(v6) = *((char *)__src + 23);
    if ((v6 & 0x80000000) != 0)
    {
      v7 = __src[1];
      v9 = __src[2];
      v8 = (v9 & 0x7FFFFFFFFFFFFFFFLL) - 1;
      v6 = HIBYTE(v9);
    }
    else
    {
      v7 = *((unsigned __int8 *)__src + 23);
      v8 = 22;
    }
    if (v8 - v7 < __len)
    {
      std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::__grow_by(__src, v8, __len - v8 + v7, v7, v7, 0, 0);
      __src[1] = v7;
      LOBYTE(v6) = *((_BYTE *)__src + 23);
    }
    v10 = __src;
    if ((v6 & 0x80) != 0)
      v10 = (_QWORD *)*__src;
    memset((char *)v10 + v7, __c, __len);
    v11 = v7 + __len;
    if (*((char *)__src + 23) < 0)
      __src[1] = v11;
    else
      *((_BYTE *)__src + 23) = v11 & 0x7F;
    *((_BYTE *)v10 + v11) = 0;
  }
  return __src;
}

double FIK::IKRig::IKRig(FIK::IKRig *this, FIK::Allocator *a2)
{
  double result;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = a2;
  *((_DWORD *)this + 6) = 1065353216;
  *(_OWORD *)((char *)this + 28) = xmmword_210804140;
  *((_BYTE *)this + 44) = 1;
  *((_DWORD *)this + 12) = 0;
  *((_QWORD *)this + 8) = 0x3727C5AC3E4CCCCDLL;
  *((_QWORD *)this + 9) = 0x1E3F800000;
  *((_QWORD *)this + 10) = 0x3F80000040800000;
  *((_WORD *)this + 44) = 1;
  *((_BYTE *)this + 90) = 0;
  *(_QWORD *)((char *)this + 100) = 0;
  *(_QWORD *)((char *)this + 92) = 0;
  *(_QWORD *)((char *)this + 108) = 0x3F80000000000000;
  *((_WORD *)this + 58) = 0;
  *((_DWORD *)this + 30) = 1117782016;
  *((_DWORD *)this + 32) = 1;
  *((_WORD *)this + 66) = 257;
  *((_BYTE *)this + 134) = 1;
  result = 524288.127;
  *((_OWORD *)this + 9) = xmmword_2108040D0;
  *((_OWORD *)this + 10) = xmmword_2108040E0;
  return result;
}

uint64_t FIK::IKRigUtils::getBoneIndex<FIK::RigBoneBase,void>(void *__s2, size_t __n, unsigned int *a3)
{
  uint64_t v3;
  uint64_t v6;
  _QWORD *i;
  const void *v8;

  if (!__n)
    return 0xFFFFFFFFLL;
  v3 = *a3;
  if (!*a3)
    return 0xFFFFFFFFLL;
  v6 = 0;
  for (i = (_QWORD *)(*((_QWORD *)a3 + 2) + 16); ; i += 12)
  {
    v8 = *i ? (const void *)*(i - 1) : &unk_2108059BE;
    if (*i == __n && !memcmp(v8, __s2, __n))
      break;
    if (v3 == ++v6)
      return 0xFFFFFFFFLL;
  }
  return v6;
}

uint64_t FIK::IKArray<IKString>::~IKArray(uint64_t a1)
{
  uint64_t v2;

  std::destroy_n[abi:nn180100]<IKString *,unsigned long>(*(_QWORD *)(a1 + 16), *(_QWORD *)a1);
  *(_QWORD *)a1 = 0;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24), v2, 0, 8);
  return a1;
}

uint64_t FIK::IKArray<FIK::Item>::~IKArray(uint64_t a1)
{
  uint64_t v2;

  std::destroy_n[abi:nn180100]<FIK::Item *,unsigned long>(*(_QWORD *)(a1 + 16), *(_QWORD *)a1);
  *(_QWORD *)a1 = 0;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24), v2, 0, 8);
  return a1;
}

uint64_t std::destroy_n[abi:nn180100]<FIK::Item *,unsigned long>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (a2)
  {
    v3 = a2;
    do
    {
      if (*(_QWORD *)(a1 + 16))
      {
        (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 8), 0, 8);
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
      }
      a1 += 32;
      --v3;
    }
    while (v3);
  }
  return a1;
}

uint64_t *FIK::IKArray<FIK::AimSetup>::~IKArray(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[2];
    do
    {
      std::__destroy_at[abi:nn180100]<FIK::AimSetup,0>(v3);
      v3 += 128;
      --v2;
    }
    while (v2);
  }
  *a1 = 0;
  v4 = a1[2];
  if (v4)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1[3] + 24))(a1[3], v4, 0, 8);
  return a1;
}

uint64_t std::__destroy_at[abi:nn180100]<FIK::AimSetup,0>(uint64_t a1)
{
  uint64_t result;

  FIK::IKArray<FIK::Item>::~IKArray(a1 + 88);
  result = FIK::IKArray<FIK::Item>::~IKArray(a1 + 56);
  if (*(_QWORD *)(a1 + 40))
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 24))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 32), 0, 8);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
  }
  if (*(_QWORD *)(a1 + 8))
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16), *(_QWORD *)a1, 0, 8);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
  return result;
}

uint64_t *FIK::IKArray<FIK::MoCapTask>::~IKArray(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[2];
    do
    {
      std::__destroy_at[abi:nn180100]<FIK::MoCapTask,0>(v3);
      v3 += 256;
      --v2;
    }
    while (v2);
  }
  *a1 = 0;
  v4 = a1[2];
  if (v4)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1[3] + 24))(a1[3], v4, 0, 8);
  return a1;
}

uint64_t std::__destroy_at[abi:nn180100]<FIK::MoCapTask,0>(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(_QWORD *)(result + 184))
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(result + 192) + 24))(*(_QWORD *)(result + 192), *(_QWORD *)(result + 176), 0, 8);
    *(_QWORD *)(v1 + 176) = 0;
    *(_QWORD *)(v1 + 184) = 0;
  }
  if (*(_QWORD *)(v1 + 32))
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(v1 + 40) + 24))(*(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 24), 0, 8);
    *(_QWORD *)(v1 + 24) = 0;
    *(_QWORD *)(v1 + 32) = 0;
  }
  if (*(_QWORD *)(v1 + 8))
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(v1 + 16) + 24))(*(_QWORD *)(v1 + 16), *(_QWORD *)v1, 0, 8);
    *(_QWORD *)v1 = 0;
    *(_QWORD *)(v1 + 8) = 0;
  }
  return result;
}

uint64_t *FIK::IKArray<FIK::MoCapBone>::~IKArray(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[2];
    do
    {
      std::__destroy_at[abi:nn180100]<FIK::MoCapBone,0>(v3);
      v3 += 544;
      --v2;
    }
    while (v2);
  }
  *a1 = 0;
  v4 = a1[2];
  if (v4)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1[3] + 24))(a1[3], v4, 0, 8);
  return a1;
}

uint64_t std::__destroy_at[abi:nn180100]<FIK::MoCapBone,0>(uint64_t a1)
{
  uint64_t result;

  result = FIK::IKArray<IKString>::~IKArray(a1 + 416);
  if (*(_QWORD *)(a1 + 264))
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 272) + 24))(*(_QWORD *)(a1 + 272), *(_QWORD *)(a1 + 256), 0, 8);
    *(_QWORD *)(a1 + 256) = 0;
    *(_QWORD *)(a1 + 264) = 0;
  }
  if (*(_QWORD *)(a1 + 40))
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 24))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 32), 0, 8);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
  }
  if (*(_QWORD *)(a1 + 16))
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 8), 0, 8);
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  return result;
}

uint64_t *FIK::IKArray<FIK::RigBoneBase>::~IKArray(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[2];
    do
    {
      std::__destroy_at[abi:nn180100]<FIK::RigBoneBase,0>(v3);
      v3 += 96;
      --v2;
    }
    while (v2);
  }
  *a1 = 0;
  v4 = a1[2];
  if (v4)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1[3] + 24))(a1[3], v4, 0, 8);
  return a1;
}

uint64_t std::__destroy_at[abi:nn180100]<FIK::RigBoneBase,0>(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(_QWORD *)(result + 40))
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(result + 48) + 24))(*(_QWORD *)(result + 48), *(_QWORD *)(result + 32), 0, 8);
    *(_QWORD *)(v1 + 32) = 0;
    *(_QWORD *)(v1 + 40) = 0;
  }
  if (*(_QWORD *)(v1 + 16))
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(v1 + 24) + 24))(*(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 8), 0, 8);
    *(_QWORD *)(v1 + 8) = 0;
    *(_QWORD *)(v1 + 16) = 0;
  }
  return result;
}

uint64_t *FIK::IKArray<FIK::GameTask>::~IKArray(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[2];
    do
    {
      std::__destroy_at[abi:nn180100]<FIK::GameTask,0>(v3);
      v3 += 240;
      --v2;
    }
    while (v2);
  }
  *a1 = 0;
  v4 = a1[2];
  if (v4)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1[3] + 24))(a1[3], v4, 0, 8);
  return a1;
}

uint64_t std::__destroy_at[abi:nn180100]<FIK::GameTask,0>(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(_QWORD *)(result + 32))
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(result + 40) + 24))(*(_QWORD *)(result + 40), *(_QWORD *)(result + 24), 0, 8);
    *(_QWORD *)(v1 + 24) = 0;
    *(_QWORD *)(v1 + 32) = 0;
  }
  if (*(_QWORD *)(v1 + 8))
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(v1 + 16) + 24))(*(_QWORD *)(v1 + 16), *(_QWORD *)v1, 0, 8);
    *(_QWORD *)v1 = 0;
    *(_QWORD *)(v1 + 8) = 0;
  }
  return result;
}

uint64_t *FIK::IKArray<FIK::RigBone>::~IKArray(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[2];
    do
    {
      std::__destroy_at[abi:nn180100]<FIK::RigBoneBase,0>(v3);
      v3 += 256;
      --v2;
    }
    while (v2);
  }
  *a1 = 0;
  v4 = a1[2];
  if (v4)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1[3] + 24))(a1[3], v4, 0, 8);
  return a1;
}

uint64_t rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>::MemoryPoolAllocator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v5;
  void (***v6)(FIK::CrtAllocator *__hidden);
  void (***v7)(FIK::CrtAllocator *__hidden);
  uint64_t v8;

  v4 = a1;
  *(_QWORD *)a1 = a2;
  if (a3)
  {
    *(_QWORD *)(a1 + 8) = a3;
    v5 = (uint64_t *)(a1 + 16);
  }
  else
  {
    v6 = FIK::defaultAllocator((FIK *)a1);
    a1 = ((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, uint64_t))(*v6)[2])(v6, 1, 8);
    *(_QWORD *)(v4 + 8) = a1;
    v5 = (uint64_t *)(v4 + 16);
    if (!a1)
    {
      v8 = 0;
      *v5 = 0;
      goto LABEL_8;
    }
  }
  v7 = FIK::defaultAllocator((FIK *)a1);
  a1 = ((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, uint64_t))(*v7)[2])(v7, 56, 8);
  *v5 = a1;
  if (a3)
    v8 = 0;
  else
    v8 = *(_QWORD *)(v4 + 8);
LABEL_8:
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)a1 = a1 + 32;
  *(_QWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 16) = 1;
  return v4;
}

_QWORD *rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>,FIK::RapidJsonAllocator>::~GenericDocument(_QWORD *a1)
{
  if (a1[4])
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>,FIK::RapidJsonAllocator>::Destroy((uint64_t)a1);
  rapidjson::internal::Stack<FIK::RapidJsonAllocator>::Destroy((FIK *)(a1 + 5));
  return a1;
}

FIK *rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>,FIK::RapidJsonAllocator>::Destroy(uint64_t a1)
{
  FIK *result;

  result = *(FIK **)(a1 + 32);
  if (result)
  {
    rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>::~MemoryPoolAllocator(result);
    JUMPOUT(0x212BCAFB4);
  }
  return result;
}

FIK *rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>::~MemoryPoolAllocator(FIK *a1)
{
  uint64_t v2;
  unint64_t v3;
  FIK *v4;
  uint64_t v5;
  uint64_t v6;
  void (***v7)(FIK::CrtAllocator *__hidden);
  void (***v8)(FIK::CrtAllocator *__hidden);

  v2 = *((_QWORD *)a1 + 2);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (v3 < 2)
    {
      v4 = rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>::Clear(a1);
      v5 = *((_QWORD *)a1 + 2);
      v6 = *(_QWORD *)(v5 + 8);
      if (*(_BYTE *)(v5 + 24))
      {
        v7 = FIK::defaultAllocator(v4);
        v4 = (FIK *)((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v7)[3])(v7, v5, 0, 8);
      }
      if (v6)
      {
        v8 = FIK::defaultAllocator(v4);
        ((void (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v8)[3])(v8, v6, 0, 8);
      }
    }
    else
    {
      *(_QWORD *)(v2 + 16) = v3 - 1;
    }
  }
  return a1;
}

FIK *rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>::Clear(FIK *result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  FIK *v4;
  void (***v5)(FIK::CrtAllocator *__hidden);

  v1 = (uint64_t *)*((_QWORD *)result + 2);
  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 16);
  if (v3)
  {
    v4 = result;
    do
    {
      *v1 = v3;
      v5 = FIK::defaultAllocator(result);
      result = (FIK *)((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v5)[3])(v5, v2, 0, 8);
      v1 = (uint64_t *)*((_QWORD *)v4 + 2);
      v2 = *v1;
      v3 = *(_QWORD *)(*v1 + 16);
    }
    while (v3);
  }
  *(_QWORD *)(v2 + 8) = 0;
  return result;
}

FIK *rapidjson::internal::Stack<FIK::RapidJsonAllocator>::Destroy(FIK *result)
{
  FIK *v1;
  uint64_t v2;
  void (***v3)(FIK::CrtAllocator *__hidden);
  uint64_t v4;
  void (***v5)(FIK::CrtAllocator *__hidden);

  v1 = result;
  v2 = *((_QWORD *)result + 2);
  if (v2)
  {
    v3 = FIK::defaultAllocator(result);
    result = (FIK *)((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v3)[3])(v3, v2, 0, 8);
  }
  v4 = *((_QWORD *)v1 + 1);
  if (v4)
  {
    v5 = FIK::defaultAllocator(result);
    return (FIK *)((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v5)[3])(v5, v4, 0, 8);
  }
  return result;
}

uint64_t rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>,FIK::RapidJsonAllocator>::Parse<0u,rapidjson::UTF8<char>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unsigned __int8 *v4;
  unsigned __int8 **v6;
  _QWORD v7[4];

  v7[0] = a2;
  v7[1] = a2;
  v4 = &a2[a3];
  v7[2] = &a2[a3];
  v7[3] = a3;
  v6 = (unsigned __int8 **)v7;
  if (a3 && *a2 == 239)
    v7[0] = ++a2;
  if (a2 != v4)
  {
    if (*a2 == 187)
      v7[0] = ++a2;
    if (a2 != v4 && *a2 == 191)
      v7[0] = a2 + 1;
  }
  rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>,FIK::RapidJsonAllocator>::ParseStream<0u,rapidjson::UTF8<char>,rapidjson::EncodedInputStream<rapidjson::UTF8<char>,rapidjson::MemoryStream>>(a1, &v6);
  return a1;
}

uint64_t rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>,FIK::RapidJsonAllocator>::ParseStream<0u,rapidjson::UTF8<char>,rapidjson::EncodedInputStream<rapidjson::UTF8<char>,rapidjson::MemoryStream>>(uint64_t a1, unsigned __int8 ***a2)
{
  FIK::RapidJsonAllocator *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL (*v6)(rapidjson::ParseResult *);
  uint64_t v7;
  __int128 *v8;
  __int16 v9;
  __int128 v10;
  int v11;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;

  v3 = (FIK::RapidJsonAllocator *)(a1 + 40);
  v13 = *(_QWORD *)(a1 + 40);
  v14 = 0u;
  v15 = 0u;
  v16 = 256;
  v17 = 0;
  v18 = 0;
  v19 = 2;
  v4 = rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,FIK::RapidJsonAllocator>::Parse<0u,rapidjson::EncodedInputStream<rapidjson::UTF8<char>,rapidjson::MemoryStream>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>,FIK::RapidJsonAllocator>>((uint64_t)&v13, a2, a1);
  *(_QWORD *)(a1 + 88) = v4;
  *(_QWORD *)(a1 + 96) = v5;
  v6 = rapidjson::ParseResult::IsError;
  if ((_DWORD)v4)
    v6 = 0;
  if (v6)
  {
    v7 = *(_QWORD *)(a1 + 64);
    v8 = (__int128 *)(v7 - 24);
    *(_QWORD *)(a1 + 64) = v7 - 24;
    if (v7 - 24 != a1)
    {
      v9 = *(_WORD *)(v7 - 2);
      *(_WORD *)(v7 - 2) = 0;
      v10 = *v8;
      v11 = *(_DWORD *)(v7 - 8);
      *(_WORD *)(a1 + 20) = *((_WORD *)v8 + 10);
      *(_DWORD *)(a1 + 16) = v11;
      *(_OWORD *)a1 = v10;
      *(_WORD *)(a1 + 22) = v9;
    }
  }
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 56);
  rapidjson::internal::Stack<FIK::RapidJsonAllocator>::ShrinkToFit(v3);
  rapidjson::internal::Stack<FIK::RapidJsonAllocator>::Destroy((FIK *)&v13);
  return a1;
}

uint64_t rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,FIK::RapidJsonAllocator>::Parse<0u,rapidjson::EncodedInputStream<rapidjson::UTF8<char>,rapidjson::MemoryStream>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>,FIK::RapidJsonAllocator>>(uint64_t a1, unsigned __int8 ***a2, uint64_t a3)
{
  unsigned __int8 **v6;
  unsigned __int8 *v7;
  uint64_t result;
  int v9;
  int64_t v10;

  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,FIK::RapidJsonAllocator>::SkipWhitespaceAndComments<0u,rapidjson::EncodedInputStream<rapidjson::UTF8<char>,rapidjson::MemoryStream>>(a1, a2);
  if (!*(_DWORD *)(a1 + 48))
  {
    v6 = *a2;
    v7 = **a2;
    if (v7 == (*a2)[2] || !*v7)
    {
      v9 = 1;
    }
    else
    {
      rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,FIK::RapidJsonAllocator>::ParseValue<0u,rapidjson::EncodedInputStream<rapidjson::UTF8<char>,rapidjson::MemoryStream>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>,FIK::RapidJsonAllocator>>((FIK::RapidJsonAllocator *)a1, a2, a3);
      if (*(_DWORD *)(a1 + 48))
        goto LABEL_8;
      rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,FIK::RapidJsonAllocator>::SkipWhitespaceAndComments<0u,rapidjson::EncodedInputStream<rapidjson::UTF8<char>,rapidjson::MemoryStream>>(a1, a2);
      if (*(_DWORD *)(a1 + 48))
        goto LABEL_8;
      v6 = *a2;
      v7 = **a2;
      if (v7 == (*a2)[2] || !*v7)
        goto LABEL_8;
      v9 = 2;
    }
    v10 = v7 - v6[1];
    *(_DWORD *)(a1 + 48) = v9;
    *(_QWORD *)(a1 + 56) = v10;
  }
LABEL_8:
  result = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a1 + 16);
  return result;
}

void rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,FIK::RapidJsonAllocator>::SkipWhitespaceAndComments<0u,rapidjson::EncodedInputStream<rapidjson::UTF8<char>,rapidjson::MemoryStream>>(uint64_t a1, unsigned __int8 ***a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned int v4;
  BOOL v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  unsigned __int8 *v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;

  v2 = **a2;
  v3 = (*a2)[2];
  if (v2 != v3)
  {
    v4 = *v2;
    v5 = v4 > 0x20;
    v6 = (1 << v4) & 0x100002600;
    if (!v5 && v6 != 0)
    {
      v8 = v2 + 1;
      if (v2 + 1 > v3 - 16)
      {
LABEL_12:
        if (v8 == v3)
        {
LABEL_18:
          v2 = (*a2)[2];
        }
        else
        {
          while (1)
          {
            v17 = *v8;
            v5 = v17 > 0x20;
            v18 = (1 << v17) & 0x100002600;
            if (v5 || v18 == 0)
              break;
            if (++v8 == v3)
              goto LABEL_18;
          }
          v2 = v8;
        }
      }
      else
      {
        v9 = v2 + 9;
        v10.i64[0] = 0x2020202020202020;
        v10.i64[1] = 0x2020202020202020;
        v11.i64[0] = 0xA0A0A0A0A0A0A0ALL;
        v11.i64[1] = 0xA0A0A0A0A0A0A0ALL;
        v12.i64[0] = 0xFBFBFBFBFBFBFBFBLL;
        v12.i64[1] = 0xFBFBFBFBFBFBFBFBLL;
        v13.i64[0] = 0x909090909090909;
        v13.i64[1] = 0x909090909090909;
        while (1)
        {
          v14 = vrev64q_s8(vmvnq_s8(vorrq_s8(vorrq_s8(vceqq_s8(*(int8x16_t *)(v9 - 8), v10), vceqq_s8(*(int8x16_t *)(v9 - 8), v11)), vceqq_s8(vandq_s8(*(int8x16_t *)(v9 - 8), v12), v13))));
          if (v14.i64[0])
          {
            v2 = &v9[(__clz(v14.u64[0]) >> 3) - 8];
            goto LABEL_22;
          }
          if (v14.i64[1])
            break;
          v15 = v9 + 16;
          v16 = (unint64_t)(v9 + 8);
          v9 += 16;
          if (v16 > (unint64_t)(v3 - 16))
          {
            v8 = v15 - 8;
            goto LABEL_12;
          }
        }
        v2 = &v9[__clz(v14.u64[1]) >> 3];
      }
    }
  }
LABEL_22:
  **a2 = v2;
}

void rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,FIK::RapidJsonAllocator>::ParseValue<0u,rapidjson::EncodedInputStream<rapidjson::UTF8<char>,rapidjson::MemoryStream>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>,FIK::RapidJsonAllocator>>(FIK::RapidJsonAllocator *result, _QWORD **a2, uint64_t a3)
{
  char *v3;
  int v4;

  v3 = (char *)**a2;
  if (v3 != (char *)(*a2)[2])
  {
    v4 = *v3;
    if (v4 > 109)
    {
      switch(v4)
      {
        case '{':
          rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,FIK::RapidJsonAllocator>::ParseObject<0u,rapidjson::EncodedInputStream<rapidjson::UTF8<char>,rapidjson::MemoryStream>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>,FIK::RapidJsonAllocator>>((uint64_t)result, (unsigned __int8 ***)a2, a3);
          return;
        case 't':
          rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,FIK::RapidJsonAllocator>::ParseTrue<0u,rapidjson::EncodedInputStream<rapidjson::UTF8<char>,rapidjson::MemoryStream>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>,FIK::RapidJsonAllocator>>(result, a2, a3);
          return;
        case 'n':
          rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,FIK::RapidJsonAllocator>::ParseNull<0u,rapidjson::EncodedInputStream<rapidjson::UTF8<char>,rapidjson::MemoryStream>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>,FIK::RapidJsonAllocator>>(result, a2, a3);
          return;
      }
    }
    else
    {
      switch(v4)
      {
        case '"':
          rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,FIK::RapidJsonAllocator>::ParseString<0u,rapidjson::EncodedInputStream<rapidjson::UTF8<char>,rapidjson::MemoryStream>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>,FIK::RapidJsonAllocator>>((uint64_t)result, a2, a3);
          return;
        case '[':
          rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,FIK::RapidJsonAllocator>::ParseArray<0u,rapidjson::EncodedInputStream<rapidjson::UTF8<char>,rapidjson::MemoryStream>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>,FIK::RapidJsonAllocator>>((uint64_t)result, (unsigned __int8 ***)a2, a3);
          return;
        case 'f':
          rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,FIK::RapidJsonAllocator>::ParseFalse<0u,rapidjson::EncodedInputStream<rapidjson::UTF8<char>,rapidjson::MemoryStream>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>,FIK::RapidJsonAllocator>>(result, a2, a3);
          return;
      }
    }
  }
  rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,FIK::RapidJsonAllocator>::ParseNumber<0u,rapidjson::EncodedInputStream<rapidjson::UTF8<char>,rapidjson::MemoryStream>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>,FIK::RapidJsonAllocator>>((uint64_t)result, (unsigned __int8 ***)a2, a3);
}

BOOL rapidjson::ParseResult::IsError(rapidjson::ParseResult *this)
{
  return *(_DWORD *)this != 0;
}

FIK::RapidJsonAllocator *rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,FIK::RapidJsonAllocator>::ParseNull<0u,rapidjson::EncodedInputStream<rapidjson::UTF8<char>,rapidjson::MemoryStream>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>,FIK::RapidJsonAllocator>>(FIK::RapidJsonAllocator *result, _QWORD **a2, uint64_t a3)
{
  _QWORD *v4;
  _BYTE *v5;
  _BYTE *v6;
  _BYTE *v7;
  _QWORD *v8;
  _BYTE *v9;

  v4 = *a2;
  v5 = (_BYTE *)**a2;
  v6 = (_BYTE *)(*a2)[2];
  if (v5 != v6)
    *v4 = ++v5;
  if (v5 == v6)
    goto LABEL_12;
  if (*v5 != 117)
  {
    v7 = v5;
    goto LABEL_13;
  }
  v7 = v5 + 1;
  *v4 = v5 + 1;
  if (v5 + 1 == v6)
  {
LABEL_12:
    v7 = v6;
LABEL_13:
    v9 = &v7[-v4[1]];
    *((_DWORD *)result + 12) = 3;
    *((_QWORD *)result + 7) = v9;
    return result;
  }
  if (*v7 != 108)
    goto LABEL_13;
  *v4 = v5 + 2;
  v7 = v6;
  if (v5 + 2 == v6)
    goto LABEL_13;
  v7 = v5 + 2;
  if (v5[2] != 108)
    goto LABEL_13;
  *v4 = v5 + 3;
  v8 = *(_QWORD **)(a3 + 64);
  if ((uint64_t)(*(_QWORD *)(a3 + 72) - (_QWORD)v8) <= 23)
  {
    result = rapidjson::internal::Stack<FIK::RapidJsonAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>>(a3 + 40, 1);
    v8 = *(_QWORD **)(a3 + 64);
  }
  *(_QWORD *)(a3 + 64) = v8 + 3;
  *v8 = 0;
  v8[1] = 0;
  v8[2] = 0;
  return result;
}

FIK::RapidJsonAllocator *rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,FIK::RapidJsonAllocator>::ParseTrue<0u,rapidjson::EncodedInputStream<rapidjson::UTF8<char>,rapidjson::MemoryStream>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>,FIK::RapidJsonAllocator>>(FIK::RapidJsonAllocator *result, _QWORD **a2, uint64_t a3)
{
  _QWORD *v4;
  _BYTE *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;

  v4 = *a2;
  v5 = (_BYTE *)**a2;
  v6 = (_BYTE *)(*a2)[2];
  if (v5 != v6)
    *v4 = ++v5;
  if (v5 == v6)
    goto LABEL_12;
  if (*v5 != 114)
  {
    v7 = v5;
    goto LABEL_13;
  }
  v7 = v5 + 1;
  *v4 = v5 + 1;
  if (v5 + 1 == v6)
  {
LABEL_12:
    v7 = v6;
LABEL_13:
    v9 = &v7[-v4[1]];
    *((_DWORD *)result + 12) = 3;
    *((_QWORD *)result + 7) = v9;
    return result;
  }
  if (*v7 != 117)
    goto LABEL_13;
  *v4 = v5 + 2;
  v7 = v6;
  if (v5 + 2 == v6)
    goto LABEL_13;
  v7 = v5 + 2;
  if (v5[2] != 101)
    goto LABEL_13;
  *v4 = v5 + 3;
  v8 = *(_QWORD *)(a3 + 64);
  if (*(_QWORD *)(a3 + 72) - v8 <= 23)
  {
    result = rapidjson::internal::Stack<FIK::RapidJsonAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>>(a3 + 40, 1);
    v8 = *(_QWORD *)(a3 + 64);
  }
  *(_QWORD *)(a3 + 64) = v8 + 24;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *(_WORD *)(v8 + 22) = 10;
  return result;
}

FIK::RapidJsonAllocator *rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,FIK::RapidJsonAllocator>::ParseFalse<0u,rapidjson::EncodedInputStream<rapidjson::UTF8<char>,rapidjson::MemoryStream>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>,FIK::RapidJsonAllocator>>(FIK::RapidJsonAllocator *result, _QWORD **a2, uint64_t a3)
{
  _QWORD *v4;
  _BYTE *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;

  v4 = *a2;
  v5 = (_BYTE *)**a2;
  v6 = (_BYTE *)(*a2)[2];
  if (v5 != v6)
    *v4 = ++v5;
  if (v5 == v6)
    goto LABEL_14;
  if (*v5 != 97)
  {
    v7 = v5;
    goto LABEL_15;
  }
  v7 = v5 + 1;
  *v4 = v5 + 1;
  if (v5 + 1 == v6)
    goto LABEL_14;
  if (*v7 != 108)
  {
LABEL_15:
    v9 = &v7[-v4[1]];
    *((_DWORD *)result + 12) = 3;
    *((_QWORD *)result + 7) = v9;
    return result;
  }
  v7 = v5 + 2;
  *v4 = v5 + 2;
  if (v5 + 2 == v6)
  {
LABEL_14:
    v7 = v6;
    goto LABEL_15;
  }
  if (*v7 != 115)
    goto LABEL_15;
  *v4 = v5 + 3;
  v7 = v6;
  if (v5 + 3 == v6)
    goto LABEL_15;
  v7 = v5 + 3;
  if (v5[3] != 101)
    goto LABEL_15;
  *v4 = v5 + 4;
  v8 = *(_QWORD *)(a3 + 64);
  if (*(_QWORD *)(a3 + 72) - v8 <= 23)
  {
    result = rapidjson::internal::Stack<FIK::RapidJsonAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>>(a3 + 40, 1);
    v8 = *(_QWORD *)(a3 + 64);
  }
  *(_QWORD *)(a3 + 64) = v8 + 24;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *(_WORD *)(v8 + 22) = 9;
  return result;
}

uint64_t rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,FIK::RapidJsonAllocator>::ParseString<0u,rapidjson::EncodedInputStream<rapidjson::UTF8<char>,rapidjson::MemoryStream>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>,FIK::RapidJsonAllocator>>(uint64_t result, uint64_t **a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned __int8 v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  _BYTE *v17;
  _BYTE *v18;
  int v19;
  uint64_t v20;
  _BYTE *v21;
  int v22;
  unsigned int v23;
  void *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;

  v5 = result;
  v6 = *a2;
  v7 = (unsigned __int8 *)**a2;
  v8 = (unsigned __int8 *)(*a2)[2];
  if (v7 != v8)
    *v6 = (uint64_t)++v7;
  v28 = result;
  v29 = 0;
  if (v7 != v8)
  {
    while (1)
    {
      v9 = *v7;
      if (v9 != 92)
        break;
      v13 = (uint64_t)&v7[-v6[1]];
      *v6 = (uint64_t)(v7 + 1);
      if (v7 + 1 == v8)
        goto LABEL_38;
      v14 = v7[1];
      v10 = rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,FIK::RapidJsonAllocator>::ParseStringToStream<0u,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::EncodedInputStream<rapidjson::UTF8<char>,rapidjson::MemoryStream>,rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,FIK::RapidJsonAllocator>::StackStream<char>>(rapidjson::EncodedInputStream<rapidjson::UTF8<char>,rapidjson::MemoryStream> &,rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,FIK::RapidJsonAllocator>::StackStream<char> &)::escape[v14];
      if (v10)
      {
        *v6 = (uint64_t)(v7 + 2);
LABEL_8:
        v11 = v28;
        v12 = *(unsigned __int8 **)(v28 + 24);
        if ((uint64_t)(*(_QWORD *)(v28 + 32) - (_QWORD)v12) <= 0)
        {
          result = (uint64_t)rapidjson::internal::Stack<FIK::RapidJsonAllocator>::Expand<char>(v28, 1);
          v12 = *(unsigned __int8 **)(v11 + 24);
        }
        *(_QWORD *)(v11 + 24) = v12 + 1;
        *v12 = v10;
        ++v29;
        goto LABEL_11;
      }
      if ((_DWORD)v14 != 117)
      {
LABEL_38:
        v26 = 10;
        goto LABEL_35;
      }
      *v6 = (uint64_t)(v7 + 2);
      v27 = v13;
      result = rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,FIK::RapidJsonAllocator>::ParseHex4<rapidjson::EncodedInputStream<rapidjson::UTF8<char>,rapidjson::MemoryStream>>(v5, a2, v13);
      if (*(_DWORD *)(v5 + 48))
        return result;
      v15 = result;
      if (result >> 11 == 27)
      {
        if (result >> 10 > 0x36)
          goto LABEL_41;
        v16 = *a2;
        v17 = (_BYTE *)**a2;
        v18 = (_BYTE *)(*a2)[2];
        if (v17 == v18)
          goto LABEL_41;
        if (*v17 != 92)
          goto LABEL_41;
        *v16 = (uint64_t)(v17 + 1);
        if (v17 + 1 == v18 || v17[1] != 117)
          goto LABEL_41;
        v19 = result;
        *v16 = (uint64_t)(v17 + 2);
        result = rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,FIK::RapidJsonAllocator>::ParseHex4<rapidjson::EncodedInputStream<rapidjson::UTF8<char>,rapidjson::MemoryStream>>(v5, a2, v27);
        if (*(_DWORD *)(v5 + 48))
          return result;
        if ((result - 57344) <= 0xFFFFFBFF)
        {
LABEL_41:
          *(_DWORD *)(v5 + 48) = 9;
          v13 = v27;
          goto LABEL_36;
        }
        v15 = ((result - 56320) | ((v19 << 10) - 56623104)) + 0x10000;
      }
      result = (uint64_t)rapidjson::UTF8<char>::Encode<rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,FIK::RapidJsonAllocator>::StackStream<char>>(&v28, v15);
LABEL_11:
      v6 = *a2;
      v7 = (unsigned __int8 *)**a2;
      v8 = (unsigned __int8 *)(*a2)[2];
      if (v7 == v8)
        goto LABEL_34;
    }
    if (v9 == 34)
    {
      *v6 = (uint64_t)(v7 + 1);
      v20 = v28;
      v21 = *(_BYTE **)(v28 + 24);
      if ((uint64_t)(*(_QWORD *)(v28 + 32) - (_QWORD)v21) <= 0)
      {
        result = (uint64_t)rapidjson::internal::Stack<FIK::RapidJsonAllocator>::Expand<char>(v28, 1);
        v21 = *(_BYTE **)(v20 + 24);
      }
      *(_QWORD *)(v20 + 24) = v21 + 1;
      *v21 = 0;
      v22 = v29;
      v23 = ++v29;
      if (!*(_DWORD *)(v5 + 48))
      {
        v24 = (void *)(*(_QWORD *)(v28 + 24) - v23);
        *(_QWORD *)(v28 + 24) = v24;
        result = rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>,FIK::RapidJsonAllocator>::String(a3, v24, v22, 1);
        if ((result & 1) == 0)
        {
          v25 = **a2 - (*a2)[1];
          *(_DWORD *)(v5 + 48) = 16;
          *(_QWORD *)(v5 + 56) = v25;
        }
      }
      return result;
    }
    if (v9 <= 0x1F)
    {
      if (!*v7)
        goto LABEL_34;
      v13 = (uint64_t)&v7[-v6[1]];
      v26 = 12;
      goto LABEL_35;
    }
    *v6 = (uint64_t)(v7 + 1);
    v10 = *v7;
    goto LABEL_8;
  }
  v7 = v8;
LABEL_34:
  v13 = (uint64_t)&v7[-v6[1]];
  v26 = 11;
LABEL_35:
  *(_DWORD *)(v5 + 48) = v26;
LABEL_36:
  *(_QWORD *)(v5 + 56) = v13;
  return result;
}

void rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,FIK::RapidJsonAllocator>::ParseObject<0u,rapidjson::EncodedInputStream<rapidjson::UTF8<char>,rapidjson::MemoryStream>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>,FIK::RapidJsonAllocator>>(uint64_t a1, unsigned __int8 ***a2, uint64_t a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned int i;
  unsigned __int8 *v10;
  unsigned __int8 **v11;
  unsigned __int8 *v12;
  unsigned __int8 **v13;
  unsigned __int8 *v14;
  int v15;
  int64_t v16;
  int v17;

  v6 = **a2;
  if (v6 != (*a2)[2])
    **a2 = v6 + 1;
  if ((rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>,FIK::RapidJsonAllocator>::StartObject(a3) & 1) != 0)
  {
    rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,FIK::RapidJsonAllocator>::SkipWhitespaceAndComments<0u,rapidjson::EncodedInputStream<rapidjson::UTF8<char>,rapidjson::MemoryStream>>(a1, a2);
    if (*(_DWORD *)(a1 + 48))
      return;
    v7 = **a2;
    if (v7 != (*a2)[2] && *v7 == 125)
    {
      **a2 = v7 + 1;
      v8 = *(_QWORD *)(a3 + 64);
      *(_WORD *)(v8 - 2) = 3;
      *(_QWORD *)(v8 - 24) = 0;
      *(_QWORD *)(v8 - 16) = 0;
      return;
    }
    for (i = 1; ; ++i)
    {
      v10 = **a2;
      if (v10 == (*a2)[2] || *v10 != 34)
      {
        v16 = v10 - (*a2)[1];
        v17 = 4;
        goto LABEL_27;
      }
      rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,FIK::RapidJsonAllocator>::ParseString<0u,rapidjson::EncodedInputStream<rapidjson::UTF8<char>,rapidjson::MemoryStream>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>,FIK::RapidJsonAllocator>>(a1, (uint64_t **)a2, a3);
      if (*(_DWORD *)(a1 + 48))
        return;
      rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,FIK::RapidJsonAllocator>::SkipWhitespaceAndComments<0u,rapidjson::EncodedInputStream<rapidjson::UTF8<char>,rapidjson::MemoryStream>>(a1, a2);
      if (*(_DWORD *)(a1 + 48))
        return;
      v11 = *a2;
      v12 = **a2;
      if (v12 == (*a2)[2] || *v12 != 58)
      {
        v16 = v12 - v11[1];
        v17 = 5;
        goto LABEL_27;
      }
      *v11 = v12 + 1;
      rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,FIK::RapidJsonAllocator>::SkipWhitespaceAndComments<0u,rapidjson::EncodedInputStream<rapidjson::UTF8<char>,rapidjson::MemoryStream>>(a1, a2);
      if (*(_DWORD *)(a1 + 48))
        return;
      rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,FIK::RapidJsonAllocator>::ParseValue<0u,rapidjson::EncodedInputStream<rapidjson::UTF8<char>,rapidjson::MemoryStream>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>,FIK::RapidJsonAllocator>>(a1, a2, a3);
      if (*(_DWORD *)(a1 + 48))
        return;
      rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,FIK::RapidJsonAllocator>::SkipWhitespaceAndComments<0u,rapidjson::EncodedInputStream<rapidjson::UTF8<char>,rapidjson::MemoryStream>>(a1, a2);
      if (*(_DWORD *)(a1 + 48))
        return;
      v13 = *a2;
      v14 = **a2;
      if (v14 == (*a2)[2])
        goto LABEL_26;
      v15 = (char)*v14;
      if (v15 != 44)
        break;
      *v13 = v14 + 1;
      rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,FIK::RapidJsonAllocator>::SkipWhitespaceAndComments<0u,rapidjson::EncodedInputStream<rapidjson::UTF8<char>,rapidjson::MemoryStream>>(a1, a2);
      if (*(_DWORD *)(a1 + 48))
        return;
    }
    if (v15 != 125)
    {
LABEL_26:
      v16 = v14 - v13[1];
      v17 = 6;
      goto LABEL_27;
    }
    *v13 = v14 + 1;
    if ((rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>,FIK::RapidJsonAllocator>::EndObject(a3, i) & 1) != 0)return;
  }
  v16 = **a2 - (*a2)[1];
  v17 = 16;
LABEL_27:
  *(_DWORD *)(a1 + 48) = v17;
  *(_QWORD *)(a1 + 56) = v16;
}

void rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,FIK::RapidJsonAllocator>::ParseArray<0u,rapidjson::EncodedInputStream<rapidjson::UTF8<char>,rapidjson::MemoryStream>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>,FIK::RapidJsonAllocator>>(uint64_t a1, unsigned __int8 ***a2, uint64_t a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  int v12;
  int64_t v13;
  int v14;

  v6 = **a2;
  if (v6 != (*a2)[2])
    **a2 = v6 + 1;
  if ((rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>,FIK::RapidJsonAllocator>::StartArray(a3) & 1) != 0)
  {
    rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,FIK::RapidJsonAllocator>::SkipWhitespaceAndComments<0u,rapidjson::EncodedInputStream<rapidjson::UTF8<char>,rapidjson::MemoryStream>>(a1, a2);
    if (!*(_DWORD *)(a1 + 48))
    {
      v7 = **a2;
      if (v7 == (*a2)[2] || *v7 != 93)
      {
        v9 = 1;
        do
        {
          rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,FIK::RapidJsonAllocator>::ParseValue<0u,rapidjson::EncodedInputStream<rapidjson::UTF8<char>,rapidjson::MemoryStream>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>,FIK::RapidJsonAllocator>>(a1, a2, a3);
          if (*(_DWORD *)(a1 + 48))
            break;
          rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,FIK::RapidJsonAllocator>::SkipWhitespaceAndComments<0u,rapidjson::EncodedInputStream<rapidjson::UTF8<char>,rapidjson::MemoryStream>>(a1, a2);
          if (*(_DWORD *)(a1 + 48))
            break;
          v10 = *a2;
          v11 = **a2;
          if (v11 == (*a2)[2])
            goto LABEL_20;
          v12 = *v11;
          if (v12 != 44)
          {
            if (v12 != 93)
            {
LABEL_20:
              v13 = v11 - v10[1];
              v14 = 7;
              goto LABEL_19;
            }
            *v10 = v11 + 1;
            if ((rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>,FIK::RapidJsonAllocator>::EndArray(a3, v9) & 1) != 0)return;
            goto LABEL_18;
          }
          *v10 = v11 + 1;
          rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,FIK::RapidJsonAllocator>::SkipWhitespaceAndComments<0u,rapidjson::EncodedInputStream<rapidjson::UTF8<char>,rapidjson::MemoryStream>>(a1, a2);
          ++v9;
        }
        while (!*(_DWORD *)(a1 + 48));
      }
      else
      {
        **a2 = v7 + 1;
        v8 = *(_QWORD *)(a3 + 64);
        *(_WORD *)(v8 - 2) = 4;
        *(_QWORD *)(v8 - 24) = 0;
        *(_QWORD *)(v8 - 16) = 0;
      }
    }
  }
  else
  {
LABEL_18:
    v13 = **a2 - (*a2)[1];
    v14 = 16;
LABEL_19:
    *(_DWORD *)(a1 + 48) = v14;
    *(_QWORD *)(a1 + 56) = v13;
  }
}

uint64_t rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,FIK::RapidJsonAllocator>::ParseNumber<0u,rapidjson::EncodedInputStream<rapidjson::UTF8<char>,rapidjson::MemoryStream>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>,FIK::RapidJsonAllocator>>(uint64_t result, unsigned __int8 ***a2, uint64_t a3)
{
  uint64_t v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int v8;
  unsigned __int8 *v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned __int8 *v15;
  unsigned int v16;
  unint64_t v17;
  int v18;
  int v19;
  double v20;
  int v21;
  int v22;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  unsigned __int8 *v28;
  int v29;
  _BOOL4 v30;
  unsigned __int8 *v31;
  int v32;
  unsigned __int8 *v33;
  int v34;
  double v35;
  unsigned int v36;
  int v37;
  double v38;

  v3 = result;
  v4 = *a2;
  v5 = **a2;
  v6 = (*a2)[2];
  if (v5 == v6 || *v5 != 45)
  {
    v8 = 0;
    v7 = **a2;
  }
  else
  {
    v7 = v5 + 1;
    *v4 = v5 + 1;
    v8 = 1;
  }
  v9 = v4[1];
  if (v7 == v6)
    goto LABEL_124;
  v10 = *v7;
  if (v10 == 48)
  {
    v18 = 0;
    LODWORD(v12) = 0;
    v17 = 0;
    v11 = 0;
    v19 = 0;
    *v4 = ++v7;
LABEL_38:
    v20 = 0.0;
    goto LABEL_55;
  }
  if ((v10 - 49) > 8)
  {
LABEL_124:
    v37 = 3;
    goto LABEL_119;
  }
  *v4 = v7 + 1;
  v11 = (char)*v7 - 48;
  if ((v8 & 1) != 0)
  {
    if (v7 + 1 == v6)
      goto LABEL_137;
    v12 = 0;
    while (1)
    {
      v13 = &v7[v12];
      v14 = v7[v12 + 1];
      result = v14 - 48;
      if (result > 9)
        break;
      if (v11 > 0xCCCCCCB)
      {
        if (v11 != 214748364)
          goto LABEL_17;
        if (v14 > 0x38)
        {
          v11 = 214748364;
LABEL_17:
          v7 += v12 + 1;
          goto LABEL_28;
        }
      }
      *v4 = &v7[v12 + 2];
      v11 = (char)v13[1] + 10 * v11 - 48;
      if (&v7[++v12 + 1] == v6)
        goto LABEL_136;
    }
    v18 = 0;
    v17 = 0;
    v19 = 0;
    v7 = v13 + 1;
    goto LABEL_38;
  }
  if (v7 + 1 == v6)
    goto LABEL_139;
  v12 = 0;
  while (1)
  {
    v15 = &v7[v12];
    v16 = v7[v12 + 1];
    result = v16 - 48;
    if (result > 9)
    {
      v18 = 0;
      v17 = 0;
      v19 = 0;
      v7 = v15 + 1;
      v20 = 0.0;
      goto LABEL_55;
    }
    if (v11 > 0x19999998)
    {
      if (v11 != 429496729)
        goto LABEL_27;
      if (v16 > 0x35)
        break;
    }
    *v4 = &v7[v12 + 2];
    v11 = (char)v15[1] + 10 * v11 - 48;
    if (&v7[++v12 + 1] == v6)
      goto LABEL_136;
  }
  v11 = 429496729;
LABEL_27:
  v7 += v12 + 1;
LABEL_28:
  v17 = v11;
  if ((v8 & 1) != 0)
  {
    if (v7 == v6)
      goto LABEL_134;
    while (1)
    {
      result = *v7;
      if ((result - 48) > 9)
        break;
      if (v17 > 0xCCCCCCCCCCCCCCBLL)
      {
        if (v17 != 0xCCCCCCCCCCCCCCCLL)
          goto LABEL_48;
        if (result > 0x38)
        {
          v17 = 0xCCCCCCCCCCCCCCCLL;
          goto LABEL_48;
        }
      }
      *v4 = v7 + 1;
      v17 = ((char)*v7 - 48) + 10 * v17;
      LODWORD(v12) = v12 + 1;
      if (++v7 == v6)
        goto LABEL_133;
    }
  }
  else
  {
    if (v7 == v6)
      goto LABEL_141;
    while (1)
    {
      result = *v7;
      if ((result - 48) > 9)
        break;
      if (v17 > 0x1999999999999998)
      {
        if (v17 != 0x1999999999999999)
          goto LABEL_48;
        if (result > 0x35)
        {
          v17 = 0x1999999999999999;
LABEL_48:
          v20 = (double)v17;
          if (v7 == v6)
          {
LABEL_51:
            v21 = 0;
            goto LABEL_80;
          }
          while (*v7 - 48 <= 9)
          {
            *v4 = v7 + 1;
            v20 = (double)((char)*v7++ - 48) + v20 * 10.0;
            if (v7 == v6)
              goto LABEL_51;
          }
          v18 = 1;
          goto LABEL_54;
        }
      }
      *v4 = v7 + 1;
      v17 = ((char)*v7 - 48) + 10 * v17;
      LODWORD(v12) = v12 + 1;
      if (++v7 == v6)
        goto LABEL_133;
    }
  }
  v18 = 0;
  v20 = 0.0;
LABEL_54:
  v19 = 1;
LABEL_55:
  if (v7 == v6)
  {
    v21 = 0;
    goto LABEL_131;
  }
  if (*v7 == 46)
  {
    *v4 = ++v7;
    if (v7 == v6 || *v7 - 48 > 9)
    {
      v37 = 14;
      goto LABEL_119;
    }
    v21 = 0;
    if ((v18 & 1) == 0)
    {
      if (!v19)
        v17 = v11;
      v22 = (_DWORD)v7 - (_DWORD)v6;
      result = 4294967248;
      while ((char)*v7 >= 48)
      {
        if (*v7 > 0x39u || v17 >> 53 != 0)
          break;
        v24 = v7 + 1;
        *v4 = v7 + 1;
        v17 = ((char)*v7 - 48) + 10 * v17;
        --v21;
        if (v17)
          LODWORD(v12) = v12 + 1;
        ++v7;
        if (v24 == v6)
        {
          v7 = v6;
          v21 = v22;
          break;
        }
      }
      v20 = (double)v17;
    }
    if (v7 == v6)
      goto LABEL_80;
    while (*v7 - 48 <= 9)
    {
      v25 = v7 + 1;
      *v4 = v7 + 1;
      if ((int)v12 <= 16)
      {
        v20 = (double)((char)*v7 - 48) + v20 * 10.0;
        --v21;
        if (v20 > 0.0)
          LODWORD(v12) = v12 + 1;
      }
      ++v7;
      if (v25 == v6)
        goto LABEL_80;
    }
    v18 = 1;
  }
  else
  {
    v21 = 0;
  }
  if (v7 == v6)
  {
LABEL_131:
    if ((v18 & 1) == 0)
      goto LABEL_132;
    goto LABEL_80;
  }
  v27 = *v7;
  if (v27 == 101 || v27 == 69)
  {
    v28 = v7 + 1;
    *v4 = v7 + 1;
    if (!v19)
      v17 = v11;
    if (!v18)
      v20 = (double)v17;
    if (v28 == v6)
    {
      v37 = 15;
      v7 = v6;
      goto LABEL_119;
    }
    v29 = *v28;
    v30 = v29 != 43;
    if (v29 == 43 || v29 == 45)
    {
      v28 = v7 + 2;
      *v4 = v7 + 2;
    }
    else
    {
      v30 = 0;
    }
    if (v28 == v6 || *v28 - 48 > 9)
    {
      v37 = 15;
      v7 = v28;
      goto LABEL_119;
    }
    v31 = v28 + 1;
    *v4 = v28 + 1;
    v32 = (char)*v28 - 48;
    if (v30)
    {
      if (v31 != v6)
      {
        while (*v31 - 48 <= 9)
        {
          v33 = v31 + 1;
          *v4 = v31 + 1;
          v32 = (char)*v31 + 10 * v32 - 48;
          if (v32 > (v21 + 2147483639) / 10)
          {
            while (v33 != v6)
            {
              if (*v33 - 48 > 9)
                goto LABEL_97;
              *v4 = ++v33;
            }
            break;
          }
LABEL_97:
          v31 = v33;
          if (v33 == v6)
            break;
        }
      }
    }
    else
    {
      while (v31 != v6 && *v31 - 48 <= 9)
      {
        *v4 = v31 + 1;
        v32 = (char)*v31++ + 10 * v32 - 48;
        if (v32 > 308 - v21)
          goto LABEL_117;
      }
    }
    if (v30)
      v26 = -v32;
    else
      v26 = v32;
LABEL_109:
    v34 = v26 + v21;
    if (v34 > -309)
    {
      if ((v34 & 0x80000000) == 0)
      {
        v35 = v20 * rapidjson::internal::Pow10(int)::e[v34];
        goto LABEL_116;
      }
      v36 = -v34;
    }
    else
    {
      v35 = 0.0;
      if (v34 < 0xFFFFFD98)
        goto LABEL_120;
      v20 = v20 / 1.0e308;
      v36 = -308 - v34;
    }
    v35 = v20 / rapidjson::internal::Pow10(int)::e[v36];
LABEL_116:
    if (v35 > 1.79769313e308)
    {
LABEL_117:
      v37 = 13;
LABEL_118:
      v7 = v5;
LABEL_119:
      *(_DWORD *)(v3 + 48) = v37;
      *(_QWORD *)(v3 + 56) = v7 - v9;
      return result;
    }
LABEL_120:
    v38 = -v35;
    if (!v8)
      v38 = v35;
    result = rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>,FIK::RapidJsonAllocator>::Double(a3, v38);
    if ((result & 1) == 0)
      goto LABEL_138;
    return result;
  }
  if (v18)
  {
LABEL_80:
    v26 = 0;
    goto LABEL_109;
  }
LABEL_132:
  if (v19)
  {
LABEL_133:
    if (v8)
    {
LABEL_134:
      result = rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>,FIK::RapidJsonAllocator>::Int64(a3, -(uint64_t)v17);
      if ((result & 1) == 0)
        goto LABEL_138;
      return result;
    }
LABEL_141:
    result = rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>,FIK::RapidJsonAllocator>::Uint64(a3, v17);
    if ((result & 1) == 0)
      goto LABEL_138;
    return result;
  }
LABEL_136:
  if (!v8)
  {
LABEL_139:
    result = rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>,FIK::RapidJsonAllocator>::Uint(a3, v11);
    if ((result & 1) == 0)
      goto LABEL_138;
    return result;
  }
LABEL_137:
  result = rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>,FIK::RapidJsonAllocator>::Int(a3, -v11);
  if ((result & 1) == 0)
  {
LABEL_138:
    v37 = 16;
    goto LABEL_118;
  }
  return result;
}

FIK::RapidJsonAllocator *rapidjson::internal::Stack<FIK::RapidJsonAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>>(uint64_t a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  FIK::RapidJsonAllocator *v7;
  void (***v8)(FIK::CrtAllocator *__hidden);
  uint64_t v9;
  FIK::RapidJsonAllocator *v10;
  FIK::RapidJsonAllocator *result;

  v4 = *(char **)(a1 + 16);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 32) - (_QWORD)v4;
    v6 = v5 + ((v5 + 1) >> 1);
    v7 = *(FIK::RapidJsonAllocator **)a1;
  }
  else
  {
    v7 = *(FIK::RapidJsonAllocator **)a1;
    if (*(_QWORD *)a1)
    {
      v4 = 0;
    }
    else
    {
      v8 = FIK::defaultAllocator(0);
      v7 = (FIK::RapidJsonAllocator *)((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, uint64_t))(*v8)[2])(v8, 1, 8);
      *(_QWORD *)a1 = v7;
      *(_QWORD *)(a1 + 8) = v7;
      v4 = *(char **)(a1 + 16);
    }
    v6 = *(_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 32) - (_QWORD)v4;
  }
  v9 = *(_QWORD *)(a1 + 24) - (_QWORD)v4;
  if (v6 <= v9 + 24 * a2)
    v10 = (FIK::RapidJsonAllocator *)(v9 + 24 * a2);
  else
    v10 = (FIK::RapidJsonAllocator *)v6;
  result = FIK::RapidJsonAllocator::Realloc(v7, v4, v5, v10);
  *(_QWORD *)(a1 + 16) = result;
  *(_QWORD *)(a1 + 24) = (char *)result + v9;
  *(_QWORD *)(a1 + 32) = (char *)v10 + (_QWORD)result;
  return result;
}

FIK::RapidJsonAllocator *FIK::RapidJsonAllocator::Realloc(FIK::RapidJsonAllocator *this, char *a2, unint64_t a3, FIK::RapidJsonAllocator *a4)
{
  FIK::RapidJsonAllocator *v4;
  void (***v7)(FIK::CrtAllocator *__hidden);
  unint64_t v8;
  FIK::RapidJsonAllocator *v9;
  char *v10;
  char v11;
  void (***v12)(FIK::CrtAllocator *__hidden);
  void (***v13)(FIK::CrtAllocator *__hidden);

  v4 = a4;
  if (a4)
  {
    if (!a2)
    {
      v13 = FIK::defaultAllocator(this);
      return (FIK::RapidJsonAllocator *)((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), FIK::RapidJsonAllocator *, uint64_t))(*v13)[2])(v13, v4, 8);
    }
    if ((unint64_t)a4 <= a3)
      return (FIK::RapidJsonAllocator *)a2;
    v7 = FIK::defaultAllocator(this);
    this = (FIK::RapidJsonAllocator *)((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), FIK::RapidJsonAllocator *, uint64_t))(*v7)[2])(v7, v4, 8);
    v4 = this;
    if (a3)
    {
      v8 = a3;
      v9 = this;
      v10 = a2;
      do
      {
        v11 = *v10++;
        *(_BYTE *)v9 = v11;
        v9 = (FIK::RapidJsonAllocator *)((char *)v9 + 1);
        --v8;
      }
      while (v8);
    }
  }
  v12 = FIK::defaultAllocator(this);
  ((void (*)(void (***)(FIK::CrtAllocator *__hidden), char *, unint64_t, uint64_t))(*v12)[3])(v12, a2, a3, 8);
  return v4;
}

uint64_t rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>,FIK::RapidJsonAllocator>::String(uint64_t a1, void *a2, int a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  void *v11;
  void *v12;
  void *v14;
  int v15;

  v8 = a1 + 64;
  v7 = *(_QWORD *)(a1 + 64);
  v9 = *(_QWORD *)(v8 + 8) - v7;
  if (a4)
  {
    if (v9 <= 23)
    {
      rapidjson::internal::Stack<FIK::RapidJsonAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>>(a1 + 40, 1);
      v7 = *(_QWORD *)(a1 + 64);
    }
    *(_QWORD *)(a1 + 64) = v7 + 24;
    v10 = *(unint64_t **)(a1 + 24);
    *(_QWORD *)v7 = 0;
    *(_QWORD *)(v7 + 8) = 0;
    *(_QWORD *)(v7 + 16) = 0;
    v11 = &rapidjson::GenericStringRef<char>::emptyString;
    if (a2)
      v11 = a2;
    v14 = v11;
    v15 = a3;
    rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::SetStringRaw((_WORD *)v7, (uint64_t)&v14, v10);
  }
  else
  {
    if (v9 <= 23)
    {
      rapidjson::internal::Stack<FIK::RapidJsonAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>>(a1 + 40, 1);
      v7 = *(_QWORD *)(a1 + 64);
    }
    *(_QWORD *)(a1 + 64) = v7 + 24;
    *(_QWORD *)(v7 + 16) = 0;
    v12 = &rapidjson::GenericStringRef<char>::emptyString;
    *(_WORD *)(v7 + 22) = 1029;
    if (a2)
      v12 = a2;
    *(_QWORD *)v7 = 0;
    *(_QWORD *)(v7 + 8) = v12;
    *(_DWORD *)v7 = a3;
  }
  return 1;
}

uint64_t rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,FIK::RapidJsonAllocator>::ParseHex4<rapidjson::EncodedInputStream<rapidjson::UTF8<char>,rapidjson::MemoryStream>>(uint64_t result, uint64_t **a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;

  v3 = result;
  v4 = 0;
  LODWORD(result) = 0;
  v5 = *a2;
  v6 = (*a2)[2];
  v7 = **a2;
  while (v7 + v4 != v6)
  {
    v8 = *(char *)(v7 + v4);
    if ((v8 - 48) >= 0xA)
    {
      if (*(unsigned __int8 *)(v7 + v4) - 65 >= 6)
      {
        if (*(unsigned __int8 *)(v7 + v4) - 97 >= 6)
          break;
        v9 = -87;
      }
      else
      {
        v9 = -55;
      }
    }
    else
    {
      v9 = -48;
    }
    result = (v8 + 16 * result + v9);
    *v5 = v7 + v4++ + 1;
    if ((_DWORD)v4 == 4)
      return result;
  }
  result = 0;
  *(_DWORD *)(v3 + 48) = 8;
  *(_QWORD *)(v3 + 56) = a3;
  return result;
}

uint64_t *rapidjson::UTF8<char>::Encode<rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,FIK::RapidJsonAllocator>::StackStream<char>>(uint64_t *result, unsigned int a2)
{
  uint64_t *v3;
  uint64_t v4;
  _BYTE *v5;
  _DWORD *v6;
  unsigned int v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  _BYTE *v16;
  char v17;
  uint64_t v18;
  _BYTE *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  _BYTE *v23;
  unsigned int v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  _BYTE *v28;

  v3 = result;
  if (a2 <= 0x7F)
  {
    v4 = *result;
    v5 = *(_BYTE **)(*result + 24);
    if ((uint64_t)(*(_QWORD *)(*result + 32) - (_QWORD)v5) <= 0)
    {
      result = (uint64_t *)rapidjson::internal::Stack<FIK::RapidJsonAllocator>::Expand<char>(*result, 1);
      v5 = *(_BYTE **)(v4 + 24);
    }
    *(_QWORD *)(v4 + 24) = v5 + 1;
    *v5 = a2;
    v6 = v3 + 1;
    goto LABEL_27;
  }
  if (a2 <= 0x7FF)
  {
    v7 = (a2 >> 6) | 0xFFFFFFC0;
    v8 = *result;
    v9 = *(_BYTE **)(*result + 24);
    if ((uint64_t)(*(_QWORD *)(*result + 32) - (_QWORD)v9) <= 0)
    {
      result = (uint64_t *)rapidjson::internal::Stack<FIK::RapidJsonAllocator>::Expand<char>(*result, 1);
      v9 = *(_BYTE **)(v8 + 24);
    }
    *(_QWORD *)(v8 + 24) = v9 + 1;
    *v9 = v7;
    v6 = v3 + 1;
    ++*((_DWORD *)v3 + 2);
LABEL_24:
    v27 = *v3;
    v28 = *(_BYTE **)(v27 + 24);
    if ((uint64_t)(*(_QWORD *)(v27 + 32) - (_QWORD)v28) <= 0)
    {
      result = (uint64_t *)rapidjson::internal::Stack<FIK::RapidJsonAllocator>::Expand<char>(v27, 1);
      v28 = *(_BYTE **)(v27 + 24);
    }
    *(_QWORD *)(v27 + 24) = v28 + 1;
    *v28 = a2 & 0x3F | 0x80;
    goto LABEL_27;
  }
  v10 = *result;
  v11 = *(_BYTE **)(*result + 24);
  v12 = *(_QWORD *)(*result + 32) - (_QWORD)v11;
  if (HIWORD(a2))
  {
    v20 = (a2 >> 18) | 0xFFFFFFF0;
    if (v12 <= 0)
    {
      result = (uint64_t *)rapidjson::internal::Stack<FIK::RapidJsonAllocator>::Expand<char>(*result, 1);
      v11 = *(_BYTE **)(v10 + 24);
    }
    *(_QWORD *)(v10 + 24) = v11 + 1;
    *v11 = v20;
    v6 = v3 + 1;
    ++*((_DWORD *)v3 + 2);
    v21 = (a2 >> 12) & 0x3F | 0xFFFFFF80;
    v22 = *v3;
    v23 = *(_BYTE **)(*v3 + 24);
    if ((uint64_t)(*(_QWORD *)(*v3 + 32) - (_QWORD)v23) <= 0)
    {
      result = (uint64_t *)rapidjson::internal::Stack<FIK::RapidJsonAllocator>::Expand<char>(*v3, 1);
      v21 = (a2 >> 12) & 0x3F | 0xFFFFFF80;
      v23 = *(_BYTE **)(v22 + 24);
    }
    *(_QWORD *)(v22 + 24) = v23 + 1;
    *v23 = v21;
    ++*((_DWORD *)v3 + 2);
    v24 = (a2 >> 6) & 0x3F | 0xFFFFFF80;
    v25 = *v3;
    v26 = *(_BYTE **)(*v3 + 24);
    if ((uint64_t)(*(_QWORD *)(*v3 + 32) - (_QWORD)v26) <= 0)
    {
      result = (uint64_t *)rapidjson::internal::Stack<FIK::RapidJsonAllocator>::Expand<char>(*v3, 1);
      v24 = (a2 >> 6) & 0x3F | 0xFFFFFF80;
      v26 = *(_BYTE **)(v25 + 24);
    }
    *(_QWORD *)(v25 + 24) = v26 + 1;
    *v26 = v24;
    ++*((_DWORD *)v3 + 2);
    goto LABEL_24;
  }
  v13 = (a2 >> 12) | 0xFFFFFFE0;
  if (v12 <= 0)
  {
    result = (uint64_t *)rapidjson::internal::Stack<FIK::RapidJsonAllocator>::Expand<char>(*result, 1);
    v11 = *(_BYTE **)(v10 + 24);
  }
  *(_QWORD *)(v10 + 24) = v11 + 1;
  *v11 = v13;
  v6 = v3 + 1;
  ++*((_DWORD *)v3 + 2);
  v14 = (a2 >> 6) & 0x3F | 0xFFFFFF80;
  v15 = *v3;
  v16 = *(_BYTE **)(*v3 + 24);
  if ((uint64_t)(*(_QWORD *)(*v3 + 32) - (_QWORD)v16) <= 0)
  {
    result = (uint64_t *)rapidjson::internal::Stack<FIK::RapidJsonAllocator>::Expand<char>(*v3, 1);
    v14 = (a2 >> 6) & 0x3F | 0xFFFFFF80;
    v16 = *(_BYTE **)(v15 + 24);
  }
  *(_QWORD *)(v15 + 24) = v16 + 1;
  *v16 = v14;
  ++*((_DWORD *)v3 + 2);
  v17 = a2 & 0x3F | 0x80;
  v18 = *v3;
  v19 = *(_BYTE **)(v18 + 24);
  if ((uint64_t)(*(_QWORD *)(v18 + 32) - (_QWORD)v19) <= 0)
  {
    result = (uint64_t *)rapidjson::internal::Stack<FIK::RapidJsonAllocator>::Expand<char>(v18, 1);
    v17 = a2 & 0x3F | 0x80;
    v19 = *(_BYTE **)(v18 + 24);
  }
  *(_QWORD *)(v18 + 24) = v19 + 1;
  *v19 = v17;
LABEL_27:
  ++*v6;
  return result;
}

FIK::RapidJsonAllocator *rapidjson::internal::Stack<FIK::RapidJsonAllocator>::Expand<char>(uint64_t a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  FIK::RapidJsonAllocator *v6;
  FIK::RapidJsonAllocator *v7;
  void (***v8)(FIK::CrtAllocator *__hidden);
  uint64_t v9;
  FIK::RapidJsonAllocator *v10;
  FIK::RapidJsonAllocator *result;

  v4 = *(char **)(a1 + 16);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 32) - (_QWORD)v4;
    v6 = (FIK::RapidJsonAllocator *)(v5 + ((v5 + 1) >> 1));
    v7 = *(FIK::RapidJsonAllocator **)a1;
  }
  else
  {
    v7 = *(FIK::RapidJsonAllocator **)a1;
    if (*(_QWORD *)a1)
    {
      v4 = 0;
    }
    else
    {
      v8 = FIK::defaultAllocator(0);
      v7 = (FIK::RapidJsonAllocator *)((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, uint64_t))(*v8)[2])(v8, 1, 8);
      *(_QWORD *)a1 = v7;
      *(_QWORD *)(a1 + 8) = v7;
      v4 = *(char **)(a1 + 16);
    }
    v6 = *(FIK::RapidJsonAllocator **)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 32) - (_QWORD)v4;
  }
  v9 = *(_QWORD *)(a1 + 24) - (_QWORD)v4;
  if ((unint64_t)v6 <= v9 + a2)
    v10 = (FIK::RapidJsonAllocator *)(v9 + a2);
  else
    v10 = v6;
  result = FIK::RapidJsonAllocator::Realloc(v7, v4, v5, v10);
  *(_QWORD *)(a1 + 16) = result;
  *(_QWORD *)(a1 + 24) = (char *)result + v9;
  *(_QWORD *)(a1 + 32) = (char *)v10 + (_QWORD)result;
  return result;
}

void *rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::SetStringRaw(_WORD *__dst, uint64_t a2, unint64_t *a3)
{
  _QWORD *v4;
  uint64_t v5;
  void *result;

  v4 = __dst;
  if (*(_DWORD *)(a2 + 8) > 0x15u)
  {
    __dst[11] = 3077;
    *(_DWORD *)__dst = *(_DWORD *)(a2 + 8);
    v5 = rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>::Malloc(a3, (*(_DWORD *)(a2 + 8) + 1));
    v4[1] = v5;
    v4 = (_QWORD *)v5;
  }
  else
  {
    __dst[11] = 7173;
    *((_BYTE *)__dst + 21) = 21 - *(_BYTE *)(a2 + 8);
  }
  result = memcpy(v4, *(const void **)a2, *(unsigned int *)(a2 + 8));
  *((_BYTE *)v4 + *(unsigned int *)(a2 + 8)) = 0;
  return result;
}

uint64_t rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>::Malloc(unint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;

  if (!a2)
    return 0;
  v3 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = *(_QWORD **)a1[2];
  v5 = v4[1];
  v6 = v5 + v3;
  if (v5 + v3 <= *v4)
  {
LABEL_3:
    result = (uint64_t)v4 + v5 + 24;
    v4[1] = v6;
    return result;
  }
  if (*a1 <= v3)
    v8 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  else
    v8 = *a1;
  if (rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>::AddChunk((FIK *)a1, v8))
  {
    v4 = *(_QWORD **)a1[2];
    v5 = v4[1];
    v6 = v5 + v3;
    goto LABEL_3;
  }
  return 0;
}

uint64_t rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>::AddChunk(FIK *a1, uint64_t a2)
{
  FIK *v3;
  void (***v4)(FIK::CrtAllocator *__hidden);
  void (***v5)(FIK::CrtAllocator *__hidden);
  uint64_t result;
  uint64_t *v7;

  v3 = a1;
  if (!*((_QWORD *)a1 + 1))
  {
    v4 = FIK::defaultAllocator(a1);
    a1 = (FIK *)((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, uint64_t))(*v4)[2])(v4, 1, 8);
    *((_QWORD *)v3 + 1) = a1;
    *(_QWORD *)(*((_QWORD *)v3 + 2) + 8) = a1;
  }
  if (a2 == -24)
    return 0;
  v5 = FIK::defaultAllocator(a1);
  result = ((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, uint64_t))(*v5)[2])(v5, a2 + 24, 8);
  if (result)
  {
    *(_QWORD *)result = a2;
    *(_QWORD *)(result + 8) = 0;
    v7 = (uint64_t *)*((_QWORD *)v3 + 2);
    *(_QWORD *)(result + 16) = *v7;
    *v7 = result;
    return 1;
  }
  return result;
}

uint64_t rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>,FIK::RapidJsonAllocator>::StartObject(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) - v2 <= 23)
  {
    rapidjson::internal::Stack<FIK::RapidJsonAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>>(a1 + 40, 1);
    v2 = *(_QWORD *)(a1 + 64);
  }
  *(_QWORD *)(a1 + 64) = v2 + 24;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)v2 = 0;
  *(_WORD *)(v2 + 22) = 3;
  return 1;
}

uint64_t rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>,FIK::RapidJsonAllocator>::EndObject(uint64_t a1, unsigned int a2)
{
  _WORD *v3;
  unint64_t *v4;
  uint64_t v5;
  void *v6;

  v3 = (_WORD *)(*(_QWORD *)(a1 + 64) - 48 * a2);
  *(_QWORD *)(a1 + 64) = v3;
  v4 = *(unint64_t **)(a1 + 24);
  *(v3 - 1) = 3;
  if (a2)
  {
    v5 = 48 * a2;
    v6 = (void *)rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>::Malloc(v4, v5);
    *((_QWORD *)v3 - 2) = v6;
    memcpy(v6, v3, v5);
  }
  else
  {
    *((_QWORD *)v3 - 2) = 0;
  }
  *((_DWORD *)v3 - 6) = a2;
  *((_DWORD *)v3 - 5) = a2;
  return 1;
}

uint64_t rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>,FIK::RapidJsonAllocator>::StartArray(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) - v2 <= 23)
  {
    rapidjson::internal::Stack<FIK::RapidJsonAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>>(a1 + 40, 1);
    v2 = *(_QWORD *)(a1 + 64);
  }
  *(_QWORD *)(a1 + 64) = v2 + 24;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)v2 = 0;
  *(_WORD *)(v2 + 22) = 4;
  return 1;
}

uint64_t rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>,FIK::RapidJsonAllocator>::EndArray(uint64_t a1, unsigned int a2)
{
  _WORD *v3;
  unint64_t *v4;
  uint64_t v5;
  void *v6;

  v3 = (_WORD *)(*(_QWORD *)(a1 + 64) - 24 * a2);
  *(_QWORD *)(a1 + 64) = v3;
  v4 = *(unint64_t **)(a1 + 24);
  *(v3 - 1) = 4;
  if (a2)
  {
    v5 = 24 * a2;
    v6 = (void *)rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>::Malloc(v4, v5);
    *((_QWORD *)v3 - 2) = v6;
    memcpy(v6, v3, v5);
  }
  else
  {
    *((_QWORD *)v3 - 2) = 0;
  }
  *((_DWORD *)v3 - 6) = a2;
  *((_DWORD *)v3 - 5) = a2;
  return 1;
}

uint64_t rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>,FIK::RapidJsonAllocator>::Double(uint64_t a1, double a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) - v4 <= 23)
  {
    rapidjson::internal::Stack<FIK::RapidJsonAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>>(a1 + 40, 1);
    v4 = *(_QWORD *)(a1 + 64);
  }
  *(_QWORD *)(a1 + 64) = v4 + 24;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(double *)v4 = a2;
  *(_WORD *)(v4 + 22) = 534;
  return 1;
}

uint64_t rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>,FIK::RapidJsonAllocator>::Int64(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  __int16 v5;
  __int16 v6;

  v4 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) - v4 <= 23)
  {
    rapidjson::internal::Stack<FIK::RapidJsonAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>>(a1 + 40, 1);
    v4 = *(_QWORD *)(a1 + 64);
  }
  *(_QWORD *)(a1 + 64) = v4 + 24;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)v4 = a2;
  *(_WORD *)(v4 + 22) = 150;
  if ((a2 & 0x8000000000000000) != 0)
  {
    if (a2 >= 0xFFFFFFFF80000000)
    {
      v6 = 182;
      goto LABEL_11;
    }
  }
  else
  {
    if (HIDWORD(a2))
      v5 = 406;
    else
      v5 = 470;
    *(_WORD *)(v4 + 22) = v5;
    if (!(a2 >> 31))
    {
      v6 = v5 | 0x20;
LABEL_11:
      *(_WORD *)(v4 + 22) = v6;
    }
  }
  return 1;
}

uint64_t rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>,FIK::RapidJsonAllocator>::Uint64(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int16 v5;

  v4 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) - v4 <= 23)
  {
    rapidjson::internal::Stack<FIK::RapidJsonAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>>(a1 + 40, 1);
    v4 = *(_QWORD *)(a1 + 64);
  }
  *(_QWORD *)(a1 + 64) = v4 + 24;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)v4 = a2;
  if (a2 < 0)
    v5 = 278;
  else
    v5 = 406;
  *(_WORD *)(v4 + 22) = v5;
  if (!HIDWORD(a2))
  {
    *(_WORD *)(v4 + 22) = v5 | 0x40;
    if (!((unint64_t)a2 >> 31))
      *(_WORD *)(v4 + 22) = v5 | 0x60;
  }
  return 1;
}

uint64_t rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>,FIK::RapidJsonAllocator>::Int(uint64_t a1, int a2)
{
  uint64_t v4;
  __int16 v5;

  v4 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) - v4 <= 23)
  {
    rapidjson::internal::Stack<FIK::RapidJsonAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>>(a1 + 40, 1);
    v4 = *(_QWORD *)(a1 + 64);
  }
  *(_QWORD *)(a1 + 64) = v4 + 24;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)v4 = a2;
  if (a2 < 0)
    v5 = 182;
  else
    v5 = 502;
  *(_WORD *)(v4 + 22) = v5;
  return 1;
}

uint64_t rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>,FIK::RapidJsonAllocator>::Uint(uint64_t a1, int a2)
{
  uint64_t v4;
  __int16 v5;

  v4 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) - v4 <= 23)
  {
    rapidjson::internal::Stack<FIK::RapidJsonAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>>(a1 + 40, 1);
    v4 = *(_QWORD *)(a1 + 64);
  }
  *(_QWORD *)(a1 + 64) = v4 + 24;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)v4 = a2;
  if (a2 < 0)
    v5 = 470;
  else
    v5 = 502;
  *(_WORD *)(v4 + 22) = v5;
  return 1;
}

FIK::RapidJsonAllocator *rapidjson::internal::Stack<FIK::RapidJsonAllocator>::ShrinkToFit(FIK::RapidJsonAllocator *result)
{
  char *v1;
  char *v2;
  _QWORD *v3;
  int64_t v4;
  FIK::RapidJsonAllocator *v5;
  void (***v6)(FIK::CrtAllocator *__hidden);

  v1 = (char *)*((_QWORD *)result + 2);
  v2 = (char *)*((_QWORD *)result + 3);
  v3 = (_QWORD *)((char *)result + 16);
  v4 = v2 - v1;
  if (v2 == v1)
  {
    if (v2)
    {
      v6 = FIK::defaultAllocator(result);
      result = (FIK::RapidJsonAllocator *)((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), char *, _QWORD, uint64_t))(*v6)[3])(v6, v2, 0, 8);
    }
    *v3 = 0;
    v3[1] = 0;
    v3[2] = 0;
  }
  else
  {
    v5 = result;
    result = FIK::RapidJsonAllocator::Realloc(*(FIK::RapidJsonAllocator **)result, v1, *((_QWORD *)result + 4) - (_QWORD)v1, (FIK::RapidJsonAllocator *)(v2 - v1));
    *((_QWORD *)v5 + 2) = result;
    *((_QWORD *)v5 + 3) = (char *)result + v4;
    *((_QWORD *)v5 + 4) = (char *)result + v4;
  }
  return result;
}

uint64_t rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartObject(uint64_t a1)
{
  uint64_t v2;

  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((_BYTE *)a1);
  v2 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(a1 + 40) - v2 <= 15)
  {
    rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Level>((uint64_t *)(a1 + 8), 1);
    v2 = *(_QWORD *)(a1 + 32);
  }
  *(_QWORD *)(a1 + 32) = v2 + 16;
  *(_QWORD *)v2 = 0;
  *(_BYTE *)(v2 + 8) = 0;
  return rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteStartObject((uint64_t **)a1);
}

uint64_t rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndObject(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  _BYTE *v5;

  v2 = a1[4];
  v3 = *(v2 - 2);
  a1[4] = v2 - 2;
  if (v3)
  {
    v4 = *a1;
    v5 = (_BYTE *)(*a1)[3];
    if ((*a1)[4] - (uint64_t)v5 <= 0)
    {
      rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(*a1, 1);
      v5 = (_BYTE *)v4[3];
    }
    v4[3] = (uint64_t)(v5 + 1);
    *v5 = 10;
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteIndent((uint64_t)a1);
  }
  rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteEndObject(a1);
  return 1;
}

uint64_t rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartArray(uint64_t a1)
{
  uint64_t v2;

  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((_BYTE *)a1);
  v2 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(a1 + 40) - v2 <= 15)
  {
    rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Level>((uint64_t *)(a1 + 8), 1);
    v2 = *(_QWORD *)(a1 + 32);
  }
  *(_QWORD *)(a1 + 32) = v2 + 16;
  *(_QWORD *)v2 = 0;
  *(_BYTE *)(v2 + 8) = 1;
  return rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteStartArray((uint64_t **)a1);
}

uint64_t rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndArray(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;

  v2 = a1[4];
  v3 = *(_QWORD *)(v2 - 16);
  a1[4] = v2 - 16;
  if (v3 && (*((_BYTE *)a1 + 68) & 1) == 0)
  {
    v4 = *a1;
    v5 = *(_BYTE **)(*a1 + 24);
    if ((uint64_t)(*(_QWORD *)(*a1 + 32) - (_QWORD)v5) <= 0)
    {
      rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>((uint64_t *)*a1, 1);
      v5 = *(_BYTE **)(v4 + 24);
    }
    *(_QWORD *)(v4 + 24) = v5 + 1;
    *v5 = 10;
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteIndent((uint64_t)a1);
  }
  rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteEndArray((uint64_t **)a1);
  return 1;
}

BOOL rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Double(uint64_t *a1, double a2)
{
  uint64_t v4;
  rapidjson::internal *v5;

  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(a1);
  if ((*(_QWORD *)&a2 & 0x7FF0000000000000) != 0x7FF0000000000000)
  {
    v4 = *a1;
    v5 = *(rapidjson::internal **)(*a1 + 24);
    if ((uint64_t)(*(_QWORD *)(*a1 + 32) - (_QWORD)v5) <= 24)
    {
      rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>((uint64_t *)*a1, 25);
      v5 = *(rapidjson::internal **)(v4 + 24);
    }
    *(_QWORD *)(v4 + 24) = (char *)v5 + 25;
    *(_QWORD *)(*a1 + 24) = rapidjson::internal::dtoa(v5, a2, (char *)*((unsigned int *)a1 + 14))
                          - (char *)v5
                          + *(_QWORD *)(*a1 + 24)
                          - 25;
  }
  return (*(_QWORD *)&a2 & 0x7FF0000000000000) != 0x7FF0000000000000;
}

uint64_t rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Int(_BYTE *a1, rapidjson::internal *a2)
{
  char *v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;

  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(a1);
  v5 = *(_QWORD *)a1;
  v6 = *(_BYTE **)(*(_QWORD *)a1 + 24);
  if ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 32) - (_QWORD)v6) <= 10)
  {
    rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(*(uint64_t **)a1, 11);
    v6 = *(_BYTE **)(v5 + 24);
  }
  *(_QWORD *)(v5 + 24) = v6 + 11;
  if ((a2 & 0x80000000) != 0)
  {
    *v6 = 45;
    v7 = v6 + 1;
    a2 = (rapidjson::internal *)-(int)a2;
  }
  else
  {
    v7 = v6;
  }
  *(_QWORD *)(*(_QWORD *)a1 + 24) = rapidjson::internal::u32toa(a2, v7, v4)
                                    - v6
                                    + *(_QWORD *)(*(_QWORD *)a1 + 24)
                                    - 11;
  return 1;
}

uint64_t rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Uint(_BYTE *a1, rapidjson::internal *a2)
{
  char *v4;
  uint64_t v5;
  _BYTE *v6;

  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(a1);
  v5 = *(_QWORD *)a1;
  v6 = *(_BYTE **)(*(_QWORD *)a1 + 24);
  if ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 32) - (_QWORD)v6) <= 9)
  {
    rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(*(uint64_t **)a1, 10);
    v6 = *(_BYTE **)(v5 + 24);
  }
  *(_QWORD *)(v5 + 24) = v6 + 10;
  *(_QWORD *)(*(_QWORD *)a1 + 24) = rapidjson::internal::u32toa(a2, v6, v4)
                                    - v6
                                    + *(_QWORD *)(*(_QWORD *)a1 + 24)
                                    - 10;
  return 1;
}

uint64_t rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Int64(_BYTE *a1, unint64_t a2)
{
  char *v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;

  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(a1);
  v5 = *(_QWORD *)a1;
  v6 = *(_BYTE **)(*(_QWORD *)a1 + 24);
  if ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 32) - (_QWORD)v6) <= 20)
  {
    rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(*(uint64_t **)a1, 21);
    v6 = *(_BYTE **)(v5 + 24);
  }
  *(_QWORD *)(v5 + 24) = v6 + 21;
  if ((a2 & 0x8000000000000000) != 0)
  {
    *v6 = 45;
    v7 = v6 + 1;
    a2 = -(uint64_t)a2;
  }
  else
  {
    v7 = v6;
  }
  *(_QWORD *)(*(_QWORD *)a1 + 24) = rapidjson::internal::u64toa(a2, v7, v4)
                                    - v6
                                    + *(_QWORD *)(*(_QWORD *)a1 + 24)
                                    - 21;
  return 1;
}

uint64_t rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Uint64(_BYTE *a1, unint64_t a2)
{
  char *v4;
  uint64_t v5;
  _BYTE *v6;

  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(a1);
  v5 = *(_QWORD *)a1;
  v6 = *(_BYTE **)(*(_QWORD *)a1 + 24);
  if ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 32) - (_QWORD)v6) <= 19)
  {
    rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(*(uint64_t **)a1, 20);
    v6 = *(_BYTE **)(v5 + 24);
  }
  *(_QWORD *)(v5 + 24) = v6 + 20;
  *(_QWORD *)(*(_QWORD *)a1 + 24) = rapidjson::internal::u64toa(a2, v6, v4)
                                    - v6
                                    + *(_QWORD *)(*(_QWORD *)a1 + 24)
                                    - 20;
  return 1;
}

_BYTE *rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(_BYTE *result)
{
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  _BYTE *v5;
  uint64_t *v6;
  _BYTE *v7;
  uint64_t *v8;
  _BYTE *v9;
  uint64_t *v10;
  _BYTE *v11;
  uint64_t *v12;
  char *v13;
  char v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;

  v1 = result;
  v2 = *((_QWORD *)result + 4);
  if (v2 == *((_QWORD *)result + 3))
  {
    result[60] = 1;
    return result;
  }
  v3 = *(_QWORD *)(v2 - 16);
  if (*(_BYTE *)(v2 - 8))
  {
    if (v3)
    {
      v4 = *(uint64_t **)result;
      v5 = *(_BYTE **)(*(_QWORD *)result + 24);
      if ((uint64_t)(*(_QWORD *)(*(_QWORD *)result + 32) - (_QWORD)v5) <= 0)
      {
        v16 = *(uint64_t **)result;
        result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(v4, 1);
        v4 = v16;
        v5 = (_BYTE *)v16[3];
      }
      v4[3] = (uint64_t)(v5 + 1);
      *v5 = 44;
      if ((v1[68] & 1) != 0)
      {
        v6 = *(uint64_t **)v1;
        v7 = *(_BYTE **)(*(_QWORD *)v1 + 24);
        if ((uint64_t)(*(_QWORD *)(*(_QWORD *)v1 + 32) - (_QWORD)v7) <= 0)
        {
          v19 = *(uint64_t **)v1;
          result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(v6, 1);
          v6 = v19;
          v7 = (_BYTE *)v19[3];
        }
        v6[3] = (uint64_t)(v7 + 1);
        *v7 = 32;
      }
    }
    if ((v1[68] & 1) != 0)
      goto LABEL_30;
    v8 = *(uint64_t **)v1;
    v9 = *(_BYTE **)(*(_QWORD *)v1 + 24);
    if ((uint64_t)(*(_QWORD *)(*(_QWORD *)v1 + 32) - (_QWORD)v9) <= 0)
    {
      v17 = *(uint64_t **)v1;
      rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(v8, 1);
      v8 = v17;
      v9 = (_BYTE *)v17[3];
    }
    v8[3] = (uint64_t)(v9 + 1);
    *v9 = 10;
    goto LABEL_29;
  }
  if (!v3)
    goto LABEL_20;
  v10 = *(uint64_t **)result;
  v11 = *(_BYTE **)(*(_QWORD *)result + 24);
  if ((v3 & 1) == 0)
  {
    if ((uint64_t)(*(_QWORD *)(*(_QWORD *)result + 32) - (_QWORD)v11) <= 0)
    {
      v20 = *(uint64_t **)result;
      result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(v10, 1);
      v10 = v20;
      v11 = (_BYTE *)v20[3];
    }
    v10[3] = (uint64_t)(v11 + 1);
    *v11 = 44;
LABEL_20:
    v12 = *(uint64_t **)v1;
    v13 = *(char **)(*(_QWORD *)v1 + 24);
    if ((uint64_t)(*(_QWORD *)(*(_QWORD *)v1 + 32) - (_QWORD)v13) <= 0)
    {
      v18 = *(uint64_t **)v1;
      result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(v12, 1);
      v12 = v18;
      v13 = (char *)v18[3];
    }
    v12[3] = (uint64_t)(v13 + 1);
    v14 = 10;
    goto LABEL_28;
  }
  if ((uint64_t)(*(_QWORD *)(*(_QWORD *)result + 32) - (_QWORD)v11) <= 0)
  {
    v21 = *(uint64_t **)result;
    result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(v10, 1);
    v10 = v21;
    v11 = (_BYTE *)v21[3];
  }
  v10[3] = (uint64_t)(v11 + 1);
  *v11 = 58;
  v15 = *(uint64_t **)v1;
  v13 = *(char **)(*(_QWORD *)v1 + 24);
  if ((uint64_t)(*(_QWORD *)(*(_QWORD *)v1 + 32) - (_QWORD)v13) <= 0)
  {
    v22 = *(uint64_t **)v1;
    result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(v15, 1);
    v15 = v22;
    v13 = (char *)v22[3];
  }
  v15[3] = (uint64_t)(v13 + 1);
  v14 = 32;
LABEL_28:
  *v13 = v14;
  if ((*(_BYTE *)(v2 - 16) & 1) == 0)
LABEL_29:
    result = rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteIndent((uint64_t)v1);
LABEL_30:
  ++*(_QWORD *)(v2 - 16);
  return result;
}

uint64_t rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteNull(uint64_t **a1)
{
  uint64_t *v2;
  _BYTE *v3;
  _BYTE *v4;
  _BYTE *v5;
  _BYTE *v6;

  v2 = *a1;
  v3 = (_BYTE *)v2[3];
  if (v2[4] - (uint64_t)v3 <= 3)
  {
    rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(v2, 4);
    v2 = *a1;
    v3 = (_BYTE *)(*a1)[3];
  }
  v2[3] = (uint64_t)(v3 + 1);
  *v3 = 110;
  v4 = (_BYTE *)(*a1)[3];
  (*a1)[3] = (uint64_t)(v4 + 1);
  *v4 = 117;
  v5 = (_BYTE *)(*a1)[3];
  (*a1)[3] = (uint64_t)(v5 + 1);
  *v5 = 108;
  v6 = (_BYTE *)(*a1)[3];
  (*a1)[3] = (uint64_t)(v6 + 1);
  *v6 = 108;
  return 1;
}

void *rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteIndent(uint64_t a1)
{
  int64_t v1;
  uint64_t *v2;
  int v3;
  void *v4;

  v1 = ((*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 4) * *(unsigned int *)(a1 + 64);
  v2 = *(uint64_t **)a1;
  v3 = *(unsigned __int8 *)(a1 + 61);
  v4 = *(void **)(*(_QWORD *)a1 + 24);
  if (v2[4] - (uint64_t)v4 < v1)
  {
    rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(v2, v1);
    v4 = (void *)v2[3];
  }
  v2[3] = (uint64_t)v4 + v1;
  return memset(v4, v3, v1);
}

char *rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  size_t v8;

  v4 = a1[2];
  if (v4)
  {
    v5 = a1[4] - v4 + ((unint64_t)(a1[4] - v4 + 1) >> 1);
  }
  else
  {
    if (*a1)
    {
      v4 = 0;
    }
    else
    {
      v6 = operator new();
      *a1 = v6;
      a1[1] = v6;
      v4 = a1[2];
    }
    v5 = a1[5];
  }
  v7 = a1[3] + a2 - v4;
  if (v5 <= v7)
    v8 = v7;
  else
    v8 = v5;
  return rapidjson::internal::Stack<rapidjson::CrtAllocator>::Resize(a1, v8);
}

char *rapidjson::internal::Stack<rapidjson::CrtAllocator>::Resize(_QWORD *a1, size_t size)
{
  void *v4;
  uint64_t v5;
  char *result;

  v4 = (void *)a1[2];
  v5 = a1[3];
  if (size)
  {
    result = (char *)malloc_type_realloc(v4, size, 0x5B5BF86EuLL);
  }
  else
  {
    free(v4);
    result = 0;
  }
  a1[2] = result;
  a1[3] = &result[v5 - (_QWORD)v4];
  a1[4] = &result[size];
  return result;
}

uint64_t rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteBool(uint64_t **a1, int a2)
{
  uint64_t *v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE *v6;
  char *v7;
  char v8;
  _BYTE *v9;
  _BYTE *v10;
  _BYTE *v11;

  v3 = *a1;
  v4 = (_BYTE *)v3[3];
  v5 = v3[4] - (_QWORD)v4;
  if (a2)
  {
    if (v5 <= 3)
    {
      rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(v3, 4);
      v3 = *a1;
      v4 = (_BYTE *)(*a1)[3];
    }
    v3[3] = (uint64_t)(v4 + 1);
    *v4 = 116;
    v6 = (_BYTE *)(*a1)[3];
    (*a1)[3] = (uint64_t)(v6 + 1);
    *v6 = 114;
    v7 = (char *)(*a1)[3];
    (*a1)[3] = (uint64_t)(v7 + 1);
    v8 = 117;
  }
  else
  {
    if (v5 <= 4)
    {
      rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(v3, 5);
      v3 = *a1;
      v4 = (_BYTE *)(*a1)[3];
    }
    v3[3] = (uint64_t)(v4 + 1);
    *v4 = 102;
    v9 = (_BYTE *)(*a1)[3];
    (*a1)[3] = (uint64_t)(v9 + 1);
    *v9 = 97;
    v10 = (_BYTE *)(*a1)[3];
    (*a1)[3] = (uint64_t)(v10 + 1);
    *v10 = 108;
    v7 = (char *)(*a1)[3];
    (*a1)[3] = (uint64_t)(v7 + 1);
    v8 = 115;
  }
  *v7 = v8;
  v11 = (_BYTE *)(*a1)[3];
  (*a1)[3] = (uint64_t)(v11 + 1);
  *v11 = 101;
  return 1;
}

uint64_t rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteStartObject(uint64_t **a1)
{
  uint64_t *v1;
  _BYTE *v2;

  v1 = *a1;
  v2 = (_BYTE *)(*a1)[3];
  if ((*a1)[4] - (uint64_t)v2 <= 0)
  {
    rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(*a1, 1);
    v2 = (_BYTE *)v1[3];
  }
  v1[3] = (uint64_t)(v2 + 1);
  *v2 = 123;
  return 1;
}

char *rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Level>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  size_t v8;

  v4 = a1[2];
  if (v4)
  {
    v5 = a1[4] - v4 + ((unint64_t)(a1[4] - v4 + 1) >> 1);
  }
  else
  {
    if (*a1)
    {
      v4 = 0;
    }
    else
    {
      v6 = operator new();
      *a1 = v6;
      a1[1] = v6;
      v4 = a1[2];
    }
    v5 = a1[5];
  }
  v7 = a1[3] + 16 * a2 - v4;
  if (v5 <= v7)
    v8 = v7;
  else
    v8 = v5;
  return rapidjson::internal::Stack<rapidjson::CrtAllocator>::Resize(a1, v8);
}

uint64_t rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteEndObject(uint64_t **a1)
{
  uint64_t *v1;
  _BYTE *v2;

  v1 = *a1;
  v2 = (_BYTE *)(*a1)[3];
  if ((*a1)[4] - (uint64_t)v2 <= 0)
  {
    rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(*a1, 1);
    v2 = (_BYTE *)v1[3];
  }
  v1[3] = (uint64_t)(v2 + 1);
  *v2 = 125;
  return 1;
}

uint64_t rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteStartArray(uint64_t **a1)
{
  uint64_t *v1;
  _BYTE *v2;

  v1 = *a1;
  v2 = (_BYTE *)(*a1)[3];
  if ((*a1)[4] - (uint64_t)v2 <= 0)
  {
    rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(*a1, 1);
    v2 = (_BYTE *)v1[3];
  }
  v1[3] = (uint64_t)(v2 + 1);
  *v2 = 91;
  return 1;
}

uint64_t rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteEndArray(uint64_t **a1)
{
  uint64_t *v1;
  _BYTE *v2;

  v1 = *a1;
  v2 = (_BYTE *)(*a1)[3];
  if ((*a1)[4] - (uint64_t)v2 <= 0)
  {
    rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(*a1, 1);
    v2 = (_BYTE *)v1[3];
  }
  v1[3] = (uint64_t)(v2 + 1);
  *v2 = 93;
  return 1;
}

uint64_t rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString(uint64_t **a1, int8x16_t *a2, unsigned int a3)
{
  uint64_t *v6;
  uint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  int8x16_t v10;
  int8x16_t v11;
  uint8x16_t v12;
  int8x16_t *i;
  unint64_t v14;
  unint64_t v15;
  int v16;
  _BYTE *v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t *v20;
  unint64_t v21;
  int v22;
  _BYTE *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  _BYTE *v29;
  _BYTE *v30;
  _BYTE *v31;
  char v32;
  _BYTE *v33;
  _BYTE *v34;

  v6 = *a1;
  v7 = 6 * a3 + 2;
  v8 = (_BYTE *)v6[3];
  if (v6[4] - (uint64_t)v8 < v7)
  {
    rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(v6, v7);
    v6 = *a1;
    v8 = (_BYTE *)(*a1)[3];
  }
  v6[3] = (uint64_t)(v8 + 1);
  v9 = (unint64_t)a2->u64 + a3;
  *v8 = 34;
  v10.i64[0] = 0x2222222222222222;
  v10.i64[1] = 0x2222222222222222;
  v11.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
  v11.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
  v12.i64[0] = 0x2020202020202020;
  v12.i64[1] = 0x2020202020202020;
  for (i = a2; ; i = (int8x16_t *)((char *)i + 1))
  {
    v14 = (char *)i - (char *)a2;
    if (a3 < 0x10 || v14 >= a3)
    {
      if (a3 > 0xF)
        break;
    }
    else
    {
      v15 = ((unint64_t)&i->u64[1] + 7) & 0xFFFFFFFFFFFFFFF0;
      if (v9 < v15)
        goto LABEL_22;
      if (i == (int8x16_t *)v15)
        goto LABEL_13;
      while (1)
      {
        v16 = i->i8[0];
        if (v16 < 32 || v16 == 34 || i->i8[0] == 92)
          break;
        i = (int8x16_t *)((char *)i + 1);
        v17 = (_BYTE *)(*a1)[3];
        (*a1)[3] = (uint64_t)(v17 + 1);
        *v17 = v16;
        if (i == (int8x16_t *)v15)
        {
          for (i = (int8x16_t *)v15; ; ++i)
          {
LABEL_13:
            if (i == (int8x16_t *)(v9 & 0xFFFFFFFFFFFFFFF0))
            {
              i = (int8x16_t *)(v9 & 0xFFFFFFFFFFFFFFF0);
              goto LABEL_20;
            }
            v18 = *i;
            v19 = vrev64q_s8(vorrq_s8(vorrq_s8(vceqq_s8(*i, v10), vceqq_s8(*i, v11)), (int8x16_t)vcgtq_u8(v12, *(uint8x16_t *)i)));
            if (v19.i64[0])
              break;
            if (v19.i64[1])
            {
              v26 = (__clz(v19.u64[1]) >> 3) | 8;
              v25 = (*a1)[3];
              (*a1)[3] = v25 + v26;
              goto LABEL_29;
            }
            v20 = (int8x16_t *)(*a1)[3];
            (*a1)[3] = (uint64_t)v20[1].i64;
            *v20 = v18;
          }
          v24 = __clz(v19.u64[0]);
          v25 = (*a1)[3];
          (*a1)[3] = v25 + (v24 >> 3);
          if (HIBYTE(v19.i64[0]))
          {
            v26 = 0;
            goto LABEL_31;
          }
          v26 = v24 >> 3;
LABEL_29:
          v27 = 0;
          do
          {
            *(_BYTE *)(v25 + v27) = i->i8[v27];
            ++v27;
          }
          while (v26 != v27);
LABEL_31:
          i = (int8x16_t *)((char *)i + v26);
          break;
        }
      }
LABEL_20:
      v14 = (char *)i - (char *)a2;
    }
    if (v14 >= a3)
      break;
LABEL_22:
    v21 = i->u8[0];
    v22 = rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString(char const*,unsigned int)::escape[v21];
    v23 = (_BYTE *)(*a1)[3];
    (*a1)[3] = (uint64_t)(v23 + 1);
    if (v22)
    {
      *v23 = 92;
      v28 = (_BYTE *)(*a1)[3];
      (*a1)[3] = (uint64_t)(v28 + 1);
      *v28 = v22;
      if (v22 == 117)
      {
        v29 = (_BYTE *)(*a1)[3];
        (*a1)[3] = (uint64_t)(v29 + 1);
        *v29 = 48;
        v30 = (_BYTE *)(*a1)[3];
        (*a1)[3] = (uint64_t)(v30 + 1);
        *v30 = 48;
        LOBYTE(v30) = rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString(char const*,unsigned int)::hexDigits[v21 >> 4];
        v31 = (_BYTE *)(*a1)[3];
        (*a1)[3] = (uint64_t)(v31 + 1);
        *v31 = (_BYTE)v30;
        v32 = rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString(char const*,unsigned int)::hexDigits[v21 & 0xF];
        v33 = (_BYTE *)(*a1)[3];
        (*a1)[3] = (uint64_t)(v33 + 1);
        *v33 = v32;
      }
    }
    else
    {
      *v23 = v21;
    }
  }
  v34 = (_BYTE *)(*a1)[3];
  (*a1)[3] = (uint64_t)(v34 + 1);
  *v34 = 34;
  return 1;
}

char *rapidjson::internal::dtoa(rapidjson::internal *this, double a2, char *a3)
{
  rapidjson::internal *v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char v11;
  double v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26[2];
  _QWORD v27[2];
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;

  v3 = this;
  v4 = *(_QWORD *)&a2;
  if ((*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
  {
    v5 = (int)a3;
    if (a2 < 0.0)
    {
      *(_BYTE *)this = 45;
      v3 = (rapidjson::internal *)((char *)this + 1);
      v4 = *(_QWORD *)&a2 ^ 0x8000000000000000;
    }
    v23 = 0;
    if (((v4 >> 52) & 0x7FF) != 0)
      v6 = v4 & 0xFFFFFFFFFFFFFLL | 0x10000000000000;
    else
      v6 = v4 & 0xFFFFFFFFFFFFFLL;
    if (((v4 >> 52) & 0x7FF) != 0)
      v7 = ((v4 >> 52) & 0x7FF) - 1075;
    else
      v7 = -1074;
    v30 = (2 * (v6 & 0x1FFFFFFFFFFFFFLL)) | 1;
    v31 = v7 - 1;
    v8 = rapidjson::internal::DiyFp::NormalizeBoundary((rapidjson::internal::DiyFp *)&v30);
    v10 = 2 * v6 - 1;
    if (v6 == 0x10000000000000)
      v11 = -2;
    else
      v11 = -1;
    if (v6 == 0x10000000000000)
      v10 = 0x3FFFFFFFFFFFFFLL;
    v28 = v8;
    v29 = v9;
    v30 = v10 << (v11 + v7 - v9);
    v31 = v9;
    v12 = (double)(-61 - v9) * 0.301029996 + 347.0;
    v13 = (int)v12;
    if (v12 - (double)(int)v12 > 0.0)
      ++v13;
    v14 = (v13 >> 3) + 1;
    v22 = 348 - 8 * v14;
    v15 = rapidjson::internal::GetCachedPowerByIndex(unsigned long)::kCachedPowers_F[v14];
    v16 = rapidjson::internal::GetCachedPowerByIndex(unsigned long)::kCachedPowers_E[v14];
    v27[0] = v15;
    v27[1] = v16;
    LODWORD(v16) = __clz(v6);
    v24 = v6 << v16;
    v25 = (v7 - v16);
    v26[0] = rapidjson::internal::DiyFp::operator*(&v24, v27);
    v26[1] = v17;
    v18 = rapidjson::internal::DiyFp::operator*(&v28, v27);
    v25 = v19;
    v20 = rapidjson::internal::DiyFp::operator*(&v30, v27);
    v24 = v18 - 1;
    rapidjson::internal::DigitGen(v26, (uint64_t *)&v24, v18 - 1 + ~v20, (uint64_t)v3, (int *)&v23, &v22);
    return rapidjson::internal::Prettify(v3, (char *)v23, v22, v5);
  }
  else
  {
    if ((*(_QWORD *)&a2 & 0x8000000000000000) != 0)
    {
      *(_BYTE *)this = 45;
      v3 = (rapidjson::internal *)((char *)this + 1);
    }
    *(_WORD *)v3 = 11824;
    *((_BYTE *)v3 + 2) = 48;
    return (char *)v3 + 3;
  }
}

char *rapidjson::internal::Prettify(rapidjson::internal *this, char *a2, int a3, int a4)
{
  int v6;
  int v8;
  char *v9;
  int v10;
  char *v11;
  __int16 v12;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int i;
  int v19;
  unsigned int v20;
  uint64_t v21;

  v6 = (int)a2;
  v8 = a3 + (_DWORD)a2;
  if ((a3 & 0x80000000) == 0 && v8 <= 21)
  {
    if (a3)
    {
      v9 = (char *)this + (int)a2;
      if (v8 <= (int)a2 + 1)
        v10 = (_DWORD)a2 + 1;
      else
        v10 = a3 + (_DWORD)a2;
      memset(v9, 48, (v10 + ~(_DWORD)a2) + 1);
    }
    v11 = (char *)this + v8;
    v12 = 12334;
    goto LABEL_9;
  }
  v14 = v8 - 1;
  if ((v8 - 1) <= 0x14)
  {
    v15 = (v8 + 1);
    memmove((char *)this + v15, (char *)this + v8, -a3);
    *((_BYTE *)this + v8) = 46;
    if (a4 + a3 >= 0)
      return (char *)this + v6 + 1;
    if (a4 >= 2)
    {
      v20 = v8 + a4;
      while (*((_BYTE *)this + v20) == 48)
      {
        if ((int)--v20 <= (int)v15)
          goto LABEL_32;
      }
      return (char *)this + (int)(v20 + 1);
    }
LABEL_32:
    v21 = (v8 + 2);
    return (char *)this + v21;
  }
  if (v8 == 0 || v8 >= 0xFFFFFFFB)
  {
    v16 = 2 - v8;
    memmove((char *)this + v16, this, (int)a2);
    *(_WORD *)this = 11824;
    if (v8 < 0)
    {
      if ((int)v16 <= 3)
        v17 = 3;
      else
        v17 = 2 - v8;
      memset((char *)this + 2, 48, (v17 - 2));
    }
    if (-a3 <= a4)
    {
      v21 = v16 + v6;
      return (char *)this + v21;
    }
    if (a4 >= 2)
    {
      for (i = a4 + 2; ; --i)
      {
        v19 = i - 1;
        if (*((_BYTE *)this + i - 1) != 48)
          break;
        if (v19 < 4)
          return (char *)this + 3;
      }
      return (char *)this + i;
    }
    return (char *)this + 3;
  }
  if (v8 < -a4)
  {
    *(_WORD *)this = 11824;
    *((_BYTE *)this + 2) = 48;
    return (char *)this + 3;
  }
  if ((_DWORD)a2 == 1)
  {
    *((_BYTE *)this + 1) = 101;
    if ((v14 & 0x80000000) == 0)
    {
      v11 = (char *)this + 2;
      goto LABEL_44;
    }
    v11 = (char *)this + 3;
    *((_BYTE *)this + 2) = 45;
  }
  else
  {
    memmove((char *)this + 2, (char *)this + 1, (int)a2 - 1);
    *((_BYTE *)this + 1) = 46;
    *((_BYTE *)this + v6 + 1) = 101;
    v11 = (char *)this + v6 + 2;
    if ((v14 & 0x80000000) == 0)
      goto LABEL_44;
    *v11++ = 45;
  }
  v14 = 1 - v8;
LABEL_44:
  if (v14 < 0x64)
  {
    if (v14 >= 0xA)
    {
      v12 = rapidjson::internal::GetDigitsLut(void)::cDigitsLut[v14];
LABEL_9:
      *(_WORD *)v11 = v12;
      return v11 + 2;
    }
    *v11 = v14 + 48;
    return v11 + 1;
  }
  else
  {
    *v11 = v14 / 0x64 + 48;
    *(_WORD *)(v11 + 1) = rapidjson::internal::GetDigitsLut(void)::cDigitsLut[v14 % 0x64];
    return v11 + 3;
  }
}

unint64_t rapidjson::internal::DiyFp::operator*(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v2 = HIDWORD(*a1);
  v3 = HIDWORD(*a2);
  v4 = v3 * (unint64_t)*a1;
  v5 = *a2 * (unint64_t)v2;
  return HIDWORD(v5)
       + v3 * (unint64_t)v2
       + HIDWORD(v4)
       + ((((*a2 * (unint64_t)*a1) >> 32)
         + v5
         + v4
         + 0x80000000) >> 32);
}

uint64_t rapidjson::internal::DigitGen(uint64_t *a1, uint64_t *a2, unint64_t a3, uint64_t a4, int *a5, _DWORD *a6)
{
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t result;
  unsigned int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  uint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  BOOL v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;

  v6 = -*((_DWORD *)a2 + 2);
  v7 = 1 << -*((_BYTE *)a2 + 8);
  v8 = *a2;
  v9 = *a1;
  v10 = *a2 - *a1;
  v11 = (unint64_t)*a2 >> -*((_BYTE *)a2 + 8);
  v12 = (v7 - 1) & v8;
  if (v11 < 0x5F5E100)
    v13 = 8;
  else
    v13 = 9;
  if (v11 >= 0x989680)
    v14 = v13;
  else
    v14 = 7;
  if (v11 >= 0xF4240)
    v15 = v14;
  else
    v15 = 6;
  if (v11 >= 0x186A0)
    v16 = v15;
  else
    v16 = 5;
  if (v11 >> 4 >= 0x271)
    v17 = v16;
  else
    v17 = 4;
  if (v11 >= 0x3E8)
    v18 = v17;
  else
    v18 = 3;
  if (v11 >= 0x64)
    LODWORD(result) = v18;
  else
    LODWORD(result) = 2;
  if (v11 < 0xA)
    LODWORD(result) = 1;
  *a5 = 0;
  while (2)
  {
    if ((int)result <= 0)
    {
      v34 = 1;
      v35 = rapidjson::internal::DigitGen(rapidjson::internal::DiyFp const&,rapidjson::internal::DiyFp const&,unsigned long long,char *,int *,int *)::kPow10;
      do
      {
        v36 = a3;
        v37 = 10 * v12;
        result = (v37 >> v6);
        v38 = *a5;
        if ((v37 >> v6))
          v39 = 0;
        else
          v39 = v38 == 0;
        if (!v39)
        {
          result = (v38 + 1);
          *a5 = result;
          *(_BYTE *)(a4 + v38) = (v37 >> v6) + 48;
        }
        a3 *= 10;
        v12 = v37 & (v7 - 1);
        --v34;
        ++v35;
      }
      while (10 * v36 <= v12);
      *a6 = *a6 + v34 - 1;
      if (v34 < -18)
        v40 = 0;
      else
        v40 = *v35;
      if (10 * v36 - v12 >= v7)
      {
        v41 = v40 * v10;
        if (v12 < v40 * v10)
        {
          v42 = *a5 - 1;
          v43 = -(uint64_t)v12;
          v44 = 10 * v36 - v7;
          v45 = v7 + v12;
          v46 = -(uint64_t)(v40 * v10);
          do
          {
            if (v45 >= v41 && v41 + v43 <= v46 + v45)
              break;
            --*(_BYTE *)(a4 + v42);
            if (v45 >= v41)
              break;
            v47 = v44 + v43;
            v43 -= v7;
            v45 += v7;
          }
          while (v47 >= v7);
        }
      }
    }
    else
    {
      result = (result - 1);
      v20 = 0;
      switch((int)result)
      {
        case 0:
          goto LABEL_38;
        case 1:
          v21 = v11 / 0xA;
          v20 = v11 % 0xA;
          goto LABEL_32;
        case 2:
          v21 = v11 / 0x64;
          v20 = v11 % 0x64;
          goto LABEL_32;
        case 3:
          v21 = v11 / 0x3E8;
          v20 = v11 % 0x3E8;
          goto LABEL_32;
        case 4:
          v21 = v11 / 0x2710;
          v20 = v11 % 0x2710;
LABEL_32:
          LODWORD(v11) = v21;
          goto LABEL_38;
        case 5:
          v23 = v11 / 0x186A0;
          v20 = v11 % 0x186A0;
          goto LABEL_37;
        case 6:
          v23 = v11 / 0xF4240;
          v20 = v11 % 0xF4240;
          goto LABEL_37;
        case 7:
          v23 = v11 / 0x989680;
          v20 = v11 % 0x989680;
          goto LABEL_37;
        case 8:
          v23 = v11 / 0x5F5E100;
          v20 = v11 % 0x5F5E100;
LABEL_37:
          LODWORD(v11) = v23;
LABEL_38:
          v24 = v11;
          v22 = *a5;
          LODWORD(v11) = v20;
          if (!v24)
            goto LABEL_39;
          goto LABEL_41;
        default:
          v22 = *a5;
LABEL_39:
          if (v22)
          {
            LOBYTE(v24) = 0;
LABEL_41:
            *a5 = v22 + 1;
            *(_BYTE *)(a4 + v22) = v24 + 48;
          }
          v25 = (unint64_t)v11 << v6;
          if (a3 < v25 + v12)
            continue;
          *a6 += result;
          if (v25 + v12 < v10)
          {
            v26 = rapidjson::internal::DigitGen(rapidjson::internal::DiyFp const&,rapidjson::internal::DiyFp const&,unsigned long long,char *,int *,int *)::kPow10[result] << v6;
            if (a3 - (v25 + v12) >= v26)
            {
              v27 = *a5 - 1;
              v28 = v10 - v12;
              v29 = -(uint64_t)v25;
              v30 = a3 - v12 - v26;
              v31 = v12 + v26 + v25;
              v32 = v9 - v8;
              do
              {
                if (v31 >= v10 && v28 + v29 <= v32 + v31)
                  break;
                --*(_BYTE *)(a4 + v27);
                if (v31 >= v10)
                  break;
                v33 = v30 + v29;
                v29 -= v26;
                v31 += v26;
              }
              while (v33 >= v26);
            }
          }
          break;
      }
    }
    return result;
  }
}

uint64_t rapidjson::internal::DiyFp::NormalizeBoundary(rapidjson::internal::DiyFp *this)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)this;
  v1 = *((_QWORD *)this + 1);
  if ((*(_QWORD *)this & 0x20000000000000) == 0)
  {
    v3 = __clz(v2 & 0x1FFFFFFFFFFFFFLL) - 10;
    v2 <<= v3;
    do
    {
      v1 = (v1 - 1) | v1 & 0xFFFFFFFF00000000;
      --v3;
    }
    while (v3);
  }
  return v2 << 10;
}

_BYTE *rapidjson::internal::u32toa(rapidjson::internal *this, _BYTE *a2, char *a3)
{
  unint64_t v3;
  _BYTE *v4;
  unsigned int v5;
  _BYTE *v6;

  if (this >> 4 <= 0x270)
  {
    if (this < 0x3E8)
    {
      if (this < 0x64)
      {
        if (this < 0xA)
          goto LABEL_10;
        goto LABEL_9;
      }
    }
    else
    {
      *a2++ = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut + 2 * ((unsigned __int16)this / 0x64u));
    }
    *a2++ = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut
            + ((2 * ((unsigned __int16)this / 0x64u)) | 1));
LABEL_9:
    *a2++ = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut + 2 * ((unsigned __int16)this % 0x64u));
LABEL_10:
    *a2 = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut
          + ((unsigned __int16)(2 * ((unsigned __int16)this % 0x64u)) | 1u));
    return a2 + 1;
  }
  if (this < 0x5F5E100)
  {
    v3 = (this / 0x7A120uLL) & 0x3FFE;
    if (this < 0x989680)
    {
      if (this <= 0xF423F)
      {
        if (this >> 5 < 0xC35)
          goto LABEL_16;
        goto LABEL_15;
      }
    }
    else
    {
      *a2++ = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut + v3);
    }
    *a2++ = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut + (v3 | 1));
LABEL_15:
    *a2++ = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut
            + 2 * ((unsigned __int16)(this / 0x2710) % 0x64u));
LABEL_16:
    *a2 = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut
          + ((unsigned __int16)(2 * ((unsigned __int16)(this / 0x2710) % 0x64u)) | 1u));
    a2[1] = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut + 2 * (this % 0x2710 / 0x64));
    a2[2] = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut
            + ((2 * (this % 0x2710 / 0x64)) | 1));
    a2[3] = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut + 2 * (this % 0x2710 % 0x64));
    a2[4] = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut
            + ((unsigned __int16)(2 * (this % 0x2710 % 0x64)) | 1u));
    return a2 + 5;
  }
  v5 = this % 0x5F5E100;
  if (this < 0x3B9ACA00)
  {
    *a2 = this / 0x5F5E100 + 48;
    v6 = a2 + 1;
  }
  else
  {
    *a2 = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut + 2 * (this / 0x5F5E100));
    v6 = a2 + 2;
    a2[1] = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut + 2 * (this / 0x5F5E100) + 1);
  }
  *(_WORD *)v6 = *(_WORD *)((char *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut + ((v5 / 0x7A120uLL) & 0x3FFE));
  *((_WORD *)v6 + 1) = *((_WORD *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut
                       + (unsigned __int16)(v5 / 0x2710) % 0x64u);
  *((_WORD *)v6 + 2) = *((_WORD *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut + v5 % 0x2710 / 0x64);
  v6[6] = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut + 2 * (v5 % 0x2710 % 0x64));
  v4 = v6 + 8;
  v6[7] = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut
          + (unsigned __int16)(2 * (v5 % 0x2710 % 0x64))
          + 1);
  return v4;
}

_BYTE *rapidjson::internal::u64toa(unint64_t this, _BYTE *a2, char *a3)
{
  unsigned int v3;
  unsigned int v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  unsigned int v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;

  if (this < 0x5F5E100)
  {
    if (this >> 4 <= 0x270)
    {
      if (this < 0x3E8)
      {
        if (this < 0x64)
        {
          if (this < 0xA)
            goto LABEL_15;
          goto LABEL_14;
        }
      }
      else
      {
        *a2++ = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut + 2 * ((unsigned __int16)this / 0x64u));
      }
      *a2++ = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut
              + ((2 * ((unsigned __int16)this / 0x64u)) | 1));
LABEL_14:
      *a2++ = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut + 2 * ((unsigned __int16)this % 0x64u));
LABEL_15:
      *a2 = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut
            + ((unsigned __int16)(2 * ((unsigned __int16)this % 0x64u)) | 1u));
      return a2 + 1;
    }
    v9 = (this / 0x7A120uLL) & 0x3FFE;
    if (this < 0x989680)
    {
      if (this < 0xF4240)
      {
        if (this >> 5 < 0xC35)
          goto LABEL_27;
        goto LABEL_26;
      }
    }
    else
    {
      *a2++ = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut + v9);
    }
    *a2++ = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut + (v9 | 1));
LABEL_26:
    *a2++ = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut
            + 2 * ((unsigned __int16)(this / 0x2710) % 0x64u));
LABEL_27:
    *a2 = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut
          + ((unsigned __int16)(2 * ((unsigned __int16)(this / 0x2710) % 0x64u)) | 1u));
    a2[1] = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut + 2 * (this % 0x2710 / 0x64));
    a2[2] = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut
            + ((2 * (this % 0x2710 / 0x64)) | 1));
    a2[3] = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut + 2 * (this % 0x2710 % 0x64));
    a2[4] = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut
            + ((unsigned __int16)(2 * (this % 0x2710 % 0x64)) | 1u));
    return a2 + 5;
  }
  if (this < 0x2386F26FC10000)
  {
    v3 = this % 0x5F5E100;
    v4 = this / 0x5F5E100;
    v5 = (v4 / 0x7A120uLL) & 0x3FFE;
    v6 = v3 / 0x2710;
    v7 = v3 % 0x2710;
    v8 = (v3 / 0x7A120uLL) & 0x3FFE;
    if (this < 0x38D7EA4C68000)
    {
      if (this < 0x5AF3107A4000)
      {
        if (this < 0x9184E72A000)
        {
          if (this < 0xE8D4A51000)
          {
            if (this < 0x174876E800)
            {
              if (this < 0x2540BE400)
              {
                if (this < 0x3B9ACA00)
                  goto LABEL_23;
                goto LABEL_22;
              }
LABEL_21:
              *a2++ = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut
                      + ((2 * (v4 % 0x2710 / 0x64)) | 1));
LABEL_22:
              *a2++ = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut + 2 * (v4 % 0x2710 % 0x64));
LABEL_23:
              *a2 = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut
                    + ((unsigned __int16)(2 * (v4 % 0x2710 % 0x64)) | 1u));
              a2[1] = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut + v8);
              a2[2] = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut + (v8 | 1));
              a2[3] = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut
                      + 2 * ((unsigned __int16)v6 % 0x64u));
              a2[4] = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut
                      + ((unsigned __int16)(2 * ((unsigned __int16)v6 % 0x64u)) | 1u));
              a2[5] = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut
                      + 2 * ((unsigned __int16)v7 / 0x64u));
              a2[6] = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut
                      + ((2 * ((unsigned __int16)v7 / 0x64u)) | 1));
              a2[7] = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut
                      + 2 * ((unsigned __int16)v7 % 0x64u));
              a2[8] = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut
                      + ((unsigned __int16)(2 * ((unsigned __int16)v7 % 0x64u)) | 1u));
              return a2 + 9;
            }
LABEL_20:
            *a2++ = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut + 2 * (v4 % 0x2710 / 0x64));
            goto LABEL_21;
          }
LABEL_19:
          *a2++ = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut
                  + ((unsigned __int16)(2 * ((unsigned __int16)(v4 / 0x2710) % 0x64u)) | 1u));
          goto LABEL_20;
        }
LABEL_18:
        *a2++ = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut
                + 2 * ((unsigned __int16)(v4 / 0x2710) % 0x64u));
        goto LABEL_19;
      }
    }
    else
    {
      *a2++ = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut + v5);
    }
    *a2++ = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut + (v5 | 1));
    goto LABEL_18;
  }
  v10 = this / 0x2386F26FC10000;
  v11 = this % 0x2386F26FC10000;
  if ((this / 0x2386F26FC10000) > 9)
  {
    if (v10 > 0x63)
    {
      v14 = (unsigned __int16)v10 / 0x64u;
      if (v10 > 0x3E7)
      {
        v15 = 2 * ((unsigned __int16)v10 % 0x64u);
        *(_WORD *)a2 = *((_WORD *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut + v14);
        a2[2] = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut + v15);
        v16 = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut + ((unsigned __int16)v15 & 0xFFFE) + 1);
        v12 = a2 + 4;
        a2[3] = v16;
      }
      else
      {
        *a2 = v14 + 48;
        *(_WORD *)(a2 + 1) = *((_WORD *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut
                             + (unsigned __int16)v10 % 0x64u);
        v12 = a2 + 3;
      }
    }
    else
    {
      *a2 = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut + 2 * (this / 0x2386F26FC10000));
      v12 = a2 + 2;
      a2[1] = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut
              + 2 * (this / 0x2386F26FC10000)
              + 1);
    }
  }
  else
  {
    *a2 = v10 + 48;
    v12 = a2 + 1;
  }
  v17 = v11 / 0x5F5E100;
  v18 = v11 % 0x5F5E100;
  *(_WORD *)v12 = *(_WORD *)((char *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut + ((v17 / 0x7A120uLL) & 0x3FFE));
  *((_WORD *)v12 + 1) = *((_WORD *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut
                        + (unsigned __int16)(v17 / 0x2710) % 0x64u);
  *((_WORD *)v12 + 2) = *((_WORD *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut + v17 % 0x2710 / 0x64);
  v12[6] = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut + 2 * (v17 % 0x2710 % 0x64));
  v12[7] = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut
           + (unsigned __int16)(2 * (v17 % 0x2710 % 0x64))
           + 1);
  *((_WORD *)v12 + 4) = *(_WORD *)((char *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut
                                 + ((v18 / 0x7A120uLL) & 0x3FFE));
  *((_WORD *)v12 + 5) = *((_WORD *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut
                        + (unsigned __int16)(v18 / 0x2710) % 0x64u);
  *((_WORD *)v12 + 6) = *((_WORD *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut + v18 % 0x2710 / 0x64);
  v12[14] = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut + 2 * (v18 % 0x2710 % 0x64));
  v13 = v12 + 16;
  v12[15] = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut
            + (unsigned __int16)(2 * (v18 % 0x2710 % 0x64))
            + 1);
  return v13;
}

uint64_t std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>(uint64_t a1, const char *a2)
{
  void (***v4)(FIK::CrtAllocator *__hidden);
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = FIK::defaultAllocator((FIK *)a1);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = strlen(a2);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = (void *)((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, uint64_t))(*v4)[2])(v4, v8 + 1, 128);
    *(_QWORD *)(a1 + 8) = v6;
    *(_QWORD *)(a1 + 16) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *(_BYTE *)(a1 + 23) = v5;
    v7 = (void *)a1;
    if (!v5)
      goto LABEL_9;
  }
  memmove(v7, a2, v6);
LABEL_9:
  *((_BYTE *)v7 + v6) = 0;
  return a1;
}

BOOL rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::StringEqual<rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>(unsigned int *a1, int *a2)
{
  unsigned int v2;
  int v3;

  if ((*((_WORD *)a1 + 11) & 0x1000) != 0)
    v2 = 21 - *((char *)a1 + 21);
  else
    v2 = *a1;
  v3 = 21 - *((char *)a2 + 21);
  if ((*((_WORD *)a2 + 11) & 0x1000) == 0)
    v3 = *a2;
  if (v2 != v3)
    return 0;
  if ((*((_WORD *)a1 + 11) & 0x1000) == 0)
    a1 = (unsigned int *)*((_QWORD *)a1 + 1);
  if ((*((_WORD *)a2 + 11) & 0x1000) == 0)
    a2 = (int *)*((_QWORD *)a2 + 1);
  return a1 == (unsigned int *)a2 || memcmp(a1, a2, v2) == 0;
}

double rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::GetDouble(_WORD *a1, double a2)
{
  __int16 v2;
  uint64_t v3;

  v2 = a1[11];
  if ((v2 & 0x200) != 0)
    return *(double *)a1;
  if ((v2 & 0x20) != 0)
    return (double)*(int *)a1;
  if ((v2 & 0x40) != 0)
  {
    LODWORD(a2) = *(_DWORD *)a1;
    return (double)*(unint64_t *)&a2;
  }
  else
  {
    v3 = *(_QWORD *)a1;
    if ((v2 & 0x80) != 0)
      return (double)v3;
    else
      return (double)(unint64_t)v3;
  }
}

uint64_t std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100](uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a3;
  *(_QWORD *)(a1 + 24) = *a3;
  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (a2 > 0x16)
  {
    v6 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v6 = a2 | 7;
    v7 = v6 + 1;
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, v6 + 1, 128);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v7 | 0x8000000000000000;
    *(_QWORD *)a1 = v8;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

_QWORD *std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(_QWORD *__src, void *a2, size_t a3)
{
  unint64_t v6;
  size_t v7;
  _QWORD *v8;
  size_t v9;

  if (*((char *)__src + 23) < 0)
  {
    v7 = __src[1];
    v6 = (__src[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  }
  else
  {
    v6 = 22;
    v7 = *((unsigned __int8 *)__src + 23);
  }
  if (v6 - v7 >= a3)
  {
    if (a3)
    {
      v8 = __src;
      if ((*((_BYTE *)__src + 23) & 0x80) != 0)
        v8 = (_QWORD *)*__src;
      memmove((char *)v8 + v7, a2, a3);
      v9 = v7 + a3;
      if (*((char *)__src + 23) < 0)
        __src[1] = v9;
      else
        *((_BYTE *)__src + 23) = v9 & 0x7F;
      *((_BYTE *)v8 + v9) = 0;
    }
  }
  else
  {
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::__grow_by_and_replace(__src, v6, a3 - v6 + v7, v7, v7, 0, a3, a2);
  }
  return __src;
}

_QWORD *std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::__grow_by_and_replace(_QWORD *__src, unint64_t a2, unint64_t a3, uint64_t a4, size_t __len, uint64_t a6, size_t a7, void *a8)
{
  _QWORD *v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  const void *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  size_t v21;

  if (0x7FFFFFFFFFFFFFF6 - a2 < a3)
    abort();
  v11 = __src;
  v12 = (char *)__src;
  if (*((char *)__src + 23) < 0)
    v12 = (char *)*__src;
  if (a2 >= 0x3FFFFFFFFFFFFFF3)
  {
    v14 = a4;
    v15 = a8;
    v16 = __src + 3;
    v17 = 0x7FFFFFFFFFFFFFF7;
    goto LABEL_15;
  }
  v13 = a3 + a2;
  if (a3 + a2 <= 2 * a2)
    v13 = 2 * a2;
  if (v13 <= 0x16)
  {
    v14 = a4;
    v15 = a8;
    v16 = __src + 3;
    v17 = 23;
    goto LABEL_15;
  }
  v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
  v19 = v13 | 7;
  if (v19 == 23)
    v19 = v18;
  v16 = __src + 3;
  v14 = a4;
  v15 = a8;
  v17 = v19 + 1;
  if (v19 != -1)
  {
LABEL_15:
    __src = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v16 + 16))(*v16, v17, 128);
    v20 = (char *)__src;
    if (!__len)
      goto LABEL_17;
    goto LABEL_16;
  }
  v17 = 0;
  v20 = 0;
  if (__len)
LABEL_16:
    __src = memmove(v20, v12, __len);
LABEL_17:
  if (a7)
    __src = memmove(&v20[__len], v15, a7);
  if (v14 != a6 + __len)
    __src = memmove(&v20[__len + a7], &v12[__len + a6], v14 - (a6 + __len));
  if (a2 != 22 && v12)
    __src = (_QWORD *)(*(uint64_t (**)(_QWORD, char *, _QWORD, uint64_t))(*(_QWORD *)*v16 + 24))(*v16, v12, 0, 8);
  v21 = a7 + v14 - a6;
  *v11 = v20;
  v11[1] = v21;
  v11[2] = v17 | 0x8000000000000000;
  v20[v21] = 0;
  return __src;
}

void **std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::operator=(void **result, void **a2)
{
  __int128 v2;
  size_t v3;
  size_t v4;

  if (result != a2)
  {
    if (*((char *)result + 23) < 0)
    {
      v3 = (size_t)a2[1];
      if (*((char *)a2 + 23) >= 0)
      {
        v4 = *((unsigned __int8 *)a2 + 23);
      }
      else
      {
        a2 = (void **)*a2;
        v4 = v3;
      }
      return std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::__assign_no_alias<false>(result, a2, v4);
    }
    else if ((*((_BYTE *)a2 + 23) & 0x80) != 0)
    {
      return (void **)std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::__assign_no_alias<true>(result, *a2, (size_t)a2[1]);
    }
    else
    {
      v2 = *(_OWORD *)a2;
      result[2] = a2[2];
      *(_OWORD *)result = v2;
    }
  }
  return result;
}

_BYTE *std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::__assign_no_alias<true>(_BYTE *__src, void *a2, size_t a3)
{
  BOOL v5;
  unint64_t v6;

  v5 = a3 > 0x16;
  v6 = a3 - 22;
  if (v5)
  {
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::__grow_by_and_replace(__src, 0x16uLL, v6, __src[23] & 0x7F, 0, __src[23] & 0x7F, a3, a2);
  }
  else
  {
    __src[23] = a3;
    if (a3)
      memmove(__src, a2, a3);
    __src[a3] = 0;
  }
  return __src;
}

void **std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::__assign_no_alias<false>(void **__src, void *a2, size_t a3)
{
  unint64_t v5;
  void *v6;

  v5 = (unint64_t)__src[2] & 0x7FFFFFFFFFFFFFFFLL;
  if (v5 <= a3)
  {
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::__grow_by_and_replace(__src, v5 - 1, a3 - v5 + 1, (uint64_t)__src[1], 0, (uint64_t)__src[1], a3, a2);
  }
  else
  {
    v6 = *__src;
    __src[1] = (void *)a3;
    if (a3)
      memmove(v6, a2, a3);
    *((_BYTE *)v6 + a3) = 0;
  }
  return __src;
}

void *std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::__init_copy_ctor_external(_QWORD **__dst, void *__src, unint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v6 = a3 | 7;
    v7 = v6 + 1;
    v8 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*__dst[3] + 16))(__dst[3], v6 + 1, 128);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *v5 = v8;
    v5 = (_QWORD *)v8;
  }
  else
  {
    *((_BYTE *)__dst + 23) = a3;
  }
  return memmove(v5, __src, a3 + 1);
}

uint64_t std::basic_stringbuf<char,std::char_traits<char>,FIK::FIKAllocator<char>>::str@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  int v2;
  uint64_t v3;
  char *v4;
  char *v5;
  char *v6;

  v2 = *(_DWORD *)(result + 104);
  if ((v2 & 0x10) != 0)
  {
    v4 = *(char **)(result + 96);
    v5 = *(char **)(result + 48);
    if (v4 < v5)
    {
      *(_QWORD *)(result + 96) = v5;
      v4 = v5;
    }
    v6 = *(char **)(result + 40);
  }
  else
  {
    if ((v2 & 8) == 0)
    {
      v3 = *(_QWORD *)(result + 88);
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      a2[3] = v3;
      return result;
    }
    v6 = *(char **)(result + 16);
    v4 = *(char **)(result + 32);
  }
  a2[3] = *(_QWORD *)(result + 88);
  return std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::__init_with_size[abi:nn180100]<char *,char *>((uint64_t)a2, v6, v4, v4 - v6);
}

uint64_t std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::__init_with_size[abi:nn180100]<char *,char *>(uint64_t result, char *a2, char *a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v7 = (_QWORD *)result;
  if (a4 > 0x16)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v8 = a4 | 7;
    v9 = v8 + 1;
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), v8 + 1, 128);
    v7[1] = a4;
    v7[2] = v9 | 0x8000000000000000;
    *v7 = result;
    v7 = (_QWORD *)result;
  }
  else
  {
    *(_BYTE *)(result + 23) = a4;
  }
  while (a2 != a3)
  {
    v10 = *a2++;
    *(_BYTE *)v7 = v10;
    v7 = (_QWORD *)((char *)v7 + 1);
  }
  *(_BYTE *)v7 = 0;
  return result;
}

_QWORD *std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::insert(_QWORD *__src, size_t __len, char *a3, size_t a4)
{
  char *v5;
  size_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  size_t v14;
  unint64_t v15;

  v5 = a3;
  v8 = *((unsigned __int8 *)__src + 23);
  if ((*((char *)__src + 23) & 0x80000000) == 0)
  {
    if (v8 >= __len)
    {
      v9 = 22;
      v10 = *((unsigned __int8 *)__src + 23);
      goto LABEL_6;
    }
LABEL_24:
    abort();
  }
  v10 = __src[1];
  if (v10 < __len)
    goto LABEL_24;
  v9 = (__src[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
LABEL_6:
  if (v9 - v10 >= a4)
  {
    if (a4)
    {
      v11 = __src;
      if ((v8 & 0x80) != 0)
        v11 = (_QWORD *)*__src;
      if (v10 != __len)
      {
        v12 = (char *)v11 + __len;
        if ((char *)v11 + v10 <= a3 || v12 > a3)
          v14 = 0;
        else
          v14 = a4;
        v5 = &a3[v14];
        memmove(&v12[a4], v12, v10 - __len);
      }
      memmove((char *)v11 + __len, v5, a4);
      v15 = v10 + a4;
      if (*((char *)__src + 23) < 0)
        __src[1] = v15;
      else
        *((_BYTE *)__src + 23) = v15 & 0x7F;
      *((_BYTE *)v11 + v15) = 0;
    }
  }
  else
  {
    std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::__grow_by_and_replace(__src, v9, v10 + a4 - v9, v10, __len, 0, a4, a3);
  }
  return __src;
}

uint64_t std::operator+[abi:nn180100]<char,std::char_traits<char>,FIK::FIKAllocator<char>>@<X0>(const void **a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  size_t v5;
  uint64_t result;
  char *v7;
  const void *v8;
  char *v9;
  const void *v10;

  if (*((char *)a1 + 23) >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = (size_t)a1[1];
  v10 = a1[3];
  result = std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100](a3, v5 + 1, (uint64_t *)&v10);
  if (*(char *)(result + 23) >= 0)
    v7 = (char *)result;
  else
    v7 = *(char **)result;
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0)
      v8 = a1;
    else
      v8 = *a1;
    result = (uint64_t)memmove(v7, v8, v5);
  }
  v9 = &v7[v5];
  *v9 = a2;
  v9[1] = 0;
  return result;
}

_QWORD *JSONS::JSONIKArray<FIK::Item>@<X0>(unint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  size_t v8;
  _QWORD v11[2];
  unsigned __int8 v12;
  uint64_t v13;

  std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::basic_string[abi:nn180100]<0>((uint64_t)a2, "[");
  v4 = *a1;
  if (*a1)
  {
    v5 = 0;
    v6 = 1;
    do
    {
      if (v6 != 1)
        std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::push_back(a2, 44);
      JSONS::JSONObject<FIK::Item>((int *)(a1[2] + 32 * v5), v11);
      if ((v12 & 0x80u) == 0)
        v7 = v11;
      else
        v7 = (_QWORD *)v11[0];
      if ((v12 & 0x80u) == 0)
        v8 = v12;
      else
        v8 = v11[1];
      std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::append(a2, v7, v8);
      if ((char)v12 < 0 && v11[0])
        (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v13 + 24))(v13, v11[0], 0, 8);
      v5 = v6;
    }
    while (v4 > v6++);
  }
  return std::basic_string<char,std::char_traits<char>,FIK::FIKAllocator<char>>::push_back(a2, 93);
}

void FIK::IKArray<FIK::Item>::push_back<FIK::Item&,void>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  IKString *v7;
  char *v8;

  FIK::IKArray<FIK::Item>::reserve((uint64_t)a1, *a1 + 1);
  v4 = a1[3];
  v5 = a1[2] + 32 * *a1;
  *(_DWORD *)v5 = *(_DWORD *)a2;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 24) = v4;
  *(_QWORD *)(v5 + 8) = 0;
  v6 = (_QWORD *)(v5 + 8);
  v7 = *(IKString **)(a2 + 16);
  if (v7)
    v8 = *(char **)(a2 + 8);
  else
    v8 = (char *)&unk_2108059BE;
  IKString::assign(v6, v8, v7);
  ++*a1;
}

uint64_t FIK::IKArray<FIK::Item>::reserve(uint64_t result, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  if (*(_QWORD *)(result + 8) < a2)
  {
    v2 = (uint64_t *)result;
    v3 = *(_QWORD *)(result + 24);
    v4 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v4)
    {
      v5 = (char *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)v3 + 16))(*(_QWORD *)(result + 24), 32 * v4, 8);
      v6 = v5;
      if (32 * v4)
        bzero(v5, 32 * v4);
    }
    else
    {
      v6 = 0;
    }
    v7 = v2[2];
    v8 = *v2;
    if (*v2)
    {
      v9 = (uint64_t *)(v6 + 8);
      v10 = (uint64_t *)(v7 + 8);
      do
      {
        *((_DWORD *)v9 - 2) = *((_DWORD *)v10 - 2);
        v9 = IKString::IKString(v9, v10, v10[2]) + 4;
        v10 += 4;
        --v8;
      }
      while (v8);
      v7 = v2[2];
      v11 = *v2;
    }
    else
    {
      v11 = 0;
    }
    v12 = v2[3];
    v2[1] = v4;
    v2[2] = (uint64_t)v6;
    v2[3] = v3;
    result = std::destroy_n[abi:nn180100]<FIK::Item *,unsigned long>(v7, v11);
    if (v7)
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v12 + 24))(v12, v7, 0, 8);
  }
  return result;
}

uint64_t FIK::IKArray<FIK::AimSetup>::push_back<FIK::AimSetup&,void>(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  FIK::IKArray<FIK::AimSetup>::reserve(a1, *a1 + 1);
  result = FIK::AimSetup::AimSetup(a1[2] + (*a1 << 7), a2, a1[3]);
  ++*a1;
  return result;
}

void FIK::IKArray<FIK::AimSetup>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a1[1] < a2)
  {
    v3 = a1[3];
    v4 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v4)
    {
      v5 = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v3 + 16))(a1[3], v4 << 7, 8);
      v6 = (uint64_t)v5;
      if (v4 << 7)
        bzero(v5, v4 << 7);
    }
    else
    {
      v6 = 0;
    }
    v7 = FIK::IKArray<FIK::AimSetup>::moveRange(a1[2], *a1, v6);
    v8 = a1[2];
    v9 = a1[3];
    a1[1] = v4;
    a1[2] = v6;
    a1[3] = v3;
    v10 = *a1;
    if (*a1)
    {
      v11 = v8;
      do
      {
        std::__destroy_at[abi:nn180100]<FIK::AimSetup,0>(v11);
        v11 += 128;
        --v10;
      }
      while (v10);
    }
    if (v8)
      (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, __n128))(*(_QWORD *)v9 + 24))(v9, v8, 0, 8, v7);
  }
}

__n128 FIK::IKArray<FIK::AimSetup>::moveRange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __n128 result;

  if (a2)
  {
    v4 = a2;
    v6 = 0;
    do
    {
      v7 = (uint64_t *)(a1 + v6);
      v8 = a3 + v6;
      IKString::IKString((uint64_t *)(a3 + v6), (uint64_t *)(a1 + v6), *(_QWORD *)(a1 + v6 + 16));
      *(_DWORD *)(v8 + 24) = *(_DWORD *)(a1 + v6 + 24);
      IKString::IKString((uint64_t *)(a3 + v6 + 32), v7 + 4, v7[6]);
      v9 = *(_QWORD *)(a1 + v6 + 56);
      v7[7] = 0;
      *(_QWORD *)(v8 + 56) = v9;
      v10 = *(_QWORD *)(a1 + v6 + 64);
      v11 = *(_OWORD *)(a1 + v6 + 72);
      v7[8] = 0;
      *(_QWORD *)(v8 + 64) = v10;
      v7[9] = 0;
      *(_OWORD *)(v8 + 72) = v11;
      v12 = *(_QWORD *)(a1 + v6 + 88);
      v7[11] = 0;
      *(_QWORD *)(v8 + 88) = v12;
      v13 = *(_QWORD *)(a1 + v6 + 96);
      result = *(__n128 *)(a1 + v6 + 104);
      v7[12] = 0;
      *(_QWORD *)(v8 + 96) = v13;
      v7[13] = 0;
      *(__n128 *)(v8 + 104) = result;
      *(_DWORD *)(v8 + 120) = *(_DWORD *)(a1 + v6 + 120);
      v6 += 128;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t FIK::AimSetup::AimSetup(uint64_t a1, uint64_t a2, unint64_t a3)
{
  IKString *v6;
  char *v7;
  IKString *v8;
  char *v9;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = a3;
  v6 = *(IKString **)(a2 + 8);
  if (v6)
    v7 = *(char **)a2;
  else
    v7 = (char *)&unk_2108059BE;
  IKString::assign((_QWORD *)a1, v7, v6);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = a3;
  v8 = *(IKString **)(a2 + 40);
  if (v8)
    v9 = *(char **)(a2 + 32);
  else
    v9 = (char *)&unk_2108059BE;
  IKString::assign((_QWORD *)(a1 + 32), v9, v8);
  FIK::IKArray<FIK::Item>::IKArray((unint64_t *)(a1 + 56), (unint64_t *)(a2 + 56), a3);
  FIK::IKArray<FIK::Item>::IKArray((unint64_t *)(a1 + 88), (unint64_t *)(a2 + 88), a3);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  return a1;
}

unint64_t *FIK::IKArray<FIK::Item>::IKArray(unint64_t *a1, unint64_t *a2, unint64_t a3)
{
  unint64_t v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  IKString *v14;
  char *v15;
  uint64_t v16;
  char *v17;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  if (v6)
  {
    v7 = 32 * v6;
    v8 = (void *)(*(uint64_t (**)(unint64_t, unint64_t, uint64_t))(*(_QWORD *)a3 + 16))(a3, 32 * v6, 8);
    a1[2] = (unint64_t)v8;
    a1[3] = a3;
    if (v7)
      bzero(v8, v7);
  }
  else
  {
    a1[2] = 0;
    a1[3] = a3;
  }
  if (*a1)
  {
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = a1[2] + v9;
      v12 = a2[2] + v9;
      *(_DWORD *)v11 = *(_DWORD *)v12;
      *(_QWORD *)(v11 + 16) = 0;
      *(_QWORD *)(v11 + 24) = a3;
      *(_QWORD *)(v11 + 8) = 0;
      v13 = (_QWORD *)(v11 + 8);
      v16 = v12 + 8;
      v15 = *(char **)(v12 + 8);
      v14 = *(IKString **)(v16 + 8);
      if (v14)
        v17 = v15;
      else
        v17 = (char *)&unk_2108059BE;
      IKString::assign(v13, v17, v14);
      ++v10;
      v9 += 32;
    }
    while (v10 < *a1);
  }
  return a1;
}

FIK::MoCapBone *FIK::IKArray<FIK::MoCapBone>::push_back<FIK::MoCapBone&,void>(uint64_t a1, const FIK::MoCapBone *a2)
{
  FIK::MoCapBone *result;

  FIK::IKArray<FIK::MoCapBone>::reserve(a1, *(_QWORD *)a1 + 1);
  result = FIK::MoCapBone::MoCapBone((FIK::MoCapBone *)(*(_QWORD *)(a1 + 16) + 544 * *(_QWORD *)a1), a2, *(FIK::Allocator **)(a1 + 24));
  ++*(_QWORD *)a1;
  return result;
}

uint64_t FIK::IKArray<FIK::MoCapBone>::reserve(uint64_t result, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (*(_QWORD *)(result + 8) < a2)
  {
    v2 = (uint64_t *)result;
    v3 = *(_QWORD *)(result + 24);
    v4 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v4)
    {
      v5 = (void *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)v3 + 16))(*(_QWORD *)(result + 24), 544 * v4, 16);
      v6 = (uint64_t)v5;
      if (544 * v4)
        bzero(v5, 544 * v4);
    }
    else
    {
      v6 = 0;
    }
    result = std::__uninitialized_move_n[abi:nn180100]<FIK::MoCapBone,FIK::MoCapBone*,unsigned long,FIK::MoCapBone*,std::__always_false,std::pair<FIK::MoCapBone*,FIK::MoCapBone*> std::uninitialized_move_n[abi:nn180100]<FIK::MoCapBone*,unsigned long,FIK::MoCapBone*>(FIK::MoCapBone*,unsigned long,FIK::MoCapBone*)::{lambda(FIK::MoCapBone*&&)#1}>(v2[2], *v2, v6);
    v7 = v2[2];
    v8 = v2[3];
    v2[1] = v4;
    v2[2] = v6;
    v2[3] = v3;
    v9 = *v2;
    if (*v2)
    {
      v10 = v7;
      do
      {
        result = std::__destroy_at[abi:nn180100]<FIK::MoCapBone,0>(v10);
        v10 += 544;
        --v9;
      }
      while (v9);
    }
    if (v7)
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v8 + 24))(v8, v7, 0, 8);
  }
  return result;
}

uint64_t std::__uninitialized_move_n[abi:nn180100]<FIK::MoCapBone,FIK::MoCapBone*,unsigned long,FIK::MoCapBone*,std::__always_false,std::pair<FIK::MoCapBone*,FIK::MoCapBone*> std::uninitialized_move_n[abi:nn180100]<FIK::MoCapBone*,unsigned long,FIK::MoCapBone*>(FIK::MoCapBone*,unsigned long,FIK::MoCapBone*)::{lambda(FIK::MoCapBone*&&)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  if (a2)
  {
    v5 = a2;
    v6 = 0;
    do
    {
      v7 = a3 + v6;
      v8 = (uint64_t *)(a1 + v6);
      *(_QWORD *)(a3 + v6) = *(_QWORD *)(a1 + v6);
      IKString::IKString((uint64_t *)(a3 + v6 + 8), (uint64_t *)(a1 + v6 + 8), *(_QWORD *)(a1 + v6 + 24));
      IKString::IKString((uint64_t *)(a3 + v6 + 32), v8 + 4, v8[6]);
      *(_OWORD *)(v7 + 64) = *(_OWORD *)(a1 + v6 + 64);
      *(_OWORD *)(v7 + 80) = *(_OWORD *)(a1 + v6 + 80);
      v9 = *(_OWORD *)(a1 + v6 + 96);
      v10 = *(_OWORD *)(a1 + v6 + 112);
      *(_QWORD *)(v7 + 128) = *(_QWORD *)(a1 + v6 + 128);
      *(_OWORD *)(v7 + 96) = v9;
      *(_OWORD *)(v7 + 112) = v10;
      *(_OWORD *)(v7 + 144) = *(_OWORD *)(a1 + v6 + 144);
      *(_OWORD *)(v7 + 160) = *(_OWORD *)(a1 + v6 + 160);
      *(_OWORD *)(v7 + 176) = *(_OWORD *)(a1 + v6 + 176);
      *(_OWORD *)(v7 + 192) = *(_OWORD *)(a1 + v6 + 192);
      *(_OWORD *)(v7 + 208) = *(_OWORD *)(a1 + v6 + 208);
      *(_OWORD *)(v7 + 224) = *(_OWORD *)(a1 + v6 + 224);
      *(_OWORD *)(v7 + 240) = *(_OWORD *)(a1 + v6 + 240);
      IKString::IKString((uint64_t *)(a3 + v6 + 256), v8 + 32, v8[34]);
      *(_DWORD *)(v7 + 280) = *(_DWORD *)(a1 + v6 + 280);
      *(_OWORD *)(v7 + 288) = *(_OWORD *)(a1 + v6 + 288);
      *(_OWORD *)(v7 + 304) = *(_OWORD *)(a1 + v6 + 304);
      *(_OWORD *)(v7 + 320) = *(_OWORD *)(a1 + v6 + 320);
      *(_OWORD *)(v7 + 336) = *(_OWORD *)(a1 + v6 + 336);
      v11 = *(_OWORD *)(a1 + v6 + 352);
      *(_QWORD *)(v7 + 368) = *(_QWORD *)(a1 + v6 + 368);
      *(_OWORD *)(v7 + 352) = v11;
      *(_QWORD *)(v7 + 384) = *(_QWORD *)(a1 + v6 + 384);
      *(_OWORD *)(v7 + 400) = *(_OWORD *)(a1 + v6 + 400);
      v12 = *(_QWORD *)(a1 + v6 + 416);
      v8[52] = 0;
      *(_QWORD *)(v7 + 416) = v12;
      v13 = *(_OWORD *)(a1 + v6 + 432);
      v14 = *(_QWORD *)(a1 + v6 + 424);
      v8[53] = 0;
      *(_QWORD *)(v7 + 424) = v14;
      v8[54] = 0;
      *(_OWORD *)(v7 + 432) = v13;
      *(_OWORD *)(v7 + 448) = *(_OWORD *)(a1 + v6 + 448);
      *(_OWORD *)(v7 + 464) = *(_OWORD *)(a1 + v6 + 464);
      *(_QWORD *)(v7 + 480) = *(_QWORD *)(a1 + v6 + 480);
      *(_OWORD *)(v7 + 496) = *(_OWORD *)(a1 + v6 + 496);
      *(_OWORD *)(v7 + 512) = *(_OWORD *)(a1 + v6 + 512);
      *(_OWORD *)(v7 + 528) = *(_OWORD *)(a1 + v6 + 528);
      v6 += 544;
      --v5;
    }
    while (v5);
    a1 += v6;
  }
  return a1;
}

FIK::MoCapBone *FIK::MoCapBone::MoCapBone(FIK::MoCapBone *this, const FIK::MoCapBone *a2, FIK::Allocator *a3)
{
  uint64_t v6;
  _QWORD *v7;
  IKString *v8;
  char *v9;

  FIK::RigBone::RigBone(this, a2, a3);
  v7 = (_QWORD *)(v6 + 256);
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 34) = a3;
  v8 = (IKString *)*((_QWORD *)a2 + 33);
  if (v8)
    v9 = (char *)*((_QWORD *)a2 + 32);
  else
    v9 = (char *)&unk_2108059BE;
  IKString::assign(v7, v9, v8);
  *((_DWORD *)this + 70) = *((_DWORD *)a2 + 70);
  *((_OWORD *)this + 18) = *((_OWORD *)a2 + 18);
  *((_OWORD *)this + 19) = *((_OWORD *)a2 + 19);
  *((_OWORD *)this + 20) = *((_OWORD *)a2 + 20);
  *((_OWORD *)this + 21) = *((_OWORD *)a2 + 21);
  *((_QWORD *)this + 44) = *((_QWORD *)a2 + 44);
  *(_OWORD *)((char *)this + 360) = *(_OWORD *)((char *)a2 + 360);
  FIK::SelfPenetrationBone::SelfPenetrationBone((uint64_t)this + 384, (uint64_t)a2 + 384, (unint64_t)a3);
  return this;
}

__n128 FIK::RigBone::RigBone(FIK::RigBone *this, const FIK::RigBone *a2, FIK::Allocator *a3)
{
  uint64_t v4;
  __int16 v5;
  __int16 v6;
  __n128 result;

  v4 = FIK::RigBoneBase::RigBoneBase((uint64_t)this, (uint64_t)a2, (uint64_t)a3);
  *(_BYTE *)(v4 + 96) = *((_BYTE *)a2 + 96);
  v5 = *(_WORD *)((char *)a2 + 97);
  *(_BYTE *)(v4 + 99) = *((_BYTE *)a2 + 99);
  *(_WORD *)(v4 + 97) = v5;
  *(_DWORD *)(v4 + 100) = *((_DWORD *)a2 + 25);
  *(_BYTE *)(v4 + 104) = *((_BYTE *)a2 + 104);
  v6 = *(_WORD *)((char *)a2 + 105);
  *(_BYTE *)(v4 + 107) = *((_BYTE *)a2 + 107);
  *(_WORD *)(v4 + 105) = v6;
  *(_BYTE *)(v4 + 108) = *((_BYTE *)a2 + 108);
  *(_OWORD *)(v4 + 112) = *((_OWORD *)a2 + 7);
  *(_DWORD *)(v4 + 128) = *((_DWORD *)a2 + 32);
  *(_DWORD *)(v4 + 132) = *((_DWORD *)a2 + 33);
  *(_OWORD *)(v4 + 144) = *((_OWORD *)a2 + 9);
  *(_OWORD *)(v4 + 160) = *((_OWORD *)a2 + 10);
  *(_OWORD *)(v4 + 176) = *((_OWORD *)a2 + 11);
  *(_OWORD *)(v4 + 192) = *((_OWORD *)a2 + 12);
  *(_OWORD *)(v4 + 208) = *((_OWORD *)a2 + 13);
  *(_OWORD *)(v4 + 224) = *((_OWORD *)a2 + 14);
  result = *((__n128 *)a2 + 15);
  *(__n128 *)(v4 + 240) = result;
  return result;
}

uint64_t FIK::RigBoneBase::RigBoneBase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  IKString *v7;
  char *v8;
  IKString *v9;
  char *v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a3;
  v7 = *(IKString **)(a2 + 16);
  if (v7)
    v8 = *(char **)(a2 + 8);
  else
    v8 = (char *)&unk_2108059BE;
  IKString::assign(v6, v8, v7);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = a3;
  v9 = *(IKString **)(a2 + 40);
  if (v9)
    v10 = *(char **)(a2 + 32);
  else
    v10 = (char *)&unk_2108059BE;
  IKString::assign((_QWORD *)(a1 + 32), v10, v9);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  return a1;
}

{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  IKString::IKString((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8), a3);
  IKString::IKString((uint64_t *)(a1 + 32), (uint64_t *)(a2 + 32), a3);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  return a1;
}

uint64_t FIK::SelfPenetrationBone::SelfPenetrationBone(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  FIK::IKArray<IKString>::IKArray((unint64_t *)(a1 + 32), (unint64_t *)(a2 + 32), a3);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  v5 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v5;
  return a1;
}

{
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  FIK::IKArray<IKString>::IKArray((unint64_t *)(a1 + 32), (_QWORD *)(a2 + 32), a3);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  v5 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v5;
  return a1;
}

unint64_t *FIK::IKArray<IKString>::IKArray(unint64_t *a1, unint64_t *a2, unint64_t a3)
{
  unint64_t v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  char **v12;
  IKString *v13;
  char *v14;
  char **v15;
  char *v16;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  if (v6)
  {
    v7 = 24 * v6;
    v8 = (void *)(*(uint64_t (**)(unint64_t, unint64_t, uint64_t))(*(_QWORD *)a3 + 16))(a3, 24 * v6, 8);
    a1[2] = (unint64_t)v8;
    a1[3] = a3;
    if (v7)
      bzero(v8, v7);
  }
  else
  {
    a1[2] = 0;
    a1[3] = a3;
  }
  if (*a1)
  {
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = (_QWORD *)(a1[2] + v9);
      v12 = (char **)(a2[2] + v9);
      *v11 = 0;
      v11[1] = 0;
      v11[2] = a3;
      v15 = v12;
      v14 = *v12;
      v13 = (IKString *)v15[1];
      if (v13)
        v16 = v14;
      else
        v16 = (char *)&unk_2108059BE;
      IKString::assign(v11, v16, v13);
      ++v10;
      v9 += 24;
    }
    while (v10 < *a1);
  }
  return a1;
}

uint64_t FIK::IKArray<FIK::MoCapTask>::push_back<FIK::MoCapTask&,void>(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  FIK::IKArray<FIK::MoCapTask>::reserve((uint64_t *)a1, *(_QWORD *)a1 + 1);
  result = FIK::MoCapTask::MoCapTask(*(_QWORD *)(a1 + 16) + (*(_QWORD *)a1 << 8), a2, *(FIK::Allocator **)(a1 + 24));
  ++*(_QWORD *)a1;
  return result;
}

void FIK::IKArray<FIK::MoCapTask>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a1[1] < a2)
  {
    v3 = a1[3];
    v4 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v4)
    {
      v5 = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v3 + 16))(a1[3], v4 << 8, 16);
      v6 = (uint64_t)v5;
      if (v4 << 8)
        bzero(v5, v4 << 8);
    }
    else
    {
      v6 = 0;
    }
    v7 = FIK::IKArray<FIK::MoCapTask>::moveRange(a1[2], *a1, v6);
    v8 = a1[2];
    v9 = a1[3];
    a1[1] = v4;
    a1[2] = v6;
    a1[3] = v3;
    v10 = *a1;
    if (*a1)
    {
      v11 = v8;
      do
      {
        std::__destroy_at[abi:nn180100]<FIK::MoCapTask,0>(v11);
        v11 += 256;
        --v10;
      }
      while (v10);
    }
    if (v8)
      (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, __n128))(*(_QWORD *)v9 + 24))(v9, v8, 0, 8, v7);
  }
}

__n128 FIK::IKArray<FIK::MoCapTask>::moveRange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  __int128 v9;
  int v10;
  __n128 result;

  if (a2)
  {
    v4 = a2;
    v6 = 0;
    do
    {
      v7 = (uint64_t *)(a1 + v6);
      v8 = a3 + v6;
      IKString::IKString((uint64_t *)(a3 + v6), (uint64_t *)(a1 + v6), *(_QWORD *)(a1 + v6 + 16));
      IKString::IKString((uint64_t *)(a3 + v6 + 24), v7 + 3, v7[5]);
      v9 = *(_OWORD *)(a1 + v6 + 48);
      *(_QWORD *)(v8 + 64) = *(_QWORD *)(a1 + v6 + 64);
      *(_OWORD *)(v8 + 48) = v9;
      *(_OWORD *)(v8 + 80) = *(_OWORD *)(a1 + v6 + 80);
      *(_OWORD *)(v8 + 96) = *(_OWORD *)(a1 + v6 + 96);
      *(_OWORD *)(v8 + 112) = *(_OWORD *)(a1 + v6 + 112);
      *(_OWORD *)(v8 + 128) = *(_OWORD *)(a1 + v6 + 128);
      *(_OWORD *)(v8 + 144) = *(_OWORD *)(a1 + v6 + 144);
      *(_OWORD *)(v8 + 160) = *(_OWORD *)(a1 + v6 + 160);
      IKString::IKString((uint64_t *)(a3 + v6 + 176), v7 + 22, v7[24]);
      v10 = *(_DWORD *)(a1 + v6 + 200);
      *(_WORD *)(v8 + 204) = *(_WORD *)(a1 + v6 + 204);
      *(_DWORD *)(v8 + 200) = v10;
      *(_OWORD *)(v8 + 208) = *(_OWORD *)(a1 + v6 + 208);
      *(_OWORD *)(v8 + 224) = *(_OWORD *)(a1 + v6 + 224);
      result = *(__n128 *)(a1 + v6 + 240);
      *(__n128 *)(v8 + 240) = result;
      v6 += 256;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t FIK::MoCapTask::MoCapTask(uint64_t a1, uint64_t a2, FIK::Allocator *a3)
{
  FIK::RigTask *v6;
  _QWORD *v7;
  IKString *v8;
  char *v9;

  v6 = FIK::RigTask::RigTask((FIK::RigTask *)a1, (const FIK::RigTask *)a2, a3);
  *((_QWORD *)v6 + 22) = 0;
  v7 = (_QWORD *)((char *)v6 + 176);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = a3;
  v8 = *(IKString **)(a2 + 184);
  if (v8)
    v9 = *(char **)(a2 + 176);
  else
    v9 = (char *)&unk_2108059BE;
  IKString::assign(v7, v9, v8);
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  *(_WORD *)(a1 + 204) = *(_WORD *)(a2 + 204);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  return a1;
}

FIK::RigTask *FIK::RigTask::RigTask(FIK::RigTask *this, const FIK::RigTask *a2, FIK::Allocator *a3)
{
  IKString *v6;
  char *v7;
  IKString *v8;
  char *v9;
  __int16 v10;
  __int16 v11;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = a3;
  v6 = (IKString *)*((_QWORD *)a2 + 1);
  if (v6)
    v7 = *(char **)a2;
  else
    v7 = (char *)&unk_2108059BE;
  IKString::assign(this, v7, v6);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = a3;
  v8 = (IKString *)*((_QWORD *)a2 + 4);
  if (v8)
    v9 = (char *)*((_QWORD *)a2 + 3);
  else
    v9 = (char *)&unk_2108059BE;
  IKString::assign((_QWORD *)this + 3, v9, v8);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_BYTE *)this + 52) = *((_BYTE *)a2 + 52);
  *(_WORD *)((char *)this + 53) = *(_WORD *)((char *)a2 + 53);
  v10 = *(_WORD *)((char *)a2 + 55);
  *((_BYTE *)this + 57) = *((_BYTE *)a2 + 57);
  *(_WORD *)((char *)this + 55) = v10;
  v11 = *((_WORD *)a2 + 29);
  *((_BYTE *)this + 60) = *((_BYTE *)a2 + 60);
  *((_WORD *)this + 29) = v11;
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_OWORD *)this + 5) = *((_OWORD *)a2 + 5);
  *((_OWORD *)this + 6) = *((_OWORD *)a2 + 6);
  *((_OWORD *)this + 7) = *((_OWORD *)a2 + 7);
  *((_OWORD *)this + 8) = *((_OWORD *)a2 + 8);
  *((_OWORD *)this + 9) = *((_OWORD *)a2 + 9);
  *((_OWORD *)this + 10) = *((_OWORD *)a2 + 10);
  return this;
}

uint64_t FIK::IKArray<FIK::RigBoneBase>::push_back<FIK::RigBoneBase&,void>(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  FIK::IKArray<FIK::RigBoneBase>::reserve(a1, *a1 + 1);
  result = FIK::RigBoneBase::RigBoneBase(a1[2] + 96 * *a1, a2, a1[3]);
  ++*a1;
  return result;
}

void FIK::IKArray<FIK::RigBoneBase>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a1[1] < a2)
  {
    v3 = a1[3];
    v4 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v4)
    {
      v5 = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v3 + 16))(a1[3], 96 * v4, 16);
      v6 = (uint64_t)v5;
      if (96 * v4)
        bzero(v5, 96 * v4);
    }
    else
    {
      v6 = 0;
    }
    v7 = FIK::IKArray<FIK::RigBoneBase>::moveRange(a1[2], *a1, v6);
    v8 = a1[2];
    v9 = a1[3];
    a1[1] = v4;
    a1[2] = v6;
    a1[3] = v3;
    v10 = *a1;
    if (*a1)
    {
      v11 = v8;
      do
      {
        std::__destroy_at[abi:nn180100]<FIK::RigBoneBase,0>(v11);
        v11 += 96;
        --v10;
      }
      while (v10);
    }
    if (v8)
      (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, __n128))(*(_QWORD *)v9 + 24))(v9, v8, 0, 8, v7);
  }
}

__n128 FIK::IKArray<FIK::RigBoneBase>::moveRange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 result;

  if (a2)
  {
    v3 = a2;
    v4 = a3 + 32;
    v5 = a1 + 32;
    do
    {
      *(_QWORD *)(v4 - 32) = *(_QWORD *)(v5 - 32);
      IKString::IKString((uint64_t *)(v4 - 24), (uint64_t *)(v5 - 24), *(_QWORD *)(v5 - 8));
      IKString::IKString((uint64_t *)v4, (uint64_t *)v5, *(_QWORD *)(v5 + 16));
      *(_OWORD *)(v4 + 32) = *(_OWORD *)(v5 + 32);
      result = *(__n128 *)(v5 + 48);
      *(__n128 *)(v4 + 48) = result;
      v4 += 96;
      v5 += 96;
      --v3;
    }
    while (v3);
  }
  return result;
}

void FIK::IKArray<FIK::RigBone>::push_back<FIK::RigBone&,void>(uint64_t a1, const FIK::RigBone *a2)
{
  FIK::IKArray<FIK::RigBone>::reserve((uint64_t *)a1, *(_QWORD *)a1 + 1);
  FIK::RigBone::RigBone((FIK::RigBone *)(*(_QWORD *)(a1 + 16) + (*(_QWORD *)a1 << 8)), a2, *(FIK::Allocator **)(a1 + 24));
  ++*(_QWORD *)a1;
}

void FIK::IKArray<FIK::RigBone>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a1[1] < a2)
  {
    v3 = a1[3];
    v4 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v4)
    {
      v5 = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v3 + 16))(a1[3], v4 << 8, 16);
      v6 = (uint64_t)v5;
      if (v4 << 8)
        bzero(v5, v4 << 8);
    }
    else
    {
      v6 = 0;
    }
    v7 = FIK::IKArray<FIK::RigBone>::moveRange(a1[2], *a1, v6);
    v8 = a1[2];
    v9 = a1[3];
    a1[1] = v4;
    a1[2] = v6;
    a1[3] = v3;
    v10 = *a1;
    if (*a1)
    {
      v11 = v8;
      do
      {
        std::__destroy_at[abi:nn180100]<FIK::RigBoneBase,0>(v11);
        v11 += 256;
        --v10;
      }
      while (v10);
    }
    if (v8)
      (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, __n128))(*(_QWORD *)v9 + 24))(v9, v8, 0, 8, v7);
  }
}

__n128 FIK::IKArray<FIK::RigBone>::moveRange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __n128 result;

  if (a2)
  {
    v3 = a2;
    v4 = a3 + 32;
    v5 = a1 + 32;
    do
    {
      *(_QWORD *)(v4 - 32) = *(_QWORD *)(v5 - 32);
      IKString::IKString((uint64_t *)(v4 - 24), (uint64_t *)(v5 - 24), *(_QWORD *)(v5 - 8));
      IKString::IKString((uint64_t *)v4, (uint64_t *)v5, *(_QWORD *)(v5 + 16));
      *(_OWORD *)(v4 + 32) = *(_OWORD *)(v5 + 32);
      *(_OWORD *)(v4 + 48) = *(_OWORD *)(v5 + 48);
      v6 = *(_OWORD *)(v5 + 64);
      v7 = *(_OWORD *)(v5 + 80);
      *(_QWORD *)(v4 + 96) = *(_QWORD *)(v5 + 96);
      *(_OWORD *)(v4 + 64) = v6;
      *(_OWORD *)(v4 + 80) = v7;
      *(_OWORD *)(v4 + 112) = *(_OWORD *)(v5 + 112);
      *(_OWORD *)(v4 + 128) = *(_OWORD *)(v5 + 128);
      *(_OWORD *)(v4 + 144) = *(_OWORD *)(v5 + 144);
      *(_OWORD *)(v4 + 160) = *(_OWORD *)(v5 + 160);
      *(_OWORD *)(v4 + 176) = *(_OWORD *)(v5 + 176);
      *(_OWORD *)(v4 + 192) = *(_OWORD *)(v5 + 192);
      result = *(__n128 *)(v5 + 208);
      *(__n128 *)(v4 + 208) = result;
      v4 += 256;
      v5 += 256;
      --v3;
    }
    while (v3);
  }
  return result;
}

void FIK::IKArray<FIK::GameTask>::push_back<FIK::GameTask&,void>(uint64_t a1, uint64_t a2)
{
  FIK::IKArray<FIK::GameTask>::reserve((uint64_t *)a1, *(_QWORD *)a1 + 1);
  FIK::GameTask::GameTask((FIK::RigTask *)(*(_QWORD *)(a1 + 16) + 240 * *(_QWORD *)a1), a2, *(FIK::Allocator **)(a1 + 24));
  ++*(_QWORD *)a1;
}

void FIK::IKArray<FIK::GameTask>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a1[1] < a2)
  {
    v3 = a1[3];
    v4 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v4)
    {
      v5 = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v3 + 16))(a1[3], 240 * v4, 16);
      v6 = (uint64_t)v5;
      if (240 * v4)
        bzero(v5, 240 * v4);
    }
    else
    {
      v6 = 0;
    }
    v7 = FIK::IKArray<FIK::GameTask>::moveRange(a1[2], *a1, v6);
    v8 = a1[2];
    v9 = a1[3];
    a1[1] = v4;
    a1[2] = v6;
    a1[3] = v3;
    v10 = *a1;
    if (*a1)
    {
      v11 = v8;
      do
      {
        std::__destroy_at[abi:nn180100]<FIK::GameTask,0>(v11);
        v11 += 240;
        --v10;
      }
      while (v10);
    }
    if (v8)
      (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, __n128))(*(_QWORD *)v9 + 24))(v9, v8, 0, 8, v7);
  }
}

__n128 FIK::IKArray<FIK::GameTask>::moveRange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __n128 result;

  if (a2)
  {
    v4 = a2;
    v6 = 0;
    do
    {
      v7 = a3 + v6;
      IKString::IKString((uint64_t *)(a3 + v6), (uint64_t *)(a1 + v6), *(_QWORD *)(a1 + v6 + 16));
      IKString::IKString((uint64_t *)(a3 + v6 + 24), (uint64_t *)(a1 + v6 + 24), *(_QWORD *)(a1 + v6 + 40));
      v8 = *(_OWORD *)(a1 + v6 + 48);
      *(_QWORD *)(v7 + 64) = *(_QWORD *)(a1 + v6 + 64);
      *(_OWORD *)(v7 + 48) = v8;
      *(_OWORD *)(v7 + 80) = *(_OWORD *)(a1 + v6 + 80);
      *(_OWORD *)(v7 + 96) = *(_OWORD *)(a1 + v6 + 96);
      *(_OWORD *)(v7 + 112) = *(_OWORD *)(a1 + v6 + 112);
      *(_OWORD *)(v7 + 128) = *(_OWORD *)(a1 + v6 + 128);
      *(_OWORD *)(v7 + 144) = *(_OWORD *)(a1 + v6 + 144);
      *(_OWORD *)(v7 + 160) = *(_OWORD *)(a1 + v6 + 160);
      *(_OWORD *)(v7 + 176) = *(_OWORD *)(a1 + v6 + 176);
      *(_OWORD *)(v7 + 192) = *(_OWORD *)(a1 + v6 + 192);
      *(_OWORD *)(v7 + 208) = *(_OWORD *)(a1 + v6 + 208);
      result = *(__n128 *)(a1 + v6 + 224);
      *(__n128 *)(v7 + 224) = result;
      v6 += 240;
      --v4;
    }
    while (v4);
  }
  return result;
}

float FIK::GameTask::GameTask(FIK::RigTask *a1, uint64_t a2, FIK::Allocator *a3)
{
  FIK::RigTask *v4;
  float result;

  v4 = FIK::RigTask::RigTask(a1, (const FIK::RigTask *)a2, a3);
  *((_OWORD *)v4 + 11) = *(_OWORD *)(a2 + 176);
  *((_OWORD *)v4 + 12) = *(_OWORD *)(a2 + 192);
  *((_OWORD *)v4 + 13) = *(_OWORD *)(a2 + 208);
  *((_DWORD *)v4 + 56) = *(_DWORD *)(a2 + 224);
  *((_DWORD *)v4 + 57) = *(_DWORD *)(a2 + 228);
  *((_WORD *)v4 + 116) = *(_WORD *)(a2 + 232);
  result = *(float *)(a2 + 236);
  *((float *)v4 + 59) = result;
  return result;
}

uint64_t *rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::operator[]<rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>(int *a1, unsigned int *a2)
{
  int *v2;
  _BOOL4 v5;
  unsigned int v6;
  int *v7;
  uint64_t *v8;
  unsigned __int8 v9;

  v2 = (int *)*((_QWORD *)a1 + 1);
  if (*a1)
  {
    do
    {
      v5 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::StringEqual<rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>(a2, v2);
      v6 = *a1;
      if (v5)
        break;
      v2 += 12;
    }
    while (v2 != (int *)(*((_QWORD *)a1 + 1) + 48 * v6));
    v7 = v2;
    v2 = (int *)*((_QWORD *)a1 + 1);
  }
  else
  {
    v6 = 0;
    v7 = (int *)*((_QWORD *)a1 + 1);
  }
  if (v7 != &v2[12 * v6])
    return (uint64_t *)(v7 + 6);
  v8 = &rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::operator[]<rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>(rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>> const&)::buffer;
  if ((v9 & 1) == 0
  {
    rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::operator[]<rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>(rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>> const&)::buffer = 0;
    *(_QWORD *)algn_254A70D68 = 0;
    qword_254A70D70 = 0;
  }
  rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>::operator[]<rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>>(rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<FIK::RapidJsonAllocator>> const&)::buffer = 0;
  *(_QWORD *)algn_254A70D68 = 0;
  qword_254A70D70 = 0;
  return v8;
}

uint64_t std::destroy_n[abi:nn180100]<IKString *,unsigned long>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (a2)
  {
    v3 = a2;
    do
    {
      if (*(_QWORD *)(a1 + 8))
      {
        (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16), *(_QWORD *)a1, 0, 8);
        *(_QWORD *)a1 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
      a1 += 24;
      --v3;
    }
    while (v3);
  }
  return a1;
}

uint64_t FIK::IKRigUtils::getBoneIndex<FIK::MoCapBone,void>(void *__s2, size_t __n, unsigned int *a3)
{
  uint64_t v3;
  uint64_t v6;
  _QWORD *i;
  const void *v8;

  if (!__n)
    return 0xFFFFFFFFLL;
  v3 = *a3;
  if (!*a3)
    return 0xFFFFFFFFLL;
  v6 = 0;
  for (i = (_QWORD *)(*((_QWORD *)a3 + 2) + 16); ; i += 68)
  {
    v8 = *i ? (const void *)*(i - 1) : &unk_2108059BE;
    if (*i == __n && !memcmp(v8, __s2, __n))
      break;
    if (v3 == ++v6)
      return 0xFFFFFFFFLL;
  }
  return v6;
}

uint64_t FIK::IKRigUtils::getBoneIndex<FIK::RigBone,void>(void *__s2, size_t __n, unsigned int *a3)
{
  uint64_t v3;
  uint64_t v6;
  _QWORD *i;
  const void *v8;

  if (!__n)
    return 0xFFFFFFFFLL;
  v3 = *a3;
  if (!*a3)
    return 0xFFFFFFFFLL;
  v6 = 0;
  for (i = (_QWORD *)(*((_QWORD *)a3 + 2) + 16); ; i += 32)
  {
    v8 = *i ? (const void *)*(i - 1) : &unk_2108059BE;
    if (*i == __n && !memcmp(v8, __s2, __n))
      break;
    if (v3 == ++v6)
      return 0xFFFFFFFFLL;
  }
  return v6;
}

uint64_t *std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t FIK::EnrollmentPoseSolver::EnrollmentPoseSolver(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, FIK *a5, __int128 *a6, uint64_t a7, uint64_t a8)
{
  __int128 v10;
  int v11;
  int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const void **v25;
  size_t *v26;
  _DWORD *v27;
  int *v28;
  int v29;
  int v30;
  IKString *v32;
  void *v33;
  IKString *v34;
  const void *v35;
  char *v36;
  uint64_t v37;
  _DWORD *v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t Rig;
  FIK *v46;
  void (***v47)(FIK::CrtAllocator *__hidden);
  FIK *v48;
  void (***v49)(FIK::CrtAllocator *__hidden);
  uint64_t v50;
  uint64_t v51;
  float32x4_t *v52;
  int v53;
  int v54;
  float32x4_t v55;
  float v56;
  NSObject *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  float32x4_t *v64;
  float *f32;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  uint64_t v69;
  char v70;
  unsigned __int8 *v71;
  int v72;
  float v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int *v77;
  int v78;
  BOOL v79;
  BOOL v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t *v91;
  uint64_t *v92;
  float32x4_t v99;
  float v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _OWORD v104[2];
  __int128 v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  int v109;
  _DWORD v110[4];
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  __int128 __p;
  uint64_t v123;
  _BYTE v124[28];
  __int128 v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  int v129;
  _DWORD v130[4];
  __int128 v131;
  __int128 v132;
  _OWORD v133[2];
  _OWORD v134[2];
  _OWORD v135[4];
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD v140[24];

  v140[21] = *MEMORY[0x24BDAC8D0];
  IKString::IKString(&v101, (uint64_t *)a2, *(_QWORD *)(a2 + 16));
  v104[0] = *(_OWORD *)(a2 + 24);
  *(_OWORD *)((char *)v104 + 12) = *(_OWORD *)(a2 + 36);
  v10 = *(_OWORD *)(a2 + 80);
  v105 = *(_OWORD *)(a2 + 64);
  v106 = v10;
  v107 = *(_OWORD *)(a2 + 96);
  v108 = *(_QWORD *)(a2 + 112);
  v11 = *(_DWORD *)(a2 + 120);
  *(_DWORD *)((char *)v110 + 3) = *(_DWORD *)(a2 + 131);
  v12 = *(_DWORD *)(a2 + 128);
  v109 = v11;
  v110[0] = v12;
  v13 = *(_OWORD *)(a2 + 160);
  v111 = *(_OWORD *)(a2 + 144);
  v112 = v13;
  v14 = *(_OWORD *)(a2 + 176);
  v15 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a2 + 176) = 0u;
  *(_QWORD *)(a2 + 192) = 0;
  v113 = v14;
  v114 = v15;
  v16 = *(_OWORD *)(a2 + 208);
  v17 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a2 + 208) = 0u;
  *(_QWORD *)(a2 + 224) = 0;
  v115 = v16;
  v116 = v17;
  v18 = *(_OWORD *)(a2 + 240);
  v19 = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a2 + 240) = 0u;
  *(_QWORD *)(a2 + 256) = 0;
  v117 = v18;
  v118 = v19;
  v20 = *(_OWORD *)(a2 + 288);
  v119 = *(_OWORD *)(a2 + 272);
  v120 = v20;
  v121 = *(_QWORD *)(a2 + 304);
  v21 = FIK::IKRigUtils::getBoneIndex<FIK::RigBoneBase,void>("MidShoulder", 0xBuLL, (unsigned int *)&v117);
  if ((_QWORD)v117)
  {
    v22 = v118;
    v23 = v118 + 96 * v117;
    v24 = v118 + 96 * v21;
    v25 = (const void **)(v24 + 32);
    v26 = (size_t *)(v24 + 40);
    v27 = (_DWORD *)(v24 + 4);
    do
    {
      if (*(_QWORD *)(v22 + 16) >= 7uLL)
      {
        v28 = *(int **)(v22 + 8);
        v29 = *v28;
        v30 = *(int *)((char *)v28 + 3);
        if (v29 == 1953655158 && v30 == 1818326388)
        {
          v32 = (IKString *)*v26;
          if (*v26)
            v33 = (void *)*v25;
          else
            v33 = &unk_2108059BE;
          v34 = *(IKString **)(v22 + 40);
          if (v34)
            v35 = *(const void **)(v22 + 32);
          else
            v35 = &unk_2108059BE;
          if (v34 != v32 || memcmp(v35, v33, *v26))
          {
            if (v32)
              v36 = (char *)*v25;
            else
              v36 = (char *)&unk_2108059BE;
            IKString::assign((_QWORD *)(v22 + 32), v36, v32);
            *(_DWORD *)(v22 + 4) = *v27;
          }
          if ((_QWORD)v113)
          {
            v37 = 0;
            v38 = (_DWORD *)(v114 + 200);
            while (*v38 != *(_DWORD *)v22)
            {
              v38 += 64;
              if ((_QWORD)v113 == ++v37)
                goto LABEL_25;
            }
          }
          else
          {
LABEL_25:
            LODWORD(v37) = -1;
          }
          v39 = v114 + ((uint64_t)(int)v37 << 8);
          *(_OWORD *)(v39 + 208) = 0u;
          *(_OWORD *)(v39 + 224) = xmmword_210802BA0;
        }
      }
      v22 += 96;
    }
    while (v22 != v23);
  }
  IKString::IKString((uint64_t *)&__p, &v101, v103);
  *(_OWORD *)v124 = v104[0];
  *(_OWORD *)&v124[12] = *(_OWORD *)((char *)v104 + 12);
  v125 = v105;
  v126 = v106;
  v127 = v107;
  v131 = v111;
  v132 = v112;
  v40 = v113;
  v113 = 0u;
  v133[0] = v40;
  v133[1] = v114;
  v41 = v115;
  v115 = 0u;
  v134[0] = v41;
  v134[1] = v116;
  v42 = v117;
  v43 = v118;
  v117 = 0u;
  v128 = v108;
  *(_DWORD *)((char *)v130 + 3) = *(_DWORD *)((char *)v110 + 3);
  v129 = v109;
  v130[0] = v110[0];
  *(_QWORD *)&v114 = 0;
  *(_QWORD *)&v116 = 0;
  *(_QWORD *)&v118 = 0;
  v135[0] = v42;
  v135[1] = v43;
  v135[2] = v119;
  v135[3] = v120;
  v136 = v121;
  FIK::RetargetingNode::RetargetingNode(a1);
  FIK::IKArray<FIK::RigBoneBase>::~IKArray((uint64_t *)v135);
  FIK::IKArray<FIK::MoCapBone>::~IKArray((uint64_t *)v134);
  FIK::IKArray<FIK::MoCapTask>::~IKArray((uint64_t *)v133);
  if (*((_QWORD *)&__p + 1))
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v123 + 24))(v123, __p, 0, 8);
    __p = 0uLL;
  }
  FIK::IKArray<FIK::RigBoneBase>::~IKArray((uint64_t *)&v117);
  FIK::IKArray<FIK::MoCapBone>::~IKArray((uint64_t *)&v115);
  FIK::IKArray<FIK::MoCapTask>::~IKArray((uint64_t *)&v113);
  if (v102)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v103 + 24))(v103, v101, 0, 8);
    v101 = 0;
    v102 = 0;
  }
  v44 = *a6;
  *(_QWORD *)(a1 + 624) = *((_QWORD *)a6 + 2);
  *(_OWORD *)(a1 + 608) = v44;
  Rig = FIK::AnimNode::GetRig((FIK::AnimNode *)a1);
  FIK::Enrollment::DataPreprocessor::DataPreprocessor((FIK::Enrollment::DataPreprocessor *)(a1 + 640), Rig, (uint64_t)a5);
  v46 = (FIK *)FIK::AnimNode::jointsCount((FIK::AnimNode *)a1);
  v47 = FIK::defaultAllocator(v46);
  v48 = (FIK *)FIK::IKArray<FIK::Transform>::IKArray<FIK::Transform,void>((_QWORD *)(a1 + 992), (uint64_t)v46, (uint64_t)v47);
  v49 = FIK::defaultAllocator(v48);
  *(_QWORD *)(a1 + 1024) = 0;
  *(_QWORD *)(a1 + 1040) = 0;
  *(_QWORD *)(a1 + 1032) = 0;
  *(_QWORD *)(a1 + 1048) = v49;
  *(_BYTE *)(a1 + 1056) = 1;
  if (a8)
  {
    FIK::Enrollment::DataLogger::DataLogger(&__p, a7);
    std::__optional_destruct_base<FIK::Enrollment::DataLogger,false>::__optional_destruct_base[abi:nn180100]<FIK::Enrollment::DataLogger>(a1 + 1064, &__p);
    v50 = *MEMORY[0x24BEDB7E8];
    v138 = v50;
    v51 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 24);
    *(uint64_t *)((char *)&v138 + *(_QWORD *)(v50 - 24)) = v51;
    MEMORY[0x212BCAEB8](&v139);
    std::ostream::~ostream();
    MEMORY[0x212BCAF90](v140);
    *(_QWORD *)v124 = v50;
    *(_QWORD *)&v124[*(_QWORD *)(v50 - 24)] = v51;
    MEMORY[0x212BCAEB8](&v124[8]);
    std::ostream::~ostream();
    MEMORY[0x212BCAF90](&v137);
    if (SHIBYTE(v123) < 0)
      operator delete((void *)__p);
  }
  else
  {
    *(_BYTE *)(a1 + 1064) = 0;
    *(_BYTE *)(a1 + 2256) = 0;
  }
  v52 = (float32x4_t *)FIK::AnimNode::GetRig((FIK::AnimNode *)a1);
  v53 = FIK::IKRigUtils::getBoneIndex<FIK::MoCapBone,void>("head_joint", 0xAuLL, (unsigned int *)&v52[13]);
  v54 = FIK::IKRigUtils::getBoneIndex<FIK::MoCapBone,void>("hips_joint", 0xAuLL, (unsigned int *)&v52[13]);
  FIK::PoseConverter::PoseConverter<FIK::MoCapBone>((uint64_t *)&__p, v52[14].i64[0], v52[13].u64[0]);
  v99 = *(float32x4_t *)FIK::PoseConverter::GetGlobalTransform((FIK::PoseConverter *)&__p, v53);
  v55 = vsubq_f32(v99, *(float32x4_t *)FIK::PoseConverter::GetGlobalTransform((FIK::PoseConverter *)&__p, v54));
  v56 = v55.f32[2];
  if (fabsf(v55.f32[0]) > 0.0001 || fabsf(v55.f32[2]) > 0.0001)
  {
    v100 = v55.f32[0];
    v57 = ikinemaLogObject()[2];
    if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
      FIK::EnrollmentPoseSolver::EnrollmentPoseSolver(v57, v100, v56);
  }
  v58 = FIK::IKRigUtils::getBoneIndex<FIK::RigBoneBase,void>("Atlas", 5uLL, (unsigned int *)&v52[15]);
  if (v58 == -1)
  {
    v85 = ikinemaLogObject();
    ikinemaAssertHandler(*v85, 0, (uint64_t)"verifyRigAssumptions", "(atlasSourceIndex != kInvalidRigIndex) Missing Atlas source in rig");
  }
  v59 = v52[11].i64[0];
  if (!v59)
    goto LABEL_46;
  v60 = 0;
  v61 = v52[12].i64[0];
  v62 = 200;
  while (*(_DWORD *)(v61 + v62) != v58)
  {
    ++v60;
    v62 += 256;
    if (v59 == v60)
      goto LABEL_46;
  }
  if ((_DWORD)v60 == -1)
  {
LABEL_46:
    v63 = ikinemaLogObject();
    ikinemaAssertHandler(*v63, 0, (uint64_t)"verifyRigAssumptions", "(atlasTaskIndex != kInvalidRigIndex) Missing Atlas constraint in rig");
    v61 = v52[12].i64[0];
    LODWORD(v60) = -1;
  }
  v64 = (float32x4_t *)(v61 + ((uint64_t)(int)v60 << 8));
  v66 = v64[13];
  f32 = v64[13].f32;
  v67 = vmulq_f32(v66, v66);
  if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v67, 2), vaddq_f32(v67, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v67.f32, 1))).f32[0] != 0.0|| fabsf(f32[6] + (float)(*(float *)(v61 + ((uint64_t)(int)v60 << 8) + 224) + f32[5])) >= 0.00001|| (float)(f32[7] + -1.0) >= 0.00001)
  {
    v86 = ikinemaLogObject();
    ikinemaAssertHandler(*v86, 0, (uint64_t)"verifyRigAssumptions", "(isIdentityTransform(atlasTaskOffset)) Detected non-zero offset on top of the Atlas source");
  }
  v68 = vmulq_f32(v52[17], v52[17]);
  if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v68, 2), vaddq_f32(v68, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v68.f32, 1))).f32[0] != 0.0|| fabsf(v52[18].f32[2] + (float)(v52[18].f32[0] + v52[18].f32[1])) >= 0.00001|| (float)(v52[18].f32[3] + -1.0) >= 0.00001)
  {
    v87 = ikinemaLogObject();
    ikinemaAssertHandler(*v87, 0, (uint64_t)"verifyRigAssumptions", "(isIdentityTransform(rig.source_transform)) Detected non-identity source transform");
  }
  if (fabsf(v52[19].f32[1] + -100.0) >= 0.0001)
  {
    v88 = ikinemaLogObject();
    ikinemaAssertHandler(*v88, 0, (uint64_t)"verifyRigAssumptions", "(isSourceScale100) Detected wrong source scale");
  }
  FIK::PoseConverter::~PoseConverter((FIK::PoseConverter *)&__p);
  if (!*((_QWORD *)a5 + 3))
  {
    v89 = ikinemaLogObject();
    ikinemaAssertHandler(*v89, 0, (uint64_t)"EnrollmentPoseSolver", "(cameraCount != 0) No camera data passed to solver");
  }
  v69 = *((_QWORD *)a5 + 5);
  if (!v69)
    goto LABEL_81;
  v70 = 0;
  v71 = (unsigned __int8 *)*((_QWORD *)a5 + 4);
  do
  {
    v72 = *v71++;
    v70 |= v72 != 0;
    --v69;
  }
  while (v69);
  if ((v70 & 1) == 0)
  {
LABEL_81:
    v90 = ikinemaLogObject();
    ikinemaAssertHandler(*v90, 0, (uint64_t)"EnrollmentPoseSolver", "(hasLiftedData) No sources with lifted data passed to solver");
  }
  v73 = FIK::RetargetingNode::sourceScale((FIK::RetargetingNode *)a1);
  FIK::RetargetingNode::setOutputScale(a1, 1.0 / v73);
  if (FIK::AnimNode::jointsCount((FIK::AnimNode *)a1) != a4)
  {
    v91 = ikinemaLogObject();
    ikinemaAssertHandler(*v91, 0, (uint64_t)"EnrollmentPoseSolver", "(m_solverNode.jointsCount() == jointDefinitions.size()) Input joint definitions count does not match the solver joints count.");
  }
  FIK::EnrollmentPoseSolver::setupOutputMap((unint64_t *)a1, a3, a4);
  FIK::EnrollmentPoseSolver::setTargetBoneLengths((FIK::RetargetingNode *)a1, a3);
  FIK::EnrollmentPoseSolver::updateShoulderOffsets((FIK::EnrollmentPoseSolver *)a1);
  FIK::EnrollmentPoseSolver::setupPreprocessingSources(a1, a5);
  if (*((_DWORD *)a6 + 4) && *(_DWORD *)(a1 + 644) == -1)
  {
    v92 = ikinemaLogObject();
    ikinemaAssertHandler(*v92, 0, (uint64_t)"EnrollmentPoseSolver", "(m_dataProcessor.rigAtlasSourceIndex() != kInvalidRigIndex) The head pose must be present as a source.");
  }
  v74 = FIK::AnimNode::GetRig((FIK::AnimNode *)a1);
  v75 = *(_QWORD *)(v74 + 240);
  if (v75)
  {
    v76 = 96 * v75 - 96;
    v77 = (int *)(*(_QWORD *)(v74 + 256) + 4);
    do
    {
      v78 = *v77;
      v77 += 24;
      v79 = v78 == -1;
      v80 = v78 != -1 || v76 == 0;
      v76 -= 96;
    }
    while (!v80);
  }
  else
  {
    v79 = 1;
  }
  *(_BYTE *)(a1 + 1056) = v79;
  *(_BYTE *)(a1 + 976) = v79;
  if (*(_BYTE *)(a1 + 2256))
  {
    FIK::Enrollment::DataLogger::exportSources(a1 + 1064, (_QWORD *)(a1 + 608), (uint64_t)a5);
    FIK::Enrollment::DataLogger::exportEnrollment(a1 + 1064, a3, a4);
    v81 = FIK::AnimNode::GetRig((FIK::AnimNode *)a1);
    FIK::Enrollment::DataLogger::exportComputedSources(a1 + 1064, (_QWORD *)(a1 + 608), a1 + 640, (FIK *)(v81 + 240));
    v82 = FIK::AnimNode::GetRig((FIK::AnimNode *)a1);
    FIK::Enrollment::DataLogger::setupTaskExporter((_QWORD *)(a1 + 1064), (FIK *)(v82 + 176));
    v83 = FIK::AnimNode::GetRig((FIK::AnimNode *)a1);
    FIK::Enrollment::DataLogger::setupSolveExporter((_QWORD *)(a1 + 1064), (FIK *)(v83 + 208));
  }
  return a1;
}

uint64_t FIK::EnrollmentPoseSolver::setupOutputMap(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t Rig;
  unint64_t v7;
  uint64_t result;
  uint64_t i;
  uint64_t v10;
  size_t v11;
  const void *v12;
  _QWORD *v13;
  NSObject *v14;
  void *v15;
  uint64_t *v16;
  const void *v17;
  size_t v18;
  uint64_t v19;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  Rig = FIK::AnimNode::GetRig((FIK::AnimNode *)a1);
  v7 = *(_QWORD *)(Rig + 208);
  v17 = 0;
  result = (uint64_t)FIK::IKArray<unsigned long>::resize(a1 + 128, v7, &v17);
  if (v7)
  {
    for (i = 0; i != v7; ++i)
    {
      IKString::IKString((IKString *)&v17, (const IKString *)(*(_QWORD *)(Rig + 224) + 544 * i + 8));
      if (a3)
      {
        v10 = 0;
        v11 = v18;
        if (v18)
          v12 = v17;
        else
          v12 = &unk_2108059BE;
        v13 = (_QWORD *)(a2 + 16);
        while (1)
        {
          if (v11 == *v13)
          {
            result = memcmp(v12, (const void *)*(v13 - 1), v11);
            if (!(_DWORD)result)
              break;
          }
          ++v10;
          v13 += 3;
          if (a3 == v10)
            goto LABEL_11;
        }
        *(_QWORD *)(a1[130] + 8 * i) = v10;
      }
      else
      {
LABEL_11:
        v14 = ikinemaLogObject()[1];
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          v15 = &unk_2108059BE;
          if (v18)
            v15 = (void *)v17;
          *(_DWORD *)buf = 136315394;
          v21 = "setupOutputMap";
          v22 = 2080;
          v23 = v15;
          _os_log_impl(&dword_21078E000, v14, OS_LOG_TYPE_DEFAULT, "%s: Bone with name %s not found in input definitions.", buf, 0x16u);
        }
        v16 = ikinemaLogObject();
        result = ikinemaAssertHandler(*v16, 0, (uint64_t)"setupOutputMap", "(boneFound) Solver setup failed");
      }
      if (v18)
        result = (*(uint64_t (**)(uint64_t, const void *, _QWORD, uint64_t))(*(_QWORD *)v19 + 24))(v19, v17, 0, 8);
    }
  }
  return result;
}

void FIK::EnrollmentPoseSolver::setTargetBoneLengths(FIK::RetargetingNode *a1, uint64_t a2)
{
  float v4;
  uint64_t v5;
  FIK *v6;
  void (***v7)(FIK::CrtAllocator *__hidden);
  void (***v8)(FIK::CrtAllocator *__hidden);
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  float *v13;
  uint64_t v14;

  v4 = FIK::RetargetingNode::sourceScale(a1);
  v5 = *((_QWORD *)a1 + 128);
  v7 = FIK::defaultAllocator(v6);
  v8 = v7;
  if (((v5 + 7) & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v9 = (void *)((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), unint64_t, uint64_t))(*v7)[2])(v7, 4 * ((v5 + 7) & 0xFFFFFFFFFFFFFFF8), 4);
    v10 = (uint64_t)v9;
    if (4 * ((v5 + 7) & 0xFFFFFFFFFFFFFFF8))
      bzero(v9, 4 * ((v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  }
  else
  {
    v10 = 0;
  }
  v11 = *((_QWORD *)a1 + 128);
  if (v11)
  {
    v12 = (uint64_t *)*((_QWORD *)a1 + 130);
    v13 = (float *)v10;
    do
    {
      v14 = *v12++;
      *v13++ = v4 * *(float *)(a2 + 24 * v14);
      --v11;
    }
    while (v11);
  }
  FIK::AnimNode::updateSolverBoneLengths((uint64_t)a1, v10, v5);
  if (v10)
    ((void (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v8)[3])(v8, v10, 0, 8);
}

void FIK::EnrollmentPoseSolver::updateShoulderOffsets(FIK::EnrollmentPoseSolver *this)
{
  uint64_t Rig;
  FIK *v3;
  int v4;
  void (***v5)(FIK::CrtAllocator *__hidden);
  FIK *v6;
  int v7;
  void (***v8)(FIK::CrtAllocator *__hidden);
  int v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  int v14;
  unint64_t v16;
  unint64_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float v20;
  float v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  float32x4_t v25;
  _OWORD v26[2];
  _OWORD v27[2];
  _OWORD v28[2];
  uint64_t v29;
  uint64_t v30;
  void (***v31)(FIK::CrtAllocator *__hidden);

  Rig = FIK::AnimNode::GetRig(this);
  v29 = 0;
  v30 = 0;
  v31 = FIK::defaultAllocator((FIK *)Rig);
  IKString::assign(&v29, "left_arm_joint_Task", (IKString *)0x13);
  v3 = (FIK *)FIK::IKRigUtils::GetTaskIndexByName<FIK::MoCapRig>((uint64_t)&v29, Rig);
  v4 = (int)v3;
  if (v30)
    v3 = (FIK *)((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v31)[3])(v31, v29, 0, 8);
  v5 = FIK::defaultAllocator(v3);
  v29 = 0;
  v30 = 0;
  v31 = v5;
  IKString::assign(&v29, "right_arm_joint_Task", (IKString *)0x14);
  v6 = (FIK *)FIK::IKRigUtils::GetTaskIndexByName<FIK::MoCapRig>((uint64_t)&v29, Rig);
  v7 = (int)v6;
  if (v30)
    v6 = (FIK *)((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v31)[3])(v31, v29, 0, 8);
  v8 = FIK::defaultAllocator(v6);
  v29 = 0;
  v30 = 0;
  v31 = v8;
  IKString::assign(&v29, "neck_1_joint_Task", (IKString *)0x11);
  v9 = FIK::IKRigUtils::GetTaskIndexByName<FIK::MoCapRig>((uint64_t)&v29, Rig);
  if (v30)
    ((void (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v31)[3])(v31, v29, 0, 8);
  if (v9 != -1)
  {
    v10 = v4;
    v11 = *(_QWORD *)(Rig + 192);
    v12 = *(_DWORD *)(v11 + ((uint64_t)v4 << 8) + 48);
    v13 = v7;
    v14 = *(_DWORD *)(v11 + ((uint64_t)v7 << 8) + 48);
    if (v12 != -1 && v14 != -1)
    {
      v16 = v12;
      v17 = v14;
      FIK::PoseConverter::PoseConverter<FIK::MoCapBone>(&v29, *(_QWORD *)(Rig + 224), *(_QWORD *)(Rig + 208));
      v25 = *(float32x4_t *)FIK::PoseConverter::GetGlobalTransform((FIK::PoseConverter *)&v29, v16);
      v18 = vsubq_f32(v25, *(float32x4_t *)FIK::PoseConverter::GetGlobalTransform((FIK::PoseConverter *)&v29, v17));
      v19 = vmulq_f32(v18, v18);
      v20 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2), vaddq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 1))).f32[0]);
      *((float *)this + 265) = v20;
      v21 = *(float *)(Rig + 308);
      v22 = *(_OWORD *)(*(_QWORD *)(Rig + 192) + (v10 << 8) + 208);
      DWORD2(v22) = 0;
      v28[0] = v22;
      v28[1] = xmmword_210802BA0;
      FIK::RetargetingNode::adjustTaskOffset(this, v10, v28);
      v23 = *(_OWORD *)(*(_QWORD *)(Rig + 192) + (v13 << 8) + 208);
      DWORD2(v23) = 0;
      v27[0] = v23;
      v27[1] = xmmword_210802BA0;
      FIK::RetargetingNode::adjustTaskOffset(this, v13, v27);
      v24 = *(_OWORD *)(*(_QWORD *)(Rig + 192) + ((uint64_t)v9 << 8) + 208);
      *((float *)&v24 + 2) = (float)(v20 / -15.0) / v21;
      v26[0] = v24;
      v26[1] = xmmword_210802BA0;
      FIK::RetargetingNode::adjustTaskOffset(this, v9, v26);
      FIK::PoseConverter::~PoseConverter((FIK::PoseConverter *)&v29);
    }
  }
}

void FIK::EnrollmentPoseSolver::setupPreprocessingSources(uint64_t a1, FIK *a2)
{
  uint64_t Rig;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  void **v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  int v17;
  int v18;
  FIK *v20;
  uint64_t v21;
  uint64_t v22;
  const void *v23;
  char *v24;
  char **v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int v38;
  void *v39;
  float32x4_t v40;
  uint64_t *v41;
  uint64_t v42;
  FIK *v43;
  void (***v44)(FIK::CrtAllocator *__hidden);
  char **v45;
  char *v46;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  unint64_t v52;
  _DWORD *v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  __n128 v60;
  _BYTE v61[48];
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint8_t buf[24];
  void (***v66)(FIK::CrtAllocator *__hidden);
  _BYTE v67[112];
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  Rig = FIK::AnimNode::GetRig((FIK::AnimNode *)a1);
  FIK::Enrollment::VirtualSourceController::Descriptor::Descriptor((FIK *)v61, (uint64_t)"MidShoulder", 11, (uint64_t)"Atlas", 5, (uint64_t)"virtualHips", 11);
  v4 = *(_QWORD *)(Rig + 176);
  if (v4)
  {
    v5 = *(_QWORD *)(Rig + 192);
    v53 = (_DWORD *)(a1 + 640);
    v54 = v5 + (v4 << 8);
    do
    {
      v6 = *(unsigned int *)(v5 + 200);
      if ((_DWORD)v6 == -1)
      {
        v41 = ikinemaLogObject();
        ikinemaAssertHandler(*v41, 0, (uint64_t)"setupPreprocessingSources", "(rigSourceIndex != kInvalidRigIndex) Invalid task source index");
      }
      v7 = *(_QWORD *)(Rig + 256) + 96 * (int)v6;
      v10 = *(_QWORD *)(v7 + 16);
      v9 = (uint64_t *)(v7 + 16);
      v8 = v10;
      v11 = (void **)(v9 - 1);
      if (!v10)
      {
        *(_QWORD *)buf = &unk_2108059BE;
        *(_QWORD *)&buf[8] = 0;
        if (std::string_view::find[abi:nn180100]((uint64_t *)buf, "_ray_", 5, 0) != -1)
          goto LABEL_36;
LABEL_26:
        v20 = a2;
        v21 = Rig;
        v22 = 0;
        v23 = *(const void **)buf;
        v24 = *(char **)&buf[8];
        while ((&getSourceTypeFromName(std::string_view)::kElbowSourceNames)[v22 + 1] != v24
             || memcmp((&getSourceTypeFromName(std::string_view)::kElbowSourceNames)[v22], v23, (size_t)v24))
        {
          v22 += 2;
          if (v22 == 4)
          {
            v25 = FIK::EnrollmentPoseSolverV4::areAllRequiredJointsProvided(void)const::requiredSourceNames;
            goto LABEL_33;
          }
        }
        v25 = &(&getSourceTypeFromName(std::string_view)::kElbowSourceNames)[v22];
LABEL_33:
        Rig = v21;
        a2 = v20;
        if ((char *)v25 - (char *)&getSourceTypeFromName(std::string_view)::kElbowSourceNames == 32)
        {
          if (*v9)
            v26 = *v11;
          else
            v26 = &unk_2108059BE;
          FIK::Enrollment::LiftedSource::LiftedSource(&v58, v20, v26);
          v52 = v52 & 0xFFFFFFFF00000000 | v59;
          FIK::Enrollment::DataPreprocessor::addLiftedSource((uint64_t)v53, v58, v59);
        }
        else
        {
LABEL_36:
          v27 = *v9;
          if (*v9)
            v28 = *v11;
          else
            v28 = &unk_2108059BE;
          v29 = *(_QWORD *)(Rig + 208);
          if (!v29)
            goto LABEL_45;
          v30 = 0;
          v31 = *(_QWORD *)(Rig + 224);
          v32 = 280;
          while (*(_DWORD *)(v31 + v32) != (_DWORD)v6)
          {
            --v30;
            v32 += 544;
            if (-v29 == v30)
              goto LABEL_45;
          }
          if ((_DWORD)v30 != 1)
          {
            v35 = 0;
            v36 = 544 * v29;
            while (*(_DWORD *)(v31 + v35 + 4) + (_DWORD)v30)
            {
              v35 += 544;
              if (v36 == v35)
                goto LABEL_50;
            }
            v38 = *(_DWORD *)(v31 + v35);
            if (v38 == -1)
            {
LABEL_50:
              v37 = ikinemaLogObject();
              ikinemaAssertHandler(*v37, 0, (uint64_t)"createRaySource", "(childBoneIndex != kInvalidRigIndex) Failed to find child bone");
              v31 = *(_QWORD *)(Rig + 224);
              v38 = -1;
            }
            v40 = vmulq_f32(*(float32x4_t *)(v31 + 544 * v38 + 64), *(float32x4_t *)(v31 + 544 * v38 + 64));
            v40.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v40, 2), vaddq_f32(v40, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.f32, 1))).f32[0]);
            v34 = (float)(1.0 / *(float *)(Rig + 308)) * (float)(v40.f32[0] + v40.f32[0]);
          }
          else
          {
LABEL_45:
            v33 = ikinemaLogObject()[1];
            v34 = 1.0;
            if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "createRaySource";
              *(_WORD *)&buf[12] = 2080;
              *(_QWORD *)&buf[14] = v28;
              _os_log_impl(&dword_21078E000, v33, OS_LOG_TYPE_DEFAULT, "%s: Failed to find rig bone driven by source: %s", buf, 0x16u);
            }
          }
          FIK::Enrollment::RaySource::RaySource(&v60, a2, v28, v27, v6, v34);
          FIK::Enrollment::DataPreprocessor::addRaySource((uint64_t)v53, &v60);
        }
        goto LABEL_58;
      }
      v12 = (unsigned __int8 *)*v11;
      *(_QWORD *)buf = *v11;
      *(_QWORD *)&buf[8] = v8;
      if (v8 == 9)
      {
        if (*(_QWORD *)v12 == 0x6C726F7732646D68 && v12[8] == 100)
        {
          *v53 = v6;
          goto LABEL_58;
        }
      }
      else
      {
        if (v8 == 5)
        {
          v13 = *(_DWORD *)v12;
          v14 = v12[4];
          if (v13 != 1634497601 || v14 != 115)
            goto LABEL_26;
          *(_DWORD *)(a1 + 644) = v6;
          goto LABEL_58;
        }
        if (v8 < 7)
          goto LABEL_26;
      }
      v17 = *(_DWORD *)v12;
      v18 = *(_DWORD *)(v12 + 3);
      if (v17 != 1953655158 || v18 != 1818326388)
        goto LABEL_26;
      if (*v9)
        v39 = *v11;
      else
        v39 = &unk_2108059BE;
      FIK::Enrollment::VirtualSourceController::Descriptor::addDependentSource((uint64_t)v61, (uint64_t)v39, *v9);
LABEL_58:
      v5 += 256;
    }
    while (v5 != v54);
  }
  if (*(_DWORD *)(a1 + 640) == -1)
    *(_DWORD *)(a1 + 640) = FIK::IKRigUtils::getBoneIndex<FIK::RigBoneBase,void>("hmd2world", 9uLL, (unsigned int *)(Rig + 240));
  v42 = FIK::AnimNode::GetRig((FIK::AnimNode *)a1);
  FIK::Enrollment::VirtualSourceController::VirtualSourceController(v67, v61, v42);
  v43 = (FIK *)std::optional<FIK::Enrollment::VirtualSourceController>::operator=[abi:nn180100]<FIK::Enrollment::VirtualSourceController,void>(a1 + 816, (uint64_t)v67);
  v68 = 0;
  if (v69)
    v43 = (FIK *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v70 + 24))(v70, v69, 0, 8);
  v44 = FIK::defaultAllocator(v43);
  memset(buf, 0, sizeof(buf));
  v66 = v44;
  v45 = &FIK::EnrollmentPoseSolver::setupPreprocessingSources(FIK::Enrollment::SourceDefinition const&)::hipsAlignSourceNames;
  do
  {
    v57 = 0;
    v46 = *v45;
    FIK::Enrollment::SourceDefinition::getDetectionIndicesForPrefixedName(a2, *v45, (size_t)v45[1], (_DWORD *)&v57 + 1, &v57);
    if (HIDWORD(v57) != -1 && (_DWORD)v57 != -1)
    {
      FIK::Enrollment::LiftedSource::LiftedSource(&v55, a2, v46);
      FIK::IKArray<FIK::Enrollment::LiftedSource>::reserve(buf, *(_QWORD *)buf + 1);
      v48 = *(_QWORD *)&buf[16] + 12 * *(_QWORD *)buf;
      v49 = v55;
      *(_DWORD *)(v48 + 8) = v56;
      *(_QWORD *)v48 = v49;
      ++*(_QWORD *)buf;
    }
    v45 += 2;
  }
  while (v45 != &getSourceTypeFromName(std::string_view)::kElbowSourceNames);
  if (*(_QWORD *)buf)
  {
    FIK::IKArray<FIK::Enrollment::LiftedSource>::operator=((uint64_t *)(a1 + 784), (uint64_t *)buf);
  }
  else
  {
    v50 = ikinemaLogObject()[1];
    if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
      FIK::EnrollmentPoseSolver::setupPreprocessingSources(v50);
  }
  *(_QWORD *)buf = 0;
  if (*(_QWORD *)&buf[16])
    ((void (*)(void (***)(FIK::CrtAllocator *__hidden), _QWORD, _QWORD, uint64_t))(*v66)[3])(v66, *(_QWORD *)&buf[16], 0, 8);
  v62 = 0;
  if (v63)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v64 + 24))(v64, v63, 0, 8);
}

uint64_t FIK::IKRigUtils::GetTaskIndexByName<FIK::MoCapRig>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  size_t v5;
  uint64_t v6;
  _QWORD *i;
  const void *v8;

  v2 = *(_QWORD *)(a2 + 176);
  if (!v2)
    return 0xFFFFFFFFLL;
  v3 = *(_QWORD *)(a2 + 192);
  if (*(_QWORD *)(a1 + 8))
    v4 = *(const char **)a1;
  else
    v4 = (const char *)&unk_2108059BE;
  v5 = strlen(v4);
  v6 = 0;
  for (i = (_QWORD *)(v3 + 8); ; i += 32)
  {
    v8 = *i ? (const void *)*(i - 1) : &unk_2108059BE;
    if (*i == v5 && !memcmp(v8, v4, v5))
      break;
    if (v2 == ++v6)
      return 0xFFFFFFFFLL;
  }
  return v6;
}

uint64_t FIK::EnrollmentPoseSolver::solve(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t Rig;
  void (***v13)(FIK::CrtAllocator *__hidden);
  FIK *v14;
  int v15;
  void (***v16)(FIK::CrtAllocator *__hidden);
  int v17;
  uint64_t v18;
  __int128 v19;
  int v20;
  float32x4_t v21;
  float32x4_t v22;
  NSObject *v23;
  int v25;
  uint8_t v26[4];
  const char *v27;
  __int128 buf;
  void (***v29)(FIK::CrtAllocator *__hidden);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  __int16 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v25 = 2;
  v6 = FIK::Enrollment::DataPreprocessor::generateSolverSources((int *)(a1 + 640), a1 + 608, a4, &v25);
  if (v25 == 1)
  {
    v8 = ikinemaLogObject()[1];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = "solve";
      _os_log_impl(&dword_21078E000, v8, OS_LOG_TYPE_DEFAULT, "%s: Failed to find data for the requested frame index", (uint8_t *)&buf, 0xCu);
    }
    return 2;
  }
  else
  {
    v10 = (_OWORD *)v6;
    v11 = v7;
    Rig = FIK::AnimNode::GetRig((FIK::AnimNode *)a1);
    v13 = FIK::defaultAllocator((FIK *)Rig);
    buf = 0uLL;
    v29 = v13;
    IKString::assign(&buf, "left_arm_joint_Task", (IKString *)0x13);
    v14 = (FIK *)FIK::IKRigUtils::GetTaskIndexByName<FIK::MoCapRig>((uint64_t)&buf, Rig);
    v15 = (int)v14;
    if (*((_QWORD *)&buf + 1))
      v14 = (FIK *)((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), _QWORD, _QWORD, uint64_t))(*v29)[3])(v29, buf, 0, 8);
    v16 = FIK::defaultAllocator(v14);
    buf = 0uLL;
    v29 = v16;
    IKString::assign(&buf, "right_arm_joint_Task", (IKString *)0x14);
    v17 = FIK::IKRigUtils::GetTaskIndexByName<FIK::MoCapRig>((uint64_t)&buf, Rig);
    if (*((_QWORD *)&buf + 1))
      ((void (*)(void (***)(FIK::CrtAllocator *__hidden), _QWORD, _QWORD, uint64_t))(*v29)[3])(v29, buf, 0, 8);
    v18 = *(_QWORD *)(Rig + 192) + ((uint64_t)v15 << 8);
    IKString::IKString((IKString *)&buf, (const IKString *)v18);
    IKString::IKString((IKString *)&v30, (const IKString *)(v18 + 24));
    v19 = *(_OWORD *)(v18 + 48);
    v34 = *(_QWORD *)(v18 + 64);
    v33 = v19;
    v35 = *(_OWORD *)(v18 + 80);
    v36 = *(_OWORD *)(v18 + 96);
    v37 = *(_OWORD *)(v18 + 112);
    v38 = *(_OWORD *)(v18 + 128);
    v39 = *(_OWORD *)(v18 + 144);
    v40 = *(_OWORD *)(v18 + 160);
    IKString::IKString((IKString *)&v41, (const IKString *)(v18 + 176));
    v20 = *(_DWORD *)(v18 + 200);
    v45 = *(_WORD *)(v18 + 204);
    v44 = v20;
    v46 = *(_OWORD *)(v18 + 208);
    v47 = *(_OWORD *)(v18 + 224);
    v48 = *(_OWORD *)(v18 + 240);
    v21 = vsubq_f32((float32x4_t)v10[2 * v20], (float32x4_t)v10[2 * *(int *)(*(_QWORD *)(Rig + 192) + ((uint64_t)v17 << 8) + 200)]);
    v22 = vmulq_f32(v21, v21);
    if (vabds_f32(*(float *)(a1 + 1060), sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2), vaddq_f32(v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1))).f32[0])/ *(float *)(Rig + 308)) > 0.01)
    {
      v23 = ikinemaLogObject()[1];
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v26 = 136315138;
        v27 = "solve";
        _os_log_impl(&dword_21078E000, v23, OS_LOG_TYPE_DEFAULT, "%s: Current frame shoulder width is differnt from enrolled shoulder width", v26, 0xCu);
      }
    }
    FIK::EnrollmentPoseSolver::updateTaskWeights((FIK::AnimNode *)a1, (_QWORD *)(a1 + 688), 1);
    v9 = FIK::EnrollmentPoseSolver::solveInternal(a1, v10, v11, a2);
    FIK::EnrollmentPoseSolver::logAfterSolve((FIK *)a1, (float32x4_t *)&v10[2 * *(int *)(a1 + 640)]);
    if (v42)
    {
      (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v43 + 24))(v43, v41, 0, 8);
      v41 = 0;
      v42 = 0;
    }
    if (v31)
    {
      (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v32 + 24))(v32, v30, 0, 8);
      v30 = 0;
      v31 = 0;
    }
    if (*((_QWORD *)&buf + 1))
      ((void (*)(void (***)(FIK::CrtAllocator *__hidden), _QWORD, _QWORD, uint64_t))(*v29)[3])(v29, buf, 0, 8);
  }
  return v9;
}

void FIK::EnrollmentPoseSolver::updateTaskWeights(FIK::AnimNode *a1, _QWORD *a2, int a3)
{
  _QWORD *Rig;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  void *v18;
  uint64_t v19;
  uint64_t *v20;
  _BYTE buf[22];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  Rig = (_QWORD *)FIK::AnimNode::GetRig(a1);
  if (*a2 != Rig[30])
  {
    v20 = ikinemaLogObject();
    ikinemaAssertHandler(*v20, 0, (uint64_t)"updateTaskWeights", "(sourcesValidity.size() == rig.sources.size()) Source validity array does not match rig sources count");
  }
  if (Rig[22])
  {
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = Rig[24];
      v10 = *(unsigned __int8 *)(a2[2] + *(int *)(v9 + v7 + 200));
      v11 = FIK::RetargetingNode::constraintByIndex(a1, v8);
      v12 = *(_QWORD **)(v11 + 8);
      v13 = *(_QWORD **)(v11 + 16);
      if (*(_OWORD *)(v11 + 8) != 0)
      {
        if (v10)
        {
          if (a3)
          {
            if (v12)
              v14 = (uint64_t)v12 + *(_QWORD *)(*v12 - 264);
            else
              v14 = 0;
            setTaskWeights(v14, (float *)(v9 + v7 + 80));
            if (v13)
              v19 = (uint64_t)v13 + *(_QWORD *)(*v13 - 264);
            else
              v19 = 0;
            setTaskWeights(v19, (float *)(v9 + v7 + 96));
          }
        }
        else
        {
          if (v12)
            v15 = (uint64_t)v12 + *(_QWORD *)(*v12 - 264);
          else
            v15 = 0;
          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = 0;
          setTaskWeights(v15, (float *)buf);
          if (v13)
            v16 = (uint64_t)v13 + *(_QWORD *)(*v13 - 264);
          else
            v16 = 0;
          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = 0;
          setTaskWeights(v16, (float *)buf);
          v17 = *ikinemaLogObject();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          {
            if (*(_QWORD *)(v9 + v7 + 8))
              v18 = *(void **)(v9 + v7);
            else
              v18 = &unk_2108059BE;
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "updateTaskWeights";
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = v18;
            _os_log_impl(&dword_21078E000, v17, OS_LOG_TYPE_DEFAULT, "%s: Task (%s) was disabled due to missing data", buf, 0x16u);
          }
        }
      }
      ++v8;
      v7 += 256;
    }
    while (v8 < Rig[22]);
  }
}

uint64_t FIK::EnrollmentPoseSolver::solveInternal(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  _OWORD v16[2];

  FIK::EnrollmentPoseSolver::updateRestForInput((int *)a1, a2, a3);
  v8 = *(_OWORD **)(a1 + 1008);
  v9 = *(_QWORD *)(a1 + 992);
  v16[0] = 0uLL;
  v16[1] = xmmword_210802BA0;
  v10 = FIK::RetargetingNode::Solve(a1, a2, a3, v8, v9, v16);
  if (!*(_BYTE *)(a1 + 1056))
    FIK::EnrollmentPoseSolver::convertOutputToVIOSpace(a1, (uint64_t)&a2[2 * *(int *)(a1 + 640)]);
  if (*(_QWORD *)(a1 + 1024))
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (_OWORD *)(*(_QWORD *)(a1 + 1008) + v11);
      v14 = (_OWORD *)(a4 + 32 * *(_QWORD *)(*(_QWORD *)(a1 + 1040) + 8 * v12));
      *v14 = *v13;
      v14[1] = v13[1];
      ++v12;
      v11 += 32;
    }
    while (v12 < *(_QWORD *)(a1 + 1024));
  }
  return v10;
}

FIK *FIK::EnrollmentPoseSolver::logAfterSolve(FIK *this, float32x4_t *a2)
{
  uint64_t v3;
  FIK *v4;
  FIK *Rig;
  uint64_t v6;
  void (***v7)(FIK::CrtAllocator *__hidden);
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  float v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  int32x4_t v16;
  int8x16_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int32x4_t v24;
  float32x4_t v25;
  int32x4_t v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  if (*((_BYTE *)this + 2256))
  {
    v3 = (uint64_t)this;
    v4 = (FIK *)((char *)this + 1064);
    Rig = (FIK *)FIK::AnimNode::GetRig(this);
    v6 = *((_QWORD *)Rig + 22);
    v7 = FIK::defaultAllocator(Rig);
    FIK::IKArray<FIK::Transform>::IKArray<FIK::Transform,void>(&v29, v6, (uint64_t)v7);
    FIK::RetargetingNode::GetTaskPosDebug(v3, v30, v29);
    v8 = FIK::AnimNode::GetRig((FIK::AnimNode *)v3);
    v9 = v30;
    v10 = 1.0 / *(float *)(v8 + 308);
    if (*(_BYTE *)(v3 + 1056))
    {
      if (v29)
      {
        v11 = v30 + 32 * v29;
        v12 = v10;
        v13.i64[0] = 0x4000000040000000;
        v13.i64[1] = 0x4000000040000000;
        do
        {
          v14 = *(float32x4_t *)(v9 + 16);
          v15 = vmulq_n_f32(*(float32x4_t *)v9, v12);
          v16 = (int32x4_t)vnegq_f32(v14);
          v17 = (int8x16_t)vtrn2q_s32((int32x4_t)v14, vtrn1q_s32((int32x4_t)v14, v16));
          v18 = a2[1];
          v19 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v14, (int8x16_t)v16, 8uLL), *(float32x2_t *)v18.f32, 1), (float32x4_t)vextq_s8(v17, v17, 8uLL), v18.f32[0]);
          v20 = (float32x4_t)vrev64q_s32((int32x4_t)v14);
          v20.i32[0] = v16.i32[1];
          v20.i32[3] = v16.i32[2];
          v21 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v14, v18, 3), v20, v18, 2), v19);
          v22 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v18, (int32x4_t)v18), (int8x16_t)v18, 0xCuLL);
          v23 = vnegq_f32(v18);
          v24 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v15, (int32x4_t)v15), (int8x16_t)v15, 0xCuLL), v23), v15, v22);
          v25 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v24, v24), (int8x16_t)v24, 0xCuLL);
          v26 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v25, (int32x4_t)v25), (int8x16_t)v25, 0xCuLL), v23), v25, v22);
          *(float32x4_t *)v9 = vaddq_f32(*a2, vmlaq_f32(v15, v13, vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v26, v26), (int8x16_t)v26, 0xCuLL), v25, v18, 3)));
          *(float32x4_t *)(v9 + 16) = v21;
          v9 += 32;
        }
        while (v9 != v11);
      }
    }
    else if (v29)
    {
      v27 = v10;
      v28 = 32 * v29;
      do
      {
        *(float32x4_t *)v9 = vmulq_n_f32(*(float32x4_t *)v9, v27);
        v9 += 32;
        v28 -= 32;
      }
      while (v28);
    }
    FIK::Enrollment::DataLogger::exportTasksFrame((uint64_t)v4, v30, v29);
    this = FIK::Enrollment::DataLogger::exportSolvedFrame(v4, *(_OWORD **)(v3 + 1008), *(_QWORD *)(v3 + 992), a2);
    v29 = 0;
    if (v30)
      return (FIK *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v31 + 24))(v31, v30, 0, 8);
  }
  return this;
}

void FIK::EnrollmentPoseSolver::updateRestForInput(int *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t Rig;
  unsigned int *v7;
  uint64_t *v8;
  uint64_t v9;
  void (***v10)(FIK::CrtAllocator *__hidden);
  int32x4_t v11;
  float32x4_t v12;
  int8x16_t v13;
  float32x2_t v14;
  float32x4_t v15;
  unsigned __int32 v16;
  float32x2_t v17;
  float32x2_t v18;
  int v19;
  unint64_t GlobalTransform;
  float32x4_t v21;
  float32x4_t v22;
  int8x16_t v23;
  float32x2_t v24;
  float32x4_t v25;
  unsigned __int32 v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  int32x4_t v32;
  float32x4_t v33;
  int32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  int8x16_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  int32x4_t v44;
  float32x4_t v45;
  int32x4_t v46;
  unint64_t v47;
  float32x4_t v48;
  int32x4_t v49;
  int8x16_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  int32x4_t v55;
  float32x4_t v56;
  int32x4_t v57;
  float32x4_t v58;
  uint64_t RootSegment;
  int32x4_t v60;
  float32x4_t v61;
  float v62;
  float32x4_t v63;
  int32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  _QWORD v67[2];
  uint64_t v68;
  uint64_t v69;
  float32x4_t v70;
  float32x4_t v71;
  uint64_t v72[20];

  Rig = FIK::AnimNode::GetRig((FIK::AnimNode *)a1);
  v7 = (unsigned int *)(Rig + 208);
  v8 = FIK::PoseConverter::PoseConverter<FIK::MoCapBone>(v72, *(_QWORD *)(Rig + 224), *(_QWORD *)(Rig + 208));
  v9 = a1[161];
  v10 = FIK::defaultAllocator((FIK *)v8);
  FIK::IKArray<FIK::Transform>::IKArray<FIK::Transform const,void>(v67, a2, a3, (uint64_t)v10);
  FIK::PoseConverter::getGlobalTransformForIndex<FIK::RigBoneBase>(v67, (uint64_t)(v7 + 8), v9, &v70);
  v62 = *((float *)v7 + 25);
  v11 = (int32x4_t)v71;
  v61 = v70;
  v67[0] = 0;
  if (v68)
  {
    v64 = (int32x4_t)v71;
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v69 + 24))(v69, v68, 0, 8);
    v11 = v64;
  }
  v60 = vrev64q_s32((int32x4_t)0);
  v12 = (float32x4_t)vtrn2q_s32(v60, v11);
  v13 = (int8x16_t)vmulq_f32(v12, v12);
  v14 = vadd_f32(*(float32x2_t *)v13.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL));
  if (vaddv_f32(v14) == 0.0)
  {
    v15 = (float32x4_t)xmmword_210802BA0;
  }
  else
  {
    v16 = vadd_f32(v14, (float32x2_t)vdup_lane_s32((int32x2_t)v14, 1)).u32[0];
    v17 = vrsqrte_f32((float32x2_t)v16);
    v18 = vmul_f32(v17, vrsqrts_f32((float32x2_t)v16, vmul_f32(v17, v17)));
    v15 = vmulq_n_f32(v12, vmul_f32(v18, vrsqrts_f32((float32x2_t)v16, vmul_f32(v18, v18))).f32[0]);
  }
  v65 = v15;
  v19 = FIK::IKRigUtils::getBoneIndex<FIK::MoCapBone,void>("head_joint", 0xAuLL, v7);
  GlobalTransform = FIK::PoseConverter::GetGlobalTransform((FIK::PoseConverter *)v72, v19);
  v21 = *(float32x4_t *)GlobalTransform;
  v22 = (float32x4_t)vtrn2q_s32(v60, *(int32x4_t *)(GlobalTransform + 16));
  v23 = (int8x16_t)vmulq_f32(v22, v22);
  v24 = vadd_f32(*(float32x2_t *)v23.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL));
  if (vaddv_f32(v24) == 0.0)
  {
    v25 = (float32x4_t)xmmword_210804150;
  }
  else
  {
    v26 = vadd_f32(v24, (float32x2_t)vdup_lane_s32((int32x2_t)v24, 1)).u32[0];
    v27 = vrsqrte_f32((float32x2_t)v26);
    v28 = vmul_f32(v27, vrsqrts_f32((float32x2_t)v26, vmul_f32(v27, v27)));
    v25 = vmulq_f32(vmulq_n_f32(v22, vmul_f32(v28, vrsqrts_f32((float32x2_t)v26, vmul_f32(v28, v28))).f32[0]), (float32x4_t)xmmword_210802C20);
  }
  v29 = vmulq_n_f32(v61, v62);
  v30 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v25, (int32x4_t)v25), (int8x16_t)v25, 0xCuLL);
  v31 = vnegq_f32(v25);
  v32 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v21, (int32x4_t)v21), (int8x16_t)v21, 0xCuLL), v31), v21, v30);
  v33 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v32, v32), (int8x16_t)v32, 0xCuLL);
  v34 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v33, (int32x4_t)v33), (int8x16_t)v33, 0xCuLL), v31), v33, v30);
  v35 = vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v34, v34), (int8x16_t)v34, 0xCuLL), v33, v25, 3);
  v33.i64[0] = 0x4000000040000000;
  v33.i64[1] = 0x4000000040000000;
  v36 = vmlaq_f32(v21, v33, v35);
  v37.i64[0] = 0x4000000040000000;
  v37.i64[1] = 0x4000000040000000;
  v38 = (int8x16_t)vtrn2q_s32((int32x4_t)v25, vtrn1q_s32((int32x4_t)v25, (int32x4_t)v31));
  v39 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v25, (int8x16_t)v31, 8uLL), *(float32x2_t *)v65.f32, 1), (float32x4_t)vextq_s8(v38, v38, 8uLL), v65.f32[0]);
  v40 = (float32x4_t)vrev64q_s32((int32x4_t)v25);
  v40.i32[0] = v31.i32[1];
  v40.i32[3] = v31.i32[2];
  v63 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v25, v65, 3), v40, v65, 2), v39);
  v41 = vnegq_f32(v36);
  v42 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v65, (int32x4_t)v65), (int8x16_t)v65, 0xCuLL);
  v43 = vnegq_f32(v65);
  v44 = (int32x4_t)vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v41, (int32x4_t)v41), (int8x16_t)v41, 0xCuLL), v43), v42, v36);
  v45 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v44, v44), (int8x16_t)v44, 0xCuLL);
  v46 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v45, (int32x4_t)v45), (int8x16_t)v45, 0xCuLL), v43), v45, v42);
  v66 = vaddq_f32(v29, vmlaq_f32(v41, v37, vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v46, v46), (int8x16_t)v46, 0xCuLL), v45, v65, 3)));
  v47 = FIK::PoseConverter::GetGlobalTransform((FIK::PoseConverter *)v72, 0);
  v48 = *(float32x4_t *)(v47 + 16);
  v49 = (int32x4_t)vnegq_f32(v48);
  v50 = (int8x16_t)vtrn2q_s32((int32x4_t)v48, vtrn1q_s32((int32x4_t)v48, v49));
  v51 = (float32x4_t)vrev64q_s32((int32x4_t)v48);
  v51.i32[0] = v49.i32[1];
  v51.i32[3] = v49.i32[2];
  v52 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v48, v63, 3), v51, v63, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v48, (int8x16_t)v49, 8uLL), *(float32x2_t *)v63.f32, 1), (float32x4_t)vextq_s8(v50, v50, 8uLL), v63.f32[0]));
  v53 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v63, (int32x4_t)v63), (int8x16_t)v63, 0xCuLL);
  v54 = vnegq_f32(v63);
  v55 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)v47, *(int32x4_t *)v47), *(int8x16_t *)v47, 0xCuLL), v54), *(float32x4_t *)v47, v53);
  v56 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v55, v55), (int8x16_t)v55, 0xCuLL);
  v57 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v56, (int32x4_t)v56), (int8x16_t)v56, 0xCuLL), v54), v56, v53);
  v58 = vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v57, v57), (int8x16_t)v57, 0xCuLL), v56, v63, 3);
  v56.i64[0] = 0x4000000040000000;
  v56.i64[1] = 0x4000000040000000;
  v70 = vaddq_f32(vmlaq_f32(*(float32x4_t *)v47, v56, v58), v66);
  v71 = v52;
  RootSegment = FIK::IKSolver::getRootSegment((FIK::IKSolver *)(a1 + 4));
  (*(void (**)(uint64_t, float32x4_t *))(*(_QWORD *)RootSegment + 440))(RootSegment, &v70);
  FIK::PoseConverter::~PoseConverter((FIK::PoseConverter *)v72);
}

_QWORD *FIK::PoseConverter::getGlobalTransformForIndex<FIK::RigBoneBase>@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, float32x4_t *a4@<X8>)
{
  uint64_t v5;
  float32x4_t v6;
  int32x4_t v7;
  int8x16_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  int32x4_t v13;
  float32x4_t v14;
  int32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;

  v5 = result[2] + 32 * a3;
  if (*(_DWORD *)(*(_QWORD *)(a2 + 16) + 96 * a3 + 4) == -1)
  {
    v17 = *(float32x4_t *)v5;
    v10 = *(float32x4_t *)(v5 + 16);
  }
  else
  {
    result = FIK::PoseConverter::getGlobalTransformForIndex<FIK::RigBoneBase>(&v18);
    v6 = *(float32x4_t *)(v5 + 16);
    v7 = (int32x4_t)vnegq_f32(v6);
    v8 = (int8x16_t)vtrn2q_s32((int32x4_t)v6, vtrn1q_s32((int32x4_t)v6, v7));
    v9 = (float32x4_t)vrev64q_s32((int32x4_t)v6);
    v9.i32[0] = v7.i32[1];
    v9.i32[3] = v7.i32[2];
    v10 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v6, v19, 3), v9, v19, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v6, (int8x16_t)v7, 8uLL), *(float32x2_t *)v19.f32, 1), (float32x4_t)vextq_s8(v8, v8, 8uLL), v19.f32[0]));
    v11 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v19, (int32x4_t)v19), (int8x16_t)v19, 0xCuLL);
    v12 = vnegq_f32(v19);
    v13 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)v5, *(int32x4_t *)v5), *(int8x16_t *)v5, 0xCuLL), v12), *(float32x4_t *)v5, v11);
    v14 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v13, v13), (int8x16_t)v13, 0xCuLL);
    v15 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v14, (int32x4_t)v14), (int8x16_t)v14, 0xCuLL), v12), v14, v11);
    v16 = vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v15, v15), (int8x16_t)v15, 0xCuLL), v14, v19, 3);
    v14.i64[0] = 0x4000000040000000;
    v14.i64[1] = 0x4000000040000000;
    v17 = vaddq_f32(v18, vmlaq_f32(*(float32x4_t *)v5, v14, v16));
  }
  *a4 = v17;
  a4[1] = v10;
  return result;
}

float32x4_t FIK::EnrollmentPoseSolver::convertOutputToVIOSpace(uint64_t a1, uint64_t a2)
{
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  int32x4_t v5;
  float32x4_t v6;
  int32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  uint64_t v10;
  float32x4_t v11;
  int32x4_t v12;
  int8x16_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  int32x4_t v17;
  float32x4_t v18;
  int32x4_t v19;
  float32x4_t result;

  v2 = vmulq_f32(*(float32x4_t *)(a2 + 16), (float32x4_t)xmmword_210802C20);
  v3 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v2, (int32x4_t)v2), (int8x16_t)v2, 0xCuLL);
  v4 = vnegq_f32(v2);
  v5 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)a2, *(int32x4_t *)a2), *(int8x16_t *)a2, 0xCuLL), v4), *(float32x4_t *)a2, v3);
  v6 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v5, v5), (int8x16_t)v5, 0xCuLL);
  v7 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v6, (int32x4_t)v6), (int8x16_t)v6, 0xCuLL), v4), v6, v3);
  v8 = vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v7, v7), (int8x16_t)v7, 0xCuLL), v6, v2, 3);
  v6.i64[0] = 0x4000000040000000;
  v6.i64[1] = 0x4000000040000000;
  v9 = vmlaq_f32(*(float32x4_t *)a2, v6, v8);
  v10 = *(_QWORD *)(a1 + 1008);
  v11 = *(float32x4_t *)(v10 + 16);
  v12 = (int32x4_t)vnegq_f32(v11);
  v13 = (int8x16_t)vtrn2q_s32((int32x4_t)v11, vtrn1q_s32((int32x4_t)v11, v12));
  v14 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v11, (int8x16_t)v12, 8uLL), *(float32x2_t *)v2.f32, 1), (float32x4_t)vextq_s8(v13, v13, 8uLL), v2.f32[0]);
  v15 = (float32x4_t)vrev64q_s32((int32x4_t)v11);
  v15.i32[0] = v12.i32[1];
  v15.i32[3] = v12.i32[2];
  v16 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v11, v2, 3), v15, v2, 2), v14);
  v17 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)v10, *(int32x4_t *)v10), *(int8x16_t *)v10, 0xCuLL), v4), *(float32x4_t *)v10, v3);
  v18 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v17, v17), (int8x16_t)v17, 0xCuLL);
  v19 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v18, (int32x4_t)v18), (int8x16_t)v18, 0xCuLL), v4), v18, v3);
  result = vsubq_f32(vmlaq_f32(*(float32x4_t *)v10, v6, vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v19, v19), (int8x16_t)v19, 0xCuLL), v18, v2, 3)), v9);
  *(float32x4_t *)v10 = result;
  *(float32x4_t *)(v10 + 16) = v16;
  return result;
}

uint64_t setTaskWeights(uint64_t result, float *a2)
{
  uint64_t v3;

  if (result)
  {
    v3 = result;
    (*(void (**)(uint64_t, _QWORD, float))(*(_QWORD *)result + 80))(result, 0, *a2);
    (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)v3 + 80))(v3, 1, a2[1]);
    return (*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)v3 + 80))(v3, 2, a2[2]);
  }
  return result;
}

_QWORD *FIK::Enrollment::VirtualSourceController::Descriptor::addDependentSource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *result;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;

  v5 = (_QWORD *)(a1 + 48);
  result = FIK::IKArray<std::string_view>::reserve((_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 48) + 1);
  v7 = (_QWORD *)(v5[2] + 16 * *v5);
  *v7 = a2;
  v7[1] = a3;
  v8 = (*v5)++;
  if (!*(_QWORD *)(v5[2] + 16 * v8 + 8))
  {
    v9 = ikinemaLogObject();
    return (_QWORD *)ikinemaAssertHandler(*v9, 0, (uint64_t)"addDependentSource", "(!dependentSources.back().empty()) Undefined dependent source name.");
  }
  return result;
}

__n128 FIK::EnrollmentHelpers::extractTransformsFromPositionsArray@<Q0>(FIK *a1@<X0>, _QWORD *a2@<X2>, unint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  void (***v8)(FIK::CrtAllocator *__hidden);
  __n128 result;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;

  v8 = FIK::defaultAllocator(a1);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  a4[3] = (uint64_t)v8;
  FIK::IKArray<FIK::Transform>::reserve(a4, a3);
  if (a3)
  {
    v10 = 8 * a3;
    do
    {
      if (*a2 == -1)
      {
        FIK::IKArray<FIK::Transform>::reserve(a4, *a4 + 1);
        v12 = a4[2] + 32 * *a4;
        *(_QWORD *)v12 = 0;
        *(_QWORD *)(v12 + 8) = 0;
      }
      else
      {
        v11 = *((_OWORD *)a1 + *a2);
        HIDWORD(v11) = 0;
        v13 = v11;
        FIK::IKArray<FIK::Transform>::reserve(a4, *a4 + 1);
        v12 = a4[2] + 32 * *a4;
        *(_OWORD *)v12 = v13;
      }
      result = (__n128)xmmword_210802BA0;
      *(_OWORD *)(v12 + 16) = xmmword_210802BA0;
      ++*a4;
      ++a2;
      v10 -= 8;
    }
    while (v10);
  }
  return result;
}

uint64_t *FIK::IKArray<FIK::Transform>::reserve(uint64_t *result, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v8;
  _OWORD *v9;

  if (result[1] < a2)
  {
    v2 = result;
    v3 = result[3];
    v4 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v4)
    {
      v5 = (_OWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v3 + 16))(result[3], 32 * v4, 16);
      v6 = v5;
      if (32 * v4)
        bzero(v5, 32 * v4);
    }
    else
    {
      v6 = 0;
    }
    v7 = (_OWORD *)v2[2];
    v8 = *v2;
    if (*v2)
    {
      v9 = v6;
      do
      {
        *v9 = *v7;
        v9[1] = v7[1];
        v9 += 2;
        v7 += 2;
        --v8;
      }
      while (v8);
      v7 = (_OWORD *)v2[2];
    }
    result = (uint64_t *)v2[3];
    v2[1] = v4;
    v2[2] = (uint64_t)v6;
    v2[3] = v3;
    if (v7)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, _OWORD *, _QWORD, uint64_t))(*result + 24))(result, v7, 0, 8);
  }
  return result;
}

double FIK::EnrollmentHelpers::writeElementsToArray(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  __int128 *v5;
  uint64_t v6;
  _OWORD *v7;
  __int128 v8;
  double result;

  if (a2)
  {
    v5 = (__int128 *)(a1 + 16);
    do
    {
      v6 = *a3++;
      v7 = (_OWORD *)(a5 + 32 * v6);
      *v7 = *(v5 - 1);
      v8 = *v5;
      v5 += 2;
      result = *(double *)&v8;
      v7[1] = v8;
      --a2;
    }
    while (a2);
  }
  return result;
}

float32x4_t *FIK::EnrollmentHelpers::addOffsetToPose(float32x4_t *result, uint64_t a2, float32x4_t *a3)
{
  uint64_t v3;

  if (a2)
  {
    v3 = 32 * a2;
    do
    {
      *result = vaddq_f32(*result, *a3);
      result += 2;
      v3 -= 32;
    }
    while (v3);
  }
  return result;
}

uint64_t FIK::EnrollmentPoseSolverV2::EnrollmentPoseSolverV2(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  __int128 v6;
  uint64_t v7;
  char v8;
  __int128 v10;
  uint64_t v11;

  *(_QWORD *)&v6 = -1;
  *((_QWORD *)&v6 + 1) = -1;
  *(_OWORD *)(a1 + 44) = v6;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = v6;
  v7 = a1 + 64;
  *(_OWORD *)a1 = v6;
  if (a4)
  {
    FIK::Enrollment::SourceAndTargetDataLogger::SourceAndTargetDataLogger(&v10, a3, a4);
    *(_OWORD *)v7 = v10;
    *(_QWORD *)(v7 + 16) = v11;
    v8 = 1;
  }
  else
  {
    v8 = 0;
    *(_BYTE *)v7 = 0;
  }
  *(_BYTE *)(a1 + 88) = v8;
  FIK::RetargetingNode::RetargetingNode(a1 + 96);
  FIK::EnrollmentPoseSolverV2::populateKeyJointIndices((_DWORD *)a1, a2);
  return a1;
}

uint64_t FIK::EnrollmentPoseSolverV2::populateKeyJointIndices(_DWORD *a1, unsigned int *a2)
{
  unsigned int *v2;
  unsigned int *v4;
  uint64_t result;

  v2 = a2;
  v4 = a2 + 60;
  *a1 = FIK::IKRigUtils::getBoneIndex<FIK::RigBoneBase,void>("virtualHips", 0xBuLL, a2 + 60);
  a1[2] = FIK::IKRigUtils::getBoneIndex<FIK::RigBoneBase,void>("spine_7_joint", 0xDuLL, v4);
  a1[1] = FIK::IKRigUtils::getBoneIndex<FIK::RigBoneBase,void>("spine_6_joint", 0xDuLL, v4);
  a1[3] = FIK::IKRigUtils::getBoneIndex<FIK::RigBoneBase,void>("head_joint", 0xAuLL, v4);
  a1[4] = FIK::IKRigUtils::getBoneIndex<FIK::RigBoneBase,void>("left_arm_joint", 0xEuLL, v4);
  a1[5] = FIK::IKRigUtils::getBoneIndex<FIK::RigBoneBase,void>("left_forearm_joint", 0x12uLL, v4);
  a1[6] = FIK::IKRigUtils::getBoneIndex<FIK::RigBoneBase,void>("left_hand_joint", 0xFuLL, v4);
  a1[7] = FIK::IKRigUtils::getBoneIndex<FIK::RigBoneBase,void>("right_arm_joint", 0xFuLL, v4);
  a1[8] = FIK::IKRigUtils::getBoneIndex<FIK::RigBoneBase,void>("right_forearm_joint", 0x13uLL, v4);
  a1[9] = FIK::IKRigUtils::getBoneIndex<FIK::RigBoneBase,void>("right_hand_joint", 0x10uLL, v4);
  v2 += 52;
  a1[10] = FIK::IKRigUtils::getBoneIndex<FIK::MoCapBone,void>("hips_joint", 0xAuLL, v2);
  a1[11] = FIK::IKRigUtils::getBoneIndex<FIK::MoCapBone,void>("spine_7_joint", 0xDuLL, v2);
  a1[12] = FIK::IKRigUtils::getBoneIndex<FIK::MoCapBone,void>("left_hand_joint", 0xFuLL, v2);
  a1[13] = FIK::IKRigUtils::getBoneIndex<FIK::MoCapBone,void>("right_hand_joint", 0x10uLL, v2);
  result = FIK::IKRigUtils::getBoneIndex<FIK::MoCapBone,void>("head_joint", 0xAuLL, v2);
  a1[14] = result;
  return result;
}

BOOL FIK::EnrollmentPoseSolverV2::inputsAreValidGivenRig(uint64_t a1, const char **a2, uint64_t a3, const char **a4, uint64_t a5)
{
  uint64_t Rig;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  void *v13;
  char *v14;
  uint64_t v15;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  void **v26;
  uint64_t v27;
  void *v28;
  char *v29;
  uint64_t v30;
  _BOOL8 result;
  NSObject *v33;
  uint64_t v34;
  NSObject *v35;
  FIK::AnimNode *v36;
  char *v37;
  void *v38;

  v36 = (FIK::AnimNode *)(a1 + 96);
  Rig = FIK::AnimNode::GetRig((FIK::AnimNode *)(a1 + 96));
  v10 = *(_QWORD *)(Rig + 240);
  if (v10)
  {
    v11 = (void **)(*(_QWORD *)(Rig + 256) + 16);
    v12 = 96 * v10;
    while (1)
    {
      v13 = *v11;
      v14 = (char *)(*v11 ? *(v11 - 1) : &unk_2108059BE);
      v37 = v14;
      v38 = v13;
      v15 = (char *)std::__find_impl[abi:nn180100]<char const* const*,char const* const*,std::string_view,std::__identity>(a2, &a2[a3], (uint64_t)&v37)- (char *)a2;
      if (a3 == v15 >> 3 || v15 == -8)
        break;
LABEL_26:
      v11 += 12;
      v12 -= 96;
      if (!v12)
        goto LABEL_27;
    }
    switch((unint64_t)v13)
    {
      case 0xAuLL:
        if (*(_QWORD *)v14 == 0x696F6A5F64616568 && *((_WORD *)v14 + 4) == 29806)
          goto LABEL_26;
        goto LABEL_38;
      case 0xBuLL:
        v18 = *(_QWORD *)(v14 + 3);
        v19 = *(_QWORD *)v14 == 0x486C617574726976;
        v20 = 0x737069486C617574;
        goto LABEL_21;
      case 0xFuLL:
        v21 = *(_QWORD *)v14;
        v18 = *(_QWORD *)(v14 + 7);
        v22 = 0x6E61685F7466656CLL;
        goto LABEL_20;
      case 0x10uLL:
        v21 = *(_QWORD *)v14;
        v18 = *((_QWORD *)v14 + 1);
        v22 = 0x61685F7468676972;
LABEL_20:
        v19 = v21 == v22;
        v20 = 0x746E696F6A5F646ELL;
LABEL_21:
        if (!v19 || v18 != v20)
          goto LABEL_38;
        goto LABEL_26;
      default:
LABEL_38:
        v33 = ikinemaLogObject()[2];
        result = os_log_type_enabled(v33, OS_LOG_TYPE_ERROR);
        if (!result)
          return result;
        FIK::EnrollmentPoseSolverV2::inputsAreValidGivenRig((uint64_t)v14, v33, v34);
        break;
    }
    return 0;
  }
LABEL_27:
  v24 = FIK::AnimNode::GetRig(v36);
  v25 = *(_QWORD *)(v24 + 208);
  if (!v25)
    return 1;
  v26 = (void **)(*(_QWORD *)(v24 + 224) + 16);
  v27 = 544 * v25;
  while (1)
  {
    v28 = *v26;
    v29 = (char *)(*v26 ? *(v26 - 1) : &unk_2108059BE);
    v37 = v29;
    v38 = v28;
    v30 = (char *)std::__find_impl[abi:nn180100]<char const* const*,char const* const*,std::string_view,std::__identity>(a4, &a4[a5], (uint64_t)&v37)- (char *)a4;
    if (a5 == v30 >> 3 || v30 == -8)
      break;
    v26 += 68;
    v27 -= 544;
    if (!v27)
      return 1;
  }
  v35 = ikinemaLogObject()[2];
  result = os_log_type_enabled(v35, OS_LOG_TYPE_ERROR);
  if (result)
  {
    FIK::EnrollmentPoseSolverV2::inputsAreValidGivenRig(v26, v26 - 1, v35);
    return 0;
  }
  return result;
}

_QWORD *FIK::EnrollmentPoseSolverV2::getRigToInputSourceMap@<X0>(uint64_t a1@<X0>, FIK *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  unint64_t *v7;

  v7 = (unint64_t *)(FIK::AnimNode::GetRig((FIK::AnimNode *)(a1 + 96)) + 240);
  return FIK::EnrollmentHelpers::getRigToInputMap<FIK::RigBoneBase>(a2, a3, v7, a4);
}

_QWORD *FIK::EnrollmentHelpers::getRigToInputMap<FIK::RigBoneBase>@<X0>(FIK *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  void (***v8)(FIK::CrtAllocator *__hidden);
  _QWORD *result;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char **v14;
  uint64_t v15;
  _QWORD v16[2];

  v8 = FIK::defaultAllocator(a1);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  a4[3] = v8;
  result = FIK::IKArray<FIK::Segment *>::reserve(a4, *a3);
  if (*a3)
  {
    v10 = (uint64_t *)(a3[2] + 16);
    v11 = 96 * *a3;
    do
    {
      v12 = *v10;
      if (*v10)
        v13 = (void *)*(v10 - 1);
      else
        v13 = &unk_2108059BE;
      v16[0] = v13;
      v16[1] = v12;
      v14 = std::__find_impl[abi:nn180100]<char const* const*,char const* const*,std::string_view,std::__identity>((const char **)a1, (const char **)a1 + a2, (uint64_t)v16);
      if (((char *)v14 - (char *)a1) >> 3 == a2)
        v15 = -1;
      else
        v15 = ((char *)v14 - (char *)a1) >> 3;
      result = FIK::IKArray<FIK::Segment *>::reserve(a4, *a4 + 1);
      *(_QWORD *)(a4[2] + 8 * (*a4)++) = v15;
      v10 += 12;
      v11 -= 96;
    }
    while (v11);
  }
  return result;
}

_QWORD *FIK::EnrollmentPoseSolverV2::getRigToInputTargetMap@<X0>(uint64_t a1@<X0>, FIK *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  unint64_t *v7;

  v7 = (unint64_t *)(FIK::AnimNode::GetRig((FIK::AnimNode *)(a1 + 96)) + 208);
  return FIK::EnrollmentHelpers::getRigToInputMap<FIK::MoCapBone>(a2, a3, v7, a4);
}

_QWORD *FIK::EnrollmentHelpers::getRigToInputMap<FIK::MoCapBone>@<X0>(FIK *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  void (***v8)(FIK::CrtAllocator *__hidden);
  _QWORD *result;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char **v14;
  uint64_t v15;
  _QWORD v16[2];

  v8 = FIK::defaultAllocator(a1);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  a4[3] = v8;
  result = FIK::IKArray<FIK::Segment *>::reserve(a4, *a3);
  if (*a3)
  {
    v10 = (uint64_t *)(a3[2] + 16);
    v11 = 544 * *a3;
    do
    {
      v12 = *v10;
      if (*v10)
        v13 = (void *)*(v10 - 1);
      else
        v13 = &unk_2108059BE;
      v16[0] = v13;
      v16[1] = v12;
      v14 = std::__find_impl[abi:nn180100]<char const* const*,char const* const*,std::string_view,std::__identity>((const char **)a1, (const char **)a1 + a2, (uint64_t)v16);
      if (((char *)v14 - (char *)a1) >> 3 == a2)
        v15 = -1;
      else
        v15 = ((char *)v14 - (char *)a1) >> 3;
      result = FIK::IKArray<FIK::Segment *>::reserve(a4, *a4 + 1);
      *(_QWORD *)(a4[2] + 8 * (*a4)++) = v15;
      v10 += 68;
      v11 -= 544;
    }
    while (v11);
  }
  return result;
}

float32x4_t FIK::EnrollmentPoseSolverV2::computeVirtualHips@<Q0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  __int32 v7;
  FIK::AnimNode *v8;
  uint64_t Rig;
  float v10;
  BOOL v11;
  float v12;
  float32x4_t *v13;
  float32x4_t v14;
  float32x4_t v16;
  float32x4_t v17;
  float v18;
  const float *v19;
  float32x4_t v20;
  float32x4_t result;
  float32x4_t v22;
  float32x4_t v23;

  v6 = a1[10];
  v7 = a1[11];
  v8 = (FIK::AnimNode *)(a1 + 24);
  Rig = FIK::AnimNode::GetRig((FIK::AnimNode *)(a1 + 24));
  v10 = 0.0;
  v11 = v7 == v6 || v7 == -1;
  v12 = 0.0;
  if (!v11)
  {
    v12 = 0.0;
    do
    {
      v13 = (float32x4_t *)(*(_QWORD *)(Rig + 224) + 544 * v7);
      v14 = vmulq_f32(v13[4], v13[4]);
      v12 = v12
          + sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 2), vaddq_f32(v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.f32, 1))).f32[0]);
      v7 = v13->i32[1];
    }
    while (v7 != v6 && v7 != -1);
    if (v7 != v6)
      v12 = 0.0;
  }
  v23 = *(float32x4_t *)(a2 + 32 * a1[2]);
  v16 = vsubq_f32(*(float32x4_t *)(a2 + 32 * a1[1]), v23);
  v17 = vmulq_f32(v16, v16);
  v18 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v17, 2), vaddq_f32(v17, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 1))).f32[0]);
  if (v18 != 0.0)
    v10 = 1.0 / v18;
  v22 = vmulq_n_f32(vmulq_n_f32(v16, v10), v12);
  v19 = (const float *)(FIK::AnimNode::GetRig(v8) + 308);
  v20 = vld1q_dup_f32(v19);
  result = vaddq_f32(v23, vdivq_f32(v22, v20));
  *(float32x4_t *)a3 = result;
  *(_OWORD *)(a3 + 16) = xmmword_210802BA0;
  return result;
}

float32x4_t FIK::EnrollmentPoseSolverV2::computeVirtualLeftWrist@<Q0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t Rig;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float v12;
  float32x4_t result;
  float v14;

  v6 = 32 * a1[4];
  v7 = 32 * a1[5];
  v14 = *(float *)(a3 + 4 * a1[12]);
  Rig = FIK::AnimNode::GetRig((FIK::AnimNode *)(a1 + 24));
  v9 = *(float32x4_t *)(a2 + v7);
  v10 = vsubq_f32(v9, *(float32x4_t *)(a2 + v6));
  v11 = vmulq_f32(v10, v10);
  v11.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2), vaddq_f32(v11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1))).f32[0]);
  v12 = 1.0 / v11.f32[0];
  if (v11.f32[0] == 0.0)
    v12 = 0.0;
  result = vaddq_f32(v9, vmulq_n_f32(vmulq_n_f32(vmulq_n_f32(v10, v12), v14), 1.0 / *(float *)(Rig + 308)));
  *(float32x4_t *)a4 = result;
  *(_OWORD *)(a4 + 16) = xmmword_210802BA0;
  return result;
}

float32x4_t FIK::EnrollmentPoseSolverV2::computeVirtualRightWrist@<Q0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t Rig;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float v12;
  float32x4_t result;
  float v14;

  v6 = 32 * a1[7];
  v7 = 32 * a1[8];
  v14 = *(float *)(a3 + 4 * a1[13]);
  Rig = FIK::AnimNode::GetRig((FIK::AnimNode *)(a1 + 24));
  v9 = *(float32x4_t *)(a2 + v7);
  v10 = vsubq_f32(v9, *(float32x4_t *)(a2 + v6));
  v11 = vmulq_f32(v10, v10);
  v11.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2), vaddq_f32(v11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1))).f32[0]);
  v12 = 1.0 / v11.f32[0];
  if (v11.f32[0] == 0.0)
    v12 = 0.0;
  result = vaddq_f32(v9, vmulq_n_f32(vmulq_n_f32(vmulq_n_f32(v10, v12), v14), 1.0 / *(float *)(Rig + 308)));
  *(float32x4_t *)a4 = result;
  *(_OWORD *)(a4 + 16) = xmmword_210802BA0;
  return result;
}

void FIK::EnrollmentPoseSolverV2::setTargetBoneLengths(uint64_t a1, uint64_t a2, uint64_t a3)
{
  FIK::AnimNode::updateSolverBoneLengths(a1 + 96, a2, a3);
}

uint64_t FIK::EnrollmentPoseSolverV2::solve(uint64_t a1, _OWORD *a2, uint64_t a3, _OWORD *a4, uint64_t a5)
{
  _OWORD v6[2];

  v6[0] = 0uLL;
  v6[1] = xmmword_210802BA0;
  return FIK::RetargetingNode::Solve(a1 + 96, a2, a3, a4, a5, v6);
}

uint64_t std::__optional_destruct_base<FIK::Enrollment::DataLogger,false>::__optional_destruct_base[abi:nn180100]<FIK::Enrollment::DataLogger>(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  std::ios_base *v8;
  uint64_t v9;
  std::ios_base *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::ios_base *v15;
  std::ios_base *v16;
  uint64_t v17;

  v3 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v3;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v4 = MEMORY[0x24BEDB898] + 16;
  *(_QWORD *)(a1 + 440) = MEMORY[0x24BEDB898] + 16;
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 8);
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v7 = (_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24 + *(_QWORD *)(v5 - 24)) = v6;
  v8 = (std::ios_base *)(a1 + 24 + *(_QWORD *)(*(_QWORD *)(a1 + 24) - 24));
  v9 = (uint64_t)a2 + 24;
  v10 = (std::ios_base *)((char *)a2 + *(_QWORD *)(*((_QWORD *)a2 + 3) - 24) + 24);
  std::ios_base::move(v8, v10);
  v8[1].__vftable = v10[1].__vftable;
  v10[1].__vftable = 0;
  v8[1].__fmtflags_ = v10[1].__fmtflags_;
  v11 = MEMORY[0x24BEDB840];
  v12 = MEMORY[0x24BEDB840] + 24;
  *v7 = MEMORY[0x24BEDB840] + 24;
  v13 = v11 + 64;
  *(_QWORD *)(a1 + 440) = v11 + 64;
  *(_QWORD *)((char *)v7 + *(_QWORD *)(*v7 - 24) + 40) = MEMORY[0x212BCAEA0](a1 + 32, v9 + 8);
  v14 = *(_QWORD *)(v9 + 568);
  *(_BYTE *)(a1 + 600) = *(_BYTE *)(v9 + 576);
  *(_QWORD *)(a1 + 592) = v14;
  *(_QWORD *)(a1 + 1024) = v4;
  *(_QWORD *)(a1 + 608) = v5;
  *(_QWORD *)(a1 + 608 + *(_QWORD *)(v5 - 24)) = v6;
  v15 = (std::ios_base *)(a1 + 608 + *(_QWORD *)(*(_QWORD *)(a1 + 608) - 24));
  v16 = (std::ios_base *)(v9 + 584 + *(_QWORD *)(*(_QWORD *)(v9 + 584) - 24));
  std::ios_base::move(v15, v16);
  v15[1].__vftable = v16[1].__vftable;
  v16[1].__vftable = 0;
  v15[1].__fmtflags_ = v16[1].__fmtflags_;
  *(_QWORD *)(a1 + 608) = v12;
  *(_QWORD *)(a1 + 1024) = v13;
  *(_QWORD *)(a1 + 608 + *(_QWORD *)(*(_QWORD *)(a1 + 608) - 24) + 40) = MEMORY[0x212BCAEA0](a1 + 616, v9 + 592);
  v17 = *(_QWORD *)(v9 + 1152);
  *(_BYTE *)(a1 + 1184) = *(_BYTE *)(v9 + 1160);
  *(_QWORD *)(a1 + 1176) = v17;
  *(_BYTE *)(a1 + 1192) = 1;
  return a1;
}

void FIK::PoseConverter::~PoseConverter(FIK::PoseConverter *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *((_QWORD *)this + 16) = 0;
  v2 = *((_QWORD *)this + 18);
  if (v2)
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)this + 19) + 24))(*((_QWORD *)this + 19), v2, 0, 8);
  *((_QWORD *)this + 12) = 0;
  v3 = *((_QWORD *)this + 14);
  if (v3)
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)this + 15) + 24))(*((_QWORD *)this + 15), v3, 0, 8);
  *((_QWORD *)this + 8) = 0;
  v4 = *((_QWORD *)this + 10);
  if (v4)
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)this + 11) + 24))(*((_QWORD *)this + 11), v4, 0, 8);
  FIK::IKArray<FIK::IKArray<unsigned long>>::~IKArray((uint64_t)this + 32);
  *(_QWORD *)this = 0;
  v5 = *((_QWORD *)this + 2);
  if (v5)
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)this + 3) + 24))(*((_QWORD *)this + 3), v5, 0, 8);
}

uint64_t FIK::IKArray<FIK::IKArray<unsigned long>>::~IKArray(uint64_t a1)
{
  uint64_t v2;

  FIK::IKArray<FIK::IKArray<unsigned long>>::destroyBufferObjects(a1 + 8, *(_QWORD *)a1);
  *(_QWORD *)a1 = 0;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24), v2, 0, 8);
  return a1;
}

uint64_t FIK::IKArray<FIK::IKArray<unsigned long>>::destroyBufferObjects(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (a2)
  {
    v2 = a2;
    v3 = *(_QWORD *)(result + 8);
    do
    {
      *(_QWORD *)v3 = 0;
      v4 = *(_QWORD *)(v3 + 16);
      if (v4)
        result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)(v3 + 24) + 24))(*(_QWORD *)(v3 + 24), v4, 0, 8);
      v3 += 32;
      --v2;
    }
    while (v2);
  }
  return result;
}

FIK *FIK::Enrollment::VirtualSourceController::Descriptor::Descriptor(FIK *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void (***v8)(FIK::CrtAllocator *__hidden);
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;

  *(_QWORD *)a1 = a2;
  *((_QWORD *)a1 + 1) = a3;
  *((_QWORD *)a1 + 2) = a4;
  *((_QWORD *)a1 + 3) = a5;
  *((_QWORD *)a1 + 4) = a6;
  *((_QWORD *)a1 + 5) = a7;
  v8 = FIK::defaultAllocator(a1);
  *((_QWORD *)a1 + 6) = 0;
  *((_QWORD *)a1 + 7) = 0;
  *((_QWORD *)a1 + 8) = 0;
  *((_QWORD *)a1 + 9) = v8;
  if (!*((_QWORD *)a1 + 1))
  {
    v10 = ikinemaLogObject();
    ikinemaAssertHandler(*v10, 0, (uint64_t)"Descriptor", "(!controlSource.empty()) Undefined controlling source name.");
  }
  if (!*((_QWORD *)a1 + 3))
  {
    v11 = ikinemaLogObject();
    ikinemaAssertHandler(*v11, 0, (uint64_t)"Descriptor", "(!correctionSource.empty()) Undefined correcting source name.");
  }
  if (!*((_QWORD *)a1 + 5))
  {
    v12 = ikinemaLogObject();
    ikinemaAssertHandler(*v12, 0, (uint64_t)"Descriptor", "(!hipsSource.empty()) Undefined hips source name.");
  }
  return a1;
}

uint64_t std::string_view::find[abi:nn180100](uint64_t *a1, char *a2, int64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v6;
  void *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int v13;
  uint64_t v14;
  char *v15;

  v4 = a1[1];
  if (v4 < a4)
    return -1;
  if (a3)
  {
    v6 = *a1;
    v7 = (void *)(*a1 + a4);
    v8 = (char *)(v6 + v4);
    v9 = v6 + v4 - (_QWORD)v7;
    if (v9 >= a3)
    {
      v13 = *a2;
      do
      {
        v14 = v9 - a3;
        if (v14 == -1)
          break;
        v15 = (char *)memchr(v7, v13, v14 + 1);
        if (!v15)
          break;
        v10 = v15;
        if (!memcmp(v15, a2, a3))
          goto LABEL_6;
        v7 = v10 + 1;
        v9 = v8 - (v10 + 1);
      }
      while (v9 >= a3);
    }
    v10 = v8;
LABEL_6:
    if (v10 == v8)
      return -1;
    else
      return (uint64_t)&v10[-v6];
  }
  return a4;
}

_QWORD *FIK::IKArray<std::string_view>::reserve(_QWORD *result, unint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;

  if (result[1] < a2)
  {
    v2 = result;
    v3 = result[3];
    v4 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v4)
    {
      v5 = (void *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)v3 + 16))(result[3], 16 * v4, 8);
      v6 = v5;
      if (16 * v4)
        bzero(v5, 16 * v4);
    }
    else
    {
      v6 = 0;
    }
    memcpy(v6, (const void *)v2[2], 16 * *v2);
    v7 = v2[2];
    result = (_QWORD *)v2[3];
    v2[1] = v4;
    v2[2] = v6;
    v2[3] = v3;
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, _QWORD, uint64_t))(*result + 24))(result, v7, 0, 8);
  }
  return result;
}

uint64_t std::optional<FIK::Enrollment::VirtualSourceController>::operator=[abi:nn180100]<FIK::Enrollment::VirtualSourceController,void>(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 144))
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    FIK::IKArray<unsigned int>::operator=((uint64_t *)(a1 + 112), (__int128 *)(a2 + 112));
  }
  else
  {
    std::__construct_at[abi:nn180100]<FIK::Enrollment::VirtualSourceController,FIK::Enrollment::VirtualSourceController,FIK::Enrollment::VirtualSourceController*>(a1, a2);
    *(_BYTE *)(a1 + 144) = 1;
  }
  return a1;
}

__n128 std::__construct_at[abi:nn180100]<FIK::Enrollment::VirtualSourceController,FIK::Enrollment::VirtualSourceController,FIK::Enrollment::VirtualSourceController*>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __n128 result;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  v2 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a1 + 112) = v2;
  v3 = *(_QWORD *)(a2 + 120);
  result = *(__n128 *)(a2 + 128);
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a1 + 120) = v3;
  *(_QWORD *)(a2 + 128) = 0;
  *(__n128 *)(a1 + 128) = result;
  return result;
}

uint64_t *FIK::IKArray<FIK::Enrollment::LiftedSource>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (*a2 >= (unint64_t)a1[1])
  {
    v8 = a2[1];
    v9 = a1[3];
    if (v8)
    {
      v10 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(a1[3], 12 * v8, 4);
      v11 = v10;
      if (12 * v8)
        bzero(v10, 12 * v8);
    }
    else
    {
      v11 = 0;
    }
    v12 = *a2;
    if (*a2)
    {
      v13 = (uint64_t *)a2[2];
      v14 = v11;
      do
      {
        v15 = *v13;
        v14[2] = *((_DWORD *)v13 + 2);
        *(_QWORD *)v14 = v15;
        v14 += 3;
        v13 = (uint64_t *)((char *)v13 + 12);
        --v12;
      }
      while (v12);
    }
    v17 = a1[2];
    v16 = a1[3];
    a1[1] = v8;
    a1[2] = (uint64_t)v11;
    a1[3] = v9;
    if (v17)
      (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v16 + 24))(v16, v17, 0, 8);
  }
  else
  {
    *a1 = 0;
    v4 = *a2;
    if (*a2)
    {
      v5 = a1[2];
      v6 = (uint64_t *)a2[2];
      do
      {
        v7 = *v6;
        *(_DWORD *)(v5 + 8) = *((_DWORD *)v6 + 2);
        *(_QWORD *)v5 = v7;
        v5 += 12;
        v6 = (uint64_t *)((char *)v6 + 12);
        --v4;
      }
      while (v4);
    }
  }
  *a1 = *a2;
  return a1;
}

uint64_t *FIK::PoseConverter::PoseConverter<FIK::MoCapBone>(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  void (***v6)(FIK::CrtAllocator *__hidden);
  void (***v7)(FIK::CrtAllocator *__hidden);
  void (***v8)(FIK::CrtAllocator *__hidden);
  void (***v9)(FIK::CrtAllocator *__hidden);
  void (***v10)(FIK::CrtAllocator *__hidden);
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;

  v6 = FIK::defaultAllocator((FIK *)a1);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = (uint64_t)v6;
  v7 = FIK::defaultAllocator((FIK *)v6);
  a1[4] = 0;
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = (uint64_t)v7;
  v8 = FIK::defaultAllocator((FIK *)v7);
  a1[8] = 0;
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = (uint64_t)v8;
  v9 = FIK::defaultAllocator((FIK *)v8);
  a1[12] = 0;
  a1[13] = 0;
  a1[14] = 0;
  a1[15] = (uint64_t)v9;
  v10 = FIK::defaultAllocator((FIK *)v9);
  a1[16] = 0;
  a1[17] = 0;
  a1[18] = 0;
  a1[19] = (uint64_t)v10;
  FIK::IKArray<FIK::Transform>::reserve(a1 + 12, a3);
  FIK::IKArray<unsigned int>::reserve(a1, a3);
  if (a3)
  {
    v11 = 544 * a3;
    v12 = (_OWORD *)(a2 + 80);
    do
    {
      FIK::IKArray<FIK::Transform>::reserve(a1 + 12, a1[12] + 1);
      v13 = (_OWORD *)(a1[14] + 32 * a1[12]);
      *v13 = *(v12 - 1);
      v13[1] = *v12;
      ++a1[12];
      FIK::IKArray<unsigned int>::reserve(a1, *a1 + 1);
      v14 = *a1;
      *(_DWORD *)(a1[2] + 4 * *a1) = *((_DWORD *)v12 - 19);
      *a1 = v14 + 1;
      v12 += 34;
      v11 -= 544;
    }
    while (v11);
  }
  FIK::PoseConverter::resetGlobalFlag((FIK::PoseConverter *)a1);
  return a1;
}

_QWORD *FIK::IKArray<FIK::Transform>::IKArray<FIK::Transform,void>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v6;
  size_t v7;
  _QWORD *v8;

  v4 = a2;
  v6 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  *a1 = a2;
  a1[1] = v6;
  if (!v6)
  {
    v8 = 0;
    a1[2] = 0;
    a1[3] = a3;
    if (!a2)
      return a1;
    goto LABEL_7;
  }
  v7 = 32 * v6;
  v8 = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a3 + 16))(a3, 32 * v6, 16);
  a1[2] = v8;
  a1[3] = a3;
  if (v7)
  {
    bzero(v8, v7);
    v8 = (_QWORD *)a1[2];
  }
  for (; v4; --v4)
  {
LABEL_7:
    *v8 = 0;
    v8[1] = 0;
    *((_OWORD *)v8 + 1) = xmmword_210802BA0;
    v8 += 4;
  }
  return a1;
}

_QWORD *FIK::IKArray<FIK::Transform>::IKArray<FIK::Transform const,void>(_QWORD *a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  size_t v9;
  _OWORD *v10;
  _OWORD *v11;

  v8 = (a3 + 7) & 0xFFFFFFFFFFFFFFF8;
  *a1 = a3;
  a1[1] = v8;
  if (!v8)
  {
    v10 = 0;
    a1[2] = 0;
    a1[3] = a4;
    if (!a3)
      return a1;
    goto LABEL_7;
  }
  v9 = 32 * v8;
  v10 = (_OWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a4 + 16))(a4, 32 * v8, 16);
  a1[2] = v10;
  a1[3] = a4;
  if (v9)
  {
    bzero(v10, v9);
    v10 = (_OWORD *)a1[2];
  }
  if (a3)
  {
LABEL_7:
    v11 = &a2[2 * a3];
    do
    {
      *v10 = *a2;
      v10[1] = a2[1];
      a2 += 2;
      v10 += 2;
    }
    while (a2 != v11);
  }
  return a1;
}

unint64_t *FIK::IKArray<unsigned long>::resize(unint64_t *result, unint64_t a2, _QWORD *a3)
{
  unint64_t *v4;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;

  v4 = result;
  if (*result <= a2)
  {
    result = FIK::IKArray<FIK::Segment *>::reserve(result, a2);
    v6 = *v4;
    if (a2 != *v4)
    {
      v7 = (_QWORD *)(v4[2] + 8 * v6);
      v8 = v6 - a2;
      do
        *v7++ = *a3;
      while (!__CFADD__(v8++, 1));
    }
  }
  *v4 = a2;
  return result;
}

_QWORD *FIK::IKArray<FIK::Enrollment::LiftedSource>::reserve(_QWORD *result, unint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;

  if (result[1] < a2)
  {
    v2 = result;
    v3 = result[3];
    v4 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v4)
    {
      v5 = (void *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)v3 + 16))(result[3], 12 * v4, 4);
      v6 = v5;
      if (12 * v4)
        bzero(v5, 12 * v4);
    }
    else
    {
      v6 = 0;
    }
    memcpy(v6, (const void *)v2[2], 12 * *v2);
    v7 = v2[2];
    result = (_QWORD *)v2[3];
    v2[1] = v4;
    v2[2] = v6;
    v2[3] = v3;
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, _QWORD, uint64_t))(*result + 24))(result, v7, 0, 8);
  }
  return result;
}

const char **std::__find_impl[abi:nn180100]<char const* const*,char const* const*,std::string_view,std::__identity>(const char **a1, const char **a2, uint64_t a3)
{
  const char **v3;
  size_t v5;
  const void *v6;

  v3 = a1;
  if (a1 != a2)
  {
    v6 = *(const void **)a3;
    v5 = *(_QWORD *)(a3 + 8);
    while (strlen(*v3) != v5 || memcmp(*v3, v6, v5))
    {
      if (++v3 == a2)
        return a2;
    }
  }
  return v3;
}

void OUTLINED_FUNCTION_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x16u);
}

float32x4_t *ikinema::SourceRotatesDependentsAlgorithm::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, float32x4_t **a6@<X8>)
{
  float32x4_t *result;
  float32x4_t *v13;
  uint64_t v14;
  void (***v15)(FIK::CrtAllocator *__hidden);
  uint64_t v16;
  float32x4_t *v17;
  float32x4_t i;
  __int32 v19;
  int32x4_t v20;
  int8x16_t v21;
  float32x4_t v22;
  uint64_t v23;
  uint64_t v24;

  result = (float32x4_t *)FIK::FIKAlloc((FIK *)0x50);
  v13 = result;
  if (result)
  {
    v14 = *(int *)(*(_QWORD *)(a1 + 192) + (a2 << 8) + 200);
    result->i64[0] = (uint64_t)&off_24CA6C730;
    result->i64[1] = v14;
    result[1] = (float32x4_t)xmmword_210802BA0;
    v15 = FIK::defaultAllocator((FIK *)result);
    v13[2].i64[0] = 0;
    v13[2].i64[1] = 0;
    v13[3].i64[0] = 0;
    v13[3].i64[1] = (uint64_t)v15;
    v13[4].i64[0] = a5;
    v16 = *(_QWORD *)(a1 + 256);
    v17 = (float32x4_t *)(v16 + 96 * v13->i64[1]);
    for (i = v17[5];
          ;
          i = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(i, v17[5], 3), v22, v17[5], 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)i, (int8x16_t)v20, 8uLL), *(float32x2_t *)v17[5].f32, 1), (float32x4_t)vextq_s8(v21, v21, 8uLL), COERCE_FLOAT(*(_OWORD *)&v17[5]))))
    {
      v19 = v17->i32[1];
      if (v19 == -1)
        break;
      v17 = (float32x4_t *)(v16 + 96 * v19);
      v20 = (int32x4_t)vnegq_f32(i);
      v21 = (int8x16_t)vtrn2q_s32((int32x4_t)i, vtrn1q_s32((int32x4_t)i, v20));
      v22 = (float32x4_t)vrev64q_s32((int32x4_t)i);
      v22.i32[0] = v20.i32[1];
      v22.i32[3] = v20.i32[2];
    }
    v13[1] = vmulq_f32(i, (float32x4_t)xmmword_210802C20);
    result = (float32x4_t *)FIK::IKArray<FIK::Segment *>::reserve((float32x4_t *)v13[2].i64, a4);
    if (a4)
    {
      v23 = 8 * a4;
      do
      {
        if (*a3 != a2)
        {
          v24 = *(_QWORD *)(a1 + 192) + (*a3 << 8);
          result = (float32x4_t *)FIK::IKArray<FIK::Segment *>::reserve((float32x4_t *)v13[2].i64, v13[2].i64[0] + 1);
          *(_QWORD *)(v13[3].i64[0] + 8 * v13[2].i64[0]++) = *(int *)(v24 + 200);
        }
        ++a3;
        v23 -= 8;
      }
      while (v23);
    }
  }
  *a6 = v13;
  return result;
}

const char *ikinema::AlgorithmBlockBase<ikinema::SourceRotatesDependentsAlgorithm>::typeId()
{
  const char *result;
  unsigned __int8 *v1;
  uint64_t v2;
  unsigned int v3;

  result = "N7ikinema32SourceRotatesDependentsAlgorithmE";
  if (((unint64_t)"N7ikinema32SourceRotatesDependentsAlgorithmE" & 0x8000000000000000) != 0)
  {
    v1 = (unsigned __int8 *)((unint64_t)"N7ikinema32SourceRotatesDependentsAlgorithmE" & 0x7FFFFFFFFFFFFFFFLL);
    v2 = 5381;
    do
    {
      result = (const char *)v2;
      v3 = *v1++;
      v2 = (33 * v2) ^ v3;
    }
    while (v3);
  }
  return result;
}

void ikinema::`anonymous namespace'::SourceRotatesDependentsAlgorithmImpl::~SourceRotatesDependentsAlgorithmImpl(ikinema::_anonymous_namespace_::SourceRotatesDependentsAlgorithmImpl *this)
{
  uint64_t v1;

  *((_QWORD *)this + 4) = 0;
  v1 = *((_QWORD *)this + 6);
  if (v1)
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)this + 7) + 24))(*((_QWORD *)this + 7), v1, 0, 8);
}

{
  uint64_t v1;

  *((_QWORD *)this + 4) = 0;
  v1 = *((_QWORD *)this + 6);
  if (v1)
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)this + 7) + 24))(*((_QWORD *)this + 7), v1, 0, 8);
  JUMPOUT(0x212BCAFB4);
}

uint64_t ikinema::`anonymous namespace'::SourceRotatesDependentsAlgorithmImpl::process(float32x4_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  float32x4_t v6;
  int32x4_t v7;
  int8x16_t v8;
  float32x4_t v9;
  float32x4_t v10;
  int8x16_t v11;
  float32x2_t v12;
  float32x4_t v13;
  unsigned __int32 v14;
  float32x2_t v15;
  float32x2_t v16;
  uint64_t v17;
  uint64_t *v18;
  float32x4_t v19;
  uint64_t v20;
  float32x4_t v21;
  uint64_t v22;
  float32x4_t *v23;
  float32x4_t v24;
  int32x4_t v25;
  float32x4_t v26;
  int8x16_t v27;

  v4 = ikinema::BufferContainer::buffer(a3, a1[4].i64[0]);
  v5 = ikinema::Buffer::arrayView<FIK::Transform>(v4);
  v6 = *(float32x4_t *)(v5 + 32 * a1->i64[1] + 16);
  v7 = (int32x4_t)vnegq_f32(v6);
  v8 = (int8x16_t)vtrn2q_s32((int32x4_t)v6, vtrn1q_s32((int32x4_t)v6, v7));
  v9 = (float32x4_t)vrev64q_s32((int32x4_t)v6);
  v9.i32[0] = v7.i32[1];
  v9.i32[3] = v7.i32[2];
  v10 = (float32x4_t)vtrn2q_s32(vrev64q_s32((int32x4_t)0), (int32x4_t)vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v6, a1[1], 3), v9, a1[1], 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v6, (int8x16_t)v7, 8uLL), *(float32x2_t *)a1[1].f32, 1), (float32x4_t)vextq_s8(v8, v8, 8uLL), COERCE_FLOAT(*(_OWORD *)&a1[1]))));
  v11 = (int8x16_t)vmulq_f32(v10, v10);
  v12 = vadd_f32(*(float32x2_t *)v11.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL));
  if (vaddv_f32(v12) == 0.0)
  {
    v13 = (float32x4_t)xmmword_210802BA0;
  }
  else
  {
    v14 = vadd_f32(v12, (float32x2_t)vdup_lane_s32((int32x2_t)v12, 1)).u32[0];
    v15 = vrsqrte_f32((float32x2_t)v14);
    v16 = vmul_f32(v15, vrsqrts_f32((float32x2_t)v14, vmul_f32(v15, v15)));
    v13 = vmulq_n_f32(v10, vmul_f32(v16, vrsqrts_f32((float32x2_t)v14, vmul_f32(v16, v16))).f32[0]);
  }
  v17 = a1[2].i64[0];
  if (v17)
  {
    v18 = (uint64_t *)a1[3].i64[0];
    v19 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 0);
    v20 = 8 * v17;
    v21 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2);
    do
    {
      v22 = *v18++;
      v23 = (float32x4_t *)(v5 + 32 * v22);
      v24 = v23[1];
      v25 = (int32x4_t)vnegq_f32(v24);
      v26 = (float32x4_t)vrev64q_s32((int32x4_t)v24);
      v26.i32[0] = v25.i32[1];
      v27 = (int8x16_t)vtrn2q_s32((int32x4_t)v24, vtrn1q_s32((int32x4_t)v24, v25));
      v26.i32[3] = v25.i32[2];
      v23[1] = vaddq_f32(vmlaq_f32(vmulq_laneq_f32(v24, v13, 3), v26, v21), vmlaq_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v24, (int8x16_t)v25, 8uLL), *(float32x2_t *)v13.f32, 1), (float32x4_t)vextq_s8(v27, v27, 8uLL), v19));
      v20 -= 8;
    }
    while (v20);
  }
  return 0;
}

uint64_t ikinema::`anonymous namespace'::SourceRotatesDependentsAlgorithmImpl::registerBuffers(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  if (!*a2)
    return 1;
  v2 = 72 * *a2;
  v3 = (uint64_t *)(a2[2] + 56);
  while (1)
  {
    v4 = *v3;
    v3 += 9;
    if (v4 == *(_QWORD *)(a1 + 64))
      break;
    v2 -= 72;
    if (!v2)
      return 1;
  }
  return 0;
}

uint64_t ikinema::AlgorithmBlock::isRemovable(ikinema::AlgorithmBlock *this)
{
  return 1;
}

const char *ikinema::`anonymous namespace'::SourceRotatesDependentsAlgorithmImpl::name(ikinema::_anonymous_namespace_::SourceRotatesDependentsAlgorithmImpl *this)
{
  return "rotateDependentsFromSourceVertical";
}

uint64_t ikinema::BufferContainer::buffer(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  result = a1[2];
  v4 = *a1;
  v5 = result + 72 * v4;
  if (v4)
  {
    v6 = 72 * v4;
    while (*(_QWORD *)(result + 56) != a2)
    {
      result += 72;
      v6 -= 72;
      if (!v6)
        goto LABEL_5;
    }
  }
  if (result == v5)
  {
LABEL_5:
    v7 = ikinemaLogObject();
    ikinemaAssertHandler(*v7, 0, (uint64_t)"buffer", "(it != m_buffers.end()) The requested buffer is missing. Check buffer registration.");
    return v5;
  }
  return result;
}

uint64_t ikinema::Buffer::arrayView<FIK::Transform>(uint64_t a1)
{
  const char *v2;
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t *v7;

  v2 = "N3FIK9TransformE";
  if (((unint64_t)"N3FIK9TransformE" & 0x8000000000000000) != 0)
  {
    v3 = (unsigned __int8 *)((unint64_t)"N3FIK9TransformE" & 0x7FFFFFFFFFFFFFFFLL);
    v4 = 5381;
    do
    {
      v2 = (const char *)v4;
      v5 = *v3++;
      v4 = (33 * v4) ^ v5;
    }
    while (v5);
  }
  if (*(const char **)(a1 + 48) != v2)
  {
    v7 = ikinemaLogObject();
    ikinemaAssertHandler(*v7, 0, (uint64_t)"arrayView", "(m_descriptor.containsType<std::remove_cv_t<RequestedType>>()) Wrong type requested from buffer.");
  }
  return *(_QWORD *)(a1 + 64);
}

uint64_t FIK::EnrollmentPoseSolverV4::EnrollmentPoseSolverV4(uint64_t a1, _OWORD *a2, uint64_t a3, __int128 *a4, uint64_t a5, _OWORD *a6, int a7, float a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void (***v19)(FIK::CrtAllocator *__hidden);
  FIK *v20;
  void (***v21)(FIK::CrtAllocator *__hidden);
  ikinema::rig *v22;
  FIK *v23;
  void (***v24)(FIK::CrtAllocator *__hidden);
  void *__p[2];
  char v27;

  v19 = FIK::defaultAllocator((FIK *)a1);
  v20 = (FIK *)FIK::IKArray<FIK::Transform>::IKArray<FIK::Transform const,void>((_QWORD *)a1, a2, a3, (uint64_t)v19);
  v21 = FIK::defaultAllocator(v20);
  v22 = (ikinema::rig *)FIK::IKArray<FIK::EnrollmentPoseSolverV4::TargetJointData>::IKArray<FIK::EnrollmentPoseSolverV4::TargetJointData,void>((_QWORD *)(a1 + 32), a4, a5, (uint64_t)v21);
  *(_OWORD *)(a1 + 64) = *a6;
  *(_OWORD *)(a1 + 80) = a6[1];
  *(_DWORD *)(a1 + 96) = a7;
  *(float *)(a1 + 100) = a8;
  ikinema::rig::generate_EnrollmentRigV3(v22, a1 + 112);
  FIK::PoseConverter::PoseConverter<FIK::MoCapBone>((uint64_t *)(a1 + 432), *(_QWORD *)(a1 + 336), *(_QWORD *)(a1 + 320));
  FIK::EnrollmentPoseSolverV4::RigJointIndices::RigJointIndices((_DWORD *)(a1 + 592), a1 + 112);
  FIK::EnrollmentPoseSolverV4::rigToInputSourceJointsIndexMap((FIK::EnrollmentPoseSolverV4 *)a1, (uint64_t *)(a1 + 656));
  v23 = (FIK *)FIK::EnrollmentPoseSolverV4::rigToInputTargetJointsIndexMap((FIK::EnrollmentPoseSolverV4 *)a1, (uint64_t *)(a1 + 688));
  v24 = FIK::defaultAllocator(v23);
  *(_QWORD *)(a1 + 720) = 0;
  *(_QWORD *)(a1 + 736) = 0;
  *(_QWORD *)(a1 + 728) = 0;
  *(_QWORD *)(a1 + 744) = v24;
  *(_OWORD *)(a1 + 752) = xmmword_210804230;
  *(_BYTE *)(a1 + 768) = 1;
  *(_BYTE *)(a1 + 776) = 0;
  *(_BYTE *)(a1 + 800) = 0;
  *(_BYTE *)(a1 + 808) = 0;
  if (a11)
  {
    FIK::Enrollment::SourceAndTargetDataLogger::SourceAndTargetDataLogger(__p, a10, a11);
    std::optional<FIK::Enrollment::SourceAndTargetDataLogger>::operator=[abi:nn180100]<FIK::Enrollment::SourceAndTargetDataLogger,void>(a1 + 776, (__int128 *)__p);
    if (v27 < 0)
      operator delete(__p[0]);
  }
  FIK::EnrollmentPoseSolverV4::scaleInputsToCm((float32x4_t *)a1);
  return a1;
}

{
  return FIK::EnrollmentPoseSolverV4::EnrollmentPoseSolverV4(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

_QWORD *FIK::EnrollmentPoseSolverV4::rigToInputSourceJointsIndexMap@<X0>(FIK::EnrollmentPoseSolverV4 *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  void (***v6)(FIK::CrtAllocator *__hidden);
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  size_t v13;
  _QWORD *v14;
  const void *v15;
  uint64_t v16;

  v4 = *((_QWORD *)this + 2);
  v5 = *(_QWORD *)this;
  v6 = FIK::defaultAllocator(this);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = (uint64_t)v6;
  result = FIK::IKArray<unsigned int>::reserve(a2, *((_QWORD *)this + 44));
  v8 = *((_QWORD *)this + 40);
  if (v8)
  {
    v9 = *((_QWORD *)this + 42);
    v10 = v9 + 544 * v8;
    v11 = (_QWORD *)(v4 + 8);
    do
    {
      if (v5)
      {
        v12 = 0;
        v13 = *(_QWORD *)(v9 + 16);
        v14 = v11;
        while (1)
        {
          v15 = v13 ? *(const void **)(v9 + 8) : &unk_2108059BE;
          if (v13 == *v14 && !memcmp(v15, (const void *)*(v14 - 1), v13))
            break;
          v14 += 4;
          if (v5 == ++v12)
            goto LABEL_11;
        }
      }
      else
      {
LABEL_11:
        LODWORD(v12) = -1;
      }
      result = FIK::IKArray<unsigned int>::reserve(a2, *a2 + 1);
      v16 = *a2;
      *(_DWORD *)(a2[2] + 4 * *a2) = v12;
      *a2 = v16 + 1;
      v9 += 544;
    }
    while (v9 != v10);
  }
  return result;
}

_QWORD *FIK::EnrollmentPoseSolverV4::rigToInputTargetJointsIndexMap@<X0>(FIK::EnrollmentPoseSolverV4 *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  void (***v6)(FIK::CrtAllocator *__hidden);
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  size_t v13;
  _QWORD *v14;
  const void *v15;
  uint64_t v16;

  v4 = *((_QWORD *)this + 6);
  v5 = *((_QWORD *)this + 4);
  v6 = FIK::defaultAllocator(this);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = (uint64_t)v6;
  result = FIK::IKArray<unsigned int>::reserve(a2, *((_QWORD *)this + 44));
  v8 = *((_QWORD *)this + 40);
  if (v8)
  {
    v9 = *((_QWORD *)this + 42);
    v10 = v9 + 544 * v8;
    v11 = (_QWORD *)(v4 + 8);
    do
    {
      if (v5)
      {
        v12 = 0;
        v13 = *(_QWORD *)(v9 + 16);
        v14 = v11;
        while (1)
        {
          v15 = v13 ? *(const void **)(v9 + 8) : &unk_2108059BE;
          if (v13 == *v14 && !memcmp(v15, (const void *)*(v14 - 1), v13))
            break;
          v14 += 3;
          if (v5 == ++v12)
            goto LABEL_11;
        }
      }
      else
      {
LABEL_11:
        LODWORD(v12) = -1;
      }
      result = FIK::IKArray<unsigned int>::reserve(a2, *a2 + 1);
      v16 = *a2;
      *(_DWORD *)(a2[2] + 4 * *a2) = v12;
      *a2 = v16 + 1;
      v9 += 544;
    }
    while (v9 != v10);
  }
  return result;
}

uint64_t std::optional<FIK::Enrollment::SourceAndTargetDataLogger>::operator=[abi:nn180100]<FIK::Enrollment::SourceAndTargetDataLogger,void>(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;

  if (*(_BYTE *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    v4 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v4;
    *((_BYTE *)a2 + 23) = 0;
    *(_BYTE *)a2 = 0;
  }
  else
  {
    v5 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v5;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

float32x4_t FIK::EnrollmentPoseSolverV4::scaleInputsToCm(float32x4_t *this)
{
  float32x4_t *v1;
  uint64_t v2;
  uint64_t v3;
  float v4;
  float *v5;
  uint64_t v6;
  float32x4_t result;

  if (this->i64[0])
  {
    v1 = (float32x4_t *)(this[1].i64[0] + 16);
    v2 = 32 * this->i64[0];
    do
    {
      *v1 = vmulq_n_f32(*v1, this[6].f32[1]);
      v1 += 2;
      v2 -= 32;
    }
    while (v2);
  }
  v3 = this[2].i64[0];
  if (v3)
  {
    v4 = this[6].f32[1];
    v5 = (float *)(this[3].i64[0] + 16);
    v6 = 24 * v3;
    do
    {
      *v5 = v4 * *v5;
      v5 += 6;
      v6 -= 24;
    }
    while (v6);
  }
  result = vmulq_n_f32(this[4], this[6].f32[1]);
  this[4] = result;
  return result;
}

BOOL FIK::EnrollmentPoseSolverV4::areAllRequiredJointsProvided(FIK::EnrollmentPoseSolverV4 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char **v6;
  const char *v7;
  size_t v8;
  uint64_t v9;
  _QWORD *v10;
  _BOOL8 result;
  NSObject *v12;
  uint64_t v13;
  NSObject *v14;

  if ((int)*((_QWORD *)this + 40) < 1)
  {
LABEL_5:
    v3 = *(_QWORD *)this;
    v4 = *((_QWORD *)this + 2) + 8;
    v5 = 32 * *(_QWORD *)this;
    v6 = (const char **)FIK::EnrollmentPoseSolverV4::areAllRequiredJointsProvided(void)const::requiredSourceNames;
    while (1)
    {
      v7 = *v6;
      if (!v3)
        break;
      v8 = strlen(*v6);
      v9 = v5;
      v10 = (_QWORD *)v4;
      while (*v10 != v8 || memcmp((const void *)*(v10 - 1), v7, v8))
      {
        v10 += 4;
        v9 -= 32;
        if (!v9)
          goto LABEL_14;
      }
      ++v6;
      result = 1;
      if (v6 == (const char **)&FIK::EnrollmentHelpers::kNeckLength)
        return result;
    }
LABEL_14:
    v12 = ikinemaLogObject()[2];
    result = os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    FIK::EnrollmentPoseSolverV4::areAllRequiredJointsProvided((uint64_t)v7, v12, v13);
    return 0;
  }
  v2 = 0;
  while (*(_DWORD *)(*((_QWORD *)this + 88) + 4 * v2) != -1)
  {
    if (*((_QWORD *)this + 40) == ++v2)
      goto LABEL_5;
  }
  v14 = ikinemaLogObject()[2];
  result = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
  if (result)
  {
    FIK::EnrollmentPoseSolverV4::areAllRequiredJointsProvided((uint64_t)this, v2, v14);
    return 0;
  }
  return result;
}

uint64_t FIK::EnrollmentPoseSolverV4::solve(FIK::EnrollmentPoseSolverV4 *this)
{
  if (!FIK::EnrollmentPoseSolverV4::areAllRequiredJointsProvided(this))
    return 2;
  FIK::EnrollmentPoseSolverV4::setRigInputData((__n128 *)this);
  if (*((_BYTE *)this + 808))
  {
    FIK::EnrollmentPoseSolverV4::dbgPrintInputs((int32x4_t *)this);
    puts("\nInitial rig:");
    FIK::EnrollmentPoseSolverV4::dbgPrintRigJoints(this);
  }
  FIK::EnrollmentPoseSolverV4::setRigJointLengthsFromGivenTargetJointLengths(this);
  FIK::EnrollmentPoseSolverV4::adjustTorsoSources(this);
  FIK::EnrollmentPoseSolverV4::adjustRigJointsToAlignWithSources((float32x4_t *)this);
  FIK::EnrollmentPoseSolverV4::setRigRigHeadJointRotationFromAtlas((float32x4_t *)this);
  if (!FIK::EnrollmentHelpers::verifyRigEnrolment((uint64_t)this + 112))
    return 2;
  if (*((_BYTE *)this + 808))
  {
    puts("\nAfter solve:");
    FIK::EnrollmentPoseSolverV4::dbgPrintRigJoints(this);
  }
  return 0;
}

__n128 FIK::EnrollmentPoseSolverV4::setRigInputData(__n128 *this)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  int v8;
  __n128 *v9;
  uint64_t v10;
  __n128 result;
  _OWORD v12[2];
  __int128 v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v2 = this[20].n128_i32[0];
  v13 = 0u;
  memset(v12, 0, sizeof(v12));
  LODWORD(v13) = -1082130432;
  FIK::IKArray<FIK::EnrollmentPoseSolverV4::RigJointInputData>::resize((uint64_t *)&this[45], v2, (uint64_t)v12);
  if (this[20].n128_i32[0] >= 1)
  {
    v3 = 0;
    v4 = 0;
    do
    {
      v5 = *(int *)(this[42].n128_u64[0] + 4 * v4);
      if ((_DWORD)v5 != -1)
      {
        v6 = (_OWORD *)(this[1].n128_u64[0] + 32 * v5 + 16);
        v7 = this[46].n128_u64[0] + v3;
        if (*(_BYTE *)(v7 + 16))
        {
          *(_OWORD *)v7 = *v6;
        }
        else
        {
          *(_OWORD *)v7 = *v6;
          *(_BYTE *)(v7 + 16) = 1;
        }
      }
      v8 = *(_DWORD *)(this[44].n128_u64[0] + 4 * v4);
      if (v8 != -1)
        *(_DWORD *)(this[46].n128_u64[0] + v3 + 32) = *(_DWORD *)(this[3].n128_u64[0] + 24 * v8 + 16);
      ++v4;
      v3 += 48;
    }
    while (v4 < this[20].n128_i32[0]);
  }
  v9 = this + 4;
  v10 = this[46].n128_u64[0] + 48 * this[40].n128_i32[3];
  result = this[4];
  if (*(_BYTE *)(v10 + 16))
  {
    *(__n128 *)v10 = *v9;
  }
  else
  {
    *(__n128 *)v10 = *v9;
    *(_BYTE *)(v10 + 16) = 1;
  }
  return result;
}

void FIK::EnrollmentPoseSolverV4::dbgPrintInputs(int32x4_t *this)
{
  unint64_t v2;
  uint64_t v3;
  float32x4_t *v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  float32x4_t *v10;
  float32x4_t v11;
  float32x4_t v12;
  uint64_t v13;
  unint64_t v14;
  void **v15;
  uint64_t *v16;
  void *__p[2];
  char v18;

  if (!this[45].i64[0])
  {
    v16 = ikinemaLogObject();
    ikinemaAssertHandler(*v16, 0, (uint64_t)"dbgPrintInputs", "(!m_rigInputData.empty()) dbgPrintInputs() can be called only after setRigInputData() has been called.");
  }
  puts("\nInput source joint positions:");
  if (this->i64[0])
  {
    v2 = 0;
    do
    {
      v3 = this[1].i64[0] + 32 * v2;
      v4 = (float32x4_t *)(v3 + 16);
      FIK::dbgVectorToString((float32x4_t *)(v3 + 16), __p);
      if (v18 >= 0)
        v5 = __p;
      else
        v5 = (void **)__p[0];
      printf(" %-22s %s\n", *(const char **)v3, (const char *)v5);
      if ((int)this[20].i64[0] >= 1)
      {
        v6 = 0;
        v7 = 32;
        while (v2 != *(_DWORD *)(this[42].i64[0] + 4 * v6))
        {
          ++v6;
          v7 += 48;
          if (this[20].i64[0] == v6)
            goto LABEL_16;
        }
        if ((_DWORD)v6)
        {
          v8 = FIK::EnrollmentPoseSolverV4::rigParentJointIndex((FIK::EnrollmentPoseSolverV4 *)this, v6);
          v9 = this[46].i64[0];
          v10 = (float32x4_t *)(v9 + 48 * v8);
          if (v10[1].i8[0])
          {
            v11 = vsubq_f32(*v10, *v4);
            v12 = vmulq_f32(v11, v11);
            v12.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2), vaddq_f32(v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1))).f32[0]);
            printf("  given target length=%5.2f distance to parent=%5.2f difference=%5.2f\n", *(float *)(v9 + v7), v12.f32[0], (float)(v12.f32[0] - *(float *)(v9 + v7)));
          }
        }
      }
LABEL_16:
      if (v18 < 0)
        operator delete(__p[0]);
      ++v2;
    }
    while (this->i64[0] > v2);
  }
  puts("\nInput target joint lengths:");
  if (this[2].i64[0])
  {
    v13 = 0;
    v14 = 0;
    do
    {
      printf(" %2d %-22s %5.2f\n", v14++, *(const char **)(this[3].i64[0] + v13), *(float *)(this[3].i64[0] + v13 + 16));
      v13 += 24;
    }
    while (this[2].i64[0] > v14);
  }
  FIK::dbgTransformToString(this + 4, __p);
  if (v18 >= 0)
    v15 = __p;
  else
    v15 = (void **)__p[0];
  printf("Input atlas pose: %s\n", (const char *)v15);
  if (v18 < 0)
    operator delete(__p[0]);
}

void FIK::EnrollmentPoseSolverV4::dbgPrintRigJoints(FIK::EnrollmentPoseSolverV4 *this)
{
  int v2;

  puts("\nRig joints:");
  if (*((int *)this + 80) >= 1)
  {
    v2 = 0;
    do
      FIK::EnrollmentPoseSolverV4::dbgPrintRigJoint(this, v2++);
    while (v2 < *((_DWORD *)this + 80));
  }
}

_QWORD *FIK::EnrollmentPoseSolverV4::setRigJointLengthsFromGivenTargetJointLengths(_QWORD *this)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  FIK::PoseConverter *v5;
  uint64_t v6;
  uint64_t v7;
  float v8;

  v1 = this[40];
  if ((int)v1 >= 1)
  {
    v2 = this;
    v3 = 0;
    v4 = (uint64_t)(this + 14);
    v5 = (FIK::PoseConverter *)(this + 54);
    v6 = 32;
    v7 = 64;
    do
    {
      v8 = *(float *)(v2[92] + v6);
      if (v8 >= 0.0)
      {
        FIK::IKRigUtils::setBoneLength<FIK::MoCapRig>(v4, v3, v8);
        this = FIK::PoseConverter::updatePose(v5, v3, (const FIK::Transform *)(v2[42] + v7));
        v1 = v2[40];
      }
      ++v3;
      v6 += 48;
      v7 += 544;
    }
    while (v3 < (int)v1);
  }
  return this;
}

void FIK::EnrollmentPoseSolverV4::adjustTorsoSources(FIK::EnrollmentPoseSolverV4 *this)
{
  int v2;
  float32x4_t *v3;
  float32x4_t v4;
  uint64_t v5;
  float32x4_t *v6;
  FIK::EnrollmentPoseSolverV4 *v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  float32x4_t v12[2];

  FIK::IKRigUtils::getGlobalRestTransformBetweenBonesSlow<FIK::MoCapBone>((uint64_t)this + 320, *((_DWORD *)this + 163), *((_DWORD *)this + 159), v12, 1.0);
  v8 = *(_QWORD *)((char *)this + 596);
  v2 = *((_DWORD *)this + 151);
  v9 = *((_DWORD *)this + 159);
  v10 = v2;
  v11 = *((_DWORD *)this + 155);
  v3 = (float32x4_t *)(*((_QWORD *)this + 92) + 48 * v9);
  if (!v3[1].i8[0])
  {
LABEL_7:
    v7 = (FIK::EnrollmentPoseSolverV4 *)std::__throw_bad_optional_access[abi:nn180100]();
    FIK::EnrollmentPoseSolverV4::adjustRigJointsToAlignWithSources(v7);
    return;
  }
  v4 = vsubq_f32(vaddq_f32(*((float32x4_t *)this + 4), v12[0]), *v3);
  if (v4.f32[2] <= 0.0)
  {
    v5 = 0;
    while (1)
    {
      v6 = (float32x4_t *)(*((_QWORD *)this + 92) + 48 * *(int *)((char *)&v8 + v5 * 4));
      if (!v6[1].i8[0])
        break;
      *v6 = vaddq_f32(*v6, vmulq_n_f32(v4, *(float *)&dword_210804244[v5++]));
      if (v5 == 5)
        return;
    }
    goto LABEL_7;
  }
}

float32x4_t *FIK::EnrollmentPoseSolverV4::adjustRigJointsToAlignWithSources(float32x4_t *this)
{
  int v2;

  v2 = this[37].i32[1];
  if (*(_BYTE *)(this[46].i64[0] + 48 * v2 + 16))
    FIK::EnrollmentPoseSolverV4::rotateRigJointToAlignWithSource(this, this[37].i32[0], this[37].i32[2], v2, this[37].i32[2], 0, 0);
  FIK::EnrollmentPoseSolverV4::rotateRigJointToAlignWithSource(this, this[37].i32[2], this[37].i32[2], this[37].i32[2], this[39].i32[3], 0, 0);
  if ((FIK::EnrollmentPoseSolverV4::adjustRigNeckJoints(this) & 1) == 0)
    FIK::EnrollmentPoseSolverV4::rotateRigJointToAlignWithSource(this, this[39].i32[3], this[39].i32[3], this[39].i32[3], this[40].i32[3], 0, 0);
  FIK::EnrollmentPoseSolverV4::translateWholeRigToPlaceJointAtSource((FIK::EnrollmentPoseSolverV4 *)this, this[40].i32[3]);
  FIK::EnrollmentPoseSolverV4::rotateRigJointToAlignWithSource(this, this[37].i32[3], this[37].i32[2], this[37].i32[2], this[37].i32[3], 2, 0);
  FIK::EnrollmentPoseSolverV4::rotateRigJointToAlignWithSource(this, this[37].i32[3], this[37].i32[3], this[37].i32[3], this[38].i32[0], 0, 1);
  FIK::EnrollmentPoseSolverV4::rotateRigJointToAlignWithSource(this, this[38].i32[0], this[38].i32[0], this[38].i32[0], this[38].i32[1], 0, 1);
  FIK::EnrollmentPoseSolverV4::rotateRigJointToAlignWithSource(this, this[38].i32[3], this[37].i32[2], this[37].i32[2], this[38].i32[3], 2, 0);
  FIK::EnrollmentPoseSolverV4::rotateRigJointToAlignWithSource(this, this[38].i32[3], this[38].i32[3], this[38].i32[3], this[39].i32[0], 0, 1);
  return FIK::EnrollmentPoseSolverV4::rotateRigJointToAlignWithSource(this, this[39].i32[0], this[39].i32[0], this[39].i32[0], this[39].i32[1], 0, 1);
}

_QWORD *FIK::EnrollmentPoseSolverV4::setRigRigHeadJointRotationFromAtlas(float32x4_t *this)
{
  FIK::PoseConverter *v2;
  unint64_t GlobalTransform;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  int32x4_t v7;
  float32x4_t v8;
  int32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  int32x4_t v14;
  int8x16_t v15;
  float32x4_t v16;
  float32x4_t v17;
  int32x4_t v18;
  float32x4_t v19;
  int32x4_t v20;
  uint64_t v21;
  float32x4_t *v22;

  v2 = (FIK::PoseConverter *)&this[27];
  GlobalTransform = FIK::PoseConverter::GetGlobalTransform((FIK::PoseConverter *)&this[27], this[40].i32[2]);
  v4 = vmulq_f32(*(float32x4_t *)(GlobalTransform + 16), (float32x4_t)xmmword_210802C20);
  v5 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v4, (int32x4_t)v4), (int8x16_t)v4, 0xCuLL);
  v6 = vnegq_f32(v4);
  v7 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)GlobalTransform, *(int32x4_t *)GlobalTransform), *(int8x16_t *)GlobalTransform, 0xCuLL), v6), *(float32x4_t *)GlobalTransform, v5);
  v8 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v7, v7), (int8x16_t)v7, 0xCuLL);
  v9 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v8, (int32x4_t)v8), (int8x16_t)v8, 0xCuLL), v6), v8, v5);
  v10 = vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v9, v9), (int8x16_t)v9, 0xCuLL), v8, v4, 3);
  v8.i64[0] = 0x4000000040000000;
  v8.i64[1] = 0x4000000040000000;
  v11 = vmlaq_f32(*(float32x4_t *)GlobalTransform, v8, v10);
  v13 = this[4];
  v12 = this[5];
  v14 = (int32x4_t)vnegq_f32(v12);
  v15 = (int8x16_t)vtrn2q_s32((int32x4_t)v12, vtrn1q_s32((int32x4_t)v12, v14));
  v16 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v12, (int8x16_t)v14, 8uLL), *(float32x2_t *)v4.f32, 1), (float32x4_t)vextq_s8(v15, v15, 8uLL), v4.f32[0]);
  v17 = (float32x4_t)vrev64q_s32((int32x4_t)v12);
  v17.i32[0] = v14.i32[1];
  v17.i32[3] = v14.i32[2];
  v18 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v13, (int32x4_t)v13), (int8x16_t)v13, 0xCuLL), v6), v13, v5);
  v19 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v18, v18), (int8x16_t)v18, 0xCuLL);
  v20 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v19, (int32x4_t)v19), (int8x16_t)v19, 0xCuLL), v6), v19, v5);
  v21 = this[40].i32[3];
  v22 = (float32x4_t *)(this[21].i64[0] + 544 * v21);
  v22[4] = vsubq_f32(vmlaq_f32(v13, v8, vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v20, v20), (int8x16_t)v20, 0xCuLL), v19, v4, 3)), v11);
  v22[5] = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v12, v4, 3), v17, v4, 2), v16);
  return FIK::PoseConverter::updatePose(v2, v21, (const FIK::Transform *)(this[21].i64[0] + 544 * v21 + 64));
}

_QWORD *FIK::EnrollmentPoseSolverV4::outputTargetJointPoses@<X0>(FIK::EnrollmentPoseSolverV4 *this@<X0>, _QWORD *a2@<X8>)
{
  void (***v4)(FIK::CrtAllocator *__hidden);
  float v5;
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  unint64_t GlobalTransform;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *result;
  uint64_t v15[2];
  uint64_t v16;
  void (***v17)(FIK::CrtAllocator *__hidden);
  _QWORD v18[2];
  uint64_t v19;
  void (***v20)(FIK::CrtAllocator *__hidden);
  _OWORD v21[2];

  v4 = FIK::defaultAllocator(this);
  v18[0] = 0;
  v18[1] = 0;
  v19 = 0;
  v20 = v4;
  v5 = *((float *)this + 25);
  if (*((_QWORD *)this + 4) <= (unint64_t)*((int *)this + 80))
    v6 = *((int *)this + 80);
  else
    v6 = *((_QWORD *)this + 4);
  v15[0] = 0;
  v15[1] = 0;
  v16 = 0;
  v17 = FIK::defaultAllocator((FIK *)v4);
  v21[0] = 0uLL;
  v21[1] = xmmword_210802BA0;
  FIK::IKArray<FIK::Transform>::resize(v15, v6, v21);
  v7 = *((_QWORD *)this + 40);
  if ((int)v7 >= 1)
  {
    v8 = 0;
    do
    {
      v9 = *(unsigned int *)(*((_QWORD *)this + 88) + 4 * v8);
      if ((v9 & 0x80000000) == 0)
      {
        GlobalTransform = FIK::PoseConverter::GetGlobalTransform((FIK::EnrollmentPoseSolverV4 *)((char *)this + 432), v8);
        v11 = *(_OWORD *)(GlobalTransform + 16);
        v12 = v16 + 32 * v9;
        *(float32x4_t *)v12 = vmulq_n_f32(*(float32x4_t *)GlobalTransform, 1.0 / v5);
        *(_OWORD *)(v12 + 16) = v11;
        FIK::IKArray<unsigned int>::reserve(v18, v18[0] + 1);
        v13 = v18[0];
        *(_DWORD *)(v19 + 4 * v18[0]) = v9;
        v18[0] = v13 + 1;
        v7 = *((_QWORD *)this + 40);
      }
      ++v8;
    }
    while (v8 < (int)v7);
  }
  FIK::IKArray<FIK::Transform>::IKArray(a2, v15);
  result = FIK::IKArray<int>::IKArray(a2 + 4, v18);
  v15[0] = 0;
  if (v16)
    result = (_QWORD *)((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v17)[3])(v17, v16, 0, 8);
  v18[0] = 0;
  if (v19)
    return (_QWORD *)((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v20)[3])(v20, v19, 0, 8);
  return result;
}

uint64_t FIK::EnrollmentPoseSolverV4::exportRig(uint64_t result, void *a2, size_t a3)
{
  uint64_t v5;
  uint64_t v6;
  FIK *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  const char **v14;
  _QWORD v15[2];
  const char **v16;
  void (***v17)(FIK::CrtAllocator *__hidden);
  int v18[4];
  int v19[2];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (*(_BYTE *)(result + 800))
  {
    v5 = result;
    v6 = result + 776;
    v7 = (FIK *)FIK::EnrollmentPoseSolverV4::outputTargetJointPoses((FIK::EnrollmentPoseSolverV4 *)result, v18);
    v15[0] = 0;
    v15[1] = 0;
    v16 = 0;
    v17 = FIK::defaultAllocator(v7);
    v8 = *(_QWORD *)v18;
    if (v18[0] < 1)
    {
      v10 = 0;
      v14 = 0;
    }
    else
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      do
      {
        v12 = *(const char **)(*(_QWORD *)(v5 + 48) + v9);
        FIK::IKArray<FIK::Segment *>::reserve(v15, v10 + 1);
        v13 = v15[0];
        v16[v15[0]] = v12;
        v10 = v13 + 1;
        v15[0] = v13 + 1;
        ++v11;
        v8 = *(_QWORD *)v18;
        v9 += 24;
      }
      while (v11 < v18[0]);
      v14 = v16;
    }
    result = FIK::Enrollment::SourceAndTargetDataLogger::exportToFile(v6, v14, v10, *(uint64_t *)v19, v8, a2, a3);
    v15[0] = 0;
    if (v16)
      result = ((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), const char **, _QWORD, uint64_t))(*v17)[3])(v17, v16, 0, 8);
    v21 = 0;
    if (v22)
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v23 + 24))(v23, v22, 0, 8);
    *(_QWORD *)v18 = 0;
    if (*(_QWORD *)v19)
      return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v20 + 24))(v20, *(_QWORD *)v19, 0, 8);
  }
  return result;
}

uint64_t FIK::EnrollmentPoseSolverV4::logInput(uint64_t this)
{
  uint64_t v1;
  FIK *v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  __int128 v14;
  FIK::EnrollmentPoseSolverV4 *v15;
  float32x4_t v16;
  float v17;
  _OWORD v18[2];
  _QWORD v19[2];
  uint64_t v20;
  void (***v21)(FIK::CrtAllocator *__hidden);
  uint64_t v22[2];
  const char **v23;
  void (***v24)(FIK::CrtAllocator *__hidden);
  uint64_t v25[2];
  __int128 *v26;
  FIK *v27;
  uint64_t v28[2];
  const char **v29;
  void (***v30)(FIK::CrtAllocator *__hidden);

  if (*(_BYTE *)(this + 800))
  {
    v1 = this;
    v17 = 1.0 / *(float *)(this + 100);
    v28[0] = 0;
    v28[1] = 0;
    v29 = 0;
    v30 = FIK::defaultAllocator((FIK *)this);
    v2 = (FIK *)FIK::defaultAllocator((FIK *)v30);
    v25[0] = 0;
    v25[1] = 0;
    v26 = 0;
    v27 = v2;
    if (*(_QWORD *)v1)
    {
      v3 = *(_QWORD *)(v1 + 16);
      v4 = v3 + 32 * *(_QWORD *)v1;
      do
      {
        v5 = *(const char **)v3;
        FIK::IKArray<FIK::Segment *>::reserve(v28, v28[0] + 1);
        v6 = v28[0];
        v29[v28[0]] = v5;
        v28[0] = v6 + 1;
        v16 = vmulq_n_f32(*(float32x4_t *)(v3 + 16), v17);
        v2 = (FIK *)_ZN3FIK7IKArrayIDv3_fE7reserveEm(v25, v25[0] + 1);
        v26[v25[0]++] = (__int128)v16;
        v3 += 32;
      }
      while (v3 != v4);
    }
    v22[0] = 0;
    v22[1] = 0;
    v23 = 0;
    v24 = FIK::defaultAllocator(v2);
    v19[0] = 0;
    v19[1] = 0;
    v20 = 0;
    v21 = FIK::defaultAllocator((FIK *)v24);
    v7 = *(_QWORD *)(v1 + 32);
    if (v7)
    {
      v8 = *(_QWORD *)(v1 + 48);
      v9 = v8 + 24 * v7;
      do
      {
        v10 = *(const char **)v8;
        FIK::IKArray<FIK::Segment *>::reserve(v22, v22[0] + 1);
        v11 = v22[0];
        v23[v22[0]] = v10;
        v22[0] = v11 + 1;
        v12 = v17 * *(float *)(v8 + 16);
        FIK::IKArray<unsigned int>::reserve(v19, v19[0] + 1);
        v13 = v19[0];
        *(float *)(v20 + 4 * v19[0]) = v12;
        v19[0] = v13 + 1;
        v8 += 24;
      }
      while (v8 != v9);
    }
    if (*(_BYTE *)(v1 + 800)
      && (FIK::Enrollment::SourceAndTargetDataLogger::exportOriginalSources(v1 + 776, v29, v28[0], v26, v25[0]),
          *(_BYTE *)(v1 + 800))
      && (FIK::Enrollment::SourceAndTargetDataLogger::exportEnrollmentData(v1 + 776, v23, v22[0], v20),
          *(_BYTE *)(v1 + 800)))
    {
      v14 = *(_OWORD *)(v1 + 80);
      v18[0] = vmulq_n_f32(*(float32x4_t *)(v1 + 64), v17);
      v18[1] = v14;
      this = FIK::Enrollment::SourceAndTargetDataLogger::exportAtlasData((std::string *)(v1 + 776), (const FIK::Transform *)v18);
      v19[0] = 0;
      if (v20)
        this = ((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v21)[3])(v21, v20, 0, 8);
      v22[0] = 0;
      if (v23)
        this = ((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), const char **, _QWORD, uint64_t))(*v24)[3])(v24, v23, 0, 8);
      v25[0] = 0;
      if (v26)
        this = (*(uint64_t (**)(FIK *, __int128 *, _QWORD, uint64_t))(*(_QWORD *)v27 + 24))(v27, v26, 0, 8);
      v28[0] = 0;
      if (v29)
        return ((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), const char **, _QWORD, uint64_t))(*v30)[3])(v30, v29, 0, 8);
    }
    else
    {
      v15 = (FIK::EnrollmentPoseSolverV4 *)std::__throw_bad_optional_access[abi:nn180100]();
      return FIK::EnrollmentPoseSolverV4::logOutput(v15);
    }
  }
  return this;
}

uint64_t FIK::EnrollmentPoseSolverV4::logOutput(FIK::EnrollmentPoseSolverV4 *this)
{
  return FIK::EnrollmentPoseSolverV4::exportRig((uint64_t)this, "solved_pose.csv", 0xFuLL);
}

float32x4_t FIK::IKRigUtils::getGlobalRestTransformBetweenBonesSlow<FIK::MoCapBone>@<Q0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, float32x4_t *a4@<X8>, float a5@<S0>)
{
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  int32x4_t v11;
  float32x4_t v12;
  int32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  int32x4_t v16;
  int8x16_t v17;
  float32x4_t v18;
  float32x4_t v19;
  int32x4_t v20;
  float32x4_t v21;
  int32x4_t v22;
  float32x4_t result;
  int32x4_t v25;
  float32x4_t v26;
  float32x4_t v27[2];

  FIK::IKRigUtils::getGlobalRestTransformSlow<FIK::MoCapBone>(a1, a2, v27);
  FIK::IKRigUtils::getGlobalRestTransformSlow<FIK::MoCapBone>(a1, a3, (float32x4_t *)&v25);
  v8 = vmulq_f32(v27[1], (float32x4_t)xmmword_210802C20);
  v9 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v8, (int32x4_t)v8), (int8x16_t)v8, 0xCuLL);
  v10 = vnegq_f32(v8);
  v11 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v27[0], (int32x4_t)v27[0]), (int8x16_t)v27[0], 0xCuLL), v10), v27[0], v9);
  v12 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v11, v11), (int8x16_t)v11, 0xCuLL);
  v13 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v12, (int32x4_t)v12), (int8x16_t)v12, 0xCuLL), v10), v12, v9);
  v14 = vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v13, v13), (int8x16_t)v13, 0xCuLL), v12, v8, 3);
  v12.i64[0] = 0x4000000040000000;
  v12.i64[1] = 0x4000000040000000;
  v15 = vmlaq_f32(v27[0], v12, v14);
  v16 = (int32x4_t)vnegq_f32(v26);
  v17 = (int8x16_t)vtrn2q_s32((int32x4_t)v26, vtrn1q_s32((int32x4_t)v26, v16));
  v18 = (float32x4_t)vrev64q_s32((int32x4_t)v26);
  v18.i32[0] = v16.i32[1];
  v18.i32[3] = v16.i32[2];
  v19 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v26, v8, 3), v18, v8, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v26, (int8x16_t)v16, 8uLL), *(float32x2_t *)v8.f32, 1), (float32x4_t)vextq_s8(v17, v17, 8uLL), v8.f32[0]));
  v20 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v25, v25), (int8x16_t)v25, 0xCuLL), v10), (float32x4_t)v25, v9);
  v21 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v20, v20), (int8x16_t)v20, 0xCuLL);
  v22 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v21, (int32x4_t)v21), (int8x16_t)v21, 0xCuLL), v10), v21, v9);
  result = vmulq_n_f32(vsubq_f32(vmlaq_f32((float32x4_t)v25, v12, vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v22, v22), (int8x16_t)v22, 0xCuLL), v21, v8, 3)), v15), a5);
  *a4 = result;
  a4[1] = v19;
  return result;
}

void FIK::IKRigUtils::setBoneLength<FIK::MoCapRig>(uint64_t a1, int a2, float a3)
{
  uint64_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float v6;
  NSObject *v7;
  void *v8;
  int v9;
  const char *v10;
  __int16 v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 224) + 544 * a2;
  v4 = *(float32x4_t *)(v3 + 64);
  v5 = vmulq_f32(v4, v4);
  v6 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v5, 2), vaddq_f32(v5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 1))).f32[0]);
  if (v6 <= 0.0)
  {
    if (a3 > 0.0)
    {
      *(_OWORD *)(v3 + 64) = LODWORD(a3);
      v7 = ikinemaLogObject()[2];
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        if (*(_QWORD *)(v3 + 16))
          v8 = *(void **)(v3 + 8);
        else
          v8 = &unk_2108059BE;
        v9 = 136315394;
        v10 = "setBoneLength";
        v11 = 2080;
        v12 = v8;
        _os_log_impl(&dword_21078E000, v7, OS_LOG_TYPE_DEFAULT, "%s: Trying to set joint length to %s which has zero length. Joint extended only along the X axis.", (uint8_t *)&v9, 0x16u);
      }
    }
  }
  else
  {
    *(float32x4_t *)(v3 + 64) = vmulq_n_f32(v4, a3 / v6);
  }
}

uint64_t FIK::EnrollmentPoseSolverV4::rigParentJointIndex(FIK::EnrollmentPoseSolverV4 *this, unsigned int a2)
{
  uint64_t result;
  uint64_t *v3;

  if ((a2 & 0x80000000) != 0
    || *((_DWORD *)this + 80) <= (signed int)a2
    || (result = *(unsigned int *)(*((_QWORD *)this + 42) + 544 * a2 + 4), (_DWORD)result == -1))
  {
    v3 = ikinemaLogObject();
    ikinemaAssertHandler(*v3, 0, (uint64_t)"rigParentJointIndex", "(parentJointIndex != FIK::kInvalidRigIndex) Parent joint not found in the rig.");
    return 0xFFFFFFFFLL;
  }
  return result;
}

double FIK::EnrollmentPoseSolverV4::rigParentJointGlobalPose@<D0>(FIK::EnrollmentPoseSolverV4 *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  int v5;
  __int128 *GlobalTransform;
  __int128 v7;
  __int128 v8;

  if (!a2 || (v5 = FIK::EnrollmentPoseSolverV4::rigParentJointIndex(this, a2), v5 == -1))
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)&v7 = 0;
    *(_OWORD *)(a3 + 16) = xmmword_210802BA0;
  }
  else
  {
    GlobalTransform = (__int128 *)FIK::PoseConverter::GetGlobalTransform((FIK::EnrollmentPoseSolverV4 *)((char *)this + 432), v5);
    v7 = *GlobalTransform;
    v8 = GlobalTransform[1];
    *(_OWORD *)a3 = *GlobalTransform;
    *(_OWORD *)(a3 + 16) = v8;
  }
  return *(double *)&v7;
}

float32x4_t *FIK::EnrollmentPoseSolverV4::rigJointToJointGlobalDirection@<X0>(FIK::EnrollmentPoseSolverV4 *this@<X0>, int a2@<W1>, int a3@<W2>, float32x4_t *a4@<X8>)
{
  FIK::PoseConverter *v6;
  float32x4_t *result;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;

  v6 = (FIK::EnrollmentPoseSolverV4 *)((char *)this + 432);
  v12 = *(float32x4_t *)FIK::PoseConverter::GetGlobalTransform((FIK::EnrollmentPoseSolverV4 *)((char *)this + 432), a2);
  result = (float32x4_t *)FIK::PoseConverter::GetGlobalTransform(v6, a3);
  v8 = vsubq_f32(*result, v12);
  v9 = vmulq_f32(v8, v8);
  v10 = vaddq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1));
  v10.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), v10).f32[0]);
  v11 = 0uLL;
  if (v10.f32[0] >= 0.1)
    v11 = vdivq_f32(v8, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0));
  *a4 = v11;
  return result;
}

float32x4_t *FIK::EnrollmentPoseSolverV4::sourceJointToJointGlobalDirection@<X0>(float32x4_t *result@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, float32x4_t *a5@<X8>)
{
  uint64_t v6;
  float32x4_t *v7;
  float32x4_t *v8;
  float32x4_t *v9;
  unint64_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  NSObject *v15;
  const char *v16;
  int v17;
  uint64_t v18;
  float32x4_t *v19;
  float32x4_t *v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float v24;
  const char *v25;
  uint64_t v26;
  float32x4_t v27;
  int32x2_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  int32x2_t v33;
  uint64_t *v34;
  uint64_t v35;
  float32x4_t v36;
  float v37;
  float v38;
  float v39;
  float v40;
  double v41;
  float v42;
  uint64_t *v43;
  float32x4_t v44;
  float v45;
  FIK::EnrollmentPoseSolverV4 *v46;
  int v47;
  const FIK::Transform *v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;

  v6 = result[46].i64[0];
  v7 = (float32x4_t *)(v6 + 48 * a2);
  if (!v7[1].i8[0] || (v8 = (float32x4_t *)(v6 + 48 * a3), !v8[1].i8[0]))
  {
    v15 = *ikinemaLogObject();
    v16 = "(false) No source given for a joint";
    v17 = 0;
LABEL_22:
    result = (float32x4_t *)ikinemaAssertHandler(v15, v17, (uint64_t)"sourceJointToJointGlobalDirection", v16);
    v29 = 0uLL;
    goto LABEL_23;
  }
  v9 = result;
  v11 = a3;
  if (a4 == 2)
  {
    v49 = *(float32x4_t *)FIK::PoseConverter::GetGlobalTransform((FIK::PoseConverter *)&result[27], a2);
    result = (float32x4_t *)FIK::PoseConverter::GetGlobalTransform((FIK::PoseConverter *)&v9[27], v11);
    v18 = v9[46].i64[0];
    v19 = (float32x4_t *)(v18 + 48 * a2);
    if (v19[1].i8[0])
    {
      v20 = (float32x4_t *)(v18 + 48 * (int)v11);
      if (v20[1].i8[0])
      {
        v21 = v49;
        v22 = vsubq_f32(v49, *result);
        v23 = vmulq_f32(v22, v22);
        v24 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v23, 2), vaddq_f32(v23, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v23.f32, 1))).f32[0]);
        if (v24 >= 0.1)
        {
          v30 = *v19;
          v31 = vsubq_f32(*v20, *v19);
          v32 = vmulq_f32(v31, v31);
          v33 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v32, 2), vaddq_f32(v32, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.f32, 1))).u64[0];
          *(float *)v33.i32 = sqrtf(*(float *)v33.i32);
          if (*(float *)v33.i32 >= 0.1)
          {
            v35 = 0;
            v36 = vdivq_f32(v31, (float32x4_t)vdupq_lane_s32(v33, 0));
            v50 = vsubq_f32(v30, v49);
            v51 = v36;
            v37 = 0.0;
            v38 = 0.0;
            do
            {
              v39 = v50.f32[v35];
              v38 = v38 + (float)(v51.f32[v35] * v39);
              v37 = v37 + (float)(v39 * v39);
              ++v35;
            }
            while (v35 != 3);
            v40 = v37 - (float)(v24 * v24);
            v41 = (float)(v38 + v38);
            v42 = -(v40 - v41 * 0.25 * v41);
            if (v42 >= 0.0)
            {
              v45 = sqrtf(v42) + v41 * -0.5;
              v44 = vaddq_f32(v30, vmulq_n_f32(v36, v45));
            }
            else
            {
              v43 = ikinemaLogObject();
              result = (float32x4_t *)ikinemaAssertHandler(*v43, 1, (uint64_t)"lineSphereIntersection", "(false) Line and sphere don't intersect.");
              v21 = v49;
              v44 = 0uLL;
            }
            v12 = vsubq_f32(v44, v21);
            goto LABEL_15;
          }
          v25 = "(false) Line vector must not be zero length.";
        }
        else
        {
          v25 = "(false) Radius must be greater than zero.";
        }
        v34 = ikinemaLogObject();
        ikinemaAssertHandler(*v34, 1, (uint64_t)"lineSphereIntersection", v25);
        v15 = *ikinemaLogObject();
        v16 = "(false) Joints have zero distance, cannot rotate the the rig joint to direction specified by them.";
LABEL_21:
        v17 = 1;
        goto LABEL_22;
      }
    }
  }
  else
  {
    if (a4 != 1)
    {
      v12 = 0uLL;
      if (a4)
      {
LABEL_15:
        v27 = vmulq_f32(v12, v12);
        v28 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v27, 2), vaddq_f32(v27, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 1))).u64[0];
        *(float *)v28.i32 = sqrtf(*(float *)v28.i32);
        if (*(float *)v28.i32 >= 0.1)
        {
          v29 = vdivq_f32(v12, (float32x4_t)vdupq_lane_s32(v28, 0));
LABEL_23:
          *a5 = v29;
          return result;
        }
        v15 = *ikinemaLogObject();
        v16 = "(false) Source joints have zero distance, cannot rotate the the rig joint to direction specified by them.";
        goto LABEL_21;
      }
      v13 = *v7;
      v14 = *v8;
LABEL_14:
      v12 = vsubq_f32(v14, v13);
      goto LABEL_15;
    }
    result = (float32x4_t *)FIK::PoseConverter::GetGlobalTransform((FIK::PoseConverter *)&result[27], a2);
    v26 = v9[46].i64[0] + 48 * (int)v11;
    if (*(_BYTE *)(v26 + 16))
    {
      v13 = *result;
      v14 = *(float32x4_t *)v26;
      goto LABEL_14;
    }
  }
  v46 = (FIK::EnrollmentPoseSolverV4 *)std::__throw_bad_optional_access[abi:nn180100]();
  return (float32x4_t *)FIK::EnrollmentPoseSolverV4::transformRigJointByGlobalTransform(v46, v47, v48);
}

_QWORD *FIK::EnrollmentPoseSolverV4::transformRigJointByGlobalTransform(FIK::EnrollmentPoseSolverV4 *this, signed int a2, float32x4_t *a3)
{
  FIK::PoseConverter *v6;
  uint64_t v7;
  unint64_t GlobalTransform;
  float32x4_t v9;
  int32x4_t v10;
  int8x16_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  int32x4_t v18;
  float32x4_t v19;
  int32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  int32x4_t v25;
  float32x4_t v26;
  int32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  int32x4_t v30;
  int8x16_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  int32x4_t v35;
  float32x4_t v36;
  int32x4_t v37;
  uint64_t v38;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42[2];

  v6 = (FIK::EnrollmentPoseSolverV4 *)((char *)this + 432);
  v7 = a2;
  GlobalTransform = FIK::PoseConverter::GetGlobalTransform((FIK::EnrollmentPoseSolverV4 *)((char *)this + 432), a2);
  v9 = *(float32x4_t *)(GlobalTransform + 16);
  v10 = (int32x4_t)vnegq_f32(v9);
  v11 = (int8x16_t)vtrn2q_s32((int32x4_t)v9, vtrn1q_s32((int32x4_t)v9, v10));
  v12 = a3[1];
  v13 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v9, (int8x16_t)v10, 8uLL), *(float32x2_t *)v12.f32, 1), (float32x4_t)vextq_s8(v11, v11, 8uLL), v12.f32[0]);
  v14 = (float32x4_t)vrev64q_s32((int32x4_t)v9);
  v14.i32[0] = v10.i32[1];
  v14.i32[3] = v10.i32[2];
  v15 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v9, v12, 3), v14, v12, 2), v13);
  v16 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v12, (int32x4_t)v12), (int8x16_t)v12, 0xCuLL);
  v17 = vnegq_f32(v12);
  v18 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)GlobalTransform, *(int32x4_t *)GlobalTransform), *(int8x16_t *)GlobalTransform, 0xCuLL), v17), *(float32x4_t *)GlobalTransform, v16);
  v19 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v18, v18), (int8x16_t)v18, 0xCuLL);
  v20 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v19, (int32x4_t)v19), (int8x16_t)v19, 0xCuLL), v17), v19, v16);
  v21 = vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v20, v20), (int8x16_t)v20, 0xCuLL), v19, v12, 3);
  v19.i64[0] = 0x4000000040000000;
  v19.i64[1] = 0x4000000040000000;
  v40 = vaddq_f32(*a3, vmlaq_f32(*(float32x4_t *)GlobalTransform, v19, v21));
  v41 = v15;
  FIK::EnrollmentPoseSolverV4::rigParentJointGlobalPose(this, a2, (uint64_t)v42);
  v22 = vmulq_f32(v42[1], (float32x4_t)xmmword_210802C20);
  v23 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v22, (int32x4_t)v22), (int8x16_t)v22, 0xCuLL);
  v24 = vnegq_f32(v22);
  v25 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v42[0], (int32x4_t)v42[0]), (int8x16_t)v42[0], 0xCuLL), v24), v42[0], v23);
  v26 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v25, v25), (int8x16_t)v25, 0xCuLL);
  v27 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v26, (int32x4_t)v26), (int8x16_t)v26, 0xCuLL), v24), v26, v23);
  v28.i64[0] = 0x4000000040000000;
  v28.i64[1] = 0x4000000040000000;
  v29 = vmlaq_f32(v42[0], v28, vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v27, v27), (int8x16_t)v27, 0xCuLL), v26, v22, 3));
  v30 = (int32x4_t)vnegq_f32(v41);
  v31 = (int8x16_t)vtrn2q_s32((int32x4_t)v41, vtrn1q_s32((int32x4_t)v41, v30));
  v32 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v41, (int8x16_t)v30, 8uLL), *(float32x2_t *)v22.f32, 1), (float32x4_t)vextq_s8(v31, v31, 8uLL), v22.f32[0]);
  v33 = (float32x4_t)vrev64q_s32((int32x4_t)v41);
  v33.i32[0] = v30.i32[1];
  v33.i32[3] = v30.i32[2];
  v34 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v41, v22, 3), v33, v22, 2), v32);
  v35 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v40, (int32x4_t)v40), (int8x16_t)v40, 0xCuLL), v24), v40, v23);
  v36 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v35, v35), (int8x16_t)v35, 0xCuLL);
  v37 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v36, (int32x4_t)v36), (int8x16_t)v36, 0xCuLL), v24), v36, v23);
  v38 = *((_QWORD *)this + 42) + 544 * a2;
  *(float32x4_t *)(v38 + 64) = vsubq_f32(vmlaq_f32(v40, v28, vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v37, v37), (int8x16_t)v37, 0xCuLL), v36, v22, 3)), v29);
  *(float32x4_t *)(v38 + 80) = v34;
  return FIK::PoseConverter::updatePose(v6, v7, (const FIK::Transform *)(*((_QWORD *)this + 42) + 544 * a2 + 64));
}

float32x4_t *FIK::EnrollmentPoseSolverV4::rotateRigJointToAlignWithSource(_QWORD *a1, signed int a2, int a3, int a4, int a5, int a6, int a7)
{
  float32x4_t *result;
  uint32x4_t v15;
  uint32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  uint64_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float v22;
  float32x4_t v23;
  double v24;
  float32x4_t v25;
  int32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float v29;
  float32x4_t v30;
  float32x4_t v31;
  float v32;
  int32x4_t v33;
  float32x4_t v34;
  int8x16_t v35;
  float32x2_t v36;
  unsigned __int32 v37;
  float32x2_t v38;
  float32x2_t v39;
  float32x4_t v40;
  float32x4_t v41;
  int32x4_t v42;
  float32x4_t v43;
  int32x4_t v44;
  float32x4_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51[2];
  float32x4_t v52;
  float32x4_t v53;

  result = FIK::EnrollmentPoseSolverV4::rigJointToJointGlobalDirection((FIK::EnrollmentPoseSolverV4 *)a1, a4, a5, &v53);
  v15 = (uint32x4_t)vceqzq_f32(v53);
  v15.i32[3] = v15.i32[2];
  if ((vminvq_u32(v15) & 0x80000000) == 0)
  {
    v50 = v53;
    result = FIK::EnrollmentPoseSolverV4::sourceJointToJointGlobalDirection((float32x4_t *)a1, a4, a5, a7, &v52);
    v16 = (uint32x4_t)vceqzq_f32(v52);
    v16.i32[3] = v16.i32[2];
    if ((vminvq_u32(v16) & 0x80000000) == 0)
    {
      v17 = vsubq_f32(v50, v52);
      v18 = vmulq_f32(v17, v17);
      if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 2), vaddq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1))).f32[0] >= 0.000025)
      {
        v19 = a1[42] + 544 * a2;
        v47 = *(_OWORD *)(v19 + 64);
        v48 = *(_OWORD *)(v19 + 80);
        v49 = v52;
        v20 = *(float32x4_t *)FIK::PoseConverter::GetGlobalTransform((FIK::PoseConverter *)(a1 + 54), a3);
        v21 = vmulq_f32(v50, v49);
        v22 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 2), vaddq_f32(v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 1))).f32[0];
        v23 = (float32x4_t)xmmword_210802BA0;
        if (v22 < 1.0)
        {
          v24 = v22;
          if (v22 >= -0.999999)
          {
            *(float *)&v24 = sqrtf((float)(v22 + 1.0) + (float)(v22 + 1.0));
            v33 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v49, (int32x4_t)v49), (int8x16_t)v49, 0xCuLL), vnegq_f32(v50)), v49, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v50, (int32x4_t)v50), (int8x16_t)v50, 0xCuLL));
            v34 = vdivq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v33, v33), (int8x16_t)v33, 0xCuLL), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v24, 0));
            v34.f32[3] = *(float *)&v24 * 0.5;
            v35 = (int8x16_t)vmulq_f32(v34, v34);
            v36 = vadd_f32(*(float32x2_t *)v35.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL));
            if (vaddv_f32(v36) != 0.0)
            {
              v37 = vadd_f32(v36, (float32x2_t)vdup_lane_s32((int32x2_t)v36, 1)).u32[0];
              v38 = vrsqrte_f32((float32x2_t)v37);
              v39 = vmul_f32(v38, vrsqrts_f32((float32x2_t)v37, vmul_f32(v38, v38)));
              v23 = vmulq_n_f32(v34, vmul_f32(v39, vrsqrts_f32((float32x2_t)v37, vmul_f32(v39, v39))).f32[0]);
            }
          }
          else
          {
            v25 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v50, (int32x4_t)v50), (int8x16_t)v50, 0xCuLL);
            v26 = (int32x4_t)vmlaq_f32(vmulq_f32(v25, (float32x4_t)xmmword_210802BB0), (float32x4_t)xmmword_210802BC0, v50);
            v27 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v26, v26), (int8x16_t)v26, 0xCuLL);
            v27.i32[3] = 0;
            v28 = vmulq_f32(v27, v27);
            v29 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v28, 2), vaddq_f32(v28, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28.f32, 1))).f32[0]);
            if (fabsf(v29) < 0.000000001)
            {
              v30 = vmlaq_f32(vmulq_f32(v25, (float32x4_t)xmmword_210802BD0), (float32x4_t)xmmword_210802BE0, v50);
              v31 = vmulq_f32(v30, v30);
              v27 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v30, (int32x4_t)v30), (int8x16_t)v30, 0xCuLL);
              v29 = sqrtf(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v31.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v31, 2), v31)).f32[0]);
            }
            v32 = 1.0 / v29;
            if (v29 == 0.0)
              v32 = 0.0;
            v23 = vmulq_n_f32(v27, v32);
            v23.i32[3] = 0;
          }
        }
        v40 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v23, (int32x4_t)v23), (int8x16_t)v23, 0xCuLL);
        v41 = vnegq_f32(v23);
        v42 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v20, (int32x4_t)v20), (int8x16_t)v20, 0xCuLL), v41), v20, v40);
        v43 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v42, v42), (int8x16_t)v42, 0xCuLL);
        v44 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v43, (int32x4_t)v43), (int8x16_t)v43, 0xCuLL), v41), v43, v40);
        v45 = vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v44, v44), (int8x16_t)v44, 0xCuLL), v43, v23, 3);
        v43.i64[0] = 0x4000000040000000;
        v43.i64[1] = 0x4000000040000000;
        v51[0] = vsubq_f32(v20, vmlaq_f32(v20, v43, v45));
        v51[1] = v23;
        result = (float32x4_t *)FIK::EnrollmentPoseSolverV4::transformRigJointByGlobalTransform((FIK::EnrollmentPoseSolverV4 *)a1, a2, v51);
        v46 = a1[42];
        if (a6)
        {
          if (a6 != 1)
            return result;
          *(_OWORD *)(v46 + 544 * a2 + 80) = v48;
        }
        else
        {
          *(_OWORD *)(v46 + 544 * a2 + 64) = v47;
        }
        return (float32x4_t *)FIK::PoseConverter::updatePose((FIK::PoseConverter *)(a1 + 54), a2, (const FIK::Transform *)(a1[42] + 544 * a2 + 64));
      }
    }
  }
  return result;
}

__n128 FIK::EnrollmentPoseSolverV4::setNeckCurving(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[48].n128_u8[0] = a2[1].n128_u8[0];
  a1[47] = result;
  return result;
}

_QWORD *FIK::EnrollmentPoseSolverV4::adjustRigNeckJoints(float32x4_t *this)
{
  FIK *v2;
  uint64_t v3;
  float32x4_t *v4;
  float32x4_t *v5;
  uint64_t v6;
  uint64_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  int v11;
  int v12;
  int v13;
  float32x4_t v14;
  int32x4_t v15;
  float32x4_t v16;
  int v17;
  int32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  _OWORD *v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  uint64_t v33;
  _OWORD *v34;
  uint64_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float v45;
  float32x4_t v46;
  float32x4_t v47;
  int v48;
  float v49;
  int v50;
  int v51;
  int v52;
  uint64_t *v54;
  FIK::EnrollmentPoseSolverV4 *v55;
  int v56;
  float32x4_t v57;
  float32x4_t v58;
  _QWORD v59[2];
  _OWORD *v60;
  uint64_t v61;
  char v62;
  _QWORD v63[2];
  uint64_t v64;
  uint64_t v65;
  char v66;
  _QWORD v67[2];
  int *v68;
  void (***v69)(FIK::CrtAllocator *__hidden);
  uint64_t v70;
  uint64_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74[2];

  v2 = (FIK *)FIK::EnrollmentPoseSolverV4::translateWholeRigToPlaceJointAtSource((FIK::EnrollmentPoseSolverV4 *)this, this[39].i32[3]);
  if (!this[48].i8[0])
    return 0;
  v3 = this[46].i64[0];
  v4 = (float32x4_t *)(v3 + 48 * this[37].i32[2]);
  if (v4[1].i8[0])
  {
    v5 = (float32x4_t *)(v3 + 48 * this[39].i32[3]);
    if (v5[1].i8[0])
    {
      v6 = this[47].i64[0];
      v7 = this[47].i64[1];
      v8 = *v4;
      v10 = this[4];
      v9 = this[5];
      v11 = *(_DWORD *)(v3 + 48 * this[40].i32[0] + 32);
      v12 = *(_DWORD *)(v3 + 48 * this[40].i32[1] + 32);
      v13 = *(_DWORD *)(v3 + 48 * this[40].i32[2] + 32);
      v14 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v9, (int32x4_t)v9), (int8x16_t)v9, 0xCuLL);
      v15 = (int32x4_t)vmlaq_f32(vmulq_f32(v9, (float32x4_t)xmmword_210802C30), (float32x4_t)xmmword_210802BC0, v14);
      v16 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v15, v15), (int8x16_t)v15, 0xCuLL);
      v17 = *(_DWORD *)(v3 + 48 * this[40].i32[3] + 32);
      v74[0] = *v5;
      v74[1] = v10;
      v57 = v74[0];
      v58 = v10;
      v18 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v16, (int32x4_t)v16), (int8x16_t)v16, 0xCuLL), vnegq_f32(v9)), v16, v14);
      v19 = vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v18, v18), (int8x16_t)v18, 0xCuLL), v16, v9, 3);
      v9.i64[0] = 0x4000000040000000;
      v9.i64[1] = 0x4000000040000000;
      v20 = vmlaq_f32((float32x4_t)xmmword_210802BC0, v9, v19);
      v20.i32[3] = 0;
      v72 = vsubq_f32(v74[0], v8);
      v73 = v20;
      v72.i32[0] = 0;
      v73.i32[0] = 0;
      v70 = v7;
      v71 = v6;
      v67[0] = 0;
      v67[1] = 0;
      v68 = 0;
      v69 = FIK::defaultAllocator(v2);
      FIK::IKArray<unsigned int>::reserve(v67, 1uLL);
      v21 = v67[0];
      v68[v67[0]] = v11;
      v67[0] = v21 + 1;
      FIK::IKArray<unsigned int>::reserve(v67, v21 + 2);
      v22 = v67[0];
      v68[v67[0]] = v12;
      v67[0] = v22 + 1;
      FIK::IKArray<unsigned int>::reserve(v67, v22 + 2);
      v23 = v67[0];
      v68[v67[0]] = v13;
      v67[0] = v23 + 1;
      FIK::IKArray<unsigned int>::reserve(v67, v23 + 2);
      v24 = v68;
      v25 = v67[0];
      v68[v67[0]] = v17;
      v67[0] = v25 + 1;
      FIK::scaleChainToFitCurve(v74, (uint64_t)&v72, (uint64_t)&v71, (uint64_t)&v70, v24, v25 + 1, (uint64_t)v59, 2.0, 0.1);
      LOBYTE(v63[0]) = 0;
      v66 = 0;
      if (!v62
        || (FIK::IKArray<FIK::Vector>::IKArray(v63, v59), v66 = 1, v62)
        && (v59[0] = 0, v60)
        && ((*(void (**)(uint64_t, _OWORD *, _QWORD, uint64_t))(*(_QWORD *)v61 + 24))(v61, v60, 0, 8),
            !v66))
      {
        v31 = 0;
      }
      else
      {
        FIK::IKArray<FIK::Vector>::IKArray(v59, v63);
        v26 = v60;
        v27 = v58;
        v28 = vsubq_f32((float32x4_t)v60[v59[0] - 1], v58);
        v29 = vmulq_f32(v28, v28);
        if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v29, 2), vaddq_f32(v29, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 1))).f32[0] >= 0.04)
        {
          v54 = ikinemaLogObject();
          ikinemaAssertHandler(*v54, 0, (uint64_t)"adjustRigNeckJoints", "(chainPositions.back().isAlmostEqualTo(headPosition, 2*Tolerance::kMinDistance)) Calculated chain last position should coincide with head.");
          v27 = v58;
          v26 = v60;
        }
        v30 = this[46].i64[0] + 48 * this[40].i32[0];
        if (*(_BYTE *)(v30 + 16))
        {
          *(_OWORD *)v30 = *v26;
        }
        else
        {
          *(_OWORD *)v30 = *v26;
          *(_BYTE *)(v30 + 16) = 1;
        }
        v32 = v60 + 1;
        v33 = this[46].i64[0] + 48 * this[40].i32[1];
        if (*(_BYTE *)(v33 + 16))
        {
          *(_OWORD *)v33 = *v32;
        }
        else
        {
          *(_OWORD *)v33 = *v32;
          *(_BYTE *)(v33 + 16) = 1;
        }
        v34 = v60 + 2;
        v35 = this[46].i64[0] + 48 * this[40].i32[2];
        if (*(_BYTE *)(v35 + 16))
        {
          *(_OWORD *)v35 = *v34;
        }
        else
        {
          *(_OWORD *)v35 = *v34;
          *(_BYTE *)(v35 + 16) = 1;
        }
        v36 = *((float32x4_t *)v60 + 1);
        v37 = vsubq_f32(v57, *(float32x4_t *)v60);
        v38 = vmulq_f32(v37, v37);
        v39 = vsubq_f32(*(float32x4_t *)v60, v36);
        v40 = vmulq_f32(v39, v39);
        v41 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v40, 2), vaddq_f32(v40, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.f32, 1))).f32[0]);
        v42 = *((float32x4_t *)v60 + 2);
        v43 = vsubq_f32(v36, v42);
        v44 = vmulq_f32(v43, v43);
        v45 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v44, 2), vaddq_f32(v44, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v44.f32, 1))).f32[0]);
        v46 = vsubq_f32(v42, v27);
        v47 = vmulq_f32(v46, v46);
        v48 = this[40].i32[0];
        v49 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v47, 2), vaddq_f32(v47, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v47.f32, 1))).f32[0]);
        FIK::IKRigUtils::setBoneLength<FIK::MoCapRig>((uint64_t)&this[7], v48, sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v38, 2), vaddq_f32(v38, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v38.f32, 1))).f32[0]));
        FIK::PoseConverter::updatePose((FIK::PoseConverter *)&this[27], v48, (const FIK::Transform *)(this[21].i64[0] + 544 * v48 + 64));
        v50 = this[40].i32[1];
        FIK::IKRigUtils::setBoneLength<FIK::MoCapRig>((uint64_t)&this[7], v50, v41);
        FIK::PoseConverter::updatePose((FIK::PoseConverter *)&this[27], v50, (const FIK::Transform *)(this[21].i64[0] + 544 * v50 + 64));
        v51 = this[40].i32[2];
        FIK::IKRigUtils::setBoneLength<FIK::MoCapRig>((uint64_t)&this[7], v51, v45);
        FIK::PoseConverter::updatePose((FIK::PoseConverter *)&this[27], v51, (const FIK::Transform *)(this[21].i64[0] + 544 * v51 + 64));
        v52 = this[40].i32[3];
        FIK::IKRigUtils::setBoneLength<FIK::MoCapRig>((uint64_t)&this[7], v52, v49);
        FIK::PoseConverter::updatePose((FIK::PoseConverter *)&this[27], v52, (const FIK::Transform *)(this[21].i64[0] + 544 * v52 + 64));
        FIK::EnrollmentPoseSolverV4::rotateRigJointToAlignWithSource(this, this[39].i32[3], this[39].i32[3], this[39].i32[3], this[40].i32[0], 0, 0);
        FIK::EnrollmentPoseSolverV4::rotateRigJointToAlignWithSource(this, this[40].i32[0], this[40].i32[0], this[40].i32[0], this[40].i32[1], 0, 0);
        FIK::EnrollmentPoseSolverV4::rotateRigJointToAlignWithSource(this, this[40].i32[1], this[40].i32[1], this[40].i32[1], this[40].i32[2], 0, 0);
        FIK::EnrollmentPoseSolverV4::rotateRigJointToAlignWithSource(this, this[40].i32[2], this[40].i32[2], this[40].i32[2], this[40].i32[3], 0, 0);
        v59[0] = 0;
        if (v60)
          (*(void (**)(uint64_t, _OWORD *, _QWORD, uint64_t))(*(_QWORD *)v61 + 24))(v61, v60, 0, 8);
        if (v66)
        {
          v63[0] = 0;
          if (v64)
            (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v65 + 24))(v65, v64, 0, 8);
        }
        v31 = 1;
      }
      v67[0] = 0;
      if (v68)
        ((void (*)(void (***)(FIK::CrtAllocator *__hidden), int *, _QWORD, uint64_t))(*v69)[3])(v69, v68, 0, 8);
      return (_QWORD *)v31;
    }
  }
  v55 = (FIK::EnrollmentPoseSolverV4 *)std::__throw_bad_optional_access[abi:nn180100]();
  return FIK::EnrollmentPoseSolverV4::translateWholeRigToPlaceJointAtSource(v55, v56);
}

_QWORD *FIK::EnrollmentPoseSolverV4::translateWholeRigToPlaceJointAtSource(FIK::EnrollmentPoseSolverV4 *this, int a2)
{
  float32x4_t *GlobalTransform;
  float32x4_t *v5;
  _DWORD *v7;
  uint64_t v8;
  float32x4_t v9[2];

  GlobalTransform = (float32x4_t *)FIK::PoseConverter::GetGlobalTransform((FIK::EnrollmentPoseSolverV4 *)((char *)this + 432), a2);
  v5 = (float32x4_t *)(*((_QWORD *)this + 92) + 48 * a2);
  if (v5[1].i8[0])
  {
    v9[0] = vsubq_f32(*v5, *GlobalTransform);
    v9[1] = (float32x4_t)xmmword_210802BA0;
    return FIK::EnrollmentPoseSolverV4::transformRigJointByGlobalTransform(this, *((_DWORD *)this + 148), v9);
  }
  else
  {
    v7 = (_DWORD *)std::__throw_bad_optional_access[abi:nn180100]();
    return FIK::EnrollmentPoseSolverV4::RigJointIndices::RigJointIndices(v7, v8);
  }
}

_DWORD *FIK::EnrollmentPoseSolverV4::RigJointIndices::RigJointIndices(_DWORD *a1, uint64_t a2)
{
  unsigned int *v3;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;

  v3 = (unsigned int *)(a2 + 208);
  *a1 = FIK::IKRigUtils::getBoneIndex<FIK::MoCapBone,void>("hips_joint", 0xAuLL, (unsigned int *)(a2 + 208));
  a1[1] = FIK::IKRigUtils::getBoneIndex<FIK::MoCapBone,void>("spine_6_joint", 0xDuLL, v3);
  a1[2] = FIK::IKRigUtils::getBoneIndex<FIK::MoCapBone,void>("spine_7_joint", 0xDuLL, v3);
  a1[3] = FIK::IKRigUtils::getBoneIndex<FIK::MoCapBone,void>("left_shoulder_1_joint", 0x15uLL, v3);
  a1[4] = FIK::IKRigUtils::getBoneIndex<FIK::MoCapBone,void>("left_arm_joint", 0xEuLL, v3);
  a1[5] = FIK::IKRigUtils::getBoneIndex<FIK::MoCapBone,void>("left_forearm_joint", 0x12uLL, v3);
  a1[6] = FIK::IKRigUtils::getBoneIndex<FIK::MoCapBone,void>("left_hand_joint", 0xFuLL, v3);
  a1[7] = FIK::IKRigUtils::getBoneIndex<FIK::MoCapBone,void>("right_shoulder_1_joint", 0x16uLL, v3);
  a1[8] = FIK::IKRigUtils::getBoneIndex<FIK::MoCapBone,void>("right_arm_joint", 0xFuLL, v3);
  a1[9] = FIK::IKRigUtils::getBoneIndex<FIK::MoCapBone,void>("right_forearm_joint", 0x13uLL, v3);
  a1[10] = FIK::IKRigUtils::getBoneIndex<FIK::MoCapBone,void>("right_hand_joint", 0x10uLL, v3);
  a1[11] = FIK::IKRigUtils::getBoneIndex<FIK::MoCapBone,void>("neck_1_joint", 0xCuLL, v3);
  a1[12] = FIK::IKRigUtils::getBoneIndex<FIK::MoCapBone,void>("neck_2_joint", 0xCuLL, v3);
  a1[13] = FIK::IKRigUtils::getBoneIndex<FIK::MoCapBone,void>("neck_3_joint", 0xCuLL, v3);
  a1[14] = FIK::IKRigUtils::getBoneIndex<FIK::MoCapBone,void>("neck_4_joint", 0xCuLL, v3);
  a1[15] = FIK::IKRigUtils::getBoneIndex<FIK::MoCapBone,void>("head_joint", 0xAuLL, v3);
  if (*a1 == -1)
  {
    v5 = ikinemaLogObject();
    ikinemaAssertHandler(*v5, 0, (uint64_t)"RigJointIndices", "(kHips != FIK::kInvalidRigIndex) Hips not included in rig");
  }
  if (a1[1] == -1)
  {
    v6 = ikinemaLogObject();
    ikinemaAssertHandler(*v6, 0, (uint64_t)"RigJointIndices", "(kSpine6 != FIK::kInvalidRigIndex) Spine 6 not included in rig");
  }
  if (a1[2] == -1)
  {
    v7 = ikinemaLogObject();
    ikinemaAssertHandler(*v7, 0, (uint64_t)"RigJointIndices", "(kSpine7 != FIK::kInvalidRigIndex) Spine 7 not included in rig");
  }
  if (a1[3] == -1)
  {
    v8 = ikinemaLogObject();
    ikinemaAssertHandler(*v8, 0, (uint64_t)"RigJointIndices", "(kLeftShoulder != FIK::kInvalidRigIndex) Left shoulder not included in rig");
  }
  if (a1[4] == -1)
  {
    v9 = ikinemaLogObject();
    ikinemaAssertHandler(*v9, 0, (uint64_t)"RigJointIndices", "(kLeftArm != FIK::kInvalidRigIndex) Left arm not included in rig");
  }
  if (a1[5] == -1)
  {
    v10 = ikinemaLogObject();
    ikinemaAssertHandler(*v10, 0, (uint64_t)"RigJointIndices", "(kLeftForearm != FIK::kInvalidRigIndex) Left forearm not included in rig");
  }
  if (a1[6] == -1)
  {
    v11 = ikinemaLogObject();
    ikinemaAssertHandler(*v11, 0, (uint64_t)"RigJointIndices", "(kLeftHand != FIK::kInvalidRigIndex) Left hand not included in rig");
  }
  if (a1[7] == -1)
  {
    v12 = ikinemaLogObject();
    ikinemaAssertHandler(*v12, 0, (uint64_t)"RigJointIndices", "(kRightShoulder != FIK::kInvalidRigIndex) Right shoulder not included in rig");
  }
  if (a1[8] == -1)
  {
    v13 = ikinemaLogObject();
    ikinemaAssertHandler(*v13, 0, (uint64_t)"RigJointIndices", "(kRightArm != FIK::kInvalidRigIndex) Right arm not included in rig");
  }
  if (a1[9] == -1)
  {
    v14 = ikinemaLogObject();
    ikinemaAssertHandler(*v14, 0, (uint64_t)"RigJointIndices", "(kRightForearm != FIK::kInvalidRigIndex) Right forearm not included in rig");
  }
  if (a1[10] == -1)
  {
    v15 = ikinemaLogObject();
    ikinemaAssertHandler(*v15, 0, (uint64_t)"RigJointIndices", "(kRightHand != FIK::kInvalidRigIndex) Right hand not included in rig");
  }
  if (a1[11] == -1)
  {
    v16 = ikinemaLogObject();
    ikinemaAssertHandler(*v16, 0, (uint64_t)"RigJointIndices", "(kNeck1 != FIK::kInvalidRigIndex) Neck 1 joint not included in rig");
  }
  if (a1[12] == -1)
  {
    v17 = ikinemaLogObject();
    ikinemaAssertHandler(*v17, 0, (uint64_t)"RigJointIndices", "(kNeck2 != FIK::kInvalidRigIndex) Neck 2 joint not included in rig");
  }
  if (a1[13] == -1)
  {
    v18 = ikinemaLogObject();
    ikinemaAssertHandler(*v18, 0, (uint64_t)"RigJointIndices", "(kNeck3 != FIK::kInvalidRigIndex) Neck 3 joint not included in rig");
  }
  if (a1[14] == -1)
  {
    v19 = ikinemaLogObject();
    ikinemaAssertHandler(*v19, 0, (uint64_t)"RigJointIndices", "(kNeck4 != FIK::kInvalidRigIndex) Neck 4 joint not included in rig");
  }
  if (a1[15] == -1)
  {
    v20 = ikinemaLogObject();
    ikinemaAssertHandler(*v20, 0, (uint64_t)"RigJointIndices", "(kHead != FIK::kInvalidRigIndex) Head joint not included in rig");
  }
  return a1;
}

_QWORD *FIK::dbgVectorToString@<X0>(float32x4_t *a1@<X0>, _QWORD *a2@<X8>)
{
  float32x4_t v3;
  float32x4_t v4;
  char __str[100];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = vmulq_f32(v3, v3);
  if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v4, 2), vaddq_f32(v4, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v4.f32, 1))).f32[0]) < 0.001)return std::string::basic_string[abi:nn180100]<0>(a2, "Identity");
  snprintf(__str, 0x64uLL, "(%6.2f %6.2f %6.2f)", v3.f32[0], v3.f32[1], v3.f32[2]);
  return std::string::basic_string[abi:nn180100]<0>(a2, __str);
}

void FIK::dbgTransformToString(int32x4_t *this@<X0>, _QWORD *a2@<X8>)
{
  float32x4_t v4;
  float32x4_t v5;
  double v6;
  BOOL v7;
  char v8;
  char *v9;
  void **v10;
  std::string::size_type v11;
  std::string *v12;
  std::string::size_type v13;
  void **v14;
  std::string::size_type v15;
  std::string *v16;
  std::string::size_type v17;
  void *__p[2];
  unsigned __int8 v19;
  std::string v20;
  std::string v21;
  void *v22[2];
  unsigned __int8 v23;
  int32x4_t v24;
  char __s[200];
  char __str[100];
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v4 = *(float32x4_t *)this;
  v24 = this[1];
  v5 = vmulq_f32(v4, v4);
  v6 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v5, 2), vaddq_f32(v5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 1))).f32[0]);
  v7 = fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32(v24, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.i8, 1), (float32x4_t)v24)).f32[0]) >= 0.00001;
  v8 = (float)(*(float *)&v24.i32[3] + -1.0) >= 0.00001 || v7;
  if (v6 < 0.001 && (v8 & 1) == 0)
  {
    std::string::basic_string[abi:nn180100]<0>(a2, "Identity");
    return;
  }
  if (v6 < 0.001)
  {
    __str[0] = 0;
    if ((v8 & 1) == 0)
      goto LABEL_9;
LABEL_11:
    *(_OWORD *)v22 = 0u;
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = 0u;
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = 0u;
    FIK::dbgQuatToAxes(&v24, (float32x4_t *)v22, (float32x4_t *)&v21, (float32x4_t *)&v20);
    snprintf(__s, 0xC8uLL, "rotation=(x:(%6.3f %6.3f %6.3f) y:(%6.3f %6.3f %6.3f) z:(%6.3f %6.3f %6.3f))", *(float *)v22, *((float *)v22 + 1), *(float *)&v22[1], *(float *)&v21.__r_.__value_.__l.__data_, *((float *)v21.__r_.__value_.__r.__words + 1), *(float *)&v21.__r_.__value_.__r.__words[1], *(float *)&v20.__r_.__value_.__l.__data_, *((float *)v20.__r_.__value_.__r.__words + 1), *(float *)&v20.__r_.__value_.__r.__words[1]);
    goto LABEL_12;
  }
  snprintf(__str, 0x64uLL, "translation=(%6.2f %6.2f %6.2f)", v4.f32[0], v4.f32[1], v4.f32[2]);
  if ((v8 & 1) != 0)
    goto LABEL_11;
LABEL_9:
  __s[0] = 0;
LABEL_12:
  if (v6 < 0.001)
    v9 = (char *)&unk_2108059BE;
  else
    v9 = " ";
  std::string::basic_string[abi:nn180100]<0>(v22, v9);
  std::string::basic_string[abi:nn180100]<0>(&v20, __str);
  if ((v23 & 0x80u) == 0)
    v10 = v22;
  else
    v10 = (void **)v22[0];
  if ((v23 & 0x80u) == 0)
    v11 = v23;
  else
    v11 = (std::string::size_type)v22[1];
  v12 = std::string::append(&v20, (const std::string::value_type *)v10, v11);
  v13 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  if ((v19 & 0x80u) == 0)
    v14 = __p;
  else
    v14 = (void **)__p[0];
  if ((v19 & 0x80u) == 0)
    v15 = v19;
  else
    v15 = (std::string::size_type)__p[1];
  v16 = std::string::append(&v21, (const std::string::value_type *)v14, v15);
  v17 = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)a2 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  a2[2] = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if ((char)v19 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if ((char)v23 < 0)
    operator delete(v22[0]);
}

void FIK::EnrollmentPoseSolverV4::dbgPrintRigJoint(FIK::EnrollmentPoseSolverV4 *this, int a2)
{
  uint64_t v5;
  const char *v6;
  int32x4_t *v7;
  int32x4_t v8;
  unint64_t GlobalTransform;
  int32x4_t v10;
  float32x4_t v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  __int8 v16;
  float v17;
  float v18;
  float v19;
  void **v20;
  void **v21;
  float32x4_t v22;
  float32x4_t v23;
  float v24;
  void **v25;
  float32x4_t v26;
  float32x4_t v27;
  void *__p[2];
  char v29;
  void *v30[2];
  char v31;
  void *v32[2];
  char v33;
  float32x4_t v34;
  int32x4_t v35[2];
  int32x4_t v36[2];

  v5 = *((_QWORD *)this + 42);
  if (*(_QWORD *)(v5 + 544 * a2 + 16))
    v6 = *(const char **)(v5 + 544 * a2 + 8);
  else
    v6 = (const char *)&unk_2108059BE;
  v7 = (int32x4_t *)(v5 + 544 * a2);
  v8 = v7[5];
  v36[0] = v7[4];
  v36[1] = v8;
  GlobalTransform = FIK::PoseConverter::GetGlobalTransform((FIK::EnrollmentPoseSolverV4 *)((char *)this + 432), a2);
  v10 = *(int32x4_t *)(GlobalTransform + 16);
  v35[0] = *(int32x4_t *)GlobalTransform;
  v35[1] = v10;
  v11 = vmulq_f32((float32x4_t)v36[0], (float32x4_t)v36[0]);
  v12 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2), vaddq_f32(v11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1))).f32[0]);
  v13 = *((_QWORD *)this + 92);
  v14 = v13 + 48 * a2;
  v15 = *(unsigned __int8 *)(v14 + 16);
  if (*(_BYTE *)(v14 + 16))
  {
    v16 = *(_BYTE *)v14;
    *(uint64_t *)((char *)v34.i64 + 1) = *(_QWORD *)(v14 + 1);
    v34.i64[1] = *(_QWORD *)(v14 + 8);
    v34.i8[0] = v16;
    v27 = v34;
  }
  else
  {
    v27 = 0u;
    v34 = 0u;
  }
  v17 = *(float *)(v13 + 48 * a2 + 32);
  v26 = (float32x4_t)v35[0];
  if (v17 <= 0.0)
    v18 = 0.0;
  else
    v18 = v12 - v17;
  FIK::dbgTransformToString(v36, v32);
  FIK::dbgTransformToString(v35, v30);
  FIK::dbgVectorToString(&v34, __p);
  v19 = fabsf(v18);
  putchar(10);
  printf(" %2d %s:\n", a2, v6);
  if (v33 >= 0)
    v20 = v32;
  else
    v20 = (void **)v32[0];
  printf("  Local  pose:         %s\n", (const char *)v20);
  if (v31 >= 0)
    v21 = v30;
  else
    v21 = (void **)v30[0];
  printf("  Global pose:         %s\n", (const char *)v21);
  printf("  Length:              %5.2f\n", v12);
  if (v15)
  {
    v22 = vsubq_f32(v26, v27);
    v23 = vmulq_f32(v22, v22);
    v24 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v23, 2), vaddq_f32(v23, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v23.f32, 1))).f32[0]);
    if (v29 >= 0)
      v25 = __p;
    else
      v25 = (void **)__p[0];
    printf("  Input  position:     %s\n", (const char *)v25);
    printf("  Distance from input: %5.2f\n", v24);
  }
  if (v19 > 0.1)
  {
    printf("  Input  length:       %5.2f\n", v17);
    printf("  Length difference from input: %5.2f\n", v18);
  }
  if (v29 < 0)
    operator delete(__p[0]);
  if (v31 < 0)
    operator delete(v30[0]);
  if (v33 < 0)
    operator delete(v32[0]);
}

float32x4_t FIK::dbgQuatToAxes(int32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4)
{
  float32x4_t v8;
  int8x16_t v9;
  float32x4_t v10;
  int32x4_t v11;
  float32x4_t v12;
  int32x4_t v13;
  float32x4_t v14;
  float32x4_t result;
  float32x4_t v16;
  int32x4_t v17;
  float32x4_t v18;
  int32x4_t v19;
  float32x4_t v20;
  int32x4_t v21;
  float32x4_t v22;
  int32x4_t v23;
  uint64_t *v24;

  v8 = *(float32x4_t *)a1;
  v9 = (int8x16_t)vmulq_f32(v8, v8);
  if (fabsf(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)))) + -1.0) >= 0.00001)
  {
    v24 = ikinemaLogObject();
    ikinemaAssertHandler(*v24, 0, (uint64_t)"dbgQuatToAxes", "(quat.isNormalised()) Quaternion must be normalized");
    v8 = *(float32x4_t *)a1;
  }
  v10 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v8, (int32x4_t)v8), (int8x16_t)v8, 0xCuLL);
  v11 = (int32x4_t)vmlaq_f32(vmulq_f32(v8, (float32x4_t)xmmword_210802BD0), (float32x4_t)xmmword_210802C40, v10);
  v12 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v11, v11), (int8x16_t)v11, 0xCuLL);
  v13 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v12, (int32x4_t)v12), (int8x16_t)v12, 0xCuLL), vnegq_f32(v8)), v12, v10);
  v14 = vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v13, v13), (int8x16_t)v13, 0xCuLL), v12, v8, 3);
  result.i64[0] = 0x4000000040000000;
  result.i64[1] = 0x4000000040000000;
  *a2 = vmlaq_f32((float32x4_t)xmmword_210802C40, result, v14);
  v16 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*a1, *a1), *(int8x16_t *)a1, 0xCuLL);
  v17 = (int32x4_t)vmlaq_f32(vmulq_f32(*(float32x4_t *)a1, (float32x4_t)xmmword_210802C30), (float32x4_t)xmmword_210802BC0, v16);
  v18 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v17, v17), (int8x16_t)v17, 0xCuLL);
  v19 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v18, (int32x4_t)v18), (int8x16_t)v18, 0xCuLL), vnegq_f32(*(float32x4_t *)a1)), v18, v16);
  *a3 = vmlaq_f32((float32x4_t)xmmword_210802BC0, result, vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v19, v19), (int8x16_t)v19, 0xCuLL), v18, *(float32x4_t *)a1, 3));
  v20 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*a1, *a1), *(int8x16_t *)a1, 0xCuLL);
  v21 = (int32x4_t)vmlaq_f32(vmulq_f32(*(float32x4_t *)a1, (float32x4_t)xmmword_210802BB0), (float32x4_t)xmmword_210802BE0, v20);
  v22 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v21, v21), (int8x16_t)v21, 0xCuLL);
  v23 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v22, (int32x4_t)v22), (int8x16_t)v22, 0xCuLL), vnegq_f32(*(float32x4_t *)a1)), v22, v20);
  *a4 = vmlaq_f32((float32x4_t)xmmword_210802BE0, result, vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v23, v23), (int8x16_t)v23, 0xCuLL), v22, *(float32x4_t *)a1, 3));
  return result;
}

_QWORD *FIK::IKArray<FIK::Transform>::IKArray(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  _OWORD *v7;
  uint64_t v8;
  _OWORD *v9;

  v4 = a2[1];
  v5 = a2[3];
  *a1 = *a2;
  a1[1] = v4;
  if (v4)
  {
    v6 = 32 * v4;
    v7 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, 32 * v4, 16);
    a1[2] = v7;
    a1[3] = v5;
    if (v6)
    {
      bzero(v7, v6);
      v7 = (_OWORD *)a1[2];
    }
  }
  else
  {
    v7 = 0;
    a1[2] = 0;
    a1[3] = v5;
  }
  v8 = *a2;
  if (*a2)
  {
    v9 = (_OWORD *)a2[2];
    do
    {
      *v7 = *v9;
      v7[1] = v9[1];
      v7 += 2;
      v9 += 2;
      --v8;
    }
    while (v8);
  }
  return a1;
}

_QWORD *FIK::IKArray<int>::IKArray(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  _DWORD *v7;
  uint64_t v8;
  int *v9;
  int v10;

  v4 = a2[1];
  v5 = a2[3];
  *a1 = *a2;
  a1[1] = v4;
  if (v4)
  {
    v6 = 4 * v4;
    v7 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, 4 * v4, 4);
    a1[2] = v7;
    a1[3] = v5;
    if (v6)
    {
      bzero(v7, v6);
      v7 = (_DWORD *)a1[2];
    }
  }
  else
  {
    v7 = 0;
    a1[2] = 0;
    a1[3] = v5;
  }
  v8 = *a2;
  if (*a2)
  {
    v9 = (int *)a2[2];
    do
    {
      v10 = *v9++;
      *v7++ = v10;
      --v8;
    }
    while (v8);
  }
  return a1;
}

uint64_t std::__throw_bad_optional_access[abi:nn180100]()
{
  std::__libcpp_verbose_abort("bad_optional_access was thrown in -fno-exceptions mode");
  return FIK::IKArray<FIK::EnrollmentPoseSolverV4::TargetJointData>::IKArray<FIK::EnrollmentPoseSolverV4::TargetJointData,void>();
}

_QWORD *FIK::IKArray<FIK::EnrollmentPoseSolverV4::TargetJointData>::IKArray<FIK::EnrollmentPoseSolverV4::TargetJointData,void>(_QWORD *a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  size_t v9;
  _QWORD *v10;
  uint64_t v11;
  __int128 v12;

  v8 = (a3 + 7) & 0xFFFFFFFFFFFFFFF8;
  *a1 = a3;
  a1[1] = v8;
  if (!v8)
  {
    v10 = 0;
    a1[2] = 0;
    a1[3] = a4;
    if (!a3)
      return a1;
    goto LABEL_7;
  }
  v9 = 24 * v8;
  v10 = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a4 + 16))(a4, 24 * v8, 8);
  a1[2] = v10;
  a1[3] = a4;
  if (v9)
  {
    bzero(v10, v9);
    v10 = (_QWORD *)a1[2];
  }
  if (a3)
  {
LABEL_7:
    v11 = 24 * a3;
    do
    {
      v12 = *a2;
      v10[2] = *((_QWORD *)a2 + 2);
      *(_OWORD *)v10 = v12;
      v10 += 3;
      a2 = (__int128 *)((char *)a2 + 24);
      v11 -= 24;
    }
    while (v11);
  }
  return a1;
}

uint64_t *FIK::IKArray<FIK::Transform>::resize(uint64_t *result, unint64_t a2, _OWORD *a3)
{
  uint64_t *v4;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;

  v4 = result;
  if (*result <= a2)
  {
    result = FIK::IKArray<FIK::Transform>::reserve(result, a2);
    v6 = *v4;
    if (a2 != *v4)
    {
      v7 = (_OWORD *)(v4[2] + 32 * v6);
      v8 = v6 - a2;
      do
      {
        *v7 = *a3;
        v7[1] = a3[1];
        v7 += 2;
      }
      while (!__CFADD__(v8++, 1));
    }
  }
  *v4 = a2;
  return result;
}

_QWORD *_ZN3FIK7IKArrayIDv3_fE7reserveEm(_QWORD *result, unint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;

  if (result[1] < a2)
  {
    v2 = result;
    v3 = result[3];
    v4 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v4)
    {
      v5 = (void *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)v3 + 16))(result[3], 16 * v4, 16);
      v6 = v5;
      if (16 * v4)
        bzero(v5, 16 * v4);
    }
    else
    {
      v6 = 0;
    }
    memcpy(v6, (const void *)v2[2], 16 * *v2);
    v7 = v2[2];
    result = (_QWORD *)v2[3];
    v2[1] = v4;
    v2[2] = v6;
    v2[3] = v3;
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, _QWORD, uint64_t))(*result + 24))(result, v7, 0, 8);
  }
  return result;
}

uint64_t *FIK::IKArray<FIK::EnrollmentPoseSolverV4::RigJointInputData>::resize(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = result;
  if (*result <= a2)
  {
    result = FIK::IKArray<FIK::EnrollmentPoseSolverV4::RigJointInputData>::reserve(result, a2);
    v6 = *v4;
    if (a2 != *v4)
    {
      v7 = v4[2] + 48 * v6 + 16;
      v8 = v6 - a2;
      do
      {
        *(_BYTE *)(v7 - 16) = 0;
        *(_BYTE *)v7 = 0;
        if (*(_BYTE *)(a3 + 16))
        {
          *(_OWORD *)(v7 - 16) = *(_OWORD *)a3;
          *(_BYTE *)v7 = 1;
        }
        *(_DWORD *)(v7 + 16) = *(_DWORD *)(a3 + 32);
        v7 += 48;
      }
      while (!__CFADD__(v8++, 1));
    }
  }
  *v4 = a2;
  return result;
}

uint64_t *FIK::IKArray<FIK::EnrollmentPoseSolverV4::RigJointInputData>::reserve(uint64_t *result, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _DWORD *v10;
  int v11;

  if (result[1] < a2)
  {
    v2 = result;
    v3 = result[3];
    v4 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v4)
    {
      v5 = (char *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v3 + 16))(result[3], 48 * v4, 16);
      v6 = v5;
      if (48 * v4)
        bzero(v5, 48 * v4);
    }
    else
    {
      v6 = 0;
    }
    v7 = v2[2];
    v8 = *v2;
    if (*v2)
    {
      v9 = v6 + 16;
      v10 = (_DWORD *)(v7 + 32);
      do
      {
        *(v9 - 16) = 0;
        *v9 = 0;
        if (*((_BYTE *)v10 - 16))
        {
          *((_OWORD *)v9 - 1) = *((_OWORD *)v10 - 2);
          *v9 = 1;
        }
        v11 = *v10;
        v10 += 12;
        *((_DWORD *)v9 + 4) = v11;
        v9 += 48;
        --v8;
      }
      while (v8);
      v7 = v2[2];
    }
    result = (uint64_t *)v2[3];
    v2[1] = v4;
    v2[2] = (uint64_t)v6;
    v2[3] = v3;
    if (v7)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t, _QWORD, uint64_t))(*result + 24))(result, v7, 0, 8);
  }
  return result;
}

uint64_t FIK::IKRigUtils::getGlobalRestTransformSlow<FIK::MoCapBone>@<X0>(uint64_t result@<X0>, int a2@<W1>, float32x4_t *a3@<X8>)
{
  uint64_t v3;
  float32x4_t *v4;
  float32x4_t v5;
  uint64_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t *v9;
  int32x4_t v10;
  int8x16_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  int32x4_t v17;
  float32x4_t v18;
  int32x4_t v19;

  v3 = *(_QWORD *)(result + 16);
  v4 = (float32x4_t *)(v3 + 544 * a2);
  v5 = v4[5];
  *a3 = v4[4];
  v6 = v4->u32[1];
  if ((v6 & 0x80000000) == 0)
  {
    v7 = *a3;
    v8.i64[0] = 0x4000000040000000;
    v8.i64[1] = 0x4000000040000000;
    do
    {
      v9 = (float32x4_t *)(v3 + 544 * v6);
      v10 = (int32x4_t)vnegq_f32(v5);
      v11 = (int8x16_t)vtrn2q_s32((int32x4_t)v5, vtrn1q_s32((int32x4_t)v5, v10));
      v12 = v9[5];
      v13 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v5, (int8x16_t)v10, 8uLL), *(float32x2_t *)v12.f32, 1), (float32x4_t)vextq_s8(v11, v11, 8uLL), v12.f32[0]);
      v14 = (float32x4_t)vrev64q_s32((int32x4_t)v5);
      v14.i32[0] = v10.i32[1];
      v14.i32[3] = v10.i32[2];
      v5 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v5, v12, 3), v14, v12, 2), v13);
      v15 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v12, (int32x4_t)v12), (int8x16_t)v12, 0xCuLL);
      v16 = vnegq_f32(v12);
      v17 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v7, (int32x4_t)v7), (int8x16_t)v7, 0xCuLL), v16), v7, v15);
      v18 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v17, v17), (int8x16_t)v17, 0xCuLL);
      v19 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v18, (int32x4_t)v18), (int8x16_t)v18, 0xCuLL), v16), v18, v15);
      v7 = vaddq_f32(v9[4], vmlaq_f32(v7, v8, vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v19, v19), (int8x16_t)v19, 0xCuLL), v18, v12, 3)));
      v6 = v9->u32[1];
    }
    while ((v6 & 0x80000000) == 0);
    *a3 = v7;
  }
  a3[1] = v5;
  return result;
}

_QWORD *FIK::IKArray<FIK::Vector>::IKArray(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  _OWORD *v7;
  uint64_t v8;
  __int128 *v9;
  __int128 v10;

  v4 = a2[1];
  v5 = a2[3];
  *a1 = *a2;
  a1[1] = v4;
  if (v4)
  {
    v6 = 16 * v4;
    v7 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, 16 * v4, 16);
    a1[2] = v7;
    a1[3] = v5;
    if (v6)
    {
      bzero(v7, v6);
      v7 = (_OWORD *)a1[2];
    }
  }
  else
  {
    v7 = 0;
    a1[2] = 0;
    a1[3] = v5;
  }
  v8 = *a2;
  if (*a2)
  {
    v9 = (__int128 *)a2[2];
    do
    {
      v10 = *v9++;
      *v7++ = v10;
      --v8;
    }
    while (v8);
  }
  return a1;
}

uint64_t ikinema::GenerateMocapConstraintTargetsAlgorithmImpl::process(float32x4_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  ikinema::ConstraintCollection *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t GlobalOf;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  int32x4_t v23;
  int8x16_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  int32x4_t v30;
  float32x4_t v31;
  int32x4_t v32;
  uint64_t v33;
  float32x4_t v34;
  int32x4_t v35;
  int8x16_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  int32x4_t v41;
  float32x4_t v42;
  int32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  uint64_t v47;
  float32x4_t v48;
  float32x4_t v49;

  v6 = ikinema::BufferContainer::buffer(a3, a1[10].i64[1]);
  v7 = ikinema::Buffer::arrayView<FIK::Transform>(v6);
  v9 = v8;
  v10 = ikinema::BufferContainer::buffer(a3, a1[11].i64[0]);
  v11 = (_OWORD *)ikinema::Buffer::arrayView<FIK::Transform>(v10);
  v12 = (ikinema::ConstraintCollection *)(a2 + 8);
  v13 = ikinema::ConstraintCollection::elementCount(v12);
  if (a1[3].i8[0])
    ikinema::SourceFKCompute::resetFkState(&a1[5].i64[1], v7, v9);
  v47 = v7;
  if (v13)
  {
    v14 = 0;
    for (i = 0; i != v13; ++i)
    {
      v16 = a1[4].i64[1];
      v17 = *(_QWORD *)(v16 + v14);
      if (v17 == -1)
      {
        *v11 = 0u;
        v20 = (float32x4_t)xmmword_210802BA0;
      }
      else
      {
        v18 = ikinema::ConstraintCollection::element(v12);
        if (a1[3].i8[0])
          GlobalOf = ikinema::SourceFKCompute::getGlobalOf((ikinema::SourceFKCompute *)&a1[5].u32[2], v17);
        else
          GlobalOf = v47 + 32 * v17;
        v21.i64[0] = 0x4000000040000000;
        v21.i64[1] = 0x4000000040000000;
        v22 = *(float32x4_t *)(GlobalOf + 16);
        v23 = (int32x4_t)vnegq_f32(v22);
        v24 = (int8x16_t)vtrn2q_s32((int32x4_t)v22, vtrn1q_s32((int32x4_t)v22, v23));
        v25 = a1[2];
        v26 = (float32x4_t)vrev64q_s32((int32x4_t)v22);
        v26.i32[0] = v23.i32[1];
        v26.i32[3] = v23.i32[2];
        v27 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v22, v25, 3), v26, v25, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v22, (int8x16_t)v23, 8uLL), *(float32x2_t *)v25.f32, 1), (float32x4_t)vextq_s8(v24, v24, 8uLL), v25.f32[0]));
        v28 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v25, (int32x4_t)v25), (int8x16_t)v25, 0xCuLL);
        v29 = vnegq_f32(v25);
        v30 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)GlobalOf, *(int32x4_t *)GlobalOf), *(int8x16_t *)GlobalOf, 0xCuLL), v29), *(float32x4_t *)GlobalOf, v28);
        v31 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v30, v30), (int8x16_t)v30, 0xCuLL);
        v32 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v31, (int32x4_t)v31), (int8x16_t)v31, 0xCuLL), v29), v31, v28);
        v48 = vaddq_f32(a1[1], vmlaq_f32(*(float32x4_t *)GlobalOf, v21, vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v32, v32), (int8x16_t)v32, 0xCuLL), v31, v25, 3)));
        v49 = v27;
        v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 32))(v18);
        v34 = *(float32x4_t *)(v33 + 16);
        v35 = (int32x4_t)vnegq_f32(v34);
        v36 = (int8x16_t)vtrn2q_s32((int32x4_t)v34, vtrn1q_s32((int32x4_t)v34, v35));
        v37 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v34, (int8x16_t)v35, 8uLL), *(float32x2_t *)v49.f32, 1), (float32x4_t)vextq_s8(v36, v36, 8uLL), v49.f32[0]);
        v38 = (float32x4_t)vrev64q_s32((int32x4_t)v34);
        v38.i32[0] = v35.i32[1];
        v38.i32[3] = v35.i32[2];
        v20 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v34, v49, 3), v38, v49, 2), v37);
        if (*(_BYTE *)(v16 + v14 + 8))
        {
          v39 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v49, (int32x4_t)v49), (int8x16_t)v49, 0xCuLL);
          v40 = vnegq_f32(v49);
          v41 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)v33, *(int32x4_t *)v33), *(int8x16_t *)v33, 0xCuLL), v40), *(float32x4_t *)v33, v39);
          v42 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v41, v41), (int8x16_t)v41, 0xCuLL);
          v43 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v42, (int32x4_t)v42), (int8x16_t)v42, 0xCuLL), v40), v42, v39);
          v44 = vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v43, v43), (int8x16_t)v43, 0xCuLL), v42, v49, 3);
          v42.i64[0] = 0x4000000040000000;
          v42.i64[1] = 0x4000000040000000;
          v45 = vmlaq_f32(*(float32x4_t *)v33, v42, v44);
        }
        else
        {
          v45 = *(float32x4_t *)v33;
        }
        *v11 = vaddq_f32(v48, v45);
      }
      v11[1] = v20;
      v11 += 2;
      v14 += 16;
    }
  }
  return 0;
}

uint64_t *ikinema::SourceFKCompute::resetFkState(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;

  result[8] = a2;
  result[9] = a3;
  v3 = *result;
  if (*result)
  {
    v4 = 0;
    v5 = 0;
    v6 = (_OWORD *)(a2 + 16);
    do
    {
      if (*(_QWORD *)(result[2] + 8 * v5) == -1)
      {
        v8 = result[6] + v4;
        if (*(_BYTE *)(v8 + 32))
        {
          *(_OWORD *)v8 = *(v6 - 1);
          *(_OWORD *)(v8 + 16) = *v6;
        }
        else
        {
          *(_OWORD *)v8 = *(v6 - 1);
          *(_OWORD *)(v8 + 16) = *v6;
          *(_BYTE *)(v8 + 32) = 1;
        }
      }
      else
      {
        v7 = result[6] + v4;
        if (*(_BYTE *)(v7 + 32))
          *(_BYTE *)(v7 + 32) = 0;
      }
      ++v5;
      v6 += 2;
      v4 += 48;
    }
    while (v3 != v5);
  }
  return result;
}

uint64_t ikinema::SourceFKCompute::getGlobalOf(ikinema::SourceFKCompute *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t GlobalOf;
  uint64_t v6;
  float32x4_t v7;
  int32x4_t v8;
  int8x16_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  int32x4_t v16;
  float32x4_t v17;
  int32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;

  v2 = *((_QWORD *)this + 6) + 48 * a2;
  if (!*(_BYTE *)(v2 + 32))
  {
    GlobalOf = ikinema::SourceFKCompute::getGlobalOf(this, *(_QWORD *)(*((_QWORD *)this + 2) + 8 * a2));
    v6 = *((_QWORD *)this + 8) + 32 * a2;
    v7 = *(float32x4_t *)(v6 + 16);
    v8 = (int32x4_t)vnegq_f32(v7);
    v9 = (int8x16_t)vtrn2q_s32((int32x4_t)v7, vtrn1q_s32((int32x4_t)v7, v8));
    v10 = *(float32x4_t *)(GlobalOf + 16);
    v11 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v7, (int8x16_t)v8, 8uLL), *(float32x2_t *)v10.f32, 1), (float32x4_t)vextq_s8(v9, v9, 8uLL), v10.f32[0]);
    v12 = (float32x4_t)vrev64q_s32((int32x4_t)v7);
    v12.i32[0] = v8.i32[1];
    v12.i32[3] = v8.i32[2];
    v13 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v7, v10, 3), v12, v10, 2), v11);
    v14 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v10, (int32x4_t)v10), (int8x16_t)v10, 0xCuLL);
    v15 = vnegq_f32(v10);
    v16 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)v6, *(int32x4_t *)v6), *(int8x16_t *)v6, 0xCuLL), v15), *(float32x4_t *)v6, v14);
    v17 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v16, v16), (int8x16_t)v16, 0xCuLL);
    v18 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v17, (int32x4_t)v17), (int8x16_t)v17, 0xCuLL), v15), v17, v14);
    v19 = vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v18, v18), (int8x16_t)v18, 0xCuLL), v17, v10, 3);
    v17.i64[0] = 0x4000000040000000;
    v17.i64[1] = 0x4000000040000000;
    v20 = vmlaq_f32(*(float32x4_t *)v6, v17, v19);
    LODWORD(v6) = *(unsigned __int8 *)(v2 + 32);
    *(float32x4_t *)v2 = vaddq_f32(*(float32x4_t *)GlobalOf, v20);
    *(float32x4_t *)(v2 + 16) = v13;
    if (!(_DWORD)v6)
      *(_BYTE *)(v2 + 32) = 1;
  }
  return v2;
}

uint64_t ikinema::GenerateMocapConstraintTargetsAlgorithmImpl::registerBuffers(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;

  v2 = *a2;
  if (!*a2)
    return 1;
  v3 = a2[2];
  v4 = 72 * v2;
  v5 = (uint64_t *)(v3 + 56);
  while (1)
  {
    v6 = *v5;
    v5 += 9;
    if (v6 == *(_QWORD *)(a1 + 168))
      break;
    v4 -= 72;
    if (!v4)
      return 1;
  }
  v7 = 72 * v2;
  v8 = (uint64_t *)(v3 + 56);
  while (1)
  {
    v9 = *v8;
    v8 += 9;
    if (v9 == *(_QWORD *)(a1 + 176))
      break;
    v7 -= 72;
    if (!v7)
      return 1;
  }
  return 0;
}

uint64_t ikinema::GenerateMocapConstraintTargetsAlgorithmImpl::GenerateMocapConstraintTargetsAlgorithmImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (***v8)(FIK::CrtAllocator *__hidden);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  *(_QWORD *)a1 = &off_24CA6C970;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 288);
  *(_BYTE *)(a1 + 48) = 1;
  *(_QWORD *)a1 = &off_24CA6C9B8;
  v8 = FIK::defaultAllocator((FIK *)a1);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = v8;
  ikinema::SourceFKCompute::SourceFKCompute((uint64_t *)(a1 + 88), a2);
  *(_QWORD *)(a1 + 168) = a3;
  *(_QWORD *)(a1 + 176) = a4;
  FIK::IKArray<std::string_view>::reserve((_QWORD *)(a1 + 56), *(_QWORD *)(a2 + 176));
  v9 = *(_QWORD *)(a2 + 176);
  if (v9)
  {
    v10 = *(_QWORD *)(a1 + 56);
    v11 = (char *)(*(_QWORD *)(a2 + 192) + 204);
    v12 = v9 << 8;
    do
    {
      v13 = *((int *)v11 - 1);
      v14 = *v11;
      FIK::IKArray<std::string_view>::reserve((_QWORD *)(a1 + 56), v10 + 1);
      v15 = *(_QWORD *)(a1 + 72) + 16 * *(_QWORD *)(a1 + 56);
      *(_QWORD *)v15 = v13;
      *(_BYTE *)(v15 + 8) = v14;
      v10 = *(_QWORD *)(a1 + 56) + 1;
      *(_QWORD *)(a1 + 56) = v10;
      v11 += 256;
      v12 -= 256;
    }
    while (v12);
  }
  return a1;
}

uint64_t ikinema::GenerateMocapConstraintTargetsAlgorithm::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a3;
  v6 = a2;
  return ikinema::AlgorithmHandle::make<ikinema::GenerateMocapConstraintTargetsAlgorithmImpl,FIK::MoCapRig const&,ikinema::BufferKey &,ikinema::BufferKey &>(a1, &v6, &v5, a4);
}

uint64_t ikinema::AlgorithmHandle::make<ikinema::GenerateMocapConstraintTargetsAlgorithmImpl,FIK::MoCapRig const&,ikinema::BufferKey &,ikinema::BufferKey &>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result;

  result = (uint64_t)FIK::FIKAlloc((FIK *)0xC0);
  if (result)
    result = ikinema::GenerateMocapConstraintTargetsAlgorithmImpl::GenerateMocapConstraintTargetsAlgorithmImpl(result, a1, *a2, *a3);
  *a4 = result;
  return result;
}

const char *ikinema::AlgorithmBlockBase<ikinema::GenerateMocapConstraintTargetsAlgorithm>::typeId()
{
  const char *result;
  unsigned __int8 *v1;
  uint64_t v2;
  unsigned int v3;

  result = "N7ikinema39GenerateMocapConstraintTargetsAlgorithmE";
  if (((unint64_t)"N7ikinema39GenerateMocapConstraintTargetsAlgorithmE" & 0x8000000000000000) != 0)
  {
    v1 = (unsigned __int8 *)((unint64_t)"N7ikinema39GenerateMocapConstraintTargetsAlgorithmE" & 0x7FFFFFFFFFFFFFFFLL);
    v2 = 5381;
    do
    {
      result = (const char *)v2;
      v3 = *v1++;
      v2 = (33 * v2) ^ v3;
    }
    while (v3);
  }
  return result;
}

void ikinema::GenerateMocapConstraintTargetsAlgorithmImpl::~GenerateMocapConstraintTargetsAlgorithmImpl(ikinema::GenerateMocapConstraintTargetsAlgorithmImpl *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *((_QWORD *)this + 15) = 0;
  v2 = *((_QWORD *)this + 17);
  if (v2)
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)this + 18) + 24))(*((_QWORD *)this + 18), v2, 0, 8);
  *((_QWORD *)this + 11) = 0;
  v3 = *((_QWORD *)this + 13);
  if (v3)
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)this + 14) + 24))(*((_QWORD *)this + 14), v3, 0, 8);
  *((_QWORD *)this + 7) = 0;
  v4 = *((_QWORD *)this + 9);
  if (v4)
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)this + 10) + 24))(*((_QWORD *)this + 10), v4, 0, 8);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *((_QWORD *)this + 15) = 0;
  v2 = *((_QWORD *)this + 17);
  if (v2)
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)this + 18) + 24))(*((_QWORD *)this + 18), v2, 0, 8);
  *((_QWORD *)this + 11) = 0;
  v3 = *((_QWORD *)this + 13);
  if (v3)
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)this + 14) + 24))(*((_QWORD *)this + 14), v3, 0, 8);
  *((_QWORD *)this + 7) = 0;
  v4 = *((_QWORD *)this + 9);
  if (v4)
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)this + 10) + 24))(*((_QWORD *)this + 10), v4, 0, 8);
  JUMPOUT(0x212BCAFB4);
}

uint64_t ikinema::GenerateMocapConstraintTargetsAlgorithm::isRemovable(ikinema::GenerateMocapConstraintTargetsAlgorithm *this)
{
  return 0;
}

const char *ikinema::GenerateMocapConstraintTargetsAlgorithmImpl::name(ikinema::GenerateMocapConstraintTargetsAlgorithmImpl *this)
{
  return "GenerateMocapTargets";
}

uint64_t *ikinema::SourceFKCompute::SourceFKCompute(uint64_t *a1, uint64_t a2)
{
  void (***v4)(FIK::CrtAllocator *__hidden);
  void (***v5)(FIK::CrtAllocator *__hidden);
  unint64_t v6;
  _QWORD *v7;
  int *v8;
  uint64_t v9;
  _BYTE v11[56];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v4 = FIK::defaultAllocator((FIK *)a1);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = (uint64_t)v4;
  v5 = FIK::defaultAllocator((FIK *)v4);
  a1[5] = 0;
  a1[6] = 0;
  a1[4] = 0;
  a1[8] = 0;
  a1[9] = 0;
  a1[7] = (uint64_t)v5;
  v6 = *(_QWORD *)(a2 + 240);
  FIK::IKArray<unsigned long>::resize((unint64_t *)a1, v6, &ikinema::kInvalidIndex);
  v11[0] = 0;
  v11[32] = 0;
  FIK::IKArray<std::optional<FIK::Transform>>::resize(a1 + 4, v6, (uint64_t)v11);
  if (v6)
  {
    v7 = (_QWORD *)a1[2];
    v8 = (int *)(*(_QWORD *)(a2 + 256) + 4);
    do
    {
      v9 = *v8;
      v8 += 24;
      *v7++ = v9;
      --v6;
    }
    while (v6);
  }
  return a1;
}

uint64_t *FIK::IKArray<std::optional<FIK::Transform>>::resize(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;

  v4 = result;
  if (*result <= a2)
  {
    result = FIK::IKArray<std::optional<FIK::Transform>>::reserve(result, a2);
    v6 = *v4;
    if (a2 != *v4)
    {
      v7 = (_BYTE *)(v4[2] + 48 * v6 + 32);
      v8 = v6 - a2;
      do
      {
        *(v7 - 32) = 0;
        *v7 = 0;
        if (*(_BYTE *)(a3 + 32))
        {
          *((_OWORD *)v7 - 2) = *(_OWORD *)a3;
          *((_OWORD *)v7 - 1) = *(_OWORD *)(a3 + 16);
          *v7 = 1;
        }
        v7 += 48;
      }
      while (!__CFADD__(v8++, 1));
    }
  }
  *v4 = a2;
  return result;
}

uint64_t *FIK::IKArray<std::optional<FIK::Transform>>::reserve(uint64_t *result, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;

  if (result[1] < a2)
  {
    v2 = result;
    v3 = result[3];
    v4 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v4)
    {
      v5 = (char *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v3 + 16))(result[3], 48 * v4, 16);
      v6 = v5;
      if (48 * v4)
        bzero(v5, 48 * v4);
    }
    else
    {
      v6 = 0;
    }
    v7 = v2[2];
    v8 = *v2;
    if (*v2)
    {
      v9 = v6 + 32;
      v10 = v7 + 16;
      do
      {
        *(v9 - 32) = 0;
        *v9 = 0;
        if (*(_BYTE *)(v10 + 16))
        {
          *((_OWORD *)v9 - 2) = *(_OWORD *)(v10 - 16);
          *((_OWORD *)v9 - 1) = *(_OWORD *)v10;
          *v9 = 1;
        }
        v9 += 48;
        v10 += 48;
        --v8;
      }
      while (v8);
      v7 = v2[2];
    }
    result = (uint64_t *)v2[3];
    v2[1] = v4;
    v2[2] = (uint64_t)v6;
    v2[3] = v3;
    if (v7)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t, _QWORD, uint64_t))(*result + 24))(result, v7, 0, 8);
  }
  return result;
}

void *ikinema::Constraint::boneName(ikinema::Constraint *this)
{
  char *v1;
  uint64_t v2;

  v1 = (char *)*((_QWORD *)this + 1);
  if (!v1)
  {
    v1 = (char *)*((_QWORD *)this + 2);
    if (!v1)
      return &unk_2108059BE;
  }
  v2 = (*(uint64_t (**)(char *))(*(_QWORD *)&v1[*(_QWORD *)(*(_QWORD *)v1 - 264)] + 200))(&v1[*(_QWORD *)(*(_QWORD *)v1 - 264)]);
  return (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 936))(v2);
}

__n128 ikinema::Constraint::getTarget@<Q0>(ikinema::Constraint *this@<X0>, __n128 *a2@<X8>)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __n128 *v7;
  __n128 result;
  __int128 v9;
  __n128 v10;

  v4 = *((_QWORD *)this + 2);
  if (v4)
    v5 = *(_OWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 272))(v4);
  else
    v5 = xmmword_210802BA0;
  v6 = *((_QWORD *)this + 1);
  if (v6)
  {
    v9 = v5;
    v7 = (__n128 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 264))(v6);
    v5 = v9;
    v10 = *v7;
  }
  else
  {
    v10 = 0uLL;
  }
  result = v10;
  *a2 = v10;
  a2[1] = (__n128)v5;
  return result;
}

uint64_t FIK::Hierarchy::indexOf(uint64_t *a1, void *__s1, size_t __n)
{
  uint64_t v3;
  uint64_t v6;
  _QWORD *i;
  const void *v8;

  v3 = *a1;
  if (!*a1)
    return -1;
  v6 = 0;
  for (i = (_QWORD *)(a1[2] + 8); ; i += 16)
  {
    v8 = *i ? (const void *)*(i - 1) : &unk_2108059BE;
    if (__n == *i && !memcmp(__s1, v8, __n))
      break;
    if (v3 == ++v6)
      return -1;
  }
  return v6;
}

_QWORD *FIK::Hierarchy::getParentInternal(uint64_t *a1, void *a2, size_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  const void *v12;

  v4 = FIK::Hierarchy::indexOf(a1, a2, a3);
  v5 = (_QWORD *)a1[2];
  if (v4 == -1)
    v6 = 0;
  else
    v6 = &v5[16 * v4];
  v7 = *a1;
  if (!*a1)
    return 0;
  v8 = v6[4];
  v9 = v7 << 7;
  while (1)
  {
    v10 = v8 ? (const void *)v6[3] : &unk_2108059BE;
    v11 = v5[1];
    v12 = v11 ? (const void *)*v5 : &unk_2108059BE;
    if (v11 == v8 && !memcmp(v12, v10, v8))
      break;
    v5 += 16;
    v9 -= 128;
    if (!v9)
      return 0;
  }
  return v5;
}

uint64_t FIK::Hierarchy::getChildrenInternal@<X0>(FIK *a1@<X0>, const void *a2@<X1>, size_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = (uint64_t)FIK::defaultAllocator(a1);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  a4[3] = result;
  v9 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v10 = 0;
    v11 = *((_QWORD *)a1 + 2);
    v12 = v9 << 7;
    do
    {
      v13 = *(_QWORD *)(v11 + 32);
      if (v13)
        result = *(_QWORD *)(v11 + 24);
      else
        result = (uint64_t)&unk_2108059BE;
      if (v13 == a3)
      {
        result = memcmp((const void *)result, a2, a3);
        if (!(_DWORD)result)
        {
          result = (uint64_t)FIK::IKArray<FIK::Segment *>::reserve(a4, v10 + 1);
          v14 = *a4;
          *(_QWORD *)(a4[2] + 8 * *a4) = v11;
          v10 = v14 + 1;
          *a4 = v14 + 1;
        }
      }
      v11 += 128;
      v12 -= 128;
    }
    while (v12);
  }
  return result;
}

uint64_t *FIK::Hierarchy::setupJointsInternal(uint64_t *this)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  const void *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  if (*this)
  {
    v1 = this;
    v2 = 0;
    v3 = 0;
    do
    {
      v4 = v1[2];
      v5 = v4 + v2;
      *(_QWORD *)(v4 + v2 + 120) = v3;
      v6 = *(_QWORD *)(v4 + v2 + 8);
      if (v6)
      {
        *(_QWORD *)(v5 + 80) = FIK::Hierarchy::getParentInternal(v1, *(void **)v5, *(_QWORD *)(v4 + v2 + 8));
        v7 = *(const void **)v5;
      }
      else
      {
        *(_QWORD *)(v5 + 80) = FIK::Hierarchy::getParentInternal(v1, &unk_2108059BE, 0);
        v7 = &unk_2108059BE;
      }
      FIK::Hierarchy::getChildrenInternal((FIK *)v1, v7, v6, (uint64_t *)&v8);
      this = FIK::IKArray<unsigned int>::operator=((uint64_t *)(v4 + v2 + 88), &v8);
      *(_QWORD *)&v8 = 0;
      if (v9)
        this = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v10 + 24))(v10, v9, 0, 8);
      ++v3;
      v2 += 128;
    }
    while (v3 < *v1);
  }
  return this;
}

FIK *FIK::Hierarchy::Hierarchy(FIK *a1, _OWORD *a2, unint64_t a3)
{
  void (***v6)(FIK::CrtAllocator *__hidden);
  uint64_t v7;

  v6 = FIK::defaultAllocator(a1);
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  *((_QWORD *)a1 + 3) = v6;
  FIK::IKArray<FIK::Hierarchy::Joint>::reserve((uint64_t *)a1, a3);
  if (a3)
  {
    v7 = 80 * a3;
    do
    {
      FIK::IKArray<FIK::Hierarchy::Joint>::push_back<FIK::JointDefinition const&,void>((uint64_t *)a1, a2);
      a2 += 5;
      v7 -= 80;
    }
    while (v7);
  }
  FIK::Hierarchy::setupJointsInternal((uint64_t *)a1);
  return a1;
}

void FIK::IKArray<FIK::Hierarchy::Joint>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a1[1] < a2)
  {
    v3 = a1[3];
    v4 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v4)
    {
      v5 = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v3 + 16))(a1[3], v4 << 7, 16);
      v6 = (uint64_t)v5;
      if (v4 << 7)
        bzero(v5, v4 << 7);
    }
    else
    {
      v6 = 0;
    }
    v7 = FIK::IKArray<FIK::Hierarchy::Joint>::moveRange(a1[2], *a1, v6);
    v8 = a1[2];
    v9 = a1[3];
    a1[1] = v4;
    a1[2] = v6;
    a1[3] = v3;
    v10 = *a1;
    if (*a1)
    {
      v11 = v8;
      do
      {
        std::__destroy_at[abi:nn180100]<FIK::Hierarchy::Joint,0>(v11);
        v11 += 128;
        --v10;
      }
      while (v10);
    }
    if (v8)
      (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, __n128))(*(_QWORD *)v9 + 24))(v9, v8, 0, 8, v7);
  }
}

uint64_t FIK::IKArray<FIK::Hierarchy::Joint>::push_back<FIK::JointDefinition const&,void>(uint64_t *a1, _OWORD *a2)
{
  uint64_t result;

  FIK::IKArray<FIK::Hierarchy::Joint>::reserve(a1, *a1 + 1);
  result = FIK::Hierarchy::Joint::Joint(a1[2] + (*a1 << 7), a2);
  ++*a1;
  return result;
}

FIK::Hierarchy *FIK::Hierarchy::Hierarchy(FIK::Hierarchy *this, const FIK::Hierarchy *a2)
{
  uint64_t *v3;

  v3 = FIK::IKArray<FIK::Hierarchy::Joint>::IKArray(this, a2);
  FIK::Hierarchy::setupJointsInternal(v3);
  return this;
}

__n128 FIK::Hierarchy::Hierarchy(__n128 *a1, __n128 *a2)
{
  unint64_t v2;
  unint64_t v3;
  __n128 result;

  v2 = a2->n128_u64[0];
  a2->n128_u64[0] = 0;
  a1->n128_u64[0] = v2;
  v3 = a2->n128_u64[1];
  result = a2[1];
  a2->n128_u64[1] = 0;
  a1->n128_u64[1] = v3;
  a2[1].n128_u64[0] = 0;
  a1[1] = result;
  return result;
}

BOOL FIK::Hierarchy::containsJoint(uint64_t *a1, uint64_t a2)
{
  size_t v3;
  void *v4;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3)
    v4 = *(void **)a2;
  else
    v4 = &unk_2108059BE;
  return FIK::Hierarchy::indexOf(a1, v4, v3) != -1 && a1[2] != 0;
}

uint64_t FIK::Hierarchy::nameOf(FIK::Hierarchy *this, uint64_t a2)
{
  return *((_QWORD *)this + 2) + (a2 << 7);
}

__n128 FIK::Hierarchy::setLocalSpaceRestPose(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 16) + (a2 << 7);
  *(_OWORD *)(v3 + 48) = *(_OWORD *)a3;
  result = *(__n128 *)(a3 + 16);
  *(__n128 *)(v3 + 64) = result;
  return result;
}

uint64_t FIK::Hierarchy::localSpaceRestPose(FIK::Hierarchy *this, uint64_t a2)
{
  return *((_QWORD *)this + 2) + (a2 << 7) + 48;
}

uint64_t FIK::Hierarchy::parentIndexOf(FIK::Hierarchy *this, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*((_QWORD *)this + 2) + (a2 << 7) + 80);
  if (v2)
    return *(_QWORD *)(v2 + 120);
  else
    return 0;
}

void FIK::Hierarchy::ancestorsOf(uint64_t *a1@<X0>, void *a2@<X1>, size_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  FIK *v7;
  uint64_t v8;
  void (***v9)(FIK::CrtAllocator *__hidden);
  uint64_t v10;
  unint64_t i;
  IKString *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = FIK::Hierarchy::indexOf(a1, a2, a3);
  v7 = (FIK *)FIK::Hierarchy::ancestorIndicesOf((FIK::Hierarchy *)a1, v6, (uint64_t *)&v14);
  v8 = v14;
  v9 = FIK::defaultAllocator(v7);
  FIK::IKArray<IKString>::IKArray<IKString,void>(a4, v8, (uint64_t)v9);
  if (v14)
  {
    v10 = 0;
    for (i = 0; i < v14; ++i)
    {
      v12 = *(IKString **)(a1[2] + (*(_QWORD *)(v15 + 8 * i) << 7) + 8);
      if (v12)
        v13 = *(char **)(a1[2] + (*(_QWORD *)(v15 + 8 * i) << 7));
      else
        v13 = (char *)&unk_2108059BE;
      IKString::assign((_QWORD *)(a4[2] + v10), v13, v12);
      v10 += 24;
    }
  }
  v14 = 0;
  if (v15)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v16 + 24))(v16, v15, 0, 8);
}

_QWORD *FIK::Hierarchy::ancestorIndicesOf@<X0>(FIK::Hierarchy *this@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = FIK::defaultAllocator(this);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  a3[3] = (uint64_t)result;
  v7 = *(_QWORD *)(*((_QWORD *)this + 2) + (a2 << 7) + 80);
  if (v7)
  {
    v8 = 0;
    do
    {
      v9 = *(_QWORD *)(v7 + 120);
      result = FIK::IKArray<FIK::Segment *>::reserve(a3, v8 + 1);
      *(_QWORD *)(a3[2] + 8 * *a3) = v9;
      v8 = *a3 + 1;
      *a3 = v8;
      v7 = *(_QWORD *)(v7 + 80);
    }
    while (v7);
  }
  return result;
}

void FIK::Hierarchy::childrenOf(uint64_t *a1@<X0>, void *a2@<X1>, size_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  FIK *v7;
  void (***v8)(FIK::CrtAllocator *__hidden);
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;

  v6 = FIK::Hierarchy::indexOf(a1, a2, a3);
  v7 = (FIK *)FIK::Hierarchy::childIndicesOf((FIK::Hierarchy *)a1, v6, (uint64_t *)&v12);
  v8 = FIK::defaultAllocator(v7);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  a4[3] = v8;
  FIK::IKArray<IKString>::reserve((uint64_t)a4, v12);
  v9 = v13;
  if (v12)
  {
    v10 = 8 * v12;
    do
    {
      v11 = *v9++;
      FIK::IKArray<IKString>::push_back<IKString&,void>(a4, a1[2] + (v11 << 7));
      v10 -= 8;
    }
    while (v10);
    v9 = v13;
  }
  v12 = 0;
  if (v9)
    (*(void (**)(uint64_t, uint64_t *, _QWORD, uint64_t))(*(_QWORD *)v14 + 24))(v14, v9, 0, 8);
}

_QWORD *FIK::Hierarchy::childIndicesOf@<X0>(FIK::Hierarchy *this@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = FIK::defaultAllocator(this);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  a3[3] = (uint64_t)result;
  v7 = *((_QWORD *)this + 2) + (a2 << 7);
  v8 = *(_QWORD *)(v7 + 88);
  if (v8)
  {
    v9 = 0;
    v10 = *(uint64_t **)(v7 + 104);
    v11 = 8 * v8;
    do
    {
      v12 = *v10++;
      v13 = *(_QWORD *)(v12 + 120);
      result = FIK::IKArray<FIK::Segment *>::reserve(a3, v9 + 1);
      *(_QWORD *)(a3[2] + 8 * *a3) = v13;
      v9 = *a3 + 1;
      *a3 = v9;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t FIK::Hierarchy::childCountOf(FIK::Hierarchy *this, uint64_t a2)
{
  return *(_QWORD *)(*((_QWORD *)this + 2) + (a2 << 7) + 88);
}

void FIK::Hierarchy::descendentsOf(uint64_t *a1@<X0>, void *a2@<X1>, size_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  FIK *v7;
  uint64_t v8;
  void (***v9)(FIK::CrtAllocator *__hidden);
  uint64_t v10;
  unint64_t i;
  IKString *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = FIK::Hierarchy::indexOf(a1, a2, a3);
  v7 = (FIK *)FIK::Hierarchy::descendentIndicesOf((FIK::Hierarchy *)a1, v6, &v14);
  v8 = v14;
  v9 = FIK::defaultAllocator(v7);
  FIK::IKArray<IKString>::IKArray<IKString,void>(a4, v8, (uint64_t)v9);
  if (v14)
  {
    v10 = 0;
    for (i = 0; i < v14; ++i)
    {
      v12 = *(IKString **)(a1[2] + (*(_QWORD *)(v15 + 8 * i) << 7) + 8);
      if (v12)
        v13 = *(char **)(a1[2] + (*(_QWORD *)(v15 + 8 * i) << 7));
      else
        v13 = (char *)&unk_2108059BE;
      IKString::assign((_QWORD *)(a4[2] + v10), v13, v12);
      v10 += 24;
    }
  }
  v14 = 0;
  if (v15)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v16 + 24))(v16, v15, 0, 8);
}

uint64_t FIK::Hierarchy::descendentIndicesOf@<X0>(FIK::Hierarchy *this@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  FIK *v4;
  void (***v5)(FIK::CrtAllocator *__hidden);
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[2];
  __int128 v18;

  v18 = 0u;
  memset(v17, 0, sizeof(v17));
  v16 = *((_QWORD *)this + 2) + (a2 << 7);
  std::deque<FIK::Hierarchy::Joint const*>::push_back(v17, &v16);
  v5 = FIK::defaultAllocator(v4);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  a3[3] = v5;
  v6 = *((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v7 = v18;
    do
    {
      v8 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v17[0] + 1) + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF));
      v9 = *(_QWORD *)(v8 + 88);
      if (v9)
      {
        v10 = *(uint64_t **)(v8 + 104);
        v11 = 8 * v9;
        do
        {
          v15 = 0;
          v12 = *v10++;
          v15 = v12;
          std::deque<FIK::Hierarchy::Joint const*>::push_back(v17, &v15);
          v13 = *(_QWORD *)(v15 + 120);
          FIK::IKArray<FIK::Segment *>::reserve(a3, *a3 + 1);
          *(_QWORD *)(a3[2] + 8 * (*a3)++) = v13;
          v11 -= 8;
        }
        while (v11);
        v6 = *((_QWORD *)&v18 + 1);
        v7 = v18;
      }
      --v6;
      *(_QWORD *)&v18 = ++v7;
      *((_QWORD *)&v18 + 1) = v6;
      if (v7 >= 0x400)
      {
        operator delete(**((void ***)&v17[0] + 1));
        v7 = v18 - 512;
        *((_QWORD *)&v17[0] + 1) += 8;
        *(_QWORD *)&v18 = v18 - 512;
        v6 = *((_QWORD *)&v18 + 1);
      }
    }
    while (v6);
  }
  return std::deque<FIK::Hierarchy::Joint const*>::~deque[abi:nn180100](v17);
}

uint64_t FIK::Hierarchy::descendentsCountOf(FIK::Hierarchy *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  __int128 v14;

  v14 = 0u;
  memset(v13, 0, sizeof(v13));
  v12 = *((_QWORD *)this + 2) + (a2 << 7);
  std::deque<FIK::Hierarchy::Joint const*>::push_back(v13, &v12);
  v2 = *((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v3 = 0;
    v4 = v14;
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v13[0] + 1) + ((v4 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v4 & 0x1FF));
      v6 = *(_QWORD *)(v5 + 88);
      if (v6)
      {
        v7 = *(uint64_t **)(v5 + 104);
        v8 = 8 * v6;
        v3 += ((unint64_t)(8 * v6 - 8) >> 3) + 1;
        do
        {
          v11 = 0;
          v9 = *v7++;
          v11 = v9;
          std::deque<FIK::Hierarchy::Joint const*>::push_back(v13, &v11);
          v8 -= 8;
        }
        while (v8);
        v2 = *((_QWORD *)&v14 + 1);
        v4 = v14;
      }
      --v2;
      *(_QWORD *)&v14 = ++v4;
      *((_QWORD *)&v14 + 1) = v2;
      if (v4 >= 0x400)
      {
        operator delete(**((void ***)&v13[0] + 1));
        v4 = v14 - 512;
        *((_QWORD *)&v13[0] + 1) += 8;
        *(_QWORD *)&v14 = v14 - 512;
        v2 = *((_QWORD *)&v14 + 1);
      }
    }
    while (v2);
  }
  else
  {
    v3 = 0;
  }
  std::deque<FIK::Hierarchy::Joint const*>::~deque[abi:nn180100](v13);
  return v3;
}

_QWORD *FIK::Hierarchy::siblingIndicesOf@<X0>(FIK::Hierarchy *this@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  FIK *v6;
  _QWORD *result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;

  v4 = *(_QWORD *)(*((_QWORD *)this + 2) + (a2 << 7) + 80);
  if (v4)
  {
    v6 = (FIK *)FIK::Hierarchy::childIndicesOf(this, *(_QWORD *)(v4 + 120), &v13);
    result = FIK::defaultAllocator(v6);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    a3[3] = (uint64_t)result;
    v8 = v14;
    if (v13)
    {
      v9 = 0;
      v10 = 8 * v13;
      do
      {
        v11 = *v8;
        if (*v8 != a2)
        {
          result = FIK::IKArray<FIK::Segment *>::reserve(a3, v9 + 1);
          *(_QWORD *)(a3[2] + 8 * *a3) = v11;
          v9 = *a3 + 1;
          *a3 = v9;
        }
        ++v8;
        v10 -= 8;
      }
      while (v10);
      v8 = v14;
    }
    v13 = 0;
    if (v8)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *, _QWORD, uint64_t))(*(_QWORD *)v15 + 24))(v15, v8, 0, 8);
  }
  else
  {
    v12 = (_QWORD *)std::__throw_bad_optional_access[abi:nn180100]();
    return (_QWORD *)std::deque<FIK::Hierarchy::Joint const*>::~deque[abi:nn180100](v12);
  }
  return result;
}

uint64_t std::deque<FIK::Hierarchy::Joint const*>::~deque[abi:nn180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 256;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 512;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<FIK::Hierarchy::Joint const**>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<FIK::Hierarchy::Joint const**>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

__n128 FIK::IKArray<FIK::Hierarchy::Joint>::moveRange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 result;

  if (a2)
  {
    v4 = a2;
    v6 = 0;
    do
    {
      v7 = (uint64_t *)(a1 + v6);
      v8 = a3 + v6;
      IKString::IKString((uint64_t *)(a3 + v6), (uint64_t *)(a1 + v6), *(_QWORD *)(a1 + v6 + 16));
      IKString::IKString((uint64_t *)(a3 + v6 + 24), v7 + 3, v7[5]);
      *(_OWORD *)(v8 + 48) = *(_OWORD *)(a1 + v6 + 48);
      *(_OWORD *)(v8 + 64) = *(_OWORD *)(a1 + v6 + 64);
      v9 = *(_QWORD *)(a1 + v6 + 80);
      v10 = *(_QWORD *)(a1 + v6 + 88);
      v7[11] = 0;
      *(_QWORD *)(v8 + 80) = v9;
      *(_QWORD *)(v8 + 88) = v10;
      v11 = *(_QWORD *)(a1 + v6 + 96);
      result = *(__n128 *)(a1 + v6 + 104);
      v7[12] = 0;
      *(_QWORD *)(v8 + 96) = v11;
      v7[13] = 0;
      *(__n128 *)(v8 + 104) = result;
      *(_QWORD *)(v8 + 120) = *(_QWORD *)(a1 + v6 + 120);
      v6 += 128;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t std::__destroy_at[abi:nn180100]<FIK::Hierarchy::Joint,0>(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = result;
  *(_QWORD *)(result + 88) = 0;
  v2 = *(_QWORD *)(result + 104);
  if (v2)
    result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)(result + 112) + 24))(*(_QWORD *)(result + 112), v2, 0, 8);
  if (*(_QWORD *)(v1 + 32))
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(v1 + 40) + 24))(*(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 24), 0, 8);
    *(_QWORD *)(v1 + 24) = 0;
    *(_QWORD *)(v1 + 32) = 0;
  }
  if (*(_QWORD *)(v1 + 8))
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(v1 + 16) + 24))(*(_QWORD *)(v1 + 16), *(_QWORD *)v1, 0, 8);
    *(_QWORD *)v1 = 0;
    *(_QWORD *)(v1 + 8) = 0;
  }
  return result;
}

uint64_t FIK::Hierarchy::Joint::Joint(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  FIK *v5;
  void (***v6)(FIK::CrtAllocator *__hidden);

  IKString::IKString((IKString *)a1, (const IKString *)a2);
  IKString::IKString((IKString *)(v4 + 24), (const IKString *)((char *)a2 + 24));
  *(_OWORD *)(a1 + 48) = a2[3];
  *(_OWORD *)(a1 + 64) = a2[4];
  *(_QWORD *)(a1 + 80) = 0;
  v6 = FIK::defaultAllocator(v5);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = v6;
  *(_QWORD *)(a1 + 120) = -1;
  return a1;
}

_QWORD *FIK::IKArray<FIK::Hierarchy::Joint>::IKArray(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;

  v4 = a2[1];
  v5 = a2[3];
  *a1 = *a2;
  a1[1] = v4;
  if (v4)
  {
    v6 = v4 << 7;
    v7 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v4 << 7, 16);
    v8 = v7;
    a1[2] = v7;
    a1[3] = v5;
    if (v6)
    {
      bzero(v7, v6);
      v8 = (char *)a1[2];
    }
  }
  else
  {
    v8 = 0;
    a1[2] = 0;
    a1[3] = v5;
  }
  v9 = *a2;
  if (*a2)
  {
    v10 = 0;
    v11 = a2[2];
    do
    {
      v12 = &v8[v10];
      IKString::IKString((IKString *)&v8[v10], (const IKString *)(v11 + v10));
      IKString::IKString((IKString *)&v8[v10 + 24], (const IKString *)(v11 + v10 + 24));
      *((_OWORD *)v12 + 3) = *(_OWORD *)(v11 + v10 + 48);
      *((_OWORD *)v12 + 4) = *(_OWORD *)(v11 + v10 + 64);
      *((_QWORD *)v12 + 10) = *(_QWORD *)(v11 + v10 + 80);
      FIK::IKArray<FIK::Task *>::IKArray(&v8[v10 + 88], (_QWORD *)(v11 + v10 + 88));
      *((_QWORD *)v12 + 15) = *(_QWORD *)(v11 + v10 + 120);
      v10 += 128;
      --v9;
    }
    while (v9);
  }
  return a1;
}

uint64_t *FIK::IKArray<FIK::Hierarchy::Joint>::~IKArray(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[2];
    do
    {
      std::__destroy_at[abi:nn180100]<FIK::Hierarchy::Joint,0>(v3);
      v3 += 128;
      --v2;
    }
    while (v2);
  }
  *a1 = 0;
  v4 = a1[2];
  if (v4)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1[3] + 24))(a1[3], v4, 0, 8);
  return a1;
}

_QWORD *FIK::IKArray<IKString>::IKArray<IKString,void>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = a2;
  v6 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  *a1 = a2;
  a1[1] = v6;
  if (v6)
  {
    v7 = 24 * v6;
    v8 = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a3 + 16))(a3, 24 * v6, 8);
    a1[2] = v8;
    a1[3] = a3;
    if (v7)
    {
      bzero(v8, v7);
      v8 = (void *)a1[2];
    }
  }
  else
  {
    v8 = 0;
    a1[2] = 0;
    a1[3] = a3;
  }
  v11 = 0;
  v12 = 0;
  v13 = a3;
  if (v4)
  {
    do
    {
      IKString::IKString((IKString *)v8, (const IKString *)&v11);
      v8 = (void *)(v9 + 24);
      --v4;
    }
    while (v4);
    if (v12)
      (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v13 + 24))(v13, v11, 0, 8);
  }
  return a1;
}

void std::deque<FIK::Hierarchy::Joint const*>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<FIK::Hierarchy::Joint const*>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<FIK::Hierarchy::Joint const*>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  unint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  _QWORD *v40;
  uint64_t v41;
  char *v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_29:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v29 = 1;
      else
        v29 = (uint64_t)&v8[-*a1] >> 2;
      v30 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<FIK::Hierarchy::Joint const**>>(v5, v29);
      v31 = &v30[8 * (v29 >> 2)];
      v33 = &v30[8 * v32];
      v34 = (uint64_t *)a1[1];
      v8 = v31;
      v35 = a1[2] - (_QWORD)v34;
      if (v35)
      {
        v8 = &v31[v35 & 0xFFFFFFFFFFFFFFF8];
        v36 = 8 * (v35 >> 3);
        v37 = &v30[8 * (v29 >> 2)];
        do
        {
          v38 = *v34++;
          *(_QWORD *)v37 = v38;
          v37 += 8;
          v36 -= 8;
        }
        while (v36);
      }
      goto LABEL_26;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_29;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<FIK::Hierarchy::Joint const**>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<FIK::Hierarchy::Joint const**>::push_front((uint64_t)a1, &v54);
    v40 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v41 = *v40;
    v9 = (char *)(v40 + 1);
    v10 = v41;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_29;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v30 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<FIK::Hierarchy::Joint const**>>((uint64_t)(a1 + 3), v46);
      v31 = &v30[8 * (v46 >> 2)];
      v33 = &v30[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v31;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v31[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v30[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_26:
      v39 = (char *)*a1;
      *a1 = v30;
      a1[1] = v31;
      a1[2] = v8;
      a1[3] = v33;
      if (v39)
      {
        operator delete(v39);
        v8 = (char *)a1[2];
      }
      goto LABEL_29;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:nn180100]<std::allocator<FIK::Hierarchy::Joint const**>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<FIK::Hierarchy::Joint const**>::push_back(&v54, &v53);
  v27 = (char *)a1[2];
  if (v27 == (char *)a1[1])
  {
    v28 = (char *)a1[2];
  }
  else
  {
    do
    {
      v27 -= 8;
      std::__split_buffer<FIK::Hierarchy::Joint const**>::push_front((uint64_t)&v54, v27);
    }
    while (v27 != (char *)a1[1]);
    v28 = (char *)a1[2];
  }
  v42 = (char *)*a1;
  v43 = v54;
  v44 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v45 = a1[3];
  *(_OWORD *)a1 = v43;
  *((_OWORD *)a1 + 1) = v44;
  *(_QWORD *)&v55 = v28;
  *((_QWORD *)&v55 + 1) = v45;
  if (v28 != v27)
    *(_QWORD *)&v55 = &v28[(v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8];
  if (v42)
    operator delete(v42);
}

void std::__split_buffer<FIK::Hierarchy::Joint const**>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      v19 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<FIK::Hierarchy::Joint const**>>(v4, v18);
      v21 = &v19[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(_QWORD *)v6 = *a2;
  a1[2] += 8;
}

{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<FIK::Hierarchy::Joint const**>>(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<FIK::Hierarchy::Joint const**>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = a1 + 24;
    v7 = *(_BYTE **)(a1 + 24);
    v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4)
        v12 = 1;
      else
        v12 = (v7 - v4) >> 2;
      v13 = 2 * v12;
      v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<FIK::Hierarchy::Joint const**>>(v6, v12);
      v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      v16 = *(uint64_t **)(a1 + 8);
      v17 = v5;
      v18 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
      if (v18)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = v5;
        do
        {
          v21 = *v16++;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      v22 = *(char **)a1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v9 = (v7 - v8) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<FIK::Hierarchy::Joint const**>>(*(_QWORD *)(a1 + 32), v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

void std::__throw_bad_array_new_length[abi:nn180100]()
{
  abort();
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<FIK::Hierarchy::Joint const**>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(8 * a2);
}

uint64_t FIK::RTBalanceTask::AddSolverTask(uint64_t result, FIK::Solver **this, int a3)
{
  unsigned int *v3;

  v3 = (unsigned int *)result;
  if (a3 == 2)
  {
    *(_QWORD *)(result + 48) = FIK::IKSolver::addBalanceTask(this, *(_DWORD *)result, 1, 0);
    return FIK::RTBalanceTask::SetStaticMomentProperties(v3, (uint64_t)v3);
  }
  else if (a3 == 1)
  {
    *(_QWORD *)(result + 48) = FIK::IKSolver::addBalanceTask(this, *(_DWORD *)result, 0, 1);
    return FIK::RTBalanceTask::SetCOMProperties(v3, (uint64_t)v3);
  }
  return result;
}

uint64_t FIK::RTBalanceTask::SetCOMProperties(unsigned int *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v13;

  v4 = *((_QWORD *)a1 + 6);
  if (!v4)
  {
    v13 = ikinemaLogObject();
    ikinemaAssertHandler(*v13, 0, (uint64_t)"SetCOMProperties", "(SolverTaskPtr != nullptr) The task must be existing");
    v4 = *((_QWORD *)a1 + 6);
  }
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 312))(v4, 0);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)a1 + 6) + 296))(*((_QWORD *)a1 + 6), 1);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)a1 + 6) + 136))(*((_QWORD *)a1 + 6), 1, 1);
  (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)a1 + 6) + 336))(*((_QWORD *)a1 + 6), *a1);
  v5 = *((_QWORD *)a1 + 6) + *(_QWORD *)(**((_QWORD **)a1 + 6) - 264);
  (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v5 + 144))(v5, *(unsigned __int8 *)(a2 + 4), *(unsigned __int8 *)(a2 + 5), *(unsigned __int8 *)(a2 + 6));
  v6 = *((_QWORD *)a1 + 6) + *(_QWORD *)(**((_QWORD **)a1 + 6) - 264);
  (*(void (**)(uint64_t, _QWORD, float))(*(_QWORD *)v6 + 80))(v6, 0, *(float *)(a2 + 16));
  v7 = *((_QWORD *)a1 + 6) + *(_QWORD *)(**((_QWORD **)a1 + 6) - 264);
  (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)v7 + 80))(v7, 1, *(float *)(a2 + 20));
  v8 = *((_QWORD *)a1 + 6) + *(_QWORD *)(**((_QWORD **)a1 + 6) - 264);
  (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)v8 + 80))(v8, 2, *(float *)(a2 + 24));
  v9 = *((_QWORD *)a1 + 6) + *(_QWORD *)(**((_QWORD **)a1 + 6) - 264);
  (*(void (**)(uint64_t, _QWORD, float))(*(_QWORD *)v9 + 104))(v9, 0, *(float *)(a2 + 32));
  v10 = *((_QWORD *)a1 + 6) + *(_QWORD *)(**((_QWORD **)a1 + 6) - 264);
  (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)v10 + 104))(v10, 1, *(float *)(a2 + 36));
  v11 = *((_QWORD *)a1 + 6) + *(_QWORD *)(**((_QWORD **)a1 + 6) - 264);
  return (*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)v11 + 104))(v11, 2, *(float *)(a2 + 40));
}

uint64_t FIK::RTBalanceTask::SetStaticMomentProperties(unsigned int *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v13;

  v4 = *((_QWORD *)a1 + 6);
  if (!v4)
  {
    v13 = ikinemaLogObject();
    ikinemaAssertHandler(*v13, 0, (uint64_t)"SetStaticMomentProperties", "(SolverTaskPtr != nullptr) The task must be existing");
    v4 = *((_QWORD *)a1 + 6);
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 312))(v4, 1);
  (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)a1 + 6) + 296))(*((_QWORD *)a1 + 6), 0);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)a1 + 6) + 136))(*((_QWORD *)a1 + 6), 1, 1);
  (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)a1 + 6) + 336))(*((_QWORD *)a1 + 6), *a1);
  v5 = *((_QWORD *)a1 + 6) + *(_QWORD *)(**((_QWORD **)a1 + 6) - 264);
  (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v5 + 144))(v5, *(unsigned __int8 *)(a2 + 4), *(unsigned __int8 *)(a2 + 5), *(unsigned __int8 *)(a2 + 6));
  v6 = *((_QWORD *)a1 + 6) + *(_QWORD *)(**((_QWORD **)a1 + 6) - 264);
  (*(void (**)(uint64_t, _QWORD, float))(*(_QWORD *)v6 + 80))(v6, 0, *(float *)(a2 + 16));
  v7 = *((_QWORD *)a1 + 6) + *(_QWORD *)(**((_QWORD **)a1 + 6) - 264);
  (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)v7 + 80))(v7, 1, *(float *)(a2 + 20));
  v8 = *((_QWORD *)a1 + 6) + *(_QWORD *)(**((_QWORD **)a1 + 6) - 264);
  (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)v8 + 80))(v8, 2, *(float *)(a2 + 24));
  v9 = *((_QWORD *)a1 + 6) + *(_QWORD *)(**((_QWORD **)a1 + 6) - 264);
  (*(void (**)(uint64_t, _QWORD, float))(*(_QWORD *)v9 + 104))(v9, 0, *(float *)(a2 + 32));
  v10 = *((_QWORD *)a1 + 6) + *(_QWORD *)(**((_QWORD **)a1 + 6) - 264);
  (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)v10 + 104))(v10, 1, *(float *)(a2 + 36));
  v11 = *((_QWORD *)a1 + 6) + *(_QWORD *)(**((_QWORD **)a1 + 6) - 264);
  return (*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)v11 + 104))(v11, 2, *(float *)(a2 + 40));
}

uint64_t FIK::RTBalanceTask::SetSolverTaskTarget(FIK::RTBalanceTask *this)
{
  uint64_t v2;
  uint64_t *v4;

  v2 = *((_QWORD *)this + 6);
  if (!v2)
  {
    v4 = ikinemaLogObject();
    ikinemaAssertHandler(*v4, 0, (uint64_t)"SetSolverTaskTarget", "(SolverTaskPtr != nullptr) The task must be existing");
    v2 = *((_QWORD *)this + 6);
  }
  return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v2 + 256))(v2, (char *)this + 64);
}

float32x4_t FIK::RTBalanceTask::ConvertTargetWorldToSolver(float32x4_t *this, float32x4_t *a2)
{
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  int32x4_t v8;
  float32x4_t v9;
  int32x4_t v10;
  float32x4_t v11;
  float32x4_t result;
  uint64_t *v13;

  if (!this[3].i64[0])
  {
    v13 = ikinemaLogObject();
    ikinemaAssertHandler(*v13, 0, (uint64_t)"ConvertTargetWorldToSolver", "(SolverTaskPtr != nullptr) The task must be existing");
  }
  v4 = a2[1];
  v5 = this[4];
  v6 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v4, (int32x4_t)v4), (int8x16_t)v4, 0xCuLL);
  v7 = vnegq_f32(v4);
  v8 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v5, (int32x4_t)v5), (int8x16_t)v5, 0xCuLL), v7), v5, v6);
  v9 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v8, v8), (int8x16_t)v8, 0xCuLL);
  v10 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v9, (int32x4_t)v9), (int8x16_t)v9, 0xCuLL), v7), v9, v6);
  v11 = vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v10, v10), (int8x16_t)v10, 0xCuLL), v9, v4, 3);
  v4.i64[0] = 0x4000000040000000;
  v4.i64[1] = 0x4000000040000000;
  result = vaddq_f32(*a2, vmlaq_f32(v5, v4, v11));
  this[4] = result;
  return result;
}

double FIK::RotationPoints::deconstruct(int32x4_t *a1)
{
  float32x4_t v1;
  int32x4_t v2;
  float32x4_t v3;
  int32x4_t v4;
  float32x4_t v5;
  double result;

  v1 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*a1, *a1), *(int8x16_t *)a1, 0xCuLL);
  v2 = (int32x4_t)vmlaq_f32(vmulq_f32(*(float32x4_t *)a1, (float32x4_t)xmmword_210804350), (float32x4_t)xmmword_210804360, v1);
  v3 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v2, v2), (int8x16_t)v2, 0xCuLL);
  v4 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v3, (int32x4_t)v3), (int8x16_t)v3, 0xCuLL), vnegq_f32(*(float32x4_t *)a1)), v3, v1);
  v5.i64[0] = 0x4000000040000000;
  v5.i64[1] = 0x4000000040000000;
  *(_QWORD *)&result = vmlaq_f32((float32x4_t)xmmword_210804360, v5, vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v4, v4), (int8x16_t)v4, 0xCuLL), v3, *(float32x4_t *)a1, 3)).u64[0];
  return result;
}

float32x4_t *FIK::RotationPoints::reconstruct@<X0>(float32x4_t *this@<X0>, const simd_float4x4 *a2@<X1>, float32x4_t *a3@<X8>)
{
  uint64_t v3;
  float32x4_t v4;
  int32x4_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x4_t v8;
  int32x4_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  int32x4_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x4_t v18;
  int32x4_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x4_t v22;
  float v23;
  float v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t v29;
  float v31;
  float32_t v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x2_t v35;
  float32x2_t v36;
  float32x2_t v37;
  float32x2_t v38;
  float32x2_t v39;
  float v40;
  float32x4_t v45;
  float32x2_t v46;
  float32x2_t v47;
  float v48;
  unsigned int v49;
  float32x2_t v50;
  float32x2_t v51;
  float32x2_t v52;
  float32x2_t v53;
  float32x2_t v54;
  float32x2_t v55;
  float32x4_t v56;
  unsigned __int32 v57;
  float32x2_t v58;
  float32x2_t v59;
  _OWORD v60[4];
  int8x16_t v61;
  int8x16_t v62;
  int32x2_t v63;
  float v64;

  v3 = 0;
  v4 = this[1];
  v5 = (int32x4_t)vmulq_f32(*this, *this);
  v5.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v5, 2), vadd_f32(*(float32x2_t *)v5.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v5.i8, 1))).u32[0];
  v6 = vrsqrte_f32((float32x2_t)v5.u32[0]);
  v7 = vmul_f32(v6, vrsqrts_f32((float32x2_t)v5.u32[0], vmul_f32(v6, v6)));
  v8 = vmulq_f32(vmulq_n_f32(*this, vmul_f32(v7, vrsqrts_f32((float32x2_t)v5.u32[0], vmul_f32(v7, v7))).f32[0]), (float32x4_t)vdupq_n_s32(0x418A80D5u));
  v8.i32[3] = 1.0;
  v9 = (int32x4_t)vmulq_f32(v4, v4);
  v9.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v9, 2), vadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v9.i8, 1))).u32[0];
  v10 = vrsqrte_f32((float32x2_t)v9.u32[0]);
  v11 = vmul_f32(v10, vrsqrts_f32((float32x2_t)v9.u32[0], vmul_f32(v10, v10)));
  v12 = vmulq_f32(vmulq_n_f32(v4, vmul_f32(v11, vrsqrts_f32((float32x2_t)v9.u32[0], vmul_f32(v11, v11))).f32[0]), (float32x4_t)vdupq_n_s32(0x418ABDD4u));
  v12.i32[3] = 1.0;
  v13 = this[2];
  v14 = this[3];
  v15 = (int32x4_t)vmulq_f32(v13, v13);
  v15.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v15, 2), vadd_f32(*(float32x2_t *)v15.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v15.i8, 1))).u32[0];
  v16 = vrsqrte_f32((float32x2_t)v15.u32[0]);
  v17 = vmul_f32(v16, vrsqrts_f32((float32x2_t)v15.u32[0], vmul_f32(v16, v16)));
  v18 = vmulq_f32(vmulq_n_f32(v13, vmul_f32(v17, vrsqrts_f32((float32x2_t)v15.u32[0], vmul_f32(v17, v17))).f32[0]), (float32x4_t)vdupq_n_s32(0x418A818Eu));
  v18.i32[3] = 1.0;
  v19 = (int32x4_t)vmulq_f32(v14, v14);
  v19.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v19, 2), vadd_f32(*(float32x2_t *)v19.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v19.i8, 1))).u32[0];
  v20 = vrsqrte_f32((float32x2_t)v19.u32[0]);
  v21 = vmul_f32(v20, vrsqrts_f32((float32x2_t)v19.u32[0], vmul_f32(v20, v20)));
  v22 = vmulq_f32(vmulq_n_f32(v14, vmul_f32(v21, vrsqrts_f32((float32x2_t)v19.u32[0], vmul_f32(v21, v21))).f32[0]), (float32x4_t)vdupq_n_s32(0x418A8275u));
  v22.i32[3] = 1.0;
  v60[2] = xmmword_2108043F0;
  v60[3] = xmmword_210804400;
  do
  {
    *(float32x4_t *)((char *)&v61 + v3 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v8, COERCE_FLOAT(v60[v3])), v12, *(float32x2_t *)&v60[v3], 1), v18, (float32x4_t)v60[v3], 2), v22, (float32x4_t)v60[v3], 3);
    ++v3;
  }
  while (v3 != 4);
  v23 = v64 + (float)(*(float *)v61.i32 + *(float *)&v62.i32[1]);
  if (v23 >= 0.0)
  {
    v31 = sqrtf(v23 + 1.0);
    v32 = v31 + v31;
    v33 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(v31 + v31));
    v34 = vmul_f32(v33, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v31 + v31), v33));
    v34.i32[0] = vmul_f32(v34, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v31 + v31), v34)).u32[0];
    *(float32x2_t *)v45.f32 = vmul_n_f32(vsub_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v62, v62, 8uLL), v63), (float32x2_t)vext_s8((int8x8_t)v63, (int8x8_t)*(_OWORD *)&vextq_s8(v61, v61, 8uLL), 4uLL)), v34.f32[0]);
    v35.i32[0] = vsub_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v61.i8, 1), *(float32x2_t *)v62.i8).u32[0];
    v35.f32[1] = v32;
    v34.i32[1] = 0.25;
    v47 = vmul_f32(v35, v34);
  }
  else if (*(float *)v61.i32 < *(float *)&v62.i32[1] || *(float *)v61.i32 < v64)
  {
    v25 = 1.0 - *(float *)v61.i32;
    if (*(float *)&v62.i32[1] >= v64)
    {
      v48 = sqrtf(*(float *)&v62.i32[1] + (float)(v25 - v64));
      *(float *)&v49 = v48 + v48;
      v50 = vrecpe_f32((float32x2_t)v49);
      v51 = vmul_f32(v50, vrecps_f32((float32x2_t)v49, v50));
      v52.i32[0] = vmul_f32(v51, vrecps_f32((float32x2_t)v49, v51)).u32[0];
      v51.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v61.i8, 1), *(float32x2_t *)v62.i8).u32[0];
      v51.i32[1] = v49;
      v53 = (float32x2_t)vrev64_s32(v63);
      v54.i32[0] = vadd_f32(v53, (float32x2_t)*(_OWORD *)&vextq_s8(v62, v62, 8uLL)).u32[0];
      v54.i32[1] = vsub_f32(v53, (float32x2_t)vdup_laneq_s32(*(int32x4_t *)&v61, 2)).i32[1];
      v47 = vmul_n_f32(v54, v52.f32[0]);
      v52.i32[1] = 0.25;
      *(float32x2_t *)v45.f32 = vmul_f32(v51, v52);
    }
    else
    {
      v26 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v62.i8, 0);
      v27 = vsub_f32(*(float32x2_t *)v61.i8, v26);
      v26.i32[0] = 2.0;
      v26.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v61.u32[1], COERCE_UNSIGNED_INT(sqrtf(v64 + (float)(v25 - *(float *)&v62.i32[1])))), v26).u32[0];
      v26.i32[1] = v27.i32[1];
      v28 = vrecpe_f32((float32x2_t)v26.u32[0]);
      v29 = vmul_f32(v28, vrecps_f32((float32x2_t)v26.u32[0], v28));
      v27.i32[0] = vmul_f32(v29, vrecps_f32((float32x2_t)v26.u32[0], v29)).u32[0];
      *(float32x2_t *)v45.f32 = vmul_n_f32(vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v61, v61, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v62, v62, 8uLL)), (float32x2_t)v63), v27.f32[0]);
      __asm { FMOV            V2.2S, #0.25 }
      _D2.i32[1] = v27.i32[0];
      v47 = vmul_f32(v26, _D2);
    }
  }
  else
  {
    v36 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v62.i8, 0);
    v37 = vadd_f32(*(float32x2_t *)v61.i8, v36);
    v36.i32[0] = 2.0;
    v36.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v61.u32[1], COERCE_UNSIGNED_INT(sqrtf(*(float *)v61.i32 + (float)((float)(1.0- *(float *)&v62.i32[1])- v64)))), v36).u32[0];
    v36.i32[1] = v37.i32[1];
    v38 = vrecpe_f32((float32x2_t)v36.u32[0]);
    v39 = vmul_f32(v38, vrecps_f32((float32x2_t)v36.u32[0], v38));
    LODWORD(v40) = vmul_f32(v39, vrecps_f32((float32x2_t)v36.u32[0], v39)).u32[0];
    __asm { FMOV            V5.2S, #0.25 }
    _D5.f32[1] = v40;
    *(float32x2_t *)v45.f32 = vmul_f32(v36, _D5);
    v46.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v61, v61, 8uLL), (float32x2_t)v63).u32[0];
    v46.i32[1] = vsub_f32((float32x2_t)vdup_laneq_s32(*(int32x4_t *)&v62, 2), *(float32x2_t *)&v63).i32[1];
    v47 = vmul_n_f32(v46, v40);
  }
  v55 = vadd_f32(vmul_f32(*(float32x2_t *)v45.f32, *(float32x2_t *)v45.f32), vmul_f32(v47, v47));
  if (vaddv_f32(v55) == 0.0)
  {
    v56 = (float32x4_t)xmmword_210802BA0;
  }
  else
  {
    *(float32x2_t *)&v45.u32[2] = v47;
    v57 = vadd_f32(v55, (float32x2_t)vdup_lane_s32((int32x2_t)v55, 1)).u32[0];
    v58 = vrsqrte_f32((float32x2_t)v57);
    v59 = vmul_f32(v58, vrsqrts_f32((float32x2_t)v57, vmul_f32(v58, v58)));
    v56 = vmulq_n_f32(v45, vmul_f32(v59, vrsqrts_f32((float32x2_t)v57, vmul_f32(v59, v59))).f32[0]);
  }
  *a3 = v56;
  return this;
}

FIK::DoubleExponentialPositionFilter *FIK::DoubleExponentialPositionFilter::DoubleExponentialPositionFilter(FIK::DoubleExponentialPositionFilter *this, float a2, float a3)
{
  float v5;
  float v6;

  *(_QWORD *)this = 0;
  *((_DWORD *)this + 2) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_BYTE *)this + 48) = 0;
  v5 = __exp10f(-(float)((float)(a2 * 3.0) + 2.0));
  *((float *)this + 2) = v5;
  v6 = expf((float)(-1.0 / a3) / v5);
  *(float *)this = v6;
  *((float *)this + 1) = (float)(v5 * v6) / (float)(1.0 - v6);
  return this;
}

__n128 FIK::DoubleExponentialPositionFilter::filter@<Q0>(float32x4_t *a1@<X0>, float32x4_t *a2@<X1>, float32x4_t *a3@<X8>)
{
  float32x4_t v3;
  float32x4_t v4;
  float v5;
  float v6;
  float32x4_t v7;
  float32x4_t v8;
  __n128 result;

  if (a1[3].i8[0])
  {
    v3 = a1[1];
    v4 = a1[2];
  }
  else
  {
    a1[3].i8[0] = 1;
    v3 = *a2;
    a1[1] = *a2;
    v4 = *a2;
    a1[2] = *a2;
  }
  v5 = a1->f32[1];
  v6 = 1.0 - a1->f32[0];
  v7 = vaddq_f32(vmulq_n_f32(*a2, a1->f32[0]), vmulq_n_f32(v3, v6));
  v8 = vaddq_f32(vmulq_n_f32(v4, v6), vmulq_n_f32(v7, a1->f32[0]));
  a1[1] = v7;
  a1[2] = v8;
  *a2 = vsubq_f32(vmulq_n_f32(v7, v5 + 2.0), vmulq_n_f32(v8, v5 + 1.0));
  result = *(__n128 *)a2;
  *a3 = *a2;
  return result;
}

void FIK::DoubleExponentialPositionFilter::set(FIK::DoubleExponentialPositionFilter *this, float a2, float a3)
{
  float v5;
  float v6;

  *(_QWORD *)this = 0;
  *((_DWORD *)this + 2) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_BYTE *)this + 48) = 0;
  v5 = __exp10f(-(float)((float)(a2 * 3.0) + 2.0));
  *((float *)this + 2) = v5;
  v6 = expf((float)(-1.0 / a3) / v5);
  *(float *)this = v6;
  *((float *)this + 1) = (float)(v5 * v6) / (float)(1.0 - v6);
}

double FIK::TargetSmoothing::smooth@<D0>(FIK::TargetSmoothing *this@<X0>, float32x4_t *a2@<X1>, float32x4_t *a3@<X2>, double result@<D0>, float32x4_t *a5@<X8>)
{
  float32x4_t v6;
  float32x4_t *v7;
  float32x4_t v8;
  _OWORD v9[2];
  float32x4_t v10[2];
  float32x4_t v11[2];

  v6 = a2[1];
  *a5 = *a2;
  a5[1] = v6;
  v7 = a5 + 1;
  switch(*(_DWORD *)this)
  {
    case 0:
    case 3:
      return result;
    case 1:
      v10[0] = *a2;
      v10[1] = v6;
      FIK::TargetSmoothing::doBlendFromPrevFrame((uint64_t)this, v10, a3, v11);
      goto LABEL_4;
    case 2:
      v9[0] = *a2;
      v9[1] = v6;
      FIK::TargetSmoothing::doBlendWithMaxVelocity((uint64_t)this, (uint64_t)v9, a3, v11, *(float *)&result);
LABEL_4:
      result = *(double *)v11[0].i64;
      v8 = v11[1];
      *a5 = v11[0];
      *v7 = v8;
      return result;
    default:
      FIK::TargetSmoothing::smooth();
  }
}

void FIK::TargetSmoothing::doBlendFromPrevFrame(uint64_t a1@<X0>, float32x4_t *a2@<X1>, float32x4_t *a3@<X2>, float32x4_t *a4@<X8>)
{
  float v6;
  float32x4_t v7;
  float32x4_t v8;
  float v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float v15;
  float v16;
  float32x4_t v17;
  int8x16_t v18;
  float32x4_t v19;
  int8x16_t v20;
  float v21;
  float v22;
  BOOL v23;
  float v24;
  float v25;
  float32x2_t v26;
  float32x2_t v27;
  float v28;
  float32x4_t v29;
  float v30;
  float v31;
  float v32;
  float32x4_t v33;
  int8x16_t v34;
  float32x2_t v35;
  float32x4_t v36;
  unsigned __int32 v37;
  float32x2_t v38;
  float32x2_t v39;
  float32x4_t v40;
  float v41;
  float v42;
  float32x4_t v43;
  float32x4_t v44;

  if (*(_BYTE *)(a1 + 16))
  {
    v6 = *(float *)(a1 + 8);
    if (v6 <= 0.0)
    {
      v7 = *a2;
    }
    else
    {
      v7 = *a3;
      if (v6 < 1.0)
        v7 = vaddq_f32(*a2, vmulq_n_f32(vsubq_f32(v7, *a2), v6));
    }
    *a2 = v7;
    v9 = *(float *)(a1 + 12);
    v10 = a2[1];
    v11 = a3[1];
    v12 = vmulq_f32(v10, v11);
    v13 = (float32x4_t)vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL);
    *(float32x2_t *)v12.f32 = vadd_f32(*(float32x2_t *)v12.f32, *(float32x2_t *)v13.f32);
    v12.f32[0] = vaddv_f32(*(float32x2_t *)v12.f32);
    v13.i32[0] = 0;
    v14 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v12, v13)), 0), (int8x16_t)vnegq_f32(v11), (int8x16_t)v11);
    v15 = 1.0;
    v16 = 1.0 - v9;
    v17 = vsubq_f32(v10, v14);
    v18 = (int8x16_t)vmulq_f32(v17, v17);
    v43 = v14;
    v44 = v10;
    v19 = vaddq_f32(v10, v14);
    v20 = (int8x16_t)vmulq_f32(v19, v19);
    v21 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v18.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v20.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL)))));
    v22 = v21 + v21;
    v23 = (float)(v21 + v21) == 0.0;
    v24 = 1.0;
    if (!v23)
      v24 = sinf(v22) / v22;
    v25 = v24;
    v26 = vrecpe_f32((float32x2_t)LODWORD(v24));
    v27 = vmul_f32(v26, vrecps_f32((float32x2_t)LODWORD(v25), v26));
    LODWORD(v28) = vmul_f32(v27, vrecps_f32((float32x2_t)LODWORD(v25), v27)).u32[0];
    if ((float)(v16 * v22) != 0.0)
    {
      v41 = v28;
      v27.f32[0] = sinf(v16 * v22);
      v28 = v41;
      v15 = v27.f32[0] / (float)(v16 * v22);
    }
    v27.f32[0] = v16 * (float)(v28 * v15);
    v29 = (float32x4_t)vdupq_lane_s32((int32x2_t)v27, 0);
    v30 = v9 * v22;
    v31 = 1.0;
    if (v30 != 0.0)
    {
      v40 = v29;
      v42 = v28;
      v32 = sinf(v30);
      v29 = v40;
      v28 = v42;
      v31 = v32 / v30;
    }
    v33 = vmlaq_f32(vmulq_n_f32(v43, v9 * (float)(v28 * v31)), v44, v29);
    v34 = (int8x16_t)vmulq_f32(v33, v33);
    v35 = vadd_f32(*(float32x2_t *)v34.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL));
    if (vaddv_f32(v35) == 0.0)
    {
      v36 = (float32x4_t)xmmword_210802BA0;
    }
    else
    {
      v37 = vadd_f32(v35, (float32x2_t)vdup_lane_s32((int32x2_t)v35, 1)).u32[0];
      v38 = vrsqrte_f32((float32x2_t)v37);
      v39 = vmul_f32(v38, vrsqrts_f32((float32x2_t)v37, vmul_f32(v38, v38)));
      v36 = vmulq_n_f32(v33, vmul_f32(v39, vrsqrts_f32((float32x2_t)v37, vmul_f32(v39, v39))).f32[0]);
    }
    a2[1] = v36;
    *a4 = *a2;
    a4[1] = v36;
  }
  else
  {
    *(_BYTE *)(a1 + 16) = 1;
    v8 = a2[1];
    *a4 = *a2;
    a4[1] = v8;
  }
}

__n128 FIK::TargetSmoothing::doBlendWithMaxVelocity@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, float32x4_t *a3@<X2>, _OWORD *a4@<X8>, float a5@<S0>)
{
  float v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float v9;
  float v10;
  __n128 result;
  __int128 v12;

  if (*(_BYTE *)(a1 + 16))
  {
    v5 = *(float *)(a1 + 4) * a5;
    if (fabsf(v5) >= 0.000000001)
    {
      v6 = *(float32x4_t *)a2;
      v7 = vsubq_f32(*(float32x4_t *)a2, *a3);
      v8 = vmulq_f32(v7, v7);
      LODWORD(v9) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v8, 2), vaddq_f32(v8, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 1))).u32[0];
      if (fabsf(v9) >= 0.000000001)
      {
        v10 = sqrtf(v9);
        if (v5 < v10)
          v6 = vaddq_f32(*a3, vmulq_n_f32(v7, v5 / v10));
      }
    }
    else
    {
      v6 = *a3;
    }
    *(float32x4_t *)a2 = v6;
  }
  else
  {
    *(_BYTE *)(a1 + 16) = 1;
  }
  result = *(__n128 *)a2;
  v12 = *(_OWORD *)(a2 + 16);
  *a4 = *(_OWORD *)a2;
  a4[1] = v12;
  return result;
}

double FIK::TargetSmoothing::smooth@<D0>(_DWORD *a1@<X0>, _OWORD *a2@<X1>, float32x4_t *a3@<X2>, int a4@<W3>, _OWORD *a5@<X8>, double result@<D0>)
{
  __int128 v7;
  float32x4_t v8;
  float32x4_t v9;

  v7 = a2[1];
  *a5 = *a2;
  a5[1] = v7;
  if (*a1 == 2)
  {
    v8 = *(float32x4_t *)a2;
    FIK::TargetSmoothing::doBlendImpactPoint((uint64_t)a1, &v8, a3, a4, &v9, *(float *)&result);
    result = *(double *)v9.i64;
    *a5 = v9;
  }
  return result;
}

__n128 FIK::TargetSmoothing::doBlendImpactPoint@<Q0>(uint64_t a1@<X0>, float32x4_t *a2@<X1>, float32x4_t *a3@<X2>, int a4@<W3>, float32x4_t *a5@<X8>, float a6@<S0>)
{
  float v11;
  float v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float v16;
  float v17;
  __n128 result;
  float32x4_t v19;

  v19 = vsubq_f32(*a2, *a3);
  v11 = fabsf(FIK::Utils::GetUpElement(v19.f32, a4));
  v12 = *(float *)(a1 + 4) * a6;
  if (v11 > v12)
  {
    if (fabsf(v12) >= 0.000000001)
    {
      v13 = *a2;
      v14 = vsubq_f32(*a2, *a3);
      v15 = vmulq_f32(v14, v14);
      LODWORD(v16) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 2), vaddq_f32(v15, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 1))).u32[0];
      if (fabsf(v16) >= 0.000000001)
      {
        v17 = sqrtf(v16);
        if (v12 < v17)
          v13 = vaddq_f32(*a3, vmulq_n_f32(v14, v12 / v17));
      }
    }
    else
    {
      v13 = *a3;
    }
    *a2 = v13;
  }
  result = *(__n128 *)a2;
  *a5 = *a2;
  return result;
}

float32x4_t FIK::estimateBoneRotationFromVelocity@<Q0>(float32x4_t *a1@<X0>, float32x4_t *a2@<X1>, float32x4_t *a3@<X2>, int a4@<W3>, float32x4_t *a5@<X8>)
{
  float32x4_t v5;
  float32x4_t v6;
  float v7;
  float v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float v14;
  float v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  int32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float v23;
  float32x4_t v24;
  float32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  float v31;
  float v33;
  float32x2_t v34;
  float32x2_t v35;
  float32x2_t v36;
  float32x2_t v37;
  float32x2_t v38;
  float32x2_t v39;
  float v41;
  float32_t v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x2_t v47;
  float32x2_t v48;
  float32x2_t v49;
  float v50;
  float32x4_t v55;
  float32x2_t v56;
  float32x2_t v57;
  float32x2_t v58;
  float v59;
  unsigned int v60;
  float32x2_t v61;
  float32x2_t v62;
  float32x2_t v63;
  float32x2_t v64;
  float32x2_t v65;
  float32x2_t v66;
  float32x4_t result;

  v5 = vsubq_f32(*a2, *a1);
  v6 = vmulq_f32(v5, v5);
  v7 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v6, 2), vaddq_f32(v6, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v6.f32, 1))).f32[0]);
  v8 = 1.0 / v7;
  if (v7 == 0.0)
    v8 = 0.0;
  v9 = vmulq_n_f32(v5, v8);
  v10 = vsubq_f32(*a2, *a3);
  v11 = vmulq_f32(v10, v10);
  if (COERCE_FLOAT(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2), vaddq_f32(v11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1))).u32[0] & 0x7FFFFFFF) < 0.000000001)
  {
    v12 = vmulq_f32(v9, v9);
    v12.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2), vaddq_f32(v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1))).u64[0];
    v12.f32[0] = sqrtf(v12.f32[0]) * 0.01;
    v10 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 0);
  }
  v13 = vmulq_f32(v10, v10);
  v14 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1))).f32[0]);
  if (v14 == 0.0)
    v15 = 0.0;
  else
    v15 = 1.0 / v14;
  v16 = vmulq_n_f32(v10, v15);
  v17 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v9, (int32x4_t)v9), (int8x16_t)v9, 0xCuLL);
  v18 = vnegq_f32(v9);
  v19 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v16, (int32x4_t)v16), (int8x16_t)v16, 0xCuLL), v18), v16, v17);
  v20 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v19, v19), (int8x16_t)v19, 0xCuLL);
  v21 = v20;
  v21.i32[3] = 0;
  v22 = vmulq_f32(v21, v21);
  v22.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2), vaddq_f32(v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1))).f32[0]);
  v23 = 1.0 / v22.f32[0];
  if (v22.f32[0] == 0.0)
    v23 = 0.0;
  v24 = vmulq_n_f32(v20, v23);
  if (a4 == 2)
  {
    v29 = (int32x4_t)vmlaq_f32(vmulq_f32(v17, vnegq_f32(v24)), v9, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v24, (int32x4_t)v24), (int8x16_t)v24, 0xCuLL));
    v26 = vzip2q_s32(v29, vuzp1q_s32(v29, (int32x4_t)v24));
    v26.i32[2] = v9.i32[0];
    v27 = vzip2q_s32(vzip1q_s32(vdupq_lane_s32(*(int32x2_t *)v29.i8, 0), (int32x4_t)v9), vdupq_lane_s32(*(int32x2_t *)v24.f32, 1));
    v28 = vtrn2q_s32(v29, vzip2q_s32(v29, (int32x4_t)v24));
    v28.i32[2] = v9.i32[2];
  }
  else if (a4 == 1)
  {
    v30 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v24, (int32x4_t)v24), (int8x16_t)v24, 0xCuLL), v18), v24, v17);
    v26 = vzip2q_s32(v30, vuzp1q_s32(v30, (int32x4_t)v9));
    v26.i32[2] = v24.i32[0];
    v27 = vzip2q_s32(vzip1q_s32(vdupq_lane_s32(*(int32x2_t *)v30.i8, 0), (int32x4_t)v24), vdupq_lane_s32(*(int32x2_t *)v9.f32, 1));
    v28 = vtrn2q_s32(v30, vzip2q_s32(v30, (int32x4_t)v9));
    v28.i32[2] = v24.i32[2];
  }
  else
  {
    if (a4)
      FIK::estimateBoneRotationFromVelocity();
    v25 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v24, (int32x4_t)v24), (int8x16_t)v24, 0xCuLL), v18), v24, v17);
    v26 = vzip1q_s32((int32x4_t)v9, (int32x4_t)v24);
    v26.i32[2] = v25.i32[2];
    v27 = vzip2q_s32(vzip1q_s32((int32x4_t)v9, vdupq_lane_s32(*(int32x2_t *)v25.f32, 0)), vdupq_lane_s32(*(int32x2_t *)v24.f32, 1));
    v28 = vzip2q_s32((int32x4_t)v9, (int32x4_t)v24);
    v28.i32[2] = v25.i32[1];
  }
  v31 = *(float *)&v28.i32[2] + (float)(*(float *)v26.i32 + *(float *)&v27.i32[1]);
  if (v31 >= 0.0)
  {
    v41 = sqrtf(v31 + 1.0);
    v42 = v41 + v41;
    v43 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(v41 + v41));
    v44 = vmul_f32(v43, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v41 + v41), v43));
    v44.i32[0] = vmul_f32(v44, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v41 + v41), v44)).u32[0];
    *(float32x2_t *)v55.f32 = vmul_n_f32(vsub_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v27, vuzp1q_s32(v27, v28)), (float32x2_t)*(_OWORD *)&vtrn2q_s32(v28, vzip2q_s32(v28, v26))), v44.f32[0]);
    v45.i32[0] = vsub_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v26.i8, 1), *(float32x2_t *)v27.i8).u32[0];
    v45.f32[1] = v42;
    v44.i32[1] = 0.25;
    v58 = vmul_f32(v45, v44);
  }
  else if (*(float *)v26.i32 < *(float *)&v27.i32[1] || *(float *)v26.i32 < *(float *)&v28.i32[2])
  {
    v33 = 1.0 - *(float *)v26.i32;
    if (*(float *)&v27.i32[1] >= *(float *)&v28.i32[2])
    {
      v59 = sqrtf(*(float *)&v27.i32[1] + (float)(v33 - *(float *)&v28.i32[2]));
      *(float *)&v60 = v59 + v59;
      v61 = vrecpe_f32((float32x2_t)v60);
      v62 = vmul_f32(v61, vrecps_f32((float32x2_t)v60, v61));
      v63.i32[0] = vmul_f32(v62, vrecps_f32((float32x2_t)v60, v62)).u32[0];
      v62.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v26.i8, 1), *(float32x2_t *)v27.i8).u32[0];
      v62.i32[1] = v60;
      v64 = (float32x2_t)vrev64_s32(*(int32x2_t *)v28.i8);
      v65 = (float32x2_t)vzip2q_s32(v27, v26).u64[0];
      v66.i32[0] = vadd_f32(v64, v65).u32[0];
      v66.i32[1] = vsub_f32(v64, v65).i32[1];
      v58 = vmul_n_f32(v66, v63.f32[0]);
      v63.i32[1] = 0.25;
      *(float32x2_t *)v55.f32 = vmul_f32(v62, v63);
    }
    else
    {
      v34 = (float32x2_t)__PAIR64__(v26.u32[1], COERCE_UNSIGNED_INT(sqrtf(*(float *)&v28.i32[2] + (float)(v33 - *(float *)&v27.i32[1]))));
      v35 = vadd_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v26, v27), *(float32x2_t *)v28.i8);
      v36 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v27.i8, 0);
      v37 = vsub_f32(*(float32x2_t *)v26.i8, v36);
      v36.i32[0] = 2.0;
      v36.i32[0] = vmul_f32(v34, v36).u32[0];
      v36.i32[1] = v37.i32[1];
      v38 = vrecpe_f32((float32x2_t)v36.u32[0]);
      v39 = vmul_f32(v38, vrecps_f32((float32x2_t)v36.u32[0], v38));
      v37.i32[0] = vmul_f32(v39, vrecps_f32((float32x2_t)v36.u32[0], v39)).u32[0];
      *(float32x2_t *)v55.f32 = vmul_n_f32(v35, v37.f32[0]);
      __asm { FMOV            V2.2S, #0.25 }
      _D2.i32[1] = v37.i32[0];
      v58 = vmul_f32(v36, _D2);
    }
  }
  else
  {
    v46 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v27.i8, 0);
    v47 = vadd_f32(*(float32x2_t *)v26.i8, v46);
    v46.i32[0] = 2.0;
    v46.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v26.u32[1], COERCE_UNSIGNED_INT(sqrtf(*(float *)v26.i32+ (float)((float)(1.0 - *(float *)&v27.i32[1]) - *(float *)&v28.i32[2])))), v46).u32[0];
    v46.i32[1] = v47.i32[1];
    v48 = vrecpe_f32((float32x2_t)v46.u32[0]);
    v49 = vmul_f32(v48, vrecps_f32((float32x2_t)v46.u32[0], v48));
    LODWORD(v50) = vmul_f32(v49, vrecps_f32((float32x2_t)v46.u32[0], v49)).u32[0];
    __asm { FMOV            V5.2S, #0.25 }
    _D5.f32[1] = v50;
    *(float32x2_t *)v55.f32 = vmul_f32(v46, _D5);
    v56 = (float32x2_t)vzip2q_s32(v26, v27).u64[0];
    v57.i32[0] = vadd_f32(v56, *(float32x2_t *)v28.i8).u32[0];
    v57.i32[1] = vsub_f32(v56, *(float32x2_t *)&v28).i32[1];
    v58 = vmul_n_f32(v57, v50);
  }
  *(float32x2_t *)&v55.u32[2] = v58;
  result = vmulq_f32(v55, (float32x4_t)xmmword_210802C20);
  *a5 = result;
  return result;
}

uint64_t *FIK::createHelperHierarchy@<X0>(FIK *a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  void (***v6)(FIK::CrtAllocator *__hidden);
  void (***v7)(FIK::CrtAllocator *__hidden);
  void (***v8)(FIK::CrtAllocator *__hidden);
  void (***v9)(FIK::CrtAllocator *__hidden);
  uint64_t *result;
  uint64_t v11;
  char *v12;
  int v13;
  uint64_t v14;

  v6 = FIK::defaultAllocator(a1);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  a3[3] = (uint64_t)v6;
  v7 = FIK::defaultAllocator((FIK *)v6);
  a3[4] = 0;
  a3[5] = 0;
  a3[6] = 0;
  a3[7] = (uint64_t)v7;
  v8 = FIK::defaultAllocator((FIK *)v7);
  a3[8] = 0;
  a3[9] = 0;
  a3[10] = 0;
  a3[11] = (uint64_t)v8;
  v9 = FIK::defaultAllocator((FIK *)v8);
  a3[12] = 0;
  a3[13] = 0;
  a3[14] = 0;
  a3[15] = (uint64_t)v9;
  FIK::IKArray<FIK::Segment *>::reserve(a3 + 4, a2);
  FIK::IKArray<FIK::Segment *>::reserve(a3 + 8, a2);
  FIK::IKArray<FIK::Segment *>::reserve(a3 + 12, a2);
  result = FIK::IKArray<FIK::Vector>::reserve(a3, a2);
  if (a2)
  {
    v11 = 32 * a2;
    v12 = (char *)a1 + 16;
    do
    {
      FIK::IKArray<FIK::Segment *>::reserve(a3 + 4, a3[4] + 1);
      *(_QWORD *)(a3[6] + 8 * a3[4]++) = *(_QWORD *)v12;
      FIK::IKArray<FIK::Segment *>::reserve(a3 + 8, a3[8] + 1);
      *(_QWORD *)(a3[10] + 8 * a3[8]++) = *((_QWORD *)v12 - 2);
      FIK::IKArray<FIK::Segment *>::reserve(a3 + 12, a3[12] + 1);
      *(_QWORD *)(a3[14] + 8 * a3[12]++) = *((_QWORD *)v12 - 1);
      v13 = *((_DWORD *)v12 + 2);
      result = FIK::IKArray<FIK::Vector>::reserve(a3, *a3 + 1);
      v14 = a3[2] + 16 * *a3;
      *(_QWORD *)v14 = 0;
      *(_DWORD *)(v14 + 8) = v13;
      *(_DWORD *)(v14 + 12) = 0;
      ++*a3;
      v12 += 32;
      v11 -= 32;
    }
    while (v11);
  }
  return result;
}

size_t *FIK::generateHelperHierarchyPose(FIK *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  size_t *result;
  uint64_t v13;
  uint64_t v14;
  void (***v15)(FIK::CrtAllocator *__hidden);
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float32x4_t *v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int32x4_t v29;
  float32x4_t v30;
  int32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  uint64_t v34;
  _OWORD *v35;
  int32x4_t v36;
  _QWORD v37[2];
  uint64_t v38;
  void (***v39)(FIK::CrtAllocator *__hidden);
  size_t v40[2];
  uint64_t v41;
  void (***v42)(FIK::CrtAllocator *__hidden);

  v40[0] = 0;
  v40[1] = 0;
  v41 = 0;
  v42 = FIK::defaultAllocator(a1);
  LOBYTE(v37[0]) = 0;
  result = FIK::IKArray<BOOL>::resize(v40, a7, v37);
  if (a7)
  {
    v13 = 0;
    do
    {
      v14 = *((_QWORD *)a1 + 6);
      v15 = FIK::defaultAllocator((FIK *)result);
      v37[0] = 0;
      v37[1] = 0;
      v38 = 0;
      v39 = v15;
      FIK::IKArray<FIK::Segment *>::reserve(v37, 1uLL);
      v16 = v38;
      *(_QWORD *)(v38 + 8 * v37[0]) = v13;
      v17 = ++v37[0];
      for (i = *(_QWORD *)(v14 + 8 * v13); i != -1; i = *(_QWORD *)(v14 + 8 * i))
      {
        FIK::IKArray<FIK::Segment *>::reserve(v37, v17 + 1);
        v16 = v38;
        *(_QWORD *)(v38 + 8 * v37[0]) = i;
        v17 = ++v37[0];
      }
      if (v17)
      {
        v19 = v16 + 8 * v17;
        v20 = v41;
        do
        {
          v22 = *(_QWORD *)(v19 - 8);
          v19 -= 8;
          v21 = v22;
          if (!*(_BYTE *)(v20 + v22))
          {
            v23 = *(_QWORD *)(*((_QWORD *)a1 + 6) + 8 * v21);
            v24 = *(_QWORD *)(*((_QWORD *)a1 + 14) + 8 * v21);
            v25 = (float32x4_t *)(a2 + 32 * v24);
            if (v23 == -1)
            {
              v33 = *v25;
              *(_OWORD *)(a6 + 32 * v21 + 16) = xmmword_210802BA0;
            }
            else
            {
              FIK::estimateBoneRotationFromVelocity((float32x4_t *)(a2 + 32 * *(_QWORD *)(*((_QWORD *)a1 + 10) + 8 * v21)), v25, (float32x4_t *)(a4 + 32 * v24), 2, (float32x4_t *)&v36);
              v26 = *(float32x4_t *)(*((_QWORD *)a1 + 2) + 16 * v21);
              v27 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v36, v36), (int8x16_t)v36, 0xCuLL);
              v28 = vnegq_f32((float32x4_t)v36);
              v29 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v26, (int32x4_t)v26), (int8x16_t)v26, 0xCuLL), v28), v26, v27);
              v30 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v29, v29), (int8x16_t)v29, 0xCuLL);
              v31 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v30, (int32x4_t)v30), (int8x16_t)v30, 0xCuLL), v28), v30, v27);
              v32.i64[0] = 0x4000000040000000;
              v32.i64[1] = 0x4000000040000000;
              v33 = vaddq_f32(*(float32x4_t *)(a6 + 32 * v23), vmlaq_f32(v26, v32, vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v31, v31), (int8x16_t)v31, 0xCuLL), v30, (float32x4_t)v36, 3)));
              v20 = v41;
              v16 = v38;
            }
            *(float32x4_t *)(a6 + 32 * v21) = v33;
            *(_BYTE *)(v20 + v21) = 1;
          }
        }
        while (v19 != v16);
      }
      else
      {
        v19 = v16;
      }
      v37[0] = 0;
      result = (size_t *)((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v39)[3])(v39, v19, 0, 8);
      ++v13;
    }
    while (v13 != a7);
    v34 = 0;
    v35 = (_OWORD *)(a6 + 16);
    do
    {
      if (*(_QWORD *)(*((_QWORD *)a1 + 6) + 8 * v34) == -1)
        *v35 = *(_OWORD *)(a2 + 32 * *(_QWORD *)(*((_QWORD *)a1 + 14) + 8 * v34) + 16);
      ++v34;
      v35 += 2;
    }
    while (a7 != v34);
  }
  v40[0] = 0;
  if (v41)
    return (size_t *)((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v42)[3])(v42, v41, 0, 8);
  return result;
}

size_t *FIK::IKArray<BOOL>::resize(size_t *result, unint64_t a2, _BYTE *a3)
{
  size_t *v4;
  size_t v6;
  _BYTE *v7;
  size_t v8;

  v4 = result;
  if (*result <= a2)
  {
    result = FIK::IKArray<BOOL>::reserve(result, a2);
    v6 = *v4;
    if (a2 != *v4)
    {
      v7 = (_BYTE *)(v4[2] + v6);
      v8 = v6 - a2;
      do
        *v7++ = *a3;
      while (!__CFADD__(v8++, 1));
    }
  }
  *v4 = a2;
  return result;
}

void IKString::operator+(IKString *a1@<X0>, char *a2@<X1>, FIK::Allocator *a3@<X2>, uint64_t *a4@<X8>)
{
  FIK::Allocator *v6;
  uint64_t v8;
  IKString *v9;
  uint64_t StringBuffer;
  uint64_t v11;
  char *v12;
  _BYTE *v13;
  char v14;
  _BYTE *v15;
  char v16;

  if (a3)
  {
    v6 = a3;
    v8 = *((_QWORD *)a1 + 2);
    v9 = (FIK::Allocator *)((char *)a3 + *((_QWORD *)a1 + 1));
    StringBuffer = IKString::allocateStringBuffer(v9, v8, a3);
    *a4 = StringBuffer;
    a4[1] = (uint64_t)v9;
    a4[2] = v8;
    v11 = *((_QWORD *)a1 + 1);
    if (v11)
    {
      v12 = *(char **)a1;
      v13 = (_BYTE *)StringBuffer;
      do
      {
        v14 = *v12++;
        *v13++ = v14;
        --v11;
      }
      while (v11);
      v11 = *((_QWORD *)a1 + 1);
    }
    v15 = (_BYTE *)(StringBuffer + v11);
    do
    {
      v16 = *a2++;
      *v15++ = v16;
      v6 = (FIK::Allocator *)((char *)v6 - 1);
    }
    while (v6);
  }
  else
  {
    IKString::IKString((IKString *)a4, a1);
  }
}

size_t *FIK::IKArray<BOOL>::reserve(size_t *result, unint64_t a2)
{
  size_t *v2;
  size_t v3;
  size_t v4;
  void *v5;
  size_t v6;

  if (result[1] < a2)
  {
    v2 = result;
    v3 = result[3];
    v4 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v4)
    {
      v5 = (void *)(*(uint64_t (**)(size_t, unint64_t, uint64_t))(*(_QWORD *)v3 + 16))(result[3], (a2 + 7) & 0xFFFFFFFFFFFFFFF8, 1);
      bzero(v5, v4);
    }
    else
    {
      v5 = 0;
    }
    memcpy(v5, (const void *)v2[2], *v2);
    v6 = v2[2];
    result = (size_t *)v2[3];
    v2[1] = v4;
    v2[2] = (size_t)v5;
    v2[3] = v3;
    if (v6)
      return (size_t *)(*(uint64_t (**)(size_t *, size_t, _QWORD, uint64_t))(*result + 24))(result, v6, 0, 8);
  }
  return result;
}

uint64_t ikinema::DoSolveAlgorithmImpl::process(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  NSObject *v7;
  uint64_t RootSegment;
  float32x4_t v10;
  uint64_t v11;
  uint64_t v12;
  float32x4_t *v13;
  uint64_t Segment;
  float32x4_t v15[2];

  v4 = ikinema::BufferContainer::buffer(a3, *(_QWORD *)(a1 + 24));
  v5 = ikinema::Buffer::arrayView<FIK::Transform>(v4);
  *(_DWORD *)(a1 + 8) = 2;
  FIK::IKSolver::solve(*(FIK::Solver ***)(a1 + 16), *(_DWORD *)(a1 + 12), (_DWORD *)(a1 + 8));
  v6 = *(_DWORD *)(a1 + 8);
  if (v6 == 2)
  {
    v7 = ikinemaLogObject()[1];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      ikinema::DoSolveAlgorithmImpl::process(v7);
    return 1;
  }
  else
  {
    if (v6 == 1
      || (RootSegment = FIK::IKSolver::getRootSegment(*(FIK::IKSolver **)(a1 + 16)),
          (*(void (**)(float32x4_t *__return_ptr))(*(_QWORD *)RootSegment + 360))(v15),
          v10 = vmulq_f32(v15[0], v15[0]),
          sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1))).f32[0]) > 5000.0))
    {
      FIK::IKSolver::resetSolver(*(FIK::Solver ***)(a1 + 16));
      FIK::IKSolver::solve(*(FIK::Solver ***)(a1 + 16), *(_DWORD *)(a1 + 12), (_DWORD *)(a1 + 8));
    }
    v11 = FIK::IKSolver::numSegments(*(FIK::IKSolver **)(a1 + 16));
    if (v11)
    {
      v12 = 0;
      v13 = (float32x4_t *)(v5 + 16);
      do
      {
        Segment = FIK::IKSolver::getSegment(*(FIK::IKSolver **)(a1 + 16), v12);
        (*(void (**)(float32x4_t *__return_ptr))(*(_QWORD *)Segment + 360))(v15);
        v13[-1] = v15[0];
        *v13 = v15[1];
        v13 += 2;
        ++v12;
      }
      while (v11 != v12);
    }
    return 0;
  }
}

uint64_t ikinema::DoSolveAlgorithmImpl::registerBuffers(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  if (!*a2)
    return 1;
  v2 = 72 * *a2;
  v3 = (uint64_t *)(a2[2] + 56);
  while (1)
  {
    v4 = *v3;
    v3 += 9;
    if (v4 == *(_QWORD *)(a1 + 24))
      break;
    v2 -= 72;
    if (!v2)
      return 1;
  }
  return 0;
}

_DWORD *ikinema::DoSolveAlgorithm::create@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _DWORD *result;

  result = FIK::FIKAlloc((FIK *)0x20);
  if (result)
  {
    result[2] = 2;
    result[3] = a2;
    *(_QWORD *)result = &off_24CA6C7C0;
    *((_QWORD *)result + 2) = a1;
    *((_QWORD *)result + 3) = a3;
  }
  *a4 = result;
  return result;
}

const char *ikinema::AlgorithmBlockBase<ikinema::DoSolveAlgorithm>::typeId()
{
  const char *result;
  unsigned __int8 *v1;
  uint64_t v2;
  unsigned int v3;

  result = "N7ikinema16DoSolveAlgorithmE";
  if (((unint64_t)"N7ikinema16DoSolveAlgorithmE" & 0x8000000000000000) != 0)
  {
    v1 = (unsigned __int8 *)((unint64_t)"N7ikinema16DoSolveAlgorithmE" & 0x7FFFFFFFFFFFFFFFLL);
    v2 = 5381;
    do
    {
      result = (const char *)v2;
      v3 = *v1++;
      v2 = (33 * v2) ^ v3;
    }
    while (v3);
  }
  return result;
}

void ikinema::DoSolveAlgorithmImpl::~DoSolveAlgorithmImpl(ikinema::DoSolveAlgorithmImpl *this)
{
  JUMPOUT(0x212BCAFB4);
}

uint64_t ikinema::DoSolveAlgorithm::isRemovable(ikinema::DoSolveAlgorithm *this)
{
  return 0;
}

const char *ikinema::DoSolveAlgorithmImpl::name(ikinema::DoSolveAlgorithmImpl *this)
{
  return "DoSolve";
}

__n128 FIK::MoCapTaskFactory::hipsTask@<Q0>(FIK::MoCapTaskFactory *this@<X0>, FIK::Allocator *a2@<X1>, FIK::RigTask *a3@<X8>)
{
  uint64_t v4;
  __n128 result;

  FIK::RigTask::RigTask(a3, this);
  *(_QWORD *)(v4 + 176) = 0;
  *(_QWORD *)(v4 + 184) = 0;
  *(_QWORD *)(v4 + 192) = this;
  *(_DWORD *)(v4 + 200) = -1;
  *(_QWORD *)(v4 + 208) = 0;
  *(_QWORD *)(v4 + 216) = 0;
  *(_OWORD *)(v4 + 224) = xmmword_210802BA0;
  *(_OWORD *)(v4 + 240) = xmmword_2108040F0;
  *(_WORD *)(v4 + 204) = 1;
  *(_WORD *)(v4 + 52) = 257;
  __asm { FMOV            V0.4S, #30.0 }
  *(__n128 *)(v4 + 80) = result;
  *(__n128 *)(v4 + 96) = result;
  return result;
}

__n128 FIK::MoCapTaskFactory::headTask@<Q0>(FIK::MoCapTaskFactory *this@<X0>, FIK::Allocator *a2@<X1>, FIK::RigTask *a3@<X8>)
{
  uint64_t v4;
  __n128 result;

  FIK::RigTask::RigTask(a3, this);
  *(_QWORD *)(v4 + 176) = 0;
  *(_QWORD *)(v4 + 184) = 0;
  *(_QWORD *)(v4 + 192) = this;
  *(_DWORD *)(v4 + 200) = -1;
  *(_QWORD *)(v4 + 208) = 0;
  *(_QWORD *)(v4 + 216) = 0;
  *(_OWORD *)(v4 + 224) = xmmword_210802BA0;
  *(_OWORD *)(v4 + 240) = xmmword_2108040F0;
  *(_WORD *)(v4 + 204) = 1;
  *(_WORD *)(v4 + 52) = 257;
  __asm
  {
    FMOV            V0.4S, #1.0
    FMOV            V1.4S, #30.0
  }
  *(__n128 *)(v4 + 80) = result;
  *(_OWORD *)(v4 + 96) = _Q1;
  return result;
}

__n128 FIK::MoCapTaskFactory::chestTask@<Q0>(FIK::MoCapTaskFactory *this@<X0>, FIK::Allocator *a2@<X1>, FIK::RigTask *a3@<X8>)
{
  uint64_t v4;
  __n128 result;

  FIK::RigTask::RigTask(a3, this);
  *(_QWORD *)(v4 + 176) = 0;
  *(_QWORD *)(v4 + 184) = 0;
  *(_QWORD *)(v4 + 192) = this;
  *(_DWORD *)(v4 + 200) = -1;
  *(_QWORD *)(v4 + 208) = 0;
  *(_QWORD *)(v4 + 216) = 0;
  *(_OWORD *)(v4 + 224) = xmmword_210802BA0;
  *(_OWORD *)(v4 + 240) = xmmword_2108040F0;
  *(_WORD *)(v4 + 204) = 1;
  *(_WORD *)(v4 + 52) = 257;
  __asm { FMOV            V0.4S, #20.0 }
  *(__n128 *)(v4 + 80) = result;
  *(__n128 *)(v4 + 96) = result;
  return result;
}

__n128 FIK::MoCapTaskFactory::kneeTask@<Q0>(FIK::MoCapTaskFactory *this@<X0>, FIK::Allocator *a2@<X1>, FIK::RigTask *a3@<X8>)
{
  uint64_t v4;
  __n128 result;

  FIK::RigTask::RigTask(a3, this);
  *(_QWORD *)(v4 + 176) = 0;
  *(_QWORD *)(v4 + 184) = 0;
  *(_QWORD *)(v4 + 192) = this;
  *(_DWORD *)(v4 + 200) = -1;
  *(_QWORD *)(v4 + 208) = 0;
  *(_QWORD *)(v4 + 216) = 0;
  *(_OWORD *)(v4 + 224) = xmmword_210802BA0;
  *(_OWORD *)(v4 + 240) = xmmword_2108040F0;
  *(_WORD *)(v4 + 204) = 1;
  *(_BYTE *)(v4 + 54) = 0;
  *(_WORD *)(v4 + 52) = 257;
  __asm
  {
    FMOV            V0.4S, #5.0
    FMOV            V1.4S, #30.0
  }
  *(__n128 *)(v4 + 80) = result;
  *(_OWORD *)(v4 + 96) = _Q1;
  return result;
}

uint64_t FIK::Utils::ContainsNaN()
{
  return 0;
}

{
  return 0;
}

BOOL FIK::Utils::ContainsNaN(float32x4_t *a1)
{
  return (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8(vorrq_s8((int8x16_t)vcltzq_f32(a1[1]), (int8x16_t)vcgezq_f32(a1[1]))))) & 1) != 0;
}

void FIK::Utils::BlendToTarget(float32x4_t *a1@<X0>, float32x4_t *a2@<X1>, float32x4_t *a3@<X8>, float a4@<S0>, float a5@<S1>)
{
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float v13;
  float v14;
  float32x4_t v15;
  int8x16_t v16;
  float32x4_t v17;
  int8x16_t v18;
  float v19;
  float v20;
  BOOL v21;
  float v22;
  float v23;
  float32x2_t v24;
  float32x2_t v25;
  float v26;
  float32x4_t v27;
  float v28;
  float v29;
  float v30;
  float32x4_t v31;
  int8x16_t v32;
  float32x2_t v33;
  float32x4_t v34;
  float32x4_t v35;
  unsigned __int32 v36;
  float32x2_t v37;
  float32x2_t v38;
  int8x16_t v39;
  float32x2_t v40;
  unsigned __int32 v41;
  float32x2_t v42;
  float32x2_t v43;
  float32x4_t v44;
  float v45;
  float v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;

  if (a4 <= 0.0)
  {
    v7 = *a1;
    goto LABEL_5;
  }
  if (a4 < 1.0)
  {
    v7 = vaddq_f32(*a1, vmulq_n_f32(vsubq_f32(*a2, *a1), a4));
LABEL_5:
    v49 = v7;
    goto LABEL_7;
  }
  v49 = *a2;
LABEL_7:
  v8 = a1[1];
  v9 = a2[1];
  v10 = vmulq_f32(v8, v9);
  v11 = (float32x4_t)vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL);
  *(float32x2_t *)v10.f32 = vadd_f32(*(float32x2_t *)v10.f32, *(float32x2_t *)v11.f32);
  v10.f32[0] = vaddv_f32(*(float32x2_t *)v10.f32);
  v11.i32[0] = 0;
  v12 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v10, v11)), 0), (int8x16_t)vnegq_f32(v9), (int8x16_t)v9);
  v13 = 1.0;
  v14 = 1.0 - a5;
  v15 = vsubq_f32(v8, v12);
  v16 = (int8x16_t)vmulq_f32(v15, v15);
  v47 = v12;
  v48 = v8;
  v17 = vaddq_f32(v8, v12);
  v18 = (int8x16_t)vmulq_f32(v17, v17);
  v19 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v16.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v18.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL)))));
  v20 = v19 + v19;
  v21 = (float)(v19 + v19) == 0.0;
  v22 = 1.0;
  if (!v21)
    v22 = sinf(v20) / v20;
  v23 = v22;
  v24 = vrecpe_f32((float32x2_t)LODWORD(v22));
  v25 = vmul_f32(v24, vrecps_f32((float32x2_t)LODWORD(v23), v24));
  LODWORD(v26) = vmul_f32(v25, vrecps_f32((float32x2_t)LODWORD(v23), v25)).u32[0];
  if ((float)(v14 * v20) != 0.0)
  {
    v45 = v26;
    v25.f32[0] = sinf(v14 * v20);
    v26 = v45;
    v13 = v25.f32[0] / (float)(v14 * v20);
  }
  v25.f32[0] = v14 * (float)(v26 * v13);
  v27 = (float32x4_t)vdupq_lane_s32((int32x2_t)v25, 0);
  v28 = v20 * a5;
  v29 = 1.0;
  if (v28 != 0.0)
  {
    v44 = v27;
    v46 = v26;
    v30 = sinf(v28);
    v27 = v44;
    v26 = v46;
    v29 = v30 / v28;
  }
  v31 = vmlaq_f32(vmulq_n_f32(v47, (float)(v26 * v29) * a5), v48, v27);
  v32 = (int8x16_t)vmulq_f32(v31, v31);
  v33 = vadd_f32(*(float32x2_t *)v32.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL));
  v34 = (float32x4_t)xmmword_210802BA0;
  v35 = (float32x4_t)xmmword_210802BA0;
  if (vaddv_f32(v33) != 0.0)
  {
    v36 = vadd_f32(v33, (float32x2_t)vdup_lane_s32((int32x2_t)v33, 1)).u32[0];
    v37 = vrsqrte_f32((float32x2_t)v36);
    v38 = vmul_f32(v37, vrsqrts_f32((float32x2_t)v36, vmul_f32(v37, v37)));
    v35 = vmulq_n_f32(v31, vmul_f32(v38, vrsqrts_f32((float32x2_t)v36, vmul_f32(v38, v38))).f32[0]);
  }
  v39 = (int8x16_t)vmulq_f32(v35, v35);
  v40 = vadd_f32(*(float32x2_t *)v39.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v39, v39, 8uLL));
  if (vaddv_f32(v40) != 0.0)
  {
    v41 = vadd_f32(v40, (float32x2_t)vdup_lane_s32((int32x2_t)v40, 1)).u32[0];
    v42 = vrsqrte_f32((float32x2_t)v41);
    v43 = vmul_f32(v42, vrsqrts_f32((float32x2_t)v41, vmul_f32(v42, v42)));
    v34 = vmulq_n_f32(v35, vmul_f32(v43, vrsqrts_f32((float32x2_t)v41, vmul_f32(v43, v43))).f32[0]);
  }
  *a3 = v49;
  a3[1] = v34;
}

float32x4_t FIK::Utils::BlendWithTarget@<Q0>(float32x4_t *a1@<X0>, float32x4_t *a2@<X1>, float32x4_t *a3@<X8>, float a4@<S0>, float a5@<S1>)
{
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float v11;
  float v12;
  float32x4_t v13;
  int8x16_t v14;
  float32x4_t v15;
  int8x16_t v16;
  float v17;
  float v18;
  BOOL v19;
  float v20;
  float v21;
  float32x2_t v22;
  float32x2_t v23;
  float v24;
  float32x4_t v25;
  float v26;
  float v27;
  float v28;
  float32x4_t v29;
  float32x4_t v30;
  int8x16_t v31;
  float32x2_t v32;
  float32x4_t v33;
  unsigned __int32 v34;
  float32x2_t v35;
  float32x2_t v36;
  int8x16_t v37;
  float32x2_t v38;
  unsigned __int32 v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x4_t result;
  float32x4_t v43;
  float v44;
  float v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;

  v47 = *a2;
  v48 = *a1;
  v7 = a2[1];
  v8 = vmulq_f32(v7, (float32x4_t)xmmword_210802BA0);
  v9 = (float32x4_t)vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL);
  *(float32x2_t *)v8.f32 = vadd_f32(*(float32x2_t *)v8.f32, *(float32x2_t *)v9.f32);
  v8.f32[0] = vaddv_f32(*(float32x2_t *)v8.f32);
  v9.i32[0] = 0;
  v10 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v8, v9)), 0), (int8x16_t)vnegq_f32(v7), (int8x16_t)v7);
  v11 = 1.0;
  v12 = 1.0 - a5;
  v13 = vsubq_f32((float32x4_t)xmmword_210802BA0, v10);
  v14 = (int8x16_t)vmulq_f32(v13, v13);
  v46 = v10;
  v15 = vaddq_f32(v10, (float32x4_t)xmmword_210802BA0);
  v16 = (int8x16_t)vmulq_f32(v15, v15);
  v17 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v14.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v16.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL)))));
  v18 = v17 + v17;
  v19 = (float)(v17 + v17) == 0.0;
  v20 = 1.0;
  if (!v19)
    v20 = sinf(v18) / v18;
  v21 = v20;
  v22 = vrecpe_f32((float32x2_t)LODWORD(v20));
  v23 = vmul_f32(v22, vrecps_f32((float32x2_t)LODWORD(v21), v22));
  LODWORD(v24) = vmul_f32(v23, vrecps_f32((float32x2_t)LODWORD(v21), v23)).u32[0];
  if ((float)(v12 * v18) != 0.0)
  {
    v44 = v24;
    v23.f32[0] = sinf(v12 * v18);
    v24 = v44;
    v11 = v23.f32[0] / (float)(v12 * v18);
  }
  v23.f32[0] = v12 * (float)(v24 * v11);
  v25 = (float32x4_t)vdupq_lane_s32((int32x2_t)v23, 0);
  v26 = v18 * a5;
  v27 = 1.0;
  if (v26 != 0.0)
  {
    v43 = v25;
    v45 = v24;
    v28 = sinf(v26);
    v25 = v43;
    v24 = v45;
    v27 = v28 / v26;
  }
  v29 = (float32x4_t)xmmword_210802BA0;
  v30 = vmlaq_f32(vmulq_n_f32(v46, (float)(v24 * v27) * a5), (float32x4_t)xmmword_210802BA0, v25);
  v31 = (int8x16_t)vmulq_f32(v30, v30);
  v32 = vadd_f32(*(float32x2_t *)v31.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL));
  v33 = (float32x4_t)xmmword_210802BA0;
  if (vaddv_f32(v32) != 0.0)
  {
    v34 = vadd_f32(v32, (float32x2_t)vdup_lane_s32((int32x2_t)v32, 1)).u32[0];
    v35 = vrsqrte_f32((float32x2_t)v34);
    v36 = vmul_f32(v35, vrsqrts_f32((float32x2_t)v34, vmul_f32(v35, v35)));
    v33 = vmulq_n_f32(v30, vmul_f32(v36, vrsqrts_f32((float32x2_t)v34, vmul_f32(v36, v36))).f32[0]);
  }
  v37 = (int8x16_t)vmulq_f32(v33, v33);
  v38 = vadd_f32(*(float32x2_t *)v37.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v37, v37, 8uLL));
  if (vaddv_f32(v38) != 0.0)
  {
    v39 = vadd_f32(v38, (float32x2_t)vdup_lane_s32((int32x2_t)v38, 1)).u32[0];
    v40 = vrsqrte_f32((float32x2_t)v39);
    v41 = vmul_f32(v40, vrsqrts_f32((float32x2_t)v39, vmul_f32(v40, v40)));
    v29 = vmulq_n_f32(v33, vmul_f32(v41, vrsqrts_f32((float32x2_t)v39, vmul_f32(v41, v41))).f32[0]);
  }
  result = vaddq_f32(v48, vmulq_n_f32(vsubq_f32(v47, v48), a4));
  *a3 = result;
  a3[1] = v29;
  return result;
}

__n128 FIK::Utils::BlendWithOffset@<Q0>(float32x4_t *a1@<X0>, float32x4_t *a2@<X1>, __n128 *a3@<X8>, float a4@<S0>, float a5@<S1>)
{
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float v14;
  float v15;
  float32x4_t v16;
  int8x16_t v17;
  float32x4_t v18;
  int8x16_t v19;
  float v20;
  float v21;
  BOOL v22;
  float v23;
  float v24;
  float32x2_t v25;
  float32x2_t v26;
  float v27;
  float32x4_t v28;
  float v29;
  float v30;
  float v31;
  float32x4_t v32;
  float32x4_t v33;
  int8x16_t v34;
  float32x2_t v35;
  float32x4_t v36;
  unsigned __int32 v37;
  float32x2_t v38;
  float32x2_t v39;
  float32x4_t v40;
  int32x4_t v41;
  int8x16_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  int8x16_t v46;
  float32x2_t v47;
  unsigned __int32 v48;
  float32x2_t v49;
  float32x2_t v50;
  __n128 result;
  float32x4_t v52;
  float v53;
  float v54;
  float32x4_t v55;
  __n128 v56;

  v8 = *a1;
  if (a4 <= 0.0)
    goto LABEL_4;
  v9 = vaddq_f32(v8, *a2);
  if (a4 < 1.0)
  {
    v8 = vaddq_f32(v8, vmulq_n_f32(vsubq_f32(v9, v8), a4));
LABEL_4:
    v56 = (__n128)v8;
    goto LABEL_6;
  }
  v56 = (__n128)v9;
LABEL_6:
  v10 = a2[1];
  v11 = vmulq_f32(v10, (float32x4_t)xmmword_210802BA0);
  v12 = (float32x4_t)vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL);
  *(float32x2_t *)v11.f32 = vadd_f32(*(float32x2_t *)v11.f32, *(float32x2_t *)v12.f32);
  v11.f32[0] = vaddv_f32(*(float32x2_t *)v11.f32);
  v12.i32[0] = 0;
  v13 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v11, v12)), 0), (int8x16_t)vnegq_f32(v10), (int8x16_t)v10);
  v14 = 1.0;
  v15 = 1.0 - a5;
  v16 = vsubq_f32((float32x4_t)xmmword_210802BA0, v13);
  v17 = (int8x16_t)vmulq_f32(v16, v16);
  v55 = v13;
  v18 = vaddq_f32(v13, (float32x4_t)xmmword_210802BA0);
  v19 = (int8x16_t)vmulq_f32(v18, v18);
  v20 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v17.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v19.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL)))));
  v21 = v20 + v20;
  v22 = (float)(v20 + v20) == 0.0;
  v23 = 1.0;
  if (!v22)
    v23 = sinf(v21) / v21;
  v24 = v23;
  v25 = vrecpe_f32((float32x2_t)LODWORD(v23));
  v26 = vmul_f32(v25, vrecps_f32((float32x2_t)LODWORD(v24), v25));
  LODWORD(v27) = vmul_f32(v26, vrecps_f32((float32x2_t)LODWORD(v24), v26)).u32[0];
  if ((float)(v15 * v21) != 0.0)
  {
    v53 = v27;
    v26.f32[0] = sinf(v15 * v21);
    v27 = v53;
    v14 = v26.f32[0] / (float)(v15 * v21);
  }
  v26.f32[0] = v15 * (float)(v27 * v14);
  v28 = (float32x4_t)vdupq_lane_s32((int32x2_t)v26, 0);
  v29 = v21 * a5;
  v30 = 1.0;
  if (v29 != 0.0)
  {
    v52 = v28;
    v54 = v27;
    v31 = sinf(v29);
    v28 = v52;
    v27 = v54;
    v30 = v31 / v29;
  }
  v32 = (float32x4_t)xmmword_210802BA0;
  v33 = vmlaq_f32(vmulq_n_f32(v55, (float)(v27 * v30) * a5), (float32x4_t)xmmword_210802BA0, v28);
  v34 = (int8x16_t)vmulq_f32(v33, v33);
  v35 = vadd_f32(*(float32x2_t *)v34.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL));
  v36 = (float32x4_t)xmmword_210802BA0;
  if (vaddv_f32(v35) != 0.0)
  {
    v37 = vadd_f32(v35, (float32x2_t)vdup_lane_s32((int32x2_t)v35, 1)).u32[0];
    v38 = vrsqrte_f32((float32x2_t)v37);
    v39 = vmul_f32(v38, vrsqrts_f32((float32x2_t)v37, vmul_f32(v38, v38)));
    v36 = vmulq_n_f32(v33, vmul_f32(v39, vrsqrts_f32((float32x2_t)v37, vmul_f32(v39, v39))).f32[0]);
  }
  v40 = a1[1];
  v41 = (int32x4_t)vnegq_f32(v36);
  v42 = (int8x16_t)vtrn2q_s32((int32x4_t)v36, vtrn1q_s32((int32x4_t)v36, v41));
  v43 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v36, (int8x16_t)v41, 8uLL), *(float32x2_t *)v40.f32, 1), (float32x4_t)vextq_s8(v42, v42, 8uLL), v40.f32[0]);
  v44 = (float32x4_t)vrev64q_s32((int32x4_t)v36);
  v44.i32[0] = v41.i32[1];
  v44.i32[3] = v41.i32[2];
  v45 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v36, v40, 3), v44, v40, 2), v43);
  v46 = (int8x16_t)vmulq_f32(v45, v45);
  v47 = vadd_f32(*(float32x2_t *)v46.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v46, v46, 8uLL));
  if (vaddv_f32(v47) != 0.0)
  {
    v48 = vadd_f32(v47, (float32x2_t)vdup_lane_s32((int32x2_t)v47, 1)).u32[0];
    v49 = vrsqrte_f32((float32x2_t)v48);
    v50 = vmul_f32(v49, vrsqrts_f32((float32x2_t)v48, vmul_f32(v49, v49)));
    v32 = vmulq_n_f32(v45, vmul_f32(v50, vrsqrts_f32((float32x2_t)v48, vmul_f32(v50, v50))).f32[0]);
  }
  result = v56;
  *a3 = v56;
  a3[1] = (__n128)v32;
  return result;
}

float FIK::Utils::GetUpElement(float *a1, int a2)
{
  float result;

  switch(a2)
  {
    case 0:
    case 3:
      result = *a1;
      break;
    case 1:
    case 4:
    case 5:
      result = a1[1];
      break;
    case 2:
      result = a1[2];
      break;
    default:
      result = -1.0;
      break;
  }
  return result;
}

float *FIK::Utils::SetUpElement(float *result, int a2, float a3)
{
  switch(a2)
  {
    case 0:
      goto LABEL_3;
    case 1:
      goto LABEL_5;
    case 2:
      goto LABEL_7;
    case 3:
      a3 = -a3;
LABEL_3:
      *result = a3;
      return result;
    case 4:
      a3 = -a3;
LABEL_5:
      result[1] = a3;
      break;
    case 5:
      a3 = -a3;
LABEL_7:
      result[2] = a3;
      break;
    default:
      return result;
  }
  return result;
}

{
  switch(a2)
  {
    case 0:
      goto LABEL_3;
    case 1:
      goto LABEL_5;
    case 2:
      goto LABEL_7;
    case 3:
      a3 = -a3;
LABEL_3:
      *result = a3;
      return result;
    case 4:
      a3 = -a3;
LABEL_5:
      result[1] = a3;
      break;
    case 5:
      a3 = -a3;
LABEL_7:
      result[2] = a3;
      break;
    default:
      return result;
  }
  return result;
}

float *FIK::Utils::AddToUpElement(float *result, int a2, float a3)
{
  float v3;
  float v4;
  float v5;

  switch(a2)
  {
    case 0:
      v3 = *result + a3;
      goto LABEL_6;
    case 1:
      v4 = result[1] + a3;
      goto LABEL_8;
    case 2:
      v5 = result[2] + a3;
      goto LABEL_10;
    case 3:
      v3 = *result - a3;
LABEL_6:
      *result = v3;
      return result;
    case 4:
      v4 = result[1] - a3;
LABEL_8:
      result[1] = v4;
      break;
    case 5:
      v5 = result[2] - a3;
LABEL_10:
      result[2] = v5;
      break;
    default:
      return result;
  }
  return result;
}

float FIK::Utils::GetPlaneOffset(float *a1, float *a2, float *a3)
{
  return (float)((float)(a1[1] * (float)(a3[1] - a2[1])) + (float)(*a1 * (float)(*a3 - *a2)))
       + (float)(a1[2] * (float)(a3[2] - a2[2]));
}

float *FIK::Utils::SetUpElementAbs(float *result, int a2, float a3)
{
  switch(a2)
  {
    case 0:
    case 3:
      *result = a3;
      break;
    case 1:
    case 4:
      result[1] = a3;
      break;
    case 2:
    case 5:
      result[2] = a3;
      break;
    default:
      return result;
  }
  return result;
}

BOOL FIK::Utils::PointAIsHigherThanB(unsigned int a1, float a2, float a3)
{
  if (a1 >= 3)
    return a3 > a2;
  else
    return a2 > a3;
}

BOOL FIK::Utils::PointAIsHigherThanB(float *a1, float *a2, unsigned int a3)
{
  float v3;
  float v4;

  switch(a3)
  {
    case 0u:
    case 3u:
      v3 = *a1;
      v4 = *a2;
      break;
    case 1u:
    case 4u:
    case 5u:
      v3 = a1[1];
      v4 = a2[1];
      break;
    case 2u:
      v3 = a1[2];
      v4 = a2[2];
      break;
    default:
      v3 = -1.0;
      v4 = -1.0;
      break;
  }
  if (a3 >= 3)
    return v4 > v3;
  else
    return v3 > v4;
}

uint64_t ikinema::JointCollection::elementCount(FIK::AnimNode **this)
{
  return FIK::AnimNode::jointsCount(*this);
}

uint64_t ikinema::JointCollection::element(FIK::AnimNode **this, unint64_t a2)
{
  return FIK::AnimNode::jointByIndex(*this, a2);
}

uint64_t ikinema::ConstraintCollection::elementCount(ikinema::ConstraintCollection *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 40))(*(_QWORD *)this);
}

uint64_t ikinema::ConstraintCollection::element(ikinema::ConstraintCollection *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 48))(*(_QWORD *)this);
}

uint64_t FIK::FeetSliding::SlidingTask::SetTaskTarget(float32x4_t *a1, float32x4_t *a2, float32x4_t a3)
{
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float v9;
  _BOOL4 v10;
  _BOOL4 v11;
  float32x4_t v12;
  float v13;
  float v14;
  float v15;
  float v16;
  BOOL v17;
  float v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  int8x16_t v23;
  float32x4_t v24;
  int8x16_t v25;
  float v26;
  float v27;
  BOOL v28;
  float v29;
  float v30;
  float32x2_t v31;
  float32x2_t v32;
  float v33;
  float v34;
  float32x4_t v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float32x4_t v40;
  int8x16_t v41;
  float32x2_t v42;
  float32x4_t v43;
  unsigned __int32 v44;
  float32x2_t v45;
  float32x2_t v46;
  uint64_t v47;
  uint64_t result;
  float v49;
  float v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float v54;
  float32x4_t v55;
  float v56;
  float32x4_t v57;
  float32x4_t v58;

  v4 = a2[1];
  v57 = *a2;
  v58 = v4;
  v5 = v57;
  if (a1[5].i8[5])
  {
    v6 = a1[7];
    v7 = vdivq_f32(vsubq_f32(v57, v6), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a3.f32, 0));
    v8 = vmulq_f32(v7, v7);
    v9 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v8, 2), vaddq_f32(v8, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 1))).f32[0]);
    if (!a1[6].i8[4] && v9 <= (float)(a1[5].f32[2] / a3.f32[0]))
    {
      a1[6].i8[4] = 1;
LABEL_11:
      a1[8] = v6;
      v12 = a1[9];
      a1[10] = v12;
      v57 = v6;
      v58 = v12;
      a1[11].i32[0] = 0;
      v5 = v6;
      goto LABEL_28;
    }
    v10 = a1[6].u8[4] == 0;
    if (v9 < (float)(a1[5].f32[3] / a3.f32[0]))
      v10 = 1;
    if (a1[6].i8[4])
      v11 = v10;
    else
      v11 = 0;
    a1[6].i8[4] = v11;
    if (v11)
      goto LABEL_11;
    v13 = 1.0;
    v14 = a1[11].f32[0];
    v15 = v14 + (float)(1.0 / (float)a1[6].i32[0]);
    if (v15 <= 1.0)
      v16 = v14 + (float)(1.0 / (float)a1[6].i32[0]);
    else
      v16 = 1.0;
    v17 = v15 < 0.0;
    a3.i32[0] = 0;
    if (v17)
      v18 = 0.0;
    else
      v18 = v16;
    a1[11].f32[0] = v18;
    v56 = v18;
    v54 = 1.0 - v18;
    v51 = vaddq_f32(vmulq_n_f32(v5, v18), vmulq_n_f32(a1[8], 1.0 - v18));
    v57 = v51;
    v19 = a1[10];
    v20 = vmulq_f32(v4, v19);
    *(float32x2_t *)v20.f32 = vadd_f32(*(float32x2_t *)v20.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL));
    v20.f32[0] = vaddv_f32(*(float32x2_t *)v20.f32);
    v21 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v20, a3)), 0), (int8x16_t)vnegq_f32(v4), (int8x16_t)v4);
    v22 = vsubq_f32(v19, v21);
    v23 = (int8x16_t)vmulq_f32(v22, v22);
    v52 = v21;
    v53 = v19;
    v24 = vaddq_f32(v19, v21);
    v25 = (int8x16_t)vmulq_f32(v24, v24);
    v26 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v23.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v25.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL)))));
    v27 = v26 + v26;
    v28 = (float)(v26 + v26) == 0.0;
    v29 = 1.0;
    if (!v28)
      v29 = sinf(v27) / v27;
    v30 = v29;
    v31 = vrecpe_f32((float32x2_t)LODWORD(v29));
    v32 = vmul_f32(v31, vrecps_f32((float32x2_t)LODWORD(v30), v31));
    LODWORD(v33) = vmul_f32(v32, vrecps_f32((float32x2_t)LODWORD(v30), v32)).u32[0];
    v34 = v54;
    if ((float)(v54 * v27) != 0.0)
    {
      v49 = v33;
      v32.f32[0] = sinf(v54 * v27);
      v33 = v49;
      v34 = v54;
      v13 = v32.f32[0] / (float)(v54 * v27);
    }
    v32.f32[0] = v34 * (float)(v33 * v13);
    v35 = (float32x4_t)vdupq_lane_s32((int32x2_t)v32, 0);
    v36 = v56;
    v37 = v56 * v27;
    v38 = 1.0;
    if (v37 != 0.0)
    {
      v50 = v33;
      v55 = v35;
      v39 = sinf(v37);
      v35 = v55;
      v36 = v56;
      v33 = v50;
      v38 = v39 / v37;
    }
    v40 = vmlaq_f32(vmulq_n_f32(v52, v36 * (float)(v33 * v38)), v53, v35);
    v41 = (int8x16_t)vmulq_f32(v40, v40);
    v42 = vadd_f32(*(float32x2_t *)v41.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL));
    if (vaddv_f32(v42) == 0.0)
    {
      v43 = (float32x4_t)xmmword_210802BA0;
    }
    else
    {
      v44 = vadd_f32(v42, (float32x2_t)vdup_lane_s32((int32x2_t)v42, 1)).u32[0];
      v45 = vrsqrte_f32((float32x2_t)v44);
      v46 = vmul_f32(v45, vrsqrts_f32((float32x2_t)v44, vmul_f32(v45, v45)));
      v43 = vmulq_n_f32(v40, vmul_f32(v46, vrsqrts_f32((float32x2_t)v44, vmul_f32(v46, v46))).f32[0]);
    }
    v5 = v51;
    v58 = v43;
  }
LABEL_28:
  a1[7] = v5;
  a1[9] = v58;
  v47 = a1->i64[1];
  if (v47)
    (*(void (**)(uint64_t, float32x4_t *))(*(_QWORD *)v47 + 248))(v47, &v57);
  result = a1[1].i64[0];
  if (result)
    return (*(uint64_t (**)(uint64_t, float32x4_t *))(*(_QWORD *)result + 248))(result, &v58);
  return result;
}

uint64_t FIK::FeetSliding::SlidingTask::setPositionTarget(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 248))(result);
  return result;
}

uint64_t FIK::FeetSliding::SlidingTask::setOrientationTarget(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 248))(result);
  return result;
}

uint64_t FIK::FeetSliding::SlidingTask::SlidingTask(uint64_t a1, IKString *a2, char *a3, uint64_t a4, int a5, _OWORD *a6)
{
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  IKString::operator+(a2, "_Task", (FIK::Allocator *)5, &v15);
  *(_QWORD *)a1 = &unk_24CA6C6F8;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  IKString::IKString((uint64_t *)(a1 + 24), &v15, v17);
  if (v16)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v17 + 24))(v17, v15, 0, 8);
    v15 = 0;
    v16 = 0;
  }
  *(_QWORD *)a1 = &off_24CA6B168;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 64) = xmmword_210802BA0;
  *(_DWORD *)(a1 + 80) = a5;
  *(_OWORD *)(a1 + 84) = *a6;
  *(_BYTE *)(a1 + 100) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = xmmword_210802BA0;
  *(_OWORD *)(a1 + 160) = xmmword_210802BA0;
  *(_DWORD *)(a1 + 176) = 1065353216;
  v11 = (*(uint64_t (**)(char *))(*(_QWORD *)&a3[*(_QWORD *)(*(_QWORD *)a3 - 264)] + 200))(&a3[*(_QWORD *)(*(_QWORD *)a3 - 264)]);
  v12 = (_OWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 512))(v11);
  v13 = v12[1];
  *(_OWORD *)(a1 + 112) = *v12;
  *(_OWORD *)(a1 + 144) = v13;
  return a1;
}

uint64_t FIK::FeetSliding::SlidingTask::setTarget(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 248))(v4, a2);
  result = *(_QWORD *)(a1 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 248))(result, a2 + 16);
  return result;
}

__n128 FIK::FeetSliding::SlidingTask::setOffset(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_OWORD *)(a1 + 48) = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t FIK::FeetSliding::SlidingTask::getOffset(FIK::FeetSliding::SlidingTask *this)
{
  return (uint64_t)this + 48;
}

uint64_t FIK::FeetSliding::FeetSliding(uint64_t a1, uint64_t a2)
{
  FIK *v3;
  void (***v4)(FIK::CrtAllocator *__hidden);
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  float32x4_t *v9;
  const FIK::Segment **v10;
  uint64_t Segment;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  _QWORD v17[5];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v3 = (FIK *)FIK::AnimNode::AnimNode(a1, a2);
  *(_QWORD *)v3 = off_24CA6B1A0;
  v4 = FIK::defaultAllocator(v3);
  *(_QWORD *)(a1 + 472) = 0;
  *(_QWORD *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 496) = v4;
  v5 = *(_QWORD *)(a1 + 352);
  if (v5)
  {
    v6 = 0;
    v7 = 360;
    do
    {
      v8 = (_OWORD *)(*(_QWORD *)(a1 + 368) + v7);
      if (!v6 || *(_BYTE *)v8)
      {
        v9 = FIK::IKSolver::addPositionTask((FIK::Solver **)(a1 + 16), (const IKString *)(v8 - 22));
        (*(void (**)(char *, float))(*(uint64_t *)((char *)v9->i64 + *(_QWORD *)(v9->i64[0] - 264)) + 72))((char *)v9 + *(_QWORD *)(v9->i64[0] - 264), 20.0);
        (*(void (**)(char *, float))(*(uint64_t *)((char *)v9->i64 + *(_QWORD *)(v9->i64[0] - 264)) + 96))((char *)v9 + *(_QWORD *)(v9->i64[0] - 264), 2.0);
        v10 = FIK::IKSolver::addOrientationTask((FIK::Solver **)(a1 + 16), (_QWORD *)v8 - 44);
        (*(void (***)(char *, float))((char *)v10 + *((_QWORD *)*v10 - 33)))[9]((char *)v10 + *((_QWORD *)*v10 - 33), 20.0);
        (*(void (***)(char *, float))((char *)v10 + *((_QWORD *)*v10 - 33)))[12]((char *)v10 + *((_QWORD *)*v10 - 33), 2.0);
        Segment = FIK::IKSolver::getSegment((FIK::IKSolver *)(a1 + 16), v6);
        (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)Segment + 16))(Segment, 1, 0);
        v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Segment + 392))(Segment);
        if (v12)
        {
          v13 = v12;
          (*(void (**)(uint64_t, float))(*(_QWORD *)v12 + 712))(v12, 0.3);
          v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 392))(v13);
          if (v14)
            (*(void (**)(uint64_t, float))(*(_QWORD *)v14 + 712))(v14, 0.3);
        }
        FIK::FeetSliding::SlidingTask::SlidingTask((uint64_t)v17, (IKString *)(v8 - 22), (char *)v9, (uint64_t)v10, v6, v8);
        v15 = FIK::IKArray<FIK::FeetSliding::SlidingTask>::push_back<FIK::FeetSliding::SlidingTask,void>((_QWORD *)(a1 + 472), (uint64_t)v17);
        v17[0] = &unk_24CA6C6F8;
        if (v17[4])
          (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t, float))(*(_QWORD *)v18 + 24))(v18, v17[3], 0, 8, v15);
        v5 = *(_QWORD *)(a1 + 352);
      }
      ++v6;
      v7 += 544;
    }
    while (v5 > v6);
  }
  return a1;
}

float FIK::IKArray<FIK::FeetSliding::SlidingTask>::push_back<FIK::FeetSliding::SlidingTask,void>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  float result;

  FIK::IKArray<FIK::FeetSliding::SlidingTask>::reserve((uint64_t)a1, *a1 + 1);
  v4 = a1[2] + 192 * *a1;
  *(_QWORD *)v4 = &unk_24CA6C6F8;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a2 + 8);
  IKString::IKString((IKString *)(v4 + 24), (const IKString *)(a2 + 24));
  *(_QWORD *)v4 = &off_24CA6B168;
  *(_OWORD *)(v4 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v4 + 64) = *(_OWORD *)(a2 + 64);
  v5 = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(v4 + 93) = *(_QWORD *)(a2 + 93);
  *(_OWORD *)(v4 + 80) = v5;
  *(_OWORD *)(v4 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(v4 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(v4 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(v4 + 160) = *(_OWORD *)(a2 + 160);
  result = *(float *)(a2 + 176);
  *(float *)(v4 + 176) = result;
  ++*a1;
  return result;
}

uint64_t FIK::FeetSliding::Solve(uint64_t a1, uint64_t a2)
{
  float v4;
  uint64_t v5;
  float32x4_t *v6;
  uint64_t v7;
  float v8;
  unint64_t GlobalTransform;
  float32x4_t v10;
  float32x4_t v11;
  uint64_t updated;
  float32x4_t v14[2];
  uint64_t v15[20];

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v4 = *(float *)(a1 + 12);
  FIK::PoseConverter::PoseConverter<FIK::MoCapBone>(v15, *(_QWORD *)(a1 + 368), *(_QWORD *)(a1 + 352), a2);
  v5 = *(_QWORD *)(a1 + 472);
  if (v5)
  {
    v6 = *(float32x4_t **)(a1 + 488);
    v7 = 192 * v5;
    v8 = 1.0 / v4;
    do
    {
      GlobalTransform = FIK::PoseConverter::GetGlobalTransform((FIK::PoseConverter *)v15, v6[5].i32[0]);
      v11 = *(float32x4_t *)(GlobalTransform + 16);
      v14[0] = *(float32x4_t *)GlobalTransform;
      v10 = v14[0];
      v14[1] = v11;
      v10.f32[0] = v8;
      FIK::FeetSliding::SlidingTask::SetTaskTarget(v6, v14, v10);
      v6 += 12;
      v7 -= 192;
    }
    while (v7);
  }
  updated = FIK::AnimNode::SolveAndUpdatePose(a1, a2);
  FIK::PoseConverter::~PoseConverter((FIK::PoseConverter *)v15);
  return updated;
}

uint64_t FIK::FeetSliding::GetTaskPosDebug()
{
  uint64_t *v0;

  v0 = ikinemaLogObject();
  return ikinemaAssertHandler(*v0, 0, (uint64_t)"GetTaskPosDebug", "(false) Not implemented");
}

uint64_t FIK::FeetSliding::constraintsCount(FIK::FeetSliding *this)
{
  return *((_QWORD *)this + 59);
}

unint64_t FIK::FeetSliding::constraintByIndex(FIK::FeetSliding *this, unint64_t a2)
{
  if (*((_QWORD *)this + 59) <= a2)
    return 0;
  else
    return *((_QWORD *)this + 61) + 192 * a2;
}

void FIK::FeetSliding::~FeetSliding(FIK::FeetSliding *this)
{
  *(_QWORD *)this = off_24CA6B1A0;
  FIK::IKArray<FIK::FeetSliding::SlidingTask>::~IKArray((uint64_t)this + 472);
  FIK::AnimNode::~AnimNode(this);
}

{
  void *v2;

  *(_QWORD *)this = off_24CA6B1A0;
  FIK::IKArray<FIK::FeetSliding::SlidingTask>::~IKArray((uint64_t)this + 472);
  FIK::AnimNode::~AnimNode(this);
  FIK::AnimNode::operator delete(v2);
}

uint64_t FIK::AnimNode::setSourcesBuffer()
{
  uint64_t *v0;

  v0 = ikinemaLogObject();
  return ikinemaAssertHandler(*v0, 0, (uint64_t)"setSourcesBuffer", "(false) Overriding sources key is not valid for this instance.");
}

uint64_t FIK::AnimNode::sourcesKey(FIK::AnimNode *this)
{
  return -1;
}

uint64_t FIK::AnimNode::outputKey(FIK::AnimNode *this)
{
  return -1;
}

void FIK::AnimNode::~AnimNode(FIK::AnimNode *this)
{
  void *v2;

  *(_QWORD *)this = off_24CA6C538;
  FIK::IKArray<FIK::RigBoneBase>::~IKArray((uint64_t *)this + 48);
  FIK::IKArray<FIK::MoCapBone>::~IKArray((uint64_t *)this + 44);
  FIK::IKArray<FIK::MoCapTask>::~IKArray((uint64_t *)this + 40);
  if (*((_QWORD *)this + 19))
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 20) + 24))(*((_QWORD *)this + 20), *((_QWORD *)this + 18), 0, 8);
    *((_QWORD *)this + 18) = 0;
    *((_QWORD *)this + 19) = 0;
  }
  FIK::IKArray<ikinema::Buffer>::~IKArray((uint64_t *)this + 13, v2);
  FIK::IKArray<ikinema::AlgorithmHandle>::~IKArray((uint64_t)this + 72);
  FIK::IKSolver::~IKSolver((FIK::AnimNode *)((char *)this + 16));
}

uint64_t FIK::IKArray<FIK::FeetSliding::SlidingTask>::~IKArray(uint64_t a1)
{
  uint64_t v2;

  std::destroy_n[abi:nn180100]<FIK::FeetSliding::SlidingTask *,unsigned long>(*(_QWORD *)(a1 + 16), *(_QWORD *)a1);
  *(_QWORD *)a1 = 0;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24), v2, 0, 8);
  return a1;
}

uint64_t std::destroy_n[abi:nn180100]<FIK::FeetSliding::SlidingTask *,unsigned long>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (a2)
  {
    v3 = a2;
    do
    {
      *(_QWORD *)a1 = &unk_24CA6C6F8;
      if (*(_QWORD *)(a1 + 32))
      {
        (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 24), 0, 8);
        *(_QWORD *)(a1 + 24) = 0;
        *(_QWORD *)(a1 + 32) = 0;
      }
      a1 += 192;
      --v3;
    }
    while (v3);
  }
  return a1;
}

uint64_t *FIK::IKArray<ikinema::Buffer>::~IKArray(uint64_t *a1, void *a2)
{
  uint64_t v3;
  ikinema::Buffer *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  if (*a1)
  {
    v4 = (ikinema::Buffer *)a1[2];
    do
    {
      ikinema::Buffer::~Buffer(v4, a2);
      v4 = (ikinema::Buffer *)(v5 + 72);
      --v3;
    }
    while (v3);
  }
  *a1 = 0;
  v6 = a1[2];
  if (v6)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1[3] + 24))(a1[3], v6, 0, 8);
  return a1;
}

void ikinema::Buffer::~Buffer(ikinema::Buffer *this, void *a2)
{
  FIK *v3;

  v3 = (FIK *)*((_QWORD *)this + 8);
  if (v3)
    FIK::FIKFree(v3, a2);
  if (*((_QWORD *)this + 1))
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 2) + 24))(*((_QWORD *)this + 2), *(_QWORD *)this, 0, 8);
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
  }
}

uint64_t FIK::IKArray<ikinema::AlgorithmHandle>::~IKArray(uint64_t a1)
{
  uint64_t v2;

  std::destroy_n[abi:nn180100]<ikinema::AlgorithmHandle *,unsigned long>(*(FIK ***)(a1 + 16), *(_QWORD *)a1);
  *(_QWORD *)a1 = 0;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24), v2, 0, 8);
  return a1;
}

FIK **std::destroy_n[abi:nn180100]<ikinema::AlgorithmHandle *,unsigned long>(FIK **a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  if (a2)
  {
    v3 = a2;
    do
    {
      if (*a1)
      {
        (*(void (**)(FIK *))(*(_QWORD *)*a1 + 8))(*a1);
        FIK::FIKFree(*a1, v4);
      }
      ++a1;
      --v3;
    }
    while (v3);
  }
  return a1;
}

uint64_t FIK::IKArray<FIK::FeetSliding::SlidingTask>::reserve(uint64_t result, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_QWORD *)(result + 8) < a2)
  {
    v2 = (uint64_t *)result;
    v3 = *(_QWORD *)(result + 24);
    v4 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v4)
    {
      v5 = (void *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)v3 + 16))(*(_QWORD *)(result + 24), 192 * v4, 16);
      v6 = (uint64_t)v5;
      if (192 * v4)
        bzero(v5, 192 * v4);
    }
    else
    {
      v6 = 0;
    }
    FIK::IKArray<FIK::FeetSliding::SlidingTask>::moveRange(v2[2], *v2, v6);
    v7 = v2[2];
    v8 = v2[3];
    v2[1] = v4;
    v2[2] = v6;
    v2[3] = v3;
    result = std::destroy_n[abi:nn180100]<FIK::FeetSliding::SlidingTask *,unsigned long>(v7, *v2);
    if (v7)
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v8 + 24))(v8, v7, 0, 8);
  }
  return result;
}

float FIK::IKArray<FIK::FeetSliding::SlidingTask>::moveRange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  float result;

  if (a2)
  {
    v4 = a2;
    v6 = 0;
    do
    {
      v7 = a3 + v6;
      *(_QWORD *)v7 = &unk_24CA6C6F8;
      *(_OWORD *)(v7 + 8) = *(_OWORD *)(a1 + v6 + 8);
      IKString::IKString((IKString *)(a3 + v6 + 24), (const IKString *)(a1 + v6 + 24));
      *(_QWORD *)v7 = &off_24CA6B168;
      *(_OWORD *)(v7 + 48) = *(_OWORD *)(a1 + v6 + 48);
      *(_OWORD *)(v7 + 64) = *(_OWORD *)(a1 + v6 + 64);
      v8 = *(_OWORD *)(a1 + v6 + 80);
      *(_QWORD *)(v7 + 93) = *(_QWORD *)(a1 + v6 + 93);
      *(_OWORD *)(v7 + 80) = v8;
      *(_OWORD *)(v7 + 112) = *(_OWORD *)(a1 + v6 + 112);
      *(_OWORD *)(v7 + 128) = *(_OWORD *)(a1 + v6 + 128);
      *(_OWORD *)(v7 + 144) = *(_OWORD *)(a1 + v6 + 144);
      *(_OWORD *)(v7 + 160) = *(_OWORD *)(a1 + v6 + 160);
      result = *(float *)(a1 + v6 + 176);
      *(float *)(v7 + 176) = result;
      v6 += 192;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t *FIK::PoseConverter::PoseConverter<FIK::MoCapBone>(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  void (***v8)(FIK::CrtAllocator *__hidden);
  void (***v9)(FIK::CrtAllocator *__hidden);
  void (***v10)(FIK::CrtAllocator *__hidden);
  void (***v11)(FIK::CrtAllocator *__hidden);
  void (***v12)(FIK::CrtAllocator *__hidden);
  __int128 *v13;
  _DWORD *v14;
  _OWORD *v15;
  __int128 v16;
  uint64_t v17;

  v8 = FIK::defaultAllocator((FIK *)a1);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = (uint64_t)v8;
  v9 = FIK::defaultAllocator((FIK *)v8);
  a1[4] = 0;
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = (uint64_t)v9;
  v10 = FIK::defaultAllocator((FIK *)v9);
  a1[8] = 0;
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = (uint64_t)v10;
  v11 = FIK::defaultAllocator((FIK *)v10);
  a1[12] = 0;
  a1[13] = 0;
  a1[14] = 0;
  a1[15] = (uint64_t)v11;
  v12 = FIK::defaultAllocator((FIK *)v11);
  a1[16] = 0;
  a1[17] = 0;
  a1[18] = 0;
  a1[19] = (uint64_t)v12;
  FIK::IKArray<FIK::Transform>::reserve(a1 + 12, a3);
  FIK::IKArray<unsigned int>::reserve(a1, a3);
  if (a3)
  {
    v13 = (__int128 *)(a4 + 16);
    v14 = (_DWORD *)(a2 + 4);
    do
    {
      FIK::IKArray<FIK::Transform>::reserve(a1 + 12, a1[12] + 1);
      v15 = (_OWORD *)(a1[14] + 32 * a1[12]);
      *v15 = *(v13 - 1);
      v16 = *v13;
      v13 += 2;
      v15[1] = v16;
      ++a1[12];
      FIK::IKArray<unsigned int>::reserve(a1, *a1 + 1);
      v17 = *a1;
      *(_DWORD *)(a1[2] + 4 * *a1) = *v14;
      *a1 = v17 + 1;
      v14 += 136;
      --a3;
    }
    while (a3);
  }
  FIK::PoseConverter::resetGlobalFlag((FIK::PoseConverter *)a1);
  return a1;
}

uint64_t ikinema::TaskFilterAlgorithmImpl::process(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float32x4_t *v8;
  float32x4_t *v9;
  float32x4_t *v10;
  float32x4_t v12[2];

  v4 = ikinema::BufferContainer::buffer(a3, a1[5]);
  v5 = ikinema::Buffer::arrayView<FIK::Transform>(v4);
  v6 = a1[1];
  if (v6)
  {
    v7 = v5;
    v8 = (float32x4_t *)a1[3];
    v9 = &v8[22 * v6];
    do
    {
      v10 = (float32x4_t *)(v7 + 32 * v8->i64[0]);
      FIK::TransformFilter<FIK::DoubleExponentialPositionFilter>::filter<>(v8 + 1, (uint64_t)v10, v12);
      *v10 = v12[0];
      v10[1] = v12[1];
      v8 += 22;
    }
    while (v8 != v9);
  }
  return 0;
}

double FIK::TransformFilter<FIK::DoubleExponentialPositionFilter>::filter<>@<D0>(float32x4_t *a1@<X0>, uint64_t a2@<X1>, float32x4_t *a3@<X8>)
{
  float32x4_t v6;
  uint64_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t *v11;
  const simd_float4x4 *v12;
  float32x4_t v13;
  double result;
  float32x4_t v15;
  __int32 v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19[4];
  float32x4_t v20;
  float32x4_t v21;

  v20 = *(float32x4_t *)a2;
  FIK::DoubleExponentialPositionFilter::filter(a1, &v20, &v21);
  if (a1[20].i8[0])
  {
    *(double *)v6.i64 = FIK::RotationPoints::deconstruct((int32x4_t *)(a2 + 16));
    v7 = 0;
    v19[0] = v6;
    v19[1] = v8;
    v19[2] = v9;
    v19[3] = v10;
    v11 = a1 + 4;
    do
    {
      v17 = v19[v7];
      v16 = v17.i32[3];
      FIK::DoubleExponentialPositionFilter::filter(v11, &v17, &v18);
      v13 = v18;
      v13.i32[3] = v16;
      v19[v7] = v13;
      v11 += 4;
      ++v7;
    }
    while (v7 != 4);
    FIK::RotationPoints::reconstruct(v19, v12, a3 + 1);
    result = *(double *)v21.i64;
    *a3 = v21;
  }
  else
  {
    result = *(double *)v21.i64;
    v15 = *(float32x4_t *)(a2 + 16);
    *a3 = v21;
    a3[1] = v15;
  }
  return result;
}

uint64_t ikinema::TaskFilterAlgorithmImpl::registerBuffers(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  if (!*a2)
    return 1;
  v2 = 72 * *a2;
  v3 = (uint64_t *)(a2[2] + 56);
  while (1)
  {
    v4 = *v3;
    v3 += 9;
    if (v4 == *(_QWORD *)(a1 + 40))
      break;
    v2 -= 72;
    if (!v2)
      return 1;
  }
  return 0;
}

uint64_t *ikinema::TaskFilterAlgorithmImpl::TaskFilterAlgorithmImpl(uint64_t *a1, uint64_t a2, int a3, uint64_t a4)
{
  void (***v8)(FIK::CrtAllocator *__hidden);
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float *v13;
  float v15;
  uint64_t v16;
  _BYTE v17[344];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  *a1 = (uint64_t)&off_24CA6C850;
  v8 = FIK::defaultAllocator((FIK *)a1);
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = (uint64_t)v8;
  a1[5] = a4;
  v9 = *(_QWORD *)(a2 + 176);
  if (v9)
  {
    v10 = 0;
    v11 = (float)a3;
    v12 = 160;
    do
    {
      v13 = (float *)(*(_QWORD *)(a2 + 192) + v12);
      if (*v13 != 0.0)
      {
        v16 = v10;
        v15 = v11;
        FIK::TransformFilter<FIK::DoubleExponentialPositionFilter>::TransformFilter<float const&,float,void>(v17, 1, v13, &v15);
        FIK::IKArray<ikinema::TaskFilterAlgorithmImpl::FilterTask>::push_back<ikinema::TaskFilterAlgorithmImpl::FilterTask,void>(a1 + 1, (uint64_t)&v16);
      }
      ++v10;
      v12 += 256;
    }
    while (v9 != v10);
  }
  return a1;
}

uint64_t FIK::IKArray<ikinema::TaskFilterAlgorithmImpl::FilterTask>::push_back<ikinema::TaskFilterAlgorithmImpl::FilterTask,void>(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  FIK::IKArray<ikinema::TaskFilterAlgorithmImpl::FilterTask>::reserve(a1, *a1 + 1);
  result = FIK::construct_at<ikinema::TaskFilterAlgorithmImpl::FilterTask,ikinema::TaskFilterAlgorithmImpl::FilterTask>(a1[2] + 352 * *a1, a1[3], a2);
  ++*a1;
  return result;
}

uint64_t *ikinema::TaskFilterAlgorithm::create@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t **a4@<X8>)
{
  int v5;
  uint64_t v6;

  v6 = a3;
  v5 = a2;
  return ikinema::AlgorithmHandle::make<ikinema::TaskFilterAlgorithmImpl,FIK::MoCapRig const&,int const&,ikinema::BufferKey &>(a1, &v5, &v6, a4);
}

uint64_t *ikinema::AlgorithmHandle::make<ikinema::TaskFilterAlgorithmImpl,FIK::MoCapRig const&,int const&,ikinema::BufferKey &>@<X0>(uint64_t a1@<X0>, int *a2@<X1>, uint64_t *a3@<X2>, uint64_t **a4@<X8>)
{
  uint64_t *result;

  result = (uint64_t *)FIK::FIKAlloc((FIK *)0x30);
  if (result)
    result = ikinema::TaskFilterAlgorithmImpl::TaskFilterAlgorithmImpl(result, a1, *a2, *a3);
  *a4 = result;
  return result;
}

const char *ikinema::AlgorithmBlockBase<ikinema::TaskFilterAlgorithm>::typeId()
{
  const char *result;
  unsigned __int8 *v1;
  uint64_t v2;
  unsigned int v3;

  result = "N7ikinema19TaskFilterAlgorithmE";
  if (((unint64_t)"N7ikinema19TaskFilterAlgorithmE" & 0x8000000000000000) != 0)
  {
    v1 = (unsigned __int8 *)((unint64_t)"N7ikinema19TaskFilterAlgorithmE" & 0x7FFFFFFFFFFFFFFFLL);
    v2 = 5381;
    do
    {
      result = (const char *)v2;
      v3 = *v1++;
      v2 = (33 * v2) ^ v3;
    }
    while (v3);
  }
  return result;
}

void ikinema::TaskFilterAlgorithmImpl::~TaskFilterAlgorithmImpl(ikinema::TaskFilterAlgorithmImpl *this)
{
  uint64_t v1;

  *((_QWORD *)this + 1) = 0;
  v1 = *((_QWORD *)this + 3);
  if (v1)
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)this + 4) + 24))(*((_QWORD *)this + 4), v1, 0, 8);
}

{
  uint64_t v1;

  *((_QWORD *)this + 1) = 0;
  v1 = *((_QWORD *)this + 3);
  if (v1)
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)this + 4) + 24))(*((_QWORD *)this + 4), v1, 0, 8);
  JUMPOUT(0x212BCAFB4);
}

const char *ikinema::TaskFilterAlgorithmImpl::name(ikinema::TaskFilterAlgorithmImpl *this)
{
  return "Algorithm for filtering task position";
}

_BYTE *FIK::TransformFilter<FIK::DoubleExponentialPositionFilter>::TransformFilter<float const&,float,void>(_BYTE *a1, char a2, float *a3, float *a4)
{
  FIK::DoubleExponentialPositionFilter *v8;

  v8 = FIK::DoubleExponentialPositionFilter::DoubleExponentialPositionFilter((FIK::DoubleExponentialPositionFilter *)a1, *a3, *a4);
  FIK::DoubleExponentialPositionFilter::DoubleExponentialPositionFilter((FIK::DoubleExponentialPositionFilter *)((char *)v8 + 64), *a3, *a4);
  FIK::DoubleExponentialPositionFilter::DoubleExponentialPositionFilter((FIK::DoubleExponentialPositionFilter *)(a1 + 128), *a3, *a4);
  FIK::DoubleExponentialPositionFilter::DoubleExponentialPositionFilter((FIK::DoubleExponentialPositionFilter *)(a1 + 192), *a3, *a4);
  FIK::DoubleExponentialPositionFilter::DoubleExponentialPositionFilter((FIK::DoubleExponentialPositionFilter *)(a1 + 256), *a3, *a4);
  a1[320] = a2;
  return a1;
}

uint64_t *FIK::IKArray<ikinema::TaskFilterAlgorithmImpl::FilterTask>::reserve(uint64_t *result, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  if (result[1] < a2)
  {
    v2 = result;
    v3 = result[3];
    v4 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v4)
    {
      v5 = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v3 + 16))(result[3], 352 * v4, 16);
      v6 = (uint64_t)v5;
      if (352 * v4)
        bzero(v5, 352 * v4);
    }
    else
    {
      v6 = 0;
    }
    FIK::IKArray<ikinema::TaskFilterAlgorithmImpl::FilterTask>::moveRange(v2[2], *v2, v6);
    v7 = v2[2];
    result = (uint64_t *)v2[3];
    v2[1] = v4;
    v2[2] = v6;
    v2[3] = v3;
    if (v7)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t, _QWORD, uint64_t))(*result + 24))(result, v7, 0, 8);
  }
  return result;
}

uint64_t FIK::construct_at<ikinema::TaskFilterAlgorithmImpl::FilterTask,ikinema::TaskFilterAlgorithmImpl::FilterTask>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  *(_QWORD *)result = *(_QWORD *)a3;
  v4 = *(_QWORD *)(a3 + 16);
  *(_DWORD *)(result + 24) = *(_DWORD *)(a3 + 24);
  *(_QWORD *)(result + 16) = v4;
  *(_OWORD *)(result + 32) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(result + 48) = *(_OWORD *)(a3 + 48);
  *(_BYTE *)(result + 64) = *(_BYTE *)(a3 + 64);
  do
  {
    v5 = result + v3;
    v6 = *(_QWORD *)(a3 + v3 + 80);
    *(_DWORD *)(v5 + 88) = *(_DWORD *)(a3 + v3 + 88);
    *(_QWORD *)(v5 + 80) = v6;
    *(_OWORD *)(v5 + 96) = *(_OWORD *)(a3 + v3 + 96);
    *(_OWORD *)(v5 + 112) = *(_OWORD *)(a3 + v3 + 112);
    *(_BYTE *)(v5 + 128) = *(_BYTE *)(a3 + v3 + 128);
    v3 += 64;
  }
  while (v3 != 256);
  *(_BYTE *)(result + 336) = *(_BYTE *)(a3 + 336);
  return result;
}

uint64_t FIK::IKArray<ikinema::TaskFilterAlgorithmImpl::FilterTask>::moveRange(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  for (; a2; --a2)
  {
    v3 = 0;
    *(_QWORD *)a3 = *(_QWORD *)result;
    v4 = *(_QWORD *)(result + 16);
    *(_DWORD *)(a3 + 24) = *(_DWORD *)(result + 24);
    *(_QWORD *)(a3 + 16) = v4;
    *(_OWORD *)(a3 + 32) = *(_OWORD *)(result + 32);
    *(_OWORD *)(a3 + 48) = *(_OWORD *)(result + 48);
    *(_BYTE *)(a3 + 64) = *(_BYTE *)(result + 64);
    do
    {
      v5 = a3 + v3;
      v6 = *(_QWORD *)(result + v3 + 80);
      *(_DWORD *)(v5 + 88) = *(_DWORD *)(result + v3 + 88);
      *(_QWORD *)(v5 + 80) = v6;
      *(_OWORD *)(v5 + 96) = *(_OWORD *)(result + v3 + 96);
      *(_OWORD *)(v5 + 112) = *(_OWORD *)(result + v3 + 112);
      *(_BYTE *)(v5 + 128) = *(_BYTE *)(result + v3 + 128);
      v3 += 64;
    }
    while (v3 != 256);
    *(_BYTE *)(a3 + 336) = *(_BYTE *)(result + 336);
    a3 += 352;
    result += 352;
  }
  return result;
}

uint64_t FIK::EnrollmentHelpers::verifyRigEnrolment(uint64_t a1)
{
  uint64_t v1;
  unsigned int *v2;
  uint64_t v3;
  float32x4_t *v4;
  float32x4_t v5;
  size_t v6;
  const void *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  float32x4_t v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  uint64_t v35;
  NSObject *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  NSObject *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  NSObject *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  NSObject *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  NSObject *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v117;
  const void **v118;
  _OWORD v119[2];
  float32x4_t v120;
  char **v121;
  char *v122[2];
  const void *v123[2];
  char v124;
  void *v125[2];
  char v126;
  char v127;
  const void *v128[3];
  void *__p[2];
  char v130;
  const void *v131[4];
  _BYTE __dst[24];
  const void **v133;

  v122[0] = 0;
  v122[1] = 0;
  v121 = v122;
  v2 = (unsigned int *)(a1 + 208);
  v1 = *(_QWORD *)(a1 + 208);
  if (v1)
  {
    v3 = 544 * v1;
    v4 = (float32x4_t *)(*(_QWORD *)(a1 + 224) + 64);
    do
    {
      v5 = *v4;
      v6 = v4[-3].u64[0];
      if (v6)
      {
        if (v6 >= 0x7FFFFFFFFFFFFFF8)
          abort();
        v120 = *v4;
        v7 = (const void *)v4[-4].i64[1];
        if (v6 >= 0x17)
        {
          v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v6 | 7) != 0x17)
            v9 = v6 | 7;
          v10 = v9 + 1;
          v8 = operator new(v9 + 1);
          *(_QWORD *)&__dst[8] = v6;
          *(_QWORD *)&__dst[16] = v10 | 0x8000000000000000;
          *(_QWORD *)__dst = v8;
        }
        else
        {
          __dst[23] = v6;
          v8 = __dst;
        }
        memmove(v8, v7, v6);
        v5 = v120;
      }
      else
      {
        __dst[23] = 0;
        v8 = __dst;
      }
      v11 = vmulq_f32(v5, v5);
      v8[v6] = 0;
      v131[0] = __dst;
      *((float *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v121, (const void **)__dst, (uint64_t)&std::piecewise_construct, (_OWORD **)v131)+ 14) = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2), vaddq_f32(v11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1))).f32[0]);
      if ((__dst[23] & 0x80000000) != 0)
        operator delete(*(void **)__dst);
      v4 += 34;
      v3 -= 544;
    }
    while (v3);
  }
  v12 = FIK::IKRigUtils::getDistanceBetweenSlow<FIK::MoCapBone>(v2, "left_shoulder_1_joint", 0x15uLL, "right_shoulder_1_joint", 0x16uLL);
  if ((v12 & 0xFF00000000) != 0)
  {
    __dst[23] = 14;
    strcpy(__dst, "left_arm_joint");
    v131[0] = __dst;
    v13 = *((float *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v121, (const void **)__dst, (uint64_t)&std::piecewise_construct, (_OWORD **)v131)+ 14)+ *(float *)&v12;
    HIBYTE(v131[2]) = 15;
    strcpy((char *)v131, "right_arm_joint");
    __p[0] = v131;
    v14 = v13
        + *((float *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v121, v131, (uint64_t)&std::piecewise_construct, (_OWORD **)__p)+ 14);
    v130 = 14;
    strcpy((char *)__p, "shoulder_width");
    v128[0] = __p;
    *((float *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v121, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)v128)+ 14) = v14;
    if (v130 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v131[2]) < 0)
      operator delete((void *)v131[0]);
    if ((__dst[23] & 0x80000000) != 0)
      operator delete(*(void **)__dst);
    std::string::basic_string[abi:nn180100]<0>(__dst, "neck_2_joint");
    v15 = *(float *)std::map<std::string,float>::at((uint64_t)&v121, (const void **)__dst);
    std::string::basic_string[abi:nn180100]<0>(v131, "neck_3_joint");
    v16 = v15 + *(float *)std::map<std::string,float>::at((uint64_t)&v121, v131);
    std::string::basic_string[abi:nn180100]<0>(__p, "neck_4_joint");
    v17 = v16 + *(float *)std::map<std::string,float>::at((uint64_t)&v121, (const void **)__p);
    std::string::basic_string[abi:nn180100]<0>(v128, "head_joint");
    v18 = v17 + *(float *)std::map<std::string,float>::at((uint64_t)&v121, v128);
    v127 = 8;
    strcpy((char *)v125, "neck_len");
    v123[0] = v125;
    *((float *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v121, (const void **)v125, (uint64_t)&std::piecewise_construct, (_OWORD **)v123)+ 14) = v18;
    if (v127 < 0)
      operator delete(v125[0]);
    if (SHIBYTE(v128[2]) < 0)
      operator delete((void *)v128[0]);
    if (v130 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v131[2]) < 0)
      operator delete((void *)v131[0]);
    if ((__dst[23] & 0x80000000) != 0)
      operator delete(*(void **)__dst);
    __dst[23] = 15;
    strcpy(__dst, "left_hand_joint");
    v131[0] = __dst;
    v19 = *((float *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v121, (const void **)__dst, (uint64_t)&std::piecewise_construct, (_OWORD **)v131)+ 14);
    if ((__dst[23] & 0x80000000) != 0)
      operator delete(*(void **)__dst);
    __dst[23] = 16;
    v20 = v19 * 0.8;
    v120 = *(float32x4_t *)"right_hand_joint";
    strcpy(__dst, "right_hand_joint");
    v131[0] = __dst;
    v21 = *((float *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v121, (const void **)__dst, (uint64_t)&std::piecewise_construct, (_OWORD **)v131)+ 14)* 0.8;
    if ((__dst[23] & 0x80000000) != 0)
      operator delete(*(void **)__dst);
    __dst[23] = 15;
    strcpy(__dst, "left_hand_joint");
    v131[0] = __dst;
    v22 = v20
        + *((float *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v121, (const void **)__dst, (uint64_t)&std::piecewise_construct, (_OWORD **)v131)+ 14);
    HIBYTE(v131[2]) = 18;
    strcpy((char *)v131, "left_forearm_joint");
    __p[0] = v131;
    v23 = v22
        + *((float *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v121, v131, (uint64_t)&std::piecewise_construct, (_OWORD **)__p)+ 14);
    v130 = 14;
    strcpy((char *)__p, "shoulder_width");
    v128[0] = __p;
    v24 = v23
        + *((float *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v121, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)v128)+ 14);
    HIBYTE(v128[2]) = 19;
    qmemcpy(v119, "right_forearm_joleft_forearm_joi", sizeof(v119));
    strcpy((char *)v128, "right_forearm_joint");
    v125[0] = v128;
    v25 = v24
        + *((float *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v121, v128, (uint64_t)&std::piecewise_construct, (_OWORD **)v125)+ 14);
    v127 = 16;
    *(float32x4_t *)v125 = v120;
    v126 = 0;
    v123[0] = v125;
    v26 = v21
        + (float)(v25
                + *((float *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v121, (const void **)v125, (uint64_t)&std::piecewise_construct, (_OWORD **)v123)+ 14));
    v124 = 9;
    strcpy((char *)v123, "hand_span");
    v133 = v123;
    *((float *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v121, v123, (uint64_t)&std::piecewise_construct, (_OWORD **)&v133)+ 14) = v26;
    if (v124 < 0)
      operator delete((void *)v123[0]);
    if (v127 < 0)
      operator delete(v125[0]);
    if (SHIBYTE(v128[2]) < 0)
      operator delete((void *)v128[0]);
    if (v130 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v131[2]) < 0)
      operator delete((void *)v131[0]);
    if ((__dst[23] & 0x80000000) != 0)
      operator delete(*(void **)__dst);
    __dst[23] = 9;
    strcpy(__dst, "hand_span");
    v27 = *(float *)std::map<std::string,float>::at((uint64_t)&v121, (const void **)__dst);
    if ((__dst[23] & 0x80000000) != 0)
      operator delete(*(void **)__dst);
    if (v27 < 43.35 || v27 > 313.95)
    {
      v36 = *ikinemaLogObject();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
        FIK::EnrollmentHelpers::verifyRigEnrolment(v36, v37, v38, v39, v40, v41, v42, v43);
    }
    else
    {
      __dst[23] = 15;
      strcpy(__dst, "left_hand_joint");
      v28 = *(float *)std::map<std::string,float>::at((uint64_t)&v121, (const void **)__dst);
      if ((__dst[23] & 0x80000000) != 0)
        operator delete(*(void **)__dst);
      if (v28 < 5.0 || v28 > 75.0)
      {
        v44 = *ikinemaLogObject();
        if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
          FIK::EnrollmentHelpers::verifyRigEnrolment(v44, v45, v46, v47, v48, v49, v50, v51);
      }
      else
      {
        __dst[23] = 16;
        *(float32x4_t *)__dst = v120;
        __dst[16] = 0;
        v29 = *(float *)std::map<std::string,float>::at((uint64_t)&v121, (const void **)__dst);
        if ((__dst[23] & 0x80000000) != 0)
          operator delete(*(void **)__dst);
        if (v29 < 5.0 || v29 > 75.0)
        {
          v52 = *ikinemaLogObject();
          if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
            FIK::EnrollmentHelpers::verifyRigEnrolment(v52, v53, v54, v55, v56, v57, v58, v59);
        }
        else
        {
          __dst[23] = 18;
          strcpy(&__dst[16], "nt");
          *(_OWORD *)__dst = v119[1];
          v30 = *(float *)std::map<std::string,float>::at((uint64_t)&v121, (const void **)__dst);
          if ((__dst[23] & 0x80000000) != 0)
            operator delete(*(void **)__dst);
          if (v30 < 5.0 || v30 > 75.0)
          {
            v60 = *ikinemaLogObject();
            if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
              FIK::EnrollmentHelpers::verifyRigEnrolment(v60, v61, v62, v63, v64, v65, v66, v67);
          }
          else
          {
            __dst[23] = 19;
            strcpy(&__dst[15], "oint");
            *(_OWORD *)__dst = v119[0];
            v31 = *(float *)std::map<std::string,float>::at((uint64_t)&v121, (const void **)__dst);
            if ((__dst[23] & 0x80000000) != 0)
              operator delete(*(void **)__dst);
            if (v31 < 5.0 || v31 > 75.0)
            {
              v68 = *ikinemaLogObject();
              if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
                FIK::EnrollmentHelpers::verifyRigEnrolment(v68, v69, v70, v71, v72, v73, v74, v75);
            }
            else if (vabds_f32(v28, v29) > 10.0)
            {
              v76 = *ikinemaLogObject();
              if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
                FIK::EnrollmentHelpers::verifyRigEnrolment(v76, v77, v78, v79, v80, v81, v82, v83);
            }
            else if (vabds_f32(v30, v31) > 10.0)
            {
              v84 = *ikinemaLogObject();
              if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR))
                FIK::EnrollmentHelpers::verifyRigEnrolment(v84, v85, v86, v87, v88, v89, v90, v91);
            }
            else if (vabds_f32(v28, v30) > 10.0)
            {
              v92 = *ikinemaLogObject();
              if (os_log_type_enabled(v92, OS_LOG_TYPE_ERROR))
                FIK::EnrollmentHelpers::verifyRigEnrolment(v92, v93, v94, v95, v96, v97, v98, v99);
            }
            else if (vabds_f32(v29, v31) > 10.0)
            {
              v100 = *ikinemaLogObject();
              if (os_log_type_enabled(v100, OS_LOG_TYPE_ERROR))
                FIK::EnrollmentHelpers::verifyRigEnrolment(v100, v101, v102, v103, v104, v105, v106, v107);
            }
            else
            {
              std::string::basic_string<std::string_view,0>(__dst, (uint64_t)&FIK::EnrollmentHelpers::kNeckLength);
              v32 = *(float *)std::map<std::string,float>::at((uint64_t)&v121, (const void **)__dst);
              std::string::basic_string<std::string_view,0>(v131, (uint64_t)&FIK::EnrollmentHelpers::kShoulderWidth);
              v33 = *(float *)std::map<std::string,float>::at((uint64_t)&v121, v131);
              if (SHIBYTE(v131[2]) < 0)
                operator delete((void *)v131[0]);
              v34 = v32 / v33;
              if ((__dst[23] & 0x80000000) != 0)
                operator delete(*(void **)__dst);
              if (v34 >= 0.2221 && v34 <= 0.61366)
              {
                v35 = 1;
LABEL_100:
                std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::destroy((uint64_t)&v121, v122[0]);
                return v35;
              }
              v108 = *ikinemaLogObject();
              if (os_log_type_enabled(v108, OS_LOG_TYPE_ERROR))
                FIK::EnrollmentHelpers::verifyRigEnrolment(v108, v109, v110, v111, v112, v113, v114, v115);
            }
          }
        }
      }
    }
    v35 = 0;
    goto LABEL_100;
  }
  v117 = std::__throw_bad_optional_access[abi:nn180100]();
  return std::map<std::string,float>::at(v117, v118);
}

uint64_t std::map<std::string,float>::at(uint64_t a1, const void **a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__find_equal<std::string>(a1, &v4, a2);
  if (!v2)
    abort();
  return v2 + 56;
}

_QWORD *std::string::basic_string<std::string_view,0>(_QWORD *__dst, uint64_t a2)
{
  size_t v2;
  const void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a2 + 8);
  if (v2 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v4 = *(const void **)a2;
  if (v2 >= 0x17)
  {
    v6 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17)
      v6 = v2 | 7;
    v7 = v6 + 1;
    v5 = operator new(v6 + 1);
    __dst[1] = v2;
    __dst[2] = v7 | 0x8000000000000000;
    *__dst = v5;
  }
  else
  {
    *((_BYTE *)__dst + 23) = v2;
    v5 = __dst;
    if (!v2)
      goto LABEL_9;
  }
  memmove(v5, v4, v2);
LABEL_9:
  *((_BYTE *)v5 + v2) = 0;
  return __dst;
}

uint64_t FIK::IKRigUtils::getDistanceBetweenSlow<FIK::MoCapBone>(unsigned int *a1, void *__s2, size_t __n, void *a4, size_t a5)
{
  int v8;
  int v9;
  uint64_t result;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13[2];
  float32x4_t v14[2];

  v8 = FIK::IKRigUtils::getBoneIndex<FIK::MoCapBone,void>(__s2, __n, a1);
  v9 = FIK::IKRigUtils::getBoneIndex<FIK::MoCapBone,void>(a4, a5, a1);
  result = 0;
  if (v8 != -1 && v9 != -1)
  {
    FIK::IKRigUtils::getGlobalRestTransformSlow<FIK::MoCapBone>((uint64_t)a1, v8, v14);
    FIK::IKRigUtils::getGlobalRestTransformSlow<FIK::MoCapBone>((uint64_t)a1, v9, v13);
    v11 = vsubq_f32(v14[0], v13[0]);
    v12 = vmulq_f32(v11, v11);
    return COERCE_UNSIGNED_INT(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2), vaddq_f32(v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1))).f32[0])) | 0x100000000;
  }
  return result;
}

_OWORD *std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;

  v6 = (void **)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x40uLL);
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_DWORD *)v7 + 14) = 0;
    std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__insert_node_at(a1, v12, v8, (uint64_t *)v7);
  }
  return v7;
}

_QWORD *std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__find_equal<std::string>(uint64_t a1, _QWORD *a2, const void **a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  const void **v9;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = (_QWORD *)v4;
        v9 = (const void **)(v4 + 32);
        if (!std::less<std::string>::operator()[abi:nn180100](v7, a3, (const void **)(v4 + 32)))
          break;
        v4 = *v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!std::less<std::string>::operator()[abi:nn180100](v7, v9, a3))
        break;
      v5 = v8 + 1;
      v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t *std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

BOOL std::less<std::string>::operator()[abi:nn180100](uint64_t a1, const void **a2, const void **a3)
{
  int v3;
  int v4;
  size_t v5;
  const void *v6;
  size_t v7;
  const void *v8;
  size_t v9;
  int v10;

  v3 = *((char *)a3 + 23);
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (size_t)a2[1];
  if (v4 >= 0)
    v6 = a2;
  else
    v6 = *a2;
  if (v3 >= 0)
    v7 = *((unsigned __int8 *)a3 + 23);
  else
    v7 = (size_t)a3[1];
  if (v3 >= 0)
    v8 = a3;
  else
    v8 = *a3;
  if (v7 >= v5)
    v9 = v5;
  else
    v9 = v7;
  v10 = memcmp(v6, v8, v9);
  if (v10)
    return v10 < 0;
  else
    return v5 < v7;
}

void std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::destroy(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

void OUTLINED_FUNCTION_0_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

FIK *FIK::FKConverter::FKConverter(FIK *a1, uint64_t *a2, unint64_t *a3, _QWORD *a4)
{
  void (***v8)(FIK::CrtAllocator *__hidden);
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int IndexForName;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v16;

  v8 = FIK::defaultAllocator(a1);
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  *((_QWORD *)a1 + 3) = v8;
  v9 = *a3;
  if (*a3 == *a4)
  {
    if (!v9)
      return a1;
  }
  else
  {
    v16 = ikinemaLogObject();
    ikinemaAssertHandler(*v16, 0, (uint64_t)"FKConverter", "(fkNames.size() == parentNames.size()) FKConverter expects parent name for each FK bone.");
    v9 = *a3;
    if (!*a3)
      return a1;
  }
  v10 = 0;
  v11 = 0;
  do
  {
    IndexForName = getIndexForName(a3[2] + v10, a2);
    if (IndexForName != -1)
    {
      v13 = IndexForName;
      v14 = getIndexForName(a4[2] + v10, a2);
      FIK::IKArray<FIK::FKConverter::IndexPair>::reserve(a1, *(_QWORD *)a1 + 1);
      *(_QWORD *)(*((_QWORD *)a1 + 2) + 8 * (*(_QWORD *)a1)++) = v13 | (unint64_t)(v14 << 32);
      v9 = *a3;
    }
    ++v11;
    v10 += 24;
  }
  while (v11 < v9);
  return a1;
}

uint64_t getIndexForName(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  size_t v4;
  const void *v5;
  _QWORD *i;
  const void *v7;

  v2 = *a2;
  if (!*a2)
    return 0xFFFFFFFFLL;
  v3 = 0;
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
    v5 = *(const void **)a1;
  else
    v5 = &unk_2108059BE;
  for (i = (_QWORD *)(a2[2] + 8); ; i += 3)
  {
    v7 = *i ? (const void *)*(i - 1) : &unk_2108059BE;
    if (*i == v4 && !memcmp(v7, v5, v4))
      break;
    if (v2 == ++v3)
      return 0xFFFFFFFFLL;
  }
  return v3;
}

_QWORD *FIK::FKConverter::convertToGlobal(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int *v4;
  uint64_t v5;
  float32x4_t v6;
  uint64_t v7;
  float32x4_t *v8;
  uint64_t v9;
  uint64_t v10;
  float32x4_t v11;
  int32x4_t v12;
  int8x16_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  int32x4_t v20;
  float32x4_t v21;
  int32x4_t v22;
  float32x4_t v23;
  float32x4_t *v24;
  uint64_t v25;
  float32x4_t *v26;

  if (*result)
  {
    v4 = (int *)result[2];
    v5 = 8 * *result;
    v6.i64[0] = 0x4000000040000000;
    v6.i64[1] = 0x4000000040000000;
    do
    {
      v7 = v4[1];
      if ((_DWORD)v7 == -1)
      {
        v25 = *v4;
        v26 = (float32x4_t *)(a2 + 32 * v25);
        v24 = (float32x4_t *)(a4 + 32 * v25);
        *v24 = *v26;
        v17 = v26[1];
      }
      else
      {
        v8 = (float32x4_t *)(a4 + 32 * v7);
        v9 = *v4;
        v10 = a2 + 32 * v9;
        v11 = *(float32x4_t *)(v10 + 16);
        v12 = (int32x4_t)vnegq_f32(v11);
        v13 = (int8x16_t)vtrn2q_s32((int32x4_t)v11, vtrn1q_s32((int32x4_t)v11, v12));
        v14 = v8[1];
        v15 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v11, (int8x16_t)v12, 8uLL), *(float32x2_t *)v14.f32, 1), (float32x4_t)vextq_s8(v13, v13, 8uLL), v14.f32[0]);
        v16 = (float32x4_t)vrev64q_s32((int32x4_t)v11);
        v16.i32[0] = v12.i32[1];
        v16.i32[3] = v12.i32[2];
        v17 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v11, v14, 3), v16, v14, 2), v15);
        v18 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v14, (int32x4_t)v14), (int8x16_t)v14, 0xCuLL);
        v19 = vnegq_f32(v14);
        v20 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)v10, *(int32x4_t *)v10), *(int8x16_t *)v10, 0xCuLL), v19), *(float32x4_t *)v10, v18);
        v21 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v20, v20), (int8x16_t)v20, 0xCuLL);
        v22 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v21, (int32x4_t)v21), (int8x16_t)v21, 0xCuLL), v19), v21, v18);
        v23 = vaddq_f32(*v8, vmlaq_f32(*(float32x4_t *)v10, v6, vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v22, v22), (int8x16_t)v22, 0xCuLL), v21, v14, 3)));
        v24 = (float32x4_t *)(a4 + 32 * v9);
        *v24 = v23;
      }
      v24[1] = v17;
      v4 += 2;
      v5 -= 8;
    }
    while (v5);
  }
  return result;
}

_QWORD *FIK::IKArray<FIK::FKConverter::IndexPair>::reserve(_QWORD *result, unint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;

  if (result[1] < a2)
  {
    v2 = result;
    v3 = result[3];
    v4 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v4)
    {
      v5 = (void *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)v3 + 16))(result[3], 8 * v4, 4);
      v6 = v5;
      if (8 * v4)
        bzero(v5, 8 * v4);
    }
    else
    {
      v6 = 0;
    }
    memcpy(v6, (const void *)v2[2], 8 * *v2);
    v7 = v2[2];
    result = (_QWORD *)v2[3];
    v2[1] = v4;
    v2[2] = v6;
    v2[3] = v3;
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, _QWORD, uint64_t))(*result + 24))(result, v7, 0, 8);
  }
  return result;
}

uint64_t FIK::FloorLevel::FloorTask::FloorTask(uint64_t a1, IKString *a2, uint64_t a3, uint64_t a4, int a5, _QWORD *a6)
{
  uint64_t *v11;
  void (***v12)(FIK::CrtAllocator *__hidden);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float32x4_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  IKString::operator+(a2, "_Task", (FIK::Allocator *)5, &v19);
  *(_QWORD *)a1 = &unk_24CA6C6F8;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  v11 = IKString::IKString((uint64_t *)(a1 + 24), &v19, v21);
  if (v20)
  {
    v11 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v21 + 24))(v21, v19, 0, 8);
    v19 = 0;
    v20 = 0;
  }
  *(_QWORD *)a1 = &off_24CA6AAB8;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 64) = xmmword_210802BA0;
  *(_QWORD *)(a1 + 80) = 0x3F80000000000000;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 112) = a5;
  v12 = FIK::defaultAllocator((FIK *)v11);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = v12;
  *(_QWORD *)(a1 + 144) = *a6;
  v13 = *(_QWORD *)(a1 + 8) + *(_QWORD *)(**(_QWORD **)(a1 + 8) - 264);
  (*(void (**)(uint64_t, float))(*(_QWORD *)v13 + 72))(v13, 20.0);
  v14 = *(_QWORD *)(a1 + 8) + *(_QWORD *)(**(_QWORD **)(a1 + 8) - 264);
  (*(void (**)(uint64_t, float))(*(_QWORD *)v14 + 96))(v14, 2.0);
  if (*(_BYTE *)(a1 + 145))
  {
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 424))(*(_QWORD *)(a1 + 8), 1);
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 448))(*(_QWORD *)(a1 + 8), a1 + 80);
    v18 = vaddq_f32(*(float32x4_t *)(a1 + 96), vmulq_n_f32(*(float32x4_t *)(a1 + 80), *(float *)(a1 + 148)));
    (*(void (**)(_QWORD, float32x4_t *))(**(_QWORD **)(a1 + 8) + 472))(*(_QWORD *)(a1 + 8), &v18);
  }
  v15 = *(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 264);
  (*(void (**)(uint64_t, float))(*(_QWORD *)v15 + 72))(v15, 5.0);
  v16 = *(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 264);
  (*(void (**)(uint64_t, float))(*(_QWORD *)v16 + 96))(v16, 2.0);
  return a1;
}

__n128 FIK::FloorLevel::FloorTask::setPlaneNormal(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[5] = *a2;
  return result;
}

__n128 FIK::FloorLevel::FloorTask::setPlanePosition(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[6] = *a2;
  return result;
}

uint64_t FIK::FloorLevel::FloorTask::setTarget(float32x4_t *this, const FIK::Transform *a2)
{
  uint64_t result;

  FIK::FloorLevel::FloorTask::setPositionTarget(this);
  result = this[1].i64[0];
  if (result)
    return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)result + 248))(result, (char *)a2 + 16);
  return result;
}

uint64_t FIK::FloorLevel::FloorTask::setPositionTarget(float32x4_t *a1)
{
  uint64_t result;
  float32x4_t v3;

  result = a1->i64[1];
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 248))(result);
    if (a1[9].i8[1])
    {
      (*(void (**)(uint64_t, float32x4_t *))(*(_QWORD *)a1->i64[1] + 448))(a1->i64[1], a1 + 5);
      v3 = vaddq_f32(a1[6], vmulq_n_f32(a1[5], a1[9].f32[1]));
      return (*(uint64_t (**)(uint64_t, float32x4_t *))(*(_QWORD *)a1->i64[1] + 472))(a1->i64[1], &v3);
    }
  }
  return result;
}

uint64_t FIK::FloorLevel::FloorTask::setOrientationTarget(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 248))(result);
  return result;
}

__n128 FIK::FloorLevel::FloorTask::setOffset(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_OWORD *)(a1 + 48) = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t FIK::FloorLevel::FloorTask::getOffset(FIK::FloorLevel::FloorTask *this)
{
  return (uint64_t)this + 48;
}

uint64_t FIK::FloorLevel::FloorLevel(uint64_t a1, uint64_t a2)
{
  FIK *v3;
  void (***v4)(FIK::CrtAllocator *__hidden);
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  float32x4_t *v8;
  const FIK::Segment **v9;
  _QWORD *Segment;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[5];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v3 = (FIK *)FIK::AnimNode::AnimNode(a1, a2);
  *(_QWORD *)v3 = off_24CA6AAF0;
  v4 = FIK::defaultAllocator(v3);
  *(_QWORD *)(a1 + 472) = 0;
  *(_QWORD *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 496) = v4;
  if (*(_QWORD *)(a1 + 352))
  {
    v5 = 0;
    v6 = 352;
    do
    {
      v7 = (_QWORD *)(*(_QWORD *)(a1 + 368) + v6);
      if (!v5 || *(_BYTE *)v7)
      {
        v8 = FIK::IKSolver::addPositionTask((FIK::Solver **)(a1 + 16), (const IKString *)(v7 - 43));
        v9 = FIK::IKSolver::addOrientationTask((FIK::Solver **)(a1 + 16), v7 - 43);
        FIK::FloorLevel::FloorTask::FloorTask((uint64_t)v15, (IKString *)(v7 - 43), (uint64_t)v8, (uint64_t)v9, v5, v7);
        FIK::IKArray<FIK::FloorLevel::FloorTask>::push_back<FIK::FloorLevel::FloorTask,void>((_QWORD *)(a1 + 472), (uint64_t)v15);
        if (v18)
        {
          (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v19 + 24))(v19, v17, 0, 8);
          v17 = 0;
          v18 = 0;
        }
        v15[0] = &unk_24CA6C6F8;
        if (v15[4])
          (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v16 + 24))(v16, v15[3], 0, 8);
        Segment = FIK::IKSolver::getSegment((_QWORD ***)(a1 + 16), v7 - 43);
        (*(void (**)(_QWORD *, uint64_t, _QWORD))(*Segment + 16))(Segment, 1, 0);
        v11 = (*(uint64_t (**)(_QWORD *))(*Segment + 392))(Segment);
        if (v11)
        {
          v12 = v11;
          (*(void (**)(uint64_t, float))(*(_QWORD *)v11 + 712))(v11, 0.1);
          v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 392))(v12);
          if (v13)
            (*(void (**)(uint64_t, float))(*(_QWORD *)v13 + 712))(v13, 0.1);
        }
      }
      ++v5;
      v6 += 544;
    }
    while (*(_QWORD *)(a1 + 352) > v5);
  }
  FIK::IKSolver::setPGain((FIK::IKSolver *)(a1 + 16), 0.02);
  return a1;
}

uint64_t *FIK::IKArray<FIK::FloorLevel::FloorTask>::push_back<FIK::FloorLevel::FloorTask,void>(_QWORD *a1, uint64_t a2)
{
  uint64_t *result;

  FIK::IKArray<FIK::FloorLevel::FloorTask>::reserve((uint64_t)a1, *a1 + 1);
  result = FIK::construct_at<FIK::FloorLevel::FloorTask,FIK::FloorLevel::FloorTask>(a1[2] + 160 * *a1, a1[3], a2);
  ++*a1;
  return result;
}

uint64_t FIK::FloorLevel::Solve(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  float32x4_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t updated;
  __int128 v10;
  uint64_t v11[20];

  (*(void (**)(_QWORD *))(*a1 + 16))(a1);
  FIK::PoseConverter::PoseConverter<FIK::MoCapBone>(v11, a1[46], a1[44], a2);
  v4 = a1[59];
  if (v4)
  {
    v5 = (float32x4_t *)a1[61];
    v6 = 160 * v4;
    do
    {
      v10 = *(_OWORD *)(FIK::PoseConverter::GetGlobalTransform((FIK::PoseConverter *)v11, v5[7].i32[0]) + 16);
      FIK::FloorLevel::FloorTask::setPositionTarget(v5);
      v7 = v5[1].i64[0];
      if (v7)
        (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v7 + 248))(v7, &v10);
      v5 += 10;
      v6 -= 160;
    }
    while (v6);
  }
  updated = FIK::AnimNode::SolveAndUpdatePose((uint64_t)a1, a2);
  FIK::PoseConverter::~PoseConverter((FIK::PoseConverter *)v11);
  return updated;
}

uint64_t FIK::FloorLevel::GetTaskInstance(FIK::FloorLevel *this, int a2)
{
  return *((_QWORD *)this + 61) + 160 * a2;
}

uint64_t FIK::FloorLevel::constraintsCount(FIK::FloorLevel *this)
{
  return *((_QWORD *)this + 59);
}

unint64_t FIK::FloorLevel::constraintByIndex(FIK::FloorLevel *this, unint64_t a2)
{
  if (*((_QWORD *)this + 59) <= a2)
    return 0;
  else
    return *((_QWORD *)this + 61) + 160 * a2;
}

void FIK::FloorLevel::~FloorLevel(FIK::FloorLevel *this)
{
  *(_QWORD *)this = off_24CA6AAF0;
  FIK::IKArray<FIK::FloorLevel::FloorTask>::~IKArray((uint64_t *)this + 59);
  FIK::AnimNode::~AnimNode(this);
}

{
  void *v2;

  *(_QWORD *)this = off_24CA6AAF0;
  FIK::IKArray<FIK::FloorLevel::FloorTask>::~IKArray((uint64_t *)this + 59);
  FIK::AnimNode::~AnimNode(this);
  FIK::AnimNode::operator delete(v2);
}

uint64_t *FIK::IKArray<FIK::FloorLevel::FloorTask>::~IKArray(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[2];
    do
    {
      std::__destroy_at[abi:nn180100]<FIK::FloorLevel::FloorTask,0>(v3);
      v3 += 160;
      --v2;
    }
    while (v2);
  }
  *a1 = 0;
  v4 = a1[2];
  if (v4)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1[3] + 24))(a1[3], v4, 0, 8);
  return a1;
}

uint64_t std::__destroy_at[abi:nn180100]<FIK::FloorLevel::FloorTask,0>(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(_QWORD *)(result + 128))
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(result + 136) + 24))(*(_QWORD *)(result + 136), *(_QWORD *)(result + 120), 0, 8);
    *(_QWORD *)(v1 + 120) = 0;
    *(_QWORD *)(v1 + 128) = 0;
  }
  *(_QWORD *)v1 = &unk_24CA6C6F8;
  if (*(_QWORD *)(v1 + 32))
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(v1 + 40) + 24))(*(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 24), 0, 8);
    *(_QWORD *)(v1 + 24) = 0;
    *(_QWORD *)(v1 + 32) = 0;
  }
  return result;
}

uint64_t FIK::IKArray<FIK::FloorLevel::FloorTask>::reserve(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (*(_QWORD *)(result + 8) < a2)
  {
    v2 = result;
    v3 = *(_QWORD *)(result + 24);
    v4 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v4)
    {
      v5 = (void *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)v3 + 16))(*(_QWORD *)(result + 24), 160 * v4, 16);
      v6 = (uint64_t)v5;
      if (160 * v4)
        bzero(v5, 160 * v4);
    }
    else
    {
      v6 = 0;
    }
    result = (uint64_t)FIK::IKArray<FIK::FloorLevel::FloorTask>::moveRange(*(uint64_t **)(v2 + 16), *(_QWORD *)v2, v6);
    v7 = *(_QWORD *)(v2 + 16);
    v8 = *(_QWORD *)(v2 + 24);
    *(_QWORD *)(v2 + 8) = v4;
    *(_QWORD *)(v2 + 16) = v6;
    *(_QWORD *)(v2 + 24) = v3;
    v9 = *(_QWORD *)v2;
    if (*(_QWORD *)v2)
    {
      v10 = v7;
      do
      {
        result = std::__destroy_at[abi:nn180100]<FIK::FloorLevel::FloorTask,0>(v10);
        v10 += 160;
        --v9;
      }
      while (v9);
    }
    if (v7)
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v8 + 24))(v8, v7, 0, 8);
  }
  return result;
}

uint64_t *FIK::construct_at<FIK::FloorLevel::FloorTask,FIK::FloorLevel::FloorTask>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *result;

  *(_QWORD *)a1 = &unk_24CA6C6F8;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a3 + 8);
  IKString::IKString((uint64_t *)(a1 + 24), (uint64_t *)(a3 + 24), *(_QWORD *)(a3 + 40));
  *(_QWORD *)a1 = &off_24CA6AAB8;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a3 + 96);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a3 + 112);
  result = IKString::IKString((uint64_t *)(a1 + 120), (uint64_t *)(a3 + 120), *(_QWORD *)(a3 + 136));
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a3 + 144);
  return result;
}

uint64_t *FIK::IKArray<FIK::FloorLevel::FloorTask>::moveRange(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  if (a2)
  {
    v4 = a2;
    v5 = result;
    v6 = 0;
    do
    {
      v7 = a3 + v6 * 8;
      *(_QWORD *)v7 = &unk_24CA6C6F8;
      *(_OWORD *)(v7 + 8) = *(_OWORD *)&v5[v6 + 1];
      IKString::IKString((uint64_t *)(a3 + v6 * 8 + 24), &v5[v6 + 3], v5[v6 + 5]);
      *(_QWORD *)v7 = &off_24CA6AAB8;
      *(_OWORD *)(v7 + 48) = *(_OWORD *)&v5[v6 + 6];
      *(_OWORD *)(v7 + 64) = *(_OWORD *)&v5[v6 + 8];
      *(_OWORD *)(v7 + 80) = *(_OWORD *)&v5[v6 + 10];
      *(_OWORD *)(v7 + 96) = *(_OWORD *)&v5[v6 + 12];
      *(_DWORD *)(v7 + 112) = v5[v6 + 14];
      result = IKString::IKString((uint64_t *)(a3 + v6 * 8 + 120), &v5[v6 + 15], v5[v6 + 17]);
      *(_QWORD *)(v7 + 144) = v5[v6 + 18];
      v6 += 20;
      --v4;
    }
    while (v4);
  }
  return result;
}

_DWORD *FIK::Enrollment::LiftedSource::LiftedSource(_DWORD *a1, FIK *a2, _BYTE *a3, size_t a4, int a5)
{
  _DWORD *v6;
  uint64_t *v8;
  uint64_t *v9;

  *a1 = a5;
  *(_QWORD *)(a1 + 1) = -1;
  v6 = a1 + 1;
  FIK::Enrollment::SourceDefinition::getDetectionIndicesForPrefixedName(a2, a3, a4, a1 + 2, a1 + 1);
  if (a1[2] == -1)
  {
    v8 = ikinemaLogObject();
    ikinemaAssertHandler(*v8, 0, (uint64_t)"LiftedSource", "(detectionIndex != kInvalidRigIndex) Linking rig source to enrollment keypoint failed");
  }
  if (*v6 == -1)
  {
    v9 = ikinemaLogObject();
    ikinemaAssertHandler(*v9, 0, (uint64_t)"LiftedSource", "(cameraIndex != kInvalidRigIndex) Linking rig source to enrollment keypoint failed");
  }
  return a1;
}

void FIK::Enrollment::LiftedSource::getTarget(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __n128 *a4@<X8>)
{
  char v6;
  _QWORD v7[2];

  v7[0] = a2;
  v7[1] = a3;
  if (FIK::Enrollment::FrameAdaptor::isLiftedValid((FIK::Enrollment::FrameAdaptor *)v7, *(int *)(a1 + 4), *(int *)(a1 + 8)))
  {
    FIK::Enrollment::FrameAdaptor::getLiftedPositionForJoint((FIK::Enrollment::FrameAdaptor *)v7, *(int *)(a1 + 4), *(int *)(a1 + 8), a4);
    v6 = 1;
  }
  else
  {
    v6 = 0;
    a4->n128_u8[0] = 0;
  }
  a4[1].n128_u8[0] = v6;
}

void FIK::Enrollment::LiftedSource::getTarget(uint64_t a1@<X0>, unint64_t *a2@<X1>, unint64_t a3@<X2>, __n128 *a4@<X8>)
{
  __n128 v8;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  FIK::Enrollment::LiftedSource::getTarget(a1, *a2 + 160 * a3, 1, &v8);
  if (v9)
  {
    *a4 = v8;
    a4[1].n128_u8[0] = 1;
  }
  else
  {
    FIK::Enrollment::LiftedSource::getApproxLifted(a1, a2, a3, a4);
  }
}

void FIK::Enrollment::LiftedSource::getApproxLifted(uint64_t a1@<X0>, unint64_t *a2@<X1>, unint64_t a3@<X2>, __n128 *a4@<X8>)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float32x4_t v16;
  uint64_t v17;
  _QWORD v18[2];
  float32x4_t v19;
  float32x4_t v20;
  int v21;

  if (a3)
  {
    v8 = a3;
    if (a3 == -1)
      v8 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(160 * a2[1]) >> 5);
    v20.i64[0] = *a2;
    v20.i64[1] = v8;
    v21 = 1;
    v10 = v9;
    v11 = a3 + 1;
    v12 = a2[1];
    if (a3 + 1 >= v12)
    {
      if (v9 == -1)
        goto LABEL_24;
      goto LABEL_18;
    }
  }
  else
  {
    v12 = a2[1];
    if (v12 <= 1)
      goto LABEL_24;
    v10 = -1;
    v11 = 1;
  }
  v20.i64[0] = *a2 + 160 * v11;
  v20.i64[1] = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(160 * (v12 - v11)) >> 5);
  v21 = 1;
  if (v13 == -1)
    v14 = -1;
  else
    v14 = v13 + v11;
  if (v10 == -1 || v14 == -1)
  {
    if (v10 != -1)
    {
LABEL_18:
      v17 = *a2 + 160 * v10;
LABEL_19:
      v20.i64[0] = v17;
      v20.i64[1] = 1;
      FIK::Enrollment::FrameAdaptor::getLiftedPositionForJoint((FIK::Enrollment::FrameAdaptor *)&v20, *(int *)(a1 + 4), *(int *)(a1 + 8), a4);
      a4[1].n128_u8[0] = 1;
      return;
    }
    if (v14 != -1)
    {
      v17 = *a2 + 160 * v14;
      goto LABEL_19;
    }
LABEL_24:
    a4->n128_u8[0] = 0;
    a4[1].n128_u8[0] = 0;
    return;
  }
  v19.i64[0] = *a2 + 160 * v10;
  v19.i64[1] = 1;
  FIK::Enrollment::FrameAdaptor::getLiftedPositionForJoint((FIK::Enrollment::FrameAdaptor *)&v19, *(int *)(a1 + 4), *(int *)(a1 + 8), (__n128 *)&v20);
  v18[0] = *a2 + 160 * v14;
  v18[1] = 1;
  FIK::Enrollment::FrameAdaptor::getLiftedPositionForJoint((FIK::Enrollment::FrameAdaptor *)v18, *(int *)(a1 + 4), *(int *)(a1 + 8), (__n128 *)&v19);
  v15 = (float)(a3 - v10) / (float)(unint64_t)(v14 - v10);
  if (v15 <= 0.0)
  {
    v16 = v20;
  }
  else
  {
    v16 = v19;
    if (v15 < 1.0)
      v16 = vaddq_f32(v20, vmulq_n_f32(vsubq_f32(v19, v20), v15));
  }
  *a4 = (__n128)v16;
  a4[1].n128_u8[0] = 1;
}

uint64_t FIK::Enrollment::RaySource::RaySource(uint64_t a1, FIK *a2, _BYTE *a3, size_t a4, int a5, float a6)
{
  _DWORD *v7;
  uint64_t *v9;
  int v10;

  *(float *)a1 = a6;
  *(_DWORD *)(a1 + 4) = a5;
  *(_DWORD *)(a1 + 8) = -1;
  v7 = (_DWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 3);
  v10 = -1;
  FIK::Enrollment::SourceDefinition::getDetectionIndicesForPrefixedName(a2, a3, a4, (_DWORD *)(a1 + 8), &v10);
  if (*v7 == -1)
  {
    v9 = ikinemaLogObject();
    ikinemaAssertHandler(*v9, 0, (uint64_t)"RaySource", "(detectionIndex != kInvalidRigIndex) Linking rig source to enrollment keypoint failed");
  }
  return a1;
}

uint64_t *FIK::Enrollment::RaySource::getTarget@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, unint64_t a3@<X2>, float32x4_t *a4@<X8>)
{
  uint64_t *result;
  _QWORD v9[2];

  v9[0] = *a2 + 160 * a3;
  v9[1] = 1;
  if (!FIK::Enrollment::RaySource::isDataValid((FIK::Enrollment::RaySource *)a1, (const FIK::Enrollment::FrameAdaptor *)v9))return FIK::Enrollment::RaySource::getApproxRaysCenter(a1, a2, a3, a4);
  result = FIK::Enrollment::RaySource::getRaysCenter((FIK::Enrollment::RaySource *)a1, (const FIK::Enrollment::FrameAdaptor *)v9, a4);
  if (!a4[1].i8[0])
    return FIK::Enrollment::RaySource::getApproxRaysCenter(a1, a2, a3, a4);
  return result;
}

BOOL FIK::Enrollment::RaySource::isDataValid(FIK::Enrollment::RaySource *this, const FIK::Enrollment::FrameAdaptor *a2)
{
  unint64_t v4;
  _BOOL8 result;

  if (!*((_QWORD *)this + 2))
    return 0;
  v4 = 0;
  do
  {
    result = FIK::Enrollment::FrameAdaptor::isRayDirValid(a2, v4, *((int *)this + 2));
    if (result)
      break;
    ++v4;
  }
  while (v4 < *((_QWORD *)this + 2));
  return result;
}

uint64_t *FIK::Enrollment::RaySource::getRaysCenter@<X0>(FIK::Enrollment::RaySource *this@<X0>, const FIK::Enrollment::FrameAdaptor *a2@<X1>, float32x4_t *a3@<X8>)
{
  uint64_t *result;
  unint64_t v7;
  uint64_t v8;
  float32x4_t v9;
  uint64_t v10;
  float32x4_t v11;
  uint64_t v12[2];
  uint64_t v13;
  uint64_t v14;

  result = (uint64_t *)FIK::defaultAllocator(this);
  v12[0] = 0;
  v12[1] = 0;
  v13 = 0;
  v14 = (uint64_t)result;
  if (!*((_QWORD *)this + 2))
    goto LABEL_10;
  v7 = 0;
  do
  {
    result = (uint64_t *)FIK::Enrollment::FrameAdaptor::isRayDirValid(a2, v7, *((int *)this + 2));
    if ((_DWORD)result)
    {
      FIK::Enrollment::FrameAdaptor::getRayEndForJoint(a2, *(float *)this, v7, *((int *)this + 2), &v11);
      result = FIK::IKArray<FIK::Vector>::reserve(v12, v12[0] + 1);
      *(float32x4_t *)(v13 + 16 * v12[0]++) = v11;
    }
    ++v7;
  }
  while (v7 < *((_QWORD *)this + 2));
  if (v12[0])
  {
    v8 = 0;
    v9 = 0uLL;
    v10 = v13;
    do
      v9 = vaddq_f32(v9, *(float32x4_t *)(v13 + 16 * v8++));
    while (v12[0] != v8);
    *a3 = vmulq_n_f32(v9, 1.0 / (float)(unint64_t)v12[0]);
    a3[1].i8[0] = 1;
    v12[0] = 0;
  }
  else
  {
LABEL_10:
    a3->i8[0] = 0;
    a3[1].i8[0] = 0;
    v10 = v13;
    v12[0] = 0;
    if (!v13)
      return result;
  }
  return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v14 + 24))(v14, v10, 0, 8);
}

uint64_t *FIK::Enrollment::RaySource::getApproxRaysCenter@<X0>(uint64_t *this@<X0>, _QWORD *a2@<X1>, unint64_t a3@<X2>, float32x4_t *a4@<X8>)
{
  FIK::Enrollment::RaySource *v6;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  float32x4_t v24;
  float v25;
  float32x4_t v26;
  uint64_t v27;
  uint64_t v28;
  int8x16_t v29;
  unsigned __int8 v30;
  uint64_t v31;

  v6 = (FIK::Enrollment::RaySource *)this;
  v31 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v8 = a3;
    if (a3 == -1)
      v8 = 0xCCCCCCCCCCCCCCCDLL * ((160 * a2[1]) >> 5);
    v9 = *a2 + 160 * v8 - 160;
    while (v8)
    {
      --v8;
      v29.i64[0] = v9;
      v29.i64[1] = 1;
      this = (uint64_t *)FIK::Enrollment::RaySource::isDataValid(v6, (const FIK::Enrollment::FrameAdaptor *)&v29);
      v9 -= 160;
      if ((_DWORD)this)
        goto LABEL_9;
    }
  }
  v8 = -1;
LABEL_9:
  v10 = a3 + 1;
  v11 = a2[1];
  v12 = v11 > a3 + 1;
  v13 = v11 - (a3 + 1);
  if (v12 && (v14 = 160 * v13) != 0)
  {
    v15 = v14 / 160;
    if (v15 <= 1)
      v16 = 1;
    else
      v16 = v15;
    v17 = *a2 + 160 * a3 + 160;
    while (1)
    {
      v29.i64[0] = v17;
      v29.i64[1] = 1;
      this = (uint64_t *)FIK::Enrollment::RaySource::isDataValid(v6, (const FIK::Enrollment::FrameAdaptor *)&v29);
      if ((this & 1) != 0)
        break;
      ++v10;
      v17 += 160;
      if (!--v16)
        goto LABEL_18;
    }
  }
  else
  {
LABEL_18:
    v10 = -1;
  }
  if (v8 == -1)
  {
    if (v10 == -1)
      goto LABEL_32;
    v20 = 0;
    v26 = 0u;
  }
  else
  {
    v27 = *a2 + 160 * v8;
    v28 = 1;
    this = FIK::Enrollment::RaySource::getRaysCenter(v6, (const FIK::Enrollment::FrameAdaptor *)&v27, (float32x4_t *)&v29);
    v20 = v30;
    v21 = v29;
    if (v10 == -1)
    {
      if (v30)
        goto LABEL_34;
LABEL_32:
      a4->i8[0] = 0;
      a4[1].i8[0] = 0;
      return this;
    }
    v18.i32[0] = 0;
    v19.i32[0] = v30;
    v26 = (float32x4_t)vbicq_s8(v29, (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v19, v18), 0));
  }
  v27 = *a2 + 160 * v10;
  v28 = 1;
  this = FIK::Enrollment::RaySource::getRaysCenter(v6, (const FIK::Enrollment::FrameAdaptor *)&v27, (float32x4_t *)&v29);
  v22.i32[0] = 0;
  v23.i32[0] = v30;
  v24 = (float32x4_t)vbicq_s8(v29, vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(v23, v22), 0));
  if (!v20)
  {
    if (v30)
    {
LABEL_36:
      *a4 = v24;
      goto LABEL_37;
    }
    goto LABEL_32;
  }
  if (v30)
  {
    v25 = (float)((float)a3 - (float)v8) / (float)((float)v10 - (float)v8);
    if (v25 <= 0.0)
    {
      v24 = v26;
    }
    else if (v25 < 1.0)
    {
      v24 = vaddq_f32(vmulq_n_f32(vsubq_f32(v24, v26), v25), v26);
    }
    goto LABEL_36;
  }
  v21 = (int8x16_t)v26;
LABEL_34:
  *a4 = (float32x4_t)v21;
LABEL_37:
  a4[1].i8[0] = 1;
  return this;
}

uint64_t FIK::Enrollment::VirtualSourceHierarchy::VirtualSourceHierarchy(uint64_t a1, uint64_t a2, void *a3, size_t a4, _QWORD *a5)
{
  void (***v10)(FIK::CrtAllocator *__hidden);
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  float32x4_t *v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  int32x4_t v22;
  float32x4_t v23;
  int32x4_t v24;
  float32x4_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  float32x4_t v29;
  float32x4_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  float32x4_t *v36;
  float32x4_t v37;
  float32x4_t v38;
  int32x4_t v39;
  int8x16_t v40;
  float32x4_t v41;
  float32x4_t v42;
  int32x4_t v43;
  float32x4_t v44;
  int32x4_t v45;
  float32x4_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = xmmword_210802BA0;
  v10 = FIK::defaultAllocator((FIK *)a1);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = v10;
  v11 = FIK::IKRigUtils::getBoneIndex<FIK::RigBoneBase,void>(a3, a4, (unsigned int *)(a2 + 240));
  if (v11 == -1)
  {
    v50 = ikinemaLogObject();
    ikinemaAssertHandler(*v50, 0, (uint64_t)"VirtualSourceHierarchy", "(rootSourceIndex != kInvalidRigIndex) Failed to find source in solver sources.");
  }
  v12 = *(_QWORD *)(a2 + 208);
  if (!v12)
    goto LABEL_7;
  v13 = 0;
  v14 = *(_QWORD *)(a2 + 224);
  v15 = 280;
  while (*(_DWORD *)(v14 + v15) != v11)
  {
    ++v13;
    v15 += 544;
    if (v12 == v13)
      goto LABEL_7;
  }
  if ((_DWORD)v13 == -1)
  {
LABEL_7:
    v16 = ikinemaLogObject();
    ikinemaAssertHandler(*v16, 0, (uint64_t)"VirtualSourceHierarchy", "(rootBoneIndex != kInvalidRigIndex) Failed to find solver joint for source.");
    v14 = *(_QWORD *)(a2 + 224);
    LODWORD(v13) = -1;
  }
  if (*a5)
  {
    v17 = (float32x4_t *)(v14 + 544 * (int)v13);
    v18 = v17[4];
    v19 = vmulq_f32(v17[5], (float32x4_t)xmmword_210802C20);
    v20 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v19, (int32x4_t)v19), (int8x16_t)v19, 0xCuLL);
    v21 = vnegq_f32(v19);
    v22 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v18, (int32x4_t)v18), (int8x16_t)v18, 0xCuLL), v21), v18, v20);
    v23 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v22, v22), (int8x16_t)v22, 0xCuLL);
    v54 = v21;
    v55 = v20;
    v24 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v23, (int32x4_t)v23), (int8x16_t)v23, 0xCuLL), v21), v23, v20);
    v25 = vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v24, v24), (int8x16_t)v24, 0xCuLL), v23, v19, 3);
    v23.i64[0] = 0x4000000040000000;
    v23.i64[1] = 0x4000000040000000;
    v56 = v19;
    v57 = vmlaq_f32(v18, v23, v25);
    v26 = a5[2];
    v52 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 0);
    v53 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 3);
    v51 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2);
    v27 = v26 + 16 * *a5;
    do
    {
      v28 = FIK::IKRigUtils::getBoneIndex<FIK::RigBoneBase,void>(*(void **)v26, *(_QWORD *)(v26 + 8), (unsigned int *)(a2 + 240));
      if (v28 == -1)
      {
        v48 = ikinemaLogObject();
        ikinemaAssertHandler(*v48, 0, (uint64_t)"VirtualSourceHierarchy", "(sourceIndex != kInvalidRigIndex) Failed to find source in solver sources.");
      }
      v29 = 0uLL;
      v30 = (float32x4_t)xmmword_210802BA0;
      if (v28 != v11)
      {
        v31 = *(_QWORD *)(a2 + 208);
        if (!v31)
          goto LABEL_18;
        v32 = 0;
        v33 = *(_QWORD *)(a2 + 224);
        v34 = 280;
        while (*(_DWORD *)(v33 + v34) != v28)
        {
          ++v32;
          v34 += 544;
          if (v31 == v32)
            goto LABEL_18;
        }
        if ((_DWORD)v32 == -1)
        {
LABEL_18:
          v35 = ikinemaLogObject();
          ikinemaAssertHandler(*v35, 0, (uint64_t)"VirtualSourceHierarchy", "(boneIndex != kInvalidRigIndex) Failed to find solver joint for source.");
          v33 = *(_QWORD *)(a2 + 224);
          LODWORD(v32) = -1;
        }
        v36 = (float32x4_t *)(v33 + 544 * (int)v32);
        v38 = v36[4];
        v37 = v36[5];
        v39 = (int32x4_t)vnegq_f32(v37);
        v40 = (int8x16_t)vtrn2q_s32((int32x4_t)v37, vtrn1q_s32((int32x4_t)v37, v39));
        v41 = vmlaq_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v37, (int8x16_t)v39, 8uLL), *(float32x2_t *)v56.f32, 1), (float32x4_t)vextq_s8(v40, v40, 8uLL), v52);
        v42 = (float32x4_t)vrev64q_s32((int32x4_t)v37);
        v42.i32[0] = v39.i32[1];
        v42.i32[3] = v39.i32[2];
        v30 = vaddq_f32(vmlaq_f32(vmulq_laneq_f32(v37, v56, 3), v42, v51), v41);
        v43 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v38, (int32x4_t)v38), (int8x16_t)v38, 0xCuLL), v54), v38, v55);
        v44 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v43, v43), (int8x16_t)v43, 0xCuLL);
        v45 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v44, (int32x4_t)v44), (int8x16_t)v44, 0xCuLL), v54), v44, v55);
        v46 = vmlaq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v45, v45), (int8x16_t)v45, 0xCuLL), v44, v53);
        v44.i64[0] = 0x4000000040000000;
        v44.i64[1] = 0x4000000040000000;
        v29 = vsubq_f32(vmlaq_f32(v38, v44, v46), v57);
      }
      v58 = v29;
      v59 = v30;
      FIK::IKArray<FIK::Enrollment::VirtualSourceHierarchy::VirtualSourceDescriptor>::reserve((uint64_t *)(a1 + 32), *(_QWORD *)(a1 + 32) + 1);
      v47 = *(_QWORD *)(a1 + 48) + 48 * *(_QWORD *)(a1 + 32);
      *(_DWORD *)v47 = v28;
      *(float32x4_t *)(v47 + 16) = v58;
      *(float32x4_t *)(v47 + 32) = v59;
      ++*(_QWORD *)(a1 + 32);
      v26 += 16;
    }
    while (v26 != v27);
  }
  return a1;
}

float32x4_t *FIK::Enrollment::VirtualSourceHierarchy::updateSources(float32x4_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;
  float32x4_t *v7;
  uint64_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  int32x4_t v12;
  int8x16_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  int32x4_t v20;
  float32x4_t v21;
  int32x4_t v22;
  float32x4_t *v23;

  v6 = result[2].i64[0];
  if (v6)
  {
    v7 = (float32x4_t *)result[3].i64[0];
    v8 = 48 * v6;
    v9.i64[0] = 0x4000000040000000;
    v9.i64[1] = 0x4000000040000000;
    do
    {
      v11 = v7[1];
      v10 = v7[2];
      v12 = (int32x4_t)vnegq_f32(v10);
      v13 = (int8x16_t)vtrn2q_s32((int32x4_t)v10, vtrn1q_s32((int32x4_t)v10, v12));
      v14 = result[1];
      v15 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v10, (int8x16_t)v12, 8uLL), *(float32x2_t *)v14.f32, 1), (float32x4_t)vextq_s8(v13, v13, 8uLL), v14.f32[0]);
      v16 = (float32x4_t)vrev64q_s32((int32x4_t)v10);
      v16.i32[0] = v12.i32[1];
      v16.i32[3] = v12.i32[2];
      v17 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v10, v14, 3), v16, v14, 2), v15);
      v18 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v14, (int32x4_t)v14), (int8x16_t)v14, 0xCuLL);
      v19 = vnegq_f32(v14);
      v20 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v11, (int32x4_t)v11), (int8x16_t)v11, 0xCuLL), v19), v11, v18);
      v21 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v20, v20), (int8x16_t)v20, 0xCuLL);
      v22 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v21, (int32x4_t)v21), (int8x16_t)v21, 0xCuLL), v19), v21, v18);
      v23 = (float32x4_t *)(a2 + 32 * v7->i32[0]);
      *v23 = vaddq_f32(*result, vmlaq_f32(v11, v9, vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v22, v22), (int8x16_t)v22, 0xCuLL), v21, v14, 3)));
      v23[1] = v17;
      *(_BYTE *)(a4 + v7->i32[0]) = a6;
      v7 += 3;
      v8 -= 48;
    }
    while (v8);
  }
  return result;
}

float32x4_t *FIK::Enrollment::VirtualSourceController::VirtualSourceController(float32x4_t *a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v6;
  void *v7;
  size_t v8;
  __int32 v9;
  int v10;
  float32x4_t *GlobalTransform;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  float32x4_t v19;
  float32x4_t v20;
  int32x4_t v21;
  float32x4_t v22;
  int32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  int32x4_t v26;
  float32x4_t v27;
  int32x4_t v28;
  float32x4_t v29;
  int32x4_t v30;
  int8x16_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  int32x4_t v35;
  float32x4_t v36;
  int32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56[2];
  float32x4_t v57[2];
  uint64_t v58[20];
  uint64_t v59[20];
  _QWORD v60[2];
  uint64_t v61;
  uint64_t v62;

  a1->i64[0] = -1;
  a1[1].i32[0] = -1;
  a1[2].i64[0] = 0;
  a1[2].i64[1] = 0;
  a1[3] = (float32x4_t)xmmword_210802BA0;
  a1[4].i32[0] = 0;
  v6 = (uint64_t)&a1[5];
  v7 = *(void **)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  FIK::IKArray<std::string_view>::IKArray(v60, (_QWORD *)(a2 + 48));
  FIK::Enrollment::VirtualSourceHierarchy::VirtualSourceHierarchy(v6, (uint64_t)a3, v7, v8, v60);
  v60[0] = 0;
  if (v61)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v62 + 24))(v62, v61, 0, 8);
  FIK::PoseConverter::PoseConverter<FIK::MoCapBone>(v59, *((_QWORD *)a3 + 28), *((_QWORD *)a3 + 26));
  FIK::PoseConverter::PoseConverter<FIK::RigBoneBase>(v58, *((_QWORD *)a3 + 32), *((_QWORD *)a3 + 30));
  v9 = FIK::IKRigUtils::getBoneIndex<FIK::RigBoneBase,void>(*(void **)a2, *(_QWORD *)(a2 + 8), a3 + 60);
  a1->i32[0] = v9;
  if (v9 == -1)
  {
    v42 = ikinemaLogObject();
    ikinemaAssertHandler(*v42, 0, (uint64_t)"VirtualSourceController", "(m_controlSourceIndex != kInvalidRigIndex) Failed to find controling source in solver sources.");
  }
  v10 = FIK::IKRigUtils::getBoneIndex<FIK::RigBoneBase,void>(*(void **)(a2 + 16), *(_QWORD *)(a2 + 24), a3 + 60);
  a1->i32[1] = v10;
  if (v10 == -1)
  {
    v43 = ikinemaLogObject();
    ikinemaAssertHandler(*v43, 0, (uint64_t)"VirtualSourceController", "(m_correctionSourceIndex != kInvalidRigIndex) Failed to find corrective source in solver sources.");
  }
  GlobalTransform = (float32x4_t *)FIK::PoseConverter::GetGlobalTransform((FIK::PoseConverter *)v58, a1->i32[0]);
  v50 = GlobalTransform[1];
  v52 = *GlobalTransform;
  v12 = *((_QWORD *)a3 + 22);
  if (!v12)
    goto LABEL_11;
  v13 = 0;
  v14 = a1->i32[0];
  v15 = *((_QWORD *)a3 + 24);
  v16 = 200;
  while (*(_DWORD *)(v15 + v16) != v14)
  {
    ++v13;
    v16 += 256;
    if (v12 == v13)
      goto LABEL_11;
  }
  if ((_DWORD)v13 == -1)
  {
LABEL_11:
    v17 = ikinemaLogObject();
    ikinemaAssertHandler(*v17, 0, (uint64_t)"getTaskOffsetForSource", "(taskIndex != kInvalidRigIndex) The given source is not driving a task!");
    v15 = *((_QWORD *)a3 + 24);
    v14 = a1->i32[0];
    LODWORD(v13) = -1;
  }
  v48 = *(float32x4_t *)(v15 + ((uint64_t)(int)v13 << 8) + 208);
  FIK::Enrollment::getBonePoseInSourceSpace((uint64_t)a3, v14, (FIK::PoseConverter *)v59, (uint64_t)v57);
  v46 = v57[0];
  FIK::Enrollment::getBonePoseInSourceSpace((uint64_t)a3, a1->i32[1], (FIK::PoseConverter *)v59, (uint64_t)v56);
  v18 = FIK::IKRigUtils::getBoneIndex<FIK::RigBoneBase,void>(*(void **)(a2 + 32), *(_QWORD *)(a2 + 40), a3 + 60);
  if (v18 == -1)
  {
    v44 = ikinemaLogObject();
    ikinemaAssertHandler(*v44, 0, (uint64_t)"VirtualSourceController", "(depSourceIndex != kInvalidRigIndex) Failed to find dependent source in solver sources.");
  }
  v19 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v50, (int32x4_t)v50), (int8x16_t)v50, 0xCuLL);
  v20 = vnegq_f32(v50);
  v21 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v48, (int32x4_t)v48), (int8x16_t)v48, 0xCuLL), v20), v48, v19);
  v22 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v21, v21), (int8x16_t)v21, 0xCuLL);
  v23 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v22, (int32x4_t)v22), (int8x16_t)v22, 0xCuLL), v20), v22, v19);
  v24 = vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v23, v23), (int8x16_t)v23, 0xCuLL), v22, v50, 3);
  v22.i64[0] = 0x4000000040000000;
  v22.i64[1] = 0x4000000040000000;
  v25.i64[0] = 0x4000000040000000;
  v25.i64[1] = 0x4000000040000000;
  v47 = vsubq_f32(vaddq_f32(v52, vmlaq_f32(v48, v22, v24)), v46);
  v45 = vmulq_f32(v50, (float32x4_t)xmmword_210802C20);
  v49 = vnegq_f32(v45);
  v51 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v45, (int32x4_t)v45), (int8x16_t)v45, 0xCuLL);
  v26 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v52, (int32x4_t)v52), (int8x16_t)v52, 0xCuLL), v49), v52, v51);
  v27 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v26, v26), (int8x16_t)v26, 0xCuLL);
  v28 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v27, (int32x4_t)v27), (int8x16_t)v27, 0xCuLL), v49), v27, v51);
  v53 = vmlaq_f32(v52, v25, vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v28, v28), (int8x16_t)v28, 0xCuLL), v27, v45, 3));
  FIK::Enrollment::getBonePoseInSourceSpace((uint64_t)a3, v18, (FIK::PoseConverter *)v59, (uint64_t)&v54);
  v29 = vaddq_f32(v47, v54);
  v30 = (int32x4_t)vnegq_f32(v55);
  v31 = (int8x16_t)vtrn2q_s32((int32x4_t)v55, vtrn1q_s32((int32x4_t)v55, v30));
  v32 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v55, (int8x16_t)v30, 8uLL), *(float32x2_t *)v45.f32, 1), (float32x4_t)vextq_s8(v31, v31, 8uLL), v45.f32[0]);
  v33 = (float32x4_t)vrev64q_s32((int32x4_t)v55);
  v33.i32[0] = v30.i32[1];
  v33.i32[3] = v30.i32[2];
  v34 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v55, v45, 3), v33, v45, 2), v32);
  v35 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v29, (int32x4_t)v29), (int8x16_t)v29, 0xCuLL), v49), v29, v51);
  v36 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v35, v35), (int8x16_t)v35, 0xCuLL);
  v37 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v36, (int32x4_t)v36), (int8x16_t)v36, 0xCuLL), v49), v36, v51);
  v38 = vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v37, v37), (int8x16_t)v37, 0xCuLL), v36, v45, 3);
  v36.i64[0] = 0x4000000040000000;
  v36.i64[1] = 0x4000000040000000;
  v39 = vsubq_f32(v54, v56[0]);
  v40 = vmulq_f32(v39, v39);
  a1[1].i32[0] = v18;
  a1[2] = vsubq_f32(vmlaq_f32(v29, v36, v38), v53);
  a1[3] = v34;
  a1[4].f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v40, 2), vaddq_f32(v40, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.f32, 1))).f32[0]);
  FIK::PoseConverter::~PoseConverter((FIK::PoseConverter *)v58);
  FIK::PoseConverter::~PoseConverter((FIK::PoseConverter *)v59);
  return a1;
}

float32x4_t FIK::Enrollment::getBonePoseInSourceSpace@<Q0>(uint64_t a1@<X0>, int a2@<W1>, FIK::PoseConverter *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t *v10;
  unint64_t GlobalTransform;
  __int128 v12;
  float32x4_t result;
  float v14;

  v7 = *(_QWORD *)(a1 + 208);
  if (!v7)
    goto LABEL_5;
  v8 = 0;
  v9 = (_DWORD *)(*(_QWORD *)(a1 + 224) + 280);
  while (*v9 != a2)
  {
    v9 += 136;
    if (v7 == ++v8)
      goto LABEL_5;
  }
  if ((_DWORD)v8 == -1)
  {
LABEL_5:
    v10 = ikinemaLogObject();
    ikinemaAssertHandler(*v10, 0, (uint64_t)"getBonePoseInSourceSpace", "(boneIndex != kInvalidRigIndex) The given source is not driving a bone!");
    LODWORD(v8) = -1;
  }
  v14 = 1.0 / *(float *)(a1 + 308);
  GlobalTransform = FIK::PoseConverter::GetGlobalTransform(a3, (int)v8);
  v12 = *(_OWORD *)(GlobalTransform + 16);
  result = vmulq_n_f32(*(float32x4_t *)GlobalTransform, v14);
  *(float32x4_t *)a4 = result;
  *(_OWORD *)(a4 + 16) = v12;
  return result;
}

__n128 FIK::Enrollment::VirtualSourceController::computeRelativeControlPose@<Q0>(__n128 *a1@<X0>, float32x4_t *a2@<X1>, uint64_t a3@<X8>)
{
  float32x4_t v3;
  float32x4_t v4;
  int8x16_t v5;
  float32x2_t v6;
  float32x4_t v7;
  unsigned __int32 v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x4_t v11;
  int32x4_t v12;
  int8x16_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  __n128 result;

  v3 = a2[1];
  v4 = (float32x4_t)vtrn2q_s32(vrev64q_s32((int32x4_t)0), (int32x4_t)v3);
  v5 = (int8x16_t)vmulq_f32(v4, v4);
  v6 = vadd_f32(*(float32x2_t *)v5.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL));
  if (vaddv_f32(v6) == 0.0)
  {
    v7 = (float32x4_t)xmmword_210802BA0;
  }
  else
  {
    v8 = vadd_f32(v6, (float32x2_t)vdup_lane_s32((int32x2_t)v6, 1)).u32[0];
    v9 = vrsqrte_f32((float32x2_t)v8);
    v10 = vmul_f32(v9, vrsqrts_f32((float32x2_t)v8, vmul_f32(v9, v9)));
    v7 = vmulq_n_f32(v4, vmul_f32(v10, vrsqrts_f32((float32x2_t)v8, vmul_f32(v10, v10))).f32[0]);
  }
  v11 = vmulq_f32(v3, (float32x4_t)xmmword_210802C20);
  v12 = (int32x4_t)vnegq_f32(v7);
  v13 = (int8x16_t)vtrn2q_s32((int32x4_t)v7, vtrn1q_s32((int32x4_t)v7, v12));
  v14 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v7, (int8x16_t)v12, 8uLL), *(float32x2_t *)v11.f32, 1), (float32x4_t)vextq_s8(v13, v13, 8uLL), v11.f32[0]);
  v15 = (float32x4_t)vrev64q_s32((int32x4_t)v7);
  v15.i32[0] = v12.i32[1];
  v15.i32[3] = v12.i32[2];
  v16 = vmlaq_laneq_f32(vmulq_laneq_f32(v7, v11, 3), v15, v11, 2);
  result = *a1;
  *(__n128 *)a3 = *a1;
  *(float32x4_t *)(a3 + 16) = vaddq_f32(v16, v14);
  return result;
}

float32x4_t *FIK::Enrollment::VirtualSourceController::updateDependents(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float32x4_t *a6, float32x4_t *a7)
{
  uint64_t v13;
  int v14;
  float32x4_t v15;
  float32x4_t v16;
  int32x4_t v17;
  int8x16_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  int32x4_t v23;
  float32x4_t v24;
  int32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float v31;
  float v32;
  float32x4_t v33;
  float32x4_t v34;
  float v35;
  float v36;
  float32x4_t v37;
  float32x4_t v38;
  int32x2_t v39;
  float32x4_t v40;
  float32x4_t v41;
  int32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float v45;
  float32x4_t v46;
  float32x4_t v47;
  float v48;
  float32x4_t v49;
  int32x4_t v50;
  int8x16_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  int32x4_t v56;
  float32x4_t v57;
  int32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float v61;
  float32x4_t v62;
  float32x4_t v63;
  float v64;
  int32x4_t v66;
  float32x4_t v67;
  int8x16_t v68;
  float32x2_t v69;
  unsigned __int32 v70;
  float32x2_t v71;
  float32x2_t v72;
  uint64_t *v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;

  v13 = a1->i32[0];
  v14 = *(unsigned __int8 *)(a4 + v13);
  v76 = *(float32x4_t *)(a2 + 32 * a1->i32[1]);
  FIK::Enrollment::VirtualSourceController::computeRelativeControlPose((__n128 *)(a2 + 32 * v13), a6, (uint64_t)&v77);
  v16 = a1[2];
  v15 = a1[3];
  v17 = (int32x4_t)vnegq_f32(v15);
  v18 = (int8x16_t)vtrn2q_s32((int32x4_t)v15, vtrn1q_s32((int32x4_t)v15, v17));
  v19 = (float32x4_t)vrev64q_s32((int32x4_t)v15);
  v19.i32[0] = v17.i32[1];
  v19.i32[3] = v17.i32[2];
  v20 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v15, v78, 3), v19, v78, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v15, (int8x16_t)v17, 8uLL), *(float32x2_t *)v78.f32, 1), (float32x4_t)vextq_s8(v18, v18, 8uLL), v78.f32[0]));
  v21 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v78, (int32x4_t)v78), (int8x16_t)v78, 0xCuLL);
  v22 = vnegq_f32(v78);
  v23 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v16, (int32x4_t)v16), (int8x16_t)v16, 0xCuLL), v22), v16, v21);
  v24 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v23, v23), (int8x16_t)v23, 0xCuLL);
  v25 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v24, (int32x4_t)v24), (int8x16_t)v24, 0xCuLL), v22), v24, v21);
  v26 = vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v25, v25), (int8x16_t)v25, 0xCuLL), v24, v78, 3);
  v24.i64[0] = 0x4000000040000000;
  v24.i64[1] = 0x4000000040000000;
  v27 = vaddq_f32(v77, vmlaq_f32(v16, v24, v26));
  if (a7[1].i8[0])
  {
    v28 = vsubq_f32(*a7, v77);
    v29 = vsubq_f32(v27, v77);
    v30 = vmulq_f32(v29, v29);
    v31 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v30, 2), vaddq_f32(v30, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.f32, 1))).f32[0]);
    if (v31 == 0.0)
      v32 = 0.0;
    else
      v32 = 1.0 / v31;
    v33 = vmulq_n_f32(v29, v32);
    v34 = vmulq_f32(v28, v28);
    v35 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v34, 2), vaddq_f32(v34, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v34.f32, 1))).f32[0]);
    if (v35 == 0.0)
      v36 = 0.0;
    else
      v36 = 1.0 / v35;
    v37 = vmulq_n_f32(v28, v36);
    v38 = vmulq_f32(v33, v37);
    v39 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v38, 2), vaddq_f32(v38, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v38.f32, 1))).u64[0];
    v40 = (float32x4_t)xmmword_210802BA0;
    if (*(float *)v39.i32 < 1.0)
    {
      if (*(float *)v39.i32 >= -0.999999)
      {
        *(float *)v39.i32 = sqrtf((float)(*(float *)v39.i32 + 1.0) + (float)(*(float *)v39.i32 + 1.0));
        v66 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v37, (int32x4_t)v37), (int8x16_t)v37, 0xCuLL), vnegq_f32(v33)), v37, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v33, (int32x4_t)v33), (int8x16_t)v33, 0xCuLL));
        v67 = vdivq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v66, v66), (int8x16_t)v66, 0xCuLL), (float32x4_t)vdupq_lane_s32(v39, 0));
        v67.f32[3] = *(float *)v39.i32 * 0.5;
        v68 = (int8x16_t)vmulq_f32(v67, v67);
        v69 = vadd_f32(*(float32x2_t *)v68.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v68, v68, 8uLL));
        v49 = v76;
        if (vaddv_f32(v69) != 0.0)
        {
          v70 = vadd_f32(v69, (float32x2_t)vdup_lane_s32((int32x2_t)v69, 1)).u32[0];
          v71 = vrsqrte_f32((float32x2_t)v70);
          v72 = vmul_f32(v71, vrsqrts_f32((float32x2_t)v70, vmul_f32(v71, v71)));
          v40 = vmulq_n_f32(v67, vmul_f32(v72, vrsqrts_f32((float32x2_t)v70, vmul_f32(v72, v72))).f32[0]);
        }
        goto LABEL_16;
      }
      v41 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v33, (int32x4_t)v33), (int8x16_t)v33, 0xCuLL);
      v42 = (int32x4_t)vmlaq_f32(vmulq_f32(v41, (float32x4_t)xmmword_210802BB0), (float32x4_t)xmmword_210802BC0, v33);
      v43 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v42, v42), (int8x16_t)v42, 0xCuLL);
      v43.i32[3] = 0;
      v44 = vmulq_f32(v43, v43);
      v45 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v44, 2), vaddq_f32(v44, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v44.f32, 1))).f32[0]);
      if (fabsf(v45) < 0.000000001)
      {
        v46 = vmlaq_f32(vmulq_f32(v41, (float32x4_t)xmmword_210802BD0), (float32x4_t)xmmword_210802BE0, v33);
        v47 = vmulq_f32(v46, v46);
        v43 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v46, (int32x4_t)v46), (int8x16_t)v46, 0xCuLL);
        v45 = sqrtf(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v47.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v47, 2), v47)).f32[0]);
      }
      v48 = 1.0 / v45;
      if (v45 == 0.0)
        v48 = 0.0;
      v40 = vmulq_n_f32(v43, v48);
      v40.i32[3] = 0;
    }
    v49 = v76;
LABEL_16:
    v50 = (int32x4_t)vnegq_f32(v20);
    v51 = (int8x16_t)vtrn2q_s32((int32x4_t)v20, vtrn1q_s32((int32x4_t)v20, v50));
    v52 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v20, (int8x16_t)v50, 8uLL), *(float32x2_t *)v40.f32, 1), (float32x4_t)vextq_s8(v51, v51, 8uLL), v40.f32[0]);
    v53 = (float32x4_t)vrev64q_s32((int32x4_t)v20);
    v53.i32[0] = v50.i32[1];
    v53.i32[3] = v50.i32[2];
    v20 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v20, v40, 3), v53, v40, 2), v52);
    v54 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v40, (int32x4_t)v40), (int8x16_t)v40, 0xCuLL);
    v55 = vnegq_f32(v40);
    v56 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v29, (int32x4_t)v29), (int8x16_t)v29, 0xCuLL), v55), v29, v54);
    v57 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v56, v56), (int8x16_t)v56, 0xCuLL);
    v58 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v57, (int32x4_t)v57), (int8x16_t)v57, 0xCuLL), v55), v57, v54);
    v59 = vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v58, v58), (int8x16_t)v58, 0xCuLL), v57, v40, 3);
    v60.i64[0] = 0x4000000040000000;
    v60.i64[1] = 0x4000000040000000;
    v27 = vaddq_f32(v77, vmlaq_f32(v29, v60, v59));
    goto LABEL_18;
  }
  v49 = v76;
LABEL_18:
  v61 = a1[4].f32[0];
  v62 = vsubq_f32(v27, v49);
  v63 = vmulq_f32(v62, v62);
  v64 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v63, 2), vaddq_f32(v63, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v63.f32, 1))).f32[0]);
  if (vabds_f32(v64, v61) > 0.002)
  {
    if (v64 <= 0.0)
    {
      v74 = v62;
      v75 = v20;
      v73 = ikinemaLogObject();
      ikinemaAssertHandler(*v73, 0, (uint64_t)"checkAndCorrectPose", "(initialGuessDistance > 0) Initial guess was on top of the reference.");
      v62 = v74;
      v20 = v75;
      v49 = v76;
    }
    v27 = vaddq_f32(v49, vmulq_n_f32(v62, v61 / v64));
  }
  a1[5] = v27;
  a1[6] = v20;
  return FIK::Enrollment::VirtualSourceHierarchy::updateSources(a1 + 5, a2, a3, a4, a5, v14 != 0);
}

uint64_t FIK::Enrollment::`anonymous namespace'::getIndexOfFrameWithValidDataInRange<FIK::Enrollment::LiftedSource>(uint64_t a1, _QWORD *a2, int a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v5 = a2[1];
  if (!a3)
  {
    v7 = 160 * v5 - 160;
    while (v5)
    {
      --v5;
      v9 = v7 + *a2;
      v10 = 1;
      v7 -= 160;
      if (FIK::Enrollment::FrameAdaptor::isLiftedValid((FIK::Enrollment::FrameAdaptor *)&v9, *(int *)(a1 + 4), *(int *)(a1 + 8)))
      {
        return v5;
      }
    }
    return -1;
  }
  if (!v5)
    return -1;
  v6 = 0;
  v5 = 0;
  while (1)
  {
    v9 = v6 + *a2;
    v10 = 1;
    if (FIK::Enrollment::FrameAdaptor::isLiftedValid((FIK::Enrollment::FrameAdaptor *)&v9, *(int *)(a1 + 4), *(int *)(a1 + 8)))
    {
      break;
    }
    ++v5;
    v6 += 160;
    if (v5 >= a2[1])
      return -1;
  }
  return v5;
}

uint64_t *FIK::IKArray<FIK::Enrollment::VirtualSourceHierarchy::VirtualSourceDescriptor>::reserve(uint64_t *result, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;

  if (result[1] < a2)
  {
    v2 = result;
    v3 = result[3];
    v4 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v4)
    {
      v5 = (_OWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v3 + 16))(result[3], 48 * v4, 16);
      v6 = v5;
      if (48 * v4)
        bzero(v5, 48 * v4);
    }
    else
    {
      v6 = 0;
    }
    v7 = v2[2];
    v8 = *v2;
    if (*v2)
    {
      v9 = v6;
      do
      {
        *(_DWORD *)v9 = *(_DWORD *)v7;
        v9[1] = *(_OWORD *)(v7 + 16);
        v9[2] = *(_OWORD *)(v7 + 32);
        v7 += 48;
        v9 += 3;
        --v8;
      }
      while (v8);
      v7 = v2[2];
    }
    result = (uint64_t *)v2[3];
    v2[1] = v4;
    v2[2] = (uint64_t)v6;
    v2[3] = v3;
    if (v7)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t, _QWORD, uint64_t))(*result + 24))(result, v7, 0, 8);
  }
  return result;
}

_QWORD *FIK::IKArray<std::string_view>::IKArray(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  _OWORD *v7;
  uint64_t v8;
  __int128 *v9;
  __int128 v10;

  v4 = a2[1];
  v5 = a2[3];
  *a1 = *a2;
  a1[1] = v4;
  if (v4)
  {
    v6 = 16 * v4;
    v7 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, 16 * v4, 8);
    a1[2] = v7;
    a1[3] = v5;
    if (v6)
    {
      bzero(v7, v6);
      v7 = (_OWORD *)a1[2];
    }
  }
  else
  {
    v7 = 0;
    a1[2] = 0;
    a1[3] = v5;
  }
  v8 = *a2;
  if (*a2)
  {
    v9 = (__int128 *)a2[2];
    do
    {
      v10 = *v9++;
      *v7++ = v10;
      --v8;
    }
    while (v8);
  }
  return a1;
}

uint64_t *FIK::PoseConverter::PoseConverter<FIK::RigBoneBase>(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  void (***v6)(FIK::CrtAllocator *__hidden);
  void (***v7)(FIK::CrtAllocator *__hidden);
  void (***v8)(FIK::CrtAllocator *__hidden);
  void (***v9)(FIK::CrtAllocator *__hidden);
  void (***v10)(FIK::CrtAllocator *__hidden);
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;

  v6 = FIK::defaultAllocator((FIK *)a1);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = (uint64_t)v6;
  v7 = FIK::defaultAllocator((FIK *)v6);
  a1[4] = 0;
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = (uint64_t)v7;
  v8 = FIK::defaultAllocator((FIK *)v7);
  a1[8] = 0;
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = (uint64_t)v8;
  v9 = FIK::defaultAllocator((FIK *)v8);
  a1[12] = 0;
  a1[13] = 0;
  a1[14] = 0;
  a1[15] = (uint64_t)v9;
  v10 = FIK::defaultAllocator((FIK *)v9);
  a1[16] = 0;
  a1[17] = 0;
  a1[18] = 0;
  a1[19] = (uint64_t)v10;
  FIK::IKArray<FIK::Transform>::reserve(a1 + 12, a3);
  FIK::IKArray<unsigned int>::reserve(a1, a3);
  if (a3)
  {
    v11 = 96 * a3;
    v12 = (_OWORD *)(a2 + 80);
    do
    {
      FIK::IKArray<FIK::Transform>::reserve(a1 + 12, a1[12] + 1);
      v13 = (_OWORD *)(a1[14] + 32 * a1[12]);
      *v13 = *(v12 - 1);
      v13[1] = *v12;
      ++a1[12];
      FIK::IKArray<unsigned int>::reserve(a1, *a1 + 1);
      v14 = *a1;
      *(_DWORD *)(a1[2] + 4 * *a1) = *((_DWORD *)v12 - 19);
      *a1 = v14 + 1;
      v12 += 6;
      v11 -= 96;
    }
    while (v11);
  }
  FIK::PoseConverter::resetGlobalFlag((FIK::PoseConverter *)a1);
  return a1;
}

uint64_t ikinema::ScalePipeDataAlgorithmImpl::process(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  float32x4_t *v9;
  uint64_t v10;
  uint64_t v12;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v6 = *(uint64_t **)(a1 + 32);
    v7 = &v6[v3];
    do
    {
      v8 = ikinema::BufferContainer::buffer(a3, *v6);
      v9 = (float32x4_t *)ikinema::Buffer::arrayView<FIK::Transform>(v8);
      if (*(float *)(a1 + 8) != 1.0 && v10 != 0)
      {
        v12 = 32 * v10;
        do
        {
          *v9 = vmulq_n_f32(*v9, *(float *)(a1 + 8));
          v9 += 2;
          v12 -= 32;
        }
        while (v12);
      }
      ++v6;
    }
    while (v6 != v7);
  }
  return 0;
}

uint64_t ikinema::ScalePipeDataAlgorithmImpl::registerBuffers(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return 0;
  if (!*a2)
    return 1;
  v3 = *(_QWORD **)(a1 + 32);
  v4 = &v3[v2];
  do
  {
    v5 = (uint64_t *)(a2[2] + 56);
    v6 = 72 * *a2;
    while (1)
    {
      v7 = *v5;
      v5 += 9;
      if (v7 == *v3)
        break;
      v6 -= 72;
      if (!v6)
        return 1;
    }
    result = 0;
    ++v3;
  }
  while (v3 != v4);
  return result;
}

uint64_t ikinema::ScalePipeDataAlgorithm::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t *a4@<X8>, float a5@<S0>)
{
  float v6;
  _QWORD v7[2];

  v7[0] = a1;
  v7[1] = a2;
  v6 = a5;
  return ikinema::AlgorithmHandle::make<ikinema::ScalePipeDataAlgorithmImpl,std::string_view &,float const&,FIK::IKArray<ikinema::BufferKey>>((uint64_t)v7, &v6, a3, a4);
}

uint64_t ikinema::AlgorithmHandle::make<ikinema::ScalePipeDataAlgorithmImpl,std::string_view &,float const&,FIK::IKArray<ikinema::BufferKey>>@<X0>(uint64_t a1@<X0>, float *a2@<X1>, __int128 *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result;
  char *v9;
  uint64_t v10;
  float v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  result = (uint64_t)FIK::FIKAlloc((FIK *)0x48);
  if (result)
  {
    v9 = *(char **)a1;
    v10 = *(_QWORD *)(a1 + 8);
    v11 = *a2;
    v12 = *a3;
    v13 = a3[1];
    *(_QWORD *)a3 = 0;
    *((_QWORD *)a3 + 1) = 0;
    *((_QWORD *)a3 + 2) = 0;
    v14 = v12;
    v15 = v13;
    result = ikinema::ScalePipeDataAlgorithmImpl::ScalePipeDataAlgorithmImpl(result, v9, v11, v10, (uint64_t *)&v14);
    *a4 = result;
    *(_QWORD *)&v14 = 0;
    if ((_QWORD)v15)
      return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**((_QWORD **)&v15 + 1) + 24))(*((_QWORD *)&v15 + 1), v15, 0, 8);
  }
  else
  {
    *a4 = 0;
  }
  return result;
}

const char *ikinema::AlgorithmBlockBase<ikinema::ScalePipeDataAlgorithm>::typeId()
{
  const char *result;
  unsigned __int8 *v1;
  uint64_t v2;
  unsigned int v3;

  result = "N7ikinema22ScalePipeDataAlgorithmE";
  if (((unint64_t)"N7ikinema22ScalePipeDataAlgorithmE" & 0x8000000000000000) != 0)
  {
    v1 = (unsigned __int8 *)((unint64_t)"N7ikinema22ScalePipeDataAlgorithmE" & 0x7FFFFFFFFFFFFFFFLL);
    v2 = 5381;
    do
    {
      result = (const char *)v2;
      v3 = *v1++;
      v2 = (33 * v2) ^ v3;
    }
    while (v3);
  }
  return result;
}

void ikinema::ScalePipeDataAlgorithmImpl::~ScalePipeDataAlgorithmImpl(ikinema::ScalePipeDataAlgorithmImpl *this)
{
  uint64_t v2;

  if (*((_QWORD *)this + 7))
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 8) + 24))(*((_QWORD *)this + 8), *((_QWORD *)this + 6), 0, 8);
    *((_QWORD *)this + 6) = 0;
    *((_QWORD *)this + 7) = 0;
  }
  *((_QWORD *)this + 2) = 0;
  v2 = *((_QWORD *)this + 4);
  if (v2)
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)this + 5) + 24))(*((_QWORD *)this + 5), v2, 0, 8);
}

{
  uint64_t v2;

  if (*((_QWORD *)this + 7))
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 8) + 24))(*((_QWORD *)this + 8), *((_QWORD *)this + 6), 0, 8);
    *((_QWORD *)this + 6) = 0;
    *((_QWORD *)this + 7) = 0;
  }
  *((_QWORD *)this + 2) = 0;
  v2 = *((_QWORD *)this + 4);
  if (v2)
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)this + 5) + 24))(*((_QWORD *)this + 5), v2, 0, 8);
  JUMPOUT(0x212BCAFB4);
}

uint64_t ikinema::ScalePipeDataAlgorithm::isRemovable(ikinema::ScalePipeDataAlgorithm *this)
{
  return 0;
}

void *ikinema::ScalePipeDataAlgorithmImpl::name(ikinema::ScalePipeDataAlgorithmImpl *this)
{
  if (*((_QWORD *)this + 7))
    return (void *)*((_QWORD *)this + 6);
  else
    return &unk_2108059BE;
}

uint64_t ikinema::ScalePipeDataAlgorithmImpl::ScalePipeDataAlgorithmImpl(uint64_t a1, char *a2, float a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  void (***v10)(FIK::CrtAllocator *__hidden);
  IKString *v11;

  if (a3 <= 0.0)
    a3 = 1.0;
  *(float *)(a1 + 8) = a3;
  *(_QWORD *)a1 = &off_24CA6C898;
  v7 = *a5;
  *a5 = 0;
  *(_QWORD *)(a1 + 16) = v7;
  v8 = a5[1];
  v9 = *((_OWORD *)a5 + 1);
  a5[1] = 0;
  *(_QWORD *)(a1 + 24) = v8;
  a5[2] = 0;
  *(_OWORD *)(a1 + 32) = v9;
  v10 = FIK::defaultAllocator((FIK *)a1);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = v10;
  v11 = (IKString *)strlen(a2);
  IKString::assign((_QWORD *)(a1 + 48), a2, v11);
  return a1;
}

void FIK::BipedCharacterisation::operator()(FIK *a1@<X0>, _anonymous_namespace_ *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t **v5;
  void (***v6)(FIK::CrtAllocator *__hidden);
  FIK *v7;
  const FIK::Hierarchy *v8;
  const FIK::Hierarchy *v9;
  const FIK::Hierarchy *v10;
  uint64_t v11;
  const FIK::Hierarchy *v12;
  const FIK::Hierarchy *v13;
  const FIK::Hierarchy *v14;
  FIK *v15;
  uint64_t **v16;
  int *v17;
  const FIK::Hierarchy *v18;
  char v19;
  const FIK::Hierarchy *Head;
  uint64_t v21;
  const FIK::Hierarchy *v22;
  char v23;
  uint64_t v24;
  size_t v25;
  void *v26;
  _QWORD *v27;
  _QWORD *v28;
  char *v29;
  char v30;
  uint64_t i;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  float32x4_t *v38;
  uint64_t v39;
  uint64_t v40;
  float32x4_t *v41;
  int v42;
  uint64_t *v43;
  float32x4_t *v44;
  uint64_t v45;
  uint64_t v46;
  float32x4_t *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  signed int v52;
  uint64_t v53;
  float32x4_t v54;
  float32x4_t v55;
  FIK *v56;
  int *v57;
  int *v58;
  int *v59;
  int *v60;
  int v61;
  _QWORD **v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD **v65;
  int v66;
  int *v67;
  _QWORD *v68;
  float32x4_t v69;
  float32x4_t v70;
  float v71;
  BOOL v72;
  float32x4_t v73;
  float32x4_t v74;
  int32x4_t v75;
  int8x16_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  int *v81;
  int v82;
  BOOL v83;
  uint64_t *v84;
  float32x4_t *GlobalTransform;
  uint64_t v86;
  int *v87;
  int v88;
  BOOL v89;
  uint64_t *v90;
  float32x4_t *v91;
  int v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t *v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  int32x4_t v99;
  int8x16_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  int *v104;
  uint64_t v105;
  int v106;
  BOOL v107;
  uint64_t *v108;
  int *v109;
  int v110;
  BOOL v111;
  uint64_t *v112;
  float32x4_t *v113;
  float32x4_t *v114;
  uint64_t v115;
  float32x4_t v116;
  char v117;
  BOOL v118;
  uint64_t v119;
  int *v120;
  int v121;
  BOOL v122;
  uint64_t *v123;
  unint64_t v124;
  uint64_t v125;
  float v126;
  BOOL v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  BOOL v132;
  uint64_t *v133;
  int v134;
  uint64_t *v135;
  int v136;
  BOOL v137;
  uint64_t *v138;
  uint64_t *v139;
  uint64_t *v140;
  uint64_t v141;
  int *v142;
  int v143;
  BOOL v144;
  uint64_t *v145;
  __int32 *v146;
  float v147;
  int v148;
  _anonymous_namespace_ *v149;
  const FIK::Hierarchy *v150;
  uint64_t v151;
  uint64_t *v152;
  _anonymous_namespace_ *v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  uint64_t v162[2];
  uint64_t v163;
  void (***v164)(FIK::CrtAllocator *__hidden);
  _QWORD v165[4];
  char v166;
  _QWORD v167[4];
  char v168;
  void *__p[2];
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  _QWORD *v173;
  uint64_t v174;
  uint64_t v175;
  float32x4_t v176;
  uint64_t v177;
  uint64_t v178;
  float32x4_t v179;
  _QWORD *v180;
  uint64_t v181;
  __int128 v182;
  void (***v183)(FIK::CrtAllocator *__hidden);
  uint64_t v184;
  uint64_t v185;
  _BYTE v186[113];
  uint64_t v187;

  v187 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_BYTE *)(a3 + 4) = 0;
  *(_QWORD *)(a3 + 16) = a3 + 24;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 40) = a3 + 48;
  v5 = (uint64_t **)(a3 + 40);
  *(_QWORD *)(a3 + 56) = 0;
  v6 = FIK::defaultAllocator(a1);
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 80) = v6;
  IKString::assign((_QWORD *)(a3 + 64), "undefined", (IKString *)9);
  v182 = 0uLL;
  v183 = FIK::defaultAllocator(v7);
  IKString::assign(&v182, "biped", (IKString *)5);
  IKString::operator=((uint64_t *)(a3 + 64), (uint64_t)&v182);
  if (*((_QWORD *)&v182 + 1))
    ((void (*)(void (***)(FIK::CrtAllocator *__hidden), _QWORD, _QWORD, uint64_t))(*v183)[3])(v183, v182, 0, 8);
  if (v168)
  {
    v152 = (uint64_t *)(a3 + 48);
    v8 = (const FIK::Hierarchy *)v167[1];
    v10 = (const FIK::Hierarchy *)v167[2];
    v9 = (const FIK::Hierarchy *)v167[3];
    LODWORD(v182) = 0;
    *((_QWORD *)&v182 + 1) = v167[0];
    std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::pair<int const,unsigned long>>((uint64_t **)(a3 + 16), (int *)&v182, &v182);
    LODWORD(v182) = 1;
    *((_QWORD *)&v182 + 1) = v9;
    std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::pair<int const,unsigned long>>((uint64_t **)(a3 + 16), (int *)&v182, &v182);
    if (v166)
    {
      v11 = v165[0];
      v12 = (const FIK::Hierarchy *)v165[1];
      v14 = (const FIK::Hierarchy *)v165[2];
      v13 = (const FIK::Hierarchy *)v165[3];
      LODWORD(v182) = 2;
      *((_QWORD *)&v182 + 1) = v165[0];
      std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::pair<int const,unsigned long>>((uint64_t **)(a3 + 16), (int *)&v182, &v182);
      if ((const FIK::Hierarchy *)v11 == v9)
      {
        v162[0] = 0;
        v162[1] = 0;
        v163 = 0;
        v164 = FIK::defaultAllocator(v15);
        v16 = (uint64_t **)(a3 + 16);
        v17 = (int *)(a3 + 24);
      }
      else
      {
        v18 = (const FIK::Hierarchy *)FIK::Hierarchy::parentIndexOf(a2, v11);
        v17 = (int *)(a3 + 24);
        if (!v19)
          goto LABEL_247;
        v16 = (uint64_t **)(a3 + 16);
        if (v162[0])
        {
          LODWORD(v182) = 1;
          FIK::IKArray<FIK::Task *>::IKArray((_QWORD *)&v182 + 1, v162);
          std::__tree<std::__value_type<int,FIK::IKArray<unsigned long>>,std::__map_value_compare<int,std::__value_type<int,FIK::IKArray<unsigned long>>,std::less<int>,true>,std::allocator<std::__value_type<int,FIK::IKArray<unsigned long>>>>::__emplace_unique_key_args<int,std::pair<int const,FIK::IKArray<unsigned long>>>((uint64_t **)(a3 + 40), (int *)&v182, (uint64_t)&v182);
          *((_QWORD *)&v182 + 1) = 0;
          if (v184)
            (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v185 + 24))(v185, v184, 0, 8);
        }
      }
      LODWORD(v182) = 3;
      *((_QWORD *)&v182 + 1) = v13;
      std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::pair<int const,unsigned long>>(v16, (int *)&v182, &v182);
      v153 = a2;
      if (Head == (const FIK::Hierarchy *)-1)
        goto LABEL_53;
      v21 = (uint64_t)Head;
      LODWORD(v182) = 4;
      *((_QWORD *)&v182 + 1) = Head;
      std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::pair<int const,unsigned long>>(v16, (int *)&v182, &v182);
      v22 = (const FIK::Hierarchy *)FIK::Hierarchy::parentIndexOf(a2, v21);
      if (v23)
      {
        if (v176.i64[0])
        {
          LODWORD(v182) = 2;
          FIK::IKArray<FIK::Task *>::IKArray((_QWORD *)&v182 + 1, &v176);
          std::__tree<std::__value_type<int,FIK::IKArray<unsigned long>>,std::__map_value_compare<int,std::__value_type<int,FIK::IKArray<unsigned long>>,std::less<int>,true>,std::allocator<std::__value_type<int,FIK::IKArray<unsigned long>>>>::__emplace_unique_key_args<int,std::pair<int const,FIK::IKArray<unsigned long>>>((uint64_t **)(a3 + 40), (int *)&v182, (uint64_t)&v182);
          *((_QWORD *)&v182 + 1) = 0;
          if (v184)
            (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v185 + 24))(v185, v184, 0, 8);
        }
        FIK::Hierarchy::childIndicesOf(a2, v21, &v172);
        v24 = FIK::Hierarchy::nameOf(a2, v21);
        v25 = *(_QWORD *)(v24 + 8);
        if (v25)
          v26 = *(void **)v24;
        else
          v26 = &unk_2108059BE;
        FIK::Hierarchy::childrenOf((uint64_t *)a2, v26, v25, &v179);
        v27 = v180;
        if (v179.i64[0])
        {
          v28 = &v180[3 * v179.i64[0]];
          while (1)
          {
            v29 = v27[1] ? (char *)*v27 : (char *)&unk_2108059BE;
            std::string::basic_string[abi:nn180100]<0>(__p, v29);
            std::string::basic_string[abi:nn180100]<0>(&v182, "End");
            std::string::basic_string[abi:nn180100]<0>(&v184, "end");
            for (i = 0; i != -48; i -= 24)
            {
              if ((char)v186[i] < 0)
                operator delete(*(void **)((char *)&v184 + i));
            }
            if (SHIBYTE(v170) < 0)
              operator delete(__p[0]);
            if ((v30 & 1) != 0)
              break;
            v27 += 3;
            if (v27 == v28)
            {
              v27 = v28;
              break;
            }
          }
          v32 = v27;
          v27 = v180;
          v33 = v179.i64[0];
          v16 = (uint64_t **)(a3 + 16);
          a2 = v153;
          v5 = (uint64_t **)(a3 + 40);
        }
        else
        {
          v33 = 0;
          v32 = v180;
        }
        if (v32 != &v27[3 * v33])
        {
          v34 = 0xAAAAAAAAAAAAAAABLL * (v32 - v27);
          v35 = v172;
          v36 = v174 + 8 * v34;
          if (v36 + 8 != v174 + 8 * v172)
          {
            memmove((void *)v36, (const void *)(v36 + 8), 8 * (v172 - v34) - 8);
            v35 = v172;
          }
          v172 = v35 - 1;
        }
        FIK::IKArray<IKString>::~IKArray((uint64_t)&v179);
        v17 = (int *)(a3 + 24);
        if (v172)
        {
          LODWORD(v182) = 3;
          FIK::IKArray<FIK::Task *>::IKArray((_QWORD *)&v182 + 1, &v172);
          std::__tree<std::__value_type<int,FIK::IKArray<unsigned long>>,std::__map_value_compare<int,std::__value_type<int,FIK::IKArray<unsigned long>>,std::less<int>,true>,std::allocator<std::__value_type<int,FIK::IKArray<unsigned long>>>>::__emplace_unique_key_args<int,std::pair<int const,FIK::IKArray<unsigned long>>>(v5, (int *)&v182, (uint64_t)&v182);
          *((_QWORD *)&v182 + 1) = 0;
          if (v184)
            (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v185 + 24))(v185, v184, 0, 8);
          if (v172)
          {
            FIK::IKArray<FIK::Task *>::IKArray(__p, &v172);
            __p[0] = 0;
            if (v170)
              (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v171 + 24))(v171, v170, 0, 8);
            LODWORD(v182) = 4;
            FIK::IKArray<FIK::Task *>::IKArray((_QWORD *)&v182 + 1, &v179);
            std::__tree<std::__value_type<int,FIK::IKArray<unsigned long>>,std::__map_value_compare<int,std::__value_type<int,FIK::IKArray<unsigned long>>,std::less<int>,true>,std::allocator<std::__value_type<int,FIK::IKArray<unsigned long>>>>::__emplace_unique_key_args<int,std::pair<int const,FIK::IKArray<unsigned long>>>(v5, (int *)&v182, (uint64_t)&v182);
            *((_QWORD *)&v182 + 1) = 0;
            if (v184)
              (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v185 + 24))(v185, v184, 0, 8);
            v179.i64[0] = 0;
            if (v180)
              (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v181 + 24))(v181, v180, 0, 8);
          }
        }
        v172 = 0;
        if (v174)
          (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v175 + 24))(v175, v174, 0, 8);
        v176.i64[0] = 0;
        if (v177)
          (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v178 + 24))(v178, v177, 0, 8);
LABEL_53:
        FIK::PoseConverter::PoseConverter((FIK::PoseConverter *)&v182, a2);
        v179.i64[1] = 0;
        v180 = 0;
        v179.i64[0] = (uint64_t)&v179.i64[1];
        std::map<int,unsigned long>::insert[abi:nn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<int,unsigned long>,std::__tree_node<std::__value_type<int,unsigned long>,void *> *,long>>>((uint64_t *)&v179, (int *)*v16, v17);
        v37 = (_QWORD *)v179.i64[1];
        if (!v179.i64[1])
          goto LABEL_63;
        v38 = (float32x4_t *)&v179.u32[2];
        v39 = v179.i64[1];
        do
        {
          v40 = v39;
          v41 = v38;
          v42 = *(_DWORD *)(v39 + 32);
          if (v42 >= 0)
            v38 = (float32x4_t *)v39;
          else
            v39 += 8;
          v39 = *(_QWORD *)v39;
        }
        while (v39);
        if (v38 == (float32x4_t *)&v179.u32[2])
          goto LABEL_63;
        if (v42 < 0)
          v40 = (uint64_t)v41;
        if (*(int *)(v40 + 32) >= 1)
LABEL_63:
          v38 = (float32x4_t *)&v179.u32[2];
        v43 = (uint64_t *)v5;
        if (!v179.i64[1])
          goto LABEL_135;
        v44 = (float32x4_t *)&v179.u32[2];
        v45 = v179.i64[1];
        do
        {
          v46 = v45;
          v47 = v44;
          v48 = *(_DWORD *)(v45 + 32);
          if (v48 >= 2)
            v44 = (float32x4_t *)v45;
          else
            v45 += 8;
          v45 = *(_QWORD *)v45;
        }
        while (v45);
        if (v44 == (float32x4_t *)&v179.u32[2]
          || (v48 >= 2 ? (v49 = v46) : (v49 = (uint64_t)v47),
              v38 == (float32x4_t *)&v179.u32[2] || *(int *)(v49 + 32) >= 3))
        {
LABEL_135:
          v95 = &v179;
        }
        else
        {
          v154 = *(float32x4_t *)FIK::PoseConverter::GetGlobalTransform((FIK::PoseConverter *)&v182, v38[2].u64[1]);
          if (v48 >= 2)
            v50 = v46;
          else
            v50 = (uint64_t)v47;
          v176 = vsubq_f32(*(float32x4_t *)FIK::PoseConverter::GetGlobalTransform((FIK::PoseConverter *)&v182, *(_QWORD *)(v50 + 40)), v154);
          v52 = v51;
          v53 = v51 & 0xFF00000000;
          std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::destroy((uint64_t)&v179, (_QWORD *)v179.i64[1]);
          v56 = v153;
          if (!v53)
            goto LABEL_137;
          v173 = 0;
          v174 = 0;
          v172 = (uint64_t)&v173;
          std::map<int,unsigned long>::insert[abi:nn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<int,unsigned long>,std::__tree_node<std::__value_type<int,unsigned long>,void *> *,long>>>(&v172, (int *)*v16, v17);
          v37 = v173;
          if (!v173)
            goto LABEL_90;
          v57 = (int *)&v173;
          v58 = (int *)v173;
          do
          {
            v59 = v58;
            v60 = v57;
            v61 = v58[8];
            if (v61 >= 21)
              v57 = v58;
            else
              v58 += 2;
            v58 = *(int **)v58;
          }
          while (v58);
          if (v57 == (int *)&v173)
            goto LABEL_90;
          if (v61 < 21)
            v59 = v60;
          if (v59[8] >= 22)
LABEL_90:
            v57 = (int *)&v173;
          if (v173)
          {
            v62 = &v173;
            v63 = v173;
            do
            {
              v64 = v63;
              v65 = v62;
              v66 = *((_DWORD *)v63 + 8);
              if (v66 >= 28)
                v62 = (_QWORD **)v63;
              else
                ++v63;
              v63 = (_QWORD *)*v63;
            }
            while (v63);
            if (v62 != &v173)
            {
              v67 = (int *)(v66 >= 28 ? v64 : v65);
              if (v57 != (int *)&v173 && v67[8] <= 28)
              {
                if (v66 >= 28)
                  v68 = v64;
                else
                  v68 = v65;
                v56 = v153;
                v69 = vsubq_f32(v176, v179);
                v70 = vmulq_f32(v69, v69);
                v73 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v70, 2), vaddq_f32(v70, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v70.f32, 1)));
                v73.f32[0] = sqrtf(v73.f32[0]);
                v71 = 1.0 / v73.f32[0];
                v72 = v73.f32[0] == 0.0;
                v73.i32[0] = 0;
                if (!v72)
                  v73.f32[0] = v71;
                v74 = vmulq_n_f32(v69, v73.f32[0]);
                if (v52 <= 5)
                {
                  v73.i32[0] = dword_210804754[v52];
                  v73.i32[1] = dword_21080476C[v52];
                  v73.i32[2] = dword_210804784[v52];
                }
                v75 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v74, (int32x4_t)v74), (int8x16_t)v74, 0xCuLL), vnegq_f32(v73)), v74, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v73, (int32x4_t)v73), (int8x16_t)v73, 0xCuLL));
                v76 = vextq_s8((int8x16_t)vuzp1q_s32(v75, v75), (int8x16_t)v75, 0xCuLL);
                v76.i32[3] = 0;
                *(int8x16_t *)__p = v76;
                v78 = v77;
                v79 = v77 & 0xFF00000000;
                std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::destroy((uint64_t)&v172, v173);
                if (v79)
                {
                  *(_DWORD *)(a3 + 8) = v78;
                  *(_DWORD *)(a3 + 12) = v52;
                  *(_BYTE *)(a3 + 4) = 1;
                  v80 = *(_QWORD *)(a3 + 24);
                  if (!v80)
                    goto LABEL_121;
                  v81 = v17;
                  do
                  {
                    v82 = *(_DWORD *)(v80 + 32);
                    v83 = v82 < 2;
                    if (v82 >= 2)
                      v84 = (uint64_t *)v80;
                    else
                      v84 = (uint64_t *)(v80 + 8);
                    if (!v83)
                      v81 = (int *)v80;
                    v80 = *v84;
                  }
                  while (*v84);
                  if (v81 == v17 || v81[8] >= 3)
LABEL_121:
                    v81 = v17;
                  GlobalTransform = (float32x4_t *)FIK::PoseConverter::GetGlobalTransform((FIK::PoseConverter *)&v182, *((_QWORD *)v81 + 5));
                  v86 = *(_QWORD *)v17;
                  if (!*(_QWORD *)v17)
                    goto LABEL_132;
                  v87 = v17;
                  do
                  {
                    v88 = *(_DWORD *)(v86 + 32);
                    v89 = v88 < 0;
                    if (v88 >= 0)
                      v90 = (uint64_t *)v86;
                    else
                      v90 = (uint64_t *)(v86 + 8);
                    if (!v89)
                      v87 = (int *)v86;
                    v86 = *v90;
                  }
                  while (*v90);
                  if (v87 == v17 || v87[8] >= 1)
LABEL_132:
                    v87 = v17;
                  v155 = *GlobalTransform;
                  v91 = (float32x4_t *)FIK::PoseConverter::GetGlobalTransform((FIK::PoseConverter *)&v182, *((_QWORD *)v87 + 5));
                  v92 = *(_DWORD *)(a3 + 12);
                  v93.i64[0] = 0x3F0000003F000000;
                  v93.i64[1] = 0x3F0000003F000000;
                  v94 = vaddq_f32(*v91, vmulq_f32(vsubq_f32(v155, *v91), v93));
                  switch(v92)
                  {
                    case 1:
                    case 4:
                      v94.i32[0] = v94.i32[1];
                      break;
                    case 2:
                    case 5:
                      v94.i32[0] = v94.i32[2];
                      break;
                    default:
                      break;
                  }
                  v141 = *(_QWORD *)v17;
                  if (!*(_QWORD *)v17)
                    goto LABEL_238;
                  v142 = v17;
                  do
                  {
                    v143 = *(_DWORD *)(v141 + 32);
                    v144 = v143 < 10;
                    if (v143 >= 10)
                      v145 = (uint64_t *)v141;
                    else
                      v145 = (uint64_t *)(v141 + 8);
                    if (!v144)
                      v142 = (int *)v141;
                    v141 = *v145;
                  }
                  while (*v145);
                  if (v142 == v17 || v142[8] >= 11)
LABEL_238:
                    v142 = v17;
                  v158 = v94.f32[0];
                  v146 = (__int32 *)FIK::PoseConverter::GetGlobalTransform((FIK::PoseConverter *)&v182, *((_QWORD *)v142 + 5));
                  v54.i32[0] = *v146;
                  v147 = v158;
                  switch(v92)
                  {
                    case 1:
                    case 4:
                      v54.i32[0] = v146[1];
                      break;
                    case 2:
                    case 5:
                      v54.i32[0] = v146[2];
                      break;
                    case 3:
                      break;
                    default:
                      v147 = v158;
                      break;
                  }
                  v55.i32[0] = *(_DWORD *)"fff?";
                  v54.f32[0] = v54.f32[0] * 0.9;
                  if (v54.f32[0] > v147)
                    v148 = 1;
                  else
                    v148 = 2;
                  *(_DWORD *)a3 = v148;
                }
LABEL_137:
                if (*(_BYTE *)(a3 + 4))
                {
                  v96 = v43;
                  v98 = *(int *)(a3 + 8);
                  v97 = *(int *)(a3 + 12);
                  if (v98 <= 5)
                  {
                    v54.i32[0] = dword_210804754[v98];
                    v54.i32[1] = dword_21080476C[v98];
                    v54.i32[2] = dword_210804784[v98];
                  }
                  if (v97 <= 5)
                  {
                    v55.i32[0] = dword_210804754[v97];
                    v55.i32[1] = dword_21080476C[v97];
                    v55.i32[2] = dword_210804784[v97];
                  }
                  v99 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v55, (int32x4_t)v55), (int8x16_t)v55, 0xCuLL), vnegq_f32(v54)), v55, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v54, (int32x4_t)v54), (int8x16_t)v54, 0xCuLL));
                  v100 = vextq_s8((int8x16_t)vuzp1q_s32(v99, v99), (int8x16_t)v99, 0xCuLL);
                  v100.i32[3] = 0;
                  v179 = (float32x4_t)v100;
                  if ((v101 & 0xFF00000000) != 0)
                  {
                    v102 = v101;
                    v103 = *(_QWORD *)v17;
                    if (!*(_QWORD *)v17)
                      goto LABEL_153;
                    v104 = v17;
                    v105 = *(_QWORD *)v17;
                    do
                    {
                      v106 = *(_DWORD *)(v105 + 32);
                      v107 = v106 < 0;
                      if (v106 >= 0)
                        v108 = (uint64_t *)v105;
                      else
                        v108 = (uint64_t *)(v105 + 8);
                      if (!v107)
                        v104 = (int *)v105;
                      v105 = *v108;
                    }
                    while (*v108);
                    if (v104 == v17 || v104[8] >= 1)
LABEL_153:
                      v104 = v17;
                    if (!v103)
                      goto LABEL_164;
                    v109 = v17;
                    do
                    {
                      v110 = *(_DWORD *)(v103 + 32);
                      v111 = v110 < 21;
                      if (v110 >= 21)
                        v112 = (uint64_t *)v103;
                      else
                        v112 = (uint64_t *)(v103 + 8);
                      if (!v111)
                        v109 = (int *)v103;
                      v103 = *v112;
                    }
                    while (*v112);
                    if (v109 == v17 || v109[8] >= 22)
LABEL_164:
                      v109 = v17;
                    v113 = (float32x4_t *)FIK::PoseConverter::GetGlobalTransform((FIK::PoseConverter *)&v182, *((_QWORD *)v104 + 5));
                    v156 = *v113;
                    v114 = (float32x4_t *)FIK::PoseConverter::GetGlobalTransform((FIK::PoseConverter *)&v182, *((_QWORD *)v109 + 5));
                    v115 = 0;
                    v116 = vsubq_f32(v156, *v114);
                    v117 = v102;
                    switch(v102)
                    {
                      case 0:
                        goto LABEL_170;
                      case 1:
                        v117 = 1;
                        goto LABEL_170;
                      case 2:
                        v117 = 2;
LABEL_170:
                        v118 = 0;
                        v160 = v116;
                        if (*(float *)((unint64_t)&v160 & 0xFFFFFFFFFFFFFFF3 | (4 * (v117 & 3))) >= 0.0)
                          break;
                        goto LABEL_175;
                      case 3:
                        goto LABEL_174;
                      case 4:
                        v115 = 1;
                        goto LABEL_174;
                      case 5:
                        v115 = 2;
LABEL_174:
                        v161 = v116;
                        v118 = 1;
                        if (*(float *)((unint64_t)&v161 | (4 * v115)) > 0.0)
                        {
LABEL_175:
                        }
                        break;
                      default:
                        v118 = v102 > 2;
                        break;
                    }
                    v119 = *(_QWORD *)v17;
                    if (!*(_QWORD *)v17)
                      goto LABEL_186;
                    v120 = v17;
                    do
                    {
                      v121 = *(_DWORD *)(v119 + 32);
                      v122 = v121 < 10;
                      if (v121 >= 10)
                        v123 = (uint64_t *)v119;
                      else
                        v123 = (uint64_t *)(v119 + 8);
                      if (!v122)
                        v120 = (int *)v119;
                      v119 = *v123;
                    }
                    while (*v123);
                    if (v120 == v17 || v120[8] >= 11)
LABEL_186:
                      v120 = v17;
                    v157 = *v113;
                    v124 = FIK::PoseConverter::GetGlobalTransform((FIK::PoseConverter *)&v182, *((_QWORD *)v120 + 5));
                    if (v102 <= 5)
                    {
                      v125 = qword_2108047A0[v102] & 3;
                      v159 = v157;
                      v126 = *(float *)((unint64_t)&v159 & 0xFFFFFFFFFFFFFFF3 | (4 * v125))
                           - *(float *)(v124 + 4 * v125);
                      v127 = v126 > 0.0 && v118;
                      if (v127 || v102 <= 2 && v126 < 0.0)
                      {
                      }
                    }
                  }
                  v128 = *v152;
                  if (*v152)
                  {
                    v129 = a3 + 48;
                    v130 = *v152;
                    do
                    {
                      v131 = *(_DWORD *)(v130 + 32);
                      v132 = v131 < 8;
                      if (v131 >= 8)
                        v133 = (uint64_t *)v130;
                      else
                        v133 = (uint64_t *)(v130 + 8);
                      if (!v132)
                        v129 = v130;
                      v130 = *v133;
                    }
                    while (*v133);
                    if ((uint64_t *)v129 != v152 && *(int *)(v129 + 32) < 9)
                    {
                      v134 = *(_DWORD *)(a3 + 8);
                      v140 = (uint64_t *)(v129 + 40);
                      FIK::IKArray<FIK::Task *>::IKArray(&v176, (_QWORD *)(v129 + 40));
                      FIK::IKArray<unsigned int>::operator=(v140, (__int128 *)&v179);
                      v179.i64[0] = 0;
                      if (v180)
                        (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v181 + 24))(v181, v180, 0, 8);
                      v176.i64[0] = 0;
                      if (v177)
                        (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v178 + 24))(v178, v177, 0, 8);
                      v128 = *v152;
                      if (!*v152)
                        goto LABEL_224;
                      goto LABEL_206;
                    }
                  }
                  v134 = *(_DWORD *)(a3 + 8);
                  if (v128)
                  {
LABEL_206:
                    v135 = v152;
                    do
                    {
                      v136 = *(_DWORD *)(v128 + 32);
                      v137 = v136 < 13;
                      if (v136 >= 13)
                        v138 = (uint64_t *)v128;
                      else
                        v138 = (uint64_t *)(v128 + 8);
                      if (!v137)
                        v135 = (uint64_t *)v128;
                      v128 = *v138;
                    }
                    while (*v138);
                    if (v135 != v152 && *((int *)v135 + 8) <= 13)
                    {
                      v139 = v135 + 5;
                      FIK::IKArray<FIK::Task *>::IKArray(&v172, v135 + 5);
                      FIK::IKArray<unsigned int>::operator=(v139, (__int128 *)&v179);
                      v179.i64[0] = 0;
                      if (v180)
                        (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v181 + 24))(v181, v180, 0, 8);
                      v172 = 0;
                      if (v174)
                        (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v175 + 24))(v175, v174, 0, 8);
                    }
                  }
                }
LABEL_224:
                FIK::PoseConverter::~PoseConverter((FIK::PoseConverter *)&v182);
                v162[0] = 0;
                if (v163)
                  ((void (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v164)[3])(v164, v163, 0, 8);
                return;
              }
            }
          }
          v95 = (float32x4_t *)&v172;
        }
        std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::destroy((uint64_t)v95, v37);
        v56 = v153;
        goto LABEL_137;
      }
LABEL_247:
      v149 = (_anonymous_namespace_ *)std::__throw_bad_optional_access[abi:nn180100]();
    }
  }
}

void `anonymous namespace'::findLimbBranch(_anonymous_namespace_ *this@<X0>, const FIK::Hierarchy *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t FirstJointWithMinChildCount;
  char v7;
  _QWORD **v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  FIK *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD **v16;
  _QWORD *v17;
  _QWORD **v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  void (***v22)(FIK::CrtAllocator *__hidden);
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  BOOL v30;
  _QWORD *v31;
  unint64_t v32;
  __int128 v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  const FIK::Hierarchy **v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  __int128 v52;
  uint64_t *v53;
  _QWORD *v54;
  unint64_t v55;
  uint64_t v56;
  _QWORD v57[2];
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  void (***v62)(FIK::CrtAllocator *__hidden);
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;

  if (!v7)
    goto LABEL_83;
  v54 = 0;
  v55 = 0;
  v8 = &v54;
  v53 = (uint64_t *)&v54;
  v51 = FirstJointWithMinChildCount;
  FIK::Hierarchy::childIndicesOf(this, FirstJointWithMinChildCount, &v63);
  v10 = v64;
  if (v63)
  {
    v11 = &v64[v63];
    do
    {
      v12 = *v10;
      v13 = (FIK *)FIK::Hierarchy::descendentsCountOf(this, *v10);
      v14 = (uint64_t)v13;
      v15 = v54;
      if (!v54)
        goto LABEL_14;
      v16 = &v54;
      do
      {
        v17 = v15;
        v18 = v16;
        v19 = v15[4];
        v20 = v15 + 1;
        if (v19 >= (unint64_t)v13)
        {
          v20 = v17;
          v16 = (_QWORD **)v17;
        }
        v15 = (_QWORD *)*v20;
      }
      while (v15);
      if (v16 != &v54 && (v19 >= (unint64_t)v13 ? (v21 = v17) : (v21 = v18), (unint64_t)v13 >= v21[4]))
      {
        if (v19 >= (unint64_t)v13)
          v24 = v17;
        else
          v24 = v18;
        if (v19 >= (unint64_t)v13)
          v25 = v17 + 5;
        else
          v25 = v18 + 5;
        FIK::IKArray<FIK::Segment *>::reserve(v25, v24[5] + 1);
        *(_QWORD *)(v24[7] + 8 * v24[5]++) = v12;
      }
      else
      {
LABEL_14:
        v22 = FIK::defaultAllocator(v13);
        v60 = xmmword_2108047D0;
        v23 = ((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, uint64_t))(*v22)[2])(v22, 64, 8);
        v61 = v23;
        v62 = v22;
        *(_OWORD *)(v23 + 40) = 0u;
        *(_QWORD *)(v23 + 56) = 0;
        *(_OWORD *)(v23 + 8) = 0u;
        *(_OWORD *)(v23 + 24) = 0u;
        *(_QWORD *)v23 = v12;
        v56 = v14;
        FIK::IKArray<FIK::Task *>::IKArray(v57, &v60);
        std::__tree<std::__value_type<unsigned long,FIK::IKArray<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,FIK::IKArray<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,FIK::IKArray<unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long,FIK::IKArray<unsigned long>>>(&v53, (unint64_t *)&v56, (uint64_t)&v56);
        v57[0] = 0;
        if (v58)
          (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v59 + 24))(v59, v58, 0, 8);
        *(_QWORD *)&v60 = 0;
        if (v61)
          ((void (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v62)[3])(v62, v61, 0, 8);
      }
      ++v10;
    }
    while (v10 != v11);
    v10 = v64;
  }
  v63 = 0;
  if (v10)
    (*(void (**)(uint64_t, uint64_t *, _QWORD, uint64_t))(*(_QWORD *)v65 + 24))(v65, v10, 0, 8);
  v26 = v53;
  if (v53 == (uint64_t *)&v54)
  {
LABEL_82:
    std::__tree<std::__value_type<unsigned long,FIK::IKArray<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,FIK::IKArray<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,FIK::IKArray<unsigned long>>>>::destroy((uint64_t)&v53, v54);
LABEL_83:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 32) = 0;
    return;
  }
  v27 = v53;
  while (v27[5] != 2)
  {
    v28 = (uint64_t *)v27[1];
    if (v28)
    {
      do
      {
        v29 = v28;
        v28 = (uint64_t *)*v28;
      }
      while (v28);
    }
    else
    {
      do
      {
        v29 = (uint64_t *)v27[2];
        v30 = *v29 == (_QWORD)v27;
        v27 = v29;
      }
      while (!v30);
    }
    v27 = v29;
    if (v29 == (uint64_t *)&v54)
      goto LABEL_45;
  }
  if (v27 != (uint64_t *)&v54)
  {
    v52 = *(_OWORD *)v27[7];
    if (v55 < 2)
    {
      FIK::Hierarchy::siblingIndicesOf(this, (uint64_t)a2, &v56);
      v32 = v51;
      v41 = FIK::Hierarchy::parentIndexOf(this, v51);
      if (v42)
        v32 = v41;
      v43 = *(_QWORD *)v57[1];
      v56 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v58 + 24))(v58);
LABEL_94:
      v33 = v52;
    }
    else
    {
      std::__tree<std::__value_type<unsigned long,FIK::IKArray<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,FIK::IKArray<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,FIK::IKArray<unsigned long>>>>::erase(&v53, (uint64_t)v27);
      v31 = v54;
      v32 = v51;
      if (v54)
      {
        v33 = v52;
        do
        {
          v34 = v31;
          v31 = (_QWORD *)v31[1];
        }
        while (v31);
      }
      else
      {
        v33 = v52;
        do
        {
          v34 = v8[2];
          v30 = *v34 == (_QWORD)v8;
          v8 = (_QWORD **)v34;
        }
        while (v30);
      }
      v43 = *(_QWORD *)v34[7];
    }
    *(_QWORD *)a3 = v32;
    *(_OWORD *)(a3 + 8) = v33;
    *(_QWORD *)(a3 + 24) = v43;
    *(_BYTE *)(a3 + 32) = 1;
    goto LABEL_96;
  }
LABEL_45:
  if (v53 == (uint64_t *)&v54)
    goto LABEL_82;
  v35 = v53;
  while (v35[5] != 3)
  {
    v36 = (uint64_t *)v35[1];
    if (v36)
    {
      do
      {
        v37 = v36;
        v36 = (uint64_t *)*v36;
      }
      while (v36);
    }
    else
    {
      do
      {
        v37 = (uint64_t *)v35[2];
        v30 = *v37 == (_QWORD)v35;
        v35 = v37;
      }
      while (!v30);
    }
    v35 = v37;
    if (v37 == (uint64_t *)&v54)
      goto LABEL_57;
  }
  if (v35 != (uint64_t *)&v54 && v55 >= 2)
  {
    v52 = *(_OWORD *)(v35[7] + 8);
    std::__tree<std::__value_type<unsigned long,FIK::IKArray<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,FIK::IKArray<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,FIK::IKArray<unsigned long>>>>::erase(&v53, (uint64_t)v35);
    v49 = v54;
    if (v54)
    {
      v32 = v51;
      do
      {
        v50 = v49;
        v49 = (_QWORD *)v49[1];
      }
      while (v49);
    }
    else
    {
      v32 = v51;
      do
      {
        v50 = v8[2];
        v30 = *v50 == (_QWORD)v8;
        v8 = (_QWORD **)v50;
      }
      while (v30);
    }
    v43 = *(_QWORD *)v50[7];
    goto LABEL_94;
  }
LABEL_57:
  if (v53 == (uint64_t *)&v54)
    goto LABEL_82;
  v38 = v53;
  do
  {
    if ((unint64_t)v38[5] > 1)
    {
      if (v38 == (uint64_t *)&v54 && v53 != (uint64_t *)&v54)
        break;
      goto LABEL_82;
    }
    v39 = (uint64_t *)v38[1];
    if (v39)
    {
      do
      {
        v40 = v39;
        v39 = (uint64_t *)*v39;
      }
      while (v39);
    }
    else
    {
      do
      {
        v40 = (uint64_t *)v38[2];
        v30 = *v40 == (_QWORD)v38;
        v38 = v40;
      }
      while (!v30);
    }
    v38 = v40;
  }
  while (v40 != (uint64_t *)&v54);
  while (1)
  {
    v44 = v26[5];
    if (v44)
      break;
LABEL_76:
    v47 = (uint64_t *)v26[1];
    if (v47)
    {
      do
      {
        v48 = v47;
        v47 = (uint64_t *)*v47;
      }
      while (v47);
    }
    else
    {
      do
      {
        v48 = (uint64_t *)v26[2];
        v30 = *v48 == (_QWORD)v26;
        v26 = v48;
      }
      while (!v30);
    }
    v26 = v48;
    if (v48 == (uint64_t *)&v54)
      goto LABEL_82;
  }
  v45 = (const FIK::Hierarchy **)v26[7];
  v46 = 8 * v44;
  while (1)
  {
    if (*(_BYTE *)(a3 + 32))
      break;
    ++v45;
    v46 -= 8;
    if (!v46)
      goto LABEL_76;
  }
LABEL_96:
  std::__tree<std::__value_type<unsigned long,FIK::IKArray<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,FIK::IKArray<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,FIK::IKArray<unsigned long>>>>::destroy((uint64_t)&v53, v54);
}

uint64_t `anonymous namespace'::characteriseLegChain(FIK::Hierarchy *a1, const FIK::Hierarchy *a2, int a3, uint64_t a4)
{
  const FIK::Hierarchy *v4;
  int v7;
  uint64_t **v8;
  uint64_t result;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  FIK *v28;
  uint64_t v29;
  _QWORD *v30;
  void (***v31)(FIK::CrtAllocator *__hidden);
  int v32;
  _QWORD v35[2];
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42[2];
  uint64_t v43;
  uint64_t v44;

  if (a3)
    v7 = 17;
  else
    v7 = 24;
  v8 = (uint64_t **)(a4 + 16);
  LODWORD(v38) = v7;
  *((_QWORD *)&v38 + 1) = a2;
  std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::pair<int const,unsigned long>>((uint64_t **)(a4 + 16), (int *)&v38, &v38);
  result = FIK::Hierarchy::descendentsCountOf(a1, (uint64_t)a2);
  v10 = result;
  v11 = 0;
  v12 = -1;
  v13 = -1;
  v14 = (uint64_t)a2;
  while (v11 <= v10)
  {
    result = (uint64_t)FIK::Hierarchy::childIndicesOf(a1, v14, (uint64_t *)&v38);
    v15 = v38;
    if ((_QWORD)v38)
    {
      if (v11 == 1)
      {
        if (FIK::Hierarchy::childCountOf(a1, *v39))
        {
          v16 = v39;
        }
        else
        {
          v16 = v39;
          if (v15 >= 2)
          {
            v18 = FIK::Hierarchy::childCountOf(a1, v39[1]);
            v16 = v39;
            if (v18)
            {
              v12 = v39[1];
              *v39 = v12;
            }
            goto LABEL_26;
          }
        }
        v12 = *v16;
      }
      else if (v11 == 3)
      {
        if (FIK::Hierarchy::childCountOf(a1, *v39))
        {
          v16 = v39;
          v13 = *v39;
        }
        else
        {
          v16 = v39;
          if ((unint64_t)v38 >= 2)
          {
            v17 = FIK::Hierarchy::childCountOf(a1, v39[1]);
            v16 = v39;
            if (v17)
            {
              v13 = v39[1];
              *v39 = v13;
            }
          }
        }
      }
      else
      {
        v16 = v39;
      }
LABEL_26:
      v14 = *v16;
      ++v11;
      *(_QWORD *)&v38 = 0;
      goto LABEL_27;
    }
    if (v11 <= 4)
      v4 = (const FIK::Hierarchy *)v12;
    else
      v4 = (const FIK::Hierarchy *)v13;
    *(_QWORD *)&v38 = 0;
    if (!v39)
    {
LABEL_28:
      if (v4 == (const FIK::Hierarchy *)-1)
        return result;
      if (a3)
        v19 = 21;
      else
        v19 = 28;
      LODWORD(v38) = v19;
      *((_QWORD *)&v38 + 1) = v4;
      std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::pair<int const,unsigned long>>(v8, (int *)&v38, &v38);
      if ((unint64_t)v38 < 3)
      {
        *(_QWORD *)&v38 = 0;
        if (v39)
        {
          v20 = -1;
          goto LABEL_36;
        }
        v21 = a4;
      }
      else
      {
        v20 = *(uint64_t *)((char *)v39 + ((4 * v38) & 0xFFFFFFFFFFFFFFF8));
        *(_QWORD *)&v38 = 0;
LABEL_36:
        v21 = a4;
        (*(void (**)(uint64_t))(*(_QWORD *)v40 + 24))(v40);
        if (v20 != -1)
        {
          if (a3)
            v22 = 19;
          else
            v22 = 26;
          LODWORD(v38) = v22;
          *((_QWORD *)&v38 + 1) = v20;
          std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::pair<int const,unsigned long>>(v8, (int *)&v38, &v38);
        }
      }
      FIK::Hierarchy::childIndicesOf(a1, (uint64_t)v4, (uint64_t *)&v38);
      if ((_QWORD)v38)
      {
        v23 = *v39;
        *(_QWORD *)&v38 = 0;
        goto LABEL_46;
      }
      *(_QWORD *)&v38 = 0;
      if (!v39)
        goto LABEL_52;
      v23 = -1;
LABEL_46:
      (*(void (**)(uint64_t, uint64_t *, _QWORD, uint64_t))(*(_QWORD *)v40 + 24))(v40, v39, 0, 8);
      if (v23 == -1)
      {
LABEL_52:
        v23 = (uint64_t)v4;
      }
      else
      {
        if (a3)
          v24 = 22;
        else
          v24 = 29;
        LODWORD(v38) = v24;
        *((_QWORD *)&v38 + 1) = v23;
        std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::pair<int const,unsigned long>>(v8, (int *)&v38, &v38);
        FIK::Hierarchy::childIndicesOf(a1, v23, (uint64_t *)&v38);
        if ((_QWORD)v38)
        {
          v25 = *v39;
          *(_QWORD *)&v38 = 0;
LABEL_55:
          (*(void (**)(uint64_t, uint64_t *, _QWORD, uint64_t))(*(_QWORD *)v40 + 24))(v40, v39, 0, 8);
          if (v25 != -1)
          {
            if (a3)
              v26 = 23;
            else
              v26 = 30;
            LODWORD(v38) = v26;
            *((_QWORD *)&v38 + 1) = v25;
            std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::pair<int const,unsigned long>>(v8, (int *)&v38, &v38);
          }
        }
        else
        {
          *(_QWORD *)&v38 = 0;
          if (v39)
          {
            v25 = -1;
            goto LABEL_55;
          }
        }
      }
      if (v42[0])
      {
        v27 = a3 ? 17 : 20;
        LODWORD(v38) = v27;
        FIK::IKArray<FIK::Task *>::IKArray((_QWORD *)&v38 + 1, v42);
        std::__tree<std::__value_type<int,FIK::IKArray<unsigned long>>,std::__map_value_compare<int,std::__value_type<int,FIK::IKArray<unsigned long>>,std::less<int>,true>,std::allocator<std::__value_type<int,FIK::IKArray<unsigned long>>>>::__emplace_unique_key_args<int,std::pair<int const,FIK::IKArray<unsigned long>>>((uint64_t **)(v21 + 40), (int *)&v38, (uint64_t)&v38);
        *((_QWORD *)&v38 + 1) = 0;
        if (v40)
          (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v41 + 24))(v41, v40, 0, 8);
      }
      if ((_QWORD)v38 == 5)
      {
        v29 = v39[1];
        v30 = v39 + 3;
        v31 = FIK::defaultAllocator(v28);
        result = (uint64_t)FIK::IKArray<unsigned long>::IKArray<unsigned long const&,void>(v35, v29, v30, (uint64_t)v31);
      }
      else
      {
        result = (uint64_t)FIK::defaultAllocator(v28);
        v35[0] = 0;
        v35[1] = 0;
        v36 = 0;
        v37 = result;
      }
      *(_QWORD *)&v38 = 0;
      if (v39)
        result = (*(uint64_t (**)(uint64_t, uint64_t *, _QWORD, uint64_t))(*(_QWORD *)v40 + 24))(v40, v39, 0, 8);
      if (v35[0])
      {
        v32 = a3 ? 16 : 19;
        LODWORD(v38) = v32;
        FIK::IKArray<FIK::Task *>::IKArray((_QWORD *)&v38 + 1, v35);
        result = (uint64_t)std::__tree<std::__value_type<int,FIK::IKArray<unsigned long>>,std::__map_value_compare<int,std::__value_type<int,FIK::IKArray<unsigned long>>,std::less<int>,true>,std::allocator<std::__value_type<int,FIK::IKArray<unsigned long>>>>::__emplace_unique_key_args<int,std::pair<int const,FIK::IKArray<unsigned long>>>((uint64_t **)(v21 + 40), (int *)&v38, (uint64_t)&v38);
        *((_QWORD *)&v38 + 1) = 0;
        if (v40)
          result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v41 + 24))(v41, v40, 0, 8);
      }
      v35[0] = 0;
      if (v36)
        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v37 + 24))(v37, v36, 0, 8);
      v42[0] = 0;
      if (v43)
        return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v44 + 24))(v44, v43, 0, 8);
      return result;
    }
LABEL_27:
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 24))(v40);
    if (!v15)
      goto LABEL_28;
  }
  return result;
}

float `anonymous namespace'::characteriseArmChain(FIK::Hierarchy *a1, const FIK::Hierarchy *a2, int a3, uint64_t a4)
{
  const FIK::Hierarchy *v4;
  int v9;
  uint64_t **v10;
  unint64_t v11;
  float result;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  FIK *v25;
  uint64_t v26;
  void (***v27)(FIK::CrtAllocator *__hidden);
  void (***v28)(FIK::CrtAllocator *__hidden);
  size_t v29;
  void *v30;
  uint64_t v31;
  _QWORD *v32;
  void (***v33)(FIK::CrtAllocator *__hidden);
  int v34;
  int v35;
  uint64_t **v36;
  int v37;
  uint64_t v38[2];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41[2];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44[2];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  void *v49;
  void (***v50)(FIK::CrtAllocator *__hidden);
  __int128 v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55[2];
  uint64_t v56;
  uint64_t v57;

  if (a3)
    v9 = 5;
  else
    v9 = 11;
  v10 = (uint64_t **)(a4 + 16);
  LODWORD(v51) = v9;
  *((_QWORD *)&v51 + 1) = a2;
  std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::pair<int const,unsigned long>>((uint64_t **)(a4 + 16), (int *)&v51, &v51);
  v11 = FIK::Hierarchy::descendentsCountOf(a1, (uint64_t)a2);
  v13 = 0;
  v14 = (uint64_t)a2;
  while (v13 <= v11)
  {
    FIK::Hierarchy::childIndicesOf(a1, v14, (uint64_t *)&v51);
    v15 = v14;
    if ((_QWORD)v51)
    {
      v16 = *v52;
      if (v13 < 3 || (unint64_t)v51 < 3)
      {
        ++v13;
        *(_QWORD *)&v51 = 0;
        v18 = 1;
        v14 = v16;
        goto LABEL_13;
      }
      v15 = FIK::Hierarchy::parentIndexOf(a1, *v52);
      if (!v17)
      {
        std::__throw_bad_optional_access[abi:nn180100]();
        return FIK::BipedCharacterisation::characterisationConfidence();
      }
    }
    *(_QWORD *)&v51 = 0;
    if (!v52)
    {
      v4 = (const FIK::Hierarchy *)v15;
LABEL_16:
      if (v4 == (const FIK::Hierarchy *)-1)
        return result;
      if (a3)
        v19 = 10;
      else
        v19 = 16;
      LODWORD(v51) = v19;
      *((_QWORD *)&v51 + 1) = v4;
      std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::pair<int const,unsigned long>>(v10, (int *)&v51, &v51);
      FIK::Hierarchy::childIndicesOf(a1, (uint64_t)a2, (uint64_t *)&v51);
      if ((_QWORD)v51)
      {
        v20 = *v52;
        *(_QWORD *)&v51 = 0;
LABEL_24:
        (*(void (**)(uint64_t, uint64_t *, _QWORD, uint64_t))(*(_QWORD *)v53 + 24))(v53, v52, 0, 8);
        if (v20 != -1)
        {
          if (a3)
            v21 = 6;
          else
            v21 = 12;
          LODWORD(v51) = v21;
          *((_QWORD *)&v51 + 1) = v20;
          std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::pair<int const,unsigned long>>(v10, (int *)&v51, &v51);
        }
      }
      else
      {
        *(_QWORD *)&v51 = 0;
        if (v52)
        {
          v20 = -1;
          goto LABEL_24;
        }
      }
      if ((unint64_t)(v51 - 3) > 3)
      {
        *(_QWORD *)&v51 = 0;
        if (v52)
        {
          v22 = -1;
          goto LABEL_33;
        }
      }
      else
      {
        v22 = *(uint64_t *)((char *)v52 + ((4 * v51) & 0xFFFFFFFFFFFFFFF8));
        *(_QWORD *)&v51 = 0;
LABEL_33:
        (*(void (**)(uint64_t))(*(_QWORD *)v53 + 24))(v53);
        if (v22 != -1)
        {
          if (a3)
            v23 = 8;
          else
            v23 = 14;
          LODWORD(v51) = v23;
          *((_QWORD *)&v51 + 1) = v22;
          std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::pair<int const,unsigned long>>(v10, (int *)&v51, &v51);
        }
      }
      if (v55[0])
      {
        v24 = a3 ? 6 : 11;
        LODWORD(v51) = v24;
        FIK::IKArray<FIK::Task *>::IKArray((_QWORD *)&v51 + 1, v55);
        std::__tree<std::__value_type<int,FIK::IKArray<unsigned long>>,std::__map_value_compare<int,std::__value_type<int,FIK::IKArray<unsigned long>>,std::less<int>,true>,std::allocator<std::__value_type<int,FIK::IKArray<unsigned long>>>>::__emplace_unique_key_args<int,std::pair<int const,FIK::IKArray<unsigned long>>>((uint64_t **)(a4 + 40), (int *)&v51, (uint64_t)&v51);
        *((_QWORD *)&v51 + 1) = 0;
        if (v53)
          (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v54 + 24))(v54, v53, 0, 8);
      }
      if ((_QWORD)v51 == 6)
      {
        v31 = v52[2];
        v32 = v52 + 4;
        v33 = FIK::defaultAllocator(v25);
        FIK::IKArray<unsigned long>::IKArray<unsigned long const&,void>(&v47, v31, v32, (uint64_t)v33);
      }
      else if ((_QWORD)v51 == 5)
      {
        v26 = v52[3];
        v27 = FIK::defaultAllocator(v25);
        v28 = v27;
        v47 = v26;
        v48 = (v26 + 7) & 0xFFFFFFFFFFFFFFF8;
        if (v48)
        {
          v29 = 8 * ((v26 + 7) & 0xFFFFFFFFFFFFFFF8);
          v30 = (void *)((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), size_t, uint64_t))(*v27)[2])(v27, v29, 8);
          v49 = v30;
          v50 = v28;
          if (v29)
            bzero(v30, v29);
        }
        else
        {
          v49 = 0;
          v50 = v27;
        }
      }
      else
      {
        v47 = 0;
        v48 = 0;
        v49 = 0;
        v50 = FIK::defaultAllocator(v25);
      }
      *(_QWORD *)&v51 = 0;
      if (v52)
        (*(void (**)(uint64_t, uint64_t *, _QWORD, uint64_t))(*(_QWORD *)v53 + 24))(v53, v52, 0, 8);
      if (v47)
      {
        v34 = a3 ? 7 : 12;
        LODWORD(v51) = v34;
        FIK::IKArray<FIK::Task *>::IKArray((_QWORD *)&v51 + 1, &v47);
        std::__tree<std::__value_type<int,FIK::IKArray<unsigned long>>,std::__map_value_compare<int,std::__value_type<int,FIK::IKArray<unsigned long>>,std::less<int>,true>,std::allocator<std::__value_type<int,FIK::IKArray<unsigned long>>>>::__emplace_unique_key_args<int,std::pair<int const,FIK::IKArray<unsigned long>>>((uint64_t **)(a4 + 40), (int *)&v51, (uint64_t)&v51);
        *((_QWORD *)&v51 + 1) = 0;
        if (v53)
          (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v54 + 24))(v54, v53, 0, 8);
      }
      FIK::Hierarchy::childIndicesOf(a1, (uint64_t)v4, v44);
      if (v44[0])
      {
        if (a3)
          v35 = 8;
        else
          v35 = 13;
        v36 = (uint64_t **)(a4 + 40);
        LODWORD(v51) = v35;
        FIK::IKArray<FIK::Task *>::IKArray((_QWORD *)&v51 + 1, v44);
        std::__tree<std::__value_type<int,FIK::IKArray<unsigned long>>,std::__map_value_compare<int,std::__value_type<int,FIK::IKArray<unsigned long>>,std::less<int>,true>,std::allocator<std::__value_type<int,FIK::IKArray<unsigned long>>>>::__emplace_unique_key_args<int,std::pair<int const,FIK::IKArray<unsigned long>>>(v36, (int *)&v51, (uint64_t)&v51);
        *((_QWORD *)&v51 + 1) = 0;
        if (v53)
          (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v54 + 24))(v54, v53, 0, 8);
        if (a3)
          v37 = 9;
        else
          v37 = 14;
        FIK::IKArray<FIK::Task *>::IKArray(v38, v44);
        v38[0] = 0;
        if (v39)
          (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v40 + 24))(v40, v39, 0, 8);
        LODWORD(v51) = v37;
        FIK::IKArray<FIK::Task *>::IKArray((_QWORD *)&v51 + 1, v41);
        std::__tree<std::__value_type<int,FIK::IKArray<unsigned long>>,std::__map_value_compare<int,std::__value_type<int,FIK::IKArray<unsigned long>>,std::less<int>,true>,std::allocator<std::__value_type<int,FIK::IKArray<unsigned long>>>>::__emplace_unique_key_args<int,std::pair<int const,FIK::IKArray<unsigned long>>>(v36, (int *)&v51, (uint64_t)&v51);
        *((_QWORD *)&v51 + 1) = 0;
        if (v53)
          (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v54 + 24))(v54, v53, 0, 8);
        v41[0] = 0;
        if (v42)
          (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v43 + 24))(v43, v42, 0, 8);
      }
      v44[0] = 0;
      if (v45)
        (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v46 + 24))(v46, v45, 0, 8);
      v47 = 0;
      if (v49)
        ((void (*)(void (***)(FIK::CrtAllocator *__hidden), void *, _QWORD, uint64_t))(*v50)[3])(v50, v49, 0, 8);
      v55[0] = 0;
      if (v56)
        (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v57 + 24))(v57, v56, 0, 8);
      return result;
    }
    v18 = 0;
    v4 = (const FIK::Hierarchy *)v15;
LABEL_13:
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 24))(v53);
    if ((v18 & 1) == 0)
      goto LABEL_16;
  }
  return result;
}

float FIK::BipedCharacterisation::characterisationConfidence()
{
  return 1.0;
}

void FIK::BipedCharacterisation::~BipedCharacterisation(FIK::BipedCharacterisation *this)
{
  *(_QWORD *)this = off_24CA6C008;
  if (*((_QWORD *)this + 2))
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 3) + 24))(*((_QWORD *)this + 3), *((_QWORD *)this + 1), 0, 8);
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
  }
}

{
  *(_QWORD *)this = off_24CA6C008;
  if (*((_QWORD *)this + 2))
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 3) + 24))(*((_QWORD *)this + 3), *((_QWORD *)this + 1), 0, 8);
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
  }
  JUMPOUT(0x212BCAFB4);
}

unint64_t `anonymous namespace'::findFirstJointWithMinChildCount(_anonymous_namespace_ *this, const FIK::Hierarchy *a2)
{
  unint64_t v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t FirstJointWithMinChildCount;
  char v8;
  unint64_t v10;
  const FIK::Hierarchy **v11;
  uint64_t v12;

  v2 = (unint64_t)a2;
  FIK::Hierarchy::childIndicesOf(this, (uint64_t)a2, (uint64_t *)&v10);
  if (v10 <= 1)
  {
    if (v10 == 1)
    {
      v6 = FirstJointWithMinChildCount & 0xFFFFFFFFFFFFFF00;
      if (v8)
        LOBYTE(v2) = FirstJointWithMinChildCount;
      else
        LOBYTE(v2) = 0;
    }
    else
    {
      LOBYTE(v2) = 0;
      v6 = 0;
    }
  }
  else
  {
    v6 = v2 & 0xFFFFFFFFFFFFFF00;
  }
  v10 = 0;
  if (v11)
    (*(void (**)(uint64_t, const FIK::Hierarchy **, _QWORD, uint64_t))(*(_QWORD *)v12 + 24))(v12, v11, 0, 8);
  return v6 | v2;
}

_QWORD *FIK::IKArray<unsigned long>::IKArray<unsigned long const&,void>(_QWORD *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v8;
  size_t v9;
  _QWORD *v10;

  v6 = a2;
  v8 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  *a1 = a2;
  a1[1] = v8;
  if (!v8)
  {
    v10 = 0;
    a1[2] = 0;
    a1[3] = a4;
    if (!a2)
      return a1;
    goto LABEL_5;
  }
  v9 = 8 * v8;
  v10 = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a4 + 16))(a4, 8 * v8, 8);
  a1[2] = v10;
  a1[3] = a4;
  if (v9)
  {
    bzero(v10, v9);
    v10 = (_QWORD *)a1[2];
  }
  for (; v6; --v6)
LABEL_5:
    *v10++ = *a3;
  return a1;
}

uint64_t **std::__tree<std::__value_type<unsigned long,FIK::IKArray<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,FIK::IKArray<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,FIK::IKArray<unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long,FIK::IKArray<unsigned long>>>(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  __int128 v12;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = operator new(0x48uLL);
    v10[2] = *(_OWORD *)a3;
    v11 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *((_QWORD *)v10 + 6) = v11;
    v12 = *(_OWORD *)(a3 + 24);
    *(_QWORD *)(a3 + 24) = 0;
    *(_OWORD *)((char *)v10 + 56) = v12;
    std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__insert_node_at(a1, (uint64_t)v8, v6, (uint64_t *)v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t *std::__tree<std::__value_type<unsigned long,FIK::IKArray<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,FIK::IKArray<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,FIK::IKArray<unsigned long>>>>::erase(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = std::__tree<std::__value_type<unsigned long,FIK::IKArray<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,FIK::IKArray<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,FIK::IKArray<unsigned long>>>>::__remove_node_pointer(a1, (uint64_t *)a2);
  *(_QWORD *)(a2 + 40) = 0;
  v4 = *(_QWORD *)(a2 + 56);
  if (v4)
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)(a2 + 64) + 24))(*(_QWORD *)(a2 + 64), v4, 0, 8);
  operator delete((void *)a2);
  return v3;
}

uint64_t *std::__tree<std::__value_type<unsigned long,FIK::IKArray<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,FIK::IKArray<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,FIK::IKArray<unsigned long>>>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t *v6;

  v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    v4 = a2;
    do
    {
      v3 = (uint64_t *)v4[2];
      v5 = *v3 == (_QWORD)v4;
      v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2)
    *a1 = v3;
  v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v6, a2);
  return v3;
}

uint64_t *std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v12 = v7[2];
    if (*(uint64_t **)v12 == v7)
      break;
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      v13 = *(uint64_t **)(v12 + 8);
      v14 = *v13;
      *(_QWORD *)(v12 + 8) = *v13;
      if (v14)
        *(_QWORD *)(v14 + 16) = v12;
      v13[2] = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v13;
      *v13 = v12;
      *(_QWORD *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7)
        result = v7;
      v7 = *(uint64_t **)(*v7 + 8);
    }
    v15 = (_QWORD *)*v7;
    if (*v7 && !*((_BYTE *)v15 + 24))
    {
      v16 = (uint64_t *)v7[1];
      if (!v16)
        goto LABEL_56;
LABEL_55:
      if (*((_BYTE *)v16 + 24))
      {
LABEL_56:
        *((_BYTE *)v15 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v22 = v15[1];
        *v7 = v22;
        if (v22)
          *(_QWORD *)(v22 + 16) = v7;
        v15[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        v16 = v7;
      }
      else
      {
        v15 = v7;
      }
      v23 = v15[2];
      *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v16 + 24) = 1;
      v24 = *(uint64_t **)(v23 + 8);
      v25 = *v24;
      *(_QWORD *)(v23 + 8) = *v24;
      if (v25)
        *(_QWORD *)(v25 + 16) = v23;
      v24[2] = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
      *v24 = v23;
      goto LABEL_72;
    }
    v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24))
      goto LABEL_55;
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v17 + 24))
      goto LABEL_53;
LABEL_49:
    v7 = *(uint64_t **)(v17[2] + 8 * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    v18 = v7[1];
    *(_QWORD *)v12 = v18;
    if (v18)
      *(_QWORD *)(v18 + 16) = v12;
    v7[2] = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(_QWORD *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12)
      result = v7;
    v7 = *(uint64_t **)v12;
  }
  v19 = (_QWORD *)*v7;
  if (*v7 && !*((_BYTE *)v19 + 24))
    goto LABEL_68;
  v20 = (uint64_t *)v7[1];
  if (!v20 || *((_BYTE *)v20 + 24))
  {
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24))
      v21 = v17 == result;
    else
      v21 = 1;
    if (v21)
      goto LABEL_53;
    goto LABEL_49;
  }
  if (v19 && !*((_BYTE *)v19 + 24))
  {
LABEL_68:
    v20 = v7;
  }
  else
  {
    *((_BYTE *)v20 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v26 = *v20;
    v7[1] = *v20;
    if (v26)
      *(_QWORD *)(v26 + 16) = v7;
    v20[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v20;
    *v20 = (uint64_t)v7;
    v7[2] = (uint64_t)v20;
    v19 = v7;
  }
  v23 = v20[2];
  *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v19 + 24) = 1;
  v24 = *(uint64_t **)v23;
  v27 = *(_QWORD *)(*(_QWORD *)v23 + 8);
  *(_QWORD *)v23 = v27;
  if (v27)
    *(_QWORD *)(v27 + 16) = v23;
  v24[2] = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(_QWORD *)(v23 + 16) = v24;
  return result;
}

void std::__tree<std::__value_type<unsigned long,FIK::IKArray<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,FIK::IKArray<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,FIK::IKArray<unsigned long>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;

  if (a2)
  {
    std::__tree<std::__value_type<unsigned long,FIK::IKArray<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,FIK::IKArray<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,FIK::IKArray<unsigned long>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned long,FIK::IKArray<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,FIK::IKArray<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,FIK::IKArray<unsigned long>>>>::destroy(a1, a2[1]);
    a2[5] = 0;
    v4 = a2[7];
    if (v4)
      (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2[8] + 24))(a2[8], v4, 0, 8);
    operator delete(a2);
  }
}

_QWORD *`anonymous namespace'::findAuxillaryJoints@<X0>(_anonymous_namespace_ *this@<X0>, const FIK::Hierarchy *a2@<X1>, const FIK::Hierarchy *a3@<X2>, uint64_t *a4@<X8>)
{
  unint64_t v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11[2];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14[2];
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20[2];
  uint64_t v21;
  uint64_t v22;
  char v23;

  FIK::Hierarchy::descendentIndicesOf(this, (uint64_t)a2, v17);
  FIK::Hierarchy::descendentIndicesOf(this, (uint64_t)a3, v14);
  v8 = 126 - 2 * __clz(v11[0]);
  if (v11[0])
    v9 = v8;
  else
    v9 = 0;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<unsigned long>,false>(v12, (unint64_t *)(v12 + 8 * v11[0]), (uint64_t)&v23, v9, 1);
  v11[0] = 0;
  if (v12)
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v13 + 24))(v13, v12, 0, 8);
  v14[0] = 0;
  if (v15)
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v16 + 24))(v16, v15, 0, 8);
  v17[0] = 0;
  if (v18)
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v19 + 24))(v19, v18, 0, 8);
  v20[0] = 0;
  if (v21)
    return (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v22 + 24))(v22, v21, 0, 8);
  return result;
}

uint64_t `anonymous namespace'::constructChain@<X0>(_anonymous_namespace_ *this@<X0>, const FIK::Hierarchy *a2@<X1>, const FIK::Hierarchy *a3@<X2>, uint64_t *a4@<X8>)
{
  void (***v8)(FIK::CrtAllocator *__hidden);
  uint64_t result;
  unint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  _QWORD *v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  BOOL v18;

  v8 = FIK::defaultAllocator(this);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  a4[3] = (uint64_t)v8;
  while (1)
  {
    result = (uint64_t)FIK::IKArray<FIK::Segment *>::reserve(a4, *a4 + 1);
    v10 = a4[2];
    v11 = *a4;
    if (a3 == a2)
      break;
    *(_QWORD *)(v10 + 8 * v11) = a3;
    ++*a4;
    a3 = (const FIK::Hierarchy *)FIK::Hierarchy::parentIndexOf(this, (uint64_t)a3);
    if (!v12)
    {
      result = std::__throw_bad_optional_access[abi:nn180100]();
      break;
    }
  }
  *(_QWORD *)(v10 + 8 * v11) = a2;
  v13 = *a4 + 1;
  *a4 = v13;
  v14 = (_QWORD *)(v10 + 8 * v13 - 8);
  if (v13)
    v15 = (unint64_t)v14 > v10;
  else
    v15 = 0;
  if (v15)
  {
    v16 = v10 + 8;
    do
    {
      v17 = *(_QWORD *)(v16 - 8);
      *(_QWORD *)(v16 - 8) = *v14;
      *v14-- = v17;
      v18 = v16 >= (unint64_t)v14;
      v16 += 8;
    }
    while (!v18);
  }
  return result;
}

_QWORD *`anonymous namespace'::getSetDifference<unsigned long>@<X0>(FIK *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  result = FIK::defaultAllocator(a1);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  a3[3] = (uint64_t)result;
  v7 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v8 = 0;
    v9 = (_QWORD *)*((_QWORD *)a1 + 2);
    v10 = &v9[v7];
    do
    {
      v11 = *a2;
      if (*a2)
      {
        v12 = 8 * v11;
        v13 = (_QWORD *)a2[2];
        while (*v13 != *v9)
        {
          ++v13;
          v12 -= 8;
          if (!v12)
            goto LABEL_10;
        }
      }
      else
      {
        v13 = (_QWORD *)a2[2];
      }
      if (v13 == (_QWORD *)(a2[2] + 8 * v11))
      {
LABEL_10:
        result = FIK::IKArray<FIK::Segment *>::reserve(a3, v8 + 1);
        *(_QWORD *)(a3[2] + 8 * *a3) = *v9;
        v8 = *a3 + 1;
        *a3 = v8;
      }
      ++v9;
    }
    while (v9 != v10);
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<unsigned long>,false>(uint64_t result, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  char v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  BOOL v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;

  v8 = (unint64_t *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v20 = *(a2 - 1);
        v21 = *v9;
        if (v20 < *v9)
        {
          *v9 = v20;
          *(a2 - 1) = v21;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<unsigned long>>(v9, v9 + 1, a2 - 1);
      case 4uLL:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<unsigned long>>(v9, v9 + 1, v9 + 2, a2 - 1);
      case 5uLL:
        return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<unsigned long>>(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1);
      default:
        if (v12 > 191)
        {
          if (v11 == 1)
          {
            if (v9 != a2)
              return (uint64_t)std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<unsigned long>,FIK::IKArrayIterator<unsigned long>>(v9, a2, a2, a3);
            return result;
          }
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x401)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<unsigned long>>(&v9[v13 >> 1], v9, a2 - 1);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<unsigned long>>(v9, &v9[v13 >> 1], a2 - 1);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<unsigned long>>(v9 + 1, v15 - 1, a2 - 2);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<unsigned long>>(v9 + 2, &v9[v14 + 1], a2 - 3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<unsigned long>>(v15 - 1, v15, &v9[v14 + 1]);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (*(v9 - 1) >= *v9)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,FIK::IKArrayIterator<unsigned long>,std::__less<void,void> &>(v9, (uint64_t *)a2);
            v9 = (unint64_t *)result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,FIK::IKArrayIterator<unsigned long>,std::__less<void,void> &>(v9, a2);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<unsigned long>>(v9, v17);
          v9 = v17 + 1;
          result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<unsigned long>>(v17 + 1, a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<unsigned long>,false>(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        v22 = v9 + 1;
        v24 = v9 == a2 || v22 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v24)
          {
            v25 = 0;
            v26 = v9;
            do
            {
              v28 = *v26;
              v27 = v26[1];
              v26 = v22;
              if (v27 < v28)
              {
                v29 = v25;
                while (1)
                {
                  *(unint64_t *)((char *)v9 + v29 + 8) = v28;
                  if (!v29)
                    break;
                  v28 = *(unint64_t *)((char *)v9 + v29 - 8);
                  v29 -= 8;
                  if (v27 >= v28)
                  {
                    v30 = (unint64_t *)((char *)v9 + v29 + 8);
                    goto LABEL_42;
                  }
                }
                v30 = v9;
LABEL_42:
                *v30 = v27;
              }
              v22 = v26 + 1;
              v25 += 8;
            }
            while (v26 + 1 != a2);
          }
        }
        else if (!v24)
        {
          do
          {
            v31 = *v22;
            v32 = *v8;
            if (*v22 < *v8)
            {
              v33 = 1;
              do
              {
                v8[v33] = v32;
                v32 = v8[v33 - 2];
                --v33;
              }
              while (v31 < v32);
              v8[v33] = v31;
            }
            ++v22;
            ++v8;
          }
          while (v22 != a2);
        }
        return result;
    }
  }
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<unsigned long>>(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v3 = *a2;
  v4 = *a1;
  v5 = *a3;
  if (*a2 < *a1)
  {
    if (v5 < v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    if (*a3 >= v4)
      return 1;
    *a2 = *a3;
    *a3 = v4;
    return 2;
  }
  if (v5 < v3)
  {
    *a2 = v5;
    *a3 = v3;
    v6 = *a1;
    if (*a2 >= *a1)
      return 1;
    *a1 = *a2;
    *a2 = v6;
    return 2;
  }
  return 0;
}

unint64_t *std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,FIK::IKArrayIterator<unsigned long>,std::__less<void,void> &>(unint64_t *a1, uint64_t *a2)
{
  unint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v2 = *a1;
  if (*a1 >= *(a2 - 1))
  {
    v5 = (uint64_t *)(a1 + 1);
    do
    {
      v3 = (unint64_t *)v5;
      if (v5 >= a2)
        break;
      ++v5;
    }
    while (v2 >= *v3);
  }
  else
  {
    v3 = a1;
    do
    {
      v4 = v3[1];
      ++v3;
    }
    while (v2 >= v4);
  }
  if (v3 < (unint64_t *)a2)
  {
    do
      v6 = *--a2;
    while (v2 < v6);
  }
  if (v3 < (unint64_t *)a2)
  {
    v7 = *v3;
    v8 = *a2;
    do
    {
      *v3 = v8;
      *a2 = v7;
      do
      {
        v9 = v3[1];
        ++v3;
        v7 = v9;
      }
      while (v2 >= v9);
      do
      {
        v10 = *--a2;
        v8 = v10;
      }
      while (v2 < v10);
    }
    while (v3 < (unint64_t *)a2);
  }
  if (v3 - 1 != a1)
    *a1 = *(v3 - 1);
  *(v3 - 1) = v2;
  return v3;
}

unint64_t *std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,FIK::IKArrayIterator<unsigned long>,std::__less<void,void> &>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = 0;
  v3 = *a1;
  do
    v4 = a1[++v2];
  while (v4 < v3);
  v5 = &a1[v2];
  v6 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v5 >= a2)
        break;
      v8 = *--a2;
    }
    while (v8 >= v3);
  }
  else
  {
    do
      v7 = *--a2;
    while (v7 >= v3);
  }
  if (v5 < a2)
  {
    v9 = *a2;
    v10 = &a1[v2];
    v11 = a2;
    do
    {
      *v10 = v9;
      *v11 = v4;
      do
      {
        v12 = v10[1];
        ++v10;
        v4 = v12;
      }
      while (v12 < v3);
      do
      {
        v13 = *--v11;
        v9 = v13;
      }
      while (v13 >= v3);
    }
    while (v10 < v11);
    v6 = v10 - 1;
  }
  if (v6 != a1)
    *a1 = *v6;
  *v6 = v3;
  return v6;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<unsigned long>>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (v6 < *a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<unsigned long>>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<unsigned long>>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<unsigned long>>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<unsigned long>>(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    if (*v9 < *v8)
    {
      v14 = v11;
      while (1)
      {
        *(unint64_t *)((char *)a1 + v14) = v13;
        v15 = v14 - 8;
        if (v14 == 8)
          break;
        v13 = *(unint64_t *)((char *)a1 + v14 - 16);
        v14 -= 8;
        if (v12 >= v13)
        {
          v16 = (unint64_t *)((char *)a1 + v15);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<unsigned long>>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<unsigned long>>(a1, a2, a3);
  v9 = *a3;
  if (*a4 < *a3)
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *a2;
    if (*a3 < *a2)
    {
      *a2 = *a3;
      *a3 = v10;
      v11 = *a1;
      if (*a2 < *a1)
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<unsigned long>>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  uint64_t result;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<unsigned long>>(a1, a2, a3, a4);
  v11 = *a4;
  if (*a5 < *a4)
  {
    *a4 = *a5;
    *a5 = v11;
    v12 = *a3;
    if (*a4 < *a3)
    {
      *a3 = *a4;
      *a4 = v12;
      v13 = *a2;
      if (*a3 < *a2)
      {
        *a2 = *a3;
        *a3 = v13;
        v14 = *a1;
        if (*a2 < *a1)
        {
          *a1 = *a2;
          *a2 = v14;
        }
      }
    }
  }
  return result;
}

unint64_t *std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<unsigned long>,FIK::IKArrayIterator<unsigned long>>(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  unint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<unsigned long>>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    if (v6 == a3)
    {
      a3 = v6;
    }
    else
    {
      v13 = v6;
      do
      {
        v14 = *v13;
        if (*v13 < *a1)
        {
          *v13 = *a1;
          *a1 = v14;
          std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<unsigned long>>((uint64_t)a1, a4, v9, a1);
        }
        ++v13;
      }
      while (v13 != a3);
    }
    if (v8 >= 9)
    {
      v15 = (unint64_t)v8 >> 3;
      do
      {
        v16 = 0;
        v17 = *a1;
        v18 = a1;
        do
        {
          v19 = &v18[v16 + 1];
          v20 = (2 * v16) | 1;
          v16 = 2 * v16 + 2;
          if (v16 >= v15)
          {
            v21 = *v19;
            v16 = v20;
          }
          else
          {
            v21 = *v19;
            v22 = v19[1];
            if (*v19 <= v22)
              v21 = v19[1];
            if (*v19 >= v22)
              v16 = v20;
            else
              ++v19;
          }
          *v18 = v21;
          v18 = v19;
        }
        while (v16 <= (uint64_t)((unint64_t)(v15 - 2) >> 1));
        if (v19 == --v6)
        {
          *v19 = v17;
        }
        else
        {
          *v19 = *v6;
          *v6 = v17;
          v23 = (char *)v19 - (char *)a1 + 8;
          if (v23 >= 9)
          {
            v24 = (((unint64_t)v23 >> 3) - 2) >> 1;
            v25 = &a1[v24];
            v26 = *v25;
            v27 = *v19;
            if (*v25 < *v19)
            {
              do
              {
                *v19 = v26;
                v19 = v25;
                if (!v24)
                  break;
                if (v24 >= 1)
                  --v24;
                v24 >>= 1;
                v25 = &a1[v24];
                v26 = *v25;
              }
              while (*v25 < v27);
              *v19 = v27;
            }
          }
        }
      }
      while (v15-- > 2);
    }
  }
  return a3;
}

uint64_t std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<unsigned long>>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  int64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  if (a3 >= 2)
  {
    v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= ((uint64_t)a4 - result) >> 3)
    {
      v5 = (((uint64_t)a4 - result) >> 2) | 1;
      v6 = (unint64_t *)(result + 8 * v5);
      if (v5 + 1 >= a3)
      {
        v7 = *v6;
      }
      else
      {
        v7 = *v6;
        v8 = v6[1];
        if (*v6 <= v8)
          v7 = v6[1];
        if (*v6 < v8)
        {
          ++v6;
          ++v5;
        }
      }
      v9 = *a4;
      if (v7 >= *a4)
      {
        do
        {
          *a4 = v7;
          a4 = v6;
          if (v4 < v5)
            break;
          v10 = (2 * v5) | 1;
          v6 = (unint64_t *)(result + 8 * v10);
          v5 = 2 * v5 + 2;
          if (v5 >= a3)
          {
            v7 = *v6;
            v5 = v10;
          }
          else
          {
            v7 = *v6;
            v11 = v6[1];
            if (*v6 <= v11)
              v7 = v6[1];
            if (*v6 >= v11)
              v5 = v10;
            else
              ++v6;
          }
        }
        while (v7 >= v9);
        *a4 = v9;
      }
    }
  }
  return result;
}

uint64_t *`anonymous namespace'::getAuxillaryOfGroup@<X0>(FIK *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *result;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char v13;

  result = (uint64_t *)FIK::defaultAllocator(a1);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  a3[3] = (uint64_t)result;
  v7 = *a2;
  if (*a2)
  {
    v8 = (uint64_t *)a2[2];
    v9 = 8 * v7;
    do
    {
      FIK::Hierarchy::descendentIndicesOf(a1, *v8, &v10);
      result = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<FIK::IKArrayIterator<unsigned long const>,FIK::IKArrayIterator<unsigned long const>,std::back_insert_iterator<FIK::IKArray<unsigned long>>>((uint64_t)&v13, v11, &v11[v10], a3);
      v10 = 0;
      if (v11)
        result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *, _QWORD, uint64_t))(*(_QWORD *)v12 + 24))(v12, v11, 0, 8);
      ++v8;
      v9 -= 8;
    }
    while (v9);
  }
  return result;
}

uint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<FIK::IKArrayIterator<unsigned long const>,FIK::IKArrayIterator<unsigned long const>,std::back_insert_iterator<FIK::IKArray<unsigned long>>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;

  v5 = a2;
  if (a2 != a3)
  {
    v7 = *a4;
    do
    {
      FIK::IKArray<FIK::Segment *>::reserve(a4, v7 + 1);
      v8 = *v5++;
      *(_QWORD *)(a4[2] + 8 * *a4) = v8;
      v7 = *a4 + 1;
      *a4 = v7;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

const FIK::Hierarchy *`anonymous namespace'::findHead(_anonymous_namespace_ *this, const FIK::Hierarchy *a2)
{
  const FIK::Hierarchy *v2;
  unint64_t v4;
  const FIK::Hierarchy *v5;
  uint64_t Head;
  char v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char v11;
  uint64_t i;
  char **v14;
  uint64_t v15;
  uint64_t v16;
  void *__p[2];
  char v18;
  unint64_t v19;
  const FIK::Hierarchy **v20;
  uint64_t v21;
  _QWORD v22[3];
  _QWORD v23[4];

  v2 = a2;
  v23[3] = *MEMORY[0x24BDAC8D0];
  FIK::Hierarchy::childIndicesOf(this, (uint64_t)a2, (uint64_t *)&v19);
  if (v19)
  {
    v5 = *v20;
    if (v19 < 3)
    {
    }
    else
    {
      Head = FIK::Hierarchy::parentIndexOf(this, (uint64_t)v5);
      if (!v7)
        goto LABEL_22;
    }
    v2 = (const FIK::Hierarchy *)Head;
  }
  else
  {
    v8 = FIK::Hierarchy::nameOf(this, (uint64_t)v2);
    if (*(_QWORD *)(v8 + 8))
      v9 = *(char **)v8;
    else
      v9 = (char *)&unk_2108059BE;
    std::string::basic_string[abi:nn180100]<0>(__p, v9);
    std::string::basic_string[abi:nn180100]<0>(v22, "End");
    std::string::basic_string[abi:nn180100]<0>(v23, "end");
    {
      v10 = FIK::Hierarchy::parentIndexOf(this, (uint64_t)v2);
      if (!v11)
      {
LABEL_22:
        v14 = (char **)std::__throw_bad_optional_access[abi:nn180100]();
      }
      v2 = (const FIK::Hierarchy *)v10;
    }
    for (i = 0; i != -6; i -= 3)
    {
      if (SHIBYTE(v23[i + 2]) < 0)
        operator delete((void *)v22[i + 3]);
    }
    if (v18 < 0)
      operator delete(__p[0]);
  }
  v19 = 0;
  if (v20)
    (*(void (**)(uint64_t, const FIK::Hierarchy **, _QWORD, uint64_t))(*(_QWORD *)v21 + 24))(v21, v20, 0, 8);
  return v2;
}

uint64_t `anonymous namespace'::stringContains(char **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  char *v6;
  int64_t v7;
  char *v8;
  int v9;
  char *v10;
  int64_t v11;
  int v12;
  int64_t v13;
  void *v14;
  int64_t v15;
  char *v16;
  char *v17;

  if (!a3)
    return 0;
  v3 = a2;
  v4 = a2 + 24 * a3;
  v5 = *((char *)a1 + 23);
  if (v5 >= 0)
    v6 = (char *)a1;
  else
    v6 = *a1;
  if (v5 >= 0)
    v7 = *((unsigned __int8 *)a1 + 23);
  else
    v7 = (int64_t)a1[1];
  v8 = &v6[v7];
  while (1)
  {
    v9 = *(char *)(v3 + 23);
    v10 = v9 >= 0 ? (char *)v3 : *(char **)v3;
    v11 = v9 >= 0 ? *(unsigned __int8 *)(v3 + 23) : *(_QWORD *)(v3 + 8);
    if (!v11)
      return 1;
    if (v7 >= v11)
    {
      v12 = *v10;
      v13 = v7;
      v14 = v6;
      do
      {
        v15 = v13 - v11;
        if (v15 == -1)
          break;
        v16 = (char *)memchr(v14, v12, v15 + 1);
        if (!v16)
          break;
        v17 = v16;
        if (!memcmp(v16, v10, v11))
        {
          if (v17 == v8 || v17 - v6 == -1)
            break;
          return 1;
        }
        v14 = v17 + 1;
        v13 = v8 - (v17 + 1);
      }
      while (v13 >= v11);
    }
    v3 += 24;
    if (v3 == v4)
      return 0;
  }
}

uint64_t `anonymous namespace'::highestMagnitudeAxis(float *a1)
{
  void (***v2)(FIK::CrtAllocator *__hidden);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  float v7;
  float v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = FIK::defaultAllocator((FIK *)a1);
  v3 = ((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, uint64_t))(*v2)[2])(v2, 32, 4);
  v4 = 0;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  do
  {
    *(float *)(v3 + v4 * 4) = fabsf(a1[v4]);
    ++v4;
  }
  while (v4 != 3);
  v5 = v3 + 4;
  v6 = *(float *)(v3 + 4);
  v7 = *(float *)v3;
  v8 = *(float *)(v3 + 8);
  if (*(float *)v3 == v6 && v7 == v8)
  {
    v12 = 0;
    v11 = 0;
  }
  else
  {
    if (v7 >= v6)
    {
      v6 = *(float *)v3;
      v5 = v3;
    }
    if (v6 < v8)
      v5 = v3 + 8;
    v10 = (v5 - v3) >> 2;
    if (v10 == 2)
    {
      if (a1[2] >= 0.0)
        v11 = 2;
      else
        v11 = 5;
    }
    else if (v10 == 1)
    {
      if (a1[1] >= 0.0)
        v11 = 1;
      else
        v11 = 4;
    }
    else
    {
      if (v10)
      if (*a1 >= 0.0)
        v11 = 0;
      else
        v11 = 3;
    }
    v12 = 0x100000000;
  }
  ((void (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v2)[3])(v2, v3, 0, 8);
  return v11 | v12;
}

uint64_t *std::map<int,unsigned long>::insert[abi:nn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<int,unsigned long>,std::__tree_node<std::__value_type<int,unsigned long>,void *> *,long>>>(uint64_t *result, int *a2, int *a3)
{
  int *v4;
  uint64_t **v5;
  uint64_t *v6;
  int *v7;
  int *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::__emplace_hint_unique_key_args<int,std::pair<int const,unsigned long> const&>(v5, v6, v4 + 8, (_OWORD *)v4 + 2);
      v7 = (int *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (int *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::__emplace_hint_unique_key_args<int,std::pair<int const,unsigned long> const&>(uint64_t **a1, uint64_t *a2, int *a3, _OWORD *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v6 = std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::__find_equal<int>(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v7 + 2) = *a4;
    std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::__find_equal<int>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 8), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((_DWORD *)v10 + 8) < *a5)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(_DWORD *)(v16 + 32);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 8))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(_DWORD *)(v20 + 32);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

_OWORD *`anonymous namespace'::getFurthestDescendentPose@<X0>(_anonymous_namespace_ *this@<X0>, const FIK::Hierarchy *a2@<X1>, FIK::PoseConverter *a3@<X2>, _OWORD *a4@<X8>)
{
  FIK::PoseConverter *v4;
  _OWORD *result;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a3;
  FIK::Hierarchy::descendentIndicesOf(this, (uint64_t)a3, &v9);
  if (v9)
    v4 = *(FIK::PoseConverter **)(v10 + 8 * v9 - 8);
  result = (_OWORD *)FIK::PoseConverter::GetGlobalTransform(a2, (unint64_t)v4);
  v8 = result[1];
  *a4 = *result;
  a4[1] = v8;
  v9 = 0;
  if (v10)
    return (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v11 + 24))(v11, v10, 0, 8);
  return result;
}

uint64_t `anonymous namespace'::swapAllElements<int,unsigned long>(uint64_t result, int *a2, uint64_t a3)
{
  int *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t v19;

  if (a3)
  {
    v3 = &a2[2 * a3];
    v5 = *(_QWORD *)(result + 8);
    result += 8;
    v4 = v5;
    do
    {
      if (!v4)
        goto LABEL_13;
      v6 = *a2;
      v7 = result;
      v8 = v4;
      do
      {
        v9 = *(_DWORD *)(v8 + 32);
        v10 = v9 < v6;
        if (v9 >= v6)
          v11 = (uint64_t *)v8;
        else
          v11 = (uint64_t *)(v8 + 8);
        if (!v10)
          v7 = v8;
        v8 = *v11;
      }
      while (*v11);
      if (v7 == result || v6 < *(_DWORD *)(v7 + 32))
LABEL_13:
        v7 = result;
      if (v4)
      {
        v12 = a2[1];
        v13 = result;
        v14 = v4;
        do
        {
          v15 = *(_DWORD *)(v14 + 32);
          v16 = v15 < v12;
          if (v15 >= v12)
            v17 = (uint64_t *)v14;
          else
            v17 = (uint64_t *)(v14 + 8);
          if (!v16)
            v13 = v14;
          v14 = *v17;
        }
        while (*v17);
        if (v13 != result && v12 >= *(_DWORD *)(v13 + 32) && v7 != result)
        {
          v19 = *(_QWORD *)(v7 + 40);
          *(_QWORD *)(v7 + 40) = *(_QWORD *)(v13 + 40);
          *(_QWORD *)(v13 + 40) = v19;
        }
      }
      a2 += 2;
    }
    while (a2 != v3);
  }
  return result;
}

uint64_t *`anonymous namespace'::swapAllElements<int,FIK::IKArray<unsigned long>>(uint64_t *result, int *a2, uint64_t a3)
{
  int *v3;
  int *v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  int v12;
  uint64_t *v13;
  int v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t *v18;
  uint64_t *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  if (a3)
  {
    v3 = a2;
    v4 = &a2[2 * a3];
    v5 = result + 1;
    do
    {
      v6 = *v5;
      if (!*v5)
        goto LABEL_13;
      v7 = *v3;
      result = v5;
      v8 = *v5;
      do
      {
        v9 = *(_DWORD *)(v8 + 32);
        v10 = v9 < v7;
        if (v9 >= v7)
          v11 = (uint64_t *)v8;
        else
          v11 = (uint64_t *)(v8 + 8);
        if (!v10)
          result = (uint64_t *)v8;
        v8 = *v11;
      }
      while (*v11);
      if (result == v5 || v7 < *((_DWORD *)result + 8))
LABEL_13:
        result = v5;
      if (v6)
      {
        v12 = v3[1];
        v13 = v5;
        do
        {
          v14 = *(_DWORD *)(v6 + 32);
          v15 = v14 < v12;
          if (v14 >= v12)
            v16 = (uint64_t *)v6;
          else
            v16 = (uint64_t *)(v6 + 8);
          if (!v15)
            v13 = (uint64_t *)v6;
          v6 = *v16;
        }
        while (*v16);
        if (v13 != v5 && v12 >= *((_DWORD *)v13 + 8) && result != v5)
        {
          v18 = v13 + 5;
          v20 = *(_OWORD *)(result + 5);
          v19 = result + 5;
          *v19 = 0;
          v19[1] = 0;
          v21 = *((_OWORD *)v19 + 1);
          v19[2] = 0;
          v22 = v20;
          v23 = v21;
          FIK::IKArray<unsigned int>::operator=(v19, (__int128 *)(v13 + 5));
          result = FIK::IKArray<unsigned int>::operator=(v18, &v22);
          *(_QWORD *)&v22 = 0;
          if ((_QWORD)v23)
            result = (uint64_t *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**((_QWORD **)&v23 + 1)
                                                                                           + 24))(*((_QWORD *)&v23 + 1), v23, 0, 8);
        }
      }
      v3 += 2;
    }
    while (v3 != v4);
  }
  return result;
}

_QWORD *`anonymous namespace'::computeFingerOrdering@<X0>(FIK *a1@<X0>, const FIK::Hierarchy *a2@<X1>, int a3@<W2>, uint64_t *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  FIK::PoseConverter *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  float *v18;
  uint64_t v19;
  FIK *v20;
  _QWORD *result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  _OWORD v27[2];
  _QWORD v28[2];
  uint64_t v29;
  void (***v30)(FIK::CrtAllocator *__hidden);

  v28[0] = 0;
  v28[1] = 0;
  v29 = 0;
  v30 = FIK::defaultAllocator(a1);
  v10 = *a4;
  if (*a4)
  {
    v11 = 0;
    v12 = a3 - 1;
    do
    {
      v13 = *(FIK::PoseConverter **)(a4[2] + 8 * v11);
      v14 = v27[0];
      switch(v12)
      {
        case 0:
        case 3:
          v14 = DWORD1(v27[0]);
          break;
        case 1:
        case 4:
          v14 = DWORD2(v27[0]);
          break;
        default:
          break;
      }
      FIK::IKArray<std::string_view>::reserve(v28, v28[0] + 1);
      v15 = v29;
      v16 = v29 + 16 * v28[0];
      *(_DWORD *)v16 = v14;
      *(_QWORD *)(v16 + 8) = v13;
      v17 = ++v28[0];
      ++v11;
    }
    while (v10 != v11);
    v18 = (float *)(v15 + 16 * v17);
    if (v17)
    {
      v19 = 126 - 2 * __clz(v17);
      goto LABEL_11;
    }
  }
  else
  {
    v18 = 0;
    v15 = 0;
  }
  v19 = 0;
LABEL_11:
  v20 = (FIK *)std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<std::pair<float,unsigned long>>,false>(v15, v18, (uint64_t)v27, v19, 1);
  result = FIK::defaultAllocator(v20);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  a5[3] = (uint64_t)result;
  v22 = v29;
  if (v28[0])
  {
    v23 = 0;
    v24 = 16 * v28[0];
    v25 = (uint64_t *)(v29 + 8);
    do
    {
      v26 = *v25;
      v25 += 2;
      result = FIK::IKArray<FIK::Segment *>::reserve(a5, v23 + 1);
      *(_QWORD *)(a5[2] + 8 * *a5) = v26;
      v23 = *a5 + 1;
      *a5 = v23;
      v24 -= 16;
    }
    while (v24);
    v22 = v29;
  }
  v28[0] = 0;
  if (v22)
    return (_QWORD *)((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v30)[3])(v30, v22, 0, 8);
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<std::pair<float,unsigned long>>,false>(uint64_t result, float *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  float v18;
  unint64_t v19;
  char v20;
  BOOL v21;
  float v22;
  float v23;
  unint64_t v24;
  unint64_t v25;

  v8 = result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (uint64_t)a2 - v9;
    v13 = (uint64_t)((uint64_t)a2 - v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v22 = *(a2 - 4);
        v23 = *(float *)v9;
        if (v22 < *(float *)v9)
        {
          v24 = *(_QWORD *)(v9 + 8);
          v25 = *((_QWORD *)a2 - 1);
LABEL_34:
          *(float *)v9 = v22;
          *(a2 - 4) = v23;
          *(_QWORD *)(v9 + 8) = v25;
          *((_QWORD *)a2 - 1) = v24;
          return result;
        }
        if (v23 >= v22)
        {
          v25 = *((_QWORD *)a2 - 1);
          v24 = *(_QWORD *)(v9 + 8);
          if (v25 < v24)
            goto LABEL_34;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<std::pair<float,unsigned long>>>(v9, v9 + 16, (uint64_t)(a2 - 4));
      case 4uLL:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<std::pair<float,unsigned long>>>(v9, v9 + 16, v9 + 32, (uint64_t)(a2 - 4));
      case 5uLL:
        return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<std::pair<float,unsigned long>>>(v9, v9 + 16, v9 + 32, v9 + 48, (uint64_t)(a2 - 4));
      default:
        if (v12 <= 383)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<std::pair<float,unsigned long>>>((float *)v9, a2);
          else
            return (uint64_t)std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<std::pair<float,unsigned long>>>((float *)v9, a2);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = v9 + 16 * (v13 >> 1);
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<std::pair<float,unsigned long>>>(v9 + 16 * (v13 >> 1), v9, (uint64_t)(a2 - 4));
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<std::pair<float,unsigned long>>>(v9, v9 + 16 * (v13 >> 1), (uint64_t)(a2 - 4));
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<std::pair<float,unsigned long>>>(v9 + 16, v15 - 16, (uint64_t)(a2 - 8));
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<std::pair<float,unsigned long>>>(v9 + 32, v9 + 16 + 16 * v14, (uint64_t)(a2 - 12));
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<std::pair<float,unsigned long>>>(v15 - 16, v15, v9 + 16 + 16 * v14);
            v16 = *(float *)v9;
            *(_DWORD *)v9 = *(_DWORD *)v15;
            *(float *)v15 = v16;
            v17 = *(_QWORD *)(v9 + 8);
            *(_QWORD *)(v9 + 8) = *(_QWORD *)(v15 + 8);
            *(_QWORD *)(v15 + 8) = v17;
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          v18 = *(float *)(v9 - 16);
          if (v18 >= *(float *)v9 && (*(float *)v9 < v18 || *(_QWORD *)(v9 - 8) >= *(_QWORD *)(v9 + 8)))
          {
            result = std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,FIK::IKArrayIterator<std::pair<float,unsigned long>>,std::__less<void,void> &>(v9, (unint64_t)a2);
            v9 = result;
            goto LABEL_19;
          }
LABEL_14:
          v19 = std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,FIK::IKArrayIterator<std::pair<float,unsigned long>>,std::__less<void,void> &>(v9, (unint64_t)a2);
          if ((v20 & 1) == 0)
            goto LABEL_17;
          v21 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<std::pair<float,unsigned long>>>(v9, v19);
          v9 = v19 + 16;
          result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<std::pair<float,unsigned long>>>(v19 + 16, (uint64_t)a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v21)
              continue;
LABEL_17:
            result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<std::pair<float,unsigned long>>,false>(v8, v19, a3, -v11, a5 & 1);
            v9 = v19 + 16;
LABEL_19:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = (float *)v19;
          if (v21)
            return result;
          goto LABEL_2;
        }
        if ((float *)v9 != a2)
          return std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<std::pair<float,unsigned long>>,FIK::IKArrayIterator<std::pair<float,unsigned long>>>(v9, (uint64_t)a2, (uint64_t)a2, a3);
        return result;
    }
  }
}

float *std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<std::pair<float,unsigned long>>>(float *result, float *a2)
{
  float *v2;
  uint64_t v3;
  float *v4;
  float *v5;
  float v6;
  float v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  float v11;
  unint64_t v12;
  uint64_t v13;

  if (result == a2)
    return result;
  v2 = result + 4;
  if (result + 4 == a2)
    return result;
  v3 = 0;
  v4 = result;
  do
  {
    v5 = v4;
    v4 = v2;
    v6 = *v2;
    v7 = *v5;
    if (*v2 >= *v5)
    {
      if (v7 < v6)
        goto LABEL_17;
      v8 = *((_QWORD *)v5 + 3);
      v9 = *((_QWORD *)v5 + 1);
      if (v8 >= v9)
        goto LABEL_17;
    }
    else
    {
      v8 = *((_QWORD *)v5 + 3);
      v9 = *((_QWORD *)v5 + 1);
    }
    *v4 = v7;
    *((_QWORD *)v4 + 1) = v9;
    if (v5 == result)
    {
LABEL_13:
      v5 = result;
      goto LABEL_14;
    }
    v10 = v3;
    while (1)
    {
      v11 = *(float *)((char *)result + v10 - 16);
      if (v6 >= v11)
        break;
      v12 = *(_QWORD *)((char *)result + v10 - 8);
LABEL_12:
      v5 -= 4;
      v13 = (uint64_t)result + v10;
      *(float *)v13 = v11;
      *(_QWORD *)(v13 + 8) = v12;
      v10 -= 16;
      if (!v10)
        goto LABEL_13;
    }
    if (v11 < v6)
      goto LABEL_14;
    v12 = *(_QWORD *)((char *)result + v10 - 8);
    if (v8 < v12)
      goto LABEL_12;
    v5 = (float *)((char *)result + v10);
LABEL_14:
    *v5 = v6;
    *((_QWORD *)v5 + 1) = v8;
LABEL_17:
    v2 = v4 + 4;
    v3 += 16;
  }
  while (v4 + 4 != a2);
  return result;
}

float *std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<std::pair<float,unsigned long>>>(float *result, float *a2)
{
  float *v2;
  float *i;
  float *v4;
  float v5;
  float v6;
  unint64_t v7;
  float *j;

  if (result != a2)
  {
    v2 = result + 4;
    if (result + 4 != a2)
    {
      for (i = result + 2; ; i += 4)
      {
        v4 = result;
        result = v2;
        v5 = *v2;
        v6 = *v4;
        if (*v2 < *v4)
          break;
        if (v6 >= v5)
        {
          v7 = *((_QWORD *)v4 + 3);
          if (v7 < *((_QWORD *)v4 + 1))
            goto LABEL_6;
        }
LABEL_14:
        v2 = result + 4;
        if (result + 4 == a2)
          return result;
      }
      v7 = *((_QWORD *)v4 + 3);
LABEL_6:
      for (j = i; ; j -= 4)
      {
        j[2] = v6;
        *((_QWORD *)j + 2) = *(_QWORD *)j;
        v6 = *(j - 6);
        if (v5 >= v6 && (v6 < v5 || v7 >= *((_QWORD *)j - 2)))
          break;
      }
      *(j - 2) = v5;
      *(_QWORD *)j = v7;
      goto LABEL_14;
    }
  }
  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<std::pair<float,unsigned long>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v3;
  float v4;
  float v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t result;
  float v9;
  unint64_t v10;
  unint64_t v11;
  float v12;
  float v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  float v18;
  unint64_t v19;

  v3 = *(float *)a2;
  v4 = *(float *)a1;
  if (*(float *)a2 >= *(float *)a1 && (v4 < v3 || *(_QWORD *)(a2 + 8) >= *(_QWORD *)(a1 + 8)))
  {
    v9 = *(float *)a3;
    if (*(float *)a3 >= v3)
    {
      if (v3 < v9)
        return 0;
      v11 = *(_QWORD *)(a3 + 8);
      v10 = *(_QWORD *)(a2 + 8);
      if (v11 >= v10)
        return 0;
    }
    else
    {
      v10 = *(_QWORD *)(a2 + 8);
      v11 = *(_QWORD *)(a3 + 8);
    }
    *(float *)a2 = v9;
    *(float *)a3 = v3;
    *(_QWORD *)(a2 + 8) = v11;
    *(_QWORD *)(a3 + 8) = v10;
    v12 = *(float *)a2;
    v13 = *(float *)a1;
    if (*(float *)a2 >= *(float *)a1)
    {
      if (v13 < v12)
        return 1;
      v15 = *(_QWORD *)(a2 + 8);
      v14 = *(_QWORD *)(a1 + 8);
      if (v15 >= v14)
        return 1;
    }
    else
    {
      v14 = *(_QWORD *)(a1 + 8);
      v15 = *(_QWORD *)(a2 + 8);
    }
    *(float *)a1 = v12;
    *(float *)a2 = v13;
    *(_QWORD *)(a1 + 8) = v15;
    result = 2;
    *(_QWORD *)(a2 + 8) = v14;
  }
  else
  {
    v5 = *(float *)a3;
    if (*(float *)a3 < v3)
    {
      v6 = *(_QWORD *)(a3 + 8);
LABEL_6:
      *(float *)a1 = v5;
      *(float *)a3 = v4;
      v7 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = v6;
      *(_QWORD *)(a3 + 8) = v7;
      return 1;
    }
    if (v3 >= v5)
    {
      v6 = *(_QWORD *)(a3 + 8);
      v16 = *(_QWORD *)(a2 + 8);
      if (v6 < v16)
        goto LABEL_6;
    }
    else
    {
      v16 = *(_QWORD *)(a2 + 8);
    }
    *(float *)a1 = v3;
    *(float *)a2 = v4;
    v17 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v16;
    *(_QWORD *)(a2 + 8) = v17;
    v18 = *(float *)a3;
    if (*(float *)a3 >= v4)
    {
      if (v4 < v18)
        return 1;
      v19 = *(_QWORD *)(a3 + 8);
      if (v19 >= v17)
        return 1;
    }
    else
    {
      v19 = *(_QWORD *)(a3 + 8);
    }
    *(float *)a2 = v18;
    *(float *)a3 = v4;
    *(_QWORD *)(a2 + 8) = v19;
    result = 2;
    *(_QWORD *)(a3 + 8) = v17;
  }
  return result;
}

unint64_t std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,FIK::IKArrayIterator<std::pair<float,unsigned long>>,std::__less<void,void> &>(unint64_t a1, unint64_t a2)
{
  float v2;
  unint64_t v3;
  float v4;
  unint64_t i;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  uint64_t v12;
  float v13;
  float v14;

  v2 = *(float *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(float *)(a2 - 16);
  if (*(float *)a1 >= v4 && (v4 < v2 || v3 >= *(_QWORD *)(a2 - 8)))
  {
    for (i = a1 + 16; i < a2 && v2 >= *(float *)i && (*(float *)i < v2 || v3 >= *(_QWORD *)(i + 8)); i += 16)
      ;
  }
  else
  {
    i = a1;
    do
    {
      v6 = *(float *)(i + 16);
      i += 16;
      v7 = v6;
    }
    while (v2 >= v6 && (v7 < v2 || v3 >= *(_QWORD *)(i + 8)));
  }
  if (i < a2)
  {
    for (a2 -= 16; v2 < v4 || v4 >= v2 && v3 < *(_QWORD *)(a2 + 8); a2 -= 16)
    {
      v8 = *(float *)(a2 - 16);
      v4 = v8;
    }
  }
  if (i < a2)
  {
    v9 = *(float *)i;
    v10 = *(float *)a2;
    do
    {
      *(float *)i = v10;
      *(float *)a2 = v9;
      v11 = *(float *)(i + 16);
      i += 16;
      v9 = v11;
      v12 = *(_QWORD *)(i - 8);
      *(_QWORD *)(i - 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = v12;
      while (v2 >= v9 && (v9 < v2 || v3 >= *(_QWORD *)(i + 8)))
      {
        v13 = *(float *)(i + 16);
        i += 16;
        v9 = v13;
      }
      do
      {
        do
        {
          v14 = *(float *)(a2 - 16);
          a2 -= 16;
          v10 = v14;
        }
        while (v2 < v14);
      }
      while (v10 >= v2 && v3 < *(_QWORD *)(a2 + 8));
    }
    while (i < a2);
  }
  if (i - 16 != a1)
  {
    *(_DWORD *)a1 = *(_DWORD *)(i - 16);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(i - 8);
  }
  *(float *)(i - 16) = v2;
  *(_QWORD *)(i - 8) = v3;
  return i;
}

unint64_t std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,FIK::IKArrayIterator<std::pair<float,unsigned long>>,std::__less<void,void> &>(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  float v3;
  unint64_t v4;
  float v5;
  unint64_t v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  float v16;
  float v17;

  v2 = 0;
  v3 = *(float *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  while (1)
  {
    v5 = *(float *)(a1 + v2 + 16);
    if (v5 >= v3 && (v3 < v5 || *(_QWORD *)(a1 + v2 + 24) >= v4))
      break;
    v2 += 16;
  }
  v6 = a1 + v2 + 16;
  if (v2)
  {
    do
    {
      v7 = *(float *)(a2 - 16);
      a2 -= 16;
      v8 = v7;
    }
    while (v7 >= v3 && (v3 < v8 || *(_QWORD *)(a2 + 8) >= v4));
  }
  else
  {
LABEL_19:
    if (v6 < a2)
    {
      do
      {
        v9 = *(float *)(a2 - 16);
        a2 -= 16;
        v10 = v9;
        if (v9 < v3)
          break;
        if (v3 < v10)
          goto LABEL_19;
      }
      while (*(_QWORD *)(a2 + 8) >= v4 && v6 < a2);
    }
  }
  if (v6 >= a2)
  {
    v13 = a1 + v2 + 16;
  }
  else
  {
    v12 = *(float *)a2;
    v13 = a1 + v2 + 16;
    v14 = a2;
    do
    {
      *(float *)v13 = v12;
      *(float *)v14 = v5;
      v15 = *(_QWORD *)(v13 + 8);
      *(_QWORD *)(v13 + 8) = *(_QWORD *)(v14 + 8);
      *(_QWORD *)(v14 + 8) = v15;
      do
      {
        do
        {
          v16 = *(float *)(v13 + 16);
          v13 += 16;
          v5 = v16;
        }
        while (v16 < v3);
      }
      while (v3 >= v5 && *(_QWORD *)(v13 + 8) < v4);
      do
      {
        v17 = *(float *)(v14 - 16);
        v14 -= 16;
        v12 = v17;
      }
      while (v17 >= v3 && (v3 < v12 || *(_QWORD *)(v14 + 8) >= v4));
    }
    while (v13 < v14);
  }
  if (v13 - 16 != a1)
  {
    *(_DWORD *)a1 = *(_DWORD *)(v13 - 16);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(v13 - 8);
  }
  *(float *)(v13 - 16) = v3;
  *(_QWORD *)(v13 - 8) = v4;
  return v13 - 16;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<std::pair<float,unsigned long>>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  float v6;
  float v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  float v14;
  float v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  unint64_t v21;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(float *)(a2 - 16);
      v7 = *(float *)a1;
      if (v6 < *(float *)a1)
      {
        v8 = *(_QWORD *)(a1 + 8);
        v9 = *(_QWORD *)(a2 - 8);
LABEL_29:
        *(float *)a1 = v6;
        *(float *)(a2 - 16) = v7;
        *(_QWORD *)(a1 + 8) = v9;
        *(_QWORD *)(a2 - 8) = v8;
        return result;
      }
      if (v7 >= v6)
      {
        v9 = *(_QWORD *)(a2 - 8);
        v8 = *(_QWORD *)(a1 + 8);
        if (v9 < v8)
          goto LABEL_29;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<std::pair<float,unsigned long>>>(a1, a1 + 16, a2 - 16);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<std::pair<float,unsigned long>>>(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<std::pair<float,unsigned long>>>(a1, a1 + 16, a1 + 32, a1 + 48, a2 - 16);
      return 1;
    default:
      v10 = a1 + 32;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<std::pair<float,unsigned long>>>(a1, a1 + 16, a1 + 32);
      v11 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
LABEL_6:
  v14 = *(float *)v11;
  v15 = *(float *)v10;
  if (*(float *)v11 >= *(float *)v10)
  {
    if (v15 < v14)
      goto LABEL_19;
    v16 = *(_QWORD *)(v11 + 8);
    v17 = *(_QWORD *)(v10 + 8);
    if (v16 >= v17)
      goto LABEL_19;
  }
  else
  {
    v16 = *(_QWORD *)(v11 + 8);
    v17 = *(_QWORD *)(v10 + 8);
  }
  *(float *)v11 = v15;
  *(_QWORD *)(v11 + 8) = v17;
  if (v10 == a1)
  {
LABEL_17:
    v10 = a1;
    goto LABEL_18;
  }
  v18 = v12;
  while (1)
  {
    v19 = a1 + v18;
    v20 = *(float *)(a1 + v18 + 16);
    if (v14 >= v20)
    {
      if (v20 < v14)
        goto LABEL_18;
      v21 = *(_QWORD *)(a1 + v18 + 24);
      if (v16 >= v21)
      {
        v10 = a1 + v18 + 32;
LABEL_18:
        *(float *)v10 = v14;
        *(_QWORD *)(v10 + 8) = v16;
        if (++v13 == 8)
          return v11 + 16 == a2;
LABEL_19:
        v10 = v11;
        v12 += 16;
        v11 += 16;
        if (v11 == a2)
          return 1;
        goto LABEL_6;
      }
    }
    else
    {
      v21 = *(_QWORD *)(v19 + 24);
    }
    v10 -= 16;
    *(float *)(v19 + 32) = v20;
    *(_QWORD *)(a1 + v18 + 40) = v21;
    v18 -= 16;
    if (v18 == -32)
      goto LABEL_17;
  }
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<std::pair<float,unsigned long>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  float v9;
  float v10;
  unint64_t v11;
  unint64_t v12;
  float v13;
  float v14;
  unint64_t v15;
  unint64_t v16;
  float v17;
  float v18;
  unint64_t v19;
  unint64_t v20;

  result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<std::pair<float,unsigned long>>>(a1, a2, a3);
  v9 = *(float *)a4;
  v10 = *(float *)a3;
  if (*(float *)a4 >= *(float *)a3)
  {
    if (v10 < v9)
      return result;
    v12 = *(_QWORD *)(a4 + 8);
    v11 = *(_QWORD *)(a3 + 8);
    if (v12 >= v11)
      return result;
  }
  else
  {
    v11 = *(_QWORD *)(a3 + 8);
    v12 = *(_QWORD *)(a4 + 8);
  }
  *(float *)a3 = v9;
  *(float *)a4 = v10;
  *(_QWORD *)(a3 + 8) = v12;
  *(_QWORD *)(a4 + 8) = v11;
  v13 = *(float *)a3;
  v14 = *(float *)a2;
  if (*(float *)a3 >= *(float *)a2)
  {
    if (v14 < v13)
      return result;
    v16 = *(_QWORD *)(a3 + 8);
    v15 = *(_QWORD *)(a2 + 8);
    if (v16 >= v15)
      return result;
  }
  else
  {
    v15 = *(_QWORD *)(a2 + 8);
    v16 = *(_QWORD *)(a3 + 8);
  }
  *(float *)a2 = v13;
  *(float *)a3 = v14;
  *(_QWORD *)(a2 + 8) = v16;
  *(_QWORD *)(a3 + 8) = v15;
  v17 = *(float *)a2;
  v18 = *(float *)a1;
  if (*(float *)a2 < *(float *)a1)
  {
    v19 = *(_QWORD *)(a1 + 8);
    v20 = *(_QWORD *)(a2 + 8);
LABEL_15:
    *(float *)a1 = v17;
    *(float *)a2 = v18;
    *(_QWORD *)(a1 + 8) = v20;
    *(_QWORD *)(a2 + 8) = v19;
    return result;
  }
  if (v18 >= v17)
  {
    v20 = *(_QWORD *)(a2 + 8);
    v19 = *(_QWORD *)(a1 + 8);
    if (v20 < v19)
      goto LABEL_15;
  }
  return result;
}

uint64_t std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<std::pair<float,unsigned long>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  float v11;
  float v12;
  unint64_t v13;
  unint64_t v14;
  float v15;
  float v16;
  unint64_t v17;
  unint64_t v18;
  float v19;
  float v20;
  unint64_t v21;
  unint64_t v22;
  float v23;
  float v24;
  unint64_t v25;
  unint64_t v26;

  result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<std::pair<float,unsigned long>>>(a1, a2, a3, a4);
  v11 = *(float *)a5;
  v12 = *(float *)a4;
  if (*(float *)a5 >= *(float *)a4)
  {
    if (v12 < v11)
      return result;
    v14 = *(_QWORD *)(a5 + 8);
    v13 = *(_QWORD *)(a4 + 8);
    if (v14 >= v13)
      return result;
  }
  else
  {
    v13 = *(_QWORD *)(a4 + 8);
    v14 = *(_QWORD *)(a5 + 8);
  }
  *(float *)a4 = v11;
  *(float *)a5 = v12;
  *(_QWORD *)(a4 + 8) = v14;
  *(_QWORD *)(a5 + 8) = v13;
  v15 = *(float *)a4;
  v16 = *(float *)a3;
  if (*(float *)a4 >= *(float *)a3)
  {
    if (v16 < v15)
      return result;
    v18 = *(_QWORD *)(a4 + 8);
    v17 = *(_QWORD *)(a3 + 8);
    if (v18 >= v17)
      return result;
  }
  else
  {
    v17 = *(_QWORD *)(a3 + 8);
    v18 = *(_QWORD *)(a4 + 8);
  }
  *(float *)a3 = v15;
  *(float *)a4 = v16;
  *(_QWORD *)(a3 + 8) = v18;
  *(_QWORD *)(a4 + 8) = v17;
  v19 = *(float *)a3;
  v20 = *(float *)a2;
  if (*(float *)a3 >= *(float *)a2)
  {
    if (v20 < v19)
      return result;
    v22 = *(_QWORD *)(a3 + 8);
    v21 = *(_QWORD *)(a2 + 8);
    if (v22 >= v21)
      return result;
  }
  else
  {
    v21 = *(_QWORD *)(a2 + 8);
    v22 = *(_QWORD *)(a3 + 8);
  }
  *(float *)a2 = v19;
  *(float *)a3 = v20;
  *(_QWORD *)(a2 + 8) = v22;
  *(_QWORD *)(a3 + 8) = v21;
  v23 = *(float *)a2;
  v24 = *(float *)a1;
  if (*(float *)a2 < *(float *)a1)
  {
    v25 = *(_QWORD *)(a1 + 8);
    v26 = *(_QWORD *)(a2 + 8);
LABEL_9:
    *(float *)a1 = v23;
    *(float *)a2 = v24;
    *(_QWORD *)(a1 + 8) = v26;
    *(_QWORD *)(a2 + 8) = v25;
    return result;
  }
  if (v24 >= v23)
  {
    v26 = *(_QWORD *)(a2 + 8);
    v25 = *(_QWORD *)(a1 + 8);
    if (v26 < v25)
      goto LABEL_9;
  }
  return result;
}

uint64_t std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<std::pair<float,unsigned long>>,FIK::IKArrayIterator<std::pair<float,unsigned long>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  uint64_t v22;

  if (a1 != a2)
  {
    v8 = a2 - a1;
    v9 = (a2 - a1) >> 4;
    if (a2 - a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = a1 + 16 * v10;
      do
      {
        std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<std::pair<float,unsigned long>>>(a1, a4, v9, v12);
        v12 -= 16;
        --v11;
      }
      while (v11);
    }
    if (a2 != a3)
    {
      v13 = a2;
      while (1)
      {
        v14 = *(float *)v13;
        v15 = *(float *)a1;
        if (*(float *)v13 >= *(float *)a1)
        {
          if (v15 < v14)
            goto LABEL_12;
          v16 = *(_QWORD *)(v13 + 8);
          v17 = *(_QWORD *)(a1 + 8);
          if (v16 >= v17)
            goto LABEL_12;
        }
        else
        {
          v16 = *(_QWORD *)(v13 + 8);
          v17 = *(_QWORD *)(a1 + 8);
        }
        *(float *)v13 = v15;
        *(float *)a1 = v14;
        *(_QWORD *)(v13 + 8) = v17;
        *(_QWORD *)(a1 + 8) = v16;
        std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<std::pair<float,unsigned long>>>(a1, a4, v9, a1);
LABEL_12:
        v13 += 16;
        if (v13 == a3)
          goto LABEL_15;
      }
    }
    a3 = a2;
LABEL_15:
    if (v8 >= 17)
    {
      v18 = (unint64_t)v8 >> 4;
      v19 = a2 - 16;
      do
      {
        v20 = *(float *)a1;
        v21 = *(_QWORD *)(a1 + 8);
        std::__floyd_sift_down[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<std::pair<float,unsigned long>>>(a1, a4, v18);
        if (v19 == v22)
        {
          *(float *)v22 = v20;
          *(_QWORD *)(v22 + 8) = v21;
        }
        else
        {
          *(_DWORD *)v22 = *(_DWORD *)v19;
          *(_QWORD *)(v22 + 8) = *(_QWORD *)(v19 + 8);
          *(float *)v19 = v20;
          *(_QWORD *)(v19 + 8) = v21;
          std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<std::pair<float,unsigned long>>>(a1, v22 + 16, a4, (v22 + 16 - a1) >> 4);
        }
        v19 -= 16;
      }
      while (v18-- > 2);
    }
  }
  return a3;
}

uint64_t std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<std::pair<float,unsigned long>>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  float v8;
  float v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  unint64_t v17;

  if (a3 >= 2)
  {
    v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= (a4 - result) >> 4)
    {
      v5 = ((a4 - result) >> 3) | 1;
      v6 = result + 16 * v5;
      if (v5 + 1 < a3)
      {
        v7 = *(float *)(v6 + 16);
        if (*(float *)v6 < v7 || v7 >= *(float *)v6 && *(_QWORD *)(result + 16 * v5 + 8) < *(_QWORD *)(v6 + 24))
        {
          v6 += 16;
          ++v5;
        }
      }
      v8 = *(float *)v6;
      v9 = *(float *)a4;
      if (*(float *)v6 >= *(float *)a4)
      {
        if (v9 >= v8)
        {
          v11 = *(_QWORD *)(v6 + 8);
          v10 = *(_QWORD *)(a4 + 8);
          if (v11 < v10)
            return result;
        }
        else
        {
          v10 = *(_QWORD *)(a4 + 8);
          v11 = *(_QWORD *)(v6 + 8);
        }
        *(float *)a4 = v8;
        *(_QWORD *)(a4 + 8) = v11;
        if (v4 >= v5)
        {
          while (1)
          {
            v13 = 2 * v5;
            v5 = (2 * v5) | 1;
            v12 = result + 16 * v5;
            v14 = v13 + 2;
            if (v14 < a3)
            {
              v15 = *(float *)(v12 + 16);
              if (*(float *)v12 < v15
                || v15 >= *(float *)v12 && *(_QWORD *)(result + 16 * v5 + 8) < *(_QWORD *)(v12 + 24))
              {
                v12 += 16;
                v5 = v14;
              }
            }
            v16 = *(float *)v12;
            if (*(float *)v12 < v9)
              break;
            v17 = *(_QWORD *)(v12 + 8);
            if (v9 >= v16 && v17 < v10)
              break;
            *(float *)v6 = v16;
            *(_QWORD *)(v6 + 8) = v17;
            v6 = v12;
            if (v4 < v5)
              goto LABEL_14;
          }
        }
        v12 = v6;
LABEL_14:
        *(float *)v12 = v9;
        *(_QWORD *)(v12 + 8) = v10;
      }
    }
  }
  return result;
}

float std::__floyd_sift_down[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<std::pair<float,unsigned long>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float result;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  do
  {
    v6 = a1;
    v7 = v3 + 1;
    a1 += 16 * (v3 + 1);
    v8 = 2 * v3;
    v3 = (2 * v3) | 1;
    v9 = v8 + 2;
    if (v9 < a3)
    {
      v10 = *(float *)(a1 + 16);
      if (*(float *)a1 < v10 || v10 >= *(float *)a1 && *(_QWORD *)(v6 + 16 * v7 + 8) < *(_QWORD *)(a1 + 24))
      {
        a1 += 16;
        v3 = v9;
      }
    }
    result = *(float *)a1;
    *(_DWORD *)v6 = *(_DWORD *)a1;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(a1 + 8);
  }
  while (v3 <= v5);
  return result;
}

uint64_t std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<std::pair<float,unsigned long>>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  float v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  unint64_t v15;
  BOOL v16;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = v4 >> 1;
    v6 = result + 16 * (v4 >> 1);
    v7 = *(float *)v6;
    v8 = *(float *)(a2 - 16);
    if (*(float *)v6 >= v8)
    {
      if (v8 < v7)
        return result;
      v10 = *(_QWORD *)(result + 16 * v5 + 8);
      v9 = *(_QWORD *)(a2 - 8);
      if (v10 >= v9)
        return result;
    }
    else
    {
      v9 = *(_QWORD *)(a2 - 8);
      v10 = *(_QWORD *)(v6 + 8);
    }
    *(float *)(a2 - 16) = v7;
    *(_QWORD *)(a2 - 8) = v10;
    if (v4 >= 2)
    {
      while (1)
      {
        v12 = v5 - 1;
        if (v5 < 1)
          v12 = v5;
        v13 = v12 >> 1;
        v11 = result + 16 * (v12 >> 1);
        v14 = *(float *)v11;
        if (*(float *)v11 >= v8)
        {
          if (v8 < v14)
            break;
          v15 = *(_QWORD *)(result + 16 * v13 + 8);
          if (v15 >= v9)
            break;
        }
        else
        {
          v15 = *(_QWORD *)(v11 + 8);
        }
        *(float *)v6 = v14;
        *(_QWORD *)(v6 + 8) = v15;
        v6 = v11;
        v16 = (unint64_t)v5 > 2;
        v5 = v13;
        if (!v16)
          goto LABEL_15;
      }
    }
    v11 = v6;
LABEL_15:
    *(float *)v11 = v8;
    *(_QWORD *)(v11 + 8) = v9;
  }
  return result;
}

uint64_t **std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::pair<int const,unsigned long>>(uint64_t **a1, int *a2, _OWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  uint64_t **v8;
  int v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 8);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v10 + 2) = *a3;
    std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t **std::__tree<std::__value_type<int,FIK::IKArray<unsigned long>>,std::__map_value_compare<int,std::__value_type<int,FIK::IKArray<unsigned long>>,std::less<int>,true>,std::allocator<std::__value_type<int,FIK::IKArray<unsigned long>>>>::__emplace_unique_key_args<int,std::pair<int const,FIK::IKArray<unsigned long>>>(uint64_t **a1, int *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  uint64_t **v8;
  int v9;
  char *v10;
  __int128 v11;
  __int128 v12;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 8);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (char *)operator new(0x48uLL);
    *((_DWORD *)v10 + 8) = *(_DWORD *)a3;
    v11 = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_OWORD *)(v10 + 40) = v11;
    v12 = *(_OWORD *)(a3 + 24);
    *(_QWORD *)(a3 + 24) = 0;
    *(_OWORD *)(v10 + 56) = v12;
    std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__insert_node_at(a1, (uint64_t)v8, v6, (uint64_t *)v10);
    return (uint64_t **)v10;
  }
  return v8;
}

_QWORD *FIK::GenericSolver::initEstimationSolver(FIK::GenericSolver *this)
{
  _QWORD *result;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t i;
  uint64_t v8;
  int v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];
  uint64_t v17;
  _QWORD *v18;
  __int128 v19;
  char v20;

  result = FIK::defaultAllocator(this);
  v16[0] = 0;
  v16[1] = 0;
  v17 = 0;
  v18 = result;
  v3 = *((_QWORD *)this + 46);
  if (v3)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    for (i = 0; i < v3; ++i)
    {
      v8 = *((_QWORD *)this + 48) + v4;
      v9 = *(unsigned __int8 *)(v8 + 233);
      v10 = *(unsigned __int8 *)(v8 + 52);
      if (v9)
        v11 = v10 == 0;
      else
        v11 = 0;
      if (v11)
      {
        result = FIK::IKArray<FIK::Segment *>::reserve(v16, v6 + 1);
        v5 = v17;
        *(_QWORD *)(v17 + 8 * v16[0]) = i;
        v6 = ++v16[0];
        v3 = *((_QWORD *)this + 46);
      }
      v4 += 240;
    }
    if (v6)
    {
      v12 = operator new();
      LOBYTE(v19) = 0;
      v20 = 0;
      FIK::GenericSolver::GenericSolver(v12, (uint64_t)this + 192, &v19);
      result = (_QWORD *)*((_QWORD *)this + 66);
      *((_QWORD *)this + 66) = v12;
      if (result)
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      v5 = v17;
      if (v16[0])
      {
        v13 = 0;
        v14 = *((_QWORD *)this + 9);
        v15 = 8 * v16[0];
        do
        {
          *(_BYTE *)(v14 + 576 * *(_QWORD *)(v5 + v13) + 288) = 1;
          v13 += 8;
        }
        while (v15 != v13);
      }
    }
    v16[0] = 0;
    if (v5)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, _QWORD, uint64_t))(*v18 + 24))(v18, v5, 0, 8);
  }
  return result;
}

void FIK::GenericSolver::initNode(uint64_t a1, uint64_t a2)
{
  int v4;
  FIK *v5;
  void (***v6)(FIK::CrtAllocator *__hidden);
  uint64_t v7;
  signed int v8;
  const FIK::RigBone *v9;
  uint64_t v10;
  signed int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __n128 v17;
  uint64_t RootSegment;
  uint64_t v19;
  signed int v20;
  const FIK::RigBone *v21;
  uint64_t v22;
  signed int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31[3];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v4 = *(unsigned __int8 *)(a2 + 16);
  v5 = (FIK *)operator new();
  v6 = FIK::defaultAllocator(v5);
  FIK::IKSolver::IKSolver(v5, (FIK::Allocator *)v6);
  *(_QWORD *)(a1 + 176) = v5;
  if (v4)
  {
    if (!*(_BYTE *)(a2 + 16))
      goto LABEL_34;
    FIK::GenericSolver::ConstructImportBones(a1, *(_QWORD *)a2, v31);
    FIK::IKSolver::importBones((__n128 **)v5, (unint64_t *)v31);
    FIK::IKArray<FIK::ImportBone>::~IKArray(v31);
    FIK::GenericSolver::SetSolverProperties(a1, (float32x4_t *)(a1 + 256));
    v7 = *(_QWORD *)(a1 + 400);
    if (v7)
    {
      v8 = 0;
      v9 = *(const FIK::RigBone **)(a1 + 416);
      v10 = v7 << 8;
      do
      {
        v11 = v8 + 1;
        FIK::GenericSolver::SetBoneProperties((FIK::GenericSolver *)a1, v8, v9);
        v9 = (const FIK::RigBone *)((char *)v9 + 256);
        v8 = v11;
        v10 -= 256;
      }
      while (v10);
    }
    v12 = *(_QWORD *)(a1 + 368);
    if (v12)
    {
      v13 = *(_QWORD *)(a1 + 384);
      v14 = 240 * v12;
      do
      {
        FIK::RTGameTask::RTGameTask(v31, v13);
        FIK::RTGameTask::AddSolverTask((FIK::RTGameTask *)v31, *(FIK::Solver ***)(a1 + 176));
        FIK::IKArray<FIK::RTGameTask>::push_back<FIK::RTGameTask&,void>(a1 + 56, (const FIK::RTGameTask *)v31);
        if (v39)
        {
          (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v40 + 24))(v40, v38, 0, 8);
          v38 = 0;
          v39 = 0;
        }
        if (v36)
        {
          (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v37 + 24))(v37, v35, 0, 8);
          v35 = 0;
          v36 = 0;
        }
        v31[0] = (uint64_t)&unk_24CA6C6F8;
        if (v33)
          (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v34 + 24))(v34, v32, 0, 8);
        v13 += 240;
        v14 -= 240;
      }
      while (v14);
    }
    *(_DWORD *)(a1 + 96) = *(_DWORD *)(a1 + 320);
    v15 = *(_OWORD *)(a1 + 336);
    v16 = *(_OWORD *)(a1 + 352);
    *(_DWORD *)(a1 + 99) = *(_DWORD *)(a1 + 323);
    *(_OWORD *)(a1 + 112) = v15;
    *(_OWORD *)(a1 + 128) = v16;
    *(_QWORD *)(a1 + 144) = 0;
    *(_OWORD *)(a1 + 160) = 0u;
    FIK::RTBalanceTask::AddSolverTask(a1 + 96, *(FIK::Solver ***)(a1 + 176), *(_DWORD *)(a1 + 284));
    if (*(_BYTE *)(a1 + 280))
    {
      RootSegment = FIK::IKSolver::getRootSegment(*(FIK::IKSolver **)(a1 + 176));
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)RootSegment + 144))(RootSegment, 1, 1, 1);
      FIK::IKSolver::translateRoot(*(FIK::Solver ***)(a1 + 176), 1);
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)RootSegment + 160))(RootSegment, 1, 0);
      v17.n128_f64[0] = (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)RootSegment + 120))(RootSegment, 0);
    }
    FIK::IKSolver::setup(*(FIK::Solver ***)(a1 + 176), v17);
    if (!*(_BYTE *)(a2 + 16))
LABEL_34:
      std::__throw_bad_optional_access[abi:nn180100]();
    FIK::GenericSolver::InitPrevTaskTargets(a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    FIK::GenericSolver::ConstructImportBones((_anonymous_namespace_ **)a1, v31);
    FIK::IKSolver::importBones((__n128 **)v5, (unint64_t *)v31);
    FIK::IKArray<FIK::ImportBone>::~IKArray(v31);
    FIK::GenericSolver::SetSolverProperties(a1, (float32x4_t *)(a1 + 256));
    v19 = *(_QWORD *)(a1 + 400);
    if (v19)
    {
      v20 = 0;
      v21 = *(const FIK::RigBone **)(a1 + 416);
      v22 = v19 << 8;
      do
      {
        v23 = v20 + 1;
        FIK::GenericSolver::SetBoneProperties((FIK::GenericSolver *)a1, v20, v21);
        v21 = (const FIK::RigBone *)((char *)v21 + 256);
        v20 = v23;
        v22 -= 256;
      }
      while (v22);
    }
    v24 = *(_QWORD *)(a1 + 368);
    if (v24)
    {
      v25 = *(_QWORD *)(a1 + 384);
      v26 = 240 * v24;
      do
      {
        FIK::RTGameTask::RTGameTask(v31, v25);
        FIK::RTGameTask::AddSolverTask((FIK::RTGameTask *)v31, *(FIK::Solver ***)(a1 + 176));
        FIK::IKArray<FIK::RTGameTask>::push_back<FIK::RTGameTask&,void>(a1 + 56, (const FIK::RTGameTask *)v31);
        if (v39)
        {
          (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v40 + 24))(v40, v38, 0, 8);
          v38 = 0;
          v39 = 0;
        }
        if (v36)
        {
          (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v37 + 24))(v37, v35, 0, 8);
          v35 = 0;
          v36 = 0;
        }
        v31[0] = (uint64_t)&unk_24CA6C6F8;
        if (v33)
          (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v34 + 24))(v34, v32, 0, 8);
        v25 += 240;
        v26 -= 240;
      }
      while (v26);
    }
    *(_DWORD *)(a1 + 96) = *(_DWORD *)(a1 + 320);
    v27 = *(_OWORD *)(a1 + 336);
    v28 = *(_OWORD *)(a1 + 352);
    *(_DWORD *)(a1 + 99) = *(_DWORD *)(a1 + 323);
    *(_OWORD *)(a1 + 112) = v27;
    *(_OWORD *)(a1 + 128) = v28;
    *(_QWORD *)(a1 + 144) = 0;
    *(_OWORD *)(a1 + 160) = 0u;
    FIK::RTBalanceTask::AddSolverTask(a1 + 96, *(FIK::Solver ***)(a1 + 176), *(_DWORD *)(a1 + 284));
    if (*(_BYTE *)(a1 + 280))
    {
      v30 = FIK::IKSolver::getRootSegment(*(FIK::IKSolver **)(a1 + 176));
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v30 + 144))(v30, 1, 1, 1);
      FIK::IKSolver::translateRoot(*(FIK::Solver ***)(a1 + 176), 1);
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v30 + 160))(v30, 1, 0);
      v29.n128_f64[0] = (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)v30 + 120))(v30, 0);
    }
    FIK::IKSolver::setup(*(FIK::Solver ***)(a1 + 176), v29);
  }
}

__n128 FIK::GenericSolver::InitPrevTaskTargets(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 result;
  __int128 v10;

  v3 = *(_QWORD *)(a1 + 56);
  if (v3)
  {
    v6 = *(_QWORD *)(a1 + 72);
    v7 = v6 + 576 * v3;
    v8 = a1 + 192;
    do
    {
      FIK::RTGameTask::GenerateAnimTarget((float32x4_t *)v6, a2, a3, v8);
      result = *(__n128 *)(v6 + 464);
      v10 = *(_OWORD *)(v6 + 480);
      *(__n128 *)(v6 + 512) = result;
      *(_OWORD *)(v6 + 528) = v10;
      v6 += 576;
    }
    while (v6 != v7);
  }
  return result;
}

uint64_t FIK::GenericSolver::GenericSolver(uint64_t a1, uint64_t a2, __int128 *a3)
{
  void (***v6)(FIK::CrtAllocator *__hidden);
  __int128 v7;
  __int128 v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t *v13;
  __int128 v14;
  uint64_t v15;

  *(_QWORD *)a1 = &off_24CA6B9C8;
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 32) = xmmword_210802BA0;
  *(_DWORD *)(a1 + 48) = 1015222895;
  v6 = FIK::defaultAllocator((FIK *)a1);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = v6;
  *(_DWORD *)(a1 + 96) = 1;
  *(_WORD *)(a1 + 100) = 257;
  *(_BYTE *)(a1 + 102) = 1;
  *(_OWORD *)(a1 + 112) = xmmword_2108040D0;
  *(_OWORD *)(a1 + 128) = xmmword_2108040E0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  IKString::IKString((IKString *)(a1 + 192), (const IKString *)a2);
  v7 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 228) = *(_OWORD *)(a2 + 36);
  *(_OWORD *)(a1 + 216) = v7;
  v8 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 272) = v8;
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 96);
  v9 = *(_DWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 312) = v9;
  v10 = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(v11 + 131) = *(_DWORD *)(a2 + 131);
  *(_DWORD *)(a1 + 320) = v10;
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 160);
  FIK::IKArray<FIK::GameTask>::IKArray((_QWORD *)(a1 + 368), (_QWORD *)(a2 + 176));
  FIK::IKArray<FIK::RigBone>::IKArray((_QWORD *)(a1 + 400), (_QWORD *)(a2 + 208));
  FIK::IKArray<IKString>::IKArray((_QWORD *)(a1 + 432), (_QWORD *)(a2 + 240));
  FIK::IKArray<int>::IKArray((_QWORD *)(a1 + 464), (_QWORD *)(a2 + 272));
  FIK::IKArray<FIK::AimSetup>::IKArray((_QWORD *)(a1 + 496), (_QWORD *)(a2 + 304));
  *(_QWORD *)(a1 + 528) = 0;
  if (*(int *)(a1 + 400) <= 0)
  {
    v13 = ikinemaLogObject();
    ikinemaAssertHandler(*v13, 1, (uint64_t)"GenericSolver", "(GetNumBones() > 0) The solver must contain bones");
  }
  *(_DWORD *)(a1 + 268) = 15;
  v14 = *a3;
  v15 = *((_QWORD *)a3 + 2);
  FIK::GenericSolver::initNode(a1, (uint64_t)&v14);
  return a1;
}

uint64_t FIK::GenericSolver::GetNumBones(FIK::GenericSolver *this)
{
  return *((unsigned int *)this + 100);
}

uint64_t FIK::GenericSolver::GenericSolver(uint64_t a1, uint64_t a2)
{
  void (***v4)(FIK::CrtAllocator *__hidden);
  __int128 v5;
  __int128 v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t *v11;
  _BYTE v12[24];

  *(_QWORD *)a1 = &off_24CA6B9C8;
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 32) = xmmword_210802BA0;
  *(_DWORD *)(a1 + 48) = 1015222895;
  v4 = FIK::defaultAllocator((FIK *)a1);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = v4;
  *(_DWORD *)(a1 + 96) = 1;
  *(_WORD *)(a1 + 100) = 257;
  *(_BYTE *)(a1 + 102) = 1;
  *(_OWORD *)(a1 + 112) = xmmword_2108040D0;
  *(_OWORD *)(a1 + 128) = xmmword_2108040E0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  IKString::IKString((IKString *)(a1 + 192), (const IKString *)a2);
  v5 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 228) = *(_OWORD *)(a2 + 36);
  *(_OWORD *)(a1 + 216) = v5;
  v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 272) = v6;
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 96);
  v7 = *(_DWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 312) = v7;
  v8 = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(v9 + 131) = *(_DWORD *)(a2 + 131);
  *(_DWORD *)(a1 + 320) = v8;
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 160);
  FIK::IKArray<FIK::GameTask>::IKArray((_QWORD *)(a1 + 368), (_QWORD *)(a2 + 176));
  FIK::IKArray<FIK::RigBone>::IKArray((_QWORD *)(a1 + 400), (_QWORD *)(a2 + 208));
  FIK::IKArray<IKString>::IKArray((_QWORD *)(a1 + 432), (_QWORD *)(a2 + 240));
  FIK::IKArray<int>::IKArray((_QWORD *)(a1 + 464), (_QWORD *)(a2 + 272));
  FIK::IKArray<FIK::AimSetup>::IKArray((_QWORD *)(a1 + 496), (_QWORD *)(a2 + 304));
  *(_QWORD *)(a1 + 528) = 0;
  if (*(int *)(a1 + 400) <= 0)
  {
    v11 = ikinemaLogObject();
    ikinemaAssertHandler(*v11, 1, (uint64_t)"GenericSolver", "(GetNumBones() > 0) The solver must contain bones");
  }
  v12[0] = 0;
  v12[16] = 0;
  FIK::GenericSolver::initNode(a1, (uint64_t)v12);
  FIK::GenericSolver::initEstimationSolver((FIK::GenericSolver *)a1);
  return a1;
}

void FIK::GenericSolver::~GenericSolver(FIK::GenericSolver *this)
{
  FIK::IKSolver *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24CA6B9C8;
  v2 = (FIK::IKSolver *)*((_QWORD *)this + 22);
  if (v2)
  {
    FIK::IKSolver::~IKSolver(v2);
    MEMORY[0x212BCAFB4]();
  }
  *((_QWORD *)this + 22) = 0;
  v3 = *((_QWORD *)this + 66);
  *((_QWORD *)this + 66) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  FIK::IKArray<FIK::AimSetup>::~IKArray((uint64_t *)this + 62);
  *((_QWORD *)this + 58) = 0;
  v4 = *((_QWORD *)this + 60);
  if (v4)
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)this + 61) + 24))(*((_QWORD *)this + 61), v4, 0, 8);
  FIK::IKArray<IKString>::~IKArray((uint64_t)this + 432);
  FIK::IKArray<FIK::RigBone>::~IKArray((uint64_t *)this + 50);
  FIK::IKArray<FIK::GameTask>::~IKArray((uint64_t *)this + 46);
  if (*((_QWORD *)this + 25))
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 26) + 24))(*((_QWORD *)this + 26), *((_QWORD *)this + 24), 0, 8);
    *((_QWORD *)this + 24) = 0;
    *((_QWORD *)this + 25) = 0;
  }
  FIK::IKArray<FIK::RTGameTask>::~IKArray((uint64_t *)this + 7);
}

{
  FIK::GenericSolver::~GenericSolver(this);
  JUMPOUT(0x212BCAFB4);
}

uint64_t FIK::GenericSolver::GetTaskInstance(FIK::GenericSolver *this, int a2)
{
  return *((_QWORD *)this + 9) + 576 * a2;
}

uint64_t FIK::GenericSolver::GetTaskInstancePtr(FIK::GenericSolver *this, unsigned int a2)
{
  if ((a2 & 0x80000000) != 0 || *((_DWORD *)this + 14) <= (signed int)a2)
    return 0;
  else
    return *((_QWORD *)this + 9) + 576 * a2;
}

uint64_t FIK::GenericSolver::GetTasks(FIK::GenericSolver *this)
{
  return (uint64_t)this + 56;
}

uint64_t FIK::GenericSolver::AddTaskToSolver(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t (**v19)(FIK::RTGameTask *__hidden, const FIK::Transform *);
  __int128 v20;
  uint64_t v21[2];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  char v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _OWORD v50[4];
  int v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v19 = (uint64_t (**)(FIK::RTGameTask *__hidden, const FIK::Transform *))&unk_24CA6C6F8;
  v20 = *(_OWORD *)(a2 + 8);
  IKString::IKString(v21, (uint64_t *)(a2 + 24), *(_QWORD *)(a2 + 40));
  IKString::IKString(&v23, (uint64_t *)(a2 + 48), *(_QWORD *)(a2 + 64));
  IKString::IKString(&v26, (uint64_t *)(a2 + 72), *(_QWORD *)(a2 + 88));
  v29 = *(_OWORD *)(a2 + 96);
  v30 = *(_QWORD *)(a2 + 112);
  v4 = *(_OWORD *)(a2 + 144);
  v31 = *(_OWORD *)(a2 + 128);
  v32 = v4;
  v5 = *(_OWORD *)(a2 + 176);
  v33 = *(_OWORD *)(a2 + 160);
  v34 = v5;
  v6 = *(_OWORD *)(a2 + 208);
  v35 = *(_OWORD *)(a2 + 192);
  v36 = v6;
  v7 = *(_OWORD *)(a2 + 240);
  v37 = *(_OWORD *)(a2 + 224);
  v38 = v7;
  v8 = *(_OWORD *)(a2 + 272);
  v39 = *(_OWORD *)(a2 + 256);
  v40 = v8;
  v19 = &off_24CA6AB50;
  v41 = *(_BYTE *)(a2 + 288);
  v9 = *(_OWORD *)(a2 + 320);
  v42 = *(_OWORD *)(a2 + 304);
  v43 = v9;
  v10 = *(_OWORD *)(a2 + 352);
  v44 = *(_OWORD *)(a2 + 336);
  v45 = v10;
  v11 = *(_OWORD *)(a2 + 384);
  v46 = *(_OWORD *)(a2 + 368);
  v47 = v11;
  *(_QWORD *)((char *)v50 + 14) = *(_QWORD *)(a2 + 446);
  v13 = *(_OWORD *)(a2 + 416);
  v12 = *(_OWORD *)(a2 + 432);
  v48 = *(_OWORD *)(a2 + 400);
  v49 = v13;
  v14 = *(_OWORD *)(a2 + 464);
  v15 = *(_OWORD *)(a2 + 480);
  v50[0] = v12;
  v50[2] = v14;
  v50[3] = v15;
  v51 = *(_DWORD *)(a2 + 496);
  v16 = *(_OWORD *)(a2 + 528);
  v52 = *(_OWORD *)(a2 + 512);
  v53 = v16;
  v54 = *(_OWORD *)(a2 + 544);
  v55 = *(_QWORD *)(a2 + 560);
  v17 = FIK::GenericSolver::AddTaskToSolverInternal(a1, (uint64_t)&v19);
  if (v27)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v28 + 24))(v28, v26, 0, 8);
    v26 = 0;
    v27 = 0;
  }
  if (v24)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v25 + 24))(v25, v23, 0, 8);
    v23 = 0;
    v24 = 0;
  }
  v19 = (uint64_t (**)(FIK::RTGameTask *__hidden, const FIK::Transform *))&unk_24CA6C6F8;
  if (v21[1])
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v22 + 24))(v22, v21[0], 0, 8);
  return v17;
}

uint64_t FIK::GenericSolver::AddTaskToSolverInternal(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void **v5;
  size_t v6;
  void *v7;
  int v8;
  int v9;
  uint64_t result;
  _QWORD *Segment;

  v4 = a2 + 48;
  v5 = (void **)(a2 + 72);
  v6 = *(_QWORD *)(a2 + 80);
  if (v6)
    v7 = *v5;
  else
    v7 = &unk_2108059BE;
  v8 = FIK::IKRigUtils::getBoneIndex<FIK::RigBone,void>(v7, v6, (unsigned int *)(a1 + 400));
  v9 = FIK::IKRigUtils::GetTaskIndexByName<FIK::GameRig>(v4, a1 + 192);
  result = 0xFFFFFFFFLL;
  if (v9 == -1 && v8 != -1)
  {
    *(_DWORD *)(a2 + 96) = v8;
    if (FIK::RTGameTask::AddSolverTask((FIK::RTGameTask *)a2, *(FIK::Solver ***)(a1 + 176)))
    {
      Segment = FIK::IKSolver::getSegment(*(_QWORD ****)(a1 + 176), v5);
      *(_OWORD *)(a2 + 512) = *(_OWORD *)(*(uint64_t (**)(_QWORD *))(*Segment + 544))(Segment);
      *(_OWORD *)(a2 + 528) = *(_OWORD *)(*(uint64_t (**)(_QWORD *))(*Segment + 528))(Segment);
      FIK::IKArray<FIK::GameTask>::push_back<FIK::RTGameTask &,void>(a1 + 368, a2);
      FIK::IKArray<FIK::RTGameTask>::push_back<FIK::RTGameTask,void>((_QWORD *)(a1 + 56), a2);
      return (*(_DWORD *)(a1 + 56) - 1);
    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

BOOL FIK::GenericSolver::RemoveTaskFromSolver(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  FIK::RTGameTask *v10;
  uint64_t v11;
  size_t v12;
  const void *v13;
  uint64_t v14;
  const void *v15;
  uint64_t v17[4];

  v4 = a1 + 56;
  FIK::IKArray<FIK::RTGameTask>::IKArray(v17, (_QWORD *)(a1 + 56));
  v5 = *(_QWORD *)(a1 + 56);
  if (v5)
  {
    v6 = *(_QWORD *)(a1 + 72);
    do
    {
      std::__destroy_at[abi:nn180100]<FIK::RTGameTask,0>(v6);
      v6 += 576;
      --v5;
    }
    while (v5);
  }
  *(_QWORD *)(a1 + 56) = 0;
  v7 = *(_QWORD *)(a1 + 368);
  if (v7)
  {
    v8 = *(_QWORD *)(a1 + 384);
    do
    {
      std::__destroy_at[abi:nn180100]<FIK::GameTask,0>(v8);
      v8 += 240;
      --v7;
    }
    while (v7);
  }
  *(_QWORD *)(a1 + 368) = 0;
  if (v17[0])
  {
    v9 = 0;
    v10 = (FIK::RTGameTask *)v17[2];
    v11 = 576 * v17[0];
    do
    {
      v12 = *(_QWORD *)(a2 + 8);
      if (v12)
        v13 = *(const void **)a2;
      else
        v13 = &unk_2108059BE;
      v14 = *((_QWORD *)v10 + 7);
      if (v14)
        v15 = (const void *)*((_QWORD *)v10 + 6);
      else
        v15 = &unk_2108059BE;
      if (v14 == v12 && !memcmp(v15, v13, v12))
      {
        v9 = FIK::RTGameTask::RemoveSolverTask(v10, *(FIK::Solver ***)(a1 + 176));
      }
      else
      {
        FIK::IKArray<FIK::RTGameTask>::push_back<FIK::RTGameTask&,void>(v4, v10);
        FIK::IKArray<FIK::GameTask>::push_back<FIK::RTGameTask &,void>(a1 + 368, (uint64_t)v10);
      }
      v10 = (FIK::RTGameTask *)((char *)v10 + 576);
      v11 -= 576;
    }
    while (v11);
  }
  else
  {
    v9 = 0;
  }
  FIK::IKArray<FIK::RTGameTask>::~IKArray(v17);
  return v9;
}

uint64_t FIK::IKArray<FIK::RTGameTask>::push_back<FIK::RTGameTask&,void>(uint64_t a1, const FIK::RTGameTask *a2)
{
  uint64_t result;

  FIK::IKArray<FIK::RTGameTask>::reserve(a1, *(_QWORD *)a1 + 1);
  result = FIK::RTGameTask::RTGameTask((FIK::RTGameTask *)(*(_QWORD *)(a1 + 16) + 576 * *(_QWORD *)a1), a2, *(FIK::Allocator **)(a1 + 24));
  ++*(_QWORD *)a1;
  return result;
}

void FIK::IKArray<FIK::GameTask>::push_back<FIK::RTGameTask &,void>(uint64_t a1, uint64_t a2)
{
  FIK::IKArray<FIK::GameTask>::reserve((uint64_t *)a1, *(_QWORD *)a1 + 1);
  FIK::GameTask::GameTask((FIK::RigTask *)(*(_QWORD *)(a1 + 16) + 240 * *(_QWORD *)a1), a2 + 48, *(FIK::Allocator **)(a1 + 24));
  ++*(_QWORD *)a1;
}

__n128 FIK::GenericSolver::SetWorldToSolverTransform(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_OWORD *)(a1 + 16) = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  *(__n128 *)(a1 + 32) = result;
  return result;
}

void FIK::GenericSolver::copyTaskTargetParamsTo(FIK::GenericSolver *this, FIK::GenericSolver *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  __n128 v10;

  if (*((_QWORD *)this + 7))
  {
    v4 = 0;
    v5 = 281;
    do
    {
      v6 = *((_QWORD *)this + 9);
      v7 = *((_QWORD *)a2 + 9) + v5 - 281;
      if (*(_BYTE *)(v6 + v5))
      {
        v8 = v6 + v5;
        v9 = *(float *)(v8 + 139);
        v10 = 0uLL;
        FIK::RTGameTask::SetLookAtTargetParams(v7, (_OWORD *)(v8 + 87), &v10, v9, 0.0);
      }
      else
      {
        FIK::RTGameTask::SetTargetParams(v7, (_OWORD *)(v6 + v5 + 55), *(float *)(v6 + v5 + 135), *(float *)(v6 + v5 + 139));
      }
      ++v4;
      v5 += 576;
    }
    while (*((_QWORD *)this + 7) > v4);
  }
}

uint64_t FIK::GenericSolver::configureAndSolve(uint64_t a1, uint64_t *a2)
{
  unsigned int v5;

  FIK::GenericSolver::ConfigureSegments(a1, a2);
  FIK::GenericSolver::ConfigureTaskTargets(a1, a2);
  v5 = 2;
  FIK::IKSolver::solve(*(FIK::Solver ***)(a1 + 176), *(_DWORD *)(a1 + 268), &v5);
  return v5;
}

uint64_t FIK::GenericSolver::ConfigureSegments(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t Segment;
  uint64_t v11;
  uint64_t *v12;

  v4 = a2[1];
  result = FIK::IKSolver::numSegments(*(FIK::IKSolver **)(a1 + 176));
  if (v4 != result)
  {
    v12 = ikinemaLogObject();
    result = ikinemaAssertHandler(*v12, 0, (uint64_t)"ConfigureSegments", "(PoseView.size() == Solver->numSegments()) Input pose must match solver skeleton");
  }
  if (*(int *)(a1 + 400) >= 1)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = *a2 + v7;
      Segment = FIK::IKSolver::getSegment(*(FIK::IKSolver **)(a1 + 176), v8);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)Segment + 200))(Segment, v9 + 16);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Segment + 400))(Segment);
      if ((result & 1) == 0)
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)Segment + 248))(Segment, v9);
      v11 = *(_QWORD *)(a1 + 416);
      if (*(_BYTE *)(v11 + v6 + 105) || *(_BYTE *)(v11 + v6 + 106) || *(_BYTE *)(v11 + v6 + 107))
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Segment + 832))(Segment);
      ++v8;
      v7 += 32;
      v6 += 256;
    }
    while (v8 < *(int *)(a1 + 400));
  }
  return result;
}

uint64_t FIK::GenericSolver::ConfigureTaskTargets(uint64_t result, uint64_t *a2)
{
  float32x4_t *v2;
  uint64_t v3;
  float32x4_t *v5;
  uint64_t v6;
  float32x4_t v7;
  double v8;

  v2 = (float32x4_t *)result;
  v3 = *(_QWORD *)(result + 56);
  if (v3)
  {
    v5 = *(float32x4_t **)(result + 72);
    v6 = 576 * v3;
    do
    {
      FIK::RTGameTask::GenerateAnimTarget(v5, *a2, a2[1], (uint64_t)&v2[12]);
      FIK::RTGameTask::ConvertTargetSpace(v5, v2->i32[2], v2 + 1, v7);
      FIK::RTGameTask::GenerateTarget((uint64_t)v5, a2, (uint64_t)&v2[12]);
      FIK::RTGameTask::DoAlphaBlend(v5);
      LODWORD(v8) = v2[3].i32[0];
      FIK::RTGameTask::BlendTaskTarget(v5, v8);
      result = FIK::RTGameTask::SetSolverTaskTarget((uint64_t)v5);
      v5 += 36;
      v6 -= 576;
    }
    while (v6);
  }
  if (v2[17].i32[3] == 1)
  {
    if (v2->i32[2] == 1)
      FIK::RTBalanceTask::ConvertTargetWorldToSolver(v2 + 6, v2 + 1);
    return FIK::RTBalanceTask::SetSolverTaskTarget((FIK::RTBalanceTask *)&v2[6]);
  }
  return result;
}

void FIK::GenericSolver::extractEstimatedPose(FIK::GenericSolver *this)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  NSObject *v11;
  uint8_t v12[4];
  _DWORD v13[7];

  *(_QWORD *)&v13[5] = *MEMORY[0x24BDAC8D0];
  if (*((_QWORD *)this + 7))
  {
    v2 = 0;
    v3 = *((_QWORD *)this + 66);
    v4 = 320;
    do
    {
      v5 = *((_QWORD *)this + 9);
      if (*(_BYTE *)(v5 + v4 - 32))
      {
        v6 = *(_QWORD *)(v3 + 72) + v4;
        v7 = *(char **)(v6 - 304);
        if ((v7 || (v7 = *(char **)(v6 - 312)) != 0)
          && (v8 = (*(uint64_t (**)(char *))(*(_QWORD *)&v7[*(_QWORD *)(*(_QWORD *)v7 - 264)] + 200))(&v7[*(_QWORD *)(*(_QWORD *)v7 - 264)])) != 0)
        {
          v9 = (_OWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 512))(v8);
          v10 = (_OWORD *)(v5 + v4);
          *(v10 - 1) = *v9;
          *v10 = v9[1];
        }
        else
        {
          v11 = ikinemaLogObject()[1];
          if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
            FIK::GenericSolver::extractEstimatedPose(v12, v13, v11);
        }
      }
      ++v2;
      v4 += 576;
    }
    while (*((_QWORD *)this + 7) > v2);
  }
}

uint64_t FIK::GenericSolver::Solve(FIK::GenericSolver *this, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t *v12;
  int v13;
  const char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (a2[1] != *((_DWORD *)this + 100))
  {
    v12 = ikinemaLogObject();
    ikinemaAssertHandler(*v12, 0, (uint64_t)"Solve", "(poseView.size() == GetNumBones()) Input animation must match solver skeleton");
  }
  v4 = *((_QWORD *)this + 66);
  if (v4)
  {
    FIK::GenericSolver::copyTaskTargetParamsTo(this, *((FIK::GenericSolver **)this + 66));
    v5 = FIK::GenericSolver::configureAndSolve(v4, a2);
    switch(v5)
    {
      case 2:
        v6 = ikinemaLogObject()[1];
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
          FIK::GenericSolver::Solve(v6, v7, v8);
        break;
      case 1:
        v9 = ikinemaLogObject()[1];
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          v13 = 136315138;
          v14 = "Solve";
          _os_log_impl(&dword_21078E000, v9, OS_LOG_TYPE_DEFAULT, "%s: Estimation solver auto-tune triggered.", (uint8_t *)&v13, 0xCu);
        }
        break;
      case 0:
        FIK::GenericSolver::extractEstimatedPose(this);
        break;
    }
  }
  if (!*((_QWORD *)this + 22))
    return 2;
  v10 = FIK::GenericSolver::configureAndSolve((uint64_t)this, a2);
  FIK::GenericSolver::PopulateOutArray((uint64_t)this, a2);
  return v10;
}

unint64_t FIK::GenericSolver::PopulateOutArray(uint64_t a1, _QWORD *a2)
{
  unint64_t result;
  uint64_t v5;
  unsigned int i;
  uint64_t Segment;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  _OWORD *v11;
  __int128 v12;

  result = FIK::IKSolver::numSegments(*(FIK::IKSolver **)(a1 + 176));
  if (result)
  {
    v5 = 0;
    for (i = 0; i < result; v5 = ++i)
    {
      Segment = FIK::IKSolver::getSegment(*(FIK::IKSolver **)(a1 + 176), i);
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Segment + 344))(Segment);
      *(_QWORD *)&v9 = *(_QWORD *)v8;
      DWORD2(v9) = *(_DWORD *)(v8 + 8);
      v12 = v9;
      v10 = *(_OWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)Segment + 312))(Segment);
      v11 = (_OWORD *)(*a2 + 32 * v5);
      *v11 = v12;
      v11[1] = v10;
      result = FIK::IKSolver::numSegments(*(FIK::IKSolver **)(a1 + 176));
    }
  }
  return result;
}

uint64_t FIK::GenericSolver::Solve(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD v4[2];

  v2 = *a2;
  v4[0] = a2[2];
  v4[1] = v2;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 32))(a1, v4);
}

uint64_t FIK::GenericSolver::SetSolverProperties(uint64_t a1, float32x4_t *a2)
{
  FIK::IKSolver::setZMP(*(float32x4_t ***)(a1 + 176), a2 + 2);
  FIK::IKSolver::useDefaultZMP(*(FIK::Solver ***)(a1 + 176), a2[3].u8[5]);
  FIK::IKSolver::setMomentsWeight(*(FIK::IKSolver **)(a1 + 176), a2[3].f32[0]);
  FIK::IKSolver::setTranslationWeight(*(FIK::IKSolver **)(a1 + 176), 1.0);
  FIK::IKSolver::setPrecision(*(FIK::Solver ***)(a1 + 176), a2[1].f32[0]);
  FIK::IKSolver::setFigureMass(*(float32x4_t ***)(a1 + 176), a2[3].f32[2]);
  FIK::IKSolver::setLimitsGain(*(FIK::Solver ***)(a1 + 176), a2[1].f32[1]);
  FIK::IKSolver::setPGain(*(FIK::IKSolver **)(a1 + 176), a2->f32[0]);
  FIK::IKSolver::setSolutionTolerance(*(_QWORD *)(a1 + 176), a2->f32[1]);
  FIK::IKSolver::setRetargetingGain(*(FIK::Solver ***)(a1 + 176), a2->f32[2]);
  FIK::IKSolver::enableShadowPosing(*(FIK::IKSolver **)(a1 + 176), a2[1].u8[9]);
  return FIK::IKSolver::setAddErrors(*(FIK::IKSolver **)(a1 + 176), a2[1].i8[10]);
}

uint64_t FIK::GenericSolver::SetBoneProperties(FIK::GenericSolver *this, signed int a2, const FIK::RigBone *a3)
{
  _QWORD *Segment;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  int v11;
  _DWORD *v12;
  int v13;
  uint64_t result;
  uint64_t *v15;
  _BYTE v16[25];

  if (a2 < 0 || *((_DWORD *)this + 100) <= a2)
  {
    v15 = ikinemaLogObject();
    ikinemaAssertHandler(*v15, 0, (uint64_t)"SetBoneProperties", "(IKRigUtils::IsValidBoneIndex(boneIndex, IKinemaRig)) Bone index must be valid");
  }
  Segment = (_QWORD *)FIK::IKSolver::getSegment(*((FIK::IKSolver **)this + 22), a2);
  v7 = Segment;
  v8 = *Segment;
  if (*((_BYTE *)a3 + 96))
  {
    if (((*(uint64_t (**)(_QWORD *))(v8 + 168))(Segment) & 1) == 0)
      (*(void (**)(_QWORD *, _QWORD, _QWORD, _QWORD))(*v7 + 144))(v7, *((unsigned __int8 *)a3 + 105), *((unsigned __int8 *)a3 + 106), *((unsigned __int8 *)a3 + 107));
    (*(void (**)(_QWORD *, _QWORD, _QWORD, _QWORD))(*v7 + 136))(v7, *((unsigned __int8 *)a3 + 97), *((unsigned __int8 *)a3 + 98), *((unsigned __int8 *)a3 + 99));
    (*(void (**)(_QWORD *, _QWORD, _QWORD))(*v7 + 176))(v7, *((unsigned __int8 *)a3 + 96), 0);
  }
  else
  {
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 176))(Segment, 0, 1);
  }
  (*(void (**)(_QWORD *, _QWORD, float))(*v7 + 280))(v7, 0, 1.0 - *((float *)a3 + 36));
  (*(void (**)(_QWORD *, uint64_t, float))(*v7 + 280))(v7, 1, 1.0 - *((float *)a3 + 37));
  (*(void (**)(_QWORD *, uint64_t, float))(*v7 + 280))(v7, 2, 1.0 - *((float *)a3 + 38));
  (*(void (**)(_QWORD *, float))(*v7 + 952))(v7, *((float *)a3 + 28));
  (*(void (**)(_QWORD *, uint64_t))(*v7 + 656))(v7, 1);
  (*(void (**)(_QWORD *, _QWORD))(*v7 + 64))(v7, *((unsigned __int8 *)a3 + 104));
  (*(void (**)(_QWORD *, float))(*v7 + 696))(v7, *((float *)a3 + 31));
  v9 = 0;
  v16[24] = *((_DWORD *)a3 + 32);
  v10 = (int *)((char *)a3 + 192);
  do
  {
    v11 = *(v10 - 4);
    v12 = &v16[v9];
    v13 = *v10++;
    *v12 = v11;
    v12[1] = v13;
    v9 += 8;
  }
  while (v9 != 24);
  (*(void (**)(_QWORD *, _BYTE *, uint64_t))(*v7 + 624))(v7, v16, 1);
  (*(void (**)(_QWORD *, _QWORD))(*v7 + 48))(v7, *((unsigned __int8 *)a3 + 103));
  if (!*((_BYTE *)this + 281))
  {
    (*(void (**)(_QWORD *, _QWORD, _QWORD))(*v7 + 16))(v7, *((unsigned __int8 *)a3 + 100), 0);
    (*(void (**)(_QWORD *, float))(*v7 + 712))(v7, *((float *)a3 + 30));
  }
  (*(void (**)(_QWORD *, _QWORD, float))(*v7 + 728))(v7, 0, *((float *)a3 + 40));
  (*(void (**)(_QWORD *, uint64_t, float))(*v7 + 728))(v7, 1, *((float *)a3 + 41));
  (*(void (**)(_QWORD *, uint64_t, float))(*v7 + 728))(v7, 2, *((float *)a3 + 42));
  (*(void (**)(_QWORD *, float))(*v7 + 968))(v7, *((float *)a3 + 29));
  result = (*(uint64_t (**)(_QWORD *))(*v7 + 392))(v7);
  if (result)
  {
    (*(void (**)(_QWORD *, uint64_t, float))(*v7 + 288))(v7, 3, *((float *)a3 + 60));
    (*(void (**)(_QWORD *, uint64_t, float))(*v7 + 288))(v7, 4, *((float *)a3 + 61));
    (*(void (**)(_QWORD *, uint64_t, float))(*v7 + 288))(v7, 5, *((float *)a3 + 62));
    (*(void (**)(_QWORD *, _QWORD))(*v7 + 88))(v7, *((unsigned __int8 *)a3 + 101));
    (*(void (**)(_QWORD *, _QWORD))(*v7 + 104))(v7, *((unsigned __int8 *)a3 + 104));
    return (*(uint64_t (**)(_QWORD *, float))(*v7 + 760))(v7, *((float *)a3 + 33));
  }
  return result;
}

uint64_t FIK::GenericSolver::GetSegment(FIK::IKSolver **this, unsigned int a2)
{
  return FIK::IKSolver::getSegment(this[22], a2);
}

uint64_t FIK::GenericSolver::ResetSolver(FIK::Solver ***this)
{
  __n128 v2;

  FIK::IKSolver::resetSolver(this[22]);
  return FIK::IKSolver::setup(this[22], v2);
}

uint64_t FIK::GenericSolver::SetMaxIterations(uint64_t this, int a2)
{
  *(_DWORD *)(this + 268) = a2;
  return this;
}

uint64_t FIK::GenericSolver::GetMaxIterations(FIK::GenericSolver *this)
{
  return *((unsigned int *)this + 67);
}

float FIK::GenericSolver::GetPCoefficient(FIK::Solver ***this)
{
  return FIK::IKSolver::getPGain(this[22]);
}

uint64_t FIK::GenericSolver::GetSolver(FIK::GenericSolver *this)
{
  return *((_QWORD *)this + 22);
}

uint64_t FIK::GenericSolver::GetNumTasks(FIK::GenericSolver *this)
{
  return *((unsigned int *)this + 14);
}

void FIK::GenericSolver::ConstructImportBones(_anonymous_namespace_ **this@<X0>, uint64_t *a2@<X8>)
{
  void (***v4)(FIK::CrtAllocator *__hidden);
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  _DWORD *v8;
  __n128 v9;
  _QWORD v10[2];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = FIK::defaultAllocator((FIK *)this);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = (uint64_t)v4;
  v5 = this[50];
  if (v5)
  {
    v6 = this[52];
    v7 = (_anonymous_namespace_ *)((char *)v6 + 256 * (_QWORD)v5);
    do
    {
      v8 = (_DWORD *)((char *)v6 + 64);
      FIK::ImportBone::setRestTransform(v10, v8);
      v9 = FIK::IKArray<FIK::ImportBone>::push_back<FIK::ImportBone&,void>(a2, (uint64_t)v10);
      if (v13)
      {
        (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, __n128))(*(_QWORD *)v14 + 24))(v14, v12, 0, 8, v9);
        v12 = 0;
        v13 = 0;
      }
      if (v10[1])
        (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t, __n128))(*(_QWORD *)v11 + 24))(v11, v10[0], 0, 8, v9);
      v6 = (_anonymous_namespace_ *)(v8 + 48);
    }
    while (v6 != v7);
  }
}

void `anonymous namespace'::CopyHierarchyInfo(_anonymous_namespace_ *this@<X0>, FIK::ImportBone *a2@<X8>)
{
  IKString *v5;
  char *v6;
  IKString *v7;
  char *v8;

  FIK::ImportBone::ImportBone(a2);
  v5 = (IKString *)*((_QWORD *)this + 2);
  if (v5)
    v6 = (char *)*((_QWORD *)this + 1);
  else
    v6 = (char *)&unk_2108059BE;
  IKString::assign(a2, v6, v5);
  v7 = (IKString *)*((_QWORD *)this + 5);
  if (v7)
    v8 = (char *)*((_QWORD *)this + 4);
  else
    v8 = (char *)&unk_2108059BE;
  IKString::assign((_QWORD *)a2 + 3, v8, v7);
}

__n128 FIK::IKArray<FIK::ImportBone>::push_back<FIK::ImportBone&,void>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  FIK::IKArray<FIK::ImportBone>::reserve(a1, *a1 + 1);
  v4 = a1[2] + 144 * *a1;
  IKString::IKString((IKString *)v4, (const IKString *)a2);
  IKString::IKString((IKString *)(v4 + 24), (const IKString *)(a2 + 24));
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v4 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v4 + 64) = v5;
  result = *(__n128 *)(a2 + 80);
  v7 = *(_OWORD *)(a2 + 96);
  v8 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(v4 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(v4 + 128) = v8;
  *(__n128 *)(v4 + 80) = result;
  *(_OWORD *)(v4 + 96) = v7;
  ++*a1;
  return result;
}

void FIK::GenericSolver::ConstructImportBones(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  void (***v6)(FIK::CrtAllocator *__hidden);
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  __n128 v10;
  _QWORD v11[2];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v16[2];

  v6 = FIK::defaultAllocator((FIK *)a1);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  a3[3] = (uint64_t)v6;
  if (*(int *)(a1 + 400) >= 1)
  {
    v7 = 0;
    v8 = 0;
    v9 = (_OWORD *)(a2 + 16);
    do
    {
      v16[0] = *(v9 - 1);
      v16[1] = *v9;
      FIK::ImportBone::setRestTransform(v11, v16);
      v10 = FIK::IKArray<FIK::ImportBone>::push_back<FIK::ImportBone&,void>(a3, (uint64_t)v11);
      if (v14)
      {
        (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, __n128))(*(_QWORD *)v15 + 24))(v15, v13, 0, 8, v10);
        v13 = 0;
        v14 = 0;
      }
      if (v11[1])
        (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t, __n128))(*(_QWORD *)v12 + 24))(v12, v11[0], 0, 8, v10);
      ++v8;
      v9 += 2;
      v7 += 256;
    }
    while (v8 < *(int *)(a1 + 400));
  }
}

uint64_t FIK::IKRigUtils::GetTaskIndexByName<FIK::GameRig>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  size_t v5;
  uint64_t v6;
  _QWORD *i;
  const void *v8;

  v2 = *(_QWORD *)(a2 + 176);
  if (!v2)
    return 0xFFFFFFFFLL;
  v3 = *(_QWORD *)(a2 + 192);
  if (*(_QWORD *)(a1 + 8))
    v4 = *(const char **)a1;
  else
    v4 = (const char *)&unk_2108059BE;
  v5 = strlen(v4);
  v6 = 0;
  for (i = (_QWORD *)(v3 + 8); ; i += 30)
  {
    v8 = *i ? (const void *)*(i - 1) : &unk_2108059BE;
    if (*i == v5 && !memcmp(v8, v4, v5))
      break;
    if (v2 == ++v6)
      return 0xFFFFFFFFLL;
  }
  return v6;
}

uint64_t FIK::IKArray<FIK::RTGameTask>::push_back<FIK::RTGameTask,void>(_QWORD *a1, uint64_t a2)
{
  uint64_t result;

  FIK::IKArray<FIK::RTGameTask>::reserve((uint64_t)a1, *a1 + 1);
  result = FIK::RTGameTask::RTGameTask(a1[2] + 576 * *a1, a2, a1[3]);
  ++*a1;
  return result;
}

_QWORD *FIK::IKArray<FIK::GameTask>::IKArray(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  __int128 v13;

  v4 = a2[1];
  v5 = a2[3];
  *a1 = *a2;
  a1[1] = v4;
  if (v4)
  {
    v6 = 240 * v4;
    v7 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, 240 * v4, 16);
    v8 = v7;
    a1[2] = v7;
    a1[3] = v5;
    if (v6)
    {
      bzero(v7, v6);
      v8 = (char *)a1[2];
    }
  }
  else
  {
    v8 = 0;
    a1[2] = 0;
    a1[3] = v5;
  }
  v9 = *a2;
  if (*a2)
  {
    v10 = 0;
    v11 = a2[2];
    do
    {
      v12 = &v8[v10];
      IKString::IKString((IKString *)&v8[v10], (const IKString *)(v11 + v10));
      IKString::IKString((IKString *)&v8[v10 + 24], (const IKString *)(v11 + v10 + 24));
      v13 = *(_OWORD *)(v11 + v10 + 48);
      *((_QWORD *)v12 + 8) = *(_QWORD *)(v11 + v10 + 64);
      *((_OWORD *)v12 + 3) = v13;
      *((_OWORD *)v12 + 5) = *(_OWORD *)(v11 + v10 + 80);
      *((_OWORD *)v12 + 6) = *(_OWORD *)(v11 + v10 + 96);
      *((_OWORD *)v12 + 7) = *(_OWORD *)(v11 + v10 + 112);
      *((_OWORD *)v12 + 8) = *(_OWORD *)(v11 + v10 + 128);
      *((_OWORD *)v12 + 9) = *(_OWORD *)(v11 + v10 + 144);
      *((_OWORD *)v12 + 10) = *(_OWORD *)(v11 + v10 + 160);
      *((_OWORD *)v12 + 11) = *(_OWORD *)(v11 + v10 + 176);
      *((_OWORD *)v12 + 12) = *(_OWORD *)(v11 + v10 + 192);
      *((_OWORD *)v12 + 13) = *(_OWORD *)(v11 + v10 + 208);
      *((_OWORD *)v12 + 14) = *(_OWORD *)(v11 + v10 + 224);
      v10 += 240;
      --v9;
    }
    while (v9);
  }
  return a1;
}

_QWORD *FIK::IKArray<FIK::RigBone>::IKArray(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;

  v4 = a2[1];
  v5 = a2[3];
  *a1 = *a2;
  a1[1] = v4;
  if (v4)
  {
    v6 = v4 << 8;
    v7 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v4 << 8, 16);
    a1[2] = v7;
    a1[3] = v5;
    if (v6)
    {
      bzero(v7, v6);
      v7 = (char *)a1[2];
    }
  }
  else
  {
    v7 = 0;
    a1[2] = 0;
    a1[3] = v5;
  }
  v8 = *a2;
  if (*a2)
  {
    v9 = a2[2];
    v10 = v7 + 32;
    v11 = v9 + 32;
    do
    {
      *((_QWORD *)v10 - 4) = *(_QWORD *)(v11 - 32);
      IKString::IKString((IKString *)(v10 - 24), (const IKString *)(v11 - 24));
      IKString::IKString((IKString *)v10, (const IKString *)v11);
      *((_OWORD *)v10 + 2) = *(_OWORD *)(v11 + 32);
      *((_OWORD *)v10 + 3) = *(_OWORD *)(v11 + 48);
      v12 = *(_OWORD *)(v11 + 64);
      v13 = *(_OWORD *)(v11 + 80);
      *((_QWORD *)v10 + 12) = *(_QWORD *)(v11 + 96);
      *((_OWORD *)v10 + 4) = v12;
      *((_OWORD *)v10 + 5) = v13;
      *((_OWORD *)v10 + 7) = *(_OWORD *)(v11 + 112);
      *((_OWORD *)v10 + 8) = *(_OWORD *)(v11 + 128);
      *((_OWORD *)v10 + 9) = *(_OWORD *)(v11 + 144);
      *((_OWORD *)v10 + 10) = *(_OWORD *)(v11 + 160);
      *((_OWORD *)v10 + 11) = *(_OWORD *)(v11 + 176);
      *((_OWORD *)v10 + 12) = *(_OWORD *)(v11 + 192);
      *((_OWORD *)v10 + 13) = *(_OWORD *)(v11 + 208);
      v10 += 256;
      v11 += 256;
      --v8;
    }
    while (v8);
  }
  return a1;
}

_QWORD *FIK::IKArray<IKString>::IKArray(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  _QWORD *v7;
  uint64_t v8;
  IKString **v9;
  void (***v10)(FIK::CrtAllocator *__hidden);
  char *v11;

  v3 = a1;
  v4 = a2[1];
  v5 = a2[3];
  *a1 = *a2;
  a1[1] = v4;
  if (v4)
  {
    v6 = 24 * v4;
    a1 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, 24 * v4, 8);
    v7 = a1;
    v3[2] = a1;
    v3[3] = v5;
    if (v6)
    {
      bzero(a1, v6);
      v7 = (_QWORD *)v3[2];
    }
  }
  else
  {
    v7 = 0;
    a1[2] = 0;
    a1[3] = v5;
  }
  v8 = *a2;
  if (*a2)
  {
    v9 = (IKString **)(a2[2] + 8);
    do
    {
      v10 = FIK::defaultAllocator((FIK *)a1);
      *v7 = 0;
      v7[1] = 0;
      v7[2] = v10;
      if (*v9)
        v11 = (char *)*(v9 - 1);
      else
        v11 = (char *)&unk_2108059BE;
      IKString::assign(v7, v11, *v9);
      v9 += 3;
      v7 += 3;
      --v8;
    }
    while (v8);
  }
  return v3;
}

_QWORD *FIK::IKArray<FIK::AimSetup>::IKArray(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;

  v4 = a2[1];
  v5 = a2[3];
  *a1 = *a2;
  a1[1] = v4;
  if (v4)
  {
    v6 = v4 << 7;
    v7 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v4 << 7, 8);
    v8 = v7;
    a1[2] = v7;
    a1[3] = v5;
    if (v6)
    {
      bzero(v7, v6);
      v8 = (char *)a1[2];
    }
  }
  else
  {
    v8 = 0;
    a1[2] = 0;
    a1[3] = v5;
  }
  v9 = *a2;
  if (*a2)
  {
    v10 = 0;
    v11 = a2[2];
    do
    {
      v12 = &v8[v10];
      IKString::IKString((IKString *)&v8[v10], (const IKString *)(v11 + v10));
      *((_DWORD *)v12 + 6) = *(_DWORD *)(v11 + v10 + 24);
      IKString::IKString((IKString *)&v8[v10 + 32], (const IKString *)(v11 + v10 + 32));
      FIK::IKArray<FIK::Item>::IKArray(&v8[v10 + 56], (_QWORD *)(v11 + v10 + 56));
      FIK::IKArray<FIK::Item>::IKArray(&v8[v10 + 88], (_QWORD *)(v11 + v10 + 88));
      *((_DWORD *)v12 + 30) = *(_DWORD *)(v11 + v10 + 120);
      v10 += 128;
      --v9;
    }
    while (v9);
  }
  return a1;
}

_QWORD *FIK::IKArray<FIK::Item>::IKArray(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  char *v7;
  uint64_t v8;
  IKString *v9;
  const IKString *v10;
  uint64_t v11;

  v4 = a2[1];
  v5 = a2[3];
  *a1 = *a2;
  a1[1] = v4;
  if (v4)
  {
    v6 = 32 * v4;
    v7 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, 32 * v4, 8);
    a1[2] = v7;
    a1[3] = v5;
    if (v6)
    {
      bzero(v7, v6);
      v7 = (char *)a1[2];
    }
  }
  else
  {
    v7 = 0;
    a1[2] = 0;
    a1[3] = v5;
  }
  v8 = *a2;
  if (*a2)
  {
    v9 = (IKString *)(v7 + 8);
    v10 = (const IKString *)(a2[2] + 8);
    do
    {
      *((_DWORD *)v9 - 2) = *((_DWORD *)v10 - 2);
      IKString::IKString(v9, v10);
      v9 = (IKString *)(v11 + 32);
      v10 = (const IKString *)((char *)v10 + 32);
      --v8;
    }
    while (v8);
  }
  return a1;
}

FIK::ImportBone *FIK::ImportBone::ImportBone(FIK::ImportBone *this)
{
  void (***v2)(FIK::CrtAllocator *__hidden);
  void (***v3)(FIK::CrtAllocator *__hidden);

  v2 = FIK::defaultAllocator(this);
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = v2;
  v3 = FIK::defaultAllocator((FIK *)v2);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = v3;
  *((_OWORD *)this + 3) = xmmword_210802BA0;
  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0x200000002;
  *((_BYTE *)this + 96) = 0;
  *(_QWORD *)((char *)this + 100) = 0;
  *((_DWORD *)this + 27) = 0;
  *((_OWORD *)this + 7) = xmmword_210804810;
  *((_OWORD *)this + 8) = unk_210804820;
  return this;
}

uint64_t *FIK::IKArray<FIK::ImportBone>::~IKArray(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[2];
    do
    {
      std::__destroy_at[abi:nn180100]<FIK::GameTask,0>(v3);
      v3 += 144;
      --v2;
    }
    while (v2);
  }
  *a1 = 0;
  v4 = a1[2];
  if (v4)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1[3] + 24))(a1[3], v4, 0, 8);
  return a1;
}

uint64_t *FIK::IKArray<FIK::RTGameTask>::~IKArray(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[2];
    do
    {
      std::__destroy_at[abi:nn180100]<FIK::RTGameTask,0>(v3);
      v3 += 576;
      --v2;
    }
    while (v2);
  }
  *a1 = 0;
  v4 = a1[2];
  if (v4)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1[3] + 24))(a1[3], v4, 0, 8);
  return a1;
}

_QWORD *FIK::IKArray<FIK::RTGameTask>::IKArray(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v4 = a2[1];
  v5 = a2[3];
  *a1 = *a2;
  a1[1] = v4;
  if (v4)
  {
    v6 = 576 * v4;
    v7 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, 576 * v4, 16);
    v8 = v7;
    a1[2] = v7;
    a1[3] = v5;
    if (v6)
    {
      bzero(v7, v6);
      v8 = (char *)a1[2];
    }
  }
  else
  {
    v8 = 0;
    a1[2] = 0;
    a1[3] = v5;
  }
  v9 = *a2;
  if (*a2)
  {
    v10 = 0;
    v11 = a2[2];
    do
    {
      v12 = &v8[v10];
      *(_QWORD *)v12 = &unk_24CA6C6F8;
      *(_OWORD *)(v12 + 8) = *(_OWORD *)(v11 + v10 + 8);
      IKString::IKString((IKString *)&v8[v10 + 24], (const IKString *)(v11 + v10 + 24));
      IKString::IKString((IKString *)&v8[v10 + 48], (const IKString *)(v11 + v10 + 48));
      IKString::IKString((IKString *)&v8[v10 + 72], (const IKString *)(v11 + v10 + 72));
      v13 = *(_OWORD *)(v11 + v10 + 96);
      *((_QWORD *)v12 + 14) = *(_QWORD *)(v11 + v10 + 112);
      *((_OWORD *)v12 + 6) = v13;
      *((_OWORD *)v12 + 8) = *(_OWORD *)(v11 + v10 + 128);
      *((_OWORD *)v12 + 9) = *(_OWORD *)(v11 + v10 + 144);
      *((_OWORD *)v12 + 10) = *(_OWORD *)(v11 + v10 + 160);
      *((_OWORD *)v12 + 11) = *(_OWORD *)(v11 + v10 + 176);
      *((_OWORD *)v12 + 12) = *(_OWORD *)(v11 + v10 + 192);
      *((_OWORD *)v12 + 13) = *(_OWORD *)(v11 + v10 + 208);
      *((_OWORD *)v12 + 14) = *(_OWORD *)(v11 + v10 + 224);
      *((_OWORD *)v12 + 15) = *(_OWORD *)(v11 + v10 + 240);
      *((_OWORD *)v12 + 16) = *(_OWORD *)(v11 + v10 + 256);
      *((_OWORD *)v12 + 17) = *(_OWORD *)(v11 + v10 + 272);
      *(_QWORD *)v12 = &off_24CA6AB50;
      v12[288] = *(_BYTE *)(v11 + v10 + 288);
      *((_OWORD *)v12 + 19) = *(_OWORD *)(v11 + v10 + 304);
      *((_OWORD *)v12 + 20) = *(_OWORD *)(v11 + v10 + 320);
      *((_OWORD *)v12 + 21) = *(_OWORD *)(v11 + v10 + 336);
      *((_OWORD *)v12 + 22) = *(_OWORD *)(v11 + v10 + 352);
      *((_OWORD *)v12 + 23) = *(_OWORD *)(v11 + v10 + 368);
      *((_OWORD *)v12 + 24) = *(_OWORD *)(v11 + v10 + 384);
      *((_OWORD *)v12 + 25) = *(_OWORD *)(v11 + v10 + 400);
      v14 = *(_OWORD *)(v11 + v10 + 416);
      v15 = *(_OWORD *)(v11 + v10 + 432);
      *(_QWORD *)(v12 + 446) = *(_QWORD *)(v11 + v10 + 446);
      *((_OWORD *)v12 + 26) = v14;
      *((_OWORD *)v12 + 27) = v15;
      *((_OWORD *)v12 + 29) = *(_OWORD *)(v11 + v10 + 464);
      *((_OWORD *)v12 + 30) = *(_OWORD *)(v11 + v10 + 480);
      *((_DWORD *)v12 + 124) = *(_DWORD *)(v11 + v10 + 496);
      *((_OWORD *)v12 + 32) = *(_OWORD *)(v11 + v10 + 512);
      *((_OWORD *)v12 + 33) = *(_OWORD *)(v11 + v10 + 528);
      *((_OWORD *)v12 + 34) = *(_OWORD *)(v11 + v10 + 544);
      *((_QWORD *)v12 + 70) = *(_QWORD *)(v11 + v10 + 560);
      v10 += 576;
      --v9;
    }
    while (v9);
  }
  return a1;
}

uint64_t std::__destroy_at[abi:nn180100]<FIK::RTGameTask,0>(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(_QWORD *)(result + 80))
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(result + 88) + 24))(*(_QWORD *)(result + 88), *(_QWORD *)(result + 72), 0, 8);
    *(_QWORD *)(v1 + 72) = 0;
    *(_QWORD *)(v1 + 80) = 0;
  }
  if (*(_QWORD *)(v1 + 56))
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(v1 + 64) + 24))(*(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 48), 0, 8);
    *(_QWORD *)(v1 + 48) = 0;
    *(_QWORD *)(v1 + 56) = 0;
  }
  *(_QWORD *)v1 = &unk_24CA6C6F8;
  if (*(_QWORD *)(v1 + 32))
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(v1 + 40) + 24))(*(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 24), 0, 8);
    *(_QWORD *)(v1 + 24) = 0;
    *(_QWORD *)(v1 + 32) = 0;
  }
  return result;
}

uint64_t FIK::IKArray<FIK::RTGameTask>::reserve(uint64_t result, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (*(_QWORD *)(result + 8) < a2)
  {
    v2 = (uint64_t *)result;
    v3 = *(_QWORD *)(result + 24);
    v4 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v4)
    {
      v5 = (void *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)v3 + 16))(*(_QWORD *)(result + 24), 576 * v4, 16);
      v6 = (uint64_t)v5;
      if (576 * v4)
        bzero(v5, 576 * v4);
    }
    else
    {
      v6 = 0;
    }
    result = std::__uninitialized_move_n[abi:nn180100]<FIK::RTGameTask,FIK::RTGameTask*,unsigned long,FIK::RTGameTask*,std::__always_false,std::pair<FIK::RTGameTask*,FIK::RTGameTask*> std::uninitialized_move_n[abi:nn180100]<FIK::RTGameTask*,unsigned long,FIK::RTGameTask*>(FIK::RTGameTask*,unsigned long,FIK::RTGameTask*)::{lambda(FIK::RTGameTask*&&)#1}>(v2[2], *v2, v6);
    v7 = v2[2];
    v8 = v2[3];
    v2[1] = v4;
    v2[2] = v6;
    v2[3] = v3;
    v9 = *v2;
    if (*v2)
    {
      v10 = v7;
      do
      {
        result = std::__destroy_at[abi:nn180100]<FIK::RTGameTask,0>(v10);
        v10 += 576;
        --v9;
      }
      while (v9);
    }
    if (v7)
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v8 + 24))(v8, v7, 0, 8);
  }
  return result;
}

uint64_t std::__uninitialized_move_n[abi:nn180100]<FIK::RTGameTask,FIK::RTGameTask*,unsigned long,FIK::RTGameTask*,std::__always_false,std::pair<FIK::RTGameTask*,FIK::RTGameTask*> std::uninitialized_move_n[abi:nn180100]<FIK::RTGameTask*,unsigned long,FIK::RTGameTask*>(FIK::RTGameTask*,unsigned long,FIK::RTGameTask*)::{lambda(FIK::RTGameTask*&&)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  if (a2)
  {
    v5 = a2;
    v6 = 0;
    do
    {
      v7 = a3 + v6;
      *(_QWORD *)v7 = &unk_24CA6C6F8;
      v8 = (uint64_t *)(a1 + v6);
      *(_OWORD *)(v7 + 8) = *(_OWORD *)(a1 + v6 + 8);
      IKString::IKString((uint64_t *)(a3 + v6 + 24), (uint64_t *)(a1 + v6 + 24), *(_QWORD *)(a1 + v6 + 40));
      IKString::IKString((uint64_t *)(a3 + v6 + 48), v8 + 6, v8[8]);
      IKString::IKString((uint64_t *)(a3 + v6 + 72), v8 + 9, v8[11]);
      v9 = *(_OWORD *)(a1 + v6 + 96);
      *(_QWORD *)(v7 + 112) = *(_QWORD *)(a1 + v6 + 112);
      *(_OWORD *)(v7 + 96) = v9;
      *(_OWORD *)(v7 + 128) = *(_OWORD *)(a1 + v6 + 128);
      *(_OWORD *)(v7 + 144) = *(_OWORD *)(a1 + v6 + 144);
      *(_OWORD *)(v7 + 160) = *(_OWORD *)(a1 + v6 + 160);
      *(_OWORD *)(v7 + 176) = *(_OWORD *)(a1 + v6 + 176);
      *(_OWORD *)(v7 + 192) = *(_OWORD *)(a1 + v6 + 192);
      *(_OWORD *)(v7 + 208) = *(_OWORD *)(a1 + v6 + 208);
      *(_OWORD *)(v7 + 224) = *(_OWORD *)(a1 + v6 + 224);
      *(_OWORD *)(v7 + 240) = *(_OWORD *)(a1 + v6 + 240);
      *(_OWORD *)(v7 + 256) = *(_OWORD *)(a1 + v6 + 256);
      *(_OWORD *)(v7 + 272) = *(_OWORD *)(a1 + v6 + 272);
      *(_QWORD *)v7 = &off_24CA6AB50;
      *(_BYTE *)(v7 + 288) = *(_BYTE *)(a1 + v6 + 288);
      *(_OWORD *)(v7 + 304) = *(_OWORD *)(a1 + v6 + 304);
      *(_OWORD *)(v7 + 320) = *(_OWORD *)(a1 + v6 + 320);
      *(_OWORD *)(v7 + 336) = *(_OWORD *)(a1 + v6 + 336);
      *(_OWORD *)(v7 + 352) = *(_OWORD *)(a1 + v6 + 352);
      *(_OWORD *)(v7 + 368) = *(_OWORD *)(a1 + v6 + 368);
      *(_OWORD *)(v7 + 384) = *(_OWORD *)(a1 + v6 + 384);
      *(_OWORD *)(v7 + 400) = *(_OWORD *)(a1 + v6 + 400);
      v10 = *(_OWORD *)(a1 + v6 + 416);
      v11 = *(_OWORD *)(a1 + v6 + 432);
      *(_QWORD *)(v7 + 446) = *(_QWORD *)(a1 + v6 + 446);
      *(_OWORD *)(v7 + 416) = v10;
      *(_OWORD *)(v7 + 432) = v11;
      *(_OWORD *)(v7 + 464) = *(_OWORD *)(a1 + v6 + 464);
      *(_OWORD *)(v7 + 480) = *(_OWORD *)(a1 + v6 + 480);
      *(_DWORD *)(v7 + 496) = *(_DWORD *)(a1 + v6 + 496);
      *(_OWORD *)(v7 + 512) = *(_OWORD *)(a1 + v6 + 512);
      *(_OWORD *)(v7 + 528) = *(_OWORD *)(a1 + v6 + 528);
      *(_OWORD *)(v7 + 544) = *(_OWORD *)(a1 + v6 + 544);
      *(_QWORD *)(v7 + 560) = *(_QWORD *)(a1 + v6 + 560);
      v6 += 576;
      --v5;
    }
    while (v5);
    a1 += v6;
  }
  return a1;
}

void FIK::IKArray<FIK::ImportBone>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a1[1] < a2)
  {
    v3 = a1[3];
    v4 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v4)
    {
      v5 = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v3 + 16))(a1[3], 144 * v4, 8);
      v6 = (uint64_t)v5;
      if (144 * v4)
        bzero(v5, 144 * v4);
    }
    else
    {
      v6 = 0;
    }
    v7 = FIK::IKArray<FIK::ImportBone>::moveRange(a1[2], *a1, v6);
    v8 = a1[2];
    v9 = a1[3];
    a1[1] = v4;
    a1[2] = v6;
    a1[3] = v3;
    v10 = *a1;
    if (*a1)
    {
      v11 = v8;
      do
      {
        std::__destroy_at[abi:nn180100]<FIK::GameTask,0>(v11);
        v11 += 144;
        --v10;
      }
      while (v10);
    }
    if (v8)
      (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, __n128))(*(_QWORD *)v9 + 24))(v9, v8, 0, 8, v7);
  }
}

__n128 FIK::IKArray<FIK::ImportBone>::moveRange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  if (a2)
  {
    v3 = a2;
    v4 = a3 + 24;
    v5 = a1 + 24;
    do
    {
      IKString::IKString((uint64_t *)(v4 - 24), (uint64_t *)(v5 - 24), *(_QWORD *)(v5 - 8));
      IKString::IKString((uint64_t *)v4, (uint64_t *)v5, *(_QWORD *)(v5 + 16));
      v6 = *(_OWORD *)(v5 + 24);
      *(_OWORD *)(v4 + 40) = *(_OWORD *)(v5 + 40);
      *(_OWORD *)(v4 + 24) = v6;
      result = *(__n128 *)(v5 + 56);
      v8 = *(_OWORD *)(v5 + 72);
      v9 = *(_OWORD *)(v5 + 88);
      *(_OWORD *)(v4 + 104) = *(_OWORD *)(v5 + 104);
      *(_OWORD *)(v4 + 88) = v9;
      *(_OWORD *)(v4 + 72) = v8;
      *(__n128 *)(v4 + 56) = result;
      v4 += 144;
      v5 += 144;
      --v3;
    }
    while (v3);
  }
  return result;
}

void OUTLINED_FUNCTION_0_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

uint64_t FIK::Enrollment::Exporter::Exporter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x24BEDB840];
  v3 = MEMORY[0x24BEDB840] + 64;
  *(_QWORD *)(a1 + 416) = MEMORY[0x24BEDB840] + 64;
  v4 = a1 + 8;
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 8);
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 16);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v5;
  v7 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v7, (void *)(a1 + 8));
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 416) = v3;
  MEMORY[0x212BCAEAC](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24)), *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 32) | 4);
  *(_QWORD *)(a1 + 568) = 0;
  *(_BYTE *)(a1 + 576) = 0;
  return a1;
}

_QWORD *FIK::Enrollment::Exporter::setupForNames(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;
  uint64_t v5;
  __int128 *v6;
  uint64_t v7;
  __int128 v8;
  _QWORD *v9;
  __int128 v10;
  __int128 v11;

  *(_QWORD *)(a1 + 568) = *a2;
  result = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>((_QWORD *)a1, (uint64_t)"timeStamp,info#frame", 20);
  v5 = *a2;
  if (*a2)
  {
    v6 = (__int128 *)a2[2];
    v7 = 16 * v5;
    do
    {
      v8 = *v6++;
      v11 = v8;
      v9 = FIK::Enrollment::operator<<((_QWORD *)a1, (uint64_t *)&v11);
      v10 = v8;
      result = FIK::Enrollment::operator<<(v9, (uint64_t *)&v10);
      v7 -= 16;
    }
    while (v7);
  }
  *(_BYTE *)(a1 + 576) = 1;
  return result;
}

uint64_t FIK::Enrollment::Exporter::appendPoseToFile(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  char v11;

  if (!*(_BYTE *)(a1 + 576))
  {
    v9 = ikinemaLogObject();
    ikinemaAssertHandler(*v9, 0, (uint64_t)"appendPoseToFile", "(m_hasHeaders) setup function not called.");
  }
  if (*(_QWORD *)(a1 + 568) != a3)
  {
    v10 = ikinemaLogObject();
    ikinemaAssertHandler(*v10, 0, (uint64_t)"appendPoseToFile", "(m_fieldCount == pose.size()) Header/pose size mismatch");
  }
  v11 = 10;
  v6 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>((_QWORD *)a1, (uint64_t)&v11, 1);
  *(_QWORD *)((char *)v6 + *(_QWORD *)(*v6 - 24) + 16) = 8;
  result = FIK::Enrollment::operator<<((uint64_t)v6);
  if (a3)
  {
    v8 = 32 * a3;
    do
    {
      result = (uint64_t)FIK::Enrollment::operator<<((_QWORD *)a1, a2);
      a2 += 32;
      v8 -= 32;
    }
    while (v8);
  }
  return result;
}

uint64_t FIK::Enrollment::operator<<(uint64_t a1)
{
  _QWORD *v2;
  char v4;

  v2 = (_QWORD *)std::ostream::operator<<();
  v4 = 44;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v2, (uint64_t)&v4, 1);
  std::ostream::operator<<();
  return a1;
}

_QWORD *FIK::Enrollment::operator<<(_QWORD *a1, uint64_t a2)
{
  __int128 v5;

  FIK::Enrollment::operator<<(a1);
  FIK::Enrollment::eulerAnglesDegreesFromQuat((float *)(a2 + 16), &v5);
  return FIK::Enrollment::operator<<(a1);
}

{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  __int128 v9;
  char v10;

  FIK::Enrollment::operator<<(a1);
  FIK::Enrollment::eulerAnglesDegreesFromQuat((float *)(a2 + 16), &v9);
  v4 = FIK::Enrollment::operator<<(a1);
  v10 = 44;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v4, (uint64_t)&v10, 1);
  v5 = (_QWORD *)std::ostream::operator<<();
  v10 = 44;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v5, (uint64_t)&v10, 1);
  v6 = (_QWORD *)std::ostream::operator<<();
  v10 = 44;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v6, (uint64_t)&v10, 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v10 = 44;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v7, (uint64_t)&v10, 1);
  std::ostream::operator<<();
  return a1;
}

uint64_t FIK::Enrollment::Exporter::appendPoseToFile(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t result;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t *v13;
  uint64_t *v14;
  _OWORD v15[2];

  if (!*(_BYTE *)(a1 + 576))
  {
    v13 = ikinemaLogObject();
    ikinemaAssertHandler(*v13, 0, (uint64_t)"appendPoseToFile", "(m_hasHeaders) setup function not called.");
  }
  if (*(_QWORD *)(a1 + 568) != a3)
  {
    v14 = ikinemaLogObject();
    ikinemaAssertHandler(*v14, 0, (uint64_t)"appendPoseToFile", "(m_fieldCount == pose.size()) Header/pose size mismatch");
  }
  LOBYTE(v15[0]) = 10;
  v8 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>((_QWORD *)a1, (uint64_t)v15, 1);
  *(_QWORD *)((char *)v8 + *(_QWORD *)(*v8 - 24) + 16) = 8;
  *(_QWORD *)&v15[0] = a4;
  result = FIK::Enrollment::operator<<((uint64_t)v8);
  if (a3)
  {
    v10 = 16 * a3;
    do
    {
      v11 = *a2++;
      v12 = v11;
      HIDWORD(v12) = 0;
      v15[0] = v12;
      v15[1] = xmmword_210802BA0;
      result = (uint64_t)FIK::Enrollment::operator<<((_QWORD *)a1, (uint64_t)v15);
      v10 -= 16;
    }
    while (v10);
  }
  return result;
}

uint64_t FIK::Enrollment::DataLogger::DataLogger(uint64_t a1, void *__src, size_t __len)
{
  std::string *p_dst;
  size_t v7;
  size_t v8;
  std::chrono::system_clock::time_point v9;
  std::string *v10;
  std::string::size_type size;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  std::string __p;
  std::string v30;
  std::string v31;
  std::string __dst;
  std::string v33;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    p_dst = (std::string *)operator new(v7 + 1);
    __dst.__r_.__value_.__l.__size_ = __len;
    __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = __len;
  p_dst = &__dst;
  if (__len)
LABEL_8:
    memmove(p_dst, __src, __len);
  p_dst->__r_.__value_.__s.__data_[__len] = 0;
  v9.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  std::to_string(&v31, (double)v9.__d_.__rep_ / 1000000.0);
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = &v31;
  else
    v10 = (std::string *)v31.__r_.__value_.__r.__words[0];
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
  else
    size = v31.__r_.__value_.__l.__size_;
  FIK::Enrollment::combinePath(v10, size, &__dst, &v33);
  FIK::Enrollment::createPath(&v33, a1);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v30 = *(std::string *)a1;
  FIK::Enrollment::combinePath("task_targets.csv", 0x10uLL, &v30, &v31);
  FIK::Enrollment::Exporter::Exporter(a1 + 24);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  FIK::Enrollment::combinePath("solved_pose.csv", 0xFuLL, &__p, &v31);
  FIK::Enrollment::Exporter::Exporter(a1 + 608);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!*(_QWORD *)(a1 + 152))
  {
    v12 = *ikinemaLogObject();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      FIK::Enrollment::DataLogger::DataLogger(v12, v13, v14, v15, v16, v17, v18, v19);
  }
  if (!*(_QWORD *)(a1 + 736))
  {
    v20 = *ikinemaLogObject();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      FIK::Enrollment::DataLogger::DataLogger(v20, v21, v22, v23, v24, v25, v26, v27);
  }
  return a1;
}

__n128 FIK::Enrollment::createPath@<Q0>(std::string *this@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  std::string *v5;
  __n128 result;
  uint64_t *v7;
  std::string v8;
  char v9;

  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    if (this->__r_.__value_.__l.__size_)
      goto LABEL_3;
LABEL_14:
    v7 = ikinemaLogObject();
    ikinemaAssertHandler(*v7, 0, (uint64_t)"createPath", "(!pathToCreate.empty()) Unable to create empty path");
    goto LABEL_3;
  }
  if (!*((_BYTE *)&this->__r_.__value_.__s + 23))
    goto LABEL_14;
LABEL_3:
  v4 = 0;
  do
  {
    v4 = std::string::find(this, 47, v4 + 1);
    std::string::basic_string(&v8, this, 0, v4, (std::allocator<char> *)&v9);
    if ((SHIBYTE(v8.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (!*((_BYTE *)&v8.__r_.__value_.__s + 23))
        continue;
      v5 = &v8;
LABEL_9:
      mkdir((const char *)v5, 0xFFFu);
      if ((SHIBYTE(v8.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        continue;
      goto LABEL_10;
    }
    if (v8.__r_.__value_.__l.__size_)
    {
      v5 = (std::string *)v8.__r_.__value_.__r.__words[0];
      goto LABEL_9;
    }
LABEL_10:
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  while (v4 != -1);
  result = *(__n128 *)&this->__r_.__value_.__l.__data_;
  *(_OWORD *)a2 = *(_OWORD *)&this->__r_.__value_.__l.__data_;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)&this->__r_.__value_.__l + 2);
  this->__r_.__value_.__l.__size_ = 0;
  this->__r_.__value_.__r.__words[2] = 0;
  this->__r_.__value_.__r.__words[0] = 0;
  return result;
}

void FIK::Enrollment::combinePath(void *__src@<X1>, size_t __len@<X2>, std::string *a3@<X0>, std::string *a4@<X8>)
{
  std::string::size_type size;
  std::string *v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  size_t v13;
  size_t v14;
  std::string *v15;
  std::string v16;

  if ((SHIBYTE(a3->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
    if (*((_BYTE *)&a3->__r_.__value_.__s + 23))
    {
      v8 = a3;
      goto LABEL_6;
    }
LABEL_9:
    if (__len >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (__len >= 0x17)
    {
      v13 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((__len | 7) != 0x17)
        v13 = __len | 7;
      v14 = v13 + 1;
      v15 = (std::string *)operator new(v13 + 1);
      a4->__r_.__value_.__l.__size_ = __len;
      a4->__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
      a4->__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
      a4 = v15;
    }
    else
    {
      *((_BYTE *)&a4->__r_.__value_.__s + 23) = __len;
      if (!__len)
        goto LABEL_19;
    }
    memmove(a4, __src, __len);
LABEL_19:
    a4->__r_.__value_.__s.__data_[__len] = 0;
    return;
  }
  size = a3->__r_.__value_.__l.__size_;
  if (!size)
    goto LABEL_9;
  v8 = (std::string *)a3->__r_.__value_.__r.__words[0];
LABEL_6:
  if (v8->__r_.__value_.__s.__data_[size - 1] == 47)
  {
    v9 = std::string::append(a3, (const std::string::value_type *)__src, __len);
    if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(a4, v9->__r_.__value_.__l.__data_, v9->__r_.__value_.__l.__size_);
    }
    else
    {
      v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      a4->__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&a4->__r_.__value_.__l.__data_ = v10;
    }
  }
  else
  {
    std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&a3->__r_.__value_.__l.__data_, 47, (uint64_t)&v16);
    v11 = std::string::append(&v16, (const std::string::value_type *)__src, __len);
    if (SHIBYTE(v11->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(a4, v11->__r_.__value_.__l.__data_, v11->__r_.__value_.__l.__size_);
    }
    else
    {
      v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      a4->__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
      *(_OWORD *)&a4->__r_.__value_.__l.__data_ = v12;
    }
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
  }
}

uint64_t FIK::Enrollment::DataLogger::exportSources(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::string *p_p;
  std::string::size_type size;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::string v16;
  std::string __p;
  uint64_t v18;
  _QWORD v19[51];
  _QWORD v20[22];

  v20[21] = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v16 = *(std::string *)a1;
  FIK::Enrollment::combinePath("original_sources.csv", 0x14uLL, &v16, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  FIK::Enrollment::SourceExporter::SourceExporter(&v18, (char *)p_p, size, (const std::string::value_type ***)a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if (v19[15])
  {
    FIK::Enrollment::SourceExporter::exportSourceData((uint64_t)&v18, a2, *(_QWORD *)(a3 + 24), *(_QWORD *)(a3 + 8));
  }
  else
  {
    v7 = *ikinemaLogObject();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      FIK::Enrollment::DataLogger::exportSources(v7, v8, v9, v10, v11, v12, v13, v14);
  }
  v18 = *MEMORY[0x24BEDB7E8];
  *(_QWORD *)((char *)&v19[-1] + *(_QWORD *)(v18 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 24);
  MEMORY[0x212BCAEB8](v19);
  std::ostream::~ostream();
  return MEMORY[0x212BCAF90](v20);
}

uint64_t FIK::Enrollment::SourceExporter::exportSourceData(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t i;
  _QWORD *v10;
  int8x16_t v11;
  int8x16_t v12;
  __n128 *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  int8x16_t v20;
  __n128 v21;
  int8x16_t v22;
  __n128 v23;
  _OWORD v24[2];
  float32x4_t *v25[2];
  __n128 v26;
  int8x16_t v27;
  unsigned __int8 v28;
  uint64_t v29;

  v7 = (_QWORD *)result;
  v29 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(result + 568) != a4 * a3)
  {
    v19 = ikinemaLogObject();
    result = ikinemaAssertHandler(*v19, 0, (uint64_t)"exportSourceData", "(m_fieldCount == (cameraCount * sourceCount)) Header/pose size mismatch");
  }
  v8 = a2[1];
  if (v8)
  {
    for (i = 0; i != v8; ++i)
    {
      v25[0] = (float32x4_t *)(*a2 + 160 * i);
      v25[1] = (float32x4_t *)1;
      v26.n128_u8[0] = 10;
      v10 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v7, (uint64_t)&v26, 1);
      *(_QWORD *)((char *)v10 + *(_QWORD *)(*v10 - 24) + 16) = 8;
      FIK::Enrollment::FrameAdaptor::ID((FIK::Enrollment::FrameAdaptor *)v25);
      FIK::Enrollment::FrameAdaptor::getVioPose((FIK::Enrollment::FrameAdaptor *)v25, (FIK::Transform *)v24);
      FIK::Enrollment::FrameAdaptor::getHeadPose(v25, (FIK::Transform *)&v26);
      v11.i32[0] = 0;
      v21 = 0uLL;
      v12.i32[0] = v28;
      v20 = vbslq_s8(vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(v12, v11), 0), (int8x16_t)xmmword_210802BA0, v27);
      v13 = &v26;
      if (!v28)
        v13 = &v21;
      v23 = *v13;
      v14 = (_QWORD *)FIK::Enrollment::operator<<((uint64_t)v7);
      v26 = (__n128)v24[0];
      v27 = (int8x16_t)v24[1];
      v15 = FIK::Enrollment::operator<<(v14, (uint64_t)&v26);
      v21 = v23;
      v22 = v20;
      result = (uint64_t)FIK::Enrollment::operator<<(v15, (uint64_t)&v21);
      if (a3)
      {
        v16 = 0;
        do
        {
          FIK::Enrollment::FrameAdaptor::getCameraPoseForIndex((FIK::Enrollment::FrameAdaptor *)v25, v16, (FIK::Transform *)&v26);
          v21 = v26;
          v22 = v27;
          result = (uint64_t)FIK::Enrollment::operator<<(v7, (uint64_t)&v21);
          if (a4)
          {
            v17 = 0;
            do
            {
              FIK::Enrollment::FrameAdaptor::getLiftedPositionForJoint((FIK::Enrollment::FrameAdaptor *)v25, v16, v17, &v21);
              v18 = FIK::Enrollment::operator<<(v7);
              v21.n128_u8[0] = 44;
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)&v21, 1);
              FIK::Enrollment::FrameAdaptor::getConfidenceForLiftedJoint((FIK::Enrollment::FrameAdaptor *)v25, v16, v17);
              std::ostream::operator<<();
              v21.n128_u8[0] = 44;
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v7, (uint64_t)&v21, 1);
              FIK::Enrollment::FrameAdaptor::isLiftedValid((FIK::Enrollment::FrameAdaptor *)v25, v16, v17);
              std::ostream::operator<<();
              FIK::Enrollment::FrameAdaptor::getRayDirectionForJoint((FIK::Enrollment::FrameAdaptor *)v25, v16, v17, &v21);
              FIK::Enrollment::operator<<(v7);
              if (FIK::Enrollment::FrameAdaptor::isRayDirValid((FIK::Enrollment::FrameAdaptor *)v25, v16, v17))
                FIK::Enrollment::FrameAdaptor::getRayEndForJoint((FIK::Enrollment::FrameAdaptor *)v25, 1.0, v16, v17, (float32x4_t *)&v21);
              else
                v21 = 0uLL;
              result = (uint64_t)FIK::Enrollment::operator<<(v7);
              ++v17;
            }
            while (a4 != v17);
          }
          ++v16;
        }
        while (v16 != a3);
      }
    }
  }
  return result;
}

uint64_t FIK::Enrollment::DataLogger::exportEnrollment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  std::ios_base *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::string v23;
  std::string __p;
  uint64_t v25;
  _QWORD v26[51];
  _QWORD v27[20];

  v27[19] = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v23 = *(std::string *)a1;
  FIK::Enrollment::combinePath("enrollment.csv", 0xEuLL, &v23, &__p);
  v5 = MEMORY[0x24BEDB840];
  v6 = MEMORY[0x24BEDB840] + 64;
  v7 = (uint64_t *)MEMORY[0x24BEDB7E8];
  v8 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 8);
  v9 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 16);
  v27[0] = MEMORY[0x24BEDB840] + 64;
  v25 = v8;
  *(_QWORD *)((char *)&v26[-1] + *(_QWORD *)(v8 - 24)) = v9;
  v10 = (std::ios_base *)((char *)&v26[-1] + *(_QWORD *)(v25 - 24));
  std::ios_base::init(v10, v26);
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  v25 = v5 + 24;
  v27[0] = v6;
  MEMORY[0x212BCAEAC](v26);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)&v26[-1] + *(_QWORD *)(v25 - 24)), *(_DWORD *)((char *)&v26[3] + *(_QWORD *)(v25 - 24)) | 4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (v26[15])
  {
    if (a3)
    {
      v11 = a2 + 24 * a3;
      do
      {
        v12 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v25, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16));
        __p.__r_.__value_.__s.__data_[0] = 44;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v12, (uint64_t)&__p, 1);
        v13 = (_QWORD *)std::ostream::operator<<();
        __p.__r_.__value_.__s.__data_[0] = 10;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)&__p, 1);
        a2 += 24;
      }
      while (a2 != v11);
    }
  }
  else
  {
    v14 = *ikinemaLogObject();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      FIK::Enrollment::DataLogger::exportEnrollment(v14, v15, v16, v17, v18, v19, v20, v21);
  }
  v25 = *v7;
  *(_QWORD *)((char *)&v26[-1] + *(_QWORD *)(v25 - 24)) = v7[3];
  MEMORY[0x212BCAEB8](v26);
  std::ostream::~ostream();
  return MEMORY[0x212BCAF90](v27);
}

uint64_t FIK::Enrollment::DataLogger::exportComputedSources(uint64_t a1, _QWORD *a2, uint64_t a3, FIK *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[2];
  int v23;
  std::string v24;
  std::string __p;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[16];
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  _QWORD v47[51];
  _QWORD v48[22];

  v48[21] = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v24 = *(std::string *)a1;
  FIK::Enrollment::combinePath("computed_sources.csv", 0x14uLL, &v24, &__p);
  FIK::Enrollment::Exporter::Exporter((uint64_t)&v46);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (v47[15])
  {
    FIK::Enrollment::queryNames<FIK::RigBoneBase>(a4, (uint64_t *)&__p);
    FIK::Enrollment::Exporter::setupForNames((uint64_t)&v46, &__p);
    __p.__r_.__value_.__r.__words[0] = 0;
    if (__p.__r_.__value_.__r.__words[2])
      (*(void (**)(uint64_t, std::string::size_type, _QWORD, uint64_t))(*(_QWORD *)v26 + 24))(v26, __p.__r_.__value_.__r.__words[2], 0, 8);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    FIK::IKArray<FIK::Transform>::IKArray(&__p.__r_.__value_.__r.__words[2], (_QWORD *)(a3 + 16));
    FIK::IKArray<BOOL>::IKArray(&v29, (_QWORD *)(a3 + 48));
    FIK::IKArray<FIK::Enrollment::LiftedSource>::IKArray(&v32, (_QWORD *)(a3 + 80));
    FIK::IKArray<FIK::Enrollment::RaySource>::IKArray(&v35, (_QWORD *)(a3 + 112));
    FIK::IKArray<FIK::Enrollment::LiftedSource>::IKArray(&v38, (_QWORD *)(a3 + 144));
    LOBYTE(v41[0]) = 0;
    v44 = 0;
    std::__optional_storage_base<FIK::Enrollment::VirtualSourceController,false>::__construct_from[abi:nn180100]<std::__optional_copy_base<FIK::Enrollment::VirtualSourceController,false> const&>(v41, a3 + 176);
    v45 = *(_BYTE *)(a3 + 336);
    v23 = 0;
    v7 = a2[1];
    if (v7)
    {
      v8 = 0;
      do
      {
        v22[0] = v8 + *a2;
        v22[1] = 1;
        v9 = FIK::Enrollment::FrameAdaptor::ID((FIK::Enrollment::FrameAdaptor *)v22);
        v10 = FIK::Enrollment::DataPreprocessor::generateSolverSources((int *)&__p, (uint64_t)a2, v9, &v23);
        v12 = v11;
        FIK::Enrollment::FrameAdaptor::ID((FIK::Enrollment::FrameAdaptor *)v22);
        FIK::Enrollment::Exporter::appendPoseToFile((uint64_t)&v46, v10, v12);
        v8 += 160;
        --v7;
      }
      while (v7);
    }
    if (v44)
    {
      v41[14] = 0;
      if (v42)
        (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v43 + 24))(v43, v42, 0, 8);
    }
    v38 = 0;
    if (v39)
      (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v40 + 24))(v40, v39, 0, 8);
    v35 = 0;
    if (v36)
      (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v37 + 24))(v37, v36, 0, 8);
    v32 = 0;
    if (v33)
      (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v34 + 24))(v34, v33, 0, 8);
    v29 = 0;
    if (v30)
      (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v31 + 24))(v31, v30, 0, 8);
    __p.__r_.__value_.__r.__words[2] = 0;
    if (v27)
      (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v28 + 24))(v28, v27, 0, 8);
  }
  else
  {
    v13 = *ikinemaLogObject();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      FIK::Enrollment::DataLogger::exportComputedSources(v13, v14, v15, v16, v17, v18, v19, v20);
  }
  v46 = *MEMORY[0x24BEDB7E8];
  *(_QWORD *)((char *)&v47[-1] + *(_QWORD *)(v46 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 24);
  MEMORY[0x212BCAEB8](v47);
  std::ostream::~ostream();
  return MEMORY[0x212BCAF90](v48);
}

_QWORD *FIK::Enrollment::queryNames<FIK::RigBoneBase>@<X0>(FIK *a1@<X0>, uint64_t *a2@<X8>)
{
  void (***v4)(FIK::CrtAllocator *__hidden);
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  void *v11;
  _QWORD *v12;

  v4 = FIK::defaultAllocator(a1);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = (uint64_t)v4;
  result = FIK::IKArray<std::string_view>::reserve(a2, *(_QWORD *)a1);
  if (*(_QWORD *)a1)
  {
    v6 = *((_QWORD *)a1 + 2);
    v7 = *a2;
    v8 = 96 * *(_QWORD *)a1;
    v9 = (uint64_t *)(v6 + 16);
    do
    {
      v10 = *v9;
      if (*v9)
        v11 = (void *)*(v9 - 1);
      else
        v11 = &unk_2108059BE;
      result = FIK::IKArray<std::string_view>::reserve(a2, v7 + 1);
      v12 = (_QWORD *)(a2[2] + 16 * *a2);
      *v12 = v11;
      v12[1] = v10;
      v7 = *a2 + 1;
      *a2 = v7;
      v9 += 12;
      v8 -= 96;
    }
    while (v8);
  }
  return result;
}

_QWORD *FIK::Enrollment::DataLogger::setupTaskExporter(_QWORD *result, FIK *a2)
{
  uint64_t v2;
  uint64_t v3[2];
  uint64_t v4;
  uint64_t v5;

  if (result[19])
  {
    v2 = (uint64_t)(result + 3);
    FIK::Enrollment::queryNames<FIK::MoCapTask>(a2, v3);
    result = FIK::Enrollment::Exporter::setupForNames(v2, v3);
    v3[0] = 0;
    if (v4)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v5 + 24))(v5, v4, 0, 8);
  }
  return result;
}

_QWORD *FIK::Enrollment::queryNames<FIK::MoCapTask>@<X0>(FIK *a1@<X0>, uint64_t *a2@<X8>)
{
  void (***v4)(FIK::CrtAllocator *__hidden);
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  void *v11;
  _QWORD *v12;

  v4 = FIK::defaultAllocator(a1);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = (uint64_t)v4;
  result = FIK::IKArray<std::string_view>::reserve(a2, *(_QWORD *)a1);
  if (*(_QWORD *)a1)
  {
    v6 = *((_QWORD *)a1 + 2);
    v7 = *a2;
    v8 = *(_QWORD *)a1 << 8;
    v9 = (uint64_t *)(v6 + 8);
    do
    {
      v10 = *v9;
      if (*v9)
        v11 = (void *)*(v9 - 1);
      else
        v11 = &unk_2108059BE;
      result = FIK::IKArray<std::string_view>::reserve(a2, v7 + 1);
      v12 = (_QWORD *)(a2[2] + 16 * *a2);
      *v12 = v11;
      v12[1] = v10;
      v7 = *a2 + 1;
      *a2 = v7;
      v9 += 32;
      v8 -= 256;
    }
    while (v8);
  }
  return result;
}

uint64_t FIK::Enrollment::DataLogger::exportTasksFrame(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(_QWORD *)(result + 152))
    return FIK::Enrollment::Exporter::appendPoseToFile(result + 24, a2, a3);
  return result;
}

_QWORD *FIK::Enrollment::DataLogger::setupSolveExporter(_QWORD *result, FIK *a2)
{
  uint64_t v2;
  uint64_t v3[2];
  uint64_t v4;
  uint64_t v5;

  if (result[92])
  {
    v2 = (uint64_t)(result + 76);
    FIK::Enrollment::queryNames<FIK::MoCapBone>(a2, v3);
    FIK::IKArray<std::string_view>::push_back<char const(&)[4],void>(v3, "vio");
    result = FIK::Enrollment::Exporter::setupForNames(v2, v3);
    v3[0] = 0;
    if (v4)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v5 + 24))(v5, v4, 0, 8);
  }
  return result;
}

_QWORD *FIK::Enrollment::queryNames<FIK::MoCapBone>@<X0>(FIK *a1@<X0>, uint64_t *a2@<X8>)
{
  void (***v4)(FIK::CrtAllocator *__hidden);
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  void *v11;
  _QWORD *v12;

  v4 = FIK::defaultAllocator(a1);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = (uint64_t)v4;
  result = FIK::IKArray<std::string_view>::reserve(a2, *(_QWORD *)a1);
  if (*(_QWORD *)a1)
  {
    v6 = *((_QWORD *)a1 + 2);
    v7 = *a2;
    v8 = 544 * *(_QWORD *)a1;
    v9 = (uint64_t *)(v6 + 16);
    do
    {
      v10 = *v9;
      if (*v9)
        v11 = (void *)*(v9 - 1);
      else
        v11 = &unk_2108059BE;
      result = FIK::IKArray<std::string_view>::reserve(a2, v7 + 1);
      v12 = (_QWORD *)(a2[2] + 16 * *a2);
      *v12 = v11;
      v12[1] = v10;
      v7 = *a2 + 1;
      *a2 = v7;
      v9 += 68;
      v8 -= 544;
    }
    while (v8);
  }
  return result;
}

size_t FIK::IKArray<std::string_view>::push_back<char const(&)[4],void>(uint64_t *a1, const char *a2)
{
  uint64_t v4;
  const char **v5;
  size_t result;

  FIK::IKArray<std::string_view>::reserve(a1, *a1 + 1);
  v4 = *a1;
  v5 = (const char **)(a1[2] + 16 * *a1);
  *v5 = a2;
  result = strlen(a2);
  v5[1] = (const char *)result;
  *a1 = v4 + 1;
  return result;
}

FIK *FIK::Enrollment::DataLogger::exportSolvedFrame(FIK *result, _OWORD *a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  void (***v9)(FIK::CrtAllocator *__hidden);
  _OWORD *v10;
  _OWORD *v11;
  _OWORD *v12;
  uint64_t v13;
  _OWORD *v14;
  uint64_t v15;

  if (*((_QWORD *)result + 92))
  {
    v7 = (uint64_t)result + 608;
    v8 = a3 + 1;
    v9 = FIK::defaultAllocator(result);
    FIK::IKArray<FIK::Transform>::IKArray<FIK::Transform,void>(&v13, v8, (uint64_t)v9);
    v10 = v14;
    if (a3)
    {
      v11 = &a2[2 * a3];
      do
      {
        *v10 = *a2;
        v10[1] = a2[1];
        a2 += 2;
        v10 += 2;
      }
      while (a2 != v11);
      v10 = v14;
    }
    v12 = &v10[2 * v13];
    *(v12 - 2) = *a4;
    *(v12 - 1) = a4[1];
    result = (FIK *)FIK::Enrollment::Exporter::appendPoseToFile(v7, (uint64_t)v14, v13);
    v13 = 0;
    if (v14)
      return (FIK *)(*(uint64_t (**)(uint64_t, _OWORD *, _QWORD, uint64_t))(*(_QWORD *)v15 + 24))(v15, v14, 0, 8);
  }
  return result;
}

uint64_t FIK::Enrollment::SourceAndTargetDataLogger::SourceAndTargetDataLogger(uint64_t a1, void *__src, size_t __len)
{
  std::string *p_dst;
  size_t v7;
  size_t v8;
  std::chrono::system_clock::time_point v9;
  std::string *v10;
  std::string::size_type size;
  std::string v13;
  std::string __dst;
  std::string __p;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    p_dst = (std::string *)operator new(v7 + 1);
    __dst.__r_.__value_.__l.__size_ = __len;
    __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = __len;
  p_dst = &__dst;
  if (__len)
LABEL_8:
    memmove(p_dst, __src, __len);
  p_dst->__r_.__value_.__s.__data_[__len] = 0;
  v9.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  std::to_string(&v13, (double)v9.__d_.__rep_ / 1000000.0);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = &v13;
  else
    v10 = (std::string *)v13.__r_.__value_.__r.__words[0];
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  else
    size = v13.__r_.__value_.__l.__size_;
  FIK::Enrollment::combinePath(v10, size, &__dst, &__p);
  FIK::Enrollment::createPath(&__p, a1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  return a1;
}

BOOL FIK::Enrollment::SourceAndTargetDataLogger::exportOriginalSources(uint64_t a1, const char **a2, uint64_t a3, __int128 *a4, uint64_t a5)
{
  FIK *v9;
  uint64_t v10;
  void (***v11)(FIK::CrtAllocator *__hidden);
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::string __p;
  uint64_t v22;
  std::string v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[22];

  v27[21] = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v23 = *(std::string *)a1;
  FIK::Enrollment::combinePath("original_sources.csv", 0x14uLL, &v23, &__p);
  v9 = (FIK *)FIK::Enrollment::Exporter::Exporter((uint64_t)&v24);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  v10 = v26;
  if (v26)
  {
    v11 = FIK::defaultAllocator(v9);
    FIK::IKArray<std::string_view>::IKArray<char const* const,void>(&__p, a2, a3, (uint64_t)v11);
    FIK::Enrollment::Exporter::setupForNames((uint64_t)&v24, &__p);
    __p.__r_.__value_.__r.__words[0] = 0;
    if (__p.__r_.__value_.__r.__words[2])
      (*(void (**)(uint64_t, std::string::size_type, _QWORD, uint64_t))(*(_QWORD *)v22 + 24))(v22, __p.__r_.__value_.__r.__words[2], 0, 8);
    FIK::Enrollment::Exporter::appendPoseToFile((uint64_t)&v24, a4, a5, 0);
  }
  else
  {
    v12 = *ikinemaLogObject();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      FIK::Enrollment::SourceAndTargetDataLogger::exportOriginalSources(v12, v13, v14, v15, v16, v17, v18, v19);
  }
  v24 = *MEMORY[0x24BEDB7E8];
  *(uint64_t *)((char *)&v24 + *(_QWORD *)(v24 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 24);
  MEMORY[0x212BCAEB8](&v25);
  std::ostream::~ostream();
  MEMORY[0x212BCAF90](v27);
  return v10 != 0;
}

BOOL FIK::Enrollment::SourceAndTargetDataLogger::exportProcessedSources(uint64_t a1, const char **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return FIK::Enrollment::SourceAndTargetDataLogger::exportToFile(a1, a2, a3, a4, a5, "computed_sources.csv", 0x14uLL);
}

BOOL FIK::Enrollment::SourceAndTargetDataLogger::exportToFile(uint64_t a1, const char **a2, uint64_t a3, uint64_t a4, uint64_t a5, void *__src, size_t __len)
{
  FIK *v13;
  uint64_t v14;
  void (***v15)(FIK::CrtAllocator *__hidden);
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::string __p;
  uint64_t v26;
  std::string v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[22];

  v31[21] = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v27 = *(std::string *)a1;
  FIK::Enrollment::combinePath(__src, __len, &v27, &__p);
  v13 = (FIK *)FIK::Enrollment::Exporter::Exporter((uint64_t)&v28);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  v14 = v30;
  if (v30)
  {
    v15 = FIK::defaultAllocator(v13);
    FIK::IKArray<std::string_view>::IKArray<char const* const,void>(&__p, a2, a3, (uint64_t)v15);
    FIK::Enrollment::Exporter::setupForNames((uint64_t)&v28, &__p);
    __p.__r_.__value_.__r.__words[0] = 0;
    if (__p.__r_.__value_.__r.__words[2])
      (*(void (**)(uint64_t, std::string::size_type, _QWORD, uint64_t))(*(_QWORD *)v26 + 24))(v26, __p.__r_.__value_.__r.__words[2], 0, 8);
    FIK::Enrollment::Exporter::appendPoseToFile((uint64_t)&v28, a4, a5);
  }
  else
  {
    v16 = *ikinemaLogObject();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      FIK::Enrollment::SourceAndTargetDataLogger::exportToFile(v16, v17, v18, v19, v20, v21, v22, v23);
  }
  v28 = *MEMORY[0x24BEDB7E8];
  *(uint64_t *)((char *)&v28 + *(_QWORD *)(v28 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 24);
  MEMORY[0x212BCAEB8](&v29);
  std::ostream::~ostream();
  MEMORY[0x212BCAF90](v31);
  return v14 != 0;
}

BOOL FIK::Enrollment::SourceAndTargetDataLogger::exportTargets(uint64_t a1, const char **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return FIK::Enrollment::SourceAndTargetDataLogger::exportToFile(a1, a2, a3, a4, a5, "solved_pose.csv", 0xFuLL);
}

BOOL FIK::Enrollment::SourceAndTargetDataLogger::exportEnrollmentData(uint64_t a1, const char **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  std::ios_base *v12;
  uint64_t v13;
  const char *v14;
  size_t v15;
  _QWORD *v16;
  _QWORD *v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::string v27;
  std::string __p;
  uint64_t v29;
  _BYTE v30[120];
  uint64_t v31;
  _QWORD v32[21];

  v32[19] = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v27 = *(std::string *)a1;
  FIK::Enrollment::combinePath("enrollment.csv", 0xEuLL, &v27, &__p);
  v7 = MEMORY[0x24BEDB840];
  v8 = MEMORY[0x24BEDB840] + 64;
  v9 = (uint64_t *)MEMORY[0x24BEDB7E8];
  v10 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 8);
  v11 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 16);
  v32[0] = MEMORY[0x24BEDB840] + 64;
  v29 = v10;
  *(_QWORD *)&v30[*(_QWORD *)(v10 - 24) - 8] = v11;
  v12 = (std::ios_base *)&v30[*(_QWORD *)(v29 - 24) - 8];
  std::ios_base::init(v12, v30);
  v12[1].__vftable = 0;
  v12[1].__fmtflags_ = -1;
  v29 = v7 + 24;
  v32[0] = v8;
  MEMORY[0x212BCAEAC](v30);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)&v30[*(_QWORD *)(v29 - 24) - 8], *(_DWORD *)&v30[*(_QWORD *)(v29 - 24) + 24] | 4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  v13 = v31;
  if (v31)
  {
    for (; a3; --a3)
    {
      v14 = *a2++;
      v15 = strlen(v14);
      v16 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v29, (uint64_t)v14, v15);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, (uint64_t)",", 1);
      a4 += 4;
      v17 = (_QWORD *)std::ostream::operator<<();
      __p.__r_.__value_.__s.__data_[0] = 10;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)&__p, 1);
    }
  }
  else
  {
    v18 = *ikinemaLogObject();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      FIK::Enrollment::SourceAndTargetDataLogger::exportEnrollmentData(v18, v19, v20, v21, v22, v23, v24, v25);
  }
  v29 = *v9;
  *(_QWORD *)&v30[*(_QWORD *)(v29 - 24) - 8] = v9[3];
  MEMORY[0x212BCAEB8](v30);
  std::ostream::~ostream();
  MEMORY[0x212BCAF90](v32);
  return v13 != 0;
}

BOOL FIK::Enrollment::SourceAndTargetDataLogger::exportAtlasData(std::string *this, const FIK::Transform *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  __int128 v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *__p[2];
  __int128 v23;
  uint64_t v24;
  std::string v25;
  uint64_t v26;
  _BYTE v27[120];
  uint64_t v28;
  _QWORD v29[20];

  v29[19] = *MEMORY[0x24BDAC8D0];
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v25, this->__r_.__value_.__l.__data_, this->__r_.__value_.__l.__size_);
  else
    v25 = *this;
  FIK::Enrollment::combinePath("atlas_pose.csv", 0xEuLL, &v25, (std::string *)__p);
  v3 = MEMORY[0x24BEDB840];
  v4 = MEMORY[0x24BEDB840] + 64;
  v5 = (uint64_t *)MEMORY[0x24BEDB7E8];
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 8);
  v7 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 16);
  v29[0] = MEMORY[0x24BEDB840] + 64;
  v26 = v6;
  *(_QWORD *)&v27[*(_QWORD *)(v6 - 24) - 8] = v7;
  v8 = (std::ios_base *)&v27[*(_QWORD *)(v26 - 24) - 8];
  std::ios_base::init(v8, v27);
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v26 = v3 + 24;
  v29[0] = v4;
  MEMORY[0x212BCAEAC](v27);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)&v27[*(_QWORD *)(v26 - 24) - 8], *(_DWORD *)&v27[*(_QWORD *)(v26 - 24) + 24] | 4);
  if (SBYTE7(v23) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  v9 = v28;
  if (v28)
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v26, (uint64_t)"timeStamp,info#frame", 20);
    __p[0] = "Atlas";
    __p[1] = (void *)5;
    v10 = FIK::Enrollment::operator<<(&v26, (__int128 *)__p);
    LOBYTE(v24) = 10;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v10, (uint64_t)&v24, 1);
    v24 = 0;
    v11 = (_QWORD *)FIK::Enrollment::operator<<((uint64_t)&v26);
    v12 = *((_OWORD *)a2 + 1);
    *(_OWORD *)__p = *(_OWORD *)a2;
    v23 = v12;
    FIK::Enrollment::operator<<(v11, (uint64_t)__p);
  }
  else
  {
    v13 = *ikinemaLogObject();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      FIK::Enrollment::SourceAndTargetDataLogger::exportAtlasData(v13, v14, v15, v16, v17, v18, v19, v20);
  }
  v26 = *v5;
  *(_QWORD *)&v27[*(_QWORD *)(v26 - 24) - 8] = v5[3];
  MEMORY[0x212BCAEB8](v27);
  std::ostream::~ostream();
  MEMORY[0x212BCAF90](v29);
  return v9 != 0;
}

_QWORD *FIK::Enrollment::operator<<(_QWORD *a1, __int128 *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v9 = *a2;
  v4 = FIK::Enrollment::operator<<(a1, (uint64_t *)&v9);
  v8 = *a2;
  v5 = FIK::Enrollment::operator<<(v4, (uint64_t *)&v8);
  v7 = *a2;
  FIK::Enrollment::operator<<(v5, (uint64_t *)&v7);
  return a1;
}

_QWORD *FIK::Enrollment::operator<<(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  char v8;

  v4 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a1, (uint64_t)",", 1);
  v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v4, *a2, a2[1]);
  v8 = 35;
  v6 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v5, (uint64_t)&v8, 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v6, a2[2], a2[3]);
  return a1;
}

{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;

  v4 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a1, (uint64_t)",", 1);
  v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v4, *a2, a2[1]);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v5, (uint64_t)"#translateX", 11);
  v6 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a1, (uint64_t)",", 1);
  v7 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v6, *a2, a2[1]);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v7, (uint64_t)"#translateY", 11);
  v8 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a1, (uint64_t)",", 1);
  v9 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v8, *a2, a2[1]);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v9, (uint64_t)"#translateZ", 11);
  return a1;
}

{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;

  v4 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a1, (uint64_t)",", 1);
  v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v4, *a2, a2[1]);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v5, (uint64_t)"#rotateX", 8);
  v6 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a1, (uint64_t)",", 1);
  v7 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v6, *a2, a2[1]);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v7, (uint64_t)"#rotateY", 8);
  v8 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a1, (uint64_t)",", 1);
  v9 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v8, *a2, a2[1]);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v9, (uint64_t)"#rotateZ", 8);
  return a1;
}

{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a1, (uint64_t)",", 1);
  v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v4, *a2, a2[1]);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v5, (uint64_t)"#rotateQX", 9);
  v6 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a1, (uint64_t)",", 1);
  v7 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v6, *a2, a2[1]);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v7, (uint64_t)"#rotateQY", 9);
  v8 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a1, (uint64_t)",", 1);
  v9 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v8, *a2, a2[1]);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v9, (uint64_t)"#rotateQZ", 9);
  v10 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a1, (uint64_t)",", 1);
  v11 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v10, *a2, a2[1]);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v11, (uint64_t)"#rotateQW", 9);
  return a1;
}

_QWORD *FIK::Enrollment::operator<<(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  char v5;
  char v6;
  char v7;

  v5 = 44;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a1, (uint64_t)&v5, 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v6 = 44;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v2, (uint64_t)&v6, 1);
  v3 = (_QWORD *)std::ostream::operator<<();
  v7 = 44;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v3, (uint64_t)&v7, 1);
  std::ostream::operator<<();
  return a1;
}

void FIK::Enrollment::eulerAnglesDegreesFromQuat(float *a1@<X0>, _OWORD *a2@<X8>)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  __int128 v13;
  float v14;
  float v15;
  float v16;

  v3 = *a1;
  v4 = a1[1];
  v6 = a1[2];
  v5 = a1[3];
  v7 = -v6;
  v8 = -*a1;
  v9 = *a1 * v5;
  v10 = (float)((float)(v4 * v5) + (float)(v6 * *a1)) + (float)((float)(v4 * v5) + (float)(v6 * *a1));
  v11 = 1.0;
  if (v10 <= 1.0)
    v11 = (float)((float)(v4 * v5) + (float)(v6 * *a1)) + (float)((float)(v4 * v5) + (float)(v6 * *a1));
  if (v10 < -1.0)
    v11 = -1.0;
  v16 = asinf(v11);
  if (fabsf(v10) >= 0.9999)
  {
    v14 = atan2f((float)(v9 + (float)(v4 * v6)) + (float)(v9 + (float)(v4 * v6)), (float)((float)((float)(v6 * v7) + (float)(v4 * v4)) + (float)(v5 * v5)) + (float)(v8 * v3));
    DWORD2(v13) = 0;
    *(_QWORD *)&v13 = __PAIR64__(LODWORD(v16), LODWORD(v14));
  }
  else
  {
    v15 = atan2f((float)-(float)(v9 - (float)(v4 * v6)) * -2.0, (float)((float)((float)(v5 * v5) + (float)(v6 * v6)) + (float)(v8 * v3)) - (float)(v4 * v4));
    v12 = atan2f((float)((float)(v5 * v7) + (float)(v3 * v4)) * -2.0, (float)((float)((float)(v3 * v3) - (float)(v4 * v4)) + (float)(v7 * v6)) + (float)(v5 * v5));
    *(_QWORD *)&v13 = __PAIR64__(LODWORD(v16), LODWORD(v15));
    *((float *)&v13 + 2) = v12;
  }
  HIDWORD(v13) = 0;
  *a2 = v13;
}

uint64_t std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(const void **a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  size_t v5;
  uint64_t result;
  char *v7;
  const void *v8;
  char *v9;

  if (*((char *)a1 + 23) >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = (size_t)a1[1];
  result = std::string::basic_string[abi:nn180100](a3, v5 + 1);
  if (*(char *)(result + 23) >= 0)
    v7 = (char *)result;
  else
    v7 = *(char **)result;
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0)
      v8 = a1;
    else
      v8 = *a1;
    result = (uint64_t)memmove(v7, v8, v5);
  }
  v9 = &v7[v5];
  *v9 = a2;
  v9[1] = 0;
  return result;
}

uint64_t std::string::basic_string[abi:nn180100](uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

_QWORD *FIK::Enrollment::SourceExporter::SourceExporter(_QWORD *a1, char *__s, uint64_t a3, const std::string::value_type ***a4)
{
  _QWORD *v6;
  uint64_t v7;
  unsigned int v8;
  const char *v9;
  int v10;
  const std::string::value_type **v11;
  const std::string::value_type **v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  size_t v16;
  std::string *v17;
  void **v18;
  std::string *v19;
  const char *v20;
  std::string::size_type v21;
  void **v22;
  size_t v23;
  std::string *v24;
  void **v25;
  std::string *v26;
  std::string::size_type v27;
  std::string::size_type size;
  std::string *v29;
  const std::string::value_type **v31;
  const std::string::value_type ***v32;
  uint64_t v33;
  std::string v34;
  std::string v35;
  uint64_t v36;
  void *__p[2];
  const char *v38;
  uint64_t v39;
  void **v40;
  size_t v41;
  char v42;

  strlen(__s);
  FIK::Enrollment::Exporter::Exporter((uint64_t)a1);
  a1[71] = (_QWORD)a4[1] * (_QWORD)a4[3];
  if (a1[16])
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a1, (uint64_t)"timeStamp,info#frame", 20);
    __p[0] = "hmd2world";
    __p[1] = (void *)9;
    v6 = FIK::Enrollment::operator<<(a1, (__int128 *)__p);
    v35.__r_.__value_.__r.__words[0] = (std::string::size_type)"Atlas";
    v35.__r_.__value_.__l.__size_ = 5;
    FIK::Enrollment::operator<<(v6, (__int128 *)&v35);
    v31 = a4[3];
    if (v31)
    {
      v7 = 0;
      v32 = a4;
      do
      {
        v33 = v7;
        v8 = *((_DWORD *)a4[2] + v7) - 1;
        v9 = "mcam_l";
        if (v8 <= 2)
          v9 = off_24CA6CB70[v8];
        v42 = 6;
        v10 = *(_DWORD *)v9;
        WORD2(v40) = *((_WORD *)v9 + 2);
        LODWORD(v40) = v10;
        BYTE6(v40) = 0;
        __p[0] = &v40;
        __p[1] = (void *)6;
        FIK::Enrollment::operator<<(a1, (__int128 *)__p);
        v11 = a4[1];
        if (v11)
        {
          v12 = *v32;
          v13 = 8 * (_QWORD)v11;
          do
          {
            v34.__r_.__value_.__r.__words[0] = (std::string::size_type)*v12;
            v34.__r_.__value_.__l.__size_ = strlen(v34.__r_.__value_.__l.__data_);
            v14 = FIK::Enrollment::operator<<(a1, (uint64_t *)&v34);
            __p[0] = (void *)*v12;
            __p[1] = (void *)strlen((const char *)__p[0]);
            v38 = "confidence";
            v39 = 10;
            v15 = FIK::Enrollment::operator<<(v14, (uint64_t *)__p);
            v35.__r_.__value_.__r.__words[0] = (std::string::size_type)*v12;
            v35.__r_.__value_.__l.__size_ = strlen(v35.__r_.__value_.__l.__data_);
            v35.__r_.__value_.__r.__words[2] = (std::string::size_type)"valid";
            v36 = 5;
            FIK::Enrollment::operator<<(v15, (uint64_t *)&v35);
            if (v42 >= 0)
              v16 = v42;
            else
              v16 = v41;
            std::string::basic_string[abi:nn180100]((uint64_t)&v35, v16 + 5);
            if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v17 = &v35;
            else
              v17 = (std::string *)v35.__r_.__value_.__r.__words[0];
            if (v16)
            {
              if (v42 >= 0)
                v18 = (void **)&v40;
              else
                v18 = v40;
              memmove(v17, v18, v16);
            }
            strcpy((char *)v17 + v16, "_ray_");
            v19 = std::string::append(&v35, *v12);
            v20 = (const char *)v19->__r_.__value_.__r.__words[2];
            *(_OWORD *)__p = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
            v38 = v20;
            v19->__r_.__value_.__l.__size_ = 0;
            v19->__r_.__value_.__r.__words[2] = 0;
            v19->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v35.__r_.__value_.__l.__data_);
            v21 = HIBYTE(v38);
            v22 = __p;
            if (SHIBYTE(v38) < 0)
            {
              v22 = (void **)__p[0];
              v21 = (std::string::size_type)__p[1];
            }
            v35.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
            v35.__r_.__value_.__l.__size_ = v21;
            FIK::Enrollment::operator<<(a1, (uint64_t *)&v35);
            if (v42 >= 0)
              v23 = v42;
            else
              v23 = v41;
            std::string::basic_string[abi:nn180100]((uint64_t)&v34, v23 + 8);
            if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v24 = &v34;
            else
              v24 = (std::string *)v34.__r_.__value_.__r.__words[0];
            if (v23)
            {
              if (v42 >= 0)
                v25 = (void **)&v40;
              else
                v25 = v40;
              memmove(v24, v25, v23);
            }
            strcpy((char *)v24 + v23, "_rayEnd_");
            v26 = std::string::append(&v34, *v12);
            v27 = v26->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
            v35.__r_.__value_.__r.__words[2] = v27;
            v26->__r_.__value_.__l.__size_ = 0;
            v26->__r_.__value_.__r.__words[2] = 0;
            v26->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v34.__r_.__value_.__l.__data_);
            size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
            if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v29 = &v35;
            else
              v29 = (std::string *)v35.__r_.__value_.__r.__words[0];
            if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              size = v35.__r_.__value_.__l.__size_;
            v34.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
            v34.__r_.__value_.__l.__size_ = size;
            FIK::Enrollment::operator<<(a1, (uint64_t *)&v34);
            if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v35.__r_.__value_.__l.__data_);
            if (SHIBYTE(v38) < 0)
              operator delete(__p[0]);
            ++v12;
            v13 -= 8;
          }
          while (v13);
        }
        if (v42 < 0)
          operator delete(v40);
        a4 = v32;
        v7 = v33 + 1;
      }
      while ((const std::string::value_type **)(v33 + 1) != v31);
    }
  }
  return a1;
}

_QWORD *FIK::IKArray<BOOL>::IKArray(_QWORD *a1, _QWORD *a2)
{
  size_t v4;
  uint64_t v5;
  void *v6;
  _BYTE *v7;
  uint64_t v8;
  char *v9;
  char v10;

  v4 = a2[1];
  v5 = a2[3];
  *a1 = *a2;
  a1[1] = v4;
  if (v4)
  {
    v6 = (void *)(*(uint64_t (**)(uint64_t, size_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v4, 1);
    a1[2] = v6;
    a1[3] = v5;
    bzero(v6, v4);
    v7 = (_BYTE *)a1[2];
  }
  else
  {
    v7 = 0;
    a1[2] = 0;
    a1[3] = v5;
  }
  v8 = *a2;
  if (*a2)
  {
    v9 = (char *)a2[2];
    do
    {
      v10 = *v9++;
      *v7++ = v10;
      --v8;
    }
    while (v8);
  }
  return a1;
}

_QWORD *FIK::IKArray<FIK::Enrollment::LiftedSource>::IKArray(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  v4 = a2[1];
  v5 = a2[3];
  *a1 = *a2;
  a1[1] = v4;
  if (v4)
  {
    v6 = 12 * v4;
    v7 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, 12 * v4, 4);
    a1[2] = v7;
    a1[3] = v5;
    if (v6)
    {
      bzero(v7, v6);
      v7 = (_DWORD *)a1[2];
    }
  }
  else
  {
    v7 = 0;
    a1[2] = 0;
    a1[3] = v5;
  }
  v8 = *a2;
  if (*a2)
  {
    v9 = (uint64_t *)a2[2];
    do
    {
      v10 = *v9;
      v7[2] = *((_DWORD *)v9 + 2);
      *(_QWORD *)v7 = v10;
      v7 += 3;
      v9 = (uint64_t *)((char *)v9 + 12);
      --v8;
    }
    while (v8);
  }
  return a1;
}

_QWORD *FIK::IKArray<FIK::Enrollment::RaySource>::IKArray(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  _QWORD *v7;
  uint64_t v8;
  __int128 *v9;
  __int128 v10;

  v4 = a2[1];
  v5 = a2[3];
  *a1 = *a2;
  a1[1] = v4;
  if (v4)
  {
    v6 = 24 * v4;
    v7 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, 24 * v4, 8);
    a1[2] = v7;
    a1[3] = v5;
    if (v6)
    {
      bzero(v7, v6);
      v7 = (_QWORD *)a1[2];
    }
  }
  else
  {
    v7 = 0;
    a1[2] = 0;
    a1[3] = v5;
  }
  v8 = *a2;
  if (*a2)
  {
    v9 = (__int128 *)a2[2];
    do
    {
      v10 = *v9;
      v7[2] = *((_QWORD *)v9 + 2);
      *(_OWORD *)v7 = v10;
      v7 += 3;
      v9 = (__int128 *)((char *)v9 + 24);
      --v8;
    }
    while (v8);
  }
  return a1;
}

_QWORD *std::__optional_storage_base<FIK::Enrollment::VirtualSourceController,false>::__construct_from[abi:nn180100]<std::__optional_copy_base<FIK::Enrollment::VirtualSourceController,false> const&>(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;

  if (*(_BYTE *)(a2 + 144))
  {
    v2 = result;
    *result = *(_QWORD *)a2;
    *((_DWORD *)result + 4) = *(_DWORD *)(a2 + 16);
    *((_OWORD *)result + 2) = *(_OWORD *)(a2 + 32);
    *((_OWORD *)result + 3) = *(_OWORD *)(a2 + 48);
    *((_DWORD *)result + 16) = *(_DWORD *)(a2 + 64);
    *((_OWORD *)result + 5) = *(_OWORD *)(a2 + 80);
    *((_OWORD *)result + 6) = *(_OWORD *)(a2 + 96);
    result = FIK::IKArray<FIK::Enrollment::VirtualSourceHierarchy::VirtualSourceDescriptor>::IKArray(result + 14, (_QWORD *)(a2 + 112));
    *((_BYTE *)v2 + 144) = 1;
  }
  return result;
}

_QWORD *FIK::IKArray<FIK::Enrollment::VirtualSourceHierarchy::VirtualSourceDescriptor>::IKArray(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a2[1];
  v5 = a2[3];
  *a1 = *a2;
  a1[1] = v4;
  if (v4)
  {
    v6 = 48 * v4;
    v7 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, 48 * v4, 16);
    a1[2] = v7;
    a1[3] = v5;
    if (v6)
    {
      bzero(v7, v6);
      v7 = (_OWORD *)a1[2];
    }
  }
  else
  {
    v7 = 0;
    a1[2] = 0;
    a1[3] = v5;
  }
  v8 = *a2;
  if (*a2)
  {
    v9 = a2[2];
    do
    {
      *(_DWORD *)v7 = *(_DWORD *)v9;
      v7[1] = *(_OWORD *)(v9 + 16);
      v7[2] = *(_OWORD *)(v9 + 32);
      v9 += 48;
      v7 += 3;
      --v8;
    }
    while (v8);
  }
  return a1;
}

_QWORD *FIK::IKArray<std::string_view>::IKArray<char const* const,void>(_QWORD *a1, const char **a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  size_t v9;
  const char **v10;
  const char **v11;
  uint64_t v12;
  const char *v13;

  v8 = (a3 + 7) & 0xFFFFFFFFFFFFFFF8;
  *a1 = a3;
  a1[1] = v8;
  if (!v8)
  {
    v11 = 0;
    a1[2] = 0;
    a1[3] = a4;
    if (!a3)
      return a1;
    goto LABEL_7;
  }
  v9 = 16 * v8;
  v10 = (const char **)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a4 + 16))(a4, 16 * v8, 8);
  v11 = v10;
  a1[2] = v10;
  a1[3] = a4;
  if (v9)
  {
    bzero(v10, v9);
    v11 = (const char **)a1[2];
  }
  if (a3)
  {
LABEL_7:
    v12 = 8 * a3;
    do
    {
      v13 = *a2++;
      *v11 = v13;
      v11[1] = (const char *)strlen(v13);
      v11 += 2;
      v12 -= 8;
    }
    while (v12);
  }
  return a1;
}

uint64_t FIK::FilterNode::FilteringTask::FilteringTask(uint64_t a1, IKString *a2, uint64_t a3, float32x4_t *a4, float a5)
{
  uint64_t v9;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  int32x4_t *v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  int32x4_t v18;
  float32x4_t v19;
  int32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float v23;
  float v24;
  uint64_t v25;
  float32x4_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  IKString::operator+(a2, "_Task", (FIK::Allocator *)5, &v28);
  *(_QWORD *)a1 = &unk_24CA6C6F8;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = 0;
  IKString::IKString((uint64_t *)(a1 + 24), &v28, v30);
  if (v29)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v30 + 24))(v30, v28, 0, 8);
    v28 = 0;
    v29 = 0;
  }
  *(_QWORD *)a1 = &off_24CA6AA20;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 64) = xmmword_210802BA0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  v9 = *(_QWORD *)(a1 + 8) + *(_QWORD *)(**(_QWORD **)(a1 + 8) - 264);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 200))(v9);
  v11 = (*(float (**)(uint64_t))(*(_QWORD *)v10 + 776))(v10) * 0.3;
  if (v11 <= 1.0)
    v12 = v11;
  else
    v12 = 1.0;
  if (v11 >= 0.3)
    v13 = v12;
  else
    v13 = 0.3;
  *(float *)(a1 + 144) = v13;
  *(float32x4_t *)(a1 + 128) = vmulq_n_f32(*a4, v13);
  v27 = *(float32x4_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 544))(v10);
  v14 = (int32x4_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 528))(v10);
  v15 = *(float32x4_t *)(a1 + 128);
  v16 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*v14, *v14), *(int8x16_t *)v14, 0xCuLL);
  v17 = vnegq_f32(*(float32x4_t *)v14);
  v18 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v15, (int32x4_t)v15), (int8x16_t)v15, 0xCuLL), v17), v15, v16);
  v19 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v18, v18), (int8x16_t)v18, 0xCuLL);
  v20 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v19, (int32x4_t)v19), (int8x16_t)v19, 0xCuLL), v17), v19, v16);
  v21.i64[0] = 0x4000000040000000;
  v21.i64[1] = 0x4000000040000000;
  v22 = vaddq_f32(v27, vmlaq_f32(v15, v21, vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v20, v20), (int8x16_t)v20, 0xCuLL), v19, *(float32x4_t *)v14, 3)));
  v23 = 0.999;
  if ((float)(1.0 - a5) <= 0.999)
    v23 = 1.0 - a5;
  v24 = 0.0;
  if ((float)(1.0 - a5) >= 0.0)
    v24 = v23;
  *(float32x4_t *)(a1 + 80) = v22;
  *(float32x4_t *)(a1 + 96) = v22;
  *(float *)(a1 + 112) = v24;
  *(float *)(a1 + 116) = (float)(v24 * 0.016667) / (float)(1.0 - v24);
  *(float *)(a1 + 120) = v24;
  *(_DWORD *)(a1 + 124) = 1114636288;
  v25 = *(_QWORD *)(a1 + 8) + *(_QWORD *)(**(_QWORD **)(a1 + 8) - 264);
  (*(void (**)(uint64_t, float))(*(_QWORD *)v25 + 72))(v25, 1.0);
  (*(void (**)(_QWORD, float, float, float))(**(_QWORD **)(a1 + 8) + 272))(*(_QWORD *)(a1 + 8), *(float *)(a1 + 128), *(float *)(a1 + 132), *(float *)(a1 + 136));
  return a1;
}

uint64_t FIK::FilterNode::FilteringTask::setTarget(uint64_t result, float32x4_t *a2)
{
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  int32x4_t v6;
  float32x4_t v7;
  int32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;

  if (*(_QWORD *)(result + 8))
  {
    v2 = a2[1];
    v3 = *(float32x4_t *)(result + 128);
    v4 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v2, (int32x4_t)v2), (int8x16_t)v2, 0xCuLL);
    v5 = vnegq_f32(v2);
    v6 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v3, (int32x4_t)v3), (int8x16_t)v3, 0xCuLL), v5), v3, v4);
    v7 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v6, v6), (int8x16_t)v6, 0xCuLL);
    v8 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v7, (int32x4_t)v7), (int8x16_t)v7, 0xCuLL), v5), v7, v4);
    v9 = vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v8, v8), (int8x16_t)v8, 0xCuLL), v7, v2, 3);
    v2.i64[0] = 0x4000000040000000;
    v2.i64[1] = 0x4000000040000000;
    v10 = vaddq_f32(*a2, vmlaq_f32(v3, v2, v9));
    return (*(uint64_t (**)(uint64_t, float32x4_t *))(*(_QWORD *)result + 8))(result, &v10);
  }
  return result;
}

uint64_t FIK::FilterNode::FilteringTask::setPositionTarget(float32x4_t *a1, float32x4_t *a2)
{
  uint64_t result;
  float v4;
  float v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;

  result = a1->i64[1];
  if (result)
  {
    v4 = a1[7].f32[0];
    v5 = a1[7].f32[1];
    v6 = vaddq_f32(vmulq_n_f32(*a2, v4), vmulq_n_f32(a1[5], 1.0 - v4));
    v7 = vaddq_f32(vmulq_n_f32(a1[6], 1.0 - v4), vmulq_n_f32(v6, v4));
    a1[5] = v6;
    a1[6] = v7;
    v8 = vsubq_f32(vmulq_n_f32(v6, v5 + 2.0), vmulq_n_f32(v7, v5 + 1.0));
    return (*(uint64_t (**)(uint64_t, float32x4_t *))(*(_QWORD *)result + 248))(result, &v8);
  }
  return result;
}

__n128 FIK::FilterNode::FilteringTask::setOffset(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_OWORD *)(a1 + 48) = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t FIK::FilterNode::FilteringTask::getOffset(FIK::FilterNode::FilteringTask *this)
{
  return (uint64_t)this + 48;
}

uint64_t FIK::FilterNode::Solve(_QWORD *a1, uint64_t a2)
{
  int v4;
  unint64_t v5;
  unsigned int v6;
  _OWORD *GlobalTransform;
  uint64_t v8;
  __int128 v9;
  void (***v10)(_QWORD, _OWORD *);
  uint64_t updated;
  _OWORD v13[2];
  uint64_t v14[20];

  (*(void (**)(_QWORD *))(*a1 + 16))(a1);
  FIK::PoseConverter::PoseConverter<FIK::MoCapBone>(v14, a1[46], a1[44], a2);
  if (FIK::IKSolver::numSegments((FIK::IKSolver *)(a1 + 2)))
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    do
    {
      GlobalTransform = (_OWORD *)FIK::PoseConverter::GetGlobalTransform((FIK::PoseConverter *)v14, v5);
      v8 = 0;
      v9 = GlobalTransform[1];
      v13[0] = *GlobalTransform;
      v13[1] = v9;
      do
      {
        v10 = (void (***)(_QWORD, _OWORD *))(a1[62] + 160 * (v4 + v8));
        (**v10)(v10, v13);
        ++v8;
      }
      while (v8 != 3);
      v4 += 3;
      v5 = ++v6;
    }
    while (FIK::IKSolver::numSegments((FIK::IKSolver *)(a1 + 2)) > (unint64_t)v6);
  }
  updated = FIK::AnimNode::SolveAndUpdatePose((uint64_t)a1, a2);
  FIK::PoseConverter::~PoseConverter((FIK::PoseConverter *)v14);
  return updated;
}

float FIK::FilterNode::GetFilterAlpha(FIK::FilterNode *this)
{
  return *((float *)this + 118);
}

float FIK::FilterNode::SetFilterAlpha(FIK::FilterNode *this, float result)
{
  uint64_t v2;
  float v3;
  BOOL v4;
  float *v5;
  uint64_t v6;
  float v7;

  *((float *)this + 118) = result;
  v2 = *((_QWORD *)this + 60);
  if (v2)
  {
    v3 = 0.99;
    if (result <= 0.99)
      v3 = result;
    v4 = result < 0.0;
    result = 0.0;
    if (!v4)
      result = v3;
    v5 = (float *)(*((_QWORD *)this + 62) + 124);
    v6 = 160 * v2;
    do
    {
      v7 = (float)(result * (float)(1.0 / *v5)) / (float)(1.0 - result);
      *(v5 - 3) = result;
      *(v5 - 2) = v7;
      *(v5 - 1) = result;
      v5 += 40;
      v6 -= 160;
    }
    while (v6);
  }
  return result;
}

uint64_t FIK::FilterNode::FilterNode(uint64_t a1, uint64_t a2)
{
  FIK *v3;
  void (***v4)(FIK::CrtAllocator *__hidden);
  unint64_t v5;
  const FIK::Segment *Segment;
  char *v7;
  uint64_t i;
  FIK *v9;
  void (***v10)(FIK::CrtAllocator *__hidden);
  IKString *v11;
  float v12;
  int v14;
  uint64_t v15;
  uint64_t v16;
  void (***v17)(FIK::CrtAllocator *__hidden);
  _QWORD v18[5];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v3 = (FIK *)FIK::AnimNode::AnimNode(a1, a2);
  *(_QWORD *)v3 = off_24CA6AA58;
  *((_DWORD *)v3 + 118) = 0;
  v4 = FIK::defaultAllocator(v3);
  *(_QWORD *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 504) = v4;
  if (FIK::IKSolver::numSegments((FIK::IKSolver *)(a1 + 16)))
  {
    LODWORD(v5) = 0;
    do
    {
      v14 = v5;
      Segment = (const FIK::Segment *)FIK::IKSolver::getSegment((FIK::IKSolver *)(a1 + 16), v5);
      v7 = (char *)(*(uint64_t (**)(const FIK::Segment *))(*(_QWORD *)Segment + 936))(Segment);
      for (i = 0; i != 48; i += 16)
      {
        v9 = (FIK *)FIK::IKSolver::addPositionTask((FIK::Solver **)(a1 + 16), Segment);
        v10 = FIK::defaultAllocator(v9);
        v15 = 0;
        v16 = 0;
        v17 = v10;
        v11 = (IKString *)strlen(v7);
        IKString::assign(&v15, v7, v11);
        FIK::FilterNode::FilteringTask::FilteringTask((uint64_t)v18, (IKString *)&v15, (uint64_t)v9, (float32x4_t *)((char *)&FIK::FilterNode::FilterNode(FIK::MoCapRig const&)::markerlocalPositions + i), *(float *)(a1 + 472));
        if (v16)
          ((void (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v17)[3])(v17, v15, 0, 8);
        v12 = FIK::IKArray<FIK::FilterNode::FilteringTask>::push_back<FIK::FilterNode::FilteringTask&,void>((_QWORD *)(a1 + 480), (uint64_t)v18);
        v18[0] = &unk_24CA6C6F8;
        if (v18[4])
          (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t, float))(*(_QWORD *)v19 + 24))(v19, v18[3], 0, 8, v12);
      }
      v5 = (v14 + 1);
    }
    while (FIK::IKSolver::numSegments((FIK::IKSolver *)(a1 + 16)) > v5);
  }
  return a1;
}

float FIK::IKArray<FIK::FilterNode::FilteringTask>::push_back<FIK::FilterNode::FilteringTask&,void>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  float result;

  FIK::IKArray<FIK::FilterNode::FilteringTask>::reserve((uint64_t)a1, *a1 + 1);
  v4 = a1[2] + 160 * *a1;
  *(_QWORD *)v4 = &unk_24CA6C6F8;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a2 + 8);
  IKString::IKString((IKString *)(v4 + 24), (const IKString *)(a2 + 24));
  *(_QWORD *)v4 = &off_24CA6AA20;
  *(_OWORD *)(v4 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v4 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v4 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v4 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(v4 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(v4 + 128) = *(_OWORD *)(a2 + 128);
  result = *(float *)(a2 + 144);
  *(float *)(v4 + 144) = result;
  ++*a1;
  return result;
}

uint64_t FIK::FilterNode::constraintsCount(FIK::FilterNode *this)
{
  return *((_QWORD *)this + 60);
}

unint64_t FIK::FilterNode::constraintByIndex(FIK::FilterNode *this, unint64_t a2)
{
  if (*((_QWORD *)this + 60) <= a2)
    return 0;
  else
    return *((_QWORD *)this + 62) + 160 * a2;
}

void FIK::FilterNode::~FilterNode(FIK::FilterNode *this)
{
  *(_QWORD *)this = off_24CA6AA58;
  FIK::IKArray<FIK::FilterNode::FilteringTask>::~IKArray((uint64_t)this + 480);
  FIK::AnimNode::~AnimNode(this);
}

{
  void *v2;

  *(_QWORD *)this = off_24CA6AA58;
  FIK::IKArray<FIK::FilterNode::FilteringTask>::~IKArray((uint64_t)this + 480);
  FIK::AnimNode::~AnimNode(this);
  FIK::AnimNode::operator delete(v2);
}

uint64_t FIK::IKArray<FIK::FilterNode::FilteringTask>::~IKArray(uint64_t a1)
{
  uint64_t v2;

  std::destroy_n[abi:nn180100]<FIK::FilterNode::FilteringTask *,unsigned long>(*(_QWORD *)(a1 + 16), *(_QWORD *)a1);
  *(_QWORD *)a1 = 0;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24), v2, 0, 8);
  return a1;
}

uint64_t std::destroy_n[abi:nn180100]<FIK::FilterNode::FilteringTask *,unsigned long>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (a2)
  {
    v3 = a2;
    do
    {
      *(_QWORD *)a1 = &unk_24CA6C6F8;
      if (*(_QWORD *)(a1 + 32))
      {
        (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 24), 0, 8);
        *(_QWORD *)(a1 + 24) = 0;
        *(_QWORD *)(a1 + 32) = 0;
      }
      a1 += 160;
      --v3;
    }
    while (v3);
  }
  return a1;
}

uint64_t FIK::IKArray<FIK::FilterNode::FilteringTask>::reserve(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_QWORD *)(result + 8) < a2)
  {
    v2 = result;
    v3 = *(_QWORD *)(result + 24);
    v4 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v4)
    {
      v5 = (void *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)v3 + 16))(*(_QWORD *)(result + 24), 160 * v4, 16);
      v6 = (uint64_t)v5;
      if (160 * v4)
        bzero(v5, 160 * v4);
    }
    else
    {
      v6 = 0;
    }
    FIK::IKArray<FIK::FilterNode::FilteringTask>::moveRange(*(IKString **)(v2 + 16), *(_QWORD *)v2, v6);
    v7 = *(_QWORD *)(v2 + 16);
    v8 = *(_QWORD *)(v2 + 24);
    *(_QWORD *)(v2 + 8) = v4;
    *(_QWORD *)(v2 + 16) = v6;
    *(_QWORD *)(v2 + 24) = v3;
    result = std::destroy_n[abi:nn180100]<FIK::FilterNode::FilteringTask *,unsigned long>(v7, *(_QWORD *)v2);
    if (v7)
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v8 + 24))(v8, v7, 0, 8);
  }
  return result;
}

IKString *FIK::IKArray<FIK::FilterNode::FilteringTask>::moveRange(IKString *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  IKString *v4;
  char *v5;
  uint64_t v6;

  if (a2)
  {
    v3 = a2;
    v4 = result;
    result = (IKString *)(a3 + 24);
    v5 = (char *)v4 + 80;
    do
    {
      *((_QWORD *)result - 3) = &unk_24CA6C6F8;
      *((_OWORD *)result - 1) = *(_OWORD *)(v5 - 72);
      IKString::IKString(result, (const IKString *)(v5 - 56));
      *(_QWORD *)(v6 - 24) = &off_24CA6AA20;
      *(_OWORD *)(v6 + 24) = *((_OWORD *)v5 - 2);
      *(_OWORD *)(v6 + 40) = *((_OWORD *)v5 - 1);
      *(_OWORD *)(v6 + 56) = *(_OWORD *)v5;
      *(_OWORD *)(v6 + 72) = *((_OWORD *)v5 + 1);
      *(_OWORD *)(v6 + 88) = *((_OWORD *)v5 + 2);
      *(_OWORD *)(v6 + 104) = *((_OWORD *)v5 + 3);
      *(_DWORD *)(v6 + 120) = *((_DWORD *)v5 + 16);
      result = (IKString *)(v6 + 160);
      v5 += 160;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t FIK::RetargetingNode::createTasks(FIK::RetargetingNode *this)
{
  _QWORD *v2;
  uint64_t result;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  float32x4_t *v7;
  const FIK::Segment **v8;
  const FIK::RigTask *v9;
  __n128 v10;
  _QWORD v11[5];
  uint64_t v12;

  v2 = (_QWORD *)((char *)this + 528);
  result = FIK::IKArray<FIK::RetargetingNode::RetargetTask>::reserve((uint64_t)this + 528, *((_QWORD *)this + 40));
  v4 = *((_QWORD *)this + 40);
  if (v4)
  {
    v5 = (_BYTE *)*((_QWORD *)this + 42);
    v6 = v4 << 8;
    do
    {
      if (v5[52])
        v7 = FIK::IKSolver::addPositionTask((FIK::Solver **)this + 2, (const IKString *)(v5 + 24));
      else
        v7 = 0;
      if (v5[53])
        v8 = FIK::IKSolver::addOrientationTask((FIK::Solver **)this + 2, (_QWORD *)v5 + 3);
      else
        v8 = 0;
      FIK::RetargetingNode::RetargetTask::RetargetTask((uint64_t)v11, (uint64_t)v7, (uint64_t)v8, (IKString *)v5);
      v10 = FIK::IKArray<FIK::RetargetingNode::RetargetTask>::push_back<FIK::RetargetingNode::RetargetTask,void>(v2, (uint64_t)v11);
      v11[0] = &unk_24CA6C6F8;
      if (v11[4])
        (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t, __n128))(*(_QWORD *)v12 + 24))(v12, v11[3], 0, 8, v10);
      result = FIK::AnimNode::updateConstraintSettings(*((_QWORD *)this + 68) + 112 * *((_QWORD *)this + 66) - 112, (ikinema::Constraint *)v5, v9);
      v5 += 256;
      v6 -= 256;
    }
    while (v6);
  }
  return result;
}

uint64_t FIK::IKArray<FIK::RetargetingNode::RetargetTask>::reserve(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_QWORD *)(result + 8) < a2)
  {
    v2 = result;
    v3 = *(_QWORD *)(result + 24);
    v4 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v4)
    {
      v5 = (void *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)v3 + 16))(*(_QWORD *)(result + 24), 112 * v4, 16);
      v6 = (uint64_t)v5;
      if (112 * v4)
        bzero(v5, 112 * v4);
    }
    else
    {
      v6 = 0;
    }
    FIK::IKArray<FIK::RetargetingNode::RetargetTask>::moveRange(*(uint64_t **)(v2 + 16), *(_QWORD *)v2, v6);
    v7 = *(_QWORD *)(v2 + 16);
    v8 = *(_QWORD *)(v2 + 24);
    *(_QWORD *)(v2 + 8) = v4;
    *(_QWORD *)(v2 + 16) = v6;
    *(_QWORD *)(v2 + 24) = v3;
    result = std::destroy_n[abi:nn180100]<FIK::RetargetingNode::RetargetTask *,unsigned long>(v7, *(_QWORD *)v2);
    if (v7)
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v8 + 24))(v8, v7, 0, 8);
  }
  return result;
}

__n128 FIK::IKArray<FIK::RetargetingNode::RetargetTask>::push_back<FIK::RetargetingNode::RetargetTask,void>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  __n128 result;

  FIK::IKArray<FIK::RetargetingNode::RetargetTask>::reserve((uint64_t)a1, *a1 + 1);
  v4 = a1[2] + 112 * *a1;
  *(_QWORD *)v4 = &unk_24CA6C6F8;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a2 + 8);
  IKString::IKString((uint64_t *)(v4 + 24), (uint64_t *)(a2 + 24), *(_QWORD *)(a2 + 40));
  *(_QWORD *)v4 = &off_24CA6BF70;
  *(_OWORD *)(v4 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v4 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v4 + 80) = *(_OWORD *)(a2 + 80);
  result = *(__n128 *)(a2 + 96);
  *(__n128 *)(v4 + 96) = result;
  ++*a1;
  return result;
}

uint64_t FIK::RetargetingNode::createAlgorithmBlocks(FIK::RetargetingNode *this)
{
  FIK *v2;
  void (***v3)(FIK::CrtAllocator *__hidden);
  FIK *v4;
  void (***v5)(FIK::CrtAllocator *__hidden);
  uint64_t v6;
  uint64_t v7;
  float *v8;
  uint64_t result;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  void (***v14)(FIK::CrtAllocator *__hidden);
  uint64_t v15;
  __int128 v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v12 = 0;
  v13 = 0;
  v14 = FIK::defaultAllocator(this);
  IKString::assign(&v12, "sources", (IKString *)7);
  v2 = (FIK *)FIK::AnimNode::registerBuffer<FIK::Transform>((uint64_t)this, (uint64_t)&v12, *((_QWORD *)this + 48));
  *((_QWORD *)this + 59) = v2;
  if (v13)
    v2 = (FIK *)((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v14)[3])(v14, v12, 0, 8);
  v3 = FIK::defaultAllocator(v2);
  v12 = 0;
  v13 = 0;
  v14 = v3;
  IKString::assign(&v12, "output", (IKString *)6);
  v4 = (FIK *)FIK::AnimNode::registerBuffer<FIK::Transform>((uint64_t)this, (uint64_t)&v12, *((_QWORD *)this + 44));
  *((_QWORD *)this + 61) = v4;
  if (v13)
    v4 = (FIK *)((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v14)[3])(v14, v12, 0, 8);
  v5 = FIK::defaultAllocator(v4);
  v12 = 0;
  v13 = 0;
  v14 = v5;
  IKString::assign(&v12, "targets", (IKString *)7);
  *((_QWORD *)this + 60) = FIK::AnimNode::registerBuffer<FIK::Transform>((uint64_t)this, (uint64_t)&v12, *((_QWORD *)this + 40));
  if (v13)
    ((void (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v14)[3])(v14, v12, 0, 8);
  *((_QWORD *)this + 64) = FIK::AnimNode::appendAlgorithm<ikinema::GenerateMocapConstraintTargetsAlgorithm,FIK::MoCapRig &,ikinema::BufferKey &,ikinema::BufferKey &>((uint64_t)this, (uint64_t)this + 144, (uint64_t *)this + 59, (uint64_t *)this + 60);
  if (*((_BYTE *)this + 448))
  {
    v6 = *((_QWORD *)this + 40);
    if (v6)
    {
      v7 = v6 << 8;
      v8 = (float *)(*((_QWORD *)this + 42) + 160);
      while (*v8 == 0.0)
      {
        v8 += 64;
        v7 -= 256;
        if (!v7)
          goto LABEL_14;
      }
      LODWORD(v12) = 100;
      FIK::AnimNode::appendAlgorithm<ikinema::TaskFilterAlgorithm,FIK::MoCapRig &,int,ikinema::BufferKey &>((uint64_t)this, (uint64_t)this + 144, (int *)&v12, (uint64_t *)this + 60);
    }
  }
LABEL_14:
  v16 = *(_OWORD *)((char *)this + 472);
  makeKeyArray((FIK *)&v16, 2uLL, &v12);
  *((_QWORD *)this + 62) = FIK::AnimNode::appendAlgorithm<ikinema::ScalePipeDataAlgorithm,char const(&)[17],float &,FIK::IKArray<ikinema::BufferKey>>((uint64_t)this, "applySourceScale", (float *)this + 113, (uint64_t)&v12);
  v12 = 0;
  if (v14)
    (*(void (**)(uint64_t, void (***)(FIK::CrtAllocator *__hidden), _QWORD, uint64_t))(*(_QWORD *)v15 + 24))(v15, v14, 0, 8);
  *((_QWORD *)this + 65) = FIK::AnimNode::appendAlgorithm<ikinema::SetMocapTargetAlgorithm,FIK::MoCapRig &,ikinema::BufferKey &,ikinema::BufferKey &>((uint64_t)this, (uint64_t)this + 144, (uint64_t *)this + 59, (uint64_t *)this + 60);
  *((_QWORD *)this + 58) = FIK::AnimNode::appendAlgorithm<ikinema::DoSolveAlgorithm,FIK::IKSolver &,unsigned int &,ikinema::BufferKey &>((uint64_t)this, (uint64_t)this + 16, (int *)this + 2, (uint64_t *)this + 61);
  v11 = 1065353216;
  *(_QWORD *)&v16 = *((_QWORD *)this + 61);
  makeKeyArray((FIK *)&v16, 1uLL, &v12);
  *((_QWORD *)this + 63) = FIK::AnimNode::appendAlgorithm<ikinema::ScalePipeDataAlgorithm,char const(&)[17],float &,FIK::IKArray<ikinema::BufferKey>>((uint64_t)this, "applyOutputScale", (float *)&v11, (uint64_t)&v12);
  v12 = 0;
  if (v14)
    (*(void (**)(uint64_t, void (***)(FIK::CrtAllocator *__hidden), _QWORD, uint64_t))(*(_QWORD *)v15 + 24))(v15, v14, 0, 8);
  result = FIK::AnimNode::validateAlgorithms(this);
  if ((result & 1) == 0)
  {
    v10 = ikinemaLogObject();
    return ikinemaAssertHandler(*v10, 0, (uint64_t)"createAlgorithmBlocks", "(validateAlgorithms()) Default algorithms are incompatible.");
  }
  return result;
}

uint64_t FIK::AnimNode::registerBuffer<FIK::Transform>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  FIK *v4;
  uint64_t v5;
  _QWORD v7[2];
  uint64_t v8;
  uint64_t v9;

  if (*(_QWORD *)(a2 + 8))
    v4 = *(FIK **)a2;
  else
    v4 = (FIK *)&unk_2108059BE;
  ikinema::BufferDescriptor::create<FIK::Transform>(v4, *(_QWORD *)(a2 + 8), a3, (uint64_t)v7);
  ikinema::BufferContainer::createBuffer((uint64_t *)(a1 + 104), v7);
  v5 = v9;
  if (v7[1])
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v8 + 24))(v8, v7[0], 0, 8);
  return v5;
}

uint64_t (***FIK::AnimNode::appendAlgorithm<ikinema::GenerateMocapConstraintTargetsAlgorithm,FIK::MoCapRig &,ikinema::BufferKey &,ikinema::BufferKey &>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4))(_QWORD)
{
  uint64_t v5;
  uint64_t v6;
  FIK *v7;
  void *v8;
  uint64_t (***v9)(_QWORD);
  const char *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unsigned int v13;
  FIK *v15;

  ikinema::GenerateMocapConstraintTargetsAlgorithm::create(a2, *a3, *a4, (uint64_t *)&v15);
  FIK::IKArray<ikinema::AlgorithmHandle>::reserve((FIK **)(a1 + 72), *(_QWORD *)(a1 + 72) + 1);
  v5 = *(_QWORD *)(a1 + 88);
  v6 = *(_QWORD *)(a1 + 72);
  v7 = v15;
  v15 = 0;
  *(_QWORD *)(v5 + 8 * v6) = v7;
  *(_QWORD *)(a1 + 72) = v6 + 1;
  if (v15)
  {
    (*(void (**)(FIK *))(*(_QWORD *)v15 + 8))(v15);
    FIK::FIKFree(v15, v8);
    v5 = *(_QWORD *)(a1 + 88);
    v6 = *(_QWORD *)(a1 + 72) - 1;
  }
  v9 = *(uint64_t (****)(_QWORD))(v5 + 8 * v6);
  v10 = "N7ikinema39GenerateMocapConstraintTargetsAlgorithmE";
  if (((unint64_t)"N7ikinema39GenerateMocapConstraintTargetsAlgorithmE" & 0x8000000000000000) != 0)
  {
    v11 = (unsigned __int8 *)((unint64_t)"N7ikinema39GenerateMocapConstraintTargetsAlgorithmE" & 0x7FFFFFFFFFFFFFFFLL);
    v12 = 5381;
    do
    {
      v10 = (const char *)v12;
      v13 = *v11++;
      v12 = (33 * v12) ^ v13;
    }
    while (v13);
  }
  if (v10 == (const char *)(**v9)(v9))
    return v9;
  else
    return 0;
}

uint64_t (***FIK::AnimNode::appendAlgorithm<ikinema::TaskFilterAlgorithm,FIK::MoCapRig &,int,ikinema::BufferKey &>(uint64_t a1, uint64_t a2, int *a3, uint64_t *a4))(_QWORD)
{
  uint64_t v5;
  uint64_t v6;
  FIK *v7;
  void *v8;
  uint64_t (***v9)(_QWORD);
  const char *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unsigned int v13;
  FIK *v15;

  ikinema::TaskFilterAlgorithm::create(a2, *a3, *a4, (uint64_t **)&v15);
  FIK::IKArray<ikinema::AlgorithmHandle>::reserve((FIK **)(a1 + 72), *(_QWORD *)(a1 + 72) + 1);
  v5 = *(_QWORD *)(a1 + 88);
  v6 = *(_QWORD *)(a1 + 72);
  v7 = v15;
  v15 = 0;
  *(_QWORD *)(v5 + 8 * v6) = v7;
  *(_QWORD *)(a1 + 72) = v6 + 1;
  if (v15)
  {
    (*(void (**)(FIK *))(*(_QWORD *)v15 + 8))(v15);
    FIK::FIKFree(v15, v8);
    v5 = *(_QWORD *)(a1 + 88);
    v6 = *(_QWORD *)(a1 + 72) - 1;
  }
  v9 = *(uint64_t (****)(_QWORD))(v5 + 8 * v6);
  v10 = "N7ikinema19TaskFilterAlgorithmE";
  if (((unint64_t)"N7ikinema19TaskFilterAlgorithmE" & 0x8000000000000000) != 0)
  {
    v11 = (unsigned __int8 *)((unint64_t)"N7ikinema19TaskFilterAlgorithmE" & 0x7FFFFFFFFFFFFFFFLL);
    v12 = 5381;
    do
    {
      v10 = (const char *)v12;
      v13 = *v11++;
      v12 = (33 * v12) ^ v13;
    }
    while (v13);
  }
  if (v10 == (const char *)(**v9)(v9))
    return v9;
  else
    return 0;
}

uint64_t (***FIK::AnimNode::appendAlgorithm<ikinema::ScalePipeDataAlgorithm,char const(&)[17],float &,FIK::IKArray<ikinema::BufferKey>>(uint64_t a1, char *__s, float *a3, uint64_t a4))(_QWORD)
{
  size_t v8;
  float v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  FIK *v14;
  void *v15;
  uint64_t (***v16)(_QWORD);
  const char *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  unsigned int v20;
  __int128 v22;
  __int128 v23;
  FIK *v24;

  v8 = strlen(__s);
  v9 = *a3;
  v10 = *(_OWORD *)a4;
  v11 = *(_OWORD *)(a4 + 16);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  v22 = v10;
  v23 = v11;
  ikinema::ScalePipeDataAlgorithm::create((uint64_t)__s, v8, &v22, (uint64_t *)&v24, v9);
  FIK::IKArray<ikinema::AlgorithmHandle>::reserve((FIK **)(a1 + 72), *(_QWORD *)(a1 + 72) + 1);
  v12 = *(_QWORD *)(a1 + 88);
  v13 = *(_QWORD *)(a1 + 72);
  v14 = v24;
  v24 = 0;
  *(_QWORD *)(v12 + 8 * v13) = v14;
  *(_QWORD *)(a1 + 72) = v13 + 1;
  if (v24)
  {
    (*(void (**)(FIK *))(*(_QWORD *)v24 + 8))(v24);
    FIK::FIKFree(v24, v15);
  }
  *(_QWORD *)&v22 = 0;
  if ((_QWORD)v23)
    (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**((_QWORD **)&v23 + 1) + 24))(*((_QWORD *)&v23 + 1), v23, 0, 8);
  v16 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(a1 + 88) + 8 * *(_QWORD *)(a1 + 72) - 8);
  v17 = "N7ikinema22ScalePipeDataAlgorithmE";
  if (((unint64_t)"N7ikinema22ScalePipeDataAlgorithmE" & 0x8000000000000000) != 0)
  {
    v18 = (unsigned __int8 *)((unint64_t)"N7ikinema22ScalePipeDataAlgorithmE" & 0x7FFFFFFFFFFFFFFFLL);
    v19 = 5381;
    do
    {
      v17 = (const char *)v19;
      v20 = *v18++;
      v19 = (33 * v19) ^ v20;
    }
    while (v20);
  }
  if (v17 == (const char *)(**v16)(v16))
    return v16;
  else
    return 0;
}

_QWORD *makeKeyArray@<X0>(FIK *a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  FIK *v4;
  void (***v6)(FIK::CrtAllocator *__hidden);
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a1;
  v6 = FIK::defaultAllocator(a1);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  a3[3] = (uint64_t)v6;
  result = FIK::IKArray<FIK::Segment *>::reserve(a3, a2);
  if (a2)
  {
    v8 = *a3;
    v9 = 8 * a2;
    do
    {
      result = FIK::IKArray<FIK::Segment *>::reserve(a3, v8 + 1);
      v10 = *(_QWORD *)v4;
      v4 = (FIK *)((char *)v4 + 8);
      *(_QWORD *)(a3[2] + 8 * *a3) = v10;
      v8 = *a3 + 1;
      *a3 = v8;
      v9 -= 8;
    }
    while (v9);
  }
  return result;
}

uint64_t (***FIK::AnimNode::appendAlgorithm<ikinema::SetMocapTargetAlgorithm,FIK::MoCapRig &,ikinema::BufferKey &,ikinema::BufferKey &>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4))(_QWORD)
{
  uint64_t v5;
  uint64_t v6;
  FIK *v7;
  void *v8;
  uint64_t (***v9)(_QWORD);
  const char *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unsigned int v13;
  FIK *v15;

  ikinema::SetMocapTargetAlgorithm::create(a2, *a3, *a4, (uint64_t *)&v15);
  FIK::IKArray<ikinema::AlgorithmHandle>::reserve((FIK **)(a1 + 72), *(_QWORD *)(a1 + 72) + 1);
  v5 = *(_QWORD *)(a1 + 88);
  v6 = *(_QWORD *)(a1 + 72);
  v7 = v15;
  v15 = 0;
  *(_QWORD *)(v5 + 8 * v6) = v7;
  *(_QWORD *)(a1 + 72) = v6 + 1;
  if (v15)
  {
    (*(void (**)(FIK *))(*(_QWORD *)v15 + 8))(v15);
    FIK::FIKFree(v15, v8);
    v5 = *(_QWORD *)(a1 + 88);
    v6 = *(_QWORD *)(a1 + 72) - 1;
  }
  v9 = *(uint64_t (****)(_QWORD))(v5 + 8 * v6);
  v10 = "N7ikinema23SetMocapTargetAlgorithmE";
  if (((unint64_t)"N7ikinema23SetMocapTargetAlgorithmE" & 0x8000000000000000) != 0)
  {
    v11 = (unsigned __int8 *)((unint64_t)"N7ikinema23SetMocapTargetAlgorithmE" & 0x7FFFFFFFFFFFFFFFLL);
    v12 = 5381;
    do
    {
      v10 = (const char *)v12;
      v13 = *v11++;
      v12 = (33 * v12) ^ v13;
    }
    while (v13);
  }
  if (v10 == (const char *)(**v9)(v9))
    return v9;
  else
    return 0;
}

uint64_t (***FIK::AnimNode::appendAlgorithm<ikinema::DoSolveAlgorithm,FIK::IKSolver &,unsigned int &,ikinema::BufferKey &>(uint64_t a1, uint64_t a2, int *a3, uint64_t *a4))(_QWORD)
{
  uint64_t v5;
  uint64_t v6;
  FIK *v7;
  void *v8;
  uint64_t (***v9)(_QWORD);
  const char *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unsigned int v13;
  FIK *v15;

  ikinema::DoSolveAlgorithm::create(a2, *a3, *a4, &v15);
  FIK::IKArray<ikinema::AlgorithmHandle>::reserve((FIK **)(a1 + 72), *(_QWORD *)(a1 + 72) + 1);
  v5 = *(_QWORD *)(a1 + 88);
  v6 = *(_QWORD *)(a1 + 72);
  v7 = v15;
  v15 = 0;
  *(_QWORD *)(v5 + 8 * v6) = v7;
  *(_QWORD *)(a1 + 72) = v6 + 1;
  if (v15)
  {
    (*(void (**)(FIK *))(*(_QWORD *)v15 + 8))(v15);
    FIK::FIKFree(v15, v8);
    v5 = *(_QWORD *)(a1 + 88);
    v6 = *(_QWORD *)(a1 + 72) - 1;
  }
  v9 = *(uint64_t (****)(_QWORD))(v5 + 8 * v6);
  v10 = "N7ikinema16DoSolveAlgorithmE";
  if (((unint64_t)"N7ikinema16DoSolveAlgorithmE" & 0x8000000000000000) != 0)
  {
    v11 = (unsigned __int8 *)((unint64_t)"N7ikinema16DoSolveAlgorithmE" & 0x7FFFFFFFFFFFFFFFLL);
    v12 = 5381;
    do
    {
      v10 = (const char *)v12;
      v13 = *v11++;
      v12 = (33 * v12) ^ v13;
    }
    while (v13);
  }
  if (v10 == (const char *)(**v9)(v9))
    return v9;
  else
    return 0;
}

uint64_t FIK::RetargetingNode::RetargetingNode(uint64_t a1, uint64_t a2)
{
  FIK *v3;
  void (***v4)(FIK::CrtAllocator *__hidden);

  v3 = (FIK *)FIK::AnimNode::AnimNode(a1, a2);
  *(_QWORD *)v3 = off_24CA6BFA8;
  *((_QWORD *)v3 + 59) = -1;
  *((_QWORD *)v3 + 60) = -1;
  *((_QWORD *)v3 + 61) = -1;
  v4 = FIK::defaultAllocator(v3);
  *(_QWORD *)(a1 + 528) = 0;
  *(_QWORD *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 536) = 0;
  *(_QWORD *)(a1 + 552) = v4;
  *(_BYTE *)(a1 + 560) = 0;
  *(_BYTE *)(a1 + 592) = 0;
  FIK::RetargetingNode::createTasks((FIK::RetargetingNode *)a1);
  FIK::RetargetingNode::createAlgorithmBlocks((FIK::RetargetingNode *)a1);
  return a1;
}

uint64_t FIK::RetargetingNode::setupPoseConverter(FIK::RetargetingNode *this)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[4];
  _QWORD v7[3];
  void (***v8)(FIK::CrtAllocator *__hidden);

  memset(v7, 0, sizeof(v7));
  v8 = FIK::defaultAllocator(this);
  memset(v6, 0, 24);
  v6[3] = FIK::defaultAllocator((FIK *)v8);
  FIK::IKRigUtils::getRigBoneNames<FIK::MoCapRig>((uint64_t)this + 144, v7, v6);
  FIK::FKConverter::FKConverter(&v3, v7, v7, v6);
  std::optional<FIK::FKConverter>::operator=[abi:nn180100]<FIK::FKConverter,void>((uint64_t)this + 560, &v3);
  *(_QWORD *)&v3 = 0;
  if (v4)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v5 + 24))(v5, v4, 0, 8);
  FIK::IKArray<IKString>::~IKArray((uint64_t)v6);
  return FIK::IKArray<IKString>::~IKArray((uint64_t)v7);
}

void FIK::IKRigUtils::getRigBoneNames<FIK::MoCapRig>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a1 + 208);
  if (v3)
  {
    v6 = *(_QWORD *)(a1 + 224) + 32;
    v7 = 544 * v3;
    do
    {
      FIK::IKArray<IKString>::push_back<IKString&,void>(a2, v6 - 24);
      FIK::IKArray<IKString>::push_back<IKString&,void>(a3, v6);
      v6 += 544;
      v7 -= 544;
    }
    while (v7);
  }
}

uint64_t std::optional<FIK::FKConverter>::operator=[abi:nn180100]<FIK::FKConverter,void>(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;

  if (*(_BYTE *)(a1 + 32))
  {
    FIK::IKArray<unsigned int>::operator=((uint64_t *)a1, a2);
  }
  else
  {
    v3 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)a1 = v3;
    v4 = *((_QWORD *)a2 + 1);
    v5 = a2[1];
    *((_QWORD *)a2 + 1) = 0;
    *(_QWORD *)(a1 + 8) = v4;
    *((_QWORD *)a2 + 2) = 0;
    *(_OWORD *)(a1 + 16) = v5;
    *(_BYTE *)(a1 + 32) = 1;
  }
  return a1;
}

unint64_t FIK::RetargetingNode::PassFKPose(uint64_t a1, uint64_t a2)
{
  FIK::IKSolver *v4;
  unint64_t result;
  uint64_t v6;
  unsigned int i;
  uint64_t v8;
  uint64_t v9;
  float32x4_t v10;
  float32x4_t *v11;
  float32x4_t v12;
  int32x4_t v13;
  int8x16_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  int32x4_t v19;
  int8x16_t v20;
  float32x4_t v21;
  float32x4_t v22;
  uint64_t Segment;
  float32x4_t v24;

  v4 = (FIK::IKSolver *)(a1 + 16);
  result = FIK::IKSolver::numSegments((FIK::IKSolver *)(a1 + 16));
  if (result)
  {
    v6 = 0;
    for (i = 0; i < result; v6 = ++i)
    {
      v8 = *(_QWORD *)(a1 + 368);
      v9 = *(unsigned int *)(v8 + 544 * v6 + 280);
      if ((v9 & 0x80000000) == 0)
      {
        v10 = *(float32x4_t *)(a2 + 32 * v9 + 16);
        v11 = (float32x4_t *)(v8 + 544 * v6);
        v12 = v11[21];
        v13 = (int32x4_t)vnegq_f32(v10);
        v14 = (int8x16_t)vtrn2q_s32((int32x4_t)v10, vtrn1q_s32((int32x4_t)v10, v13));
        v15 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v10, (int8x16_t)v13, 8uLL), *(float32x2_t *)v12.f32, 1), (float32x4_t)vextq_s8(v14, v14, 8uLL), v12.f32[0]);
        v16 = (float32x4_t)vrev64q_s32((int32x4_t)v10);
        v16.i32[0] = v13.i32[1];
        v16.i32[3] = v13.i32[2];
        v17 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v10, v12, 3), v16, v12, 2), v15);
        v18 = v11[19];
        v19 = (int32x4_t)vnegq_f32(v18);
        v20 = (int8x16_t)vtrn2q_s32((int32x4_t)v18, vtrn1q_s32((int32x4_t)v18, v19));
        v21 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v18, (int8x16_t)v19, 8uLL), *(float32x2_t *)v17.f32, 1), (float32x4_t)vextq_s8(v20, v20, 8uLL), v17.f32[0]);
        v22 = (float32x4_t)vrev64q_s32((int32x4_t)v18);
        v22.i32[0] = v19.i32[1];
        v22.i32[3] = v19.i32[2];
        v24 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v18, v17, 3), v22, v17, 2), v21);
        Segment = FIK::IKSolver::getSegment(v4, i);
        (*(void (**)(uint64_t, float32x4_t *))(*(_QWORD *)Segment + 200))(Segment, &v24);
      }
      result = FIK::IKSolver::numSegments(v4);
    }
  }
  return result;
}

uint64_t FIK::RetargetingNode::Solve()
{
  uint64_t *v0;

  v0 = ikinemaLogObject();
  ikinemaAssertHandler(*v0, 0, (uint64_t)"Solve", "(false) Inout pose solve not supported by retargeting node");
  return 2;
}

uint64_t FIK::RetargetingNode::solveInternal(uint64_t a1, _OWORD *a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  _OWORD *v17;
  uint64_t *v19;
  _QWORD v20[2];

  if (!*(_BYTE *)(a1 + 64))
  {
    v19 = ikinemaLogObject();
    ikinemaAssertHandler(*v19, 0, (uint64_t)"solveInternal", "(m_algorithmsAreValidated) The algorithm pipeline is not valid.");
  }
  v8 = ikinema::BufferContainer::buffer((uint64_t *)(a1 + 104), *(_QWORD *)(a1 + 472));
  v9 = (_OWORD *)ikinema::Buffer::arrayView<FIK::Transform>(v8);
  if (a3)
  {
    v10 = &a2[2 * a3];
    do
    {
      *v9 = *a2;
      v9[1] = a2[1];
      a2 += 2;
      v9 += 2;
    }
    while (a2 != v10);
  }
  v20[0] = a1;
  v20[1] = a1;
  v11 = *(_QWORD *)(a1 + 72);
  if (v11)
  {
    v12 = *(_QWORD **)(a1 + 88);
    v13 = 8 * v11;
    while (!(*(unsigned int (**)(_QWORD, _QWORD *, uint64_t))(*(_QWORD *)*v12 + 24))(*v12, v20, a1 + 104))
    {
      ++v12;
      v13 -= 8;
      if (!v13)
        goto LABEL_10;
    }
    return 2;
  }
  else
  {
LABEL_10:
    v14 = ikinema::BufferContainer::buffer((uint64_t *)(a1 + 104), *(_QWORD *)(a1 + 488));
    v15 = (_OWORD *)ikinema::Buffer::arrayView<FIK::Transform>(v14);
    if (v16)
    {
      v17 = &v15[2 * v16];
      do
      {
        *a4 = *v15;
        a4[1] = v15[1];
        v15 += 2;
        a4 += 2;
      }
      while (v15 != v17);
    }
    return *(unsigned int *)(*(_QWORD *)(a1 + 464) + 8);
  }
}

uint64_t FIK::RetargetingNode::Solve(uint64_t a1, _OWORD *a2, uint64_t a3, _OWORD *a4, uint64_t a5, _OWORD *a6)
{
  uint64_t v6;

  *(_BYTE *)(*(_QWORD *)(a1 + 512) + 48) = 1;
  v6 = *(_QWORD *)(a1 + 520);
  *(_BYTE *)(v6 + 48) = 1;
  *(_OWORD *)(v6 + 16) = *a6;
  *(_OWORD *)(v6 + 32) = a6[1];
  return FIK::RetargetingNode::solveInternal(a1, a2, a3, a4);
}

uint64_t FIK::RetargetingNode::SolveModel(uint64_t a1, _OWORD *a2, uint64_t a3, _OWORD *a4, uint64_t a5, _OWORD *a6)
{
  uint64_t v6;

  *(_BYTE *)(*(_QWORD *)(a1 + 512) + 48) = 0;
  v6 = *(_QWORD *)(a1 + 520);
  *(_BYTE *)(v6 + 48) = 0;
  *(_OWORD *)(v6 + 16) = *a6;
  *(_OWORD *)(v6 + 32) = a6[1];
  return FIK::RetargetingNode::solveInternal(a1, a2, a3, a4);
}

_QWORD *FIK::RetargetingNode::GetModelSpacePose(FIK::RetargetingNode *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (!*((_BYTE *)this + 592))
    FIK::RetargetingNode::setupPoseConverter(this);
  v4 = ikinema::BufferContainer::buffer((uint64_t *)this + 13, *((_QWORD *)this + 61));
  v5 = ikinema::Buffer::arrayView<FIK::Transform>(v4);
  return FIK::FKConverter::convertToGlobal((_QWORD *)this + 70, v5, v6, a2);
}

__n128 FIK::RetargetingNode::GetTaskPosDebug(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  __n128 result;

  if (a3 == *(_QWORD *)(a1 + 528) && a3 != 0)
  {
    v4 = 0;
    v5 = 1;
    do
    {
      v6 = *(_QWORD *)(a1 + 544) + 112 * v4;
      v7 = a2 + 32 * v4;
      *(_OWORD *)v7 = *(_OWORD *)(v6 + 80);
      result = *(__n128 *)(v6 + 96);
      *(__n128 *)(v7 + 16) = result;
      v4 = v5;
    }
    while (*(_QWORD *)(a1 + 528) > (unint64_t)v5++);
  }
  return result;
}

uint64_t FIK::RetargetingNode::RetargetTask::RetargetTask(uint64_t a1, uint64_t a2, uint64_t a3, IKString *a4)
{
  uint64_t v9[2];
  uint64_t v10;

  IKString::IKString((IKString *)v9, a4);
  *(_QWORD *)a1 = &unk_24CA6C6F8;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  IKString::IKString((uint64_t *)(a1 + 24), v9, v10);
  if (v9[1])
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v10 + 24))(v10, v9[0], 0, 8);
  *(_QWORD *)a1 = &off_24CA6BF70;
  *(_OWORD *)(a1 + 48) = *((_OWORD *)a4 + 13);
  *(_OWORD *)(a1 + 64) = *((_OWORD *)a4 + 14);
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 96) = xmmword_210802BA0;
  return a1;
}

uint64_t FIK::RetargetingNode::RetargetTask::setTarget(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  uint64_t result;

  *(_OWORD *)(a1 + 80) = *a2;
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v4 + 248))(v4, a2);
  *(_OWORD *)(a1 + 96) = a2[1];
  result = *(_QWORD *)(a1 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)result + 248))(result, a2 + 1);
  return result;
}

uint64_t FIK::RetargetingNode::RetargetTask::setPositionTarget(uint64_t a1, _OWORD *a2)
{
  uint64_t result;

  *(_OWORD *)(a1 + 80) = *a2;
  result = *(_QWORD *)(a1 + 8);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 248))(result);
  return result;
}

uint64_t FIK::RetargetingNode::RetargetTask::setOrientationTarget(uint64_t a1, _OWORD *a2)
{
  uint64_t result;

  *(_OWORD *)(a1 + 96) = *a2;
  result = *(_QWORD *)(a1 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 248))(result);
  return result;
}

__n128 FIK::RetargetingNode::RetargetTask::setOffset(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_OWORD *)(a1 + 48) = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t FIK::RetargetingNode::RetargetTask::getOffset(FIK::RetargetingNode::RetargetTask *this)
{
  return (uint64_t)this + 48;
}

uint64_t FIK::RetargetingNode::adjustTaskOffset(_QWORD *a1, unint64_t a2, _OWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v9;

  if (a2 == -1 || a1[40] <= a2)
  {
    v9 = ikinemaLogObject();
    ikinemaAssertHandler(*v9, 0, (uint64_t)"adjustTaskOffset", "(taskIndex != kInvalidRigIndex && taskIndex < Rig.tasks_.size()) Invalide task index");
  }
  v6 = a1[42] + (a2 << 8);
  *(_OWORD *)(v6 + 208) = *a3;
  *(_OWORD *)(v6 + 224) = a3[1];
  v7 = (*(uint64_t (**)(_QWORD *, unint64_t))(*a1 + 48))(a1, a2);
  return (*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)v7 + 24))(v7, a3);
}

uint64_t FIK::RetargetingNode::constraintsCount(FIK::RetargetingNode *this)
{
  return *((_QWORD *)this + 66);
}

unint64_t FIK::RetargetingNode::constraintByIndex(FIK::RetargetingNode *this, unint64_t a2)
{
  if (*((_QWORD *)this + 66) <= a2)
    return 0;
  else
    return *((_QWORD *)this + 68) + 112 * a2;
}

float FIK::RetargetingNode::sourceScale(FIK::RetargetingNode *this)
{
  return *(float *)(*((_QWORD *)this + 62) + 8);
}

uint64_t FIK::RetargetingNode::setSourceScale(uint64_t this, float a2)
{
  if (a2 > 0.0)
    *(float *)(*(_QWORD *)(this + 496) + 8) = a2;
  return this;
}

float FIK::RetargetingNode::outputScale(FIK::RetargetingNode *this)
{
  return *(float *)(*((_QWORD *)this + 63) + 8);
}

uint64_t FIK::RetargetingNode::setOutputScale(uint64_t this, float a2)
{
  if (a2 > 0.0)
    *(float *)(*(_QWORD *)(this + 504) + 8) = a2;
  return this;
}

void FIK::RetargetingNode::~RetargetingNode(FIK::RetargetingNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_24CA6BFA8;
  if (*((_BYTE *)this + 592))
  {
    *((_QWORD *)this + 70) = 0;
    v2 = *((_QWORD *)this + 72);
    if (v2)
      (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)this + 73) + 24))(*((_QWORD *)this + 73), v2, 0, 8);
  }
  FIK::IKArray<FIK::RetargetingNode::RetargetTask>::~IKArray((uint64_t)this + 528);
  FIK::AnimNode::~AnimNode(this);
}

{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = off_24CA6BFA8;
  if (*((_BYTE *)this + 592))
  {
    *((_QWORD *)this + 70) = 0;
    v2 = *((_QWORD *)this + 72);
    if (v2)
      (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)this + 73) + 24))(*((_QWORD *)this + 73), v2, 0, 8);
  }
  FIK::IKArray<FIK::RetargetingNode::RetargetTask>::~IKArray((uint64_t)this + 528);
  FIK::AnimNode::~AnimNode(this);
  FIK::AnimNode::operator delete(v3);
}

uint64_t FIK::RetargetingNode::setSourcesBuffer(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 472) = a2;
  return result;
}

uint64_t FIK::RetargetingNode::sourcesKey(FIK::RetargetingNode *this)
{
  return *((_QWORD *)this + 59);
}

uint64_t FIK::RetargetingNode::outputKey(FIK::RetargetingNode *this)
{
  return *((_QWORD *)this + 61);
}

uint64_t FIK::IKArray<FIK::RetargetingNode::RetargetTask>::~IKArray(uint64_t a1)
{
  uint64_t v2;

  std::destroy_n[abi:nn180100]<FIK::RetargetingNode::RetargetTask *,unsigned long>(*(_QWORD *)(a1 + 16), *(_QWORD *)a1);
  *(_QWORD *)a1 = 0;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24), v2, 0, 8);
  return a1;
}

uint64_t std::destroy_n[abi:nn180100]<FIK::RetargetingNode::RetargetTask *,unsigned long>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (a2)
  {
    v3 = a2;
    do
    {
      *(_QWORD *)a1 = &unk_24CA6C6F8;
      if (*(_QWORD *)(a1 + 32))
      {
        (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 24), 0, 8);
        *(_QWORD *)(a1 + 24) = 0;
        *(_QWORD *)(a1 + 32) = 0;
      }
      a1 += 112;
      --v3;
    }
    while (v3);
  }
  return a1;
}

uint64_t *FIK::IKArray<FIK::RetargetingNode::RetargetTask>::moveRange(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;

  if (a2)
  {
    v3 = a2;
    v4 = result;
    result = (uint64_t *)(a3 + 24);
    v5 = v4 + 6;
    do
    {
      *(result - 3) = (uint64_t)&unk_24CA6C6F8;
      *((_OWORD *)result - 1) = *(_OWORD *)(v5 - 5);
      v6 = IKString::IKString(result, v5 - 3, *(v5 - 1));
      *(v6 - 3) = (uint64_t)&off_24CA6BF70;
      *(_OWORD *)(v6 + 3) = *(_OWORD *)v5;
      *(_OWORD *)(v6 + 5) = *((_OWORD *)v5 + 1);
      *(_OWORD *)(v6 + 7) = *((_OWORD *)v5 + 2);
      *(_OWORD *)(v6 + 9) = *((_OWORD *)v5 + 3);
      result = v6 + 14;
      v5 += 14;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t *ikinema::BufferDescriptor::create<FIK::Transform>@<X0>(FIK *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned int v11;
  IKString *v12;
  unint64_t v13;
  uint64_t *result;
  uint64_t v15;
  uint64_t v16;
  void (***v17)(FIK::CrtAllocator *__hidden);
  char v18;

  v8 = (uint64_t)"N3FIK9TransformE";
  if (((unint64_t)"N3FIK9TransformE" & 0x8000000000000000) != 0)
  {
    v9 = (unsigned __int8 *)((unint64_t)"N3FIK9TransformE" & 0x7FFFFFFFFFFFFFFFLL);
    v10 = 5381;
    do
    {
      v8 = v10;
      v11 = *v9++;
      v10 = (33 * v10) ^ v11;
    }
    while (v11);
  }
  v15 = 0;
  v16 = 0;
  v17 = FIK::defaultAllocator(a1);
  v12 = (IKString *)strlen((const char *)a1);
  IKString::assign(&v15, (char *)a1, v12);
  v13 = (33
       * ((33
         * std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t)&v18, (uint64_t *)a1, a2)) ^ v8)) ^ a3;
  result = IKString::IKString((uint64_t *)a4, &v15, (uint64_t)v17);
  *(_OWORD *)(a4 + 24) = xmmword_2108048C0;
  *(_QWORD *)(a4 + 40) = a3;
  *(_QWORD *)(a4 + 48) = v8;
  *(_QWORD *)(a4 + 56) = v13;
  if (v16)
    return (uint64_t *)((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v17)[3])(v17, v15, 0, 8);
  return result;
}

uint64_t ikinema::BufferContainer::createBuffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void *v6;
  BOOL v7;
  void *v8;
  _BYTE v10[40];
  uint64_t v11;
  uint64_t v12;

  if (*a1)
  {
    v3 = 72 * *a1;
    v4 = (uint64_t *)(a1[2] + 56);
    while (1)
    {
      v5 = *v4;
      v4 += 9;
      if (v5 == a2[7])
        break;
      v3 -= 72;
      if (!v3)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    ikinema::Buffer::create(a2, (uint64_t)v10);
    if (v12)
      v7 = v11 == 0;
    else
      v7 = 1;
    if (!v7)
    {
      FIK::IKArray<ikinema::Buffer>::push_back<ikinema::Buffer,void>(a1, (uint64_t)v10);
      ikinema::Buffer::~Buffer((ikinema::Buffer *)v10, v8);
      return 1;
    }
    ikinema::Buffer::~Buffer((ikinema::Buffer *)v10, v6);
  }
  return 0;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      v11 = v7 + v9;
      v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      v14 = v8 + a3 + v7 + v4;
      v15 = v14 + v5;
      v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v18 = v17 + v6 + v9;
      v19 = __ROR8__(v18, 44);
      v20 = v18 + v10;
      v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      v23 = *a2;
      v22 = a2 + 4;
      v24 = v23 - 0x4B6D499041670D8DLL * v5;
      v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v26 = *(v22 - 3);
        v27 = v24 + v15 + v11 + v26;
        v28 = v22[2];
        v29 = v22[3];
        v30 = v22[1];
        v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        v31 = v13 + v20;
        v32 = *(v22 - 2);
        v33 = *(v22 - 1);
        v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        v35 = v34 + v20 + v33;
        v36 = v34 + v26 + v32;
        v15 = v36 + v33;
        v37 = __ROR8__(v36, 44) + v34;
        v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        v16 = v37 + __ROR8__(v35 + v38, 21);
        v39 = v24 + v21 + *v22;
        v20 = v39 + v30 + v28 + v29;
        v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        v13 = v38;
        v25 += 64;
      }
      while (v25);
      v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:nn180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:nn180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:nn180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:nn180100](_DWORD *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (a2 < 9)
  {
    if (a2 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    v3 = *(_QWORD *)((char *)a1 + a2 - 8);
    v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:nn180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = a1[1];
  v3 = 0xB492B66FBE98F273 * *a1;
  v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8);
  v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(_QWORD *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:nn180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)((char *)a1 + a2 - 16);
  v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  v5 = a1[2];
  v4 = a1[3];
  v6 = __ROR8__(v3 + v4, 52);
  v7 = v3 + a1[1];
  v8 = __ROR8__(v7, 7);
  v9 = v7 + v5;
  v10 = *(_QWORD *)((char *)a1 + a2 - 32) + v5;
  v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  v12 = *(_QWORD *)((char *)a1 + a2 - 24) + v10 + v2;
  v13 = 0xC3A5C85C97CB3127 * (v12 + *(_QWORD *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

__n128 ikinema::Buffer::create@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __n128 *v5;
  void *v6;
  __n128 result;
  __int128 v8;
  uint64_t *v9;
  uint64_t *v10;

  v4 = a1[5];
  if (!v4)
  {
    v9 = ikinemaLogObject();
    ikinemaAssertHandler(*v9, 0, (uint64_t)"create", "(descriptor.elementCount()) Can't create a buffer with no elements.");
    v4 = a1[5];
  }
  v5 = (__n128 *)(a1 + 3);
  v6 = FIK::FIKAlloc((FIK *)(v4 * a1[4]));
  if (!v6)
  {
    v10 = ikinemaLogObject();
    ikinemaAssertHandler(*v10, 0, (uint64_t)"create", "(memoryBlock) Unable to allocate memory for buffer.");
  }
  IKString::IKString((IKString *)a2, (const IKString *)a1);
  result = *v5;
  v8 = *(_OWORD *)(a1 + 5);
  *(__n128 *)(a2 + 24) = *v5;
  *(_OWORD *)(a2 + 40) = v8;
  *(_QWORD *)(a2 + 56) = a1[7];
  *(_QWORD *)(a2 + 64) = v6;
  return result;
}

__n128 FIK::IKArray<ikinema::Buffer>::push_back<ikinema::Buffer,void>(uint64_t *a1, uint64_t a2)
{
  __n128 result;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;

  FIK::IKArray<ikinema::Buffer>::reserve(a1, (void *)(*a1 + 1));
  IKString::IKString((IKString *)(a1[2] + 72 * *a1), (const IKString *)a2);
  result = *(__n128 *)(a2 + 24);
  v5 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(v6 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(v6 + 40) = v5;
  *(__n128 *)(v6 + 24) = result;
  v7 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(v6 + 64) = v7;
  ++*a1;
  return result;
}

void FIK::IKArray<ikinema::Buffer>::reserve(uint64_t *a1, void *a2)
{
  uint64_t v3;
  unint64_t v4;
  IKString *v5;
  IKString *v6;
  uint64_t v7;
  uint64_t v8;
  IKString *v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  ikinema::Buffer *v16;
  uint64_t v17;

  if (a1[1] < (unint64_t)a2)
  {
    v3 = a1[3];
    v4 = ((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v4)
    {
      v5 = (IKString *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v3 + 16))(a1[3], 72 * v4, 8);
      v6 = v5;
      if (72 * v4)
        bzero(v5, 72 * v4);
    }
    else
    {
      v6 = 0;
    }
    v7 = a1[2];
    v8 = *a1;
    if (*a1)
    {
      v9 = v6;
      do
      {
        IKString::IKString(v9, (const IKString *)v7);
        v10 = *(_OWORD *)(v7 + 24);
        v11 = *(_OWORD *)(v7 + 40);
        *(_QWORD *)(v12 + 56) = *(_QWORD *)(v7 + 56);
        *(_OWORD *)(v12 + 40) = v11;
        *(_OWORD *)(v12 + 24) = v10;
        v13 = *(_QWORD *)(v7 + 64);
        *(_QWORD *)(v7 + 64) = 0;
        *(_QWORD *)(v12 + 64) = v13;
        v9 = (IKString *)(v12 + 72);
        v7 += 72;
        --v8;
      }
      while (v8);
      v7 = a1[2];
      v14 = *a1;
    }
    else
    {
      v14 = 0;
    }
    v15 = a1[3];
    a1[1] = v4;
    a1[2] = (uint64_t)v6;
    a1[3] = v3;
    if (v14)
    {
      v16 = (ikinema::Buffer *)v7;
      do
      {
        ikinema::Buffer::~Buffer(v16, a2);
        v16 = (ikinema::Buffer *)(v17 + 72);
        --v14;
      }
      while (v14);
    }
    if (v7)
      (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v15 + 24))(v15, v7, 0, 8);
  }
}

FIK **FIK::IKArray<ikinema::AlgorithmHandle>::reserve(FIK **result, unint64_t a2)
{
  uint64_t *v2;
  FIK *v3;
  unint64_t v4;
  FIK **v5;
  FIK **v6;
  FIK **v7;
  uint64_t v8;
  uint64_t v9;
  FIK **v10;
  FIK *v11;
  uint64_t v12;

  if ((unint64_t)result[1] < a2)
  {
    v2 = (uint64_t *)result;
    v3 = result[3];
    v4 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v4)
    {
      v5 = (FIK **)(*(uint64_t (**)(FIK *, unint64_t, uint64_t))(*(_QWORD *)v3 + 16))(result[3], 8 * v4, 8);
      v6 = v5;
      if (8 * v4)
        bzero(v5, 8 * v4);
    }
    else
    {
      v6 = 0;
    }
    v7 = (FIK **)v2[2];
    v8 = *v2;
    if (*v2)
    {
      v9 = *v2;
      v10 = v6;
      do
      {
        v11 = *v7;
        *v7++ = 0;
        *v10++ = v11;
        --v9;
      }
      while (v9);
      v7 = (FIK **)v2[2];
    }
    v12 = v2[3];
    v2[1] = v4;
    v2[2] = (uint64_t)v6;
    v2[3] = (uint64_t)v3;
    result = std::destroy_n[abi:nn180100]<ikinema::AlgorithmHandle *,unsigned long>(v7, v8);
    if (v7)
      return (FIK **)(*(uint64_t (**)(uint64_t, FIK **, _QWORD, uint64_t))(*(_QWORD *)v12 + 24))(v12, v7, 0, 8);
  }
  return result;
}

uint64_t FIK::SourceToTargetMapper::mapSourceToTarget@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, int *a3@<X2>, uint64_t a4@<X3>, int *a5@<X4>, uint64_t a6@<X5>, unint64_t *a7@<X8>)
{
  void (***v14)(FIK::CrtAllocator *__hidden);
  unint64_t v15;
  uint64_t result;
  uint64_t v17;
  int *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  uint64_t *v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t *v34;
  uint64_t *v35;
  int *v36;
  int v37;
  uint64_t v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t *v44;
  int v45;
  BOOL v46;
  uint64_t *v47;
  FIK::Hierarchy *v49;
  FIK::Hierarchy *v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD v60[2];
  _QWORD *v61;
  uint64_t v62;
  _QWORD v63[2];
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;

  v14 = FIK::defaultAllocator((FIK *)a1);
  *a7 = 0;
  a7[1] = 0;
  a7[2] = 0;
  a7[3] = (unint64_t)v14;
  v15 = *a1;
  v63[0] = -1;
  result = (uint64_t)FIK::IKArray<unsigned long>::resize(a7, v15, v63);
  v17 = a7[2];
  if (a4)
  {
    v18 = &a3[a4];
    v19 = a1 + 7;
    v20 = a1[7];
    v21 = a2[7];
    do
    {
      v22 = *a3;
      if (!v20)
        goto LABEL_13;
      v23 = a1 + 7;
      v24 = v20;
      do
      {
        v25 = *(_DWORD *)(v24 + 32);
        v26 = v25 < v22;
        if (v25 >= v22)
          v27 = (uint64_t *)v24;
        else
          v27 = (uint64_t *)(v24 + 8);
        if (!v26)
          v23 = (_QWORD *)v24;
        v24 = *v27;
      }
      while (*v27);
      if (v23 == v19 || v22 < *((_DWORD *)v23 + 8))
LABEL_13:
        v23 = a1 + 7;
      if (v21)
      {
        v28 = a2 + 7;
        v29 = v21;
        do
        {
          v30 = *(_DWORD *)(v29 + 32);
          result = v29 + 8;
          v31 = v30 < v22;
          if (v30 >= v22)
            v32 = (uint64_t *)v29;
          else
            v32 = (uint64_t *)(v29 + 8);
          if (!v31)
            v28 = (_QWORD *)v29;
          v29 = *v32;
        }
        while (*v32);
        if (v28 != a2 + 7 && v22 >= *((_DWORD *)v28 + 8) && v23 != v19)
          *(_QWORD *)(v17 + 8 * v23[5]) = v28[5];
      }
      ++a3;
    }
    while (a3 != v18);
  }
  if (a6)
  {
    v34 = a1 + 10;
    v35 = a2 + 10;
    v36 = &a5[a6];
    do
    {
      v37 = *a5;
      v38 = *v34;
      if (!*v34)
        goto LABEL_41;
      v39 = a1 + 10;
      do
      {
        v40 = *(_DWORD *)(v38 + 32);
        v41 = v40 < v37;
        if (v40 >= v37)
          v42 = (uint64_t *)v38;
        else
          v42 = (uint64_t *)(v38 + 8);
        if (!v41)
          v39 = (uint64_t *)v38;
        v38 = *v42;
      }
      while (*v42);
      if (v39 == v34 || v37 < *((_DWORD *)v39 + 8))
LABEL_41:
        v39 = a1 + 10;
      v43 = *v35;
      if (!*v35)
        goto LABEL_73;
      v44 = a2 + 10;
      do
      {
        v45 = *(_DWORD *)(v43 + 32);
        v46 = v45 < v37;
        if (v45 >= v37)
          v47 = (uint64_t *)v43;
        else
          v47 = (uint64_t *)(v43 + 8);
        if (!v46)
          v44 = (uint64_t *)v43;
        v43 = *v47;
      }
      while (*v47);
      if (v44 == v35)
        goto LABEL_73;
      if (v37 < *((_DWORD *)v44 + 8) || v39 == v34)
        goto LABEL_73;
      if (v37 == 13)
      {
        v49 = (FIK::Hierarchy *)a1;
        v50 = (FIK::Hierarchy *)a2;
        v51 = 0;
      }
      else
      {
        if (v37 != 8)
        {
          FIK::IKArray<FIK::Task *>::IKArray(v63, v39 + 5);
          result = (uint64_t)FIK::IKArray<FIK::Task *>::IKArray(v60, v44 + 5);
          v52 = v63[0];
          v53 = v60[0];
          if (v63[0] > v60[0])
          {
            v66 = -1;
            result = FIK::IKArray<unsigned long>::insert(v60, (uint64_t)v61 + ((4 * v60[0] + 4) & 0xFFFFFFFFFFFFFFF8), v63[0] - v60[0], &v66);
          }
          if (v53 > v52)
          {
            v66 = -1;
            result = FIK::IKArray<unsigned long>::insert(v63, (uint64_t)v64 + ((4 * v52 + 4) & 0xFFFFFFFFFFFFFFF8), v53 - v52, &v66);
          }
          v54 = v63[0];
          v55 = v61;
          if (v63[0])
          {
            v56 = v64;
            v57 = v61;
            do
            {
              v59 = *v56++;
              v58 = v59;
              if (v59 != -1)
                *(_QWORD *)(v17 + 8 * v58) = *v57;
              ++v57;
              --v54;
            }
            while (v54);
          }
          v60[0] = 0;
          if (v55)
            result = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v62 + 24))(v62, v55, 0, 8);
          v63[0] = 0;
          if (v64)
            result = (*(uint64_t (**)(uint64_t, uint64_t *, _QWORD, uint64_t))(*(_QWORD *)v65 + 24))(v65, v64, 0, 8);
          goto LABEL_73;
        }
        v49 = (FIK::Hierarchy *)a1;
        v50 = (FIK::Hierarchy *)a2;
        v51 = 1;
      }
LABEL_73:
      ++a5;
    }
    while (a5 != v36);
  }
  return result;
}

FIK::Hierarchy *`anonymous namespace'::mapFingers(FIK::Hierarchy *this, FIK::Hierarchy *a2, int a3, uint64_t a4)
{
  FIK::Hierarchy *v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  BOOL v17;
  uint64_t *v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t i;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  BOOL v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;

  v6 = this;
  if (a3)
    v7 = 8;
  else
    v7 = 13;
  v8 = (_QWORD *)((char *)this + 80);
  v9 = *((_QWORD *)this + 10);
  if (!v9)
    goto LABEL_14;
  v10 = (_QWORD *)((char *)this + 80);
  do
  {
    v11 = *(_DWORD *)(v9 + 32);
    v12 = v11 < v7;
    if (v11 >= v7)
      v13 = (uint64_t *)v9;
    else
      v13 = (uint64_t *)(v9 + 8);
    if (!v12)
      v10 = (_QWORD *)v9;
    v9 = *v13;
  }
  while (*v13);
  if (v10 == v8 || v7 < *((_DWORD *)v10 + 8))
LABEL_14:
    v10 = (_QWORD *)((char *)this + 80);
  v14 = *((_QWORD *)a2 + 10);
  if (v14)
  {
    v15 = (_QWORD *)((char *)a2 + 80);
    do
    {
      v16 = *(_DWORD *)(v14 + 32);
      v17 = v16 < v7;
      if (v16 >= v7)
        v18 = (uint64_t *)v14;
      else
        v18 = (uint64_t *)(v14 + 8);
      if (!v17)
        v15 = (_QWORD *)v14;
      v14 = *v18;
    }
    while (*v18);
    if (v15 != (_QWORD *)((char *)a2 + 80) && v7 >= *((_DWORD *)v15 + 8) && v10 != v8)
    {
      v20 = v10[5];
      v21 = v15[5] >= v20 ? v10[5] : v15[5];
      if (v20)
      {
        for (i = 0; i < v20; ++i)
        {
          if (i < v21)
          {
            v23 = *(_QWORD *)(v10[7] + 8 * i);
            v24 = *(_QWORD *)(v15[7] + 8 * i);
            *(_QWORD *)(a4 + 8 * v23) = (int)v24;
            FIK::Hierarchy::descendentIndicesOf(v6, v23, &v41);
            this = (FIK::Hierarchy *)FIK::Hierarchy::descendentIndicesOf(a2, v24, &v38);
            v25 = v42;
            if (v41)
            {
              v26 = (_QWORD *)(v42 + 8 * v41 - 8);
              if ((unint64_t)v26 > v42)
              {
                v27 = v42 + 8;
                do
                {
                  v28 = *(_QWORD *)(v27 - 8);
                  *(_QWORD *)(v27 - 8) = *v26;
                  *v26-- = v28;
                  v29 = v27 >= (unint64_t)v26;
                  v27 += 8;
                }
                while (!v29);
              }
            }
            v30 = v39;
            v31 = v38;
            v32 = (_QWORD *)(v39 + 8 * v38 - 8);
            if (v38)
              v33 = (unint64_t)v32 > v39;
            else
              v33 = 0;
            if (v33)
            {
              v34 = v39 + 8;
              do
              {
                v35 = *(_QWORD *)(v34 - 8);
                *(_QWORD *)(v34 - 8) = *v32;
                *v32-- = v35;
                v29 = v34 >= (unint64_t)v32;
                v34 += 8;
              }
              while (!v29);
              v31 = v38;
            }
            v36 = v41;
            if (v31 >= v41)
              v31 = v41;
            if (v41)
            {
              v37 = 0;
              do
              {
                if (v37 < v31)
                  *(_QWORD *)(a4 + 8 * *(_QWORD *)(v25 + 8 * v37)) = *(int *)(v30 + 8 * v37);
                ++v37;
              }
              while (v37 < v36);
            }
            v38 = 0;
            if (v30)
            {
              this = (FIK::Hierarchy *)(*(uint64_t (**)(uint64_t, unint64_t, _QWORD, uint64_t))(*(_QWORD *)v40 + 24))(v40, v30, 0, 8);
              v25 = v42;
            }
            v41 = 0;
            if (v25)
              this = (FIK::Hierarchy *)(*(uint64_t (**)(uint64_t, unint64_t, _QWORD, uint64_t))(*(_QWORD *)v43 + 24))(v43, v25, 0, 8);
            v20 = v10[5];
          }
        }
      }
    }
  }
  return this;
}

uint64_t FIK::IKArray<unsigned long>::insert(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v8 = a1[2];
  v9 = a2 - v8;
  v10 = v8 + 8 * *a1;
  FIK::IKArray<FIK::Segment *>::reserve(a1, *a1 + a3);
  v11 = a1[2];
  v12 = (_QWORD *)(v11 + v9);
  if (v10 != a2)
    memmove(&v12[a3], (const void *)(v11 + v9), v10 - a2);
  if (a3)
  {
    v13 = 8 * a3;
    do
    {
      *v12++ = *a4;
      v13 -= 8;
    }
    while (v13);
  }
  *a1 += a3;
  return a1[2] + 8 * (v9 >> 3);
}

void FIK::RigBuilderUtils::addTargetsToRig<FIK::MoCapRig>(unint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  IKString *v11;
  char *v12;
  FIK *v13;
  int v14;
  unsigned __int8 v15;
  uint64_t v16;
  const IKString *v17;
  void (***v18)(FIK::CrtAllocator *__hidden);
  uint64_t v19;
  char *v20;
  int v21;
  char *v22;
  IKString *v23;
  void (***v24)(FIK::CrtAllocator *__hidden);

  v4 = *a1;
  FIK::IKArray<FIK::MoCapBone>::resize(a2 + 208, *a1);
  if (v4)
  {
    v5 = 0;
    for (i = 0; i != v4; ++i)
    {
      v7 = *(_QWORD *)(a2 + 224);
      v8 = v7 + v5;
      *(_DWORD *)(v7 + v5) = i;
      v9 = (_OWORD *)FIK::Hierarchy::localSpaceRestPose((FIK::Hierarchy *)a1, i);
      *(_OWORD *)(v8 + 64) = *v9;
      *(_OWORD *)(v8 + 80) = v9[1];
      v10 = FIK::Hierarchy::nameOf((FIK::Hierarchy *)a1, i);
      v11 = *(IKString **)(v10 + 8);
      if (v11)
        v12 = *(char **)v10;
      else
        v12 = (char *)&unk_2108059BE;
      IKString::assign((_QWORD *)(v8 + 8), v12, v11);
      v13 = (FIK *)FIK::Hierarchy::parentIndexOf((FIK::Hierarchy *)a1, i);
      v14 = (int)v13;
      v16 = v15;
      if (v15)
      {
        v17 = (const IKString *)FIK::Hierarchy::nameOf((FIK::Hierarchy *)a1, (uint64_t)v13);
        IKString::IKString((IKString *)&v22, v17);
      }
      else
      {
        v18 = FIK::defaultAllocator(v13);
        v22 = 0;
        v23 = 0;
        v24 = v18;
        IKString::assign(&v22, (char *)&unk_2108059BE, 0);
      }
      v19 = v7 + v5;
      if (v23)
        v20 = v22;
      else
        v20 = (char *)&unk_2108059BE;
      IKString::assign((_QWORD *)(v19 + 32), v20, v23);
      if (v23)
        ((void (*)(void (***)(FIK::CrtAllocator *__hidden), char *, _QWORD, uint64_t))(*v24)[3])(v24, v22, 0, 8);
      if (v16)
        v21 = v14;
      else
        v21 = -1;
      *(_DWORD *)(v19 + 4) = v21;
      v5 += 544;
    }
  }
}

uint64_t FIK::IKArray<FIK::MoCapBone>::resize(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  _QWORD v5[3];
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  FIK::MoCapBone::MoCapBone((FIK::MoCapBone *)v5, *(FIK::Allocator **)(a1 + 24));
  FIK::IKArray<FIK::MoCapBone>::resize((unint64_t *)a1, a2, (uint64_t)v5);
  result = FIK::IKArray<IKString>::~IKArray((uint64_t)&v13);
  if (v11)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v12 + 24))(v12, v10, 0, 8);
    v10 = 0;
    v11 = 0;
  }
  if (v8)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v9 + 24))(v9, v7, 0, 8);
    v7 = 0;
    v8 = 0;
  }
  if (v5[2])
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v6 + 24))(v6, v5[1], 0, 8);
  return result;
}

void FIK::RigBuilderUtils::cullJointsFromRig<FIK::MoCapRig,FIK::MoCapBone>(FIK::Hierarchy *this, int *a2, uint64_t a3, int *a4, uint64_t a5, _QWORD *a6)
{
  char *v11;
  char *v12;
  char *v13;
  int v14;
  BOOL v15;
  char **v16;
  const IKString *v17;
  void *v18;
  const IKString *v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  int v23;
  char *v24;
  int v25;
  BOOL v26;
  uint64_t *v27;
  const IKString *v28;
  void *v29;
  const IKString *v30;
  uint64_t v31;
  int *v32;
  char **v33;
  char *v34;
  int v35;
  char **v36;
  int v37;
  BOOL v38;
  char **v39;
  char *v40;
  uint64_t *v41;
  uint64_t *v42;
  const IKString *v43;
  void *v44;
  const IKString *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  const IKString *v50;
  uint64_t v51;
  uint64_t v52;
  IKString *v53;
  char *v54;
  IKString *v55;
  char *v56;
  __int128 v57;
  __int128 v58;
  IKString *v59;
  char *v60;
  __int128 v61;
  FIK::Allocator *v62;
  void *v64;
  size_t v65;
  uint64_t v66;
  uint64_t *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70[2];
  const IKString *v71;

  v62 = (FIK::Allocator *)a6[2];
  v68 = 0;
  v69 = 0;
  v67 = (uint64_t *)&v68;
  v12 = (char *)this + 56;
  v11 = (char *)*((_QWORD *)this + 7);
  if (v11)
  {
    v13 = (char *)this + 56;
    do
    {
      v14 = *((_DWORD *)v11 + 8);
      v15 = v14 < 0;
      if (v14 >= 0)
        v16 = (char **)v11;
      else
        v16 = (char **)(v11 + 8);
      if (!v15)
        v13 = v11;
      v11 = *v16;
    }
    while (*v16);
    if (v13 != v12 && *((int *)v13 + 8) <= 0)
    {
      v17 = (const IKString *)FIK::Hierarchy::nameOf(this, *((_QWORD *)v13 + 5));
      IKString::IKString((IKString *)&v64, v17);
      if (v65)
        v18 = v64;
      else
        v18 = &unk_2108059BE;
      FIK::Hierarchy::ancestorsOf((uint64_t *)this, v18, v65, v70);
      if (v70[0])
      {
        v19 = v71;
        v20 = 24 * v70[0];
        do
        {
          std::__tree<IKString>::__emplace_unique_key_args<IKString,IKString const&>(&v67, (uint64_t)v19, v19);
          v19 = (const IKString *)((char *)v19 + 24);
          v20 -= 24;
        }
        while (v20);
      }
      FIK::IKArray<IKString>::~IKArray((uint64_t)v70);
      if (v65)
        (*(void (**)(uint64_t, void *, _QWORD, uint64_t))(*(_QWORD *)v66 + 24))(v66, v64, 0, 8);
    }
  }
  if (a3)
  {
    v21 = &a2[a3];
    do
    {
      v22 = *(_QWORD *)v12;
      if (*(_QWORD *)v12)
      {
        v23 = *a2;
        v24 = v12;
        do
        {
          v25 = *(_DWORD *)(v22 + 32);
          v26 = v25 < v23;
          if (v25 >= v23)
            v27 = (uint64_t *)v22;
          else
            v27 = (uint64_t *)(v22 + 8);
          if (!v26)
            v24 = (char *)v22;
          v22 = *v27;
        }
        while (*v27);
        if (v24 != v12 && v23 >= *((_DWORD *)v24 + 8))
        {
          v28 = (const IKString *)FIK::Hierarchy::nameOf(this, *((_QWORD *)v24 + 5));
          IKString::IKString((IKString *)&v64, v28);
          std::__tree<IKString>::__emplace_unique_key_args<IKString,IKString const&>(&v67, (uint64_t)&v64, (const IKString *)&v64);
          if (v65)
            v29 = v64;
          else
            v29 = &unk_2108059BE;
          FIK::Hierarchy::descendentsOf((uint64_t *)this, v29, v65, v70);
          if (v70[0])
          {
            v30 = v71;
            v31 = 24 * v70[0];
            do
            {
              std::__tree<IKString>::__emplace_unique_key_args<IKString,IKString const&>(&v67, (uint64_t)v30, v30);
              v30 = (const IKString *)((char *)v30 + 24);
              v31 -= 24;
            }
            while (v31);
          }
          FIK::IKArray<IKString>::~IKArray((uint64_t)v70);
          if (v65)
            (*(void (**)(uint64_t, void *, _QWORD, uint64_t))(*(_QWORD *)v66 + 24))(v66, v64, 0, 8);
        }
      }
      ++a2;
    }
    while (a2 != v21);
  }
  if (a5)
  {
    v32 = &a4[a5];
    v33 = (char **)((char *)this + 80);
    do
    {
      v34 = *v33;
      if (*v33)
      {
        v35 = *a4;
        v36 = (char **)((char *)this + 80);
        do
        {
          v37 = *((_DWORD *)v34 + 8);
          v38 = v37 < v35;
          if (v37 >= v35)
            v39 = (char **)v34;
          else
            v39 = (char **)(v34 + 8);
          if (!v38)
            v36 = (char **)v34;
          v34 = *v39;
        }
        while (*v39);
        if (v36 != v33 && v35 >= *((_DWORD *)v36 + 8))
        {
          v40 = v36[5];
          if (v40)
          {
            v41 = (uint64_t *)v36[7];
            v42 = &v41[(_QWORD)v40];
            do
            {
              v43 = (const IKString *)FIK::Hierarchy::nameOf(this, *v41);
              IKString::IKString((IKString *)&v64, v43);
              std::__tree<IKString>::__emplace_unique_key_args<IKString,IKString const&>(&v67, (uint64_t)&v64, (const IKString *)&v64);
              if (v65)
                v44 = v64;
              else
                v44 = &unk_2108059BE;
              FIK::Hierarchy::descendentsOf((uint64_t *)this, v44, v65, v70);
              if (v70[0])
              {
                v45 = v71;
                v46 = 24 * v70[0];
                do
                {
                  std::__tree<IKString>::__emplace_unique_key_args<IKString,IKString const&>(&v67, (uint64_t)v45, v45);
                  v45 = (const IKString *)((char *)v45 + 24);
                  v46 -= 24;
                }
                while (v46);
              }
              FIK::IKArray<IKString>::~IKArray((uint64_t)v70);
              if (v65)
                (*(void (**)(uint64_t, void *, _QWORD, uint64_t))(*(_QWORD *)v66 + 24))(v66, v64, 0, 8);
              ++v41;
            }
            while (v41 != v42);
          }
        }
      }
      ++a4;
    }
    while (a4 != v32);
  }
  if (v69)
  {
    v47 = a6 + 26;
    FIK::IKArray<FIK::MoCapBone>::IKArray<FIK::MoCapBone,void>(v70, a6[26] - v69, v62);
    if (a6[26])
    {
      v48 = 0;
      v49 = a6[28];
      v50 = v71;
      v51 = 544 * *v47;
      do
      {
        v52 = v49 + v48;
        if (&v68 == std::__find_impl[abi:nn180100]<std::__tree_const_iterator<IKString,std::__tree_node<IKString,void *> *,long>,std::__tree_const_iterator<IKString,std::__tree_node<IKString,void *> *,long>,IKString,std::__identity>(v67, &v68, v49 + v48 + 8))
        {
          *(_QWORD *)v50 = *(_QWORD *)v52;
          v53 = *(IKString **)(v52 + 16);
          if (v53)
            v54 = *(char **)(v49 + v48 + 8);
          else
            v54 = (char *)&unk_2108059BE;
          IKString::assign((_QWORD *)v50 + 1, v54, v53);
          v55 = *(IKString **)(v52 + 40);
          if (v55)
            v56 = *(char **)(v52 + 32);
          else
            v56 = (char *)&unk_2108059BE;
          IKString::assign((_QWORD *)v50 + 4, v56, v55);
          *((_OWORD *)v50 + 4) = *(_OWORD *)(v52 + 64);
          *((_OWORD *)v50 + 5) = *(_OWORD *)(v52 + 80);
          v57 = *(_OWORD *)(v52 + 96);
          v58 = *(_OWORD *)(v52 + 112);
          *((_QWORD *)v50 + 16) = *(_QWORD *)(v52 + 128);
          *((_OWORD *)v50 + 6) = v57;
          *((_OWORD *)v50 + 7) = v58;
          *((_OWORD *)v50 + 9) = *(_OWORD *)(v52 + 144);
          *((_OWORD *)v50 + 10) = *(_OWORD *)(v52 + 160);
          *((_OWORD *)v50 + 11) = *(_OWORD *)(v52 + 176);
          *((_OWORD *)v50 + 12) = *(_OWORD *)(v52 + 192);
          *((_OWORD *)v50 + 13) = *(_OWORD *)(v52 + 208);
          *((_OWORD *)v50 + 14) = *(_OWORD *)(v52 + 224);
          *((_OWORD *)v50 + 15) = *(_OWORD *)(v52 + 240);
          v59 = *(IKString **)(v52 + 264);
          if (v59)
            v60 = *(char **)(v52 + 256);
          else
            v60 = (char *)&unk_2108059BE;
          IKString::assign((_QWORD *)v50 + 32, v60, v59);
          *((_DWORD *)v50 + 70) = *(_DWORD *)(v52 + 280);
          *((_OWORD *)v50 + 18) = *(_OWORD *)(v52 + 288);
          *((_OWORD *)v50 + 19) = *(_OWORD *)(v52 + 304);
          *((_OWORD *)v50 + 20) = *(_OWORD *)(v52 + 320);
          *((_OWORD *)v50 + 21) = *(_OWORD *)(v52 + 336);
          v61 = *(_OWORD *)(v52 + 352);
          *((_QWORD *)v50 + 46) = *(_QWORD *)(v52 + 368);
          *((_OWORD *)v50 + 22) = v61;
          *((_QWORD *)v50 + 48) = *(_QWORD *)(v52 + 384);
          *((_OWORD *)v50 + 25) = *(_OWORD *)(v52 + 400);
          FIK::IKArray<IKString>::operator=((uint64_t *)v50 + 52, (uint64_t *)(v52 + 416));
          *((_OWORD *)v50 + 28) = *(_OWORD *)(v52 + 448);
          *((_OWORD *)v50 + 29) = *(_OWORD *)(v52 + 464);
          *((_QWORD *)v50 + 60) = *(_QWORD *)(v52 + 480);
          *((_OWORD *)v50 + 31) = *(_OWORD *)(v52 + 496);
          *((_OWORD *)v50 + 32) = *(_OWORD *)(v52 + 512);
          *((_OWORD *)v50 + 33) = *(_OWORD *)(v52 + 528);
          v50 = (const IKString *)((char *)v50 + 544);
        }
        v48 += 544;
      }
      while (v51 != v48);
    }
    if (v70[0])
      IKString::assign((_QWORD *)v71 + 4, (char *)&unk_2108059BE, 0);
    FIK::IKArray<FIK::MoCapBone>::operator=(v47, v70);
    FIK::Serialisation::fixUpRigIndices((uint64_t)a6);
    FIK::IKArray<FIK::MoCapBone>::~IKArray(v70);
  }
  std::__tree<IKString>::destroy((uint64_t)&v67, v68);
}

uint64_t *FIK::IKArray<FIK::MoCapBone>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;

  if (*a2 >= (unint64_t)a1[1])
  {
    v14 = a2[1];
    v15 = a1[3];
    if (v14)
    {
      v16 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(a1[3], 544 * v14, 16);
      v17 = v16;
      if (544 * v14)
        bzero(v16, 544 * v14);
    }
    else
    {
      v17 = 0;
    }
    v18 = *a2;
    if (*a2)
    {
      v19 = 0;
      v20 = a2[2];
      do
      {
        v21 = &v17[v19];
        *(_QWORD *)&v17[v19] = *(_QWORD *)(v20 + v19);
        IKString::IKString((IKString *)&v17[v19 + 8], (const IKString *)(v20 + v19 + 8));
        IKString::IKString((IKString *)&v17[v19 + 32], (const IKString *)(v20 + v19 + 32));
        *((_OWORD *)v21 + 4) = *(_OWORD *)(v20 + v19 + 64);
        *((_OWORD *)v21 + 5) = *(_OWORD *)(v20 + v19 + 80);
        v22 = *(_OWORD *)(v20 + v19 + 96);
        v23 = *(_OWORD *)(v20 + v19 + 112);
        *((_QWORD *)v21 + 16) = *(_QWORD *)(v20 + v19 + 128);
        *((_OWORD *)v21 + 6) = v22;
        *((_OWORD *)v21 + 7) = v23;
        *((_OWORD *)v21 + 9) = *(_OWORD *)(v20 + v19 + 144);
        *((_OWORD *)v21 + 10) = *(_OWORD *)(v20 + v19 + 160);
        *((_OWORD *)v21 + 11) = *(_OWORD *)(v20 + v19 + 176);
        *((_OWORD *)v21 + 12) = *(_OWORD *)(v20 + v19 + 192);
        *((_OWORD *)v21 + 13) = *(_OWORD *)(v20 + v19 + 208);
        *((_OWORD *)v21 + 14) = *(_OWORD *)(v20 + v19 + 224);
        *((_OWORD *)v21 + 15) = *(_OWORD *)(v20 + v19 + 240);
        IKString::IKString((IKString *)&v17[v19 + 256], (const IKString *)(v20 + v19 + 256));
        *((_DWORD *)v21 + 70) = *(_DWORD *)(v20 + v19 + 280);
        *((_OWORD *)v21 + 18) = *(_OWORD *)(v20 + v19 + 288);
        *((_OWORD *)v21 + 19) = *(_OWORD *)(v20 + v19 + 304);
        *((_OWORD *)v21 + 20) = *(_OWORD *)(v20 + v19 + 320);
        *((_OWORD *)v21 + 21) = *(_OWORD *)(v20 + v19 + 336);
        v24 = *(_OWORD *)(v20 + v19 + 352);
        *((_QWORD *)v21 + 46) = *(_QWORD *)(v20 + v19 + 368);
        *((_OWORD *)v21 + 22) = v24;
        *((_QWORD *)v21 + 48) = *(_QWORD *)(v20 + v19 + 384);
        *((_OWORD *)v21 + 25) = *(_OWORD *)(v20 + v19 + 400);
        FIK::IKArray<IKString>::IKArray(&v17[v19 + 416], (_QWORD *)(v20 + v19 + 416));
        *((_OWORD *)v21 + 28) = *(_OWORD *)(v20 + v19 + 448);
        *((_OWORD *)v21 + 29) = *(_OWORD *)(v20 + v19 + 464);
        *((_QWORD *)v21 + 60) = *(_QWORD *)(v20 + v19 + 480);
        *((_OWORD *)v21 + 31) = *(_OWORD *)(v20 + v19 + 496);
        *((_OWORD *)v21 + 32) = *(_OWORD *)(v20 + v19 + 512);
        *((_OWORD *)v21 + 33) = *(_OWORD *)(v20 + v19 + 528);
        v19 += 544;
        --v18;
      }
      while (v18);
    }
    v26 = a1[2];
    v25 = a1[3];
    a1[1] = v14;
    a1[2] = (uint64_t)v17;
    a1[3] = v15;
    if (v26)
      (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v25 + 24))(v25, v26, 0, 8);
  }
  else
  {
    v4 = *a1;
    if (*a1)
    {
      v5 = a1[2];
      do
      {
        std::__destroy_at[abi:nn180100]<FIK::MoCapBone,0>(v5);
        v5 += 544;
        --v4;
      }
      while (v4);
    }
    *a1 = 0;
    v6 = *a2;
    if (*a2)
    {
      v7 = 0;
      v8 = a1[2];
      v9 = a2[2];
      do
      {
        v10 = v8 + v7;
        *(_QWORD *)(v8 + v7) = *(_QWORD *)(v9 + v7);
        IKString::IKString((IKString *)(v8 + v7 + 8), (const IKString *)(v9 + v7 + 8));
        IKString::IKString((IKString *)(v8 + v7 + 32), (const IKString *)(v9 + v7 + 32));
        *(_OWORD *)(v10 + 64) = *(_OWORD *)(v9 + v7 + 64);
        *(_OWORD *)(v10 + 80) = *(_OWORD *)(v9 + v7 + 80);
        v11 = *(_OWORD *)(v9 + v7 + 96);
        v12 = *(_OWORD *)(v9 + v7 + 112);
        *(_QWORD *)(v10 + 128) = *(_QWORD *)(v9 + v7 + 128);
        *(_OWORD *)(v10 + 96) = v11;
        *(_OWORD *)(v10 + 112) = v12;
        *(_OWORD *)(v10 + 144) = *(_OWORD *)(v9 + v7 + 144);
        *(_OWORD *)(v10 + 160) = *(_OWORD *)(v9 + v7 + 160);
        *(_OWORD *)(v10 + 176) = *(_OWORD *)(v9 + v7 + 176);
        *(_OWORD *)(v10 + 192) = *(_OWORD *)(v9 + v7 + 192);
        *(_OWORD *)(v10 + 208) = *(_OWORD *)(v9 + v7 + 208);
        *(_OWORD *)(v10 + 224) = *(_OWORD *)(v9 + v7 + 224);
        *(_OWORD *)(v10 + 240) = *(_OWORD *)(v9 + v7 + 240);
        IKString::IKString((IKString *)(v8 + v7 + 256), (const IKString *)(v9 + v7 + 256));
        *(_DWORD *)(v10 + 280) = *(_DWORD *)(v9 + v7 + 280);
        *(_OWORD *)(v10 + 288) = *(_OWORD *)(v9 + v7 + 288);
        *(_OWORD *)(v10 + 304) = *(_OWORD *)(v9 + v7 + 304);
        *(_OWORD *)(v10 + 320) = *(_OWORD *)(v9 + v7 + 320);
        *(_OWORD *)(v10 + 336) = *(_OWORD *)(v9 + v7 + 336);
        v13 = *(_OWORD *)(v9 + v7 + 352);
        *(_QWORD *)(v10 + 368) = *(_QWORD *)(v9 + v7 + 368);
        *(_OWORD *)(v10 + 352) = v13;
        *(_QWORD *)(v10 + 384) = *(_QWORD *)(v9 + v7 + 384);
        *(_OWORD *)(v10 + 400) = *(_OWORD *)(v9 + v7 + 400);
        FIK::IKArray<IKString>::IKArray((_QWORD *)(v8 + v7 + 416), (_QWORD *)(v9 + v7 + 416));
        *(_OWORD *)(v10 + 448) = *(_OWORD *)(v9 + v7 + 448);
        *(_OWORD *)(v10 + 464) = *(_OWORD *)(v9 + v7 + 464);
        *(_QWORD *)(v10 + 480) = *(_QWORD *)(v9 + v7 + 480);
        *(_OWORD *)(v10 + 496) = *(_OWORD *)(v9 + v7 + 496);
        *(_OWORD *)(v10 + 512) = *(_OWORD *)(v9 + v7 + 512);
        *(_OWORD *)(v10 + 528) = *(_OWORD *)(v9 + v7 + 528);
        v7 += 544;
        --v6;
      }
      while (v6);
    }
  }
  *a1 = *a2;
  return a1;
}

uint64_t *FIK::IKArray<FIK::RigBone>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  if (*a2 >= (unint64_t)a1[1])
  {
    v11 = a2[1];
    v12 = a1[3];
    if (v11)
    {
      v13 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(a1[3], v11 << 8, 16);
      v14 = v13;
      if (v11 << 8)
        bzero(v13, v11 << 8);
    }
    else
    {
      v14 = 0;
    }
    v15 = *a2;
    if (*a2)
    {
      v16 = v14 + 32;
      v17 = a2[2] + 32;
      do
      {
        *((_QWORD *)v16 - 4) = *(_QWORD *)(v17 - 32);
        IKString::IKString((IKString *)(v16 - 24), (const IKString *)(v17 - 24));
        IKString::IKString((IKString *)v16, (const IKString *)v17);
        *((_OWORD *)v16 + 2) = *(_OWORD *)(v17 + 32);
        *((_OWORD *)v16 + 3) = *(_OWORD *)(v17 + 48);
        v18 = *(_OWORD *)(v17 + 64);
        v19 = *(_OWORD *)(v17 + 80);
        *((_QWORD *)v16 + 12) = *(_QWORD *)(v17 + 96);
        *((_OWORD *)v16 + 4) = v18;
        *((_OWORD *)v16 + 5) = v19;
        *((_OWORD *)v16 + 7) = *(_OWORD *)(v17 + 112);
        *((_OWORD *)v16 + 8) = *(_OWORD *)(v17 + 128);
        *((_OWORD *)v16 + 9) = *(_OWORD *)(v17 + 144);
        *((_OWORD *)v16 + 10) = *(_OWORD *)(v17 + 160);
        *((_OWORD *)v16 + 11) = *(_OWORD *)(v17 + 176);
        *((_OWORD *)v16 + 12) = *(_OWORD *)(v17 + 192);
        *((_OWORD *)v16 + 13) = *(_OWORD *)(v17 + 208);
        v16 += 256;
        v17 += 256;
        --v15;
      }
      while (v15);
    }
    v21 = a1[2];
    v20 = a1[3];
    a1[1] = v11;
    a1[2] = (uint64_t)v14;
    a1[3] = v12;
    if (v21)
      (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v20 + 24))(v20, v21, 0, 8);
  }
  else
  {
    v4 = *a1;
    if (*a1)
    {
      v5 = a1[2];
      do
      {
        std::__destroy_at[abi:nn180100]<FIK::RigBoneBase,0>(v5);
        v5 += 256;
        --v4;
      }
      while (v4);
    }
    *a1 = 0;
    v6 = *a2;
    if (*a2)
    {
      v7 = a1[2] + 32;
      v8 = a2[2] + 32;
      do
      {
        *(_QWORD *)(v7 - 32) = *(_QWORD *)(v8 - 32);
        IKString::IKString((IKString *)(v7 - 24), (const IKString *)(v8 - 24));
        IKString::IKString((IKString *)v7, (const IKString *)v8);
        *(_OWORD *)(v7 + 32) = *(_OWORD *)(v8 + 32);
        *(_OWORD *)(v7 + 48) = *(_OWORD *)(v8 + 48);
        v9 = *(_OWORD *)(v8 + 64);
        v10 = *(_OWORD *)(v8 + 80);
        *(_QWORD *)(v7 + 96) = *(_QWORD *)(v8 + 96);
        *(_OWORD *)(v7 + 64) = v9;
        *(_OWORD *)(v7 + 80) = v10;
        *(_OWORD *)(v7 + 112) = *(_OWORD *)(v8 + 112);
        *(_OWORD *)(v7 + 128) = *(_OWORD *)(v8 + 128);
        *(_OWORD *)(v7 + 144) = *(_OWORD *)(v8 + 144);
        *(_OWORD *)(v7 + 160) = *(_OWORD *)(v8 + 160);
        *(_OWORD *)(v7 + 176) = *(_OWORD *)(v8 + 176);
        *(_OWORD *)(v7 + 192) = *(_OWORD *)(v8 + 192);
        *(_OWORD *)(v7 + 208) = *(_OWORD *)(v8 + 208);
        v7 += 256;
        v8 += 256;
        --v6;
      }
      while (v6);
    }
  }
  *a1 = *a2;
  return a1;
}

uint64_t FIK::RigBuilderUtils::hasAllExpectedJoints(uint64_t a1, int *a2, uint64_t a3)
{
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t *v12;

  if (!a3)
    return 1;
  v3 = &a2[a3];
  v6 = *(_QWORD *)(a1 + 24);
  v4 = a1 + 24;
  v5 = v6;
  while (v5)
  {
    v7 = *a2;
    v8 = v4;
    v9 = v5;
    do
    {
      v10 = *(_DWORD *)(v9 + 32);
      v11 = v10 < v7;
      if (v10 >= v7)
        v12 = (uint64_t *)v9;
      else
        v12 = (uint64_t *)(v9 + 8);
      if (!v11)
        v8 = v9;
      v9 = *v12;
    }
    while (*v12);
    if (v8 == v4 || v7 < *(_DWORD *)(v8 + 32))
      break;
    if (++a2 == v3)
      return 1;
  }
  return 0;
}

double FIK::RigBuilderUtils::shiftHipsToOrigin(FIK::Hierarchy *this, double result)
{
  char *v2;
  char *v4;
  int v5;
  BOOL v6;
  char **v7;
  uint64_t v8;
  char v9;
  uint64_t v11;
  float32x4_t v12;
  uint64_t v13;
  float32x4_t v14;
  uint64_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  int32x4_t v19;
  float32x4_t v20;
  int32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int32x4_t v24;
  int8x16_t v25;
  float32x4_t v26;
  float32x4_t v27;
  int32x4_t v28;
  float32x4_t v29;
  int32x4_t v30;
  _OWORD v31[2];
  float32x4_t v32[2];
  float32x4_t v33;
  float32x4_t v34;

  v2 = (char *)*((_QWORD *)this + 7);
  if (v2)
  {
    v4 = (char *)this + 56;
    do
    {
      v5 = *((_DWORD *)v2 + 8);
      v6 = v5 < 0;
      if (v5 >= 0)
        v7 = (char **)v2;
      else
        v7 = (char **)(v2 + 8);
      if (!v6)
        v4 = v2;
      v2 = *v7;
    }
    while (*v7);
    if (v4 != (char *)this + 56 && *((int *)v4 + 8) <= 0)
    {
      v8 = FIK::Hierarchy::parentIndexOf(this, *((_QWORD *)v4 + 5));
      if (v9 && *((_BYTE *)this + 36) != 0)
      {
        v11 = v8;
        v13 = *((int *)this + 11);
        if (v13 <= 5)
        {
          v12.i32[0] = dword_210804934[v13];
          v12.i32[1] = dword_21080494C[v13];
          v12.i32[2] = dword_210804964[v13];
        }
        v14 = vmulq_f32(v12, v33);
        v15 = *((_QWORD *)v4 + 5);
        v16 = vmulq_f32(v32[1], (float32x4_t)xmmword_210802C20);
        v17 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v16, (int32x4_t)v16), (int8x16_t)v16, 0xCuLL);
        v18 = vnegq_f32(v16);
        v19 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v32[0], (int32x4_t)v32[0]), (int8x16_t)v32[0], 0xCuLL), v18), v32[0], v17);
        v20 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v19, v19), (int8x16_t)v19, 0xCuLL);
        v21 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v20, (int32x4_t)v20), (int8x16_t)v20, 0xCuLL), v18), v20, v17);
        v22 = vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v21, v21), (int8x16_t)v21, 0xCuLL), v20, v16, 3);
        v20.i64[0] = 0x4000000040000000;
        v20.i64[1] = 0x4000000040000000;
        v23 = vmlaq_f32(v32[0], v20, v22);
        v24 = (int32x4_t)vnegq_f32(v34);
        v25 = (int8x16_t)vtrn2q_s32((int32x4_t)v34, vtrn1q_s32((int32x4_t)v34, v24));
        v26 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v34, (int8x16_t)v24, 8uLL), *(float32x2_t *)v16.f32, 1), (float32x4_t)vextq_s8(v25, v25, 8uLL), v16.f32[0]);
        v27 = (float32x4_t)vrev64q_s32((int32x4_t)v34);
        v27.i32[0] = v24.i32[1];
        v27.i32[3] = v24.i32[2];
        v28 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v14, (int32x4_t)v14), (int8x16_t)v14, 0xCuLL), v18), v14, v17);
        v29 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v28, v28), (int8x16_t)v28, 0xCuLL);
        v30 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v29, (int32x4_t)v29), (int8x16_t)v29, 0xCuLL), v18), v29, v17);
        v31[0] = vsubq_f32(vmlaq_f32(v14, v20, vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v30, v30), (int8x16_t)v30, 0xCuLL), v29, v16, 3)), v23);
        v31[1] = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v34, v16, 3), v27, v16, 2), v26);
        *(_QWORD *)&result = FIK::Hierarchy::setLocalSpaceRestPose((uint64_t)this, v15, (uint64_t)v31).n128_u64[0];
      }
    }
  }
  return result;
}

uint64_t `anonymous namespace'::getModelSpaceForJointIndex@<X0>(FIK::Hierarchy *a1@<X0>, uint64_t a2@<X1>, float32x4_t *a3@<X8>)
{
  float32x4_t *v6;
  float32x4_t v7;
  uint64_t result;
  char v9;
  uint64_t v10;
  uint64_t v11;
  float32x4_t v12;
  int32x4_t v13;
  int8x16_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  int32x4_t v19;
  float32x4_t v20;
  int32x4_t v21;
  float32x4_t v22;
  char v23;
  float32x4_t v24;
  float32x4_t v25;

  v6 = (float32x4_t *)FIK::Hierarchy::localSpaceRestPose(a1, a2);
  v7 = v6[1];
  *a3 = *v6;
  a3[1] = v7;
  v25 = v7;
  result = FIK::Hierarchy::parentIndexOf(a1, a2);
  if (v9)
  {
    v10 = result;
    v24 = *a3;
    do
    {
      v11 = FIK::Hierarchy::localSpaceRestPose(a1, v10);
      v12 = *(float32x4_t *)(v11 + 16);
      v13 = (int32x4_t)vnegq_f32(v25);
      v14 = (int8x16_t)vtrn2q_s32((int32x4_t)v25, vtrn1q_s32((int32x4_t)v25, v13));
      v15 = (float32x4_t)vrev64q_s32((int32x4_t)v25);
      v15.i32[0] = v13.i32[1];
      v15.i32[3] = v13.i32[2];
      v16 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v25, v12, 3), v15, v12, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v25, (int8x16_t)v13, 8uLL), *(float32x2_t *)v12.f32, 1), (float32x4_t)vextq_s8(v14, v14, 8uLL), v12.f32[0]));
      v17 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v12, (int32x4_t)v12), (int8x16_t)v12, 0xCuLL);
      v18 = vnegq_f32(v12);
      v19 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v24, (int32x4_t)v24), (int8x16_t)v24, 0xCuLL), v18), v24, v17);
      v20 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v19, v19), (int8x16_t)v19, 0xCuLL);
      v21 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v20, (int32x4_t)v20), (int8x16_t)v20, 0xCuLL), v18), v20, v17);
      v22 = vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v21, v21), (int8x16_t)v21, 0xCuLL), v20, v12, 3);
      v12.i64[0] = 0x4000000040000000;
      v12.i64[1] = 0x4000000040000000;
      v24 = vaddq_f32(*(float32x4_t *)v11, vmlaq_f32(v24, v12, v22));
      v25 = v16;
      *a3 = v24;
      a3[1] = v16;
      result = FIK::Hierarchy::parentIndexOf(a1, v10);
      v10 = result;
    }
    while (v23);
  }
  return result;
}

unint64_t *FIK::IKArray<FIK::MoCapBone>::resize(unint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  unint64_t *v15;

  v15 = result;
  if (*result > a2)
  {
    if (*result != a2)
    {
      v3 = result[2] + 544 * a2;
      v4 = a2 - *result;
      do
      {
        result = (unint64_t *)std::__destroy_at[abi:nn180100]<FIK::MoCapBone,0>(v3);
        v3 += 544;
        v5 = __CFADD__(v4++, 1);
      }
      while (!v5);
    }
  }
  else
  {
    v8 = result;
    result = (unint64_t *)FIK::IKArray<FIK::MoCapBone>::reserve((uint64_t)result, a2);
    v9 = *v8;
    if (a2 != *v8)
    {
      v10 = v15[2] + 544 * v9 + 256;
      v11 = v9 - a2;
      do
      {
        *(_QWORD *)(v10 - 256) = *(_QWORD *)a3;
        IKString::IKString((IKString *)(v10 - 248), (const IKString *)(a3 + 8));
        IKString::IKString((IKString *)(v10 - 224), (const IKString *)(a3 + 32));
        *(_OWORD *)(v10 - 192) = *(_OWORD *)(a3 + 64);
        *(_OWORD *)(v10 - 176) = *(_OWORD *)(a3 + 80);
        v12 = *(_OWORD *)(a3 + 96);
        v13 = *(_OWORD *)(a3 + 112);
        *(_QWORD *)(v10 - 128) = *(_QWORD *)(a3 + 128);
        *(_OWORD *)(v10 - 160) = v12;
        *(_OWORD *)(v10 - 144) = v13;
        *(_OWORD *)(v10 - 112) = *(_OWORD *)(a3 + 144);
        *(_OWORD *)(v10 - 96) = *(_OWORD *)(a3 + 160);
        *(_OWORD *)(v10 - 80) = *(_OWORD *)(a3 + 176);
        *(_OWORD *)(v10 - 64) = *(_OWORD *)(a3 + 192);
        *(_OWORD *)(v10 - 48) = *(_OWORD *)(a3 + 208);
        *(_OWORD *)(v10 - 32) = *(_OWORD *)(a3 + 224);
        *(_OWORD *)(v10 - 16) = *(_OWORD *)(a3 + 240);
        IKString::IKString((IKString *)v10, (const IKString *)(a3 + 256));
        *(_DWORD *)(v10 + 24) = *(_DWORD *)(a3 + 280);
        *(_OWORD *)(v10 + 32) = *(_OWORD *)(a3 + 288);
        *(_OWORD *)(v10 + 48) = *(_OWORD *)(a3 + 304);
        *(_OWORD *)(v10 + 64) = *(_OWORD *)(a3 + 320);
        *(_OWORD *)(v10 + 80) = *(_OWORD *)(a3 + 336);
        v14 = *(_OWORD *)(a3 + 352);
        *(_QWORD *)(v10 + 112) = *(_QWORD *)(a3 + 368);
        *(_OWORD *)(v10 + 96) = v14;
        *(_QWORD *)(v10 + 128) = *(_QWORD *)(a3 + 384);
        *(_OWORD *)(v10 + 144) = *(_OWORD *)(a3 + 400);
        result = FIK::IKArray<IKString>::IKArray((_QWORD *)(v10 + 160), (_QWORD *)(a3 + 416));
        *(_OWORD *)(v10 + 192) = *(_OWORD *)(a3 + 448);
        *(_OWORD *)(v10 + 208) = *(_OWORD *)(a3 + 464);
        *(_QWORD *)(v10 + 224) = *(_QWORD *)(a3 + 480);
        *(_OWORD *)(v10 + 240) = *(_OWORD *)(a3 + 496);
        *(_OWORD *)(v10 + 256) = *(_OWORD *)(a3 + 512);
        *(_OWORD *)(v10 + 272) = *(_OWORD *)(a3 + 528);
        v10 += 544;
        v5 = __CFADD__(v11++, 1);
      }
      while (!v5);
    }
  }
  *v15 = a2;
  return result;
}

uint64_t *std::__tree<IKString>::__emplace_unique_key_args<IKString,IKString const&>(uint64_t **a1, uint64_t a2, const IKString *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (uint64_t **)std::__tree<IKString>::__find_equal<IKString>((uint64_t)a1, &v9, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    v6 = (uint64_t *)operator new(0x38uLL);
    IKString::IKString((IKString *)(v6 + 4), a3);
    std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__insert_node_at(a1, v9, v7, v6);
  }
  return v6;
}

_QWORD *std::__tree<IKString>::__find_equal<IKString>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = (uint64_t)(v4 + 4);
        if (!IKString::operator<(a3, (uint64_t)(v4 + 4)))
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!IKString::operator<(v8, a3))
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void std::__tree<IKString>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<IKString>::destroy(a1, *a2);
    std::__tree<IKString>::destroy(a1, a2[1]);
    if (a2[5])
      (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2[6] + 24))(a2[6], a2[4], 0, 8);
    operator delete(a2);
  }
}

_QWORD *FIK::IKArray<FIK::MoCapBone>::IKArray<FIK::MoCapBone,void>(_QWORD *a1, uint64_t a2, FIK::Allocator *a3)
{
  uint64_t v4;
  unint64_t v6;
  size_t v7;
  char *v8;
  char *v9;
  char *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v16;
  _QWORD v17[2];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  _QWORD v46[4];
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;

  v4 = a2;
  v6 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  *a1 = a2;
  a1[1] = v6;
  if (v6)
  {
    v7 = 544 * v6;
    v8 = (char *)(*(uint64_t (**)(FIK::Allocator *, unint64_t, uint64_t))(*(_QWORD *)a3 + 16))(a3, 544 * v6, 16);
    v9 = v8;
    a1[2] = v8;
    a1[3] = a3;
    if (v7)
    {
      bzero(v8, v7);
      v9 = (char *)a1[2];
    }
  }
  else
  {
    v9 = 0;
    a1[2] = 0;
    a1[3] = a3;
  }
  FIK::MoCapBone::MoCapBone((FIK::MoCapBone *)&v16, a3);
  if (v4)
  {
    v10 = v9 + 256;
    do
    {
      *((_QWORD *)v10 - 32) = v16;
      IKString::IKString((IKString *)(v10 - 248), (const IKString *)v17);
      IKString::IKString((IKString *)(v10 - 224), (const IKString *)&v19);
      *((_OWORD *)v10 - 12) = v22;
      *((_OWORD *)v10 - 11) = v23;
      v11 = v24;
      v12 = v25;
      *((_QWORD *)v10 - 16) = v26;
      *((_OWORD *)v10 - 10) = v11;
      *((_OWORD *)v10 - 9) = v12;
      *((_OWORD *)v10 - 7) = v27;
      *((_OWORD *)v10 - 6) = v28;
      *((_OWORD *)v10 - 5) = v29;
      *((_OWORD *)v10 - 4) = v30;
      *((_OWORD *)v10 - 3) = v31;
      *((_OWORD *)v10 - 2) = v32;
      *((_OWORD *)v10 - 1) = v33;
      IKString::IKString((IKString *)v10, (const IKString *)&v34);
      *((_DWORD *)v10 + 6) = v37;
      *((_OWORD *)v10 + 2) = v38;
      *((_OWORD *)v10 + 3) = v39;
      *((_OWORD *)v10 + 4) = v40;
      *((_OWORD *)v10 + 5) = v41;
      v13 = v42;
      *((_QWORD *)v10 + 14) = v43;
      *((_OWORD *)v10 + 6) = v13;
      *((_QWORD *)v10 + 16) = v44;
      *((_OWORD *)v10 + 9) = v45;
      FIK::IKArray<IKString>::IKArray((_QWORD *)v10 + 20, v46);
      *((_OWORD *)v10 + 12) = v47;
      *((_OWORD *)v10 + 13) = v48;
      *((_QWORD *)v10 + 28) = v49;
      *((_OWORD *)v10 + 15) = v50;
      *((_OWORD *)v10 + 16) = v51;
      *((_OWORD *)v10 + 17) = v52;
      v10 += 544;
      --v4;
    }
    while (v4);
  }
  FIK::IKArray<IKString>::~IKArray((uint64_t)v46);
  if (v35)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v36 + 24))(v36, v34, 0, 8);
    v34 = 0;
    v35 = 0;
  }
  if (v20)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v21 + 24))(v21, v19, 0, 8);
    v19 = 0;
    v20 = 0;
  }
  if (v17[1])
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v18 + 24))(v18, v17[0], 0, 8);
  return a1;
}

_QWORD *std::__find_impl[abi:nn180100]<std::__tree_const_iterator<IKString,std::__tree_node<IKString,void *> *,long>,std::__tree_const_iterator<IKString,std::__tree_node<IKString,void *> *,long>,IKString,std::__identity>(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  size_t v5;
  const void *v6;
  uint64_t v7;
  const void *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;

  v3 = a1;
  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 8);
    if (v5)
      v6 = *(const void **)a3;
    else
      v6 = &unk_2108059BE;
    while (1)
    {
      v7 = v3[5];
      v8 = v7 ? (const void *)v3[4] : &unk_2108059BE;
      if (v7 == v5 && !memcmp(v8, v6, v5))
        break;
      v9 = (_QWORD *)v3[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v3[2];
          v11 = *v10 == (_QWORD)v3;
          v3 = v10;
        }
        while (!v11);
      }
      v3 = v10;
      if (v10 == a2)
        return a2;
    }
  }
  return v3;
}

uint64_t *FIK::IKArray<IKString>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v3;
  FIK *v4;
  uint64_t v5;
  _QWORD *v6;
  IKString **v7;
  void (***v8)(FIK::CrtAllocator *__hidden);
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  IKString **v14;
  uint64_t *v15;
  void (***v16)(FIK::CrtAllocator *__hidden);
  char *v17;
  uint64_t v18;
  uint64_t v19;

  v3 = a1;
  if (*a2 >= (unint64_t)a1[1])
  {
    v10 = a2[1];
    v11 = a1[3];
    if (v10)
    {
      a1 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(a1[3], 24 * v10, 8);
      v12 = a1;
      if (24 * v10)
        bzero(a1, 24 * v10);
    }
    else
    {
      v12 = 0;
    }
    v13 = *a2;
    if (*a2)
    {
      v14 = (IKString **)(a2[2] + 8);
      v15 = v12;
      do
      {
        v16 = FIK::defaultAllocator((FIK *)a1);
        *v15 = 0;
        v15[1] = 0;
        v15[2] = (uint64_t)v16;
        if (*v14)
          v17 = (char *)*(v14 - 1);
        else
          v17 = (char *)&unk_2108059BE;
        IKString::assign(v15, v17, *v14);
        v14 += 3;
        v15 += 3;
        --v13;
      }
      while (v13);
    }
    v19 = v3[2];
    v18 = v3[3];
    v3[1] = v10;
    v3[2] = (uint64_t)v12;
    v3[3] = v11;
    if (v19)
      (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v18 + 24))(v18, v19, 0, 8);
  }
  else
  {
    v4 = (FIK *)std::destroy_n[abi:nn180100]<IKString *,unsigned long>(a1[2], *a1);
    *v3 = 0;
    v5 = *a2;
    if (*a2)
    {
      v6 = (_QWORD *)v3[2];
      v7 = (IKString **)(a2[2] + 8);
      do
      {
        v8 = FIK::defaultAllocator(v4);
        *v6 = 0;
        v6[1] = 0;
        v6[2] = v8;
        if (*v7)
          v9 = (char *)*(v7 - 1);
        else
          v9 = (char *)&unk_2108059BE;
        IKString::assign(v6, v9, *v7);
        v7 += 3;
        v6 += 3;
        --v5;
      }
      while (v5);
    }
  }
  *v3 = *a2;
  return v3;
}

float *FIK::HipMultiplierParams::SetMaxHipMultiplier(float *this, float a2)
{
  *this = a2;
  return this;
}

FIK::PoseConverter *FIK::PoseConverter::PoseConverter(FIK::PoseConverter *this, const FIK::Hierarchy *a2)
{
  void (***v4)(FIK::CrtAllocator *__hidden);
  void (***v5)(FIK::CrtAllocator *__hidden);
  void (***v6)(FIK::CrtAllocator *__hidden);
  void (***v7)(FIK::CrtAllocator *__hidden);
  void (***v8)(FIK::CrtAllocator *__hidden);
  unint64_t v9;
  uint64_t i;
  _OWORD *v11;
  _OWORD *v12;
  int v13;
  char v14;
  int v15;
  uint64_t v16;

  v4 = FIK::defaultAllocator(this);
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = v4;
  v5 = FIK::defaultAllocator((FIK *)v4);
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = v5;
  v6 = FIK::defaultAllocator((FIK *)v5);
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = v6;
  v7 = FIK::defaultAllocator((FIK *)v6);
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = v7;
  v8 = FIK::defaultAllocator((FIK *)v7);
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = v8;
  v9 = *(_QWORD *)a2;
  FIK::IKArray<FIK::Transform>::reserve((uint64_t *)this + 12, *(_QWORD *)a2);
  FIK::IKArray<unsigned int>::reserve(this, v9);
  if (v9)
  {
    for (i = 0; i != v9; ++i)
    {
      v11 = (_OWORD *)FIK::Hierarchy::localSpaceRestPose(a2, i);
      FIK::IKArray<FIK::Transform>::reserve((uint64_t *)this + 12, *((_QWORD *)this + 12) + 1);
      v12 = (_OWORD *)(*((_QWORD *)this + 14) + 32 * *((_QWORD *)this + 12));
      *v12 = *v11;
      v12[1] = v11[1];
      ++*((_QWORD *)this + 12);
      v13 = FIK::Hierarchy::parentIndexOf(a2, i);
      if (v14)
      {
        v15 = v13;
        FIK::IKArray<unsigned int>::reserve(this, *(_QWORD *)this + 1);
        v16 = *(_QWORD *)this;
        *(_DWORD *)(*((_QWORD *)this + 2) + 4 * *(_QWORD *)this) = v15;
      }
      else
      {
        FIK::IKArray<unsigned int>::reserve(this, *(_QWORD *)this + 1);
        v16 = *(_QWORD *)this;
        *(_DWORD *)(*((_QWORD *)this + 2) + 4 * *(_QWORD *)this) = -1;
      }
      *(_QWORD *)this = v16 + 1;
    }
  }
  FIK::PoseConverter::resetGlobalFlag(this);
  return this;
}

size_t *FIK::PoseConverter::resetGlobalFlag(FIK::PoseConverter *this)
{
  unint64_t v2;
  size_t *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  FIK::IKArray<FIK::Transform>::operator=((uint64_t *)this + 8, (uint64_t *)this + 12);
  v2 = *((_QWORD *)this + 8);
  v7 = 0;
  result = FIK::IKArray<BOOL>::resize((size_t *)this + 16, v2, &v7);
  v4 = *((_QWORD *)this + 8);
  if (v4)
  {
    v5 = 0;
    v6 = *((_QWORD *)this + 2);
    do
    {
      if (*(_DWORD *)(v6 + 4 * v5) == -1)
        *(_BYTE *)(*((_QWORD *)this + 18) + v5) = 1;
      ++v5;
    }
    while (v4 != v5);
  }
  return result;
}

_QWORD *FIK::PoseConverter::updatePose(FIK::PoseConverter *this, uint64_t a2, const FIK::Transform *a3)
{
  _OWORD *v5;
  __int128 v6;
  _OWORD *v7;
  FIK *v8;
  _QWORD *result;
  BOOL v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD v20[2];
  uint64_t v21;
  void (***v22)(FIK::CrtAllocator *__hidden);

  v5 = (_OWORD *)(*((_QWORD *)this + 10) + 32 * a2);
  v6 = *(_OWORD *)a3;
  *v5 = *(_OWORD *)a3;
  v5[1] = *((_OWORD *)a3 + 1);
  v7 = (_OWORD *)(*((_QWORD *)this + 14) + 32 * a2);
  *v7 = v6;
  v7[1] = v5[1];
  FIK::PoseConverter::evaluateChildIndices(this);
  v20[0] = 0;
  v20[1] = 0;
  v21 = 0;
  v22 = FIK::defaultAllocator(v8);
  FIK::IKArray<FIK::Segment *>::reserve(v20, *((_QWORD *)this + 12));
  result = FIK::IKArray<FIK::Segment *>::reserve(v20, v20[0] + 1);
  *(_QWORD *)(v21 + 8 * v20[0]) = a2;
  v10 = __CFADD__(v20[0], 1);
  v11 = ++v20[0];
  if (!v10)
  {
    v12 = 0;
    do
    {
      v13 = *(_QWORD *)(v21 + 8 * v12);
      v14 = *((_QWORD *)this + 18);
      if (*(_BYTE *)(v14 + v13))
      {
        *(_BYTE *)(v14 + v13) = *(_DWORD *)(*((_QWORD *)this + 2) + 4 * v13) == -1;
        v15 = (_OWORD *)(*((_QWORD *)this + 14) + 32 * v13);
        v16 = (_OWORD *)(*((_QWORD *)this + 10) + 32 * v13);
        *v16 = *v15;
        v16[1] = v15[1];
        v17 = (unint64_t *)(*((_QWORD *)this + 6) + 32 * v13);
        v11 = v20[0];
        if (*v17)
        {
          v18 = 0;
          do
          {
            v19 = v17[2];
            result = FIK::IKArray<FIK::Segment *>::reserve(v20, v11 + 1);
            *(_QWORD *)(v21 + 8 * v20[0]) = *(_QWORD *)(v19 + 8 * v18);
            v11 = ++v20[0];
            ++v18;
          }
          while (v18 < *v17);
        }
      }
      ++v12;
    }
    while (v12 < v11);
  }
  v20[0] = 0;
  if (v21)
    return (_QWORD *)((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v22)[3])(v22, v21, 0, 8);
  return result;
}

void FIK::PoseConverter::evaluateChildIndices(FIK::PoseConverter *this)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t i;
  unint64_t v6;
  _QWORD *v7;

  v3 = *((_QWORD *)this + 4);
  v2 = (uint64_t *)((char *)this + 32);
  if (!v3)
  {
    FIK::IKArray<FIK::IKArray<unsigned long>>::resize(v2, *((_QWORD *)this + 8));
    v4 = *((_QWORD *)this + 12);
    if (v4)
    {
      for (i = 0; i != v4; ++i)
      {
        v6 = *(unsigned int *)(*((_QWORD *)this + 2) + 4 * i);
        if ((v6 & 0x80000000) == 0 && v4 > v6)
        {
          v7 = (_QWORD *)(*((_QWORD *)this + 6) + 32 * v6);
          FIK::IKArray<FIK::Segment *>::reserve(v7, *v7 + 1);
          *(_QWORD *)(v7[2] + 8 * (*v7)++) = i;
        }
      }
    }
  }
}

_QWORD *FIK::PoseConverter::CalculateGlobalTransform(_QWORD *this, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  float32x4_t *v6;
  uint64_t v7;
  float32x4_t v8;
  int32x4_t v9;
  int8x16_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  int32x4_t v17;
  float32x4_t v18;
  int32x4_t v19;
  float32x4_t v20;
  float32x4_t *v21;

  v3 = this;
  v4 = *(int *)(this[2] + 4 * a2);
  if (this[16] > v4 && !*(_BYTE *)(this[18] + v4))
  {
    this = (_QWORD *)FIK::PoseConverter::CalculateGlobalTransform((FIK::PoseConverter *)this, *(int *)(this[2] + 4 * a2));
    if ((v4 & 0x80000000) != 0)
      goto LABEL_5;
    goto LABEL_4;
  }
  if ((v4 & 0x80000000) == 0)
  {
LABEL_4:
    v5 = v3[10];
    v6 = (float32x4_t *)(v5 + 32 * v4);
    v7 = v3[14] + 32 * a2;
    v8 = *(float32x4_t *)(v7 + 16);
    v9 = (int32x4_t)vnegq_f32(v8);
    v10 = (int8x16_t)vtrn2q_s32((int32x4_t)v8, vtrn1q_s32((int32x4_t)v8, v9));
    v11 = v6[1];
    v12 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v8, (int8x16_t)v9, 8uLL), *(float32x2_t *)v11.f32, 1), (float32x4_t)vextq_s8(v10, v10, 8uLL), v11.f32[0]);
    v13 = (float32x4_t)vrev64q_s32((int32x4_t)v8);
    v13.i32[0] = v9.i32[1];
    v13.i32[3] = v9.i32[2];
    v14 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v8, v11, 3), v13, v11, 2), v12);
    v15 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v11, (int32x4_t)v11), (int8x16_t)v11, 0xCuLL);
    v16 = vnegq_f32(v11);
    v17 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)v7, *(int32x4_t *)v7), *(int8x16_t *)v7, 0xCuLL), v16), *(float32x4_t *)v7, v15);
    v18 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v17, v17), (int8x16_t)v17, 0xCuLL);
    v19 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v18, (int32x4_t)v18), (int8x16_t)v18, 0xCuLL), v16), v18, v15);
    v20 = vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v19, v19), (int8x16_t)v19, 0xCuLL), v18, v11, 3);
    v18.i64[0] = 0x4000000040000000;
    v18.i64[1] = 0x4000000040000000;
    v21 = (float32x4_t *)(v5 + 32 * a2);
    *v21 = vaddq_f32(*v6, vmlaq_f32(*(float32x4_t *)v7, v18, v20));
    v21[1] = v14;
  }
LABEL_5:
  *(_BYTE *)(v3[18] + a2) = 1;
  return this;
}

unint64_t FIK::PoseConverter::GetGlobalTransform(FIK::PoseConverter *this, unint64_t a2)
{
  uint64_t *v5;

  if (*((_QWORD *)this + 8) <= a2)
  {
    v5 = ikinemaLogObject();
    ikinemaAssertHandler(*v5, 0, (uint64_t)"GetGlobalTransform", "(Index < Pose.size()) Index must be valid");
  }
  if (!*(_BYTE *)(*((_QWORD *)this + 18) + a2))
    FIK::PoseConverter::CalculateGlobalTransform(this, a2);
  return *((_QWORD *)this + 10) + 32 * a2;
}

_QWORD *FIK::PoseConverter::getGlobalTransforms@<X0>(FIK::PoseConverter *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t i;

  v3 = (_QWORD *)((char *)this + 64);
  v4 = *((_QWORD *)this + 8);
  if (v4)
  {
    for (i = 0; i != v4; ++i)
    {
      if (!*(_BYTE *)(*((_QWORD *)this + 18) + i))
        FIK::PoseConverter::CalculateGlobalTransform(this, i);
    }
  }
  return FIK::IKArray<FIK::Transform>::IKArray(a2, v3);
}

uint64_t *FIK::IKArray<FIK::Transform>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;

  if (*a2 >= (unint64_t)a1[1])
  {
    v7 = a2[1];
    v8 = a1[3];
    if (v7)
    {
      v9 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(a1[3], 32 * v7, 16);
      v10 = v9;
      if (32 * v7)
        bzero(v9, 32 * v7);
    }
    else
    {
      v10 = 0;
    }
    v11 = *a2;
    if (*a2)
    {
      v12 = (_OWORD *)a2[2];
      v13 = v10;
      do
      {
        *v13 = *v12;
        v13[1] = v12[1];
        v13 += 2;
        v12 += 2;
        --v11;
      }
      while (v11);
    }
    v15 = a1[2];
    v14 = a1[3];
    a1[1] = v7;
    a1[2] = (uint64_t)v10;
    a1[3] = v8;
    if (v15)
      (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v14 + 24))(v14, v15, 0, 8);
  }
  else
  {
    *a1 = 0;
    v4 = *a2;
    if (*a2)
    {
      v5 = (_OWORD *)a1[2];
      v6 = (_OWORD *)a2[2];
      do
      {
        *v5 = *v6;
        v5[1] = v6[1];
        v5 += 2;
        v6 += 2;
        --v4;
      }
      while (v4);
    }
  }
  *a1 = *a2;
  return a1;
}

void FIK::IKArray<FIK::IKArray<unsigned long>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD v3[2];
  uint64_t v4;
  uint64_t v5;

  v2 = a1[3];
  v3[0] = 0;
  v3[1] = 0;
  v4 = 0;
  v5 = v2;
  FIK::IKArray<FIK::IKArray<unsigned long>>::resize(a1, a2, v3);
  v3[0] = 0;
  if (v4)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v5 + 24))(v5, v4, 0, 8);
}

void FIK::IKArray<FIK::IKArray<unsigned long>>::resize(uint64_t *a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;

  if (*a1 <= a2)
  {
    FIK::IKArray<FIK::IKArray<unsigned long>>::reserve(a1, a2);
    v10 = *a1;
    if (a2 != *a1)
    {
      v11 = (_QWORD *)(a1[2] + 32 * v10);
      v12 = v10 - a2;
      do
      {
        v11 = FIK::IKArray<FIK::Task *>::IKArray(v11, a3) + 4;
        v8 = __CFADD__(v12++, 1);
      }
      while (!v8);
    }
  }
  else
  {
    v5 = a1[2] + 32 * a2;
    v6 = a2 - *a1;
    do
    {
      *(_QWORD *)v5 = 0;
      v7 = *(_QWORD *)(v5 + 16);
      if (v7)
        (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)(v5 + 24) + 24))(*(_QWORD *)(v5 + 24), v7, 0, 8);
      v5 += 32;
      v8 = __CFADD__(v6++, 1);
    }
    while (!v8);
  }
  *a1 = a2;
}

void FIK::IKArray<FIK::IKArray<unsigned long>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;

  if (a1[1] < a2)
  {
    v3 = a1[3];
    v4 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v4)
    {
      v5 = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v3 + 16))(a1[3], 32 * v4, 8);
      v6 = v5;
      if (32 * v4)
        bzero(v5, 32 * v4);
    }
    else
    {
      v6 = 0;
    }
    v7 = (uint64_t *)a1[2];
    v8 = *a1;
    if (*a1)
    {
      v9 = v6;
      do
      {
        v10 = *v7;
        *v7 = 0;
        *v9 = v10;
        v11 = v7[1];
        v12 = *((_OWORD *)v7 + 1);
        v7[1] = 0;
        v9[1] = v11;
        v7[2] = 0;
        *((_OWORD *)v9 + 1) = v12;
        v7 += 4;
        v9 += 4;
        --v8;
      }
      while (v8);
      v7 = (uint64_t *)a1[2];
      v13 = *a1;
    }
    else
    {
      v13 = 0;
    }
    v14 = a1[3];
    a1[1] = v4;
    a1[2] = (uint64_t)v6;
    a1[3] = v3;
    if (v13)
    {
      v15 = v7;
      do
      {
        *v15 = 0;
        v16 = v15[2];
        if (v16)
          (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v15[3] + 24))(v15[3], v16, 0, 8);
        v15 += 4;
        --v13;
      }
      while (v13);
    }
    if (v7)
      (*(void (**)(uint64_t, uint64_t *, _QWORD, uint64_t))(*(_QWORD *)v14 + 24))(v14, v7, 0, 8);
  }
}

FIK *FIK::MoCapRigBuilder::createMoCapRig@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, float32x4_t *a3@<X2>, float32x4_t *a4@<X3>, int *a5@<X4>, uint64_t a6@<X5>, int *a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, int *a10, uint64_t a11)
{
  int *v13;
  uint64_t v18;
  FIK *result;
  FIK::Allocator *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  _QWORD *v24;
  IKString *v25;
  char *v26;
  FIK *v27;
  int v28;
  unsigned __int8 v29;
  uint64_t v30;
  const IKString *v31;
  IKString *v32;
  char *v33;
  void (***v34)(FIK::CrtAllocator *__hidden);
  int v35;
  int *v36;
  uint64_t *v37;
  uint64_t *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  BOOL v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t *v46;
  int v47;
  BOOL v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  IKString *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  IKString *v56;
  char *v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _DWORD *v65;
  IKString *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  BOOL v72;
  uint64_t *v73;
  uint64_t v74;
  int *v75;
  uint64_t *v76;
  int v77;
  BOOL v78;
  uint64_t *v79;
  float32x4_t *GlobalTransform;
  int32x4_t *v81;
  int32x4_t v82;
  int32x4_t v83;
  float32x4_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  BOOL v89;
  uint64_t *v90;
  uint64_t v91;
  int *v92;
  int v93;
  BOOL v94;
  uint64_t *v95;
  float32x4_t *v96;
  float32x4_t *v97;
  uint64_t v98;
  _OWORD *v99;
  float32x4_t *v100;
  float32x4_t *v101;
  double v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  __int128 v111;
  unint64_t v112;
  unint64_t v113;
  _OWORD *v114;
  __int128 v115;
  _OWORD *v116;
  __int128 v117;
  float32x4_t v118;
  float32x4_t *v119;
  uint64_t v120;
  float32x4_t *v121;
  float32x4_t *v122;
  int *v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  FIK::MoCapTaskFactory *v131;
  uint64_t v132;
  uint64_t v133;
  FIK::MoCapTaskFactory *v134;
  __int128 v135;
  __int128 v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  float32x4_t v141[2];
  _OWORD v142[2];
  _OWORD v143[2];
  float32x4_t v144;
  __int128 v145;
  float32x4_t v146;
  float32x4_t v147[2];
  char *v148;
  IKString *v149;
  void (***v150)(FIK::CrtAllocator *__hidden);
  uint64_t v151;
  uint64_t v152;
  FIK::MoCapTaskFactory *v153;
  int v154;
  __int128 v155;
  char v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  __int16 v161;
  char v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  __int16 v166;
  int v167;
  int v168;
  __int16 v169;
  char v170;
  __int128 v171;
  uint64_t v172;
  int v173;
  _BYTE v174[28];
  FIK::MoCapTaskFactory *v175;
  uint64_t v176[2];
  uint64_t v177;
  FIK::MoCapTaskFactory *v178;
  uint64_t v179[2];
  uint64_t v180;
  FIK::MoCapTaskFactory *v181;
  float32x4_t v182;
  __int128 v183;
  char v184;
  float v185;
  uint64_t v186;

  v13 = a5;
  v186 = *MEMORY[0x24BDAC8D0];
  v18 = a1 + 32;
  result = (FIK *)FIK::RigBuilderUtils::hasAllExpectedJoints(a1 + 32, a5, a6);
  if ((_DWORD)result
    && *(_BYTE *)(a1 + 36)
    && (result = (FIK *)FIK::RigBuilderUtils::hasAllExpectedJoints((uint64_t)(a2 + 4), v13, a6), (_DWORD)result)
    && *((_BYTE *)a2 + 36))
  {
    v120 = (uint64_t)(a2 + 4);
    v121 = a3;
    v122 = a4;
    v123 = a7;
    v124 = a9;
    v125 = a8;
    v152 = 0;
    v151 = 0;
    v153 = (FIK::MoCapTaskFactory *)FIK::defaultAllocator(result);
    v154 = 1065353216;
    v155 = xmmword_210804140;
    v156 = 1;
    v160 = 0x3F80000040800000;
    v161 = 1;
    v162 = 0;
    v164 = 0;
    v163 = 0;
    v165 = 0x3F80000000000000;
    v166 = 0;
    v167 = 1117782016;
    v168 = 1;
    v169 = 257;
    v170 = 1;
    v171 = xmmword_2108040D0;
    v172 = 0x4000000040000000;
    memset(v174, 0, sizeof(v174));
    v173 = 0x40000000;
    v175 = v153;
    v176[0] = 0;
    v177 = 0;
    v176[1] = 0;
    v178 = v153;
    v179[0] = 0;
    v180 = 0;
    v179[1] = 0;
    v181 = v153;
    v182 = 0uLL;
    v183 = xmmword_210802BA0;
    v184 = 0;
    v185 = 1.0;
    v157 = 1;
    v158 = 0x3727C5AC3D4CCCCDLL;
    v159 = 0x3C3F800000;
    FIK::RigBuilderUtils::addTargetsToRig<FIK::MoCapRig>((unint64_t *)a1, (uint64_t)&v151);
    v21 = *a2;
    if (*a2)
    {
      v22 = 0;
      while (1)
      {
        v128 = -1;
        v129 = 0;
        v130 = 0;
        v132 = 0;
        v133 = 0;
        v131 = v181;
        v134 = v181;
        v135 = 0uLL;
        v136 = xmmword_210802BA0;
        v23 = (__int128 *)FIK::Hierarchy::localSpaceRestPose((FIK::Hierarchy *)a2, v22);
        v135 = *v23;
        v136 = v23[1];
        v24 = (_QWORD *)FIK::Hierarchy::nameOf((FIK::Hierarchy *)a2, v22);
        v25 = (IKString *)v24[1];
        v26 = v25 ? (char *)*v24 : (char *)&unk_2108059BE;
        IKString::assign(&v129, v26, v25);
        v27 = (FIK *)FIK::Hierarchy::parentIndexOf((FIK::Hierarchy *)a2, v22);
        v28 = (int)v27;
        v30 = v29;
        if (!v29)
          break;
        v31 = (const IKString *)FIK::Hierarchy::nameOf((FIK::Hierarchy *)a2, (uint64_t)v27);
        IKString::IKString((IKString *)&v148, v31);
        v32 = v149;
        if (!v149)
          goto LABEL_14;
        v33 = v148;
LABEL_15:
        IKString::assign(&v132, v33, v32);
        if (v149)
          ((void (*)(void (***)(FIK::CrtAllocator *__hidden), char *, _QWORD, uint64_t))(*v150)[3])(v150, v148, 0, 8);
        if (v30)
          v35 = v28;
        else
          v35 = -1;
        HIDWORD(v128) = v35;
        FIK::IKArray<FIK::RigBoneBase>::push_back<FIK::RigBoneBase&,void>(v179, (uint64_t)&v128);
        if (v133)
        {
          (*(void (**)(FIK::MoCapTaskFactory *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v134 + 24))(v134, v132, 0, 8);
          v132 = 0;
          v133 = 0;
        }
        if (v130)
          (*(void (**)(FIK::MoCapTaskFactory *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v131 + 24))(v131, v129, 0, 8);
        if (v21 == ++v22)
          goto LABEL_25;
      }
      v34 = FIK::defaultAllocator(v27);
      v32 = 0;
      v149 = 0;
      v148 = 0;
      v150 = v34;
LABEL_14:
      v33 = (char *)&unk_2108059BE;
      goto LABEL_15;
    }
LABEL_25:
    if (a6)
    {
      v36 = &v13[a6];
      v37 = (uint64_t *)(a1 + 56);
      v38 = a2 + 7;
      do
      {
        v39 = *v13;
        v40 = *v37;
        if (!*v37)
          goto LABEL_37;
        v41 = a1 + 56;
        do
        {
          v42 = *(_DWORD *)(v40 + 32);
          v43 = v42 < v39;
          if (v42 >= v39)
            v44 = (uint64_t *)v40;
          else
            v44 = (uint64_t *)(v40 + 8);
          if (!v43)
            v41 = v40;
          v40 = *v44;
        }
        while (*v44);
        if ((uint64_t *)v41 == v37 || v39 < *(_DWORD *)(v41 + 32))
LABEL_37:
          v41 = a1 + 56;
        v45 = *v38;
        if (!*v38)
          goto LABEL_48;
        v46 = a2 + 7;
        do
        {
          v47 = *(_DWORD *)(v45 + 32);
          v48 = v47 < v39;
          if (v47 >= v39)
            v49 = (uint64_t *)v45;
          else
            v49 = (uint64_t *)(v45 + 8);
          if (!v48)
            v46 = (uint64_t *)v45;
          v45 = *v49;
        }
        while (*v49);
        if (v46 == v38 || v39 < *((_DWORD *)v46 + 8))
LABEL_48:
          v46 = a2 + 7;
        if (v39 > 18)
        {
          switch(v39)
          {
            case 19:
            case 26:
              FIK::MoCapTaskFactory::kneeTask(v153, v20, (FIK::RigTask *)&v128);
              goto LABEL_59;
            case 21:
            case 28:
              goto LABEL_56;
            default:
              goto LABEL_148;
          }
        }
        if (v39)
        {
          if (v39 == 2)
          {
            FIK::MoCapTaskFactory::chestTask(v153, v20, (FIK::RigTask *)&v128);
          }
          else
          {
            if (v39 != 4)
LABEL_148:
              FIK::MoCapRigBuilder::createMoCapRig();
            FIK::MoCapTaskFactory::headTask(v153, v20, (FIK::RigTask *)&v128);
          }
        }
        else
        {
LABEL_56:
          FIK::MoCapTaskFactory::hipsTask(v153, v20, (FIK::RigTask *)&v128);
        }
LABEL_59:
        v50 = *(_QWORD *)(v41 + 40);
        v51 = FIK::Hierarchy::nameOf((FIK::Hierarchy *)a1, v50);
        v52 = *(IKString **)(v51 + 8);
        if (v52)
          v53 = *(char **)v51;
        else
          v53 = (char *)&unk_2108059BE;
        IKString::assign(&v131, v53, v52);
        IKString::operator+((IKString *)&v131, "_Task", (FIK::Allocator *)5, (uint64_t *)&v148);
        IKString::operator=(&v128, (uint64_t)&v148);
        if (v149)
          ((void (*)(void (***)(FIK::CrtAllocator *__hidden), char *, _QWORD, uint64_t))(*v150)[3])(v150, v148, 0, 8);
        LODWORD(v134) = v50;
        v54 = v46[5];
        v55 = FIK::Hierarchy::nameOf((FIK::Hierarchy *)a2, v54);
        v56 = *(IKString **)(v55 + 8);
        if (v56)
          v57 = *(char **)v55;
        else
          v57 = (char *)&unk_2108059BE;
        IKString::assign(&v137, v57, v56);
        v140 = v54;
        FIK::IKArray<FIK::MoCapTask>::push_back<FIK::MoCapTask&,void>((uint64_t)&v174[4], (uint64_t)&v128);
        if (v138)
        {
          (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v139 + 24))(v139, v137, 0, 8);
          v137 = 0;
          v138 = 0;
        }
        if (v132)
        {
          (*(void (**)(uint64_t, FIK::MoCapTaskFactory *, _QWORD, uint64_t))(*(_QWORD *)v133 + 24))(v133, v131, 0, 8);
          v131 = 0;
          v132 = 0;
        }
        if (v129)
          (*(void (**)(uint64_t *, uint64_t, _QWORD, uint64_t))(*v130 + 24))(v130, v128, 0, 8);
        ++v13;
      }
      while (v13 != v36);
    }
    v58 = v128;
    if (v128)
    {
      v59 = v130;
      v60 = 280;
      do
      {
        v62 = *v59++;
        v61 = v62;
        if (v62 != -1)
        {
          v63 = v177;
          v64 = FIK::Hierarchy::nameOf((FIK::Hierarchy *)a2, v61);
          v65 = (_DWORD *)(v63 + v60);
          v66 = *(IKString **)(v64 + 8);
          if (v66)
            v67 = *(char **)v64;
          else
            v67 = (char *)&unk_2108059BE;
          IKString::assign((_QWORD *)v65 - 3, v67, v66);
          *v65 = v61;
        }
        v60 += 544;
        --v58;
      }
      while (v58);
    }
    v128 = 0;
    if (v130)
      (*(void (**)(FIK::MoCapTaskFactory *, uint64_t *, _QWORD, uint64_t))(*(_QWORD *)v131 + 24))(v131, v130, 0, 8);
    v69 = a1 + 56;
    v68 = *(_QWORD *)(a1 + 56);
    if (!v68)
      goto LABEL_94;
    v70 = a1 + 56;
    do
    {
      v71 = *(_DWORD *)(v68 + 32);
      v72 = v71 < 0;
      if (v71 >= 0)
        v73 = (uint64_t *)v68;
      else
        v73 = (uint64_t *)(v68 + 8);
      if (!v72)
        v70 = v68;
      v68 = *v73;
    }
    while (*v73);
    if (v70 == v69 || *(int *)(v70 + 32) >= 1)
LABEL_94:
      v70 = a1 + 56;
    v75 = (int *)(a2 + 7);
    v74 = a2[7];
    if (!v74)
      goto LABEL_105;
    v76 = a2 + 7;
    do
    {
      v77 = *(_DWORD *)(v74 + 32);
      v78 = v77 < 0;
      if (v77 >= 0)
        v79 = (uint64_t *)v74;
      else
        v79 = (uint64_t *)(v74 + 8);
      if (!v78)
        v76 = (uint64_t *)v74;
      v74 = *v79;
    }
    while (*v79);
    if (v76 == (uint64_t *)v75 || *((int *)v76 + 8) >= 1)
LABEL_105:
      v76 = a2 + 7;
    FIK::PoseConverter::PoseConverter((FIK::PoseConverter *)&v128, (const FIK::Hierarchy *)a1);
    FIK::PoseConverter::PoseConverter((FIK::PoseConverter *)&v148, (const FIK::Hierarchy *)a2);
    GlobalTransform = (float32x4_t *)FIK::PoseConverter::GetGlobalTransform((FIK::PoseConverter *)&v128, *(_QWORD *)(v70 + 40));
    v81 = (int32x4_t *)FIK::PoseConverter::GetGlobalTransform((FIK::PoseConverter *)&v148, v76[5]);
    FIK::AutoMatch::calculateSourceTransform(v18, v120, GlobalTransform, v81, v121, v122, v147, v82, v83);
    v84 = v147[1];
    v146 = v147[0];
    v85 = *(_DWORD *)(a1 + 44);
    if (v85 > 2)
      v85 -= 3;
    v146.i32[v85] = 0;
    v147[0] = v146;
    v182 = v146;
    v183 = (__int128)v84;
    v86 = *(_QWORD *)(a1 + 56);
    if (!v86)
      goto LABEL_118;
    v87 = a1 + 56;
    do
    {
      v88 = *(_DWORD *)(v86 + 32);
      v89 = v88 < 21;
      if (v88 >= 21)
        v90 = (uint64_t *)v86;
      else
        v90 = (uint64_t *)(v86 + 8);
      if (!v89)
        v87 = v86;
      v86 = *v90;
    }
    while (*v90);
    if (v87 == v69 || *(int *)(v87 + 32) >= 22)
LABEL_118:
      v87 = a1 + 56;
    v91 = *(_QWORD *)v75;
    if (!*(_QWORD *)v75)
      goto LABEL_129;
    v92 = v75;
    do
    {
      v93 = *(_DWORD *)(v91 + 32);
      v94 = v93 < 21;
      if (v93 >= 21)
        v95 = (uint64_t *)v91;
      else
        v95 = (uint64_t *)(v91 + 8);
      if (!v94)
        v92 = (int *)v91;
      v91 = *v95;
    }
    while (*v95);
    if (v92 == v75 || v92[8] >= 22)
LABEL_129:
      v92 = v75;
    v96 = (float32x4_t *)FIK::PoseConverter::GetGlobalTransform((FIK::PoseConverter *)&v128, *(_QWORD *)(v87 + 40));
    v97 = (float32x4_t *)FIK::PoseConverter::GetGlobalTransform((FIK::PoseConverter *)&v148, *((_QWORD *)v92 + 5));
    v185 = FIK::AutoMatch::calculateSourceScale(GlobalTransform, v96, (float32x4_t *)v81, v97);
    if (*(_QWORD *)&v174[4])
    {
      v98 = *(_QWORD *)&v174[4] << 8;
      v99 = (_OWORD *)(*(_QWORD *)&v174[20] + 224);
      do
      {
        v100 = (float32x4_t *)FIK::PoseConverter::GetGlobalTransform((FIK::PoseConverter *)&v128, *((int *)v99 - 44));
        v101 = (float32x4_t *)FIK::PoseConverter::GetGlobalTransform((FIK::PoseConverter *)&v148, *((int *)v99 - 6));
        *(float *)&v102 = v185;
        FIK::AutoMatch::calculateTaskOffset(v100, v101, &v182, &v144, v102);
        *(v99 - 1) = v144;
        *v99 = v145;
        v99 += 16;
        v98 -= 256;
      }
      while (v98);
    }
    v103 = v176[0];
    if (v176[0])
    {
      v104 = 0;
      v105 = 336;
      do
      {
        v106 = v177;
        v107 = v177 + v105;
        v108 = *(int *)(v177 + v105 - 56);
        if ((_DWORD)v108 != -1)
        {
          v109 = FIK::PoseConverter::GetGlobalTransform((FIK::PoseConverter *)&v128, v104);
          v110 = FIK::PoseConverter::GetGlobalTransform((FIK::PoseConverter *)&v148, v108);
          FIK::AutoMatch::calculateSourceOffset(v109, v110, (uint64_t)&v182, &v144);
          v111 = v145;
          *(_OWORD *)(v107 - 48) = 0u;
          *(_OWORD *)(v107 - 32) = v111;
          v112 = *(int *)(v180 + 96 * (int)v108 + 4);
          v113 = *(int *)(v107 - 332);
          if ((_DWORD)v113 == -1)
          {
            v143[0] = 0uLL;
            v115 = xmmword_210802BA0;
          }
          else
          {
            v114 = (_OWORD *)FIK::PoseConverter::GetGlobalTransform((FIK::PoseConverter *)&v128, v113);
            v115 = v114[1];
            v143[0] = *v114;
          }
          v143[1] = v115;
          if ((_DWORD)v112 == -1)
          {
            v142[0] = 0uLL;
            v117 = xmmword_210802BA0;
          }
          else
          {
            v116 = (_OWORD *)FIK::PoseConverter::GetGlobalTransform((FIK::PoseConverter *)&v148, v112);
            v117 = v116[1];
            v142[0] = *v116;
          }
          v142[1] = v117;
          FIK::AutoMatch::calculateSourceParentOffset((uint64_t)v143, (uint64_t)v142, (uint64_t)&v182, v141);
          v118 = v141[1];
          v119 = (float32x4_t *)(v106 + v105);
          v119[-1] = 0u;
          *v119 = v118;
          v103 = v176[0];
        }
        ++v104;
        v105 += 544;
      }
      while (v104 < v103);
    }
    FIK::PoseConverter::~PoseConverter((FIK::PoseConverter *)&v148);
    FIK::PoseConverter::~PoseConverter((FIK::PoseConverter *)&v128);
    FIK::RigBuilderUtils::cullJointsFromRig<FIK::MoCapRig,FIK::MoCapBone>((FIK::Hierarchy *)a1, v123, v125, a10, a11, &v151);
    std::__optional_destruct_base<FIK::MoCapRig,false>::__optional_destruct_base[abi:nn180100]<FIK::MoCapRig>(v124, (uint64_t)&v151);
    FIK::IKArray<FIK::RigBoneBase>::~IKArray(v179);
    FIK::IKArray<FIK::MoCapBone>::~IKArray(v176);
    result = (FIK *)FIK::IKArray<FIK::MoCapTask>::~IKArray((uint64_t *)&v174[4]);
    if (v152)
      return (FIK *)(*(uint64_t (**)(FIK::MoCapTaskFactory *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v153 + 24))(v153, v151, 0, 8);
  }
  else
  {
    *(_BYTE *)a9 = 0;
    *((_BYTE *)a9 + 320) = 0;
  }
  return result;
}

FIK::Hierarchy *`anonymous namespace'::disableUnmatchedJointsInGroupAndDescendents(FIK::Hierarchy *this, int a2, uint64_t a3)
{
  uint64_t v3;
  FIK::Hierarchy *v5;
  _QWORD *v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v3 = *((_QWORD *)this + 10);
  if (v3)
  {
    v5 = this;
    v6 = (_QWORD *)((char *)this + 80);
    do
    {
      v7 = *(_DWORD *)(v3 + 32);
      v8 = v7 < a2;
      if (v7 >= a2)
        v9 = (uint64_t *)v3;
      else
        v9 = (uint64_t *)(v3 + 8);
      if (!v8)
        v6 = (_QWORD *)v3;
      v3 = *v9;
    }
    while (*v9);
    if (v6 != (_QWORD *)((char *)this + 80) && *((_DWORD *)v6 + 8) <= a2)
    {
      v10 = v6[5];
      if (v10)
      {
        v11 = (uint64_t *)v6[7];
        v12 = &v11[v10];
        do
        {
          v13 = *v11;
          v14 = *(_QWORD *)(a3 + 224);
          if (*(_DWORD *)(v14 + 544 * *v11 + 280) == -1)
            *(_BYTE *)(v14 + 544 * v13 + 96) = 0;
          this = (FIK::Hierarchy *)FIK::Hierarchy::descendentIndicesOf(v5, v13, &v19);
          v15 = v20;
          if (v19)
          {
            v16 = *(_QWORD *)(a3 + 224);
            v17 = 8 * v19;
            v18 = v20;
            do
            {
              if (*(_DWORD *)(v16 + 544 * *v18 + 280) == -1)
                *(_BYTE *)(v16 + 544 * *v18 + 96) = 0;
              ++v18;
              v17 -= 8;
            }
            while (v17);
          }
          v19 = 0;
          if (v15)
            this = (FIK::Hierarchy *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v21 + 24))(v21, v15, 0, 8);
          ++v11;
        }
        while (v11 != v12);
      }
    }
  }
  return this;
}

__n128 std::__optional_destruct_base<FIK::MoCapRig,false>::__optional_destruct_base[abi:nn180100]<FIK::MoCapRig>(uint64_t *a1, uint64_t a2)
{
  uint64_t *v3;
  __int128 v4;
  __int128 v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __n128 result;

  v3 = IKString::IKString(a1, (uint64_t *)a2, *(_QWORD *)(a2 + 16));
  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)((char *)v3 + 36) = *(_OWORD *)(a2 + 36);
  *(_OWORD *)(v3 + 3) = v4;
  v5 = *(_OWORD *)(a2 + 80);
  *((_OWORD *)v3 + 4) = *(_OWORD *)(a2 + 64);
  *((_OWORD *)v3 + 5) = v5;
  *((_OWORD *)v3 + 6) = *(_OWORD *)(a2 + 96);
  v6 = *(_DWORD *)(a2 + 120);
  v3[14] = *(_QWORD *)(a2 + 112);
  *((_DWORD *)v3 + 30) = v6;
  v7 = *(_DWORD *)(a2 + 128);
  *(_DWORD *)((char *)v3 + 131) = *(_DWORD *)(a2 + 131);
  *((_DWORD *)v3 + 32) = v7;
  *((_OWORD *)v3 + 9) = *(_OWORD *)(a2 + 144);
  *((_OWORD *)v3 + 10) = *(_OWORD *)(a2 + 160);
  v8 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a2 + 176) = 0;
  v3[22] = v8;
  v9 = *(_QWORD *)(a2 + 184);
  v10 = *(_OWORD *)(a2 + 192);
  *(_QWORD *)(a2 + 184) = 0;
  v3[23] = v9;
  *(_QWORD *)(a2 + 192) = 0;
  *((_OWORD *)v3 + 12) = v10;
  v11 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a2 + 208) = 0;
  v3[26] = v11;
  v12 = *(_QWORD *)(a2 + 216);
  v13 = *(_OWORD *)(a2 + 224);
  *(_QWORD *)(a2 + 216) = 0;
  v3[27] = v12;
  *(_QWORD *)(a2 + 224) = 0;
  *((_OWORD *)v3 + 14) = v13;
  v14 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a2 + 240) = 0;
  v3[30] = v14;
  v15 = *(_QWORD *)(a2 + 248);
  v16 = *(_OWORD *)(a2 + 256);
  *(_QWORD *)(a2 + 248) = 0;
  v3[31] = v15;
  *(_QWORD *)(a2 + 256) = 0;
  *((_OWORD *)v3 + 16) = v16;
  *((_OWORD *)v3 + 17) = *(_OWORD *)(a2 + 272);
  result = *(__n128 *)(a2 + 288);
  *((__n128 *)v3 + 18) = result;
  v3[38] = *(_QWORD *)(a2 + 304);
  *((_BYTE *)v3 + 320) = 1;
  return result;
}

uint64_t FIK::IKRigUtils::rebalanceTaskWeights(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  float32x4_t *v4;
  float v5;
  float v6;
  float v7;
  float32x4_t *v8;
  float32x4_t v9;
  float v10;
  float v11;
  float v12;
  float32x4_t *v13;
  uint64_t v14;
  uint64_t *v15;
  float v16;

  v1 = *(_QWORD *)(result + 176);
  if (v1)
  {
    v2 = result;
    v3 = 0;
    v4 = *(float32x4_t **)(result + 192);
    v5 = 0.0;
    v6 = 0.0;
    v7 = 0.0;
    do
    {
      v8 = &v4[v3];
      if (v4[v3 + 3].i8[4])
      {
        v9 = v8[5];
        v5 = v5
           + vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), vaddq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1))).f32[0];
        v9.f32[3] = v6;
        v6 = vmaxvq_f32(v9);
      }
      if (v8[3].i8[5])
        v7 = v7 + (float)(v4[v3 + 6].f32[2] + (float)(v4[v3 + 6].f32[0] + v4[v3 + 6].f32[1]));
      v3 += 15;
    }
    while (15 * v1 != v3);
    v10 = v7 + v5;
    if ((float)(v7 + v5) > 0.0 && v6 > 0.0
      || (v16 = v6,
          v15 = ikinemaLogObject(),
          result = ikinemaAssertHandler(*v15, 0, (uint64_t)"rebalanceTaskWeights", "(totalWeight > 0 && pMax > 0) No active tasks"), v6 = v16, v4 = *(float32x4_t **)(v2 + 192), (v1 = *(_QWORD *)(v2 + 176)) != 0))
    {
      v11 = 10.0 / v6;
      if ((float)(10.0 / v6) >= (float)(100.0 / v10))
        v11 = 100.0 / v10;
      v12 = fminf(v11, 1.0);
      v13 = v4 + 6;
      v14 = 240 * v1;
      do
      {
        if (v13[-3].i8[4])
          v13[-1] = vmulq_n_f32(v13[-1], v12);
        if (v13[-3].i8[5])
          *v13 = vmulq_n_f32(*v13, v12);
        v13 += 15;
        v14 -= 240;
      }
      while (v14);
    }
  }
  return result;
}

FIK::Characteriser *FIK::Characteriser::Characteriser(FIK::Characteriser *this)
{
  FIK *v2;
  FIK *v3;
  FIK *v5;

  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = (char *)this + 8;
  FIK::Characterisation::Characterisation((FIK::Characteriser *)((char *)this + 24), "undefined");
  *((_QWORD *)this + 3) = &unk_24CA6C0E8;
  v2 = (FIK *)operator new();
  v3 = FIK::Characterisation::Characterisation(v2, "biped");
  *(_QWORD *)v3 = &unk_24CA6C078;
  v5 = v3;
  FIK::Characteriser::registerCharacterisation((uint64_t **)this, (uint64_t *)&v5);
  if (v5)
    (*(void (**)(FIK *))(*(_QWORD *)v5 + 8))(v5);
  return this;
}

uint64_t FIK::Characteriser::registerCharacterisation(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t result;
  _QWORD v6[2];
  uint64_t v7;

  v2 = *a2;
  v3 = *(_QWORD *)(*a2 + 16);
  if (v3)
    v4 = *(void **)(v2 + 8);
  else
    v4 = &unk_2108059BE;
  v6[0] = v4;
  v6[1] = v3;
  *a2 = 0;
  v7 = v2;
  std::__tree<std::__value_type<std::string_view,std::unique_ptr<FIK::Characterisation>>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,std::unique_ptr<FIK::Characterisation>>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,std::unique_ptr<FIK::Characterisation>>>>::__emplace_unique_key_args<std::string_view,std::pair<std::string_view const,std::unique_ptr<FIK::Characterisation>>>(a1, (uint64_t)v6, (uint64_t)v6);
  result = v7;
  v7 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t FIK::Characteriser::operator[](uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD v6[2];

  v6[0] = a2;
  v6[1] = a3;
  v4 = std::__tree<std::__value_type<std::string_view,std::unique_ptr<FIK::Characterisation>>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,std::unique_ptr<FIK::Characterisation>>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,std::unique_ptr<FIK::Characterisation>>>>::find<std::string_view>(a1, (uint64_t)v6);
  if ((_QWORD *)(a1 + 8) == v4)
    return a1 + 24;
  else
    return v4[6];
}

FIK *FIK::Characterisation::Characterisation(FIK *a1, char *a2)
{
  void (***v4)(FIK::CrtAllocator *__hidden);
  IKString *v5;

  *(_QWORD *)a1 = off_24CA6C008;
  v4 = FIK::defaultAllocator(a1);
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  *((_QWORD *)a1 + 3) = v4;
  v5 = (IKString *)strlen(a2);
  IKString::assign((_QWORD *)a1 + 1, a2, v5);
  return a1;
}

_OWORD *std::__tree<std::__value_type<std::string_view,std::unique_ptr<FIK::Characterisation>>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,std::unique_ptr<FIK::Characterisation>>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,std::unique_ptr<FIK::Characterisation>>>>::__emplace_unique_key_args<std::string_view,std::pair<std::string_view const,std::unique_ptr<FIK::Characterisation>>>(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t v10;

  v5 = (void **)std::__tree<std::__value_type<std::string_view,std::unique_ptr<FIK::Characterisation>>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,std::unique_ptr<FIK::Characterisation>>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,std::unique_ptr<FIK::Characterisation>>>>::__find_equal<std::string_view>((uint64_t)a1, &v10, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x38uLL);
    v6[2] = *(_OWORD *)a3;
    v8 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 16) = 0;
    *((_QWORD *)v6 + 6) = v8;
    std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__insert_node_at(a1, v10, v7, (uint64_t *)v6);
  }
  return v6;
}

_QWORD *std::__tree<std::__value_type<std::string_view,std::unique_ptr<FIK::Characterisation>>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,std::unique_ptr<FIK::Characterisation>>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,std::unique_ptr<FIK::Characterisation>>>>::__find_equal<std::string_view>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = v4;
        v9 = (uint64_t)(v4 + 4);
        if (!std::less<std::string_view>::operator()[abi:nn180100](v7, a3, (uint64_t)(v4 + 4)))
          break;
        v4 = (_QWORD *)*v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!std::less<std::string_view>::operator()[abi:nn180100](v7, v9, a3))
        break;
      v5 = v8 + 1;
      v4 = (_QWORD *)v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t std::less<std::string_view>::operator()[abi:nn180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v3;
  size_t v4;
  const void *v5;
  size_t v6;
  size_t v7;
  int v8;
  unsigned int v9;

  v3 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(const void **)a3;
  v6 = *(_QWORD *)(a3 + 8);
  if (v6 >= v4)
    v7 = v4;
  else
    v7 = *(_QWORD *)(a3 + 8);
  v8 = memcmp(v3, v5, v7);
  if (v4 < v6)
    v9 = -1;
  else
    v9 = 1;
  if (v4 == v6)
    v9 = 0;
  if (v8)
    v9 = v8;
  return v9 >> 31;
}

_QWORD *std::__tree<std::__value_type<std::string_view,std::unique_ptr<FIK::Characterisation>>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,std::unique_ptr<FIK::Characterisation>>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,std::unique_ptr<FIK::Characterisation>>>>::find<std::string_view>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  _QWORD *v8;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 16;
  v6 = (_QWORD *)(a1 + 8);
  do
  {
    v7 = std::less<std::string_view>::operator()[abi:nn180100](v5, (uint64_t)(v3 + 4), a2);
    v8 = v3 + 1;
    if (!v7)
    {
      v8 = v3;
      v6 = v3;
    }
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v6 == v2 || std::less<std::string_view>::operator()[abi:nn180100](v5, a2, (uint64_t)(v6 + 4)))
    return v2;
  return v6;
}

uint64_t FIK::AnimNode::updateSolverBoneSettings(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  int v6;
  _DWORD *v7;
  int v8;
  _BOOL8 v9;
  _BYTE v11[25];

  (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a1 + 136))(a1, *(unsigned __int8 *)(a2 + 97), *(unsigned __int8 *)(a2 + 98), *(unsigned __int8 *)(a2 + 99));
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 168))(a1) & 1) == 0)
    (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a1 + 144))(a1, *(unsigned __int8 *)(a2 + 105), *(unsigned __int8 *)(a2 + 106), *(unsigned __int8 *)(a2 + 107));
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 176))(a1, *(unsigned __int8 *)(a2 + 96), 0);
  (*(void (**)(uint64_t, float))(*(_QWORD *)a1 + 968))(a1, *(float *)(a2 + 116));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, *(unsigned __int8 *)(a2 + 104));
  (*(void (**)(uint64_t, float))(*(_QWORD *)a1 + 696))(a1, *(float *)(a2 + 124));
  v4 = 0;
  v11[24] = *(_DWORD *)(a2 + 128);
  v5 = (int *)(a2 + 192);
  do
  {
    v6 = *(v5 - 4);
    v7 = &v11[v4];
    v8 = *v5++;
    *v7 = v6;
    v7[1] = v8;
    v4 += 8;
  }
  while (v4 != 24);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)a1 + 624))(a1, v11, 1);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 48))(a1, *(unsigned __int8 *)(a2 + 103));
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 16))(a1, *(unsigned __int8 *)(a2 + 100), 0);
  (*(void (**)(uint64_t, float))(*(_QWORD *)a1 + 712))(a1, *(float *)(a2 + 120));
  (*(void (**)(uint64_t, _QWORD, float))(*(_QWORD *)a1 + 728))(a1, 0, *(float *)(a2 + 160));
  (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)a1 + 728))(a1, 1, *(float *)(a2 + 164));
  (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)a1 + 728))(a1, 2, *(float *)(a2 + 168));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 656))(a1, 0);
  (*(void (**)(uint64_t, _QWORD, float))(*(_QWORD *)a1 + 280))(a1, 0, 1.0 - *(float *)(a2 + 144));
  (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)a1 + 280))(a1, 1, 1.0 - *(float *)(a2 + 148));
  (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)a1 + 280))(a1, 2, 1.0 - *(float *)(a2 + 152));
  if (*(_BYTE *)(a2 + 105) || *(_BYTE *)(a2 + 106) || (v9 = 0, *(_BYTE *)(a2 + 107)))
    v9 = *(_BYTE *)(a2 + 101) != 0;
  (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)a1 + 88))(a1, v9);
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 104))(a1, 0);
}

uint64_t FIK::AnimNode::updateSolverSettings(FIK::IKSolver *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t RootSegment;

  FIK::IKSolver::enableShadowPosing(a1, *(unsigned __int8 *)(a2 + 25));
  FIK::IKSolver::setLimitsGain((FIK::Solver **)a1, *(float *)(a2 + 20));
  FIK::IKSolver::setRetargetingGain((FIK::Solver **)a1, *(float *)(a2 + 8));
  FIK::IKSolver::setAddErrors(a1, *(_BYTE *)(a2 + 26));
  FIK::IKSolver::setTranslationWeight(a1, 1.0);
  FIK::IKSolver::setSolutionTolerance((uint64_t)a1, *(float *)(a2 + 4));
  FIK::IKSolver::setPrecision((FIK::Solver **)a1, *(float *)(a2 + 16));
  result = FIK::IKSolver::setPGain(a1, *(float *)a2);
  if (*(_BYTE *)(a2 + 24))
  {
    RootSegment = FIK::IKSolver::getRootSegment(a1);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)RootSegment + 136))(RootSegment, 1, 1, 1);
    FIK::IKSolver::translateRoot((FIK::Solver **)a1, 1);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)RootSegment + 160))(RootSegment, 1, 0);
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)RootSegment + 120))(RootSegment, 0);
  }
  return result;
}

uint64_t FIK::AnimNode::updateConstraintSettings(uint64_t this, ikinema::Constraint *a2, const FIK::RigTask *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  float *v7;
  char *v8;
  uint64_t j;
  float *v10;
  uint64_t *v11;
  uint64_t *v12;

  v4 = this;
  if (*((_BYTE *)a2 + 52))
  {
    v5 = *(_QWORD *)(this + 8);
    if (!v5)
    {
      v11 = ikinemaLogObject();
      ikinemaAssertHandler(*v11, 0, (uint64_t)"updateConstraintSettings", "(constraint.positionTask) Position task should have been created.");
      v5 = *(_QWORD *)(v4 + 8);
    }
    for (i = 0; i != 3; ++i)
    {
      v7 = (float *)((char *)a2 + 4 * i);
      (*(void (**)(uint64_t, uint64_t, const FIK::RigTask *, float))(*(_QWORD *)(v5
                                                                                        + *(_QWORD *)(*(_QWORD *)v5 - 264))
                                                                            + 80))(v5 + *(_QWORD *)(*(_QWORD *)v5 - 264), i, a3, v7[20]);
      (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 264)) + 104))(v5 + *(_QWORD *)(*(_QWORD *)v5 - 264), i, v7[28]);
    }
    (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 264))
                                                            + 144))(v5 + *(_QWORD *)(*(_QWORD *)v5 - 264), *((unsigned __int8 *)a2 + 55), *((unsigned __int8 *)a2 + 56), *((unsigned __int8 *)a2 + 57));
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 264)) + 56))(v5 + *(_QWORD *)(*(_QWORD *)v5 - 264), *((unsigned int *)a2 + 16));
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 392))(v5, *((unsigned __int8 *)a2 + 54));
    this = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v5 + 280))(v5, (char *)a2 + 144);
  }
  if (*((_BYTE *)a2 + 53))
  {
    v8 = *(char **)(v4 + 16);
    if (!v8)
    {
      v12 = ikinemaLogObject();
      ikinemaAssertHandler(*v12, 0, (uint64_t)"updateConstraintSettings", "(constraint.orientationTask) Orientation task should have been created.");
      v8 = *(char **)(v4 + 16);
    }
    for (j = 0; j != 3; ++j)
    {
      v10 = (float *)((char *)a2 + 4 * j);
      (*(void (**)(char *, uint64_t, const FIK::RigTask *, float))(*(_QWORD *)&v8[*(_QWORD *)(*(_QWORD *)v8 - 264)]
                                                                           + 80))(&v8[*(_QWORD *)(*(_QWORD *)v8 - 264)], j, a3, v10[24]);
      (*(void (**)(char *, uint64_t, float))(*(_QWORD *)&v8[*(_QWORD *)(*(_QWORD *)v8 - 264)] + 104))(&v8[*(_QWORD *)(*(_QWORD *)v8 - 264)], j, v10[32]);
    }
    (*(void (**)(char *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)&v8[*(_QWORD *)(*(_QWORD *)v8 - 264)] + 144))(&v8[*(_QWORD *)(*(_QWORD *)v8 - 264)], *((unsigned __int8 *)a2 + 58), *((unsigned __int8 *)a2 + 59), *((unsigned __int8 *)a2 + 60));
    return (*(uint64_t (**)(char *, _QWORD))(*(_QWORD *)&v8[*(_QWORD *)(*(_QWORD *)v8 - 264)] + 56))(&v8[*(_QWORD *)(*(_QWORD *)v8 - 264)], *((unsigned int *)a2 + 17));
  }
  return this;
}

uint64_t *FIK::AnimNode::loadSolverSkeletonFromRig(__n128 **this)
{
  FIK::IKSolver *v2;
  __n128 v3;
  __n128 *v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t Segment;
  uint64_t v9[4];

  FIK::IKRigUtils::generateImportBonesFromRig<FIK::MoCapRig,void>((uint64_t)(this + 18), v9);
  v2 = (FIK::IKSolver *)(this + 2);
  FIK::IKSolver::importBones(this + 2, (unint64_t *)v9);
  FIK::AnimNode::updateSolverSettings((FIK::IKSolver *)(this + 2), (uint64_t)(this + 26));
  v4 = this[44];
  if (v4)
  {
    v5 = (unsigned int *)this[46];
    v6 = 544 * (_QWORD)v4;
    do
    {
      Segment = FIK::IKSolver::getSegment(v2, *v5);
      FIK::AnimNode::updateSolverBoneSettings(Segment, (uint64_t)v5);
      v5 += 136;
      v6 -= 544;
    }
    while (v6);
  }
  FIK::IKSolver::setup((FIK::Solver **)v2, v3);
  return FIK::IKArray<FIK::ImportBone>::~IKArray(v9);
}

uint64_t *FIK::IKRigUtils::generateImportBonesFromRig<FIK::MoCapRig,void>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  void (***v4)(FIK::CrtAllocator *__hidden);

  v4 = FIK::defaultAllocator((FIK *)a1);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = (uint64_t)v4;
  FIK::IKArray<FIK::ImportBone>::reserve(a2, *(_QWORD *)(a1 + 208));
  return std::transform[abi:nn180100]<FIK::IKArrayIterator<FIK::MoCapBone const>,std::back_insert_iterator<FIK::IKArray<FIK::ImportBone>>,FIK::IKArray<FIK::ImportBone> FIK::IKRigUtils::generateImportBonesFromRig<FIK::MoCapRig,void>(FIK::MoCapRig const&)::{lambda(FIK::RigBoneBase const&)#1}>(*(_DWORD **)(a1 + 224), (_DWORD *)(*(_QWORD *)(a1 + 224) + 544 * *(_QWORD *)(a1 + 208)), a2);
}

uint64_t FIK::AnimNode::AnimNode(uint64_t a1, uint64_t a2)
{
  FIK::IKSolver *v4;
  void (***v5)(FIK::CrtAllocator *__hidden);
  FIK *v6;
  void (***v7)(FIK::CrtAllocator *__hidden);
  void (***v8)(FIK::CrtAllocator *__hidden);
  __int128 v9;
  __int128 v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t RootSegment;
  __int128 v15;
  _OWORD v17[2];

  *(_QWORD *)a1 = off_24CA6C538;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 12) = 1114636288;
  v4 = (FIK::IKSolver *)(a1 + 16);
  v5 = FIK::defaultAllocator((FIK *)a1);
  v6 = (FIK *)FIK::IKSolver::IKSolver(v4, (FIK::Allocator *)v5);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 48) = xmmword_210802BA0;
  *(_BYTE *)(a1 + 64) = 0;
  v7 = FIK::defaultAllocator(v6);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = v7;
  v8 = FIK::defaultAllocator((FIK *)v7);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = v8;
  IKString::IKString((IKString *)(a1 + 144), (const IKString *)a2);
  v9 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 180) = *(_OWORD *)(a2 + 36);
  *(_OWORD *)(a1 + 168) = v9;
  v10 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 224) = v10;
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 96);
  v11 = *(_DWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 264) = v11;
  v12 = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(v13 + 131) = *(_DWORD *)(a2 + 131);
  *(_DWORD *)(a1 + 272) = v12;
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 160);
  FIK::IKArray<FIK::MoCapTask>::IKArray((_QWORD *)(a1 + 320), (_QWORD *)(a2 + 176));
  FIK::IKArray<FIK::MoCapBone>::IKArray((_QWORD *)(a1 + 352), (_QWORD *)(a2 + 208));
  FIK::IKArray<FIK::RigBoneBase>::IKArray((_QWORD *)(a1 + 384), (_QWORD *)(a2 + 240));
  *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 464) = 0;
  FIK::AnimNode::loadSolverSkeletonFromRig((__n128 **)a1);
  RootSegment = FIK::IKSolver::getRootSegment(v4);
  (*(void (**)(_OWORD *__return_ptr))(*(_QWORD *)RootSegment + 864))(v17);
  v15 = v17[1];
  *(_OWORD *)(a1 + 32) = v17[0];
  *(_OWORD *)(a1 + 48) = v15;
  return a1;
}

uint64_t FIK::AnimNode::PassFKPose(uint64_t a1, uint64_t a2)
{
  FIK::IKSolver *v3;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  unsigned int i;
  uint64_t v8;
  uint64_t Segment;

  v3 = (FIK::IKSolver *)(a1 + 16);
  result = FIK::IKSolver::numSegments((FIK::IKSolver *)(a1 + 16));
  if (result)
  {
    v5 = result;
    v6 = 0;
    for (i = 0; i < v5; v6 = ++i)
    {
      v8 = a2 + 32 * v6 + 16;
      Segment = FIK::IKSolver::getSegment(v3, i);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)Segment + 200))(Segment, v8);
    }
  }
  return result;
}

uint64_t FIK::AnimNode::SolveAndUpdatePose(uint64_t a1, uint64_t a2)
{
  FIK::IKSolver *v4;
  uint64_t v5;
  float32x4_t v6;
  uint64_t RootSegment;
  uint64_t v8;
  unsigned int v9;
  uint64_t Segment;
  float32x4_t *v11;
  float32x4_t v13[2];
  unsigned int v14;

  v14 = 2;
  v4 = (FIK::IKSolver *)(a1 + 16);
  FIK::IKSolver::solve((FIK::Solver **)(a1 + 16), *(_DWORD *)(a1 + 8), &v14);
  if (v14 != 2)
  {
    if (v14
      || (v5 = FIK::IKSolver::getRootSegment(v4),
          (*(void (**)(float32x4_t *__return_ptr))(*(_QWORD *)v5 + 360))(v13),
          v6 = vmulq_f32(v13[0], v13[0]),
          sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v6, 2), vaddq_f32(v6, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v6.f32, 1))).f32[0]) > 5000.0))
    {
      RootSegment = FIK::IKSolver::getRootSegment(v4);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)RootSegment + 440))(RootSegment, a1 + 32);
      FIK::IKSolver::resetSolver((FIK::Solver **)v4);
      FIK::IKSolver::storeRootTransform(v4);
      FIK::IKSolver::solve((FIK::Solver **)v4, *(_DWORD *)(a1 + 8), &v14);
    }
    if (FIK::IKSolver::numSegments(v4))
    {
      v8 = 0;
      v9 = 0;
      do
      {
        Segment = FIK::IKSolver::getSegment(v4, v9);
        (*(void (**)(float32x4_t *__return_ptr))(*(_QWORD *)Segment + 360))(v13);
        v11 = (float32x4_t *)(a2 + 32 * v8);
        *v11 = v13[0];
        v11[1] = v13[1];
        v8 = ++v9;
      }
      while (FIK::IKSolver::numSegments(v4) > (unint64_t)v9);
    }
  }
  return v14;
}

void FIK::AnimNode::ResetNode(FIK::Solver **this)
{
  FIK::IKSolver::resetSolver(this + 2);
}

float FIK::AnimNode::GetFrameRate(FIK::AnimNode *this)
{
  return *((float *)this + 3);
}

uint64_t FIK::AnimNode::SetFrameRate(uint64_t this, float a2)
{
  *(float *)(this + 12) = a2;
  return this;
}

void FIK::AnimNode::updateSolverBoneLengths(uint64_t a1, uint64_t a2, uint64_t a3)
{
  FIK::IKSolver *v5;
  unint64_t v6;
  uint64_t v7;
  float v8;
  uint64_t Segment;
  uint64_t *v10;
  __int128 v11;

  v5 = (FIK::IKSolver *)(a1 + 16);
  if (FIK::IKSolver::numSegments((FIK::IKSolver *)(a1 + 16)) != a3)
  {
    v10 = ikinemaLogObject();
    ikinemaAssertHandler(*v10, 0, (uint64_t)"updateSolverBoneLengths", "(jointsCount() == newLengths.size()) Invalid size for the joint lengths array.");
  }
  if (FIK::IKSolver::numSegments(v5))
  {
    v6 = 0;
    v7 = 64;
    do
    {
      v8 = *(float *)(a2 + 4 * v6);
      if (v8 >= 0.0)
      {
        FIK::IKRigUtils::setBoneLength<FIK::MoCapRig>(a1 + 144, v6, v8);
        v11 = *(_OWORD *)(*(_QWORD *)(a1 + 368) + v7);
        if (FIK::IKSolver::numSegments(v5) <= v6)
          FIK::AnimNode::updateSolverBoneLengths();
        Segment = FIK::IKSolver::getSegment(v5, v6);
        (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)Segment + 432))(Segment, &v11);
      }
      ++v6;
      v7 += 544;
    }
    while (FIK::IKSolver::numSegments(v5) > v6);
  }
  FIK::IKSolver::resetSolver((FIK::Solver **)v5);
}

uint64_t FIK::AnimNode::jointsCount(FIK::AnimNode *this)
{
  return FIK::IKSolver::numSegments((FIK::AnimNode *)((char *)this + 16));
}

uint64_t FIK::AnimNode::jointByIndex(FIK::AnimNode *this, unint64_t a2)
{
  unsigned int v2;
  FIK::IKSolver *v3;

  v2 = a2;
  v3 = (FIK::AnimNode *)((char *)this + 16);
  if (FIK::IKSolver::numSegments((FIK::AnimNode *)((char *)this + 16)) <= a2)
    return 0;
  else
    return FIK::IKSolver::getSegment(v3, v2);
}

uint64_t FIK::AnimNode::GetRig(FIK::AnimNode *this)
{
  return (uint64_t)this + 144;
}

uint64_t FIK::AnimNode::GetTaskIndex(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  const void *v9;
  const void *v10;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!v4)
    return 0xFFFFFFFFLL;
  v5 = v4;
  v6 = 0;
  while (1)
  {
    v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, v6);
    v8 = *(_QWORD *)(v7 + 32);
    v9 = v8 ? *(const void **)(v7 + 24) : &unk_2108059BE;
    if (a2[1] == v8)
    {
      v10 = v8 ? (const void *)*a2 : &unk_2108059BE;
      if (!memcmp(v10, v9, v8))
        break;
    }
    if (v5 == ++v6)
      return 0xFFFFFFFFLL;
  }
  return v6;
}

uint64_t FIK::AnimNode::algorithmCount(FIK::AnimNode *this)
{
  return *((_QWORD *)this + 9);
}

uint64_t FIK::AnimNode::algorithmReference(FIK::AnimNode *this, uint64_t a2)
{
  return *((_QWORD *)this + 11) + 8 * a2;
}

uint64_t FIK::AnimNode::insertAlgorithmBefore(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t result;

  if (!*a3)
    return 2;
  v4 = a1 + 72;
  v3 = *(_QWORD *)(a1 + 72);
  if (v3 >= a2)
    v3 = a2;
  FIK::IKArray<ikinema::AlgorithmHandle>::insert(a1 + 72, *(_QWORD *)(a1 + 88) + 8 * v3, a3);
  result = 0;
  *(_BYTE *)(v4 - 8) = 0;
  return result;
}

uint64_t FIK::IKArray<ikinema::AlgorithmHandle>::insert(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char v11;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = a2 - v5;
  v7 = v5 + 8 * *(_QWORD *)a1 - a2;
  FIK::IKArray<ikinema::AlgorithmHandle>::reserve((FIK **)a1, *(_QWORD *)a1 + 1);
  v8 = (_QWORD *)(*(_QWORD *)(a1 + 16) + v6);
  std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<ikinema::AlgorithmHandle *,ikinema::AlgorithmHandle *,ikinema::AlgorithmHandle *>((uint64_t)&v11, v8, (_QWORD *)((char *)v8 + v7), (_QWORD *)((char *)v8 + v7 + 8));
  v9 = *a3;
  *a3 = 0;
  *v8 = v9;
  ++*(_QWORD *)a1;
  return *(_QWORD *)(a1 + 16) + v6;
}

uint64_t FIK::AnimNode::removeAlgorithmAt(FIK::AnimNode *this, unint64_t a2)
{
  FIK **v3;
  uint64_t result;
  char v5;

  if (*((_QWORD *)this + 9) <= a2)
    return 0;
  v3 = (FIK **)(*((_QWORD *)this + 11) + 8 * a2);
  result = (*(uint64_t (**)(FIK *))(*(_QWORD *)*v3 + 40))(*v3);
  if ((_DWORD)result)
  {
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<FIK::IKArrayIterator<ikinema::AlgorithmHandle>,FIK::IKArrayIterator<ikinema::AlgorithmHandle>,FIK::IKArrayIterator<ikinema::AlgorithmHandle>>((uint64_t)&v5, v3 + 1, (FIK **)(*((_QWORD *)this + 11) + 8 * *((_QWORD *)this + 9)), v3);
    --*((_QWORD *)this + 9);
    *((_BYTE *)this + 64) = 0;
    return 1;
  }
  return result;
}

uint64_t FIK::AnimNode::registerAndValidateAlgorithms(FIK::AnimNode *this)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  void *v6;
  uint64_t result;
  uint64_t v8;
  ikinema::Buffer *v9;
  uint64_t v10;

  v1 = *((_QWORD *)this + 9);
  if (!v1)
    return 1;
  v3 = (_QWORD *)*((_QWORD *)this + 11);
  v4 = (uint64_t *)((char *)this + 104);
  v5 = 8 * v1;
  while ((*(unsigned int (**)(_QWORD, uint64_t *))(*(_QWORD *)*v3 + 32))(*v3, v4) != 1)
  {
    ++v3;
    v5 -= 8;
    if (!v5)
      return 1;
  }
  v8 = *v4;
  if (*v4)
  {
    v9 = (ikinema::Buffer *)*((_QWORD *)this + 15);
    do
    {
      ikinema::Buffer::~Buffer(v9, v6);
      v9 = (ikinema::Buffer *)(v10 + 72);
      --v8;
    }
    while (v8);
  }
  result = 0;
  *v4 = 0;
  return result;
}

uint64_t FIK::AnimNode::validateAlgorithms(FIK::AnimNode *this)
{
  uint64_t result;

  if (*((_BYTE *)this + 64))
    return 1;
  result = FIK::AnimNode::registerAndValidateAlgorithms(this);
  *((_BYTE *)this + 64) = result;
  return result;
}

uint64_t FIK::AnimNode::constraintsCount(FIK::AnimNode *this)
{
  return 0;
}

uint64_t FIK::AnimNode::constraintByIndex(FIK::AnimNode *this)
{
  return 0;
}

_QWORD *FIK::IKArray<FIK::MoCapTask>::IKArray(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  __int128 v13;
  int v14;

  v4 = a2[1];
  v5 = a2[3];
  *a1 = *a2;
  a1[1] = v4;
  if (v4)
  {
    v6 = v4 << 8;
    v7 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v4 << 8, 16);
    v8 = v7;
    a1[2] = v7;
    a1[3] = v5;
    if (v6)
    {
      bzero(v7, v6);
      v8 = (char *)a1[2];
    }
  }
  else
  {
    v8 = 0;
    a1[2] = 0;
    a1[3] = v5;
  }
  v9 = *a2;
  if (*a2)
  {
    v10 = 0;
    v11 = a2[2];
    do
    {
      v12 = &v8[v10];
      IKString::IKString((IKString *)&v8[v10], (const IKString *)(v11 + v10));
      IKString::IKString((IKString *)&v8[v10 + 24], (const IKString *)(v11 + v10 + 24));
      v13 = *(_OWORD *)(v11 + v10 + 48);
      *((_QWORD *)v12 + 8) = *(_QWORD *)(v11 + v10 + 64);
      *((_OWORD *)v12 + 3) = v13;
      *((_OWORD *)v12 + 5) = *(_OWORD *)(v11 + v10 + 80);
      *((_OWORD *)v12 + 6) = *(_OWORD *)(v11 + v10 + 96);
      *((_OWORD *)v12 + 7) = *(_OWORD *)(v11 + v10 + 112);
      *((_OWORD *)v12 + 8) = *(_OWORD *)(v11 + v10 + 128);
      *((_OWORD *)v12 + 9) = *(_OWORD *)(v11 + v10 + 144);
      *((_OWORD *)v12 + 10) = *(_OWORD *)(v11 + v10 + 160);
      IKString::IKString((IKString *)&v8[v10 + 176], (const IKString *)(v11 + v10 + 176));
      v14 = *(_DWORD *)(v11 + v10 + 200);
      *((_WORD *)v12 + 102) = *(_WORD *)(v11 + v10 + 204);
      *((_DWORD *)v12 + 50) = v14;
      *((_OWORD *)v12 + 13) = *(_OWORD *)(v11 + v10 + 208);
      *((_OWORD *)v12 + 14) = *(_OWORD *)(v11 + v10 + 224);
      *((_OWORD *)v12 + 15) = *(_OWORD *)(v11 + v10 + 240);
      v10 += 256;
      --v9;
    }
    while (v9);
  }
  return a1;
}

_QWORD *FIK::IKArray<FIK::MoCapBone>::IKArray(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v4 = a2[1];
  v5 = a2[3];
  *a1 = *a2;
  a1[1] = v4;
  if (v4)
  {
    v6 = 544 * v4;
    v7 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, 544 * v4, 16);
    v8 = v7;
    a1[2] = v7;
    a1[3] = v5;
    if (v6)
    {
      bzero(v7, v6);
      v8 = (char *)a1[2];
    }
  }
  else
  {
    v8 = 0;
    a1[2] = 0;
    a1[3] = v5;
  }
  v9 = *a2;
  if (*a2)
  {
    v10 = 0;
    v11 = a2[2];
    do
    {
      v12 = &v8[v10];
      *(_QWORD *)&v8[v10] = *(_QWORD *)(v11 + v10);
      IKString::IKString((IKString *)&v8[v10 + 8], (const IKString *)(v11 + v10 + 8));
      IKString::IKString((IKString *)&v8[v10 + 32], (const IKString *)(v11 + v10 + 32));
      *((_OWORD *)v12 + 4) = *(_OWORD *)(v11 + v10 + 64);
      *((_OWORD *)v12 + 5) = *(_OWORD *)(v11 + v10 + 80);
      v13 = *(_OWORD *)(v11 + v10 + 96);
      v14 = *(_OWORD *)(v11 + v10 + 112);
      *((_QWORD *)v12 + 16) = *(_QWORD *)(v11 + v10 + 128);
      *((_OWORD *)v12 + 6) = v13;
      *((_OWORD *)v12 + 7) = v14;
      *((_OWORD *)v12 + 9) = *(_OWORD *)(v11 + v10 + 144);
      *((_OWORD *)v12 + 10) = *(_OWORD *)(v11 + v10 + 160);
      *((_OWORD *)v12 + 11) = *(_OWORD *)(v11 + v10 + 176);
      *((_OWORD *)v12 + 12) = *(_OWORD *)(v11 + v10 + 192);
      *((_OWORD *)v12 + 13) = *(_OWORD *)(v11 + v10 + 208);
      *((_OWORD *)v12 + 14) = *(_OWORD *)(v11 + v10 + 224);
      *((_OWORD *)v12 + 15) = *(_OWORD *)(v11 + v10 + 240);
      IKString::IKString((IKString *)&v8[v10 + 256], (const IKString *)(v11 + v10 + 256));
      *((_DWORD *)v12 + 70) = *(_DWORD *)(v11 + v10 + 280);
      *((_OWORD *)v12 + 18) = *(_OWORD *)(v11 + v10 + 288);
      *((_OWORD *)v12 + 19) = *(_OWORD *)(v11 + v10 + 304);
      *((_OWORD *)v12 + 20) = *(_OWORD *)(v11 + v10 + 320);
      *((_OWORD *)v12 + 21) = *(_OWORD *)(v11 + v10 + 336);
      v15 = *(_OWORD *)(v11 + v10 + 352);
      *((_QWORD *)v12 + 46) = *(_QWORD *)(v11 + v10 + 368);
      *((_OWORD *)v12 + 22) = v15;
      *((_QWORD *)v12 + 48) = *(_QWORD *)(v11 + v10 + 384);
      *((_OWORD *)v12 + 25) = *(_OWORD *)(v11 + v10 + 400);
      FIK::IKArray<IKString>::IKArray(&v8[v10 + 416], (_QWORD *)(v11 + v10 + 416));
      *((_OWORD *)v12 + 28) = *(_OWORD *)(v11 + v10 + 448);
      *((_OWORD *)v12 + 29) = *(_OWORD *)(v11 + v10 + 464);
      *((_QWORD *)v12 + 60) = *(_QWORD *)(v11 + v10 + 480);
      *((_OWORD *)v12 + 31) = *(_OWORD *)(v11 + v10 + 496);
      *((_OWORD *)v12 + 32) = *(_OWORD *)(v11 + v10 + 512);
      *((_OWORD *)v12 + 33) = *(_OWORD *)(v11 + v10 + 528);
      v10 += 544;
      --v9;
    }
    while (v9);
  }
  return a1;
}

_QWORD *FIK::IKArray<FIK::RigBoneBase>::IKArray(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;

  v4 = a2[1];
  v5 = a2[3];
  *a1 = *a2;
  a1[1] = v4;
  if (v4)
  {
    v6 = 96 * v4;
    v7 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, 96 * v4, 16);
    a1[2] = v7;
    a1[3] = v5;
    if (v6)
    {
      bzero(v7, v6);
      v7 = (_OWORD *)a1[2];
    }
  }
  else
  {
    v7 = 0;
    a1[2] = 0;
    a1[3] = v5;
  }
  v8 = *a2;
  if (*a2)
  {
    v9 = a2[2];
    v10 = v7 + 2;
    v11 = (_OWORD *)(v9 + 32);
    do
    {
      *((_QWORD *)v10 - 4) = *((_QWORD *)v11 - 4);
      IKString::IKString((IKString *)((char *)v10 - 24), (const IKString *)((char *)v11 - 24));
      IKString::IKString((IKString *)v10, (const IKString *)v11);
      v10[2] = v11[2];
      v10[3] = v11[3];
      v10 += 6;
      v11 += 6;
      --v8;
    }
    while (v8);
  }
  return a1;
}

uint64_t *std::transform[abi:nn180100]<FIK::IKArrayIterator<FIK::MoCapBone const>,std::back_insert_iterator<FIK::IKArray<FIK::ImportBone>>,FIK::IKArray<FIK::ImportBone> FIK::IKRigUtils::generateImportBonesFromRig<FIK::MoCapRig,void>(FIK::MoCapRig const&)::{lambda(FIK::RigBoneBase const&)#1}>(_DWORD *a1, _DWORD *a2, uint64_t *a3)
{
  _DWORD *v5;
  __n128 v6;
  _QWORD v8[2];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16[2];
  uint64_t v17;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      IKString::IKString((IKString *)v16, (const IKString *)(v5 + 2));
      IKString::IKString((IKString *)&v13, (const IKString *)(v5 + 8));
      FIK::ImportBone::ImportBone((uint64_t)v8, v16, &v13, v5 + 16);
      if (v14)
      {
        (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v15 + 24))(v15, v13, 0, 8);
        v13 = 0;
        v14 = 0;
      }
      if (v16[1])
        (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v17 + 24))(v17, v16[0], 0, 8);
      v6 = FIK::IKArray<FIK::ImportBone>::push_back<FIK::ImportBone,void>(a3, (uint64_t)v8);
      if (v11)
      {
        (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, __n128))(*(_QWORD *)v12 + 24))(v12, v10, 0, 8, v6);
        v10 = 0;
        v11 = 0;
      }
      if (v8[1])
        (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t, __n128))(*(_QWORD *)v9 + 24))(v9, v8[0], 0, 8, v6);
      v5 += 136;
    }
    while (v5 != a2);
  }
  return a3;
}

uint64_t FIK::ImportBone::ImportBone(uint64_t a1, uint64_t *a2, uint64_t *a3, _DWORD *a4)
{
  uint64_t *v7;

  v7 = IKString::IKString((uint64_t *)a1, a2, a2[2]);
  IKString::IKString(v7 + 3, a3, a3[2]);
  *(_OWORD *)(a1 + 48) = xmmword_210802BA0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0x200000002;
  *(_BYTE *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 100) = 0;
  *(_DWORD *)(a1 + 108) = 0;
  *(_OWORD *)(a1 + 112) = xmmword_210804A18;
  *(_OWORD *)(a1 + 128) = unk_210804A28;
  FIK::ImportBone::setRestTransform((_DWORD *)a1, a4);
  return a1;
}

__n128 FIK::IKArray<FIK::ImportBone>::push_back<FIK::ImportBone,void>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  FIK::IKArray<FIK::ImportBone>::reserve(a1, *a1 + 1);
  v4 = a1[2] + 144 * *a1;
  IKString::IKString((uint64_t *)v4, (uint64_t *)a2, *(_QWORD *)(a2 + 16));
  IKString::IKString((uint64_t *)(v4 + 24), (uint64_t *)(a2 + 24), *(_QWORD *)(a2 + 40));
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v4 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v4 + 64) = v5;
  result = *(__n128 *)(a2 + 80);
  v7 = *(_OWORD *)(a2 + 96);
  v8 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(v4 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(v4 + 128) = v8;
  *(__n128 *)(v4 + 80) = result;
  *(_OWORD *)(v4 + 96) = v7;
  ++*a1;
  return result;
}

_QWORD *std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<ikinema::AlgorithmHandle *,ikinema::AlgorithmHandle *,ikinema::AlgorithmHandle *>(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  FIK *v10;
  FIK *v11;
  void *v12;

  if (a3 != a2)
  {
    v7 = a3;
    do
    {
      v9 = *--v7;
      v8 = v9;
      *v7 = 0;
      v11 = (FIK *)*--a4;
      v10 = v11;
      *a4 = v8;
      if (v11)
      {
        (*(void (**)(FIK *))(*(_QWORD *)v10 + 8))(v10);
        FIK::FIKFree(v10, v12);
      }
    }
    while (v7 != a2);
  }
  return a3;
}

FIK **std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<FIK::IKArrayIterator<ikinema::AlgorithmHandle>,FIK::IKArrayIterator<ikinema::AlgorithmHandle>,FIK::IKArrayIterator<ikinema::AlgorithmHandle>>(uint64_t a1, FIK **a2, FIK **a3, FIK **a4)
{
  FIK **v4;
  FIK **v5;
  FIK **v7;
  FIK *v8;
  FIK *v9;
  void *v10;

  v4 = a4;
  v5 = a2;
  if (a2 != a3)
  {
    v7 = a4;
    do
    {
      v8 = *v5;
      *v5 = 0;
      v9 = *v7;
      *v7 = v8;
      if (v9)
      {
        (*(void (**)(FIK *))(*(_QWORD *)v9 + 8))(v9);
        FIK::FIKFree(v9, v10);
      }
      ++v5;
      ++v7;
      ++v4;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t FIK::FootPlacement::FootPlacement(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = FIK::GenericSolver::GenericSolver(a1, a2);
  *(_QWORD *)v3 = &off_24CA6B988;
  *(_QWORD *)(v3 + 536) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(v3 + 544) = _D0;
  *(_QWORD *)(v3 + 552) = 0x3F80000000000000;
  *(_QWORD *)(v3 + 560) = _D0;
  *(_DWORD *)(v3 + 576) = 0;
  *(_QWORD *)(v3 + 580) = -1;
  *(_QWORD *)(v3 + 588) = -1;
  *(_BYTE *)(v3 + 596) = 0;
  *(_QWORD *)(v3 + 648) = 0;
  *(_QWORD *)(v3 + 640) = 0;
  *(_QWORD *)(v3 + 616) = 0;
  *(_QWORD *)(v3 + 608) = 0;
  *(_BYTE *)(v3 + 624) = 0;
  *(_OWORD *)(v3 + 656) = xmmword_210802BA0;
  *(_DWORD *)(v3 + 672) = 0;
  *(_WORD *)(v3 + 676) = 0;
  FIK::FootPlacement::SetupTaskParentIndices(v3);
  return a1;
}

uint64_t FIK::FootPlacement::SetupTaskParentIndices(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(this + 56);
  if (v1)
  {
    v2 = *(_QWORD *)(this + 72);
    v3 = this + 192;
    v4 = 576 * v1;
    do
    {
      this = FIK::IKRigUtils::GetParentTaskIndexByBoneIndex<FIK::GameRig>(*(_DWORD *)(v2 + 96), v3);
      *(_DWORD *)(v2 + 564) = this;
      v2 += 576;
      v4 -= 576;
    }
    while (v4);
  }
  return this;
}

uint64_t FIK::FootPlacement::AddTaskToSolver(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t (**v19)(FIK::RTGameTask *__hidden, const FIK::Transform *);
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  char v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _OWORD v51[4];
  int v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  v19 = (uint64_t (**)(FIK::RTGameTask *__hidden, const FIK::Transform *))&unk_24CA6C6F8;
  v20 = *(_OWORD *)(a2 + 8);
  IKString::IKString(&v21, (uint64_t *)(a2 + 24), *(_QWORD *)(a2 + 40));
  IKString::IKString(&v24, (uint64_t *)(a2 + 48), *(_QWORD *)(a2 + 64));
  IKString::IKString(&v27, (uint64_t *)(a2 + 72), *(_QWORD *)(a2 + 88));
  v30 = *(_OWORD *)(a2 + 96);
  v31 = *(_QWORD *)(a2 + 112);
  v4 = *(_OWORD *)(a2 + 144);
  v32 = *(_OWORD *)(a2 + 128);
  v33 = v4;
  v5 = *(_OWORD *)(a2 + 176);
  v34 = *(_OWORD *)(a2 + 160);
  v35 = v5;
  v6 = *(_OWORD *)(a2 + 208);
  v36 = *(_OWORD *)(a2 + 192);
  v37 = v6;
  v7 = *(_OWORD *)(a2 + 240);
  v38 = *(_OWORD *)(a2 + 224);
  v39 = v7;
  v8 = *(_OWORD *)(a2 + 272);
  v40 = *(_OWORD *)(a2 + 256);
  v41 = v8;
  v19 = &off_24CA6AB50;
  v42 = *(_BYTE *)(a2 + 288);
  v9 = *(_OWORD *)(a2 + 320);
  v43 = *(_OWORD *)(a2 + 304);
  v44 = v9;
  v10 = *(_OWORD *)(a2 + 352);
  v45 = *(_OWORD *)(a2 + 336);
  v46 = v10;
  v11 = *(_OWORD *)(a2 + 384);
  v47 = *(_OWORD *)(a2 + 368);
  v48 = v11;
  *(_QWORD *)((char *)v51 + 14) = *(_QWORD *)(a2 + 446);
  v13 = *(_OWORD *)(a2 + 416);
  v12 = *(_OWORD *)(a2 + 432);
  v49 = *(_OWORD *)(a2 + 400);
  v50 = v13;
  v14 = *(_OWORD *)(a2 + 464);
  v15 = *(_OWORD *)(a2 + 480);
  v51[0] = v12;
  v51[2] = v14;
  v51[3] = v15;
  v52 = *(_DWORD *)(a2 + 496);
  v16 = *(_OWORD *)(a2 + 528);
  v53 = *(_OWORD *)(a2 + 512);
  v54 = v16;
  v55 = *(_OWORD *)(a2 + 544);
  v56 = *(_QWORD *)(a2 + 560);
  v17 = FIK::GenericSolver::AddTaskToSolver(a1, (uint64_t)&v19);
  if (v28)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v29 + 24))(v29, v27, 0, 8);
    v27 = 0;
    v28 = 0;
  }
  if (v25)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v26 + 24))(v26, v24, 0, 8);
    v24 = 0;
    v25 = 0;
  }
  v19 = (uint64_t (**)(FIK::RTGameTask *__hidden, const FIK::Transform *))&unk_24CA6C6F8;
  if (v22)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v23 + 24))(v23, v21, 0, 8);
    v21 = 0;
    v22 = 0;
  }
  if ((_DWORD)v17 != -1)
    FIK::FootPlacement::SetupTaskParentIndices(a1);
  return v17;
}

BOOL FIK::FootPlacement::RemoveTaskFromSolver(FIK *a1, uint64_t a2)
{
  IKString *v4;
  char *v5;
  _BOOL8 v6;
  uint64_t v8;
  uint64_t v9;
  void (***v10)(FIK::CrtAllocator *__hidden);

  v8 = 0;
  v9 = 0;
  v10 = FIK::defaultAllocator(a1);
  v4 = *(IKString **)(a2 + 8);
  if (v4)
    v5 = *(char **)a2;
  else
    v5 = (char *)&unk_2108059BE;
  IKString::assign(&v8, v5, v4);
  v6 = FIK::GenericSolver::RemoveTaskFromSolver((uint64_t)a1, (uint64_t)&v8);
  if (v9)
  {
    ((void (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v10)[3])(v10, v8, 0, 8);
    v8 = 0;
    v9 = 0;
  }
  if (v6)
    FIK::FootPlacement::SetupTaskParentIndices((uint64_t)a1);
  return v6;
}

uint64_t FIK::FootPlacement::Solve(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4[2];

  v2 = *a2;
  v4[0] = a2[2];
  v4[1] = v2;
  return FIK::FootPlacement::Solve(a1, v4);
}

{
  double v4;
  unsigned int v6;

  v6 = 0;
  FIK::GenericSolver::ConfigureSegments(a1, a2);
  FIK::FootPlacement::ProcessFootPlacementTasks((float32x4_t *)a1, a2, v4);
  FIK::IKSolver::solve(*(FIK::Solver ***)(a1 + 176), *(_DWORD *)(a1 + 268), &v6);
  *(float *)(a1 + 256) = FIK::IKSolver::getPGain(*(FIK::Solver ***)(a1 + 176));
  FIK::GenericSolver::PopulateOutArray(a1, a2);
  return v6;
}

void FIK::FootPlacement::ProcessFootPlacementTasks(float32x4_t *a1, uint64_t *a2, double a3)
{
  uint64_t v4;
  int v6;
  float32x4_t *v7;
  uint64_t v8;
  float32x4_t v9;
  float32x4_t v10;
  uint64_t v11;
  float32x4_t *v12;
  float32x4_t *v13;
  float32x4_t v14;
  BOOL v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;

  v22 = 0uLL;
  v4 = a1[3].i64[1];
  if (v4)
  {
    v6 = 0;
    v7 = (float32x4_t *)a1[4].i64[1];
    v8 = 576 * v4;
    v9 = 0uLL;
    do
    {
      v16 = v9;
      FIK::RTGameTask::GenerateAnimTarget(v7, *a2, a2[1], (uint64_t)&a1[12]);
      FIK::RTGameTask::ConvertTargetSpace(v7, a1->i32[2], a1 + 1, v10);
      if (v7[17].i8[4])
      {
        FIK::FootPlacement::GenerateRayTraceTarget((uint64_t)a1, v7, v22.f32, &v21);
        HIDWORD(a3) = v21.i32[1];
        v9 = vaddq_f32(v16, v21);
        ++v6;
      }
      else
      {
        FIK::RTGameTask::GenerateTarget((uint64_t)v7, a2, (uint64_t)&a1[12]);
        v9 = v16;
      }
      v7 += 36;
      v8 -= 576;
    }
    while (v8);
  }
  else
  {
    v6 = 0;
    v9 = 0uLL;
  }
  if (a1[34].i32[2])
  {
    v17 = v9;
    FIK::FootPlacement::GenerateFootStabilization((FIK::FootPlacement *)a1, &v21);
    HIDWORD(a3) = v21.i32[1];
    v9 = vaddq_f32(v17, v21);
  }
  if (a1[36].i32[0])
  {
    v18 = v9;
    FIK::FootPlacement::GenerateAimingBehaviour((FIK::FootPlacement *)a1);
    v9 = v18;
  }
  if (v6 >= 1)
  {
    *(float *)&a3 = (float)v6;
    v9 = vdivq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0));
  }
  v20 = v9;
  FIK::FootPlacement::AdjustAvrOffset((uint64_t)a1, &v20, &v22, a1[13].i32[3], &v21);
  v11 = a1[3].i64[1];
  if (v11)
  {
    v19 = v21;
    v12 = (float32x4_t *)a1[4].i64[1];
    v13 = &v12[36 * v11];
    do
    {
      FIK::RTGameTask::DoAlphaBlend(v12);
      if (v12[17].i8[4])
        v15 = 1;
      else
        v15 = v12[28].i8[4] == 0;
      if (!v15)
      {
        v14 = vaddq_f32(v19, v12[21]);
        v12[21] = v14;
      }
      v14.i32[0] = a1[3].i32[0];
      FIK::RTGameTask::BlendTaskTarget(v12, *(double *)v14.i64);
      FIK::RTGameTask::SetSolverTaskTarget((uint64_t)v12);
      v12 += 36;
    }
    while (v12 != v13);
  }
  if (a1[17].i32[3] == 1)
  {
    if (a1->i32[2] == 1)
      FIK::RTBalanceTask::ConvertTargetWorldToSolver(a1 + 6, a1 + 1);
    FIK::RTBalanceTask::SetSolverTaskTarget((FIK::RTBalanceTask *)&a1[6]);
  }
}

uint64_t FIK::IKRigUtils::GetParentTaskIndexByBoneIndex<FIK::GameRig>(unsigned int a1, uint64_t a2)
{
  uint64_t result;
  int v4;
  uint64_t v5;
  int *v6;
  int v7;

  result = 0xFFFFFFFFLL;
  if ((a1 & 0x80000000) == 0 && *(_DWORD *)(a2 + 208) > (signed int)a1)
  {
    v4 = *(_DWORD *)(*(_QWORD *)(a2 + 224) + ((unint64_t)a1 << 8) + 4);
    if (v4 == -1)
      return 0xFFFFFFFFLL;
    v5 = *(_QWORD *)(a2 + 176);
    if (!v5)
    {
      return 0xFFFFFFFFLL;
    }
    else
    {
      result = 0;
      v6 = (int *)(*(_QWORD *)(a2 + 192) + 48);
      while (1)
      {
        v7 = *v6;
        v6 += 60;
        if (v7 == v4)
          break;
        if (v5 == ++result)
          return 0xFFFFFFFFLL;
      }
    }
  }
  return result;
}

float32x4_t FIK::FootPlacement::GenerateRayTraceTarget@<Q0>(uint64_t a1@<X0>, float32x4_t *a2@<X1>, float *a3@<X2>, float32x4_t *a4@<X8>)
{
  float32x4_t *v8;
  float32x4_t *v9;
  float32x4_t v10;
  _OWORD *f32;
  float32x4_t v13;
  float32x4_t v14;
  float UpElement;
  float32x4_t *v16;
  float32x4_t result;
  uint64_t *v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;

  a4->i64[0] = 0;
  a4->i64[1] = 0;
  v8 = a2 + 21;
  if (a2[28].i8[5])
    v9 = a2 + 21;
  else
    v9 = a2 + 29;
  v10 = v9[1];
  v21 = *v9;
  v22 = v10;
  f32 = (_OWORD *)a2[26].f32;
  if (COERCE_FLOAT(a2[26].i32[1] & 0x7FFFFFFF) >= 0.000000001 && a2[17].i8[7] == 0)
    FIK::FootPlacement::CalculateDeltaRotation(a1, a2, *(_DWORD *)(a1 + 220), &v22);
  if (COERCE_FLOAT(*(_DWORD *)f32 & 0x7FFFFFFF) >= 0.000000001)
  {
    FIK::FootPlacement::CalculateDeltaTranslation(a1, (uint64_t)a2, *(_DWORD *)(a1 + 220), &v20);
    *a4 = v20;
    v19 = *a4;
    FIK::FootPlacement::ModifyTargetPosFromSettings(a1, (uint64_t)a2, &v19, *(_DWORD *)(a1 + 220), &v20);
    v13 = v20;
    v14 = v21;
    *a4 = v20;
    v21 = vaddq_f32(v13, v14);
    UpElement = FIK::Utils::GetUpElement(a4->f32, *(_DWORD *)(a1 + 220));
    if (UpElement <= FIK::Utils::GetUpElement(a3, *(_DWORD *)(a1 + 220)))
      v16 = (float32x4_t *)a3;
    else
      v16 = a4;
    *(float32x4_t *)a3 = *v16;
  }
  FIK::RTGameTask::SetTarget((uint64_t)a2, (uint64_t)&v21);
  if (FIK::Utils::ContainsNaN(v8))
  {
    v18 = ikinemaLogObject();
    ikinemaAssertHandler(*v18, 0, (uint64_t)"GenerateRayTraceTarget", "(!Utils::ContainsNaN(Task.Target)) Ivalid task target");
  }
  result = vmulq_n_f32(*a4, COERCE_FLOAT(*f32));
  *a4 = result;
  return result;
}

void FIK::FootPlacement::GenerateFootStabilization(FIK::FootPlacement *this@<X0>, float32x4_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t TaskInstance;
  float32x4_t *v11;
  uint64_t v12;
  float PlaneOffset;
  unsigned int v14;
  float v15;
  float v16;
  float v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;

  a2->i64[0] = 0;
  a2->i64[1] = 0;
  v3 = *((_QWORD *)this + 7);
  if (v3)
  {
    v5 = 0;
    v6 = *((_QWORD *)this + 9);
    v7 = 576 * v3;
    do
    {
      v8 = *(_DWORD *)(v6 + v5 + 564);
      if (v8 == -1)
        goto LABEL_17;
      TaskInstance = FIK::GenericSolver::GetTaskInstance(this, v8);
      if (!*(_BYTE *)(v6 + v5 + 276) || *(_BYTE *)(TaskInstance + 276) == 0)
        goto LABEL_17;
      v11 = (float32x4_t *)TaskInstance;
      v12 = v6 + v5;
      PlaneOffset = FIK::Utils::GetPlaneOffset((float *)(v6 + v5 + 400), (float *)(v6 + v5 + 384), (float *)(TaskInstance + 384));
      v14 = *((_DWORD *)this + 55);
      if (v14 >= 3)
        v15 = -PlaneOffset;
      else
        v15 = PlaneOffset;
      v20 = vsubq_f32(*(float32x4_t *)(v12 + 464), v11[29]);
      v16 = *((float *)this + 141) * fabsf(FIK::Utils::GetUpElement(v20.f32, v14));
      if (v15 <= v16)
      {
        FIK::FootPlacement::CalculateReverseFootAlpha((_BOOL8)this, (uint64_t)v11, (__int128 *)(v12 + 336), v15, -v16);
        v11[31].f32[0] = v17;
        if (v17 != 0.0)
        {
          v18 = vnegq_f32(v20);
          FIK::FootPlacement::AdjustParentTaskFS((uint64_t)this, v11, (float32x4_t *)(v12 + 336), &v18, &v19);
          goto LABEL_16;
        }
      }
      else if (*((_DWORD *)this + 138) != 1)
      {
        FIK::FootPlacement::AdjustChildTaskFS((float32x4_t *)(v6 + v5), v11 + 21, &v20, &v19);
LABEL_16:
        *a2 = vaddq_f32(v19, *a2);
      }
LABEL_17:
      v5 += 576;
    }
    while (v7 != v5);
  }
}

uint64_t FIK::FootPlacement::GenerateAimingBehaviour(FIK::FootPlacement *this)
{
  int v2;
  uint64_t TaskInstance;
  uint64_t v4;
  float32x4_t *v5;
  __n128 *v6;
  __n128 v7;
  float32x4_t v8;
  float32x4_t v9;
  int32x4_t v10;
  int8x16_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  int32x4_t v17;
  int8x16_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int32x4_t v24;
  int8x16_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int32x4_t v31;
  float32x4_t v32;
  int32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  int32x4_t v38;
  int8x16_t v39;
  float32x4_t v40;
  float32x4_t v41;
  uint64_t *v43;

  if (*((_DWORD *)this + 145) == -1
    || *((_DWORD *)this + 146) == -1
    || (v2 = *((_DWORD *)this + 147), v2 == -1)
    || *((_DWORD *)this + 148) == -1)
  {
    v43 = ikinemaLogObject();
    ikinemaAssertHandler(*v43, 0, (uint64_t)"GenerateAimingBehaviour", "(AimSettings.HandleHandIndex != -1 && AimSettings.TriggerHandIndex != -1 && AimSettings.ChestTaskIndex != -1 && AimSettings.HeadTaskIndex != -1) All indices must be valid");
    v2 = *((_DWORD *)this + 147);
  }
  TaskInstance = FIK::GenericSolver::GetTaskInstance(this, v2);
  v4 = FIK::GenericSolver::GetTaskInstance(this, *((_DWORD *)this + 145));
  v5 = (float32x4_t *)FIK::GenericSolver::GetTaskInstance(this, *((_DWORD *)this + 146));
  if (*((_BYTE *)this + 596))
  {
    v6 = (__n128 *)FIK::GenericSolver::GetTaskInstance(this, *((_DWORD *)this + 148));
    v7 = FIK::RTGameTask::SetLookAtTarget(v6, (__n128 *)this + 38);
    if (*((_DWORD *)this + 2) == 1)
      FIK::RTGameTask::ConvertTargetSpace((float32x4_t *)v6, 1, (float32x4_t *)this + 1, (float32x4_t)v7);
    FIK::RTGameTask::GenerateLookAtTarget((uint64_t)v6);
    FIK::RTGameTask::SetRotationAlpha((uint64_t)v6, *(float *)(TaskInstance + 420));
  }
  v8 = vmulq_f32(*(float32x4_t *)(TaskInstance + 480), (float32x4_t)xmmword_210802C20);
  v9 = *(float32x4_t *)(TaskInstance + 352);
  v10 = (int32x4_t)vnegq_f32(v8);
  v11 = (int8x16_t)vtrn2q_s32((int32x4_t)v8, vtrn1q_s32((int32x4_t)v8, v10));
  v12 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v8, (int8x16_t)v10, 8uLL), *(float32x2_t *)v9.f32, 1), (float32x4_t)vextq_s8(v11, v11, 8uLL), v9.f32[0]);
  v13 = (float32x4_t)vrev64q_s32((int32x4_t)v8);
  v13.i32[0] = v10.i32[1];
  v13.i32[3] = v10.i32[2];
  v14 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v8, v9, 3), v13, v9, 2), v12);
  v15 = *(float32x4_t *)(v4 + 480);
  v16 = vsubq_f32(*(float32x4_t *)(v4 + 464), *(float32x4_t *)(TaskInstance + 464));
  v17 = (int32x4_t)vnegq_f32(v15);
  v18 = (int8x16_t)vtrn2q_s32((int32x4_t)v15, vtrn1q_s32((int32x4_t)v15, v17));
  v19 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v15, (int8x16_t)v17, 8uLL), *(float32x2_t *)v14.f32, 1), (float32x4_t)vextq_s8(v18, v18, 8uLL), v14.f32[0]);
  v20 = (float32x4_t)vrev64q_s32((int32x4_t)v15);
  v20.i32[0] = v17.i32[1];
  v20.i32[3] = v17.i32[2];
  v21 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v15, v14, 3), v20, v14, 2), v19);
  *(float32x4_t *)(v4 + 336) = v16;
  *(float32x4_t *)(v4 + 352) = v21;
  if (*((_BYTE *)this + 624))
  {
    v23 = *((float32x4_t *)this + 40);
    v22 = *((float32x4_t *)this + 41);
    v24 = (int32x4_t)vnegq_f32(v22);
    v25 = (int8x16_t)vtrn2q_s32((int32x4_t)v22, vtrn1q_s32((int32x4_t)v22, v24));
    v26 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v22, (int8x16_t)v24, 8uLL), *(float32x2_t *)v21.f32, 1), (float32x4_t)vextq_s8(v25, v25, 8uLL), v21.f32[0]);
    v27 = (float32x4_t)vrev64q_s32((int32x4_t)v22);
    v27.i32[0] = v24.i32[1];
    v27.i32[3] = v24.i32[2];
    v28 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v22, v21, 3), v27, v21, 2), v26);
    v29 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v21, (int32x4_t)v21), (int8x16_t)v21, 0xCuLL);
    v30 = vnegq_f32(v21);
    v31 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v23, (int32x4_t)v23), (int8x16_t)v23, 0xCuLL), v30), v23, v29);
    v32 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v31, v31), (int8x16_t)v31, 0xCuLL);
    v33 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v32, (int32x4_t)v32), (int8x16_t)v32, 0xCuLL), v30), v32, v29);
    v34 = vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v33, v33), (int8x16_t)v33, 0xCuLL), v32, v21, 3);
    v35.i64[0] = 0x4000000040000000;
    v35.i64[1] = 0x4000000040000000;
    v36 = vaddq_f32(v16, vmlaq_f32(v23, v35, v34));
  }
  else
  {
    v36 = v5[29];
    if (*((_DWORD *)this + 144) == 2)
    {
      v28 = v5[30];
    }
    else
    {
      v37 = v5[30];
      v38 = (int32x4_t)vnegq_f32(v37);
      v39 = (int8x16_t)vtrn2q_s32((int32x4_t)v37, vtrn1q_s32((int32x4_t)v37, v38));
      v40 = vmlaq_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v37, (int8x16_t)v38, 8uLL), *(float32x2_t *)v14.f32, 1), (float32x4_t)vextq_s8(v39, v39, 8uLL), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.f32, 0));
      v41 = (float32x4_t)vrev64q_s32((int32x4_t)v37);
      v41.i32[0] = v38.i32[1];
      v36 = vaddq_f32(*(float32x4_t *)(TaskInstance + 464), vsubq_f32(v36, *(float32x4_t *)(TaskInstance + 464)));
      v41.i32[3] = v38.i32[2];
      v28 = vaddq_f32(vmlaq_f32(vmulq_laneq_f32(v37, v14, 3), v41, (float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 2)), v40);
    }
  }
  v5[21] = v36;
  v5[22] = v28;
  FIK::RTGameTask::SetAlpha(v4, *(float *)(TaskInstance + 420));
  return FIK::RTGameTask::SetAlpha((uint64_t)v5, *(float *)(TaskInstance + 420));
}

__n128 FIK::FootPlacement::AdjustAvrOffset@<Q0>(uint64_t a1@<X0>, float32x4_t *a2@<X1>, float32x4_t *a3@<X2>, int a4@<W3>, float32x4_t *a5@<X8>)
{
  float32x4_t v8;
  float32x4_t v9;
  float v10;
  float32x4_t v11;
  float32x4_t v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  __n128 result;
  float32x4_t v17;
  float32x4_t v18;

  v8 = *a3;
  v9 = *a2;
  v10 = *(float *)(a1 + 672);
  if (fabsf(v10) >= 0.000000001)
  {
    v17 = *a3;
    v18 = *a2;
    FIK::Utils::AddToUpElement(a2->f32, a4, v10);
    v8 = v17;
    v9 = v18;
  }
  v11 = vmulq_f32(v8, v8);
  v11.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2), vaddq_f32(v11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1))).f32[0]);
  v12 = vmulq_f32(v9, v9);
  v13 = vabds_f32(v11.f32[0], sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2), vaddq_f32(v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1))).f32[0])/ v11.f32[0]);
  v14 = 548;
  if (*(_BYTE *)(a1 + 677))
    v15 = 548;
  else
    v15 = 544;
  if (*(_BYTE *)(a1 + 677))
    v14 = 544;
  if (v13 >= 0.05)
    v14 = v15;
  *a2 = vmulq_n_f32(*a2, *(float *)(a1 + v14));
  result = *(__n128 *)a2;
  *a5 = *a2;
  return result;
}

float32x4_t FIK::FootPlacement::AdjustChildTaskFS@<Q0>(float32x4_t *a1@<X1>, float32x4_t *a2@<X2>, float32x4_t *a3@<X3>, float32x4_t *a4@<X8>)
{
  float32x4_t v4;
  float32x4_t v5;
  int32x4_t v6;
  int8x16_t v7;
  float32x4_t v8;
  float32x4_t v9;
  int8x16_t v10;
  float32x2_t v11;
  float32x4_t v12;
  unsigned __int32 v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x4_t v16;
  int32x4_t v17;
  int8x16_t v18;
  float32x4_t v19;
  float32x4_t result;

  v4 = vmulq_f32(a1[30], (float32x4_t)xmmword_210802C20);
  v5 = a1[22];
  v6 = (int32x4_t)vnegq_f32(v5);
  v7 = (int8x16_t)vtrn2q_s32((int32x4_t)v5, vtrn1q_s32((int32x4_t)v5, v6));
  v8 = (float32x4_t)vrev64q_s32((int32x4_t)v5);
  v8.i32[0] = v6.i32[1];
  v8.i32[3] = v6.i32[2];
  v9 = vmulq_f32(vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v5, v4, 3), v8, v4, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v5, (int8x16_t)v6, 8uLL), *(float32x2_t *)v4.f32, 1), (float32x4_t)vextq_s8(v7, v7, 8uLL), v4.f32[0])), (float32x4_t)xmmword_210802C20);
  v10 = (int8x16_t)vmulq_f32(v9, v9);
  v11 = vadd_f32(*(float32x2_t *)v10.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL));
  if (vaddv_f32(v11) == 0.0)
  {
    v12 = (float32x4_t)xmmword_210802BA0;
  }
  else
  {
    v13 = vadd_f32(v11, (float32x2_t)vdup_lane_s32((int32x2_t)v11, 1)).u32[0];
    v14 = vrsqrte_f32((float32x2_t)v13);
    v15 = vmul_f32(v14, vrsqrts_f32((float32x2_t)v13, vmul_f32(v14, v14)));
    v12 = vmulq_n_f32(v9, vmul_f32(v15, vrsqrts_f32((float32x2_t)v13, vmul_f32(v15, v15))).f32[0]);
  }
  v16 = vaddq_f32(*a2, *a3);
  *a4 = vsubq_f32(v16, a1[21]);
  v17 = (int32x4_t)vnegq_f32(v12);
  v18 = (int8x16_t)vtrn2q_s32((int32x4_t)v12, vtrn1q_s32((int32x4_t)v12, v17));
  v19 = (float32x4_t)vrev64q_s32((int32x4_t)v12);
  v19.i32[0] = v17.i32[1];
  v19.i32[3] = v17.i32[2];
  result = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v12, v5, 3), v19, v5, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v12, (int8x16_t)v17, 8uLL), *(float32x2_t *)v5.f32, 1), (float32x4_t)vextq_s8(v18, v18, 8uLL), v5.f32[0]));
  a1[21] = v16;
  a1[22] = result;
  return result;
}

BOOL FIK::FootPlacement::CalculateReverseFootAlpha(_BOOL8 result, uint64_t a2, __int128 *a3, float a4, float a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (a4 >= a5)
  {
    v13 = v8;
    v14 = v7;
    v15 = v5;
    v16 = v6;
    v9 = *(_DWORD *)(result + 220);
    v10 = *a3;
    v11 = *(_OWORD *)(a2 + 336);
    v12 = v10;
    return FIK::Utils::PointAIsHigherThanB((float *)&v12, (float *)&v11, v9);
  }
  return result;
}

uint64_t FIK::FootPlacement::AdjustParentTaskFS@<X0>(uint64_t a1@<X0>, float32x4_t *a2@<X1>, float32x4_t *a3@<X2>, float32x4_t *a4@<X3>, float32x4_t *a5@<X8>)
{
  float32x4_t v10;
  float32x4_t v11;
  int32x4_t v12;
  int8x16_t v13;
  float32x4_t v14;
  float32x4_t v15;
  int32x4_t v16;
  int8x16_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float v24;
  float v25;
  float32x4_t v26;
  int8x16_t v27;
  float32x4_t v28;
  int8x16_t v29;
  float v30;
  float v31;
  BOOL v32;
  float v33;
  float v34;
  float32x2_t v35;
  float32x2_t v36;
  float v37;
  float32x4_t v38;
  float v39;
  float v40;
  float v41;
  float32x4_t v42;
  int8x16_t v43;
  float32x2_t v44;
  float32x4_t v45;
  unsigned __int32 v46;
  float32x2_t v47;
  float32x2_t v48;
  int8x16_t v49;
  float32x2_t v50;
  float32x4_t v51;
  unsigned __int32 v52;
  float32x2_t v53;
  float32x2_t v54;
  float32x4_t *v55;
  float v56;
  float32x4_t v57;
  float32x4_t v58;
  uint64_t result;
  uint64_t *v60;
  float32x4_t v61;
  float v62;
  float v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;

  v10 = vmulq_f32(a2[30], (float32x4_t)xmmword_210802C20);
  v11 = a2[22];
  v12 = (int32x4_t)vnegq_f32(v11);
  v13 = (int8x16_t)vtrn2q_s32((int32x4_t)v11, vtrn1q_s32((int32x4_t)v11, v12));
  v14 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v11, (int8x16_t)v12, 8uLL), *(float32x2_t *)v10.f32, 1), (float32x4_t)vextq_s8(v13, v13, 8uLL), v10.f32[0]);
  v15 = (float32x4_t)vrev64q_s32((int32x4_t)v11);
  v15.i32[0] = v12.i32[1];
  v15.i32[3] = v12.i32[2];
  v67 = vmulq_f32(vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v11, v10, 3), v15, v10, 2), v14), (float32x4_t)xmmword_210802C20);
  v16 = (int32x4_t)vnegq_f32(v67);
  v17 = (int8x16_t)vtrn2q_s32((int32x4_t)v67, vtrn1q_s32((int32x4_t)v67, v16));
  v18 = (float32x4_t)vrev64q_s32((int32x4_t)v67);
  v18.i32[0] = v16.i32[1];
  v18.i32[3] = v16.i32[2];
  v19 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v67, v11, 3), v18, v11, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v67, (int8x16_t)v16, 8uLL), *(float32x2_t *)v11.f32, 1), (float32x4_t)vextq_s8(v17, v17, 8uLL), v11.f32[0]));
  v20 = a2[31].f32[0];
  v21 = vmulq_f32(v11, v19);
  v22 = (float32x4_t)vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL);
  *(float32x2_t *)v21.f32 = vadd_f32(*(float32x2_t *)v21.f32, *(float32x2_t *)v22.f32);
  v21.f32[0] = vaddv_f32(*(float32x2_t *)v21.f32);
  v22.i32[0] = 0;
  v23 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v21, v22)), 0), (int8x16_t)vnegq_f32(v19), (int8x16_t)v19);
  v24 = 1.0;
  v25 = 1.0 - v20;
  v26 = vsubq_f32(v11, v23);
  v27 = (int8x16_t)vmulq_f32(v26, v26);
  v64 = v23;
  v65 = v11;
  v28 = vaddq_f32(v11, v23);
  v29 = (int8x16_t)vmulq_f32(v28, v28);
  v30 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v27.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v29.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL)))));
  v31 = v30 + v30;
  v32 = (float)(v30 + v30) == 0.0;
  v33 = 1.0;
  if (!v32)
    v33 = sinf(v31) / v31;
  v34 = v33;
  v35 = vrecpe_f32((float32x2_t)LODWORD(v33));
  v36 = vmul_f32(v35, vrecps_f32((float32x2_t)LODWORD(v34), v35));
  LODWORD(v37) = vmul_f32(v36, vrecps_f32((float32x2_t)LODWORD(v34), v36)).u32[0];
  if ((float)(v25 * v31) != 0.0)
  {
    v62 = v37;
    v36.f32[0] = sinf(v25 * v31);
    v37 = v62;
    v24 = v36.f32[0] / (float)(v25 * v31);
  }
  v36.f32[0] = v25 * (float)(v37 * v24);
  v38 = (float32x4_t)vdupq_lane_s32((int32x2_t)v36, 0);
  v39 = v20 * v31;
  v40 = 1.0;
  if (v39 != 0.0)
  {
    v61 = v38;
    v63 = v37;
    v41 = sinf(v39);
    v38 = v61;
    v37 = v63;
    v40 = v41 / v39;
  }
  v42 = vmlaq_f32(vmulq_n_f32(v64, v20 * (float)(v37 * v40)), v65, v38);
  v43 = (int8x16_t)vmulq_f32(v42, v42);
  v44 = vadd_f32(*(float32x2_t *)v43.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v43, v43, 8uLL));
  v45 = (float32x4_t)xmmword_210802BA0;
  if (vaddv_f32(v44) != 0.0)
  {
    v46 = vadd_f32(v44, (float32x2_t)vdup_lane_s32((int32x2_t)v44, 1)).u32[0];
    v47 = vrsqrte_f32((float32x2_t)v46);
    v48 = vmul_f32(v47, vrsqrts_f32((float32x2_t)v46, vmul_f32(v47, v47)));
    v45 = vmulq_n_f32(v42, vmul_f32(v48, vrsqrts_f32((float32x2_t)v46, vmul_f32(v48, v48))).f32[0]);
  }
  v66 = v45;
  FIK::Utils::SetUpElement(v67.f32, *(_DWORD *)(a1 + 220), 0.0);
  v49 = (int8x16_t)vmulq_f32(v67, v67);
  v50 = vadd_f32(*(float32x2_t *)v49.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v49, v49, 8uLL));
  v51 = (float32x4_t)xmmword_210802BA0;
  if (vaddv_f32(v50) != 0.0)
  {
    v52 = vadd_f32(v50, (float32x2_t)vdup_lane_s32((int32x2_t)v50, 1)).u32[0];
    v53 = vrsqrte_f32((float32x2_t)v52);
    v54 = vmul_f32(v53, vrsqrts_f32((float32x2_t)v52, vmul_f32(v53, v53)));
    v51 = vmulq_n_f32(v67, vmul_f32(v54, vrsqrts_f32((float32x2_t)v52, vmul_f32(v54, v54))).f32[0]);
  }
  v55 = a2 + 21;
  v67 = v51;
  v56 = *(float *)(a1 + 556) * a2[31].f32[0];
  if (v56 <= 0.0)
  {
    v58 = *v55;
    v57 = *v55;
  }
  else
  {
    v57 = vaddq_f32(*a3, *a4);
    v58 = *v55;
    if (v56 < 1.0)
      v57 = vaddq_f32(v58, vmulq_n_f32(vsubq_f32(v57, v58), v56));
  }
  *a5 = vsubq_f32(v57, v58);
  a2[21] = v57;
  a2[22] = v66;
  result = FIK::Utils::ContainsNaN(v55);
  if ((_DWORD)result)
  {
    v60 = ikinemaLogObject();
    return ikinemaAssertHandler(*v60, 0, (uint64_t)"AdjustParentTaskFS", "(!Utils::ContainsNaN(ParentTask.Target)) Invalid parent task target");
  }
  return result;
}

uint64_t FIK::FootPlacement::CalculateDeltaRotation@<X0>(uint64_t result@<X0>, float32x4_t *a2@<X1>, int a3@<W2>, _OWORD *a4@<X8>)
{
  float32x4_t v6;
  float v7;
  BOOL v8;
  float v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float v13;
  float v14;
  float32x4_t v15;
  float32x4_t v16;
  float v17;
  float32x4_t v18;
  double v19;
  float32x4_t v20;
  int32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float v24;
  float32x4_t v25;
  float32x4_t v26;
  float v27;
  int32x4_t v28;
  float32x4_t v29;
  int8x16_t v30;
  float32x2_t v31;
  unsigned __int32 v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  int32x4_t v38;
  float32x4_t v39;
  int32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  int32x4_t v47;
  float32x4_t v48;
  int32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  int32x4_t v52;
  float32x4_t v53;
  int32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float v57;
  float v58;
  float32x4_t v59;
  float32x4_t v60;
  float v61;
  float32x4_t v62;
  float32x4_t v63;
  float v64;
  float32x4_t v65;
  double v66;
  float32x4_t v67;
  int32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float v71;
  float32x4_t v72;
  float32x4_t v73;
  float v74;
  int32x4_t v75;
  float32x4_t v76;
  int8x16_t v77;
  float32x2_t v78;
  unsigned __int32 v79;
  float32x2_t v80;
  float32x2_t v81;
  float v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float v86;
  float v87;
  float32x4_t v88;
  int8x16_t v89;
  float32x4_t v90;
  int8x16_t v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float32x2_t v96;
  float32x2_t v97;
  float v98;
  float32x4_t v99;
  float v100;
  float v101;
  float v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  int8x16_t v106;
  float32x2_t v107;
  unsigned __int32 v108;
  float32x2_t v109;
  float32x2_t v110;
  int32x4_t v111;
  int8x16_t v112;
  float32x4_t v113;
  float32x4_t v114;
  uint64_t *v115;
  float32x4_t v116;
  float v117;
  float v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;

  if (*(_BYTE *)(result + 676))
  {
    *a4 = a2[30];
  }
  else
  {
    v121 = 0uLL;
    FIK::Utils::SetUpElement(v121.f32, a3, 1.0);
    v6 = vmulq_f32(v121, v121);
    v6.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v6, 2), vaddq_f32(v6, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v6.f32, 1))).f32[0]);
    v7 = 1.0 / v6.f32[0];
    v8 = v6.f32[0] == 0.0;
    v9 = 0.0;
    if (v8)
      v7 = 0.0;
    v10 = vmulq_n_f32(v121, v7);
    v11 = a2[25];
    v12 = vmulq_f32(v11, v11);
    v13 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2), vaddq_f32(v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1))).f32[0]);
    if (v13 == 0.0)
      v14 = 0.0;
    else
      v14 = 1.0 / v13;
    v15 = vmulq_n_f32(v11, v14);
    v16 = vmulq_f32(v10, v15);
    v17 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1))).f32[0];
    v18 = (float32x4_t)xmmword_210802BA0;
    if (v17 < 1.0)
    {
      v19 = v17;
      if (v17 >= -0.999999)
      {
        *(float *)&v19 = sqrtf((float)(v17 + 1.0) + (float)(v17 + 1.0));
        v28 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v15, (int32x4_t)v15), (int8x16_t)v15, 0xCuLL), vnegq_f32(v10)), v15, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v10, (int32x4_t)v10), (int8x16_t)v10, 0xCuLL));
        v29 = vdivq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v28, v28), (int8x16_t)v28, 0xCuLL), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v19, 0));
        v29.f32[3] = *(float *)&v19 * 0.5;
        v30 = (int8x16_t)vmulq_f32(v29, v29);
        v31 = vadd_f32(*(float32x2_t *)v30.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL));
        v18 = (float32x4_t)xmmword_210802BA0;
        if (vaddv_f32(v31) != 0.0)
        {
          v32 = vadd_f32(v31, (float32x2_t)vdup_lane_s32((int32x2_t)v31, 1)).u32[0];
          v33 = vrsqrte_f32((float32x2_t)v32);
          v34 = vmul_f32(v33, vrsqrts_f32((float32x2_t)v32, vmul_f32(v33, v33)));
          v18 = vmulq_n_f32(v29, vmul_f32(v34, vrsqrts_f32((float32x2_t)v32, vmul_f32(v34, v34))).f32[0]);
        }
      }
      else
      {
        v20 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v10, (int32x4_t)v10), (int8x16_t)v10, 0xCuLL);
        v21 = (int32x4_t)vmlaq_f32(vmulq_f32(v20, (float32x4_t)xmmword_210802BB0), (float32x4_t)xmmword_210802BC0, v10);
        v22 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v21, v21), (int8x16_t)v21, 0xCuLL);
        v22.i32[3] = 0;
        v23 = vmulq_f32(v22, v22);
        v24 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v23, 2), vaddq_f32(v23, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v23.f32, 1))).f32[0]);
        if (fabsf(v24) < 0.000000001)
        {
          v25 = vmlaq_f32(vmulq_f32(v20, (float32x4_t)xmmword_210802BD0), (float32x4_t)xmmword_210802BE0, v10);
          v26 = vmulq_f32(v25, v25);
          v22 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v25, (int32x4_t)v25), (int8x16_t)v25, 0xCuLL);
          v24 = sqrtf(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 2), v26)).f32[0]);
        }
        v27 = 1.0 / v24;
        if (v24 == 0.0)
          v27 = 0.0;
        v18 = vmulq_n_f32(v22, v27);
        v18.i32[3] = 0;
      }
    }
    v35 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v18, (int32x4_t)v18), (int8x16_t)v18, 0xCuLL);
    v36 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v121, (int32x4_t)v121), (int8x16_t)v121, 0xCuLL);
    v37 = vnegq_f32(v18);
    v38 = (int32x4_t)vmlaq_f32(vmulq_f32(v36, v37), v121, v35);
    v39 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v38, v38), (int8x16_t)v38, 0xCuLL);
    v40 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v39, (int32x4_t)v39), (int8x16_t)v39, 0xCuLL), v37), v39, v35);
    v41 = vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v40, v40), (int8x16_t)v40, 0xCuLL), v39, v18, 3);
    v42.i64[0] = 0x4000000040000000;
    v42.i64[1] = 0x4000000040000000;
    v43 = vmlaq_f32(v121, v42, v41);
    v120 = a2[30];
    v44 = vmulq_f32(v120, (float32x4_t)xmmword_210802C20);
    v45 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v44, (int32x4_t)v44), (int8x16_t)v44, 0xCuLL);
    v46 = vnegq_f32(v44);
    v47 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v43, (int32x4_t)v43), (int8x16_t)v43, 0xCuLL), v46), v43, v45);
    v48 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v47, v47), (int8x16_t)v47, 0xCuLL);
    v49 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v48, (int32x4_t)v48), (int8x16_t)v48, 0xCuLL), v46), v48, v45);
    v50 = vmlaq_f32(v43, v42, vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v49, v49), (int8x16_t)v49, 0xCuLL), v48, v44, 3));
    v51 = v50;
    v51.i32[3] = 0;
    v52 = (int32x4_t)vmlaq_f32(vmulq_f32(v36, v46), v121, v45);
    v53 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v52, v52), (int8x16_t)v52, 0xCuLL);
    v54 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v53, (int32x4_t)v53), (int8x16_t)v53, 0xCuLL), v46), v53, v45);
    v55 = vmlaq_f32(v121, v42, vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v54, v54), (int8x16_t)v54, 0xCuLL), v53, v44, 3));
    v121 = v55;
    v56 = vmulq_f32(v55, v55);
    v57 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v56, 2), vaddq_f32(v56, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v56.f32, 1))).f32[0]);
    if (v57 == 0.0)
      v58 = 0.0;
    else
      v58 = 1.0 / v57;
    v59 = vmulq_n_f32(v55, v58);
    v60 = vmulq_f32(v51, v51);
    v61 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v60, 2), vaddq_f32(v60, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v60.f32, 1))).f32[0]);
    if (v61 != 0.0)
      v9 = 1.0 / v61;
    v62 = vmulq_n_f32(v50, v9);
    v63 = vmulq_f32(v59, v62);
    v64 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v63, 2), vaddq_f32(v63, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v63.f32, 1))).f32[0];
    v65 = (float32x4_t)xmmword_210802BA0;
    if (v64 < 1.0)
    {
      v66 = v64;
      if (v64 >= -0.999999)
      {
        *(float *)&v66 = sqrtf((float)(v64 + 1.0) + (float)(v64 + 1.0));
        v75 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v62, (int32x4_t)v62), (int8x16_t)v62, 0xCuLL), vnegq_f32(v59)), v62, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v59, (int32x4_t)v59), (int8x16_t)v59, 0xCuLL));
        v76 = vdivq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v75, v75), (int8x16_t)v75, 0xCuLL), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v66, 0));
        v76.f32[3] = *(float *)&v66 * 0.5;
        v77 = (int8x16_t)vmulq_f32(v76, v76);
        v78 = vadd_f32(*(float32x2_t *)v77.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v77, v77, 8uLL));
        v65 = (float32x4_t)xmmword_210802BA0;
        if (vaddv_f32(v78) != 0.0)
        {
          v79 = vadd_f32(v78, (float32x2_t)vdup_lane_s32((int32x2_t)v78, 1)).u32[0];
          v80 = vrsqrte_f32((float32x2_t)v79);
          v81 = vmul_f32(v80, vrsqrts_f32((float32x2_t)v79, vmul_f32(v80, v80)));
          v65 = vmulq_n_f32(v76, vmul_f32(v81, vrsqrts_f32((float32x2_t)v79, vmul_f32(v81, v81))).f32[0]);
        }
      }
      else
      {
        v67 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v59, (int32x4_t)v59), (int8x16_t)v59, 0xCuLL);
        v68 = (int32x4_t)vmlaq_f32(vmulq_f32(v67, (float32x4_t)xmmword_210802BB0), (float32x4_t)xmmword_210802BC0, v59);
        v69 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v68, v68), (int8x16_t)v68, 0xCuLL);
        v69.i32[3] = 0;
        v70 = vmulq_f32(v69, v69);
        v71 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v70, 2), vaddq_f32(v70, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v70.f32, 1))).f32[0]);
        if (fabsf(v71) < 0.000000001)
        {
          v72 = vmlaq_f32(vmulq_f32(v67, (float32x4_t)xmmword_210802BD0), (float32x4_t)xmmword_210802BE0, v59);
          v73 = vmulq_f32(v72, v72);
          v69 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v72, (int32x4_t)v72), (int8x16_t)v72, 0xCuLL);
          v71 = sqrtf(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v73.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v73, 2), v73)).f32[0]);
        }
        v74 = 1.0 / v71;
        if (v71 == 0.0)
          v74 = 0.0;
        v65 = vmulq_n_f32(v69, v74);
        v65.i32[3] = 0;
      }
    }
    v82 = a2[26].f32[1];
    v83 = vmulq_f32(v65, (float32x4_t)xmmword_210802BA0);
    v84 = (float32x4_t)vextq_s8((int8x16_t)v83, (int8x16_t)v83, 8uLL);
    *(float32x2_t *)v83.f32 = vadd_f32(*(float32x2_t *)v83.f32, *(float32x2_t *)v84.f32);
    v83.f32[0] = vaddv_f32(*(float32x2_t *)v83.f32);
    v84.i32[0] = 0;
    v85 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v83, v84)), 0), (int8x16_t)vnegq_f32(v65), (int8x16_t)v65);
    v86 = 1.0;
    v87 = 1.0 - v82;
    v88 = vsubq_f32((float32x4_t)xmmword_210802BA0, v85);
    v89 = (int8x16_t)vmulq_f32(v88, v88);
    v119 = v85;
    v90 = vaddq_f32(v85, (float32x4_t)xmmword_210802BA0);
    v91 = (int8x16_t)vmulq_f32(v90, v90);
    v92 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v89.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v89, v89, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v91.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v91, v91, 8uLL)))));
    v93 = v92 + v92;
    v8 = (float)(v92 + v92) == 0.0;
    v94 = 1.0;
    if (!v8)
      v94 = sinf(v93) / v93;
    v95 = v94;
    v96 = vrecpe_f32((float32x2_t)LODWORD(v94));
    v97 = vmul_f32(v96, vrecps_f32((float32x2_t)LODWORD(v95), v96));
    LODWORD(v98) = vmul_f32(v97, vrecps_f32((float32x2_t)LODWORD(v95), v97)).u32[0];
    if ((float)(v87 * v93) != 0.0)
    {
      v117 = v98;
      v97.f32[0] = sinf(v87 * v93);
      v98 = v117;
      v86 = v97.f32[0] / (float)(v87 * v93);
    }
    v97.f32[0] = v87 * (float)(v98 * v86);
    v99 = (float32x4_t)vdupq_lane_s32((int32x2_t)v97, 0);
    v100 = v82 * v93;
    v101 = 1.0;
    if (v100 != 0.0)
    {
      v116 = v99;
      v118 = v98;
      v102 = sinf(v100);
      v99 = v116;
      v98 = v118;
      v101 = v102 / v100;
    }
    v103 = vmulq_n_f32(v119, v82 * (float)(v98 * v101));
    v104 = (float32x4_t)xmmword_210802BA0;
    v105 = vmlaq_f32(v103, (float32x4_t)xmmword_210802BA0, v99);
    v106 = (int8x16_t)vmulq_f32(v105, v105);
    v107 = vadd_f32(*(float32x2_t *)v106.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v106, v106, 8uLL));
    if (vaddv_f32(v107) != 0.0)
    {
      v108 = vadd_f32(v107, (float32x2_t)vdup_lane_s32((int32x2_t)v107, 1)).u32[0];
      v109 = vrsqrte_f32((float32x2_t)v108);
      v110 = vmul_f32(v109, vrsqrts_f32((float32x2_t)v108, vmul_f32(v109, v109)));
      v104 = vmulq_n_f32(v105, vmul_f32(v110, vrsqrts_f32((float32x2_t)v108, vmul_f32(v110, v110))).f32[0]);
    }
    v111 = (int32x4_t)vnegq_f32(v104);
    v112 = (int8x16_t)vtrn2q_s32((int32x4_t)v104, vtrn1q_s32((int32x4_t)v104, v111));
    v113 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v104, (int8x16_t)v111, 8uLL), *(float32x2_t *)v120.f32, 1), (float32x4_t)vextq_s8(v112, v112, 8uLL), v120.f32[0]);
    v114 = (float32x4_t)vrev64q_s32((int32x4_t)v104);
    v114.i32[0] = v111.i32[1];
    v114.i32[3] = v111.i32[2];
    *a4 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v104, v120, 3), v114, v120, 2), v113);
    result = FIK::Utils::ContainsNaN();
    if ((_DWORD)result)
    {
      v115 = ikinemaLogObject();
      return ikinemaAssertHandler(*v115, 0, (uint64_t)"CalculateDeltaRotation", "(!Utils::ContainsNaN(DeltaQ)) Invalid delta rotation");
    }
  }
  return result;
}

float32x4_t FIK::FootPlacement::CalculateDeltaTranslation@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, float32x4_t *a4@<X8>)
{
  __int128 v8;
  float32x4_t result;
  __int128 v10;
  float32x4_t v11;
  __int128 v12;
  float32x4_t v13[2];
  _OWORD v14[2];
  float32x4_t v15;

  v15 = (float32x4_t)xmmword_2108040F0;
  FIK::Utils::SetUpElement(v15.f32, a3, 0.0);
  *a4 = *(float32x4_t *)(a2 + 464);
  v11 = vmulq_f32(*a4, v15);
  *a4 = v11;
  v10 = *(_OWORD *)(a2 + 384);
  if (FIK::RTGameTask::ShouldBlendWithMaxVel((FIK::RTGameTask *)a2))
  {
    v14[0] = v10;
    v14[1] = xmmword_210802BA0;
    v13[0] = *(float32x4_t *)(a2 + 544);
    v13[1] = (float32x4_t)xmmword_210802BA0;
    FIK::TargetSmoothing::smooth((_DWORD *)(a2 + 424), v14, v13, *(_DWORD *)(a1 + 220), &v12, COERCE_DOUBLE((unint64_t)*(_DWORD *)(a1 + 48)));
    v8 = v12;
  }
  else
  {
    v8 = v10;
  }
  switch(a3)
  {
    case 0:
    case 3:
      a4->i32[0] = v8;
      break;
    case 1:
    case 4:
      a4->i32[1] = DWORD1(v8);
      break;
    case 2:
    case 5:
      a4->i32[2] = DWORD2(v8);
      break;
    default:
      break;
  }
  result = vsubq_f32(*a4, v11);
  *a4 = result;
  return result;
}

__n128 FIK::FootPlacement::ModifyTargetPosFromSettings@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, float32x4_t *a3@<X2>, unsigned int a4@<W3>, float32x4_t *a5@<X8>)
{
  float v10;
  float v11;
  float32x4_t v12;
  __n128 result;
  float32x4_t v14;
  float32x4_t v15;

  if (*(_BYTE *)(a1 + 676))
    FIK::Utils::SetUpElement(a3->f32, a4, 0.0);
  if (*(_DWORD *)(a1 + 536))
  {
    v14 = *a3;
    FIK::FootPlacement::LimitLegExtension(a1, v14.f32, a4, &v15);
    *a3 = v15;
  }
  v10 = *(float *)(a2 + 284);
  if (fabsf(v10) >= 0.000000001)
  {
    v15 = 0uLL;
    FIK::Utils::SetUpElement(v15.f32, a4, v10);
    *a3 = vaddq_f32(v15, *a3);
  }
  v11 = *(float *)(a2 + 416);
  if (v11 < 1.0)
  {
    v12 = 0uLL;
    if (v11 > 0.0)
    {
      v12 = *a3;
      if (v11 < 1.0)
        v12 = vaddq_f32(vmulq_n_f32(v12, v11), (float32x4_t)0);
    }
    *a3 = v12;
  }
  result = *(__n128 *)a3;
  *a5 = *a3;
  return result;
}

__n128 FIK::FootPlacement::LimitLegExtension@<Q0>(uint64_t a1@<X0>, float *a2@<X1>, unsigned int a3@<W2>, _OWORD *a4@<X8>)
{
  float v8;
  float UpElement;
  int v10;
  __n128 result;

  v8 = *(float *)(a1 + 540) * *(float *)(a1 + 544);
  UpElement = FIK::Utils::GetUpElement(a2, a3);
  if (FIK::Utils::PointAIsHigherThanB(a3, v8, UpElement))
  {
    v10 = *(_DWORD *)(a1 + 536);
    if (v10 == 2)
    {
      FIK::Utils::SetUpElementAbs(a2, a3, v8);
    }
    else if (v10 == 1)
    {
      FIK::Utils::SetUpElement(a2, a3, 0.0);
    }
  }
  result = *(__n128 *)a2;
  *a4 = *(_OWORD *)a2;
  return result;
}

void FIK::FootPlacement::~FootPlacement(FIK::FootPlacement *this)
{
  FIK::GenericSolver::~GenericSolver(this);
  JUMPOUT(0x212BCAFB4);
}

uint64_t FIK::RTGameTask::RTGameTask(uint64_t a1, const IKString *a2)
{
  uint64_t *v4;
  void (***v5)(FIK::CrtAllocator *__hidden);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  IKString::IKString((IKString *)&v7, a2);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_24CA6C6F8;
  v4 = IKString::IKString((uint64_t *)(a1 + 24), &v7, v9);
  if (v8)
  {
    v4 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v9 + 24))(v9, v7, 0, 8);
    v7 = 0;
    v8 = 0;
  }
  v5 = FIK::defaultAllocator((FIK *)v4);
  FIK::GameTask::GameTask((FIK::RigTask *)(a1 + 48), (uint64_t)a2, (FIK::Allocator *)v5);
  *(_QWORD *)a1 = &off_24CA6AB50;
  *(_BYTE *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = xmmword_210802BA0;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = xmmword_210802BA0;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 412) = 0u;
  *(_DWORD *)(a1 + 428) = 1103626240;
  *(_QWORD *)(a1 + 432) = 0;
  *(_BYTE *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 444) = 0x3F00000000000000;
  *(_WORD *)(a1 + 452) = 1;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = xmmword_210802BA0;
  *(_DWORD *)(a1 + 496) = 0;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = xmmword_210802BA0;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_QWORD *)(a1 + 560) = 0xFFFFFFFF00000000;
  return a1;
}

FIK::RTGameTask *FIK::RTGameTask::RTGameTask(FIK::RTGameTask *this, const FIK::RTGameTask *a2, FIK::Allocator *a3)
{
  __int128 v6;

  *(_QWORD *)this = &unk_24CA6C6F8;
  *(_OWORD *)((char *)this + 8) = *(_OWORD *)((char *)a2 + 8);
  IKString::IKString((FIK::RTGameTask *)((char *)this + 24), (const FIK::RTGameTask *)((char *)a2 + 24));
  FIK::GameTask::GameTask((FIK::RTGameTask *)((char *)this + 48), (uint64_t)a2 + 48, a3);
  *(_QWORD *)this = &off_24CA6AB50;
  *((_BYTE *)this + 288) = 0;
  *((_QWORD *)this + 38) = 0;
  *((_QWORD *)this + 39) = 0;
  *((_OWORD *)this + 20) = xmmword_210802BA0;
  *((_OWORD *)this + 21) = *((_OWORD *)a2 + 21);
  *((_OWORD *)this + 22) = *((_OWORD *)a2 + 22);
  *((_OWORD *)this + 23) = *((_OWORD *)a2 + 23);
  *((_OWORD *)this + 24) = *((_OWORD *)a2 + 24);
  *((_OWORD *)this + 25) = *((_OWORD *)a2 + 25);
  *((_QWORD *)this + 52) = *((_QWORD *)a2 + 52);
  v6 = *(_OWORD *)((char *)a2 + 424);
  *((_DWORD *)this + 110) = *((_DWORD *)a2 + 110);
  *(_OWORD *)((char *)this + 424) = v6;
  *(_QWORD *)((char *)this + 444) = *(_QWORD *)((char *)a2 + 444);
  *((_WORD *)this + 226) = *((_WORD *)a2 + 226);
  *((_OWORD *)this + 29) = *((_OWORD *)a2 + 29);
  *((_OWORD *)this + 30) = *((_OWORD *)a2 + 30);
  *((_DWORD *)this + 124) = *((_DWORD *)a2 + 124);
  *((_OWORD *)this + 32) = *((_OWORD *)a2 + 32);
  *((_OWORD *)this + 33) = *((_OWORD *)a2 + 33);
  *((_OWORD *)this + 34) = *((_OWORD *)a2 + 34);
  *((_DWORD *)this + 140) = *((_DWORD *)a2 + 140);
  *((_DWORD *)this + 141) = *((_DWORD *)a2 + 141);
  return this;
}

uint64_t FIK::RTGameTask::RTGameTask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;

  *(_QWORD *)a1 = &unk_24CA6C6F8;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  IKString::IKString((uint64_t *)(a1 + 24), (uint64_t *)(a2 + 24), *(_QWORD *)(a2 + 40));
  FIK::GameTask::GameTask(a1 + 48, a2 + 48, a3);
  *(_QWORD *)a1 = &off_24CA6AB50;
  *(_BYTE *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_OWORD *)(a1 + 320) = xmmword_210802BA0;
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
  *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
  v6 = *(_OWORD *)(a2 + 424);
  *(_DWORD *)(a1 + 440) = *(_DWORD *)(a2 + 440);
  *(_OWORD *)(a1 + 424) = v6;
  *(_QWORD *)(a1 + 444) = *(_QWORD *)(a2 + 444);
  *(_WORD *)(a1 + 452) = *(_WORD *)(a2 + 452);
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
  *(_DWORD *)(a1 + 496) = *(_DWORD *)(a2 + 496);
  *(_OWORD *)(a1 + 512) = *(_OWORD *)(a2 + 512);
  *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
  *(_OWORD *)(a1 + 544) = *(_OWORD *)(a2 + 544);
  *(_DWORD *)(a1 + 560) = *(_DWORD *)(a2 + 560);
  *(_DWORD *)(a1 + 564) = *(_DWORD *)(a2 + 564);
  return a1;
}

float FIK::GameTask::GameTask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  float result;

  v4 = FIK::RigTask::RigTask(a1, a2, a3);
  *(_OWORD *)(v4 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(v4 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(v4 + 208) = *(_OWORD *)(a2 + 208);
  *(_DWORD *)(v4 + 224) = *(_DWORD *)(a2 + 224);
  *(_DWORD *)(v4 + 228) = *(_DWORD *)(a2 + 228);
  *(_WORD *)(v4 + 232) = *(_WORD *)(a2 + 232);
  result = *(float *)(a2 + 236);
  *(float *)(v4 + 236) = result;
  return result;
}

__n128 FIK::RTGameTask::setTarget(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_OWORD *)(a1 + 336) = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  *(__n128 *)(a1 + 352) = result;
  return result;
}

__n128 FIK::RTGameTask::SetTarget(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_OWORD *)(a1 + 336) = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  *(__n128 *)(a1 + 352) = result;
  return result;
}

__n128 FIK::RTGameTask::setPositionTarget(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[21] = *a2;
  return result;
}

__n128 FIK::RTGameTask::SetPositionTarget(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[21] = *a2;
  return result;
}

__n128 FIK::RTGameTask::setOrientationTarget(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[22] = *a2;
  return result;
}

__n128 FIK::RTGameTask::SetRotationTarget(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[22] = *a2;
  return result;
}

__n128 FIK::RTGameTask::setOffset(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_OWORD *)(a1 + 240) = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  *(__n128 *)(a1 + 256) = result;
  return result;
}

uint64_t FIK::RTGameTask::getOffset(FIK::RTGameTask *this)
{
  return (uint64_t)this + 240;
}

uint64_t FIK::RTGameTask::SetTargetParams(uint64_t result, _OWORD *a2, float a3, float a4)
{
  *(_OWORD *)(result + 336) = *a2;
  *(_OWORD *)(result + 352) = a2[1];
  *(float *)(result + 416) = a3;
  *(float *)(result + 420) = a4;
  return result;
}

uint64_t FIK::RTGameTask::SetAlpha(uint64_t this, float a2, float a3)
{
  *(float *)(this + 416) = a2;
  *(float *)(this + 420) = a3;
  return this;
}

__n128 FIK::RTGameTask::SetLookAtTarget(__n128 *a1, __n128 *a2)
{
  __n128 result;
  uint64_t *v5;

  if (!a1[17].n128_u8[9])
  {
    v5 = ikinemaLogObject();
    ikinemaAssertHandler(*v5, 0, (uint64_t)"SetLookAtTarget", "(is_look_at_) Task must be a look-at one");
  }
  result = *a2;
  a1[23] = *a2;
  return result;
}

__n128 FIK::RTGameTask::SetLookAtTargetParams(uint64_t a1, _OWORD *a2, __n128 *a3, float a4, float a5)
{
  __n128 result;
  uint64_t *v11;
  uint64_t *v12;

  if (!*(_BYTE *)(a1 + 281))
  {
    v11 = ikinemaLogObject();
    ikinemaAssertHandler(*v11, 0, (uint64_t)"SetLookAtTargetParams", "(is_look_at_) Task must be a look-at one");
    if (!*(_BYTE *)(a1 + 281))
    {
      v12 = ikinemaLogObject();
      ikinemaAssertHandler(*v12, 0, (uint64_t)"SetLookAtTarget", "(is_look_at_) Task must be a look-at one");
    }
  }
  *(_OWORD *)(a1 + 368) = *a2;
  *(float *)(a1 + 416) = a5;
  *(float *)(a1 + 420) = a4;
  result = *a3;
  *(__n128 *)(a1 + 336) = *a3;
  return result;
}

__n128 FIK::RTGameTask::SetImpactPointAndNormal(uint64_t a1, _OWORD *a2, __n128 *a3)
{
  __n128 result;
  uint64_t *v7;

  if (!*(_BYTE *)(a1 + 276))
  {
    v7 = ikinemaLogObject();
    ikinemaAssertHandler(*v7, 0, (uint64_t)"SetImpactPointAndNormal", "(is_raytrace_) Task must be configured as ray casting");
  }
  *(_OWORD *)(a1 + 384) = *a2;
  result = *a3;
  *(__n128 *)(a1 + 400) = *a3;
  return result;
}

uint64_t FIK::RTGameTask::SetPositionAlpha(uint64_t this, float a2)
{
  *(float *)(this + 416) = a2;
  return this;
}

uint64_t FIK::RTGameTask::SetRotationAlpha(uint64_t this, float a2)
{
  *(float *)(this + 420) = a2;
  return this;
}

uint64_t FIK::RTGameTask::SetAlpha(uint64_t this, float a2)
{
  *(float *)(this + 416) = a2;
  *(float *)(this + 420) = a2;
  return this;
}

uint64_t FIK::RTGameTask::GetAlphas(FIK::RTGameTask *this)
{
  return (uint64_t)this + 416;
}

uint64_t FIK::RTGameTask::SetProperties(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = result;
  v4 = *(char **)(result + 8);
  if (v4)
  {
    (*(void (**)(char *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)&v4[*(_QWORD *)(*(_QWORD *)v4 - 264)] + 144))(&v4[*(_QWORD *)(*(_QWORD *)v4 - 264)], *(unsigned __int8 *)(a2 + 55), *(unsigned __int8 *)(a2 + 56), *(unsigned __int8 *)(a2 + 57));
    v5 = *(_QWORD *)(v3 + 8) + *(_QWORD *)(**(_QWORD **)(v3 + 8) - 264);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 56))(v5, *(unsigned int *)(a2 + 64));
    v6 = *(_QWORD *)(v3 + 8) + *(_QWORD *)(**(_QWORD **)(v3 + 8) - 264);
    (*(void (**)(uint64_t, _QWORD, float))(*(_QWORD *)v6 + 80))(v6, 0, *(float *)(a2 + 80));
    v7 = *(_QWORD *)(v3 + 8) + *(_QWORD *)(**(_QWORD **)(v3 + 8) - 264);
    (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)v7 + 80))(v7, 1, *(float *)(a2 + 84));
    v8 = *(_QWORD *)(v3 + 8) + *(_QWORD *)(**(_QWORD **)(v3 + 8) - 264);
    (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)v8 + 80))(v8, 2, *(float *)(a2 + 88));
    v9 = *(_QWORD *)(v3 + 8) + *(_QWORD *)(**(_QWORD **)(v3 + 8) - 264);
    (*(void (**)(uint64_t, _QWORD, float))(*(_QWORD *)v9 + 104))(v9, 0, *(float *)(a2 + 112));
    v10 = *(_QWORD *)(v3 + 8) + *(_QWORD *)(**(_QWORD **)(v3 + 8) - 264);
    (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)v10 + 104))(v10, 1, *(float *)(a2 + 116));
    v11 = *(_QWORD *)(v3 + 8) + *(_QWORD *)(**(_QWORD **)(v3 + 8) - 264);
    (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)v11 + 104))(v11, 2, *(float *)(a2 + 120));
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v3 + 8) + 392))(*(_QWORD *)(v3 + 8), *(unsigned __int8 *)(a2 + 54));
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 8) + 280))(*(_QWORD *)(v3 + 8), a2 + 144);
    v12 = *(_QWORD *)(v3 + 8) + *(_QWORD *)(**(_QWORD **)(v3 + 8) - 264);
    result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v12 + 136))(v12, *(unsigned __int8 *)(a2 + 52), 0);
  }
  v13 = *(char **)(v3 + 16);
  if (v13)
  {
    (*(void (**)(char *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)&v13[*(_QWORD *)(*(_QWORD *)v13 - 264)] + 144))(&v13[*(_QWORD *)(*(_QWORD *)v13 - 264)], *(unsigned __int8 *)(a2 + 58), *(unsigned __int8 *)(a2 + 59), *(unsigned __int8 *)(a2 + 60));
    v14 = *(_QWORD *)(v3 + 16) + *(_QWORD *)(**(_QWORD **)(v3 + 16) - 264);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 56))(v14, *(unsigned int *)(a2 + 68));
    v15 = *(_QWORD *)(v3 + 16) + *(_QWORD *)(**(_QWORD **)(v3 + 16) - 264);
    (*(void (**)(uint64_t, _QWORD, float))(*(_QWORD *)v15 + 80))(v15, 0, *(float *)(a2 + 96));
    v16 = *(_QWORD *)(v3 + 16) + *(_QWORD *)(**(_QWORD **)(v3 + 16) - 264);
    (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)v16 + 80))(v16, 1, *(float *)(a2 + 100));
    v17 = *(_QWORD *)(v3 + 16) + *(_QWORD *)(**(_QWORD **)(v3 + 16) - 264);
    (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)v17 + 80))(v17, 2, *(float *)(a2 + 104));
    v18 = *(_QWORD *)(v3 + 16) + *(_QWORD *)(**(_QWORD **)(v3 + 16) - 264);
    (*(void (**)(uint64_t, _QWORD, float))(*(_QWORD *)v18 + 104))(v18, 0, *(float *)(a2 + 128));
    v19 = *(_QWORD *)(v3 + 16) + *(_QWORD *)(**(_QWORD **)(v3 + 16) - 264);
    (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)v19 + 104))(v19, 1, *(float *)(a2 + 132));
    v20 = *(_QWORD *)(v3 + 16) + *(_QWORD *)(**(_QWORD **)(v3 + 16) - 264);
    (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)v20 + 104))(v20, 2, *(float *)(a2 + 136));
    v21 = *(_QWORD *)(v3 + 16) + *(_QWORD *)(**(_QWORD **)(v3 + 16) - 264);
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v21 + 136))(v21, *(unsigned __int8 *)(a2 + 53), 0);
  }
  return result;
}

uint64_t FIK::RTGameTask::GenerateAnimTarget(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  float32x4_t v5;
  uint64_t result;
  uint64_t *v7;
  float32x4_t v8[2];

  FIK::IKRigUtils::GetAnimTarget<FIK::GameRig>(a1[6].u32[0], a2, a4, v8);
  v5 = v8[1];
  a1[29] = v8[0];
  a1[30] = v5;
  result = FIK::Utils::ContainsNaN(a1 + 29);
  if ((_DWORD)result)
  {
    v7 = ikinemaLogObject();
    return ikinemaAssertHandler(*v7, 1, (uint64_t)"GenerateAnimTarget", "(!Utils::ContainsNaN(AnimTarget)) Invalid animation target generated");
  }
  return result;
}

uint64_t FIK::IKRigUtils::GetAnimTarget<FIK::GameRig>@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, float32x4_t *a4@<X8>)
{
  int v6;
  uint64_t v8;
  int v9;
  float32x4_t *v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t *v14;
  float32x4_t v15;
  int32x4_t v16;
  int8x16_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  int32x4_t v22;
  float32x4_t v23;
  int32x4_t v24;
  uint64_t *v25;

  v6 = result;
  if ((result & 0x80000000) != 0 || *(_DWORD *)(a3 + 208) <= (int)result)
  {
    v25 = ikinemaLogObject();
    result = ikinemaAssertHandler(*v25, 0, (uint64_t)"GetAnimTarget", "(IsValidBoneIndex(BoneIndex, IKinemaRig)) Check if index is valid");
  }
  v8 = *(_QWORD *)(a3 + 224);
  v9 = *(_DWORD *)(v8 + ((uint64_t)v6 << 8) + 4);
  v10 = (float32x4_t *)(a2 + 32 * v6);
  v11 = v10[1];
  *a4 = *v10;
  a4[1] = v11;
  if (v9 != -1)
  {
    v12 = *a4;
    v13.i64[0] = 0x4000000040000000;
    v13.i64[1] = 0x4000000040000000;
    do
    {
      v14 = (float32x4_t *)(a2 + 32 * v9);
      v15 = v14[1];
      v16 = (int32x4_t)vnegq_f32(v11);
      v17 = (int8x16_t)vtrn2q_s32((int32x4_t)v11, vtrn1q_s32((int32x4_t)v11, v16));
      v18 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v11, (int8x16_t)v16, 8uLL), *(float32x2_t *)v15.f32, 1), (float32x4_t)vextq_s8(v17, v17, 8uLL), v15.f32[0]);
      v19 = (float32x4_t)vrev64q_s32((int32x4_t)v11);
      v19.i32[0] = v16.i32[1];
      v19.i32[3] = v16.i32[2];
      v11 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v11, v15, 3), v19, v15, 2), v18);
      v20 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v15, (int32x4_t)v15), (int8x16_t)v15, 0xCuLL);
      v21 = vnegq_f32(v15);
      v22 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v12, (int32x4_t)v12), (int8x16_t)v12, 0xCuLL), v21), v12, v20);
      v23 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v22, v22), (int8x16_t)v22, 0xCuLL);
      v24 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v23, (int32x4_t)v23), (int8x16_t)v23, 0xCuLL), v21), v23, v20);
      v12 = vaddq_f32(*v14, vmlaq_f32(v12, v13, vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v24, v24), (int8x16_t)v24, 0xCuLL), v23, v15, 3)));
      v9 = *(_DWORD *)(v8 + ((uint64_t)v9 << 8) + 4);
    }
    while (v9 != -1);
    *a4 = v12;
    a4[1] = v11;
  }
  return result;
}

float32x4_t FIK::RTGameTask::ConvertTargetSpace(float32x4_t *a1, int a2, float32x4_t *a3, float32x4_t result)
{
  float32x4_t *v6;
  float32x4_t v7;
  int32x4_t v8;
  int8x16_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  int32x4_t v16;
  float32x4_t v17;
  int32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  int32x4_t v23;
  float32x4_t v24;
  int32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int32x4_t v31;
  float32x4_t v32;
  int32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  int32x4_t v38;
  float32x4_t v39;
  int32x4_t v40;
  uint64_t *v41;

  if (a2 == 1)
  {
    v6 = a1 + 21;
    if (FIK::Utils::ContainsNaN(a3))
    {
      v41 = ikinemaLogObject();
      ikinemaAssertHandler(*v41, 0, (uint64_t)"ConvertTargetSpace", "(!Utils::ContainsNaN(WorldToSolver)) Invalid space transform provided");
    }
    v7 = a1[22];
    v8 = (int32x4_t)vnegq_f32(v7);
    v9 = (int8x16_t)vtrn2q_s32((int32x4_t)v7, vtrn1q_s32((int32x4_t)v7, v8));
    v10 = a3[1];
    v11 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v7, (int8x16_t)v8, 8uLL), *(float32x2_t *)v10.f32, 1), (float32x4_t)vextq_s8(v9, v9, 8uLL), v10.f32[0]);
    v12 = (float32x4_t)vrev64q_s32((int32x4_t)v7);
    v12.i32[0] = v8.i32[1];
    v12.i32[3] = v8.i32[2];
    v13 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v7, v10, 3), v12, v10, 2), v11);
    v14 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v10, (int32x4_t)v10), (int8x16_t)v10, 0xCuLL);
    v15 = vnegq_f32(v10);
    v16 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)v6, *(int32x4_t *)v6), *(int8x16_t *)v6, 0xCuLL), v15), *v6, v14);
    v17 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v16, v16), (int8x16_t)v16, 0xCuLL);
    v18 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v17, (int32x4_t)v17), (int8x16_t)v17, 0xCuLL), v15), v17, v14);
    result.i64[0] = 0x4000000040000000;
    result.i64[1] = 0x4000000040000000;
    a1[21] = vaddq_f32(*a3, vmlaq_f32(*v6, result, vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v18, v18), (int8x16_t)v18, 0xCuLL), v17, v10, 3)));
    a1[22] = v13;
    if (a1[17].i8[9])
    {
      v19 = a3[1];
      v20 = v6[2];
      v21 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v19, (int32x4_t)v19), (int8x16_t)v19, 0xCuLL);
      v22 = vnegq_f32(v19);
      v23 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v20, (int32x4_t)v20), (int8x16_t)v20, 0xCuLL), v22), v20, v21);
      v24 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v23, v23), (int8x16_t)v23, 0xCuLL);
      v25 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v24, (int32x4_t)v24), (int8x16_t)v24, 0xCuLL), v22), v24, v21);
      result = vaddq_f32(*a3, vmlaq_f32(v20, result, vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v25, v25), (int8x16_t)v25, 0xCuLL), v24, v19, 3)));
      v6[2] = result;
    }
    if (a1[17].i8[4])
    {
      v26 = a3[1];
      v27 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v26, (int32x4_t)v26), (int8x16_t)v26, 0xCuLL);
      v29 = v6[3];
      v28 = v6[4];
      v30 = vnegq_f32(v26);
      v31 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v28, (int32x4_t)v28), (int8x16_t)v28, 0xCuLL), v30), v28, v27);
      v32 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v31, v31), (int8x16_t)v31, 0xCuLL);
      v33 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v32, (int32x4_t)v32), (int8x16_t)v32, 0xCuLL), v30), v32, v27);
      v34 = vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v33, v33), (int8x16_t)v33, 0xCuLL), v32, v26, 3);
      v26.i64[0] = 0x4000000040000000;
      v26.i64[1] = 0x4000000040000000;
      v6[4] = vmlaq_f32(v28, v26, v34);
      v35 = a3[1];
      v36 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v35, (int32x4_t)v35), (int8x16_t)v35, 0xCuLL);
      v37 = vnegq_f32(v35);
      v38 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v29, (int32x4_t)v29), (int8x16_t)v29, 0xCuLL), v37), v29, v36);
      v39 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v38, v38), (int8x16_t)v38, 0xCuLL);
      v40 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v39, (int32x4_t)v39), (int8x16_t)v39, 0xCuLL), v37), v39, v36);
      result = vaddq_f32(*a3, vmlaq_f32(v29, v26, vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v40, v40), (int8x16_t)v40, 0xCuLL), v39, v35, 3)));
      v6[3] = result;
    }
  }
  return result;
}

uint64_t FIK::RTGameTask::GenerateTarget(uint64_t this, uint64_t *a2, uint64_t a3)
{
  if (*(_BYTE *)(this + 281))
    return FIK::RTGameTask::GenerateLookAtTarget(this);
  if (*(_BYTE *)(this + 102))
    return FIK::RTGameTask::GeneratePoleVecTarget(this, a2, a3);
  if (*(_BYTE *)(this + 278))
    return FIK::RTGameTask::GenerateVRTarget(this);
  return this;
}

uint64_t FIK::RTGameTask::GenerateLookAtTarget(uint64_t this)
{
  uint64_t v1;
  __int128 v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  int32x4_t v7;
  float32x4_t v8;
  int32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  int32x4_t v15;
  float32x4_t v16;
  int32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  uint64_t v21;
  float32x4_t v22;
  int32x4_t v23;
  float32x4_t v24;
  int32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float v28;
  BOOL v29;
  float v30;
  float32x4_t v31;
  float32x4_t v32;
  float v33;
  float32x4_t v34;
  float32x4_t v35;
  int32x2_t v36;
  float32x4_t v37;
  float32x4_t v38;
  int32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float v42;
  float32x4_t v43;
  float32x4_t v44;
  float v45;
  int32x4_t v46;
  float32x4_t v47;
  int8x16_t v48;
  float32x2_t v49;
  unsigned __int32 v50;
  float32x2_t v51;
  float32x2_t v52;
  int32x4_t v53;
  int8x16_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float v59;
  float v60;
  float32x4_t v61;
  float v62;
  float v63;
  float v64;
  uint64_t *v65;

  v1 = this;
  if (*(float *)(this + 420) == 0.0 && *(float *)(this + 416) == 0.0)
  {
    v2 = *(_OWORD *)(this + 480);
    *(_OWORD *)(this + 336) = *(_OWORD *)(this + 464);
    *(_OWORD *)(this + 352) = v2;
    return this;
  }
  if (*(_BYTE *)(this + 280))
  {
    v3 = *(float32x4_t *)(this + 480);
    v4 = *(float32x4_t *)(this + 224);
    v5 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v3, (int32x4_t)v3), (int8x16_t)v3, 0xCuLL);
    v6 = vnegq_f32(v3);
    v7 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v4, (int32x4_t)v4), (int8x16_t)v4, 0xCuLL), v6), v4, v5);
    v8 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v7, v7), (int8x16_t)v7, 0xCuLL);
    v9 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v8, (int32x4_t)v8), (int8x16_t)v8, 0xCuLL), v6), v8, v5);
    v10 = vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v9, v9), (int8x16_t)v9, 0xCuLL), v8, v3, 3);
    v8.i64[0] = 0x4000000040000000;
    v8.i64[1] = 0x4000000040000000;
    v11 = vmlaq_f32(v4, v8, v10);
    v11.i32[3] = 0;
  }
  else
  {
    v11 = *(float32x4_t *)(this + 224);
    v3 = *(float32x4_t *)(this + 480);
  }
  v12 = vmulq_f32(v3, (float32x4_t)xmmword_210802C20);
  v13 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v12, (int32x4_t)v12), (int8x16_t)v12, 0xCuLL);
  v14 = vnegq_f32(v12);
  v15 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v11, (int32x4_t)v11), (int8x16_t)v11, 0xCuLL), v14), v11, v13);
  v16 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v15, v15), (int8x16_t)v15, 0xCuLL);
  v17 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v16, (int32x4_t)v16), (int8x16_t)v16, 0xCuLL), v14), v16, v13);
  v18 = vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v17, v17), (int8x16_t)v17, 0xCuLL), v16, v12, 3);
  v19.i64[0] = 0x4000000040000000;
  v19.i64[1] = 0x4000000040000000;
  v20 = vmlaq_f32(v11, v19, v18);
  v21 = 304;
  if (!*(_BYTE *)(this + 288))
    v21 = 464;
  v22 = vsubq_f32(*(float32x4_t *)(this + 368), *(float32x4_t *)(this + v21));
  v23 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v22, (int32x4_t)v22), (int8x16_t)v22, 0xCuLL), v14), v22, v13);
  v24 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v23, v23), (int8x16_t)v23, 0xCuLL);
  v25 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v24, (int32x4_t)v24), (int8x16_t)v24, 0xCuLL), v14), v24, v13);
  v26 = vmlaq_f32(v22, v19, vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v25, v25), (int8x16_t)v25, 0xCuLL), v24, v12, 3));
  v27 = vmulq_f32(v20, v20);
  v27.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v27, 2), vaddq_f32(v27, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 1))).f32[0]);
  v28 = 1.0 / v27.f32[0];
  v29 = v27.f32[0] == 0.0;
  v30 = 0.0;
  if (v29)
    v28 = 0.0;
  v31 = vmulq_n_f32(v20, v28);
  v32 = vmulq_f32(v26, v26);
  v33 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v32, 2), vaddq_f32(v32, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.f32, 1))).f32[0]);
  if (v33 != 0.0)
    v30 = 1.0 / v33;
  v34 = vmulq_n_f32(v26, v30);
  v35 = vmulq_f32(v31, v34);
  v36 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v35, 2), vaddq_f32(v35, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v35.f32, 1))).u64[0];
  v37 = (float32x4_t)xmmword_210802BA0;
  if (*(float *)v36.i32 < 1.0)
  {
    if (*(float *)v36.i32 >= -0.999999)
    {
      *(float *)v36.i32 = sqrtf((float)(*(float *)v36.i32 + 1.0) + (float)(*(float *)v36.i32 + 1.0));
      v46 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v34, (int32x4_t)v34), (int8x16_t)v34, 0xCuLL), vnegq_f32(v31)), v34, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v31, (int32x4_t)v31), (int8x16_t)v31, 0xCuLL));
      v47 = vdivq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v46, v46), (int8x16_t)v46, 0xCuLL), (float32x4_t)vdupq_lane_s32(v36, 0));
      v47.f32[3] = *(float *)v36.i32 * 0.5;
      v48 = (int8x16_t)vmulq_f32(v47, v47);
      v49 = vadd_f32(*(float32x2_t *)v48.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v48, v48, 8uLL));
      if (vaddv_f32(v49) != 0.0)
      {
        v50 = vadd_f32(v49, (float32x2_t)vdup_lane_s32((int32x2_t)v49, 1)).u32[0];
        v51 = vrsqrte_f32((float32x2_t)v50);
        v52 = vmul_f32(v51, vrsqrts_f32((float32x2_t)v50, vmul_f32(v51, v51)));
        v37 = vmulq_n_f32(v47, vmul_f32(v52, vrsqrts_f32((float32x2_t)v50, vmul_f32(v52, v52))).f32[0]);
      }
    }
    else
    {
      v38 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v31, (int32x4_t)v31), (int8x16_t)v31, 0xCuLL);
      v39 = (int32x4_t)vmlaq_f32(vmulq_f32(v38, (float32x4_t)xmmword_210802BB0), (float32x4_t)xmmword_210802BC0, v31);
      v40 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v39, v39), (int8x16_t)v39, 0xCuLL);
      v40.i32[3] = 0;
      v41 = vmulq_f32(v40, v40);
      v42 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v41, 2), vaddq_f32(v41, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v41.f32, 1))).f32[0]);
      if (fabsf(v42) < 0.000000001)
      {
        v43 = vmlaq_f32(vmulq_f32(v38, (float32x4_t)xmmword_210802BD0), (float32x4_t)xmmword_210802BE0, v31);
        v44 = vmulq_f32(v43, v43);
        v40 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v43, (int32x4_t)v43), (int8x16_t)v43, 0xCuLL);
        v42 = sqrtf(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v44.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v44, 2), v44)).f32[0]);
      }
      v45 = 1.0 / v42;
      if (v42 == 0.0)
        v45 = 0.0;
      v37 = vmulq_n_f32(v40, v45);
      v37.i32[3] = 0;
    }
  }
  v53 = (int32x4_t)vnegq_f32(v37);
  v54 = (int8x16_t)vtrn2q_s32((int32x4_t)v37, vtrn1q_s32((int32x4_t)v37, v53));
  v55 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v37, (int8x16_t)v53, 8uLL), *(float32x2_t *)v3.f32, 1), (float32x4_t)vextq_s8(v54, v54, 8uLL), v3.f32[0]);
  v56 = (float32x4_t)vrev64q_s32((int32x4_t)v37);
  v56.i32[0] = v53.i32[1];
  v56.i32[3] = v53.i32[2];
  *(float32x4_t *)(this + 352) = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v37, v3, 3), v56, v3, 2), v55);
  this = FIK::Utils::ContainsNaN();
  if ((_DWORD)this)
  {
    v65 = ikinemaLogObject();
    this = ikinemaAssertHandler(*v65, 0, (uint64_t)"GenerateLookAtTarget", "(!Utils::ContainsNaN(DeltaQ)) Invalid delta computed");
  }
  if (*(_DWORD *)(v1 + 444) == 1)
  {
    v57 = *(float32x4_t *)(v1 + 368);
    v58 = vmulq_f32(v57, v57);
    v58.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v58, 2), vaddq_f32(v58, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v58.f32, 1))).f32[0]);
    v59 = 1.0 / v58.f32[0];
    v29 = v58.f32[0] == 0.0;
    v60 = 0.0;
    if (v29)
      v59 = 0.0;
    v61 = vmulq_f32(*(float32x4_t *)(v1 + 224), vmulq_n_f32(v57, v59));
    v62 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v61, 2), vaddq_f32(v61, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v61.f32, 1))).f32[0];
    v63 = *(float *)(v1 + 448);
    if (v62 >= 0.0)
    {
      if (v63 <= 0.0)
      {
        v60 = *(float *)(v1 + 420);
        goto LABEL_38;
      }
      v60 = *(float *)(v1 + 560);
      if (v63 >= 1.0)
      {
LABEL_38:
        *(float *)(v1 + 560) = v60;
        return this;
      }
      v64 = *(float *)(v1 + 420);
      v60 = v60 - v64;
    }
    else
    {
      if (v63 <= 0.0)
        goto LABEL_38;
      v60 = *(float *)(v1 + 560);
      if (v63 >= 1.0)
        goto LABEL_38;
      v64 = 0.0;
    }
    v60 = v64 + (float)(v60 * v63);
    goto LABEL_38;
  }
  return this;
}

uint64_t FIK::RTGameTask::GeneratePoleVecTarget(uint64_t result, uint64_t *a2, uint64_t a3)
{
  float32x4_t *v3;
  float32x4_t v4;
  float32x4_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  int32x4_t v17;
  float32x4_t v18;
  int32x4_t v19;
  float32x4_t v20;
  uint64_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float v26;
  float32x4_t v27;
  float32x4_t v28;
  float v29;
  float v30;
  float32x4_t v31;
  float32x4_t v32;
  int32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float v37;
  float v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float v43;
  float v44;
  float32x4_t v45;
  uint64_t *v46;
  float32x4_t v47;
  float32x4_t v48[2];

  if (COERCE_FLOAT(*(_DWORD *)(result + 416) & 0x7FFFFFFF) < 0.000000001)
  {
    v3 = (float32x4_t *)result;
    v4 = *(float32x4_t *)(result + 192);
    v5 = vmulq_f32(v4, v4);
    if (fabsf(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v5, 2), vaddq_f32(v5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 1))).f32[0])) >= 0.000000001)
    {
      v14 = *(float32x4_t *)(result + 480);
      v15 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v14, (int32x4_t)v14), (int8x16_t)v14, 0xCuLL);
      v16 = vnegq_f32(v14);
      v17 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v4, (int32x4_t)v4), (int8x16_t)v4, 0xCuLL), v16), v4, v15);
      v18 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v17, v17), (int8x16_t)v17, 0xCuLL);
      v19 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v18, (int32x4_t)v18), (int8x16_t)v18, 0xCuLL), v16), v18, v15);
      v20 = vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v19, v19), (int8x16_t)v19, 0xCuLL), v18, v14, 3);
      v14.i64[0] = 0x4000000040000000;
      v14.i64[1] = 0x4000000040000000;
      *(float32x4_t *)(result + 336) = vaddq_f32(*(float32x4_t *)(result + 464), vmlaq_f32(v4, v14, v20));
      *(_OWORD *)(result + 352) = xmmword_210802BA0;
    }
    else
    {
      v8 = *(unsigned int *)(result + 96);
      v9 = *(_QWORD *)(a3 + 224);
      v10 = *(_QWORD *)(a3 + 208);
      if (v10)
      {
        v11 = (_DWORD *)(v9 + 4);
        v12 = v10 << 8;
        while (*v11 != (_DWORD)v8)
        {
          v11 += 64;
          v12 -= 256;
          if (!v12)
            goto LABEL_7;
        }
        v13 = *(v11 - 1);
      }
      else
      {
LABEL_7:
        v13 = 0xFFFFFFFFLL;
      }
      v21 = 0xFFFFFFFFLL;
      if ((v8 & 0x80000000) == 0 && (int)v8 < (int)v10)
        v21 = *(unsigned int *)(v9 + (v8 << 8) + 4);
      FIK::IKRigUtils::GetAnimTarget<FIK::GameRig>(v21, *a2, a3, v48);
      v47 = v48[0];
      FIK::IKRigUtils::GetAnimTarget<FIK::GameRig>(v13, *a2, a3, v48);
      v22 = v48[0];
      v48[0] = v3[29];
      v23 = vsubq_f32(v48[0], v47);
      v24 = vmulq_f32(v23, v23);
      v25 = vsubq_f32(v48[0], v22);
      v24.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 2), vaddq_f32(v24, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.f32, 1))).f32[0]);
      v26 = 1.0 / v24.f32[0];
      if (v24.f32[0] == 0.0)
        v26 = 0.0;
      v27 = vmulq_n_f32(v23, v26);
      v28 = vmulq_f32(v25, v25);
      v29 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v28, 2), vaddq_f32(v28, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28.f32, 1))).f32[0]);
      if (v29 == 0.0)
        v30 = 0.0;
      else
        v30 = 1.0 / v29;
      v31 = vmulq_n_f32(v25, v30);
      v32 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v31, (int32x4_t)v31), (int8x16_t)v31, 0xCuLL);
      v33 = (int32x4_t)vmlaq_f32(vmulq_f32(v32, vnegq_f32(v27)), v31, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v27, (int32x4_t)v27), (int8x16_t)v27, 0xCuLL));
      v34 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v33, v33), (int8x16_t)v33, 0xCuLL);
      v35 = v34;
      v35.i32[3] = 0;
      v36 = vmulq_f32(v35, v35);
      v37 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v36, 2), vaddq_f32(v36, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v36.f32, 1))).f32[0]);
      if (v37 == 0.0)
        v38 = 0.0;
      else
        v38 = 1.0 / v37;
      v39 = vmulq_n_f32(v34, v38);
      v40 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v39, (int32x4_t)v39), (int8x16_t)v39, 0xCuLL), vnegq_f32(v31)), v39, v32);
      v41 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v40, (int32x4_t)v40), (int8x16_t)v40, 0xCuLL);
      v42 = vmulq_f32(v40, v40);
      v43 = sqrtf(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v42.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v42, 2), v42)).f32[0]);
      if (v43 == 0.0)
        v44 = 0.0;
      else
        v44 = 1.0 / v43;
      v45 = vmulq_f32(v27, v27);
      v48[0] = vaddq_f32(v48[0], vmulq_f32(vmulq_n_f32(vmulq_n_f32(v41, v44), sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v45, 2), vaddq_f32(v45, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v45.f32, 1))).f32[0])), (float32x4_t)vdupq_n_s32(0x43160000u)));
      v3[21] = v48[0];
      result = FIK::Utils::ContainsNaN();
      if ((_DWORD)result)
      {
        v46 = ikinemaLogObject();
        return ikinemaAssertHandler(*v46, 0, (uint64_t)"GeneratePoleVecTarget", "(!Utils::ContainsNaN(BoneAnimTarg)) Invalid animation target");
      }
    }
  }
  return result;
}

uint64_t FIK::RTGameTask::GenerateVRTarget(uint64_t this)
{
  __int128 v1;
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  int32x4_t v7;
  float32x4_t v8;
  int32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  int32x4_t v12;
  int8x16_t v13;
  float32x4_t v14;
  uint64_t *v15;

  if (*(float *)(this + 420) == 0.0 && *(float *)(this + 416) == 0.0)
  {
    v1 = *(_OWORD *)(this + 480);
    *(_OWORD *)(this + 336) = *(_OWORD *)(this + 464);
    *(_OWORD *)(this + 352) = v1;
  }
  else
  {
    v2 = *(float32x4_t *)(this + 352);
    v3 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v2, (int32x4_t)v2), (int8x16_t)v2, 0xCuLL);
    v4 = *(float32x4_t *)(this + 240);
    v5 = *(float32x4_t *)(this + 256);
    v6 = vnegq_f32(v2);
    v7 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v4, (int32x4_t)v4), (int8x16_t)v4, 0xCuLL), v6), v4, v3);
    v8 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v7, v7), (int8x16_t)v7, 0xCuLL);
    v9 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v8, (int32x4_t)v8), (int8x16_t)v8, 0xCuLL), v6), v8, v3);
    v10 = vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v9, v9), (int8x16_t)v9, 0xCuLL), v8, v2, 3);
    v8.i64[0] = 0x4000000040000000;
    v8.i64[1] = 0x4000000040000000;
    v11 = vaddq_f32(*(float32x4_t *)(this + 336), vmlaq_f32(v4, v8, v10));
    v12 = (int32x4_t)vnegq_f32(v5);
    v13 = (int8x16_t)vtrn2q_s32((int32x4_t)v5, vtrn1q_s32((int32x4_t)v5, v12));
    v14 = (float32x4_t)vrev64q_s32((int32x4_t)v5);
    v14.i32[0] = v12.i32[1];
    v14.i32[3] = v12.i32[2];
    *(float32x4_t *)(this + 336) = v11;
    *(float32x4_t *)(this + 352) = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v5, v2, 3), v14, v2, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v5, (int8x16_t)v12, 8uLL), *(float32x2_t *)v2.f32, 1), (float32x4_t)vextq_s8(v13, v13, 8uLL), v2.f32[0]));
    this = FIK::Utils::ContainsNaN((float32x4_t *)(this + 336));
    if ((_DWORD)this)
    {
      v15 = ikinemaLogObject();
      return ikinemaAssertHandler(*v15, 0, (uint64_t)"GenerateVRTarget", "(!Utils::ContainsNaN(Target)) Invalid task target");
    }
  }
  return this;
}

uint64_t FIK::RTGameTask::SetSolverTaskTarget(uint64_t this)
{
  uint64_t v1;
  char *v2;
  char *v3;

  v1 = this;
  v2 = *(char **)(this + 8);
  if (v2)
  {
    (*(void (**)(char *, _QWORD, _QWORD))(*(_QWORD *)&v2[*(_QWORD *)(*(_QWORD *)v2 - 264)] + 136))(&v2[*(_QWORD *)(*(_QWORD *)v2 - 264)], *(unsigned __int8 *)(this + 100), 0);
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v1 + 8) + 280))(*(_QWORD *)(v1 + 8), v1 + 192);
    this = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v1 + 8) + 248))(*(_QWORD *)(v1 + 8), v1 + 336);
  }
  v3 = *(char **)(v1 + 16);
  if (v3)
  {
    (*(void (**)(char *, _QWORD, _QWORD))(*(_QWORD *)&v3[*(_QWORD *)(*(_QWORD *)v3 - 264)] + 136))(&v3[*(_QWORD *)(*(_QWORD *)v3 - 264)], *(unsigned __int8 *)(v1 + 101), 0);
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v1 + 16) + 248))(*(_QWORD *)(v1 + 16), v1 + 352);
  }
  return this;
}

uint64_t FIK::RTGameTask::AddSolverTask(FIK::RTGameTask *this, FIK::Solver **a2)
{
  float32x4_t *v4;
  uint64_t v5;
  __n128 *v6;

  if (*((_BYTE *)this + 100))
  {
    v4 = FIK::IKSolver::addPositionTask(a2, *((_DWORD *)this + 24));
    *((_QWORD *)this + 1) = v4;
    v5 = v4 != 0;
  }
  else
  {
    v5 = 1;
  }
  if (*((_BYTE *)this + 101))
  {
    v6 = FIK::IKSolver::addOrientationTask(a2, *((_DWORD *)this + 24));
    *((_QWORD *)this + 2) = v6;
    if (v6)
      v5 = v5;
    else
      v5 = 0;
  }
  FIK::RTGameTask::SetProperties((uint64_t)this, (uint64_t)this + 48);
  return v5;
}

BOOL FIK::RTGameTask::RemoveSolverTask(FIK::RTGameTask *this, FIK::Solver **a2)
{
  _QWORD *v4;
  _QWORD *v5;

  v4 = (_QWORD *)*((_QWORD *)this + 2);
  if (v4)
  {
    FIK::IKSolver::removeTask(a2, (uint64_t)v4 + *(_QWORD *)(*v4 - 264));
    *((_QWORD *)this + 2) = 0;
  }
  v5 = (_QWORD *)*((_QWORD *)this + 1);
  if (!v5)
    return 1;
  FIK::IKSolver::removeTask(a2, (uint64_t)v5 + *(_QWORD *)(*v5 - 264));
  *((_QWORD *)this + 1) = 0;
  return *((_QWORD *)this + 2) == 0;
}

__n128 FIK::RTGameTask::BlendTaskTarget(float32x4_t *this, double a2)
{
  float32x4_t v3;
  __n128 result;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7[2];
  float32x4_t v8[2];

  v3 = this[33];
  v8[0] = this[32];
  v8[1] = v3;
  FIK::TargetSmoothing::smooth((FIK::TargetSmoothing *)&this[26].u32[2], this + 21, v8, a2, v7);
  result = (__n128)v7[0];
  v5 = v7[1];
  this[21] = v7[0];
  this[22] = v5;
  v6 = this[22];
  this[32] = (float32x4_t)result;
  this[33] = v6;
  return result;
}

void FIK::RTGameTask::DoAlphaBlend(float32x4_t *this)
{
  float v2;
  uint64_t v3;
  float v4;
  __n128 v5;
  __n128 v6;
  __int32 v7;
  __n128 v8[2];

  if (!this[6].i8[6])
  {
    v2 = this[26].f32[0];
    v3 = 105;
    if (this[27].i32[3] == 1)
      v3 = 140;
    v4 = this->f32[v3];
    if (v2 == 0.0 && v4 == 0.0)
    {
      v5 = (__n128)this[29];
      v6 = (__n128)this[30];
    }
    else
    {
      v7 = this[17].i32[0];
      if (v7 == 2)
      {
        FIK::Utils::BlendWithOffset(this + 29, this + 21, v8, v2, v4);
      }
      else if (v7 == 1)
      {
        FIK::Utils::BlendWithTarget(this + 29, this + 21, (float32x4_t *)v8, v2, v4);
      }
      else
      {
        if (v7)
          FIK::RTGameTask::DoAlphaBlend();
        FIK::Utils::BlendToTarget(this + 29, this + 21, (float32x4_t *)v8, v2, v4);
      }
      v5 = v8[0];
      v6 = v8[1];
    }
    this[21] = (float32x4_t)v5;
    this[22] = (float32x4_t)v6;
  }
}

BOOL FIK::RTGameTask::ShouldBlendWithMaxVel(FIK::RTGameTask *this)
{
  return (*((_DWORD *)this + 106) & 0xFFFFFFFE) == 2;
}

uint64_t FIK::RigTask::RigTask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  __int16 v7;
  __int16 v8;

  v6 = IKString::IKString((uint64_t *)a1, (uint64_t *)a2, a3);
  IKString::IKString(v6 + 3, (uint64_t *)(a2 + 24), a3);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_WORD *)(a1 + 53) = *(_WORD *)(a2 + 53);
  v7 = *(_WORD *)(a2 + 55);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  *(_WORD *)(a1 + 55) = v7;
  v8 = *(_WORD *)(a2 + 58);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  *(_WORD *)(a1 + 58) = v8;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  return a1;
}

FIK *ikinema::BoneNormalisationAlgorithmImpl::BoneNormalisationAlgorithmImpl(FIK *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  void (***v6)(FIK::CrtAllocator *__hidden);

  *(_QWORD *)a1 = &off_24CA6C928;
  *((_QWORD *)a1 + 1) = a3;
  *((_QWORD *)a1 + 2) = a4;
  v6 = FIK::defaultAllocator(a1);
  *((_QWORD *)a1 + 3) = 0;
  *((_QWORD *)a1 + 4) = 0;
  *((_QWORD *)a1 + 5) = 0;
  *((_QWORD *)a1 + 6) = v6;
  FIK::IKArray<FIK::Vector>::IKArray((_QWORD *)a1 + 7, a2);
  FIK::IKArray<FIK::Task *>::IKArray((_QWORD *)a1 + 11, a2 + 4);
  FIK::IKArray<FIK::Task *>::IKArray((_QWORD *)a1 + 15, a2 + 8);
  FIK::IKArray<FIK::Task *>::IKArray((_QWORD *)a1 + 19, a2 + 12);
  return a1;
}

uint64_t ikinema::BoneNormalisationAlgorithmImpl::process(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  char v17;

  v5 = ikinema::BufferContainer::buffer(a3, a1[1]);
  v6 = (_OWORD *)ikinema::Buffer::arrayView<FIK::Transform>(v5);
  v8 = v7;
  v9 = ikinema::BufferContainer::buffer(a3, a1[2]);
  v10 = ikinema::Buffer::arrayView<FIK::Transform>(v9);
  v12 = v11;
  v13 = a1[3];
  if (!v13)
  {
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<FIK::Transform const*,FIK::Transform const*,std::back_insert_iterator<FIK::IKArray<FIK::Transform>>>((uint64_t)&v17, v6, &v6[2 * v8], a1 + 3);
    v13 = a1[3];
  }
  FIK::generateHelperHierarchyPose((FIK *)(a1 + 7), (uint64_t)v6, v8, a1[5], v13, v10, v12);
  if (v8)
  {
    v14 = &v6[2 * v8];
    v15 = (_OWORD *)a1[5];
    do
    {
      *v15 = *v6;
      v15[1] = v6[1];
      v6 += 2;
      v15 += 2;
    }
    while (v6 != v14);
  }
  return 0;
}

FIK *ikinema::BoneNormalisationAlgorithm::create@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, FIK **a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a3;
  v6 = a2;
  return ikinema::AlgorithmHandle::make<ikinema::BoneNormalisationAlgorithmImpl,FIK::BoneNormalisationHelperHierarchy const&,ikinema::BufferKey &,ikinema::BufferKey &>(a1, &v6, &v5, a4);
}

FIK *ikinema::AlgorithmHandle::make<ikinema::BoneNormalisationAlgorithmImpl,FIK::BoneNormalisationHelperHierarchy const&,ikinema::BufferKey &,ikinema::BufferKey &>@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, FIK **a4@<X8>)
{
  FIK *result;

  result = (FIK *)FIK::FIKAlloc((FIK *)0xB8);
  if (result)
    result = ikinema::BoneNormalisationAlgorithmImpl::BoneNormalisationAlgorithmImpl(result, a1, *a2, *a3);
  *a4 = result;
  return result;
}

uint64_t ikinema::BoneNormalisationAlgorithmImpl::registerBuffers(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;

  v2 = *a2;
  if (!*a2)
    return 1;
  v3 = a2[2];
  v4 = 72 * v2;
  v5 = (uint64_t *)(v3 + 56);
  while (1)
  {
    v6 = *v5;
    v5 += 9;
    if (v6 == *(_QWORD *)(a1 + 8))
      break;
    v4 -= 72;
    if (!v4)
      return 1;
  }
  v7 = 72 * v2;
  v8 = (uint64_t *)(v3 + 56);
  while (1)
  {
    v9 = *v8;
    v8 += 9;
    if (v9 == *(_QWORD *)(a1 + 16))
      break;
    v7 -= 72;
    if (!v7)
      return 1;
  }
  return 0;
}

const char *ikinema::AlgorithmBlockBase<ikinema::BoneNormalisationAlgorithm>::typeId()
{
  const char *result;
  unsigned __int8 *v1;
  uint64_t v2;
  unsigned int v3;

  result = "N7ikinema26BoneNormalisationAlgorithmE";
  if (((unint64_t)"N7ikinema26BoneNormalisationAlgorithmE" & 0x8000000000000000) != 0)
  {
    v1 = (unsigned __int8 *)((unint64_t)"N7ikinema26BoneNormalisationAlgorithmE" & 0x7FFFFFFFFFFFFFFFLL);
    v2 = 5381;
    do
    {
      result = (const char *)v2;
      v3 = *v1++;
      v2 = (33 * v2) ^ v3;
    }
    while (v3);
  }
  return result;
}

void ikinema::BoneNormalisationAlgorithmImpl::~BoneNormalisationAlgorithmImpl(ikinema::BoneNormalisationAlgorithmImpl *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *((_QWORD *)this + 19) = 0;
  v2 = *((_QWORD *)this + 21);
  if (v2)
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)this + 22) + 24))(*((_QWORD *)this + 22), v2, 0, 8);
  *((_QWORD *)this + 15) = 0;
  v3 = *((_QWORD *)this + 17);
  if (v3)
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)this + 18) + 24))(*((_QWORD *)this + 18), v3, 0, 8);
  *((_QWORD *)this + 11) = 0;
  v4 = *((_QWORD *)this + 13);
  if (v4)
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)this + 14) + 24))(*((_QWORD *)this + 14), v4, 0, 8);
  *((_QWORD *)this + 7) = 0;
  v5 = *((_QWORD *)this + 9);
  if (v5)
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)this + 10) + 24))(*((_QWORD *)this + 10), v5, 0, 8);
  *((_QWORD *)this + 3) = 0;
  v6 = *((_QWORD *)this + 5);
  if (v6)
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)this + 6) + 24))(*((_QWORD *)this + 6), v6, 0, 8);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *((_QWORD *)this + 19) = 0;
  v2 = *((_QWORD *)this + 21);
  if (v2)
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)this + 22) + 24))(*((_QWORD *)this + 22), v2, 0, 8);
  *((_QWORD *)this + 15) = 0;
  v3 = *((_QWORD *)this + 17);
  if (v3)
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)this + 18) + 24))(*((_QWORD *)this + 18), v3, 0, 8);
  *((_QWORD *)this + 11) = 0;
  v4 = *((_QWORD *)this + 13);
  if (v4)
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)this + 14) + 24))(*((_QWORD *)this + 14), v4, 0, 8);
  *((_QWORD *)this + 7) = 0;
  v5 = *((_QWORD *)this + 9);
  if (v5)
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)this + 10) + 24))(*((_QWORD *)this + 10), v5, 0, 8);
  *((_QWORD *)this + 3) = 0;
  v6 = *((_QWORD *)this + 5);
  if (v6)
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)this + 6) + 24))(*((_QWORD *)this + 6), v6, 0, 8);
  JUMPOUT(0x212BCAFB4);
}

const char *ikinema::BoneNormalisationAlgorithmImpl::name(ikinema::BoneNormalisationAlgorithmImpl *this)
{
  return "BoneNormalisationAlgorithm";
}

_OWORD *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<FIK::Transform const*,FIK::Transform const*,std::back_insert_iterator<FIK::IKArray<FIK::Transform>>>(uint64_t a1, _OWORD *a2, _OWORD *a3, uint64_t *a4)
{
  _OWORD *v5;
  uint64_t v7;
  _OWORD *v8;

  v5 = a2;
  if (a2 != a3)
  {
    v7 = *a4;
    do
    {
      FIK::IKArray<FIK::Transform>::reserve(a4, v7 + 1);
      v8 = (_OWORD *)(a4[2] + 32 * *a4);
      *v8 = *v5;
      v8[1] = v5[1];
      v7 = *a4 + 1;
      *a4 = v7;
      v5 += 2;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

float32x4_t FIK::AutoMatch::calculateSourceTransform@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, float32x4_t *a3@<X2>, int32x4_t *a4@<X3>, float32x4_t *a5@<X4>, float32x4_t *a6@<X5>, float32x4_t *a7@<X8>, int32x4_t a8@<Q4>, int32x4_t a9@<Q5>)
{
  uint64_t v9;
  uint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  uint64_t v14;
  int8x16_t v15;
  uint64_t v16;
  int8x16_t v17;
  float v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x4_t v29;
  float32x2_t v30;
  float32x2_t v31;
  float v32;
  float32_t v33;
  float32x2_t v34;
  float32x2_t v35;
  float32x2_t v36;
  float32x2_t v37;
  float v38;
  unsigned int v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v46;
  float v48;
  unsigned int v49;
  float32x2_t v50;
  float32x2_t v51;
  float32x2_t v52;
  float32x2_t v53;
  float32x2_t v54;
  float32x4_t v55;
  float v56;
  float32x2_t v57;
  float32x2_t v58;
  float32x2_t v59;
  float32x2_t v60;
  float32x2_t v61;
  float32x4_t v63;
  float32x2_t v64;
  float32x2_t v65;
  float v66;
  float32_t v67;
  float32x2_t v68;
  float32x2_t v69;
  float32x2_t v70;
  float32x2_t v71;
  float v72;
  unsigned int v73;
  float32x2_t v74;
  float32x2_t v75;
  float32x2_t v76;
  float32x2_t v77;
  float32x2_t v78;
  float32x2_t v79;
  float32x2_t v80;
  float v82;
  unsigned int v83;
  float32x2_t v84;
  float32x2_t v85;
  float32x2_t v86;
  float32x2_t v87;
  float32x2_t v88;
  int32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  int8x16_t v92;
  float32x4_t v93;
  float32x4_t v94;
  int32x4_t v95;
  int8x16_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  int32x4_t v101;
  int8x16_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t result;
  float32x4_t v106;
  float32x4_t v107;
  int32x4_t v108;
  float32x4_t v109;
  int32x4_t v110;
  float32x4_t v111;

  v9 = *(int *)(a1 + 12);
  if (v9 <= 5)
  {
    a8.i32[0] = dword_210804B1C[v9];
    a8.i32[1] = dword_210804B34[v9];
    a8.i32[2] = dword_210804B4C[v9];
  }
  v10 = *(int *)(a1 + 8);
  if (v10 <= 5)
  {
    a9.i32[0] = dword_210804B1C[v10];
    a9.i32[1] = dword_210804B34[v10];
    a9.i32[2] = dword_210804B4C[v10];
  }
  v11 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(a9, a9), (int8x16_t)a9, 0xCuLL);
  v12 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(a8, a8), (int8x16_t)a8, 0xCuLL);
  v13 = vmulq_f32(v12, vnegq_f32((float32x4_t)a9));
  v14 = *(int *)(a2 + 12);
  if (v14 <= 5)
  {
    v12.i32[0] = dword_210804B1C[v14];
    v12.i32[1] = dword_210804B34[v14];
    v12.i32[2] = dword_210804B4C[v14];
  }
  v15 = (int8x16_t)vmlaq_f32(v13, (float32x4_t)a8, v11);
  v16 = *(int *)(a2 + 8);
  if (v16 <= 5)
  {
    v11.i32[0] = dword_210804B1C[v16];
    v11.i32[1] = dword_210804B34[v16];
    v11.i32[2] = dword_210804B4C[v16];
  }
  v17 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v12, (int32x4_t)v12), (int8x16_t)v12, 0xCuLL), vnegq_f32(v11)), v12, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v11, (int32x4_t)v11), (int8x16_t)v11, 0xCuLL));
  v18 = (float)(*(float *)&a8.i32[1] + *(float *)a9.i32) + *(float *)&v15.i32[1];
  if (v18 >= 0.0)
  {
    v32 = sqrtf(v18 + 1.0);
    v33 = v32 + v32;
    v34 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(v32 + v32));
    v35 = vmul_f32(v34, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v32 + v32), v34));
    v36.i32[0] = vextq_s8((int8x16_t)a8, (int8x16_t)a8, 8uLL).u32[0];
    v36.i32[1] = v15.i32[2];
    v15.i32[1] = a9.i32[2];
    v35.i32[0] = vmul_f32(v35, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v32 + v32), v35)).u32[0];
    *(float32x2_t *)v29.f32 = vmul_n_f32(vsub_f32(v36, *(float32x2_t *)v15.i8), v35.f32[0]);
    v37.i32[0] = vsub_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)a9.i8, 1), *(float32x2_t *)a8.i8).u32[0];
    v37.f32[1] = v33;
    v35.i32[1] = 0.25;
    v31 = vmul_f32(v37, v35);
  }
  else if (*(float *)a9.i32 < *(float *)&a8.i32[1] || *(float *)a9.i32 < *(float *)&v15.i32[1])
  {
    v38 = 1.0 - *(float *)a9.i32;
    if (*(float *)&a8.i32[1] >= *(float *)&v15.i32[1])
    {
      v48 = sqrtf(*(float *)&a8.i32[1] + (float)(v38 - *(float *)&v15.i32[1]));
      *(float *)&v49 = v48 + v48;
      v50 = vrecpe_f32((float32x2_t)v49);
      v51 = vmul_f32(v50, vrecps_f32((float32x2_t)v49, v50));
      v52.i32[0] = vmul_f32(v51, vrecps_f32((float32x2_t)v49, v51)).u32[0];
      v51.i32[0] = vadd_f32(*(float32x2_t *)a8.i8, (float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)a9.i8, 1)).u32[0];
      v51.i32[1] = v49;
      v53 = (float32x2_t)vzip1_s32(*(int32x2_t *)v15.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL));
      v54.i32[0] = vadd_f32(v53, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a8, (int8x16_t)a8, 8uLL)).u32[0];
      v54.i32[1] = vsub_f32(v53, (float32x2_t)vdup_laneq_s32(a9, 2)).i32[1];
      v31 = vmul_n_f32(v54, v52.f32[0]);
      v52.i32[1] = 0.25;
      *(float32x2_t *)v29.f32 = vmul_f32(v51, v52);
    }
    else
    {
      *(float *)&v39 = sqrtf((float)(v38 - *(float *)&a8.i32[1]) + *(float *)&v15.i32[1]);
      v40.i32[0] = vextq_s8(v15, v15, 8uLL).u32[0];
      v40.i32[1] = v15.i32[0];
      v41 = (float32x2_t)__PAIR64__(a9.u32[1], v39);
      v42 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a9, (int8x16_t)a9, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a8, (int8x16_t)a8, 8uLL)), v40);
      v43 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a8.i8, 0);
      v44 = vsub_f32(*(float32x2_t *)a9.i8, v43);
      v43.i32[0] = 2.0;
      v43.i32[0] = vmul_f32(v41, v43).u32[0];
      v43.i32[1] = v44.i32[1];
      v45 = vrecpe_f32((float32x2_t)v43.u32[0]);
      v46 = vmul_f32(v45, vrecps_f32((float32x2_t)v43.u32[0], v45));
      v44.i32[0] = vmul_f32(v46, vrecps_f32((float32x2_t)v43.u32[0], v46)).u32[0];
      *(float32x2_t *)v29.f32 = vmul_n_f32(v42, v44.f32[0]);
      __asm { FMOV            V6.2S, #0.25 }
      _D6.i32[1] = v44.i32[0];
      v31 = vmul_f32(v43, _D6);
    }
  }
  else
  {
    v19 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a8.i8, 0);
    v20 = vadd_f32(v19, *(float32x2_t *)a9.i8);
    v19.i32[0] = sqrtf(*(float *)a9.i32 + (float)((float)(1.0 - *(float *)&a8.i32[1]) - *(float *)&v15.i32[1]));
    v21.i32[0] = vadd_f32(v19, v19).u32[0];
    v21.i32[1] = v20.i32[1];
    v22 = vrecpe_f32((float32x2_t)v21.u32[0]);
    v23 = vmul_f32(v22, vrecps_f32((float32x2_t)v21.u32[0], v22));
    v19.i32[0] = vmul_f32(v23, vrecps_f32((float32x2_t)v21.u32[0], v23)).u32[0];
    __asm { FMOV            V16.2S, #0.25 }
    _D16.i32[1] = v19.i32[0];
    *(float32x2_t *)v29.f32 = vmul_f32(v21, _D16);
    _D16.i32[0] = vextq_s8(v15, v15, 8uLL).u32[0];
    _D16.i32[1] = v15.i32[0];
    v30.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a9, (int8x16_t)a9, 8uLL), _D16).u32[0];
    v30.i32[1] = vsub_f32((float32x2_t)vdup_laneq_s32(a8, 2), _D16).i32[1];
    v31 = vmul_n_f32(v30, v19.f32[0]);
  }
  v55 = a5[1];
  v56 = (float)(v12.f32[1] + v11.f32[0]) + *(float *)&v17.i32[1];
  if (v56 >= 0.0)
  {
    v66 = sqrtf(v56 + 1.0);
    v67 = v66 + v66;
    v68 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(v66 + v66));
    v69 = vmul_f32(v68, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v66 + v66), v68));
    v70.i32[0] = vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL).u32[0];
    v70.i32[1] = v17.i32[2];
    v17.i32[1] = v11.i32[2];
    v69.i32[0] = vmul_f32(v69, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v66 + v66), v69)).u32[0];
    *(float32x2_t *)v63.f32 = vmul_n_f32(vsub_f32(v70, *(float32x2_t *)v17.i8), v69.f32[0]);
    v71.i32[0] = vsub_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v11.f32, 1), *(float32x2_t *)v12.f32).u32[0];
    v71.f32[1] = v67;
    v69.i32[1] = 0.25;
    v65 = vmul_f32(v71, v69);
  }
  else if (v11.f32[0] < v12.f32[1] || v11.f32[0] < *(float *)&v17.i32[1])
  {
    v72 = 1.0 - v11.f32[0];
    if (v12.f32[1] >= *(float *)&v17.i32[1])
    {
      v82 = sqrtf(v12.f32[1] + (float)(v72 - *(float *)&v17.i32[1]));
      *(float *)&v83 = v82 + v82;
      v84 = vrecpe_f32((float32x2_t)v83);
      v85 = vmul_f32(v84, vrecps_f32((float32x2_t)v83, v84));
      v86.i32[0] = vmul_f32(v85, vrecps_f32((float32x2_t)v83, v85)).u32[0];
      v85.i32[0] = vadd_f32(*(float32x2_t *)v12.f32, (float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v11.f32, 1)).u32[0];
      v85.i32[1] = v83;
      v87 = (float32x2_t)vzip1_s32(*(int32x2_t *)v17.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL));
      v88.i32[0] = vadd_f32(v87, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL)).u32[0];
      v88.i32[1] = vsub_f32(v87, (float32x2_t)vdup_laneq_s32(*(int32x4_t *)&v11, 2)).i32[1];
      v65 = vmul_n_f32(v88, v86.f32[0]);
      v86.i32[1] = 0.25;
      *(float32x2_t *)v63.f32 = vmul_f32(v85, v86);
    }
    else
    {
      *(float *)&v73 = sqrtf((float)(v72 - v12.f32[1]) + *(float *)&v17.i32[1]);
      v74.i32[0] = vextq_s8(v17, v17, 8uLL).u32[0];
      v74.i32[1] = v17.i32[0];
      v75 = (float32x2_t)__PAIR64__(v11.u32[1], v73);
      v76 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL)), v74);
      v77 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v12.f32, 0);
      v78 = vsub_f32(*(float32x2_t *)v11.f32, v77);
      v77.i32[0] = 2.0;
      v77.i32[0] = vmul_f32(v75, v77).u32[0];
      v77.i32[1] = v78.i32[1];
      v79 = vrecpe_f32((float32x2_t)v77.u32[0]);
      v80 = vmul_f32(v79, vrecps_f32((float32x2_t)v77.u32[0], v79));
      v78.i32[0] = vmul_f32(v80, vrecps_f32((float32x2_t)v77.u32[0], v80)).u32[0];
      *(float32x2_t *)v63.f32 = vmul_n_f32(v76, v78.f32[0]);
      __asm { FMOV            V2.2S, #0.25 }
      _D2.i32[1] = v78.i32[0];
      v65 = vmul_f32(v77, _D2);
    }
  }
  else
  {
    v57 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v12.f32, 0);
    v58 = vadd_f32(v57, *(float32x2_t *)v11.f32);
    v57.i32[0] = sqrtf(v11.f32[0] + (float)((float)(1.0 - v12.f32[1]) - *(float *)&v17.i32[1]));
    v59.i32[0] = vadd_f32(v57, v57).u32[0];
    v59.i32[1] = v58.i32[1];
    v60 = vrecpe_f32((float32x2_t)v59.u32[0]);
    v61 = vmul_f32(v60, vrecps_f32((float32x2_t)v59.u32[0], v60));
    v57.i32[0] = vmul_f32(v61, vrecps_f32((float32x2_t)v59.u32[0], v61)).u32[0];
    __asm { FMOV            V16.2S, #0.25 }
    _D16.i32[1] = v57.i32[0];
    *(float32x2_t *)v63.f32 = vmul_f32(v59, _D16);
    _D16.i32[0] = vextq_s8(v17, v17, 8uLL).u32[0];
    _D16.i32[1] = v17.i32[0];
    v64.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL), _D16).u32[0];
    v64.i32[1] = vsub_f32((float32x2_t)vdup_laneq_s32(*(int32x4_t *)&v12, 2), _D16).i32[1];
    v65 = vmul_n_f32(v64, v57.f32[0]);
  }
  *(float32x2_t *)&v29.u32[2] = v31;
  v89 = (int32x4_t)vnegq_f32(v29);
  v90 = (float32x4_t)vrev64q_s32((int32x4_t)v29);
  v90.i32[0] = v89.i32[1];
  v90.i32[3] = v89.i32[2];
  v91 = vmlaq_laneq_f32(vmulq_laneq_f32(v29, v55, 3), v90, v55, 2);
  v92 = (int8x16_t)vtrn2q_s32((int32x4_t)v29, vtrn1q_s32((int32x4_t)v29, v89));
  v93 = vaddq_f32(v91, vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v29, (int8x16_t)v89, 8uLL), *(float32x2_t *)v55.f32, 1), (float32x4_t)vextq_s8(v92, v92, 8uLL), v55.f32[0]));
  *(float32x2_t *)&v63.u32[2] = v65;
  v94 = a6[1];
  v95 = (int32x4_t)vnegq_f32(v63);
  v96 = (int8x16_t)vtrn2q_s32((int32x4_t)v63, vtrn1q_s32((int32x4_t)v63, v95));
  v97 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v63, (int8x16_t)v95, 8uLL), *(float32x2_t *)v94.f32, 1), (float32x4_t)vextq_s8(v96, v96, 8uLL), v94.f32[0]);
  v98 = (float32x4_t)vrev64q_s32((int32x4_t)v63);
  v98.i32[0] = v95.i32[1];
  v98.i32[3] = v95.i32[2];
  v99 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v63, v94, 3), v98, v94, 2), v97);
  v100 = vmulq_f32(v93, (float32x4_t)xmmword_210802C20);
  v101 = (int32x4_t)vnegq_f32(v99);
  v102 = (int8x16_t)vtrn2q_s32((int32x4_t)v99, vtrn1q_s32((int32x4_t)v99, v101));
  v103 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v99, (int8x16_t)v101, 8uLL), *(float32x2_t *)v100.f32, 1), (float32x4_t)vextq_s8(v102, v102, 8uLL), v100.f32[0]);
  v104 = (float32x4_t)vrev64q_s32((int32x4_t)v99);
  v104.i32[0] = v101.i32[1];
  v104.i32[3] = v101.i32[2];
  result = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v99, v100, 3), v104, v100, 2), v103);
  v106 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)result, (int32x4_t)result), (int8x16_t)result, 0xCuLL);
  v107 = vnegq_f32(result);
  v108 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*a4, *a4), *(int8x16_t *)a4, 0xCuLL), v107), *(float32x4_t *)a4, v106);
  v109 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v108, v108), (int8x16_t)v108, 0xCuLL);
  v110 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v109, (int32x4_t)v109), (int8x16_t)v109, 0xCuLL), v107), v109, v106);
  v111 = vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v110, v110), (int8x16_t)v110, 0xCuLL), v109, result, 3);
  v109.i64[0] = 0x4000000040000000;
  v109.i64[1] = 0x4000000040000000;
  *a7 = vsubq_f32(*a3, vmlaq_f32(*(float32x4_t *)a4, v109, v111));
  a7[1] = result;
  return result;
}

float FIK::AutoMatch::calculateSourceScale(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4)
{
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;

  v4 = vsubq_f32(*a4, *a3);
  v5 = vmulq_f32(v4, v4);
  v6 = vsubq_f32(*a2, *a1);
  v7 = vmulq_f32(v6, v6);
  return sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1))).f32[0])/ sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v5, 2), vaddq_f32(v5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 1))).f32[0]);
}

float32x4_t FIK::AutoMatch::calculateTaskOffset@<Q0>(float32x4_t *a1@<X0>, float32x4_t *a2@<X1>, float32x4_t *a3@<X2>, float32x4_t *a4@<X8>, double a5@<D0>)
{
  float32x4_t v5;
  float32x4_t v6;
  int32x4_t v7;
  int8x16_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  int32x4_t v13;
  int8x16_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  int8x16_t v18;
  float32x2_t v19;
  float32x4_t v20;
  unsigned __int32 v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  int32x4_t v27;
  float32x4_t v28;
  int32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  int32x4_t v34;
  float32x4_t v35;
  int32x4_t v36;
  float32x4_t result;

  v6 = *a2;
  v5 = a2[1];
  v7 = (int32x4_t)vnegq_f32(v5);
  v8 = (int8x16_t)vtrn2q_s32((int32x4_t)v5, vtrn1q_s32((int32x4_t)v5, v7));
  v9 = a3[1];
  v10 = (float32x4_t)vrev64q_s32((int32x4_t)v5);
  v10.i32[0] = v7.i32[1];
  v10.i32[3] = v7.i32[2];
  v11 = vmulq_f32(vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v5, v9, 3), v10, v9, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v5, (int8x16_t)v7, 8uLL), *(float32x2_t *)v9.f32, 1), (float32x4_t)vextq_s8(v8, v8, 8uLL), v9.f32[0])), (float32x4_t)xmmword_210802C20);
  v12 = a1[1];
  v13 = (int32x4_t)vnegq_f32(v12);
  v14 = (int8x16_t)vtrn2q_s32((int32x4_t)v12, vtrn1q_s32((int32x4_t)v12, v13));
  v15 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v12, (int8x16_t)v13, 8uLL), *(float32x2_t *)v11.f32, 1), (float32x4_t)vextq_s8(v14, v14, 8uLL), v11.f32[0]);
  v16 = (float32x4_t)vrev64q_s32((int32x4_t)v12);
  v16.i32[0] = v13.i32[1];
  v16.i32[3] = v13.i32[2];
  v17 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v12, v11, 3), v16, v11, 2), v15);
  v18 = (int8x16_t)vmulq_f32(v17, v17);
  v19 = vadd_f32(*(float32x2_t *)v18.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL));
  if (vaddv_f32(v19) == 0.0)
  {
    v20 = (float32x4_t)xmmword_210802BA0;
  }
  else
  {
    v21 = vadd_f32(v19, (float32x2_t)vdup_lane_s32((int32x2_t)v19, 1)).u32[0];
    v22 = vrsqrte_f32((float32x2_t)v21);
    v23 = vmul_f32(v22, vrsqrts_f32((float32x2_t)v21, vmul_f32(v22, v22)));
    v20 = vmulq_n_f32(v17, vmul_f32(v23, vrsqrts_f32((float32x2_t)v21, vmul_f32(v23, v23))).f32[0]);
  }
  v24 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v11, (int32x4_t)v11), (int8x16_t)v11, 0xCuLL);
  v25 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v9, (int32x4_t)v9), (int8x16_t)v9, 0xCuLL);
  v26 = vnegq_f32(v9);
  v27 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v6, (int32x4_t)v6), (int8x16_t)v6, 0xCuLL), v26), v6, v25);
  v28 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v27, v27), (int8x16_t)v27, 0xCuLL);
  v29 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v28, (int32x4_t)v28), (int8x16_t)v28, 0xCuLL), v26), v28, v25);
  v30 = vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v29, v29), (int8x16_t)v29, 0xCuLL), v28, v9, 3);
  v31.i64[0] = 0x4000000040000000;
  v31.i64[1] = 0x4000000040000000;
  v32 = vdivq_f32(vsubq_f32(*a1, vmulq_n_f32(vaddq_f32(*a3, vmlaq_f32(v6, v31, v30)), *(float *)&a5)), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a5, 0));
  v33 = vnegq_f32(v11);
  v34 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v32, (int32x4_t)v32), (int8x16_t)v32, 0xCuLL), v33), v32, v24);
  v35 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v34, v34), (int8x16_t)v34, 0xCuLL);
  v36 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v35, (int32x4_t)v35), (int8x16_t)v35, 0xCuLL), v33), v35, v24);
  result = vmlaq_f32(v32, v31, vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v36, v36), (int8x16_t)v36, 0xCuLL), v35, v11, 3));
  *a4 = result;
  a4[1] = v20;
  return result;
}

float32x4_t FIK::AutoMatch::calculateSourceOffset@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, float32x4_t *a4@<X8>)
{
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  int32x4_t v7;
  float32x4_t v8;
  int32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  int32x4_t v15;
  float32x4_t v16;
  int32x4_t v17;
  float32x4_t v18;
  int8x16_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int32x4_t v24;
  float32x4_t v25;
  int32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int32x4_t v29;
  int8x16_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  int32x4_t v35;
  float32x4_t v36;
  int32x4_t v37;
  float32x4_t result;

  v4 = vmulq_f32(*(float32x4_t *)(a2 + 16), (float32x4_t)xmmword_210802C20);
  v5 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v4, (int32x4_t)v4), (int8x16_t)v4, 0xCuLL);
  v6 = vnegq_f32(v4);
  v7 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)a2, *(int32x4_t *)a2), *(int8x16_t *)a2, 0xCuLL), v6), *(float32x4_t *)a2, v5);
  v8 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v7, v7), (int8x16_t)v7, 0xCuLL);
  v9 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v8, (int32x4_t)v8), (int8x16_t)v8, 0xCuLL), v6), v8, v5);
  v10 = vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v9, v9), (int8x16_t)v9, 0xCuLL), v8, v4, 3);
  v8.i64[0] = 0x4000000040000000;
  v8.i64[1] = 0x4000000040000000;
  v11 = vmlaq_f32(*(float32x4_t *)a2, v8, v10);
  v12 = vmulq_f32(*(float32x4_t *)(a3 + 16), (float32x4_t)xmmword_210802C20);
  v13 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v12, (int32x4_t)v12), (int8x16_t)v12, 0xCuLL);
  v14 = vnegq_f32(v12);
  v15 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)a3, *(int32x4_t *)a3), *(int8x16_t *)a3, 0xCuLL), v14), *(float32x4_t *)a3, v13);
  v16 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v15, v15), (int8x16_t)v15, 0xCuLL);
  v17 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v16, (int32x4_t)v16), (int8x16_t)v16, 0xCuLL), v14), v16, v13);
  v18 = vmlaq_f32(*(float32x4_t *)a3, v8, vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v17, v17), (int8x16_t)v17, 0xCuLL), v16, v12, 3));
  v19 = (int8x16_t)vtrn2q_s32((int32x4_t)v12, vtrn1q_s32((int32x4_t)v12, (int32x4_t)v14));
  v20 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v12, (int8x16_t)v14, 8uLL), *(float32x2_t *)v4.f32, 1), (float32x4_t)vextq_s8(v19, v19, 8uLL), v4.f32[0]);
  v21 = (float32x4_t)vrev64q_s32((int32x4_t)v12);
  v21.i32[0] = v14.i32[1];
  v21.i32[3] = v14.i32[2];
  v22 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v12, v4, 3), v21, v4, 2), v20);
  v23 = vnegq_f32(v18);
  v24 = (int32x4_t)vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v23, (int32x4_t)v23), (int8x16_t)v23, 0xCuLL), v6), v5, v18);
  v25 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v24, v24), (int8x16_t)v24, 0xCuLL);
  v26 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v25, (int32x4_t)v25), (int8x16_t)v25, 0xCuLL), v6), v25, v5);
  v27 = vsubq_f32(vmlaq_f32(v23, v8, vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v26, v26), (int8x16_t)v26, 0xCuLL), v25, v4, 3)), v11);
  v28 = *(float32x4_t *)(a1 + 16);
  v29 = (int32x4_t)vnegq_f32(v28);
  v30 = (int8x16_t)vtrn2q_s32((int32x4_t)v28, vtrn1q_s32((int32x4_t)v28, v29));
  v31 = (float32x4_t)vrev64q_s32((int32x4_t)v28);
  v31.i32[0] = v29.i32[1];
  v31.i32[3] = v29.i32[2];
  v32 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v28, v22, 3), v31, v22, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v28, (int8x16_t)v29, 8uLL), *(float32x2_t *)v22.f32, 1), (float32x4_t)vextq_s8(v30, v30, 8uLL), v22.f32[0]));
  v33 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v22, (int32x4_t)v22), (int8x16_t)v22, 0xCuLL);
  v34 = vnegq_f32(v22);
  v35 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)a1, *(int32x4_t *)a1), *(int8x16_t *)a1, 0xCuLL), v34), *(float32x4_t *)a1, v33);
  v36 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v35, v35), (int8x16_t)v35, 0xCuLL);
  v37 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v36, (int32x4_t)v36), (int8x16_t)v36, 0xCuLL), v34), v36, v33);
  result = vaddq_f32(vmlaq_f32(*(float32x4_t *)a1, v8, vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v37, v37), (int8x16_t)v37, 0xCuLL), v36, v22, 3)), v27);
  *a4 = result;
  a4[1] = v32;
  return result;
}

float32x4_t FIK::AutoMatch::calculateSourceParentOffset@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, float32x4_t *a4@<X8>)
{
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  int32x4_t v7;
  float32x4_t v8;
  int32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  int32x4_t v13;
  int8x16_t v14;
  float32x4_t v15;
  float32x4_t v16;
  int32x4_t v17;
  float32x4_t v18;
  int32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int32x4_t v24;
  float32x4_t v25;
  int32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int32x4_t v29;
  int8x16_t v30;
  float32x4_t v31;
  float32x4_t v32;
  int32x4_t v33;
  float32x4_t v34;
  int32x4_t v35;
  float32x4_t result;

  v4 = vmulq_f32(*(float32x4_t *)(a3 + 16), (float32x4_t)xmmword_210802C20);
  v5 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v4, (int32x4_t)v4), (int8x16_t)v4, 0xCuLL);
  v6 = vnegq_f32(v4);
  v7 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)a3, *(int32x4_t *)a3), *(int8x16_t *)a3, 0xCuLL), v6), *(float32x4_t *)a3, v5);
  v8 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v7, v7), (int8x16_t)v7, 0xCuLL);
  v9 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v8, (int32x4_t)v8), (int8x16_t)v8, 0xCuLL), v6), v8, v5);
  v10 = vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v9, v9), (int8x16_t)v9, 0xCuLL), v8, v4, 3);
  v8.i64[0] = 0x4000000040000000;
  v8.i64[1] = 0x4000000040000000;
  v11 = vmlaq_f32(*(float32x4_t *)a3, v8, v10);
  v12 = *(float32x4_t *)(a1 + 16);
  v13 = (int32x4_t)vnegq_f32(v12);
  v14 = (int8x16_t)vtrn2q_s32((int32x4_t)v12, vtrn1q_s32((int32x4_t)v12, v13));
  v15 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v12, (int8x16_t)v13, 8uLL), *(float32x2_t *)v4.f32, 1), (float32x4_t)vextq_s8(v14, v14, 8uLL), v4.f32[0]);
  v16 = (float32x4_t)vrev64q_s32((int32x4_t)v12);
  v16.i32[0] = v13.i32[1];
  v16.i32[3] = v13.i32[2];
  v17 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)a1, *(int32x4_t *)a1), *(int8x16_t *)a1, 0xCuLL), v6), *(float32x4_t *)a1, v5);
  v18 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v17, v17), (int8x16_t)v17, 0xCuLL);
  v19 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v18, (int32x4_t)v18), (int8x16_t)v18, 0xCuLL), v6), v18, v5);
  v20 = vsubq_f32(vmlaq_f32(*(float32x4_t *)a1, v8, vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v19, v19), (int8x16_t)v19, 0xCuLL), v18, v4, 3)), v11);
  v21 = vmulq_f32(vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v12, v4, 3), v16, v4, 2), v15), (float32x4_t)xmmword_210802C20);
  v22 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v21, (int32x4_t)v21), (int8x16_t)v21, 0xCuLL);
  v23 = vnegq_f32(v21);
  v24 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v20, (int32x4_t)v20), (int8x16_t)v20, 0xCuLL), v23), v20, v22);
  v25 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v24, v24), (int8x16_t)v24, 0xCuLL);
  v26 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v25, (int32x4_t)v25), (int8x16_t)v25, 0xCuLL), v23), v25, v22);
  v27 = vmlaq_f32(v20, v8, vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v26, v26), (int8x16_t)v26, 0xCuLL), v25, v21, 3));
  v28 = *(float32x4_t *)(a2 + 16);
  v29 = (int32x4_t)vnegq_f32(v28);
  v30 = (int8x16_t)vtrn2q_s32((int32x4_t)v28, vtrn1q_s32((int32x4_t)v28, v29));
  v31 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v28, (int8x16_t)v29, 8uLL), *(float32x2_t *)v21.f32, 1), (float32x4_t)vextq_s8(v30, v30, 8uLL), v21.f32[0]);
  v32 = (float32x4_t)vrev64q_s32((int32x4_t)v28);
  v32.i32[0] = v29.i32[1];
  v32.i32[3] = v29.i32[2];
  v33 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)a2, *(int32x4_t *)a2), *(int8x16_t *)a2, 0xCuLL), v23), *(float32x4_t *)a2, v22);
  v34 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v33, v33), (int8x16_t)v33, 0xCuLL);
  v35 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v34, (int32x4_t)v34), (int8x16_t)v34, 0xCuLL), v23), v34, v22);
  result = vsubq_f32(vmlaq_f32(*(float32x4_t *)a2, v8, vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v35, v35), (int8x16_t)v35, 0xCuLL), v34, v21, 3)), v27);
  *a4 = result;
  a4[1] = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v28, v21, 3), v32, v21, 2), v31);
  return result;
}

float32x2_t FIK::Enrollment::FrameAdaptor::getVioPose@<D0>(FIK::Enrollment::FrameAdaptor *this@<X0>, FIK::Transform *a2@<X8>)
{
  return FIK::Transform::Transform(a2, (const simd_float4x4 *)(*(_QWORD *)this + 16));
}

float32x2_t FIK::Enrollment::FrameAdaptor::getCameraPoseForIndex@<D0>(FIK::Enrollment::FrameAdaptor *this@<X0>, uint64_t a2@<X1>, FIK::Transform *a3@<X8>)
{
  return FIK::Transform::Transform(a3, (const simd_float4x4 *)(**(_QWORD **)this + 80 * a2 + 16));
}

__n128 FIK::Enrollment::FrameAdaptor::getLiftedPositionForJoint@<Q0>(FIK::Enrollment::FrameAdaptor *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __n128 *a4@<X8>)
{
  __n128 result;

  result = *(__n128 *)(*(_QWORD *)(**(_QWORD **)this + 80 * a2) + 48 * a3 + 32);
  *a4 = result;
  return result;
}

float FIK::Enrollment::FrameAdaptor::getConfidenceForLiftedJoint(FIK::Enrollment::FrameAdaptor *this, uint64_t a2, uint64_t a3)
{
  return *(float *)(*(_QWORD *)(**(_QWORD **)this + 80 * a2) + 48 * a3);
}

__n128 FIK::Enrollment::FrameAdaptor::getRayDirectionForJoint@<Q0>(FIK::Enrollment::FrameAdaptor *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __n128 *a4@<X8>)
{
  __n128 result;

  result = *(__n128 *)(*(_QWORD *)(**(_QWORD **)this + 80 * a2) + 48 * a3 + 16);
  *a4 = result;
  return result;
}

uint64_t FIK::Enrollment::FrameAdaptor::ID(FIK::Enrollment::FrameAdaptor *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 80);
}

void FIK::Enrollment::FrameAdaptor::getHeadPose(float32x4_t **this@<X0>, FIK::Transform *a2@<X8>)
{
  char v3;

  if (*((_DWORD *)this + 2) != 1
    || (vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32((*this)[7], *(float32x4_t *)(MEMORY[0x24BDAEE00] + 16)), (int8x16_t)vceqq_f32((*this)[6], *MEMORY[0x24BDAEE00])), vandq_s8((int8x16_t)vceqq_f32((*this)[8], *(float32x4_t *)(MEMORY[0x24BDAEE00] + 32)), (int8x16_t)vceqq_f32((*this)[9], *(float32x4_t *)(MEMORY[0x24BDAEE00] + 48))))) & 0x80000000) != 0)
  {
    v3 = 0;
    *(_BYTE *)a2 = 0;
  }
  else
  {
    FIK::Transform::Transform(a2, (const simd_float4x4 *)&(*this)[6]);
    v3 = 1;
  }
  *((_BYTE *)a2 + 32) = v3;
}

float32x4_t FIK::Enrollment::FrameAdaptor::getRayDirectionForJoint@<Q0>(FIK::Enrollment::FrameAdaptor *this@<X0>, float a2@<S0>, uint64_t a3@<X1>, uint64_t a4@<X2>, float32x4_t *a5@<X8>)
{
  uint64_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float v10;
  float32x4_t result;
  uint64_t *v12;
  float32x4_t v13;

  v7 = *(_QWORD *)(**(_QWORD **)this + 80 * a3) + 48 * a4;
  v8 = *(float32x4_t *)(v7 + 16);
  v9 = vmulq_f32(v8, v8);
  v10 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), vaddq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1))).f32[0]);
  if (v10 == 0.0)
  {
    v13 = *(float32x4_t *)(v7 + 16);
    v12 = ikinemaLogObject();
    ikinemaAssertHandler(*v12, 0, (uint64_t)"getRayDirectionForJoint", "(rayLength != 0) Ray length is equal to zero");
    v8 = v13;
  }
  result = vmulq_n_f32(v8, a2 / v10);
  *a5 = result;
  return result;
}

float32x4_t FIK::Enrollment::FrameAdaptor::getRayEndForJoint@<Q0>(FIK::Enrollment::FrameAdaptor *this@<X0>, float a2@<S0>, uint64_t a3@<X1>, uint64_t a4@<X2>, float32x4_t *a5@<X8>)
{
  float32x4_t v8;
  float32x4_t v9;
  int32x4_t v10;
  float32x4_t v11;
  int32x4_t v12;
  float32x4_t v13;
  float32x4_t result;
  float32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;

  FIK::Enrollment::FrameAdaptor::getRayDirectionForJoint(this, a2, a3, a4, (float32x4_t *)&v17);
  FIK::Transform::Transform((FIK::Transform *)&v15, (const simd_float4x4 *)(**(_QWORD **)this + 80 * a3 + 16));
  v8 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v16, v16), (int8x16_t)v16, 0xCuLL);
  v9 = vnegq_f32((float32x4_t)v16);
  v10 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v17, v17), (int8x16_t)v17, 0xCuLL), v9), (float32x4_t)v17, v8);
  v11 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v10, v10), (int8x16_t)v10, 0xCuLL);
  v12 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v11, (int32x4_t)v11), (int8x16_t)v11, 0xCuLL), v9), v11, v8);
  v13.i64[0] = 0x4000000040000000;
  v13.i64[1] = 0x4000000040000000;
  result = vaddq_f32(v15, vmlaq_f32((float32x4_t)v17, v13, vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v12, v12), (int8x16_t)v12, 0xCuLL), v11, (float32x4_t)v16, 3)));
  *a5 = result;
  return result;
}

BOOL FIK::Enrollment::FrameAdaptor::isLiftedValid(FIK::Enrollment::FrameAdaptor *this, uint64_t a2, uint64_t a3)
{
  float32x4_t v3;
  float32x4_t v4;

  v3 = *(float32x4_t *)(*(_QWORD *)(**(_QWORD **)this + 80 * a2) + 48 * a3 + 32);
  v4 = vmulq_f32(v3, v3);
  return vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v4, 2), vaddq_f32(v4, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v4.f32, 1))).f32[0] > 0.00001;
}

BOOL FIK::Enrollment::FrameAdaptor::isRayDirValid(FIK::Enrollment::FrameAdaptor *this, uint64_t a2, uint64_t a3)
{
  float32x4_t v3;
  float32x4_t v4;

  v3 = *(float32x4_t *)(*(_QWORD *)(**(_QWORD **)this + 80 * a2) + 48 * a3 + 16);
  v4 = vmulq_f32(v3, v3);
  return vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v4, 2), vaddq_f32(v4, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v4.f32, 1))).f32[0] > 0.00001;
}

uint64_t FIK::Enrollment::SourceDefinition::cameraIndexForName(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  BOOL v7;
  int v8;
  int v13;
  uint64_t v14;
  uint64_t v15;

  if (a3 == 6)
  {
    if (*(_DWORD *)a2 != 1835098989 || *(_WORD *)(a2 + 4) != 27743)
    {
      if (*(_DWORD *)a2 != 1835098989 || *(_WORD *)(a2 + 4) != 29279)
      {
        if (*(_DWORD *)a2 != 1835098980 || *(_WORD *)(a2 + 4) != 27743)
        {
          v6 = *(unsigned __int16 *)(a2 + 4);
          v7 = *(_DWORD *)a2 == 1835098980;
          v8 = 29279;
          goto LABEL_29;
        }
LABEL_37:
        v13 = 2;
        goto LABEL_38;
      }
LABEL_36:
      v13 = 1;
      goto LABEL_38;
    }
LABEL_35:
    v13 = 0;
    goto LABEL_38;
  }
  if (a3 != 5)
    goto LABEL_44;
  if (*(_DWORD *)a2 == 1835098989 && *(_BYTE *)(a2 + 4) == 108)
    goto LABEL_35;
  if (*(_DWORD *)a2 == 1835098989 && *(_BYTE *)(a2 + 4) == 114)
    goto LABEL_36;
  if (*(_DWORD *)a2 == 1835098980 && *(_BYTE *)(a2 + 4) == 108)
    goto LABEL_37;
  v6 = *(unsigned __int8 *)(a2 + 4);
  v7 = *(_DWORD *)a2 == 1835098980;
  v8 = 114;
LABEL_29:
  if (!v7 || v6 != v8)
LABEL_44:
    FIK::Enrollment::SourceDefinition::cameraIndexForName();
  v13 = 3;
LABEL_38:
  v14 = *(_QWORD *)(a1 + 24);
  if (!v14)
    return 0xFFFFFFFFLL;
  v15 = 0;
  while (*(_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * v15) != v13)
  {
    if (v14 == ++v15)
      return 0xFFFFFFFFLL;
  }
  return v15;
}

uint64_t FIK::Enrollment::SourceDefinition::detectionIndexForName(uint64_t *a1, const void *a2, size_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  v3 = a1[1];
  if (!v3)
    return 0xFFFFFFFFLL;
  v6 = 0;
  v7 = *a1;
  while (strlen(*(const char **)(v7 + 8 * v6)) != a3 || memcmp(*(const void **)(v7 + 8 * v6), a2, a3))
  {
    if (v3 == ++v6)
      return 0xFFFFFFFFLL;
  }
  return v6;
}

uint64_t FIK::Enrollment::SourceDefinition::getDetectionIndicesForPrefixedName(FIK *a1, _BYTE *a2, size_t a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  size_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t *v19;
  uint64_t v20;
  const void *v21;
  size_t v22;
  uint64_t *v23;
  uint64_t v24;
  unsigned __int16 *v25;
  int v26;
  int v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[2];
  uint64_t *v34;
  void (***v35)(FIK::CrtAllocator *__hidden);

  v10 = 0;
  v11 = 0;
  v33[0] = 0;
  v33[1] = 0;
  v34 = 0;
  v35 = FIK::defaultAllocator(a1);
  do
  {
    if (a3 <= v11)
    {
      v13 = -1;
    }
    else
    {
      v12 = memchr(&a2[v11], 95, a3 - v11);
      if (v12)
        v13 = v12 - a2;
      else
        v13 = -1;
    }
    v14 = a3 - v11;
    if (a3 < v11)
      abort();
    v15 = v13 - v11;
    v16 = &a2[v11];
    if (v14 >= v15)
      v17 = v15;
    else
      v17 = v14;
    result = (uint64_t)FIK::IKArray<std::string_view>::reserve(v33, v10 + 1);
    v19 = &v34[2 * v33[0]];
    *v19 = (uint64_t)v16;
    v19[1] = v17;
    v20 = v33[0];
    v10 = ++v33[0];
    v11 = v13 + 1;
  }
  while (v13 != -1);
  switch(v20)
  {
    case 0:
      result = FIK::Enrollment::SourceDefinition::detectionIndexForName((uint64_t *)a1, a2, a3);
      *a4 = result;
      if (*((_QWORD *)a1 + 3) == 1)
      {
        *a5 = 0;
        goto LABEL_28;
      }
      v31 = *((_QWORD *)a1 + 5);
      if (!v31)
        goto LABEL_28;
      v32 = 0;
      break;
    case 1:
      *a5 = FIK::Enrollment::SourceDefinition::cameraIndexForName((uint64_t)a1, *v34, v34[1]);
      v21 = (const void *)v34[2];
      v22 = v34[3];
      goto LABEL_27;
    case 2:
      v23 = v34;
      v24 = v34[3];
      if (v24 == 3
        && ((v25 = (unsigned __int16 *)v34[2], v26 = *v25, v27 = *((unsigned __int8 *)v25 + 2), v26 == 24946)
          ? (v28 = v27 == 121)
          : (v28 = 0),
            v28))
      {
        *a5 = -1;
      }
      else
      {
        v29 = v34[1] + v24;
        if (a3 >= v29 + 1)
          v30 = v29 + 1;
        else
          v30 = a3;
        *a5 = FIK::Enrollment::SourceDefinition::cameraIndexForName((uint64_t)a1, (uint64_t)a2, v30);
        v23 = v34;
      }
      v21 = (const void *)v23[4];
      v22 = v23[5];
      goto LABEL_27;
    case 3:
      *a5 = -1;
      v21 = (const void *)v34[6];
      v22 = v34[7];
LABEL_27:
      result = FIK::Enrollment::SourceDefinition::detectionIndexForName((uint64_t *)a1, v21, v22);
      *a4 = result;
      goto LABEL_28;
    default:
      goto LABEL_28;
  }
  while (!*(_BYTE *)(*((_QWORD *)a1 + 4) + v32))
  {
    if (v31 == ++v32)
      goto LABEL_28;
  }
  *a5 = v32;
LABEL_28:
  v33[0] = 0;
  if (v34)
    return ((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t *, _QWORD, uint64_t))(*v35)[3])(v35, v34, 0, 8);
  return result;
}

void FIK::Enrollment::estimateHeadPose(uint64_t *a1@<X0>, unint64_t a2@<X1>, float32x4_t *a3@<X8>)
{
  unint64_t v6;
  float32x4_t *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  float32x4_t *v16;
  float32x4_t v17;
  float v18;
  float32x4_t v19;
  float32x4_t v20;
  float v21;
  float32x4_t v22;
  int8x16_t v23;
  float32x4_t v24;
  int8x16_t v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float32x2_t v30;
  float32x2_t v31;
  float v32;
  float v33;
  float32x2_t v34;
  float32x4_t v35;
  float v36;
  float v37;
  float v38;
  float32x4_t v39;
  int8x16_t v40;
  float32x2_t v41;
  float32x4_t v42;
  unsigned __int32 v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x4_t v46;
  float v47;
  float v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t *v53[2];
  float32x4_t *v54;
  uint64_t v55;
  float32x4_t v56;
  float32x4_t v57;
  char v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  if (a1[1] > a2)
  {
    v53[0] = (float32x4_t *)(*a1 + 160 * a2);
    v53[1] = (float32x4_t *)1;
    FIK::Enrollment::FrameAdaptor::getHeadPose(v53, (FIK::Transform *)a3);
    if (a3[2].i8[0])
      return;
    v52 = 0u;
    if (a2)
    {
      v6 = 1 - a2;
      v7 = (float32x4_t *)(*a1 + 160 * a2 - 160);
      while (1)
      {
        v54 = v7;
        v55 = 1;
        FIK::Enrollment::FrameAdaptor::getHeadPose(&v54, (FIK::Transform *)&v56);
        if (v58)
          break;
        ++v6;
        v7 -= 10;
        if (v6 == 1)
          goto LABEL_7;
      }
      v8 = 0;
      v51 = v57;
      v52 = v56;
      v9 = -(uint64_t)v6;
    }
    else
    {
LABEL_7:
      v8 = 1;
      v9 = -1;
    }
    v10 = a1[1];
    v11 = v10 - (a2 + 1);
    if (v10 != a2 + 1)
    {
      v12 = *a1;
      if (v11 <= 1)
        v13 = 1;
      else
        v13 = v11;
      v14 = a2 - v9;
      v15 = a2 - v9 + 1;
      v16 = (float32x4_t *)(v12 + 160 * a2 + 160);
      while (1)
      {
        v54 = v16;
        v55 = 1;
        FIK::Enrollment::FrameAdaptor::getHeadPose(&v54, (FIK::Transform *)&v56);
        if (v58)
          break;
        ++v15;
        v16 += 10;
        if (!--v13)
          goto LABEL_16;
      }
      v17 = v57;
      if ((v8 & 1) != 0)
      {
        *a3 = v56;
      }
      else
      {
        v18 = (float)v14 / (float)(unint64_t)v15;
        if (v18 <= 0.0)
        {
          v17 = v51;
          v42 = v52;
        }
        else if (v18 >= 1.0)
        {
          v42 = v56;
        }
        else
        {
          v49 = v56;
          v19 = vmulq_f32(v51, v57);
          v20 = (float32x4_t)vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL);
          *(float32x2_t *)v19.f32 = vadd_f32(*(float32x2_t *)v19.f32, *(float32x2_t *)v20.f32);
          v19.f32[0] = vaddv_f32(*(float32x2_t *)v19.f32);
          v20.i32[0] = 0;
          v50 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v19, v20)), 0), (int8x16_t)vnegq_f32(v57), (int8x16_t)v57);
          v21 = 1.0 - v18;
          v22 = vsubq_f32(v51, v50);
          v23 = (int8x16_t)vmulq_f32(v22, v22);
          v24 = vaddq_f32(v51, v50);
          v25 = (int8x16_t)vmulq_f32(v24, v24);
          v26 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v23.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v25.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL)))));
          v27 = 1.0;
          v28 = v26 + v26;
          if ((float)(v26 + v26) != 0.0)
            v27 = sinf(v26 + v26) / v28;
          v29 = v27;
          v30 = vrecpe_f32((float32x2_t)LODWORD(v27));
          v31 = vmul_f32(v30, vrecps_f32((float32x2_t)LODWORD(v29), v30));
          v34 = vrecps_f32((float32x2_t)LODWORD(v29), v31);
          LODWORD(v32) = vmul_f32(v31, v34).u32[0];
          v33 = 1.0;
          v34.i32[0] = 1.0;
          if ((float)(v21 * v28) != 0.0)
          {
            v47 = v32;
            v34.f32[0] = sinf(v21 * v28);
            v32 = v47;
            v34.f32[0] = v34.f32[0] / (float)(v21 * v28);
          }
          v34.f32[0] = v21 * (float)(v32 * v34.f32[0]);
          v35 = (float32x4_t)vdupq_lane_s32((int32x2_t)v34, 0);
          v36 = (float)v14 / (float)(unint64_t)v15;
          v37 = v36 * v28;
          if (v37 != 0.0)
          {
            v46 = v35;
            v48 = v32;
            v38 = sinf(v37);
            v35 = v46;
            v32 = v48;
            v36 = (float)v14 / (float)(unint64_t)v15;
            v33 = v38 / v37;
          }
          v39 = vmlaq_f32(vmulq_n_f32(v50, v36 * (float)(v32 * v33)), v51, v35);
          v40 = (int8x16_t)vmulq_f32(v39, v39);
          v41 = vadd_f32(*(float32x2_t *)v40.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v40, v40, 8uLL));
          if (vaddv_f32(v41) == 0.0)
          {
            v17 = (float32x4_t)xmmword_210802BA0;
          }
          else
          {
            v43 = vadd_f32(v41, (float32x2_t)vdup_lane_s32((int32x2_t)v41, 1)).u32[0];
            v44 = vrsqrte_f32((float32x2_t)v43);
            v45 = vmul_f32(v44, vrsqrts_f32((float32x2_t)v43, vmul_f32(v44, v44)));
            v17 = vmulq_n_f32(v39, vmul_f32(v45, vrsqrts_f32((float32x2_t)v43, vmul_f32(v45, v45))).f32[0]);
          }
          v42 = vaddq_f32(v52, vmulq_n_f32(vsubq_f32(v49, v52), v36));
        }
        *a3 = v42;
      }
      goto LABEL_37;
    }
LABEL_16:
    if ((v8 & 1) == 0)
    {
      *a3 = v52;
      v17 = v51;
LABEL_37:
      a3[1] = v17;
      a3[2].i8[0] = 1;
      return;
    }
  }
  a3->i8[0] = 0;
  a3[2].i8[0] = 0;
}

FIK::Enrollment::DataPreprocessor *FIK::Enrollment::DataPreprocessor::DataPreprocessor(FIK::Enrollment::DataPreprocessor *this, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  void (***v6)(FIK::CrtAllocator *__hidden);
  FIK *v7;
  void (***v8)(FIK::CrtAllocator *__hidden);
  void (***v9)(FIK::CrtAllocator *__hidden);
  void *v10;
  void (***v11)(FIK::CrtAllocator *__hidden);
  void (***v12)(FIK::CrtAllocator *__hidden);
  void (***v13)(FIK::CrtAllocator *__hidden);

  *(_QWORD *)this = -1;
  *((_QWORD *)this + 1) = a3;
  v5 = (_QWORD *)((char *)this + 16);
  v6 = FIK::defaultAllocator(this);
  v7 = (FIK *)FIK::IKArray<FIK::Transform>::IKArray<FIK::Transform,void>(v5, a2, (uint64_t)v6);
  v8 = FIK::defaultAllocator(v7);
  v9 = v8;
  *((_QWORD *)this + 6) = a2;
  *((_QWORD *)this + 7) = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (((a2 + 7) & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v10 = (void *)((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), unint64_t, uint64_t))(*v8)[2])(v8, (a2 + 7) & 0xFFFFFFFFFFFFFFF8, 1);
    *((_QWORD *)this + 8) = v10;
    *((_QWORD *)this + 9) = v9;
    bzero(v10, (a2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    *((_QWORD *)this + 8) = 0;
    *((_QWORD *)this + 9) = v8;
  }
  v11 = FIK::defaultAllocator((FIK *)v8);
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = v11;
  v12 = FIK::defaultAllocator((FIK *)v11);
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = v12;
  v13 = FIK::defaultAllocator((FIK *)v12);
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = v13;
  *((_BYTE *)this + 176) = 0;
  *((_BYTE *)this + 320) = 0;
  *((_BYTE *)this + 336) = 1;
  return this;
}

FIK::Enrollment::DataPreprocessor *FIK::Enrollment::DataPreprocessor::DataPreprocessor(FIK::Enrollment::DataPreprocessor *a1, uint64_t a2, uint64_t a3)
{
  return FIK::Enrollment::DataPreprocessor::DataPreprocessor(a1, *(_QWORD *)(a2 + 240), *(_QWORD *)(a3 + 24));
}

_QWORD *FIK::Enrollment::DataPreprocessor::addLiftedSource(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v5;
  _QWORD *result;
  uint64_t v7;

  v5 = (_QWORD *)(a1 + 80);
  result = FIK::IKArray<FIK::Enrollment::LiftedSource>::reserve((_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 80) + 1);
  v7 = v5[2] + 12 * *v5;
  *(_QWORD *)v7 = a2;
  *(_DWORD *)(v7 + 8) = a3;
  ++*v5;
  return result;
}

__n128 FIK::Enrollment::DataPreprocessor::addRaySource(uint64_t a1, __n128 *a2)
{
  _QWORD *v3;
  __n128 *v4;
  __n128 result;

  v3 = (_QWORD *)(a1 + 112);
  FIK::IKArray<FIK::Enrollment::RaySource>::reserve((_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 112) + 1);
  v4 = (__n128 *)(v3[2] + 24 * *v3);
  result = *a2;
  v4[1].n128_u64[0] = a2[1].n128_u64[0];
  *v4 = result;
  ++*v3;
  return result;
}

uint64_t FIK::Enrollment::DataPreprocessor::generateSolverSources(int *a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const simd_float4x4 *v12;
  uint64_t v13;
  unint64_t v15;
  float32x4_t *v16;
  float32x4_t *v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  int8x16_t v21;
  int8x16_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int8x16_t v28;
  int8x16_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  float32x4_t v38[2];
  float32x4_t v39;
  char v40;
  int8x16_t v41;
  __int8 v42;
  float32x4_t v43[2];
  char v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v8 = *((_QWORD *)a1 + 6);
  if (v8 >= 1)
    bzero(*((void **)a1 + 8), v8);
  v9 = *(_QWORD *)(a2 + 8);
  if (!v9)
    goto LABEL_9;
  v10 = 0;
  v11 = *(_QWORD *)a2;
  v12 = (const simd_float4x4 *)(*(_QWORD *)a2 + 80);
  v13 = -v9;
  while (v12->columns[0].i64[0] != a3)
  {
    v12 = (const simd_float4x4 *)((char *)v12 + 160);
    --v10;
    v11 += 160;
    if (v13 == v10)
      goto LABEL_9;
  }
  if (v10 != 1)
  {
    v15 = -v10;
    FIK::Transform::Transform((FIK::Transform *)v38, v12 - 1);
    v16 = (float32x4_t *)(*((_QWORD *)a1 + 4) + 32 * *a1);
    *v16 = v38[0];
    v16[1] = v38[1];
    *(_BYTE *)(*((_QWORD *)a1 + 8) + *a1) = 1;
    if (*(_DWORD *)(a2 + 16) != 1)
    {
      v35 = ikinemaLogObject();
      ikinemaAssertHandler(*v35, 0, (uint64_t)"generateSolverSources", "(frameSet.version() == ApiVersion::v2) Unexpected API version");
    }
    if (a1[1] == -1)
    {
      v36 = ikinemaLogObject();
      ikinemaAssertHandler(*v36, 0, (uint64_t)"generateSolverSources", "(m_rigAtlasSourceIndex != kInvalidRigIndex) The head pose must be present as a source.");
    }
    FIK::Enrollment::estimateHeadPose((uint64_t *)a2, v15, v43);
    if (!v44)
    {
      v37 = ikinemaLogObject();
      ikinemaAssertHandler(*v37, 0, (uint64_t)"generateSolverSources", "(headPose.has_value()) Unable to produce valid pose with missing head pose.");
    }
    v17 = (float32x4_t *)(*((_QWORD *)a1 + 4) + 32 * a1[1]);
    *v17 = v43[0];
    v17[1] = v43[1];
    *(_BYTE *)(*((_QWORD *)a1 + 8) + a1[1]) = 1;
    v18 = *((_QWORD *)a1 + 10);
    if (v18)
    {
      v19 = (int *)*((_QWORD *)a1 + 12);
      v20 = 12 * v18;
      do
      {
        FIK::Enrollment::LiftedSource::getTarget((uint64_t)v19, (unint64_t *)a2, v15, (__n128 *)&v41);
        v21.i32[0] = 0;
        v22.i8[0] = v42;
        v23 = *((_QWORD *)a1 + 4) + 32 * *v19;
        *(int8x16_t *)v23 = vbslq_s8(vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(v22, v21), 0), (int8x16_t)0, v41);
        *(_OWORD *)(v23 + 16) = xmmword_210802BA0;
        v24 = *v19;
        v19 += 3;
        *(_BYTE *)(*((_QWORD *)a1 + 8) + v24) = v42;
        v20 -= 12;
      }
      while (v20);
    }
    v25 = *((_QWORD *)a1 + 14);
    if (v25)
    {
      v26 = *((_QWORD *)a1 + 16);
      v27 = v26 + 24 * v25;
      do
      {
        FIK::Enrollment::RaySource::getTarget((uint64_t *)v26, (_QWORD *)a2, v15, (float32x4_t *)&v41);
        v28.i32[0] = 0;
        v29.i8[0] = v42;
        v30 = *((_QWORD *)a1 + 4) + 32 * *(int *)(v26 + 4);
        *(int8x16_t *)v30 = vbslq_s8(vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(v29, v28), 0), (int8x16_t)0, v41);
        *(_OWORD *)(v30 + 16) = xmmword_210802BA0;
        *(_BYTE *)(*((_QWORD *)a1 + 8) + *(int *)(v26 + 4)) = v42;
        v26 += 24;
      }
      while (v26 != v27);
    }
    FIK::Enrollment::DataPreprocessor::getDetectedHipsAlignmentPosition((uint64_t)a1, v11, 1, (__n128 *)&v41);
    if (*((_BYTE *)a1 + 320))
    {
      v31 = *((_QWORD *)a1 + 4);
      v32 = *((_QWORD *)a1 + 2);
      v33 = *((_QWORD *)a1 + 8);
      v34 = *((_QWORD *)a1 + 6);
      v39.i8[0] = 0;
      v40 = 0;
      if (v42)
      {
        v39 = (float32x4_t)v41;
        v40 = 1;
      }
      FIK::Enrollment::VirtualSourceController::updateDependents((float32x4_t *)a1 + 11, v31, v32, v33, v34, v38, &v39);
    }
    *a4 = 0;
  }
  else
  {
LABEL_9:
    *a4 = 1;
  }
  return *((_QWORD *)a1 + 4);
}

void FIK::Enrollment::DataPreprocessor::getDetectedHipsAlignmentPosition(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v8;
  unint64_t v9;

  if (*(_QWORD *)(a1 + 144))
  {
    v8 = 0;
    v9 = 0;
    while (1)
    {
      FIK::Enrollment::LiftedSource::getTarget(*(_QWORD *)(a1 + 160) + v8, a2, a3, a4);
      if (a4[1].n128_u8[0])
        break;
      ++v9;
      v8 += 12;
      if (v9 >= *(_QWORD *)(a1 + 144))
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    a4->n128_u8[0] = 0;
    a4[1].n128_u8[0] = 0;
  }
}

float32x2_t FIK::Transform::Transform(FIK::Transform *this, const simd_float4x4 *a2)
{
  simd_float4 v2;
  int32x4_t v3;
  int32x4_t v4;
  simd_float4 v5;
  float v6;
  float v7;
  float v8;
  float v10;
  float v11;
  simd_float4 v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float v19;
  float32_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x2_t v28;
  __int128 v33;
  float32x2_t v34;
  float32x2_t result;
  float v36;
  unsigned int v37;
  float32x2_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t v42;

  v2 = a2->columns[3];
  v2.i32[3] = 0;
  *(simd_float4 *)this = v2;
  v3 = (int32x4_t)a2->columns[0];
  v4 = (int32x4_t)a2->columns[1];
  v5 = a2->columns[2];
  LODWORD(v6) = HIDWORD(a2->columns[1].i64[0]);
  v7 = COERCE_FLOAT(a2->columns[2].i64[1]);
  v8 = v7 + (float)(COERCE_FLOAT(*(_OWORD *)a2->columns) + v6);
  if (v8 >= 0.0)
  {
    v19 = sqrtf(v8 + 1.0);
    v20 = v19 + v19;
    v21 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(v19 + v19));
    v22 = vmul_f32(v21, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v19 + v19), v21));
    v22.i32[0] = vmul_f32(v22, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v19 + v19), v22)).u32[0];
    *(float32x2_t *)&v33 = vmul_n_f32(vsub_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v4, (int8x16_t)v4, 8uLL), *(int32x2_t *)v5.f32), (float32x2_t)vext_s8(*(int8x8_t *)v5.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v3, (int8x16_t)v3, 8uLL), 4uLL)), v22.f32[0]);
    v23.i32[0] = vsub_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v3.i8, 1), *(float32x2_t *)v4.i8).u32[0];
    v23.f32[1] = v20;
    v22.i32[1] = 0.25;
    result = vmul_f32(v23, v22);
  }
  else if (*(float *)v3.i32 < v6 || *(float *)v3.i32 < v7)
  {
    v10 = 1.0 - *(float *)v3.i32;
    if (v6 >= v7)
    {
      v36 = sqrtf(v6 + (float)(v10 - v7));
      *(float *)&v37 = v36 + v36;
      v38 = vrecpe_f32((float32x2_t)v37);
      v39 = vmul_f32(v38, vrecps_f32((float32x2_t)v37, v38));
      v40.i32[0] = vmul_f32(v39, vrecps_f32((float32x2_t)v37, v39)).u32[0];
      v39.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v3.i8, 1), *(float32x2_t *)v4.i8).u32[0];
      v39.i32[1] = v37;
      v41 = (float32x2_t)vrev64_s32(*(int32x2_t *)v5.f32);
      v42.i32[0] = vadd_f32(v41, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v4, (int8x16_t)v4, 8uLL)).u32[0];
      v42.i32[1] = vsub_f32(v41, (float32x2_t)vdup_laneq_s32(v3, 2)).i32[1];
      result = vmul_n_f32(v42, v40.f32[0]);
      v40.i32[1] = 0.25;
      *(float32x2_t *)&v33 = vmul_f32(v39, v40);
    }
    else
    {
      v11 = sqrtf(v7 + (float)(v10 - v6));
      v12 = a2->columns[0];
      v12.f32[0] = v11;
      v13 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v3, (int8x16_t)v3, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v4, (int8x16_t)v4, 8uLL)), *(float32x2_t *)v5.f32);
      v14 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v4.i8, 0);
      v15 = vsub_f32(*(float32x2_t *)v3.i8, v14);
      v14.i32[0] = 2.0;
      v14.i32[0] = vmul_f32(*(float32x2_t *)v12.f32, v14).u32[0];
      v14.i32[1] = v15.i32[1];
      v16 = vrecpe_f32((float32x2_t)v14.u32[0]);
      v17 = vmul_f32(v16, vrecps_f32((float32x2_t)v14.u32[0], v16));
      v15.i32[0] = vmul_f32(v17, vrecps_f32((float32x2_t)v14.u32[0], v17)).u32[0];
      *(float32x2_t *)&v33 = vmul_n_f32(v13, v15.f32[0]);
      __asm { FMOV            V2.2S, #0.25 }
      _D2.i32[1] = v15.i32[0];
      result = vmul_f32(v14, _D2);
    }
  }
  else
  {
    v24 = (float32x2_t)__PAIR64__(v3.u32[1], COERCE_UNSIGNED_INT(sqrtf(*(float *)v3.i32 + (float)((float)(1.0 - v6) - v7))));
    v25 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v4.i8, 0);
    v26 = vadd_f32(*(float32x2_t *)v3.i8, v25);
    v25.i32[0] = 2.0;
    v25.i32[0] = vmul_f32(v24, v25).u32[0];
    v25.i32[1] = v26.i32[1];
    v27 = vrecpe_f32((float32x2_t)v25.u32[0]);
    v28 = vmul_f32(v27, vrecps_f32((float32x2_t)v25.u32[0], v27));
    v24.i32[0] = vmul_f32(v28, vrecps_f32((float32x2_t)v25.u32[0], v28)).u32[0];
    __asm { FMOV            V5.2S, #0.25 }
    _D5.i32[1] = v24.i32[0];
    *(float32x2_t *)&v33 = vmul_f32(v25, _D5);
    v34.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v3, (int8x16_t)v3, 8uLL), *(float32x2_t *)v5.f32).u32[0];
    v34.i32[1] = vsub_f32((float32x2_t)vdup_laneq_s32(v4, 2), *(float32x2_t *)&v5).i32[1];
    result = vmul_n_f32(v34, v24.f32[0]);
  }
  *((float32x2_t *)&v33 + 1) = result;
  *((_OWORD *)this + 1) = v33;
  return result;
}

_QWORD *FIK::IKArray<FIK::Enrollment::RaySource>::reserve(_QWORD *result, unint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;

  if (result[1] < a2)
  {
    v2 = result;
    v3 = result[3];
    v4 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v4)
    {
      v5 = (void *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)v3 + 16))(result[3], 24 * v4, 8);
      v6 = v5;
      if (24 * v4)
        bzero(v5, 24 * v4);
    }
    else
    {
      v6 = 0;
    }
    memcpy(v6, (const void *)v2[2], 24 * *v2);
    v7 = v2[2];
    result = (_QWORD *)v2[3];
    v2[1] = v4;
    v2[2] = v6;
    v2[3] = v3;
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, _QWORD, uint64_t))(*result + 24))(result, v7, 0, 8);
  }
  return result;
}

__n128 *FIK::CharacterisedHierarchy::CharacterisedHierarchy(__n128 *a1, __n128 *a2, uint64_t a3)
{
  __n128 v5;

  v5 = FIK::Hierarchy::Hierarchy(a1, a2);
  (*(void (**)(uint64_t, __n128 *, __n128))(*(_QWORD *)a3 + 16))(a3, a1, v5);
  return a1;
}

{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  __n128 *v12;
  unint64_t v13;

  FIK::Hierarchy::Hierarchy(a1, a2);
  *(_OWORD *)(v5 + 32) = *(_OWORD *)a3;
  *(_QWORD *)(v5 + 48) = *(_QWORD *)(a3 + 16);
  v6 = (_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(v5 + 56) = v7;
  v8 = v5 + 56;
  v9 = *(_QWORD *)(a3 + 32);
  *(_QWORD *)(v5 + 64) = v9;
  if (v9)
  {
    *(_QWORD *)(v7 + 16) = v8;
    *(_QWORD *)(a3 + 16) = v6;
    *v6 = 0;
    *(_QWORD *)(a3 + 32) = 0;
  }
  else
  {
    a1[3].n128_u64[0] = v8;
  }
  a1[4].n128_u64[1] = *(_QWORD *)(a3 + 40);
  v10 = (_QWORD *)(a3 + 48);
  v11 = *(_QWORD *)(a3 + 48);
  a1[5].n128_u64[0] = v11;
  v12 = a1 + 5;
  v13 = *(_QWORD *)(a3 + 56);
  a1[5].n128_u64[1] = v13;
  if (v13)
  {
    *(_QWORD *)(v11 + 16) = v12;
    *(_QWORD *)(a3 + 40) = v10;
    *v10 = 0;
    *(_QWORD *)(a3 + 56) = 0;
  }
  else
  {
    a1[4].n128_u64[1] = (unint64_t)v12;
  }
  IKString::IKString((uint64_t *)&a1[6], (uint64_t *)(a3 + 64), *(_QWORD *)(a3 + 80));
  return a1;
}

uint64_t *FIK::UndefinedCharacterisation::operator()@<X0>(FIK *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  void (***v3)(FIK::CrtAllocator *__hidden);
  FIK *v4;
  uint64_t *result;
  uint64_t v6;
  uint64_t v7;
  void (***v8)(FIK::CrtAllocator *__hidden);

  v2 = (uint64_t *)a2;
  *(_DWORD *)a2 = 0;
  *(_BYTE *)(a2 + 4) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 16) = a2 + 24;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = a2 + 48;
  v3 = FIK::defaultAllocator(a1);
  v2[8] = 0;
  v2[9] = 0;
  v2 += 8;
  v2[2] = (uint64_t)v3;
  IKString::assign(v2, "undefined", (IKString *)9);
  v6 = 0;
  v7 = 0;
  v8 = FIK::defaultAllocator(v4);
  IKString::assign(&v6, "undefined", (IKString *)9);
  result = IKString::operator=(v2, (uint64_t)&v6);
  if (v7)
    return (uint64_t *)((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v8)[3])(v8, v6, 0, 8);
  return result;
}

float FIK::UndefinedCharacterisation::characterisationConfidence()
{
  return 0.0;
}

void FIK::UndefinedCharacterisation::~UndefinedCharacterisation(FIK::UndefinedCharacterisation *this)
{
  *(_QWORD *)this = off_24CA6C008;
  if (*((_QWORD *)this + 2))
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 3) + 24))(*((_QWORD *)this + 3), *((_QWORD *)this + 1), 0, 8);
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
  }
}

{
  *(_QWORD *)this = off_24CA6C008;
  if (*((_QWORD *)this + 2))
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 3) + 24))(*((_QWORD *)this + 3), *((_QWORD *)this + 1), 0, 8);
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
  }
  JUMPOUT(0x212BCAFB4);
}

uint64_t ikinema::SetMocapTargetAlgorithmImpl::setFkTargets(uint64_t result, uint64_t a2, int a3, FIK::AnimNode **this)
{
  uint64_t v4;
  float32x4_t *v7;
  uint64_t v8;
  float32x4_t v9;
  int32x4_t v10;
  int8x16_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  int32x4_t v16;
  int8x16_t v17;
  float32x4_t v18;
  uint64_t v19;
  float32x4_t v20;

  v4 = *(_QWORD *)(result + 56);
  if (v4)
  {
    v7 = (float32x4_t *)(*(_QWORD *)(result + 72) + 16);
    v8 = 48 * v4;
    do
    {
      v9 = *(float32x4_t *)(a2 + 32 * v7[-1].i64[1] + 16);
      v10 = (int32x4_t)vnegq_f32(v9);
      v11 = (int8x16_t)vtrn2q_s32((int32x4_t)v9, vtrn1q_s32((int32x4_t)v9, v10));
      v12 = v7[1];
      v13 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v9, (int8x16_t)v10, 8uLL), *(float32x2_t *)v7->f32, 1), (float32x4_t)vextq_s8(v11, v11, 8uLL), COERCE_FLOAT(*v7));
      v14 = (float32x4_t)vrev64q_s32((int32x4_t)v9);
      v14.i32[0] = v10.i32[1];
      v14.i32[3] = v10.i32[2];
      v15 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v9, *v7, 3), v14, *v7, 2), v13);
      v16 = (int32x4_t)vnegq_f32(v12);
      v17 = (int8x16_t)vtrn2q_s32((int32x4_t)v12, vtrn1q_s32((int32x4_t)v12, v16));
      v18 = (float32x4_t)vrev64q_s32((int32x4_t)v12);
      v18.i32[0] = v16.i32[1];
      v18.i32[3] = v16.i32[2];
      v20 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v12, v15, 3), v18, v15, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v12, (int8x16_t)v16, 8uLL), *(float32x2_t *)v15.f32, 1), (float32x4_t)vextq_s8(v17, v17, 8uLL), v15.f32[0]));
      v19 = ikinema::JointCollection::element(this, v7[-1].u64[0]);
      result = (*(uint64_t (**)(uint64_t, float32x4_t *))(*(_QWORD *)v19 + 200))(v19, &v20);
      v7 += 3;
      v8 -= 48;
    }
    while (v8);
  }
  return result;
}

uint64_t ikinema::SetMocapTargetAlgorithmImpl::setConstraintTargets(float32x4_t *a1, float32x4_t *a2, int a3, ikinema::ConstraintCollection *this)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  float32x4_t *v10;
  int32x4_t v11;
  int8x16_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  int32x4_t v20;
  float32x4_t v21;
  int32x4_t v22;
  float32x4_t v23;
  uint64_t (***v24)(_QWORD, _OWORD *);
  _OWORD v25[2];

  result = ikinema::ConstraintCollection::elementCount(this);
  if (result)
  {
    v8 = result;
    v9 = 0;
    v10 = a2 + 1;
    do
    {
      v11 = (int32x4_t)vnegq_f32(*v10);
      v12 = (int8x16_t)vtrn2q_s32(*(int32x4_t *)v10, vtrn1q_s32(*(int32x4_t *)v10, v11));
      v13 = a1[2];
      v14 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8(*(int8x16_t *)v10, (int8x16_t)v11, 8uLL), *(float32x2_t *)v13.f32, 1), (float32x4_t)vextq_s8(v12, v12, 8uLL), v13.f32[0]);
      v15 = (float32x4_t)vrev64q_s32(*(int32x4_t *)v10);
      v15.i32[0] = v11.i32[1];
      v15.i32[3] = v11.i32[2];
      v16 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(*v10, v13, 3), v15, v13, 2), v14);
      v17 = v10[-1];
      v18 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v13, (int32x4_t)v13), (int8x16_t)v13, 0xCuLL);
      v19 = vnegq_f32(v13);
      v20 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v17, (int32x4_t)v17), (int8x16_t)v17, 0xCuLL), v19), v17, v18);
      v21 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v20, v20), (int8x16_t)v20, 0xCuLL);
      v22 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v21, (int32x4_t)v21), (int8x16_t)v21, 0xCuLL), v19), v21, v18);
      v23 = vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v22, v22), (int8x16_t)v22, 0xCuLL), v21, v13, 3);
      v21.i64[0] = 0x4000000040000000;
      v21.i64[1] = 0x4000000040000000;
      v25[0] = vaddq_f32(a1[1], vmlaq_f32(v17, v21, v23));
      v25[1] = v16;
      v24 = (uint64_t (***)(_QWORD, _OWORD *))ikinema::ConstraintCollection::element(this);
      result = (**v24)(v24, v25);
      ++v9;
      v10 += 2;
    }
    while (v8 != v9);
  }
  return result;
}

uint64_t ikinema::SetMocapTargetAlgorithmImpl::process(float32x4_t *a1, FIK::AnimNode **a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  float32x4_t *v10;
  int v11;

  if (a1[3].i8[1])
  {
    v6 = ikinema::BufferContainer::buffer(a3, a1[5].i64[1]);
    v7 = ikinema::Buffer::arrayView<FIK::Transform>(v6);
    ikinema::SetMocapTargetAlgorithmImpl::setFkTargets((uint64_t)a1, v7, v8, a2);
  }
  v9 = ikinema::BufferContainer::buffer(a3, a1[6].i64[0]);
  v10 = (float32x4_t *)ikinema::Buffer::arrayView<FIK::Transform>(v9);
  ikinema::SetMocapTargetAlgorithmImpl::setConstraintTargets(a1, v10, v11, (ikinema::ConstraintCollection *)(a2 + 1));
  return 0;
}

uint64_t ikinema::SetMocapTargetAlgorithmImpl::registerBuffers(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;

  v2 = *a2;
  if (!*a2)
    return 1;
  v3 = a2[2];
  v4 = 72 * v2;
  v5 = (uint64_t *)(v3 + 56);
  while (1)
  {
    v6 = *v5;
    v5 += 9;
    if (v6 == *(_QWORD *)(a1 + 88))
      break;
    v4 -= 72;
    if (!v4)
      return 1;
  }
  v7 = 72 * v2;
  v8 = (uint64_t *)(v3 + 56);
  while (1)
  {
    v9 = *v8;
    v8 += 9;
    if (v9 == *(_QWORD *)(a1 + 96))
      break;
    v7 -= 72;
    if (!v7)
      return 1;
  }
  return 0;
}

uint64_t ikinema::SetMocapTargetAlgorithmImpl::SetMocapTargetAlgorithmImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (***v8)(FIK::CrtAllocator *__hidden);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  __int128 v19;

  *(_QWORD *)a1 = &off_24CA6C808;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 288);
  *(_BYTE *)(a1 + 48) = 1;
  *(_QWORD *)a1 = &off_24CA6C8E0;
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 304) ^ 1;
  v8 = FIK::defaultAllocator((FIK *)a1);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = v8;
  *(_QWORD *)(a1 + 88) = a3;
  *(_QWORD *)(a1 + 96) = a4;
  v9 = *(_QWORD *)(a2 + 208);
  if (v9)
  {
    v10 = 0;
    v11 = 0;
    v12 = 280;
    do
    {
      v13 = *(_QWORD *)(a2 + 224);
      v14 = *(int *)(v13 + v12);
      if ((_DWORD)v14 != -1)
      {
        v15 = v13 + v12;
        v18 = *(_OWORD *)(v15 + 24);
        v19 = *(_OWORD *)(v15 + 56);
        FIK::IKArray<ikinema::SetMocapTargetAlgorithmImpl::JointData>::reserve((uint64_t *)(a1 + 56), v10 + 1);
        v16 = *(_QWORD *)(a1 + 72) + 48 * *(_QWORD *)(a1 + 56);
        *(_QWORD *)v16 = v11;
        *(_QWORD *)(v16 + 8) = v14;
        *(_OWORD *)(v16 + 16) = v19;
        *(_OWORD *)(v16 + 32) = v18;
        v10 = *(_QWORD *)(a1 + 56) + 1;
        *(_QWORD *)(a1 + 56) = v10;
      }
      ++v11;
      v12 += 544;
    }
    while (v9 != v11);
  }
  return a1;
}

uint64_t ikinema::SetMocapTargetAlgorithm::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a3;
  v6 = a2;
  return ikinema::AlgorithmHandle::make<ikinema::SetMocapTargetAlgorithmImpl,FIK::MoCapRig const&,ikinema::BufferKey &,ikinema::BufferKey &>(a1, &v6, &v5, a4);
}

uint64_t ikinema::AlgorithmHandle::make<ikinema::SetMocapTargetAlgorithmImpl,FIK::MoCapRig const&,ikinema::BufferKey &,ikinema::BufferKey &>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result;

  result = (uint64_t)FIK::FIKAlloc((FIK *)0x70);
  if (result)
    result = ikinema::SetMocapTargetAlgorithmImpl::SetMocapTargetAlgorithmImpl(result, a1, *a2, *a3);
  *a4 = result;
  return result;
}

const char *ikinema::AlgorithmBlockBase<ikinema::SetMocapTargetAlgorithm>::typeId()
{
  const char *result;
  unsigned __int8 *v1;
  uint64_t v2;
  unsigned int v3;

  result = "N7ikinema23SetMocapTargetAlgorithmE";
  if (((unint64_t)"N7ikinema23SetMocapTargetAlgorithmE" & 0x8000000000000000) != 0)
  {
    v1 = (unsigned __int8 *)((unint64_t)"N7ikinema23SetMocapTargetAlgorithmE" & 0x7FFFFFFFFFFFFFFFLL);
    v2 = 5381;
    do
    {
      result = (const char *)v2;
      v3 = *v1++;
      v2 = (33 * v2) ^ v3;
    }
    while (v3);
  }
  return result;
}

void ikinema::SetMocapTargetAlgorithmImpl::~SetMocapTargetAlgorithmImpl(ikinema::SetMocapTargetAlgorithmImpl *this)
{
  uint64_t v1;

  *((_QWORD *)this + 7) = 0;
  v1 = *((_QWORD *)this + 9);
  if (v1)
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)this + 10) + 24))(*((_QWORD *)this + 10), v1, 0, 8);
}

{
  uint64_t v1;

  *((_QWORD *)this + 7) = 0;
  v1 = *((_QWORD *)this + 9);
  if (v1)
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)this + 10) + 24))(*((_QWORD *)this + 10), v1, 0, 8);
  JUMPOUT(0x212BCAFB4);
}

uint64_t ikinema::SetMocapTargetAlgorithm::isRemovable(ikinema::SetMocapTargetAlgorithm *this)
{
  return 0;
}

const char *ikinema::SetMocapTargetAlgorithmImpl::name(ikinema::SetMocapTargetAlgorithmImpl *this)
{
  return "SetMocapTargets";
}

uint64_t *FIK::IKArray<ikinema::SetMocapTargetAlgorithmImpl::JointData>::reserve(uint64_t *result, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v8;
  _OWORD *v9;

  if (result[1] < a2)
  {
    v2 = result;
    v3 = result[3];
    v4 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v4)
    {
      v5 = (_OWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v3 + 16))(result[3], 48 * v4, 16);
      v6 = v5;
      if (48 * v4)
        bzero(v5, 48 * v4);
    }
    else
    {
      v6 = 0;
    }
    v7 = (_OWORD *)v2[2];
    v8 = *v2;
    if (*v2)
    {
      v9 = v6;
      do
      {
        *v9 = *v7;
        v9[1] = v7[1];
        v9[2] = v7[2];
        v9 += 3;
        v7 += 3;
        --v8;
      }
      while (v8);
      v7 = (_OWORD *)v2[2];
    }
    result = (uint64_t *)v2[3];
    v2[1] = v4;
    v2[2] = (uint64_t)v6;
    v2[3] = v3;
    if (v7)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, _OWORD *, _QWORD, uint64_t))(*result + 24))(result, v7, 0, 8);
  }
  return result;
}

FIK *FIK::AutoRig::createMoCapRigForBiped@<X0>(FIK::Hierarchy *a1@<X0>, FIK::Hierarchy *a2@<X1>, float32x4_t *a3@<X2>, float32x4_t *a4@<X3>, uint64_t *a5@<X8>, double a6@<D0>)
{
  double v11;

  v11 = FIK::RigBuilderUtils::shiftHipsToOrigin(a1, a6);
  FIK::RigBuilderUtils::shiftHipsToOrigin(a2, v11);
  return FIK::MoCapRigBuilder::createMoCapRig((uint64_t)a1, (uint64_t *)a2, a3, a4, FIK::AutoRig::createMoCapRigForBiped(FIK::CharacterisedHierarchy &,FIK::CharacterisedHierarchy &,FIK::Transform const&,FIK::Transform const&)::taskJoints, 7, (int *)&FIK::AutoRig::createMoCapRigForBiped(FIK::CharacterisedHierarchy &,FIK::CharacterisedHierarchy &,FIK::Transform const&,FIK::Transform const&)::jointsToRemove, 2, a5, FIK::AutoRig::createMoCapRigForBiped(FIK::CharacterisedHierarchy &,FIK::CharacterisedHierarchy &,FIK::Transform const&,FIK::Transform const&)::groupsToRemove, 6);
}

uint64_t ikinema::rig::generate_EnrollmentRigV2@<X0>(ikinema::rig *this@<X0>, uint64_t a2@<X8>)
{
  void (***v3)(FIK::CrtAllocator *__hidden);
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t v17;
  uint64_t v18;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t result;
  uint64_t v94;
  float32x4_t *v95;
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _BYTE v107[11];
  __int16 v108;
  uint64_t v109;
  uint64_t v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  int v120;
  _DWORD v121[5];
  uint64_t v122;
  int v123;
  __int16 v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _BYTE v132[128];

  v3 = FIK::defaultAllocator(this);
  FIK::IKRig::IKRig((FIK::IKRig *)a2, (FIK::Allocator *)v3);
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a2 + 184) = 0;
  *(_QWORD *)(a2 + 192) = 0;
  *(_QWORD *)(a2 + 200) = v3;
  *(_QWORD *)(a2 + 208) = 0;
  *(_QWORD *)(a2 + 216) = 0;
  *(_QWORD *)(a2 + 224) = 0;
  *(_QWORD *)(a2 + 232) = v3;
  *(_QWORD *)(a2 + 240) = 0;
  *(_QWORD *)(a2 + 248) = 0;
  *(_QWORD *)(a2 + 256) = 0;
  *(_QWORD *)(a2 + 272) = 0;
  *(_QWORD *)(a2 + 280) = 0;
  *(_QWORD *)(a2 + 264) = v3;
  *(_OWORD *)(a2 + 288) = xmmword_210802BA0;
  *(_BYTE *)(a2 + 304) = 0;
  *(_DWORD *)(a2 + 308) = 1065353216;
  *(_DWORD *)(a2 + 48) = 1;
  IKString::assign(v4, "6699B756-CD45-7D56-8407-DB8F3B430D60", (IKString *)0x24);
  *(_DWORD *)(a2 + 24) = 1065353216;
  *(_QWORD *)(a2 + 28) = 0x500000001;
  *(_QWORD *)(a2 + 36) = 0;
  *(_BYTE *)(a2 + 44) = 0;
  *(_DWORD *)(a2 + 48) = 1;
  *(_QWORD *)(a2 + 64) = 0x3727C5AC3D89374CLL;
  *(_QWORD *)(a2 + 72) = 0x19000000000;
  *(_QWORD *)(a2 + 80) = 0x3F80000040800000;
  *(_WORD *)(a2 + 88) = 257;
  *(_BYTE *)(a2 + 90) = 0;
  *(_QWORD *)(a2 + 100) = 0;
  *(_QWORD *)(a2 + 92) = 0;
  *(_QWORD *)(a2 + 108) = 0x3F80000000000000;
  *(_WORD *)(a2 + 116) = 256;
  *(_DWORD *)(a2 + 120) = 1117782015;
  FIK::IKArray<FIK::MoCapTask>::reserve((uint64_t *)(a2 + 176), 9uLL);
  v5 = *(_QWORD *)(a2 + 16);
  v101 = 0;
  v102 = 0;
  v103 = v5;
  v104 = 0;
  v105 = 0;
  v106 = v5;
  *(_DWORD *)v107 = -1;
  *(_WORD *)&v107[4] = 257;
  v107[6] = 0;
  *(_DWORD *)&v107[7] = 16843009;
  v108 = 257;
  v109 = -1;
  v111 = xmmword_210804120;
  v112 = xmmword_210804130;
  v113 = xmmword_2108040E0;
  v114 = 0x4000000040000000;
  v115 = 0x40000000;
  v117 = 0;
  v116 = 0;
  v119 = 0;
  v118 = 0;
  v120 = 5;
  memset(v121, 0, sizeof(v121));
  v122 = v5;
  v123 = -1;
  v124 = 1;
  v125 = 0;
  v126 = 0;
  v127 = xmmword_210802BA0;
  v128 = xmmword_2108040F0;
  FIK::IKArray<FIK::MoCapTask>::push_back<FIK::MoCapTask,void>((uint64_t *)(a2 + 176), (uint64_t)&v101);
  if (*(_QWORD *)&v121[3])
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v122 + 24))(v122, *(_QWORD *)&v121[1], 0, 8);
    *(_OWORD *)&v121[1] = 0uLL;
  }
  if (v105)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v106 + 24))(v106, v104, 0, 8);
    v104 = 0;
    v105 = 0;
  }
  if (v102)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v103 + 24))(v103, v101, 0, 8);
  v6 = *(_QWORD *)(a2 + 192) + (*(_QWORD *)(a2 + 176) << 8);
  IKString::assign((_QWORD *)(v6 - 256), "head_joint_Task", (IKString *)0xF);
  IKString::assign((_QWORD *)(v6 - 232), "head_joint", (IKString *)0xA);
  *(_DWORD *)(v6 - 208) = 22;
  *(_WORD *)(v6 - 52) = 0;
  *(_WORD *)(v6 - 204) = 257;
  *(_BYTE *)(v6 - 202) = 0;
  *(_DWORD *)(v6 - 201) = 16843009;
  *(_QWORD *)(v6 - 192) = 0xD0000000DLL;
  *(_WORD *)(v6 - 197) = 257;
  *(int32x4_t *)(v6 - 176) = vdupq_n_s32(0x43200000u);
  *(int32x4_t *)(v6 - 160) = vdupq_n_s32(0x42C80000u);
  *(_QWORD *)&v7 = 0x4000000040000000;
  *((_QWORD *)&v7 + 1) = 0x4000000040000000;
  *(_OWORD *)(v6 - 144) = v7;
  *(_OWORD *)(v6 - 128) = v7;
  *(_QWORD *)(v6 - 112) = 0;
  *(_QWORD *)(v6 - 104) = 0;
  *(_QWORD *)(v6 - 99) = 0;
  *(_QWORD *)(v6 - 88) = 0xBF80000000000005;
  IKString::assign((_QWORD *)(v6 - 80), "Atlas", (IKString *)5);
  *(_DWORD *)(v6 - 56) = -1;
  *(_OWORD *)(v6 - 48) = 0u;
  *(_OWORD *)(v6 - 32) = xmmword_210802BA0;
  __asm { FMOV            V0.4S, #1.0 }
  v100 = _Q0;
  *(_OWORD *)(v6 - 16) = _Q0;
  v13 = *(_QWORD *)(a2 + 16);
  v101 = 0;
  v102 = 0;
  v103 = v13;
  v104 = 0;
  v105 = 0;
  v106 = v13;
  *(_DWORD *)v107 = -1;
  *(_WORD *)&v107[4] = 257;
  v107[6] = 0;
  *(_DWORD *)&v107[7] = 16843009;
  v108 = 257;
  v109 = -1;
  v111 = xmmword_210804120;
  v112 = xmmword_210804130;
  v113 = xmmword_2108040E0;
  v114 = 0x4000000040000000;
  v115 = 0x40000000;
  v117 = 0;
  v116 = 0;
  v119 = 0;
  v118 = 0;
  v120 = 5;
  memset(v121, 0, sizeof(v121));
  v122 = v13;
  v123 = -1;
  v124 = 1;
  v125 = 0;
  v126 = 0;
  v127 = xmmword_210802BA0;
  v128 = xmmword_2108040F0;
  FIK::IKArray<FIK::MoCapTask>::push_back<FIK::MoCapTask,void>((uint64_t *)(a2 + 176), (uint64_t)&v101);
  if (*(_QWORD *)&v121[3])
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v122 + 24))(v122, *(_QWORD *)&v121[1], 0, 8);
    *(_QWORD *)&v121[1] = 0;
    *(_QWORD *)&v121[3] = 0;
  }
  if (v105)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v106 + 24))(v106, v104, 0, 8);
    v104 = 0;
    v105 = 0;
  }
  if (v102)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v103 + 24))(v103, v101, 0, 8);
  v14 = *(_QWORD *)(a2 + 192) + (*(_QWORD *)(a2 + 176) << 8);
  IKString::assign((_QWORD *)(v14 - 256), "hips_joint_Task", (IKString *)0xF);
  IKString::assign((_QWORD *)(v14 - 232), "hips_joint", (IKString *)0xA);
  *(_DWORD *)(v14 - 208) = 0;
  *(_WORD *)(v14 - 52) = 0;
  *(_WORD *)(v14 - 204) = 257;
  *(_BYTE *)(v14 - 202) = 0;
  *(_DWORD *)(v14 - 201) = 16843009;
  *(_WORD *)(v14 - 197) = 257;
  *(_QWORD *)(v14 - 192) = 0x100000001;
  __asm
  {
    FMOV            V0.4S, #5.0
    FMOV            V1.4S, #10.0
  }
  v98 = _Q0;
  v99 = _Q1;
  *(_OWORD *)(v14 - 176) = _Q0;
  *(_OWORD *)(v14 - 160) = _Q1;
  *(_QWORD *)&_Q0 = 0x4000000040000000;
  *((_QWORD *)&_Q0 + 1) = 0x4000000040000000;
  *(_OWORD *)(v14 - 144) = _Q0;
  *(_OWORD *)(v14 - 128) = _Q0;
  *(_QWORD *)(v14 - 112) = 0;
  *(_QWORD *)(v14 - 104) = 0;
  *(_QWORD *)(v14 - 88) = 0xBF80000000000005;
  *(_QWORD *)(v14 - 99) = 0;
  IKString::assign((_QWORD *)(v14 - 80), "virtualHips", (IKString *)0xB);
  *(_DWORD *)(v14 - 56) = -1;
  *(_OWORD *)(v14 - 48) = 0u;
  *(_OWORD *)(v14 - 32) = xmmword_210802BA0;
  *(_OWORD *)(v14 - 16) = v100;
  v17 = *(_QWORD *)(a2 + 16);
  v101 = 0;
  v102 = 0;
  v103 = v17;
  v104 = 0;
  v105 = 0;
  v106 = v17;
  *(_DWORD *)v107 = -1;
  *(_WORD *)&v107[4] = 257;
  v107[6] = 0;
  *(_DWORD *)&v107[7] = 16843009;
  v108 = 257;
  v109 = -1;
  v111 = xmmword_210804120;
  v112 = xmmword_210804130;
  v113 = xmmword_2108040E0;
  v114 = 0x4000000040000000;
  v115 = 0x40000000;
  v117 = 0;
  v116 = 0;
  v119 = 0;
  v118 = 0;
  v120 = 5;
  memset(v121, 0, sizeof(v121));
  v122 = v17;
  v123 = -1;
  v124 = 1;
  v125 = 0;
  v126 = 0;
  v127 = xmmword_210802BA0;
  v128 = xmmword_2108040F0;
  FIK::IKArray<FIK::MoCapTask>::push_back<FIK::MoCapTask,void>((uint64_t *)(a2 + 176), (uint64_t)&v101);
  if (*(_QWORD *)&v121[3])
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v122 + 24))(v122, *(_QWORD *)&v121[1], 0, 8);
    *(_QWORD *)&v121[1] = 0;
    *(_QWORD *)&v121[3] = 0;
  }
  if (v105)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v106 + 24))(v106, v104, 0, 8);
    v104 = 0;
    v105 = 0;
  }
  if (v102)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v103 + 24))(v103, v101, 0, 8);
  v18 = *(_QWORD *)(a2 + 192) + (*(_QWORD *)(a2 + 176) << 8);
  IKString::assign((_QWORD *)(v18 - 256), "left_arm_joint_Task", (IKString *)0x13);
  IKString::assign((_QWORD *)(v18 - 232), "left_arm_joint", (IKString *)0xE);
  *(_DWORD *)(v18 - 208) = 24;
  *(_WORD *)(v18 - 52) = 0;
  *(_WORD *)(v18 - 204) = 1;
  *(_BYTE *)(v18 - 202) = 0;
  *(_DWORD *)(v18 - 201) = 16843009;
  *(_WORD *)(v18 - 197) = 257;
  *(_QWORD *)(v18 - 192) = 0xFFFFFFFF00000002;
  __asm { FMOV            V1.4S, #30.0 }
  v97 = _Q1;
  *(_OWORD *)(v18 - 176) = _Q1;
  *(_OWORD *)(v18 - 160) = v100;
  *(_QWORD *)&v20 = 0x4000000040000000;
  *((_QWORD *)&v20 + 1) = 0x4000000040000000;
  *(_OWORD *)(v18 - 144) = v20;
  *(_OWORD *)(v18 - 128) = v20;
  *(_QWORD *)(v18 - 112) = 0;
  *(_QWORD *)(v18 - 104) = 0;
  *(_QWORD *)(v18 - 88) = 0xBF80000000000005;
  *(_QWORD *)(v18 - 99) = 0;
  IKString::assign((_QWORD *)(v18 - 80), "LeftShoulder", (IKString *)0xC);
  *(_DWORD *)(v18 - 56) = -1;
  *(_OWORD *)(v18 - 48) = xmmword_210804C70;
  *(_OWORD *)(v18 - 32) = xmmword_210802BA0;
  *(_OWORD *)(v18 - 16) = v100;
  v21 = *(_QWORD *)(a2 + 16);
  v101 = 0;
  v102 = 0;
  v103 = v21;
  v104 = 0;
  v105 = 0;
  v106 = v21;
  *(_DWORD *)v107 = -1;
  *(_WORD *)&v107[4] = 257;
  v107[6] = 0;
  *(_DWORD *)&v107[7] = 16843009;
  v108 = 257;
  v109 = -1;
  v111 = xmmword_210804120;
  v112 = xmmword_210804130;
  v113 = xmmword_2108040E0;
  v114 = 0x4000000040000000;
  v115 = 0x40000000;
  v117 = 0;
  v116 = 0;
  v119 = 0;
  v118 = 0;
  v120 = 5;
  memset(v121, 0, sizeof(v121));
  v122 = v21;
  v123 = -1;
  v124 = 1;
  v125 = 0;
  v126 = 0;
  v127 = xmmword_210802BA0;
  v128 = xmmword_2108040F0;
  FIK::IKArray<FIK::MoCapTask>::push_back<FIK::MoCapTask,void>((uint64_t *)(a2 + 176), (uint64_t)&v101);
  if (*(_QWORD *)&v121[3])
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v122 + 24))(v122, *(_QWORD *)&v121[1], 0, 8);
    *(_QWORD *)&v121[1] = 0;
    *(_QWORD *)&v121[3] = 0;
  }
  if (v105)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v106 + 24))(v106, v104, 0, 8);
    v104 = 0;
    v105 = 0;
  }
  if (v102)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v103 + 24))(v103, v101, 0, 8);
  v22 = *(_QWORD *)(a2 + 192) + (*(_QWORD *)(a2 + 176) << 8);
  IKString::assign((_QWORD *)(v22 - 256), "left_forearm_joint_Task", (IKString *)0x17);
  IKString::assign((_QWORD *)(v22 - 232), "left_forearm_joint", (IKString *)0x12);
  *(_DWORD *)(v22 - 208) = 25;
  *(_WORD *)(v22 - 52) = 0;
  *(_WORD *)(v22 - 204) = 1;
  *(_BYTE *)(v22 - 202) = 0;
  *(_DWORD *)(v22 - 201) = 16843009;
  *(_WORD *)(v22 - 197) = 257;
  *(_QWORD *)(v22 - 192) = 0xFFFFFFFF00000002;
  *(_OWORD *)(v22 - 176) = v99;
  *(_OWORD *)(v22 - 160) = v100;
  *(_QWORD *)&v23 = 0x4000000040000000;
  *((_QWORD *)&v23 + 1) = 0x4000000040000000;
  *(_OWORD *)(v22 - 144) = v23;
  *(_OWORD *)(v22 - 128) = v23;
  *(_QWORD *)(v22 - 112) = 0;
  *(_QWORD *)(v22 - 104) = 0;
  *(_QWORD *)(v22 - 88) = 0xBF80000000000005;
  *(_QWORD *)(v22 - 99) = 0;
  IKString::assign((_QWORD *)(v22 - 80), "LeftElbow", (IKString *)9);
  *(_DWORD *)(v22 - 56) = -1;
  *(_OWORD *)(v22 - 48) = 0u;
  *(_OWORD *)(v22 - 32) = xmmword_210802BA0;
  *(_OWORD *)(v22 - 16) = v100;
  v24 = *(_QWORD *)(a2 + 16);
  v101 = 0;
  v102 = 0;
  v103 = v24;
  v104 = 0;
  v105 = 0;
  v106 = v24;
  *(_DWORD *)v107 = -1;
  *(_WORD *)&v107[4] = 257;
  v107[6] = 0;
  *(_DWORD *)&v107[7] = 16843009;
  v108 = 257;
  v109 = -1;
  v111 = xmmword_210804120;
  v112 = xmmword_210804130;
  v113 = xmmword_2108040E0;
  v114 = 0x4000000040000000;
  v115 = 0x40000000;
  v117 = 0;
  v116 = 0;
  v119 = 0;
  v118 = 0;
  v120 = 5;
  memset(v121, 0, sizeof(v121));
  v122 = v24;
  v123 = -1;
  v124 = 1;
  v125 = 0;
  v126 = 0;
  v127 = xmmword_210802BA0;
  v128 = xmmword_2108040F0;
  FIK::IKArray<FIK::MoCapTask>::push_back<FIK::MoCapTask,void>((uint64_t *)(a2 + 176), (uint64_t)&v101);
  if (*(_QWORD *)&v121[3])
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v122 + 24))(v122, *(_QWORD *)&v121[1], 0, 8);
    *(_QWORD *)&v121[1] = 0;
    *(_QWORD *)&v121[3] = 0;
  }
  if (v105)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v106 + 24))(v106, v104, 0, 8);
    v104 = 0;
    v105 = 0;
  }
  if (v102)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v103 + 24))(v103, v101, 0, 8);
  v25 = *(_QWORD *)(a2 + 192) + (*(_QWORD *)(a2 + 176) << 8);
  IKString::assign((_QWORD *)(v25 - 256), "left_hand_joint_Task", (IKString *)0x14);
  IKString::assign((_QWORD *)(v25 - 232), "left_hand_joint", (IKString *)0xF);
  *(_DWORD *)(v25 - 208) = 26;
  *(_WORD *)(v25 - 52) = 0;
  *(_WORD *)(v25 - 204) = 257;
  *(_BYTE *)(v25 - 202) = 0;
  *(_DWORD *)(v25 - 201) = 16843009;
  *(_WORD *)(v25 - 197) = 257;
  *(_QWORD *)(v25 - 192) = 0x300000003;
  *(_OWORD *)(v25 - 176) = v98;
  *(_OWORD *)(v25 - 160) = v99;
  *(_QWORD *)&v26 = 0x4000000040000000;
  *((_QWORD *)&v26 + 1) = 0x4000000040000000;
  *(_OWORD *)(v25 - 144) = v26;
  *(_OWORD *)(v25 - 128) = v26;
  *(_QWORD *)(v25 - 112) = 0;
  *(_QWORD *)(v25 - 104) = 0;
  *(_QWORD *)(v25 - 88) = 0xBF80000000000005;
  *(_QWORD *)(v25 - 99) = 0;
  IKString::assign((_QWORD *)(v25 - 80), "LeftWrist", (IKString *)9);
  *(_DWORD *)(v25 - 56) = -1;
  *(_OWORD *)(v25 - 48) = xmmword_210804C80;
  *(_OWORD *)(v25 - 32) = xmmword_210804C90;
  *(_OWORD *)(v25 - 16) = v100;
  v27 = *(_QWORD *)(a2 + 16);
  v101 = 0;
  v102 = 0;
  v103 = v27;
  v104 = 0;
  v105 = 0;
  v106 = v27;
  *(_DWORD *)v107 = -1;
  *(_WORD *)&v107[4] = 257;
  v107[6] = 0;
  *(_DWORD *)&v107[7] = 16843009;
  v108 = 257;
  v109 = -1;
  v111 = xmmword_210804120;
  v112 = xmmword_210804130;
  v113 = xmmword_2108040E0;
  v114 = 0x4000000040000000;
  v115 = 0x40000000;
  v117 = 0;
  v116 = 0;
  v119 = 0;
  v118 = 0;
  v120 = 5;
  memset(v121, 0, sizeof(v121));
  v122 = v27;
  v123 = -1;
  v124 = 1;
  v125 = 0;
  v126 = 0;
  v127 = xmmword_210802BA0;
  v128 = xmmword_2108040F0;
  FIK::IKArray<FIK::MoCapTask>::push_back<FIK::MoCapTask,void>((uint64_t *)(a2 + 176), (uint64_t)&v101);
  if (*(_QWORD *)&v121[3])
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v122 + 24))(v122, *(_QWORD *)&v121[1], 0, 8);
    *(_QWORD *)&v121[1] = 0;
    *(_QWORD *)&v121[3] = 0;
  }
  if (v105)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v106 + 24))(v106, v104, 0, 8);
    v104 = 0;
    v105 = 0;
  }
  if (v102)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v103 + 24))(v103, v101, 0, 8);
  v28 = *(_QWORD *)(a2 + 192) + (*(_QWORD *)(a2 + 176) << 8);
  IKString::assign((_QWORD *)(v28 - 256), "neck_1_joint_Task", (IKString *)0x11);
  IKString::assign((_QWORD *)(v28 - 232), "neck_1_joint", (IKString *)0xC);
  *(_DWORD *)(v28 - 208) = 18;
  *(_WORD *)(v28 - 52) = 0;
  *(_WORD *)(v28 - 204) = 1;
  *(_BYTE *)(v28 - 202) = 0;
  *(_DWORD *)(v28 - 201) = 16843009;
  *(_WORD *)(v28 - 197) = 257;
  *(_QWORD *)(v28 - 192) = -4294967287;
  __asm { FMOV            V1.4S, #20.0 }
  *(_OWORD *)(v28 - 176) = _Q1;
  *(_OWORD *)(v28 - 160) = v100;
  *(_QWORD *)&v30 = 0x4000000040000000;
  *((_QWORD *)&v30 + 1) = 0x4000000040000000;
  *(_OWORD *)(v28 - 144) = v30;
  *(_OWORD *)(v28 - 128) = v30;
  *(_QWORD *)(v28 - 112) = 0;
  *(_QWORD *)(v28 - 104) = 0;
  *(_QWORD *)(v28 - 88) = 0xBF80000000000005;
  *(_QWORD *)(v28 - 99) = 0;
  IKString::assign((_QWORD *)(v28 - 80), "MidShoulder", (IKString *)0xB);
  *(_DWORD *)(v28 - 56) = -1;
  *(_OWORD *)(v28 - 48) = xmmword_210804CA0;
  *(_OWORD *)(v28 - 32) = xmmword_210802BA0;
  *(_OWORD *)(v28 - 16) = v100;
  v31 = *(_QWORD *)(a2 + 16);
  v101 = 0;
  v102 = 0;
  v103 = v31;
  v104 = 0;
  v105 = 0;
  v106 = v31;
  *(_DWORD *)v107 = -1;
  *(_WORD *)&v107[4] = 257;
  v107[6] = 0;
  *(_DWORD *)&v107[7] = 16843009;
  v108 = 257;
  v109 = -1;
  v111 = xmmword_210804120;
  v112 = xmmword_210804130;
  v113 = xmmword_2108040E0;
  v114 = 0x4000000040000000;
  v115 = 0x40000000;
  v117 = 0;
  v116 = 0;
  v119 = 0;
  v118 = 0;
  v120 = 5;
  memset(v121, 0, sizeof(v121));
  v122 = v31;
  v123 = -1;
  v124 = 1;
  v125 = 0;
  v126 = 0;
  v127 = xmmword_210802BA0;
  v128 = xmmword_2108040F0;
  FIK::IKArray<FIK::MoCapTask>::push_back<FIK::MoCapTask,void>((uint64_t *)(a2 + 176), (uint64_t)&v101);
  if (*(_QWORD *)&v121[3])
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v122 + 24))(v122, *(_QWORD *)&v121[1], 0, 8);
    *(_QWORD *)&v121[1] = 0;
    *(_QWORD *)&v121[3] = 0;
  }
  if (v105)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v106 + 24))(v106, v104, 0, 8);
    v104 = 0;
    v105 = 0;
  }
  if (v102)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v103 + 24))(v103, v101, 0, 8);
  v32 = *(_QWORD *)(a2 + 192) + (*(_QWORD *)(a2 + 176) << 8);
  IKString::assign((_QWORD *)(v32 - 256), "right_arm_joint_Task", (IKString *)0x14);
  IKString::assign((_QWORD *)(v32 - 232), "right_arm_joint", (IKString *)0xF);
  *(_DWORD *)(v32 - 208) = 28;
  *(_WORD *)(v32 - 52) = 0;
  *(_WORD *)(v32 - 204) = 1;
  *(_BYTE *)(v32 - 202) = 0;
  *(_DWORD *)(v32 - 201) = 16843009;
  *(_WORD *)(v32 - 197) = 257;
  *(_QWORD *)(v32 - 192) = 0xFFFFFFFF00000002;
  *(_OWORD *)(v32 - 176) = v97;
  *(_OWORD *)(v32 - 160) = v100;
  *(_QWORD *)&v33 = 0x4000000040000000;
  *((_QWORD *)&v33 + 1) = 0x4000000040000000;
  *(_OWORD *)(v32 - 144) = v33;
  *(_OWORD *)(v32 - 128) = v33;
  *(_QWORD *)(v32 - 112) = 0;
  *(_QWORD *)(v32 - 104) = 0;
  *(_QWORD *)(v32 - 88) = 0xBF80000000000005;
  *(_QWORD *)(v32 - 99) = 0;
  IKString::assign((_QWORD *)(v32 - 80), "RightShoulder", (IKString *)0xD);
  *(_DWORD *)(v32 - 56) = -1;
  *(_OWORD *)(v32 - 48) = xmmword_210804C70;
  *(_OWORD *)(v32 - 32) = xmmword_210802BA0;
  *(_OWORD *)(v32 - 16) = v100;
  v34 = *(_QWORD *)(a2 + 16);
  v101 = 0;
  v102 = 0;
  v103 = v34;
  v104 = 0;
  v105 = 0;
  v106 = v34;
  *(_DWORD *)v107 = -1;
  *(_WORD *)&v107[4] = 257;
  v107[6] = 0;
  *(_DWORD *)&v107[7] = 16843009;
  v108 = 257;
  v109 = -1;
  v111 = xmmword_210804120;
  v112 = xmmword_210804130;
  v113 = xmmword_2108040E0;
  v114 = 0x4000000040000000;
  v115 = 0x40000000;
  v117 = 0;
  v116 = 0;
  v119 = 0;
  v118 = 0;
  v120 = 5;
  memset(v121, 0, sizeof(v121));
  v122 = v34;
  v123 = -1;
  v124 = 1;
  v125 = 0;
  v126 = 0;
  v127 = xmmword_210802BA0;
  v128 = xmmword_2108040F0;
  FIK::IKArray<FIK::MoCapTask>::push_back<FIK::MoCapTask,void>((uint64_t *)(a2 + 176), (uint64_t)&v101);
  if (*(_QWORD *)&v121[3])
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v122 + 24))(v122, *(_QWORD *)&v121[1], 0, 8);
    *(_QWORD *)&v121[1] = 0;
    *(_QWORD *)&v121[3] = 0;
  }
  if (v105)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v106 + 24))(v106, v104, 0, 8);
    v104 = 0;
    v105 = 0;
  }
  if (v102)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v103 + 24))(v103, v101, 0, 8);
  v35 = *(_QWORD *)(a2 + 192) + (*(_QWORD *)(a2 + 176) << 8);
  IKString::assign((_QWORD *)(v35 - 256), "right_forearm_joint_Task", (IKString *)0x18);
  IKString::assign((_QWORD *)(v35 - 232), "right_forearm_joint", (IKString *)0x13);
  *(_DWORD *)(v35 - 208) = 29;
  *(_WORD *)(v35 - 52) = 0;
  *(_WORD *)(v35 - 204) = 1;
  *(_BYTE *)(v35 - 202) = 0;
  *(_DWORD *)(v35 - 201) = 16843009;
  *(_WORD *)(v35 - 197) = 257;
  *(_QWORD *)(v35 - 192) = 0xFFFFFFFF00000002;
  *(_OWORD *)(v35 - 176) = v99;
  *(_OWORD *)(v35 - 160) = v100;
  *(_QWORD *)&v36 = 0x4000000040000000;
  *((_QWORD *)&v36 + 1) = 0x4000000040000000;
  *(_OWORD *)(v35 - 144) = v36;
  *(_OWORD *)(v35 - 128) = v36;
  *(_QWORD *)(v35 - 112) = 0;
  *(_QWORD *)(v35 - 104) = 0;
  *(_QWORD *)(v35 - 88) = 0xBF80000000000005;
  *(_QWORD *)(v35 - 99) = 0;
  IKString::assign((_QWORD *)(v35 - 80), "RightElbow", (IKString *)0xA);
  *(_DWORD *)(v35 - 56) = -1;
  *(_OWORD *)(v35 - 48) = 0u;
  *(_OWORD *)(v35 - 32) = xmmword_210802BA0;
  *(_OWORD *)(v35 - 16) = v100;
  v37 = *(_QWORD *)(a2 + 16);
  v101 = 0;
  v102 = 0;
  v103 = v37;
  v104 = 0;
  v105 = 0;
  v106 = v37;
  *(_DWORD *)v107 = -1;
  *(_WORD *)&v107[4] = 257;
  v107[6] = 0;
  *(_DWORD *)&v107[7] = 16843009;
  v108 = 257;
  v109 = -1;
  v111 = xmmword_210804120;
  v112 = xmmword_210804130;
  v113 = xmmword_2108040E0;
  v114 = 0x4000000040000000;
  v115 = 0x40000000;
  v117 = 0;
  v116 = 0;
  v119 = 0;
  v118 = 0;
  v120 = 5;
  memset(v121, 0, sizeof(v121));
  v122 = v37;
  v123 = -1;
  v124 = 1;
  v125 = 0;
  v126 = 0;
  v127 = xmmword_210802BA0;
  v128 = xmmword_2108040F0;
  FIK::IKArray<FIK::MoCapTask>::push_back<FIK::MoCapTask,void>((uint64_t *)(a2 + 176), (uint64_t)&v101);
  if (*(_QWORD *)&v121[3])
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v122 + 24))(v122, *(_QWORD *)&v121[1], 0, 8);
    *(_QWORD *)&v121[1] = 0;
    *(_QWORD *)&v121[3] = 0;
  }
  if (v105)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v106 + 24))(v106, v104, 0, 8);
    v104 = 0;
    v105 = 0;
  }
  if (v102)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v103 + 24))(v103, v101, 0, 8);
  v38 = *(_QWORD *)(a2 + 192) + (*(_QWORD *)(a2 + 176) << 8);
  IKString::assign((_QWORD *)(v38 - 256), "right_hand_joint_Task", (IKString *)0x15);
  IKString::assign((_QWORD *)(v38 - 232), "right_hand_joint", (IKString *)0x10);
  *(_DWORD *)(v38 - 208) = 30;
  *(_WORD *)(v38 - 52) = 0;
  *(_WORD *)(v38 - 204) = 257;
  *(_BYTE *)(v38 - 202) = 0;
  *(_DWORD *)(v38 - 201) = 16843009;
  *(_WORD *)(v38 - 197) = 257;
  *(_QWORD *)(v38 - 192) = 0x300000003;
  *(_OWORD *)(v38 - 176) = v98;
  *(_OWORD *)(v38 - 160) = v99;
  *(_QWORD *)&v39 = 0x4000000040000000;
  *((_QWORD *)&v39 + 1) = 0x4000000040000000;
  *(_OWORD *)(v38 - 144) = v39;
  *(_OWORD *)(v38 - 128) = v39;
  *(_QWORD *)(v38 - 112) = 0;
  *(_QWORD *)(v38 - 104) = 0;
  *(_QWORD *)(v38 - 88) = 0xBF80000000000005;
  *(_QWORD *)(v38 - 99) = 0;
  IKString::assign((_QWORD *)(v38 - 80), "RightWrist", (IKString *)0xA);
  *(_DWORD *)(v38 - 56) = -1;
  *(_OWORD *)(v38 - 48) = xmmword_210804CB0;
  *(_OWORD *)(v38 - 32) = xmmword_210804CC0;
  *(_OWORD *)(v38 - 16) = v100;
  FIK::IKArray<FIK::MoCapBone>::reserve(a2 + 208, 0x1FuLL);
  FIK::MoCapBone::MoCapBone((FIK::MoCapBone *)&v101, *(FIK::Allocator **)(a2 + 16));
  FIK::IKArray<FIK::MoCapBone>::push_back<FIK::MoCapBone,void>((_QWORD *)(a2 + 208), (uint64_t)&v101);
  FIK::IKArray<IKString>::~IKArray((uint64_t)v132);
  if (v130)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v131 + 24))(v131, v129, 0, 8);
    v129 = 0;
    v130 = 0;
  }
  if (v106)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v107 + 24))(*(_QWORD *)v107, v105, 0, 8);
    v105 = 0;
    v106 = 0;
  }
  if (v103)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v104 + 24))(v104, v102, 0, 8);
  v40 = *(_QWORD *)(a2 + 224) + 544 * *(_QWORD *)(a2 + 208);
  *(_BYTE *)(v40 - 190) = 0;
  *(_DWORD *)(v40 - 188) = 0;
  *(_WORD *)(v40 - 192) = 1;
  *(_QWORD *)(v40 - 180) = 0x3DF5C28F3DCCCCCDLL;
  *(_WORD *)(v40 - 184) = 1;
  *(_DWORD *)(v40 - 172) = 5;
  *(_QWORD *)(v40 - 544) = 0xFFFFFFFF00000000;
  IKString::assign((_QWORD *)(v40 - 536), "hips_joint", (IKString *)0xA);
  IKString::assign((_QWORD *)(v40 - 512), (char *)&unk_2108059BE, 0);
  *(_OWORD *)(v40 - 480) = xmmword_210804CE0;
  *(_OWORD *)(v40 - 464) = xmmword_210804CD0;
  *(_DWORD *)(v40 - 448) = 16843009;
  *(_WORD *)(v40 - 444) = 256;
  *(_BYTE *)(v40 - 442) = 1;
  *(_DWORD *)(v40 - 441) = 0;
  *(_WORD *)(v40 - 437) = 0;
  *(_OWORD *)(v40 - 432) = xmmword_210804CF0;
  *(_QWORD *)(v40 - 416) = 0x3F80000000000000;
  *(_OWORD *)(v40 - 400) = v100;
  *(_OWORD *)(v40 - 384) = v100;
  *(int32x4_t *)(v40 - 368) = vdupq_n_s32(0xC3B40000);
  *(int32x4_t *)(v40 - 352) = vdupq_n_s32(0x43B40000u);
  *(_OWORD *)(v40 - 336) = 0u;
  *(_OWORD *)(v40 - 320) = 0u;
  *(_OWORD *)(v40 - 304) = 0u;
  *(_OWORD *)(v40 - 256) = 0u;
  *(_OWORD *)(v40 - 240) = xmmword_210802BA0;
  *(_OWORD *)(v40 - 224) = 0u;
  *(_OWORD *)(v40 - 208) = xmmword_210802BA0;
  IKString::assign((_QWORD *)(v40 - 288), "virtualHips", (IKString *)0xB);
  *(_DWORD *)(v40 - 264) = -1;
  FIK::MoCapBone::MoCapBone((FIK::MoCapBone *)&v101, *(FIK::Allocator **)(a2 + 16));
  FIK::IKArray<FIK::MoCapBone>::push_back<FIK::MoCapBone,void>((_QWORD *)(a2 + 208), (uint64_t)&v101);
  FIK::IKArray<IKString>::~IKArray((uint64_t)v132);
  if (v130)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v131 + 24))(v131, v129, 0, 8);
    v129 = 0;
    v130 = 0;
  }
  if (v106)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v107 + 24))(*(_QWORD *)v107, v105, 0, 8);
    v105 = 0;
    v106 = 0;
  }
  if (v103)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v104 + 24))(v104, v102, 0, 8);
  v41 = *(_QWORD *)(a2 + 224) + 544 * *(_QWORD *)(a2 + 208);
  *(_BYTE *)(v41 - 190) = 0;
  *(_DWORD *)(v41 - 188) = 0;
  *(_WORD *)(v41 - 192) = 0;
  *(_QWORD *)(v41 - 180) = 0x3DF5C28F3DCCCCCDLL;
  *(_WORD *)(v41 - 184) = 0;
  *(_DWORD *)(v41 - 172) = 5;
  *(_QWORD *)(v41 - 544) = 0xFFFFFFFF00000001;
  IKString::assign((_QWORD *)(v41 - 536), "left_upLeg_joint", (IKString *)0x10);
  IKString::assign((_QWORD *)(v41 - 512), "hips_joint", (IKString *)0xA);
  *(_OWORD *)(v41 - 480) = xmmword_210804D10;
  *(_OWORD *)(v41 - 464) = xmmword_210804D00;
  *(_BYTE *)(v41 - 448) = 0;
  *(_DWORD *)(v41 - 447) = 16843009;
  *(_WORD *)(v41 - 443) = 257;
  *(_DWORD *)(v41 - 441) = 0;
  *(_WORD *)(v41 - 437) = 0;
  *(_OWORD *)(v41 - 432) = xmmword_210804D20;
  *(_QWORD *)(v41 - 416) = 0x3F80000000000000;
  *(_OWORD *)(v41 - 400) = v100;
  *(_OWORD *)(v41 - 384) = v100;
  *(int32x4_t *)(v41 - 368) = vdupq_n_s32(0xC3B40000);
  *(int32x4_t *)(v41 - 352) = vdupq_n_s32(0x43B40000u);
  *(_OWORD *)(v41 - 336) = 0u;
  *(_OWORD *)(v41 - 320) = 0u;
  *(_OWORD *)(v41 - 304) = 0u;
  *(_OWORD *)(v41 - 256) = 0u;
  *(_OWORD *)(v41 - 240) = xmmword_210802BA0;
  *(_OWORD *)(v41 - 224) = 0u;
  *(_OWORD *)(v41 - 208) = xmmword_210802BA0;
  IKString::assign((_QWORD *)(v41 - 288), (char *)&unk_2108059BE, 0);
  *(_DWORD *)(v41 - 264) = -1;
  FIK::MoCapBone::MoCapBone((FIK::MoCapBone *)&v101, *(FIK::Allocator **)(a2 + 16));
  FIK::IKArray<FIK::MoCapBone>::push_back<FIK::MoCapBone,void>((_QWORD *)(a2 + 208), (uint64_t)&v101);
  FIK::IKArray<IKString>::~IKArray((uint64_t)v132);
  if (v130)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v131 + 24))(v131, v129, 0, 8);
    v129 = 0;
    v130 = 0;
  }
  if (v106)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v107 + 24))(*(_QWORD *)v107, v105, 0, 8);
    v105 = 0;
    v106 = 0;
  }
  if (v103)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v104 + 24))(v104, v102, 0, 8);
  v42 = *(_QWORD *)(a2 + 224) + 544 * *(_QWORD *)(a2 + 208);
  *(_BYTE *)(v42 - 190) = 0;
  *(_DWORD *)(v42 - 188) = 0;
  *(_WORD *)(v42 - 192) = 0;
  *(_QWORD *)(v42 - 180) = 0x3DF5C28F3DCCCCCDLL;
  *(_WORD *)(v42 - 184) = 0;
  *(_DWORD *)(v42 - 172) = 5;
  *(_QWORD *)(v42 - 544) = 0xFFFFFFFF00000002;
  IKString::assign((_QWORD *)(v42 - 536), "left_leg_joint", (IKString *)0xE);
  IKString::assign((_QWORD *)(v42 - 512), "left_upLeg_joint", (IKString *)0x10);
  *(_OWORD *)(v42 - 480) = xmmword_210804D40;
  *(_OWORD *)(v42 - 464) = xmmword_210804D30;
  *(_BYTE *)(v42 - 448) = 0;
  *(_DWORD *)(v42 - 447) = 16843009;
  *(_WORD *)(v42 - 443) = 257;
  *(_DWORD *)(v42 - 441) = 0;
  *(_WORD *)(v42 - 437) = 0;
  *(_OWORD *)(v42 - 432) = xmmword_210804D50;
  *(_QWORD *)(v42 - 416) = 0x3F80000000000000;
  *(_OWORD *)(v42 - 400) = v100;
  *(_OWORD *)(v42 - 384) = v100;
  *(int32x4_t *)(v42 - 368) = vdupq_n_s32(0xC3B40000);
  *(int32x4_t *)(v42 - 352) = vdupq_n_s32(0x43B40000u);
  *(_OWORD *)(v42 - 336) = 0u;
  *(_OWORD *)(v42 - 320) = 0u;
  *(_OWORD *)(v42 - 304) = 0u;
  *(_OWORD *)(v42 - 256) = 0u;
  *(_OWORD *)(v42 - 240) = xmmword_210802BA0;
  *(_OWORD *)(v42 - 224) = 0u;
  *(_OWORD *)(v42 - 208) = xmmword_210802BA0;
  IKString::assign((_QWORD *)(v42 - 288), (char *)&unk_2108059BE, 0);
  *(_DWORD *)(v42 - 264) = -1;
  FIK::MoCapBone::MoCapBone((FIK::MoCapBone *)&v101, *(FIK::Allocator **)(a2 + 16));
  FIK::IKArray<FIK::MoCapBone>::push_back<FIK::MoCapBone,void>((_QWORD *)(a2 + 208), (uint64_t)&v101);
  FIK::IKArray<IKString>::~IKArray((uint64_t)v132);
  if (v130)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v131 + 24))(v131, v129, 0, 8);
    v129 = 0;
    v130 = 0;
  }
  if (v106)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v107 + 24))(*(_QWORD *)v107, v105, 0, 8);
    v105 = 0;
    v106 = 0;
  }
  if (v103)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v104 + 24))(v104, v102, 0, 8);
  v43 = *(_QWORD *)(a2 + 224) + 544 * *(_QWORD *)(a2 + 208);
  *(_BYTE *)(v43 - 190) = 0;
  *(_DWORD *)(v43 - 188) = 0;
  *(_WORD *)(v43 - 192) = 0;
  *(_QWORD *)(v43 - 180) = 0x3DF5C28F3DCCCCCDLL;
  *(_WORD *)(v43 - 184) = 0;
  *(_DWORD *)(v43 - 172) = 5;
  *(_QWORD *)(v43 - 544) = 0xFFFFFFFF00000003;
  IKString::assign((_QWORD *)(v43 - 536), "left_foot_joint", (IKString *)0xF);
  IKString::assign((_QWORD *)(v43 - 512), "left_leg_joint", (IKString *)0xE);
  *(_OWORD *)(v43 - 480) = xmmword_210804D70;
  *(_OWORD *)(v43 - 464) = xmmword_210804D60;
  *(_BYTE *)(v43 - 448) = 0;
  *(_DWORD *)(v43 - 447) = 16843009;
  *(_WORD *)(v43 - 443) = 257;
  *(_DWORD *)(v43 - 441) = 0;
  *(_WORD *)(v43 - 437) = 0;
  *(_OWORD *)(v43 - 432) = xmmword_210804D80;
  *(_QWORD *)(v43 - 416) = 0x3F80000000000000;
  *(_OWORD *)(v43 - 400) = v100;
  *(_OWORD *)(v43 - 384) = v100;
  *(int32x4_t *)(v43 - 368) = vdupq_n_s32(0xC3B40000);
  *(int32x4_t *)(v43 - 352) = vdupq_n_s32(0x43B40000u);
  *(_OWORD *)(v43 - 336) = 0u;
  *(_OWORD *)(v43 - 320) = 0u;
  *(_OWORD *)(v43 - 304) = 0u;
  *(_OWORD *)(v43 - 256) = 0u;
  *(_OWORD *)(v43 - 240) = xmmword_210802BA0;
  *(_OWORD *)(v43 - 224) = 0u;
  *(_OWORD *)(v43 - 208) = xmmword_210802BA0;
  IKString::assign((_QWORD *)(v43 - 288), (char *)&unk_2108059BE, 0);
  *(_DWORD *)(v43 - 264) = -1;
  FIK::MoCapBone::MoCapBone((FIK::MoCapBone *)&v101, *(FIK::Allocator **)(a2 + 16));
  FIK::IKArray<FIK::MoCapBone>::push_back<FIK::MoCapBone,void>((_QWORD *)(a2 + 208), (uint64_t)&v101);
  FIK::IKArray<IKString>::~IKArray((uint64_t)v132);
  if (v130)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v131 + 24))(v131, v129, 0, 8);
    v129 = 0;
    v130 = 0;
  }
  if (v106)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v107 + 24))(*(_QWORD *)v107, v105, 0, 8);
    v105 = 0;
    v106 = 0;
  }
  if (v103)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v104 + 24))(v104, v102, 0, 8);
  v44 = *(_QWORD *)(a2 + 224) + 544 * *(_QWORD *)(a2 + 208);
  *(_BYTE *)(v44 - 190) = 0;
  *(_DWORD *)(v44 - 188) = 0;
  *(_WORD *)(v44 - 192) = 0;
  *(_QWORD *)(v44 - 180) = 0x3DF5C28F3DCCCCCDLL;
  *(_WORD *)(v44 - 184) = 0;
  *(_DWORD *)(v44 - 172) = 5;
  *(_QWORD *)(v44 - 544) = 0xFFFFFFFF00000004;
  IKString::assign((_QWORD *)(v44 - 536), "left_toes_joint", (IKString *)0xF);
  IKString::assign((_QWORD *)(v44 - 512), "left_foot_joint", (IKString *)0xF);
  *(_OWORD *)(v44 - 480) = xmmword_210804DA0;
  *(_OWORD *)(v44 - 464) = xmmword_210804D90;
  *(_BYTE *)(v44 - 448) = 0;
  *(_DWORD *)(v44 - 447) = 16843009;
  *(_WORD *)(v44 - 443) = 257;
  *(_DWORD *)(v44 - 441) = 0;
  *(_WORD *)(v44 - 437) = 0;
  *(_OWORD *)(v44 - 432) = xmmword_210804DB0;
  *(_QWORD *)(v44 - 416) = 0x3F80000000000000;
  *(_OWORD *)(v44 - 400) = v100;
  *(_OWORD *)(v44 - 384) = v100;
  *(int32x4_t *)(v44 - 368) = vdupq_n_s32(0xC3B40000);
  *(int32x4_t *)(v44 - 352) = vdupq_n_s32(0x43B40000u);
  *(_OWORD *)(v44 - 336) = 0u;
  *(_OWORD *)(v44 - 320) = 0u;
  *(_OWORD *)(v44 - 304) = 0u;
  *(_OWORD *)(v44 - 256) = 0u;
  *(_OWORD *)(v44 - 240) = xmmword_210802BA0;
  *(_OWORD *)(v44 - 224) = 0u;
  *(_OWORD *)(v44 - 208) = xmmword_210802BA0;
  IKString::assign((_QWORD *)(v44 - 288), (char *)&unk_2108059BE, 0);
  *(_DWORD *)(v44 - 264) = -1;
  FIK::MoCapBone::MoCapBone((FIK::MoCapBone *)&v101, *(FIK::Allocator **)(a2 + 16));
  FIK::IKArray<FIK::MoCapBone>::push_back<FIK::MoCapBone,void>((_QWORD *)(a2 + 208), (uint64_t)&v101);
  FIK::IKArray<IKString>::~IKArray((uint64_t)v132);
  if (v130)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v131 + 24))(v131, v129, 0, 8);
    v129 = 0;
    v130 = 0;
  }
  if (v106)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v107 + 24))(*(_QWORD *)v107, v105, 0, 8);
    v105 = 0;
    v106 = 0;
  }
  if (v103)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v104 + 24))(v104, v102, 0, 8);
  v45 = *(_QWORD *)(a2 + 224) + 544 * *(_QWORD *)(a2 + 208);
  *(_BYTE *)(v45 - 190) = 0;
  *(_DWORD *)(v45 - 188) = 0;
  *(_WORD *)(v45 - 192) = 0;
  *(_QWORD *)(v45 - 180) = 0x3DF5C28F3DCCCCCDLL;
  *(_WORD *)(v45 - 184) = 0;
  *(_DWORD *)(v45 - 172) = 5;
  *(_QWORD *)(v45 - 544) = -4294967291;
  IKString::assign((_QWORD *)(v45 - 536), "left_toesEnd_joint", (IKString *)0x12);
  IKString::assign((_QWORD *)(v45 - 512), "left_toes_joint", (IKString *)0xF);
  *(_OWORD *)(v45 - 480) = xmmword_210804DC0;
  *(_OWORD *)(v45 - 464) = xmmword_210802BA0;
  *(_BYTE *)(v45 - 448) = 0;
  *(_DWORD *)(v45 - 447) = 16843009;
  *(_WORD *)(v45 - 443) = 257;
  *(_DWORD *)(v45 - 441) = 0;
  *(_WORD *)(v45 - 437) = 0;
  *(_OWORD *)(v45 - 432) = xmmword_210804100;
  *(_QWORD *)(v45 - 416) = 0x3F80000000000000;
  *(_OWORD *)(v45 - 400) = v100;
  *(_OWORD *)(v45 - 384) = v100;
  *(int32x4_t *)(v45 - 368) = vdupq_n_s32(0xC3B40000);
  *(int32x4_t *)(v45 - 352) = vdupq_n_s32(0x43B40000u);
  *(_OWORD *)(v45 - 336) = 0u;
  *(_OWORD *)(v45 - 320) = 0u;
  *(_OWORD *)(v45 - 304) = 0u;
  *(_OWORD *)(v45 - 256) = 0u;
  *(_OWORD *)(v45 - 240) = xmmword_210802BA0;
  *(_OWORD *)(v45 - 224) = 0u;
  *(_OWORD *)(v45 - 208) = xmmword_210802BA0;
  IKString::assign((_QWORD *)(v45 - 288), (char *)&unk_2108059BE, 0);
  *(_DWORD *)(v45 - 264) = -1;
  FIK::MoCapBone::MoCapBone((FIK::MoCapBone *)&v101, *(FIK::Allocator **)(a2 + 16));
  FIK::IKArray<FIK::MoCapBone>::push_back<FIK::MoCapBone,void>((_QWORD *)(a2 + 208), (uint64_t)&v101);
  FIK::IKArray<IKString>::~IKArray((uint64_t)v132);
  if (v130)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v131 + 24))(v131, v129, 0, 8);
    v129 = 0;
    v130 = 0;
  }
  if (v106)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v107 + 24))(*(_QWORD *)v107, v105, 0, 8);
    v105 = 0;
    v106 = 0;
  }
  if (v103)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v104 + 24))(v104, v102, 0, 8);
  v46 = *(_QWORD *)(a2 + 224) + 544 * *(_QWORD *)(a2 + 208);
  *(_BYTE *)(v46 - 190) = 0;
  *(_DWORD *)(v46 - 188) = 0;
  *(_WORD *)(v46 - 192) = 0;
  *(_QWORD *)(v46 - 180) = 0x3DF5C28F3DCCCCCDLL;
  *(_WORD *)(v46 - 184) = 0;
  *(_DWORD *)(v46 - 172) = 5;
  *(_QWORD *)(v46 - 544) = -4294967290;
  IKString::assign((_QWORD *)(v46 - 536), "right_upLeg_joint", (IKString *)0x11);
  IKString::assign((_QWORD *)(v46 - 512), "hips_joint", (IKString *)0xA);
  *(_QWORD *)&v47 = 0x3F0000003F000000;
  *((_QWORD *)&v47 + 1) = 0x3F0000003F000000;
  *(_OWORD *)(v46 - 480) = xmmword_210804DD0;
  *(_OWORD *)(v46 - 464) = v47;
  *(_BYTE *)(v46 - 448) = 0;
  *(_DWORD *)(v46 - 447) = 16843009;
  *(_WORD *)(v46 - 443) = 257;
  *(_DWORD *)(v46 - 441) = 0;
  *(_WORD *)(v46 - 437) = 0;
  *(_OWORD *)(v46 - 432) = xmmword_210804DE0;
  *(_QWORD *)(v46 - 416) = 0x3F80000000000000;
  *(_OWORD *)(v46 - 400) = v100;
  *(_OWORD *)(v46 - 384) = v100;
  *(int32x4_t *)(v46 - 368) = vdupq_n_s32(0xC3B40000);
  *(int32x4_t *)(v46 - 352) = vdupq_n_s32(0x43B40000u);
  *(_OWORD *)(v46 - 336) = 0u;
  *(_OWORD *)(v46 - 320) = 0u;
  *(_OWORD *)(v46 - 304) = 0u;
  *(_OWORD *)(v46 - 256) = 0u;
  *(_OWORD *)(v46 - 240) = xmmword_210802BA0;
  *(_OWORD *)(v46 - 224) = 0u;
  *(_OWORD *)(v46 - 208) = xmmword_210802BA0;
  IKString::assign((_QWORD *)(v46 - 288), (char *)&unk_2108059BE, 0);
  *(_DWORD *)(v46 - 264) = -1;
  FIK::MoCapBone::MoCapBone((FIK::MoCapBone *)&v101, *(FIK::Allocator **)(a2 + 16));
  FIK::IKArray<FIK::MoCapBone>::push_back<FIK::MoCapBone,void>((_QWORD *)(a2 + 208), (uint64_t)&v101);
  FIK::IKArray<IKString>::~IKArray((uint64_t)v132);
  if (v130)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v131 + 24))(v131, v129, 0, 8);
    v129 = 0;
    v130 = 0;
  }
  if (v106)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v107 + 24))(*(_QWORD *)v107, v105, 0, 8);
    v105 = 0;
    v106 = 0;
  }
  if (v103)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v104 + 24))(v104, v102, 0, 8);
  v48 = *(_QWORD *)(a2 + 224) + 544 * *(_QWORD *)(a2 + 208);
  *(_BYTE *)(v48 - 190) = 0;
  *(_DWORD *)(v48 - 188) = 0;
  *(_WORD *)(v48 - 192) = 0;
  *(_QWORD *)(v48 - 180) = 0x3DF5C28F3DCCCCCDLL;
  *(_WORD *)(v48 - 184) = 0;
  *(_DWORD *)(v48 - 172) = 5;
  *(_QWORD *)(v48 - 544) = 0xFFFFFFFF00000007;
  IKString::assign((_QWORD *)(v48 - 536), "right_leg_joint", (IKString *)0xF);
  IKString::assign((_QWORD *)(v48 - 512), "right_upLeg_joint", (IKString *)0x11);
  *(_OWORD *)(v48 - 480) = xmmword_210804DF0;
  *(_OWORD *)(v48 - 464) = xmmword_210804D30;
  *(_BYTE *)(v48 - 448) = 0;
  *(_DWORD *)(v48 - 447) = 16843009;
  *(_WORD *)(v48 - 443) = 257;
  *(_DWORD *)(v48 - 441) = 0;
  *(_WORD *)(v48 - 437) = 0;
  *(_OWORD *)(v48 - 432) = xmmword_210804E00;
  *(_QWORD *)(v48 - 416) = 0x3F80000000000000;
  *(_OWORD *)(v48 - 400) = v100;
  *(_OWORD *)(v48 - 384) = v100;
  *(int32x4_t *)(v48 - 368) = vdupq_n_s32(0xC3B40000);
  *(int32x4_t *)(v48 - 352) = vdupq_n_s32(0x43B40000u);
  *(_OWORD *)(v48 - 336) = 0u;
  *(_OWORD *)(v48 - 320) = 0u;
  *(_OWORD *)(v48 - 304) = 0u;
  *(_OWORD *)(v48 - 256) = 0u;
  *(_OWORD *)(v48 - 240) = xmmword_210802BA0;
  *(_OWORD *)(v48 - 224) = 0u;
  *(_OWORD *)(v48 - 208) = xmmword_210802BA0;
  IKString::assign((_QWORD *)(v48 - 288), (char *)&unk_2108059BE, 0);
  *(_DWORD *)(v48 - 264) = -1;
  FIK::MoCapBone::MoCapBone((FIK::MoCapBone *)&v101, *(FIK::Allocator **)(a2 + 16));
  FIK::IKArray<FIK::MoCapBone>::push_back<FIK::MoCapBone,void>((_QWORD *)(a2 + 208), (uint64_t)&v101);
  FIK::IKArray<IKString>::~IKArray((uint64_t)v132);
  if (v130)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v131 + 24))(v131, v129, 0, 8);
    v129 = 0;
    v130 = 0;
  }
  if (v106)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v107 + 24))(*(_QWORD *)v107, v105, 0, 8);
    v105 = 0;
    v106 = 0;
  }
  if (v103)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v104 + 24))(v104, v102, 0, 8);
  v49 = *(_QWORD *)(a2 + 224) + 544 * *(_QWORD *)(a2 + 208);
  *(_BYTE *)(v49 - 190) = 0;
  *(_DWORD *)(v49 - 188) = 0;
  *(_WORD *)(v49 - 192) = 0;
  *(_QWORD *)(v49 - 180) = 0x3DF5C28F3DCCCCCDLL;
  *(_WORD *)(v49 - 184) = 0;
  *(_DWORD *)(v49 - 172) = 5;
  *(_QWORD *)(v49 - 544) = 0xFFFFFFFF00000008;
  IKString::assign((_QWORD *)(v49 - 536), "right_foot_joint", (IKString *)0x10);
  IKString::assign((_QWORD *)(v49 - 512), "right_leg_joint", (IKString *)0xF);
  *(_OWORD *)(v49 - 480) = xmmword_210804E20;
  *(_OWORD *)(v49 - 464) = xmmword_210804E10;
  *(_BYTE *)(v49 - 448) = 0;
  *(_DWORD *)(v49 - 447) = 16843009;
  *(_WORD *)(v49 - 443) = 257;
  *(_DWORD *)(v49 - 441) = 0;
  *(_WORD *)(v49 - 437) = 0;
  *(_OWORD *)(v49 - 432) = xmmword_210804E30;
  *(_QWORD *)(v49 - 416) = 0x3F80000000000000;
  *(_OWORD *)(v49 - 400) = v100;
  *(_OWORD *)(v49 - 384) = v100;
  *(int32x4_t *)(v49 - 368) = vdupq_n_s32(0xC3B40000);
  *(int32x4_t *)(v49 - 352) = vdupq_n_s32(0x43B40000u);
  *(_OWORD *)(v49 - 336) = 0u;
  *(_OWORD *)(v49 - 320) = 0u;
  *(_OWORD *)(v49 - 304) = 0u;
  *(_OWORD *)(v49 - 256) = 0u;
  *(_OWORD *)(v49 - 240) = xmmword_210802BA0;
  *(_OWORD *)(v49 - 224) = 0u;
  *(_OWORD *)(v49 - 208) = xmmword_210802BA0;
  IKString::assign((_QWORD *)(v49 - 288), (char *)&unk_2108059BE, 0);
  *(_DWORD *)(v49 - 264) = -1;
  FIK::MoCapBone::MoCapBone((FIK::MoCapBone *)&v101, *(FIK::Allocator **)(a2 + 16));
  FIK::IKArray<FIK::MoCapBone>::push_back<FIK::MoCapBone,void>((_QWORD *)(a2 + 208), (uint64_t)&v101);
  FIK::IKArray<IKString>::~IKArray((uint64_t)v132);
  if (v130)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v131 + 24))(v131, v129, 0, 8);
    v129 = 0;
    v130 = 0;
  }
  if (v106)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v107 + 24))(*(_QWORD *)v107, v105, 0, 8);
    v105 = 0;
    v106 = 0;
  }
  if (v103)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v104 + 24))(v104, v102, 0, 8);
  v50 = *(_QWORD *)(a2 + 224) + 544 * *(_QWORD *)(a2 + 208);
  *(_BYTE *)(v50 - 190) = 0;
  *(_DWORD *)(v50 - 188) = 0;
  *(_WORD *)(v50 - 192) = 0;
  *(_QWORD *)(v50 - 180) = 0x3DF5C28F3DCCCCCDLL;
  *(_WORD *)(v50 - 184) = 0;
  *(_DWORD *)(v50 - 172) = 5;
  *(_QWORD *)(v50 - 544) = -4294967287;
  IKString::assign((_QWORD *)(v50 - 536), "right_toes_joint", (IKString *)0x10);
  IKString::assign((_QWORD *)(v50 - 512), "right_foot_joint", (IKString *)0x10);
  *(_OWORD *)(v50 - 480) = xmmword_210804E40;
  *(_OWORD *)(v50 - 464) = xmmword_210804D90;
  *(_BYTE *)(v50 - 448) = 0;
  *(_DWORD *)(v50 - 447) = 16843009;
  *(_WORD *)(v50 - 443) = 257;
  *(_DWORD *)(v50 - 441) = 0;
  *(_WORD *)(v50 - 437) = 0;
  *(_OWORD *)(v50 - 432) = xmmword_210804E50;
  *(_QWORD *)(v50 - 416) = 0x3F80000000000000;
  *(_OWORD *)(v50 - 400) = v100;
  *(_OWORD *)(v50 - 384) = v100;
  *(int32x4_t *)(v50 - 368) = vdupq_n_s32(0xC3B40000);
  *(int32x4_t *)(v50 - 352) = vdupq_n_s32(0x43B40000u);
  *(_OWORD *)(v50 - 336) = 0u;
  *(_OWORD *)(v50 - 320) = 0u;
  *(_OWORD *)(v50 - 304) = 0u;
  *(_OWORD *)(v50 - 256) = 0u;
  *(_OWORD *)(v50 - 240) = xmmword_210802BA0;
  *(_OWORD *)(v50 - 224) = 0u;
  *(_OWORD *)(v50 - 208) = xmmword_210802BA0;
  IKString::assign((_QWORD *)(v50 - 288), (char *)&unk_2108059BE, 0);
  *(_DWORD *)(v50 - 264) = -1;
  FIK::MoCapBone::MoCapBone((FIK::MoCapBone *)&v101, *(FIK::Allocator **)(a2 + 16));
  FIK::IKArray<FIK::MoCapBone>::push_back<FIK::MoCapBone,void>((_QWORD *)(a2 + 208), (uint64_t)&v101);
  FIK::IKArray<IKString>::~IKArray((uint64_t)v132);
  if (v130)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v131 + 24))(v131, v129, 0, 8);
    v129 = 0;
    v130 = 0;
  }
  if (v106)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v107 + 24))(*(_QWORD *)v107, v105, 0, 8);
    v105 = 0;
    v106 = 0;
  }
  if (v103)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v104 + 24))(v104, v102, 0, 8);
  v51 = *(_QWORD *)(a2 + 224) + 544 * *(_QWORD *)(a2 + 208);
  *(_BYTE *)(v51 - 190) = 0;
  *(_DWORD *)(v51 - 188) = 0;
  *(_WORD *)(v51 - 192) = 0;
  *(_QWORD *)(v51 - 180) = 0x3DF5C28F3DCCCCCDLL;
  *(_WORD *)(v51 - 184) = 0;
  *(_DWORD *)(v51 - 172) = 5;
  *(_QWORD *)(v51 - 544) = -4294967286;
  IKString::assign((_QWORD *)(v51 - 536), "right_toesEnd_joint", (IKString *)0x13);
  IKString::assign((_QWORD *)(v51 - 512), "right_toes_joint", (IKString *)0x10);
  *(_OWORD *)(v51 - 480) = xmmword_210804E60;
  *(_OWORD *)(v51 - 464) = xmmword_210802BA0;
  *(_BYTE *)(v51 - 448) = 0;
  *(_DWORD *)(v51 - 447) = 16843009;
  *(_WORD *)(v51 - 443) = 257;
  *(_DWORD *)(v51 - 441) = 0;
  *(_WORD *)(v51 - 437) = 0;
  *(_OWORD *)(v51 - 432) = xmmword_210804100;
  *(_QWORD *)(v51 - 416) = 0x3F80000000000000;
  *(_OWORD *)(v51 - 400) = v100;
  *(_OWORD *)(v51 - 384) = v100;
  *(int32x4_t *)(v51 - 368) = vdupq_n_s32(0xC3B40000);
  *(int32x4_t *)(v51 - 352) = vdupq_n_s32(0x43B40000u);
  *(_OWORD *)(v51 - 336) = 0u;
  *(_OWORD *)(v51 - 320) = 0u;
  *(_OWORD *)(v51 - 304) = 0u;
  *(_OWORD *)(v51 - 256) = 0u;
  *(_OWORD *)(v51 - 240) = xmmword_210802BA0;
  *(_OWORD *)(v51 - 224) = 0u;
  *(_OWORD *)(v51 - 208) = xmmword_210802BA0;
  IKString::assign((_QWORD *)(v51 - 288), (char *)&unk_2108059BE, 0);
  *(_DWORD *)(v51 - 264) = -1;
  FIK::MoCapBone::MoCapBone((FIK::MoCapBone *)&v101, *(FIK::Allocator **)(a2 + 16));
  FIK::IKArray<FIK::MoCapBone>::push_back<FIK::MoCapBone,void>((_QWORD *)(a2 + 208), (uint64_t)&v101);
  FIK::IKArray<IKString>::~IKArray((uint64_t)v132);
  if (v130)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v131 + 24))(v131, v129, 0, 8);
    v129 = 0;
    v130 = 0;
  }
  if (v106)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v107 + 24))(*(_QWORD *)v107, v105, 0, 8);
    v105 = 0;
    v106 = 0;
  }
  if (v103)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v104 + 24))(v104, v102, 0, 8);
  v52 = *(_QWORD *)(a2 + 224) + 544 * *(_QWORD *)(a2 + 208);
  *(_BYTE *)(v52 - 190) = 0;
  *(_DWORD *)(v52 - 188) = 0;
  *(_WORD *)(v52 - 192) = 0;
  *(_QWORD *)(v52 - 180) = 0x3DF5C28F3DCCCCCDLL;
  *(_WORD *)(v52 - 184) = 0;
  *(_DWORD *)(v52 - 172) = 5;
  *(_QWORD *)(v52 - 544) = -4294967285;
  IKString::assign((_QWORD *)(v52 - 536), "spine_1_joint", (IKString *)0xD);
  IKString::assign((_QWORD *)(v52 - 512), "hips_joint", (IKString *)0xA);
  *(_QWORD *)&v53 = 0x3F0000003F000000;
  *((_QWORD *)&v53 + 1) = 0x3F0000003F000000;
  *(_OWORD *)(v52 - 480) = xmmword_210804E70;
  *(_OWORD *)(v52 - 464) = v53;
  *(_DWORD *)(v52 - 448) = 16843009;
  *(_QWORD *)(v52 - 445) = 16843009;
  *(_WORD *)(v52 - 437) = 0;
  *(_OWORD *)(v52 - 432) = xmmword_210804E80;
  *(_QWORD *)(v52 - 416) = 0x3F80000000000000;
  *(_OWORD *)(v52 - 400) = 0u;
  *(_OWORD *)(v52 - 384) = v100;
  *(int32x4_t *)(v52 - 368) = vdupq_n_s32(0xC3B40000);
  *(int32x4_t *)(v52 - 352) = vdupq_n_s32(0x43B40000u);
  *(_OWORD *)(v52 - 336) = 0u;
  *(_OWORD *)(v52 - 320) = 0u;
  *(_OWORD *)(v52 - 304) = 0u;
  *(_OWORD *)(v52 - 256) = 0u;
  *(_OWORD *)(v52 - 240) = xmmword_210802BA0;
  *(_OWORD *)(v52 - 224) = 0u;
  *(_OWORD *)(v52 - 208) = xmmword_210802BA0;
  IKString::assign((_QWORD *)(v52 - 288), (char *)&unk_2108059BE, 0);
  *(_DWORD *)(v52 - 264) = -1;
  FIK::MoCapBone::MoCapBone((FIK::MoCapBone *)&v101, *(FIK::Allocator **)(a2 + 16));
  FIK::IKArray<FIK::MoCapBone>::push_back<FIK::MoCapBone,void>((_QWORD *)(a2 + 208), (uint64_t)&v101);
  FIK::IKArray<IKString>::~IKArray((uint64_t)v132);
  if (v130)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v131 + 24))(v131, v129, 0, 8);
    v129 = 0;
    v130 = 0;
  }
  if (v106)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v107 + 24))(*(_QWORD *)v107, v105, 0, 8);
    v105 = 0;
    v106 = 0;
  }
  if (v103)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v104 + 24))(v104, v102, 0, 8);
  v54 = *(_QWORD *)(a2 + 224) + 544 * *(_QWORD *)(a2 + 208);
  *(_BYTE *)(v54 - 190) = 0;
  *(_DWORD *)(v54 - 188) = 0;
  *(_WORD *)(v54 - 192) = 0;
  *(_QWORD *)(v54 - 180) = 0x3DF5C28F3DCCCCCDLL;
  *(_WORD *)(v54 - 184) = 0;
  *(_DWORD *)(v54 - 172) = 5;
  *(_QWORD *)(v54 - 544) = -4294967284;
  IKString::assign((_QWORD *)(v54 - 536), "spine_2_joint", (IKString *)0xD);
  IKString::assign((_QWORD *)(v54 - 512), "spine_1_joint", (IKString *)0xD);
  *(_OWORD *)(v54 - 480) = xmmword_210804EA0;
  *(_OWORD *)(v54 - 464) = xmmword_210804E90;
  *(_DWORD *)(v54 - 448) = 16843009;
  *(_QWORD *)(v54 - 445) = 16843009;
  *(_WORD *)(v54 - 437) = 0;
  *(_OWORD *)(v54 - 432) = xmmword_210804EB0;
  *(_QWORD *)(v54 - 416) = 0x3F80000000000000;
  *(int32x4_t *)(v54 - 400) = vdupq_n_s32(0x3E19999Au);
  *(_OWORD *)(v54 - 384) = v100;
  *(int32x4_t *)(v54 - 368) = vdupq_n_s32(0xC3B40000);
  *(int32x4_t *)(v54 - 352) = vdupq_n_s32(0x43B40000u);
  *(_OWORD *)(v54 - 336) = 0u;
  *(_OWORD *)(v54 - 320) = 0u;
  *(_OWORD *)(v54 - 304) = 0u;
  *(_OWORD *)(v54 - 256) = 0u;
  *(_OWORD *)(v54 - 240) = xmmword_210802BA0;
  *(_OWORD *)(v54 - 224) = 0u;
  *(_OWORD *)(v54 - 208) = xmmword_210802BA0;
  IKString::assign((_QWORD *)(v54 - 288), (char *)&unk_2108059BE, 0);
  *(_DWORD *)(v54 - 264) = -1;
  FIK::MoCapBone::MoCapBone((FIK::MoCapBone *)&v101, *(FIK::Allocator **)(a2 + 16));
  FIK::IKArray<FIK::MoCapBone>::push_back<FIK::MoCapBone,void>((_QWORD *)(a2 + 208), (uint64_t)&v101);
  FIK::IKArray<IKString>::~IKArray((uint64_t)v132);
  if (v130)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v131 + 24))(v131, v129, 0, 8);
    v129 = 0;
    v130 = 0;
  }
  if (v106)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v107 + 24))(*(_QWORD *)v107, v105, 0, 8);
    v105 = 0;
    v106 = 0;
  }
  if (v103)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v104 + 24))(v104, v102, 0, 8);
  v55 = *(_QWORD *)(a2 + 224) + 544 * *(_QWORD *)(a2 + 208);
  *(_BYTE *)(v55 - 190) = 0;
  *(_DWORD *)(v55 - 188) = 0;
  *(_WORD *)(v55 - 192) = 0;
  *(_QWORD *)(v55 - 180) = 0x3DF5C28F3DCCCCCDLL;
  *(_WORD *)(v55 - 184) = 0;
  *(_DWORD *)(v55 - 172) = 5;
  *(_QWORD *)(v55 - 544) = -4294967283;
  IKString::assign((_QWORD *)(v55 - 536), "spine_3_joint", (IKString *)0xD);
  IKString::assign((_QWORD *)(v55 - 512), "spine_2_joint", (IKString *)0xD);
  *(_OWORD *)(v55 - 480) = xmmword_210804ED0;
  *(_OWORD *)(v55 - 464) = xmmword_210804EC0;
  *(_DWORD *)(v55 - 448) = 16843009;
  *(_QWORD *)(v55 - 445) = 16843009;
  *(_WORD *)(v55 - 437) = 0;
  *(_OWORD *)(v55 - 432) = xmmword_210804EE0;
  *(_QWORD *)(v55 - 416) = 0x3F80000000000000;
  *(int32x4_t *)(v55 - 400) = vdupq_n_s32(0x3E19999Au);
  *(_OWORD *)(v55 - 384) = v100;
  *(int32x4_t *)(v55 - 368) = vdupq_n_s32(0xC3B40000);
  *(int32x4_t *)(v55 - 352) = vdupq_n_s32(0x43B40000u);
  *(_OWORD *)(v55 - 336) = 0u;
  *(_OWORD *)(v55 - 320) = 0u;
  *(_OWORD *)(v55 - 304) = 0u;
  *(_OWORD *)(v55 - 256) = 0u;
  *(_OWORD *)(v55 - 240) = xmmword_210802BA0;
  *(_OWORD *)(v55 - 224) = 0u;
  *(_OWORD *)(v55 - 208) = xmmword_210802BA0;
  IKString::assign((_QWORD *)(v55 - 288), (char *)&unk_2108059BE, 0);
  *(_DWORD *)(v55 - 264) = -1;
  FIK::MoCapBone::MoCapBone((FIK::MoCapBone *)&v101, *(FIK::Allocator **)(a2 + 16));
  FIK::IKArray<FIK::MoCapBone>::push_back<FIK::MoCapBone,void>((_QWORD *)(a2 + 208), (uint64_t)&v101);
  FIK::IKArray<IKString>::~IKArray((uint64_t)v132);
  if (v130)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v131 + 24))(v131, v129, 0, 8);
    v129 = 0;
    v130 = 0;
  }
  if (v106)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v107 + 24))(*(_QWORD *)v107, v105, 0, 8);
    v105 = 0;
    v106 = 0;
  }
  if (v103)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v104 + 24))(v104, v102, 0, 8);
  v56 = *(_QWORD *)(a2 + 224) + 544 * *(_QWORD *)(a2 + 208);
  *(_BYTE *)(v56 - 190) = 0;
  *(_DWORD *)(v56 - 188) = 0;
  *(_WORD *)(v56 - 192) = 0;
  *(_QWORD *)(v56 - 180) = 0x3DF5C28F3DCCCCCDLL;
  *(_WORD *)(v56 - 184) = 0;
  *(_DWORD *)(v56 - 172) = 5;
  *(_QWORD *)(v56 - 544) = -4294967282;
  IKString::assign((_QWORD *)(v56 - 536), "spine_4_joint", (IKString *)0xD);
  IKString::assign((_QWORD *)(v56 - 512), "spine_3_joint", (IKString *)0xD);
  *(_OWORD *)(v56 - 480) = xmmword_210804F00;
  *(_OWORD *)(v56 - 464) = xmmword_210804EF0;
  *(_DWORD *)(v56 - 448) = 16843009;
  *(_QWORD *)(v56 - 445) = 16843009;
  *(_WORD *)(v56 - 437) = 0;
  *(_OWORD *)(v56 - 432) = xmmword_210804F10;
  *(_QWORD *)(v56 - 416) = 0x3F80000000000000;
  *(int32x4_t *)(v56 - 400) = vdupq_n_s32(0x3E19999Au);
  *(_OWORD *)(v56 - 384) = v100;
  *(int32x4_t *)(v56 - 368) = vdupq_n_s32(0xC3B40000);
  *(int32x4_t *)(v56 - 352) = vdupq_n_s32(0x43B40000u);
  *(_OWORD *)(v56 - 336) = 0u;
  *(_OWORD *)(v56 - 320) = 0u;
  *(_OWORD *)(v56 - 304) = 0u;
  *(_OWORD *)(v56 - 256) = 0u;
  *(_OWORD *)(v56 - 240) = xmmword_210802BA0;
  *(_OWORD *)(v56 - 224) = 0u;
  *(_OWORD *)(v56 - 208) = xmmword_210802BA0;
  IKString::assign((_QWORD *)(v56 - 288), (char *)&unk_2108059BE, 0);
  *(_DWORD *)(v56 - 264) = -1;
  FIK::MoCapBone::MoCapBone((FIK::MoCapBone *)&v101, *(FIK::Allocator **)(a2 + 16));
  FIK::IKArray<FIK::MoCapBone>::push_back<FIK::MoCapBone,void>((_QWORD *)(a2 + 208), (uint64_t)&v101);
  FIK::IKArray<IKString>::~IKArray((uint64_t)v132);
  if (v130)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v131 + 24))(v131, v129, 0, 8);
    v129 = 0;
    v130 = 0;
  }
  if (v106)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v107 + 24))(*(_QWORD *)v107, v105, 0, 8);
    v105 = 0;
    v106 = 0;
  }
  if (v103)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v104 + 24))(v104, v102, 0, 8);
  v57 = *(_QWORD *)(a2 + 224) + 544 * *(_QWORD *)(a2 + 208);
  *(_BYTE *)(v57 - 190) = 0;
  *(_DWORD *)(v57 - 188) = 0;
  *(_WORD *)(v57 - 192) = 0;
  *(_QWORD *)(v57 - 180) = 0x3DF5C28F3DCCCCCDLL;
  *(_WORD *)(v57 - 184) = 0;
  *(_DWORD *)(v57 - 172) = 5;
  *(_QWORD *)(v57 - 544) = 0xFFFFFFFF0000000FLL;
  IKString::assign((_QWORD *)(v57 - 536), "spine_5_joint", (IKString *)0xD);
  IKString::assign((_QWORD *)(v57 - 512), "spine_4_joint", (IKString *)0xD);
  *(_OWORD *)(v57 - 480) = xmmword_210804F30;
  *(_OWORD *)(v57 - 464) = xmmword_210804F20;
  *(_DWORD *)(v57 - 448) = 16843009;
  *(_QWORD *)(v57 - 445) = 16843009;
  *(_WORD *)(v57 - 437) = 0;
  *(_OWORD *)(v57 - 432) = xmmword_210804F40;
  *(_QWORD *)(v57 - 416) = 0x3F80000000000000;
  *(int32x4_t *)(v57 - 400) = vdupq_n_s32(0x3E19999Au);
  *(_OWORD *)(v57 - 384) = v100;
  *(int32x4_t *)(v57 - 368) = vdupq_n_s32(0xC3B40000);
  *(int32x4_t *)(v57 - 352) = vdupq_n_s32(0x43B40000u);
  *(_OWORD *)(v57 - 336) = 0u;
  *(_OWORD *)(v57 - 320) = 0u;
  *(_OWORD *)(v57 - 304) = 0u;
  *(_OWORD *)(v57 - 256) = 0u;
  *(_OWORD *)(v57 - 240) = xmmword_210802BA0;
  *(_OWORD *)(v57 - 224) = 0u;
  *(_OWORD *)(v57 - 208) = xmmword_210802BA0;
  IKString::assign((_QWORD *)(v57 - 288), (char *)&unk_2108059BE, 0);
  *(_DWORD *)(v57 - 264) = -1;
  FIK::MoCapBone::MoCapBone((FIK::MoCapBone *)&v101, *(FIK::Allocator **)(a2 + 16));
  FIK::IKArray<FIK::MoCapBone>::push_back<FIK::MoCapBone,void>((_QWORD *)(a2 + 208), (uint64_t)&v101);
  FIK::IKArray<IKString>::~IKArray((uint64_t)v132);
  if (v130)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v131 + 24))(v131, v129, 0, 8);
    v129 = 0;
    v130 = 0;
  }
  if (v106)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v107 + 24))(*(_QWORD *)v107, v105, 0, 8);
    v105 = 0;
    v106 = 0;
  }
  if (v103)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v104 + 24))(v104, v102, 0, 8);
  v58 = *(_QWORD *)(a2 + 224) + 544 * *(_QWORD *)(a2 + 208);
  *(_BYTE *)(v58 - 190) = 0;
  *(_DWORD *)(v58 - 188) = 0;
  *(_WORD *)(v58 - 192) = 0;
  *(_QWORD *)(v58 - 180) = 0x3DF5C28F3DCCCCCDLL;
  *(_WORD *)(v58 - 184) = 0;
  *(_DWORD *)(v58 - 172) = 5;
  *(_QWORD *)(v58 - 544) = 0xFFFFFFFF00000010;
  IKString::assign((_QWORD *)(v58 - 536), "spine_6_joint", (IKString *)0xD);
  IKString::assign((_QWORD *)(v58 - 512), "spine_5_joint", (IKString *)0xD);
  *(_OWORD *)(v58 - 480) = xmmword_210804F60;
  *(_OWORD *)(v58 - 464) = xmmword_210804F50;
  *(_DWORD *)(v58 - 448) = 16843009;
  *(_QWORD *)(v58 - 445) = 16843009;
  *(_WORD *)(v58 - 437) = 0;
  *(_OWORD *)(v58 - 432) = xmmword_210804F70;
  *(_QWORD *)(v58 - 416) = 0x3F80000000000000;
  *(int32x4_t *)(v58 - 400) = vdupq_n_s32(0x3E19999Au);
  *(_OWORD *)(v58 - 384) = v100;
  *(int32x4_t *)(v58 - 368) = vdupq_n_s32(0xC3B40000);
  *(int32x4_t *)(v58 - 352) = vdupq_n_s32(0x43B40000u);
  *(_OWORD *)(v58 - 336) = 0u;
  *(_OWORD *)(v58 - 320) = 0u;
  *(_OWORD *)(v58 - 304) = 0u;
  *(_OWORD *)(v58 - 256) = 0u;
  *(_OWORD *)(v58 - 240) = xmmword_210802BA0;
  *(_OWORD *)(v58 - 224) = 0u;
  *(_OWORD *)(v58 - 208) = xmmword_210802BA0;
  IKString::assign((_QWORD *)(v58 - 288), (char *)&unk_2108059BE, 0);
  *(_DWORD *)(v58 - 264) = -1;
  FIK::MoCapBone::MoCapBone((FIK::MoCapBone *)&v101, *(FIK::Allocator **)(a2 + 16));
  FIK::IKArray<FIK::MoCapBone>::push_back<FIK::MoCapBone,void>((_QWORD *)(a2 + 208), (uint64_t)&v101);
  FIK::IKArray<IKString>::~IKArray((uint64_t)v132);
  if (v130)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v131 + 24))(v131, v129, 0, 8);
    v129 = 0;
    v130 = 0;
  }
  if (v106)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v107 + 24))(*(_QWORD *)v107, v105, 0, 8);
    v105 = 0;
    v106 = 0;
  }
  if (v103)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v104 + 24))(v104, v102, 0, 8);
  v59 = *(_QWORD *)(a2 + 224) + 544 * *(_QWORD *)(a2 + 208);
  *(_BYTE *)(v59 - 190) = 0;
  *(_DWORD *)(v59 - 188) = 0;
  *(_WORD *)(v59 - 192) = 0;
  *(_QWORD *)(v59 - 180) = 0x3DF5C28F3DCCCCCDLL;
  *(_WORD *)(v59 - 184) = 0;
  *(_DWORD *)(v59 - 172) = 5;
  *(_QWORD *)(v59 - 544) = -4294967279;
  IKString::assign((_QWORD *)(v59 - 536), "spine_7_joint", (IKString *)0xD);
  IKString::assign((_QWORD *)(v59 - 512), "spine_6_joint", (IKString *)0xD);
  *(_OWORD *)(v59 - 480) = xmmword_210804F90;
  *(_OWORD *)(v59 - 464) = xmmword_210804F80;
  *(_DWORD *)(v59 - 448) = 16843009;
  *(_QWORD *)(v59 - 445) = 16843009;
  *(_WORD *)(v59 - 437) = 0;
  *(_OWORD *)(v59 - 432) = xmmword_210804FA0;
  *(_QWORD *)(v59 - 416) = 0x3F80000000000000;
  *(int32x4_t *)(v59 - 400) = vdupq_n_s32(0x3ECCCCCDu);
  *(_OWORD *)(v59 - 384) = v100;
  *(int32x4_t *)(v59 - 368) = vdupq_n_s32(0xC3B40000);
  *(int32x4_t *)(v59 - 352) = vdupq_n_s32(0x43B40000u);
  *(_OWORD *)(v59 - 336) = 0u;
  *(_OWORD *)(v59 - 320) = 0u;
  *(_OWORD *)(v59 - 304) = 0u;
  *(_OWORD *)(v59 - 256) = 0u;
  *(_OWORD *)(v59 - 240) = xmmword_210802BA0;
  *(_OWORD *)(v59 - 224) = 0u;
  *(_OWORD *)(v59 - 208) = xmmword_210802BA0;
  IKString::assign((_QWORD *)(v59 - 288), (char *)&unk_2108059BE, 0);
  *(_DWORD *)(v59 - 264) = -1;
  FIK::MoCapBone::MoCapBone((FIK::MoCapBone *)&v101, *(FIK::Allocator **)(a2 + 16));
  FIK::IKArray<FIK::MoCapBone>::push_back<FIK::MoCapBone,void>((_QWORD *)(a2 + 208), (uint64_t)&v101);
  FIK::IKArray<IKString>::~IKArray((uint64_t)v132);
  if (v130)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v131 + 24))(v131, v129, 0, 8);
    v129 = 0;
    v130 = 0;
  }
  if (v106)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v107 + 24))(*(_QWORD *)v107, v105, 0, 8);
    v105 = 0;
    v106 = 0;
  }
  if (v103)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v104 + 24))(v104, v102, 0, 8);
  v60 = *(_QWORD *)(a2 + 224) + 544 * *(_QWORD *)(a2 + 208);
  *(_BYTE *)(v60 - 190) = 0;
  *(_DWORD *)(v60 - 188) = 0;
  *(_WORD *)(v60 - 192) = 1;
  *(_QWORD *)(v60 - 180) = 0x3DF5C28F3DCCCCCDLL;
  *(_WORD *)(v60 - 184) = 1;
  *(_DWORD *)(v60 - 172) = 5;
  *(_QWORD *)(v60 - 544) = -4294967278;
  IKString::assign((_QWORD *)(v60 - 536), "neck_1_joint", (IKString *)0xC);
  IKString::assign((_QWORD *)(v60 - 512), "spine_7_joint", (IKString *)0xD);
  *(_OWORD *)(v60 - 480) = xmmword_210804F90;
  *(_OWORD *)(v60 - 464) = xmmword_210804FB0;
  *(_DWORD *)(v60 - 448) = 16843009;
  *(_QWORD *)(v60 - 445) = 16843009;
  *(_WORD *)(v60 - 437) = 0;
  *(_OWORD *)(v60 - 432) = xmmword_210804FC0;
  *(_QWORD *)(v60 - 416) = 0x3F80000000000000;
  *(_OWORD *)(v60 - 400) = v100;
  *(_OWORD *)(v60 - 384) = v100;
  *(int32x4_t *)(v60 - 368) = vdupq_n_s32(0xC3B40000);
  *(int32x4_t *)(v60 - 352) = vdupq_n_s32(0x43B40000u);
  *(_OWORD *)(v60 - 336) = 0u;
  *(_OWORD *)(v60 - 320) = 0u;
  *(_OWORD *)(v60 - 304) = 0u;
  *(_OWORD *)(v60 - 256) = 0u;
  *(_OWORD *)(v60 - 240) = xmmword_210802BA0;
  *(_OWORD *)(v60 - 224) = 0u;
  *(_OWORD *)(v60 - 208) = xmmword_210802BA0;
  IKString::assign((_QWORD *)(v60 - 288), "MidShoulder", (IKString *)0xB);
  *(_DWORD *)(v60 - 264) = -1;
  FIK::MoCapBone::MoCapBone((FIK::MoCapBone *)&v101, *(FIK::Allocator **)(a2 + 16));
  FIK::IKArray<FIK::MoCapBone>::push_back<FIK::MoCapBone,void>((_QWORD *)(a2 + 208), (uint64_t)&v101);
  FIK::IKArray<IKString>::~IKArray((uint64_t)v132);
  if (v130)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v131 + 24))(v131, v129, 0, 8);
    v129 = 0;
    v130 = 0;
  }
  if (v106)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v107 + 24))(*(_QWORD *)v107, v105, 0, 8);
    v105 = 0;
    v106 = 0;
  }
  if (v103)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v104 + 24))(v104, v102, 0, 8);
  v61 = *(_QWORD *)(a2 + 224) + 544 * *(_QWORD *)(a2 + 208);
  *(_BYTE *)(v61 - 190) = 0;
  *(_DWORD *)(v61 - 188) = 0;
  *(_WORD *)(v61 - 192) = 0;
  *(_QWORD *)(v61 - 180) = 0x3DF5C28F3DCCCCCDLL;
  *(_WORD *)(v61 - 184) = 0;
  *(_DWORD *)(v61 - 172) = 5;
  *(_QWORD *)(v61 - 544) = -4294967277;
  IKString::assign((_QWORD *)(v61 - 536), "neck_2_joint", (IKString *)0xC);
  IKString::assign((_QWORD *)(v61 - 512), "neck_1_joint", (IKString *)0xC);
  *(_OWORD *)(v61 - 480) = xmmword_210804FE0;
  *(_OWORD *)(v61 - 464) = xmmword_210804FD0;
  *(_DWORD *)(v61 - 448) = 16843009;
  *(_QWORD *)(v61 - 445) = 16843009;
  *(_WORD *)(v61 - 437) = 0;
  *(_OWORD *)(v61 - 432) = xmmword_210804FF0;
  *(_QWORD *)(v61 - 416) = 0x3F80000000000000;
  *(_OWORD *)(v61 - 400) = v100;
  *(_OWORD *)(v61 - 384) = v100;
  *(int32x4_t *)(v61 - 368) = vdupq_n_s32(0xC3B40000);
  *(int32x4_t *)(v61 - 352) = vdupq_n_s32(0x43B40000u);
  *(_OWORD *)(v61 - 336) = 0u;
  *(_OWORD *)(v61 - 320) = 0u;
  *(_OWORD *)(v61 - 304) = 0u;
  *(_OWORD *)(v61 - 256) = 0u;
  *(_OWORD *)(v61 - 240) = xmmword_210802BA0;
  *(_OWORD *)(v61 - 224) = 0u;
  *(_OWORD *)(v61 - 208) = xmmword_210802BA0;
  IKString::assign((_QWORD *)(v61 - 288), (char *)&unk_2108059BE, 0);
  *(_DWORD *)(v61 - 264) = -1;
  FIK::MoCapBone::MoCapBone((FIK::MoCapBone *)&v101, *(FIK::Allocator **)(a2 + 16));
  FIK::IKArray<FIK::MoCapBone>::push_back<FIK::MoCapBone,void>((_QWORD *)(a2 + 208), (uint64_t)&v101);
  FIK::IKArray<IKString>::~IKArray((uint64_t)v132);
  if (v130)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v131 + 24))(v131, v129, 0, 8);
    v129 = 0;
    v130 = 0;
  }
  if (v106)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v107 + 24))(*(_QWORD *)v107, v105, 0, 8);
    v105 = 0;
    v106 = 0;
  }
  if (v103)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v104 + 24))(v104, v102, 0, 8);
  v62 = *(_QWORD *)(a2 + 224) + 544 * *(_QWORD *)(a2 + 208);
  *(_BYTE *)(v62 - 190) = 0;
  *(_DWORD *)(v62 - 188) = 0;
  *(_WORD *)(v62 - 192) = 0;
  *(_QWORD *)(v62 - 180) = 0x3DF5C28F3DCCCCCDLL;
  *(_WORD *)(v62 - 184) = 0;
  *(_DWORD *)(v62 - 172) = 5;
  *(_QWORD *)(v62 - 544) = -4294967276;
  IKString::assign((_QWORD *)(v62 - 536), "neck_3_joint", (IKString *)0xC);
  IKString::assign((_QWORD *)(v62 - 512), "neck_2_joint", (IKString *)0xC);
  *(_OWORD *)(v62 - 480) = xmmword_210805010;
  *(_OWORD *)(v62 - 464) = xmmword_210805000;
  *(_DWORD *)(v62 - 448) = 16843009;
  *(_QWORD *)(v62 - 445) = 16843009;
  *(_WORD *)(v62 - 437) = 0;
  *(_OWORD *)(v62 - 432) = xmmword_210805020;
  *(_QWORD *)(v62 - 416) = 0x3F80000000000000;
  *(_OWORD *)(v62 - 400) = v100;
  *(_OWORD *)(v62 - 384) = v100;
  *(int32x4_t *)(v62 - 368) = vdupq_n_s32(0xC3B40000);
  *(int32x4_t *)(v62 - 352) = vdupq_n_s32(0x43B40000u);
  *(_OWORD *)(v62 - 336) = 0u;
  *(_OWORD *)(v62 - 320) = 0u;
  *(_OWORD *)(v62 - 304) = 0u;
  *(_OWORD *)(v62 - 256) = 0u;
  *(_OWORD *)(v62 - 240) = xmmword_210802BA0;
  *(_OWORD *)(v62 - 224) = 0u;
  *(_OWORD *)(v62 - 208) = xmmword_210802BA0;
  IKString::assign((_QWORD *)(v62 - 288), (char *)&unk_2108059BE, 0);
  *(_DWORD *)(v62 - 264) = -1;
  FIK::MoCapBone::MoCapBone((FIK::MoCapBone *)&v101, *(FIK::Allocator **)(a2 + 16));
  FIK::IKArray<FIK::MoCapBone>::push_back<FIK::MoCapBone,void>((_QWORD *)(a2 + 208), (uint64_t)&v101);
  FIK::IKArray<IKString>::~IKArray((uint64_t)v132);
  if (v130)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v131 + 24))(v131, v129, 0, 8);
    v129 = 0;
    v130 = 0;
  }
  if (v106)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v107 + 24))(*(_QWORD *)v107, v105, 0, 8);
    v105 = 0;
    v106 = 0;
  }
  if (v103)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v104 + 24))(v104, v102, 0, 8);
  v63 = *(_QWORD *)(a2 + 224) + 544 * *(_QWORD *)(a2 + 208);
  *(_BYTE *)(v63 - 190) = 0;
  *(_DWORD *)(v63 - 188) = 0;
  *(_WORD *)(v63 - 192) = 0;
  *(_QWORD *)(v63 - 180) = 0x3DF5C28F3DCCCCCDLL;
  *(_WORD *)(v63 - 184) = 0;
  *(_DWORD *)(v63 - 172) = 5;
  *(_QWORD *)(v63 - 544) = -4294967275;
  IKString::assign((_QWORD *)(v63 - 536), "neck_4_joint", (IKString *)0xC);
  IKString::assign((_QWORD *)(v63 - 512), "neck_3_joint", (IKString *)0xC);
  *(_OWORD *)(v63 - 480) = xmmword_210805040;
  *(_OWORD *)(v63 - 464) = xmmword_210805030;
  *(_DWORD *)(v63 - 448) = 16843009;
  *(_QWORD *)(v63 - 445) = 16843009;
  *(_WORD *)(v63 - 437) = 0;
  *(_OWORD *)(v63 - 432) = xmmword_210805050;
  *(_QWORD *)(v63 - 416) = 0x3F80000000000000;
  *(_OWORD *)(v63 - 400) = v100;
  *(_OWORD *)(v63 - 384) = v100;
  *(int32x4_t *)(v63 - 368) = vdupq_n_s32(0xC3B40000);
  *(int32x4_t *)(v63 - 352) = vdupq_n_s32(0x43B40000u);
  *(_OWORD *)(v63 - 336) = 0u;
  *(_OWORD *)(v63 - 320) = 0u;
  *(_OWORD *)(v63 - 304) = 0u;
  *(_OWORD *)(v63 - 256) = 0u;
  *(_OWORD *)(v63 - 240) = xmmword_210802BA0;
  *(_OWORD *)(v63 - 224) = 0u;
  *(_OWORD *)(v63 - 208) = xmmword_210802BA0;
  IKString::assign((_QWORD *)(v63 - 288), (char *)&unk_2108059BE, 0);
  *(_DWORD *)(v63 - 264) = -1;
  FIK::MoCapBone::MoCapBone((FIK::MoCapBone *)&v101, *(FIK::Allocator **)(a2 + 16));
  FIK::IKArray<FIK::MoCapBone>::push_back<FIK::MoCapBone,void>((_QWORD *)(a2 + 208), (uint64_t)&v101);
  FIK::IKArray<IKString>::~IKArray((uint64_t)v132);
  if (v130)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v131 + 24))(v131, v129, 0, 8);
    v129 = 0;
    v130 = 0;
  }
  if (v106)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v107 + 24))(*(_QWORD *)v107, v105, 0, 8);
    v105 = 0;
    v106 = 0;
  }
  if (v103)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v104 + 24))(v104, v102, 0, 8);
  v64 = *(_QWORD *)(a2 + 224) + 544 * *(_QWORD *)(a2 + 208);
  *(_BYTE *)(v64 - 190) = 0;
  *(_DWORD *)(v64 - 188) = 0;
  *(_WORD *)(v64 - 192) = 1;
  *(_QWORD *)(v64 - 180) = 0x3DF5C28F3DCCCCCDLL;
  *(_WORD *)(v64 - 184) = 1;
  *(_DWORD *)(v64 - 172) = 5;
  *(_QWORD *)(v64 - 544) = -4294967274;
  IKString::assign((_QWORD *)(v64 - 536), "head_joint", (IKString *)0xA);
  IKString::assign((_QWORD *)(v64 - 512), "neck_4_joint", (IKString *)0xC);
  *(_OWORD *)(v64 - 480) = xmmword_210805070;
  *(_OWORD *)(v64 - 464) = xmmword_210805060;
  *(_DWORD *)(v64 - 448) = 16843009;
  *(_WORD *)(v64 - 444) = 256;
  *(_BYTE *)(v64 - 442) = 1;
  *(_DWORD *)(v64 - 441) = 0;
  *(_WORD *)(v64 - 437) = 0;
  *(_OWORD *)(v64 - 432) = xmmword_210805080;
  *(_QWORD *)(v64 - 416) = 0x3F80000000000000;
  *(_OWORD *)(v64 - 400) = v100;
  *(_OWORD *)(v64 - 384) = v100;
  *(int32x4_t *)(v64 - 368) = vdupq_n_s32(0xC3B40000);
  *(int32x4_t *)(v64 - 352) = vdupq_n_s32(0x43B40000u);
  *(_OWORD *)(v64 - 336) = 0u;
  *(_OWORD *)(v64 - 320) = 0u;
  *(_OWORD *)(v64 - 304) = 0u;
  *(_OWORD *)(v64 - 256) = 0u;
  *(_OWORD *)(v64 - 240) = xmmword_210802BA0;
  *(_OWORD *)(v64 - 224) = 0u;
  *(_OWORD *)(v64 - 208) = xmmword_210802BA0;
  IKString::assign((_QWORD *)(v64 - 288), "Atlas", (IKString *)5);
  *(_DWORD *)(v64 - 264) = -1;
  FIK::MoCapBone::MoCapBone((FIK::MoCapBone *)&v101, *(FIK::Allocator **)(a2 + 16));
  FIK::IKArray<FIK::MoCapBone>::push_back<FIK::MoCapBone,void>((_QWORD *)(a2 + 208), (uint64_t)&v101);
  FIK::IKArray<IKString>::~IKArray((uint64_t)v132);
  if (v130)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v131 + 24))(v131, v129, 0, 8);
    v129 = 0;
    v130 = 0;
  }
  if (v106)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v107 + 24))(*(_QWORD *)v107, v105, 0, 8);
    v105 = 0;
    v106 = 0;
  }
  if (v103)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v104 + 24))(v104, v102, 0, 8);
  v65 = *(_QWORD *)(a2 + 224) + 544 * *(_QWORD *)(a2 + 208);
  *(_BYTE *)(v65 - 190) = 0;
  *(_DWORD *)(v65 - 188) = 0;
  *(_WORD *)(v65 - 192) = 0;
  *(_QWORD *)(v65 - 180) = 0x3DF5C28F3DCCCCCDLL;
  *(_WORD *)(v65 - 184) = 0;
  *(_DWORD *)(v65 - 172) = 5;
  *(_QWORD *)(v65 - 544) = -4294967273;
  IKString::assign((_QWORD *)(v65 - 536), "left_shoulder_1_joint", (IKString *)0x15);
  IKString::assign((_QWORD *)(v65 - 512), "spine_7_joint", (IKString *)0xD);
  *(_OWORD *)(v65 - 480) = xmmword_2108050A0;
  *(_OWORD *)(v65 - 464) = xmmword_210805090;
  *(_WORD *)(v65 - 448) = 1;
  *(_DWORD *)(v65 - 446) = 16843009;
  *(_BYTE *)(v65 - 442) = 1;
  *(_DWORD *)(v65 - 441) = 0;
  *(_WORD *)(v65 - 437) = 0;
  *(_OWORD *)(v65 - 432) = xmmword_2108050B0;
  *(_QWORD *)(v65 - 416) = 0x3F80000000000000;
  *(_OWORD *)(v65 - 400) = v100;
  *(_OWORD *)(v65 - 384) = xmmword_2108050C0;
  *(int32x4_t *)(v65 - 368) = vdupq_n_s32(0xC3B40000);
  *(int32x4_t *)(v65 - 352) = vdupq_n_s32(0x43B40000u);
  *(_OWORD *)(v65 - 336) = 0u;
  *(_OWORD *)(v65 - 320) = 0u;
  *(_OWORD *)(v65 - 304) = 0u;
  *(_OWORD *)(v65 - 256) = 0u;
  *(_OWORD *)(v65 - 240) = xmmword_210802BA0;
  *(_OWORD *)(v65 - 224) = 0u;
  *(_OWORD *)(v65 - 208) = xmmword_210802BA0;
  IKString::assign((_QWORD *)(v65 - 288), (char *)&unk_2108059BE, 0);
  *(_DWORD *)(v65 - 264) = -1;
  FIK::MoCapBone::MoCapBone((FIK::MoCapBone *)&v101, *(FIK::Allocator **)(a2 + 16));
  FIK::IKArray<FIK::MoCapBone>::push_back<FIK::MoCapBone,void>((_QWORD *)(a2 + 208), (uint64_t)&v101);
  FIK::IKArray<IKString>::~IKArray((uint64_t)v132);
  if (v130)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v131 + 24))(v131, v129, 0, 8);
    v129 = 0;
    v130 = 0;
  }
  if (v106)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v107 + 24))(*(_QWORD *)v107, v105, 0, 8);
    v105 = 0;
    v106 = 0;
  }
  if (v103)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v104 + 24))(v104, v102, 0, 8);
  v66 = *(_QWORD *)(a2 + 224) + 544 * *(_QWORD *)(a2 + 208);
  *(_BYTE *)(v66 - 190) = 0;
  *(_DWORD *)(v66 - 188) = 0;
  *(_WORD *)(v66 - 192) = 1;
  *(_QWORD *)(v66 - 180) = 0x3DF5C28F3DCCCCCDLL;
  *(_WORD *)(v66 - 184) = 1;
  *(_DWORD *)(v66 - 172) = 5;
  *(_QWORD *)(v66 - 544) = -4294967272;
  IKString::assign((_QWORD *)(v66 - 536), "left_arm_joint", (IKString *)0xE);
  IKString::assign((_QWORD *)(v66 - 512), "left_shoulder_1_joint", (IKString *)0x15);
  *(_OWORD *)(v66 - 480) = xmmword_2108050E0;
  *(_OWORD *)(v66 - 464) = xmmword_2108050D0;
  *(_DWORD *)(v66 - 448) = 16843009;
  *(_QWORD *)(v66 - 445) = 16843009;
  *(_WORD *)(v66 - 437) = 0;
  *(_OWORD *)(v66 - 432) = xmmword_2108050F0;
  *(_QWORD *)(v66 - 416) = 0x3F80000000000000;
  *(_OWORD *)(v66 - 400) = v100;
  *(_OWORD *)(v66 - 384) = xmmword_210805100;
  *(int32x4_t *)(v66 - 368) = vdupq_n_s32(0xC3B40000);
  *(int32x4_t *)(v66 - 352) = vdupq_n_s32(0x43B40000u);
  *(_OWORD *)(v66 - 336) = 0u;
  *(_OWORD *)(v66 - 320) = 0u;
  *(_OWORD *)(v66 - 304) = 0u;
  *(_OWORD *)(v66 - 256) = 0u;
  *(_OWORD *)(v66 - 240) = xmmword_210802BA0;
  *(_OWORD *)(v66 - 224) = 0u;
  *(_OWORD *)(v66 - 208) = xmmword_210802BA0;
  IKString::assign((_QWORD *)(v66 - 288), "LeftShoulder", (IKString *)0xC);
  *(_DWORD *)(v66 - 264) = -1;
  FIK::MoCapBone::MoCapBone((FIK::MoCapBone *)&v101, *(FIK::Allocator **)(a2 + 16));
  FIK::IKArray<FIK::MoCapBone>::push_back<FIK::MoCapBone,void>((_QWORD *)(a2 + 208), (uint64_t)&v101);
  FIK::IKArray<IKString>::~IKArray((uint64_t)v132);
  if (v130)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v131 + 24))(v131, v129, 0, 8);
    v129 = 0;
    v130 = 0;
  }
  if (v106)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v107 + 24))(*(_QWORD *)v107, v105, 0, 8);
    v105 = 0;
    v106 = 0;
  }
  if (v103)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v104 + 24))(v104, v102, 0, 8);
  v67 = *(_QWORD *)(a2 + 224) + 544 * *(_QWORD *)(a2 + 208);
  *(_BYTE *)(v67 - 190) = 0;
  *(_DWORD *)(v67 - 188) = 0;
  *(_WORD *)(v67 - 192) = 1;
  *(_QWORD *)(v67 - 180) = 0x3DF5C28F3DCCCCCDLL;
  *(_WORD *)(v67 - 184) = 1;
  *(_DWORD *)(v67 - 172) = 5;
  *(_QWORD *)(v67 - 544) = -4294967271;
  IKString::assign((_QWORD *)(v67 - 536), "left_forearm_joint", (IKString *)0x12);
  IKString::assign((_QWORD *)(v67 - 512), "left_arm_joint", (IKString *)0xE);
  *(_OWORD *)(v67 - 480) = xmmword_210805120;
  *(_OWORD *)(v67 - 464) = xmmword_210805110;
  *(_DWORD *)(v67 - 448) = 16843009;
  *(_QWORD *)(v67 - 445) = 16843009;
  *(_WORD *)(v67 - 437) = 0;
  *(_OWORD *)(v67 - 432) = xmmword_210805130;
  *(_QWORD *)(v67 - 416) = 0x3F80000000000000;
  *(_OWORD *)(v67 - 400) = v100;
  *(_OWORD *)(v67 - 384) = xmmword_210805140;
  *(int32x4_t *)(v67 - 368) = vdupq_n_s32(0xC3B40000);
  *(int32x4_t *)(v67 - 352) = vdupq_n_s32(0x43B40000u);
  *(_OWORD *)(v67 - 336) = 0u;
  *(_OWORD *)(v67 - 320) = 0u;
  *(_OWORD *)(v67 - 304) = 0u;
  *(_OWORD *)(v67 - 256) = 0u;
  *(_OWORD *)(v67 - 240) = xmmword_210802BA0;
  *(_OWORD *)(v67 - 224) = 0u;
  *(_OWORD *)(v67 - 208) = xmmword_210802BA0;
  IKString::assign((_QWORD *)(v67 - 288), "LeftElbow", (IKString *)9);
  *(_DWORD *)(v67 - 264) = -1;
  FIK::MoCapBone::MoCapBone((FIK::MoCapBone *)&v101, *(FIK::Allocator **)(a2 + 16));
  FIK::IKArray<FIK::MoCapBone>::push_back<FIK::MoCapBone,void>((_QWORD *)(a2 + 208), (uint64_t)&v101);
  FIK::IKArray<IKString>::~IKArray((uint64_t)v132);
  if (v130)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v131 + 24))(v131, v129, 0, 8);
    v129 = 0;
    v130 = 0;
  }
  if (v106)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v107 + 24))(*(_QWORD *)v107, v105, 0, 8);
    v105 = 0;
    v106 = 0;
  }
  if (v103)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v104 + 24))(v104, v102, 0, 8);
  v68 = *(_QWORD *)(a2 + 224) + 544 * *(_QWORD *)(a2 + 208);
  *(_BYTE *)(v68 - 190) = 0;
  *(_DWORD *)(v68 - 188) = 0;
  *(_WORD *)(v68 - 192) = 1;
  *(_QWORD *)(v68 - 180) = 0x3DF5C28F3DCCCCCDLL;
  *(_WORD *)(v68 - 184) = 1;
  *(_DWORD *)(v68 - 172) = 5;
  *(_QWORD *)(v68 - 544) = -4294967270;
  IKString::assign((_QWORD *)(v68 - 536), "left_hand_joint", (IKString *)0xF);
  IKString::assign((_QWORD *)(v68 - 512), "left_forearm_joint", (IKString *)0x12);
  *(_OWORD *)(v68 - 480) = xmmword_210805160;
  *(_OWORD *)(v68 - 464) = xmmword_210805150;
  *(_DWORD *)(v68 - 448) = 16843009;
  *(_WORD *)(v68 - 444) = 256;
  *(_BYTE *)(v68 - 442) = 1;
  *(_DWORD *)(v68 - 441) = 0;
  *(_WORD *)(v68 - 437) = 0;
  *(_OWORD *)(v68 - 432) = xmmword_210804100;
  *(_OWORD *)(v68 - 400) = v100;
  *(int32x4_t *)(v68 - 384) = vdupq_n_s32(0x3DCCCCCDu);
  *(_QWORD *)(v68 - 416) = 0x3F80000000000000;
  *(int32x4_t *)(v68 - 368) = vdupq_n_s32(0xC3B40000);
  *(int32x4_t *)(v68 - 352) = vdupq_n_s32(0x43B40000u);
  *(_OWORD *)(v68 - 336) = 0u;
  *(_OWORD *)(v68 - 320) = 0u;
  *(_OWORD *)(v68 - 304) = 0u;
  *(_OWORD *)(v68 - 256) = 0u;
  *(_OWORD *)(v68 - 240) = xmmword_210802BA0;
  *(_OWORD *)(v68 - 224) = 0u;
  *(_OWORD *)(v68 - 208) = xmmword_210802BA0;
  IKString::assign((_QWORD *)(v68 - 288), "LeftWrist", (IKString *)9);
  *(_DWORD *)(v68 - 264) = -1;
  FIK::MoCapBone::MoCapBone((FIK::MoCapBone *)&v101, *(FIK::Allocator **)(a2 + 16));
  FIK::IKArray<FIK::MoCapBone>::push_back<FIK::MoCapBone,void>((_QWORD *)(a2 + 208), (uint64_t)&v101);
  FIK::IKArray<IKString>::~IKArray((uint64_t)v132);
  if (v130)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v131 + 24))(v131, v129, 0, 8);
    v129 = 0;
    v130 = 0;
  }
  if (v106)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v107 + 24))(*(_QWORD *)v107, v105, 0, 8);
    v105 = 0;
    v106 = 0;
  }
  if (v103)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v104 + 24))(v104, v102, 0, 8);
  v69 = *(_QWORD *)(a2 + 224) + 544 * *(_QWORD *)(a2 + 208);
  *(_BYTE *)(v69 - 190) = 0;
  *(_DWORD *)(v69 - 188) = 0;
  *(_WORD *)(v69 - 192) = 0;
  *(_QWORD *)(v69 - 180) = 0x3DF5C28F3DCCCCCDLL;
  *(_WORD *)(v69 - 184) = 0;
  *(_DWORD *)(v69 - 172) = 5;
  *(_QWORD *)(v69 - 544) = -4294967269;
  IKString::assign((_QWORD *)(v69 - 536), "right_shoulder_1_joint", (IKString *)0x16);
  IKString::assign((_QWORD *)(v69 - 512), "spine_7_joint", (IKString *)0xD);
  *(_OWORD *)(v69 - 480) = xmmword_210805180;
  *(_OWORD *)(v69 - 464) = xmmword_210805170;
  *(_WORD *)(v69 - 448) = 1;
  *(_DWORD *)(v69 - 446) = 16843009;
  *(_BYTE *)(v69 - 442) = 1;
  *(_DWORD *)(v69 - 441) = 0;
  *(_WORD *)(v69 - 437) = 0;
  *(_OWORD *)(v69 - 432) = xmmword_2108050B0;
  *(_QWORD *)(v69 - 416) = 0x3F80000000000000;
  *(_OWORD *)(v69 - 400) = v100;
  *(_OWORD *)(v69 - 384) = xmmword_2108050C0;
  *(int32x4_t *)(v69 - 368) = vdupq_n_s32(0xC3B40000);
  *(int32x4_t *)(v69 - 352) = vdupq_n_s32(0x43B40000u);
  *(_OWORD *)(v69 - 336) = 0u;
  *(_OWORD *)(v69 - 320) = 0u;
  *(_OWORD *)(v69 - 304) = 0u;
  *(_OWORD *)(v69 - 256) = 0u;
  *(_OWORD *)(v69 - 240) = xmmword_210802BA0;
  *(_OWORD *)(v69 - 224) = 0u;
  *(_OWORD *)(v69 - 208) = xmmword_210802BA0;
  IKString::assign((_QWORD *)(v69 - 288), (char *)&unk_2108059BE, 0);
  *(_DWORD *)(v69 - 264) = -1;
  FIK::MoCapBone::MoCapBone((FIK::MoCapBone *)&v101, *(FIK::Allocator **)(a2 + 16));
  FIK::IKArray<FIK::MoCapBone>::push_back<FIK::MoCapBone,void>((_QWORD *)(a2 + 208), (uint64_t)&v101);
  FIK::IKArray<IKString>::~IKArray((uint64_t)v132);
  if (v130)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v131 + 24))(v131, v129, 0, 8);
    v129 = 0;
    v130 = 0;
  }
  if (v106)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v107 + 24))(*(_QWORD *)v107, v105, 0, 8);
    v105 = 0;
    v106 = 0;
  }
  if (v103)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v104 + 24))(v104, v102, 0, 8);
  v70 = *(_QWORD *)(a2 + 224) + 544 * *(_QWORD *)(a2 + 208);
  *(_BYTE *)(v70 - 190) = 0;
  *(_DWORD *)(v70 - 188) = 0;
  *(_WORD *)(v70 - 192) = 1;
  *(_QWORD *)(v70 - 180) = 0x3DF5C28F3DCCCCCDLL;
  *(_WORD *)(v70 - 184) = 1;
  *(_DWORD *)(v70 - 172) = 5;
  *(_QWORD *)(v70 - 544) = -4294967268;
  IKString::assign((_QWORD *)(v70 - 536), "right_arm_joint", (IKString *)0xF);
  IKString::assign((_QWORD *)(v70 - 512), "right_shoulder_1_joint", (IKString *)0x16);
  *(_OWORD *)(v70 - 480) = xmmword_2108051A0;
  *(_OWORD *)(v70 - 464) = xmmword_210805190;
  *(_DWORD *)(v70 - 448) = 16843009;
  *(_QWORD *)(v70 - 445) = 16843009;
  *(_WORD *)(v70 - 437) = 0;
  *(_OWORD *)(v70 - 432) = xmmword_2108051B0;
  *(_OWORD *)(v70 - 400) = v100;
  *(_OWORD *)(v70 - 384) = xmmword_210805100;
  *(_QWORD *)(v70 - 416) = 0x3F80000000000000;
  *(int32x4_t *)(v70 - 368) = vdupq_n_s32(0xC3B40000);
  *(int32x4_t *)(v70 - 352) = vdupq_n_s32(0x43B40000u);
  *(_OWORD *)(v70 - 336) = 0u;
  *(_OWORD *)(v70 - 320) = 0u;
  *(_OWORD *)(v70 - 304) = 0u;
  *(_OWORD *)(v70 - 256) = 0u;
  *(_OWORD *)(v70 - 240) = xmmword_210802BA0;
  *(_OWORD *)(v70 - 224) = 0u;
  *(_OWORD *)(v70 - 208) = xmmword_210802BA0;
  IKString::assign((_QWORD *)(v70 - 288), "RightShoulder", (IKString *)0xD);
  *(_DWORD *)(v70 - 264) = -1;
  FIK::MoCapBone::MoCapBone((FIK::MoCapBone *)&v101, *(FIK::Allocator **)(a2 + 16));
  FIK::IKArray<FIK::MoCapBone>::push_back<FIK::MoCapBone,void>((_QWORD *)(a2 + 208), (uint64_t)&v101);
  FIK::IKArray<IKString>::~IKArray((uint64_t)v132);
  if (v130)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v131 + 24))(v131, v129, 0, 8);
    v129 = 0;
    v130 = 0;
  }
  if (v106)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v107 + 24))(*(_QWORD *)v107, v105, 0, 8);
    v105 = 0;
    v106 = 0;
  }
  if (v103)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v104 + 24))(v104, v102, 0, 8);
  v71 = *(_QWORD *)(a2 + 224) + 544 * *(_QWORD *)(a2 + 208);
  *(_BYTE *)(v71 - 190) = 0;
  *(_DWORD *)(v71 - 188) = 0;
  *(_WORD *)(v71 - 192) = 1;
  *(_QWORD *)(v71 - 180) = 0x3DF5C28F3DCCCCCDLL;
  *(_WORD *)(v71 - 184) = 1;
  *(_DWORD *)(v71 - 172) = 5;
  *(_QWORD *)(v71 - 544) = -4294967267;
  IKString::assign((_QWORD *)(v71 - 536), "right_forearm_joint", (IKString *)0x13);
  IKString::assign((_QWORD *)(v71 - 512), "right_arm_joint", (IKString *)0xF);
  *(_OWORD *)(v71 - 480) = xmmword_2108051D0;
  *(_OWORD *)(v71 - 464) = xmmword_2108051C0;
  *(_DWORD *)(v71 - 448) = 16843009;
  *(_QWORD *)(v71 - 445) = 16843009;
  *(_WORD *)(v71 - 437) = 0;
  *(_OWORD *)(v71 - 432) = xmmword_2108051E0;
  *(_OWORD *)(v71 - 400) = v100;
  *(_OWORD *)(v71 - 384) = xmmword_210805140;
  *(_QWORD *)(v71 - 416) = 0x3F80000000000000;
  *(int32x4_t *)(v71 - 368) = vdupq_n_s32(0xC3B40000);
  *(int32x4_t *)(v71 - 352) = vdupq_n_s32(0x43B40000u);
  *(_OWORD *)(v71 - 336) = 0u;
  *(_OWORD *)(v71 - 320) = 0u;
  *(_OWORD *)(v71 - 304) = 0u;
  *(_OWORD *)(v71 - 256) = 0u;
  *(_OWORD *)(v71 - 240) = xmmword_210802BA0;
  *(_OWORD *)(v71 - 224) = 0u;
  *(_OWORD *)(v71 - 208) = xmmword_210802BA0;
  IKString::assign((_QWORD *)(v71 - 288), "RightElbow", (IKString *)0xA);
  *(_DWORD *)(v71 - 264) = -1;
  FIK::MoCapBone::MoCapBone((FIK::MoCapBone *)&v101, *(FIK::Allocator **)(a2 + 16));
  FIK::IKArray<FIK::MoCapBone>::push_back<FIK::MoCapBone,void>((_QWORD *)(a2 + 208), (uint64_t)&v101);
  FIK::IKArray<IKString>::~IKArray((uint64_t)v132);
  if (v130)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v131 + 24))(v131, v129, 0, 8);
    v129 = 0;
    v130 = 0;
  }
  if (v106)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v107 + 24))(*(_QWORD *)v107, v105, 0, 8);
    v105 = 0;
    v106 = 0;
  }
  if (v103)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v104 + 24))(v104, v102, 0, 8);
  v72 = *(_QWORD *)(a2 + 224) + 544 * *(_QWORD *)(a2 + 208);
  *(_BYTE *)(v72 - 190) = 0;
  *(_DWORD *)(v72 - 188) = 0;
  *(_WORD *)(v72 - 192) = 1;
  *(_QWORD *)(v72 - 180) = 0x3DF5C28F3DCCCCCDLL;
  *(_WORD *)(v72 - 184) = 1;
  *(_DWORD *)(v72 - 172) = 5;
  *(_QWORD *)(v72 - 544) = -4294967266;
  IKString::assign((_QWORD *)(v72 - 536), "right_hand_joint", (IKString *)0x10);
  IKString::assign((_QWORD *)(v72 - 512), "right_forearm_joint", (IKString *)0x13);
  *(_OWORD *)(v72 - 480) = xmmword_210805200;
  *(_OWORD *)(v72 - 464) = xmmword_2108051F0;
  *(_DWORD *)(v72 - 448) = 16843009;
  *(_WORD *)(v72 - 444) = 256;
  *(_BYTE *)(v72 - 442) = 1;
  *(_DWORD *)(v72 - 441) = 0;
  *(_WORD *)(v72 - 437) = 0;
  *(_OWORD *)(v72 - 432) = xmmword_210804100;
  *(_QWORD *)(v72 - 416) = 0x3F80000000000000;
  *(_OWORD *)(v72 - 400) = v100;
  *(int32x4_t *)(v72 - 384) = vdupq_n_s32(0x3DCCCCCDu);
  *(int32x4_t *)(v72 - 368) = vdupq_n_s32(0xC3B40000);
  *(int32x4_t *)(v72 - 352) = vdupq_n_s32(0x43B40000u);
  *(_OWORD *)(v72 - 336) = 0u;
  *(_OWORD *)(v72 - 320) = 0u;
  *(_OWORD *)(v72 - 304) = 0u;
  *(_OWORD *)(v72 - 256) = 0u;
  *(_OWORD *)(v72 - 240) = xmmword_210802BA0;
  *(_OWORD *)(v72 - 224) = 0u;
  *(_OWORD *)(v72 - 208) = xmmword_210802BA0;
  IKString::assign((_QWORD *)(v72 - 288), "RightWrist", (IKString *)0xA);
  *(_DWORD *)(v72 - 264) = -1;
  FIK::IKArray<FIK::RigBoneBase>::reserve((uint64_t *)(a2 + 240), 0xAuLL);
  v73 = *(_QWORD *)(a2 + 16);
  v101 = -1;
  v102 = 0;
  v103 = 0;
  v104 = v73;
  v105 = 0;
  v106 = 0;
  *(_QWORD *)v107 = v73;
  v109 = 0;
  v110 = 0;
  v111 = xmmword_210802BA0;
  FIK::IKArray<FIK::RigBoneBase>::push_back<FIK::RigBoneBase,void>((uint64_t *)(a2 + 240), (uint64_t)&v101);
  if (v106)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v107 + 24))(*(_QWORD *)v107, v105, 0, 8);
    v105 = 0;
    v106 = 0;
  }
  if (v103)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v104 + 24))(v104, v102, 0, 8);
  v74 = *(_QWORD *)(a2 + 256) + 96 * *(_QWORD *)(a2 + 240);
  IKString::assign((_QWORD *)(v74 - 88), "virtualHips", (IKString *)0xB);
  IKString::assign((_QWORD *)(v74 - 64), (char *)&unk_2108059BE, 0);
  *(_OWORD *)(v74 - 32) = xmmword_210805210;
  *(_OWORD *)(v74 - 16) = xmmword_210802BA0;
  v75 = *(_QWORD *)(a2 + 16);
  v101 = -1;
  v102 = 0;
  v103 = 0;
  v104 = v75;
  v105 = 0;
  v106 = 0;
  *(_QWORD *)v107 = v75;
  v109 = 0;
  v110 = 0;
  v111 = xmmword_210802BA0;
  FIK::IKArray<FIK::RigBoneBase>::push_back<FIK::RigBoneBase,void>((uint64_t *)(a2 + 240), (uint64_t)&v101);
  if (v106)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v107 + 24))(*(_QWORD *)v107, v105, 0, 8);
    v105 = 0;
    v106 = 0;
  }
  if (v103)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v104 + 24))(v104, v102, 0, 8);
  v76 = *(_QWORD *)(a2 + 256) + 96 * *(_QWORD *)(a2 + 240);
  IKString::assign((_QWORD *)(v76 - 88), "MidShoulder", (IKString *)0xB);
  IKString::assign((_QWORD *)(v76 - 64), (char *)&unk_2108059BE, 0);
  *(_OWORD *)(v76 - 32) = xmmword_210805220;
  *(_OWORD *)(v76 - 16) = xmmword_210802BA0;
  v77 = *(_QWORD *)(a2 + 16);
  v101 = -1;
  v102 = 0;
  v103 = 0;
  v104 = v77;
  v105 = 0;
  v106 = 0;
  *(_QWORD *)v107 = v77;
  v109 = 0;
  v110 = 0;
  v111 = xmmword_210802BA0;
  FIK::IKArray<FIK::RigBoneBase>::push_back<FIK::RigBoneBase,void>((uint64_t *)(a2 + 240), (uint64_t)&v101);
  if (v106)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v107 + 24))(*(_QWORD *)v107, v105, 0, 8);
    v105 = 0;
    v106 = 0;
  }
  if (v103)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v104 + 24))(v104, v102, 0, 8);
  v78 = *(_QWORD *)(a2 + 256) + 96 * *(_QWORD *)(a2 + 240);
  IKString::assign((_QWORD *)(v78 - 88), "Atlas", (IKString *)5);
  IKString::assign((_QWORD *)(v78 - 64), (char *)&unk_2108059BE, 0);
  *(_OWORD *)(v78 - 32) = xmmword_210805230;
  *(_OWORD *)(v78 - 16) = xmmword_210802BA0;
  v79 = *(_QWORD *)(a2 + 16);
  v101 = -1;
  v102 = 0;
  v103 = 0;
  v104 = v79;
  v105 = 0;
  v106 = 0;
  *(_QWORD *)v107 = v79;
  v109 = 0;
  v110 = 0;
  v111 = xmmword_210802BA0;
  FIK::IKArray<FIK::RigBoneBase>::push_back<FIK::RigBoneBase,void>((uint64_t *)(a2 + 240), (uint64_t)&v101);
  if (v106)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v107 + 24))(*(_QWORD *)v107, v105, 0, 8);
    v105 = 0;
    v106 = 0;
  }
  if (v103)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v104 + 24))(v104, v102, 0, 8);
  v80 = *(_QWORD *)(a2 + 256) + 96 * *(_QWORD *)(a2 + 240);
  IKString::assign((_QWORD *)(v80 - 88), "LeftShoulder", (IKString *)0xC);
  IKString::assign((_QWORD *)(v80 - 64), (char *)&unk_2108059BE, 0);
  *(_OWORD *)(v80 - 32) = xmmword_210805240;
  *(_OWORD *)(v80 - 16) = xmmword_210802BA0;
  v81 = *(_QWORD *)(a2 + 16);
  v101 = -1;
  v102 = 0;
  v103 = 0;
  v104 = v81;
  v105 = 0;
  v106 = 0;
  *(_QWORD *)v107 = v81;
  v109 = 0;
  v110 = 0;
  v111 = xmmword_210802BA0;
  FIK::IKArray<FIK::RigBoneBase>::push_back<FIK::RigBoneBase,void>((uint64_t *)(a2 + 240), (uint64_t)&v101);
  if (v106)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v107 + 24))(*(_QWORD *)v107, v105, 0, 8);
    v105 = 0;
    v106 = 0;
  }
  if (v103)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v104 + 24))(v104, v102, 0, 8);
  v82 = *(_QWORD *)(a2 + 256) + 96 * *(_QWORD *)(a2 + 240);
  IKString::assign((_QWORD *)(v82 - 88), "LeftElbow", (IKString *)9);
  IKString::assign((_QWORD *)(v82 - 64), (char *)&unk_2108059BE, 0);
  *(_OWORD *)(v82 - 32) = 0u;
  *(_OWORD *)(v82 - 16) = xmmword_210802BA0;
  v83 = *(_QWORD *)(a2 + 16);
  v101 = -1;
  v102 = 0;
  v103 = 0;
  v104 = v83;
  v105 = 0;
  v106 = 0;
  *(_QWORD *)v107 = v83;
  v109 = 0;
  v110 = 0;
  v111 = xmmword_210802BA0;
  FIK::IKArray<FIK::RigBoneBase>::push_back<FIK::RigBoneBase,void>((uint64_t *)(a2 + 240), (uint64_t)&v101);
  if (v106)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v107 + 24))(*(_QWORD *)v107, v105, 0, 8);
    v105 = 0;
    v106 = 0;
  }
  if (v103)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v104 + 24))(v104, v102, 0, 8);
  v84 = *(_QWORD *)(a2 + 256) + 96 * *(_QWORD *)(a2 + 240);
  IKString::assign((_QWORD *)(v84 - 88), "LeftWrist", (IKString *)9);
  IKString::assign((_QWORD *)(v84 - 64), (char *)&unk_2108059BE, 0);
  *(_OWORD *)(v84 - 32) = xmmword_210805250;
  *(_OWORD *)(v84 - 16) = xmmword_210802BA0;
  v85 = *(_QWORD *)(a2 + 16);
  v101 = -1;
  v102 = 0;
  v103 = 0;
  v104 = v85;
  v105 = 0;
  v106 = 0;
  *(_QWORD *)v107 = v85;
  v109 = 0;
  v110 = 0;
  v111 = xmmword_210802BA0;
  FIK::IKArray<FIK::RigBoneBase>::push_back<FIK::RigBoneBase,void>((uint64_t *)(a2 + 240), (uint64_t)&v101);
  if (v106)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v107 + 24))(*(_QWORD *)v107, v105, 0, 8);
    v105 = 0;
    v106 = 0;
  }
  if (v103)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v104 + 24))(v104, v102, 0, 8);
  v86 = *(_QWORD *)(a2 + 256) + 96 * *(_QWORD *)(a2 + 240);
  IKString::assign((_QWORD *)(v86 - 88), "RightShoulder", (IKString *)0xD);
  IKString::assign((_QWORD *)(v86 - 64), (char *)&unk_2108059BE, 0);
  *(_OWORD *)(v86 - 32) = xmmword_210805260;
  *(_OWORD *)(v86 - 16) = xmmword_210802BA0;
  v87 = *(_QWORD *)(a2 + 16);
  v101 = -1;
  v102 = 0;
  v103 = 0;
  v104 = v87;
  v105 = 0;
  v106 = 0;
  *(_QWORD *)v107 = v87;
  v109 = 0;
  v110 = 0;
  v111 = xmmword_210802BA0;
  FIK::IKArray<FIK::RigBoneBase>::push_back<FIK::RigBoneBase,void>((uint64_t *)(a2 + 240), (uint64_t)&v101);
  if (v106)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v107 + 24))(*(_QWORD *)v107, v105, 0, 8);
    v105 = 0;
    v106 = 0;
  }
  if (v103)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v104 + 24))(v104, v102, 0, 8);
  v88 = *(_QWORD *)(a2 + 256) + 96 * *(_QWORD *)(a2 + 240);
  IKString::assign((_QWORD *)(v88 - 88), "RightElbow", (IKString *)0xA);
  IKString::assign((_QWORD *)(v88 - 64), (char *)&unk_2108059BE, 0);
  *(_OWORD *)(v88 - 32) = 0u;
  *(_OWORD *)(v88 - 16) = xmmword_210802BA0;
  v89 = *(_QWORD *)(a2 + 16);
  v101 = -1;
  v102 = 0;
  v103 = 0;
  v104 = v89;
  v105 = 0;
  v106 = 0;
  *(_QWORD *)v107 = v89;
  v109 = 0;
  v110 = 0;
  v111 = xmmword_210802BA0;
  FIK::IKArray<FIK::RigBoneBase>::push_back<FIK::RigBoneBase,void>((uint64_t *)(a2 + 240), (uint64_t)&v101);
  if (v106)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v107 + 24))(*(_QWORD *)v107, v105, 0, 8);
    v105 = 0;
    v106 = 0;
  }
  if (v103)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v104 + 24))(v104, v102, 0, 8);
  v90 = *(_QWORD *)(a2 + 256) + 96 * *(_QWORD *)(a2 + 240);
  IKString::assign((_QWORD *)(v90 - 88), "RightWrist", (IKString *)0xA);
  IKString::assign((_QWORD *)(v90 - 64), (char *)&unk_2108059BE, 0);
  *(_OWORD *)(v90 - 32) = xmmword_210805270;
  *(_OWORD *)(v90 - 16) = xmmword_210802BA0;
  v91 = *(_QWORD *)(a2 + 16);
  v101 = -1;
  v102 = 0;
  v103 = 0;
  v104 = v91;
  v105 = 0;
  v106 = 0;
  *(_QWORD *)v107 = v91;
  v109 = 0;
  v110 = 0;
  v111 = xmmword_210802BA0;
  FIK::IKArray<FIK::RigBoneBase>::push_back<FIK::RigBoneBase,void>((uint64_t *)(a2 + 240), (uint64_t)&v101);
  if (v106)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v107 + 24))(*(_QWORD *)v107, v105, 0, 8);
    v105 = 0;
    v106 = 0;
  }
  if (v103)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v104 + 24))(v104, v102, 0, 8);
  v92 = *(_QWORD *)(a2 + 256) + 96 * *(_QWORD *)(a2 + 240);
  IKString::assign((_QWORD *)(v92 - 88), "hmd2world", (IKString *)9);
  IKString::assign((_QWORD *)(v92 - 64), (char *)&unk_2108059BE, 0);
  *(_OWORD *)(v92 - 32) = 0u;
  *(_OWORD *)(v92 - 16) = xmmword_210802BC0;
  *(_OWORD *)(a2 + 272) = 0u;
  *(_OWORD *)(a2 + 288) = xmmword_210802BA0;
  *(_BYTE *)(a2 + 304) = 1;
  *(_DWORD *)(a2 + 308) = 1120403456;
  result = FIK::Serialisation::fixUpRigIndices(a2);
  v94 = *(_QWORD *)(a2 + 176);
  if (v94)
  {
    v95 = (float32x4_t *)(*(_QWORD *)(a2 + 192) + 208);
    v96 = v94 << 8;
    do
    {
      if (!(v95[-1].u8[12] | v95[-1].u8[13]))
        *v95 = vdivq_f32(*v95, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)(a2 + 308), 0));
      v95 += 16;
      v96 -= 256;
    }
    while (v96);
  }
  return result;
}

uint64_t FIK::IKArray<FIK::MoCapTask>::push_back<FIK::MoCapTask,void>(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  FIK::IKArray<FIK::MoCapTask>::reserve(a1, *a1 + 1);
  result = FIK::MoCapTask::MoCapTask(a1[2] + (*a1 << 8), a2, a1[3]);
  ++*a1;
  return result;
}

uint64_t FIK::IKArray<FIK::MoCapBone>::push_back<FIK::MoCapBone,void>(_QWORD *a1, uint64_t a2)
{
  uint64_t result;

  FIK::IKArray<FIK::MoCapBone>::reserve((uint64_t)a1, *a1 + 1);
  result = FIK::MoCapBone::MoCapBone(a1[2] + 544 * *a1, a2, a1[3]);
  ++*a1;
  return result;
}

uint64_t FIK::IKArray<FIK::RigBoneBase>::push_back<FIK::RigBoneBase,void>(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  FIK::IKArray<FIK::RigBoneBase>::reserve(a1, *a1 + 1);
  result = FIK::RigBoneBase::RigBoneBase(a1[2] + 96 * *a1, a2, a1[3]);
  ++*a1;
  return result;
}

uint64_t FIK::MoCapTask::MoCapTask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = FIK::RigTask::RigTask(a1, a2, a3);
  IKString::IKString((uint64_t *)(v6 + 176), (uint64_t *)(a2 + 176), a3);
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  *(_WORD *)(a1 + 204) = *(_WORD *)(a2 + 204);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  return a1;
}

uint64_t FIK::MoCapBone::MoCapBone(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;

  FIK::RigBone::RigBone(a1, a2, a3);
  IKString::IKString((uint64_t *)(v6 + 256), (uint64_t *)(a2 + 256), a3);
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
  FIK::SelfPenetrationBone::SelfPenetrationBone(a1 + 384, a2 + 384, a3);
  return a1;
}

__n128 FIK::RigBone::RigBone(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  __int16 v5;
  __int16 v6;
  __n128 result;

  v4 = FIK::RigBoneBase::RigBoneBase(a1, a2, a3);
  *(_BYTE *)(v4 + 96) = *(_BYTE *)(a2 + 96);
  v5 = *(_WORD *)(a2 + 97);
  *(_BYTE *)(v4 + 99) = *(_BYTE *)(a2 + 99);
  *(_WORD *)(v4 + 97) = v5;
  *(_DWORD *)(v4 + 100) = *(_DWORD *)(a2 + 100);
  *(_BYTE *)(v4 + 104) = *(_BYTE *)(a2 + 104);
  v6 = *(_WORD *)(a2 + 105);
  *(_BYTE *)(v4 + 107) = *(_BYTE *)(a2 + 107);
  *(_WORD *)(v4 + 105) = v6;
  *(_BYTE *)(v4 + 108) = *(_BYTE *)(a2 + 108);
  *(_OWORD *)(v4 + 112) = *(_OWORD *)(a2 + 112);
  *(_DWORD *)(v4 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(v4 + 132) = *(_DWORD *)(a2 + 132);
  *(_OWORD *)(v4 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(v4 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(v4 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(v4 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(v4 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(v4 + 224) = *(_OWORD *)(a2 + 224);
  result = *(__n128 *)(a2 + 240);
  *(__n128 *)(v4 + 240) = result;
  return result;
}

unint64_t *FIK::IKArray<IKString>::IKArray(unint64_t *a1, _QWORD *a2, unint64_t a3)
{
  _QWORD *v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char **v12;
  IKString *v13;
  char *v14;
  char **v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;

  v5 = FIK::IKArray<IKString>::IKArray(a1, a2);
  if (((*(uint64_t (**)(_QWORD, unint64_t))(*(_QWORD *)v5[3] + 32))(v5[3], a3) & 1) == 0)
  {
    v6 = a1[1];
    if (v6)
    {
      v7 = (char *)(*(uint64_t (**)(unint64_t, unint64_t, uint64_t))(*(_QWORD *)a3 + 16))(a3, 24 * v6, 8);
      v8 = v7;
      if (24 * v6)
        bzero(v7, 24 * v6);
    }
    else
    {
      v8 = 0;
    }
    if (*a1)
    {
      v9 = 0;
      v10 = 0;
      do
      {
        v11 = &v8[v9];
        v12 = (char **)(a1[2] + v9);
        *(_QWORD *)v11 = 0;
        *((_QWORD *)v11 + 1) = 0;
        *((_QWORD *)v11 + 2) = a3;
        v15 = v12;
        v14 = *v12;
        v13 = (IKString *)v15[1];
        if (v13)
          v16 = v14;
        else
          v16 = (char *)&unk_2108059BE;
        IKString::assign(v11, v16, v13);
        ++v10;
        v9 += 24;
      }
      while (v10 < *a1);
    }
    v18 = a1[2];
    v17 = a1[3];
    a1[1] = v6;
    a1[2] = (unint64_t)v8;
    a1[3] = a3;
    if (v18)
      (*(void (**)(unint64_t, unint64_t, _QWORD, uint64_t))(*(_QWORD *)v17 + 24))(v17, v18, 0, 8);
  }
  return a1;
}

FIK::DoubleExponentialPositionFilter *CoreIKDoubleExponentialPositionFilterCreate(FIK *a1, float a2, float a3)
{
  void (***v5)(FIK::CrtAllocator *__hidden);
  FIK::DoubleExponentialPositionFilter *result;

  v5 = FIK::defaultAllocator(a1);
  result = (FIK::DoubleExponentialPositionFilter *)((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, uint64_t))(*v5)[2])(v5, 64, 16);
  if (result)
    return FIK::DoubleExponentialPositionFilter::DoubleExponentialPositionFilter(result, a2, a3);
  return result;
}

void (***CoreIKDoubleExponentialPositionFilterDestroy(FIK *a1))(FIK::CrtAllocator *__hidden this)
{
  void (***result)(FIK::CrtAllocator *__hidden);

  result = FIK::defaultAllocator(a1);
  if (a1)
    return (void (***)(FIK::CrtAllocator *__hidden))((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), FIK *, _QWORD, uint64_t))(*result)[3])(result, a1, 0, 8);
  return result;
}

double CoreIKDoubleExponentialPositionFilterDoFilter(float32x4_t *a1, float32x4_t a2)
{
  float32x4_t v3;
  float32x4_t v4;

  a2.i32[3] = 0;
  v3 = a2;
  FIK::DoubleExponentialPositionFilter::filter(a1, &v3, &v4);
  return *(double *)v4.i64;
}

_BYTE *CoreIKDoubleExponentialTransformFilterCreate(FIK *a1, float a2, float a3)
{
  void (***v3)(FIK::CrtAllocator *__hidden);
  _BYTE *result;
  float v5;
  float v6;

  v6 = a2;
  v5 = a3;
  v3 = FIK::defaultAllocator(a1);
  result = (_BYTE *)((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, uint64_t))(*v3)[2])(v3, 336, 16);
  if (result)
    return FIK::TransformFilter<FIK::DoubleExponentialPositionFilter>::TransformFilter<float const&,float,void>(result, 1, &v6, &v5);
  return result;
}

void (***CoreIKDoubleExponentialTransformFilterDestroy(FIK *a1))(FIK::CrtAllocator *__hidden this)
{
  void (***result)(FIK::CrtAllocator *__hidden);

  result = FIK::defaultAllocator(a1);
  if (a1)
    return (void (***)(FIK::CrtAllocator *__hidden))((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), FIK *, _QWORD, uint64_t))(*result)[3])(result, a1, 0, 8);
  return result;
}

void CoreIKDoubleExponentialTransformFilterSetProperties(FIK::DoubleExponentialPositionFilter *a1, float a2, float a3)
{
  float v3;
  float v4;

  v4 = a2;
  v3 = a3;
  FIK::TransformFilter<FIK::DoubleExponentialPositionFilter>::set<float &,float &>(a1, &v4, &v3);
}

void FIK::TransformFilter<FIK::DoubleExponentialPositionFilter>::set<float &,float &>(FIK::DoubleExponentialPositionFilter *a1, float *a2, float *a3)
{
  uint64_t v6;
  _BYTE *v7;

  FIK::DoubleExponentialPositionFilter::set(a1, *a2, *a3);
  if (*((_BYTE *)a1 + 320))
  {
    v6 = 0;
    v7 = (char *)a1 + 64;
    do
    {
      FIK::DoubleExponentialPositionFilter::set((FIK::DoubleExponentialPositionFilter *)&v7[v6], *a2, *a3);
      v6 += 64;
    }
    while (v6 != 256);
  }
}

double CoreIKDoubleExponentialTransformFilterDoFilter(float32x4_t *a1, __n128 a2, __n128 a3)
{
  float32x4_t v4;
  _OWORD v5[2];

  a2.n128_u32[3] = 0;
  v5[0] = a2;
  v5[1] = a3;
  FIK::TransformFilter<FIK::DoubleExponentialPositionFilter>::filter<>(a1, (uint64_t)v5, &v4);
  return *(double *)v4.i64;
}

uint64_t CoreIKConstraint::setTarget(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  (**(void (***)(uint64_t))a1)(a1);
  if (*(_OWORD *)(a1 + 8) != 0)
    return 0;
  v2 = ikinemaLogObject()[1];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    CoreIKConstraint::setTarget(v2, v3, v4, v5, v6, v7, v8, v9);
  return 1;
}

uint64_t CoreIKConstraint::setTargetTranslation(_QWORD *a1)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  (*(void (**)(_QWORD *))(*a1 + 8))(a1);
  if (a1[1])
    return 0;
  v3 = ikinemaLogObject()[1];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    CoreIKConstraint::setTargetTranslation(v3, v4, v5, v6, v7, v8, v9, v10);
  return 1;
}

uint64_t CoreIKConstraint::setTargetOrientation(_QWORD *a1)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  (*(void (**)(_QWORD *))(*a1 + 16))(a1);
  if (a1[2])
    return 0;
  v3 = ikinemaLogObject()[1];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    CoreIKConstraint::setTargetOrientation(v3, v4, v5, v6, v7, v8, v9, v10);
  return 1;
}

void *CoreIKConstraint::getName(CoreIKConstraint *this)
{
  if (*((_QWORD *)this + 4))
    return (void *)*((_QWORD *)this + 3);
  else
    return &unk_2108059BE;
}

__n128 CoreIKConstraint::getOffset@<Q0>(CoreIKConstraint *this@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3;
  __n128 result;
  __int128 v5;

  v3 = (*(uint64_t (**)(CoreIKConstraint *))(*(_QWORD *)this + 32))(this);
  result = *(__n128 *)v3;
  v5 = *(_OWORD *)(v3 + 16);
  *a2 = *(_OWORD *)v3;
  a2[1] = v5;
  return result;
}

uint64_t CoreIKConstraint::setOffset(CoreIKConstraint *this, const FIK::Transform *a2)
{
  return (*(uint64_t (**)(CoreIKConstraint *, const FIK::Transform *))(*(_QWORD *)this + 24))(this, a2);
}

uint64_t CoreIKConstraint::getPositionEnabled(CoreIKConstraint *this)
{
  char *v1;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = (char *)*((_QWORD *)this + 1);
  if (v1)
    return (*(uint64_t (**)(char *))(*(_QWORD *)&v1[*(_QWORD *)(*(_QWORD *)v1 - 264)] + 16))(&v1[*(_QWORD *)(*(_QWORD *)v1 - 264)]);
  v3 = ikinemaLogObject()[1];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    CoreIKConstraint::getPositionEnabled(v3, v4, v5, v6, v7, v8, v9, v10);
  return 0;
}

void CoreIKConstraint::setPositionEnabled(CoreIKConstraint *this, uint64_t a2)
{
  char *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = (char *)*((_QWORD *)this + 1);
  if (v2)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v2[*(_QWORD *)(*(_QWORD *)v2 - 264)] + 136))(&v2[*(_QWORD *)(*(_QWORD *)v2 - 264)], a2, 1);
  }
  else
  {
    v3 = ikinemaLogObject()[1];
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      CoreIKConstraint::setPositionEnabled(v3, v4, v5, v6, v7, v8, v9, v10);
  }
}

uint64_t CoreIKConstraint::getOrientationEnabled(CoreIKConstraint *this)
{
  char *v1;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = (char *)*((_QWORD *)this + 2);
  if (v1)
    return (*(uint64_t (**)(char *))(*(_QWORD *)&v1[*(_QWORD *)(*(_QWORD *)v1 - 264)] + 16))(&v1[*(_QWORD *)(*(_QWORD *)v1 - 264)]);
  v3 = ikinemaLogObject()[1];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    CoreIKConstraint::getOrientationEnabled(v3, v4, v5, v6, v7, v8, v9, v10);
  return 0;
}

void CoreIKConstraint::setOrientationEnabled(CoreIKConstraint *this, uint64_t a2)
{
  char *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = (char *)*((_QWORD *)this + 2);
  if (v2)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v2[*(_QWORD *)(*(_QWORD *)v2 - 264)] + 136))(&v2[*(_QWORD *)(*(_QWORD *)v2 - 264)], a2, 1);
  }
  else
  {
    v3 = ikinemaLogObject()[1];
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      CoreIKConstraint::setOrientationEnabled(v3, v4, v5, v6, v7, v8, v9, v10);
  }
}

uint64_t CoreIKConstraint::getPositionAsPole(CoreIKConstraint *this)
{
  uint64_t v1;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *((_QWORD *)this + 1);
  if (v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 400))(v1);
  v3 = ikinemaLogObject()[1];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    CoreIKConstraint::getPositionAsPole(v3, v4, v5, v6, v7, v8, v9, v10);
  return 0;
}

void CoreIKConstraint::setPositionAsPole(CoreIKConstraint *this)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *((_QWORD *)this + 1);
  if (v1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 392))(v1);
  }
  else
  {
    v2 = ikinemaLogObject()[1];
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      CoreIKConstraint::setPositionAsPole(v2, v3, v4, v5, v6, v7, v8, v9);
  }
}

uint64_t CoreIKConstraint::getPositionDoFEnabled(CoreIKConstraint *this)
{
  char *v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = (char *)*((_QWORD *)this + 1);
  if (v1)
  {
    v2 = (*(uint64_t (**)(char *, _QWORD))(*(_QWORD *)&v1[*(_QWORD *)(*(_QWORD *)v1 - 264)] + 152))(&v1[*(_QWORD *)(*(_QWORD *)v1 - 264)], 0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)&v1[*(_QWORD *)(*(_QWORD *)v1 - 264)] + 152))(&v1[*(_QWORD *)(*(_QWORD *)v1 - 264)], 1);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)&v1[*(_QWORD *)(*(_QWORD *)v1 - 264)] + 152))(&v1[*(_QWORD *)(*(_QWORD *)v1 - 264)], 2);
  }
  else
  {
    v3 = ikinemaLogObject()[1];
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      CoreIKConstraint::getPositionDoFEnabled(v3, v4, v5, v6, v7, v8, v9, v10);
    return 0;
  }
  return v2;
}

void CoreIKConstraint::setPositionDoFEnabled(uint64_t a1, int a2)
{
  char *v2;
  int32x2_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(char **)(a1 + 8);
  if (v2)
  {
    v3 = vtst_s32((int32x2_t)__PAIR64__(BYTE1(a2), BYTE2(a2)), (int32x2_t)0xFF000000FFLL);
    (*(void (**)(char *, BOOL, _QWORD, _QWORD))(*(_QWORD *)&v2[*(_QWORD *)(*(_QWORD *)v2 - 264)] + 144))(&v2[*(_QWORD *)(*(_QWORD *)v2 - 264)], a2 != 0, v3.i8[4] & 1, v3.i8[0] & 1);
  }
  else
  {
    v4 = ikinemaLogObject()[1];
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      CoreIKConstraint::setPositionDoFEnabled(v4, v5, v6, v7, v8, v9, v10, v11);
  }
}

uint64_t CoreIKConstraint::getOrientationDoFEnabled(CoreIKConstraint *this)
{
  char *v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = (char *)*((_QWORD *)this + 2);
  if (v1)
  {
    v2 = (*(uint64_t (**)(char *, _QWORD))(*(_QWORD *)&v1[*(_QWORD *)(*(_QWORD *)v1 - 264)] + 152))(&v1[*(_QWORD *)(*(_QWORD *)v1 - 264)], 0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)&v1[*(_QWORD *)(*(_QWORD *)v1 - 264)] + 152))(&v1[*(_QWORD *)(*(_QWORD *)v1 - 264)], 1);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)&v1[*(_QWORD *)(*(_QWORD *)v1 - 264)] + 152))(&v1[*(_QWORD *)(*(_QWORD *)v1 - 264)], 2);
  }
  else
  {
    v3 = ikinemaLogObject()[1];
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      CoreIKConstraint::getOrientationDoFEnabled(v3, v4, v5, v6, v7, v8, v9, v10);
    return 0;
  }
  return v2;
}

void CoreIKConstraint::setOrientationDoFEnabled(uint64_t a1, int a2)
{
  char *v2;
  int32x2_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(char **)(a1 + 16);
  if (v2)
  {
    v3 = vtst_s32((int32x2_t)__PAIR64__(BYTE1(a2), BYTE2(a2)), (int32x2_t)0xFF000000FFLL);
    (*(void (**)(char *, BOOL, _QWORD, _QWORD))(*(_QWORD *)&v2[*(_QWORD *)(*(_QWORD *)v2 - 264)] + 144))(&v2[*(_QWORD *)(*(_QWORD *)v2 - 264)], a2 != 0, v3.i8[4] & 1, v3.i8[0] & 1);
  }
  else
  {
    v4 = ikinemaLogObject()[1];
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      CoreIKConstraint::setOrientationDoFEnabled(v4, v5, v6, v7, v8, v9, v10, v11);
  }
}

uint64_t CoreIKConstraint::getPositionDepth(CoreIKConstraint *this)
{
  char *v1;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = (char *)*((_QWORD *)this + 1);
  if (v1)
    return (*(uint64_t (**)(char *))(*(_QWORD *)&v1[*(_QWORD *)(*(_QWORD *)v1 - 264)] + 64))(&v1[*(_QWORD *)(*(_QWORD *)v1 - 264)]);
  v3 = ikinemaLogObject()[1];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    CoreIKConstraint::getPositionDepth(v3, v4, v5, v6, v7, v8, v9, v10);
  return 0;
}

void CoreIKConstraint::setPositionDepth(CoreIKConstraint *this)
{
  char *v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = (char *)*((_QWORD *)this + 1);
  if (v1)
  {
    (*(void (**)(char *))(*(_QWORD *)&v1[*(_QWORD *)(*(_QWORD *)v1 - 264)] + 56))(&v1[*(_QWORD *)(*(_QWORD *)v1 - 264)]);
  }
  else
  {
    v2 = ikinemaLogObject()[1];
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      CoreIKConstraint::setPositionDepth(v2, v3, v4, v5, v6, v7, v8, v9);
  }
}

uint64_t CoreIKConstraint::getOrientationDepth(CoreIKConstraint *this)
{
  char *v1;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = (char *)*((_QWORD *)this + 2);
  if (v1)
    return (*(uint64_t (**)(char *))(*(_QWORD *)&v1[*(_QWORD *)(*(_QWORD *)v1 - 264)] + 64))(&v1[*(_QWORD *)(*(_QWORD *)v1 - 264)]);
  v3 = ikinemaLogObject()[1];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    CoreIKConstraint::getOrientationDepth(v3, v4, v5, v6, v7, v8, v9, v10);
  return 0;
}

void CoreIKConstraint::setOrientationDepth(CoreIKConstraint *this)
{
  char *v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = (char *)*((_QWORD *)this + 2);
  if (v1)
  {
    (*(void (**)(char *))(*(_QWORD *)&v1[*(_QWORD *)(*(_QWORD *)v1 - 264)] + 56))(&v1[*(_QWORD *)(*(_QWORD *)v1 - 264)]);
  }
  else
  {
    v2 = ikinemaLogObject()[1];
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      CoreIKConstraint::setOrientationDepth(v2, v3, v4, v5, v6, v7, v8, v9);
  }
}

double CoreIKConstraint::getPositionWeight(CoreIKConstraint *this)
{
  char *v1;
  double result;
  NSObject *v3;
  _BOOL4 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;

  v1 = (char *)*((_QWORD *)this + 1);
  if (v1)
  {
    v13 = COERCE_UNSIGNED_INT64((*(double (**)(char *, _QWORD))(*(_QWORD *)&v1[*(_QWORD *)(*(_QWORD *)v1 - 264)] + 88))(&v1[*(_QWORD *)(*(_QWORD *)v1 - 264)], 0));
    v12 = COERCE_UNSIGNED_INT64((*(double (**)(char *, uint64_t))(*(_QWORD *)&v1[*(_QWORD *)(*(_QWORD *)v1 - 264)] + 88))(&v1[*(_QWORD *)(*(_QWORD *)v1 - 264)], 1));
    (*(void (**)(char *, uint64_t))(*(_QWORD *)&v1[*(_QWORD *)(*(_QWORD *)v1 - 264)] + 88))(&v1[*(_QWORD *)(*(_QWORD *)v1 - 264)], 2);
    return COERCE_DOUBLE(__PAIR64__(v12, v13));
  }
  else
  {
    v3 = ikinemaLogObject()[1];
    v4 = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
    result = 0.0;
    if (v4)
    {
      CoreIKConstraint::getPositionWeight(v3, v5, v6, v7, v8, v9, v10, v11);
      return 0.0;
    }
  }
  return result;
}

void CoreIKConstraint::setPositionWeight(uint64_t a1, __n128 a2)
{
  char *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(char **)(a1 + 8);
  if (v2)
  {
    (*(void (**)(char *, _QWORD))(*(_QWORD *)&v2[*(_QWORD *)(*(_QWORD *)v2 - 264)] + 80))(&v2[*(_QWORD *)(*(_QWORD *)v2 - 264)], 0);
    (*(void (**)(char *, uint64_t, float))(*(_QWORD *)&v2[*(_QWORD *)(*(_QWORD *)v2 - 264)] + 80))(&v2[*(_QWORD *)(*(_QWORD *)v2 - 264)], 1, a2.n128_f32[1]);
    (*(void (**)(char *, uint64_t, float))(*(_QWORD *)&v2[*(_QWORD *)(*(_QWORD *)v2 - 264)] + 80))(&v2[*(_QWORD *)(*(_QWORD *)v2 - 264)], 2, a2.n128_f32[2]);
  }
  else
  {
    v3 = ikinemaLogObject()[1];
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      CoreIKConstraint::setPositionWeight(v3, v4, v5, v6, v7, v8, v9, v10);
  }
}

double CoreIKConstraint::getOrientationWeight(CoreIKConstraint *this)
{
  char *v1;
  double result;
  NSObject *v3;
  _BOOL4 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;

  v1 = (char *)*((_QWORD *)this + 2);
  if (v1)
  {
    v13 = COERCE_UNSIGNED_INT64((*(double (**)(char *, _QWORD))(*(_QWORD *)&v1[*(_QWORD *)(*(_QWORD *)v1 - 264)] + 88))(&v1[*(_QWORD *)(*(_QWORD *)v1 - 264)], 0));
    v12 = COERCE_UNSIGNED_INT64((*(double (**)(char *, uint64_t))(*(_QWORD *)&v1[*(_QWORD *)(*(_QWORD *)v1 - 264)] + 88))(&v1[*(_QWORD *)(*(_QWORD *)v1 - 264)], 1));
    (*(void (**)(char *, uint64_t))(*(_QWORD *)&v1[*(_QWORD *)(*(_QWORD *)v1 - 264)] + 88))(&v1[*(_QWORD *)(*(_QWORD *)v1 - 264)], 2);
    return COERCE_DOUBLE(__PAIR64__(v12, v13));
  }
  else
  {
    v3 = ikinemaLogObject()[1];
    v4 = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
    result = 0.0;
    if (v4)
    {
      CoreIKConstraint::getOrientationWeight(v3, v5, v6, v7, v8, v9, v10, v11);
      return 0.0;
    }
  }
  return result;
}

void CoreIKConstraint::setOrientationWeight(uint64_t a1, __n128 a2)
{
  char *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(char **)(a1 + 16);
  if (v2)
  {
    (*(void (**)(char *, _QWORD))(*(_QWORD *)&v2[*(_QWORD *)(*(_QWORD *)v2 - 264)] + 80))(&v2[*(_QWORD *)(*(_QWORD *)v2 - 264)], 0);
    (*(void (**)(char *, uint64_t, float))(*(_QWORD *)&v2[*(_QWORD *)(*(_QWORD *)v2 - 264)] + 80))(&v2[*(_QWORD *)(*(_QWORD *)v2 - 264)], 1, a2.n128_f32[1]);
    (*(void (**)(char *, uint64_t, float))(*(_QWORD *)&v2[*(_QWORD *)(*(_QWORD *)v2 - 264)] + 80))(&v2[*(_QWORD *)(*(_QWORD *)v2 - 264)], 2, a2.n128_f32[2]);
  }
  else
  {
    v3 = ikinemaLogObject()[1];
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      CoreIKConstraint::setOrientationWeight(v3, v4, v5, v6, v7, v8, v9, v10);
  }
}

double CoreIKConstraint::getPositionPrecision(CoreIKConstraint *this)
{
  char *v1;
  double result;
  NSObject *v3;
  _BOOL4 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;

  v1 = (char *)*((_QWORD *)this + 1);
  if (v1)
  {
    v13 = COERCE_UNSIGNED_INT64((*(double (**)(char *, _QWORD))(*(_QWORD *)&v1[*(_QWORD *)(*(_QWORD *)v1 - 264)] + 112))(&v1[*(_QWORD *)(*(_QWORD *)v1 - 264)], 0));
    v12 = COERCE_UNSIGNED_INT64((*(double (**)(char *, uint64_t))(*(_QWORD *)&v1[*(_QWORD *)(*(_QWORD *)v1 - 264)] + 112))(&v1[*(_QWORD *)(*(_QWORD *)v1 - 264)], 1));
    (*(void (**)(char *, uint64_t))(*(_QWORD *)&v1[*(_QWORD *)(*(_QWORD *)v1 - 264)] + 112))(&v1[*(_QWORD *)(*(_QWORD *)v1 - 264)], 2);
    return COERCE_DOUBLE(__PAIR64__(v12, v13));
  }
  else
  {
    v3 = ikinemaLogObject()[1];
    v4 = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
    result = 0.0;
    if (v4)
    {
      CoreIKConstraint::getPositionPrecision(v3, v5, v6, v7, v8, v9, v10, v11);
      return 0.0;
    }
  }
  return result;
}

void CoreIKConstraint::setPositionPrecision(uint64_t a1, __n128 a2)
{
  char *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(char **)(a1 + 8);
  if (v2)
  {
    (*(void (**)(char *, _QWORD))(*(_QWORD *)&v2[*(_QWORD *)(*(_QWORD *)v2 - 264)] + 104))(&v2[*(_QWORD *)(*(_QWORD *)v2 - 264)], 0);
    (*(void (**)(char *, uint64_t, float))(*(_QWORD *)&v2[*(_QWORD *)(*(_QWORD *)v2 - 264)] + 104))(&v2[*(_QWORD *)(*(_QWORD *)v2 - 264)], 1, a2.n128_f32[1]);
    (*(void (**)(char *, uint64_t, float))(*(_QWORD *)&v2[*(_QWORD *)(*(_QWORD *)v2 - 264)] + 104))(&v2[*(_QWORD *)(*(_QWORD *)v2 - 264)], 2, a2.n128_f32[2]);
  }
  else
  {
    v3 = ikinemaLogObject()[1];
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      CoreIKConstraint::setPositionPrecision(v3, v4, v5, v6, v7, v8, v9, v10);
  }
}

double CoreIKConstraint::getOrientationPrecision(CoreIKConstraint *this)
{
  char *v1;
  double result;
  NSObject *v3;
  _BOOL4 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;

  v1 = (char *)*((_QWORD *)this + 2);
  if (v1)
  {
    v13 = COERCE_UNSIGNED_INT64((*(double (**)(char *, _QWORD))(*(_QWORD *)&v1[*(_QWORD *)(*(_QWORD *)v1 - 264)] + 112))(&v1[*(_QWORD *)(*(_QWORD *)v1 - 264)], 0));
    v12 = COERCE_UNSIGNED_INT64((*(double (**)(char *, uint64_t))(*(_QWORD *)&v1[*(_QWORD *)(*(_QWORD *)v1 - 264)] + 112))(&v1[*(_QWORD *)(*(_QWORD *)v1 - 264)], 1));
    (*(void (**)(char *, uint64_t))(*(_QWORD *)&v1[*(_QWORD *)(*(_QWORD *)v1 - 264)] + 112))(&v1[*(_QWORD *)(*(_QWORD *)v1 - 264)], 2);
    return COERCE_DOUBLE(__PAIR64__(v12, v13));
  }
  else
  {
    v3 = ikinemaLogObject()[1];
    v4 = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
    result = 0.0;
    if (v4)
    {
      CoreIKConstraint::getOrientationPrecision(v3, v5, v6, v7, v8, v9, v10, v11);
      return 0.0;
    }
  }
  return result;
}

void CoreIKConstraint::setOrientationPrecision(uint64_t a1, __n128 a2)
{
  char *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(char **)(a1 + 16);
  if (v2)
  {
    (*(void (**)(char *, _QWORD))(*(_QWORD *)&v2[*(_QWORD *)(*(_QWORD *)v2 - 264)] + 104))(&v2[*(_QWORD *)(*(_QWORD *)v2 - 264)], 0);
    (*(void (**)(char *, uint64_t, float))(*(_QWORD *)&v2[*(_QWORD *)(*(_QWORD *)v2 - 264)] + 104))(&v2[*(_QWORD *)(*(_QWORD *)v2 - 264)], 1, a2.n128_f32[1]);
    (*(void (**)(char *, uint64_t, float))(*(_QWORD *)&v2[*(_QWORD *)(*(_QWORD *)v2 - 264)] + 104))(&v2[*(_QWORD *)(*(_QWORD *)v2 - 264)], 2, a2.n128_f32[2]);
  }
  else
  {
    v3 = ikinemaLogObject()[1];
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      CoreIKConstraint::setOrientationPrecision(v3, v4, v5, v6, v7, v8, v9, v10);
  }
}

uint64_t *CoreIKAutoMatchingGenerateRetargetRig(FIK *a1, unint64_t a2, float32x4_t *a3, FIK *a4, unint64_t a5, float32x4_t *a6, CFErrorRef *a7)
{
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  FIK *MoCapRigForBiped;
  void (***v17)(FIK::CrtAllocator *__hidden);
  _DWORD *v18;
  _DWORD *v19;
  FIK *v21;
  unint64_t v22;
  __n128 *v23;
  __n128 v24[2];
  int v25;
  _QWORD *v26[3];
  _QWORD *v27[3];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31[2];
  int v32;
  _QWORD *v33[3];
  _QWORD *v34[3];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float32x4_t v38[2];
  float32x4_t v39[2];
  uint64_t v40[40];
  char v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  if (v32 == v25)
  {
    v13 = *a6;
    v12 = a6[1];
    v13.i32[3] = 0;
    v39[0] = v13;
    v39[1] = v12;
    v15 = *a3;
    v14 = a3[1];
    v15.i32[3] = 0;
    v38[0] = v15;
    v38[1] = v14;
    MoCapRigForBiped = FIK::AutoRig::createMoCapRigForBiped((FIK::Hierarchy *)v24, (FIK::Hierarchy *)v31, v39, v38, v40, *(double *)v14.i64);
    if (v41)
    {
      v17 = FIK::defaultAllocator(MoCapRigForBiped);
      v18 = FIK::Allocator::create<CoreIKRig>((uint64_t)v17);
      if (!v41)
      {
        v21 = (FIK *)std::__throw_bad_optional_access[abi:nn180100]();
      }
      v19 = v18;
      std::__variant_detail::__assignment<std::__variant_detail::__traits<FIK::GameRig,FIK::MoCapRig>>::__assign_alt[abi:nn180100]<1ul,FIK::MoCapRig,FIK::MoCapRig const&>((uint64_t)(v18 + 4), (uint64_t)(v18 + 4), (uint64_t)v40);
      *v19 = 3;
    }
    else
    {
      v19 = 0;
    }
    std::__optional_destruct_base<FIK::MoCapRig,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v40);
  }
  else
  {
    v19 = 0;
  }
  if (v29)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v30 + 24))(v30, v28, 0, 8);
    v28 = 0;
    v29 = 0;
  }
  std::__tree<std::__value_type<unsigned long,FIK::IKArray<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,FIK::IKArray<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,FIK::IKArray<unsigned long>>>>::destroy((uint64_t)v27, v27[1]);
  std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::destroy((uint64_t)v26, v26[1]);
  FIK::IKArray<FIK::Hierarchy::Joint>::~IKArray((uint64_t *)v24);
  if (v36)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v37 + 24))(v37, v35, 0, 8);
    v35 = 0;
    v36 = 0;
  }
  std::__tree<std::__value_type<unsigned long,FIK::IKArray<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,FIK::IKArray<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,FIK::IKArray<unsigned long>>>>::destroy((uint64_t)v34, v34[1]);
  std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::destroy((uint64_t)v33, v33[1]);
  FIK::IKArray<FIK::Hierarchy::Joint>::~IKArray((uint64_t *)v31);
  return (uint64_t *)v19;
}

uint64_t *`anonymous namespace'::makeCharacterisedHierarchy@<X0>(FIK *a1@<X0>, unint64_t a2@<X1>, __n128 *a3@<X8>)
{
  uint64_t v4;
  _BYTE v6[8];
  _QWORD *v7;
  void (**v8)(FIK::Characterisation *__hidden);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12[2];

  FIK::Characteriser::Characteriser((FIK::Characteriser *)v6);
  v4 = FIK::Characteriser::operator[]((uint64_t)v6, (uint64_t)"biped", 5);
  FIK::CharacterisedHierarchy::CharacterisedHierarchy(a3, v12, v4);
  v8 = off_24CA6C008;
  if (v10)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v11 + 24))(v11, v9, 0, 8);
    v9 = 0;
    v10 = 0;
  }
  std::__tree<std::__value_type<std::string_view,std::unique_ptr<FIK::Characterisation>>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,std::unique_ptr<FIK::Characterisation>>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,std::unique_ptr<FIK::Characterisation>>>>::destroy((uint64_t)v6, v7);
  return FIK::IKArray<FIK::Hierarchy::Joint>::~IKArray((uint64_t *)v12);
}

void `anonymous namespace'::makeError(CFIndex code, CFErrorRef *a2)
{
  const char *v4;
  const void *v5;
  void *userInfoValues;

  if (!*a2)
  {
    userInfoValues = 0;
    v5 = (const void *)*MEMORY[0x24BDBD378];
    switch(code)
    {
      case 'd':
        v4 = "No required joints could be identified.";
        goto LABEL_11;
      case 'e':
        v4 = "Not all required joints could be identified.";
        goto LABEL_11;
      case 'f':
        v4 = "Invalid Pose Descritpion.";
        goto LABEL_11;
      case 'g':
        v4 = "Supplied Identified joint(s) not found in hierarchy.";
        goto LABEL_11;
      default:
        if (code == 200)
        {
          v4 = "Rig generation failed due to internal error.";
        }
        else
        {
          if (code != 201)
            goto LABEL_12;
          v4 = "Pose type for source and target do not match.";
        }
LABEL_11:
        userInfoValues = (void *)CFStringCreateWithCString(0, v4, 0x8000100u);
LABEL_12:
        *a2 = CFErrorCreateWithUserInfoKeysAndValues(0, CFSTR("CoreIKAutoMatchingErrorDomain"), code, &v5, (const void *const *)&userInfoValues, 1);
        if (userInfoValues)
          CFRelease(userInfoValues);
        break;
    }
  }
}

uint64_t CoreIKAutoMatchingGenerateHierarchyToRigMapping(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const char **v6;
  unint64_t v7;
  uint64_t v8;
  const char *v9;
  size_t v10;
  uint64_t v11;
  const char **v12;
  void *v13;
  const char **v14;
  uint64_t v15;

  if (a3)
  {
    if (*(_DWORD *)(a3 + 352) == 1)
    {
      if (*(_QWORD *)(a3 + 224))
      {
        v6 = (const char **)result;
        v7 = 0;
        v8 = *(_QWORD *)(a3 + 240);
        v14 = (const char **)(result + 48 * a2);
        v15 = 48 * a2;
        do
        {
          if (*(_QWORD *)(v8 + 544 * v7 + 16))
          {
            v9 = *(const char **)(v8 + 544 * v7 + 8);
            if (a2)
              goto LABEL_7;
          }
          else
          {
            v9 = (const char *)&unk_2108059BE;
            if (a2)
            {
LABEL_7:
              v10 = strlen(v9);
              v11 = v15;
              v12 = v6;
              while (1)
              {
                result = strlen(*v12);
                if (v10 == result)
                {
                  result = memcmp(v9, *v12, v10);
                  if (!(_DWORD)result)
                    goto LABEL_15;
                }
                v12 += 6;
                v11 -= 48;
                if (!v11)
                {
                  v12 = v14;
                  goto LABEL_15;
                }
              }
            }
          }
          v12 = v6;
LABEL_15:
          *(_QWORD *)(a4 + 8 * v7++) = 0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)v6) >> 4);
        }
        while (v7 < *(_QWORD *)(a3 + 224));
      }
    }
    else
    {
      v13 = std::__throw_bad_variant_access[abi:nn180100]();
      return CoreIKAutoMatchingIdentifyJoints(v13);
    }
  }
  return result;
}

uint64_t *CoreIKAutoMatchingIdentifyJoints@<X0>(FIK *a1@<X0>, unint64_t a2@<X1>, CFErrorRef *a3@<X2>, uint64_t a4@<X8>)
{
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  FIK *v14;
  _QWORD *v15;
  int *v16;
  int *v17;
  int *v18;
  int *v19;
  int v20;
  int *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  void *v25;
  _QWORD **v26;
  _QWORD *v27;
  _QWORD **v28;
  int v29;
  _QWORD *v30;
  int *v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  char v38;
  char v39;
  void (***v40)(FIK::CrtAllocator *__hidden);
  IKString *v41;
  char v42;
  CFIndex v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *JointName;
  __n128 v64[3];
  _QWORD *v65[3];
  uint64_t v66;
  _QWORD *v67[2];
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (***v73)(FIK::CrtAllocator *__hidden);
  _QWORD v74[22];

  *(_QWORD *)(a4 + 256) = 0;
  *(_OWORD *)(a4 + 224) = 0u;
  *(_OWORD *)(a4 + 240) = 0u;
  *(_OWORD *)(a4 + 192) = 0u;
  *(_OWORD *)(a4 + 208) = 0u;
  *(_OWORD *)(a4 + 160) = 0u;
  *(_OWORD *)(a4 + 176) = 0u;
  *(_OWORD *)(a4 + 128) = 0u;
  *(_OWORD *)(a4 + 144) = 0u;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_QWORD *)a4 = JointName;
  *(_QWORD *)(a4 + 8) = v62;
  *(_QWORD *)(a4 + 16) = v61;
  *(_QWORD *)(a4 + 24) = v60;
  *(_QWORD *)(a4 + 32) = v59;
  *(_QWORD *)(a4 + 40) = v58;
  *(_QWORD *)(a4 + 48) = v57;
  *(_QWORD *)(a4 + 56) = v56;
  *(_QWORD *)(a4 + 64) = v55;
  *(_QWORD *)(a4 + 72) = v54;
  *(_QWORD *)(a4 + 80) = v53;
  *(_QWORD *)(a4 + 88) = v52;
  *(_QWORD *)(a4 + 96) = v51;
  *(_QWORD *)(a4 + 104) = v50;
  *(_QWORD *)(a4 + 112) = v7;
  *(_QWORD *)(a4 + 120) = v8;
  *(_QWORD *)(a4 + 128) = v9;
  *(_QWORD *)(a4 + 136) = v10;
  *(_QWORD *)(a4 + 144) = v11;
  *(_QWORD *)(a4 + 152) = v12;
  *(_QWORD *)(a4 + 160) = v13;
  *(_QWORD *)(a4 + 176) = v14;
  v15 = v67[0];
  if (!v67[0])
    goto LABEL_16;
  v16 = (int *)v67;
  v17 = (int *)v67[0];
  do
  {
    v18 = v17;
    v19 = v16;
    v20 = v17[8];
    if (v20 >= 8)
      v16 = v17;
    else
      v17 += 2;
    v17 = *(int **)v17;
  }
  while (v17);
  if (v16 == (int *)v67 || (v20 >= 8 ? (v21 = v18) : (v21 = v19), v21[8] > 8))
  {
LABEL_16:
    v25 = &unk_2108059BE;
    *(_QWORD *)(a4 + 184) = &unk_2108059BE;
LABEL_17:
    *(_QWORD *)(a4 + 192) = &unk_2108059BE;
LABEL_18:
    *(_QWORD *)(a4 + 200) = &unk_2108059BE;
LABEL_19:
    *(_QWORD *)(a4 + 208) = &unk_2108059BE;
LABEL_20:
    *(_QWORD *)(a4 + 216) = v25;
  }
  else
  {
    if (v20 < 8)
      v18 = v19;
    v22 = *((_QWORD *)v18 + 5) - 1;
    v23 = (_QWORD *)*((_QWORD *)v18 + 7);
    switch(v22)
    {
      case 0:
        v24 = *((_QWORD *)a1 + 6 * *v23);
        v25 = &unk_2108059BE;
        *(_QWORD *)(a4 + 184) = v24;
        goto LABEL_17;
      case 1:
        *(_QWORD *)(a4 + 184) = *((_QWORD *)a1 + 6 * v23[1]);
        v45 = *((_QWORD *)a1 + 6 * *v23);
        v25 = &unk_2108059BE;
        *(_QWORD *)(a4 + 192) = v45;
        goto LABEL_18;
      case 2:
        *(_QWORD *)(a4 + 184) = *((_QWORD *)a1 + 6 * v23[2]);
        *(_QWORD *)(a4 + 192) = *((_QWORD *)a1 + 6 * v23[1]);
        v46 = *((_QWORD *)a1 + 6 * *v23);
        v25 = &unk_2108059BE;
        *(_QWORD *)(a4 + 200) = v46;
        goto LABEL_19;
      case 3:
        *(_QWORD *)(a4 + 184) = *((_QWORD *)a1 + 6 * v23[3]);
        *(_QWORD *)(a4 + 192) = *((_QWORD *)a1 + 6 * v23[2]);
        *(_QWORD *)(a4 + 200) = *((_QWORD *)a1 + 6 * v23[1]);
        *(_QWORD *)(a4 + 208) = *((_QWORD *)a1 + 6 * *v23);
        v25 = &unk_2108059BE;
        goto LABEL_20;
      case 4:
        *(_QWORD *)(a4 + 184) = *((_QWORD *)a1 + 6 * v23[4]);
        *(_QWORD *)(a4 + 192) = *((_QWORD *)a1 + 6 * v23[3]);
        *(_QWORD *)(a4 + 200) = *((_QWORD *)a1 + 6 * v23[2]);
        *(_QWORD *)(a4 + 208) = *((_QWORD *)a1 + 6 * v23[1]);
        v25 = (void *)*((_QWORD *)a1 + 6 * *v23);
        goto LABEL_20;
      default:
        break;
    }
  }
  if (!v15)
    goto LABEL_36;
  v26 = v67;
  do
  {
    v27 = v15;
    v28 = v26;
    v29 = *((_DWORD *)v15 + 8);
    v30 = v15 + 1;
    if (v29 >= 13)
    {
      v30 = v27;
      v26 = (_QWORD **)v27;
    }
    v15 = (_QWORD *)*v30;
  }
  while (v15);
  if (v26 == v67 || (v29 >= 13 ? (v31 = (int *)v27) : (v31 = (int *)v28), v31[8] > 13))
  {
LABEL_36:
    v36 = &unk_2108059BE;
    *(_QWORD *)(a4 + 224) = &unk_2108059BE;
LABEL_37:
    *(_QWORD *)(a4 + 232) = &unk_2108059BE;
LABEL_38:
    *(_QWORD *)(a4 + 240) = &unk_2108059BE;
LABEL_39:
    *(_QWORD *)(a4 + 248) = &unk_2108059BE;
LABEL_40:
    *(_QWORD *)(a4 + 256) = v36;
  }
  else
  {
    if (v29 >= 13)
      v32 = v27;
    else
      v32 = v28;
    v33 = v32[5] - 1;
    v34 = (_QWORD *)v32[7];
    switch(v33)
    {
      case 0:
        v35 = *((_QWORD *)a1 + 6 * *v34);
        v36 = &unk_2108059BE;
        *(_QWORD *)(a4 + 224) = v35;
        goto LABEL_37;
      case 1:
        *(_QWORD *)(a4 + 224) = *((_QWORD *)a1 + 6 * v34[1]);
        v47 = *((_QWORD *)a1 + 6 * *v34);
        v36 = &unk_2108059BE;
        *(_QWORD *)(a4 + 232) = v47;
        goto LABEL_38;
      case 2:
        *(_QWORD *)(a4 + 224) = *((_QWORD *)a1 + 6 * v34[2]);
        *(_QWORD *)(a4 + 232) = *((_QWORD *)a1 + 6 * v34[1]);
        v48 = *((_QWORD *)a1 + 6 * *v34);
        v36 = &unk_2108059BE;
        *(_QWORD *)(a4 + 240) = v48;
        goto LABEL_39;
      case 3:
        *(_QWORD *)(a4 + 224) = *((_QWORD *)a1 + 6 * v34[3]);
        *(_QWORD *)(a4 + 232) = *((_QWORD *)a1 + 6 * v34[2]);
        *(_QWORD *)(a4 + 240) = *((_QWORD *)a1 + 6 * v34[1]);
        *(_QWORD *)(a4 + 248) = *((_QWORD *)a1 + 6 * *v34);
        v36 = &unk_2108059BE;
        goto LABEL_40;
      case 4:
        *(_QWORD *)(a4 + 224) = *((_QWORD *)a1 + 6 * v34[4]);
        *(_QWORD *)(a4 + 232) = *((_QWORD *)a1 + 6 * v34[3]);
        *(_QWORD *)(a4 + 240) = *((_QWORD *)a1 + 6 * v34[2]);
        *(_QWORD *)(a4 + 248) = *((_QWORD *)a1 + 6 * v34[1]);
        v36 = (void *)*((_QWORD *)a1 + 6 * *v34);
        goto LABEL_40;
      default:
        break;
    }
  }
  v37 = 0;
  v38 = 0;
  v74[0] = JointName;
  v74[1] = v62;
  v74[2] = v61;
  v74[3] = v60;
  v74[4] = v59;
  v74[5] = v58;
  v74[6] = v57;
  v74[7] = v56;
  v74[8] = v55;
  v74[9] = v54;
  v74[10] = v53;
  v74[11] = v52;
  v74[12] = v51;
  v74[13] = v50;
  v74[14] = v7;
  v74[15] = v8;
  v74[16] = v9;
  v74[17] = v10;
  v74[18] = v11;
  v74[19] = v12;
  v39 = 1;
  v74[20] = v13;
  do
  {
    v40 = FIK::defaultAllocator(v14);
    v71 = 0;
    v72 = 0;
    v73 = v40;
    v41 = (IKString *)strlen((const char *)v74[v37]);
    IKString::assign(&v71, (char *)v74[v37], v41);
    v14 = (FIK *)FIK::Hierarchy::containsJoint((uint64_t *)v64, (uint64_t)&v71);
    v42 = (char)v14;
    if (v72)
      v14 = (FIK *)((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v73)[3])(v73, v71, 0, 8);
    v38 |= v42;
    v39 &= v42;
    ++v37;
  }
  while (v37 != 21);
  if ((v39 & 1) == 0)
  {
    if ((v38 & 1) != 0)
      v43 = 101;
    else
      v43 = 100;
  }
  if (v69)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v70 + 24))(v70, v68, 0, 8);
    v68 = 0;
    v69 = 0;
  }
  std::__tree<std::__value_type<unsigned long,FIK::IKArray<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,FIK::IKArray<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,FIK::IKArray<unsigned long>>>>::destroy((uint64_t)&v66, v67[0]);
  std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::destroy((uint64_t)v65, v65[1]);
  return FIK::IKArray<FIK::Hierarchy::Joint>::~IKArray((uint64_t *)v64);
}

BOOL CoreIKAutoMatchingRequiredJointsAreValid(uint64_t a1, const char **a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  const char **v12;
  uint64_t v13;
  const char **i;
  const char *v15;
  size_t v16;
  uint64_t v17;
  _BOOL8 result;
  _OWORD v19[10];
  uint64_t v20;

  v5 = 0;
  v6 = *(_OWORD *)(a1 + 16);
  v19[0] = *(_OWORD *)a1;
  v19[1] = v6;
  v7 = *(_OWORD *)(a1 + 48);
  v19[2] = *(_OWORD *)(a1 + 32);
  v19[3] = v7;
  v8 = *(_OWORD *)(a1 + 80);
  v19[4] = *(_OWORD *)(a1 + 64);
  v19[5] = v8;
  v9 = *(_OWORD *)(a1 + 112);
  v19[6] = *(_OWORD *)(a1 + 96);
  v19[7] = v9;
  v10 = *(_OWORD *)(a1 + 128);
  v11 = *(_OWORD *)(a1 + 144);
  v20 = *(_QWORD *)(a1 + 160);
  v12 = &a2[6 * a3];
  v13 = 48 * a3;
  v19[8] = v10;
  v19[9] = v11;
  do
  {
    i = a2;
    if (a3)
    {
      v15 = (const char *)*((_QWORD *)v19 + v5);
      v16 = strlen(v15);
      v17 = v13;
      for (i = a2; v16 != strlen(*i) || memcmp(v15, *i, v16); i += 6)
      {
        v17 -= 48;
        if (!v17)
          return 0;
      }
    }
    result = i != v12;
    if (i == v12)
      break;
    ++v5;
  }
  while (v5 != 21);
  return result;
}

void CoreIKAutoMatchingGenerateRetargetRigFromDefinition(FIK *a1, unint64_t a2, const char **a3, uint64_t a4, float32x4_t *a5, FIK *a6, unint64_t a7, float32x4_t *a8, const char **a9, int32x2_t *a10, CFErrorRef *a11)
{
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  double v20;
  FIK *MoCapRig;
  void (***v22)(FIK::CrtAllocator *__hidden);
  _DWORD *v23;
  _DWORD *v24;
  CFIndex v25;
  FIK *v26;
  const char **v27;
  int32x2_t *v28;
  CFErrorRef *v29;
  uint64_t v30;
  uint64_t v31[4];
  int v32;
  char v33;
  _QWORD *v34[3];
  _QWORD *v35[3];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39[4];
  int v40;
  char v41;
  _QWORD *v42[3];
  _QWORD *v43[3];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  float32x4_t v47[2];
  float32x4_t v48[2];
  uint64_t v49[40];
  char v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  FIK::IKArray<FIK::Hierarchy::Joint>::~IKArray(v49);
  if (!*a11)
  {
    FIK::IKArray<FIK::Hierarchy::Joint>::~IKArray(v49);
    if (!*a11)
    {
      if (v32 == v40)
      {
        if (v33 && v41)
        {
          v17 = *a8;
          v16 = a8[1];
          v17.i32[3] = 0;
          v48[0] = v17;
          v48[1] = v16;
          v19 = *a5;
          v18 = a5[1];
          v19.i32[3] = 0;
          v47[0] = v19;
          v47[1] = v18;
          v20 = FIK::RigBuilderUtils::shiftHipsToOrigin((FIK::Hierarchy *)v31, *(double *)v18.i64);
          FIK::RigBuilderUtils::shiftHipsToOrigin((FIK::Hierarchy *)v39, v20);
          MoCapRig = FIK::MoCapRigBuilder::createMoCapRig((uint64_t)v39, v31, v48, v47, CoreIKAutoMatchingGenerateRetargetRigFromDefinition::taskJoints, 7, 0, 0, v49, 0, 0);
          if (v50)
          {
            v22 = FIK::defaultAllocator(MoCapRig);
            v23 = FIK::Allocator::create<CoreIKRig>((uint64_t)v22);
            if (!v50)
            {
              v26 = (FIK *)std::__throw_bad_optional_access[abi:nn180100]();
              return;
            }
            v24 = v23;
            std::__variant_detail::__assignment<std::__variant_detail::__traits<FIK::GameRig,FIK::MoCapRig>>::__assign_alt[abi:nn180100]<1ul,FIK::MoCapRig,FIK::MoCapRig const&>((uint64_t)(v23 + 4), (uint64_t)(v23 + 4), (uint64_t)v49);
            *v24 = 3;
          }
          else
          {
          }
          std::__optional_destruct_base<FIK::MoCapRig,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v49);
          goto LABEL_12;
        }
        v25 = 102;
      }
      else
      {
        v25 = 201;
      }
    }
LABEL_12:
    if (v37)
    {
      (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v38 + 24))(v38, v36, 0, 8);
      v36 = 0;
      v37 = 0;
    }
    std::__tree<std::__value_type<unsigned long,FIK::IKArray<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,FIK::IKArray<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,FIK::IKArray<unsigned long>>>>::destroy((uint64_t)v35, v35[1]);
    std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::destroy((uint64_t)v34, v34[1]);
    FIK::IKArray<FIK::Hierarchy::Joint>::~IKArray(v31);
  }
  if (v45)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v46 + 24))(v46, v44, 0, 8);
    v44 = 0;
    v45 = 0;
  }
  std::__tree<std::__value_type<unsigned long,FIK::IKArray<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,FIK::IKArray<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,FIK::IKArray<unsigned long>>>>::destroy((uint64_t)v43, v43[1]);
  std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::destroy((uint64_t)v42, v42[1]);
  FIK::IKArray<FIK::Hierarchy::Joint>::~IKArray(v39);
}

void `anonymous namespace'::makeCharacterisedHierarchy(FIK *a1@<X0>, const char **a2@<X1>, int32x2_t *a3@<X2>, CFErrorRef *a4@<X3>, uint64_t a5@<X8>)
{
  void (***v10)(FIK::CrtAllocator *__hidden);
  int32x2_t v11;
  __int32 v12;
  size_t v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  size_t v21;
  uint64_t v22;
  size_t v23;
  uint64_t v24;
  size_t v25;
  uint64_t v26;
  size_t v27;
  uint64_t v28;
  size_t v29;
  uint64_t v30;
  size_t v31;
  uint64_t v32;
  size_t v33;
  uint64_t v34;
  size_t v35;
  uint64_t v36;
  size_t v37;
  uint64_t v38;
  size_t v39;
  uint64_t v40;
  size_t v41;
  uint64_t v42;
  size_t v43;
  uint64_t v44;
  size_t v45;
  uint64_t v46;
  size_t v47;
  uint64_t v48;
  size_t v49;
  uint64_t v50;
  size_t v51;
  uint64_t v52;
  size_t v53;
  uint64_t v54;
  uint64_t **v55;
  void (***v56)(FIK::CrtAllocator *__hidden);
  size_t v57;
  uint64_t v58;
  uint64_t v59;
  size_t v60;
  uint64_t v61;
  uint64_t v62;
  size_t v63;
  uint64_t v64;
  uint64_t v65;
  size_t v66;
  uint64_t v67;
  uint64_t v68;
  FIK *v69;
  uint64_t v70;
  uint64_t v71;
  void (***v72)(FIK::CrtAllocator *__hidden);
  size_t v73;
  uint64_t v74;
  uint64_t v75;
  size_t v76;
  uint64_t v77;
  uint64_t v78;
  size_t v79;
  uint64_t v80;
  uint64_t v81;
  size_t v82;
  uint64_t v83;
  uint64_t v84;
  size_t v85;
  uint64_t v86;
  uint64_t v87;
  size_t v88;
  uint64_t v89;
  size_t v90;
  uint64_t v91;
  const FIK::Hierarchy *v92;
  char v93;
  size_t v94;
  uint64_t v95;
  char *v96;
  size_t v97;
  uint64_t v98;
  const FIK::Hierarchy *v99;
  char v100;
  FIK *v101;
  unint64_t v102;
  uint64_t v103;
  __int128 v104;
  _QWORD **v105;
  _QWORD *v106[2];
  _QWORD **v107;
  _QWORD *v108[2];
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112[4];
  _QWORD v113[2];
  uint64_t v114;
  uint64_t v115;
  _QWORD v116[2];
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD v122[2];
  uint64_t v123;
  void (***v124)(FIK::CrtAllocator *__hidden);
  _QWORD v125[2];
  uint64_t v126;
  void (***v127)(FIK::CrtAllocator *__hidden);
  __int128 v128;
  uint64_t *v129;
  _QWORD *v130[2];
  uint64_t *v131;
  _QWORD *v132[2];
  uint64_t v133;
  uint64_t v134;
  void (***v135)(FIK::CrtAllocator *__hidden);

  LODWORD(v128) = 0;
  BYTE4(v128) = 0;
  v129 = (uint64_t *)v130;
  v130[0] = 0;
  v132[0] = 0;
  v132[1] = 0;
  v130[1] = 0;
  v131 = (uint64_t *)v132;
  v10 = FIK::defaultAllocator(a1);
  v133 = 0;
  v134 = 0;
  v135 = v10;
  IKString::assign(&v133, "undefined", (IKString *)9);
  v11 = vrev64_s32(vadd_s32(*a3, (int32x2_t)-1));
  *((int8x8_t *)&v128 + 1) = vand_s8((int8x8_t)vadd_s32(v11, (int32x2_t)0x100000001), (int8x8_t)vcgt_u32((uint32x2_t)0x500000005, (uint32x2_t)v11));
  BYTE4(v128) = 1;
  v12 = a3[1].i32[0];
  if ((v12 - 1) >= 3)
    v12 = 0;
  LODWORD(v128) = v12;
  v13 = strlen(*a2);
  v14 = FIK::Hierarchy::indexOf((uint64_t *)a1, (void *)*a2, v13);
  if (v14 == -1)
  {
  }
  else
  {
    LODWORD(v119) = 0;
    *((_QWORD *)&v119 + 1) = v14;
    std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::pair<int const,unsigned long>>(&v129, (int *)&v119, &v119);
  }
  v15 = strlen(a2[1]);
  v16 = FIK::Hierarchy::indexOf((uint64_t *)a1, (void *)a2[1], v15);
  if (v16 == -1)
  {
  }
  else
  {
    LODWORD(v119) = 1;
    *((_QWORD *)&v119 + 1) = v16;
    std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::pair<int const,unsigned long>>(&v129, (int *)&v119, &v119);
  }
  v17 = strlen(a2[2]);
  v18 = FIK::Hierarchy::indexOf((uint64_t *)a1, (void *)a2[2], v17);
  if (v18 == -1)
  {
  }
  else
  {
    LODWORD(v119) = 2;
    *((_QWORD *)&v119 + 1) = v18;
    std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::pair<int const,unsigned long>>(&v129, (int *)&v119, &v119);
  }
  v19 = strlen(a2[3]);
  v20 = FIK::Hierarchy::indexOf((uint64_t *)a1, (void *)a2[3], v19);
  if (v20 == -1)
  {
  }
  else
  {
    LODWORD(v119) = 3;
    *((_QWORD *)&v119 + 1) = v20;
    std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::pair<int const,unsigned long>>(&v129, (int *)&v119, &v119);
  }
  v21 = strlen(a2[4]);
  v22 = FIK::Hierarchy::indexOf((uint64_t *)a1, (void *)a2[4], v21);
  if (v22 == -1)
  {
  }
  else
  {
    LODWORD(v119) = 4;
    *((_QWORD *)&v119 + 1) = v22;
    std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::pair<int const,unsigned long>>(&v129, (int *)&v119, &v119);
  }
  v23 = strlen(a2[5]);
  v24 = FIK::Hierarchy::indexOf((uint64_t *)a1, (void *)a2[5], v23);
  if (v24 == -1)
  {
  }
  else
  {
    LODWORD(v119) = 5;
    *((_QWORD *)&v119 + 1) = v24;
    std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::pair<int const,unsigned long>>(&v129, (int *)&v119, &v119);
  }
  v25 = strlen(a2[6]);
  v26 = FIK::Hierarchy::indexOf((uint64_t *)a1, (void *)a2[6], v25);
  if (v26 == -1)
  {
  }
  else
  {
    LODWORD(v119) = 6;
    *((_QWORD *)&v119 + 1) = v26;
    std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::pair<int const,unsigned long>>(&v129, (int *)&v119, &v119);
  }
  v27 = strlen(a2[7]);
  v28 = FIK::Hierarchy::indexOf((uint64_t *)a1, (void *)a2[7], v27);
  if (v28 == -1)
  {
  }
  else
  {
    LODWORD(v119) = 8;
    *((_QWORD *)&v119 + 1) = v28;
    std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::pair<int const,unsigned long>>(&v129, (int *)&v119, &v119);
  }
  v29 = strlen(a2[8]);
  v30 = FIK::Hierarchy::indexOf((uint64_t *)a1, (void *)a2[8], v29);
  if (v30 == -1)
  {
  }
  else
  {
    LODWORD(v119) = 10;
    *((_QWORD *)&v119 + 1) = v30;
    std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::pair<int const,unsigned long>>(&v129, (int *)&v119, &v119);
  }
  v31 = strlen(a2[9]);
  v32 = FIK::Hierarchy::indexOf((uint64_t *)a1, (void *)a2[9], v31);
  if (v32 == -1)
  {
  }
  else
  {
    LODWORD(v119) = 11;
    *((_QWORD *)&v119 + 1) = v32;
    std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::pair<int const,unsigned long>>(&v129, (int *)&v119, &v119);
  }
  v33 = strlen(a2[10]);
  v34 = FIK::Hierarchy::indexOf((uint64_t *)a1, (void *)a2[10], v33);
  if (v34 == -1)
  {
  }
  else
  {
    LODWORD(v119) = 12;
    *((_QWORD *)&v119 + 1) = v34;
    std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::pair<int const,unsigned long>>(&v129, (int *)&v119, &v119);
  }
  v35 = strlen(a2[11]);
  v36 = FIK::Hierarchy::indexOf((uint64_t *)a1, (void *)a2[11], v35);
  if (v36 == -1)
  {
  }
  else
  {
    LODWORD(v119) = 14;
    *((_QWORD *)&v119 + 1) = v36;
    std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::pair<int const,unsigned long>>(&v129, (int *)&v119, &v119);
  }
  v37 = strlen(a2[12]);
  v38 = FIK::Hierarchy::indexOf((uint64_t *)a1, (void *)a2[12], v37);
  if (v38 == -1)
  {
  }
  else
  {
    LODWORD(v119) = 16;
    *((_QWORD *)&v119 + 1) = v38;
    std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::pair<int const,unsigned long>>(&v129, (int *)&v119, &v119);
  }
  v39 = strlen(a2[13]);
  v40 = FIK::Hierarchy::indexOf((uint64_t *)a1, (void *)a2[13], v39);
  if (v40 == -1)
  {
  }
  else
  {
    LODWORD(v119) = 17;
    *((_QWORD *)&v119 + 1) = v40;
    std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::pair<int const,unsigned long>>(&v129, (int *)&v119, &v119);
  }
  v41 = strlen(a2[14]);
  v42 = FIK::Hierarchy::indexOf((uint64_t *)a1, (void *)a2[14], v41);
  if (v42 == -1)
  {
  }
  else
  {
    LODWORD(v119) = 19;
    *((_QWORD *)&v119 + 1) = v42;
    std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::pair<int const,unsigned long>>(&v129, (int *)&v119, &v119);
  }
  v43 = strlen(a2[15]);
  v44 = FIK::Hierarchy::indexOf((uint64_t *)a1, (void *)a2[15], v43);
  if (v44 == -1)
  {
  }
  else
  {
    LODWORD(v119) = 21;
    *((_QWORD *)&v119 + 1) = v44;
    std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::pair<int const,unsigned long>>(&v129, (int *)&v119, &v119);
  }
  v45 = strlen(a2[16]);
  v46 = FIK::Hierarchy::indexOf((uint64_t *)a1, (void *)a2[16], v45);
  if (v46 == -1)
  {
  }
  else
  {
    LODWORD(v119) = 22;
    *((_QWORD *)&v119 + 1) = v46;
    std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::pair<int const,unsigned long>>(&v129, (int *)&v119, &v119);
  }
  v47 = strlen(a2[17]);
  v48 = FIK::Hierarchy::indexOf((uint64_t *)a1, (void *)a2[17], v47);
  if (v48 == -1)
  {
  }
  else
  {
    LODWORD(v119) = 24;
    *((_QWORD *)&v119 + 1) = v48;
    std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::pair<int const,unsigned long>>(&v129, (int *)&v119, &v119);
  }
  v49 = strlen(a2[18]);
  v50 = FIK::Hierarchy::indexOf((uint64_t *)a1, (void *)a2[18], v49);
  if (v50 == -1)
  {
  }
  else
  {
    LODWORD(v119) = 26;
    *((_QWORD *)&v119 + 1) = v50;
    std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::pair<int const,unsigned long>>(&v129, (int *)&v119, &v119);
  }
  v51 = strlen(a2[19]);
  v52 = FIK::Hierarchy::indexOf((uint64_t *)a1, (void *)a2[19], v51);
  if (v52 == -1)
  {
  }
  else
  {
    LODWORD(v119) = 28;
    *((_QWORD *)&v119 + 1) = v52;
    std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::pair<int const,unsigned long>>(&v129, (int *)&v119, &v119);
  }
  v53 = strlen(a2[20]);
  v54 = FIK::Hierarchy::indexOf((uint64_t *)a1, (void *)a2[20], v53);
  if (v54 == -1)
  {
  }
  else
  {
    LODWORD(v119) = 29;
    *((_QWORD *)&v119 + 1) = v54;
    v55 = std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::pair<int const,unsigned long>>(&v129, (int *)&v119, &v119);
  }
  v56 = FIK::defaultAllocator((FIK *)v55);
  v125[0] = 0;
  v125[1] = 0;
  v126 = 0;
  v127 = v56;
  v57 = strlen(a2[23]);
  if (v57)
  {
    v58 = FIK::Hierarchy::indexOf((uint64_t *)a1, (void *)a2[23], v57);
    if (v58 == -1)
    {
    }
    else
    {
      v59 = v58;
      FIK::IKArray<FIK::Segment *>::reserve(v125, v125[0] + 1);
      *(_QWORD *)(v126 + 8 * v125[0]++) = v59;
    }
  }
  v60 = strlen(a2[24]);
  if (v60)
  {
    v61 = FIK::Hierarchy::indexOf((uint64_t *)a1, (void *)a2[24], v60);
    if (v61 == -1)
    {
    }
    else
    {
      v62 = v61;
      FIK::IKArray<FIK::Segment *>::reserve(v125, v125[0] + 1);
      *(_QWORD *)(v126 + 8 * v125[0]++) = v62;
    }
  }
  v63 = strlen(a2[25]);
  if (v63)
  {
    v64 = FIK::Hierarchy::indexOf((uint64_t *)a1, (void *)a2[25], v63);
    if (v64 == -1)
    {
    }
    else
    {
      v65 = v64;
      FIK::IKArray<FIK::Segment *>::reserve(v125, v125[0] + 1);
      *(_QWORD *)(v126 + 8 * v125[0]++) = v65;
    }
  }
  v66 = strlen(a2[26]);
  if (v66)
  {
    v67 = FIK::Hierarchy::indexOf((uint64_t *)a1, (void *)a2[26], v66);
    if (v67 == -1)
    {
    }
    else
    {
      v68 = v67;
      FIK::IKArray<FIK::Segment *>::reserve(v125, v125[0] + 1);
      *(_QWORD *)(v126 + 8 * v125[0]++) = v68;
    }
  }
  v69 = (FIK *)strlen(a2[27]);
  if (v69)
  {
    v70 = FIK::Hierarchy::indexOf((uint64_t *)a1, (void *)a2[27], (size_t)v69);
    if (v70 == -1)
    {
    }
    else
    {
      v71 = v70;
      v69 = (FIK *)FIK::IKArray<FIK::Segment *>::reserve(v125, v125[0] + 1);
      *(_QWORD *)(v126 + 8 * v125[0]++) = v71;
    }
  }
  v72 = FIK::defaultAllocator(v69);
  v122[0] = 0;
  v122[1] = 0;
  v123 = 0;
  v124 = v72;
  v73 = strlen(a2[28]);
  if (v73)
  {
    v74 = FIK::Hierarchy::indexOf((uint64_t *)a1, (void *)a2[28], v73);
    if (v74 == -1)
    {
    }
    else
    {
      v75 = v74;
      FIK::IKArray<FIK::Segment *>::reserve(v122, v122[0] + 1);
      *(_QWORD *)(v123 + 8 * v122[0]++) = v75;
    }
  }
  v76 = strlen(a2[29]);
  if (v76)
  {
    v77 = FIK::Hierarchy::indexOf((uint64_t *)a1, (void *)a2[29], v76);
    if (v77 == -1)
    {
    }
    else
    {
      v78 = v77;
      FIK::IKArray<FIK::Segment *>::reserve(v122, v122[0] + 1);
      *(_QWORD *)(v123 + 8 * v122[0]++) = v78;
    }
  }
  v79 = strlen(a2[30]);
  if (v79)
  {
    v80 = FIK::Hierarchy::indexOf((uint64_t *)a1, (void *)a2[30], v79);
    if (v80 == -1)
    {
    }
    else
    {
      v81 = v80;
      FIK::IKArray<FIK::Segment *>::reserve(v122, v122[0] + 1);
      *(_QWORD *)(v123 + 8 * v122[0]++) = v81;
    }
  }
  v82 = strlen(a2[31]);
  if (v82)
  {
    v83 = FIK::Hierarchy::indexOf((uint64_t *)a1, (void *)a2[31], v82);
    if (v83 == -1)
    {
    }
    else
    {
      v84 = v83;
      FIK::IKArray<FIK::Segment *>::reserve(v122, v122[0] + 1);
      *(_QWORD *)(v123 + 8 * v122[0]++) = v84;
    }
  }
  v85 = strlen(a2[32]);
  if (v85)
  {
    v86 = FIK::Hierarchy::indexOf((uint64_t *)a1, (void *)a2[32], v85);
    if (v86 == -1)
    {
    }
    else
    {
      v87 = v86;
      FIK::IKArray<FIK::Segment *>::reserve(v122, v122[0] + 1);
      *(_QWORD *)(v123 + 8 * v122[0]++) = v87;
    }
  }
  LODWORD(v119) = 8;
  FIK::IKArray<FIK::Task *>::IKArray((_QWORD *)&v119 + 1, v125);
  std::__tree<std::__value_type<int,FIK::IKArray<unsigned long>>,std::__map_value_compare<int,std::__value_type<int,FIK::IKArray<unsigned long>>,std::less<int>,true>,std::allocator<std::__value_type<int,FIK::IKArray<unsigned long>>>>::__emplace_unique_key_args<int,std::pair<int const,FIK::IKArray<unsigned long>>>(&v131, (int *)&v119, (uint64_t)&v119);
  *((_QWORD *)&v119 + 1) = 0;
  if (v120)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v121 + 24))(v121, v120, 0, 8);
  LODWORD(v119) = 13;
  FIK::IKArray<FIK::Task *>::IKArray((_QWORD *)&v119 + 1, v122);
  std::__tree<std::__value_type<int,FIK::IKArray<unsigned long>>,std::__map_value_compare<int,std::__value_type<int,FIK::IKArray<unsigned long>>,std::less<int>,true>,std::allocator<std::__value_type<int,FIK::IKArray<unsigned long>>>>::__emplace_unique_key_args<int,std::pair<int const,FIK::IKArray<unsigned long>>>(&v131, (int *)&v119, (uint64_t)&v119);
  *((_QWORD *)&v119 + 1) = 0;
  if (v120)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v121 + 24))(v121, v120, 0, 8);
  v88 = strlen(a2[1]);
  v89 = FIK::Hierarchy::indexOf((uint64_t *)a1, (void *)a2[1], v88);
  v90 = strlen(a2[2]);
  v91 = FIK::Hierarchy::indexOf((uint64_t *)a1, (void *)a2[2], v90);
  v92 = (const FIK::Hierarchy *)FIK::Hierarchy::parentIndexOf(a1, v91);
  if (!v93)
    goto LABEL_129;
  LODWORD(v119) = 1;
  FIK::IKArray<FIK::Task *>::IKArray((_QWORD *)&v119 + 1, v116);
  std::__tree<std::__value_type<int,FIK::IKArray<unsigned long>>,std::__map_value_compare<int,std::__value_type<int,FIK::IKArray<unsigned long>>,std::less<int>,true>,std::allocator<std::__value_type<int,FIK::IKArray<unsigned long>>>>::__emplace_unique_key_args<int,std::pair<int const,FIK::IKArray<unsigned long>>>(&v131, (int *)&v119, (uint64_t)&v119);
  *((_QWORD *)&v119 + 1) = 0;
  if (v120)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v121 + 24))(v121, v120, 0, 8);
  v94 = strlen(a2[3]);
  v95 = FIK::Hierarchy::indexOf((uint64_t *)a1, (void *)a2[3], v94);
  v96 = (char *)a2[4];
  v97 = strlen(v96);
  v98 = FIK::Hierarchy::indexOf((uint64_t *)a1, v96, v97);
  v99 = (const FIK::Hierarchy *)FIK::Hierarchy::parentIndexOf(a1, v98);
  if (v100)
  {
    LODWORD(v119) = 2;
    FIK::IKArray<FIK::Task *>::IKArray((_QWORD *)&v119 + 1, v113);
    std::__tree<std::__value_type<int,FIK::IKArray<unsigned long>>,std::__map_value_compare<int,std::__value_type<int,FIK::IKArray<unsigned long>>,std::less<int>,true>,std::allocator<std::__value_type<int,FIK::IKArray<unsigned long>>>>::__emplace_unique_key_args<int,std::pair<int const,FIK::IKArray<unsigned long>>>(&v131, (int *)&v119, (uint64_t)&v119);
    *((_QWORD *)&v119 + 1) = 0;
    if (v120)
      (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v121 + 24))(v121, v120, 0, 8);
    FIK::Hierarchy::Hierarchy((FIK::Hierarchy *)v112, a1);
    v104 = v128;
    v106[0] = 0;
    v106[1] = 0;
    v105 = v106;
    std::map<int,unsigned long>::insert[abi:nn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<int,unsigned long>,std::__tree_node<std::__value_type<int,unsigned long>,void *> *,long>>>((uint64_t *)&v105, (int *)v129, (int *)v130);
    v108[0] = 0;
    v108[1] = 0;
    v107 = v108;
    std::map<int,FIK::IKArray<unsigned long>>::insert[abi:nn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<int,FIK::IKArray<unsigned long>>,std::__tree_node<std::__value_type<int,FIK::IKArray<unsigned long>>,void *> *,long>>>(&v107, (int *)v131, (int *)v132);
    IKString::IKString((IKString *)&v109, (const IKString *)&v133);
    FIK::CharacterisedHierarchy::CharacterisedHierarchy(a5, v112, &v104);
    if (v110)
    {
      (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v111 + 24))(v111, v109, 0, 8);
      v109 = 0;
      v110 = 0;
    }
    std::__tree<std::__value_type<unsigned long,FIK::IKArray<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,FIK::IKArray<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,FIK::IKArray<unsigned long>>>>::destroy((uint64_t)&v107, v108[0]);
    std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::destroy((uint64_t)&v105, v106[0]);
    FIK::IKArray<FIK::Hierarchy::Joint>::~IKArray(v112);
    v113[0] = 0;
    if (v114)
      (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v115 + 24))(v115, v114, 0, 8);
    v116[0] = 0;
    if (v117)
      (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v118 + 24))(v118, v117, 0, 8);
    v122[0] = 0;
    if (v123)
      ((void (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v124)[3])(v124, v123, 0, 8);
    v125[0] = 0;
    if (v126)
      ((void (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v127)[3])(v127, v126, 0, 8);
    if (v134)
    {
      ((void (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v135)[3])(v135, v133, 0, 8);
      v133 = 0;
      v134 = 0;
    }
    std::__tree<std::__value_type<unsigned long,FIK::IKArray<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,FIK::IKArray<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,FIK::IKArray<unsigned long>>>>::destroy((uint64_t)&v131, v132[0]);
    std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::destroy((uint64_t)&v129, v130[0]);
  }
  else
  {
LABEL_129:
    v101 = (FIK *)std::__throw_bad_optional_access[abi:nn180100]();
  }
}

uint64_t *`anonymous namespace'::makeHierarchy@<X0>(FIK *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  FIK *v4;
  FIK *v6;
  FIK *v7;
  void (***v8)(FIK::CrtAllocator *__hidden);
  IKString *v9;
  FIK *v10;
  void (***v11)(FIK::CrtAllocator *__hidden);
  IKString *v12;
  __int128 v13;
  __int128 v14;
  __n128 v15;
  uint64_t v17;
  uint64_t v18;
  void (***v19)(FIK::CrtAllocator *__hidden);
  uint64_t v20;
  uint64_t v21;
  void (***v22)(FIK::CrtAllocator *__hidden);
  __int128 v23;
  __int128 v24;
  uint64_t v25[2];
  uint64_t v26;
  void (***v27)(FIK::CrtAllocator *__hidden);

  v4 = a1;
  v25[0] = 0;
  v25[1] = 0;
  v26 = 0;
  v27 = FIK::defaultAllocator(a1);
  FIK::IKArray<FIK::JointDefinition>::reserve(v25, a2);
  if (a2)
  {
    v7 = (FIK *)((char *)v4 + 48 * a2);
    do
    {
      v8 = FIK::defaultAllocator(v6);
      v17 = 0;
      v18 = 0;
      v19 = v8;
      v9 = (IKString *)strlen(*(const char **)v4);
      IKString::assign(&v17, *(char **)v4, v9);
      v11 = FIK::defaultAllocator(v10);
      v20 = 0;
      v21 = 0;
      v22 = v11;
      v12 = (IKString *)strlen(*((const char **)v4 + 1));
      IKString::assign(&v20, *((char **)v4 + 1), v12);
      v14 = *((_OWORD *)v4 + 1);
      v13 = *((_OWORD *)v4 + 2);
      HIDWORD(v14) = 0;
      v23 = v14;
      v24 = v13;
      v15 = FIK::IKArray<FIK::JointDefinition>::push_back(v25, (uint64_t)&v17);
      if (v21)
      {
        v6 = (FIK *)((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t, __n128))(*v22)[3])(v22, v20, 0, 8, v15);
        v20 = 0;
        v21 = 0;
      }
      if (v18)
        v6 = (FIK *)((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t, __n128))(*v19)[3])(v19, v17, 0, 8, v15);
      v4 = (FIK *)((char *)v4 + 48);
    }
    while (v4 != v7);
  }
  FIK::Hierarchy::Hierarchy(a3, v26, v25[0]);
  return FIK::IKArray<FIK::JointDefinition>::~IKArray(v25);
}

void std::__tree<std::__value_type<std::string_view,std::unique_ptr<FIK::Characterisation>>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,std::unique_ptr<FIK::Characterisation>>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,std::unique_ptr<FIK::Characterisation>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;

  if (a2)
  {
    std::__tree<std::__value_type<std::string_view,std::unique_ptr<FIK::Characterisation>>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,std::unique_ptr<FIK::Characterisation>>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,std::unique_ptr<FIK::Characterisation>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string_view,std::unique_ptr<FIK::Characterisation>>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,std::unique_ptr<FIK::Characterisation>>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,std::unique_ptr<FIK::Characterisation>>>>::destroy(a1, a2[1]);
    v4 = a2[6];
    a2[6] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    operator delete(a2);
  }
}

_DWORD *FIK::Allocator::create<CoreIKRig>(uint64_t a1)
{
  _DWORD *v1;
  _DWORD *v2;

  v1 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 384, 16);
  v2 = v1;
  if (v1)
  {
    *v1 = 0;
    std::__variant_detail::__alt<0ul,FIK::GameRig>::__alt[abi:nn180100]<>((uint64_t)(v1 + 4));
    v2[88] = 0;
    *((_BYTE *)v2 + 368) = 1;
  }
  return v2;
}

void std::__variant_detail::__alt<0ul,FIK::GameRig>::__alt[abi:nn180100]<>(uint64_t a1)
{
  void (***v2)(FIK::CrtAllocator *__hidden);

  v2 = FIK::defaultAllocator((FIK *)a1);
  FIK::IKRig::IKRig((FIK::IKRig *)a1, (FIK::Allocator *)v2);
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = v2;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = v2;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = v2;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = v2;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = v2;
  *(_DWORD *)(a1 + 48) = 2;
}

uint64_t *std::__variant_detail::__assignment<std::__variant_detail::__traits<FIK::GameRig,FIK::MoCapRig>>::__assign_alt[abi:nn180100]<1ul,FIK::MoCapRig,FIK::MoCapRig const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  IKString *v5;
  char *v6;
  __int128 v7;
  __int128 v8;
  int v9;
  int v10;
  uint64_t *result;

  if (*(_DWORD *)(a1 + 336) != 1)
    return (uint64_t *)std::__variant_detail::__assignment<std::__variant_detail::__traits<FIK::GameRig,FIK::MoCapRig>>::__emplace[abi:nn180100]<1ul,FIK::MoCapRig const&>(a1, a3);
  v5 = *(IKString **)(a3 + 8);
  if (v5)
    v6 = *(char **)a3;
  else
    v6 = (char *)&unk_2108059BE;
  IKString::assign((_QWORD *)a2, v6, v5);
  v7 = *(_OWORD *)(a3 + 24);
  *(_OWORD *)(a2 + 36) = *(_OWORD *)(a3 + 36);
  *(_OWORD *)(a2 + 24) = v7;
  v8 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(a2 + 80) = v8;
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a3 + 96);
  v9 = *(_DWORD *)(a3 + 120);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(a3 + 112);
  *(_DWORD *)(a2 + 120) = v9;
  v10 = *(_DWORD *)(a3 + 128);
  *(_DWORD *)(a2 + 131) = *(_DWORD *)(a3 + 131);
  *(_DWORD *)(a2 + 128) = v10;
  *(_OWORD *)(a2 + 144) = *(_OWORD *)(a3 + 144);
  *(_OWORD *)(a2 + 160) = *(_OWORD *)(a3 + 160);
  FIK::IKArray<FIK::MoCapTask>::operator=((uint64_t *)(a2 + 176), (uint64_t *)(a3 + 176));
  FIK::IKArray<FIK::MoCapBone>::operator=((uint64_t *)(a2 + 208), (uint64_t *)(a3 + 208));
  result = FIK::IKArray<FIK::RigBoneBase>::operator=((uint64_t *)(a2 + 240), (uint64_t *)(a3 + 240));
  *(_OWORD *)(a2 + 272) = *(_OWORD *)(a3 + 272);
  *(_OWORD *)(a2 + 288) = *(_OWORD *)(a3 + 288);
  *(_QWORD *)(a2 + 304) = *(_QWORD *)(a3 + 304);
  return result;
}

uint64_t *FIK::IKArray<FIK::MoCapTask>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  int v22;
  uint64_t v23;
  uint64_t v24;

  if (*a2 >= (unint64_t)a1[1])
  {
    v13 = a2[1];
    v14 = a1[3];
    if (v13)
    {
      v15 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(a1[3], v13 << 8, 16);
      v16 = v15;
      if (v13 << 8)
        bzero(v15, v13 << 8);
    }
    else
    {
      v16 = 0;
    }
    v17 = *a2;
    if (*a2)
    {
      v18 = 0;
      v19 = a2[2];
      do
      {
        v20 = &v16[v18];
        IKString::IKString((IKString *)&v16[v18], (const IKString *)(v19 + v18));
        IKString::IKString((IKString *)&v16[v18 + 24], (const IKString *)(v19 + v18 + 24));
        v21 = *(_OWORD *)(v19 + v18 + 48);
        *((_QWORD *)v20 + 8) = *(_QWORD *)(v19 + v18 + 64);
        *((_OWORD *)v20 + 3) = v21;
        *((_OWORD *)v20 + 5) = *(_OWORD *)(v19 + v18 + 80);
        *((_OWORD *)v20 + 6) = *(_OWORD *)(v19 + v18 + 96);
        *((_OWORD *)v20 + 7) = *(_OWORD *)(v19 + v18 + 112);
        *((_OWORD *)v20 + 8) = *(_OWORD *)(v19 + v18 + 128);
        *((_OWORD *)v20 + 9) = *(_OWORD *)(v19 + v18 + 144);
        *((_OWORD *)v20 + 10) = *(_OWORD *)(v19 + v18 + 160);
        IKString::IKString((IKString *)&v16[v18 + 176], (const IKString *)(v19 + v18 + 176));
        v22 = *(_DWORD *)(v19 + v18 + 200);
        *((_WORD *)v20 + 102) = *(_WORD *)(v19 + v18 + 204);
        *((_DWORD *)v20 + 50) = v22;
        *((_OWORD *)v20 + 13) = *(_OWORD *)(v19 + v18 + 208);
        *((_OWORD *)v20 + 14) = *(_OWORD *)(v19 + v18 + 224);
        *((_OWORD *)v20 + 15) = *(_OWORD *)(v19 + v18 + 240);
        v18 += 256;
        --v17;
      }
      while (v17);
    }
    v24 = a1[2];
    v23 = a1[3];
    a1[1] = v13;
    a1[2] = (uint64_t)v16;
    a1[3] = v14;
    if (v24)
      (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v23 + 24))(v23, v24, 0, 8);
  }
  else
  {
    v4 = *a1;
    if (*a1)
    {
      v5 = a1[2];
      do
      {
        std::__destroy_at[abi:nn180100]<FIK::MoCapTask,0>(v5);
        v5 += 256;
        --v4;
      }
      while (v4);
    }
    *a1 = 0;
    v6 = *a2;
    if (*a2)
    {
      v7 = 0;
      v8 = a1[2];
      v9 = a2[2];
      do
      {
        v10 = v8 + v7;
        IKString::IKString((IKString *)(v8 + v7), (const IKString *)(v9 + v7));
        IKString::IKString((IKString *)(v8 + v7 + 24), (const IKString *)(v9 + v7 + 24));
        v11 = *(_OWORD *)(v9 + v7 + 48);
        *(_QWORD *)(v10 + 64) = *(_QWORD *)(v9 + v7 + 64);
        *(_OWORD *)(v10 + 48) = v11;
        *(_OWORD *)(v10 + 80) = *(_OWORD *)(v9 + v7 + 80);
        *(_OWORD *)(v10 + 96) = *(_OWORD *)(v9 + v7 + 96);
        *(_OWORD *)(v10 + 112) = *(_OWORD *)(v9 + v7 + 112);
        *(_OWORD *)(v10 + 128) = *(_OWORD *)(v9 + v7 + 128);
        *(_OWORD *)(v10 + 144) = *(_OWORD *)(v9 + v7 + 144);
        *(_OWORD *)(v10 + 160) = *(_OWORD *)(v9 + v7 + 160);
        IKString::IKString((IKString *)(v8 + v7 + 176), (const IKString *)(v9 + v7 + 176));
        v12 = *(_DWORD *)(v9 + v7 + 200);
        *(_WORD *)(v10 + 204) = *(_WORD *)(v9 + v7 + 204);
        *(_DWORD *)(v10 + 200) = v12;
        *(_OWORD *)(v10 + 208) = *(_OWORD *)(v9 + v7 + 208);
        *(_OWORD *)(v10 + 224) = *(_OWORD *)(v9 + v7 + 224);
        *(_OWORD *)(v10 + 240) = *(_OWORD *)(v9 + v7 + 240);
        v7 += 256;
        --v6;
      }
      while (v6);
    }
  }
  *a1 = *a2;
  return a1;
}

uint64_t *FIK::IKArray<FIK::RigBoneBase>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;

  if (*a2 >= (unint64_t)a1[1])
  {
    v9 = a2[1];
    v10 = a1[3];
    if (v9)
    {
      v11 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(a1[3], 96 * v9, 16);
      v12 = v11;
      if (96 * v9)
        bzero(v11, 96 * v9);
    }
    else
    {
      v12 = 0;
    }
    v13 = *a2;
    if (*a2)
    {
      v14 = v12 + 32;
      v15 = (_OWORD *)(a2[2] + 32);
      do
      {
        *((_QWORD *)v14 - 4) = *((_QWORD *)v15 - 4);
        IKString::IKString((IKString *)((char *)v14 - 24), (const IKString *)((char *)v15 - 24));
        IKString::IKString((IKString *)v14, (const IKString *)v15);
        v14[2] = v15[2];
        v14[3] = v15[3];
        v14 += 6;
        v15 += 6;
        --v13;
      }
      while (v13);
    }
    v17 = a1[2];
    v16 = a1[3];
    a1[1] = v9;
    a1[2] = (uint64_t)v12;
    a1[3] = v10;
    if (v17)
      (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v16 + 24))(v16, v17, 0, 8);
  }
  else
  {
    v4 = *a1;
    if (*a1)
    {
      v5 = a1[2];
      do
      {
        std::__destroy_at[abi:nn180100]<FIK::RigBoneBase,0>(v5);
        v5 += 96;
        --v4;
      }
      while (v4);
    }
    *a1 = 0;
    v6 = *a2;
    if (*a2)
    {
      v7 = (_OWORD *)(a1[2] + 32);
      v8 = (_OWORD *)(a2[2] + 32);
      do
      {
        *((_QWORD *)v7 - 4) = *((_QWORD *)v8 - 4);
        IKString::IKString((IKString *)((char *)v7 - 24), (const IKString *)((char *)v8 - 24));
        IKString::IKString((IKString *)v7, (const IKString *)v8);
        v7[2] = v8[2];
        v7[3] = v8[3];
        v7 += 6;
        v8 += 6;
        --v6;
      }
      while (v6);
    }
  }
  *a1 = *a2;
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<FIK::GameRig,FIK::MoCapRig>>::__emplace[abi:nn180100]<1ul,FIK::MoCapRig const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  char v6;

  v4 = *(unsigned int *)(a1 + 336);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_24CA6CB90[v4])(&v6, a1);
  *(_DWORD *)(a1 + 336) = -1;
  result = std::__variant_detail::__alt<1ul,FIK::MoCapRig>::__alt[abi:nn180100]<FIK::MoCapRig const&>(a1, a2);
  *(_DWORD *)(a1 + 336) = 1;
  return result;
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN3FIK7GameRigENS8_8MoCapRigEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *result;

  v3 = a2 + 240;
  FIK::IKArray<FIK::AimSetup>::~IKArray((uint64_t *)(a2 + 304));
  *(_QWORD *)(a2 + 272) = 0;
  v4 = *(_QWORD *)(a2 + 288);
  if (v4)
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)(a2 + 296) + 24))(*(_QWORD *)(a2 + 296), v4, 0, 8);
  FIK::IKArray<IKString>::~IKArray(v3);
  FIK::IKArray<FIK::RigBone>::~IKArray((uint64_t *)(a2 + 208));
  result = FIK::IKArray<FIK::GameTask>::~IKArray((uint64_t *)(a2 + 176));
  if (*(_QWORD *)(a2 + 8))
  {
    result = (uint64_t *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(a2 + 16) + 24))(*(_QWORD *)(a2 + 16), *(_QWORD *)a2, 0, 8);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  return result;
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN3FIK7GameRigENS8_8MoCapRigEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t *result;

  FIK::IKArray<FIK::RigBoneBase>::~IKArray((uint64_t *)(a2 + 240));
  FIK::IKArray<FIK::MoCapBone>::~IKArray((uint64_t *)(a2 + 208));
  result = FIK::IKArray<FIK::MoCapTask>::~IKArray((uint64_t *)(a2 + 176));
  if (*(_QWORD *)(a2 + 8))
  {
    result = (uint64_t *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(a2 + 16) + 24))(*(_QWORD *)(a2 + 16), *(_QWORD *)a2, 0, 8);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  return result;
}

uint64_t std::__variant_detail::__alt<1ul,FIK::MoCapRig>::__alt[abi:nn180100]<FIK::MoCapRig const&>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  int v7;
  int v8;

  IKString::IKString((IKString *)a1, (const IKString *)a2);
  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(v5 + 36) = *(_OWORD *)(a2 + 36);
  *(_OWORD *)(v5 + 24) = v4;
  v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v5 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v5 + 80) = v6;
  *(_OWORD *)(v5 + 96) = *(_OWORD *)(a2 + 96);
  v7 = *(_DWORD *)(a2 + 120);
  *(_QWORD *)(v5 + 112) = *(_QWORD *)(a2 + 112);
  *(_DWORD *)(v5 + 120) = v7;
  v8 = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(v5 + 131) = *(_DWORD *)(a2 + 131);
  *(_DWORD *)(v5 + 128) = v8;
  *(_OWORD *)(v5 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(v5 + 160) = *(_OWORD *)(a2 + 160);
  FIK::IKArray<FIK::MoCapTask>::IKArray((_QWORD *)(v5 + 176), (_QWORD *)(a2 + 176));
  FIK::IKArray<FIK::MoCapBone>::IKArray((_QWORD *)(a1 + 208), (_QWORD *)(a2 + 208));
  FIK::IKArray<FIK::RigBoneBase>::IKArray((_QWORD *)(a1 + 240), (_QWORD *)(a2 + 240));
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  return a1;
}

uint64_t std::__optional_destruct_base<FIK::MoCapRig,false>::~__optional_destruct_base[abi:nn180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 320))
  {
    FIK::IKArray<FIK::RigBoneBase>::~IKArray((uint64_t *)(a1 + 240));
    FIK::IKArray<FIK::MoCapBone>::~IKArray((uint64_t *)(a1 + 208));
    FIK::IKArray<FIK::MoCapTask>::~IKArray((uint64_t *)(a1 + 176));
    if (*(_QWORD *)(a1 + 8))
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16), *(_QWORD *)a1, 0, 8);
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
  }
  return a1;
}

void *std::__throw_bad_variant_access[abi:nn180100]()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;

  std::__libcpp_verbose_abort("bad_variant_access was thrown in -fno-exceptions mode");
}

void *`anonymous namespace'::getJointName(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t *v10;
  uint64_t v11;

  v6 = *(_QWORD *)(a1 + 56);
  v4 = a1 + 56;
  v5 = v6;
  if (!v6)
    return &unk_2108059BE;
  v7 = v4;
  do
  {
    v8 = *(_DWORD *)(v5 + 32);
    v9 = v8 < a4;
    if (v8 >= a4)
      v10 = (uint64_t *)v5;
    else
      v10 = (uint64_t *)(v5 + 8);
    if (!v9)
      v7 = v5;
    v5 = *v10;
  }
  while (*v10);
  if (v7 == v4)
    return &unk_2108059BE;
  if (*(_DWORD *)(v7 + 32) > a4)
    return &unk_2108059BE;
  v11 = *(_QWORD *)(v7 + 40);
  if (v11 == -1)
    return &unk_2108059BE;
  else
    return *(void **)(a2 + 48 * v11);
}

FIK *`anonymous namespace'::getChildToParentChain@<X0>(_anonymous_namespace_ *this@<X0>, const FIK::Hierarchy *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  FIK *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  FIK *result;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v8 = (FIK *)FIK::Hierarchy::parentIndexOf(this, (uint64_t)a2);
  if (v9)
  {
    v10 = (uint64_t)v8;
    v16 = 0;
    v17 = 0;
    *(_QWORD *)&v18 = 0;
    *((_QWORD *)&v18 + 1) = FIK::defaultAllocator(v8);
    v11 = 1;
    result = (FIK *)FIK::IKArray<FIK::Segment *>::reserve(&v16, 1uLL);
    *(_QWORD *)(v18 + 8 * v16++) = a2;
    do
    {
      if (!v11)
      {
        v15 = std::__throw_bad_optional_access[abi:nn180100]();
        return (FIK *)std::map<int,FIK::IKArray<unsigned long>>::insert[abi:nn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<int,FIK::IKArray<unsigned long>>,std::__tree_node<std::__value_type<int,FIK::IKArray<unsigned long>>,void *> *,long>>>(v15);
      }
      if (v10 == a3)
      {
        v14 = v17;
        *(_QWORD *)a4 = v16;
        *(_QWORD *)(a4 + 8) = v14;
        *(_OWORD *)(a4 + 16) = v18;
        return result;
      }
      FIK::IKArray<FIK::Segment *>::reserve(&v16, v16 + 1);
      *(_QWORD *)(v18 + 8 * v16++) = v10;
      result = (FIK *)FIK::Hierarchy::parentIndexOf(this, v10);
      v10 = (uint64_t)result;
      v11 = v13;
    }
    while (v13);
    result = (FIK *)FIK::defaultAllocator(result);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)(a4 + 24) = result;
    v16 = 0;
    if ((_QWORD)v18)
      return (FIK *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**((_QWORD **)&v18 + 1) + 24))(*((_QWORD *)&v18 + 1), v18, 0, 8);
  }
  else
  {
    result = (FIK *)FIK::defaultAllocator(v8);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)(a4 + 24) = result;
  }
  return result;
}

_DWORD *std::map<int,FIK::IKArray<unsigned long>>::insert[abi:nn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<int,FIK::IKArray<unsigned long>>,std::__tree_node<std::__value_type<int,FIK::IKArray<unsigned long>>,void *> *,long>>>(_DWORD *result, int *a2, int *a3)
{
  int *v4;
  uint64_t **v5;
  uint64_t *v6;
  int *v7;
  int *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = (uint64_t *)(result + 2);
    do
    {
      result = std::__tree<std::__value_type<int,FIK::IKArray<unsigned long>>,std::__map_value_compare<int,std::__value_type<int,FIK::IKArray<unsigned long>>,std::less<int>,true>,std::allocator<std::__value_type<int,FIK::IKArray<unsigned long>>>>::__emplace_hint_unique_key_args<int,std::pair<int const,FIK::IKArray<unsigned long>> const&>(v5, v6, v4 + 8, (uint64_t)(v4 + 8));
      v7 = (int *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (int *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

_DWORD *std::__tree<std::__value_type<int,FIK::IKArray<unsigned long>>,std::__map_value_compare<int,std::__value_type<int,FIK::IKArray<unsigned long>>,std::less<int>,true>,std::allocator<std::__value_type<int,FIK::IKArray<unsigned long>>>>::__emplace_hint_unique_key_args<int,std::pair<int const,FIK::IKArray<unsigned long>> const&>(uint64_t **a1, uint64_t *a2, int *a3, uint64_t a4)
{
  uint64_t *v6;
  _DWORD *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v6 = std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::__find_equal<int>(a1, a2, &v11, &v10, a3);
  v7 = (_DWORD *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x48uLL);
    v7[8] = *(_DWORD *)a4;
    FIK::IKArray<FIK::Task *>::IKArray((_QWORD *)v7 + 5, (_QWORD *)(a4 + 8));
    std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__insert_node_at(a1, (uint64_t)v11, v8, (uint64_t *)v7);
  }
  return v7;
}

void FIK::IKArray<FIK::JointDefinition>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a1[1] < a2)
  {
    v3 = a1[3];
    v4 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v4)
    {
      v5 = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v3 + 16))(a1[3], 80 * v4, 16);
      v6 = (uint64_t)v5;
      if (80 * v4)
        bzero(v5, 80 * v4);
    }
    else
    {
      v6 = 0;
    }
    v7 = FIK::IKArray<FIK::JointDefinition>::moveRange(a1[2], *a1, v6);
    v8 = a1[2];
    v9 = a1[3];
    a1[1] = v4;
    a1[2] = v6;
    a1[3] = v3;
    v10 = *a1;
    if (*a1)
    {
      v11 = v8;
      do
      {
        std::__destroy_at[abi:nn180100]<FIK::GameTask,0>(v11);
        v11 += 80;
        --v10;
      }
      while (v10);
    }
    if (v8)
      (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, __n128))(*(_QWORD *)v9 + 24))(v9, v8, 0, 8, v7);
  }
}

__n128 FIK::IKArray<FIK::JointDefinition>::push_back(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  __n128 result;

  FIK::IKArray<FIK::JointDefinition>::reserve(a1, *a1 + 1);
  v4 = a1[2] + 80 * *a1;
  IKString::IKString((IKString *)v4, (const IKString *)a2);
  IKString::IKString((IKString *)(v4 + 24), (const IKString *)(a2 + 24));
  *(_OWORD *)(v4 + 48) = *(_OWORD *)(a2 + 48);
  result = *(__n128 *)(a2 + 64);
  *(__n128 *)(v4 + 64) = result;
  ++*a1;
  return result;
}

__n128 FIK::IKArray<FIK::JointDefinition>::moveRange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  __n128 result;

  if (a2)
  {
    v4 = a2;
    v6 = 0;
    do
    {
      v7 = a3 + v6;
      IKString::IKString((uint64_t *)(a3 + v6), (uint64_t *)(a1 + v6), *(_QWORD *)(a1 + v6 + 16));
      IKString::IKString((uint64_t *)(a3 + v6 + 24), (uint64_t *)(a1 + v6 + 24), *(_QWORD *)(a1 + v6 + 40));
      *(_OWORD *)(v7 + 48) = *(_OWORD *)(a1 + v6 + 48);
      result = *(__n128 *)(a1 + v6 + 64);
      *(__n128 *)(v7 + 64) = result;
      v6 += 80;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t *FIK::IKArray<FIK::JointDefinition>::~IKArray(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[2];
    do
    {
      std::__destroy_at[abi:nn180100]<FIK::GameTask,0>(v3);
      v3 += 80;
      --v2;
    }
    while (v2);
  }
  *a1 = 0;
  v4 = a1[2];
  if (v4)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1[3] + 24))(a1[3], v4, 0, 8);
  return a1;
}

uint64_t CoreIKFootPlacementSolverCreate(FIK *a1)
{
  NSObject *v1;
  uint64_t result;
  void (***v4)(FIK::CrtAllocator *__hidden);

  if (*((_DWORD *)a1 + 88))
  {
    v1 = ikinemaLogObject()[2];
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
      CoreIKFootPlacementSolverCreate_cold_1(v1);
    return 0;
  }
  else
  {
    v4 = FIK::defaultAllocator(a1);
    result = ((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, uint64_t))(*v4)[2])(v4, 688, 16);
    if (result)
      return FIK::FootPlacement::FootPlacement(result, (char *)a1 + 16);
  }
  return result;
}

void (***CoreIKFootPlacementSolverDestroy(FIK *a1))(FIK::CrtAllocator *__hidden this)
{
  void (***result)(FIK::CrtAllocator *__hidden);
  void (***v3)(FIK::CrtAllocator *__hidden);

  result = FIK::defaultAllocator(a1);
  if (a1)
  {
    v3 = result;
    FIK::GenericSolver::~GenericSolver(a1);
    return (void (***)(FIK::CrtAllocator *__hidden))((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), FIK *, _QWORD, uint64_t))(*v3)[3])(v3, a1, 0, 8);
  }
  return result;
}

uint64_t CoreIKFootPlacementSolverGetConstraintCount(FIK::GenericSolver *a1)
{
  return (int)FIK::GenericSolver::GetNumTasks(a1);
}

float *CoreIKFootPlacementSolverSetBodyControllerParameters(uint64_t a1, float a2)
{
  return FIK::HipMultiplierParams::SetMaxHipMultiplier((float *)(a1 + 544), a2);
}

uint64_t CoreIKFootPlacementConstraintIsRayTracing(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 276);
}

double CoreIKFootPlacementConstraintSetRayTraceParameters(uint64_t a1, __n128 a2, __n128 a3)
{
  double result;
  __n128 v4;
  __n128 v5;

  a2.n128_u32[3] = 0;
  a3.n128_u32[3] = 0;
  v4 = a3;
  v5 = a2;
  *(_QWORD *)&result = FIK::RTGameTask::SetImpactPointAndNormal(a1, &v5, &v4).n128_u64[0];
  return result;
}

uint64_t CoreIKJointGetName(CoreIKConstraint *a1)
{
  uint64_t v1;

  v1 = CoreIKConstraint::interface(a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 936))(v1);
}

double CoreIKJointGetRestTransform(CoreIKConstraint *a1)
{
  uint64_t v1;
  __int128 v3;

  v1 = CoreIKConstraint::interface(a1);
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v1 + 864))(&v3);
  return *(double *)&v3;
}

uint64_t CoreIKJointSetRestTransform(CoreIKConstraint *a1, __n128 a2, __n128 a3)
{
  uint64_t v3;
  __n128 v4;
  _OWORD v8[2];

  v3 = CoreIKConstraint::interface(a1);
  v4 = a2;
  v4.n128_u32[3] = 0;
  v8[0] = v4;
  v8[1] = a3;
  return (*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)v3 + 440))(v3, v8);
}

__n128 CoreIKJointGetFkTarget(CoreIKConstraint *a1)
{
  uint64_t v1;

  v1 = CoreIKConstraint::interface(a1);
  return *(__n128 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 216))(v1);
}

uint64_t CoreIKJointSetFkTarget(CoreIKConstraint *a1, __n128 a2)
{
  uint64_t v2;
  __n128 v5;

  v2 = CoreIKConstraint::interface(a1);
  v5 = a2;
  return (*(uint64_t (**)(uint64_t, __n128 *))(*(_QWORD *)v2 + 200))(v2, &v5);
}

void *CoreIKJointGetParentName(CoreIKConstraint *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = CoreIKConstraint::interface(a1);
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 392))(v1);
  if (v2)
    return (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 936))(v2);
  else
    return &unk_2108059BE;
}

uint64_t CoreIKJointGetEnabled(CoreIKConstraint *a1)
{
  uint64_t v1;

  v1 = CoreIKConstraint::interface(a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 896))(v1);
}

uint64_t CoreIKJointSetEnabled(CoreIKConstraint *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = CoreIKConstraint::interface(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3 + 176))(v3, a2, 1);
}

uint64_t CoreIKJointGetDoFEnabled(CoreIKConstraint *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = CoreIKConstraint::interface(a1);
  v2 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v1 + 912))(v1, 0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 912))(v1, 1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 912))(v1, 2);
  return v2;
}

uint64_t CoreIKJointSetDoFEnabled(CoreIKConstraint *a1, int a2)
{
  char v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  int32x2_t v6;

  v2 = a2;
  v3 = BYTE1(a2);
  v4 = BYTE2(a2);
  v5 = CoreIKConstraint::interface(a1);
  v6 = vtst_s32((int32x2_t)__PAIR64__(v3, v4), (int32x2_t)0xFF000000FFLL);
  return (*(uint64_t (**)(uint64_t, BOOL, _QWORD, _QWORD))(*(_QWORD *)v5 + 136))(v5, v2 != 0, v6.i8[4] & 1, v6.i8[0] & 1);
}

float CoreIKJointGetEnableRetargeting(CoreIKConstraint *a1)
{
  uint64_t v1;

  v1 = CoreIKConstraint::interface(a1);
  return (float)(*(unsigned int (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
}

uint64_t CoreIKJointSetEnableRetargeting(CoreIKConstraint *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = CoreIKConstraint::interface(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3 + 16))(v3, a2, 1);
}

uint64_t CoreIKJointGetRetargetingGain(CoreIKConstraint *a1)
{
  uint64_t v1;

  v1 = CoreIKConstraint::interface(a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 736))(v1);
}

uint64_t CoreIKJointSetRetargetingGain(CoreIKConstraint *a1, float a2)
{
  uint64_t v3;

  v3 = CoreIKConstraint::interface(a1);
  return (*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v3 + 712))(v3, a2);
}

double CoreIKJointGetRetargetingGainDOF(CoreIKConstraint *a1)
{
  uint64_t v1;
  unsigned int v3;
  unsigned int v4;

  v1 = CoreIKConstraint::interface(a1);
  v4 = COERCE_UNSIGNED_INT64((*(double (**)(uint64_t, _QWORD))(*(_QWORD *)v1 + 752))(v1, 0));
  v3 = COERCE_UNSIGNED_INT64((*(double (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 752))(v1, 1));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 752))(v1, 2);
  return COERCE_DOUBLE(__PAIR64__(v3, v4));
}

uint64_t CoreIKJointSetRetargetingGainDOF(CoreIKConstraint *a1, __n128 a2)
{
  uint64_t v2;

  v2 = CoreIKConstraint::interface(a1);
  (*(void (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)v2 + 728))(v2, 0, a2);
  (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)v2 + 728))(v2, 1, a2.n128_f32[1]);
  return (*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)v2 + 728))(v2, 2, a2.n128_f32[2]);
}

uint64_t CoreIKJointGetEnableTargetTranslate()
{
  return 0;
}

uint64_t CoreIKJointGetStretchEnabledDoF(CoreIKConstraint *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = CoreIKConstraint::interface(a1);
  v2 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 928))(v1, 3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 928))(v1, 4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 928))(v1, 5);
  return v2;
}

uint64_t CoreIKSetStretchEnabledDoF(CoreIKConstraint *a1, int a2)
{
  char v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  int32x2_t v6;

  v2 = a2;
  v3 = BYTE1(a2);
  v4 = BYTE2(a2);
  v5 = CoreIKConstraint::interface(a1);
  v6 = vtst_s32((int32x2_t)__PAIR64__(v3, v4), (int32x2_t)0xFF000000FFLL);
  return (*(uint64_t (**)(uint64_t, BOOL, _QWORD, _QWORD))(*(_QWORD *)v5 + 144))(v5, v2 != 0, v6.i8[4] & 1, v6.i8[0] & 1);
}

uint64_t CoreIKJointGetEnableStretchLimits(CoreIKConstraint *a1)
{
  uint64_t v1;

  v1 = CoreIKConstraint::interface(a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 96))(v1);
}

uint64_t CoreIKJointSetEnableStretchLimits(CoreIKConstraint *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = CoreIKConstraint::interface(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 88))(v3, a2);
}

uint64_t CoreIKJointGetStretchErrorGain(CoreIKConstraint *a1)
{
  uint64_t v1;

  v1 = CoreIKConstraint::interface(a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 768))(v1);
}

uint64_t CoreIKJointSetStretchErrorGain(CoreIKConstraint *a1, float a2)
{
  uint64_t v3;

  v3 = CoreIKConstraint::interface(a1);
  return (*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v3 + 760))(v3, a2);
}

__n64 CoreIKJointGetStretchMin(CoreIKConstraint *a1)
{
  uint64_t v1;
  unsigned __int32 *v2;
  __n64 result;

  v1 = CoreIKConstraint::interface(a1);
  v2 = (unsigned __int32 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 688))(v1);
  result.n64_u32[0] = *v2;
  result.n64_u32[1] = v2[2];
  return result;
}

__n64 CoreIKJointGetStretchMax(CoreIKConstraint *a1)
{
  uint64_t v1;
  uint64_t v2;
  __n64 result;

  v1 = CoreIKConstraint::interface(a1);
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 688))(v1);
  result.n64_u32[0] = *(_DWORD *)(v2 + 4);
  result.n64_u32[1] = *(_DWORD *)(v2 + 12);
  return result;
}

uint64_t CoreIKJointSetStretchMinAndMax(CoreIKConstraint *a1, __n128 a2, __n128 a3)
{
  uint64_t v3;

  v3 = CoreIKConstraint::interface(a1);
  (*(void (**)(uint64_t, uint64_t, __n128, __n128))(*(_QWORD *)v3 + 680))(v3, 3, a2, a3);
  (*(void (**)(uint64_t, uint64_t, float, float))(*(_QWORD *)v3 + 680))(v3, 4, a2.n128_f32[1], a3.n128_f32[1]);
  return (*(uint64_t (**)(uint64_t, uint64_t, float, float))(*(_QWORD *)v3 + 680))(v3, 5, a2.n128_f32[2], a3.n128_f32[2]);
}

double CoreIKJointGetTranslationStiffness(CoreIKConstraint *a1)
{
  uint64_t v1;
  unsigned int v3;
  unsigned int v4;

  v1 = CoreIKConstraint::interface(a1);
  v4 = COERCE_UNSIGNED_INT64((*(double (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 800))(v1, 3));
  v3 = COERCE_UNSIGNED_INT64((*(double (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 800))(v1, 4));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 800))(v1, 5);
  return COERCE_DOUBLE(__PAIR64__(v3, v4));
}

uint64_t CoreIKJointSetTranslationStiffness(CoreIKConstraint *a1, __n128 a2)
{
  uint64_t v2;

  v2 = CoreIKConstraint::interface(a1);
  (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)v2 + 288))(v2, 3, a2);
  (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)v2 + 288))(v2, 4, a2.n128_f32[1]);
  return (*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)v2 + 288))(v2, 5, a2.n128_f32[2]);
}

uint64_t CoreIKJointGetEnableLimits(CoreIKConstraint *a1)
{
  uint64_t v1;

  v1 = CoreIKConstraint::interface(a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 56))(v1);
}

uint64_t CoreIKJointSetEnableLimits(CoreIKConstraint *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = CoreIKConstraint::interface(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 48))(v3, a2);
}

uint64_t CoreIKJointGetEnforceLimits(CoreIKConstraint *a1)
{
  uint64_t v1;

  v1 = CoreIKConstraint::interface(a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 72))(v1);
}

uint64_t CoreIKJointSetEnforceLimits(CoreIKConstraint *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = CoreIKConstraint::interface(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(v3, a2);
}

uint64_t CoreIKJointGetLimitsGain(CoreIKConstraint *a1)
{
  uint64_t v1;

  v1 = CoreIKConstraint::interface(a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 704))(v1);
}

uint64_t CoreIKJointSetLimitsGain(CoreIKConstraint *a1, float a2)
{
  uint64_t v3;

  v3 = CoreIKConstraint::interface(a1);
  return (*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v3 + 696))(v3, a2);
}

uint64_t CoreIKJointSetLimits(CoreIKConstraint *a1, char a2, uint64_t a3, int8x16_t a4, int8x16_t a5)
{
  uint64_t v7;
  float *v8;
  _BYTE v12[32];
  float32x2x2_t v13;

  v7 = CoreIKConstraint::interface(a1);
  v8 = (float *)v12;
  v13.val[0] = (float32x2_t)a4.i64[0];
  v13.val[1] = (float32x2_t)a5.i64[0];
  vst2_f32(v8, v13);
  v8 += 4;
  *(int32x2_t *)v8 = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(a4, a4, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(a5, a5, 8uLL));
  v12[24] = a2;
  return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)v7 + 624))(v7, v12, a3);
}

float CoreIKJointGetLimits(CoreIKConstraint *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  float result;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;

  v7 = CoreIKConstraint::interface(a1);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 616))(v7);
  result = *(float *)v8;
  v10 = *(_DWORD *)(v8 + 4);
  v11 = *(_DWORD *)(v8 + 8);
  v12 = *(_DWORD *)(v8 + 12);
  v13 = *(_DWORD *)(v8 + 16);
  v14 = *(_DWORD *)(v8 + 20);
  v15 = *(char *)(v8 + 24);
  *a3 = *(_DWORD *)v8;
  *a4 = v10;
  a3[1] = v11;
  a4[1] = v12;
  a3[2] = v13;
  a4[2] = v14;
  *a2 = v15;
  return result;
}

uint64_t CoreIKJointSetRotationStiffness(CoreIKConstraint *a1, __n128 a2)
{
  uint64_t v2;

  v2 = CoreIKConstraint::interface(a1);
  (*(void (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)v2 + 280))(v2, 0, a2);
  (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)v2 + 280))(v2, 1, a2.n128_f32[1]);
  return (*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)v2 + 280))(v2, 2, a2.n128_f32[2]);
}

double CoreIKJointGetRotationStiffness(CoreIKConstraint *a1)
{
  uint64_t v1;
  unsigned int v3;
  unsigned int v4;

  v1 = CoreIKConstraint::interface(a1);
  v4 = COERCE_UNSIGNED_INT64((*(double (**)(uint64_t, _QWORD))(*(_QWORD *)v1 + 792))(v1, 0));
  v3 = COERCE_UNSIGNED_INT64((*(double (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 792))(v1, 1));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 792))(v1, 2);
  return COERCE_DOUBLE(__PAIR64__(v3, v4));
}

uint64_t CoreIKJointGetMaxVelocity(CoreIKConstraint *a1)
{
  uint64_t v1;

  v1 = CoreIKConstraint::interface(a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 976))(v1);
}

uint64_t CoreIKJointSetMaxVelocity(CoreIKConstraint *a1, float a2)
{
  uint64_t v3;

  v3 = CoreIKConstraint::interface(a1);
  return (*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v3 + 968))(v3, a2);
}

void ikinema::loadRigFromString(FIK *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void (***v6)(FIK::CrtAllocator *__hidden);
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (***v15)(FIK::CrtAllocator *__hidden);
  void (***v16)(FIK::CrtAllocator *__hidden);
  unsigned int v17;
  _QWORD v18[2];
  uint64_t v19;
  uint64_t v20[4];
  uint64_t v21[4];
  uint64_t v22[6];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25[4];
  _QWORD v26[2];
  uint64_t v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v17 = 0;
  v6 = FIK::defaultAllocator(a1);
  FIK::Serialisation::LoadIKRigFromString(v26, &v17, a1, a2, v6);
  if (v17)
  {
    logRigFromStringError(v17, (_BYTE *)a3);
    goto LABEL_3;
  }
  if (v28 == 2)
  {
    v15 = FIK::defaultAllocator((FIK *)v17);
    FIK::Serialisation::LoadGameRigFromString(v18, &v17, a1, a2, v15);
    if (v17)
    {
      logRigFromStringError(v17, (_BYTE *)a3);
    }
    else
    {
      std::__variant_detail::__alt<0ul,FIK::GameRig>::__alt[abi:nn180100]<FIK::GameRig>((uint64_t *)a3, (uint64_t)v18);
      *(_DWORD *)(a3 + 336) = 0;
      *(_BYTE *)(a3 + 352) = 1;
    }
    FIK::IKArray<FIK::AimSetup>::~IKArray(v25);
    v22[4] = 0;
    if (v23)
      (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v24 + 24))(v24, v23, 0, 8);
    FIK::IKArray<IKString>::~IKArray((uint64_t)v22);
    FIK::IKArray<FIK::RigBone>::~IKArray(v21);
    FIK::IKArray<FIK::GameTask>::~IKArray(v20);
  }
  else
  {
    if (v28 != 1)
    {
      if (v28)
        ikinema::loadRigFromString();
      v7 = ikinemaLogObject()[2];
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        ikinema::loadRigFromString(v7, v8, v9, v10, v11, v12, v13, v14);
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 352) = 0;
      goto LABEL_3;
    }
    v16 = FIK::defaultAllocator((FIK *)v17);
    FIK::Serialisation::LoadMoCapRigFromString(v18, &v17, a1, a2, v16);
    if (v17)
    {
      logRigFromStringError(v17, (_BYTE *)a3);
    }
    else
    {
      std::__variant_detail::__alt<1ul,FIK::MoCapRig>::__alt[abi:nn180100]<FIK::MoCapRig>((uint64_t *)a3, (uint64_t)v18);
      *(_DWORD *)(a3 + 336) = 1;
      *(_BYTE *)(a3 + 352) = 1;
    }
    FIK::IKArray<FIK::RigBoneBase>::~IKArray(v22);
    FIK::IKArray<FIK::MoCapBone>::~IKArray(v21);
    FIK::IKArray<FIK::MoCapTask>::~IKArray(v20);
  }
  if (v18[1])
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v19 + 24))(v19, v18[0], 0, 8);
LABEL_3:
  if (v26[1])
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v27 + 24))(v27, v26[0], 0, 8);
}

void logRigFromStringError(int a1@<W0>, _BYTE *a2@<X8>)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  switch(a1)
  {
    case 1:
      v11 = ikinemaLogObject()[2];
      if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
        logRigFromStringError(v11);
      break;
    case 3:
      v12 = ikinemaLogObject()[2];
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        logRigFromStringError(v12, v13, v14, v15, v16, v17, v18, v19);
      break;
    case 2:
      v3 = ikinemaLogObject()[2];
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
        logRigFromStringError(v3, v4, v5, v6, v7, v8, v9, v10);
      break;
  }
  *a2 = 0;
  a2[352] = 0;
}

void ikinema::loadRigFromFile(const char *a1@<X0>, uint64_t a2@<X8>)
{
  FIK *v4;
  void (***v5)(FIK::CrtAllocator *__hidden);
  FIK *v6;
  void (***v7)(FIK::CrtAllocator *__hidden);
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36[4];
  uint64_t v37[4];
  uint64_t v38[4];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42[6];

  v42[5] = *MEMORY[0x24BDAC8D0];
  v32 = 0;
  v4 = (FIK *)strlen(a1);
  v5 = FIK::defaultAllocator(v4);
  FIK::Serialisation::LoadMoCapRigFromFile(&v33, &v32, a1, v4, v5);
  if (v32)
  {
    FIK::IKArray<FIK::RigBoneBase>::~IKArray(v38);
    FIK::IKArray<FIK::MoCapBone>::~IKArray(v37);
    FIK::IKArray<FIK::MoCapTask>::~IKArray(v36);
    if (v34)
      (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v35 + 24))(v35, v33, 0, 8);
    v6 = (FIK *)strlen(a1);
    v7 = FIK::defaultAllocator(v6);
    FIK::Serialisation::LoadGameRigFile(&v33, &v32, a1, v6, v7);
    if (v32)
    {
      FIK::IKArray<FIK::AimSetup>::~IKArray(v42);
      v39 = 0;
      if (v40)
        (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v41 + 24))(v41, v40, 0, 8);
      FIK::IKArray<IKString>::~IKArray((uint64_t)v38);
      FIK::IKArray<FIK::RigBone>::~IKArray(v37);
      FIK::IKArray<FIK::GameTask>::~IKArray(v36);
      if (v34)
        (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v35 + 24))(v35, v33, 0, 8);
      switch(v32)
      {
        case 0:
          ikinema::loadRigFromFile();
        case 1:
          v8 = ikinemaLogObject()[2];
          if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
            ikinema::loadRigFromFile(v8, v9, v10, v11, v12, v13, v14, v15);
          break;
        case 2:
          v16 = ikinemaLogObject()[2];
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
            ikinema::loadRigFromFile(v16, v17, v18, v19, v20, v21, v22, v23);
          break;
        case 3:
          v24 = ikinemaLogObject()[2];
          if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
            ikinema::loadRigFromFile(v24, v25, v26, v27, v28, v29, v30, v31);
          break;
        default:
          break;
      }
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 352) = 0;
      return;
    }
    std::__variant_detail::__alt<0ul,FIK::GameRig>::__alt[abi:nn180100]<FIK::GameRig>((uint64_t *)a2, (uint64_t)&v33);
    *(_DWORD *)(a2 + 336) = 0;
    *(_BYTE *)(a2 + 352) = 1;
    FIK::IKArray<FIK::AimSetup>::~IKArray(v42);
    v39 = 0;
    if (v40)
      (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v41 + 24))(v41, v40, 0, 8);
    FIK::IKArray<IKString>::~IKArray((uint64_t)v38);
    FIK::IKArray<FIK::RigBone>::~IKArray(v37);
    FIK::IKArray<FIK::GameTask>::~IKArray(v36);
  }
  else
  {
    std::__variant_detail::__alt<1ul,FIK::MoCapRig>::__alt[abi:nn180100]<FIK::MoCapRig>((uint64_t *)a2, (uint64_t)&v33);
    *(_DWORD *)(a2 + 336) = 1;
    *(_BYTE *)(a2 + 352) = 1;
    FIK::IKArray<FIK::RigBoneBase>::~IKArray(v38);
    FIK::IKArray<FIK::MoCapBone>::~IKArray(v37);
    FIK::IKArray<FIK::MoCapTask>::~IKArray(v36);
  }
  if (v34)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v35 + 24))(v35, v33, 0, 8);
}

CoreIKRig *CoreIKRig::createEmpty(FIK *a1, CFErrorRef *a2)
{
  int v3;
  void (***v4)(FIK::CrtAllocator *__hidden);
  FIK *v5;
  unsigned int *v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  void (***v15)(FIK::CrtAllocator *__hidden);
  int v16;
  __int128 v17;
  char v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  int v29;
  int v30;
  __int16 v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  void (***v40)(FIK::CrtAllocator *__hidden);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (***v44)(FIK::CrtAllocator *__hidden);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (***v48)(FIK::CrtAllocator *__hidden);
  uint64_t v49;
  uint64_t v50;
  unsigned __int128 v51;
  uint64_t v52[6];

  v3 = (int)a1;
  v52[5] = *MEMORY[0x24BDAC8D0];
  v4 = FIK::defaultAllocator(a1);
  v5 = (FIK *)FIK::Allocator::create<CoreIKRig>((uint64_t)v4);
  v6 = (unsigned int *)v5;
  if (!v5)
  {
    v12 = ikinemaLogObject();
    v5 = (FIK *)ikinemaAssertHandler(*v12, 0, (uint64_t)"createEmpty", "(result) Out-of-memory is a non-recoverable condition.");
  }
  if (v3 != 1)
  {
    if (v3)
    {
      makeError(1, a2);
      return discardIfInvalid((CoreIKRig *)v6);
    }
    v13 = 0;
    v14 = 0;
    v15 = FIK::defaultAllocator(v5);
    v16 = 1065353216;
    v17 = xmmword_210804140;
    v18 = 1;
    v20 = 0x3727C5AC3E4CCCCDLL;
    v21 = 0x1E3F800000;
    v22 = 0x3F80000040800000;
    v23 = 1;
    v24 = 0;
    v26 = 0;
    v25 = 0;
    v27 = 0x3F80000000000000;
    v28 = 0;
    v29 = 1117782016;
    v30 = 1;
    v31 = 257;
    v32 = 1;
    v33 = xmmword_2108040D0;
    v34 = 0x4000000040000000;
    v37 = 0;
    v36 = 0;
    v35 = 0x40000000;
    v39 = 0;
    v38 = 0;
    v40 = v15;
    v41 = 0;
    v42 = 0;
    v43 = 0;
    v44 = v15;
    v45 = 0;
    v46 = 0;
    v47 = 0;
    v48 = v15;
    v49 = 0;
    v50 = 0;
    v51 = __PAIR128__((unint64_t)v15, 0);
    memset(v52, 0, 24);
    v52[3] = (uint64_t)v15;
    v19 = 2;
    std::__variant_detail::__assignment<std::__variant_detail::__traits<FIK::GameRig,FIK::MoCapRig>>::__assign_alt[abi:nn180100]<0ul,FIK::GameRig,FIK::GameRig&>(v6 + 4, (uint64_t)(v6 + 4), (uint64_t)&v13);
    v7 = v6[88];
    if (v7 == 1)
    {
      v8 = 3;
    }
    else
    {
      if (v7)
      {
LABEL_14:
        FIK::IKArray<FIK::AimSetup>::~IKArray(v52);
        v49 = 0;
        if ((_QWORD)v51)
          (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**((_QWORD **)&v51 + 1) + 24))(*((_QWORD *)&v51 + 1), v51, 0, 8);
        FIK::IKArray<IKString>::~IKArray((uint64_t)&v45);
        FIK::IKArray<FIK::RigBone>::~IKArray(&v41);
        FIK::IKArray<FIK::GameTask>::~IKArray((uint64_t *)((char *)&v36 + 4));
        goto LABEL_20;
      }
      v8 = 1;
    }
    *v6 = v8;
    goto LABEL_14;
  }
  v13 = 0;
  v14 = 0;
  v15 = FIK::defaultAllocator(v5);
  v16 = 1065353216;
  v17 = xmmword_210804140;
  v18 = 1;
  v20 = 0x3727C5AC3E4CCCCDLL;
  v21 = 0x1E3F800000;
  v22 = 0x3F80000040800000;
  v23 = 1;
  v24 = 0;
  v26 = 0;
  v25 = 0;
  v27 = 0x3F80000000000000;
  v28 = 0;
  v29 = 1117782016;
  v30 = 1;
  v31 = 257;
  v32 = 1;
  v33 = xmmword_2108040D0;
  v34 = 0x4000000040000000;
  v37 = 0;
  v36 = 0;
  v35 = 0x40000000;
  v39 = 0;
  v38 = 0;
  v40 = v15;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v44 = v15;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v48 = v15;
  v49 = 0;
  v50 = 0;
  v51 = xmmword_210802BA0;
  LOBYTE(v52[0]) = 0;
  HIDWORD(v52[0]) = 1065353216;
  v19 = 1;
  std::__variant_detail::__assignment<std::__variant_detail::__traits<FIK::GameRig,FIK::MoCapRig>>::__assign_alt[abi:nn180100]<1ul,FIK::MoCapRig,FIK::MoCapRig&>((uint64_t)(v6 + 4), (uint64_t)(v6 + 4), (uint64_t)&v13);
  v9 = v6[88];
  if (v9 == 1)
  {
    v10 = 3;
    goto LABEL_18;
  }
  if (!v9)
  {
    v10 = 1;
LABEL_18:
    *v6 = v10;
  }
  FIK::IKArray<FIK::RigBoneBase>::~IKArray(&v45);
  FIK::IKArray<FIK::MoCapBone>::~IKArray(&v41);
  FIK::IKArray<FIK::MoCapTask>::~IKArray((uint64_t *)((char *)&v36 + 4));
LABEL_20:
  if (v14)
    ((void (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v15)[3])(v15, v13, 0, 8);
  return discardIfInvalid((CoreIKRig *)v6);
}

void makeError(CFIndex code, CFErrorRef *a2)
{
  const char *v4;
  const void *v5;
  void *userInfoValues;

  if (!*a2)
  {
    userInfoValues = 0;
    v5 = (const void *)*MEMORY[0x24BDBD378];
    if (code > 502)
    {
      switch(code)
      {
        case 701:
          v4 = "Rig has invalid parenting ";
          break;
        case 702:
          v4 = "Constraint has no target joint";
          break;
        case 703:
          v4 = "Multiple roots present in rig";
          break;
        case 704:
          v4 = "Multiple constraints for target joint";
          break;
        case 705:
          v4 = "No joints in rig";
          break;
        default:
          if (code != 503 && code != 604)
            goto LABEL_28;
          v4 = "Constraint not found";
          break;
      }
    }
    else if (code <= 200)
    {
      switch(code)
      {
        case 1:
          v4 = "Requested solver type not supported";
          break;
        case 101:
          v4 = "Target already has a constraint";
          break;
        case 102:
          v4 = "Constraint already exists";
          break;
        default:
          goto LABEL_28;
      }
    }
    else if (code > 301)
    {
      if (code != 302 && code != 401)
        goto LABEL_28;
      v4 = "Joint not found";
    }
    else if (code == 201)
    {
      v4 = "Joint already exists";
    }
    else
    {
      if (code != 301)
        goto LABEL_28;
      v4 = "Only leaf joints can be removed";
    }
    userInfoValues = (void *)CFStringCreateWithCString(0, v4, 0x8000100u);
LABEL_28:
    *a2 = CFErrorCreateWithUserInfoKeysAndValues(0, CFSTR("CoreIKRigAuthoringErrorDomain"), code, &v5, (const void *const *)&userInfoValues, 1);
    if (userInfoValues)
      CFRelease(userInfoValues);
  }
}

CoreIKRig *discardIfInvalid(CoreIKRig *a1)
{
  CoreIKRig *v1;
  void (***v2)(FIK::CrtAllocator *__hidden);

  v1 = a1;
  if (!*(_DWORD *)a1)
  {
    v2 = FIK::defaultAllocator(a1);
    FIK::Allocator::destroy<CoreIKRig>((uint64_t)v2, (uint64_t)v1);
    return 0;
  }
  return v1;
}

CoreIKRig *CoreIKRig::createFromJson(FIK *a1, uint64_t a2)
{
  void (***v4)(FIK::CrtAllocator *__hidden);
  _DWORD *v5;
  int v6;
  int v7;
  uint64_t *v9;
  char v10;
  _BYTE v11[336];
  int v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v4 = FIK::defaultAllocator(a1);
  v5 = FIK::Allocator::create<CoreIKRig>((uint64_t)v4);
  if (!v5)
  {
    v9 = ikinemaLogObject();
    ikinemaAssertHandler(*v9, 0, (uint64_t)"createFromJson", "(result) Out-of-memory is a non-recoverable condition.");
  }
  ikinema::loadRigFromString(a1, a2, (uint64_t)v11);
  if (v13)
  {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<FIK::GameRig,FIK::MoCapRig>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<FIK::GameRig,FIK::MoCapRig>,(std::__variant_detail::_Trait)1>>((uint64_t)(v5 + 4), (uint64_t)v11);
    v6 = v5[88];
    if (v6 == 1)
    {
      v7 = 3;
    }
    else
    {
      if (v6)
      {
LABEL_9:
        *((_BYTE *)v5 + 368) = 0;
        if (v13 && v12 != -1)
          ((void (*)(char *, _BYTE *))off_24CA6CBA0[v12])(&v10, v11);
        return discardIfInvalid((CoreIKRig *)v5);
      }
      v7 = 1;
    }
    *v5 = v7;
    goto LABEL_9;
  }
  return discardIfInvalid((CoreIKRig *)v5);
}

CoreIKRig *CoreIKRig::createFromFile(FIK *a1)
{
  void (***v2)(FIK::CrtAllocator *__hidden);
  _DWORD *v3;
  int v4;
  int v5;
  uint64_t *v7;
  char v8;
  _BYTE v9[336];
  int v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = FIK::defaultAllocator(a1);
  v3 = FIK::Allocator::create<CoreIKRig>((uint64_t)v2);
  if (!v3)
  {
    v7 = ikinemaLogObject();
    ikinemaAssertHandler(*v7, 0, (uint64_t)"createFromFile", "(result) Out-of-memory is a non-recoverable condition.");
  }
  ikinema::loadRigFromFile((const char *)a1, (uint64_t)v9);
  if (v11)
  {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<FIK::GameRig,FIK::MoCapRig>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<FIK::GameRig,FIK::MoCapRig>,(std::__variant_detail::_Trait)1>>((uint64_t)(v3 + 4), (uint64_t)v9);
    v4 = v3[88];
    if (v4 == 1)
    {
      v5 = 3;
    }
    else
    {
      if (v4)
      {
LABEL_9:
        *((_BYTE *)v3 + 368) = 0;
        if (v11 && v10 != -1)
          ((void (*)(char *, _BYTE *))off_24CA6CBA0[v10])(&v8, v9);
        return discardIfInvalid((CoreIKRig *)v3);
      }
      v5 = 1;
    }
    *v3 = v5;
    goto LABEL_9;
  }
  return discardIfInvalid((CoreIKRig *)v3);
}

uint64_t CoreIKRig::writeAsJsonToFile(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  CoreIKRig *v6;

  v3 = a1 + 16;
  v4 = *(_DWORD *)(a1 + 352);
  if (v4 == 1)
    return FIK::Serialisation::SaveRig(v3, a2, 1);
  if (!v4)
    return FIK::Serialisation::SaveRig(v3, a2, 1);
  v6 = (CoreIKRig *)std::__throw_bad_variant_access[abi:nn180100]();
  return CoreIKRig::getAsJsonBuffer(v6);
}

uint64_t CoreIKRig::getAsJsonBuffer(CoreIKRig *this)
{
  char *v2;

  v2 = (char *)this + 16;
  if (*((_DWORD *)this + 88))
    return allocateAndGetRigAsJsonBuffer<FIK::MoCapRig>((uint64_t)v2);
  else
    return allocateAndGetRigAsJsonBuffer<FIK::GameRig>((uint64_t)v2);
}

uint64_t allocateAndGetRigAsJsonBuffer<FIK::GameRig>(uint64_t a1)
{
  const char *v1;
  CFStringRef v2;
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_DWORD *)(a1 + 336))
  {
    v4 = std::__throw_bad_variant_access[abi:nn180100]();
    return allocateAndGetRigAsJsonBuffer<FIK::MoCapRig>(v4);
  }
  else
  {
    FIK::Serialisation::GetRigJSON(&v5);
    if (v6)
      v1 = v5;
    else
      v1 = (const char *)&unk_2108053E2;
    v2 = CFStringCreateWithCString(0, v1, 0x8000100u);
    if (v6)
      (*(void (**)(uint64_t, const char *, _QWORD, uint64_t))(*(_QWORD *)v7 + 24))(v7, v5, 0, 8);
    return (uint64_t)v2;
  }
}

uint64_t allocateAndGetRigAsJsonBuffer<FIK::MoCapRig>(uint64_t a1)
{
  const char *v1;
  CFStringRef v2;
  CoreIKRig *v4;
  CoreIKRig *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_DWORD *)(a1 + 336) == 1)
  {
    FIK::Serialisation::GetRigJSON(&v6);
    if (v7)
      v1 = v6;
    else
      v1 = (const char *)&unk_2108053E2;
    v2 = CFStringCreateWithCString(0, v1, 0x8000100u);
    if (v7)
      (*(void (**)(uint64_t, const char *, _QWORD, uint64_t))(*(_QWORD *)v8 + 24))(v8, v6, 0, 8);
    return (uint64_t)v2;
  }
  else
  {
    v4 = (CoreIKRig *)std::__throw_bad_variant_access[abi:nn180100]();
    return CoreIKRig::destroy(v4, v5);
  }
}

uint64_t CoreIKRig::destroy(CoreIKRig *this, CoreIKRig *a2)
{
  CoreIKRig *v2;
  void (***v3)(FIK::CrtAllocator *__hidden);
  uint64_t *v5;

  v2 = this;
  if (!this)
  {
    v5 = ikinemaLogObject();
    this = (CoreIKRig *)ikinemaAssertHandler(*v5, 0, (uint64_t)"destroy", "(rig != nullptr) Can't destroy null object.");
  }
  v3 = FIK::defaultAllocator(this);
  return FIK::Allocator::destroy<CoreIKRig>((uint64_t)v3, (uint64_t)v2);
}

uint64_t FIK::Allocator::destroy<CoreIKRig>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  if (a2)
  {
    v3 = result;
    v4 = *(unsigned int *)(a2 + 352);
    if ((_DWORD)v4 != -1)
      ((void (*)(char *, uint64_t))off_24CA6CBA0[v4])(&v5, a2 + 16);
    *(_DWORD *)(a2 + 352) = -1;
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v3 + 24))(v3, a2, 0, 8);
  }
  return result;
}

uint64_t CoreIKRig::sourceJointCount(CoreIKRig *this)
{
  int v1;
  char *v2;

  v1 = *((_DWORD *)this + 88);
  if (v1 == 1)
  {
    v2 = (char *)this + 256;
  }
  else
  {
    if (v1)
      CoreIKRig::sourceJointCount();
    v2 = (char *)this + 224;
  }
  return *(_QWORD *)v2;
}

uint64_t CoreIKRig::targetJointCount(CoreIKRig *this)
{
  if (*((_DWORD *)this + 88) >= 2u)
    CoreIKRig::targetJointCount();
  return *((_QWORD *)this + 28);
}

void *CoreIKRig::sourceJointName(CoreIKRig *this, unint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *((_DWORD *)this + 88);
  if (v2 == 1)
  {
    if (*((_QWORD *)this + 32) <= a2)
    {
      v6 = ikinemaLogObject()[2];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
LABEL_13:
        CoreIKRig::sourceJointName(v6, v7, v8, v9, v10, v11, v12, v13);
    }
    else
    {
      v4 = *((_QWORD *)this + 34);
      if (*(_QWORD *)(v4 + 96 * a2 + 16))
      {
        v3 = v4 + 96 * a2;
        return *(void **)(v3 + 8);
      }
    }
  }
  else
  {
    if (v2)
      CoreIKRig::sourceJointName();
    if (*((_QWORD *)this + 28) > a2)
    {
      v3 = *((_QWORD *)this + 30) + (a2 << 8);
      if (!*(_QWORD *)(v3 + 16))
        return &unk_2108053E2;
      return *(void **)(v3 + 8);
    }
    v6 = ikinemaLogObject()[2];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_13;
  }
  return &unk_2108053E2;
}

void *CoreIKRig::targetJointName(CoreIKRig *this, unint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *((_DWORD *)this + 88);
  if (v2 == 1)
  {
    if (*((_QWORD *)this + 28) <= a2)
    {
      v6 = ikinemaLogObject()[2];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
LABEL_13:
        CoreIKRig::targetJointName(v6, v7, v8, v9, v10, v11, v12, v13);
    }
    else
    {
      v4 = *((_QWORD *)this + 30);
      if (*(_QWORD *)(v4 + 544 * a2 + 16))
      {
        v3 = v4 + 544 * a2;
        return *(void **)(v3 + 8);
      }
    }
  }
  else
  {
    if (v2)
      CoreIKRig::targetJointName();
    if (*((_QWORD *)this + 28) > a2)
    {
      v3 = *((_QWORD *)this + 30) + (a2 << 8);
      if (!*(_QWORD *)(v3 + 16))
        return &unk_2108053E2;
      return *(void **)(v3 + 8);
    }
    v6 = ikinemaLogObject()[2];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_13;
  }
  return &unk_2108053E2;
}

void *CoreIKRig::sourceJointParentName(CoreIKRig *this, unint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *((_DWORD *)this + 88);
  if (v2 == 1)
  {
    if (*((_QWORD *)this + 32) <= a2)
    {
      v6 = ikinemaLogObject()[2];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
LABEL_13:
        CoreIKRig::sourceJointParentName(v6, v7, v8, v9, v10, v11, v12, v13);
    }
    else
    {
      v4 = *((_QWORD *)this + 34);
      if (*(_QWORD *)(v4 + 96 * a2 + 40))
      {
        v3 = v4 + 96 * a2;
        return *(void **)(v3 + 32);
      }
    }
  }
  else
  {
    if (v2)
      CoreIKRig::sourceJointParentName();
    if (*((_QWORD *)this + 28) > a2)
    {
      v3 = *((_QWORD *)this + 30) + (a2 << 8);
      if (!*(_QWORD *)(v3 + 40))
        return &unk_2108053E2;
      return *(void **)(v3 + 32);
    }
    v6 = ikinemaLogObject()[2];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_13;
  }
  return &unk_2108053E2;
}

void *CoreIKRig::targetJointParentName(CoreIKRig *this, unint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *((_DWORD *)this + 88);
  if (v2 == 1)
  {
    if (*((_QWORD *)this + 28) <= a2)
    {
      v6 = ikinemaLogObject()[2];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
LABEL_13:
        CoreIKRig::targetJointParentName(v6, v7, v8, v9, v10, v11, v12, v13);
    }
    else
    {
      v4 = *((_QWORD *)this + 30);
      if (*(_QWORD *)(v4 + 544 * a2 + 40))
      {
        v3 = v4 + 544 * a2;
        return *(void **)(v3 + 32);
      }
    }
  }
  else
  {
    if (v2)
      CoreIKRig::targetJointParentName();
    if (*((_QWORD *)this + 28) > a2)
    {
      v3 = *((_QWORD *)this + 30) + (a2 << 8);
      if (!*(_QWORD *)(v3 + 40))
        return &unk_2108053E2;
      return *(void **)(v3 + 32);
    }
    v6 = ikinemaLogObject()[2];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_13;
  }
  return &unk_2108053E2;
}

uint64_t CoreIKRig::constraintCount(CoreIKRig *this)
{
  if (*((_DWORD *)this + 88) > 1u)
    return -1;
  else
    return *((_QWORD *)this + 24);
}

void *CoreIKRig::constraintName(CoreIKRig *this, uint64_t a2)
{
  int v2;
  _QWORD *v3;

  v2 = *((_DWORD *)this + 88);
  if (v2 == 1)
  {
    v3 = (_QWORD *)(*((_QWORD *)this + 26) + (a2 << 8));
  }
  else
  {
    if (v2)
      return &unk_2108053E2;
    v3 = (_QWORD *)(*((_QWORD *)this + 26) + 240 * a2);
  }
  if (v3[1])
    return (void *)*v3;
  return &unk_2108053E2;
}

float CoreIKRig::getUnitScale(CoreIKRig *this)
{
  float result;

  result = 0.0;
  if (*((_DWORD *)this + 88) <= 1u)
    return *((float *)this + 10);
  return result;
}

uint64_t CoreIKRig::setUnitScale(uint64_t this, float a2)
{
  if (*(_DWORD *)(this + 352) <= 1u)
    *(float *)(this + 40) = a2;
  return this;
}

uint64_t CoreIKRig::getContinuousSolving(CoreIKRig *this)
{
  BOOL v1;
  unsigned int v2;

  v2 = *((_DWORD *)this + 88);
  if (v2 <= 1)
    v1 = *((_BYTE *)this + 60) != 0;
  return (v2 < 2) & v1;
}

uint64_t CoreIKRig::setContinuousSolving(uint64_t this, char a2)
{
  if (*(_DWORD *)(this + 352) <= 1u)
    *(_BYTE *)(this + 60) = a2;
  return this;
}

float CoreIKRig::getPCoefficient(CoreIKRig *this)
{
  float result;

  result = 0.0;
  if (*((_DWORD *)this + 88) <= 1u)
    return *((float *)this + 20);
  return result;
}

uint64_t CoreIKRig::setPCoefficient(uint64_t this, float a2)
{
  if (*(_DWORD *)(this + 352) <= 1u)
    *(float *)(this + 80) = a2;
  return this;
}

float CoreIKRig::getSolutionTolerance(CoreIKRig *this)
{
  float result;

  result = 0.0;
  if (*((_DWORD *)this + 88) <= 1u)
    return *((float *)this + 21);
  return result;
}

uint64_t CoreIKRig::setSolutionTolerance(uint64_t this, float a2)
{
  if (*(_DWORD *)(this + 352) <= 1u)
    *(float *)(this + 84) = a2;
  return this;
}

float CoreIKRig::getRetargetingGain(CoreIKRig *this)
{
  float result;

  result = 0.0;
  if (*((_DWORD *)this + 88) <= 1u)
    return *((float *)this + 22);
  return result;
}

uint64_t CoreIKRig::setRetargetingGain(uint64_t this, float a2)
{
  if (*(_DWORD *)(this + 352) <= 1u)
    *(float *)(this + 88) = a2;
  return this;
}

uint64_t CoreIKRig::getMaxIterations(CoreIKRig *this)
{
  if (*((_DWORD *)this + 88) <= 1u)
    return *((unsigned int *)this + 23);
  else
    return 0;
}

uint64_t CoreIKRig::setMaxIterations(uint64_t this, int a2)
{
  if (*(_DWORD *)(this + 352) <= 1u)
    *(_DWORD *)(this + 92) = a2;
  return this;
}

float CoreIKRig::getTaskPrecision(CoreIKRig *this)
{
  float result;

  result = 0.0;
  if (*((_DWORD *)this + 88) <= 1u)
    return *((float *)this + 24);
  return result;
}

uint64_t CoreIKRig::setTaskPrecision(uint64_t this, float a2)
{
  if (*(_DWORD *)(this + 352) <= 1u)
    *(float *)(this + 96) = a2;
  return this;
}

float CoreIKRig::getLimitsGain(CoreIKRig *this)
{
  float result;

  result = 0.0;
  if (*((_DWORD *)this + 88) <= 1u)
    return *((float *)this + 25);
  return result;
}

uint64_t CoreIKRig::setLimitsGain(uint64_t this, float a2)
{
  if (*(_DWORD *)(this + 352) <= 1u)
    *(float *)(this + 100) = a2;
  return this;
}

uint64_t CoreIKRig::getTranslateRoot(CoreIKRig *this)
{
  BOOL v1;
  unsigned int v2;

  v2 = *((_DWORD *)this + 88);
  if (v2 <= 1)
    v1 = *((_BYTE *)this + 104) != 0;
  return (v2 < 2) & v1;
}

uint64_t CoreIKRig::setTranslateRoot(uint64_t this, char a2)
{
  if (*(_DWORD *)(this + 352) <= 1u)
    *(_BYTE *)(this + 104) = a2;
  return this;
}

uint64_t CoreIKRig::getEnableShadowPosing(CoreIKRig *this)
{
  BOOL v1;
  unsigned int v2;

  v2 = *((_DWORD *)this + 88);
  if (v2 <= 1)
    v1 = *((_BYTE *)this + 105) != 0;
  return (v2 < 2) & v1;
}

uint64_t CoreIKRig::setEnableShadowPosing(uint64_t this, char a2)
{
  if (*(_DWORD *)(this + 352) <= 1u)
    *(_BYTE *)(this + 105) = a2;
  return this;
}

uint64_t CoreIKRig::getCombineErrors(CoreIKRig *this)
{
  BOOL v1;
  unsigned int v2;

  v2 = *((_DWORD *)this + 88);
  if (v2 <= 1)
    v1 = *((_BYTE *)this + 106) != 0;
  return (v2 < 2) & v1;
}

uint64_t CoreIKRig::setCombineErrors(uint64_t this, char a2)
{
  if (*(_DWORD *)(this + 352) <= 1u)
    *(_BYTE *)(this + 106) = a2;
  return this;
}

double CoreIKRig::updateRigSettings(uint64_t a1, uint64_t a2)
{
  double result;

  if (*(_DWORD *)(a1 + 352) <= 1u)
  {
    *(_DWORD *)(a1 + 40) = *(_DWORD *)a2;
    *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 4);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 20);
    result = *(double *)(a2 + 24);
    *(double *)(a1 + 96) = result;
    *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 32);
    *(_WORD *)(a1 + 105) = *(_WORD *)(a2 + 33);
  }
  return result;
}

double CoreIKRig::getRigSettings@<D0>(CoreIKRig *this@<X0>, uint64_t a2@<X8>)
{
  char v2;
  int v3;
  int v4;
  __int16 v5;
  char v6;
  double result;

  if (*((_DWORD *)this + 88) <= 1u)
  {
    v2 = *((_BYTE *)this + 60);
    v3 = *((_DWORD *)this + 22);
    v4 = *((_DWORD *)this + 23);
    v5 = *((_WORD *)this + 52);
    v6 = *((_BYTE *)this + 106);
    *(_DWORD *)a2 = *((_DWORD *)this + 10);
    *(_BYTE *)(a2 + 4) = v2;
    *(_QWORD *)(a2 + 8) = *((_QWORD *)this + 10);
    *(_DWORD *)(a2 + 16) = v3;
    *(_DWORD *)(a2 + 20) = v4;
    result = *((double *)this + 12);
    *(double *)(a2 + 24) = result;
    *(_WORD *)(a2 + 32) = v5;
    *(_BYTE *)(a2 + 34) = v6;
  }
  return result;
}

void CoreIKRig::addConstraintsWithSettings(uint64_t a1, const char **a2, uint64_t a3, CFErrorRef *a4)
{
  uint64_t v5;

  if (a3)
  {
    v5 = a3;
    do
    {
      CoreIKRig::addConstraintWithSettings(a1, a2, a4);
      a2 += 14;
      --v5;
    }
    while (v5);
  }
}

void CoreIKRig::addConstraintWithSettings(uint64_t a1, const char **a2, CFErrorRef *a3)
{
  uint64_t v6;
  int v7;
  char *v8;
  char *v9;
  size_t v10;
  FIK *v11;
  CFIndex v12;
  IKString *v13;
  FIK *v14;
  int v15;
  char *v16;
  size_t v17;
  FIK *v18;
  CFIndex v19;
  void (***v20)(FIK::CrtAllocator *__hidden);
  IKString *v21;
  FIK *v22;
  int v23;
  void (***v24)(FIK::CrtAllocator *__hidden);
  IKString *v25;
  IKString *v26;
  void (***v27)(FIK::CrtAllocator *__hidden);
  IKString *v28;
  IKString *v29;
  uint64_t v30;
  uint64_t v31;
  void (***v32)(FIK::CrtAllocator *__hidden);
  uint64_t v33;
  uint64_t v34;
  void (***v35)(FIK::CrtAllocator *__hidden);
  int v36;
  __int16 v37;
  char v38;
  int v39;
  __int16 v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  int v51;
  _BYTE v52[32];
  int v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;

  v6 = a1 + 16;
  v7 = *(_DWORD *)(a1 + 352);
  if (!v7)
  {
    *(_BYTE *)(a1 + 368) = 1;
    v8 = (char *)*a2;
    v9 = (char *)a2[1];
    v10 = strlen(v9);
    v11 = (FIK *)FIK::IKRigUtils::GetTaskIndexByBoneName<FIK::GameRig>(v9, v10, v6);
    if ((_DWORD)v11 == -1)
    {
      v30 = 0;
      v31 = 0;
      v32 = FIK::defaultAllocator(v11);
      v13 = (IKString *)strlen(v8);
      IKString::assign(&v30, v8, v13);
      v14 = (FIK *)FIK::IKRigUtils::GetTaskIndexByName<FIK::GameRig>((uint64_t)&v30, v6);
      v15 = (int)v14;
      if (v31)
        v14 = (FIK *)((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v32)[3])(v32, v30, 0, 8);
      if (v15 == -1)
      {
        v27 = FIK::defaultAllocator(v14);
        v30 = 0;
        v31 = 0;
        v32 = v27;
        v33 = 0;
        v34 = 0;
        v35 = v27;
        v36 = -1;
        v37 = 257;
        v38 = 0;
        v39 = 16843009;
        v40 = 257;
        v41 = -1;
        v42 = xmmword_210804120;
        v43 = xmmword_210804130;
        v44 = xmmword_2108040E0;
        v45 = 0x4000000040000000;
        v46 = 0x40000000;
        v48 = 0;
        v47 = 0;
        v50 = 0;
        v49 = 0;
        *(_OWORD *)v52 = xmmword_210802BA0;
        v51 = 5;
        v53 = 0;
        *(_OWORD *)&v52[16] = 0uLL;
        v54 = xmmword_210802BA0;
        HIDWORD(v55) = 0;
        *(_QWORD *)&v55 = 0;
        WORD4(v55) = 0;
        v28 = (IKString *)strlen(*a2);
        v29 = (IKString *)strlen(a2[1]);
        copySettingsToConstraint<FIK::GameTask>((uint64_t)a2, (char *)*a2, v28, (char *)a2[1], v29, (uint64_t)&v30);
        FIK::IKArray<FIK::GameTask>::push_back<FIK::GameTask&,void>(a1 + 192, (uint64_t)&v30);
        if (v34)
        {
          ((void (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v35)[3])(v35, v33, 0, 8);
          v33 = 0;
          v34 = 0;
        }
        if (v31)
          ((void (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v32)[3])(v32, v30, 0, 8);
        goto LABEL_9;
      }
      v12 = 102;
    }
    else
    {
      v12 = 101;
    }
    makeError(v12, a3);
LABEL_9:
    v7 = *(_DWORD *)(a1 + 352);
  }
  if (v7 != 1)
    return;
  *(_BYTE *)(a1 + 368) = 1;
  v16 = (char *)*a2;
  v17 = strlen(a2[1]);
  v18 = (FIK *)FIK::IKRigUtils::GetTaskIndexByBoneName<FIK::MoCapRig>((void *)a2[1], v17, v6);
  if ((_DWORD)v18 != -1)
  {
    v19 = 101;
LABEL_17:
    makeError(v19, a3);
    return;
  }
  v20 = FIK::defaultAllocator(v18);
  v30 = 0;
  v31 = 0;
  v32 = v20;
  v21 = (IKString *)strlen(v16);
  IKString::assign(&v30, v16, v21);
  v22 = (FIK *)FIK::IKRigUtils::GetTaskIndexByName<FIK::MoCapRig>((uint64_t)&v30, v6);
  v23 = (int)v22;
  if (v31)
    v22 = (FIK *)((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v32)[3])(v32, v30, 0, 8);
  if (v23 != -1)
  {
    v19 = 102;
    goto LABEL_17;
  }
  v24 = FIK::defaultAllocator(v22);
  v30 = 0;
  v31 = 0;
  v32 = v24;
  v33 = 0;
  v34 = 0;
  v35 = v24;
  v36 = -1;
  v37 = 257;
  v38 = 0;
  v39 = 16843009;
  v40 = 257;
  v41 = -1;
  v42 = xmmword_210804120;
  v43 = xmmword_210804130;
  v44 = xmmword_2108040E0;
  v45 = 0x4000000040000000;
  v46 = 0x40000000;
  v48 = 0;
  v47 = 0;
  v50 = 0;
  v49 = 0;
  v51 = 5;
  memset(v52, 0, 20);
  *(_QWORD *)&v52[20] = v24;
  *(_DWORD *)&v52[28] = -1;
  LOWORD(v53) = 1;
  v54 = 0uLL;
  v55 = xmmword_210802BA0;
  v56 = xmmword_2108040F0;
  v25 = (IKString *)strlen(*a2);
  v26 = (IKString *)strlen(a2[1]);
  copySettingsToConstraint<FIK::GameTask>((uint64_t)a2, (char *)*a2, v25, (char *)a2[1], v26, (uint64_t)&v30);
  FIK::IKArray<FIK::MoCapTask>::push_back<FIK::MoCapTask&,void>(a1 + 192, (uint64_t)&v30);
  if (*(_QWORD *)&v52[12])
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)&v52[20] + 24))(*(_QWORD *)&v52[20], *(_QWORD *)&v52[4], 0, 8);
    *(_QWORD *)&v52[4] = 0;
    *(_QWORD *)&v52[12] = 0;
  }
  if (v34)
  {
    ((void (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v35)[3])(v35, v33, 0, 8);
    v33 = 0;
    v34 = 0;
  }
  if (v31)
    ((void (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v32)[3])(v32, v30, 0, 8);
}

double CoreIKRig::updateConstraintWithSettings(uint64_t a1, char *a2, IKString *a3, uint64_t a4, CFErrorRef *a5)
{
  uint64_t v10;
  int v11;
  int v12;
  char **v13;
  IKString *v14;
  char *v15;
  uint64_t *v16;
  double result;
  IKString *v18;
  char *v19;
  void (***v20)(FIK::CrtAllocator *__hidden);
  int v21;
  char **v22;
  IKString *v23;
  char *v24;
  uint64_t *v25;
  IKString *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void (***v30)(FIK::CrtAllocator *__hidden);

  v10 = a1 + 16;
  v11 = *(_DWORD *)(a1 + 352);
  if (!v11)
  {
    v28 = 0;
    v29 = 0;
    v30 = FIK::defaultAllocator((FIK *)a1);
    IKString::assign(&v28, a2, a3);
    v12 = FIK::IKRigUtils::GetTaskIndexByName<FIK::GameRig>((uint64_t)&v28, v10);
    if (v29)
      ((void (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v30)[3])(v30, v28, 0, 8);
    if (v12 == -1)
    {
      v16 = ikinemaLogObject();
      if (os_log_type_enabled((os_log_t)v16[2], OS_LOG_TYPE_ERROR))
        CoreIKRig::updateConstraintWithSettings();
      makeError(503, a5);
    }
    else
    {
      v13 = (char **)(*(_QWORD *)(a1 + 208) + 240 * v12);
      v14 = (IKString *)v13[1];
      if (v14)
        v15 = *v13;
      else
        v15 = (char *)&unk_2108053E2;
      v18 = (IKString *)v13[4];
      if (v18)
        v19 = v13[3];
      else
        v19 = (char *)&unk_2108053E2;
      *(_QWORD *)&result = copySettingsToConstraint<FIK::GameTask>(a4, v15, v14, v19, v18, (uint64_t)v13).n128_u64[0];
    }
    v11 = *(_DWORD *)(a1 + 352);
  }
  if (v11 == 1)
  {
    v20 = FIK::defaultAllocator((FIK *)a1);
    v28 = 0;
    v29 = 0;
    v30 = v20;
    IKString::assign(&v28, a2, a3);
    v21 = FIK::IKRigUtils::GetTaskIndexByName<FIK::MoCapRig>((uint64_t)&v28, v10);
    if (v29)
      ((void (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v30)[3])(v30, v28, 0, 8);
    if (v21 == -1)
    {
      v25 = ikinemaLogObject();
      if (os_log_type_enabled((os_log_t)v25[2], OS_LOG_TYPE_ERROR))
        CoreIKRig::updateConstraintWithSettings();
      makeError(503, a5);
    }
    else
    {
      v22 = (char **)(*(_QWORD *)(a1 + 208) + ((uint64_t)v21 << 8));
      v23 = (IKString *)v22[1];
      if (v23)
        v24 = *v22;
      else
        v24 = (char *)&unk_2108053E2;
      v26 = (IKString *)v22[4];
      if (v26)
        v27 = v22[3];
      else
        v27 = (char *)&unk_2108053E2;
      *(_QWORD *)&result = copySettingsToConstraint<FIK::GameTask>(a4, v24, v23, v27, v26, (uint64_t)v22).n128_u64[0];
    }
  }
  return result;
}

double CoreIKRig::getRigConstraintSettings@<D0>(uint64_t a1@<X0>, char *a2@<X1>, IKString *a3@<X2>, _OWORD *a4@<X8>)
{
  FIK *v5;
  int v6;
  double result;

  v5 = (FIK *)(a1 + 16);
  v6 = *(_DWORD *)(a1 + 352);
  if (v6 == 1)
  {
    *(_QWORD *)&result = extractConstraintSettingsFromRig<FIK::MoCapRig>(v5, a2, a3, (uint64_t)a4).n128_u64[0];
  }
  else if (v6)
  {
    result = 0.0;
    a4[5] = 0u;
    a4[6] = 0u;
    a4[3] = 0u;
    a4[4] = 0u;
    a4[1] = 0u;
    a4[2] = 0u;
    *a4 = 0u;
  }
  else
  {
    *(_QWORD *)&result = extractConstraintSettingsFromRig<FIK::GameRig>(v5, a2, a3, (uint64_t)a4).n128_u64[0];
  }
  return result;
}

__n128 extractConstraintSettingsFromRig<FIK::GameRig>@<Q0>(FIK *a1@<X0>, char *a2@<X1>, IKString *a3@<X2>, uint64_t a4@<X8>)
{
  int v8;
  int16x8_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  __int128 v13;
  __n128 result;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  void (***v18)(FIK::CrtAllocator *__hidden);

  v16 = 0;
  v17 = 0;
  v18 = FIK::defaultAllocator(a1);
  IKString::assign(&v16, a2, a3);
  v8 = FIK::IKRigUtils::GetTaskIndexByName<FIK::GameRig>((uint64_t)&v16, (uint64_t)a1);
  if (v17)
    ((void (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v18)[3])(v18, v16, 0, 8);
  v10 = *((_QWORD *)a1 + 24) + 240 * v8;
  if (*(_QWORD *)(v10 + 8))
    v11 = *(void **)v10;
  else
    v11 = &unk_2108053E2;
  *(_QWORD *)a4 = v11;
  if (*(_QWORD *)(v10 + 32))
    v12 = *(void **)(v10 + 24);
  else
    v12 = &unk_2108053E2;
  *(_QWORD *)(a4 + 8) = v12;
  *(_WORD *)(a4 + 16) = *(_WORD *)(v10 + 52);
  v9.i8[0] = *(_BYTE *)(v10 + 55);
  v9.i8[4] = *(_BYTE *)(v10 + 56);
  v9.i16[1] = v9.i16[2];
  v9.i16[2] = *(unsigned __int8 *)(v10 + 57);
  *(int8x8_t *)v9.i8 = vmovn_s16(v9);
  *(_BYTE *)(a4 + 22) = *(_BYTE *)(v10 + 57);
  *(_WORD *)(a4 + 20) = v9.i16[0];
  v9.i8[0] = *(_BYTE *)(v10 + 58);
  v9.i8[4] = *(_BYTE *)(v10 + 59);
  v9.i16[1] = v9.i16[2];
  v9.i16[2] = *(unsigned __int8 *)(v10 + 60);
  *(_BYTE *)(a4 + 26) = v9.i8[4];
  *(_WORD *)(a4 + 24) = vmovn_s16(v9).u16[0];
  *(_QWORD *)(a4 + 28) = *(_QWORD *)(v10 + 64);
  v13 = *(_OWORD *)(v10 + 96);
  *(_OWORD *)(a4 + 48) = *(_OWORD *)(v10 + 80);
  *(_OWORD *)(a4 + 64) = v13;
  result = *(__n128 *)(v10 + 112);
  v15 = *(_OWORD *)(v10 + 128);
  *(__n128 *)(a4 + 80) = result;
  *(_OWORD *)(a4 + 96) = v15;
  return result;
}

__n128 extractConstraintSettingsFromRig<FIK::MoCapRig>@<Q0>(FIK *a1@<X0>, char *a2@<X1>, IKString *a3@<X2>, uint64_t a4@<X8>)
{
  int v8;
  int16x8_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  __int128 v13;
  __n128 result;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  void (***v18)(FIK::CrtAllocator *__hidden);

  v16 = 0;
  v17 = 0;
  v18 = FIK::defaultAllocator(a1);
  IKString::assign(&v16, a2, a3);
  v8 = FIK::IKRigUtils::GetTaskIndexByName<FIK::MoCapRig>((uint64_t)&v16, (uint64_t)a1);
  if (v17)
    ((void (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v18)[3])(v18, v16, 0, 8);
  v10 = *((_QWORD *)a1 + 24) + ((uint64_t)v8 << 8);
  if (*(_QWORD *)(v10 + 8))
    v11 = *(void **)v10;
  else
    v11 = &unk_2108053E2;
  *(_QWORD *)a4 = v11;
  if (*(_QWORD *)(v10 + 32))
    v12 = *(void **)(v10 + 24);
  else
    v12 = &unk_2108053E2;
  *(_QWORD *)(a4 + 8) = v12;
  *(_WORD *)(a4 + 16) = *(_WORD *)(v10 + 52);
  v9.i8[0] = *(_BYTE *)(v10 + 55);
  v9.i8[4] = *(_BYTE *)(v10 + 56);
  v9.i16[1] = v9.i16[2];
  v9.i16[2] = *(unsigned __int8 *)(v10 + 57);
  *(int8x8_t *)v9.i8 = vmovn_s16(v9);
  *(_BYTE *)(a4 + 22) = *(_BYTE *)(v10 + 57);
  *(_WORD *)(a4 + 20) = v9.i16[0];
  v9.i8[0] = *(_BYTE *)(v10 + 58);
  v9.i8[4] = *(_BYTE *)(v10 + 59);
  v9.i16[1] = v9.i16[2];
  v9.i16[2] = *(unsigned __int8 *)(v10 + 60);
  *(_BYTE *)(a4 + 26) = v9.i8[4];
  *(_WORD *)(a4 + 24) = vmovn_s16(v9).u16[0];
  *(_QWORD *)(a4 + 28) = *(_QWORD *)(v10 + 64);
  v13 = *(_OWORD *)(v10 + 96);
  *(_OWORD *)(a4 + 48) = *(_OWORD *)(v10 + 80);
  *(_OWORD *)(a4 + 64) = v13;
  result = *(__n128 *)(v10 + 112);
  v15 = *(_OWORD *)(v10 + 128);
  *(__n128 *)(a4 + 80) = result;
  *(_OWORD *)(a4 + 96) = v15;
  return result;
}

BOOL CoreIKRig::getLookAtEnabled(uint64_t a1, char *a2, IKString *a3)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  void (***v11)(FIK::CrtAllocator *__hidden);

  if (*(_DWORD *)(a1 + 352))
    return 0;
  v7 = a1 + 16;
  v9 = 0;
  v10 = 0;
  v11 = FIK::defaultAllocator((FIK *)a1);
  IKString::assign(&v9, a2, a3);
  v8 = FIK::IKRigUtils::GetTaskIndexByName<FIK::GameRig>((uint64_t)&v9, v7);
  if (v10)
    ((void (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v11)[3])(v11, v9, 0, 8);
  return *(_BYTE *)(*(_QWORD *)(a1 + 208) + 240 * v8 + 233) != 0;
}

FIK *CoreIKRig::setLookAtEnabled(FIK *result, char *a2, IKString *a3, char a4)
{
  FIK *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  void (***v12)(FIK::CrtAllocator *__hidden);

  if (!*((_DWORD *)result + 88))
  {
    v7 = result;
    v8 = (uint64_t)result + 16;
    v10 = 0;
    v11 = 0;
    v12 = FIK::defaultAllocator(result);
    IKString::assign(&v10, a2, a3);
    result = (FIK *)FIK::IKRigUtils::GetTaskIndexByName<FIK::GameRig>((uint64_t)&v10, v8);
    v9 = (int)result;
    if (v11)
      result = (FIK *)((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v12)[3])(v12, v10, 0, 8);
    *(_BYTE *)(*((_QWORD *)v7 + 26) + 240 * v9 + 233) = a4;
  }
  return result;
}

__n128 CoreIKRig::getLookAtAxis(uint64_t a1, char *a2, IKString *a3)
{
  __n128 result;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  void (***v11)(FIK::CrtAllocator *__hidden);

  result.n128_u64[0] = 0;
  if (!*(_DWORD *)(a1 + 352))
  {
    v7 = a1 + 16;
    v9 = 0;
    v10 = 0;
    v11 = FIK::defaultAllocator((FIK *)a1);
    IKString::assign(&v9, a2, a3);
    v8 = FIK::IKRigUtils::GetTaskIndexByName<FIK::GameRig>((uint64_t)&v9, v7);
    if (v10)
      ((void (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v11)[3])(v11, v9, 0, 8);
    return *(__n128 *)(*(_QWORD *)(a1 + 208) + 240 * v8 + 176);
  }
  return result;
}

__n128 CoreIKRig::setLookAtAxis(uint64_t a1, char *a2, IKString *a3, __n128 result)
{
  uint64_t v7;
  int v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  void (***v12)(FIK::CrtAllocator *__hidden);

  if (!*(_DWORD *)(a1 + 352))
  {
    v9 = result;
    v7 = a1 + 16;
    v10 = 0;
    v11 = 0;
    v12 = FIK::defaultAllocator((FIK *)a1);
    IKString::assign(&v10, a2, a3);
    v8 = FIK::IKRigUtils::GetTaskIndexByName<FIK::GameRig>((uint64_t)&v10, v7);
    if (v11)
      ((void (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v12)[3])(v12, v10, 0, 8);
    result = v9;
    *(__n128 *)(*(_QWORD *)(a1 + 208) + 240 * v8 + 176) = v9;
  }
  return result;
}

BOOL CoreIKRig::getUsesLocalSpaceLookAtAxis(uint64_t a1, char *a2, IKString *a3)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  void (***v11)(FIK::CrtAllocator *__hidden);

  if (*(_DWORD *)(a1 + 352))
    return 0;
  v7 = a1 + 16;
  v9 = 0;
  v10 = 0;
  v11 = FIK::defaultAllocator((FIK *)a1);
  IKString::assign(&v9, a2, a3);
  v8 = FIK::IKRigUtils::GetTaskIndexByName<FIK::GameRig>((uint64_t)&v9, v7);
  if (v10)
    ((void (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v11)[3])(v11, v9, 0, 8);
  return *(_BYTE *)(*(_QWORD *)(a1 + 208) + 240 * v8 + 232) != 0;
}

FIK *CoreIKRig::setUsesLocalSpaceLookAtAxis(FIK *result, char *a2, IKString *a3)
{
  FIK *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  void (***v10)(FIK::CrtAllocator *__hidden);

  if (!*((_DWORD *)result + 88))
  {
    v5 = result;
    v6 = (uint64_t)result + 16;
    v8 = 0;
    v9 = 0;
    v10 = FIK::defaultAllocator(result);
    IKString::assign(&v8, a2, a3);
    result = (FIK *)FIK::IKRigUtils::GetTaskIndexByName<FIK::GameRig>((uint64_t)&v8, v6);
    v7 = (int)result;
    if (v9)
      result = (FIK *)((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v10)[3])(v10, v8, 0, 8);
    *(_BYTE *)(*((_QWORD *)v5 + 26) + 240 * v7 + 232) = 1;
  }
  return result;
}

BOOL CoreIKRig::getUsesModelSpaceLookAtAxis(uint64_t a1, char *a2, IKString *a3)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  void (***v11)(FIK::CrtAllocator *__hidden);

  if (*(_DWORD *)(a1 + 352))
    return 0;
  v7 = a1 + 16;
  v9 = 0;
  v10 = 0;
  v11 = FIK::defaultAllocator((FIK *)a1);
  IKString::assign(&v9, a2, a3);
  v8 = FIK::IKRigUtils::GetTaskIndexByName<FIK::GameRig>((uint64_t)&v9, v7);
  if (v10)
    ((void (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v11)[3])(v11, v9, 0, 8);
  return *(_BYTE *)(*(_QWORD *)(a1 + 208) + 240 * v8 + 232) == 0;
}

FIK *CoreIKRig::setUsesModelSpaceLookAtAxis(FIK *result, char *a2, IKString *a3)
{
  FIK *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  void (***v10)(FIK::CrtAllocator *__hidden);

  if (!*((_DWORD *)result + 88))
  {
    v5 = result;
    v6 = (uint64_t)result + 16;
    v8 = 0;
    v9 = 0;
    v10 = FIK::defaultAllocator(result);
    IKString::assign(&v8, a2, a3);
    result = (FIK *)FIK::IKRigUtils::GetTaskIndexByName<FIK::GameRig>((uint64_t)&v8, v6);
    v7 = (int)result;
    if (v9)
      result = (FIK *)((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v10)[3])(v10, v8, 0, 8);
    *(_BYTE *)(*((_QWORD *)v5 + 26) + 240 * v7 + 232) = 0;
  }
  return result;
}

uint64_t *CoreIKRig::removeConstraint(uint64_t *result, char *a2, IKString *a3, CFErrorRef *a4)
{
  CFErrorRef *v4;
  uint64_t *v7;
  const IKString *v8;
  int v9;
  __int128 v10;
  int v11;
  int v12;
  __int128 v13;
  FIK *v14;
  int v15;
  uint64_t *v16;
  __int128 v17;
  int v18;
  int v19;
  __int128 v20;
  FIK *v21;
  __int128 v22;
  void (***v23)(FIK::CrtAllocator *__hidden);
  int v24;
  uint64_t *v25;
  uint64_t v27;
  uint64_t v28;
  void (***v29)(FIK::CrtAllocator *__hidden);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD v33[2];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  int v38;
  _DWORD v39[4];
  __int128 v40;
  __int128 v41;
  uint64_t v42[2];
  uint64_t v43;
  uint64_t v44[4];
  uint64_t v45[4];
  __int128 v46;
  __int128 v47;
  uint64_t v48[8];

  v4 = a4;
  v7 = result;
  v48[5] = *MEMORY[0x24BDAC8D0];
  v8 = (const IKString *)(result + 2);
  v9 = *((_DWORD *)result + 88);
  if (!v9)
  {
    IKString::IKString((IKString *)&v30, v8);
    v33[0] = *(_OWORD *)(v7 + 5);
    *(_OWORD *)((char *)v33 + 12) = *(_OWORD *)((char *)v7 + 52);
    v10 = *((_OWORD *)v7 + 6);
    v34 = *((_OWORD *)v7 + 5);
    v35 = v10;
    v36 = *((_OWORD *)v7 + 7);
    v37 = v7[16];
    v11 = *((_DWORD *)v7 + 34);
    *(_DWORD *)((char *)v39 + 3) = *(_DWORD *)((char *)v7 + 147);
    v12 = *((_DWORD *)v7 + 36);
    v38 = v11;
    v39[0] = v12;
    v13 = *((_OWORD *)v7 + 11);
    v40 = *((_OWORD *)v7 + 10);
    v41 = v13;
    FIK::IKArray<FIK::GameTask>::IKArray(v42, v7 + 24);
    FIK::IKArray<FIK::RigBone>::IKArray(v44, v7 + 28);
    FIK::IKArray<IKString>::IKArray(v45, v7 + 32);
    FIK::IKArray<int>::IKArray(&v46, v7 + 36);
    v14 = (FIK *)FIK::IKArray<FIK::AimSetup>::IKArray(v48, v7 + 40);
    *((_BYTE *)v7 + 368) = 1;
    v27 = 0;
    v28 = 0;
    v29 = FIK::defaultAllocator(v14);
    IKString::assign(&v27, a2, a3);
    v15 = FIK::IKRigUtils::GetTaskIndexByName<FIK::GameRig>((uint64_t)&v27, (uint64_t)&v30);
    if (v28)
      ((void (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v29)[3])(v29, v27, 0, 8);
    if (v15 == -1)
    {
      v16 = ikinemaLogObject();
      if (os_log_type_enabled((os_log_t)v16[2], OS_LOG_TYPE_ERROR))
        CoreIKRig::removeConstraint();
      v4 = a4;
      makeError(604, a4);
    }
    else
    {
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<FIK::IKArrayIterator<FIK::GameTask>,FIK::IKArrayIterator<FIK::GameTask>,FIK::IKArrayIterator<FIK::GameTask>>((uint64_t)&v27, v43 + 240 * v15 + 240, v43 + 240 * v42[0]--, v43 + 240 * v15);
      v4 = a4;
    }
    FIK::IKArray<FIK::AimSetup>::~IKArray(v48);
    *(_QWORD *)&v46 = 0;
    if ((_QWORD)v47)
      (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**((_QWORD **)&v47 + 1) + 24))(*((_QWORD *)&v47 + 1), v47, 0, 8);
    FIK::IKArray<IKString>::~IKArray((uint64_t)v45);
    FIK::IKArray<FIK::RigBone>::~IKArray(v44);
    result = FIK::IKArray<FIK::GameTask>::~IKArray(v42);
    if (v31)
      result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v32 + 24))(v32, v30, 0, 8);
    v9 = *((_DWORD *)v7 + 88);
  }
  if (v9 == 1)
  {
    IKString::IKString((IKString *)&v30, v8);
    v33[0] = *(_OWORD *)(v7 + 5);
    *(_OWORD *)((char *)v33 + 12) = *(_OWORD *)((char *)v7 + 52);
    v17 = *((_OWORD *)v7 + 6);
    v34 = *((_OWORD *)v7 + 5);
    v35 = v17;
    v36 = *((_OWORD *)v7 + 7);
    v37 = v7[16];
    v18 = *((_DWORD *)v7 + 34);
    *(_DWORD *)((char *)v39 + 3) = *(_DWORD *)((char *)v7 + 147);
    v19 = *((_DWORD *)v7 + 36);
    v38 = v18;
    v39[0] = v19;
    v20 = *((_OWORD *)v7 + 11);
    v40 = *((_OWORD *)v7 + 10);
    v41 = v20;
    FIK::IKArray<FIK::MoCapTask>::IKArray(v42, v7 + 24);
    FIK::IKArray<FIK::MoCapBone>::IKArray(v44, v7 + 28);
    v21 = (FIK *)FIK::IKArray<FIK::RigBoneBase>::IKArray(v45, v7 + 32);
    v22 = *((_OWORD *)v7 + 19);
    v46 = *((_OWORD *)v7 + 18);
    v47 = v22;
    v48[0] = v7[40];
    *((_BYTE *)v7 + 368) = 1;
    v23 = FIK::defaultAllocator(v21);
    v27 = 0;
    v28 = 0;
    v29 = v23;
    IKString::assign(&v27, a2, a3);
    v24 = FIK::IKRigUtils::GetTaskIndexByName<FIK::MoCapRig>((uint64_t)&v27, (uint64_t)&v30);
    if (v28)
      ((void (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v29)[3])(v29, v27, 0, 8);
    if (v24 == -1)
    {
      v25 = ikinemaLogObject();
      if (os_log_type_enabled((os_log_t)v25[2], OS_LOG_TYPE_ERROR))
        CoreIKRig::removeConstraint();
      makeError(604, v4);
    }
    else
    {
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<FIK::IKArrayIterator<FIK::MoCapTask>,FIK::IKArrayIterator<FIK::MoCapTask>,FIK::IKArrayIterator<FIK::MoCapTask>>((uint64_t)&v27, v43 + ((uint64_t)v24 << 8) + 256, v43 + (v42[0]-- << 8), v43 + ((uint64_t)v24 << 8));
    }
    FIK::IKArray<FIK::RigBoneBase>::~IKArray(v45);
    FIK::IKArray<FIK::MoCapBone>::~IKArray(v44);
    result = FIK::IKArray<FIK::MoCapTask>::~IKArray(v42);
    if (v31)
      return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v32 + 24))(v32, v30, 0, 8);
  }
  return result;
}

void CoreIKRig::addJointWithSettings(uint64_t a1, const char **a2, CFErrorRef *a3)
{
  int v6;
  char *v7;
  size_t v8;
  FIK *v9;
  IKString *v10;
  IKString *v11;
  size_t v12;
  unsigned int *v13;
  FIK *v14;
  void (***v15)(FIK::CrtAllocator *__hidden);
  IKString *v16;
  IKString *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (***v21)(FIK::CrtAllocator *__hidden);
  uint64_t v22;
  uint64_t v23;
  void (***v24)(FIK::CrtAllocator *__hidden);
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  int v28;
  char v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  int32x2_t v36;
  int v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v6 = *(_DWORD *)(a1 + 352);
  if (!v6)
  {
    *(_BYTE *)(a1 + 368) = 1;
    v7 = (char *)*a2;
    v8 = strlen(*a2);
    v9 = (FIK *)FIK::IKRigUtils::getBoneIndex<FIK::RigBone,void>(v7, v8, (unsigned int *)(a1 + 224));
    if ((_DWORD)v9 == -1)
    {
      v18 = -1;
      v19 = 0;
      v20 = 0;
      v21 = FIK::defaultAllocator(v9);
      v22 = 0;
      v23 = 0;
      v24 = v21;
      v25 = 0;
      v26 = 0;
      v27 = xmmword_210802BA0;
      v28 = 16843009;
      v29 = 1;
      v30 = 0;
      v31 = xmmword_210804100;
      v32 = 0x3F80000000000000;
      v33 = xmmword_2108040F0;
      v34 = xmmword_2108040F0;
      v35 = xmmword_210804110;
      v36 = vdup_n_s32(0x43B40000u);
      v37 = 1135869952;
      v41 = 0;
      v40 = 0u;
      v39 = 0u;
      v38 = 0u;
      v10 = (IKString *)strlen(*a2);
      v11 = (IKString *)strlen(a2[1]);
      copySettingsToJoint<FIK::RigBone>((uint64_t)a2, (char *)*a2, v10, (char *)a2[1], v11, (uint64_t)&v18);
      FIK::IKArray<FIK::RigBone>::push_back<FIK::RigBone&,void>(a1 + 224, (const FIK::RigBone *)&v18);
      if (v23)
      {
        ((void (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v24)[3])(v24, v22, 0, 8);
        v22 = 0;
        v23 = 0;
      }
      if (v20)
        ((void (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v21)[3])(v21, v19, 0, 8);
    }
    else
    {
      makeError(201, a3);
    }
    v6 = *(_DWORD *)(a1 + 352);
  }
  if (v6 == 1)
  {
    *(_BYTE *)(a1 + 368) = 1;
    v12 = strlen(*a2);
    v13 = (unsigned int *)(a1 + 224);
    v14 = (FIK *)FIK::IKRigUtils::getBoneIndex<FIK::MoCapBone,void>((void *)*a2, v12, v13);
    if ((_DWORD)v14 == -1)
    {
      v15 = FIK::defaultAllocator(v14);
      FIK::MoCapBone::MoCapBone((FIK::MoCapBone *)&v18, (FIK::Allocator *)v15);
      v16 = (IKString *)strlen(*a2);
      v17 = (IKString *)strlen(a2[1]);
      copySettingsToJoint<FIK::RigBone>((uint64_t)a2, (char *)*a2, v16, (char *)a2[1], v17, (uint64_t)&v18);
      FIK::IKArray<FIK::MoCapBone>::push_back<FIK::MoCapBone&,void>((uint64_t)v13, (const FIK::MoCapBone *)&v18);
      FIK::IKArray<IKString>::~IKArray((uint64_t)&v45);
      if (v43)
      {
        (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v44 + 24))(v44, v42, 0, 8);
        v42 = 0;
        v43 = 0;
      }
      if (v23)
      {
        ((void (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v24)[3])(v24, v22, 0, 8);
        v22 = 0;
        v23 = 0;
      }
      if (v20)
        ((void (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v21)[3])(v21, v19, 0, 8);
    }
    else
    {
      makeError(201, a3);
    }
  }
}

float CoreIKRig::updateJointWithSettings(uint64_t a1, void *__s2, size_t __n, uint64_t a4, CFErrorRef *a5)
{
  int v10;
  int v11;
  _QWORD *v12;
  IKString *v13;
  char *v14;
  float result;
  IKString *v16;
  char *v17;
  int v18;
  _QWORD *v19;
  IKString *v20;
  char *v21;
  IKString *v22;
  char *v23;

  v10 = *(_DWORD *)(a1 + 352);
  if (!v10)
  {
    v11 = FIK::IKRigUtils::getBoneIndex<FIK::RigBone,void>(__s2, __n, (unsigned int *)(a1 + 224));
    if (v11 == -1)
    {
      makeError(401, a5);
    }
    else
    {
      v12 = (_QWORD *)(*(_QWORD *)(a1 + 240) + ((uint64_t)v11 << 8));
      v13 = (IKString *)v12[2];
      if (v13)
        v14 = (char *)v12[1];
      else
        v14 = (char *)&unk_2108053E2;
      v16 = (IKString *)v12[5];
      if (v16)
        v17 = (char *)v12[4];
      else
        v17 = (char *)&unk_2108053E2;
      result = copySettingsToJoint<FIK::RigBone>(a4, v14, v13, v17, v16, (uint64_t)v12);
    }
    v10 = *(_DWORD *)(a1 + 352);
  }
  if (v10 == 1)
  {
    v18 = FIK::IKRigUtils::getBoneIndex<FIK::MoCapBone,void>(__s2, __n, (unsigned int *)(a1 + 224));
    if (v18 == -1)
    {
      makeError(401, a5);
    }
    else
    {
      v19 = (_QWORD *)(*(_QWORD *)(a1 + 240) + 544 * v18);
      v20 = (IKString *)v19[2];
      if (v20)
        v21 = (char *)v19[1];
      else
        v21 = (char *)&unk_2108053E2;
      v22 = (IKString *)v19[5];
      if (v22)
        v23 = (char *)v19[4];
      else
        v23 = (char *)&unk_2108053E2;
      return copySettingsToJoint<FIK::RigBone>(a4, v21, v20, v23, v22, (uint64_t)v19);
    }
  }
  return result;
}

void CoreIKRig::addJointsWithSettings(uint64_t a1, const char **a2, uint64_t a3, CFErrorRef *a4)
{
  uint64_t v5;

  if (a3)
  {
    v5 = a3;
    do
    {
      CoreIKRig::addJointWithSettings(a1, a2, a4);
      a2 += 28;
      --v5;
    }
    while (v5);
  }
}

uint64_t CoreIKRig::removeJoint(uint64_t result, void *__s2, size_t __n, CFErrorRef *a4)
{
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  size_t v20;
  const void *v21;
  const void *v22;
  uint64_t *v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  size_t *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  size_t v34;
  const void *v35;
  const void *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  int v40;
  CFErrorRef *v41;
  CFErrorRef *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  size_t v47;
  char v48;
  char v49;
  char v50;
  char v51;

  v5 = __n;
  v6 = __s2;
  v7 = result;
  v8 = result + 16;
  v9 = *(_DWORD *)(result + 352);
  if (!v9)
  {
    *(_BYTE *)(result + 368) = 1;
    v10 = (_QWORD *)(result + 224);
    v11 = FIK::IKRigUtils::getBoneIndex<FIK::RigBone,void>(__s2, __n, (unsigned int *)(result + 224));
    if (v11 == -1)
    {
      makeError(302, a4);
      v23 = ikinemaLogObject();
      if (os_log_type_enabled((os_log_t)v23[2], OS_LOG_TYPE_ERROR))
        CoreIKRig::removeJoint();
    }
    else
    {
      v41 = a4;
      v43 = v8;
      v45 = v6;
      v47 = v5;
      v39 = v11;
      v12 = *(_QWORD *)(v7 + 224);
      v13 = *(_QWORD *)(v7 + 240);
      if (v12)
      {
        v14 = v11;
        v15 = v13 + ((uint64_t)v11 << 8);
        v16 = (size_t *)(v15 + 16);
        v17 = (_QWORD *)(v15 + 8);
        v18 = (_QWORD *)(v13 + 40);
        v19 = *(_QWORD *)(v7 + 224);
        while (1)
        {
          if (v14)
          {
            v20 = *v16;
            v21 = *v16 ? (const void *)*v17 : &unk_2108053E2;
            v22 = *v18 ? (const void *)*(v18 - 1) : &unk_2108053E2;
            if (*v18 == v20 && !memcmp(v22, v21, v20))
              break;
          }
          v18 += 32;
          --v14;
          if (!--v19)
            goto LABEL_15;
        }
        a4 = v41;
        makeError(301, v41);
        v24 = ikinemaLogObject();
        v6 = v45;
        v5 = v47;
        v8 = v43;
        if (os_log_type_enabled((os_log_t)v24[2], OS_LOG_TYPE_ERROR))
          CoreIKRig::removeJoint();
      }
      else
      {
LABEL_15:
        std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<FIK::IKArrayIterator<FIK::RigBone>,FIK::IKArrayIterator<FIK::RigBone>,FIK::IKArrayIterator<FIK::RigBone>>((uint64_t)&v48, v13 + (v39 << 8) + 256, v13 + (v12 << 8), v13 + (v39 << 8));
        --*v10;
        v6 = v45;
        v5 = v47;
        a4 = v41;
        v8 = v43;
      }
    }
    result = FIK::IKRigUtils::GetTaskIndexByBoneName<FIK::GameRig>(v6, v5, v8);
    if ((_DWORD)result != -1)
    {
      result = std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<FIK::IKArrayIterator<FIK::GameTask>,FIK::IKArrayIterator<FIK::GameTask>,FIK::IKArrayIterator<FIK::GameTask>>((uint64_t)&v49, *(_QWORD *)(v7 + 208) + 240 * (int)result + 240, *(_QWORD *)(v7 + 208) + 240 * *(_QWORD *)(v7 + 192), *(_QWORD *)(v7 + 208) + 240 * (int)result);
      --*(_QWORD *)(v7 + 192);
    }
    v9 = *(_DWORD *)(v7 + 352);
  }
  if (v9 == 1)
  {
    *(_BYTE *)(v7 + 368) = 1;
    v25 = FIK::IKRigUtils::getBoneIndex<FIK::MoCapBone,void>(v6, v5, (unsigned int *)(v7 + 224));
    if (v25 == -1)
    {
      makeError(302, a4);
      v37 = ikinemaLogObject();
      if (os_log_type_enabled((os_log_t)v37[2], OS_LOG_TYPE_ERROR))
        CoreIKRig::removeJoint();
    }
    else
    {
      v42 = a4;
      v44 = v8;
      v46 = v6;
      v40 = v25;
      v26 = *(_QWORD *)(v7 + 224);
      v27 = *(_QWORD *)(v7 + 240);
      if (v26)
      {
        v28 = v25;
        v29 = v27 + 544 * v25;
        v30 = (size_t *)(v29 + 16);
        v31 = (_QWORD *)(v29 + 8);
        v32 = (_QWORD *)(v27 + 40);
        v33 = *(_QWORD *)(v7 + 224);
        while (1)
        {
          if (v28)
          {
            v34 = *v30;
            v35 = *v30 ? (const void *)*v31 : &unk_2108053E2;
            v36 = *v32 ? (const void *)*(v32 - 1) : &unk_2108053E2;
            if (*v32 == v34 && !memcmp(v36, v35, v34))
              break;
          }
          v32 += 68;
          --v28;
          if (!--v33)
            goto LABEL_37;
        }
        makeError(301, v42);
        v38 = ikinemaLogObject();
        v6 = v46;
        v8 = v44;
        if (os_log_type_enabled((os_log_t)v38[2], OS_LOG_TYPE_ERROR))
          CoreIKRig::removeJoint();
      }
      else
      {
LABEL_37:
        std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<FIK::IKArrayIterator<FIK::MoCapBone>,FIK::IKArrayIterator<FIK::MoCapBone>,FIK::IKArrayIterator<FIK::MoCapBone>>((uint64_t)&v50, v27 + 544 * v40 + 544, v27 + 544 * v26, v27 + 544 * v40);
        --*(_QWORD *)(v7 + 224);
        v6 = v46;
        v8 = v44;
      }
    }
    result = FIK::IKRigUtils::GetTaskIndexByBoneName<FIK::MoCapRig>(v6, v5, v8);
    if ((_DWORD)result != -1)
    {
      result = std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<FIK::IKArrayIterator<FIK::MoCapTask>,FIK::IKArrayIterator<FIK::MoCapTask>,FIK::IKArrayIterator<FIK::MoCapTask>>((uint64_t)&v51, *(_QWORD *)(v7 + 208) + ((uint64_t)(int)result << 8) + 256, *(_QWORD *)(v7 + 208) + (*(_QWORD *)(v7 + 192) << 8), *(_QWORD *)(v7 + 208) + ((uint64_t)(int)result << 8));
      --*(_QWORD *)(v7 + 192);
    }
  }
  return result;
}

float CoreIKRig::getRigJointSettings@<S0>(void *__s2@<X1>, size_t __n@<X2>, uint64_t a3@<X0>, uint64_t a4@<X8>)
{
  int v6;
  __int128 v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  int v12;
  int16x8_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  int16x8_t v18;
  unsigned __int8 v24;
  unsigned __int16 v25;
  int16x8_t v26;
  __int128 v28;
  __int128 v29;

  v6 = *(_DWORD *)(a3 + 352);
  v7 = 0uLL;
  if (v6 == 1)
  {
    *(_OWORD *)(a4 + 192) = 0uLL;
    *(_OWORD *)(a4 + 208) = 0uLL;
    *(_OWORD *)(a4 + 160) = 0uLL;
    *(_OWORD *)(a4 + 176) = 0uLL;
    *(_OWORD *)(a4 + 128) = 0uLL;
    *(_OWORD *)(a4 + 144) = 0uLL;
    *(_OWORD *)(a4 + 96) = 0uLL;
    *(_OWORD *)(a4 + 112) = 0uLL;
    *(_OWORD *)(a4 + 64) = 0uLL;
    *(_OWORD *)(a4 + 80) = 0uLL;
    *(_OWORD *)(a4 + 32) = 0uLL;
    *(_OWORD *)(a4 + 48) = 0uLL;
    *(_OWORD *)a4 = 0uLL;
    *(_OWORD *)(a4 + 16) = 0uLL;
    v12 = FIK::IKRigUtils::getBoneIndex<FIK::MoCapBone,void>(__s2, __n, (unsigned int *)(a3 + 224));
    if (v12 != -1)
    {
      v14 = *(_QWORD *)(a3 + 240) + 544 * v12;
      if (*(_QWORD *)(v14 + 16))
        v15 = *(void **)(v14 + 8);
      else
        v15 = &unk_2108053E2;
      *(_QWORD *)a4 = v15;
      if (*(_QWORD *)(v14 + 40))
        v17 = *(void **)(v14 + 32);
      else
        v17 = &unk_2108053E2;
      *(_QWORD *)(a4 + 8) = v17;
      v26 = *(int16x8_t *)(v14 + 64);
      _Q1 = *(_OWORD *)(v14 + 80);
      v13.i8[0] = *(_BYTE *)(v14 + 97);
      *(int16x8_t *)(a4 + 16) = v26;
      *(_OWORD *)(a4 + 32) = _Q1;
      v13.i8[4] = *(_BYTE *)(v14 + 98);
      v13.i16[1] = v13.i16[2];
      v13.i16[2] = *(unsigned __int8 *)(v14 + 99);
      *(_BYTE *)(a4 + 48) = *(_BYTE *)(v14 + 96);
      *(_BYTE *)(a4 + 54) = v13.i8[4];
      *(_WORD *)(a4 + 52) = vmovn_s16(v13).u16[0];
      *(_BYTE *)(a4 + 56) = *(_BYTE *)(v14 + 100);
      *(_DWORD *)(a4 + 60) = *(_DWORD *)(v14 + 120);
      v26.i64[0] = *(_QWORD *)(v14 + 160);
      *(_DWORD *)(a4 + 72) = *(_DWORD *)(v14 + 168);
      *(_QWORD *)(a4 + 64) = v26.i64[0];
      __asm { FMOV            V1.2S, #1.0 }
      *(float32x2_t *)v26.i8 = vsub_f32(*(float32x2_t *)&_Q1, *(float32x2_t *)(v14 + 144));
      *(float *)(a4 + 88) = 1.0 - *(float *)(v14 + 152);
      *(_QWORD *)(a4 + 80) = v26.i64[0];
      v26.i64[0] = *(_QWORD *)(v14 + 240);
      *(_DWORD *)(a4 + 104) = *(_DWORD *)(v14 + 248);
      *(_QWORD *)(a4 + 96) = v26.i64[0];
      v26.i8[0] = *(_BYTE *)(v14 + 105);
      *(_BYTE *)(a4 + 112) = *(_BYTE *)(v14 + 102);
      v26.i8[4] = *(_BYTE *)(v14 + 106);
      v24 = *(_BYTE *)(v14 + 107);
      v26.i16[1] = v26.i16[2];
      v26.i16[2] = v24;
      v25 = vmovn_s16(v26).u16[0];
      goto LABEL_20;
    }
  }
  else if (v6)
  {
    *(_OWORD *)(a4 + 192) = 0uLL;
    *(_OWORD *)(a4 + 208) = 0uLL;
    *(_OWORD *)(a4 + 160) = 0uLL;
    *(_OWORD *)(a4 + 176) = 0uLL;
    *(_OWORD *)(a4 + 128) = 0uLL;
    *(_OWORD *)(a4 + 144) = 0uLL;
    *(_OWORD *)(a4 + 96) = 0uLL;
    *(_OWORD *)(a4 + 112) = 0uLL;
    *(_OWORD *)(a4 + 64) = 0uLL;
    *(_OWORD *)(a4 + 80) = 0uLL;
    *(_OWORD *)(a4 + 32) = 0uLL;
    *(_OWORD *)(a4 + 48) = 0uLL;
    *(_OWORD *)a4 = 0uLL;
    *(_OWORD *)(a4 + 16) = 0uLL;
  }
  else
  {
    *(_OWORD *)(a4 + 192) = 0uLL;
    *(_OWORD *)(a4 + 208) = 0uLL;
    *(_OWORD *)(a4 + 160) = 0uLL;
    *(_OWORD *)(a4 + 176) = 0uLL;
    *(_OWORD *)(a4 + 128) = 0uLL;
    *(_OWORD *)(a4 + 144) = 0uLL;
    *(_OWORD *)(a4 + 96) = 0uLL;
    *(_OWORD *)(a4 + 112) = 0uLL;
    *(_OWORD *)(a4 + 64) = 0uLL;
    *(_OWORD *)(a4 + 80) = 0uLL;
    *(_OWORD *)(a4 + 32) = 0uLL;
    *(_OWORD *)(a4 + 48) = 0uLL;
    *(_OWORD *)a4 = 0uLL;
    *(_OWORD *)(a4 + 16) = 0uLL;
    v8 = FIK::IKRigUtils::getBoneIndex<FIK::RigBone,void>(__s2, __n, (unsigned int *)(a3 + 224));
    if (v8 != -1)
    {
      v9 = *(_QWORD *)(a3 + 240);
      v10 = v9 + ((uint64_t)v8 << 8);
      if (*(_QWORD *)(v10 + 16))
        v11 = *(void **)(v10 + 8);
      else
        v11 = &unk_2108053E2;
      *(_QWORD *)a4 = v11;
      if (*(_QWORD *)(v10 + 40))
        v16 = *(void **)(v10 + 32);
      else
        v16 = &unk_2108053E2;
      *(_QWORD *)(a4 + 8) = v16;
      v18 = *(int16x8_t *)(v10 + 64);
      _Q1 = *(_OWORD *)(v10 + 80);
      *(int16x8_t *)(a4 + 16) = v18;
      *(_OWORD *)(a4 + 32) = _Q1;
      v14 = v9 + ((uint64_t)v8 << 8);
      v18.i8[0] = *(_BYTE *)(v14 + 97);
      v18.i8[4] = *(_BYTE *)(v14 + 98);
      v18.i16[1] = v18.i16[2];
      v18.i16[2] = *(unsigned __int8 *)(v14 + 99);
      *(_BYTE *)(a4 + 48) = *(_BYTE *)(v14 + 96);
      *(_BYTE *)(a4 + 54) = v18.i8[4];
      *(_WORD *)(a4 + 52) = vmovn_s16(v18).u16[0];
      *(_BYTE *)(a4 + 56) = *(_BYTE *)(v14 + 100);
      *(_DWORD *)(a4 + 60) = *(_DWORD *)(v14 + 120);
      v18.i64[0] = *(_QWORD *)(v14 + 160);
      *(_DWORD *)(a4 + 72) = *(_DWORD *)(v14 + 168);
      *(_QWORD *)(a4 + 64) = v18.i64[0];
      __asm { FMOV            V1.2S, #1.0 }
      *(float32x2_t *)v18.i8 = vsub_f32(*(float32x2_t *)&_Q1, *(float32x2_t *)(v14 + 144));
      *(float *)(a4 + 88) = 1.0 - *(float *)(v14 + 152);
      *(_QWORD *)(a4 + 80) = v18.i64[0];
      v18.i64[0] = *(_QWORD *)(v14 + 240);
      *(_DWORD *)(a4 + 104) = *(_DWORD *)(v14 + 248);
      *(_QWORD *)(a4 + 96) = v18.i64[0];
      *(_BYTE *)(a4 + 112) = *(_BYTE *)(v14 + 102);
      v18.i8[0] = *(_BYTE *)(v14 + 105);
      v18.i8[4] = *(_BYTE *)(v14 + 106);
      v24 = *(_BYTE *)(v14 + 107);
      v18.i16[1] = v18.i16[2];
      v18.i16[2] = v24;
      v25 = vmovn_s16(v18).u16[0];
LABEL_20:
      *(_BYTE *)(a4 + 118) = v24;
      *(_WORD *)(a4 + 116) = v25;
      *(_DWORD *)(a4 + 120) = *(_DWORD *)(v14 + 132);
      *(_BYTE *)(a4 + 124) = *(_BYTE *)(v14 + 101);
      v28 = *(_OWORD *)(v14 + 224);
      *(_OWORD *)(a4 + 128) = *(_OWORD *)(v14 + 208);
      *(_OWORD *)(a4 + 144) = v28;
      *(_WORD *)(a4 + 160) = *(_WORD *)(v14 + 103);
      *(_DWORD *)(a4 + 164) = *(_DWORD *)(v14 + 124);
      *(_DWORD *)(a4 + 168) = *(_DWORD *)(v14 + 128);
      v29 = *(_OWORD *)(v14 + 192);
      *(_OWORD *)(a4 + 176) = *(_OWORD *)(v14 + 176);
      *(_OWORD *)(a4 + 192) = v29;
      LODWORD(v7) = *(_DWORD *)(v14 + 116);
      *(_DWORD *)(a4 + 208) = v7;
    }
  }
  return *(float *)&v7;
}

uint64_t CoreIKRig::validateRigHierarchy(CoreIKRig *this, __CFError **a2)
{
  _QWORD *v3;
  int v4;

  v3 = (_QWORD *)((char *)this + 16);
  v4 = *((_DWORD *)this + 88);
  if (v4 == 1)
    return validateRigHierarchy<FIK::MoCapRig>(v3, a2);
  if (v4)
    return 0;
  return validateRigHierarchy<FIK::GameRig>(v3, a2);
}

uint64_t validateRigHierarchy<FIK::GameRig>(_QWORD *a1, CFErrorRef *a2)
{
  unsigned int *v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  NSObject *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  NSObject *v17;
  void *v18;
  CFIndex v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  size_t v23;
  void *v24;
  unint64_t v25;
  void (***v26)(FIK::CrtAllocator *__hidden);
  void (***v27)(FIK::CrtAllocator *__hidden);
  void *v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  size_t v34;
  void *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  NSObject *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v52;
  void *v53;
  void *v54;
  CFErrorRef *v55;
  void *__s2;
  size_t __n;
  uint64_t v58;
  uint8_t buf[4];
  const char *v60;
  __int16 v61;
  void *v62;
  __int16 v63;
  void *v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v2 = (unsigned int *)(a1 + 26);
  if (!a1[26])
  {
    v19 = 705;
LABEL_70:
    makeError(v19, a2);
    return 0;
  }
  v55 = a2;
  v4 = 0;
  v5 = 0;
  do
  {
    v6 = a1[28];
    IKString::IKString((IKString *)&__s2, (const IKString *)(v6 + v4 + 32));
    if (__n)
    {
      v7 = FIK::IKRigUtils::getBoneIndex<FIK::RigBone,void>(__s2, __n, v2);
      v8 = v7;
      if ((_DWORD)v7 == -1)
      {
        v9 = ikinemaLogObject()[2];
        v7 = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
        if ((_DWORD)v7)
        {
          if (__n)
            v10 = __s2;
          else
            v10 = &unk_2108053E2;
          v11 = &unk_2108053E2;
          if (*(_QWORD *)(v6 + v4 + 16))
            v11 = *(void **)(v6 + v4 + 8);
          *(_DWORD *)buf = 136315650;
          v60 = "rigJointsHaveInvalidParenting";
          v61 = 2080;
          v62 = v10;
          v63 = 2080;
          v64 = v11;
          _os_log_error_impl(&dword_21078E000, v9, OS_LOG_TYPE_ERROR, "%s: Parent '%s' not found for joint '%s'", buf, 0x20u);
        }
      }
      if (__n)
        v7 = (*(uint64_t (**)(uint64_t, void *, _QWORD, uint64_t))(*(_QWORD *)v58 + 24))(v58, __s2, 0, 8);
      if (v8 == -1)
      {
        v19 = 701;
LABEL_69:
        a2 = v55;
        goto LABEL_70;
      }
    }
    ++v5;
    v4 += 256;
  }
  while (*(_QWORD *)v2 > v5);
  if (*(_QWORD *)v2)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = a1[28];
      if (!*(_QWORD *)(v15 + v12 + 40))
      {
        v16 = v14 + 1;
        if (v14 >= 1)
        {
          v17 = ikinemaLogObject()[2];
          v7 = os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
          if ((_DWORD)v7)
          {
            v18 = &unk_2108053E2;
            if (*(_QWORD *)(v15 + v12 + 16))
              v18 = *(void **)(v15 + v12 + 8);
            *(_DWORD *)buf = 136315394;
            v60 = "rigJointsContainMoreThanOneRoot";
            v61 = 2080;
            v62 = v18;
            _os_log_error_impl(&dword_21078E000, v17, OS_LOG_TYPE_ERROR, "%s: Multiple roots in rig: %s", buf, 0x16u);
          }
        }
        v14 = v16;
      }
      ++v13;
      v12 += 256;
    }
    while (*(_QWORD *)v2 > v13);
    if (v14 >= 2)
    {
      v19 = 703;
      goto LABEL_69;
    }
  }
  if (a1[22])
  {
    v20 = 0;
    v21 = 0;
    while (1)
    {
      v22 = a1[24];
      v23 = *(_QWORD *)(v22 + v20 + 32);
      v24 = v23 ? *(void **)(v22 + v20 + 24) : &unk_2108053E2;
      v7 = FIK::IKRigUtils::getBoneIndex<FIK::RigBone,void>(v24, v23, v2);
      if ((_DWORD)v7 == -1)
        break;
      ++v21;
      v25 = a1[22];
      v20 += 240;
      if (v25 <= v21)
        goto LABEL_41;
    }
    v30 = ikinemaLogObject()[2];
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      v52 = v22 + v20;
      if (*(_QWORD *)(v22 + v20 + 32))
        v53 = *(void **)(v52 + 24);
      else
        v53 = &unk_2108053E2;
      if (*(_QWORD *)(v22 + v20 + 8))
        v54 = *(void **)v52;
      else
        v54 = &unk_2108053E2;
      *(_DWORD *)buf = 136315650;
      v60 = "rigHasOrphanConstraint";
      v61 = 2080;
      v62 = v53;
      v63 = 2080;
      v64 = v54;
      _os_log_error_impl(&dword_21078E000, v30, OS_LOG_TYPE_ERROR, "%s: Joint '%s' for constraint '%s' cannot be found in rig", buf, 0x20u);
    }
    v19 = 702;
    goto LABEL_69;
  }
  v25 = 0;
LABEL_41:
  v26 = FIK::defaultAllocator((FIK *)v7);
  v27 = v26;
  if (((v25 + 7) & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v28 = (void *)((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), unint64_t, uint64_t))(*v26)[2])(v26, 4 * ((v25 + 7) & 0xFFFFFFFFFFFFFFF8), 4);
    v29 = (uint64_t)v28;
    if (4 * ((v25 + 7) & 0xFFFFFFFFFFFFFFF8))
      bzero(v28, 4 * ((v25 + 7) & 0xFFFFFFFFFFFFFFF8));
  }
  else
  {
    v29 = 0;
  }
  if (a1[22])
  {
    v31 = 0;
    v32 = 0;
    do
    {
      v33 = a1[24] + v31;
      v34 = *(_QWORD *)(v33 + 32);
      if (v34)
        v35 = *(void **)(v33 + 24);
      else
        v35 = &unk_2108053E2;
      *(_DWORD *)(v29 + 4 * v32++) = FIK::IKRigUtils::getBoneIndex<FIK::RigBone,void>(v35, v34, v2);
      v31 += 240;
    }
    while (v32 < a1[22]);
  }
  v36 = 126 - 2 * __clz(v25);
  if (v25)
    v37 = v36;
  else
    v37 = 0;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<int>,false>(v29, (int *)(v29 + 4 * v25), (uint64_t)buf, v37, 1);
  v38 = v29;
  if (v25)
  {
    v38 = v29 - 4;
    v39 = 4 * v25 - 4;
    while (v39)
    {
      v40 = *(_DWORD *)(v38 + 4);
      v41 = *(_DWORD *)(v38 + 8);
      v38 += 4;
      v39 -= 4;
      if (v40 == v41)
        goto LABEL_60;
    }
  }
  else
  {
LABEL_60:
    if (v38 != v29 + 4 * v25)
    {
      v42 = ikinemaLogObject()[2];
      if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
        validateRigHierarchy<FIK::GameRig>(v42, v43, v44, v45, v46, v47, v48, v49);
      v50 = 1;
      if (!v29)
        goto LABEL_67;
      goto LABEL_66;
    }
  }
  v50 = 0;
  if (v29)
LABEL_66:
    ((void (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v27)[3])(v27, v29, 0, 8);
LABEL_67:
  if (v50)
  {
    v19 = 704;
    goto LABEL_69;
  }
  return 1;
}

uint64_t validateRigHierarchy<FIK::MoCapRig>(_QWORD *a1, CFErrorRef *a2)
{
  unsigned int *v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  NSObject *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  NSObject *v17;
  void *v18;
  CFIndex v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  size_t v23;
  void *v24;
  unint64_t v25;
  void (***v26)(FIK::CrtAllocator *__hidden);
  void (***v27)(FIK::CrtAllocator *__hidden);
  void *v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  size_t v34;
  void *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  NSObject *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v52;
  void *v53;
  void *v54;
  CFErrorRef *v55;
  void *__s2;
  size_t __n;
  uint64_t v58;
  uint8_t buf[4];
  const char *v60;
  __int16 v61;
  void *v62;
  __int16 v63;
  void *v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v2 = (unsigned int *)(a1 + 26);
  if (!a1[26])
  {
    v19 = 705;
LABEL_70:
    makeError(v19, a2);
    return 0;
  }
  v55 = a2;
  v4 = 0;
  v5 = 0;
  do
  {
    v6 = a1[28];
    IKString::IKString((IKString *)&__s2, (const IKString *)(v6 + v4 + 32));
    if (__n)
    {
      v7 = FIK::IKRigUtils::getBoneIndex<FIK::MoCapBone,void>(__s2, __n, v2);
      v8 = v7;
      if ((_DWORD)v7 == -1)
      {
        v9 = ikinemaLogObject()[2];
        v7 = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
        if ((_DWORD)v7)
        {
          if (__n)
            v10 = __s2;
          else
            v10 = &unk_2108053E2;
          v11 = &unk_2108053E2;
          if (*(_QWORD *)(v6 + v4 + 16))
            v11 = *(void **)(v6 + v4 + 8);
          *(_DWORD *)buf = 136315650;
          v60 = "rigJointsHaveInvalidParenting";
          v61 = 2080;
          v62 = v10;
          v63 = 2080;
          v64 = v11;
          _os_log_error_impl(&dword_21078E000, v9, OS_LOG_TYPE_ERROR, "%s: Parent '%s' not found for joint '%s'", buf, 0x20u);
        }
      }
      if (__n)
        v7 = (*(uint64_t (**)(uint64_t, void *, _QWORD, uint64_t))(*(_QWORD *)v58 + 24))(v58, __s2, 0, 8);
      if (v8 == -1)
      {
        v19 = 701;
LABEL_69:
        a2 = v55;
        goto LABEL_70;
      }
    }
    ++v5;
    v4 += 544;
  }
  while (*(_QWORD *)v2 > v5);
  if (*(_QWORD *)v2)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = a1[28];
      if (!*(_QWORD *)(v15 + v12 + 40))
      {
        v16 = v14 + 1;
        if (v14 >= 1)
        {
          v17 = ikinemaLogObject()[2];
          v7 = os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
          if ((_DWORD)v7)
          {
            v18 = &unk_2108053E2;
            if (*(_QWORD *)(v15 + v12 + 16))
              v18 = *(void **)(v15 + v12 + 8);
            *(_DWORD *)buf = 136315394;
            v60 = "rigJointsContainMoreThanOneRoot";
            v61 = 2080;
            v62 = v18;
            _os_log_error_impl(&dword_21078E000, v17, OS_LOG_TYPE_ERROR, "%s: Multiple roots in rig: %s", buf, 0x16u);
          }
        }
        v14 = v16;
      }
      ++v13;
      v12 += 544;
    }
    while (*(_QWORD *)v2 > v13);
    if (v14 >= 2)
    {
      v19 = 703;
      goto LABEL_69;
    }
  }
  if (a1[22])
  {
    v20 = 0;
    v21 = 0;
    while (1)
    {
      v22 = a1[24];
      v23 = *(_QWORD *)(v22 + v20 + 32);
      v24 = v23 ? *(void **)(v22 + v20 + 24) : &unk_2108053E2;
      v7 = FIK::IKRigUtils::getBoneIndex<FIK::MoCapBone,void>(v24, v23, v2);
      if ((_DWORD)v7 == -1)
        break;
      ++v21;
      v25 = a1[22];
      v20 += 256;
      if (v25 <= v21)
        goto LABEL_41;
    }
    v30 = ikinemaLogObject()[2];
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      v52 = v22 + v20;
      if (*(_QWORD *)(v22 + v20 + 32))
        v53 = *(void **)(v52 + 24);
      else
        v53 = &unk_2108053E2;
      if (*(_QWORD *)(v22 + v20 + 8))
        v54 = *(void **)v52;
      else
        v54 = &unk_2108053E2;
      *(_DWORD *)buf = 136315650;
      v60 = "rigHasOrphanConstraint";
      v61 = 2080;
      v62 = v53;
      v63 = 2080;
      v64 = v54;
      _os_log_error_impl(&dword_21078E000, v30, OS_LOG_TYPE_ERROR, "%s: Joint '%s' for constraint '%s' cannot be found in rig", buf, 0x20u);
    }
    v19 = 702;
    goto LABEL_69;
  }
  v25 = 0;
LABEL_41:
  v26 = FIK::defaultAllocator((FIK *)v7);
  v27 = v26;
  if (((v25 + 7) & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v28 = (void *)((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), unint64_t, uint64_t))(*v26)[2])(v26, 4 * ((v25 + 7) & 0xFFFFFFFFFFFFFFF8), 4);
    v29 = (uint64_t)v28;
    if (4 * ((v25 + 7) & 0xFFFFFFFFFFFFFFF8))
      bzero(v28, 4 * ((v25 + 7) & 0xFFFFFFFFFFFFFFF8));
  }
  else
  {
    v29 = 0;
  }
  if (a1[22])
  {
    v31 = 0;
    v32 = 0;
    do
    {
      v33 = a1[24] + v31;
      v34 = *(_QWORD *)(v33 + 32);
      if (v34)
        v35 = *(void **)(v33 + 24);
      else
        v35 = &unk_2108053E2;
      *(_DWORD *)(v29 + 4 * v32++) = FIK::IKRigUtils::getBoneIndex<FIK::MoCapBone,void>(v35, v34, v2);
      v31 += 256;
    }
    while (v32 < a1[22]);
  }
  v36 = 126 - 2 * __clz(v25);
  if (v25)
    v37 = v36;
  else
    v37 = 0;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<int>,false>(v29, (int *)(v29 + 4 * v25), (uint64_t)buf, v37, 1);
  v38 = v29;
  if (v25)
  {
    v38 = v29 - 4;
    v39 = 4 * v25 - 4;
    while (v39)
    {
      v40 = *(_DWORD *)(v38 + 4);
      v41 = *(_DWORD *)(v38 + 8);
      v38 += 4;
      v39 -= 4;
      if (v40 == v41)
        goto LABEL_60;
    }
  }
  else
  {
LABEL_60:
    if (v38 != v29 + 4 * v25)
    {
      v42 = ikinemaLogObject()[2];
      if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
        validateRigHierarchy<FIK::GameRig>(v42, v43, v44, v45, v46, v47, v48, v49);
      v50 = 1;
      if (!v29)
        goto LABEL_67;
      goto LABEL_66;
    }
  }
  v50 = 0;
  if (v29)
LABEL_66:
    ((void (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v27)[3])(v27, v29, 0, 8);
LABEL_67:
  if (v50)
  {
    v19 = 704;
    goto LABEL_69;
  }
  return 1;
}

uint64_t CoreIKRig::finalizeChanges(CoreIKRig *this, __CFError **a2)
{
  _QWORD *v4;
  int v5;
  int v6;
  uint64_t result;

  v4 = (_QWORD *)((char *)this + 16);
  v5 = *((_DWORD *)this + 88);
  if (v5 == 1)
  {
    FIK::Serialisation::fixUpRigIndices((uint64_t)this + 16);
    result = validateRigHierarchy<FIK::MoCapRig>(v4, a2);
    *((_BYTE *)this + 368) = result ^ 1;
  }
  else
  {
    if (v5)
      return 0;
    FIK::Serialisation::fixUpRigIndices((uint64_t)this + 16);
    v6 = validateRigHierarchy<FIK::GameRig>(v4, a2);
    *((_BYTE *)this + 368) = v6 ^ 1;
    if (((v6 ^ 1) & 1) != 0)
    {
      return 0;
    }
    else
    {
      FIK::IKRigUtils::rebalanceTaskWeights((uint64_t)v4);
      return 1;
    }
  }
  return result;
}

_QWORD *CoreIKRig::createSolver(CoreIKRig *this)
{
  int v1;

  v1 = *(_DWORD *)this;
  if (*(_DWORD *)this == 3)
    return CoreIK::createSolverObject<CoreIK::IKSolverRetarget>(this);
  if (v1 == 2 || v1 == 1)
    return CoreIK::createSolverObject<CoreIK::IKSolverGeneric>(this);
  return 0;
}

_QWORD *CoreIK::createSolverObject<CoreIK::IKSolverGeneric>(FIK *a1)
{
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *result;
  void (***v10)(FIK::CrtAllocator *__hidden);

  if (*((_DWORD *)a1 + 88))
  {
    v1 = ikinemaLogObject()[1];
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
      CoreIK::createSolverObject<CoreIK::IKSolverGeneric>(v1, v2, v3, v4, v5, v6, v7, v8);
    return 0;
  }
  else
  {
    v10 = FIK::defaultAllocator(a1);
    result = (_QWORD *)((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, uint64_t))(*v10)[2])(v10, 560, 16);
    if (result)
      return CoreIK::IKSolverGeneric::IKSolverGeneric(result);
  }
  return result;
}

_QWORD *CoreIK::createSolverObject<CoreIK::IKSolverRetarget>(FIK *a1)
{
  void (***v1)(FIK::CrtAllocator *__hidden);
  _QWORD *result;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (*((_DWORD *)a1 + 88) == 1)
  {
    v1 = FIK::defaultAllocator(a1);
    result = (_QWORD *)((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, uint64_t))(*v1)[2])(v1, 640, 16);
    if (result)
      return CoreIK::IKSolverRetarget::IKSolverRetarget(result);
  }
  else
  {
    v3 = ikinemaLogObject()[1];
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      CoreIK::createSolverObject<CoreIK::IKSolverGeneric>(v3, v4, v5, v6, v7, v8, v9, v10);
    return 0;
  }
  return result;
}

__n128 std::__variant_detail::__alt<0ul,FIK::GameRig>::__alt[abi:nn180100]<FIK::GameRig>(uint64_t *a1, uint64_t a2)
{
  uint64_t *v3;
  __int128 v4;
  __int128 v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __n128 result;

  v3 = IKString::IKString(a1, (uint64_t *)a2, *(_QWORD *)(a2 + 16));
  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)((char *)v3 + 36) = *(_OWORD *)(a2 + 36);
  *(_OWORD *)(v3 + 3) = v4;
  v5 = *(_OWORD *)(a2 + 80);
  *((_OWORD *)v3 + 4) = *(_OWORD *)(a2 + 64);
  *((_OWORD *)v3 + 5) = v5;
  *((_OWORD *)v3 + 6) = *(_OWORD *)(a2 + 96);
  v6 = *(_DWORD *)(a2 + 120);
  v3[14] = *(_QWORD *)(a2 + 112);
  *((_DWORD *)v3 + 30) = v6;
  v7 = *(_DWORD *)(a2 + 128);
  *(_DWORD *)((char *)v3 + 131) = *(_DWORD *)(a2 + 131);
  *((_DWORD *)v3 + 32) = v7;
  *((_OWORD *)v3 + 9) = *(_OWORD *)(a2 + 144);
  *((_OWORD *)v3 + 10) = *(_OWORD *)(a2 + 160);
  v8 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a2 + 176) = 0;
  v3[22] = v8;
  v9 = *(_QWORD *)(a2 + 184);
  v10 = *(_OWORD *)(a2 + 192);
  *(_QWORD *)(a2 + 184) = 0;
  v3[23] = v9;
  *(_QWORD *)(a2 + 192) = 0;
  *((_OWORD *)v3 + 12) = v10;
  v11 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a2 + 208) = 0;
  v3[26] = v11;
  v12 = *(_QWORD *)(a2 + 216);
  v13 = *(_OWORD *)(a2 + 224);
  *(_QWORD *)(a2 + 216) = 0;
  v3[27] = v12;
  *(_QWORD *)(a2 + 224) = 0;
  *((_OWORD *)v3 + 14) = v13;
  v14 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a2 + 240) = 0;
  v3[30] = v14;
  v15 = *(_QWORD *)(a2 + 248);
  v16 = *(_OWORD *)(a2 + 256);
  *(_QWORD *)(a2 + 248) = 0;
  v3[31] = v15;
  *(_QWORD *)(a2 + 256) = 0;
  *((_OWORD *)v3 + 16) = v16;
  v17 = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a2 + 272) = 0;
  v3[34] = v17;
  v18 = *(_QWORD *)(a2 + 280);
  v19 = *(_OWORD *)(a2 + 288);
  *(_QWORD *)(a2 + 280) = 0;
  v3[35] = v18;
  *(_QWORD *)(a2 + 288) = 0;
  *((_OWORD *)v3 + 18) = v19;
  v20 = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a2 + 304) = 0;
  v3[38] = v20;
  v21 = *(_QWORD *)(a2 + 312);
  result = *(__n128 *)(a2 + 320);
  *(_QWORD *)(a2 + 312) = 0;
  v3[39] = v21;
  *(_QWORD *)(a2 + 320) = 0;
  *((__n128 *)v3 + 20) = result;
  return result;
}

__n128 std::__variant_detail::__alt<1ul,FIK::MoCapRig>::__alt[abi:nn180100]<FIK::MoCapRig>(uint64_t *a1, uint64_t a2)
{
  uint64_t *v3;
  __int128 v4;
  __int128 v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __n128 result;

  v3 = IKString::IKString(a1, (uint64_t *)a2, *(_QWORD *)(a2 + 16));
  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)((char *)v3 + 36) = *(_OWORD *)(a2 + 36);
  *(_OWORD *)(v3 + 3) = v4;
  v5 = *(_OWORD *)(a2 + 80);
  *((_OWORD *)v3 + 4) = *(_OWORD *)(a2 + 64);
  *((_OWORD *)v3 + 5) = v5;
  *((_OWORD *)v3 + 6) = *(_OWORD *)(a2 + 96);
  v6 = *(_DWORD *)(a2 + 120);
  v3[14] = *(_QWORD *)(a2 + 112);
  *((_DWORD *)v3 + 30) = v6;
  v7 = *(_DWORD *)(a2 + 128);
  *(_DWORD *)((char *)v3 + 131) = *(_DWORD *)(a2 + 131);
  *((_DWORD *)v3 + 32) = v7;
  *((_OWORD *)v3 + 9) = *(_OWORD *)(a2 + 144);
  *((_OWORD *)v3 + 10) = *(_OWORD *)(a2 + 160);
  v8 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a2 + 176) = 0;
  v3[22] = v8;
  v9 = *(_QWORD *)(a2 + 184);
  v10 = *(_OWORD *)(a2 + 192);
  *(_QWORD *)(a2 + 184) = 0;
  v3[23] = v9;
  *(_QWORD *)(a2 + 192) = 0;
  *((_OWORD *)v3 + 12) = v10;
  v11 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a2 + 208) = 0;
  v3[26] = v11;
  v12 = *(_QWORD *)(a2 + 216);
  v13 = *(_OWORD *)(a2 + 224);
  *(_QWORD *)(a2 + 216) = 0;
  v3[27] = v12;
  *(_QWORD *)(a2 + 224) = 0;
  *((_OWORD *)v3 + 14) = v13;
  v14 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a2 + 240) = 0;
  v3[30] = v14;
  v15 = *(_QWORD *)(a2 + 248);
  v16 = *(_OWORD *)(a2 + 256);
  *(_QWORD *)(a2 + 248) = 0;
  v3[31] = v15;
  *(_QWORD *)(a2 + 256) = 0;
  *((_OWORD *)v3 + 16) = v16;
  *((_OWORD *)v3 + 17) = *(_OWORD *)(a2 + 272);
  result = *(__n128 *)(a2 + 288);
  *((__n128 *)v3 + 18) = result;
  v3[38] = *(_QWORD *)(a2 + 304);
  return result;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<FIK::GameRig,FIK::MoCapRig>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<FIK::GameRig,FIK::MoCapRig>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = result;
  v3 = *(unsigned int *)(result + 336);
  v4 = *(unsigned int *)(a2 + 336);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      return result;
  }
  else if ((_DWORD)v4 == -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24CA6CBA0[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 336) = -1;
    return result;
  }
  v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_24CA6CBB0[v4])(&v5, result, a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN3FIK7GameRigENS8_8MoCapRigEEEEE16__generic_assignB8nn180100INS0_17__move_assignmentISB_LNS0_6_TraitE1EEEEEvOT_EUlRSH_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSP_EEEDcSH_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<FIK::GameRig,FIK::MoCapRig>>::__assign_alt[abi:nn180100]<0ul,FIK::GameRig,FIK::GameRig>(*a1, a2, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN3FIK7GameRigENS8_8MoCapRigEEEEE16__generic_assignB8nn180100INS0_17__move_assignmentISB_LNS0_6_TraitE1EEEEEvOT_EUlRSH_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSP_EEEDcSH_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<FIK::GameRig,FIK::MoCapRig>>::__assign_alt[abi:nn180100]<1ul,FIK::MoCapRig,FIK::MoCapRig>(*a1, a2, a3);
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<FIK::GameRig,FIK::MoCapRig>>::__assign_alt[abi:nn180100]<0ul,FIK::GameRig,FIK::GameRig>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  int v7;
  int v8;

  if (*(_DWORD *)(a1 + 336))
  {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<FIK::GameRig,FIK::MoCapRig>>::__emplace[abi:nn180100]<0ul,FIK::GameRig>(a1, a3);
  }
  else
  {
    IKString::operator=((uint64_t *)a2, a3);
    v5 = *(_OWORD *)(a3 + 24);
    *(_OWORD *)(a2 + 36) = *(_OWORD *)(a3 + 36);
    *(_OWORD *)(a2 + 24) = v5;
    v6 = *(_OWORD *)(a3 + 80);
    *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
    *(_OWORD *)(a2 + 80) = v6;
    *(_OWORD *)(a2 + 96) = *(_OWORD *)(a3 + 96);
    v7 = *(_DWORD *)(a3 + 120);
    *(_QWORD *)(a2 + 112) = *(_QWORD *)(a3 + 112);
    *(_DWORD *)(a2 + 120) = v7;
    v8 = *(_DWORD *)(a3 + 128);
    *(_DWORD *)(a2 + 131) = *(_DWORD *)(a3 + 131);
    *(_DWORD *)(a2 + 128) = v8;
    *(_OWORD *)(a2 + 144) = *(_OWORD *)(a3 + 144);
    *(_OWORD *)(a2 + 160) = *(_OWORD *)(a3 + 160);
    FIK::IKArray<FIK::GameTask>::operator=((uint64_t *)(a2 + 176), (__int128 *)(a3 + 176));
    FIK::IKArray<FIK::RigBone>::operator=((uint64_t *)(a2 + 208), (__int128 *)(a3 + 208));
    FIK::IKArray<IKString>::operator=((uint64_t *)(a2 + 240), (__int128 *)(a3 + 240));
    FIK::IKArray<unsigned int>::operator=((uint64_t *)(a2 + 272), (__int128 *)(a3 + 272));
    FIK::IKArray<FIK::AimSetup>::operator=((uint64_t *)(a2 + 304), (__int128 *)(a3 + 304));
  }
}

uint64_t *FIK::IKArray<FIK::GameTask>::operator=(uint64_t *a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  _OWORD v6[2];

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  v6[0] = v3;
  v6[1] = v4;
  FIK::swap(a1, (uint64_t *)v6);
  FIK::IKArray<FIK::GameTask>::~IKArray((uint64_t *)v6);
  return a1;
}

uint64_t *FIK::IKArray<FIK::RigBone>::operator=(uint64_t *a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  _OWORD v6[2];

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  v6[0] = v3;
  v6[1] = v4;
  FIK::swap(a1, (uint64_t *)v6);
  FIK::IKArray<FIK::RigBone>::~IKArray((uint64_t *)v6);
  return a1;
}

uint64_t *FIK::IKArray<IKString>::operator=(uint64_t *a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  _OWORD v6[2];

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  v6[0] = v3;
  v6[1] = v4;
  FIK::swap(a1, (uint64_t *)v6);
  FIK::IKArray<IKString>::~IKArray((uint64_t)v6);
  return a1;
}

uint64_t *FIK::IKArray<FIK::AimSetup>::operator=(uint64_t *a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  _OWORD v6[2];

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  v6[0] = v3;
  v6[1] = v4;
  FIK::swap(a1, (uint64_t *)v6);
  FIK::IKArray<FIK::AimSetup>::~IKArray((uint64_t *)v6);
  return a1;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<FIK::GameRig,FIK::MoCapRig>>::__emplace[abi:nn180100]<0ul,FIK::GameRig>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;

  v4 = *(unsigned int *)(a1 + 336);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_24CA6CBA0[v4])(&v5, a1);
  *(_DWORD *)(a1 + 336) = -1;
  std::__variant_detail::__alt<0ul,FIK::GameRig>::__alt[abi:nn180100]<FIK::GameRig>((uint64_t *)a1, a2);
  *(_DWORD *)(a1 + 336) = 0;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<FIK::GameRig,FIK::MoCapRig>>::__assign_alt[abi:nn180100]<1ul,FIK::MoCapRig,FIK::MoCapRig>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  int v7;
  int v8;

  if (*(_DWORD *)(a1 + 336) == 1)
  {
    IKString::operator=((uint64_t *)a2, a3);
    v5 = *(_OWORD *)(a3 + 24);
    *(_OWORD *)(a2 + 36) = *(_OWORD *)(a3 + 36);
    *(_OWORD *)(a2 + 24) = v5;
    v6 = *(_OWORD *)(a3 + 80);
    *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
    *(_OWORD *)(a2 + 80) = v6;
    *(_OWORD *)(a2 + 96) = *(_OWORD *)(a3 + 96);
    v7 = *(_DWORD *)(a3 + 120);
    *(_QWORD *)(a2 + 112) = *(_QWORD *)(a3 + 112);
    *(_DWORD *)(a2 + 120) = v7;
    v8 = *(_DWORD *)(a3 + 128);
    *(_DWORD *)(a2 + 131) = *(_DWORD *)(a3 + 131);
    *(_DWORD *)(a2 + 128) = v8;
    *(_OWORD *)(a2 + 144) = *(_OWORD *)(a3 + 144);
    *(_OWORD *)(a2 + 160) = *(_OWORD *)(a3 + 160);
    FIK::IKArray<FIK::MoCapTask>::operator=((uint64_t *)(a2 + 176), (__int128 *)(a3 + 176));
    FIK::IKArray<FIK::MoCapBone>::operator=((uint64_t *)(a2 + 208), (__int128 *)(a3 + 208));
    FIK::IKArray<FIK::RigBoneBase>::operator=((uint64_t *)(a2 + 240), (__int128 *)(a3 + 240));
    *(_OWORD *)(a2 + 272) = *(_OWORD *)(a3 + 272);
    *(_OWORD *)(a2 + 288) = *(_OWORD *)(a3 + 288);
    *(_QWORD *)(a2 + 304) = *(_QWORD *)(a3 + 304);
  }
  else
  {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<FIK::GameRig,FIK::MoCapRig>>::__emplace[abi:nn180100]<1ul,FIK::MoCapRig>(a1, a3);
  }
}

uint64_t *FIK::IKArray<FIK::MoCapTask>::operator=(uint64_t *a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  _OWORD v6[2];

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  v6[0] = v3;
  v6[1] = v4;
  FIK::swap(a1, (uint64_t *)v6);
  FIK::IKArray<FIK::MoCapTask>::~IKArray((uint64_t *)v6);
  return a1;
}

uint64_t *FIK::IKArray<FIK::MoCapBone>::operator=(uint64_t *a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  _OWORD v6[2];

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  v6[0] = v3;
  v6[1] = v4;
  FIK::swap(a1, (uint64_t *)v6);
  FIK::IKArray<FIK::MoCapBone>::~IKArray((uint64_t *)v6);
  return a1;
}

uint64_t *FIK::IKArray<FIK::RigBoneBase>::operator=(uint64_t *a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  _OWORD v6[2];

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  v6[0] = v3;
  v6[1] = v4;
  FIK::swap(a1, (uint64_t *)v6);
  FIK::IKArray<FIK::RigBoneBase>::~IKArray((uint64_t *)v6);
  return a1;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<FIK::GameRig,FIK::MoCapRig>>::__emplace[abi:nn180100]<1ul,FIK::MoCapRig>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;

  v4 = *(unsigned int *)(a1 + 336);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_24CA6CBA0[v4])(&v5, a1);
  *(_DWORD *)(a1 + 336) = -1;
  std::__variant_detail::__alt<1ul,FIK::MoCapRig>::__alt[abi:nn180100]<FIK::MoCapRig>((uint64_t *)a1, a2);
  *(_DWORD *)(a1 + 336) = 1;
}

uint64_t *std::__variant_detail::__assignment<std::__variant_detail::__traits<FIK::GameRig,FIK::MoCapRig>>::__assign_alt[abi:nn180100]<0ul,FIK::GameRig,FIK::GameRig&>(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  IKString *v6;
  char *v7;
  __int128 v8;
  __int128 v9;
  int v10;
  int v11;

  if (a1[84])
    return (uint64_t *)std::__variant_detail::__assignment<std::__variant_detail::__traits<FIK::GameRig,FIK::MoCapRig>>::__emplace[abi:nn180100]<0ul,FIK::GameRig&>(a1, a3);
  v6 = *(IKString **)(a3 + 8);
  if (v6)
    v7 = *(char **)a3;
  else
    v7 = (char *)&unk_2108053E2;
  IKString::assign((_QWORD *)a2, v7, v6);
  v8 = *(_OWORD *)(a3 + 24);
  *(_OWORD *)(a2 + 36) = *(_OWORD *)(a3 + 36);
  *(_OWORD *)(a2 + 24) = v8;
  v9 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(a2 + 80) = v9;
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a3 + 96);
  v10 = *(_DWORD *)(a3 + 120);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(a3 + 112);
  *(_DWORD *)(a2 + 120) = v10;
  v11 = *(_DWORD *)(a3 + 128);
  *(_DWORD *)(a2 + 131) = *(_DWORD *)(a3 + 131);
  *(_DWORD *)(a2 + 128) = v11;
  *(_OWORD *)(a2 + 144) = *(_OWORD *)(a3 + 144);
  *(_OWORD *)(a2 + 160) = *(_OWORD *)(a3 + 160);
  FIK::IKArray<FIK::GameTask>::operator=((uint64_t *)(a2 + 176), (uint64_t *)(a3 + 176));
  FIK::IKArray<FIK::RigBone>::operator=((uint64_t *)(a2 + 208), (uint64_t *)(a3 + 208));
  FIK::IKArray<IKString>::operator=((uint64_t *)(a2 + 240), (uint64_t *)(a3 + 240));
  FIK::IKArray<int>::operator=((uint64_t *)(a2 + 272), (uint64_t *)(a3 + 272));
  return FIK::IKArray<FIK::AimSetup>::operator=((uint64_t *)(a2 + 304), (uint64_t *)(a3 + 304));
}

uint64_t *FIK::IKArray<FIK::GameTask>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  if (*a2 >= (unint64_t)a1[1])
  {
    v12 = a2[1];
    v13 = a1[3];
    if (v12)
    {
      v14 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(a1[3], 240 * v12, 16);
      v15 = v14;
      if (240 * v12)
        bzero(v14, 240 * v12);
    }
    else
    {
      v15 = 0;
    }
    v16 = *a2;
    if (*a2)
    {
      v17 = 0;
      v18 = a2[2];
      do
      {
        v19 = &v15[v17];
        IKString::IKString((IKString *)&v15[v17], (const IKString *)(v18 + v17));
        IKString::IKString((IKString *)&v15[v17 + 24], (const IKString *)(v18 + v17 + 24));
        v20 = *(_OWORD *)(v18 + v17 + 48);
        *((_QWORD *)v19 + 8) = *(_QWORD *)(v18 + v17 + 64);
        *((_OWORD *)v19 + 3) = v20;
        *((_OWORD *)v19 + 5) = *(_OWORD *)(v18 + v17 + 80);
        *((_OWORD *)v19 + 6) = *(_OWORD *)(v18 + v17 + 96);
        *((_OWORD *)v19 + 7) = *(_OWORD *)(v18 + v17 + 112);
        *((_OWORD *)v19 + 8) = *(_OWORD *)(v18 + v17 + 128);
        *((_OWORD *)v19 + 9) = *(_OWORD *)(v18 + v17 + 144);
        *((_OWORD *)v19 + 10) = *(_OWORD *)(v18 + v17 + 160);
        *((_OWORD *)v19 + 11) = *(_OWORD *)(v18 + v17 + 176);
        *((_OWORD *)v19 + 12) = *(_OWORD *)(v18 + v17 + 192);
        *((_OWORD *)v19 + 13) = *(_OWORD *)(v18 + v17 + 208);
        *((_OWORD *)v19 + 14) = *(_OWORD *)(v18 + v17 + 224);
        v17 += 240;
        --v16;
      }
      while (v16);
    }
    v22 = a1[2];
    v21 = a1[3];
    a1[1] = v12;
    a1[2] = (uint64_t)v15;
    a1[3] = v13;
    if (v22)
      (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v21 + 24))(v21, v22, 0, 8);
  }
  else
  {
    v4 = *a1;
    if (*a1)
    {
      v5 = a1[2];
      do
      {
        std::__destroy_at[abi:nn180100]<FIK::GameTask,0>(v5);
        v5 += 240;
        --v4;
      }
      while (v4);
    }
    *a1 = 0;
    v6 = *a2;
    if (*a2)
    {
      v7 = 0;
      v8 = a1[2];
      v9 = a2[2];
      do
      {
        v10 = v8 + v7;
        IKString::IKString((IKString *)(v8 + v7), (const IKString *)(v9 + v7));
        IKString::IKString((IKString *)(v8 + v7 + 24), (const IKString *)(v9 + v7 + 24));
        v11 = *(_OWORD *)(v9 + v7 + 48);
        *(_QWORD *)(v10 + 64) = *(_QWORD *)(v9 + v7 + 64);
        *(_OWORD *)(v10 + 48) = v11;
        *(_OWORD *)(v10 + 80) = *(_OWORD *)(v9 + v7 + 80);
        *(_OWORD *)(v10 + 96) = *(_OWORD *)(v9 + v7 + 96);
        *(_OWORD *)(v10 + 112) = *(_OWORD *)(v9 + v7 + 112);
        *(_OWORD *)(v10 + 128) = *(_OWORD *)(v9 + v7 + 128);
        *(_OWORD *)(v10 + 144) = *(_OWORD *)(v9 + v7 + 144);
        *(_OWORD *)(v10 + 160) = *(_OWORD *)(v9 + v7 + 160);
        *(_OWORD *)(v10 + 176) = *(_OWORD *)(v9 + v7 + 176);
        *(_OWORD *)(v10 + 192) = *(_OWORD *)(v9 + v7 + 192);
        *(_OWORD *)(v10 + 208) = *(_OWORD *)(v9 + v7 + 208);
        *(_OWORD *)(v10 + 224) = *(_OWORD *)(v9 + v7 + 224);
        v7 += 240;
        --v6;
      }
      while (v6);
    }
  }
  *a1 = *a2;
  return a1;
}

uint64_t *FIK::IKArray<int>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _DWORD *v5;
  int *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  int *v13;
  _DWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  if (*a2 >= (unint64_t)a1[1])
  {
    v8 = a2[1];
    v9 = a1[3];
    if (v8)
    {
      v10 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(a1[3], 4 * v8, 4);
      v11 = v10;
      if (4 * v8)
        bzero(v10, 4 * v8);
    }
    else
    {
      v11 = 0;
    }
    v12 = *a2;
    if (*a2)
    {
      v13 = (int *)a2[2];
      v14 = v11;
      do
      {
        v15 = *v13++;
        *v14++ = v15;
        --v12;
      }
      while (v12);
    }
    v17 = a1[2];
    v16 = a1[3];
    a1[1] = v8;
    a1[2] = (uint64_t)v11;
    a1[3] = v9;
    if (v17)
      (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v16 + 24))(v16, v17, 0, 8);
  }
  else
  {
    *a1 = 0;
    v4 = *a2;
    if (*a2)
    {
      v5 = (_DWORD *)a1[2];
      v6 = (int *)a2[2];
      do
      {
        v7 = *v6++;
        *v5++ = v7;
        --v4;
      }
      while (v4);
    }
  }
  *a1 = *a2;
  return a1;
}

uint64_t *FIK::IKArray<FIK::AimSetup>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;

  if (*a2 >= (unint64_t)a1[1])
  {
    v11 = a2[1];
    v12 = a1[3];
    if (v11)
    {
      v13 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(a1[3], v11 << 7, 8);
      v14 = v13;
      if (v11 << 7)
        bzero(v13, v11 << 7);
    }
    else
    {
      v14 = 0;
    }
    v15 = *a2;
    if (*a2)
    {
      v16 = 0;
      v17 = a2[2];
      do
      {
        v18 = &v14[v16];
        IKString::IKString((IKString *)&v14[v16], (const IKString *)(v17 + v16));
        *((_DWORD *)v18 + 6) = *(_DWORD *)(v17 + v16 + 24);
        IKString::IKString((IKString *)&v14[v16 + 32], (const IKString *)(v17 + v16 + 32));
        FIK::IKArray<FIK::Item>::IKArray(&v14[v16 + 56], (_QWORD *)(v17 + v16 + 56));
        FIK::IKArray<FIK::Item>::IKArray(&v14[v16 + 88], (_QWORD *)(v17 + v16 + 88));
        *((_DWORD *)v18 + 30) = *(_DWORD *)(v17 + v16 + 120);
        v16 += 128;
        --v15;
      }
      while (v15);
    }
    v20 = a1[2];
    v19 = a1[3];
    a1[1] = v11;
    a1[2] = (uint64_t)v14;
    a1[3] = v12;
    if (v20)
      (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v19 + 24))(v19, v20, 0, 8);
  }
  else
  {
    v4 = *a1;
    if (*a1)
    {
      v5 = a1[2];
      do
      {
        std::__destroy_at[abi:nn180100]<FIK::AimSetup,0>(v5);
        v5 += 128;
        --v4;
      }
      while (v4);
    }
    *a1 = 0;
    v6 = *a2;
    if (*a2)
    {
      v7 = 0;
      v8 = a1[2];
      v9 = a2[2];
      do
      {
        v10 = v8 + v7;
        IKString::IKString((IKString *)(v8 + v7), (const IKString *)(v9 + v7));
        *(_DWORD *)(v10 + 24) = *(_DWORD *)(v9 + v7 + 24);
        IKString::IKString((IKString *)(v8 + v7 + 32), (const IKString *)(v9 + v7 + 32));
        FIK::IKArray<FIK::Item>::IKArray((_QWORD *)(v8 + v7 + 56), (_QWORD *)(v9 + v7 + 56));
        FIK::IKArray<FIK::Item>::IKArray((_QWORD *)(v8 + v7 + 88), (_QWORD *)(v9 + v7 + 88));
        *(_DWORD *)(v10 + 120) = *(_DWORD *)(v9 + v7 + 120);
        v7 += 128;
        --v6;
      }
      while (v6);
    }
  }
  *a1 = *a2;
  return a1;
}

IKString *std::__variant_detail::__assignment<std::__variant_detail::__traits<FIK::GameRig,FIK::MoCapRig>>::__emplace[abi:nn180100]<0ul,FIK::GameRig&>(unsigned int *a1, uint64_t a2)
{
  uint64_t v4;
  IKString *result;
  char v6;

  v4 = a1[84];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, unsigned int *))off_24CA6CBA0[v4])(&v6, a1);
  a1[84] = -1;
  result = std::__variant_detail::__alt<0ul,FIK::GameRig>::__alt[abi:nn180100]<FIK::GameRig&>((IKString *)a1, a2);
  a1[84] = 0;
  return result;
}

IKString *std::__variant_detail::__alt<0ul,FIK::GameRig>::__alt[abi:nn180100]<FIK::GameRig&>(IKString *a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  int v7;
  int v8;

  IKString::IKString(a1, (const IKString *)a2);
  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(v5 + 36) = *(_OWORD *)(a2 + 36);
  *(_OWORD *)(v5 + 24) = v4;
  v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v5 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v5 + 80) = v6;
  *(_OWORD *)(v5 + 96) = *(_OWORD *)(a2 + 96);
  v7 = *(_DWORD *)(a2 + 120);
  *(_QWORD *)(v5 + 112) = *(_QWORD *)(a2 + 112);
  *(_DWORD *)(v5 + 120) = v7;
  v8 = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(v5 + 131) = *(_DWORD *)(a2 + 131);
  *(_DWORD *)(v5 + 128) = v8;
  *(_OWORD *)(v5 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(v5 + 160) = *(_OWORD *)(a2 + 160);
  FIK::IKArray<FIK::GameTask>::IKArray((_QWORD *)(v5 + 176), (_QWORD *)(a2 + 176));
  FIK::IKArray<FIK::RigBone>::IKArray((_QWORD *)a1 + 26, (_QWORD *)(a2 + 208));
  FIK::IKArray<IKString>::IKArray((_QWORD *)a1 + 30, (_QWORD *)(a2 + 240));
  FIK::IKArray<int>::IKArray((_QWORD *)a1 + 34, (_QWORD *)(a2 + 272));
  FIK::IKArray<FIK::AimSetup>::IKArray((_QWORD *)a1 + 38, (_QWORD *)(a2 + 304));
  return a1;
}

uint64_t *std::__variant_detail::__assignment<std::__variant_detail::__traits<FIK::GameRig,FIK::MoCapRig>>::__assign_alt[abi:nn180100]<1ul,FIK::MoCapRig,FIK::MoCapRig&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  IKString *v5;
  char *v6;
  __int128 v7;
  __int128 v8;
  int v9;
  int v10;
  uint64_t *result;

  if (*(_DWORD *)(a1 + 336) != 1)
    return (uint64_t *)std::__variant_detail::__assignment<std::__variant_detail::__traits<FIK::GameRig,FIK::MoCapRig>>::__emplace[abi:nn180100]<1ul,FIK::MoCapRig&>(a1, a3);
  v5 = *(IKString **)(a3 + 8);
  if (v5)
    v6 = *(char **)a3;
  else
    v6 = (char *)&unk_2108053E2;
  IKString::assign((_QWORD *)a2, v6, v5);
  v7 = *(_OWORD *)(a3 + 24);
  *(_OWORD *)(a2 + 36) = *(_OWORD *)(a3 + 36);
  *(_OWORD *)(a2 + 24) = v7;
  v8 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(a2 + 80) = v8;
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a3 + 96);
  v9 = *(_DWORD *)(a3 + 120);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(a3 + 112);
  *(_DWORD *)(a2 + 120) = v9;
  v10 = *(_DWORD *)(a3 + 128);
  *(_DWORD *)(a2 + 131) = *(_DWORD *)(a3 + 131);
  *(_DWORD *)(a2 + 128) = v10;
  *(_OWORD *)(a2 + 144) = *(_OWORD *)(a3 + 144);
  *(_OWORD *)(a2 + 160) = *(_OWORD *)(a3 + 160);
  FIK::IKArray<FIK::MoCapTask>::operator=((uint64_t *)(a2 + 176), (uint64_t *)(a3 + 176));
  FIK::IKArray<FIK::MoCapBone>::operator=((uint64_t *)(a2 + 208), (uint64_t *)(a3 + 208));
  result = FIK::IKArray<FIK::RigBoneBase>::operator=((uint64_t *)(a2 + 240), (uint64_t *)(a3 + 240));
  *(_OWORD *)(a2 + 272) = *(_OWORD *)(a3 + 272);
  *(_OWORD *)(a2 + 288) = *(_OWORD *)(a3 + 288);
  *(_QWORD *)(a2 + 304) = *(_QWORD *)(a3 + 304);
  return result;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<FIK::GameRig,FIK::MoCapRig>>::__emplace[abi:nn180100]<1ul,FIK::MoCapRig&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  char v6;

  v4 = *(unsigned int *)(a1 + 336);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_24CA6CBA0[v4])(&v6, a1);
  *(_DWORD *)(a1 + 336) = -1;
  result = std::__variant_detail::__alt<1ul,FIK::MoCapRig>::__alt[abi:nn180100]<FIK::MoCapRig const&>(a1, a2);
  *(_DWORD *)(a1 + 336) = 1;
  return result;
}

uint64_t FIK::IKRigUtils::GetTaskIndexByBoneName<FIK::GameRig>(void *__s2, size_t __n, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;

  v3 = *(_QWORD *)(a3 + 176);
  if (!v3)
    return 0xFFFFFFFFLL;
  v6 = 0;
  v7 = *(_QWORD *)(a3 + 192) + 32;
  v8 = (uint64_t *)v7;
  while (1)
  {
    v10 = *v8;
    v8 += 30;
    v9 = v10;
    v11 = v10 ? *(const void **)(v7 - 8) : &unk_2108053E2;
    if (v9 == __n && !memcmp(v11, __s2, __n))
      break;
    ++v6;
    v7 = (uint64_t)v8;
    if (v3 == v6)
      return 0xFFFFFFFFLL;
  }
  return v6;
}

__n128 copySettingsToConstraint<FIK::GameTask>(uint64_t a1, char *a2, IKString *a3, char *a4, IKString *a5, uint64_t a6)
{
  uint8x8_t v10;
  uint16x8_t v11;
  __n128 result;

  IKString::assign((_QWORD *)a6, a2, a3);
  IKString::assign((_QWORD *)(a6 + 24), a4, a5);
  *(_WORD *)(a6 + 52) = *(_WORD *)(a1 + 16);
  v10.i32[0] = *(_DWORD *)(a1 + 20);
  v11 = vmovl_u8(v10);
  *(_BYTE *)(a6 + 55) = v11.i8[0] != 0;
  *(_BYTE *)(a6 + 56) = *(_BYTE *)(a1 + 21) != 0;
  *(_BYTE *)(a6 + 57) = *(_BYTE *)(a1 + 22) != 0;
  v11.i32[0] = *(_DWORD *)(a1 + 24);
  *(_BYTE *)(a6 + 58) = vmovl_u8(*(uint8x8_t *)v11.i8).u8[0] != 0;
  *(_BYTE *)(a6 + 59) = *(_BYTE *)(a1 + 25) != 0;
  *(_BYTE *)(a6 + 60) = *(_BYTE *)(a1 + 26) != 0;
  *(_QWORD *)(a6 + 64) = *(_QWORD *)(a1 + 28);
  *(_OWORD *)(a6 + 80) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a6 + 96) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a6 + 112) = *(_OWORD *)(a1 + 80);
  result = *(__n128 *)(a1 + 96);
  *(__n128 *)(a6 + 128) = result;
  return result;
}

uint64_t FIK::IKRigUtils::GetTaskIndexByBoneName<FIK::MoCapRig>(void *__s2, size_t __n, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  _QWORD *i;
  const void *v8;

  v3 = *(_QWORD *)(a3 + 176);
  if (!v3)
    return 0xFFFFFFFFLL;
  v6 = 0;
  for (i = (_QWORD *)(*(_QWORD *)(a3 + 192) + 32); ; i += 32)
  {
    v8 = *i ? (const void *)*(i - 1) : &unk_2108053E2;
    if (*i == __n && !memcmp(v8, __s2, __n))
      break;
    if (v3 == ++v6)
      return 0xFFFFFFFFLL;
  }
  return v6;
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<FIK::IKArrayIterator<FIK::GameTask>,FIK::IKArrayIterator<FIK::GameTask>,FIK::IKArrayIterator<FIK::GameTask>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  __int128 v8;

  v4 = a4;
  v5 = a2;
  if (a2 != a3)
  {
    v7 = a4;
    do
    {
      IKString::operator=((uint64_t *)v7, v5);
      IKString::operator=((uint64_t *)(v7 + 24), v5 + 24);
      v8 = *(_OWORD *)(v5 + 48);
      *(_QWORD *)(v7 + 64) = *(_QWORD *)(v5 + 64);
      *(_OWORD *)(v7 + 48) = v8;
      *(_OWORD *)(v7 + 80) = *(_OWORD *)(v5 + 80);
      *(_OWORD *)(v7 + 96) = *(_OWORD *)(v5 + 96);
      *(_OWORD *)(v7 + 112) = *(_OWORD *)(v5 + 112);
      *(_OWORD *)(v7 + 128) = *(_OWORD *)(v5 + 128);
      *(_OWORD *)(v7 + 144) = *(_OWORD *)(v5 + 144);
      *(_OWORD *)(v7 + 160) = *(_OWORD *)(v5 + 160);
      *(_OWORD *)(v7 + 176) = *(_OWORD *)(v5 + 176);
      *(_OWORD *)(v7 + 192) = *(_OWORD *)(v5 + 192);
      *(_OWORD *)(v7 + 208) = *(_OWORD *)(v5 + 208);
      *(_OWORD *)(v7 + 224) = *(_OWORD *)(v5 + 224);
      v4 += 240;
      v5 += 240;
      v7 += 240;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<FIK::IKArrayIterator<FIK::MoCapTask>,FIK::IKArrayIterator<FIK::MoCapTask>,FIK::IKArrayIterator<FIK::MoCapTask>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  __int128 v8;
  int v9;

  v4 = a4;
  v5 = a2;
  if (a2 != a3)
  {
    v7 = a4;
    do
    {
      IKString::operator=((uint64_t *)v7, v5);
      IKString::operator=((uint64_t *)(v7 + 24), v5 + 24);
      v8 = *(_OWORD *)(v5 + 48);
      *(_QWORD *)(v7 + 64) = *(_QWORD *)(v5 + 64);
      *(_OWORD *)(v7 + 48) = v8;
      *(_OWORD *)(v7 + 80) = *(_OWORD *)(v5 + 80);
      *(_OWORD *)(v7 + 96) = *(_OWORD *)(v5 + 96);
      *(_OWORD *)(v7 + 112) = *(_OWORD *)(v5 + 112);
      *(_OWORD *)(v7 + 128) = *(_OWORD *)(v5 + 128);
      *(_OWORD *)(v7 + 144) = *(_OWORD *)(v5 + 144);
      *(_OWORD *)(v7 + 160) = *(_OWORD *)(v5 + 160);
      IKString::operator=((uint64_t *)(v7 + 176), v5 + 176);
      v9 = *(_DWORD *)(v5 + 200);
      *(_WORD *)(v7 + 204) = *(_WORD *)(v5 + 204);
      *(_DWORD *)(v7 + 200) = v9;
      *(_OWORD *)(v7 + 208) = *(_OWORD *)(v5 + 208);
      *(_OWORD *)(v7 + 224) = *(_OWORD *)(v5 + 224);
      *(_OWORD *)(v7 + 240) = *(_OWORD *)(v5 + 240);
      v4 += 256;
      v5 += 256;
      v7 += 256;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

float copySettingsToJoint<FIK::RigBone>(uint64_t a1, char *a2, IKString *a3, char *a4, IKString *a5, uint64_t a6)
{
  __int128 v10;
  uint16x8_t v11;
  int v12;
  int v13;
  float result;

  IKString::assign((_QWORD *)(a6 + 8), a2, a3);
  IKString::assign((_QWORD *)(a6 + 32), a4, a5);
  *(_OWORD *)(a6 + 64) = *(_OWORD *)(a1 + 16);
  v10 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a6 + 80) = v10;
  *(_BYTE *)(a6 + 96) = *(_BYTE *)(a1 + 48);
  LODWORD(v10) = *(_DWORD *)(a1 + 52);
  v11 = vmovl_u8(*(uint8x8_t *)&v10);
  *(_BYTE *)(a6 + 97) = v11.i8[0] != 0;
  *(_BYTE *)(a6 + 98) = *(_BYTE *)(a1 + 53) != 0;
  *(_BYTE *)(a6 + 99) = *(_BYTE *)(a1 + 54) != 0;
  *(_BYTE *)(a6 + 100) = *(_BYTE *)(a1 + 56);
  *(_BYTE *)(a6 + 101) = *(_BYTE *)(a1 + 124);
  *(_BYTE *)(a6 + 102) = *(_BYTE *)(a1 + 112);
  *(_WORD *)(a6 + 103) = *(_WORD *)(a1 + 160);
  v11.i32[0] = *(_DWORD *)(a1 + 116);
  v12 = *(_DWORD *)(a1 + 120);
  *(_BYTE *)(a6 + 105) = vmovl_u8(*(uint8x8_t *)v11.i8).u8[0] != 0;
  *(_BYTE *)(a6 + 106) = *(_BYTE *)(a1 + 117) != 0;
  *(_BYTE *)(a6 + 107) = *(_BYTE *)(a1 + 118) != 0;
  v13 = *(_DWORD *)(a1 + 60);
  *(_DWORD *)(a6 + 116) = *(_DWORD *)(a1 + 208);
  *(_DWORD *)(a6 + 120) = v13;
  *(_DWORD *)(a6 + 124) = *(_DWORD *)(a1 + 164);
  *(_DWORD *)(a6 + 132) = v12;
  *(float *)(a6 + 144) = 1.0 - *(float *)(a1 + 80);
  *(float *)(a6 + 148) = 1.0 - *(float *)(a1 + 84);
  *(float *)(a6 + 152) = 1.0 - *(float *)(a1 + 88);
  *(_DWORD *)(a6 + 160) = *(_DWORD *)(a1 + 64);
  *(_DWORD *)(a6 + 164) = *(_DWORD *)(a1 + 68);
  *(_DWORD *)(a6 + 168) = *(_DWORD *)(a1 + 72);
  *(_DWORD *)(a6 + 128) = *(_DWORD *)(a1 + 168);
  *(_OWORD *)(a6 + 176) = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(a6 + 192) = *(_OWORD *)(a1 + 192);
  *(_OWORD *)(a6 + 208) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(a6 + 224) = *(_OWORD *)(a1 + 144);
  *(_DWORD *)(a6 + 240) = *(_DWORD *)(a1 + 96);
  *(_DWORD *)(a6 + 244) = *(_DWORD *)(a1 + 100);
  result = *(float *)(a1 + 104);
  *(float *)(a6 + 248) = result;
  return result;
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<FIK::IKArrayIterator<FIK::RigBone>,FIK::IKArrayIterator<FIK::RigBone>,FIK::IKArrayIterator<FIK::RigBone>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  v4 = a4;
  v5 = a2;
  if (a2 != a3)
  {
    v7 = a4;
    do
    {
      *(_QWORD *)v7 = *(_QWORD *)v5;
      IKString::operator=((uint64_t *)(v7 + 8), v5 + 8);
      IKString::operator=((uint64_t *)(v7 + 32), v5 + 32);
      *(_OWORD *)(v7 + 64) = *(_OWORD *)(v5 + 64);
      *(_OWORD *)(v7 + 80) = *(_OWORD *)(v5 + 80);
      v9 = *(_OWORD *)(v5 + 96);
      v8 = *(_OWORD *)(v5 + 112);
      *(_QWORD *)(v7 + 128) = *(_QWORD *)(v5 + 128);
      *(_OWORD *)(v7 + 96) = v9;
      *(_OWORD *)(v7 + 112) = v8;
      *(_OWORD *)(v7 + 144) = *(_OWORD *)(v5 + 144);
      *(_OWORD *)(v7 + 160) = *(_OWORD *)(v5 + 160);
      *(_OWORD *)(v7 + 176) = *(_OWORD *)(v5 + 176);
      *(_OWORD *)(v7 + 192) = *(_OWORD *)(v5 + 192);
      *(_OWORD *)(v7 + 208) = *(_OWORD *)(v5 + 208);
      *(_OWORD *)(v7 + 224) = *(_OWORD *)(v5 + 224);
      *(_OWORD *)(v7 + 240) = *(_OWORD *)(v5 + 240);
      v4 += 256;
      v5 += 256;
      v7 += 256;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<FIK::IKArrayIterator<FIK::MoCapBone>,FIK::IKArrayIterator<FIK::MoCapBone>,FIK::IKArrayIterator<FIK::MoCapBone>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v4 = a4;
  v5 = a2;
  if (a2 != a3)
  {
    v7 = a4;
    do
    {
      *(_QWORD *)v7 = *(_QWORD *)v5;
      IKString::operator=((uint64_t *)(v7 + 8), v5 + 8);
      IKString::operator=((uint64_t *)(v7 + 32), v5 + 32);
      *(_OWORD *)(v7 + 64) = *(_OWORD *)(v5 + 64);
      *(_OWORD *)(v7 + 80) = *(_OWORD *)(v5 + 80);
      v9 = *(_OWORD *)(v5 + 96);
      v8 = *(_OWORD *)(v5 + 112);
      *(_QWORD *)(v7 + 128) = *(_QWORD *)(v5 + 128);
      *(_OWORD *)(v7 + 96) = v9;
      *(_OWORD *)(v7 + 112) = v8;
      *(_OWORD *)(v7 + 144) = *(_OWORD *)(v5 + 144);
      *(_OWORD *)(v7 + 160) = *(_OWORD *)(v5 + 160);
      *(_OWORD *)(v7 + 176) = *(_OWORD *)(v5 + 176);
      *(_OWORD *)(v7 + 192) = *(_OWORD *)(v5 + 192);
      *(_OWORD *)(v7 + 208) = *(_OWORD *)(v5 + 208);
      *(_OWORD *)(v7 + 224) = *(_OWORD *)(v5 + 224);
      *(_OWORD *)(v7 + 240) = *(_OWORD *)(v5 + 240);
      IKString::operator=((uint64_t *)(v7 + 256), v5 + 256);
      *(_DWORD *)(v7 + 280) = *(_DWORD *)(v5 + 280);
      *(_OWORD *)(v7 + 288) = *(_OWORD *)(v5 + 288);
      *(_OWORD *)(v7 + 304) = *(_OWORD *)(v5 + 304);
      *(_OWORD *)(v7 + 320) = *(_OWORD *)(v5 + 320);
      *(_OWORD *)(v7 + 336) = *(_OWORD *)(v5 + 336);
      v10 = *(_QWORD *)(v5 + 368);
      *(_OWORD *)(v7 + 352) = *(_OWORD *)(v5 + 352);
      *(_QWORD *)(v7 + 368) = v10;
      *(_QWORD *)(v7 + 384) = *(_QWORD *)(v5 + 384);
      *(_OWORD *)(v7 + 400) = *(_OWORD *)(v5 + 400);
      FIK::IKArray<IKString>::operator=((uint64_t *)(v7 + 416), (__int128 *)(v5 + 416));
      *(_OWORD *)(v7 + 448) = *(_OWORD *)(v5 + 448);
      *(_OWORD *)(v7 + 464) = *(_OWORD *)(v5 + 464);
      *(_QWORD *)(v7 + 480) = *(_QWORD *)(v5 + 480);
      *(_OWORD *)(v7 + 496) = *(_OWORD *)(v5 + 496);
      *(_OWORD *)(v7 + 512) = *(_OWORD *)(v5 + 512);
      *(_OWORD *)(v7 + 528) = *(_OWORD *)(v5 + 528);
      v4 += 544;
      v5 += 544;
      v7 += 544;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<int>,false>(uint64_t result, int *a2, uint64_t a3, uint64_t a4, char a5)
{
  int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int *v15;
  int v16;
  int *v17;
  char v18;
  BOOL v19;
  int v20;
  int v21;
  int *v22;
  BOOL v24;
  uint64_t v25;
  int *v26;
  int v27;
  int v28;
  uint64_t v29;
  int *v30;
  int v31;
  int v32;
  uint64_t v33;

  v8 = (int *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v20 = *(a2 - 1);
        v21 = *v9;
        if (v20 < *v9)
        {
          *v9 = v20;
          *(a2 - 1) = v21;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<int>>(v9, v9 + 1, a2 - 1);
      case 4uLL:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<int>>(v9, v9 + 1, v9 + 2, a2 - 1);
      case 5uLL:
        return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<int>>(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1);
      default:
        if (v12 > 95)
        {
          if (v11 == 1)
          {
            if (v9 != a2)
              return (uint64_t)std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<int>,FIK::IKArrayIterator<int>>(v9, a2, a2, a3);
            return result;
          }
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x201)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<int>>(&v9[v13 >> 1], v9, a2 - 1);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<int>>(v9, &v9[v13 >> 1], a2 - 1);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<int>>(v9 + 1, v15 - 1, a2 - 2);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<int>>(v9 + 2, &v9[v14 + 1], a2 - 3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<int>>(v15 - 1, v15, &v9[v14 + 1]);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (*(v9 - 1) >= *v9)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,FIK::IKArrayIterator<int>,std::__less<void,void> &>(v9, a2);
            v9 = (int *)result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,FIK::IKArrayIterator<int>,std::__less<void,void> &>(v9, a2);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<int>>(v9, v17);
          v9 = v17 + 1;
          result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<int>>(v17 + 1, a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<int>,false>(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        v22 = v9 + 1;
        v24 = v9 == a2 || v22 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v24)
          {
            v25 = 0;
            v26 = v9;
            do
            {
              v28 = *v26;
              v27 = v26[1];
              v26 = v22;
              if (v27 < v28)
              {
                v29 = v25;
                while (1)
                {
                  *(int *)((char *)v9 + v29 + 4) = v28;
                  if (!v29)
                    break;
                  v28 = *(int *)((char *)v9 + v29 - 4);
                  v29 -= 4;
                  if (v27 >= v28)
                  {
                    v30 = (int *)((char *)v9 + v29 + 4);
                    goto LABEL_42;
                  }
                }
                v30 = v9;
LABEL_42:
                *v30 = v27;
              }
              v22 = v26 + 1;
              v25 += 4;
            }
            while (v26 + 1 != a2);
          }
        }
        else if (!v24)
        {
          do
          {
            v31 = *v22;
            v32 = *v8;
            if (*v22 < *v8)
            {
              v33 = 1;
              do
              {
                v8[v33] = v32;
                v32 = v8[v33 - 2];
                --v33;
              }
              while (v31 < v32);
              v8[v33] = v31;
            }
            ++v22;
            ++v8;
          }
          while (v22 != a2);
        }
        return result;
    }
  }
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<int>>(int *a1, int *a2, int *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;

  v3 = *a2;
  v4 = *a1;
  v5 = *a3;
  if (*a2 < *a1)
  {
    if (v5 < v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    if (*a3 >= v4)
      return 1;
    *a2 = *a3;
    *a3 = v4;
    return 2;
  }
  if (v5 < v3)
  {
    *a2 = v5;
    *a3 = v3;
    v6 = *a1;
    if (*a2 >= *a1)
      return 1;
    *a1 = *a2;
    *a2 = v6;
    return 2;
  }
  return 0;
}

int *std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,FIK::IKArrayIterator<int>,std::__less<void,void> &>(int *a1, int *a2)
{
  int v2;
  int *v3;
  int v4;
  int *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;

  v2 = *a1;
  if (*a1 >= *(a2 - 1))
  {
    v5 = a1 + 1;
    do
    {
      v3 = v5;
      if (v5 >= a2)
        break;
      ++v5;
    }
    while (v2 >= *v3);
  }
  else
  {
    v3 = a1;
    do
    {
      v4 = v3[1];
      ++v3;
    }
    while (v2 >= v4);
  }
  if (v3 < a2)
  {
    do
      v6 = *--a2;
    while (v2 < v6);
  }
  if (v3 < a2)
  {
    v7 = *v3;
    v8 = *a2;
    do
    {
      *v3 = v8;
      *a2 = v7;
      do
      {
        v9 = v3[1];
        ++v3;
        v7 = v9;
      }
      while (v2 >= v9);
      do
      {
        v10 = *--a2;
        v8 = v10;
      }
      while (v2 < v10);
    }
    while (v3 < a2);
  }
  if (v3 - 1 != a1)
    *a1 = *(v3 - 1);
  *(v3 - 1) = v2;
  return v3;
}

int *std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,FIK::IKArrayIterator<int>,std::__less<void,void> &>(int *a1, int *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int *v5;
  int *v6;
  int v7;
  int v8;
  int v9;
  int *v10;
  int *v11;
  int v12;
  int v13;

  v2 = 0;
  v3 = *a1;
  do
    v4 = a1[++v2];
  while (v4 < v3);
  v5 = &a1[v2];
  v6 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v5 >= a2)
        break;
      v8 = *--a2;
    }
    while (v8 >= v3);
  }
  else
  {
    do
      v7 = *--a2;
    while (v7 >= v3);
  }
  if (v5 < a2)
  {
    v9 = *a2;
    v10 = &a1[v2];
    v11 = a2;
    do
    {
      *v10 = v9;
      *v11 = v4;
      do
      {
        v12 = v10[1];
        ++v10;
        v4 = v12;
      }
      while (v12 < v3);
      do
      {
        v13 = *--v11;
        v9 = v13;
      }
      while (v13 >= v3);
    }
    while (v10 < v11);
    v6 = v10 - 1;
  }
  if (v6 != a1)
    *a1 = *v6;
  *v6 = v3;
  return v6;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<int>>(int *a1, int *a2)
{
  uint64_t v4;
  _BOOL8 result;
  int v6;
  int v7;
  int *v8;
  int *v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (v6 < *a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<int>>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<int>>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<int>>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<int>>(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 12;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    if (*v9 < *v8)
    {
      v14 = v11;
      while (1)
      {
        *(int *)((char *)a1 + v14) = v13;
        v15 = v14 - 4;
        if (v14 == 4)
          break;
        v13 = *(int *)((char *)a1 + v14 - 8);
        v14 -= 4;
        if (v12 >= v13)
        {
          v16 = (int *)((char *)a1 + v15);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 4;
    if (++v9 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<int>>(int *a1, int *a2, int *a3, int *a4)
{
  uint64_t result;
  int v9;
  int v10;
  int v11;

  result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<int>>(a1, a2, a3);
  v9 = *a3;
  if (*a4 < *a3)
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *a2;
    if (*a3 < *a2)
    {
      *a2 = *a3;
      *a3 = v10;
      v11 = *a1;
      if (*a2 < *a1)
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<int>>(int *a1, int *a2, int *a3, int *a4, int *a5)
{
  uint64_t result;
  int v11;
  int v12;
  int v13;
  int v14;

  result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<int>>(a1, a2, a3, a4);
  v11 = *a4;
  if (*a5 < *a4)
  {
    *a4 = *a5;
    *a5 = v11;
    v12 = *a3;
    if (*a4 < *a3)
    {
      *a3 = *a4;
      *a4 = v12;
      v13 = *a2;
      if (*a3 < *a2)
      {
        *a2 = *a3;
        *a3 = v13;
        v14 = *a1;
        if (*a2 < *a1)
        {
          *a1 = *a2;
          *a2 = v14;
        }
      }
    }
  }
  return result;
}

int *std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<int>,FIK::IKArrayIterator<int>>(int *a1, int *a2, int *a3, uint64_t a4)
{
  int *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int *v12;
  int *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int *v18;
  int *v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  int v26;
  int v27;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 5)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<int>>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    if (v6 == a3)
    {
      a3 = v6;
    }
    else
    {
      v13 = v6;
      do
      {
        v14 = *v13;
        if (*v13 < *a1)
        {
          *v13 = *a1;
          *a1 = v14;
          std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<int>>((uint64_t)a1, a4, v9, a1);
        }
        ++v13;
      }
      while (v13 != a3);
    }
    if (v8 >= 5)
    {
      v15 = (unint64_t)v8 >> 2;
      do
      {
        v16 = 0;
        v17 = *a1;
        v18 = a1;
        do
        {
          v19 = &v18[v16 + 1];
          v20 = (2 * v16) | 1;
          v16 = 2 * v16 + 2;
          if (v16 >= v15)
          {
            v21 = *v19;
            v16 = v20;
          }
          else
          {
            v21 = *v19;
            v22 = v19[1];
            if (*v19 <= v22)
              v21 = v19[1];
            if (*v19 >= v22)
              v16 = v20;
            else
              ++v19;
          }
          *v18 = v21;
          v18 = v19;
        }
        while (v16 <= (uint64_t)((unint64_t)(v15 - 2) >> 1));
        if (v19 == --v6)
        {
          *v19 = v17;
        }
        else
        {
          *v19 = *v6;
          *v6 = v17;
          v23 = (char *)v19 - (char *)a1 + 4;
          if (v23 >= 5)
          {
            v24 = (((unint64_t)v23 >> 2) - 2) >> 1;
            v25 = &a1[v24];
            v26 = *v25;
            v27 = *v19;
            if (*v25 < *v19)
            {
              do
              {
                *v19 = v26;
                v19 = v25;
                if (!v24)
                  break;
                if (v24 >= 1)
                  --v24;
                v24 >>= 1;
                v25 = &a1[v24];
                v26 = *v25;
              }
              while (*v25 < v27);
              *v19 = v27;
            }
          }
        }
      }
      while (v15-- > 2);
    }
  }
  return a3;
}

uint64_t std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FIK::IKArrayIterator<int>>(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  int64_t v4;
  uint64_t v5;
  int *v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;

  if (a3 >= 2)
  {
    v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= ((uint64_t)a4 - result) >> 2)
    {
      v5 = (((uint64_t)a4 - result) >> 1) | 1;
      v6 = (int *)(result + 4 * v5);
      if (v5 + 1 >= a3)
      {
        v7 = *v6;
      }
      else
      {
        v7 = *v6;
        v8 = v6[1];
        if (*v6 <= v8)
          v7 = v6[1];
        if (*v6 < v8)
        {
          ++v6;
          ++v5;
        }
      }
      v9 = *a4;
      if (v7 >= *a4)
      {
        do
        {
          *a4 = v7;
          a4 = v6;
          if (v4 < v5)
            break;
          v10 = (2 * v5) | 1;
          v6 = (int *)(result + 4 * v10);
          v5 = 2 * v5 + 2;
          if (v5 >= a3)
          {
            v7 = *v6;
            v5 = v10;
          }
          else
          {
            v7 = *v6;
            v11 = v6[1];
            if (*v6 <= v11)
              v7 = v6[1];
            if (*v6 >= v11)
              v5 = v10;
            else
              ++v6;
          }
        }
        while (v7 >= v9);
        *a4 = v9;
      }
    }
  }
  return result;
}

void OUTLINED_FUNCTION_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

uint64_t OUTLINED_FUNCTION_5(NSObject *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  return ikinemaAssertHandler(a1, 0, a3, a4);
}

void *CoreIKConstraintGetName(CoreIKConstraint *this)
{
  uint64_t *v3;

  if (!this)
  {
    v3 = ikinemaLogObject();
    ikinemaAssertHandler(*v3, 0, (uint64_t)"CoreIKConstraintGetName", "(constraint) A null constraint pointer was used.");
  }
  return CoreIKConstraint::getName(this);
}

uint64_t CoreIKConstraintGetBoneName(CoreIKConstraint *this)
{
  uint64_t *v3;

  if (!this)
  {
    v3 = ikinemaLogObject();
    ikinemaAssertHandler(*v3, 0, (uint64_t)"CoreIKConstraintGetBoneName", "(constraint) A null constraint pointer was used.");
  }
  return CoreIKConstraint::getBoneName(this);
}

double CoreIKConstraintGetOffset(CoreIKConstraint *this)
{
  uint64_t *v3;
  __int128 v4;

  if (!this)
  {
    v3 = ikinemaLogObject();
    ikinemaAssertHandler(*v3, 0, (uint64_t)"CoreIKConstraintGetOffset", "(constraint) A null constraint pointer was used.");
  }
  CoreIKConstraint::getOffset(this, &v4);
  return *(double *)&v4;
}

uint64_t CoreIKConstraintSetOffset(CoreIKConstraint *this, __n128 a2, __n128 a3)
{
  uint64_t *v5;
  __n128 v6;
  __n128 v7;
  _OWORD v8[2];

  if (!this)
  {
    v6 = a2;
    v7 = a3;
    v5 = ikinemaLogObject();
    ikinemaAssertHandler(*v5, 0, (uint64_t)"CoreIKConstraintSetOffset", "(constraint) A null constraint pointer was used.");
    a2 = v6;
    a3 = v7;
  }
  a2.n128_u32[3] = 0;
  v8[0] = a2;
  v8[1] = a3;
  return CoreIKConstraint::setOffset(this, (const FIK::Transform *)v8);
}

double CoreIKGetConstraintTarget(CoreIKConstraint *this)
{
  uint64_t *v3;
  __int128 v4;

  if (!this)
  {
    v3 = ikinemaLogObject();
    ikinemaAssertHandler(*v3, 0, (uint64_t)"CoreIKGetConstraintTarget", "(constraint) A null constraint pointer was used.");
  }
  CoreIKConstraint::getTarget((uint64_t *)&v4, this);
  return *(double *)&v4;
}

uint64_t CoreIKSetConstraintTarget(uint64_t a1)
{
  uint64_t *v3;

  if (!a1)
  {
    v3 = ikinemaLogObject();
    ikinemaAssertHandler(*v3, 0, (uint64_t)"CoreIKSetConstraintTarget", "(constraint) A null constraint pointer was used.");
  }
  return CoreIKConstraint::setTarget(a1);
}

uint64_t CoreIKSetConstraintTargetTranslation(_QWORD *a1)
{
  uint64_t *v3;

  if (!a1)
  {
    v3 = ikinemaLogObject();
    ikinemaAssertHandler(*v3, 0, (uint64_t)"CoreIKSetConstraintTargetTranslation", "(constraint) A null constraint pointer was used.");
  }
  return CoreIKConstraint::setTargetTranslation(a1);
}

uint64_t CoreIKSetConstraintTargetOrientation(_QWORD *a1)
{
  uint64_t *v3;

  if (!a1)
  {
    v3 = ikinemaLogObject();
    ikinemaAssertHandler(*v3, 0, (uint64_t)"CoreIKSetConstraintTargetOrientation", "(constraint) A null constraint pointer was used.");
  }
  return CoreIKConstraint::setTargetOrientation(a1);
}

const char *ikinema::rig::BPE(ikinema::rig *this)
{
  return aExportVersion1;
}

uint64_t CoreIKExportRigAsJSONToFilePath(uint64_t a1, char *__s)
{
  strlen(__s);
  return CoreIKRig::writeAsJsonToFile(a1, (uint64_t)__s);
}

uint64_t CoreIKRigCanCreateSolverType()
{
  return 0;
}

uint64_t CoreIKCreateSolverFromRigWithType()
{
  return 0;
}

double CoreIKRigUpdateSettings(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  _OWORD v4[2];
  int v5;

  v2 = *(_OWORD *)(a2 + 16);
  v4[0] = *(_OWORD *)a2;
  v4[1] = v2;
  v5 = *(_DWORD *)(a2 + 32);
  return CoreIKRig::updateRigSettings(a1, (uint64_t)v4);
}

float CoreIKRigUpdateJointWithSettings(uint64_t a1, char *__s, uint64_t a3, CFErrorRef *a4)
{
  size_t v8;

  v8 = strlen(__s);
  return CoreIKRig::updateJointWithSettings(a1, __s, v8, a3, a4);
}

uint64_t CoreIKRigRemoveJoint(uint64_t a1, char *__s, CFErrorRef *a3)
{
  size_t v6;

  v6 = strlen(__s);
  return CoreIKRig::removeJoint(a1, __s, v6, a3);
}

float CoreIKRigGetJointSettings@<S0>(char *__s@<X1>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  size_t v6;

  v6 = strlen(__s);
  return CoreIKRig::getRigJointSettings(__s, v6, a2, a3);
}

double CoreIKRigUpdateConstraintWithSettings(uint64_t a1, char *__s, uint64_t a3, CFErrorRef *a4)
{
  IKString *v8;

  v8 = (IKString *)strlen(__s);
  return CoreIKRig::updateConstraintWithSettings(a1, __s, v8, a3, a4);
}

double CoreIKRigGetConstraintSettings@<D0>(char *__s@<X1>, uint64_t a2@<X0>, _OWORD *a3@<X8>)
{
  IKString *v6;

  v6 = (IKString *)strlen(__s);
  return CoreIKRig::getRigConstraintSettings(a2, __s, v6, a3);
}

uint64_t *CoreIKRigRemoveConstraint(uint64_t *a1, char *__s, CFErrorRef *a3)
{
  IKString *v6;

  v6 = (IKString *)strlen(__s);
  return CoreIKRig::removeConstraint(a1, __s, v6, a3);
}

uint64_t CoreIKRigConstraintPositionAsPoleEnabled(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v4;
  uint64_t v5;
  uint64_t *v6;

  v5 = a2;
  v2 = *(unsigned int *)(a1 + 352);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:nn180100]();
    return CoreIKRigConstraintSetPositionAsPoleEnabled(v4);
  }
  else
  {
    v6 = &v5;
    return ((uint64_t (*)(uint64_t **, uint64_t))off_24CA6CBC8[v2])(&v6, a1 + 16);
  }
}

uint64_t CoreIKRigConstraintSetPositionAsPoleEnabled(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  void *v5;
  uint64_t v6;
  char v7;
  uint64_t *v8;

  v6 = a2;
  v7 = a3;
  v3 = *(unsigned int *)(a1 + 352);
  if ((_DWORD)v3 == -1)
  {
    v5 = std::__throw_bad_variant_access[abi:nn180100]();
    return CoreIKRigIsValid(v5);
  }
  else
  {
    v8 = &v6;
    return ((uint64_t (*)(uint64_t **, uint64_t))off_24CA6CBD8[v3])(&v8, a1 + 16);
  }
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<CoreIKRigConstraintPositionAsPoleEnabled::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,FIK::GameRig,std::__variant_detail::_Trait::MoCapRig> &>(FIK *a1, uint64_t a2)
{
  char **v3;
  char *v4;
  IKString *v5;
  int v6;
  _BOOL8 result;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (***v18)(FIK::CrtAllocator *__hidden);

  v3 = *(char ***)a1;
  v16 = 0;
  v17 = 0;
  v18 = FIK::defaultAllocator(a1);
  v4 = *v3;
  v5 = (IKString *)strlen(v4);
  IKString::assign(&v16, v4, v5);
  v6 = FIK::IKRigUtils::GetTaskIndexByName<FIK::GameRig>((uint64_t)&v16, a2);
  if (v17)
    ((void (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v18)[3])(v18, v16, 0, 8);
  if (v6 != -1)
    return *(_BYTE *)(*(_QWORD *)(a2 + 192) + 240 * v6 + 54) != 0;
  v8 = ikinemaLogObject()[2];
  result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  if (result)
  {
    std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<CoreIKRigConstraintPositionAsPoleEnabled::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,FIK::GameRig,std::__variant_detail::_Trait::MoCapRig> &>(v8, v9, v10, v11, v12, v13, v14, v15);
    return 0;
  }
  return result;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<CoreIKRigConstraintPositionAsPoleEnabled::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,FIK::GameRig,std::__variant_detail::_Trait::MoCapRig> &>(FIK *a1, uint64_t a2)
{
  char **v3;
  char *v4;
  IKString *v5;
  int v6;
  _BOOL8 result;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (***v18)(FIK::CrtAllocator *__hidden);

  v3 = *(char ***)a1;
  v16 = 0;
  v17 = 0;
  v18 = FIK::defaultAllocator(a1);
  v4 = *v3;
  v5 = (IKString *)strlen(v4);
  IKString::assign(&v16, v4, v5);
  v6 = FIK::IKRigUtils::GetTaskIndexByName<FIK::MoCapRig>((uint64_t)&v16, a2);
  if (v17)
    ((void (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v18)[3])(v18, v16, 0, 8);
  if (v6 != -1)
    return *(_BYTE *)(*(_QWORD *)(a2 + 192) + ((uint64_t)v6 << 8) + 54) != 0;
  v8 = ikinemaLogObject()[2];
  result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  if (result)
  {
    std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<CoreIKRigConstraintPositionAsPoleEnabled::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,FIK::GameRig,std::__variant_detail::_Trait::MoCapRig> &>(v8, v9, v10, v11, v12, v13, v14, v15);
    return 0;
  }
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<CoreIKRigConstraintSetPositionAsPoleEnabled::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,FIK::GameRig,std::__variant_detail::_Trait::MoCapRig> &>(FIK *a1, uint64_t a2)
{
  uint64_t v3;
  IKString *v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (***v16)(FIK::CrtAllocator *__hidden);

  v3 = *(_QWORD *)a1;
  v14 = 0;
  v15 = 0;
  v16 = FIK::defaultAllocator(a1);
  v4 = (IKString *)strlen(*(const char **)v3);
  IKString::assign(&v14, *(char **)v3, v4);
  v5 = FIK::IKRigUtils::GetTaskIndexByName<FIK::GameRig>((uint64_t)&v14, a2);
  if (v15)
    ((void (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v16)[3])(v16, v14, 0, 8);
  if (v5 == -1)
  {
    v6 = ikinemaLogObject()[2];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<CoreIKRigConstraintPositionAsPoleEnabled::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,FIK::GameRig,std::__variant_detail::_Trait::MoCapRig> &>(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)(a2 + 192) + 240 * v5 + 54) = *(_BYTE *)(v3 + 8);
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<CoreIKRigConstraintSetPositionAsPoleEnabled::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,FIK::GameRig,std::__variant_detail::_Trait::MoCapRig> &>(FIK *a1, uint64_t a2)
{
  uint64_t v3;
  IKString *v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (***v16)(FIK::CrtAllocator *__hidden);

  v3 = *(_QWORD *)a1;
  v14 = 0;
  v15 = 0;
  v16 = FIK::defaultAllocator(a1);
  v4 = (IKString *)strlen(*(const char **)v3);
  IKString::assign(&v14, *(char **)v3, v4);
  v5 = FIK::IKRigUtils::GetTaskIndexByName<FIK::MoCapRig>((uint64_t)&v14, a2);
  if (v15)
    ((void (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v16)[3])(v16, v14, 0, 8);
  if (v5 == -1)
  {
    v6 = ikinemaLogObject()[2];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<CoreIKRigConstraintPositionAsPoleEnabled::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,FIK::GameRig,std::__variant_detail::_Trait::MoCapRig> &>(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)(a2 + 192) + ((uint64_t)v5 << 8) + 54) = *(_BYTE *)(v3 + 8);
  }
}

uint64_t CoreIKGetConstraint(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
}

uint64_t CoreIKSolverGetSourceBufferSize(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t CoreIKSolverGetSourceName(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t CoreIKSolverGetTargetBufferSize(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t CoreIKSolverGetTargetName(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t CoreIKSolverGetTargetParentName(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
}

uint64_t CoreIKSolve(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, a2, a3, 0, a4, a5, 0, 0);
}

uint64_t CoreIKSolverGetType(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t CoreIKCreateComposableSolverFromRig()
{
  return 0;
}

uint64_t CoreIKSolveWithoutInput()
{
  return 1;
}

uint64_t CoreIKSolverGetInputScale(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
}

uint64_t CoreIKSolver::setInputScale(CoreIKSolver *this, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a2 > 0.0)
    return (*(uint64_t (**)(CoreIKSolver *))(*(_QWORD *)this + 112))(this);
  v4 = ikinemaLogObject()[1];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    CoreIKSolver::setInputScale(v4, v5, v6, v7, v8, v9, v10, v11);
  return (*(uint64_t (**)(CoreIKSolver *))(*(_QWORD *)this + 104))(this);
}

uint64_t CoreIKSolverGetOutputScale(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
}

uint64_t CoreIKSolver::setOutputScale(CoreIKSolver *this, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a2 > 0.0)
    return (*(uint64_t (**)(CoreIKSolver *))(*(_QWORD *)this + 128))(this);
  v4 = ikinemaLogObject()[1];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    CoreIKSolver::setOutputScale(v4, v5, v6, v7, v8, v9, v10, v11);
  return (*(uint64_t (**)(CoreIKSolver *))(*(_QWORD *)this + 120))(this);
}

uint64_t CoreIKSolverResetSolver(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
}

uint64_t CoreIKSolverGetConstraintCount(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
}

uint64_t CoreIKSolverGetTaskTargetsDebug(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
}

FIK *CoreIKCreateACPPenetrationSolverFromRig(FIK *a1)
{
  if (a1)
    return (FIK *)CoreIK::createSolverObject<CoreIKACPPenetrationSolver>(a1);
  return a1;
}

_QWORD *CoreIK::createSolverObject<CoreIKACPPenetrationSolver>(FIK *a1)
{
  void (***v1)(FIK::CrtAllocator *__hidden);
  _QWORD *result;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (*((_DWORD *)a1 + 88) == 1)
  {
    v1 = FIK::defaultAllocator(a1);
    result = (_QWORD *)((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, uint64_t))(*v1)[2])(v1, 544, 16);
    if (result)
      return CoreIKACPPenetrationSolver::CoreIKACPPenetrationSolver(result);
  }
  else
  {
    v3 = ikinemaLogObject()[1];
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      CoreIK::createSolverObject<CoreIK::IKSolverGeneric>(v3, v4, v5, v6, v7, v8, v9, v10);
    return 0;
  }
  return result;
}

void (***CoreIKDestroyACPPenetrationSolver(FIK *a1))(FIK::CrtAllocator *__hidden this)
{
  void (***v2)(FIK::CrtAllocator *__hidden);
  uint64_t *v4;
  FIK *v5;

  if (a1)
  {
    v2 = FIK::defaultAllocator(a1);
    (**(void (***)(FIK *))a1)(a1);
    return (void (***)(FIK::CrtAllocator *__hidden))((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), FIK *, _QWORD, uint64_t))(*v2)[3])(v2, a1, 0, 8);
  }
  else
  {
    v4 = ikinemaLogObject();
    v5 = (FIK *)ikinemaAssertHandler(*v4, 0, (uint64_t)"CoreIKDestroyACPPenetrationSolver", "(solver != nullptr) Can't destroy null object");
    return FIK::defaultAllocator(v5);
  }
}

double CoreIKACPPenetrationConstraintSetPlaneDefinition(CoreIKConstraint *a1, __n128 a2, __n128 a3)
{
  __n128 v4;
  __n128 v5;

  a2.n128_u32[3] = 0;
  a3.n128_u32[3] = 0;
  v4 = a3;
  v5 = a2;
  return CoreIKACPPenetrationConstraint::setPlaneDefinition(a1, &v5, &v4);
}

double CoreIKACPPenetrationSolverGetTargetRestPose(uint64_t a1, unint64_t a2)
{
  uint64_t Rig;
  __int128 v4;
  NSObject *v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  Rig = FIK::AnimNode::GetRig((FIK::AnimNode *)(a1 + 32));
  if (*(_QWORD *)(Rig + 208) <= a2)
  {
    v5 = ikinemaLogObject()[2];
    v6 = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    *(_QWORD *)&v4 = 0;
    if (v6)
    {
      CoreIKACPPenetrationSolverGetTargetRestPose_cold_1(v5, v7, v8, v9, v10, v11, v12, v13);
      *(_QWORD *)&v4 = 0;
    }
  }
  else
  {
    v4 = *(_OWORD *)(*(_QWORD *)(Rig + 224) + 544 * a2 + 64);
  }
  return *(double *)&v4;
}

uint64_t CoreIKACPPenetrationSolverConstraintCount(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
}

uint64_t CoreIKACPPenetrationSolverGetConstraintTargetName(CoreIKACPPenetrationSolver *a1, unint64_t a2)
{
  CoreIKConstraint *Constraint;

  Constraint = (CoreIKConstraint *)CoreIKACPPenetrationSolver::getConstraint(a1, a2);
  return CoreIKConstraint::getBoneName(Constraint);
}

FIK *CoreIKCreateACPFilteringSolverFromRig(FIK *a1)
{
  if (a1)
    return (FIK *)CoreIK::createSolverObject<CoreIKACPFilteringSolver>(a1);
  return a1;
}

_QWORD *CoreIK::createSolverObject<CoreIKACPFilteringSolver>(FIK *a1)
{
  void (***v1)(FIK::CrtAllocator *__hidden);
  _QWORD *result;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (*((_DWORD *)a1 + 88) == 1)
  {
    v1 = FIK::defaultAllocator(a1);
    result = (_QWORD *)((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, uint64_t))(*v1)[2])(v1, 544, 16);
    if (result)
      return CoreIKACPFilteringSolver::CoreIKACPFilteringSolver(result);
  }
  else
  {
    v3 = ikinemaLogObject()[1];
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      CoreIK::createSolverObject<CoreIK::IKSolverGeneric>(v3, v4, v5, v6, v7, v8, v9, v10);
    return 0;
  }
  return result;
}

void (***CoreIKDestroyACPFilteringSolver(FIK *a1))(FIK::CrtAllocator *__hidden this)
{
  void (***v2)(FIK::CrtAllocator *__hidden);
  uint64_t *v4;
  FIK *v5;

  if (a1)
  {
    v2 = FIK::defaultAllocator(a1);
    (**(void (***)(FIK *))a1)(a1);
    return (void (***)(FIK::CrtAllocator *__hidden))((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), FIK *, _QWORD, uint64_t))(*v2)[3])(v2, a1, 0, 8);
  }
  else
  {
    v4 = ikinemaLogObject();
    v5 = (FIK *)ikinemaAssertHandler(*v4, 0, (uint64_t)"CoreIKDestroyACPFilteringSolver", "(solver != nullptr) Can't destroy null object");
    return FIK::defaultAllocator(v5);
  }
}

FIK *CoreIKCreateACPSlidingSolverFromRig(FIK *a1)
{
  if (a1)
    return (FIK *)CoreIK::createSolverObject<CoreIKACPSlidingSolver>(a1);
  return a1;
}

_QWORD *CoreIK::createSolverObject<CoreIKACPSlidingSolver>(FIK *a1)
{
  void (***v1)(FIK::CrtAllocator *__hidden);
  _QWORD *result;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (*((_DWORD *)a1 + 88) == 1)
  {
    v1 = FIK::defaultAllocator(a1);
    result = (_QWORD *)((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, uint64_t))(*v1)[2])(v1, 544, 16);
    if (result)
      return CoreIKACPSlidingSolver::CoreIKACPSlidingSolver(result);
  }
  else
  {
    v3 = ikinemaLogObject()[1];
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      CoreIK::createSolverObject<CoreIK::IKSolverGeneric>(v3, v4, v5, v6, v7, v8, v9, v10);
    return 0;
  }
  return result;
}

void (***CoreIKDestroyACPSlidingSolver(FIK *a1))(FIK::CrtAllocator *__hidden this)
{
  void (***v2)(FIK::CrtAllocator *__hidden);
  uint64_t *v4;
  FIK *v5;

  if (a1)
  {
    v2 = FIK::defaultAllocator(a1);
    (**(void (***)(FIK *))a1)(a1);
    return (void (***)(FIK::CrtAllocator *__hidden))((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), FIK *, _QWORD, uint64_t))(*v2)[3])(v2, a1, 0, 8);
  }
  else
  {
    v4 = ikinemaLogObject();
    v5 = (FIK *)ikinemaAssertHandler(*v4, 0, (uint64_t)"CoreIKDestroyACPSlidingSolver", "(solver != nullptr) Can't destroy null object");
    return FIK::defaultAllocator(v5);
  }
}

uint64_t ikinema::UserAlgorithmImpl::process(_QWORD *a1, CoreIKConstraint *this, uint64_t a3)
{
  void (*v6)(uint64_t, _QWORD, uint64_t);
  uint64_t v7;
  void (*v8)(uint64_t, _QWORD, uint64_t);
  uint64_t v9;

  v6 = (void (*)(uint64_t, _QWORD, uint64_t))a1[2];
  if (v6)
  {
    v7 = CoreIKConstraint::interface(this);
    v6(v7, a1[1], a3);
  }
  v8 = (void (*)(uint64_t, _QWORD, uint64_t))a1[3];
  if (v8)
  {
    v9 = CoreIKConstraint::interface((CoreIKConstraint *)((char *)this + 8));
    v8(v9, a1[1], a3);
  }
  return 0;
}

uint64_t ikinema::UserAlgorithmImpl::registerBuffers(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 56);
  if (!v2)
    return 0;
  if (!*a2)
    return 1;
  v3 = *(_QWORD **)(a1 + 72);
  v4 = &v3[v2];
  do
  {
    v5 = (uint64_t *)(a2[2] + 56);
    v6 = 72 * *a2;
    while (1)
    {
      v7 = *v5;
      v5 += 9;
      if (v7 == *v3)
        break;
      v6 -= 72;
      if (!v6)
        return 1;
    }
    result = 0;
    ++v3;
  }
  while (v3 != v4);
  return result;
}

uint64_t ikinema::UserAlgorithmImpl::UserAlgorithmImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (***v5)(FIK::CrtAllocator *__hidden);
  IKString *v6;
  FIK *v7;
  void (***v8)(FIK::CrtAllocator *__hidden);
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a1 = &off_24CA6C778;
  *(_QWORD *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a2;
  v5 = FIK::defaultAllocator((FIK *)a1);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = v5;
  v6 = (IKString *)strlen(*(const char **)(a2 + 40));
  IKString::assign((_QWORD *)(a1 + 32), *(char **)(a2 + 40), v6);
  v8 = FIK::defaultAllocator(v7);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = v8;
  v9 = *(_QWORD *)(a2 + 32);
  v14 = -1;
  FIK::IKArray<unsigned long>::resize((unint64_t *)(a1 + 56), v9, &v14);
  if (*(_QWORD *)(a2 + 32))
  {
    v10 = 0;
    v11 = *(_QWORD *)(a2 + 24);
    v12 = *(_QWORD *)(a1 + 72);
    do
    {
      *(_QWORD *)(v12 + 8 * v10) = *(_QWORD *)(v11 + 8 * v10);
      ++v10;
    }
    while (v10 != *(_QWORD *)(a2 + 32));
  }
  return a1;
}

_OWORD *ikinema::UserAlgorithm::create@<X0>(_OWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  if (*(_QWORD *)a1 || *((_QWORD *)a1 + 1))
    return (_OWORD *)ikinema::AlgorithmHandle::make<ikinema::UserAlgorithmImpl,CoreIKAlgorithmBlock &>(a1, a2);
  *a2 = 0;
  return a1;
}

uint64_t ikinema::AlgorithmHandle::make<ikinema::UserAlgorithmImpl,CoreIKAlgorithmBlock &>@<X0>(_OWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  __int128 v5;
  _OWORD v6[3];

  result = (uint64_t)FIK::FIKAlloc((FIK *)0x58);
  if (result)
  {
    v5 = a1[1];
    v6[0] = *a1;
    v6[1] = v5;
    v6[2] = a1[2];
    result = ikinema::UserAlgorithmImpl::UserAlgorithmImpl(result, (uint64_t)v6);
  }
  *a2 = result;
  return result;
}

const char *ikinema::AlgorithmBlockBase<ikinema::UserAlgorithm>::typeId()
{
  const char *result;
  unsigned __int8 *v1;
  uint64_t v2;
  unsigned int v3;

  result = "N7ikinema13UserAlgorithmE";
  if (((unint64_t)"N7ikinema13UserAlgorithmE" & 0x8000000000000000) != 0)
  {
    v1 = (unsigned __int8 *)((unint64_t)"N7ikinema13UserAlgorithmE" & 0x7FFFFFFFFFFFFFFFLL);
    v2 = 5381;
    do
    {
      result = (const char *)v2;
      v3 = *v1++;
      v2 = (33 * v2) ^ v3;
    }
    while (v3);
  }
  return result;
}

void ikinema::UserAlgorithmImpl::~UserAlgorithmImpl(ikinema::UserAlgorithmImpl *this)
{
  uint64_t v2;

  *((_QWORD *)this + 7) = 0;
  v2 = *((_QWORD *)this + 9);
  if (v2)
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)this + 10) + 24))(*((_QWORD *)this + 10), v2, 0, 8);
  if (*((_QWORD *)this + 5))
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 6) + 24))(*((_QWORD *)this + 6), *((_QWORD *)this + 4), 0, 8);
    *((_QWORD *)this + 4) = 0;
    *((_QWORD *)this + 5) = 0;
  }
}

{
  uint64_t v2;

  *((_QWORD *)this + 7) = 0;
  v2 = *((_QWORD *)this + 9);
  if (v2)
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)this + 10) + 24))(*((_QWORD *)this + 10), v2, 0, 8);
  if (*((_QWORD *)this + 5))
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 6) + 24))(*((_QWORD *)this + 6), *((_QWORD *)this + 4), 0, 8);
    *((_QWORD *)this + 4) = 0;
    *((_QWORD *)this + 5) = 0;
  }
  JUMPOUT(0x212BCAFB4);
}

void *ikinema::UserAlgorithmImpl::name(ikinema::UserAlgorithmImpl *this)
{
  if (*((_QWORD *)this + 5))
    return (void *)*((_QWORD *)this + 4);
  else
    return &unk_2108059BE;
}

_QWORD *CoreIK::IKSolverGeneric::IKSolverGeneric(_QWORD *a1)
{
  *a1 = &off_24CA6C598;
  FIK::GenericSolver::GenericSolver(a1 + 2);
  return a1;
}

uint64_t CoreIK::IKSolverGeneric::despatchGetConstraint(uint64_t a1, const char *a2)
{
  uint64_t *Tasks;
  uint64_t v4;
  CoreIKConstraint *v5;
  size_t v6;
  uint64_t v7;
  const void *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  Tasks = (uint64_t *)FIK::GenericSolver::GetTasks((FIK::GenericSolver *)(a1 + 16));
  v4 = *Tasks;
  if (*Tasks)
  {
    v5 = (CoreIKConstraint *)Tasks[2];
    v6 = strlen(a2);
    while (1)
    {
      v7 = *((_QWORD *)v5 + 7);
      v8 = v7 ? (const void *)*((_QWORD *)v5 + 6) : &unk_2108059BE;
      if (v7 == v6 && !memcmp(v8, a2, v6))
        return CoreIKConstraint::interface(v5);
      v5 = (CoreIKConstraint *)((char *)v5 + 576);
      if (!--v4)
        goto LABEL_9;
    }
  }
  else
  {
LABEL_9:
    v9 = ikinemaLogObject()[1];
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      CoreIK::IKSolverGeneric::despatchGetConstraint(v9, v10, v11, v12, v13, v14, v15, v16);
    return 0;
  }
}

BOOL CoreIK::IKSolverGeneric::despatchSolve(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _OWORD *v6;
  _OWORD *v10;
  uint64_t *v12;
  uint64_t v13[2];

  v6 = (_OWORD *)a5;
  v13[0] = a5;
  v13[1] = a6;
  if (a3 == a6)
  {
    if (!a3)
      return FIK::GenericSolver::Solve((FIK::GenericSolver *)(a1 + 16), v13) == 2;
  }
  else
  {
    v12 = ikinemaLogObject();
    ikinemaAssertHandler(*v12, 0, (uint64_t)"despatchSolve", "(sourcePose.size() == targetPoseLocal.size()) Generic solver expects same source and target sizes");
    if (!a3)
      return FIK::GenericSolver::Solve((FIK::GenericSolver *)(a1 + 16), v13) == 2;
  }
  v10 = &a2[2 * a3];
  do
  {
    *v6 = *a2;
    v6[1] = a2[1];
    a2 += 2;
    v6 += 2;
  }
  while (a2 != v10);
  return FIK::GenericSolver::Solve((FIK::GenericSolver *)(a1 + 16), v13) == 2;
}

uint64_t CoreIK::IKSolverGeneric::despatchInputPoseSize(CoreIK::IKSolverGeneric *this)
{
  return *((_QWORD *)this + 52);
}

uint64_t CoreIK::IKSolverGeneric::despatchOutputPoseSize(CoreIK::IKSolverGeneric *this)
{
  return *((_QWORD *)this + 52);
}

void *CoreIK::IKSolverGeneric::despatchGetInputName(CoreIK::IKSolverGeneric *this, uint64_t a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 54) + (a2 << 8);
  if (*(_QWORD *)(v2 + 16))
    return *(void **)(v2 + 8);
  else
    return &unk_2108059BE;
}

void *CoreIK::IKSolverGeneric::despatchGetOutputName(CoreIK::IKSolverGeneric *this, uint64_t a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 54) + (a2 << 8);
  if (*(_QWORD *)(v2 + 16))
    return *(void **)(v2 + 8);
  else
    return &unk_2108059BE;
}

void *CoreIK::IKSolverGeneric::despatchGetOutputParentName(CoreIK::IKSolverGeneric *this, uint64_t a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 54) + (a2 << 8);
  if (*(_QWORD *)(v2 + 40))
    return *(void **)(v2 + 32);
  else
    return &unk_2108059BE;
}

void CoreIK::IKSolverGeneric::~IKSolverGeneric(CoreIK::IKSolverGeneric *this)
{
  FIK::GenericSolver::~GenericSolver((CoreIK::IKSolverGeneric *)((char *)this + 16));
}

{
  FIK::GenericSolver::~GenericSolver((CoreIK::IKSolverGeneric *)((char *)this + 16));
  JUMPOUT(0x212BCAFB4);
}

uint64_t CoreIK::IKSolverGeneric::despatchSolverType(CoreIK::IKSolverGeneric *this)
{
  return 0;
}

uint64_t CoreIKSolver::despatchGetComposableInstance(CoreIKSolver *this)
{
  return 0;
}

uint64_t CoreIKSolver::despatchJoints(CoreIKSolver *this)
{
  NSObject *v1;
  int v3;
  const char *v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v1 = *ikinemaLogObject();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
  {
    v3 = 136315138;
    v4 = "despatchJoints";
    _os_log_impl(&dword_21078E000, v1, OS_LOG_TYPE_INFO, "%s: Getting joint collection is not supported by this solver", (uint8_t *)&v3, 0xCu);
  }
  return 0;
}

uint64_t CoreIKSolver::despatchConstraints(CoreIKSolver *this)
{
  NSObject *v1;
  int v3;
  const char *v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v1 = *ikinemaLogObject();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
  {
    v3 = 136315138;
    v4 = "despatchConstraints";
    _os_log_impl(&dword_21078E000, v1, OS_LOG_TYPE_INFO, "%s: Getting constraint collection is not supported by this solver", (uint8_t *)&v3, 0xCu);
  }
  return 0;
}

float CoreIKSolver::despatchInputScale(CoreIKSolver *this)
{
  return 1.0;
}

float CoreIKSolver::despatchSetInputScale(CoreIKSolver *this, float a2)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = ikinemaLogObject()[1];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    CoreIKSolver::despatchSetInputScale(v2, v3, v4, v5, v6, v7, v8, v9);
  return 1.0;
}

float CoreIKSolver::despatchOutputScale(CoreIKSolver *this)
{
  return 1.0;
}

float CoreIKSolver::despatchSetOutputScale(CoreIKSolver *this, float a2)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = ikinemaLogObject()[1];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    CoreIKSolver::despatchSetOutputScale(v2, v3, v4, v5, v6, v7, v8, v9);
  return 1.0;
}

void CoreIKSolver::despatchResetSolver(CoreIKSolver *this)
{
  NSObject *v1;
  int v2;
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  v1 = *ikinemaLogObject();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
  {
    v2 = 136315138;
    v3 = "despatchResetSolver";
    _os_log_impl(&dword_21078E000, v1, OS_LOG_TYPE_INFO, "%s: Solver reset is not supported by this solver", (uint8_t *)&v2, 0xCu);
  }
}

uint64_t CoreIKSolver::despatchGetConstraintCount(CoreIKSolver *this)
{
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = ikinemaLogObject()[1];
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    CoreIKSolver::despatchGetConstraintCount(v1, v2, v3, v4, v5, v6, v7, v8);
  return 0;
}

void CoreIKSolver::despatchGetTaskTargetsDebug()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = ikinemaLogObject()[1];
  if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
    CoreIKSolver::despatchGetTaskTargetsDebug(v0, v1, v2, v3, v4, v5, v6, v7);
}

_QWORD *ikinema::processedRigs::getBPERigObject@<X0>(ikinema::processedRigs *this@<X0>, uint64_t a2@<X8>)
{
  FIK *v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  size_t *v7;
  int v8;
  uint64_t v9;
  size_t *v10;
  int v11;
  int v12;
  uint64_t v13;
  _DWORD *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  __int128 v21;
  __int128 v22;
  _QWORD *result;
  __int128 v24;
  uint64_t *v25;
  ikinema::processedRigs *v26;
  char v27;
  _BYTE v28[24];
  _QWORD v29[12];
  int v30;
  _DWORD v31[4];
  __int128 v32;
  __int128 v33;
  _QWORD v34[4];
  unint64_t v35[2];
  uint64_t v36;
  unint64_t v37[2];
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  int v42;
  char v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v3 = (FIK *)ikinema::rig::BPE(this);
  ikinema::loadRigFromString(v3, v4, (uint64_t)v28);
  if (v43)
    v5 = v42 == 1;
  else
    v5 = 0;
  if (!v5)
  {
    v25 = ikinemaLogObject();
    ikinemaAssertHandler(*v25, 0, (uint64_t)"getBPERigObject", "(rig && std::holds_alternative<FIK::MoCapRig>(rig.value())) Failed to load mocap rig");
    if (!v43)
    {
      v26 = (ikinema::processedRigs *)std::__throw_bad_optional_access[abi:nn180100]();
      return (_QWORD *)ikinema::processedRigs::getBPEHelperHierarchyBoneDefinitions(v26);
    }
    if (v42 != 1)
      std::__throw_bad_variant_access[abi:nn180100]();
  }
  v6 = 0;
  v7 = (size_t *)&unk_24CA6CBF0;
  do
  {
    v8 = FIK::IKRigUtils::getBoneIndex<FIK::RigBoneBase,void>((void *)*(v7 - 1), *v7, (unsigned int *)v37);
    if (v8 == -1)
    {
      v19 = ikinemaLogObject();
      if (os_log_type_enabled((os_log_t)*v19, OS_LOG_TYPE_ERROR))
        ikinema::processedRigs::getBPERigObject();
      goto LABEL_23;
    }
    v7 += 2;
    *(_DWORD *)(v38 + 96 * v8) = v6++;
  }
  while (v6 != 17);
  v9 = 0;
  v10 = (size_t *)&unk_24CA6CD00;
  while (1)
  {
    v11 = FIK::IKRigUtils::getBoneIndex<FIK::MoCapBone,void>((void *)*(v10 - 1), *v10, (unsigned int *)v35);
    if (v11 == -1)
      break;
    v12 = v11;
    v10 += 2;
    v13 = v36;
    v14 = (_DWORD *)(v36 + 544 * v12);
    *v14 = v9;
    v14[1] = -1;
    if (++v9 == 91)
    {
      v15 = 126 - 2 * __clz(v35[0]);
      if (v35[0])
        v16 = v15;
      else
        v16 = 0;
      v17 = 126 - 2 * __clz(v37[0]);
      if (v37[0])
        v18 = v17;
      else
        v18 = 0;
      FIK::Serialisation::fixUpRigIndices((uint64_t)v28);
      goto LABEL_23;
    }
  }
  v20 = ikinemaLogObject();
  if (os_log_type_enabled((os_log_t)*v20, OS_LOG_TYPE_ERROR))
    ikinema::processedRigs::getBPERigObject();
LABEL_23:
  IKString::IKString((IKString *)a2, (const IKString *)v28);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)v29;
  *(_OWORD *)(a2 + 36) = *(_OWORD *)((char *)&v29[1] + 4);
  v21 = *(_OWORD *)&v29[7];
  *(_OWORD *)(a2 + 64) = *(_OWORD *)&v29[5];
  *(_OWORD *)(a2 + 80) = v21;
  *(_OWORD *)(a2 + 96) = *(_OWORD *)&v29[9];
  *(_QWORD *)(a2 + 112) = v29[11];
  *(_DWORD *)(a2 + 120) = v30;
  *(_DWORD *)(a2 + 131) = *(_DWORD *)((char *)v31 + 3);
  *(_DWORD *)(a2 + 128) = v31[0];
  v22 = v33;
  *(_OWORD *)(a2 + 144) = v32;
  *(_OWORD *)(a2 + 160) = v22;
  FIK::IKArray<FIK::MoCapTask>::IKArray((_QWORD *)(a2 + 176), v34);
  FIK::IKArray<FIK::MoCapBone>::IKArray((_QWORD *)(a2 + 208), v35);
  result = FIK::IKArray<FIK::RigBoneBase>::IKArray((_QWORD *)(a2 + 240), v37);
  v24 = v40;
  *(_OWORD *)(a2 + 272) = v39;
  *(_OWORD *)(a2 + 288) = v24;
  *(_QWORD *)(a2 + 304) = v41;
  if (v43)
  {
    if (v42 != -1)
      return (_QWORD *)((uint64_t (*)(char *, _BYTE *))off_24CA6D2A8[v42])(&v27, v28);
  }
  return result;
}

uint64_t *ikinema::processedRigs::getBPEHelperHierarchyBoneDefinitions@<X0>(ikinema::processedRigs *this@<X0>, _QWORD *a2@<X8>)
{
  FIK *v3;
  void (***v4)(FIK::CrtAllocator *__hidden);
  uint64_t SourceIndex;
  uint64_t SourceParent;
  float32x4_t v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float DistanceBetween;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float CumulativeBoneLengthBetween;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  float v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  float v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  float v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  float v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  float v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  float v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  float v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  float v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  float v88;
  uint64_t v89;
  uint64_t *result;
  uint64_t v91[20];
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD v95[2];
  uint64_t v96;
  uint64_t v97[4];
  unint64_t v98;
  float32x4_t *v99;
  uint64_t v100[12];

  v100[10] = *MEMORY[0x24BDAC8D0];
  ikinema::processedRigs::getBPERigObject(this, (uint64_t)v95);
  FIK::PoseConverter::PoseConverter<FIK::MoCapBone>(v91, (uint64_t)v99, v98);
  FIK::PoseConverter::getGlobalTransforms((FIK::PoseConverter *)v91, &v92);
  FIK::PoseConverter::~PoseConverter((FIK::PoseConverter *)v91);
  v4 = FIK::defaultAllocator(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = v4;
  v7 = vmulq_f32(v99[4], v99[4]);
  v8 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1))).f32[0]);
  FIK::IKArray<FIK::HelperHierarchyBoneDefinition>::reserve(a2, *a2 + 1);
  v9 = a2[2] + 32 * *a2;
  *(_QWORD *)v9 = -1;
  *(_QWORD *)(v9 + 8) = SourceIndex;
  *(_QWORD *)(v9 + 16) = SourceParent;
  *(float *)(v9 + 24) = v8;
  ++*a2;
  FIK::IKArray<FIK::HelperHierarchyBoneDefinition>::reserve(a2, *a2 + 1);
  v14 = a2[2] + 32 * *a2;
  *(_QWORD *)v14 = v10;
  *(_QWORD *)(v14 + 8) = v11;
  *(_QWORD *)(v14 + 16) = v12;
  *(float *)(v14 + 24) = DistanceBetween;
  ++*a2;
  FIK::IKArray<FIK::HelperHierarchyBoneDefinition>::reserve(a2, *a2 + 1);
  v19 = a2[2] + 32 * *a2;
  *(_QWORD *)v19 = v15;
  *(_QWORD *)(v19 + 8) = v16;
  *(_QWORD *)(v19 + 16) = v17;
  *(float *)(v19 + 24) = v18;
  ++*a2;
  FIK::IKArray<FIK::HelperHierarchyBoneDefinition>::reserve(a2, *a2 + 1);
  v24 = a2[2] + 32 * *a2;
  *(_QWORD *)v24 = v20;
  *(_QWORD *)(v24 + 8) = v21;
  *(_QWORD *)(v24 + 16) = v22;
  *(float *)(v24 + 24) = v23;
  ++*a2;
  FIK::IKArray<FIK::HelperHierarchyBoneDefinition>::reserve(a2, *a2 + 1);
  v29 = a2[2] + 32 * *a2;
  *(_QWORD *)v29 = v25;
  *(_QWORD *)(v29 + 8) = v26;
  *(_QWORD *)(v29 + 16) = v27;
  *(float *)(v29 + 24) = v28;
  ++*a2;
  FIK::IKArray<FIK::HelperHierarchyBoneDefinition>::reserve(a2, *a2 + 1);
  v34 = a2[2] + 32 * *a2;
  *(_QWORD *)v34 = v30;
  *(_QWORD *)(v34 + 8) = v31;
  *(_QWORD *)(v34 + 16) = v32;
  *(float *)(v34 + 24) = v33;
  ++*a2;
  FIK::IKArray<FIK::HelperHierarchyBoneDefinition>::reserve(a2, *a2 + 1);
  v39 = a2[2] + 32 * *a2;
  *(_QWORD *)v39 = v35;
  *(_QWORD *)(v39 + 8) = v36;
  *(_QWORD *)(v39 + 16) = v37;
  *(float *)(v39 + 24) = v38;
  ++*a2;
  FIK::IKArray<FIK::HelperHierarchyBoneDefinition>::reserve(a2, *a2 + 1);
  v44 = a2[2] + 32 * *a2;
  *(_QWORD *)v44 = v40;
  *(_QWORD *)(v44 + 8) = v41;
  *(_QWORD *)(v44 + 16) = v42;
  *(float *)(v44 + 24) = CumulativeBoneLengthBetween;
  ++*a2;
  FIK::IKArray<FIK::HelperHierarchyBoneDefinition>::reserve(a2, *a2 + 1);
  v49 = a2[2] + 32 * *a2;
  *(_QWORD *)v49 = v45;
  *(_QWORD *)(v49 + 8) = v46;
  *(_QWORD *)(v49 + 16) = v47;
  *(float *)(v49 + 24) = v48;
  ++*a2;
  FIK::IKArray<FIK::HelperHierarchyBoneDefinition>::reserve(a2, *a2 + 1);
  v54 = a2[2] + 32 * *a2;
  *(_QWORD *)v54 = v50;
  *(_QWORD *)(v54 + 8) = v51;
  *(_QWORD *)(v54 + 16) = v52;
  *(float *)(v54 + 24) = v53;
  ++*a2;
  FIK::IKArray<FIK::HelperHierarchyBoneDefinition>::reserve(a2, *a2 + 1);
  v59 = a2[2] + 32 * *a2;
  *(_QWORD *)v59 = v55;
  *(_QWORD *)(v59 + 8) = v56;
  *(_QWORD *)(v59 + 16) = v57;
  *(float *)(v59 + 24) = v58;
  ++*a2;
  FIK::IKArray<FIK::HelperHierarchyBoneDefinition>::reserve(a2, *a2 + 1);
  v64 = a2[2] + 32 * *a2;
  *(_QWORD *)v64 = v60;
  *(_QWORD *)(v64 + 8) = v61;
  *(_QWORD *)(v64 + 16) = v62;
  *(float *)(v64 + 24) = v63;
  ++*a2;
  FIK::IKArray<FIK::HelperHierarchyBoneDefinition>::reserve(a2, *a2 + 1);
  v69 = a2[2] + 32 * *a2;
  *(_QWORD *)v69 = v65;
  *(_QWORD *)(v69 + 8) = v66;
  *(_QWORD *)(v69 + 16) = v67;
  *(float *)(v69 + 24) = v68;
  ++*a2;
  FIK::IKArray<FIK::HelperHierarchyBoneDefinition>::reserve(a2, *a2 + 1);
  v74 = a2[2] + 32 * *a2;
  *(_QWORD *)v74 = v70;
  *(_QWORD *)(v74 + 8) = v71;
  *(_QWORD *)(v74 + 16) = v72;
  *(float *)(v74 + 24) = v73;
  ++*a2;
  FIK::IKArray<FIK::HelperHierarchyBoneDefinition>::reserve(a2, *a2 + 1);
  v79 = a2[2] + 32 * *a2;
  *(_QWORD *)v79 = v75;
  *(_QWORD *)(v79 + 8) = v76;
  *(_QWORD *)(v79 + 16) = v77;
  *(float *)(v79 + 24) = v78;
  ++*a2;
  FIK::IKArray<FIK::HelperHierarchyBoneDefinition>::reserve(a2, *a2 + 1);
  v84 = a2[2] + 32 * *a2;
  *(_QWORD *)v84 = v80;
  *(_QWORD *)(v84 + 8) = v81;
  *(_QWORD *)(v84 + 16) = v82;
  *(float *)(v84 + 24) = v83;
  ++*a2;
  FIK::IKArray<FIK::HelperHierarchyBoneDefinition>::reserve(a2, *a2 + 1);
  v89 = a2[2] + 32 * *a2;
  *(_QWORD *)v89 = v85;
  *(_QWORD *)(v89 + 8) = v86;
  *(_QWORD *)(v89 + 16) = v87;
  *(float *)(v89 + 24) = v88;
  ++*a2;
  v92 = 0;
  if (v93)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v94 + 24))(v94, v93, 0, 8);
  FIK::IKArray<FIK::RigBoneBase>::~IKArray(v100);
  FIK::IKArray<FIK::MoCapBone>::~IKArray((uint64_t *)&v98);
  result = FIK::IKArray<FIK::MoCapTask>::~IKArray(v97);
  if (v95[1])
    return (uint64_t *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v96 + 24))(v96, v95[0], 0, 8);
  return result;
}

uint64_t `anonymous namespace'::getSourceIndex(void *a1, size_t a2)
{
  uint64_t v2;
  uint64_t *v4;

  if (v2 == -1)
  {
    v4 = ikinemaLogObject();
    ikinemaAssertHandler(*v4, 0, (uint64_t)"getSourceIndex", "(ind != FIK::kInvalidRigIndex) Source does not exist in ARRigInputJoints");
  }
  return v2;
}

uint64_t `anonymous namespace'::getSourceParent(void *a1, size_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v6;

  if (v4 == -1)
  {
    v6 = ikinemaLogObject();
    ikinemaAssertHandler(*v6, 0, (uint64_t)"getSourceParent", "(ind != FIK::kInvalidRigIndex) Source does not exist in ARRigInputJoints");
  }
  return *(int *)(*(_QWORD *)(a3 + 256) + 96 * v4 + 4);
}

float `anonymous namespace'::getDistanceBetween(void *a1, size_t a2, void *a3, size_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  float32x4_t v10;
  float32x4_t v11;
  uint64_t *v13;
  uint64_t *v14;

  if (v8 == -1)
  {
    v13 = ikinemaLogObject();
    ikinemaAssertHandler(*v13, 0, (uint64_t)"getDistanceBetween", "(baseInd != FIK::kInvalidRigIndex) Base must exist in ARRigOutputJoints");
  }
  if (v9 == -1)
  {
    v14 = ikinemaLogObject();
    ikinemaAssertHandler(*v14, 0, (uint64_t)"getDistanceBetween", "(tipInd != FIK::kInvalidRigIndex) Tip must exist in ARRigOutputJoints");
  }
  v10 = vsubq_f32(*(float32x4_t *)(a5 + 32 * v9), *(float32x4_t *)(a5 + 32 * v8));
  v11 = vmulq_f32(v10, v10);
  return sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2), vaddq_f32(v11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1))).f32[0]);
}

float `anonymous namespace'::getCumulativeBoneLengthBetween(void *a1, size_t a2, void *a3, size_t a4, uint64_t a5)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  float result;
  float32x4_t *v12;
  float32x4_t v13;
  uint64_t *v15;
  uint64_t *v16;

  v9 = v8;
  if (v8 == -1)
  {
    v15 = ikinemaLogObject();
    ikinemaAssertHandler(*v15, 0, (uint64_t)"getCumulativeBoneLengthBetween", "(baseInd != FIK::kInvalidRigIndex) Base must exist in ARRigOutputJoints");
  }
  if (v10 == -1)
  {
    v16 = ikinemaLogObject();
    ikinemaAssertHandler(*v16, 0, (uint64_t)"getCumulativeBoneLengthBetween", "(tipInd != FIK::kInvalidRigIndex) Tip must exist in ARRigOutputJoints");
    return 0.0;
  }
  else
  {
    result = 0.0;
    if ((_DWORD)v10 != v9 && (_DWORD)v10 != -1)
    {
      do
      {
        v12 = (float32x4_t *)(*(_QWORD *)(a5 + 224) + 544 * (int)v10);
        v13 = vmulq_f32(v12[4], v12[4]);
        result = result
               + sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1))).f32[0]);
        LODWORD(v10) = v12->i32[1];
      }
      while ((_DWORD)v10 != v9 && (_DWORD)v10 != -1);
      if ((_DWORD)v10 != v9)
        return 0.0;
    }
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,`anonymous namespace'::reorderRigBones(FIK::MoCapRig &)::$_0 &,FIK::IKArrayIterator<FIK::MoCapBone>,false>(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  int v29;
  unint64_t v30;
  uint64_t *v31;
  int v32;
  uint64_t *v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  BOOL v42;
  BOOL v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  int v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  unint64_t v60;
  int v61;
  unint64_t v62;
  uint64_t *v63;
  int v64;
  uint64_t *v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  uint64_t *v74;
  uint64_t *v75;
  _DWORD *v76;
  _DWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  _QWORD *v110;
  unint64_t v111;
  _QWORD *v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  unint64_t v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  int v133;
  uint64_t v134;
  __int128 v135;
  uint64_t v136;
  __int128 v137;
  __int128 v138;
  uint64_t *v139;
  uint64_t *v140;
  uint64_t *v142;
  _OWORD *v143;
  unint64_t v144;
  uint64_t *v145;
  _OWORD *v146;
  _OWORD *v147;
  uint64_t *v148;
  uint64_t *v149;
  uint64_t *v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  uint64_t v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  uint64_t v183;
  uint64_t v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  uint64_t v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;

  v6 = result;
LABEL_2:
  v142 = a2 - 68;
  v139 = a2 - 204;
  v140 = a2 - 136;
  v7 = v6;
  v151 = a2;
  while (2)
  {
    v6 = v7;
    v8 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)((uint64_t)a2 - v7) >> 5);
    switch(v8)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        if (*(_DWORD *)v142 < *(_DWORD *)v7)
        {
          v74 = (uint64_t *)v7;
          v75 = v142;
          return std::swap[abi:nn180100]<FIK::MoCapBone>(v74, v75);
        }
        return result;
      case 3uLL:
      case 4uLL:
      case 5uLL:
        v76 = (_DWORD *)(v7 + 544);
        v77 = (_DWORD *)(v7 + 1088);
        if (*(_DWORD *)v142 < *(_DWORD *)(v6 + 1632))
        {
          result = std::swap[abi:nn180100]<FIK::MoCapBone>((uint64_t *)(v6 + 1632), v142);
          if (*(_DWORD *)(v6 + 1632) < *v77)
          {
            result = std::swap[abi:nn180100]<FIK::MoCapBone>((uint64_t *)(v6 + 1088), (uint64_t *)(v6 + 1632));
            if (*v77 < *v76)
            {
              result = std::swap[abi:nn180100]<FIK::MoCapBone>((uint64_t *)(v6 + 544), (uint64_t *)(v6 + 1088));
              if (*(_DWORD *)(v6 + 544) < *(_DWORD *)v6)
              {
                v74 = (uint64_t *)v6;
                v75 = (uint64_t *)(v6 + 544);
                return std::swap[abi:nn180100]<FIK::MoCapBone>(v74, v75);
              }
            }
          }
        }
        return result;
      default:
        if ((uint64_t)((uint64_t)a2 - v7) > 13055)
        {
          if (!a3)
          v9 = v8 >> 1;
          v10 = (uint64_t *)(v7 + 544 * (v8 >> 1));
          if (v8 < 0x81)
          {
          }
          else
          {
            v11 = 17 * v9;
            std::swap[abi:nn180100]<FIK::MoCapBone>((uint64_t *)v7, v10);
          }
          --a3;
          if ((a4 & 1) == 0 && *(_DWORD *)(v7 - 544) >= *(_DWORD *)v7)
          {
            v153 = *(_QWORD *)v7;
            IKString::IKString(&v156, (uint64_t *)(v7 + 8), *(_QWORD *)(v7 + 24));
            v150 = (uint64_t *)(v7 + 32);
            IKString::IKString(&v159, (uint64_t *)(v7 + 32), *(_QWORD *)(v7 + 48));
            v44 = *(_OWORD *)(v7 + 80);
            v162 = *(_OWORD *)(v7 + 64);
            v163 = v44;
            v45 = *(_OWORD *)(v7 + 96);
            v46 = *(_OWORD *)(v7 + 112);
            v166 = *(_QWORD *)(v7 + 128);
            v164 = v45;
            v165 = v46;
            v47 = *(_OWORD *)(v7 + 160);
            v167 = *(_OWORD *)(v7 + 144);
            v168 = v47;
            v48 = *(_OWORD *)(v7 + 192);
            v169 = *(_OWORD *)(v7 + 176);
            v170 = v48;
            v49 = *(_OWORD *)(v7 + 224);
            v171 = *(_OWORD *)(v7 + 208);
            v172 = v49;
            v173 = *(_OWORD *)(v7 + 240);
            v149 = (uint64_t *)(v7 + 256);
            IKString::IKString(&v174, (uint64_t *)(v7 + 256), *(_QWORD *)(v7 + 272));
            v50 = *(_DWORD *)(v7 + 280);
            v178 = *(_OWORD *)(v7 + 288);
            v51 = *(_OWORD *)(v7 + 304);
            v52 = *(_OWORD *)(v7 + 336);
            v180 = *(_OWORD *)(v7 + 320);
            v179 = v51;
            v181 = v52;
            v53 = *(_QWORD *)(v7 + 368);
            v182 = *(_OWORD *)(v7 + 352);
            v54 = *(_QWORD *)(v7 + 384);
            v55 = *(_OWORD *)(v7 + 416);
            v185 = *(_OWORD *)(v7 + 400);
            *(_QWORD *)(v7 + 416) = 0;
            *(_QWORD *)(v7 + 424) = 0;
            v56 = *(_OWORD *)(v7 + 432);
            v57 = *(_OWORD *)(v7 + 448);
            *(_QWORD *)(v7 + 432) = 0;
            v186 = v55;
            v187 = v56;
            v188 = v57;
            v189 = *(_OWORD *)(v7 + 464);
            v58 = *(_QWORD *)(v7 + 480);
            v59 = *(_OWORD *)(v7 + 512);
            v191 = *(_OWORD *)(v7 + 496);
            v177 = v50;
            v183 = v53;
            v184 = v54;
            v190 = v58;
            v192 = v59;
            v193 = *(_OWORD *)(v7 + 528);
            if ((int)v153 >= *(_DWORD *)v142)
            {
              v62 = v7 + 544;
              do
              {
                v7 = v62;
                if (v62 >= (unint64_t)v151)
                  break;
                v62 += 544;
              }
              while ((int)v153 >= *(_DWORD *)v7);
            }
            else
            {
              v60 = v7;
              do
              {
                v7 = v60 + 544;
                v61 = *(_DWORD *)(v60 + 544);
                v60 += 544;
              }
              while ((int)v153 >= v61);
            }
            v63 = v151;
            if (v7 < (unint64_t)v151)
            {
              v63 = v151;
              do
                v63 -= 68;
              while ((int)v153 < *(_DWORD *)v63);
            }
            while (v7 < (unint64_t)v63)
            {
              std::swap[abi:nn180100]<FIK::MoCapBone>((uint64_t *)v7, v63);
              do
              {
                v64 = *(_DWORD *)(v7 + 544);
                v7 += 544;
              }
              while ((int)v153 >= v64);
              do
                v63 -= 68;
              while ((int)v153 < *(_DWORD *)v63);
            }
            v65 = (uint64_t *)(v7 - 544);
            if (v7 - 544 != v6)
            {
              *(_QWORD *)v6 = *v65;
              IKString::operator=((uint64_t *)(v6 + 8), v7 - 536);
              IKString::operator=(v150, v7 - 512);
              *(_OWORD *)(v6 + 64) = *(_OWORD *)(v7 - 480);
              *(_OWORD *)(v6 + 80) = *(_OWORD *)(v7 - 464);
              v67 = *(_OWORD *)(v7 - 448);
              v66 = *(_OWORD *)(v7 - 432);
              *(_QWORD *)(v6 + 128) = *(_QWORD *)(v7 - 416);
              *(_OWORD *)(v6 + 96) = v67;
              *(_OWORD *)(v6 + 112) = v66;
              *(_OWORD *)(v6 + 144) = *(_OWORD *)(v7 - 400);
              *(_OWORD *)(v6 + 160) = *(_OWORD *)(v7 - 384);
              *(_OWORD *)(v6 + 176) = *(_OWORD *)(v7 - 368);
              *(_OWORD *)(v6 + 192) = *(_OWORD *)(v7 - 352);
              *(_OWORD *)(v6 + 208) = *(_OWORD *)(v7 - 336);
              *(_OWORD *)(v6 + 224) = *(_OWORD *)(v7 - 320);
              *(_OWORD *)(v6 + 240) = *(_OWORD *)(v7 - 304);
              IKString::operator=(v149, v7 - 288);
              *(_DWORD *)(v6 + 280) = *(_DWORD *)(v7 - 264);
              *(_OWORD *)(v6 + 288) = *(_OWORD *)(v7 - 256);
              *(_OWORD *)(v6 + 304) = *(_OWORD *)(v7 - 240);
              *(_OWORD *)(v6 + 320) = *(_OWORD *)(v7 - 224);
              *(_OWORD *)(v6 + 336) = *(_OWORD *)(v7 - 208);
              v68 = *(_QWORD *)(v7 - 176);
              *(_OWORD *)(v6 + 352) = *(_OWORD *)(v7 - 192);
              *(_QWORD *)(v6 + 368) = v68;
              *(_QWORD *)(v6 + 384) = *(_QWORD *)(v7 - 160);
              *(_OWORD *)(v6 + 400) = *(_OWORD *)(v7 - 144);
              FIK::IKArray<IKString>::operator=((uint64_t *)(v6 + 416), (__int128 *)(v7 - 128));
              *(_OWORD *)(v6 + 448) = *(_OWORD *)(v7 - 96);
              *(_OWORD *)(v6 + 464) = *(_OWORD *)(v7 - 80);
              *(_QWORD *)(v6 + 480) = *(_QWORD *)(v7 - 64);
              *(_OWORD *)(v6 + 496) = *(_OWORD *)(v7 - 48);
              *(_OWORD *)(v6 + 512) = *(_OWORD *)(v7 - 32);
              *(_OWORD *)(v6 + 528) = *(_OWORD *)(v7 - 16);
            }
            *v65 = v153;
            IKString::operator=((uint64_t *)(v7 - 536), (uint64_t)&v156);
            IKString::operator=((uint64_t *)(v7 - 512), (uint64_t)&v159);
            *(_OWORD *)(v7 - 480) = v162;
            *(_OWORD *)(v7 - 464) = v163;
            v70 = v164;
            v69 = v165;
            *(_QWORD *)(v7 - 416) = v166;
            *(_OWORD *)(v7 - 448) = v70;
            *(_OWORD *)(v7 - 432) = v69;
            *(_OWORD *)(v7 - 400) = v167;
            *(_OWORD *)(v7 - 384) = v168;
            *(_OWORD *)(v7 - 368) = v169;
            *(_OWORD *)(v7 - 352) = v170;
            *(_OWORD *)(v7 - 336) = v171;
            *(_OWORD *)(v7 - 320) = v172;
            *(_OWORD *)(v7 - 304) = v173;
            IKString::operator=((uint64_t *)(v7 - 288), (uint64_t)&v174);
            *(_DWORD *)(v7 - 264) = v177;
            *(_OWORD *)(v7 - 256) = v178;
            *(_OWORD *)(v7 - 240) = v179;
            *(_OWORD *)(v7 - 224) = v180;
            *(_OWORD *)(v7 - 208) = v181;
            v71 = v183;
            *(_OWORD *)(v7 - 192) = v182;
            *(_QWORD *)(v7 - 176) = v71;
            *(_QWORD *)(v7 - 160) = v184;
            *(_OWORD *)(v7 - 144) = v185;
            v72 = v186;
            v73 = v187;
            v186 = 0uLL;
            *(_QWORD *)&v187 = 0;
            v194 = v72;
            v195 = v73;
            FIK::swap((uint64_t *)(v7 - 128), (uint64_t *)&v194);
            FIK::IKArray<IKString>::~IKArray((uint64_t)&v194);
            *(_OWORD *)(v7 - 96) = v188;
            *(_OWORD *)(v7 - 80) = v189;
            *(_QWORD *)(v7 - 64) = v190;
            *(_OWORD *)(v7 - 48) = v191;
            *(_OWORD *)(v7 - 32) = v192;
            *(_OWORD *)(v7 - 16) = v193;
            result = FIK::IKArray<IKString>::~IKArray((uint64_t)&v186);
            if (v175)
            {
              result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v176 + 24))(v176, v174, 0, 8);
              v174 = 0;
              v175 = 0;
            }
            a2 = v151;
            if (v160)
            {
              result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v161 + 24))(v161, v159, 0, 8);
              v159 = 0;
              v160 = 0;
            }
            if (v157)
              result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v158 + 24))(v158, v156, 0, 8);
            goto LABEL_38;
          }
          v152 = *(_QWORD *)v7;
          IKString::IKString(&v156, (uint64_t *)(v7 + 8), *(_QWORD *)(v7 + 24));
          IKString::IKString(&v159, (uint64_t *)(v7 + 32), *(_QWORD *)(v7 + 48));
          v12 = *(_OWORD *)(v7 + 80);
          v162 = *(_OWORD *)(v7 + 64);
          v163 = v12;
          v13 = *(_OWORD *)(v7 + 96);
          v14 = *(_OWORD *)(v7 + 112);
          v166 = *(_QWORD *)(v7 + 128);
          v164 = v13;
          v165 = v14;
          v15 = *(_OWORD *)(v7 + 160);
          v167 = *(_OWORD *)(v7 + 144);
          v168 = v15;
          v16 = *(_OWORD *)(v7 + 192);
          v169 = *(_OWORD *)(v7 + 176);
          v170 = v16;
          v17 = *(_OWORD *)(v7 + 224);
          v171 = *(_OWORD *)(v7 + 208);
          v172 = v17;
          v173 = *(_OWORD *)(v7 + 240);
          IKString::IKString(&v174, (uint64_t *)(v7 + 256), *(_QWORD *)(v7 + 272));
          v18 = 0;
          v19 = *(_DWORD *)(v7 + 280);
          v178 = *(_OWORD *)(v7 + 288);
          v20 = *(_OWORD *)(v7 + 304);
          v21 = *(_OWORD *)(v7 + 336);
          v180 = *(_OWORD *)(v7 + 320);
          v179 = v20;
          v181 = v21;
          v22 = *(_QWORD *)(v7 + 368);
          v182 = *(_OWORD *)(v7 + 352);
          v23 = *(_QWORD *)(v7 + 384);
          v24 = *(_OWORD *)(v7 + 416);
          v185 = *(_OWORD *)(v7 + 400);
          *(_QWORD *)(v7 + 416) = 0;
          *(_QWORD *)(v7 + 424) = 0;
          v25 = *(_OWORD *)(v7 + 432);
          v26 = *(_OWORD *)(v7 + 448);
          *(_QWORD *)(v7 + 432) = 0;
          v186 = v24;
          v187 = v25;
          v188 = v26;
          v189 = *(_OWORD *)(v7 + 464);
          v27 = *(_QWORD *)(v7 + 480);
          v28 = *(_OWORD *)(v7 + 512);
          v191 = *(_OWORD *)(v7 + 496);
          v177 = v19;
          v183 = v22;
          v184 = v23;
          v190 = v27;
          v192 = v28;
          v193 = *(_OWORD *)(v7 + 528);
          do
          {
            v29 = *(_DWORD *)(v7 + v18 + 544);
            v18 += 544;
          }
          while (v29 < (int)v152);
          v30 = v7 + v18;
          if (v18 == 544)
          {
            a2 = v151;
            do
            {
              if (v30 >= (unint64_t)a2)
                break;
              a2 -= 68;
            }
            while (*(_DWORD *)a2 >= (int)v152);
          }
          else
          {
            do
              a2 -= 68;
            while (*(_DWORD *)a2 >= (int)v152);
          }
          v147 = (_OWORD *)(v7 + 528);
          v148 = (uint64_t *)(v7 + 256);
          v145 = (uint64_t *)(v7 + 416);
          v146 = (_OWORD *)(v7 + 464);
          v143 = (_OWORD *)(v7 + 336);
          v144 = v7 + 352;
          v7 += v18;
          if (v30 < (unint64_t)a2)
          {
            v31 = a2;
            do
            {
              std::swap[abi:nn180100]<FIK::MoCapBone>((uint64_t *)v7, v31);
              do
              {
                v32 = *(_DWORD *)(v7 + 544);
                v7 += 544;
              }
              while (v32 < (int)v152);
              do
                v31 -= 68;
              while (*(_DWORD *)v31 >= (int)v152);
            }
            while (v7 < (unint64_t)v31);
          }
          v33 = (uint64_t *)(v7 - 544);
          if (v7 - 544 != v6)
          {
            *(_QWORD *)v6 = *v33;
            IKString::operator=((uint64_t *)(v6 + 8), v7 - 536);
            IKString::operator=((uint64_t *)(v6 + 32), v7 - 512);
            *(_OWORD *)(v6 + 64) = *(_OWORD *)(v7 - 480);
            *(_OWORD *)(v6 + 80) = *(_OWORD *)(v7 - 464);
            v35 = *(_OWORD *)(v7 - 448);
            v34 = *(_OWORD *)(v7 - 432);
            *(_QWORD *)(v6 + 128) = *(_QWORD *)(v7 - 416);
            *(_OWORD *)(v6 + 96) = v35;
            *(_OWORD *)(v6 + 112) = v34;
            *(_OWORD *)(v6 + 144) = *(_OWORD *)(v7 - 400);
            *(_OWORD *)(v6 + 160) = *(_OWORD *)(v7 - 384);
            *(_OWORD *)(v6 + 176) = *(_OWORD *)(v7 - 368);
            *(_OWORD *)(v6 + 192) = *(_OWORD *)(v7 - 352);
            *(_OWORD *)(v6 + 208) = *(_OWORD *)(v7 - 336);
            *(_OWORD *)(v6 + 224) = *(_OWORD *)(v7 - 320);
            *(_OWORD *)(v6 + 240) = *(_OWORD *)(v7 - 304);
            IKString::operator=(v148, v7 - 288);
            *(_DWORD *)(v6 + 280) = *(_DWORD *)(v7 - 264);
            *(_OWORD *)(v6 + 288) = *(_OWORD *)(v7 - 256);
            *(_OWORD *)(v6 + 304) = *(_OWORD *)(v7 - 240);
            *(_OWORD *)(v6 + 320) = *(_OWORD *)(v7 - 224);
            *v143 = *(_OWORD *)(v7 - 208);
            v36 = *(_QWORD *)(v7 - 176);
            *(_OWORD *)v144 = *(_OWORD *)(v7 - 192);
            *(_QWORD *)(v144 + 16) = v36;
            *(_QWORD *)(v6 + 384) = *(_QWORD *)(v7 - 160);
            *(_OWORD *)(v6 + 400) = *(_OWORD *)(v7 - 144);
            FIK::IKArray<IKString>::operator=(v145, (__int128 *)(v7 - 128));
            *(_OWORD *)(v6 + 448) = *(_OWORD *)(v7 - 96);
            *v146 = *(_OWORD *)(v7 - 80);
            *(_QWORD *)(v6 + 480) = *(_QWORD *)(v7 - 64);
            *(_OWORD *)(v6 + 496) = *(_OWORD *)(v7 - 48);
            *(_OWORD *)(v6 + 512) = *(_OWORD *)(v7 - 32);
            *v147 = *(_OWORD *)(v7 - 16);
          }
          *v33 = v152;
          IKString::operator=((uint64_t *)(v7 - 536), (uint64_t)&v156);
          IKString::operator=((uint64_t *)(v7 - 512), (uint64_t)&v159);
          *(_OWORD *)(v7 - 480) = v162;
          *(_OWORD *)(v7 - 464) = v163;
          v38 = v164;
          v37 = v165;
          *(_QWORD *)(v7 - 416) = v166;
          *(_OWORD *)(v7 - 448) = v38;
          *(_OWORD *)(v7 - 432) = v37;
          *(_OWORD *)(v7 - 400) = v167;
          *(_OWORD *)(v7 - 384) = v168;
          *(_OWORD *)(v7 - 368) = v169;
          *(_OWORD *)(v7 - 352) = v170;
          *(_OWORD *)(v7 - 336) = v171;
          *(_OWORD *)(v7 - 320) = v172;
          *(_OWORD *)(v7 - 304) = v173;
          IKString::operator=((uint64_t *)(v7 - 288), (uint64_t)&v174);
          *(_DWORD *)(v7 - 264) = v177;
          *(_OWORD *)(v7 - 256) = v178;
          *(_OWORD *)(v7 - 240) = v179;
          *(_OWORD *)(v7 - 224) = v180;
          *(_OWORD *)(v7 - 208) = v181;
          v39 = v183;
          *(_OWORD *)(v7 - 192) = v182;
          *(_QWORD *)(v7 - 176) = v39;
          *(_QWORD *)(v7 - 160) = v184;
          *(_OWORD *)(v7 - 144) = v185;
          v40 = v186;
          v41 = v187;
          v186 = 0uLL;
          *(_QWORD *)&v187 = 0;
          v194 = v40;
          v195 = v41;
          FIK::swap((uint64_t *)(v7 - 128), (uint64_t *)&v194);
          FIK::IKArray<IKString>::~IKArray((uint64_t)&v194);
          *(_OWORD *)(v7 - 96) = v188;
          *(_OWORD *)(v7 - 80) = v189;
          *(_QWORD *)(v7 - 64) = v190;
          *(_OWORD *)(v7 - 48) = v191;
          *(_OWORD *)(v7 - 32) = v192;
          *(_OWORD *)(v7 - 16) = v193;
          FIK::IKArray<IKString>::~IKArray((uint64_t)&v186);
          if (v175)
          {
            (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v176 + 24))(v176, v174, 0, 8);
            v174 = 0;
            v175 = 0;
          }
          if (v160)
          {
            (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v161 + 24))(v161, v159, 0, 8);
            v159 = 0;
            v160 = 0;
          }
          if (v157)
            (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v158 + 24))(v158, v156, 0, 8);
          v42 = v30 >= (unint64_t)a2;
          a2 = v151;
          if (!v42)
            goto LABEL_37;
          if (!(_DWORD)result)
          {
            if (v43)
              continue;
LABEL_37:
LABEL_38:
            a4 = 0;
            continue;
          }
          a2 = (uint64_t *)(v7 - 544);
          if (v43)
            return result;
          goto LABEL_2;
        }
        if ((a4 & 1) != 0)
        {
          if ((uint64_t *)v7 != a2)
          {
            v78 = (_QWORD *)(v7 + 544);
            if ((uint64_t *)(v7 + 544) != a2)
            {
              v79 = 0;
              v80 = (_QWORD *)v6;
              do
              {
                v81 = v78;
                if (*((_DWORD *)v80 + 136) < *(_DWORD *)v80)
                {
                  v154 = *v78;
                  IKString::IKString(&v156, v80 + 69, v80[71]);
                  IKString::IKString(&v159, v80 + 72, v80[74]);
                  v82 = *((_OWORD *)v80 + 39);
                  v162 = *((_OWORD *)v80 + 38);
                  v163 = v82;
                  v83 = *((_OWORD *)v80 + 41);
                  v164 = *((_OWORD *)v80 + 40);
                  v165 = v83;
                  v84 = *((_OWORD *)v80 + 44);
                  v167 = *((_OWORD *)v80 + 43);
                  v168 = v84;
                  v85 = *((_OWORD *)v80 + 46);
                  v169 = *((_OWORD *)v80 + 45);
                  v170 = v85;
                  v86 = *((_OWORD *)v80 + 48);
                  v171 = *((_OWORD *)v80 + 47);
                  v166 = v80[84];
                  v172 = v86;
                  v173 = *((_OWORD *)v80 + 49);
                  IKString::IKString(&v174, v80 + 100, v80[102]);
                  v87 = *((_OWORD *)v80 + 53);
                  v178 = *((_OWORD *)v80 + 52);
                  v88 = *((_OWORD *)v80 + 55);
                  v180 = *((_OWORD *)v80 + 54);
                  v179 = v87;
                  v181 = v88;
                  v182 = *((_OWORD *)v80 + 56);
                  v89 = *((_OWORD *)v80 + 60);
                  v185 = *((_OWORD *)v80 + 59);
                  v90 = *((_OWORD *)v80 + 61);
                  v91 = *((_OWORD *)v80 + 62);
                  v186 = v89;
                  v187 = v90;
                  v177 = *((_DWORD *)v80 + 206);
                  v183 = v80[114];
                  v184 = v80[116];
                  v80[121] = 0;
                  v80[120] = 0;
                  v80[122] = 0;
                  v188 = v91;
                  v189 = *((_OWORD *)v80 + 63);
                  v190 = v80[128];
                  v191 = *((_OWORD *)v80 + 65);
                  v192 = *((_OWORD *)v80 + 66);
                  v92 = v79;
                  v193 = *((_OWORD *)v80 + 67);
                  while (1)
                  {
                    v93 = v6 + v92;
                    *(_QWORD *)(v6 + v92 + 544) = *(_QWORD *)(v6 + v92);
                    v94 = (uint64_t *)(v6 + v92 + 8);
                    IKString::operator=((uint64_t *)(v6 + v92 + 552), (uint64_t)v94);
                    IKString::operator=((uint64_t *)(v93 + 576), v93 + 32);
                    v95 = *(_OWORD *)(v6 + v92 + 80);
                    *(_OWORD *)(v93 + 608) = *(_OWORD *)(v93 + 64);
                    *(_OWORD *)(v93 + 624) = v95;
                    v96 = *(_OWORD *)(v6 + v92 + 112);
                    *(_OWORD *)(v93 + 640) = *(_OWORD *)(v93 + 96);
                    *(_OWORD *)(v93 + 656) = v96;
                    *(_QWORD *)(v93 + 672) = *(_QWORD *)(v93 + 128);
                    v97 = *(_OWORD *)(v6 + v92 + 160);
                    *(_OWORD *)(v93 + 688) = *(_OWORD *)(v93 + 144);
                    *(_OWORD *)(v93 + 704) = v97;
                    v98 = *(_OWORD *)(v6 + v92 + 192);
                    *(_OWORD *)(v93 + 720) = *(_OWORD *)(v93 + 176);
                    *(_OWORD *)(v93 + 736) = v98;
                    v99 = *(_OWORD *)(v6 + v92 + 224);
                    *(_OWORD *)(v93 + 752) = *(_OWORD *)(v93 + 208);
                    *(_OWORD *)(v93 + 768) = v99;
                    *(_OWORD *)(v93 + 784) = *(_OWORD *)(v93 + 240);
                    IKString::operator=((uint64_t *)(v93 + 800), v93 + 256);
                    *(_DWORD *)(v93 + 824) = *(_DWORD *)(v93 + 280);
                    v100 = *(_OWORD *)(v6 + v92 + 304);
                    *(_OWORD *)(v93 + 832) = *(_OWORD *)(v93 + 288);
                    *(_OWORD *)(v93 + 848) = v100;
                    v101 = *(_OWORD *)(v6 + v92 + 336);
                    *(_OWORD *)(v93 + 864) = *(_OWORD *)(v93 + 320);
                    *(_OWORD *)(v93 + 880) = v101;
                    *(_OWORD *)(v93 + 896) = *(_OWORD *)(v93 + 352);
                    *(_QWORD *)(v93 + 912) = *(_QWORD *)(v93 + 368);
                    *(_QWORD *)(v93 + 928) = *(_QWORD *)(v93 + 384);
                    *(_OWORD *)(v93 + 944) = *(_OWORD *)(v93 + 400);
                    FIK::IKArray<IKString>::operator=((uint64_t *)(v93 + 960), (__int128 *)(v93 + 416));
                    v102 = *(_OWORD *)(v6 + v92 + 464);
                    *(_OWORD *)(v93 + 992) = *(_OWORD *)(v93 + 448);
                    *(_OWORD *)(v93 + 1008) = v102;
                    *(_QWORD *)(v93 + 1024) = *(_QWORD *)(v93 + 480);
                    v103 = *(_OWORD *)(v6 + v92 + 512);
                    *(_OWORD *)(v93 + 1040) = *(_OWORD *)(v93 + 496);
                    *(_OWORD *)(v93 + 1056) = v103;
                    *(_OWORD *)(v93 + 1072) = *(_OWORD *)(v93 + 528);
                    if (!v92)
                      break;
                    v92 -= 544;
                    if ((int)v154 >= *(_DWORD *)(v92 + v6))
                    {
                      v104 = v6 + v92 + 544;
                      goto LABEL_85;
                    }
                  }
                  v104 = v6;
LABEL_85:
                  *(_QWORD *)v104 = v154;
                  IKString::operator=(v94, (uint64_t)&v156);
                  IKString::operator=((uint64_t *)(v93 + 32), (uint64_t)&v159);
                  *(_OWORD *)(v104 + 64) = v162;
                  *(_OWORD *)(v93 + 80) = v163;
                  v106 = v164;
                  v105 = v165;
                  *(_QWORD *)(v93 + 128) = v166;
                  *(_OWORD *)(v93 + 96) = v106;
                  *(_OWORD *)(v93 + 112) = v105;
                  *(_OWORD *)(v104 + 144) = v167;
                  *(_OWORD *)(v104 + 160) = v168;
                  *(_OWORD *)(v104 + 176) = v169;
                  *(_OWORD *)(v104 + 192) = v170;
                  *(_OWORD *)(v104 + 208) = v171;
                  *(_OWORD *)(v104 + 224) = v172;
                  *(_OWORD *)(v104 + 240) = v173;
                  IKString::operator=((uint64_t *)(v93 + 256), (uint64_t)&v174);
                  *(_DWORD *)(v104 + 280) = v177;
                  *(_OWORD *)(v104 + 288) = v178;
                  *(_OWORD *)(v93 + 304) = v179;
                  *(_OWORD *)(v104 + 320) = v180;
                  *(_OWORD *)(v93 + 336) = v181;
                  v107 = v183;
                  *(_OWORD *)(v93 + 352) = v182;
                  *(_QWORD *)(v93 + 368) = v107;
                  *(_QWORD *)(v93 + 384) = v184;
                  *(_OWORD *)(v104 + 400) = v185;
                  v108 = v186;
                  v109 = v187;
                  v186 = 0uLL;
                  *(_QWORD *)&v187 = 0;
                  v194 = v108;
                  v195 = v109;
                  FIK::swap((uint64_t *)(v93 + 416), (uint64_t *)&v194);
                  FIK::IKArray<IKString>::~IKArray((uint64_t)&v194);
                  *(_OWORD *)(v104 + 448) = v188;
                  *(_OWORD *)(v93 + 464) = v189;
                  *(_QWORD *)(v104 + 480) = v190;
                  *(_OWORD *)(v104 + 496) = v191;
                  *(_OWORD *)(v104 + 512) = v192;
                  *(_OWORD *)(v93 + 528) = v193;
                  result = FIK::IKArray<IKString>::~IKArray((uint64_t)&v186);
                  if (v175)
                  {
                    result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v176 + 24))(v176, v174, 0, 8);
                    v174 = 0;
                    v175 = 0;
                  }
                  if (v160)
                  {
                    result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v161 + 24))(v161, v159, 0, 8);
                    v159 = 0;
                    v160 = 0;
                  }
                  if (v157)
                    result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v158 + 24))(v158, v156, 0, 8);
                }
                v78 = v81 + 68;
                v79 += 544;
                v80 = v81;
              }
              while (v81 + 68 != v151);
            }
          }
        }
        else if ((uint64_t *)v7 != a2)
        {
          v110 = (_QWORD *)(v7 + 544);
          if ((uint64_t *)(v7 + 544) != a2)
          {
            v111 = v7 - 544;
            do
            {
              v112 = v110;
              if (*(_DWORD *)(v6 + 544) < *(_DWORD *)v6)
              {
                v155 = *v110;
                IKString::IKString(&v156, (uint64_t *)(v6 + 552), *(_QWORD *)(v6 + 568));
                IKString::IKString(&v159, (uint64_t *)(v6 + 576), *(_QWORD *)(v6 + 592));
                v113 = *(_OWORD *)(v6 + 624);
                v162 = *(_OWORD *)(v6 + 608);
                v163 = v113;
                v114 = *(_OWORD *)(v6 + 656);
                v164 = *(_OWORD *)(v6 + 640);
                v165 = v114;
                v115 = *(_OWORD *)(v6 + 704);
                v167 = *(_OWORD *)(v6 + 688);
                v168 = v115;
                v116 = *(_OWORD *)(v6 + 736);
                v169 = *(_OWORD *)(v6 + 720);
                v170 = v116;
                v117 = *(_OWORD *)(v6 + 768);
                v171 = *(_OWORD *)(v6 + 752);
                v166 = *(_QWORD *)(v6 + 672);
                v172 = v117;
                v173 = *(_OWORD *)(v6 + 784);
                IKString::IKString(&v174, (uint64_t *)(v6 + 800), *(_QWORD *)(v6 + 816));
                v118 = *(_OWORD *)(v6 + 848);
                v178 = *(_OWORD *)(v6 + 832);
                v119 = *(_OWORD *)(v6 + 880);
                v180 = *(_OWORD *)(v6 + 864);
                v179 = v118;
                v181 = v119;
                v182 = *(_OWORD *)(v6 + 896);
                v120 = *(_OWORD *)(v6 + 960);
                v185 = *(_OWORD *)(v6 + 944);
                v121 = *(_OWORD *)(v6 + 976);
                v122 = *(_OWORD *)(v6 + 992);
                v186 = v120;
                v187 = v121;
                v177 = *(_DWORD *)(v6 + 824);
                v183 = *(_QWORD *)(v6 + 912);
                v184 = *(_QWORD *)(v6 + 928);
                *(_QWORD *)(v6 + 968) = 0;
                *(_QWORD *)(v6 + 960) = 0;
                *(_QWORD *)(v6 + 976) = 0;
                v188 = v122;
                v189 = *(_OWORD *)(v6 + 1008);
                v190 = *(_QWORD *)(v6 + 1024);
                v191 = *(_OWORD *)(v6 + 1040);
                v192 = *(_OWORD *)(v6 + 1056);
                v123 = *(_OWORD *)(v6 + 1072);
                v124 = v111;
                v193 = v123;
                do
                {
                  *(_QWORD *)(v124 + 1088) = *(_QWORD *)(v124 + 544);
                  IKString::operator=((uint64_t *)(v124 + 1096), v124 + 552);
                  IKString::operator=((uint64_t *)(v124 + 1120), v124 + 576);
                  v125 = *(_OWORD *)(v124 + 624);
                  *(_OWORD *)(v124 + 1152) = *(_OWORD *)(v124 + 608);
                  *(_OWORD *)(v124 + 1168) = v125;
                  v126 = *(_OWORD *)(v124 + 656);
                  *(_OWORD *)(v124 + 1184) = *(_OWORD *)(v124 + 640);
                  *(_OWORD *)(v124 + 1200) = v126;
                  v127 = *(_OWORD *)(v124 + 704);
                  *(_OWORD *)(v124 + 1232) = *(_OWORD *)(v124 + 688);
                  *(_OWORD *)(v124 + 1248) = v127;
                  v128 = *(_OWORD *)(v124 + 736);
                  *(_OWORD *)(v124 + 1264) = *(_OWORD *)(v124 + 720);
                  *(_OWORD *)(v124 + 1280) = v128;
                  v129 = *(_OWORD *)(v124 + 768);
                  *(_OWORD *)(v124 + 1296) = *(_OWORD *)(v124 + 752);
                  *(_QWORD *)(v124 + 1216) = *(_QWORD *)(v124 + 672);
                  *(_OWORD *)(v124 + 1312) = v129;
                  *(_OWORD *)(v124 + 1328) = *(_OWORD *)(v124 + 784);
                  IKString::operator=((uint64_t *)(v124 + 1344), v124 + 800);
                  v130 = *(_OWORD *)(v124 + 848);
                  *(_OWORD *)(v124 + 1376) = *(_OWORD *)(v124 + 832);
                  *(_OWORD *)(v124 + 1392) = v130;
                  v131 = *(_OWORD *)(v124 + 880);
                  *(_OWORD *)(v124 + 1408) = *(_OWORD *)(v124 + 864);
                  *(_DWORD *)(v124 + 1368) = *(_DWORD *)(v124 + 824);
                  *(_OWORD *)(v124 + 1424) = v131;
                  *(_OWORD *)(v124 + 1440) = *(_OWORD *)(v124 + 896);
                  *(_QWORD *)(v124 + 1456) = *(_QWORD *)(v124 + 912);
                  *(_QWORD *)(v124 + 1472) = *(_QWORD *)(v124 + 928);
                  *(_OWORD *)(v124 + 1488) = *(_OWORD *)(v124 + 944);
                  FIK::IKArray<IKString>::operator=((uint64_t *)(v124 + 1504), (__int128 *)(v124 + 960));
                  v132 = *(_OWORD *)(v124 + 1008);
                  *(_OWORD *)(v124 + 1536) = *(_OWORD *)(v124 + 992);
                  *(_OWORD *)(v124 + 1552) = v132;
                  *(_QWORD *)(v124 + 1568) = *(_QWORD *)(v124 + 1024);
                  *(_OWORD *)(v124 + 1584) = *(_OWORD *)(v124 + 1040);
                  *(_OWORD *)(v124 + 1600) = *(_OWORD *)(v124 + 1056);
                  *(_OWORD *)(v124 + 1616) = *(_OWORD *)(v124 + 1072);
                  v133 = *(_DWORD *)v124;
                  v124 -= 544;
                }
                while ((int)v155 < v133);
                *(_QWORD *)(v124 + 1088) = v155;
                IKString::operator=((uint64_t *)(v124 + 1096), (uint64_t)&v156);
                IKString::operator=((uint64_t *)(v124 + 1120), (uint64_t)&v159);
                *(_OWORD *)(v124 + 1152) = v162;
                *(_OWORD *)(v124 + 1168) = v163;
                v134 = v166;
                v135 = v165;
                *(_OWORD *)(v124 + 1184) = v164;
                *(_QWORD *)(v124 + 1216) = v134;
                *(_OWORD *)(v124 + 1200) = v135;
                *(_OWORD *)(v124 + 1232) = v167;
                *(_OWORD *)(v124 + 1248) = v168;
                *(_OWORD *)(v124 + 1264) = v169;
                *(_OWORD *)(v124 + 1280) = v170;
                *(_OWORD *)(v124 + 1296) = v171;
                *(_OWORD *)(v124 + 1312) = v172;
                *(_OWORD *)(v124 + 1328) = v173;
                IKString::operator=((uint64_t *)(v124 + 1344), (uint64_t)&v174);
                *(_DWORD *)(v124 + 1368) = v177;
                *(_OWORD *)(v124 + 1376) = v178;
                *(_OWORD *)(v124 + 1392) = v179;
                *(_OWORD *)(v124 + 1408) = v180;
                *(_OWORD *)(v124 + 1424) = v181;
                v136 = v183;
                *(_OWORD *)(v124 + 1440) = v182;
                *(_QWORD *)(v124 + 1456) = v136;
                *(_QWORD *)(v124 + 1472) = v184;
                *(_OWORD *)(v124 + 1488) = v185;
                v137 = v186;
                v138 = v187;
                v186 = 0uLL;
                *(_QWORD *)&v187 = 0;
                v194 = v137;
                v195 = v138;
                FIK::swap((uint64_t *)(v124 + 1504), (uint64_t *)&v194);
                FIK::IKArray<IKString>::~IKArray((uint64_t)&v194);
                *(_OWORD *)(v124 + 1536) = v188;
                *(_OWORD *)(v124 + 1552) = v189;
                *(_QWORD *)(v124 + 1568) = v190;
                *(_OWORD *)(v124 + 1584) = v191;
                *(_OWORD *)(v124 + 1600) = v192;
                *(_OWORD *)(v124 + 1616) = v193;
                result = FIK::IKArray<IKString>::~IKArray((uint64_t)&v186);
                if (v175)
                {
                  result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v176 + 24))(v176, v174, 0, 8);
                  v174 = 0;
                  v175 = 0;
                }
                if (v160)
                {
                  result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v161 + 24))(v161, v159, 0, 8);
                  v159 = 0;
                  v160 = 0;
                }
                if (v157)
                  result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v158 + 24))(v158, v156, 0, 8);
              }
              v110 = v112 + 68;
              v111 += 544;
              v6 = (unint64_t)v112;
            }
            while (v112 + 68 != v151);
          }
        }
        return result;
    }
  }
}

uint64_t std::__partial_sort[abi:nn180100]<std::_ClassicAlgPolicy,`anonymous namespace'::reorderRigBones(FIK::MoCapRig &)::$_0 &,FIK::IKArrayIterator<FIK::MoCapBone>,FIK::IKArrayIterator<FIK::MoCapBone>>(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  int64_t v14;
  uint64_t *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  __int128 v51;
  __int128 v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 *v68;
  __int128 *v69;
  __int128 *v70;
  __int128 *v71;
  __int128 *v72;
  uint64_t v73;
  __int128 *v74;
  __int128 *v75;
  uint64_t *v76;
  __int128 *v77;
  __int128 *v78;
  __int128 *v79;
  __int128 *v80;
  __int128 *v81;
  __int128 *v82;
  __int128 *v83;
  uint64_t v84;
  __int128 *v85;
  uint64_t *v86;
  uint64_t *v87;
  _OWORD *v88;
  _OWORD *v89;
  __int128 *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93[2];
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  uint64_t v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  uint64_t v156;
  uint64_t v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  uint64_t v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  _OWORD v167[3];
  uint64_t v168;
  uint64_t v169;

  if ((uint64_t *)result != a2)
  {
    v168 = v3;
    v169 = v4;
    v6 = a2;
    v7 = result;
    v8 = (uint64_t)a2 - result;
    v9 = ((uint64_t)a2 - result) / 544;
    if ((uint64_t)a2 - result >= 545)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (_QWORD *)(result + 544 * v10);
      do
      {
        v12 -= 68;
        --v11;
      }
      while (v11);
    }
    if (v6 != a3)
    {
      v13 = v6;
      do
      {
        if (*(_DWORD *)v13 < *(_DWORD *)v7)
        {
          std::swap[abi:nn180100]<FIK::MoCapBone>(v13, (uint64_t *)v7);
        }
        v13 += 68;
      }
      while (v13 != a3);
    }
    if (v8 >= 545)
    {
      v14 = v8 / 0x220uLL;
      v86 = (uint64_t *)(v7 + 32);
      v87 = (uint64_t *)(v7 + 8);
      v84 = v7 + 96;
      v85 = (__int128 *)(v7 + 64);
      v82 = (__int128 *)(v7 + 160);
      v83 = (__int128 *)(v7 + 144);
      v80 = (__int128 *)(v7 + 192);
      v81 = (__int128 *)(v7 + 176);
      v78 = (__int128 *)(v7 + 224);
      v79 = (__int128 *)(v7 + 208);
      v76 = (uint64_t *)(v7 + 256);
      v77 = (__int128 *)(v7 + 240);
      v74 = (__int128 *)(v7 + 320);
      v75 = (__int128 *)(v7 + 288);
      v72 = (__int128 *)(v7 + 400);
      v73 = v7 + 352;
      v70 = (__int128 *)(v7 + 496);
      v71 = (__int128 *)(v7 + 448);
      v68 = (__int128 *)(v7 + 528);
      v69 = (__int128 *)(v7 + 512);
      v91 = v7;
      do
      {
        v15 = v6;
        v92 = *(_QWORD *)v7;
        IKString::IKString(v93, v87, *(_QWORD *)(v7 + 24));
        IKString::IKString(&v95, v86, *(_QWORD *)(v7 + 48));
        v98 = *v85;
        v99 = *(_OWORD *)(v7 + 80);
        v16 = *(_OWORD *)v84;
        v17 = *(_OWORD *)(v84 + 16);
        v102 = *(_QWORD *)(v84 + 32);
        v100 = v16;
        v101 = v17;
        v103 = *v83;
        v104 = *v82;
        v105 = *v81;
        v106 = *v80;
        v107 = *v79;
        v108 = *v78;
        v109 = *v77;
        IKString::IKString(&v110, v76, *(_QWORD *)(v7 + 272));
        v18 = 0;
        v113 = *(_DWORD *)(v7 + 280);
        v114 = *v75;
        v19 = *(_OWORD *)(v7 + 304);
        v116 = *v74;
        v20 = *(_OWORD *)(v7 + 336);
        v115 = v19;
        v117 = v20;
        v21 = *(_OWORD *)v73;
        v119 = *(_QWORD *)(v73 + 16);
        v118 = v21;
        v120 = *(_QWORD *)(v7 + 384);
        v121 = *v72;
        v22 = *(_OWORD *)(v7 + 416);
        v23 = *(_OWORD *)(v7 + 432);
        *(_QWORD *)(v7 + 416) = 0;
        *(_QWORD *)(v7 + 424) = 0;
        *(_QWORD *)(v7 + 432) = 0;
        v122 = v22;
        v123 = v23;
        v124 = *v71;
        v125 = *(_OWORD *)(v7 + 464);
        v126 = *(_QWORD *)(v7 + 480);
        v127 = *v70;
        v128 = *v69;
        v24 = v7;
        v129 = *v68;
        do
        {
          v25 = v24 + 544 * v18 + 544;
          v26 = (2 * v18) | 1;
          v27 = 2 * v18 + 2;
          if (v27 < v14 && *(_DWORD *)v25 < *(_DWORD *)(v25 + 544))
          {
            v25 += 544;
            v26 = v27;
          }
          *(_QWORD *)v24 = *(_QWORD *)v25;
          IKString::operator=((uint64_t *)(v24 + 8), v25 + 8);
          IKString::operator=((uint64_t *)(v24 + 32), v25 + 32);
          *(_OWORD *)(v24 + 64) = *(_OWORD *)(v25 + 64);
          *(_OWORD *)(v24 + 80) = *(_OWORD *)(v25 + 80);
          v29 = *(_OWORD *)(v25 + 96);
          v28 = *(_OWORD *)(v25 + 112);
          *(_QWORD *)(v24 + 128) = *(_QWORD *)(v25 + 128);
          *(_OWORD *)(v24 + 96) = v29;
          *(_OWORD *)(v24 + 112) = v28;
          *(_OWORD *)(v24 + 144) = *(_OWORD *)(v25 + 144);
          *(_OWORD *)(v24 + 160) = *(_OWORD *)(v25 + 160);
          *(_OWORD *)(v24 + 176) = *(_OWORD *)(v25 + 176);
          *(_OWORD *)(v24 + 192) = *(_OWORD *)(v25 + 192);
          *(_OWORD *)(v24 + 208) = *(_OWORD *)(v25 + 208);
          *(_OWORD *)(v24 + 224) = *(_OWORD *)(v25 + 224);
          *(_OWORD *)(v24 + 240) = *(_OWORD *)(v25 + 240);
          IKString::operator=((uint64_t *)(v24 + 256), v25 + 256);
          *(_DWORD *)(v24 + 280) = *(_DWORD *)(v25 + 280);
          *(_OWORD *)(v24 + 288) = *(_OWORD *)(v25 + 288);
          *(_OWORD *)(v24 + 304) = *(_OWORD *)(v25 + 304);
          *(_OWORD *)(v24 + 320) = *(_OWORD *)(v25 + 320);
          *(_OWORD *)(v24 + 336) = *(_OWORD *)(v25 + 336);
          v30 = *(_QWORD *)(v25 + 368);
          *(_OWORD *)(v24 + 352) = *(_OWORD *)(v25 + 352);
          *(_QWORD *)(v24 + 368) = v30;
          *(_QWORD *)(v24 + 384) = *(_QWORD *)(v25 + 384);
          *(_OWORD *)(v24 + 400) = *(_OWORD *)(v25 + 400);
          FIK::IKArray<IKString>::operator=((uint64_t *)(v24 + 416), (__int128 *)(v25 + 416));
          *(_OWORD *)(v24 + 448) = *(_OWORD *)(v25 + 448);
          *(_OWORD *)(v24 + 464) = *(_OWORD *)(v25 + 464);
          *(_QWORD *)(v24 + 480) = *(_QWORD *)(v25 + 480);
          *(_OWORD *)(v24 + 496) = *(_OWORD *)(v25 + 496);
          *(_OWORD *)(v24 + 512) = *(_OWORD *)(v25 + 512);
          *(_OWORD *)(v24 + 528) = *(_OWORD *)(v25 + 528);
          v24 = v25;
          v18 = v26;
        }
        while (v26 <= (uint64_t)((unint64_t)(v14 - 2) >> 1));
        v6 -= 68;
        v90 = (__int128 *)(v25 + 352);
        v89 = (_OWORD *)(v25 + 336);
        v88 = (_OWORD *)(v25 + 304);
        if ((uint64_t *)v25 == v15 - 68)
        {
          *(_QWORD *)v25 = v92;
          IKString::operator=((uint64_t *)(v25 + 8), (uint64_t)v93);
          IKString::operator=((uint64_t *)(v25 + 32), (uint64_t)&v95);
          *(_OWORD *)(v25 + 64) = v98;
          *(_OWORD *)(v25 + 80) = v99;
          v63 = v100;
          v62 = v101;
          *(_QWORD *)(v25 + 128) = v102;
          *(_OWORD *)(v25 + 96) = v63;
          *(_OWORD *)(v25 + 112) = v62;
          *(_OWORD *)(v25 + 144) = v103;
          *(_OWORD *)(v25 + 160) = v104;
          *(_OWORD *)(v25 + 176) = v105;
          *(_OWORD *)(v25 + 192) = v106;
          *(_OWORD *)(v25 + 208) = v107;
          *(_OWORD *)(v25 + 224) = v108;
          *(_OWORD *)(v25 + 240) = v109;
          IKString::operator=((uint64_t *)(v25 + 256), (uint64_t)&v110);
          *(_DWORD *)(v25 + 280) = v113;
          *(_OWORD *)(v25 + 288) = v114;
          *v88 = v115;
          *(_OWORD *)(v25 + 320) = v116;
          *v89 = v117;
          v64 = v119;
          *v90 = v118;
          *(_QWORD *)(v25 + 368) = v64;
          *(_QWORD *)(v25 + 384) = v120;
          *(_OWORD *)(v25 + 400) = v121;
          v65 = v122;
          v66 = v123;
          v122 = 0uLL;
          *(_QWORD *)&v123 = 0;
          v130 = v65;
          v131 = v66;
          FIK::swap((uint64_t *)(v25 + 416), (uint64_t *)&v130);
          FIK::IKArray<IKString>::~IKArray((uint64_t)&v130);
          *(_OWORD *)(v25 + 448) = v124;
          *(_OWORD *)(v25 + 464) = v125;
          *(_QWORD *)(v25 + 480) = v126;
          *(_OWORD *)(v25 + 496) = v127;
          *(_OWORD *)(v25 + 512) = v128;
          *(_OWORD *)(v25 + 528) = v129;
        }
        else
        {
          *(_QWORD *)v25 = *v6;
          IKString::operator=((uint64_t *)(v25 + 8), (uint64_t)(v15 - 67));
          IKString::operator=((uint64_t *)(v25 + 32), (uint64_t)(v15 - 64));
          *(_OWORD *)(v25 + 64) = *((_OWORD *)v15 - 30);
          *(_OWORD *)(v25 + 80) = *((_OWORD *)v15 - 29);
          v32 = *((_OWORD *)v15 - 28);
          v31 = *((_OWORD *)v15 - 27);
          *(_QWORD *)(v25 + 128) = *(v15 - 52);
          *(_OWORD *)(v25 + 96) = v32;
          *(_OWORD *)(v25 + 112) = v31;
          *(_OWORD *)(v25 + 144) = *((_OWORD *)v15 - 25);
          *(_OWORD *)(v25 + 160) = *((_OWORD *)v15 - 24);
          *(_OWORD *)(v25 + 176) = *((_OWORD *)v15 - 23);
          *(_OWORD *)(v25 + 192) = *((_OWORD *)v15 - 22);
          *(_OWORD *)(v25 + 208) = *((_OWORD *)v15 - 21);
          *(_OWORD *)(v25 + 224) = *((_OWORD *)v15 - 20);
          *(_OWORD *)(v25 + 240) = *((_OWORD *)v15 - 19);
          IKString::operator=((uint64_t *)(v25 + 256), (uint64_t)(v15 - 36));
          *(_DWORD *)(v25 + 280) = *((_DWORD *)v15 - 66);
          *(_OWORD *)(v25 + 288) = *((_OWORD *)v15 - 16);
          *v88 = *((_OWORD *)v15 - 15);
          *(_OWORD *)(v25 + 320) = *((_OWORD *)v15 - 14);
          *v89 = *((_OWORD *)v15 - 13);
          v33 = *(v15 - 22);
          *v90 = *((_OWORD *)v15 - 12);
          *(_QWORD *)(v25 + 368) = v33;
          *(_QWORD *)(v25 + 384) = *(v15 - 20);
          *(_OWORD *)(v25 + 400) = *((_OWORD *)v15 - 9);
          FIK::IKArray<IKString>::operator=((uint64_t *)(v25 + 416), (__int128 *)v15 - 8);
          *(_OWORD *)(v25 + 448) = *((_OWORD *)v15 - 6);
          *(_OWORD *)(v25 + 464) = *((_OWORD *)v15 - 5);
          *(_QWORD *)(v25 + 480) = *(v15 - 8);
          *(_OWORD *)(v25 + 496) = *((_OWORD *)v15 - 3);
          *(_OWORD *)(v25 + 512) = *((_OWORD *)v15 - 2);
          *(_OWORD *)(v25 + 528) = *((_OWORD *)v15 - 1);
          *v6 = v92;
          IKString::operator=(v15 - 67, (uint64_t)v93);
          IKString::operator=(v15 - 64, (uint64_t)&v95);
          *((_OWORD *)v15 - 30) = v98;
          *((_OWORD *)v15 - 29) = v99;
          v35 = v100;
          v34 = v101;
          *(v15 - 52) = v102;
          *((_OWORD *)v15 - 28) = v35;
          *((_OWORD *)v15 - 27) = v34;
          *((_OWORD *)v15 - 25) = v103;
          *((_OWORD *)v15 - 24) = v104;
          *((_OWORD *)v15 - 23) = v105;
          *((_OWORD *)v15 - 22) = v106;
          *((_OWORD *)v15 - 21) = v107;
          *((_OWORD *)v15 - 20) = v108;
          *((_OWORD *)v15 - 19) = v109;
          IKString::operator=(v15 - 36, (uint64_t)&v110);
          *((_DWORD *)v15 - 66) = v113;
          *((_OWORD *)v15 - 16) = v114;
          *((_OWORD *)v15 - 15) = v115;
          *((_OWORD *)v15 - 14) = v116;
          *((_OWORD *)v15 - 13) = v117;
          v36 = v119;
          *((_OWORD *)v15 - 12) = v118;
          *(v15 - 22) = v36;
          *(v15 - 20) = v120;
          *((_OWORD *)v15 - 9) = v121;
          v37 = v122;
          v38 = v123;
          v122 = 0uLL;
          *(_QWORD *)&v123 = 0;
          v130 = v37;
          v131 = v38;
          FIK::swap(v15 - 16, (uint64_t *)&v130);
          FIK::IKArray<IKString>::~IKArray((uint64_t)&v130);
          *((_OWORD *)v15 - 6) = v124;
          *((_OWORD *)v15 - 5) = v125;
          *(v15 - 8) = v126;
          *((_OWORD *)v15 - 3) = v127;
          *((_OWORD *)v15 - 2) = v128;
          *((_OWORD *)v15 - 1) = v129;
          v39 = v25 - v91 + 544;
          if (v39 >= 545)
          {
            v40 = (v39 / 0x220uLL - 2) >> 1;
            v41 = v91 + 544 * v40;
            if (*(_DWORD *)v41 < *(_DWORD *)v25)
            {
              *(_QWORD *)&v130 = *(_QWORD *)v25;
              IKString::IKString((uint64_t *)&v130 + 1, (uint64_t *)(v25 + 8), *(_QWORD *)(v25 + 24));
              IKString::IKString(&v132, (uint64_t *)(v25 + 32), *(_QWORD *)(v25 + 48));
              v135 = *(_OWORD *)(v25 + 64);
              v136 = *(_OWORD *)(v25 + 80);
              v42 = *(_OWORD *)(v25 + 96);
              v43 = *(_OWORD *)(v25 + 112);
              v139 = *(_QWORD *)(v25 + 128);
              v137 = v42;
              v138 = v43;
              v140 = *(_OWORD *)(v25 + 144);
              v141 = *(_OWORD *)(v25 + 160);
              v142 = *(_OWORD *)(v25 + 176);
              v143 = *(_OWORD *)(v25 + 192);
              v144 = *(_OWORD *)(v25 + 208);
              v145 = *(_OWORD *)(v25 + 224);
              v146 = *(_OWORD *)(v25 + 240);
              IKString::IKString(&v147, (uint64_t *)(v25 + 256), *(_QWORD *)(v25 + 272));
              v150 = *(_DWORD *)(v25 + 280);
              v151 = *(_OWORD *)(v25 + 288);
              v152 = *(_OWORD *)(v25 + 304);
              v153 = *(_OWORD *)(v25 + 320);
              v154 = *(_OWORD *)(v25 + 336);
              v44 = *v90;
              v156 = *(_QWORD *)(v25 + 368);
              v155 = v44;
              v157 = *(_QWORD *)(v25 + 384);
              v158 = *(_OWORD *)(v25 + 400);
              v45 = *(_QWORD *)(v25 + 416);
              *(_QWORD *)(v25 + 416) = 0;
              *(_QWORD *)&v159 = v45;
              v46 = *(_QWORD *)(v25 + 424);
              *(_QWORD *)(v25 + 424) = 0;
              *((_QWORD *)&v159 + 1) = v46;
              v47 = *(_OWORD *)(v25 + 432);
              *(_QWORD *)(v25 + 432) = 0;
              v160 = v47;
              v161 = *(_OWORD *)(v25 + 448);
              v162 = *(_OWORD *)(v25 + 464);
              v163 = *(_QWORD *)(v25 + 480);
              v164 = *(_OWORD *)(v25 + 496);
              v165 = *(_OWORD *)(v25 + 512);
              v166 = *(_OWORD *)(v25 + 528);
              do
              {
                v48 = v41;
                *(_QWORD *)v25 = *(_QWORD *)v41;
                v49 = (uint64_t *)(v41 + 8);
                IKString::operator=((uint64_t *)(v25 + 8), v41 + 8);
                v50 = (uint64_t *)(v41 + 32);
                IKString::operator=((uint64_t *)(v25 + 32), v41 + 32);
                *(_OWORD *)(v25 + 64) = *(_OWORD *)(v41 + 64);
                *(_OWORD *)(v25 + 80) = *(_OWORD *)(v41 + 80);
                v52 = *(_OWORD *)(v41 + 96);
                v51 = *(_OWORD *)(v41 + 112);
                *(_QWORD *)(v25 + 128) = *(_QWORD *)(v41 + 128);
                *(_OWORD *)(v25 + 96) = v52;
                *(_OWORD *)(v25 + 112) = v51;
                *(_OWORD *)(v25 + 144) = *(_OWORD *)(v41 + 144);
                *(_OWORD *)(v25 + 160) = *(_OWORD *)(v41 + 160);
                *(_OWORD *)(v25 + 176) = *(_OWORD *)(v41 + 176);
                *(_OWORD *)(v25 + 192) = *(_OWORD *)(v41 + 192);
                *(_OWORD *)(v25 + 208) = *(_OWORD *)(v41 + 208);
                *(_OWORD *)(v25 + 224) = *(_OWORD *)(v41 + 224);
                *(_OWORD *)(v25 + 240) = *(_OWORD *)(v41 + 240);
                v53 = (uint64_t *)(v41 + 256);
                IKString::operator=((uint64_t *)(v25 + 256), v41 + 256);
                *(_DWORD *)(v25 + 280) = *(_DWORD *)(v41 + 280);
                *(_OWORD *)(v25 + 288) = *(_OWORD *)(v41 + 288);
                *(_OWORD *)(v25 + 304) = *(_OWORD *)(v41 + 304);
                *(_OWORD *)(v25 + 320) = *(_OWORD *)(v41 + 320);
                *(_OWORD *)(v25 + 336) = *(_OWORD *)(v41 + 336);
                v54 = *(_QWORD *)(v41 + 368);
                *(_OWORD *)(v25 + 352) = *(_OWORD *)(v41 + 352);
                *(_QWORD *)(v25 + 368) = v54;
                *(_QWORD *)(v25 + 384) = *(_QWORD *)(v41 + 384);
                *(_OWORD *)(v25 + 400) = *(_OWORD *)(v41 + 400);
                v55 = (uint64_t *)(v41 + 416);
                FIK::IKArray<IKString>::operator=((uint64_t *)(v25 + 416), (__int128 *)(v41 + 416));
                *(_OWORD *)(v25 + 448) = *(_OWORD *)(v41 + 448);
                *(_OWORD *)(v25 + 464) = *(_OWORD *)(v41 + 464);
                *(_QWORD *)(v25 + 480) = *(_QWORD *)(v41 + 480);
                *(_OWORD *)(v25 + 496) = *(_OWORD *)(v41 + 496);
                *(_OWORD *)(v25 + 512) = *(_OWORD *)(v41 + 512);
                *(_OWORD *)(v25 + 528) = *(_OWORD *)(v41 + 528);
                if (!v40)
                  break;
                v56 = v40 - 1;
                if (v40 < 1)
                  v56 = v40;
                v40 = v56 >> 1;
                v41 = v91 + 544 * (v56 >> 1);
                v25 = v48;
              }
              while (*(_DWORD *)v41 < (int)v130);
              *(_QWORD *)v48 = v130;
              IKString::operator=(v49, (uint64_t)&v130 + 8);
              IKString::operator=(v50, (uint64_t)&v132);
              *(_OWORD *)(v48 + 64) = v135;
              *(_OWORD *)(v48 + 80) = v136;
              v58 = v137;
              v57 = v138;
              *(_QWORD *)(v48 + 128) = v139;
              *(_OWORD *)(v48 + 96) = v58;
              *(_OWORD *)(v48 + 112) = v57;
              *(_OWORD *)(v48 + 144) = v140;
              *(_OWORD *)(v48 + 160) = v141;
              *(_OWORD *)(v48 + 176) = v142;
              *(_OWORD *)(v48 + 192) = v143;
              *(_OWORD *)(v48 + 208) = v144;
              *(_OWORD *)(v48 + 224) = v145;
              *(_OWORD *)(v48 + 240) = v146;
              IKString::operator=(v53, (uint64_t)&v147);
              *(_DWORD *)(v48 + 280) = v150;
              *(_OWORD *)(v48 + 288) = v151;
              *(_OWORD *)(v48 + 304) = v152;
              *(_OWORD *)(v48 + 320) = v153;
              *(_OWORD *)(v48 + 336) = v154;
              v59 = v156;
              *(_OWORD *)(v48 + 352) = v155;
              *(_QWORD *)(v48 + 368) = v59;
              *(_QWORD *)(v48 + 384) = v157;
              *(_OWORD *)(v48 + 400) = v158;
              v60 = v159;
              v61 = v160;
              v159 = 0uLL;
              *(_QWORD *)&v160 = 0;
              v167[0] = v60;
              v167[1] = v61;
              FIK::swap(v55, (uint64_t *)v167);
              FIK::IKArray<IKString>::~IKArray((uint64_t)v167);
              *(_OWORD *)(v48 + 448) = v161;
              *(_OWORD *)(v48 + 464) = v162;
              *(_QWORD *)(v48 + 480) = v163;
              *(_OWORD *)(v48 + 496) = v164;
              *(_OWORD *)(v48 + 512) = v165;
              *(_OWORD *)(v48 + 528) = v166;
              FIK::IKArray<IKString>::~IKArray((uint64_t)&v159);
              if (v148)
              {
                (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v149 + 24))(v149, v147, 0, 8);
                v147 = 0;
                v148 = 0;
              }
              if (v133)
              {
                (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v134 + 24))(v134, v132, 0, 8);
                v132 = 0;
                v133 = 0;
              }
              if ((_QWORD)v131)
                (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**((_QWORD **)&v131 + 1) + 24))(*((_QWORD *)&v131 + 1), *((_QWORD *)&v130 + 1), 0, 8);
            }
          }
        }
        result = FIK::IKArray<IKString>::~IKArray((uint64_t)&v122);
        if (v111)
        {
          result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v112 + 24))(v112, v110, 0, 8);
          v110 = 0;
          v111 = 0;
        }
        v7 = v91;
        if (v96)
        {
          result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v97 + 24))(v97, v95, 0, 8);
          v95 = 0;
          v96 = 0;
        }
        if (v93[1])
          result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v94 + 24))(v94, v93[0], 0, 8);
      }
      while (v14-- > 2);
    }
  }
  return result;
}

uint64_t *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,`anonymous namespace'::reorderRigBones(FIK::MoCapRig &)::$_0 &,FIK::IKArrayIterator<FIK::MoCapBone>>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t *v8;

  v5 = result;
  v6 = *(_DWORD *)a2;
  v7 = *(_DWORD *)a3;
  if (*(_DWORD *)a2 < *(_DWORD *)result)
  {
    if (v7 >= v6)
    {
      result = (uint64_t *)std::swap[abi:nn180100]<FIK::MoCapBone>(result, a2);
      if (*(_DWORD *)a3 >= *(_DWORD *)a2)
        return result;
      result = a2;
    }
    v8 = a3;
    return (uint64_t *)std::swap[abi:nn180100]<FIK::MoCapBone>(result, v8);
  }
  if (v7 < v6)
  {
    result = (uint64_t *)std::swap[abi:nn180100]<FIK::MoCapBone>(a2, a3);
    if (*(_DWORD *)a2 < *(_DWORD *)v5)
    {
      result = v5;
      v8 = a2;
      return (uint64_t *)std::swap[abi:nn180100]<FIK::MoCapBone>(result, v8);
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,`anonymous namespace'::reorderRigBones(FIK::MoCapRig &)::$_0 &,FIK::IKArrayIterator<FIK::MoCapBone>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;
  unint64_t v4;
  _BOOL8 result;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  int v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  _DWORD *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42[2];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  _OWORD v79[3];

  v2 = a2;
  v4 = 0xF0F0F0F0F0F0F0F1 * (((char *)a2 - (char *)a1) >> 5);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = a2 - 68;
      if (*((_DWORD *)v2 - 136) < *(_DWORD *)a1)
      {
        v7 = a1;
        goto LABEL_4;
      }
      return result;
    case 3uLL:
      return 1;
    case 4uLL:
      return 1;
    case 5uLL:
      v38 = a1 + 136;
      v39 = a2 - 68;
      if (*(_DWORD *)v39 < *((_DWORD *)a1 + 408))
      {
        std::swap[abi:nn180100]<FIK::MoCapBone>(a1 + 204, v39);
        if (*((_DWORD *)a1 + 408) < *v38)
        {
          std::swap[abi:nn180100]<FIK::MoCapBone>(a1 + 136, a1 + 204);
          if (*v38 < *((_DWORD *)a1 + 136))
          {
            std::swap[abi:nn180100]<FIK::MoCapBone>(a1 + 68, a1 + 136);
            if (*((_DWORD *)a1 + 136) < *(_DWORD *)a1)
            {
              v7 = a1;
              v6 = a1 + 68;
LABEL_4:
              std::swap[abi:nn180100]<FIK::MoCapBone>(v7, v6);
            }
          }
        }
      }
      return 1;
    default:
      v8 = a1 + 136;
      v9 = a1 + 204;
      if (a1 + 204 == v2)
        return 1;
      v10 = 0;
      v11 = 0;
      v40 = v2;
      break;
  }
  while (1)
  {
    v12 = *(_DWORD *)v8;
    v8 = v9;
    if (*(_DWORD *)v9 < v12)
    {
      v41 = *v9;
      IKString::IKString(v42, v9 + 1, v9[3]);
      IKString::IKString(&v44, v8 + 4, v8[6]);
      v13 = *((_OWORD *)v8 + 5);
      v47 = *((_OWORD *)v8 + 4);
      v48 = v13;
      v14 = *((_OWORD *)v8 + 6);
      v15 = *((_OWORD *)v8 + 7);
      v51 = v8[16];
      v49 = v14;
      v50 = v15;
      v16 = *((_OWORD *)v8 + 10);
      v52 = *((_OWORD *)v8 + 9);
      v53 = v16;
      v17 = *((_OWORD *)v8 + 12);
      v54 = *((_OWORD *)v8 + 11);
      v55 = v17;
      v18 = *((_OWORD *)v8 + 14);
      v56 = *((_OWORD *)v8 + 13);
      v57 = v18;
      v58 = *((_OWORD *)v8 + 15);
      IKString::IKString(&v59, v8 + 32, v8[34]);
      v19 = *((_DWORD *)v8 + 70);
      v20 = *((_OWORD *)v8 + 19);
      v63 = *((_OWORD *)v8 + 18);
      v21 = *((_OWORD *)v8 + 21);
      v65 = *((_OWORD *)v8 + 20);
      v64 = v20;
      v66 = v21;
      v22 = v8[46];
      v67 = *((_OWORD *)v8 + 22);
      v23 = v8[48];
      v24 = *((_OWORD *)v8 + 26);
      v70 = *((_OWORD *)v8 + 25);
      v8[52] = 0;
      v8[53] = 0;
      v25 = *((_OWORD *)v8 + 27);
      v26 = *((_OWORD *)v8 + 28);
      v8[54] = 0;
      v71 = v24;
      v72 = v25;
      v73 = v26;
      v74 = *((_OWORD *)v8 + 29);
      v27 = v8[60];
      v28 = *((_OWORD *)v8 + 32);
      v76 = *((_OWORD *)v8 + 31);
      v62 = v19;
      v68 = v22;
      v69 = v23;
      v75 = v27;
      v77 = v28;
      v29 = v10;
      v78 = *((_OWORD *)v8 + 33);
      while (1)
      {
        v30 = (char *)a1 + v29;
        *(uint64_t *)((char *)a1 + v29 + 1632) = *(uint64_t *)((char *)a1 + v29 + 1088);
        v31 = (uint64_t *)((char *)a1 + v29 + 1096);
        IKString::operator=((uint64_t *)((char *)a1 + v29 + 1640), (uint64_t)v31);
        IKString::operator=((uint64_t *)v30 + 208, (uint64_t)(v30 + 1120));
        *((_OWORD *)v30 + 106) = *((_OWORD *)v30 + 72);
        *((_OWORD *)v30 + 107) = *((_OWORD *)v30 + 73);
        *((_OWORD *)v30 + 108) = *((_OWORD *)v30 + 74);
        *((_OWORD *)v30 + 109) = *((_OWORD *)v30 + 75);
        *((_QWORD *)v30 + 220) = *((_QWORD *)v30 + 152);
        *((_OWORD *)v30 + 111) = *((_OWORD *)v30 + 77);
        *((_OWORD *)v30 + 112) = *((_OWORD *)v30 + 78);
        *((_OWORD *)v30 + 113) = *((_OWORD *)v30 + 79);
        *((_OWORD *)v30 + 114) = *((_OWORD *)v30 + 80);
        *((_OWORD *)v30 + 115) = *((_OWORD *)v30 + 81);
        *((_OWORD *)v30 + 116) = *((_OWORD *)v30 + 82);
        *((_OWORD *)v30 + 117) = *((_OWORD *)v30 + 83);
        IKString::operator=((uint64_t *)v30 + 236, (uint64_t)(v30 + 1344));
        *((_DWORD *)v30 + 478) = *((_DWORD *)v30 + 342);
        *((_OWORD *)v30 + 120) = *((_OWORD *)v30 + 86);
        *((_OWORD *)v30 + 121) = *((_OWORD *)v30 + 87);
        *((_OWORD *)v30 + 122) = *((_OWORD *)v30 + 88);
        *((_OWORD *)v30 + 123) = *((_OWORD *)v30 + 89);
        *((_OWORD *)v30 + 124) = *((_OWORD *)v30 + 90);
        *((_QWORD *)v30 + 250) = *((_QWORD *)v30 + 182);
        *((_QWORD *)v30 + 252) = *((_QWORD *)v30 + 184);
        *((_OWORD *)v30 + 127) = *((_OWORD *)v30 + 93);
        FIK::IKArray<IKString>::operator=((uint64_t *)v30 + 256, (__int128 *)v30 + 94);
        *((_OWORD *)v30 + 130) = *((_OWORD *)v30 + 96);
        *((_OWORD *)v30 + 131) = *((_OWORD *)v30 + 97);
        *((_QWORD *)v30 + 264) = *((_QWORD *)v30 + 196);
        *((_OWORD *)v30 + 133) = *((_OWORD *)v30 + 99);
        *((_OWORD *)v30 + 134) = *((_OWORD *)v30 + 100);
        *((_OWORD *)v30 + 135) = *((_OWORD *)v30 + 101);
        if (v29 == -1088)
          break;
        v29 -= 544;
        if ((int)v41 >= *((_DWORD *)v30 + 136))
        {
          v32 = (uint64_t)a1 + v29 + 1632;
          goto LABEL_14;
        }
      }
      v32 = (uint64_t)a1;
LABEL_14:
      *(_QWORD *)v32 = v41;
      IKString::operator=(v31, (uint64_t)v42);
      IKString::operator=((uint64_t *)v30 + 140, (uint64_t)&v44);
      *(_OWORD *)(v32 + 64) = v47;
      *((_OWORD *)v30 + 73) = v48;
      v33 = v51;
      v34 = v50;
      *((_OWORD *)v30 + 74) = v49;
      *((_QWORD *)v30 + 152) = v33;
      *((_OWORD *)v30 + 75) = v34;
      *(_OWORD *)(v32 + 144) = v52;
      *(_OWORD *)(v32 + 160) = v53;
      *(_OWORD *)(v32 + 176) = v54;
      *(_OWORD *)(v32 + 192) = v55;
      *(_OWORD *)(v32 + 208) = v56;
      *(_OWORD *)(v32 + 224) = v57;
      *(_OWORD *)(v32 + 240) = v58;
      IKString::operator=((uint64_t *)v30 + 168, (uint64_t)&v59);
      *(_DWORD *)(v32 + 280) = v62;
      *(_OWORD *)(v32 + 288) = v63;
      *((_OWORD *)v30 + 87) = v64;
      *(_OWORD *)(v32 + 320) = v65;
      *((_OWORD *)v30 + 89) = v66;
      v35 = v68;
      *((_OWORD *)v30 + 90) = v67;
      *((_QWORD *)v30 + 182) = v35;
      *((_QWORD *)v30 + 184) = v69;
      *(_OWORD *)(v32 + 400) = v70;
      v36 = v71;
      v37 = v72;
      v71 = 0uLL;
      *(_QWORD *)&v72 = 0;
      v79[0] = v36;
      v79[1] = v37;
      FIK::swap((uint64_t *)v30 + 188, (uint64_t *)v79);
      FIK::IKArray<IKString>::~IKArray((uint64_t)v79);
      *(_OWORD *)(v32 + 448) = v73;
      *((_OWORD *)v30 + 97) = v74;
      *(_QWORD *)(v32 + 480) = v75;
      *(_OWORD *)(v32 + 496) = v76;
      *(_OWORD *)(v32 + 512) = v77;
      *((_OWORD *)v30 + 101) = v78;
      FIK::IKArray<IKString>::~IKArray((uint64_t)&v71);
      if (v60)
      {
        (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v61 + 24))(v61, v59, 0, 8);
        v59 = 0;
        v60 = 0;
      }
      v2 = v40;
      if (v45)
      {
        (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v46 + 24))(v46, v44, 0, 8);
        v44 = 0;
        v45 = 0;
      }
      if (v42[1])
        (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v43 + 24))(v43, v42[0], 0, 8);
      if (++v11 == 8)
        return v8 + 68 == v40;
    }
    v9 = v8 + 68;
    v10 += 544;
    if (v8 + 68 == v2)
      return 1;
  }
}

uint64_t std::swap[abi:nn180100]<FIK::MoCapBone>(uint64_t *a1, uint64_t *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35[2];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  _OWORD v72[3];

  v34 = *a1;
  IKString::IKString(v35, a1 + 1, a1[3]);
  IKString::IKString(&v37, a1 + 4, a1[6]);
  v4 = *((_OWORD *)a1 + 5);
  v40 = *((_OWORD *)a1 + 4);
  v41 = v4;
  v5 = *((_OWORD *)a1 + 7);
  v42 = *((_OWORD *)a1 + 6);
  v43 = v5;
  v44 = a1[16];
  v6 = *((_OWORD *)a1 + 10);
  v45 = *((_OWORD *)a1 + 9);
  v46 = v6;
  v7 = *((_OWORD *)a1 + 12);
  v47 = *((_OWORD *)a1 + 11);
  v48 = v7;
  v8 = *((_OWORD *)a1 + 14);
  v49 = *((_OWORD *)a1 + 13);
  v50 = v8;
  v51 = *((_OWORD *)a1 + 15);
  IKString::IKString(&v52, a1 + 32, a1[34]);
  v55 = *((_DWORD *)a1 + 70);
  v9 = *((_OWORD *)a1 + 19);
  v56 = *((_OWORD *)a1 + 18);
  v57 = v9;
  v10 = *((_OWORD *)a1 + 21);
  v58 = *((_OWORD *)a1 + 20);
  v59 = v10;
  v60 = *((_OWORD *)a1 + 22);
  v11 = a1[48];
  v61 = a1[46];
  v62 = v11;
  v12 = *((_OWORD *)a1 + 25);
  v13 = *((_OWORD *)a1 + 26);
  *((_OWORD *)a1 + 26) = 0u;
  v63 = v12;
  v64 = v13;
  v14 = *((_OWORD *)a1 + 27);
  v15 = *((_OWORD *)a1 + 28);
  a1[54] = 0;
  v65 = v14;
  v66 = v15;
  v67 = *((_OWORD *)a1 + 29);
  v68 = a1[60];
  v16 = *((_OWORD *)a1 + 32);
  v69 = *((_OWORD *)a1 + 31);
  v70 = v16;
  v17 = *((_OWORD *)a1 + 33);
  *a1 = *a2;
  v71 = v17;
  IKString::operator=(a1 + 1, (uint64_t)(a2 + 1));
  IKString::operator=(a1 + 4, (uint64_t)(a2 + 4));
  *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
  *((_OWORD *)a1 + 5) = *((_OWORD *)a2 + 5);
  v19 = *((_OWORD *)a2 + 6);
  v18 = *((_OWORD *)a2 + 7);
  a1[16] = a2[16];
  *((_OWORD *)a1 + 6) = v19;
  *((_OWORD *)a1 + 7) = v18;
  *((_OWORD *)a1 + 9) = *((_OWORD *)a2 + 9);
  *((_OWORD *)a1 + 10) = *((_OWORD *)a2 + 10);
  *((_OWORD *)a1 + 11) = *((_OWORD *)a2 + 11);
  *((_OWORD *)a1 + 12) = *((_OWORD *)a2 + 12);
  *((_OWORD *)a1 + 13) = *((_OWORD *)a2 + 13);
  *((_OWORD *)a1 + 14) = *((_OWORD *)a2 + 14);
  *((_OWORD *)a1 + 15) = *((_OWORD *)a2 + 15);
  IKString::operator=(a1 + 32, (uint64_t)(a2 + 32));
  *((_DWORD *)a1 + 70) = *((_DWORD *)a2 + 70);
  *((_OWORD *)a1 + 18) = *((_OWORD *)a2 + 18);
  *((_OWORD *)a1 + 19) = *((_OWORD *)a2 + 19);
  *((_OWORD *)a1 + 20) = *((_OWORD *)a2 + 20);
  *((_OWORD *)a1 + 21) = *((_OWORD *)a2 + 21);
  v20 = a2[46];
  *((_OWORD *)a1 + 22) = *((_OWORD *)a2 + 22);
  a1[46] = v20;
  a1[48] = a2[48];
  *((_OWORD *)a1 + 25) = *((_OWORD *)a2 + 25);
  FIK::IKArray<IKString>::operator=(a1 + 52, (__int128 *)a2 + 26);
  *((_OWORD *)a1 + 28) = *((_OWORD *)a2 + 28);
  *((_OWORD *)a1 + 29) = *((_OWORD *)a2 + 29);
  a1[60] = a2[60];
  *((_OWORD *)a1 + 31) = *((_OWORD *)a2 + 31);
  *((_OWORD *)a1 + 32) = *((_OWORD *)a2 + 32);
  *((_OWORD *)a1 + 33) = *((_OWORD *)a2 + 33);
  *a2 = v34;
  IKString::operator=(a2 + 1, (uint64_t)v35);
  IKString::operator=(a2 + 4, (uint64_t)&v37);
  v21 = v41;
  *((_OWORD *)a2 + 4) = v40;
  *((_OWORD *)a2 + 5) = v21;
  v22 = v43;
  *((_OWORD *)a2 + 6) = v42;
  *((_OWORD *)a2 + 7) = v22;
  a2[16] = v44;
  v23 = v46;
  *((_OWORD *)a2 + 9) = v45;
  *((_OWORD *)a2 + 10) = v23;
  v24 = v48;
  *((_OWORD *)a2 + 11) = v47;
  *((_OWORD *)a2 + 12) = v24;
  v25 = v50;
  *((_OWORD *)a2 + 13) = v49;
  *((_OWORD *)a2 + 14) = v25;
  *((_OWORD *)a2 + 15) = v51;
  IKString::operator=(a2 + 32, (uint64_t)&v52);
  v26 = v57;
  *((_OWORD *)a2 + 18) = v56;
  *((_OWORD *)a2 + 19) = v26;
  v27 = v59;
  *((_OWORD *)a2 + 20) = v58;
  *((_OWORD *)a2 + 21) = v27;
  *((_OWORD *)a2 + 22) = v60;
  v28 = v64;
  *((_OWORD *)a2 + 25) = v63;
  *((_DWORD *)a2 + 70) = v55;
  v29 = v62;
  a2[46] = v61;
  a2[48] = v29;
  v64 = 0u;
  v30 = v65;
  *(_QWORD *)&v65 = 0;
  v72[0] = v28;
  v72[1] = v30;
  FIK::swap(a2 + 52, (uint64_t *)v72);
  FIK::IKArray<IKString>::~IKArray((uint64_t)v72);
  v31 = v67;
  *((_OWORD *)a2 + 28) = v66;
  *((_OWORD *)a2 + 29) = v31;
  a2[60] = v68;
  v32 = v70;
  *((_OWORD *)a2 + 31) = v69;
  *((_OWORD *)a2 + 32) = v32;
  *((_OWORD *)a2 + 33) = v71;
  result = FIK::IKArray<IKString>::~IKArray((uint64_t)&v64);
  if (v53)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v54 + 24))(v54, v52, 0, 8);
    v52 = 0;
    v53 = 0;
  }
  if (v38)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v39 + 24))(v39, v37, 0, 8);
    v37 = 0;
    v38 = 0;
  }
  if (v35[1])
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v36 + 24))(v36, v35[0], 0, 8);
  return result;
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,`anonymous namespace'::reorderRigBones(FIK::MoCapRig &)::$_0 &,FIK::IKArrayIterator<FIK::MoCapBone>>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result;

  if (*(_DWORD *)a4 < *(_DWORD *)a3)
  {
    result = std::swap[abi:nn180100]<FIK::MoCapBone>(a3, a4);
    if (*(_DWORD *)a3 < *(_DWORD *)a2)
    {
      result = std::swap[abi:nn180100]<FIK::MoCapBone>(a2, a3);
      if (*(_DWORD *)a2 < *(_DWORD *)a1)
        return std::swap[abi:nn180100]<FIK::MoCapBone>(a1, a2);
    }
  }
  return result;
}

uint64_t std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,`anonymous namespace'::reorderRigBones(FIK::MoCapRig &)::$_0 &,FIK::IKArrayIterator<FIK::MoCapBone>>(uint64_t result, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t *v30;
  __int128 v31;
  __int128 v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  int v36;
  int v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45[2];
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  _OWORD v82[3];
  uint64_t v83;
  uint64_t v84;

  v5 = a2 - 2;
  if (a2 >= 2)
  {
    v83 = v3;
    v84 = v4;
    v6 = a3;
    v7 = result;
    v43 = v5 >> 1;
    if ((uint64_t)(v5 >> 1) >= (uint64_t)(0xF0F0F0F0F0F0F0F1 * (((uint64_t)a3 - result) >> 5)))
    {
      v9 = (0xE1E1E1E1E1E1E1E2 * (((uint64_t)a3 - result) >> 5)) | 1;
      v10 = result + 544 * v9;
      if ((uint64_t)(0xE1E1E1E1E1E1E1E2 * (((uint64_t)a3 - result) >> 5) + 2) >= a2)
      {
        v11 = *(_DWORD *)v10;
      }
      else
      {
        v11 = *(_DWORD *)v10;
        v12 = *(_DWORD *)(v10 + 544);
        if (*(_DWORD *)v10 <= v12)
          v11 = *(_DWORD *)(v10 + 544);
        if (*(_DWORD *)v10 < v12)
        {
          v10 += 544;
          v9 = 0xE1E1E1E1E1E1E1E2 * (((uint64_t)a3 - result) >> 5) + 2;
        }
      }
      if (v11 >= *(_DWORD *)a3)
      {
        v44 = *a3;
        IKString::IKString(v45, a3 + 1, a3[3]);
        IKString::IKString(&v47, v6 + 4, v6[6]);
        v13 = *((_OWORD *)v6 + 5);
        v50 = *((_OWORD *)v6 + 4);
        v51 = v13;
        v14 = *((_OWORD *)v6 + 6);
        v15 = *((_OWORD *)v6 + 7);
        v54 = v6[16];
        v52 = v14;
        v53 = v15;
        v16 = *((_OWORD *)v6 + 10);
        v55 = *((_OWORD *)v6 + 9);
        v56 = v16;
        v17 = *((_OWORD *)v6 + 12);
        v57 = *((_OWORD *)v6 + 11);
        v58 = v17;
        v18 = *((_OWORD *)v6 + 14);
        v59 = *((_OWORD *)v6 + 13);
        v60 = v18;
        v61 = *((_OWORD *)v6 + 15);
        IKString::IKString(&v62, v6 + 32, v6[34]);
        v65 = *((_DWORD *)v6 + 70);
        v19 = *((_OWORD *)v6 + 19);
        v66 = *((_OWORD *)v6 + 18);
        v67 = v19;
        v20 = *((_OWORD *)v6 + 21);
        v68 = *((_OWORD *)v6 + 20);
        v69 = v20;
        v21 = v6[46];
        v70 = *((_OWORD *)v6 + 22);
        v22 = v6[48];
        v71 = v21;
        v72 = v22;
        v23 = *((_OWORD *)v6 + 25);
        v24 = *((_OWORD *)v6 + 26);
        v6[52] = 0;
        v6[53] = 0;
        v73 = v23;
        v74 = v24;
        v25 = *((_OWORD *)v6 + 27);
        v26 = *((_OWORD *)v6 + 28);
        v6[54] = 0;
        v75 = v25;
        v76 = v26;
        v77 = *((_OWORD *)v6 + 29);
        v78 = v6[60];
        v27 = *((_OWORD *)v6 + 32);
        v79 = *((_OWORD *)v6 + 31);
        v80 = v27;
        v81 = *((_OWORD *)v6 + 33);
        do
        {
          v28 = v6;
          v6 = (_QWORD *)v10;
          *v28 = *(_QWORD *)v10;
          v29 = (uint64_t *)(v10 + 8);
          IKString::operator=(v28 + 1, v10 + 8);
          v30 = (uint64_t *)(v10 + 32);
          IKString::operator=(v28 + 4, v10 + 32);
          *((_OWORD *)v28 + 4) = *(_OWORD *)(v10 + 64);
          *((_OWORD *)v28 + 5) = *(_OWORD *)(v10 + 80);
          v32 = *(_OWORD *)(v10 + 96);
          v31 = *(_OWORD *)(v10 + 112);
          v28[16] = *(_QWORD *)(v10 + 128);
          *((_OWORD *)v28 + 6) = v32;
          *((_OWORD *)v28 + 7) = v31;
          *((_OWORD *)v28 + 9) = *(_OWORD *)(v10 + 144);
          *((_OWORD *)v28 + 10) = *(_OWORD *)(v10 + 160);
          *((_OWORD *)v28 + 11) = *(_OWORD *)(v10 + 176);
          *((_OWORD *)v28 + 12) = *(_OWORD *)(v10 + 192);
          *((_OWORD *)v28 + 13) = *(_OWORD *)(v10 + 208);
          *((_OWORD *)v28 + 14) = *(_OWORD *)(v10 + 224);
          *((_OWORD *)v28 + 15) = *(_OWORD *)(v10 + 240);
          v33 = (uint64_t *)(v10 + 256);
          IKString::operator=(v28 + 32, v10 + 256);
          *((_DWORD *)v28 + 70) = *(_DWORD *)(v10 + 280);
          *((_OWORD *)v28 + 18) = *(_OWORD *)(v10 + 288);
          *((_OWORD *)v28 + 19) = *(_OWORD *)(v10 + 304);
          *((_OWORD *)v28 + 20) = *(_OWORD *)(v10 + 320);
          *((_OWORD *)v28 + 21) = *(_OWORD *)(v10 + 336);
          v34 = *(_QWORD *)(v10 + 368);
          *((_OWORD *)v28 + 22) = *(_OWORD *)(v10 + 352);
          v28[46] = v34;
          v28[48] = *(_QWORD *)(v10 + 384);
          *((_OWORD *)v28 + 25) = *(_OWORD *)(v10 + 400);
          v35 = (uint64_t *)(v10 + 416);
          FIK::IKArray<IKString>::operator=(v28 + 52, (__int128 *)(v10 + 416));
          *((_OWORD *)v28 + 28) = *(_OWORD *)(v10 + 448);
          *((_OWORD *)v28 + 29) = *(_OWORD *)(v10 + 464);
          v28[60] = *(_QWORD *)(v10 + 480);
          *((_OWORD *)v28 + 31) = *(_OWORD *)(v10 + 496);
          *((_OWORD *)v28 + 32) = *(_OWORD *)(v10 + 512);
          *((_OWORD *)v28 + 33) = *(_OWORD *)(v10 + 528);
          if (v43 < v9)
            break;
          v10 = v7 + 544 * ((2 * v9) | 1);
          if (2 * v9 + 2 >= a2)
          {
            v36 = *(_DWORD *)v10;
            v9 = (2 * v9) | 1;
          }
          else
          {
            v36 = *(_DWORD *)v10;
            v37 = *(_DWORD *)(v10 + 544);
            if (*(_DWORD *)v10 <= v37)
              v36 = *(_DWORD *)(v10 + 544);
            if (*(_DWORD *)v10 >= v37)
            {
              v9 = (2 * v9) | 1;
            }
            else
            {
              v10 += 544;
              v9 = 2 * v9 + 2;
            }
          }
        }
        while (v36 >= (int)v44);
        *v6 = v44;
        IKString::operator=(v29, (uint64_t)v45);
        IKString::operator=(v30, (uint64_t)&v47);
        *((_OWORD *)v6 + 4) = v50;
        *((_OWORD *)v6 + 5) = v51;
        v39 = v52;
        v38 = v53;
        v6[16] = v54;
        *((_OWORD *)v6 + 6) = v39;
        *((_OWORD *)v6 + 7) = v38;
        *((_OWORD *)v6 + 9) = v55;
        *((_OWORD *)v6 + 10) = v56;
        *((_OWORD *)v6 + 11) = v57;
        *((_OWORD *)v6 + 12) = v58;
        *((_OWORD *)v6 + 13) = v59;
        *((_OWORD *)v6 + 14) = v60;
        *((_OWORD *)v6 + 15) = v61;
        IKString::operator=(v33, (uint64_t)&v62);
        *((_DWORD *)v6 + 70) = v65;
        *((_OWORD *)v6 + 18) = v66;
        *((_OWORD *)v6 + 19) = v67;
        *((_OWORD *)v6 + 20) = v68;
        *((_OWORD *)v6 + 21) = v69;
        v40 = v71;
        *((_OWORD *)v6 + 22) = v70;
        v6[46] = v40;
        v6[48] = v72;
        *((_OWORD *)v6 + 25) = v73;
        v41 = v74;
        v42 = v75;
        v74 = 0uLL;
        *(_QWORD *)&v75 = 0;
        v82[0] = v41;
        v82[1] = v42;
        FIK::swap(v35, (uint64_t *)v82);
        FIK::IKArray<IKString>::~IKArray((uint64_t)v82);
        *((_OWORD *)v6 + 28) = v76;
        *((_OWORD *)v6 + 29) = v77;
        v6[60] = v78;
        *((_OWORD *)v6 + 31) = v79;
        *((_OWORD *)v6 + 32) = v80;
        *((_OWORD *)v6 + 33) = v81;
        result = FIK::IKArray<IKString>::~IKArray((uint64_t)&v74);
        if (v63)
        {
          result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v64 + 24))(v64, v62, 0, 8);
          v62 = 0;
          v63 = 0;
        }
        if (v48)
        {
          result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v49 + 24))(v49, v47, 0, 8);
          v47 = 0;
          v48 = 0;
        }
        if (v45[1])
          return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v46 + 24))(v46, v45[0], 0, 8);
      }
    }
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,`anonymous namespace'::reorderRigBones(FIK::MoCapRig &)::$_1 &,FIK::IKArrayIterator<FIK::RigBoneBase>,false>(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  int v12;
  unint64_t v13;
  int v14;
  int v15;
  uint64_t *v16;
  int v17;
  int v18;
  BOOL v19;
  BOOL v20;
  __int128 v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t *v29;
  uint64_t *v30;
  _DWORD *v31;
  int v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  __int128 v41;
  uint64_t v42;
  int64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  int v54;
  int v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _OWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t *v71;
  unint64_t v72;
  uint64_t *v73;
  __int128 v74;
  unint64_t v75;
  __int128 v76;
  int v77;
  uint64_t *v78;
  int64_t v80;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85[2];
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;

  v5 = result;
LABEL_2:
  v6 = a2;
  v78 = a2 - 12;
  v7 = v5;
  while (2)
  {
    v5 = v7;
    v8 = (uint64_t)v6 - v7;
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v6 - v7) >> 5);
    switch(v9)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v28 = *((_DWORD *)a2 - 24);
        v82 = a2 - 12;
        if (v28 < *(_DWORD *)v7)
        {
          v29 = (uint64_t *)v7;
          v30 = v82;
          return (uint64_t)std::swap[abi:nn180100]<FIK::RigBoneBase>(v29, v30);
        }
        return result;
      case 3uLL:
      case 4uLL:
      case 5uLL:
        v31 = (_DWORD *)(v7 + 192);
        v32 = *((_DWORD *)a2 - 24);
        v83 = a2 - 12;
        if (v32 < *(_DWORD *)(v7 + 288))
        {
          result = (uint64_t)std::swap[abi:nn180100]<FIK::RigBoneBase>((uint64_t *)(v7 + 288), v83);
          if (*(_DWORD *)(v7 + 288) < *v31)
          {
            result = (uint64_t)std::swap[abi:nn180100]<FIK::RigBoneBase>((uint64_t *)(v7 + 192), (uint64_t *)(v7 + 288));
            if (*v31 < *(_DWORD *)(v7 + 96))
            {
              result = (uint64_t)std::swap[abi:nn180100]<FIK::RigBoneBase>((uint64_t *)(v7 + 96), (uint64_t *)(v7 + 192));
              if (*(_DWORD *)(v7 + 96) < *(_DWORD *)v7)
              {
                v29 = (uint64_t *)v7;
                v30 = (uint64_t *)(v7 + 96);
                return (uint64_t)std::swap[abi:nn180100]<FIK::RigBoneBase>(v29, v30);
              }
            }
          }
        }
        return result;
      default:
        if (v8 > 2303)
        {
          if (!a3)
          {
            if ((uint64_t *)v7 != v6)
            {
              v80 = (v9 - 2) >> 1;
              v43 = v80;
              do
              {
                v44 = v43;
                if (v80 >= v43)
                {
                  v45 = (2 * v43) | 1;
                  v46 = v5 + 96 * v45;
                  if (2 * v43 + 2 >= (uint64_t)v9)
                  {
                    v47 = *(_DWORD *)v46;
                  }
                  else
                  {
                    v47 = *(_DWORD *)v46;
                    v48 = *(_DWORD *)(v46 + 96);
                    if (*(_DWORD *)v46 <= v48)
                      v47 = *(_DWORD *)(v46 + 96);
                    if (*(_DWORD *)v46 < v48)
                    {
                      v46 += 96;
                      v45 = 2 * v44 + 2;
                    }
                  }
                  v49 = v5 + 96 * v44;
                  if (v47 >= *(_DWORD *)v49)
                  {
                    v92 = *(_QWORD *)v49;
                    v50 = v5 + 96 * v44;
                    IKString::IKString(&v93, (uint64_t *)(v50 + 8), *(_QWORD *)(v50 + 24));
                    IKString::IKString(&v96, (uint64_t *)(v50 + 32), *(_QWORD *)(v50 + 48));
                    v99 = *(_OWORD *)(v50 + 64);
                    v100 = *(_OWORD *)(v50 + 80);
                    do
                    {
                      v51 = v49;
                      v49 = v46;
                      *(_QWORD *)v51 = *(_QWORD *)v46;
                      v52 = (uint64_t *)(v46 + 8);
                      IKString::operator=((uint64_t *)(v51 + 8), v46 + 8);
                      v53 = (uint64_t *)(v46 + 32);
                      IKString::operator=((uint64_t *)(v51 + 32), v46 + 32);
                      *(_OWORD *)(v51 + 64) = *(_OWORD *)(v46 + 64);
                      *(_OWORD *)(v51 + 80) = *(_OWORD *)(v46 + 80);
                      if (v80 < v45)
                        break;
                      v46 = v5 + 96 * ((2 * v45) | 1);
                      if (2 * v45 + 2 >= (uint64_t)v9)
                      {
                        v54 = *(_DWORD *)v46;
                        v45 = (2 * v45) | 1;
                      }
                      else
                      {
                        v54 = *(_DWORD *)v46;
                        v55 = *(_DWORD *)(v46 + 96);
                        if (*(_DWORD *)v46 <= v55)
                          v54 = *(_DWORD *)(v46 + 96);
                        if (*(_DWORD *)v46 >= v55)
                        {
                          v45 = (2 * v45) | 1;
                        }
                        else
                        {
                          v46 += 96;
                          v45 = 2 * v45 + 2;
                        }
                      }
                    }
                    while (v54 >= (int)v92);
                    *(_QWORD *)v49 = v92;
                    IKString::operator=(v52, (uint64_t)&v93);
                    IKString::operator=(v53, (uint64_t)&v96);
                    *(_OWORD *)(v49 + 64) = v99;
                    *(_OWORD *)(v49 + 80) = v100;
                    if (v97)
                    {
                      (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v98 + 24))(v98, v96, 0, 8);
                      v96 = 0;
                      v97 = 0;
                    }
                    if (v94)
                      (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v95 + 24))(v95, v93, 0, 8);
                  }
                }
                v43 = v44 - 1;
              }
              while (v44);
              v56 = v8 / 0x60uLL;
              do
              {
                v84 = *(_QWORD *)v5;
                IKString::IKString(v85, (uint64_t *)(v5 + 8), *(_QWORD *)(v5 + 24));
                IKString::IKString(&v87, (uint64_t *)(v5 + 32), *(_QWORD *)(v5 + 48));
                v57 = 0;
                v90 = *(_OWORD *)(v5 + 64);
                v91 = *(_OWORD *)(v5 + 80);
                v58 = v5;
                do
                {
                  v59 = v58 + 96 * v57 + 96;
                  v60 = (2 * v57) | 1;
                  v61 = 2 * v57 + 2;
                  if (v61 < v56 && *(_DWORD *)v59 < *(_DWORD *)(v59 + 96))
                  {
                    v59 += 96;
                    v60 = v61;
                  }
                  *(_QWORD *)v58 = *(_QWORD *)v59;
                  IKString::operator=((uint64_t *)(v58 + 8), v59 + 8);
                  IKString::operator=((uint64_t *)(v58 + 32), v59 + 32);
                  *(_OWORD *)(v58 + 64) = *(_OWORD *)(v59 + 64);
                  *(_OWORD *)(v58 + 80) = *(_OWORD *)(v59 + 80);
                  v58 = v59;
                  v57 = v60;
                }
                while (v60 <= (uint64_t)((unint64_t)(v56 - 2) >> 1));
                v62 = (_OWORD *)(v59 + 80);
                if ((uint64_t *)v59 == a2 - 12)
                {
                  *(_QWORD *)v59 = v84;
                  IKString::operator=((uint64_t *)(v59 + 8), (uint64_t)v85);
                  result = (uint64_t)IKString::operator=((uint64_t *)(v59 + 32), (uint64_t)&v87);
                  *(_OWORD *)(v59 + 64) = v90;
                  *v62 = v91;
                }
                else
                {
                  *(_QWORD *)v59 = *(a2 - 12);
                  IKString::operator=((uint64_t *)(v59 + 8), (uint64_t)(a2 - 11));
                  IKString::operator=((uint64_t *)(v59 + 32), (uint64_t)(a2 - 8));
                  *(_OWORD *)(v59 + 64) = *((_OWORD *)a2 - 2);
                  *v62 = *((_OWORD *)a2 - 1);
                  *(a2 - 12) = v84;
                  IKString::operator=(a2 - 11, (uint64_t)v85);
                  result = (uint64_t)IKString::operator=(a2 - 8, (uint64_t)&v87);
                  *((_OWORD *)a2 - 2) = v90;
                  *((_OWORD *)a2 - 1) = v91;
                  v63 = v59 - v5 + 96;
                  if (v63 >= 97)
                  {
                    v64 = (v63 / 0x60uLL - 2) >> 1;
                    v65 = v5 + 96 * v64;
                    if (*(_DWORD *)v65 < *(_DWORD *)v59)
                    {
                      v92 = *(_QWORD *)v59;
                      IKString::IKString(&v93, (uint64_t *)(v59 + 8), *(_QWORD *)(v59 + 24));
                      IKString::IKString(&v96, (uint64_t *)(v59 + 32), *(_QWORD *)(v59 + 48));
                      v99 = *(_OWORD *)(v59 + 64);
                      v100 = *(_OWORD *)(v59 + 80);
                      do
                      {
                        v66 = v65;
                        *(_QWORD *)v59 = *(_QWORD *)v65;
                        v67 = (uint64_t *)(v65 + 8);
                        IKString::operator=((uint64_t *)(v59 + 8), v65 + 8);
                        v68 = (uint64_t *)(v65 + 32);
                        IKString::operator=((uint64_t *)(v59 + 32), v65 + 32);
                        *(_OWORD *)(v59 + 64) = *(_OWORD *)(v65 + 64);
                        *(_OWORD *)(v59 + 80) = *(_OWORD *)(v65 + 80);
                        if (!v64)
                          break;
                        v69 = v64 - 1;
                        if (v64 < 1)
                          v69 = v64;
                        v64 = v69 >> 1;
                        v65 = v5 + 96 * (v69 >> 1);
                        v59 = v66;
                      }
                      while (*(_DWORD *)v65 < (int)v92);
                      *(_QWORD *)v66 = v92;
                      IKString::operator=(v67, (uint64_t)&v93);
                      result = (uint64_t)IKString::operator=(v68, (uint64_t)&v96);
                      *(_OWORD *)(v66 + 64) = v99;
                      *(_OWORD *)(v66 + 80) = v100;
                      if (v97)
                      {
                        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v98 + 24))(v98, v96, 0, 8);
                        v96 = 0;
                        v97 = 0;
                      }
                      if (v94)
                        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v95 + 24))(v95, v93, 0, 8);
                    }
                  }
                }
                if (v88)
                {
                  result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v89 + 24))(v89, v87, 0, 8);
                  v87 = 0;
                  v88 = 0;
                }
                if (v85[1])
                  result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v86 + 24))(v86, v85[0], 0, 8);
                a2 -= 12;
              }
              while (v56-- > 2);
            }
            return result;
          }
          if (v9 < 0x81)
          {
          }
          else
          {
            std::swap[abi:nn180100]<FIK::RigBoneBase>((uint64_t *)v7, (uint64_t *)(v7 + 96 * (v9 >> 1)));
          }
          --a3;
          if ((a4 & 1) == 0 && *(_DWORD *)(v7 - 96) >= *(_DWORD *)v7)
          {
            v92 = *(_QWORD *)v7;
            IKString::IKString(&v93, (uint64_t *)(v7 + 8), *(_QWORD *)(v7 + 24));
            IKString::IKString(&v96, (uint64_t *)(v7 + 32), *(_QWORD *)(v7 + 48));
            v21 = *(_OWORD *)(v7 + 80);
            v99 = *(_OWORD *)(v7 + 64);
            v100 = v21;
            if ((int)v92 >= *(_DWORD *)v78)
            {
              v23 = v7 + 96;
              do
              {
                v7 = v23;
                if (v23 >= (unint64_t)a2)
                  break;
                v23 += 96;
              }
              while ((int)v92 >= *(_DWORD *)v7);
            }
            else
            {
              do
              {
                v22 = *(_DWORD *)(v7 + 96);
                v7 += 96;
              }
              while ((int)v92 >= v22);
            }
            v24 = a2;
            if (v7 < (unint64_t)a2)
            {
              v24 = a2;
              do
              {
                v25 = *((_DWORD *)v24 - 24);
                v24 -= 12;
              }
              while ((int)v92 < v25);
            }
            while (v7 < (unint64_t)v24)
            {
              std::swap[abi:nn180100]<FIK::RigBoneBase>((uint64_t *)v7, v24);
              do
              {
                v26 = *(_DWORD *)(v7 + 96);
                v7 += 96;
              }
              while ((int)v92 >= v26);
              do
              {
                v27 = *((_DWORD *)v24 - 24);
                v24 -= 12;
              }
              while ((int)v92 < v27);
            }
            if (v7 - 96 != v5)
            {
              *(_QWORD *)v5 = *(_QWORD *)(v7 - 96);
              IKString::operator=((uint64_t *)(v5 + 8), v7 - 88);
              IKString::operator=((uint64_t *)(v5 + 32), v7 - 64);
              *(_OWORD *)(v5 + 64) = *(_OWORD *)(v7 - 32);
              *(_OWORD *)(v5 + 80) = *(_OWORD *)(v7 - 16);
            }
            *(_QWORD *)(v7 - 96) = v92;
            IKString::operator=((uint64_t *)(v7 - 88), (uint64_t)&v93);
            result = (uint64_t)IKString::operator=((uint64_t *)(v7 - 64), (uint64_t)&v96);
            *(_OWORD *)(v7 - 32) = v99;
            *(_OWORD *)(v7 - 16) = v100;
            if (v97)
            {
              result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v98 + 24))(v98, v96, 0, 8);
              v96 = 0;
              v97 = 0;
            }
            v6 = a2;
            if (v94)
              result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v95 + 24))(v95, v93, 0, 8);
            goto LABEL_36;
          }
          v92 = *(_QWORD *)v7;
          IKString::IKString(&v93, (uint64_t *)(v7 + 8), *(_QWORD *)(v7 + 24));
          IKString::IKString(&v96, (uint64_t *)(v7 + 32), *(_QWORD *)(v7 + 48));
          v10 = 0;
          v11 = *(_OWORD *)(v7 + 80);
          v99 = *(_OWORD *)(v7 + 64);
          v100 = v11;
          do
          {
            v12 = *(_DWORD *)(v7 + v10 + 96);
            v10 += 96;
          }
          while (v12 < (int)v92);
          v13 = v7 + v10;
          if (v10 == 96)
          {
            v6 = a2;
            do
            {
              if (v13 >= (unint64_t)v6)
                break;
              v15 = *((_DWORD *)v6 - 24);
              v6 -= 12;
            }
            while (v15 >= (int)v92);
          }
          else
          {
            do
            {
              v14 = *((_DWORD *)v6 - 24);
              v6 -= 12;
            }
            while (v14 >= (int)v92);
          }
          v7 += v10;
          if (v13 < (unint64_t)v6)
          {
            v16 = v6;
            do
            {
              std::swap[abi:nn180100]<FIK::RigBoneBase>((uint64_t *)v7, v16);
              do
              {
                v17 = *(_DWORD *)(v7 + 96);
                v7 += 96;
              }
              while (v17 < (int)v92);
              do
              {
                v18 = *((_DWORD *)v16 - 24);
                v16 -= 12;
              }
              while (v18 >= (int)v92);
            }
            while (v7 < (unint64_t)v16);
          }
          if (v7 - 96 != v5)
          {
            *(_QWORD *)v5 = *(_QWORD *)(v7 - 96);
            IKString::operator=((uint64_t *)(v5 + 8), v7 - 88);
            IKString::operator=((uint64_t *)(v5 + 32), v7 - 64);
            *(_OWORD *)(v5 + 64) = *(_OWORD *)(v7 - 32);
            *(_OWORD *)(v5 + 80) = *(_OWORD *)(v7 - 16);
          }
          *(_QWORD *)(v7 - 96) = v92;
          IKString::operator=((uint64_t *)(v7 - 88), (uint64_t)&v93);
          IKString::operator=((uint64_t *)(v7 - 64), (uint64_t)&v96);
          *(_OWORD *)(v7 - 32) = v99;
          *(_OWORD *)(v7 - 16) = v100;
          if (v97)
          {
            (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v98 + 24))(v98, v96, 0, 8);
            v96 = 0;
            v97 = 0;
          }
          if (v94)
            (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v95 + 24))(v95, v93, 0, 8);
          v19 = v13 >= (unint64_t)v6;
          v6 = a2;
          if (!v19)
            goto LABEL_35;
          if (!(_DWORD)result)
          {
            if (v20)
              continue;
LABEL_35:
LABEL_36:
            a4 = 0;
            continue;
          }
          a2 = (uint64_t *)(v7 - 96);
          if (v20)
            return result;
          goto LABEL_2;
        }
        if ((a4 & 1) != 0)
        {
          if ((uint64_t *)v7 != v6)
          {
            v33 = (uint64_t *)(v7 + 96);
            if ((uint64_t *)(v7 + 96) != a2)
            {
              v34 = 0;
              v35 = v7;
              do
              {
                v36 = v33;
                if (*(_DWORD *)(v35 + 96) < *(_DWORD *)v35)
                {
                  v92 = *v33;
                  IKString::IKString(&v93, (uint64_t *)(v35 + 104), *(_QWORD *)(v35 + 120));
                  IKString::IKString(&v96, (uint64_t *)(v35 + 128), *(_QWORD *)(v35 + 144));
                  v37 = *(_OWORD *)(v35 + 176);
                  v99 = *(_OWORD *)(v35 + 160);
                  v100 = v37;
                  v38 = v34;
                  while (1)
                  {
                    v39 = v5 + v38;
                    *(_QWORD *)(v5 + v38 + 96) = *(_QWORD *)(v5 + v38);
                    v40 = (uint64_t *)(v5 + v38 + 8);
                    IKString::operator=((uint64_t *)(v5 + v38 + 104), (uint64_t)v40);
                    IKString::operator=((uint64_t *)(v39 + 128), v39 + 32);
                    v41 = *(_OWORD *)(v5 + v38 + 80);
                    *(_OWORD *)(v39 + 160) = *(_OWORD *)(v39 + 64);
                    *(_OWORD *)(v39 + 176) = v41;
                    if (!v38)
                      break;
                    v38 -= 96;
                    if ((int)v92 >= *(_DWORD *)(v39 - 96))
                    {
                      v42 = v5 + v38 + 96;
                      goto LABEL_80;
                    }
                  }
                  v42 = v5;
LABEL_80:
                  *(_QWORD *)v42 = v92;
                  IKString::operator=(v40, (uint64_t)&v93);
                  result = (uint64_t)IKString::operator=((uint64_t *)(v39 + 32), (uint64_t)&v96);
                  *(_OWORD *)(v42 + 64) = v99;
                  *(_OWORD *)(v39 + 80) = v100;
                  if (v97)
                  {
                    result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v98 + 24))(v98, v96, 0, 8);
                    v96 = 0;
                    v97 = 0;
                  }
                  if (v94)
                    result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v95 + 24))(v95, v93, 0, 8);
                }
                v33 = v36 + 12;
                v34 += 96;
                v35 = (unint64_t)v36;
              }
              while (v36 + 12 != a2);
            }
          }
        }
        else if ((uint64_t *)v7 != v6)
        {
          v71 = (uint64_t *)(v7 + 96);
          if ((uint64_t *)(v7 + 96) != a2)
          {
            v72 = v7 - 96;
            do
            {
              v73 = v71;
              if (*(_DWORD *)(v5 + 96) < *(_DWORD *)v5)
              {
                v92 = *v71;
                IKString::IKString(&v93, (uint64_t *)(v5 + 104), *(_QWORD *)(v5 + 120));
                IKString::IKString(&v96, (uint64_t *)(v5 + 128), *(_QWORD *)(v5 + 144));
                v74 = *(_OWORD *)(v5 + 176);
                v99 = *(_OWORD *)(v5 + 160);
                v100 = v74;
                v75 = v72;
                do
                {
                  *(_QWORD *)(v75 + 192) = *(_QWORD *)(v75 + 96);
                  IKString::operator=((uint64_t *)(v75 + 200), v75 + 104);
                  IKString::operator=((uint64_t *)(v75 + 224), v75 + 128);
                  v76 = *(_OWORD *)(v75 + 176);
                  *(_OWORD *)(v75 + 256) = *(_OWORD *)(v75 + 160);
                  *(_OWORD *)(v75 + 272) = v76;
                  v77 = *(_DWORD *)v75;
                  v75 -= 96;
                }
                while ((int)v92 < v77);
                *(_QWORD *)(v75 + 192) = v92;
                IKString::operator=((uint64_t *)(v75 + 200), (uint64_t)&v93);
                result = (uint64_t)IKString::operator=((uint64_t *)(v75 + 224), (uint64_t)&v96);
                *(_OWORD *)(v75 + 256) = v99;
                *(_OWORD *)(v75 + 272) = v100;
                if (v97)
                {
                  result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v98 + 24))(v98, v96, 0, 8);
                  v96 = 0;
                  v97 = 0;
                }
                if (v94)
                  result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v95 + 24))(v95, v93, 0, 8);
              }
              v71 = v73 + 12;
              v72 += 96;
              v5 = (uint64_t)v73;
            }
            while (v73 + 12 != a2);
          }
        }
        return result;
    }
  }
}

uint64_t *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,`anonymous namespace'::reorderRigBones(FIK::MoCapRig &)::$_1 &,FIK::IKArrayIterator<FIK::RigBoneBase>>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t *v8;

  v5 = result;
  v6 = *(_DWORD *)a2;
  v7 = *(_DWORD *)a3;
  if (*(_DWORD *)a2 < *(_DWORD *)result)
  {
    if (v7 >= v6)
    {
      result = std::swap[abi:nn180100]<FIK::RigBoneBase>(result, a2);
      if (*(_DWORD *)a3 >= *(_DWORD *)a2)
        return result;
      result = a2;
    }
    v8 = a3;
    return std::swap[abi:nn180100]<FIK::RigBoneBase>(result, v8);
  }
  if (v7 < v6)
  {
    result = std::swap[abi:nn180100]<FIK::RigBoneBase>(a2, a3);
    if (*(_DWORD *)a2 < *(_DWORD *)v5)
    {
      result = v5;
      v8 = a2;
      return std::swap[abi:nn180100]<FIK::RigBoneBase>(result, v8);
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,`anonymous namespace'::reorderRigBones(FIK::MoCapRig &)::$_1 &,FIK::IKArrayIterator<FIK::RigBoneBase>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;
  unint64_t v4;
  _BOOL8 result;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t *v21;
  _DWORD *v22;
  uint64_t *v23;
  int v24;
  uint64_t *v25;
  uint64_t v26;
  _QWORD v27[2];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;

  v2 = a2;
  v4 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)a1) >> 5);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*((_DWORD *)a2 - 24) < *(_DWORD *)a1)
      {
        v6 = a1;
        v7 = a2 - 12;
        goto LABEL_4;
      }
      return result;
    case 3uLL:
      return 1;
    case 4uLL:
      return 1;
    case 5uLL:
      v22 = a1 + 24;
      v24 = *((_DWORD *)v2 - 24);
      v23 = v2 - 12;
      if (v24 < *((_DWORD *)a1 + 72))
      {
        std::swap[abi:nn180100]<FIK::RigBoneBase>(a1 + 36, v23);
        if (*((_DWORD *)a1 + 72) < *v22)
        {
          std::swap[abi:nn180100]<FIK::RigBoneBase>(a1 + 24, a1 + 36);
          if (*v22 < *((_DWORD *)a1 + 24))
          {
            std::swap[abi:nn180100]<FIK::RigBoneBase>(a1 + 12, a1 + 24);
            if (*((_DWORD *)a1 + 24) < *(_DWORD *)a1)
            {
              v6 = a1;
              v7 = a1 + 12;
LABEL_4:
              std::swap[abi:nn180100]<FIK::RigBoneBase>(v6, v7);
            }
          }
        }
      }
      return 1;
    default:
      v8 = a1 + 24;
      v9 = a1 + 36;
      if (a1 + 36 == v2)
        return 1;
      v10 = 0;
      v11 = 0;
      v12 = v27;
      v25 = v2;
      break;
  }
  while (1)
  {
    v13 = *(_DWORD *)v8;
    v8 = v9;
    if (*(_DWORD *)v9 < v13)
    {
      v26 = *v9;
      v14 = (uint64_t)v12;
      IKString::IKString(v12, v9 + 1, v9[3]);
      IKString::IKString(&v29, v8 + 4, v8[6]);
      v15 = *((_OWORD *)v8 + 5);
      v32 = *((_OWORD *)v8 + 4);
      v33 = v15;
      v16 = v10;
      while (1)
      {
        v17 = (uint64_t *)((char *)a1 + v16);
        *(uint64_t *)((char *)a1 + v16 + 288) = *(uint64_t *)((char *)a1 + v16 + 192);
        v18 = (uint64_t)a1 + v16 + 200;
        IKString::operator=((uint64_t *)((char *)a1 + v16 + 296), v18);
        IKString::operator=(v17 + 40, (uint64_t)(v17 + 28));
        v19 = *(_OWORD *)((char *)a1 + v16 + 272);
        *((_OWORD *)v17 + 22) = *((_OWORD *)v17 + 16);
        *((_OWORD *)v17 + 23) = v19;
        if (v16 == -192)
          break;
        v16 -= 96;
        if ((int)v26 >= *((_DWORD *)v17 + 24))
        {
          v20 = (uint64_t)a1 + v16 + 288;
          goto LABEL_14;
        }
      }
      v20 = (uint64_t)a1;
LABEL_14:
      *(_QWORD *)v20 = v26;
      v21 = (uint64_t *)v18;
      v12 = (uint64_t *)v14;
      IKString::operator=(v21, v14);
      IKString::operator=(v17 + 28, (uint64_t)&v29);
      *(_OWORD *)(v20 + 64) = v32;
      *((_OWORD *)v17 + 17) = v33;
      if (v30)
      {
        (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v31 + 24))(v31, v29, 0, 8);
        v29 = 0;
        v30 = 0;
      }
      v2 = v25;
      if (v27[1])
        (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v28 + 24))(v28, v27[0], 0, 8);
      if (++v11 == 8)
        return v8 + 12 == v25;
    }
    v9 = v8 + 12;
    v10 += 96;
    if (v8 + 12 == v2)
      return 1;
  }
}

uint64_t *std::swap[abi:nn180100]<FIK::RigBoneBase>(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v4;
  __int128 v5;
  uint64_t *result;
  __int128 v7;
  uint64_t v8;
  uint64_t v9[2];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;

  v8 = *a1;
  v4 = a1 + 1;
  IKString::IKString(v9, a1 + 1, a1[3]);
  IKString::IKString(&v11, a1 + 4, a1[6]);
  v5 = *((_OWORD *)a1 + 5);
  v14 = *((_OWORD *)a1 + 4);
  v15 = v5;
  *a1 = *a2;
  IKString::operator=(v4, (uint64_t)(a2 + 1));
  IKString::operator=(a1 + 4, (uint64_t)(a2 + 4));
  *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
  *((_OWORD *)a1 + 5) = *((_OWORD *)a2 + 5);
  *a2 = v8;
  IKString::operator=(a2 + 1, (uint64_t)v9);
  result = IKString::operator=(a2 + 4, (uint64_t)&v11);
  v7 = v15;
  *((_OWORD *)a2 + 4) = v14;
  *((_OWORD *)a2 + 5) = v7;
  if (v12)
  {
    result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v13 + 24))(v13, v11, 0, 8);
    v11 = 0;
    v12 = 0;
  }
  if (v9[1])
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v10 + 24))(v10, v9[0], 0, 8);
  return result;
}

uint64_t *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,`anonymous namespace'::reorderRigBones(FIK::MoCapRig &)::$_1 &,FIK::IKArrayIterator<FIK::RigBoneBase>>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *result;

  if (*(_DWORD *)a4 < *(_DWORD *)a3)
  {
    result = std::swap[abi:nn180100]<FIK::RigBoneBase>(a3, a4);
    if (*(_DWORD *)a3 < *(_DWORD *)a2)
    {
      result = std::swap[abi:nn180100]<FIK::RigBoneBase>(a2, a3);
      if (*(_DWORD *)a2 < *(_DWORD *)a1)
        return std::swap[abi:nn180100]<FIK::RigBoneBase>(a1, a2);
    }
  }
  return result;
}

uint64_t `anonymous namespace'::findIndexOf<std::string_view>(void *__s2, size_t __n, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;

  if (a4)
  {
    v8 = 16 * a4;
    v9 = a3;
    while (*(_QWORD *)(v9 + 8) != __n || memcmp(*(const void **)v9, __s2, __n))
    {
      v9 += 16;
      v8 -= 16;
      if (!v8)
      {
        v9 = a3 + 16 * a4;
        break;
      }
    }
  }
  else
  {
    v9 = a3;
  }
  if ((v9 - a3) >> 4 == a4)
    return -1;
  else
    return (v9 - a3) >> 4;
}

_QWORD *FIK::IKArray<FIK::HelperHierarchyBoneDefinition>::reserve(_QWORD *result, unint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;

  if (result[1] < a2)
  {
    v2 = result;
    v3 = result[3];
    v4 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v4)
    {
      v5 = (void *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)v3 + 16))(result[3], 32 * v4, 8);
      v6 = v5;
      if (32 * v4)
        bzero(v5, 32 * v4);
    }
    else
    {
      v6 = 0;
    }
    memcpy(v6, (const void *)v2[2], 32 * *v2);
    v7 = v2[2];
    result = (_QWORD *)v2[3];
    v2[1] = v4;
    v2[2] = v6;
    v2[3] = v3;
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, _QWORD, uint64_t))(*result + 24))(result, v7, 0, 8);
  }
  return result;
}

uint64_t ikinema::rig::generate_EnrollmentRigV3@<X0>(ikinema::rig *this@<X0>, uint64_t a2@<X8>)
{
  void (***v3)(FIK::CrtAllocator *__hidden);
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v13;
  uint64_t v14;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t result;
  uint64_t v93;
  float32x4_t *v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _BYTE v106[11];
  __int16 v107;
  uint64_t v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  int v119;
  _DWORD v120[5];
  uint64_t v121;
  int v122;
  __int16 v123;
  uint64_t v124;
  uint64_t v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _BYTE v131[128];

  v3 = FIK::defaultAllocator(this);
  FIK::IKRig::IKRig((FIK::IKRig *)a2, (FIK::Allocator *)v3);
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a2 + 184) = 0;
  *(_QWORD *)(a2 + 192) = 0;
  *(_QWORD *)(a2 + 200) = v3;
  *(_QWORD *)(a2 + 208) = 0;
  *(_QWORD *)(a2 + 216) = 0;
  *(_QWORD *)(a2 + 224) = 0;
  *(_QWORD *)(a2 + 232) = v3;
  *(_QWORD *)(a2 + 240) = 0;
  *(_QWORD *)(a2 + 248) = 0;
  *(_QWORD *)(a2 + 256) = 0;
  *(_QWORD *)(a2 + 272) = 0;
  *(_QWORD *)(a2 + 280) = 0;
  *(_QWORD *)(a2 + 264) = v3;
  *(_OWORD *)(a2 + 288) = xmmword_210802BA0;
  *(_BYTE *)(a2 + 304) = 0;
  *(_DWORD *)(a2 + 308) = 1065353216;
  *(_DWORD *)(a2 + 48) = 1;
  IKString::assign(v4, "D9F105BF-D64B-CD22-3582-85B8113257DA", (IKString *)0x24);
  *(_DWORD *)(a2 + 24) = 1065353216;
  *(_QWORD *)(a2 + 28) = 0x500000001;
  *(_QWORD *)(a2 + 36) = 0;
  *(_BYTE *)(a2 + 44) = 0;
  *(_DWORD *)(a2 + 48) = 1;
  *(_QWORD *)(a2 + 64) = 0x3727C5AC3D178D50;
  *(_QWORD *)(a2 + 72) = 0x1903DCCCCCDLL;
  *(_QWORD *)(a2 + 80) = 0x3F80000040800000;
  *(_WORD *)(a2 + 88) = 257;
  *(_BYTE *)(a2 + 90) = 0;
  *(_QWORD *)(a2 + 100) = 0;
  *(_QWORD *)(a2 + 92) = 0;
  *(_QWORD *)(a2 + 108) = 0x3F80000000000000;
  *(_WORD *)(a2 + 116) = 256;
  *(_DWORD *)(a2 + 120) = 1117782016;
  FIK::IKArray<FIK::MoCapTask>::reserve((uint64_t *)(a2 + 176), 0xBuLL);
  v5 = *(_QWORD *)(a2 + 16);
  v100 = 0;
  v101 = 0;
  v102 = v5;
  v103 = 0;
  v104 = 0;
  v105 = v5;
  *(_DWORD *)v106 = -1;
  *(_WORD *)&v106[4] = 257;
  v106[6] = 0;
  *(_DWORD *)&v106[7] = 16843009;
  v107 = 257;
  v108 = -1;
  v110 = xmmword_210804120;
  v111 = xmmword_210804130;
  v112 = xmmword_2108040E0;
  v113 = 0x4000000040000000;
  v114 = 0x40000000;
  v116 = 0;
  v115 = 0;
  v118 = 0;
  v117 = 0;
  v119 = 5;
  memset(v120, 0, sizeof(v120));
  v121 = v5;
  v122 = -1;
  v123 = 1;
  v124 = 0;
  v125 = 0;
  v126 = xmmword_210802BA0;
  v127 = xmmword_2108040F0;
  FIK::IKArray<FIK::MoCapTask>::push_back<FIK::MoCapTask,void>((uint64_t *)(a2 + 176), (uint64_t)&v100);
  if (*(_QWORD *)&v120[3])
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v121 + 24))(v121, *(_QWORD *)&v120[1], 0, 8);
    *(_OWORD *)&v120[1] = 0uLL;
  }
  if (v104)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v105 + 24))(v105, v103, 0, 8);
    v103 = 0;
    v104 = 0;
  }
  if (v101)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v102 + 24))(v102, v100, 0, 8);
  v6 = *(_QWORD *)(a2 + 192) + (*(_QWORD *)(a2 + 176) << 8);
  IKString::assign((_QWORD *)(v6 - 256), "head_joint_Task", (IKString *)0xF);
  IKString::assign((_QWORD *)(v6 - 232), "head_joint", (IKString *)0xA);
  *(_DWORD *)(v6 - 208) = 12;
  *(_WORD *)(v6 - 52) = 0;
  *(_WORD *)(v6 - 204) = 257;
  *(_BYTE *)(v6 - 202) = 0;
  *(_DWORD *)(v6 - 201) = 16843009;
  *(_QWORD *)(v6 - 192) = 0xD0000000DLL;
  *(_WORD *)(v6 - 197) = 257;
  *(int32x4_t *)(v6 - 176) = vdupq_n_s32(0x43200000u);
  *(int32x4_t *)(v6 - 160) = vdupq_n_s32(0x42C80000u);
  __asm { FMOV            V0.4S, #4.0 }
  *(_OWORD *)(v6 - 144) = _Q0;
  *(_OWORD *)(v6 - 128) = _Q0;
  *(_QWORD *)(v6 - 112) = 0;
  *(_QWORD *)(v6 - 104) = 0;
  *(_QWORD *)(v6 - 99) = 0;
  *(_QWORD *)(v6 - 88) = 0xBF80000000000005;
  IKString::assign((_QWORD *)(v6 - 80), "head_joint", (IKString *)0xA);
  *(_DWORD *)(v6 - 56) = -1;
  *(_OWORD *)(v6 - 48) = 0u;
  *(_OWORD *)(v6 - 32) = xmmword_210802BA0;
  __asm { FMOV            V0.4S, #1.0 }
  v99 = _Q0;
  *(_OWORD *)(v6 - 16) = _Q0;
  v13 = *(_QWORD *)(a2 + 16);
  v100 = 0;
  v101 = 0;
  v102 = v13;
  v103 = 0;
  v104 = 0;
  v105 = v13;
  *(_DWORD *)v106 = -1;
  *(_WORD *)&v106[4] = 257;
  v106[6] = 0;
  *(_DWORD *)&v106[7] = 16843009;
  v107 = 257;
  v108 = -1;
  v110 = xmmword_210804120;
  v111 = xmmword_210804130;
  v112 = xmmword_2108040E0;
  v113 = 0x4000000040000000;
  v114 = 0x40000000;
  v116 = 0;
  v115 = 0;
  v118 = 0;
  v117 = 0;
  v119 = 5;
  memset(v120, 0, sizeof(v120));
  v121 = v13;
  v122 = -1;
  v123 = 1;
  v124 = 0;
  v125 = 0;
  v126 = xmmword_210802BA0;
  v127 = xmmword_2108040F0;
  FIK::IKArray<FIK::MoCapTask>::push_back<FIK::MoCapTask,void>((uint64_t *)(a2 + 176), (uint64_t)&v100);
  if (*(_QWORD *)&v120[3])
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v121 + 24))(v121, *(_QWORD *)&v120[1], 0, 8);
    *(_QWORD *)&v120[1] = 0;
    *(_QWORD *)&v120[3] = 0;
  }
  if (v104)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v105 + 24))(v105, v103, 0, 8);
    v103 = 0;
    v104 = 0;
  }
  if (v101)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v102 + 24))(v102, v100, 0, 8);
  v14 = *(_QWORD *)(a2 + 192) + (*(_QWORD *)(a2 + 176) << 8);
  IKString::assign((_QWORD *)(v14 - 256), "hips_joint_Task", (IKString *)0xF);
  IKString::assign((_QWORD *)(v14 - 232), "hips_joint", (IKString *)0xA);
  *(_DWORD *)(v14 - 208) = 0;
  *(_WORD *)(v14 - 52) = 0;
  *(_WORD *)(v14 - 204) = 257;
  *(_BYTE *)(v14 - 202) = 0;
  *(_DWORD *)(v14 - 201) = 16843009;
  *(_WORD *)(v14 - 197) = 257;
  *(_QWORD *)(v14 - 192) = 0x100000001;
  __asm { FMOV            V1.4S, #30.0 }
  *(_OWORD *)(v14 - 176) = xmmword_2108054A0;
  *(_OWORD *)(v14 - 160) = _Q1;
  v98 = _Q1;
  *(_QWORD *)&v16 = 0x4000000040000000;
  *((_QWORD *)&v16 + 1) = 0x4000000040000000;
  *(_OWORD *)(v14 - 144) = v16;
  *(_OWORD *)(v14 - 128) = v16;
  *(_QWORD *)(v14 - 112) = 0;
  *(_QWORD *)(v14 - 104) = 0;
  *(_QWORD *)(v14 - 88) = 0xBF80000000000005;
  *(_QWORD *)(v14 - 99) = 0;
  IKString::assign((_QWORD *)(v14 - 80), "virtualHips", (IKString *)0xB);
  *(_DWORD *)(v14 - 56) = -1;
  *(_OWORD *)(v14 - 48) = 0u;
  *(_OWORD *)(v14 - 32) = xmmword_210802BA0;
  *(_OWORD *)(v14 - 16) = v99;
  v17 = *(_QWORD *)(a2 + 16);
  v100 = 0;
  v101 = 0;
  v102 = v17;
  v103 = 0;
  v104 = 0;
  v105 = v17;
  *(_DWORD *)v106 = -1;
  *(_WORD *)&v106[4] = 257;
  v106[6] = 0;
  *(_DWORD *)&v106[7] = 16843009;
  v107 = 257;
  v108 = -1;
  v110 = xmmword_210804120;
  v111 = xmmword_210804130;
  v112 = xmmword_2108040E0;
  v113 = 0x4000000040000000;
  v114 = 0x40000000;
  v116 = 0;
  v115 = 0;
  v118 = 0;
  v117 = 0;
  v119 = 5;
  memset(v120, 0, sizeof(v120));
  v121 = v17;
  v122 = -1;
  v123 = 1;
  v124 = 0;
  v125 = 0;
  v126 = xmmword_210802BA0;
  v127 = xmmword_2108040F0;
  FIK::IKArray<FIK::MoCapTask>::push_back<FIK::MoCapTask,void>((uint64_t *)(a2 + 176), (uint64_t)&v100);
  if (*(_QWORD *)&v120[3])
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v121 + 24))(v121, *(_QWORD *)&v120[1], 0, 8);
    *(_QWORD *)&v120[1] = 0;
    *(_QWORD *)&v120[3] = 0;
  }
  if (v104)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v105 + 24))(v105, v103, 0, 8);
    v103 = 0;
    v104 = 0;
  }
  if (v101)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v102 + 24))(v102, v100, 0, 8);
  v18 = *(_QWORD *)(a2 + 192) + (*(_QWORD *)(a2 + 176) << 8);
  IKString::assign((_QWORD *)(v18 - 256), "left_arm_joint_Task", (IKString *)0x13);
  IKString::assign((_QWORD *)(v18 - 232), "left_arm_joint", (IKString *)0xE);
  *(_DWORD *)(v18 - 208) = 14;
  *(_WORD *)(v18 - 52) = 0;
  *(_WORD *)(v18 - 204) = 1;
  *(_BYTE *)(v18 - 202) = 0;
  *(_DWORD *)(v18 - 201) = 16843009;
  *(_WORD *)(v18 - 197) = 257;
  *(_QWORD *)(v18 - 192) = 0xFFFFFFFF00000002;
  *(_OWORD *)(v18 - 176) = v98;
  *(_OWORD *)(v18 - 160) = v99;
  *(_QWORD *)&v19 = 0x4000000040000000;
  *((_QWORD *)&v19 + 1) = 0x4000000040000000;
  *(_OWORD *)(v18 - 144) = v19;
  *(_OWORD *)(v18 - 128) = v19;
  *(_QWORD *)(v18 - 112) = 0;
  *(_QWORD *)(v18 - 104) = 0;
  *(_QWORD *)(v18 - 88) = 0xBF80000000000005;
  *(_QWORD *)(v18 - 99) = 0;
  IKString::assign((_QWORD *)(v18 - 80), "left_arm_joint", (IKString *)0xE);
  *(_DWORD *)(v18 - 56) = -1;
  *(_OWORD *)(v18 - 48) = 0u;
  *(_OWORD *)(v18 - 32) = xmmword_210802BA0;
  *(_OWORD *)(v18 - 16) = v99;
  v20 = *(_QWORD *)(a2 + 16);
  v100 = 0;
  v101 = 0;
  v102 = v20;
  v103 = 0;
  v104 = 0;
  v105 = v20;
  *(_DWORD *)v106 = -1;
  *(_WORD *)&v106[4] = 257;
  v106[6] = 0;
  *(_DWORD *)&v106[7] = 16843009;
  v107 = 257;
  v108 = -1;
  v110 = xmmword_210804120;
  v111 = xmmword_210804130;
  v112 = xmmword_2108040E0;
  v113 = 0x4000000040000000;
  v114 = 0x40000000;
  v116 = 0;
  v115 = 0;
  v118 = 0;
  v117 = 0;
  v119 = 5;
  memset(v120, 0, sizeof(v120));
  v121 = v20;
  v122 = -1;
  v123 = 1;
  v124 = 0;
  v125 = 0;
  v126 = xmmword_210802BA0;
  v127 = xmmword_2108040F0;
  FIK::IKArray<FIK::MoCapTask>::push_back<FIK::MoCapTask,void>((uint64_t *)(a2 + 176), (uint64_t)&v100);
  if (*(_QWORD *)&v120[3])
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v121 + 24))(v121, *(_QWORD *)&v120[1], 0, 8);
    *(_QWORD *)&v120[1] = 0;
    *(_QWORD *)&v120[3] = 0;
  }
  if (v104)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v105 + 24))(v105, v103, 0, 8);
    v103 = 0;
    v104 = 0;
  }
  if (v101)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v102 + 24))(v102, v100, 0, 8);
  v21 = *(_QWORD *)(a2 + 192) + (*(_QWORD *)(a2 + 176) << 8);
  IKString::assign((_QWORD *)(v21 - 256), "left_forearm_joint_Task", (IKString *)0x17);
  IKString::assign((_QWORD *)(v21 - 232), "left_forearm_joint", (IKString *)0x12);
  *(_DWORD *)(v21 - 208) = 15;
  *(_WORD *)(v21 - 52) = 0;
  *(_WORD *)(v21 - 204) = 1;
  *(_BYTE *)(v21 - 202) = 0;
  *(_DWORD *)(v21 - 201) = 16843009;
  *(_WORD *)(v21 - 197) = 257;
  *(_QWORD *)(v21 - 192) = 0xFFFFFFFF00000002;
  __asm { FMOV            V1.4S, #25.0 }
  v97 = _Q1;
  *(_OWORD *)(v21 - 176) = _Q1;
  *(_OWORD *)(v21 - 160) = v99;
  *(_QWORD *)&v23 = 0x4000000040000000;
  *((_QWORD *)&v23 + 1) = 0x4000000040000000;
  *(_OWORD *)(v21 - 144) = v23;
  *(_OWORD *)(v21 - 128) = v23;
  *(_QWORD *)(v21 - 112) = 0;
  *(_QWORD *)(v21 - 104) = 0;
  *(_QWORD *)(v21 - 88) = 0xBF80000000000005;
  *(_QWORD *)(v21 - 99) = 0;
  IKString::assign((_QWORD *)(v21 - 80), "left_forearm_joint", (IKString *)0x12);
  *(_DWORD *)(v21 - 56) = -1;
  *(_OWORD *)(v21 - 48) = 0u;
  *(_OWORD *)(v21 - 32) = xmmword_210802BA0;
  *(_OWORD *)(v21 - 16) = v99;
  v24 = *(_QWORD *)(a2 + 16);
  v100 = 0;
  v101 = 0;
  v102 = v24;
  v103 = 0;
  v104 = 0;
  v105 = v24;
  *(_DWORD *)v106 = -1;
  *(_WORD *)&v106[4] = 257;
  v106[6] = 0;
  *(_DWORD *)&v106[7] = 16843009;
  v107 = 257;
  v108 = -1;
  v110 = xmmword_210804120;
  v111 = xmmword_210804130;
  v112 = xmmword_2108040E0;
  v113 = 0x4000000040000000;
  v114 = 0x40000000;
  v116 = 0;
  v115 = 0;
  v118 = 0;
  v117 = 0;
  v119 = 5;
  memset(v120, 0, sizeof(v120));
  v121 = v24;
  v122 = -1;
  v123 = 1;
  v124 = 0;
  v125 = 0;
  v126 = xmmword_210802BA0;
  v127 = xmmword_2108040F0;
  FIK::IKArray<FIK::MoCapTask>::push_back<FIK::MoCapTask,void>((uint64_t *)(a2 + 176), (uint64_t)&v100);
  if (*(_QWORD *)&v120[3])
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v121 + 24))(v121, *(_QWORD *)&v120[1], 0, 8);
    *(_QWORD *)&v120[1] = 0;
    *(_QWORD *)&v120[3] = 0;
  }
  if (v104)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v105 + 24))(v105, v103, 0, 8);
    v103 = 0;
    v104 = 0;
  }
  if (v101)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v102 + 24))(v102, v100, 0, 8);
  v25 = *(_QWORD *)(a2 + 192) + (*(_QWORD *)(a2 + 176) << 8);
  IKString::assign((_QWORD *)(v25 - 256), "left_hand_joint_Task", (IKString *)0x14);
  IKString::assign((_QWORD *)(v25 - 232), "left_hand_joint", (IKString *)0xF);
  *(_DWORD *)(v25 - 208) = 16;
  *(_WORD *)(v25 - 52) = 0;
  *(_WORD *)(v25 - 204) = 257;
  *(_BYTE *)(v25 - 202) = 0;
  *(_DWORD *)(v25 - 201) = 16843009;
  *(_WORD *)(v25 - 197) = 257;
  *(_QWORD *)(v25 - 192) = 0xC0000000CLL;
  *(_OWORD *)(v25 - 176) = 0u;
  *(_OWORD *)(v25 - 160) = 0u;
  *(_QWORD *)&v26 = 0x4000000040000000;
  *((_QWORD *)&v26 + 1) = 0x4000000040000000;
  *(_OWORD *)(v25 - 144) = v26;
  *(_OWORD *)(v25 - 128) = v26;
  *(_QWORD *)(v25 - 112) = 0;
  *(_QWORD *)(v25 - 104) = 0;
  *(_QWORD *)(v25 - 88) = 0xBF80000000000005;
  *(_QWORD *)(v25 - 99) = 0;
  IKString::assign((_QWORD *)(v25 - 80), "left_hand_joint", (IKString *)0xF);
  *(_DWORD *)(v25 - 56) = -1;
  *(_OWORD *)(v25 - 48) = 0u;
  *(_OWORD *)(v25 - 32) = xmmword_210802BA0;
  *(_OWORD *)(v25 - 16) = v99;
  v27 = *(_QWORD *)(a2 + 16);
  v100 = 0;
  v101 = 0;
  v102 = v27;
  v103 = 0;
  v104 = 0;
  v105 = v27;
  *(_DWORD *)v106 = -1;
  *(_WORD *)&v106[4] = 257;
  v106[6] = 0;
  *(_DWORD *)&v106[7] = 16843009;
  v107 = 257;
  v108 = -1;
  v110 = xmmword_210804120;
  v111 = xmmword_210804130;
  v112 = xmmword_2108040E0;
  v113 = 0x4000000040000000;
  v114 = 0x40000000;
  v116 = 0;
  v115 = 0;
  v118 = 0;
  v117 = 0;
  v119 = 5;
  memset(v120, 0, sizeof(v120));
  v121 = v27;
  v122 = -1;
  v123 = 1;
  v124 = 0;
  v125 = 0;
  v126 = xmmword_210802BA0;
  v127 = xmmword_2108040F0;
  FIK::IKArray<FIK::MoCapTask>::push_back<FIK::MoCapTask,void>((uint64_t *)(a2 + 176), (uint64_t)&v100);
  if (*(_QWORD *)&v120[3])
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v121 + 24))(v121, *(_QWORD *)&v120[1], 0, 8);
    *(_QWORD *)&v120[1] = 0;
    *(_QWORD *)&v120[3] = 0;
  }
  if (v104)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v105 + 24))(v105, v103, 0, 8);
    v103 = 0;
    v104 = 0;
  }
  if (v101)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v102 + 24))(v102, v100, 0, 8);
  v28 = *(_QWORD *)(a2 + 192) + (*(_QWORD *)(a2 + 176) << 8);
  IKString::assign((_QWORD *)(v28 - 256), "neck_1_joint_Task", (IKString *)0x11);
  IKString::assign((_QWORD *)(v28 - 232), "neck_1_joint", (IKString *)0xC);
  *(_DWORD *)(v28 - 208) = 8;
  *(_WORD *)(v28 - 52) = 0;
  *(_WORD *)(v28 - 204) = 1;
  *(_BYTE *)(v28 - 202) = 0;
  *(_DWORD *)(v28 - 201) = 16843009;
  *(_WORD *)(v28 - 197) = 257;
  *(_QWORD *)(v28 - 192) = -4294967287;
  __asm { FMOV            V1.4S, #20.0 }
  v96 = _Q1;
  *(_OWORD *)(v28 - 176) = _Q1;
  *(_OWORD *)(v28 - 160) = v99;
  *(_QWORD *)&v30 = 0x4000000040000000;
  *((_QWORD *)&v30 + 1) = 0x4000000040000000;
  *(_OWORD *)(v28 - 144) = v30;
  *(_OWORD *)(v28 - 128) = v30;
  *(_QWORD *)(v28 - 112) = 0;
  *(_QWORD *)(v28 - 104) = 0;
  *(_QWORD *)(v28 - 88) = 0xBF80000000000005;
  *(_QWORD *)(v28 - 99) = 0;
  IKString::assign((_QWORD *)(v28 - 80), "neck_1_joint", (IKString *)0xC);
  *(_DWORD *)(v28 - 56) = -1;
  *(_OWORD *)(v28 - 48) = 0u;
  *(_OWORD *)(v28 - 32) = xmmword_210802BA0;
  *(_OWORD *)(v28 - 16) = v99;
  v31 = *(_QWORD *)(a2 + 16);
  v100 = 0;
  v101 = 0;
  v102 = v31;
  v103 = 0;
  v104 = 0;
  v105 = v31;
  *(_DWORD *)v106 = -1;
  *(_WORD *)&v106[4] = 257;
  v106[6] = 0;
  *(_DWORD *)&v106[7] = 16843009;
  v107 = 257;
  v108 = -1;
  v110 = xmmword_210804120;
  v111 = xmmword_210804130;
  v112 = xmmword_2108040E0;
  v113 = 0x4000000040000000;
  v114 = 0x40000000;
  v116 = 0;
  v115 = 0;
  v118 = 0;
  v117 = 0;
  v119 = 5;
  memset(v120, 0, sizeof(v120));
  v121 = v31;
  v122 = -1;
  v123 = 1;
  v124 = 0;
  v125 = 0;
  v126 = xmmword_210802BA0;
  v127 = xmmword_2108040F0;
  FIK::IKArray<FIK::MoCapTask>::push_back<FIK::MoCapTask,void>((uint64_t *)(a2 + 176), (uint64_t)&v100);
  if (*(_QWORD *)&v120[3])
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v121 + 24))(v121, *(_QWORD *)&v120[1], 0, 8);
    *(_QWORD *)&v120[1] = 0;
    *(_QWORD *)&v120[3] = 0;
  }
  if (v104)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v105 + 24))(v105, v103, 0, 8);
    v103 = 0;
    v104 = 0;
  }
  if (v101)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v102 + 24))(v102, v100, 0, 8);
  v32 = *(_QWORD *)(a2 + 192) + (*(_QWORD *)(a2 + 176) << 8);
  IKString::assign((_QWORD *)(v32 - 256), "right_arm_joint_Task", (IKString *)0x14);
  IKString::assign((_QWORD *)(v32 - 232), "right_arm_joint", (IKString *)0xF);
  *(_DWORD *)(v32 - 208) = 18;
  *(_WORD *)(v32 - 52) = 0;
  *(_WORD *)(v32 - 204) = 1;
  *(_BYTE *)(v32 - 202) = 0;
  *(_DWORD *)(v32 - 201) = 16843009;
  *(_WORD *)(v32 - 197) = 257;
  *(_QWORD *)(v32 - 192) = 0xFFFFFFFF00000002;
  *(_OWORD *)(v32 - 176) = v98;
  *(_OWORD *)(v32 - 160) = v99;
  *(_QWORD *)&v33 = 0x4000000040000000;
  *((_QWORD *)&v33 + 1) = 0x4000000040000000;
  *(_OWORD *)(v32 - 144) = v33;
  *(_OWORD *)(v32 - 128) = v33;
  *(_QWORD *)(v32 - 112) = 0;
  *(_QWORD *)(v32 - 104) = 0;
  *(_QWORD *)(v32 - 88) = 0xBF80000000000005;
  *(_QWORD *)(v32 - 99) = 0;
  IKString::assign((_QWORD *)(v32 - 80), "right_arm_joint", (IKString *)0xF);
  *(_DWORD *)(v32 - 56) = -1;
  *(_OWORD *)(v32 - 48) = 0u;
  *(_OWORD *)(v32 - 32) = xmmword_210802BA0;
  *(_OWORD *)(v32 - 16) = v99;
  v34 = *(_QWORD *)(a2 + 16);
  v100 = 0;
  v101 = 0;
  v102 = v34;
  v103 = 0;
  v104 = 0;
  v105 = v34;
  *(_DWORD *)v106 = -1;
  *(_WORD *)&v106[4] = 257;
  v106[6] = 0;
  *(_DWORD *)&v106[7] = 16843009;
  v107 = 257;
  v108 = -1;
  v110 = xmmword_210804120;
  v111 = xmmword_210804130;
  v112 = xmmword_2108040E0;
  v113 = 0x4000000040000000;
  v114 = 0x40000000;
  v116 = 0;
  v115 = 0;
  v118 = 0;
  v117 = 0;
  v119 = 5;
  memset(v120, 0, sizeof(v120));
  v121 = v34;
  v122 = -1;
  v123 = 1;
  v124 = 0;
  v125 = 0;
  v126 = xmmword_210802BA0;
  v127 = xmmword_2108040F0;
  FIK::IKArray<FIK::MoCapTask>::push_back<FIK::MoCapTask,void>((uint64_t *)(a2 + 176), (uint64_t)&v100);
  if (*(_QWORD *)&v120[3])
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v121 + 24))(v121, *(_QWORD *)&v120[1], 0, 8);
    *(_QWORD *)&v120[1] = 0;
    *(_QWORD *)&v120[3] = 0;
  }
  if (v104)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v105 + 24))(v105, v103, 0, 8);
    v103 = 0;
    v104 = 0;
  }
  if (v101)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v102 + 24))(v102, v100, 0, 8);
  v35 = *(_QWORD *)(a2 + 192) + (*(_QWORD *)(a2 + 176) << 8);
  IKString::assign((_QWORD *)(v35 - 256), "right_forearm_joint_Task", (IKString *)0x18);
  IKString::assign((_QWORD *)(v35 - 232), "right_forearm_joint", (IKString *)0x13);
  *(_DWORD *)(v35 - 208) = 19;
  *(_WORD *)(v35 - 52) = 0;
  *(_WORD *)(v35 - 204) = 1;
  *(_BYTE *)(v35 - 202) = 0;
  *(_DWORD *)(v35 - 201) = 16843009;
  *(_WORD *)(v35 - 197) = 257;
  *(_QWORD *)(v35 - 192) = 0xFFFFFFFF00000002;
  *(_OWORD *)(v35 - 176) = v97;
  *(_OWORD *)(v35 - 160) = v99;
  *(_QWORD *)&v36 = 0x4000000040000000;
  *((_QWORD *)&v36 + 1) = 0x4000000040000000;
  *(_OWORD *)(v35 - 144) = v36;
  *(_OWORD *)(v35 - 128) = v36;
  *(_QWORD *)(v35 - 112) = 0;
  *(_QWORD *)(v35 - 104) = 0;
  *(_QWORD *)(v35 - 88) = 0xBF80000000000005;
  *(_QWORD *)(v35 - 99) = 0;
  IKString::assign((_QWORD *)(v35 - 80), "right_forearm_joint", (IKString *)0x13);
  *(_DWORD *)(v35 - 56) = -1;
  *(_OWORD *)(v35 - 48) = 0u;
  *(_OWORD *)(v35 - 32) = xmmword_210802BA0;
  *(_OWORD *)(v35 - 16) = v99;
  v37 = *(_QWORD *)(a2 + 16);
  v100 = 0;
  v101 = 0;
  v102 = v37;
  v103 = 0;
  v104 = 0;
  v105 = v37;
  *(_DWORD *)v106 = -1;
  *(_WORD *)&v106[4] = 257;
  v106[6] = 0;
  *(_DWORD *)&v106[7] = 16843009;
  v107 = 257;
  v108 = -1;
  v110 = xmmword_210804120;
  v111 = xmmword_210804130;
  v112 = xmmword_2108040E0;
  v113 = 0x4000000040000000;
  v114 = 0x40000000;
  v116 = 0;
  v115 = 0;
  v118 = 0;
  v117 = 0;
  v119 = 5;
  memset(v120, 0, sizeof(v120));
  v121 = v37;
  v122 = -1;
  v123 = 1;
  v124 = 0;
  v125 = 0;
  v126 = xmmword_210802BA0;
  v127 = xmmword_2108040F0;
  FIK::IKArray<FIK::MoCapTask>::push_back<FIK::MoCapTask,void>((uint64_t *)(a2 + 176), (uint64_t)&v100);
  if (*(_QWORD *)&v120[3])
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v121 + 24))(v121, *(_QWORD *)&v120[1], 0, 8);
    *(_QWORD *)&v120[1] = 0;
    *(_QWORD *)&v120[3] = 0;
  }
  if (v104)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v105 + 24))(v105, v103, 0, 8);
    v103 = 0;
    v104 = 0;
  }
  if (v101)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v102 + 24))(v102, v100, 0, 8);
  v38 = *(_QWORD *)(a2 + 192) + (*(_QWORD *)(a2 + 176) << 8);
  IKString::assign((_QWORD *)(v38 - 256), "right_hand_joint_Task", (IKString *)0x15);
  IKString::assign((_QWORD *)(v38 - 232), "right_hand_joint", (IKString *)0x10);
  *(_DWORD *)(v38 - 208) = 20;
  *(_WORD *)(v38 - 52) = 0;
  *(_WORD *)(v38 - 204) = 257;
  *(_BYTE *)(v38 - 202) = 0;
  *(_DWORD *)(v38 - 201) = 16843009;
  *(_WORD *)(v38 - 197) = 257;
  *(_QWORD *)(v38 - 192) = 0xC0000000CLL;
  *(_OWORD *)(v38 - 176) = 0u;
  *(_OWORD *)(v38 - 160) = 0u;
  *(_QWORD *)&v39 = 0x4000000040000000;
  *((_QWORD *)&v39 + 1) = 0x4000000040000000;
  *(_OWORD *)(v38 - 144) = v39;
  *(_OWORD *)(v38 - 128) = v39;
  *(_QWORD *)(v38 - 112) = 0;
  *(_QWORD *)(v38 - 104) = 0;
  *(_QWORD *)(v38 - 88) = 0xBF80000000000005;
  *(_QWORD *)(v38 - 99) = 0;
  IKString::assign((_QWORD *)(v38 - 80), "right_hand_joint", (IKString *)0x10);
  *(_DWORD *)(v38 - 56) = -1;
  *(_OWORD *)(v38 - 48) = 0u;
  *(_OWORD *)(v38 - 32) = xmmword_210802BA0;
  *(_OWORD *)(v38 - 16) = v99;
  v40 = *(_QWORD *)(a2 + 16);
  v100 = 0;
  v101 = 0;
  v102 = v40;
  v103 = 0;
  v104 = 0;
  v105 = v40;
  *(_DWORD *)v106 = -1;
  *(_WORD *)&v106[4] = 257;
  v106[6] = 0;
  *(_DWORD *)&v106[7] = 16843009;
  v107 = 257;
  v108 = -1;
  v110 = xmmword_210804120;
  v111 = xmmword_210804130;
  v112 = xmmword_2108040E0;
  v113 = 0x4000000040000000;
  v114 = 0x40000000;
  v116 = 0;
  v115 = 0;
  v118 = 0;
  v117 = 0;
  v119 = 5;
  memset(v120, 0, sizeof(v120));
  v121 = v40;
  v122 = -1;
  v123 = 1;
  v124 = 0;
  v125 = 0;
  v126 = xmmword_210802BA0;
  v127 = xmmword_2108040F0;
  FIK::IKArray<FIK::MoCapTask>::push_back<FIK::MoCapTask,void>((uint64_t *)(a2 + 176), (uint64_t)&v100);
  if (*(_QWORD *)&v120[3])
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v121 + 24))(v121, *(_QWORD *)&v120[1], 0, 8);
    *(_QWORD *)&v120[1] = 0;
    *(_QWORD *)&v120[3] = 0;
  }
  if (v104)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v105 + 24))(v105, v103, 0, 8);
    v103 = 0;
    v104 = 0;
  }
  if (v101)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v102 + 24))(v102, v100, 0, 8);
  v41 = *(_QWORD *)(a2 + 192) + (*(_QWORD *)(a2 + 176) << 8);
  IKString::assign((_QWORD *)(v41 - 256), "spine_6_joint_Task", (IKString *)0x12);
  IKString::assign((_QWORD *)(v41 - 232), "spine_6_joint", (IKString *)0xD);
  *(_DWORD *)(v41 - 208) = 6;
  *(_WORD *)(v41 - 52) = 0;
  *(_WORD *)(v41 - 204) = 1;
  *(_BYTE *)(v41 - 202) = 0;
  *(_DWORD *)(v41 - 201) = 16843009;
  *(_WORD *)(v41 - 197) = 257;
  *(_QWORD *)(v41 - 192) = 0xFFFFFFFF00000007;
  *(_OWORD *)(v41 - 176) = v96;
  *(_OWORD *)(v41 - 160) = v99;
  *(_QWORD *)&v42 = 0x4000000040000000;
  *((_QWORD *)&v42 + 1) = 0x4000000040000000;
  *(_OWORD *)(v41 - 144) = v42;
  *(_OWORD *)(v41 - 128) = v42;
  *(_QWORD *)(v41 - 112) = 0;
  *(_QWORD *)(v41 - 104) = 0;
  *(_QWORD *)(v41 - 88) = 0xBF80000000000005;
  *(_QWORD *)(v41 - 99) = 0;
  IKString::assign((_QWORD *)(v41 - 80), "spine_6_joint", (IKString *)0xD);
  *(_DWORD *)(v41 - 56) = -1;
  *(_OWORD *)(v41 - 48) = 0u;
  *(_OWORD *)(v41 - 32) = xmmword_210802BA0;
  *(_OWORD *)(v41 - 16) = v99;
  v43 = *(_QWORD *)(a2 + 16);
  v100 = 0;
  v101 = 0;
  v102 = v43;
  v103 = 0;
  v104 = 0;
  v105 = v43;
  *(_DWORD *)v106 = -1;
  *(_WORD *)&v106[4] = 257;
  v106[6] = 0;
  *(_DWORD *)&v106[7] = 16843009;
  v107 = 257;
  v108 = -1;
  v110 = xmmword_210804120;
  v111 = xmmword_210804130;
  v112 = xmmword_2108040E0;
  v113 = 0x4000000040000000;
  v114 = 0x40000000;
  v116 = 0;
  v115 = 0;
  v118 = 0;
  v117 = 0;
  v119 = 5;
  memset(v120, 0, sizeof(v120));
  v121 = v43;
  v122 = -1;
  v123 = 1;
  v124 = 0;
  v125 = 0;
  v126 = xmmword_210802BA0;
  v127 = xmmword_2108040F0;
  FIK::IKArray<FIK::MoCapTask>::push_back<FIK::MoCapTask,void>((uint64_t *)(a2 + 176), (uint64_t)&v100);
  if (*(_QWORD *)&v120[3])
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v121 + 24))(v121, *(_QWORD *)&v120[1], 0, 8);
    *(_QWORD *)&v120[1] = 0;
    *(_QWORD *)&v120[3] = 0;
  }
  if (v104)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v105 + 24))(v105, v103, 0, 8);
    v103 = 0;
    v104 = 0;
  }
  if (v101)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v102 + 24))(v102, v100, 0, 8);
  v44 = *(_QWORD *)(a2 + 192) + (*(_QWORD *)(a2 + 176) << 8);
  IKString::assign((_QWORD *)(v44 - 256), "spine_7_joint_Task", (IKString *)0x12);
  IKString::assign((_QWORD *)(v44 - 232), "spine_7_joint", (IKString *)0xD);
  *(_DWORD *)(v44 - 208) = 7;
  *(_WORD *)(v44 - 52) = 0;
  *(_WORD *)(v44 - 204) = 1;
  *(_BYTE *)(v44 - 202) = 0;
  *(_DWORD *)(v44 - 201) = 16843009;
  *(_WORD *)(v44 - 197) = 257;
  *(_QWORD *)(v44 - 192) = 0xFFFFFFFF00000008;
  *(int32x4_t *)(v44 - 176) = vdupq_n_s32(0x42700000u);
  *(_OWORD *)(v44 - 160) = v99;
  *(_QWORD *)&v45 = 0x4000000040000000;
  *((_QWORD *)&v45 + 1) = 0x4000000040000000;
  *(_OWORD *)(v44 - 144) = v45;
  *(_OWORD *)(v44 - 128) = v45;
  *(_QWORD *)(v44 - 112) = 0;
  *(_QWORD *)(v44 - 104) = 0;
  *(_QWORD *)(v44 - 99) = 0;
  *(_QWORD *)(v44 - 88) = 0xBF80000000000005;
  IKString::assign((_QWORD *)(v44 - 80), "spine_7_joint", (IKString *)0xD);
  *(_DWORD *)(v44 - 56) = -1;
  *(_OWORD *)(v44 - 48) = 0u;
  *(_OWORD *)(v44 - 32) = xmmword_210802BA0;
  *(_OWORD *)(v44 - 16) = v99;
  FIK::IKArray<FIK::MoCapBone>::reserve(a2 + 208, 0x15uLL);
  FIK::MoCapBone::MoCapBone((FIK::MoCapBone *)&v100, *(FIK::Allocator **)(a2 + 16));
  FIK::IKArray<FIK::MoCapBone>::push_back<FIK::MoCapBone,void>((_QWORD *)(a2 + 208), (uint64_t)&v100);
  FIK::IKArray<IKString>::~IKArray((uint64_t)v131);
  if (v129)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v130 + 24))(v130, v128, 0, 8);
    v128 = 0;
    v129 = 0;
  }
  if (v105)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v106 + 24))(*(_QWORD *)v106, v104, 0, 8);
    v104 = 0;
    v105 = 0;
  }
  if (v102)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v103 + 24))(v103, v101, 0, 8);
  v46 = *(_QWORD *)(a2 + 224) + 544 * *(_QWORD *)(a2 + 208);
  *(_BYTE *)(v46 - 190) = 0;
  *(_DWORD *)(v46 - 188) = 0;
  *(_WORD *)(v46 - 192) = 1;
  *(_QWORD *)(v46 - 180) = 0x3DF5C28F3DCCCCCDLL;
  *(_WORD *)(v46 - 184) = 1;
  *(_DWORD *)(v46 - 172) = 5;
  *(_QWORD *)(v46 - 544) = 0xFFFFFFFF00000000;
  IKString::assign((_QWORD *)(v46 - 536), "hips_joint", (IKString *)0xA);
  IKString::assign((_QWORD *)(v46 - 512), (char *)&unk_2108059BE, 0);
  *(_OWORD *)(v46 - 480) = xmmword_2108054B0;
  *(_OWORD *)(v46 - 464) = xmmword_210802BA0;
  *(_DWORD *)(v46 - 448) = 16843009;
  *(_WORD *)(v46 - 444) = 256;
  *(_BYTE *)(v46 - 442) = 1;
  *(_DWORD *)(v46 - 441) = 0;
  *(_WORD *)(v46 - 437) = 0;
  *(_OWORD *)(v46 - 432) = xmmword_2108054C0;
  *(_QWORD *)(v46 - 416) = 0x3F80000000000000;
  *(_OWORD *)(v46 - 400) = v99;
  *(_OWORD *)(v46 - 384) = v99;
  *(int32x4_t *)(v46 - 368) = vdupq_n_s32(0xC3B40000);
  *(int32x4_t *)(v46 - 352) = vdupq_n_s32(0x43B40000u);
  *(_OWORD *)(v46 - 336) = 0u;
  *(_OWORD *)(v46 - 320) = 0u;
  *(_OWORD *)(v46 - 304) = 0u;
  *(_OWORD *)(v46 - 256) = 0u;
  *(_OWORD *)(v46 - 240) = xmmword_210802BA0;
  *(_OWORD *)(v46 - 224) = 0u;
  *(_OWORD *)(v46 - 208) = xmmword_210802BA0;
  IKString::assign((_QWORD *)(v46 - 288), "virtualHips", (IKString *)0xB);
  *(_DWORD *)(v46 - 264) = -1;
  FIK::MoCapBone::MoCapBone((FIK::MoCapBone *)&v100, *(FIK::Allocator **)(a2 + 16));
  FIK::IKArray<FIK::MoCapBone>::push_back<FIK::MoCapBone,void>((_QWORD *)(a2 + 208), (uint64_t)&v100);
  FIK::IKArray<IKString>::~IKArray((uint64_t)v131);
  if (v129)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v130 + 24))(v130, v128, 0, 8);
    v128 = 0;
    v129 = 0;
  }
  if (v105)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v106 + 24))(*(_QWORD *)v106, v104, 0, 8);
    v104 = 0;
    v105 = 0;
  }
  if (v102)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v103 + 24))(v103, v101, 0, 8);
  v47 = *(_QWORD *)(a2 + 224) + 544 * *(_QWORD *)(a2 + 208);
  *(_BYTE *)(v47 - 190) = 0;
  *(_DWORD *)(v47 - 188) = 0;
  *(_WORD *)(v47 - 192) = 0;
  *(_QWORD *)(v47 - 180) = 0x3DF5C28F3DCCCCCDLL;
  *(_WORD *)(v47 - 184) = 0;
  *(_DWORD *)(v47 - 172) = 5;
  *(_QWORD *)(v47 - 544) = 0xFFFFFFFF00000001;
  IKString::assign((_QWORD *)(v47 - 536), "spine_1_joint", (IKString *)0xD);
  IKString::assign((_QWORD *)(v47 - 512), "hips_joint", (IKString *)0xA);
  *(_QWORD *)&v48 = 0x3F0000003F000000;
  *((_QWORD *)&v48 + 1) = 0x3F0000003F000000;
  *(_OWORD *)(v47 - 480) = xmmword_2108054D0;
  *(_OWORD *)(v47 - 464) = v48;
  *(_DWORD *)(v47 - 448) = 16843009;
  *(_QWORD *)(v47 - 445) = 16843009;
  *(_WORD *)(v47 - 437) = 0;
  *(_OWORD *)(v47 - 432) = xmmword_2108054E0;
  *(_QWORD *)(v47 - 416) = 0x3F80000000000000;
  *(_OWORD *)(v47 - 400) = v48;
  *(_OWORD *)(v47 - 384) = v99;
  *(int32x4_t *)(v47 - 368) = vdupq_n_s32(0xC3B40000);
  *(int32x4_t *)(v47 - 352) = vdupq_n_s32(0x43B40000u);
  *(_OWORD *)(v47 - 336) = 0u;
  *(_OWORD *)(v47 - 320) = 0u;
  *(_OWORD *)(v47 - 304) = 0u;
  *(_OWORD *)(v47 - 256) = 0u;
  *(_OWORD *)(v47 - 240) = xmmword_210802BA0;
  *(_OWORD *)(v47 - 224) = 0u;
  *(_OWORD *)(v47 - 208) = xmmword_210802BA0;
  IKString::assign((_QWORD *)(v47 - 288), (char *)&unk_2108059BE, 0);
  *(_DWORD *)(v47 - 264) = -1;
  FIK::MoCapBone::MoCapBone((FIK::MoCapBone *)&v100, *(FIK::Allocator **)(a2 + 16));
  FIK::IKArray<FIK::MoCapBone>::push_back<FIK::MoCapBone,void>((_QWORD *)(a2 + 208), (uint64_t)&v100);
  FIK::IKArray<IKString>::~IKArray((uint64_t)v131);
  if (v129)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v130 + 24))(v130, v128, 0, 8);
    v128 = 0;
    v129 = 0;
  }
  if (v105)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v106 + 24))(*(_QWORD *)v106, v104, 0, 8);
    v104 = 0;
    v105 = 0;
  }
  if (v102)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v103 + 24))(v103, v101, 0, 8);
  v49 = *(_QWORD *)(a2 + 224) + 544 * *(_QWORD *)(a2 + 208);
  *(_BYTE *)(v49 - 190) = 0;
  *(_DWORD *)(v49 - 188) = 0;
  *(_WORD *)(v49 - 192) = 0;
  *(_QWORD *)(v49 - 180) = 0x3DF5C28F3DCCCCCDLL;
  *(_WORD *)(v49 - 184) = 0;
  *(_DWORD *)(v49 - 172) = 5;
  *(_QWORD *)(v49 - 544) = 0xFFFFFFFF00000002;
  IKString::assign((_QWORD *)(v49 - 536), "spine_2_joint", (IKString *)0xD);
  IKString::assign((_QWORD *)(v49 - 512), "spine_1_joint", (IKString *)0xD);
  *(_OWORD *)(v49 - 480) = xmmword_210804EA0;
  *(_OWORD *)(v49 - 464) = xmmword_210802BA0;
  *(_DWORD *)(v49 - 448) = 16843009;
  *(_QWORD *)(v49 - 445) = 16843009;
  *(_WORD *)(v49 - 437) = 0;
  *(_OWORD *)(v49 - 432) = xmmword_2108054F0;
  *(_QWORD *)(v49 - 416) = 0x3F80000000000000;
  *(_QWORD *)&v50 = 0x3F0000003F000000;
  *((_QWORD *)&v50 + 1) = 0x3F0000003F000000;
  *(_OWORD *)(v49 - 400) = v50;
  *(_OWORD *)(v49 - 384) = v99;
  *(int32x4_t *)(v49 - 368) = vdupq_n_s32(0xC3B40000);
  *(int32x4_t *)(v49 - 352) = vdupq_n_s32(0x43B40000u);
  *(_OWORD *)(v49 - 336) = 0u;
  *(_OWORD *)(v49 - 320) = 0u;
  *(_OWORD *)(v49 - 304) = 0u;
  *(_OWORD *)(v49 - 256) = 0u;
  *(_OWORD *)(v49 - 240) = xmmword_210802BA0;
  *(_OWORD *)(v49 - 224) = 0u;
  *(_OWORD *)(v49 - 208) = xmmword_210802BA0;
  IKString::assign((_QWORD *)(v49 - 288), (char *)&unk_2108059BE, 0);
  *(_DWORD *)(v49 - 264) = -1;
  FIK::MoCapBone::MoCapBone((FIK::MoCapBone *)&v100, *(FIK::Allocator **)(a2 + 16));
  FIK::IKArray<FIK::MoCapBone>::push_back<FIK::MoCapBone,void>((_QWORD *)(a2 + 208), (uint64_t)&v100);
  FIK::IKArray<IKString>::~IKArray((uint64_t)v131);
  if (v129)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v130 + 24))(v130, v128, 0, 8);
    v128 = 0;
    v129 = 0;
  }
  if (v105)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v106 + 24))(*(_QWORD *)v106, v104, 0, 8);
    v104 = 0;
    v105 = 0;
  }
  if (v102)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v103 + 24))(v103, v101, 0, 8);
  v51 = *(_QWORD *)(a2 + 224) + 544 * *(_QWORD *)(a2 + 208);
  *(_BYTE *)(v51 - 190) = 0;
  *(_DWORD *)(v51 - 188) = 0;
  *(_WORD *)(v51 - 192) = 0;
  *(_QWORD *)(v51 - 180) = 0x3DF5C28F3DCCCCCDLL;
  *(_WORD *)(v51 - 184) = 0;
  *(_DWORD *)(v51 - 172) = 5;
  *(_QWORD *)(v51 - 544) = 0xFFFFFFFF00000003;
  IKString::assign((_QWORD *)(v51 - 536), "spine_3_joint", (IKString *)0xD);
  IKString::assign((_QWORD *)(v51 - 512), "spine_2_joint", (IKString *)0xD);
  *(_OWORD *)(v51 - 480) = xmmword_210804ED0;
  *(_OWORD *)(v51 - 464) = xmmword_210802BA0;
  *(_DWORD *)(v51 - 448) = 16843009;
  *(_QWORD *)(v51 - 445) = 16843009;
  *(_WORD *)(v51 - 437) = 0;
  *(_OWORD *)(v51 - 432) = xmmword_210805500;
  *(_QWORD *)(v51 - 416) = 0x3F80000000000000;
  *(_QWORD *)&v52 = 0x3F0000003F000000;
  *((_QWORD *)&v52 + 1) = 0x3F0000003F000000;
  *(_OWORD *)(v51 - 400) = v52;
  *(_OWORD *)(v51 - 384) = v99;
  *(int32x4_t *)(v51 - 368) = vdupq_n_s32(0xC3B40000);
  *(int32x4_t *)(v51 - 352) = vdupq_n_s32(0x43B40000u);
  *(_OWORD *)(v51 - 336) = 0u;
  *(_OWORD *)(v51 - 320) = 0u;
  *(_OWORD *)(v51 - 304) = 0u;
  *(_OWORD *)(v51 - 256) = 0u;
  *(_OWORD *)(v51 - 240) = xmmword_210802BA0;
  *(_OWORD *)(v51 - 224) = 0u;
  *(_OWORD *)(v51 - 208) = xmmword_210802BA0;
  IKString::assign((_QWORD *)(v51 - 288), (char *)&unk_2108059BE, 0);
  *(_DWORD *)(v51 - 264) = -1;
  FIK::MoCapBone::MoCapBone((FIK::MoCapBone *)&v100, *(FIK::Allocator **)(a2 + 16));
  FIK::IKArray<FIK::MoCapBone>::push_back<FIK::MoCapBone,void>((_QWORD *)(a2 + 208), (uint64_t)&v100);
  FIK::IKArray<IKString>::~IKArray((uint64_t)v131);
  if (v129)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v130 + 24))(v130, v128, 0, 8);
    v128 = 0;
    v129 = 0;
  }
  if (v105)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v106 + 24))(*(_QWORD *)v106, v104, 0, 8);
    v104 = 0;
    v105 = 0;
  }
  if (v102)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v103 + 24))(v103, v101, 0, 8);
  v53 = *(_QWORD *)(a2 + 224) + 544 * *(_QWORD *)(a2 + 208);
  *(_BYTE *)(v53 - 190) = 0;
  *(_DWORD *)(v53 - 188) = 0;
  *(_WORD *)(v53 - 192) = 0;
  *(_QWORD *)(v53 - 180) = 0x3DF5C28F3DCCCCCDLL;
  *(_WORD *)(v53 - 184) = 0;
  *(_DWORD *)(v53 - 172) = 5;
  *(_QWORD *)(v53 - 544) = 0xFFFFFFFF00000004;
  IKString::assign((_QWORD *)(v53 - 536), "spine_4_joint", (IKString *)0xD);
  IKString::assign((_QWORD *)(v53 - 512), "spine_3_joint", (IKString *)0xD);
  *(_OWORD *)(v53 - 480) = xmmword_210805510;
  *(_OWORD *)(v53 - 464) = xmmword_210802BA0;
  *(_DWORD *)(v53 - 448) = 16843009;
  *(_QWORD *)(v53 - 445) = 16843009;
  *(_WORD *)(v53 - 437) = 0;
  *(_OWORD *)(v53 - 432) = xmmword_210805520;
  *(_QWORD *)(v53 - 416) = 0x3F80000000000000;
  *(int32x4_t *)(v53 - 400) = vdupq_n_s32(0x3F19999Au);
  *(_OWORD *)(v53 - 384) = v99;
  *(int32x4_t *)(v53 - 368) = vdupq_n_s32(0xC3B40000);
  *(int32x4_t *)(v53 - 352) = vdupq_n_s32(0x43B40000u);
  *(_OWORD *)(v53 - 336) = 0u;
  *(_OWORD *)(v53 - 320) = 0u;
  *(_OWORD *)(v53 - 304) = 0u;
  *(_OWORD *)(v53 - 256) = 0u;
  *(_OWORD *)(v53 - 240) = xmmword_210802BA0;
  *(_OWORD *)(v53 - 224) = 0u;
  *(_OWORD *)(v53 - 208) = xmmword_210802BA0;
  IKString::assign((_QWORD *)(v53 - 288), (char *)&unk_2108059BE, 0);
  *(_DWORD *)(v53 - 264) = -1;
  FIK::MoCapBone::MoCapBone((FIK::MoCapBone *)&v100, *(FIK::Allocator **)(a2 + 16));
  FIK::IKArray<FIK::MoCapBone>::push_back<FIK::MoCapBone,void>((_QWORD *)(a2 + 208), (uint64_t)&v100);
  FIK::IKArray<IKString>::~IKArray((uint64_t)v131);
  if (v129)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v130 + 24))(v130, v128, 0, 8);
    v128 = 0;
    v129 = 0;
  }
  if (v105)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v106 + 24))(*(_QWORD *)v106, v104, 0, 8);
    v104 = 0;
    v105 = 0;
  }
  if (v102)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v103 + 24))(v103, v101, 0, 8);
  v54 = *(_QWORD *)(a2 + 224) + 544 * *(_QWORD *)(a2 + 208);
  *(_BYTE *)(v54 - 190) = 0;
  *(_DWORD *)(v54 - 188) = 0;
  *(_WORD *)(v54 - 192) = 0;
  *(_QWORD *)(v54 - 180) = 0x3DF5C28F3DCCCCCDLL;
  *(_WORD *)(v54 - 184) = 0;
  *(_DWORD *)(v54 - 172) = 5;
  *(_QWORD *)(v54 - 544) = -4294967291;
  IKString::assign((_QWORD *)(v54 - 536), "spine_5_joint", (IKString *)0xD);
  IKString::assign((_QWORD *)(v54 - 512), "spine_4_joint", (IKString *)0xD);
  *(_OWORD *)(v54 - 480) = xmmword_210804F30;
  *(_OWORD *)(v54 - 464) = xmmword_210802BA0;
  *(_DWORD *)(v54 - 448) = 16843009;
  *(_QWORD *)(v54 - 445) = 16843009;
  *(_WORD *)(v54 - 437) = 0;
  *(_OWORD *)(v54 - 432) = xmmword_210805530;
  *(_QWORD *)(v54 - 416) = 0x3F80000000000000;
  *(int32x4_t *)(v54 - 400) = vdupq_n_s32(0x3F333333u);
  *(_OWORD *)(v54 - 384) = v99;
  *(int32x4_t *)(v54 - 368) = vdupq_n_s32(0xC3B40000);
  *(int32x4_t *)(v54 - 352) = vdupq_n_s32(0x43B40000u);
  *(_OWORD *)(v54 - 336) = 0u;
  *(_OWORD *)(v54 - 320) = 0u;
  *(_OWORD *)(v54 - 304) = 0u;
  *(_OWORD *)(v54 - 256) = 0u;
  *(_OWORD *)(v54 - 240) = xmmword_210802BA0;
  *(_OWORD *)(v54 - 224) = 0u;
  *(_OWORD *)(v54 - 208) = xmmword_210802BA0;
  IKString::assign((_QWORD *)(v54 - 288), (char *)&unk_2108059BE, 0);
  *(_DWORD *)(v54 - 264) = -1;
  FIK::MoCapBone::MoCapBone((FIK::MoCapBone *)&v100, *(FIK::Allocator **)(a2 + 16));
  FIK::IKArray<FIK::MoCapBone>::push_back<FIK::MoCapBone,void>((_QWORD *)(a2 + 208), (uint64_t)&v100);
  FIK::IKArray<IKString>::~IKArray((uint64_t)v131);
  if (v129)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v130 + 24))(v130, v128, 0, 8);
    v128 = 0;
    v129 = 0;
  }
  if (v105)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v106 + 24))(*(_QWORD *)v106, v104, 0, 8);
    v104 = 0;
    v105 = 0;
  }
  if (v102)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v103 + 24))(v103, v101, 0, 8);
  v55 = *(_QWORD *)(a2 + 224) + 544 * *(_QWORD *)(a2 + 208);
  *(_BYTE *)(v55 - 190) = 0;
  *(_DWORD *)(v55 - 188) = 0;
  *(_WORD *)(v55 - 192) = 1;
  *(_QWORD *)(v55 - 180) = 0x3DF5C28F3DCCCCCDLL;
  *(_WORD *)(v55 - 184) = 1;
  *(_DWORD *)(v55 - 172) = 5;
  *(_QWORD *)(v55 - 544) = -4294967290;
  IKString::assign((_QWORD *)(v55 - 536), "spine_6_joint", (IKString *)0xD);
  IKString::assign((_QWORD *)(v55 - 512), "spine_5_joint", (IKString *)0xD);
  *(_OWORD *)(v55 - 480) = xmmword_210805550;
  *(_OWORD *)(v55 - 464) = xmmword_210805540;
  *(_DWORD *)(v55 - 448) = 16843009;
  *(_QWORD *)(v55 - 445) = 16843009;
  *(_WORD *)(v55 - 437) = 0;
  *(_OWORD *)(v55 - 432) = xmmword_210805560;
  *(_QWORD *)(v55 - 416) = 0x3F80000000000000;
  *(int32x4_t *)(v55 - 400) = vdupq_n_s32(0x3F333333u);
  *(_OWORD *)(v55 - 384) = v99;
  *(int32x4_t *)(v55 - 368) = vdupq_n_s32(0xC3B40000);
  *(int32x4_t *)(v55 - 352) = vdupq_n_s32(0x43B40000u);
  *(_OWORD *)(v55 - 336) = 0u;
  *(_OWORD *)(v55 - 320) = 0u;
  *(_OWORD *)(v55 - 304) = 0u;
  *(_OWORD *)(v55 - 256) = 0u;
  *(_OWORD *)(v55 - 240) = xmmword_210802BA0;
  *(_OWORD *)(v55 - 224) = 0u;
  *(_OWORD *)(v55 - 208) = xmmword_210802BA0;
  IKString::assign((_QWORD *)(v55 - 288), "spine_6_joint", (IKString *)0xD);
  *(_DWORD *)(v55 - 264) = -1;
  FIK::MoCapBone::MoCapBone((FIK::MoCapBone *)&v100, *(FIK::Allocator **)(a2 + 16));
  FIK::IKArray<FIK::MoCapBone>::push_back<FIK::MoCapBone,void>((_QWORD *)(a2 + 208), (uint64_t)&v100);
  FIK::IKArray<IKString>::~IKArray((uint64_t)v131);
  if (v129)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v130 + 24))(v130, v128, 0, 8);
    v128 = 0;
    v129 = 0;
  }
  if (v105)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v106 + 24))(*(_QWORD *)v106, v104, 0, 8);
    v104 = 0;
    v105 = 0;
  }
  if (v102)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v103 + 24))(v103, v101, 0, 8);
  v56 = *(_QWORD *)(a2 + 224) + 544 * *(_QWORD *)(a2 + 208);
  *(_BYTE *)(v56 - 190) = 0;
  *(_DWORD *)(v56 - 188) = 0;
  *(_WORD *)(v56 - 192) = 1;
  *(_QWORD *)(v56 - 180) = 0x3DF5C28F3DCCCCCDLL;
  *(_WORD *)(v56 - 184) = 1;
  *(_DWORD *)(v56 - 172) = 5;
  *(_QWORD *)(v56 - 544) = 0xFFFFFFFF00000007;
  IKString::assign((_QWORD *)(v56 - 536), "spine_7_joint", (IKString *)0xD);
  IKString::assign((_QWORD *)(v56 - 512), "spine_6_joint", (IKString *)0xD);
  *(_OWORD *)(v56 - 480) = xmmword_210805580;
  *(_OWORD *)(v56 - 464) = xmmword_210805570;
  *(_DWORD *)(v56 - 448) = 16843009;
  *(_QWORD *)(v56 - 445) = 16843009;
  *(_WORD *)(v56 - 437) = 0;
  *(_OWORD *)(v56 - 432) = xmmword_210805590;
  *(_QWORD *)(v56 - 416) = 0x3F80000000000000;
  *(int32x4_t *)(v56 - 400) = vdupq_n_s32(0x3F4CCCCDu);
  *(_OWORD *)(v56 - 384) = v99;
  *(int32x4_t *)(v56 - 368) = vdupq_n_s32(0xC3B40000);
  *(int32x4_t *)(v56 - 352) = vdupq_n_s32(0x43B40000u);
  *(_OWORD *)(v56 - 336) = 0u;
  *(_OWORD *)(v56 - 320) = 0u;
  *(_OWORD *)(v56 - 304) = 0u;
  *(_OWORD *)(v56 - 256) = 0u;
  *(_OWORD *)(v56 - 240) = xmmword_210802BA0;
  *(_OWORD *)(v56 - 224) = 0u;
  *(_OWORD *)(v56 - 208) = xmmword_210802BA0;
  IKString::assign((_QWORD *)(v56 - 288), "spine_7_joint", (IKString *)0xD);
  *(_DWORD *)(v56 - 264) = -1;
  FIK::MoCapBone::MoCapBone((FIK::MoCapBone *)&v100, *(FIK::Allocator **)(a2 + 16));
  FIK::IKArray<FIK::MoCapBone>::push_back<FIK::MoCapBone,void>((_QWORD *)(a2 + 208), (uint64_t)&v100);
  FIK::IKArray<IKString>::~IKArray((uint64_t)v131);
  if (v129)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v130 + 24))(v130, v128, 0, 8);
    v128 = 0;
    v129 = 0;
  }
  if (v105)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v106 + 24))(*(_QWORD *)v106, v104, 0, 8);
    v104 = 0;
    v105 = 0;
  }
  if (v102)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v103 + 24))(v103, v101, 0, 8);
  v57 = *(_QWORD *)(a2 + 224) + 544 * *(_QWORD *)(a2 + 208);
  *(_BYTE *)(v57 - 190) = 0;
  *(_DWORD *)(v57 - 188) = 0;
  *(_WORD *)(v57 - 192) = 1;
  *(_QWORD *)(v57 - 180) = 0x3DF5C28F3DCCCCCDLL;
  *(_WORD *)(v57 - 184) = 1;
  *(_DWORD *)(v57 - 172) = 5;
  *(_QWORD *)(v57 - 544) = 0xFFFFFFFF00000008;
  IKString::assign((_QWORD *)(v57 - 536), "neck_1_joint", (IKString *)0xC);
  IKString::assign((_QWORD *)(v57 - 512), "spine_7_joint", (IKString *)0xD);
  *(_OWORD *)(v57 - 480) = xmmword_2108055B0;
  *(_OWORD *)(v57 - 464) = xmmword_2108055A0;
  *(_DWORD *)(v57 - 448) = 16843009;
  *(_QWORD *)(v57 - 445) = 16843009;
  *(_WORD *)(v57 - 437) = 0;
  *(_OWORD *)(v57 - 432) = xmmword_2108055C0;
  *(_QWORD *)(v57 - 416) = 0x3F80000000000000;
  *(_OWORD *)(v57 - 400) = v99;
  *(_OWORD *)(v57 - 384) = v99;
  *(int32x4_t *)(v57 - 368) = vdupq_n_s32(0xC3B40000);
  *(int32x4_t *)(v57 - 352) = vdupq_n_s32(0x43B40000u);
  *(_OWORD *)(v57 - 336) = 0u;
  *(_OWORD *)(v57 - 320) = 0u;
  *(_OWORD *)(v57 - 304) = 0u;
  *(_OWORD *)(v57 - 256) = 0u;
  *(_OWORD *)(v57 - 240) = xmmword_210802BA0;
  *(_OWORD *)(v57 - 224) = 0u;
  *(_OWORD *)(v57 - 208) = xmmword_210802BA0;
  IKString::assign((_QWORD *)(v57 - 288), "neck_1_joint", (IKString *)0xC);
  *(_DWORD *)(v57 - 264) = -1;
  FIK::MoCapBone::MoCapBone((FIK::MoCapBone *)&v100, *(FIK::Allocator **)(a2 + 16));
  FIK::IKArray<FIK::MoCapBone>::push_back<FIK::MoCapBone,void>((_QWORD *)(a2 + 208), (uint64_t)&v100);
  FIK::IKArray<IKString>::~IKArray((uint64_t)v131);
  if (v129)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v130 + 24))(v130, v128, 0, 8);
    v128 = 0;
    v129 = 0;
  }
  if (v105)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v106 + 24))(*(_QWORD *)v106, v104, 0, 8);
    v104 = 0;
    v105 = 0;
  }
  if (v102)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v103 + 24))(v103, v101, 0, 8);
  v58 = *(_QWORD *)(a2 + 224) + 544 * *(_QWORD *)(a2 + 208);
  *(_BYTE *)(v58 - 190) = 0;
  *(_DWORD *)(v58 - 188) = 0;
  *(_WORD *)(v58 - 192) = 0;
  *(_QWORD *)(v58 - 180) = 0x3DF5C28F3DCCCCCDLL;
  *(_WORD *)(v58 - 184) = 0;
  *(_DWORD *)(v58 - 172) = 5;
  *(_QWORD *)(v58 - 544) = -4294967287;
  IKString::assign((_QWORD *)(v58 - 536), "neck_2_joint", (IKString *)0xC);
  IKString::assign((_QWORD *)(v58 - 512), "neck_1_joint", (IKString *)0xC);
  *(_OWORD *)(v58 - 480) = xmmword_2108055E0;
  *(_OWORD *)(v58 - 464) = xmmword_2108055D0;
  *(_DWORD *)(v58 - 448) = 16843009;
  *(_QWORD *)(v58 - 445) = 16843009;
  *(_WORD *)(v58 - 437) = 0;
  *(_OWORD *)(v58 - 432) = xmmword_2108055F0;
  *(_QWORD *)(v58 - 416) = 0x3F80000000000000;
  *(_OWORD *)(v58 - 400) = v99;
  *(_OWORD *)(v58 - 384) = v99;
  *(int32x4_t *)(v58 - 368) = vdupq_n_s32(0xC3B40000);
  *(int32x4_t *)(v58 - 352) = vdupq_n_s32(0x43B40000u);
  *(_OWORD *)(v58 - 336) = 0u;
  *(_OWORD *)(v58 - 320) = 0u;
  *(_OWORD *)(v58 - 304) = 0u;
  *(_OWORD *)(v58 - 256) = 0u;
  *(_OWORD *)(v58 - 240) = xmmword_210802BA0;
  *(_OWORD *)(v58 - 224) = 0u;
  *(_OWORD *)(v58 - 208) = xmmword_210802BA0;
  IKString::assign((_QWORD *)(v58 - 288), (char *)&unk_2108059BE, 0);
  *(_DWORD *)(v58 - 264) = -1;
  FIK::MoCapBone::MoCapBone((FIK::MoCapBone *)&v100, *(FIK::Allocator **)(a2 + 16));
  FIK::IKArray<FIK::MoCapBone>::push_back<FIK::MoCapBone,void>((_QWORD *)(a2 + 208), (uint64_t)&v100);
  FIK::IKArray<IKString>::~IKArray((uint64_t)v131);
  if (v129)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v130 + 24))(v130, v128, 0, 8);
    v128 = 0;
    v129 = 0;
  }
  if (v105)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v106 + 24))(*(_QWORD *)v106, v104, 0, 8);
    v104 = 0;
    v105 = 0;
  }
  if (v102)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v103 + 24))(v103, v101, 0, 8);
  v59 = *(_QWORD *)(a2 + 224) + 544 * *(_QWORD *)(a2 + 208);
  *(_BYTE *)(v59 - 190) = 0;
  *(_DWORD *)(v59 - 188) = 0;
  *(_WORD *)(v59 - 192) = 0;
  *(_QWORD *)(v59 - 180) = 0x3DF5C28F3DCCCCCDLL;
  *(_WORD *)(v59 - 184) = 0;
  *(_DWORD *)(v59 - 172) = 5;
  *(_QWORD *)(v59 - 544) = -4294967286;
  IKString::assign((_QWORD *)(v59 - 536), "neck_3_joint", (IKString *)0xC);
  IKString::assign((_QWORD *)(v59 - 512), "neck_2_joint", (IKString *)0xC);
  *(_OWORD *)(v59 - 480) = xmmword_210805610;
  *(_OWORD *)(v59 - 464) = xmmword_210805600;
  *(_DWORD *)(v59 - 448) = 16843009;
  *(_QWORD *)(v59 - 445) = 16843009;
  *(_WORD *)(v59 - 437) = 0;
  *(_OWORD *)(v59 - 432) = xmmword_2108055F0;
  *(_QWORD *)(v59 - 416) = 0x3F80000000000000;
  *(_OWORD *)(v59 - 400) = v99;
  *(_OWORD *)(v59 - 384) = v99;
  *(int32x4_t *)(v59 - 368) = vdupq_n_s32(0xC3B40000);
  *(int32x4_t *)(v59 - 352) = vdupq_n_s32(0x43B40000u);
  *(_OWORD *)(v59 - 336) = 0u;
  *(_OWORD *)(v59 - 320) = 0u;
  *(_OWORD *)(v59 - 304) = 0u;
  *(_OWORD *)(v59 - 256) = 0u;
  *(_OWORD *)(v59 - 240) = xmmword_210802BA0;
  *(_OWORD *)(v59 - 224) = 0u;
  *(_OWORD *)(v59 - 208) = xmmword_210802BA0;
  IKString::assign((_QWORD *)(v59 - 288), (char *)&unk_2108059BE, 0);
  *(_DWORD *)(v59 - 264) = -1;
  FIK::MoCapBone::MoCapBone((FIK::MoCapBone *)&v100, *(FIK::Allocator **)(a2 + 16));
  FIK::IKArray<FIK::MoCapBone>::push_back<FIK::MoCapBone,void>((_QWORD *)(a2 + 208), (uint64_t)&v100);
  FIK::IKArray<IKString>::~IKArray((uint64_t)v131);
  if (v129)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v130 + 24))(v130, v128, 0, 8);
    v128 = 0;
    v129 = 0;
  }
  if (v105)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v106 + 24))(*(_QWORD *)v106, v104, 0, 8);
    v104 = 0;
    v105 = 0;
  }
  if (v102)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v103 + 24))(v103, v101, 0, 8);
  v60 = *(_QWORD *)(a2 + 224) + 544 * *(_QWORD *)(a2 + 208);
  *(_BYTE *)(v60 - 190) = 0;
  *(_DWORD *)(v60 - 188) = 0;
  *(_WORD *)(v60 - 192) = 0;
  *(_QWORD *)(v60 - 180) = 0x3DF5C28F3DCCCCCDLL;
  *(_WORD *)(v60 - 184) = 0;
  *(_DWORD *)(v60 - 172) = 5;
  *(_QWORD *)(v60 - 544) = -4294967285;
  IKString::assign((_QWORD *)(v60 - 536), "neck_4_joint", (IKString *)0xC);
  IKString::assign((_QWORD *)(v60 - 512), "neck_3_joint", (IKString *)0xC);
  *(_OWORD *)(v60 - 480) = xmmword_210805630;
  *(_OWORD *)(v60 - 464) = xmmword_210805620;
  *(_DWORD *)(v60 - 448) = 16843009;
  *(_QWORD *)(v60 - 445) = 16843009;
  *(_WORD *)(v60 - 437) = 0;
  *(_OWORD *)(v60 - 432) = xmmword_210805640;
  *(_QWORD *)(v60 - 416) = 0x3F80000000000000;
  *(_OWORD *)(v60 - 400) = v99;
  *(_OWORD *)(v60 - 384) = v99;
  *(int32x4_t *)(v60 - 368) = vdupq_n_s32(0xC3B40000);
  *(int32x4_t *)(v60 - 352) = vdupq_n_s32(0x43B40000u);
  *(_OWORD *)(v60 - 336) = 0u;
  *(_OWORD *)(v60 - 320) = 0u;
  *(_OWORD *)(v60 - 304) = 0u;
  *(_OWORD *)(v60 - 256) = 0u;
  *(_OWORD *)(v60 - 240) = xmmword_210802BA0;
  *(_OWORD *)(v60 - 224) = 0u;
  *(_OWORD *)(v60 - 208) = xmmword_210802BA0;
  IKString::assign((_QWORD *)(v60 - 288), (char *)&unk_2108059BE, 0);
  *(_DWORD *)(v60 - 264) = -1;
  FIK::MoCapBone::MoCapBone((FIK::MoCapBone *)&v100, *(FIK::Allocator **)(a2 + 16));
  FIK::IKArray<FIK::MoCapBone>::push_back<FIK::MoCapBone,void>((_QWORD *)(a2 + 208), (uint64_t)&v100);
  FIK::IKArray<IKString>::~IKArray((uint64_t)v131);
  if (v129)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v130 + 24))(v130, v128, 0, 8);
    v128 = 0;
    v129 = 0;
  }
  if (v105)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v106 + 24))(*(_QWORD *)v106, v104, 0, 8);
    v104 = 0;
    v105 = 0;
  }
  if (v102)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v103 + 24))(v103, v101, 0, 8);
  v61 = *(_QWORD *)(a2 + 224) + 544 * *(_QWORD *)(a2 + 208);
  *(_BYTE *)(v61 - 190) = 0;
  *(_DWORD *)(v61 - 188) = 0;
  *(_WORD *)(v61 - 192) = 1;
  *(_QWORD *)(v61 - 180) = 0x3DF5C28F3DCCCCCDLL;
  *(_WORD *)(v61 - 184) = 1;
  *(_DWORD *)(v61 - 172) = 5;
  *(_QWORD *)(v61 - 544) = -4294967284;
  IKString::assign((_QWORD *)(v61 - 536), "head_joint", (IKString *)0xA);
  IKString::assign((_QWORD *)(v61 - 512), "neck_4_joint", (IKString *)0xC);
  *(_OWORD *)(v61 - 480) = xmmword_210805660;
  *(_OWORD *)(v61 - 464) = xmmword_210805650;
  *(_DWORD *)(v61 - 448) = 16843009;
  *(_WORD *)(v61 - 444) = 256;
  *(_BYTE *)(v61 - 442) = 1;
  *(_DWORD *)(v61 - 441) = 0;
  *(_WORD *)(v61 - 437) = 0;
  *(_OWORD *)(v61 - 432) = xmmword_210804100;
  *(_QWORD *)(v61 - 416) = 0x3F80000000000000;
  *(_OWORD *)(v61 - 400) = v99;
  *(_OWORD *)(v61 - 384) = v99;
  *(int32x4_t *)(v61 - 368) = vdupq_n_s32(0xC3B40000);
  *(int32x4_t *)(v61 - 352) = vdupq_n_s32(0x43B40000u);
  *(_OWORD *)(v61 - 336) = 0u;
  *(_OWORD *)(v61 - 320) = 0u;
  *(_OWORD *)(v61 - 304) = 0u;
  *(_OWORD *)(v61 - 256) = 0u;
  *(_OWORD *)(v61 - 240) = xmmword_210802BA0;
  *(_OWORD *)(v61 - 224) = 0u;
  *(_OWORD *)(v61 - 208) = xmmword_210802BA0;
  IKString::assign((_QWORD *)(v61 - 288), "head_joint", (IKString *)0xA);
  *(_DWORD *)(v61 - 264) = -1;
  FIK::MoCapBone::MoCapBone((FIK::MoCapBone *)&v100, *(FIK::Allocator **)(a2 + 16));
  FIK::IKArray<FIK::MoCapBone>::push_back<FIK::MoCapBone,void>((_QWORD *)(a2 + 208), (uint64_t)&v100);
  FIK::IKArray<IKString>::~IKArray((uint64_t)v131);
  if (v129)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v130 + 24))(v130, v128, 0, 8);
    v128 = 0;
    v129 = 0;
  }
  if (v105)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v106 + 24))(*(_QWORD *)v106, v104, 0, 8);
    v104 = 0;
    v105 = 0;
  }
  if (v102)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v103 + 24))(v103, v101, 0, 8);
  v62 = *(_QWORD *)(a2 + 224) + 544 * *(_QWORD *)(a2 + 208);
  *(_BYTE *)(v62 - 190) = 0;
  *(_DWORD *)(v62 - 188) = 0;
  *(_WORD *)(v62 - 192) = 0;
  *(_QWORD *)(v62 - 180) = 0x3DF5C28F3DCCCCCDLL;
  *(_WORD *)(v62 - 184) = 0;
  *(_DWORD *)(v62 - 172) = 5;
  *(_QWORD *)(v62 - 544) = -4294967283;
  IKString::assign((_QWORD *)(v62 - 536), "left_shoulder_1_joint", (IKString *)0x15);
  IKString::assign((_QWORD *)(v62 - 512), "spine_7_joint", (IKString *)0xD);
  *(_OWORD *)(v62 - 480) = xmmword_2108050A0;
  *(_OWORD *)(v62 - 464) = xmmword_210805670;
  *(_WORD *)(v62 - 448) = 1;
  *(_DWORD *)(v62 - 446) = 16843009;
  *(_BYTE *)(v62 - 442) = 1;
  *(_DWORD *)(v62 - 441) = 0;
  *(_WORD *)(v62 - 437) = 0;
  *(_OWORD *)(v62 - 432) = xmmword_210805680;
  *(_QWORD *)(v62 - 416) = 0x3F80000000000000;
  *(_OWORD *)(v62 - 400) = xmmword_210805690;
  *(_OWORD *)(v62 - 384) = xmmword_2108050C0;
  *(int32x4_t *)(v62 - 368) = vdupq_n_s32(0xC3B40000);
  *(int32x4_t *)(v62 - 352) = vdupq_n_s32(0x43B40000u);
  *(_OWORD *)(v62 - 336) = 0u;
  *(_OWORD *)(v62 - 320) = 0u;
  *(_OWORD *)(v62 - 304) = 0u;
  *(_OWORD *)(v62 - 256) = 0u;
  *(_OWORD *)(v62 - 240) = xmmword_210802BA0;
  *(_OWORD *)(v62 - 224) = 0u;
  *(_OWORD *)(v62 - 208) = xmmword_210802BA0;
  IKString::assign((_QWORD *)(v62 - 288), (char *)&unk_2108059BE, 0);
  *(_DWORD *)(v62 - 264) = -1;
  FIK::MoCapBone::MoCapBone((FIK::MoCapBone *)&v100, *(FIK::Allocator **)(a2 + 16));
  FIK::IKArray<FIK::MoCapBone>::push_back<FIK::MoCapBone,void>((_QWORD *)(a2 + 208), (uint64_t)&v100);
  FIK::IKArray<IKString>::~IKArray((uint64_t)v131);
  if (v129)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v130 + 24))(v130, v128, 0, 8);
    v128 = 0;
    v129 = 0;
  }
  if (v105)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v106 + 24))(*(_QWORD *)v106, v104, 0, 8);
    v104 = 0;
    v105 = 0;
  }
  if (v102)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v103 + 24))(v103, v101, 0, 8);
  v63 = *(_QWORD *)(a2 + 224) + 544 * *(_QWORD *)(a2 + 208);
  *(_BYTE *)(v63 - 190) = 0;
  *(_DWORD *)(v63 - 188) = 0;
  *(_WORD *)(v63 - 192) = 1;
  *(_QWORD *)(v63 - 180) = 0x3DF5C28F3DCCCCCDLL;
  *(_WORD *)(v63 - 184) = 1;
  *(_DWORD *)(v63 - 172) = 5;
  *(_QWORD *)(v63 - 544) = -4294967282;
  IKString::assign((_QWORD *)(v63 - 536), "left_arm_joint", (IKString *)0xE);
  IKString::assign((_QWORD *)(v63 - 512), "left_shoulder_1_joint", (IKString *)0x15);
  *(_OWORD *)(v63 - 480) = xmmword_2108056B0;
  *(_OWORD *)(v63 - 464) = xmmword_2108056A0;
  *(_DWORD *)(v63 - 448) = 16843009;
  *(_QWORD *)(v63 - 445) = 16843009;
  *(_WORD *)(v63 - 437) = 0;
  *(_OWORD *)(v63 - 432) = xmmword_2108056C0;
  *(_QWORD *)(v63 - 416) = 0x3F80000000000000;
  *(_OWORD *)(v63 - 400) = xmmword_2108056D0;
  *(_OWORD *)(v63 - 384) = xmmword_210805100;
  *(int32x4_t *)(v63 - 368) = vdupq_n_s32(0xC3B40000);
  *(int32x4_t *)(v63 - 352) = vdupq_n_s32(0x43B40000u);
  *(_OWORD *)(v63 - 336) = 0u;
  *(_OWORD *)(v63 - 320) = 0u;
  *(_OWORD *)(v63 - 304) = 0u;
  *(_OWORD *)(v63 - 256) = 0u;
  *(_OWORD *)(v63 - 240) = xmmword_210802BA0;
  *(_OWORD *)(v63 - 224) = 0u;
  *(_OWORD *)(v63 - 208) = xmmword_210802BA0;
  IKString::assign((_QWORD *)(v63 - 288), "left_arm_joint", (IKString *)0xE);
  *(_DWORD *)(v63 - 264) = -1;
  FIK::MoCapBone::MoCapBone((FIK::MoCapBone *)&v100, *(FIK::Allocator **)(a2 + 16));
  FIK::IKArray<FIK::MoCapBone>::push_back<FIK::MoCapBone,void>((_QWORD *)(a2 + 208), (uint64_t)&v100);
  FIK::IKArray<IKString>::~IKArray((uint64_t)v131);
  if (v129)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v130 + 24))(v130, v128, 0, 8);
    v128 = 0;
    v129 = 0;
  }
  if (v105)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v106 + 24))(*(_QWORD *)v106, v104, 0, 8);
    v104 = 0;
    v105 = 0;
  }
  if (v102)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v103 + 24))(v103, v101, 0, 8);
  v64 = *(_QWORD *)(a2 + 224) + 544 * *(_QWORD *)(a2 + 208);
  *(_BYTE *)(v64 - 190) = 0;
  *(_DWORD *)(v64 - 188) = 0;
  *(_WORD *)(v64 - 192) = 1;
  *(_QWORD *)(v64 - 180) = 0x3DF5C28F3DCCCCCDLL;
  *(_WORD *)(v64 - 184) = 1;
  *(_DWORD *)(v64 - 172) = 5;
  *(_QWORD *)(v64 - 544) = 0xFFFFFFFF0000000FLL;
  IKString::assign((_QWORD *)(v64 - 536), "left_forearm_joint", (IKString *)0x12);
  IKString::assign((_QWORD *)(v64 - 512), "left_arm_joint", (IKString *)0xE);
  *(_OWORD *)(v64 - 480) = xmmword_2108056F0;
  *(_OWORD *)(v64 - 464) = xmmword_2108056E0;
  *(_DWORD *)(v64 - 448) = 16843009;
  *(_QWORD *)(v64 - 445) = 16843009;
  *(_WORD *)(v64 - 437) = 0;
  *(_OWORD *)(v64 - 432) = xmmword_210805700;
  *(_QWORD *)(v64 - 416) = 0x3F80000000000000;
  *(_OWORD *)(v64 - 400) = v99;
  *(_OWORD *)(v64 - 384) = v99;
  *(int32x4_t *)(v64 - 368) = vdupq_n_s32(0xC3B40000);
  *(int32x4_t *)(v64 - 352) = vdupq_n_s32(0x43B40000u);
  *(_OWORD *)(v64 - 336) = 0u;
  *(_OWORD *)(v64 - 320) = 0u;
  *(_OWORD *)(v64 - 304) = 0u;
  *(_OWORD *)(v64 - 256) = 0u;
  *(_OWORD *)(v64 - 240) = xmmword_210802BA0;
  *(_OWORD *)(v64 - 224) = 0u;
  *(_OWORD *)(v64 - 208) = xmmword_210802BA0;
  IKString::assign((_QWORD *)(v64 - 288), "left_forearm_joint", (IKString *)0x12);
  *(_DWORD *)(v64 - 264) = -1;
  FIK::MoCapBone::MoCapBone((FIK::MoCapBone *)&v100, *(FIK::Allocator **)(a2 + 16));
  FIK::IKArray<FIK::MoCapBone>::push_back<FIK::MoCapBone,void>((_QWORD *)(a2 + 208), (uint64_t)&v100);
  FIK::IKArray<IKString>::~IKArray((uint64_t)v131);
  if (v129)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v130 + 24))(v130, v128, 0, 8);
    v128 = 0;
    v129 = 0;
  }
  if (v105)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v106 + 24))(*(_QWORD *)v106, v104, 0, 8);
    v104 = 0;
    v105 = 0;
  }
  if (v102)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v103 + 24))(v103, v101, 0, 8);
  v65 = *(_QWORD *)(a2 + 224) + 544 * *(_QWORD *)(a2 + 208);
  *(_BYTE *)(v65 - 190) = 0;
  *(_DWORD *)(v65 - 188) = 0;
  *(_WORD *)(v65 - 192) = 1;
  *(_QWORD *)(v65 - 180) = 0x3DF5C28F3DCCCCCDLL;
  *(_WORD *)(v65 - 184) = 1;
  *(_DWORD *)(v65 - 172) = 5;
  *(_QWORD *)(v65 - 544) = 0xFFFFFFFF00000010;
  IKString::assign((_QWORD *)(v65 - 536), "left_hand_joint", (IKString *)0xF);
  IKString::assign((_QWORD *)(v65 - 512), "left_forearm_joint", (IKString *)0x12);
  *(_OWORD *)(v65 - 480) = xmmword_210805720;
  *(_OWORD *)(v65 - 464) = xmmword_210805710;
  *(_DWORD *)(v65 - 448) = 16843009;
  *(_QWORD *)(v65 - 445) = 16843009;
  *(_WORD *)(v65 - 437) = 0;
  *(_OWORD *)(v65 - 432) = xmmword_210804100;
  *(_QWORD *)(v65 - 416) = 0x3F80000000000000;
  *(_OWORD *)(v65 - 400) = v99;
  *(_OWORD *)(v65 - 384) = v99;
  *(int32x4_t *)(v65 - 368) = vdupq_n_s32(0xC3B40000);
  *(int32x4_t *)(v65 - 352) = vdupq_n_s32(0x43B40000u);
  *(_OWORD *)(v65 - 336) = 0u;
  *(_OWORD *)(v65 - 320) = 0u;
  *(_OWORD *)(v65 - 304) = 0u;
  *(_OWORD *)(v65 - 256) = 0u;
  *(_OWORD *)(v65 - 240) = xmmword_210802BA0;
  *(_OWORD *)(v65 - 224) = 0u;
  *(_OWORD *)(v65 - 208) = xmmword_210802BA0;
  IKString::assign((_QWORD *)(v65 - 288), "left_hand_joint", (IKString *)0xF);
  *(_DWORD *)(v65 - 264) = -1;
  FIK::MoCapBone::MoCapBone((FIK::MoCapBone *)&v100, *(FIK::Allocator **)(a2 + 16));
  FIK::IKArray<FIK::MoCapBone>::push_back<FIK::MoCapBone,void>((_QWORD *)(a2 + 208), (uint64_t)&v100);
  FIK::IKArray<IKString>::~IKArray((uint64_t)v131);
  if (v129)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v130 + 24))(v130, v128, 0, 8);
    v128 = 0;
    v129 = 0;
  }
  if (v105)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v106 + 24))(*(_QWORD *)v106, v104, 0, 8);
    v104 = 0;
    v105 = 0;
  }
  if (v102)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v103 + 24))(v103, v101, 0, 8);
  v66 = *(_QWORD *)(a2 + 224) + 544 * *(_QWORD *)(a2 + 208);
  *(_BYTE *)(v66 - 190) = 0;
  *(_DWORD *)(v66 - 188) = 0;
  *(_WORD *)(v66 - 192) = 0;
  *(_QWORD *)(v66 - 180) = 0x3DF5C28F3DCCCCCDLL;
  *(_WORD *)(v66 - 184) = 0;
  *(_DWORD *)(v66 - 172) = 5;
  *(_QWORD *)(v66 - 544) = -4294967279;
  IKString::assign((_QWORD *)(v66 - 536), "right_shoulder_1_joint", (IKString *)0x16);
  IKString::assign((_QWORD *)(v66 - 512), "spine_7_joint", (IKString *)0xD);
  *(_OWORD *)(v66 - 480) = xmmword_210805180;
  *(_OWORD *)(v66 - 464) = xmmword_210805730;
  *(_WORD *)(v66 - 448) = 1;
  *(_DWORD *)(v66 - 446) = 16843009;
  *(_BYTE *)(v66 - 442) = 1;
  *(_DWORD *)(v66 - 441) = 0;
  *(_WORD *)(v66 - 437) = 0;
  *(_OWORD *)(v66 - 432) = xmmword_210805680;
  *(_QWORD *)(v66 - 416) = 0x3F80000000000000;
  *(_OWORD *)(v66 - 400) = xmmword_210805690;
  *(_OWORD *)(v66 - 384) = xmmword_2108050C0;
  *(int32x4_t *)(v66 - 368) = vdupq_n_s32(0xC3B40000);
  *(int32x4_t *)(v66 - 352) = vdupq_n_s32(0x43B40000u);
  *(_OWORD *)(v66 - 336) = 0u;
  *(_OWORD *)(v66 - 320) = 0u;
  *(_OWORD *)(v66 - 304) = 0u;
  *(_OWORD *)(v66 - 256) = 0u;
  *(_OWORD *)(v66 - 240) = xmmword_210802BA0;
  *(_OWORD *)(v66 - 224) = 0u;
  *(_OWORD *)(v66 - 208) = xmmword_210802BA0;
  IKString::assign((_QWORD *)(v66 - 288), (char *)&unk_2108059BE, 0);
  *(_DWORD *)(v66 - 264) = -1;
  FIK::MoCapBone::MoCapBone((FIK::MoCapBone *)&v100, *(FIK::Allocator **)(a2 + 16));
  FIK::IKArray<FIK::MoCapBone>::push_back<FIK::MoCapBone,void>((_QWORD *)(a2 + 208), (uint64_t)&v100);
  FIK::IKArray<IKString>::~IKArray((uint64_t)v131);
  if (v129)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v130 + 24))(v130, v128, 0, 8);
    v128 = 0;
    v129 = 0;
  }
  if (v105)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v106 + 24))(*(_QWORD *)v106, v104, 0, 8);
    v104 = 0;
    v105 = 0;
  }
  if (v102)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v103 + 24))(v103, v101, 0, 8);
  v67 = *(_QWORD *)(a2 + 224) + 544 * *(_QWORD *)(a2 + 208);
  *(_BYTE *)(v67 - 190) = 0;
  *(_DWORD *)(v67 - 188) = 0;
  *(_WORD *)(v67 - 192) = 1;
  *(_QWORD *)(v67 - 180) = 0x3DF5C28F3DCCCCCDLL;
  *(_WORD *)(v67 - 184) = 1;
  *(_DWORD *)(v67 - 172) = 5;
  *(_QWORD *)(v67 - 544) = -4294967278;
  IKString::assign((_QWORD *)(v67 - 536), "right_arm_joint", (IKString *)0xF);
  IKString::assign((_QWORD *)(v67 - 512), "right_shoulder_1_joint", (IKString *)0x16);
  *(_OWORD *)(v67 - 480) = xmmword_210805750;
  *(_OWORD *)(v67 - 464) = xmmword_210805740;
  *(_DWORD *)(v67 - 448) = 16843009;
  *(_QWORD *)(v67 - 445) = 16843009;
  *(_WORD *)(v67 - 437) = 0;
  *(_OWORD *)(v67 - 432) = xmmword_2108056C0;
  *(_QWORD *)(v67 - 416) = 0x3F80000000000000;
  *(_OWORD *)(v67 - 400) = xmmword_2108056D0;
  *(_OWORD *)(v67 - 384) = xmmword_210805100;
  *(int32x4_t *)(v67 - 368) = vdupq_n_s32(0xC3B40000);
  *(int32x4_t *)(v67 - 352) = vdupq_n_s32(0x43B40000u);
  *(_OWORD *)(v67 - 336) = 0u;
  *(_OWORD *)(v67 - 320) = 0u;
  *(_OWORD *)(v67 - 304) = 0u;
  *(_OWORD *)(v67 - 256) = 0u;
  *(_OWORD *)(v67 - 240) = xmmword_210802BA0;
  *(_OWORD *)(v67 - 224) = 0u;
  *(_OWORD *)(v67 - 208) = xmmword_210802BA0;
  IKString::assign((_QWORD *)(v67 - 288), "right_arm_joint", (IKString *)0xF);
  *(_DWORD *)(v67 - 264) = -1;
  FIK::MoCapBone::MoCapBone((FIK::MoCapBone *)&v100, *(FIK::Allocator **)(a2 + 16));
  FIK::IKArray<FIK::MoCapBone>::push_back<FIK::MoCapBone,void>((_QWORD *)(a2 + 208), (uint64_t)&v100);
  FIK::IKArray<IKString>::~IKArray((uint64_t)v131);
  if (v129)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v130 + 24))(v130, v128, 0, 8);
    v128 = 0;
    v129 = 0;
  }
  if (v105)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v106 + 24))(*(_QWORD *)v106, v104, 0, 8);
    v104 = 0;
    v105 = 0;
  }
  if (v102)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v103 + 24))(v103, v101, 0, 8);
  v68 = *(_QWORD *)(a2 + 224) + 544 * *(_QWORD *)(a2 + 208);
  *(_BYTE *)(v68 - 190) = 0;
  *(_DWORD *)(v68 - 188) = 0;
  *(_WORD *)(v68 - 192) = 1;
  *(_QWORD *)(v68 - 180) = 0x3DF5C28F3DCCCCCDLL;
  *(_WORD *)(v68 - 184) = 1;
  *(_DWORD *)(v68 - 172) = 5;
  *(_QWORD *)(v68 - 544) = -4294967277;
  IKString::assign((_QWORD *)(v68 - 536), "right_forearm_joint", (IKString *)0x13);
  IKString::assign((_QWORD *)(v68 - 512), "right_arm_joint", (IKString *)0xF);
  *(_OWORD *)(v68 - 480) = xmmword_210805770;
  *(_OWORD *)(v68 - 464) = xmmword_210805760;
  *(_DWORD *)(v68 - 448) = 16843009;
  *(_QWORD *)(v68 - 445) = 16843009;
  *(_WORD *)(v68 - 437) = 0;
  *(_OWORD *)(v68 - 432) = xmmword_210805780;
  *(_QWORD *)(v68 - 416) = 0x3F80000000000000;
  *(_OWORD *)(v68 - 400) = v99;
  *(_OWORD *)(v68 - 384) = v99;
  *(int32x4_t *)(v68 - 368) = vdupq_n_s32(0xC3B40000);
  *(int32x4_t *)(v68 - 352) = vdupq_n_s32(0x43B40000u);
  *(_OWORD *)(v68 - 336) = 0u;
  *(_OWORD *)(v68 - 320) = 0u;
  *(_OWORD *)(v68 - 304) = 0u;
  *(_OWORD *)(v68 - 256) = 0u;
  *(_OWORD *)(v68 - 240) = xmmword_210802BA0;
  *(_OWORD *)(v68 - 224) = 0u;
  *(_OWORD *)(v68 - 208) = xmmword_210802BA0;
  IKString::assign((_QWORD *)(v68 - 288), "right_forearm_joint", (IKString *)0x13);
  *(_DWORD *)(v68 - 264) = -1;
  FIK::MoCapBone::MoCapBone((FIK::MoCapBone *)&v100, *(FIK::Allocator **)(a2 + 16));
  FIK::IKArray<FIK::MoCapBone>::push_back<FIK::MoCapBone,void>((_QWORD *)(a2 + 208), (uint64_t)&v100);
  FIK::IKArray<IKString>::~IKArray((uint64_t)v131);
  if (v129)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v130 + 24))(v130, v128, 0, 8);
    v128 = 0;
    v129 = 0;
  }
  if (v105)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v106 + 24))(*(_QWORD *)v106, v104, 0, 8);
    v104 = 0;
    v105 = 0;
  }
  if (v102)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v103 + 24))(v103, v101, 0, 8);
  v69 = *(_QWORD *)(a2 + 224) + 544 * *(_QWORD *)(a2 + 208);
  *(_BYTE *)(v69 - 190) = 0;
  *(_DWORD *)(v69 - 188) = 0;
  *(_WORD *)(v69 - 192) = 1;
  *(_QWORD *)(v69 - 180) = 0x3DF5C28F3DCCCCCDLL;
  *(_WORD *)(v69 - 184) = 1;
  *(_DWORD *)(v69 - 172) = 5;
  *(_QWORD *)(v69 - 544) = -4294967276;
  IKString::assign((_QWORD *)(v69 - 536), "right_hand_joint", (IKString *)0x10);
  IKString::assign((_QWORD *)(v69 - 512), "right_forearm_joint", (IKString *)0x13);
  *(_OWORD *)(v69 - 480) = xmmword_210805790;
  *(_OWORD *)(v69 - 464) = xmmword_210805710;
  *(_DWORD *)(v69 - 448) = 16843009;
  *(_QWORD *)(v69 - 445) = 16843009;
  *(_WORD *)(v69 - 437) = 0;
  *(_OWORD *)(v69 - 432) = xmmword_210804100;
  *(_QWORD *)(v69 - 416) = 0x3F80000000000000;
  *(_OWORD *)(v69 - 400) = v99;
  *(_OWORD *)(v69 - 384) = v99;
  *(int32x4_t *)(v69 - 368) = vdupq_n_s32(0xC3B40000);
  *(int32x4_t *)(v69 - 352) = vdupq_n_s32(0x43B40000u);
  *(_OWORD *)(v69 - 336) = 0u;
  *(_OWORD *)(v69 - 320) = 0u;
  *(_OWORD *)(v69 - 304) = 0u;
  *(_OWORD *)(v69 - 256) = 0u;
  *(_OWORD *)(v69 - 240) = xmmword_210802BA0;
  *(_OWORD *)(v69 - 224) = 0u;
  *(_OWORD *)(v69 - 208) = xmmword_210802BA0;
  IKString::assign((_QWORD *)(v69 - 288), "right_hand_joint", (IKString *)0x10);
  *(_DWORD *)(v69 - 264) = -1;
  FIK::IKArray<FIK::RigBoneBase>::reserve((uint64_t *)(a2 + 240), 0xBuLL);
  v70 = *(_QWORD *)(a2 + 16);
  v100 = -1;
  v101 = 0;
  v102 = 0;
  v103 = v70;
  v104 = 0;
  v105 = 0;
  *(_QWORD *)v106 = v70;
  v108 = 0;
  v109 = 0;
  v110 = xmmword_210802BA0;
  FIK::IKArray<FIK::RigBoneBase>::push_back<FIK::RigBoneBase,void>((uint64_t *)(a2 + 240), (uint64_t)&v100);
  if (v105)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v106 + 24))(*(_QWORD *)v106, v104, 0, 8);
    v104 = 0;
    v105 = 0;
  }
  if (v102)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v103 + 24))(v103, v101, 0, 8);
  v71 = *(_QWORD *)(a2 + 256) + 96 * *(_QWORD *)(a2 + 240);
  IKString::assign((_QWORD *)(v71 - 88), "virtualHips", (IKString *)0xB);
  IKString::assign((_QWORD *)(v71 - 64), (char *)&unk_2108059BE, 0);
  *(_OWORD *)(v71 - 32) = xmmword_2108057A0;
  *(_OWORD *)(v71 - 16) = xmmword_210802BA0;
  v72 = *(_QWORD *)(a2 + 16);
  v100 = -1;
  v101 = 0;
  v102 = 0;
  v103 = v72;
  v104 = 0;
  v105 = 0;
  *(_QWORD *)v106 = v72;
  v108 = 0;
  v109 = 0;
  v110 = xmmword_210802BA0;
  FIK::IKArray<FIK::RigBoneBase>::push_back<FIK::RigBoneBase,void>((uint64_t *)(a2 + 240), (uint64_t)&v100);
  if (v105)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v106 + 24))(*(_QWORD *)v106, v104, 0, 8);
    v104 = 0;
    v105 = 0;
  }
  if (v102)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v103 + 24))(v103, v101, 0, 8);
  v73 = *(_QWORD *)(a2 + 256) + 96 * *(_QWORD *)(a2 + 240);
  IKString::assign((_QWORD *)(v73 - 88), "spine_6_joint", (IKString *)0xD);
  IKString::assign((_QWORD *)(v73 - 64), (char *)&unk_2108059BE, 0);
  *(_OWORD *)(v73 - 32) = xmmword_2108057C0;
  *(_OWORD *)(v73 - 16) = xmmword_2108057B0;
  v74 = *(_QWORD *)(a2 + 16);
  v100 = -1;
  v101 = 0;
  v102 = 0;
  v103 = v74;
  v104 = 0;
  v105 = 0;
  *(_QWORD *)v106 = v74;
  v108 = 0;
  v109 = 0;
  v110 = xmmword_210802BA0;
  FIK::IKArray<FIK::RigBoneBase>::push_back<FIK::RigBoneBase,void>((uint64_t *)(a2 + 240), (uint64_t)&v100);
  if (v105)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v106 + 24))(*(_QWORD *)v106, v104, 0, 8);
    v104 = 0;
    v105 = 0;
  }
  if (v102)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v103 + 24))(v103, v101, 0, 8);
  v75 = *(_QWORD *)(a2 + 256) + 96 * *(_QWORD *)(a2 + 240);
  IKString::assign((_QWORD *)(v75 - 88), "spine_7_joint", (IKString *)0xD);
  IKString::assign((_QWORD *)(v75 - 64), (char *)&unk_2108059BE, 0);
  *(_OWORD *)(v75 - 32) = xmmword_2108057E0;
  *(_OWORD *)(v75 - 16) = xmmword_2108057D0;
  v76 = *(_QWORD *)(a2 + 16);
  v100 = -1;
  v101 = 0;
  v102 = 0;
  v103 = v76;
  v104 = 0;
  v105 = 0;
  *(_QWORD *)v106 = v76;
  v108 = 0;
  v109 = 0;
  v110 = xmmword_210802BA0;
  FIK::IKArray<FIK::RigBoneBase>::push_back<FIK::RigBoneBase,void>((uint64_t *)(a2 + 240), (uint64_t)&v100);
  if (v105)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v106 + 24))(*(_QWORD *)v106, v104, 0, 8);
    v104 = 0;
    v105 = 0;
  }
  if (v102)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v103 + 24))(v103, v101, 0, 8);
  v77 = *(_QWORD *)(a2 + 256) + 96 * *(_QWORD *)(a2 + 240);
  IKString::assign((_QWORD *)(v77 - 88), "neck_1_joint", (IKString *)0xC);
  IKString::assign((_QWORD *)(v77 - 64), (char *)&unk_2108059BE, 0);
  *(_OWORD *)(v77 - 32) = xmmword_210805800;
  *(_OWORD *)(v77 - 16) = xmmword_2108057F0;
  v78 = *(_QWORD *)(a2 + 16);
  v100 = -1;
  v101 = 0;
  v102 = 0;
  v103 = v78;
  v104 = 0;
  v105 = 0;
  *(_QWORD *)v106 = v78;
  v108 = 0;
  v109 = 0;
  v110 = xmmword_210802BA0;
  FIK::IKArray<FIK::RigBoneBase>::push_back<FIK::RigBoneBase,void>((uint64_t *)(a2 + 240), (uint64_t)&v100);
  if (v105)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v106 + 24))(*(_QWORD *)v106, v104, 0, 8);
    v104 = 0;
    v105 = 0;
  }
  if (v102)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v103 + 24))(v103, v101, 0, 8);
  v79 = *(_QWORD *)(a2 + 256) + 96 * *(_QWORD *)(a2 + 240);
  IKString::assign((_QWORD *)(v79 - 88), "head_joint", (IKString *)0xA);
  IKString::assign((_QWORD *)(v79 - 64), (char *)&unk_2108059BE, 0);
  *(_OWORD *)(v79 - 32) = xmmword_210805820;
  *(_OWORD *)(v79 - 16) = xmmword_210805810;
  v80 = *(_QWORD *)(a2 + 16);
  v100 = -1;
  v101 = 0;
  v102 = 0;
  v103 = v80;
  v104 = 0;
  v105 = 0;
  *(_QWORD *)v106 = v80;
  v108 = 0;
  v109 = 0;
  v110 = xmmword_210802BA0;
  FIK::IKArray<FIK::RigBoneBase>::push_back<FIK::RigBoneBase,void>((uint64_t *)(a2 + 240), (uint64_t)&v100);
  if (v105)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v106 + 24))(*(_QWORD *)v106, v104, 0, 8);
    v104 = 0;
    v105 = 0;
  }
  if (v102)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v103 + 24))(v103, v101, 0, 8);
  v81 = *(_QWORD *)(a2 + 256) + 96 * *(_QWORD *)(a2 + 240);
  IKString::assign((_QWORD *)(v81 - 88), "left_arm_joint", (IKString *)0xE);
  IKString::assign((_QWORD *)(v81 - 64), (char *)&unk_2108059BE, 0);
  *(_OWORD *)(v81 - 32) = xmmword_210805840;
  *(_OWORD *)(v81 - 16) = xmmword_210805830;
  v82 = *(_QWORD *)(a2 + 16);
  v100 = -1;
  v101 = 0;
  v102 = 0;
  v103 = v82;
  v104 = 0;
  v105 = 0;
  *(_QWORD *)v106 = v82;
  v108 = 0;
  v109 = 0;
  v110 = xmmword_210802BA0;
  FIK::IKArray<FIK::RigBoneBase>::push_back<FIK::RigBoneBase,void>((uint64_t *)(a2 + 240), (uint64_t)&v100);
  if (v105)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v106 + 24))(*(_QWORD *)v106, v104, 0, 8);
    v104 = 0;
    v105 = 0;
  }
  if (v102)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v103 + 24))(v103, v101, 0, 8);
  v83 = *(_QWORD *)(a2 + 256) + 96 * *(_QWORD *)(a2 + 240);
  IKString::assign((_QWORD *)(v83 - 88), "left_forearm_joint", (IKString *)0x12);
  IKString::assign((_QWORD *)(v83 - 64), (char *)&unk_2108059BE, 0);
  *(_OWORD *)(v83 - 32) = xmmword_210805860;
  *(_OWORD *)(v83 - 16) = xmmword_210805850;
  v84 = *(_QWORD *)(a2 + 16);
  v100 = -1;
  v101 = 0;
  v102 = 0;
  v103 = v84;
  v104 = 0;
  v105 = 0;
  *(_QWORD *)v106 = v84;
  v108 = 0;
  v109 = 0;
  v110 = xmmword_210802BA0;
  FIK::IKArray<FIK::RigBoneBase>::push_back<FIK::RigBoneBase,void>((uint64_t *)(a2 + 240), (uint64_t)&v100);
  if (v105)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v106 + 24))(*(_QWORD *)v106, v104, 0, 8);
    v104 = 0;
    v105 = 0;
  }
  if (v102)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v103 + 24))(v103, v101, 0, 8);
  v85 = *(_QWORD *)(a2 + 256) + 96 * *(_QWORD *)(a2 + 240);
  IKString::assign((_QWORD *)(v85 - 88), "left_hand_joint", (IKString *)0xF);
  IKString::assign((_QWORD *)(v85 - 64), (char *)&unk_2108059BE, 0);
  *(_OWORD *)(v85 - 32) = xmmword_210805880;
  *(_OWORD *)(v85 - 16) = xmmword_210805870;
  v86 = *(_QWORD *)(a2 + 16);
  v100 = -1;
  v101 = 0;
  v102 = 0;
  v103 = v86;
  v104 = 0;
  v105 = 0;
  *(_QWORD *)v106 = v86;
  v108 = 0;
  v109 = 0;
  v110 = xmmword_210802BA0;
  FIK::IKArray<FIK::RigBoneBase>::push_back<FIK::RigBoneBase,void>((uint64_t *)(a2 + 240), (uint64_t)&v100);
  if (v105)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v106 + 24))(*(_QWORD *)v106, v104, 0, 8);
    v104 = 0;
    v105 = 0;
  }
  if (v102)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v103 + 24))(v103, v101, 0, 8);
  v87 = *(_QWORD *)(a2 + 256) + 96 * *(_QWORD *)(a2 + 240);
  IKString::assign((_QWORD *)(v87 - 88), "right_arm_joint", (IKString *)0xF);
  IKString::assign((_QWORD *)(v87 - 64), (char *)&unk_2108059BE, 0);
  *(_OWORD *)(v87 - 32) = xmmword_2108058A0;
  *(_OWORD *)(v87 - 16) = xmmword_210805890;
  v88 = *(_QWORD *)(a2 + 16);
  v100 = -1;
  v101 = 0;
  v102 = 0;
  v103 = v88;
  v104 = 0;
  v105 = 0;
  *(_QWORD *)v106 = v88;
  v108 = 0;
  v109 = 0;
  v110 = xmmword_210802BA0;
  FIK::IKArray<FIK::RigBoneBase>::push_back<FIK::RigBoneBase,void>((uint64_t *)(a2 + 240), (uint64_t)&v100);
  if (v105)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v106 + 24))(*(_QWORD *)v106, v104, 0, 8);
    v104 = 0;
    v105 = 0;
  }
  if (v102)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v103 + 24))(v103, v101, 0, 8);
  v89 = *(_QWORD *)(a2 + 256) + 96 * *(_QWORD *)(a2 + 240);
  IKString::assign((_QWORD *)(v89 - 88), "right_forearm_joint", (IKString *)0x13);
  IKString::assign((_QWORD *)(v89 - 64), (char *)&unk_2108059BE, 0);
  *(_OWORD *)(v89 - 32) = xmmword_2108058C0;
  *(_OWORD *)(v89 - 16) = xmmword_2108058B0;
  v90 = *(_QWORD *)(a2 + 16);
  v100 = -1;
  v101 = 0;
  v102 = 0;
  v103 = v90;
  v104 = 0;
  v105 = 0;
  *(_QWORD *)v106 = v90;
  v108 = 0;
  v109 = 0;
  v110 = xmmword_210802BA0;
  FIK::IKArray<FIK::RigBoneBase>::push_back<FIK::RigBoneBase,void>((uint64_t *)(a2 + 240), (uint64_t)&v100);
  if (v105)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)v106 + 24))(*(_QWORD *)v106, v104, 0, 8);
    v104 = 0;
    v105 = 0;
  }
  if (v102)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v103 + 24))(v103, v101, 0, 8);
  v91 = *(_QWORD *)(a2 + 256) + 96 * *(_QWORD *)(a2 + 240);
  IKString::assign((_QWORD *)(v91 - 88), "right_hand_joint", (IKString *)0x10);
  IKString::assign((_QWORD *)(v91 - 64), (char *)&unk_2108059BE, 0);
  *(_OWORD *)(v91 - 32) = xmmword_2108058E0;
  *(_OWORD *)(v91 - 16) = xmmword_2108058D0;
  *(_OWORD *)(a2 + 272) = 0u;
  *(_OWORD *)(a2 + 288) = xmmword_210802BA0;
  *(_BYTE *)(a2 + 304) = 1;
  *(_DWORD *)(a2 + 308) = 1065353216;
  result = FIK::Serialisation::fixUpRigIndices(a2);
  v93 = *(_QWORD *)(a2 + 176);
  if (v93)
  {
    v94 = (float32x4_t *)(*(_QWORD *)(a2 + 192) + 208);
    v95 = v93 << 8;
    do
    {
      if (!(v94[-1].u8[12] | v94[-1].u8[13]))
        *v94 = vdivq_f32(*v94, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)(a2 + 308), 0));
      v94 += 16;
      v95 -= 256;
    }
    while (v95);
  }
  return result;
}

double CoreIKACPPenetrationConstraint::setPlaneDefinition(CoreIKConstraint *a1, __n128 *a2, __n128 *a3)
{
  __n128 *v5;
  double result;

  v5 = (__n128 *)CoreIKConstraint::interface(a1);
  FIK::FloorLevel::FloorTask::setPlanePosition(v5, a2);
  *(_QWORD *)&result = FIK::FloorLevel::FloorTask::setPlaneNormal(v5, a3).n128_u64[0];
  return result;
}

uint64_t CoreIKACPSolver::despatchSolve(uint64_t a1)
{
  unsigned int v1;

  v1 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
  if (v1 > 2)
    return 1;
  else
    return dword_21080596C[v1];
}

uint64_t CoreIKACPSolver::despatchInputPoseSize(FIK::AnimNode **this)
{
  return *(_QWORD *)(FIK::AnimNode::GetRig(this[1]) + 208);
}

uint64_t CoreIKACPSolver::despatchOutputPoseSize(FIK::AnimNode **this)
{
  return *(_QWORD *)(FIK::AnimNode::GetRig(this[1]) + 208);
}

void *CoreIKACPSolver::despatchGetInputName(FIK::AnimNode **this, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(FIK::AnimNode::GetRig(this[1]) + 256);
  if (*(_QWORD *)(v3 + 96 * a2 + 16))
    return *(void **)(v3 + 96 * a2 + 8);
  else
    return &unk_2108059BE;
}

void *CoreIKACPSolver::despatchGetOutputName(FIK::AnimNode **this, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(FIK::AnimNode::GetRig(this[1]) + 224);
  if (*(_QWORD *)(v3 + 544 * a2 + 16))
    return *(void **)(v3 + 544 * a2 + 8);
  else
    return &unk_2108059BE;
}

void *CoreIKACPSolver::despatchGetOutputParentName(FIK::AnimNode **this, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(FIK::AnimNode::GetRig(this[1]) + 224);
  if (*(_QWORD *)(v3 + 544 * a2 + 40))
    return *(void **)(v3 + 544 * a2 + 32);
  else
    return &unk_2108059BE;
}

uint64_t CoreIKACPSolver::despatchGetConstraint(FIK *a1, char *a2)
{
  uint64_t v4;
  IKString *v5;
  unsigned int TaskIndex;
  CoreIKConstraint *v7;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (***v19)(FIK::CrtAllocator *__hidden);

  v4 = *((_QWORD *)a1 + 1);
  v17 = 0;
  v18 = 0;
  v19 = FIK::defaultAllocator(a1);
  v5 = (IKString *)strlen(a2);
  IKString::assign(&v17, a2, v5);
  TaskIndex = FIK::AnimNode::GetTaskIndex(v4, &v17);
  if (v18)
    ((void (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v19)[3])(v19, v17, 0, 8);
  if ((TaskIndex & 0x80000000) != 0)
  {
    v9 = ikinemaLogObject()[1];
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      CoreIKACPSolver::despatchGetConstraint(v9, v10, v11, v12, v13, v14, v15, v16);
    return 0;
  }
  else
  {
    v7 = (CoreIKConstraint *)(*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)a1 + 1) + 48))(*((_QWORD *)a1 + 1), TaskIndex);
    return CoreIKConstraint::interface(v7);
  }
}

uint64_t CoreIKACPSolver::despatchJoints(CoreIKACPSolver *this)
{
  return (uint64_t)this + 16;
}

uint64_t CoreIKACPSolver::despatchConstraints(CoreIKACPSolver *this)
{
  return (uint64_t)this + 24;
}

uint64_t CoreIKACPSolver::despatchGetComposableInstance(CoreIKACPSolver *this)
{
  return *((_QWORD *)this + 1);
}

_QWORD *CoreIKACPSlidingSolver::CoreIKACPSlidingSolver(_QWORD *a1)
{
  _QWORD *v2;

  v2 = a1 + 4;
  a1[2] = v2;
  a1[3] = v2;
  *a1 = &off_24CA6A810;
  a1[1] = v2;
  FIK::FeetSliding::FeetSliding();
  return a1;
}

float CoreIKACPSlidingSolver::setTimeStep(CoreIKACPSlidingSolver *this, float a2)
{
  FIK::AnimNode *v2;

  v2 = (CoreIKACPSlidingSolver *)((char *)this + 32);
  FIK::AnimNode::SetFrameRate((uint64_t)this + 32, 1.0 / a2);
  return 1.0 / FIK::AnimNode::GetFrameRate(v2);
}

_QWORD *CoreIKACPFilteringSolver::CoreIKACPFilteringSolver(_QWORD *a1)
{
  _QWORD *v2;

  v2 = a1 + 4;
  a1[2] = v2;
  a1[3] = v2;
  *a1 = &off_24CA6A8C0;
  a1[1] = v2;
  FIK::FilterNode::FilterNode();
  return a1;
}

float CoreIKACPFilteringSolver::setFilteringSmoothness(CoreIKACPFilteringSolver *this, float a2)
{
  FIK::FilterNode *v2;

  v2 = (CoreIKACPFilteringSolver *)((char *)this + 32);
  FIK::FilterNode::SetFilterAlpha((CoreIKACPFilteringSolver *)((char *)this + 32), a2);
  return FIK::FilterNode::GetFilterAlpha(v2);
}

_QWORD *CoreIKACPPenetrationSolver::CoreIKACPPenetrationSolver(_QWORD *a1)
{
  _QWORD *v2;

  v2 = a1 + 4;
  a1[2] = v2;
  a1[3] = v2;
  *a1 = &off_24CA6A970;
  a1[1] = v2;
  FIK::FloorLevel::FloorLevel();
  return a1;
}

uint64_t CoreIKACPPenetrationSolver::getConstraint(FIK *a1, char *a2)
{
  FIK::FloorLevel *v3;
  IKString *v4;
  int TaskIndex;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (***v17)(FIK::CrtAllocator *__hidden);

  v3 = (FIK *)((char *)a1 + 32);
  v15 = 0;
  v16 = 0;
  v17 = FIK::defaultAllocator(a1);
  v4 = (IKString *)strlen(a2);
  IKString::assign(&v15, a2, v4);
  TaskIndex = FIK::AnimNode::GetTaskIndex((uint64_t)v3, &v15);
  if (v16)
    ((void (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v17)[3])(v17, v15, 0, 8);
  if ((TaskIndex & 0x80000000) == 0)
    return FIK::FloorLevel::GetTaskInstance(v3, TaskIndex);
  v7 = ikinemaLogObject()[1];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    CoreIKACPPenetrationSolver::getConstraint(v7, v8, v9, v10, v11, v12, v13, v14);
  return 0;
}

unint64_t CoreIKACPPenetrationSolver::getConstraint(CoreIKACPPenetrationSolver *this, unint64_t a2)
{
  unint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = FIK::FloorLevel::constraintByIndex((CoreIKACPPenetrationSolver *)((char *)this + 32), a2);
  if (!v2)
  {
    v3 = ikinemaLogObject()[1];
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      CoreIKACPPenetrationSolver::getConstraint(v3, v4, v5, v6, v7, v8, v9, v10);
  }
  return v2;
}

uint64_t CoreIKACPSolver::despatchSolve()
{
  return 1;
}

void CoreIKACPSolver::despatchResetSolver(FIK::Solver ***this)
{
  FIK::AnimNode::ResetNode(this[1]);
}

uint64_t CoreIKACPSolver::despatchGetConstraintCount(CoreIKACPSolver *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
}

void CoreIKACPSlidingSolver::~CoreIKACPSlidingSolver(CoreIKACPSlidingSolver *this)
{
  FIK::AnimNode *v1;

  *(_QWORD *)this = &off_24CA6A810;
  *((_QWORD *)this + 4) = off_24CA6B1A0;
  v1 = (CoreIKACPSlidingSolver *)((char *)this + 32);
  FIK::IKArray<FIK::FeetSliding::SlidingTask>::~IKArray((uint64_t)this + 504);
  FIK::AnimNode::~AnimNode(v1);
}

{
  FIK::AnimNode *v1;

  *(_QWORD *)this = &off_24CA6A810;
  *((_QWORD *)this + 4) = off_24CA6B1A0;
  v1 = (CoreIKACPSlidingSolver *)((char *)this + 32);
  FIK::IKArray<FIK::FeetSliding::SlidingTask>::~IKArray((uint64_t)this + 504);
  FIK::AnimNode::~AnimNode(v1);
  JUMPOUT(0x212BCAFB4);
}

uint64_t CoreIKACPSlidingSolver::despatchSolverType(CoreIKACPSlidingSolver *this)
{
  return 11;
}

void CoreIKACPFilteringSolver::~CoreIKACPFilteringSolver(CoreIKACPFilteringSolver *this)
{
  FIK::AnimNode *v1;

  *(_QWORD *)this = &off_24CA6A8C0;
  *((_QWORD *)this + 4) = off_24CA6AA58;
  v1 = (CoreIKACPFilteringSolver *)((char *)this + 32);
  FIK::IKArray<FIK::FilterNode::FilteringTask>::~IKArray((uint64_t)this + 512);
  FIK::AnimNode::~AnimNode(v1);
}

{
  FIK::AnimNode *v1;

  *(_QWORD *)this = &off_24CA6A8C0;
  *((_QWORD *)this + 4) = off_24CA6AA58;
  v1 = (CoreIKACPFilteringSolver *)((char *)this + 32);
  FIK::IKArray<FIK::FilterNode::FilteringTask>::~IKArray((uint64_t)this + 512);
  FIK::AnimNode::~AnimNode(v1);
  JUMPOUT(0x212BCAFB4);
}

uint64_t CoreIKACPFilteringSolver::despatchSolverType(CoreIKACPFilteringSolver *this)
{
  return 10;
}

void CoreIKACPPenetrationSolver::~CoreIKACPPenetrationSolver(CoreIKACPPenetrationSolver *this)
{
  FIK::AnimNode *v1;

  *(_QWORD *)this = &off_24CA6A970;
  *((_QWORD *)this + 4) = off_24CA6AAF0;
  v1 = (CoreIKACPPenetrationSolver *)((char *)this + 32);
  FIK::IKArray<FIK::FloorLevel::FloorTask>::~IKArray((uint64_t *)this + 63);
  FIK::AnimNode::~AnimNode(v1);
}

{
  FIK::AnimNode *v1;

  *(_QWORD *)this = &off_24CA6A970;
  *((_QWORD *)this + 4) = off_24CA6AAF0;
  v1 = (CoreIKACPPenetrationSolver *)((char *)this + 32);
  FIK::IKArray<FIK::FloorLevel::FloorTask>::~IKArray((uint64_t *)this + 63);
  FIK::AnimNode::~AnimNode(v1);
  JUMPOUT(0x212BCAFB4);
}

uint64_t CoreIKACPPenetrationSolver::despatchSolverType(CoreIKACPPenetrationSolver *this)
{
  return 12;
}

BOOL CoreIKSolverIsComposable(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1) != 0;
}

FIK::AnimNode *CoreIKSolverAlgorithmCount(uint64_t a1)
{
  FIK::AnimNode *result;

  result = (FIK::AnimNode *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
  if (result)
    return (FIK::AnimNode *)FIK::AnimNode::algorithmCount(result);
  return result;
}

void *CoreIKSolverAlgorithmGetName(uint64_t a1, unint64_t a2)
{
  FIK::AnimNode *v3;
  FIK::AnimNode *v4;
  _QWORD *v5;

  v3 = (FIK::AnimNode *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
  if (!v3)
    return &unk_2108059BE;
  v4 = v3;
  if (FIK::AnimNode::algorithmCount(v3) <= a2)
    return &unk_2108059BE;
  v5 = (_QWORD *)FIK::AnimNode::algorithmReference(v4, a2);
  return (void *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v5 + 48))(*v5);
}

uint64_t translateResult(unsigned int a1)
{
  if (a1 > 4)
    return 3;
  else
    return dword_210805980[a1];
}

uint64_t CoreIKSolverInsertAlgorithm(uint64_t a1, unint64_t a2, _OWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  unsigned int inserted;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  _OWORD v20[3];
  FIK *v21;

  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
  if (v5)
  {
    v6 = v5;
    v7 = a3[1];
    v20[0] = *a3;
    v20[1] = v7;
    v20[2] = a3[2];
    ikinema::UserAlgorithm::create(v20, (uint64_t *)&v21);
    inserted = FIK::AnimNode::insertAlgorithmBefore(v6, a2, (uint64_t *)&v21);
    if (inserted > 4)
      v9 = 3;
    else
      v9 = dword_210805980[inserted];
    if (v21)
    {
      (*(void (**)(FIK *))(*(_QWORD *)v21 + 8))(v21);
      FIK::FIKFree(v21, v18);
    }
  }
  else
  {
    v10 = ikinemaLogObject()[1];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      CoreIKSolverInsertAlgorithm_cold_1(v10, v11, v12, v13, v14, v15, v16, v17);
    return 1;
  }
  return v9;
}

uint64_t CoreIKSolverRemoveAlgorithm(uint64_t a1, unint64_t a2)
{
  FIK::AnimNode *v3;
  FIK::AnimNode *v4;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = (FIK::AnimNode *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
  if (v3)
  {
    v4 = v3;
    if (FIK::AnimNode::algorithmCount(v3) > a2 && (FIK::AnimNode::removeAlgorithmAt(v4, a2) & 1) != 0)
      return 0;
    else
      return 2;
  }
  else
  {
    v6 = ikinemaLogObject()[1];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      CoreIKSolverRemoveAlgorithm_cold_1(v6, v7, v8, v9, v10, v11, v12, v13);
    return 1;
  }
}

FIK::AnimNode *CoreIKSolverValidateAlgorithms(uint64_t a1)
{
  FIK::AnimNode *result;

  result = (FIK::AnimNode *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
  if (result)
    return (FIK::AnimNode *)FIK::AnimNode::validateAlgorithms(result);
  return result;
}

uint64_t CoreIKBufferKeyFor(FIK *a1, unint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD v6[2];
  uint64_t v7;
  uint64_t v8;

  switch(a3)
  {
    case 3:
      ikinema::BufferDescriptor::create<FIK::Transform>(a1, a2, a4, (uint64_t)v6);
      break;
    case 2:
      _ZN7ikinema16BufferDescriptor6createIDv3_fEES0_NSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEm(a1, a2, a4, (uint64_t)v6);
      break;
    case 1:
      ikinema::BufferDescriptor::create<float>(a1, a2, a4, (uint64_t)v6);
      break;
    default:
      return -1;
  }
  v4 = v8;
  if (v6[1])
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v7 + 24))(v7, v6[0], 0, 8);
  return v4;
}

uint64_t *ikinema::BufferDescriptor::create<float>@<X0>(FIK *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned int v11;
  IKString *v12;
  unint64_t v13;
  uint64_t *result;
  uint64_t v15;
  uint64_t v16;
  void (***v17)(FIK::CrtAllocator *__hidden);
  char v18;

  v8 = *(_QWORD *)(MEMORY[0x24BEDB788] + 8);
  if (v8 < 0)
  {
    v9 = (unsigned __int8 *)(v8 & 0x7FFFFFFFFFFFFFFFLL);
    v10 = 5381;
    do
    {
      v8 = v10;
      v11 = *v9++;
      v10 = (33 * v10) ^ v11;
    }
    while (v11);
  }
  v15 = 0;
  v16 = 0;
  v17 = FIK::defaultAllocator(a1);
  v12 = (IKString *)strlen((const char *)a1);
  IKString::assign(&v15, (char *)a1, v12);
  v13 = (33
       * ((33
         * std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t)&v18, (uint64_t *)a1, a2)) ^ v8)) ^ a3;
  result = IKString::IKString((uint64_t *)a4, &v15, (uint64_t)v17);
  *(int64x2_t *)(a4 + 24) = vdupq_n_s64(4uLL);
  *(_QWORD *)(a4 + 40) = a3;
  *(_QWORD *)(a4 + 48) = v8;
  *(_QWORD *)(a4 + 56) = v13;
  if (v16)
    return (uint64_t *)((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v17)[3])(v17, v15, 0, 8);
  return result;
}

uint64_t *_ZN7ikinema16BufferDescriptor6createIDv3_fEES0_NSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEm@<X0>(FIK *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned int v11;
  IKString *v12;
  unint64_t v13;
  uint64_t *result;
  uint64_t v15;
  uint64_t v16;
  void (***v17)(FIK::CrtAllocator *__hidden);
  char v18;

  v8 = 0x8000000210805978;
  if ((0x8000000210805978 & 0x8000000000000000) != 0)
  {
    v9 = (unsigned __int8 *)(0x8000000210805978 & 0x7FFFFFFFFFFFFFFFLL);
    v10 = 5381;
    do
    {
      v8 = v10;
      v11 = *v9++;
      v10 = (33 * v10) ^ v11;
    }
    while (v11);
  }
  v15 = 0;
  v16 = 0;
  v17 = FIK::defaultAllocator(a1);
  v12 = (IKString *)strlen((const char *)a1);
  IKString::assign(&v15, (char *)a1, v12);
  v13 = (33
       * ((33
         * std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t)&v18, (uint64_t *)a1, a2)) ^ v8)) ^ a3;
  result = IKString::IKString((uint64_t *)a4, &v15, (uint64_t)v17);
  *(int64x2_t *)(a4 + 24) = vdupq_n_s64(0x10uLL);
  *(_QWORD *)(a4 + 40) = a3;
  *(_QWORD *)(a4 + 48) = v8;
  *(_QWORD *)(a4 + 56) = v13;
  if (v16)
    return (uint64_t *)((uint64_t (*)(void (***)(FIK::CrtAllocator *__hidden), uint64_t, _QWORD, uint64_t))(*v17)[3])(v17, v15, 0, 8);
  return result;
}

uint64_t CoreIKBufferContainerGet(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  if (!*a1)
    return 0;
  v2 = 72 * *a1;
  v3 = (uint64_t *)(a1[2] + 56);
  while (1)
  {
    v4 = *v3;
    v3 += 9;
    if (v4 == a2)
      break;
    v2 -= 72;
    if (!v2)
      return 0;
  }
  return ikinema::BufferContainer::buffer(a1, a2);
}

uint64_t CoreIKBufferGetType(uint64_t a1)
{
  const char *v1;
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v10;
  const char *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned int v14;

  v1 = *(const char **)(a1 + 48);
  v2 = *(_QWORD *)(MEMORY[0x24BEDB788] + 8);
  if (v2 < 0)
  {
    v3 = (unsigned __int8 *)(v2 & 0x7FFFFFFFFFFFFFFFLL);
    v4 = 5381;
    do
    {
      v2 = v4;
      v5 = *v3++;
      v4 = (33 * v4) ^ v5;
    }
    while (v5);
  }
  if (v1 == (const char *)v2)
    return 1;
  v7 = 0x8000000210805978;
  if ((0x8000000210805978 & 0x8000000000000000) != 0)
  {
    v8 = (unsigned __int8 *)(0x8000000210805978 & 0x7FFFFFFFFFFFFFFFLL);
    v9 = 5381;
    do
    {
      v7 = v9;
      v10 = *v8++;
      v9 = (33 * v9) ^ v10;
    }
    while (v10);
  }
  if (v1 == (const char *)v7)
    return 2;
  v11 = "N3FIK9TransformE";
  if (((unint64_t)"N3FIK9TransformE" & 0x8000000000000000) != 0)
  {
    v12 = (unsigned __int8 *)((unint64_t)"N3FIK9TransformE" & 0x7FFFFFFFFFFFFFFFLL);
    v13 = 5381;
    do
    {
      v11 = (const char *)v13;
      v14 = *v12++;
      v13 = (33 * v13) ^ v14;
    }
    while (v14);
  }
  if (v1 == v11)
    return 3;
  else
    return 0;
}

uint64_t CoreIKBufferGetSize(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40) * *(_QWORD *)(a1 + 32);
}

uint64_t ikinema::Buffer::arrayView<float const>(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t *v7;

  v2 = *(_QWORD *)(MEMORY[0x24BEDB788] + 8);
  if (v2 < 0)
  {
    v3 = (unsigned __int8 *)(v2 & 0x7FFFFFFFFFFFFFFFLL);
    v4 = 5381;
    do
    {
      v2 = v4;
      v5 = *v3++;
      v4 = (33 * v4) ^ v5;
    }
    while (v5);
  }
  if (*(_QWORD *)(a1 + 48) != v2)
  {
    v7 = ikinemaLogObject();
    ikinemaAssertHandler(*v7, 0, (uint64_t)"arrayView", "(m_descriptor.containsType<std::remove_cv_t<RequestedType>>()) Wrong type requested from buffer.");
  }
  return *(_QWORD *)(a1 + 64);
}

uint64_t _ZN7ikinema6Buffer9arrayViewIKDv3_fEEN3FIK11IKArrayViewIT_EEv(uint64_t a1)
{
  unint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t *v7;

  v2 = 0x8000000210805978;
  if ((0x8000000210805978 & 0x8000000000000000) != 0)
  {
    v3 = (unsigned __int8 *)(0x8000000210805978 & 0x7FFFFFFFFFFFFFFFLL);
    v4 = 5381;
    do
    {
      v2 = v4;
      v5 = *v3++;
      v4 = (33 * v4) ^ v5;
    }
    while (v5);
  }
  if (*(_QWORD *)(a1 + 48) != v2)
  {
    v7 = ikinemaLogObject();
    ikinemaAssertHandler(*v7, 0, (uint64_t)"arrayView", "(m_descriptor.containsType<std::remove_cv_t<RequestedType>>()) Wrong type requested from buffer.");
  }
  return *(_QWORD *)(a1 + 64);
}

uint64_t CoreIKGetJoints(uint64_t a1)
{
  CoreIKConstraint *v1;

  v1 = (CoreIKConstraint *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  return CoreIKConstraint::interface(v1);
}

uint64_t CoreIKGetConstraints(uint64_t a1)
{
  CoreIKConstraint *v1;

  v1 = (CoreIKConstraint *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
  return CoreIKConstraint::interface(v1);
}

_QWORD *CoreIK::IKSolverRetarget::IKSolverRetarget(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24CA6C648;
  v2 = FIK::RetargetingNode::RetargetingNode(a1 + 2);
  a1[78] = v2;
  a1[79] = v2;
  return a1;
}

uint64_t CoreIK::IKSolverRetarget::despatchGetConstraint(uint64_t a1, const void *a2, size_t a3)
{
  FIK::RetargetingNode *v5;
  uint64_t Rig;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  const void *v11;
  NSObject *v12;
  CoreIKConstraint *v14;

  v5 = (FIK::RetargetingNode *)(a1 + 16);
  Rig = FIK::AnimNode::GetRig((FIK::AnimNode *)(a1 + 16));
  v7 = FIK::RetargetingNode::constraintsCount(v5);
  if (v7)
  {
    v8 = v7;
    v9 = 0;
    v10 = (_QWORD *)(*(_QWORD *)(Rig + 192) + 8);
    while (1)
    {
      if (a3 == *v10)
      {
        v11 = a3 ? (const void *)*(v10 - 1) : &unk_2108059BE;
        if (!memcmp(a2, v11, a3))
          break;
      }
      ++v9;
      v10 += 32;
      if (v8 == v9)
        goto LABEL_9;
    }
    v14 = (CoreIKConstraint *)FIK::RetargetingNode::constraintByIndex(v5, v9);
    return CoreIKConstraint::interface(v14);
  }
  else
  {
LABEL_9:
    v12 = ikinemaLogObject()[1];
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      CoreIK::IKSolverRetarget::despatchGetConstraint(v12);
    return 0;
  }
}

BOOL CoreIK::IKSolverRetarget::despatchSolve(uint64_t a1, _OWORD *a2, uint64_t a3, int a4, _OWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  FIK::RetargetingNode *v10;
  int v11;
  int v12;
  _OWORD v14[2];
  _OWORD v15[2];

  v15[0] = 0uLL;
  v15[1] = xmmword_210802BA0;
  v10 = (FIK::RetargetingNode *)(a1 + 16);
  if (a4)
  {
    v14[0] = 0uLL;
    v14[1] = xmmword_210802BA0;
    v11 = FIK::RetargetingNode::SolveModel(a1 + 16, a2, a3, a5, a6, v14);
  }
  else
  {
    v11 = FIK::RetargetingNode::Solve(a1 + 16, a2, a3, a5, a6, v15);
  }
  v12 = v11;
  if (a8)
    FIK::RetargetingNode::GetModelSpacePose(v10, a7);
  return v12 == 2;
}

uint64_t CoreIK::IKSolverRetarget::despatchInputPoseSize(CoreIK::IKSolverRetarget *this)
{
  return *(_QWORD *)(FIK::AnimNode::GetRig((CoreIK::IKSolverRetarget *)((char *)this + 16)) + 240);
}

uint64_t CoreIK::IKSolverRetarget::despatchOutputPoseSize(CoreIK::IKSolverRetarget *this)
{
  return *(_QWORD *)(FIK::AnimNode::GetRig((CoreIK::IKSolverRetarget *)((char *)this + 16)) + 208);
}

void *CoreIK::IKSolverRetarget::despatchGetInputName(CoreIK::IKSolverRetarget *this, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(FIK::AnimNode::GetRig((CoreIK::IKSolverRetarget *)((char *)this + 16)) + 256);
  if (*(_QWORD *)(v3 + 96 * a2 + 16))
    return *(void **)(v3 + 96 * a2 + 8);
  else
    return &unk_2108059BE;
}

void *CoreIK::IKSolverRetarget::despatchGetOutputName(CoreIK::IKSolverRetarget *this, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(FIK::AnimNode::GetRig((CoreIK::IKSolverRetarget *)((char *)this + 16)) + 224);
  if (*(_QWORD *)(v3 + 544 * a2 + 16))
    return *(void **)(v3 + 544 * a2 + 8);
  else
    return &unk_2108059BE;
}

void *CoreIK::IKSolverRetarget::despatchGetOutputParentName(CoreIK::IKSolverRetarget *this, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(FIK::AnimNode::GetRig((CoreIK::IKSolverRetarget *)((char *)this + 16)) + 224);
  if (*(_QWORD *)(v3 + 544 * a2 + 40))
    return *(void **)(v3 + 544 * a2 + 32);
  else
    return &unk_2108059BE;
}

void CoreIK::IKSolverRetarget::~IKSolverRetarget(CoreIK::IKSolverRetarget *this)
{
  CoreIK::IKSolverRetarget::~IKSolverRetarget(this);
  JUMPOUT(0x212BCAFB4);
}

{
  FIK::AnimNode *v2;
  uint64_t v3;

  *((_QWORD *)this + 2) = off_24CA6BFA8;
  v2 = (CoreIK::IKSolverRetarget *)((char *)this + 16);
  if (*((_BYTE *)this + 608))
  {
    *((_QWORD *)this + 72) = 0;
    v3 = *((_QWORD *)this + 74);
    if (v3)
      (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)this + 75) + 24))(*((_QWORD *)this + 75), v3, 0, 8);
  }
  FIK::IKArray<FIK::RetargetingNode::RetargetTask>::~IKArray((uint64_t)this + 544);
  FIK::AnimNode::~AnimNode(v2);
}

uint64_t CoreIK::IKSolverRetarget::despatchSolverType(CoreIK::IKSolverRetarget *this)
{
  if (*(_BYTE *)(FIK::AnimNode::GetRig((CoreIK::IKSolverRetarget *)((char *)this + 16)) + 304))
    return 2;
  else
    return 1;
}

uint64_t CoreIK::IKSolverRetarget::despatchGetComposableInstance(CoreIK::IKSolverRetarget *this)
{
  return (uint64_t)this + 16;
}

uint64_t CoreIK::IKSolverRetarget::despatchJoints(CoreIK::IKSolverRetarget *this)
{
  return (uint64_t)this + 624;
}

uint64_t CoreIK::IKSolverRetarget::despatchConstraints(CoreIK::IKSolverRetarget *this)
{
  return (uint64_t)this + 632;
}

float CoreIK::IKSolverRetarget::despatchInputScale(CoreIK::IKSolverRetarget *this)
{
  return FIK::RetargetingNode::sourceScale((CoreIK::IKSolverRetarget *)((char *)this + 16));
}

float CoreIK::IKSolverRetarget::despatchSetInputScale(CoreIK::IKSolverRetarget *this, float a2)
{
  FIK::RetargetingNode *v2;

  v2 = (CoreIK::IKSolverRetarget *)((char *)this + 16);
  FIK::RetargetingNode::setSourceScale((uint64_t)this + 16, a2);
  return FIK::RetargetingNode::sourceScale(v2);
}

float CoreIK::IKSolverRetarget::despatchOutputScale(CoreIK::IKSolverRetarget *this)
{
  return FIK::RetargetingNode::outputScale((CoreIK::IKSolverRetarget *)((char *)this + 16));
}

float CoreIK::IKSolverRetarget::despatchSetOutputScale(CoreIK::IKSolverRetarget *this, float a2)
{
  FIK::RetargetingNode *v2;

  v2 = (CoreIK::IKSolverRetarget *)((char *)this + 16);
  FIK::RetargetingNode::setOutputScale((uint64_t)this + 16, a2);
  return FIK::RetargetingNode::outputScale(v2);
}

void CoreIK::IKSolverRetarget::despatchResetSolver(FIK::Solver **this)
{
  FIK::AnimNode::ResetNode(this + 2);
}

uint64_t CoreIK::IKSolverRetarget::despatchGetConstraintCount(CoreIK::IKSolverRetarget *this)
{
  return FIK::RetargetingNode::constraintsCount((CoreIK::IKSolverRetarget *)((char *)this + 16));
}

double CoreIK::IKSolverRetarget::despatchGetTaskTargetsDebug(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)&result = FIK::RetargetingNode::GetTaskPosDebug(a1 + 16, a2, a3).n128_u64[0];
  return result;
}

uint64_t CoreIKEnrollmentPoseSolveForDataWithHeadPoseV2(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  ikinema::rig *v8;
  FIK *EnrollmentRigV2;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v34[2];
  int v35;
  _QWORD v36[6];
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[12];
  int v44;
  _DWORD v45[4];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD v60[12];
  int v61;
  _DWORD v62[4];
  __int128 v63;
  __int128 v64;
  _OWORD v65[2];
  _OWORD v66[2];
  _OWORD v67[4];
  uint64_t v68;
  _QWORD v69[66];
  _QWORD v70[6];
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD v99[153];

  v99[152] = *MEMORY[0x24BDAC8D0];
  v8 = (ikinema::rig *)kdebug_trace();
  EnrollmentRigV2 = (FIK *)ikinema::rig::generate_EnrollmentRigV2(v8, (uint64_t)&v40);
  getUserDefaultLoggerPath(EnrollmentRigV2, &v37);
  IKString::IKString(&v57, &v40, v42);
  *(_OWORD *)v60 = *(_OWORD *)v43;
  *(_OWORD *)((char *)&v60[1] + 4) = *(_OWORD *)((char *)&v43[1] + 4);
  *(_OWORD *)&v60[5] = *(_OWORD *)&v43[5];
  *(_OWORD *)&v60[7] = *(_OWORD *)&v43[7];
  *(_OWORD *)&v60[9] = *(_OWORD *)&v43[9];
  v63 = v46;
  v64 = v47;
  v10 = v48;
  v48 = 0u;
  v65[0] = v10;
  v65[1] = v49;
  v11 = v50;
  v50 = 0u;
  v66[0] = v11;
  v66[1] = v51;
  v12 = v52;
  v13 = v53;
  v52 = 0u;
  v60[11] = v43[11];
  *(_DWORD *)((char *)v62 + 3) = *(_DWORD *)((char *)v45 + 3);
  v61 = v44;
  v62[0] = v45[0];
  *(_QWORD *)&v49 = 0;
  *(_QWORD *)&v51 = 0;
  *(_QWORD *)&v53 = 0;
  v67[0] = v12;
  v67[1] = v13;
  v67[2] = v54;
  v67[3] = v55;
  v68 = v56;
  v14 = *a1;
  v15 = a1[1];
  v16 = a1[3];
  v36[0] = a1[2];
  v36[1] = v16;
  v17 = a1[5];
  v18 = a1[6];
  v19 = a1[7];
  v36[2] = a1[4];
  v36[3] = v18;
  v36[4] = v17;
  v36[5] = v18;
  v20 = a1[8];
  v34[0] = v19;
  v34[1] = v20;
  if (v38)
    v21 = v37;
  else
    v21 = &unk_2108059BE;
  v35 = 1;
  FIK::EnrollmentPoseSolver::EnrollmentPoseSolver(v69, &v57, v14, v15, v36, v34, v21);
  FIK::IKArray<FIK::RigBoneBase>::~IKArray((uint64_t *)v67);
  FIK::IKArray<FIK::MoCapBone>::~IKArray((uint64_t *)v66);
  FIK::IKArray<FIK::MoCapTask>::~IKArray((uint64_t *)v65);
  if (v58)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v59 + 24))(v59, v57, 0, 8);
    v57 = 0;
    v58 = 0;
  }
  if (a4 == -1)
  {
    v25 = *ikinemaLogObject();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      CoreIKEnrollmentPoseSolveForDataWithHeadPoseV2_cold_1(v25, v26, v27, v28, v29, v30, v31, v32);
    v24 = 1;
  }
  else
  {
    v22 = FIK::EnrollmentPoseSolver::solve((uint64_t)v69, a2, a3, a4);
    if (v22 == 1)
      v23 = 2;
    else
      v23 = 1;
    if (v22)
      v24 = v23;
    else
      v24 = 0;
  }
  std::__optional_destruct_base<FIK::Enrollment::DataLogger,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v99);
  v96 = 0;
  if (v97)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v98 + 24))(v98, v97, 0, 8);
  v93 = 0;
  if (v94)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v95 + 24))(v95, v94, 0, 8);
  if (v92)
  {
    v89 = 0;
    if (v90)
      (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v91 + 24))(v91, v90, 0, 8);
  }
  v86 = 0;
  if (v87)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v88 + 24))(v88, v87, 0, 8);
  v83 = 0;
  if (v84)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v85 + 24))(v85, v84, 0, 8);
  v80 = 0;
  if (v81)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v82 + 24))(v82, v81, 0, 8);
  v77 = 0;
  if (v78)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v79 + 24))(v79, v78, 0, 8);
  v74 = 0;
  if (v75)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v76 + 24))(v76, v75, 0, 8);
  v69[0] = off_24CA6BFA8;
  if (v73)
  {
    v70[4] = 0;
    if (v71)
      (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v72 + 24))(v72, v71, 0, 8);
  }
  FIK::IKArray<FIK::RetargetingNode::RetargetTask>::~IKArray((uint64_t)v70);
  FIK::AnimNode::~AnimNode((FIK::AnimNode *)v69);
  if (v38)
    (*(void (**)(uint64_t, void *, _QWORD, uint64_t))(*(_QWORD *)v39 + 24))(v39, v37, 0, 8);
  FIK::IKArray<FIK::RigBoneBase>::~IKArray((uint64_t *)&v52);
  FIK::IKArray<FIK::MoCapBone>::~IKArray((uint64_t *)&v50);
  FIK::IKArray<FIK::MoCapTask>::~IKArray((uint64_t *)&v48);
  if (v41)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v42 + 24))(v42, v40, 0, 8);
    v40 = 0;
    v41 = 0;
  }
  kdebug_trace();
  return v24;
}

CFIndex CoreIKEnrollmentPoseSolveForDataWithHeadPoseV3(const char **a1, __int128 *a2, unint64_t a3, int a4, const char **a5, float *a6, FIK *a7, unint64_t a8, __n128 a9, __n128 a10)
{
  NSObject *v19;
  _BOOL8 v20;
  FIK *EnrollmentRigV3;
  void *v22;
  __n128 v23;
  float32x4_t *v24;
  uint64_t v25;
  float32x4_t v26;
  float32x4_t *v27;
  uint64_t v28;
  float32x4_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float *v33;
  float32x4_t *v34;
  _OWORD *f32;
  _OWORD *v36;
  _OWORD *v37;
  int v38;
  uint64_t Rig;
  float32x4_t *v40;
  uint64_t v41;
  float32x4_t v42;
  uint64_t v43;
  NSObject *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  FIK *v53;
  __n128 v54;
  void (***v55)(FIK::CrtAllocator *__hidden);
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  unsigned int v62;
  EnrollmentPoseSolverV4UserDefaults *v63;
  float32x4_t v65;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  float *v70;
  uint64_t v71;
  uint64_t v72[2];
  float32x4_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  unint64_t v78;
  float32x4_t *v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  float32x4_t v85;
  __n128 v86;
  uint64_t v87[4];
  uint64_t v88[4];
  uint64_t v89[10];
  uint8_t buf[4];
  const char *v91;
  int v92;
  int v93;
  int v94;
  int v95;
  std::string __p;
  char v97;
  _QWORD v98[66];
  _QWORD v99[6];
  uint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t v103;

  v103 = *MEMORY[0x24BDAC8D0];
  if (EnrollmentPoseSolverV4UserDefaults::solverVersion((EnrollmentPoseSolverV4UserDefaults *)a1) == 4)
    return CoreIKEnrollmentPoseSolveForDataWithHeadPoseV4(a1, a2, a3, a4, a5, a6, (uint64_t)a7, a8, a9, a10);
  v19 = *ikinemaLogObject();
  v20 = os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
  if (v20)
  {
    *(_DWORD *)buf = 136315138;
    v91 = "CoreIKEnrollmentPoseSolveForDataWithHeadPoseV3";
    _os_log_impl(&dword_21078E000, v19, OS_LOG_TYPE_DEFAULT, "%s: CoreIKEnrollmentPoseSolveForDataWithHeadPoseV3() called.", buf, 0xCu);
  }
  EnrollmentRigV3 = (FIK *)ikinema::rig::generate_EnrollmentRigV3((ikinema::rig *)v20, (uint64_t)&v85);
  getUserDefaultLoggerPath(EnrollmentRigV3, &v81);
  if (v82)
    v22 = v81;
  else
    v22 = &unk_2108059BE;
  FIK::EnrollmentPoseSolverV2::EnrollmentPoseSolverV2(buf, &v85, v22);
  if (v82)
    (*(void (**)(_QWORD *, void *, _QWORD, uint64_t))(*v83 + 24))(v83, v81, 0, 8);
  FIK::IKArray<FIK::RigBoneBase>::~IKArray(v89);
  FIK::IKArray<FIK::MoCapBone>::~IKArray(v88);
  FIK::IKArray<FIK::MoCapTask>::~IKArray(v87);
  if (v85.i64[1])
    (*(void (**)(unint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v86.n128_u64[0] + 24))(v86.n128_u64[0], v85.i64[0], 0, 8);
  if (v97)
  {
    FIK::Enrollment::SourceAndTargetDataLogger::exportOriginalSources((uint64_t)&__p, a1, a3, a2, a3);
    FIK::Enrollment::SourceAndTargetDataLogger::exportEnrollmentData((uint64_t)&__p, a5, a8, (uint64_t)a6);
    v23 = a9;
    v23.n128_u32[3] = 0;
    v85 = (float32x4_t)v23;
    v86 = a10;
    FIK::Enrollment::SourceAndTargetDataLogger::exportAtlasData(&__p, (const FIK::Transform *)&v85);
  }
  if (FIK::EnrollmentPoseSolverV2::inputsAreValidGivenRig((uint64_t)buf, a1, a3, a5, a8))
  {
    FIK::EnrollmentPoseSolverV2::getRigToInputSourceMap((uint64_t)buf, (FIK *)a1, a3, &v81);
    FIK::EnrollmentHelpers::extractTransformsFromPositionsArray((FIK *)a2, v83, (unint64_t)v81, (uint64_t *)&v78);
    FIK::EnrollmentPoseSolverV2::getRigToInputTargetMap((uint64_t)buf, (FIK *)a5, a8, &v75);
    FIK::EnrollmentHelpers::extractElementsAccordingToMap<FIK::Transform>(a7, v76, v75, v72);
    FIK::EnrollmentHelpers::extractElementsAccordingToMap<float>((FIK *)a6, v76, v75, &v69);
    if (v72[0])
    {
      v24 = v73;
      v25 = 32 * v72[0];
      v26 = (float32x4_t)vdupq_n_s32(0x42C80000u);
      do
      {
        *v24 = vmulq_f32(*v24, v26);
        v24 += 2;
        v25 -= 32;
      }
      while (v25);
    }
    if (v78)
    {
      v27 = v79;
      v28 = 32 * v78;
      v29 = (float32x4_t)vdupq_n_s32(0x42C80000u);
      do
      {
        *v27 = vmulq_f32(*v27, v29);
        v27 += 2;
        v28 -= 32;
      }
      while (v28);
    }
    v30 = (uint64_t)v70;
    v31 = v69;
    if (v69)
    {
      v32 = 4 * v69;
      v33 = v70;
      do
      {
        *v33 = *v33 * 100.0;
        ++v33;
        v32 -= 4;
      }
      while (v32);
    }
    v65 = vmulq_f32((float32x4_t)a9, (float32x4_t)vdupq_n_s32(0x42C80000u));
    FIK::EnrollmentPoseSolverV2::setTargetBoneLengths((uint64_t)buf, v30, v31);
    v34 = &v79[2 * v92];
    *v34 = v65;
    v34[1] = (float32x4_t)a10;
    FIK::EnrollmentPoseSolverV2::computeVirtualHips((int *)buf, (uint64_t)v79, (uint64_t)&v85);
    f32 = (_OWORD *)v79[2 * *(int *)buf].f32;
    *f32 = v85;
    f32[1] = v86;
    FIK::EnrollmentPoseSolverV2::computeVirtualLeftWrist((int *)buf, (uint64_t)v79, (uint64_t)v70, (uint64_t)&v67);
    v36 = (_OWORD *)v79[2 * v93].f32;
    *v36 = v67;
    v36[1] = v68;
    FIK::EnrollmentPoseSolverV2::computeVirtualRightWrist((int *)buf, (uint64_t)v79, (uint64_t)v70, (uint64_t)&v67);
    v37 = (_OWORD *)v79[2 * v94].f32;
    *v37 = v67;
    v37[1] = v68;
    v38 = FIK::EnrollmentPoseSolverV2::solve((uint64_t)buf, v79, v78, v73, v72[0]);
    Rig = FIK::AnimNode::GetRig((FIK::AnimNode *)v98);
    FIK::PoseConverter::PoseConverter<FIK::MoCapBone>((uint64_t *)&v85, *(_QWORD *)(Rig + 224), *(_QWORD *)(Rig + 208), (uint64_t)v73);
    FIK::PoseConverter::getGlobalTransforms((FIK::PoseConverter *)&v85, &v67);
    FIK::IKArray<unsigned int>::operator=(v72, &v67);
    *(_QWORD *)&v67 = 0;
    if ((_QWORD)v68)
      (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**((_QWORD **)&v68 + 1) + 24))(*((_QWORD *)&v68 + 1), v68, 0, 8);
    FIK::PoseConverter::~PoseConverter((FIK::PoseConverter *)&v85);
    v85 = vsubq_f32(v65, v73[2 * v95]);
    FIK::EnrollmentHelpers::addOffsetToPose(v73, v72[0], &v85);
    v40 = v73;
    if (v72[0])
    {
      v41 = 32 * v72[0];
      v42 = (float32x4_t)vdupq_n_s32(0x3C23D70Au);
      do
      {
        *v40 = vmulq_f32(*v40, v42);
        v40 += 2;
        v41 -= 32;
      }
      while (v41);
      v40 = v73;
      v43 = v72[0];
    }
    else
    {
      v43 = 0;
    }
    v54.n128_f64[0] = FIK::EnrollmentHelpers::writeElementsToArray((uint64_t)v40, v43, v76, v75, (uint64_t)a7);
    if (v97)
    {
      v55 = FIK::defaultAllocator(v53);
      v85 = 0uLL;
      v86.n128_u64[0] = 0;
      v86.n128_u64[1] = (unint64_t)v55;
      FIK::IKArray<FIK::Segment *>::reserve(&v85, v78);
      v56 = FIK::AnimNode::GetRig((FIK::AnimNode *)v98);
      v57 = *(_QWORD *)(v56 + 240);
      if (v57)
      {
        v58 = (_QWORD *)(*(_QWORD *)(v56 + 256) + 16);
        v59 = 96 * v57;
        do
        {
          if (*v58)
            v60 = (void *)*(v58 - 1);
          else
            v60 = &unk_2108059BE;
          FIK::IKArray<FIK::Segment *>::reserve(&v85, v85.i64[0] + 1);
          v61 = v85.i64[0];
          *(_QWORD *)(v86.n128_u64[0] + 8 * v85.i64[0]) = v60;
          v85.i64[0] = v61 + 1;
          v58 += 12;
          v59 -= 96;
        }
        while (v59);
      }
      if (!v97)
      {
        v63 = (EnrollmentPoseSolverV4UserDefaults *)std::__throw_bad_optional_access[abi:nn180100]();
        return EnrollmentPoseSolverV4UserDefaults::solverVersion(v63);
      }
      FIK::Enrollment::SourceAndTargetDataLogger::exportProcessedSources((uint64_t)&__p, (const char **)v86.n128_u64[0], v85.i64[0], (uint64_t)v79, v78);
      FIK::Enrollment::SourceAndTargetDataLogger::exportTargets((uint64_t)&__p, a5, a8, (uint64_t)a7, a8);
      v85.i64[0] = 0;
      if (v86.n128_u64[0])
        (*(void (**)(unint64_t, unint64_t, _QWORD, uint64_t))(*(_QWORD *)v86.n128_u64[1] + 24))(v86.n128_u64[1], v86.n128_u64[0], 0, 8);
    }
    if (v38 == 1)
      v62 = 2;
    else
      v62 = 1;
    if (v38)
      v52 = v62;
    else
      v52 = 0;
    v69 = 0;
    if (v70)
      (*(void (**)(uint64_t, float *, _QWORD, uint64_t, __n128))(*(_QWORD *)v71 + 24))(v71, v70, 0, 8, v54);
    v72[0] = 0;
    if (v73)
      (*(void (**)(uint64_t, float32x4_t *, _QWORD, uint64_t, __n128))(*(_QWORD *)v74 + 24))(v74, v73, 0, 8, v54);
    v75 = 0;
    if (v76)
      (*(void (**)(uint64_t, uint64_t *, _QWORD, uint64_t, __n128))(*(_QWORD *)v77 + 24))(v77, v76, 0, 8, v54);
    v78 = 0;
    if (v79)
      (*(void (**)(uint64_t, float32x4_t *, _QWORD, uint64_t, __n128))(*(_QWORD *)v80 + 24))(v80, v79, 0, 8, v54);
    v81 = 0;
    if (v83)
      (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t, __n128))(*(_QWORD *)v84 + 24))(v84, v83, 0, 8, v54);
  }
  else
  {
    v44 = ikinemaLogObject()[2];
    if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
      CoreIKEnrollmentPoseSolveForDataWithHeadPoseV3_cold_1(v44, v45, v46, v47, v48, v49, v50, v51);
    v52 = 1;
  }
  v98[0] = off_24CA6BFA8;
  if (v102)
  {
    v99[4] = 0;
    if (v100)
      (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v101 + 24))(v101, v100, 0, 8);
  }
  FIK::IKArray<FIK::RetargetingNode::RetargetTask>::~IKArray((uint64_t)v99);
  FIK::AnimNode::~AnimNode((FIK::AnimNode *)v98);
  if (v97)
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v52;
}

CFIndex EnrollmentPoseSolverV4UserDefaults::solverVersion(EnrollmentPoseSolverV4UserDefaults *this)
{
  CFIndex result;
  Boolean keyExistsAndHasValidFormat;

  result = forceEnrollmentPoseSolverVersion;
  if (forceEnrollmentPoseSolverVersion == -1)
  {
    keyExistsAndHasValidFormat = 0;
    result = CFPreferencesGetAppIntegerValue(CFSTR("enrollmentSolverVersion"), CFSTR("com.apple.coreik"), &keyExistsAndHasValidFormat);
    if ((unint64_t)(result - 3) >= 2 || keyExistsAndHasValidFormat == 0)
      return 3;
    else
      return result;
  }
  return result;
}

uint64_t CoreIKEnrollmentPoseSolveForDataWithHeadPoseV4(const char **a1, __int128 *a2, unint64_t a3, int a4, const char **a5, float *a6, uint64_t a7, unint64_t a8, __n128 a9, __n128 a10)
{
  NSObject *v18;
  uint8_t buf[4];
  const char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v18 = *ikinemaLogObject();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    v23 = "CoreIKEnrollmentPoseSolveForDataWithHeadPoseV4";
    _os_log_impl(&dword_21078E000, v18, OS_LOG_TYPE_DEFAULT, "%s: CoreIKEnrollmentPoseSolveForDataWithHeadPoseV4() called.", buf, 0xCu);
  }
  return CoreIKEnrollmentPoseSolveForDataWithHeadPoseV4Ex(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, 0.15, 0.1, 0.17453, -0.17453);
}

void getUserDefaultLoggerPath(FIK *a1@<X0>, _QWORD *a2@<X8>)
{
  void (***v3)(FIK::CrtAllocator *__hidden);
  const __CFString *v4;
  const __CFString *v5;
  CFTypeID v6;
  char *CStringPtr;
  IKString *v8;

  v3 = FIK::defaultAllocator(a1);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = v3;
  v4 = (const __CFString *)CFPreferencesCopyAppValue(CFSTR("selfieLogPath"), CFSTR("com.apple.coreik"));
  if (v4)
  {
    v5 = v4;
    v6 = CFGetTypeID(v4);
    if (v6 == CFStringGetTypeID())
    {
      CStringPtr = (char *)CFStringGetCStringPtr(v5, 0x8000100u);
      v8 = (IKString *)strlen(CStringPtr);
      IKString::assign(a2, CStringPtr, v8);
      CFRelease(v5);
    }
  }
}

_QWORD *FIK::EnrollmentHelpers::extractElementsAccordingToMap<FIK::Transform>@<X0>(FIK *a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  void (***v8)(FIK::CrtAllocator *__hidden);
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;

  v8 = FIK::defaultAllocator(a1);
  result = FIK::IKArray<FIK::Transform>::IKArray<FIK::Transform,void>(a4, a3, (uint64_t)v8);
  if (a3)
  {
    v10 = 0;
    do
    {
      v12 = *a2++;
      v11 = v12;
      if (v12 != -1)
      {
        v13 = (_OWORD *)((char *)a1 + 32 * v11);
        v14 = (_OWORD *)(a4[2] + v10);
        *v14 = *v13;
        v14[1] = v13[1];
      }
      v10 += 32;
      --a3;
    }
    while (a3);
  }
  return result;
}

_QWORD *FIK::EnrollmentHelpers::extractElementsAccordingToMap<float>@<X0>(FIK *a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  void (***v8)(FIK::CrtAllocator *__hidden);
  _QWORD *result;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v8 = FIK::defaultAllocator(a1);
  result = FIK::IKArray<float>::IKArray<float,void>(a4, a3, (uint64_t)v8);
  if (a3)
  {
    v10 = (_DWORD *)a4[2];
    do
    {
      v12 = *a2++;
      v11 = v12;
      if (v12 != -1)
        *v10 = *((_DWORD *)a1 + v11);
      ++v10;
      --a3;
    }
    while (a3);
  }
  return result;
}

float getDefaultTargetLength(void *__s2, char *__n)
{
  uint64_t v4;
  NSObject *v6;
  int v7;
  const char *v8;
  __int16 v9;
  void *v10;
  uint64_t v11;

  v4 = 0;
  v11 = *MEMORY[0x24BDAC8D0];
  while ((&getDefaultTargetLength(std::string_view)::kDefaultTargetLengths)[v4 + 1] != __n
       || memcmp((&getDefaultTargetLength(std::string_view)::kDefaultTargetLengths)[v4], __s2, (size_t)__n))
  {
    v4 += 3;
    if (v4 == 12)
      return 0.0;
  }
  v6 = *ikinemaLogObject();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = 136315394;
    v8 = "getDefaultTargetLength";
    v9 = 2080;
    v10 = __s2;
    _os_log_impl(&dword_21078E000, v6, OS_LOG_TYPE_DEFAULT, "%s: The target length for %s is zero! Using default length...", (uint8_t *)&v7, 0x16u);
  }
  return *(float *)&(&getDefaultTargetLength(std::string_view)::kDefaultTargetLengths)[v4 + 2];
}

uint64_t CoreIKEnrollmentPoseSolveForDataWithHeadPoseV4Ex(const char **a1, __int128 *a2, unint64_t a3, int a4, const char **a5, float *a6, uint64_t a7, unint64_t a8, __n128 a9, __n128 a10, float a11, float a12, float a13, float a14)
{
  NSObject *v25;
  _BOOL8 v26;
  FIK *v27;
  uint64_t v28;
  const char *v29;
  const char *v30;
  size_t v31;
  __int128 v32;
  __int128 v33;
  _OWORD *v34;
  float DefaultTargetLength;
  char *v36;
  const char *v37;
  size_t v38;
  char *v39;
  uint64_t v40;
  __n128 v41;
  void *v42;
  char v43;
  __n128 *v44;
  int v45;
  uint64_t v46;
  int *v47;
  unint64_t v48;
  uint64_t v49;
  int *v50;
  uint64_t v51;
  _OWORD *v52;
  __int128 v53;
  _OWORD *v54;
  unsigned int v55;
  __int128 v60;
  __n128 v61;
  __n128 v62;
  uint64_t v63;
  int *v64;
  uint64_t v65;
  char v66;
  _DWORD v67[5];
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71[2];
  __int128 *v72;
  void (***v73)(FIK::CrtAllocator *__hidden);
  uint64_t v74[2];
  _OWORD *v75;
  void (***v76)(FIK::CrtAllocator *__hidden);
  __n128 buf[51];
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  v25 = *ikinemaLogObject();
  v26 = os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
  if (v26)
  {
    buf[0].n128_u32[0] = 136315138;
    *(unint64_t *)((char *)buf[0].n128_u64 + 4) = (unint64_t)"CoreIKEnrollmentPoseSolveForDataWithHeadPoseV4Ex";
    _os_log_impl(&dword_21078E000, v25, OS_LOG_TYPE_DEFAULT, "%s: CoreIKEnrollmentPoseSolveForDataWithHeadPoseV4Ex() called.", (uint8_t *)buf, 0xCu);
  }
  v74[0] = 0;
  v74[1] = 0;
  v75 = 0;
  v76 = FIK::defaultAllocator((FIK *)v26);
  v71[0] = 0;
  v71[1] = 0;
  v72 = 0;
  v73 = FIK::defaultAllocator((FIK *)v76);
  FIK::IKArray<FIK::Transform>::reserve(v74, a3);
  v27 = (FIK *)FIK::IKArray<FIK::Enrollment::RaySource>::reserve(v71, a8);
  if (a3)
  {
    v28 = v74[0];
    do
    {
      v30 = *a1++;
      v29 = v30;
      v31 = strlen(v30);
      v32 = *a2++;
      v33 = v32;
      HIDWORD(v33) = 0;
      v60 = v33;
      v27 = (FIK *)FIK::IKArray<FIK::Transform>::reserve(v74, v28 + 1);
      v34 = &v75[2 * v74[0]];
      *(_QWORD *)v34 = v29;
      *((_QWORD *)v34 + 1) = v31;
      v34[1] = v60;
      v28 = ++v74[0];
      --a3;
    }
    while (a3);
  }
  for (; a8; --a8)
  {
    DefaultTargetLength = *a6;
    if (*a6 == 0.0)
    {
      v36 = (char *)strlen(*a5);
      DefaultTargetLength = getDefaultTargetLength((void *)*a5, v36);
    }
    v37 = *a5++;
    v38 = strlen(v37);
    v27 = (FIK *)FIK::IKArray<FIK::Enrollment::RaySource>::reserve(v71, v71[0] + 1);
    v39 = (char *)v72 + 24 * v71[0];
    *(_QWORD *)v39 = v37;
    *((_QWORD *)v39 + 1) = v38;
    *((float *)v39 + 4) = DefaultTargetLength;
    ++v71[0];
    ++a6;
  }
  getUserDefaultLoggerPath(v27, &v68);
  v41 = a9;
  v41.n128_u32[3] = 0;
  v61 = v41;
  v62 = a10;
  v42 = v68;
  if (!v69)
    v42 = &unk_2108059BE;
  FIK::EnrollmentPoseSolverV4::EnrollmentPoseSolverV4((uint64_t)buf, v75, v74[0], v72, v71[0], &v61, a4, 100.0, v40, (uint64_t)v42, v69);
  if (a11 <= 0.0 || a12 <= 0.0)
  {
    v43 = 0;
    v66 = 0;
    v44 = (__n128 *)&v66;
  }
  else
  {
    *(float *)v67 = a11;
    *(float *)&v67[1] = a12;
    v43 = 1;
    v44 = (__n128 *)v67;
    *(float *)&v67[2] = a13;
    *(float *)&v67[3] = a14;
  }
  v44[1].n128_u8[0] = v43;
  FIK::EnrollmentPoseSolverV4::setNeckCurving(buf, v44);
  FIK::EnrollmentPoseSolverV4::logInput((uint64_t)buf);
  v45 = FIK::EnrollmentPoseSolverV4::solve((FIK::EnrollmentPoseSolverV4 *)buf);
  FIK::EnrollmentPoseSolverV4::logOutput((FIK::EnrollmentPoseSolverV4 *)buf);
  if (v45 == 2)
  {
    v46 = 1;
  }
  else
  {
    FIK::EnrollmentPoseSolverV4::outputTargetJointPoses((FIK::EnrollmentPoseSolverV4 *)buf, &v61);
    v47 = v64;
    if (v63)
    {
      v48 = v62.n128_u64[0];
      v49 = 4 * v63;
      v50 = v64;
      do
      {
        v51 = *v50++;
        v52 = (_OWORD *)(v48 + 32 * v51);
        v53 = v52[1];
        v54 = (_OWORD *)(a7 + 32 * v51);
        *v54 = *v52;
        v54[1] = v53;
        v49 -= 4;
      }
      while (v49);
    }
    if (v45 == 1)
      v55 = 2;
    else
      v55 = 1;
    if (v45)
      v46 = v55;
    else
      v46 = 0;
    v63 = 0;
    if (v47)
      (*(void (**)(uint64_t, int *, _QWORD, uint64_t))(*(_QWORD *)v65 + 24))(v65, v47, 0, 8);
    v61.n128_u64[0] = 0;
    if (v62.n128_u64[0])
      (*(void (**)(unint64_t, unint64_t, _QWORD, uint64_t))(*(_QWORD *)v62.n128_u64[1] + 24))(v62.n128_u64[1], v62.n128_u64[0], 0, 8);
  }
  FIK::EnrollmentPoseSolverV4::~EnrollmentPoseSolverV4((FIK::EnrollmentPoseSolverV4 *)buf);
  if (v69)
    (*(void (**)(uint64_t, void *, _QWORD, uint64_t))(*(_QWORD *)v70 + 24))(v70, v68, 0, 8);
  v71[0] = 0;
  if (v72)
    ((void (*)(void (***)(FIK::CrtAllocator *__hidden), __int128 *, _QWORD, uint64_t))(*v73)[3])(v73, v72, 0, 8);
  v74[0] = 0;
  if (v75)
    ((void (*)(void (***)(FIK::CrtAllocator *__hidden), _OWORD *, _QWORD, uint64_t))(*v76)[3])(v76, v75, 0, 8);
  return v46;
}

uint64_t std::__optional_destruct_base<FIK::Enrollment::DataLogger,false>::~__optional_destruct_base[abi:nn180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_BYTE *)(a1 + 1192))
  {
    v2 = MEMORY[0x24BEDB7E8];
    v3 = *MEMORY[0x24BEDB7E8];
    *(_QWORD *)(a1 + 608) = *MEMORY[0x24BEDB7E8];
    v4 = *(_QWORD *)(v2 + 24);
    *(_QWORD *)(a1 + 608 + *(_QWORD *)(v3 - 24)) = v4;
    MEMORY[0x212BCAEB8](a1 + 616);
    std::ostream::~ostream();
    MEMORY[0x212BCAF90](a1 + 1024);
    *(_QWORD *)(a1 + 24) = v3;
    *(_QWORD *)(a1 + 24 + *(_QWORD *)(v3 - 24)) = v4;
    MEMORY[0x212BCAEB8](a1 + 32);
    std::ostream::~ostream();
    MEMORY[0x212BCAF90](a1 + 440);
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
  }
  return a1;
}

void FIK::EnrollmentPoseSolverV4::~EnrollmentPoseSolverV4(FIK::EnrollmentPoseSolverV4 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*((_BYTE *)this + 800) && *((char *)this + 799) < 0)
    operator delete(*((void **)this + 97));
  *((_QWORD *)this + 90) = 0;
  v2 = *((_QWORD *)this + 92);
  if (v2)
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)this + 93) + 24))(*((_QWORD *)this + 93), v2, 0, 8);
  *((_QWORD *)this + 86) = 0;
  v3 = *((_QWORD *)this + 88);
  if (v3)
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)this + 89) + 24))(*((_QWORD *)this + 89), v3, 0, 8);
  *((_QWORD *)this + 82) = 0;
  v4 = *((_QWORD *)this + 84);
  if (v4)
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)this + 85) + 24))(*((_QWORD *)this + 85), v4, 0, 8);
  FIK::PoseConverter::~PoseConverter((FIK::EnrollmentPoseSolverV4 *)((char *)this + 432));
  FIK::IKArray<FIK::RigBoneBase>::~IKArray((uint64_t *)this + 44);
  FIK::IKArray<FIK::MoCapBone>::~IKArray((uint64_t *)this + 40);
  FIK::IKArray<FIK::MoCapTask>::~IKArray((uint64_t *)this + 36);
  if (*((_QWORD *)this + 15))
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 16) + 24))(*((_QWORD *)this + 16), *((_QWORD *)this + 14), 0, 8);
    *((_QWORD *)this + 14) = 0;
    *((_QWORD *)this + 15) = 0;
  }
  *((_QWORD *)this + 4) = 0;
  v5 = *((_QWORD *)this + 6);
  if (v5)
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)this + 7) + 24))(*((_QWORD *)this + 7), v5, 0, 8);
  *(_QWORD *)this = 0;
  v6 = *((_QWORD *)this + 2);
  if (v6)
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)this + 3) + 24))(*((_QWORD *)this + 3), v6, 0, 8);
}

_QWORD *FIK::IKArray<float>::IKArray<float,void>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  size_t v6;
  void *v7;

  v5 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  *a1 = a2;
  a1[1] = v5;
  if (v5)
  {
    v6 = 4 * v5;
    v7 = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a3 + 16))(a3, 4 * v5, 4);
    a1[2] = v7;
    a1[3] = a3;
    if (v6)
      bzero(v7, v6);
  }
  else
  {
    a1[2] = 0;
    a1[3] = a3;
  }
  return a1;
}

